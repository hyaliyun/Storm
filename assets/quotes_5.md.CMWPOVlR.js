import{_ as c,o as r,c as n,a as t,m as d,t as m,C as _,M as g,U as y,f as p,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},P={class:"poem-container"},T={class:"review"},C={class:"review-title"},S={class:"review-content"};function q(a,e,l,u,i,o){return r(),n("div",P,[t("div",T,[t("div",C,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),d(m(l.poem.prompt),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",S,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),d(m(l.poem.completion),1)])])])}const A=c(k,[["render",q],["__scopeId","data-v-3590fd81"]]),j=JSON.parse(`[{"prompt":"Create an optimization algorithm for a Machine Learning model in Python. The algorithm should use the Bayesian Optimization library ScikitOptimize and optimize both the model parameters and hyperparameters to maximize the accuracy. Not applicable","completion":"import numpy as np from skopt.space import Integer, Real from skopt import Optimizer from sklearn.model_selection import cross_val_score # Define the search space search_space = [ Integer(2, 10, name=\\"num_layers\\"), Integer(4, 32, name=\\"num_units\\"), Real(10**-5, 10**0, \\"log-uniform\\", name=\\"learning_rate\\"), Real(10**-5, 10**0, \\"log-uniform\\", name=\\"weight_regularization\\"), Integer(2, 5, name=\\"dropout_rate\\") ] # Define the optimizer opt = Optimizer(search_space, n_random_starts=100, acq_func=\\"EI\\") # Define the objective @opt.objective def objective(parameters): # Set the parameters of the model model.set_params(parameters) # Calculate the cross-validation score cv_score = cross_val_score(model, X, y).mean() # Return the negative score to minimize return -cv_score # Optimize the model opt.maximize(init_points=10, n_iter=100)"},{"prompt":"Create a Python program to calculate the sum of the nth row of Pascal's Triangle. Not applicable","completion":"def pascal_triangle(n): rows = [] for i in range(1, n + 1): row = [1] for j in range(1, i): row.append(rows[i-2][j-1] + rows[i-2][j]) row.append(1) rows.append(row) return rows n = 8 result = pascal_triangle(n) sum_of_row = sum(result[n-1]) print(f\\"The sum of the {n}th row of Pascal's Triangle is {sum_of_row}.\\")"},{"prompt":"Write a code in python to remove given character from a given string. given_string = Hello world! character = l","completion":"def remove_char(given_string, character): new_string = given_string.replace(character, \\"\\") return new_string"},{"prompt":"Given a JSON record of a customer, write a Python program to extract the customer's name. { name: John Smith, age: 35 }","completion":"import json data = json.loads('{ \\"name\\": \\"John Smith\\", \\"age\\": 35 }') customer_name = data[\\"name\\"] print(customer_name)"},{"prompt":"Write a function in Python to Print a given string in Reverse order. string = Welcome to my site!","completion":"def reverseString(string): revString = '' for i in range(len(string)-1, -1, -1): revString += string[i] return revString"},{"prompt":"Create a Python program that sorts a list of tuples by the second item. list_of_tuples = [('Apple', 2), ('Orange', 1), ('Banana', 3), ('Grape', 4)]","completion":"def sort_by_second_item(list_of_tuples): return sorted(list_of_tuples, key=lambda item: item[1]) sorted_list = sort_by_second_item(list_of_tuples) print(sorted_list) # Output: [('Orange', 1), ('Apple', 2), ('Banana', 3), ('Grape', 4)]"},{"prompt":"Create a machine learning model in Python that can classify a set of samples into two classes. Sample1: 0.8, 0.1, 0.3 Sample2: 1.0, 0.4, 0.7 Sample3: 0.4, 0.5, 0.9 Sample4: 0.2, 0.7, 0.8","completion":"import numpy as np from sklearn.svm import SVC X = np.array([[0.8, 0.1, 0.3], [1.0, 0.4, 0.7], [0.4, 0.5, 0.9], [0.2, 0.7, 0.8]]) y = np.array([0, 1, 0, 1]) model = SVC() model.fit(X, y)"},{"prompt":"Design a class to represent a car in the Python programming language.","completion":"class Car: def __init__(self, make, model, year): self.make = make self.model = model self.year = year def get_make(self): return self.make def get_model(self): return self.model def get_year(self): return self.year def set_make(self, make): self.make = make def set_model(self, model): self.model = model def set_year(self, year): self.year = year"},{"prompt":"Write a function in Python to count the occurrences of a given character in a string. string: hello world, character: 'l'","completion":"def count_char(s, c): count = 0 for ch in s: if ch == c: count += 1 return count print(count_char('hello world', 'l'))"},{"prompt":"Create a REST API in Python using the Flask framework. The API should provide a GET endpoint to get a list of users from a database, and a POST endpoint for creating new users in the database. not applicable","completion":"from flask import Flask, request, jsonify import mysql.connector # create a Flask app app = Flask(__name__) # connect to the database mydb = mysql.connector.connect( host=\\"host\\", user=\\"username\\", passwd=\\"password\\", database=\\"databasename\\" ) # create a GET endpoint @app.route('/users', methods=['GET']) def get_users(): cur = mydb.cursor() cur.execute(\\"SELECT * FROM users\\") results = cur.fetchall() return jsonify(results) # create a POST endpoint @app.route('/users', methods=['POST']) def create_user(): data = request.get_json() username = data['username'] password = data['password'] cur = mydb.cursor() cur.execute('INSERT INTO users (username, password) VALUES (%s, %s)', (username, password)) mydb.commit() return jsonify({'message': 'User created successfully'}) # run the app if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Design a program in Python that counts the number of words in a paragraph and returns the count.","completion":"def count_paragraph_words(par): par = par.split() return len(par)"},{"prompt":"Write a python program to convert a time string hh:mm:ss into total number of seconds time = 08:11:15","completion":"time_in_secs = 8 * 3600 + 11 * 60 + 15"},{"prompt":"Create a Python code snippet for querying a database and converting the data into a Pandas DataFrame. A SQL query that returns column names name, age, gender, and locatio","completion":"import pandas as pd import sqlite3 conn = sqlite3.connect('example.db') df = pd.read_sql_query(\\"SELECT name, age, gender, location FROM table_name\\", conn) conn.close()"},{"prompt":"Create a program in Python that takes text as an input and returns keywords and key phrases. text = This is some text I want to analyze and get key phrases and keywords from.","completion":"# import libraries #import nltk #nltk.download('popular') from textblob import TextBlob # define text text = \\"This is some text I want to analyze and get key phrases and keywords from.\\" # analyze text blob = TextBlob(text) # extract keywords keywords = [word for (word, score) in blob.keywords] print('Keywords:', ', '.join(keywords)) # extract key phrases key_phrases = [phrase for phrase in blob.noun_phrases ] print('Key Phrases:', ', '.join(key_phrases))"},{"prompt":"Write a Python program to search for a given element in multiple lists my_list1 = [2, 3, 4, 5] my_list2 = [7, 9, 5] elem = 5","completion":"def search_elem(my_list1, my_list2, elem): for list in [my_list1, my_list2]: found = False for val in list: if val == elem: found = True break if found: return True return False found = search_elem(my_list1, my_list2, elem) print(found)"},{"prompt":"Generate a Random Forest classifier in Python to categorize emails into two classes spam and notspam. Not applicable","completion":"# Random Forest classifier setup from sklearn.ensemble import RandomForestClassifier # Sample data X = [['email_1'], ['email_2'], ...] y = [0, 1, ...] # 0 is not-spam, 1 is spam # Train the model model = RandomForestClassifier(n_estimators=100) model.fit(X, y) # Make predictions predictions = model.predict(X_test)"},{"prompt":"Write a python class to represent a triangle object that has the attributes length of each side.","completion":"class Triangle: def __init__(self, side1, side2, side3): self.side1 = side1 self.side2 = side2 self.side3 = side3 def get_area(self): s = (self.side1 + self.side2 + self.side3) / 2 area = (s*(s - self.side1)*(s - self.side2) * (s - self.side3)) ** 0.5 return area"},{"prompt":"Generate a python program that creates a new list by appending an element to the last of an existing list. [1, 2, 3]","completion":"def appendElementToList(list, element): list.append(element) return list list = [1, 2, 3] element = 4 print(appendElementToList(list, element))"},{"prompt":"Make Python program to filter out all even numbers from a given list [10, 11, 5, 16, 4, 9]","completion":"def filter_even(arr): result = [] for i in arr: if i % 2 != 0: result.append(i) return result"},{"prompt":"Given Python code, fix the bug. def my_function(n): while n > 1000 : n = n/10 return n n = 2000 print(my_function(n))","completion":"def my_function(n): while n > 1000 : n = n//10 return n n = 2000 print(my_function(n))"},{"prompt":"Write a Python program that prints the Fibonacci sequence up to n terms.","completion":"def print_fibonacci_sequence(n): a = 0 b = 1 print(a, end=' ') print(b, end=' ') for i in range(2, n): c = a + b a = b b = c print(c, end=' ') n = 10 print_fibonacci_sequence(n)"},{"prompt":"Create a Python function to search for a substring in a string. The function should take two arguments, the haystack string and the needle string, and should return a boolean indicating whether the substring was found or not. haystack: This is a string needle: is","completion":"def contains_substring(haystack, needle): return needle in haystack # Usage example contains_substring(\\"This is a string\\", \\"is\\") # returns True contains_substring(\\"This is a string\\", \\"xyz\\") # returns False"},{"prompt":"Assemble a Python program to find a pattern Find all the numbers in the array [1, 2, 3, 5, 7, 8] which are divisible by 3.","completion":"def find_pattern(arr): div_by_3 = [] for num in arr: if num % 3 == 0: div_by_3.append(num) return div_by_3"},{"prompt":"Write a Python program to find the closest match of a given list of integers in another. arr1 = [1, 5, 12, 36] arr2 = [2, 4, 5, 6, 8, 9, 11, 12, 15, 21]","completion":"def closest_match(arr1, arr2): closest_match = None min_diff = float('inf') for x in arr1: for y in arr2: diff = abs(x - y) if diff < min_diff: min_diff = diff closest_match = y return closest_match"},{"prompt":"Develop a custom word embedding model in Python using word2vec that takes as inputs a corpus of documents and outputs representations of words. Not applicable","completion":"# Import libraries import gensim from gensim.test.utils import common_texts from gensim.models import Word2Vec # Define the input corpus docs = [\\"this is a sentence\\", \\"this is also a sentence\\", \\"this sentence is not like the others\\"] # Create the word2vec model model = Word2Vec(docs, size=10, window=3, min_count=1, workers=4) # Get the vocabulary words = list(model.wv.vocab) # Get word vectors word_vectors = model.wv[words]"},{"prompt":"Create a python function that stores the elements of a list in a dictionary. list = ['apple', 'orange', 'banana']","completion":"def list_to_dict(list): dictionary = {} for item in list: dictionary[item] = 0 return dictionary"},{"prompt":"Create a class in Python to represent a realworld employee object. This class should contain attributes like name, ID, and salary. Not applicable","completion":"class Employee: def __init__(self, name, ID, salary): self.name = name self.ID = ID self.salary = salary employee = Employee('John', '123456', 50000)"},{"prompt":"Generate a correct python program to classify a given text document into one of three categories. The text document contains articles about sports, politics and business.","completion":"def classify_document(doc): words = doc.split() sports_words = 0 politics_words = 0 business_words = 0 for word in words: if word in sports_words: sports_words += 1 elif word in politics_words: politics_words += 1 elif word in business_words: business_words += 1 if sports_words > politics_words and sports_words > business_words: return \\"sports\\" elif politics_words > sports_words and politics_words > business_words: return \\"politics\\" else: return \\"business\\""},{"prompt":"dentify (classify) the programming language used in the following code snippet. # Start code mylist = [1, 2, 3, 'hello'] for item in mylist: print(item) # End code","completion":"Python"},{"prompt":"Create a Python script that takes a number and prints the multiplication table for that number. Number: 4","completion":"num = 4 # Take input # To take input from the user # num = int(input(\\"Display multiplication table of? \\")) # Iterate 10 times from i = 1 to 10 for i in range(1, 11): print(num, 'x', i, '=', num*i)"},{"prompt":"Suggest a way to make this Python function more efficient: def divide(nums): result = [] for num in nums: if num % 2 == 0: result.append(num) return resul","completion":"def divide(nums): return [num for num in nums if num % 2 == 0]"},{"prompt":"Generate an artificial neural network algorithm in Python for classification.","completion":"import numpy as np from keras.models import Sequential from keras.layers import Dense # Generate data X, y = np.random.rand(1000, 10), np.random.randint(2, size = (1000, 1)) # Define model model = Sequential() model.add(Dense(64, input_dim=10, activation='relu')) model.add(Dense(64, activation='relu')) model.add(Dense(1, activation='sigmoid')) # Compile model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Fit model model.fit(X, y, epochs=20, batch_size=32)"},{"prompt":"Design a program in Python to search a tree using a BreadthFirst Search.","completion":"def BFS(tree, item): # Create an empty queue for BFS queue = [] # Enqueue the root of tree queue.append(tree) # Do till the queue is empty while(len(queue) > 0): # Dequeue an item from queue item = queue.pop(0) # If the dequeued item is the item we are looking for then return if item == item: return item # Enqueue the left node if item.left is not None: queue.append(item.left) # Right node enqueue if item.right is not None: queue.append(item.right) # Item not found return None"},{"prompt":"Write a Python program which takes a string and returns the first nonrepeated character. String: hello","completion":"def first_non_repeated_char(input): counts = {} chars = [] for char in input: if char in counts: counts[char] += 1 else: counts[char] = 1 chars.append(char) for char in chars: if counts[char] == 1: return char return None"},{"prompt":"Write a Python program convert a list with nested levels of tuples and lists into a list of strings. input_list = [('a', 'b', ('c', ['d', 'e', 'f'])), 'g', ['h', ['i', 'j']]]","completion":"output_list = [] def flatten_list(my_list): for item in my_list: if isinstance(item, list): flatten_list(item) elif isinstance(item, tuple): flatten_list(list(item)) else: output_list.append(item) flatten_list(input_list) print(output_list)"},{"prompt":"Generate a Python program to classify news articles into topics. Not applicable","completion":"import nltk from nltk.corpus import stopwords from nltk.tokenize import word_tokenize from nltk.stem import WordNetLemmatizer from sklearn.feature_extraction.text import CountVectorizer from sklearn.feature_extraction.text import TfidfTransformer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB stop_words = set(stopwords.words('english')) lemmatizer = WordNetLemmatizer() # get the data news_data = open('news.txt').read() # preprocess it words = word_tokenize(news_data) words = [w for w in words if not w in stop_words] words = [lemmatizer.lemmatize(w) for w in words] news_data = ' '.join(words) # build the model vectorizer = CountVectorizer() features = vectorizer.fit_transform([news_data]) transformer = TfidfTransformer() tfidf = transformer.fit_transform(features) # split the data X = tfidf.todense() y = ['politics', 'sports', 'finance', 'health'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # train the model clf = MultinomialNB().fit(X_train, y_train) # test the model print(clf.score(X_test, y_test))"},{"prompt":"Generate a programmatically sound MIDI sequence using Python. Not applicable","completion":"import mido from mido import MidiFile # Create MIDI file object mid = MidiFile() # Create track for beat and one for notes beat = MidiTrack() notes = MidiTrack() # Append tracks to midi object mid.tracks.append(beat) mid.tracks.append(notes) # Add beats to beat track beat.append(Message('program_change', program=12, time=0)) beat.append(Message('note_on', note=60, velocity=64, time=0)) # Generate random notes for notes track # constrained by midi scale for i in range(100): note = random.randrange(127) pitch = mido.note_to_midi[note] on = random.randrange(127) off = random.randrange(127) notes.append(Message('note_on', note=pitch, velocity=on, time=i)) notes.append(Message('note_off', note=pitch, velocity=off, time=i + 3)) # Save to file mid.save('song.mid')"},{"prompt":"Write a Python code snippet to sum the elements of two given lists. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"def sum_lists(list1, list2): return [a + b for a, b in zip(list1, list2)]"},{"prompt":"dentify which of the following are palindromes in Python. words = ['radar', 'mom', 'dad', 'civic']","completion":"palindromes = [] for word in words: if word == word[::-1]: palindromes.append(word) print(palindromes) # prints ['radar', 'mom', 'dad', 'civic']"},{"prompt":"Create a Python function that takes a string as an argument and reverses it. testing","completion":"def reverse_string(str_input): reversed_string = '' index = len(str_input) while index > 0: reversed_string += str_input[ index - 1 ] index = index - 1 return reversed_string print(reverse_string(\\"testing\\"))"},{"prompt":"Generate a Python program to produce a poem given a few keywords as input sky, moon, star","completion":"def create_poem(keywords): poem = \\"The night sky is so beautiful nFill with stars, moon and \\" + keywords[0] + \\".nNo matter how dark it is now,nHope will come if we look above.\\" poem += \\"nnThe \\" + keywords[0] + \\" will shining its light,nBring calm and peace in the night.nAlong with the stars, and the \\" + keywords[1] + \\" above,nLighting our path and giving us love.\\" poem += \\"nnThough life can be hard, don't give up nLook above, between the \\" + keywords[2] + \\". nShine through the darkness and keep strong,nWe will find hope, just like the sun. return poem"},{"prompt":"Generate a random password in Python. It should include digits, symbols and upper and lowercase letters.","completion":"import random import string def generate_password(): lettersAndDigits = string.ascii_letters + string.digits password = ''.join(random.choice(lettersAndDigits) for i in range(12)) return password"},{"prompt":"Write a Python program to generate a random password. The program should include at least two types of characters (numbers and symbols) and the length of the password should be between 8 and 16. Not applicable","completion":"import random import string def generate_password(): chars = string.ascii_lowercase + string.digits + string.punctuation size = random.randint(8, 16) return ''.join(random.choice(chars) for _ in range(size)) print(generate_password())"},{"prompt":"Write a Python program that accepts two input strings and finds the longest common substring among them. string1: abcdjfgh, string2: abcdjfeeee","completion":"def longest_common_substring(string1, string2): x = len(string1) y = len(string2) table = [[0]*(y+1) for _ in range(x+1)] longest, x_longest = 0, 0 for i in range(x): for j in range(y): if string1[i] == string2[j]: c = table[i][j] + 1 table[i+1][j+1] = c if c > longest: longest = c x_longest = i+1 return string1[x_longest-longest: x_longest] string1 = \\"abcdjfgh\\" string2 = \\"abcdjfeeee\\" print(longest_common_substring(string1, string2))"},{"prompt":"Write a Python program to convert a given Roman number to its integer numerical equivalent.","completion":"def romanToInt(s): values = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } number = 0 for i in range(len(s)): if i == 0 or values[s[i]] <= values[s[i-1]]: number += values[s[i]] else: number += values[s[i]] - 2*values[s[i-1]] return number"},{"prompt":"Create a class called Employee in Python.","completion":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary def get_name(self): return self.name def get_age(self): return self.age def get_salary(self): return self.salary def set_name(self, name): self.name = name def set_age(self, age): self.age = age def set_salary(self, salary): self.salary = salary"},{"prompt":"Compare two strings to check if they are anagrams or not in Python. “silent”, “listen”","completion":"def is_anagram(w1, w2): # Check if lengths are equal if len(w1) == len(w2): # Sort the strings s1 = sorted(w1) s2 = sorted(w2) # Check if sorted strings are equal if s1 == s2: return True return False # Example w1 = \\"silent\\" w2 = \\"listen\\" print(is_anagram(w1, w2)) #Output: True"},{"prompt":"Create a Python function for converting a list of strings into a dictionary of unique words and their respective counts ['this', 'is', 'a', 'sentence', 'with', 'repeated', 'words', 'this', 'sentence', 'contains', 'four', 'unique', 'words']","completion":"def string_counter(str_list): word_count = {} for i in str_list: if i not in word_count: word_count[i] = 1 else: word_count[i] += 1 return word_count my_list = ['this', 'is', 'a', 'sentence', 'with', 'repeated', 'words', 'this', 'sentence', 'contains', 'four', 'unique', 'words'] print(string_counter(my_list)) # Output: {'this': 2, 'is': 1, 'a': 1, 'sentence': 2, 'with': 1, 'repeated': 1, 'words': 2, 'contains': 1, 'four': 1, 'unique': 1}"},{"prompt":"Create an endtoend machine learning system in Python by using a deep neural network to solve a multiclass classification problem. Not applicable","completion":"# Importing Libraries import numpy as np from keras.models import Sequential from keras.layers import Dense # Defining Input and Output x = np.array([[1, 3], [1, 4], [2, 4], [3, 1], [4, 1], [4, 2]]) y = np.array([[1], [1], [2], [3], [3], [2]]) # Defining and Compiling the Model model = Sequential() model.add(Dense(4, input_dim=2, activation='relu')) model.add(Dense(1, activation='sigmoid')) model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) # Training the Model model.fit(x, y, epochs=100, batch_size=5) # Testing the Model test_x = np.array([[5, 2], [4, 3]]) results = model.predict(test_x) print(\\"Classes predicted: \\", np.round(results))"},{"prompt":"Create a for loop in python to print all the items in the given list. List = [1, 2, 3, 4]","completion":"for item in List: print(item)"},{"prompt":"Design a Python program to generate a frequency distribution report given a list of input words. [‘hello’, ‘world’, ‘hello’, ‘welcome’, ’world’]","completion":"from collections import Counter def print_frequency_report(words): word_frequencies = Counter(words) print('WordtFrequency') print('==============') for word, frequency in word_frequencies.items(): print('{}t{}'.format(word, frequency))"},{"prompt":"Write a Python code for feature engineering.","completion":"import pandas as pd def feature_engineering(df): ''' Function to perform feature engineering steps on a dataframe ''' # Drop columns with missing values df = df.dropna(axis=1) # Check for outliers df = df[(df < 3 * df.std()).all(axis=1)] # Identify and remove highly correlated values corr_matrix = df.corr().abs() upper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool)) to_drop = [column for column in upper.columns if any(upper[column] > 0.95)] df.drop(columns = to_drop, inplace=True) # Normalize data for col in df.columns: df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min()) return df df = pd.read_csv('data.csv') df = feature_engineering(df)"},{"prompt":"Create a python function to compute the area of a triangle with given sides. a = 3 b = 5 c = 4","completion":"def calculateTriangleArea(a, b, c): s = (a + b + c) / 2 area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 return area area = calculateTriangleArea(a, b, c) print(\\"Area of triangle is %.2f\\" % area)"},{"prompt":"Write an algorithm in Python to compute the total number of distinct pairs (x, y) such that ax + by = c. a = 2, b = 2, and c = 4","completion":"def countPairs(a, b, c): count = 0 for x in range(0, c + 1): for y in range(0, c + 1): if a * x + b * y == c: count += 1 return count a = 2 b = 2 c = 4 print(countPairs(a, b, c))"},{"prompt":"This code defines four models: Event, Rule, Blacklist, and Script. Each model has its own fields and methods. The models are stored in a database table with the specified names. The code also includes the necessary imports and license information.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- # # models.py # # Copyright 2012 Thomas Grainger <tagrain@gmail.com> # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU Affero General Public License as # published by the Free Software Foundation; version 3. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU Affero General Public License for more details. # # You should have received a copy of the GNU Affero General Public # License along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, # MA 02110-1301, USA. # # from django.db import models class Event(models.Model): id = models.BigIntegerField(db_column= \\"event_id\\", primary_key=True) username = models.CharField(max_length=765) radius_account_id = models.CharField(max_length=765) radius_session_id = models.CharField(max_length=765) radius_info = models.TextField() ip_src = models.CharField(max_length=765) ip_dst = models.CharField(max_length=765) start = models.DateTimeField() finish = models.DateTimeField() alerts = models.BigIntegerField() blacklist = models.ForeignKey(\\"Blacklist\\", db_column = \\"blacklist\\") rule = models.ForeignKey(\\"Rule\\", db_column = \\"rule\\") rule_class = models.CharField(max_length=93) def __unicode__(self): return \\"{username}@{ip_src} accessed {ip_dst} from {start} till {finish}. Rule class: {rule_class}\\".format( username = self.username, ip_src = self.ip_src, ip_dst = self.ip_dst, start = self.start, finish = self.finish, rule_class = self.rule_class ) class Meta: db_table = u'event' unique_together = (\\"username\\", \\"ip_src\\", \\"ip_dst\\", \\"start\\", \\"finish\\") class Rule(models.Model): id = models.BigIntegerField(primary_key=True, db_column=\\"rule_id\\", editable=False) name = models.CharField(max_length=765, db_column = \\"rule_name\\") hide = models.BooleanField() @models.permalink def get_absolute_url(self): return ('rule', (), {\\"pk\\":str(self.pk)}); def __unicode__(self): return \\"{name}[{pk}]\\".format(name=self.name, pk=self.pk) class Meta: db_table = u'rules' class Blacklist(models.Model): id = models.BigIntegerField(primary_key=True, db_column=\\"bl_id\\", editable=False) name = models.CharField(max_length=765, editable=False) url = models.CharField(max_length=765, editable=False) serialized = models.TextField(editable=False) updated = models.DateTimeField(editable=False) hide = models.BooleanField() @models.permalink def get_absolute_url(self): return ('blacklist', (), {\\"pk\\":str(self.pk)}); def __unicode__(self): return self.name class Meta: db_table = u'blacklists' class Script(models.Model): id = models.AutoField(primary_key=True, db_column = \\"script_id\\", editable=False) name = models.CharField(max_length=765) updated = models.DateTimeField(db_column=\\"lastupdated\\", editable=False) @models.permalink def get_absolute_url(self): return ('script', (), {\\"pk\\":str(self.pk)}); def __unicode__(self): return \\"{name}[{pk}]\\".format( name=self.name, pk=self.pk ) class Meta: db_table = u'scripts'"},{"prompt":"Using the provided input, write a Python program to find all combinations of two numbers in a list and return the summation of each pair. Not applicable","completion":"def combinationSum(lst): result = [] for i in range(len(lst)): for j in range(i + 1, len(lst)): result.append(lst[i] + lst[j]) return result input_list = [2, 4, 6, 8] print(combinationSum(input_list)) # Output: [6, 10, 12, 16]"},{"prompt":"Create a Python program that can detect vowels in a given string.","completion":"def detect_vowels(inp_str): vowels = set(['a', 'e', 'i', 'o', 'u']) return [char for char in inp_str if char.lower() in vowels]"},{"prompt":"Write a python program to rotate an array of size n by d elements","completion":"def rotateArray(arr, d): result = [] for i in range(len(arr)-d, len(arr)): result.append(arr[i]) for i in range(0, len(arr)-d): result.append(arr[i]) return result"},{"prompt":"Write a Python program to print out the grade of a student based on the given marks 60","completion":"def get_grade(marks): if marks >= 90: grade = \\"A+\\" elif marks >= 80 and marks < 90: grade = \\"A\\" elif marks >= 70 and marks < 80: grade = \\"B+\\" elif marks >= 60 and marks < 70: grade = \\"B\\" elif marks >= 50 and marks < 60: grade = \\"C+\\" else: grade = \\"F\\" print(\\"Grade: %s\\" %grade) marks = 60 get_grade(marks)"},{"prompt":"Generate a Python script that filters a list of strings, keeping only those that have a length greater than 5 characters. words = [hello, world, example, test]","completion":"def filter_words(words): filtered_words = [] for word in words: if len(word) > 5: filtered_words.append(word) return filtered_words words = [\\"hello\\", \\"world\\", \\"example\\", \\"test\\"] filtered_words = filter_words(words) print(filtered_words) # Output: ['example', 'test']"},{"prompt":"Optimize this Python code to reduce the running time. def find_max_value(array, start, end): max_value = float('inf') for i in range(start, end): for j in range(start, end): max_value = max(max_value, array[i][j]) return max_value","completion":"def find_max_value(array, start, end): max_value = -float('inf') for i in range(start, end): max_value = max(max_value, max(array[i][start:end])) return max_value"},{"prompt":"Convert the following Python code into equivalent C code. def avg(nums): return sum(nums) / len(nums)","completion":"#include <stdio.h> #include <stdlib.h> float avg(int nums[], int len) { float sum = 0; for (int i = 0; i < len; i++) { sum += nums[i]; } return sum / len; } int main() { int nums[] = {1, 2, 3}; int len = 3; printf(\\"Average = %fn\\", avg(nums, len)); return 0; }"},{"prompt":"Create a python script to implement linear regression.","completion":"from sklearn.linear_model import LinearRegression import numpy as np def linear_regression(x, y): lr = LinearRegression() lr.fit(x , y) y_hat = lr.predict(x) return np.abs(y_hat - y).mean()"},{"prompt":"Create a python program that takes in a list of URLs and returns a list of the top 5 URLs that are visited most often. ['www.example1.com', 'www.example2.com', 'www.example3.com', 'www.example4.com']","completion":"\\"\\"\\" Create a python program that takes in a list of URLs and returns a list of the top 5 URLs that are visited most often. \\"\\"\\" from collections import Counter def most_visited_urls(urls): counts = Counter(urls) top_5 = counts.most_common(5) print(\\"Top 5 URLs:\\") for url, count in top_5: print(\\"%s: %d\\" % (url, count)) if __name__ == '__main__': urls = ['www.example1.com', 'www.example2.com', 'www.example3.com', 'www.example4.com'] most_visited_urls(urls)"},{"prompt":"Create a program in Python to calculate the Levenshtein distance between two strings.","completion":"def levenshtein(s1, s2): if len(s1) > len(s2): s1, s2 = s2, s1 distances = range(len(s1) + 1) for i2, c2 in enumerate(s2): distances_ = [i2+1] for i1, c1 in enumerate(s1): if c1 == c2: distances_.append(distances[i1]) else: distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1]))) distances = distances_ return distances[-1]"},{"prompt":"Design a shuffling algorithm for a deck of cards using Python. No inpu","completion":"import random # Creating a list of cards cards = [1,2,3,4,5,6,7,8,9,10,11,12,13] * 4 def shuffle_cards(cards): # We use the Fisher-Yates algorithm # Get last index last_index = len(cards) - 1 # Loop from back for i in range(last_index, 0, -1): # Get a random index between the current index and 0 random_index = random.randint(0, i) # Swap the cards using Python's tuple unpacking cards[i], cards[random_index] = cards[random_index], cards[i] return cards # Call the shuffling algorithm print(shuffle_cards(cards))"},{"prompt":"Generate a code in Python to print the length of the given string. Hello world","completion":"string = 'Hello world' # print the length of string print(len(string))"},{"prompt":"Build an algorithm in Python that creates output based on the given input. Input: [1, 2, 5, 8, 11]","completion":"def algorithm(input_list): output_list = [] for i in input_list: if i % 2 == 0: output_list.append(str(i) + ' is an even number') else: output_list.append(str(i) + ' is an odd number') return output_list"},{"prompt":"Generate an optimization problem in Python to find the minimum cost path in a matrix.","completion":"def matrix_min_cost_path(matrix): n = len(matrix) m = len(matrix[0]) min_cost = [[0 for i in range(m + 1)] for j in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if i == 1 and j == 1: min_cost[i][j] = matrix[i-1][j-1] else: min_cost[i][j] = matrix[i-1][j-1] + min(min_cost[i][j-1], min_cost[i-1][j], min_cost[i-1][j-1]) return min_cost[n][m]"},{"prompt":"mplement a Python program to remove all duplicates from an array. array = [3, 8, 12, 3, 17, 8, 25]","completion":"def remove_duplicates(my_list): result = [] seen = set() for item in my_list: if item not in seen: seen.add(item) result.append(item) return result"},{"prompt":"Write a Python program to make a deep copy a given dictionary.","completion":"import copy def deep_copy_dictionary(dictionary): deep_copy = copy.deepcopy(dictionary) return deep_copy data = {\\"name\\": \\"John\\", \\"age\\": 28} result = deep_copy_dictionary(data) print(result)"},{"prompt":"Write a Python code snippet for encrypting a given string using secret key. secret_key = 'test' string = 'hello world'","completion":"import base64 def encrypt(key, string): enc = [] for i in range(len(string)): key_c = key[i % len(key)] enc_c = chr((ord(string[i]) + ord(key_c)) % 256) enc.append(enc_c) return base64.urlsafe_b64encode(\\"\\".join(enc).encode()).decode() encrypted_string = encrypt(secret_key, string) print(encrypted_string)"},{"prompt":"Create an algorithm in Python to find the maximum nested depth of a given dictionary. dictionary={ name: gaani, age: 18, university: { name: Imperial, majors: [Computer Science], location: { city: London, country: UK } } }","completion":"def max_nested_depth(dictionary): max_depth = 0 stack = [] stack.append((dictionary, 1)) while len(stack) > 0: item, depth = stack.pop() if depth > max_depth: max_depth = depth if type(item) is dict: for value in item.values(): stack.append((value, depth+1)) return max_depth print(max_nested_depth(dictionary))"},{"prompt":"Write a Bash script to activate a python virtual environment.","completion":"# activate the virtual environment source venv/bin/activate"},{"prompt":"Create a program in Python to compute the host BMI given a user’s height and weight. Height: 172 cm Weight: 85 kg","completion":"def compute_bmi(height, weight): bmi = weight / (height * height) return bmi bmi = compute_bmi(172, 85) print(\\"Your BMI is {:.2f}\\".format(bmi))"},{"prompt":"Create a web application in Python with Flask and Mongodb as the backend to provide an endtoend solution for editing user profile information. The user profile must include fields for name, email address, phone number, age, location, and profession.","completion":"from flask import Flask, request, jsonify from pymongo import MongoClient app = Flask(__name__) client = MongoClient('localhost', 27017) db = client.user_database users = db.users @app.route('/user', methods=['GET', 'POST']) def user_profile(): if request.method == 'GET': # Retrieve user profile information user_info = users.find_one({'_id': request.args.get('id')}) return jsonify(user_info) elif request.method == 'POST': # Update user profile information data = request.get_json() users.update({ '_id': data['id'] }, { 'name': data['name'], 'email': data['email'], 'phone': data['phone'], 'age': data['age'], 'location': data['location'], 'profession': data['profession'] }) result = users.find_one({'_id': data['id']}) return jsonify({'result': result}) if __name__ == '__main__': app.run()"},{"prompt":"Develop a Python program that can convert a given amount in American Dollar (USD) to British Pound Sterling (GBP). 500 USD","completion":"# Python code: def convert_usd_to_gbp(usd): gbp = usd / 1.3 return gbp usd = 500 gbp = convert_usd_to_gbp(usd) print(f\\"{usd} USD = {gbp:.2f} GBP\\")"},{"prompt":"Create an algorithm in Python to determine the number of days between two dates.","completion":"def daysBetween (date1, date2): # Number of days per month in # non leap year. monthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Initialize count using years and day n1 = date1[2] * 365 + date1[0] n2 = date2[2] * 365 + date2[0] # Add days for months in given date for i in range(date1[1]-1): n1 += monthDays[i] for i in range(date2[1]-1): n2 += monthDays[i] # Since every leap year is of 366 days, # Add a day for every leap year n1 += date1[2]//4 - date1[2]//100 + date1[2]//400 n2 += date2[2]//4 - date2[2]//100 + date2[2]//400 # Return difference between two counts return (n2 - n1)"},{"prompt":"Design a machine learning model in Python to predict house prices based on the given features.","completion":"import numpy as np import pandas as pd from sklearn import linear_model # Load the data data = pd.read_csv('house_price_data.csv') # Select features X = data[['size', 'bedrooms', 'bathrooms', 'year']] # Select target y = data['price'] # Create and fit the model model = linear_model.LinearRegression() model.fit(X, y)"},{"prompt":"Create a function in Python that takes in a list of words and a target word, and prints out the first word that is alphabetically larger than the target. words = [Bob, Cat, Happy, Lemon, Texas, Zebra], target = Lemon","completion":"# Function to find the first word alphabetically larger than the target def find_next_word(words, target): for word in words: if word > target: return word return None"},{"prompt":"mplement a function in Python to determine the number of each character in a string. String: Hello, World!","completion":"def count_characters(my_string): my_dict = dict() for character in my_string: if character in my_dict: my_dict[character] += 1 else: my_dict[character] = 1 return my_dict String = \\"Hello, World!\\" print(count_characters(String)) # Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"},{"prompt":"Create a Python class to automate a given process. The process of predicting the growth rate of a particular crop in a given environment.","completion":"\\"\\"\\" A class to predict the growth rate of a particular crop in a given environment. \\"\\"\\" class GrowthRatePredictor: \\"\\"\\"A class to predict the growth rate of a particular crop in a given environment.\\"\\"\\" def __init__(self, crop, environment): \\"\\"\\" Initializes the GrowthRatePredictor class with the crop being predicted and environment in which it is growing. Parameters: crop (string): The type of crop being predicted. environment (string): The environment in which the crop is growing. \\"\\"\\" self.crop = crop self.environment = environment def predict_growth_rate(self): \\"\\"\\" Predicts the growth rate of the given crop in the given environment. Returns: (int): The predicted growth rate of the crop in the given environment. \\"\\"\\" # Code to predict the growth rate of the given crop in the given environment return growth_rate"},{"prompt":"Detect opaque predicates in x86 assembly code traces using TritonContext library in Python. The code includes 5 different traces, each with a different set of instructions. The output of the code includes the disassembly of each instruction in the trace and whether it is an opaque predicate or not. Opaque predicates are identified using the Triton.getPathPredicate() function and checking if the condition is always taken or never taken.","completion":"#!/usr/bin/env python3 -*- coding: utf-8 -*- Example to detect opaque predicates. This example is based on the Tomislav Zubcic's blog post [0,1] =). Output: python3 proving_opaque_predicates.py xor eax, eax jo 7 opaque predicate: never taken ---------------------------------- xor eax, eax je 7 opaque predicate: always taken ---------------------------------- xor eax, ebx je 7 not an opaque predicate ---------------------------------- and eax, 0x3fffffff and ebx, 0x3fffffff xor ecx, edx xor edx, edi add eax, ebx jo 0x16 opaque predicate: never taken ---------------------------------- and eax, 0x3fffffff and ebx, 0x3fffffff xor ecx, edx xor edx, edi xor eax, ebx je 0x16 not an opaque predicate ---------------------------------- [0] http://zubcic.re/blog/experimenting-with-z3-proving-opaque-predicates [1] https://www.reddit.com/r/ReverseEngineering/comments/4yf6tz/experimenting_with_z3_proving_opaque_predicates/ -- jonathan from __future__ import print_function from triton import TritonContext, ARCH, Instruction import sys trace_1 = [ b\\"x31xC0\\", # xor eax, eax b\\"x0Fx80x01x00x00x00\\", # jo 7 ] trace_2 = [ b\\"x31xC0\\", # xor eax, eax b\\"x0Fx84x01x00x00x00\\", # je 7 ] trace_3 = [ b\\"x31xD8\\", # xor eax, ebx b\\"x0Fx84x01x00x00x00\\", # je 7 ] trace_4 = [ b\\"x25xffxffxffx3f\\", # and eax, 0x3fffffff b\\"x81xe3xffxffxffx3f\\", # and ebx, 0x3fffffff b\\"x31xd1\\", # xor ecx, edx b\\"x31xfa\\", # xor edx, edi b\\"x01xd8\\", # add eax, ebx b\\"x0fx80x10x00x00x00\\", # jo 27 ] trace_5 = [ b\\"x25xffxffxffx3f\\", # and eax, 0x3fffffff b\\"x81xe3xffxffxffx3f\\", # and ebx, 0x3fffffff b\\"x31xd1\\", # xor ecx, edx b\\"x31xfa\\", # xor edx, edi b\\"x31xD8\\", # xor eax, ebx b\\"x0Fx84x10x00x00x00\\", # je 16 ] Triton = TritonContext() def symbolization_init(): Triton.symbolizeRegister(Triton.registers.eax) Triton.symbolizeRegister(Triton.registers.ebx) Triton.symbolizeRegister(Triton.registers.ecx) Triton.symbolizeRegister(Triton.registers.edx) return def test_trace(trace): Triton.setArchitecture(ARCH.X86) symbolization_init() astCtxt = Triton.getAstContext() for opcode in trace: instruction = Instruction() instruction.setOpcode(opcode) Triton.processing(instruction) print(instruction.getDisassembly()) if instruction.isBranch(): # Opaque Predicate AST op_ast = Triton.getPathPredicate() # Try another model model = Triton.getModel(astCtxt.lnot(op_ast)) if model: print(\\"not an opaque predicate\\") else: if instruction.isConditionTaken(): print(\\"opaque predicate: always taken\\") else: print(\\"opaque predicate: never taken\\") print('----------------------------------') return if __name__ == '__main__': test_trace(trace_1) test_trace(trace_2) test_trace(trace_3) test_trace(trace_4) test_trace(trace_5) sys.exit(0)"},{"prompt":"Create a function that takes in a string and evaluates it according to Python's syntax rules. String: 2+3*4","completion":"def evaluate_string(str): try: result = eval(str) return result except SyntaxError: return \\"Syntax Error\\""},{"prompt":"Generate a Python code snippet to check if all the values of a dictionary are True.","completion":"all(dict_values) # This statement will return a boolean indicating whether all values in the dictionary are True."},{"prompt":"Create a class in Python to filter a string and return only the lowercase letters.","completion":"class LowercaseFilter: def __init__(self, my_string): self.my_string = my_string def filter_string(self): return ''.join([c for c in self.my_string if c.islower()])"},{"prompt":"Create a REST API in Python with the Flask framework that returns a list of posts from a blog when a GET request is made. Not applicable","completion":"from flask import Flask, jsonify app = Flask(__name__) posts = [ { \\"id\\": 1, \\"title\\": \\"Lorem Ipsum\\", \\"body\\": \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\" }, { \\"id\\": 2, \\"title\\": \\"Sed Ut Perspiciatis\\", \\"body\\": \\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam.\\" } ] @app.route('/posts', methods=['GET']) def get_posts(): return jsonify({'posts': posts}) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Design an algorithm in Python to read in a matrix of integers and print the sum of each row. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def rowSum(matrix): row_sums = [] for row in matrix: row_sum = 0 for num in row: row_sum += num row_sums.append(row_sum) return row_sums matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] print(rowSum(matrix)) # [6, 15, 24]"},{"prompt":"Create a basic Python program to split a given string in words and save them in an array. String = This is a sentence.","completion":"string = \\"This is a sentence.\\" words = string.split(\\" \\") print(words) # Output: ['This', 'is', 'a', 'sentence.']"},{"prompt":"Find the smallest element in a 2D array using Python. arr = [[2, 5, 8], [1, 4, 7]]","completion":"def find_smallest_element_2D(arr): smallest = float('inf') for row in arr: smallest = min(smallest, min(row)) return smallest"},{"prompt":"Create a program in Python to classify the sentiment of a text using machine learning. Examples of 1000 text samples etc","completion":"import nltk nltk.download('stopwords') from nltk.corpus import stopwords from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import accuracy_score # Load the data data = ... # Process the data # Create a list of stopwords stop_words = stopwords.words('english') # Vectorize the data using CountVectorizer vectorizer = CountVectorizer(stop_words=stop_words) data_vectorized = vectorizer.fit_transform([d['Text'] for d in data]) # Split the data X_train, X_test, y_train, y_test = train_test_split(data_vectorized, [d['Sentiment'] for d in data], test_size=0.2) # Train the model nb_model = MultinomialNB() nb_model.fit(X_train, y_train) # Evaluate the model predictions = nb_model.predict(X_test) print(accuracy_score(y_test, predictions))"},{"prompt":"Generate Python Plotly chart that shows the trend of stock prices over the past 3 years. Apple (AAPL) Stock Price","completion":"import plotly.offline as py import plotly.graph_objs as go import pandas as pd # Read in the data data = pd.read_csv('AAPL_data.csv') # Create traces apple_trace = go.Scatter( x = data['date'], y = data['close'], name = 'Apple' ) # Create the layout layout = go.Layout( title = 'Apple Stock Price Trends', xaxis = dict( title = 'Past 3 Years' ), yaxis = dict( title = 'Closing Price ()' ) ) # Create the figure and plot it fig = go.Figure(data = [apple_trace], layout = layout) py.plot(fig, filename = 'apple_chart.html')"},{"prompt":"Create a Python script to calculate the interest earned on a given bank balance over 10 years. Balance: 10000 Annual Interest Rate: 4.4","completion":"balance = 10000 interestRate = 4.4 def getInterestEarned(balance, interestRate): totalInterestEarned = 0 for i in range(1, 11): interest = balance * interestRate/100 balance += interest totalInterestEarned += interest return totalInterestEarned interestEarned = getInterestEarned(balance, interestRate) print(\\"Total interest earned in 10 years: \\" + str(interestEarned))"},{"prompt":"Write an optimization routine for a function using Python. The function is f(x) = 2x^2 – 4x.","completion":"import numpy as np def optimize(f, x_init): # Set the learning rate learning_rate = 0.01 # Initiate the function and its derivative x = x_init f_x = f(x) f_prime_x = 2*x - 4 # Repeat the optimization routine for i in range(1000): # Calculate the new x x_new = x - learning_rate * f_prime_x # Calculate the new f(x) f_x_new = f(x_new) # Update the values if the new f(x) is greater if f_x_new > f_x: x = x_new f_x = f_x_new f_prime_x = 2*x - 4 return x # Call the function x_opt = optimize(lambda x: 2*(x**2) - 4*x, 10) print('The optimized x is:', x_opt)"},{"prompt":"Generate a Python function to invoice a customer. This function should take in a customer object with prices, discounts and other information and create an invoice object with the appropriate fields filled in. Sample customer object example: customer_info = { 'name': 'John Doe', 'items': [ {'name': 'pen', 'price': 10, 'quantity': 1}, {'name': 'notebook', 'price': 20, 'quantity': 2}, {'name': 'pencil', 'price': 15, 'quantity': 3} ], 'discount': 0.1 }","completion":"def generate_invoice(customer_info): items = customer_info['items'] total = sum(item['price'] * item['quantity'] for item in items) subtotal = total - (total * customer_info['discount']) tax = subtotal * 0.15 invoice = { 'name': customer_info['name'], 'items': items, 'discount': customer_info['discount'], 'total': total, 'subtotal': subtotal, 'tax': tax } return invoice"},{"prompt":"Create a Python program to round up a float to the nearest integer. 3.14","completion":"def round_up(f): if f - int(f) >= 0.5: return int(f) + 1 return int(f) round_val = round_up(3.14) print(round_val)"},{"prompt":"Create a CLI in Python for sending emails. The CLI should be interactive and should prompt users for the To address, Subject and message body of the emails. Not Applicable","completion":"import smtplib while True: print('========Email Tool========') to_addr = input('To: ') subject = input('Subject: ') body = input('Message: ') print('=========================') confirm = input('Send email?[y/n]: ') if confirm.lower() == 'y': smtpObj = smtplib.SMTP('smtp.gmail.com', 587) smtpObj.starttls() # replace with your own email address and password smtpObj.login('me@gmail.com', 'mypassword') smtpObj.sendmail('me@gmail.com', to_addr, f'Subject: {subject}nn{body}') print('Email sent!') smtpObj.quit() else: print('Email discarded!')"},{"prompt":"Suggest a way to detect whether a given number is a multiple of a given divisor in Python.","completion":"def is_multiple(number, div): '''This function takes two numbers, \`\`number\`\` and \`\`div\`\`, and returns \`\`True\`\` if number is a multiple of div, and \`\`False\`\` otherwise.''' return number % div == 0"},{"prompt":"Generate a Python class that stores a collection of words and counts the frequency of each word.","completion":"class WordFrequency: def __init__(self): self.words = {} def add_word(self, word): if word not in self.words: self.words[word] = 1 else: self.words[word] += 1 def count_frequency(self): for word, count in self.words.items(): print(f\\"{word}: {count}\\")"},{"prompt":"Write a function in Python to convert a given list of strings to a list of integers.","completion":"def convert_to_integers(lst): return [int(i) for i in lst]"},{"prompt":"Relace a for loop with appropriate list comprehension in a Python program. list = [1, 2, 3, 4, 5, 6]","completion":"list = [x**2 for x in [1, 2, 3, 4, 5, 6]]"},{"prompt":"Write a Python program to print the key of the element in a dictionary that has the maximum value. {'a': 3, 'b': 6, 'c': 9, 'd': 12}","completion":"dictionary = {'a': 3, 'b': 6, 'c': 9, 'd': 12} max_value = max(dictionary.values()) for key, value in dictionary.items(): if value == max_value: print(key)"},{"prompt":"Create a REPL (readevalprint loop) program in Python for performing basic calculations.","completion":"def repl(): while True: # read user input user_input = input(\\"> \\") # evaluate user input result = eval(user_input) # print the result print(result) repl()"},{"prompt":"Write a function that takes a string and prints out the string in reverse. Pytho","completion":"def reverse_string(s): return s[::-1] print(reverse_string('Python')) # nohtyP"},{"prompt":"Write a Python program to generate all unique combinations of two numbers from a list. nums = [1, 2, 3, 4]","completion":"def generate_combinations(nums): result = [] for x in range(0, len(nums)): for y in range(x + 1, len(nums)): result.append([nums[x], nums[y]]) return result nums = [1, 2, 3, 4] result = generate_combinations(nums) for item in result: print(item) # output [1, 2] [1, 3] [1, 4] [2, 3] [2, 4] [3, 4]"},{"prompt":"Write a Python program to filter a dictionary by the criteria mentioned in the input. dictionary = { a : 1, b : 2, c : 3, d : 4 }, criteria = [a, b]","completion":"def filter_by_criteria(dictionary, criteria): filtered_dict = {} for key, value in dictionary.items(): # Check if key is present in criteria if key in criteria: filtered_dict[key] = value return filtered_dict # Main program dictionary = { \\"a\\" : 1, \\"b\\" : 2, \\"c\\" : 3, \\"d\\" : 4 } criteria = [\\"a\\", \\"b\\"] result = filter_by_criteria(dictionary, criteria) print(result)"},{"prompt":"Design a function in Python which takes two strings as input and returns a boolean value as output depending on which one is longer.","completion":"def longer_string(string1, string2): if len(string1) > len(string2): return True else: return False"},{"prompt":"Create a Python program that generates a random number between 515.","completion":"import random x = random.randint(5,15) print(x)"},{"prompt":"Generate a Python function that takes two matrices (2dimensional lists) as inputs and returns the result of matrix multiplication. A = [[1, 2], [3, 4]] B = [[5, 6], [7, 8]]","completion":"def multiply_matrix(A,B): result = [[0,0], [0,0]] for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): result[i][j] += A[i][k] * B[k][j] return result # example A = [[1, 2], [3, 4]] B = [[5, 6], [7, 8]] print(multiply_matrix(A, B)) # [[19, 22], [43, 50]]"},{"prompt":"Generate an optimization algorithm in Python for minimizing a given objective function. objective_function = lambda x: (x 5)**2 + 10","completion":"import numpy as np # define objective function def objective_function(x): return (x - 5)**2 + 10 # define optimization algorithm def optimize(f, x0, alpha = 0.1, epsilon = 1e-3): x_prev = x0 x = x0 while True: gradient = -2 * (x - 5) x_next = x - alpha * gradient if np.abs(x_next - x_prev) < epsilon: break x_prev = x x = x_next return x # optimize objective function x0 = 1 x_opt = optimize(objective_function, x0) print(x_opt) # Output: 5.000000000093918"},{"prompt":"Create a Python program to find the knearest neighbors of a given point. (1,2), 3","completion":"\\"\\"\\" Find the k-nearest neighbors of a given point \\"\\"\\" import numpy as np def knn(point, k, points): distances = [] for p in points: distances.append((((point[0] - p[0]) ** 2 + (point[1] - p[1]) **2) ** 0.5, p)) distances.sort() neighbors = [] for i in range(k): neighbors.append(distances[i][1]) return neighbors if __name__ == \\"__main__\\": # Array of points points = np.array([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) # Provided point point = (1, 2) k = 3 print(knn(point, k, points))"},{"prompt":"Design an algorithm in Python to detect fraud transactions using machine learning. Sample data set of bank transactions with features such as transaction amount, date, time, account number etc.","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Read the data set data = pd.read_csv('transactions.csv') # Extract the features and the target X = data.iloc[:,:-1] y = data.iloc[:,-1] # Split the data into train and test set X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=0) # Train a logistic regression model greg_model = LogisticRegression(solver='liblinear') greg_model.fit(X_train, y_train) # Make predictions using the model y_pred = greg_model.predict(X_test) # Calculate the accuracy of the model accuracy = accuracy_score(y_test,y_pred) print(\\"Accuracy:\\",accuracy)"},{"prompt":"Create a Python program that takes a list of strings as input and prints them in alphabetical order. ['apple', 'mango', 'banana']","completion":"def sort_strings(strings): strings.sort() for string in strings: print(string) sort_strings(['apple', 'mango', 'banana'])"},{"prompt":"Write a Python program to create two separate lists containing the even and odd elements of the given list. [1, 2, 3, 4, 5, 6, 7, 8]","completion":"# Program to create two separate lists containing the even and odd elements of the given list given_list = [1, 2, 3, 4, 5, 6, 7, 8] even_list = [] odd_list = [] for element in given_list: if element % 2 == 0 : even_list.append(element) else: odd_list.append(element) print(even_list) print(odd_list)"},{"prompt":"g the following Json as an example, write a Python program that reads this Json into an object. { id:1, name:Testing, description:This is a test }","completion":"import json # example data data = '{\\"id\\":1,\\"name\\":\\"Testing\\",\\"description\\":\\"This is a test\\"}' # parse data into a Python object obj = json.loads(data) print(obj)"},{"prompt":"Create a Python program to pad every element of a twodimensional list with a specific character. List: [ [1, 2, 3], [4, 5], [6, 7, 8, 9] ] Character: *","completion":"def padElements(list,char): paddedList = [] maxLength = 0 for sublist in list: maxLength = max(maxLength,len(sublist)) for sublist in list: padded_sublist = sublist + [char] * (maxLength-len(sublist)) paddedList.append(padded_sublist) return paddedList print(padElements([[1, 2, 3], [4, 5], [6, 7, 8, 9]], '*')) // Output: [[1, 2, 3, '*', '*'], [4, 5, '*', '*', '*'], [6, 7, 8, 9, '*']]"},{"prompt":"Create a basic web scraper in Python to extract text from a web page. Not applicable","completion":"import requests from bs4 import BeautifulSoup r = requests.get('https://example.com') html = r.text soup = BeautifulSoup(html) text = soup.find('div', {'class': 'text'}).text print(text)"},{"prompt":"Create a Python script for crawling a website. Not applicable","completion":"import requests from bs4 import BeautifulSoup page = requests.get('https://website.com/') soup = BeautifulSoup(page.content, 'html.parser') for link in soup.find_all('a', href=True): print(link['href'])"},{"prompt":"Construct a function in Python that takes a list of integers and a number and returns the number of occurrences of the number in the list.","completion":"def count_occurrences(lst, num): count = 0 for item in lst: if item == num: count += 1 return count"},{"prompt":"Write a function in Python that takes a list of numbers as an input, and returns the largest of them. [1, 2, 3, 4, 5]","completion":"def largest(list): largest = 0 for number in list: if number > largest: largest = number return largest print(largest([1, 2, 3, 4, 5])) # Outputs 5"},{"prompt":"Can you create a Python script that prints out a 10x10 multiplication table?","completion":"for i in range(1,11): for j in range(1,11): print(str(i*j)+'t', end = '') print()"},{"prompt":"Construct an algorithm in Python that calculates the factorial of a number n = 5","completion":"def factorial(number): factorial = 1 for i in range(1, number + 1): factorial = factorial * i return factorial n = 5 result = factorial(n) print(result) # 120"},{"prompt":"Create a function in Python that finds the common elements two arrays. arr1 = [1, 2, 3, 4, 5] arr2 = [2, 3, 6, 7, 8]","completion":"def find_common_elements(arr1, arr2): common = [] for element in arr1: if element in arr2: common.append(element) return common arr1 = [1, 2, 3, 4, 5] arr2 = [2, 3, 6, 7, 8] print(find_common_elements(arr1, arr2))"},{"prompt":"Design an efficient algorithm in Python for calculating the Fibonacci sequence.","completion":"\\"\\"\\" Design an efficient algorithm in Python for calculating the Fibonacci sequence \\"\\"\\" def fib(n): if (n == 0): return 0 elif (n == 1): return 1 else: f1 = 0 f2 = 1 for x in range(2, n+1): f = f1+f2 f1 = f2 f2 = f return f if __name__ == \\"__main__\\": n = int(input(\\"Enter number of terms:\\")) print(\\"Fibonacci sequence:\\") for i in range(n): print(fib(i))"},{"prompt":"Generate a program in Python that takes a list of numbers and returns the maximum value in the list. [100, 2, 900, 32, 4]","completion":"def max_val(nums): # initialize maximum value max_val = nums[0] # loop through the list and find the maximum value for x in nums: if x > max_val: max_val = x # return maximum value return max_val # main program nums = [100, 2, 900, 32, 4] maximum = max_val(nums) #print the maximum value print(\\"Maximum value:\\", maximum)"},{"prompt":"Write a Python program to predict the future stock price of a company. Predict the stock price of Apple in 2021.","completion":"import pandas as pd # Read the data data = pd.read_csv(\\"apple stock data.csv\\") # Extract the data points X = data[['open', 'high', 'low', 'volume']] y = data['close'] # Fit the model model.fit(X, y) # Predict the stock price of Apple in 2021 predict = model.predict([[Apple_open, Apple_high, Apple_low, Apple_volume]]) print(predict)"},{"prompt":"Construct a program for measuring the execution time of a given function in Python.","completion":"import time def measure_time(func): t_start = time.time() func() t_end = time.time() t_delta = t_end - t_start print(f\\"Function execution time is {t_delta} seconds\\")"},{"prompt":"Create a Python list comprehension that generates a list of all even numbers between 10 and 30.","completion":"even_nums = [x for x in range(10, 30) if x%2 == 0]"},{"prompt":"Establish a Python program to replace all the words in a given sentence by the first letter of the respective words. Sentence: Hello World","completion":"def replace_with_first_letter(sentence): words = sentence.split() result = [word[0] for word in words] return ''.join(result) print(replace_with_first_letter(\\"Hello World\\")) # Output: HW"},{"prompt":"Design and implement a sorting algorithm in Python to sort the elements of an array. [17, 5, 20, 8, 4, 11]","completion":"def selectionSort(arr): # Loop through array elements for i in range(len(arr)): # Find minimum element in remaining array min_index = i for j in range(i+1, len(arr)): if arr[min_index] > arr[j]: min_index = j # Swap current with min element arr[i], arr[min_index] = arr[min_index], arr[i] return arr arr = [17, 5, 20, 8, 4, 11] print(\\"Original Array: \\", arr) arr = selectionSort(arr) print(\\"Sorted Array: \\", arr)"},{"prompt":"Optimize a given Python program for better runtime x = 0 for i in range(1,10000): x +=","completion":"x = 0 for i in range(0,10000,2): x += i x *= 2 x += (10000 - 1)"},{"prompt":"Write a Python code to find the RMSE (root mean squared error) of two given lists. list1 = [1, 2, 3] list2 = [2, 3, 4]","completion":"import math def rmse(list1, list2): mean_square = 0 for i in range(len(list1)): mean_square += math.pow((list1[i] - list2[i]), 2) return math.sqrt(mean_square/len(list1)) rmse_value = rmse(list1, list2) print(\\"Root Mean Square Error is:\\", rmse_value)"},{"prompt":"Write a function in Python that takes two parameters, a positive integer n and a list of numbers, and returns the sum of the first n elements of the list. n = 3, nums = [5, 8, 20, 3]","completion":"def func(n, nums): res = 0 for i in range(n): res += nums[i] return res"},{"prompt":"Write a Python program to find the nth smallest number in the following list [2, 3, 5, 7, 11] n = 2","completion":"def nth_smallest(input_list, n): input_list.sort() return input_list[n-1] input_list = [2, 3, 5, 7, 11] n = 2 result = nth_smallest(input_list, n) print(result)"},{"prompt":"Create a Python program to calculate the total cost of a trip, given the cost of the flight, hotel, and other expenses. Flight Cost: 500 Hotel Cost: 350 Other Expenses: 200","completion":"# Calculate the total cost flight_cost = 500 hotel_cost = 350 other_expenses = 200 total_cost = flight_cost+hotel_cost+other_expenses print(f\\"The total cost of the trip is {total_cost}\\")"},{"prompt":"Write a loop in Python to traverse a given list of numbers in reverse order [1, 2, 3, 4, 5]","completion":"for i in range(len(numbers)-1, -1, -1): print(numbers[i])"},{"prompt":"Create a Python script to generate a randomly generated password of 8 characters.","completion":"import random def generate_password(): password_length = 8 password_characters = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#^&*()_+-=\\" password = ''.join(random.sample(password_characters, password_length)) return password"},{"prompt":"You are asked to write a Python program that computes the mean of a list of numbers. [1, 3, 5, 8, 10]","completion":"def mean(nums): total = 0 for num in nums: total += num return total / len(nums) mean([1, 3, 5, 8, 10]) # 6.0"},{"prompt":"Write a recursive Python function to calculate a factorial of positive integer","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Design a Python program that finds maximum sum of an array Array: [1,3,7,12,4,8]","completion":"def max_sum(arr): n = len(arr) max_sum_so_far = 0 for i in range(n): max_ending_here = 0 for j in range(i, n): max_ending_here += arr[j] if (max_sum_so_far < max_ending_here): max_sum_so_far = max_ending_here return max_sum_so_far result = max_sum([1,-3,7,12,-4,8]) print(result)"},{"prompt":"Generate a bar chart in Python to compare the given 2 datasets. Dataset 1: 12, 4, 8, 10 Dataset 2: 6, 12, 14, 8","completion":"import matplotlib.pyplot as plt d1 = [12, 4, 8, 10] d2 = [6, 12, 14, 8] # set width of bar barWidth = 0.4 # set height of bar bars1 = d1 bars2 = d2 # Set position of bar on X axis r1 = np.arange(len(d1)) r2 = [x + barWidth for x in r1] # Make the plot plt.bar(r1, bars1, width=barWidth, color='#7f6d5f', label='Dataset 1') plt.bar(r2, bars2, width=barWidth, color='#557f2d', label='Dataset 2') # Add xticks on the middle of the group bars plt.xlabel('Groups', fontweight='bold') plt.xticks([r + barWidth for r in range(len(d1))], ['A', 'B', 'C', 'D']) # Create legend & Show graphic plt.legend() plt.show()"},{"prompt":"Develop a Python program to generate a dictionary with the keys being the words in a given text, and the values being the corresponding frequencies. A few words, some more words!","completion":"words = \\"A few words, some more words!\\" words_list = words.split() frequency_dict = {word:words_list.count(word) for word in words_list} print(frequency_dict) # Output: {'A': 1, 'few': 1, 'words,': 1, 'some': 1, 'more': 1, 'words!': 1}"},{"prompt":"Write a Python program to generate a random password of length 8 with the following requirements: The password must include the following – at least one lowercase letter, one uppercase letter, one numeric digit, one special character","completion":"import string import random def generate_password(length): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation password = ''.join(random.choice(chars) for _ in range(length)) return password"},{"prompt":"Create a Python script that uses the provided API to create a pandas.DataFrame object with the weather data for a specified city. API endpoint: https://api.openweathermap.org/data/2.5/weather?q=London&units=metric&appid=YOUR_API_KEY","completion":"import pandas as pd import requests url = 'https://api.openweathermap.org/data/2.5/weather?q=London&units=metric&appid=YOUR_API_KEY' data = requests.get(url).json() weather_data = { 'city': data['name'], 'temperature': data['main']['temp'], 'humidity': data['main']['humidity'], 'description': data['weather'][0]['description'] } weather_df = pd.DataFrame(weather_data, index=[0])"},{"prompt":"Create a function in Python that finds all prime numbers up to a given number","completion":"def is_prime(num): for i in range(2,num): if (num % i) == 0: return False return True def generate_prime_numbers(num): for n in range(2, num+1): if is_prime(n): print(n, end=\\" \\") generate_prime_numbers(50)"},{"prompt":"Create a Python script to split a string into an array of substrings based on a given delimiter. text = onetwothreefour","completion":"def split(text, delimiter): substring = [] temp = \\"\\" for i in text: if i != delimiter: temp += i else: substring.append(temp) temp = \\"\\" substring.append(temp) return substring text = \\"one-two-three-four\\" print(\\"Original String: \\"+text) print(\\"Split String:\\",split(text,'-'))"},{"prompt":"Suggest an algorithm to sort a list of objects in Python by their age, when the attribute ‘age’ is optional.","completion":"#sort list of objects by age def sortByAge(objects): # Use insertion sort algorithm n = len(objects) for i in range(1, n): currItem = objects[i] #check if the current item has an age attribute if hasattr(currItem, 'age'): #find the position to insert j = i - 1 while j >= 0 and (not hasattr(objects[j], 'age') or objects[j].age > currItem.age): objects[j+1] = objects[j] j -= 1 objects[j+1] = currItem return objects"},{"prompt":"Develop a Python script to scrape all HTML elements from a given website. Input URL: https://www.example.com/","completion":"import requests from bs4 import BeautifulSoup # Request the HTML page url = 'https://www.example.com/' page = requests.get(url) # Create the Beautiful Soup object soup = BeautifulSoup(page.content, 'html.parser') # Fetch all HTML elements elements = soup.find_all() # Output elements for element in elements: print(element)"},{"prompt":"Create a Python script to scrape the title and link of news articles from a given page.","completion":"from bs4 import BeautifulSoup import requests def get_news_articles(url): page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') articles = [] for article in soup.find_all('article'): link = article.find('a', class_=\\"shop-now-option\\")['href'] title = article.find('h2').get_text() articles.append({'title': title, 'link': link}) return articles"},{"prompt":"Generate a python program that sort students according to their grades in reverse order. [ { name: Alice, grade: 85 }, { name: Bob, grade: 95 }, { name: Carol, grade: 73 } ]","completion":"students = [ { \\"name\\": \\"Alice\\", \\"grade\\": 85 }, { \\"name\\": \\"Bob\\", \\"grade\\": 95 }, { \\"name\\": \\"Carol\\", \\"grade\\": 73 } ] def sortGrades(students): # sort list of dictionaries by grade in reverse order sortedStudents = sorted(students, reverse=True, key = lambda i: int(i['grade'])) return sortedStudents sortedStudents = sortGrades(students) for student in sortedStudents: print(student)"},{"prompt":"Create a Python program to grade a multiple choice test with 4 options for each question, and each correct answer is worth 3 points. Example question: What color is the sky? A. Red B. White C. Yellow D. Blue Correct Answer: D","completion":"def grade_test(questions): score = 0 for question in questions: if question['answer'] == question['correct_answer']: score += 3 return score"},{"prompt":"Create a python script that extracts the first ten words from a given text. The quick brown fox jumps over the lazy dog","completion":"import re text = \\"The quick brown fox jumps over the lazy dog\\" # Extract words using a regular expression words_list = re.findall(r\\"[w']+\\", text) # Print the first ten words print(words_list[:10])"},{"prompt":"Create a Python class with a constructor and a \`to_string\` method that takes two integers and returns a formatted string. The two integers are 7 and 5.","completion":"class MyClass: def __init__(self, x, y): self.x = x self.y = y def to_string(self): return f'The numbers are {self.x} and {self.y}.' c = MyClass(7,5) print(c.to_string())"},{"prompt":"Design an algorithm in Python to print all the permutations of a given string.","completion":"def permutations(s): result = [] if len(s) == 1: result = [s] else: for i, letter in enumerate(s): for perm in permutations(s[:i] + s[i+1:]): result += [letter + perm] return result"},{"prompt":"Create a Python class called CreatePlayer with various methods such as find_gold, find_potions, find_weapon, buy_potions, use_potion, list_inventory, low_health, set_health, take_damage, deal_damage, gain_xp, buy_weapon, and set_current_weapon. The class should have various attributes such as health, xp, potions, gold, weapons, name, steps, damage_dealt, current_weapon, dragon_attack, basilisk_attack, has_sword, has_pistol, has_rifle, run_away, has_key, and turns. The methods should perform various actions such as adding gold, potions, and weapons to the player's inventory, allowing the player to purchase potions and weapons, allowing the player to use potions and weapons, allowing the player to view their inventory and change their current weapon, and allowing the player to take damage and gain XP.","completion":"#!/usr/bin/python2 # #~~Player Functions~~ from superRandom import superRandint, superChoice from time import sleep import actions import monsters class CreatePlayer(object): def __init__(self, name): self.health = 125 self.xp = 0 #TODO: use gained XP to gain levels self.potions = 0 self.gold = 0 self.weapons = [\\"dagger\\"] self.name = name self.steps = 0 self.damage_dealt = 12 #not needed self.current_weapon = \\"dagger\\" self.dragon_attack = False self.basilisk_attack = False self.has_sword = False self.has_pistol = False self.has_rifle = False self.run_away = 0 self.has_key = False self.turns = 0 def __repr__(self): return (\\"nName: %snHealth: %dnXP: %dnPotions: \\" \\"%dnGold: %dnWeapons: %snSteps: %dnCurr\\" \\"ent Weapon: %snDragon Attack: %snBasili\\" \\"skAttack: %snHas Sword: %snHas Pistol: \\" \\"%snHas Rifle: %snTimes Run Away: %dnHa\\" \\"s Key: %snTurns: %s\\" % (self.name,self.health,self.xp, self.potions,self.gold,self.weapons, self.steps,self.current_weapon, self.dragon_attack,self.basilisk_attack, self.has_sword,self.has_pistol,self.has_rifle, self.run_away,self.has_key,self.turns) ) def find_gold(self): amount = superRandint(1,25) self.gold += amount print \\"nYou found %d gold coins, which brings you to a total of %d coins!\\" % (amount, self.gold) sleep(2) return self def find_gold_debug(self,amount): self.gold += amount print \\"nYou found %d gold coins, which brings you to a total of %d coins!\\" % (amount, self.gold) sleep(2) return self def find_potions(self): self.potions += 1 print \\"nYou found a health potion! You now have %d potions in your inventory.\\" % self.potions sleep(2) return self def find_weapon(self): #TODO: add more weapons weapons = [\\"sword\\",\\"pistol\\",\\"rifle\\"] found = superChoice(weapons) print \\"nYou found a %s!\\" % found if found == \\"sword\\": self.has_sword = True elif found == \\"pistol\\": self.has_pistol = True else: self.has_rifle = True return self def buy_potions(self): print \\"nGold: %d\\" % self.gold print \\"Each potion costs 20 gold pieces and restores 25 HP.\\" amount = raw_input(\\"nHow many would you like to purchase? \\") cost = int(amount) * 20 if self.gold >= int(cost): self.gold = self.gold - int(cost) self.potions += int(amount) print \\"n%d potions have been added to your inventory.\\" % int(amount) sleep(2) return self else: print \\"nSorry you don't have enough gold for %d potions!\\" % int(amount) sleep(2) actions.visit_shop(self) def use_potion(self): if self.potions > 0 and self.potions < 2: self.potions -= 1 self.health += 25 print \\"nYour health is now at %d\\" % self.health elif self.potions > 1: print \\"nYou currently have %d potions\\" % self.potions amount = int(raw_input(\\"nHow many? \\")) raise_health = amount * 25 self.health += raise_health self.potions -= amount print \\"nYour health is now at %d\\" % self.health else: print \\"nSorry you don't have any more potions!\\" sleep(2) return self def list_inventory(self): actions.clearscreen() print (\\"nName: %sn\\" \\"Exp. Points: %dn\\" \\"Potions Held: %dn\\" \\"Gold: %d piecesn\\" \\"Current Weapon: %s\\" %(self.name, self.xp, self.potions, self.gold, self.current_weapon) ) if self.has_pistol is True and \\"pistol\\" not in self.weapons: self.weapons.append(\\"pistol\\") elif self.has_rifle is True and \\"rifle\\" not in self.weapons: self.weapons.append(\\"rifle\\") elif self.has_sword is True and \\"sword\\" not in self.weapons: self.weapons.append(\\"sword\\") print \\"Weapons: %s\\" % \\", \\".join(str(weapon) for weapon in self.weapons) sleep(4) def low_health(self): if self.health <= 60 and self.potions > 0: print \\"n*****DANGER*****n\\" choice = raw_input(\\"nYour health is currently at %d, a\\" \\"nd you currently have %d potions in your inven\\" \\"tory. nWould you like to use one? \\" % (self.health,self.potions) ) choice.lower() if choice == 'y' or choice == 'yes': self.use_potion() return self else: print \\"nOk tough guy.\\" sleep(2) return self def set_health(self, newHealth): self.health = newHealth print \\"nHealth set to %d\\" % self.health sleep(2) return self def take_damage(self, damage): self.health -= damage print \\"nYour health is now at %d\\" % self.health if self.health < 0: print \\"nYou were slain! Maybe you should carry more health potions with you next time!n\\" exit(0) sleep(2) return self def deal_damage(self,Monster): if self.current_weapon == \\"sword\\": damage_dealt = superRandint(13,30) elif self.current_weapon == \\"pistol\\": damage_dealt = superRandint(31,60) elif self.current_weapon == \\"rifle\\": damage_dealt = superRandint(61,120) else: damage_dealt = superRandint(1,12) Monster.take_damage(damage_dealt,self) def gain_xp(self,monster_name): if monster_name == \\"Dragon\\": gained = superRandint(40,150) elif monster_name == \\"Gremlin\\": gained = superRandint(1,35) elif monster_name == \\"Demon\\": gained = superRandint(15,50) elif monster_name == \\"Zombie\\": gained = superRandint(16,75) else: gained = superRandint(1,30) self.xp += gained print \\"nYou gained %d XP!\\" % gained return self def buy_weapon(self): print \\"nS)word: 25 Gold\\" print \\"P)istol: 60 Gold\\" print \\"R)ifle: 120 Gold\\" choice = raw_input(\\"nWhich one would you like to purchase? \\").lower() if choice == 's'and self.gold >= 25: self.gold -= 25 self.has_sword = True print \\"nA sword has been added to your inventory.\\" sleep(2) elif choice == 'p' and self.gold >= 60: self.gold -= 60 self.has_pistol = True print \\"nA pistol has been added to your inventory.\\" sleep(2) elif choice == 'r' and self.gold >= 120: self.gold -= 120 self.has_rifle = True print \\"nA rifle has been added to your inventory.\\" sleep(2) else: print \\"nSorry you don't have enough gold for that purchase.\\" sleep(2) actions.visit_shop(self) return (self) def set_current_weapon(self): print \\"nCurrent Weapon: \\" + self.current_weapon #doesn't show correct weapons after a new weapon is found #even if weapon is in inventory, method itself works perfectly. print \\"Available Weapons: %s\\" % \\", \\".join(str(weapon) for weapon in self.weapons) choice = raw_input(\\"nUse weapon: \\").lower() if choice == \\"sword\\" and self.has_sword is True: self.current_weapon = \\"sword\\" elif choice == \\"pistol\\" and self.has_pistol is True: self.current_weapon = \\"pistol\\" elif choice == \\"rifle\\" and self.has_rifle is True: self.current_weapon = \\"rifle\\" elif choice == \\"dagger\\": self.current_weapon = \\"dagger\\" else: print \\"nSorry you don't currently have that weapon in your inventory.\\" print \\"nCurrent weapon has been changed to: %s\\" % self.current_weapon sleep(2) return self"},{"prompt":"Can you write a code to securely hash a given string in Python?","completion":"import hashlib def secure_hash(string): return hashlib.sha256(string.encode()).hexdigest()"},{"prompt":"Use regex in Python to extract all the words in a string and calculate the total number of words in the string. This is an example string","completion":"import re text = \\"This is an example string\\" words = re.findall(r'w+', text) print(\\"Total words: \\" + str(len(words)))"},{"prompt":"Create a python program to serialize data in JSON format.","completion":"import json # some Python data data = [{'name': 'John', 'age': 30, 'city': 'New York'}, {'name': 'Max', 'age': 20, 'city': 'Berlin'}] # convert to JSON json_data = json.dumps(data) # save as JSON file with open(\\"data.json\\", \\"w\\") as json_file: json.dump(json_data, json_file)"},{"prompt":"Create a list in Python that stores the names of 10 different fruits.","completion":"fruits = ['apple', 'banana', 'grape', 'pineapple', 'strawberry', 'orange', 'mango', 'pear', 'peach', 'kiwi']"},{"prompt":"Generate Python code to add 1 to every element of an array. [5, 6, 8, 9, 10]","completion":"def add_one(arr): for i in range(len(arr)): arr[i] += 1 return arr"},{"prompt":"Design a personal database in Python to store Customer's details.","completion":"class CustomerDatabase: def __init__(self): self.customers = [] def add_customer(self, customer): self.customers.append(customer) def get_customer(self, id): for customer in self.customers: if customer.id == id: return customer return None def get_all_customers(self): return self.customers"},{"prompt":"Create a REST API in Python to retrieve a list of users from a database.","completion":"import flask from flask_restful import Resource, Api app = flask.Flask(__name__) api = Api(app) class Users(Resource): def get(self): conn = sqlite3.connect('users.db') cursor = conn.cursor() cursor.execute('SELECT * FROM users ORDER BY id ASC') users = cursor.fetchall() conn.close() return users api.add_resource(Users, '/users')"},{"prompt":"Generate a universal onetime password (OTP) algorithm in Python.","completion":"import secrets def get_otp(length=6): digits = \\"0123456789\\" otp = \\"\\" for i in range(length): otp += secrets.choice(digits) return otp print(get_otp())"},{"prompt":"Modify the given Python code to add exception handling. def divide(a,b): return a/b","completion":"def divide(a,b): try: return a/b except (ZeroDivisionError) as e: print('Division by zero') except Exception as e: print(str(e)) return None"},{"prompt":"Write a Python program to create functions for min, max, and mean of a given list. A list of 10 integer","completion":"def min_list(numbers): min_num = min(numbers) return min_num def max_list(numbers): max_num = max(numbers) return max_num def mean_list(numbers): mean_num = sum(numbers)/len(numbers) return mean_num numbers = [1,2,3,4,5,6,7,8,9,10] print(min_list(numbers)) print(max_list(numbers)) print(mean_list(numbers)) # Output # 1 # 10 # 5.5"},{"prompt":"Create a ‘Find and Replace’ Script in Python. String: 'This is a sentence with words' Find: 'words' Replace: 'letters'","completion":"import re text = 'This is a sentence with words' find = 'words' replace = 'letters' new_text = re.sub(find, replace, text) print(new_text) # Output: This is a sentence with letters"},{"prompt":"Build an algorithm to find the maximum and the minimum element of an array in Python.","completion":"def findmaxmin(array): maximum = array[0] minimum = array[0] for i in range(1,len(array)): if array[i] > maximum: maximum = array[i] if array[i] < minimum: minimum = array[i] return (maximum, minimum) array = [1,2,3,4,5] print(findmaxmin(array))"},{"prompt":"Write a Python program to classify the given data using a neural network 6 samples, with each sample containing 10 continuous realvalued features.","completion":"import numpy as np import tensorflow as tf # define parameters num_features = 10 num_classes = 2 num_samples = 6 # create placeholder for input data input_x = tf.placeholder(tf.float32, shape=[num_samples, num_features]) # define weights weights = { 'h1': tf.Variable(tf.random_normal([num_features, 2])), 'out': tf.Variable(tf.random_normal([2, num_classes])) } # define biases biases = { 'b1': tf.Variable(tf.random_normal([2])), 'out': tf.Variable(tf.random_normal([num_classes])) } # define layers layer_1 = tf.add(tf.matmul(input_x, weights['h1']), biases['b1']) output_layer = tf.matmul(layer_1, weights['out']) + biases['out'] # define loss and optimizer loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=output_layer, labels=input_x)) optimizer = tf.train.AdamOptimizer(learning_rate=0.001).minimize(loss) # create session and initialize variables with tf.Session() as sess: sess.run(tf.global_variables_initializer()) # fetch the input data data_x = np.array(...) # train the model for i in range(1000): sess.run(optimizer, feed_dict={input_x: data_x}) # predict the classes for the input data classification_output = sess.run(output_layer, feed_dict={input_x: data_x})"},{"prompt":"Create a Python script that takes a minimum and maximum temperature range as input and outputs the longest period of time with temperatures falling in this range. minTemperature = 20 maxTemperature = 30","completion":"def computeMaxTemperatureRange(minTemperature, maxTemperature): max_range = 0 start_index = 0 end_index = 0 temp_range = 0 for i, temp in enumerate(temperature_list): if temp < minTemperature or temp > maxTemperature: if temp_range > max_range: max_range = temp_range end_index = i - 1 temp_range = 0 else: if temp_range == 0: start_index = i temp_range += 1 print('Longest period of time in temperature range is from index {0} to {1}'.format(start_index, end_index)) print('Time range = {0} days'.format(max_range))"},{"prompt":"generate valid python statements to check if the string contains a particular character Check if a string contains 'a'","completion":"\\"\\"\\" Check if a string contains 'a' \\"\\"\\" if 'a' in my_string: #string contains 'a' else: #string does not contain 'a'"},{"prompt":"Write a Python script to calculate the perimeter of a triangle given 3 sides. side_1 = 10 side_2 = 12 side_3 = 14","completion":"def calculate_perimeter(side1, side2, side3): perimeter = side1 + side2 + side3 return perimeter side1 = 10 side2 = 12 side3 = 14 perimeter = calculate_perimeter(side1, side2, side3) print(\\"The perimeter of the triangle is:\\", perimeter) # Output: 36"},{"prompt":"Generate an optimization problem in Python to minimize x^2 + y^2 subject to the constraint x + y = 1. Not applicable","completion":"from scipy.optimize import minimize def objective(X): x = X[0] y = X[1] return x**2 + y**2 def constraint1(X): x = X[0] y = X[1] return x + y - 1 X = (1.0,1.0) b = (0.0,None) bnds = (b,b) con1 = {'type':'eq','fun': constraint1} solution = minimize(objective, X, method='SLSQP', bounds=bnds, constraints=con1) print(solution) # Output: fun: 0.9999999999294936 x: [0.49999999 2.49999999]"},{"prompt":"Edit the following program in python to make it suitable for a distributed system # # This program implements the sortmerge join algorithm # num_partitions = 8 # n = 8 # def sort_merge_join(R1,R2): # sorted_R1 = [] # sorted_R2 = [] # R = [] # # TODO: Sort R1 and R2 according to their last column # for i in range(0, num_partitions): # for j in range(0, n): # if sorted_R1 =[] # if sorted_R2 =[] #","completion":"# # This program implements the sort-merge join algorithm # num_partitions = 8 # n = 8 # def sort_merge_join(R1,R2): # sorted_R1 = [] # sorted_R2 = [] # R = [] # # Sort R1 and R2 according to their last column # for i in range(0, num_partitions): # for j in range(0, n): # key_R1 = R1[i][-1] # key_R2 = R2[i][-1] # sorted_R1.append(key_R1) # sorted_R2.append(key_R2) # sorted_R1.sort() # sorted_R2.sort() # # TODO: Construct output R"},{"prompt":"Create a Python program to visualize the performance of different stock prices over a period of time. A list of stock prices for a given company over the past 10 year","completion":"import matplotlib.pyplot as plt # Read in data data = [] with open('stock_prices.txt') as f: data = [float(x) for x in f.read().split()] # Plot data plt.plot(range(1, len(data)+1), data) plt.title('Stock Price Over Time') plt.xlabel('Time') plt.ylabel('Price') plt.show()"},{"prompt":"Create a class in Python that implements a method to convert a decimal to a binary number. Not applicable","completion":"class DecimalToBinary: def __init__(self, num): self.num = num def convert(self): if self.num > 1: self.convert(self.num // 2) print(self.num % 2, end='') number = DecimalToBinary(14) number.convert()"},{"prompt":"Create a python program to merge the two given lists. list_1 = [1, 2, 3] list_2 = [4, 5, 6]","completion":"def merge_lists(list_1, list_2): \\"\\"\\"Merge the two given lists.\\"\\"\\" list_1.extend(list_2) return list_1 # Usage Example list_1 = [1, 2, 3] list_2 = [4, 5, 6] merged_list = merge_lists(list_1, list_2) print(merged_list) # [1, 2, 3, 4, 5, 6]"},{"prompt":"Generate a query string parser in Python. The parser should extract query parameters from a URL and format the output as a JSON object. url: https://example.com?search=Hello%20world&page=2","completion":"def parse_query_string(url): components = url.split('?') if len(components) == 2: query_string = components[1] params = query_string.split('&') output = {} for param in params: key_value = param.split('=') output[key_value[0]] = key_value[1] return output"},{"prompt":"Construct a structure in Python (like a list, dictionary, or other data structure) to store the name and age of 10 people.","completion":"data_structure = [ {'name': 'John', 'age': 32}, {'name': 'Mary', 'age': 25}, {'name': 'James', 'age': 29}, {'name': 'Alex', 'age': 26}, {'name': 'Gina', 'age': 32}, {'name': 'Charlie', 'age': 28}, {'name': 'Diana', 'age': 30}, {'name': 'Mark', 'age': 33}, {'name': 'Tina', 'age': 27}, {'name': 'Fred', 'age': 31} ]"},{"prompt":"Write a python program to find the most common words in a given text. Input should be given as a string and output should be a list of words in descending order of frequency. text = 'This is a text to find the most common words in the given text. The output should be a list of words in descending order of frequency'","completion":"from collections import Counter def find_most_common_words(text): words = text.split() counter = Counter(words) return counter.most_common() print(find_most_common_words(text)) # Output: [('a', 2), ('the', 2), ('in', 2), ('of', 2), ('most', 1), ('This', 1), ('is', 1), ('text', 1), ('find', 1), ('common', 1), ('words', 1), ('given', 1), ('output', 1), ('should', 1), ('be', 1), ('list', 1), ('descending', 1), ('order', 1), ('frequency', 1)]"},{"prompt":"This code defines a Python class for controlling an Andor3 camera. To use it, import the necessary modules and create an instance of the Andor3 class. Then, call the appropriate methods to control the camera's settings and acquire images.","completion":"# This file is part of LImA, a Library for Image Acquisition # # Copyright (C) : 2009-2014 # European Synchrotron Radiation Facility # BP 220, Grenoble 38043 # FRANCE # # This is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 3 of the License, or # (at your option) any later version. # # This software is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, see <http://www.gnu.org/licenses/>. #============================================================================= # # file : Andor3.py # # description : Python source for the Andor3 and its commands. # The class is derived from Device. It represents the # CORBA servant object which will be accessed from the # network. All commands which can be executed on the # Pilatus are implemented in this file. # # project : TANGO Device Server # # copyleft : European Synchrotron Radiation Facility # BP 220, Grenoble 38043 # FRANCE # #============================================================================= # (c) - Bliss - ESRF #============================================================================= # import PyTango import sys, types, os, time from Lima import Core from Lima import Andor3 as Andor3Module # import some useful helpers to create direct mapping between tango attributes # and Lima interfaces. from Lima.Server import AttrHelper class Andor3(PyTango.Device_4Impl): Core.DEB_CLASS(Core.DebModApplication, 'LimaCCDs') #================================================================== # Andor3 Class Description: # # #================================================================== class Andor3(PyTango.Device_4Impl): #--------- Add you global variables here -------------------------- Core.DEB_CLASS(Core.DebModApplication, 'LimaCCDs') #------------------------------------------------------------------ # Device constructor #------------------------------------------------------------------ @Core.DEB_MEMBER_FUNCT def __init__(self,cl, name): PyTango.Device_4Impl.__init__(self,cl,name) # dictionnaries to be used with AttrHelper.get_attr_4u self.__AdcGain = {'B11_HI_GAIN': _Andor3Camera.b11_hi_gain, 'B11_LOW_GAIN': _Andor3Camera.b11_low_gain, 'B16_LH_GAIN': _Andor3Camera.b16_lh_gain, } self.__AdcRate = {'MHZ10': _Andor3Camera.MHz10, 'MHZ100': _Andor3Camera.MHz100, 'MHZ200': _Andor3Camera.MHz200, 'MHZ280': _Andor3Camera.MHz280, } self.__Cooler = {'ON': True, 'OFF': False} self.__FanSpeed = {'OFF': _Andor3Camera.Off, 'LOW': _Andor3Camera.Low, 'HIGH': _Andor3Camera.On, } self.__ElectronicShutterMode = {'ROLLING': _Andor3Camera.Rolling, 'GLOBAL': _Andor3Camera.Global, } self.__Overlap = {'ON': True, 'OFF': False} self.__SpuriousNoiseFilter = {'ON': True, 'OFF': False} self.__Attribute2FunctionBase = {'adc_gain': 'SimpleGain', 'adc_rate': 'AdcRate', 'temperature': 'Temperature', 'temperature_sp': 'TemperatureSP', 'cooler': 'Cooler', 'cooling_status': 'CoolingStatus', 'fan_speed': 'FanSpeed', 'electronic_shutter_mode': 'ElectronicShutterMode', 'frame_rate': 'FrameRate', 'max_frame_rate_transfer': 'MaxFrameRateTransfer', 'readout_time': 'ReadoutTime', 'overlap': 'Overlap', 'spurious_noise_filter': 'SpuriousNoiseFilter', } self.init_device() #------------------------------------------------------------------ # Device destructor #------------------------------------------------------------------ def delete_device(self): pass #------------------------------------------------------------------ # Device initialization #------------------------------------------------------------------ @Core.DEB_MEMBER_FUNCT def init_device(self): self.set_state(PyTango.DevState.ON) # Load the properties self.get_device_properties(self.get_device_class()) # Apply properties if any if self.adc_gain: _Andor3Interface.setAdcGain(self.__AdcGain[self.adc_gain]) if self.adc_rate: _Andor3Interface.setAdcRate(self.__AdcRate[self.adc_rate]) if self.temperature_sp: _Andor3Camera.setTemperatureSP(self.temperature_sp) if self.cooler: _Andor3Camera.setCooler(self.__Cooler[self.cooler]) #================================================================== # # Andor3 read/write attribute methods # #================================================================== def __getattr__(self,name) : try: return AttrHelper.get_attr_4u(self, name, _Andor3Interface) except: return AttrHelper.get_attr_4u(self, name, _Andor3Camera) #================================================================== # # Andor3 command methods # #================================================================== #------------------------------------------------------------------ # getAttrStringValueList command: # # Description: return a list of authorized values if any # argout: DevVarStringArray #------------------------------------------------------------------ @Core.DEB_MEMBER_FUNCT def getAttrStringValueList(self, attr_name): return AttrHelper.get_attr_string_value_list(self, attr_name) #================================================================== # # Andor3 class definition # #================================================================== class Andor3Class(PyTango.DeviceClass): # Class Properties class_property_list = { } # Device Properties device_property_list = { 'config_path': [PyTango.DevString, 'configuration path directory', []], 'camera_number': [PyTango.DevShort, 'Camera number', []], 'adc_gain': [PyTango.DevString, 'Adc Gain', []], 'adc_rate': [PyTango.DevString, 'Adc readout rate', []], 'temperature_sp': [PyTango.DevShort, 'Temperature set point in Celsius', []], 'cooler': [PyTango.DevString, 'Start or stop the cooler (\\"ON\\"/\\"OFF\\")', []], } # Command definitions cmd_list = { 'getAttrStringValueList': [[PyTango.DevString, \\"Attribute name\\"], [PyTango.DevVarStringArray, \\"Authorized String value list\\"]] } # Attribute definitions attr_list = { 'temperature_sp': [[PyTango.DevDouble, PyTango.SCALAR, PyTango.READ_WRITE], { 'label':'Set/get the temperature set-point', 'unit': 'C', 'format': '%f', 'description': 'in Celsius', }], 'temperature': [[PyTango.DevDouble, PyTango.SCALAR, PyTango.READ], { 'label':'get the current temperature sensor', 'unit': 'C', 'format': '%f', 'description': 'in Celsius', }], 'cooler': [[PyTango.DevString, PyTango.SCALAR, PyTango.READ_WRITE], { 'label':'Start/stop the cooler', 'unit': 'N/A', 'format': '', 'description': 'OFF or ON', }], 'cooling_status': [[PyTango.DevString, PyTango.SCALAR, PyTango.READ], { 'label':'Fast trigger mode, see manual for usage', 'unit': 'N/A', 'format': '', 'description': '0-OFF / 1-ON', }], 'adc_gain': [[PyTango.DevString, PyTango.SCALAR, PyTango.READ_WRITE], { 'label':'ADC Gain', 'unit': 'N/A', 'format': '', 'description': 'ADC Gain which can be apply to the preamplifier', }], 'adc_rate': [[PyTango.DevString, PyTango.SCALAR, PyTango.READ_WRITE], { 'label': 'ADC Rate', 'unit': 'N/A', 'format': '', 'description': 'ADC Readout Rate', }], 'electronic_shutter_mode': [[PyTango.DevString, PyTango.SCALAR, PyTango.READ_WRITE], { 'label':'Electronic Shutter Mode', 'unit': 'N/A', 'format': '', 'description': 'Electronic shutter mode, Rolling or Global', }], 'fan_speed': [[PyTango.DevString, PyTango.SCALAR, PyTango.READ_WRITE], { 'label':'Fan speed', 'unit': 'N/A', 'format': '', 'description': 'Fan speed, off, low or High', }], 'frame_rate': [[PyTango.DevDouble, PyTango.SCALAR, PyTango.READ], { 'label':'Frame rate', 'unit': 'Hz', 'format': '%f', 'description': 'the rate at which frames are delivered to the use', }], 'max_frame_rate_transfer': [[PyTango.DevDouble, PyTango.SCALAR, PyTango.READ], { 'label':'Maximum frame rate transfer', 'unit': 'byte per sec.', 'format': '%f', 'description': 'Returns the maximum sustainable transfer rate of the interface for the current shutter mode and ROI', }], 'readout_time': [[PyTango.DevDouble, PyTango.SCALAR, PyTango.READ], { 'label':'Readout time', 'unit': 'sec', 'format': '%f', 'description': 'return the time to readout data from the sensor', }], 'overlap': [[PyTango.DevString, PyTango.SCALAR, PyTango.READ_WRITE], { 'label':' Enable/Disable overlap mode', 'unit': 'N/A', 'format': '', 'description': 'OFF or ON', }], 'spurious_noise_filter': [[PyTango.DevString, PyTango.SCALAR, PyTango.READ_WRITE], { 'label':'Enable/Disable spurious noise filter', 'unit': 'N/A', 'format': '', 'description': 'OFF or ON', }], } #------------------------------------------------------------------ # Andor3Class Constructor #------------------------------------------------------------------ def __init__(self, name): PyTango.DeviceClass.__init__(self, name) self.set_type(name) #---------------------------------------------------------------------------- # Plugins #---------------------------------------------------------------------------- from Lima import Andor3 as Andor3Acq _Andor3Camera = None _Andor3Interface = None def get_control(config_path='/users/blissadm/local/Andor3/andor/bitflow', camera_number = '0', **keys) : #properties are passed here as string global _Andor3Camera global _Andor3Interface if _Andor3Camera is None: print ('nnStarting and configuring the Andor3 camera ...') _Andor3Camera = Andor3Acq.Camera(config_path, int(camera_number)) _Andor3Interface = Andor3Acq.Interface(_Andor3Camera) print ('nnAndor3 Camera #%s (%s:%s) is started'%(camera_number,_Andor3Camera.getDetectorType(),_Andor3Camera.getDetectorModel())) return Core.CtControl(_Andor3Interface) def get_tango_specific_class_n_device(): return Andor3Class,Andor3"},{"prompt":"Suggest an algorithm and write Python code to solve the following problem: classify a list of colours into warm and cool colours. Colours list = [Red, Yellow, Orange, Green, Blue, Purple, Pink]","completion":"def classify_colours(colours_list): warm_colours = [\\"Red\\", \\"Yellow\\", \\"Orange\\"] cool_colours = [\\"Green\\", \\"Blue\\", \\"Purple\\", \\"Pink\\"] warm_values = [] cool_values = [] for colour in colours_list: if colour in warm_colours: warm_values.append(colour) elif colour in cool_colours: cool_values.append(colour) return warm_values, cool_values"},{"prompt":"Create a python script to identify if a given string is a valid IPv4 address or not. String: 192.168.25.688","completion":"def is_valid_ipv4(ip): parts = ip.split('.') if len(parts) != 4: return False for part in parts: if not part.isdigit(): return False if int(part) < 0 or int(part) > 255: return False return True print(is_valid_ipv4('192.168.25.688')) Output: False"},{"prompt":"Write a Python program to prompt the user for 3 numbers and return the average of the numbers. Not applicable","completion":"def averageNums(): nums = [] for i in range(3): num = input(\\"Enter a number: \\") nums.append(float(num)) return sum(nums) / len(nums) # Example averageNums() # Will prompt the user for 3 numbers and print the average"},{"prompt":"Write a Python program that takes in a list of integerNums and returns a new list with elements which are divisible by 3. [3,4,6,9,10]","completion":"def divisible_by_3(intNums): result = [] for i in intNums: if i % 3 == 0: result.append(i) return result intNums = [3,4,6,9,10] print(divisible_by_3(intNums)) # Output: [3, 6, 9]"},{"prompt":"Create an objectoriented program in Python to represent a game. Not applicable","completion":"class Game: def __init__(self): self.players = [] self.board = None def add_player(self, player): self.players.append(player) def set_board(self, board): self.board = board def start(self): for player in self.players: player.turn() def end(self): for player in self.players: player.game_over()"},{"prompt":"Use optimization techniques to create a web crawler in Python which can quickly extract data from a website. Not applicable","completion":"# Define a function to crawl a website def web_crawler(url): # Create the request object request = Request(url) # Make the request response = urlopen(request) # Extract the response text html = response.read() # Use regex to find the relevant data data_regex = re.compile('<div class=\\"data-item\\">(.*?)</div>') data_matches = data_regex.finditer(html) # Return the data found return [match.group(1) for match in data_matches] # Make a request to a website url = 'http://www.example.com' data = web_crawler(url)"},{"prompt":"Generate a Python script to filter a list of words by length. words = ['cat', 'dog', 'elephant', 'bear', 'dragon']","completion":"def filter_by_length(words, length): return [word for word in words if len(word) == length]"},{"prompt":"Can you generate a python program to reverse a given string? Hello","completion":"def reverse_string(string): reversed_string = \\"\\" for char in string: reversed_string = char + reversed_string return reversed_string string = \\"Hello\\" reversed_string = reverse_string(string) print(reversed_string) # olleH"},{"prompt":"Generate a valid python program according to the input: Reverse the elements of a list.","completion":"def reverse_list(list): for i in range(int(len(list) / 2)): temp = list[i] list[i] = list[len(list) - i - 1] list[len(list) - i - 1] = temp return list"},{"prompt":"Suggest a completion of the following Python code to print all perfect squares between 25 and 45. for n in range()","completion":"for n in range(25, 46): if n ** 0.5 == int(n ** 0.5): print(n)"},{"prompt":"Construct a Markov chain using Python to predict the next word in a sentence. Not applicable","completion":"import random # Build the Markov chain def build_chain(data): chain = {} for i in range(len(data)-2): key = (data[i], data[i+1]) value = data[i+2] if key in chain: chain[key].append(value) else: chain[key] = [value] return chain # Generate the output def generate_output(chain, seed): output = list(seed) while True: key = (seed[-2], seed[-1]) if key not in chain: break value = random.choice(chain[key]) output.append(value) seed = seed[1:] + [value] return ' '.join(output)"},{"prompt":"Design a program in Python which takes a list of strings as input and prints out the number of strings with a length equal to 3. ['word', 'cat', 'bat', 'car', 'apple', 'dog']","completion":"def count_length_3(words): count = 0 for word in words: if len(word) == 3: count += 1 print(count) count_length_3(['word', 'cat', 'bat', 'car', 'apple', 'dog'])"},{"prompt":"Create a Python class called Person that includes parameters for a person's name, age, gender, and nationality. Not applicable","completion":"class Person: def __init__(self, name, age, gender, nationality): self.name = name self.age = age self.gender = gender self.nationality = nationality def get_name(self): return self.name def get_age(self): return self.age def get_gender(self): return self.gender def get_nationality(self): return self.nationality"},{"prompt":"Create a Python library to manipulate 2D matrices. The library should include functions for creating matrices, multiplying matrices, and analyzing the elements of matrices. Not applicable","completion":"from collections import defaultdict class Matrix: def __init__(self, rows, cols): self.rows = rows self.cols = cols self.matrix = [[0 for i in range(cols)] for j in range(rows)] def create_matrix(rows, cols, values): m = Matrix(rows, cols) for i in range(rows): for j in range(cols): m.matrix[i][j] = values[i][j] return m def mult_matrix(m1, m2): m = Matrix(m1.rows, m2.cols) for i in range(m1.rows): for j in range(m2.cols): for k in range(m1.cols): m.matrix[i][j] += m1.matrix[i][k] * m2.matrix[k][j] return m def analyze_matrix(m): stats = defaultdict(int) for row in range(m.rows): for col in range(m.cols): stats[m.matrix[row][col]] += 1 return stats"},{"prompt":"Provide a machine learning model in python to classify emails into spam or nonspam.","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Read the dataset df = pd.read_csv('spam_data.csv') # Split into train and test data X_train, X_test, y_train, y_test = train_test_split(df['email'], df['label'], random_state=0) # Extract features vect = CountVectorizer().fit(X_train) X_train_vectorized = vect.transform(X_train) # Train a model model = MultinomialNB().fit(X_train_vectorized, y_train) # Check accuracy preds = model.predict(vect.transform(X_test)) # Display the accuracy score print('Accuracy: %s' % accuracy_score(y_test, preds))"},{"prompt":"Write a Python program to generate the powerset of a given set of elements. [1, 2, 3]","completion":"def powerset(arr): result = [[]] for ele in arr: result.extend([subset + [ele] for subset in result]) return result print(powerset([1, 2, 3]))"},{"prompt":"Create a tree structure like below in Python","completion":"class Node(): def __init__(self, data): self.data = data self.left = None self.right = None def insert(self, data): if self.data: if data < self.data: if self.left is None: self.left = Node(data) else: self.left.insert(data) elif data > self.data: if self.right is None: self.right = Node(data) else: self.right.insert(data) else: self.data = data"},{"prompt":"Develop a Python function to print out a Pascals triangle using n number of rows.","completion":"def pascals_triangle(n): result = [] for row_num in range(n): row = [1] for j in range(1, row_num): prev_row = result[row_num-1] row.append(prev_row[j-1] + prev_row[j]) row.append(1) result.append(row) return result num_rows = 6 print(pascals_triangle(num_rows))"},{"prompt":"Write a code snippet to fetch the first character of a given string in Python.","completion":"string = 'example' first_char = string[0] print(first_char)"},{"prompt":"Design a class to represent a complex number in Python.","completion":"class ComplexNumber: def __init__(self, real, imag): self.real = real self.imag = imag def __add__(self, other): real = self.real + other.real imag = self.imag + other.imag return ComplexNumber(real, imag) def __str__(self): return '{} + {}i'.format(self.real, self.imag)"},{"prompt":"Design an algorithm in Python for optimizing an itinerary for a given list of locations. [ {'location': 'A', 'distance': 15}, {'location': 'B', 'distance': 25}, {'location': 'C', 'distance': 10}, {'location': 'D', 'distance': 20} ]","completion":"def optimize_itinerary(locations): optimized_list = [] while locations: min_dist = float('inf') min_dist_loc = None for loc in locations: dist = loc['distance'] if dist < min_dist: min_dist = dist min_dist_loc = loc optimized_list.append(min_dist_loc) locations.remove(min_dist_loc) return optimized_list locations = [ {'location': 'A', 'distance': 15}, {'location': 'B', 'distance': 25}, {'location': 'C', 'distance': 10}, {'location': 'D', 'distance': 20} ] result = optimize_itinerary(locations) print(result)"},{"prompt":"Create a natural language processing model that can Parse given reviews to determine whether it is positive or negative. The customer service here is terrible","completion":"# Imports import os import time import keras import numpy as np from keras.preprocessing.text import Tokenizer from keras.preprocessing.sequence import pad_sequences from keras.models import Sequential from keras.layers import Embedding, LSTM, Dense, Bidirectional # Set random seed np.random.seed(1234) PYTHONHASHSEED = 0 # Data Preprocessing reviews = ['The customer service here is terrible'] labels = [1] # 1 for negative sentiment # Tokenize the sentences tokenizer = Tokenizer() tokenizer.fit_on_texts(reviews) word_index = tokenizer.word_index vocab_size=len(word_index) sentences = tokenizer.texts_to_sequences(reviews) padded_sentences = pad_sequences(sentences, padding='post') # Building the Model model = Sequential() model.add(Embedding(vocab_size, 64, input_length = padded_sentences.shape[1])) model.add(Bidirectional(LSTM(64))) model.add(Dense(2, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) # one-hot encode the labels labels = np.eye(2)[labels].reshape(-1, 2) model.fit(padded_sentences, labels, epochs=200, batch_size=10)"},{"prompt":"Use the provided data set to generate a bar chart in Python. xaxis values: 1, 2, 3, 4 yaxis values: 10, 12, 7, 5","completion":"import matplotlib.pyplot as plt x_values = [1, 2, 3, 4] y_values = [10, 12, 7, 5] plt.bar(x_values, y_values) plt.title('Bar Chart') plt.xlabel('X-axis') plt.ylabel('Y-axis') plt.show()"},{"prompt":"egrate the following logic into a python program Read a number and print OK if the number is greater than 10, and print Not OK otherwise.","completion":"num = int(input(\\"Enter a number: \\")) if num > 10: print(\\"OK\\") else: print(\\"Not OK\\")"},{"prompt":"Create a Python script that monitors a given URL and sends an email notification if there is an error while accessing the resource","completion":"\\"\\"\\" Create a Python script that monitors a given URL and sends an email notification if there is an error while accessing the resource \\"\\"\\" import requests import smtplib # Monitor the URL URL = 'https://example.com' response = requests.get(URL) status_code = response.status_code # Send an email if there is an error if status_code == 404: # Set up the email server server = smtplib.SMTP('smtp.example.com', 25) server.ehlo() server.starttls() # Set the 'from' and 'to' addresses from_email = 'monitor@example.com' to_email = 'admin@example.com' # Construct the message message = 'Error 404 on ' + URL # Send the email server.sendmail(from_email, to_email, message) server.quit()"},{"prompt":"Create a Python script that uses Natural Language Processing to classify tweets into two categories: 'positive' and 'negative'. Not applicable","completion":"# Importing libraries import nltk from nltk.tokenize import TweetTokenizer from nltk.corpus import stopwords from nltk.stem import WordNetLemmatizer from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB # Pre-processing functions def preprocess(tweet): # tokenize tknzr = TweetTokenizer() tokens = tknzr.tokenize(tweet) # remove stopwords stop_words = set(stopwords.words('english')) tokens = [token for token in tokens if token not in stop_words] # lemmatize lemmatizer = WordNetLemmatizer() tokens = [lemmatizer.lemmatize(token) for token in tokens] # join tokens together in a string preprocessed_tweet = ' '.join(token for token in tokens) return preprocessed_tweet # Training # initialize vectorizer vectorizer = TfidfVectorizer(min_df=2, max_df=0.8, analyzer='word', preprocessor=preprocess) # get training data train_set = vectorizer.fit_transform(train_data) # build classifier clf = MultinomialNB() clf.fit(train_set, train_labels) # Testing # get test data test_set = vectorizer.transform(test_data) # make predictions predictions = clf.predict(test_set) # evaluate accuracy accuracy = accuracy_score(test_labels, predictions)"},{"prompt":"Write a Python program to select rows with score greater than 8 from the given Pandas DataFrame. data = { 'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'], 'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19], 'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1], 'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes'] }","completion":"import pandas as pd # Create a DataFrame from given data data = { 'name': ['Anastasia', 'Dima', 'Katherine', 'James', 'Emily', 'Michael', 'Matthew', 'Laura', 'Kevin', 'Jonas'], 'score': [12.5, 9, 16.5, np.nan, 9, 20, 14.5, np.nan, 8, 19], 'attempts': [1, 3, 2, 3, 2, 3, 1, 1, 2, 1], 'qualify': ['yes', 'no', 'yes', 'no', 'no', 'yes', 'yes', 'no', 'no', 'yes']} df = pd.DataFrame(data) # Select rows with score greater than 8 df_selected = df[df['score'] > 8] # Print dataframe print(df_selected)"},{"prompt":"Write an algorithm in Python to predict an employee's salary based on their company's stock prices. The input will be a dataset with the company's stock prices for the past 5 years.","completion":"# import libraries import numpy as np import pandas as pd from sklearn import linear_model from sklearn.linear_model import LinearRegression # read in data data = pd.read_csv(\\"stock_prices.csv\\") # define X and y X = data.iloc[:, :-1].values y = data.iloc[:, -1].values # split into training and test sets X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.5, random_state=42) # create model regressor = LinearRegression() regressor.fit(X_train, y_train) # make predictions y_pred = regressor.predict(X_test) # calculate r^2 score r2_score = regressor.score(X_test, y_test) # display results print(\\"R2 score: \\", r2_score) # create model to predict salary new_regressor = LinearRegression() new_regressor.fit(X, y) # get employee's company's stock prices em_stock = np.array([em_stock_1, em_stock_2, ..., em_stock_n]).reshape(-1, 1) # predict employee salary em_salary = new_regressor.predict(em_stock)"},{"prompt":"mplement a Pythong program to concatenate two strings.","completion":"string1 = \\"Welcome\\" string2 = \\"to the world\\" def concat(string1 , string2): return string1 + string2 print(concat(string1, string2))"},{"prompt":"Create a Python script to extract a list of unique words from the given text. This is a sample text with some duplicate entrie","completion":"import re text = 'This is a sample text with some duplicate entries' words_list = re.findall(r'w+', text) unique_words = set(words_list) print(unique_words) # output: {'some', 'is', 'duplicate', 'with', 'entries', 'text', 'This', 'a'}"},{"prompt":"Design a program in Python to find the greatest of three numbers. 25, 39, 12","completion":"def greatest_num(num1, num2, num3): greatest = 0 if num1 > num2 and num1 > num3: greatest = num1 elif num2 > num1 and num2 > num3: greatest = num2 else: greatest = num3 print(\\"The greatest of the three numbers is:\\", greatest) # Here we call the function with the three numbers greatest_num(25, 39, 12)"},{"prompt":"Create a Python script to print an nxn matrix containing all the numbers from 1 to n² 5","completion":"def print_matrix(n): matrix = [[0 for x in range(n)] for y in range(n)] k = 1 for i in range(0, n): for j in range(0, n): matrix[i][j] = k k = k + 1 for i in range(0, n): for j in range(0, n): print(matrix[i][j], end = \\" \\") print(\\"\\")"},{"prompt":"Develop a Python program that tells how many characters are there in a given string. My name is Joh","completion":"# Python program to count the number of characters in a string string = input('Enter a string: ') count = 0 for char in string: count += 1 print(f'The string contains {count} characters.')"},{"prompt":"Build a machine learning algorithm in Python that predicts the number of passengers on a train given time and day of the week.","completion":"# Import libraries import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Load the data train_data = pd.read_csv(\\"dataset.csv\\") # Create feature matrix and target vector X = train_data.iloc[:,1:3] y = train_data.iloc[:,3] # Fit the model reg = LinearRegression() reg.fit(X, y) # Predictions predictions = reg.predict(X)"},{"prompt":"Design a python program that returns the index of the first occurrence of an item in a given list item = 7 list = [1, 4, 8, 7, 5, 9, 7]","completion":"def index_first_occurrence(item, list): for i in range(len(list)): if list[i] == item: return i return -1"},{"prompt":"Write a Python function to sort a list of tuples based on their third elements. list = [('a', 1, 3), ('e', 5, 8), ('b', 6, 9), ('d', 2, 4)]","completion":"def sort_by_third_element(list): return sorted(list, key=lambda x: x[2]) list = [('a', 1, 3), ('e', 5, 8), ('b', 6, 9), ('d', 2, 4)] res = sort_by_third_element(list) # The result is [('a', 1, 3), ('d', 2, 4), ('e', 5, 8), ('b', 6, 9)]"},{"prompt":"Construct a Python function that takes as input a string and returns the length of the longest word in the string. This is an example string.","completion":"def longest_word_length(input_string): longest_word_length = 0 words = input_string.split() for word in words: if len(word) > longest_word_length: longest_word_length = len(word) return longest_word_length"},{"prompt":"Generate a Python script to sort a 2D array of integers by the second column. [[1, 10], [5, 5], [4, 8]]","completion":"def sort_2d_arr(arr): arr.sort(key = lambda x : x[1]) return arr print(sort_2d_arr([[1, 10], [5, 5], [4, 8]])) # Output [[5, 5], [4, 8], [1, 10]]"},{"prompt":"Code a python class that accepts a list of names as input and prints them on a separate line. List:[John, James, Jenny, Frank]","completion":"class Person: def __init__(self, names): self.names = names def print_names(self): for name in self.names: print(name) person = Person([\\"John\\", \\"James\\", \\"Jenny\\", \\"Frank\\"]) person.print_names()"},{"prompt":"Create a password validator program in Python to check if a given password is valid or not.","completion":"def is_valid_password(pwd): if len(pwd) < 6: print(\\"Password must be at least 6 characters long.\\") return False if not any(char.isdigit() for char in pwd): print(\\"Password must have at least one number.\\") return False if not any(char.isupper() for char in pwd): print(\\"Password must have at least one uppercase letter.\\") return False if not any(char.islower() for char in pwd): print(\\"Password must have at least one lowercase letter.\\") return False return True"},{"prompt":"Write a Python program to multiply two given numbers and print their product num1 = 10 num2 = 8","completion":"product = num1 * num2 print(product)"},{"prompt":"Create a Python class to represent a movie.","completion":"class Movie(): # Constructor def __init__(self, title, director, runtime, rating): self.title = title self.director = director self.runtime = runtime self.rating = rating # Getters def getTitle(self): return self.title def getDirector(self): return self.director def getRuntime(self): return self.runtime def getRating(self): return self.rating"},{"prompt":"Design a python program to find the sample standard deviation of a given list of numbers.","completion":"def sample_standard_deviation(nums): n = len(nums) mean = sum(nums) / n squared_sum = 0 for num in nums: squared_sum += (num - mean)**2 return (squared_sum / (n - 1)) ** 0.5"},{"prompt":"Design a class for data storage in Python.","completion":"class DataStorage: def __init__(self): self.data = {} def store(self, key, value): \\"\\"\\"Stores a value in the data structure with the given key\\"\\"\\" self.data[key] = value def get(self, key): \\"\\"\\"Retrieves the value associated with a given key in the data structure\\"\\"\\" return self.data[key] def remove(self, key): \\"\\"\\"Removes the value associated with a given key from the data structure\\"\\"\\" if key in self.data: del self.data[key]"},{"prompt":"Design a natural language processing algorithm in Python to extract names from a text.","completion":"import nltk #tokenize the text text = \\"John and Mary went to the park. They had a great time.\\" tokenized_text = nltk.word_tokenize(text) # tag the tokens with their part-of-speech tagged_words = nltk.pos_tag(tokenized_text) # filter for proper nouns names = [word for word,pos in tagged_words if (pos == 'NNP' or pos == 'NNPS')] print(names) # Output: ['John', 'Mary']"},{"prompt":"Write a Python program that takes a dictionary as an input, and prints the keys and values in alphabetical order. {'a': 1, 'b': 2, 'c': 3}","completion":"def print_dict_alphabetically(d): sorted_dict = {k: d[k] for k in sorted(d)} for key, value in sorted_dict.items(): print(key, value) print_dict_alphabetically({'a': 1, 'b': 2, 'c': 3})"},{"prompt":"Create a class in Python containing an add_student() method.","completion":"class StudentList: def __init__(self): self.students = [] def add_student(self, student): self.students.append(student)"},{"prompt":"Create a Python function to convert a temperature from Fahrenheit to Celsius.","completion":"def fahrenheit_to_celsius(fahrenheit): celsius = (fahrenheit - 32) * 5.0/9.0 return celsius"},{"prompt":"Design a Python function to encode a given string using the base64 encoding scheme.","completion":"import base64 def base64_encode(string): encodedBytes = base64.b64encode(string.encode(\\"utf-8\\")) return str(encodedBytes, \\"utf-8\\")"},{"prompt":"Design a Python program to print out all prime numbers in a range Number Range between 1 and 10","completion":"def is_prime(n): for i in range(2, n): if n%i == 0: return False return True for num in range(1, 10): if is_prime(num): print(num)"},{"prompt":"Develop a script in Python to find all numbers in a given string. This sentence has two numbers: 35 and 347.","completion":"import re s = \\"This sentence has two numbers: 35 and 347.\\" numlist = [] for item in re.findall('d+', s): numlist.append(int(item)) print(numlist) # prints [35, 347]"},{"prompt":"Generate a Python script that extracts text from a given PDF and converts it to CSV. A PDF file","completion":"import os import pdfplumber import csv # Open the pdf with pdfplumber.open(file_path) as pdf: # Extract text text = pdf.extract_text() # Convert to list lines = text.splitlines() # Save as csv with open('file.csv', 'w') as csvfile: wr = csv.writer(csvfile) for line in lines: wr.writerow(line.split())"},{"prompt":"Develop a Python script to get the length of a given string. How are you?","completion":"def get_string_length(str): return len(str) get_string_length(\\"How are you?\\")"},{"prompt":"Design an algorithm in Python for solving sudoku puzzles.","completion":"import numpy as np def solve_sudoku(board): N = len(board) CELLS = N**2 ROWS = [set(range(1,N+1)) for i in range(CELLS)] COLS = [set(range(1,N+1)) for i in range(CELLS)] BLOCKS = [set(range(1,N+1)) for i in range(CELLS)] # Convert board to binary board_binary = np.array(board) board_binary[board_binary!=0] = 1 # Calculate block numbers block_nums = (board_binary.reshape(N,-1)+1).reshape(-1) - 1 # Generate sets for each cell for i in range(CELLS): if board[i]!=0: num = board[i] ROWS[i] = {num} col = i // N COLS[col].remove(num) blk = block_nums[i] BLOCKS[blk].remove(num) # Start search stack = [-1] while stack: i = stack.pop() + 1 # Fill cell with number between 1..N while i< CELLS and board[i]!=0: i += 1 # No valid number found if i == CELLS: continue row, col, blk = i//N, i%N, block_nums[i] available = ROWS[i] & COLS[col] & BLOCKS[blk] for num in available: # fill current cell board[i] = num # Remove the number from other cells in # the same row, col and block ROWS[i] -= {num} COLS[col] -= {num} BLOCKS[blk] -= {num} stack.append(i) break return board"},{"prompt":"Combine two Python dictionaries and return a new dictionary dict1: {'a':1, 'b':2} dict2: {'b':3, 'c':4}","completion":"def combine_dict(dict1, dict2): combined_dict = {} for key, value in dict1.items(): combined_dict[key] = value for key, value in dict2.items(): combined_dict[key] = value return combined_dict dict1 = {'a':1, 'b':2} dict2 = {'b':3, 'c':4} combined_dict = combine_dict(dict1, dict2) print(combined_dict)"},{"prompt":"Write a Python program to produce a scatterplot of total rainfall by month over a year. rainfall_data = { ‘January’: [2.3, 12.2, 5.8], ‘February’: [3.4, 6.1, 11.2], ‘March’: [2.2, 7.5, 5.4], ‘April’: [1.1, 9.3, 6.7], ‘May’: [2.7, 4.2, 10.6], ‘June’: [3.0, 9.1, 12.2], ‘July’: [4.9, 18.2, 5.3], ‘August’: [3.1, 10.4, 7.4], ‘September’: [5.8, 7.2, 9.5], ‘October’: [4.2, 8.9, 10.8], ‘November’: [3.1, 7.4, 8.1], ‘December’: [4.1, 5.2, 9.6] }","completion":"import matplotlib.pyplot as plt # Get the values from the dictionary months = list(rainfall_data.keys()) total_rainfall = list(map(sum, rainfall_data.values())) # Create the scatter plot plt.scatter(months, total_rainfall) # Add title and axis labels plt.title('Total Rainfall by Month') plt.xlabel('Month') plt.ylabel('Total Rainfall (inches)') # Show the plot plt.show()"},{"prompt":"Python, write a program to calculate the area of a triangle when the base and height are given. Base: 10, Height: 5","completion":"def triangle_area(base, height): return (base * height) / 2 triangle_area(10, 5) # 25.0"},{"prompt":"Develop an algorithm in Python to add two given integers.","completion":"def add_two_integers(a, b): return a + b x = 5 y = 7 sum = add_two_integers(x, y) print('The sum of ', x, ' and ', y, ' is ', sum)"},{"prompt":"Create a StatusBar class that can be used to display messages and prompts in a REPL. The class should have methods for displaying messages, prompting the user for confirmation or a file name, and processing user input. The class should also be able to handle events such as refresh requests and paste events.","completion":"import greenlet import time import curtsies.events as events from bpython.repl import Interaction as BpythonInteraction from bpython.curtsiesfrontend.manual_readline import char_sequences as rl_char_sequences class StatusBar(BpythonInteraction): \\"\\"\\"StatusBar and Interaction for Repl Passing of control back and forth between calls that use interact api (notify, confirm, file_prompt) like bpython.Repl.write2file and events on the main thread happens via those calls and self.wait_for_request_or_notify. Calling one of these three is required for the main thread to regain control! This is probably a terrible idea, and better would be rewriting this functionality in a evented or callback style, but trying to integrate bpython.Repl code. \\"\\"\\" def __init__(self, initial_message='', permanent_text=\\"\\", refresh_request=lambda: None): self._current_line = '' self.cursor_offset_in_line = 0 self.in_prompt = False self.in_confirm = False self.waiting_for_refresh = False self.prompt = '' self._message = initial_message self.message_start_time = time.time() self.message_time = 3 self.permanent_text = permanent_text self.main_greenlet = greenlet.getcurrent() self.request_greenlet = None self.refresh_request = refresh_request @property def has_focus(self): return self.in_prompt or self.in_confirm or self.waiting_for_refresh def message(self, msg): self.message_start_time = time.time() self._message = msg def _check_for_expired_message(self): if self._message and time.time() > self.message_start_time + self.message_time: self._message = '' def process_event(self, e): \\"\\"\\"Returns True if shutting down\\"\\"\\" assert self.in_prompt or self.in_confirm or self.waiting_for_refresh if isinstance(e, events.RefreshRequestEvent): self.waiting_for_refresh = False self.request_greenlet.switch() elif isinstance(e, events.PasteEvent): for ee in e.events: self.add_normal_character(ee if len(ee) == 1 else ee[-1]) #strip control seq elif e in rl_char_sequences: self.cursor_offset_in_line, self._current_line = rl_char_sequences[e](self.cursor_offset_in_line, self._current_line) elif e == \\"\\": raise KeyboardInterrupt() elif e == \\"\\": raise SystemExit() elif self.in_prompt and e in (\\"n\\", \\"r\\"): line = self._current_line self.escape() self.request_greenlet.switch(line) elif self.in_confirm: if e in ('y', 'Y'): self.request_greenlet.switch(True) else: self.request_greenlet.switch(False) self.escape() elif e in ['x1b']: self.request_greenlet.switch(False) self.escape() else: # add normal character self.add_normal_character(e) def add_normal_character(self, e): self._current_line = (self._current_line[:self.cursor_offset_in_line] + e + self._current_line[self.cursor_offset_in_line:]) self.cursor_offset_in_line += 1 def escape(self): \\"\\"\\"unfocus from statusbar, clear prompt state, wait for notify call\\"\\"\\" self.in_prompt = False self.in_confirm = False self.prompt = '' self._current_line = '' @property def current_line(self): self._check_for_expired_message() if self.in_prompt: return self.prompt + self._current_line if self.in_confirm: return self.prompt if self._message: return self._message return self.permanent_text # interaction interface - should be called from other greenlets def notify(self, msg, n=3): self.request_greenlet = greenlet.getcurrent() self.message_time = n self.message(msg) self.waiting_for_refresh = True self.refresh_request() self.main_greenlet.switch(msg) # below Really ought to be called from greenlets other than main because they block def confirm(self, q): \\"\\"\\"Expected to return True or False, given question prompt q\\"\\"\\" self.request_greenlet = greenlet.getcurrent() self.prompt = q self.in_confirm = True return self.main_greenlet.switch(q) def file_prompt(self, s): \\"\\"\\"Expected to return a file name, given \\"\\"\\" self.request_greenlet = greenlet.getcurrent() self.prompt = s self.in_prompt = True result = self.main_greenlet.switch(s) return result"},{"prompt":"Create a random forest classifier in Python to predict whether a client will buy a house. The input data contains information about the area, state, number of bedrooms, number of bathrooms, price per square foot and year built of the house.","completion":"import pandas as pd from sklearn.ensemble import RandomForestClassifier # Read data data = pd.read_csv(\\"data.csv\\") # Create features and labels X = data[[\\"area\\", \\"state\\", \\"bedrooms\\", \\"bathrooms\\", \\"price_per_sqft\\", \\"year_built\\"]] y = data[\\"buy\\"] # Train the model model = RandomForestClassifier(n_estimators=50, max_depth=5) model.fit(X, y)"},{"prompt":"Write Python code to wrap words that exceed a maximum line length of 15 characters. This is a string with some long words.","completion":"def wrap_words(text): words = text.split(' ') line_length = 15 new_text = '' line = '' for word in words: if len(line + word) > line_length: new_text += line + 'n' line = word + ' ' else: line += word + ' ' new_text += line return new_text original_text = 'This is a string with some long words.' wrapped_text = wrap_words(original_text) print(wrapped_text)"},{"prompt":"Create a Python script that defines a Payload class and a ParseBase class. The Payload class takes a JSON string as input and converts it into a Python object. The ParseBase class has a parse method that takes a JSON string as input and sets the attributes of the class based on the keys in the JSON string. The Http class inherits from ParseBase and has two attributes, name and id. Use the parse method to set the values of these attributes from a JSON string.","completion":"#!/usr/bin/python #coding:utf-8 j = '{\\"action\\": \\"print\\", \\"method\\": \\"onData\\", \\"data\\": {\\"key1\\" : 1, \\"key2\\":\\"value2\\"} }' import json class Payload(object): def __init__(self, j): self.__dict__ = json.loads(j) p = Payload(j) print '-' * 30 print dir(p) print '-' * 30 print p.action print p.method print p.data print type(p.data) data = dict(p.data) print 'new data:', data j2 = '{ \\"identity\\" : \\"dafei\\", \\"alert\\" : \\"you have message\\", \\"badge\\":1, \\"payload\\": { \\"k1\\":\\"v1\\", \\"k2\\" : \\"v2\\"} }' p2 = Payload(j2) print dir(p2) print type(p2.payload) print p2.payload print '-' *50 class ParseBase(object): \\"\\"\\"docstring for ParseBase\\"\\"\\" def __init__(self): super(ParseBase, self).__init__() self.http_status_code = 0 def parse(self, j): dict_data = json.loads(j) for key in self.__dict__: print 'key:{}'.format(key) if not key.startswith('http'): value = dict_data.get(key) self.__dict__[key] = value class Http(ParseBase): \\"\\"\\"docstring for Http\\"\\"\\" def __init__(self): super(Http, self).__init__() self.name = None self.id = None h = Http() h.parse('{ \\"name\\" : \\"大飞\\", \\"id\\":1 }') print dir(h) print h.http_status_code print h.name print h.id"},{"prompt":"Generate a function in Python to find the length of a list.","completion":"\\"\\"\\" Generate a function in Python to find the length of a list \\"\\"\\" def find_list_length(mylist): # initialize a counter length = 0 # loop through the list for item in mylist: # increment the counter for each item length += 1 # return the length of the list return length # A sample list my_list = [1, 2, 3, 4, 5] # Find the length of the list list_length = find_list_length(my_list) # Print the list length print(list_length) # 5"},{"prompt":"Write a Python function that takes an integer n and n numbers and returns an array containing the largest n numbers. 3, 8, 5, 7, 2, 10","completion":"def largest_n_numbers(n, *nums): nums_sorted = sorted(nums, reverse=True) return nums_sorted[:n] result = largest_n_numbers(3, 8, 5, 7, 2, 10) print(result)"},{"prompt":"Classify a list of words into their corresponding part of speech using Python. [happy, run, went, like]","completion":"pos_tags = nltk.pos_tag([\\"happy\\", \\"run\\", \\"went\\", \\"like\\"]) for tag in pos_tags: print(f'{tag[0]}: {tag[1]}') # Output # happy: JJ # run: VB # went: VBD # like: IN"},{"prompt":"Create a Python program to predict the stock value of a certain company.","completion":"def stock_predictor(company): # Load data data = load_data(company) # Pre-process data data = preprocess(data) # Build the prediction model model = build_model(data) # Make prediction predicted = model.predict(data) # Return the predictions return predicted"},{"prompt":"Write a Python script that generates a markdown file for a list of professional courses. The script reads a TSV file with the following columns: course_name, provider, provider_url, and certificate_link. The script generates a markdown file with a bullet point for each course, including the course name, provider name with a link to the provider's website, and an icon link to the course certificate if available. The markdown file is saved as professional.md in the _pages directory.","completion":"# coding: utf-8 # # Publications markdown generator for academicpages # # Takes a TSV of publications with metadata and converts them for use with [academicpages.github.io](academicpages.github.io). This is an interactive Jupyter notebook, with the core python code in publications.py. Run either from the \`markdown_generator\` folder after replacing \`publications.tsv\` with one that fits your format. # # TODO: Make this work with BibTex and other databases of citations, rather than Stuart's non-standard TSV format and citation style. # # Data format # # The TSV needs to have the following columns: pub_date, title, venue, excerpt, citation, site_url, and paper_url, with a header at the top. # # - \`excerpt\` and \`paper_url\` can be blank, but the others must have values. # - \`pub_date\` must be formatted as YYYY-MM-DD. # - \`url_slug\` will be the descriptive part of the .md file and the permalink URL for the page about the paper. The .md file will be \`YYYY-MM-DD-[url_slug].md\` and the permalink will be \`https://[yourdomain]/publications/YYYY-MM-DD-[url_slug]\` # Import pandas # # We are using the very handy pandas library for dataframes. # In[2]: import pandas as pd # Import TSV # # Pandas makes this easy with the read_csv function. We are using a TSV, so we specify the separator as a tab, or \`t\`. # # I found it important to put this data in a tab-separated values format, because there are a lot of commas in this kind of data and comma-separated values can get messed up. However, you can modify the import statement, as pandas also has read_excel(), read_json(), and others. # In[3]: professional = pd.read_csv(\\"professional.tsv\\", sep=\\"t\\", header=0) professional # Escape special characters # # YAML is very picky about how it takes a valid string, so we are replacing single and double quotes (and ampersands) with their HTML encoded equivilents. This makes them look not so readable in raw format, but they are parsed and rendered nicely. # In[4]: html_escape_table = { \\"&\\": \\"&amp;\\", '\\"': \\"&quot;\\", \\"'\\": \\"&apos;\\" } def html_escape(text): \\"\\"\\"Produce entities within text.\\"\\"\\" return \\"\\".join(html_escape_table.get(c,c) for c in text) # Creating the markdown files # # This is where the heavy lifting is done. This loops through all the rows in the TSV dataframe, then starts to concatentate a big string (\`\`\`md\`\`\`) that contains the markdown for each type. It does the YAML metadata first, then does the description for the individual page. If you don't want something to appear (like the \\"Recommended citation\\") # In[5]: import os SPACE = ' ' STAR = '*' TAB = SPACE + SPACE TAB_BULLET = SPACE + STAR + SPACE ENDL = 'n' WIP = '*[ WIP ]*' TODO = '*[TODO]*' def is_not_NaN(num): return num == num def is_not_empty(s): return is_not_NaN(s) and len(str(s)) > 0 def bold(s): return STAR + STAR + str(s) + STAR + STAR def italicize(s): return STAR + str(s) + STAR def coursera_icon_link(s): return '<a href=\\"' + str(s) + '\\" target=\\"_blank\\"><i class=\\"ai ai-courser\\"></i></a>' def github_icon_link(s): return '<a href=\\"' + str(s) + '\\" target=\\"_blank\\"><i class=\\"fa fa-github\\" aria-hidden=\\"true\\"></i> </a>' def certificate_icon_link(s): return '<a href=\\"' + str(s) + '\\" target=\\"_blank\\"><i class=\\"fa fa-certificate\\" aria-hidden=\\"true\\"></i> </a>' with open(\\"../_pages/professional.md\\", 'w') as f: for row, item in professional.iterrows(): md = '' md += TAB_BULLET md += str(item.course_name) md += SPACE md += \\"by \\" md += '[' + str(item.provider) + '](' + str(item.provider_url) + ')' md += SPACE if is_not_empty(item.certificate_link): md += certificate_icon_link(item.certificate_link) md += ENDL f.write(md)"},{"prompt":"Write a python program to create a dictionary which stores the information about a given list of students.","completion":"\\"\\"\\" Create a dictionary which stores the information about a given list of students. \\"\\"\\" def create_student_data_dict(students): # Create an empty dict student_data = {} # Iterate through each student for student in students: # Get the student name student_name = student['name'] # Create a dict for the student student_data[student_name] = { 'age': student['age'], 'class': student['class'], 'marks': student['marks'], } return student_data if __name__ == '__main__': students = [{'name': 'John', 'age': 18, 'class': 'A', 'marks': 70}, {'name': 'Jack', 'age': 17, 'class': 'A', 'marks': 60}, {'name': 'Jill', 'age': 17, 'class': 'B', 'marks': 55}] print(create_student_data_dict(students))"},{"prompt":"Write a Python program to get a single string from two given strings, separated by a space and swap the first two characters of each string. String1: 'abc' String2: 'xyz'","completion":"def strings_swap(s1, s2): new_s1 = s2[:2] + s1[2:] new_s2 = s1[:2] + s2[2:] return new_s1 + ' ' + new_s2 strings_swap('abc', 'xyz') # 'xyc abz'"},{"prompt":"Create a class in Python to represent a user, where a user is composed of a name and an email address.","completion":"class User: def __init__(self, name, email): self.name = name self.email = email def printDetails(self): print(\\"Name:\\", self.name) print(\\"Email:\\", self.email) user1 = User(\\"John Smith\\", \\"john@example.com\\") user1.printDetails()"},{"prompt":"Generate a python program to convert a list of strings to a new list of strings with each string's first letter capitalized [apple, cat, dog, hello]","completion":"def capitalize(list): # Create an empty list to contain the corrected strings output = [] # Iterate over the strings for string in list: output.append(string.capitalize()) # Return the corrected list return output"},{"prompt":"Create a function using Python to reverse the order of the characters in each word of a given string string = “Hello World”","completion":"def reverse_words(string): splitted_words = string.split(\\" \\") reversed_words = [word[::-1] for word in splitted_words] reversed_string = \\" \\".join(reversed_words) return reversed_string reverse_words(string)"},{"prompt":"Can you create a class in Python that takes two parameters, a string (name) and an integer (age), and prints both out.","completion":"class User: def __init__(self, name, age): self.name = name self.age = age def __str__(self): return f\\"Name is {self.name} and age is {self.age}\\""},{"prompt":"Given a string containing a sentence, create a function in Python that returns a list of words in the sentence that are longer than 5 characters. Not applicable","completion":"def long_words(sentence): words = sentence.split(' ') long_words = [] for word in words: if len(word) > 5: long_words.append(word) return long_words"},{"prompt":"Develop a web scraper in Python which can extract information from HTML page. Not applicable","completion":"import requests from bs4 import BeautifulSoup def scrape_data(url): response = requests.get(url) if response.status_code == 200: html_data = response.text soup = BeautifulSoup(html_data, 'html.parser') # extract data here else: print(\\"Invalid response!\\") scrape_data('https://example.com')"},{"prompt":"Create a machine learning algorithm in Python to classify a given dataset. Dataset for classificatio","completion":"from sklearn.model_selection import train_test_split x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.20) from sklearn.ensemble import RandomForestClassifier clf = RandomForestClassifier(n_estimators=100) clf.fit(x_train, y_train) predictions = clf.predict(x_test)"},{"prompt":"Write Python code to find the sum of products of respective array elements [1, 2, 3, 4] [5, 10, 15, 20]","completion":"def sum_product_array(arr1, arr2): total = 0 for i in range(len(arr1)): total += arr1[i] * arr2[i] return total"},{"prompt":"Launch a web server in Docker using Python","completion":"FROM python:3 WORKDIR /app COPY . /app RUN pip install flask EXPOSE 5000 CMD [\\"python\\", \\"app.py\\"]"},{"prompt":"Write a Python program to find the common elements in two given arrays","completion":"def common_elements(arr1, arr2): result = [] for ele in arr1: if ele in arr2: result.append(ele) return result"},{"prompt":"Given an array of strings, write a program in Python to calculate the number of occurrences for each string. ['Hello', 'World', 'Hello', 'World', 'Foo', 'Bar']","completion":"words = ['Hello', 'World', 'Hello', 'World', 'Foo', 'Bar'] from collections import Counter word_count = Counter(words) for word, count in word_count.items(): print(f'{word} : {count}')"},{"prompt":"Write an algorithm in Python to sort an array of integers in O(n) time complexity. Input Array: [3, 7, 10, 2, 5]","completion":"def partition(array, lo, hi): pivot = array[hi] i = lo for j in range(lo, hi): if array[j] <= pivot: array[i], array[j] = array[j], array[i] i += 1 array[i], array[hi] = array[hi], array[i] return i def qsort(array, lo, hi): if lo < hi: p = partition(array, lo, hi) qsort(array, lo, p-1) qsort(array, p+1, hi) return array def quick_sort(array): return qsort(array, 0, len(array)- 1)"},{"prompt":"Write a Python program to find the maximum possible product of two numbers from a given array of integers. [3, 2, 7, 8, 15]","completion":"def find_max_product(arr): if len(arr) == 0: return 0 max_pos_1 = float(\\"-inf\\") max_pos_2 = float(\\"-inf\\") max_neg_1 = float(\\"inf\\") max_neg_2 = float(\\"inf\\") for num in arr: if num > max_pos_1: max_pos_2 = max_pos_1 max_pos_1 = num elif num > max_pos_2: max_pos_2 = num if num < max_neg_1: max_neg_2 = max_neg_1 max_neg_1 = num elif num < max_neg_2: max_neg_2 = num max_product = max((max_pos_1 * max_pos_2),(max_neg_1 * max_neg_2)) return max_product if __name__ == '__main__': arr = [-3, -2, 7, 8, -15] print(find_max_product(arr))"},{"prompt":"Generate a fourline Python program that uses a loop to add all the integers from 1 to 10 and print the result.","completion":"n = 0 for i in range(1,11): n = n + i print(\\"The sum of all the numbers between 1 and 10 is:\\", n)"},{"prompt":"Create a function in Python to get the largest element in a given list. [4,8,2,9,10]","completion":"def get_largest_element(nums): largest = nums[0] for i in range(1, len(nums)): if nums[i] > largest: largest = nums[i] return largest # Test the function numbers = [4,8,2,9,10] print(get_largest_element(numbers)) # Output: 10"},{"prompt":"Edit this Python program to make the output more accurate def calculate_average(numbers): total = 0 for n in numbers: total += n return float(total) / len(numbers)","completion":"def calculate_average(numbers): total = 0 for n in numbers: total += n return float(total) / len(numbers) if len(numbers) > 0 else 0"},{"prompt":"Create a Python dictionary with keyvalue pair and print out the third value.","completion":"my_dict = {\\"A\\":1, \\"B\\":2, \\"C\\":3, \\"D\\":4} print(my_dict[\\"C\\"])"},{"prompt":"Create a Python script to visualize the given data. Weather data, depicting temperature and precipitatio","completion":"import matplotlib.pyplot as plt # Weather data, depicting temperature and precipitation x = [1, 2, 3, 4, 5] temperature = [30, 28, 33, 32, 29] precipitation = [2.2, .5, 0, 1.2, 0.3] # Plot the data fig = plt.figure() axes = fig.add_axes([0.1, 0.1, 0.8, 0.8]) axes.plot(x, temperature, color='b', label='Temperature') axes.plot(x, precipitation, color='r', label='Precipitation') # Label the plot axes.set_xlabel('Time (days)') axes.set_ylabel('Temperature (F) and Precipitation (inches)') axes.set_title('Temperature and Precipitation') axes.legend() plt.show()"},{"prompt":"Design a python program to error correct a given sentence. The cat ate potatoo chips.","completion":"def error_correct(sentence): words = sentence.split() correct_words = [] for word in words: if word == 'potatoo': correct_words.append('potato') # correction else: correct_words.append(word) return ' '.join(correct_words)"},{"prompt":"Write a Python function to find the most Frequent words in a given list of words.","completion":"def find_frequent_words(words): word_counts = {} for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 max_word_count = 0 frequent_words = [] for word, count in word_counts.items(): if count > max_word_count: frequent_words = [word] max_word_count = count elif count == max_word_count: frequent_words.append(word) return frequent_words words = [\\"cat\\", \\"dog\\", \\"cat\\", \\"bird\\", \\"cat\\"] frequent_words = find_frequent_words(words) print(\\"Most frequent words: \\", frequent_words)"},{"prompt":"Create a Python script to convert an input JSON string into a Python dictionary. {name: John, age: 30, country: USA}","completion":"import json input_string = '{\\"name\\": \\"John\\", \\"age\\": 30, \\"country\\": \\"USA\\"}' python_dict = json.loads(input_string) print(python_dict) # Output: {'name': 'John', 'age': 30, 'country': 'USA'}"},{"prompt":"Create a class in Python that takes two values, a and b, and adds them.","completion":"class Sum(): def __init__(self, a, b): self.a = a self.b = b def total(self): return self.a + self.b s = Sum(2, 3) print(s.total())"},{"prompt":"Design a Python program to apply the bubble sort to a given array of numbers.","completion":"def bubble_sort(arr): for i in range(len(arr)-1): for j in range(len(arr)-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"prompt":"Create a Python script to remove all elements from a list that are divisible by 3. [2, 3, 4, 6, 8, 9]","completion":"def remove_divisible_by_3(arr): new_arr = [] for num in arr: if num % 3 != 0: new_arr.append(num) return new_arr arr = [2, 3, 4, 6, 8, 9] result = remove_divisible_by_3(arr) print(result)"},{"prompt":"Write a code in Python to generate unique random numbers between 1 and 100","completion":"import random def generate_unique_randoms(n): res = [] while len(res) < n: x = random.randint(1, 100 ) if x not in res: res.append(x) return res"},{"prompt":"Fix the bug in the following Python program. def calculateArea(width, height): return width * height length = 8 breadth = 10 area = calculateArea(length) print(Area of the rectangle:, area)","completion":"def calculateArea(width, height): return width * height length = 8 breadth = 10 area = calculateArea(length, breadth) print(\\"Area of the rectangle:\\", area)"},{"prompt":"Create a Python program to find all the factors of a given number. 12","completion":"def factors(n): factor_list = [] for i in range(1, n+1): if n % i == 0: factor_list.append(i) return factor_list n = 12 result = factors(n) print(\\"Factors of %d are %s\\" %(n, result))"},{"prompt":"Design a Python program to simulate a coin toss game.","completion":"import random def coin_toss(): head = 0 tail = 0 print(\\"Let's simulate a coin toss...\\") for _ in range(5): toss = random.randint(0,1) if toss == 0: head += 1 print(\\"It's Heads\\") else: tail += 1 print(\\"It's Tails\\") print(f\\"Heads: {head}\\") print(f\\"Tails: {tail}\\")"},{"prompt":"Create a basic Python program to generate a string of unique random characters. Length of the string: 10","completion":"import random import string def generateRandomString(length): characters = string.ascii_lowercase + string.ascii_uppercase + string.digits return ''.join(random.choice(characters) for _ in range(length)) print(generateRandomString(10))"},{"prompt":"Enhance the performance of this Python script to evaluate the fibonacci numbers. def fibonacci(n): if n==1 or n==2: return 1 return fibonacci(n1) + fibonacci(n2)","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 elif n == 2: return 1 elif n > 2: return fibonacci(n-1) + fibonacci(n-2) # Using memoization fibonacci_cache = {} def fibonacci_dynamic(n): # Check if the number was already processed if n in fibonacci_cache: return fibonacci_cache[n] # Compute the Nth term if n == 1: value = 1 elif n == 2: value = 1 elif n > 2: value = fibonacci(n-1) + fibonacci(n-2) # Store the value and return it fibonacci_cache[n] = value return value"},{"prompt":"Complete the following Python code to implement Bubble Sort. def bubble_sort(arr): # WRITE YOUR CODE HERE","completion":"def bubble_sort(arr): # WRITE YOUR CODE HERE n = len(arr) # Traverse through all array elements for i in range(n-1): # range(n) also work but outer loop will repeat one time more than needed. # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j]"},{"prompt":"Create a Python script that takes a price as an input and returns a list of discounts according to the given conditions. price = 100 conditions = [10% discount if price > 50, 20% discount if price > 75]","completion":"def get_discounts(price, conditions): discounts = [] for condition in conditions: if condition == \\"10% discount if price > 50\\": if price > 50: discounts.append(0.1 * price) elif condition == \\"20% discount if price > 75\\": if price > 75: discounts.append(0.2 * price) return discounts"},{"prompt":"Optimize an existing Python program for computing the reverse of a string. def reverse_string(string): return string[::1]","completion":"def reverse_string(string): return \\"\\".join(reversed(string))"},{"prompt":"Design a Python function to check if two given strings are anagrams or not. abc, cab","completion":"def check_anagram(str1, str2): if sorted(str1) == sorted(str2): return True else: return False"},{"prompt":"Compose a program in Python to iterate through a list of integers and creates a new list which contains the square of each number of the first list [1, 2, 3, 4]","completion":"def squared_list(input_list): output_list = [x ** 2 for x in input_list] return output_list input_list = [1, 2, 3, 4] output_list = squared_list(input_list) print(output_list)"},{"prompt":"Write a Python function that takes a rectangular array and prints it in rotated form (90° degree anticlockwise rotation) [ [1,2,3], [4,5,6], [7,8,9] ]","completion":"def rotate_rectangle(rectangle): n = len(rectangle) for i in range(n): for j in range(i + 1, n): rectangle[i][j], rectangle[j][i] = rectangle[j][i], rectangle[i][j] for row in rectangle: row.reverse() return rectangle rectangle = [ [1,2,3], [4,5,6], [7,8,9] ] result = rotate_rectangle(rectangle) print(result)"},{"prompt":"You are given a data set. Compute the mean of the data set using Python. [1, 2, 5, 10, 20, 50]","completion":"def compute_mean(data): total = 0 for num in data: total += num return total/len(data) data = [1, 2, 5, 10, 20, 50] result = compute_mean(data) print(result)"},{"prompt":"Write a Python program that takes a database name as an input, and generates a report on a database table by selecting the database, selecting tables and columns, and generating an appropriate query command. Database name: shopping_car","completion":"import sqlite3 db_name = 'shopping_cart' # Establish a connection to the database connection = sqlite3.connect(db_name) # Create a cursor cursor = connection.cursor() # Select all columns from the table query = \\"SELECT * FROM shopping_cart;\\" # Execute the query cursor.execute(query) # Fetch the result results = cursor.fetchall() # Print the results for row in results: print(row)"},{"prompt":"Create a function in Python for calculating the maximum value in an array. example array","completion":"def get_max(arr): m = arr[0] for val in arr: if val > m: m = val return m # example arr = [1, 2, 3, 4] print(get_max(arr)) # 4"},{"prompt":"Optimize a Python program which takes a list of integers as input and returns the sum. The program should perform the operation as quickly as possible. [1, 2, 3, 4, 5]","completion":"def sum(lst): result = 0 for i in lst: result += i return result inputList = [1, 2, 3, 4, 5] print(\\"The sum of the list is: {}\\".format(sum(inputList))) # Optimized variant def sum_optimized(lst): result = 0 lst_len= len(lst) i = 0 while(i < lst_len): result += lst[i] i += 1 return result inputList = [1, 2, 3, 4, 5] print(\\"The sum of the list is: {}\\".format(sum_optimized(inputList)))"},{"prompt":"Optimize the following Python code to maximize performance. for row in records: for key, value in row.items(): do_something(key, value)","completion":"for row in records: for key, value in row.items(): try: do_something(key, value) except Exception: pass"},{"prompt":"Write a code snippet in Python to compute the maximum of an array of numbers. [2, 4, 6, 8]","completion":"def find_max(nums): max_num = nums[0] for num in nums: if num > max_num: max_num = num return max_num print(find_max([2, 4, 6, 8]))"},{"prompt":"Create a machine learning model in Python that uses the Boston Housing dataset to predict the median value of a home. not applicable","completion":"import pandas as pd from sklearn.datasets import load_boston from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import r2_score # load the boston housing dataset boston = load_boston() X = pd.DataFrame(boston.data, columns=boston.feature_names) y = boston.target # split the dataset into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42) # create the model and fit it to the training data model = LinearRegression() model.fit(X_train, y_train) # predict on the test set and calculate the R2 score y_pred = model.predict(X_test) score = r2_score(y_test, y_pred) # print the results print('R2 score:', score)"},{"prompt":"Write a Python program to generate a password of length 10 containing lowercase letters, uppercase letters, and numbers.","completion":"import string import random def generate_password(): letters = string.ascii_letters + string.digits password = ''.join(random.choice(letters) for i in range(10)) return password print(generate_password())"},{"prompt":"mplement two sorting algorithms in Python: bubble sort and insertion sort. data = [4, 3, 6, 9, 1, 2, 8]","completion":"def bubble_sort(data): for i in range(len(data)-1): for j in range(len(data)-1-i): if data[j] > data[j+1]: data[j], data[j+1] = data[j+1], data[j] def insertion_sort(data): for i in range(1, len(data)): current_value = data[i] position = i while position > 0 and data[position-1] > current_value: data[position] = data[position-1] position = position - 1 data[position] = current_value"},{"prompt":"Create a python dictionary using the given lists. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"{1: 4, 2: 5, 3: 6}"},{"prompt":"Write a web scraping program in Python to extract information about upcoming flights from an airline's website. https://www.exampleairline.com/en/tickets/","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.exampleairline.com/en/tickets/' # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Find all divs with class \\"flightList\\" flight_list = soup.find_all('div', attrs={'class': 'flightList'}) # Iterate over the list to get each flight details for flight in flight_list: # Flight code (like AI-101) flight_code = flight.find('div', {'class': 'flightCode'}).text # Get departure and arrival time dep_time = flight.find('div', {'class': 'departTime'}).text arr_time = flight.find('div', {'class': 'arriveTime'}).text # Get source and destination airport code source_code = flight.find('span', {'class': 'source'}).text dest_code = flight.find('span', {'class': 'destination'}).text # Get departure and arrival date dep_date = flight.find('span', {'class': 'depart-date'}).text arr_date = flight.find('span', {'class': 'arrive-date'}).text # Print the fetched data print(\\"Flight Code: {}\\".format(flight_code)) print(\\"Source: {}, Destination: {}\\".format(source_code, dest_code)) print(\\"Departure Date: {}, Arrival Date: {}\\".format(dep_date, arr_date)) print(\\"Departure time: {}, Arrival time: {}\\".format(dep_time, arr_time))"},{"prompt":"Compile a Python program to generate all possible binary search trees for given set of keys. Set of keys: [1, 2, 3, 4]","completion":"def generateTrees(keys): # if the list of keys is empty, # the result is an empty tree if len(keys) == 0: return [None] # store the result trees = [] # loop through all keys for i in range(len(keys)): # using each key as the root, # generate subpairs on the left and right l_trees = generateTrees(keys[:i]) r_trees = generateTrees(keys[i+1:]) # loop through all of the possible combinations of left and right # subtrees and save each as a root node with all the subtrees for j in range(len(l_trees)): for k in range(len(r_trees)): root = Node(keys[i]) root.left = l_trees[j] root.right = r_trees[k] trees.append(root) return trees"},{"prompt":"Create a Python program that takes the average of all numbers in a list. [10, 15, 20, 25]","completion":"def averageList(numbers): total = 0 for num in numbers: total += num return total / len(numbers) print(averageList([10, 15, 20, 25]))"},{"prompt":"Develop a python program that applies the following operation to a given list Provide each element in the list with its index","completion":"def enumerate_list(lst): output = [] for i in range(len(lst)): output.append((i, lst[i])) return output"},{"prompt":"Develop a Python program to compare two given strings and display the number of matches String 1: Python String 2: Program","completion":"def compareStrings(string1, string2): count = 0 for ch in string1: if ch in string2: count +=1 return count print(compareStrings(\\"Python\\", \\"Program\\")) // Output: 3"},{"prompt":"Generate a Fibonacci sequence from 0 to 10 using Python.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b # Driver Code print(fibonacci(10))"},{"prompt":"Write a Python script that prints the numbers 1 to 10 and their squares. Not applicable","completion":"def print_squares(): for i in range(1, 11): print(f'{i} : {i*i}') print_squares()"},{"prompt":"Develop a Python program for classifying data into two categories positive and negative. Not applicable","completion":"import pandas as pd # Read the data data = pd.read_csv('data.csv') # Create input features X = data[['feature1','feature2','feature3']] # Create output label y = data['label'] # Split data into training and testing sets from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0) # Train the model from sklearn.linear_model import LogisticRegression lr = LogisticRegression() lr.fit(X_train, y_train) # Predict on test set predictions = lr.predict(X_test) # Evaluate accuracy from sklearn.metrics import accuracy_score print('Accuracy:', accuracy_score(y_test, predictions))"},{"prompt":"Create an algorithm in Python to print the numbers from 1 to n in increasing order, except for any numbers which are divisible by 3 should be printed as Fizz. \`n = 20\`","completion":"def fizz(n): for i in range(1, n+1): if i % 3 == 0: print(\\"Fizz\\") else: print(i) #example fizz(20) # prints 1, 2, Fizz, 4, 5, Fizz, 7, 8, Fizz, 10, 11, Fizz, 13, 14, Fizz, 16, 17, Fizz, 19, 20"},{"prompt":"Using the given functions, write a Python program that takes an ndimensional vector vector as an argument and returns its norm. def vector_length(vector): return math.sqrt(sum(c * c for c in vector))","completion":"def vector_norm(vector): return vector_length(vector) vector = [1, 2, 3] norm = vector_norm(vector) print(norm)"},{"prompt":"Develop a Python program to compare two strings and identify the differences between them. str1 = This is an example str2 = That is an example","completion":"def compare_strings(str1, str2): str1_words = str1.split(' ') str2_words = str2.split(' ') result = \\"\\" for i in range(min(len(str1_words), len(str2_words))): if str1_words[i] != str2_words[i]: result += f\\"{str1_words[i]} <--> {str2_words[i]}n\\" if len(str1_words) > len(str2_words): result += \\"n\\".join(str1_words[len(str2_words):]) elif len(str2_words) > len(str1_words): result += \\"n\\".join(str2_words[len(str1_words):]) return result str1 = \\"This is an example\\" str2 = \\"That is an example\\" print(compare_strings(str1, str2))"},{"prompt":"Program a neural network based classifier in Python which predicts whether or not a given email belongs to a spam or not.","completion":"import numpy as np import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from keras.models import Sequential from keras.layers import Dense # Load dataset data = pd.read_csv('spam_or_not_spam.csv') # Feature extraction vect = CountVectorizer(stop_words=\\"english\\").fit(data[\\"text\\"]) x = vect.transform(data[\\"text\\"]) y = data[\\"label\\"].values # Split dataset x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=42) # Create neural network model = Sequential([ Dense(64, activation=\\"relu\\", input_shape=(x.shape[1],)), Dense(32, activation=\\"relu\\"), Dense(1, activation=\\"sigmoid\\"), ]) # Compile and fit model model.compile(optimizer=\\"adam\\", loss=\\"binary_crossentropy\\", metrics=[\\"accuracy\\"]) model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test)) # Evaluate metrics scores = model.evaluate(x_test, y_test, verbose=1) print(\\"Accuracy\\", scores[1])"},{"prompt":"Design a program in Python that takes in a list of numbers and outputs the list after removing all negative numbers","completion":"def remove_negatives(list): filtered_list = list(filter(lambda x: x>=0,list)) return filtered_list"},{"prompt":"Write a Python program to find the closest pair of points using the Euclidean distance. [[1,2],[1,2],[2,2],[2,2]]","completion":"def closest_pair(points): min_distance = float(\\"inf\\") min_pair = None for i in range(len(points)): for j in range(i+1, len(points)): distance = get_euclidean_distance(points[i], points[j]) if distance < min_distance: min_distance = distance min_pair = (points[i], points[j]) return min_pair def get_euclidean_distance(p1, p2): return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2) ** 0.5 points = [[1,2],[-1,2],[2,-2],[-2,-2]] closest_pair = closest_pair(points) print(closest_pair) # Output: ((1, 2), (-1, 2))"},{"prompt":"Write a Python script to render an HTML webpage using a template engine. Not applicable","completion":"from jinja2 import Environment, FileSystemLoader import os # get the directory of the current file DIR = os.path.dirname(__file__) # Create a file system loader object to specify the directory where the templates are located loader = FileSystemLoader(DIR) # Create an environment to specify the template language env = Environment(loader=loader) # Get the template file template = env.get_template('template.html') # Render the template output_html = template.render(some_variable=\\"Example\\") # Save the template to a file with open('index.html', 'w') as html_file: html_file.write(output_html)"},{"prompt":"Write a function in Python that takes in an array of integers and returns the highest sum of nonadjacent numbers. [1, 2, 4, 5, 9, 10]","completion":"# This function takes in an array of integers and returns the highest sum of non-adjacent numbers def highestSumOfNonAdj(num_list): # Create a list to store the maximum sum for any chosen numbers max_sum_list = [num_list[0]] # Try to find the solutions involving each number for i in range(1, len(num_list)): # Calculate what is the maximum sum when the current number is not included not_included = max_sum_list[i-1] # Calculate what is the maximumsum when the current number is included included = num_list[i] if i-2 >= 0: included += max_sum_list[i-2] # Pick the maximum ofs the two sums max_sum_list.append(max(included, not_included)) # Return the maximum sum return max_sum_list[-1] arr = [1, 2, 4, 5, 9, 10] result = highestSumOfNonAdj(arr) print (\\"The highest sum of non-adjacent numbers is\\",result)"},{"prompt":"Generate a random string of characters in Python with a length between 8 and 16 characters. Not applicable","completion":"import string import random def generate_random_string(length): random_string = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length)) return random_string length = random.randrange(8,16) random_string = generate_random_string(length) print(random_string)"},{"prompt":"Write a function in Python that finds all possible substrings of a string and prints them. String = Hello World","completion":"def printSubstrings(s): n = len(s) for i in range(n): for j in range(i+1, n+1): print(s[i:j]) # Driver code s = \\"Hello World\\" printSubstrings(s)"},{"prompt":"Edit the python code below to increase efficiency. arr = [24, 6, 15, 72, 5] sum = 0 for i in range(5): if arr[i] % 2 == 0: sum += arr[i]","completion":"arr = [24, 6, 15, 72, 5] sum = 0 for num in arr: if num % 2 == 0: sum += num"},{"prompt":"Generate a function in Python to print Hello World! every second.","completion":"import time def printHelloWorld(): while True: print(\\"Hello World!\\") time.sleep(1) printHelloWorld()"},{"prompt":"This code defines a Python function called \`dd_hyperbolic_single\` that runs a Bayesian analysis of the Delay Discounting Task using the Hyperbolic Model. The function takes in a data set in the form of a Pandas DataFrame, a file path, or the string example, and returns an \`hbayesdm.TaskModel\` instance with various components, including the fitted model and raw data. The function has several optional arguments that allow for customization of the analysis, such as the number of iterations, number of chains, and initial values. To use the function, call \`dd_hyperbolic_single()\` with the desired arguments.","completion":"from typing import Sequence, Union, Any from collections import OrderedDict from numpy import Inf, exp import pandas as pd from hbayesdm.base import TaskModel from hbayesdm.preprocess_funcs import dd_single_preprocess_func __all__ = ['dd_hyperbolic_single'] class DdHyperbolicSingle(TaskModel): def __init__(self, **kwargs): super().__init__( task_name='dd', model_name='hyperbolic', model_type='single', data_columns=( 'subjID', 'delay_later', 'amount_later', 'delay_sooner', 'amount_sooner', 'choice', ), parameters=OrderedDict([ ('k', (0, 0.1, 1)), ('beta', (0, 1, 5)), ]), regressors=OrderedDict([ ]), postpreds=['y_pred'], parameters_desc=OrderedDict([ ('k', 'discounting rate'), ('beta', 'inverse temperature'), ]), additional_args_desc=OrderedDict([ ]), **kwargs, ) _preprocess_func = dd_single_preprocess_func def dd_hyperbolic_single( data: Union[pd.DataFrame, str, None] = None, niter: int = 4000, nwarmup: int = 1000, nchain: int = 4, ncore: int = 1, nthin: int = 1, inits: Union[str, Sequence[float]] = 'vb', ind_pars: str = 'mean', model_regressor: bool = False, vb: bool = False, inc_postpred: bool = False, adapt_delta: float = 0.95, stepsize: float = 1, max_treedepth: int = 10, **additional_args: Any) -> TaskModel: \\"\\"\\"Delay Discounting Task - Hyperbolic Model Individual Bayesian Modeling of the Delay Discounting Task using Hyperbolic Model [Mazur1987]_ with the following parameters: \\"k\\" (discounting rate), \\"beta\\" (inverse temperature). .. [Mazur1987] Mazur, J. E. (1987). An adjustment procedure for studying delayed reinforcement. User data should contain the behavioral data-set of all subjects of interest for the current analysis. When loading from a file, the datafile should be a **tab-delimited** text file, whose rows represent trial-by-trial observations and columns represent variables. For the Delay Discounting Task, there should be 6 columns of data with the labels \\"subjID\\", \\"delay_later\\", \\"amount_later\\", \\"delay_sooner\\", \\"amount_sooner\\", \\"choice\\". It is not necessary for the columns to be in this particular order; however, it is necessary that they be labeled correctly and contain the information below: - \\"subjID\\": A unique identifier for each subject in the data-set. - \\"delay_later\\": An integer representing the delayed days for the later option (e.g. 1, 6, 28). - \\"amount_later\\": A floating point number representing the amount for the later option (e.g. 10.5, 13.4, 30.9). - \\"delay_sooner\\": An integer representing the delayed days for the sooner option (e.g. 0). - \\"amount_sooner\\": A floating point number representing the amount for the sooner option (e.g. 10). - \\"choice\\": If amount_later was selected, choice == 1; else if amount_sooner was selected, choice == 0. .. note:: User data may contain other columns of data (e.g. \`\`ReactionTime\`\`, \`\`trial_number\`\`, etc.), but only the data within the column names listed above will be used during the modeling. As long as the necessary columns mentioned above are present and labeled correctly, there is no need to remove other miscellaneous data columns. .. note:: \`\`adapt_delta\`\`, \`\`stepsize\`\`, and \`\`max_treedepth\`\` are advanced options that give the user more control over Stan's MCMC sampler. It is recommended that only advanced users change the default values, as alterations can profoundly change the sampler's behavior. See [Hoffman2014]_ for more information on the sampler control parameters. One can also refer to 'Section 34.2. HMC Algorithm Parameters' of the \`Stan User's Guide and Reference Manual\`__. .. [Hoffman2014] Hoffman, M. D., & Gelman, A. (2014). The No-U-Turn sampler: adaptively setting path lengths in Hamiltonian Monte Carlo. Journal of Machine Learning Research, 15(1), 1593-1623. __ https://mc-stan.org/users/documentation/ Parameters ---------- data Data to be modeled. It should be given as a Pandas DataFrame object, a filepath for a data file, or \`\`\\"example\\"\`\` for example data. Data columns should be labeled as: \\"subjID\\", \\"delay_later\\", \\"amount_later\\", \\"delay_sooner\\", \\"amount_sooner\\", \\"choice\\". niter Number of iterations, including warm-up. Defaults to 4000. nwarmup Number of iterations used for warm-up only. Defaults to 1000. \`\`nwarmup\`\` is a numerical value that specifies how many MCMC samples should not be stored upon the beginning of each chain. For those familiar with Bayesian methods, this is equivalent to burn-in samples. Due to the nature of the MCMC algorithm, initial values (i.e., where the sampling chains begin) can have a heavy influence on the generated posterior distributions. The \`\`nwarmup\`\` argument can be set to a higher number in order to curb the effects that initial values have on the resulting posteriors. nchain Number of Markov chains to run. Defaults to 4. \`\`nchain\`\` is a numerical value that specifies how many chains (i.e., independent sampling sequences) should be used to draw samples from the posterior distribution. Since the posteriors are generated from a sampling process, it is good practice to run multiple chains to ensure that a reasonably representative posterior is attained. When the sampling is complete, it is possible to check the multiple chains for convergence by running the following line of code: .. code:: python output.plot(type='trace') ncore Number of CPUs to be used for running. Defaults to 1. nthin Every \`\`nthin\`\`-th sample will be used to generate the posterior distribution. Defaults to 1. A higher number can be used when auto-correlation within the MCMC sampling is high. \`\`nthin\`\` is a numerical value that specifies the \\"skipping\\" behavior of the MCMC sampler. That is, only every \`\`nthin\`\`-th sample is used to generate posterior distributions. By default, \`\`nthin\`\` is equal to 1, meaning that every sample is used to generate the posterior. inits String or list specifying how the initial values should be generated. Options are \`\`'fixed'\`\` or \`\`'random'\`\`, or your own initial values. ind_pars String specifying how to summarize the individual parameters. Current options are: \`\`'mean'\`\`, \`\`'median'\`\`, or \`\`'mode'\`\`. model_regressor Whether to export model-based regressors. Currently not available for this model. vb Whether to use variational inference to approximately draw from a posterior distribution. Defaults to \`\`False\`\`. inc_postpred Include trial-level posterior predictive simulations in model output (may greatly increase file size). Defaults to \`\`False\`\`. adapt_delta Floating point value representing the target acceptance probability of a new sample in the MCMC chain. Must be between 0 and 1. See note below. stepsize Integer value specifying the size of each leapfrog step that the MCMC sampler can take on each new iteration. See note below. max_treedepth Integer value specifying how many leapfrog steps the MCMC sampler can take on each new iteration. See note below. **additional_args Not used for this model. Returns ------- model_data An \`\`hbayesdm.TaskModel\`\` instance with the following components: - \`\`model\`\`: String value that is the name of the model ('dd_hyperbolic_single'). - \`\`all_ind_pars\`\`: Pandas DataFrame containing the summarized parameter values (as specified by \`\`ind_pars\`\`) for each subject. - \`\`par_vals\`\`: OrderedDict holding the posterior samples over different parameters. - \`\`fit\`\`: A PyStan StanFit object that contains the fitted Stan model. - \`\`raw_data\`\`: Pandas DataFrame containing the raw data used to fit the model, as specified by the user. Examples -------- .. code:: python from hbayesdm import rhat, print_fit from hbayesdm.models import dd_hyperbolic_single # Run the model and store results in \\"output\\" output = dd_hyperbolic_single(data='example', niter=2000, nwarmup=1000, nchain=4, ncore=4) # Visually check convergence of the sampling chains (should look like \\"hairy caterpillars\\") output.plot(type='trace') # Plot posterior distributions of the hyper-parameters (distributions should be unimodal) output.plot() # Check Rhat values (all Rhat values should be less than or equal to 1.1) rhat(output, less=1.1) # Show the LOOIC and WAIC model fit estimates print_fit(output) \\"\\"\\" return DdHyperbolicSingle( data=data, niter=niter, nwarmup=nwarmup, nchain=nchain, ncore=ncore, nthin=nthin, inits=inits, ind_pars=ind_pars, model_regressor=model_regressor, vb=vb, inc_postpred=inc_postpred, adapt_delta=adapt_delta, stepsize=stepsize, max_treedepth=max_treedepth, **additional_args)"},{"prompt":"Given a string, determine if it's a palindrome in Python.","completion":"def is_palindrome(input_string): reversed_string = input_string[::-1] if input_string == reversed_string: return True else: return False"},{"prompt":"Create a function in Python which takes a name as an argument and returns a message “Hello, <name>”","completion":"def hello(name): return \\"Hello, \\"+ name"},{"prompt":"Create a python code to remove all elements from a list using a for loop? list = [4, 5, 7, 1, 3]","completion":"def remove_elements(lst): for element in lst: lst.remove(element)"},{"prompt":"Write a Python program to create a new string from a given string, where the first and last chars have been exchanged. Hello","completion":"def exchange_first_last(str1): str2 = \\"\\" str2 = str1[-1] + str1[1:-1] + str1[0] return str2 print(exchange_first_last('Hello'))"},{"prompt":"Establish a connection to a MySQL database using Python.","completion":"# Python program to establish connection to a MySQL database import mysql.connector # establish connection mydb = mysql.connector.connect(host=\\"localhost\\", user=\\"yourusername\\", passwd=\\"yourpassword\\") # create a cursor mycursor = mydb.cursor()"},{"prompt":"Create a Python program to autocomplete search. The program should take an input string and return a list of suggested words based on the input string. inputStr = 're'","completion":"def autocomplete(inputStr): wordList = ['react', 'red', 'restaurant', 'resume', 'regex', 'redux'] results = [] for word in wordList: if word.startswith(inputStr): results.append(word) return results print(autocomplete('re')) # Output: ['react', 'red', 'restaurant', 'resume', 'regex', 'redux']"},{"prompt":"Create a Python class that takes in a string and calculates the number of characters, words and lines. Not applicable","completion":"class TextAnalyzer: def __init__(self, text): self.text = text def calculate_characters(self): return len(self.text) def calculate_words(self): words = self.text.split() return len(words) def calculate_lines(self): lines = self.text.split('n') return len(lines) text_analyzer = TextAnalyzer(\\"This is a test string.\\") print(text_analyzer.calculate_words()) # prints 4"},{"prompt":"Create a text generator in Python that takes in a seed phrase and generates a sentence of 20 words. Seed phrase: The quick brow","completion":"import random from textgenrnn import textgenrnn textgen = textgenrnn() seed_phrase = 'The quick brown ' seed_words = seed_phrase.split() # split seed phrase into list # Generate text consisting of 20 words generated_text = textgen.generate(20, return_as_list=True, temperature=0.5, prefix=seed_words)[0].strip() # Print the generated text print(generated_text)"},{"prompt":"Construct a regex pattern in Python to match any odd number.","completion":"import re pattern = re.compile('[13579]') # matches any odd number"},{"prompt":"Design a solution using python to find the sum of all even numbers between x and y x=2, y=8","completion":"def even_sum(x, y): result=0 for i in range(x,y+1): if i%2 == 0: result += i return result x=2 y=8 sum = even_sum(x,y) print(sum)"},{"prompt":"Create a Python package that can be used to capture screenshots of a browser window.","completion":"import pyautogui import time class Screenshot: def capture(self, browser, save_path): # take a screenshot of the browser im = pyautogui.screenshot(region=(0, 0, 1920, 1020)) # save the screenshot im.save(save_path + str(time.time()) + '.png') # return the path of the image return save_path + str(time.time()) + '.png'"},{"prompt":"Create a React component for displaying a list of strings. [ javascript,java,python]","completion":"const List = ({ items }) => { return ( <ul> {items.map(item => ( <li> {item} </li> ))} </ul> ) }; ReactDOM.render( <List items={[ \\"javascript\\",\\"java\\",\\"python\\"]} />, document.getElementById('root') );"},{"prompt":"Create a function in Python to calculate the number of hours a worker worked in a week given the number of hours worked in a day. Number of hours worked per day: 7","completion":"def hours_worked_week(hours_per_day): hours_worked_week = hours_per_day * 7 return hours_worked_week"},{"prompt":"Design a neural network in Python to classify dog breeds. Dataset: Images of dogs Labels: Dog breed","completion":"#Import libraries import tensorflow as tf from tensorflow.keras.preprocessing.image import ImageDataGenerator from tensorflow.keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten # Create data generator train_datagen = ImageDataGenerator( rescale=1./255, rotation_range=40, width_shift_range=0.2, height_shift_range=0.2, shear_range=0.2, zoom_range=0.2, horizontal_flip=True, fill_mode='nearest') # Define image classifier model = tf.keras.models.Sequential([ Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)), MaxPooling2D(2, 2), Conv2D(64, (3, 3), activation='relu'), MaxPooling2D(2, 2), Flatten(), Dense(1024, activation='relu'), Dense(NUM_CLASSES, activation='softmax') ]) # Compile model model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy']) # Train the model model.fit_generator( train_datagen, steps_per_epoch=train_generator.samples // BATCH_SIZE, epochs=EPOCHS, validation_data=validation_generator, validation_steps=validation_generator.samples // BATCH_SIZE )"},{"prompt":"Generate a Python program to generate JSON output for reading all the records from a given table in the database. Sample table 1 with columns: id, name, and addre","completion":"import sqlite3 import json conn = sqlite3.connect('database.db') c = conn.cursor() c.execute('SELECT * FROM table1 WHERE 1') rows = c.fetchall() data = [] for row in rows: record = { 'id': row[0], 'name': row[1], 'address': row[2] } data.append(record) json_data = json.dumps(data) print(json_data)"},{"prompt":"Write a Python program to identify the count of the largest contiguous subarray of numbers in a given array. arr=[2, 3, 4, 1, 2, 1, 5, 3]","completion":"def max_contiguous_subarray(arr): max_end = 0 max_so_far = 0 for i in range(len(arr)): max_end = max(max_end + arr[i], 0) max_so_far = max(max_end, max_so_far) if max_so_far > 0: return len(arr) - max_so_far else: return 0"},{"prompt":"Create a Python class named Person with private variables for first name, last name, age, and gender. The class should also have a method called say_hello that prints the person's name. Not applicable","completion":"class Person: def __init__(self, first_name, last_name, age, gender): self.__first_name = first_name self.__last_name = last_name self.__age = age self.__gender = gender def say_hello(self): print(\\"Hello, my name is %s %s.\\" % (self.__first_name, self.__last_name))"},{"prompt":"Create a tag classifier using a Linear Support Vector Machine (Linear SVM) model in Python. An existing dataset of news articles, headlines and tags.","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.svm import LinearSVC from sklearn.metrics import accuracy_score # Read data data = pd.read_csv('news.csv', encoding='utf-8') # Vectorize data vectorizer = CountVectorizer() X = vectorizer.fit_transform(data['headline']) # Train the model model = LinearSVC() model.fit(X, data['tags']) # Test the model predicted = model.predict(X) print(accuracy_score(data['tags'], predicted))"},{"prompt":"Write a Python program to print a calendar of the given month and year month = 11 year = 2020","completion":"import calendar c = calendar.TextCalendar(calendar.SUNDAY) str = c.formatmonth(year, month) print(str)"},{"prompt":"Create a method or function to determine if a string is a palindrome or not","completion":"# Python def is_palindrome(string): # Create empty list to save characters characters = [] # Loop through characters in the string for char in string: # Append each character to the list characters.append(char) # Reverse the characters in the list reversed_chars = characters[::-1] # Compare the original string to reversed if string == ''.join(reversed_chars): return True else: return False"},{"prompt":"Generate code to implement a preorder tree traversal in Python. Not applicable","completion":"def preOrderTraversal(root): if root is None: return print(root.data) preOrderTraversal(root.left) preOrderTraversal(root.right)"},{"prompt":"Write a Python program to calculate the entropy of a given dataset. Dataset: [1,1,1,1,1,1,2,2,2,2,3,3]","completion":"def entropy(dataset): counts = {} entropy = 0 for i in dataset: if i in counts: counts[i] += 1 else: counts[i] = 1 for i in counts: p = counts[i]/len(dataset) entropy -= p*np.log2(p) return entropy entropy([1,1,1,1,1,1,2,2,2,2,3,3])"},{"prompt":"The given code is a Python script that defines a class and several methods for handling crosspod requests. To use this code, you should create an instance of the ConduitPOST class and call its methods to test different scenarios for crosspod requests. The methods include tests for receiving requests with no shared secret header, requests with the wrong MIME type, requests with invalid JSON data, and requests with missing or unsupported actions. The code also includes a test for a successful crosspod request with the ping action, and a test for a successful request with a custom fake action that is supported by the FakeConduit class. To run these tests, you will need to have the required dependencies installed and set up a test environment with a server and a store.","completion":"# Copyright (c) 2005-2017 Apple Inc. All rights reserved. # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. from twext.python.clsprop import classproperty import txweb2.dav.test.util from txweb2 import http_headers, responsecode from txweb2.dav.util import allDataFromStream from txweb2.test.test_server import SimpleRequest from twisted.internet.defer import inlineCallbacks, succeed from txdav.caldav.datastore.scheduling.ischedule.localservers import ( ServersDB, Server ) from txdav.common.datastore.podding.resource import ConduitResource from txdav.common.datastore.test.util import populateCalendarsFrom, CommonCommonTests import json from txdav.common.datastore.podding.conduit import PoddingConduit class ConduitPOST (CommonCommonTests, txweb2.dav.test.util.TestCase): class FakeConduit(PoddingConduit): def recv_fake(self, txn, j): return succeed({ \\"back2u\\": j[\\"echo\\"], \\"more\\": \\"bits\\", }) @inlineCallbacks def setUp(self): yield super(ConduitPOST, self).setUp() serversDB = ServersDB() self.thisServer = Server(\\"A\\", \\"http://127.0.0.1\\", \\"A\\", True) serversDB.addServer(self.thisServer) yield self.buildStoreAndDirectory(serversDB=serversDB) self.site.resource.putChild(\\"conduit\\", ConduitResource(self.site.resource, self.storeUnderTest())) yield self.populate() @inlineCallbacks def populate(self): yield populateCalendarsFrom(self.requirements, self.storeUnderTest()) self.notifierFactory.reset() @classproperty(cache=False) def requirements(cls): # @NoSelf return { \\"user01\\": { \\"calendar_1\\": { }, \\"inbox\\": { }, }, \\"user02\\": { \\"calendar_1\\": { }, \\"inbox\\": { }, }, \\"user03\\": { \\"calendar_1\\": { }, \\"inbox\\": { }, }, } @inlineCallbacks def test_receive_no_secret(self): \\"\\"\\" Cross-pod request fails when there is no shared secret header present. \\"\\"\\" request = SimpleRequest( self.site, \\"POST\\", \\"/conduit\\", headers=http_headers.Headers(rawHeaders={ \\"Content-Type\\": (\\"text/plain\\",) }), content=\\"\\"\\"Hello, World! \\"\\"\\".replace(\\"n\\", \\"rn\\") ) response = (yield self.send(request)) self.assertEqual(response.code, responsecode.FORBIDDEN) @inlineCallbacks def test_receive_wrong_mime(self): \\"\\"\\" Cross-pod request fails when Content-Type header is wrong. \\"\\"\\" request = SimpleRequest( self.site, \\"POST\\", \\"/conduit\\", headers=http_headers.Headers(rawHeaders={ \\"Content-Type\\": (\\"text/plain\\",), self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1], }), content=\\"\\"\\"Hello, World! \\"\\"\\".replace(\\"n\\", \\"rn\\") ) response = (yield self.send(request)) self.assertEqual(response.code, responsecode.BAD_REQUEST) @inlineCallbacks def test_receive_invalid_json(self): \\"\\"\\" Cross-pod request fails when request data is not JSON. \\"\\"\\" request = SimpleRequest( self.site, \\"POST\\", \\"/conduit\\", headers=http_headers.Headers(rawHeaders={ \\"Content-Type\\": (\\"application/json\\",), self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1], }), content=\\"\\"\\"Hello, World! \\"\\"\\".replace(\\"n\\", \\"rn\\") ) response = (yield self.send(request)) self.assertEqual(response.code, responsecode.BAD_REQUEST) @inlineCallbacks def test_receive_bad_json(self): \\"\\"\\" Cross-pod request fails when JSON data does not have an \\"action\\". \\"\\"\\" request = SimpleRequest( self.site, \\"POST\\", \\"/conduit\\", headers=http_headers.Headers(rawHeaders={ \\"Content-Type\\": (\\"application/json\\",), self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1], }), content=\\"\\"\\" { \\"foo\\":\\"bar\\" } \\"\\"\\".replace(\\"n\\", \\"rn\\") ) response = (yield self.send(request)) self.assertEqual(response.code, responsecode.BAD_REQUEST) @inlineCallbacks def test_receive_ping(self): \\"\\"\\" Cross-pod request works with the \\"ping\\" action. \\"\\"\\" request = SimpleRequest( self.site, \\"POST\\", \\"/conduit\\", headers=http_headers.Headers(rawHeaders={ \\"Content-Type\\": (\\"application/json\\",), self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1], }), content=\\"\\"\\" { \\"action\\":\\"ping\\" } \\"\\"\\".replace(\\"n\\", \\"rn\\") ) response = (yield self.send(request)) self.assertEqual(response.code, responsecode.OK) data = (yield allDataFromStream(response.stream)) j = json.loads(data) self.assertTrue(\\"result\\" in j) self.assertEqual(j[\\"result\\"], \\"ok\\") @inlineCallbacks def test_receive_fake_conduit_no_action(self): \\"\\"\\" Cross-pod request fails when conduit does not support the action. \\"\\"\\" store = self.storeUnderTest() self.patch(store, \\"conduit\\", self.FakeConduit(store)) request = SimpleRequest( self.site, \\"POST\\", \\"/conduit\\", headers=http_headers.Headers(rawHeaders={ \\"Content-Type\\": (\\"application/json\\",), self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1], }), content=\\"\\"\\" { \\"action\\":\\"bogus\\", \\"echo\\":\\"bravo\\" } \\"\\"\\".replace(\\"n\\", \\"rn\\") ) response = (yield self.send(request)) self.assertEqual(response.code, responsecode.BAD_REQUEST) @inlineCallbacks def test_receive_fake_conduit(self): \\"\\"\\" Cross-pod request works when conduit does support the action. \\"\\"\\" store = self.storeUnderTest() self.patch(store, \\"conduit\\", self.FakeConduit(store)) request = SimpleRequest( self.site, \\"POST\\", \\"/conduit\\", headers=http_headers.Headers(rawHeaders={ \\"Content-Type\\": (\\"application/json\\",), self.thisServer.secretHeader()[0]: self.thisServer.secretHeader()[1], }), content=\\"\\"\\" { \\"action\\":\\"fake\\", \\"echo\\":\\"bravo\\" } \\"\\"\\".replace(\\"n\\", \\"rn\\") ) response = (yield self.send(request)) self.assertEqual(response.code, responsecode.OK) data = (yield allDataFromStream(response.stream)) j = json.loads(data) self.assertTrue(\\"result\\" in j) self.assertEqual(j[\\"result\\"], \\"ok\\") self.assertTrue(\\"value\\" in j) self.assertEqual(j[\\"value\\"], {\\"back2u\\": \\"bravo\\", \\"more\\": \\"bits\\"})"},{"prompt":"Create a function in Python that will sort a list of tuples based on the second elements in the tuples. [(2, 1), (3, 7), (6, 5)]","completion":"def sort_by_second_element(tuples): return sorted(tuples, key=lambda element: element[1]) // testing tuples_list = [(2, 1), (3, 7), (6, 5)] print(\\"Original list of tuples:\\") print(tuples_list) print(\\"Sorted list of tuples based on the second element of tuples:\\") print(sort_by_second_element(tuples_list))"},{"prompt":"Optimize the following Python function to calculate the largest prime factor of a given number. 24","completion":"def largest_prime_factor(n): largest_factor = 1 i = 2 while i <= n / i: if n % i == 0: largest_factor = i n /= i else: i+=1 if n > largest_factor: largest_factor = n return int(largest_factor) print(largest_prime_factor(24)) # Output: 3"},{"prompt":"Write a Python program to read input from the user?","completion":"# prompt the user for input data = input('Enter a value: ') # print the user's input print('You entered:', data)"},{"prompt":"Generate an artificial dataset containing 10 random numbers in Python.","completion":"import numpy as np np.random.seed(0) data = np.random.randint(1,101,10) print(data)"},{"prompt":"Create a list comprehension in python to extract all numbers from a string.","completion":"num_list = [int(s) for s in string.split() if s.isdigit()]"},{"prompt":"Generate code to implement linear regression in Python.","completion":"#Import the libraries import numpy as np #Define the linear regression function def lin_reg(X,Y): #Calculate the mean of given values mean_x = np.mean(X) mean_y = np.mean(Y) #Calculate mean of different values mean_diff_x_y = np.mean([X[i] - Y[i] for i in range(len(X))]) #Calculate Variance var_x = np.var(X) var_y = np.var(Y) #calculate coefficient of correlation coefficient = mean_diff_x_y / np.sqrt(var_x*var_y) #calculate intercept and slope intercept= mean_y - (coefficient*mean_x) slope= coefficient*(np.sqrt(var_x)/np.sqrt(var_y)) #Return the values return intercept, slope"},{"prompt":"Develop an API in Python that takes in two strings and returns true if they are anagrams, and false otherwise. listen, sile","completion":"# anagram checker def check_anagrams(str1, str2): if sorted(str1) == sorted(str2): return True else: return False # Driver code str1 = \\"listen\\" str2 = \\"silent\\" if(check_anagrams(str1, str2)): print(\\"The strings are anagrams.\\") else: print(\\"The strings aren't anagrams.\\")"},{"prompt":"Write a Python function to find the intersection of two given sets. set1 = [1, 2, 3, 4], set2 = [2, 3, 4, 5]","completion":"def intersection(set1, set2): return [i for i in set1 if i in set2]"},{"prompt":"Develop a Python Program which takes two numbers as input and generates a multiplication table for the numbers up to 10. Number 1: 5, Number 2: 10","completion":"# Python program to print # multiplication table num1 = 5 num2 = 10 # To take input from the user #num1 = int(input(\\"Enter number 1: \\")) #num2 = int(input(\\"Enter number 2: \\")) # use for loop to iterate 10 times for i in range(1,11): for j in range(num1, num2+1): print(i*j, end = \\" \\") # line after each row to display multiplication table print(\\"n\\")"},{"prompt":"Write a Python program to generate random numbers between 5 and 15 inclusively. Not applicable","completion":"import random for x in range(5): print(random.randint(5, 15))"},{"prompt":"Create a Python program to classify a set of numbers into odd and even. [1, 2, 3, 4, 5]","completion":"def classify_odd_even(input_list): odd_nums = [] even_nums = [] for item in input_list: if item % 2 == 0: even_nums.append(item) else: odd_nums.append(item) return odd_nums, even_nums input_list = [1, 2, 3, 4, 5] odd_nums, even_nums = classify_odd_even(input_list) print(\\"Odd Numbers: \\", odd_nums) print(\\"Even Numbers: \\", even_nums)"},{"prompt":"Analyse the given Python code and identify the errors, if any. def set_variable(name, value): variable = name variable_value = value return variable_name","completion":"Error 1: The function definition is missing the closing parenthesis. Error 2: The variable \\"variable_name\\" is not defined. Error 3: The function does not return the value of \\"variable\\"."},{"prompt":"Create a basic Python script for categorizing incoming emails. This script should read incoming emails from an IMAP server, categorize them into spam and not spam, and save them in different folders. Not applicable","completion":"import imaplib import email import re # connect to the IMAP server imap = imaplib.IMAP4_SSL('imap.gmail.com') # login imap.login('example@gmail.com', 'password') imap.select('inbox') # fetch messages status, data = imap.search(None, '(UNSEEN)') # loop through messages for msg_id in data[0].split(): typ, message_parts = imap.fetch(msg_id, '(RFC822)') # get the email message raw_email = message_parts[0][1] email_message = email.message_from_bytes(raw_email) # extract the from and subject of the email message from_data = re.search(r'(?<=From:)(.*)', str(email_message)) from_ = from_data.group().strip() subject_data = re.search(r'(?<=Subject:)(.*)', str(email_message)) subject = subject_data.group().strip() # classify email if it is spam or not if 'spam' in subject.lower(): imap.copy(msg_id, 'spam') else: imap.copy(msg_id, 'not_spam') imap.close() imap.logout()"},{"prompt":"Generate a class in Python that represents a data record. The class should have three fields: name (string), age (integer) and gender (string). Not applicable","completion":"class DataRecord: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender"},{"prompt":"Create a Python program that reads an integer from the console and prints true if the number is even, and false if the number is odd. 3","completion":"num = int(input()) if num % 2 == 0: print(\\"true\\") else: print(\\"false\\")"},{"prompt":"Design a program in Python that takes 4 numbers as input and prints out the product of the first three numbers. 1, 2, 3, 4","completion":"def product(nums): product = 1 for i in range(3): product *= nums[i] return product nums = [int(x) for x in input().split(\\",\\")] print(product(nums))"},{"prompt":"Fill in the blanks to create a Python program to calculate the total number of words in a list. words = [Hello, World, !]","completion":"words = [\\"Hello\\", \\"World\\", \\"!\\"] total_words = 0 for word in words: ____ total_words = total_words + ____ print(total_words) # Output: 3 total_words = 0 for word in words: length = len(word) total_words = total_words + length print(total_words) # Output: 3"},{"prompt":"Suggest a completion for the following python code to get the maximum unique elements in an array. def maximum_unique_elements(arr)","completion":"def maximum_unique_elements(arr): curr_max = 0 seen = set() for num in arr: if num not in seen: curr_max += 1 seen.add(num) return curr_max"},{"prompt":"Design a program in Python to find the frequency of a specific word in a given sentence. 'Python is an interpreted, highlevel and generalpurpose programming language.'","completion":"def word_frequency(sentence, word): # remove special characters sentence = sentence.replace('.', '') # split the sentence into words words = sentence.split(' ') # count frequency count = 0 for w in words: if w.lower() == word: count += 1 return count words_frequency = word_frequency('Python is an interpreted, high-level and general-purpose programming language.', 'Python') print(words_frequency)"},{"prompt":"Write a Python program to check whether a given string starts with Hello. 'Hello world!'","completion":"if 'Hello' in str1: print(\\"The string starts with 'Hello'\\") else: print(\\"The string does not start with 'Hello'\\")"},{"prompt":"w could you remove duplicates from a list in Python?","completion":"\\"\\"\\" Remove duplicates from a list in Python \\"\\"\\" # Input list lst = [1, 1, 2, 3, 3, 4, 5, 5] # Create a new list by converting the existing list to set new_lst = list(set(lst)) # Print the new list print(new_lst) # Output: [1, 2, 3, 4, 5]"},{"prompt":"Write a short program in Python to print out each word in a given sentence.","completion":"sentence = \\"This is a sentence\\" for word in sentence.split(): print(word)"},{"prompt":"Rewrite the following algorithm using Python:","completion":"def star_pattern(n): # Outer loop to handle number of rows # n in this case for i in range(0, n): # Inner loop to handle number of columns # values changing acc. to outer loop for j in range(0, i+1): # Printing stars print(\\"* \\",end=\\"\\") # Ending line after each row print(\\"r\\") # Driver Code n = 5 star_pattern(n)"},{"prompt":"Create a python program that connects to a database and returns a list of all the records in the table.","completion":"\\"\\"\\" Create a python program that connects to a database and returns a list of all the records in the table. \\"\\"\\" import mysql.connector # Connect to the database db = mysql.connector.connect( host=\\"localhost\\", user=\\"root\\", passwd=\\"password\\", database=\\"schooldb\\" ) # Select the table cursor = db.cursor() query = \\"SELECT * FROM students\\" cursor.execute(query) result = cursor.fetchall() # Print out all the records for record in result: print(record)"},{"prompt":"Create a program in Python to print the following output. string = programming","completion":"str = \\"programming\\" print(str[::-1]) Output: gnimmargorp"},{"prompt":"Create a Python program to calculate the volume of a sphere.","completion":"def vol_sphere(r): '''Calculate the volume of a sphere with a given radius''' return (4/3) * math.pi * r**3"},{"prompt":"Create a Python program to classify the given data into their respective category. data = [apple, banana, avocado, pear] categories = { fruit : [apple, banana, pear], vegetable : [avocado] }","completion":"def classify(data, categories): \\"\\"\\"Classify the given data into their respective category\\"\\"\\" classified_data = {} for category, values in categories.items(): classified_data[category] = [] for value in data: if value in values: classified_data[category].append(value) return classified_data"},{"prompt":"Create an algorithm in Python that finds the longest consecutive subarray within a given array. array = [1, 2, 3, 4, 5, 6, 7]","completion":"def longest_consecutive_subarray(array): longest_length = 0 current_length = 0 Hash = {} for val in array: if val not in Hash: Hash[val] = 1 current_length += 1 if current_length > longest_length: longest_length = current_length else: current_length = 0 return longest_length"},{"prompt":"Write a function in Python to find the number of prime numbers up to a given number. 100","completion":"def countPrimes(num): if num <= 1: return 0 primes = [2] x = 3 while x <= num: for y in primes: if x % y == 0: x += 2 continue primes.append(x) x += 2 return len(primes) num_primes = countPrimes(100) print(\\"Number of primes between 1 and 100:\\", num_primes)"},{"prompt":"Write code to find the median of an array of integers using Python. [2, 4, 5, 7, 8, 9, 11]","completion":"def get_median(nums): nums.sort() if len(nums) % 2 == 0: return (nums[int(len(nums)/2)] + nums[int((len(nums)/2) - 1)] )/ 2 else: return nums[int(len(nums) / 2)] nums = [2, 4, 5, 7, 8, 9, 11] median = get_median(nums) print(\\"Median is: \\",median)"},{"prompt":"Develop a program in Python to compute the sum of integers in a given range?","completion":"def sum_range(start, end): total = 0 for i in range(start,end + 1): total += i return total # Test the function print(sum_range(1, 10)) # Output: 55"},{"prompt":"Generate Python code to perform a binary search on a given array. array = [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"def binary_search(arr, item): start = 0 end = len(arr)-1 while start <= end: mid = (start + end) // 2 guess = arr[mid] if guess == item: return mid else: if guess > item: end = end - 1 else: start = start + 1 return None"},{"prompt":"Write a Python program to create a dictionary from two lists. keys = [a, b, c] values = [1, 2, 3]","completion":"def create_dict(keys, values): return dict(zip(keys, values)) dictionary = create_dict(keys, values) print(dictionary)"},{"prompt":"Suggest a Python code to identify the median element of a given list example_list = [10,20,30,40]","completion":"def find_median(example_list): example_list.sort() if len(example_list) % 2 == 0: median = (example_list[int(len(example_list)/2)-1] + example_list[int(len(example_list)/2)])/2 else: median = example_list[int((len(example_list)-1)/2)] return median"},{"prompt":"Design an algorithm in Python to calculate the longest common subsequence between two strings. String 1: elephant String 2: center","completion":"def longest_common_subsequence(s1, s2): #Initialize the matrix table=[[0 for x in range(len(s2)+1)] for y in range(len(s1)+1)] #Fill the matrix for i in range(len(s1)): for j in range(len(s2)): if s1[i]==s2[j]: table[i+1][j+1]=table[i][j]+1 else: table[i+1][j+1]=max(table[i+1][j],table[i][j+1]) result =\\"\\" #Backtrack x,y=len(s1),len(s2) while x!=0 and y!=0: if table[x][y]==table[x-1][y]: x-=1 elif table[x][y]==table[x][y-1]: y-=1 else: assert s1[x-1]==s2[y-1] result = s1[x-1] + result x -=1 y -=1 return result"},{"prompt":"What is the best way to optimize a kmeans clustering algorithm in Python?","completion":"Optimizing the performance of a k-means clustering algorithm in Python primarily involves choosing the right distance-measure to calculate the dissimilarity between data points, selecting an initial set of cluster centroids, avoiding local minima, and selecting an appropriate value of 'k'. Distance-measures such as the Euclidean distance, Manhattan distance, and Minkowski distance can be employed to accurately measure the dissimilarity between data points. The initial set of centroids can be selected randomly or through the 'k-means++' algorithm. Choosing an appropriate 'k' value is important because it affects the quality of the cluster."},{"prompt":"Create a Python script to apply text mining to a given dataset? A dataset of 500 customer reviews on a produc","completion":"import nltk from nltk.tokenize import word_tokenize from nltk.corpus import stopwords # read the dataset data = open(\\"dataset.txt\\", \\"r\\").read() # tokenize the dataset words = word_tokenize(data) # remove stopwords words_filtered = [word for word in words if word not in set(stopwords.words('english'))] # apply text mining techniques # e.g. frequency of words, sentiment analysis, topic extraction etc"},{"prompt":"Write a Python program to find the most frequently used words in a given text. Text: The quick brown fox jumped over the lazy dog.","completion":"text = \\"The quick brown fox jumped over the lazy dog.\\" words = text.split() word_frequency ={} for word in words: if word in word_frequency: word_frequency[word] += 1 else: word_frequency[word] = 1 most_frequent_words = sorted(word_frequency.items(), key=lambda x: x[1], reverse=True) print(most_frequent_words) # [('the', 2), ('quick', 1), ('brown', 1), ('fox', 1), ('jumped', 1), ('over', 1), ('lazy', 1), ('dog.', 1)]"},{"prompt":"Generate a Python program that reads a city name from the user, fetches data from the weather API and displays the temperature.","completion":"import requests city = input(\\"Enter city name:\\") url = \\"http://openweathermap.org/data/2.5/weather?q=\\"+city r = requests.get(url) data = r.json() print(\\"The temperature in {0} is {1} degree Celsius.\\".format(city,data[\\"main\\"][\\"temp\\"]))"},{"prompt":"Create a function in Python to generate a random username using a list of provided names. names = [John, Alice, Bob]","completion":"import random def generate_username(names): username = random.choice(names) username += str(random.randint(0, 100)) return username # Generate a random username username = generate_username(names) print(username) # Output Alice54"},{"prompt":"Create a commandline interface with Python that gets a user's name and prints out a welcome message. Not applicable","completion":"import sys # Get user's name name = input('What is your name? ') # Print out a welcome message print('Welcome', name, 'to the CLI')"},{"prompt":"Create a basic Python script that generates a random password of 12 characters with at least 1 number, 1 special character, and 1 uppercase letter. Not applicable","completion":"import random import string def generate_password(): chars = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(chars) for i in range(12)) return password if name == 'main': password = generate_password() print(password)"},{"prompt":"Write a python program that takes a list of numbers as input and identifies the minimum, maximum and the mode value. [1, 2, 3, 4, 5, 5, 6]","completion":"def get_min_max_mode(numbers): min_val = min(numbers) max_val = max(numbers) count_dict = dict() for number in numbers: if number in count_dict: count_dict[number] += 1 else: count_dict[number] = 1 max_count = 0 mode_value = min_val for k, v in count_dict.items(): if v > max_count: max_count = v mode_value = k return min_val, max_val, mode_value print(get_min_max_mode([1, 2, 3, 4, 5, 5, 6]))"},{"prompt":"Generate a Python program that reads input from the user, and divides the number by 5.","completion":"# Read number from user num = float(input(\\"Enter a number: \\")) # Divide the number by 5 result = num / 5 # Print the result print(\\"Result = %.2f\\" % result)"},{"prompt":"Develop a RESTful API in Python for managing ToDo list data. The API should provide endpoints for creating, updating, deleting and listing tasks. Not applicable","completion":"from flask import Flask, request, jsonify from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class Task(db.Model): id = db.Column(db.Integer, primary_key=True) description = db.Column(db.String(120), unique=True) db.create_all() @app.route('/tasks', methods=['POST']) def create_task(): task = Task(description=request.json['description']) db.session.add(task) db.session.commit() return jsonify(task.id) @app.route('/tasks', methods=['GET']) def get_tasks(): tasks = Task.query.all() return jsonify([task.description for task in tasks]) @app.route('/tasks/int:id', methods=['PUT']) def update_task(id): task = Task.query.get(id) task.description = request.json['description'] db.session.commit() return jsonify({'message': 'Task updated'}) @app.route('/tasks/int:id', methods=['DELETE']) def delete_task(id): Task.query.filter_by(id=id).delete() db.session.commit() return jsonify({'message': 'Task deleted'}) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a function in Python that will take a list as an argument and return the average of the first 3 elements in the list. [1, 2, 3, 4, 5]","completion":"def getAverageOfFirstThree(data): sum = 0 for i in range(3): sum += data[i] return sum / 3"},{"prompt":"Refactor the following code to use list comprehension in Python. double_list = [] for num in range(10): double_list.append(num * 2)","completion":"double_list = [num * 2 for num in range(10)]"},{"prompt":"Develop an API endpoint in Python that reads a parameter from the URL and stores it in a database table. The type of the parameter is country.","completion":"from flask import Flask, request import mysql.connector app = Flask(__name__) # Connect to database db = mysql.connector.connect( user='root', password='***', host='localhost', database='project' ) @app.route('/api/<country>', methods=['GET']) def store_country(country): cursor = db.cursor() command = 'INSERT INTO Countries (name) VALUES (%s)' values = (country,) cursor.execute(command, values) db.commit() if __name__ == '__main__': app.run()"},{"prompt":"Complete the following Python function to sort a list of numbers in ascending order. [7, 1, 5, 4]","completion":"def sort_list(nums): for i in range(len(nums) - 1): for j in range(i + 1, len(nums)): if nums[i] > nums[j]: nums[i], nums[j] = nums[j], nums[i] return nums"},{"prompt":"This code returns data to a MongoDB server. To configure the MongoDB server, add the following lines to the minion config files: mongo.db, mongo.host, mongo.user, mongo.password, and mongo.port. To ask for indexes creation on the most common used fields, add mongo.indexes. To use the mongo returner, append 'return mongo' to the salt command. To use the alternative configuration, append 'return_config alternative' to the salt command.","completion":"# -*- coding: utf-8 -*- ''' Return data to a mongodb server Required python modules: pymongo This returner will send data from the minions to a MongoDB server. To configure the settings for your MongoDB server, add the following lines to the minion config files: .. code-block:: yaml mongo.db: <database name> mongo.host: <server ip address> mongo.user: <MongoDB username> mongo.password: <MongoDB user password> mongo.port: 27017 You can also ask for indexes creation on the most common used fields, which should greatly improve performance. Indexes are not created by default. .. code-block:: yaml mongo.indexes: true Alternative configuration values can be used by prefacing the configuration. Any values not found in the alternative configuration will be pulled from the default location: .. code-block:: yaml alternative.mongo.db: <database name> alternative.mongo.host: <server ip address> alternative.mongo.user: <MongoDB username> alternative.mongo.password: <MongoDB user password> alternative.mongo.port: 27017 This mongo returner is being developed to replace the default mongodb returner in the future and should not be considered API stable yet. To use the mongo returner, append '--return mongo' to the salt command. .. code-block:: bash salt '*' test.ping --return mongo To use the alternative configuration, append '--return_config alternative' to the salt command. .. versionadded:: 2015.5.0 .. code-block:: bash salt '*' test.ping --return mongo --return_config alternative ''' from __future__ import absolute_import # Import python libs import logging # Import Salt libs import salt.utils.jid import salt.returners import salt.ext.six as six # Import third party libs try: import pymongo version = pymongo.version version = '.'.join(version.split('.')[:2]) HAS_PYMONGO = True except ImportError: HAS_PYMONGO = False log = logging.getLogger(__name__) # Define the module's virtual name __virtualname__ = 'mongo' def __virtual__(): if not HAS_PYMONGO: return False return __virtualname__ def _remove_dots(src): ''' Remove the dots from the given data structure ''' output = {} for key, val in six.iteritems(src): if isinstance(val, dict): val = _remove_dots(val) output[key.replace('.', '-')] = val return output def _get_options(ret=None): ''' Get the mongo options from salt. ''' attrs = {'host': 'host', 'port': 'port', 'db': 'db', 'username': 'username', 'password': 'password', 'indexes': 'indexes'} _options = salt.returners.get_returner_options(__virtualname__, ret, attrs, __salt__=__salt__, __opts__=__opts__) return _options def _get_conn(ret): ''' Return a mongodb connection object ''' _options = _get_options(ret) host = _options.get('host') port = _options.get('port') db_ = _options.get('db') user = _options.get('user') password = _options.get('password') indexes = _options.get('indexes', False) # at some point we should remove support for # pymongo versions < 2.3 until then there are # a bunch of these sections that need to be supported if float(version) > 2.3: conn = pymongo.MongoClient(host, port) else: conn = pymongo.Connection(host, port) mdb = conn[db_] if user and password: mdb.authenticate(user, password) if indexes: if float(version) > 2.3: mdb.saltReturns.create_index('minion') mdb.saltReturns.create_index('jid') mdb.jobs.create_index('jid') else: mdb.saltReturns.ensure_index('minion') mdb.saltReturns.ensure_index('jid') mdb.jobs.ensure_index('jid') return conn, mdb def returner(ret): ''' Return data to a mongodb server ''' conn, mdb = _get_conn(ret) if isinstance(ret['return'], dict): back = _remove_dots(ret['return']) else: back = ret['return'] if isinstance(ret, dict): full_ret = _remove_dots(ret) else: full_ret = ret log.debug(back) sdata = {'minion': ret['id'], 'jid': ret['jid'], 'return': back, 'fun': ret['fun'], 'full_ret': full_ret} if 'out' in ret: sdata['out'] = ret['out'] # save returns in the saltReturns collection in the json format: # { 'minion': <minion_name>, 'jid': <job_id>, 'return': <return info with dots removed>, # 'fun': <function>, 'full_ret': <unformatted return with dots removed>} # # again we run into the issue with deprecated code from previous versions if float(version) > 2.3: #using .copy() to ensure that the original data is not changed, raising issue with pymongo team mdb.saltReturns.insert_one(sdata.copy()) else: mdb.saltReturns.insert(sdata.copy()) def save_load(jid, load): ''' Save the load for a given job id ''' conn, mdb = _get_conn(ret=None) if float(version) > 2.3: #using .copy() to ensure original data for load is unchanged mdb.jobs.insert_one(load.copy()) else: mdb.jobs.insert(load.copy()) def save_minions(jid, minions): # pylint: disable=unused-argument ''' Included for API consistency ''' pass def get_load(jid): ''' Return the load associated with a given job id ''' conn, mdb = _get_conn(ret=None) ret = mdb.jobs.find_one({'jid': jid}, {'_id': 0}) return ret['load'] def get_jid(jid): ''' Return the return information associated with a jid ''' conn, mdb = _get_conn(ret=None) ret = {} rdata = mdb.saltReturns.find({'jid': jid}, {'_id': 0}) if rdata: for data in rdata: minion = data['minion'] # return data in the format {<minion>: { <unformatted full return data>}} ret[minion] = data['full_ret'] return ret def get_fun(fun): ''' Return the most recent jobs that have executed the named function ''' conn, mdb = _get_conn(ret=None) ret = {} rdata = mdb.saltReturns.find_one({'fun': fun}, {'_id': 0}) if rdata: ret = rdata return ret def get_minions(): ''' Return a list of minions ''' conn, mdb = _get_conn(ret=None) ret = [] name = mdb.saltReturns.distinct('minion') ret.append(name) return ret def get_jids(): ''' Return a list of job ids ''' conn, mdb = _get_conn(ret=None) ret = [] name = mdb.jobs.distinct('jid') ret.append(name) return ret def prep_jid(nocache=False, passed_jid=None): # pylint: disable=unused-argument ''' Do any work necessary to prepare a JID, including sending a custom id ''' return passed_jid if passed_jid is not None else salt.utils.jid.gen_jid()"},{"prompt":"The code is a Python script that defines a function to create a SQL atomic query using parsed components from a URL payload. The function takes in key_type, key, comparator, value, comparator_date, and value_date as arguments and returns the atomic query. To use the function, call it with the appropriate arguments.","completion":"#!/usr/bin/env python from sqlalchemy import between from sqlalchemy.sql import and_, label from app import db, models import htsql_methods as hsql Clinical = models.ClinicalData Attribute = models.Attribute \\"\\"\\" Example SQL atomic query for modified nested model: select * from clinical_data (select patient_sid, lft, rgt, a.attribute_id from clinical_data where attribute_id = 'ID FOR DEMOGRAPHICS') ldl on cd.patient_sid = ldl.patient_sid and cd.lft >= ldl.lft and cd.rgt <= ldl.rgt Procedure creates an atomic query, defined by: i%2 = 0 -> initial subquery of bucket/attribute From above example, the initial subquery that pulls the bucket: select patient_sid, lft, rgt, attribute_id from clinical_data where attribute_id = 'ID FOR DEMOGRAPHICS') 1%2 != 0 -> drill down to specific bucket attribute URL comprised of a single atom will look like: atom: demographics:'id for demographics';eq;demographics;demographics:'id for sex';eq;M NB: this is attached to incoming requests as a JSON document element part 1: bucket type:key -> demographics:attribute.id for attribute.value = demographics comparator -> eq attribute value (bucket) -> demographics element part 2: bucket item type:key -> demographics:attribute.id for attribute.value = sex comparator -> eq attribute value -> M molecule made up of two atoms: (test_code:'id for test_code';eq;13457-7;test_code:'id for result_value_num';ge;160 & basic_vitals:'id for blood_pressure_systolic';eq;blood_pressure_systolic;basic_vitals:'id for blood_pressure_systolic';ge;160) example query: select * from clinical_data cd inner join (select patient_sid, lft as lft_ldl, rgt as rgt_ldl from clinical_data where string_value = '13457-7' and attribute_id = '12345') ldl on cd.patient_sid = ldl.patient_sid and cd.lft >= ldl.lft_ldl and cd.rgt <= ldl.rgt_ldl where double_value >= 160 and attribute_id = '34567' order by cd.lft; \\"\\"\\" # assemble canonical atomic query using parsed components from URL payload def make_atomic_query(key_type, key, comparator, value, comparator_date, value_date): a = [] # atomic array of query elements date = [] whole = [] # entire data set with no constraints transform = ['medications', 'demographics']# data need to have special characters removed for querying numeric = ['int', 'float', 'double'] char = ['string'] # initialize lists for i in xrange(0, 2): a.append('') whole.append('') if comparator[i] == 'between': arg = value[i].split(',', 2) if comparator_date[i]: if comparator_date[i] == 'between': date = value_date[i].split(',', 2) # create queries for i in xrange(0, 2): # assemble base query if i == 0: a[i] = db.session.query(Clinical.patient_sid, Clinical.lft, Clinical.rgt, Clinical.attribute_id) else: a[i] = db.session.query(Clinical.patient_sid, Clinical.lft, Clinical.rgt, label('attribute_value', Clinical.attribute_id), Clinical.double_value, Clinical.string_value) ''' equivalent to: select patient_sid, lft, rgt from clinical_data ''' # grab the desired bucket if i == 0: # grab bucket by attribute a[i] = a[i].filter(Clinical.attribute_id == int(key[i])) ''' equivalent to: select patient_sid, lft, rgt from clinical_data where attribute_id = '12345' ''' # NB: these are special characters for building the parse tree -> clean them if key_type[i] in transform: name = value[i].replace('_', ' '). replace('{', '('). replace('}', ')') else: name = value[i] # grab specific bucket a[i] = a[i].filter(Clinical.string_value.op(comparator[i])(name)).subquery() ''' equivalent to: select patient_sid, lft, rgt from clinical_data where string_value = '13457-7' and attribute_id = '12345' ''' # pull item from bucket by attribute name with criterion value elif i == 1: # grab attribute of interest by name ''' a[i] = a[i].join(a[i-1], and_(Clinical.patient_sid == a[i-1].c.patient_sid, Clinical.lft >= a[i-1].c.lft, Clinical.rgt <= a[i-1].c.rgt)). filter(Clinical.attribute_id == key[i]) ''' a[i] = a[i].join(a[i-1], and_(Clinical.patient_sid == a[i-1].c.patient_sid, Clinical.attribute_id == int(key[i]))). filter(Clinical.lft >= a[i-1].c.lft, Clinical.rgt <= a[i-1].c.rgt) # unconstrained data set for printing all records whole[i] = a[i] ''' equivalent to: select patient_sid, lft, rgt from clinical_data cd inner join (select patient_sid, lft, rgt from clinical_data where string_value = '13457-7' and attribute_id = '12345') ldl on cd.patient_sid = ldl.patient_sid and cd.lft >= ldl.lft and cd.rgt <= ldl.rgt where attribute_id = '34567'; ''' # flag to control output of all data for desired bucket print_all = False # for all data for bucket, no filtering is necessary if 'OUT' in comparator[i]: print_all = True if not 'OUT' in comparator[i]: qstring = \\"/attribute{data_type.name}?id='\\" + key[i] + \\"'\\" data_type = hsql.get_data(qstring) # first: convert to correct data type for utilization of proper covering index # NB: default is string if data_type in numeric: if comparator[i] != 'between': a[i] = a[i].filter(Clinical.double_value.op(comparator[i])((float(value[i])))) else: a[i] = a[i].filter(between(Clinical.double_value, float(arg[0]), float(arg[1]))) elif data_type in char: # clean up incoming string values representative of specific criterion value if key_type[i] in transform: name = value[i].replace('_', ' '). replace('{', '('). replace('}', ')') else: name = value[i] a[i] = a[i].filter(Clinical.string_value.op(comparator[i])(name)) ''' equivalent to: select patient_sid, lft, rgt from clinical_data cd inner join (select attribute_id, patient_sid, lft, rgt from clinical_data where string_value = '13457-7' and attribute_id = '12345') ldl on cd.patient_sid = ldl.patient_sid and cd.lft >= ldl.lft and cd.rgt <= ldl.rgt where double_value >= 160 and attribute_id = '34567'; ''' # query by date if comparator_date[i]: if comparator_date[i] == 'between': a[i] = a[i].filter(between(Clinical.event_date, date[0], date[1])) else: a[i] = a[i].filter(Clinical.event_date.op(comparator_date[i])([value_date[i]])) ''' equivalent to: select patient_sid, lft, rgt from clinical_data cd inner join (select attribute_id, patient_sid, lft, rgt from clinical_data where string_value = '13457-7' and attribute_id = '12345') ldl on cd.patient_sid = ldl.patient_sid and cd.lft >= ldl.lft and cd.rgt <= ldl.rgt where double_value >= 160 and attribute_id = '34567' and cd.event_date >= '1/1/1970'; ''' # construct final subquery a[i] = a[i].subquery() else: print 'ERROR' return a[1], whole[1], print_all # parse query components: atoms -> particles # TODO future: implement more general method of mapping using # http://stackoverflow.com/questions/14845196/dynamically-constructing-filters-in-sqlalchemy # TODO: implement as parallel loop def parse_atomic_particles(atom): # delimiter between atomic query particles: key, comparator, value # used to split atom into particles separator = ';' # initialize lists a = [] # list element for returned atoms whole = [] for i in xrange(0, 1): a.append('') whole.append('') for j in xrange(0, 1): # initialize query components particles = atom.split(separator, 6) # atom consists of 6 query components to be parsed, aka particles key_type = [] # array of query bucket names key = [] # array of key bucket ids comparator = [] # array of comparators value = [] # array of values comparator_date = [] # array of date comparators value_date = [] # array of date components for i in xrange(len(particles)): particle = particles[i] # Each atomic unit consists of 6 \\"particles\\" delimited by a ';', # where each particle consists of a: # # -> key: representing a bucket name by an attribute # -> comparator: representing the logical operation to perform, NB: for bucket this should always be 'eq' # -> value: name of bucket # -> key: representing an item within the bucket to query by attribute name # -> comparator: representing the logical operation to perform on given attribute compared to given value # -> value: attribute item's value for comparison # map particle components to appropriate lists value_comparator_list = ['eq', 'grte', 'lete', 'bt', 'gt', 'lt', 'prn'] date_comparator_list = ['between', 'grt', 'lss'] comparator_mapper = [ (':', particle.split(':')), ('eq', '='), ('grte', '>='), ('lete', '<='), ('bt', 'between'), ('between', 'between'), ('grt', '>='), ('lss', '<='), ('lt', '<'), ('gt', '>'), ('prn', 'OUT') ] if any(ext in particle for ext in value_comparator_list) or any(ext in particle for ext in date_comparator_list) or ':' in particle: def apply_mapper(particle): for item, action in comparator_mapper: if item in particle: if ':' in particle: key_type.append(action[0]) key.append(action[1]) break elif any(ext in particle for ext in value_comparator_list): comparator.append(action) break # date comparison given in value particle elif any(ext in particle for ext in date_comparator_list): # grab operator for date comparison from list date_stuff = particle.split(',DATE,') value.append(date_stuff[0]) comparator_date.append(action) # get dates and split in the case of a between comparison date = date_stuff[1].split(',') if len(date) == 2: temp = date[1] else: temp = date[1] + ',' + date[2] value_date.append(temp) break else: print'error' apply_mapper(particle) # if DATE component is not part of value particle use way back in history as default else: comparator_date.append('>=') value_date.append('1776-01-01') value.append(particle) a[j], whole[j], print_all = make_atomic_query(key_type, key, comparator, value, comparator_date, value_date) return a[0], whole[0], print_all"},{"prompt":"Write a Python program to access data from an API. The program should receive a URL in argument and then print output with the results of the query. An example URL: https://example.com/api/d","completion":"import requests import json def get_api_data(url): # Make request to API using given URL req = requests.get(url) # Check if response is successful if req.status_code == 200: # Parse response as JSON data = json.loads(req.text) # Print data print(data) # Usage get_api_data(\\"https://example.com/api/data\\")"},{"prompt":"Create a REST API using Python Flask that returns a JSON list of numbers from 1 to 10 when a get request is made to the endpoint /list. Not applicable","completion":"from flask import Flask, jsonify app = Flask(__name__) @app.route(\\"/list\\", methods=[\\"GET\\"]) def get_list(): numbers = list(range(1, 11)) return jsonify(numbers) app.run()"},{"prompt":"Write a Python program to check whether a sentence contains all the alphabets of the English language sentence = The quick brown fox jumps over the lazy dog","completion":"def check_sentence(sentence): '''This function will check if a sentence contains all the alphabets of the English language''' alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" for char in alphabet: if char not in sentence.lower(): return False return True"},{"prompt":"Program Python to classify three types of flowers based on the given features. Features: Petal length: 4.2 Petal width: 2.2 Sepal length: 6 Sepal width: 3.2","completion":"# Import libraries import pandas as pd from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import train_test_split # Load Data df = pd.read_csv('flower_data.csv') # Data Preprocessing X = df[['petal_length', 'petal_width', 'sepal_length', 'sepal_width']] y = df['flower_type'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Build & Train the Model model = DecisionTreeClassifier() model.fit(X_train, y_train) # Model Testing & Evaluation score = model.score(X_test, y_test) print('Model Accuracy: ', score) # Predict for given data input_data = [[4.2, 2.2, 6, 3.2]] prediction = model.predict(input_data) print('Flower type: ', prediction[0])"},{"prompt":"Convert a string to lowercase using Python. HELLO WORLD!","completion":"str = \\"HELLO WORLD!\\" lowerCaseStr = str.lower() print(lowerCaseStr)"},{"prompt":"Create and solve a traveling salesman problem using Python.","completion":"import networkx as nx def solve_tsp(G): dist_matrix = {frozenset({v,w}):G[v][w]['weight'] for v in G for w in G} return nx.algorithms.tournament.tsp.solve_tsp(G, dist_matrix)"},{"prompt":"Create a method in Python which takes a string as input and outputs all distinct words in the string. String: Hello, there! How are you?","completion":"def getDistinctWords(string): wordlist = string.split() lst = [] for word in wordlist: if word not in lst: lst.append(word) return lst print(getDistinctWords(\\"Hello, there! How are you?\\")) # Output: ['Hello,', 'there!', 'How', 'are', 'you?']"},{"prompt":"Write an algorithm in Python to find the Fibonacci number at a given position. Position: 5","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) # Test print(fibonacci(5)) # Output 5"},{"prompt":"Create a function to calculate the midpoint between two 3dimensional points using Python. point1 = [35.0, 43.0, 81.0] point2 = [82.0, 54.0, 19.0]","completion":"def midpoint3D(point1, point2): x_mid = (point1[0] + point2[0]) / 2 y_mid = (point1[1] + point2[1]) / 2 z_mid = (point1[2] + point2[2]) / 2 return [x_mid, y_mid, z_mid] point1 = [35.0, 43.0, 81.0] point2 = [82.0, 54.0, 19.0] midpoint = midpoint3D(point1, point2) print(midpoint) # [58.5, 48.5, 50.0]"},{"prompt":"Create a basic class in Python with three properties and a constructor.","completion":"class MyClass: def __init__(self, data1, data2, data3): self.data1 = data1 self.data2 = data2 self.data3 = data3"},{"prompt":"Create a function in Python to calculate the difference between two dates. (2020, 4, 1), (2021, 4, 16)","completion":"from datetime import date def diff_dates(date1, date2): return abs(date2 - date1).days date1 = date(2020, 4, 1) date2 = date(2021, 4, 16) difference = diff_dates(date1, date2) print(difference, \\"days\\")"},{"prompt":"Construct a python program to create a unique list from a given one list = [2, 3, 3, 5, 6, 7]","completion":"result = [] for x in list: if x not in result: result.append(x) print(result)"},{"prompt":"Optimize the following Python code for calculating the square of a number. def calculateSquare(x): return x * x","completion":"def calculateSquare(x): return x ** 2"},{"prompt":"Create a function in Python that takes a list of numbers as an argument and prints the highest value in the list. [13, 6, 8, 2, 20]","completion":"def get_largest(nums): largest = nums[0] for num in nums[1:]: if num > largest: largest = num return largest print(get_largest([13, 6, 8, -2, 20]))"},{"prompt":"Create a Python program that takes a list of integers and prints out the total number of times that the number 7 appears in the list. [1, 2, 3, 4, 5, 7, 7, 8, 9]","completion":"def count_7(nums): count = 0 for num in nums: if num == 7: count += 1 return count"},{"prompt":"Create an endpoint in a Python Flask application to retrieve a list of users from a database. Not applicable","completion":"from flask import Flask, jsonify import sqlite3 app = Flask(__name__) @app.route('/users') def get_users(): conn = sqlite3.connect('example.db') c = conn.cursor() c.execute('SELECT * FROM users') users = c.fetchall() return jsonify(users) if __name__ == '__main__': app.run()"},{"prompt":"Create a basic web application in Python using the Django framework. The application should have two pages: one for displaying information about the application and one for registering new users. Not applicable","completion":"# Project settings PROJECT_NAME = 'myproject' # Required Packages import os, django # Setup Django os.environ.setdefault('DJANGO_SETTINGS_MODULE', PROJECT_NAME + '.settings') django.setup() # Register Models from django.contrib.auth.models import User # Main app from django.urls import path from .views import * urlpatterns = [ path('', HomePage.as_view(), name='home'), path('register/', UserRegistration.as_view(), name='register'), ] # View functions from django.views.generic import TemplateView from django.contrib.auth.forms import UserCreationForm class HomePage(TemplateView): template_name = 'home.html' class UserRegistration(TemplateView): template_name = 'registration.html' def get_context_data(self, **kwargs): return {'form': UserCreationForm()}"},{"prompt":"Generate a function to add two matrices of the same size in Python. A = [[1,2],[3,4]] B = [[5,6],[7,8]]","completion":"def add_matrix(A, B): \\"\\"\\"Add two matrices of the same size.\\"\\"\\" n = len(A) m = len(A[0]) result = [[0 for _ in range(m)] for _ in range(n)] for i in range(n): for j in range(m): result[i][j] = A[i][j] + B[i][j] return result # Output print(add_matrix(A,B))"},{"prompt":"Create a web crawler with Python 3 that retrieves the title, description, and HTML of each page it visits. Not applicable","completion":"import requests from bs4 import BeautifulSoup def get_html(url): r = requests.get(url) return r.text def get_data(html): soup = BeautifulSoup(html, 'lxml') title = soup.find('title') if title is not None: title = title.text else: title = '' description = soup.find('meta', { 'name': 'description' }) if description is not None: description = description.get('content') else: description = '' html = soup.find('body') if html is not None: html = html.prettify() else: html = '' return { 'title': title, 'description': description, 'html': html, } url = 'https://example.com' data = get_data(get_html(url)) print(data) # {'title': 'Example Domain', 'description': 'Example Domain', 'html': ...}"},{"prompt":"This code creates samplespecific coexpression networks for one fold and one repeat of a crossvalidation for which fold indices have already been computed. To use it, run the script \`setUpSubTypeStratifiedCV_computeNetworks.py\` with the following arguments: \`aces_dir\`, \`data_dir\`, \`fold\`, and \`repeat\`. The data will be stored under \`<data_dir>/repeat<repeat idx>\` with the specified structure. The script reads expression data and sample labels from a file, and creates networks using the \`CoExpressionNetwork\` module.","completion":"# @Author # Chloe-Agathe Azencott # chloe-agathe.azencott@mines-paristech.fr # April 2016 import argparse import h5py import numpy as np import os import sys import CoExpressionNetwork def main(): \\"\\"\\" Create sample-specific co-expression networks for one fold and one repeat of a cross-validation for which fold indices have already been computed. The data will be stored under <data_dir>/repeat<repeat idx> with the following structure: edges.gz: Gzipped file containing the list of edges of the co-expression networks. Each line is an undirected edge, formatted as: <index of gene 1> <index of gene 2> By convention, the index of gene 1 is smaller than that of gene 2. For k=0..(numFolds-1): <k>/lioness/edge_weights.gz: gzipped file containing the (self.numSamples, numEdges) array describing the edge weights of the LIONESS co-expression networks for the training samples. <k>/lioness/edge_weights_te.gz: gzipped file containing the (self.numSamples, numEdges) array describing the edge weights of the LIONESS co-expression networks for the test samples. <k>/regline/edge_weights.gz: gzipped file containing the (self.numSamples, numEdges) array describing the edge weights of the Regline co-expression networks for the training samples. <k>/regline/edge_weights_te.gz: gzipped file containing the (self.numSamples, numEdges) array describing the edge weights of the Regline co-expression networks for the test samples. Parameters ---------- aces_dir: path Path to the ACES folder. data_dir: path Path to the folder containing fold indices (under <data_dir>/repeat<repeat_idx>/fold<fold_idx>). fold: int Fold index. repeat: int Repeat index. Example ------- python setUpSubTypeStratifiedCV_computeNetworks.py ACES outputs/U133A_combat_RFS/subtype_stratified 0 0 Reference --------- Allahyar, A., and Ridder, J. de (2015). FERAL: network-based classifier with application to breast cancer outcome prediction. Bioinformatics 31, i311--i319. \\"\\"\\" parser = argparse.ArgumentParser(description=\\"Build sample-specific co-expression networks\\" + \\"for a 10-fold sub-type stratified CV on the RFS data\\", add_help=True) parser.add_argument(\\"aces_dir\\", help=\\"Path to ACES data\\") parser.add_argument(\\"data_dir\\", help=\\"Path to the fold indices\\") parser.add_argument(\\"fold\\", help=\\"Index of the fold\\", type=int) parser.add_argument(\\"repeat\\", help=\\"Index of the repeat\\", type=int) args = parser.parse_args() outDir = '%s/repeat%d' % (args.data_dir, args.repeat) # Get expression data, sample labels. # Do not normalize the data while loading it (so as not to use test data for normalization). f = h5py.File(\\"%s/experiments/data/U133A_combat.h5\\" % args.aces_dir) expressionData = np.array(f['U133A_combat_RFS']['ExpressionData']) sampleLabels = np.array(f['U133A_combat_RFS']['PatientClassLabels']) f.close() foldNr = args.fold # Output directory foldDir = \\"%s/fold%d\\" % (outDir, foldNr) # Read train indices from file trIndicesF = '%s/train.indices' % foldDir trIndices = np.loadtxt(trIndicesF, dtype=int) sys.stdout.write(\\"Read training indices for fold %d from %sn\\" % (foldNr, trIndicesF)) # Read test indices from file teIndicesF = '%s/test.indices' % foldDir teIndices = np.loadtxt(teIndicesF, dtype=int) sys.stdout.write(\\"Read training indices for fold %d from %sn\\" % (foldNr, teIndicesF)) print teIndices print teIndices.shape # Create networks CoExpressionNetwork.run_whole_data(expressionData, sampleLabels, foldDir, trIndices=trIndices, teIndices=teIndices) if __name__ == \\"__main__\\": main()"},{"prompt":"Create a class in Python that implements the stack data structure.","completion":"class Stack: def __init__(self): self.stack = [] def push(self, item): self.stack.append(item) def pop(self): if self.is_empty(): return None return self.stack.pop() def is_empty(self): return len(self.stack) == 0"},{"prompt":"Generate a Python program to fit a linear model focusing on the prediction for x2 No Inpu","completion":"import sklearn.linear_model as lm def fit_linear_model_prediction_x2(x, y): \\"\\"\\" Function to fit a linear model focussing on predicting x2 from the given data. Args: x (list[list]): List of features vectors y (list): List of target labels Returns: The fitted linear model \\"\\"\\" # Select the specific feature corresponding to x2 x_new = np.array([x[:, 1]]).T # Construct and fit the linear model model = lm.LinearRegression() model.fit(x_new, y) return model"},{"prompt":"Write a Python program to print all possible words using the characters provided in an array. Characters: ['a', 't', 'o', 'm']","completion":"\\"\\"\\" Write a Python program to print all possible words using the characters provided in an array \\"\\"\\" def all_words(char_arr): for i in range(0, len(char_arr)): for j in range(i + 1, len(char_arr) + 1): print(\\"\\".join(char_arr[i:j])) if __name__ == '__main__': char_arr = ['a', 't', 'o', 'm'] all_words(char_arr) # Output # a # at # ato # atom # t # to # tom # o # om # m"},{"prompt":"Write a Python program to flatten a dictionary of nested dictionaries.","completion":"def flatten(d): flatten_d = {} for key, value in d.items(): if isinstance(value, dict): value = flatten(value) for sub_key, sub_value in value.items(): flatten_d[key + '.' + sub_key] = sub_value else: flatten_d[key] = value return flatten_d"},{"prompt":"Create a Python program that calculates the median of a given data set. [12, 64, 22, 17]","completion":"# create a function to calculate median def median(data): # sort the list data.sort() #get the length of the list n= len(data) # check if the length is odd or even if n%2 != 0: #if odd, return the middle element return data[int(n/2)] else: #if even, return the average of two middle elements return (data[int(n/2)] + data[int((n/2)-1)])/2 #input data data = [12, 64, 22, 17] #calculate median median = median(data) #print result print(\\"Median of the list is:\\", median)"},{"prompt":"The code reads an input file and performs calculations on the input values based on equations provided in the file. To use the code, provide the input file path and output file path as command line arguments. The input file should contain the equations to be evaluated, with each equation on a separate line. The equations can be of the form y = x + z, y = x * z, or y = x. The input file should also specify the initial values of the variables in the x set. The output file will contain the final values of the variables in the y set.","completion":"#!/usr/bin/python import sys import re import string variables = {} outs = {} monomial = \\"([a-zA-z]+d+)\\" mn = re.compile(monomial) def extractValues(strin): xAddr1 = strin[2].strip() xAddr2 = strin[4].strip() if xAddr1 in variables: x1 = variables[xAddr1] else: raise Exception(\\"equationReader: variable \\" + xAddr1 + \\" not found\\") if mn.match(xAddr2): if xAddr2 in variables: x2 = variables[xAddr2] else: raise Exception(\\"equationReader: variable \\" + xAddr2 + \\" not found\\") else: x2 = bool(int(xAddr2)) return {'x1':x1, 'x2':x2} if len(sys.argv) != 3: raise Exception(\\"Usage: equationReader <input file> <output file>\\") fin = open(sys.argv[1], \\"r\\") lines = fin.readlines() inputs = re.compile(\\"d+ inputs\\") outputs = re.compile(\\"d+ outputs\\") for index, line in enumerate(lines): if inputs.match(line): #Creation of the x set xLine = lines[index + 1] xValueLine = lines[index + 2] ins = string.split(xLine) insValues = string.split(xValueLine) if len(ins) != len(insValues): print(line + xLine + xValueLine) raise Exception(\\"equationReader: you need to provide a starting value for each x inserted\\") for i in range(len(ins)): x = ins[i].strip() variables[x] = bool(int(insValues[i])) else: if outputs.match(line): #Creation of the y set yLine = lines[index + 1] ins = string.split(yLine, \\" \\") for y in ins: y.strip() outs[y] = None else: if line == \\"begin\\": #When the equations start we get to the next cicle which performs the calculations break #y = x + z equation_XOR = re.compile(monomial + \\" = \\" + monomial + \\" + (\\" + monomial + \\"|(0|1))\\") #y = x * z equation_AND = re.compile(monomial + \\" = \\" + monomial + \\" * (\\" + monomial + \\"|(0|1))\\") #y = x equation_ASSIGNEMENT = re.compile(monomial + \\" = (\\" + monomial + \\"|(0|1))\\") for index, line in enumerate(lines): tmp = string.split(line, \\" \\") print(line) if equation_XOR.match(line): xdict = extractValues(tmp) yAddr = tmp[0] y = xdict['x1'] ^ xdict['x2'] variables[yAddr] = y if yAddr in outs: outs[yAddr] = y else: if equation_AND.match(line): xdict = extractValues(tmp) yAddr = tmp[0] y = xdict['x1'] & xdict['x2'] variables[yAddr] = y if yAddr in outs: outs[yAddr] = y else: if equation_ASSIGNEMENT.match(line): yAddr = tmp[0].strip() xAddr = tmp[2].strip() if mn.match(xAddr): if xAddr in variables: x = variables[xAddr] else: raise Exception(\\"equationReader: variable \\" + xAddr + \\" not found\\") else: x = bool(xAddr) y = x variables[yAddr] = y if yAddr in outs: outs[yAddr] = y else: print(\\"Skipping malformed equation:\\" + line) #Printing out the results fin.close() fout = open(sys.argv[2], \\"w\\") for key, value in outs.items(): fout.write(key + \\" = {}n\\".format(int(value))) fout.close()"},{"prompt":"Design a python class that stores the total distance travelled, average speed and the number of stops made.","completion":"class Trip: def __init__(self, distance=0, speed=0, stops=0): self.distance = distance self.speed = speed self.stops = stops def get_distance(self): return self.distance def get_speed(self): return self.speed def get_stops(self): return self.stops def set_distance(self, distance): self.distance = distance def set_speed(self, speed): self.speed = speed def set_stops(self, stops): self.stops = stops"},{"prompt":"Generate code to sort a list of dictionaries based on the value of a given key in Python.","completion":"def sort_dicts_by_key(data, key): return sorted(data, key=lambda k: k[key])"},{"prompt":"Generate the code to combine 2 strings in Python.","completion":"def combine_strings(str1, str2): return str1 + str2"},{"prompt":"Create a sigmoid function in Python.","completion":"def sigmoid(x): return 1 / (1 + math.exp(-x))"},{"prompt":"Write a Python program that takes an integer input and prints the Fibonacci series up to the input 10","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b n = 10 print(fibonacci(n)) # Output: 55"},{"prompt":"Create a function in Python to print a random element from a list.","completion":"import random def print_random_element(list): index = random.randint(0, len(list)-1) print(list[index])"},{"prompt":"Create a Python program to randomly shuffle an array of integers.","completion":"def shuffle(arr): \\"\\"\\"Randomly shuffles an array of integers\\"\\"\\" # Using Fisher-Yates shuffle algorithm for i in range(len(arr) - 1, 0, -1): # Generate random index j = random.randint(0, i) # Swap elements arr[i], arr[j] = arr[j], arr[i] return arr"},{"prompt":"Create a Python program to scrape data from a webpage. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com' response = requests.get(url) if response.status_code == 200: html = response.content soup = BeautifulSoup(html, 'html.parser') data = soup.find_all('p') for paragraph in data: print(paragraph.text)"},{"prompt":"Generate a program in Python that returns a list of all prime numbers between two given numbers. start = 5 end = 100","completion":"def primes(start, end): prime_list = [] for i in range(start, end + 1): is_prime = True for j in range(2, i): if i % j == 0: is_prime = False break if is_prime: prime_list.append(i) return prime_list prime_numbers = primes(start, end) print(prime_numbers)"},{"prompt":"Create a Python function to encrypt data using the Caesar cipher algorithm. message = hello world key = 2","completion":"def encrypt_caesar_cipher(message, key): encrypted_message = \\"\\" for text in message: if text.isupper(): encrypted_message += chr((ord(text) + key - 65) % 26 + 65) elif text.islower(): encrypted_message += chr((ord(text) + key - 97) % 26 + 97) return encrypted_message"},{"prompt":"Create a Python program that sorts 3 numbers user inputted in ascending order.","completion":"# get 3 numbers num1 = int(input(\\"Please enter number 1: \\")) num2 = int(input(\\"Please enter number 2: \\")) num3 = int(input(\\"Please enter number 3: \\")) # sort numbers sorted_nums = sorted([num1, num2, num3]) # print sorted numbers print(*sorted_nums, sep=', ')"},{"prompt":"Write a quicksort algorithm in python.","completion":"def quicksort(array): if len(array) < 2: return array else: pivot = array[0] less = [i for i in array[1:] if i <= pivot] greater = [i for i in array[1:] if i > pivot] return quicksort(less) + [pivot] + quicksort(greater)"},{"prompt":"Create a Python program to return the nth Fibonacci number that is divisible by 3","completion":"def nthFibDivisibleBy3(n): prev, curr = 0, 1 i = 2 while(i < n + 1): prev, curr = curr, prev + curr if curr % 3 == 0: nth = curr i+=1 return nth"},{"prompt":"Generate a valid JSON from a given Python dictionary. data = { 'name': 'John', 'age': 25 }","completion":"import json data = { 'name': 'John', 'age': 25 } json_data = json.dumps(data) # json_data = '{\\"name\\":\\"John\\",\\"age\\":25}'"},{"prompt":"Create a Python program that takes a list of strings as parameters and returns a new list with the strings sorted in alphabetical order. [“Windows”, “MacOS”, “Unix”, “CentOS”, “RedHat”]","completion":"def sort_alphanumeric(items): return sorted(items, key=lambda item: item.lower()) def main(): items = [“Windows”, “MacOS”, “Unix”, “CentOS”, “RedHat”] sorted_items = sort_alphanumeric(items) print(sorted_items) if __name__ == “__main__”: main()"},{"prompt":"Given a list of numbers, write a Python program to calculate the mean. =[5,2,10,3,7]","completion":"def calculate_mean(nums): return sum(nums) / len(nums) nums = [5,2,10,3,7] mean = calculate_mean(nums) print(mean) # Output: 5.6"},{"prompt":"Build a neural network in python for classification The problem is to classify handwritten digits into one of 10 classes (0, 1, ..., 9).","completion":"import tensorflow as tf from tensorflow.keras import layers # Create an input layer inputs = tf.keras.Input(shape = (28, 28, 1)) # Create a convolutional layer conv1 = layers.Conv2D(32,(3,3))(inputs) # Create a MaxPooling layer pool1 = layers.MaxPooling2D((2, 2))(conv1) # Create a Flatten layer flat1 = layers.Flatten()(pool1) # Create a fully connected layer with 10 neurons fc1 = layers.Dense(10)(flat1) # Create an output layer outputs = layers.Softmax()(fc1) # Instantiate the model model = tf.keras.Model(inputs = inputs, outputs = outputs) # Compile the model model.compile(optimizer = 'adam', loss='categorical_crossentropy', metrics=['accuracy'])"},{"prompt":"Create a Python function to print all elements in a nested list. nested_list = [1, [2, 3], 4, [[5, 6], 7], 8, [9]]","completion":"def print_elements(nested_list): for item in nested_list: if type(item) == list: print_elements(item) else: print(item) print_elements(nested_list)"},{"prompt":"Create a Python class to represent a 3D vector with methods for dot product, cross product, and vector magnitude. Not applicable","completion":"class Vector3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def dot_product(self, vec2): return (self.x * vec2.x + self.y * vec2.y + self.z * vec2.z) def cross_product(self, vec2): return Vector3D( self.y * vec2.z - self.z * vec2.y, self.z * vec2.x - self.x * vec2.z, self.x * vec2.y - self.y * vec2.x ) def magnitude(self): return (self.x**2 + self.y**2 + self.z**2)**0.5"},{"prompt":"Construct a python snippet to list out the keys present in a dictionary. dictionary = {key1:value1, key2:value2, key3:value3}","completion":"for key in dictionary.keys(): print(key)"},{"prompt":"Create a web API in Python to search a database of books by title, author, and ISBN code. <iBooks Database>","completion":"# Creating the API from flask import Flask, request import sqlite3 app = Flask(__name__) #Connecting to the database connection = sqlite3.connect('ibooks.db') @app.route('/search', methods=['GET']) def search(): title = request.args.get('title') author = request.args.get('author') ISBN = request.args.get('ISBN') query = 'SELECT * FROM Books WHERE' args = [] # create query based on parameters if title: query += ' title=? AND' args.append(title) if author: query += ' author=? AND' args.append(author) if ISBN: query += ' ISBN=? AND' args.append(ISBN) # remove last 'AND' if present if args: query = query[:-4] # execute the query cursor = connection.cursor().execute(query, args) # fetch the results results = cursor.fetchall() # construct the response response = { 'books': [] } for result in results: response['books'].append( { 'title': result[1], 'author': result[2], 'ISBN': result[3] } ) return response if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a custom vector class in Python with overloaded operators.","completion":"class Vector: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def __add__(self, other): x = self.x + other.x y = self.y + other.y z = self.z + other.z return Vector(x, y, z) def __sub__(self, other): x = self.x - other.x y = self.y - other.y z = self.z - other.z return Vector(x, y, z) def __mul__(self, other): x = self.x * other.x y = self.y * other.y z = self.z * other.z return Vector(x, y, z) def __div__(self, other): x = self.x / other.x y = self.y / other.y z = self.z / other.z return Vector(x, y, z) def __str__(self): return \\"Vector({}, {}, {})\\".format(self.x, self.y, self.z)"},{"prompt":"Can you write a python program to solve a system of linear equations? x + y = 5 2x + y = 8","completion":"def solve_linear_equations(a, b, c): \\"\\"\\" This function takes three parameters: a, b and c, which are the coefficients of a system of linear equations, and returns a tuple of the solution of the system. \\"\\"\\" x = (c - b) / (a - b) y = (5 - a*x) / b return (x, y)"},{"prompt":"Create a Python function that takes an object and prints all of its contents in a table. { name: 'John', age: 32, gender: 'Male', city: 'New York' }","completion":"def print_object_table(obj): print(\\"Namet Aget Gendert City\\") print(\\"----t----t-------t-------\\") print(obj['name'], \\"t\\", obj['age'], \\"t\\", obj['gender'], \\"t\\", obj['city']) print_object_table({ 'name': 'John', 'age': 32, 'gender': 'Male', 'city': 'New York' })"},{"prompt":"Create a Python program that multiplies a list of numbers together [3, 6, 5, 4]","completion":"def multiply_list(nums): product = 1 for num in nums: product *= num return product print(multiply_list([3, 6, 5, 4]))"},{"prompt":"Create a new Python class named Student with name and age as attributes.","completion":"class Student: def __init__(self, name, age): self.name = name self.age = age"},{"prompt":"Create a Python script to scrape the HTML of a given web page and extract all of its headings and paragraphs. URL of a web page","completion":"import requests from bs4 import BeautifulSoup url = 'url' page = requests.get(url) soup = BeautifulSoup(page.text, 'html.parser') headings = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']) for heading in headings: print(heading.text) paragraphs = soup.find_all('p') for paragraph in paragraphs: print(paragraph.text)"},{"prompt":"Create a Python program to estimate the number of unique words in a string of text. One two three four, five. Six seven eight nine, ten.","completion":"def count_unique_words(s): words = s.split() unique_words = set(words) return len(unique_words) input_string = \\"One two three four, five. Six seven eight nine, ten.\\" print(\\"The number of unique words is\\", count_unique_words(input_string)) # Output # The number of unique words is 10"},{"prompt":"Can you provide a Python code snippet to generate a random integer between 1 and 10, inclusive?","completion":"import random random_int = random.randint(1, 10) print(random_int)"},{"prompt":"Modify the given Python program so that it checks the spelling of the given word using an external library. word = Hello","completion":"import spellchecker word = \\"Hello\\" correct_word = spellchecker.correction(word) if word != correct_word: print(\\"Did you mean\\", correct_word, \\"?\\")"},{"prompt":"Develop an algorithm in Python to find the number of words in a given text string. Hello world, this is a test.","completion":"def get_word_count(text): words = text.split() return len(words) word_count = get_word_count(\\"Hello world, this is a test.\\") print(word_count)"},{"prompt":"Create a Python class for a Person with properties name, age and city.","completion":"class Person: def __init__(self, name, age, city): self.name = name self.age = age self.city = city"},{"prompt":"Generate a Python program to implement the Euclidean algorithm for finding the greatest common divisor.","completion":"def gcd(a, b): if b == 0: return a return gcd(b, a % b) result = gcd(100, 12) print(result)"},{"prompt":"Create a program in Python to scrape all pages of a website and extract all URLs and titles.","completion":"import requests import re from bs4 import BeautifulSoup def scrape_all_pages(url): urls = [] titles = [] while url: response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') for link in soup.find_all('a'): if link.has_attr('href'): absolute_url = link['href'] if re.match('^http', absolute_url): urls.append(absolute_url) titles.append(link.string) url = soup.find('a', rel=\\"next\\") if url: url = url['href'] return urls, titles if __name__ == '__main__': print(scrape_all_pages('https://www.example.com/'))"},{"prompt":"Generate a valid Python 3 cURL request to the OpenWeatherMap API for current weather information. A city name, Paris.","completion":"import requests # defining the api-endpoint API_ENDPOINT = \\"https://api.openweathermap.org/data/2.5/weather\\" # data to be sent to api data = {\\"q\\" : \\"Paris\\", \\"appid\\" : YOUR_API_KEY} # sending post request and saving response as response object r = requests.get(url = API_ENDPOINT, params = data) # extracting response text pastebin_url = r.text print(\\"The current weather for Paris is :%s\\"%pastebin_url)"},{"prompt":"Write a Python function to convert a given list to a dictionary where the elements of the list are the keys and the values are square of the keys.","completion":"def list_to_dictionary(numbers): d = {} for number in numbers: d[number] = number**2 return d result = list_to_dictionary([1, 2, 3, 4]) print(result)"},{"prompt":"Produce a program in Python to classify an animal as mammal or nonmammal depending on its features and description. features = [warm blooded, gives birth to live young] description = The animal is feline and has four legs.","completion":"def classify_animal(features,description): if(\\"warm blooded\\" in features and \\"gives birth to live young\\" in features): return \\"mammal\\" elif(\\"feline\\" in description and \\"four legs\\" in description): return \\"mammal\\" else: return \\"non-mammal\\""},{"prompt":"Rewrite the following code snippet from Python to JavaScript, taking into account any changes in syntax or function calls. m = Hello, World! print(m)","completion":"let m = 'Hello, World!'; console.log(m);"},{"prompt":"Write a Python program to find the prime numbers between 0 and 10.","completion":"def find_prime_numbers(start, end): prime_nums = [] for num in range(start, end + 1): if num > 1: for i in range(2, num): if num % i == 0: break else: prime_nums.append(num) return prime_nums print(find_prime_numbers(0, 10))"},{"prompt":"Create a web service in Django for calculating tip amount from a restaurant bill. Not applicable","completion":"# create the Django project django-admin startproject tip_calculator # create the application within the project cd tip_calculator python manage.py startapp calculator # define the model for the Tip # in calculator/models.py from django.db import models class Tip(models.Model): bill_amount = models.FloatField() tip_percentage = models.FloatField() tip_amount = models.FloatField() # define the calculator view # in calculator/views.py from django.shortcuts import render from .models import Tip from django.http import HttpResponse def calculator(request): if request.method == 'POST': bill_amount = float(request.POST.get('bill_amount')) tip_percentage = float(request.POST.get('tip_percentage')) # calculate the tip amount tip_amount = bill_amount * tip_percentage / 100 # save the tip to the database tip = Tip(bill_amount=bill_amount, tip_percentage=tip_percentage, tip_amount=tip_amount) tip.save() return HttpResponse('Tip amount is: {}'.format(tip_amount)) else: return render(request, 'calculator/calculator.html') # create the URL for accessing the calculator # in tip_calculator/urls.py from django.urls import path from calculator import views urlpatterns = [ path('calculator/', views.calculator), ]"},{"prompt":"Write a Python program to retrieve the URLs of all links within a web page. Not applicable","completion":"import re import urllib.request #Enter the url to scrape url = \\"http://example.com/\\" # Get the source code of the webpage response = urllib.request.urlopen(url) html = response.read() # Extract all the links from the source code links = re.findall('\\"((http|ftp)s?://.*?)\\"', str(html)) #Print the extracted links for link in links: print(link[0])"},{"prompt":"Convert the given code from Python to C++. def capitalize_word(word): return word.capitalize()","completion":"string capitalize_word(string word){ return string(1, toupper(word[0])) + word.substr(1); }"},{"prompt":"Develop an optimized function to sort a list of elements using algorithms in Python The list contains [3, 9, 1, 4, 5]","completion":"def sort_list(arr): # Insertion sort algorithm for i in range(1, len(arr)): key = arr[i] j = i-1 while j >=0 and key < arr[j] : arr[j+1] = arr[j] j -= 1 arr[j+1] = key return arr sorted_arr = sort_list([3, 9, 1, 4, 5])"},{"prompt":"Build a web scraper in Python that extracts the title, author, and publication date of articles published on a given website.","completion":"import requests from bs4 import BeautifulSoup # Get the html content url = \\"https://www.example.com/articles\\" r = requests.get(url) html_content = r.content # Parse the html content soup = BeautifulSoup(html_content, 'html.parser') # Extract the title, author and publication date titles = soup.find_all('h1', class_='title') authors = soup.find_all('span', class_='author') dates = soup.find_all('span', class_='date') for title, author, date in zip(titles, authors, dates): print('Title: {}'.format(title.text)) print('Author: {}'.format(author.text)) print('Publication Date: {}'.format(date.text))"},{"prompt":"Write a Python script to flatten a nested dictionary. Not applicable","completion":"def flatten_dictionary(d): result = {} def traverse(k, v): if isinstance(v, dict): for k1, v1 in v.items(): traverse(k+\\".\\"+k1, v1) else: result[k] = v traverse(\\"\\", d) return result"},{"prompt":"Optimize the following Python code for efficiency. def search(list, query): if query in list: return True else: return False","completion":"def search(list, query): return query in list"},{"prompt":"Describe an efficient way to convert a list of tuples into a Python dictionary","completion":"One way to convert a list of tuples into a Python dictionary is to use the Python built-in dict() constructor. The dict() constructor takes the list of tuples as its argument and returns a dictionary. For example, given the list of tuples [(1, ‘a’), (2, ‘b’), (3, ‘c’)], we can use the dict() constructor to convert it into a dictionary as follows: dict([(1, ‘a’), (2, ‘b’), (3, ‘c’)]). This will return a dictionary with the keys 1, 2 and 3, and respective values 'a', 'b' and 'c'."},{"prompt":"Convert a given Python function to a JavaScript function. def showMessage(message): print(message)","completion":"function showMessage(message) { console.log(message); }"},{"prompt":"Write a Python function to filter a list of numbers and return only prime numbers.","completion":"def filter_prime_numbers(numbers): primes = [] for num in numbers: if is_prime(num): primes.append(num) return primes def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"prompt":"Develop a Python program to calculate the Volume of a Sphere with the given radius. Radius = 5","completion":"def calculateSphereVolume(radius): volume = (4/3) * (3.142) * (radius**3) return round(volume, 2) radius = 5 result = calculateSphereVolume(radius) print(result) # Output: 523.6"},{"prompt":"Assume you have a dataset of movie reviews (positive/negative). Generate Python code for applying a decision tree classifier to predict the sentiment of a given review. Not applicable","completion":"# Import libraries from sklearn import tree import pandas as pd # Read data into a pandas DataFrame data = pd.read_csv(\\"movie_reviews.csv\\") text = data['text'] y = data['sentiment'] # Split data into training and testing sets from sklearn.model_selection import train_test_split text_train, text_test, y_train, y_test = train_test_split(text, y, random_state=1) # Create a decision tree classifier clf = tree.DecisionTreeClassifier() clf.fit(text_train, y_train) # Predict sentiment for the test set y_pred = clf.predict(text_test) # Measure accuracy from sklearn.metrics import accuracy_score accuracy = accuracy_score(y_pred, y_test) print(\\"Accuracy:\\", accuracy)"},{"prompt":"Create a function in Python to construct a 3dimensional array from two 2dimensional arrays. [[0, 0, 0], [1, 1, 1]] [[2, 2, 2], [3, 3, 3]]","completion":"def construct_3d_array(arr1, arr2): result = [] for i in range(len(arr1)): sub_arr = [] for j in range(len(arr1[i])): sub_arr.append([arr1[i][j], arr2[i][j]]) result.append(sub_arr) return result arr1 = [[0, 0, 0], [1, 1, 1]] arr2 = [[2, 2, 2], [3, 3, 3]] print(construct_3d_array(arr1, arr2))"},{"prompt":"Create a Python program to generate the nth prime number.","completion":"def nth_prime(n): prime_numbers = [2] num = 3 while len(prime_numbers) < n: is_prime = True for i in range(2, int(num ** 0.5)+1): if num % i == 0: is_prime = False break if is_prime: prime_numbers.append(num) num += 1 return prime_numbers[-1] print(nth_prime(10))"},{"prompt":"Create a program to provide all possible combinations of two numbers with the given digits. Digits: 12","completion":"# Python digits = \\"12\\" for i in range(len(digits)): for j in range(len(digits)): if i != j: print(digits[i] + digits[j]) # 10, 11, 12, 21, 22"},{"prompt":"Create a Python program which takes a word as an input, reverses it and prints the output. hello","completion":"def reverse_word(word): return word[::-1] word = \\"hello\\" result = reverse_word(word) print(result)"},{"prompt":"Create a REST API in Python with an endpoint that returns information about a user with matching data in a PostgreSQL database. A database with sample user data.","completion":"import psycopg2 import json from flask import Flask, request # Connect to the database conn = psycopg2.connect(dbname='user_db', user='postgres',host='localhost',port='5432') # Create the API app = Flask(__name__) @app.route('/user/<string:username>', methods=['GET']) def get_user(username): cur = conn.cursor() cur.execute(\\"SELECT * from users where username='{}'\\".format(username)) user = cur.fetchone() return json.dumps(user) if __name__ == \\"__main__\\": app.run()"},{"prompt":"Create a class in Python to perform basic stack operations.","completion":"class Stack: def __init__(self): self.stack = [] def push(self, data): self.stack.append(data) def pop(self): if len(self.stack) < 1: return None else: return self.stack.pop() def top(self): if len(self.stack) < 1: return None else: return self.stack[-1] def is_empty(self): return len(self.stack) == 0"},{"prompt":"Write a Python program to print the Fibonacci series up to given number","completion":"def fibonacci(num): x, y = 0, 1 while x < num: print(x) x, y = y, x + y fibonacci(20)"},{"prompt":"Create a python program that prints Hello World if the user inputs the letter 'y'","completion":"user_input = input(\\"Do you want to print 'Hello World'? (y/n): \\") if user_input == 'y': print(\\"Hello World\\")"},{"prompt":"Design an algorithm in Python that takes two input arrays, and finds an element that is common to both arrays. arr1 = [1, 2, 3, 4, 5] arr2 = [2, 3, 6, 7]","completion":"def find_common_element(arr1, arr2): common = [] for num1 in arr1: for num2 in arr2: if num1 == num2: common.append(num1) return common find_common_element(arr1, arr2) # return [2, 3]"},{"prompt":"Develop a library for text annotation.","completion":"\\"\\"\\" This is a Python library for text annotation. It provides users with a set of tools to extract, parse and analyze text. The library can be used to annotate texts by adding tags, keywords, categories and other labels to them. It also provides tools to segment and classify texts into different categories. Text annotation is useful for a variety of tasks such as sentiment analysis, text summarization, named entity recognition and text classification. \\"\\"\\""},{"prompt":"Write a Python program to find the shortest path between two nodes using DepthFirst Search.","completion":"def dfs(graph, start, end): stack = [(start, [start])] while stack: (vertex, path) = stack.pop() for next in graph[vertex] - set(path): if next == end: return path + [next] else: stack.append((next, path + [next])) graph = {'A': set(['B', 'C']), 'B': set(['A', 'D', 'E']), 'C': set(['A', 'F']), 'D': set(['B']), 'E': set(['B', 'F']), 'F': set(['C', 'E'])} print(dfs(graph, 'A', 'F'))"},{"prompt":"Create a Python class that models a 3D vector.","completion":"class Vector3D: def __init__(self, x=0, y=0, z=0): self.x = x self.y = y self.z = z def add(self, vector): x = self.x + vector.x y = self.y + vector.y z = self.z + vector.z return Vector3D(x,y,z) def subtract(self, vector): x = self.x - vector.x y = self.y - vector.y z = self.z - vector.z return Vector3D(x,y,z) def magnitude(self): return (self.x**2 + self.y**2+.self.z**2)**0.5"},{"prompt":"Sort a given array of integers in Python. arr = [1, 10, 5, 8, 7]","completion":"arr.sort() # arr is now [1, 5, 7, 8, 10]"},{"prompt":"The given code is a Python script that can be used to download and process data from the Brazilian Electoral Court (TSE) and store it in a PostgreSQL database. To use this script, follow these steps: 1. Install the required packages: \`bradata\`, \`luigi\`, \`pandas\`, \`pyyaml\` 2. Import the required modules: \`bradata.utils\`, \`bradata.connection\`, \`os\`, \`io\`, \`ZipFile\`, \`pandas\`, \`glob\`, \`yaml\`, \`shutil\`, \`luigi\`, \`luigi.contrib.postgres\` 3. Define a function \`_find_header\` that takes three arguments: \`data_type\`, \`year\`, and \`path\`. This function reads a YAML file from the given path and returns the header for the given data type and year. 4. Define a class \`Get_Headers\` that extends \`luigi.Task\`. This class downloads a CSV file containing the headers for the TSE data and saves it to a local file. 5. Define a class \`Get_Header_Relation\` that extends \`luigi.Task\`. This class downloads a YAML file containing the relation between the headers and the columns of the TSE data and saves it to a local file. 6. Define a class \`Download_Unzip\` that extends \`luigi.Task\`. This class downloads and unzips the TSE data for a given data type and year and saves it to a local directory. 7. Define a class \`Aggregat\` that extends \`luigi.Task\`. This class reads the TSE data files for a given data type and year, aggregates them into a single pandas DataFrame, and saves the result to a CSV file. 8. Define a class \`ToSQL\` that extends \`luigi.Task\`. This class reads the CSV file produced by \`Aggregat\`, connects to a PostgreSQL database, and inserts the data into a table. 9. Define a class \`Fetch\` that extends \`luigi.WrapperTask\`. This class takes a list of data types and years, and creates a \`ToSQL\` task for each combination of data type and year. 10. Call \`luigi.run()\` to execute the Luigi pipeline. To use this script, you need to modify the \`Fetch\` class to specify the data types and years you want to download. For example: \`\`\` if __name__ == __main__: luigi.run(['Fetch', 'localscheduler', 'datatypes', 'votacao_candidato_munzona', 'years', '2018']) \`\`\` This will download the TSE data for the \`votacao_candidato_munzona\` data type for the year 2018. You can specify multiple data types and years by separating them with commas.","completion":"import bradata.utils import bradata.connection import os import io from zipfile import ZipFile import pandas as pd import glob import yaml import shutil import luigi import luigi.contrib.postgres def _find_header(data_type, year, path): with open(path, 'r') as f: data = yaml.load(f) a = data[data_type]['columns'] final = min(list(a.keys())) for k in a.keys(): if int(year) >= k: final = k return str(a[final]) class Get_Headers(luigi.Task): def output(self): return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'config', 'headers.csv')) def run(self): conn = bradata.connection.Connection() result = conn.perform_request('https://raw.githubusercontent.com/labFGV/bradata/master/bradata/tse/headersTSE.csv') if result['status'] == 'ok': result = result['content'] else: print('File was not dowloaded') with self.output().open('w') as o_file: o_file.write(result) class Get_Header_Relation(luigi.Task): def output(self): return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'config', 'header_relation.yaml')) def run(self): conn = bradata.connection.Connection() result = conn.perform_request( 'https://raw.githubusercontent.com/labFGV/bradata/master/bradata/tse/header_relation.yaml') if result['status'] == 'ok': result = result['content'] else: raise Warning ('Header Relation was not dowloaded') with self.output().open('w') as o_file: o_file.write(result) class Download_Unzip(luigi.Task): \\"\\"\\" Download and unzip \\"\\"\\" year = luigi.Parameter() data_type = luigi.Parameter() def output(self): \\"\\"\\" :return: the target output for this task. :rtype: object (:py:class:\`luigi.target.Target\`) \\"\\"\\" return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'temp', '{}_{}'.format(self.data_type, self.year))) def requires(self): \\"\\"\\" * :py:class:\`~.Streams\` :return: list of object (:py:class:\`luigi.task.Task\`) \\"\\"\\" return Get_Header_Relation() def run(self): conn = bradata.connection.Connection() with self.input().open('r') as input_file: base_url = self.select_url(self.data_type) url = base_url + bradata.utils._treat_inputs(self.year) + '.zip' result = conn.perform_request(url, binary=True) if result['status'] == 'ok': result = result['content'] else: raise Exception ('File was not dowloaded') zipfile = ZipFile(io.BytesIO(result)) zipfile.extractall(self.output().path) def select_url(self, data_type): with open(self.input().path, 'r') as f: data = yaml.load(f) return data[data_type]['url'] class Aggregat(luigi.Task): \\"\\"\\" Get all states csv files aggregate it to a unique file with header \\"\\"\\" year = luigi.Parameter() data_type = luigi.Parameter() def requires(self): \\"\\"\\" \\"\\"\\" return {'download': Download_Unzip(data_type=self.data_type, year=self.year), 'headers': Get_Headers(), 'header_relation': Get_Header_Relation()} def output(self): \\"\\"\\" \\"\\"\\" return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', '{}_{}.csv'.format(self.data_type, self.year))) def run(self): headers = pd.read_csv(self.input()['headers'].path) files = glob.glob(self.input()['download'].path + \\"/*.txt\\".format(self.year)) header = _find_header(self.data_type, self.year, self.input()['header_relation'].path) df_list = [] for filename in sorted(files): df_list.append( pd.read_csv(filename, sep=';', names=headers[header].dropna().tolist(), encoding='latin1')) full_df = pd.concat(df_list) full_df.to_csv(self.output().path, index=False, encoding='utf-8') print('Completed! Access your file at', os.path.join(bradata.__download_dir__, 'tse', '{}_{}.csv'.format(self.data_type, self.year))) class ToSQl(luigi.Task): data_type = luigi.Parameter() year = luigi.Parameter() def requires(self): return Aggregat(data_type=self.data_type, year=self.year) def run(self): with open('bradata/tse/config_server.yaml', 'r') as f: server = yaml.load(f) host = server['host'] database = server['database'] user = server['user'] password = server['password'] schema = 'tse' table = '{}_{}'.format(self.data_type, self.year) from sqlalchemy import create_engine url = 'postgresql://{}:{}@{}/{}' url = url.format(user, password, host, database) engine = create_engine(url) headers = pd.read_csv(self.input().path) print('Inserting data do DB. It can take a while...') headers.to_sql(table, engine, schema=schema, if_exists='replace') print('The data is on your DB! Check schema {}, table {}'.format(schema, table)) with self.output().open('w') as f: f.write('') def output(self): return luigi.LocalTarget(os.path.join(bradata.__download_dir__, 'tse', 'temp', '{}_{}'.format(self.data_type, self.year), 'dumb.txt')) class Fetch(luigi.WrapperTask): data_types = luigi.Parameter() years = luigi.Parameter() def requires(self): data_types = self.string_to_list(self.data_types) years = self.string_to_list(self.years) yield [ToSQl(data_type=t, year=y) for t in data_types for y in years] def string_to_list(self, string): string = string.replace(\\"'\\",'').replace('[', '').replace(']','').replace(' ', '') return [s for s in string.split(',')] if __name__ == \\"__main__\\": luigi.run()"},{"prompt":"Create a Python script that takes a given text string and outputs the number of words in the string. Text string: “I love programming”","completion":"def wordCount(text): words = text.split(' ') return len(words) print(wordCount(\\"I love programming\\")) # 3"},{"prompt":"Suggest an algorithm in Python to sort an array of integers but maintain the order of similar elements. array = [3, 8, 5, 2, 6, 4, 8]","completion":"def sort_with_maintained_order(array): \\"\\"\\" Sort an array of integers but maintain the order of similar elements. Parameters ---------- array : List[int] The input array Returns ------- List[int] The sorted array \\"\\"\\" # Keep track of elements already seen seen_elements = [] # Loop over the list in the original order for element in array: # Check if element appears for the first time if element not in seen_elements: # Only continue if it is the first appearance seen_elements.append(element) # Find the positions of all elements with this value positions = [i for i, x in enumerate(array) if x == element] # Resolve the order for this element order = sorted([(i, array[i]) for i in positions], key=lambda x: x[1]) # Rearrange the elements in ascending order for i, (pos, val) in enumerate(order): array[pos] = i return array"},{"prompt":"Write a Python program to convert a given time in seconds to the equivalent time in hours, minutes, and seconds. time_in_seconds = 82836","completion":"def convert_to_hms(time_in_seconds): hours = int(time_in_seconds / 3600) minutes = int((time_in_seconds % 3600) / 60) seconds = int(time_in_seconds % 60) return hours, minutes, seconds"},{"prompt":"Convert a Python threading program to JavaScript. import threading def show_message(message): print(message) thread = threading.Thread(target=show_message, args=('Hello World!',)) thread.start()","completion":"const showMessage = (message) => console.log(message); const thread = new Worker('./thread.js'); thread.postMessage({message: 'Hello World!'}); // thread.js onmessage = (msg) => postMessage(showMessage(msg.data.message));"},{"prompt":"Create a Python program which prints the calendar for a given year. year = 2019","completion":"import calendar c = calendar.TextCalendar(calendar.SUNDAY) str = c.formatyear(2019, 2, 1, 1, 3) print (str)"},{"prompt":"Create a Python module to generate random passwords. The module should have an API with two parameters: length and strength. Not applicable","completion":"import random import string def generate_password(length, strength): \\"\\"\\"Generate a random password given a length and strength.\\"\\"\\" if strength == 'weak': return ''.join(random.choices(string.ascii_letters, k=length)) elif strength == 'medium': return ''.join(random.choices(string.ascii_letters + string.digits, k=length)) elif strength == 'strong': return ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length))"},{"prompt":"Generate a list of all possible subsets of a list of size n in Python list = [1,2,3]","completion":"def all_subsets(lst): res = [[]] for elem in lst: res += [subset + [elem] for subset in res] return res all_subsets([1,2,3])"},{"prompt":"Write a Python function to print a Pascal Triangle.","completion":"def printPascalTriangle(n): for line in range(1, n + 1): C = 1; # used to represent C(line, i) for i in range(1, line + 1): # The first value in a line is always 1 print(C, end = \\" \\"); C = int(C * (line - i) / i); # Calculating # the next value print(\\"\\"); # entered to move to the next line # Driver Code n = 5; printPascalTriangle(n); Output: 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1"},{"prompt":"Create a function in Python that will determine whether a given number is composite or prime. Number: 21","completion":"def isPrime(x): if x > 1: for i in range(2,x): if (x % i) == 0: return False else: return True else: return False num = 21 if(isPrime(num)) : print(num, \\"is a prime number\\") else : print(num, \\"is a composite number\\")"},{"prompt":"Construct a while loop in Python to iterate through a list of items. list_items = ['apple', 'banana', 'pear', 'strawberry']","completion":"list_items = ['apple', 'banana', 'pear', 'strawberry'] index = 0 while index < len(list_items): item = list_items[index] print(item) index += 1"},{"prompt":"You are given a 2D list that needs to be flattened into a single dimensional list. Write some python code to achieve this transformation. [[1, 2], [3, 4], [5, 6]]","completion":"def flatten_list(input_list): flattened_list = [] # traversing the 2d list for row in input_list: # traversing the row for column in row: flattened_list.append(column) return flattened_list"},{"prompt":"Create a data structure in Python to store employee name, salary and designation.","completion":"emp_dict = { 'name':[], 'salary':[], 'designation':[] };"},{"prompt":"Create a python class to track frequency of words.","completion":"class FrequencyTracker: def __init__(self): self.dictionary = {} def add_word(self,word): if word in self.dictionary: self.dictionary[word] += 1 else: self.dictionary[word] = 1 def get_frequency(self,word): if word in self.dictionary: return self.dictionary[word] else: return 0"},{"prompt":"Develop a neural network in Python to classify items into 3 categories.","completion":"# import libraries import numpy as np import tensorflow as tf # define the neural network model = tf.keras.Sequential([ tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(3, activation='softmax') ]) # compile the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) # fit the model model.fit(x_train, y_train, epochs=5) # evaluate the model loss, accuracy = model.evaluate(x_test, y_test) print(\\"Loss: {}, Accuracy: {}\\".format(loss, accuracy))"},{"prompt":"Create a Python program that uses NumPy to find the correlation coefficient between two variables. Not applicable","completion":"import numpy as np x = np.array([1,2,3,4,5]) y = np.array([2,3,4,5,6]) corr = np.corrcoef(x, y) print(corr[0][1]) # 0.98999999999999999"},{"prompt":"Create an optimized tail recursive function to reverse a given list in Python. [10, 20, 30, 40, 50]","completion":"def reverse_list_tail_recursive(arr, reversed_list=None): if reversed_list is None: reversed_list = [] if len(arr) == 0: return reversed_list reversed_list.append(arr.pop()) return reverse_list_tail_recursive(arr, reversed_list) if __name__ == \\"__main__\\": random_list = [10, 20, 30, 40, 50] reversed_list = reverse_list_tail_recursive(random_list) print(reversed_list)"},{"prompt":"Build a natural language processing (NLP) model in Python to classify movie reviews as either positive or negative.","completion":"import tensorflow as tf from tensorflow import keras from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences # Data positive_texts = [ \\"I really enjoyed the movie. It was really entertaining and I had a great time.\\", \\"I loved the movie. It was really funny and I can't wait to watch it again!\\", \\"The movie was great! I had a lot of fun and I would highly recommend it to others.\\" ] negative_texts = [ \\"I didn't like the movie at all. It was boring and I couldn't understand the plot.\\", \\"I didn't enjoy the movie. It was too slow and there weren't enough action scenes.\\", \\"I thought the movie was terrible. The plot was confusing and the acting was bad.\\" ] labels = [1, 1, 1, 0, 0, 0] # Preprocessing tokenizer = Tokenizer() tokenizer.fit_on_texts(positive_texts + negative_texts) data = tokenizer.texts_to_sequences(positive_texts + negative_texts) data = pad_sequences(data, maxlen=100) # Create the model model = keras.Sequential([ keras.layers.Embedding(len(tokenizer.word_index) + 1, 16), keras.layers.GlobalAveragePooling1D(), keras.layers.Dense(1, activation='sigmoid') ]) # Compile the model model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) # Train the model model.fit(data, labels, epochs=20) # Evaluate the model model.evaluate(data, labels)"},{"prompt":"Create a new program in Python that creates a list of prime numbers ranging from 2 to n. 15","completion":"\\"\\"\\" Create a list of prime numbers ranging from 2 to n. \\"\\"\\" def prime_list(n): prime_list = [] for num in range(2, n + 1): for prime in prime_list: if num % prime == 0: break else: prime_list.append(num) return prime_list if __name__ == '__main__': n = 15 print(prime_list(n))"},{"prompt":"Write a Python program to generate a random color palette of five colors. Not applicable","completion":"import random # List of ten random colors colors = [\\"#000000\\", \\"#FFFFFF\\", \\"#A52A2A\\", \\"#008080\\", \\"#DAA520\\", \\"#008000\\", \\"#FF00FF\\", \\"#808080\\", \\"#800000\\", \\"#808000\\", \\"#FFC0CB\\"] # Function that randomly selects five colors from the list def generate_colors(): random.shuffle(colors) palette = colors[:5] return palette # Generates and prints random color palette print (generate_colors())"},{"prompt":"Write a Python program which prints out all prime numbers between 1 and 100.","completion":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True for n in range(1, 101): if is_prime(n): print(n)"},{"prompt":"Generate code to create a REST API in Python that parses JSON and returns the values of a nested object. { data: { name: John Doe, age: 25 } }","completion":"@app.route('/parseJSON', methods=['POST']) def parse_json(): data = request.get_json() name = data['data']['name'] age = data['data']['age'] response = { \\"name\\": name, \\"age\\": age } return jsonify(response)"},{"prompt":"Compose a Python program to insert an element at a given position in an array. [1, 4, 5, 7], 2, 6","completion":"def insert_element(arr, position, element): arr.insert(position, element) print(insert_element([1, 4, 5, 7], 2, 6)) # Output: [1, 4, 6, 5, 7]"},{"prompt":"Construct an algorithm in Python to calculate the Levenshtein distance between two strings.","completion":"def levenshtein(s1, s2): l1 = len(s1) l2 = len(s2) matrix = [[0] * (l2 + 1) for _ in range(l1 + 1)] for i in range(l1 + 1): matrix[i][0] = i for j in range(l2 + 1): matrix[0][j] = j for i in range(1, l1 + 1): for j in range(1, l2 + 1): if s1[i - 1] == s2[j - 1]: cost = 0 else: cost = 1 matrix[i][j] = min( matrix[i - 1][j] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j - 1] + cost, ) return matrix[l1][l2]"},{"prompt":"Using Python, create a program that takes an equation as an input, and returns the value of the equation. equation = 2x+3=7","completion":"def solve_equation(equation): l, r = equation.split('=') left = 0 right = 0 sign = 1 cur_val = 0 for x in l: if x == '+': left += sign * cur_val sign = 1 cur_val = 0 elif x == '-': left += sign *cur_val sign = -1 cur_val = 0 elif x.isdigit(): cur_val = cur_val * 10 + int(x) left += sign * cur_val sign = 1 cur_val = 0 for x in r: if x == '+': right += sign * cur_val sign = 1 cur_val = 0 elif x == '-': right += sign *cur_val sign = -1 cur_val = 0 elif x.isdigit(): cur_val = cur_val*10 + int(x) right += sign * cur_val ans = (right - left) // 2 return ans print(solve_equation(\\"2x+3=7\\"))"},{"prompt":"Come up with a python script to retrieve the last occurrence of an element in a list Find the last occurence of 5 in [3, 4, 5, 5, 9, 6, 5]","completion":"def last_occurence(arr, x): last_index = -1 for i in range(len(arr)): if arr[i] == x: last_index = i return last_index print(last_occurence([3, 4, 5, 5, 9, 6, 5], 5))"},{"prompt":"Write a python program to get all possible subset combinations of a given set. [1,2,3]","completion":"def subset_combinations(arr): result = [[]] for ele in arr: for i in range(len(result)): tmp = list(result[i]) tmp.append(ele) result.append(tmp) return result if __name__ == '__main__': arr = [1,2,3] print(\\"All possible combinations:\\", subset_combinations(arr))"},{"prompt":"Generate a code in Python to style a paragraph using HTML tags.","completion":"def style_paragraph(text): return \\"<p style='text-align: justify; font-weight: bold; font-family: sans-serif;'>{}</p>\\".format(text)"},{"prompt":"Create a Python function that takes a list and returns a list of the unique elements of that list. myList = [1, 2, 3, 4, 5, 1, 2]","completion":"def uniqueList(myList): uniqueList = [] for el in myList: if el not in uniqueList: uniqueList.append(el) return uniqueList"},{"prompt":"Create an algorithm to optimize a search query in Python.","completion":"def optimize_search(query): # Clean the query string query = query.lower() query = query.strip() query = re.sub(r'[^ws]', '', query) # Tokenize the query tokens = nltk.word_tokenize(query) # Stem the tokens stemmer = nltk.stem.PorterStemmer() stemmed_tokens = [stemmer.stem(t) for t in tokens] # Join the stemmed tokens together processed_query = ' '.join(stemmed_tokens) return processed_query"},{"prompt":"Generate a Python code to print the common elements between two lists.","completion":"def find_common_elements(list1, list2): common_elements = [] for elem1 in list1: for elem2 in list2: if elem1 == elem2: common_elements.append(elem1) return common_elements"},{"prompt":"Write a python for loop to iterate over a list of numbers and compute the sum of all numbers greater than 0 [1, 5, 7, 10, 2]","completion":"sum = 18 # using a for-loop sum = 0 for num in [-1, 5, -7, 10, -2]: if num > 0: sum += num print(sum) Output: 18"},{"prompt":"Generate a function in Python to find all permutations of a given string.","completion":"def permutations(str): \\"\\"\\" This function returns a list of all possible permutations of a given string \\"\\"\\" # Base case if not str: return [''] # Create a result list to store the permutations result = [] # Iterate through all characters for i in range(len(str)): # Create a list of all characters except the current one rest = str[:i] + str[i+1:] # Generate all permutations of the remaining characters sub_permutes = permutations(rest) # Put the current character in each permutation and add it to the result # list for perm in sub_permutes: result.append(str[i] + perm) return result"},{"prompt":"Develop an AI model to play Connect 4.","completion":"import numpy as np import random from IPython.display import clear_output # Define a class for the board class Board(): def __init__(self): # self.board is a numpy array of shape (6,7) # It represents the board: 0 is an empty spot; # 1 is a spot taken by the AI; 2 is a spot taken by the player self.board = np.zeros((6,7), dtype=int) # Method for the AI to make a move # It will select a column with an empty spot randomly def AI_move(self): valid_moves = np.where(self.board[0] == 0)[0] # Gets empty columns move = valid_moves[np.random.randint(len(valid_moves))] # Picks one self.make_move(move,1) # Make the move self.print_board() # Print updated board # Method for the player to make a move def player_move(self): valid_moves = np.where(self.board[0] == 0)[0] # Gets empty columns move = int(input(\\"Choose a column from 0-6 to play: \\")) # Gets input if move not in valid_moves: self.player_move() # If the move is invalid, recur else: self.make_move(move,2) # Make the move self.print_board() # Print upated board # Method to make a move def make_move(self, move, player): row = np.where(self.board[:,move] == 0)[0][-1] # Finds next available spot self.board[row][move] = player # Make the move # Method to print the current board def print_board(self): clear_output() # Transform all 0,1,2 into string rep of board board_str = np.where(self.board==1, 'AI', np.where(self.board==2, 'Player', \\"\\")) print(board_str) # Define a function to play the game def play_game(): game = Board() # Create an instance of the class game.print_board() # Print initial board for i in range(6*7): # Loop for 42 (6x7) possible moves game.player_move() # Player's turn if game.board.any(): # Check for a winner game.AI_move() # AI turn if game.board.any(): # Check for a winner continue else: break else: break print(\\"Game Over!\\") # Print \\"Game Over\\" when game is finished # Run a game play_game()"},{"prompt":"Write Python code snippets that will convert comma separated values to a list of dictionaries. name,age Albert,22 Bob,24 Charles,20","completion":"csv_data = [ {'name': 'Albert', 'age': 22}, {'name': 'Bob', 'age': 24}, {'name': 'Charles', 'age': 20} ]"},{"prompt":"Write an efficient Python program to find the second largest element in an array. [14, 46, 47, 86, 92, 52, 48, 36, 66, 85]","completion":"def secondLargestElement(arr): # Sort the array in ascending order arr.sort() # Return the second last element return arr[-2] # Driver code arr = [14, 46, 47, 86, 92, 52, 48, 36, 66, 85] print(secondLargestElement(arr))"},{"prompt":"Compile a list of data types for Python","completion":"In Python, there are various data types such as strings, numbers (integer, float, complex), booleans, lists, tuples, dictionaries and sets."},{"prompt":"Create a class and a main function in Python to store the desired goal of a linear programming in two variables.","completion":"class LinearProgrammingGoal: def __init__(self, goal_variables): self.goal_variables = goal_variables def set_goal(self, goal_function): self.goal_function = goal_function def main(): goal_variables = [x, y] goal = LinearProgrammingGoal(goal_variables) #Assuming the goal function is of the form # max Z = 4x + 5y goal.set_goal(lambda x, y: 4 * x + 5 * y)"},{"prompt":"This code generates a dependency graph for frameworks in a given system library path. To use it, run the script with the path to the system library as the first argument, and optionally provide one or more framework names to determine what depends on them. The output will be a dot file representing the dependency graph.","completion":"#!/usr/bin/env python \\"\\"\\" The MIT License (MIT) Copyright (c) 2013 Andrew Wooster Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\"Software\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. \\"\\"\\" import os import subprocess import sys def escape_arg(argument): \\"\\"\\"Escapes an argument to a command line utility.\\"\\"\\" argument = argument.replace('', \\"\\").replace(\\"'\\", \\"'\\").replace('\\"', '\\"').replace(\\"!\\", \\"!\\").replace(\\"\`\\", \\"\`\\") return \\"\\"%s\\"\\" % argument def run_command(command, verbose=False): \\"\\"\\"Runs the command and returns the status and the output.\\"\\"\\" if verbose: sys.stderr.write(\\"Running: %sn\\" % command) p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE) stdin, stdout = (p.stdin, p.stdout) output = stdout.read() output = output.strip(\\"n\\") status = stdin.close() stdout.close() p.wait() return (p.returncode, output) DEPENDENCY_PRIVATE = 'Private' DEPENDENCY_PUBLIC = 'Public' DEPENDENCY_UNKNOWN = 'Unknown' def dependencies_for_resolved_framework_path(lib_base, framework_path, dependencies, dep_to_visibility, exclude_dylibs=True): def visibility_from_path(path): visibility = DEPENDENCY_UNKNOWN if '/PrivateFrameworks/' in path: visibility = DEPENDENCY_PRIVATE elif '/Frameworks/' in path: visibility = DEPENDENCY_PUBLIC return visibility real_framework_path = framework_path if not framework_path.startswith(lib_base): real_framework_path = lib_base + framework_path if not os.path.exists(real_framework_path): real_framework_path = framework_path if not os.path.exists(real_framework_path): print >> sys.stderr, \\"Unable to find framework:\\", real_framework_path return (path, filename) = os.path.split(real_framework_path) (base, ext) = os.path.splitext(filename) (status, output) = run_command(\\"otool -L %s\\" % escape_arg(real_framework_path)) lines = output.splitlines() dep_to_visibility[base] = visibility_from_path(real_framework_path) for line in lines: if not line.startswith(\\"t\\"): continue if not \\"(\\" in line: continue parts = line.split(\\"(\\") if not len(parts) > 1: continue f_path = parts[0].strip() (_, depname) = os.path.split(f_path) if depname == base: # Exclude self-dependency. continue visibility = visibility_from_path(f_path) if exclude_dylibs and f_path.endswith(\\"dylib\\"): continue should_recurse = (dep_to_visibility.get(depname) is None) dep_to_visibility[depname] = visibility dependencies.setdefault(base, []) if not depname in dependencies[base]: dependencies[base].append(depname) if should_recurse: dependencies_for_resolved_framework_path(lib_base, f_path, dependencies, dep_to_visibility, exclude_dylibs=exclude_dylibs) def dependencies_for_framework_path(framework_path, dependencies, dep_to_visibility, exclude_dylibs=True): (path, filename) = os.path.split(framework_path) (base, ext) = os.path.splitext(filename) lib_path = os.path.join(framework_path, base) lib_parts = lib_path.split(os.sep) lib_base_parts = [] for part in lib_parts: if part == \\"System\\": break lib_base_parts.append(part) lib_base = os.sep.join(lib_base_parts) return dependencies_for_resolved_framework_path(lib_base, lib_path, dependencies, dep_to_visibility, exclude_dylibs=exclude_dylibs) def dependencies_for_system_library_path(library_path): entries = os.listdir(library_path) if \\"/System/Library\\" not in library_path or \\"Frameworks\\" not in entries or \\"PrivateFrameworks\\" not in entries: print >> sys.stderr, \\"Path doesn't look like it points to the System/Library folder of an SDK.\\" sys.exit(1) dependencies = {} dep_to_visibility = {} def update_dependencies(dependencies, dep_to_visibility, library_path, f_path): framework_paths = os.listdir(os.path.join(library_path, f_path)) for framework_path in framework_paths: if not framework_path.endswith(\\".framework\\"): continue full_path = os.path.join(library_path, f_path, framework_path) dependencies_for_framework_path(full_path, dependencies, dep_to_visibility) update_dependencies(dependencies, dep_to_visibility, library_path, \\"Frameworks\\") update_dependencies(dependencies, dep_to_visibility, library_path, \\"PrivateFrameworks\\") return (dependencies, dep_to_visibility) def dot_for_dependencies(dependencies, dep_to_visibility, framework_depnames=None): l = [] l.append(\\"digraph G {\\") l.append(\\"tnode [shape=box];\\") def color_for_visibility(visibility): if visibility == DEPENDENCY_PRIVATE: return \\"#FFD1E0\\" elif visibility == DEPENDENCY_PUBLIC: return \\"#D1FFD2\\" else: return \\"#FFFFFF\\" if framework_depnames is None: nodes = {} seen_deps = [] i = 0 for framework_name, visibility in dep_to_visibility.iteritems(): if framework_name in seen_deps: continue nodename = \\"Node%d\\" % i i += 1 nodes[framework_name] = nodename seen_deps.append(framework_name) color = color_for_visibility(dep_to_visibility[framework_name]) l.append(\\"t%s [label=\\"%s\\", fillcolor=\\"%s\\"];\\" % (nodename, framework_name, color)) for framework_name, deps in dependencies.iteritems(): if nodes.get(framework_name) is None: print >> sys.stderr, \\"Unknown node\\", framework_name continue from_nodename = nodes[framework_name] if len(deps) == 0: l.append(\\"t\\"%s\\" -> {};\\" % framework_name) for lib_name in deps: to_nodename = nodes[lib_name] l.append(\\"t%s -> %s; // %s -> %s\\" % (from_nodename, to_nodename, framework_name, lib_name)) else: def gather_dependents(dependencies, framework_name, seen=None): \\"\\"\\"Get a list of all the frameworks wich depend on framework_name, recursively.\\"\\"\\" results = [] if seen is None: seen = [] for framework, deps in dependencies.iteritems(): if framework_name in deps: if framework in seen: continue seen.append(framework) # framework depends on framework_name results.append(framework_name) for result in gather_dependents(dependencies, framework, seen=seen): results.append(result) return list(set(results)) frameworks_to_print = [] for framework_depname in framework_depnames: for f in gather_dependents(dependencies, framework_depname): frameworks_to_print.append(f) frameworks_to_print = list(set(frameworks_to_print)) nodes = {} seen_deps = [] i = 0 for framework_name, visibility in dep_to_visibility.iteritems(): if framework_name in seen_deps: continue if framework_name not in frameworks_to_print: continue nodename = \\"Node%d\\" % i i += 1 nodes[framework_name] = nodename seen_deps.append(framework_name) color = color_for_visibility(dep_to_visibility[framework_name]) l.append(\\"t%s [label=\\"%s\\", style=filled, fillcolor=\\"%s\\"];\\" % (nodename, framework_name, color)) for framework_name, deps in dependencies.iteritems(): if framework_name in frameworks_to_print: if nodes.get(framework_name) is None: print >> sys.stderr, \\"Unknown node\\", framework_name continue from_nodename = nodes[framework_name] if len(deps) == 0: l.append(\\"t\\"%s\\" -> {};\\" % framework_name) for lib_name in deps: if lib_name in frameworks_to_print: to_nodename = nodes[lib_name] l.append(\\"t%s -> %s; // %s -> %s\\" % (from_nodename, to_nodename, framework_name, lib_name)) l.append(\\"}n\\") return \\"n\\".join(l) def main(library_path, framework_depnames=None): library_path = os.path.expanduser(library_path) (dependencies, dep_to_visibility) = dependencies_for_system_library_path(library_path) dot_output = dot_for_dependencies(dependencies, dep_to_visibility, framework_depnames=framework_depnames) print >> sys.stdout, dot_output if __name__ == \\"__main__\\": if len(sys.argv) < 2: print >> sys.stderr, \\"Usage: %s [SDK System Library Path] [framework name ...]\\" print >> sys.stderr, \\" Where the library path is like /System/Library\\" print >> sys.stderr, \\" Where the framework name (optional) is one to determine what depends on it\\" sys.exit(1) framework_depnames = None if len(sys.argv) > 2: framework_depnames = sys.argv[2:] main(sys.argv[1], framework_depnames=framework_depnames)"},{"prompt":"Create a basic Python script to scrape a web page and retrieve all the headings and anchor tags. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = \\"http://example.com\\" html_doc = requests.get(url).text soup = BeautifulSoup(html_doc, 'html.parser') headings = soup.find_all('h1') anchors = soup.find_all('a') for heading in headings: print(heading.text) for anchor in anchors: print(anchor.get('href'))"},{"prompt":"Create a Python program that computes the average of the numbers in the list [3, 5, 7, 9]. [3, 5, 7, 9]","completion":"def get_average(numbers): sum = 0 for num in numbers: sum = sum + num return sum / len(numbers) numbers = [3, 5, 7, 9] average = get_average(numbers) print(average) # Outputs 6.5"},{"prompt":"Create a program in Python that takes a text input and checks if it is a palindrome Racecar","completion":"def is_palindrome(text): # Reverse the string to check if the reversed # string is equal to original string reversed_text = text[::-1] # Check if the reversed string is equal to original string if (text == reversed_text): return True return False # Driver Code if __name__ == '__main__': text = 'Racecar' result = is_palindrome(text) if (result): print(\\"Yes\\") else: print(\\"No\\")"},{"prompt":"Create a Python program to calculate the Mean Squared Error (MSE) of a given dataset. x = [1,2,3,4,5] y = [0,2,3,3,5]","completion":"mse = (sum([(x[i]-y[i])**2 for i in range(len(x))]))/len(x) print(mse)"},{"prompt":"Write a Python program to edit this list of lists and remove any empty lists from the beginning, middle and end of the list. [[], [2, 3], [], [4, 5], [], [6]]","completion":"def remove_empty_lists(lst): new_lst = [] for li in lst: if li: new_lst.append(li) return new_lst # call the function modified_list = remove_empty_lists([[], [2, 3], [], [4, 5], [], [6]]) print(modified_list) # Output: [[2, 3], [4, 5], [6]]"},{"prompt":"Generate a HTML page with 3 clickable buttons that calls a Python script.","completion":"<html> <head> <title>Python Script Page</title> </head> <body> <h1>Click the buttons below to call a Python Script:</h1> <form name=\\"form1\\"> <button type=\\"button\\" onclick=\\"myFunction('script1.py')\\">Script 1</button> <button type=\\"button\\" onclick=\\"myFunction('script2.py')\\">Script 2</button> <button type=\\"button\\" onclick=\\"myFunction('script3.py')\\">Script 3</button> </form> <script type=\\"text/javascript\\"> function myFunction(scriptName) { // Call Python Script alert('Calling Python Script: ' + scriptName); } <\/script> </body> </html>"},{"prompt":"Create a Python program to encode text using the Caesar cipher given an offset n.","completion":"def _encode(char, offset): char_code = ord(char) new_char_code = char_code + offset return chr(new_char_code) def encode_string(string, offset): encoded_string = \\"\\" for char in string: encoded_string += _encode(char, offset) return encoded_string"},{"prompt":"Create a Django model for a Category with a name, slug, and description field, a Tag with a name and slug field, and an Article with a title, slug, content, status, category, tags, views, publish_date, and created_date field. The Article model should also have a method to check if it was published recently.","completion":"from django.db import models import datetime from django.utils import timezone from django.utils.encoding import python_2_unicode_compatible class Category(models.Model): name = models.CharField(max_length=100) slug = models.SlugField(max_length=100, unique=True, verbose_name='slug') description = models.TextField(max_length=4096) def __str__(self): return '%s' % (self.name) class Tag(models.Model): name = models.CharField(max_length=100, unique=True) slug = models.SlugField(max_length=100, unique=True, verbose_name='slug') def __str__(self): return '%s' % (self.name) @python_2_unicode_compatible class Article(models.Model): ARTICLE_STATUS = ( ('D', 'Not Reviewed'), ('P', 'Published'), ('E', 'Expired'), ) title = models.CharField(max_length=100, unique=True) slug = models.SlugField(max_length=100, unique=True, verbose_name='slug') status = models.IntegerField(default=0) content = models.TextField() status = models.CharField(max_length=1, choices=ARTICLE_STATUS, default='D') category = models.ForeignKey(Category, verbose_name=\\"the related category\\") tags = models.ManyToManyField(Tag, verbose_name=\\"the related tags\\", related_name=\\"keyword_set\\", blank=True) views = models.IntegerField(default=0) publish_date = models.DateTimeField(auto_now=True, editable=False, help_text=\\"Please use the following format: <em>YYYY-MM-DD</em>.\\") created_date = models.DateTimeField(auto_now_add=True, editable=False) def was_published_recently(self): return self.publish_date >= timezone.now() - datetime.timedelta(days=1) was_published_recently.admin_order_field = 'publish_date' was_published_recently.boolean = True was_published_recently.short_description = 'Published recently?' def __str__(self): return '%s' % (self.title)"},{"prompt":"Create a program in Python to classify the age of a human using Machine Learning. data = [[25, 5, 4], [27, 8, 4], [25, 6, 2], [30, 6.5, 5], [24, 4, 2], [21, 1, 1], [35, 9, 3], [18, 3, 3]]","completion":"# Load data data = np.array(data) # Labels labels = np.array([0, 1, 0, 1, 0, 0, 1, 0]) # Create training and testing data X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=0) # Train the model clf = SVC() clf.fit(X_train, y_train) # Test the model y_pred = clf.predict(X_test) # Print accuracy print(\\"Accuracy: {}\\".format(accuracy_score(y_test, y_pred)))"},{"prompt":"Use a random forest model in Python to predict the sale price of a house. Example data: Size: 500, Rooms: 4","completion":"import pandas as pd from sklearn.ensemble import RandomForestRegressor # Create data = {'Size': [500], 'Rooms': [4]} df = pd.DataFrame(data) # Train X = df[['Size','Rooms']] Y = df['Price'] regressor = RandomForestRegressor(n_estimators = 10, random_state = 0) regressor.fit(X, Y) # Predict regressor.predict([[500,4]]) # Predicted price: 1716.275"},{"prompt":"Create a function in Python to check if a number is prime.","completion":"def check_prime(n): if n < 2: return False else: for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True"},{"prompt":"Write a Python program to convert a string of lower case characters to upper case characters. Hello World","completion":"string = \\"Hello World\\" # convert to upper case string = string.upper() # print result print(string) # prints \\"HELLO WORLD\\""},{"prompt":"The given code is a Python module for reading and verifying configuration files for the OpenNSA network service. To use this module, import it into your Python code and call the \`readConfig\` function with the path to your configuration file as an argument. The function will return a \`configparser.SafeConfigParser\` object containing the configuration data. To verify the configuration, call the \`readVerifyConfig\` function with the \`SafeConfigParser\` object as an argument. The function will return a dictionary containing the verified configuration data.","completion":"\\"\\"\\" Configuration reader and defaults. Author: Henrik Thostrup Jensen <htj@nordu.net> Copyright: NORDUnet (2011) \\"\\"\\" import os import configparser from opennsa import constants as cnt # defaults DEFAULT_CONFIG_FILE = '/etc/opennsa.conf' DEFAULT_LOG_FILE = '/var/log/opennsa.log' DEFAULT_TLS = 'true' DEFAULT_TOPOLOGY_FILE = '/usr/local/share/nsi/topology.owl' DEFAULT_TCP_PORT = 9080 DEFAULT_TLS_PORT = 9443 DEFAULT_VERIFY = True DEFAULT_CERTIFICATE_DIR = '/etc/ssl/certs' # This will work on most mordern linux distros # config blocks and options BLOCK_SERVICE = 'service' BLOCK_DUD = 'dud' BLOCK_JUNIPER_EX = 'juniperex' BLOCK_JUNIPER_VPLS = 'junipervpls' BLOCK_FORCE10 = 'force10' BLOCK_BROCADE = 'brocade' BLOCK_NCSVPN = 'ncsvpn' BLOCK_PICA8OVS = 'pica8ovs' BLOCK_JUNOSMX = 'junosmx' BLOCK_JUNOSEX = 'junosex' BLOCK_JUNOSSPACE = 'junosspace' BLOCK_OESS = 'oess' BLOCK_CUSTOM_BACKEND = 'custombackend' # service block DOMAIN = 'domain' # mandatory NETWORK_NAME = 'network' # legacy, used to be mandatory LOG_FILE = 'logfile' HOST = 'host' PORT = 'port' TLS = 'tls' REST = 'rest' NRM_MAP_FILE = 'nrmmap' PEERS = 'peers' POLICY = 'policy' PLUGIN = 'plugin' SERVICE_ID_START = 'serviceid_start' # database DATABASE = 'database' # mandatory DATABASE_USER = 'dbuser' # mandatory DATABASE_PASSWORD = 'dbpassword' # can be none (os auth) DATABASE_HOST = 'dbhost' # can be none (local db) # tls KEY = 'key' # mandatory, if tls is set CERTIFICATE = 'certificate' # mandatory, if tls is set CERTIFICATE_DIR = 'certdir' # mandatory (but dir can be empty) VERIFY_CERT = 'verify' ALLOWED_HOSTS = 'allowedhosts' # comma seperated list # generic stuff _SSH_HOST = 'host' _SSH_PORT = 'port' _SSH_HOST_FINGERPRINT = 'fingerprint' _SSH_USER = 'user' _SSH_PASSWORD = 'password' _SSH_PUBLIC_KEY = 'publickey' _SSH_PRIVATE_KEY = 'privatekey' AS_NUMBER = 'asnumber' # TODO: Don't do backend specifics for everything, it causes confusion, and doesn't really solve anything # juniper block - same for mx / ex backends JUNIPER_HOST = _SSH_HOST JUNIPER_PORT = _SSH_PORT JUNIPER_HOST_FINGERPRINT = _SSH_HOST_FINGERPRINT JUNIPER_USER = _SSH_USER JUNIPER_SSH_PUBLIC_KEY = _SSH_PUBLIC_KEY JUNIPER_SSH_PRIVATE_KEY = _SSH_PRIVATE_KEY # force10 block FORCE10_HOST = _SSH_HOST FORCE10_PORT = _SSH_PORT FORCE10_USER = _SSH_USER FORCE10_PASSWORD = _SSH_PASSWORD FORCE10_HOST_FINGERPRINT = _SSH_HOST_FINGERPRINT FORCE10_SSH_PUBLIC_KEY = _SSH_PUBLIC_KEY FORCE10_SSH_PRIVATE_KEY = _SSH_PRIVATE_KEY # Brocade block BROCADE_HOST = _SSH_HOST BROCADE_PORT = _SSH_PORT BROCADE_HOST_FINGERPRINT = _SSH_HOST_FINGERPRINT BROCADE_USER = _SSH_USER BROCADE_SSH_PUBLIC_KEY = _SSH_PUBLIC_KEY BROCADE_SSH_PRIVATE_KEY = _SSH_PRIVATE_KEY BROCADE_ENABLE_PASSWORD = 'enablepassword' # Pica8 OVS PICA8OVS_HOST = _SSH_HOST PICA8OVS_PORT = _SSH_PORT PICA8OVS_HOST_FINGERPRINT = _SSH_HOST_FINGERPRINT PICA8OVS_USER = _SSH_USER PICA8OVS_SSH_PUBLIC_KEY = _SSH_PUBLIC_KEY PICA8OVS_SSH_PRIVATE_KEY = _SSH_PRIVATE_KEY PICA8OVS_DB_IP = 'dbip' # NCS VPN Backend NCS_SERVICES_URL = 'url' NCS_USER = 'user' NCS_PASSWORD = 'password' # JUNOS block JUNOS_HOST = _SSH_HOST JUNOS_PORT = _SSH_PORT JUNOS_HOST_FINGERPRINT = _SSH_HOST_FINGERPRINT JUNOS_USER = _SSH_USER JUNOS_SSH_PUBLIC_KEY = _SSH_PUBLIC_KEY JUNOS_SSH_PRIVATE_KEY = _SSH_PRIVATE_KEY JUNOS_ROUTERS = 'routers' #Junosspace backend SPACE_USER = 'space_user' SPACE_PASSWORD = 'space_password' SPACE_API_URL = 'space_api_url' SPACE_ROUTERS = 'routers' SPACE_CONFIGLET_ACTIVATE_LOCAL = 'configlet_activate_local' SPACE_CONFIGLET_ACTIVATE_REMOTE = 'configlet_activate_remote' SPACE_CONFIGLET_DEACTIVATE_LOCAL = 'configlet_deactivate_local' SPACE_CONFIGLET_DEACTIVATE_REMOTE = 'configlet_deactivate_remote' # OESS OESS_URL = 'url' OESS_USER = 'username' OESS_PASSWORD = 'password' OESS_WORKGROUP = 'workgroup' class ConfigurationError(Exception): \\"\\"\\" Raised in case of invalid/inconsistent configuration. \\"\\"\\" class Peer(object): def __init__(self, url, cost): self.url = url self.cost = cost def readConfig(filename): cfg = configparser.SafeConfigParser() cfg.add_section(BLOCK_SERVICE) cfg.read( [ filename ] ) return cfg def readVerifyConfig(cfg): \\"\\"\\" Read a config and verify that things are correct. Will also fill in default values where applicable. This is supposed to be used during application creation (before service start) to ensure that simple configuration errors do not pop up efter daemonization. Returns a \\"verified\\" config, which is a dictionary. \\"\\"\\" vc = {} # Check for deprecated / old invalid stuff try: cfg.get(BLOCK_SERVICE, NRM_MAP_FILE) raise ConfigurationError('NRM Map file should be specified under backend') except configparser.NoOptionError: pass # check / extract try: vc[DOMAIN] = cfg.get(BLOCK_SERVICE, DOMAIN) except configparser.NoOptionError: raise ConfigurationError('No domain name specified in configuration file (mandatory, see docs/migration)') try: cfg.get(BLOCK_SERVICE, NETWORK_NAME) raise ConfigurationError('Network name no longer used, use domain (see docs/migration)') except configparser.NoOptionError: pass try: vc[LOG_FILE] = cfg.get(BLOCK_SERVICE, LOG_FILE) except configparser.NoOptionError: vc[LOG_FILE] = DEFAULT_LOG_FILE try: nrm_map_file = cfg.get(BLOCK_SERVICE, NRM_MAP_FILE) if not os.path.exists(nrm_map_file): raise ConfigurationError('Specified NRM mapping file does not exist (%s)' % nrm_map_file) vc[NRM_MAP_FILE] = nrm_map_file except configparser.NoOptionError: vc[NRM_MAP_FILE] = None try: vc[REST] = cfg.getboolean(BLOCK_SERVICE, REST) except configparser.NoOptionError: vc[REST] = False try: peers_raw = cfg.get(BLOCK_SERVICE, PEERS) vc[PEERS] = [ Peer(purl.strip(), 1) for purl in peers_raw.split('n') ] except configparser.NoOptionError: vc[PEERS] = None try: vc[HOST] = cfg.get(BLOCK_SERVICE, HOST) except configparser.NoOptionError: vc[HOST] = None try: vc[TLS] = cfg.getboolean(BLOCK_SERVICE, TLS) except configparser.NoOptionError: vc[TLS] = DEFAULT_TLS try: vc[PORT] = cfg.getint(BLOCK_SERVICE, PORT) except configparser.NoOptionError: vc[PORT] = DEFAULT_TLS_PORT if vc[TLS] else DEFAULT_TCP_PORT try: policies = cfg.get(BLOCK_SERVICE, POLICY).split(',') for policy in policies: if not policy in (cnt.REQUIRE_USER, cnt.REQUIRE_TRACE, cnt.AGGREGATOR, cnt.ALLOW_HAIRPIN): raise ConfigurationError('Invalid policy: %s' % policy) vc[POLICY] = policies except configparser.NoOptionError: vc[POLICY] = [] try: vc[PLUGIN] = cfg.get(BLOCK_SERVICE, PLUGIN) except configparser.NoOptionError: vc[PLUGIN] = None # database try: vc[DATABASE] = cfg.get(BLOCK_SERVICE, DATABASE) except configparser.NoOptionError: raise ConfigurationError('No database specified in configuration file (mandatory)') try: vc[DATABASE_USER] = cfg.get(BLOCK_SERVICE, DATABASE_USER) except configparser.NoOptionError: raise ConfigurationError('No database user specified in configuration file (mandatory)') try: vc[DATABASE_PASSWORD] = cfg.get(BLOCK_SERVICE, DATABASE_PASSWORD) except configparser.NoOptionError: vc[DATABASE_PASSWORD] = None try: vc[DATABASE_HOST] = cfg.get(BLOCK_SERVICE, DATABASE_HOST) except configparser.NoOptionError: vc[DATABASE_HOST] = None try: vc[SERVICE_ID_START] = cfg.get(BLOCK_SERVICE, SERVICE_ID_START) except configparser.NoOptionError: vc[SERVICE_ID_START] = None # we always extract certdir and verify as we need that for performing https requests try: certdir = cfg.get(BLOCK_SERVICE, CERTIFICATE_DIR) if not os.path.exists(certdir): raise ConfigurationError('Specified certdir does not exist (%s)' % certdir) vc[CERTIFICATE_DIR] = certdir except configparser.NoOptionError: vc[CERTIFICATE_DIR] = DEFAULT_CERTIFICATE_DIR try: vc[VERIFY_CERT] = cfg.getboolean(BLOCK_SERVICE, VERIFY_CERT) except configparser.NoOptionError: vc[VERIFY_CERT] = DEFAULT_VERIFY # tls if vc[TLS]: try: hostkey = cfg.get(BLOCK_SERVICE, KEY) hostcert = cfg.get(BLOCK_SERVICE, CERTIFICATE) if not os.path.exists(hostkey): raise ConfigurationError('Specified hostkey does not exist (%s)' % hostkey) if not os.path.exists(hostcert): raise ConfigurationError('Specified hostcert does not exist (%s)' % hostcert) vc[KEY] = hostkey vc[CERTIFICATE] = hostcert try: allowed_hosts_cfg = cfg.get(BLOCK_SERVICE, ALLOWED_HOSTS) vc[ALLOWED_HOSTS] = allowed_hosts_cfg.split(',') except: pass except configparser.NoOptionError as e: # Not enough options for configuring tls context raise ConfigurationError('Missing TLS option: %s' % str(e)) # backends backends = {} for section in cfg.sections(): if section == 'service': continue if ':' in section: backend_type, name = section.split(':',2) else: backend_type = section name = '' if name in backends: raise ConfigurationError('Can only have one backend named \\"%s\\"' % name) if backend_type in (BLOCK_DUD, BLOCK_JUNIPER_EX, BLOCK_JUNIPER_VPLS, BLOCK_JUNOSMX, BLOCK_FORCE10, BLOCK_BROCADE, BLOCK_NCSVPN, BLOCK_PICA8OVS, BLOCK_OESS, BLOCK_JUNOSSPACE, BLOCK_JUNOSEX, BLOCK_CUSTOM_BACKEND, 'asyncfail'): backend_conf = dict( cfg.items(section) ) backend_conf['_backend_type'] = backend_type backends[name] = backend_conf vc['backend'] = backends return vc"},{"prompt":"Develop an efficient and optimized python code to implement the following task Given a single linked list, reverse the nodes of the list.","completion":"class Node(): # Constructor to initialize the node object def __init__(self, data): self.data = data self.next = None def reverse(head): if head is None: return prev = None curr = head while curr != None: # Store the next node next = curr.next # Reverse the current node curr.next = prev # Move to previous node prev = curr #Move the current node curr = next #Assign the reversed list to head head = prev return head"},{"prompt":"Write a Python function to sort the following list of numbers with bubble sort algorithm. [5, 4, 3, 2, 1]","completion":"def bubble_sort(list): n = len(list) for i in range(n-1): for j in range(0, n-i-1): if list[j] > list[j+1] : list[j], list[j+1] = list[j+1], list[j] return list # Sample list list = [5, 4, 3, 2, 1] # Function Call bubble_sort(list)"},{"prompt":"Create a Python program that extracts the minimum value from a dictionary. {key1: 3, key2: 5, key3: 1}","completion":"def get_min_value(dct): min_value = float('inf') for key, val in dct.items(): if val < min_value: min_value = val return min_value dct = {\\"key1\\": 3, \\"key2\\": 5, \\"key3\\": 1} print(get_min_value(dct))"},{"prompt":"Generate a Python program that creates a GUI window with two buttons: one to change the window background to red and the other to change the window background to green.","completion":"#Import the necessary modules import tkinter as tk from tkinter import * #Create the main window window = tk.Tk() #Create a window content def change_background_to_red(): window.configure(background='red') def change_background_to_green(): window.configure(background='green') #Creating the button red_btn = Button(text=\\"Red\\", command=change_background_to_red) green_btn = Button(text=\\"Green\\", command=change_background_to_green) #Adding the button to the window red_btn.pack() green_btn.pack() #Run the mainloop window.mainloop()"},{"prompt":"Create a Python script to scrape all the product names and prices from a website given its URL. { url: https://example.com }","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com' # Fetch the html page page = requests.get(url) # Parse the HTML page soup = BeautifulSoup(page.content, 'html.parser') # Extract the product names and prices product_names = soup.find_all('div', class_='name') product_prices = soup.find_all('div', class_='price') # Print the results for i in range(len(product_names)): print(product_names[i].text, product_prices[i].text)"},{"prompt":"Write a Python program to find the number of occurrences of a given element in an array. list = [1, 2, 5, 4, 1, 5]","completion":"def countOccurrences(list, element): count = 0 for i in range(len(list)): if list[i] == element: count += 1 return count if __name__ == '__main__': list = [1, 2, 5, 4, 1, 5] element = 5 print(countOccurrences(list, element))"},{"prompt":"Can you build an algorithm in Python to check whether a given number is a prime or not? 7","completion":"def is_prime(num): if num < 2: return False for i in range(2, num): if num % i == 0: return False return True print(is_prime(7))"},{"prompt":"Create a web scraper in Python that can scrape a website for a list of headlines. The scraper should be able to extract the headline text, the URL of the headline page, and the date the headline was published. Not applicable","completion":"import requests from bs4 import BeautifulSoup # define url of page url = 'http://example.com/headlines' # make request and parse html response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') # get headlines headlines = soup.find_all(class_='headline') # iterate over each headline headlines_list = [] for headline in headlines: # get headline text headline_text = headline.find('h3').text # get headline page url headline_page_url = headline.find('a')['href'] # get date headline_date = headline.find(class_='date') # add to list headlines_list.append((headline_text, headline_page_url, headline_date)) print(headlines_list)"},{"prompt":"Suggest an algorithm for sorting a given list using Python. [1, 6, 4, 7, 9, 2, 5]","completion":"def sort_list(list): \\"\\"\\"Sort the list using selection sort algorithm.\\"\\"\\" # Get the length of the list n = len(list) # Iterate over the list for i in range(n): # Find the minimum element in the list min_idx = i for j in range(i+1, n): if list[min_idx] > list[j]: min_idx = j # Swap the minimum element with the current element list[i], list[min_idx] = list[min_idx], list[i] return list # Call the function with an example list example_list = [1, 6, 4, 7, 9, 2, 5] result = sort_list(example_list) print(result)"},{"prompt":"Write a Python program to find the most popular item purchased by customers. Table = customers | customer_id | month | city | item | amount | |||||| | 1 | 1 | LA | pen | 500 | | 2 | 2 | NY | pencil | 600 | | 3 | 3 | LA | pen | 700 | | 4 | 4 | SF | eraser | 800 | | 5 | 5 | LA | notebook| 900 |","completion":"from collections import Counter customers = [ {'customer_id': 1, 'month': 1, 'city': 'LA', 'item': 'pen', 'amount': 500}, {'customer_id': 2, 'month': 2, 'city': 'NY', 'item': 'pencil', 'amount': 600}, {'customer_id': 3, 'month': 3, 'city': 'LA', 'item': 'pen', 'amount': 700}, {'customer_id': 4, 'month': 4, 'city': 'SF', 'item': 'eraser', 'amount': 800}, {'customer_id': 5, 'month': 5, 'city': 'LA', 'item': 'notebook', 'amount': 900}, ] items = [customer['item'] for customer in customers] pop_item = Counter(items).most_common(1)[0] print('Most Popular Item:', pop_item[0])"},{"prompt":"Create a Config class that can read and modify configuration files. The class should have methods for adding and removing variables, updating variable values, and getting the configuration output. The class should also have attributes for storing the current file, the notebook, and the open dialogue. The class should be initialized with the current directory, the configuration file, the notebook, and the open dialogue.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- # # config.py # # Copyright 2016 Andrei Tumbar <atuser@Kronos> # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, # MA 02110-1301, USA. # # import os, sys import platform import gi gi.require_version('Gtk', '3.0') gi.require_version('GtkSource', '3.0') from gi.repository import Gtk, GObject, GLib, GtkSource, Pango, Gdk os.chdir ( os.path.dirname ( os.path.realpath ( __file__ ) ) ) import filetab, filemanager, builderset, project, configitem, configfile class Config: config_file_relative = \\"\\" config_file_full = \\"\\" __file_lines = None __file = None notebook = None open_dialogue = None var_dict = {} var_list = [] list_vars = [ \\"output_files\\", \\"input_files\\" ] conf_vars = [ \\"title\\", \\"css\\", \\"js\\" ] variables_box = Gtk.Box ( ) configitems = [] rows = [] row_raw = [] current_file = {} current = None def __init__ ( self, curr_dir, config, notebook, open_dialogue ): self.open_dialogue = open_dialogue self.dir = curr_dir self.notebook = notebook self.new_config ( config ) def remove_config ( self ): self.input.destroy ( ) self.output.destroy ( ) self.treeview.destroy ( ) self.var_store = None self.var_rend = None self.val_rend = None self.treeview.destroy ( ) self.var_dict = {} self.var_list = [] self.list_vars = [ \\"output_files\\", \\"input_files\\" ] self.conf_vars = [ \\"title\\", \\"css\\", \\"js\\" ] self.variables_box = Gtk.Box ( ) self.configitems = [] self.current_file = {} self.current = None def new_config ( self, config ): self.config_file_relative = config self.config_file_full = self.get_path ( config ) self.__file_lines = open ( self.config_file_relative, \\"r\\" ).readlines ( ) self.input = configitem.ConfigItem ( ) self.output = configitem.ConfigItem ( ) self.input.connect ( \\"new_config\\", self.get_new ) self.output.connect ( \\"new_config\\", self.get_new ) self.input.connect ( \\"remove_item\\", self.get_remove ) self.output.connect ( \\"remove_item\\", self.get_remove ) for l in self.__file_lines: if l [ 0 ] == \\"#\\" or l == \\"\\" or l == \\"n\\": continue var, val = l.split ( \\"=\\" ) # Remove the whitespace var = var.strip ( ) val = val.strip ( ) self.var_dict [ var ] = val self.var_list.append ( var ) if var in self.list_vars: self.var_dict [ var ] = val.split ( \\",\\" ) for var in self.list_vars: if not var: continue buff = self.var_dict [ var ] exec ( \\"self.%s.set_notebook ( self.notebook )\\" % var.replace ( \\"_files\\", \\"\\" ) ) exec ( \\"self.%s.set_dialogue ( self.open_dialogue )\\" % var.replace ( \\"_files\\", \\"\\" ) ) exec ( \\"self.%s.add_items ( buff )\\" % var.replace ( \\"_files\\", \\"\\" ) ) self.__init_vars__ ( ) for var in self.var_list: if ( not isinstance ( self.var_dict [ var ], list ) ): self.add_var ( var ) def get_remove (self, buff_cfg, buff_item): curr = \\"output\\" if buff_cfg == self.input: curr = \\"input\\" self.var_dict [ curr + \\"_files\\" ].pop ( self.var_dict [ curr + \\"_files\\" ].index (buff_item.full_path)) def get_path ( self, _in ): if self.dir [ -1 ] == \\"/\\": return self.dir + _in return self.dir + \\"/\\" + _in def get_new ( self, a, confitem ): if ( confitem == self.input ): self.current = \\"input\\" else: self.current = \\"output\\" def add ( self, __files ): if platform.system () == \\"Windows\\": __files[0] = __files [0][1:] if ( self.current == \\"input\\" ): self.input.add_items ( __files, remove=False ) self.var_dict [\\"input_files\\"].append (__files[0]) else: self.output.add_items ( __files, remove=False ) self.var_dict [\\"output_files\\"].append (__files[0]) def update_file ( self, var, val ): self.current_file [ var ] = val def __init_vars__ ( self ): self.var_store = Gtk.ListStore ( str, str ) self.treeview = Gtk.TreeView.new_with_model ( self.var_store ) self.var_rend = Gtk.CellRendererText ( ) self.val_rend = Gtk.CellRendererText ( ) self.val_rend.set_property('editable', True) column_1 = Gtk.TreeViewColumn ( \\"Variables\\", self.var_rend, text=0 ) column_2 = Gtk.TreeViewColumn ( \\"Value\\", self.val_rend, text=1 ) self.treeview.append_column ( column_1 ) self.treeview.append_column ( column_2 ) self.val_rend.connect ( \\"edited\\", self.vars_changes ) def vars_changes ( self, renderer, path, new_text ): self.var_store.set ( self.var_store.get_iter ( path ), 1, new_text ) self.var_dict [ self.var_store.get_value ( self.var_store.get_iter ( path ), 0 ) ] = new_text def add_var ( self, var, add_to_list=False ): if ( add_to_list ): self.var_list.append ( var ) self.var_dict [ var ] = \\"\\" self.var_store.append ( [ var, self.var_dict [ var ] ] ) def open_file ( self, path ): self.__file_lines = open ( path, \\"r\\" ).readlines ( ) self.__file = open ( path, \\"w\\" ).readlines ( ) def remove_var ( self ): model, treeiter = self.treeview.get_selection ( ).get_selected ( ) self.var_dict.pop ( model [ treeiter ] [ 0 ], None ) self.var_list.pop ( self.var_list.index ( model [ treeiter ] [ 0 ] ) ) print (self.var_list) self.var_store.remove ( treeiter ) def get_conf_out ( self ): out_buff = [] for x in self.var_list: buff = self.var_dict [ x ] if ( isinstance ( self.var_dict [ x ], list ) ): buff = \\",\\".join ( self.var_dict [ x ] ) buff += \\",\\" out_buff.append ( x + \\" = \\" + buff ) return out_buff"},{"prompt":"Generate a function that increments a given input by one in Python.","completion":"def increment(x): return x + 1"},{"prompt":"Create a neural network in Python for predicting the stock market.","completion":"import numpy as np from keras.models import Sequential from keras.layers import Dense, Dropout from keras.wrappers.scikit_learn import KerasRegressor from sklearn.preprocessing import StandardScaler from sklearn.model_selection import cross_val_score # define the data inputs = np.loadtxt('inputs.csv', delimiter=',') targets = np.loadtxt('targets.csv', delimiter=',') # Scale the data sc = StandardScaler() inputs = sc.fit_transform(inputs) targets = sc.fit_transform(targets) # define the model def create_model(): model = Sequential() model.add(Dense(64, activation='relu', input_dim=4)) model.add(Dense(32, activation='relu')) model.add(Dense(1)) model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy']) return model # create the model and evaluate it model = KerasRegressor(create_model, epochs=50, batch_size=32, verbose=0) results = cross_val_score(model, inputs, targets, cv=5) # print the results print(\\"Mean: \\", results.mean()) print(\\"Standard Deviation: \\", results.std())"},{"prompt":"Create a Python program to compare two given list variables and create a third list variable containing all the common elements between the two lists. list1 = [2, 3, 4, 5, 6] list2 = [5, 6, 7, 8, 9]","completion":"list1 = [2, 3, 4, 5, 6] list2 = [5, 6, 7, 8, 9] common_elements = [] for ele in list1: if ele in list2: common_elements.append(ele) print(common_elements)"},{"prompt":"Using Regular Expressions, create a Python program that finds all the words in a given sentence that end with 'ing'. This is a sentence containing a lot of words ending in 'ing'.","completion":"import re sentence = \\"This is a sentence containing a lot of words ending in 'ing'.\\" pattern = r\\"w+ingb\\" words = re.findall(pattern, sentence) print(words) # Output: ['containing', 'ending']"},{"prompt":"mplement a web scraper in Python using BeautifulSoup.","completion":"import requests from bs4 import BeautifulSoup # Make a get request to get the remote data r = requests.get('https://www.example.com') # Parse the text soup = BeautifulSoup(r.text, 'html.parser') # Extract data data = [] for tr in soup.find_all('tr'): # Find all table rows row = [] for td in tr.find_all('td'): # Find all table data row.append(td.text) data.append(row) # Print the extracted data print(data)"},{"prompt":"Generate a Python function to parse a web page from a given URL and identify the phone number on the page. https://example.com/contac","completion":"\\"\\"\\" Generate a Python function to parse a web page from a given URL and identify the phone number on the page. \\"\\"\\" import re import requests def find_phone_number(url): response = requests.get(url) html = response.text phone_regex = r\\"[+(]?[1-9][0-9 .-()]{8,}[0-9]\\" matches = re.findall(phone_regex, html) if matches: return matches[0] else: return None if __name__ == '__main__': print(find_phone_number('https://example.com/contact'))"},{"prompt":"Develop a Python program to search an element in a list using linear search. [25, 10, 5, 2, 50], 50","completion":"def linear_search(list, element): for i in range(len(list)): if list[i] == element: return i return -1 index = linear_search([25, 10, 5, 2, 50], 50) if index < 0: print(f\\"{element} not found in the list\\") else: print(f\\"{element} found at index {index}\\")"},{"prompt":"Write a python function to find all combinations of numbers that have a sum of K. K=15","completion":"def all_combinations_sum_k(k, arr): combinations = [] # recursively traverse the array find_all_combinations_sum_k_util(k, arr, 0, [], combinations) # print all the combinations for p in combinations: print(p) def find_all_combinations_sum_k_util(k, arr, start, combination, combinations): if k == 0: combinations.append(list(combination)) return for i in range(start, len(arr)): # if the sum of elements >= k then no need to search further for that combination if (k - arr[i] >= 0): combination.append(arr[i]) # searching further for the solution find_all_combinations_sum_k_util(k - arr[i], arr, i + 1, combination, combinations) combination.pop() all_combinations_sum_k(15, [2, 4, 6, 8, 10])"},{"prompt":"Generate a python program to search a list of tuples for given string and return the value associated with the string. my_list = [(apple, fruit), (carrot, vegetable), (orange, fruit)] search_string = orange","completion":"my_list = [(\\"apple\\", \\"fruit\\"), (\\"carrot\\", \\"vegetable\\"), (\\"orange\\", \\"fruit\\")] search_string = \\"orange\\" # Iterate through the list of tuples for (name,item) in my_list: if name == search_string: print(\\"The value associated with the string is: \\", item) break"},{"prompt":"Can you generate a python program to print out the nth Fibonacci number?","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2, n): c = a + b a = b b = c return b print(fibonacci(n))"},{"prompt":"Fix the following syntax in Python code string1 = Programming string2 = Fundamental","completion":"string1 = \\"Programming\\" string2 = \\"Fundamentals\\""},{"prompt":"Generate a python program to classify whether a number is divisible by 5 or not.","completion":"def is_divisible_by_five(number): # check if the number is divisible by 5 if number % 5 == 0: return 'Divisible' else: return 'Not divisible'"},{"prompt":"Train a machine learning model in Python to predict housing prices. Not applicable","completion":"import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from sklearn.model_selection import train_test_split # Read data df = pd.read_csv('housing_data.csv') # Explore data sns.pairplot(df) plt.show() # Split data into training and testing datasets X = df.drop('price', axis=1).values y = df['price'].values X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(X_train, y_train) # Test the model y_pred = model.predict(X_test) from sklearn.metrics import r2_score score = r2_score(y_test, y_pred) print('R2 score: ', score)"},{"prompt":"Construct a Python program that takes a list of words and prints the 3rd most common word in the list? words = ['Cat', 'Dog', 'Bird', 'Horse', 'Cow', 'Lion']","completion":"import collections def third_most_common(words): count = collections.Counter(words).most_common() return count[2][0] third_most_common(words) # returns 'Bird'"},{"prompt":"Generate a Python code for a decision tree classifier. X (features): height, weight Y (target): gender","completion":"import pandas as pd from sklearn import tree # Load the data data = pd.read_csv('data.csv') X = data[['height', 'weight']] y = data['gender'] # Train the model clf = tree.DecisionTreeClassifier() clf = clf.fit(X, y) # Make a prediction prediction = clf.predict([[180, 80]]) print(prediction)"},{"prompt":"Generate Python code to calculate the Mean Squared Error (MSE) between a given set of predicted values and actual values. y_true = [2.2, 3.7, 4.1, 5.7] y_pred = [1.8, 2.3, 2.9, 5.9]","completion":"def calculate_mse(y_true, y_pred): mse = 0 for i in range(len(y_true)): mse += (y_true[i] - y_pred[i])**2 mse = mse / len(y_true) return mse mse=calculate_mse(y_true, y_pred) print(mse) # Output: 0.44000000000000006"},{"prompt":"Can you write a Python3 program to calculate the number of times a character appears in a given string? Hello World!","completion":"str1 = \\"Hello World!\\" char = 'l' count = 0 for i in str1: if i == char: count = count + 1 # Print the result print (f'The character {char} appears {count} times in the string {str1}')"},{"prompt":"Create an object in Python that stores an employee's name and age. John 28","completion":"employee = { 'name': 'John', 'age': 28 }"},{"prompt":"Write a Python function to extract the last digits of a given integer. n = 12345","completion":"def extract_last_digits(n): return int(str(n)[-2:]) result = extract_last_digits(12345) print(result)"},{"prompt":"erpret the result of the given linear regression model in Python.","completion":"# import libraries import numpy as np import statsmodels.api as sm # predictors x = np.array([4.26, 6.16, 5.74, 6.52, 4.02, 5.35, 5.75, 5.77, 5.26, 6.30]) # target y = np.array([13.44, 10.62, 6.78, 10.93, 8.58, 8.03, 7.39, 8.50, 9.72, 11.95]) # add a column of ones to the predictors X = sm.add_constant(x) # fit the linear regression model model = sm.OLS(y, X).fit() # print the result of linear regression model print(model.summary()) # interpretation # The coefficient for x is -1.209, this means that for each unit increase in x, there is a corresponding reduction of 1.209 units in the target y. # The intercept is 8.719, which means that even when x is 0, the target value is 8.719. # The R-squared value of 0.895 indicates that 89.5 % of variation in target is explained by the linear regression model."},{"prompt":"Create an AI model class in Python for predicting future stock prices.","completion":"\\"\\"\\" Create an AI model class in Python for predicting future stock prices. \\"\\"\\" import numpy as np import pandas as pd from sklearn.preprocessing import MinMaxScaler from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.svm import SVR class StockPriceAI: def __init__(self, stock_data): \\"\\"\\" Initializes a StockPriceAI model Arguments: stock_data {pandas dataframe} -- dataset containing stock data \\"\\"\\" self.stock_data = stock_data self.X = None self.y = None def prepare_data(self): \\"\\"\\" Prepares data for model training. This includes slicing, scaling, and splitting the data \\"\\"\\" stock_data_slice = self.stock_data.iloc[:, 1:2].values sc = MinMaxScaler() stock_data_scaled = sc.fit_transform(stock_data_slice) self.X = stock_data_scaled[0:len(stock_data_scaled)-1] self.y = stock_data_scaled[1:len(stock_data_scaled)] def train_model(self, model_type='linear'): \\"\\"\\" Trains the model with stock data. Arguments: model_type {str} -- type of model to use for training either \\"linear\\" or \\"svr\\" \\"\\"\\" self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.X, self.y, test_size=0.2) if model_type == 'linear': self.model = LinearRegression().fit(self.X_train, self.y_train) elif model_type == 'svr': self.model = SVR().fit(self.X_train, self.y_train) def predict_stock_price(self, test_set): \\"\\"\\" Predicts stock prices for the given test set. Arguments: test_set {numpy array} -- test set of stock data Returns: numpy array -- prediction of stock prices \\"\\"\\" predicted_stock_price = self.model.predict(test_set) return predicted_stock_price"},{"prompt":"Given a tensorflow model, write an optimization algorithm in Python to improve its accuracy. A TensorFlow convolutional neural network model","completion":"#import packages import tensorflow as tf from tensorflow.keras.callbacks import ReduceLROnPlateau # Create the optimization algorithm reduce_lr = ReduceLROnPlateau(patience=3, min_delta=0.001, verbose=1) # Compile the model model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) #Define a callback callbacks_list = [reduce_lr] # Train the model model.fit(x_train, y_train, batch_size=64, epochs=50, callbacks=callbacks_list)"},{"prompt":"Develop a program to perform edit distance calculation on two strings in Python.","completion":"def edit_distance(str1, str2): matrix = [] for i in range(len(str1) + 1): matrix.append([0] * (len(str2) + 1)) for i in range(len(str1) + 1): matrix[i][0] = i for j in range(len(str2) + 1): matrix[0][j] = j for i in range(1, len(str1) + 1): for j in range(1, len(str2) + 1): if str1[i-1] == str2[j-1]: matrix[i][j] = matrix[i-1][j-1] else: matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1]) return matrix[len(str1)][len(str2)]"},{"prompt":"Create a machine learning program in Python for binary classification. Not applicable","completion":"import numpy as np from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB # Read dataset X = np.loadtxt('./data.txt', delimiter=',') y = np.loadtxt('./labels.txt') # Split the dataset X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Train the model classifier = GaussianNB() classifier.fit(X_train, y_train) # Test the model score = classifier.score(X_test, y_test) print(\\"Model accuracy:\\", score)"},{"prompt":"Edit the following Python function so that it returns a list of the factors of a number. def factors(n): retur","completion":"def factors(n): factors =[] for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"prompt":"Create a Python web scraping project that scrapes prices from Amazon for a given list of items. list of items: iPhone 11 Pro, Playstation 4 Pro, Samsung Galaxy S20","completion":"import requests from bs4 import BeautifulSoup items = [\\"iPhone 11 Pro\\", \\"Playstation 4 Pro\\", \\"Samsung Galaxy S20\\"] for item in items: r = requests.get(\\"https://www.amazon.com/s?k=\\" + item) soup = BeautifulSoup(r.content, 'html.parser') product_prices = [price.get_text().replace(\\"\\", \\"\\") for price in soup.find_all(\\"span\\", class_=\\"a-price-whole\\")] print(f\\"The current price for {item} is {product_prices[0]}\\")"},{"prompt":"Generate a REST API for an employee database in Python. The API should provide routes for listing all employees, retrieving a single employee, and creating a new employee. Not applicable","completion":"from flask import Flask, request, jsonify from flask_restful import Resource, Api app = Flask(__name__) api = Api(app) employees = [] class EmployeeList(Resource): def get(self): return {'employees': employees} api.add_resource(EmployeeList, '/employees') class Employee(Resource): def get(self, employee_id): employee = [employee for employee in employees if employee['id'] == employee_id] if len(employee) == 0: return {'message': 'No employee found'}, 404 return {'employee': employee[0]} def post(self, employee_id): data = request.get_json() employee = { 'id': employee_id, 'name': data['name'], 'salary': data['salary'] } employees.append(employee) return {'message': 'Employee added successfully', 'employee': employee}, 201 api.add_resource(Employee, '/employees/<int:employee_id>') if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python program that takes a list of words as input and generates a frequency histogram. words = ['a', 'cat', 'sat', 'on', 'the', 'mat']","completion":"from collections import Counter import matplotlib.pyplot as plt words = ['a', 'cat', 'sat', 'on', 'the', 'mat'] word_counts = Counter(words) # Get word frequencies labels, values = zip(*word_counts.items()) # Create the figure plt.figure(figsize=(12, 8)) # Plot the data plt.bar(range(len(word_counts)), list(values), tick_label = list(labels)) plt.title('Word Frequency Histogram') plt.xlabel('Words') plt.ylabel('Frequency') plt.show()"},{"prompt":"Embed a machine learning model into a web page. Python Machine Learning model file","completion":"# Imports from flask import Flask, render_template, request from sklearn.externals import joblib # App app = Flask(__name__) # Load the model model = joblib.load(Python Machine Learning model file) # Routes @app.route('/', methods=['GET', 'POST']) def predict(): # Get the data from the POST request. data = request.form # Make prediction using the model. prediction = model.predict(data) # Render template return render_template('index.html', prediction=prediction) # Run App if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Generate a Python program to find the greatest common divisor (GCD) for two given numbers. 6, 4","completion":"def gcd(number1, number2): if(number2 == 0): return number1 return gcd(number2, number1%number2) first_num = 6 second_num = 4 print(\\"The greatest common divisor of 6 and 4 is\\", gcd(first_num, second_num))"},{"prompt":"put an array of numbers, and build a function in Python to replace all even numbers with 0. [4, 10, 15, 20]","completion":"def replace_even(arr): for i in range(len(arr)): if arr[i] % 2 == 0: arr[i] = 0 return arr result = replace_even([4, 10, 15, 20]) print(result)"},{"prompt":"Create a function to validate a given credit card number in Python. credit card number = 4111 1111 1111 1111","completion":"def validate_credit_card(card_number): # strip whitespace card_number = card_number.strip() # First step is to double every second digit # Increase the overall sum of the digits by the doubled number digits = [int(d) for d in card_number] # convert each character in the number to int doubled_digits = [2*d if idx % 2 == 0 else d for idx, d in enumerate(digits)] total = sum(doubled_digits) # Check if total is divisible by 10 if total % 10 == 0: return True return False"},{"prompt":"Construct a Python code segment that sorts a list of numbers in a nondecreasing order [2, 9, 6, 4, 5]","completion":"# Bubble Sort def bubble_sort(numbers): # Traverse through all array elements for i in range(len(numbers)): # Last i elements are already in place for j in range(0, len(numbers)-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if numbers[j] > numbers[j+1] : numbers[j], numbers[j+1] = numbers[j+1], numbers[j] numbers = [2, 9, 6, 4, 5] bubble_sort(numbers) print (\\"Sorted array is:\\") for i in range(len(numbers)): print (\\"%d\\" %numbers[i]),"},{"prompt":"Create a program in Python to compute the cosine similarity between two given vectors. [2, 5], [1, 3]","completion":"import numpy def cos_sim(vec1, vec2): sim = numpy.dot(vec1, vec2)/(numpy.linalg.norm(vec1)* numpy.linalg.norm(vec2)) return sim vec1 = [2, 5] vec2 = [1, 3] print(\\"Cosine Similarity:\\", cos_sim(vec1, vec2))"},{"prompt":"Write a Python program to optimize a given set of rules specified by the user.","completion":"def optimize_rules(rules): optimized_rules = [] # Add your code here return optimized_rules"},{"prompt":"Create a Python program to calculate the factorial of a given integer. 5","completion":"def factorial(n): if n == 0: return 1 return n * factorial(n-1) result = factorial(5) print(result)"},{"prompt":"Create a python program which reads a string from the user and prints out its length.","completion":"user_str = input(\\"Please enter a string: \\") print(\\"The length of the string is\\", len(user_str))"},{"prompt":"Create a set of python functions and classes to build a shell command processor.","completion":"class Command(): def __init__(self, command_name, params): self.command_name = command_name self.params = params def is_valid_command(self): # Your code here pass def process_command(command): # Your code here pass"},{"prompt":"Generate a Python program to convert a list of lists into one flat list. [[1, 2], [3, 4], [5, 6]]","completion":"def flattenList(inputList): outputList = [] for subList in inputList: for item in subList: outputList.append(item) return outputList"},{"prompt":"Create a program that performs linear regression using the gradient descent algorithm in Python. Not applicable","completion":"# Import the necessary libraries import numpy as np # Define the gradient descent function def gradient_descent(x, y): # Initialize the model parameters m = 0 c = 0 # Set the learning rate learning_rate = 0.05 # Set the number of iteration num_iterations = 1000 # Perform gradient descent for i in range(num_iterations): # Calculate the cost y_pred = m * x + c cost = np.mean(np.square(y - y_pred)) # Calculate the derivatives of the cost function with respect to m and c m_deriv = -2 * np.mean((y - y_pred) * x) c_deriv = -2 * np.mean(y - y_pred) # Update the model parameters m -= m_deriv * learning_rate c -= c_deriv * learning_rate # Print the final model parameters print('Coefficient:', m) print('Intercept:', c)"},{"prompt":"Create a cloudbased web service in Python that takes a JSON input and returns the data ready for visualization. [ { date: '20160101', sales: 50 }, { date: '20160201', sales: 70 }, { date: '20160301', sales: 100 } ]","completion":"import json from flask import Flask, request # Create Flask object app = Flask(__name__) # POST route for request @app.route('/', methods=['POST']) def handlePost(): # Get data from request object data = request.get_json() # Manipulate data for visualization res = { 'dates': [], 'sales': [] } for datum in data: res['dates'].append(datum['date']) res['sales'].append(datum['sales']) # Return data return json.dumps(res) if __name__ == '__main__': app.run(host='0.0.0.0', port=PORT)"},{"prompt":"Create a Python script to access a database and query a table. Not applicable","completion":"import sqlite3 # Create or open a database conn = sqlite3.connect('database.db') # Create a cursor c = conn.cursor() # Execute a query c.execute(\\"SELECT * FROM \`table_name\`;\\") # Get the result rows = c.fetchall() # Iterate over the result for row in rows: print(row) # Close the connection c.close() conn.close()"},{"prompt":"Generate a Python program to unpack a given list of tuples [(1, a), (2, b), (3, c)]","completion":"list_of_tuples = [(1, \\"a\\"), (2, \\"b\\"), (3, \\"c\\")] list_1, list_2 = zip(*list_of_tuples) print(list_1) print(list_2)"},{"prompt":"Edit the following python code to print all the elements of a list that are divisible by 7. my_list = [14, 35, 42, 49, 56, 63, 70]","completion":"my_list = [14, 35, 42, 49, 56, 63, 70] for element in my_list: if element % 7 == 0: print(element) # Output: 14 42 49 56 63 70"},{"prompt":"Create a Python script to implement a linear search for a given list of numbers. numbers_list = [1, 4, 5, 6, 7, 8 , 10] number = 6","completion":"def linear_search(numbers_list, number): \\"\\"\\"Implements a linear search for a given list of numbers and returns the index of the number if exists\\"\\"\\" for index, element in enumerate(numbers_list): if element == number: return index return -1"},{"prompt":"Write a Python program to accept a sentence (by user at runtime) and count the number of vowels present in it.","completion":"def count_vowels(sentence): vowels = ['a', 'e', 'i', 'o', 'u'] count = 0 for letter in sentence.lower(): if letter in vowels: count += 1 return count sentence = input('Enter a sentence: ') vowel_count = count_vowels(sentence) print('Number of vowels in the sentence:', vowel_count)"},{"prompt":"Write a Python program to take a given list of strings and return a dictionary of words mapped to the frequency of their occurrence.","completion":"def create_word_dict(words): word_dict = {} for word in words: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict"},{"prompt":"Write a Python function to create and show a binary search tree given a set of values.","completion":"class Node: def __init__(self, val): self.l = None self.r = None self.v = val def tree_insert( node, val): if node is None: return Node(val) if val < node.v: node.l = tree_insert(node.l, val) else: node.r = tree_insert(node.r, val) return node def show_tree(node): if node is None: return show_tree(node.l) print(f\\"{node.v}\\") show_tree(node.r) def initialize_tree(): root = None set_values = [8, 3, 10, 1, 6, 14, 4, 7, 13] for val in set_values: root = tree_insert(root, val) return root root = initialize_tree() show_tree(root)"},{"prompt":"Write a python program to parse a given XML document.","completion":"import xml.etree.ElementTree as ET def parse_xml(xml_doc): # Parse the XML document tree = ET.parse(xml_doc) # Get the root element root = tree.getroot() # Iterate through children for child in root: print(child.tag, child.attrib) # Function call parse_xml(\\"sample.xml\\")"},{"prompt":"Generate a Python class that sorts the elements of a given list","completion":"\\"\\"\\" Generate a Python class that sorts the elements of a given list \\"\\"\\" class Sort: def __init__(self, lst): self.lst = lst def bubble_sort(self): length = len(self.lst) for i in range(length): for j in range(length - i -1): if self.lst[j] > self.lst[j + 1]: self.lst[j], self.lst[j + 1] = self.lst[j + 1], self.lst[j] return self.lst if __name__ == '__main__': lst = [7, 3, 2, 9, 1] s = Sort(lst) print(s.bubble_sort())"},{"prompt":"Write a Python program to filter out all the punctuation marks from a given string. string = This is a sample sentence with !,:;? punctuation marks;","completion":"def remove_punctuations(string): punctuations = '''!()-[]{};:'\\",<>./?@#%^&*_~''' without_punct = \\"\\" for char in string: if char not in punctuations: without_punct = without_punct + char return without_punct string = \\"This is a sample sentence with !,:;? punctuation marks\\"; print(remove_punctuations(string)) Output: This is a sample sentence with punctuation marks"},{"prompt":"Generate a Python script to calculate the sum of the following equation: 8x^2 + 5y^2 + 6x 4y.","completion":"def calculate_sum(x, y): '''This function calculates the sum of the following equation: 8x^2 + 5y^2 + 6x - 4y.''' return 8*x**2 + 5*y**2 + 6*x - 4*y # Call the function result = calculate_sum(2, 3) # Print the result print(\\"The sum is\\", result)"},{"prompt":"Create a correct Python program to classify the given list of strings. ['Plants', 'Animals', 'Minerals']","completion":"def classify_strings(words): classified_words = { 'plants': [], 'animals': [], 'minerals': [] } for word in words: if word.lower() in ('plants', 'plant'): classified_words['plants'].append(word) elif word.lower() in ('animals', 'animal'): classified_words['animals'].append(word) elif word.lower() in ('minerals', 'mineral'): classified_words['minerals'].append(word) return classified_words"},{"prompt":"Generate a Python dictionary that tracks the frequency of letters in a given string. test_string = This is a test string!","completion":"frequency_dict = {} for letter in test_string: if letter not in frequency_dict: frequency_dict[letter] = 0 frequency_dict[letter] += 1"},{"prompt":"Develop a script for rearranging the elements of a given array such that the numbers are in descending order. arr = [87, 76, 65, 54, 43, 32]","completion":"#Python code to rearrange the elements of a given array # such that the numbers are in descending order def rearrange(arr): # start arranging the array for i in range (len(arr)): for j in range(i+1, len(arr)): # if the current term is greater than the next term if arr[i] < arr[j]: # swap the current and the next term arr[i], arr[j]= arr[j], arr[i] # Driver code arr = [87, 76, 65, 54, 43, 32] # rearranging the elements of the given array rearrange(arr) # printing the rearranged array print (\\"The rearranged array is : n\\", arr)"},{"prompt":"Modify the code to output a float in python instead of integer. def multiply(a, b): return a * b","completion":"def multiply(a, b): return float(a * b)"},{"prompt":"Create a python program to perform a linear search","completion":"def linear_search(lst, target): for i, val in enumerate(lst): if val == target: return i return -1 # Sample Test lst = [1, 2, 3, 4, 5] target = 3 print(linear_search(lst, target)) # 2"},{"prompt":"Can you create a function in Python that takes two strings as input, and returns the number of common characters between them? computer, science","completion":"def countCommonChars(string1, string2): count = 0 for i in string1: if i in string2: count += 1 return count input1 = \\"computer\\" input2 = \\"science\\" print(countCommonChars(input1, input2))"},{"prompt":"Generate a python program that computes the inverse of a 3 x 3 matrix. [3, 0, 2] [2, 0, 2] [0, 1, 1]","completion":"def inverse(matrix): # Determinant of matrix det = matrix[0][0]*(matrix[1][1]*matrix[2][2] - matrix[2][1]*matrix[1][2]) - matrix[0][1]*(matrix[1][0]*matrix[2][2] - matrix[1][2]*matrix[2][0]) + matrix[0][2]*(matrix[1][0]*matrix[2][1] - matrix[1][1]*matrix[2][0]) inv_matrix = [[None, None, None], [None, None, None], [None, None, None]] inv_matrix[0][0] = (matrix[1][1]*matrix[2][2] - matrix[2][1]*matrix[1][2])/det inv_matrix[0][1] = -(matrix[1][0]*matrix[2][2] - matrix[1][2]*matrix[2][0])/det inv_matrix[0][2] = (matrix[1][0]*matrix[2][1] - matrix[2][0]*matrix[1][1])/det inv_matrix[1][0] = -(matrix[0][1]*matrix[2][2] - matrix[0][2]*matrix[2][1])/det inv_matrix[1][1] = (matrix[0][0]*matrix[2][2] - matrix[0][2]*matrix[2][0])/det inv_matrix[1][2] = -(matrix[0][0]*matrix[2][1] - matrix[2][0]*matrix[0][1])/det inv_matrix[2][0] = (matrix[0][1]*matrix[1][2] - matrix[0][2]*matrix[1][1])/det inv_matrix[2][1] = -(matrix[0][0]*matrix[1][2] - matrix[1][0]*matrix[0][2])/det inv_matrix[2][2] = (matrix[0][0]*matrix[1][1] - matrix[1][0]*matrix[0][1])/det return inv_matrix"},{"prompt":"Develop a program in Python to generate random data with the same statistical properties as the input.","completion":"import numpy as np from scipy.stats import describe def generate_random_data(data): # Calculate the descriptor statistics desc = describe(data) # Generate random data from the same distribution random_data = np.random.normal(loc=desc.mean, scale=np.sqrt(desc.variance), size=desc.nobs) return random_data"},{"prompt":"Create an AI model in Python for predicting the sentiment of a review given its text. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB data = pd.read_csv(\\"reviews.csv\\") texts = data['Text'] labels = data['Label'] # Create a vectorizer and expand the review text vectorizer = CountVectorizer() vectors = vectorizer.fit_transform(texts) # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(vectors, labels, test_size=0.20, random_state=42) # Build a Naive Bayes model model = MultinomialNB() model.fit(X_train, y_train) # Test the model and print the accuracy accuracy = model.score(X_test, y_test) print(\\"Model Accuracy:\\", accuracy) # Use the model to predict the sentiment for a new review review = \\"This movie is amazing!\\" prediction = model.predict(vectorizer.transform([review])) print(\\"Predicted sentiment:\\", prediction[0])"},{"prompt":"Create a function in Python to calculate the power of a number.","completion":"def power(num, pow): return num**pow"},{"prompt":"Generate an objectoriented Python code to create a Guitar class with properties.","completion":"class Guitar: # initialise the class def __init__(self, brand=None, wood=None, strings=None, pickups=None): self.brand = brand self.wood = wood self.strings = strings self.pickups = pickups # define getter and setter methods def set_brand(self, brand): self.brand = brand def get_brand(self): return self.brand def set_wood(self, wood): self.wood = wood def get_wood(self): return self.wood def set_strings(self, strings): self.strings = strings def get_strings(self): return self.strings def set_pickups(self, pickups): self.pickups = pickups def get_pickups(self): return self.pickups"},{"prompt":"Create a program in Python that takes a string as an input and removes all the characters whose ASCII value is odd. str = Hello world!","completion":"def remove_odd_ascii_chars(str): new_str = \\"\\" for ch in str: if ord(ch) % 2 == 0: new_str += ch return new_str str = \\"Hello world!\\" new_str = remove_odd_ascii_chars(str) print(new_str)"},{"prompt":"Create a function in Python to identify consecutive numbers in a given list. [1, 4, 6, 5, 2, 7, 9]","completion":"def consecutive_numbers(lst): count = 0 for i in range(len(lst)-1): if lst[i+1] - lst[i] == 1: count += 1 else: count = 0 return count # Test Code lst = [1, 4, 6, 5, 2, 7, 9] result = consecutive_numbers(lst) print(result) # Output --> 2"},{"prompt":"Create a Python script to classify a given text into positive and negative sentiment using ML.","completion":"import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.feature_extraction.text import CountVectorizer # Data texts = ['This is an amazing day!', 'I am feeling sad today.'] labels = [1, 0] # 1 = positive sentiment and 0 = negative sentiment # Vectorizing the texts vectorizer = CountVectorizer() X = vectorizer.fit_transform(texts) # Splitting the data X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size = 0.25, random_state = 0) # Fitting the model classifier = LogisticRegression() classifier.fit(X_train, y_train) # Predicting y_pred = classifier.predict(X_test) print(y_pred)"},{"prompt":"Generate a classifier in Python for distinguishing between two different languages. Dataset containing strings written in French and Spanish.","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer #loading the data data = pd.read_csv('input.csv') #Feature extraction vectorizer = CountVectorizer(ngram_range=(2,2)) X = vectorizer.fit_transform(data) #Training the model from sklearn.naive_bayes import MultinomialNB clf = MultinomialNB().fit(X, data[\\"language\\"]) #Testing the model test_data = [\\"Hola me llamo Ana\\"] #converting test data into features Y = vectorizer.transform(test_data) predicted_language = clf.predict(Y) print(predicted_language[0]) # Spanish"},{"prompt":"Construct a Genetic Algorithm in Python to minimize the distance from a given set of points to a given reference point Points: [(2, 3), (4, 6), (7, 2)] |Reference Point: (1, 1)","completion":"def genetic_algorithm(points, reference_point): # define the search space search_space = [np.random.randint(-20, 20) for _ in range(len(points))] # set the initial minimum distance min_distance = float(\\"inf\\") # execute the genetic algorithm while True: # evaluate the search space distances = [euclidean_distance(point, reference_point) for point in points] new_distance = sum(distances) # update the min distance if min_distance > new_distance: min_distance = new_distance best_search_space = search_space # stochastically adjust the search space for i in range(len(search_space)): search_space[i] += np.random.randint(-3, 3) # if the new distance is the same as the previous, break the loop if new_distance == min_distance: break return best_search_space"},{"prompt":"Modify this Python code to add an exception for invalid input. def calculate(a, b): if b > 0: c = a / b return c","completion":"def calculate(a, b): if b == 0: raise ZeroDivisionError elif b > 0: c = a / b return c else: raise ValueError"},{"prompt":"Create an array in Python for storing usernames. Not applicable","completion":"usernames = [\\"John\\", \\"Jane\\", \\"Mary\\", \\"Jill\\", \\"Bob\\"]"},{"prompt":"Write a Python program to update a dictionary with the its key's length as the value. mydict = {Model: Tesla, Car: Tesla Roadster}","completion":"mydict = {k: len(k) for k in mydict.keys()}"},{"prompt":"Generate a Python function that, given two strings, will return the number of matches between the strings.","completion":"def string_matches(string1, string2): matches = 0 for i in range(len(string1)): if string1[i] == string2[i]: matches += 1 return matches"},{"prompt":"Design a program in Python to compute the Nth power of a given number. Number: 6 Power: 4","completion":"def pow(num, pow): result = 1 for i in range(pow): result *= num return result"},{"prompt":"Write a function in Python that takes a string and determines the longest palindrome in it. itsracecarthatmadethetoo","completion":"def longestPalindrome(s): n = len(s) table = [[0 for x in range(n)] for y in range(n)] # All substrings of length 1 are palindromes maxLength = 1 i = 0 while (i < n): table[i][i] = True i = i + 1 # check for substring of length 2. start = 0 i = 0 while (i < n - 1): if (s[i] == s[i + 1]): table[i][i + 1] = True start = i maxLength = 2 i = i + 1 # Check for lengths greater than 2. k is length # of substring k = 3 while (k <= n): # Fix the starting index i = 0 while (i < (n - k + 1)): # Get the ending index of substring from # starting index i and length k j = i + k - 1 # checking for sub-string from ith index to # jth index iff str[i+1] to str[j-1] is a # palindrome if (table[i + 1][j - 1] and s[i] == s[j]): table[i][j] = True if (k > maxLength): start = i maxLength = k i = i + 1 k = k + 1 print (\\"Longest palindrome substring is: \\") print (s[start:start + maxLength]) return maxLength"},{"prompt":"Create a program in Python to evaluate a given phrase and return a sentiment score. Input phrase: The customer service was really helpful","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_analysis(phrase): # Create a sentiment analyzer sentiment_analyzer = SentimentIntensityAnalyzer() # Evaluate the sentiment of the phrase sentiment_score = sentiment_analyzer.polarity_scores(phrase) # Return the sentiment score return sentiment_score # Test the function result = sentiment_analysis(\\"The customer service was really helpful\\") print(result) # {'neg': 0.0, 'neu': 0.435, 'pos': 0.565, 'compound': 0.6798}"},{"prompt":"Write a function in Python that takes a single string argument and prints it out in reverse. Hello World!","completion":"def printReverseString(in_str): reversed_str = in_str[::-1] print(reversed_str) printReverseString(\\"Hello World!\\")"},{"prompt":"Write a Python script that generates a table with four columns, user, password, hint and expiry.","completion":"import csv with open('table.csv', mode='w') as csv_file: fieldnames = ['user', 'password', 'hint', 'expiry'] writer = csv.DictWriter(csv_file, fieldnames=fieldnames) writer.writeheader() writer.writerow({'user': 'jdoe', 'password': '123', 'hint': 'dog', 'expiry': '2021'})"},{"prompt":"Write a Python program to optimize a given mathematical expression. x 5 + (y * (1 + (z / 2)))","completion":"def optimize_expression(expr): expr_tree = ast.parse(expr, mode='eval') # transform expression expr_tree = ast.fix_missing_locations(ast.optimize_expression(expr_tree)) ast.increment_lineno(expr_tree, 1) # compile ast to python code compiled_expr = compile(expr_tree, '', 'eval') return eval(compiled_expr)"},{"prompt":"Write a Python program to extract and sort the words in the text field of a given HTML page. <html> <head> ... </head> <body> The quick brown fox jumps over the lazy dog </body> </html>","completion":"import re #read HTML as a string html_string = '<html> <head> ... </head> <body>The quick brown fox jumps over the lazy dog </body> </html>' #extract the text area from the page text = re.findall(r'<body>(.*?)</body>', html_string, flags=re.DOTALL)[0] #split the text into an array of words words = text.split() #sort the array of words words.sort() #print the sorted words print(words)"},{"prompt":"Create a Python code to switch the positions of two items in a given list.","completion":"def switch_position(list, pos1, pos2): list[pos1], list[pos2] = list[pos2], list[pos1] return list"},{"prompt":"Write a Python function to return the area of an equilateral triangle.","completion":"def area_equilateral(side): \\"\\"\\"Calculate the area of an equilateral triangle from the side length.\\"\\"\\" return (math.sqrt(3)/4)*side**2;"},{"prompt":"mplement a genetic algorithm in Python to find the best possible solution for the given problem. Problem: Find the global minimum of a twodimensional function.","completion":"import random import numpy as np # Define the function def f(x, y): return (x**2) + (2*y**2) # Define parameters for genetic algorithm pop_size = 25 num_generations = 100 # Create initial random starting population pop = np.random.rand(pop_size, 2) scores = np.array([f(*member) for member in pop]) # Iterate over the generations for i in range(num_generations): # Create mating pool mating_pool=np.random.choice(np.arange(pop_size), replace=False, size=(round(pop_size/2), 2)) offspring = np.empty_like(mating_pool) # Create offspring for parent_idx, child_idx in enumerate(mating_pool): parent_1 = pop[child_idx[0]] parent_2 = pop[child_idx[1]] # Generate offspring child_1 = np.random.uniform(low=min(parent_1, parent_2),high=max(parent_1, parent_2)) child_2 = np.random.choice([child_1[0],child_1[1]]) offspring[parent_idx] = [child_1[0], child_2] # Evaluate offspring scores_offspring = np.array([f(*member) for member in offspring]) # Generate mating pool for next iteration mating_pool = np.concatenate((pop,offspring)) scores = np.concatenate((scores,scores_offspring)) pop = mating_pool # Select best individuals best_idx = np.argsort(scores)[:pop_size] pop = mating_pool[best_idx] # Find global minimum global_minimum = np.min(scores) print('Global minimum is ',global_minimum)"},{"prompt":"Construct a python code that can convert any given integer into its binary representation.","completion":"def to_binary(n): binary_rep = \\"\\" while n > 0: binary_rep = str(n%2) + binary_rep n = int(n/2) return binary_rep"},{"prompt":"Optimize a given quicksort algorithm using Python","completion":"def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] less_than_pivot = [x for x in arr if x < pivot] equal_to_pivot = [x for x in arr if x == pivot] greater_than_pivot = [x for x in arr if x > pivot] return quicksort(less_than_pivot) + equal_to_pivot + quicksort(greater_than_pivot)"},{"prompt":"Create a program in any language (Python, JavaScript, etc.) that constructs a word cloud from a given text. text = The quick brown fox jumps over the lazy dog","completion":"import collections # create a map of words and their frequencies word_freq = collections.Counter(text.split()) # use a list comprehension to convert the map to a list of tuples word_list = [(word, freq) for word, freq in word_freq.items()] # sort by frequency word_list.sort(key=lambda x: x[1], reverse=True) # print the word cloud for word, freq in word_list: print (word * freq)"},{"prompt":"Reverse engineer the following Java code to create a Python program. int i = 0; while (i < 10) { System.out.println(i); i++; }","completion":"def main(): i = 0 while i < 10: print(i) i += 1 main()"},{"prompt":"Convert the following code from Python to JavaScript. def add_two_numbers(a,b): return a+b","completion":"function add_two_numbers(a,b) { return a + b; }"},{"prompt":"Generate a heatmap using Python to visualize the correlation between two variables.","completion":"import seaborn as sns import pandas as pd import matplotlib.pyplot as plt # data data = {'var1': [1, 0, 1, 0, 2, 1], 'var2': [0, 1, 0, 1, 0, 1]} # dataframe df = pd.DataFrame(data=data) # Create the heatmap sns.heatmap(df.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1) # Show the plot plt.show()"},{"prompt":"Write a function in Python that takes in a two dimensional list of words and computes the longest word chain. [['a', 'b', 'c'], ['b', 'd', 'e'], ['f', 'g', 'h']]","completion":"def longestChain(words_list): longest_chain = [] current_chain = [] for row in words_list: for i in range(len(row)-1): c1, c2 = row[i], row[i+1] if c1 not in current_chain: current_chain.append(c1) current_chain.append(c2) if len(current_chain) > len(longest_chain): longest_chain = current_chain current_chain = [] return longest_chain longestChain([['a', 'b', 'c'], ['b', 'd', 'e'], ['f', 'g', 'h']]) #returns ['a', 'b', 'd', 'e', 'f', 'g', 'h']"},{"prompt":"Given a list of dictionaries, write a python program to find the item with the highest value for the key 'price'. [ {'name': 'apple', 'price': 3}, {'name': 'orange', 'price': 2}, {'name': 'banana', 'price': 6}, {'name': 'kiwi', 'price': 4} ]","completion":"maxVal = 0 maxItem = {} for item in items: if item['price'] > maxVal: maxVal = item['price'] maxItem = item print(\\"The item with the highest price is: \\", maxItem)"},{"prompt":"Develop a game AI in Python using a minimax algorithm for playing the game of Noughts and Crosses. Not applicable","completion":"# Import the necessary libraries import numpy as np # Function to determine the available moves def get_available_moves(board): available = [] for i in range(3): for j in range(3): if board[i][j] == 0: available.append((i, j)) return available # Function to check if terminal state is reached def is_game_over(board): # If any of the row, columns of the board has same elements across # any row, then the game is over for i in range(3): # checking across columns if board[i][0]==board[i][1] and board[i][1]==board[i][2] and board[i][0]!=0: return True # checking across rows if board[0][i]==board[1][i] and board[1][i]==board[2][i] and board[0][i]!=0: return True # checking across diagonals if board[0][0]==board[1][1] and board[1][1]==board[2][2] and board[0][0]!=0: return True if board[0][2]==board[1][1] and board[1][1]==board[2][0] and board[0][2]!=0: return True # If no element has a combination to make a game over, # then the comparison continues return False # Function for implementing the minimax algorithm def minimax(board, depth, isMax): # If game is over, return the score if is_game_over(board): # Winner of the game has score of 1 if depth % 2 != 0: return 1 # Looser of the game has score of -1 else: return -1 # If no game over state is reached, # find the scores for all available moves scores = [] available_moves = get_available_moves(board) for move in available_moves: x, y = move[0], move[1] # If it is max player's turn # assign 'X' to the empty space # and value as 1 if isMax: board[x][y] = 1 val = minimax(board, depth + 1, False) # If it is min player's turn # assign 'O' to the empty space # and value as 0 else: board[x][y] = 0 val = minimax(board, depth + 1, True) # Assign the initial value as empty board[x][y] = 0 scores.append(val) # If it is Max player's turn, pick the maximum score if isMax: maximum = max(scores) return maximum # If it is Min player's turn, pick the minimum score else: minimum = min(scores) return minimum # Function for finding the best move def best_move(board): available_moves = get_available_moves(board) b_score = -2 best_move = None # Iterate through every empty cells for move in available_moves: x, y = move[0], move[1] board[x][y] = 1 score = minimax(board, 0, False) board[x][y] = 0 if score > b_score: b_score = score best_move = [x, y] return best_move"},{"prompt":"Write a Python program to find the area of a triangle given its lengths of sides. a = 7, b = 6, c = 8","completion":"def triangle_area(a, b, c): s = (a + b + c) / 2 return (s*(s-a)*(s-b)*(s-c)) ** 0.5 result = triangle_area(7, 6, 8) print(result)"},{"prompt":"Create a Python code to print the given matrix in spiral form. matrix = [[ 1, 2, 3, 4], [ 5, 6, 7, 8], [ 9, 10, 11, 12], [13, 14, 15, 16]]","completion":"matrix = [[ 1, 2, 3, 4], [ 5, 6, 7, 8], [ 9, 10, 11, 12], [13, 14, 15, 16]] def print_matrix_in_spiral(matrix): row_start = 0 row_end = len(matrix) - 1 col_start = 0 col_end = len(matrix[0]) - 1 while row_start <= row_end and col_start <= col_end: for i in range(row_start, row_end + 1): print(matrix[row_start][i], end = \\" \\") row_start += 1 for i in range(col_start, col_end + 1): print(matrix[i][col_end], end = \\" \\") col_end -= 1 if row_start <= row_end: for i in range(row_end, row_start - 1, -1): print(matrix[row_end][i], end = \\" \\") row_end -= 1 if col_start <= col_end: for i in range(col_end, col_start - 1, -1): print(matrix[i][col_start], end = \\" \\") col_start += 1 print_matrix_in_spiral(matrix)"},{"prompt":"Suggest a method to optimize the following code segment in Python: x = 10 y = 20","completion":"The code segment does not need to be optimized as it does not contain any code that can be improved. It simply sets two variables to a given value."},{"prompt":"w can you generate a series of random numbers using Python?","completion":"import random for i in range(10): num = random.random() print(num)"},{"prompt":"Write a Python program that uses a machine learning model to predict an output (e.g., yes/no) for a given input. Input is a dataset containing 10 features and 1000 row","completion":"import pandas as pd df = pd.read_csv('data.csv') X = df.iloc[:, :-1].values y = df.iloc[:, -1].values # Feature scaling from sklearn.preprocessing import StandardScaler sc_X = StandardScaler() X = sc_X.fit_transform(X) # Train the model from sklearn.ensemble import RandomForestClassifier classifier = RandomForestClassifier(n_estimators=100, random_state=0) classifier.fit(X, y) # Predict output y_pred = classifier.predict(X)"},{"prompt":"Utilizing the list comprehension, create a python program that removes all multiples of 3 from the input list. [3,4,6,8,9,12]","completion":"res = [x for x in [3,4,6,8,9,12] if x % 3 != 0] print(res)"},{"prompt":"Create a Python function to delete the fourth element of a given list. [1,2,3,4,5]","completion":"def removeFourthElement(lst): lst.pop(3) return lst print(removeFourthElement([1,2,3,4,5]))"},{"prompt":"Create a Python program to generate a random password from 4 character sets (uppercase letters, lowercase letters, numbers, and punctuation marks). Not applicable","completion":"import random import string def generate_password(length): charsets = [string.ascii_uppercase, string.ascii_lowercase, string.digits, string.punctuation] password = '' for i in range(length): charset = random.choice(charsets) password += random.choice(charset) return password password = generate_password(8) print(password)"},{"prompt":"Create a python program that reads a list of numbers and returns the average of the numbers in the list. [1, 5, 7, 10]","completion":"def compute_average(numbers): total = 0 for num in numbers: total += num return total / len(numbers) if __name__ == '__main__': numbers = [1, 5, 7, 10] print(compute_average(numbers)) # 6.0"},{"prompt":"Write a Python script to convert a list of positive integers to a commaseparated string. [1, 2, 3, 4]","completion":"def convert_list_to_string(list): string = \\"\\" for num in list: string += str(num) + \\",\\" return string print(convert_list_to_string([1, 2, 3, 4])) # Output: \\"1,2,3,4,\\""},{"prompt":"Create a Time Series forecasting algorithm in Python using a Recurrent Neural Network for predicting the number of passengers for an airline company. Realworld historical data of airline passenger","completion":"import numpy as np import pandas as pd import matplotlib.pyplot as plt from keras.models import Sequential from keras.layers import LSTM, Dense # Load the data data = pd.read_csv('airline_passengers.csv') # Get the training and test set x_train = data.iloc[:90, 0].values y_train = data.iloc[:90, 1].values x_test = data.iloc[90:, 0].values y_test = data.iloc[90:, 1].values # Reshape the data x_train = np.reshape(x_train, (90, 1, 1)) x_test = np.reshape(x_test, (12, 1, 1)) # Build the model model = Sequential() model.add(LSTM(50, activation='relu', return_sequences=True, input_shape=(1, 1))) model.add(LSTM(50, activation='relu')) model.add(Dense(1)) model.compile(optimizer='adam', loss='mse') # Fit the model model.fit(x_train, y_train, epochs=100, batch_size=1) # Make the predictions y_pred = model.predict(x_test) # Plot the results plt.plot(y_test, label='Actual value') plt.plot(y_pred, label='Predicted value') plt.legend() plt.show()"},{"prompt":"Write a code to sort the words in a given sentence alphabetically. Sentence: Python is an interpreted highlevel programming language.","completion":"\\"\\"\\" Sort the words in a given sentence alphabetically \\"\\"\\" def sort_words_alphabetically(sentence): # Split sentence into words words_list = sentence.split() # Sort the words words_list.sort() # Join the words return ' '.join(words_list) if __name__ == '__main__': print(sort_words_alphabetically('Python is an interpreted high-level programming language.'))"},{"prompt":"Write a python program to return the average value of numbers in the given list. numbers = [2, 4, 6, 8]","completion":"def avg_list(numbers): total = 0 for x in numbers: total += x return total / len(numbers)"},{"prompt":"Write a python program to check if a list contains a pair of elements that sum up to a given total.","completion":"def is_sum_possible(nums, target_sum): num_set = set(nums) for num in num_set: if (target_sum - num) in num_set: return True return False"},{"prompt":"Write a Python program to classify the sentiment of a text, using a Dataset of labeled sentences. The movie was gre","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # load the dataset sentiments = pd.read_csv('sentiment_data.csv') # define the input data X = sentiments['text'] # define the labels y = sentiments['sentiment'] # vectorize the words cv = CountVectorizer() X = cv.fit_transform(X) # create and train the model model = MultinomialNB() model.fit(X, y) # test the input input = 'The movie was great' input = cv.transform([input]) result = model.predict(input)[0] # print the result print(result)"},{"prompt":"Generate a Python program to merge two sorted lists into one sorted list. List 1 = [1, 5, 8, 12] List 2 = [2, 3, 5, 6, 11]","completion":"def merge(list1, list2): merged_list = [] i = 0 j = 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 merged_list += list1[i:] merged_list += list2[j:] return merged_list list1 = [1, 5, 8, 12] list2 = [2, 3, 5, 6, 11] print(merge(list1, list2))"},{"prompt":"Write a Python function to create a list of 10 random numbers between 0 and 100.","completion":"import random def create_random_list(): result = [] for i in range(10): result.append(random.randint(0, 100)) return result"},{"prompt":"Edit a given Python program to improve its readability by following a PEP 8 style guide. def divide(a, b): q = a // b r = a q * b return q,r","completion":"def divide(a, b): \\"\\"\\"Divide two integers and returns the quotient and remainder. Args: a (int): The dividend. b (int): The divisor. Returns: int: The quotient and remainder. \\"\\"\\" q = a // b r = a - q * b return q, r"},{"prompt":"Using Docker, create a container with Python 3 installed.","completion":"docker run -it --name python3 -v /path/to/local/project:/path/to/container/project -p 80:80 python:3"},{"prompt":"Write a Python function to generate a random number between 1 and 5, given two numbers X and Y. 4, 8","completion":"import random def generate_random_number(x, y): start = min(x, y) end = max(x, y) return random.randint(start, end) result = generate_random_number(4, 8) print(result)"},{"prompt":"Create a Python program to generate random 9x9 Sudoku puzzles.","completion":"import random def generate_sudoku(): sudoku = [[0 for x in range(9)] for x in range(9)] for i in range(9): for j in range(9): sudoku[i][j] = random.randint(1, 9) return sudoku sudoku = generate_sudoku() for i in range(9): for j in range(9): print(sudoku[i][j], end=\\" \\") print()"},{"prompt":"Suggest a way to convert a given string to an integer in Python.","completion":"def to_int(string): '''This function takes a string and converts it to an integer.''' return int(string)"},{"prompt":"Create a code snippet in Python to sort the following array in ascending order. [5, 8, 2, 6]","completion":"def sort_ascending(arr): arr.sort() return arr result = sort_ascending([5, 8, 2, 6]) print(result)"},{"prompt":"Develop an Artificial Neural Network (ANN) Model in Python for predicting the value of a house given its attributes.","completion":"#import libraries import pandas as pd import numpy as np import tensorflow as tf #load the data df = pd.read_csv('house_data.csv') #create input and output variables X = df.drop('price', axis = 1).astype(np.float32) Y = df['price'].astype(np.float32) #split the data into train and test X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2) #define the model model = tf.keras.models.Sequential() model.add(tf.keras.layers.Dense(128, activation = 'relu', input_shape = (X_train.shape[1], ))) model.add(tf.keras.layers.Dense(1)) #compile and fit the model model.compile(optimizer = 'adam', loss = 'mse', metrics = ['mae']) model.fit(x = X_train, y = Y_train, epochs = 20, batch_size = 40, verbose = 1, validation_data = (X_test, Y_test))"},{"prompt":"Find all solutions to the rubik's cube using an algorithm in Python.","completion":"from collections import deque # A state is represented as a dictionary # Keys are upper-case letters R, L, U, etc. # Values are 3-tuples of length, position, orientation # Each 3-tuple corresponds to a row of length length, # which is positioned at position and oriented to orientation def gen_solve(state): # Generates a list of steps to solve the Rubiks Cube solve_steps = [] # Search the tree to solve the Rubiks Cube search_queue = deque([state]) while search_queue: cur_state = search_queue.popleft() # Generate the neighbors of the current state neighbors = generate_neighbors(cur_state) # Check each neighbor for neighbor in neighbors: # If the neighbor is the solved state, # add all the neighbor's parent steps to the result if is_solved(neighbor): solve_steps += get_parent_steps(neighbor) # Otherwise, add the neighbor's parent steps # and the neighbor to the queue else: search_queue.append(neighbor) return solve_steps"},{"prompt":"mplement a bubble sort algorithm in Python to sort a list of numbers from lowest to highest. [5, 3, 1, 4, 7]","completion":"def bubble_sort(array): for i in range(len(array)): for j in range(i + 1, len(array)): if array[i] > array[j]: array[i], array[j] = array[j], array[i] return array arr = [5, 3, 1, 4, 7] sorted_arr = bubble_sort(arr) print(sorted_arr)"},{"prompt":"Write a Python program to find the maximum and minimum value in a given dictionary. dict_a = {a: 1, b: 2, c: 3}","completion":"def max_min_dict(dict_a): max_val = -float('inf') min_val = float('inf') for key in dict_a: max_val = max(max_val, dict_a[key]) min_val = min(min_val, dict_a[key]) return max_val, min_val max_min_dict(dict_a)"},{"prompt":"Write a Python program to print the largest number from a given list. my_list = [1, 5, 10, 20, 8]","completion":"my_list = [1, 5, 10, 20, 8] largest = max(my_list) print(\\"The largest number from the given list is: \\" + str(largest))"},{"prompt":"Edit the following Python code to improve its readability. def calctrade(): c=50 b=50 while (c > 0 and b > 0): c– b=2 return c + b","completion":"def calculate_trade(): coal = 50 barley = 50 while coal > 0 and barley > 0: coal -= 1 barley -= 2 return coal + barley"},{"prompt":"Develop an AIdriven chatbot in Python that can answer basic questions about a sporting event. The sporting event is UEFA Euro 2020.","completion":"class Chatbot: def __init__(self): self.event = \\"UEFA Euro 2020\\" def respond(self, message): if 'when' in message: return 'UEFA Euro 2020 is scheduled to take place from 11th June 2021 to 11th July 2021.' elif 'where' in message: return 'UEFA Euro 2020 will be hosted in 11 cities across 12 countries.' elif 'teams' in message: return 'There will be 24 teams competing in UEFA Euro 20"},{"prompt":"Create a Python program to compute the value of the Fibonacci number at a specified position","completion":"def fibonacci(n): if n == 0 or n == 1: return n else: return fibonacci(n-1) + fibonacci(n-2)"},{"prompt":"Generate a Python program to convert a given amount of money in one currency to another given currency. amount = 10 from_currency = USD to_currency = EUR","completion":"import requests def currency_converter(amount, from_currency, to_currency): base_url = \\"https://api.exchangeratesapi.io/latest\\" URL = base_url + \\"?base=\\" + from_currency + \\"&symbols=\\" + to_currency r = requests.get(URL) response = r.json() rate = response['rates'][to_currency] return rate * amount"},{"prompt":"Write a Python program to print a given number with commas separating the thousands. 12345678","completion":"n = 12345678 # method 1 print(\\"{:,}\\".format(n)) # method 2 print(f\\"{n:,}\\")"},{"prompt":"Create a Python script that searches the string for a given pattern and returns the starting position. Hello world","completion":"def find_pattern_position(string, pattern): for i in range(len(string) - len(pattern) + 1): if string[i:i+len(pattern)] == pattern: return i else: return -1 position = find_pattern_position(\\"Hello world\\", \\"world\\") print(position)"},{"prompt":"Write a Python program to generate a random password","completion":"import string import random def generate_password(length): chars = string.ascii_letters + string.digits password = \\"\\".join(random.choice(chars) for i in range(length)) return password length = int(input(\\"Enter the desired password length: \\")) password = generate_password(length) print(\\"Generated password is:\\", password)"},{"prompt":"Develop an AIbased program in Python that can recognize and label speech.","completion":"import speech_recognition as sr from collections import defaultdict sentences = defaultdict(list) r = sr.Recognizer() with sr.Microphone() as source: print(\\"Speak the sentence:\\") audio = r.listen(source) sentence = r.recognize_google(audio) sentences[sentence].append(audio)"},{"prompt":"Write a python program to detect the occurrence of a given string in another large string. String 1: This is a test. String 2: test","completion":"def str_find(str1, str2): return str1.find(str2) != -1 str_find(\\"This is a test.\\", \\"test\\")"},{"prompt":"Write a python program for binary search [2, 5, 7, 9, 11, 15]","completion":"def binarySearch(arr, target): left = 0 right = len(arr) - 1 while left <= right: mid = (left + right) // 2 if arr[mid] == target: return mid elif arr[mid] > target: right = mid - 1 else: left = mid + 1 return -1"},{"prompt":"Generate a random list of numbers ranging from 1 to 10 without duplicates in Python. Not applicable","completion":"import random # Generate a list of numbers ranging from 1 to 10 without duplicates numbers = list(range(1,11)) random.shuffle(numbers) # Print shuffled numbers print(numbers)"},{"prompt":"Given the following data points, generate a polynomial equation using Python. x = [2, 0, 2] y = [1, 4, 9]","completion":"import numpy as np x = np.array([-2, 0, 2]) y = np.array([1, 4, 9]) z = np.polyfit(x, y, 2) equation = np.poly1d(z) print(equation) # Output: # 2 # -6.66 x + 5.0 x + 1.0"},{"prompt":"Tackle the task of optimizing a given Python program for faster execution. # Program to find the sum of two numbers def add_numbers(a, b): return a + b","completion":"# Program to find the sum of two numbers def add_numbers(a, b): # Use bitwise operators instead of normal arithmetic operations # as they are much faster and more efficient return a ^ b if a <= b else b ^ a if b <= a else a ^ b"},{"prompt":"Generate a python algorithm to swap two elements in an array","completion":"def swap_array(arr, pos_1, pos_2): arr[pos_1], arr[pos_2] = arr[pos_2], arr[pos_1] return arr"},{"prompt":"Create a python program to remove odd numbers from a list of numbers. data = [10, 20, 30, 5, 6, 7]","completion":"def remove_odd_numbers(arr): result = [i for i in arr if i % 2 == 0] return result"},{"prompt":"mplement a function in Python that takes a number N and returns the sum of all the positive numbers up to N (inclusive). 10","completion":"\\"\\"\\" Implement a function in Python that takes a number N and returns the sum of all the positive numbers up to N (inclusive). \\"\\"\\" def sum_numbers(n): total = 0 for num in range(n+1): if num > 0: total += num return total if __name__ == '__main__': n = 10 print(sum_numbers(n)) # 55"},{"prompt":"Create a RESTful web API with Flask by making a endpoint for a todo list application. This endpoint should be able to create an item, get an item by its ID, update an item, and delete an item. Not applicable","completion":"from flask import Flask, request, jsonify app = Flask(__name__) tasks = [ { 'id': 1, 'title': 'Buy groceries', 'description': 'Milk, Cheese, Pizza, Fruit, Tylenol', 'done': False }, { 'id': 2, 'title': 'Learn Python', 'description': 'Need to find a good Python tutorial on the web', 'done': False } ] @app.route('/tasks', methods=['GET']) def get_tasks(): return jsonify(tasks) @app.route('/tasks/<int:id>', methods=['GET']) def get_task(id): task = [task for task in tasks if task['id'] == id] return jsonify(task[0]) @app.route('/tasks', methods=['POST']) def create_task(): data = request.get_json() new_task = { 'id': len(tasks) + 1, 'title': data['title'], 'description': data['description'], 'done': False } tasks.append(new_task) return jsonify(tasks) @app.route('/tasks/<int:id>', methods=['PUT']) def update_task(id): data = request.get_json() task_list = [task for task in tasks if task['id'] == id] if len(task_list) != 0: task_list[0]['title'] = data['title'] task_list[0]['description'] = data['description'] task_list[0]['done'] = data['done'] return jsonify(task_list[0]) else: return 'Task not found!' @app.route('/tasks/<int:id>', methods=['DELETE']) def delete_task(id): task_list = [task for task in tasks if task['id']==id] if len(task_list) != 0: tasks.remove(task_list[0]) return jsonify(tasks) else: return 'Task not found!'"},{"prompt":"Create a function in Python that solves the Fibonacci sequence.","completion":"def fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return fibonacci(n-1)+fibonacci(n-2)"},{"prompt":"Generate code to make a chatbot for FAQs (Frequently Asked Questions) using the RASA platform. Not applicable","completion":"# coding: utf-8 # # FILE: rasa_chatbot.py # # AUTHOR: Rohan Muthukumar # DATE CREATED: 06/10/2020 # # DESCRIPTION: This file contains code for building an FAQ chatbot # using the RASA NLU platform. # # USAGE: python rasa_chatbot.py # # from rasa_nlu.training_data import load_data from rasa_nlu.model import Trainer from rasa_nlu import config # Loading training data training_data = load_data(\\"faq.json\\") # Configuring pipelines for model trainer = Trainer(config.load(\\"config.yml\\")) # Training the model interpreter = trainer.train(training_data) # Prints output of interpreter print(interpreter.parse('what can i do on this chatbot?'))"},{"prompt":"Develop a machine learning model in Python that can predict the house prices in California.","completion":"import pandas as pd import numpy as np from sklearn import metrics from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestRegressor from sklearn.preprocessing import StandardScaler # Load and prepare the data data = pd.read_csv('./housing.csv') X, y = data.drop('median_house_value', axis=1), data.median_house_value X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42) # Preprocess the data sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test) # Create and train the model model = RandomForestRegressor(n_estimators=100).fit(X_train, y_train) # Evaluate the model y_pred = model.predict(X_test) print(metrics.mean_absolute_error(y_test, y_pred))"},{"prompt":"Create a code in Python to check if the number provided is a prime number","completion":"def is_prime(num): if num <= 1: return False for i in range(2, num): if num % i == 0: return False return True"},{"prompt":"Generate a Python program that creates an array of integers between two specified numbers","completion":"def create_array(start, end): array = [] for i in range(start, end+1): array.append(i) return array"},{"prompt":"Design a Python program to sort a list of integers in descending order Input_list = [1, 6, 2, 4, 5, 3]","completion":"Input_list = [1, 6, 2, 4, 5, 3] # Using Bubble Sort to sort the list def sort_list_descending(Input_list): for i in range(0, len(Input_list)-1): for j in range(0, len(Input_list)-i-1): if Input_list[j] < Input_list[j+1]: Input_list[j], Input_list[j+1] = Input_list[j+1], Input_list[j] return Input_list # Print the sorted list sorted_list = sort_list_descending(Input_list) print(sorted_list)"},{"prompt":"Create a program in Python that takes a string as input and returns a new string with the words of the input string reversed, but with the same order of characters in each word. Not applicable","completion":"def revString(s): # Split the string into words words = s.split(' ') new_words = [] # Reverse each word, but keep the order of the characters for word in words: new_word = \\"\\" for i in range(len(word)): new_word += word[len(word) - i - 1] new_words.append(new_word) # Join the reversed words new_string = ' '.join(new_words) return new_string print(revString(\\"Hello World\\")) # prints \\"olleH dlroW\\""},{"prompt":"Write a Python code to implement a recursive binary search algorithm on a predefined sorted list.","completion":"def binarySearch(arr, start, end, x): if end >= start: mid = start + (end - start) // 2 if arr[mid] == x: return mid elif arr[mid] > x: return binarySearch(arr, start, mid - 1, x) else: return binarySearch(arr, mid + 1, end, x) else: return -1"},{"prompt":"Generate a random number between 0 and 5 using the Python Random module.","completion":"import random num = random.randint(0, 5) print(num)"},{"prompt":"Generate a Python program that takes as its inputs two lists of numbers and returns the sum of the elements in mutually overlapping positions. two lists [1, 2, 3] and [4, 5, 6]","completion":"def sum_overlap(list1, list2): result = 0 # Loop through the lists and add overlapping elements for i in range(len(list1)): if i < len(list2): result += list1[i] + list2[i] # Return result return result list1 = [1, 2, 3] list2 = [4, 5, 6] result = sum_overlap(list1, list2) print(result) # Prints 12"},{"prompt":"Design a Python script to calculate the sum of the squares of the first 100 natural numbers","completion":"def sum_of_squares(n): total = 0 for i in range(1, n+1): total += i ** 2 return total print(sum_of_squares(100))"},{"prompt":"Create a Python function to remove the items in a list that appear multiple times. [Apple, Banana, Orange, Apple, Banana]","completion":"def remove_extras(lst): # Create a new list with unique items unique_items = [] for item in lst: if item not in unique_items: unique_items.append(item) # Return the list with unique items return unique_items test = [\\"Apple\\", \\"Banana\\", \\"Orange\\", \\"Apple\\", \\"Banana\\"] print(remove_extras(test))"},{"prompt":"Create an AI agent in Python using the OpenAI Gym library that can play a game of Pong. Not applicable","completion":"import gym import numpy as np env = gym.make('Pong-v0') # hyper-parameters num_episodes = 1000 max_steps_per_episode = 1000 learning_rate = 0.1 discount_rate = 0.95 # set exploration rate exploration_rate = 1 max_exploration_rate = 1 min_exploration_rate = 0.01 exploration_decay_rate = 0.001 # training the agent q_table = np.zeros((env.observation_space.shape[0], env.action_space.n)) # start game for episode in range(num_episodes): state = env.reset() done = False total_rewards = 0 for step in range(max_steps_per_episode): # choose action exploration_rate_threshold = np.random.uniform(0, 1) if exploration_rate_threshold > exploration_rate: action = np.argmax(q_table[state]) else: action = env.action_space.sample() # play one turn new_state, reward, done, info = env.step(action) # update q-table q_table[state, action] = (1 - learning_rate) * q_table[state, action] + learning_rate * ( reward + discount_rate * np.max(q_table[new_state])) # reduce exploration rate exploration_rate = min_exploration_rate + (max_exploration_rate - min_exploration_rate) * np.exp(-exploration_decay_rate*episode) total_rewards += reward state = new_state if done == True: break print('total rewards:', total_rewards)"},{"prompt":"Build a Python program which takes an integer number as input and checks if it is an Armstrong number. A number (integer).","completion":"def isArmstrong(number): sum = 0 temp = number while temp > 0: remainder = temp % 10 sum += remainder ** 3 temp //= 10 if (number == sum): return True else: return False number = 153 if (isArmstrong(number)): print(number,\\"is an Armstrong number\\") else: print(number,\\"is not an Armstrong number\\")"},{"prompt":"Create a code to identify the highest common factor of two given numbers in Python 90 and 99","completion":"\\"\\"\\" Create a code to identify the highest common factor of two given numbers in Python \\"\\"\\" def gcd(a, b): # base case if (a == 0): return b return gcd(b%a, a) a = 90 b = 99 # print the result print(gcd(a, b))"},{"prompt":"Create a Python program which takes a list of strings as input and outputs a dictionary containing the count of each string. A list of strings including: ['Python', 'Java', 'C', 'Python', 'JavaScript']","completion":"string_list = ['Python', 'Java', 'C', 'Python', 'JavaScript'] string_dict = {} for string in string_list: if string in string_dict: string_dict[string] += 1 else: string_dict[string] = 1 print(string_dict) # Output: {'Python': 2, 'Java': 2, 'C': 1, 'JavaScript': 1}"},{"prompt":"Create a Python script to illustrate the concept of Threading.","completion":"from threading import Thread def worker(): print(\\"I am a worker\\") threads = list() for _ in range(5): th = Thread(target=worker) threads.append(th) th.start() for th in threads: th.join() print(\\"Done\\")"},{"prompt":"Create a Python script that scrapes product prices from an Amazon page. The script should parse through the HTML of the page and extract the price of the product and the currency it is denominated in. https://www.amazon.com/gp/product/B076H6PW2F","completion":"import requests from bs4 import BeautifulSoup url= 'https://www.amazon.com/gp/product/B076H6PW2F' headers = { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36' } page = requests.get(url, headers=headers) soup = BeautifulSoup(page.content, 'html.parser') price = soup.find(id=\\"priceblock_ourprice\\").get_text() split_price = price.split() currency = split_price[0] amount = split_price[1] print(f\\"Price: {currency} {amount}\\")"},{"prompt":"Write a Python function that takes two lists as input and returns a new list containing the intersection of the two lists. [1, 2, 3, 4], [3, 4, 5, 6]","completion":"def intersection_of_lists(list1, list2): return [value for value in list1 if value in list2] result = intersection_of_lists([1, 2, 3, 4], [3, 4, 5, 6]) print(result) # [3, 4]"},{"prompt":"Using a builtin sorting algorithm, write a Python program to sort a given list of integers. [3, 4, 6, 1, 9, 5, 2]","completion":"def sort_list(arr): return sorted(arr) my_list = [3, 4, 6, 1, 9, 5, 2] sorted_list = sort_list(my_list) print(sorted_list)"},{"prompt":"Generate code for a Python class that is used to store user accounts. This class should have fields for username, email, and settings. Besides the standard getters and setters, it should contain methods for resetting the password and authenticating the user. Not applicable","completion":"class Account: def __init__(self, username, email, settings): self.username = username self.email = email self.settings = settings def get_username(self): return self.username def set_username(self, username): self.username = username def get_email(self): return self.email def set_email(self, email): self.email = email def get_settings(self): return self.settings def set_settings(self, settings): self.settings = settings def reset_password(self): # create a new password and send it to the account email pass def authenticate(self, password): # check if the password matches the user account and return true pass"},{"prompt":"Generate a Python program to optimize an array of numbers A = [5, 4, 8, 9, 6, 1, 4, 7]","completion":"def optimize_array(A): A.sort() return A print(optimize_array([5, 4, 8, 9, 6, 1, -4, 7]))"},{"prompt":"Create a class in Python that takes two parameters and prints them as strings.","completion":"class MyClass: def __init__(self, param1, param2): self.param1 = param1 self.param2 = param2 def print_parameters(self): print(str(self.param1) + \\", \\" + str(self.param2))"},{"prompt":"Write a Python script to fold a given array of integers into two halves. [1, 7, 3, 4, 9]","completion":"def foldArray(arr): n = len(arr) if n % 2 != 0: mid = int(n / 2) + 1 else: mid = int(n / 2) left = arr[:mid] right = arr[mid:] newarr = list(map(lambda x,y:(x+y),left,right[::-1])) return newarr arr = [1, 7, 3, 4, 9] print(foldArray(arr))"},{"prompt":"Can you create a function in python code to flatten a nested dictionary?","completion":"def flatten_dict(d): def items(): for key, value in d.items(): if isinstance(value, dict): for subkey, subvalue in flatten_dict(value).items(): yield key + '.' + subkey, subvalue else: yield key, value return dict(items())"},{"prompt":"Print the first 10 Fibonacci numbers.","completion":"# Python program to print the first 10 Fibonacci numbers def Fibonacci(n): f1 = 0 f2 = 1 if (n < 1): return for x in range(0, n): print(f2, end = \\" \\") next = f1 + f2 f1 = f2 f2 = next Fibonacci(10)"},{"prompt":"Develop an algorithm to generate a random integer between 0 and n in Python. n = 6","completion":"import random def random_number(n): return random.randint(0, n) random_num = random_number(6) print(random_num)"},{"prompt":"Write a function in Python to remove duplicates from a list. [2, 2, 3, 4, 5, 5]","completion":"def remove_duplicates(nums): # create a set to remove duplicates unique_list = set(nums) # convert the set back to a list nums = list(unique_list) return nums input_list = [2, 2, 3, 4, 5, 5] result = remove_duplicates(input_list) print(result)"},{"prompt":"Create a function in Python that will take a sentence as an argument and return a boolean depending on whether or not it is a palindrome. sentence = Able was I ere I saw Elba","completion":"def is_palindrome(sentence): rev=(sentence.lower()).replace(\\" \\",\\"\\") return rev == rev[::-1]"},{"prompt":"Write a Python script to print all prime numbers less than or equal to a given number. 25","completion":"# all prime numbers less than or equal to 25 def is_prime(n): if n <= 1: return False if n <= 3: return True if n % 2 == 0 or n % 3 == 0: return False i = 5 while i * i <= n: if n % i == 0 or n % (i + 2) == 0: return False i = i + 6 return True # generate list of primes primes = [] for x in range(2, 26): if is_prime(x): primes.append(x) # print the list print(primes)"},{"prompt":"Write a Python program to find the longest substring in a given string that contains a given set of characters. String: abcdabcefg Characters: abc","completion":"def find_longest_substring(s, characters): longest_length = 0 longest_substring = \\"\\" for i in range(len(s)): for j in range(i, len(s)): substring = s[i:j+1] if set(substring).issubset(characters): if len(substring) > longest_length: longest_length = len(substring) longest_substring = substring return longest_substring"},{"prompt":"Create a _JSON serializer_ for a given Python data structure. data = { 'name': 'Alice', 'age': 22, 'hobbies': ['coding', 'guitar'] }","completion":"import json data = { 'name': 'Alice', 'age': 22, 'hobbies': ['coding', 'guitar'] } json_data = json.dumps(data) print(json_data)"},{"prompt":"Write a Python program to analyze the sentiment of a given Twitter account. Example Twitter Handle: @Apple","completion":"import tweepy import nltk import numpy as np import matplotlib.pyplot as plt # Get the user's tweets consumer_key = 'YOUR_CONSUMER_KEY' consumer_secret = 'YOUR_CONSUMER_SECRET' access_token = 'YOUR_ACCESS_TOKEN' access_token_secret = 'YOUR_ACCESS_TOKEN_SECRET' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) user = '@Apple' tweets = api.user_timeline(screen_name=user, count=200, include_rts=False) # Analyze the sentiment tweet_data = [[tweet.text] for tweet in tweets] sentiment_data = [] for t in tweet_data: sentiment_data.append(nltk.sentiment.util.extract_unigram_feats(t, top_n=30)) sentiment_data = np.array(sentiment_data) # Plot the sentiment of the user's tweets plt.plot(np.arange(len(sentiment_data)),sentiment_data[:,1], '-b') plt.title(\\"Sentiment of @Apple's Tweets\\") plt.xlabel('Tweet') plt.ylabel('Sentiment') plt.show()"},{"prompt":"Create a class in Python to extend object class","completion":"class MyClass(object): pass"},{"prompt":"Write a Python program to check if a given list of strings consists only of unique elements. my_list = ['cat', 'dog', 'cat']","completion":"def check_unique_list(my_list): unique_list =[] for i in my_list: if i not in unique_list: unique_list.append(i) if len(unique_list) == len(my_list): return True else: return False"},{"prompt":"Write a Python program to create an array containing 10 random numbers from 1 to 10 and sort them in ascending order.","completion":"import numpy as np # Create an array of 10 random numbers between 1 to 10 arr = np.random.randint(low=1, high=11, size=10) # Sort the array in ascending order arr.sort() print(arr)"},{"prompt":"Given three numbers, write a Python program that prints the largest among them.","completion":"def max_of_three(x, y, z): max_num = x if y > max_num: max_num = y if z > max_num: max_num = z return max_num"},{"prompt":"Create a Python program that uses a random forest classifier to classify customer feedback into two classes: positive and negative. [ {text:This is a great product, label:positive}, {text:I'm not happy with this product, label:negative}, {text:This product is awesome, label:positive}, {text:This product is terrible, label:negative} ]","completion":"import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.ensemble import RandomForestClassifier data = pd.DataFrame(input) vectorizer = TfidfVectorizer() X = vectorizer.fit_transform(data.text) y = data.label model = RandomForestClassifier() model.fit(X, y) # Predictions predictions = model.predict(X) print(predictions)"},{"prompt":"Design a python code for validating an email address.","completion":"import re def is_valid_email(email): regex = '^w+([.-]?w+)*@w+([.-]?w+)*(.w{2,3})+' if re.search(regex, email): return True else: return False"},{"prompt":"Write a python program to calculate the discount given a list of items and their respective price and quantity. items = {“Shirt”: [20, 3], “Pants”: [30, 2] }","completion":"def discount(items): ''' This function takes a dictionary of items and their respective price and quantity as input and calculates the discount. ''' # calculate the total cost total_cost = 0 for item, price in items.items(): total_cost += price[0] * price[1] # calculate the discount discount = 0.2 * total_cost return discount"},{"prompt":"Write Python code to count the frequency of words in a given text. Text: It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.","completion":"import collections text = \\"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout.\\" words = text.split() word_counts = collections.Counter(words) for word, count in word_counts.items(): print(f\\"{word}: {count}\\")"},{"prompt":"Create a python program that prints the same line 10 times.","completion":"for i in range(10): print(\\"This line will be printed 10 times\\")"},{"prompt":"Write a Python program to calculate the total cost of a shopping cart containing multiple items. The program should take a list of items and their prices as input and output the total cost. items = {'apple': 2.99, 'banana': 0.99, 'mango': 4.98}","completion":"totalCost = 0 for item, price in items.items(): totalCost += price print(f'Total cost of the cart is {totalCost}')"},{"prompt":"Create a program to classify movie genres using basic machine learning techniques in Python","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score # Load in the dataset data = pd.read_csv('movie_dataset.csv') # Set the features and target to X and y respectively X = data.drop(columns=['genre']) y = data['genre'] # Split into test and training sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1) # Initialize the Random Forest Classifier clf = RandomForestClassifier() # Fit the model clf.fit(X_train, y_train) # Make predictions y_pred = clf.predict(X_test) # Calculate accuracy accuracy = accuracy_score(y_test, y_pred) # Print accuracy print('Accuracy of model is: ', accuracy)"},{"prompt":"Create a Python program that reads in a list of strings from the keyboard and sorts them alphabetically.","completion":"sorted_list = [] input_strings = input(\\"Enter a list of strings, separated by spaces: \\") input_strings = input_strings.split() for string in input_strings: sorted_list.append(string) sorted_list.sort() print(sorted_list)"},{"prompt":"Write a Python program to fetch all the emails from a given mailbox using IMAP. Not applicable","completion":"import imaplib, email #Connect to the mail server mail = imaplib.IMAP4_SSL('imap.example.com') #Login mail.login('username', 'password') #Select the mailbox mail.select('INBOX') #Search for emails _, data = mail.search(None, 'ALL') #Fetch the emails for num in data[0].split(): _, data = mail.fetch(num, '(RFC822)') email_message = email.message_from_bytes(data[0][1]) #Process the email"},{"prompt":"Create a Python script that takes an input of two numbers and returns the pair in a list. 10, 20","completion":"def pair(num_1, num_2): return [num_1, num_2] print(pair(10, 20))"},{"prompt":"Develop a program in Python that can convert a given temperature from Celsius to Fahrenheit.","completion":"def celsius_to_fahrenheit(celsius): return celsius * (9/5) + 32 temperature = celsius_to_fahrenheit(32) print(\\"32°C is equal to %.2f°F\\" % temperature)"},{"prompt":"Create a basic Python program to list all the odd numbers from 0 to a userspecified number user_number = 10","completion":"def odd_numbers(num): for n in range(num+1): if n % 2 != 0: print(n) odd_numbers(user_number) # Output: 1, 3, 5, 7, 9"},{"prompt":"Build a Python class to represent a math vector in 3D space.","completion":"class Vector3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def magnitude(self): return (self.x**2 + self.y**2 + self.z**2)**0.5 def normalize(self): magnitude = self.magnitude() self.x /= magnitude self.y /= magnitude self.z /= magnitude"},{"prompt":"Perform linear regression on a set of data points using only basic Python syntax and libraries. X=[1,3,4,5] Y=[0,3,2,5]","completion":"# import the necessary libraries import numpy as np from sklearn.linear_model import LinearRegression # create the arrays x = np.array(X).reshape(-1,1) y = np.array(Y).reshape(-1,1) # create and fit the model model = LinearRegression() model.fit(x, y) # print the model coefficients print('Intercept: ', model.intercept_) print('Coefficient: ', model.coef_)"},{"prompt":"Create a Python program that prints out the words in a sentence in reverse order. I love programming.","completion":"def reverse_words(sentence): words = sentence.split() words.reverse() return \\" \\".join(words) print(reverse_words(\\"I love programming.\\"))"},{"prompt":"Create a function in Python to execute the following rule: given an array of integers, find the pair of adjacent elements that has the largest sum and print the sum. [5, 0, 1, 7, 20]","completion":"def find_largest_sum(lst): largest_sum = 0 for i in range(len(lst) - 1): current_sum = lst[i] + lst[i+1] if current_sum > largest_sum: largest_sum = current_sum return largest_sum"},{"prompt":"Create a Python program to retrieve the list of elements in a given set.","completion":"def get_set_elements(s): return list(s) my_set = {1, 2, 3, 4} result = get_set_elements(my_set) print(result) # Outputs: [1, 2, 3, 4]"},{"prompt":"Write a Python program to calculate the total electricity bill given the rate per kwh for domestic loads. rate = 40 consumption (kwh) = 300","completion":"def calculate_bill(rate, consumption): bill = rate * consumption print(\\"Your total electricity bill is Rs. {}\\".format(bill)) calculate_bill(40, 300)"},{"prompt":"Develop a machine learning model with Python to classify news articles or tweets into a set of predefined categories. Not applicable","completion":"from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.linear_model import LogisticRegression # load the data data = # List of texts and their categories x = [text for (text, category) in data] y = [category for (text, category) in data] # transform the texts to tf-idf vectors vec = TfidfVectorizer() X = vec.fit_transform(x) # train classifier clf = LogisticRegression() clf.fit(X, y)"},{"prompt":"Write a Python program to measure the similarity between two pieces of text. The program should accept two strings and return a numerical value indicating the similarity of the strings on a scale of 0 to 1. Text 1: This is a nice day. Text 2: It looks like a pleasant day.","completion":"import nltk text1 = 'This is a nice day.' text2 = 'It looks like a pleasant day.' text1_tokens = nltk.word_tokenize(text1) text2_tokens = nltk.word_tokenize(text2) similarity_score = len(set(text1_tokens).intersection(text2_tokens)) / float(len(set(text1_tokens).union(text2_tokens))) print(similarity_score) // Output: 0.5"},{"prompt":"Design a function in Python to count the total number of prime numbers between the two given numbers (inclusive). Start = 10, End = 20","completion":"def count_primes(start, end): count = 0 for i in range(start, end+1): if is_prime(i): count += 1 return count def is_prime(num): for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True"},{"prompt":"Create a web scraper in Python using Selenium to extract the contents of a webpage. URL: https://en.wikipedia.org/wiki/Pytho","completion":"from selenium import webdriver url = 'https://en.wikipedia.org/wiki/Python' driver = webdriver.Chrome() driver.get(url) page_content = driver.page_source driver.close() # Process page_content"},{"prompt":"Create a textbased user interface for a simple game using Python. The game should allow the user to start a game, make moves, and view the game status. Not applicable","completion":"import os import sys class game: def __init__(self): self.board = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] self.turn = 'X' self.score = [0, 0] def move(self, x, y): self.board[x][y] = self.turn if self.turn == 'X': self.turn = 'O' else: self.turn = 'X' def display(self): os.system('clear') for i in range(3): print(self.board[i]) def winCondition(self): for player in ['X', 'O']: # check rows for i in range(3): if self.board[i] == [player, player, player]: self.score[0 if player == 'X' else 1] += 1 return True # check columns for i in range(3): if self.board[0][i] == player and self.board[1][i] == player and self.board[2][i] == player: self.score[0 if player == 'X' else 1] += 1 return True # check diagonals if self.board[0][0] == player and self.board[1][1] == player and self.board[2][2] == player: self.score[0 if player == 'X' else 1] += 1 return True if self.board[2][0] == player and self.board[1][1] == player and self.board[0][2] == player: self.score[0 if player == 'X' else 1] += 1 return True return False def main(): myGame = game() while True: myGame.display() print(\\"Turn: {}\\".format(myGame.turn)) move = input(\\"Please input move (x, y): \\").split(',') x, y = int(move[0]), int(move[1]) if 0 <= x < 3 and 0 <= y < 3 and myGame.board[x][y] == 0: myGame.move(x, y) if myGame.winCondition(): myGame.display() print(\\"Player X: {} | Player O: {}\\".format(myGame.score[0], myGame.score[1])) sys.exit(0) if __name__ == \\"__main__\\": main()"},{"prompt":"Write a Python algorithm to find the Minimum Spanning Tree using Prim's algorithm.","completion":"def prim(G, start): node = start visited = set() edges = [] visited.add(node) while len(visited) < G.num_nodes: min_edge = float(\\"inf\\") for neighbor, weight in G.neighbors[node]: if neighbor not in visited and weight < min_edge: min_edge = weight new_node = neighbor edges.append((node, new_node, min_edge)) visited.add(new_node) node = new_node return edges"},{"prompt":"Generate a Python program that takes one string and returns the most frequently used character from the string. string = test string","completion":"def most_frequent_character(string): counts = dict() max = -1 character = '' for char in string: if char in counts: counts[char] += 1 else: counts[char] = 1 if counts[char] > max: max = counts[char] character = char return character"},{"prompt":"Create a web crawler in Python that collects data from specific pages. https://en.wikipedia.org/wiki/Python_(programming_language)","completion":"import requests from bs4 import BeautifulSoup url = \\"https://en.wikipedia.org/wiki/Python_(programming_language)\\" r = requests.get(url) soup = BeautifulSoup(r.content) # get page title title = soup.find('h1', attrs={'id': 'firstHeading'}).text # get all div nodes with class divs = soup.find_all('div', class_='mw-body-content') # get all links links = [] for div in divs: links.extend(div.find_all('a')) # print title and links print(\\"Page title: {}\\".format(title)) for link in links: print(\\"Link: {}\\".format(link['href']))"},{"prompt":"Develop a program in Python to rotate the elements of an array to the right by K times. my_list = [1,2,3,4,5]","completion":"def rotate_k_times(my_list, k): rotated_list = my_list.copy() for i in range(k): rotated_list = [rotated_list[-1]] + rotated_list[:-1] return rotated_list if __name__ == '__main__': print(rotate_k_times(my_list, 3))"},{"prompt":"Write a Python program that calculates the total amount of a particular item in a list. list = [{ item: apple, quantity: 5, price: 2 }, { item: bread, quantity: 2, price: 3 }]","completion":"def total_amount(lst): # Initializing total total = 0 # Iterate through each dictionary # and calculate total for dic in lst: total += (dic['quantity'] * dic['price']) # Returning total return total # Driver Code lst = [{ \\"item\\": \\"apple\\", \\"quantity\\": 5, \\"price\\": 2 }, { \\"item\\": \\"bread\\", \\"quantity\\": 2, \\"price\\": 3 }] print(\\"Total Amount :\\", total_amount(lst))"},{"prompt":"Create a Python code to traverse a binary tree in depthfirst search order.","completion":"def dfs(root): if root is not None: print(root.data) dfs(root.left) dfs(root.right)"},{"prompt":"Sort the given list of numbers in ascending order using quick sort in Python. arr = [7, 4, 6, 5, 9, 4]","completion":"def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"prompt":"Evaluate the following code for a Python program that takes two numbers as input and outputs the maximum of the inputs. Not applicable","completion":"def max_of_two(x, y): if x > y: return x return y # This code is correct and will output the maximum value of the two numbers."},{"prompt":"Develop a game AI in Python for the game of Go.","completion":"import numpy as np def evaluate(board, player_turn): moves = find_valid_moves(board) if len(moves) == 0: return 0 scores = [] for move in moves: board_copy = board.copy() board_copy[move] = player_turn scores.append(evaluate(board_copy, -player_turn)) if player_turn == 1: return max(scores) else: return min(scores) def find_valid_moves(board): moves = [] for i in range(9): for j in range(9): if board[i][j] == 0: moves.append((i, j)) return moves def play_game(board, player_turn): while True: valid_moves = find_valid_moves(board) if len(valid_moves) == 0: return 0 best_move = None best_score = -float('inf') for move in valid_moves: board_copy = board.copy() board_copy[move] = player_turn score = evaluate(board_copy, -player_turn) if score > best_score: best_score = score best_move = move board[best_move] = player_turn if has_won(board, player_turn): return 1 player_turn = -player_turn"},{"prompt":"Refactor a Python function with a long code block, so that it has descriptive function names, is objectoriented, and more efficient. def long_code_block(input_a, input_b): result = 0 for i in range(len(input_a)): for j in range(len(input_b)): if input_b[j] == input_a[i]: result = result + 1 return resul","completion":"def count_matches(list_a, list_b): count = 0 for item_a in list_a: for item_b in list_b: if item_b == item_a: count += 1 return count"},{"prompt":"Write a Python program that takes in a list of strings and prints out the string with the most characters [“Hello”, “World”, “How”, “Are”, “You”]","completion":"longest_str = \\"\\" for string in list_of_strings: if len(string) > len(longest_str): longest_str = string print(longest_str)"},{"prompt":"Generate a function to write the Fibonacci series in Python","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a # when n is 0 elif n == 1: return b # when n is 1 else: for i in range(2,n): c = a + b a = b b = c return b"},{"prompt":"Create a Python function that takes two webpages and returns True if the pages are similar, and False otherwise. Not applicable","completion":"import requests from bs4 import BeautifulSoup def compare_pages(url1, url2): page1_data = requests.get(url1).text page2_data = requests.get(url2).text page1_soup = BeautifulSoup(page1_data, 'html.parser') page2_soup = BeautifulSoup(page2_data, 'html.parser') page1_text = page1_soup.get_text() page2_text = page2_soup.get_text() # if there are fewer than 3 differences, they are considered similar diffs = 0 for i in range(min(len(page1_text), len(page2_text))): if page1_text[i] != page2_text[i]: diffs += 1 if diffs > 3: return False # if the pages were different length, they are considered different if len(page1_text) != len(page2_text): return False return True"},{"prompt":"Generate a function in Python to find the length of a given string.","completion":"def find_length(string): length = 0 for i in string: length = length+1 return length"},{"prompt":"Develop a python program to find the maximum sum of nonconsecutive elements of a given integer list. [2, 3, 5, 6, 20, 9]","completion":"def find_max_non_consecutive_sum(arr): incl = 0 excl = 0 for i in arr: new_excl = max(incl, excl) incl = excl + i excl = new_excl return max(incl, excl)"},{"prompt":"Explain what the following Python code does. start, end = 0, 5 [i**2 for i in range(start, end)]","completion":"The code creates a list of the squares of numbers from 0 to 5, inclusive. It does this by using a list comprehension and the range() function. The range() function takes in two parameters, the starting point (start) and the ending point (end). In this case, the starting point is 0 and the ending point is 5, meaning the list will include the numbers 0, 1, 2, 3, 4 and 5. The list comprehension then takes each of these numbers and squares them, giving us the list [0, 1, 4, 9, 16, 25]."},{"prompt":"Generate a Python program which implements a greedy algorithm to find the maximum number of activities possible in a given timeline. [[1, 4], [3, 5], [0, 6], [5, 7], [3, 8], [5, 9], [6, 10], [8, 11], [8, 12], [2, 13], [12, 14]","completion":"def activity_selection_greedy(arr): n = len(arr) result = [] i = 0 result.append(arr[i]) for j in range(1,n): if arr[j][0] >= arr[i][1]: result.append(arr[j]) i = j return result result = activity_selection_greedy([[1, 4], [3, 5], [0, 6], [5, 7], [3, 8], [5, 9], [6, 10], [8, 11], [8, 12], [2, 13], [12, 14]]) print(result)"},{"prompt":"Create a program that lints and checks a given python source code for correctness.","completion":"import lint def check_code(source_code): lint.py_run(source_code, \\"--report=yes\\")"},{"prompt":"Create a code solution to generate histograms in Python. Not applicable","completion":"import matplotlib.pyplot as plt # Use randomly generated data data = np.random.normal(size=1000) # Generate histogram plt.hist(data, bins=30, edgecolor='k', alpha=0.7) plt.xlabel(\\"Value\\") plt.ylabel(\\"Frequency\\") # Show histogram plt.show()"},{"prompt":"Create a REST API for a simple hello world application in Python. The API should have endpoints for greeting a visitor and returning the current date and time. Not applicable","completion":"# main.py import datetime from flask import Flask, jsonify app = Flask(__name__) @app.route('/') def hello(): greeting = \\"Hello, world!\\" return jsonify(greeting) @app.route('/date') def date(): now = datetime.datetime.now() return jsonify(now) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Construct a parser in Python to read a table from HTML. <table> <tr> <th>Name</th> <th>Age</th> <th>City</th> </tr> <tr> <td>John</td> <td>25</td> <td>New York</td> </tr> <tr> <td>Mary</td> <td>22</td> <td>Chicago</td> </tr> </table>","completion":"import lxml.html def parse_table(html_str): root = lxml.html.fromstring(html_str) # locate the table table = root.xpath('//table')[0] # collect header names header_names = [th.text_content() for th in table.xpath('//th')] # collect data rows data_rows = table.xpath('//tr')[1:] data_rows = [[td.text_content().strip() for td in row.xpath('td')] for row in data_rows] # print the result print(header_names) print(data_rows)"},{"prompt":"Create a program in Python to generate prime numbers between 1 to N N = 10","completion":"def isPrime(n): i = 2 while i*i <= n: if n % i == 0: return False i += 1 return True def printPrimes(N): for i in range (2, N+1): if isPrime(i): print(i, end=\\" \\") printPrimes(10)"},{"prompt":"Design a Python program to calculate the sum of all prime numbers in a given range of numbers.","completion":"def sum_prime_numbers(start, end): total = 0 for num in range(start, end + 1): if is_prime(num): total += num return total def is_prime(num): for i in range(2, num): if num % i == 0: return False return True"},{"prompt":"Generate a 10 line sentence with the following keywords: python, datatype, algorithm","completion":"Python is a powerful, high-level programming language that can be used to create efficient algorithms and data types. It has a wide range of applications from web development to artificial intelligence and machine learning. Python can be used to develop complex algorithms that can process large datasets and uncover valuable insights from the data. It can also be used to develop sophisticated data types that can be used to store a variety of data structures. Python provides a good foundation for developing efficient algorithms and powerful data types."},{"prompt":"Create a function in Python that takes two arrays as arguments and returns a new array that contains the elements of both arguments. arr_1 = [1, 2, 3]; arr_2 = [4, 5, 6];","completion":"def merge_arrays(arr_1, arr_2): return arr_1 + arr_2 result = merge_arrays(arr_1, arr_2) print(result) #[1, 2, 3, 4, 5, 6]"},{"prompt":"Convert the following Python code to equivalent JavaScript code. def add_two_numbers(a, b): return a + b","completion":"function add_two_numbers(a, b) { return a + b; }"},{"prompt":"Create a regular expression in Python to match the following words: apple, banana, strawberry, orange.","completion":"import re words_regex = re.compile(r\\"apple|banana|strawberry|orange\\")"},{"prompt":"Build a linear regression model in Python which can predict the house prices given the number of rooms and square feet. rooms: [4, 3, 2, 5] square_feet: [2000, 1600, 1400, 2500] price: [400000, 340000, 280000, 480000]","completion":"import numpy as np from sklearn.linear_model import LinearRegression # Input data rooms = np.array([4, 3, 2, 5]).reshape(-1, 1) square_feet = np.array([2000, 1600, 1400, 2500]).reshape(-1, 1) price = np.array([400000, 340000, 280000, 480000]) # Create linear regression model model = LinearRegression() model.fit(rooms, price) model.fit(square_feet, price) # Output predicted prices predicted_price = model.predict([[4], [1600]]) print(predicted_price)"},{"prompt":"Generate a Python code to solve the given knapsack problem weights = [1, 3, 4, 5] values = [15, 50, 60, 30] max_weight = 8","completion":"# Function to calculate the maximum value def knapSack(weights, values, max_weight): n = len(weights) # Array with one extra item table = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] # Build table memonizing the subproblems for i in range(n + 1): for w in range(max_weight + 1): if i == 0 or w == 0: table[i][w] = 0 elif weights[i-1] <= w: table[i][w] = max(values[i-1] + table[i-1][w-weights[i-1]], table[i-1][w]) else: table[i][w] = table[i-1][w] # Handles the case when there is no item in the knapsack # Maximum value is 0 return table[n][max_weight]"},{"prompt":"Write a Python program to group all words of a given sentence into a dictionary. Keys of the dictionary should be alphabetically sorted and each key should contain a list of words starting with that letter. Sentence: A wild cat jumped into the kitche","completion":"{ 'a': ['A', 'into'], 'c': ['cat'], 'j': ['jumped'], 'k': ['kitchen'], 'w': ['wild'] }"},{"prompt":"Create a Python script that connects to a given database, creates a table, and inserts 10 rows of dummy data.","completion":"import sqlite3 db = sqlite3.connect('sample_database.db') cursor = db.cursor() cursor.execute(\\"CREATE TABLE IF NOT EXISTS users (name TEXT, age INT)\\") db.commit() cursor.execute(\\"INSERT INTO users VALUES ('John', 18)\\") cursor.execute(\\"INSERT INTO users VALUES ('Mary', 25)\\") cursor.execute(\\"INSERT INTO users VALUES ('Mark', 30)\\") cursor.execute(\\"INSERT INTO users VALUES ('Jill', 45)\\") cursor.execute(\\"INSERT INTO users VALUES ('Tom', 22)\\") cursor.execute(\\"INSERT INTO users VALUES ('Alice', 28)\\") cursor.execute(\\"INSERT INTO users VALUES ('Bob', 50)\\") cursor.execute(\\"INSERT INTO users VALUES ('George', 15)\\") cursor.execute(\\"INSERT INTO users VALUES ('Jane', 36)\\") cursor.execute(\\"INSERT INTO users VALUES ('Josh', 33)\\") db.commit() db.close()"},{"prompt":"Create a Python program for filtering a given list of numbers and returning the even numbers. [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"def filter_even_numbers(numbers): even_numbers = [] for number in numbers: if number % 2 == 0: even_numbers.append(number) return even_numbers numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] print(filter_even_numbers(numbers))"},{"prompt":"Summarize a given piece of text in five sentences. Python is an interpreted, highlevel, generalpurpose programming language. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace. Its language constructs and objectoriented approach aim to help programmers write clear, logical code for small and largescale projects.","completion":"Python is an interpreted, high-level programming language that was created by Guido van Rossum in 1991. It has a strong emphasis on code readability thanks to the use of significant whitespace. Its language constructs and object-oriented approach help programmers write clear and logical code for both small and large-scale projects. The language is great for beginners and experienced coders alike, with its easy-to-read syntax and numerous libraries available. Python is well-suited for a wide variety of tasks and is a great choice for almost any programming project."},{"prompt":"What is the best way to debug a Python program?","completion":"The best way to debug a Python program is to use a debugger. Popular Python debuggers include pdb, ipdb, and the Python built-in debugger. These debuggers allow you to step through code line-by-line, view and modify variables, and set breakpoints. Additionally, some IDEs such as PyCharm have built-in debuggers which incorporate some of these features."},{"prompt":"Using Python, edit the following dataset to discard outliers. Dataset: [12, 34, 37, 10, 89, 67, 99, 101]","completion":"import numpy as np dataset = [12, 34, 37, 10, 89, 67, 99, 101] dataset_without_outliers = [x for x in dataset if abs(x-np.mean(dataset)) < 3*np.std(dataset)] print(dataset_without_outliers) # prints [12, 34, 37, 10, 89, 67, 99]"},{"prompt":"Convert this bubble sort algorithm from C++ to Python. void bubbleSort(int arr[], int n) { for (int i = 0; i < n; i++) { for (int j = 0; j < ni1; j++) { if (arr[j] > arr[j+1]) swap(&arr[j], &arr[j+1]); } } }","completion":"def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr arr = [2, 3, 4, 1, 5] print(bubble_sort(arr))"},{"prompt":"Create a Python function to calculate the volume of a cube by taking its side length as input. side_length = 5","completion":"def cube_volume(side_length): return side_length ** 3 volume = cube_volume(side_length) print(f\\"Volume of cube is {volume}\\")"},{"prompt":"Write a Python program that prints all unique pairs that sum up to a given number. Number: 8","completion":"def unique_pairs(number): pairs = set() for i in range(number + 1): for j in range(number + 1): if i + j == number and (j, i) not in pairs: pairs.add((i, j)) return pairs"},{"prompt":"Design an algorithm in Python to calculate the maximum of two numbers. 10, 11","completion":"def max_of_two(a,b): if a> b: return a else: return b max_of_two(10,11)"},{"prompt":"Develop a Python program to validate a password for a given set of conditions Must contain at least one uppercase letter, one lowercase letter, one special character, and have a min length of 8 character","completion":"import re def validate_password(password): if len(password) < 8: return False if not any(map(str.isupper, password)): return False if not any(map(str.islower, password)): return False if not any(map(str.isalnum, password)): return False return True #Test password = \\"Myn@Passw0rd\\" valid = validate_password(password) if valid: print(\\"This is a valid password\\") else: print(\\"This is an invalid password\\")"},{"prompt":"Write a Python function to print prime numbers between two given numbers. low = 5, high = 10","completion":"def print_prime_numbers_between_two_numbers(low, high): for numb in range(low,high + 1): if numb > 1: for i in range(2,numb): if (numb % i) == 0: break else: print(numb) #calling the function print_prime_numbers_between_two_numbers(5, 10)"},{"prompt":"Write a Python code snippet to flatten the given list. my_list = [2, 3, [4, 5, [6]], [7, 8]]","completion":"my_list = [2, 3, [4, 5, [6]], [7, 8]] new_list = [] def flatten(lst): for item in lst: if isinstance(item, list): flatten(item) else: new_list.append(item) flatten(my_list) print(new_list)"},{"prompt":"Write a python program to verify that an email address is valid.","completion":"import re # function to validate an Email def validate_email(email): # make a regular expression # for validating an Email regex = '^w+([.-]?w+)*@w+([.-]?w+)*(.w{2,3})+' if (re.search(regex, email)): print(\\"Valid Email\\") else: print(\\"Invalid Email\\") if __name__ == \\"__main__\\": # enter the email email = \\"test@example.com\\" validate_email(email)"},{"prompt":"Optimize the following Python code to compute the sum of even numbers in a list. my_list = [1, 2, 3, 4, 5, 6] total = 0 for num in my_list: if num % 2 == 0: total += num print(total)","completion":"my_list = [1, 2, 3, 4, 5, 6] # sum comprehension total = sum(num for num in my_list if num % 2 == 0) print(total)"},{"prompt":"Python, write a program to find the average of all the even numbers in a given list. list = [1, 7, 8, 10, 12, 17]","completion":"def average_even(list): even_list = [] for i in list: if i % 2 == 0: even_list.append(i) return sum(even_list)/len(even_list)"},{"prompt":"Write a function to compute the sum of two numbers in Python","completion":"def compute_sum(a, b): return a + b"},{"prompt":"Write a Python program to print the square root of a given number input from the user. 64","completion":"import math num = float(input(\\"Enter a number: \\")) # checking if the number is negative if num < 0: print(\\"The square root of the given number cannot be computed\\") else: print(\\"The square root of the given number is:\\",math.sqrt(num))"},{"prompt":"Write a Python program that implements topological sorting. # number of vertices V = 6 # adjacency list of graph adj = [[1], [2], [3, 4], [], [5], [0]]","completion":"def topologicalSort(adj): indeg := [0]*V top_order = [] # calculate in-degrees of all # vertices for i in range(V): for j in adj[i]: indeg[j]+=1 # Create a queue and enqueue # all vertices with indegree 0 queue=[] for i in range(V): if indeg[i] == 0: queue.append(i) # we've got our topological order curr_count = 0 while queue: u = queue.pop(0) top_order.append(u) # decrease every vertex's indegree # by 1 as long as all its edges are # traversed. for v in adj[u]: indeg[v] -= 1 if indeg[v] == 0: queue.append(v) curr_count+=1 # Check if there was a cycle if curr_count != V: print(\\"There exists a cycle in the graph\\") return else: for i in top_order: print(i) return top_order"},{"prompt":"Develop an AI agent in Python using Pytorch to play a game of Connect Four. The Connect Four game is an abstract strategy board game of an twoplayer interconnected rows of seven columns where a player's goal is to connect exactly four pieces horizontally, vertically, or diagonally before the other player does.","completion":"import pytorch import numpy as np # Define the board size ROWS = 6 COLS = 7 # Create a 2-dimensional numpy array board board = np.zeros((ROWS,COLS)) # Define players player1 = 1 player2 = -1 # Define a class for our agent class Agent: def __init__(self, symbol): self.symbol = symbol def move(self, board): valid_moves = [] for c in range(COLS): if board[ROWS-1][c] == 0: valid_moves.append(c) # Get the highest predicted value column col = self.predict(board, valid_moves) # Drop the piece in column for r in range(ROWS): # If row is empty if board[r][col] == 0: board[r][col] = self.symbol # End for loop break # Artificial intelligence/Machine Learning def predict(self, board, valid_moves): predictions = [] # Loop through all the valid moves for col in valid_moves: # Create a deep copy of the board temp_board = board.copy() # Drop the piece in the column for r in range(ROWS): if temp_board[r][col] == 0: temp_board[r][col] = self.symbol break # Make a prediction with the Neural Network prediction = model.predict(temp_board.reshape(1, ROWS, COLS)) predictions.append(prediction) # Search predictions for the highest value # and return the corresponding column index return int(np.argmax(predictions))"},{"prompt":"Create a Python program to print out the first 20 terms of the Fibonacci sequence. Not applicable","completion":"def PrintFibonacci(n): a = 0 b = 1 for _ in range(n): c = a + b print(c, end = \\" \\") a = b b = c PrintFibonacci(20)"},{"prompt":"Develop a Python script for extracting data from a web page. URL of a web page containing relevant data.","completion":"Properly functioning Python script for extracting data from a web page."},{"prompt":"Construct a Python algorithm to find the largest palindrome from the given array. [12, 521, 1212, 84561, 91332]","completion":"def largest_palindrome(arr): max_palindrome = 0 for item in arr: temp = str(item) if temp == temp[::-1] and max_palindrome < item: max_palindrome = item return max_palindrome print(largest_palindrome([12, 521, 1212, 84561, 91332]))"},{"prompt":"Make a Python program that takes two strings as an input and checks if the strings are anagrams. Dormitory Dirty room","completion":"def check_anagrams(string1, string2): # Put the strings in lower case string1 = string1.lower() string2 = string2.lower() # Remove all the white spaces string1 = string1.replace(\\" \\", \\"\\") string2 = string2.replace(\\" \\", \\"\\") # Sort the strings string1_sorted = ''.join(sorted(string1)) string2_sorted = ''.join(sorted(string2)) # Check if the sorted strings are same if (string1_sorted == string2_sorted): return True return False if __name__ == '__main__': string1 = \\"Dormitory\\" string2 = \\"Dirty room\\" if check_anagrams(string1, string2): print(\\"The strings are anagrams!\\") else: print(\\"The strings are not anagrams!\\")"},{"prompt":"Develop a REST API in Python that will allow the user to retrieve a list of network devices based on a specific IP address range. 192.168.1.0/24","completion":"from flask import Flask, request, jsonify from netaddr import IPNetwork app = Flask(__name__) @app.route('/devices', methods=['GET']) def get_devices(): ip_range = request.args.get('ip_range') ip_network = IPNetwork(ip_range) # Query your data store to retrieve all devices in the given IP range devices = [ {'ip_address': '192.168.1.5', 'vendor': 'Cisco'}, {'ip_address': '192.168.1.6', 'vendor': 'Huawei'}, {'ip_address': '192.168.1.7', 'vendor': 'Juniper'}, {'ip_address': '192.168.1.8', 'vendor': 'HP'} ] # Filter the list of devices to those in the specified IP range devices = [device for device in devices if IPNetwork(device['ip_address']) in ip_network] return jsonify(devices) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python program that takes a list of strings as input, removes any duplicate strings, and prints out the resulting unique list. [a, b, c, d, a, e]","completion":"input_list = [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"a\\", \\"e\\"] unique_list = set(input_list) print(unique_list) # Output: {'a', 'c', 'b', 'e', 'd'}"},{"prompt":"The given code is a Python class called \`RtlNetlist\` which represents a hierarchical container for signals. It has methods to create new signals, generate a module header and body, and get the name of the debug scope. The class imports several modules and classes from external libraries, including \`typing\`, \`hdlConvertorAst\`, \`hwt\`, and \`hwt.serializer\`.","completion":"from typing import List, Optional, Union from hdlConvertorAst.hdlAst._defs import HdlIdDef from hdlConvertorAst.hdlAst._expr import HdlValueId from hdlConvertorAst.hdlAst._structural import HdlModuleDec, HdlModuleDef, HdlCompInst from hwt.code import If from hwt.hdl.operatorDefs import AllOps from hwt.hdl.types.defs import BIT from hwt.hdl.value import HValue from hwt.serializer.utils import HdlStatement_sort_key, RtlSignal_sort_key from hwt.synthesizer.dummyPlatform import DummyPlatform from hwt.synthesizer.exceptions import SigLvlConfErr from hwt.synthesizer.interfaceLevel.mainBases import InterfaceBase from hwt.synthesizer.param import Param from hwt.synthesizer.rtlLevel.mark_visibility_of_signals_and_check_drivers import markVisibilityOfSignalsAndCheckDrivers from hwt.synthesizer.rtlLevel.remove_unconnected_signals import removeUnconnectedSignals from hwt.synthesizer.rtlLevel.rtlSignal import RtlSignal, NOT_SPECIFIED from hwt.synthesizer.rtlLevel.rtlSyncSignal import RtlSyncSignal from hwt.synthesizer.rtlLevel.statements_to_HdlStmCodeBlockContainers import statements_to_HdlStmCodeBlockContainers from hwt.doc_markers import internal class RtlNetlist(): \\"\\"\\" Hierarchical container for signals :ivar ~.parent: optional parent for debug and late component inspection :ivar ~.signals: set of all signals in this context :ivar ~.statements: list of all statements which are connected to signals in this context :ivar ~.subUnits: is set of all units in this context :type ~.interfaces: Dict[RtlSignal, DIRECTION] :ivar ~.interfaces: initialized in create_HdlModuleDef :type ~.ent: HdlModuleDec :ivar ~.ent: initialized in create_HdlModuleDec :type ~.arch: HdlModuleDef :ivar ~.arch: initialized in create_HdlModuleDef :ivar ~.hdl_objs: The list of HDL objects which were produced by this instance usually contains HdlModudeleDef but may contain imports/globals etc. \\"\\"\\" def __init__(self, parent: Optional[\\"Unit\\"]=None): self.parent = parent self.signals = set() self.statements = set() self.subUnits = set() self.interfaces = {} self.hdl_objs = [] self.ent = None self.arch = None self._port_items = [] def sig(self, name, dtype=BIT, clk=None, syncRst=None, def_val=None, nop_val=NOT_SPECIFIED) -> Union[RtlSignal, RtlSyncSignal]: \\"\\"\\" Create new signal in this context :param clk: clk signal, if specified signal is synthesized as SyncSignal :param syncRst: synchronous reset signal :param def_val: a default value used for reset and intialization :param nop_val: a value which is used to drive the signal if there is no other drive (used to prevent latches and to specify default values for unconnected signals) \\"\\"\\" _def_val = _try_cast_any_to_HValue(def_val, dtype, True) if nop_val is not NOT_SPECIFIED: nop_val = _try_cast_any_to_HValue(nop_val, dtype, False) if clk is not None: s = RtlSyncSignal(self, name, dtype, _def_val, nop_val) if syncRst is not None and def_val is None: raise SigLvlConfErr( \\"Probably forgotten default value on sync signal %s\\", name) # dst_resolve_fn is overriden because default assign would assign to the \\"next\\" signal if syncRst is not None: r = If(syncRst._isOn(), s(_def_val, dst_resolve_fn=lambda x: x) ).Else( s(s.next, dst_resolve_fn=lambda x: x) ) else: r = [ s(s.next, dst_resolve_fn=lambda x: x) ] if isinstance(clk, (InterfaceBase, RtlSignal)): clk_trigger = clk._onRisingEdge() else: # has to be tuple of (clk_sig, AllOps.RISING/FALLING_EDGE) clk, clk_edge = clk if clk_edge is AllOps.RISING_EDGE: clk_trigger = clk._onRisingEdge() elif clk_edge is AllOps.FALLING_EDGE: clk_trigger = clk._onRisingEdge() else: raise ValueError( \\"Invalid clock edge specification\\", clk_edge) If(clk_trigger, r ) else: if syncRst: raise SigLvlConfErr( f\\"Signal {name:s} has reset but has no clk\\") s = RtlSignal(self, name, dtype, def_val=_def_val, nop_val=nop_val) return s def create_HdlModuleDec(self, name: str, store_manager: \\"StoreManager\\", params: List[Param]): \\"\\"\\" Generate a module header (entity) for this module \\"\\"\\" self.ent = ent = HdlModuleDec() ent.name = store_manager.name_scope.checked_name(name, ent) ns = store_manager.hierarchy_push(ent) # create generics for p in sorted(params, key=lambda x: x._name): hdl_val = p.get_hdl_value() v = HdlIdDef() v.origin = p v.name = p.hdl_name = ns.checked_name(p._name, p) v.type = hdl_val._dtype v.value = hdl_val ent.params.append(v) return ent def create_HdlModuleDef(self, target_platform: DummyPlatform, store_manager: \\"StoreManager\\"): \\"\\"\\" Generate a module body (architecture) for this module * Resolve name collisions * Convert netlist representation to HdlProcesses * Remove unconnected * Mark visibility of signals \\"\\"\\" for proc in target_platform.beforeHdlArchGeneration: proc(self) ns = store_manager.name_scope mdef = HdlModuleDef() mdef.dec = self.ent mdef.module_name = HdlValueId(self.ent.name, obj=self.ent) mdef.name = \\"rtl\\" processes = sorted(self.statements, key=HdlStatement_sort_key) processes = sorted(statements_to_HdlStmCodeBlockContainers(processes), key=HdlStatement_sort_key) # add signals, variables etc. in architecture for s in sorted((s for s in self.signals if not s.hidden and s not in self.interfaces.keys()), key=RtlSignal_sort_key): v = HdlIdDef() v.origin = s s.name = v.name = ns.checked_name(s.name, s) v.type = s._dtype v.value = s.def_val v.is_const = s._const mdef.objs.append(v) for p in processes: p.name = ns.checked_name(p.name, p) mdef.objs.extend(processes) # instantiate subUnits in architecture for u in self.subUnits: ci = HdlCompInst() ci.origin = u ci.module_name = HdlValueId(u._ctx.ent.name, obj=u._ctx.ent) ci.name = HdlValueId(ns.checked_name(u._name + \\"_inst\\", ci), obj=u) e = u._ctx.ent ci.param_map.extend(e.params) ci.port_map.extend(e.ports) mdef.objs.append(ci) self.arch = mdef return mdef def getDebugScopeName(self): scope = [] p = self.parent while p is not None: scope.append(p._name) try: p = p._parent except AttributeError: break return \\".\\".join(reversed(scope)) @internal def _try_cast_any_to_HValue(v, dtype, require_const): if isinstance(v, RtlSignal): assert not require_const or v._const, \\"Initial value of signal has to be a constant\\" return v._auto_cast(dtype) elif isinstance(v, HValue): return v._auto_cast(dtype) elif isinstance(v, InterfaceBase): return v._sig else: return dtype.from_py(v)"},{"prompt":"Generate Python code to print the first ‘n’ elements of the Fibonacci series. 7","completion":"def print_fibonacci_series(n): a, b = 0, 1 for i in range(n): print(a) a, b = b, a + b print_fibonacci_series(7)"},{"prompt":"Create a Python function that computes the distance between two points (x1, y1) and (x2, y2). x1= 5, y1= 4, x2= 9, y2= 2","completion":"def compute_distance(x1, y1, x2, y2): return ((x2-x1)**2 + (y2-y1)**2)**0.5 distance = compute_distance(5, 4, 9, 2) print(\\"The distance between two points is:\\", distance)"},{"prompt":"This code updates a game server cluster in Google Cloud Game Servers. To use it, run the script \`update_cluster.py\` with the following arguments: \`projectid\` (your cloud project ID), \`location\` (your realm location), \`realmid\` (your realm ID), and \`clusterid\` (your game server cluster ID). The script will update the specified cluster by changing the labels associated with it.","completion":"#!/usr/bin/env python # Copyright 2020 Google Inc. All Rights Reserved. # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. \\"\\"\\"Google Cloud Game Servers sample for updating a game server cluster. Example usage: python update_cluster.py --project-id <project-id> --location <location> --realm-id <realm-id> --cluster-id <cluster-id> \\"\\"\\" import argparse from google.cloud import gaming from google.cloud.gaming_v1.types import game_server_clusters from google.protobuf import field_mask_pb2 as field_mask # [START cloud_game_servers_cluster_update] def update_cluster(project_id, location, realm_id, cluster_id): \\"\\"\\"Updates a game server cluster.\\"\\"\\" client = gaming.GameServerClustersServiceClient() request = game_server_clusters.UpdateGameServerClusterRequest( game_server_cluster=game_server_clusters.GameServerCluster( name=f\\"projects/{project_id}/locations/{location}/realms/{realm_id}/gameServerClusters/{cluster_id}\\", labels={\\"label-key-1\\": \\"label-value-1\\", \\"label-key-2\\": \\"label-value-2\\"}, ), update_mask=field_mask.FieldMask(paths=[\\"labels\\"]), ) operation = client.update_game_server_cluster(request) print(f\\"Update cluster operation: {operation.operation.name}\\") operation.result(timeout=120) # [END cloud_game_servers_cluster_update] if __name__ == \\"__main__\\": parser = argparse.ArgumentParser() parser.add_argument('--project-id', help='Your cloud project ID.', required=True) parser.add_argument('--location', help='Your realm location.', required=True) parser.add_argument('--realm-id', help='Your realm ID.', required=True) parser.add_argument('--cluster-id', help='Your game server cluster ID.', required=True) args = parser.parse_args() update_cluster(args.project_id, args.location, args.realm_id, args.cluster_id)"},{"prompt":"Write a Python function that takes two strings of equal length and returns the number of characters that are different between them. firstString = 'abcd' secondString = 'abec'","completion":"def diff_characters(firstString, secondString): if len(firstString) != len(secondString): return -1 diff_characters = 0 for i in range(len(firstString)): if firstString[i] != secondString[i]: diff_characters +=1 return diff_characters"},{"prompt":"Write a Python program which prints the first n terms of the Fibonacci sequence. n = 10","completion":"def print_fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: print(a) print(b) for i in range(2,n): c = a + b a = b b = c print(c) print_fibonacci(10)"},{"prompt":"Create a Python function to compute the sum of prime numbers between 1 and an input number (n) n = 100","completion":"def is_prime(num): if num > 1: for i in range(2,num): if (num % i) == 0: return False return True else: return False def compute_sum_primes(n): sum = 0 for i in range(2, n+1): if is_prime(i): sum += i return sum n = 100 print(\\"The sum of all prime numbers between 1 and\\", n, \\"is\\", compute_sum_primes(n))"},{"prompt":"Create a python function for calculating the total cost of an item after tax and discounts are applied. Price: 150 Discount: 20 Tax Rate: 0.1","completion":"def calculate_cost(price, discount, tax_rate): discount_amount = price * (discount / 100.0) total = price - discount_amount tax = total * (tax_rate / 100.0) final_cost = total + tax return final_cost price = 150 discount = 20 tax_rate = 0.1 final_cost = calculate_cost(price, discount, tax_rate) print(final_cost)"},{"prompt":"Optimize a given Python call to a list of numbers in an efficient way with the help of itertools library. import itertools list_of_nums = [4, 6, 2, 9, 7, 3]","completion":"from itertools import combinations list_of_nums = [4, 6, 2, 9, 7, 3] # Get the combinations combo = combinations(list_of_nums, 3) # Iterate over the combinations max_sum = 0 max_combo = None for i in combo: current_sum = sum(i) if current_sum > max_sum: max_sum = current_sum max_combo = i # Print the result print(\\"The maximum sum is: \\", max_sum) print(\\"The combination is: \\", max_combo)"},{"prompt":"Develop a Python script to generate an array of given size filled with random numbers. int size = 10","completion":"import random def arr_of_random_numbers(size): arr = [] for i in range(size): arr.append(random.randint(1, 100)) return arr size = 10 arr = arr_of_random_numbers(size) print(arr)"},{"prompt":"Write a Python function to sort a list of dictionaries by a given key. [{'first_name': 'John', 'last_name': 'Doe', 'age': 20}, {'first_name': 'Jane', 'last_name': 'Doe', 'age': 30}], 'age'","completion":"def sort_by_key(dict_list, key): # Sort a list of dictionaries by the given key sorted_list = sorted(dict_list, key=lambda x: x[key]) return sorted_list dict_list = [{'first_name': 'John', 'last_name': 'Doe', 'age': 20}, {'first_name': 'Jane', 'last_name': 'Doe', 'age': 30}] result = sort_by_key(dict_list, 'age') print(result)"},{"prompt":"Develop a Python script to calculate the standard deviation of a list of numbers. [3, 8, 19, 24, 7, 50]","completion":"import statistics # Store the list of numbers number_list = [3, 8, 19, 24, 7, 50] # Calculate the standard deviation stdev = statistics.stdev(number_list) # Print the standard deviation print(stdev)"},{"prompt":"Construct a python program that analyzes the occurrence of different words in a text The quick brown fox jumps over the lazy dog","completion":"words = 'The quick brown fox jumps over the lazy dog'.split() word_frequency = {} for word in words: if word not in word_frequency: word_frequency[word] = 1 else: word_frequency[word] += 1 print('Word Frequency:', word_frequency)"},{"prompt":"Write a Python program that prints out the number of times the character e occurs in the string given.","completion":"def count_letter(string, letter): \\"\\"\\"Function to count the number of specified letter in the string\\"\\"\\" count = 0 for char in string: if char == letter: count += 1 return count # Driver code string = \\"this is a sample sentence\\" print(count_letter(string, 'e'))"},{"prompt":"Create a looping animation with a spinning square in Python.","completion":"import pygame #intialize pygame pygame.init() #define some colours GREEN = (20, 255, 140) RED = (255, 0, 0) #define size of the window size = (640, 480) #create the window screen = pygame.display.set_mode(size) #define a variable for the speed of spinning speed = 0.05 #and two variables one to start rotation, the other to control rotational speed angle = 0 angle_speed = 0 #runs the program until closed by the user run = True while run: #for every tick in pygame for event in pygame.event.get(): #if the tick is closes window if event.type == pygame.QUIT: #exit programme run = False #fill background with a certain colour screen.fill(GREEN) #get the center of the window center_x, center_y = size[0]//2, size[1]//2 #calculate the x and y cordinates of the four points on the square x1 = int(center_x - 30 * math.cos(angle)) y1 = int(center_y - 30 * math.sin(angle)) x2 = int(center_x - 30 * math.cos(angle + 90)) y2 = int(center_y - 30 * math.sin(angle + 90)) x3 = int(center_x - 30 * math.cos(angle + 180)) y3 = int(center_y - 30 * math.sin(angle + 180)) x4 = int(center_x - 30 * math.cos(angle + 270)) y4 = int(center_y - 30 * math.sin(angle + 270)) #join the points with lines pygame.draw.line(screen, RED, [x1, y1], [x2, y2], 4) pygame.draw.line(screen, RED, [x2, y2], [x3, y3], 4) pygame.draw.line(screen, RED, [x3, y3], [x4, y4], 4) pygame.draw.line(screen, RED, [x4, y4], [x1, y1], 4) #increment angle angle += speed angle_speed += 0.005 #update the window pygame.display.update()"},{"prompt":"Create a REST API in Python that takes an English sentence as input and returns the corresponding sentence in French. I like to learn new languages","completion":"from flask import Flask, request, jsonify from googletrans import Translator app = Flask(name) @app.route('/translate', method=['POST']) def translate(): sentence = request.json['sentence'] translator = Translator() translation = translator.translate(sentence, dest='fr').text return jsonify({'translation': translation}) if name == 'main': app.run(debug=True)"},{"prompt":"Create a data structure in Python to efficiently store and retrieve customer profiles. Customer profile information could include: Customer name Date of birth Address Phone number Credit Card detail","completion":"class Customer: def __init__(self, name, date_of_birth, address, phone_number, credit_card_details): self.name = name self.date_of_birth = date_of_birth self.address = address self.phone_number = phone_number self.credit_card_details = credit_card_details class CustomerDatabase: def __init__(self): self.customers = {} def add_customer(self, customer): self.customers[customer.name] = customer def get_customer(self, name): return self.customers.get(name)"},{"prompt":"Create a Python program to implement a Priority Queue.","completion":"class PriorityQueue(object): def __init__(self): self.queue = [] def __str__(self): return ' '.join([str(i) for i in self.queue]) def is_empty(self): return len(self.queue) == [] def insert(self, data): self.queue.append(data) def delete(self): try: max = 0 for i in range(len(self.queue)): if self.queue[i] > self.queue[max]: max = i item = self.queue[max] del self.queue[max] return item except IndexError: print() exit()"},{"prompt":"Generate an algorithm in Python that reverses the order of elements in an array.","completion":"def reverseArray(arr): start = 0 end = len(arr) - 1 while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 return arr"},{"prompt":"Generate a machine learning program in Python using scikitlearn to classify the Iris flower species based on sepal length, sepal width, petal length and petal width. Not applicable","completion":"# import necessary libraries from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier # Load the data iris = datasets.load_iris() # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, random_state=0) # Initialize the model knn = KNeighborsClassifier(n_neighbors=1) # Train the model knn.fit(X_train, y_train) # Generate predictions y_pred = knn.predict(X_test) # Compute accuracy accuracy = knn.score(X_test, y_test) # Print accuracy print(\\"Accuracy: {}\\".format(accuracy))"},{"prompt":"Generate a random uppercase letter using Python.","completion":"import random def get_random_uppercase_letter(): return chr(random.randint(65,90)) if __name__ == '__main__': print(get_random_uppercase_letter())"},{"prompt":"Edit this Python function to return the result with two decimal points. def area_of_circle(radius): return 3.14 * radius * radiu","completion":"def area_of_circle(radius): return round(3.14 * radius * radius, 2)"},{"prompt":"Generate a Python script that takes an integer and calculates the factorial of that integer.","completion":"def factorial(n): if (n == 0): return 1 return n * factorial(n - 1)"},{"prompt":"Write a Python program to remove all the duplicates from a given list of numbers.","completion":"def remove_duplicates(numbers): return list(set(numbers))"},{"prompt":"Create a quiz application using Python's tkinter library. The application should have a start page with two buttons for selecting a subject (geography or mathematics). After selecting a subject, the application should display a series of random questions with multiple choice answers. The user should be able to select an answer and confirm it. After answering all questions, the application should display the user's score and a message based on their performance. The application should also play a sound effect when the user selects an answer or confirms their choice.","completion":"from tkinter import * from tkinter import ttk import random button_width = 17 number_of_characters_per_row = 56 diff_for_answers = 8 color = '#%02x%02x%02x' % (231, 231, 231) import subprocess # poskusile 5 razlicnih modulov: pyglet, mp3play, sound in se dva pa noben ni delal # pygame se nama zdi prevelika knjiznica za dodati za samo nekaj zvokov def play_button_click(): # dela samo na OS X! subprocess.call([\\"afplay\\", \\"Sounds/button_click.mp3\\"]) # dela prepočasi!! - ko to dela, ne dela nič drugo! # subprocess.call([\\"afplay\\", \\"music.mp3\\"]) # ce to igram, potem nic drugo ne dela dokler se glasba ne konca! import gettext _ = gettext.gettext # noinspection PyBroadException try: en = gettext.translation('main', localedir='locale', languages=['en']) en.install() except: print(_(\\"Prevedba v angleski jezik ni bila mogoca.\\")) class Quiz(Tk): frames = {} number_of_questions = 5 question_count = 0 number_of_all_questions = 20 # per subject in SUBJECTdata.txt points = 0 # number of points user gets for answering the question correctly def __init__(self, *args, **kwargs): Tk.__init__(self, *args, **kwargs) Tk.wm_title(self, _(\\"Maturitetni kviz\\")) self.initialize_container_frame() self.initialize_start_page() self.set_images() def initialize_container_frame(self): self.container = ttk.Frame(self) # to je frame, ki nima na sebi nič, na njega zlagama nove self.container.pack_propagate(0) self.container.pack(pady=10, padx=10) self.container.grid_rowconfigure(0, weight=1) # default weight je 0, kar pomeni da bo ta imel najvecji prostor ko spremenimo velikost - zaenkrat nima veze ker je sam self.container.grid_columnconfigure(0, weight=1) def initialize_start_page(self): start_page = StartPage(self.container, self) start_page.grid(row=0, column=0, sticky=\\"nsew\\") self.frames[0] = start_page self.show_frame() def show_frame(self): if self.question_count <= self.number_of_questions: frame = self.frames.get(self.question_count, None) # da slucajno ne pride do zrusitve programa if frame is not None: frame.tkraise() # naloži nov frame - vprašanje else: print(_(\\"Nekaj se je zalomilo. Vprasanja ni bilo mogoče naložiti\\")) self.question_count += 1 else: self.show_result_frame() def set_subject(self, subject): self.create_random_questions(subject) self.show_frame() play_button_click() def create_random_questions(self, subject): random_question_numbers = [] table_of_possible_question_numbers = list( range(1, self.number_of_all_questions + 1)) # iti more od 1 do vkljucno stevila # tu samo dolocimo random stevilke vprasanj, stevilka pomeni vrstica v dokumentu: while len(random_question_numbers) < self.number_of_questions: rand_number = random.choice(table_of_possible_question_numbers) random_question_numbers.append(rand_number) if rand_number in table_of_possible_question_numbers: table_of_possible_question_numbers.remove(rand_number) else: print(_(\\"Pri določanju tvojih vprašanj se je zalomilo.\\")) # spet da slucajno ne pride do zrusitve # nalozimo dejanska vprasanja, prikazemo zaenkrat se nobenega: question_count = 1 # to ni lastnost metode self.question_count, ampak nova spremenljivka for number in random_question_numbers: question = Question(self.container, self, subject, number) self.frames[question_count] = question question_count += 1 question.grid(row=0, column=0, sticky=\\"nsew\\") def show_result_frame(self): result_page = ResultPage(self.container, self) result_page.grid(row=0, column=0, sticky=\\"nsew\\") result_page.tkraise() # ponastavimo rezultate, ce bo slucajno igral ponovno: self.question_count = 0 self.points = 0 self.destroy_previous_frames() # da se nam spomin ne zabase def destroy_previous_frames(self): for frame in self.frames.values(): frame.destroy() self.frames = {} def increase_points(self): self.points += 1 def set_images(self): correct_photo = PhotoImage(file=\\"Images/correct.gif\\") Label(self, image=correct_photo) self.correct_photo = correct_photo wrong_photo = wrong_photo = PhotoImage(file=\\"Images/wrong.gif\\") Label(self, image=wrong_photo) self.wrong_photo = wrong_photo class StartPage(ttk.Frame): # podeduje metode in lastnosti razreda def __init__(self, parent, quiz_reference): # self je container - vse se bo nalagalo na container ttk.Frame.__init__(self, parent) self.quiz_reference = quiz_reference self.show_frame() def show_frame(self): text = _('''Pozdravljen bodoči maturant!nPred tabo je kratek kviz iz maturitetnih predmetovn''') ttk.Label(self, text=text, justify=\\"center\\").pack(padx=10) self.show_image() ttk.Label(self, text=_(\\"Izberi področje:\\")).pack(pady=10, padx=10) button_geo = ttk.Button(self, text=_(\\"Geografija\\"), command=lambda: self.quiz_reference.set_subject(\\"GEO\\"), width=button_width) button_geo.pack(side=\\"bottom\\") button_mat = ttk.Button(self, text=_(\\"Matematika\\"), command=lambda: self.quiz_reference.set_subject(\\"MAT\\"), width=button_width) button_mat.pack(side=\\"bottom\\") # lambda uporabimo, da lahko podamo parameter in ob tem ne sprožimo klica funkcije def show_image(self): photo = PhotoImage(file=\\"Images/slika.gif\\") label = ttk.Label(self, image=photo) self.start_page_image = photo # treba je imeti se eno povezavo, zato da je avtomatsko ne izbrise label.pack() class Question(ttk.Frame): question = \\"\\" correct_answer = 0 possible_answers = {} chosen_answer = \\"\\" is_confirm_button_showing = False radio_buttons = [] def __init__(self, parent, quiz_reference, subject, number): # ko imama stevilko, poiscema vprasanje, odgovor in mozne odgovore iz datoteke ttk.Frame.__init__(self, parent) self.quiz_reference = quiz_reference self.subject = subject self.number = number self.get_data() self.show_frame_widgets() def show_frame_widgets(self): self.show_the_question() self.show_possible_answers() def show_the_question(self): '''prikaze vprasanje na label widgetu''' edited_text = self.check_if_text_too_long(self.question, number_of_characters_per_row) ttk.Label(self, text=edited_text).pack(pady=15, padx=10, side=\\"top\\") def check_if_text_too_long(self, unedited_text, allowed_number_of_chars): '''vrne primerno preurejen text z novimi vrsticami, ce je trenutno predolg''' if len(unedited_text) <= number_of_characters_per_row: return unedited_text # je ze ok text = '''''' # vecvrsticni string num_of_chars = 0 # in current row for word in unedited_text.split(\\" \\"): num_of_chars += len(word) if num_of_chars < allowed_number_of_chars: text += word + \\" \\" else: text = text + word + \\"n\\" num_of_chars = 0 return text.strip(\\"n\\") def show_possible_answers(self): self.radio_buttons = {} self.var = StringVar() for possible_answer in self.possible_answers: possible_answer = self.check_if_text_too_long(possible_answer, number_of_characters_per_row - diff_for_answers) R = ttk.Radiobutton(self, compound=\\"left\\", text=possible_answer, variable=self.var, value=possible_answer, command=self.set_chosen_answer) # Ko uporabnik izbere odgovor, se mu prikaze gumb za potrditev, ko stisne nanj se preveri pravilnost izbire self.radio_buttons[possible_answer] = R R.pack(anchor='w') def set_chosen_answer(self): if not self.is_confirm_button_showing: self.show_confirm_button() def show_confirm_button(self): self.confirm_button = ttk.Button(self, text=_(\\"Potrdi izbiro\\"), command=self.check_the_answer, width=button_width) self.confirm_button.pack(pady=8, side=\\"bottom\\") self.is_confirm_button_showing = True def change_text_on_confirm_button(self): self.confirm_button.destroy() self.next_q_button = ttk.Button(self, text=_(\\"Naprej\\"), command=self.confirm_button_pressed, width=button_width) self.next_q_button.pack(pady=8, side=\\"bottom\\") # prepreci da stisne na gumbe: for text, radio_button in self.radio_buttons.items(): radio_button.configure(state=DISABLED) #if radio_button.text == self.chosen_answer: print(self.chosen_answer) # to ne dela! zato je narejeno z slovarjem if text == self.chosen_answer: appropriate_image = self.quiz_reference.correct_photo if self.chosen_answer == self.correct_answer else self.quiz_reference.wrong_photo #print(appropriate_image.name) #radio_button.configure(image=appropriate_image) # TU BI SE MORALA PRIKAZATI ZRAVEN PRIMERNA SLIKA def confirm_button_pressed(self): play_button_click() self.quiz_reference.show_frame() def check_the_answer(self): self.chosen_answer = self.var.get() if self.chosen_answer == self.correct_answer: self.quiz_reference.increase_points() self.change_text_on_confirm_button() play_button_click() def get_data(self): data = self.subject + \\"data.txt\\" with open(data, \\"r\\") as file: lines = [line.strip() for line in file] currentLine = lines[self.number] # zapisano v obliki Vprasanje;odg1:odg2:odg3;odgovorPravilen data = currentLine.split(\\";\\") self.question = data[0] self.correct_answer = data[2] self.possible_answers = data[1].split(\\":\\") class ResultPage(ttk.Frame): def __init__(self, parent, quiz_reference): # ko imama stevilko, poiscema vprasanje, odgovor in mozne odgovore iz datoteke ttk.Frame.__init__(self, parent) self.quiz_reference = quiz_reference self.show_frame_widgets() def show_frame_widgets(self): points = self.quiz_reference.points all_points = self.quiz_reference.number_of_questions ttk.Label(self, text=\\"Tvoj rezultat je: {} od {} točk!\\". format(points, all_points)).pack(pady=10, padx=10) text_message = self.appropriate_message(points) ttk.Label(self, text=text_message).pack(pady=10, padx=10) appropriate_image = \\"Images/failure.gif\\" if points <= all_points // 2 else \\"Images/bravo.gif\\" photo = PhotoImage(file=appropriate_image) label = ttk.Label(self, image=photo) self.congratulation_photo = photo label.pack(pady=15) ttk.Button(self, text=\\"Igraj ponovno!\\", command=self.quiz_reference.initialize_start_page, width=button_width).pack(side=\\"bottom\\") def appropriate_message(self, user_points): \\"\\"\\"Prikaze sporocilo glede na rezultat\\"\\"\\" all_points = self.quiz_reference.number_of_questions if user_points in range(all_points // 2 + 1): message = \\"Tvoje znanje je nezadostno!\\" elif user_points in range(all_points // 2 + 1, all_points // 4): message = \\"Tvoje znanje je zadovoljivo.\\" elif user_points in range(all_points // 4, all_points): message = \\"Čestitam, dosegel si skoraj vse točke!\\" else: message = \\"Bravo, tvoje znanje je izjemno!!!\\" # dosegel je vse točke return message app = Quiz() app.geometry(\\"500x250\\") app.configure(bg=color) # sicer bi bil rob beli # velikost okna - to ni resitev, hocem nastavit velikost vseh framov, ne samo okna, ker se zdaj čudno poravnava app.resizable(0, 0) # v nobeno smer ni resizable app.mainloop()"},{"prompt":"Using the Pandas library, create a Python script to calculate statistics for a given dataset. The dataset (csv file): name,age John,30 Sam,20 Steven,40","completion":"import pandas as pd data = pd.read_csv('input.csv') print(data.describe())"},{"prompt":"Create a function in Python that takes in a string and replaces any instance of the letter e with 3. Not applicable","completion":"def replace_e(s): # Create an empty output string output = '' # Iterate through the input string for char in s: # Check if the character is \\"e\\" if char == 'e': # If yes, add \\"3\\" to the output string output += '3' else: # Else, add the original character output += char return output # Test the function string = 'Hello World!' replaced_str = replace_e(string) print(replaced_str) # Output: \\"H3llo World!\\""},{"prompt":"Write a Python program to compare two integers and prints if one is greater then another. int1=1, int2=2","completion":"# compare two integers int1=1 int2=2 if int1 > int2: print(\\"int1 is greater than int2\\") elif int2 > int1: print(\\"int2 is greater than int1\\") else: print(\\"int1 and int2 are equal\\")"},{"prompt":"Create an algorithm to check for the sum of two numbers in an array. Given an array of integers in random order, write a Python program to check whether there are two numbers present whose sum is equal to a given number. arr = [20, 5, 12, 3, 9, 11]; sum = 21","completion":"def check_sum(arr, sum): for i in range(len(arr)-1): for j in range(i+1, len(arr)): if arr[i] + arr[j] == sum: return True return False arr = [20, 5, 12, 3, 9, 11] sum = 21 if check_sum(arr, sum): print(\\"Sum Found\\") else: print(\\"Sum Not Found\\")"},{"prompt":"Generate an algorithm in Python for reversing an array of numbers. [1, 2, 3, 4, 5]","completion":"def reverse_array(arr): # Use the two pointer technique start = 0 end = len(arr) - 1 while start < end: # Swap the values at each pointer position arr[start], arr[end] = arr[end], arr[start] # Move the pointer to the next position start += 1 end -= 1 return arr arr = [1, 2, 3, 4, 5] reverse_array(arr)"},{"prompt":"Create a program in Python that can generate a random password of 8 characters.","completion":"import random import string def generate_password(): password_length = 8 all_characters = string.ascii_letters + string.digits + string.punctuation password = \\"\\".join(random.choice(all_characters) for i in range(password_length)) return password"},{"prompt":"This code defines variables and constants for the CTTMS server, including release levels, version information, product name, description, classifiers, URL, author, email, and license. It also sets the NT service name.","completion":"# -*- coding: utf-8 -*- # # OpenERP, Open Source Management Solution # Copyright (C) 2004-TODAY OpenERP S.A. <http://www.openerp.com> # # This program is free software: you can redistribute it and/or modify # it under the terms of the GNU Affero General Public License as # published by the Free Software Foundation, either version 3 of the # License, or (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU Affero General Public License for more details. # # You should have received a copy of the GNU Affero General Public License # along with this program. If not, see <http://www.gnu.org/licenses/>. # RELEASE_LEVELS = [ALPHA, BETA, RELEASE_CANDIDATE, FINAL] = ['alpha', 'beta', 'candidate', 'final'] RELEASE_LEVELS_DISPLAY = {ALPHA: ALPHA, BETA: BETA, RELEASE_CANDIDATE: 'rc', FINAL: ''} # version_info format: (MAJOR, MINOR, MICRO, RELEASE_LEVEL, SERIAL) # inspired by Python's own sys.version_info, in order to be # properly comparable using normal operarors, for example: # (6,1,0,'beta',0) < (6,1,0,'candidate',1) < (6,1,0,'candidate',2) # (6,1,0,'candidate',2) < (6,1,0,'final',0) < (6,1,2,'final',0) version_info = (2, 8, 0, BETA, 0) version = '.'.join(map(str, version_info[:2])) + RELEASE_LEVELS_DISPLAY[version_info[3]] + str(version_info[4] or '') series = serie = major_version = '.'.join(map(str, version_info[:2])) product_name = 'CTTMS' description = 'CTTMS Server' long_desc = '''CTTMS is a complete ERP and CRM. The main features are accounting (analytic and financial), stock management, sales and purchases management, tasks automation, marketing campaigns, help desk, POS, etc. Technical features include a distributed server, flexible workflows, an object database, a dynamic GUI, customizable reports, and XML-RPC interfaces. ''' classifiers = \\"\\"\\"Development Status :: 5 - Production/Stable License :: OSI Approved :: GNU Affero General Public License v3 Programming Language :: Python \\"\\"\\" url = 'https://www.cttms.com' author = 'OpenERP S.A.' author_email = 'info@cttms.com' license = 'AGPL-3' nt_service_name = \\"CTTMS-server-\\" + series # vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:"},{"prompt":"Generate a Python program to generate multiplication table of a given number. 5","completion":"def multiplication_table(num): for i in range(1, 11): print(num, 'x', i, '=', num*i) num = int(input(\\"Enter a number: \\")) multiplication_table(num)"},{"prompt":"Create a function in Python to give the multiple of 6 of any given number. Number = 5","completion":"def multiple_of_6(number): return number * 6"},{"prompt":"Create a Python function that takes a list of strings and a character as input and prints out a new list consisting of strings that have that character in it. list of strings: [apple, banana, pear] character:","completion":"def find_strings_with_char(string_list, char): output = [] for string in string_list: if char in string: output.append(string) return output string_list = [\\"apple\\", \\"banana\\", \\"pear\\"] char = 'a' output = find_strings_with_char(string_list, char) print(output) # [\\"apple\\", \\"banana\\"]"},{"prompt":"Generate code that implements a bubble sort algorithm in Python. Not applicable","completion":"def bubbleSort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Test the code arr = [64, 34, 25, 12, 22, 11, 90] bubbleSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Write a Python program to find the closest next lower value of a given number in an array of integers. Array of Numbers: [1, 3, 8, 9, 10, 11, 12]","completion":"# Function to find the closest next lower value of a given number in an array def get_next_lower(arr, num): # Initialise a dummy variable to store the closest next lower value closest_low = 0 # Iterate through the array for i in range(len(arr)): # Check if the current number is less than the given number and greater than the current closest number if num > arr[i] > closest_low: closest_low = arr[i] # Return the closest next lower value return closest_low # Initialize the array of numbers arr = [1, 3, 8, 9, 10, 11, 12] # Initialize the given number num = 9 # Find the closest next lower value closest_low = get_next_lower(arr, num) print(\\"Closest next lower value of\\", num, \\"is\\", closest_low)"},{"prompt":"Explain what is the purpose of the reduce() function in Python.","completion":"The reduce() function in Python is a part of the functools module. It receives a function and a sequence as arguments and applies the function to each item of the sequence, from left to right, cumulatively. The reduce() function reduces the sequence to a single value by combining items from the sequence using the function that is passed in as argument."},{"prompt":"Optimize the following python program and reduce its runtime. def find_min(lst): return min(lst) list = [2, 3, 8, 4, 5]","completion":"def find_min(lst): min_val = lst[0] for value in lst[1:]: if value < min_val: min_val = value return min_val list = [2, 3, 8, 4, 5]"},{"prompt":"Create a web application in Python using Flask that displays two text fields for entering two numbers and a button for computing the sum. Not applicable","completion":"from flask import Flask, request, render_template app = Flask(__name__) @app.route('/') def index(): return render_template('index.html') @app.route('/calc', methods=['POST']) def calc(): a = int(request.form.get('a')) b = int(request.form.get('b')) sum = a + b return render_template('index.html', sum=sum) if __name__ == '__main__': app.run() <!DOCTYPE html> <html> <head> <title>Calculator</title> </head> <body> <form action=\\"/calc\\" method=\\"post\\"> <label for=\\"a\\">Number 1</label> <input type=\\"text\\" name=\\"a\\"> <label for=\\"b\\">Number 2</label> <input type=\\"text\\" name=\\"b\\"> <input type=\\"submit\\" value=\\"Calculate\\"> <h3>The sum is: {{sum}}</h3> </form> </body> </html>"},{"prompt":"Create an API in Python to get the current temperature of a given location. location (e.g. London, UK)","completion":"import requests def getCurrentTemperature(location): API_KEY = '<your API key>' API_URL = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid={}'.format(location, API_KEY) response = requests.get(API_URL) data = response.json() # convert temperature from kelvin to Celsius temperature_celsius = data['main']['temp'] - 273.15 return temperature_celsius location = \\"London, UK\\" temperature = getCurrentTemperature(location) print(temperature)"},{"prompt":"Edit the given Python code to make it asynchronous. def find_files(files, pattern): result = [] for f in files: if re.search(pattern, f): result.append(f) return result","completion":"\\"\\"\\" import asyncio import re async def find_files(files, pattern): result = [] for f in files: if re.search(pattern,f): result.append(f) return result \\"\\"\\""},{"prompt":"Generate an API for an ecommerce site where users can list products with an GET request and add products POST. Not applicable","completion":"import flask from flask import request, jsonify app = flask.Flask(__name__) app.config[\\"DEBUG\\"] = True products = [ {'id': 0, 'name': 'iPhone', 'price': 600}, {'id': 1, 'name': 'Macbook', 'price': 1200}, {'id': 2, 'name': 'iPad', 'price': 400}, ] @app.route('/', methods=['GET']) def home(): return '''<h1>Products API</h1> <p>A prototype API for fetching products.</p>''' # GET request @app.route('/api/v1/resources/products/all', methods=['GET']) def api_all(): return jsonify(products) # GET request by id @app.route('/api/v1/resources/products', methods=['GET']) def api_id(): # Check if an ID was provided as part of the URL. # If ID is provided, assign it to a variable. # If no ID is provided, display an error in the browser. if 'id' in request.args: id = int(request.args['id']) else: return \\"Error: No id field provided. Please specify an id.\\" # Create an empty list for our results results = [] # Loop through the data and match results that fit the requested ID. # IDs are unique, but other fields might return many results for product in products: if product['id'] == id: results.append(product) # Use the jsonify function from Flask to convert our list of # Python dictionaries to the JSON format. return jsonify(results) # POST request @app.route('/api/v1/resources/products/add', methods=['POST']) def api_add(): # Check form data as json product_data = request.get_json() # Adding product max_id = products[-1]['id'] + 1 product_data['id'] = max_id products.append(product_data) # Result message return jsonify({ 'message': 'Product successfully added.', 'products': products }) app.run()"},{"prompt":"Program a Python script that sends a text message to a specified phone number. phoneNumber = '5551234567","completion":"import os import twilio from twilio.rest import Client # Your Account SID from twilio.com/console account_sid = os.environ.get('TWILIO_ACCOUNT_SID') # Your Auth Token from twilio.com/console auth_token = os.environ.get('TWILIO_AUTH_TOKEN') client = Client(account_sid, auth_token) message = client.messages.create( to=phoneNumber, from_=\\"+12345678901\\", body=\\"Hello World!\\") print(message.sid)"},{"prompt":"Design an algorithm in Python to find the maximum key from a given dictionary. {1: 'one', 4: 'four', 5: 'five', 8: 'eight', 10: 'ten', 13: 'thirteen'}","completion":"def max_key(dict): max_key = -1 max_val = -1 for key, val in dict.items(): if key > max_key and val > max_val: max_key = key max_val = val return max_key"},{"prompt":"Create a python script to check how long a webpage has been online. URL: https://example.com","completion":"import requests import datetime def check_online_age(url): \\"\\"\\"Check how long a webpage has been online.\\"\\"\\" response = requests.head(url) last_modified_date = response.headers.get('last-modified') if last_modified_date: last_modified_date = datetime.datetime.strptime(last_modified_date, '%a, %d %b %Y %H:%M:%S %Z') return datetime.datetime.now() - last_modified_date else: return None # Usage Example url = \\"https://example.com\\" age = check_online_age(url) print(age) # Age of the webpage in days"},{"prompt":"Create a Python program that finds the longest substring from a given string without repeating characters. str = abcabcbb","completion":"def longestSubstring(str) : n = len(str) # Create a map of distinct characters distinct_char = {} for i in range(n) : distinct_char[str[i]] = i cur_start = 0 cur_end = 0 max_start = 0 max_end = 0 max_len = 0 # Iterate through all characters and check # if it forms a valid substring or not for i in range(n) : # If character is already present if (str[i] in distinct_char) : # Reset the cur_end to recent position cur_end = i # If character is not present in the # already formed substring, then # update max_len if required if (cur_end - cur_start + 1 > max_len) : max_len = cur_end - cur_start + 1 max_start = cur_start max_end = cur_end # Update cur_start for next iteration cur_start += 1 # Store last occurrence of current # character in the map distinct_char[str[i]] = i print(str[max_start : max_end + 1]) # Driver str = \\"abcabcbb\\" longestSubstring(str) # Prints \\"abc\\""},{"prompt":"Optimize a piece of Python code that enumerates all substrings of a string. string = Supercalifragilisticexpialidocious","completion":"def enumerate_substrings(string): substrings = set() for i in range(len(string)): for j in range(i, len(string)): substrings.add(string[i:j+1]) return substrings string = \\"Supercalifragilisticexpialidocious\\" substrings = enumerate_substrings(string) print(substrings)"},{"prompt":"Write a code in Python to create and display a linked list.","completion":"# A linked list node class Node: # Constructor to initialize the node object def __init__(self, data): self.data = data self.next = None class LinkedList: # Function to initialize head def __init__(self): self.head = None # Function to insert a new node at the beginning def push(self, new_data): # 1 & 2: Allocate the Node & # Put in the data new_node = Node(new_data) # 3. Make next of new Node as head new_node.next = self.head # 4. Move the head to point to new Node self.head = new_node # This function prints contents of linked list # starting from head def printList(self): temp = self.head while temp: print temp.data temp = temp.next # Driver program linkedlist = LinkedList() linkedlist.push(1) linkedlist.push(2) linkedlist.push(3) linkedlist.push(4) linkedlist.printList()"},{"prompt":"Create a Python dictionary that allows a user to store a city name as a key and its population as the value.","completion":"city_population = { 'New York': 8450000, 'Los Angeles': 4000000, 'Chicago': 2700000, 'Houston': 2300000 }"},{"prompt":"Create a Python class to insert and delete elements into a doubly linked list.","completion":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class Doubly_Linked_List: def __init__(self): self.head = None def insert(self, data): new_node = Node(data) if not self.head: self.head = new_node else: new_node.next = self.head self.head.prev = new_node self.head = new_node def delete(self, del_node): if not self.head: return None if self.head == del_node: self.head = self.head.next self.head.prev = None elif del_node.next: del_node.next.prev = del_node.prev del_node.prev.next = del_node.next else: del_node.prev.next = None"},{"prompt":"Create an objectoriented Python program that performs Sentiment Analysis on text input. The program should take a string as input and output whether the sentiment of the string is positive or negative. The customer service was superb!","completion":"class SentimentAnalyzer(): def __init__(self): # Constructor pass def analyze(self, text): sentiment = 0.0 # Your logic to analyze the sentiment here # ... if sentiment > 0: return 'positive' elif sentiment < 0: return 'negative' else: return 'neutral' analyzer = SentimentAnalyzer() sentiment = analyzer.analyze(\\"The customer service was superb!\\") print(sentiment)"},{"prompt":"Write an algorithm in Python to calculate the sum of the numbers of a list and store the result in a dictionary. list = [1, 4, 8, 10]","completion":"sum_dict = {} def sum_list(list): total = 0 for num in list: total += num sum_dict[\\"sum\\"] = total return sum_dict sum_dict = sum_list(list)"},{"prompt":"Generate a Python code snippet for initializing a 3D numpy array of size (4,3,2). Not applicable","completion":"import numpy as np # initialize 3D array arr = np.zeros((4,3,2))"},{"prompt":"This code defines two classes: Button and PopUp. Button creates a button sprite with text and an optional background image. PopUp creates a popup window with text, images, and a button. The type of popup window can be customized with different parameters. To use these classes, create instances of Button and PopUp with the desired parameters and add them to a sprite group. To handle events, call the manejador_eventos method of the PopUp instance and check the return value for a click on the button.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- import pygame from .texto import texto from .textoci import texto2 from .imgfondo import fondo TEXT_COLOR2 = (0,0,0) COLOR_RED = (213, 0, 0) BAR_COLOR = (151, 0, 172) TEXT_COLOR = (255, 255, 255) class Button(pygame.sprite.Sprite): def __init__(self, identificador, parent, text, fondo = 0, ancho = 500): \\"\\"\\" Método inicializador de la clase. @param identificador: Variable usada para identificar al botón. @type identificador: str @param parent: Instancia del gestor de pantallas. @type parent: Manejador @param text: Variable que indica el texto que tendrá el botón. @type text: str @param fondo: Indica si el fondo del botón sera con imagen o sin imagen (en desarrollo). @type fondo: bool @param ancho: Indica el ancho del botón. Es usado para cuadrar el texto centrado. @type ancho: int \\"\\"\\" pygame.sprite.Sprite.__init__(self) self.ancho = ancho self.parent =parent tipografia = pygame.font.match_font(\\"FreeSans\\", False, False) font = pygame.font.Font(tipografia, parent.config.t_fuente) self.identificador = identificador varios = \\"../imagenes/png/varios/\\" if fondo == 0: texto1 = font.render(text, 1, TEXT_COLOR) textorect = texto1.get_rect() texto2 = font.render(text, 1, COLOR_RED) self.img_fondo = pygame.image.load(varios + \\"img-boton.png\\") self.img_fondo2 = pygame.image.load(varios + \\"img-boton.png\\") imgrect = self.img_fondo.get_rect() textorect.center = imgrect.center[0],imgrect.center[1]+imgrect.center[1]/3 self.img_fondo.blit (texto1, textorect) self.img_fondo2.blit (texto2,textorect) self.rect = self.img_fondo.get_rect() self.image= self.img_fondo if fondo == 1: txt = texto(0,0,text,parent.config.t_fuente,\\"texto_act\\",self.ancho) self.rect = pygame.Rect(0,0,self.ancho,txt.ancho_final) image_texto = pygame.Surface((self.ancho,txt.ancho_final)) image_texto.fill((255,255,255)) image_texto.set_colorkey((255,255,255)) for i in txt.img_palabras: image_texto.blit(i.image, i.rect) self.image = image_texto self.img_fondo = image_texto self.img_fondo2 = image_texto def cambiar_status(self, status): \\"\\"\\" Dibuja un efecto en los botones cambiando la imagen de fondo (descontinuado) \\"\\"\\" if status: self.image = self.img_fondo2 else: self.image = self.img_fondo def mover_boton(self,x,y): \\"\\"\\" Cambia la posición del botón. \\"\\"\\" self.rect.center = (x,y) class PopUp(pygame.sprite.Sprite): def __init__(self, parent , texto1, palabra_boton , imagenes , grupo, tipo = 0 ,px=512,py=281,tam =0): \\"\\"\\" Método inicializador de la clase. @param parent: Instancia del gestor de pantallas. @type parent: Manejador @param texto1: Indica el texto que será mostrado en la ventana emergente. @type texto1: str @param palabra_boton: Indica la palabra que tendrá el botón. Solo es usado en caso de ser tipo = 0, de ser distinto de 0 toma el valor de una cadena y no será asignado. @type palabra_boton: str @param imagenes: Indica la(s) imagen(es) que mostrará la ventana emergente. En caso de tipo = 2 no es un campo necesario, en caso de tipo = 1 debe ser una superficie y en caso de tipo = 0 el parámetro debe ser una tupla con dos imágenes, la posición 0 sera la imagen que estará al lado del texto, mientras que la posición 1 sera la imagen que estará debajo del texto. @type imagenes: pygame.Surface, tuple @param grupo: Representa un grupo de Sprites donde será agregado el sprite con la imagen y su rectángulo. @type grupo: pygame.sprite.Group @param tipo: Determina el tipo de ventana emergente, si toma el valor de 2 la ventana emergente solo tomara el parámetro texto1 (los demás parámetros deben ser introducidos), en caso de tomar el valor 1 la ventana emergente tomara los parámetros texto1, imagenes y palabra_boton, mostrando una ventana ordenada con texto justificado, un espacio a derecha donde sera ubicada la imagen (dicha imagen debe tener máximo 1/3 del tamaño de la ventana emergente) y un botón centrado debajo del texto. En caso de tomar valor 0 la ventana emergente sera similar a la anterior, con la diferencia que tendrá una imagen más ubicada en la parte izquierda del botón y debajo del texto. @type tipo: int \\"\\"\\" pygame.sprite.Sprite.__init__(self) self.parent = parent self.sprite = pygame.sprite.Sprite() varios = \\"../imagenes/png/varios/\\" self.texto = pygame.Surface self.tipo = tipo self.arreglo_botones=[] self.grupo = grupo self.click = -1 self.activo = 0 self.tam = 0 if tipo == 0: self.img_fondo = pygame.image.load(varios + \\"cuadropop-up.png\\").convert_alpha() self.sprite.image = pygame.image.load(varios + \\"cuadropop-up.png\\").convert_alpha() self.sprite.rect = self.sprite.image.get_rect() x=30 y=30 self.texto = texto(x, y,texto1[0], parent.config.t_fuente , \\"texto_act\\" ,(self.sprite.rect.width*2/3 )) self.area_texto = pygame.Rect(x,y,self.sprite.rect.w*2/3,self.texto.ancho_final) self.area_imagenes = pygame.Rect((self.sprite.rect.w*2/3)+80, y, self.sprite.rect.w/3, self.texto.ancho_final) self.parent = parent self.boton = Button(0,self.parent,palabra_boton) self.boton.mover_boton( self.sprite.rect.width/2, self.area_texto.h + x*2 + self.boton.rect.h / 2 ) self.boton_rect = pygame.Rect(self.boton.rect.x , self.boton.rect.y , self.boton.rect.width , self.boton.rect.height) self.sprite.image = fondo(self.sprite.rect.w, self.boton.rect.y+self.boton.rect.h+x,5 ).return_imagen() self.imagen = pygame.sprite.Sprite() if type (imagenes)!= pygame.Surface : self.imagen2 = pygame.sprite.Sprite() self.imagen.image = imagenes[0] self.imagen.rect =self.imagen.image.get_rect() self.imagen.rect.center =(self.sprite.rect.w*2/3 +(self.sprite.rect.w/3)/2 , self.area_imagenes.h/2 + self.boton_rect.h/2 ) self.imagen2.image = imagenes[1] self.imagen2.rect = self.imagen.image.get_rect() self.imagen2.rect.left = x self.imagen2.rect.y = self.area_texto.h+40 self.sprite.image.blit(self.imagen2.image , self.imagen2.rect) else: self.imagen.image = imagenes self.imagen.rect =self.imagen.image.get_rect() self.imagen.rect.center =(self.sprite.rect.w*2/3 +(self.sprite.rect.w/3)/2 , self.area_imagenes.h/2 + self.boton_rect.h/2 ) if self.imagen.rect.y < 5: self.imagen.rect.y = 6 for i in self.texto.img_palabras: self.sprite.image.blit(i.image, i.rect) self.sprite.image.blit(self.boton.image , self.boton.rect) self.sprite.image.blit(self.imagen.image , self.imagen.rect) self.sprite.rect.center = (px, py) self.boton_rect.center = (self.sprite.rect.x + self.sprite.rect.width/2, self.sprite.rect.y + self.area_texto.h + x*2 + self.boton.rect.h / 2) if tipo == 1: self.img_fondo = pygame.image.load(varios + \\"cuadropop-up.png\\").convert_alpha() self.sprite.image = pygame.image.load(varios + \\"cuadropop-up.png\\").convert_alpha() self.sprite.rect = self.sprite.image.get_rect() x = 15 y = 15 o = 0 separacion = 30 tabulacion = 30 self.sprite.rect.w += tam for i in texto1: if o ==0: self.texto = texto(x, y,i, parent.config.t_fuente , \\"texto_act\\" ,(self.sprite.rect.width )-x) if o>0: self.arreglo_botones.append(Button(o-1,self.parent,i,1,self.sprite.rect.w - x*2 -tabulacion)) o+=1 self.texto.rect = pygame.Rect(x,y,self.sprite.rect.w - 80, self.texto.ancho_final) y+= self.texto.ancho_final + separacion for i in self.arreglo_botones: i.rect.x = x+tabulacion/2 i.rect.y = y y+=i.rect.h + separacion/2 self.img_fondo = fondo(self.sprite.rect.w, y).return_imagen() self.sprite.image = fondo(self.sprite.rect.w, y).return_imagen() for i in self.texto.img_palabras: self.sprite.image.blit(i.image,i.rect) self.img_fondo.blit(i.image,i.rect) self.sprite.rect.center = (px, py) for i in self.arreglo_botones: self.sprite.image.blit(i.image,i.rect) self.img_fondo.blit(i.image,i.rect) i.rect.x = self.sprite.rect.x + i.rect.x i.rect.y = self.sprite.rect.y + i.rect.y if tipo == 2: self.sprite.image = pygame.image.load(varios + \\"cuadropop-up.png\\").convert_alpha() self.sprite.rect = self.sprite.image.get_rect() self.sprite.rect.w += tam self.texto = texto2(15,15, texto1,parent.config.t_fuente, \\"intercalado\\", self.sprite.rect.w -15, imagenes) self.sprite.image = fondo(self.sprite.rect.w, self.texto.ancho_final+30).return_imagen() self.sprite.rect.h = self.texto.ancho_final+30 self.tam = self.texto.ancho_final+60 for i in self.texto.img_palabras: self.sprite.image.blit(i.image, i.rect) self.sprite.rect.center=(px,py) def popup_estatus(self): \\"\\"\\" Define cuando esta activa la ventana emergente. @return: En caso de ser True la ventana esta activa, en caso contrario no estará activa. @rtype: bool \\"\\"\\" if self.activo: return True else: return False def redibujar_boton(self): \\"\\"\\" Define el efecto de los botones en las ventanas emergentes (descontinuado) \\"\\"\\" if self.tipo ==0: self.sprite.image.blit(self.img_fondo,(self.boton.rect.x,self.boton.rect.y), self.boton.rect) self.sprite.image.blit(self.boton.img , self.boton.rect) if self.tipo == 1: self.sprite.image.blit(self.img_fondo,(0,0)) def agregar_grupo (self): \\"\\"\\" Agrega el sprite de la ventana emergente al grupo de sprite pasado por parámetros al crear el objeto. \\"\\"\\" self.activo=1 self.grupo.add(self.sprite) def eliminar_grupo(self): \\"\\"\\" Elimina el sprite de la ventana emergente del grupo de sprite pasado por parámetros al crear el objeto. \\"\\"\\" self.activo = 0 self.grupo.remove(self.sprite) def evaluar_click(self): \\"\\"\\" Retorna el resultado del método manejador_eventos(). @return: True si se hizo click, de lo contrario False. @rtype: bool \\"\\"\\" return self.click def manejador_eventos(self, eventos): \\"\\"\\" Determina cuando se hace click al botón (solo en caso de ser una ventana emergente de tipo 0 o 1) @param eventos: Ultimo evento recibido. @rtype: pygame.event.Event \\"\\"\\" teclasPulsadas = pygame.key.get_pressed() if self.tipo == 0: if self.boton_rect.collidepoint(pygame.mouse.get_pos()): if (eventos.type == pygame.MOUSEBUTTONDOWN and eventos.button == 1): self.eliminar_grupo() self.click = 0 return True else: self.click= -1 if teclasPulsadas[pygame.K_RETURN]: self.eliminar_grupo() self.click = 0 else: self.click= -1 if self.tipo == 1: for i in self.arreglo_botones: if i.rect.collidepoint(pygame.mouse.get_pos()): if eventos.type == pygame.MOUSEBUTTONDOWN and eventos.button == 1: self.click = i.identificador else: self.click = -1"},{"prompt":"Create a Python tuple that contains the first five prime numbers","completion":"t = (2, 3, 5, 7, 11)"},{"prompt":"Rewrite the following Python script in Java. def is_odd(x): if x % 2 == 1: return True else: return False nums = [2, 5, 6, 9] for n in nums: if is_odd(n): print(n, is odd)","completion":"public class OddNumber { public static boolean isOdd(int x) { return (x % 2 == 1); } public static void main(String[] args) { int[] nums = {2, 5, 6, 9}; for (int n : nums) { if (isOdd(n)) { System.out.println(n + \\" is odd\\"); } } } }"},{"prompt":"Create a Django web application with a home page.","completion":"# Create a new Django application django-admin startproject my_django_app # Create a Django app python manage.py startapp home # Add the application in the list of INSTALLED_APPS inside my_django_app/settings.py INSTALLED_APPS = [ 'home', ... ] # Create the URL of the homepage in my_django_app/urls.py from home.views import home urlpatterns = [ path('', home, name='home'), ... ] # Create the view for home page in home/views.py from django.shortcuts import render def home(request): return render(request, 'home/index.html') # Create the HTML view in home/templates/home/index.html <html> <h1>Welcome to my Home Page!</h1> </html>"},{"prompt":"Write a Python program to crawl the web and extract webpages into a document. Not applicable","completion":"import requests from bs4 import BeautifulSoup def crawl(url): page = requests.get(url) soup = BeautifulSoup(page.text, \\"html.parser\\") with open(\\"document.txt\\", \\"w\\") as f: f.write(soup.prettify()) crawl(\\"https://www.example.com\\")"},{"prompt":"Design a Python script to return the output of a description tag given an HTML page. <html> <body> <p>This is a sample text</p> <description>This is a description tag </description> </body> </html>","completion":"from bs4 import BeautifulSoup def get_description(html_str): soup = BeautifulSoup(html_str, \\"lxml\\") description = soup.find(\\"description\\") return description.get_text()"},{"prompt":"You need to write a Python program to convert a decimal number into its binary equivalent. num = 8","completion":"def get_binary(num): return bin(num)[2:] res = get_binary(num) print(res)"},{"prompt":"Replace the element 'apple' in a given array with 'pear' using python code. Array: A = ['apple', 'banana', 'orange', 'grape']","completion":"A = ['apple', 'banana', 'orange', 'grape'] A[0] = 'pear' print(A) # Output: ['pear', 'banana', 'orange', 'grape']"},{"prompt":"Write a code to find the number of distinct words in a string. I love to code in Python","completion":"def count_distinct_words(string): words = string.split() distinct_words = set(words) return len(distinct_words) if __name__ == '__main__': string = \\"I love to code in Python\\" print(\\"Number of distinct words:\\", count_distinct_words(string))"},{"prompt":"Generate a program in Python to find the median of a list of numbers. [5, 8, 2, 7, 4]","completion":"def median(nums): nums.sort() length = len(nums) if length % 2 == 0: return (nums[length//2] + nums[(length//2)-1])/2.0 else: return nums[length//2] list = [5, 8, 2, 7, 4] med = median(list) print('The median of the list is ' + str(med))"},{"prompt":"Write a Python program to fetch the current weather data from OpenWeatherMap API using GET request.","completion":"import requests # API Key and location Id apiKey = 'your_api_key' locationId = 'your_location_id' # Make the request to the API r = requests.get('http://api.openweathermap.org/data/2.5/weather?id='+locationId+'&appid='+apiKey) # Get the data data = r.json() # Print the data print(data)"},{"prompt":"Write a Python function to compare two lists and return the elements that are not common in both lists. list1=[1, 2, 3, 4, 5] list2=[4, 5, 6, 7, 8]","completion":"def get_unique_elements(list1, list2): return list(set(list1) - set(list2))"},{"prompt":"Write a function in Python to find the maximum depth in a tree.","completion":"def max_depth(root): if root is None: return 0 left_depth = max_depth(root.left) right_depth = max_depth(root.right) return max(left_depth, right_depth) + 1"},{"prompt":"Create a Python function to extract domains from a given email email_list = [testing@example.com, sample@example.org, sample.testing@example.net]","completion":"def get_domain(email_list): \\"\\"\\" This function returns the list of domains from the given emails. Parameters: email_list: list of emails Returns: list of domin names \\"\\"\\" domain_list = [] for email in email_list: domain_name = email.split('@')[1] domain_list.append(domain_name) return domain_list"},{"prompt":"Design a Python program to create a valid Sudoku board from 9x9 numbers. [1, 5, 9, 6, 8, 4, 7, 2, 3, 4, 7, 2, 1, 5, 9, 6, 3, 8, 6, 3, 8, 3, 9, 2, 1, 5, 7, 4, 8, 2, 4, 7, 3, 5, 9, 6, 1, 5, 9, 6, 1, 4, 8, 2, 7, 3, 7, 1, 3, 9, 6, 5, 4, 8, 2, 2, 4, 7, 5, 8, 3, 6, 1, 9]","completion":"def valid_sudoku(nums): n = len(nums) if n != 81: return False # create 9x9 array board = [[0 for x in range(9)] for y in range(9)] # populate board with input numbers for i in range(n): x = i % 9 y = i // 9 board[y][x] = nums[i] # check each row for row in range(9): if not valid_row(board[row]): return False # check each column for col in range(9): if not valid_row(get_column(board, col)): return False # check each sub-box for x in range(3): for y in range(3): if not valid_row(get_box(board, x, y)): return False return True"},{"prompt":"Write a code in Python to print all numbers between 2000 and 3200, which are divisible by 7 and multiple of 5.","completion":"def divisible_numbers(): for num in range(2000, 3201): if (num % 7 == 0) and (num % 5 == 0): print(num, end=\\", \\") if __name__ == '__main__': divisible_numbers()"},{"prompt":"Write a Bash script to install the latest version of Python 3.","completion":"# update package manager sudo apt-get update # install latest version of Python 3 sudo apt-get install python3 # check version of python installed python3 --version"},{"prompt":"Write a Python program that inputs a list of numbers and sorts them in ascending order. The list [3,5,2,7,1,8,4]","completion":"def sort_numbers(numbers): for i in range(len(numbers) - 1): min_index = i for j in range(i + 1, len(numbers)): if numbers[min_index] > numbers[j]: min_index = j numbers[i], numbers[min_index] = numbers[min_index], numbers[i] return numbers list_numbers = [3,5,2,7,1,8,4] sorted_list = sort_numbers(list_numbers) print(sorted_list) # Output: [1, 2, 3, 4, 5, 7, 8]"},{"prompt":"This code provides a REST backend transport for the Google Cloud Compute Engine Addresses API. It defines methods for making HTTP requests to the API, including methods for listing, getting, inserting, and deleting addresses. To use this code, instantiate an instance of the AddressesRestTransport class and call its methods with the appropriate arguments.","completion":"# -*- coding: utf-8 -*- # Copyright 2020 Google LLC # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # import warnings from typing import Callable, Dict, Optional, Sequence, Tuple from google.api_core import gapic_v1 # type: ignore from google.api_core import exceptions as core_exceptions # type: ignore from google.auth import credentials as ga_credentials # type: ignore from google.auth.transport.grpc import SslCredentials # type: ignore import grpc # type: ignore from google.auth.transport.requests import AuthorizedSession from google.cloud.compute_v1.types import compute from .base import AddressesTransport, DEFAULT_CLIENT_INFO class AddressesRestTransport(AddressesTransport): \\"\\"\\"REST backend transport for Addresses. The Addresses API. This class defines the same methods as the primary client, so the primary client can load the underlying transport implementation and call it. It sends JSON representations of protocol buffers over HTTP/1.1 \\"\\"\\" def __init__( self, *, host: str = \\"compute.googleapis.com\\", credentials: ga_credentials.Credentials = None, credentials_file: str = None, scopes: Sequence[str] = None, client_cert_source_for_mtls: Callable[[], Tuple[bytes, bytes]] = None, quota_project_id: Optional[str] = None, client_info: gapic_v1.client_info.ClientInfo = DEFAULT_CLIENT_INFO, ) -> None: \\"\\"\\"Instantiate the transport. Args: host (Optional[str]): The hostname to connect to. credentials (Optional[google.auth.credentials.Credentials]): The authorization credentials to attach to requests. These credentials identify the application to the service; if none are specified, the client will attempt to ascertain the credentials from the environment. credentials_file (Optional[str]): A file with credentials that can be loaded with :func:\`google.auth.load_credentials_from_file\`. This argument is ignored if \`\`channel\`\` is provided. scopes (Optional(Sequence[str])): A list of scopes. This argument is ignored if \`\`channel\`\` is provided. client_cert_source_for_mtls (Callable[[], Tuple[bytes, bytes]]): Client certificate to configure mutual TLS HTTP channel. It is ignored if \`\`channel\`\` is provided. quota_project_id (Optional[str]): An optional project to use for billing and quota. client_info (google.api_core.gapic_v1.client_info.ClientInfo): The client info used to send a user-agent string along with API requests. If \`\`None\`\`, then default info will be used. Generally, you only need to set this if you're developing your own client library. \\"\\"\\" # Run the base constructor # TODO(yon-mg): resolve other ctor params i.e. scopes, quota, etc. # TODO: When custom host (api_endpoint) is set, \`scopes\` must *also* be set on the # credentials object super().__init__( host=host, credentials=credentials, client_info=client_info, ) self._session = AuthorizedSession( self._credentials, default_host=self.DEFAULT_HOST ) if client_cert_source_for_mtls: self._session.configure_mtls_channel(client_cert_source_for_mtls) self._prep_wrapped_messages(client_info) def aggregated_list( self, request: compute.AggregatedListAddressesRequest, *, metadata: Sequence[Tuple[str, str]] = (), ) -> compute.AddressAggregatedList: r\\"\\"\\"Call the aggregated list method over HTTP. Args: request (~.compute.AggregatedListAddressesRequest): The request object. A request message for Addresses.AggregatedList. See the method description for details. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata. Returns: ~.compute.AddressAggregatedList: \\"\\"\\" # TODO(yon-mg): need to handle grpc transcoding and parse url correctly # current impl assumes basic case of grpc transcoding url = \\"https://{host}/compute/v1/projects/{project}/aggregated/addresses\\".format( host=self._host, project=request.project, ) # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields # not required for GCE query_params = {} if compute.AggregatedListAddressesRequest.filter in request: query_params[\\"filter\\"] = request.filter if compute.AggregatedListAddressesRequest.include_all_scopes in request: query_params[\\"includeAllScopes\\"] = request.include_all_scopes if compute.AggregatedListAddressesRequest.max_results in request: query_params[\\"maxResults\\"] = request.max_results if compute.AggregatedListAddressesRequest.order_by in request: query_params[\\"orderBy\\"] = request.order_by if compute.AggregatedListAddressesRequest.page_token in request: query_params[\\"pageToken\\"] = request.page_token if compute.AggregatedListAddressesRequest.return_partial_success in request: query_params[\\"returnPartialSuccess\\"] = request.return_partial_success # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here # discards default values # TODO(yon-mg): add test for proper url encoded strings query_params = [\\"{k}={v}\\".format(k=k, v=v) for k, v in query_params.items()] url += \\"?{}\\".format(\\"&\\".join(query_params)).replace(\\" \\", \\"+\\") # Send the request headers = dict(metadata) headers[\\"Content-Type\\"] = \\"application/json\\" response = self._session.get(url, headers=headers,) # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception # subclass. if response.status_code >= 400: raise core_exceptions.from_http_response(response) # Return the response return compute.AddressAggregatedList.from_json( response.content, ignore_unknown_fields=True ) def delete( self, request: compute.DeleteAddressRequest, *, metadata: Sequence[Tuple[str, str]] = (), ) -> compute.Operation: r\\"\\"\\"Call the delete method over HTTP. Args: request (~.compute.DeleteAddressRequest): The request object. A request message for Addresses.Delete. See the method description for details. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata. Returns: ~.compute.Operation: Represents an Operation resource. Google Compute Engine has three Operation resources: - \`Global </compute/docs/reference/rest/{api_version}/globalOperations>\`__ * \`Regional </compute/docs/reference/rest/{api_version}/regionOperations>\`__ * \`Zonal </compute/docs/reference/rest/{api_version}/zoneOperations>\`__ You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the \`\`globalOperations\`\` resource. - For regional operations, use the \`\`regionOperations\`\` resource. - For zonal operations, use the \`\`zonalOperations\`\` resource. For more information, read Global, Regional, and Zonal Resources. (== resource_for {api_version}.globalOperations ==) (== resource_for {api_version}.regionOperations ==) (== resource_for {api_version}.zoneOperations ==) \\"\\"\\" # TODO(yon-mg): need to handle grpc transcoding and parse url correctly # current impl assumes basic case of grpc transcoding url = \\"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses/{address}\\".format( host=self._host, project=request.project, region=request.region, address=request.address, ) # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields # not required for GCE query_params = {} if compute.DeleteAddressRequest.request_id in request: query_params[\\"requestId\\"] = request.request_id # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here # discards default values # TODO(yon-mg): add test for proper url encoded strings query_params = [\\"{k}={v}\\".format(k=k, v=v) for k, v in query_params.items()] url += \\"?{}\\".format(\\"&\\".join(query_params)).replace(\\" \\", \\"+\\") # Send the request headers = dict(metadata) headers[\\"Content-Type\\"] = \\"application/json\\" response = self._session.delete(url, headers=headers,) # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception # subclass. if response.status_code >= 400: raise core_exceptions.from_http_response(response) # Return the response return compute.Operation.from_json(response.content, ignore_unknown_fields=True) def get( self, request: compute.GetAddressRequest, *, metadata: Sequence[Tuple[str, str]] = (), ) -> compute.Address: r\\"\\"\\"Call the get method over HTTP. Args: request (~.compute.GetAddressRequest): The request object. A request message for Addresses.Get. See the method description for details. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata. Returns: ~.compute.Address: Use global external addresses for GFE-based external HTTP(S) load balancers in Premium Tier. Use global internal addresses for reserved peering network range. Use regional external addresses for the following resources: - External IP addresses for VM instances - Regional external forwarding rules - Cloud NAT external IP addresses - GFE based LBs in Standard Tier - Network LBs in Premium or Standard Tier - Cloud VPN gateways (both Classic and HA) Use regional internal IP addresses for subnet IP ranges (primary and secondary). This includes: - Internal IP addresses for VM instances - Alias IP ranges of VM instances (/32 only) - Regional internal forwarding rules - Internal TCP/UDP load balancer addresses - Internal HTTP(S) load balancer addresses - Cloud DNS inbound forwarding IP addresses For more information, read reserved IP address. (== resource_for {api_version}.addresses ==) (== resource_for {api_version}.globalAddresses ==) \\"\\"\\" # TODO(yon-mg): need to handle grpc transcoding and parse url correctly # current impl assumes basic case of grpc transcoding url = \\"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses/{address}\\".format( host=self._host, project=request.project, region=request.region, address=request.address, ) # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields # not required for GCE query_params = {} # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here # discards default values # TODO(yon-mg): add test for proper url encoded strings query_params = [\\"{k}={v}\\".format(k=k, v=v) for k, v in query_params.items()] url += \\"?{}\\".format(\\"&\\".join(query_params)).replace(\\" \\", \\"+\\") # Send the request headers = dict(metadata) headers[\\"Content-Type\\"] = \\"application/json\\" response = self._session.get(url, headers=headers,) # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception # subclass. if response.status_code >= 400: raise core_exceptions.from_http_response(response) # Return the response return compute.Address.from_json(response.content, ignore_unknown_fields=True) def insert( self, request: compute.InsertAddressRequest, *, metadata: Sequence[Tuple[str, str]] = (), ) -> compute.Operation: r\\"\\"\\"Call the insert method over HTTP. Args: request (~.compute.InsertAddressRequest): The request object. A request message for Addresses.Insert. See the method description for details. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata. Returns: ~.compute.Operation: Represents an Operation resource. Google Compute Engine has three Operation resources: - \`Global </compute/docs/reference/rest/{api_version}/globalOperations>\`__ * \`Regional </compute/docs/reference/rest/{api_version}/regionOperations>\`__ * \`Zonal </compute/docs/reference/rest/{api_version}/zoneOperations>\`__ You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the \`\`globalOperations\`\` resource. - For regional operations, use the \`\`regionOperations\`\` resource. - For zonal operations, use the \`\`zonalOperations\`\` resource. For more information, read Global, Regional, and Zonal Resources. (== resource_for {api_version}.globalOperations ==) (== resource_for {api_version}.regionOperations ==) (== resource_for {api_version}.zoneOperations ==) \\"\\"\\" # Jsonify the request body body = compute.Address.to_json( request.address_resource, including_default_value_fields=False, use_integers_for_enums=False, ) # TODO(yon-mg): need to handle grpc transcoding and parse url correctly # current impl assumes basic case of grpc transcoding url = \\"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses\\".format( host=self._host, project=request.project, region=request.region, ) # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields # not required for GCE query_params = {} if compute.InsertAddressRequest.request_id in request: query_params[\\"requestId\\"] = request.request_id # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here # discards default values # TODO(yon-mg): add test for proper url encoded strings query_params = [\\"{k}={v}\\".format(k=k, v=v) for k, v in query_params.items()] url += \\"?{}\\".format(\\"&\\".join(query_params)).replace(\\" \\", \\"+\\") # Send the request headers = dict(metadata) headers[\\"Content-Type\\"] = \\"application/json\\" response = self._session.post(url, headers=headers, data=body,) # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception # subclass. if response.status_code >= 400: raise core_exceptions.from_http_response(response) # Return the response return compute.Operation.from_json(response.content, ignore_unknown_fields=True) def list( self, request: compute.ListAddressesRequest, *, metadata: Sequence[Tuple[str, str]] = (), ) -> compute.AddressList: r\\"\\"\\"Call the list method over HTTP. Args: request (~.compute.ListAddressesRequest): The request object. A request message for Addresses.List. See the method description for details. metadata (Sequence[Tuple[str, str]]): Strings which should be sent along with the request as metadata. Returns: ~.compute.AddressList: Contains a list of addresses. \\"\\"\\" # TODO(yon-mg): need to handle grpc transcoding and parse url correctly # current impl assumes basic case of grpc transcoding url = \\"https://{host}/compute/v1/projects/{project}/regions/{region}/addresses\\".format( host=self._host, project=request.project, region=request.region, ) # TODO(yon-mg): handle nested fields corerctly rather than using only top level fields # not required for GCE query_params = {} if compute.ListAddressesRequest.filter in request: query_params[\\"filter\\"] = request.filter if compute.ListAddressesRequest.max_results in request: query_params[\\"maxResults\\"] = request.max_results if compute.ListAddressesRequest.order_by in request: query_params[\\"orderBy\\"] = request.order_by if compute.ListAddressesRequest.page_token in request: query_params[\\"pageToken\\"] = request.page_token if compute.ListAddressesRequest.return_partial_success in request: query_params[\\"returnPartialSuccess\\"] = request.return_partial_success # TODO(yon-mg): further discussion needed whether 'python truthiness' is appropriate here # discards default values # TODO(yon-mg): add test for proper url encoded strings query_params = [\\"{k}={v}\\".format(k=k, v=v) for k, v in query_params.items()] url += \\"?{}\\".format(\\"&\\".join(query_params)).replace(\\" \\", \\"+\\") # Send the request headers = dict(metadata) headers[\\"Content-Type\\"] = \\"application/json\\" response = self._session.get(url, headers=headers,) # In case of error, raise the appropriate core_exceptions.GoogleAPICallError exception # subclass. if response.status_code >= 400: raise core_exceptions.from_http_response(response) # Return the response return compute.AddressList.from_json( response.content, ignore_unknown_fields=True ) __all__ = (\\"AddressesRestTransport\\",)"},{"prompt":"Create a binary search algorithm in Python that searches an input array for a certain number. A = [1,2,3,4,5,6,7,8,9]","completion":"def binarySearch(A, x): start = 0 end = len(A) - 1 while start <= end: mid = (start + end) // 2 if A[mid] == x: return mid elif A[mid] > x: end = mid - 1 else: start = mid + 1 return -1"},{"prompt":"Develop a method for converting an introduction letter from PDF to HTML, using Python.","completion":"import pdfminer def convert_pdf_to_html(pdf_file): content = \\"\\" # to convert pdf document to html with open(pdf_file, \\"rb\\") as file: pdf = pdfminer.pdfdocument.PDFDocument(file) rsrcmgr = pdfminer.pdfinterp.PDFResourceManager() laparams = pdfminer.pdflayout.LAParams() device = pdfminer.converter.HTMLConverter(rsrcmgr, laparams=laparams) interpreter = pdfminer.pdfinterp.PDFPageInterpreter(rsrcmgr, device) for page in pdfminer.pdfpage.PDFPage.create_pages(pdf): interpreter.process_page(page) content += device.get_result() return content"},{"prompt":"Create a Python function to remove all nonalphanumeric characters from a string. Hello, World!","completion":"def clean_string(string): cleanedString = \\"\\" for c in string: if c.isalnum(): cleanedString += c return cleanedString"},{"prompt":"Suggest a program to run a Python script from the command line.","completion":"def run_script(script): '''This function will run a Python script from the command line.''' import subprocess subprocess.call(['python', script]) if __name__ == '__main__': run_script('script.py')"},{"prompt":"Using Python, design a system that reads user input and suggests a suitable search query. I want to find the latest updates about Google","completion":"def generate_query_suggestion(user_input): words = user_input.split(' ') query_words = [word for word in words if not word in stopwords.words('english')] phrase = \\"+\\".join(query_words) return f\\"{phrase}+latest+updates\\" user_input = \\"I want to find the latest updates about Google\\" query = generate_query_suggestion(user_input) print(query) # google+latest+updates"},{"prompt":"Create a Python script to print out only the even numbers from a list of numbers. list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"for num in list: if (num % 2 == 0): print(num, end = ' ')"},{"prompt":"Create a Python program to add all the items in a list. Not applicable","completion":"# define a list my_list = [1,2,3,4,5] # define the sum variable sum = 0 # loop through all values in list for i in my_list: # add each value to the sum sum += i # print the result print(\\"The sum of all values in my_list is:\\", sum)"},{"prompt":"Generate a Python program to find the elements which are present in only one list. list1 = [1, 2, 3, 4, 5], list2 = [5, 6, 7, 8]","completion":"list1 = [1, 2, 3, 4, 5] list2 = [5, 6, 7, 8] def find_unique_elements(list1, list2): unique_elements = [] for ele in list1: if ele not in list2: unique_elements.append(ele) for ele in list2: if ele not in list1: unique_elements.append(ele) return unique_elements unique_elements = find_unique_elements(list1, list2) print(unique_elements)"},{"prompt":"Create a function in Python that takes two strings as input, checks if the two strings are anagrams, and returns a boolean value. (word, drow)","completion":"def is_anagram(s1, s2): s1 = s1.replace(\\" \\", \\"\\").lower() s2 = s2.replace(\\" \\", \\"\\").lower() if len(s1) != len(s2): return False count = {} for letter in s1: if letter in count: count[letter] += 1 else: count[letter] = 1 for letter in s2: if letter in count: count[letter] -= 1 else: return False for letter in count: if count[letter] != 0: return False return True"},{"prompt":"Create a method in Python to find the probability of rolling two dice.","completion":"def roll_2dice(): die_1 = random.randint(1, 6) die_2 = random.randint(1, 6) return die_1 + die_2 def find_probability(): total_combinations = 36 total_sum = 0 for i in range(2, 13): sum_count = 0 for j in range(1, 7): for k in range(1, 7): if (j + k == i): sum_count += 1 total_sum += sum_count return (total_sum/total_combinations)"},{"prompt":"Create a GUI in Python with 4 buttons.","completion":"import tkinter root = tkinter.Tk() frame = tkinter.Frame(root) frame.pack() button1 = tkinter.Button(frame, text = \\"Button 1\\", fg = \\"red\\") button2 = tkinter.Button(frame, text = \\"Button 2\\", fg = \\"blue\\") button3 = tkinter.Button(frame, text = \\"Button 3\\", fg = \\"green\\") button4 = tkinter.Button(frame, text = \\"Button 4\\", fg = \\"yellow\\") button1.pack(side = tkinter.LEFT) button2.pack(side = tkinter.LEFT) button3.pack(side = tkinter.LEFT) button4.pack(side = tkinter.LEFT) root.mainloop()"},{"prompt":"Create a Python program to find the most frequent words in the given text and display them in descending order of their frequency. (example text) The cat was playing in the garden. The cat was chasing a butterfly.","completion":"# File name: most_frequent_words.py def most_frequent_words(text): words = text.split() word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 words = sorted(word_freq.items(), key = lambda x: x[1], reverse = True) return words result = most_frequent_words('The cat was playing in the garden. The cat was chasing a butterfly.') print(result) # Output: [('The', 2), ('cat', 2), ('was', 2), ('playing', 1), ('in', 1), ('the', 1), ('garden.', 1), ('chasing', 1), ('a', 1), ('butterfly.', 1)]"},{"prompt":"Create a Python program to construct a Huffman tree from the given input string. abracadabra","completion":"def huffman_tree(input_string): frequency = {} for i in input_string: if i in frequency: frequency[i]+= 1 else: frequency[i]= 1 m = min(frequency, key=frequency.get) freq_sorted = sorted(frequency.items(), key = lambda kv:kv[1], reverse = True) huffman_tree = [None]*2*len(freq_sorted)-1 huffman_tree[0] = [m, frequency[m]] # Construct the Huffman Tree j = 0 while len(freq_sorted) != 0: j+= 1 if len(freq_sorted) > 1: freq1 = freq_sorted[0][1] entry1 = freq_sorted[0][0] del freq_sorted[0] freq2 = freq_sorted[0][1] entry2 = freq_sorted[0][0] del freq_sorted[0] huffman_tree[j] = [entry1+\\"\\"+entry2, freq1+freq2] freq_sorted.append([entry1+\\"\\"+entry2, freq1+freq2]) freq_sorted = sorted(freq_sorted, key = lambda kv:kv[1], reverse = True) else: entry = freq_sorted[0][0] huffman_tree[j] = [entry, freq_sorted[0][1]] del freq_sorted[0] return huffman_tree"},{"prompt":"Optimize the Python code snippet (below) for performance efficiency. def process_data(data): processed_data = [] for item in data: if item % 10 == 0: processed_data.append(item) return processed_d","completion":"def process_data(data): processed_data = [] for item in data: if (item % 10) == 0: processed_data.append(item) return processed_data def process_data_fast(data): return [item for item in data if item % 10 == 0]"},{"prompt":"Create a machine learning model in Python to classify emails into two classes: spam and ham. Not applicable","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.svm import LinearSVC # read the data data = pd.read_csv(\\"spam_emails.csv\\") # split the data for training and testing X_train, X_test, y_train, y_test = train_test_split(data['text'],data['label'],test_size=0.2,random_state=42) # create an instance of the vectorizer and fit it tfidf = TfidfVectorizer() X_train_vec = tfidf.fit_transform(X_train) X_test_vec = tfidf.transform(X_test) # create the classifier clf = LinearSVC() clf.fit(X_train_vec, y_train) # predict and measure the accuracy prediction = clf.predict(X_test_vec) accuracy = clf.score(X_test_vec, y_test) # print the accuracy print(accuracy)"},{"prompt":"Generate a function in Python that takes a natural number as argument and returns the product of all numbers up to it. n = 4","completion":"def getProduct(n): result = 1 for i in range(n): result *= i+1 return result"},{"prompt":"mplement a storage API in Python that supports the CRUD methods.","completion":"class StorageAPI: def __init__(self): self._data = {} def create(self, key, data): \\"\\"\\"Creates a new entry in the storage API\\"\\"\\" self._data[key] = data def read(self, key): \\"\\"\\"Reads a entry from the storage API\\"\\"\\" return self._data.get(key, None) def update(self, key, data): \\"\\"\\"Updates a entry in the storage API\\"\\"\\" self._data[key] = data def delete(self, key): \\"\\"\\"Deletes a entry from the storage API\\"\\"\\" del self._data[key]"},{"prompt":"Write a code in Python to find the sum of all the prime numbers less than or equal to a given number.","completion":"def sum_of_primes_below(n): prime_sum = 0 for num in range(2, n+1): for i in range(2,num): if (num % i == 0): break else: prime_sum += num return prime_sum"},{"prompt":"Create a Python program to randomly generate a list of strings of 5, 10 or 15 characters long. Not applicable","completion":"import string import random def generate_list(length): chars = string.ascii_letters + string.digits result = [''.join(random.choice(chars) for i in range(length)) for x in range(10)] return result lengths = [5, 10, 15] results = [generate_list(length) for length in lengths] print(results)"},{"prompt":"Generate a list of phone numbers in python given a start and end number. Start number: 12345 End number: 12354","completion":"phone_numbers = [str(i) for i in range(12345, 12355)]"},{"prompt":"Create a Decision Tree classifier in Python that can be used to predict whether a given customer will buy a car or not.","completion":"# Import Decision Tree Classifier from sklearn.tree import DecisionTreeClassifier # Define the Decision Tree Classifier clf = DecisionTreeClassifier() # Train the Decision Tree Classifier clf.fit(X_train, y_train) # Predict the target values y_pred = clf.predict(X_test)"},{"prompt":"Create a web scraper in Python to extract information from a website. The scraper should find all the links in the given webpage and store them in a list. https://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com' response = requests.get(url) html = response.content soup = BeautifulSoup(html, 'html5lib') links = [] for link in soup.find_all('a', href=True): links.append(link['href']) print(links)"},{"prompt":"Create an algorithm in Python that receives an array of integers and returns an array with the unique values of the input array.","completion":"def unique(arr): uniq_arr = [] for x in arr: if x not in uniq_arr: uniq_arr.append(x) return uniq_arr"},{"prompt":"Design a Python script that prints out all the even numbers in a given list of numbers. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"# given list of numbers nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # empty list for even numbers even_list = [] # iterate over the list for num in nums: # check if number is even if num % 2 == 0: # append number to even list even_list.append(num) # print even numbers print(even_list)"},{"prompt":"Design an algorithm in Python for finding a common element in two sorted arrays. List 1: [1, 4, 6, 10, 20] List 2: [2, 5, 8, 10, 15, 20]","completion":"def findCommon(list1, list2): common = [] i = j = 0 while i < len(list1) and j < len(list2): if list1[i] == list2[j]: common.append(list1[i]) i += 1 j += 1 elif list1[i] < list2[j]: i += 1 else: j += 1 return common list1 = [1, 4, 6, 10, 20] list2 = [2, 5, 8, 10, 15, 20] print(findCommon(list1, list2))"},{"prompt":"Write an algorithm in Python to find the longest continuous increasing subarray. [6 , 5, 4, 8, 10, 5]","completion":"def find_longest_subarray(arr): maxLength = 1 curLength = 1 n = len(arr) for i in range(1, n): if (arr[i] > arr[i - 1]): curLength += 1 maxLength = max(maxLength, curLength) else: curLength = 1 return maxLength longest_subarray = find_longest_subarray([6, 5, 4, 8, 10, 5]) print(longest_subarray) # Output: 3"},{"prompt":"Build a web scraping tool using Python that extracts data from a given web page.","completion":"import requests from bs4 import BeautifulSoup # Function to make a GET request to a given URL def get_page_data(url): # Make a GET request response = requests.get(url) # Parse the HTML from the GET request soup = BeautifulSoup(response.text, 'html.parser') # Extract the desired data data = soup.find_all('div', {'class':'data-container'}) # Return the data return data # Extract data from a given URL data = get_page_data('example.com/data-page') # Print the extracted data print(data)"},{"prompt":"Suggest how to make the following Python loop execute faster. def find_list_difference(list1, list2): diff = [] for item in list1: if item not in list2: diff.append(item) return diff","completion":"def find_list_difference(list1, list2): diff = [] list2_set = set(list2) for item in list1: if item not in list2_set: diff.append(item) return diff"},{"prompt":"Publish an article to Medium using the Medium Python SDK. No inpu","completion":"import medium # Create a client client = medium.Client( application_id=\\"YourApplicationID\\", application_secret=\\"YourApplicationSecret\\", ) # Log in to your account client.access_token = \\"<YourAccessToken>\\" # Create a post to publish post = medium.Post( title=\\"Article Title\\", content=\\"This is the article content that will be published on Medium.\\", content_format=\\"html\\", tags=[\\"Python\\", \\"Medium\\"], canonical_url=\\"\\", publish_status=\\"draft\\", ) # Publish the post published_post = client.create_post(post, author_id=\\"<YourAuthorID>\\")"},{"prompt":"Write a Python function for reversing a string and identify the time and space complexity. Not applicable","completion":"def reverse_string(string): rev_string = '' for char in string: rev_string = char + rev_string return rev_string # Time Complexity: O(N) # Space Complexity: O(N)"},{"prompt":"Generate a code snippet to reverse a string in Python.","completion":"def reverse(s): return s[::-1]"},{"prompt":"Can you generate a Python program for computing the median of three numbers?","completion":"def median(a, b, c): if (a <= b <= c) or (c <= b <= a): return b elif (b <= a <= c) or (c <= a <= b): return a else: return c median_value = median(6, 8, 7) print(median_value)"},{"prompt":"Write a Python program to find the index of the first occurrence of the given element in the given list. inputlist = [1, 2, 5, 8, 10, 9] element = 8","completion":"def find_element(inputlist, element): for i, num in enumerate(inputlist): if element == num: return i"},{"prompt":"Create a Python script that takes in a string and outputs a list of all permutations of the string. String: ABC","completion":"def permute(str): # base case if len(str) == 0: return [''] prev_list = permute(str[1:]) curr_list = [] first_char = str[0] # iterate over previous list and place first character # at every possible position in every string for s in prev_list: for i in range(len(s)+1): temp = s[:i] + first_char + s[i:] curr_list.append(temp) return curr_list # test case print(permute('ABC'))"},{"prompt":"Rewrite this python code using JavaScript. import os for root, dirs, files in os.walk(/home/user, topdown = True): for name in files: print(os.path.join(root, name))","completion":"var fs = require('fs'); var walk = function(dir, done) { var results = []; fs.readdir(dir, function(err, list) { if (err) return done(err); var pending = list.length; if (!pending) return done(null, results); list.forEach(function(file) { file = dir + '/' + file; fs.stat(file, function(err, stat) { if (stat && stat.isDirectory()) { walk(file, function(err, res) { results = results.concat(res); if (!--pending) done(null, results); }); } else { results.push(file); if (!--pending) done(null, results); } }); }); }); }; walk(\\"/home/user\\", function(err, results) { if (err) throw err; results.forEach(function(file) { console.log(file); }); });"},{"prompt":"Create a Python program which calculates the mean of a dataset data = [2, 4, 6, 8]","completion":"def dataset_mean(data): return sum(data)/len(data)"},{"prompt":"Create an algorithm in Python to search for a given item in a dictionary. Dictionary = {'name': 'john', 'age': 22, 'city': 'New York'}, item = 'John'","completion":"def search(dict, item): for key, value in dict.items(): if item == value: return True return False dict = {'name': 'john', 'age': 22, 'city': 'New York'} item = 'John' print(search(dict, item))"},{"prompt":"Make a prediction model in Python to classify the class of a credit score","completion":"# Import the necessary packages from sklearn.preprocessing import LabelEncoder from sklearn.ensemble import RandomForestClassifier # Load the dataset data = pd.read_csv('credit_score_data.csv') X = data.drop('credit_class', axis=1) y = data['credit_class'] # Encode labels y = LabelEncoder().fit_transform(y) # Split dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42) # Create and train the model model = RandomForestClassifier() model.fit(X_train, y_train) # Evaluate the model with the test set y_preds = model.predict(X_test) print(metrics.accuracy_score(y_test, y_preds))"},{"prompt":"Generate a Python program that takes in a list of strings and outputs a new list containing only those that are between 3 and 7 characters long. ['apple', 'banana', 'strawberry', 'orange']","completion":"def filterList(lst): result = [] for s in lst: if 3 <= len(s) <= 7: result.append(s) return result print(filterList(['apple', 'banana', 'strawberry', 'orange'])) # ['apple', 'banana', 'orange']"},{"prompt":"Develop a Python program that counts the number of times each word appears in a given sentence.","completion":"sentence = input('Enter a sentence: ') words = sentence.split() word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 for key, value in word_freq.items(): print (key,\\":\\", value)"},{"prompt":"Create an algorithm in Python to solve a given sudoku board.","completion":"def solveSudoku(board): if not findUnassignedLocation(board): return True for num in range(1, 10): if isSafe(board, row, col, num): board[row][col] = num if solveSudoku(board): return True board[row][col] = 0 return False def findUnassignedLocation(board): for i in range(9): for j in range(9): if board[i][j] == 0: return (i, j) return None def isSafe(board, row, col, num): # Check row for i in range(9): if board[row][i] == num: return False # Check column for i in range(9): if board[i][col] == num: return False # Check sub-grid row_start = (row // 3) * 3 col_start = (col // 3) * 3 for i in range(row_start, row_start + 3): for j in range(col_start, col_start + 3): if board[i][j] == num: return False return True"},{"prompt":"Create a Python program to convert an English sentence to Pig Latin.","completion":"def pig_latin(sentence): words = sentence.split(\\" \\") result = \\"\\" for word in words: result += word[1:] + word[0] + \\"ay \\" return result[:-1]"},{"prompt":"Write a function in Python that takes a list of names as the parameter and returns the longest name in the list. Names = ['John', 'Michael', 'Scott', 'Steve']","completion":"def longest_name(names): longest_name = '' for name in names: if len(name) > len(longest_name): longest_name = name return longest_name Names = ['John', 'Michael', 'Scott', 'Steve'] longest = longest_name(Names) print(longest) # Michael"},{"prompt":"Create a Python program that takes a two dimensional array of integers and calculates the sum of each row and each column of the array. [[2, 3, 5], [5, 7, 1], [4, 6, 9]]","completion":"def calculateSum(arr): sums = [0] * len(arr[0]) for r in arr: for i in range(len(r)): sums[i] += r[i] return sums def getRowsSum(arr): rowSums = [] for r in arr: rowSums.append(sum(r)) return rowSums arr = [[2, 3, 5], [5, 7, 1], [4, 6, 9]] columnSums = calculateSum(arr) rowSums = getRowsSum(arr) print(\\"Row sums:\\", rowSums) print(\\"Column sums:\\", columnSums) # Output: Row sums: [10, 13, 15] Column sums: [11, 16, 15]"},{"prompt":"Write a Python Function that receives two strings and checks to see if one of them is an anagram of the other one.","completion":"def is_anagram(s1, s2): s1 = s1.replace(\\" \\",\\"\\").lower() s2 = s2.replace(\\" \\",\\"\\").lower() return sorted(s1) == sorted(s2)"},{"prompt":"dentify the programming language in the given code snippet. def f(x): return x + 2","completion":"Python"},{"prompt":"Visualize a dataset with ndimensional features in Python. Not applicable","completion":"import matplotlib.pyplot as plt #Read data into array data = [list of data points] #Define plot dimensions n = len(data[0]) if n == 2: x = [x for x,y in data] y = [y for x,y in data] plt.scatter(x,y) plt.show() elif n == 3: x = [x for x,y,z in data] y = [y for x,y,z in data] z = [z for x,y,z in data] figure = plt.figure() axis = figure.add_subplot(111, projection='3d') axis.scatter(x, y, z) plt.show()"},{"prompt":"Build a webservice using the Flask python library that returns a Hello, world! message when accessed through a browser.","completion":"#Import the Flask library from flask import flask # Initialize the Flask app app = Flask(__name__) #Define the hello function @app.route('/') def hello(): return \\"Hello, world!\\" # Have the Flask app listen on port 500 if __name__ == '__main__': app.run(port=500)"},{"prompt":"Develop a python code to compute the sum of digits in an integer. 1234","completion":"def sum_digits(n): s = 0 while (n > 0): s = s + n % 10 n = n//10 return s n = 1234 print(sum_digits(n))"},{"prompt":"Write a Python function to convert a given number into its Roman numeral equivalent. 1314","completion":"def roman_numeral(number): romans = [ (1000, \\"M\\"), (900, \\"CM\\"), (500, \\"D\\"), (400, \\"CD\\"), (100, \\"C\\"), (90, \\"XC\\"), (50, \\"L\\"), (40, \\"XL\\"), (10, \\"X\\"), (9, \\"IX\\"), (5, \\"V\\"), (4, \\"IV\\"), (1, \\"I\\") ] result = \\"\\" for value, numeral in romans: result += numeral * (number // value) number %= value return result result = roman_numeral(1314) print(result)"},{"prompt":"Create a function in Python that converts a Fahrenheit temperature to Celsius. 100 degree","completion":"def convertFahrenheitToCelsius(fahrenheit): celsius = (fahrenheit - 32) * 5/9 print(\\"{}°F is {}°C\\".format(fahrenheit,celsius)) convertFahrenheitToCelsius(100)"},{"prompt":"Write a Python code to generate a random number between 10 and 50.","completion":"import random random_number = random.randint(10, 50) print(\\"Random number between 10 and 50 is\\", random_number)"},{"prompt":"Create a basic chatbot using Python.","completion":"import re #importing library for regular expressions user_input = \\"\\" #Initializing user_input while user_input != \\"exit\\": user_input = input(\\"Type your message: \\") if re.search(\\"hi|hello\\", user_input): #Using regural expressions to make the chatbot response to greetings print(\\"Hello, I am a chatbot. How can I help you?\\") else: print(\\"Sorry, I don't understand.\\")"},{"prompt":"Write a Python program to detect cycle in a linked list using Floyd's Cycle Detection Algorithm.","completion":"def detect_cycle(head): slow_p = head fast_p = head while(slow_p and fast_p and fast_p.next) : slow_p = slow_p.next fast_p = fast_p.next.next if slow_p == fast_p : return True return False"},{"prompt":"Create a Python program that can search through two collections of data (collection 1 and collection 2) and calculate the probability that two items match one another.","completion":"# Import the necessary libraries import json from collections import OrderedDict import pandas as pd # Load the data with open('collection1.json') as json_file: collection1 = json.load(json_file) with open('collection2.json') as json_file: collection2 = json.load(json_file) # Create a DataFrame from both collections df1 = pd.DataFrame(collection1) df2 = pd.DataFrame(collection2) # Calculate the probability of matching items match_probs = {} for item1 in df1.item.unique(): for item2 in df2.item.unique(): item1_obs = df1.loc[df1['item'] == item1] item2_obs = df2.loc[df2['item'] == item2] match_prob = (len(item1_obs) * len(item2_obs)) / (len(df1) * len(df2)) match_probs[(item1,item2)] = match_prob # Print the results match_probs = OrderedDict(sorted(match_probs.items(), key=lambda x: x[1], reverse=True)) print(match_probs)"},{"prompt":"Create an algorithm in Python to detect duplicate numbers in a given array. [3, 7, 4, 3, 6, 7]","completion":"def find_duplicates(numbers): seen = set() duplicates = set() for number in numbers: if number in seen: duplicates.add(number) else: seen.add(number) return duplicates"},{"prompt":"dentify the programming languages used for writing a Python program that scrapes a website for email addresses. Not applicable","completion":"The languages used for writing a Python program to scrape a website for email addresses would be Python and HTML. Python is used for writing the web scraper and HTML is used to define the structure and content of the website, which the scraper accesses in order to scrape the email addresses."},{"prompt":"Create a Python script to find the maximum and minimum numbers from a list. list1 = [2, 3, 7, 4, 5]","completion":"maxnum = max(list1) minnum = min(list1) print(\\"Maximum number is:\\", maxnum) print(\\"Minimum number is:\\", minnum) #prints Maximum number is: 7 Minimum number is: 2"},{"prompt":"Given a list of integers and Boolean values, write a classifier program in Python to predict whether the input is an integer or a Boolean value.","completion":"def classifyValue(value): if isinstance(value, bool): return \\"Boolean\\" elif isinstance(value, int): return \\"Integer\\" else: return \\"Other\\""},{"prompt":"Can you write a Python program to find the position of the second occurrence of a word in a given string? This is this is a sample string","completion":"def find_second_occurence(given_string): # Split the given string split_string = given_string.split(' ') # Find the index of the second occurence index = [i for i,x in enumerate(split_string) if x == split_string[0]][1] # Print the second occurence print(\\"Second occurrence of given word:\\", split_string[index]) # Driver function given_string = \\"This is this is a sample string\\" find_second_occurence(given_string)"},{"prompt":"Create a Python script that takes a list of integers and finds the highest value. [2, 5, 3, 4, 8]","completion":"The highest value is 8. list_ints = [2, 5, 3, 4, 8] highest_value = max(list_ints) print('The highest value is ' + str(highest_value) + '.')"},{"prompt":"Write Python code to classify the sentiment of this sentence. The movie was awesome!","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentiment_analyzer = SentimentIntensityAnalyzer() sentiment_score = sentiment_analyzer.polarity_scores(\\"The movie was awesome!\\") if sentiment_score['compound'] >= 0.05: sentiment = \\"positive\\" elif sentiment_score['compound'] <= -0.05: sentiment = \\"negative\\" else: sentiment = \\"neutral\\" print(\\"Sentiment of the sentence is\\", sentiment)"},{"prompt":"Write a Python program to flatten a nested list. lst = [[1,2,3], [4,5], [6]]","completion":"def flatten_list(lst): return [item for sublist in lst for item in sublist]"},{"prompt":"Generate a Python program to transform the following string 'Welcome to GPT world!' into an all uppercase string.","completion":"my_string = \\"Welcome to GPT world!\\" print(my_string.upper())"},{"prompt":"Develop a Python program to check if a number is an Armstrong number.","completion":"def isArmstrong(x): # Calculate the number of # digits in x n = len(str(x)) sum1 = 0 # For every digit calculate # its sum of nth power temp = x while temp > 0: d = temp % 10 sum1 = sum1 + d ** n temp = temp//10 # Check whether sum1 is equal to x if sum1 == x: return True return False"},{"prompt":"Create a Python function that takes in two strings and concatenates them with a space in between. Programming, is Fun","completion":"def concatStringsWithSpace(str1, str2): return str1 + \\" \\" + str2 result = concatStringsWithSpace(\\"Programming\\", \\"is Fun\\") print(result)"},{"prompt":"Write a Python program to create a KMeans model and cluster iris data into 3 clusters.","completion":"\\"\\"\\" Write a Python program to create a KMeans model and cluster iris data into 3 clusters. \\"\\"\\" import pandas as pd from sklearn.cluster import KMeans from sklearn import datasets # Load the iris data iris = datasets.load_iris() X = pd.DataFrame(iris.data) y = pd.DataFrame(iris.target) # Create the KMeans model model = KMeans(n_clusters=3, random_state=0) model.fit(X) # Predict the clusters prediction = model.predict(X) # Add the prediction to the data frame X.insert(0, \\"cluster\\", prediction) # Print the result print(X)"},{"prompt":"Develop an algorithm to identify palindromes using regular expression in Python.","completion":"import re def is_palindrome(s): pattern = r'^[a-zA-Z0-9]*' if re.match(pattern, s): return s == s[::-1] else: return False"},{"prompt":"Create a Python code snippet to print the current time in the format \`hh:mm:ss\`.","completion":"# Import datetime module import datetime # Get the current time now = datetime.datetime.now() # Print the current time in the format hh:mm:ss print(now.strftime(\\"%H:%M:%S\\"))"},{"prompt":"Design a function in Python that takes two strings and returns a single string which is the concatenation of both strings. Hello and World","completion":"def concatenate(str1, str2): return str1 + str2 # example str1 = \\"Hello\\" str2 = \\" World\\" result = concatenate(str1, str2) print(result) # Hello World"},{"prompt":"You are given a data set with categorical variables. Create a Python program to convert it into dummy variables. dataset = [Gender, Occupation] dataset = [['Male', 'Doctor'], ['Female', 'Teacher'], ['Female', 'Lawyer']]","completion":"import pandas as pd dataset = [['Male', 'Doctor'], ['Female', 'Teacher'], ['Female', 'Lawyer']] df = pd.DataFrame(dataset, columns = ['Gender', 'Occupation']) df_dummies = pd.get_dummies(df, columns=['Gender']) print(df_dummies) # Output Occupation Gender_Female Gender_Male 0 Doctor 0 1 1 Teacher 1 0 2 Lawyer 1 0"},{"prompt":"Generate a Python program to print the first 10 numbers in the Fibonacci sequence.","completion":"def fibonacciGenerator(num): a = 0 b = 1 for i in range(0, num): c = a + b a = b b = c yield a numbers = fibonacciGenerator(10) for num in numbers: print(num)"},{"prompt":"Generate a Python program to calculate the minimum cost of a given shopping cart. cartItems = {Apple: 10, Banana: 5, Orange: 2, Grapes: 15 }","completion":"def minimum_cost(cart): min_cost = 0 for item, cost in cart.items(): min_cost += int(cost) return min_cost print(minimum_cost(cartItems))"},{"prompt":"Create an object in Python that has two properties: name and year.","completion":"class Person: def __init__(self, name, year): self.name = name self.year = year person = Person(\\"Jane\\", 1998)"},{"prompt":"Develop a web scraper in Python to get all emails from a web page. URL of the page: http://example.com","completion":"import requests from bs4 import BeautifulSoup # Get request to the URL page = requests.get(\\"http://example.com\\") # Create a BeautifulSoup object from the response soup = BeautifulSoup(page.content, 'html.parser') # Get all emails from the page emails = soup.find_all('a', {'href': 'mailto'}) for email in emails: print(email.get('href').replace(\\"mailto:\\", \\"\\"))"},{"prompt":"Develop a Python code to print the current date and time.","completion":"import datetime dateTimeObj = datetime.datetime.now() print('Current Date and Time:', dateTimeObj)"},{"prompt":"Create an openended machine learning program in Python to classify a given dataset based on its features. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier # load the data df = pd.read_csv('dataset.csv') # split into features and labels features = df.drop('label', axis=1).values labels = df['label'].values # split into train and test sets X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42) # create a random forest classifier clf = RandomForestClassifier(n_estimators=1000, random_state=42) # train the classifier clf.fit(X_train, y_train) # make predictions y_pred = clf.predict(X_test) # calculate accuracy accuracy = np.mean(y_pred == y_test) print('Accuracy:', accuracy)"},{"prompt":"Write a script in Python to sort the given list of numbers in nondecreasing order [3, 2, 7, 1, 9, 5]","completion":"def sortNumbers(nums): for i in range(len(nums)-1): minPos = i for j in range(i+1,len(nums)): if nums[minPos] > nums[j]: minPos = j nums[i],nums[minPos] = nums[minPos],nums[i] nums = [3, 2, 7, 1, 9, 5] sortNumbers(nums) print(nums)"},{"prompt":"Write a Python program to find the lowest common multiple of two numbers.","completion":"def lowest_common_multiple(x, y): if x > y: greater = x else: greater = y while(True): if((greater % x == 0) and (greater % y == 0)): lcm = greater break greater += 1 return lcm print(lowest_common_multiple(x, y))"},{"prompt":"Write a Python function that gets a list of numbers and returns the sum of the elements. List = [1, 2, 3, 4, 5]","completion":"def get_sum(list): total = 0 for num in list: total += num return total"},{"prompt":"Create a Python program for automation that types text into a textbox. The program should take text to be typed and the HTML ID of the textbox as inputs, and simulate the typing of the text into the element. Text to be typed: Hello World! HTML ID of the textbox: textbox1","completion":"import pyautogui def type_text(text, textbox_id): # Locate the textbox by id element = driver.find_element_by_id(textbox_id) # Move the mouse to the textbox pyautogui.moveTo(element.location['x'], element.location['y']) # Simulate typing in the text pyautogui.typewrite(text) \`\`\`"},{"prompt":"Write a python program to generate a random list of numbers within a specified range.","completion":"import random def rand_list(start, end, n): rand_list = [] for i in range(n): rand_list.append(random.randint(start, end)) return rand_list nums = rand_list(1, 10, 5) print(nums)"},{"prompt":"Write a Python program to create a stack using two queues. Not applicable","completion":"class Stack: def __init__(self): self.queue1 = [] self.queue2 = [] def push(self, value): self.queue1.append(value) def pop(self): if self.queue1: while len(self.queue1) > 1: self.queue2.append(self.queue1.pop(0)) return self.queue1.pop(0) else: while len(self.queue2) > 1: self.queue1.append(self.queue2.pop(0)) return self.queue2.pop(0)"},{"prompt":"Create a code in Python for finding the shortest path between two given points. Start: [3, 4] End: [9, 8]","completion":"def shortest_path(start_point, end_point): path = [] current_point = start_point while current_point != end_point: x_dist = end_point[0] - current_point[0] y_dist = end_point[1] - current_point[1] # move right if x_dist is greater than or equal to # y_dist, and move up otherwise if x_dist >= y_dist: current_point[0] += 1 else: current_point[1] += 1 path.append(current_point[:]) return path result = shortest_path([3, 4], [9, 8]) print(result)"},{"prompt":"Modify the following Python program to explore and retrieve data from a dataset using Pandas. import pandas as pd df = pd.read_csv('data.csv') print(df)","completion":"import pandas as pd df = pd.read_csv('data.csv') print(df.head()) print(df.info()) print(\\"Average age of passengers:\\", df['Age'].mean()) print(\\"Number of female passengers:\\", df[df['Sex'] == 'female'].shape[0]) print(\\"Oldest passenger:\\", df.loc[df['Age'].idxmax()])"},{"prompt":"Given a Python dictionary, write a function that prints out the keyvalue pairs in alphabetical order. { 'Mark': '68', 'Carol': '35', 'John': '42' }","completion":"def print_dict_alphabetically(dictionary): sorted_keys = sorted(dictionary.keys()) for key in sorted_keys: print(f\\"{key}: {dictionary[key]}\\") print_dict_alphabetically({ 'Mark': '68', 'Carol': '35', 'John': '42' })"},{"prompt":"Create a Python class to generate random passwords. The class should contain a method to generate a random password of specified length. Not applicable","completion":"import random import string class PasswordGenerator: def generate_password(length): password_characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(password_characters) for i in range(length)) password = PasswordGenerator.generate_password(16) print(password)"},{"prompt":"Create a classification model using the SciKitLearn library in Python to predict if a given email is a spam email or not. Example training data of emails and their label (spam or not spam)","completion":"from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # load the data labels = ['spam', 'not spam'] data = [...] # example data of emails and labels # convert the text to a bag of words model vectorizer = CountVectorizer() X = vectorizer.fit_transform(data) # split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2) # fit the classification model model = MultinomialNB() model.fit(X_train, y_train) # evaluate the model score = model.score(X_test, y_test) print('Test score: ', score)"},{"prompt":"Write a debugging tool which visualizes the calls and returns of a Python program.","completion":"import sys import traceback def visualize_program_calls(): def trace_calls(frame, event, arg): if event != 'call': return co = frame.f_code func_name = co.co_name if func_name == 'write': # Ignore write() calls from print statements return func_line_no = frame.f_lineno func_filename = co.co_filename caller = frame.f_back caller_line_no = caller.f_lineno caller_filename = caller.f_code.co_filename print('Call to %s on line %s of %s from line %s of %s' % (func_name, func_line_no, func_filename, caller_line_no, caller_filename)) return sys.setprofile(trace_calls) def _visualize_program_returns(*args): for thread_id, frame in sys._current_frames().items(): print('Return from %s on line %s of %s' % (frame.f_code.co_name, frame.f_lineno, frame.f_code.co_filename)) sys.settrace(_visualize_program_returns)"},{"prompt":"Use Selenium Webdriver to create a Python program that navigates to the Google homepage, searches for GPT and prints the h2 element in the result page. Not applicable","completion":"from selenium import webdriver # set chrome driver driver = webdriver.Chrome() # open google driver.get(\\"https://www.google.com/\\") # find search box and enter \\"GPT\\" search = driver.find_element_by_name(\\"q\\") search.send_keys(\\"GPT\\") # click search search.submit() # print h2 element h2 = driver.find_element_by_tag_name(\\"h2\\") print(h2.text) # close browser driver.close()"},{"prompt":"Create a Python function to calculate the factorial of an input number.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Create a new class in Python, named 'Car', that contains two attributes, 'make' and 'model'.","completion":"class Car: def __init__(self, make, model): self.make = make self.model = model"},{"prompt":"Create a GUI application in Python that shows the current date and time.","completion":"import tkinter as tk from tkinter import font import datetime window = tk.Tk() window.title(\\"Current Date and Time\\") helv36 = font.Font(family='Helvetica', size=36, weight='bold') time = datetime.datetime.now().strftime(\\"%H:%M:%S\\") date = datetime.datetime.now().strftime(\\"%d/%m/%Y\\") clock_frame = tk.Frame( master = window, relief = tk.RAISED, borderwidth = 1) clock_frame.pack(fill = tk.BOTH) date_label = tk.Label( master = clock_frame, text = date, font = helv36) date_label.pack(side = tk.TOP, expand = True) time_label = tk.Label( master = clock_frame, text = time, font = helv36) time_label.pack(side = tk.BOTTOM, expand = True) window.mainloop()"},{"prompt":"Write a Python code to calculate the factorial of a given number using memoization.","completion":"def factorial_memoization(n): #Creating table to store result factorial_table = [1] * (n+1) # Calculating factorial and storing in # the table for i in range(1, n+1): factorial_table[i] = i * factorial_table[i - 1] return factorial_table[n] result = factorial_memoization(5) print(result)"},{"prompt":"Develop a machine learning classifier in Python to classify a set of emails as spam or not. The following emails: 1. You won the lottery! 2. Check out this offer! 3. Can you help me with my project? 4. Are you free for lunch tomorrow?","completion":"import pandas as pd # Load data into a dataframe emails = pd.DataFrame([ {'text': 'You won the lottery!', 'label': 'spam'}, {'text': 'Check out this offer!', 'label': 'spam'}, {'text': 'Can you help me with my project?', 'label': 'not_spam'}, {'text': 'Are you free for lunch tomorrow?', 'label': 'not_spam'}, ]) # Train the ML model from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB X = emails['text'] y = emails['label'] vectorizer = CountVectorizer() X_train = vectorizer.fit_transform(X) nb = MultinomialNB() nb.fit(X_train, y)"},{"prompt":"Create a program in Python to display the powers of 2 from 0 to 10.","completion":"# Python program to display the power of 2 from 0 to 10 for i in range(0,11): print(\\"2**\\",i,\\"=\\",2**i) # Output: # 2** 0 = 1 # 2** 1 = 2 # 2** 2 = 4 # 2** 3 = 8 # 2** 4 = 16 # 2** 5 = 32 # 2** 6 = 64 # 2** 7 = 128 # 2** 8 = 256 # 2** 9 = 512 # 2** 10 = 1024"},{"prompt":"Construct a perceptron class for a singlelayer neural network in Python. Not applicable","completion":"import numpy as np class Perceptron: def __init__(self, num_inputs, learning_rate=0.01): self.learning_rate = learning_rate # Initiailizing the weights to random values self.weights = np.random.rand(num_inputs) def predict(self, inputs): # Compute the dot product between inputs and weights weighted_sum = np.dot(inputs, self.weights) # The output is either 0 or 1 depending on the weighted sum result = int(weighted_sum > 0) return result def train(self, inputs, desired_output): # Calculate the prediction error prediction = self.predict(inputs) error = desired_output - prediction # Update the weights self.weights += self.learning_rate * error * inputs"},{"prompt":"Create a program in Python for finding the greatest common divisor of two numbers. Number1: 20 Number2: 45","completion":"def gcd(a, b): while b != 0: temp = a a = b b = temp % b return a print(gcd(20,45))"},{"prompt":"Write a Python program to convert a given number of seconds into days, hours, minutes and seconds.","completion":"# Function to convert given number of seconds into days, hours, minutes and seconds def convert_seconds(seconds): # Get the number of days days = seconds // 86400 # Get the remaining seconds secs = seconds % 86400 # Get the number of hours hours = secs // 3600 # Get the remaining seconds secs = secs % 3600 # Get the number of minutes minutes = secs // 60 # Get the remaining seconds secs = secs % 60 return days, hours, minutes, secs # Main Program seconds = int(input(\\"Enter a number of seconds: \\")) days, hours, minutes, secs = convert_seconds(seconds) print(\\"Days:\\", days) print(\\"Hours:\\", hours) print(\\"Minutes:\\", minutes) print(\\"Seconds:\\", secs)"},{"prompt":"Write a Python function to find the closest pair of points from a given list of points.","completion":"def find_closest_pair(points): min_distance = float('inf') min_pair = [] for i in range(len(points)): for j in range(i+1, len(points)): distance = get_euclidean_distance(points[i], points[j]) if distance < min_distance: min_distance = distance min_pair = points[i], points[j] return min_pair def get_euclidean_distance(point1, point2): diffx = point1[0] - point2[0] diffy = point1[1] - point2[1] return math.sqrt(diffx**2 + diffy**2)"},{"prompt":"Can you develop a Python program that creates a dictionary of students with their names and grades as the keyvalue pair? [{'name':'John', 'grade':'A'}, {'name':'Steve', 'grade':'B'}, {'name':'Bob', 'grade':'C'}]","completion":"data = [{'name':'John', 'grade':'A'}, {'name':'Steve', 'grade':'B'}, {'name':'Bob', 'grade':'C'}] # Create a dictionary of students student_dict = {} for student in data: student_dict[student['name']] = student['grade'] # Print the dictionary print(student_dict)"},{"prompt":"Based on the following Python function, create a Pandas dataframe that contain the start and end date of each season: def get_seasons(): season_dates = { 'spring': ('March 20', 'June 20'), 'summer': ('June 21', 'September 21'), 'autumn': ('September 22', 'December 21'), 'winter': ('December 22', 'March 19') } return season_dates Not applicable","completion":"import pandas as pd def get_seasons(): season_dates = { 'spring': ('March 20', 'June 20'), 'summer': ('June 21', 'September 21'), 'autumn': ('September 22', 'December 21'), 'winter': ('December 22', 'March 19') } return season_dates seasons = get_seasons() df = pd.DataFrame(columns=['Season', 'Start_Date', 'End_Date']) for season, dates in seasons.items(): start_date, end_date = dates df = df.append({'Season': season, 'Start_Date': start_date, 'End_Date': end_date}, ignore_index=True) print(df)"},{"prompt":"Create a method in Python to find the sum of all even numbers between two integers including the first and last number. Low: 10 High: 20","completion":"def even_sum(low, high): sum = 0 for i in range(low, high+1): if i % 2 == 0: sum += i return sum result = even_sum(10, 20) print(result)"},{"prompt":"Create a Python program to build a language model. The model should take a sequence of words as input and predict the next word in the sequence. Not applicable","completion":"import numpy as np from keras.preprocessing.text import Tokenizer from keras.layers import Embedding, LSTM from keras.models import Sequential # tokenizing the text tokenizer = Tokenizer() tokenizer.fit_on_texts(<some text>) sequences = tokenizer.texts_to_sequences(<some text>) vocab_size = len(tokenizer.word_index) + 1 # create the language model model = Sequential() model.add(Embedding(vocab_size, 50, input_length=3)) model.add(LSTM(100, return_sequences=True)) model.add(LSTM(100)) model.add(Dense(vocab_size, activation='softmax')) # compile the model model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) # fit the model model.fit(sequences, X, epochs=100, verbose=2) # evaluate the model loss, accuracy = model.evaluate(sequences, X, verbose=0)"},{"prompt":"Create a code that plots a sine wave in Python.","completion":"\\"\\"\\" Plot a sine wave in Python. \\"\\"\\" # Import matplotlib and numpy libraries import matplotlib.pyplot as plt import numpy as np # Set the x axis range x_axis = np.arange(0, 2*np.pi, 0.1) # Set the y axis range y_axis = np.sin(x_axis) # Plot the sine wave plt.plot(x_axis, y_axis) # Set the figure title plt.title('Sine Wave') # Set the x and y labels plt.xlabel('x axis') plt.ylabel('y axis') # Set the x and y limits plt.xlim(0, 2*np.pi) plt.ylim(-1, 1) # Draw the graph plt.show()"},{"prompt":"Design an API for a Python script that returns the average of any given list of numbers. [1, 4, 5, 7, 8]","completion":"# Create API endpoint @app.route('/api/average', methods=['POST']) def average(): # Get data from request data = request.get_json() # Calculate average avg = np.mean(data) # Return result return jsonify({'result': avg})"},{"prompt":"Develop an algorithm in Python to identify the majority element in an unsorted array. [3,9,3,3,3,1,3,3]","completion":"def find_majority_element(array): count = 0 majority_element = None for element in array: if count == 0: majority_element = element count += (1 if element == majority_element else -1) return majority_element"},{"prompt":"Create a Python function to print the following star pyramid pattern.","completion":"def print_star_pyramid(n): # Outer loop to handle number of lines for i in range(0, n): # Inner loop to handle number of columns for j in range(0, i+1): # Will print star print(\\"* \\", end=\\"\\") # Line break print(\\"r\\") # Program to demonstrate star pyramid n = 5 print_star_pyramid(n)"},{"prompt":"Generate code in Python create an array of 100 random integers between 1 to 1000. Not applicable","completion":"import random # Create an array of 100 random integers between 1 to 1000 array = [random.randint(1, 1000) for i in range(100)] print(array)"},{"prompt":"Create a classifier in Python to predict the gender of a person based on their name. Not applicable","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression # Load training data train_data = pd.read_csv(\\"train.csv\\") X_train = train_data[\\"Name\\"].values y_train = train_data[\\"Gender\\"].values # Create the vectorizer vectorizer = CountVectorizer() # Fit the vectorizer vectorizer.fit(X_train) # Transform the vectorizer X_train_vectorized = vectorizer.transform(X_train) # Create a model model = LogisticRegression() # Fit the model model.fit(X_train_vectorized, y_train)"},{"prompt":"Write a Python program to replace all occurrences of the word hello with hi. This is a sentence with hello","completion":"updated_sentence = sentence.replace(\\"hello\\", \\"hi\\")"},{"prompt":"Create a website using the Django web framework.","completion":"# create a new Django project django-admin startproject mysite # create a new application python manage.py startapp myapp # add the new application in INSTALLED_APPS in the settings.py file INSTALLED_APPS = [ 'myapp', ... ] # define the urls in urls.py file urlpatterns = [ path('', myapp.views.index, name='index'), ... ]"},{"prompt":"Create a Python program that updates the records of a given movie in an SQL database. Database schema: movie(title, year_released, genre, rating, director)","completion":"import sqlite3 conn = sqlite3.connect(\\"movies.db\\") cur = conn.cursor() # create the table if it does not exist cur.execute(\\"CREATE TABLE IF NOT EXISTS movie(title TEXT, year_released INTEGER, genre TEXT, rating REAL, director TEXT)\\") # update the record record = cur.execute(\\"UPDATE movie SET genre = 'Thriller', rating = 8.2, director = 'Jason Burke' WHERE title = 'The King's Speech' and year_released = '2010'\\") conn.commit() conn.close()"},{"prompt":"Set up a Python program to read in .csv data and generate a table. [Name, Age, City] [John, 20, New York], [George, 18, London], [Ringo, 25, Tokyo]","completion":"import pandas as pd # Initialize the data data = [['John', 20, 'New York'], ['George', 18, 'London'], ['Ringo', 25, 'Tokyo']] # Create the dataframe df = pd.DataFrame(data, columns = ['Name', 'Age', 'City']) # Print the dataframe print (df) Name Age City 0 John 20 New York 1 George 18 London 2 Ringo 25 Tokyo"},{"prompt":"Create a Python script to fetch the top 10 trending YouTube videos from last week. Not applicable","completion":"import requests url = \\"https://www.youtube.com/feed/trending\\" response = requests.get(url) data = response.json() trending_videos = [] for video in data[\\"items\\"]: video_title = video[\\"snippet\\"][\\"title\\"] video_url = \\"https://www.youtube.com/watch?v=\\" + video[\\"id\\"][\\"videoId\\"] trending_videos.append(\\"Title: \\" + video_title + \\" | URL \\" + video_url) for i in range(10): print(trending_videos[i])"},{"prompt":"Construct a basic class in Python for a Rectangle with two methods to calculate its area and perimeter.","completion":"class Rectangle(): def __init__(self,length,width): self.length = length self.width = width def area(self): return self.length * self.width def perimeter(self): return 2 * (self.length + self.width)"},{"prompt":"Create a Python script that takes a URL as an input and outputs the website title and description. https://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com' r = requests.get(url) soup = BeautifulSoup(r.content, 'html.parser') title = soup.title.string description = soup.find('meta', attrs={'name': 'description'})['content'] print('Title:', title) print('Description:', description)"},{"prompt":"Given two integers, write a Python function to add them.","completion":"def add_integers(num1, num2): return num1 + num2"},{"prompt":"Write a Python program that generates a series of Fibonacci numbers.","completion":"def fibonacci(n): a = 0 b = 1 for _ in range(n): a, b = b, a + b return a print(fibonacci(10))"},{"prompt":"Write a Python class to parse a JSON object. The JSON object will contain a list of dicts with a 'name' key. Write a method for the class that returns the names of the dicts in the supplied JSON object. {items: [{name: item1}, {name: item2}, {name: item3}]}","completion":"class ParseJSON: def __init__(self, jsonObject): self.jsonObject = jsonObject def getNames(self): names = [] for item in self.jsonObject['items']: name = item['name'] names.append(name) return names jsonObject = {\\"items\\": [{\\"name\\": \\"item1\\"}, {\\"name\\": \\"item2\\"}, {\\"name\\": \\"item3\\"}]} pp = ParseJSON(jsonObject) result = pp.getNames() print(result) # ['item1', 'item2', 'item3']"},{"prompt":"Create a Python script that creates a GUI application with two checkboxes. The checkboxes should be labeled cat and dog. When the submit button is pressed, it should print out whether the cat and dog checkboxes are checked. Not applicable","completion":"import tkinter as tk root = tk.Tk() # Create the two checkboxes cat_var = tk.IntVar() dog_var = tk.IntVar() cat_checkbox = tk.Checkbutton(root, text=\\"Cat\\", variable=cat_var) dog_checkbox = tk.Checkbutton(root, text=\\"Dog\\", variable=dog_var) cat_checkbox.pack() dog_checkbox.pack() # Create the button button = tk.Button(root, text=\\"Submit\\") button.pack() # Define the button handler def button_handler(): if cat_var.get(): print(\\"Cat is checked\\") else: print(\\"Cat is not checked\\") if dog_var.get(): print(\\"Dog is checked\\") else: print(\\"Dog is not checked\\") # Set the button handler button.configure(command=button_handler) root.mainloop()"},{"prompt":"Write a code block in Python to compute the dot product of two vectors. u = [1, 2, 3] v = [4, 5, 6]","completion":"def dot_product(u, v): if len(u) != len(v): raise ValueError(\\"Vectors u and v must be of the same length!\\") result = 0 for i in range(len(u)): result += u[i] * v[i] return result u = [1, 2, 3] v = [4, 5, 6] print(\\"Dot product of u and v is:\\" , dot_product(u, v))"},{"prompt":"Write a python program to extract all the words from a given sentence and store them into a dictionary. Calculate the frequency of each word, and store them in the same dictionary keyed with the words. I love to code","completion":"words_dict = {} sentence = \\"I love to code\\" words = sentence.split() for word in words: if word in words_dict: words_dict[word] += 1 else: words_dict[word] = 1 print(words_dict) # Output: # {'I': 1, 'love': 1, 'to': 1, 'code': 1}"},{"prompt":"Define a function in Python that takes as input a sentence and returns a list of all noun phrases in the sentence. sentence = The quick brown fox jumps over the lazy dog","completion":"def get_noun_phrases(sentence): noun_phrases = [] words = word_tokenize(sentence) tagged_sentence = pos_tag(words) chunks = ne_chunk(tagged_sentence) for chunk in chunks: if type(chunk) == Tree: phrase = \\" \\".join([word[0] for word in chunk]) noun_phrases.append(phrase) return noun_phrases"},{"prompt":"Generate a function in Python that accepts an array and its length as input and output the maximum sum of all its contiguous subarrays. [1, 9, 3, 17, 3, 6]","completion":"def maxSubArraySum(arr, length): max_so_far = 0 max_ending_here = 0 for i in range(0, length): max_ending_here = max_ending_here + arr[i] if max_ending_here < 0: max_ending_here = 0 elif max_so_far < max_ending_here: max_so_far = max_ending_here return max_so_far"},{"prompt":"Can you find the smallest number in a given list using Python? [4, 5, 6, 7, 8, 1, 2]","completion":"def smallest_num(lst): min_num = lst[0] for num in lst: if num < min_num: min_num = num return min_num lst = [4, 5, 6, 7, 8, 1, 2] print(smallest_num(lst))"},{"prompt":"Write a Python program to group two lists of numbers into a dictionary. The keys would be the first list and the values would be the second list. list_a = [1,2,3,4,5] list_b = [6,7,8,9,10]","completion":"list_a = [1,2,3,4,5] list_b = [6,7,8,9,10] d = dict(zip(list_a, list_b)) print(d) // {1: 6, 2: 7, 3: 8, 4: 9, 5: 10}"},{"prompt":"Create a Python function to check whether a number is divisible by another number or not. number1 = 15 number2 = 3","completion":"def is_divisible(number1, number2): return number1 % number2 == 0"},{"prompt":"Create a Python program for sorting a dictionary based on a given key. {apple: 10, banana: 5, pear: 7}","completion":"def sort_dict(d, key): return sorted(d.items(), key=lambda x: x[1][key]) #Test d = {\\"apple\\": 10, \\"banana\\": 5, \\"pear\\": 7} print(sort_dict(d, \\"price\\")) # Output: [('banana', {'price': 5}), ('pear', {'price': 7}), ('apple', {'price': 10})]"},{"prompt":"Develop an algorithm in Python for parsing a given text and counting the number of occurrences of a given word. This is an example text.","completion":"def parse_text(text, word): word_count = 0 words = text.split() for w in words: if w == word: word_count += 1 return word_count text = 'This is an example text.' word = 'example' word_count = parse_text(text, word) print('The word \\"{}\\" appears {} times in the text.'.format(word, word_count))"},{"prompt":"Create a Python program to generate a dot product between two given lists. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"def dot_product(list1, list2): product = 0 for x, y in zip(list1, list2): product += x*y return product"},{"prompt":"Write a machine learning model in Python that can classify a given text in one of two categories. text1: “This is a good movie text2: “This movie is bad","completion":"import pandas as pd import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB # Input data texts = [“This is a good movie”, “This movie is bad”] labels = [1, 0] # Create the feature vectors cv = CountVectorizer() x = cv.fit_transform(texts) # Split the dataset to train and test sets x_train, x_test, y_train, y_test = train_test_split(x, labels, test_size=0.2) # Build the ML model model = MultinomialNB() model.fit(x_train, y_train) # Make predictions predictions = model.predict(x_test)"},{"prompt":"Write a Python program to classify bank transactions into classes of 'Income' or 'Expenses' [{ 'description': 'Grocery', 'amount': 100 }, { 'description': 'Rent', 'amount': 600 }, { 'description': 'Salary', 'amount': 3000 }]","completion":"def classify_transactions(transaction_list): results = [] for transaction in transaction_list: category = 'Expense' if transaction['amount'] >= 0: category = 'Income' results.append({ 'description': transaction['description'], 'amount': transaction['amount'], 'category': category }) return results"},{"prompt":"Write a python code to sort a linked list by its value. The list is composed of nodes, each containing a value and a pointer to the next node.","completion":"class Node: def __init__(self, val): self.val = val self.next = None def sort_linked_list(head): if head is None: return None # Initialize the sorted linked list dummy_head = Node(None) prev = dummy_head # Traverse the linked list curr = head while curr: # Store the next node next_node = curr.next # Find the correct position in the sorted list while prev.next and prev.next.val < curr.val: prev = prev.next # Insert the current node curr.next = prev.next prev.next = curr # Move to the next node prev = dummy_head curr = next_node return dummy_head.next"},{"prompt":"Write a Python program to print the multiplication table for a given number. Number: 8","completion":"def printMultiplicationTable(num): for i in range(1, 11): print(\\"{} x {} = {}\\".format(num, i, num * i)) printMultiplicationTable(8) # Output: # 8 x 1 = 8 # 8 x 2 = 16 # 8 x 3 = 24 # 8 x 4 = 32 # 8 x 5 = 40 # 8 x 6 = 48 # 8 x 7 = 56 # 8 x 8 = 64 # 8 x 9 = 72 # 8 x 10 = 80"},{"prompt":"Generate a Python program to calculate the Mean Absolute Error (MAE) of a given dataset.","completion":"def mae(data): # Calculate the mean of the data mean = sum(data) / len(data) # Calculate the absolute difference of the data values from the mean abs_differences = [abs(value - mean) for value in data] # Calculate the mean absolute error mae = sum(abs_differences) / len(abs_differences) return mae"},{"prompt":"Can you generate Python code that prints the larger of two input numbers? 37, 22","completion":"# Define the two numbers num1 = 37 num2 = 22 # Print the larger number if num1 > num2: print(num1) else: print(num2)"},{"prompt":"Code a solution to the following problem in Python Given a list of integers, find the sum of all the elements in the list.","completion":"# Define a function for finding the sum of the elements of a list def find_sum(list): # Initialise the sum to 0 total = 0 # Iterate through each element for item in list: # Add the element to the total total += item # Return the total return total # Example list lst = [1, 2, 3, 4] # Call the function print(find_sum(lst))"},{"prompt":"Generate a Python script to classify the given data points according to their label. data_points = [(2,2),(3,3),(4,4)] labels = ['x', 'y',]","completion":"def classify_data_points(data_points, labels): classified_data_points = [] for data_point in data_points: if data_point[0] == data_point[1]: classified_data_points.append((data_point, labels[0])) else: classified_data_points.append((data_point, labels[1])) return classified_data_points"},{"prompt":"Generate a list of square numbers in Python.","completion":"square_numbers = [x**2 for x in range(10)]"},{"prompt":"mplement a web server in Python that responds to incoming requests.","completion":"import http.server def respond(handler): handler.send_response(200) handler.send_header('Content-type','text/html') handler.end_headers() handler.wfile.write(b'Hello World') class MyWebRequestHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): respond(self) if __name__=='__main__': server = http.server.HTTPServer(('0.0.0.0', 8001), MyWebRequestHandler) print('Starting server at port 8001...') server.serve_forever()"},{"prompt":"Write an algorithm in Python to perform a linear search. arr = [1, 5, 7, 8, 10] key = 7","completion":"def linear_search(arr, key): for index, element in enumerate(arr): if element == key: return index return -1 print(linear_search(arr, key))"},{"prompt":"Create a linked list structure in Python.","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node def printList(self): temp = self.head while (temp): print(temp.data) temp = temp.next"},{"prompt":"Create a Python program to take in two strings as input and return the longest common substring between them. string1 = ABBABCD string2 = ABCABC","completion":"def find_longest_common_substring(s1, s2): m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] longest, x_longest = 0, 0 for x in range(1, 1 + len(s1)): for y in range(1, 1 + len(s2)): if s1[x - 1] == s2[y - 1]: m[x][y] = m[x - 1][y - 1] + 1 if m[x][y] > longest: longest = m[x][y] x_longest = x else: m[x][y] = 0 return s1[x_longest - longest: x_longest] # Driver code string1 = \\"ABBABCD\\" string2 = \\"ABCABC\\" print(\\"Longest Common Substring: \\" + find_longest_common_substring(string1, string2))"},{"prompt":"Generate a program in Python to convert a list of integers into a single integer. list = [1, 2, 3, 4]","completion":"def list_to_int(list_of_ints): number = 0 for int in list_of_ints: number = number*10 + int return number"},{"prompt":"Create a linear regression model in Python to predict house prices based on geographic features such as rooms, square footage, and zip code. Rooms: 3 Square Footage: 2000 Zip Code: 92101","completion":"import pandas as pd import numpy as np data = pd.DataFrame({'Rooms': [3], 'Square_Footage': [2000], 'Zip_Code': [92101] }) # Split the input data into independent and dependent variables X = data.iloc[:, :-1] y = data.iloc[:, -1] # Build the model from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X, y) # Predict the price prediction = regressor.predict([[3, 2000, 92101]]) print(prediction)"},{"prompt":"Create an algorithm in Python to find the shortest path between two given points in a grid.","completion":"# Find the shortest path between two given points in a grid def findShortestPath(grid, start, end): # Create a queue for BFS queue = [] # Create visited array visited= [[False for col in range(len(grid[0]))] for row in range(len(grid))] # Create a Node object with the starting point start_node = Node(start[0],start[1],0) # Append the start node to the queue queue.append(start_node) # Check if the start and end coordinate is the same if start== end: return \\"Both points are same,no need to search\\" # Flag that indicates if the target node is reached target_found = False while queue and not target_found: # Get the front node node = queue.pop(0) i = node.x j = node.y # Check if the current node is the target if([i,j] == end): target_found = True # Return the number of moves from the start node to the target node return node.dist # Check if the current node is unvisited and not an obstacle if(not visited[i][j] and grid[i][j]!=1): # Mark the current node as visited visited[i][j] = True # Add all possible adjacent nodes to the queue # Move up if(i+1<len(grid)): queue.append(Node(i+1,j,node.dist + 1)) # Move down if(i-1>=0): queue.append(Node(i-1,j,node.dist + 1)) # Move left if(j+1<len(grid[0])): queue.append(Node(i,j+1,node.dist + 1)) # Move right if(j-1>=0): queue.append(Node(i,j-1,node.dist + 1)) return 0 # Create a Node class for storing each node class Node: def __init__(self,x,y,dist): self.x = x self.y = y self.dist = dist"},{"prompt":"Create a program in Python that finds the index of the first occurrence of a target number in a given array. arr = [1, 3, 5, 3, 7, 3, 6], target = 3","completion":"arr = [1, 3, 5, 3, 7, 3, 6] target = 3 def findIndex(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 # Driver Code index = findIndex(arr, target) print(\\"Index of\\", target, \\"is\\", index) // Output: Index of 3 is 1"},{"prompt":"Read the string ‘Hello World’ and identify the lengths of the words using Python","completion":"def word_lengths(string): words = string.split(' ') lengths = [] for word in words: lengths.append(len(word)) return lengths word_lengths('Hello World') // [5, 5]"},{"prompt":"Generate a Python program to find the maximum number in a given set of numbers. 7, 6, 5, 9, 8","completion":"def find_maximum(nums): # Initialize the maximum number max_num = nums[0] # Loop through the list for num in nums: # Check if the current number is bigger if num > max_num: # If it is, save the number max_num = num return max_num # call the function maximum = find_maximum(nums) print(\\"The maximum is \\" + str(maximum))"},{"prompt":"Create a Python program to calculate the average of a given list of integers while ignoring any values greater than 10. [1, 5, 9, 10, 12, 15]","completion":"def average_ignoring_ten(numbers): total = 0 number_of_numbers = 0 for number in numbers: if number <= 10: total += number number_of_numbers += 1 return total / number_of_numbers"},{"prompt":"Create a python script to automatically generate new pseudorandom passwords.","completion":"import string import random def generate_password(length): password_chars = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(password_chars) for i in range(length)) print(generate_password(20))"},{"prompt":"The given code is a Python class called ScriptBase that contains several methods for performing various tasks. To use this code, create an instance of the ScriptBase class and call its methods as needed. The methods include: __init__: Initializes the ScriptBase object and sets its instance_id, name, and ts attributes. If a config_file is provided, it reads the configuration from that file. notify: Sends a notification with the given subject and body. mkdir: Creates a directory at the given path if it does not already exist. umount: Unmounts the given path if it is currently mounted. run: Executes the given command and returns its status. If notify is True, it sends a notification with the command output if the command fails. If exit_on_error is True, it exits the script with a status code of 1 if the command fails. main: A placeholder method that can be overridden in a subclass to define the main logic of the script.","completion":"import os import sys from vulpo.utils import ShellCommand, get_ts import vulpo import vulpo.utils class ScriptBase(object): def __init__(self, config_file=None): self.instance_id = vulpo.config.get('Instance', 'instance-id', 'default') self.name = self.__class__.__name__ self.ts = get_ts() if config_file: vulpo.config.read(config_file) def notify(self, subject, body=''): vulpo.utils.notify(subject, body) def mkdir(self, path): if not os.path.isdir(path): try: os.mkdir(path) except: vulpo.log.error('Error creating directory: %s' % path) def umount(self, path): if os.path.ismount(path): self.run('umount %s' % path) def run(self, command, notify=True, exit_on_error=False, cwd=None): self.last_command = ShellCommand(command, cwd=cwd) if self.last_command.status != 0: vulpo.log.error('Error running command: \\"%s\\". Output: \\"%s\\"' % (command, self.last_command.output)) if notify: self.notify('Error encountered', 'Error running the following command:nt%snnCommand output:nt%s' % (command, self.last_command.output)) if exit_on_error: sys.exit(-1) return self.last_command.status def main(self): pass"},{"prompt":"Create a script in Python that calculates the average length of a given list of strings list_of_strings = [cat, dog, mouse, elephant]","completion":"def calculate_avg_string_length(string_list): total_length = 0 for item in string_list: total_length += len(item) return total_length / len(string_list) list_of_strings = [\\"cat\\", \\"dog\\", \\"mouse\\", \\"elephant\\"] result = calculate_avg_string_length(list_of_strings) print(result)"},{"prompt":"Can you develop a python script to classify the sentiment of the following tweet as either positive, negative, or neutral? I'm so confused about everything I'm going through right now","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def classify_sentiment(tweet): sid = SentimentIntensityAnalyzer() scores = sid.polarity_scores(tweet) if scores['compound'] > 0: return 'positive' elif scores['compound'] == 0: return 'neutral' else: return 'negative' tweet = \\"I'm so confused about everything I'm going through right now\\" sentiment = classify_sentiment(tweet) print(sentiment) # prints 'negative'"},{"prompt":"Create a class in Python to represent a student. This class should contain fields for name, age, and a list of subjects taken. Not applicable","completion":"class Student: def __init__(self, name, age, subjects): self.name = name self.age = age self.subjects = subjects def getName(self): return self.name def getAge(self): return self.age def getSubjects(self): return self.subjects"},{"prompt":"Develop a neural network model in Python to predict the output for the folowwing input data. Inputs: [1, 0, 1] Output: 0","completion":"import numpy as np from keras.layers import Dense from keras.models import Sequential # Prepare training data X = np.array([[1, 0, 1]]) y = np.array([0]) # Create model model = Sequential() model.add(Dense(3, input_dim=3, activation='relu')) model.add(Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(X, y) # Predict output pred = model.predict(X) print(pred)"},{"prompt":"Can you create a program in Python that prints out the number of syllables of a given word? word = potato","completion":"import re def get_num_syllables(word): #list of vowel characters vowels = ['a', 'e', 'i', 'o', 'u', 'y'] #count the number of syllables num_syllables = 0 for i in range(len(word)): if word[i].lower() in vowels: num_syllables += 1 #don't double count syllables elif word[i] == 'e' and (i == len(word)-1 or not word[i+1].lower() in vowels): num_syllables -= 1 return num_syllables word = \\"potato\\" num_syllables = get_num_syllables(word) print(\\"The word '\\" + word + \\"' has \\" + str(num_syllables) + \\" syllables.\\")"},{"prompt":"Write a python program to invert a given dictionary.","completion":"def invert_dictionary(d): inverse = dict() for key in d: # Go through the original dictionary val = d[key] # Check if key already exists in the inverse dictionary if val not in inverse: # If not, create a new key-value pair inverse[val] = [key] else: inverse[val].append(key) return inverse"},{"prompt":"Create a dictionary in python from a commaseparated value string. s = name,age,city,country","completion":"def csv_to_dict(s): data_dict = {} # split the string into list of elements elements = s.split(',') # iterate through the list for i in range(0, len(elements), 2): # add each element as a key to the dictionary data_dict[elements[i]] = elements[i+1] # return the dictionary return data_dict"},{"prompt":"Write a Python code which will print out the number of words in a string. Example string","completion":"def wordCount(str): count = len(str.split()) return count print(wordCount(\\"Example string\\")) # Output: 2"},{"prompt":"Generate the syntax tree for a given Python expression. expression = (A + B) * (C + D)","completion":"import ast tree = ast.parse(expression)"},{"prompt":"Create a JSONbased web service using Python's Flask and SQLite. Not applicable","completion":"from flask import Flask, jsonify from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite' db = SQLAlchemy(app) class User(db.Model): id = db.Column(db.Integer, primary_key=True) username = db.Column(db.String(80), unique=True, nullable=False) email = db.Column(db.String(120), unique=True, nullable=False) db.create_all() @app.route('/users', methods=['GET']) def get_users(): users = User.query.all() return jsonify([user.serialize() for user in users]) @app.route('/user/<int:user_id>', methods=['GET']) def get_user_by_id(user_id): user = User.query.get(user_id) if user is None: return jsonify({'error': 'User not found'}), 404 return jsonify(user.serialize()) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Use Amazon SageMaker to create a productionready model for realtime analytics of stock price data. Not applicable","completion":"# Create a data processing job import boto3 job_name = \\"sagemaker-demo-stock-price-job\\" role = \\"arn:aws:iam::aws:role/service-role/AmazonSageMaker-ExecutionRole-20200720T202051\\" dataprocessing = boto3.client('sagemaker') response = dataprocessing.create_processing_job( ProcessingInputs=[{ 'InputName': 'stock_data', 'S3Input': { 'S3Uri': 's3://stock-data-bucket/data', 'LocalPath': '/opt/ml/processing/input' } }], ProcessingOutputConfig={ 'Outputs': [{ 'OutputName': 'stock_data_processed', 'S3Output': { 'S3Uri': 's3://stock-data-bucket/processed-data', 'LocalPath': '/opt/ml/processing/output' } }], 'KmsKeyId': 'aws/sagemaker' }, ProcessingJobName=job_name, ProcessingResources={ 'ClusterConfig': { 'InstanceCount': 1, 'InstanceType': 'ml.m5.xlarge', 'VolumeSizeInGB': 30 } }, StoppingCondition={ 'MaxRuntimeInSeconds': 1800 }, AppSpecification={ 'ImageUri': '732703918919.dkr.ecr.us-east-1.amazonaws.com/sagemaker-stock-price-model:1.0.0', 'ContainerEntrypoint': [ 'python3', '/opt/ml/processing/train.py' ] }, Environment={ 'MaxRuntimeInSeconds': 1800, 'ResourceConfig': { 'VolumeKmsKeyId': 'aws/sagemaker' } }, RoleArn=role )"},{"prompt":"Design a chatbot agent in Python.","completion":"class Chatbot: def __init__(self, name): self.name = name def greet(self): print(\\"Hey there! I'm {}. What's your name?\\".format(self.name)) def handle_input(self, user_input): if user_input == \\"Hi\\": print(\\"Hi there! What can I do for you?\\") elif user_input == \\"Bye\\": print(\\"Bye! Have a great day!\\") else: print(\\"I'm sorry, I don't understand.\\") bot = Chatbot(\\"Python Bot\\") bot.greet() bot.handle_input(\\"Hi\\") bot.handle_input(\\"Bye\\")"},{"prompt":"Clean the following dataset using Python to remove any irrelevant entries. data = [ [1, 'John', 'Apple'], [2, 'Allan', ''], [3, 'Kim', 'Orange'], [4, '', 'Banana'], [5, 'Sam', 'Kiwi'] ]","completion":"def clean_data(data): cleaned_data = [] for row in data: if row[1] != '' and row[2] != '': cleaned_data.append(row) return cleaned_data"},{"prompt":"Generate a function to calculate the greatest common factor (GCF) of two numbers in Python. Not applicable","completion":"def gcf(a, b): if (a == 0): return b if (b == 0): return a if (a == b): return a if (a > b): return gcf(a-b, b) return gcf(a, b-a)"},{"prompt":"Write a function in Python that finds the most frequent item in a given sequence. sequence = [1, 2, 3, 4, 5, 1, 1, 2]","completion":"def most_frequent(sequence): return max(set(sequence), key = sequence.count) print(most_frequent(sequence))"},{"prompt":"Write a Python program to sort a given list of dictionaries based on the value and key of each item. data = [ {name: John, age: 20}, {name: Alex, age: 16}, {name: David, age: 30} ]","completion":"def sort_dict_list(data): \\"\\"\\" Sort a list of dictionaries based on their values and keys. Parameters: data (list): List of dictionaries with key and value Returns: list: Sorted list of dictionaries \\"\\"\\" return sorted(data, key=lambda k: (k['name'], k['age'])) if __name__ == '__main__': data = [ {\\"name\\": \\"John\\", \\"age\\": 20}, {\\"name\\": \\"Alex\\", \\"age\\": 16}, {\\"name\\": \\"David\\", \\"age\\": 30} ] print(sort_dict_list(data))"},{"prompt":"Optimize this Python code for finding the maximum value in an array. def find_max(arr): max_value = 0 for x in arr: if x > max_value: max_value = x return max_value","completion":"def find_max(arr): return max(arr)"},{"prompt":"Create a Python script to retrieve stock market data from an API and visualize it. Stock market data for Apple","completion":"import requests import json import matplotlib.pyplot as plt # Fetch stock data from the API response = requests.get('https://api.iextrading.com/1.0/stock/{symbol}/chart/1d') # Parse the data into a dict data = json.loads(response.text) x_values = [entry['minute'] for entry in data] y_values = [entry['average'] for entry in data] # Plot the data plt.plot(x_values, y_values) plt.title('Stock Market Data for Apple') plt.xlabel('Time (minutes)') plt.ylabel('Average Price') plt.show()"},{"prompt":"Convert the given equation in Python to a mathematical expression. x = y + 2z 7","completion":"x = y + 2*z - 7"},{"prompt":"Create a Python program to write a string in Reverse order This is a Test string","completion":"def reverse_string(input_string): str = \\"\\" for i in input_string: str = i + str return str if __name__ == \\"__main__\\": input_string = \\"This is a Test string\\" print(reverse_string(input_string))"},{"prompt":"Create a python script which replaces each letter in a string by the letter which appears n positions after it. string = abcdef n = 2","completion":"def replace_letter(string, n): result = \\"\\" for char in string: if char == 'z': result += 'b' elif char == 'Z': result += 'B' else: result += chr(ord(char) + n) return result"},{"prompt":"Create a Python function that generates random points within a given area of a circle. center=(4, 4), radius=3","completion":"import random import math def get_random_points_in_circle(center, radius): points = [] x_center, y_center = center while True: x = random.uniform(x_center - radius, x_center + radius) y = random.uniform(y_center - radius, y_center + radius) dist = math.sqrt((x - x_center) ** 2 + (y - y_center) ** 2) if dist <= radius: points.append((x, y)) if len(points) >= 10: break return points if __name__ == \\"__main__\\": points = get_random_points_in_circle((4, 4), 3) print(points)"},{"prompt":"Create a Python script to parse a JSON string from a web request. The script should parse the string and print keyvalue pairs for each item in the JSON. { data: [ { id: 1, name: John Doe, age: 28 }, { id: 2, name: Jane Doe, age: 23 } ] }","completion":"import json # parse json file data = json.loads(<input>) # print key-value pairs for each item in json string for item in data['data']: print('ID:', item['id']) print('Name:', item['name']) print('Age:', item['age'])"},{"prompt":"Design a program in Python to encrypt data using AES algorithm","completion":"from Crypto.Cipher import AES # the block size for the cipher object; must be 16, 24, or 32 for AES BLOCK_SIZE = 16 # the character used for padding--with a block cipher such as AES, the value # you encrypt must be a multiple of BLOCK_SIZE in length. This character is # used to ensure that your value is always a multiple of BLOCK_SIZE PADDING = '{' # one-liner to sufficiently pad the text to be encrypted pad = lambda s: s + (BLOCK_SIZE - len(s) % BLOCK_SIZE) * PADDING # one-liners to encrypt/encode and decrypt/decode a string # encrypt with AES, encode with base64 EncodeAES = lambda c, s: base64.b64encode(c.encrypt(pad(s))) DecodeAES = lambda c, e: c.decrypt(base64.b64decode(e)).rstrip(PADDING) # generate a random secret key secret = os.urandom(BLOCK_SIZE) # create a cipher object using the random secret cipher = AES.new(secret)"},{"prompt":"Generate a Python class with a constructor that initializes two variables a list and a dictionary.","completion":"class MyClass: def __init__(self): self.list = [] self.dictionary = {}"},{"prompt":"Generate a complete REST API using Python and Flask that can operate on a simple item model. Input fields for item model: id (integer, primary key) name (string) colour (string) price (integer)","completion":"from flask import Flask, request from flask_sqlalchemy import SQLAlchemy app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class Item(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String) colour = db.Column(db.String) price = db.Column(db.Integer) db.create_all() @app.route('/items', methods=['POST']) def create_item(): item = Item(name=request.json['name'], colour=request.json['colour'], price=request.json['price']) db.session.add(item) db.session.commit() return {'id': item.id} @app.route('/items/int:id', methods=['GET']) def get_item(id): item = Item.query.get(id) return {'name': item.name, 'colour': item.colour, 'price': item.price} @app.route('/items/int:id', methods=['PUT']) def update_item(id): item = Item.query.get(id) item.name = request.json['name'] item.colour = request.json['colour'] item.price = request.json['price'] db.session.commit() return {'message': 'Item updated'} @app.route('/items', methods=['GET']) def get_items(): items = Item.query.all() return {'items': [{'name': item.name, 'colour': item.colour, 'price': item.price} for item in items]} @app.route('/items/int:id', methods=['DELETE']) def delete_item(id): Item.query.filter_by(id=id).delete() db.session.commit() return {'message': 'Item deleted'} if name == 'main': app.run(debug=True)"},{"prompt":"Generate a python program to swap the first and last element of a list list_of_numbers = [4, 5, 7, 8, 6]","completion":"def swap(list_of_numbers): list_of_numbers[0], list_of_numbers[-1] = list_of_numbers[-1], list_of_numbers[0] return list_of_numbers"},{"prompt":"Produce a program in Python to search for an element in a list [2, 3, 4, 5, 6]","completion":"# function to search an element # in a list def linear_search(list, x): for index, element in enumerate(list): if element == x: return index return -1"},{"prompt":"Explain the concept of Lambda functions in Python.","completion":"Lambda functions in Python allow us to create anonymous functions, which are functions that are not bound to a name. These functions are typically used when we need a quick function for a specific task, and do not plan to reuse it. Lambda functions can take any number of arguments, but can only have one expression. The expression is then evaluated and the result is returned. Lambda functions are typically written in a single line and are often used with higher order functions like map(), filter() and reduce()."},{"prompt":"Optimize the given Python code to reduce execution time def calculate_sum(numbers): result = 0 for number in numbers: result += number return result numbers = [1, 2, 3, 4, 5] calculate_sum(numbers)","completion":"def calculate_sum(numbers): return sum(numbers) numbers = [1, 2, 3, 4, 5] calculate_sum(numbers)"},{"prompt":"Create a Python function that takes a string and finds the longest word in it. str = I love learning new things","completion":"def findLongestWord(string): # Split the string into an array of words words = string.split(\\" \\") # Initialize the longest word as empty string longestWord = \\"\\" # Iterate over the words and keep track of the longest one for word in words: if len(word) > len(longestWord): longestWord = word # Return the longest word return longestWord # Test string = \\"I love learning new things\\" longestWord = findLongestWord(string) print(\\"Longest word is \\" + longestWord)"},{"prompt":"Create a Python program to find the minimum element in a BST. Tree in the form of: 4 2 7 1 3 6 8","completion":"def minValue(root): if root is None: # check if tree is empty return -1 curr = root while curr.left: # until we reach the leftmost leaf curr = curr.left return curr.data # Driver Program if __name__ == '__main__': root = Node(4) root.left = Node(2) root.right = Node(7) root.left.left = Node(1) root.left.right = Node(3) root.right.left = Node(6) root.right.right = Node(8) print \\"Minimum Element in BST is %d\\" %(minValue(root))"},{"prompt":"Create a Python program to identify most frequent value Identify the most frequent element in the array [1, 2, 2, 3, 3, 3, 4].","completion":"def identify_most_frequent_value(arr): counts = {} # count the occurrence of each element for num in arr: if num in counts: counts[num] += 1 else: counts[num] = 1 # find the most frequent element max_freq = 0 max_freq_num = 0 for num in counts: if counts[num] > max_freq: max_freq_num = num max_freq = counts[num] return max_freq_num"},{"prompt":"Develop a Python script to print the current date and time in ISO 8601 format.","completion":"import datetime # Get current datetime now = datetime.datetime.now() # Print the current datetime in ISO 8601 format print(now.isoformat())"},{"prompt":"Can you create a web scraper in Python to extract the titles of articles from a newspaper website? http://example.com/newspaper","completion":"import requests from bs4 import BeautifulSoup url = \\"http://example.com/newspaper\\" # fetch data from the given URL r = requests.get(url) # create a BeautifulSoup object soup = BeautifulSoup(r.content, \\"lxml\\") # extract the title of all articles for article_title in soup.find_all('h3', class_='title'): print(article_title.text)"},{"prompt":"Write a Python program to generate the powerset of a given set. [1, 2, 3]","completion":"def powerset(s): x = len(s) powerset = [] for i in range(1 << x): subset = [s[j] for j in range(x) if (i & (1 << j))] powerset.append(subset) return powerset"},{"prompt":"Create a virtual environment in Python using Pipenv.","completion":"pip install pipenv pipenv install pipenv shell"},{"prompt":"Edit the existing Python code to make the program more efficient. def sum_array(array): total = 0 for element in array: total += element return total","completion":"def sum_array(array): total = 0 for element in array: total = total + element return total"},{"prompt":"Python, generate a function that takes two arguments (a list and a number) and prints out the first two elements of the list that have a length greater than the second argument. list_of_words = ['apple', 'banana', 'carrot', 'durian'] integer = 4","completion":"def print_long_words(list_of_words, integer): long_words = [] for word in list_of_words: if len(word) > integer: long_words.append(word) if len(long_words)>1: print(long_words[0], long_words[1]) else: print('No words found with length greater than ', integer)"},{"prompt":"Rewrite a Python function given a few specific requirements. def is_prime(n): if n < 2: return False for i in range(2, n): if n % i == 0: return False return True","completion":"def is_prime(n): if n < 2: return False elif n == 2: return True elif n > 2 and n % 2 == 0: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True"},{"prompt":"Create a Python program to automatically delete any repeated words from a given text. The cat was was running running in the park","completion":"text = \\"The cat was running in the park\\" words = text.split(' ') unique_words = [] for word in words: if word not in unique_words: unique_words.append(word) print(' '.join(unique_words))"},{"prompt":"Write a Python program that implements a dataset augmentation technique to increase the size of a given dataset. Sample Dataset (Python nested lists): [ [1,1,1], [2,2,2], [3,3,3], [4,4,4] ]","completion":"import random sample_dataset = [ [1,1,1], [2,2,2], [3,3,3], [4,4,4] ] def data_augmentation(dataset): augmented_dataset = [] for data in dataset: augmented_row = list(data) augmented_row.append(random.randint(-1,1)) augmented_dataset.append(augmented_row) return augmented_dataset augmented_dataset = data_augmentation(sample_dataset) print('Sample dataset:') print(sample_dataset) print('Augmented dataset:') print(augmented_dataset)"},{"prompt":"Create a class in Python that models a charging station.","completion":"class ChargingStation: def __init__(self, id, description, max_charge): self.id = id self.description = description self.max_charge = max_charge def check_status(self): if self.max_charge > 0: return \\"Charging station is available\\" else: return \\"Charging station is not available\\""},{"prompt":"Can you provide a Python program to generate a random integer within the range of 1 to 100?","completion":"import random def random_int_between_1_and_100(): return random.randint(1, 100)"},{"prompt":"Create a kNearest Neighbors (kNN) classifier in Python to predict whether an individual earns more or less than 50,000 per year. [[44, 'M', 17, 0, 0, 'high school', 44000], [38, 'M', 9, 4, 0, 'Bachelor's degree', 55000], [30, 'F', 12, 2, 0, 'Master's degree', 48000]]","completion":"import numpy as np class KNNClassifier: def __init__(self, k): self.k = k def fit(self, X, y): self.X_train = X self.y_train = y def predict(self, X): predictions = [] for row in X: distances = [] for train_row in self.X_train: distances.append(np.linalg.norm(row - train_row)) sorted_distances = np.argsort(distances) top_k_distances = sorted_distances[:self.k] top_k_labels = [self.y_train[i] for i in top_k_distances] label_counts = {} for label in top_k_labels: label_counts[label] = label_counts.get(label, 0) + 1 sorted_label_counts = sorted(label_counts.items(), key = lambda x: x[1], reverse=True) predictions.append(sorted_label_counts[0][0]) return predictions"},{"prompt":"Write an invitation program in Python for a birthday party.","completion":"def invite_guests(guests): for guest in guests: print(\\"Dear \\"+ guest + \\", You are invited to my birthday party!\\")"},{"prompt":"Create a Python Flask application that takes a user input and generates a new text from the input. Alice was once a a little girl living","completion":"from flask import Flask app = Flask(__name__) @app.route('/', methods=['POST']) def generate_newtext(): input_text = request.form.get('input_text') new_text = input_text + \\" She had wonderful adventures exploring the world around her and filled her days with joy.\\" return new_text if __name__ == '__main__': app.run()"},{"prompt":"Write a Python program to implement an algebraic equation. Equation: 3x2 + 7x 4","completion":"def evaluate_eq(x): return 3*x*x + 7*x - 4"},{"prompt":"Write a Python program to count words in a sentence. The program should take in a sentence as input and return a dictionary with the words as the keys and the frequencies as the values. Sentence: “The quick brown fox jumps over the lazy dog”","completion":"sentence = \\"The quick brown fox jumps over the lazy dog\\" word_freq = {} for word in sentence.split(): if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 print(word_freq)"},{"prompt":"dentify the issue with the following Python code snippet. list1 = [1, 2, 3] list2 = [4, 5, 6] list3 = list1 + list2","completion":"The issue with the code snippet is that the two lists are not being concatenated, but instead being added together, resulting in a list containing the sums of the corresponding elements in the two lists. The correct code snippet should be as following: list1 = [1, 2, 3] list2 = [4, 5, 6] list3 = list1 + list2"},{"prompt":"Use regex to match a valid email address in python","completion":"import re EMAIL_REGEX = re.compile(r\\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+)\\") def is_email_valid(email): return EMAIL_REGEX.match(email) != None"},{"prompt":"Create a Python script that extracts a 3x3 submatrix from a 3x5 matrix. [[1, 2, 3, 4, 5], [6, 7, 8, 9, 0], [1, 2, 3, 4, 5]]","completion":"matrix = [[1, 2, 3, 4, 5], [6, 7, 8, 9, 0], [1, 2, 3, 4, 5]] submatrix = [[matrix[0][0], matrix[0][1], matrix[0][2]], [matrix[1][0], matrix[1][1], matrix[1][2]], [matrix[2][0], matrix[2][1], matrix[2][2]]] print(submatrix)"},{"prompt":"Suggest an approach to solve a Sudoku using Python.","completion":"def solve_sudoku(board): find = find_empty_location(board) if not find: return True else: row, col = find for i in range(1,10): if is_valid(board, i, (row, col)): board[row][col] = i if solve_sudoku(board): return True # Undo the current cell for backtracking board[row][col] = 0 return False"},{"prompt":"Develop a Python program that plays all the notes of a particular key (say F Sharp Major)","completion":"def play_f_sharp_major(): key_notes = ['F#', 'G#', 'A', 'A#', 'B', 'C#', 'D#'] for note in key_notes: play_note(note)"},{"prompt":"Create a data analysis solution using Python and Pandas. The CSV file has three columns: Country, Population, and Are","completion":"import pandas as pd # Read in the CSV file df = pd.read_csv(\\"data.csv\\") # Calculate population density df['Density'] = df['Population'] / df['Area'] # Print the density of the first 5 countries print(df.head()['Density'])"},{"prompt":"Create a function in Python to calculate the length of the longest palindrome in a given string. String: abbaacb","completion":"def longest_palindrome(text): n = len(text) result = 0 dp = [[False] * (n + 1) for _ in range(n + 1)] for l in range(1, n + 1): for i in range(n - l + 1): j = i + l - 1 if l == 1: dp[i][j] = True elif l == 2 and text[i] == text[j]: dp[i][j] = True elif text[i] == text[j] and dp[i + 1][j - 1]: dp[i][j] = True if dp[i][j] and l > result: result = l return result text = 'abbaacba' print(longest_palindrome(text))"},{"prompt":"Construct an algorithm in Python to find the deepest node in a binary tree.","completion":"def find_deepest_node(root): if root is None: return queue = [] queue.append(root) deepest_node = None while queue: node = queue.pop(0) deepest_node = node if node.left: queue.append(node.left) if node.right: queue.append(node.right) return deepest_node"},{"prompt":"Create a neural network in Python for handwritten digit recognition using the MNIST dataset.","completion":"import tensorflow as tf from tensorflow.examples.tutorials.mnist import input_data # Load the MNIST dataset mnist = input_data.read_data_sets(\\"MNIST_data/\\", one_hot=True) # Inputs and Outputs x = tf.placeholder(tf.float32, [None, 784]) y_ = tf.placeholder(tf.float32, [None, 10]) # Neural Network Model W = tf.Variable(tf.zeros([784, 10])) b = tf.Variable(tf.zeros([10])) # Softmax Output y = tf.nn.softmax(tf.matmul(x, W) + b) # Cost Function cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1])) # Training train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy) init = tf.initialize_all_variables() sess = tf.Session() sess.run(init) # Train for i in range(10000): batch_xs, batch_ys = mnist.train.next_batch(100) sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys}) # Test correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1)) accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) print(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))"},{"prompt":"Modify the following Python code to remove any duplicate elements in an array. myList = [1, 2, 3, 2, 1]","completion":"myList = list(set(myList))"},{"prompt":"Generate a Python program that determines whether a given array is a palindrome or not. [3,2,1,1,2,3]","completion":"def is_palindrome(arr): if arr == arr[::-1]: return True return False result = is_palindrome([3, 2, 1, 1, 2, 3]) print(result) # Output: True"},{"prompt":"Write a class definition in python that will initialize an object of the class with given parameters name, age","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age"},{"prompt":"Construct a Python program to encrypt a given text using the Caesar cipher. text = “Hello World!” key = 2","completion":"def caesar_encrypt(text, key): encrypted = \\"\\" for char in text: if char.isalpha(): if char.isupper(): encrypted += chr((ord(char) + key - 65) % 26 + 65) else: encrypted += chr((ord(char) + key - 97) % 26 + 97) else: encrypted += char return encrypted text = \\"Hello World!\\" key = 2 encrypted_text = caesar_encrypt(text, key) print(encrypted_text) #Hfnnq Yqgfgt!"},{"prompt":"Design a Python script to insert a given string at the beginning and end of a given array. [hello, world], ***","completion":"def insertBeginningAndEnd(arr, str): result = [] for element in arr: result.append(str + element + str) return result result = insertBeginningAndEnd([\\"hello\\", \\"world\\"], \\"***\\") print(result)"},{"prompt":"Write a Python program to collect data from an API and store the data in a SQL database. import requests url = 'http://some_api.com/resource1/?format=json'","completion":"import sqlite3 import requests # Connect to the database db = sqlite3.connect('api_data.db') # Create the statement stmt = 'INSERT INTO api_data (data) VALUES (?)' # Collect and save the data data = requests.get(url).json() db.execute(stmt, (data,)) db.commit() db.close()"},{"prompt":"mplement a regression algorithm in Python to predict housing prices. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Load the data data = pd.read_csv('data.csv') # Define the inputs and labels X = data[['square_feet', 'beds', 'baths']] y = data['price'] # Create and train the model model = LinearRegression() model.fit(X, y) # Test the model predictions = model.predict(X)"},{"prompt":"mplement an algorithm in Python to calculate the Fibonacci sequence.","completion":"def Fibonacci(x): if x <= 0: return 0 elif x == 1: return 1 else: return Fibonacci(x-1) + Fibonacci(x-2)"},{"prompt":"Create a feature for a Python script to generate random passwords. The script should produce secure passwords between 8 to 12 characters using a combination of lowercase, uppercase, numeric, and special characters. Not applicable","completion":"import random import string def generate_password(length): chars = string.ascii_letters + string.digits + string.punctuation random.seed = (os.urandom(1024)) password = ''.join(random.choice(chars) for i in range(length)) return password password = generate_password(12)"},{"prompt":"Generate a Python function to return the elements of a given list in reverse order without using any library.","completion":"def reverse_list(lst): reversed_list = [] for i in range(len(lst)-1, -1, -1): reversed_list.append(lst[i]) return reversed_list result = reverse_list([1,2,3,4,5]) print(result)"},{"prompt":"Generate a function in Python to calculate the value of an employee’s paycheck given the hours worked and the hourly rate.","completion":"def calc_paycheck(hours_worked, hourly_rate): return hours_worked * hourly_rate"},{"prompt":"Create a Python program to mark a character as asterisk (*) if it's the same as the previous one? test_string = SSSSSSSSSShellllllllllllooooooooo","completion":"def mark_asterisk(input): res = \\"\\" temp = input[0] for char in input: if char == temp: res += '*' else: res += char temp = char return res"},{"prompt":"Optimize the following Python code to make it run faster. def is_prime(num): for i in range(2, num): if (number % i) == 0: return False return True","completion":"def is_prime(num): if num < 2: return False if num == 2 or num == 3: return True i = 2 while i*i <= num: if (num % i) == 0: return False i += 1 return True"},{"prompt":"Create a data visualization in Python to represent the given dataset. Dataset contains information on 922 passengers from the Titanic, including age, gender and class.","completion":"import matplotlib.pyplot as plt import seaborn as sns #Read in data titanic_data = pd.read_csv('titanic_data.csv') #Create a barplot for age ax = sns.countplot(x=\\"age\\", data=titanic_data) ax.set_title('Age Distribution of Titanic Passengers') ax.set_ylabel('Number of Passengers') ax.set_xlabel('Age') plt.show()"},{"prompt":"Create a Python function that takes inputs in the form of two words and returns the start index of the second word in the first word. Word1 = Mountain ,Word2 = tain","completion":"def index_of_word(w1, w2): pos = 0 for i in w1: if w1.find(w2,pos) > -1: return w1.find(w2,pos) pos +=1 return -1"},{"prompt":"Simplify and optimize the following Python code for computing the mean of a list of numbers. def mean(numbers): total = 0 for n in numbers: total = total + n return total / len(numbers)","completion":"def mean(numbers): return sum(numbers) / len(numbers)"},{"prompt":"Design a class in Python to store value pairs.","completion":"class ValuePair(): def __init__(self, key, value): self.key = key self.value = value def get_key(self): return self.key def get_value(self): return self.value"},{"prompt":"Write a Python program to convert a given date in the format mm/dd/yyyy to its equivalent day of the week.","completion":"import datetime date_string = input(\\"Enter date in mm/dd/yyyy format:\\") date = datetime.datetime.strptime(date_string, \\"%m/%d/%Y\\") weekday = date.strftime(\\"%A\\") print(\\"The day for the date\\",date_string,\\"is\\",weekday)"},{"prompt":"mplement a sorting algorithm in Python to sort letters of an alphabet.","completion":"def alphabet_sort(string): # Split the string into a list of chars chars = list(string) # Sort the list alphabetically chars.sort() # Join the list of chars return \\"\\".join(chars)"},{"prompt":"Create a Python program that takes a string as input and returns its top 3 most frequent characters","completion":"def most_frequent_chars(s): d = {} for i in s: if i not in d: d[i] = 0 d[i]+=1 d = sorted(d.items(),key = lambda x:x[1], reverse=True) return [k for k ,v in d[:3]]"},{"prompt":"Create a library in Python to generate Fibonacci numbers.","completion":"We can create a library in Python to generate Fibonacci numbers. We can define a function that takes in the numbers of Fibonacci numbers to generate as an argument and returns a list of Fibonacci numbers. The function can maintain a cache of previously generated Fibonacci numbers to reduce computation time."},{"prompt":"Create a \`GenericScalar\` class that represents a GraphQL scalar value that could be a String, Boolean, Int, Float, List or Object. Implement the \`identity\` method that returns the input value, \`serialize\` and \`parse_value\` methods that also return the input value, and the \`parse_literal\` method that parses the input AST and returns the corresponding Python value.","completion":"from __future__ import unicode_literals from graphql.language.ast import (BooleanValue, FloatValue, IntValue, StringValue, ListValue, ObjectValue) from graphene.types.scalars import MIN_INT, MAX_INT from .scalars import Scalar class GenericScalar(Scalar): \\"\\"\\" The \`GenericScalar\` scalar type represents a generic GraphQL scalar value that could be: String, Boolean, Int, Float, List or Object. \\"\\"\\" @staticmethod def identity(value): return value serialize = identity parse_value = identity @staticmethod def parse_literal(ast): if isinstance(ast, (StringValue, BooleanValue)): return ast.value elif isinstance(ast, IntValue): num = int(ast.value) if MIN_INT <= num <= MAX_INT: return num elif isinstance(ast, FloatValue): return float(ast.value) elif isinstance(ast, ListValue): return [GenericScalar.parse_literal(value) for value in ast.values] elif isinstance(ast, ObjectValue): return {field.name.value: GenericScalar.parse_literal(field.value) for field in ast.fields} else: return None"},{"prompt":"Write a Python program to optimize an array of integers to produce the greatest possible sum. [5, 3, 8, 10]","completion":"def optimize_sum(arr): n = len(arr) dp =[[0 for x in range(n)] for x in range(n)] # initialize base cases for i in range(n): dp[i][i] = arr[i] # Fill entries in dp[][] from bottom to top for start in range(n-2, -1, -1): for end in range(start + 1, n): dp[start][end] = max(arr[start] + min(dp[start + 1][end - 1], dp[start + 2][end]), arr[end] + min(dp[start][end - 2], dp[start + 1][end - 1])) return dp[0][n - 1] # Driver code arr = [5, 3, 8, 10] n = len(arr) print (optimize_sum(arr))"},{"prompt":"Generate a code snippet to get an item stored in a Python dictionary using the key. Not applicable","completion":"#Getting the value of the 'name' key from the dictionary dict = {'name':'John', 'age': 30, 'city':'New York'} value = dict['name'] #Printing the value print(value)"},{"prompt":"Create a Python function to sort a list of strings alphabetically. my_list = [apple, orange, banana]","completion":"def sort_list(list): list.sort() return list sort_list(my_list)"},{"prompt":"Can you program a web scraper in Python to extract specific data from a website?","completion":"import requests from bs4 import BeautifulSoup url = \\"example.com\\" response = requests.get(url) html = response.text soup = BeautifulSoup(html, \\"html.parser\\") data = soup.find_all(class_=\\"data-class\\") for item in data: # Extract the data you need here # ..."},{"prompt":"Design a neural network in Python to predict if a stock price will rise or fall in the next 10 days.","completion":"import tensorflow as tf # Define the model model = tf.keras.Sequential([ tf.keras.layers.Dense(128, activation='relu', input_shape=(5,)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(2, activation='softmax') ]) # Compile the model model.compile( optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'] )"},{"prompt":"Write a Python program that uses natural language processing to classify the sentiment of a given sentence.","completion":"import nltk import numpy as np from nltk.sentiment.vader import SentimentIntensityAnalyzer # Download relevant NLTK packages nltk.download('vader_lexicon') # Initialize Sentiment Analyzer sentiment_analyzer = SentimentIntensityAnalyzer() # Take input from user sentence = input(\\"Enter a sentence to be analyzed: \\") # Calculate sentiment sentiment = sentiment_analyzer.polarity_scores(sentence) # Output sentiment if sentiment['compound'] > 0.2: print(\\"Positive sentiment\\") elif sentiment['compound'] < -0.2: print(\\"Negative sentiment\\") else: print(\\"Neutral sentiment\\")"},{"prompt":"Create a Python script using the twittertextpython library that takes a tweet as input and returns the text of the tweet with all the hashtags and URLs converted to their original versions. Input tweet: Such a great #day today! Check out this link: http://example.com #cool","completion":"import twitter_text tweet_text = 'Such a great #day today! Check out this link: http://example.com #cool' parsed_tweet = twitter_text.Parser(tweet_text).parse() # Print the plain text of the tweet print(parsed_tweet.plain_text) # Output: Such a great day today! Check out this link: http://example.com cool"},{"prompt":"Optimize an existing Python function to reverse a string. This function should take a string as input and return the reversed string. 'Hello World!'","completion":"def reverse_string(input): return input[::-1]"},{"prompt":"Develop a Python program that uses a series of ifelifelse statements to act on the input data Input a string and the program should convert it to uppercase letters.","completion":"def convert_to_uppercase(data): if type(data)==str: return data.upper() else: print(\\"Input must be a string\\")"},{"prompt":"Write a Python code to encode a given string using the Caesar cipher. string = Hello World","completion":"def caesar_encrypt(string, shift_amount): encrypted_string = \\"\\" for i in range(len(string)): char = string[i] x = ord(char) + shift_amount encrypted_string += chr(x) return encrypted_string encoded_string = caesar_encrypt(string, 3) print(encoded_string) // Output: Khoor Zruog"},{"prompt":"Can you create a Python program to sort the values in a dictionary by their keys? {'Shiva': 23, 'Rohan': 12, 'Amit': 79}","completion":"d = {'Shiva': 23, 'Rohan': 12, 'Amit': 79} sorted_dict = dict(sorted(d.items(), key = lambda x : x[0])) print(\\"Sorted Dictionary :\\", sorted_dict)"},{"prompt":"Create a neural network in Python to classify the sexes of animals using their heights. Not applicable","completion":"import numpy as np from sklearn.datasets import make_blobs from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler import keras from keras.models import Sequential from keras.layers import Dense # Generate some fake data X, y = make_blobs(n_samples=100, n_features=2, centers=2, random_state=1) X, y = np.hstack((X, y[:, np.newaxis])), y # Split data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1) # Scale the data scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) # Build the model model = Sequential() model.add(Dense(4, activation='relu', input_shape=(3,))) model.add(Dense(4, activation='relu')) model.add(Dense(1, activation='sigmoid')) # Compile the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Train the model model.fit(X_train_scaled, y_train, epochs=20, verbose=0) # Evaluate the model test_loss, test_acc = model.evaluate(X_test_scaled, y_test, verbose=0) print('test acc:', test_acc)"},{"prompt":"mplement a distributed system in Python that can incrementally process a large input stream of data.","completion":"#define MAX_NODES 10 def process_data(data): # process the data def incrementally_process_data(stream, num_nodes): # validate number of nodes if num_nodes > MAX_NODES: return # create nodes nodes = [] for _ in range(num_nodes): nodes.append(mp.Process(target=process_data, args=(data,))) # start nodes for node in nodes: node.start() # process stream for chunk in stream: for node in nodes: node.send(chunk) # join nodes for node in nodes: node.join()"},{"prompt":"Create an optimized web crawler using Python to explore a given website. Website Url: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup # define the URL to crawl url = 'https://www.example.com' # make an HTTP request to the given URL response = requests.get(url) # print a message to indicate the request type print(f'Crawling {url}') # parse the response and extract the HTML html = BeautifulSoup(response.text, 'html.parser') # define a list to store the URLs links = [] # traverse the HTML page and find all 'a' tags for link in html.find_all('a'): # extract the 'href' value for each 'a' tag links.append(link.get('href')) # print the list of urls for the web page print('n'.join(links))"},{"prompt":"Generate a function in Python to get the most frequent element in an array. [1, 15, 6, 1, 6, 15]","completion":"def most_frequent(arr): max_count = -1 max_elem = -1 count_dict = {} for ele in arr: if ele in count_dict: count_dict[ele] += 1 else: count_dict[ele] = 1 if count_dict[ele] > max_count: max_count = count_dict[ele] max_elem = ele return max_elem"},{"prompt":"Write a python function for calculating the factorial of a given number.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Write a python program to check if a given number is prime or not. 27","completion":"def is_prime(num): for i in range(2, num): if (num % i) == 0: return False return True number = 27 if is_prime(number): print(str(number) + ' is a prime number.') else: print(str(number) + ' is not a prime number.')"},{"prompt":"Create a function in Python that takes a list of words as an argument and returns a new list without duplicates. ['apple', 'banana', 'apple', 'orange']","completion":"def remove_duplicates(words): seen = set() unique_words = [] for word in words: if word not in seen: seen.add(word) unique_words.append(word) return unique_words arr = ['apple', 'banana', 'apple', 'orange'] result = remove_duplicates(arr) print(result)"},{"prompt":"Code a python program to simulate a dice roll","completion":"\\"\\"\\" Simulate a dice roll with Python \\"\\"\\" import random def simulate_dice_roll(): dice_roll = random.randint(1, 6) return dice_roll if __name__ == '__main__': dice_roll = simulate_dice_roll() print(dice_roll)"},{"prompt":"Create a simple chatbot in Python to respond to the user's messages. The chatbot should have a limited range of responses and should be able to generate appropriate responses for the user's message. Not applicable","completion":"def respond(message): bot_template = \\"I'm sorry, I don't understand. Could you try rephrasing that?\\" user_template = \\"USER: {message}nBOT: {response}\\" response = bot_template if 'hello' in message: response = \\"Hi! How can I help you?\\" print(user_template.format(message=message, response=response)) if __name__ == \\"__main__\\": respond(\\"Hello\\") respond(\\"I would like to purchase a phone\\")"},{"prompt":"Create a function in Python to detect cycles in a given linked list.","completion":"def detect_cycle(head): slow_p = head fast_p = head while(slow_p and fast_p): slow_p = slow_p.next fast_p = fast_p.next.next if slow_p == fast_p: return True return False"},{"prompt":"Create a Python program to compare two words using edit distance. word1: hello word2: yellow","completion":"def editDistance(word1, word2): m = len(word1) n = len(word2) # Create a matrix to store results of subproblems dp = [[0 for x in range(n+1)] for x in range(m+1)] # Fill dp[][] in bottom up manner for i in range(m+1): for j in range(n+1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # If second string is empty, only option is to # remove all characters of second string elif j == 0: dp[i][j] = i # If last characters are same, ignore last char # and recur for remaining string elif word1[i-1] == word2[j-1]: dp[i][j] = dp[i-1][j-1] # If last character are different, consider all # possibilities and find minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n] # Driver program word1 = \\"hello\\" word2 = \\"yellow\\" print( editDistance(word1, word2))"},{"prompt":"Generate a piece of code for raising an exception in Python.","completion":"raise Exception(\\"This is an exception\\")"},{"prompt":"Create a Python program to generate the nth number in the Fibonacci series.","completion":"def nth_fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return nth_fibonacci(n-1) + nth_fibonacci(n-2)"},{"prompt":"Write a Python program to generate all combinations of three given numbers. [1,2,3]","completion":"def combinations(lst, n): # generate all the combinations # we use the itertools library to do this from itertools import combinations # generate all the combinations of length three combinations = list(combinations(lst, n)) # loop through all the combinations and print them for i in range(len(combinations)): print(combinations[i]) # call the function with the given list combinations([1,2,3], 3)"},{"prompt":"Generate a Python program that scores words based on their length shorter words should receive a higher score. Hello World!","completion":"def score_by_length(s): score = 0 for word in s.split(): score += len(word)**(-1) return score print(score_by_length(\\"Hello World!\\")) # Output: 1.8333333333333335"},{"prompt":"Create a Python script to generate a list of prime numbers less than 1000. Not applicable","completion":"# list of prime numbers primes = [] # loop over numbers 0 - 1000 for num in range(2,1000): # if current number is prime add to list if all(num % i != 0 for i in range(2,num)): primes.append(num) print(primes)"},{"prompt":"Create a class in Python that generates and prints a random string of 10 characters.","completion":"import random class RandomString: def __init__(self): self.random_string = \\"\\" def generate_string(self): for i in range (10): self.random_string += chr(random.randint(65, 122)) return self.random_string def print_string(self): print(self.random_string) str1 = RandomString() str1.generate_string() str1.print_string()"},{"prompt":"Develop a loop in Python to generate a dictionary of all numbers below 1000 that are divisible by 7.","completion":"d = {} for i in range(1000): if i % 7 == 0: d[i] = i print(d)"},{"prompt":"Write a python program to solve an 8puzzle problem. [2, 3, 7, 8, 0, 5, 6, 1, 4]","completion":"def solve_8_puzzle(initial_state): # Create goal state goal_state = [1, 2, 3, 8, 0, 4, 7, 6, 5] # Dictionary to maintain visited states visited_states = {} state_list = [] state_list.append(initial_state) visited_states[tuple(initial_state)] = True # Create the nodes that need to be traversed while len(state_list) > 0: curr_state = state_list.pop(0) # If the goal is reached if curr_state == goal_state: return curr_state else: blank_position = curr_state.index(0) # Move up if blank_position <= 5: new_blank_position = blank_position + 3 new_state = list(curr_state) new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] if tuple(new_state) not in visited_states: state_list.append(new_state) visited_states[tuple(new_state)] = True # Move Down if blank_position >= 3: new_blank_position = blank_position - 3 new_state = list(curr_state) new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] if tuple(new_state) not in visited_states: state_list.append(new_state) visited_states[tuple(new_state)] = True # Move Left if blank_position not in [0 , 3, 6]: new_blank_position = blank_position - 1 new_state = list(curr_state) new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] if tuple(new_state) not in visited_states: state_list.append(new_state) visited_states[tuple(new_state)] = True # Move Right if blank_position not in [2, 5, 8]: new_blank_position = blank_position + 1 new_state = list(curr_state) new_state[blank_position], new_state[new_blank_position] = new_state[new_blank_position], new_state[blank_position] if tuple(new_state) not in visited_states: state_list.append(new_state) visited_states[tuple(new_state)] = True"},{"prompt":"Generate a code in Python to find the maximum sum subarray of size k. arr = [1, 4, 2, 10, 2, 3, 1, 0, 20] k = 4","completion":"def maxSubArraySum(arr, k): n = len(arr) max_sum = 0 for i in range(n - k + 1): window_sum = sum(arr[i : k + i]) max_sum = max(max_sum, window_sum) return max_sum arr = [1, 4, 2, 10, 2, 3, 1, 0, 20] k = 4 print(maxSubArraySum(arr, k))"},{"prompt":"Create a function in Python which takes a string and returns the reversed string","completion":"def reverseString(string): reversedString = \\"\\" for i in range(len(string) - 1, -1, -1): reversedString += string[i] return reversedString"},{"prompt":"Use the mobile pattern design to make this page look better. A page with a header, main section and footer","completion":"<div class=\\"container\\"> <div class=\\"header\\"> <!-- Header content goes here --> </div> <div class=\\"main\\"> <!-- Main content goes here --> </div> <div class=\\"footer\\"> <!-- Footer content goes here --> </div> </div> # 13. Instruction: Write a function that joins an array of strings using a given separator. 13. Input: [\\"Python\\", \\"JavaScript\\", \\"C++\\"], \\", \\" 13. Output: def joinStrings(arr, sep): return sep.join(arr) result = joinStrings([\\"Python\\", \\"JavaScript\\", \\"C++\\"], \\", \\") print(result)"},{"prompt":"Create a python program to capitalize words in a string. String: enter the dragon","completion":"def capitalize_words(string): words = string.split(' ') capitalized_words = [word.capitalize() for word in words] return ' '.join(capitalized_words) print(capitalize_words('enter the dragon'))"},{"prompt":"Write a Python code to fetch recent twitter posts from a specific account.","completion":"\\"\\"\\" Fetch recent twitter posts from a specific account \\"\\"\\" import tweepy def get_posts(screen_name): consumer_key = '...' consumer_secret = '...' access_key = '...' access_secret = '...' # Authenticate to Twitter auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_key, access_secret) # Create API object api = tweepy.API(auth) # Get recent posts posts = api.user_timeline(screen_name=screen_name, count=200) return [post.text for post in posts] if __name__ == '__main__': # Get recent posts from a sample account posts = get_posts('example') print(posts)"},{"prompt":"Write a Python function to add two given numbers without using the '+' operator.","completion":"def add(num1, num2): while num2 != 0: carry = num1 & num2 num1 = num1 ^ num2 num2 = carry << 1 return num1"},{"prompt":"Write a Python function to calculate the Hamming distance between two strings of same length. abc, acd","completion":"def hamming_distance(s1, s2): distance = 0 for char1, char2 in zip(s1, s2): if char1 != char2: distance += 1 return distance result = hamming_distance(\\"abc\\", \\"acd\\") print(result)"},{"prompt":"Design a Python function for determining if a) two strings are anagrams of each other, or b) if two strings are permutations of each other? algorithm, logarithm","completion":"def anagram_permutation(string1, string2): if sorted(string1) == sorted(string2): print(\\"The strings are anagrams.\\") elif sorted(string1) == sorted(string2[::-1]): print(\\"The strings are permutations.\\") else: print(\\"The strings are neither anagrams nor permutations.\\") anagram_permutation(\\"algorithm\\", \\"logarithm\\")"},{"prompt":"Generate a Python program that takes a numerical list and finds the index of the largest value. [3, 5, 9, 10]","completion":"# list of numbers list = [3, 5, 9, 10] # maximum number MaxNum = max(list) # index of the maximum number index = list.index(MaxNum) print(\\"Maximum number is:\\", MaxNum) print(\\"Index of maximum number is:\\", index)"},{"prompt":"Create a Python program that uses the Natural Language Processing library spaCy to classify a list of words into one of three categories. words = [cat, dog, apple, banana, table]","completion":"import spacy nlp = spacy.load('en_core_web_sm') categories = {'animals': [], 'fruits': [], 'furniture': []} for word in words: doc = nlp(word) if doc.ents: label = doc.ents[0].label_ if label == 'ANIMAL': categories['animals'].append(word) elif label == 'FRUIT': categories['fruits'].append(word) elif label == 'FURNITURE': categories['furniture'].append(word) print(categories)"},{"prompt":"Create a Python program to spread tasks into a timeline based on the given data. tasks = [{name:Task 1,duration:1}, {name:Task 2,duration:2}, {name:Task 3,duration:3}]","completion":"timeline = [] # Sort tasks in ascending order of duration tasks.sort(key=lambda x: x[\\"duration\\"]) # Move tasks to timeline start_time = 0 for task in tasks: timeline.append({\\"name\\": task[\\"name\\"], \\"start_time\\": start_time, \\"end_time\\": start_time + task[\\"duration\\"]}) start_time = start_time + task[\\"duration\\"] # Print the timeline for task in timeline: print(\\"{}: [{},{}]\\".format(task[\\"name\\"], task[\\"start_time\\"], task[\\"end_time\\"]))"},{"prompt":"Create a Python function to generate a password of length 10 containing alphanumeric characters only.","completion":"import string import random def generate_password(length): chars = string.ascii_lowercase + string.ascii_uppercase + string.digits return ''.join(random.choice(chars) for _ in range(length)) generate_password(10)"},{"prompt":"Create an online quiz application with three levels of difficulty. The application should be written in Python using Flask and it should have an endpoint for GET, POST, and PUT requests. Not applicable","completion":"import flask app = flask.Flask(__name__) questions = { 'level_1': [ {\\"question\\": \\"What color is the sky?\\", \\"answers\\" : [\\"blue\\", \\"red\\", \\"green\\"], \\"correct\\" : \\"blue\\" }, {\\"question\\": \\"What color is the grass?\\", \\"answers\\" : [\\"blue\\", \\"red\\", \\"green\\"], \\"correct\\" : \\"green\\" } ], 'level_2': [ {\\"question\\": \\"What is the capital of France?\\", \\"answers\\" : [\\"London\\", \\"Paris\\", \\"Rome\\"], \\"correct\\" : \\"Paris\\" }, {\\"question\\": \\"What is the capital of Germany?\\", \\"answers\\" : [\\"Berlin\\", \\"Hamburg\\", \\"Munich\\"], \\"correct\\" : \\"Berlin\\" } ], 'level_3': [ {\\"question\\": \\"What is the third largest country by area?\\", \\"answers\\" : [\\"China\\", \\"Russia\\", \\"United States\\"], \\"correct\\" : \\"United States\\" }, {\\"question\\": \\"What is the fifth largest country by population?\\", \\"answers\\" : [\\"Brazil\\", \\"Germany\\", \\"Japan\\"], \\"correct\\" : \\"Brazil\\" } ] } @app.route('/api/quiz', methods=['GET', 'POST', 'PUT']) def handle_requests(): if request.method == \\"GET\\": # Return a list of all questions return questions elif request.method == \\"POST\\": # Add a new question return \\"Successfully added question\\" elif request.method == \\"PUT\\": # Update an existing question return \\"Updated question\\" if __name__ == '__main__': app.run()"},{"prompt":"Create a REST API in Python with Flask for a restaurant menu. The API should have endpoints for creating, updating, and deleting menu items. Not applicable","completion":"from flask import Flask, request, json from flask_sqlalchemy import SQLAlchemy from flask_marshmallow import Marshmallow # init Flask app = Flask(__name__) # Database init app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db' app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False db = SQLAlchemy(app) # Marshmallow init ma = Marshmallow(app) # Create MenuItem model class MenuItem(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(100)) description = db.Column(db.String(200)) def __init__(self, name, description): self.name = name self.description = description # Create MenuItemSchema class MenuItemSchema(ma.Schema): class Meta: fields = ('id', 'name', 'description') # Init Schema menu_item_schema = MenuItemSchema() menu_items_schema = MenuItemSchema(many=True) # Create endpoints @app.route('/menu_items/create') def create_menu_item(): name = request.json['name'] description = request.json['description'] new_menu_item = User(name, description) db.session.add(new_menu_item) db.session.commit() return menu_item_schema.jsonify(new_menu_item) @app.route('/menu_items/<id>/update', methods=['PUT']) def update_menu_item(id): menu_item = MenuItem.query.get(id) name = request.json['name'] description = request.json['description'] menu_item.name = name menu_item.description = description db.session.commit() return menu_item_schema.jsonify(menu_item) @app.route('/menu_items/<id>/delete', methods=['DELETE']) def delete_menu_item(id): menu_item = MenuItem.query.get(id) db.session.delete(menu_item) db.session.commit() return json.dumps({'success': True}) # Run the app if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Design an algorithm in Python that sorts an unordered array of numbers from low to high. [2, 5, 1, 8, 7, 4]","completion":"def sort(arr): for i in range(len(arr)): minIdx = i for j in range(i+1, len(arr)): if arr[minIdx] > arr[j]: minIdx = j arr[i], arr[minIdx] = arr[minIdx], arr[i] return arr"},{"prompt":"Build a Markdown document generator in Python that takes input from the user and generates a Markdown document.","completion":"#!/usr/bin/env python # Imports import sys # Constants MARKDOWN_EXTENSION = \\".md\\" # Helper Fuctions def convert_to_markdown(text): \\"\\"\\" Converts plain text to markdown format \\"\\"\\" return text def write_to_file(filename, text): \\"\\"\\" Writes text to a file \\"\\"\\" with open(filename + MARKDOWN_EXTENSION, \\"w\\") as f: f.write(text + \\"n\\") # Main Function def main(): \\"\\"\\" Main function \\"\\"\\" # Read input from user text = input(\\"Please enter the text you would like to convert to Markdown: \\") filename = input(\\"Please enter a file name: \\") # Convert text to markdown markdown = convert_to_markdown(text) # Write to file write_to_file(filename, markdown) # Main Execution if __name__ == \\"__main__\\": main()"},{"prompt":"Write a Big O notation for the following python code. def fibonacci(n) if n <= 2 return 1 else return fibonacci(n1) + fibonacci(n2)","completion":"O(2^n)"},{"prompt":"Rewrite the following Javascript code as a Python code that solves the same problem. Given an array of numbers, find the square root of each number and print it. [2, 3, 4, 5]","completion":"import math numbers = [2, 3, 4, 5] for number in numbers: print(math.sqrt(number)) # Output # 1.414 # 1.732 # 2.000 # 2.236"},{"prompt":"Generate a Python code to convert a given number from decimal format to its binary equivalent. num = 25","completion":"def decToBin(num): if num > 1: decToBin(num//2) print(num % 2,end = '') # Driver code to test above if __name__ == '__main__': num = 25 decToBin(num)"},{"prompt":"Develop a Python script to encode and decode a string using Base64. Hello","completion":"import base64 def encode(s): encoded = base64.b64encode(s.encode('utf-8')) return encoded.decode('utf-8') def decode(s): decoded = base64.b64decode(s.encode('utf-8')) return decoded.decode('utf-8')"},{"prompt":"Write a command line utility in Python to spin up a web server.","completion":"import http.server import socketserver PORT = 8000 Handler = http.server.SimpleHTTPRequestHandler httpd = socketserver.TCPServer((\\"\\", PORT), Handler) print(\\"Serving at port\\", PORT) httpd.serve_forever()"},{"prompt":"Construct a linked list from the following array. arr = [1, 4, 9, 6, 5, 11]","completion":"# Python program to convert an # array to linked list # Node class class Node: # Function to initialize the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class contains a Node # object class LinkedList: # Function to initialize head def __init__(self): self.head = None # This functions inserts a new node # at the beginning of Linked List def push(self, new_data): # 1. Allocates node # 2. Put the data in it new_node = Node(new_data) # 3. Make next of new node as head new_node.next = self.head # 4. Move the head to point to new Node self.head = new_node # Utility function to print the linked LinkedList def printList(self): temp = self.head while(temp): print (temp.data) temp = temp.next # Code execution if __name__=='__main__': # Start with empty list llist = LinkedList() # Insert 6. So linked list becomes 6->None arr = [1, 4, 9, 6, 5, 11] for x in arr: llist.push(x) # Print the linked list llist.printList()"},{"prompt":"Draft a Python program to calculate the total amount of a given item in a shopping cart. [{'name': 'apple', 'price': 0.99, 'quantity': 3}, {'name': 'banana', 'price': 1.25, 'quantity': 4}, {'name': 'pear', 'price': 0.50, 'quantity': 1}]","completion":"def calculate_total(shopping_cart): total = 0 for item in shopping_cart: total += item['price'] * item['quantity'] return total shopping_cart = [{'name': 'apple', 'price': 0.99, 'quantity': 3}, {'name': 'banana', 'price': 1.25, 'quantity': 4}, {'name': 'pear', 'price': 0.50, 'quantity': 1}] total = calculate_total(shopping_cart) print(total)"},{"prompt":"Translate the following pseudo code into a Python program. for i in range(0, n1): j = i + 1 while j < n: swap(list[i],list[j]) j = j + 1","completion":"def swap(list, i, j): temp = list[i] list[i] = list[j] list[j] = temp def permutations(list, n): for i in range(0, n-1): j = i + 1 while j < n: swap(list,i,j) j = j + 1 list = [10, 11, 12] n = len(list) permutations(list, n)"},{"prompt":"What is the smallest possible code in Python to read the value of an item in a given dictionary? {key: value}","completion":"dictionary = {\\"key\\": \\"value\\"} value = dictionary[\\"key\\"]"},{"prompt":"Write a Python function to find the difference between two given dates in days.","completion":"from datetime import datetime def find_difference_in_days(date1, date2): date1 = datetime.strptime(date1, '%Y-%m-%d') date2 = datetime.strptime(date2, '%Y-%m-%d') return abs((date2 - date1).days)"},{"prompt":"Create a python code to predict if a given pattern of features of a target user can be classified as a fraud. features = ['high credit' , 'low age' , 'high spending']","completion":"import numpy as np from sklearn.naive_bayes import GaussianNB #define the labels labels = {'fraud': 0, 'not fraud': 1} #defining the training data and the labels train_data = [[1, 'high credit', 'low age', 'high spending'], [1, 'low credit', 'low age', 'low spending'], [0, 'low credit', 'low age', 'high spending'], [1, 'low credit', 'low age', 'low spending'], [0, 'low credit', 'low age', 'low spending'], [1, 'low credit', 'low age', 'low spending'], [0, 'low credit', 'low age', 'low spending'], ] train_labels = [0, 1, 0, 1, 0, 1, 0] #fitting the classifier clf = GaussianNB() clf.fit(train_data, train_labels) #prediction features = ['high credit' , 'low age' , 'high spending'] label = clf.predict([features]) if label == labels['fraud']: print('Target user is a fraud') else: print('Target user is not a fraud')"},{"prompt":"Develop a program in Python to compute the median of three numbers.","completion":"def median(a, b, c): if (a <= b <= c) or (c <= b <= a): median = b elif (b <= a <= c) or (c <= a <= b): median = a else: median = c return median"},{"prompt":"Create an AI Chatbot in Python using the nltk library. The program should ask the user to enter a phrase and respond accordingly. Not applicable","completion":"# Load Packages import nltk from nltk.chat.util import Chat, reflections # Set up the conversation reflection_map = { \\"hello\\": \\"Hi there!\\", \\"hi\\": \\"Hello!\\" } cref = reflections.keys() Chat = Chat(reflection_map, cref) # Start the conversation Chat.converse()"},{"prompt":"Write a python program to count the total number of 1s present in a binary string binary_string = '10101100110'","completion":"def count_ones(binary_string): count = 0 for bit in binary_string: if bit == '1': count += 1 return count"},{"prompt":"Classify a snippet of code according to programming language. def greet(): print(Hello world!)","completion":"Python"},{"prompt":"Suggest a Python program to create a list filled with random numbers Length = 10 Lower bound = 0 Upper bound = 1000","completion":"import random def create_random_number_list(length, lower_bound, upper_bound): output_list = [] for i in range(length): output_list.append(random.randint(lower_bound, upper_bound)) return output_list length = 10 lower_bound = 0 upper_bound = 1000 result = create_random_number_list(length, lower_bound, upper_bound) print(result)"},{"prompt":"Create a Python program using virtualenv to create a virtual environment and install a package.","completion":"#!/usr/bin/env python import virtualenv # Create a virtual environment virtualenv_dir = virtualenv.create_environment() # Activate the virtual environment virtualenv.activate_environment(virtualenv_dir) # Install package virtualenv.install_package('mypackage', virtualenv_dir)"},{"prompt":"Design a function to reverse a linked list in python.","completion":"def reverse_linked_list(head): prev = None curr = head next = None while curr is not None: next = curr.next curr.next = prev prev = curr curr = next head = prev return head"},{"prompt":"Construct a tree data structure with the given elements in Python. elements = [1, 2, 3, 4, 5]","completion":"class Node: def __init__(self, data): self.left = None self.right = None self.data = data def createTree(elements): root = Node(elements[0]) for i in range(1, len(elements)): insert(root, elements[i]) return root def insert(root, data): if root.data < data: if root.right is None: root.right = Node(data) else: insert(root.right, data) else: if root.left is None: root.left = Node(data) else: insert(root.left, data)"},{"prompt":"Develop a program in Python to operate with complex numbers.","completion":"import cmath # define two operations to add and subtract complex numbers def add_complex(num1, num2): return num1+num2 def sub_complex(num1,num2): return num1-num2 # add two complex numbers num1 = complex(5, 7) num2 = complex(3, 4) print(\\"Addition of two complex numbers : \\", add_complex(num1, num2)) # subtract two complex numbers num1 = complex(5, 7) num2 = complex(3, 4) print(\\"Subtraction of two complex numbers : \\", sub_complex(num1, num2))"},{"prompt":"Write a Python class to serialize and deserialize a binary tree.","completion":"class Codec: def serialize(self, root): def _serialize(node): if not node: return '#' return str(node.val) + ',' + _serialize(node.left) + ',' + _serialize(node.right) return _serialize(root) def deserialize(self, data): def _deserialize(nums): val = nums.pop(0) if val == '#': return None node = TreeNode(val) node.left = _deserialize(nums) node.right = _deserialize(nums) return node return _deserialize(data.split(','))"},{"prompt":"Create a program in Python that calculates the median of an array of integers without using the builtin function. [1, 2, 3, 4, 5]","completion":"def median(arr): n = len(arr) arr.sort() # check for even case if n % 2 == 0: return (arr[int((n - 1)/2)] + arr[int(n/2)]) / 2 else: return arr[int(n/2)] # test arr = [1, 2, 3, 4, 5] print(\\"Median =\\", median(arr)) # Output: Median = 3.0"},{"prompt":"Create a Python program that finds a given string in a sentence and capitalizes it. Sentence: I love the world String to Find: world","completion":"def capitalize_string(text, string_to_find): index = text.find(string_to_find) if index != -1: capitalized_string = text[:index] + string_to_find.upper() + text[index+len(string_to_find):] return capitalized_string else: return text sentence = \\"I love the world\\" string_to_find = \\"world\\" print(capitalize_string(sentence, string_to_find))"},{"prompt":"Create a Python function to generate a 2dimensional array of random numbers between 0 and 1.","completion":"def generate_random_array(m, n): array = [[random.random() for i in range(m)] for j in range(n)] return array"},{"prompt":"Create a Python script to parse a JSON string and return the value of the given field. {name: John, age: 30}","completion":"def get_value(json_string, field): json_dict = json.loads(json_string) return json_dict[field]"},{"prompt":"Write a Python program that generates a multiplication table of a given size. 5","completion":"def multiplication_table(n): for i in range(1, n+1): for j in range(1, n+1): print(str(i*j).rjust(4), end=\\" \\") print() multiplication_table(5) # Output: 1 2 3 4 5 2 4 6 8 10 3 6 9 12 15 4 8 12 16 20 5 10 15 20 25"},{"prompt":"Create a list of even numbers from 0 to 30 in one line of Python.","completion":"even_numbers = [num for num in range(0, 31) if num % 2 == 0]"},{"prompt":"Generate a python program to print out all the factors of a number n. n = 10","completion":"def factor_of(n): result = [] for i in range(1, n + 1): if n % i == 0: result.append(i) return result"},{"prompt":"Develop a Python 3 program that takes a list of integers as an argument and returns the mean of the list. [1,2,3,4,5]","completion":"def mean(list): total = 0 for num in list: total+=num return total/len(list) list = [1,2,3,4,5] mean = mean(list) print(mean) # prints 3.0"},{"prompt":"Build a sorting algorithm in Python that sorts an array of integers. [5, 3, 1, 4, 2]","completion":"def sort_arr(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr result = sort_arr([5, 3, 1, 4, 2]) print(result)"},{"prompt":"Construct a code in Python to generate the first 10 prime numbers.","completion":"# Python program to print first 10 prime numbers # Method 1 def first10PrimeNumbers(): for num in range(2, 12): # if number is divisible by any number # between 2 and one less than it, it is not prime for i in range(2, num): if num % i == 0: break else: print(num) # Driver Code if __name__ == \\"__main__\\": first10PrimeNumbers()"},{"prompt":"mplement a web scraper in Python to collect the titles and URLs of all the articles in a website.","completion":"import requests from bs4 import BeautifulSoup # specify the URL to scrape url = 'https://example.com' # make a request to request the page request = requests.get(url) # Parse the page using beautifulsoup soup = BeautifulSoup(request.text, 'lxml') # Extract the titles and URLs titles = [title.text for title in soup.find_all('h2')] urls = [url['href'] for url in soup.find_all('a', href=True)] # Print the results for title, url in zip(titles, urls): print(title, '->', url)"},{"prompt":"Generate a python code to build a simple regression model? X = [[1, 2, 3], [4, 5, 6]] Y = [[7], [8]]","completion":"import numpy as np X = np.array(X) Y = np.array(Y) b = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y) #Print the parameters print(\\"Parameters: \\", b) #Make predictions x_new = [[1, 2, 3]] y_pred = np.dot(x_new, b) print(\\"Predicted output: \\", y_pred)"},{"prompt":"Develop a Python program to find all possible words from a set of characters The set of characters is 'abcd'","completion":"def findWords(string): results = [] for i in range(len(string)): for j in range(i+1, len(string)+1): results.append(string[i:j]) return results string = \\"abcd\\" print(findWords(string))"},{"prompt":"Write a Python script that takes a list of numbers and returns the median. numbers = [2,4,7,10,11]","completion":"def calculate_median(numbers): \\"\\"\\" Calculates the median of a list of numbers. Args: numbers: a list of numbers. Returns: median: the median of the list. \\"\\"\\" numbers.sort() length = len(numbers) if length % 2 == 0: median = (numbers[length//2 - 1] + numbers[length//2]) / 2 else: median = numbers[length//2] return median numbers = [2,4,7,10,11] median = calculate_median(numbers) print(median)"},{"prompt":"Rewrite the following Python code to improve readability and to simplify the code start = 0 end = 10 while start < end: print start start = start + 1","completion":"for start in range(10): print(start)"},{"prompt":"Create a Python program to detect and print the number of vowels in a given string. Hi everyone","completion":"def number_of_vowels(s): count = 0 for char in s: if char in 'aeiouAEIOU': count += 1 return count s = 'Hi everyone' print('The number of vowels in the given string is :', number_of_vowels(s))"},{"prompt":"What is the most memory efficient way to iterate through a large list of objects in Python?","completion":"The most memory efficient way to iterate through a large list of objects in Python is to use an iterator. Iterators are more memory-efficient because they only store a single value at a time and can be used instead of the whole collection, which was held by the list. An iterator is accessed using the iter() function and is used in a for loop to loop through the items in the list. for obj in iter(large_list_of_objects): # Do something with the object"},{"prompt":"Generate a python dictionary with all prime numbers between 10 and 30 as keys and their squares as values.","completion":"prime_nos = {11, 13, 17, 19, 23, 29} output_dict = {prime_no: prime_no**2 for prime_no in prime_nos} print(output_dict)"},{"prompt":"Create an algorithm in Python using multiple classes to detect if a number is prime. Not applicable","completion":"class PrimeNumberDetector: # Constructor def __init__(self): self.prime_numbers = [] # Helper method to determine if a number is prime def is_prime(self, n): if n <= 1: return False else: for i in range(2, n): if n % i == 0: return False return True # Searches the prime numbers in a given range def search(self, start, end): self.prime_numbers = [] for i in range(start, end + 1): if self.is_prime(i): self.prime_numbers.append(i) return self.prime_numbers"},{"prompt":"Explain the purpose of using dictionaries in Python.","completion":"Dictionaries are used in Python to store data in the form of key-value pairs, where each key is associated with a specific value. Dictionaries can be used for a variety of tasks including representing complex data, creating lookup tables, and organizing information. The key-value pairs in a dictionary are mutable, meaning they can be changed at any point in the program. Finally, dictionaries are very efficient in terms of memory space and can be used to store large amounts of data in a relatively small amount of space."},{"prompt":"Create an interactive program in Python that allows users to enter two numbers and then prints out the sum of the two numbers.","completion":"# define a function to take in two numbers def adder(num1, num2): return num1 + num2 # prompt the user to enter the two numbers num1 = float(input(\\"Enter number 1: \\")) num2 = float(input(\\"Enter number 2: \\")) # print the sum of the two numbers print(\\"The sum of the two numbers is:\\", adder(num1, num2))"},{"prompt":"Write a Python script to classify an email as spam or ham. This email is a spam message.","completion":"import nltk def classify_spam(): nltk.download('stopwords') from nltk.corpus import stopwords from nltk.tokenize import word_tokenize data = \\"This email is a spam message.\\" stop_words = set(stopwords.words('english')) words = word_tokenize(data) words_filtered = [] for w in words: if w not in stop_words: words_filtered.append(w) if 'spam' in words_filtered: print(\\"This is a spam email.\\") else: print(\\"This is a valid email.\\") if __name__ == \\"__main__\\": classify_spam()"},{"prompt":"Write a Flask application that has two root pages, one for displaying all books in a library, and another page for displaying the details for a single book by its ISBN number. An example library containing all books and their ISBN numbers: The Catcher in the Rye – ISBN 13: 9780316769174 The Hunger Games – ISBN 13: 9780439023528 The Lord of the Rings – ISBN 13: 9780618640157","completion":"#!/usr/bin/env python from flask import Flask, render_template app = Flask(__name__) library = [{'title': 'The Catcher in the Rye', 'isbn': '978-0316769174'}, {'title': 'The Hunger Games', 'isbn': '978-0439023528'}, {'title': 'The Lord of the Rings', 'isbn': '978-0618640157'}] @app.route('/') def index(): return render_template('index.html', library=library) @app.route('/book/<isbn>') def book_info(isbn): selected_book = next((book for book in library if book['isbn'] == isbn), None) return render_template('book.html', book=selected_book) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Draft a Python Class to store sensitive data such as passwords in an encrypted format.","completion":"import hashlib class PasswordStore: def __init__(self, username, password): self.username = username self.encryptedPassword = self._encryptPassword(password) def _encryptPassword(self, password): hashed_password = hashlib.sha512((password + self.username).encode('utf-8')).hexdigest() return hashed_password def authenticate(self, password): return self.encryptedPassword == self._encryptPassword(password)"},{"prompt":"Convert the following pseudocode into a python program. i = 0 j = 0 while i < 10: j += i i += 1","completion":"\\"\\"\\" Convert the following pseudocode into a Python program \\"\\"\\" i = 0 j = 0 while i < 10: j += i i += 1 print(j)"},{"prompt":"Create a python program to find the least common ancestor of two nodes in a binary tree.","completion":"class BinaryTree: def __init__(self, root): self.root = root def leastCommonAncestor(self, node1, node2): def recurseTree(node): if not node: return False left = recurseTree(node.left) right = recurseTree(node.right) mid = node == node1 or node == node2 # If any two of the three flags left, right or mid become True. if mid + left +right >= 2: self.ancestor = node # Return True if either left or right or mid becomes True. return mid or left or right recurseTree(self.root) return self.ancestor"},{"prompt":"Write a Python function to find the maximum depth of a given binary search tree.","completion":"def find_maximum_depth(tree): if tree is None: return 0 else : left_depth = find_maximum_depth(tree.left) right_depth = find_maximum_depth(tree.right) if (left_depth > right_depth): return left_depth+1 else: return right_depth+1"},{"prompt":"Design a program to simulate a vending machine in Python.","completion":"def vending_machine(): # Variable to store the user's choice choice = '' # List of items available products = {1 : \\"Chips\\", 2 : \\"Chocolate\\", 3 : \\"Coke\\", 4 : \\"Sprite\\"} # Dictionary to store the price corresponding to each product price = {1 : 40, 2 : 20, 3 : 30, 4 : 30} while choice != \\"quit\\": # Print the available products print(\\"Available products:\\") for product in products: print(product, \\":\\", products[product], \\"-\\", price[product], \\"Rupees\\") # Get the user's choice choice = input(\\"Enter your choice (1-4): \\") if choice.isdigit() == False: print(\\"Invalid input.\\") elif int(choice) > 0 and int(choice) < 5: print(\\"You have purchased\\", products[int(choice)] + \\".\\") print(\\"Thank you for shopping with us.\\") elif choice == \\"quit\\": break else: print(\\"Invalid input.\\") # Call the function vending_machine()"},{"prompt":"Create a Python program to read a web page and print all of the links and their text Not applicable","completion":"import re from urllib.request import urlopen html = urlopen(\\"http://www.example.com/\\").read().decode('utf-8') links = re.findall(\\"<a href=(.*?)>(.*?)</a>\\", html) for link in links: print(\\"Link: \\", link[0]) print(\\"Text: \\", link[1])"},{"prompt":"Formulate a python code to remove the characters of odd index in a given string. string = welcome","completion":"def remove_odd_index_char(string): \\"\\"\\" Remove the characters of odd index in a given string \\"\\"\\" result = \\"\\" for i in range(len(string)): if i % 2 == 0: result = result + string[i] return result if __name__ == '__main__': string = \\"welcome\\" print(remove_odd_index_char(string)) # wloe"},{"prompt":"Write a Python program to get the sum of all odd numbers between 0 and 30.","completion":"# Variable to store the sum sum = 0 # Iterate over all odd numbers in the range for i in range(1, 30, 2): sum += i # Print the result print(\\"The sum of all odd numbers between 0 and 30: \\", sum)"},{"prompt":"Generate a Python program to produce text output with given conditions. Condition 1: Print Hello World Condition 2: Print Goodbye World","completion":"def print_conditions(): print(\\"Hello World\\") print(\\"Goodbye World\\") print_conditions()"},{"prompt":"Using a web API, create a Python program to search for books with a given title. Alice in Wonderland","completion":"import json import requests api_url = \\"https://www.googleapis.com/books/v1/volumes?q=\\" query = \\"Alice in Wonderland\\" # form the API call URL url = api_url + query # issue API call response = requests.get(url) # parse the API response response_JSON = json.loads(response.text) # loop through API response and print the book titles for item in response_JSON[\\"items\\"]: print(item[\\"volumeInfo\\"][\\"title\\"])"},{"prompt":"Create a vectorized function in Python that computes the sigmoid of a given number.","completion":"import numpy as np def sigmoid(x): \\"\\"\\" Compute the sigmoid of an array of numbers x. \\"\\"\\" # Apply the sigmoid function to every element of x sig = np.vectorize(lambda x: 1/(1 + np.exp(-x))) return sig(x) print(sigmoid(5))"},{"prompt":"Write a Python program that takes a sentence as an input and outputs a list of words in it in reverse order. This is a test.","completion":"def reverse(sentence): words = sentence.split(\\" \\") rev_words = words[::-1] rev_sentence =' '.join(rev_words) return rev_sentence"},{"prompt":"To create a Reddit bot that scans a subreddit for new posts containing a specific string in the title, and sends a welcome message to new users who have not posted before, follow the steps below: 1. Install the PRAW library and import it into your Python script. 2. Import the datetime and sqlite3 libraries. 3. Define the user configuration variables at the beginning of your script, including your Reddit app ID, secret, URI, refresh token, user agent, subreddit name, maximum number of posts to retrieve at once, wait time between cycles, the string to look for in post titles, and the time limit between a user's posts. 4. Create a SQL database to store user and post information. 5. Use the PRAW library to authenticate your bot with Reddit using your app information and refresh token. 6. Define a function to get the current time in UTC and convert it to a Unix timestamp if needed. 7. Define a function to scan the subreddit for new posts and check if they contain the specified string in the title. 8. If the post is from a new user, add them to the database and send them a welcome message. 9. If the post is from a known user, check if they have exceeded the time limit between posts. If they have, reset their database information. If they have not, remove their post and send them a message indicating how long they must wait before posting again. 10. Add the post ID to the list of old posts to prevent duplicates. 11. Run the scan function in a loop with a wait time between cycles.","completion":"#/u/GoldenSights import praw import time import datetime import sqlite3 '''USER CONFIGURATION''' APP_ID = \\"\\" APP_SECRET = \\"\\" APP_URI = \\"\\" APP_REFRESH = \\"\\" # https://www.reddit.com/comments/3cm1p8/how_to_make_your_bot_use_oauth2/ USERAGENT = \\"\\" #This is a short description of what the bot does. For example \\"/u/GoldenSights' Newsletter Bot\\" SUBREDDIT = \\"GoldTesting\\" #This is the sub or list of subs to scan for new posts. For a single sub, use \\"sub1\\". For multiple subreddits, use \\"sub1+sub2+sub3+...\\" MAXPOSTS = 30 #This is how many posts you want to retrieve all at once. PRAW can download 100 at a time. WAIT = 20 #This is how many seconds you will wait between cycles. The bot is completely inactive during this time. TSTRING = \\"[request]\\" #This is the part of the title that you want to look for DELAY = 172800 #This is the time limit between a user's posts, IN SECONDS. 1h = 3600 || 12h = 43200 || 24h = 86400 || 144h = 518400 '''All done!''' WAITS = str(WAIT) try: import bot USERAGENT = bot.aG except ImportError: pass sql = sqlite3.connect('sql.db') print('Loaded SQL Database') cur = sql.cursor() cur.execute('CREATE TABLE IF NOT EXISTS users(name TEXT, lastpost TEXT)') print('Loaded Users') cur.execute('CREATE TABLE IF NOT EXISTS oldposts(id TEXT)') print('Loaded Oldposts') sql.commit() r = praw.Reddit(USERAGENT) r.set_oauth_app_info(APP_ID, APP_SECRET, APP_URI) r.refresh_access_information(APP_REFRESH) def getTime(bool): timeNow = datetime.datetime.now(datetime.timezone.utc) timeUnix = timeNow.timestamp() if bool == False: return timeNow else: return timeUnix def scan(): print('Scanning ' + SUBREDDIT) subreddit = r.get_subreddit(SUBREDDIT) posts = subreddit.get_new(limit=MAXPOSTS) for post in posts: try: pauthor = post.author.name except Exception: pauthor = '[deleted]' pid = post.id plink = post.short_link ptime = post.created_utc ptitle = post.title.lower() if TSTRING.lower() in ptitle: cur.execute('SELECT * FROM oldposts WHERE id=?', [pid]) if not cur.fetchone(): cur.execute('SELECT * FROM users WHERE name=?', [pauthor]) if not cur.fetchone(): print('Found new user: ' + pauthor) cur.execute('INSERT INTO users VALUES(?, ?)', (pauthor, pid)) r.send_message(pauthor, 'Welcome to /r/pkmntcgtrades!','Dear ' + pauthor + ',nn Our bot has determined that this is your first time posting in /r/pkmntcgtrades. Please take the time to read [the guidelines](http://www.reddit.com/r/pkmntcgtrades/wiki/guidelines) to understand how the subreddit works.nnIf you have any questions, feel free to [message the moderators.](http://www.reddit.com/message/compose?to=%2Fr%2Fpkmntcgtrades) Thanks, and happy trading!', captcha=None) sql.commit() print('t' + pauthor + ' has been added to the database.') time.sleep(5) else: cur.execute('SELECT * FROM users WHERE name=?', [pauthor]) fetch = cur.fetchone() print('Found post by known user: ' + pauthor) previousid = fetch[1] previous = r.get_info(thing_id='t3_'+previousid) previoustime = previous.created_utc if ptime > previoustime: curtime = getTime(True) difference = curtime - previoustime if difference >= DELAY: print('tPost complies with timelimit guidelines. Permitting') cur.execute('DELETE FROM users WHERE name=?', [pauthor]) cur.execute('INSERT INTO users VALUES(?, ?)', (pauthor, pid)) sql.commit() print('t' + pauthor + \\"'s database info has been reset.\\") else: differences = '%.0f' % (DELAY - difference) print('tPost does not comply with timelimit guidelines. Author must wait ' + differences) print('t' + pauthor + \\"'s database info remains unchanged\\") response = post.add_comment('You are posting here too frequently, so your post has been deleted. You may post again in ' + str(datetime.timedelta(seconds=float(differences)))) response.distinguish() post.remove(spam=False) time.sleep(5) cur.execute('INSERT INTO oldposts VALUES(?)', [pid]) sql.commit() while True: try: scan() except Exception as e: print('An error has occured:', e) print('Running again in ' + WAITS + ' seconds.n') time.sleep(WAIT)"},{"prompt":"Create a Python script to calculate the sum of all elements in a matrix. matrix = [[1, 7, 3], [9, 2, 8], [3, 1, 7]]","completion":"def sum_of_elements_matrix(matrix): # Initialize result result = 0 # Iterate through the matrix for row in matrix: for col in row: result += col # Return the result return result"},{"prompt":"Design a Python script to check if a given value is an alphabet or not.","completion":"\\"\\"\\" Design a Python script to check if a given value is an alphabet or not \\"\\"\\" # function to check if the given value is an alphabet or not def is_alphabet(value): # check if the value is empty if value == '': return False # check if the given value is an alphabet if value.isalpha(): return True else: return False if __name__ == '__main__': value = input('Enter a value: ') print(is_alphabet(value))"},{"prompt":"Write a Python program to generate a matrix style output of a given alphabet.","completion":"alphabet = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" matrix_size = len(alphabet) col, row = 0, 0 matrix = [[0 for col in range(matrix_size)] for row in range(matrix_size)] for char in alphabet: matrix[row][col] = char col +=1 if(col == matrix_size): col = 0 row += 1 for row in range(matrix_size): for col in range(matrix_size): print(matrix[row][col], end = \\" \\") print()"},{"prompt":"Convert the following JSON data into a dictionary object in Python. { name: John Doe, age: 30, address: { street: 123 Example St., city: Exampletown, state: CA } }","completion":"import json # Convert JSON Data to Dictionary in Python data = json.loads('{\\"name\\": \\"John Doe\\",\\"age\\": 30,\\"address\\": {\\"street\\": \\"123 Example St.\\",\\"city\\": \\"Exampletown\\",\\"state\\": \\"CA\\"}}') # Use the dictionary print(data['name']) # Output: John Doe print(data['address']['city']) # Output: Exampletown"},{"prompt":"Generate a list of the binomial coefficients for a given value of n using a Python function.","completion":"def binomial_coefficient(n): coefficient = [] for k in range(n+1): coefficient.append(int(math.factorial(n) / (math.factorial(k) * math.factorial(n - k)))) return coefficient"},{"prompt":"Given a 2D array of integers, write a Python function to rotate the array clockwise by 90 degrees. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def rotate_array(arr): newarr = [] for i in range(len(arr[0])): newarr_row = [] for j in range(len(arr)): newarr_row.append(arr[len(arr)-j-1][i]) newarr.append(newarr_row) return newarr"},{"prompt":"Write a Python program to flatten a list of lists into a single list. List of lists: [[1,2], [3], [4,5,6]]","completion":"import itertools # flatten a list of lists list_of_lists = [[1,2], [3], [4,5,6]] flattened_list = list(itertools.chain.from_iterable(list_of_lists)) # print the flattened list print(flattened_list) # Output: [1, 2, 3, 4, 5, 6]"},{"prompt":"Create a Python program to assign a unique ID to each employee. The program should include a function that takes a list of employees and assigns a unique ID to each employee. List of employees: John Doe, Jane Doe, Fred Flintstone","completion":"def assign_ids(employees): counter = 1 for i in range(len(employees)): employee = employees[i] employee_id = f\\"{counter:03d}\\" print(f\\"Employee {employee} has the ID {employee_id}\\") counter += 1 employees = [\\"John Doe\\", \\"Jane Doe\\", \\"Fred Flintstone\\"] assign_ids(employees)"},{"prompt":"Write a Python program that multiplies all even numbers in a given list.","completion":"def multiplyEvens(numbers): # Initialize result result = 1 # Multiply all even elements for x in numbers: if x % 2 == 0: result = result * x return result # Driver code assert multiplyEvens([2, 3, 4, 5, 6]) == 48"},{"prompt":"Create a Python script to generate a random password with a mix of alphabets, numbers and symbols at least 8 characters long.","completion":"import string import random def generate_password(length): password_characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(password_characters) for i in range(length)) return password password = generate_password(8) print(password)"},{"prompt":"Write a Python script to implement a linear search algorithm. lst = [1, 2, 3, 4, 5, 6] target = 4","completion":"def linearSearch(lst, target): for i in range(len(lst)): if lst[i] == target: return i return -1 lst = [1, 2, 3, 4, 5, 6] target = 4 result = linearSearch(lst, target) if result == -1: print(\\"Element is not present in the list\\") else: print(\\"Element is present at index\\", result)"},{"prompt":"Write a Python program to parse a string containing HTML tags and extract the text not contained in the HTML tags. <p>This is a <a href=https://example.com>link</a>.</p>","completion":"import re html = '<p>This is a <a href=\\"https://example.com\\">link</a>.' text = re.sub(r'<[^>]+>', '', html) print(text) # Output: This is a link."},{"prompt":"Develop an algorithm in Python to sort a list of numbers using merge sort. list = [10, 7, 8, 9, 1, 5]","completion":"def mergeSort(arr): if len(arr) > 1: mid = len(arr)//2 left = arr[:mid] right = arr[mid:] mergeSort(left) mergeSort(right) i = 0 j = 0 k = 0 while i < len(left) and j < len(right): if left[i] < right[j]: arr[k] = left[i] i += 1 else: arr[k] = right[j] j += 1 k += 1 while i < len(left): arr[k] = left[i] i += 1 k += 1 while j < len(right): arr[k] = right[j] j += 1 k += 1"},{"prompt":"Generate a machine learning model in Python that can predict the price of a given stock. Historical stock prices of Apple (AAPL)","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Load the dataset data = pd.read_csv('AAPL_data.csv') X = data[['Open','High','Low','Close','Volume']] y = data['Adj Close'] # Split the dataset X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42) # Create and fit the linear regression model model = LinearRegression() model.fit(X_train, y_train) # Make predictions predictions = model.predict(X_test)"},{"prompt":"Create a Python Flask application for solving a linear equation. The application should have an endpoint that receives an equation as input and returns the solution as output. 3x + 2 = 5","completion":"from flask import Flask, request from sympy import * app = Flask(name) x = Symbol('x') @app.route('/solve', methods=['POST']) def solve(): equation = request.json['equation'] solution = solve(equation, x) return {'solution': str(solution[0])} if name == 'main': app.run(debug=True)"},{"prompt":"Create a Python function that takes two numbers, n and m, and prints out the first n odd numbers between 0 and m (both inclusive). n = 3, m = 10","completion":"def printOddNumbers(n, m): nums = [] for i in range(m): if i%2 != 0 and len(nums) < n: nums.append(i) return nums print(printOddNumbers(3, 10))"},{"prompt":"Create a python program to find all n digit prime numbers.","completion":"def get_n_digit_prime_numbers(n): prime_numbers = [] for number in range(10**(n-1), 10**n): is_prime = True for divisor in range(2, number): if number % divisor == 0: is_prime = False break if is_prime: prime_numbers.append(number) return prime_numbers"},{"prompt":"Create a sorting algorithm in Python to sort an unsorted set of names. [John, Jack, Joan, Adam, Elena, Mia]","completion":"def sort_names(names): # sorted() returns an alphabetically sorted list return sorted(names) unsorted_names = [\\"John\\", \\"Jack\\", \\"Joan\\", \\"Adam\\", \\"Elena\\", \\"Mia\\"] print(sort_names(unsorted_names)) # ['Adam', 'Elena', 'Jack', 'Joan', 'John', 'Mia']"},{"prompt":"This code sets up a Python package for the GIFT parser. To use it, download the code and run the setup.py script. The package includes a parser, i18n support, answer and question models, and utility functions. It requires the yattag, markdown, and MarkdownSuperscript libraries to be installed. The package also includes localization support for multiple languages.","completion":"#!/usr/bin/python3 # -*- coding: utf-8 -*- import os from setuptools import setup try: long_description = open(\\"README.rst\\").read() except IOError: long_description = \\"\\" LOCALEDIR = os.path.join('share', 'locale') setup( name=\\"pygiftparser\\", version=\\"1.1\\", url=\\"https://github.com/mtommasi/pygiftparser\\", description=\\"GIFT parser in python that parses a Gift source code and loads data in a Question/Answer model for further use in an application\\", license=\\"MIT\\", author=\\"Marc Tommasi - UdL/INRIA\\", author_email=\\"first.last@univ-lille.fr\\", py_modules=['pygiftparser.parser', 'pygiftparser.i18n', 'pygiftparser.answer', 'pygiftparser.question', 'pygiftparser.utils'], install_requires=['yattag', 'markdown', 'MarkdownSuperscript'], long_description=long_description, classifiers=[ \\"Programming Language :: Python\\", \\"Programming Language :: Python :: 3.4\\", \\"Topic :: Text Processing\\" ], data_files=[(os.path.join('share', 'locale', lang, 'LC_MESSAGES'), [os.path.join('share', 'locale', lang, 'LC_MESSAGES', 'pygiftparser.mo')]) for lang in os.listdir(LOCALEDIR)] )"},{"prompt":"Write a Python program to create multiple directories from the given list. [dir1, dir2, dir3]","completion":"import os dirs_list = [\\"dir1\\", \\"dir2\\", \\"dir3\\"] for d in dirs_list: os.makedirs(d)"},{"prompt":"Parse the following JSON into a Python dictionary. { name: John, age: 28, hobbies: [ Programming, Sports ] }","completion":"# import the json module import json # parse the json json_dict = json.loads('{ \\"name\\": \\"John\\", \\"age\\": 28, \\"hobbies\\": [ \\"Programming\\", \\"Sports\\" ]}') # print the parsed json print(json_dict)"},{"prompt":"Use a Python print function to write a statement that takes an input message and prints the message in all uppercase letters. Hello world!","completion":"message = 'Hello world!' print(message.upper()) // HELLO WORLD!"},{"prompt":"Create a web scraper using Python and Beautiful Soup to extract Twitter data. Not applicable","completion":"import requests from bs4 import BeautifulSoup # load the Twitter page url = 'https://twitter.com/' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') # extract the tweets tweets = [tweet.text for tweet in soup.find_all('p', {'class': 'TweetTextSize TweetTextSize--normal js-tweet-text tweet-text'})] # print the tweets for tweet in tweets: print(tweet)"},{"prompt":"Write a Python function to generate the Fibonacci series up to the nth term.","completion":"def fibonacci(n): fib = [0, 1] for i in range(2, n): fib.append(fib[i-1] + fib[i-2]) return fib"},{"prompt":"Construct a python code to preprocess a text by removing stop words and making the text all lower case.","completion":"# Importing the required library import nltk # Defining a function to pre-process the text def pre_process_text(text): # Converting the text to lowercase text = text.lower() # Tokenising the text tokens = nltk.word_tokenize(text) # Removing the stop words words = [word for word in tokens if word not in nltk.corpus.stopwords.words('english')] return words if __name__ == '__main__': text = \\"This is a sample text to demonstrate text pre-processing.\\" print(pre_process_text(text))"},{"prompt":"Code a Python function to split a sentence into an array of words. Not applicable","completion":"def splitSentence(sentence): words = sentence.split() return words # Usage sentence = \\"Split a sentence into an array of words\\" words = splitSentence(sentence) print(words) # ['Split', 'a', 'sentence', 'into', 'an', 'array', 'of', 'words']"},{"prompt":"Create an optimization algorithm in Python that takes an array of numbers as input. The algorithm should return the sum of the maximum two elements. Input Array: [1, 2, 4, 5, 3, 7]","completion":"def maximizeSum(arr): if (len(arr) < 2): print(\\"Invalid Input\\") return first = second = -1000 for i in range(0, len(arr)): if (arr[i] > first): second = first first = arr[i] elif (arr[i] > second and arr[i] != first): second = arr[i] return (first + second) # Driver code arr = [1, 2, 4, 5, 3, 7] print(maximizeSum(arr))"},{"prompt":"Create a Python program to edit a given list according to a given condition [1,3,5,8,2,6], lambda x : x%2==0","completion":"def edit_list(l, condition): result = [] for i in l: if condition(i): result.append(i) return result l = [1,3,5,8,2,6] condition = lambda x : x%2==0 print(edit_list(l, condition))"},{"prompt":"Create a basic Python application to fetch data from an SQL database and display it in the console. Not applicable","completion":"import sqlite3 conn = sqlite3.connect('example.db') cursor = conn.cursor() cursor.execute('SELECT * FROM users') rows = cursor.fetchall() for row in rows: print(row) conn.close()"},{"prompt":"Write a function to delete the last item from a list in Python. [1,2,3,4,5]","completion":"def delete_last_item(lst): lst.pop() return lst print(delete_last_item([1,2,3,4,5]))"},{"prompt":"Generate a regular expression in Python to match strings containing three digits.","completion":"import re pattern = re.compile(r'd{3}')"},{"prompt":"Write a Python program to sort a list of words using a recursive bubble sort. ['word', 'list', 'of', 'words']","completion":"def bubble_sort(arr): # Base case if len(arr) == 1: return arr swapped = False for i in range(len(arr)-1): if arr[i] > arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] swapped = True # Recursive call if items are swapped if swapped: return bubble_sort(arr) return arr # Test words = ['word', 'list', 'of', 'words'] # Sort bubble_sort(words) # Print sorted list print(words)"},{"prompt":"Generate a command line application that takes a number as an argument and prints out the prime numbers below it.","completion":"import sys def find_primes(n): primes = [True] * n for p in range(2, n): if primes[p] == True: for i in range(2*p, n, p): primes[i] = False return [p for p in range(2, n) if primes[p]] if __name__ == '__main__': if len(sys.argv) != 2: print('Usage: python3 prime_numbers.py <number>') sys.exit(1) num = int(sys.argv[1]) print(find_primes(num))"},{"prompt":"Create a web service endpoint in Python to register a user's name by passing it as a parameter.","completion":"from flask import Flask, request app = Flask(__name__) @app.route('/register', methods=['POST']) def register_name(): name = request.args.get('name') # Add code to register name return \\"Name registered\\" if __name__ == '__main__': app.run()"},{"prompt":"Write a terminalbased program in Python to simulate a Rock, Paper, Scissors (RPS) game. Not applicable","completion":"import random player_choice = '' while player_choice.lower() not in ['rock','paper','scissors']: player_choice = input('Enter your choice (Rock, Paper, Scissors): ') computer_choice = random.choice(['rock', 'paper', 'scissors']) if (player_choice.lower() == 'rock' and computer_choice.lower() == 'scissors') or (player_choice.lower() == 'paper' and computer_choice.lower() == 'rock') or (player_choice.lower() == 'scissors' and computer_choice.lower() == 'paper'): print('You Win!') elif (player_choice.lower() == 'rock' and computer_choice.lower() == 'paper') or (player_choice.lower() == 'paper' and computer_choice.lower() == 'scissors') or (player_choice.lower() == 'scissors' and computer_choice.lower() == 'rock'): print('You Lose!') else: print('It's a tie!')"},{"prompt":"Create a web application in Python using Flask that prints out the number of unique visitors for the site. Not applicable","completion":"from flask import Flask, session, render_template app = Flask(name) app.secret_key = 'secret_key' @app.route('/') def index(): if 'visits' not in session: session['visits'] = 0 session['visits'] += 1 return render_template('index.html', visits=session['visits']) if name == 'main': app.run(debug=True)"},{"prompt":"Design a Python program to detect loops in a linked list.","completion":"def detectLoop(head): slow_p = head fast_p = head while(slow_p and fast_p and fast_p.next): slow_p = slow_p.next fast_p = fast_p.next.next if slow_p == fast_p: return True return False"},{"prompt":"Design an Artificial Neural Network in Python to identify the sentiment of tweets.","completion":"import numpy as np import tensorflow as tf #Define Model Layers model = tf.keras.Sequential([ tf.keras.layers.Embedding(input_dim=vocabulary_size, output_dim=embedding_dim, input_length=max_length), tf.keras.layers.Flatten(), tf.keras.layers.Dense(24, activation='relu'), tf.keras.layers.Dense(1, activation='sigmoid') ]) #Compile Model model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])"},{"prompt":"Write a function in Python that takes in two strings and returns true if both strings have the same letter counts. 'abc', 'cba'","completion":"def isPermutation(s1, s2): s1_dict = {} s2_dict = {} for c in s1: if c in s1_dict: s1_dict[c] += 1 else: s1_dict[c] = 1 for c in s2: if c in s2_dict: s2_dict[c] += 1 else: s2_dict[c] = 1 return s1_dict == s2_dict"},{"prompt":"Generate a Python program that accepts a user input and checks if the input is a valid email address. Not applicable","completion":"import re def is_valid_email(email): pattern = re.compile(r\\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\") match = pattern.match(email) return match != None user_input = input(\\"Enter your email address: \\") if is_valid_email(user_input): print(\\"Valid email address!\\") else: print(\\"Invalid email address!\\")"},{"prompt":"Create a Python module that converts a temperature in Celsius to Fahrenheit.","completion":"def celsius_to_fahrenheit(celsius): return (celsius * 9/5) + 32"},{"prompt":"Create a headless Chrome program in Python that fetches a website and returns the HTML code.","completion":"from selenium import webdriver url = \\"https://www.example.com\\" chrome_options = webdriver.ChromeOptions() chrome_options.add_argument('--headless') driver = webdriver.Chrome(options=chrome_options) driver.get(url) htmlCode = driver.page_source print(htmlCode)"},{"prompt":"Generate an optimized python program to calculate the sum of all digits in a given positive integer number. 123456","completion":"input_number = 123456 def find_sum_of_digits(number): n = number sum = 0 while n > 0: sum += n % 10 n //= 10 return sum sum_of_digits = find_sum_of_digits(input_number) print(\\"Sum of all digits in {} is {}.\\" .format(input_number,sum_of_digits))"},{"prompt":"Create a Python code to group a list of names into groups of three. ['John','Mike','Sarah','Larry','Steve','Blake','Karen']","completion":"def group_names(names): \\"\\"\\" This function groups a list of names into groups of three \\"\\"\\" list_of_groups = [] # iterate over the list, stoping when only one name remains while(len(names) > 0): temp_list = [] # iterate over elments in groups of three for i in range(3): # check if there are more than three elements left in the list if(i < len(names)): temp_list.append(names[i]) # pop the elements from the names list for i in range(3): if(len(names) > 0): names.pop(0) # append the list of three elements to the list of groups list_of_groups.append(temp_list) # return the list of names return list_of_groups names = ['John','Mike','Sarah','Larry','Steve','Blake','Karen'] grouped_names = group_names(names) print(grouped_names) #[['John', 'Mike', 'Sarah'], ['Larry', 'Steve', 'Blake'], ['Karen']]"},{"prompt":"Create Python code to edit a given piece of code and make it more efficient. def sum_of_squares(arr): total = 0 for i in range(len(arr)): for j in range(len(arr)): total += arr[i] * arr[j] return total","completion":"def sum_of_squares(arr): total = 0 for num in arr: total += num * num return total"},{"prompt":"Create a Python dictionary which contains a list of keyvalue pairs of word counts. words = [cat, apple, dog, banana]","completion":"word_count = { 'cat': 1, 'apple': 1, 'dog': 1, 'banana': 1 }"},{"prompt":"Using a Greedy algorithm, write a program in Python that takes in a list of tasks with varying completion times and returns the order in which the tasks should be completed to achieve the overall minimum completion time. Tasks T1 (5 minutes), T2 (8 minutes), T3 (2 minutes), T4 (9 minutes)","completion":"# Greedy Algorithm to find minimum completion time def find_min_completion_time(tasks): completed_tasks = [] total_time = 0 while len(tasks) > 0: # Find the task with the minimum completion time min_time = min(tasks, key=lambda x:x[1]) completed_tasks.append(min_time[0]) total_time += min_time[1] # remove the task from the list of tasks tasks.remove(min_time) return (completed_tasks, total_time) tasks = [('T1', 5), ('T2', 8), ('T3', 2), ('T4', 9)] result = find_min_completion_time(tasks) print('Order of tasks: ', result[0]) print('Minimum Completion time: ', result[1]) # Output # Order of tasks: ['T3', 'T1', 'T2', 'T4'] # Minimum Completion time: 24"},{"prompt":"Design a Python class to filter an array of strings. Array: [foo, hello, world, foobar], Character: o","completion":"class FilterStrings: def __init__(self, array, character): self.array = array self.character = character def filter(self): output = [] for s in self.array: for c in s: if c == self.character: output.append(s) break return output # driver code arr = [\\"foo\\", \\"hello\\", \\"world\\", \\"foobar\\"] character = \\"o\\" filteredArray = FilterStrings(arr, character).filter() print(\\"Array with strings containing character o: \\", filteredArray)"},{"prompt":"Convert the following Python function to Java. def add_two_numbers(a, b): return a + b","completion":"public static int addTwoNumbers(int a, int b) { return a + b; }"},{"prompt":"Create a function in Python that will return the most frequent value in a dataset. [0, 1, 6, 4, 4, 5, 0, 2, 8, 5, 6, 8, 0, 8]","completion":"def most_frequent(data): counts = dict() for i in data: if i in counts: counts[i] += 1 else: counts[i] = 1 max_value = max(counts.values()) return [k for k, v in counts.items() if v == max_value]"},{"prompt":"Write an algorithm to a binary search tree in Python. Not applicable","completion":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key def insert(root,node): if root is None: root = node else: if root.val < node.val: if root.right is None: root.right = node else: insert(root.right, node) else: if root.left is None: root.left = node else: insert(root.left, node) def inorder(root): if root: inorder(root.left) print(root.val) inorder(root.right) r = Node(50) insert(r,Node(30)) insert(r,Node(20)) insert(r,Node(40)) insert(r,Node(70)) insert(r,Node(60)) insert(r,Node(80)) inorder(r)"},{"prompt":"Create a loop in Python that prints numbers 1 to 10.","completion":"for i in range(1, 11): print(i)"},{"prompt":"Construct an AI algorithm to identify the sentiment of a given set of comments in Python. comments = [I love the product!, I'm not a fan of this product]","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sid_obj = SentimentIntensityAnalyzer() for comment in comments: sentiment_dict = sid_obj.polarity_scores(comment) print(comment, sentiment_dict) # Output I love the product! {'neg': 0.0, 'neu': 0.424, 'pos': 0.576, 'compound': 0.6369} I'm not a fan of this product {'neg': 0.396, 'neu': 0.604, 'pos': 0.0, 'compound': -0.5574}"},{"prompt":"Write a Python class to represent a complex number.","completion":"class ComplexNumber: def __init__(self, real, imaginary): self.real = real self.imaginary = imaginary def __repr__(self): if self.imaginary >= 0: return '{} + {}i'.format(self.real, self.imaginary) else: return '{} - {}i'.format(self.real, abs(self.imaginary)) def __add__(self, other): real = self.real + other.real imaginary = self.imaginary + other.imaginary return ComplexNumber(real, imaginary) def __sub__(self, other): real = self.real - other.real imaginary = self.imaginary - other.imaginary return ComplexNumber(real, imaginary)"},{"prompt":"Change the following Pythoncode to display Hello, World! on the web page: print(Hello, World!)","completion":"from flask import Flask app = Flask(__name__) @app.route(\\"/\\") def hello(): return \\"Hello, World!\\" if __name__ == \\"__main__\\": app.run()"},{"prompt":"Create a Django app and view to display query results of all customers who had made a purchase within the last month.","completion":"# Create a Django app python manage.py startapp customers # Create a view in view.py in the customers app def list_customers(request): customers = Customers.objects.filter(purchased_at__gte=timezone.now() - timezone.timedelta(days=30)).all() return render(request, 'customers.html', {'customers': customers}) # Update the urls.py in the app urlpatterns = [ path('customers', list_customers, name='list_customers') ] # Create customers.html template <html> <body> <h2> Customers </h2> <ul> {% for customer in customers %} <li> {{ customer.name }} </li> {% endfor %} </ul> </body> </html>"},{"prompt":"Create a Python program that takes any number of lists and combines them into a single list. list_1 = [1, 2, 3] list_2 = [4, 5, 6] list_3 = [7, 8, 9]","completion":"def combine_lists(*lists): '''This function takes any number of lists and combines them into a single list.''' combined_list = [] for list in lists: for item in list: combined_list.append(item) return combined_list combined_list = combine_lists(list_1, list_2, list_3) print(combined_list)"},{"prompt":"Write a script in python that outputs all even numbers between 0 and 10.","completion":"for number in range(0,11): if (number % 2 == 0): print(number)"},{"prompt":"Write a Python program to print a Fibonacci sequence with a length of n, where n is a given number that is equal to or greater than 0. n = 5","completion":"def fibonacci(n): # Base Case if n == 0: return [] elif n == 1: return [0] # Recursive Case else: l = fibonacci(n-1) l.append(l[-1]+l[-2]) return l # Driver Program n = 5 print(fibonacci(n)) # Output: [0, 1, 1, 2, 3]"},{"prompt":"Sort a given list of strings into alphabetical order. my_list = [Python, JavaScript, Java, C++]","completion":"def sort_alphabetically(my_list): return sorted(my_list) print(sort_alphabetically(my_list)) # ['C++', 'Java', 'JavaScript', 'Python']"},{"prompt":"Write a Python program to sort a list of integers in ascending order. list=[4,2,3,5,1]","completion":"list = [4, 2, 3, 5, 1] list.sort() print(list)"},{"prompt":"Create a function in Python that takes an array and returns the element at the middle index. [1, 2, 3, 4, 5]","completion":"def returnMiddle(arr): if len(arr) % 2 == 0: return (arr[int(len(arr) / 2) - 1] + arr[int(len(arr) / 2)])/2 else: return arr[int(len(arr) / 2)] print(returnMiddle([1, 2, 3, 4, 5]))"},{"prompt":"Create a Python program that asks the user for a number and displays all the prime numbers up to that number.","completion":"number = int(input(\\"Please enter a number: \\")) for n in range(2, number + 1): is_prime = True for i in range(2, n): if n % i == 0: is_prime = False break if is_prime: print(n)"},{"prompt":"mplement quicksort in Python. Not applicable","completion":"def quicksort(arr): if len(arr) < 2: return arr pivot = arr[0] less_than_pivot = [x for x in arr[1:] if x <= pivot] greater_than_pivot = [x for x in arr[1:] if x > pivot] return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)"},{"prompt":"Rewrite the below program to use Python's dictionary comprehension. states = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'} inverse_states = {} for key,value in states.items(): inverse_states[value] = key","completion":"states = {'NY': 'New York', 'PA': 'Pennsylvania', 'FL': 'Florida'} inverse_states = {value:key for key,value in states.items()}"},{"prompt":"Write a Python function that takes a list as an input and returns the largest element. [8, 5, 2, 4, 9]","completion":"def maximum(list): return max(list) list = [8, 5, 2, 4, 9] result = maximum(list) print(result)"},{"prompt":"Create a RESTful API endpoint in Python with Flask that returns a list of items. The endpoint should return a list of books (with fields for title and author).","completion":"from flask import Flask, jsonify app = Flask(__name__) @app.route('/books', methods=['GET']) def get_books(): books = [ { 'title': 'The Great Gatsby', 'author': 'F. Scott Fitzgerald' }, { 'title': 'The Catcher in the Rye', 'author': 'J. D. Salinger' }, { 'title': 'To Kill a Mockingbird', 'author': 'Harper Lee' } ] return jsonify(books) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Debug a piece of code written in Python. def say_hello(name): message = Hello %s! % name print(message) say_hello('John')","completion":"def say_hello(name): message = \\"Hello %s!\\" % name print(message) # checking for input if name != '': say_hello(name) else: print('Error: No name provided')"},{"prompt":"Develop a class for implementing a stack in Python.","completion":"class Stack: # Constructor def __init__(self): self.stack = [] # Pop operation def pop(self): if len(self.stack) <= 0: return \\"Stack is empty\\" return self.stack.pop() # Push operation def push(self, data): self.stack.append(data) # Peek operation def peek(self): if len(self.stack) <= 0: return \\"Stack is empty\\" return self.stack[-1]"},{"prompt":"Write an algorithm in Python that takes an array of integers as input and checks if it is a palindrome. [1, 2, 3, 4, 3, 2, 1]","completion":"def is_palindrome(arr): mid = len(arr) // 2 for i in range(mid): if arr[i] != arr[-i - 1]: return False return True result = is_palindrome([1, 2, 3, 4, 3, 2, 1]) print(result) # True"},{"prompt":"This script generates simulated RNASeq reads (in .bed format) from known gene annotations. To use this script, run gensimreads.py followed by the options and the BEDFile. The options available are: e/expression [expression level file]: Specify the weight of each transcript. Each line in the file should have at least (NFIELD+1) fields, with field 0 the annotation id, and field NFIELD the weight of this annoation. If this file is not provided, uniform weight is applied. n/nreads readcnt: Specify the number of reads to be generated. Default 100000. b/posbias [positional bias file]: Specify the positional bias file. The file should include at least 100 lines, each contains only one integer number, showing the preference of the positional bias at this position. If no positional bias file is specified, use uniform distribution bias. l/readlen [read length]: Specify the read length. Default 32. o/output [output .bed file]: Specify the output file. Default STDOUT. f/field [NFIELD]: The field of each line as weight input. Default 7 (beginning from field 0) to compatible to genexplvprofile.py. p/pairend [PELENMEAN,PELENSTD]: Generate pairedend reads with specified insert length mean and standard derivation. The default is 200,20. stranded: The reads are strand specific. The BEDFile is the gene annotation file (in BED format). Use '' for STDIN input. Note that the bed file is required to sort according to the chromosome name and position. In Unix systems, use sort k 1,1 k 2,2n in.BED > out.BED to get a sorted version (out.BED) of the bed file (in.BED). No problem to handle reads spanning multiple exons.","completion":"#!/usr/bin/env python \\"\\"\\" This script generates simulated RNA-Seq reads (in .bed format) from known gene annotations. USAGE gensimreads.py {OPTIONS} <BED-File|-> PARAMETER BED-FiletThe gene annotation file (in BED format). Use '-' for STDIN input OPTIONS -e/--expression [expression level file] tSpecify the weight of each transcript. Each line in the file should have at least (NFIELD+1) fields, with field 0 the annotation id, and field NFIELD the weight of this annoation. If this file is not provided, uniform weight is applied. -n/--nreads readcnt tSpecify the number of reads to be generated. Default 100000. -b/--posbias [positional bias file] tSpecify the positional bias file. The file should include at least 100 lines, each contains only one integer number, showing the preference of the positional bias at this position. If no positional bias file is specified, use uniform distribution bias. -l/--readlen [read length] tSpecify the read length. Default 32. -o/--output [output .bed file] tSpecify the output file. Default STDOUT -f/--field [NFIELD] tThe field of each line as weight input. Default 7 (beginning from field 0) to compatible to genexplvprofile.py. -p/--pairend [PELENMEAN,PELENSTD]t Generate paired-end reads with specified insert length mean and standard derivation. The default is 200,20. --stranded tThe reads are strand specific. NOTE 1. The bed file is required to sort according to the chromosome name and position. In Unix systems, use \\"sort -k 1,1 -k 2,2n in.BED > out.BED\\" to get a sorted version (out.BED) of the bed file (in.BED). 2. No problem to handle reads spanning multiple exons. HISTORY 04/30/2012 Support generating stranded RNA-Seq reads 02/16/2012 Now runs on python 2.7 02/08/2012 Change default value of NFIELD from 4 to 7 to be compatible with default genexplvprofile values. 01/29/2012 Add paired-end support. 01/09/2012 Add -f option. AUTHOR Wei Li (li.david.wei AT gmail.com) \\"\\"\\" from __future__ import print_function import sys; import subprocess; import pydoc; import os; import random; import bisect; import math; from getSegs import *; import pdb; # read length readlen=32; # number of reads to sample readcnt=100000; nfield=7; if len(sys.argv)<2: print(pydoc.render_doc(sys.modules[__name__])); sys.exit(); allids={}; allidl=[]; allexp=[]; posweight=[]; #onbedfile=sys.argv[-1]+'.reads.bed'; onbedfile=\\"-\\"; genpereads=False; pemean=200; pestd=20; stranded=False; for i in range(len(sys.argv)): if i<len(sys.argv)-1: if sys.argv[i]=='-e' or sys.argv[i]=='--expression': # parse the annoatation file, and sum up the weights nline=0; totalweight=0; print('Reading annoatation file...',file=sys.stderr); for lines in open(sys.argv[i+1]): nline=nline+1; if lines[0]=='#': continue; fields=lines.strip().split(); if len(fields)<nfield+1: print('Error: the annotation file should include at least '+str(nfield+1)+' fields.',file=sys.stderr); sys.exit(); allids[fields[0]]=0; totalweight+=float(fields[nfield]); allexp.append(totalweight); allidl.append(fields[0]); print('Read %d lines of the annoatation' % nline,file=sys.stderr); #print('Total weight: %f' % sum(totalweight)); if sys.argv[i]=='-b' or sys.argv[i]=='--posbias': bline=0; tbweight=0; for lines in open(sys.argv[i+1]): bline=bline+1; if bline>100: break; tbweight=float(lines.strip()); posweight.append(tbweight); if len(posweight)!=100: print('Error: the bias file should include at least 100 lines.',file=sys.stderr); sys.exit(); if sys.argv[i]=='-n' or sys.argv[i]=='--nreads': readcnt=int(sys.argv[i+1]); print('Read count:',readcnt,file=sys.stderr); if sys.argv[i]=='-l' or sys.argv[i]=='--readlen': readlen=int(sys.argv[i+1]); print('Read length:',readlen,file=sys.stderr); if sys.argv[i]=='-o' or sys.argv[i]=='--output': onbedfile=sys.argv[i+1]; print('Output bed file:',onbedfile,file=sys.stderr); if sys.argv[i]=='-f' or sys.argv[i]=='--field': nfield=int(sys.argv[i+1]); print('Field:',nfield,file=sys.stderr); if sys.argv[i]=='-p' or sys.argv[i]=='--pairend': genpereads=True; pef=sys.argv[i+1].split(','); pemean=int(pef[0]); pestd=int(pef[1]); print('Generate paired-end reads with mean and std '+str(pemean)+','+str(pestd),file=sys.stderr); if sys.argv[i]=='-h' or sys.argv[i]=='--help': print(pydoc.render_doc(sys.modules[__name__])); sys.exit(); if sys.argv[i]=='--stranded': stranded=True; bedfile=sys.argv[-1]; # if no annotation file is specified, use uniform distri. print('Assigning weights...',file=sys.stderr); if len(allexp)==0: totalweight=0; for lines in open(bedfile): bedfield=lines.strip().split(); allids[bedfield[3]]=0; totalweight+=1; allexp.append(totalweight); allidl.append(bedfield[3]); # sampling process print('Sampling...',file=sys.stderr); for j in range(readcnt): k=random.random()*totalweight; sel=bisect.bisect_right(allexp,k); allids[allidl[sel]]=allids[allidl[sel]]+1; # if no bias file specified, use uniform distrib print('Total assigned reads:',sum(allids.values()),file=sys.stderr); #debug info: #for k in allidl: # print (k, allids[k]); #sys.exit(); if onbedfile!=\\"-\\": onfid=open(onbedfile,'w'); else: onfid=sys.stdout; nlines=0; totalgenreads=0; # read bed file for lines in open(bedfile): # update line counter nlines=nlines+1; if nlines %10000==1: print('Processing '+str(nlines)+' lines...',file=sys.stderr); # parse lines bedfield=lines.strip().split(); if len(bedfield)!=12: print('Error: incorrect number of fields (should be 12)',file=sys.stderr); continue; if bedfield[5]=='+': direction=1; elif bedfield[5]=='-': direction=-1; else: print('Error: incorrect field in field[5] %s:' %bedfield[5],file=sys.stderr); if bedfield[3] not in allids: # the current id not found, continue continue; nreads=allids[bedfield[3]]; if nreads<1: continue; # parse all segments fieldrange=(int(bedfield[1]),int(bedfield[2])); if bedfield[10][-1]==',': bedfield[10]=bedfield[10][:-1]; if bedfield[11][-1]==',': bedfield[11]=bedfield[11][:-1]; exonlen=[int(x) for x in bedfield[10].split(',')]; exonstart=[int(x)+fieldrange[0] for x in bedfield[11].split(',')]; # old code: for each possible position in the transcript, build its segments # for ne in range(len(exonlen)): # for pos in range(exonstart[ne],exonstart[ne]+exonlen[ne]): # create a position totallen=sum(exonlen); # here, we randomly choose one position if genpereads==False: selrange=totallen-readlen+1; else: selrange=totallen-pemean+2*pestd; if selrange<1: if genpereads==False: print('Ignore annoatation',bedfield[3],'of length',totallen,'Reads:',allids[bedfield[3]],file=sys.stderr); else: print('Ignore annoatation',bedfield[3],'of length',totallen,'since its shorter than paired-end mean insert length. Reads:',allids[bedfield[3]],file=sys.stderr); continue; totalgenreads+=nreads; cumlen=[];cumlen.extend(exonlen); for i in range(1,len(cumlen)): cumlen[i]=cumlen[i]+cumlen[i-1]; # for nun-uniform distribution, construct a new array for selection thistbweight=[]; if len(posweight)!=0: kweight=0; for i in range(selrange): nfrac=i*100.0/selrange; # a value between 0-100 nlower=int(math.floor(nfrac)); # 0-100 nhigher=int(math.ceil(nfrac)); # 0-100 if nhigher==nlower: nhigher=nlower+1; if nhigher<100: val=posweight[nlower]*(nfrac-nlower)+posweight[nhigher]*(nhigher-nfrac); else: val=posweight[99]; kweight+=val; thistbweight.append(kweight); for t in range(nreads): if len(posweight)==0: tpos=random.choice(range(selrange)); else: rd=random.random()*kweight; bsl=bisect.bisect_right(thistbweight,rd); # for reverse transcripts: flip the position if direction==-1: bsl=selrange-1-bsl; tpos=bsl; pos=tpos2pos(tpos,cumlen,exonstart); if genpereads==True: tpos2=tpos+int(random.normalvariate(pemean-readlen+1,pestd)); pos2=tpos2pos(tpos2,cumlen,exonstart); # get the segments if True: (startrange,lenrange,status)=getSegs(pos,readlen,1,exonstart,exonlen); if status!=0: print('Status:',status,', pos:', pos,'out of',len(cumlen),file=sys.stderr); #pdb.set_trace(); continue; # generate another pair if genpereads==True: (startrange2,lenrange2,status2)=getSegs(pos2,readlen,1,exonstart,exonlen); if status==1: print('Status:',status,', pos:', pos,'out of',len(cumlen),file=sys.stderr); if genpereads==False: lineid=\\"%s_e_%d_%s_%d\\" % (bedfield[3],t,bedfield[0],pos); else: lineid=\\"%s_e_%d_%s_%d/1\\" % (bedfield[3],t,bedfield[0],pos); lineid2=\\"%s_e_%d_%s_%d/2\\" % (bedfield[3],t,bedfield[0],pos); # random direction if stranded==False or direction==0: thisdir=random.choice([1,-1]); else: thisdir=direction; writeBedline(onfid,lineid,bedfield[0],thisdir,startrange,lenrange); if genpereads==True: writeBedline(onfid,lineid2,bedfield[0],thisdir*(-1),startrange2,lenrange2); else: print(bedfield[0],file=sys.stdout); #print('Pospool:'); #for k in sorted(pospool.keys()): # print(str(k)+\\":\\"+str(pospool[k]),end=\\",\\"); #print(); print('Total '+str(nlines)+' lines...',file=sys.stderr); print('Total '+str(totalgenreads)+' reads...',file=sys.stderr); if onbedfile!=\\"-\\": onfid.close();"},{"prompt":"Using Python, create a program to convert the string 'Hello, world!' to titlecase. Hello, world!","completion":"import string def toTitlecase(inputString): return inputString.title() print(toTitlecase(\\"Hello, world!\\"))"},{"prompt":"Write a Python function to get the nth number in the Fibonacci sequence. n = 5","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"prompt":"mplement a natural language processing model using the NLTK library in Python in order to extract sentiment from user feedback reviews. This product is great! It changed my life for the better","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sid = SentimentIntensityAnalyzer() review_text = \\"This product is great! It changed my life for the better\\" scores = sid.polarity_scores(review_text) print(scores['compound']) # 0.94 if scores['compound'] >= 0.05: print(\\"Positive sentiment\\") elif scores['compound'] <= - 0.05: print(\\"Negative sentiment\\") else: print(\\"Neutral sentiment\\") # Output: Positive sentiment"},{"prompt":"Compare two lists and extract the common elements of both the lists in Python.","completion":"def commonElements(l1, l2): return set(l1).intersection(l2)"},{"prompt":"Create a virtual environment for Python using pipenv in the current directory.","completion":"pipenv --three"},{"prompt":"Create a python function that takes in a list of strings and returns a list with all the strings stripped of unwanted whitespace. lst = [ hello , world , hi ]","completion":"def strip_whitespace(lst): return [string.strip() for string in lst]"},{"prompt":"Create a list of HTML tags using the Python language.","completion":"html_tags = [\\"a\\", \\"abbr\\", \\"acronym\\", \\"address\\", \\"applet\\", \\"area\\", \\"article\\", \\"aside\\", \\"audio\\", \\"b\\", \\"base\\", \\"basefont\\", \\"bdi\\", \\"bdo\\", \\"big\\", \\"blockquote\\", \\"body\\", \\"br\\", \\"button\\", \\"canvas\\", \\"caption\\", \\"center\\", \\"cite\\", \\"code\\", \\"col\\", \\"colgroup\\", \\"data\\", \\"datalist\\", \\"dd\\", \\"del\\", \\"details\\", \\"dfn\\", \\"dialog\\", \\"dir\\", \\"div\\", \\"dl\\", \\"dt\\", \\"em\\", \\"embed\\", \\"fieldset\\", \\"figcaption\\", \\"figure\\", \\"font\\", \\"footer\\", \\"form\\", \\"frame\\", \\"frameset\\", \\"h1\\", \\"h2\\", \\"h3\\", \\"h4\\", \\"h5\\", \\"h6\\", \\"head\\", \\"header\\", \\"hgroup\\", \\"hr\\", \\"html\\", \\"i\\", \\"iframe\\", \\"img\\", \\"input\\", \\"ins\\", \\"kbd\\", \\"keygen\\", \\"label\\", \\"legend\\", \\"li\\", \\"link\\", \\"main\\", \\"map\\", \\"mark\\", \\"menu\\", \\"menuitem\\", \\"meta\\", \\"meter\\", \\"nav\\", \\"noframes\\", \\"noscript\\", \\"object\\", \\"ol\\", \\"optgroup\\", \\"option\\", \\"output\\", \\"p\\", \\"param\\", \\"picture\\", \\"pre\\", \\"progress\\", \\"q\\", \\"rp\\", \\"rt\\", \\"ruby\\", \\"s\\", \\"samp\\", \\"script\\", \\"section\\", \\"select\\", \\"small\\", \\"source\\", \\"span\\", \\"strike\\", \\"strong\\", \\"style\\", \\"sub\\", \\"summary\\", \\"sup\\", \\"table\\", \\"tbody\\", \\"td\\", \\"textarea\\", \\"tfoot\\", \\"th\\", \\"thead\\", \\"time\\", \\"title\\", \\"tr\\", \\"track\\", \\"tt\\", \\"u\\", \\"ul\\", \\"var\\", \\"video\\", \\"wbr\\"]"},{"prompt":"Generate a reverse string of each word present in the list. [Python, Java, C++]","completion":"def reverseStringOfList(list): revList = [] for string in list: revList.append(string[::-1]) return revList result = reverseStringOfList([\\"Python\\", \\"Java\\", \\"C++\\"]) print(result)"},{"prompt":"Construct a Python script that would train a model and show its performance Input dataset consists of 47 samples, each with 40 features and 1 label.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Load the dataset dataset = pd.read_csv(\\"dataset.csv\\") # Separate data into features and labels features = dataset.drop(['label'], axis=1) labels = dataset[\\"label\\"] # Split the data into training and testing sets x_train, x_test, y_train, y_test = train_test_split(features, labels, test_size=0.25, random_state=42) # Create a model and train it model = LogisticRegression() model.fit(x_train, y_train) # Get a prediction on the test set y_preds = model.predict(x_test) # Calculate the accuracy of the model accuracy = accuracy_score(y_test, y_preds) print('Accuracy of the model is {}%'.format(accuracy * 100))"},{"prompt":"Develop a Python script that connects to a MySQL database to retrieve certain data information.","completion":"\\"\\"\\" Develop a Python script that connects to a MySQL database to retrieve certain data information \\"\\"\\" import pymysql # Establish a connection to a MySQL database conn = pymysql.connect( host='localhost', user='username', password='password', db='dbname', charset='utf8mb4', cursorclass=pymysql.cursors.DictCursor ) # Create and execute a MySQL query sql = 'SELECT * FROM table WHERE condition=value' cur = conn.cursor() cur.execute(sql) # Retrieve results from the query result = cur.fetchall() # Close the cursor and connection before exiting the script cur.close() conn.close()"},{"prompt":"Generate a random string in with five characters in Python.","completion":"import string import random def generate_random_string(size): chars = string.ascii_letters + string.digits return ''.join(random.choice(chars) for _ in range(size))"},{"prompt":"Construct a forloop in Python to repeat a code snipet 10 times.","completion":"for i in range(10): print(\\"This code is being repeated 10 times\\")"},{"prompt":"Automatically refactor a subsection of Python code that uses two forloops. for x in range(3): for y in range(4): print(x, '', y)","completion":"for x, y in itertools.product(range(3), range(4)): print(x, \\"-\\", y)"},{"prompt":"Create a wrapper function to parse the following JSON data into a Python dictionary. { name: John, age: 20, siblings: [Steven, Sarah] }","completion":"import json def parse_json(data): # load the json string into a python dictionary data = json.loads(data) # parse the data and store the values in a python dictionary parsed_data = { 'name': data['name'], 'age': data['age'], 'siblings': data['siblings'] } # return the parsed data return parsed_data"},{"prompt":"Create a chatbot using Python which can respond to a user's question about the current weather in a given city. Not applicable","completion":"import requests def get_weather(city): url = 'http://api.openweathermap.org/data/2.5/weather' params = {'APPID': '<Your API Key>', 'q': city, 'units': 'metric'} response = requests.get(url, params=params) data = response.json() if 'main' in data: temperature = data['main']['temp'] response = f'The temperature in {city} is {temperature}°C.' else: response = f\\"I couldn't get the weather in {city}.\\" return response city = input('Where are you? ') weather = get_weather(city) print(weather)"},{"prompt":"Generate a Python program to convert an array from the cartesian to the polar coordinate system. [1, 2]","completion":"def cartesian_to_polar(arr): x = arr[0] y = arr[1] radius = (x**2 + y**2)**0.5 theta = math.atan2(y,x) return [radius, theta] arr = [1, 2] result = cartesian_to_polar(arr) print(result)"},{"prompt":"Write a function in Python to convert a string of Roman numerals to its decimal equivalent. XLIX","completion":"def convert_roman_to_decimal(roman_string): # define a dictionary of key-value pairs roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000} # runs loop to accrue total total = 0 for i in range(len(roman_string)): # assign values of characters check = roman_dict[roman_string[i]] if i+1 < len(roman_string): # if the Next letter is in the string, compare it check_next = roman_dict[roman_string[i+1]] if check >= check_next: # if the examined letter is bigger, add it total += check if check_next > check: # if the examined letter is smaller , subtract it total -= check else: total += check return total"},{"prompt":"Construct a function in Python to determine if a tree is a BST or not.","completion":"def isBST(root): # An empty tree is BST if root is None: return True # Check recursively that # all the nodes follow BST property inOrder = isBSTUtil(root, float(\\"-inf\\"), float(\\"inf\\")) # Return result return inOrder # Retusn True if the given tree is BST. Else return False def isBSTUtil(root, mini, maxi): # Base case if root is None: return True # False if this node violates the min/max constraint if root.data < mini or root.data > maxi: return False # Otherwise check the subtrees recursively # tightening the min or max constraint return (isBSTUtil(root.left, mini, root.data-1) and isBSTUtil(root.right, root.data+1, maxi))"},{"prompt":"Create a Python program to scrape a search engine for the top 10 results on a given query. Search query: best movies of 2019","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.google.com/search?q=best+movies+of+2019&num=10' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') results = soup.find_all('div', class_='rc') for result in results: title = result.find('h3').text print(title)"},{"prompt":"Modify a Python program to add a minimum value of 10 to each element in a list. list = [1, 2, 3, 4]","completion":"list = [x + 10 for x in [1, 2, 3, 4]]"},{"prompt":"Write a function in Python to generate a random password of 8 characters.","completion":"import random, string def random_password(length): chars = string.ascii_letters + string.digits + '!@#%^&*()' random_password = ''.join(random.choice(chars) for i in range(length)) return random_password print(random_password(8))"},{"prompt":"Create a python class for a Binary Search Tree (BST).","completion":"class BinarySearchTree: def __init__(self, value): self.value = value self.left = None self.right = None def insert(self, value): if value < self.value: if self.left is None: self.left = BinarySearchTree(value) else: self.left.insert(value) else: if self.right is None: self.right = BinarySearchTree(value) else: self.right.insert(value) def contains(self, target): if self.value == target: return True elif target < self.value: if self.left is None: return False else: return self.left.contains(target) else: if self.right is None: return False else: return self.right.contains(target)"},{"prompt":"Develop a custom classifier in Python to detect malicious URLs.","completion":"import pandas as pd from sklearn import svm from sklearn.feature_extraction.text import TfidfVectorizer # read in train/test data df_train = pd.read_csv('train_data.csv') df_test = pd.read_csv('test_data.csv') # Vectorize the data vectorizer = TfidfVectorizer() X_train = vectorizer.fit_transform(df_train.url) X_test = vectorizer.transform(df_test.url) # Fit the model model = svm.SVC(kernel='linear', probability=True) model.fit(X_train, df_train.malicious) # Make predictions predictions = model.predict_proba(X_test)"},{"prompt":"Write a Python function to predict the sentiment of a given text. text = ‘I love this film’","completion":"import nltk import numpy as np from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_score(text): \\"\\"\\" Computes the sentiment score of a given text. \\"\\"\\" sid = SentimentIntensityAnalyzer() scores = sid.polarity_scores(text) sentiment = np.argmax(list(scores.values())) return sentiment if __name__ == '__main__': text = 'I love this film' print(sentiment_score(text))"},{"prompt":"Create a function in Python to generate random passwords of length n.","completion":"import string import random def generate_password(length): chars = string.ascii_lowercase + string.ascii_uppercase + string.digits generated_password = ''.join(random.choice(chars) for i in range(length)) return generated_password"},{"prompt":"mplement a Python function called “check_prime” which takes an integer as an argument and returns True if the number is prime, and False otherwise. check_prime(125)","completion":"def check_prime(n): if n == 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True"},{"prompt":"Write a Python function to generate a random string of length n.","completion":"import string import random def generate_random_string(length): random_str = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length)) return random_str"},{"prompt":"Create a Python script that crawls a given URL and prints out all of the links within it.","completion":"import requests from bs4 import BeautifulSoup def get_url_links(url): # query the website and return the html to the variable page = requests.get(url) # parse the html using beautiful soup and store in variable \`soup\` soup = BeautifulSoup(page.content, 'html.parser') # Take out the <div> of name and get its value links = soup.find_all('a') for link in links: print(link.get('href')) get_url_links('https://www.example.com/')"},{"prompt":"Create a python program to display a histogram of the list items. [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]","completion":"import matplotlib.pyplot as plt list_data = [1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9] plt.hist(list_data, bins=6) plt.title(\\"Histogram\\") plt.show()"},{"prompt":"Write a function in Python to generate a Fibonacci sequence up to n.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"prompt":"Write a Python program that takes the two numbers and creates a generator expression to give you the sum of the numbers. 5, 10","completion":"sum = sum(x for x in range(5,11)) print(sum)"},{"prompt":"Create a function in python that takes a string and adds a prefix to each word in the string. Input String: Hello World Prefix: Prefix_","completion":"def add_prefix(input_string, prefix): \\"\\"\\"Takes a string and adds a prefix to each word in the string.\\"\\"\\" output_string = [] words = input_string.split() for word in words: output_string.append(prefix + word) return ' '.join(output_string)"},{"prompt":"Design a function in Python for swapping the values of two given integers. x = 3, y = 5","completion":"def swap_values(x, y): temp = x x = y y = temp return x, y x, y = swap_values(3,5) print(x, y)"},{"prompt":"Create a function to classify a given text into list of predefined categories. text = 'I'm writing a Python program now' categories = ['Python', 'Java', 'HTML', 'C++']","completion":"text = 'I'm writing a Python program now' categories = ['Python', 'Java', 'HTML', 'C++'] def classify(text, categories): for category in categories: if category in text: return category return \\"Not found\\" print(classify(text, categories))"},{"prompt":"Write a Python script to explore a data set using matplotlib. The script should show a histogram for each column in the data set and should also show the mean and median values for each feature. Not applicable","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt # Read the data set df = pd.read_csv('data_set.csv') # Plot histograms for each feature for col in df.columns: plt.hist(df[col], alpha=0.5, label=col) plt.legend(loc='upper right') plt.show() # Compute the mean and median values for each feature mean = df.mean() median = df.median() # Print the mean and median values print(\\"Mean Values:n{}nnMedian Values:n{}\\".format(mean, median))"},{"prompt":"Build a program in Python that compresses a given string using Run Length Encoding.","completion":"def run_length_encoding(s): n = len(s) encoded_string = \\"\\" i = 1 while i < n: count = 1 while i < n and s[i] == s[i - 1]: count += 1 i += 1 encoded_string += (s[i - 1] + str(count)) i += 1 return encoded_string"},{"prompt":"Write a Python program to find the string which is most frequent among the given list of strings. my_list = [apple, banana, apple, orange]","completion":"def most_frequent(my_list): max_count = 0 frequent_string = \\"\\" for i in my_list: if my_list.count(i) > max_count: max_count = my_list.count(i) frequent_string = i return frequent_string"},{"prompt":"Write a function in Python to evenly distribute the total number of tasks among n workers.","completion":"def distribute_tasks(total, num_workers): tasks_per_worker = [total // num_workers] * num_workers remainder = total - sum(tasks_per_worker) # Distribute the remainder among the workers. for i in range(remainder): tasks_per_worker[i] += 1 return tasks_per_worker"},{"prompt":"Write a Python program to create a valid Sudoku board from user input. [4, 0, 6, 8, 0, 0, 2, 0, 9, 0, 0, 5, 9, 0, 1, 0, 0, 3, 0, 0, 7, 0, 0, 6, 0, 0, 8, 0, 0, 0, 0, 0, 7, 0, 0, 5, 1, 0, 0, 0, 7, 0, 0, 8, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 6, 0, 0, 0, 6, 0, 0, 1, 0, 0]","completion":"def is_valid_sudoku(board): #Rows for i in range(9): if not (set(board[i]) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(board[i]) == {0}): return False #Columns for i in range(9): vals = [] for j in range(9): vals.append(board[j][i]) if not (set(vals) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(vals) == {0}): return False #Cubes for i in range(0, 9, 3): for j in range(0, 9, 3): vals = [] for m in range(3): for n in range(3): vals.append(board[i+m][j+n]) if not (set(vals) == {1, 2, 3, 4, 5, 6, 7, 8, 9} or set(vals) == {0}): return False return True def generate_board(arr): if len(arr) != 81: return False board = [[0 for i in range(9)] for j in range(9)] for i in range(81): board[int(i/9)][i%9] = arr[i] if is_valid_sudoku(board): return board else: return False"},{"prompt":"Write a function in Python that constructs a URL based on user input. The function should take a string and an integer as arguments and should construct a URL with the string as the base followed by sequential numbers starting from the number provided in the integer argument. base = https://www.example.com/ start_num = 10","completion":"def construct_url(base, start_num): num = start_num while True: url = base + str(num) yield url num += 1"},{"prompt":"Write a Python program to count the number of digits in an integer. number = 9923","completion":"def count_digits(number): count = 0 while (number != 0): count=count+1 number = number//10 return count"},{"prompt":"Create a post request in python with the given parameters. API: https://api.endpoint.com Headers: {'Authorization': 'Bearer abcdefg', 'ContentType': 'application/json'} Parameters: {'name': 'John', 'age': 25}","completion":"import requests url = 'https://api.endpoint.com' headers = {'Authorization': 'Bearer abcdefg', 'Content-Type': 'application/json'} parameters = {'name': 'John', 'age': 25} response = requests.post(url, headers=headers, json=parameters)"},{"prompt":"mplment a Python class to store data in a dictionary.","completion":"class DataStorage: def __init__(self): self._data = {} def store_data(self, key, value): self._data[key] = value def get_data(self, key): return self._data.get(key)"},{"prompt":"Generate a python class that implements the turtle's position and orientation.","completion":"class TurtlePosOri: def __init__(self, pos_x, pos_y, orientation): self.pos_x = pos_x self.pos_y = pos_y self.orientation = orientation def get_turtle_position(self): return (self.pos_x, self.pos_y) def get_turtle_orientation(self): return self.orientation def set_turtle_position(self, pos_x, pos_y): self.pos_x = pos_x self.pos_y = pos_y def set_turtle_orientation(self, orientation): self.orientation = orientation"},{"prompt":"Convert GenBank flat files to GFF3 format using the provided Python script. Run the script with the following arguments: 'i' or 'input_file' followed by the path to the input GBK file 'o' or 'output_file' followed by the path to the output GFF file to be created (optional) 'with_fasta' to include the FASTA section with genomic sequence at the end of the file (default) 'no_fasta' to exclude the FASTA section The script supports the following features: gene, CDS, mRNA, tRNA, rRNA and primary identifiers, gene product name annotations. The script links parent/child features using the expected format convention of shared /locus_tag entries for each feature of the gene graph (gene, mRNA, CDS). The script has only been tested with prokaryotic (nonspliced) genes.","completion":"#!/usr/bin/env python3 \\"\\"\\" This is a script to convert GenBank flat files to GFF3 format with a specific focus on initially maintaining as much structural annotation as possible, then expanding into functional annotation support. This is not guaranteed to convert all features, but warnings will be printed wherever possible for features which aren't included. Currently supported: Structural features: gene, CDS, mRNA, tRNA, rRNA Annotations: primary identifiers, gene product name This is written to handle multi-entry GBK files Caveats: - Because the GBK flatfile format doesn't explicitly model parent/child features, this script links them using the expected format convention of shared /locus_tag entries for each feature of the gene graph (gene, mRNA, CDS) - It has only been tested with prokaryotic (non-spliced) genes Author: Joshua Orvis (jorvis AT gmail) \\"\\"\\" import argparse import sys from collections import defaultdict from Bio import SeqIO from biocode import annotation, things, utils def main(): parser = argparse.ArgumentParser( description='Convert GenBank flat files to GFF3 format') output file to be written parser.add_argument('-i', '--input_file', type=str, required=True, help='Path to an input GBK file' ) parser.add_argument('-o', '--output_file', type=str, required=False, help='Path to an output GFF file to be created' ) parser.add_argument('--with_fasta', dest='fasta', action='store_true', help='Include the FASTA section with genomic sequence at end of file. (default)' ) parser.add_argument('--no_fasta', dest='fasta', action='store_false' ) parser.set_defaults(fasta=True) args = parser.parse_args() output will either be a file or STDOUT ofh = sys.stdout if args.output_file is not None: ofh = open(args.output_file, 'wt') ofh.write(\\"gff-version 3n\\") assemblies = dict() current_assembly = None current_gene = None current_RNA = None rna_count_by_gene = defaultdict(int) exon_count_by_RNA = defaultdict(int) seqs_pending_writes = False features_skipped_count = 0 # each gb_record is a SeqRecord object for gb_record in SeqIO.parse(open(args.input_file, \\"r\\"), \\"genbank\\"): mol_id = gb_record.name if mol_id not in assemblies: assemblies[mol_id] = things.Assembly(id=mol_id) if len(str(gb_record.seq)) > 0: seqs_pending_writes = True assemblies[mol_id].residues = str(gb_record.seq) assemblies[mol_id].length = len(str(gb_record.seq)) current_assembly = assemblies[mol_id] # each feat is a SeqFeature object for feat in gb_record.features: #print(feat) fmin = int(feat.location.start) fmax = int(feat.location.end) if feat.location.strand == 1: strand = '+' elif feat.location.strand == -1: strand = '-' else: raise Exception(\\"ERROR: unstranded feature encountered: {0}\\".format(feat)) #print(\\"{0} located at {1}-{2} strand:{3}\\".format( locus_tag, fmin, fmax, strand ) ) if feat.type == 'source': continue if feat.type == 'gene': # print the previous gene (if there is one) if current_gene is not None: gene.print_as(fh=ofh, source='GenBank', format='gff3') locus_tag = feat.qualifiers['locus_tag'][0] gene = things.Gene(id=locus_tag, locus_tag=locus_tag) gene.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand ) current_gene = gene current_RNA = None elif feat.type == 'mRNA': locus_tag = feat.qualifiers['locus_tag'][0] rna_count_by_gene[locus_tag] += 1 feat_id = \\"{0}.mRNA.{1}\\".format( locus_tag, rna_count_by_gene[locus_tag] ) mRNA = things.mRNA(id=feat_id, parent=current_gene, locus_tag=locus_tag) mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand ) gene.add_mRNA(mRNA) current_RNA = mRNA if feat_id in exon_count_by_RNA: raise Exception( \\"ERROR: two different RNAs found with same ID: {0}\\".format(feat_id) ) else: exon_count_by_RNA[feat_id] = 0 elif feat.type == 'tRNA': locus_tag = feat.qualifiers['locus_tag'][0] rna_count_by_gene[locus_tag] += 1 feat_id = \\"{0}.tRNA.{1}\\".format(locus_tag, rna_count_by_gene[locus_tag]) if 'product' in feat.qualifiers: anticodon = feat.qualifiers['product'][0] else: anticodon = None tRNA = things.tRNA(id=feat_id, parent=current_gene, anticodon=anticodon) tRNA.locate_on(target=current_assembly, fmin=fmin, fmax=fmax, strand=strand) gene.add_tRNA(tRNA) current_RNA = tRNA if feat_id in exon_count_by_RNA: raise Exception( \\"ERROR: two different RNAs found with same ID: {0}\\".format(feat_id) ) else: exon_count_by_RNA[feat_id] = 0 elif feat.type == 'rRNA': locus_tag = feat.qualifiers['locus_tag'][0] rna_count_by_gene[locus_tag] += 1 feat_id = \\"{0}.rRNA.{1}\\".format(locus_tag, rna_count_by_gene[locus_tag]) if 'product' in feat.qualifiers: product = feat.qualifiers['product'][0] else: product = None annot = annotation.FunctionalAnnotation(product_name=product) rRNA = things.rRNA(id=feat_id, parent=current_gene, annotation=annot) rRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand ) gene.add_rRNA(rRNA) current_RNA = rRNA if feat_id in exon_count_by_RNA: raise Exception( \\"ERROR: two different RNAs found with same ID: {0}\\".format(feat_id) ) else: exon_count_by_RNA[feat_id] = 0 elif feat.type == 'CDS': locus_tag = feat.qualifiers['locus_tag'][0] # If processing a prokaryotic GBK, we'll encounter CDS before mRNA, so we have to # manually make one if current_RNA is None: feat_id = \\"{0}.mRNA.{1}\\".format( locus_tag, rna_count_by_gene[locus_tag] ) mRNA = things.mRNA(id=feat_id, parent=current_gene) mRNA.locate_on( target=current_assembly, fmin=fmin, fmax=fmax, strand=strand ) gene.add_mRNA(mRNA) current_RNA = mRNA if 'product' in feat.qualifiers: product = feat.qualifiers['product'][0] else: product = None if 'gene' in feat.qualifiers: gene_symbol = feat.qualifiers['gene'][0] else: gene_symbol = None annot = annotation.FunctionalAnnotation(product_name=product, gene_symbol=gene_symbol) if 'db_xref' in feat.qualifiers: for dbxref in feat.qualifiers['db_xref']: annot.add_dbxref(dbxref) polypeptide_id = \\"{0}.polypeptide.{1}\\".format( locus_tag, rna_count_by_gene[locus_tag] ) polypeptide = things.Polypeptide(id=polypeptide_id, parent=mRNA, annotation=annot) mRNA.add_polypeptide(polypeptide) exon_count_by_RNA[current_RNA.id] += 1 cds_id = \\"{0}.CDS.{1}\\".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] ) current_CDS_phase = 0 for loc in feat.location.parts: subfmin = int(loc.start) subfmax = int(loc.end) CDS = things.CDS(id=cds_id, parent=current_RNA) CDS.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand, phase=current_CDS_phase ) current_RNA.add_CDS(CDS) # calculate the starting phase for the next CDS feature (in case there is one) # 0 + 6 = 0 TTGCAT # 0 + 7 = 2 TTGCATG # 1 + 6 = 1 TTGCAT # 2 + 7 = 1 TTGCATG # general: 3 - ((length - previous phase) % 3) current_CDS_phase = 3 - (((subfmax - subfmin) - current_CDS_phase) % 3) if current_CDS_phase == 3: current_CDS_phase = 0 exon_id = \\"{0}.exon.{1}\\".format( current_RNA.id, exon_count_by_RNA[current_RNA.id] ) exon = things.Exon(id=exon_id, parent=current_RNA) exon.locate_on( target=current_assembly, fmin=subfmin, fmax=subfmax, strand=strand ) current_RNA.add_exon(exon) exon_count_by_RNA[current_RNA.id] += 1 else: print(\\"WARNING: The following feature was skipped:n{0}\\".format(feat)) features_skipped_count += 1 # don't forget to do the last gene, if there were any if current_gene is not None: gene.print_as(fh=ofh, source='GenBank', format='gff3') if args.fasta is True: if seqs_pending_writes is True: ofh.write(\\"FASTAn\\") for assembly_id in assemblies: ofh.write(\\">{0}n\\".format(assembly_id)) ofh.write(\\"{0}n\\".format(utils.wrapped_fasta(assemblies[assembly_id].residues))) if features_skipped_count > 0: print(\\"Warning: {0} unsupported feature types were skipped\\".format(features_skipped_count)) if __name__ == '__main__': main()"},{"prompt":"Develop an algorithm in Python to predict the category of a sentence. This movie is a classic drama.","completion":"def sentence_category_predictor(sentence): #split up sentence into words words = sentence.split() #initialize a counter for each category count_drama = 0 count_comedy = 0 count_thriller = 0 #loop over words to get counts of each category for word in words: if word in drama_words: count_drama += 1 if word in comedy_words: count_comedy += 1 if word in thriller_words: count_thriller += 1 #compare counts and return category with highest count max_count = max(count_drama, count_comedy, count_thriller) if max_count == count_drama: return \\"drama\\" if max_count == count_comedy: return \\"comedy\\" else: return \\"thriller\\" #calling the function category = sentence_category_predictor(\\"This movie is a classic drama.\\") print(\\"The sentence falls under the category:\\", category)"},{"prompt":"Create a machine learning model in Python using the scikitlearn library that can classify cars according to their brand. Car dataset with columns 'Brand' and 'Features'","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.svm import SVC # Read in the data data = pd.read_csv('cars.csv') # Split into X and y X = data.drop('Brand', axis=1).values y = data['Brand'].values # Split into training and test sets X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=0) # Create the scaler sc = StandardScaler() # Fit and transform the training data X_train = sc.fit_transform(X_train) # Transform the test data X_test = sc.transform(X_test) # Fit the classifier classifier = SVC(kernel='linear') classifier.fit(X_train, y_train) # Predict the labels y_pred = classifier.predict(X_test)"},{"prompt":"Create a commandline chatbot in Python that can respond to simple questions like What is your name? Not applicable","completion":"import cmd class Bot(cmd.Cmd): prompt = 'Bot> ' def do_greet(self, args): print('Hello! My name is Bot.') def do_name(self, args): print('My name is Bot.') if __name__ == '__main__': Bot().cmdloop()"},{"prompt":"Create a class in Python with two methods.","completion":"class SomeClass: def __init__(self): pass def method1(self): pass def method2(self): pass"},{"prompt":"Can you write a Python code that can sort dictionaries based on the values","completion":"def sort_dict_by_values(dict): return sorted(dict.items(), key=lambda kv: kv[1])"},{"prompt":"Create a Python script that connects to a SQLite database, creates three tables (stations, observations, and time), and populates them with data from a CSV file and a JSON API. The script should use the csv, json, requests, numpy, and sqlite3 modules. The CSV file should contain data about weather stations, and the JSON API should provide data about weather observations. The stations table should have columns for id, short, name, lon, lat, height, and json. The observations table should have columns for id, local_date_time, local_date_time_full, apparent_t, delta_t, air_temp, rain_trace, rel_hum, wind_dir, and wind_spd_kmh. The time table should have columns for id and local_date_time_full. The script should insert data into the tables using SQL queries, and should print out the queries as they are executed. Finally, the script should print out the names of the tables in the database and export each table to a CSV file.","completion":"#!/usr/bin/env python import csv import json import requests import numpy as np import sqlite3 csv_filename = \\"testdata/vic_usgs/south_west_stations.csv\\" db_filename = \\"testdata/vic_usgs/south_west_stations.db\\" # open database conn = sqlite3.connect(db_filename) c = conn.cursor() # Create stations table c.execute('''CREATE TABLE IF NOT EXISTS stations (id text, short text, name text, lon real, lat real, height real, json text, UNIQUE(id))''') # Create observations table c.execute('''CREATE TABLE IF NOT EXISTS observations (id text, local_date_time text, local_date_time_full text, apparent_t real, delta_t real, air_temp real, rain_trace text, rel_hum real, wind_dir text, wind_spd_kmh real, UNIQUE(id, local_date_time_full))''') # Create time point table c.execute('''CREATE TABLE IF NOT EXISTS time (id text, local_date_time_full text, UNIQUE(local_date_time_full))''') # stations with open(csv_filename, 'rb') as csvfile: stations = csv.DictReader(csvfile) for station in stations: id = station[\\"ID\\"] short = station[\\"Short\\"] name = station[\\"Name\\"] lon = float(station[\\"Lon\\"]) lat = float(station[\\"Lat\\"]) height = float(station[\\"Height\\"]) json = station[\\"Json\\"] # Insert a row of data into stations query_str = \\"INSERT OR IGNORE INTO stations VALUES ('%s', '%s', '%s', %f, %f, %f, '%s')\\" % (id, short, name, lon, lat, height, json) print query_str c.execute( query_str ) # Update observations table r = requests.get(json) stationdata = r.json() data = stationdata[\\"observations\\"][\\"data\\"] nrows = len(data) for i in range(nrows): apparent_t = data[i]['apparent_t'] if apparent_t is None: apparent_t = 0 delta_t = data[i]['delta_t'] if delta_t is None: delta_t = 0 air_temp = data[i]['air_temp'] if air_temp is None: air_temp = 0 rain_trace = data[i]['rain_trace'] if rain_trace is None: rain_trace = '' rel_hum = data[i]['rel_hum'] if rel_hum is None: rel_hum = 0 wind_spd_kmh = data[i]['wind_spd_kmh'] if wind_spd_kmh is None: wind_spd_kmh = 0 query_str = \\"INSERT OR IGNORE INTO observations VALUES ('%s', '%s', '%s', %0.2f, %0.2f, %0.2f, '%s', %0.2f, '%s', %0.2f)\\" % (id, data[i]['local_date_time'], data[i]['local_date_time_full'], apparent_t, delta_t, air_temp, rain_trace, rel_hum, data[i]['wind_dir'], wind_spd_kmh) print query_str c.execute(query_str) query_str = \\"INSERT OR IGNORE INTO time VALUES (%s, '%s')\\" % (id, data[i]['local_date_time_full']) print query_str c.execute(query_str) # commit the change conn.commit() # close database conn.close() # TESTING: print out to check \\"\\"\\" conn = sqlite3.connect(db_filename) c = conn.cursor() c.execute(\\"SELECT name FROM sqlite_master WHERE type='table';\\") tables = c.fetchall() print tables for table_name in tables: table_name = table_name[0] table = pd.read_sql_query(\\"SELECT * from %s\\" % table_name, conn) #print table table.to_csv('testdata/vic_usgs/south_west_stations_' + table_name + '.csv', index_label='index') # close database conn.close() \\"\\"\\""},{"prompt":"Make a Python program that prints out a message that gives the number 7 when a value for an integer variable x is 7.","completion":"x = 7 if x == 7: print(\\"The number is 7\\")"},{"prompt":"Write Python code to get the difference between two lists. [1, 2, 3, 4] [1, 2, 5, 6]","completion":"def difference(list1, list2): difference_list = [] for num1 in list1: if num1 not in list2: difference_list.append(num1) for num2 in list2: if num2 not in list1: difference_list.append(num2) return difference_list"},{"prompt":"Write a Python program to parse a JSON string and extract a specific keyvalue pair. { key: value1, anotherKey: value2, somekey: somevalue }","completion":"import json myJSON = '{\\"key\\": \\"value1\\", \\"anotherKey\\": \\"value2\\", \\"somekey\\": \\"somevalue\\"}' # parse json parsedJSON = json.loads(myJSON) # access data key = parsedJSON['key'] value = parsedJSON['value'] # print key and value print(\\"key: \\" + key) print(\\"value: \\" + value)"},{"prompt":"Modify the given code such that a python list of strings is created based on the input. lst = [1, 2, 3]","completion":"lst_strs = [] for i in lst: lst_strs.append(str(i))"},{"prompt":"Generate a program in Python which will take a sentence and output its synonyms.","completion":"import nltk def get_synonyms(sentence): output = [] words = nltk.word_tokenize(sentence) for word in words: synonyms = [] for syn in wordnet.synsets(word): for l in syn.lemmas(): synonyms.append(l.name()) output.append(list(set(synonyms))) return output"},{"prompt":"Design an algorithm in Python to solve the traveling salesman problem.","completion":"def tsp(graph): # Set initial values: best_path = [] best_path_cost = float('Inf') # Iterate through all the possible paths: for i in range(1 << len(graph[0])): # Generate the binary string: path = [] for j in range(len(graph[0])): if (i & (1 << j)) > 0: path.append(j) # Calculate the cost of the path: cost = 0 k = 0 for j in range(len(path)): if j+1 < len(path): cost += graph[path[j]][path[j+1]] else: cost += graph[path[j]][path[0]] # Check if the cost of the path is less than the # current best path cost: if cost < best_path_cost: best_path_cost = cost best_path = path return best_path, best_path_cost"},{"prompt":"Create an API endpoint in a python Flask application to get the list of items stored in a database table called products. Not applicable","completion":"from flask import Flask, jsonify from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite3' db = SQLAlchemy(app) class Product(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(40), nullable=False) @app.route('/products', methods=['GET']) def get_products(): products = Product.query.all() products_list = [] for product in products: products_list.append({ 'id': product.id, 'name': product.name }) return jsonify(products_list) if __name__ == '__main__': app.run(host='0.0.0.0', port=5000, debug=True)"},{"prompt":"Compose a python program to carry out the following purpose Check if a string is a palindrome","completion":"def is_palindrome(s): rev_s = s[::-1] if s == rev_s: return True else: return False"},{"prompt":"Develop a web scraping Python program to scrape the product details of a sample store. The website is located at https://example.com","completion":"import requests from bs4 import BeautifulSoup # Get the HTML from the webpage page = requests.get('https://example.com') soup = BeautifulSoup(page.text, 'html.parser') # Isolate the product information product_list = soup.find_all('div', class_='product') # Extract the product information products = [] for product in product_list: name = product.find('div', class_='name').text.strip() price = product.find('div', class_='price').text.strip() description = product.find('div', class_='description').text.strip() products.append({ 'name': name, 'price': price, 'description': description }) # Print the product list print(products)"},{"prompt":"Design a Python class which represents a bank account. This class should contain attributes and methods to create an account, to deposit money, to withdraw money, to check the balance and to transfer money to another account. Not applicable","completion":"class BankAccount: def __init__(self,name,balance): self.name = name self.balance = balance def deposit(self, amount): self.balance += amount return self.balance def withdraw(self, amount): if self.balance >= amount: self.balance -= amount else: print(\\"Insufficient funds\\") return self.balance def checkBalance(self): return self.balance def transfer(self, target, amount): if self.balance >= amount: self.balance -= amount target.balance += amount else: print(\\"Insufficient funds\\") return self.balance"},{"prompt":"Create a Python program to detect whether two words are similar using fuzzy string matching. first_word: apple second_word: apple","completion":"import fuzzy first_word = 'apple' second_word = 'apples' # Create a FuzzySet object fuzzy_set = fuzzy.FuzzySet() # Add strings to the FuzzySet fuzzy_set.add(first_word) fuzzy_set.add(second_word) # Calculate similarity between strings similarity = fuzzy_set.get(first_word)[0][0] print(\\"The similarity between '{}' and '{}' is {:.2f}\\".format(first_word, second_word, similarity))"},{"prompt":"vent a python data structure to store information about friends.","completion":"class Friend: def __init__(self, name, age, address): self.name = name self.age = age self.address = address friends_list = []"},{"prompt":"Develop a function in Python that will find the sum of all prime numbers in a given range. upper = 10 lower = 1","completion":"def primeSum(lower, upper): sum = 0 for num in range(lower, upper + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: sum += num return sum"},{"prompt":"Create an AI agent in Python to play the game of Tic Tac Toe. Not applicable","completion":"import random # Define the board board = ['_', '_', '_', '_', '_', '_', '_', '_', '_'] # Define the players player = 'X' ai = 'O' # Define the rules of the game def play_game(): # Draw initial board draw_board(board) # Choose the player to start (randomly) choose_player() # Start playing the game game_state = 'Playing' while game_state == 'Playing': if player == 'X': # Ask the player to make a move make_move(player) # Check if anyone has won the game after the player's move game_state = check_game(board, player) # Change the player player = ai else: # Let the AI make a move make_move(ai) # Check if anyone has won the game after the AI's move game_state = check_game(board, ai) # Change the player player = 'X' # Draw the board def draw_board(board): print(\\"-----------------\\") for i in range(3): print(\\"| \\", board[i*3], \\" | \\", board[i*3 + 1], \\" | \\", board[i*3 + 2], \\" |\\") print(\\"-----------------\\") # Choose the player to start (randomly) def choose_player(): global player random_num = random.randint(0,1) if random_num == 0: player = 'X' else: player = 'O' # Make a move def make_move(player): legal_moves = [i for i, x in enumerate(board) if x == '_'] move = -1 # Player is human if player == 'X': while move not in legal_moves: move = int(input(\\"Choose your move: (0-9)\\")) # Player is AI else: move = random.choice(legal_moves) # Make the move board[move] = player # Check if anyone has won def check_game(board, player): for row in range(3): if board[row*3] == board[row*3 + 1] and board[row*3 + 1] == board[row*3 + 2]: if board[row*3] == player: return 'Player ' + player + ' won the game!' for col in range(3): if board[col] == board[col + 3] and board[col + 3] == board[col + 6]: if board[col] == player: return 'Player ' + player + ' won the game!' if board[0] == board[4] and board[4] == board[8]: if board[0] == player: return 'Player ' + player + ' won the game!' if board[2] == board[4] and board[4] == board[6]: if board[2] == player: return 'Player ' + player + ' won the game!' # Check if all the squares are filled if board.count('_') == 0: return 'Draw!' return 'Playing' # Execute the game play_game()"},{"prompt":"Edit the following python code to make it as efficient as possible. def check_year(year): if (year % 4) == 0: if (year % 100) == 0: if (year % 400) == 0: print({0} is a leap year.format(year)) else: print({0} is not a leap year.format(year)) else: print({0} is a leap year.format(year)) else: print({0} is not a leap year.format(year))","completion":"def check_year(year): leap_year = False if (year % 4) == 0: if (year % 100) == 0: if (year % 400) == 0: leap_year = True do_print = True else: leap_year = True do_print = True else: do_print = True if do_print: if leap_year: print(\\"{0} is a leap year\\".format(year)) else: print(\\"{0} is not a leap year\\".format(year))"},{"prompt":"Python, create a class that can be used to store employee details such as their salary, name, and job assignment.","completion":"class Employee: def __init__(self, name, salary, job_assignment): self.name = name self.salary = salary self.job_assignment = job_assignment # other methods here"},{"prompt":"Create a python program that automatically calculates the amount of money in a given account after given a period of time. balance = 100, annual interest rate = 4.5%, years = 5","completion":"def calculate_compound_interest(balance, annual_interest_rate, years): interest = balance * (1 + (annual_interest_rate/100)) ** years return interest # Test balance = 100 annual_interest_rate = 4.5 years = 5 compound_interest = calculate_compound_interest(balance, annual_interest_rate, years) print('Your balance after %d years is %.2f.' % (years, compound_interest)) # Your balance after 5 years is 128.77."},{"prompt":"Create a Python program to process raw customer data into a summary report. Raw Customer Data (JSON): [ { customer_name: John Doe, total_amount_spent: 2000 }, { customer_name: Jane Doe, total_amount_spent: 800 }, { customer_name: Joe Smith, total_amount_spent: 200 } ]","completion":"import json raw_data = [ { \\"customer_name\\": \\"John Doe\\", \\"total_amount_spent\\": 2000 }, { \\"customer_name\\": \\"Jane Doe\\", \\"total_amount_spent\\": 800 }, { \\"customer_name\\": \\"Joe Smith\\", \\"total_amount_spent\\": 200 } ] # calculate total amount spent total_amount_spent = 0 for customer in raw_data: total_amount_spent += customer['total_amount_spent'] # generate summary report summary_report = { 'total_amount_spent': total_amount_spent, 'customers': [] } for customer in raw_data: summary_report['customers'].append({ 'customer_name': customer['customer_name'], 'total_amount_spent': customer['total_amount_spent'] }) # save summary report to a file with open('summary_report.json', 'w') as outfile: json.dump(summary_report, outfile)"},{"prompt":"Convert the following selection sort algorithm into a Python code. Selection Sort(arr) 1 for i=1 to arr.length 1 2 min = i 3 for j = i+1 to arr.length 4 if arr[j] < arr[min] 5 min = j 6 swap(arr[i],arr[min])","completion":"def selection_sort(arr): for i in range(0, len(arr)-1): min = i for j in range(i+1, len(arr)): if arr[j] < arr[min]: min = j arr[i], arr[min] = arr[min], arr[i]"},{"prompt":"Write a Python program to get the index of the largest item in a given list. [4, 3, 5, 7, 6]","completion":"# get the index of the largest item in a list def get_max_index(arr): max_index = 0 for i in range(1, len(arr)): if arr[i] > arr[max_index]: max_index = i return max_index result = get_max_index([4, 3, 5, 7, 6]) print(result) # 3"},{"prompt":"Generate a program in Python which creates an ordered dictionary from a given list of tuples.","completion":"def create_ordered_dict(list_tuple): ordered_dict = OrderedDict() for key, value in list_tuple: ordered_dict[key] = value return ordered_dict"},{"prompt":"Design a Python algorithm to sort the elements of a given array by insertion sorting.","completion":"def insertionSort(array): \\"\\"\\"Algorithm to sort an array using insertion sort.\\"\\"\\" for j in range(1,len(array)): key = array[j] i = j-1 while i >= 0 and array[i]> key: array[i+1] = array[i] i-=1 array[i+1] = key"},{"prompt":"Create a Python function that returns all the prime numbers between 1 and a given number. Number: 25","completion":"def get_primes(n): primes = [] for num in range(2, n + 1): is_prime = True for divisor in range(2, num): if num % divisor == 0: is_prime = False break if is_prime: primes.append(num) return primes primes = get_primes(25) print(primes) # prints [2, 3, 5, 7, 11, 13, 17, 19, 23]"},{"prompt":"Program an algorithm in Python to calculate the largest sum of nonadjacents from an unsorted array.","completion":"def largestSumNonAdjacent(arr): incl = 0 excl = 0 for i in arr: new_excl = max(incl, excl) incl = excl + i excl = new_excl return max(incl, excl)"},{"prompt":"Create a function in Python that prints the numbers between 0 and 10 (inclusive) in descending order.","completion":"def printDescending(): for i in range(10,-1,-1): print (i) printDescending()"},{"prompt":"mplement a minisearch engine in Python which returns the most relevant document for the given query. A list of documents is provided in a file called docs.tx","completion":"import re def search(docs, query): # Tokenize the documents tokenized_docs = [tokenize(doc) for doc in docs] # Perform pre-processing on the query processed_query = preprocess(query) # Calculate the scores for each document based on the query scores = [calculate_score(processed_query, doc) for doc in tokenized_docs] # Get the index of the best matching document max_index = scores.index(max(scores)) # Return the most relevant document return docs[max_index] def tokenize(doc): # Split the document into tokens tokens = re.split('W+', doc) # Remove any empty tokens tokens = [token for token in tokens if token != ''] return tokens def preprocess(query): # Split the query into tokens tokens = re.split('W+', query) # Remove any empty tokens tokens = [token for token in tokens if token != ''] # Normalize the tokens tokens = [token.lower() for token in tokens] return tokens def calculate_score(query, doc): # Calculate the score of a document score = 0 for token in query: if token in doc: score += 1 return score"},{"prompt":"Generate code for a CRON job that runs every day at 5pm to send out an email reminder to each user in the system. Not applicable","completion":"from django.core.management.base import BaseCommand from users.models import User from django.core.mail import send_mail class Command(BaseCommand): def handle(self, *args, **kwargs): users = User.objects.all() for u in users: send_mail('Reminder', 'My reminder message', 'from@example.com', [u.email], fail_silently=False) # add this line to your crontab 0 17 * * * python manage.py my_command"},{"prompt":"Develop a machine learning classifier in Python to identify whether an email is spam or not.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import confusion_matrix # Load the data data = pd.read_csv('spam_data.csv') # Create features and target X = data['Text'] y = data['Spam'] # Split into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2) # Vectorize the text using TF-IDF vectorizer = TfidfVectorizer() X_train_tfidf = vectorizer.fit_transform(X_train) X_test_tfidf = vectorizer.transform(X_test) # Create and train the model model = MultinomialNB() model.fit(X_train_tfidf, y_train) # Make predictions y_pred = model.predict(X_test_tfidf) # Print confusion matrix print(confusion_matrix(y_test, y_pred))"},{"prompt":"Create a Python script to query a MongoDB database and return a list of documents that match a query Query: Return documents that contain the string the quick","completion":"import pymongo from pymongo import MongoClient # connect to Mongo client = MongoClient(\\"mongodb://localhost:27017/\\") # get a database object db = client['mydb'] # get a collection object collection = db['mycollection'] # create a query object query = { \\"text\\": { \\"regex\\": \\"the quick\\" } } # perform a simple query documents = collection.find(query) # loop over the documents for doc in documents: print(doc)"},{"prompt":"Can you provide a machine learning algorithm in Python that performs sentiment analysis on a given text? Text: This product is simply incredible!","completion":"from nltk.sentiment.vader import SentimentIntensityAnalyzer sentences = [\\"This product is simply incredible!\\"] analyzer = SentimentIntensityAnalyzer() for sentence in sentences: scores = analyzer.polarity_scores(sentence) print(\\"{:-<40} {}\\".format(sentence, str(scores)))"},{"prompt":"Create a password generator in Python that generates passwords with a combination of letters (both uppercase and lowercase), numbers, and symbols. The password should contain at least 6 characters. Not applicable","completion":"import string import random def password_generator(size=6): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + '!@#%^&*()' return ''.join(random.choice(chars) for x in range(size)) password = password_generator() print(password)"},{"prompt":"Develop a Python 3 function that implements a linear search algorithm. [4, 1, 9, 6]","completion":"def linear_search(arr, target_val): \\"\\"\\" This function performs linear search on an array to find the target value \\"\\"\\" for idx in range(len(arr)): if arr[idx] == target_val: return idx return -1 target_val = 9 arr = [4, 1, 9, 6] target_idx = linear_search(arr, target_val) if target_idx == -1: print(\\"Target not found!\\") else: print(f\\"Target found at index {target_idx}\\")"},{"prompt":"Encode a given URL using percentencoding. https://www.example.com/search?q=pytho","completion":"String url = \\"https://www.example.com/search?q=python\\"; String encodedUrl = URLEncoder.encode(url, \\"UTF-8\\"); System.out.println(encodedUrl); // https%3A%2F%2Fwww.example.com%2Fsearch%3Fq%3Dpython"},{"prompt":"Create a program in Python that counts the number of vowels in a given string.","completion":"def count_vowels(string): vowels = ['a', 'e', 'i', 'o', 'u'] return sum(string.count(x) for x in vowels)"},{"prompt":"Code a function in Python to identify a valid email address.","completion":"import re def is_valid_email(email): regex = '^[a-z0-9]+[._]?[a-z0-9]+[@]w+[.]w{2,3}' return re.search(regex, email)"},{"prompt":"Develop a Python program to generate a date sequence between two given dates. start_date = 20200101 end_date = 20200108","completion":"import datetime start_date = datetime.date(2020, 1, 1) end_date = datetime.date(2020, 1, 8) delta = end_date - start_date date_list = [] for i in range(delta.days + 1): day = start_date + datetime.timedelta(days=i) date_list.append(day.strftime('%Y-%m-%d')) print(date_list) # Output: ['2020-01-01', '2020-01-02', '2020-01-03', '2020-01-04', '2020-01-05', '2020-01-06', '2020-01-07', '2020-01-08']"},{"prompt":"Develop a Python script which sorts a list of names in alphabetical order John, Anna, David, Bob, Alex","completion":"names = [\\"John\\", \\"Anna\\", \\"David\\", \\"Bob\\", \\"Alex\\"] # sorting the names names.sort() # printing the first name in the sorted list print(\\"The first name in the sorted list is:\\") print(names[0])"},{"prompt":"mplement a function in Python that will take in an arbitrary list of numbers and output the average of the list. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def average(nums): total = 0 for num in nums: total += num return total/len(nums)"},{"prompt":"Create a virtual environment using Python with the name myenv","completion":"python -m venv myenv"},{"prompt":"Can you create a function in Python that prints all permutations of a given word?","completion":"def print_permutations(string): if len(string) == 1: print(string) else: for i, char in enumerate(string): for perm in print_permutations(string[:i] + string[i+1:]): print(char + perm)"},{"prompt":"Write a Python function to invert a string (swap uppercase and lowercase letters).","completion":"def invert_string(string): # Initially create an empty string as result result = '' # Traverse every character of the string for char in string: # If an uppercase character is found if char.isupper(): # Add its lowercase equivalent to the result result += char.lower() # If a lowercase character is found elif char.islower(): # Add its uppercase equivalent to the result result += char.upper() else: # If not an alphabet character result += char return result"},{"prompt":"Write a Python program to check if a given string is a rotation of another given string. str1 = waterbottle str2 = erbottlewat","completion":"def is_rotation(str1, str2): if len(str1) != len(str2): return False concat_str2 = str2 * 2 return str1 in concat_str2 is_rotation(str1, str2)"},{"prompt":"Write a Python program to find all pairs of numbers in a given list whose sum is equal to a given target number.","completion":"def find_pairs_with_sum(nums, target): found_pairs = [] for i in range(len(nums)): for j in range(i + 1, len(nums)): if nums[i] + nums[j] == target: found_pairs.append([nums[i], nums[j]]) return found_pairs"},{"prompt":"Create a program to perform a tfidf calculation in Python.","completion":"import re from collections import Counter def tf_idf(documents): # Split documents into tokens tokens = [tokenize(document) for document in documents] # Get vocabulary vocabulary = get_vocabulary(tokens) # Calculate Term Frequency tf = get_termfrequency(tokens, vocabulary) # Calculate Document Frequency df = get_documentfrequency(tokens, vocabulary) # Calculate Inverse Document Frequency idf = get_inverse_documentfrequency(df, len(documents)) # Calculate TF-IDF tf_idf = get_tf_idf(tf, idf) # Return TF-IDF scores return tf_idf def tokenize(document): # Tokenize document tokens = re.findall(r\\"[w']+\\", document) # Return tokens return tokens def get_vocabulary(tokens): # Get vocabulary vocabulary = set() for token_list in tokens: vocabulary.update(set(token_list)) # Return vocabulary return vocabulary def get_termfrequency(tokens, vocabulary): # Initialize term frequency tf = {word: [] for word in vocabulary} for token_list in tokens: # Get word frequency counter = Counter(token_list) # Update term frequency for word in vocabulary: tf[word] = tf[word] + [counter[word]] # Return term frequency return tf def get_documentfrequency(tokens, vocabulary): # Initialize document frequency df = {word: 0 for word in vocabulary} for token_list in tokens: # Update document frequency for word in vocabulary: if word in token_list: df[word] += 1 # Return document frequency return df def get_inverse_documentfrequency(df, num_documents): # Initialize Inverse document frequency idf = {word: 0 for word in df.keys()} # Calculate inverse document frequency for word in df.keys(): idf[word] = math.log(num_documents / df[word]) # Return Inverse Document Frequency return idf def get_tf_idf(tf, idf): # Initialize tf-idf tf_idf = {word: [] for word in tf.keys()} # Calculate tf-idf for word in tf.keys(): scores = [tf[word][k] * idf[word] for k in range(len(tf[word])) ] tf_idf[word] = scores # Return tf-idf return tf_idf"},{"prompt":"Create Python code that will insert a new item at the end of a list.","completion":"def insert_at_end(list, item): \\"\\"\\"Inserts an item at the end of a list\\"\\"\\" list.append(item)"},{"prompt":"Optimize a Python program to run faster and use less memory. import math # Slow loop implementation def slow_loop(num): for i in range(int(num)): result = math.sqrt(i*i + 1) return resul","completion":"import math # Faster loop implementation def fast_loop(num): result = 1 for i in range(int(num)): result += math.sqrt(i*i + 1) return result"},{"prompt":"Create a program in Python to extract words of length 4 from a given string. s = extract four letter words;","completion":"words = s.split() four_letter_words = [] for word in words: if len(word) == 4: four_letter_words.append(word) print(four_letter_words)"},{"prompt":"Create an algorithm in Python for searching for an element in an array.","completion":"def linearSearch(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 # target not found"},{"prompt":"Optimize the provided Python code to run in linear time. def function(arr): for i in range(len(arr)): for j in range(i+1, len(arr)): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i]","completion":"def function(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i]"},{"prompt":"Given two lists x and y, write a python program to return a list that contains the elements which are common to both lists. x = [1, 2, 3, 4], y = [2, 3, 4, 5]","completion":"def common_elements(x, y): common = [] for i in x: if i in y: common.append(i) return common"},{"prompt":"Create a machine learning model in Python to classify digits from the MNIST dataset. Not applicable","completion":"import tensorflow as tf (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data() x_train = x_train.reshape(60000, 784) x_test = x_test.reshape(10000, 784) model = tf.keras.models.Sequential([ tf.keras.layers.Dense(256, activation='relu', input_shape=(784,)), tf.keras.layers.Dropout(0.2), tf.keras.layers.Dense(10, activation='softmax') ]) model.compile( optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'] ) model.fit(x_train, y_train, epochs=5) model.evaluate(x_test, y_test)"},{"prompt":"Design a Python algorithm to compute the total number of inversions in an array of integers. [2, 4, 1, 3, 5]","completion":"def count_inversions(arr): inversion_count = 0 for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: inversion_count += 1 return inversion_count"},{"prompt":"Create functions in Python for validating if a number is prime or not. n = 12","completion":"def is_prime(n): if n == 1: return False for i in range(2,int(n**(1/2))+1): if n%i == 0: return False return True if is_prime(12): print(\\"Prime\\") else: print(\\"Not Prime\\")"},{"prompt":"Create a python code to optimize an equation for its maximum value","completion":"\\"\\"\\" Create a python code to optimize an equation for its maximum value. \\"\\"\\" import numpy as np from scipy.optimize import minimize def objective(x): # Objective function return -(2*x[0] + 5*x[1] + 3*x[2] + 6*x[3]) if __name__ == '__main__': # Initial guess x0 = [2,4,1,3] # Show initial objective print('Initial Objective: ' + str(objective(x0))) #Optimize res = minimize(objective, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) #Show final objective print('Final Objective: ' + str(res.fun)) #Print Optimized values print('Optimized values: ' + str(res.x))"},{"prompt":"Generate a Python program that will compare two strings and return 'True' or 'False'. ('Apple', 'Orange')","completion":"def compare_strings(first, second): return first == second result = compare_strings('Apple', 'Orange') print (result)"},{"prompt":"Program a function in Python 3 that takes a list of integers and returns a list with only the nonduplicate values. [1, 2, 4, 1, 5, 7, 8, 2]","completion":"def uniqueVals(arr): uniqueValsArr = [] for x in arr: if x not in uniqueValsArr: uniqueValsArr.append(x) return uniqueValsArr mylist = [1, 2, 4, 1, 5, 7, 8, 2] print(uniqueVals(mylist)) # Output: [1,2,4,5,7,8]"},{"prompt":"Develop a Python generator to yield a Fibonacci sequence No inpu","completion":"def fibonacci(n): a, b = 0, 1 for _ in range(n): yield a a, b = b, a + b for x in fibonacci(20): print(x)"},{"prompt":"Write a Python program that prints all pairs of numbers between 0 and 5 (inclusive).","completion":"for i in range(0,6): for j in range(0,6): if i != j: print(i,j)"},{"prompt":"Using Python, create a script that finds the longest common prefix in a given array of strings. [ABCDE, ABCD, ABCXYZ, ABCDEFG]","completion":"def longest_common_prefix(st): if len(st) == 0: return '' first_word = st[0] prefix = '' for i in range(len(first_word)): for w in range(1, len(st)): if i >= len(st[w]) or st[w][i] != first_word[i]: return prefix prefix += first_word[i] return prefix words = [\\"ABCDE\\", \\"ABCD\\", \\"ABCXYZ\\", \\"ABCDEFG\\"] print(longest_common_prefix(words))"},{"prompt":"Create a python script to display a grid pattern.","completion":"def printgrid(rows, columns): for i in range(1, rows+1): for j in range(1, columns+1): print(\\"*\\", end=\\" \\") print(\\"r\\") printgrid(4, 4)"},{"prompt":"Create a class called ClassName that sets options for a WIGLE query using the Builders module. The required options are bssid, user, and pass, which should be set to specific values. The startx method should initiate the query using the WigleAgent class and print the resulting latitude, longitude, and BSSID. It should also use the kml_builder class to build a KML file with the latitude, longitude, and BSSID, and print a message to check the output.","completion":"from Builders import wigile_query from Builders import kml_builder class ClassName(): #These are the options we will set def __init__(self): # Descriptions that are required!!! self.name = \\"Registry Network info corelation\\" self.description = \\"WIGLE Query your known BSSID\\" self.language = \\"python\\" self.extension = \\"py\\" self.rating = \\"Excellent\\" # options we require user interaction for- format is {Option : [Value, Description]]} self.required_options = {\\"bssid\\" : ['00:22:55:DF:C8:01', \\"Set BSSID or MAC of AP\\"], \\"user\\" : ['offtest', \\"Set Username to WIGLE\\"], \\"pass\\" : ['83128312', \\"Set Password to WIGLE\\"]} def startx(self): wa = wigile_query.WigleAgent(self.required_options[\\"user\\"][0], self.required_options[\\"pass\\"][0]) final = wa.get_lat_lng(self.required_options[\\"bssid\\"][0]) print final kml = kml_builder.kml() kml.build(final[\\"lat\\"], final[\\"lng\\"], final[\\"bssid\\"]) #Pass SSID name of network print \\"[*] Check output\\""},{"prompt":"Create a Python class to represent a point in the xy plane and a method to calculate the distance from the origin. Not applicable","completion":"import math class Point: def __init__(self, x, y): self.x = x self.y = y def distance_from_origin(self): return math.sqrt(self.x**2 + self.y**2) pt1 = Point(3, 4) print(pt1.distance_from_origin()) # prints 5.0"},{"prompt":"Write a Python script to generate a random 3 X 3 matrix of integers in the range [1, 9]. Not applicable","completion":"import random # Generate a random 3 X 3 matrix of integers in the range [1, 9]. matrix = [[random.randint(1, 9) for _ in range(3)] for _ in range(3)] for row in matrix: print(row)"},{"prompt":"Create an algorithm in Python to find all pairs of numbers in a given array whose sum is equal to a specific target number. arr = [4, 5, 6, 7, 8], target = 10","completion":"def find_pairs(arr, target): pairs = [] i, j = 0, len(arr)-1 while i < j: sum = arr[i] + arr[j] if sum == target: pairs.append([arr[i], arr[j]]) i += 1 j -= 1 elif sum < target: i += 1 else: j -= 1 return pairs arr = [4, 5, 6, 7, 8] target = 10 result = find_pairs(arr, target) print(result)"},{"prompt":"Develop a python code to calculate the number of overlapping elements in two unsorted arrays. Array 1: [1, 2, 2, 4] Array 2: [2, 3, 4]","completion":"def overlap_count(a1, a2): a1_set = set(a1) a2_set = set(a2) overlap_set = a1_set.intersection(a2_set) return len(overlap_set) arr1 = [1, 2, 2, 4] arr2 = [2, 3, 4] print(overlap_count(arr1, arr2)) # 3"},{"prompt":"Write a script in Python to generate a dictionary of words from a given string. def words_dict(string)","completion":"def words_dict(string): \\"\\"\\"This function returns a dictionary with words as keys and their count as values.\\"\\"\\" words = string.split() word_dict = {} for word in words: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict"},{"prompt":"Develop a web scraper in Python that pulls data from ESPN's website for a given team name. Team name Manchester United","completion":"from bs4 import BeautifulSoup import requests teamname = 'Manchester United' url = f'https://www.espn.com/soccer/team/_/name/{teamname}' html = requests.get(url, headers={'User-Agent':'Chrome/85.0.4183.102'}).text soup = BeautifulSoup(html, 'html.parser') for tag in soup.find_all('div', {'class': 'stat-cell'}): if tag.find('span') and tag.find('span').string: statname = tag.find('span').string.strip() statnum = tag.find('p').string.strip() print(f'{statname}: {statnum}')"},{"prompt":"Create a histogram of the following data using Python. data = [2, 3, 4, 6, 7, 8, 9, 10]","completion":"import matplotlib.pyplot as plt data = [2, 3, 4, 6, 7, 8, 9, 10] plt.hist(data) plt.title('Histogram of Wind Direction') plt.xlabel('Direction (degrees)') plt.ylabel('Frequency') plt.show()"},{"prompt":"Build a class in Python that creates a Point in a two dimensional space.","completion":"class Point: def __init__(self, x, y): self.x = x self.y = y # create a Point object p = Point(2, 4) print(p.x) print(p.y)"},{"prompt":"Create a class Animal in Python with two instance variables, name and age, and a constructor Animal(name, age). It should also have a speak() method that prints out the animal's name. Not applicable","completion":"class Animal: def __init__(self, name, age): self.name = name self.age = age def speak(self): print(\\"My name is\\", self.name)"},{"prompt":"Create an algorithm in Python to classify a given array into two parts for even and odd elements. [2, 3, 5, 4, 1]","completion":"def classifyArray(arr): if len(arr) == 0: return [[], []] even, odd = [], [] for num in arr: if num % 2 == 0: even.append(num) else: odd.append(num) return[even, odd] # Driver code arr = [2, 3, 5, 4, 1] [even, odd] = classifyArray(arr) print(\\"Even elements of the array:\\") print(*even) print(\\"Odd elements of the array:\\") print(*odd)"},{"prompt":"Write a Python program to construct a binary search tree using a list of integers. [15, 7, 13, 12, 2, 1, 3, 16, 20]","completion":"class Node: def __init__(self, val): self.val = val self.left = None self.right = None def build_bst(lst): root = Node(lst[0]) for num in lst[1:]: cur = root while cur: if num < cur.val: if cur.left: cur = cur.left else: cur.left = Node(num) break else: if cur.right: cur = cur.right else: cur.right = Node(num) break return root"},{"prompt":"Write a Python function to find all possible nletter words from a given list of letters. [a,b,c], n = 2","completion":"def find_words_length_n(letters, n): words = set() for combo in itertools.combinations_with_replacement(letters, n): for perm in itertools.permutations(combo): words.add(\\"\\".join(perm)) return words words = find_words_length_n([\\"a\\",\\"b\\",\\"c\\"], 2) print(words)"},{"prompt":"Compose a Python program that evaluates a given expression provided as a string and prints its result. 1+1","completion":"def evaluate_expression(expression): try: result = eval(expression) print(result) except: print(\\"Error: invalid expression\\") evaluate_expression(\\"1+1\\")"},{"prompt":"Write a function in Python that takes in two strings of the same length and returns the number of different characters in the two strings. str1 = data str2 = muta","completion":"def diff_char(str1, str2): count = 0 for i in range(len(str1)): if str1[i] != str2[i]: count += 1 return count"},{"prompt":"Create an API in Python that performs sentiment analysis on a given text. Not applicable","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_analysis(text): # Download language models nltk.download('vader_lexicon') # Initialize a sentiment analyzer sid = SentimentIntensityAnalyzer() # Calculate the sentiment score sentiment = sid.polarity_scores(text) # Return the sentiment score return sentiment"},{"prompt":"Create a program to classify the given emails into spam or ham using a Naive Bayes classifier in Python.","completion":"\\"\\"\\" Classify emails into spam or ham using Naive Bayes \\"\\"\\" import numpy as np import pandas as pd from sklearn.naive_bayes import MultinomialNB from sklearn.feature_extraction.text import TfidfVectorizer # read the emails df = pd.read_csv('emails.csv') # prepare training and test sets df_train = df[:int(df.shape[0]*0.8)] df_test = df[int(df.shape[0]*0.8):] # instantiate tf-idf vectorizers tfidf_vectorizer = TfidfVectorizer() # tf-idf vectorize the texts X_train = tfidf_vectorizer.fit_transform(df_train.text) X_test = tfidf_vectorizer.transform(df_test.text) # create Naive Bayes classifier clf = MultinomialNB().fit(X_train, df_train.label) # predict the labels for the test set predictions = clf.predict(X_test) # calculate the accuracy accuracy = np.mean(predictions == df_test.label) print('Accuracy: {}'.format(accuracy))"},{"prompt":"Create a Python program to generate a maze of size NxN. 5","completion":"import random def maze_generator(n): maze = [[0 for x in range(n)] for y in range(n)] # Fill the walls and open paths for i in range(n): for j in range(n): if i == 0 and j == 0: maze[i][j] = 0 elif i == 0 and j == n-1: maze[i][j] = 0 elif i == n-1 and j == 0: maze[i][j] = 0 elif i == n-1 and j == n-1: maze[i][j] = 0 else: maze[i][j] = random.randint(0, 1) # Print the maze for i in range(n): for j in range(n): print(maze[i][j], end = ' ') print() maze_generator(5)"},{"prompt":"Write a Python script to retrieve a list of tweets using a given hashtag.","completion":"import tweepy from tweepy import OAuthHandler consumer_key = '<your-consumer-key-here>' consumer_secret = '<your-consumer-secret-here>' access_token = '<your-access-token-here>' access_token_secret = '<your-access-token-secret-here>' auth = OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token,access_token_secret) api = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True) def get_tweets(hashtag): tweets = [] for tweet in tweepy.Cursor(api.search, q=hashtag, lang='en').items(): tweets.append(tweet.text) return tweets tweets = get_tweets(\\"#python\\") print(tweets)"},{"prompt":"Analyze a given Python code snippet and determine its type a documentation, a code snippet, or a comment. def f(x): A simple function that prints the argument print(x)","completion":"Documentation"},{"prompt":"Write a Python program to scrape a website for movie titles and ratings. Not applicable","completion":"import requests import lxml.html as lh movies_url = 'https://www.imdb.com/chart/top?ref_=nv_mv_250_6' page = requests.get(movies_url) doc = lh.fromstring(page.content) # Get the list of movie elements movie_elements = doc.xpath('//tr') # Store the titles and ratings titles = [] ratings = [] for movie in movie_elements: title_cell = movie.xpath('./td[@class=\\"titleColumn\\"]//a') if title_cell: title = title_cell[0].text_content() titles.append(title) rating_cell = movie.xpath('./td[@class=\\"ratingColumn imdbRating\\"]//strong') if rating_cell: rating = rating_cell[0].text_content() ratings.append(rating) # Print the titles and ratings for i in range(len(titles)): print(titles[i], '-', ratings[i])"},{"prompt":"Define a class in Python for a circle.","completion":"class Circle: def __init__(self, radius): self.radius = radius # Getter method def getRadius(self): return self.radius # Setter method def setRadius(self, radius): self.radius = radius # Area method def getArea(self): return 3.14 * (self.radius**2)"},{"prompt":"Create a Python function to calculate the sum of the list elements. [1, 3, 4, 7, 9]","completion":"def list_sum(list_in): return sum(list_in) # or def list_sum(list_in): total_sum = 0 for num in list_in: total_sum += num return total_sum"},{"prompt":"it possible to write a function in Python to convert a given list of lists into a CMOV instruction? [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def listoflists_to_cmov(listoflists): # Initialise CMOV array cmov = [0]*9 # Fill CMOV array with given list of lists for i, list_ in enumerate(listoflists): cmov[i*3:(i+1)*3] = list_ # Return CMOV array return cmov"},{"prompt":"Create a functions in Python that takes a string as an argument and outputs an array of strings that are all palindromes comprised of all the letters in the argument string. abacad","completion":"def palindromeArray(s): res = [] for i in range(1 << len(s)): temp = \\"\\" for j in range(len(s)): # Check if jth bit is set in i if (i & (1 << j)) > 0: temp = temp + s[j] # Check if temp is palindrome if (temp == temp[::-1]): res.append(temp) return res print(palindromeArray(\\"abacad\\")) # Output: ['a', 'aa', 'ada', 'aca', 'aba']"},{"prompt":"Optimize the given Python function to reduce its run time and memory usage. def func1(n): if n==0: return 0 if n==1: return 1 else: return func1(n1)+func1(n2)","completion":"def func1(n, lookup): if n == 0 or n == 1 : lookup[n] = n if lookup[n] is None: lookup[n] = func1(n-1, lookup) + func1(n-2, lookup) return lookup[n] def optimizedFibo(n): lookup = [None]*(n+1) return func1(n, lookup)"},{"prompt":"Develop a code that implements linear regression in Python.","completion":"import numpy as np # define the data # X = [1, 2, 3, 4, 5] # Y = [2, 4, 5, 4, 5] X = np.array([1, 2, 3, 4, 5]) Y = np.array([2, 4, 5, 4, 5]) # calculate the mean of x and y xmean = np.mean(X) ymean = np.mean(Y) # calculate the equations num = 0 den = 0 for i in range(len(X)): num += (X[i] - xmean)*(Y[i] - ymean) den += (X[i] - xmean)**2 # calculate m and c m = num/den c = ymean - m*xmean # display the line equation print(\\"Regression line equation:\\") print(\\"y = {}x + {}\\".format(m, c))"},{"prompt":"Can you modify the program from above to print the two numbers in ascending order instead?","completion":"# Python program def main(): num1 = int(input(\\"Enter the first number: \\")) num2 = int(input(\\"Enter the second number: \\")) # use max and min functions to output the numbers in ascending order print(min(num1, num2)) print(max(num1, num2)) if __name__ == \\"__main__\\": main()"},{"prompt":"Can you create a Python function that returns the sum of all the elements in a given list? [1, 2, 3, 4, 5]","completion":"def list_sum(list): sum = 0 for el in list: sum += el return sum"},{"prompt":"Write a Python program to find the highest repeating word in a given paragraph.","completion":"def highest_repeating_word(paragraph): \\"\\"\\" Finds the highest repeating word in a given paragraph. Args: paragraph (str): The paragraph. Return: str: The highest repeating word. \\"\\"\\" words = paragraph.split() # Create a dictionary to store the word frequencies word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 highest_freq = 0 highest_freq_word = None # Find the highest frequency word for word, freq in word_freq.items(): if freq > highest_freq: highest_freq = freq highest_freq_word = word return highest_freq_word"},{"prompt":"Generate a Python program to retrieve the top N most commonly used words in a text document No Inpu","completion":"import collections def get_top_words(text, n): \\"\\"\\" Function to retrieve the top N most used words in a given text document. Args: text (str): The text document n (int): Number of words to extract Returns: The top n most used words as a list of strings. \\"\\"\\" # Tokenize the text tokens = tokenize(text) # Count the number of times each token appears in the text token_count = collections.Counter(tokens).most_common(n) # Extract the words from token_count top_words = [word for word, _ in token_count] return top_words"},{"prompt":"Generate a shell script to install a specific version of Python and two modules. version=3.6.2 modules=matplotlib, Django","completion":"#!/bin/bash # Download and install Python wget https://www.python.org/ftp/python/{version}/Python-{version}.tgz tar -xvzf Python-{version} cd Python-{version}/ ./configure make make install # Install modules pip install {modules[0]} pip install {modules[1]}"},{"prompt":"Write an algorithm to find the largest possible sum of two nonoverlapping subarrays. [1, 1, 2, 3, 3, 4, 1]","completion":"def maxNonOverlappingSum(arr): incl_sum = 0 excl_sum = 0 for i in arr: # Current max excluding i (No ternary operator in Python) new_excl_sum = excl_sum if excl_sum>incl_sum else incl_sum # Current max including i incl_sum = excl_sum + i # Add previous excl_sum excl_sum = new_excl_sum # return max of incl_sum and excl_sum return (excl_sum if excl_sum>incl_sum else incl_sum)"},{"prompt":"Design a Python module that prints out a table of squares for input ranging from 0 to 10.","completion":"def print_table(): print(\\" x | x^2\\") print(\\"-----------\\") for i in range(11): answer = i * i print(f\\" {i} | {answer}\\") print_table()"},{"prompt":"Write a python program that takes an array as an input and returns a list of all possible combinations from the array where the length must not exceed 3 elements. [1, 2, 3]","completion":"def get_combinations(arr): combinations = [] for i in range(len(arr) + 1): for j in range(i + 1, len(arr) + 1): for k in range(j + 1, len(arr)+1): combinations.append(arr[i:j] + arr[j:k]) return combinations result = get_combinations([1, 2, 3]) print(result)"},{"prompt":"mplement a decision tree model in Python to classify given data. [0, 1, 0, 1, 0], [1, 0, 1, 0, 1]","completion":"#importing necessary libraries from sklearn import tree import numpy as np #data X = np.array([[0, 1, 0, 1, 0], [1, 0, 1, 0, 1]]) y = np.array([0, 1]) #model clf = tree.DecisionTreeClassifier() clf = clf.fit(X, y) #predicting x_test = np.array([[1, 0, 0, 0, 1]]) prediction = clf.predict(x_test) #result print(prediction)"},{"prompt":"Using Python, create a program to print the following pattern.","completion":"for i in range(7): print(\\"*\\" * i) for i in reversed(range(7)): print(\\"*\\" * i)"},{"prompt":"Design and write an algorithm in Python to solve the Tower of Hanoi puzzle. Number of disks = 3","completion":"def hanoi(n, source, temp, dest): if n == 1: print(\\"Move disk 1 from {} to {}\\".format(source, dest)) return hanoi(n-1, source, dest, temp) print(\\"Move disk {} from {} to {}\\".format(n, source, dest)) hanoi(n-1, temp, source, dest) if __name__ == \\"__main__\\": n = 3 # Number of disks hanoi(n, 'A', 'B', 'C') # A, B and C are the names of the rods"},{"prompt":"Create a crossplatform application in Python to schedule reminders.","completion":"import datetime import time import os def setReminder(reminder_time, reminder_message): # Get the current time current_time = datetime.datetime.now() # Calculate the amount of time until the reminder is due wait_time = (reminder_time - current_time).total_seconds() # Sleep for the amount of time until the reminder time.sleep(wait_time) # Print the reminder message print(\\"nReminder: %s\\" % reminder_message) # Play a sound to alert the user os.system(\\"start reminder_sound.wav\\") # Set a reminder for 5 minutes from now reminder_time = datetime.datetime.now() + datetime.timedelta(minutes=5) reminder_message = \\"Time to take a break!\\" setReminder(reminder_time, reminder_message)"},{"prompt":"Write a Python function to print the nth row of Pascal's triangle. n = 8","completion":"def pascals_triangle(n): # list to store the elements of each row pascal_triangle = [] # loop to calculate each row of the triangle for row_number in range(n): row = [] for element in range(row_number+1): # first and last elements of each row are 1 if element == 0 or element == row_number: row.append(1) # other elements if any are sum of the elements # just above it else: row.append(pascal_triangle[row_number-1][element-1] + pascal_triangle[row_number-1][element]) # add the row to the triangle pascal_triangle.append(row) return pascal_triangle[n-1] # nth row number n = 8 # print 8th row of pascal's triangle print(pascals_triangle(n))"},{"prompt":"Create a python program to scrape news articles from a website and store them in a database. The news website: https://www.huffpost.com","completion":"import requests from bs4 import BeautifulSoup import sqlite3 URL = 'https://www.huffpost.com' # Request the data html_data = requests.get(URL).text # Parse the data soup = BeautifulSoup(html_data, 'html.parser') # Create a connection conn = sqlite3.connect('news.db') c = conn.cursor() # Get all article links articles = soup.find_all('article') for article in articles: a = article.find('a') # check if a has href attr if a and 'href' in a.attr: # join the url with href article_url = URL + a.attr['href'] # Get article data html_data = requests.get(article_url).text soup_article = BeautifulSoup(html_data, 'html.parser') # Get title title = soup_article.find('h1') # Get the content content = soup_article.find('div', {'class': 'entry__content'}) # Create a database entry c.execute('INSERT INTO article (title, url, content) VALUES (?,?,?)', (title.text, article_url, content.text)) # Save the changes conn.commit() # Close the connection conn.close()"},{"prompt":"Write a Java program to remove all whitespace from a string.","completion":"public class RemoveWhitespace { public static String removeWhitespace(String str) { str = str.replaceAll(\\"s\\", \\"\\"); return str; } public static void main(String[] args) { String str = \\"Python Programming\\"; System.out.println(removeWhitespace(str)); } }"},{"prompt":"Can you create a Python program for classifying spam and nonspam emails? Mail content: This is an email from XYZ corporation.nMail label: Nonspam","completion":"import spacy from textblob import TextBlob # load the spacy model nlp = spacy.load('en') # classify the given mail mail_content = 'This is an email from XYZ corporation.' if TextBlob(mail_content).sentiment.polarity > 0: output_label = 'Non-spam' else: output_label = 'Spam' # print the output label print(output_label)"},{"prompt":"Create a class in Python to represent a rational number.","completion":"class Rational: def __init__(self, numerator, denominator): self.numerator = numerator self.denominator = denominator def __str__(self): return f\\"{self.numerator}/{self.denominator}\\" def __add__(self, other): new_numerator = self.numerator * other.denominator + other.numerator * self.denominator new_denominator = self.denominator * other.denominator return Rational(new_numerator, new_denominator)"},{"prompt":"Create a lambda expression in Python to return the largest number from a list of numbers.","completion":"largestNum = lambda a: max(a)"},{"prompt":"Create a textbased adventure game in Python where the user must navigate through a world of obstacles. The user is in a dark dungeon and must find the exit.","completion":"print(\\"You find yourself in a dark dungeon with no apparent exit. What do you do? Enter 'walk left', 'walk right', 'walk straight' or 'look around'\\") move = input() if move == 'walk left': print(\\"You walk to the left and find a door with a lock. What do you do?\\") elif move == 'walk right': print(\\"You walk to the right and find a secret passage leading through the wall. What do you do?\\") elif move == 'walk straight': print(\\"You walk straight and come to a dead end. What do you do?\\") elif move == 'look around': print(\\"You look around and see a lever on the wall. What do you do?\\")"},{"prompt":"Write a Python function that takes a list of words and removes all words that are not equal to the given word. word = 'Hello' words = ['Hi', 'there', 'Hello', 'Goodbye']","completion":"def remove_words(word, words): return [w for w in words if w == word]"},{"prompt":"Generate a Python program for finding the most common element in a given list. data=[1, 1, 3, 5, 8, 8]","completion":"data=[1, 1, 3, 5, 8, 8] # create empty dictionary to store the counts of each element element_counts={} # loop through the list for element in data: # add value to dictionary if it does not exist, or increase count if it does exist element_counts[element]=element_counts.get(element, 0) + 1 # find the element with the highest count max_count=0 max_element=None for element, count in element_counts.items(): if count>max_count: max_count=count max_element=element # print out the result print(f\\"The most common element is {max_element} with {max_count} occurences\\")"},{"prompt":"Generate a Python function to generate a sequence of numbers based on a given interval. Start: 2, End: 5","completion":"def generate_sequence(start, end): return list(range(start, end + 1))"},{"prompt":"Design a Python code to encrypt a given password argument with AES encryption.","completion":"from Crypto.Cipher import AES def encrypt_password(password): key = b'Sixteen byte key' cipher = AES.new(key,AES.MODE_EAX) nonce = cipher.nonce ciphertext, tag = cipher.encrypt_and_digest(password.encode('utf-8')) return [ciphertext, tag, nonce] if __name__ == '__main__': password = \\"abc123\\" print(encrypt_password(password))"},{"prompt":"The given code defines two functions. To use the first function, RowChanger, call it with four arguments: row (a string to search for in the file), textToSearch (a string to search for in the file), textToReplace (a string to replace textToSearch with), and fileToSearch (the file to search and replace in). To use the second function, ModSpec, call it with no arguments. This function will modify a spec file and compile it into an executable file.","completion":"def RowChanger(row,textToSearch,textToReplace,fileToSearch): a=1 import fileinput tempFile = open( fileToSearch, 'r+' ) for line in fileinput.input( fileToSearch ): if row in line : print('done yet') a=0 if a: if textToReplace==\\"0\\": textToReplace = textToSearch+\\"n\\"+row #fileToSearch = 'D:dummy1.txt' tempFile = open( fileToSearch, 'r+' ) for line in fileinput.input( fileToSearch ): if textToSearch in line : print('done now') tempFile.write(line.replace(textToSearch,textToReplace)) tempFile.close() #http://pythoncentral.io/pyinstaller-package-python-applications-windows-mac-linux/ def ModSpec(): print(\\"modddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\") import os print(os.path.basename(os.path.dirname(os.path.realpath(__file__)))) #nome=os.path.basename(os.path.dirname(os.path.realpath(__file__))) nome=\\"kivy_matplotlib\\" icon=1 onefile=0 executive=0 vuoimettereunimmagine=0 altrecartelle=0 versionfile=0 nomepy=nome+\\".py\\" nomespec=nome+\\".spec\\" nomecart=\\"\\"+nome+\\"\\" nomeIcon=\\"icon.ico\\" import platform #windowsonly=\\"\\" if StringCnf(platform.system(),\\"Windows\\") else windowsonly=\\" -m \\" from calcolatrice.misuras import StringCnf if StringCnf(platform.system(),\\"Windows\\"): windowsonly=\\" -m \\" else: windowsonly=\\"\\" if onefile: vuoifareunfile=\\" --onefile\\" else: vuoifareunfile=\\"\\" if vuoimettereunimmagine: nomeimmagine=\\"logo.png\\" else: nomeimmagine=\\"\\" if icon: iconStr=\\" --icon \\"+nomeIcon+\\" \\" else: iconStr=\\"\\" #compilatore a=\\"\\"#\\"\\"+os.getcwd() posizione=a+nomepy if versionfile: versionfile=\\" --version-file=version.txt \\" else: versionfile=\\"\\" pythonpath=\\"!python \\"#\\"C:UsersVon BraunDownloadsWinPython-64bit-3.5.2.3Qt5python-3.5.2.amd64Scriptspyinstaller.exe \\" #pythonpath=\\"path='\\"+a+\\"'\\" #pythonpath= \\"C:UsersVon BraunDownloadsWinPython-64bit-3.5.2.3Qt5python-3.5.2.amd64python.exe \\" pyinstallerpath=\\"PyInstaller \\" #pyinstallerpath=\\"C:UsersVon BraunDownloadsWinPython-64bit-3.5.2.3Qt5python-3.5.2.amd64Libsite-packagesPyInstallerbuildingmakespec.py \\" #http://stackoverflow.com/questions/8663046/how-to-install-a-python-package-from-within-ipython #%%!python -m PyInstaller --onefile --name nome --icon icon.ico kivy_matplotlib.py print(\\"nn ATTENDI.....POTRESTI DOVER ASPETTARE MOLTO TEMPOnn\\") creaspecfile=pythonpath+windowsonly+pyinstallerpath+posizione+vuoifareunfile+\\" --windowed \\"+\\" --name \\"+nome+iconStr+versionfile print(creaspecfile) print(\\"nn\\") if executive and 0: #from IPython import get_ipython #ipython = get_ipython() #ipython.magic(exec(creaspecfile)) #run(creaspecfile) #exec(input(\\"inserisci la frase di soprann\\")) import PyInstaller.__main__ specpath=\\"--specpath \\" +os.getcwd() #/opt/bk/spec distpath=\\"--distpath \\" +os.getcwd()+\\"dist\\" #/opt/bk/dist workpath=\\"--workpath \\" +os.getcwd()+\\"build\\" #/opt/bk/build print(specpath) print(distpath) print(workpath) #import PyInstaller.utils.cliutils.makespec #'C:UsersVon BraunGoogle Drivemat2pylabProgettoTesi3.86hello' #'C:UsersVon BraunDownloadsWinPython-64bit-3.5.2.3Qt5settings' #pathex=['C:UsersVon BraunDownloadsWinPython-64bit-3.5.2.3Qt5python-3.5.2.amd64Libsite-packagesPyInstaller'] #PyInstaller.__main__.run_makespec([nomepy,pathex]) PyInstaller.__main__.run([\\"-y\\", \\"-w\\",nomepy]) #exec(creaspecfile) if 1: import os.path esistelospec=os.path.isfile(nomespec) if esistelospec==0: from sys import exit exit() print(\\"ncreazione dello spec completata\\") #add this lines to the spec fil #http://stackoverflow.com/questions/17140886/how-to-search-and-replace-text-in-a-file-using-python print(\\"modifica dello spec in corsonn\\") import fileinput riga=\\"from kivy.deps import sdl2, glew\\" textToSearch = \\"# -*- mode: python -*-\\" NomeFile = nome+\\".spec\\" #fileToSearch = 'D:dummy1.txt' RowChanger(riga,textToSearch,\\"0\\",NomeFile) if altrecartelle: nuova=\\"Tree('..\\"+nomecart+\\"'),\\" textToSearch=\\"coll = COLLECT(exe,\\" textSub=textToSearch+nuova RowChanger(nuova,textToSearch,textSub,NomeFile) #if icona: # modIcon=\\" \\"+\\"icon='icon.ico',\\" # cerca=\\"exe = EXE(pyz,\\" # Modificatore(modIcon,cerca,\\"0\\",NomeFile) cerca2=\\"a.datas,\\" modText2=\\" \\"+\\"*[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins)],\\" RowChanger(modText2,cerca2,\\"0\\",NomeFile) print(\\"spec file completed\\") print(\\"modddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\\") #coll = COLLECT(exe, Tree('examples-pathdemotouchtracer'), #--onefile print(\\"nnsta per iniziare la compilazione, attendi fino a che non avrà finito, troverai il file exe nella cartella DISTn\\") compilaspecfile=pythonpath+windowsonly+pyinstallerpath+nomespec print(compilaspecfile) if executive: #ipython = get_ipython() #exec(input(\\"inserisci la frase di soprann\\")) import PyInstaller.__main__ PyInstaller.__main__.run([\\"-y\\", \\"-w\\",\\"kivy_matplotlib.py\\"]) #run(exec(creaspecfile)) print(\\"ncompilation complete\\") \\"\\"\\" if args.filenames[0].endswith('.spec'): spec_file = args.filenames[0] else: spec_file = run_makespec(**vars(args)) print(\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\") a=os.getcwd() print(a) #os.chdir(\\"C:UsersVon BraunGoogle Drivemat2pylabProgettoTesi4.00\\") print(spec_file) from compilatore import ModSpec ModSpec() os.chdir(a) print(\\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\") run_build(pyi_config, spec_file, **vars(args)) \\"\\"\\""},{"prompt":"Produce a logic in Python to truncate a given string after the given number of characters. String = Hello World, length = 4","completion":"def string_truncate(string, length): if length > len(string): return string else: return string[:length] + '...'"},{"prompt":"Complete the code to print Hello, World! using Python.","completion":"print(\\"Hello, World!\\")"},{"prompt":"Generate a python program to compute the nth fibonacci number in the sequence. 7","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) # compute the 7th fibonacci number print(fibonacci(7)) # Output: 13"},{"prompt":"Create a Python program to replace all occurance of a target string in a sentence with a replacement string. Sentence: “Hello world, this is a sample text. We needed to replace the word “world” with “Earth” Target: world Replacement: Earth","completion":"sentence = \\"Hello world, this is a sample text. We needed to replace the word “world' with “Earth”\\" target = \\"world\\" replacement = \\"Earth\\" def replace_string(sentence, target, replacement): return sentence.replace(target, replacement) updated_sentence = replace_string(sentence, target, replacement) print(updated_sentence) # Output: Hello Earth, this is a sample text. We needed to replace the word “world' with “Earth”"},{"prompt":"Specify a quick sort algorithm in Python to sort the given array of numbers. [9, 6, 5, 3, 4, 7, 4, 1]","completion":"def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] mid = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + mid + quick_sort(right) print(quick_sort([9, 6, 5, 3, 4, 7, 4, 1]))"},{"prompt":"Create a new Python list with only the odd numbers from the following list. [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"odd_numbers = [num for num in [1, 2, 3, 4, 5, 6, 7, 8, 9] if num % 2 != 0]"},{"prompt":"Edit the Python code to print the sum of two given numbers. a = 1 b = 2","completion":"a = 1 b = 2 sum = a + b print(sum) # 3"},{"prompt":"Write a Python program to combine two dictionaries into one. dict1 = {'a': 1, 'b': 2} dict2 = {'c': 3, 'd': 4}","completion":"dict1 = {'a': 1, 'b': 2} dict2 = {'c': 3, 'd': 4} # Create a new dictionary new_dict = {} # Add each key-value pair from dict1 for key, value in dict1.items(): new_dict[key] = value # Add each key-value pair from dict2 for key, value in dict2.items(): new_dict[key] = value print(new_dict) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}"},{"prompt":"Generate a Python code to classify the given text into three categories The input can be a sentence or a paragraph describing a product For example: This phone is great for streaming videos and taking selfies.","completion":"class ClassifyText: def __init__(self, text): self.text = text def classify(self): if \\"streaming videos\\" in self.text: return \\"video\\" elif \\"taking selfies\\" in self.text: return \\"selfie\\" else: return \\"other\\""},{"prompt":"What is the most efficient way to reverse a singly linked list in 7 lines of Python code?","completion":"# Definition for singly-linked list. class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseList(head): prev = None current = head while current is not None: nxt = current.next current.next = prev prev = current current = nxt head = prev return head"},{"prompt":"Create a loop in Python that executes 100 iterations.","completion":"for i in range(100): # do something"},{"prompt":"Create a function in Python that takes in two dictionaries. The output should be a dictionary that contains the two original dictionaries combined, with the intersection of keys merged. d1 = { 'key1': 'value1', 'key2': 'value2', 'key3': 'value3' } d2 = { 'key4': 'value4', 'key2': 'value5', 'key5': 'value6' }","completion":"def merge_dicts(d1, d2): result = d1.copy() for k, v in d2.items(): if k in result: result[k] = (result[k], v) else: result[k] = v return result merge_dicts(d1, d2) # Output: # {'key1': 'value1', # 'key2': ('value2', 'value5'), # 'key3': 'value3', # 'key4': 'value4', # 'key5': 'value6'}"},{"prompt":"Create a python program to calculate the Fibonacci number at a particular index","completion":"\\"\\"\\" Program to calculate the Fibonacci number at a particular index \\"\\"\\" def fibonacci_at_index(index): \\"\\"\\"Returns the Fibonacci number at a given index. Args: index (int): The index of the Fibonacci number to be returned Returns: int: The Fibonacci number at the given index \\"\\"\\" if index <= 0: return 0 if index == 1: return 1 return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2) if __name__ == '__main__': index = int(input()) print(fibonacci_at_index(index))"},{"prompt":"Develop a Python routine that takes a string, separates words and prints the first word. Hello, World!","completion":"def print_first_word(sentence): words = sentence.split(' ') print(words[0]) sentence = \\"Hello, World!\\" print_first_word(sentence)"},{"prompt":"Generate a python program to build a REST API to perform CRUD operations on a database table named 'products'.","completion":"import flask from flask import request, jsonify import sqlite3 app = flask.Flask(__name__) app.config[\\"DEBUG\\"] = True def dict_factory(cursor, row): d = {} for idx, col in enumerate(cursor.description): d[col[0]] = row[idx] return d @app.route('/', methods=['GET']) def home(): return '''<h1>Products REST API</h1> <p>A prototype API for products.</p>''' @app.route('/api/v1/resources/products/all', methods=['GET']) def api_all(): conn = sqlite3.connect('products.db') conn.row_factory = dict_factory cur = conn.cursor() all_products = cur.execute('SELECT * FROM products;').fetchall() return jsonify(all_products) @app.route('/api/v1/resources/products/create', methods=['POST']) def api_create(): data = request.get_json() name = data['name'] price = data['price'] description = data['description'] conn = sqlite3.connect('products.db') cur = conn.cursor() cur.execute('INSERT INTO products (name, price, description) VALUES (?, ?, ?)', (name, price, description)) conn.commit() return jsonify({'status': 'success'}) @app.route('/api/v1/resources/products/update/<int:id>', methods = ['PUT']) def api_update(id): data = request.get_json() name = data['name'] price = data['price'] description = data['description'] conn = sqlite3.connect('products.db') cur = conn.cursor() cur.execute('UPDATE products SET name=?, price=?, description=? where id=?', (name, price, description, id)) conn.commit() return jsonify({'status': 'success'}) @app.route('/api/v1/resources/products/delete/<int:id>', methods = ['DELETE']) def api_delete(id): conn = sqlite3.connect('products.db') cur = conn.cursor() cur.execute('DELETE FROM products WHERE id=?', (id, )) conn.commit() return jsonify({'status': 'success'}) app.run()"},{"prompt":"Build a Python model to predict if a customer will churn or not based on their past transaction data. Features: [age, recency, frequency, monetary_value, no_of_products] Target: binary (1 – will churn, 0 – will not churn)","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Load the data data = pd.read_csv('transaction_data.csv') # Separate input features (X) and target variable (y) X = data[['age', 'recency', 'frequency', 'monetary_value', 'no_of_products']] y = data['churn'] # Split the dataset into training and testing set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1) # Create a logistic regression model log_reg = LogisticRegression() # Train the model on the training set log_reg.fit(X_train, y_train) # Output the predictions on the test set y_pred = log_reg.predict(X_test) # Compute and print the accuracy score acc = accuracy_score(y_test,y_pred) print('Model accuracy score:', acc)"},{"prompt":"Create a function that takes two strings as its inputs and returns true if one of the two strings is a substring of the other. python, java","completion":"def is_substring(string1, string2): for i in range(len(string1)): for j in range(len(string2)): if string1[i] == string2[j]: return True return False result = is_substring(\\"python\\", \\"java\\") print(result)"},{"prompt":"Create a program in Python that reads in a tictactoe board of size n x n as an input and does intelligent moves to win the game. [['X', 'O', 'X'], ['X', ' ', 'O'], ['O', 'O', 'X']]","completion":"def play_game(board): board_size = len(board) winning_indices = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]] for indices in winning_indices: a = indices[0] b = indices[1] c = indices[2] x_count = 0 o_count = 0 for i in range(3): if board[a//board_size][a%board_size] == 'X': x_count += 1 elif board[a//board_size][a%board_size] == 'O': o_count += 1 if board[b//board_size][b%board_size] == 'X': x_count += 1 elif board[b//board_size][b%board_size] == 'O': o_count += 1 if board[c//board_size][c%board_size] == 'X': x_count += 1 elif board[c//board_size][c%board_size] == 'O': o_count += 1 if o_count == 2 and board[a//board_size][a%board_size] == '': board[a//board_size][a%board_size] = 'O' return board elif x_count == 2 and board[a//board_size][a%board_size] == '': board[a//board_size][a%board_size] = 'X' return board for x in range(board_size): for y in range(board_size): if board[x][y] == ' ': board[x][y] = 'O' return board return board"},{"prompt":"Write a Python program to query a SQL database and display the results in a table. SELECT * FROM User","completion":"import sqlite3 # create connection conn = sqlite3.connect('database.db') # establish cursor cur = conn.cursor() # execute the query cur.execute(\\"SELECT * FROM Users\\") # fetch the rows rows = cur.fetchall() # print table print('-'*50) print('|{:^8}|{:^20}|{:^20}|'.format('ID', 'User Name', 'Country')) print('-'*50) for row in rows: print('|{:^8}|{:^20}|{:^20}|'.format(row[0], row[1], row[2])) print('-'*50) # close the connection conn.close()"},{"prompt":"Create a Python program that reads in an unsorted array of integers and prints the array in sorted order. [3, 2, 5, 1, 7, 4]","completion":"def sort_array(arr): arr.sort() return arr arr = [3, 2, 5, 1, 7, 4] sorted_arr = sort_array(arr) print(sorted_arr) # [1, 2, 3, 4, 5, 7]"},{"prompt":"Create a Python script to sort a list of tuples by the second element in the tuple in ascending order. myList = [('Tom',7),('Harry',5),('Bob',8)]","completion":"def sortList(myList): # sort list by second element myList.sort(key = lambda x: x[1]) # printing the sorted list print (\\"The sorted list in ascending order is : \\") for i in range(len(myList)): print(myList[i]), myList = [('Tom',7),('Harry',5),('Bob',8)] sortList(myList)"},{"prompt":"Create a python code for linear search of an item in a list.","completion":"def linear_search(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1"},{"prompt":"Using regular expression in Python, write a program to extract any birthday dates from a text. This is a text where I am talking about my birthday 4th October 2020","completion":"import re text = 'This is a text where I am talking about my birthday 4th October 2020' pattern = r'd{1,2}s[A-Z][a-z]{2,8}sd{4}' match = re.search(pattern, text) if match: print(match.group())"},{"prompt":"Create a web API in Python Flask that returns the factorial of the provided number. 5","completion":"from flask import Flask, request app = Flask(__name__) @app.route('/factorial', methods=['POST']) def factorial(): num = request.json['num'] result = 1 for i in range(2, num + 1): result *= i return { 'factorial': result } if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Generate a correct Python program to compute the reverse of the given string string = hello","completion":"def reverse_string(string): output = \\"\\" for i in range(len(string)): output += string[len(string)-1-i] return output"},{"prompt":"Write a Python program to update the values in a nested dictionary based on a given value. my_dict = { 'list1': { 'list1_1': 10, 'list1_2': 20 }, 'list2': { 'list2_1': { 'list2_1_1': 30 } 'list2_2': 40 } } value = 25","completion":"my_dict = { 'list1': { 'list1_1': 25, 'list1_2': 25 }, 'list2': { 'list2_1': { 'list2_1_1': 25 } 'list2_2': 25 } } def update_values(dictionary, value): for key, value in dictionary.items(): if isinstance(value, dict): update_values(value, value) else: dictionary[key] = value update_values(my_dict, value)"},{"prompt":"Convert the string Hello World to lowercase using Python.","completion":"\\"hello world\\".lower()"},{"prompt":"Optimize a Python code to search for an item in a list efficiently using binary search. Not applicable","completion":"def binary_search(lst, target): left = 0 right = len(lst) - 1 while left <= right: mid = (right + left) // 2 if lst[mid] == target: return mid elif lst[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"prompt":"Visualize the number of sales a retail shop has made over the last 3 months in Python. Quantity of Sales in each Month","completion":"import matplotlib.pyplot as plt # Data for plotting month1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] sales1 = [10, 40, 20, 30, 45, 55, 36, 27, 28, 20] month2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] sales2 = [2, 32, 15, 12, 18, 50, 46, 34, 28, 25] month3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] sales3 = [20, 15, 18, 17, 33, 55, 65, 64, 45, 35] # Visualizing data fig, ax = plt.subplots(1, 1) ax.plot(month1, sales1, color='blue', label='Month 1') ax.plot(month2, sales2, color='red', label='Month 2') ax.plot(month3, sales3, color='green', label='Month 3') plt.title('Retail Shop Sales Data') plt.xlabel('Month') plt.ylabel('Quantity of Sales') plt.legend() plt.show()"},{"prompt":"Generate code to identify the type of data stored in a given variable in Python. val1 = [Hello, 10, 3.14]","completion":"# Identify the type of data stored in given variable def identify_data_type(val): for item in val: data_type = type(item).__name__ print(f\\"Data type of {item} is {data_type}\\") val1 = [\\"Hello\\", 10, 3.14] identify_data_type(val1) # Output # Data type of Hello is str # Data type of 10 is int # Data type of 3.14 is float"},{"prompt":"Develop a Python program to count the total characters from a given list of words. [Apple, Banana, Orange]","completion":"words = [\\"Apple\\", \\"Banana\\", \\"Orange\\"] total_chars = 0 for word in words: total_chars += len(word) print(total_chars) # Output: 15"},{"prompt":"Create a Python class named 'Song' with an attribute 'title', a constructor, and a method 'play' that prints the title of the song.","completion":"class Song: def __init__(self, title): self.title = title def play(self): print(self.title)"},{"prompt":"Design a data pipeline in Python that loads a CSV dataset and performs feature engineering. A CSV datase","completion":"import pandas as pd # Load the dataset dataset = pd.read_csv('dataset.csv') # Perform feature engineering dataset['feature_1'] = dataset['column_1'] + dataset['column_2'] dataset['feature_2'] = dataset['column_3'] / dataset['column_4'] dataset['feature_3'] = dataset['column_5'] - dataset['column_6'] # Save the transformed dataset dataset.to_csv('dataset_transformed.csv')"},{"prompt":"Optimize this list sorting algorithm in Python. def sort_list(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i]","completion":"def sort_list(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j # Check if the minimum index is found to be at i-th position, then no need to swap if min_idx != i: arr[i], arr[min_idx] = arr[min_idx], arr[i]"},{"prompt":"Construct a Python script to filter the elements of a given list which are divisible by 3. [1,2,3,4,5,6,7,8,9]","completion":"my_list = [1,2,3,4,5,6,7,8,9] filtered_list = list(filter(lambda x: x % 3 == 0, my_list)) print(filtered_list)"},{"prompt":"Generate a piece of code, using Python, which would generate a random password string that contains only lowercase, uppercase, numerical and special characters.","completion":"import string import random def generate_password(): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation return ''.join(random.choice(chars) for _ in range(8)) print(generate_password())"},{"prompt":"Write a Python program to convert a given solution to a different programming language. Solution: def is_palindrome(word): return word == word[::1] Target language: Jav","completion":"def convert_to_java( solution): target_language = \\"Java\\" java_solution = \\"\\" if target_language == \\"Java\\": java_solution += \\"public static boolean is_palindrome(String word) { n\\" java_solution += \\" return word.equals(new StringBuilder(word).reverse().toString()); n\\" java_solution += \\"}\\" return java_solution"},{"prompt":"mplement an algorithm in Python to classify a given dataset into different target classes. dataset.csv","completion":"import pandas as pd from sklearn.neighbors import KNeighborsClassifier import numpy as np # Load dataset data = pd.read_csv('dataset.csv') X = data.iloc[:, :-1] y = data.iloc[:, -1] # Create and fit classifier classifier = KNeighborsClassifier(n_neighbors=5) classifier.fit(X, y) # Make predictions predictions = classifier.predict(X) print(np.mean(predictions == y))"},{"prompt":"Create a Python program to extract data from webpages using the BeautifulSoup library. Not applicable","completion":"from bs4 import BeautifulSoup import requests # Get the page url = 'http://example.com' page = requests.get(url) # Use BeautifulSoup for parsing soup = BeautifulSoup(page.content, 'html.parser') # Get the data data = soup.find_all('div', class_='datacontainer') # Print the data for item in data: print(item.text)"},{"prompt":"Write a Python program to search through a list of strings and find the longest common prefix string. [ panel, panda, paint, panther ]","completion":"def longest_common_prefix(words): # Sort the strings in the list # so that the first string is the shortest words.sort(key=len) # Initialize a prefix to empty string prefix = \\"\\" # Loop until length of prefix is less # than the length of the shortest string while len(prefix) < len(words[0]): # Set the current character to # the character at i-th index of # the shortest string current = words[0][len(prefix)] # Check if the character is present # in the substring of all other strings for i in range(1, len(words)): # Loop through all the words # starting from the second string if words[i][len(prefix)] != current: # Return the prefix if the character # is not present in the rest of the strings return prefix # Add the current character to the prefix prefix += current # Return the longest prefix return prefix"},{"prompt":"Develop a Python program to flatten a 2D list. list_2d = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def flatten_2d_list(list_2d): # Initialize an empty list flat_list = [] # Loop through the list for row in list_2d: for item in row: # Add the item to the flat list flat_list.append(item) # Return the flattened list return flat_list"},{"prompt":"Given an array of integers, write a Python program to classify each number as even or odd. [10, 27, 32, 11]","completion":"def classify_number(arr): result = [] for num in arr: if num % 2 == 0: result.append(\\"even\\") else: result.append(\\"odd\\") return result print(classify_number([10, 27, 32, 11]))"},{"prompt":"Create a python script to generate a tree representation for a given array of numbers. [3, 5, 1, 8, 2]","completion":"class TreeNode: def __init__(self, data): self.data = data self.left = None self.right = None def generate_tree(arr): root = TreeNode(arr[0]) for i in range(1, len(arr)): curr = root while True: if arr[i] < curr.data: if curr.left is None: curr.left = TreeNode(arr[i]) break else: curr = curr.left elif arr[i] > curr.data: if curr.right is None: curr.right = TreeNode(arr[i]) break else: curr = curr.right return root result = generate_tree([-3, 5, 1, 8, 2])"},{"prompt":"Write a code for a threadsafe timer in Python.","completion":"import threading import time class ThreadSafeTimer(object): def __init__(self, interval, function, args=[], kwargs={}): self.interval = interval self.function = function self.args = args self.kwargs = kwargs self.timer = None def start(self): self.timer = threading.Timer(self.interval, self.function, *self.args, **self.kwargs) self.timer.daemon = True self.timer.start() def stop(self): self.timer.cancel() self.timer = None if __name__ == '__main__': def callback(): print('Timer called') t = ThreadSafeTimer(2.0, callback) t.start()"},{"prompt":"Use Python to generate a random password that is 20 characters long and contains symbols, numbers, and letters. Not applicable","completion":"import string import random length = 20 password = '' for c in range(length): password += random.choice(string.ascii_letters + string.digits + string.punctuation) print(password)"},{"prompt":"Create a gradient descent algorithm in Python that minimizes a cost function. Not applicable","completion":"def gradient_descent(cost_function, x_values, learning_rate): # Set the initial values for parameters cost = cost_function(x_values) x_t = x_values # Calculate gradients grad = cost_function.gradient(x_t) # Update the parameters while grad.norm() > 0.00001: x_t = x_t - learning_rate * grad cost = cost_function(x_t) grad = cost_function.gradient(x_t) return x_t"},{"prompt":"Debug the given python program to output b2 instead of a3. a1 = 6 a2 = 3 b1 = a1 // a2 a3 = b1 * a2","completion":"a1 = 6 a2 = 3 b1 = a1 // a2 b2 = a1 % a2"},{"prompt":"Create a binary tree in Python with the given data. [ 1, 2, 3, 4, 5, 7, 8]","completion":"class Node(object): def __init__(self, data): self.data = data self.left = None self.right = None class BinaryTree(object): def __init__(self): self.root = None def insert(self, data): if self.root == None: self.root = Node(data) else: self._insert(data, self.root) def _insert(self, data, node): if data < node.data: if node.left == None: node.left = Node(data) else: self._insert(data, node.left) else: if node.right == None: node.right = Node(data) else: self._insert(data, node.right) # Create binary tree tree = BinaryTree() data_list = [1, 2, 3, 4, 5, 7, 8] for data in data_list: tree.insert(data)"},{"prompt":"Write a Python program that display news headlines from a news site in an interactive way. The program should ask the user for the news categories they are interested in and display the news headlines related to these categories in separate feeds. Not applicable","completion":"import requests # Ask user for the categories they are interested in categories = input('What categories of news would you like to see? ').split(',') # Create an empty dictionary of news headlines headlines = {} for category in categories: # Request news data from a news website news_response = requests.get(f'https://example.com/data/{category}') headlines[category] = news_response.json() # Print out the news headlines for category, news_data in headlines.items(): print(f'n{category.title()} Newsn------------------') for headline in news_data: print(headline['title'])"},{"prompt":"Write a python script to detect duplicate words in a sentence. Sentence: She was driving, driving down the road.","completion":"sentence = 'She was driving, driving down the road.' list_words = sentence.split(\\" \\") duplicates = {i for i, x in enumerate(list_words) if list_words.count(x) > 1} print(\\"Duplicate words in the sentence are: \\", end=\\"\\") for duplicate in duplicates: print(list_words[duplicate], end=\\" \\")"},{"prompt":"Create a Python program to solve a Sudoku puzzle. A puzzle of the form: 8 0 0 0 0 0 0 0 0 0 0 3 6 0 0 0 0 0 0 7 0 0 9 0 2 0 0 0 5 0 0 0 7 0 0 0 0 0 0 0 4 5 7 0 0 0 0 0 1 0 0 0 3 0 0 0 1 0 0 0 0 6 8 0 0 8 5 0 0 0 1 0 0 9 0 0 0 0 4 0 0","completion":"import numpy as np #solve a sudoku puzzle def solve(puzzle): #create a puzzle matrix puzzle_matrix=np.array(puzzle).reshape(9,9) #check if the empty cell is in the row def row(row_index,num): return num in puzzle_matrix[row_index] #check if the empty cell is in the column def col(col_index,num): return num in puzzle_matrix[:,col_index] #check if the empty cell is in the 3x3 grid def grid(row_index,col_index,num): row_start,row_end=row_index//3*3,row_index//3*3+3 col_start,col_end=col_index//3*3,col_index//3*3+3 return num in puzzle_matrix[row_start:row_end,col_start:col_end] #find the empty cell for row_index in range(9): for col_index in range(9): if puzzle_matrix[row_index][col_index]==0: #check numbers from 1-9 for num in range(1,10): if not row(row_index,num) and not col(col_index,num) and not grid(row_index,col_index,num): puzzle_matrix[row_index][col_index]=num solve(puzzle_matrix) puzzle_matrix[row_index][col_index]=0 #backtrack if no valid solution is found return print(puzzle_matrix) #input a sudoku puzzle puzzle = [[8,0,0,0,0,0,0,0,0], [0,0,3,6,0,0,0,0,0], [0,7,0,0,9,0,2,0,0], [0,5,0,0,0,7,0,0,0], [0,0,0,0,4,5,7,0,0], [0,0,0,1,0,0,0,3,0], [0,0,1,0,0,0,0,6,8], [0,0,8,5,0,0,0,1,0], [0,9,0,0,0,0,4,0,0]] solve(puzzle)"},{"prompt":"Create an application in Python that performs sentiment analysis on a sentence. The application should take in a sentence and return a score representing the sentiment of the sentence. Not applicable","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_score(sentence): nltk.download('vader_lexicon') analyser = SentimentIntensityAnalyzer() score = analyser.polarity_scores(sentence) return score sentiment_score('This is an example sentence.')"},{"prompt":"Make a class in Python for a car with these attributes: color, year, make, model.","completion":"class Car: def __init__(self, color, year, make, model): self.color = color self.year = year self.make = make self.model = model"},{"prompt":"Develop a Python script to count the number of strings where the string length is 2 or more and the first and last characters are the same. ['abc', 'xyz', 'aba', '1221']","completion":"# Define a function to count the strings def count_strings(lst): count = 0 # Iterate through the list for s in lst: # Check if string length is greater than 2 and first and last character is same if len(s) >= 2 and s[0] == s[-1]: count += 1 return count # Driver Code lst = ['abc', 'xyz', 'aba', '1221'] print(count_strings(lst))"},{"prompt":"Create a python module that reads the sentiment of a given text. Nothing","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_score(text): sentiment_scores = SentimentIntensityAnalyzer().polarity_scores(text) return sentiment_scores[\\"compound\\"]"},{"prompt":"Design a reinforcement learning agent in Python that can play tictactoe and beat humans. Not applicable","completion":"import random import numpy as np #Create the board board = np.zeros((3,3)) #Rewards #To avoid tie scores 1 reward for winning -1 reward for loosing #Adaptive learning rate, in this case we will use greedy q-learning epsilon = 0.2 #Discount Factor gamma = 0.9 #Reward reward = 0 #Backtracking the best move def bestMove(board): bestScore = 0 for i in range(3): for j in range(3): if board[i][j] == 0: board[i][j] = 1 score = minimax(board, False) board[i][j] = 0 if score > bestScore: bestScore = score move = [i, j] return move #Game Logic def minimax(board, isMaximizing): #Check if it is a winning board if checkWin(board): return reward #Play the game if isMaximizing: bestScore = -float(\\"inf\\") for i in range(3): for j in range(3): if board[i][j] == 0: board[i][j] = 1 score = minimax(board, False) board[i][j] = 0 bestScore = max(score, bestScore) return bestScore #Minimizing else: bestScore = float(\\"inf\\") for i in range(3): for j in range(3): if board[i][j] == 0: board[i][j] = -1 score = minimax(board, True) board[i][j] = 0 bestScore = min(score, bestScore) return bestScore #Check win def checkWin(board): #Horizontal for i in range(3): if board[i][0] == board[i][1] and board[i][1] == board[i][2] and board[i][0] != 0: return board[i][0] #Vertical for i in range(3): if board[0][i] == board[1][i] and board[1][i] == board[2][i] and board[0][i] != 0: return board[0][i] #Diagonal Top-Left to Bottom-Right if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[0][0] != 0: return board[0][0] #Diagonal Top-Right to Bottom-Left if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[0][2] != 0: return board[0][2] return 0"},{"prompt":"Write a Python code snippet to obtain the average of the elements in a given list. list = [2, 3, 5, 4]","completion":"def average(list): total = 0 for num in list: total += num return total / len(list) print(average([2, 3, 5, 4]))"},{"prompt":"Understand the meaning of the given data and create a classification model in Python. x1 = [1 ,2 ,3, 4, 5] y = [1, 2, 1, 2, 1]","completion":"# Import necessary library from sklearn import svm # Create a feature and label array X = [[1], [2], [3], [4], [5]] Y = [1,2,1,2,1] # Set up the svm model clf = svm.SVC(kernel='linear') # Train the model clf.fit(X, Y) # Test the model predictions = clf.predict([[3]]) print(predictions)"},{"prompt":"Compile a list of popular Python libraries and their uses.","completion":"1. Scikit-learn: Machine learning library for predictive analysis. 2. Numpy: Library for scientific computing with large multi-dimensional arrays and matrices. 3. Pandas: Library for data manipulation and analysis. 4. Matplotlib: 2D plotting library. 5. TensorFlow: Library for building machine learning applications. 6. Django: Web framework for building web applications. 7. Keras: Library for deep learning applications. 8. NLTK: Natural language processing library. 9. Scipy: Library for scientific computing with linear algebra, integration, optimization, and statistics methods. 10. Flask: Micro web framework for building web applications."},{"prompt":"Create a Python program to check if given inputs are anagrams. Input 1: 'listen' Input 2: 'silent'","completion":"def is_anagram(input1, input2): # turn the strings into sets s1 = set(input1) s2 = set(input2) # Compare the size of the sets if len(s1) != len(s2): return False # Iterate through the sets and compare the contents for element in s1: if element not in s2: return False # If all the conditions pass, then the strings are anagrams return True # Sample inputs input1 = 'listen' input2 = 'silent' # Check if the strings are anagrams if is_anagram(input1, input2): print(\\"{} and {} are anagrams.\\".format(input1, input2)) else: print(\\"{} and {} are not anagrams.\\".format(input1, input2)) # Output # listen and silent are anagrams."},{"prompt":"Write a Python script to input a string and display it in reverse. Hello world!","completion":"!dlrow olleH"},{"prompt":"Create a Python script that prints all the combinations of a string. String: ABC","completion":"def combinations(s): # Get the length of the string n = len(s) # A loop to pick starting point of substring for i in range(n): # Pick ending point of substring for j in range(i,n): # Print the substring for k in range(i,j+1): print(s[k], end=\\"\\") print() combinations(\\"ABC\\")"},{"prompt":"Write a Python program to convert a given time in 12 hour format to 24 hour format. 12:05 PM","completion":"def convert_to_24(time): if time[-2:] == \\"PM\\" and time[:2] != \\"12\\": return str(int(time[:2])+12)+time[2:-2] elif time[-2:] == \\"AM\\" and time[:2] == \\"12\\": return \\"00\\"+time[2:-2] else: return time[:-2]"},{"prompt":"This code defines a Python class for creating and manipulating ipkg packages. To use it, create a Package object, set its attributes (such as package name, version, architecture, maintainer, dependencies, and description), and then call the write_package() method to generate the ipkg file. The Packages class is currently unimplemented.","completion":"#!/usr/bin/env python # Copyright (C) 2001 Alexander S. Guy <a7r@andern.org> # Andern Research Labs # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2, or (at your option) # any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 59 Temple Place - Suite 330, # Boston, MA 02111-1307, USA. */ # # Copyright 2001, Russell Nelson <ipkg.py@russnelson.com> # Added reading in of packages. # Added missing package information fields. # Changed render_control() to __repr__(). # # Current Issues: # The API doesn't validate package information fields. It should be # throwing exceptions in the right places. # Executions of tar could silently fail. # Executions of tar *do* fail, and loudly, because you have to specify a full filename, # and tar complains if any files are missing, and the ipkg spec doesn't require # people to say \\"./control.tar.gz\\" or \\"./control\\" when they package files. # It would be much better to require ./control or disallow ./control (either) # rather than letting people pick. Some freedoms aren't worth their cost. import tempfile import os import sys import glob import md5 import re import string import commands from stat import ST_SIZE class Package: \\"\\"\\"A class for creating objects to manipulate (e.g. create) ipkg packages.\\"\\"\\" def __init__(self, fn=None): self.package = None self.version = None self.architecture = None self.maintainer = None self.source = None self.description = None self.depends = None self.provides = None self.replaces = None self.conflicts = None self.recommends = None self.suggests = None self.section = None self.filename_header = None self.file_list = [] self.md5 = None self.size = None self.installed_size = None self.filename = None self.isdeb = 0 if fn: # see if it is deb format f = open(fn, \\"r\\") magic = f.read(4) f.close() if (magic == \\"!<ar\\"): self.isdeb = 1 # compute the MD5. f = open(fn, \\"r\\") sum = md5.new() while 1: data = f.read(1024) if not data: break sum.update(data) f.close() if sys.version[:1] > '2': # when using Python 2.0 or newer self.md5 = sum.hexdigest() else: self.md5 = string.join(map((lambda x:\\"%02x\\" % ord(x)),sum.digest()),'') stat = os.stat(fn) self.size = stat[ST_SIZE] self.filename = os.path.basename(fn) sys.stderr.write(\\" extracting control.tar.gz from %sn\\"% (fn,)) if self.isdeb: control = os.popen(\\"ar p \\"+fn+\\" control.tar.gz | tar xfzO - --wildcards '*control'\\",\\"r\\") else: control = os.popen(\\"tar xfzO \\"+fn+\\" --wildcards '*control.tar.gz' | tar xfzO - --wildcards '*control'\\",\\"r\\") line = control.readline() while 1: if not line: break line = string.rstrip(line) lineparts = re.match(r'([w-]*?):s*(.*)', line) if lineparts: name = string.lower(lineparts.group(1)) value = lineparts.group(2) while 1: line = control.readline() if not line: break if line[0] != ' ': break line = string.rstrip(line) value = value + 'n' + line # don't allow package to override its own filename if name == \\"filename\\": self.filename_header = value else: if self.__dict__.has_key(name): self.__dict__[name] = value else: line = control.readline() control.close() if self.isdeb: data = os.popen(\\"ar p \\"+fn+\\" data.tar.gz | tar tfz -\\",\\"r\\") else: data = os.popen(\\"tar xfzO \\"+fn+\\" --wildcards '*data.tar.gz' | tar tfz -\\",\\"r\\") while 1: line = data.readline() if not line: break self.file_list.append(string.rstrip(line)) data.close() self.scratch_dir = None self.file_dir = None self.meta_dir = None def read_control(self, control): import os line = control.readline() while 1: if not line: break line = string.rstrip(line) lineparts = re.match(r'([w-]*?):s*(.*)', line) if lineparts: name = string.lower(lineparts.group(1)) value = lineparts.group(2) while 1: line = control.readline() if not line: break if line[0] != ' ': break value = value + 'n' + line if name == 'size': self.size = int(value) elif self.__dict__.has_key(name): self.__dict__[name] = value if line[0] == 'n': return # consumes one blank line at end of package descriptoin else: line = control.readline() pass return def _setup_scratch_area(self): self.scratch_dir = \\"%s/%sipkg\\" % (tempfile.gettempdir(), tempfile.gettempprefix()) self.file_dir = \\"%s/files\\" % (self.scratch_dir) self.meta_dir = \\"%s/meta\\" % (self.scratch_dir) os.mkdir(self.scratch_dir) os.mkdir(self.file_dir) os.mkdir(self.meta_dir) def set_package(self, package): self.package = package def get_package(self): return self.package def set_version(self, version): self.version = version def get_version(self): return self.version def set_architecture(self, architecture): self.architecture = architecture def get_architecture(self): return self.architecture def set_maintainer(self, maintainer): self.maintainer = maintainer def get_maintainer(self): return self.maintainer def set_source(self, source): self.source = source def get_source(self): return self.source def set_description(self, description): self.description = description def get_description(self): return self.description def set_depends(self, depends): self.depends = depends def get_depends(self, depends): return self.depends def set_provides(self, provides): self.provides = provides def get_provides(self, provides): return self.provides def set_replaces(self, replaces): self.replaces = replaces def get_replaces(self, replaces): return self.replaces def set_conflicts(self, conflicts): self.conflicts = conflicts def get_conflicts(self, conflicts): return self.conflicts def set_suggests(self, suggests): self.suggests = suggests def get_suggests(self, suggests): return self.suggests def set_section(self, section): self.section = section def get_section(self, section): return self.section def get_file_list(self): return self.file_list def write_package(self, dirname): buf = self.render_control() file = open(\\"%s/control\\" % self.meta_dir, 'w') file.write(buf) self._setup_scratch_area() cmd = \\"cd %s ; tar cvfz %s/control.tar.gz control\\" % (self.meta_dir, self.scratch_dir) cmd_out, cmd_in, cmd_err = os.popen3(cmd) while cmd_err.readline() != \\"\\": pass cmd_out.close() cmd_in.close() cmd_err.close() bits = \\"control.tar.gz\\" if self.file_list: cmd = \\"cd %s ; tar cvfz %s/data.tar.gz\\" % (self.file_dir, self.scratch_dir) cmd_out, cmd_in, cmd_err = os.popen3(cmd) while cmd_err.readline() != \\"\\": pass cmd_out.close() cmd_in.close() cmd_err.close() bits = bits + \\" data.tar.gz\\" file = \\"%s_%s_%s.ipk\\" % (self.package, self.version, self.architecture) cmd = \\"cd %s ; tar cvfz %s/%s %s\\" % (self.scratch_dir, dirname, file, bits) cmd_out, cmd_in, cmd_err = os.popen3(cmd) while cmd_err.readline() != \\"\\": pass cmd_out.close() cmd_in.close() cmd_err.close() def __repr__(self): out = \\"\\" # XXX - Some checks need to be made, and some exceptions # need to be thrown. -- a7r if self.package: out = out + \\"Package: %sn\\" % (self.package) if self.version: out = out + \\"Version: %sn\\" % (self.version) if self.depends: out = out + \\"Depends: %sn\\" % (self.depends) if self.provides: out = out + \\"Provides: %sn\\" % (self.provides) if self.replaces: out = out + \\"Replaces: %sn\\" % (self.replaces) if self.conflicts: out = out + \\"Conflicts: %sn\\" % (self.conflicts) if self.suggests: out = out + \\"Suggests: %sn\\" % (self.suggests) if self.recommends: out = out + \\"Recommends: %sn\\" % (self.recommends) if self.section: out = out + \\"Section: %sn\\" % (self.section) if self.architecture: out = out + \\"Architecture: %sn\\" % (self.architecture) if self.maintainer: out = out + \\"Maintainer: %sn\\" % (self.maintainer) if self.md5: out = out + \\"MD5Sum: %sn\\" % (self.md5) if self.size: out = out + \\"Size: %dn\\" % int(self.size) if self.installed_size: out = out + \\"InstalledSize: %dn\\" % int(self.installed_size) if self.filename: out = out + \\"Filename: %sn\\" % (self.filename) if self.source: out = out + \\"Source: %sn\\" % (self.source) if self.description: out = out + \\"Description: %sn\\" % (self.description) out = out + \\"n\\" return out def __del__(self): # XXX - Why is the \`os' module being yanked out before Package objects # are being destroyed? -- a7r pass class Packages: \\"\\"\\"A currently unimplemented wrapper around the ipkg utility.\\"\\"\\" def __init__(self): self.packages = {} return def add_package(self, pkg): package = pkg.package arch = pkg.architecture name = (\\"%s:%s\\" % (package, arch)) if (not self.packages.has_key(name)): self.packages[name] = pkg (s, outtext) = commands.getstatusoutput(\\"ipkg-compare-versions %s '>' %s\\" % (pkg.version, self.packages[name].version)) if (s == 0): self.packages[name] = pkg return 0 else: return 1 def read_packages_file(self, fn): f = open(fn, \\"r\\") while 1: pkg = Package() pkg.read_control(f) if pkg.get_package(): self.add_package(pkg) else: break f.close() return def write_packages_file(self, fn): f = open(fn, \\"w\\") names = self.packages.keys() names.sort() for name in names: f.write(self.packages[name].__repr__()) return def keys(self): return self.packages.keys() def __getitem__(self, key): return self.packages[key] if __name__ == \\"__main__\\": package = Package() package.set_package(\\"FooBar\\") package.set_version(\\"0.1-fam1\\") package.set_architecture(\\"arm\\") package.set_maintainer(\\"Testing <testing@testing.testing>\\") package.set_depends(\\"libc\\") package.set_description(\\"A test of the APIs.\\") print \\"<\\" sys.stdout.write(package) print \\">\\" package.write_package(\\"/tmp\\")"},{"prompt":"Define and create a class in Python to represent a student. The student should have properties for first name, last name, student ID and a GPA. Not applicable","completion":"class Student: def __init__(self, first_name, last_name, student_id, gpa): self.first_name = first_name self.last_name = last_name self.student_id = student_id self.gpa = gpa student = Student('John', 'Doe', '12345', 3.5)"},{"prompt":"Use NLP to build a sentiment analysis pipeline in Python. The pipeline should take in text as input, and output a sentiment score as either positive or negative. Not applicable","completion":"import pandas as pd import nltk nltk.download('punkt') nltk.download('averaged_perceptron_tagger') nltk.download('stopwords') from nltk import word_tokenize from nltk.sentiment.vader import SentimentIntensityAnalyzer # Load data df = pd.read_csv('data.csv') # Extract text column text = df['text'] # Preprocess text tokenized_text = [word_tokenize(text) for text in text] stop_words = nltk.corpus.stopwords.words('english') tokenized_text = [word for word in tokenzed_text if word not in stop_words] #Feature extraction pos_tokens = [word for (word, tag) in nltk.pos_tag(tokenized_text) if tag.startswith('N') or tag.startswith('J')] #Sentiment analysis sid = SentimentIntensityAnalyzer() scores = [sid.polarity_scores(pos_token) for pos_token in pos_tokens] df['sentiment'] = [score['compound'] for score in scores] #Output print(df)"},{"prompt":"Create a program to Reverse Engineer a given binary tree. a / b c / / d e f g","completion":"# Python3 Program to print Postorder traversal # from given Inorder and Preorder traversals # Function to print postorder traversal def printPostOrder(inOrder, preOrder, n): # The first element in preOrder[] # is always root, search it in # inOrder[] to find left and # right subtrees root = preOrder[0]; # Iterate through inOrder[], # find the index of root rootIndex = 0 for i in range(0, n): if (inOrder[i] == root): rootIndex = i break # Use index in Inorder to divide # inOrder array in two parts # Left Subtree and Right Subtree if (rootIndex != 0): # Recur for left subtree printPostOrder(inOrder[0 : rootIndex], preOrder[1 : rootIndex + 1], rootIndex) # Recur for right subtree if (rootIndex != n - 1): printPostOrder(inOrder[rootIndex + 1 : n], preOrder[rootIndex + 1 : n], n - rootIndex - 1) print( root, end = \\" \\") # Driver code if __name__ == '__main__': inOrder = ['d','b','e','a','f','c','g'] preOrder = ['a','b','d','e','c','f','g'] n = len(inOrder) # Print PostOrder Traversal printPostOrder(inOrder, preOrder, n) # Output: # d e b f g c a"},{"prompt":"Create a Python function that takes in a string of text and returns it with all its vowels capitalized. amazing","completion":"def capitalize_vowels(s): # Converting string to list. s_list = list(s) # Defining a set of vowels vowels = {'a', 'e', 'i', 'o', 'u'} # Iterate over list and capitalize vowels for i in range(0, len(s_list)): if s_list[i] in vowels: s_list[i] = s_list[i].upper() # Joining list to string return ''.join(s_list) text = 'amazing' capitalized = capitalize_vowels(text) print(capitalized) # Output: \\"AmAzIng\\""},{"prompt":"Create a prototype of a bubble sort function in Python.","completion":"def bubbleSort(arr): for i in range(len(arr)): for j in range(0, len(arr)-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"prompt":"w can you improve the following python function to make it run more quickly? def find_target(numbers, target): for number in numbers: if number == target: return True return False","completion":"def find_target(numbers, target): \\"\\"\\"This function returns True if the target is present in the given list of numbers.\\"\\"\\" # Use set to improve the lookup performance num_set = set(numbers) if target in num_set: return True return False"},{"prompt":"This code is a Python class that processes OptionROM generation from INF statement. To use this code, import the required modules and create an instance of the OptRomInfStatement class. Then call the GenFfs() method to generate the FFS file. The __GetOptRomParams() method can be used to parse the INF file and get the OptionROM related parameters. The __GenSimpleFileSection__() and __GenComplexFileSection__() methods can be used to generate the section files.","completion":"@file # process OptionROM generation from INF statement # # Copyright (c) 2007, Intel Corporation. All rights reserved.<BR> # # This program and the accompanying materials # are licensed and made available under the terms and conditions of the BSD License # which accompanies this distribution. The full text of the license may be found at # http://opensource.org/licenses/bsd-license.php # # THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED. # # Import Modules # import RuleSimpleFile import RuleComplexFile import Section import OptionRom import Common.GlobalData as GlobalData from Common.DataType import * from Common.String import * from FfsInfStatement import FfsInfStatement from GenFdsGlobalVariable import GenFdsGlobalVariable # # class OptRomInfStatement (FfsInfStatement): The constructor # # @param self The object pointer # def __init__(self): FfsInfStatement.__init__(self) self.OverrideAttribs = None __GetOptRomParams() method # # Parse inf file to get option ROM related parameters # # @param self The object pointer # def __GetOptRomParams(self): if self.OverrideAttribs == None: self.OverrideAttribs = OptionRom.OverrideAttribs() if self.OverrideAttribs.NeedCompress == None: self.OverrideAttribs.NeedCompress = self.OptRomDefs.get ('PCI_COMPRESS') if self.OverrideAttribs.NeedCompress is not None: if self.OverrideAttribs.NeedCompress.upper() not in ('TRUE', 'FALSE'): GenFdsGlobalVariable.ErrorLogger( \\"Expected TRUE/FALSE for PCI_COMPRESS: %s\\" %self.InfFileName) self.OverrideAttribs.NeedCompress = self.OverrideAttribs.NeedCompress.upper() == 'TRUE' if self.OverrideAttribs.PciVendorId == None: self.OverrideAttribs.PciVendorId = self.OptRomDefs.get ('PCI_VENDOR_ID') if self.OverrideAttribs.PciClassCode == None: self.OverrideAttribs.PciClassCode = self.OptRomDefs.get ('PCI_CLASS_CODE') if self.OverrideAttribs.PciDeviceId == None: self.OverrideAttribs.PciDeviceId = self.OptRomDefs.get ('PCI_DEVICE_ID') if self.OverrideAttribs.PciRevision == None: self.OverrideAttribs.PciRevision = self.OptRomDefs.get ('PCI_REVISION') # InfObj = GenFdsGlobalVariable.WorkSpace.BuildObject[self.PathClassObj, self.CurrentArch] # RecordList = InfObj._RawData[MODEL_META_DATA_HEADER, InfObj._Arch, InfObj._Platform] # for Record in RecordList: # Record = ReplaceMacros(Record, GlobalData.gEdkGlobal, False) # Name = Record[0] GenFfs() method # # Generate FFS # # @param self The object pointer # @retval string Generated .efi file name # def GenFfs(self): # # Parse Inf file get Module related information # self.__InfParse__() self.__GetOptRomParams() # # Get the rule of how to generate Ffs file # Rule = self.__GetRule__() GenFdsGlobalVariable.VerboseLogger( \\"Packing binaries from inf file : %s\\" %self.InfFileName) #FileType = Ffs.Ffs.ModuleTypeToFileType[Rule.ModuleType] # # For the rule only has simpleFile # if isinstance (Rule, RuleSimpleFile.RuleSimpleFile) : EfiOutputList = self.__GenSimpleFileSection__(Rule) return EfiOutputList # # For Rule has ComplexFile # elif isinstance(Rule, RuleComplexFile.RuleComplexFile): EfiOutputList = self.__GenComplexFileSection__(Rule) return EfiOutputList __GenSimpleFileSection__() method # # Get .efi files according to simple rule. # # @param self The object pointer # @param Rule The rule object used to generate section # @retval string File name of the generated section file # def __GenSimpleFileSection__(self, Rule): # # Prepare the parameter of GenSection # OutputFileList = [] if Rule.FileName != None: GenSecInputFile = self.__ExtendMacro__(Rule.FileName) OutputFileList.append(GenSecInputFile) else: OutputFileList, IsSect = Section.Section.GetFileList(self, '', Rule.FileExtension) return OutputFileList __GenComplexFileSection__() method # # Get .efi by sections in complex Rule # # @param self The object pointer # @param Rule The rule object used to generate section # @retval string File name of the generated section file # def __GenComplexFileSection__(self, Rule): OutputFileList = [] for Sect in Rule.SectionList: if Sect.SectionType == 'PE32': if Sect.FileName != None: GenSecInputFile = self.__ExtendMacro__(Sect.FileName) OutputFileList.append(GenSecInputFile) else: FileList, IsSect = Section.Section.GetFileList(self, '', Sect.FileExtension) OutputFileList.extend(FileList) return OutputFileList"},{"prompt":"Create a Python 3 function that takes a list of integers as an input and output the maximum sum of an increasing subsequence of the list. [10, 12, 4, 6, 5, 3]","completion":"def max_inc_subseq_sum(arr): n = len(arr) max_sum = [0]*n for i in range(n): max_sum[i] = arr[i] for i in range(1, n): for j in range(i): if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]: max_sum[i] = max_sum[j] + arr[i] return max(max_sum) print(max_inc_subseq_sum([10, 12, 4, 6, 5, 3])) # Output: 22 (4 + 6 + 12)"},{"prompt":"Debug the following python code snippet so that it returns a list of even numbers from the given list of numbers. ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"ls = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] result = [] for num in ls: if num % 2 == 0: result.append(num) print(result) # prints [2, 4, 6, 8, 10]"},{"prompt":"Explain the concept of recursion with an example in Python.","completion":"Recursion is a programming concept which involves a function invoking itself. Instead of using loops, recursion makes use of a function calling itself with a different input value each time. An example of recursive function in Python is the factorial function, defined as follows: def factorial(x): if x == 1: return 1 else: return x * factorial(x-1) The function factorial(x) takes a single parameter x and returns x multiplied by the factorial of x-1. This recursive process will continue until it reaches the base case, which is x==1, where the function returns the value 1."},{"prompt":"Generate a database schema for a given set of sample data. [{Name: John, Skills: Python, HTML, CSS, Location: Europe}, {Name: Jim, Skills: Java, Bash, Go, Location: Asia}]","completion":"CREATE TABLE IF NOT EXISTS users ( id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, skills TEXT NOT NULL, location TEXT NOT NULL ); INSERT INTO users (name, skills, location) VALUES ('John', 'Python, HTML, CSS', 'Europe'), ('Jim', 'Java, Bash, Go', 'Asia');"},{"prompt":"Generate a Python program to multiply each element in a given list by a given number.","completion":"def multiply_list(lst, num): res = [] for item in lst: res.append(item*num) return res"},{"prompt":"Write a Python program to find the number of different ways to express n as the sum of 1, 3 and 4. Number: 8","completion":"def countWays(n): if (n == 0): return 1 elif (n < 0): return 0 else: return countWays(n-1) + countWays(n-3) + countWays(n-4) n = 8 result = countWays(n) print(\\"The number of different ways to express\\", n, \\"as the sum of 1, 3 and 4 is:\\", result)"},{"prompt":"Design a program in Python to remove the middle character of a string. coding","completion":"def removeMiddleChar (word): middle = len(word)//2 # length of the substring # which is to be removed length = 1 # to make sure the middle character is removed # check the character's index if len(word) % 2 == 0: length = 2 # slicing the word of middle value word = word[:middle] + word[middle + length:] return word"},{"prompt":"Generate a valid python program to identify the longest subsequence in a given list. [2, 3, 7, 4, 9, 6]","completion":"def longest_seq(nums): longest_seq = [] current_seq = [nums[0]] for n in nums[1:]: if n > current_seq[-1]: current_seq.append(n) if len(current_seq) > len(longest_seq): longest_seq = current_seq else: current_seq = [n] return longest_seq longest = longest_seq([2, 3, 7, 4, 9, 6]) print(longest)"},{"prompt":"Design a Python class for implementing a stack data structure.","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def is_empty(self): return self.items == [] def peek(self): if not self.is_empty(): return self.items[-1] def get_stack(self): return self.items"},{"prompt":"Write a python script to get the filename from the given path /Users/john/Documents/Github/myproject/myfile.py","completion":"import os def get_filename_from_path(path): return os.path.basename(path) filename = get_filename_from_path('/Users/john/Documents/Github/myproject/myfile.py') print(filename)"},{"prompt":"mplement a solution in Python that finds the number of strings from the given set whose sum of ASCII values is divisible by 3 {wonder,woman,man}","completion":"def count_strings_by_sum_of_ascii(strings): count = 0 for string in strings: ascii_sum = 0 for char in string: ascii_sum += ord(char) if ascii_sum % 3 == 0: count += 1 return count"},{"prompt":"The given code is a Python script that sets up and orchestrates various services required to run a test. To use this script, import the necessary modules and create an instance of the ExecutionEngine class. Then, call the set_up() method to start all the required services and configure the Selenium driver. After that, use the provided methods to interact with the app and test its functionality. Finally, call the tear_down() method to shut down all the services.","completion":"from subprocess import call from os import path import hitchpostgres import hitchselenium import hitchpython import hitchserve import hitchredis import hitchtest import hitchsmtp # Get directory above this file PROJECT_DIRECTORY = path.abspath(path.join(path.dirname(__file__), '..')) class ExecutionEngine(hitchtest.ExecutionEngine): \\"\\"\\"Engine for orchestating and interacting with the app.\\"\\"\\" def set_up(self): \\"\\"\\"Ensure virtualenv present, then run all services.\\"\\"\\" python_package = hitchpython.PythonPackage( python_version=self.settings['python_version'] ) python_package.build() call([ python_package.pip, \\"install\\", \\"-r\\", path.join(PROJECT_DIRECTORY, \\"requirements/local.txt\\") ]) postgres_package = hitchpostgres.PostgresPackage() postgres_package.build() redis_package = hitchredis.RedisPackage() redis_package.build() self.services = hitchserve.ServiceBundle( project_directory=PROJECT_DIRECTORY, startup_timeout=float(self.settings[\\"startup_timeout\\"]), shutdown_timeout=float(self.settings[\\"shutdown_timeout\\"]), ) postgres_user = hitchpostgres.PostgresUser(\\"project_soa\\", \\"password\\") self.services['Postgres'] = hitchpostgres.PostgresService( postgres_package=postgres_package, users=[postgres_user, ], databases=[hitchpostgres.PostgresDatabase(\\"project_soa\\", postgres_user), ] ) self.services['HitchSMTP'] = hitchsmtp.HitchSMTPService(port=1025) self.services['Django'] = hitchpython.DjangoService( python=python_package.python, port=8000, settings=\\"project_soa.settings.local\\", needs=[self.services['Postgres'], ], env_vars=self.settings['environment_variables'], ) self.services['Redis'] = hitchredis.RedisService( redis_package=redis_package, port=16379, ) self.services['Firefox'] = hitchselenium.SeleniumService( xvfb=self.settings.get(\\"xvfb\\", False), no_libfaketime=True, ) # import hitchcron # self.services['Cron'] = hitchcron.CronService( # run=self.services['Django'].manage(\\"trigger\\").command, # every=1, # needs=[ self.services['Django'], ], # ) self.services.startup(interactive=False) # Docs : https://hitchtest.readthedocs.org/en/latest/plugins/hitchselenium.html self.driver = self.services['Firefox'].driver self.webapp = hitchselenium.SeleniumStepLibrary( selenium_webdriver=self.driver, wait_for_timeout=5, ) # Add selenium steps self.click = self.webapp.click self.wait_to_appear = self.webapp.wait_to_appear self.wait_to_contain = self.webapp.wait_to_contain self.wait_for_any_to_contain = self.webapp.wait_for_any_to_contain self.click_and_dont_wait_for_page_load = self.webapp.click_and_dont_wait_for_page_load # Configure selenium driver self.driver.set_window_size(self.settings['window_size']['width'], self.settings['window_size']['height']) self.driver.set_window_position(0, 0) self.driver.implicitly_wait(2.0) self.driver.accept_next_alert = True def pause(self, message=None): \\"\\"\\"Stop. IPython time.\\"\\"\\" if hasattr(self, 'services'): self.services.start_interactive_mode() self.ipython(message) if hasattr(self, 'services'): self.services.stop_interactive_mode() def load_website(self): \\"\\"\\"Navigate to website in Firefox.\\"\\"\\" self.driver.get(self.services['Django'].url()) self.click(\\"djHideToolBarButton\\") def fill_form(self, **kwargs): \\"\\"\\"Fill in a form with id=value.\\"\\"\\" for element, text in kwargs.items(): self.driver.find_element_by_id(element).send_keys(text) def confirm_emails_sent(self, number): \\"\\"\\"Count number of emails sent by app.\\"\\"\\" assert len(self.services['HitchSMTP'].logs.json()) == int(number) def click_on_link_in_last_email(self, which=1): \\"\\"\\"Click on the nth link in the last email sent.\\"\\"\\" self.driver.get( self.services['HitchSMTP'].logs.json()[-1]['links'][which - 1] ) def wait_for_email(self, containing=None): \\"\\"\\"Wait for, and return email.\\"\\"\\" self.services['HitchSMTP'].logs.out.tail.until_json( lambda email: containing in email['payload'] or containing in email['subject'], timeout=25, lines_back=1, ) def time_travel(self, days=\\"\\"): \\"\\"\\"Make all services think that time has skipped forward.\\"\\"\\" self.services.time_travel(days=int(days)) def on_failure(self): \\"\\"\\"Stop and IPython.\\"\\"\\" if not self.settings['quiet']: if self.settings.get(\\"pause_on_failure\\", False): self.pause(message=self.stacktrace.to_template()) def on_success(self): \\"\\"\\"Pause on success if enabled.\\"\\"\\" if self.settings.get(\\"pause_on_success\\", False): self.pause(message=\\"SUCCESS\\") def tear_down(self): \\"\\"\\"Shut down services required to run your test.\\"\\"\\" if hasattr(self, 'services'): self.services.shutdown()"},{"prompt":"Generate a Python code for replicating an output after switching the contents of two strings. Given two strings, ‘str1’ and ‘str2’, swap the contents of the two strings. For example, if the two strings are ‘Hello’ and ‘World’, the output after swtiching the contents should be ‘Worlh’ and ‘Hello’","completion":"str1, str2 = 'Hello', 'World' str1, str2 = str2, str1 print(\\"After swapping: str1 =\\", str1, \\"and str2 =\\", str2)"},{"prompt":"What is the code for using the Python Requests module to post data to the server? URL: http://example.com/data","completion":"import requests url = \\"http://example.com/data\\" data = {\\"name\\":\\"John Doe\\",\\"age\\":30} response = requests.post(url, data = data)"},{"prompt":"Generate a data structure in Python that stores a list of flagged emails, and that provides a method to unflag them all.","completion":"class FlaggedEmails: def __init__(self): self.flagged_emails = [] def add_email(self, email): self.flagged_emails.append(email) def unflag_all(self): while self.flagged_emails: self.flagged_emails.pop()"},{"prompt":"Design an objectoriented Python class to represent a vehicle.","completion":"class Vehicle: def __init__(self, make, model, year): self.make = make self.model = model self.year = year def getMake(self): return self.make def getModel(self): return self.model def getYear(self): return self.year"},{"prompt":"Create a python program to input two numbers and then swap their values. x = 4 y = 3","completion":"x = 3 y = 4 temp = x x = y y = temp print(\\"x =\\", x) print(\\"y =\\", y)"},{"prompt":"Develop a Python program to count the frequency of each word in a given string. string = This is a string","completion":"def countFreq(str): # break the string into words str = str.split(\\" \\") # Count each word using Dictionary freq = {} for word in str: if word in freq: freq[word] += 1 else: freq[word] = 1 return freq"},{"prompt":"Create a Python script to calculate total electricity bill Oneoff membership fee: 25.00 Night rate(17 p.m 7 am): 0.20 per kWh Standard rate: 0.30 per kWh Total electricity used: 350 kWh","completion":"def calc_elec_bill(one_off, night_rate, standard_rate, total_kwh): one_off_fee = one_off night_rate_fee = night_rate * total_kwh standard_rate_fee = standard_rate * total_kwh return one_off_fee + night_rate_fee + standard_rate_fee one_off = 25.00 night_rate = 0.20 standard_rate = 0.30 total_kwh = 350.00 print(\\"Total electricity bill: \\"+str(calc_elec_bill(one_off, night_rate, standard_rate, total_kwh)))"},{"prompt":"Generate a Python program which can produce the sum of all even numbers between 0 and n, including zero.","completion":"def sum_even_nums(n): sum = 0 for i in range(0, n+1): if i%2 == 0: sum += i return sum"},{"prompt":"Generate a 20 Hz sine wave sample using Python.","completion":"import matplotlib.pyplot as plt import numpy as np sampling_rate = 100 sine_frequency = 20 time_period = 1.0/sampling_rate x_values = np.arange(0, 1, time_period) y_values = np.sin(2 * np.pi * sine_frequency * x_values) plt.plot(x_values, y_values) plt.xlabel('Time') plt.ylabel('Amplitude') plt.show()"},{"prompt":"Create a Python web scraper to extract job postings from Indeed.com. Not applicable","completion":"import requests from bs4 import BeautifulSoup def scrape_indeed(url): jobs = [] page = requests.get(url).content soup = BeautifulSoup(page, 'html.parser') job_cards = soup.find_all('div', class_='jobsearch-SerpJobCard unifiedRow row result clickcard') for job_card in job_cards: title = job_card.find('div', class_='title').text company = job_card.find('span', class_='company').text location = job_card.find('div', class_='location').text link = 'https://www.indeed.com/' + job_card.find('a').get('href') job = { 'title': title, 'company': company, 'location': location, 'link': link } jobs.append(job) return jobs if __name__ == '__main__': jobs = scrape_indeed('https://www.indeed.com/jobs?q=web+developer&l=San+Francisco%2C+CA') print(jobs)"},{"prompt":"Create a web server using Python's Flask framework to render a page containing a form asking for user information. Not applicable","completion":"from flask import Flask, render_template app = Flask(__name__) @app.route('/', methods=['GET']) def main_page(): return render_template('userinfoForm.html') @app.route('/user-info', methods=['POST']) def get_user_info(): # get user info from form name = request.form.get('name') email = request.form.get('email') address = request.form.get('address') occupation = request.form.get('occupation') return render_template('success.html', name=name, email=email, address=address, occupation=occupation) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python function that validates a given string is a valid email address.","completion":"def validate_email(email): # check if the email address is valid or not if '@' not in email: return False if '.' not in email: return False username = email.split('@')[0] domain = email.split('@')[1] if username == \\"\\" or domain == \\"\\": return False return True"},{"prompt":"Create a web scraping program in Python that fetches live stock prices on a given URL URL: http://finance.yahoo.com/quote/AAPL/","completion":"import requests from bs4 import BeautifulSoup # Get the page url = 'http://finance.yahoo.com/quote/AAPL/' page = requests.get(url) # Parse the content soup = BeautifulSoup(page.content, 'html.parser') # Find the element which contains the stock price price_element = soup.find('span', class_=\\"Fl(end) Ta(end) Fw(b) Fz(36px) Mb(-4px)\\") # Extract and print the stock price print(price_element.text)"},{"prompt":"Create a python program that takes a list of userdefined objects as input and prints a summary of the objects. [{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 35}]","completion":"def print_summary(object_list): for object in object_list: print('Name: {}nAge: {}n'.format(object['name'], object['age'])) print_summary([{'name': 'John', 'age': 23}, {'name': 'Mary', 'age': 35}])"},{"prompt":"Generate a Python dictionary of given word frequencies. [('cat', 2), ('dog', 5), ('bird', 3)]","completion":"wordFrequencies = { 'cat': 2, 'dog': 5, 'bird': 3 }"},{"prompt":"Create a class in Python to handle the following Student object. Name: John Age: 20 Marks: [80, 90, 85, 100]","completion":"class Student: def __init__(self, name, age, marks): self.name = name self.age = age self.marks = marks def get_name(self): return self.name def get_age(self): return self.age def get_total_marks(self): return sum(self.marks)"},{"prompt":"Create a simple Python script for a Sudoku solving algorithm. The script should accept an unsolved Sudoku board as input and output the solved board. input_board = [ [7,8,0,4,0,0,1,2,0], [6,0,0,0,7,5,0,0,9], [0,0,0,6,0,1,0,7,8], [0,0,7,0,4,0,2,6,0], [0,0,1,0,5,0,9,3,0], [9,0,4,0,6,0,0,0,5], [0,7,0,3,0,0,0,1,2], [1,2,0,0,0,7,4,0,0], [0,4,9,2,0,6,0,0,7] ]","completion":"output_board = [ [7,8,5,4,3,9,1,2,6], [6,1,2,8,7,5,3,4,9], [4,9,3,6,2,1,5,7,8], [8,5,7,9,4,3,2,6,1], [2,6,1,7,5,8,9,3,4], [9,3,4,1,6,2,7,8,5], [5,7,6,3,9,4,8,1,2], [1,2,8,5,8,7,4,9,6], [3,4,9,2,1,6,5,7,7] ]"},{"prompt":"Create an algorithm in Python to sort an array using selection sort. [4, 1, 6, 5, 7, 2, 0]","completion":"def selection_sort(arr): for i in range(len(arr)): min_index = i for j in range(i + 1, len(arr)): if arr[min_index] > arr[j]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr arr = [4, 1, 6, 5, 7, 2, 0] print(selection_sort(arr))"},{"prompt":"Use automated refactoring to make Python code more readable. def concat(str1, str2): output = str1 + str2 return outpu","completion":"def concat(str1: str, str2: str) -> str: \\"\\"\\"Concatenate two strings. Args: str1: The first string str2: The second string Returns: str: The concatenated string \\"\\"\\" return str1 + str2"},{"prompt":"Create a code solution in Python to generate a random grid of characters. Not applicable","completion":"import random # Generate grid of characters grid_rows = 3 grid_cols = 5 grid = [] for row in range(grid_rows): row_data = [] for col in range(grid_cols): row_data.append(random.choice(\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\")) grid.append(row_data) print(grid)"},{"prompt":"Create a Python script to get the values of a key from a given dictionary. {name: John, age: 35, city: New York}","completion":"d = {\\"name\\": \\"John\\", \\"age\\": 35, \\"city\\": \\"New York\\"} value = d.get(\\"age\\") print(value)"},{"prompt":"Can you develop an ML model to predict the next number in a Fibonacci sequence using Python?","completion":"# import required packages import numpy as np from keras.models import Sequential from keras.layers import Dense # define Fibonacci sequence def fibonacci_sequence(length): fibonacci_nums = [1,1] for i in range(length-2): fibonacci_nums.append(fibonacci_nums[i]+fibonacci_nums[i+1]) return np.array(fibonacci_nums) # define model model = Sequential() model.add(Dense(1, input_dim=len(fibonacci_sequence(8)), activation='linear')) # compile model model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy']) # fit model model.fit(fibonacci_sequence(8).reshape(7,1), fibonacci_sequence(9)[1:], epochs=500, batch_size=2, verbose=0) #predict next number next_num = model.predict(fibonacci_sequence(10).reshape(9,1)) # print the result print('The next number from the Fibonacci sequence is: ', next_num[-1][0])"},{"prompt":"Write a code to identify if two strings are anagrams using Python. str1 = 'listen' str2 = 'silent'","completion":"def is_anagram(str1, str2): \\"\\"\\" Check if two strings are anagrams. Parameters: str1 (str): First string str2 (str): Second string Returns: bool: True if the strings are anagrams, False other wise \\"\\"\\" str1 = str1.lower().replace(\\" \\", \\"\\") str2 = str2.lower().replace(\\" \\", \\"\\") if sorted(str1) == sorted(str2): return True else: return False if __name__ == '__main__': s1 = 'listen' s2 = 'silent' print(is_anagram(s1, s2)) # True"},{"prompt":"Create a GUI application in Python that displays Welcome to our application.","completion":"import tkinter window = tkinter.Tk() window.title('My Application') window.geometry('200x200') lbl = tkinter.Label(window,text=\\"Welcome to our application!\\") lbl.pack() window.mainloop()"},{"prompt":"Write a python code to replace all the occurences of an element in a list with a given number. [1,2,3,3], 3, 0","completion":"def replace_elem_in_list(data, elem, val): return [val if x==elem else x for x in data] print(replace_elem_in_list([1,2,3,3], 3, 0)) # Output: [1, 2, 0, 0]"},{"prompt":"Given an array of strings, build an algorithm in Python to determine the index of the element that contains the smallest number of characters. [Hello, World, Python, is, Fun]","completion":"def min_length_index(arr): min = float('infinity') min_i = 0 for i in range(len(arr)): if len(arr[i]) < min: min = len(arr[i]) min_i = i return min_i print(min_length_index([\\"Hello\\", \\"World\\", \\"Python\\", \\"is\\", \\"Fun\\"])) # 3"},{"prompt":"Write a Python program to find the armstrong numbers in a given range. An armstrong number is a number with the sum of its digits each raised to the power of its own number of digits.","completion":"def armstrong_numbers(start, end): armstrong_numbers = [] for number in range(start, end + 1): digits = [int(d) for d in str(number)] sum_of_digits = 0 for digit in digits: sum_of_digits += digit**len(digits) if sum_of_digits == number: armstrong_numbers.append(number) return armstrong_numbers"},{"prompt":"Create a Python script to parse the given HTML page. <html> <head> <title>Parsing example</title> </head> <body> <h1>Heading</h1> <ul> <li>Item 1</li> <li>Item 2</li> </ul> <p>This is a paragraph.</p> </body> </html>","completion":"from bs4 import BeautifulSoup html_doc = \\"\\"\\" <html> <head> <title>Parsing example</title> </head> <body> <h1>Heading</h1> <ul> <li>Item 1</li> <li>Item 2</li> </ul> <p>This is a paragraph.</p> </body> </html> \\"\\"\\" soup = BeautifulSoup(html_doc, 'html.parser') heading = soup.find(\\"h1\\").get_text() items = soup.find_all(\\"li\\") para = soup.find(\\"p\\").get_text() print(\\"Heading: \\" + heading) print(\\"Items:\\") for item in items: print(\\"- \\" + item.get_text()) print(\\"Paragraph: \\" + para)"},{"prompt":"Develop a function in Python that converts Celsius to Fahrenheit.","completion":"def celsiusToFahrenheit(celsius): return (celsius * 1.8) + 32"},{"prompt":"Create an algorithm in Python to find the longest increasing subsequence from a given set of numbers. [1, 10, 4, 2, 6, 12, 15]","completion":"def longest_increasing_subsequence(arr): n = len(arr) dp = [1] * n for i in range(1, n): max_length_so_far = 0 for j in range(i): if arr[j] < arr[i]: max_length_so_far = max(max_length_so_far, dp[j]) dp[i] = max_length_so_far + 1 return max(dp) arr = [1, 10, 4, 2, 6, 12, 15] result = longest_increasing_subsequence(arr) print(result) # Output: 5"},{"prompt":"Create a Python function that takes a list of numbers and returns the maximum difference between any two elements. [3, 14, 5, 2, 9]","completion":"def getMaxDifference(elementList): maxDifference = 0 for i in range(len(elementList)): for j in range(i + 1, len(elementList)): if (elementList[j] - elementList[i] > maxDifference): maxDifference = elementList[j] - elementList[i] return maxDifference list = [3, 14, 5, 2, 9] print (getMaxDifference(list))"},{"prompt":"Write Python code to include exception handling in this code. a = 1 b = 0 c = a / b print (c)","completion":"try: a = 1 b = 0 c = a / b print(c) except ZeroDivisionError: print(\\"Cannot divide by zero\\")"},{"prompt":"Generate a Python code snippet for sorting an array of strings in ascending alphabetical order. [apple, banana, orange, kiwi]","completion":"def sort_words(words): # Sort the list in ascending alphabetical order. sorted_words = sorted(words) # Return the sorted list. return sorted_words words = [\\"apple\\", \\"banana\\", \\"orange\\", \\"kiwi\\"] sorted_words = sort_words(words) print(sorted_words)"},{"prompt":"Create an AI chatbot in Python that can answer queries related to the stock market. Not applicable","completion":"# Import libraries import numpy as np import tensorflow as tf import keras from keras.preprocessing.text import one_hot from keras.preprocessing.sequence import pad_sequences from keras.models import Sequential from keras.layers import Dense, Flatten, Embedding # Set up the corpus of data corpus = [] with open('data.txt', encoding='utf8') as f: for line in f.readlines(): corpus.append(line.strip().lower()) # Create one-hot representations of the data vocab_size=5000 encoded_docs=[one_hot(d,vocab_size) for d in corpus] max_length=1 padded_docs=pad_sequences(encoded_docs,maxlen=max_length,padding='post') # Set up the model model=Sequential() model.add(Embedding(vocab_size,8,input_length=max_length)) model.add(Flatten()) model.add(Dense(1000,activation='relu')) model.add(Dense(1000,activation='relu')) model.add(Dense(1,activation='sigmoid')) # Compile the model model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy']) # Fit the model model.fit(padded_docs,labels,epochs=50,verbose=1)"},{"prompt":"Build an AI model in Python that can accurately predict the future stock prices of a company. The stock's historical closing prices for the past month","completion":"import numpy as np import pandas as pd from sklearn.linear_model import LinearRegression #load the historical data data = pd.read_csv('stock-data.csv') #prepare the feature and target variables X = data.iloc[:, :-1] y = data['Close'] #fit the linear regression model model = LinearRegression() model.fit(X, y) #make predictions X_test = 'Input the stock's historical closing prices for the future month here' predictions = model.predict(X_test) #display the predictions print(predictions)"},{"prompt":"Create a Python program to classify the words in a sentence into verbs and nouns. Sentence = The cat is playing with a ball.","completion":"sentence = \\"The cat is playing with a ball.\\" words = sentence.split() verbs = [] nouns = [] for word in words: if word in [\\"is\\", \\"playing\\"]: verbs.append(word) elif word in [\\"The\\", \\"cat\\", \\"a\\", \\"ball\\"]: nouns.append(word) print(\\"Verbs:\\", verbs) print(\\"Nouns:\\", nouns)"},{"prompt":"Develop an algorithm in Python to identify a subsequence in a larger given sequence.","completion":"def subsequence(seq, sub): if sub == \\"\\": return True sub_index = 0 sequence_length = len(seq) sub_length = len(sub) for index in range(sequence_length): if sub[sub_index] == seq[index]: sub_index +=1 if sub_index == sub_length: return True return False"},{"prompt":"Create a Python generator to iterate over the strings in the list ['cat', 'dog', 'bird']. ['cat', 'dog', 'bird']","completion":"def string_generator(strings): for string in strings: yield string for string in string_generator(['cat', 'dog', 'bird']): print(string)"},{"prompt":"Create a Python program that will find the longest palindrome in a string and print it out. Input String: “The racecar stopped to rest, so we can start again.”","completion":"def longest_palindrome(string): longest_str = \\"\\" for i in range(len(string)): for j in range(i, len(string)): cur_str = string[i:j+1] if cur_str == cur_str[::-1] and len(cur_str) > len(longest_str): longest_str = cur_str return longest_str print(longest_palindrome(\\"The racecar stopped to rest, so we can start again.\\")) # Output: racecar"},{"prompt":"Using the input, create a Python program which generates a random array of length n filled with binary values. n = 10","completion":"import random def random_binary_array(n): \\"\\"\\"Return a random array of length n with binary values.\\"\\"\\" array = [] for i in range(n): array.append(random.choice([0, 1])) return array"},{"prompt":"Create a Python program that will generate a random password from the given set of characters.","completion":"import random def generate_random_password(characters=\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#%^&*()_+{}:\\"): password = \\"\\" for _ in range(8): password += random.choice(characters) return password"},{"prompt":"Design a linear search algorithm for a given list in Python. arr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170] value = 110","completion":"def linearSearch(arr, value): for i in range(len(arr)): if arr[i] == value: return i return -1 arr = [10, 20, 80, 30, 60, 50, 110, 100, 130, 170] value = 110 idx = linearSearch(arr, value) if idx != -1: print(\\"Element is present at index\\", idx) else: print(\\"Element is not present in the array\\")"},{"prompt":"Assemble a Python program to measure similarity Compute the similarity between two strings.","completion":"def compute_similarity(s1, s2): len1 = len(s1) len2 = len(s2) max_len = max(len1, len2) count = 0 for i in range(max_len): if i >= len1 or i >= len2: break if s1[i] == s2[i]: count += 1 return count / max_len"},{"prompt":"Generate a Python program to copy all elements of one list into another list. source = [0, 1, 2]","completion":"source = [0, 1, 2] dest = [] for item in source: dest.append(item) print(dest)"},{"prompt":"Create a Python program to increase a number by 5.","completion":"def increase_number(number): return number + 5"},{"prompt":"Write a Python program to check if a number is prime by eliminating the multiples of all numbers from 2 to the square root of the number. n = 99","completion":"import math def is_prime(n): for i in range(2, int(math.sqrt(n))+1): if n % i == 0: return False return True print(is_prime(n))"},{"prompt":"Can you explain the concept of quicksort in Python?","completion":"Quicksort is a divide-and-conquer algorithm that works by recursively partitioning a list into two sublists of items based on a pivot value. The left sublist contains all items less than the pivot value and the right sublist contains all items greater than the pivot value. The quicksort algorithm then recursively sorts these sublists and combines them back together to form the final sorted list. In Python, one implementation of the quicksort algorithm is as follows: def quicksort(arr): if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"prompt":"Create a python script to generate a random password consisting of a combination of 10 alphabetic characters, 9 digits and the symbols @, # and .","completion":"import random import string def randomPasswordGenerator(length): # Generate a random password consisting of 10 alphabet characters, 9 digits and the symbols @, # and generated_password = ''.join(random.choice( string.ascii_letters + string.digits + \\"@#\\") for i in range(length)) return generated_password length = 10 print(\\"Random Password:\\", randomPasswordGenerator(length))"},{"prompt":"Come up with a creative way to optimise the given code in Python. # This code filters a list of numbers and prints out only the even ones numbers = [1,2,3,4,5,6,7,8] for num in numbers: if num % 2 == 0: print(num)","completion":"# This code filters a list of numbers and prints out only the even ones numbers = [1,2,3,4,5,6,7,8] # Use list comprehension to filter the list even_numbers = [x for x in numbers if x % 2 == 0] # Print out the even numbers for num in even_numbers: print(num)"},{"prompt":"Generate a binary tree with 4 levels in Python. Not applicable","completion":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None def generateTree(root, level): if level == 1: root.left = Node(2*level) root.right = Node(2*level + 1) else: root.left = Node(2*level) root.right = Node(2*level + 1) generateTree(root.left, level-1) generateTree(root.right, level-1) root = Node(0) level = 4 generateTree(root, level)"},{"prompt":"Create a questionanswering system using Python and Natural Language Processing.","completion":"import nltk, numpy from nltk.stem.lancaster import LancasterStemmer stemmer = LancasterStemmer() # importing our intents file import json with open('intents.json') as json_data: intents = json.load(json_data) # tokenizing patterns words = [] classes = [] documents = [] ignore_words = ['?'] # loop through each sentence in our intents patterns for intent in intents['intents']: for pattern in intent['patterns']: # tokenize each word in the sentence w = nltk.word_tokenize(pattern) # add to our words list words.extend(w) # add to documents in our corpus documents.append((w, intent['tag'])) # add to our classes list if intent['tag'] not in classes: classes.append(intent['tag']) # stem and lower each word and remove duplicates words = [stemmer.stem(w.lower()) for w in words if w not in ignore_words] words = sorted(list(set(words))) # remove duplicates classes = sorted(list(set(classes))) # create our training data training = [] output = [] # create an empty array for our output output_empty = [0] * len(classes) # training set, bag of words for each sentence for doc in documents: # initialize our bag of words bag = [] # list of tokenized words for the pattern pattern_words = doc[0] # stem each word pattern_words = [stemmer.stem(word.lower()) for word in pattern_words] # create our bag of words array for w in words: bag.append(1) if w in pattern_words else bag.append(0) training.append(bag) # output is a '0' for each tag and '1' for current tag output_row = list(output_empty) output_row[classes.index(doc[1])] = 1 output.append(output_row) # sample training/output i = 0 w = documents[i][0] print ([stemmer.stem(word.lower()) for word in w]) print (training[i]) print (output[i]) # import tensorflow import numpy import tflearn import tensorflow as tf import random # seed random.seed(1) # transform as a numpy array training = numpy.array(training) output = numpy.array(output) # build deep neural network net = tflearn.input_data(shape=[None, len(training[0])]) net = tflearn.fully_connected(net, 8) net = tflearn.fully_connected(net, 8) net = tflearn.fully_connected(net, len(output[0]), activation=\\"softmax\\") net = tflearn.regression(net) # define model and setup tensor board model = tflearn.DNN(net, tensorboard_dir='tflearn_logs') # start training (apply gradient descent algorithm) model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True) model.save('model.tflearn') import pickle pickle.dump( {'words':words, 'classes':classes, 'train_x':training, 'train_y':output}, open( \\"training_data\\", \\"wb\\" ) )"},{"prompt":"Produce Python source code that evaluates whether a humangiven string follows a number pattern, such as 1 2 3 3 3 4 4 4 4 5 5 5 5 1 2 3 3 3 4 4 4 4 5 5 5 5","completion":"def check_pattern(string): nums = string.split() nums = [int(num) for num in nums] curr = nums[0] count = 1 for num in nums[1:]: if num == curr: count += 1 else: if count > 1: if count - 1 != curr: return False curr = num count = 1 if count > 1: if count - 1 != curr: return False return True if __name__ == \\"__main__\\": string = \\"1 2 3 3 3 4 4 4 4 5 5 5 5\\" print(check_pattern(string))"},{"prompt":"Formulate a python expression to determine the average of a given list of numbers. [1,2,3,4]","completion":"sum(lst)/len(lst) # This is equivalent to (1+2+3+4)/4 = 2.5"},{"prompt":"Enhance the following Python code for saving a webpage to a local directory. import urllib.request def save_webpage(url, path): urllib.request.urlretrieve(url, path)","completion":"import urllib.request from urllib.parse import urlparse import os def save_webpage(url, path): parsed_url = urlparse(url) path = os.path.join(path, parsed_url.netloc + parsed_url.path) if not os.path.exists(os.path.dirname(path)): os.makedirs(os.path.dirname(path)) urllib.request.urlretrieve(url, path)"},{"prompt":"Write a python script that sorts a list of strings by length. ['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']","completion":"def sort_strings_by_length(strings): # Sort strings by length in ascending order strings.sort(key=len) return strings"},{"prompt":"Write a Python program to replace all the occurences of a substring in a string with a new substring. String: This is a string Old substring: is New substring: w","completion":"new_string = string.replace('is', 'was')"},{"prompt":"Create a python script to generate a set of randomized numbers. The script should take two parameters: an integer n representing the number of numbers to generate, and an integer m representing the values for each of the random numbers (which should range between 0 and m). n = 10 m = 6","completion":"import random def generate_random(n, m): random_numbers = [] for i in range(n): random_number = random.randint(0, m) random_numbers.append(random_number) return random_numbers random_numbers = generate_random(n, m) print(random_numbers)"},{"prompt":"Create a Python list comprehension to return all numbers divisible by 3 and 5 that are smaller than 10","completion":"[number for number in range(10) if number % 3 == 0 and number % 5 == 0]"},{"prompt":"Write a Python function to sort a dictionary (key: value) by its values in descending order. my_dict = {1: 4, 2: 3, 3: 2, 4: 1}","completion":"def desc_sort_dict(my_dict): return {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1], reverse=True)}"},{"prompt":"Optimize the following function in Python to improve its efficiency. def Fibonacci(n): var1, var2 = 0, 1 while var1 < n: print(var1, end=' ') var1, var2 = var2, var1 + var2","completion":"def Fibonacci(n): var1, var2 = 0, 1 while var1 < n: print(var1, end=' ') var1, var2 = var2, var1 + var2 return def FibonacciFast(n): result = [] var1, var2 = 0, 1 while var1 < n: result.append(var1) var1, var2 = var2, var1 + var2 return result"},{"prompt":"Write a Python program to remove duplicate characters from an input string.","completion":"def remove_duplicates(input_string): characters = set() output_string = \\"\\" for character in input_string: if character not in characters: output_string += character characters.add(character) return output_string"},{"prompt":"Create a machine learning model in Python using scikitlearn to classify fruits into oranges and apples. Not applicable","completion":"from sklearn.ensemble import RandomForestClassifier # Create a random forest classifier clf = RandomForestClassifier(n_estimators=100) # Train the model using the training sets clf.fit(X_train, y_train) # Create predictions y_pred = clf.predict(X_test) # Evaluate the model print('Accuracy Score :', accuracy_score(y_test, y_pred))"},{"prompt":"Generate a Python function that takes an input string and counts the number of occurrence of each letter.","completion":"def letter_frequency(str): freq = {} for letter in str: if letter in freq: freq[letter] += 1 else: freq[letter] = 1 return freq result = letter_frequency(\\"Hello World\\") print(result)"},{"prompt":"Write a command line script in Python to print the current day's date.","completion":"import datetime datetime_object = datetime.datetime.now() print(datetime_object.strftime(\\"%A, %B %d, %Y\\"))"},{"prompt":"Write a python program to sort words in alphabetical order. words = [software, engineering, programming]","completion":"def sort_words(words): words.sort() return words words = [\\"software\\", \\"engineering\\", \\"programming\\"] print(sort_words(words))"},{"prompt":"Generate a Python script to evaluate the expression (5 22 ) +18","completion":"# Evaluate the expression (5 - 22 ) +18 result = (5 - 22) + 18 print(\\"The result is:\\", result)"},{"prompt":"Write a Python program that will create a random destination and print out the coordinates and the country. Not applicable","completion":"import requests import json url = 'https://random-places.p.rapidapi.com/v1/get' querystring = {'language': 'en-US', 'size': '1', 'types': 'city'} headers = { 'x-rapidapi-host': 'random-places.p.rapidapi.com', 'x-rapidapi-key': <Your RapidAPI Key> } response = requests.request('GET', url, headers=headers, params=querystring) data = json.loads(response.text) destination = data['data'][0] print(f'Destination: {destination[\\"name\\"]}, {destination[\\"country\\"]}') print(f'Coordinates: {destination[\\"lat\\"]}, {destination[\\"lng\\"]}')"},{"prompt":"mplement a function in Python that takes in a list of integers and returns a new list where the elements are reversed. Input list: [1, 2, 3, 4, 5]","completion":"def reverse_list(arr): return arr[::-1] Input_list = [1, 2, 3, 4, 5] print(\\"Original List:\\", Input_list) Rev_list = reverse_list(Input_list) print(\\"Reversed List:\\", Rev_list)"},{"prompt":"Write a python program to convert a number into a list of its digits 235","completion":"def number_to_digits(number): digits = [] while (number>0): digits.append(number % 10) number = number // 10 digits.reverse() return digits"},{"prompt":"Create a SQL query to find the names of all web pages that have the term Python in their title.","completion":"SELECT name FROM pages WHERE title LIKE '%Python%';"},{"prompt":"Build an object oriented program in Python to play a game of tictactoe. Not applicable","completion":"# An array to store the board board = ['_', '_', '_', '_', '_', '_', '_', '_', '_'] # Variable to keep track of the turn turn = 'X' # Variable to check if the game is over game_is_over = False while not game_is_over: # Check if the game is over if turn == 'X': player = 'X' else: player = 'O' # Print out the board print('------------') for i in range(len(board)): print(board[i], end=' ') if i == 2 or i == 5 or i == 8: print() print('------------') # Ask for position board_position = int(input('Player ' + player + ' where do you want to move? ')) # Place the piece board[board_position - 1] = turn # Switch the turn if turn == 'X': turn = 'O' else: turn = 'X' # Check if there is a winner if board[0] == board[1] == board[2] or board[3] == board[4] == board[5] or board[6] == board[7] == board[8]: print('Player ' + player + ' won!') game_is_over = True # Check if the board is full counter = 0 for n in board: if n != '_': counter += 1 if counter == 9: print('Draw!') game_is_over = True"},{"prompt":"Construct a web crawler in python and count the number of words in a web page.","completion":"import requests from bs4 import BeautifulSoup # url of the website to crawl URL = \\"https://www.example.com/\\" # get the whole page content in # the form of text page = requests.get(URL).text # number of words in the page word_count = 0 # create a Beautiful Soup parsable string soup = BeautifulSoup(page, 'html.parser') # find all the tags of type p paragraphs = soup.find_all('p') for para in paragraphs: words = para.text.split() word_count += len(words) # print the word count print(\\"Total words in the page:\\", word_count)"},{"prompt":"Develop a function in python to delete all the vowels in a string. string = B e a u t iful","completion":"def remove_vowels(string): vowels = 'aeiou' new_string = '' for c in string: if c.lower() not in vowels: new_string += c return new_string if __name__ == '__main__': string = \\"Beau tiful\\" print(remove_vowels(string))"},{"prompt":"Create a function to parse JSON input in Python. Not applicable","completion":"import json def parse_json(input_string): data = json.loads(input_string) return data"},{"prompt":"What is the best way to optimize the following Python code which prints the first and last letters of an array of strings? words = [cat, dog, snake, elephant]","completion":"# optimized version words = [\\"cat\\", \\"dog\\", \\"snake\\", \\"elephant\\"] first_letters = [word[0] for word in words] # list of first letters last_letters = [word[-1] for word in words] # list of last letters # print the results print(first_letters) print(last_letters)"},{"prompt":"Create a python program to wrap a given text at a maximum of 80 characters.","completion":"import textwrap def wrap(text): return textwrap.fill(text, 80)"},{"prompt":"Write a python program to calculate the sum of the squares of the odd numbers between the given two numbers. n1 = 10 n2 = 20","completion":"def sum_square_odd(n1, n2): sum = 0 for i in range(n1, n2+1): if i % 2 != 0: sum += i*i return sum sum = sum_square_odd(n1, n2) print(sum)"},{"prompt":"Create an algorithm in Python to search a given list for a specific value. [1, 4, 6, 8, 10], 8","completion":"def search(lst, target): for i in range(len(lst)): if lst[i] == target: return i return -1 search([1, 4, 6, 8, 10], 8) # Output: 3"},{"prompt":"Automate the given workflow using a Python script. Input Workflow: 1. Read .csv file 2. Process data 3. Store results in a database 4. Generate repor","completion":"import csv import sqlite3 # Read .csv file data = csv.reader(open('example.csv'), delimiter=',') # Connect to database conn = sqlite3.connect('example.db') # Process and store data in database for row in data: conn.execute('INSERT INTO table (column1, column2, column3) VALUES (?, ?, ?)', row) conn.commit() # Generate report cursor = conn.execute('SELECT * FROM table') report = open('report.txt', 'w') for row in cursor: row = ' '.join(row) report.write(row) report.close()"},{"prompt":"Create a Bash script to run a python program in the background. myscript.py","completion":"#!/bin/bash # Run the python program in the background python myscript.py & # Print the process id echo \\"Process id: !\\" # Wait for a keypress read -p \\"Press any key to exit\\" # Kill the process kill !"},{"prompt":"Create a Python function to extract the largest prime factor from a given number. number = 35","completion":"def largest_prime_factor(number): largest_factor = 1 for i in range(2, number+1): while number % i == 0: largest_factor = i number //= i return largest_factor largest_prime_factor(35) # Output: 5"},{"prompt":"Generate a code snippet in Python to convert a string with the following format to a dictionary. (name1=123&name2=456&name3=789). name1=123&name2=456&name3=789","completion":"inp = \\"name1=123&name2=456&name3=789\\" kv = inp.split(\\"&\\") d = {} for i in kv: k,v = i.split(\\"=\\") d[k] = v print(d)"},{"prompt":"Write an optimized Python code snippet to reverse the words in a given string. Hello, World!","completion":"def reverse_words(string): words = string.split(\\" \\") words.reverse() output_string = \\" \\".join(words) return output_string print(reverse_words(\\"Hello, World!\\")) # Output: \\"World! Hello,\\""},{"prompt":"mplement a Python program to find the maximum and minimum of a list. [3, 2, 8, 9, 5]","completion":"# Function to find the maximum and minimum of a list def find_max_min(nums): max = nums[0] min = nums[0] for num in nums: if num > max: max = num if num < min: min = num return (max, min) # Test program nums = [3, 2, 8, 9, 5] max, min = find_max_min(nums) print('Maximum:', max) print('Minimum:', min)"},{"prompt":"Program a Python script to convert a given temperature in degree Fahrenheit to degree Celsius. F = 100","completion":"def f_to_c(F): C = (F - 32) * 5/9 return C"},{"prompt":"Create a Python program to retrieve data from a given URL. url = https://example.com/index.html","completion":"# Import the built-in \\"requests\\" package import requests # Set the URL url = \\"https://example.com/index.html\\" # Retrieve the data data = requests.get(url) # Output the retrieved data print(data.text)"},{"prompt":"Construct a Python script to classify some data according to the given conditions. data = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] conditions = [['A','B','C'],[ 'D','E','F'],[ 'G', 'H', 'I'],[ 'J'] ]","completion":"import itertools def classify_data(data, conditions): # using itertools to create a list of # all possible combinations combinations = list(itertools.chain( *[itertools.combinations(x, r = 1) for x in conditions])) # initializing the result # with an empty list result = [] # traversing over the combinations # and finding the corresponding data for combination in combinations: # initializing a list to store # the data corresponding_data = [] # traversing over the given data for char in data: # if a character is present in # the combination, add it to # the corresponding_data if char in combination: corresponding_data.append(char) # inserting the corresponding data # inside the result and remove # the data from the data list result.append(corresponding_data) data[:] = [x for x in data if x not in corresponding_data] # returning the result return result # Driver Code data = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'] conditions = [['A','B','C'],[ 'D','E','F'],[ 'G', 'H', 'I'],[ 'J'] ] print(classify_data(data, conditions))"},{"prompt":"Write a Python program to parse a string of JSON data and display each entry on the command line. {name: John, age: 30, city: New York}","completion":"import json data = '{\\"name\\": \\"John\\", \\"age\\": 30, \\"city\\": \\"New York\\"}' data_dict = json.loads(data) for key, value in data_dict.items(): print(f'{key}: {value}')"},{"prompt":"Use Python to create a dictionary that stores the names of five fruits and a corresponding numerical value for each fruit.","completion":"fruits = { 'apple': 1, 'banana': 2, 'grape': 3, 'orange': 4, 'strawberry': 5 }"},{"prompt":"Generate a 10 digit random phone number using Python.","completion":"import random def get_random_phone_number(): \\"\\"\\"Generates a 10 digit random phone number\\"\\"\\" phone_number = '' for i in range(10): phone_number += str(random.randint(0, 9)) return phone_number print(get_random_phone_number())"},{"prompt":"Create a Python program to calculate the total cost of an item given its price, number of pieces, and tax rate. Tax rate: 0.1 Price: 10 Pieces: 4","completion":"def calc_cost(price, pieces, tax_rate): cost = price * pieces cost += cost * tax_rate return cost price = 10 pieces = 4 tax_rate = 0.1 total_cost = calc_cost(price, pieces, tax_rate) print('Total cost:', total_cost)"},{"prompt":"Write a python class called Car which has attributes like model, color and year.","completion":"class Car(object): \\"\\"\\"A car object with attributes like model, colour and year\\"\\"\\" def __init__(self, model, colour, year): self.model = model self.colour = colour self.year = year # Example my_car = Car(\\"Ford Mustang\\", \\"Red\\", 2016)"},{"prompt":"Create a statistical anomaly detection system in Python using Scikitlearn to detect fraudulent credit card transactions. Not applicable","completion":"from sklearn.ensemble import IsolationForest # Create an Isolation Forest model model = IsolationForest(contamination=0.1) # Train the model model.fit(X_train) # Make predictions y_pred = model.predict(X_test) # Label the predictions y_pred[y_pred == 1] = 0 y_pred[y_pred == -1] = 1 # Evaluate predictions from sklearn.metrics import confusion_matrix cm = confusion_matrix(y_test, y_pred) print(cm)"},{"prompt":"Write a Python program to compare two strings to determine which string would appear first in alphabetical order. string1 = hello string2 = world","completion":"string1 = \\"hello\\" string2 = \\"world\\" if string1 < string2: print(string1 + \\" comes before \\" + string2 + \\" alphabetically\\") else: print(string2 + \\" comes before \\" + string1 + \\" alphabetically\\")"},{"prompt":"Create a function in Python which takes a list of numbers and returns the sum of squares of those numbers. [3, 4, 5]","completion":"def sum_squares(nums): result = 0 for num in nums: result += num*num return result nums = [3, 4, 5] result = sum_squares(nums) print(result)"},{"prompt":"Write a Python script for combining two dictionaries. dict1 = { a : 1, b : 2 } dict2 = { c : 3, d : 4 }","completion":"def combine_dicts(dict1, dict2): new_dict = dict1.copy() new_dict.update(dict2) return new_dict dict1 = { \\"a\\" : 1, \\"b\\" : 2 } dict2 = { \\"c\\" : 3, \\"d\\" : 4 } print(combine_dicts(dict1, dict2))"},{"prompt":"Create a class in Python that encapsulates the following bank account: it should have a name, an opening balance, a withdraw method to take out money and a deposit method to add money.","completion":"class BankAccount: def __init__(self, name, opening_balance): self.name = name self.balance = opening_balance def withdraw(self, amount): self.balance -= amount return self.balance def deposit(self, amount): self.balance += amount return self.balance"},{"prompt":"Write a Python program to impute the NaN values in the given dataset with the mean of the corresponding column. import numpy as np data = np.array([[1, np.nan, 3], [4, 5, np.nan], [np.nan, 7, 8]])","completion":"def impute_nan(dataset, strategy=\\"mean\\"): for row in range(dataset.shape[0]): for col in range(dataset.shape[1]): if np.isnan(dataset[row, col]): if strategy == \\"mean\\": dataset[row, col] = dataset[:, col].mean() return dataset"},{"prompt":"Given a string, write a Python program to check if the characters in the string form a palindrome. string = racecar","completion":"def is_palindrome(string): return string == string[::-1] result = is_palindrome(string) print(result) # True"},{"prompt":"Create a Python script to scrape a website for text.","completion":"import requests from bs4 import BeautifulSoup url = 'example.com' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') scraped_text = soup.find_all(text=True) for txt in scraped_text: print(txt)"},{"prompt":"Create a basic chatbot in Python using spaCy for understanding natural language and responding to user queries. None.","completion":"import spacy nlp = spacy.load('en') # Define a function to respond to user queries def respond(user_input): doc = nlp(user_input) response = [] # Identify the intent of the user input for token in doc: if token.dep_ == \\"ROOT\\": intent = token.text # Respond based on the intent if intent == \\"hello\\": response.append(\\"Hi there!\\") elif intent == \\"goodbye\\": response.append(\\"Nice to talk to you. Bye!\\") else: response.append(\\"I'm sorry. I didn't understand.\\") return response user_input = 'hello' response = respond(user_input) print(response)"},{"prompt":"Write a Python script that prints out all the numbers from 1 to 100, with the following exceptions: If the number is a multiple of 3, print Fizz instead of the number. If the number is a multiple of 5, print Buzz instead of the number. If the number is a multiple of both 3 and 5, print FizzBuzz instead of the number. Not applicable","completion":"for num in range(1,101): if num % 3 == 0 and num % 5 == 0: print('FizzBuzz') elif num % 3 == 0: print('Fizz') elif num % 5 == 0: print('Buzz') else: print(num)"},{"prompt":"Write a Python program to generate a list with the first 25 odd numbers.","completion":"def print_odd_numbers(): result = [] for num in range(1, 51): if num % 2 != 0: result.append(num) return result list_odd_numbers = print_odd_numbers() print(list_odd_numbers)"},{"prompt":"Write a Python function to check if an element exists in a list.","completion":"def check_list(list_, element): return element in list_"},{"prompt":"mplement a sorting algorithm in Python for an array of 10 numbers. [4, 2, 9, 6, 1, 7, 10, 5, 8, 3]","completion":"def sort(arr): #loop over the array and compare every item for i in range(len(arr)): minIdx = i # Compare with each element after current item for j in range(i + 1, len(arr)): if arr[j] < arr[minIdx]: minIdx = j # Swap the found minimum element with current minimum arr[i], arr[minIdx] = arr[minIdx], arr[i] return arr print(sort([4, 2, 9, 6, 1, 7, 10, 5, 8, 3]))"},{"prompt":"Create a classification program using Python to classify the given dataset. Data set containing details about various cars like car name, color, and price.","completion":"#Import libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier #Load dataset data = pd.read_csv('cars.csv') #Split data X = data.iloc[:, 0:2] y = data.iloc[:, 2] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1) #Build the model model = DecisionTreeClassifier() model.fit(X_train, y_train) #Test the model accuracy = model.score(X_test, y_test) #Print accuracy print(\\"Accuracy:\\", accuracy*100, \\"%\\")"},{"prompt":"Generate a random fourdigit number in Python.","completion":"import random rand_num = random.randint(1000, 9999)"},{"prompt":"Create a Python program to classify a text document into one of five categories (news, sports, health, politics, and entertainment). Document tex","completion":"import nltk import string from nltk.corpus import stopwords from nltk.tokenize import word_tokenize # Data for model training categories = [\\"news\\", \\"sports\\", \\"health\\", \\"politics\\", \\"entertainment\\"] data = { \\"news\\": [[\\"This is a news article.\\"], [\\"An event occurred in the news today.\\"]], \\"sports\\": [[\\"A huge basketball game was played today.\\"], [\\"The Lakers won the basketball game.\\"]], \\"health\\": [[\\"Someone ate an unhealthy snack today.\\"], [\\"The doctor said to exercise every day.\\"]], \\"politics\\": [[\\"The President is holding a meeting today.\\"], [\\"The senators are discussing a bill.\\"]], \\"entertainment\\": [[\\"A new movie came out this week.\\"], [\\"A famous celebrity was seen at the premiere.\\"]] } # Tokenize the text def tokenize_doc(doc): tokens = word_tokenize(doc) tokens = [word.lower() for word in tokens if word not in string.punctuation] tokens = [word for word in tokens if word not in stopwords.words('english')] return tokens # Vectorize the tokens def vectorize_tokens(tokens): vec = {} for token in tokens: if token in vec: vec[token] += 1 else: vec[token] = 1 return vec # Train the model training_data = [(vectorize_tokens(tokenize_doc(doc)), category) for category in data for doc in data[category]] # Classify the text def classify_doc(doc): tokens = tokenize_doc(doc) vec = vectorize_tokens(tokens) best_category = None best_score = 0 for (category, v) in training_data: score = 0 for token, count in vec.items(): if token in v: score += v[token] if score > best_score: best_score = score best_category = category return best_category # Sample data text = \\"A famous celebrity was seen today.\\" predicted_category = classify_doc(text) print(\\"Predicted category:\\", predicted_category) # Output # Predicted category: entertainment"},{"prompt":"Write a Python program to automatically scrape product prices from WalMart.com Not applicable","completion":"from bs4 import BeautifulSoup import requests URL = 'https://www.walmart.com/browse/electronics' page = requests.get(URL) soup = BeautifulSoup(page.content, 'html.parser') # Get all elements of class 'price-group' price_group = soup.find_all('span', attrs={'class': 'price-group'}) # Iterate over all elements and extract prices for pg in price_group: price = pg.find('span', attrs={'class': 'price-characteristic'}).text # Convert to float price = float(price) print(\\"Price: {}\\".format(price))"},{"prompt":"Design a program in Python that takes two positive integers and returns their greatest common divisor. 25, 15","completion":"def gcd(a, b): while(b): a, b = b, a % b return a result = gcd(25, 15) print(result)"},{"prompt":"Create a python script to generate the product of all elements in a sequence. [2,4,6]","completion":"def product_of_sequence(sequence): product = 1 for num in sequence: product *= num return product seq = [2,4,6] print(product_of_sequence(seq))"},{"prompt":"Create a program in Python to generate all permutations of a given list. list = [1, 2, 3]","completion":"def generate_permutations(list): \\"\\"\\" Generates all permutations of a given list :param list: List of elements :return: List of permutations \\"\\"\\" permutations = [] if len(list) == 1: permutations.append(list) return permutations for i in range(len(list)): sub_list = list[:i] + list[i+1:] for permutation in generate_permutations(sub_list): sub_permutation = [list[i]] + permutation permutations.append(sub_permutation) return permutations if __name__ == '__main__': print(generate_permutations(list))"},{"prompt":"Design a python program to convert a given number of days into years, months, and days.","completion":"# convert days def convert_days(days): years = days // 365 months = (days % 365) // 30 days = (days % 365) % 30 return (years, months, days) # test days = 900 years, months, days = convert_days(days) print(\\"Number of years =\\", years) print(\\"Number of months =\\", months) print(\\"Number of days =\\", days)"},{"prompt":"Create a Python code to calculate the speed of an object at a given time. position = 50 time = 10","completion":"def calculate_speed(position, time): speed = position / time return speed if __name__ == '__main__': position = 50 time = 10 speed = calculate_speed(position, time) print(speed)"},{"prompt":"Write a Python function that accepts an integer as an argument and returns its factorial.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Compose a code in Python that counts the number of positive integers in a list. numbers = [1, 2, 3, 4, 5]","completion":"def count_positive_numbers(numbers): count = 0 for num in numbers: if num > 0: count += 1 return count"},{"prompt":"Write a Python function which, when given a string of text and a n number, returns a list of all ngrams within that string. string = 'this is a simple string' n = 3","completion":"def n_grams(string, n): tokens = string.split() n_grams = [] for i in range(len(tokens)-n+1): n_grams.append(tokens[i:i+n]) return n_grams"},{"prompt":"Complete the Python function below to return all the permutations of a given string, sorted lexicographically. def permutations(s): # TODO: return all permutations sorted lexicographically","completion":"def permutations(s): # base case if len(s) == 1: return [s] # recursive case permutations = [] for i, letter in enumerate(s): # Get all the permutations of the substring without the current letter. sub_permutations = permutations(s[:i] + s[i+1:]) for sub_permutation in sub_permutations: permutations.append(letter + sub_permutation) # Sort the permutations. permutations.sort() return permutations"},{"prompt":"Train a neural network model in Python to identify whether a given animal is a cat or a dog.","completion":"import keras from keras.models import Sequential from keras.layers import Dense, MaxPool2D, Conv2D, Flatten from keras.preprocessing.image import ImageDataGenerator # Setting up the parameters img_width, img_height = 150, 150 batch_size = 32 epochs = 10 # Create the model model = Sequential() model.add(Conv2D(32, (3,3), activation='relu', input_shape=(img_width, img_height, 3))) model.add(MaxPool2D(pool_size=(2,2))) model.add(Conv2D(32, (3,3), activation='relu')) model.add(MaxPool2D(pool_size=(2,2))) model.add(Flatten()) model.add(Dense(256, activation='relu')) model.add(Dense(1, activation='sigmoid')) model.compile(loss=\\"binary_crossentropy\\", optimizer=\\"rmsprop\\", metrics=['accuracy']) # Data preprocessing train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True) train_generator = train_datagen.flow_from_directory('data/train', target_size=(150,150), batch_size=batch_size, class_mode='binary') test_datagen = ImageDataGenerator(rescale=1./255) test_generator = test_datagen.flow_from_directory('data/test', target_size=(150,150), batch_size=batch_size, class_mode='binary') # Training the model model.fit_generator( train_generator, steps_per_epoch=500, epochs=epochs, validation_data=test_generator, validation_steps=100 )"},{"prompt":"Describe the differences between objects and classes in Python.","completion":"Objects are instances of classes and are used to store data and behavior. Class is a blueprint or template for objects. It defines the attributes and methods of an object. Classes are typically used to represent real world objects or concepts and encapsulate both data and behavior. Objects are essentially specific instances of a class and can be created by instantiating the class. Objects are used to interact with the user and manipulate data. They are also used to create relationships between objects and between classes."},{"prompt":"Create a function that takes a list of strings (words or phrases) as an argument and returns the longest string in the list. [“javascript”, “python”, “ruby”]","completion":"function findLongestString(strList) { let longestStr = ''; strList.forEach(str => { if (str.length > longestStr.length) { longestStr = str; } }) return longestStr; } let longestWord = findLongestString(['javascript', 'python', 'ruby']); console.log(longestWord); // Output: 'javascript'"},{"prompt":"Write a Python program to classify a given set of inputs into clusters using kmeans algorithm data_points = [[2, 2], [5, 5], [2, 4], [5, 4], [6, 2], [7, 3]]","completion":"from sklearn.cluster import KMeans import numpy as np data_points = np.array(data_points) kmeans = KMeans(n_clusters=2,random_state=0).fit(data_points) clusters = kmeans.labels_ print(clusters)"},{"prompt":"Write a python program to filter a list of numbers and remove those that are divisible by 3. nums = [12, 14, 16, 18, 20, 21, 24]","completion":"def filter_list(nums): return [num for num in nums if num % 3 != 0] print(filter_list(nums)) # Output: [12, 14, 20, 21]"},{"prompt":"Write a Python class for a book library. The class should have two methods: one for adding books to the library, and one for searching for books by title. Not applicable","completion":"class BookLibrary: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def search_by_title(self, title): return [book for book in self.books if book.title.lower() == title.lower()]"},{"prompt":"Create a Python program that accepts a sentence as an input and prints out the number of vowels present in that sentence. This is a sentence.","completion":"def count_vowels(sentence): vowels = \\"aeiouAEIOU\\" count = 0 for character in sentence: if character in vowels: count += 1 return count sentence = input(\\"Enter a sentence: \\") vowel_count = count_vowels(sentence) print(f\\"Number of vowels in the sentence is {vowel_count}\\")"},{"prompt":"Create a Python 3 function to calculate the length of a string. string = 'hello, world!'","completion":"def get_str_length(string): return len(string) print(get_str_length(string)) # outputs 13"},{"prompt":"Write a function in Python that takes two parameters n and k and returns the number of ways to jump k steps, starting from 0, taking 1 or 2 steps at a time, and not going beyond n. n = 4, k = 4","completion":"def steps(n, k): if k == 0 or n == k: return 1 if n > k: return steps(n-1, k-1) + steps(n-2, k-1) else: return 0"},{"prompt":"Write a method in Python to calculate the sum of two numbers without using any builtin functions. 3, 5","completion":"def sum_two_numbers(a, b): result = 0 for i in range(b): result += a return result a = 3 b = 5 print(sum_two_numbers(a, b))"},{"prompt":"Build logic in Python for validating a standard credit card number. 4556 6849 0002 2321","completion":"import re # validates a credit card number def validateCreditCardNumber(num): # check the length is 16 digits if len(num) != 16: return False # use a regex to match the input pattern = \\"^([0-9]{4})([0-9]{4})([0-9]{4})([0-9]{4})\\" if re.match(pattern, num): return True return False # testing print(validateCreditCardNumber('4556 6849 0002 2321')) # True print(validateCreditCardNumber('123456789')) # False"},{"prompt":"Create an API endpoint in Python that can accept a POST request containing a JSON object. Not applicable","completion":"from flask import Flask, request, jsonify app = Flask(name) @app.route('/api/endpoint', methods=['POST']) def endpoint(): data = request.get_json() # Do something with data return jsonify({'message': 'Success'}) if name == 'main': app.run(debug=True)"},{"prompt":"Generate an efficient implementation of quicksort in Python. No input.","completion":"def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) result = quicksort([3,6,8,10,1,2,1]) print(result)"},{"prompt":"What is the code to shuffle an array in Python?","completion":"import random array = [1,2,3,4,5] random.shuffle(array)"},{"prompt":"Create a Python program which takes a list of numbers and adds them together. [1, 2, 3, 4, 5]","completion":"def sum_list(nums): total = 0 for num in nums: total += num return total nums = [1, 2, 3, 4, 5] print(sum_list(nums)) # 15"},{"prompt":"Develop a machine learning model in Python to predict house prices based on square footage, number of rooms, and location. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split # Load and preprocess the data df = pd.read_csv('house_data.csv') X = df[['sqft', 'rooms', 'loc']] y = df['price'] # Split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Train the model model = LinearRegression() model.fit(X_train, y_train) # Predict values for test set y_pred = model.predict(X_test) # Evaluate the model score = model.score(X_test, y_test) print(\\"The model accuracy is:\\", score)"},{"prompt":"Create a function in Python to remove the given element from any list if it is present. Not applicable","completion":"def remove_item(lst, item): try: lst.remove(item) return lst except ValueError: return lst"},{"prompt":"Create a Python program for classifying an array of numbers into one of three classes (low, medium, or high). Example array: [5, 0, 2, 10, 15]","completion":"def classify(arr): output = [] for n in arr: if n < 0: output.append('low') elif n < 5: output.append('medium') else: output.append('high') return output # Example Usage example_array = [-5, 0, 2, 10, 15] result = classify(example_array) print(result) # ['low', 'medium', 'medium', 'high', 'high']"},{"prompt":"Generate a Python class to check whether a string contains all the vowels or not.","completion":"class CheckVowel(): def __init__(self, string): self.string = string def check_vowel(self): vowels = \\"aeiouAEIOU\\" for char in self.string: if char not in vowels: return False return True"},{"prompt":"Construct a class in Python to implement a queue.","completion":"class Queue(object): def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def enqueue(self, item): self.items.insert(0, item) def dequeue(self): return self.items.pop() def size(self): return len(self.items)"},{"prompt":"Edit the given Python program to handle a KeyError. my_dict = { 'key1' : 'value1', 'key2': 'value2' } value2 = my_dict['key3']","completion":"my_dict = { 'key1' : 'value1', 'key2': 'value2' } try: value2 = my_dict['key3'] except KeyError: print(f\\"The key 'key3' does not exist in the dictionary.\\")"},{"prompt":"Generate a Python program to find the index of an item in the given list. arr = [3,7,2,5]","completion":"def find_index(arr, item): for i, value in enumerate(arr): if item == value: return i return -1"},{"prompt":"Create a program that can generate anagrams from a set of words. ['python', 'coding', 'programming']","completion":"\\"\\"\\" Create a program to generate anagrams from a set of words. # Importing libraries import itertools def anagrams(words): # Generate all permutations of the given words anagram_list = [''.join(permutation) for permutation in itertools.permutations(words)] # Return the list of anagrams return anagram_list # Sample input words = ['python', 'coding', 'programming'] # Function call anagram_list = anagrams(words) # Printing output print(anagram_list) \\"\\"\\""},{"prompt":"Create a Python program to implement the Tower of Hanoi problem.","completion":"def tower_of_hanoi(source, dest, aux, n): if n == 1: print('Move Disk 1 from %s to %s' %(source, dest)) return tower_of_hanoi(source, aux, dest, n-1) print('Move Disk %d from %s to %s' %(n, source, dest)) tower_of_hanoi(aux, dest, source, n-1) n = 4 tower_of_hanoi('A', 'C', 'B', n)"},{"prompt":"Create a python program which takes the input of a sentence and outputs the frequency of each alphabet in the sentence. This is a test sentence.","completion":"def get_char_frequency(sentence): freq_dict = {} for ch in sentence: if ch in freq_dict: freq_dict[ch] += 1 else: freq_dict[ch] = 1 return freq_dict # main if __name__ == '__main__': sentence = \\"This is a test sentence.\\" freq_dict = get_char_frequency(sentence) for ch in freq_dict: print(f\\"{ch}: {freq_dict[ch]}\\")"},{"prompt":"Create a Python program that can generate a dictionary of the frequency of words in a given phrase.","completion":"def word_count(phrase): word_dict = {} words = phrase.split() for word in words: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict"},{"prompt":"Explain the concept of tail recursion with an example in Python.","completion":"A tail call is a kind of call in which the calling function does not perform any further computation after calling the function. A function is said to be tail recursive if the recursive call is in the tail position of the function. Consider the following example of a tail recursive function to calculate the nth Fibonacci number using Python: def Fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return Fibonacci(n-1) + Fibonacci(n-2) In this example, no computation is performed after the recursive call and the recursive call is present at the end of the function which makes this function a tail recursive function and optimization of tail recursion is possible."},{"prompt":"Refactor the following Python function to use list comprehensions. def square_numbers(nums): result = [] for num in nums: result.append(num ** 2) return resul","completion":"def square_numbers(nums): return [num ** 2 for num in nums]"},{"prompt":"Rewrite the following code snippet from JavaScript to Python, taking into account any changes in syntax or function calls. let array = [1, 2, 3, 4, 5]; console.log(array);","completion":"array = [1, 2, 3, 4, 5] print(array)"},{"prompt":"Design a function in Python to create a dictionary object mapping the letters of the alphabet to their corresponding numerals.","completion":"def create_alphabet_mapping(): alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" code = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26] alphabet_mapping = dict(zip(alphabet, code)) return alphabet_mapping # Test print(create_alphabet_mapping())"},{"prompt":"Write a Python script that sorts an array of strings in alphabetical order case insensitively. [Apple, Banana, orange]","completion":"def sort_array(arr): arr.sort(key = lambda x: x.lower()) return arr # driver code arr = [\\"Apple\\", \\"Banana\\", \\"orange\\"] print(sort_array(arr)) # Output: ['Apple', 'Banana', 'orange']"},{"prompt":"Write a Python program to convert a list of lists into a dictionary. list = [[1, 'a', 'A'], [2, 'b', 'B'], [3, 'c', 'C'], [4, 'd', 'D']]","completion":"dictionary = dict(list)"},{"prompt":"Develop an algorithm in Python to store a set of objects in the most efficient data structure. Objects: [1, 2, 3, 4, 5]","completion":"def store_elements(elements): store = [] for i in elements: store.append(i) return store objects = [1, 2, 3, 4, 5] storage = store_elements(objects) print(storage)"},{"prompt":"Write a function to remove every other element in a Python list in place. [1, 2, 3, 4, 5, 6]","completion":"def remove_other_list_elements_inplace(list_elements): list_elements[:] = [element for index, element in enumerate(list_elements) if (index + 1) % 2 == 1] return list_elements sample_list = [1,2,3,4,5,6] print(\\"Original List:\\", sample_list) remove_other_list_elements_inplace(sample_list) print(\\"Modified List:\\", sample_list)"},{"prompt":"Write a Python algorithm to find out whether a number is a palindrome or not.","completion":"def is_palindrome(n): n_str = str(n) rev_str = n_str[::-1] if n_str == rev_str: return True else: return False"},{"prompt":"Design and implement an artificial intelligence agent in Python using the Qlearning algorithm to solve a gridworld environment with 8x16 cells. 8x16 Gridworld Environme","completion":"import numpy as np # define the environment class GridWorld: def __init__(self, rows, cols, start): self.rows = rows self.cols = cols self.i = start[0] self.j = start[1] def set(self, rewards, actions): # rewards should be a dict of: (i, j): r (row, col): reward # actions should be a dict of: (i, j): A (row, col): list of possible actions self.rewards = rewards self.actions = actions def set_state(self, s): self.i = s[0] self.j = s[1] def current_state(self): return (self.i, self.j) def is_terminal(self, s): return s not in self.actions def move(self, action): # check if legal move first if action in self.actions[(self.i, self.j)]: if action == 'U': self.i -= 1 elif action == 'D': self.i += 1 elif action == 'R': self.j += 1 elif action == 'L': self.j -= 1 # return a reward (if any) return self.rewards.get((self.i, self.j), 0) def undo_move(self, action): # these are the opposite of what U/D/L/R should normally do if action == 'U': self.i += 1 elif action == 'D': self.i -= 1 elif action == 'R': self.j -= 1 elif action == 'L': self.j += 1 # raise an exception if we arrive somewhere we shouldn't be # should never happen assert(self.current_state() in self.all_states()) def game_over(self): # returns true if game is over, else false # true if we are in a state where no actions are possible return (self.i, self.j) not in self.actions def all_states(self): # possibly buggy but simple way to get all states # either a position that has possible next actions # or a position that yields a reward return set(self.actions.keys()) | set(self.rewards.keys()) def standard_grid(): # define a grid that describes the reward for arriving at each state # and possible actions at each state # the grid looks like this # x means you can't go there # s means start position # number means reward at that state # . . . 1 # . x . -1 # s . . . g = GridWorld(3,4,(2,0)) rewards = {(0,3):1, (1,3):-1} actions = { (0, 0): ('D', 'R'), (0, 1): ('L', 'R'), (0, 2): ('L', 'D', 'R'), (1, 0): ('U', 'D'), (1, 2): ('U', 'D', 'R'), (2, 0): ('U', 'R'), (2, 1): ('L', 'R'), (2, 2): ('L', 'R', 'U'), (2, 3): ('L', 'U'), } g.set(rewards, actions) return g def max_dict(d): # returns the argmax (key) and max (value) from a dictionary # put this into a function since we are using it so often max_key = None max_val = float('-inf') for k, v in d.items(): if v > max_val: max_val = v max_key = k return max_key, max_val def random_action(a, eps=0.1): # choose given a with probability 1 - eps + eps/|A| p = np.random.random() if p < (1 - eps): return a else: return np.random.choice(ALL_POSSIBLE_ACTIONS) def q_learning(env, num_episodes, discount_factor=1.0, alpha=0.7, epsilon=0.1): Q = defaultdict(lambda: np.zeros(env.action_space.n)) # keep track of useful statistics stats = plotting.EpisodeStats( episode_lengths=np.zeros(num_episodes), episode_rewards=np.zeros(num_episodes)) for i_episode in range(num_episodes): # Print out which episode we're on, useful for debugging. if (i_episode + 1) % 100 == 0: print(\\"rEpisode {}/{}.\\".format(i_episode + 1, num_episodes), end=\\"\\") sys.stdout.flush() # Reset the environment and pick the first action state = env.reset() action = random_action(env.action_space.sample(), epsilon) # one step in the environment for t in itertools.count(): # Take a step next_state, reward, done, _ = env.step(action) # Pick the next action next_action = random_action(env.action_space.sample(), epsilon) # Update statistics stats.episode_rewards[i_episode] += reward stats.episode_lengths[i_episode] = t # TD Update best_next_action = np.argmax(Q[next_state]) td_target = reward + discount_factor * Q[next_state][best_next_action] td_delta = td_target - Q[state][action] Q[state][action] += alpha * td_delta # done is True if episode terminated if done: break action = next_action state = next_state return Q, stats # run the q-learning algorithm Q, stats = q_learning(env, 500) # extract and print the optimal policy from the Q-table policy = np.array([np.argmax(Q[key]) if key in Q else -1 for key in np.arange(48)]).reshape((8,16)) # extract and print the value matrix from the Q-table V = np.array([np.max(Q[key]) if key in Q else 0 for key in np.arange(48)]).reshape((8,16)) # print the policy matrix print(\\"nPolicy (UP=0, DOWN=1, LEFT=2, RIGHT=3):\\") print(policy)"},{"prompt":"Slice and dice a given list in Python to filter out elements starting with the letter a. List: [apple, banana, orange, apricot]","completion":"lst = [\\"apple\\", \\"banana\\", \\"orange\\", \\"apricot\\"] filtered_list = [ele for ele in lst if ele[0] == 'a'] # printing filtered elements print(\\"filtered list: \\", filtered_list)"},{"prompt":"Write a Python program that takes in two lists and returns a merged list with unique elements. list1 = [1, 2, 3] list2 = [2, 3, 4]","completion":"list1 = [1, 2, 3] list2 = [2, 3, 4] merged_list = list(set(list1 + list2)) print(merged_list) #Output: [1, 2, 3, 4]"},{"prompt":"Generate Python code for printing the average of a list of numbers. [2, 5, 6, 7]","completion":"list = [2, 5, 6, 7] sum = 0 for num in list: sum += num average = sum / len(list) print(\\"Average:\\", average)"},{"prompt":"mplement a linear search using Python. [1, 2, 3, 4 ,5], 4","completion":"def linearSearch(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1 arr = [1, 2, 3, 4, 5] x = 4 result = linearSearch(arr, x) if result == -1: print('There is no element with value {}'.format(x)) else: print(\\"The element {} is found at index {}\\".format(x, result))"},{"prompt":"Write a code snippet in Python to randomly generate a string of length 20 comprised of characters 0 9.","completion":"import string import random def generate_random_string(string_length): random_string = ''.join(random.choices(string.digits, k=string_length)) return random_string print(generate_random_string(20))"},{"prompt":"Create a Python program tocreate a simple game of Hangman. The program should accept a single word as input and allow the user to guess characters of the word until the word is revealed or the user has exhausted all attempts. word = 'jupiter'","completion":"word = 'jupiter' attempts = len(word) correct_guesses = [] # Welcome message print('Welcome to Hangman! You have %d attempts to guess the word.' % attempts) # Main game loop while attempts > 0: #show progress word_progress = ''.join([('_' if letter not in correct_guesses else letter) for letter in word]) print('Word: %s' % word_progress) # prompt for user guess guess = input('Guess a letter: ') if guess not in correct_guesses: correct_guesses.append(guess) #store correct guess for displaying progress if guess in word: print('Correct! The letter %s is in the word.' % guess) if not '_' in word_progress: # if the entire word is revealed, the user won print('Congratulations! You won!') break else: attempts = attempts - 1 print('Wrong. You have %d attempts remaining.' % attempts) if attempts == 0: print('Sorry! You lost. The word was %s' % word)"},{"prompt":"Write a Python program to find the missing number in a list of integers. [1,2,4,5,6,7,8]","completion":"def find_missing_num(lst): expected_num = sum(range(lst[0],lst[-1]+1)) actual_sum = sum(lst) return expected_num - actual_sum lst = [1,2,4,5,6,7,8] missing_num = find_missing_num(lst) print(\\"The missing number is\\", missing_num)"},{"prompt":"Create a class for the 'customer' entity in Python, providing the following functionalities: get customer name and get customer phone number.","completion":"class Customer: def __init__(self, name, phone_number): self.name = name self.phone_number = phone_number def get_name(self): return self.name def get_phone_number(self): return self.phone_number"},{"prompt":"Build a web application with Django and React. The React application should include user authentication, displaying posts, and a way to post new posts. Not applicable","completion":"# Backend # Create Django Project django-admin startproject blog # Create Django App python manage.py startapp posts # Add app to INSTALLED_APPS # settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'posts.apps.PostsConfig', ] # Add authentication to URLs # urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('accounts/', include('django.contrib.auth.urls')), path('', include('posts.urls')) ] # Create Model # posts/models.py from django.db import models from django.contrib.auth.models import User class Post(models.Model): title = models.CharField(max_length=200) content = models.TextField() author = models.ForeignKey(User, on_delete=models.CASCADE) # Create Serializer # posts/serializers.py from rest_framework import serializers from .models import Post class PostSerializer(serializers.ModelSerializer): author = serializers.StringRelatedField() class Meta: model = Post fields = ['id', 'title', 'content', 'author'] # Create ViewSet # posts/views.py from rest_framework import viewsets from .serializers import PostSerializer from .models import Post class PostViewSet(viewsets.ModelViewSet): queryset = Post.objects.all() serializer_class = PostSerializer # Add URLs # posts/urls.py from django.urls import path from .views import PostViewSet urlpatterns = [ path('posts/', PostViewSet.as_view({'get': 'list'}), name='post-list'), path('posts/<int:pk>/', PostViewSet.as_view({'get': 'retrieve'}), name='post-detail'), path('posts/new/', PostViewSet.as_view({'post': 'create'})) ] # Frontend (React) # Create React App npx create-react-app blog-frontend # Install Axios npm install axios # Create Routes # src/routes.js import React, { useState } from 'react'; import { Route, useHistory, Switch } from 'react-router-dom'; // Components import Home from './pages/Home'; import Login from './pages/Login'; import Register from './pages/Register'; import PostList from './pages/PostList'; import PostCreate from './pages/PostCreate'; const Routes = () => { const history = useHistory(); return ( <Switch> <Route exact path=\\"/\\"> <Home/> </Route> <Route exact path=\\"/login\\" component={Login} /> <Route exact path=\\"/register\\" component={Register} /> <Route exact path=\\"/posts\\" component={PostList} /> <Route exact path=\\"/posts/create\\" component={PostCreate} /> </Switch> ); }; export default Routes;"},{"prompt":"Write a function in Python that takes a single argument, a list of numbers, and returns a single number the sum of all the numbers in the list. [1, 2, 3, 4, 5]","completion":"def add_list(numbers): total = 0 for number in numbers: total += number return total"},{"prompt":"Generate a Python program to print all possible permutations of a given string. Input string: ABC","completion":"from itertools import permutations # Get all permutations of length 2 # and length 2 perm = permutations(\\"ABC\\", 2) # Print the obtained permutations for i in list(perm): print(i) # Get all permutations of length 3 # and length 3 perm = permutations(\\"ABC\\") # Print the obtained permutations for i in list(perm): print(i)"},{"prompt":"Create a python function that takes two inputs as a string and returns their concatenated output. String a = 'Hello' String b = 'World'","completion":"def concat(a,b): return a+b"},{"prompt":"Create a python function to generate 10 random numbers between 1 to 10.","completion":"import random def generate_random_numbers(): numbers = [] for _ in range(10): numbers.append(random.randint(1,10)) return numbers random_numbers = generate_random_numbers() print(random_numbers)"},{"prompt":"Write a function in Python that takes three positive integers as arguments and returns the largest one.","completion":"def get_largest(a, b, c): largest = a if b>largest: largest = b if c>largest: largest = c return largest print(get_largest(10, 20, 15))"},{"prompt":"Write a Python function that computes the average of a given array of numbers.","completion":"def find_average(numbers): return sum(numbers) / len(numbers)"},{"prompt":"Develop a principle component analysis (PCA) algorithm in Python","completion":"def pca(data): # center data data = data - np.mean(data, axis=0) # calculate covariance matrix of the data cov = np.cov(data, rowvar=False) # calculate eigenvectors & eigenvalues of the covariance matrix eig_vals, eig_vecs = np.linalg.eig(cov) # sort eigenvalue in decreasing order idx = np.argsort(eig_vals)[::-1] eig_vals = eig_vals[idx] eig_vecs = eig_vecs[:,idx] # select the first n eigenvectors (n is desired dimension of rescaled data array, or dims_rescaled_data) n_eig_vecs = eig_vecs[:, :dims_rescaled_data] # transform data in new subspace rescaled_data = np.dot(data, n_eig_vecs) return rescaled_data"},{"prompt":"Create a Python program to reverse a number without using any additional memory. 12345","completion":"def reverseNumber(num): reverse = 0 while num > 0: remainder = num % 10 reverse = (reverse * 10) + remainder num = num // 10 return reverse print(reverseNumber(12345)) # 54321"},{"prompt":"Develop a Python class that represents a Date object.","completion":"class Date: def __init__(self, day, month, year): self.day = day self.month = month self.year = year def get_date(self): return \\"{}/{}/{}\\".format(self.day, self.month, self.year) def set_date(self, day, month, year): self.day = day self.month = month self.year = year return self.get_date()"},{"prompt":"Design a Python class to represent a football team. The class should contain the ability to add player names to the team and to calculate the average age and the highest scorer of the team. Not applicable","completion":"class FootballTeam: def __init__(self): self.players = [] def add_player(self, player): self.players.append(player) def average_age(self): total_age = 0 for player in self.players: total_age += player.age return total_age / len(self.players) def highest_scorer(self): highest_scorer = self.players[0] for player in self.players: if player.score > highest_scorer.score: highest_scorer = player return highest_scorer"},{"prompt":"Create a web service to fetch data from a database.","completion":"A web service can be created using programming languages such as Python, JavaScript, etc. It will contain code to connect to the database, fetch the data, and return it in the appropriate format."},{"prompt":"Write an algorithm in Python to find the missing number in a given sequence of numbers [1, 2, 4, 5, 6, 7, 8]","completion":"def findMissingNumber(input): n = len(input) + 1 # calculate the total numbers total = (n * (n+1)) / 2 # calculate the sum of numbers missing_num = total - sum(input) return missing_num # Driver code input = [1, 2, 4, 5, 6, 7, 8] missing_num = findMissingNumber(input) print(\\"The missing number is:\\", missing_num)"},{"prompt":"Generate a Python code snippet to convert a given Fahrenheit temperature to Celsius.","completion":"def fahrenheit_to_celsius(fahrenheit): celsius = (fahrenheit - 32) * (5 / 9) return celsius"},{"prompt":"Write a Python function to add 5 to each of the numbers in a list. [1, 2, 3, 4, 5]","completion":"def add_five(nums): return [num + 5 for num in nums] result = add_five([1, 2, 3, 4, 5]) print(result)"},{"prompt":"Create a Python program to print all the numbers between 1 and 5.","completion":"for num in range(1, 6): print(num)"},{"prompt":"Write a Python program to calculate the sum of a series of odd numbers between the two pixel, with the first number being 1. pixel1 = 25; pixel2 = 50","completion":"sum = 455 total = 0 for i in range(pixel1, pixel2): if i % 2 != 0: total += i print('sum =', total)"},{"prompt":"Provide an algorithm in python to calculate the power of an integer.","completion":"def power_of_integer(x, n): if n == 0: return 1 if n % 2 == 0: return power_of_integer(x*x, n//2) else: return x * power_of_integer(x*x, (n-1)//2)"},{"prompt":"Optimize the following Python code to be as efficient as possible. def fun(N): result = 0 for i in range(1, N+1): for j in range(1, N+1): result += i + j return resul","completion":"def fun(N): result = (N*(N+1))/2 result *= (2 * N + 1) result /= 3 return int(result)"},{"prompt":"Create a program in python to fulfill the following requirement: Given a binary tree, print it in level order (also known as breadthfirst search).","completion":"def levelOrder(node): # Base Case if node is None: return # Create an empty queue for level order tarversal queue = [] # Enqueue Root and initialize height queue.append(node) while(len(queue) > 0): # Print front of queue and remove it from queue print(queue[0].data), node = queue.pop(0) #Enqueue left child if node.left is not None: queue.append(node.left) # Enqueue right child if node.right is not None: queue.append(node.right)"},{"prompt":"Create a Python program to calculate day of the week for a given date. (2020, 05, 22)","completion":"import datetime day, month, year = (2020, 05, 22) weekdays = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] inpDate = datetime.date(year, month, day) dayOfWeek = inpDate.weekday() print(weekdays[dayOfWeek])"},{"prompt":"Write a Python script to optimize a machine learning model. The script should iterate over the hyperparameters and log the results for each iteration. Not applicable","completion":"import numpy as np from sklearn.model_selection import RandomizedSearchCV def model_optimizer(model, param_grid, data, target): # determine number of hyperparameters n_params = len(param_grid.keys()) # initialize randomized search search = RandomizedSearchCV(estimator=model, param_distributions=param_grid, n_iter=10, verbose=1, cv=3) # perform randomized search search.fit(data, target) # report best configuration parameters best_params = search.best_params_ print('Best Parameters: {}'.format(best_params)) # report best score best_score = np.round(search.best_score_ * 100, 2) print('Best Score: {}%'.format(best_score))"},{"prompt":"Create a Python script to find the largest Fibonacci number which is less than a provided integer. n = 10","completion":"def largestFibonacciNumber(n): # Initialize the starting two fibonacci numbers a = 0 b = 1 # Iterate over every index while b < n: temp = a a = b b = temp + b return a # Test Cases print(largestFibonacciNumber(10)) # output: 8 print(largestFibonacciNumber(50)) # output: 34"},{"prompt":"Generate a Python program that returns the kth smallest element from an unsorted array of size n, without changing the order of elements. n = 5, k = 3","completion":"def kth_smallest(arr, k): n = len(arr) # Iterate through all elements for i in range(n): # Iterate from k till n for j in range(i+1, n): if arr[i] > arr[j] : arr[i], arr[j] = arr[j], arr[i] return arr[k-1] # Driver code n = 5 arr = [12, 3, 5, 7, 19] k = 3 print(kth_smallest(arr, k))"},{"prompt":"Create an algorithm in Python that takes a string and returns the longest palindromic substring in it. Not applicable","completion":"# Function to find the longest palindromic substring def longestPalindrome(string): # Find the longest palindrome in the string n = len(string) start = 0 maxLength = 0 for i in xrange(1, n): # Case 1 start = i-1 end = i while start >= 0 and end < n and string[start] == string[end]: if end-start+1 > maxLength: maxLength = end-start+1 result = string[start:end+1] start -= 1 end += 1 # Case 2 start = i-1 end = i+1 while start >= 0 and end < n and string[start] == string[end]: if end-start+1 > maxLength: maxLength = end-start+1 result = string[start:end+1] start -= 1 end += 1 return result"},{"prompt":"Create a python script that takes a list of numbers, shuffles them and prints the list. [1, 2, 3, 4, 5]","completion":"import random mylist = [1, 2, 3, 4, 5] random.shuffle(mylist) print(mylist)"},{"prompt":"Create a python for loop to print the elements of a given list l. l = [1, 2, 3, 4, 5, 6]","completion":"for element in l: print(element)"},{"prompt":"Create a Python program to merge two lists into a new one.","completion":"def merge_lists(list1, list2): result = [] for item in list1: result.append(item) for item in list2: result.append(item) return result"},{"prompt":"Write a simple Python program that takes as input a commaseparated list of numbers and outputs the sum of the numbers. 1,2,3,4,5","completion":"# This program takes in a comma-separated list of numbers and outputs the sum def sum_of_numbers(lst): # Split the input string on the comma numbers = lst.split(',') # Convert the strings in the list to integers numbers = [int(number) for number in numbers] # Add up all the numbers in the list total = sum(numbers) # Return the sum return total # Get input lst = input(\\"Please enter a comma-separated list of numbers: \\") # Call the function total = sum_of_numbers(lst) # Print the output print(\\"The sum of the numbers is:\\", total)"},{"prompt":"Create a function to filter out strings that are longer than 10 characters. [Hello, World, Python, Programming]","completion":"def filter_long_strings(arr): result = [] for word in arr: if len(word) <= 10: result.append(word) return result myArr = [\\"Hello\\", \\"World\\", \\"Python\\", \\"Programming\\"] print(filter_long_strings(myArr)) # Output: [\\"Hello\\", \\"World\\", \\"Python\\"]"},{"prompt":"Create a Python script to train a sentiment classifier with word vectors generated by a pretrained GloVe model. The classifier should output a score between 1 to 1. The sample training dataset consists of 500 movie reviews, each with a label for whether the review is postive or negative (1.0 and 1.0 respectively).","completion":"import numpy as np from gensim.scripts.glove2word2vec import glove2word2vec from gensim.models.keyedvectors import KeyedVectors # GloVe model glove2word2vec(glove_input_file=\\"glove_path\\", word2vec_output_file=\\"glove_word2vec.txt\\") glove_w2v = KeyedVectors.load_word2vec_format(\\"glove_word2vec.txt\\") # Pre-process data reviews = np.array(500_reviews_data) reviews_vectors = [np.mean([glove_w2v[word] for word in review if word in glove_w2v] or [np.zeros(300)],axis=0) for review in reviews] # Labels labels = np.array(500_reviews_labels) # Train model model = LogisticRegression() model.fit(reviews_vectors, labels) # Generate score score = model.predict_proba(review_vector) score = (score[0] - 0.5)*2 # scale -1 to 1 print(score)"},{"prompt":"Create a function in Python that takes an integer input and prints all combinations of the numbers. 4","completion":"def permutations(n): for i in range(n+1): for j in range(n+1): for k in range(n+1): for l in range(n+1): print(i,j,k,l) # Calling the function permutations(4)"},{"prompt":"Write a Python program to optimize a function for finding the minimum value using an evolutionary algorithm such as differential evolution. def function(x): return x**2 0.5 * x 2","completion":"import random import numpy as np def differential_evolution(f, bounds, mut=0.8, crossp=0.7, popsize=20, its=1000): # Initialization dim = len(bounds) population = np.random.rand(popsize, dim) min_b, max_b = np.asarray(bounds).T diff = np.fabs(min_b - max_b) population_denorm = min_b + population * diff fitness = np.asarray([f(ind) for ind in population_denorm]) best_idx = np.argmin(fitness) best = population_denorm[best_idx] for i in range(its): for j in range(popsize): # Mutation idxs = [idx for idx in range(popsize) if idx != j] a, b, c = population[np.random.choice(idxs, 3, replace = False)] mutation = a + mut * (b - c) mutation = np.clip(mutation, 0, 1) # Crossover cross_points = np.random.rand(dim) < crossp if not np.any(cross_points): cross_points[np.random.randint(0, dim)] = True trial = np.where(cross_points, mutation, population[j]) trial_denorm = min_b + trial * diff # Selection f = f(trial_denorm) if f < fitness[j]: fitness[j] = f population[j] = trial if f < fitness[best_idx]: best_idx = j best = trial_denorm # Printing print(\\"Iteration: {}, Best Value: {:.4f}\\".format(i, f)) return best # Function to optimize def function(x): return x**2 - 0.5 * x - 2 # Search Space bounds = [(-10, 10)] # Run the optimization result = differential_evolution(function, bounds) print(\\"Optimized Value: {:.4f}\\".format(function(result)))"},{"prompt":"Write a Python program to optimize the given array such that its elements are in the range of 0 to 100. [3, 105, 10, 35, 120]","completion":"def optimize_array(arr): for i in range(len(arr)): # If the element is less than 0 if arr[i] < 0: arr[i] = 0 # If the element is greater than 100 if arr[i] > 100: arr[i] = 100 return arr arr = [3, 105, -10, 35, 120] print(optimize_array(arr))"},{"prompt":"Edit the following line of code in Python to print out the result. print(3 + 5 x 2)","completion":"print(3 + (5 * 2))"},{"prompt":"Write a Python program to find the number of ways to express n as the sum of 1, 3, and 4. 5","completion":"def num_ways_sum(n): # base case if n == 0 or n == 1: return 1 # recursive case return num_ways_sum(n - 1) + num_ways_sum(n - 3) + num_ways_sum(n - 4) # example print(num_ways_sum(5))"},{"prompt":"Create a program in Python that performs basic functions on a linked list.","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None # Function to append a new node at the end def append(self, new_data): new_node = Node(new_data) #Check if the linked list is empty if self.head is None: self.head = new_node return # Otherwise, traverse till the last node current = self.head while current.next: current = current.next current.next = new_node # Function to insert a node at a specific position def insert(self, prev_node, new_data): #Check if the given prev_node is valid if prev_node is None: return new_node = Node(new_data) new_node.next = prev_node.next prev_node.next = new_node # Function to delete a node given the value def delete(self, data): if self.head is None: return current = self.head # Special case for head node if current and current.data == data: self.head = current.next current = None return # Also traverse the list to find the node we want to delete while current and current.data != data: prev_node = current current = current.next if current is None: return # Unlink the node from the list prev_node.next = current.next current = None"},{"prompt":"Write a Python code fragment to optimize the given function. def search(data, x): for element in data: if element == x: return True return False","completion":"def search(data, x): if x in data: return True return False"},{"prompt":"Construct a python program that prints a multiplication table given two numbers (x and y). int x = 5; int y = 10;","completion":"int x = 5; int y = 10; for i in range(1, y+1): for j in range(1, x+1): print('{} x {} = {}'.format(i, j, i*j))"},{"prompt":"Construct a python script to display the frequency of each words appearing in a document The text document contains the following content: The quick brown fox jumps over the lazy dog.","completion":"from collections import Counter with open('text.txt', 'r') as f: data = f.read().lower().split() word_counter = Counter(data) # Print the sorted most common 10 words for word, count in word_counter.most_common(10): print('{}: {}'.format(word, count))"},{"prompt":"Use Python to modify a JSON object for specific keyvalue pairs. Object: {name: Tom, age: 25, occupation: Data Scientist, hobbies: [Reading, Badminton]}","completion":"# Modify a JSON object import json object = {'name': 'Tom', 'age': 25, 'occupation': 'Data Scientist', 'hobbies': ['Reading', 'Badminton']} if 'occupation' in object: object['occupation'] = 'AI Engineer' if 'hobbies' in object: object['hobbies'].append('Cycling') print(json.dumps(object,indent=2))"},{"prompt":"Take a given Python dictionary and transform it to a standardized format using JSON. my_dict = { 'name': 'John Doe', 'age': 42, 'occupation': 'Programmer' }","completion":"import json my_dict = { 'name': 'John Doe', 'age': 42, 'occupation': 'Programmer' } # Transform to JSON my_json = json.dumps(my_dict) print(my_json) # Output: {\\"name\\":\\"John Doe\\",\\"age\\":42,\\"occupation\\":\\"Programmer\\"}"},{"prompt":"Create a Python program to add twodimensional lists and display the sum in a formatted tabular form. Two 2Dimensional lists of equal size: list1 = [[1,2,3], [4,5,6], [7,8,9]] list2 = [[3,4,5], [6,7,8], [9,10,11]]","completion":"list1 = [[1,2,3], [4,5,6], [7,8,9]] list2 = [[3,4,5], [6,7,8], [9,10,11]] sum = [] # Iterating each of the list for i in range(len(list1)): row_sum = [] for j in range(len(list1[0])): row_sum.append(list1[i][j] + list2[i][j]) sum.append(row_sum) # Printing the sum for i in range(len(sum)): for j in range(len(sum[0])): print(sum[i][j], end = \\" \\") print() # Output 4 6 8 10 12 14 16 18 20"},{"prompt":"Develop a Python program to calculate the sum of all the elements in an array. Array = [1,2,3,4,5]","completion":"def calculateSum(arr, n): # Initialize result sum = 0 # using foreach loop to find sum for i in arr: sum += arr[i] return sum # Driver code arr = [1,2,3,4,5] n = len(arr) print(\\"Sum is\\",calculateSum(arr, n))"},{"prompt":"Given a 2D array in Python, write a code to calculate the sum of all elements. arr = [[1, 2, 3], [4, 5, 6], [7 , 8, 9]]","completion":"total = 0 for row in arr: for num in row: total += num print(total) # 45"},{"prompt":"Compose a Python program to print the first hundred odd numbers. Not appliable","completion":"# declaring an empty list odds = [] # looping for a range of 1 to 100 for n in range(1,101): # check if the number is odd if n % 2 != 0: # add the odd numbers to the list odds.append(n) # print the list print(odds)"},{"prompt":"Edit the following Python code to make it run without any errors def find_sum(x): sum = 0; for i in x: sum += i retur","completion":"def find_sum(x): sum = 0 for i in x: sum += i return sum"},{"prompt":"Write a Python function to remove a specific element from a list. list = [10,20,30,40]","completion":"def remove_element(list, element): for i in range(len(list)): if list[i] == element: del list[i] break return list list = remove_element(list,40)"},{"prompt":"Create an algorithm in Python to find the longest continuous sequence of zeros in a binary string. Example binary string: 1101011000","completion":"def longestZeroSeq(inputStr): maxLength = 0 currentLength = 0 for c in inputStr: if c == '0': currentLength += 1 else: maxLength = max(maxLength, currentLength) currentLength = 0 maxLength = max(maxLength, currentLength) return maxLength"},{"prompt":"Create a function in Python that flattens a nested list.","completion":"def flatten_list(lst): flattened = [] for i in lst: if type(i) == list: flattened += flatten_list(i) else: flattened.append(i) return flattened"},{"prompt":"Optimize a given program written in Python. def get_factorial(n): if n == 1 or n == 0: return 1 else: return n * get_factorial(n1)","completion":"def get_factorial(n): result = 1 for i in range(1, n + 1): result *= i return result"},{"prompt":"Update the below Python code to the dynamic programming approach, for finding a maximum subarray of elements, given in an array. arr [2, 3, 6, 5, 1,1]","completion":"def max_subarray(arr): n = len(arr) max_sum_so_far = arr[0] ending_here_max_sum = arr[0] for i in range(1, n): current_max_sum_with_last_element_i = max(arr[i], ending_here_max_sum + arr[i]) max_sum_so_far = max(max_sum_so_far, current_max_sum_with_last_element_i) ending_here_max_sum = current_max_sum_with_last_element_i return max_sum_so_far"},{"prompt":"Write an IPv4 address verification function in Python. 192.168.0.1","completion":"def check_valid_ip(ip_addr): ip = ip_addr.split(\\".\\") if(len(ip) == 4 and int(ip[0]) <= 255 and int(ip[1]) <= 255 and int(ip[2]) <= 255 and int(ip[3]) <= 255): return True else: return False"},{"prompt":"Create a simple chatbot in Python using NLTK Not applicable","completion":"import nltk from nltk.stem import WordNetLemmatizer lemmatizer = WordNetLemmatizer() import json import pickle import numpy as np from keras.models import Sequential from keras.layers import Dense, Activation, Dropout from keras.optimizers import SGD words=[] classes = [] documents = [] ignore_words = ['?', '!'] data_file = open('intents.json').read() intents = json.loads(data_file) # preprocessing data for intent in intents['intents']: for pattern in intent['patterns']: # tokenize each word w = nltk.word_tokenize(pattern) words.extend(w) # add documents in the corpus documents.append((w, intent['tag'])) # add to our classes list if intent['tag'] not in classes: classes.append(intent['tag']) # lemmaztize and lower each word and remove duplicates words = [lemmatizer.lemmatize(w.lower()) for w in words if w not in ignore_words] words = sorted(list(set(words))) # sort classes classes = sorted(list(set(classes))) # documents = combination between patterns and intents print (len(documents), \\"documents\\") # classes = intents print (len(classes), \\"classes\\", classes) # words = all words, vocabulary print (len(words), \\"unique lemmatized words\\", words) # create our training data training = [] output_empty = [0] * len(classes) for doc in documents: # initialize our bag of words bag = [] # list of tokenized words for the pattern pattern_words = doc[0] # lemmatize each word pattern_words = [lemmatizer.lemmatize(word.lower()) for word in pattern_words] # create our bag of words array with 1, if word match found in current pattern for w in words: bag.append(1) if w in pattern_words else bag.append(0) # output is a '0' for each tag and '1' for current tag (for each pattern) output_row = list(output_empty) output_row[classes.index(doc[1])] = 1 training.append([bag, output_row]) # shuffle our features and turn into np.array random.shuffle(training) training = np.array(training) # create train and test lists. X - patterns, Y - intents train_x = list(training[:,0]) train_y = list(training[:,1]) # Create model - 3 layers. First layer 128 neurons, second layer 64 neurons and 3rd output layer contains number of neurons # equal to number of intents to predict output intent with softmax model = Sequential() model.add(Dense(128, input_shape=(len(train_x[0]),), activation='relu')) model.add(Dropout(0.5)) model.add(Dense(64, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(len(train_y[0]), activation='softmax')) # Compile model. Stochastic gradient descent with Nesterov accelerated gradient gives good results for this model sgd = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True) model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy']) # fitting and saving the model hist = model.fit(np.array(train_x), np.array(train_y), epochs=200, batch_size=5, verbose=1) model.save('chatbot_model.h5', hist) print(\\"model created\\")"},{"prompt":"Generate a TensorFlow model in Python that uses the MNIST dataset to classify handwritten digits.","completion":"import tensorflow as tf from tensorflow.keras.datasets import mnist from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense, Dropout, Flatten from tensorflow.keras.layers import Conv2D, MaxPooling2D # Load the data (x_train, y_train), (x_test, y_test) = mnist.load_data() # Build the model model = Sequential() model.add(Flatten(input_shape=(28, 28))) model.add(Dense(128, activation=\\"relu\\")) model.add(Dense(10, activation=\\"softmax\\")) # Compile the model model.compile(loss=\\"sparse_categorical_crossentropy\\", optimizer=\\"adam\\", metrics=[\\"accuracy\\"]) # Train the model model.fit(x_train, y_train, epochs=10) # Evaluate the model score = model.evaluate(x_test, y_test, verbose=0) print(\\"Test loss:\\", score[0]) print(\\"Test accuracy:\\", score[1])"},{"prompt":"Write a Python program to insert a new item into a given list at a specified index. my_list = [1, 3, 5, 7] new_item = 2 index = 1","completion":"def insert_item(my_list, new_item, index): my_list.append(0) #add a placeholder to my_list for i in range(len(my_list)-2,index-1,-1): #from the last item, swap each item with the item on its right until the item at index-1 is reached my_list[i+1] = my_list[i] my_list[index] = new_item #insert the new item at index return my_list my_list = [1, 3, 5, 7] new_item = 2 index = 1 print(insert_item(my_list, new_item, index)) #prints [1, 2, 3, 5, 7]"},{"prompt":"Create a Python function to find the most common element in a given list of numbers. [1, 2, 3, 1, 3, 2, 2, 3, 3]","completion":"def most_common_element(lst): count_dict = {} for num in lst: if num in count_dict: count_dict[num] += 1 else: count_dict[num] = 1 max_count = -1 max_element = None for key in count_dict.keys(): if count_dict[key] > max_count: max_count = count_dict[key] max_element = key return max_element print(most_common_element([1, 2, 3, 1, 3, 2, 2, 3, 3]))"},{"prompt":"Generate a Python program to update the value of a variable by given percentage. Given variable value = 25.22 Given percentage = 5","completion":"value = 25.22 percent = 5 new_value = value + (value * (percent/100)) print(\\"The new value is: \\", new_value) # Output: The new value is: 26.496"},{"prompt":"Write a Python program to calculate the frequency of each word in a given string. This is a test test string","completion":"def frequency_of_words(s): # split the string into words words = s.split(' ') # create a dictionary and initialize the frequency to 0 frequency = {} for word in words: if word not in frequency: # if this is a new word, then add it to the dictionary frequency[word] = 0 # increment the frequency of this word frequency[word] += 1 return frequency"},{"prompt":"Create a Python class that defines a Rectangle object that has two attributes length and breadth and a method to calculate the area of the rectangle.","completion":"class Rectangle: def __init__(self, length, breadth): self.length = length self.breadth = breadth def find_area(self): return self.length * self.breadth rect = Rectangle(5, 10) area = rect.find_area() print(area)"},{"prompt":"Create a Python program to print out the following message and its variables. Name: Joh","completion":"name = \\"John\\" print(\\"Hello \\" + name + \\"!\\") # Outputs: \\"Hello John!\\""},{"prompt":"Write a Python program that webscrapes data from a website and stores it in a structured format (e.g. JSON, CSV). Example Website: https://example.com","completion":"import requests import json # Make a get request to get the data response = requests.get('https://example.com') # Store the data in a structured format data = json.loads(response.text) # Save the data to a json file with open('example.json', 'w') as f: json.dump(data, f)"},{"prompt":"Develop a Python program to create a frequency table for an array of integer elements. arr = [1,1,3,5,3,3,5]","completion":"from collections import Counter def frequency(arr): \\"\\"\\" Develop a Python program to create a frequency table for an array of integer elements \\"\\"\\" return Counter(arr) if __name__ == '__main__': arr = [1,1,3,5,3,3,5] print(frequency(arr))"},{"prompt":"Create a function in Python that can tell if a string is a palindrome or not. civic","completion":"def is_palindrome(word): reversed_word = word[::-1] if word == reversed_word: return True else: return False result = is_palindrome('civic') print(result)"},{"prompt":"dentify and correct code issues in the following snippet of Python code. def foo(x): if x > 0 return x else: return 0","completion":"def foo(x): if x > 0: return x else: return 0"},{"prompt":"Create a server in Python that uses TCP to transmit messages between two clients.","completion":"import socket import threading # Create a network socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Bind socket to port server_address = ('127.0.0.1', 10000) s.bind(server_address) # Wait for incoming connection s.listen() # Thread for handling incoming connection def client_thread(conn): while True: data = conn.recv(4096) conn.send(data) # Main thread loop while True: conn, addr = s.accept() print(\\"Connected to:\\", addr) # Start the client thread for handling incoming connection thread = threading.Thread(target=client_thread, args=(conn,)) thread.start()"},{"prompt":"Create a Python program to recommend books to users based on their ratings from 1 to 5. User ratings for 10 book","completion":"from sklearn.cluster import KMeans from sklearn.metrics import pairwise_distances_argmin_min # Define user ratings user_ratings = [ [5, 4, 4, 0, 2, 1, 4, 4, 5, 0], [0, 0, 0, 3, 3, 3, 0, 0, 0, 3], [4, 4, 0, 0, 4, 0, 4, 4, 4, 0], ] # Find the clusters model = KMeans(n_clusters=2, random_state=0).fit(user_ratings) # Find the most similar book to each user closest, _ = pairwise_distances_argmin_min(model.cluster_centers_, user_ratings) # Make recommendations for user_id in range(len(user_ratings)): print(\\"For user:\\", user_id) print(\\" Recommended book:\\", closest[user_id])"},{"prompt":"Develop a Python program to generate the first N Fibonacci numbers. N = 10","completion":"def fibonacci_numbers(n): result = [] a, b = 0, 1 while a < n: result.append(a) a, b = b, a+b return result n = 10 fibonacci = fibonacci_numbers(n) print(fibonacci) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"prompt":"Generate an XOR neural network in Python that has two input nodes and one output layer.","completion":"import numpy as np def generate_xor_nn(): model = tf.keras.models.Sequential() model.add(tf.keras.layers.Dense(2, activation=\\"relu\\", input_dim=2)) model.add(tf.keras.layers.Dense(1, activation=\\"sigmoid\\")) model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy']) return model"},{"prompt":"Generate a Python algorithm that probes an array and attempts to select the majority element in the array.","completion":"def find_majority_element(arr): # Use Moore's voting algorithm major_index = 0 count = 1 for i in range(len(arr)): if arr[i] == arr[major_index]: count += 1 else: count -= 1 if count == 0: major_index = i count = 1 # Check majority element return arr[major_index]"},{"prompt":"Design a simple class in Python that stores quiz scores of students.","completion":"class QuizScores: def __init__(self): self.scores = {} def add_score(self, student_name, score): self.scores[student_name] = score def get_average(self): if len(self.scores) == 0: return 0 total_score = 0 for student, score in self.scores.items(): total_score += score return total_score / len(self.scores)"},{"prompt":"Create an algorithm in Python that takes in a string and returns the number of words in the string. Hello world","completion":"def word_count(s): words = s.split() return len(words) s = \\"Hello world\\" print(word_count(s)) # 2"},{"prompt":"Can you make the following string lowercase using Python? This is a TEST string!","completion":"\\"\\"\\" Make the given string lowercase using Python \\"\\"\\" test_string = \\"This is a TEST string!\\" lowercase_string = test_string.lower() print(lowercase_string) # prints \\"this is a test string!\\""},{"prompt":"Develop a python web scraper to extract data from a table on a web page. URL of the web page","completion":"import requests from bs4 import BeautifulSoup # Enter the URL of the web page url = \\"Enter_URL_Here\\" # Scrape the page with BeautifulSoup response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') # Extract the required data from the table table = soup.find('table') table_rows = table.find_all('tr') header_row = table_rows[0] header_columns = header_row.find_all('th') headers = [header.text.strip() for header in header_columns] data = [] for row in table_rows[1:]: row_columns = row.find_all('td') row_data = [column.text.strip() for column in row_columns] data.append(dict(zip(headers,row_data))) print(data)"},{"prompt":"mplement the Knearest neighbor algorithm in Python to predict the category of an observation. features = [[3,2,1], [2,4,3], [4,6,5]] labels = [1, 0, 1] test_data = [4,2,4]","completion":"import numpy as np def classify(features, labels, test_data): distances = [[np.sqrt(np.sum((test_data - features[i])**2)), i] for i in range(len(features))] sorted_distances = sorted(distances) k = 3 neighbors = sorted_distances[:k] num_ones = 0 num_zeros = 0 for neighbor in neighbors: if labels[neighbor[1]] == 1: num_ones += 1 else: num_zeros += 1 if num_ones > num_zeros: return 1 else: return 0 # Calling classify output = classify(features, labels, test_data) print(output)"},{"prompt":"Create a Python program which creates two thread, each printing the numbers 1 to 10 with a delay of 1 second. Not applicable","completion":"import threading import time def printNumbers(): for x in range(1, 11): print(x) time.sleep(1) t1 = threading.Thread(target=printNumbers) t2 = threading.Thread(target=printNumbers) t1.start() t2.start() t1.join() t2.join()"},{"prompt":"Write a code to display prime numbers between two given numbers using python. start = 1 end = 10","completion":"def displayPrime(start, end): for i in range(start, end + 1): if isPrime(i): print(i) def isPrime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True if __name__ == '__main__': start = 1 end = 10 displayPrime(start, end) # 2, 3, 5, 7"},{"prompt":"Create a function in Python that takes a string as an argument and capitalizes the first letter of each word. String s = hello world","completion":"def capitalize(s): return ' '.join(w.capitalize() for w in s.split())"},{"prompt":"Create a code snippet in Python that calculates the number of distinct items in a list.","completion":"def distinct_items_in_list(input_list): distinct_items = set(input_list) return len(distinct_items)"},{"prompt":"Write an algorithm for detecting a cycle in a linked list in Python. Not applicable","completion":"def detectLoop(head): # Base Case: List is empty if head is None: return False # Initialize slow and fast pointers slow = head fast = head while slow and fast and fast.next: slow = slow.next fast = fast.next.next # If slow and fast meet at same point then loop is found if slow == fast: return True return False"},{"prompt":"Generate a Python program to display a Christmas tree with the given number of levels. Number of levels: 5","completion":"def print_tree(levels): #Print the top of the tree print(' ' * (levels - 1) + '*') #Print the middle of the tree for i in range(2, levels + 1): spaces = ' ' * (levels - i) stars = '*' * (2 * (i - 1) + 1) print(spaces + stars) #Print the bottom of the tree print(' ' * (levels - 1) + '|') # Print a tree with 5 levels print_tree(5)"},{"prompt":"Find the maximum element in an array using a Python program. [1, 4, 9, 3, 6]","completion":"def findMax(arr): max = arr[0] for i in range(1,len(arr)): if arr[i] > max: max = arr[i] return max"},{"prompt":"Create a Python web scraper that extract data from a given URL, and store the data in a MongoDB database. URL: https://www.example.com/produc","completion":"import requests from bs4 import BeautifulSoup import pymongo url = 'https://www.example.com/products' client = pymongo.MongoClient('localhost', 27017) db = client['scraper'] data = requests.get(url).text soup = BeautifulSoup(data, 'html.parser') products = soup.find_all('div', {'class': 'product'}) for product in products: title = product.find('h2', {'class': 'title'}).text price = product.find('span', {'class': 'price'}).text collection = db['products'] collection.insert_one({ 'title': title, 'price': price, }) print('Data stored in database!')"},{"prompt":"Create a class in Python that has 3 private variables and 3 public methods.","completion":"class MyClass: def __init__(self): self.__var1 = 0 self.__var2 = 0 self.__var3 = 0 def set_var1(self, val): self.__var1 = val def get_var1(self): return self.__var1 def incr_var2(self): self.__var2 += 1 def get_var2(self): return self.__var2 def decr_var3(self): self.__var3 -= 1 def get_var3(self): return self.__var3"},{"prompt":"Output the sum of numbers in a list in Python. [1, 2, 3, 4, 5]","completion":"def list_sum(inpList): sum = 0 for num in inpList: sum += num return sum print(list_sum([1, 2, 3, 4, 5]))"},{"prompt":"Write a Python program to create 8 random numbers between 1 and 100.","completion":"import random # Create 8 random numbers rand_nums = [random.randint(1, 100) for _ in range(8)] print(rand_nums)"},{"prompt":"Create a function that takes a Python list of numbers as input, and returns the list sorted by the sum of its digits. [ 135, 590, 69, 127 ]","completion":"def sortBySumOfDigits(lst): return sorted(lst, key=lambda x: sum(map(int, str(x)))) lst = [ 135, 590, 69, 127] sorted_list = sortBySumOfDigits(lst) print(sorted_list)"},{"prompt":"Write a Python program to take an integer n and return the nth most frequent element in a list.","completion":"def find_nth_most_frequent(n, data): counts = {} for element in data: if element in counts: counts[element] += 1 else: counts[element] = 1 sorted_counts = sorted(counts.items(), key=lambda x: x[1]) return sorted_counts[-n][0]"},{"prompt":"Create a python script which takes two numbers as argument to calculate the LCM (Least Common Multiple)","completion":"def lcm(x, y): lcm = (x*y)//gcd(x,y) return lcm # This function implements the Euclidian algorithm to find H.C.F. of two numbers def gcd(x, y): while(y): x, y = y, x % y return x # Driver program num1 = 12 num2 = 15 print(\\"The L.C.M. is\\", lcm(num1, num2))"},{"prompt":"Using the input, generate a python program to count the number of times a specific word appears in a sentence or a paragraph. sentence = 'My favorite color is blue' word = 'blue'","completion":"def count_word(sentence, word): words = sentence.split(' ') return words.count(word)"},{"prompt":"Create a webapplication which monitors the stock market using Python. The application should display the current stock prices and chart prices for the past 7 days. Not applicable","completion":"import flask from flask import Flask, request import pandas as pd import matplotlib.pyplot as plt import matplotlib.dates as mdates # Creating a Flask app app = Flask(__name__) # List of stocks stock_list = [\\"MSFT\\", \\"GOOGL\\", \\"AAPL\\", \\"AMZN\\", \\"INTC\\"] # API call to get data @app.route(\\"/stockdata\\", methods=['GET']) def stock_data(): stock_name = request.args.get(\\"stock\\") if stock_name in stock_list: url = \\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=\\" + stock_name + \\"&apikey=<your_api_key>\\" df = pd.read_json(url) df = df.iloc[1] # Plots a graph of data dates = df.index prices = df.values # Create figure fig, ax = plt.subplots() # Format date x-axis ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d')) # Plot data ax.plot(dates, prices) png = \\"static/graph.png\\" # Save image to static/ folder plt.savefig(png, bbox_inches='tight') # Return data data = {\\"date\\": dates.tolist(), \\"price\\": prices.tolist(), \\"graph\\": png} return flask.jsonify(data) # Main section if __name__ == \\"__main__\\": app.run()"},{"prompt":"Using the NumPy library, write a program in Python to find the nearest point in a (twodimensional) array. dist_matrix = [ [0.0, 2.0, 9.0], [1.0, 3.1, 8.2], [2.54, 6.25, 5.3], ] point = [1.5, 2.7]","completion":"import numpy as np # Define distance matrix and point dist_matrix = [ [0.0, 2.0, 9.0], [1.0, 3.1, 8.2], [2.54, 6.25, 5.3], ] point = [1.5, 2.7] # Calculate distance to all points distances = np.linalg.norm(dist_matrix - point, axis=1) # Find index of the nearest point min_idx = np.argmin(distances) # Get the nearest point nearest_point = dist_matrix[min_idx] print('The nearest point is:', nearest_point)"},{"prompt":"Generate a Python algorithm to multiply two number. x = 8 y = 3","completion":"def mul_numbers(x, y): return x*y"},{"prompt":"Contruct a python program that sorts an array of strings using BubbleSort algorithm. [Hello, World, Boo, Yay]","completion":"def bubbleSort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"prompt":"Write a Python program to extract the first 100 characters from a given string. This is a test string","completion":"def extract_first_100_chars(string): return string[:100]"},{"prompt":"Generate a correct Python program that implements a depthfirst search algorithm.","completion":"def dfs(graph, node, visited): if node not in visited: visited.append(node) for n in graph[node]: dfs(graph, n, visited) return visited"},{"prompt":"Create a Python program to handle calendars and reminders. Not applicable","completion":"import datetime # Sample reminder reminders = [ { \\"date\\": \\"2021-02-14\\", \\"title\\": \\"Valentine's Day\\", \\"description\\": \\"Buy a heart-shaped document for your beloved!\\", }, { \\"date\\": \\"2021-04-01\\", \\"title\\": \\"April Fool's Day\\", \\"description\\": \\"Camouflage pranks on the family!\\", }, ] # Function to add reminders def add_reminder(reminder): reminder['date'] = datetime.datetime.strptime(reminder['date'], '%Y-%m-%d').date() reminders.append(reminder) # Function to remove reminders def remove_reminder(index): reminders.pop(index) # Function to list reminders def list_reminders(): for index, reminder in enumerate(reminders): print(f\\"{index}. {reminder['title']} - {reminder['date']}: {reminder['description']}\\")"},{"prompt":"Create a Python class to send emails.","completion":"import smtplib class Emailer: def __init__(self, server, email, password): self.server = smtplib.SMTP(server) self.email = email self.password = password self.server.starttls() self.server.login(self.email, self.password) def send_email(self, recipient, message): self.server.sendmail( self.email, recipient, message ) self.server.quit()"},{"prompt":"Build a web application using the Django web framework.","completion":"# Create a virtual environment to start the project virtualenv venv # Activate the virtual environment source venv/bin/activate # Install the required dependencies for the Django web project pip install django # Create the Django project django-admin startproject mysite # Change to the mysite directory cd mysite # Create the database tables python manage.py migrate # Create a superuser python manage.py createsuperuser # Start the development server python manage.py runserver"},{"prompt":"Generate code for creating a Django web application.","completion":"mkdir myproject cd myproject # Create a virtual environment to manage dependencies python3 -m venv env source env/bin/activate # Install Django pip install django # Create a new Django project called myproject django-admin startproject myproject cd myproject # Run migrations python manage.py migrate #Create an app called myapp python manage.py startapp myapp"},{"prompt":"Create a Python script to find the sum of all the even numbers in a list of integers. [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"def find_sum(lst): sum = 0 for num in lst: if num % 2 == 0: sum += num return sum lst = [1,2,3,4,5,6,7,8,9] print(find_sum(lst)) # Output: 20"},{"prompt":"Create a script in any language that will accept two variables and will swap their values.","completion":"# Python def swap(a, b): temp = a a = b b = temp return (a, b) # JavaScript function swap(a, b) { let temp = a; a = b; b = temp; return [a, b]; }"},{"prompt":"Create a Python script to generate random passwords. The passwords should have at least 5 characters and should be able to contain uppercase, lowercase, numbers, and special characters. Not applicable","completion":"import random import string def generate_password(): length = 5 chars = string.ascii_letters + string.digits + '!@#%^&*()' random.seed = (random.SystemRandom().random() * 1000000000) return ''.join(random.choice(chars) for i in range(length))"},{"prompt":"Design a data structure in Python to store information about a customer. name, phone, email, addre","completion":"class Customer: def __init__(self, name, phone, email, address): self.name = name self.phone = phone self.email = email self.address = address customer = Customer(\\"John\\", \\"+123456789\\", \\"john@example.com\\", \\"456 Main Street\\")"},{"prompt":"mplement a Queue data structure in Python.","completion":"class Queue: def __init__(self): self.items = [] def is_empty(self): return self.items == [] def enqueue(self, item): self.items.insert(0, item) def dequeue(self): return self.items.pop() def size(self): return len(self.items)"},{"prompt":"Design a Python program to reverse a string inplace.","completion":"def reverse_string(string): left_pointer, right_pointer = 0, len(string) - 1 while left_pointer < right_pointer: string[left_pointer], string[right_pointer] = string[right_pointer], string[left_pointer] left_pointer += 1 right_pointer -= 1 return string"},{"prompt":"Design a program in Python to check if a given number is a palindrome 12321","completion":"def check_number(num): # make a copy of the original number temp = num # initialize sum rev = 0 while temp > 0: rev = (rev * 10) + (temp % 10) temp = temp // 10 # Check if number is equal to its reverse if num == rev: return True else: return False # main function num = 12321 if check_number(num): print(\\"Given Number is Palindrome\\") else: print(\\"Given Number is not a Palindrome\\")"},{"prompt":"Create a forloop in Python to loop through the items in a list and print their elements. names = ['John', 'Kate', 'Mike', 'Alex']","completion":"for name in names: print(name)"},{"prompt":"Write a Python script to sort a list of tuples by its third element. [(2, 3, 5), (7, 9, 8), (1, 0, 4)]","completion":"def sort_by_third_element(input_list): sorted_list = sorted(input_list, key = lambda x: x[2]) return sorted_list"},{"prompt":"Write a Python program to compare two lists of strings and print unique values in each list. list1 = [cat, dog, bird] list2 = [dog, mouse, elephant]","completion":"list1_unique = [] list2_unique = [] for a in list1: if a not in list2: list1_unique.append(a) for b in list2: if b not in list1: list2_unique.append(b) print(\\"Unique elements in List 1: \\", list1_unique) print(\\"Unique elements in List 2: \\", list2_unique)"},{"prompt":"Transform the following nested for loop into a list comprehension statement in Python. for i in range(2, 5): for j in range(3): print(i, j)","completion":"[(i,j) for i in range(2,5) for j in range(3)]"},{"prompt":"Develop a classifier in Python to distinguish between different sounds.","completion":"import librosa from tensorflow.keras.layers import Input, Dense from tensorflow.keras.models import Model # Get the data x_data, y_data = librosa.load('mySound.wav', sr=44100) # Preprocess the data x_data = librosa.util.normalize(x_data) # Reshape the data (optional) x_data = x_data.reshape((1, -1)) # Create a model inputs = Input(shape=(x_data.shape[1], )) x = Dense(512, activation='relu')(inputs) x = Dense(256, activation='relu')(x) predictions = Dense(1, activation='sigmoid')(x) model = Model(inputs=inputs, outputs=predictions) # Compile the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Train the model model.fit(x_data, y_data, epochs=10)"},{"prompt":"Can you design an algorithm in Python to find the longest palindrome in a given string?","completion":"def longest_palindrome(s): n = len(s) T = [[False for i in range(n)] for i in range(n)] maxLength = 0 # Find palindromes of single characters for i in range(n): T[i][i] = True # Find palindromes of double characters for i in range(n-1): if s[i] == s[i+1]: T[i][i+1] = True maxLength = 2 # Find palindromes of length greater than 2 for k in range(3, n+1): for i in range(n-k+1): j = i+k-1 if s[i] == s[j] and T[i+1][j-1]: T[i][j] = True maxLength = k #Find the start and end of the longest one startIndex=0 endIndex=0 for i in range(n): for j in range(n): if T[i][j] and j-i+1 >= maxLength: maxLength = j-i+1 startIndex = i endIndex = j longestPalindrome = s[startIndex:endIndex+1] return longestPalindrome"},{"prompt":"Generate a Python program to append a given element to the end of the list. [2, 3, 4], 6","completion":"arr = [2, 3, 4] arr.append(6) print(arr)"},{"prompt":"Create a function in Python to filter out elements in a list that share the same value. mylist = [1, 2, 2, 3, 3, 3]","completion":"def filter_same_value_elements(mylist): seen = set() for item in mylist: if item not in seen: yield item seen.add(item) filtered_list = list(filter_same_value_elements(mylist)) print(filtered_list) # [1, 2, 3]"},{"prompt":"Write a function in Python that takes an integer and returns an array of digits of the number except the last two digits. 8765","completion":"def remove_last_two_digits(num): num = str(num) return [int(x) for x in num[:-2]]"},{"prompt":"Construct a Python dictionary to convert Celsius temperature values to their Fahrenheit equivalents","completion":"celsius_to_fahrenheit = { 0 : 32, 10 : 50, 20 : 68, 30 : 86, 40 : 104, 50 : 122, 60 : 140, 70 : 158, 80 : 176, 90 : 194, 100 : 212 }"},{"prompt":"This code provides a class called BuildKernel that has two methods: compileNewKernel and upgradeKernel. To use this class, create an instance of BuildKernel and call the appropriate method with the required arguments. If you want to upgrade the kernel, call the upgradeKernel method. If you want to compile a new kernel, call the compileNewKernel method with the kernel type and init settings as arguments.","completion":"#!/usr/bin/env python import fileinput import sys ///<summary> ///Provides a bunch of operations to format and manage hard disks. /// ///One cool thing that this class does is allow you to generate a fstab file ///based on disk formatting operations conducted earlier using this class. This ///is helpful when installing a new Gentoo installation. ///</summary> class BuildKernel: def compileNewKernel(self, kernelType, initSettings): f = fopen('/etc/superGentoo/kernel', 'w') f.write(kernelType + \\",\\" + initSettings) f.close() os.system(\\"emerge \\" + kernelType) os.system(\\"mv /usr/src/.config /usr/src/linux/.config\\") os.system(\\"touch /usr/src/linux/.config\\") os.system(\\"cd /usr/src/linux\\") os.system(\\"make\\") os.system(\\"make modules_install\\") os.system(\\"cp arch/x86_64/boot/bzImage /boot/kernel-\`find /usr/src -name linux-3* | awk -Flinux- '{print NF }'\`\\") def upgradeKernel(self): kernelData = open('/etc/superGentoo/kernel').read(1000).split(\\",\\") os.system(\\"emerge --update \\". kernelData[0]) os.system() //--------------------------------------------------------------------------// // MAIN FUNCTION //--------------------------------------------------------------------------// if __name__ == '__main__': bk = BuildKernel() if sys.argv[1] == \\"upgrade\\": bk.upgradeKernel() elif sys.argv[1] == \\"newKernel\\": bk.compileNewKernel(sys.argv[2], sys.argv[3])"},{"prompt":"Write a Python program to find the most visited webpage on a website. webpages.csv ID,PageName,PageURL 1,Home,http://example.com/ 2,About,http://example.com/about 3,Contact,http://example.com/contact 4,News,http://example.com/news 5,Help,http://example.com/help visitors.csv ID,PageID,IPAddress 1,1,192.168.1.1 2,1,192.168.1.2 3,1,192.168.1.3 4,2,192.168.1.4 5,3,192.168.1.5 6,2,192.168.1.6 7,3,192.168.1.7","completion":"import csv webpages = {} with open(\\"webpages.csv\\", \\"r\\") as f: reader = csv.reader(f) for row in reader: webpages[row[0]] = (row[1], row[2]) visitors = {} with open(\\"visitors.csv\\", \\"r\\") as f: reader = csv.reader(f) for row in reader: visitors[row[2]] = row[1] most_visited = max(webpages, key=lambda x: len([i for i in visitors.values() if i==x])) print(f\\"Most visited page: {webpages[most_visited][0]} ({webpages[most_visited][1]})\\")"},{"prompt":"Create a Python program to perform the Levenshtein Distance calculation. Not applicable","completion":"def levenshteinDistance(str1, str2): # base case # if one of the strings is empty # then the Levenshtein distance will be equal # to the length of the other string if str1 == \\"\\": return len(str2) if str2 == \\"\\": return len(str1) # initialize the variables m = len(str1) n = len(str2) cost = 0 # find the cost if str1[m-1] == str2[n-1]: cost = 0 else: cost = 1 # return the minimum of three possible operations return min( levenshteinDistance(str1[:-1], str2)+1, # delete levenshteinDistance(str1, str2[:-1])+1, # insert levenshteinDistance(str1[:-1], str2[:-1]) + cost # replace ) str1 = \\"kitten\\" str2 = \\"sitting\\" print(levenshteinDistance(str1, str2)) # 3"},{"prompt":"Write a Python script to generate a random unique 8 character ID.","completion":"import string import random def generate_unique_id(length): random_id = ''.join([random.choice(string.ascii_letters + string.digits) for n in range(length)]) return random_id print(generate_unique_id(8)) # Output: AB2dCKsm"},{"prompt":"Create a Python script to print all entries of a data set in a table format? data_set = [['Name', 'Age', 'Location'], ['James', 30, 'London'], ['Mary', 25, 'New York'], ['John', 28, 'Toronto']]","completion":"def print_table(data_set): col_width = max(len(word) for row in data_set for word in row) + 2 # padding for row in data_set: print(\\"\\".join(word.ljust(col_width) for word in row)) print_table(data_set) # Output Name Age Location James 30 London Mary 25 New York John 28 Toronto"},{"prompt":"Create a Python code snippet that prints the same output as Hello, world!","completion":"print(\\"Hello, world!\\")"},{"prompt":"Generate a Python function to optimize a given function using a Gradient Descent algorithm.","completion":"def optimize_function(f, learning_rate, iterations): weights = np.random.rand(f.shape[0]) for _ in range(iterations): grads = estimate_gradient(f, weights) weights -= learning_rate * grads return weights"},{"prompt":"Develop a code generator that can generate a specified code given a language and a set of instructions. Language: Python Instructions: print a Hello World!","completion":"def code_generator(language, instructions): if language == 'Python': code_string = 'print(\\"Hello World!\\")' elif language == 'Java': code_string = 'System.out.println(\\"Hello World!\\");' return code_string"},{"prompt":"Create a Python program to generate a random password which satisfies the following criteria: • Must contain 8 – 16 characters. • Must contain upper and lowercase letters, numbers, and special characters such as *, #, @, etc","completion":"import random import string def generate_random_password(length): # String of characters to choose from chars = string.ascii_letters + string.digits + '!@#%^&*()' # Randomly choose 4 characters from the list of characters random_chars = ''.join(random.choice(chars) for i in range(length)) # Generate password password = ''.join(random.sample(random_chars, length)) return password"},{"prompt":"Code up a web scraper in Python for a particular website. The website is https://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com' page = requests.get(url) soup = BeautifulSoup(page.text, 'html.parser') all_divs = soup.find_all('div') for div in all_divs: try: print(div['class']) except: print(div.text)"},{"prompt":"Generate a valid Python dictionary containing student names as keys and their age as values. John: 18 Maria: 20 Alex: 24","completion":"student_dict = { 'John': 18, 'Maria': 20, 'Alex': 24 }"},{"prompt":"Write a Python program that implements gradient descent to find the minimum of a function. function = 3x² + 2x 10","completion":"import numpy as np # Define the function def f(x): return (3 * (x**2)) + (2 * x) - 10 def grad_f(x): return (6 * x) + 2 # Gradient Descent x_old = 0 x_new = 4 # Arbitrary initial value epsilon = 0.01 # Stop criteria precision = 0.00001 max_iters = 1000 # Maximum number of iterations iters = 0 while abs(x_new - x_old) > epsilon and iters < max_iters: x_old = x_new # Calculate the gradient grad = grad_f(x_old) # Calculate the step size alpha = 0.01 # Take a step in the opposite direction of the gradient x_new = x_old - (alpha * grad) # Update iteration counter iters += 1 print(\\"Minimum at: \\", x_new)"},{"prompt":"Write a Python Function to check if a given string contains all the letters of the alphabet","completion":"def check_alphabet(string): alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" if set(string.lower()) >= set(alphabet): return True else: return False"},{"prompt":"Design a program in Python that prints out the binary equivalent of a given decimal number.","completion":"def dec_to_bin(num): binary = \\"\\" while num > 0: remainder = num % 2 binary = str(remainder) + binary num = num // 2 return binary"},{"prompt":"Create a function in Python that takes in a string and a character, and returns the number of occurrances of the character in the string.","completion":"def count_characters(string, char): count = 0 for c in string: if c == char: count += 1 return count"},{"prompt":"Edit a given Python program to make it bugfree. def foo(): i = 0 for x in range(10): i = i + x print(i) foo()","completion":"def foo(): i = 0 for x in range(10): i = i + x return i print(foo())"},{"prompt":"Code a web scraper in Python to extract information from a mediumsize website The website to scrape is https://www.example.com/.","completion":"# Import the necessary libraries import requests from bs4 import BeautifulSoup # Set the URL to scrape URL = 'https://www.example.com/' # Make the request r = requests.get(URL) # Parse the HTML response html_doc = r.text soup = BeautifulSoup(html_doc, 'html.parser') # Extract the desired information for link in soup.find_all('a'): print(link.get('href'))"},{"prompt":"Generate a program in Python to count the most frequent words in a string. This is a test string","completion":"from collections import Counter def frequent_words(string): # Break the string into words words = string.split(\\" \\") # Count each word using Counter Method cnt = Counter(words) # Find the 5 most frequent words frequent_words = cnt.most_common(5) print(\\"The 5 most frequent words are : \\") for word, count in frequent_words: print('%s : %d' % (word, count)) # Driver Program string = \\"This is a test string\\" frequent_words(string) # Output: # The 5 most frequent words are : # This : 1 # is : 1 # a : 1 # test : 1 # string : 1"},{"prompt":"This code defines a class called Resources that handles the serialization of images and fonts in an ebook. To use it, create an instance of the class and call the add_resources method to add the images and fonts from the ebook's manifest. If you want to add additional images after calling add_resources, you can call the add_extra_images method. To serialize the resources, call the serialize method with a list to which the serialized resources will be appended, and a set of the images used in the ebook. The class also has a method called process_image that can be used to process an image before adding it to the resources.","completion":"#!/usr/bin/env python # vim:fileencoding=UTF-8:ts=4:sw=4:sta:et:sts=4:ai from __future__ import (unicode_literals, division, absolute_import, print_function) __license__ = 'GPL v3' __copyright__ = '2012, Kovid Goyal <kovid@kovidgoyal.net>' __docformat__ = 'restructuredtext en' import imghdr from calibre.ebooks.mobi import MAX_THUMB_DIMEN, MAX_THUMB_SIZE from calibre.ebooks.mobi.utils import (rescale_image, mobify_image, write_font_record) from calibre.ebooks import generate_masthead from calibre.ebooks.oeb.base import OEB_RASTER_IMAGES PLACEHOLDER_GIF = b'GIF89ax01x00x01x00x80x00x00x00x00x00xffxffxff!xf9x04x01x00x00x00x00,x00x00x00x00x01x00x01x00@x02x01Dx00;' class Resources(object): def __init__(self, oeb, opts, is_periodical, add_fonts=False, process_images=True): self.oeb, self.log, self.opts = oeb, oeb.log, opts self.is_periodical = is_periodical self.process_images = process_images self.item_map = {} self.records = [] self.mime_map = {} self.masthead_offset = 0 self.used_image_indices = set() self.image_indices = set() self.cover_offset = self.thumbnail_offset = None self.add_resources(add_fonts) def process_image(self, data): if not self.process_images: return data return (mobify_image(data) if self.opts.mobi_keep_original_images else rescale_image(data)) def add_resources(self, add_fonts): oeb = self.oeb oeb.logger.info('Serializing resources...') index = 1 mh_href = None if 'masthead' in oeb.guide and oeb.guide['masthead'].href: mh_href = oeb.guide['masthead'].href self.records.append(None) index += 1 self.used_image_indices.add(0) self.image_indices.add(0) elif self.is_periodical: # Generate a default masthead data = generate_masthead(unicode(self.oeb.metadata['title'][0])) self.records.append(data) self.used_image_indices.add(0) self.image_indices.add(0) index += 1 cover_href = self.cover_offset = self.thumbnail_offset = None if (oeb.metadata.cover and unicode(oeb.metadata.cover[0]) in oeb.manifest.ids): cover_id = unicode(oeb.metadata.cover[0]) item = oeb.manifest.ids[cover_id] cover_href = item.href for item in self.oeb.manifest.values(): if item.media_type not in OEB_RASTER_IMAGES: continue try: data = self.process_image(item.data) except: self.log.warn('Bad image file %r' % item.href) continue else: if mh_href and item.href == mh_href: self.records[0] = data continue self.image_indices.add(len(self.records)) self.records.append(data) self.item_map[item.href] = index self.mime_map[item.href] = 'image/%s'%imghdr.what(None, data) index += 1 if cover_href and item.href == cover_href: self.cover_offset = self.item_map[item.href] - 1 self.used_image_indices.add(self.cover_offset) try: data = rescale_image(item.data, dimen=MAX_THUMB_DIMEN, maxsizeb=MAX_THUMB_SIZE) except: self.log.warn('Failed to generate thumbnail') else: self.image_indices.add(len(self.records)) self.records.append(data) self.thumbnail_offset = index - 1 self.used_image_indices.add(self.thumbnail_offset) index += 1 finally: item.unload_data_from_memory() if add_fonts: for item in self.oeb.manifest.values(): if item.href and item.href.rpartition('.')[-1].lower() in { 'ttf', 'otf'} and isinstance(item.data, bytes): self.records.append(write_font_record(item.data)) self.item_map[item.href] = len(self.records) def add_extra_images(self): ''' Add any images that were created after the call to add_resources() ''' for item in self.oeb.manifest.values(): if (item.media_type not in OEB_RASTER_IMAGES or item.href in self.item_map): continue try: data = self.process_image(item.data) except: self.log.warn('Bad image file %r' % item.href) else: self.records.append(data) self.item_map[item.href] = len(self.records) finally: item.unload_data_from_memory() def serialize(self, records, used_images): used_image_indices = self.used_image_indices | { v-1 for k, v in self.item_map.iteritems() if k in used_images} for i in self.image_indices-used_image_indices: self.records[i] = PLACEHOLDER_GIF records.extend(self.records) def __bool__(self): return bool(self.records) __nonzero__ = __bool__"},{"prompt":"Design a class in Python to store customer information for an ecommerce website.","completion":"class Customer: def __init__(self, name, email, address, phone, credit_card_number): self.name = name self.email = email self.address = address self.phone = phone self.credit_card_number = credit_card_number def get_name(self): return self.name def set_name(self, name): self.name = name def get_email(self): return self.email def set_email(self, email): self.email = email def get_address(self): return self.address def set_address(self, address): self.address = address def get_phone(self): return self.phone def set_phone(self, phone): self.phone = phone def get_credit_card_number(self): return self.credit_card_number def set_credit_card_number(self, credit_card_number): self.credit_card_number = credit_card_number"},{"prompt":"Design an AI system in Python that can predict the stock price of a company given historical prices. Five days of historical stock price data: [100, 101, 102, 101, 100]","completion":"import tensorflow as tf import numpy as np # Set up input data historical_prices = [100, 101, 102, 101, 100] x_data = [] for i in range(len(historical_prices)-1): x_data.append(historical_prices[i:i+2]) y_data = historical_prices[2:] # Build model model = tf.keras.Sequential([ tf.keras.layers.Dense(100, activation=tf.nn.relu, input_shape=(2,)), tf.keras.layers.Dense(1) ]) # Compile model model.compile( optimizer=\\"adam\\", loss=\\"mean_squared_error\\" ) # Fit (train) model model.fit(x_data, np.array(y_data), epochs=15) # Use model to predict stock price predicted_price = model.predict([historical_prices[-2:]])[0][0] # Output prediction print(f'The predicted price is {predicted_price}')"},{"prompt":"Develop a program in Python to detect whether an input string is a palindrome. input_string = level","completion":"def check_palindrome(input_string): '''This function will check if the given string is palindrome or not.''' temp_string = input_string.lower() return temp_string == temp_string[::-1] input_string = \\"level\\" # check if the string is palindrome if check_palindrome(input_string): print(\\"The string is palindrome.\\") else: print(\\"The string is not palindrome.\\")"},{"prompt":"Write an algorithm in Python that identifies and removes duplicates from a given array. Array = [2, 3, 4, 3, 2]","completion":"def removeDuplicates(array): result = [] for number in array: if number not in result: result.append(number) return result array = [2, 3, 4, 3, 2] print(removeDuplicates(array))"},{"prompt":"Create a Python program for extracting data from a list. The list should contain dictionaries with three fields: name (string), age (integer), and gender (string). The program should iterate over the list and output a new list containing only the names of people aged 18 or over. list_of_people = [ {'name': 'John', 'age': 15, 'gender': 'male'}, {'name': 'Sarah', 'age': 25, 'gender': 'female'}, {'name': 'Jack', 'age': 28, 'gender': 'male'}, {'name': 'Jane', 'age': 18, 'gender': 'female'} ]","completion":"over_18_names = [] for person in list_of_people: if person['age'] >= 18: over_18_names.append(person['name']) print(over_18_names) # ['Sarah', 'Jack', 'Jane']"},{"prompt":"Generate a Python code snippet to sort a given list. list = [5, 4, 9, 2, 1]","completion":"list.sort() print(list)"},{"prompt":"Write a python statement to extract the first element from a 3item tuple. Tuple: (3, 4, 5)","completion":"first_element = (3, 4, 5)[0]"},{"prompt":"Classify an input sentence with a given set of labels in Python. The car is blue","completion":"def classify_sentence(sentence): labels = [‘color’, ‘object’] features = sentence.split(' ') feature_dict = {} for f in features: if f == 'blue': feature_dict['color'] = 'blue' elif f == 'car': feature_dict['object'] = 'car' return feature_dict sentence = 'The car is blue' labels = [‘color’, ‘object’] print(classify_sentence(sentence, labels))"},{"prompt":"Develop a class in Python that prints a box to the screen using asterisks.","completion":"class Box: def __init__(self, height, width): self.height = height self.width = width def print_box(self): for _ in range(self.height): for _ in range(self.width): print(\\"*\\", end=\\"\\") print(\\"\\")"},{"prompt":"Create a Python script to generate a random password with at least one uppercase, one lowercase and one number.","completion":"import string import random def generate_password(): letters = string.ascii_letters + string.digits password = list(random.choice(letters) for i in range(8)) while not any(l.isupper() for l in password) or not any(l.islower() for l in password) or not any(l.isdigit() for l in password): password = list(random.choice(letters) for i in range(8)) return ''.join(password) password = generate_password() print(\\"Random password is:\\", password)"},{"prompt":"Create an algorithmic trading program using Python that executes buy/sell orders when certain criteria are met. Not applicable","completion":"import pandas as pd import numpy as np # Set up the trading parameters buy_threshold = 0.1 sell_threshold = 0.1 # Load the dataset df = pd.read_csv('stock_data.csv', index_col=0) # Set up a \\"buy\\" flag and a \\"sell\\" flag df['buy'] = np.where(df.Close > (df.Open * (1 + buy_threshold)), 1, 0) df['sell'] = np.where(df.Close < (df.Open * (1 - sell_threshold)), 1, 0) # Loop through the dataset and execute buy/sell orders for i in range(len(df)): if df.buy[i] == 1: print('Executing buy order') if df.sell[i] == 1: print('Executing sell order')"},{"prompt":"Generate the code for a Python function that sorts an array containing integer values in descending order.","completion":"def sort_array(arr): # Traverse through all array elements for i in range(len(arr)): # Last i elements are already in place for j in range(0, len(arr)-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] < arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"prompt":"Create a Python program to output the maximum number of vowels that can be combined with a given combination of consonants","completion":"def max_vowels(consonants): num_consonants = len(consonants) max_vowels = 0 for i in range(1 << num_consonants): # Boolean array of consonants in a given combination bool_arr = [False for _ in range(num_consonants)] for j in range(num_consonants): if ((i & (1 << j)) > 0): # If a bit is set bool_arr[j] = True num_vowels = 0 # Count vowels in a given combination for j in range(num_consonants): if bool_arr[j] is False: # If a consonant is there # Count number of vowels that can follow after the consonant if j + 1 < num_consonants and bool_arr[j + 1] is False: num_vowels += 2 else: num_vowels += 1 # Update maximumnumber of vowels if (num_vowels > max_vowels): max_vowels = num_vowels return max_vowels"},{"prompt":"Please transform this Python list comprehension into a for loop. list_1 = [x for x in range(1, 10) if x % 2 == 0]","completion":"list_1 = [] for x in range(1, 10): if x % 2 == 0: list_1.append(x)"},{"prompt":"Design python code to optimize the following function: ⅇ͏^(−𝐱^2)","completion":"import math from scipy.optimize import minimize def objective(x): return math.exp(-x**2) x0 = 5 print('Initial objective: ' + str(objective(x0))) solution = minimize(objective, x0) print('Optimized objective: ' + str(objective(solution.x)))"},{"prompt":"Give a generic example for tryexceptfinally block in Python.","completion":"try: # code goes here result = my_function() except Exception as e: # deal with errors print(\\"Error encountered: {}\\".format(e)) finally: # execute this block of code regardless print(\\"Done!\\")"},{"prompt":"Write an algorithm in Python to find the maximum and minimum elements in a given array of integers. [3, 5, 8, 1, 10]","completion":"def findMinMax(arr): min = arr[0] max = arr[0] for i in range(1, len(arr)): if arr[i] < min: min = arr[i] elif arr[i] > max: max = arr[i] return min, max arr = [3, 5, 8, 1, 10] min_val, max_val = findMinMax(arr) print(min_val, max_val)"},{"prompt":"Develop a Python program to replace all the occurences of a substring in a given string.","completion":"def replace_substring(string, substring, replacement): # Get all the indices of the substring indices = [] position = 0 while position < len(string): index = string.find(substring, position) # If substring not found, break if index == -1: break # Append the index indices.append(index) position = index + 1 # Construct the replaced string based on the indices replaced_string = '' start = 0 for i in indices: replaced_string += string[start:i] + replacement start = i + len(substring) replaced_string += string[start:] return replaced_string"},{"prompt":"Develop a machine learning model in Python using Logistic Regression to identify spam emails. A dataset consisting of 20000 emails and their labels as either 'spam' or 'not spam'.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression # read in the dataset emails = pd.read_csv(\\"emails.csv\\") # split the emails into a training and testing set X_train, X_test, y_train, y_test = train_test_split(emails[\\"message\\"], emails[\\"label\\"], test_size=0.2, random_state=0) # extract features from the emails using a count vectorizer vectorizer = CountVectorizer() X_train_features = vectorizer.fit_transform(X_train) # create and train a logistic regression model model = LogisticRegression() model.fit(X_train_features, y_train) # test the model on the testing set X_test_features = vectorizer.transform(X_test) score = model.score(X_test_features, y_test) print(\\"Test accuracy: \\", score)"},{"prompt":"Suggest a web scraper API to extract tabular data from a website. <no input>","completion":"A popular API for web scraping and extracting tabular data from websites is Scrapy. It provides an easy-to-use API for programming web crawlers in Python. It is also extensible, so it can be easily modified and extended to focus on more specific tasks."},{"prompt":"Design an algorithm in Python for solving the Travelling Salesman Problem with a cost matrix. Cost matrix = [[0, 4, 6, 8], [3, 0, 2, 7], [1, 6, 0, 5], [4, 3, 9, 0]]","completion":"import numpy as np def solveTSP(cost_matrix): n = len(cost_matrix[0]) # matrix for storing intermediate results C = [[0 for i in range(n)] for j in range(1<<n)] # Administering initial values in matrix for i in range(n): C[1<<i][i] = cost_matrix[i][0] # Dp to fill the remaining entries for mask in range(1, 1<<n): for k in range(n): if (mask & (1<<k)) != 0: min_val = np.inf for m in range(n): if (mask & (1<<m)) != 0 and m != k: min_val = min(min_val, C[mask ^ (1<<k)][m] + cost_matrix[m][k]) C[mask][k] = min_val # find the minimum cost tour min_val = np.inf for k in range(n): min_val = min(min_val, C[(1<<n) - 1][k] + cost_matrix[k][0]) return min_val"},{"prompt":"Write a Python function to implement an algorithm. Algorithm: Given an array of positive and negative numbers, find the largest subarray with sum less than or equal to 0.","completion":"def largestSubarray(arr): max_len = 0 curr_sum = 0 max_sum = 0 start = 0 end = 0 for i in range(len(arr)): curr_sum += arr[i] if max_sum < curr_sum: max_sum = curr_sum end = i if curr_sum < 0: curr_sum = 0 start = i + 1 if max_sum <= 0: curr_len = end - start + 1 if curr_len > max_len: max_len = curr_len return max_len"},{"prompt":"Create a Python class for a Person with name and age attributes.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age"},{"prompt":"Compose a Python program that takes in a list of strings and returns a list with duplicate strings removed. [Hello, World, Hello, Goodbye, Goodbye, Welcome]","completion":"def remove_duplicates(strs): new_strs = [] for i in strs: if i not in new_strs: new_strs.append(i) return new_strs # Driver Code strs = [\\"Hello\\", \\"World\\", \\"Hello\\", \\"Goodbye\\", \\"Goodbye\\", \\"Welcome\\"] print(remove_duplicates(strs))"},{"prompt":"Create a Python script to analyze a text document. The script should locate all words with three or more characters in a row and count their frequency in the document. The quick brown fox jumps over the lazy dog. The fox barked at the dog.","completion":"from collections import defaultdict text = 'The quick brown fox jumps over the lazy dog. The fox barked at the dog.' words = defaultdict(int) for word in text.split(): if len(word) >= 3: words[word] += 1 print(words)"},{"prompt":"Generate code to generate a linear regression model in Python. Not applicable","completion":"import numpy as np from sklearn.linear_model import LinearRegression # Create data x = np.array([[1, 2], [3, 4], [5, 6], [7, 8]]) y = np.array([1, 2, 3, 4]) # Create a Linear regression model model = LinearRegression() model.fit(x, y) # Print coefficients print('Coefficients: {}'.format(model.coef_)) # Predict x_test = np.array([[3, 4], [5, 6]]) y_pred = model.predict(x_test) print('Predictions: {}'.format(y_pred))"},{"prompt":"Design a data structure in Python to store flight information related to an airline. Not applicable","completion":"class Flight: def __init__(self, airline, origin, destination, num_passengers, departure_time, arrival_time, flight_number): self.airline = airline self.origin = origin self.destination = destination self.num_passengers = num_passengers self.departure_time = departure_time self.arrival_time = arrival_time self.flight_number = flight_number def main(): # Create flight object flight1 = Flight(\\"Delta\\", \\"New York\\", \\"Los Angeles\\", 20, \\"4:00PM\\", \\"10:00PM\\", \\"DL123\\") if __name__== \\"__main__\\": main()"},{"prompt":"Create a python function that takes a commaseperated string and returns a list of dictionary objects. John, Smith, 25; Polly, King, 22","completion":"def create_list(string): entries = string.split(\\";\\") result = [] for entry in entries: info = entry.split(\\", \\") person = { 'name': info[0], 'surname': info[1], 'age': info[2], } result.append(person) return result string = \\"John, Smith, 25; Polly, King, 22\\" result = create_list(string) print(result)"},{"prompt":"Create a Python program that can predict whether an email is spam or not using machine learning algorithms.","completion":"import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import StandardScaler from sklearn.metrics import accuracy_score from sklearn.model_selection import train_test_split from sklearn.metrics import confusion_matrix # Read data data = pd.read_csv('/data/spam.csv') X = data.drop(['is_spam'], axis=1) y = data.is_spam # Preprocessing X = StandardScaler().fit_transform(X) # Split the dataset into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create a logistic regression model model = LogisticRegression() model.fit(X_train, y_train) # Predict y_pred = model.predict(X_test) # Evaluate the model score = accuracy_score(y_test, y_pred) print(score)"},{"prompt":"Optimize a function in Python that calculates the sum of numbers from 0 to n. def slow_sum(n): s = 0 for number in range(n+1): s += number return","completion":"def fast_sum(n): return ((n+1)*n)/2"},{"prompt":"Edit the following Python program to make the execution time faster by using appropriate data structures and algorithms: def get_prime_numbers(n): prime_numbers = [] for i in range(1, n+1): is_prime = True for j in range(2, i): if i % j == 0: is_prime = False if is_prime: prime_numbers.append(i) return prime_number","completion":"def get_prime_numbers(n): prime_numbers = [] is_prime = [True]*(n+1) for i in range(2, n+1): if is_prime[i] == True: prime_numbers.append(i) for j in range(i, n+1, i): is_prime[j] = False return prime_numbers"},{"prompt":"Develop a Python program to check if a given string contains any special characters.","completion":"import re def hasSpecialChar(str): return bool(re.search(r'[^A-Za-z0-9]', str))"},{"prompt":"Generate a Python function to calculate windchill.","completion":"def calc_windchill(temp, windspeed): \\"\\"\\"Calculates wind chill based on given temperature and wind speed. Args: temp (int, float): Temperature in Celsius windspeed (int, float): Wind speed in km/h Returns: Wind chill in Celsius (int, float) \\"\\"\\" if temp > 10 or windspeed < 4.8: return temp windchill = 13.12 + 0.6215 * temp - 11.37 * windspeed**0.16 + 0.3965 * temp * windspeed**0.16 return windchill"},{"prompt":"Design a class in Python that implements a stack No inpu","completion":"class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"prompt":"Write an Python program to convert Celsius to Fahrenheit. Celsius = 100","completion":"def celsius_to_fahrenheit(celsius): fahrenheit = celsius * 9/5 + 32 return fahrenheit celsius = 100 result = celsius_to_fahrenheit(celsius) print(result)"},{"prompt":"Classify the variable x in Python given the following: x = 2 + 4.","completion":"x is an integer."},{"prompt":"Construct an AI model to predict stocks in Python.","completion":"import pandas as pd import numpy as np import keras # Read the data df = pd.read_csv('stocks.csv') # Extract the features and target features = df.drop(['Name', 'symbol', 'Close'], axis=1).values target = df.Close.values # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42) # Construct a model model = keras.Sequential([ keras.layers.Dense(128, activation='relu'), keras.layers.Dense(32, activation='relu'), keras.layers.Dense(1, activation='linear'), ]) # Compile the model model.compile(optimizer='adam', loss='mse', metrics=['mae']) # Train model model.fit(X_train, y_train, epochs=10) # Evaluate the model test_loss, test_acc = model.evaluate(X_test, y_test) print('Test accuracy:', test_acc)"},{"prompt":"Create a Python script to calculate the sum of the numbers in a list given as input. list = [1, 5, 10, 30]","completion":"def sum_list(list): total = 0 for i in list: total += i return total print sum_list(list)"},{"prompt":"Write an algorithm in Python to convert English words to Pig Latin.","completion":"def pig_latin(word): vowels = ['a', 'e', 'i', 'o', 'u'] # If the word starts with a consonant, move it to the end, add 'ay' if word[0] not in vowels: return word[1:] + word[0] + 'ay' # If the word starts with a vowel, add 'way' else: return word + 'way' print(pig_latin('pig')) # igpay"},{"prompt":"Using a dictionary, write a program in Python to categorize each list item into a group of the same type. items = [1, 2, ‘a’, ‘b’, 4, 5, ‘c’, ‘d’, 7, 8]","completion":"def categorize(items): groups = { 'numbers': [], 'strings': [] } for item in items: if type(item) == int or type(item) == float: groups['numbers'].append(item) else: groups['strings'].append(item) return groups"},{"prompt":"This code implements a BTree and a B+Tree data structure. To use the","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- import bisect import itertools import operator import sys reload(sys) sys.setdefaultencoding('utf-8') class _BNode(object): __slots__ = [\\"tree\\", \\"contents\\", \\"children\\"] def __init__(self, tree, contents=None, children=None): self.tree = tree self.contents = contents or [] self.children = children or [] if self.children: assert len(self.contents) + 1 == len(self.children), \\"one more child than data item required\\" def __repr__(self): name = getattr(self, \\"children\\", 0) and \\"Branch\\" or \\"Leaf\\" return \\"<%s %s>\\" % (name, \\", \\".join(map(str, self.contents))) def lateral(self, parent, parent_index, dest, dest_index): if parent_index > dest_index: dest.contents.append(parent.contents[dest_index]) parent.contents[dest_index] = self.contents.pop(0) if self.children: dest.children.append(self.children.pop(0)) else: dest.contents.insert(0, parent.contents[parent_index]) parent.contents[parent_index] = self.contents.pop() if self.children: dest.children.insert(0, self.children.pop()) def shrink(self, ancestors): parent = None if ancestors: parent, parent_index = ancestors.pop() # try to lend to the left neighboring sibling if parent_index: left_sib = parent.children[parent_index - 1] if len(left_sib.contents) < self.tree.order: self.lateral( parent, parent_index, left_sib, parent_index - 1) return # try the right neighbor if parent_index + 1 < len(parent.children): right_sib = parent.children[parent_index + 1] if len(right_sib.contents) < self.tree.order: self.lateral( parent, parent_index, right_sib, parent_index + 1) return center = len(self.contents) // 2 sibling, push = self.split() if not parent: parent, parent_index = self.tree.BRANCH( self.tree, children=[self]), 0 self.tree._root = parent # pass the median up to the parent parent.contents.insert(parent_index, push) parent.children.insert(parent_index + 1, sibling) if len(parent.contents) > parent.tree.order: parent.shrink(ancestors) def grow(self, ancestors): parent, parent_index = ancestors.pop() minimum = self.tree.order // 2 left_sib = right_sib = None # try to borrow from the right sibling if parent_index + 1 < len(parent.children): right_sib = parent.children[parent_index + 1] if len(right_sib.contents) > minimum: right_sib.lateral(parent, parent_index + 1, self, parent_index) return # try to borrow from the left sibling if parent_index: left_sib = parent.children[parent_index - 1] if len(left_sib.contents) > minimum: left_sib.lateral(parent, parent_index - 1, self, parent_index) return # consolidate with a sibling - try left first if left_sib: left_sib.contents.append(parent.contents[parent_index - 1]) left_sib.contents.extend(self.contents) if self.children: left_sib.children.extend(self.children) parent.contents.pop(parent_index - 1) parent.children.pop(parent_index) else: self.contents.append(parent.contents[parent_index]) self.contents.extend(right_sib.contents) if self.children: self.children.extend(right_sib.children) parent.contents.pop(parent_index) parent.children.pop(parent_index + 1) if len(parent.contents) < minimum: if ancestors: # parent is not the root parent.grow(ancestors) elif not parent.contents: # parent is root, and its now empty self.tree._root = left_sib or self def split(self): center = len(self.contents) // 2 median = self.contents[center] sibling = type(self)( self.tree, self.contents[center + 1:], self.children[center + 1:]) self.contents = self.contents[:center] self.children = self.children[:center + 1] return sibling, median def insert(self, index, item, ancestors): self.contents.insert(index, item) if len(self.contents) > self.tree.order: self.shrink(ancestors) def remove(self, index, ancestors): minimum = self.tree.order // 2 if self.children: # find the smallest in the right subtree, exchange the value with the current node # then delete the smallest one, just like the idea in the binary search tree. # Note: only if len(descendent.contents) > minimum, we do this way in order to avoid 'grow' operation. # Or we will inspect the left tree and do it any way # all internal nodes have both left and right subtree. additional_ancestors = [(self, index + 1)] descendent = self.children[index + 1] while descendent.children: additional_ancestors.append((descendent, 0)) descendent = descendent.children[0] if len(descendent.contents) > minimum: ancestors.extend(additional_ancestors) self.contents[index] = descendent.contents[0] descendent.remove(0, ancestors) return # fall back to the left child, and exchange with the biggest, then delete the biggest anyway. additional_ancestors = [(self, index)] descendent = self.children[index] while descendent.children: additional_ancestors.append( (descendent, len(descendent.children) - 1)) descendent = descendent.children[-1] ancestors.extend(additional_ancestors) self.contents[index] = descendent.contents[-1] descendent.remove(len(descendent.children) - 1, ancestors) else: self.contents.pop(index) if len(self.contents) < minimum and ancestors: self.grow(ancestors) class _BPlusLeaf(_BNode): __slots__ = [\\"tree\\", \\"contents\\", \\"data\\", \\"next\\"] def __init__(self, tree, contents=None, data=None, next=None): self.tree = tree self.contents = contents or [] self.data = data or [] self.next = next assert len(self.contents) == len(self.data), \\"one data per key\\" def insert(self, index, key, data, ancestors): self.contents.insert(index, key) self.data.insert(index, data) if len(self.contents) > self.tree.order: self.shrink(ancestors) def lateral(self, parent, parent_index, dest, dest_index): if parent_index > dest_index: dest.contents.append(self.contents.pop(0)) dest.data.append(self.data.pop(0)) parent.contents[dest_index] = self.contents[0] else: dest.contents.insert(0, self.contents.pop()) dest.data.insert(0, self.data.pop()) parent.contents[parent_index] = dest.contents[0] def split(self): center = len(self.contents) // 2 median = self.contents[center - 1] sibling = type(self)( self.tree, self.contents[center:], self.data[center:], self.next) self.contents = self.contents[:center] self.data = self.data[:center] self.next = sibling return sibling, sibling.contents[0] def remove(self, index, ancestors): minimum = self.tree.order // 2 if index >= len(self.contents): self, index = self.next, 0 key = self.contents[index] # if any leaf that could accept the key can do so # without any rebalancing necessary, then go that route current = self while current is not None and current.contents[0] == key: if len(current.contents) > minimum: if current.contents[0] == key: index = 0 else: index = bisect.bisect_left(current.contents, key) current.contents.pop(index) current.data.pop(index) return current = current.next self.grow(ancestors) def grow(self, ancestors): minimum = self.tree.order // 2 parent, parent_index = ancestors.pop() left_sib = right_sib = None # try borrowing from a neighbor - try right first if parent_index + 1 < len(parent.children): right_sib = parent.children[parent_index + 1] if len(right_sib.contents) > minimum: right_sib.lateral(parent, parent_index + 1, self, parent_index) return # fallback to left if parent_index: left_sib = parent.children[parent_index - 1] if len(left_sib.contents) > minimum: left_sib.lateral(parent, parent_index - 1, self, parent_index) return # join with a neighbor - try left first if left_sib: left_sib.contents.extend(self.contents) left_sib.data.extend(self.data) parent.remove(parent_index - 1, ancestors) return # fallback to right self.contents.extend(right_sib.contents) self.data.extend(right_sib.data) parent.remove(parent_index, ancestors) class BTree(object): BRANCH = LEAF = _BNode def __init__(self, order): self.order = order self._root = self._bottom = self.LEAF(self) def _path_to(self, item): \\"\\"\\" \\"\\"\\" current = self._root ancestry = [] while getattr(current, \\"children\\", None): index = bisect.bisect_left(current.contents, item) ancestry.append((current, index)) if index < len(current.contents) and current.contents[index] == item: return ancestry current = current.children[index] index = bisect.bisect_left(current.contents, item) ancestry.append((current, index)) present = index < len(current.contents) present = present and current.contents[index] == item return ancestry def _present(self, item, ancestors): last, index = ancestors[-1] return index < len(last.contents) and last.contents[index] == item def insert(self, item): current = self._root ancestors = self._path_to(item) node, index = ancestors[-1] while getattr(node, \\"children\\", None): node = node.children[index] index = bisect.bisect_left(node.contents, item) ancestors.append((node, index)) node, index = ancestors.pop() node.insert(index, item, ancestors) def remove(self, item): current = self._root ancestors = self._path_to(item) if self._present(item, ancestors): node, index = ancestors.pop() node.remove(index, ancestors) else: raise ValueError(\\"%r not in %s\\" % (item, self.__class__.__name__)) def __contains__(self, item): return self._present(item, self._path_to(item)) def __iter__(self): def _recurse(node): if node.children: for child, item in zip(node.children, node.contents): for child_item in _recurse(child): yield child_item yield item for child_item in _recurse(node.children[-1]): yield child_item else: for item in node.contents: yield item for item in _recurse(self._root): yield item def __repr__(self): def recurse(node, accum, depth): accum.append((\\" \\" * depth) + repr(node)) for node in getattr(node, \\"children\\", []): recurse(node, accum, depth + 1) accum = [] recurse(self._root, accum, 0) return \\"n\\".join(accum) @classmethod def bulkload(cls, items, order): tree = object.__new__(cls) tree.order = order leaves = tree._build_bulkloaded_leaves(items) tree._build_bulkloaded_branches(leaves) return tree def _build_bulkloaded_leaves(self, items): minimum = self.order // 2 leaves, seps = [[]], [] for item in items: if len(leaves[-1]) < self.order: leaves[-1].append(item) else: seps.append(item) leaves.append([]) if len(leaves[-1]) < minimum and seps: last_two = leaves[-2] + [seps.pop()] + leaves[-1] leaves[-2] = last_two[:minimum] leaves[-1] = last_two[minimum + 1:] seps.append(last_two[minimum]) return [self.LEAF(self, contents=node) for node in leaves], seps def _build_bulkloaded_branches(self, (leaves, seps)): minimum = self.order // 2 levels = [leaves] while len(seps) > self.order + 1: items, nodes, seps = seps, [[]], [] for item in items: if len(nodes[-1]) < self.order: nodes[-1].append(item) else: seps.append(item) nodes.append([]) if len(nodes[-1]) < minimum and seps: last_two = nodes[-2] + [seps.pop()] + nodes[-1] nodes[-2] = last_two[:minimum] nodes[-1] = last_two[minimum + 1:] seps.append(last_two[minimum]) offset = 0 for i, node in enumerate(nodes): children = levels[-1][offset:offset + len(node) + 1] nodes[i] = self.BRANCH(self, contents=node, children=children) offset += len(node) + 1 levels.append(nodes) self._root = self.BRANCH(self, contents=seps, children=levels[-1]) class BPlusTree(BTree): LEAF = _BPlusLeaf def _get(self, key): node, index = self._path_to(key)[-1] if index == len(node.contents): if node.next: node, index = node.next, 0 else: return while node.contents[index] == key: yield node.data[index] index += 1 if index == len(node.contents): if node.next: node, index = node.next, 0 else: return def _path_to(self, item): path = super(BPlusTree, self)._path_to(item) node, index = path[-1] while hasattr(node, \\"children\\"): node = node.children[index] index = bisect.bisect_left(node.contents, item) path.append((node, index)) return path def get(self, key, default=None): try: return self._get(key).next() except StopIteration: return default def getlist(self, key): return list(self._get(key)) def insert(self, key, data): path = self._path_to(key) node, index = path.pop() node.insert(index, key, data, path) def remove(self, key): path = self._path_to(key) node, index = path.pop() node.remove(index, path) __getitem__ = get __setitem__ = insert __delitem__ = remove def __contains__(self, key): for item in self._get(key): return True return False def iteritems(self): node = self._root while hasattr(node, \\"children\\"): node = node.children[0] while node: for pair in itertools.izip(node.contents, node.data): yield pair node = node.next def iterkeys(self): return itertools.imap(operator.itemgetter(0), self.iteritems()) def itervalues(self): return itertools.imap(operator.itemgetter(1), self.iteritems()) __iter__ = iterkeys def items(self): return list(self.iteritems()) def keys(self): return list(self.iterkeys()) def values(self): return list(self.itervalues()) def _build_bulkloaded_leaves(self, items): minimum = self.order // 2 leaves, seps = [[]], [] for item in items: if len(leaves[-1]) >= self.order: seps.append(item) leaves.append([]) leaves[-1].append(item) if len(leaves[-1]) < minimum and seps: last_two = leaves[-2] + leaves[-1] leaves[-2] = last_two[:minimum] leaves[-1] = last_two[minimum:] seps.append(last_two[minimum]) leaves = [self.LEAF( self, contents=[p[0] for p in pairs], data=[p[1] for p in pairs]) for pairs in leaves] for i in xrange(len(leaves) - 1): leaves[i].next = leaves[i + 1] return leaves, [s[0] for s in seps] def main(): bt = BTree(2) l = range(20, 0, -1) bt.insert('박씨') bt.insert('정씨') bt.insert('김씨') bt.insert('이씨') bt.insert('황씨') BP = BPlusTree(bt) BP.insert('박', '박씨') for i in range(0,5): print list(bt)[i] print BP.values()[0] print BP.keys()[0] print BP.items()[0] print BP.get('박씨') #for i, item in enumerate(l): # bt.insert(item) # print list(bt) if __name__ == '__main__': #unittest.main() main()"},{"prompt":"Convert the following pseudocode to a program in Python: If price > 50 Print Expensive Else Print Cheap Not applicable","completion":"price = 45 if price > 50: print(\\"Expensive\\") else: print(\\"Cheap\\")"},{"prompt":"Create a recursive Python function to calculate the Fibonacci sequence up to the given number n.","completion":"def fibonacci(n): if n <= 1: return n else: return fibonacci(n-1) + fibonacci(n-2)"},{"prompt":"Generate a function in Python to remove the characters within the parentheses. String: 'It was a (big) surprise!'","completion":"def remove_parentheses(string): string_list = list(string) is_in_parentheses = False for i in range (len(string_list)): if string_list[i] == '(': is_in_parentheses = True elif string_list[i] == ')': is_in_parentheses = False elif is_in_parentheses: string_list[i] = '' return ''.join(string_list)"},{"prompt":"Generate a python program to generate a random password","completion":"import string import random def generate_password(length): password = [] chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + '@#%&*' for i in range(length): password.append(random.choice(chars)) return ''.join(password) if __name__ == '__main__': length = int(input('Enter password length: ')) print(generate_password(length))"},{"prompt":"The given code defines a Python class called RLC that contains methods to draw various circuit elements. To draw a bipole, resistor, potentiometer, capacitor, or inductor, call the corresponding method with the desired parameters. The methods take a parent object, position, value, label, angleDeg, flagVolt, voltName, flagCurr, currName, invertArrows, and convention as parameters. The methods return a group object containing the drawn element.","completion":"#!/usr/bin/python import inkscapeMadeEasy_Base as inkBase import inkscapeMadeEasy_Draw as inkDraw class RLC(inkBase.inkscapeMadeEasy): # --------------------------------------------- def drawBipoleGeneral(self, parent, position=[0, 0], value='Z', label='Bipole', angleDeg=0, flagVolt=True, voltName='v', flagCurr=True, currName='i', invertArrows=False, convention='passive'): \\"\\"\\" draws a generic bipole with a rectangle parent: parent object position: position [x,y] value: string with resistor value. (default 'Z') label: label of the object (it can be repeated) angleDeg: rotation angle in degrees counter-clockwise (default 0) flagVolt: indicates whether the voltage arrow must be drawn (default: true) voltName: voltage drop name (default: v) flagCurr: indicates whether the current arrow must be drawn (default: true) currName: current drop name (default: i) invertArrows: invert V/I arrow directions (default: False) convention: passive/active sign convention. available types: 'passive' (default) , 'active' \\"\\"\\" group = self.createGroup(parent, label) elem = self.createGroup(group) inkDraw.line.relCoords(elem, [[15.5, 0]], position) inkDraw.line.relCoords(elem, [[19, 0], [0, -6], [-19, 0], [0, 6]], [position[0] + 15.5, position[1] + 3]) inkDraw.line.relCoords(elem, [[15.5, 0]], [position[0] + 34.5, position[1]]) pos_text = [position[0] + 25, position[1] - 3 - self.textOffset] if inkDraw.useLatex: value = '' + value + '' inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc', preambleFile=self.preambleFile) if angleDeg != 0: self.rotateElement(group, position, angleDeg) if flagVolt: if convention == 'passive': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=not invertArrows) if convention == 'active': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=invertArrows) if flagCurr: self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor, angleDeg=angleDeg, invertArrows=invertArrows) return group # --------------------------------------------- def drawResistor(self, parent, position=[0, 0], value='R', label='Resistor', angleDeg=0, flagVolt=True, voltName='v', flagCurr=True, currName='i', invertArrows=False, convention='passive'): \\"\\"\\" draws a resistor parent: parent object position: position [x,y] value: string with resistor value. If it ends with 'ohm', 'OHM' or 'Ohm', proper Ohm symbol will be added. (Default 'R') label: label of the object (it can be repeated) angleDeg: rotation angle in degrees counter-clockwise (default 0) flagVolt: indicates whether the voltage arrow must be drawn (default: true) voltName: voltage drop name (default: v) flagCurr: indicates whether the current arrow must be drawn (default: true) currName: current drop name (default: i) invertArrows: invert V/I arrow directions (default: False) convention: passive/active sign convention. available types: 'passive' (default) , 'active' \\"\\"\\" group = self.createGroup(parent, label) elem = self.createGroup(group) inkDraw.line.relCoords(elem, [[15.5, 0], [2, 3], [3, -6], [3, 6], [3, -6], [3, 6], [3, -6], [2, 3], [15.5, 0]], position) pos_text = [position[0] + 25, position[1] - 3 - self.textOffset] if inkDraw.useLatex: value = '' + value + '' inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc', preambleFile=self.preambleFile) if angleDeg != 0: self.rotateElement(group, position, angleDeg) if flagVolt: if convention == 'passive': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=not invertArrows) if convention == 'active': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=invertArrows) if flagCurr: self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor, angleDeg=angleDeg, invertArrows=invertArrows) return group # --------------------------------------------- def drawPotentiometer(self, parent, position=[0, 0], value='R', label='Potentiometer', angleDeg=0, flagVolt=True, voltName='v', flagCurr=True, currName='i', invertArrows=False, is3T=False, convention='passive'): \\"\\"\\" draws a potentiometer parent: parent object position: position [x,y] value: string with resistor value. label: label of the object (it can be repeated) angleDeg: rotation angle in degrees counter-clockwise (default 0) flagVolt: indicates whether the voltage arrow must be drawn (default: true) voltName: voltage drop name (default: v) flagCurr: indicates whether the current arrow must be drawn (default: true) currName: current drop name (default: i) invertArrows: invert V/I arrow directions (default: False) is3T: indicates the drawPotentiometer has 3 terminals (default:false) convention: passive/active sign convention. available types: 'passive' (default) , 'active' \\"\\"\\" group = self.createGroup(parent, label) elem = self.createGroup(group) # build arrow marker colorBlack = inkDraw.color.defined('black') L_arrow = 2.5 markerPath = 'M 0,0 l -%f,%f l 0,-%f z' % (L_arrow * 1.2, L_arrow / 2.0, L_arrow) markerArrow = inkDraw.marker.createMarker(self, 'BJTArrow', markerPath, RenameMode=1, strokeColor=colorBlack, fillColor=colorBlack, lineWidth=0.6, markerTransform='translate (1,0)') lineStyleArrow = inkDraw.lineStyle.set(lineWidth=1, lineColor=colorBlack, markerEnd=markerArrow) inkDraw.line.relCoords(elem, [[15.5, 0], [2, 3], [3, -6], [3, 6], [3, -6], [3, 6], [3, -6], [2, 3], [15.5, 0]], position) # 2-terminal Potentiometer if is3T: inkDraw.line.relCoords(elem, [[0, -10]], [position[0] + 25, position[1] + 15], lineStyle=lineStyleArrow) pos_text = [position[0] + 25, position[1] - 3 - self.textOffset] else: inkDraw.line.relCoords(elem, [[20, -12]], [position[0] + 15, position[1] + 6], lineStyle=lineStyleArrow) pos_text = [position[0] + 25, position[1] - 6 - self.textOffset] if inkDraw.useLatex: value = '' + value + '' inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc', preambleFile=self.preambleFile) if angleDeg != 0: self.rotateElement(group, position, angleDeg) if flagVolt: if is3T: pos = [position[0] + 25, position[1] - 13] invertCurvature = True else: pos = [position[0] + 25, position[1] + 8] invertCurvature = False if convention == 'passive': self.drawVoltArrowSimple(group, pos, name=voltName, color=self.voltageColor, angleDeg=0, invertArrows=invertArrows, invertCurvatureDirection=invertCurvature) if convention == 'active': self.drawVoltArrowSimple(group, pos, name=voltName, color=self.voltageColor, angleDeg=0, invertArrows=not invertArrows, invertCurvatureDirection=invertCurvature) if flagCurr: if is3T: pos = [position[0] + 40, position[1] - 5] else: pos = [position[0] + 42, position[1] - 5] self.drawCurrArrow(group, pos, name=currName, color=self.currentColor, angleDeg=angleDeg, invertArrows=invertArrows) return group # --------------------------------------------- def drawCapacitor(self, parent, position=[0, 0], value='C', label='Capacitor', flagPol=False, angleDeg=0, flagVolt=True, voltName='v', flagCurr=True, currName='i', invertArrows=False, convention='passive'): \\"\\"\\" draws a capacitor parent: parent object position: position [x,y] value: string with value. label: label of the object (it can be repeated) flagPol: draw sign for polarized capacitor angleDeg: rotation angle in degrees counter-clockwise (default 0) flagVolt: indicates whether the voltage arrow must be drawn (default: true) voltName: voltage drop name (default: v) flagCurr: indicates whether the current arrow must be drawn (default: true) currName: current drop name (default: i) invertArrows: invert V/I arrow directions (default: False) convention: passive/active sign convention. available types: 'passive' (default) , 'active' \\"\\"\\" group = self.createGroup(parent, label) elem = self.createGroup(group, label) inkDraw.line.relCoords(elem, [[23, 0]], position) inkDraw.line.relCoords(elem, [[-23, 0]], [position[0] + 50, position[1]]) inkDraw.line.relCoords(elem, [[0, -14]], [position[0] + 23, position[1] + 7]) inkDraw.line.relCoords(elem, [[0, -14]], [position[0] + 27, position[1] + 7]) pos_text = [position[0] + 25, position[1] - 8 - self.textOffset] if inkDraw.useLatex: value = '' + value + '' inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc', preambleFile=self.preambleFile) if flagPol: inkDraw.text.write(self, '+', [position[0] + 31, position[1] - 3], group, self.textStyle, fontSize=5) if angleDeg != 0: self.rotateElement(group, position, angleDeg) if flagVolt: if convention == 'passive': self.drawVoltArrow(group, [position[0] + 25, position[1] + 9], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=not invertArrows) if convention == 'active': self.drawVoltArrow(group, [position[0] + 25, position[1] + 9], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=invertArrows) if flagCurr: self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor, angleDeg=angleDeg, invertArrows=invertArrows) return group # --------------------------------------------- def drawInductor(self, parent, position=[0, 0], value='L', label='Inductro', angleDeg=0, flagVolt=True, voltName='v', flagCurr=True, currName='i', invertArrows=False, convention='passive'): \\"\\"\\" draws an inductor parent: parent object position: position [x,y] value: string with resistor value. If it ends with 'ohm', 'OHM' or 'Ohm', proper Ohm symbol will be added. (Default 'R') label: label of the object (it can be repeated) angleDeg: rotation angle in degrees counter-clockwise (default 0) flagVolt: indicates whether the voltage arrow must be drawn (default: true) voltName: voltage drop name (default: v) flagCurr: indicates whether the current arrow must be drawn (default: true) currName: current drop name (default: i) invertArrows: invert V/I arrow directions (default: False) convention: passive/active sign convention. available types: 'passive' (default) , 'active' \\"\\"\\" group = self.createGroup(parent, label) elem = self.createGroup(group, label) inkDraw.line.relCoords(elem, [[13, 0]], position) inkDraw.line.relCoords(elem, [[-13, 0]], [position[0] + 50, position[1]]) inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 16, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True, largeArc=False) inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 22, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True, largeArc=False) inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 28, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True, largeArc=False) inkDraw.arc.centerAngStartAngEnd(elem, [position[0] + 34, position[1]], 3.0, 0.0, 180.0, [0, 0], flagOpen=True, largeArc=False) pos_text = [position[0] + 25, position[1] - self.textOffset] if inkDraw.useLatex: value = '' + value + '' inkDraw.text.latex(self, group, value, pos_text, fontSize=self.fontSize, refPoint='bc', preambleFile=self.preambleFile) if angleDeg != 0: self.rotateElement(group, position, angleDeg) if flagVolt: if convention == 'passive': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=not invertArrows) if convention == 'active': self.drawVoltArrow(group, [position[0] + 25, position[1] + 5], name=voltName, color=self.voltageColor, angleDeg=angleDeg, invertArrows=invertArrows) if flagCurr: self.drawCurrArrow(group, [position[0] + 40, position[1] - 5], name=currName, color=self.currentColor, angleDeg=angleDeg, invertArrows=invertArrows) return group"},{"prompt":"Design a program in Python that prints out characters of the alphabet AZ in reverse order.","completion":"import string alphabet = string.ascii_uppercase for letter in alphabet[::-1]: print(letter)"},{"prompt":"Create a web crawler to search for the given keywords. List of keywords: web crawler, python, programming","completion":"import requests from bs4 import BeautifulSoup # Specify a list of keywords keywords = [\\"web crawler\\", \\"python\\", \\"programming\\"] # Loop through the list of keywords for keyword in keywords: page = requests.get(f\\"https://www.google.com/search?q={keyword}\\") # Parse the response using BeautifulSoup soup = BeautifulSoup(page.content, 'html.parser') # Search for the given keyword result_div = soup.find_all('div', attrs = {'class': 'g'}) # Print the results for item in result_div: title = item.find(\\"h3\\").text link = item.find(\\"a\\").get(\\"href\\") print(f\\"Title: {title}\\") print(f\\"Link: {link}\\") print()"},{"prompt":"Create a Python program to generate a random subsample of a given list of items. List: [1,2,3,4,5,6,7,8,9] Sample Size: 4","completion":"import random def random_sample(items, sample_size): sample = random.sample(items, sample_size) return sample result = random_sample([1,2,3,4,5,6,7,8,9], 4) print(result)"},{"prompt":"Develop a Python program that takes an array of strings, and returns an object that contains the frequency of each string in the array. [‘a’, ‘a’, ‘b’, ‘a’, ‘c’, ‘a’]","completion":"def count_frequency(arr): freq_dict = {} for ele in arr: if ele in freq_dict: freq_dict[ele] += 1 else: freq_dict[ele] = 1 return freq_dict arr = ['a', 'a', 'b', 'a', 'c', 'a'] result = count_frequency(arr) print(result) # Output: {'a': 4, 'b': 1, 'c': 1}"},{"prompt":"Generate a Python program to read in an array of integers and print out the largest two integers. [2, 10, 5, 8, 1]","completion":"array = [2, 10, 5, 8, 1] array.sort() print(\\"The largest two integers are:\\") print(array[-1], array[-2])"},{"prompt":"Given two strings, write a Python program to check if one is an anagram of other. listen and sile","completion":"def isAnagram(str1, str2): str1_sorted = sorted(str1) str2_sorted = sorted(str2) # Compare sorted strings if str1_sorted == str2_sorted: return True else: return False str1 = \\"listen\\" str2 = \\"silent\\" print(isAnagram(str1, str2))"},{"prompt":"Write a Python function for converting a Fahrenheit temperature to Celsius.","completion":"def fahrenheit_to_celsius(temperature): celsius = (temperature - 32) * 5/9 return celsius"},{"prompt":"Create a Python program to aggregate multiple lists containing strings into a single list. [[Apple, Banana, Orange], [Carrots, Broccoli], [Dog, Cat, Rabbit, Fish]]","completion":"\\"\\"\\" Aggregate multiple lists containing strings into a single list \\"\\"\\" def aggregate_lists(lists): agg_list = [] for l in lists: agg_list += l return agg_list if __name__ == '__main__': lists = [ [\\"Apple\\", \\"Banana\\", \\"Orange\\"], [\\"Carrots\\", \\"Broccoli\\"], [\\"Dog\\", \\"Cat\\", \\"Rabbit\\", \\"Fish\\"] ] print(aggregate_lists(lists))"},{"prompt":"Create a program in Python that generates a random sequence of 1s and 0s of length 10. Not applicable","completion":"import random # Generate a random sequence of 0s and 1s n = 10 random_sequence = \\"\\".join([str(random.randint(0, 1)) for x in range(n)]) print (random_sequence)"},{"prompt":"Generate a python program that implements the insertion sort algorithm. Not applicable","completion":"def insertionSort(arr): # Traverse through 1 to len(arr) for i in range(1, len(arr)): key = arr[i] j = i-1 while j >=0 and key < arr[j] : arr[j+1] = arr[j] j -= 1 arr[j+1] = key # Driver code to test above arr = [12, 11, 13, 5, 6] insertionSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (str(arr[i]) +\\" \\")"},{"prompt":"Given the list of numbers, create a Python program that counts the number of even numbers in the list. [1,2,3,4,5]","completion":"def count_evens(nums): count = 0 for n in nums: if n % 2 == 0: count += 1 return count nums = [1,2,3,4,5] print(count_evens(nums)) # prints 2"},{"prompt":"Build a mini classifier model in Python to predict whether a given string is palindrome or not. 'level'","completion":"class Palindrome: def __init__(self, str): self.str = str def is_palindrome(self): return self.str == self.str[::-1] palindrome = Palindrome(\\"level\\") if palindrome.is_palindrome(): print(\\"The string is a palindrome\\") else: print(\\"The string is not a palindrome\\")"},{"prompt":"Create a loop in Python to print every permutation of a list of strings. [Hello, World, Foo, Bar]","completion":"import itertools # list of strings list_of_strings = [\\"Hello\\", \\"World\\", \\"Foo\\", \\"Bar\\"] # using itertools # to get the permutations permutations = itertools.permutations(list_of_strings) # printing permutations for i in list(permutations): print(i)"},{"prompt":"Write a Python program to return the first prime number greater than 5.","completion":"def prime_number(num): while True: is_prime = True for i in range(2,num): if (num % i == 0): is_prime = False if is_prime: return num num += 1 x = prime_number(5) print(x)"},{"prompt":"Create an algorithm in Python to evaluate the performance of a trading strategy. The data input to the algorithm will be a list of closing prices of a stock in the past.","completion":"def evaluate_strategy(prices): # Calculate the returns as the ratio of current price to the previous price returns = [] for i in range(1, len(prices)): return_value = (prices[i]/prices[i-1])-1 returns.append(return_value) # Calculate the average return average_return = 0 for i in range(len(returns)): average_return += returns[i] average_return = average_return/len(returns) # Calculate Sharpe Ratio volatility = 0 for i in range(len(returns)): volatility += (returns[i]-average_return)**2 volatility = volatility/(len(returns)-1) volatility = np.sqrt(volatility) sharpe_ratio = average_return/volatility #Calculate Maximum Drawdown max_drawdown = 0 for i in range(1, len(prices)): max_drawdown = max(prices[i]-min(prices[:i+1]), max_drawdown) return average_return, sharpe_ratio, max_drawdown"},{"prompt":"Create a Python plugin that utilizes a machine learning model to improve search results.","completion":"import json import numpy as np from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import cosine_similarity class SearchPlugin: def __init__(self, saved_model): \\"\\"\\" Initializes search plugin by loading the saved machine learning model. Parameters ---------- saved_model: str String path of the saved machine learning model. \\"\\"\\" self.model = json.loads(open(saved_model, 'r').read()) def search(self, query): \\"\\"\\" Utilizes the saved machine learning model to improve user query search results. Parameters ---------- query: str String representing user query. Returns ------- results: list List of most relevant search results. \\"\\"\\" # create vector representation of query query_vector = TfidfVectorizer(vocabulary=self.model).transform([query]).toarray() # calculate cosine similarity between query and previously indexed search results sims = cosine_similarity(query_vector, self.model['vector']) # sort results based on cosine similarity sims_sorted_indices = np.argsort(-sims) # return most relevant search results return self.model['result'][sims_sorted_indices]"},{"prompt":"Write an algorithm in Python for finding the minimum element in an array. [3, 4, 12, 19, 5, 17]","completion":"def findMin(arr): min = arr[0] for i in range(1, len(arr)): if arr[i] < min: min = arr[i] return min arr = [3, 4, 12, 19, 5, 17] print(findMin(arr))"},{"prompt":"Create a REST API in Python for managing a book library. This API should have endpoints to retrieve all books, find a book by id, create a new book, update an existing book, and delete a book. Not applicable","completion":"import flask from flask import Flask, jsonify, request app = Flask(__name__) books = [ {'id': 0, 'title': 'The Lord of the Rings', 'author': 'J. R. R. Tolkien'}, {'id': 1, 'title': 'The Alchemist', 'author': 'Paulo Coelho'}, {'id': 2, 'title': 'The Catcher in the Rye', 'author': 'J. D. Salinger'}, ] @app.route('/books', methods=['GET']) def get_all_books(): return jsonify(books) @app.route('/books/<int:book_id>', methods=['GET']) def get_book_by_id(book_id): book = books[book_id] return jsonify(book) @app.route('/books', methods=['POST']) def create_book(): new_book = { 'id': request.json['id'], 'title': request.json['title'], 'author': request.json['author'] } books.append(new_book) return jsonify(books) @app.route('/books/<int:book_id>', methods=['PUT']) def update_book(book_id): book = books[book_id] book['title'] = request.json['title'] book['author'] = request.json['author'] return jsonify(book) @app.route('/books/<int:book_id>', methods=['DELETE']) def delete_book(book_id): del books[book_id] return jsonify(books) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Can you write an optimized Python program that multiplies two matrices? A = [[1,2,3], [4,5,6], [7,8,9]] B = [[9,8,7], [6,5,4], [3,2,1]]","completion":"def matrixMultiplication(a, b): # Matrix result matrix result = [[0 for x in range(len(a))] for y in range(len(b[0]))] # Iterates through rows and columns of a and b for i in range(len(a)): for j in range(len(b[0])): for k in range(len(b)): # Multiply and add result[i][j] += a[i][k] * b[k][j] return result A = [[1,2,3], [4,5,6], [7,8,9]] B = [[9,8,7], [6,5,4], [3,2,1]] # Prints out the result matrix print(matrixMultiplication(A, B)) # Output: [[30, 24, 18], [84, 69, 54], [138, 114, 90]]"},{"prompt":"Design an API in Python to identify whether a given number is prime or not. Not applicable","completion":"def is_prime(n): \\"\\"\\" This function takes a positive integer as an argument and returns a boolean value determining if the number is a prime number or not. \\"\\"\\" if n <= 1: return False for i in range(2, int(n**0.5) + 1): # Use square root optimization if n % i == 0: return False return True"},{"prompt":"Generate a Python function to convert a given time in 24hour format to 12hour AM/PM format.","completion":"def convert_time_format(time): \\"\\"\\" Converts a given time in 24-hour format to 12-hour AM/PM format. Args: time (str): The time in 24-hour format. Return: str: The converted time in 12-hour AM/PM format. \\"\\"\\" # Extract the hour and minutes hour, minutes = int(time.split(':')[0]), int(time.split(':')[1]) # Check for Edge Cases if hour > 12: hour -= 12 pm = True elif hour == 0: hour = 12 pm = False elif hour == 12: pm = True else: pm = False # Format the time if minutes < 10: time_formatted = '{}:0{} '.format(hour, minutes) else: time_formatted = '{}:{} '.format(hour, minutes) # Add the PM/AM marker if pm: time_formatted += 'PM' else: time_formatted += 'AM' return time_formatted"},{"prompt":"Write Python code to find the sum of the factorial of a given number. 3","completion":"def find_sum_factorial_number(n): sum_num = 0 for i in range(1, n + 1): sum_num += math.factorial(i) return sum_num if __name__ == '__main__': n = int(input('Input a number: ')) print(find_sum_factorial_number(n))"},{"prompt":"Write a function to parse an http header to a python dictionary. http_header = 'Accept: application/jsonnContentType: text/htmlnContentLength: 15n'","completion":"\\"\\"\\" Write a function to parse an http header to a python dictionary. \\"\\"\\" # Get the input string http_header = 'Accept: application/jsonnContent-Type: text/htmlnContent-Length: 15n' # Parse the header string to a dictionary def parse_http_header(header): header_dict = {} definition_list = header.split('n') for definition in definition_list: # Skip invalid definitions (ex: \\"\\") if definition == '': continue # Split definition field into key and value (key, value) = definition.split(': ') # Update dictionary header_dict[key] = value return header_dict # Output the result header_dict = parse_http_header(http_header) print(header_dict)"},{"prompt":"Modify the given Python code to be more efficient. def my_function(N): list1 = [] for i in range(N): list2 = [] for j in range(N): list2.append(i+j) list1.append(list2) retur","completion":"def my_function(N): list1 = [[i+j for j in range(N)] for i in range(N)] return list1"},{"prompt":"Write a Python program to detect emotion from text. Text = I am so excited about this project","completion":"import nltk import numpy as np from nltk.sentiment.vader import SentimentIntensityAnalyzer sentiment_analyzer = SentimentIntensityAnalyzer() test_text = \\"I am so excited about this project\\" scores = sentiment_analyzer.polarity_scores(test_text) emotion = max(scores, key=lambda k: scores[k]) if emotion == 'pos': print('The sentiment conveys positive emotion.') elif emotion == 'neg': print('The sentiment conveys negative emotion.') elif emotion == 'neu': print('The sentiment conveys neutral emotion.') else: print('Unable to detect emotion.')"},{"prompt":"w would you set up a tree structure in Python with three levels and the ability to add nodes to the structure?","completion":"class TreeNode: def __init__(self, data): self.data = data self.children = [] def add_child(self, child): self.children.append(child) root = TreeNode(1) level_one = TreeNode(2) level_two = TreeNode(3) root.add_child(level_one) level_one.add_child(level_two)"},{"prompt":"Write a Python program that returns the index of a given item in a given list.","completion":"def find_index(item, array): for i in range(len(array)): if array[i] == item: return i"},{"prompt":"Design a function in Python to find the most frequently occurring value in a given array. An array of integers.","completion":"def most_frequent_value(array): counter_dict = {} for val in array: if val in counter_dict: counter_dict[val] += 1 else: counter_dict[val] = 1 max_count = 0 frequent_val = 0 for key,val in counter_dict.items(): if val > max_count: max_count = val frequent_val = key return frequent_val"},{"prompt":"Write a Python program to generate a dictionary that contains numbers (between 1 and n) in the form (x, x*x). n = 8","completion":"nums = {x: x*x for x in range(1, n+1)} print(nums)"},{"prompt":"The given code is a Python class \`ProcHelper\` that provides a helper for executing processes and commands. To use it, create an instance of the class with the command to execute and any additional arguments. The \`wait\` method can be called on the instance to wait for the process to complete and return the exit code, stdout, and stderr. The \`exec_with_wrapper\` function can be used to execute a command with a wrapper, such as \`cabal exec\` or \`stack exec\`. The \`get_source_dir\` function can be used to get the root of \`hssourcedirs\` for a given filename in a project.","completion":"# -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- # ProcHelper: Process execution helper class. # -~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~- import errno import subprocess import os import os.path import SublimeHaskell.sublime_haskell_common as Common import SublimeHaskell.internals.logging as Logging import SublimeHaskell.internals.settings as Settings import SublimeHaskell.internals.utils as Utils import SublimeHaskell.internals.which as Which import SublimeHaskell.internals.cabal_cfgrdr as CabalConfigRdr import SublimeHaskell.internals.cabal_reader as CabalReader class ProcHelper(object): \\"\\"\\"Command and tool process execution helper.\\"\\"\\" # Augmented PATH for the subprocesses and locating executables. augmented_path = None def __init__(self, command, **popen_kwargs): \\"\\"\\"Open a pipe to a command or tool.\\"\\"\\" if ProcHelper.augmented_path is None: ProcHelper.augmented_path = ProcHelper.make_augmented_path() Necessary evil: Don't cache the environment, just update the PATH in the current environment. Why? Because someone could (like me) change os.environ via the ST console and those changes would never make it here. Use case: settting http_proxy so that stack can fetch packages. proc_env = dict(os.environ) proc_env['PATH'] = ProcHelper.augmented_path + os.pathsep + proc_env.get('PATH', '') self.process = None self.process_err = None if Utils.is_windows(): startupinfo = subprocess.STARTUPINFO() startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW popen_kwargs['startupinfo'] = startupinfo # Allow caller to specify something different for stdout or stderr -- provide # the default here if unspecified. popen_kwargs['stdout'] = popen_kwargs.get('stdout', subprocess.PIPE) popen_kwargs['stderr'] = popen_kwargs.get('stderr', subprocess.PIPE) try: normcmd = Which.which(command, proc_env['PATH']) if normcmd is not None: self.process = subprocess.Popen(normcmd, stdin=subprocess.PIPE, env=proc_env, **popen_kwargs) else: self.process = None self.process_err = \\"SublimeHaskell.ProcHelper: {0} was not found on PATH!\\".format(command[0]) except OSError as os_exc: self.process_err = 'n'.join([\\"SublimeHaskell: Problem executing '{0}'\\".format(' '.join(command)) , 'Operating system error: {0}'.format(os_exc) ]) if os_exc.errno == errno.EPIPE: # Most likely reason: subprocess output a usage message stdout, stderr = self.process.communicate() exit_code = self.process.wait() self.process_err = self.process_err + 'n'.join(['' , 'Process exit code: {0}'.format(exit_code) , '' , \\"output:\\" , stdout if stdout else \\"--no output--\\" , '' , 'error:' , stderr if stderr else \\"--no error output--\\"]) self.process = None else: self.process = None raise os_exc # 'with' statement support: def __enter__(self): return self def __exit__(self, _type, _value, _traceback): self.cleanup() return False def cleanup(self): if self.process is not None: self.process.stdin.close() self.process.stdout.close() if self.process.stderr is not None: # stderr can be None if it is tied to stdout (i.e., 'stderr=subprocess.STDOUT') self.process.stderr.close() def wait(self, input_str=None): \\"\\"\\"Wait for subprocess to complete and exit, collect and decode \`\`stdout\`\` and \`\`stderr\`\`, returning the tuple \`\`(exit_code, stdout, stderr)\`\`\`\\"\\"\\" if self.process is not None: stdout, stderr = self.process.communicate(Utils.encode_bytes(input_str if input_str else '')) exit_code = self.process.wait() # Ensure that we reap the file descriptors. self.cleanup() return (exit_code, Utils.decode_bytes(stdout), Utils.decode_bytes(stderr)) return (-1, '', self.process_err or \\"?? unknown error -- no process.\\") # Update the augmented environment when \`add_to_PATH\` or \`add_standard_dirs\` change. @staticmethod def update_environment(_key, _val): # Reinitialize the tool -> path cache: Which.reset_cache() ProcHelper.augmented_path = ProcHelper.make_augmented_path() @staticmethod def make_augmented_path(): ''' Generate the augmented PATH for subprocesses: adds the appropriate cabal/stack local install directory (HOME/.local/bin for *nix, %APPDATA%/local/bin for Windows) and updates PATH with \`add_to_PATH\` extras. ''' std_places = [] if Settings.PLUGIN.add_standard_dirs: std_places.append(\\"HOME/.local/bin\\" if not Utils.is_windows() else \\"%APPDATA%/local/bin\\") if Utils.is_macosx(): std_places.append('HOME/Library/Haskell/bin') std_places += CabalConfigRdr.cabal_config() std_places = [dir for dir in [Utils.normalize_path(path) for path in std_places] if os.path.isdir(dir)] add_to_path = list(filter(os.path.isdir, map(Utils.normalize_path, Settings.PLUGIN.add_to_path))) Logging.log(\\"std_places = {0}\\".format(std_places), Logging.LOG_INFO) Logging.log(\\"add_to_PATH = {0}\\".format(add_to_path), Logging.LOG_INFO) return os.pathsep.join(add_to_path + std_places) @staticmethod def get_extended_path(): if ProcHelper.augmented_path is None: ProcHelper.augmented_path = ProcHelper.make_augmented_path() return ProcHelper.augmented_path + os.pathsep + (os.environ.get('PATH', '')) @staticmethod def run_process(command, input_string='', **popen_kwargs): \\"\\"\\"Execute a subprocess, wait for it to complete, returning a \`\`(exit_code, stdout, stderr)\`\`\` tuple.\\"\\"\\" with ProcHelper(command, **popen_kwargs) as proc: return proc.wait(input_string) def exec_wrapper_cmd(exec_with, cmd_list): wrapper = [] if exec_with == 'cabal': wrapper = ['cabal', 'exec', cmd_list[0]] elif exec_with == 'cabal-new-build': wrapper = ['cabal', 'new-run', 'exe:' + cmd_list[0]] elif exec_with == 'stack': wrapper = ['stack', 'exec', cmd_list[0]] else: errmsg = 'ProcHelper.exec_wrapper_cmd: Unknown execution prefix '{0}''.format(exec_with) raise RuntimeError(errmsg) return wrapper + ['--'] + cmd_list[1:] if cmd_list[1:] else wrapper def exec_with_wrapper(exec_with, install_dir, cmd_list): '''Wrapper function for inserting the execution wrapper, e.g., 'cabal exec' or 'stack exec' :returns: Process object from ProcHelper. ''' proc_args = {} if exec_with is not None: cmd_list = exec_wrapper_cmd(exec_with, cmd_list) if install_dir is not None: proc_args['cwd'] = Utils.normalize_path(install_dir) else: raise RuntimeError('ProcHelper.exec_with_wrapper: invalid install_dir (None)') else: cmd = Which.which(cmd_list[0], ProcHelper.get_extended_path()) if cmd is not None: cmd_list[0] = cmd Logging.log('ProcHelper.exec_with_wrapper: {0} in {1}'.format(cmd_list, proc_args.get('cwd')), Logging.LOG_DEBUG) return ProcHelper(cmd_list, **proc_args) def get_source_dir(filename): '''Get root of hs-source-dirs for filename in project. ''' if not filename: return os.path.expanduser('~') cabal_dir, cabal_proj = Common.locate_cabal_project(filename) if not cabal_dir: # No cabal file -> Punt and assume the source directory for the file and project is the same as the file. return os.path.dirname(filename) else: proj_info = CabalReader.CabalProjectReader(cabal_dir, cabal_proj) cabal_info = proj_info.cabal_info dirs = ['.'] executables = cabal_info.get('executable', {}) dirs.extend([sdir.strip() for exe in executables for sdirs in executables[exe].get('hs-source-dirs', []) for sdir in sdirs.split(',')]) dirs.extend([sdir.strip() for sdirs in cabal_info.get('library', {}).get('hs-source-dirs', []) for sdir in sdirs.split(',')]) paths = [os.path.abspath(os.path.join(cabal_dir, srcdirs)) for srcdirs in set(dirs)] paths.sort(key=lambda p: -len(p)) for path in paths: if filename.startswith(path): return path return os.path.dirname(filename)"},{"prompt":"Write a function in Python to count how many words are in the given string. Do not stand at my grave and weep","completion":"def count_words(string): words = string.split(' ') return len(words) sentence = \\"Do not stand at my grave and weep\\" count = count_words(sentence) print(\\"The given string has {} words.\\".format(count))"},{"prompt":"Design a Python program to detect if two strings have the same characters.","completion":"def same_chars(str1, str2): if len(str1) != len(str2): return False for i in range(len(str1)): if str1[i] != str2[i]: return False return True"},{"prompt":"Given two strings A and B, construct a Python program to determine if B is a substring of A. A = I am here B = here","completion":"def is_substring(A, B): if B in A: return True else: return False"},{"prompt":"Write a commandline program in Python to accept user input and display the sum of all numbers entered. Not applicable","completion":"import sys total = 0 for num in sys.argv[1:]: total += int(num) print('The sum of all numbers entered is:', total)"},{"prompt":"Design and implement a Binary Search Tree data structure in Python.","completion":"class Node(): def __init__(self, val): self.left = None self.right = None self.val = val class BinaryTree: def __init__(self): self.root = None def addNode(self, val): if self.root == None: self.root = Node(val) else: self._add(val, self.root) def _add(self, val, node): if val < node.val: if node.left is not None: self._add(val, node.left) else: node.left = Node(val) else: if node.right is not None: self._add(val, node.right) else: node.right = Node(val)"},{"prompt":"Write a Python class which implements the QuickSort algorithm.","completion":"class QuickSort(object): def __init__(self, array): self.array = array def partition(self, low, high): i = low - 1 pivot = self.array[high] for j in range(low, high): if self.array[j] <= pivot: i = i + 1 self.array[i], self.array[j] = self.array[j], self.array[i] self.array[i + 1], self.array[high] = self.array[high], self.array[i + 1] return i + 1 def quick_sort(self, low, high): if low < high: partition_index = self.partition(low, high) self.quick_sort(low, partition_index - 1) self.quick_sort(partition_index + 1, high)"},{"prompt":"Create a Python script to extract the title of a web page. <url>","completion":"import requests from bs4 import BeautifulSoup # Function to extract the title of a web page def extract_title(url): response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') return soup.title.string url = 'https://www.example.com' title = extract_title(url) print(title) # Output 'Example Domain'"},{"prompt":"Edit a given Python program such that it returns the optimal solution of a given problem. def solve_problem(input): solution = 0 for i in range(input): solution += input return solutio","completion":"def solve_problem(input): solution = 0 for i in range(input): if input < 0: break solution += input input -= 1 return solution"},{"prompt":"Generate a Python program to find all the common elements of two given lists. [1, 2, 3], [3, 4, 5]","completion":"def find_common_elements(list1, list2): return list(set(list1).intersection(set(list2))) result = find_common_elements([1, 2, 3], [3, 4, 5]) print(result)"},{"prompt":"Given a list of strings, create a Python program to find the longest common substring strings = [cat,car,hat]","completion":"def find_longest_common_substring(strings): if len(strings) == 0: return '' elif len(strings) == 1: return strings[0] else: # sort the strings strings.sort(key=len) # take the first string as longest longest = strings[0] for s in strings: # check if the first string is a substring of the next string if longest in s: # if so, keep the longest longest = s else: # if not, find the longest substring for i in range(len(longest)): if longest[0:len(longest) - i] in s: longest = longest[0:len(longest) - i] break return longest"},{"prompt":"Write a Python program that takes a user input of a number and prints out the corresponding character from the ASCII table. 76","completion":"# Python program to get ASCII value of a character c = input('Enter a character: ') # ord() function to get the ASCII value print('The ASCII value of ' + c + ' is', ord(c))"},{"prompt":"Write a Python program that sorts a list of integers in ascending order without using the builtin sort() method. [4, 5, 13, 2, 9, 7]","completion":"def selection_sort(arr): n = len(arr) for i in range(n): min_idx = i for j in range(i+1, n): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] arr = [4, 5, 13, 2, 9, 7] selection_sort(arr) print(arr) # Output: [2, 4, 5, 7, 9, 13]"},{"prompt":"mplement an Artificial Neural Network (ANN) model for text classification in Python. Not applicable","completion":"import keras from keras.layers import Embedding, SimpleRNN, Dense, Flatten from keras.models import Sequential vocab_size = 5000 # for example embedding_dim = 32 # for example model = Sequential() model.add(Embedding(vocab_size, embedding_dim)) model.add(SimpleRNN(32)) # for example model.add(Dense(1, activation='sigmoid')) model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['acc']) model.fit(x_train, y_train, epochs=10, batch_size=32)"},{"prompt":"Write a Python program to iterate through a given list of integers and output the maximum value. [1,5,2,3,8,9]","completion":"max_value = 0 for value in [1,5,2,3,8,9]: if value > max_value: max_value = value print(max_value) # Output: 9"},{"prompt":"Generate a Python program that will take two lists of integers as input and return a new list with the pairwise sums of the two inputs. List 1: 1,2,3,4 List 2: 4,5,6,7","completion":"def pairwise_sum(l1, l2): result = [] for x, y in zip(l1, l2): result.append(x + y) return result #Example Usage list_1 = [1,2,3,4] list_2 = [4,5,6,7] sums = pairwise_sum(list_1, list_2) print(sums) # [5,7,9,11]"},{"prompt":"Write a Python program to find the sum of all values in a nested dictionary. d = {a:1, b:2, c:{d:3, e: 4}}","completion":"def get_sum(data): \\"\\"\\"get the sum of all values in a nested dictionary\\"\\"\\" sum = 0 for key, value in data.items(): if type(value) is int: sum += value else: sum += get_sum(value) return sum d = {\\"a\\":1, \\"b\\":2, \\"c\\":{\\"d\\":3, \\"e\\": 4}} print(get_sum(d)) # Output: 10"},{"prompt":"Create a python program to rotate a list of numbers by a given number. [1,2,3,4,5]","completion":"def rotate_list(nums, n): return nums[n:] + nums[:n]"},{"prompt":"mplement a Python class that calculates factorial of a number.","completion":"class Factorial: def __init__(self,n): self.n=n def fact(self): f=1 while self.n>0: f*=self.n self.n-=1 return f num =int(input('Enter the number: ')) obj = Factorial(num) print('Factorial of ',num,' is: ',obj.fact())"},{"prompt":"Assuming a Python class Point for representing a point in a two dimensional plane with x and y as its field variables, write a method to calculate the distance from a point to the origin. class Point: def __init__(self, x=0, y=0): self.x = x self.y = y","completion":"class Point: def __init__(self, x=0, y=0): self.x = x self.y = y def distance_from_origin(self): return ((self.x ** 2) + (self.y ** 2)) ** 0.5"},{"prompt":"Create a Python program to generate a random password with at least 8 characters, of which at least one lowercase, one uppercase, one numeric, and one special character. Not applicable","completion":"import string import random def generate_password(): characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(characters) for i in range(8)) lowercase = [c for c in password if c.islower()] uppercase = [c for c in password if c.isupper()] digits = [c for c in password if c.isdigit()] special = [c for c in password if c in string.punctuation] if len(lowercase) == 0 or len(uppercase) == 0 or len(digits) == 0 or len(special) == 0: return generate_password() return password print(generate_password())"},{"prompt":"Design a function in Python that takes a string and a search term and returns the count of matches of the search term within the target string. targetString = the quick brown fox jumped over the lazy dog searchTerm = the","completion":"def countSearchTerm(targetString, searchTerm): count = 0 currentIndex = targetString.find(searchTerm) while (currentIndex != -1): count += 1 currentIndex = targetString.find(searchTerm, currentIndex + len(searchTerm)) return count"},{"prompt":"Generate a class in Python to represent a circle with radius and diameter properties.","completion":"class Circle: def __init__(self, radius): self.radius = radius self.diameter = 2 * self.radius @property def radius(self): return self.__radius @radius.setter def radius(self, radius): self.__radius = radius self.diameter = 2 * self.radius"},{"prompt":"Create a web API in Python Flask to compare two numerical values and return the greater one. value1 = 10 value2 = 20","completion":"from flask import Flask, jsonify, request app = Flask(__name__) @app.route('/compare', methods=['POST']) def compare(): data = request.get_json() value1 = data['value1'] value2 = data['value2'] greater_value = max(value1, value2) return jsonify({'greater_value': greater_value}) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python program to efficiently delete all items from a set that are in another set. A = {1, 2, 3, 4, 5} B = {2, 4}","completion":"A = {1, 2, 3, 4, 5} B = {2, 4} A -= B"},{"prompt":"Write a Python program to find the sum of all odd numbers up to a given number.","completion":"def find_sum(n): sum = 0 for i in range(1, n + 1): if i % 2 != 0: sum += i return sum n = 10 print(\\"Sum of odd numbers from 1 to\\", n, \\"is\\", find_sum(n))"},{"prompt":"Create a web scraper using Python that can scrape a simple, singlepage website and return the data. https://www.example.com/","completion":"from urllib.request import Request, urlopen from bs4 import BeautifulSoup request = Request('https://www.example.com/') response = urlopen(request) html_doc = response.read() soup = BeautifulSoup(html_doc, 'html.parser') # Get the title of the web page title_tag = soup.find('title') print('Title:', title_tag.string) # Get the list of headlines headline_tags = soup.find_all('h2') headlines = [headline_tag.string for headline_tag in headline_tags] print('Headlines:', headlines) # Get the list of links link_tags = soup.find_all('a') links = [link_tag['href'] for link_tag in link_tags] print('Links:', links)"},{"prompt":"Create an application in Python which will take an array of numbers and returns the median. [3, 4, 9, 6, 5]","completion":"def get_median(arr): arr.sort() n = len(arr) if n % 2 == 0: return (arr[n//2] + arr[n//2 - 1])/2 else: return arr[n//2] if name == \\"main\\": arr = [3, 4, 9, 6, 5] print(get_median(arr)) # Output -> 5.5"},{"prompt":"Write a function in Python to find the top k words in a given document. This is a document it contains some words and a lot of phrases. k = 2","completion":"from collections import Counter def topKWords(doc, k): words = doc.split() counts = Counter(words).most_common(k) return [word for word,_ in counts] doc = \\"This is a document it contains some words and a lot of phrases.\\" k = 2 print(topKWords(doc, k))"},{"prompt":"Develop a Python function that performs bubble sort to sort an array of numbers","completion":"def bubble_sort(array): n = len(array) for i in range(n): for j in range(0, n - i - 1): if array[j] > array[j + 1]: array[j], array[j + 1] = array[j + 1], array[j] return array"},{"prompt":"Create a Python file and import the following modules: math, PIL.Image, PIL.ImageDraw, django.http.HttpResponse, django.http.Http404, and django.shortcuts.render_to_response. Define a variable named google_dist and set it equal to 20037508.34. Define a function named leaflet_polygon_options that takes a boundary argument. Inside the function, count the number of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the boundary argument and store it in a variable named n. Return a dictionary with keys fill and outline and values that are the result of calling the leaflet_colour function with the n argument and (0,0,0,170), respectively. Define a function named leaflet_popup that takes a boundary argument. Inside the function, create a list of tuples named party_list where each tuple has a Party object and a queryset of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the boundary argument and a publisher_party attribute equal to the Party object. Use a list comprehension to generate the Party objects by filtering the Party model for objects that have a leaflet__leafletconstituency__constituency__boundary attribute equal to the boundary argument, then sort the resulting queryset by the name attribute, and remove duplicates using the distinct method. Append to the party_list a tuple with a dictionary with a name key and Uncategorised value and a queryset of Leaflet objects that have a leafletconstituency__constituency__boundary attribute equal to the boundary argument and a publisher_party attribute equal to None if there are any such Leaflet objects. Return a tuple with a string boundaries/leaflets.html and a dictionary with keys constituency and party_list and values equal to the boundary.constituency attribute and the party_list variable, respectively. Define a function named leaflet_colour that takes an n argument. Inside the function, calculate a logarithm of n+1 with base 2 and store it in a variable named r. Return a tuple of four integers that are the result of applying mathematical operations to r and constants. Define a function named leaflet_keyvalues that returns a list of integers. Define a dictionary named maps with a key leaflets and a value that is a dictionary with keys polygon_options, template, colour, and keyvalues and values that are the leaflet_polygon_options function, a tuple with a string boundaries/leaflets.html and the leaflet_popup function, the leaflet_colour function, and the leaflet_keyvalues function, respectively. Define a function named getDBzoom that takes a z argument. Inside the function, check if the integer value of z is greater than 10. If it is, return 10. Otherwise, return the integer value of z. Define a function named view_key that takes a request, mapname, n, x, and y arguments. Inside the function, create an Image object with RGBA mode and dimensions equal to x and y arguments, and a color that is the result of calling the colour function of the maps[mapname] dictionary with the integer value of n argument. Create an HttpResponse object with image/png mimetype. Save the Image object to the HttpResponse object with PNG format and return the HttpResponse object. Define a function named view_map that takes a request and mapname arguments. Inside the function, import the settings module from the django.conf package. Return a render_to_response function with a string boundaries/map.html and a dictionary with keys MEDIA_URL, mapname, and keyvalues and values that are the settings.MEDIA_URL attribute, the mapname argument, and the keyvalues attribute of the maps[mapname] dictionary, respectively. Define a function named tile that takes a request, mapname, tz, tx, ty, tilex, and tiley arguments. Inside the function, get the options attribute of the maps[str(mapname)] dictionary. Calculate the west, south, east, and north coordinates of the tile using the getTileRect function with tx, ty, and tz arguments. Calculate the zoom variable as 2 to the power of the float value of tz argument. Create an Image object with RGBA mode and dimensions equal to (256, 256) and a color that is a tuple of four integers that represent a transparent color. Create an ImageDraw object with the Image object. Calculate the dbz variable as the result of calling the getDBzoom function with the integer value of tz argument. Filter the Boundary model for objects that have a zoom attribute equal to dbz variable and south, north, east, and west attributes that satisfy certain conditions. Iterate over the resulting queryset and for each object, get the polygon_options attribute of the options dictionary by calling the polygon_options function with the Boundary object as an argument. Evaluate the boundary attribute of the Boundary object and store it in a variable named coords. Create an empty list named l. Iterate over the coords variable and for each tuple of coordinates, calculate the x and y variables using mathematical operations and append a tuple of two integers to the l list. Draw a polygon with the l list and the polygon_options attribute of the options dictionary using the ImageDraw object. Delete the ImageDraw object. Create an HttpResponse object with image/png mimetype. Save the Image object to the HttpResponse object with PNG format and return the HttpResponse object. Define a function named popup that takes a request, mapname, x, y, and z arguments. Inside the function, get the options attribute of the maps[str(mapname)] dictionary. Calculate the x and y variables as float values of x and y arguments, respectively. Calculate the dbz variable as the result of calling the getDBzoom function with the z argument. Filter the Boundary model for objects that have a zoom attribute equal to the integer value of dbz argument and south, north, east, and west attributes that satisfy certain conditions. Iterate over the resulting queryset and for each object, evaluate the boundary attribute and store it in a variable named coords. Create a boolean variable named inside and set it to False. Iterate over the coords variable and for each pair of consecutive tuples of coordinates, check if the y variable is between the vy0 and vy1 variables of the tuples and if the x variable is less than a certain value calculated using mathematical operations. If the conditions are satisfied, toggle the inside variable. If the inside variable is True, return a render_to_response function with arguments that are the result of calling the template attribute of the options dictionary with the Boundary object as an argument. Raise an Http404 exception if the inside variable is False after iterating over all the objects. Define a function named to_google that takes x and tilesAtThisZoom arguments. Inside the function, calculate a certain value using mathematical operations and return it. Define a function named getTileRect that takes xt, yt, and zoomt arguments. Inside the function, calculate the zoom, x, and y variables as integer values of zoomt, xt, and yt arguments, respectively. Calculate the tilesAtThisZoom variable as 2 to the power of zoom variable. Calculate the west, south, east, and north coordinates of the tile using the to_google function with x, tilesAtThisZoom arguments and certain mathematical operations. Return a tuple of four float values that represent the west, south, east, and north coordinates of the tile.","completion":"import math from PIL import Image, ImageDraw from django.http import HttpResponse, Http404 from django.shortcuts import render_to_response from boundaries.models import Boundary from parties.models import Party from leaflets.models import Leaflet google_dist = 20037508.34 def leaflet_polygon_options(boundary): n = Leaflet.objects.filter(leafletconstituency__constituency__boundary = boundary).count() return {\\"fill\\": leaflet_colour(n), \\"outline\\": (0,0,0,170)} def leaflet_popup(boundary): party_list = [( p, Leaflet.objects.filter( leafletconstituency__constituency__boundary=boundary, publisher_party = p)) for p in Party.objects.filter( leaflet__leafletconstituency__constituency__boundary=boundary) .distinct().order_by('name')] unclassified_leaflets = Leaflet.objects.filter( leafletconstituency__constituency__boundary=boundary, publisher_party = None) if unclassified_leaflets: party_list = party_list + [({\\"name\\": \\"Uncategorised\\"}, unclassified_leaflets)] return \\"boundaries/leaflets.html\\", {\\"constituency\\": boundary.constituency, \\"party_list\\": party_list } def leaflet_colour(n): r = math.log((n+1), 2) return (int(50 + r * 16), int(255 - r * 32), int(100 + r * 16), int(32 + r * 32)) def leaflet_keyvalues(): return [0,2,5,10,20,50,100,200] maps = {\\"leaflets\\": {\\"polygon_options\\": leaflet_polygon_options, \\"template\\": leaflet_popup, \\"colour\\": leaflet_colour, \\"keyvalues\\": leaflet_keyvalues()} } def getDBzoom(z): if int(z) > 10: return 10 else: return int(z) def view_key(request, mapname=None, n=None, x=None, y=None): image = Image.new(\\"RGBA\\", (int(x), int(y)), maps[mapname][\\"colour\\"](int(n))) response = HttpResponse(mimetype=\\"image/png\\") image.save(response, \\"PNG\\") return response def view_map(request, mapname): from django.conf import settings return render_to_response(\\"boundaries/map.html\\", {\\"MEDIA_URL\\":settings.MEDIA_URL, \\"mapname\\": mapname, \\"keyvalues\\":maps[mapname][\\"keyvalues\\"]}) def tile(request, mapname, tz=None, tx=None, ty=None, tilex=256, tiley = 256): options = maps[str(mapname)] west, south, east, north = getTileRect(tx, ty, tz) zoom = 2 ** float(tz) tx = float(tx) ty = float(ty) image = Image.new(\\"RGBA\\", (256, 256), (0, 0, 0, 0)) draw = ImageDraw.Draw(image) dbz = getDBzoom(tz) boundaries_within = Boundary.objects.filter(zoom=dbz, south__lt=north, north__gt=south, east__gt=west, west__lt=east) for boundary in boundaries_within: polygon_options = options[\\"polygon_options\\"](boundary) coords = eval(boundary.boundary) l = [] for lng, lat in coords: x = 256 * (lng - west) / (east - west) y = 256 * (lat - north) / (south - north) l.append((int(x), int(y))) draw.polygon(l, **polygon_options) del draw response = HttpResponse(mimetype=\\"image/png\\") image.save(response, \\"PNG\\") return response def popup(request, mapname, x=None, y=None, z=None): options = maps[str(mapname)] x = float(x) y = float(y) dbz = getDBzoom(z) possible_boundaries = Boundary.objects.filter(zoom=int(dbz), south__lt=y, north__gt=y, east__gt=x, west__lt=x) for boundary in possible_boundaries: coords = eval(boundary.boundary) inside = False for (vx0, vy0), (vx1, vy1) in zip(coords, coords[1:] + coords[:1]): if ((vy0>y) != (vy1>y)) and (x < (vx1-vx0) * (y-vy0) / (vy1-vy0) + vx0): inside = not(inside) if inside: return render_to_response(*options[\\"template\\"](boundary)) raise Http404 def to_google(x, tilesAtThisZoom): return google_dist * (1 - 2 * float(x) / tilesAtThisZoom) def getTileRect(xt, yt, zoomt): zoom = int(zoomt) x = int(xt) y = int(yt) tilesAtThisZoom = 2 ** zoom return (-to_google(x, tilesAtThisZoom), to_google(y + 1, tilesAtThisZoom), -to_google(x + 1, tilesAtThisZoom), to_google(y, tilesAtThisZoom))"},{"prompt":"Write a Python program using the SciPy library to solve the given equation. 3x 2y + z = 5","completion":"from scipy.optimize import fsolve #define the equation def equation(p): x, y, z = p return (3*x - 2*y + z - 5) #solve the equation result = fsolve(equation, (1, 1, 1)) #Print the result print(result)"},{"prompt":"Generate a Python function for computing the maximum value of two numbers.","completion":"def find_max_value(num1, num2): if num1 > num2: return num1 else: return num2"},{"prompt":"Create a script in Python to replace all occurrences of a character in a string with another character. string = This is an example","completion":"def replace_char(string, char1, char2): new_string = \\"\\" for char in string: if char == char1: new_string += char2 else: new_string += char return new_string string = \\"This is an example\\" new_string = replace_char(string, \\"s\\", \\"z\\") print(new_string) # Output: Thiz iz an example"},{"prompt":"Optimize the following python code to make it run faster. def sum_of_squares(n): s = 0 for i in range(n): s += i * i return","completion":"def sum_of_squares(n): # Use summation formula to optimize the code return (n * (n + 1) * (2 * n + 1)) // 6"},{"prompt":"Write a Python function to take the given list and return its elements joined into a single string.","completion":"def join_list(lst): return \\" \\".join(lst)"},{"prompt":"Construct an objectoriented Python program for the following purpose. Create a program to convert currency from one form to another.","completion":"class Converter: def __init__(self, base_currency): self.base_currency = base_currency self.rates = self.get_rates() def get_rates(self): # code to get the exchange rates from a web API def convert(self, target_currency, amount): return amount / self.rates[target_currency] * self.rates[self.base_currency] if __name__ == '__main__': converter = Converter(\\"USD\\") converted_amount = converter.convert(\\"EUR\\", 100) print(converted_amount)"},{"prompt":"Generate a python statements to insert an item at a specific index in a list. list = [1, 2, 4, 5] item = 3 index = 2","completion":"list.insert(index, item)"},{"prompt":"Can you write a python program to identify the last index of a given element in a list? The list [2, 5, 9, 2, 4] and the element 2","completion":"# Define the list list_ = [2, 5, 9, 2, 4] # Find the last index of element 2 last_index = len(list_) - list_[::-1].index(2) - 1 # Print the result print(last_index)"},{"prompt":"Generate a Python script to detect the most frequent word in a sentence.","completion":"def most_frequent_word(s): words = s.split() freq_word = words[0] freq_count = 1 for i in range(1, len(words)): if words[i] == freq_word: freq_count += 1 else: if freq_count > 1: freq_word = words[i] freq_count = 1 return freq_word"},{"prompt":"Design a Python program to convert text to Pig Latin Hello, world!","completion":"def textToPigLatin(text): words = text.split() new_words = [] for word in words: if word[0] in 'aeiou': new_word = word + 'ay' else: new_word = word[1:] + word[0] + 'ay' new_words.append(new_word) return \\" \\".join(new_words) print(textToPigLatin(\\"Hello, world!\\"))"},{"prompt":"Given a list of integer values, write a Python program to find the number of consecutive values that are increasing. numbers = [1, 2, 3, 4, 9, 8, 7, 6]","completion":"count = 0 for i in range(len(numbers) - 1): if numbers[i] < numbers[i + 1]: count += 1 print(count)"},{"prompt":"Develop an AI prediction model for a given dataset in Python. dataset.csv columns=[X1,X2....Xn, Y]","completion":"import pandas as pd import numpy as np # Read data from csv data = pd.read_csv('dataset.csv') # Separate features and target X = data.iloc[:, 0:-1].values Y = data.iloc[:, -1].values # Train-test split from sklearn.model_selection import train_test_split X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20, random_state=0) # Feature Scaling from sklearn.preprocessing import StandardScaler sc_X = StandardScaler() X_train = sc_X.fit_transform(X_train) X_test = sc_X.transform(X_test) # Train a model from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X_train, Y_train) # predict Y_pred = regressor.predict(X_test)"},{"prompt":"Given an email list, write a python program to sort the list alphabetically ['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']","completion":"def sort_list(list_of_emails): list_of_emails.sort() return list_of_emails print(sort_list(['bob@example.com', 'alice@example.com', 'jane@google.com', 'mary@example.com']))"},{"prompt":"Compose a Python program that reads in a string and finds the position of the longest alphabetical substring abcbcd","completion":"def longest_alphabet(string): max_length = 0 start_pos = 0 for x in range(len(string)): current_start_pos = x current_length = 0 for y in range(x, len(string)): if string[y] >= string[y-1]: current_length += 1 else: break if current_length > max_length: max_length = current_length start_pos = current_start_pos return start_pos"},{"prompt":"Given a list, write a Python function to separate the odd numbers from the even numbers. numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"def separate_odd_even(numbers): odd_numbers = [] even_numbers = [] for num in numbers: if num % 2 == 0: even_numbers.append(num) else: odd_numbers.append(num) return odd_numbers, even_numbers"},{"prompt":"Create a Python script that prints the number of unique characters in a given string and their frequency. Hello World","completion":"inputString = \\"Hello World\\" freq = {} for ch in inputString: if ch in freq: freq[ch] += 1 else: freq[ch] = 1 for key, value in freq.items(): print (key + \\" has a frequency of \\" + str(value))"},{"prompt":"Create an Objectoriented Python program that can accept a user’s name and salary as input and return the corresponding tax to be paid. Name: John Doe Salary: 45000","completion":"class User: def __init__(self, name, salary): self.name = name self.salary = salary def get_tax(self): if self.salary < 12500: return 0 elif self.salary >= 12500 and self.salary < 50000: return (self.salary - 12500) * 0.2 else: return (self.salary - 50000) * 0.45 + 7500 user_name = input('Name: ') salary = int(input('Salary: ')) user = User(user_name, salary) print('Tax to be paid: %s' % user.get_tax())"},{"prompt":"Write a Python program to identify the elements in a list that are present in another given list. list1 = [1, 4, 5, 6, 7] list2 = [2, 3, 5, 6, 7]","completion":"def identifyElements(list1, list2): # create a set from list1 set1 = set(list1) # create a set from list2 set2 = set(list2) # store the common elements in result result = [] # check for each element of list2 if it is present in set1 for element in set2: if element in set1: result.append(element) return result list1 = [1, 4, 5, 6, 7] list2 = [2, 3, 5, 6, 7] result = identifyElements(list1, list2) print(\\"Common Elements :\\",result) # Output: Common Elements: [5, 6, 7]"},{"prompt":"Create a Python script to play a game of Noughts and Crosses. Not applicable","completion":"# Constants for the game X = \\"X\\" O = \\"O\\" EMPTY = None class NoughtsAndCrosses: def __init__(self): self.board = [[EMPTY, EMPTY, EMPTY], [EMPTY, EMPTY, EMPTY], [EMPTY, EMPTY, EMPTY]] # Player X goes first self.turn = X # Total number of moves played self.count = 0 def move(self, row, col): # Validate move if self.board[row][col] != EMPTY: return # Apply move self.board[row][col] = self.turn # Update turn and move count if self.turn == X: self.turn = O else: self.turn = X self.count += 1 def game_over(self): # Check for a draw if self.count == 9: return True # Check for a winner for i in range(0, 3): # Check Horizontal if self.board[i][0] == self.board[i][1] == self.board[i][2] != EMPTY: return True # Check Vertical if self.board[0][i] == self.board[1][i] == self.board[2][i] != EMPTY: return True # Check Diagonal if self.board[0][0] == self.board[1][1] == self.board[2][2] != EMPTY: return True if self.board[0][2] == self.board[1][1] == self.board[2][0] != EMPTY: return True return False # Print board def display_board(self): print('---' * 3) for row in self.board: print('|', end=\\" \\") for cell in row: if cell == EMPTY: print(' ', end=\\" | \\") elif cell == X: print('X', end=\\" | \\") else: print('O', end=\\" | \\") print('') print('---' * 3) game = NoughtsAndCrosses() # Game loop while not game.game_over(): game.display_board() row = int(input(\\"Row: \\")) col = int(input(\\"Column: \\")) game.move(row, col) print(\\"Game over!\\") game.display_board()"},{"prompt":"Write a Python program to extract the text from an HTML document. <h2>Hello World!</h2>","completion":"from bs4 import BeautifulSoup html = '<h2>Hello World!</h2>' soup = BeautifulSoup(html, 'html.parser') text = soup.find('h2').text print(text) # Hello World!"},{"prompt":"Create a Python script that creates a report for analysis. data = [1,2,3,4,5]","completion":"def create_report(data): \\"\\"\\" Creates a report for analysis. Args: data: the data to use for analysis. Returns: report: the generated report. \\"\\"\\" report = \\"\\" report += \\"Data Analysis Reportnn\\" report += \\"Data Points: {}nn\\".format(data) report += \\"Average: {}n\\".format(sum(data)/len(data)) report += \\"Maximum: {}n\\".format(max(data)) report += \\"Minimum: {}n\\".format(min(data)) return report data = [1,2,3,4,5] report = create_report(data) print(report)"},{"prompt":"Generate a complete python code to print the output shown. I love Pytho","completion":"print(\\"I love Python\\")"},{"prompt":"Write an algorithm using Python that calculates the prime factors of an input number.","completion":"def prime_factorize(x): if x == 1: return [] i = 2 prime_factors = [] while x > 1: if x % i == 0: prime_factors.append(i) x= x / i else: i += 1 return prime_factors prime_factorize(10) # Output: [2, 5]"},{"prompt":"Write a Python program to find the optimal route for a delivery person given a set of delivery stops. Stops = [(0, 0), (1, 2), (3, 1), (3, 4)]","completion":"import itertools def find_optimal_route(stops): # Create a list of all possible routes routes = list(itertools.permutations(stops)) # Calculate the distance for each route distances = [] for route in routes: total_distance = 0 # Compute the distance from i to i+1 for i in range(len(route) - 1): x1, y1 = route[i] x2, y2 = route[i+1] total_distance += ((x1-x2)**2 + (y1-y2)**2) ** 0.5 distances.append(total_distance) # Return the route with the minimum distance min_index = distances.index(min(distances)) return routes[min_index] stops = [(0, 0), (1, 2), (3, 1), (3, 4)] optimal_route = find_optimal_route(stops) # [(0, 0), (3, 1), (1, 2), (3, 4)]"},{"prompt":"Construct an algorithm in Python to compute the sum of a array of numbers. [3,5,1,2]","completion":"def compute_sum(arr): # Initialize sum sum = 0 # Compute sum for num in arr: sum += num # Return the sum return sum # Testing arr = [3,5,1,2] print(compute_sum(arr))"},{"prompt":"Given a list of integers, write a Python program to compute the maximum difference between any two numbers of the list? [4, 8, 2, 10, 6]","completion":"def max_difference(numbers): max_diff = 0 for i in range(len(numbers)-1): for j in range(i+1, len(numbers)): cur_diff = abs(numbers[i] - numbers[j]) if cur_diff > max_diff: max_diff = cur_diff return max_diff result = max_difference([4, 8, 2, 10, 6]) print(result)"},{"prompt":"This code is a terminal tool to make time interval measures using the Tektronix FCA3103. To use it, run the main function and provide the following arguments: function or f: Measuring Function, choose between 'mtint' and 'tint' interval or t: Time between samples, an integer samples or s: Number of samples, an integer, default is 1 debug or d: Enable debug output, a boolean, default is False device or l: Device port, an integer, default is 1 output or o: Output data file, a string ref or r: Input channel for the reference, an integer, choose between 1 and 2, default is 1 trigl or g: Input trigger level, a float, default is 1.5 skip or i: Ignore values far from mean plus error, an integer, default is 0 tstamp or x: Add timestamping for each measure, a boolean, default is False.","completion":"#! /usr/bin/env python3 # -*- coding: utf-8 -* ''' Terminal tool to make Time Interval measures using the Tektronix FCA3103 @file @date Created on Sep. 16, 2015 @author Felipe Torres (torresfelipex1<AT>gmail.com) @copyright LGPL v2.1 ''' # ----------------------------------------------------------------------------| # GNU LESSER GENERAL PUBLIC LICENSE | # ------------------------------------ | # This source file is free software; you can redistribute it and/or modify it | # under the terms of the GNU Lesser General Public License as published by the| # Free Software Foundation; either version 2.1 of the License, or (at your | # option) any later version. This source is distributed in the hope that it | # will be useful, but WITHOUT ANY WARRANTY; without even the implied warrant | # of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser | # General Public License for more details. You should have received a copy of | # the GNU Lesser General Public License along with this source; if not, | # download it from http://www.gnu.org/licenses/lgpl-2.1.html | # ----------------------------------------------------------------------------| # ----------------------------------------------------------------------------- # Import -- # ----------------------------------------------------------------------------- import datetime import argparse as arg from subprocess import check_output from FCA3103 import FCA3103 def main() : ''' Tool for automatize the control of Tektronix FCA3103 Timer/Counter ''' parser = arg.ArgumentParser(description='Tektronix FCA3103 tool') parser.add_argument('--function', '-f', help='Measuring Function', choices=['mtint','tint'], required=True) parser.add_argument('--interval', '-t', help='Time between samples', type=int) parser.add_argument('--samples', '-s', help='Number of samples', type=int, default=1) parser.add_argument('--debug', '-d', help=\\"Enable debug output\\", action=\\"store_true\\", default=False) parser.add_argument('--device', '-l', help=\\"Device port\\", type=int, default=1) parser.add_argument('--output', '-o', help='Output data file', type=str) parser.add_argument('--ref', '-r', help='Input channel for the reference',type=int, choices=[1,2],default=1) parser.add_argument('--trigl','-g',help='Input trigger level', type=float, default=1.5) parser.add_argument('--skip','-i',help='Ignore values far from mean plus error',type=int, default=0) parser.add_argument('--tstamp','-x', help='Add timestamping for each measure',action=\\"store_true\\", default=False) args = parser.parse_args() valid_port = False ports = check_output([\\"\\"\\"ls /dev | grep usbtmc\\"\\"\\"],shell=True)[:-1] for p in ports.splitlines(): p = p.decode('utf-8') if int(p[-1]) == args.device: valid_port = True if not valid_port: print(\\"No device found at /dev/usbtmc%d\\" % (args.device)) exit(6) # No such device or address device = FCA3103(args.device, args.ref, 2 if args.ref == 1 else 1) device.show_dbg = args.debug device.t_samples = args.interval device.n_samples = args.samples device.skip_values = True if args.skip > 0 else False device.error = args.skip # TODO: Add de posibility of using different trigger values for the inputs device.trig_level[0] = device.trig_level[1] = args.trigl # try: if args.function == 'mtint': print(\\"Measuring Mean Time Interval between the inputs (%d secs)...\\" % (args.samples)) mean = device.mean_time_interval(args.samples, args.interval) print(\\"Mean Time Interval for %d samples: %g\\" % (args.samples, mean)) elif args.function == 'tint': print(\\"Measuring Time Interval between the inputs (%d secs)...\\" % (args.samples+10)) values = device.time_interval(args.samples, tstamp=args.tstamp) if args.output: with open(args.output,'a+') as file: file.write(\\"# Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)n\\" % args.samples) file.write(\\"# %sn\\" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')) for v in values: if args.tstamp: file.write(\\"%gt%gn\\" % (v[0], v[1])) else: file.write(str(v)) file.write(\\"n\\") print(\\"Output writed to '%s'\\" % (args.output)) else: print(\\"Time Interval Measurement (%d samples) with Tektronix FCA3103 (50ps)\\" % args.samples) print(\\"%sn\\" % datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')) for v in values: print(v) # except Exception as e: # print(e) if __name__ == \\"__main__\\" : main()"},{"prompt":"Create a python class which will contain all the necessary methods to implement the str method.","completion":"class MyClass: def __init__(self, *args): self.args = args def __str__(self): return 'MyClass({})'.format(', '.join(str(arg) for arg in self.args))"},{"prompt":"Can you write a Python program that takes a list of strings as an argument and returns the list with all elements sorted by their length? ['Cat','Dog','Elephant','Horse']","completion":"def sort_by_length(strings): return sorted(strings, key=len)"},{"prompt":"Write a Python program to store a dataset of students with their name, age, and grade. [{'Name':'Bob','Age': 18, 'Grade':'A'}, {'Name':'Alice','Age': 17, 'Grade':'B'}]","completion":"students = [{'Name':'Bob','Age': 18, 'Grade':'A'}, {'Name':'Alice','Age': 17, 'Grade':'B'}] class Student: def __init__(self,name, age, grade): self.name = name self.age = age self.grade = grade def setName(self,name): self.name = name def setAge(self,age): self.age = age def setGrade(self,grade): self.grade = grade def getName(self): return self.name def getAge(self): return self.age def getGrade(self): return self.grade def storeDataSet(students): data_set = [] for student in students: s = Student(student['Name'],student['Age'],student['Grade']) data_set.append(s) return data_set data = storeDataSet(students)"},{"prompt":"Create a neural network in Python that can recognize handwritten numbers.","completion":"import tensorflow as tf # Build the model model = tf.keras.Sequential() model.add(tf.keras.layers.Conv2D(filters=16, kernel_size=(3,3), activation='relu', input_shape=(28, 28, 1))) model.add(tf.keras.layers.MaxPooling2D(2,2)) model.add(tf.keras.layers.Dropout(0.2)) model.add(tf.keras.layers.Conv2D(filters=32, kernel_size=(3,3), activation='relu')) model.add(tf.keras.layers.MaxPooling2D(2,2)) model.add(tf.keras.layers.Dropout(0.2)) model.add(tf.keras.layers.Flatten()) model.add(tf.keras.layers.Dense(64, activation='relu')) model.add(tf.keras.layers.Dropout(0.2)) model.add(tf.keras.layers.Dense(10, activation='softmax')) # Compile the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"},{"prompt":"Create an asynchronous function in Python for processing a list of tasks. The task should complete one item from the list, and then pass that item to another function to be processed. Not applicable","completion":"async def process_tasks(tasks, fn): for task in tasks: await fn(task) def process_task(task): # Do something with task print(task) my_tasks = ['task_1', 'task_2', 'task_3'] asyncio.run(process_tasks(my_tasks, process_task))"},{"prompt":"Modify the following Python program to make it run faster by optimizing the code. # This code takes a list of integers and finds the 2nd biggest def find_2nd_largest(l): biggest = 1 2nd_biggest = 1 for i in l: if i > biggest: 2nd_biggest = biggest biggest = i elif i > 2nd_biggest: 2nd_biggest = i return 2nd_bigge","completion":"def find_2nd_largest(l): biggest = max(l) l.remove(biggest) 2nd_biggest = max(l) return 2nd_biggest"},{"prompt":"Create a todo list for programming tasks for the next week.","completion":"1. Complete pending assignments. 2. Review algorithms. 3. Update the portfolio website. 4. Attend a programming workshop. 5. Start working on a Machine Learning project. 6. Read some articles on JavaScript. 7. Create a web application using Node.js. 8. Practice solving programming puzzles. 9. Write a program for sorting an array. 10. Research on different AI technologies. 11. Write a blog post on recent web development trends. 12. Participate in hackathons. 13. Build a basic chatbot using Python. 14. Try to implement a Genetic Algorithm. 15. Learn a new programming language. 16. Make an interactive website using HTML, CSS and JavaScript. 17. Update skills by working on an open source project. 18. Create a machine learning model to classify images. 19. Work on an Android application."},{"prompt":"Find a way to split the string below into an array of length 3. string = Python is a great language","completion":"string = \\"Python is a great language\\" arr = string.split(' ', 3) print(arr)"},{"prompt":"Create a data visualization dashboard for a Stock Market prediction application using Python and D3.js. Not applicable","completion":"import pandas as pd import numpy as np from bokeh.plotting import figure, show, output_file from bokeh.models import ColumnDataSource, Div from bokeh.embed import components # read the data df = pd.read_csv('Data.csv') # create a ColumnDataSource source = ColumnDataSource(data=df) # create a figure and add the line graph with markers p = figure(plot_width=1000, plot_height=600) p.line('x', 'y', source=source, line_width=2, color='blue') p.circle('x', 'y', source=source, size=7, color='orange') # create a Div object to add the title div = Div(text='<h1>Stock Market Prediction Dashboard</h1>') # finally show the p and the div components p.add_layout(Div) show(p) # generate the script and div html elements script, div = components(p)"},{"prompt":"Provide a Python program that sorts a list of strings based on the length of the strings. [banana, apple, watermelon]","completion":"my_list = [\\"banana\\", \\"apple\\", \\"watermelon\\"] my_list.sort(key=len) # my_list is now [\\"apple\\", \\"banana\\", \\"watermelon\\"]"},{"prompt":"Design an algorithm in Python that will allow a user to input 1 or more numbers and then returns the smallest number. 12, 24, 9","completion":"# define the algorithm def find_min_num(nums): # declare a variable to hold the minimum number min_num = float('inf') # iterate over the numbers for num in nums: # if the number is smaller than the current minimum if num < min_num: # replace it min_num = num # once out of the loop, return the minimum number return min_num # call the algorithm min_num = find_min_num([12, 24, 9]) print(min_num) # output: 9"},{"prompt":"Design a class in Python that can be used to store the data of a book in a library.","completion":"class Book: def __init__(self, title, author, pages): self.title = title self.author = author self.pages = pages self.available = True def checkout(self): self.available = False def return_book(self): self.available = True"},{"prompt":"Create a Python program to calculate the Fibonacci sequence upto the nth term.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"prompt":"Generate a valid python program to calculate the frequency of occurrence of a character in a given string. Hello World!","completion":"def char_frequency(string): frequencies = {} for char in string: if char in frequencies: frequencies[char] += 1 else: frequencies[char] = 1 return frequencies freq = char_frequency(\\"Hello World!\\") print(freq)"},{"prompt":"Generate a function in Python that takes a list of strings and a integer, and returns a new list with the strings that have length greater than or equal to the given integer. [Java, C++, Swift, Python, Kotlin], 4","completion":"def filter_within_length(strings, length): result = [] for string in strings: if len(string) >= length: result.append(string) return result strings = [\\"Java\\", \\"C++\\", \\"Swift\\", \\"Python\\", \\"Kotlin\\"] result = filter_within_length(strings, 4) print(result)"},{"prompt":"Create a Python script that detects a cycle in a linked list. head > 1 > 2 > 3 > 4 > 5 > 6 > 3","completion":"def detect_cycle(head): # Use two pointers, one slow and one fast, to detect a cycle slow = fast = head # Init with head while slow and fast and fast.next: slow = slow.next # Move slow one node ahead fast = fast.next.next # Move fast two node ahead if slow == fast: # Detect cycle return True return False"},{"prompt":"Generate a correct python program to classify a dataset using kmeans. Dataset contains eight features with 600 data points.","completion":"import numpy as np from sklearn.cluster import KMeans # Read data points data_points = np.genfromtxt('data.csv', delimiter=',') # Create a k-means object kmeans_model = KMeans(n_clusters=3, random_state=0) # Fit the model kmeans_model.fit(data_points) # Get the labels labels = kmeans_model.labels_ # Print the labels for each data point for label in labels: print(label)"},{"prompt":"Develop a Python program to join two given sets.","completion":"def union_sets(set_one, set_two): union_set = set_one | set_two return union_set"},{"prompt":"Develop a function in Python to perform linear search on a given array and return the position of the target element. arr = [10, 50, 30, 20, 11], target = 20","completion":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 arr = [10, 50, 30, 20, 11] target = 20 index = linear_search(arr, target) if index != -1: print(\\"Element found at index\\", index) else: print(\\"Element is not present in the array\\")"},{"prompt":"Create a custom sorting algorithm in Python that sorts a list of integers from highest to lowest. int_list = [8, 5, 9, 3, 4, 6]","completion":"def custom_sort(int_list): for i in range(len(int_list)): for j in range(i+1, len(int_list)): if int_list[i] < int_list[j]: int_list[i], int_list[j] = int_list[j], int_list[i] return int_list int_list = [8, 5, 9, 3, 4, 6] sorted_list = custom_sort(int_list) print(\\"Sorted list: \\", sorted_list)"},{"prompt":"mplement a binary search algorithm in Python.","completion":"def binary_search(array, target): left = 0 right = len(array) - 1 while left <= right: middle = (left + right) // 2 if array[middle] == target: return middle elif array[middle] < target: left = middle + 1 else: right = middle - 1 return -1"},{"prompt":"Create a class in Python that will take two parameters (a, b) and return a * b.","completion":"class Multiplier: def __init__(self, a, b): self.a = a self.b = b def calculate(self): return self.a * self.b multiplier = Multiplier(8, 11) print(multiplier.calculate())"},{"prompt":"Utilize an existing ML algorithm in Python to classify a given dataset.","completion":"#Import necessary packages from sklearn.svm import SVC from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score #Split data into X and y X = dataset[:,:-1] y = dataset[:,-1] #Split data into test and train X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) #Initiate and fit the algorithm clf = SVC(kernel=\\"linear\\") clf.fit(X_train, y_train) #Make predictions with the trained model y_pred = clf.predict(X_test) #Calculate accuracy of the algorithm accuracy = accuracy_score(y_test, y_pred) print(\\"Accuracy: {}\\".format(accuracy))"},{"prompt":"Create a Python program that can generate random passwords using the given criteria? Password length: 8 Include at least one lowercase character Include at least one uppercase character Include at least one number","completion":"import random def generate_password(length): upper_case_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' lower_case_characters = 'abcdefghijklmnopqrstuvwxyz' numbers = '0123456789' chars = upper_case_characters + lower_case_characters + numbers password = '' secure_random = random.SystemRandom() for c in range(length): password += secure_random.choice(chars) return password print(generate_password(8))"},{"prompt":"Write a Python script to find out the sum of all the divisors of a given number. 16","completion":"def divisor_sum(n): sum = 0 for i in range(1, n+1): if n % i == 0: sum += i return sum n = 16 result = divisor_sum(n) print(result)"},{"prompt":"Write a Python code that would solve a sudoku puzzle using Python.","completion":"def sudoku(board): # Check if the board is full if not any(None in sublist for sublist in board): return True # Find empty cells for i in range(len(board)): for j in range(len(board[0])): if board[i][j]==None: for k in range(1,10): board[i][j]=k # Try to solve the board if sudoku(board): return True # Backtrack and try with different # values board[i][j]=None return False"},{"prompt":"Create a CLI program in Python that takes two arguments, multiplies them together and prints out the result. Not applicable","completion":"import argparse parser = argparse.ArgumentParser() parser.add_argument('number1', type=int, help='First number to multiply') parser.add_argument('number2', type=int, help='Second number to multiply') args = parser.parse_args() result = args.number1 * args.number2 print(result)"},{"prompt":"Create a Python program to remove all whitespaces from a string. This is a string with whitespaces","completion":"def remove_whitespace(s): return s.replace(\\" \\", \\"\\") print(remove_whitespace(\\"This is a string with whitespaces\\"))"},{"prompt":"Design a class in Python to represent a grocery store.","completion":"class GroceryStore: def __init__(self, name, products, location): self.name = name self.products = products self.location = location def get_all_products(self): return self.products def get_location(self): return self.location"},{"prompt":"Generate a program to find all the prime numbers between 1100 and 1300 in Python.","completion":"def is_prime(n): if n==2 or n==3: return True if n%2==0 or n<2: return False for i in range(3,int(n**0.5)+1,2): if n%i==0: return False return True def find_prime_numbers(start, end): primes = [] for num in range(start,end + 1): if is_prime(num): primes.append(num) return primes print(find_prime_numbers(1100, 1300)) # Output: [1103, 1105, 1107, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297]"},{"prompt":"Write a Python program that automates the process of password validation.","completion":"def password_validation(password): if(len(password) < 8): return False elif not any(char.isdigit() for char in password): return False elif not any(char.isupper() for char in password): return False elif not any(char.islower() for char in password): return False else: return True"},{"prompt":"Build a Python program that takes two numbers as inputs and prints the summation of both numbers. 3 and 4","completion":"# Python program to add two numbers # This function adds two numbers def add_two_numbers(num1, num2): return num1 + num2 # Take input from the user number1 = 3 number2 = 4 # Add two numbers sum = add_two_numbers(number1, number2) # Print the sum print(\\"Sum of the two numbers is:\\", sum)"},{"prompt":"Write a script in Python that can determine if a year is a leap year or not.","completion":"def is_leap(year): if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0: return True else: return False"},{"prompt":"Create a Python program to parse a CSV string and print each row in a readable format. CSVString = John Doe, 22, ABC Street, 07777nMary Smith, 26, XYZ Street, 02222","completion":"import csv csvString = \\"John Doe, 22, ABC Street, 07777nMary Smith, 26, XYZ Street, 02222\\" # Convert CSV String to List csvList = csvString.split('n') # Print each Row of CSV for row in csvList: print(row)"},{"prompt":"Write a Python program to find the common elements between two lists list1: [2, 4, 6, 8] list2: [4, 6, 10, 12]","completion":"def common_elements(list1, list2): # Make a copy of list list_copy = list2[:] # Iterate the original list for item in list1: if item in list_copy: list_copy.remove(item) # Return the common elements return list(set(list1) & set(list2))"},{"prompt":"mplement a simple ML algorithm in Python for binary classification. Not applicable","completion":"import numpy as np # Define sigmoid function def sigmoid(x): return 1 / (1 + np.exp(-x)) # Define input data X = np.array([[1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]) # Define output data y = np.array([[1], [0], [0], [1]]) # Initialize weights randomly weights = np.random.rand(3,1) # Define learning rate learning_rate = 0.1 # Preparing variables for gradient descent m = len(y) predictions = sigmoid(np.dot(X, weights)) # Calculate cost cost = (- 1 / m) * np.sum(y * np.log(predictions) + (1 - y) * (np.log(1 - predictions))) # Calculate gradient gradient = (1 / m) * np.dot(X.T, (predictions - y)) # Update weights weights -= learning_rate * gradient # Make predictions predictions = np.round(sigmoid(np.dot(X, weights))) # Print predictions print(predictions)"},{"prompt":"Write a classifier model in Python that predicts the age group of a given person by taking the date of birth as the input 05/07/2000","completion":"import datetime class AgeClassifierModel: def __init__(self): self.young_age_threshold = 19 self.adult_age_threshold = 44 def predict(self, dob): today = datetime.date.today() age = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day)) if age < self.young_age_threshold: return \\"Young\\" elif age < self.adult_age_threshold: return \\"Adult\\" else: return \\"Senior\\" if __name__ == '__main__': dob = datetime.date(2000, 7, 5) model = AgeClassifierModel() print(model.predict(dob))"},{"prompt":"Suggest a completion for the following Python code so that it prints the characters in a string in reverse order. my_str = Hello World for i","completion":"my_str = \\"Hello World\\" for i in range(len(my_str)-1, -1, -1): print(my_str[i], end=\\"\\")"},{"prompt":"Compose an editor program, in Python code, to remove all the duplicate words from a given sentence. sentence = This is a a random sentence with with repeated words","completion":"def remove_duplicates(sentence): words = sentence.split() words_without_duplicates = [] for i in words: if i not in words_without_duplicates: words_without_duplicates.append(i) return \\" \\".join(words_without_duplicates)"},{"prompt":"Create a program to print the following pattern using nested for loops in Python.","completion":"for i in range(5): for j in range(i): print(\\"*\\", end=\\"\\") print(\\"\\")"},{"prompt":"Write a Python program to generate a digital clock using the curses library. Not applicable","completion":"import curses def main(screen): clock = curses.newwin(5, 40, 0, 0) clock.box() while True: clock.addstr(1, 1, time.ctime()) clock.refresh() time.sleep(1) curses.wrapper(main)"},{"prompt":"Create a function in Python to delete all elements from a list which are divisible by 5. [1, 10, 15, 20, 25]","completion":"def delete_divisible_by_5(my_list): new_list = [] for i in my_list: if i % 5 != 0: new_list.append(i) return new_list # Test my_list = [1, 10, 15, 20, 25] new_list = delete_divisible_by_5(my_list) print(\\"List after deletion: \\" + str(new_list))"},{"prompt":"Generate a program written in Python that takes in two numbers from the user and prints out the greatest common divisor of the two. Not applicable","completion":"def GCD(a, b): # base case if (a == 0): return b if (b == 0): return a # a is greater if (a > b): return GCD(a % b, b) else: return GCD(a, b % a) # Driver Program a = 98 b = 56 if(GCD(a, b)): print('GCD of', a, 'and', b, 'is', GCD(a, b)) else: print('not found')"},{"prompt":"mprove the security of an existing Python web application by implementing a tokenbased authentication system. An example of an existing Python web application.","completion":"import uuid import hashlib # Example of an existing Python web application. class User: def __init__(self, username, password): self.username = username self.password = self.__encrypt_password(password) self.token = None def __encrypt_password(self, password): return hashlib.sha256(password.encode('utf-8')).hexdigest() def generate_token(self): self.token = uuid.uuid4().hex return self.token # Authentication system class Authentication: def __init__(self, users): self.users = users def validate_user(self, username, token): user = self.__find_user_by_username(username) return user.token == token def __find_user_by_username(self, username): for user in self.users: if user.username == username: return user \`\`\`"},{"prompt":"Write a Python program to find the most common element in an array. [3, 4, 2, 3, 5, 3, 2, 3]","completion":"def most_common_element(arr): frequency = 0 most_common = None for element in arr: count = arr.count(element) if count > frequency: frequency = count most_common = element return most_common print(most_common_element([3, 4, 2, 3, 5, 3, 2, 3]))"},{"prompt":"Create a Python script to detect if a number is prime. 10","completion":"def is_prime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True if __name__ == \\"__main__\\": n = 10 if is_prime(n): print(\\"{} is a prime number\\".format(n)) else: print(\\"{} is not a prime number\\".format(n))"},{"prompt":"Create a Python 3 program that prints out the numbers from 1 to 10 in reverse order.","completion":"for i in range(10, 0, -1): print(i)"},{"prompt":"Generate a class in Python, implementing the __init__ and __str__ methods to initialize a variable and print its value. name = John Doe","completion":"class Person: def __init__(self, name): self.name = name def __str__(self): return self.name p = Person('John Doe') print(p)"},{"prompt":"Write a function in Python that takes in a string and returns the number of uppercase and lowercase letters. This Is A Test String","completion":"def count_uppercase_lowercase(s): lowercase_count = 0 uppercase_count = 0 for c in s: if c.isupper(): uppercase_count+=1 elif c.islower(): lowercase_count+=1 return uppercase_count, lowercase_count uppercase_count, lowercase_count = count_uppercase_lowercase(\\"This Is A Test String\\") print(\\"Number of Uppercase letters : \\", uppercase_count) print(\\"Number of Lowercase letters : \\", lowercase_count)"},{"prompt":"Create a Python dictionary that stores the number of occurrences of each character in a string. s = Hello World!","completion":"def countCharacters(s): # Create empty dictionary chars_dict = {} # Iterate over each character in the string for char in s: # If the character is not in the dictionary, set the value to 1 if char not in chars_dict: chars_dict[char] = 1 # Otherwise, increment the value else: chars_dict[char] += 1 return chars_dict"},{"prompt":"Design a python class that contains an array of objects.","completion":"class ArrayObjects: def __init__(self): self.obj_array = [] # Adds an object to array. def add_object(self, obj): self.obj_array.append(obj) # Deletes an object from array. def delete_object(self, obj): self.obj_array.remove(obj) # Indexes an object in array. def index_object(self, index): return self.obj_array[index] # Returns the size of the array. def array_size(self): return len(self.obj_array)"},{"prompt":"Create a GPT model that takes a Python program and outputs a C# program with the same functionality. Not applicable","completion":"The GPT model could be used to convert between programming languages, such as from Python to C#. The model would be trained on pairs of programs written in two different languages with the same functionality. The model would then be used to automatically convert a Python program into the equivalent in C#."},{"prompt":"Write a Python program to generate all the prime numbers between two given numbers.","completion":"def prime_num_generator(start, end): prime_list = [] for num in range(start, end + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: prime_list.append(num) return prime_list"},{"prompt":"Create an API using Python Flask that returns a list of customer data fetched from a database. The API should be able to handle requests with query parameters to filter the results based on customer name. Not applicable","completion":"\\"\\"\\" Flask API to return customer data \\"\\"\\" import sqlite3 from flask import Flask, jsonify, request, g DATABASE = 'customer_database.db' app = Flask(__name__) def get_db(): db = getattr(g, '_database', None) if db is None: db = g._database = sqlite3.connect(DATABASE) return db @app.teardown_appcontext def close_connection(exception): db = getattr(g, '_database', None) if db is not None: db.close() @app.route('/customers', methods=['GET']) def get_customers(): query_parameters = request.args sqlCursor = get_db().cursor().execute(\\"SELECT * FROM customers\\") customers = [dict(zip([key[0] for key in sqlCursor.description], row)) for row in sqlCursor.fetchall()] if len(query_parameters) > 0: customers = filter_customers(customers, query_parameters) return jsonify(customers) def filter_customers(customers, query_parameters): filtering_params = {} for param in query_parameters: if param not in ['name']: return \\"Input not valid\\" filtering_params[param] = query_parameters[param] filtered_customers = [] for customer in customers: for key in filtering_params.keys(): if customer[key] == filtering_params[key]: filtered_customers.append(customer) return filtered_customers if __name__ == \\"__main__\\": app.run(host=\\"localhost\\", port=5000, debug=True)"},{"prompt":"Using Python, write a script to detect any outliers in the given dataset. Data points: [3, 5, 7, 8, 9, 2, 10, 11, 12, 60]","completion":"import numpy as np def detect_outliers(data): outliers = [] data = np.array(data) mean = np.mean(data) std = np.std(data) for i in data: z_score = (i - mean) / std if np.abs(z_score) > 3: outliers.append(i) return outliers"},{"prompt":"Write a Python function that joins two lists of different sizes in an alternating fashion. list1 = [1, 3, 5, 7, 9] list2 = [2, 4, 6, 8]","completion":"def joinLists(list1, list2): mergedList = [] for i in range(max(len(list1), len(list2))): if i < len(list1): mergedList.append(list1[i]) if i < len(list2): mergedList.append(list2[i]) return mergedList"},{"prompt":"Develop a program to convert JSON objects to Python dictionaries.","completion":"import json def json_to_dict(json_obj): return json.loads(json_obj)"},{"prompt":"Create a Python program to convert a currency from one denomination to another. amount: 27 source: USD destination: USD","completion":"def convert_currency(amount, source, destination): source_rate = 1.00 destination_rate = 1.00 result = 0.0 # Get exchange rates from external API # ... result = (source_rate * amount) / destination_rate return result amount = 27 source = 'USD' destination = 'EUR' result = convert_currency(amount, source, destination) print(result) # Output: 23.838 EUR"},{"prompt":"Create a Python function that takes two parameters, an array and a search query and returns the indices of the array where the element matches with the search query. arr = [1, 2, 5, 3, 4] searchQuery = 3","completion":"def searchIndex(arr, searchQuery): indices = [] for i in range(len(arr)): if arr[i] == searchQuery: indices.append(i) return indices arr = [1, 2, 5, 3, 4] searchQuery = 3 result = searchIndex(arr, searchQuery) print(result)"},{"prompt":"Build a python program to extract only the unique words from the following sentence. sentence = I like to play soccer and i like to play basketball","completion":"def extract_unique_words(sentence): words_list = sentence.split() unique_words_list = set(words_list) return unique_words_list"},{"prompt":"Create a basic Python program to generate a random password. The program should generate a password with 8 characters that includes at least 1 uppercase letter, 1 lowercase letter, 1 number and 1 symbol of your choosing. Not applicable","completion":"import random import string def generate_password(): upper_case = list(string.ascii_uppercase) lower_case = list(string.ascii_lowercase) symbols = ['!', '@', '#', '', '%', '^', '&', '*'] numbers = list(range(10)) chars = upper_case + lower_case + symbols + numbers password = '' for _ in range(8): password += random.choice(chars) return password password = generate_password() print(password)"},{"prompt":"Develop an algorithm to recognize a palindrome string.","completion":"#!/usr/bin/env python def isPalindrome(str): # Loop through the string # and check for the characters # from the beginning and end. for i in range(0, int(len(str)/2)): if str[i] != str[len(str)-i-1]: return False return True # Driver Code s = \\"level\\" a = isPalindrome(s) if a == 1: print(\\" Yes, it is Palindrome\\") else: print(\\"No, it is not palindrome\\")"},{"prompt":"Create a python code to classify the given dataset into two classes based on the income. import pandas as pd df = pd.DataFrame({'salary':[45000, 48000, 50000, 55000, 60000], 'education':[1, 1, 2, 2, 3]})","completion":"import pandas as pd from sklearn.svm import SVC df = pd.DataFrame({'salary':[45000, 48000, 50000, 55000, 60000], 'education':[1, 1, 2, 2, 3]}) # Define the features and target X = df[['salary', 'education']] y = [0, 0, 0, 1, 1] # Train the classifier clf = SVC() clf.fit(X, y) # Predict a sample sample = [[49000, 1], [59000,3]] print(clf.predict(sample))"},{"prompt":"Write a python program to evaluate the expressions of the form x op y (op is any of the +,,*,/,%)","completion":"def evaluate_expr(expr): op, x, y = expr.split() if op == '+' : return float(x) + float(y) if op == '-' : return float(x) - float(y) if op == '*' : return float(x) * float(y) if op == '/' : return float(x) / float(y) if op == '%': return float(x) % float(y)"},{"prompt":"Refactor a Python program to concatenate two strings without using the string.concat() function // Python program str1 = Hello str2 = World result = str1.concat(str2) print(Concatenated string: , result)","completion":"str1 = \\"Hello \\" str2 = \\"World\\" result = str1 + str2 print(\\"Concatenated string: \\", result)"},{"prompt":"Create a program in Python to convert a given number of days to years, months and days.","completion":"def convert_to_ymd(days): years = days // 365 months = (days % 365) // 30 days = (days % 365) % 30 return years, months, days"},{"prompt":"Create a program in Python that takes a collection of numbers as input and calculates their mean. [1, 4, 6, 8, 12]","completion":"def calculate_mean(nums): mean = 0 for num in nums: mean += num mean /= len(nums) return mean"},{"prompt":"Can you construct a python program to generate the Fibonacci series of size 10?","completion":"def generateFibonacciSeries(n): # Create an array with 0 and 1 fibArray =[0, 1] counter = 2 while counter < n: fibArray.append(fibArray[counter-1] + fibArray[counter-2]) counter+=1 return fibArray n = 10 print(generateFibonacciSeries(n))"},{"prompt":"Create a Python program to iterate through a dictionary and print out all the values. {a:1, b:2, c:3, d:4}","completion":"my_dict = {\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4} for key, value in my_dict.items(): print(value)"},{"prompt":"Create a string reverse function in Python.","completion":"def string_reverse(string): return string[::-1] print(string_reverse(\\"Hello world!\\"))"},{"prompt":"Write a Python class to represent a person and it should have attributes such as name, age, and gender.","completion":"class Person: def __init__(self,name,age,gender): self.name = name self.age = age self.gender = gender def get_name(self): return self.name def get_age(self): return self.age def get_gender(self): return self.gender"},{"prompt":"Write a Python program to parse a JSON response and extract the data. { employees: [ { id: 1, firstName: John, lastName: Doe }, { id: 2, firstName: Jane, lastName: Doe } ] }","completion":"import json data = '{\\"employees\\":[ {\\"id\\":1,\\"firstName\\":\\"John\\",\\"lastName\\":\\"Doe\\"}, {\\"id\\":2,\\"firstName\\":\\"Jane\\",\\"lastName\\":\\"Doe\\"} ]}' # Parse the JSON parsed = json.loads(data) # Extract the data employees = parsed['employees'] # Print the results for employee in employees: print(employee['firstName'], employee['lastName'])"},{"prompt":"Create a program in Python that will filter a list of numbers by removing any number divisible by 3. [2, 4, 7, 8, 10, 12, 15, 20]","completion":"def filter_by_three(numbers): filtered_numbers = [] for num in numbers: if num % 3 != 0: filtered_numbers.append(num) return filtered_numbers print(filter_by_three([2, 4, 7, 8, 10, 12, 15, 20]))"},{"prompt":"Build a Python class that can generate a random password of length 10 with at least 1 uppercase character, 1 lowercase character, 1 digit and 1 special character.","completion":"import random import string class PasswordGenerator: def __init__(self, length=10): self.length = length def generate_password(self): chars = string.ascii_letters + string.digits + '!@#%^&*()?' random_chars = ''.join(random.sample(chars, self.length)) uppercase_chars = [char for char in random_chars if char.isupper()] lowercase_chars = [char for char in random_chars if char.islower()] digits = [char for char in random_chars if char.isdigit()] special_chars = [char for char in random_chars if not char.isalnum()] if len(uppercase_chars) >=1 and len(lowercase_chars) >=1 and len(digits) >= 1 and len(special_chars) >= 1: return random_chars else: return self.generate_password()"},{"prompt":"Write a Python program to format a specified string to limit the number of characters to 6. Hello World","completion":"def limit_string(s): if len(s) >= 6: return s[:6] else: return s result = limit_string(\\"Hello World\\") print(result)"},{"prompt":"Python, write a program to generate the Fibonacci series up to nth term. n = 10","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b # Driver Program nterms = n # check if the number of terms is valid if nterms <= 0: print(\\"Please enter a positive integer\\") else: print(\\"Fibonacci sequence:\\") for i in range(nterms): print(fibonacci(i))"},{"prompt":"Write a python script which reformats the json string below data = '{name:Jason,age:42,favorite_food:Lasagna}'","completion":"import json def reformat_json(data): data = json.loads(data) return json.dumps(data, indent=4) data = '{\\"name\\":\\"Jason\\",\\"age\\":42,\\"favorite_food\\":\\"Lasagna\\"}' updated_data = reformat_json(data) print(updated_data) # {\\"name\\": \\"Jason\\", # \\"age\\": 42, # \\"favorite_food\\": \\"Lasagna\\"}"},{"prompt":"Create a Python class to represent a Rectangle with two properties: length and width.","completion":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def area(self): return self.length * self.width"},{"prompt":"This code is a Django management command for renaming a book. To use it, run the command with the name of the book as an argument, and specify any of the following options: owner: set the new owner of the book newbooktitle: set the new title of the book newbookurl: set the new URL of the book For example, to rename a book called old_name with a new title of new_title and a new URL of new_url and a new owner of new_owner, run the command: python manage.py rename_book old_name newbooktitle=new_title newbookurl=new_url owner=new_owner","completion":"# This file is part of Booktype. # Copyright (c) 2012 Aleksandar Erkalovic <aleksandar.erkalovic@sourcefabric.org> # # Booktype is free software: you can redistribute it and/or modify # it under the terms of the GNU Affero General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # Booktype is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU Affero General Public License for more details. # # You should have received a copy of the GNU Affero General Public License # along with Booktype. If not, see <http://www.gnu.org/licenses/>. from django.core.management.base import BaseCommand, CommandError from optparse import make_option from django.contrib.auth.models import User from booki.editor import common from booki.editor import models from django.conf import settings class Command(BaseCommand): args = \\"<book name>\\" help = \\"Rename book.\\" option_list = BaseCommand.option_list + ( make_option('--owner', action='store', dest='owner', default=None, help='Set new owner of the book.'), make_option('--new-book-title', action='store', dest='new_book_title', default=None, help='Set new book title.'), make_option('--new-book-url', action='store', dest='new_book_url', default=None, help='Set new book url name.'), ) requires_model_validation = False def handle(self, *args, **options): if len(args) != 1: raise CommandError(\\"You must specify book name.\\") try: book = models.Book.objects.get(url_title__iexact=args[0]) except models.Book.DoesNotExist: raise CommandError('Book \\"%s\\" does not exist.' % args[0]) if options['new_book_title']: book.title = options['new_book_title'] if options['new_book_url']: import os os.rename('%s/books/%s' % (settings.DATA_ROOT, book.url_title), '%s/books/%s' % (settings.DATA_ROOT, options['new_book_url'])) book.url_title = options['new_book_url'] # TODO: test this n = len(settings.DATA_ROOT)+len('books/')+1 for attachment in models.Attachment.objects.filter(version__book=book): name = attachment.attachment.name j = name[n:].find('/') newName = '%s/books/%s%s' % (settings.DATA_ROOT, book.url_title, name[n:][j:]) attachment.attachment.name = newName attachment.save() if options['owner']: try: user = User.objects.get(username=options['owner']) except User.DoesNotExist: raise CommandError('User \\"%s\\" does not exist. Can not finish import.' % options['owner']) book.owner = user book.save()"},{"prompt":"Write a Python script to calculate the sum of two numbers. num1 = 5 num2 = 10","completion":"num1 = 5 num2 = 10 total = num1 + num2 print(total)"},{"prompt":"Create a web scraping program in Python to extract text from a website","completion":"import requests from bs4 import BeautifulSoup # provide the url of the website you want to scrape url = 'https://example.com' # send request to the server and get the html content r = requests.get(url) # parse the html content soup = BeautifulSoup(r.content, 'html.parser') # extract text text = soup.find_all(text=True) for t in text: print(t.strip())"},{"prompt":"Generate a Python library for linear algebra operations.","completion":"import numpy as np def add(x, y): # adds two matrices x and y return np.add(x, y) def subtract(x, y): # subtracts two matrices x and y return np.subtract(x, y) def multiply(x, y): # multiplies two matrices x and y return np.matmul(x, y) def transpose(x): # transpose a matrix x return np.transpose(x) def determinant(x): # finds the determinant of a matrix x return np.linalg.det(x) def inverse(x): # finds the inverse of a matrix x return np.linalg.inv(x)"},{"prompt":"Write a Python program to generate a report of average speeds for all roads a given city. This report should include the name, direction, and average speed of each road in the city. An example of a dataset of roads in a city with relevant information like road name, direction, and speed lim","completion":"import csv road_data = [] # read the roads data into the list with open('roads.csv', 'r') as f: reader = csv.reader(f) next(reader) for row in reader: data = {'name': row[0], 'direction': row[1], 'speed_limit': int(row[2])} road_data.append(data) # compute the average speed average_speeds = {} for road in road_data: name = road['name'] direction = road['direction'] if name not in average_speeds: average_speeds[name] = {} if direction not in average_speeds[name]: average_speeds[name][direction] = 0 average_speeds[name][direction] += road['speed_limit'] # report the average speeds print('Report of average speeds for all roads:') for name, directions in average_speeds.items(): for direction, speed in directions.items(): print(f'{name} ({direction}): {speed / len(directions)}')"},{"prompt":"Write a Python program that implements a generic sorting algorithm. The program should accept a list as an input and generate a sorted list as an output. Input list: [2, 7, 5, 4, 1]","completion":"def sort(input_list): for index in range(len(input_list)-1): min_index = index for i in range(index+1, len(input_list)): if input_list[i] < input_list[min_index]: min_index = i if min_index != index: input_list[min_index], input_list[index] = input_list[index], input_list[min_index] return input_list #Example list = [2, 7, 5, 4, 1] sort(list) # Output [1, 2, 4, 5, 7]"},{"prompt":"Create a Python program that takes a number of words, and prints out the frequency of each word. [hello, world, hello, I, am, here, hello, world]","completion":"words = [\\"hello\\", \\"world\\", \\"hello\\", \\"I\\", \\"am\\", \\"here\\", \\"hello\\", \\"world\\"] # create an empty dictionary to store word and its frequency freq = {} # count frequency of each word for word in words: if word in freq: freq[word] += 1 else: freq[word] = 1 # print the frequency for k, v in freq.items(): print(k, \\":\\", v)"},{"prompt":"Create a Python script to parse a JSON response into readable values. Not applicable","completion":"import json # Sample json response json_response = { “name\\": “John Doe\\", \\"age\\": 25, \\"hobbies\\": [“hiking\\", \\"swimming\\", \\"fishing\\"] } # Parse json parsed_json = json.loads(json_response) # Print values print(\\"Name: {}\\".format(parsed_json[\\"name\\"])) print(\\"Age: {}\\".format(parsed_json[\\"age\\"])) print(\\"Hobbies: {}\\".format(\\", \\".join(parsed_json[\\"hobbies\\"]))) # Output: # Name: John Doe # Age: 25 # Hobbies: hiking, swimming, fishing"},{"prompt":"Create a function in Python that takes two integers as arguments and print the sum of them.","completion":"def add_numbers(a, b): \\"\\"\\"Returns the sum of two numbers\\"\\"\\" return a + b if __name__ == '__main__': print(add_numbers(2, 3))"},{"prompt":"Create a function in Python that shuffles the order of the items in a list. [1,2,3,4,5]","completion":"import random def shuffle_list(arr): # Shuffle given list random.shuffle(arr) return arr # Driver function arr = [1,2,3,4,5] print(\\"Initial list: n\\",arr) print(\\"nFinal list: n\\",shuffle_list(arr))"},{"prompt":"Transform string of format ‘YYYYMMDD’ to date type in Python date_str = 20200430","completion":"import datetime def date_string_to_datetime(date_str): return datetime.datetime.strptime(date_str, \\"%Y-%m-%d\\").date()"},{"prompt":"Develop a python program to solve the 01 Knapsack Problem values = [20, 5, 10, 40, 15, 25] weights = [1, 2, 3, 8, 7, 4] capacity = 10","completion":"# A Dynamic Programming based # Python program for 0-1 Knapsack problem # Returns th maximum value that can # be put in a knapsack of capacity W def knapSack(W, wt, val, n): # Base Case if n == 0 or W == 0: return 0 # If weight of the nth item is more than Knapsack of capacity # W, then this item cannot be included in the optimal solution if wt[n-1] > W: return knapSack(W, wt, val, n-1) # return the maximum of two cases: # (1) nth item included # (2) not included else: return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), knapSack(W, wt, val, n-1)) # Driver program to test above function values = [20, 5, 10, 40, 15, 25] weights = [1, 2, 3, 8, 7, 4] capacity = 10 n = len(values) print(knapSack(capacity, weights, values, n))"},{"prompt":"Build a web API in Python to find all books from a given author. Author name: J.K. Rowling","completion":"import flask from flask import Flask, jsonify app = Flask(__name__) @app.route('/books/author/<author_name>', methods=['GET']) def get_books_by_author(author_name): books = [ {'name': 'Harry Potter and the Philosopher's Stone', 'author': 'J.K. Rowling'}, {'name': 'Harry Potter and the Chamber of Secrets', 'author': 'J.K. Rowling'}, {'name': 'Harry Potter and the Prisoner of Azkaban', 'author': 'J.K. Rowling'}, {'name': 'Harry Potter and the Goblet of Fire', 'author': 'J.K. Rowling'} ] books_by_author = [book for book in books if book['author'] == author_name] return jsonify({'books': books_by_author}) if __name__ == '__main__': app.run()"},{"prompt":"Write a script to benchmark performance of different sorting algorithms in Python. Not applicable","completion":"import random import time MAX_NUMBER = 100 def selection_sort(array): for i in range(len(array) - 1): #Find the minimum element in the unsorted array min_index = i for j in range(i+1, len(array)): if array[min_index] > array[j]: min_index = j #Swap with the first element array[i], array[min_index] = array[min_index], array[i] def bubble_sort(array): for i in range(len(array)-1): for j in range(len(array)-i-1): if array[j] > array[j+1]: array[j], array[j+1] = array[j+1], array[j] def insertion_sort(array): for i in range(1, len(array)): key = array[i] j = i-1 while j>= 0 and key < array[j]: array[j+1] = array[j] j -= 1 array[j+1] = key # Generate random list of integers random_list = [random.randint(0, MAX_NUMBER) for _ in range(MAX_NUMBER)] # Make copies of random list selection_sort_list = random_list.copy() bubble_sort_list = random_list.copy() insertion_sort_list = random_list.copy() # Compute the time taken for each sorting algorithm start = time.time() selection_sort(selection_sort_list) end = time.time() print(\\"Selection sort time taken: %f\\" % (end - start)) start = time.time() bubble_sort(bubble_sort_list) end = time.time() print(\\"Bubble sort time taken: %f\\" % (end - start)) start = time.time() insertion_sort(insertion_sort_list) end = time.time() print(\\"Insertion sort time taken: %f\\" % (end - start))"},{"prompt":"Create an algorithm in Python to solve the knapsack problem. weights = [10, 20, 30] values = [60, 100, 120] capacity = 50","completion":"# Construct a 2D array to store the results # of subproblems values_size = len(values) result_matrix = [[0 for x in range(capacity + 1)] for y in range(values_size + 1)] # Fill matrix in bottom up manner for i in range(values_size + 1): for j in range(capacity + 1): # Base condition if i == 0 or j == 0: result_matrix[i][j] = 0 # Item can be included elif weights[i - 1] <= j: result_matrix[i][j] = max(values[i - 1] + result_matrix[i - 1][j - weights[i - 1]], result_matrix[i - 1][j]) # Ignore the item else: result_matrix[i][j] = result_matrix[i - 1][j] # Maximum value of the matrix maximum_value = result_matrix[values_size][capacity]"},{"prompt":"Create an Optimizer function in Python to optimize a given function f(x) for x in [4, 4]. Function f(x): f(x) = x^2 3x + 2","completion":"import numpy as np from scipy.optimize import minimize # Function to optimize def f(x): return x**2 - 3*x + 2 # Optimize optimized = minimize(f, [-4, 4], method=\\"L-BFGS-B\\") # Print result print(\\"Optimized value of the function: \\", optimized.fun) # prints -3.999999999999997 print(\\"Optimized value of x: \\", optimized.x) # prints [-4.]"},{"prompt":"Create a Python procedure to determine if two numbers are divisible. 14 and 7","completion":"def divisible(x, y): if x % y == 0: return True else: return False"},{"prompt":"Develop a function in Python that converts the temperature from Celsius to Fahrenheit given the Celsius parameter.","completion":"def celsius_to_fahrenheit(celsius): \\"\\"\\"Converts a temperature in Celsius to Fahrenheit\\"\\"\\" return celsius * 9/5 + 32"},{"prompt":"Design a code for clustering data using Python and the Kmeans algorithm.","completion":"import numpy as np from sklearn.cluster import KMeans # Load the data data = np.loadtxt('data.txt') #Train Clustering Model kmeans = KMeans(n_clusters=3, random_state=0) kmeans.fit(data) #Make Predictions labels = kmeans.predict(data) #Print the labels print(labels)"},{"prompt":"Design a function in Python that takes in two numbers and outputs their sum. 2, 3","completion":"def sumTwo(a, b): return a + b print(sumTwo(2, 3))"},{"prompt":"Write a python program that extracts key phrases from a given text using TextRank algorithm. This is an example tex","completion":"import nltk from nltk.tokenize import sent_tokenize from nltk.corpus import stopwords from sklearn.metrics.pairwise import cosine_similarity import networkx as nx text = \\"This is an example text\\" sentences = sent_tokenize(text) words = [nltk.word_tokenize(sentence) for sentence in sentences] stop_words = set(stopwords.words(\\"english\\")) words_filtered = [] for i in words: words_filtered.append([w for w in i if not w in stop_words]) sim_matrix = cosine_similarity(words_filtered) nx_graph = nx.from_numpy_array(sim_matrix) scores = nx.pagerank(nx_graph) ranked_sentences = sorted(zip(scores, sentences), reverse=True) line = len(ranked_sentences)*[0] for i in range(0, len(ranked_sentences)): line[i] = ranked_sentences[i][1] # Output print(\\"TextRank Phrases: \\", line)"},{"prompt":"Write a Python program to calculate the tax for an item given a set of tax rates. Tax Brackets: [0.01, 0.05, 0.1, 0.15, 0.2], Item Price: 110","completion":"def calculate_tax(brackets, price): taxamount = 0 for i in range(len(brackets)): if price>=100*(i+1): taxamount += 100*brackets[i] else: taxamount += (price%100)*brackets[i] break return taxamount tax_brackets = [0.01, 0.05, 0.1, 0.15, 0.2] item_price = 110 tax = calculate_tax(tax_brackets, item_price) print(tax)"},{"prompt":"Create an algorithm to solve the traveling salesman problem in Python with the provided inputs. [ (1, 2, 10), (1, 3, 15), (2, 3, 10), (2, 4, 25), (3, 4, 20), ]","completion":"#import necessary libraries import numpy as np #define inputs inputs = np.array([ (1, 2, 10), (1, 3, 15), (2, 3, 10), (2, 4, 25), (3, 4, 20), ]) #define distances matrix dist_mat = np.zeros((inputs.shape[0], inputs.shape[0])) for i in range(inputs.shape[0]): for j in range(inputs.shape[0]): if i != j: dist_mat[i, j] = inputs[i, 2] + inputs[j, 2] #define start and end points start = inputs[0, 0] end = inputs[-1, 1] #define pathfinder algorithm def tsp_finder(start, end, dist_mat): #initialize a matrix to track visited nodes visited = np.zeros_like(dist_mat, dtype = bool) #the first node will be marked as visited visited[start] = True #initialize curr with start value curr = start #initialize min_dist with infinity min_dist = float(\\"inf\\") #initialize the optimal path opt_path = [curr] #loop until the end node is reached while curr != end: #update all unvisited nodes for node in range(dist_mat.shape[0]): if visited[node] == False: #if the distance from the current node to the node is less than the minimum distance if dist_mat[curr, node] < min_dist: #update the minimum distance min_dist = dist_mat[curr, node] #update the optimal path opt_path.append(node) #update the current node curr = node #mark curr as visited visited[curr] = True #add the end node to the optimal path opt_path.append(end) #return the optimal path return opt_path #find the optimal path optimal_path = tsp_finder(start, end, dist_mat) print(\\"Optimal Path:\\", optimal_path)"},{"prompt":"Write a code in Python to parse a JSON string. { name: James, age: 27 }","completion":"import json json_string = '{\\"name\\": \\"James\\",\\"age\\": 27}' data = json.loads(json_string) print(data[\\"name\\"], data[\\"age\\"])"},{"prompt":"Write a Python script that sorts a list of tuples in descending order based on the second element of each tuple. [('a', 3), ('b', 1), ('c', 4)]","completion":"def sortTupleListInDescendingOrder(tuple_list): tuple_list.sort(key=lambda tup: tup[1], reverse=True) return tuple_list sorted_list = sortTupleListInDescendingOrder([('a', 3), ('b', 1), ('c', 4)]) print(sorted_list)"},{"prompt":"Create a script in Python that reads a dataset of airline passenger data and outputs the average fare per class. Passenger_class Age Fare 1 18 272 2 21 209 1 23 246 2 20 101","completion":"import pandas as pd data = pd.read_csv(\\"data.csv\\") # Calculate the average fare for each passenger class fare_by_class = data.groupby('Passenger_class')['Fare'].mean() # Output the average fare per class for class_id, avg_fare in fare_by_class.iteritems(): print(f\\"Average fare for class {class_id}: {avg_fare:.2f}\\")"},{"prompt":"Write a Python program to divide two numbers and print the quotient and the remainder. Number1: 15 Number2: 4","completion":"def divide(num1, num2): quotient = num1 // num2 remainder = num1 % num2 return quotient, remainder quotient, remainder = divide(15, 4) print(\\"Quotient :\\", quotient) print(\\"Remainder :\\", remainder)"},{"prompt":"Design a Python program to print a triangle of numbers.","completion":"def triangle_of_nums(n): k = 0 for i in range(1, n + 1): # inner loop to handle number of columns for j in range(0, i): # printing numbers print(k, end=\\" \\") # incrementing k k = k + 1 # ending line after each row print(\\"r\\") n = 4 triangle_of_nums(n) # Output: # 0 # 1 2 # 3 4 5 # 6 7 8 9"},{"prompt":"Write a Python program to create a tictactoe game.","completion":"# define a function to draw the board def draw_board(): print(\\"n\\") print(\\" --- | --- | --- \\") print(\\" 7 | 8 | 9 \\") print(\\" --- | --- | --- \\") print(\\" 4 | 5 | 6 \\") print(\\" --- | --- | --- \\") print(\\" 1 | 2 | 3 \\") print(\\" --- | --- | --- \\") # define a function to check if position is empty def check_position(position, board): return board[position] == ' ' # define a function to check if board is full and return boolean def is_board_full(board): for i in range(1, 10): if check_position(i, board): return False return True"},{"prompt":"Design a web service using the Flask framework and Python. This service should have an API endpoint to accept POST requests with JSON input. The endpoint should take in a JSON input of numbers and send back the sum of the numbers in the response. [1, 2, 3]","completion":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/sum_numbers', methods=['POST']) def sum_numbers(): data = request.get_json() numbers = data.get('numbers', []) total = 0 for n in numbers: total += n return jsonify({'sum': total}) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python function to compare two strings and check if they are equal. Compare 'Hello' and 'World'","completion":"def str_compare(str1, str2): return str1 == str2 str_compare('Hello', 'World')"},{"prompt":"Creating a Python dictionary comprehension, generate a new dictionary with keys from the first dictionary and values multiplied by 2. {'a': 1, 'b': 2, 'c': 3,}","completion":"my_dict = {'a': 1, 'b': 2, 'c': 3} new_dict = {k:v*2 for k, v in my_dict.items()} print(new_dict) # {'a':2, 'b':4, 'c':6}"},{"prompt":"Create a Python script that takes in two strings and returns a value representing their similarity. string1 = Hello World! string2 = Goodbye World!","completion":"def string_similarity(string1, string2): # Create dictionary for storing character frequencies char_freq_dict = dict() for char in string1: if char in char_freq_dict: char_freq_dict[char] += 1 else: char_freq_dict[char] = 1 # Count number of matching characters matches = 0 for char in string2: if char in char_freq_dict and char_freq_dict[char] > 0: matches += 1 char_freq_dict[char] -= 1 # Calculate similarity similarity = (matches/len(string1)) * 100 return similarity"},{"prompt":"Create a Python script to read data from a database. Table Name: 'customers'","completion":"import psycopg2 connection = psycopg2.connect(database='dbname', user='user', password='password', host='localhost', port='5432') cursor = connection.cursor() cursor.execute('SELECT * FROM customers') rows = cursor.fetchall() for row in rows: print(row) cursor.close()"},{"prompt":"Generate a machine learning model in Python for predicting the rating for a provided list of attractions. List of attractions: 1. Harbour Bridge 2. Opera House 3. Bondi Beach","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error #importing the dataset attractions = ['Harbour Bridge', 'Opera House', 'Bondi Beach'] ratings = [5, 4, 4.5] #generating the model model = LinearRegression() model.fit(attractions, ratings) #testing the model predicted = model.predict([['Harbour Bridge']]) print('Predicted rating for Harbour Bridge is ' + str(predicted[0]))"},{"prompt":"Create a Python program to generate a random word between 8 and 16 characters.","completion":"import random def generate_random_word(length): letters = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\\" return ''.join(random.choice(letters) for i in range(length)) length = random.randint(8, 16) word = generate_random_word(length) print(\\"Random word of length\\", length, \\"is:\\", word)"},{"prompt":"Create a Python program that sorts a list of integers in increasing order.","completion":"def sort_integers(nums): for i in range(len(nums)): for j in range(i+1, len(nums)): if nums[i] > nums[j]: nums[i], nums[j] = nums[j], nums[i] return nums"},{"prompt":"Create a Python script to detect if a certain item is in a given list of items. The script should work for any type of item. items = [1,2,3,4,5]","completion":"def detect_item(items, item): if item in items: return True else: return False"},{"prompt":"mplement this algorithms in Python. Algorithm: Depthfirst Search","completion":"def dfs(graph, start): visited = [] stack = [start] while stack: vertex = stack.pop() if vertex not in visited: visited.append(vertex) for node in graph[vertex]: stack.append(node) return visited"},{"prompt":"Write a Python script to convert temperatures from Fahrenheit to Celsius.","completion":"def fahrenheit_to_celsius(fahrenheit): celsius = (fahrenheit - 32) * 5/9 return celsius"},{"prompt":"Write a Python program to print a Welcome message for the user. Username: Joh","completion":"print(\\"Welcome John!\\")"},{"prompt":"The code is a Python function named \`probe\` that takes a multiline text as input and parses it into a dictionary. To use the function, call it with a string of text generated by \`ffprobe\` or \`avprobe\`. The output will be a dictionary containing the parsed data.","completion":"# coding: utf-8 \\"\\"\\" Copyright (c) 2013 João Bernardo Vianna Oliveira This file is part of Discoder. Discoder is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. Discoder is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with Discoder. If not, see <http://www.gnu.org/licenses/>. \\"\\"\\" __author__ = 'jb' from discoder.lib import Obj import re class ParseError(Exception): pass tag = Obj( # Regex for parsing the markup language generated by ffprobe or avprobe open = re.compile(r'^[(w+)]'), close = re.compile(r'^[/(w+)]'), value = re.compile(r'^(w+)(?::(w+))?=(.*)') ) def probe(text): \\"\\"\\" Parse multiline text generated by \`ffprobe\` or \`avprobe\` Command line: ffprobe -v quiet [-show_format] [-show_streams] filename :type text: str Input: ------ [TAG] data_x=1 data_y=2 INFO:data_z=3 [/TAG] Output: ------- {'tag': [{'data_x': 1, 'data_y': 2, 'info': {'data_z': 3}}]} \\"\\"\\" blocks = Obj() this = None for i, line in enumerate(text.splitlines()): if not line.strip(): continue open_block = tag.open.match(line) if open_block: if this is not None: raise ParseError('Opened block without closing last one: {0}: {1}'.format(i, line)) this = Obj() name = open_block.group(1).lower() if name == 'stream': name += 's' # compatibility with json output if name != 'format': # \\"format\\" only has one element. blocks.setdefault(name, []).append(this) else: blocks[name] = this else: if this is None: raise ParseError(\\"There's no block to insert data or close: {0}: {1}\\".format(i, line)) if tag.close.match(line): this = None else: name, sub, val = tag.value.match(line).groups() if not sub: this[name] = val else: attr = this.setdefault(name.lower(), Obj()) attr[sub] = val return blocks"},{"prompt":"Optimize a Python code to calculate the sum of digits in a number. n = 123","completion":"def digit_sum(n): if n == 0: return 0 return (n % 10) + digit_sum(n // 10) n = 123 print(digit_sum(n))"},{"prompt":"Create a Python program to count the occurrence of each character in a given string and return a dictionary object.","completion":"def count_characters(string): chars = {} for char in string: if char in chars: chars[char] += 1 else: chars[char] = 1 return chars"},{"prompt":"Create a machine learning model in Python to predict the direction a stock price will go (up or down), given the previous day's closing and opening prices. Not applicable","completion":"# import necessary libraries import pandas as pd import numpy as np # create the feature and target vectors feature_vector = np.array([stock_closing_price, stock_opening_price]) target_vector = np.array(stock_price_direction) # initialize the model model = LinearRegression() # fit the model model.fit(feature_vector, target_vector) # prediction prediction = model.predict([[41.50, 41.75]]) # classify the prediction if prediction > 0: print('The stock price is expected to go up.') else: print('The stock price is expected to go down.')"},{"prompt":"Create a function in Python that takes in a list of integers, calculates the mean, and returns a formatted string with the value. [1,3,5,7,9]","completion":"def calculate_mean(numbers): \\"\\"\\"A function to calculate the mean of a list of integers and returns a string of the mean value. Parameters: numbers (list): a list of integers Returns: str: the mean value formatted as a string \\"\\"\\" mean = sum(numbers)/len(numbers) return 'The mean is {}'.format(mean)"},{"prompt":"Create a Python class for a bank account with background threads for printing the balance every minute.","completion":"import threading class BankAccount: def __init__(self): self.balance = 0 self.lock = threading.Lock() threading.Thread(target = self.print_balance, args = (), daemon = True).start() def withdraw(self, amount): with self.lock: self.balance -= amount def deposit(self, amount): with self.lock: self.balance += amount def print_balance(self): while True: print(\\"Balance = \\", self.balance) time.sleep(60)"},{"prompt":"w would you code a function in Python to rotate elements of an array?","completion":"def rotate_array(array, n): ''' This function takes in an array and an integer n and rotates the elements of the array by n positions. ''' return array[n:] + array[:n]"},{"prompt":"Generate a Python program to generate a list of all the prime numbers in given range [n,m], where n and m are input parameters. n = 5, m = 20","completion":"def generatePrimes(n, m): primes = [] for i in range(n, m + 1): isPrime = True for j in range(2,i): if i % j == 0: isPrime = False break if isPrime: primes.append(i) return primes n = 5 m = 20 primes = generatePrimes(n, m) print(primes) #Output: [5, 7, 11, 13, 17, 19]"},{"prompt":"From a Python data type, generate a json string. person = { name: John Doe, age: 30, hobbies:[reading, playing chess, hiking] }","completion":"import json json_str = json.dumps(person)"},{"prompt":"Create a program to find the minimum depth of a binary tree using Python. 3 / 9 20 / 15 7","completion":"def minDepth(root): if root is None: return 0 if root.left is None and root.right is None: return 1 elif root.left is None: return minDepth(root.right) + 1 elif root.right is None: return minDepth(root.left) + 1 else: return min(minDepth(root.left), minDepth(root.right)) + 1"},{"prompt":"Write a Python program to sort given array in ascending order with bubble sorting algorithm [2, 8, 12, 18, 5, 7, 1]","completion":"def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] #Driver Code arr = [2, 8, 12, 18, 5, 7, 1] bubble_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i])"},{"prompt":"Generate a python code to create a list containing tuples of two elements each. Number of tuples: 5","completion":"my_list = [(x, y) for x in range(5) for y in range(5)] print(my_list)"},{"prompt":"Create a Python script that normalizes a given list of strings. Input List: ['Red', 'red', 'WhITE', 'white', 'bLUE', 'blue']","completion":"\\"\\"\\" Normalize a given list of strings \\"\\"\\" def normalize(lst): output = [] for item in lst: output.append(item.lower()) return output if __name__ == '__main__': input_list = ['Red', 'red', 'WhITE', 'white', 'bLUE', 'blue'] print(normalize(input_list))"},{"prompt":"Generate an algorithm in Python that finds the number of times an element is present in an array. arr = [4, 5, 2, 4, 2] x = 2","completion":"def countOccurrences(arr, x): count = 0 for i in range(len(arr)): if (x == arr[i]): count = count + 1 return count arr = [4, 5, 2, 4, 2] x = 2 print(countOccurrences(arr, x))"},{"prompt":"Create a vector of 10 random numbers using Python NumPy. Not applicable","completion":"import numpy as np np.random.seed(123) vector = np.random.rand(10) print(vector) # Output: # [0.69646919 0.28613933 0.22685145 0.55131477 0.71946897 0.42310646 # 0.9807642 0.68482974 0.4809319 0.39211752]"},{"prompt":"Write a Python program that takes a number from the user and prints whether the number is prime or not.","completion":"def is_prime(n): if n <= 1: return False i = 2 while i*i <= n: if n % i == 0: return False i += 1 return True if __name__ == \\"__main__\\": num = int(input(\\"Enter a number: \\")) if is_prime(num): print(\\"The number is a prime number.\\") else: print(\\"The number is not a prime number.\\")"},{"prompt":"Write a Python program to create a list containing all the possible combinations of two or more lists. list1 = [1, 2, 3] list2 = ['a', 'b', 'c'] list3 = [7, 8]","completion":"combined_list = [[1, 'a', 7], [1, 'a', 8], [1, 'b', 7], [1, 'b', 8], [1, 'c', 7], [1, 'c', 8], [2, 'a', 7], [2, 'a', 8], [2, 'b', 7], [2, 'b', 8], [2, 'c', 7], [2, 'c', 8], [3, 'a', 7], [3, 'a', 8], [3, 'b', 7], [3, 'b', 8], [3, 'c', 7], [3, 'c', 8]] combined_list = list(itertools.product(list1, list2, list3))"},{"prompt":"Create a Python program to reverse a string. Hello","completion":"def reverse_string(string): reversed_string = \\"\\" for c in string: reversed_string = c + reversed_string return reversed_string string = \\"Hello\\" print(reverse_string(string))"},{"prompt":"Develop a Python program to generate a Fibonacci series up to nth element, where n is an input. 10","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b # Driver Program print(fibonacci(10))"},{"prompt":"Create a game such as hangman in Python","completion":"# This is necessary to display the game import turtle # Set some necessary variables word = “hangman” hangman_board = [ “——————-“, “| |”, “| ”, “| ”, “| ”, “| ”, “——————-“] # Create a turtle canvas canvas = turtle.Screen() # Define functions for printing the Hangman board def draw_hangman(hangman_board): flower = turtle.Turtle() flower.speed(0) for piece in hangman_board: flower.hideturtle() flower.penup() x = -100 y = 180 flower.setpos(x,y) flower.write(piece, font=('Arial', 27, 'normal')) y = y - 50 flower.setpos(x,y) # Print the initial board draw_hangman(hangman_board) # Get user input and update the board while word != “”: guess = input(“Guess a letter: ”) if guess in word: print(“That letter is in the word!”) else: print(“That letter is not in the word!”) word = word.replace(guess,””) print(“You have guessed the word. You have won!”)"},{"prompt":"Opitmize a Python program to search a list of numbers for a given target number. list = [10,20,30,40,50] target = 40","completion":"def search(list, target): for i in range(len(list)): if list[i] == target: return i return -1 list = [10,20,30,40,50] target = 40 # linear search in list index = search(list, target) if index != -1: print(\\"Element found at index :\\", index) else: print(\\"Element not found\\")"},{"prompt":"Develop a Python program to optimize the given linear equation using the simplex method. Maximise: 2x + 4y Subject to: x + 2y ≤ 14 3x – 4y ≤ 18 x ≥ 0, y ≥ 0","completion":"def simplex(resultMatrix): n = len(resultMatrix[0]) - 1 c = [] for i in range(n): c.append(resultMatrix[0][i]) a = [] for i in range(1, len(resultMatrix)): a.append(resultMatrix[i][:n]) b = [] for i in range(1, len(resultMatrix)): b.append(resultMatrix[i][n]) # Initialize the basic and non-basic variables basic_variables = [n + i for i in range(len(b))] non_basic_variables = [i for i in range(n)] iteration_count = 0 optimal = True while optimal is True: iteration_count += 1 # Compute the coefficient of the objective function coef = [-c[i] for i in non_basic_variables] # Compute the column index of the entering variable entering_var = non_basic_variables[coef.index(max(coef))] # Compute the vector of reduced costs red_cost = [b[i]/a[i][entering_var] for i in range(len(b))] # Compute the leaving variable # If any reduced cost is negative, then the current solution is unbounded min_red_cost = min(red_cost) if min_red_cost <= 0: return \\"unbounded\\" # Compute the leaving variable # If all reduced costs are positive, the solution is optimal and iteration stops leaving_var = basic_variables[red_cost.index(min_red_cost)] if min_red_cost > 0: optimal = False break # Compute the new table for i in range(len(b)): row = [] for j in range(len(c) + 1): if j == entering_var: row.append(a[i][j]) elif j == leaving_var: row.append(0) else: row.append(a[i][j] - (a[i][entering_var] * a[i][j])/a[i][entering_var]) a[i] = row # Compute the objective function obj_func = 0 for i in range(len(c)): obj_func += c[i] * resultMatrix[0][i] for i in range(len(b)): obj_func += b[i] * resultMatrix[i + 1][-1] resultMatrix[0][-1] = obj_func # Compute the basic and non-basic variables basic_variables[red_cost.index(min_red_cost)] = entering_var non_basic_variables[coef.index(max(coef))] = leaving_var print(\\"Objective function on the optimal solution: \\", resultMatrix[0][-1]) print(\\"Optimal solution: \\") for i in range(len(b)): print(\\"x{0} = {1}\\".format(basic_variables[i], a[i][-1])) simplex([[2, 4], [1, 2, 14], [3, -4, 18]])"},{"prompt":"Write a Python program to encrypt a given sentence using Ceaser Cipher. sentence = Sentry is the best","completion":"# Ceasar Cipher def encrypt(text,s): result = \\"\\" # transverse the plain text for i in range(len(text)): char = text[i] # Encrypt uppercase characters if (char.isupper()): result += chr((ord(char) + s-65) % 26 + 65) # Encrypt lowercase characters else: result += chr((ord(char) + s - 97) % 26 + 97) return result # Check the above function text = \\"Sentry is the best\\" s = 4 print(\\"Plain Text : \\" + text) print(\\"Shift pattern : \\" + str(s)) print(\\"Cipher: \\" + encrypt(text,s))"},{"prompt":"Write a Python function to check whether the number is prime or not. num: 97","completion":"# Python program to check whether the number is prime or not def is_prime(num): \\"\\"\\" Function to check whether the number is prime or not \\"\\"\\" # Check whether the given number is greater than 1 if num > 1: # Iterate through the range of numbers to check if any number is a multiple of the given number for i in range(2,num): # If there is any multiple, the number is not prime if (num % i) == 0: return False # If there are no multiples, the number is prime else: return True # Call the function num = 97 print(is_prime(num)) # Output: # True"},{"prompt":"Write a Python class to represent a 3D vector in a 3D coordinate system. Not applicable","completion":"class Vector: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def magnitude(self): return (self.x**2 + self.y **2 + self.z**2)**0.5 def normalize(self): mag = self.magnitude() return Vector(self.x/mag, self.y/mag, self.z/mag) def __add__(self, other): return Vector(self.x + other.x, self.y + other.y, self.z + other.z) def __sub__(self, other): return Vector(self.x - other.x, self.y - other.y, self.z - other.z) def __mul__(self, scalar): return Vector(self.x * scalar, self.y * scalar, self.z * scalar)"},{"prompt":"Create a Python program to determine a grade for a given test score. The program should take a score as an input and output a grade based on the score range. Test Score: 85","completion":"def get_grade(score): # Set the score range grade_map = { 90: 'A', 80: 'B', 70: 'C', 60: 'D' } # Iterate over the range and return the corresponding grade for grade_min, grade in grade_map.items(): if score >= grade_min: return grade # Test print(get_grade(85))"},{"prompt":"Create a recursive Python function to calculate the sum of all elements in a list.","completion":"def sum_list(list): if not list: return 0 return list[0] + sum_list(list[1:])"},{"prompt":"Using an open source API, create a program to perform sentiment analysis on tweets.","completion":"#Importing the necessary libraries import tweepy import requests #Authentication consumer_key = ... consumer_secret = ... access_key = ... access_secret = ... #Creating the authentication object auth = tweepy.OAuthHandler(consumer_key, consumer_secret) #Setting access tokens auth.set_access_token(access_key, access_secret) #Creating the API object api = tweepy.API(auth) #Defining the sentiment analysis function def sentiment_analysis(tweet): post_data = {'text': tweet} response = requests.post('https://api.meaningcloud.com/sentiment-2.1', data=post_data, headers={'content-type':'application/x-www-form-urlencoded', 'apikey': '<insert API key here>'}) response_json = response.json() print(response_json) return response_json['score_tag'] #Running the sentiment analysis tweets = api.search(q='#python', lang='en', rpp=1) for tweet in tweets: print(sentiment_analysis(tweet.text))"},{"prompt":"Given a Python list of integers, write a function to find the sum of the elements in the list. nums = [1, 2, 3, 4, 5]","completion":"def findSum(nums): total = 0 for num in nums: total += num return total"},{"prompt":"Create a Python program to convert paragraphs into sentences. This is the first sentence. This is the second sentence. This is the third sentence.","completion":"def convert_paragraphs_to_sentences(paragraph): sentences = paragraph.split('. ') return sentences sentences = convert_paragraphs_to_sentences(\\"This is the first sentence. This is the second sentence. This is the third sentence.\\") for x in sentences: print(x)"},{"prompt":"Build a Python program that takes in two lists as an input and returns a third list with the common elements across the two inputs. list1 = [2, 3, 4, 5, 6] list2 = [3, 5, 7, 8, 9]","completion":"def common_elements(list1, list2): common_elements = [] for element in list1: if element in list2: common_elements.append(element) return common_elements list1 = [2, 3, 4, 5, 6] list2 = [3, 5, 7, 8, 9] print(common_elements(list1, list2))"},{"prompt":"Describe the sorted() method and how it works","completion":"The sorted() method is a built-in function in Python that takes an iterable object and returns a sorted list. It is used to sort the items of an iterable in a specific order which may be either ascending or descending. The sorted() method works by comparing each item in the iterable with all the other items and sorting them in a specific order."},{"prompt":"Create a function in Python that given a string, calculates the number of vowels in it. Hello World!","completion":"def count_vowels(s): vowels = 'aeiou' count = 0 for c in s.lower(): if c in vowels: count += 1 return count s = 'Hello World!' print(count_vowels(s)) # Output 3"},{"prompt":"Write a Python program to create a list of all the even numbers between two given numbers. 5, 10","completion":"def even_number_list(a, b): return list(i for i in range(a, b+1) if i%2 == 0)"},{"prompt":"Create a program in Python which takes a string input from the user and prints it in the reverse order","completion":"# Take input from the user string = input(\\"Enter string : \\") # Reverse the string rev_str = string[::-1] # Print the reversed string print(\\"Reverse string :\\", rev_str)"},{"prompt":"Create a command line utility in Python that takes two arguments. The utility should compare the two arguments and output the result as either “equal” or “not equal”. Arg1: hello Arg2: world","completion":"import sys arg1 = sys.argv[1] arg2 = sys.argv[2] if arg1 == arg2: print('equal') else: print('not equal')"},{"prompt":"This code generates REXI benchmarks. To use it, call the function \`get_rexi_benchmarks\` with a parameter \`jg\`. The function returns a list of REXI methods.","completion":"#! /usr/bin/env python3 import os import sys import math from itertools import product # REXI from mule_local.rexi.REXICoefficients import * from mule_local.rexi.pcirexi.BeanREXI import BeanREXI from mule_local.rexi.pcirexi.LRREXI import LRREXI from mule_local.rexi.trexi.TREXI import * from mule_local.rexi.cirexi.CIREXI import * from mule_local.rexi.elrexi.ELREXI import * from mule_local.rexi.brexi.BREXI import * # EFloat efloat_mode = \\"float\\" def get_rexi_benchmarks(jg): # Accumulator of all REXI methods # rexi_method['rexi_method'] = 'file' # Choose REXI method which is typically 'file' for all file-based ones # rexi_method['rexi_files_coefficients'] = None # List with approximations for different 'phi' functions rexi_methods = [] # # CI REXI # if True: # REXI stuff def fun_params_ci_N(ci_max_real, ci_max_imag): if ci_max_imag >= 7: return 128 else: return 32 params_ci_max_imag = [30.0] params_ci_max_real = [10.0] # # Scale the CI circle radius relative to this time step size # We do this simply to get a consistent time stepping method # Otherwise, CI would not behave consistently # Yes, that's ugly, but simply how it goes :-) # params_ci_max_imag_scaling_relative_to_timestep_size = 480 # params_ci_max_imag_scaling_relative_to_timestep_size = None params_ci_min_imag = 5.0 rexi_method = {} # Choose REXI method which is typically 'file' for all file-based ones rexi_method['rexi_method'] = 'file' # List with approximations for different 'phi' functions rexi_method['rexi_files_coefficients'] = None for ci_max_imag, ci_max_real in product(params_ci_max_imag, params_ci_max_real): if params_ci_max_imag_scaling_relative_to_timestep_size != None: ci_max_imag *= (jg.runtime.timestep_size / params_ci_max_imag_scaling_relative_to_timestep_size) # \\"phi0\\" cirexi = CIREXI(efloat_mode=efloat_mode) coeffs_phi0 = cirexi.setup( function_name=\\"phi0\\", N=fun_params_ci_N(ci_max_real, ci_max_imag), lambda_include_imag=ci_max_imag, lambda_max_real=ci_max_real ).toFloat() # \\"phi1\\" cirexi = CIREXI(efloat_mode=efloat_mode) coeffs_phi1 = cirexi.setup( function_name=\\"phi1\\", N=fun_params_ci_N(ci_max_real, ci_max_imag), lambda_include_imag=ci_max_imag, lambda_max_real=ci_max_real ).toFloat() # \\"phi2\\" cirexi = CIREXI(efloat_mode=efloat_mode) coeffs_phi2 = cirexi.setup( function_name=\\"phi2\\", N=fun_params_ci_N(ci_max_real, ci_max_imag), lambda_include_imag=ci_max_imag, lambda_max_real=ci_max_real ).toFloat() rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2] # Add to list of REXI methods rexi_methods.append(rexi_method) # # EL-REXI # if True: max_imags = [30.0] rexi_method = {} # Choose REXI method which is typically 'file' for all file-based ones rexi_method['rexi_method'] = 'file' # List with approximations for different 'phi' functions rexi_method['rexi_files_coefficients'] = None for max_imag in max_imags: # \\"phi0\\" elrexi = ELREXI(efloat_mode=efloat_mode) coeffs_phi0 = elrexi.setup( function_name=\\"phi0\\", N=max(64, int(75 * max_imag / 30)), lambda_max_real=10.5, lambda_max_imag=max_imag + 2.5 ).toFloat() # \\"phi1\\" elrexi = ELREXI(efloat_mode=efloat_mode) coeffs_phi1 = elrexi.setup( function_name=\\"phi1\\", N=max(64, int(75 * max_imag / 30)), lambda_max_real=10.5, lambda_max_imag=max_imag + 2.5 ).toFloat() # \\"phi2\\" elrexi = ELREXI(efloat_mode=efloat_mode) coeffs_phi2 = elrexi.setup( function_name=\\"phi2\\", N=max(64, int(75 * max_imag / 30)), lambda_max_real=10.5, lambda_max_imag=max_imag + 2.5 ).toFloat() rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2] # Add to list of REXI methods rexi_methods.append(rexi_method) # # LR-REXI (Rectangle contour with Gauss-Legendre Quadrature) # if True: max_imags = [30.0] rexi_method = {} # Choose REXI method which is typically 'file' for all file-based ones rexi_method['rexi_method'] = 'file' # List with approximations for different 'phi' functions rexi_method['rexi_files_coefficients'] = None for max_imag in max_imags: # \\"phi0\\" lrrexi = LRREXI(efloat_mode=efloat_mode) coeffs_phi0 = lrrexi.setup( function_name=\\"phi0\\", width=23, height=2 * max_imag + 20, center=-1, N=128).toFloat() # \\"phi1\\" lrrexi = LRREXI(efloat_mode=efloat_mode) coeffs_phi1 = lrrexi.setup( function_name=\\"phi1\\", width=23, height=2 * max_imag + 20, center=-1, N=128).toFloat() # \\"phi2\\" lrrexi = LRREXI(efloat_mode=efloat_mode) coeffs_phi2 = lrrexi.setup( function_name=\\"phi2\\", width=23, height=2 * max_imag + 20, center=-1, N=128).toFloat() rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2] # Add to list of REXI methods rexi_methods.append(rexi_method) # # Bean-REXI # if True: max_imags = [30.0] rexi_method = {} # Choose REXI method which is typically 'file' for all file-based ones rexi_method['rexi_method'] = 'file' # List with approximations for different 'phi' functions rexi_method['rexi_files_coefficients'] = None for max_imag in max_imags: # \\"phi0\\" beanrexi = BeanREXI(efloat_mode=efloat_mode) coeffs_phi0 = beanrexi.setup( function_name=\\"phi0\\", horizontal_radius=16, vertical_radius=max_imag / 30 * 35, center=-2, N=max(64, int(75 * max_imag / 30))).toFloat() # \\"phi1\\" beanrexi = BeanREXI(efloat_mode=efloat_mode) coeffs_phi1 = beanrexi.setup( function_name=\\"phi1\\", horizontal_radius=16, vertical_radius=max_imag / 30 * 35, center=-2, N=max(64, int(75 * max_imag / 30))).toFloat() # \\"phi2\\" beanrexi = BeanREXI(efloat_mode=efloat_mode) coeffs_phi2 = beanrexi.setup( function_name=\\"phi2\\", horizontal_radius=16, vertical_radius=max_imag / 30 * 35, center=-2, N=max(64, int(75 * max_imag / 30))).toFloat() rexi_method['rexi_files_coefficients'] = [coeffs_phi0, coeffs_phi1, coeffs_phi2] # Add to list of REXI methods rexi_methods.append(rexi_method) return rexi_methods if __name__ == \\"__main__\\": pass"},{"prompt":"Create a class called Student in Python with appropriate attributes and methods.","completion":"class Student: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def getName(self): return self.name def getAge(self): return self.age def getGender(self): return self.gender"},{"prompt":"Write a Python program to populate a database from a given dataset of products. This program should loop through each record of the dataset and check if the product has already been persisted, and if not, it should save the record to the database. products_dataset: List[Dict[str, str]] = [ {'name': 'baseball bat', 'price': 19.99, 'quantity': 20}, {'name': 'soccer ball', 'price': 9.99, 'quantity': 10}, {'name': 'football', 'price': 14.99, 'quantity': 5}, ]","completion":"import sqlite3 db = sqlite3.connect('products.db') cursor = db.cursor() cursor.execute(\\"CREATE TABLE IF NOT EXISTS products (name text, price real, quantity integer)\\") for product in products_dataset: product_name = product['name'] product_price = product['price'] product_quantity = product['quantity'] if not cursor.execute(f\\"SELECT * FROM products WHERE name='{product_name}'\\").fetchone(): cursor.execute(f\\"INSERT INTO products (name, price, quantity) VALUES ({product_name}, {product_price}, {product_quantity})\\") db.commit() db.close()"},{"prompt":"Review this code and make any necessary changes in Python to make it more efficient. def add_items(items): total = 0 for item in items: total += item return total","completion":"def add_items(items): return sum(items)"},{"prompt":"Write a Python loop to print the numbers between 2 and 10 (inclusive).","completion":"for i in range(2, 11): print(i)"},{"prompt":"Turn the given input string into a valid Python statement. Input string: Function to print hello world.","completion":"def printHelloWorld(): print(\\"Hello world\\")"},{"prompt":"Develop a Python function to calculate the area of a rectangle given its length and width.","completion":"def calculate_rectangle_area(length, width): return length * width"},{"prompt":"Create a list in Python to store the first 10 numbers that are divisible by 4.","completion":"divisible_by_four = [i for i in range(1,11) if i%4 == 0]"},{"prompt":"mplement a web scraper in Python that downloads the contents of a given URL. url = 'https://en.wikipedia.org/wiki/Web_scraping'","completion":"import requests from bs4 import BeautifulSoup url = 'https://en.wikipedia.org/wiki/Web_scraping' r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') html = str(soup) with open(\\"output.html\\", \\"w\\") as file: file.write(html)"},{"prompt":"Create a basic Python application to return the similarity between two strings using fuzzywuzzy. The two strings are: Apple and Apples.","completion":"# Import the necessary modules import fuzzywuzzy from fuzzywuzzy import process # The two strings to compare str1 = 'Apple' str2 = 'Apples' # Compare the two strings score = fuzzywuzzy.fuzz.ratio(str1, str2) # Print the similarity score print(score) # Output 100"},{"prompt":"Write a Python code snippet to check if a list contains duplicated elements. [3, 6, 8, 9, 10, 3]","completion":"\\"\\"\\" Python code snippet to check if a list contains duplicated elements \\"\\"\\" def has_duplicates(arr): seen_elements = set() for elem in arr: if elem in seen_elements: return True seen_elements.add(elem) return False if __name__ == '__main__': arr = [3, 6, 8, 9, 10, 3] print(has_duplicates(arr)) # True"},{"prompt":"Write a function in Python to optimize a given objective function using gradient descent.","completion":"def gradient_descent(lr, x, y): m_curr = b_curr = 0 iterations = 10000 n = len(x) for i in range(iterations): y_predicted = m_curr*x + b_curr cost = (1/n) * sum([val**2 for val in (y-y_predicted)]) md = -(2/n)*sum(x*(y-y_predicted)) bd = -(2/n)*sum(y-y_predicted) m_curr = m_curr - lr * md b_curr = b_curr - lr * bd return m_curr, b_curr"},{"prompt":"Write a Python program optimize the following code using functional programming. i = 5 while i >= 0: print(i) i = 1","completion":"from functools import reduce # initialize the loop num = 5 # call reduce() solution = reduce(lambda i, _: i - 1, range(num + 1)) # print the result print(solution)"},{"prompt":"Design a Python program to find which number is missing between a given range of numbers. [1, 2, 4, 6, 7, 8, 9]","completion":"def find_missing_number(arr): n = len(arr) total = (n+1)*(arr[0] + arr[n-1]) / 2 sum_arr = sum(arr) return total - sum_arr"},{"prompt":"Develop a simple Blackjack game using Python which will allow a player to play against a computer (Dealer).","completion":"import random # Lists of suits and ranks suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs') ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace') # Dictionary mapping ranks to values values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10, 'Queen':10, 'King':10, 'Ace':11} # Function to calculate the value of a hand def get_value(cards): value = 0 for card in cards: value += values[card[0]] return value # Main game loop while True: # Create empty lists to store player and dealer's hand dealer_hand = [] player_hand = [] # Deal cards to both players for _ in range(2): dealer_hand.append(random.choice(list(zip(ranks, suits)))) player_hand.append(random.choice(list(zip(ranks, suits)))) # Print hands print('Player's Hand: ', player_hand) print('Value of Hand: ', get_value(player_hand)) print('Dealer Hand: ', dealer_hand[0]) # Determine if player wants to hit/stay hit_or_stand = input('Would you like to [H]it or [S]tand? ').lower() # Player hits if hit_or_stand == 'h': player_hand.append(random.choice(list(zip(ranks, suits)))) print('Player's Hand: ', player_hand) print('Value of Hand: ', get_value(player_hand)) if(get_value(player_hand) > 21): print('Bust! Player loses.') break # Player stands elif hit_or_stand == 's': while get_value(dealer_hand) < 17: dealer_hand.append(random.choice(list(zip(ranks, suits)))) print('Dealer Hand: ', dealer_hand) print('Value of Hand: ', get_value(dealer_hand)) if (get_value(dealer_hand) > 21) or (get_value(dealer_hand) < get_value(player_hand)): print('Player wins!') break elif (get_value(dealer_hand) > get_value(player_hand)): print('Dealer wins!') break else: print('It's a tie!') break"},{"prompt":"Generate a Python program for an opinion poll. The program should take in an arbitrary number of responses in the form of strings and determine the most frequent response. responses = [Yes, Yes, No, No, Yes, Maybe]","completion":"def get_most_frequent_response(responses): # Count the number of each response response_counts = {} for response in responses: if response in response_counts: response_counts[response] += 1 else: response_counts[response] = 1 # Find the most frequent response most_frequent = '' max_count = 0 for response, count in response_counts.items(): if count > max_count: most_frequent = response max_count = count # Print result print(f'Most frequent response: {most_frequent}')"},{"prompt":"Finish coding a reusable Python function that takes in a list and an argument. list = [1, 2, 3, 4, 5] argument = multiply","completion":"def modify_list(list, argument): if argument == \\"multiply\\": for i in range(len(list)): list[i] = list[i]*list[i] elif argument == \\"add\\": for i in range(len(list)): list[i] = list[i] + list[i] return list"},{"prompt":"Create a neural network in Python for a regression task to predict a numerical value.","completion":"# import necessary libraries import numpy as np import pandas as pd import tensorflow as tf # define the neural network architecture model = tf.keras.Sequential([ tf.keras.layers.Input(shape=(input_dim,)), tf.keras.layers.Dense(units=128, activation=\\"relu\\"), tf.keras.layers.Dense(units=64, activation=\\"relu\\"), tf.keras.layers.Dense(units=1, activation=\\"linear\\") ]) # compile the model model.compile(optimizer=\\"adam\\", loss=\\"mean_squared_error\\") # fit the model model.fit(X_train, Y_train, epochs=10)"},{"prompt":"Write a Python program to print out the triangle pattern given an height n as input. height = 4","completion":"def print_triangle(n): for i in range(n): for j in range(i+1): print(\\"*\\",end=\\"\\") print() n = 4 print_triangle(n) # Output # * # ** # *** # ****"},{"prompt":"Design a Python program to convert a list of Fahrenheit temperatures to a list of Celsius temperatures. [150, 160, 170, 180, 190]","completion":"def Fahrenheit_to_Celsius(Fahrenheit_Temps): Celsius_Temps = [] for temp in Fahrenheit_Temps: Celsius = (temp - 32) * 5 / 9 Celsius_Temps.append(Celsius) return Celsius_Temps Fahrenheit_Temps = [150, 160, 170, 180, 190] Celsius_Temps = Fahrenheit_to_Celsius(Fahrenheit_Temps) print(\\"Celsius Temperatures =\\", Celsius_Temps)"},{"prompt":"Create a python program that outputs a sentence when given an input of two words. words = [red, apple]","completion":"words = [\\"red\\", \\"apple\\"] sentence = words[0] + \\" \\" + words[1] print(sentence)"},{"prompt":"Create a web scraper script in Python using BeautifulSoup and Requests to extract data from a web page that contains a list of products. The URL to scrape https://example.com/produc","completion":"import requests from bs4 import BeautifulSoup def scrape_products(url): response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') product_list = [] for item in soup.find_all('div', class_='product-item'): name = item.find('h3').text price = item.find('div', class_='price').text product_list.append((name, price)) return product_list"},{"prompt":"Write a function in Python that takes a set of numbers and prints the sum, mean and standard deviation of the numbers. [1, 2, 3, 4, 5]","completion":"def print_stats(numbers): sum = 0 for i in numbers: sum = sum + i mean = sum / len(numbers) ssd = 0 for i in numbers: ssd = ssd + (i-mean)**2 ssd = ssd / len(numbers) standard_dev = sqrt(ssd) print(\\"Sum = \\", sum) print(\\"Mean = \\", mean) print(\\"Standard Deviation = \\", standard_dev)"},{"prompt":"Generate a python program that takes the diameter of a circle as an input and outputs the circumference of the circle.","completion":"def circumference_of_circle(diameter): circumference = 3.14 * diameter return circumference"},{"prompt":"Create a Python application that will use the Random Forest algorithm to classify handwritten digits.","completion":"# Import libraries import pandas as pd from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split # Load dataset df = pd.read_csv(‘digits_dataset.csv’) # Split data into train and test sets X = df.drop(‘label’, axis=1) y = df[‘label’] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Train classifier clf = RandomForestClassifier() clf.fit(X_train, y_train) # Evaluate model on test set accuracy = clf.score(X_test, y_test) print('Test accuracy: {0:.2f}%'.format(accuracy*100))"},{"prompt":"Create a Python program that prints all numbers from 1 to 10 in reverse order.","completion":"for i in range(10, 0, -1): print(i)"},{"prompt":"Using a neural network, generate Python code for a sentiment analysis application. A CSV file containing sentiment data with each sentence having a label (positive, neutral, or negative)","completion":"import pandas as pd import numpy as np import keras # Read in data data = pd.read_csv('sentiment.csv') # Preprocessing: # Convert sentences to vectors tokenizer = keras.preprocessing.text.Tokenizer(num_words = 1000) tokenizer.fit_on_texts(data['sentence']) X = tokenizer.texts_to_matrix(data['sentence'], mode='tfidf') # One-hot encoding of labels labels = data['label'] num_classes = np.max(labels) + 1 y = keras.utils.to_categorical(labels, num_classes) # Building the model model = keras.models.Sequential() model.add(keras.layers.InputLayer(input_shape = X.shape[1:])) model.add(keras.layers.Dense(units = 50, activation='relu')) model.add(keras.layers.Dense(units = num_classes, activation='softmax')) # Compiling and training the model model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(X, y, epochs=15, batch_size=32, validation_split=0.2 ) # Saving the model model.save('sentiment_analysis.h5')"},{"prompt":"Edit the following Python function to add the option of a timeout after a certain amount of time. def download_url(url): request = requests.get(url) return reque","completion":"import signal def timeout(signum, frame): raise TimeoutError(\\"Timed Out\\") def download_url(url, timeout_value): signal.signal(signal.SIGALRM, timeout) signal.alarm(timeout_value) try: request = requests.get(url) return request except TimeoutError: print(\\"Download timed out. Please try again.\\")"},{"prompt":"Write a Python program that creates a dictionary with a list as a key","completion":"def make_dict_from_list(list_key): dictionary = {} for element in list_key: dictionary[element] = [] return dictionary"},{"prompt":"Write a Python program to analyze the given user input sentences regarding sentiment. Given sentence: I am so excited to start this projec","completion":"def analyze_sentiment(sentence): sentiment = TextBlob(sentence) if sentiment.polarity > 0: print(\\"Sentence is Positive\\") elif sentiment.polarity == 0: print(\\"Sentence is Neutral\\") else: print(\\"Sentence is Negative\\") sentence = \\"I am so excited to start this project\\" analyze_sentiment(sentence)"},{"prompt":"Write a Python program to validate a given email address. The program should ensure that the given email follows valid email syntax. example@example.com","completion":"import re def is_valid_email(email): email_regex = re.compile(r\\"^[w.+-]+@[w]+.[a-z]{2,3}\\") return email_regex.match(email) email = \\"example@example.com\\" if is_valid_email(email): print(\\"Valid email address\\") else: print(\\"Invalid email address\\")"},{"prompt":"Develop a Python function to fetch data from a web service. url = 'https://jsonplaceholder.typicode.com/users'","completion":"import requests def fetch_data_from_web_service(url): response = requests.get(url) return response.json()"},{"prompt":"Generate a Python code that prints the following sequence of characters ( ABCDEFGHIJ ).","completion":"# Create an empty string seq = \\"\\" # Loop through the alphabet for i in range(65, 75): # Convert the ASCII code to a character seq += chr(i) # Print the output print(seq)"},{"prompt":"Design a heuristic algorithm in Python to solve a given assignment problem. Assignment Problem: Jobs: A, B, C, D Workers: 1, 2, 3 Cost: 1A, 2B, 3C, 1D = 3, 5, 8, 4 1A, 2C, 3D, 1B = 8, 7, 2, 6","completion":"def assignmentProblem(costMatrix): # Variables R = len(costMatrix) C = len(costMatrix[0]) X = [[0 for x in range(C)] for x in range(R)] # Find the minimum element in each row minRowValues = [min(i) for i in costMatrix] # Reduce each column by its minimum element and subtract it from the original costMatrix for i in range(len(costMatrix[0])): for j in range(len(costMatrix)): costMatrix[j][i] = costMatrix[j][i] - minRowValues[j] # Find the minimum element in each column minColValues = [min(y) for y in zip(*costMatrix)] # Reduce each row by its minimum element for i in range(len(costMatrix)): for j in range(len(costMatrix[0])): costMatrix[i][j] = costMatrix[i][j] - minColValues[j] # Star all minimum element in the reduced costMatrix # Find the indices of all the star elements starsLocations = [] for i in range(R): for j in range(C): if costMatrix[i][j] == 0 and X[i][j] != 1: X[i][j] = \\"*\\" starsLocations.append([i, j]) return starsLocations"},{"prompt":"Write a function in Python for finding the maximum subarray sum of an array. arr = [4,2,1,4,5,7,2,4]","completion":"def max_subarray_sum(arr): max_so_far = 0 max_ending_here = 0 for i in range(0, len(arr)): max_ending_here = max_ending_here + arr[i] if max_ending_here < 0: max_ending_here = 0 if (max_so_far < max_ending_here): max_so_far = max_ending_here return max_so_far result = max_subarray_sum(arr) print(result)"},{"prompt":"Create a Python program to optimize the running time of a program using memoization. # k: as an input parameter # f: a recursive functio","completion":"def memoize(f, k): memo = dict() def helper(x): if x not in memo: memo[x] = f(x) return memo[x] return helper(k)"},{"prompt":"Create a method in Python to format a date from the format ddmmyyyy to yyyymmdd. date = 10052020","completion":"def format_date(date): splitted_date = date.split(\\"-\\") reformatted_date = splitted_date[::-1] return \\"-\\".join(reformatted_date) format_date(\\"10-05-2020\\")"},{"prompt":"Create a Python script to measure the similarity between two given strings using the Levenshtein distance Strings ‘Apple’ and ‘Apples’","completion":"def levenshtein_distance(s1, s2): # Base cases if s1 == s2: return 0 elif len(s1) == 0: return len(s2) elif len(s2) == 0: return len(s1) # Construct a matrix matrix = [[0 for c in range(len(s1) + 1)] for r in range(len(s2) + 1)] # Fill in the first row and column for r in range(len(s2) + 1): matrix[r][0] = r for c in range(len(s1) + 1): matrix[0][c] = c # Fill in the rest of the matrix for r in range(1, len(s2) + 1): for c in range(1, len(s1) + 1): if s2[r - 1] == s1[c - 1]: cost = 0 else: cost = 1 matrix[r][c] = min(matrix[r - 1][c] + 1, matrix[r][c - 1] + 1, matrix[r - 1][c - 1] + cost) # Return the similarity score return matrix[len(s2)][len(s1)] string1 = 'Apple' string2 = 'Apples' score = levenshtein_distance(string1, string2) print(score) # Output: 1"},{"prompt":"mplement an algorithm in Python to remove duplicate elements from a given list. list = [1,4,4,4,5,5,5,6,7]","completion":"def removeDuplicates(list): uniqueList = [] for item in list: if item not in uniqueList: uniqueList.append(item) return uniqueList print(removeDuplicates([1,4,4,4,5,5,5,6,7]))"},{"prompt":"mplement a sorting algorithm in Python. list of integer numbers: [98, 86, 100, 5, 34, 22]","completion":"def bubble_sort(items): for pass_num in range(len(items) - 1, 0, -1): for idx in range(pass_num): if items[idx] > items[idx + 1]: items[idx], items[idx + 1] = items[idx + 1], items[idx] numbers = [98, 86, 100, 5, 34, 22] bubble_sort(numbers) print(numbers)"},{"prompt":"Create a Python class for a Rectangle that has two sides, and methods for area and perimeter.","completion":"\\"\\"\\" Create a Python class for a Rectangle that has two sides, and methods for area and perimeter \\"\\"\\" class Rectangle: def __init__(self, side1, side2): self.side1 = side1 self.side2 = side2 def area(self): return self.side1 * self.side2 def perimeter(self): return 2*self.side1 + 2*self.side2 if __name__ == '__main__': r = Rectangle(3, 4) print(\\"Area: {}\\".format(r.area())) print(\\"Perimeter: {}\\".format(r.perimeter()))"},{"prompt":"Create a program to implement a selection sort in Python. [5, 3, 2, 4, 1]","completion":"def selection_sort(arr): n = len(arr) for i in range(n-1): min_index = i for j in range(i+1, n): if arr[min_index] > arr[j]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr"},{"prompt":"mplement a gradient descent algorithm for a classification task in Python.","completion":"def grad_descent_classifier(input_data, weights, learning_rate): # finding the gradient of our weights w.r.t to cost function N = len(input_data) grad = np.zeros(weights.shape) error = 0 # looping through each training datapoint for i in range(N): x = input_data[i] y = input_data[i][-1] # calculating the error error += (np.dot(x, weights)-y)**2 # update grad for j in range(len(x)): grad[j] += -(2/N)*(y-np.dot(x,weights))*x[j] # updating the weights weights = weights - learning_rate*grad # return the weights return weights"},{"prompt":"Rewrite the following Python program into C++. The program should generate a random number between 0 and 9 inclusive. import random def generateRandomNumber(): number = random.randint(0, 9) print(number) generateRandomNumber()","completion":"#include <iostream> #include <ctime> #include <cstdlib> using namespace std; int generateRandomNumber(){ int number = rand() % 10; //Generate a random number between 0-9 cout << number << endl; return number; } int main() { srand(time(NULL)); generateRandomNumber(); return 0; }"},{"prompt":"Build a REST API using Python Flask for adding, updating, and deleting blog posts. Not applicable","completion":"from flask import Flask, request, jsonify from flask_sqlalchemy import SQLAlchemy from flask_marshmallow import Marshmallow app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.sqlite3' db = SQLAlchemy(app) ma = Marshmallow(app) # BlogPost Model class BlogPost(db.Model): id = db.Column(db.Integer, primary_key=True) title = db.Column(db.String(100), nullable=False) content = db.Column(db.Text, nullable=False) # BlogPost Schema class BlogPostSchema(ma.Schema): class Meta: fields = ('id', 'title', 'content') # Init Schema blog_post_schema = BlogPostSchema() blog_posts_schema = BlogPostSchema(many=True) # Create a blog post @app.route('/blog-post', methods=['POST']) def add_blog_post(): title = request.json['title'] content = request.json['content'] new_blog_post = BlogPost(title=title, content=content) db.session.add(new_blog_post) db.session.commit() blog_post = BlogPost.query.get(new_blog_post.id) return blog_post_schema.jsonify(blog_post) # Update a blog post @app.route('/blog-post/<id>', methods=['PUT']) def update_blog_post(id): blog_post = BlogPost.query.get(id) title = request.json['title'] content = request.json['content'] blog_post.title = title blog_post.content = content db.session.commit() return blog_post_schema.jsonify(blog_post) # Delete a blog post @app.route('/blog-post/<id>', methods=['DELETE']) def delete_blog_post(id): blog_post = BlogPost.query.get(id) db.session.delete(blog_post) db.session.commit() return blog_post_schema.jsonify(blog_post) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python program to merge two given dictionaries and update the values of common keys. Dictionary 1: {'a': 10, 'b': 20, 'c': 30} Dictionary 2: {'a': 15, 'd': 40}","completion":"def merge_dicts(dict1, dict2): result = {**dict1, **dict2} for key in result: if key in dict1 and key in dict2: result[key] = dict1[key] + dict2[key] return result dict1 = {'a': 10, 'b': 20, 'c': 30} dict2 = {'a': 15, 'd': 40} merge_dicts(dict1, dict2) # {'a': 25, 'b': 20, 'c': 30, 'd': 40}"},{"prompt":"Develop a Python solution to identify parts of speech of a given sentence. Sentence: I like apples.","completion":"import nltk sentence = \\"I like apples.\\" words = nltk.word_tokenize(sentence) tagged_words = nltk.pos_tag(words) parts_of_speech = dict() for word, tag in tagged_words: parts_of_speech[word] = tag print(parts_of_speech) # Output: {'I': 'PRP', 'like': 'VBP', 'apples': 'NNS'}"},{"prompt":"w would you write a program in Python that takes as input an array of integers and prints the sum of its elements? [1, 5, 8, 3]","completion":"arr = [1,5,8,-3] # Compute the sum total = 0 for num in arr: total += num # Print the sum print(total)"},{"prompt":"Create a GUI using tkinter in Python to calculate the size of a triangle in sq. cm given the length of its three sides.","completion":"import tkinter as tk root = tk.Tk() root.title(\\"Triangle Area Calculator\\") side1Label = tk.Label(root, text=\\"Side 1\\") side1Label.grid(row=0, column=0, sticky=tk.W, padx=10, pady=10) side1Entry = tk.Entry(root) side1Entry.grid(row=0, column=1, padx=10, pady=10) side2Label = tk.Label(root, text=\\"Side 2\\") side2Label.grid(row=1, column=0, sticky=tk.W, padx=10, pady=10) side2Entry = tk.Entry(root) side2Entry.grid(row=1, column=1, padx=10, pady=10) side3Label = tk.Label(root, text=\\"Side 3\\") side3Label.grid(row=2, column=0, sticky=tk.W, padx=10, pady=10) side3Entry = tk.Entry(root) side3Entry.grid(row=2, column=1, padx=10, pady=10) def calculate_area(): side1 = float(side1Entry.get()) side2 = float(side2Entry.get()) side3 = float(side3Entry.get()) s = (side1 + side2 + side3)/2 area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5 areaLabel.configure(text=\\"Area = {0:0.2f} sq. cm\\".format(area)) calculateButton = tk.Button(root, text=\\"Calculate\\", command=calculate_area) calculateButton.grid(row=3, columnspan=2, padx=10, pady=10) areaLabel = tk.Label(root, text=\\"Area = 0 sq. cm\\") areaLabel.grid(row=4, columnspan=2, padx=10, pady=10) root.mainloop()"},{"prompt":"Write a Python program which prints out the Fibonacci series up to the Nth term. 15","completion":"def print_fibonacci_series(n): a = 0 b = 1 c = 0 while c < n: print(a,end=\\" \\") c = c+1 temp = a+b a = b b = temp print_fibonacci_series(15)"},{"prompt":"Create a Python program which performs basic math operations on user input numbers and prints the result. Not applicable","completion":"# Function to add two numbers def add(x, y): return x + y # Function to subtract two numbers def subtract(x, y): return x - y # Function to multiply two numbers def multiply(x, y): return x * y # Function to divide two numbers def divide(x, y): return x / y # Take inputs from the user num1 = int(input(\\"Enter first number: \\")) num2 = int(input(\\"Enter second number: \\")) # Add the two numbers sum = add(num1, num2) # Subtract the two numbers sub = subtract(num1, num2) # Multiply the two numbers mul = multiply(num1, num2) # Divide the two numbers div = divide(num1, num2) # Print the results print(\\"Sum: {0} nSub: {1} nMul: {2} nDiv: {3}\\".format(sum, sub, mul, div))"},{"prompt":"Please provide Python code to print out all the prime numbers in a list of numbers. list_of_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 11]","completion":"def is_prime(num): for i in range(2, num): if num % i == 0: return False return True list_of_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 11] for i in list_of_numbers: if is_prime(i): print(i)"},{"prompt":"Rewrite the following JavaScript code in Python: for (let i = 1; i <= 10; i++) { console.log(i); } Not applicable","completion":"for i in range(1, 11): print(i)"},{"prompt":"Write a python program to find the angle between two planes in 3D space.","completion":"from math import acos, degrees def angle_planar_3d(normal1, normal2): length1 = math.sqrt((normal1[0]**2) + (normal1[1]**2) + (normal1[2]**2)) length2 = math.sqrt((normal2[0]**2) + (normal2[1]**2) + (normal2[2]**2)) dotProduct = normal1[0]*normal2[0] + normal1[1]*normal2[1] + normal1[2]*normal2[2] cosAngle = dotProduct / (length1 * length2) return degrees(acos(cosAngle)) normal1=[1,0,0] normal2=[0,1,0] print(angle_planar_3d(normal1, normal2))"},{"prompt":"Design an algorithm in Python to find the shortest unique substrings in a given input string. input_string =abccab","completion":"def find_shortest_unique_substrings(input_string): \\"\\"\\" Finds the shortest unique substrings in a given input string Parameters ---------- input_string : str The input string Returns ------- List[str] A list containing the shortest unique substrings \\"\\"\\" # Generate all possible substrings substrings = [] for i in range(len(input_string)): for j in range(i+1, len(input_string)+1): substrings.append(input_string[i:j]) # Keep track of the unique substrings unique_substrings = [] # Iterate over all substrings for substring in substrings: # Check if the substring is unique if substring not in unique_substrings: unique_substrings.append(substring) # Return the shortest unique substrings return sorted(unique_substrings, key=len)"},{"prompt":"Develop a machine learning model in Python to predict housing prices in a given city.","completion":"from sklearn.linear_model import LinearRegression X_train, y_train, X_test, y_test = load_data(city) model = LinearRegression() model.fit(X_train, y_train) predictions = model.predict(X_test)"},{"prompt":"Write a Python script to decode a base64 encoded string. encoded_string = 'aGVsbG8='","completion":"import base64 encoded_string = 'aGVsbG8=' decoded_string = base64.b64decode(encoded_string) print(decoded_string) # prints b'hello'"},{"prompt":"Create a for loop statement in Python to iterate over a list and print the each item in the list. [1,2,3,4,5]","completion":"for i in [1,2,3,4,5]: print(i)"},{"prompt":"Convert the JavaScript code snippet to Python. \`\`\` function sum(a, b) { return a + b; } \`\`\`","completion":"def sum(a, b): return a + b"},{"prompt":"Write a Python program to retrieve a list of 10 latest posts from Reddit. Not applicable","completion":"import praw reddit = praw.Reddit('bot1') latest_posts = [] for submission in reddit.subreddit('all').new(limit=10): latest_posts.append(submission.title) print(latest_posts)"},{"prompt":"Write a python code that calculates the longest possible ride duration using a given list of bus arrival times. arr = [9.00, 9.40, 9.50, 11.00, 15.00]","completion":"def find_longest_ride(arr): max_duration = 0 for i in range(len(arr)): for j in range(i+1,len(arr)): duration = arr[j] - arr[i] if duration > max_duration: max_duration = duration return max_duration # Main Program arr = [9.00, 9.40, 9.50, 11.00, 15.00] result = find_longest_ride(arr) print (\\"The longest possible ride is {:.2f} hrs\\".format(result))"},{"prompt":"Generate an appropriate Python command to edit the following list such that all the negative numbers are replaced with 0. [1, 5, 9, 8, 2]","completion":"def filter_negative(nums): return [max(0, n) for n in nums]"},{"prompt":"Write a python code to validate a given ip address. ip=192.168.1.113","completion":"def validate_ip(ip): parts = ip.split(\\".\\") if len(parts) != 4: return False for part in parts: # Check if a part is an integer if not part.isnumeric(): return False # Check if a part is in range 0 - 255 if int(part) < 0 or int(part) > 255: return False return True if __name__ == '__main__': output = validate_ip(\\"192.168.1.113\\") print(output)"},{"prompt":"Create an API in Python to list out all directories and subdirectories from a given path. 'C://Users/Username/Documents'","completion":"import os def listDirectories(path): dirs = os.listdir(path) for dir in dirs: print(os.path.join(path, dir)) if os.path.isdir(os.path.join(path, dir)): listDirectories(os.path.join(path, dir))"},{"prompt":"This code defines a Python module called \`zabbix_host_info\` that allows you to search for Zabbix host entries. It takes in various options such as \`host_name\`, \`host_ip\`, \`exact_match\`, \`remove_duplicate\`, and \`host_inventory\` to filter the search results. The module uses the \`zabbixapi\` library to connect to a Zabbix server and retrieve the host information. To use this module, import it into your Python code and call its functions with the appropriate arguments.","completion":"#!/usr/bin/python # -*- coding: utf-8 -*- # (c) me@mimiko.me # GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt) from __future__ import (absolute_import, division, print_function) __metaclass__ = type ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['preview'], 'supported_by': 'community'} RETURN = ''' --- hosts: description: List of Zabbix hosts. See https://www.zabbix.com/documentation/4.0/manual/api/reference/host/get for list of host values. returned: success type: dict sample: [ { \\"available\\": \\"1\\", \\"description\\": \\"\\", \\"disable_until\\": \\"0\\", \\"error\\": \\"\\", \\"flags\\": \\"0\\", \\"groups\\": [\\"1\\"], \\"host\\": \\"Host A\\", ... } ] ''' DOCUMENTATION = ''' --- module: zabbix_host_info short_description: Gather information about Zabbix host description: - This module allows you to search for Zabbix host entries. - This module was called C(zabbix_host_facts) before Ansible 2.9. The usage did not change. version_added: \\"2.7\\" author: - \\"Michael Miko (@RedWhiteMiko)\\" requirements: - \\"python >= 2.6\\" - \\"zabbix-api >= 0.5.4\\" options: host_name: description: - Name of the host in Zabbix. - host_name is the unique identifier used and cannot be updated using this module. required: true host_ip: description: - Host interface IP of the host in Zabbix. required: false exact_match: description: - Find the exact match type: bool default: no remove_duplicate: description: - Remove duplicate host from host result type: bool default: yes host_inventory: description: - List of host inventory keys to display in result. - Whole host inventory is retrieved if keys are not specified. type: list required: false version_added: 2.8 extends_documentation_fragment: - zabbix ''' EXAMPLES = ''' - name: Get host info local_action: module: zabbix_host_info server_url: http://monitor.example.com login_user: username login_password: password host_name: ExampleHost host_ip: 127.0.0.1 timeout: 10 exact_match: no remove_duplicate: yes - name: Reduce host inventory information to provided keys local_action: module: zabbix_host_info server_url: http://monitor.example.com login_user: username login_password: password host_name: ExampleHost host_inventory: - os - tag host_ip: 127.0.0.1 timeout: 10 exact_match: no remove_duplicate: yes ''' import atexit import traceback from ansible.module_utils.basic import AnsibleModule, missing_required_lib try: from zabbix_api import ZabbixAPI HAS_ZABBIX_API = True except ImportError: ZBX_IMP_ERR = traceback.format_exc() HAS_ZABBIX_API = False class Host(object): def __init__(self, module, zbx): self._module = module self._zapi = zbx def get_hosts_by_host_name(self, host_name, exact_match, host_inventory): \\"\\"\\" Get host by host name \\"\\"\\" search_key = 'search' if exact_match: search_key = 'filter' host_list = self._zapi.host.get({'output': 'extend', 'selectParentTemplates': ['name'], search_key: {'host': [host_name]}, 'selectInventory': host_inventory}) if len(host_list) < 1: self._module.fail_json(msg=\\"Host not found: %s\\" % host_name) else: return host_list def get_hosts_by_ip(self, host_ips, host_inventory): \\"\\"\\" Get host by host ip(s) \\"\\"\\" hostinterfaces = self._zapi.hostinterface.get({ 'output': 'extend', 'filter': { 'ip': host_ips } }) if len(hostinterfaces) < 1: self._module.fail_json(msg=\\"Host not found: %s\\" % host_ips) host_list = [] for hostinterface in hostinterfaces: host = self._zapi.host.get({ 'output': 'extend', 'selectGroups': 'extend', 'selectParentTemplates': ['name'], 'hostids': hostinterface['hostid'], 'selectInventory': host_inventory }) host[0]['hostinterfaces'] = hostinterface host_list.append(host[0]) return host_list def delete_duplicate_hosts(self, hosts): \\"\\"\\" Delete duplicated hosts \\"\\"\\" unique_hosts = [] listed_hostnames = [] for zabbix_host in hosts: if zabbix_host['name'] in listed_hostnames: continue unique_hosts.append(zabbix_host) listed_hostnames.append(zabbix_host['name']) return unique_hosts def main(): module = AnsibleModule( argument_spec=dict( server_url=dict(type='str', required=True, aliases=['url']), login_user=dict(type='str', required=True), login_password=dict(type='str', required=True, no_log=True), host_name=dict(type='str', default='', required=False), host_ip=dict(type='list', default=[], required=False), http_login_user=dict(type='str', required=False, default=None), http_login_password=dict(type='str', required=False, default=None, no_log=True), validate_certs=dict(type='bool', required=False, default=True), timeout=dict(type='int', default=10), exact_match=dict(type='bool', required=False, default=False), remove_duplicate=dict(type='bool', required=False, default=True), host_inventory=dict(type='list', default=[], required=False) ), supports_check_mode=True ) if module._name == 'zabbix_host_facts': module.deprecate(\\"The 'zabbix_host_facts' module has been renamed to 'zabbix_host_info'\\", version='2.13') if not HAS_ZABBIX_API: module.fail_json(msg=missing_required_lib('zabbix-api', url='https://pypi.org/project/zabbix-api/'), exception=ZBX_IMP_ERR) server_url = module.params['server_url'] login_user = module.params['login_user'] login_password = module.params['login_password'] http_login_user = module.params['http_login_user'] http_login_password = module.params['http_login_password'] validate_certs = module.params['validate_certs'] host_name = module.params['host_name'] host_ips = module.params['host_ip'] timeout = module.params['timeout'] exact_match = module.params['exact_match'] is_remove_duplicate = module.params['remove_duplicate'] host_inventory = module.params['host_inventory'] if not host_inventory: host_inventory = 'extend' zbx = None # login to zabbix try: zbx = ZabbixAPI(server_url, timeout=timeout, user=http_login_user, passwd=http_login_password, validate_certs=validate_certs) zbx.login(login_user, login_password) atexit.register(zbx.logout) except Exception as e: module.fail_json(msg=\\"Failed to connect to Zabbix server: %s\\" % e) host = Host(module, zbx) if host_name: hosts = host.get_hosts_by_host_name(host_name, exact_match, host_inventory) if is_remove_duplicate: hosts = host.delete_duplicate_hosts(hosts) extended_hosts = [] for zabbix_host in hosts: zabbix_host['hostinterfaces'] = host._zapi.hostinterface.get({ 'output': 'extend', 'hostids': zabbix_host['hostid'] }) extended_hosts.append(zabbix_host) module.exit_json(ok=True, hosts=extended_hosts) elif host_ips: extended_hosts = host.get_hosts_by_ip(host_ips, host_inventory) if is_remove_duplicate: hosts = host.delete_duplicate_hosts(extended_hosts) module.exit_json(ok=True, hosts=extended_hosts) else: module.exit_json(ok=False, hosts=[], result=\\"No Host present\\") if __name__ == '__main__': main()"},{"prompt":"Design a class in Python that stores a 2x2 matrix and has a method to return its inverse.","completion":"class Matrix: def __init__(self, matrix): self.matrix = matrix def get_inverse(self): inverse = [[0,0],[0,0]] a = self.matrix[0][0] b = self.matrix[0][1] c = self.matrix[1][0] d = self.matrix[1][1] inverse[0][0] = d/(a*d - b*c) inverse[0][1] = -1*b/(a*d - b*c) inverse[1][0] = -1*c/(a*d - b*c) inverse[1][1] = -(a/(a*d - b*c)) return inverse"},{"prompt":"Create a function for checking if a string is palindrome using Python.","completion":"def is_palindrome(text): reverse = text[::-1] # reverse the string return text == reverse"},{"prompt":"Generate an algorithm in Python to find the intersection of two given lists. list1=[1,2,3,4] list2=[3,4,5,6]","completion":"# Function to find the intersection of two lists def intersect(list1, list2): intersection = [] # Iterate through the items in list1 for item in list1: # Check if the item is in list2 if item in list2: # If yes, add it to the intersection list intersection.append(item) # Return the intersection return intersection list1 = [1,2,3,4] list2 = [3,4,5,6] intersection = intersect(list1, list2) print(intersection) # Output: [3, 4]"},{"prompt":"Write a Python program to generate all binary strings of a given length n. 3","completion":"def generate_binary_str(n): result = [] for i in range(2 ** n): s = bin(i)[2:] s = (n - len(s)) * \\"0\\" + s result.append(s) return result result = generate_binary_str(3) print(result) # Output: ['000', '001', '010', '011', '100', '101', '110', '111']"},{"prompt":"Find the smallest number in the given list without using any builtin Python functions or sorting. arr = [8, 3, 9, 5, 1]","completion":"def find_smallest(arr): smallest = None for n in arr: if smallest is None or n < smallest: smallest = n return smallest arr = [8, 3, 9, 5, 1] smallest = find_smallest(arr) print(smallest)"},{"prompt":"Design a text editor in Python that prints ‘Corrected’ if a correct sentence is entered, and ‘Incorrect’ if an incorrect sentence is entered","completion":"def text_editor(): sentence = input(\\"Enter the sentence: \\") is_correct = check_correctness(sentence) if is_correct: print(\\"Corrected\\") else: print(\\"Incorrect\\") def check_correctness(sentence): # code to check the correctness of the sentence return is_correct"},{"prompt":"Create a python code to get the intersection of two Lists. List1 = [1, 3, 5, 7, 8] List2 = [2, 3, 7, 8, 9]","completion":"def get_intersection(List1, List2): ''' This program takes in two lists and returns the elements common in both lists ''' intersect_list = [] for item in List1: if item in List2: intersect_list.append(item) return intersect_list List1 = [1, 3, 5, 7, 8] List2 = [2, 3, 7, 8, 9] print(get_intersection(List1, List2)) # [3, 7, 8]"},{"prompt":"Write a Python program to check if all the elements in a given list are unique.","completion":"def is_list_unique(list): unique_list = list(dict.fromkeys(list)) return len(list) == len(unique_list)"},{"prompt":"Develop a Python function to sum an array of integers [1, 2, 3, 4]","completion":"def sumIntArray(arr): arr_sum = 0 for num in arr: arr_sum += num return arr_sum arr = [1, 2, 3, 4] print(sumIntArray(arr)) #prints 10"},{"prompt":"Design and program a Python function to find the maximum number from an array of integers [10, 2, 4, 6, 8, 9]","completion":"def max_num(arr): max_num = arr[0] for i in arr: if i > max_num: max_num = i return max_num if __name__ == '__main__': arr = [10, 2, 4, 6, 8, 9] print('The maximum number in array is', max_num(arr))"},{"prompt":"Write a Python program to use a type hint to check if a variable is an instance of a particular class.","completion":"def check_type(variable, class_name): if isinstance(variable, class_name): print(\\"It is an instance of the class\\") else: print(\\"It is not an instance of the class\\")"},{"prompt":"Write a Python program to compute the integral of a given function using the trapezoidal rule.","completion":"def trapezoidal_rule(f, a, b, n): # calculate h h = (b-a)/n # initialize output result = 0.0 # calculate last term result += 0.5*f(a) + 0.5*f(b) # calculate intermediate terms for i in range(1,n): result += f(a + i*h) # multiply by step size result *= h return result"},{"prompt":"Compose a Python class hierarchy which models the relationship between a student, instructor, and class.","completion":"class Person: def __init__(self, name): self.name = name class Student(Person): def __init__(self, name, student_id): super().__init__(name) self.student_id = student_id self.classes = [] def enroll(self, course): self.classes.append(course) class Instructor(Person): def __init__(self, name, instructor_id): super().__init__(name) self.instructor_id = instructor_id self.classes = [] def assign(self, course): self.classes.append(course) class Course: def __init__(self, name, course_id): self.name = name self.course_id = course_id self.students = [] self.instructor = None def assign_instructor(self, instructor): self.instructor = instructor def add_student(self, student): self.students.append(student)"},{"prompt":"Rewrite the following CoffeeScript program in Python code. coffeeConvert = (x) > x * 60","completion":"def coffeeConvert(x): return x * 60"},{"prompt":"Given a list of numbers, write a python program that finds an index of an array element and its corresponding value. my_list = [2,4,6,8,10]","completion":"def find_index_and_value(my_list): for i, num in enumerate(my_list): print(\\"Element with index %d has value %d\\" % (i, num)) my_list = [2,4,6,8,10] find_index_and_value(my_list)"},{"prompt":"Write an algorithm in Python to find the exponentiation of a given base and an exponent. base = 2 exponent = 4","completion":"def pow(base, exponent): result = 1 for i in range(exponent): result = result * base return result base = 2 exponent = 4 print('The result of {}^{} is {}'.format(base, exponent, pow(base, exponent)))"},{"prompt":"Generate Python code to find the pair with the maximum product in a given array.","completion":"def max_pair_product(arr): # Initialize the maximum product and the maximum elements max_product = 0 max_elems = [0, 0] # Iterate through each element in the array for i in range(len(arr)): left_elem = arr[i] # Iterate through each other element in the array for j in range(i + 1, len(arr)): right_elem = arr[j] # Compute the product product = left_elem * right_elem # Find the maximum product and the corresponding elements if product > max_product: max_product = product max_elems = [left_elem, right_elem] # Return the maximum product and the corresponding elements return (max_product, max_elems)"},{"prompt":"Develop a Python program to detect a loop in a linked list.","completion":"class Node: def __init__(self, data): self.data = data self.next = None def detect_loop(head): slow_ptr = head fast_ptr = head #check if the linked list is empty if head is None: return False #iterate over the list while fast_ptr is not None and fast_ptr.next is not None: slow_ptr = slow_ptr.next fast_ptr = fast_ptr.next.next #if the slow and fast pointer are pointing to the same node, then there is a loop if slow_ptr == fast_ptr: return True return False"},{"prompt":"Create a Python script that compares two lists and prints their differences. list1 = [1, 2, 3, 4] list2 = [2, 4, 6, 8]","completion":"list1 = [1, 2, 3, 4] list2 = [2, 4, 6, 8] list_diff = [] for i in list1: if i not in list2: list_diff.append(i) for j in list2: if j not in list1: list_diff.append(j) print(list_diff) # output: [1, 3, 6, 8]"},{"prompt":"Create a Python function to calculate the standard deviation of a set of numbers. [1, 2, 3, 4, 5]","completion":"def calculate_std(numbers): mean = sum(numbers)/len(numbers) squared_differences = [(num-mean)**2 for num in numbers] variance = sum(squared_differences) / len(numbers) return variance**0.5 result = calculate_std([1, 2, 3, 4, 5]) print(result)"},{"prompt":"Write a Python program to return the greatest common divisor between two numbers. num1 = 15 num2 = 25","completion":"def gcd(num1, num2): while num2 != 0: temp = num1 num1 = num2 num2 = temp % num2 return num1 print(gcd(num1,num2))"},{"prompt":"Convert the following function from Python to Java. def generate_list(size): Generate a list of integers from 0 to size 1. return [x for x in range(size)]","completion":"public List<Integer> generateList(int size) { /* Generate a list of integers from 0 to size - 1. */ List<Integer> list = new ArrayList<>(); for (int i = 0; i < size; i++) { list.add(i); } return list; }"},{"prompt":"Create a web crawler in Python to get all web page URLs from a given website. https://en.wikipedia.org/wiki/Web_crawler","completion":"import requests from bs4 import BeautifulSoup url = 'https://en.wikipedia.org/wiki/Web_crawler' request = requests.get(url) soup = BeautifulSoup(request.content, 'html.parser') for link in soup.find_all('a', href=True): print(link['href'])"},{"prompt":"Create a function in Python to calculate the average of a given list [9, 8, 7]. [9, 8, 7]","completion":"def calculate_average(lst): sum = 0 for el in lst: sum += el return sum / len(lst) avg = calculate_average([9, 8, 7]) print(avg) # Output: 8.0"},{"prompt":"Create a web scraper using Python to extract the titles and dates of blog posts on a particular website.","completion":"import requests from bs4 import BeautifulSoup # Make the request r = requests.get('http://example.com/blog') # Parse the HTML soup = BeautifulSoup(r.text, 'html.parser') # Extract the page titles and dates titles = [] dates = [] for tag in soup.find_all('h2'): titles.append(tag.text) for tag in soup.find_all('time'): dates.append(tag.text)"},{"prompt":"Create a function in Python to build an empty dictionary.","completion":"def buildDictionary(): dictionary = dict() return dictionary"},{"prompt":"Generate an XML document in Python to display the data of an employee table. Table columns: employee_id, employee_name, department, salary","completion":"import xml.etree.ElementTree as ET root = ET.Element('employees') employee1 = ET.SubElement(root, \\"employee\\") employee1.set(\\"employee_id\\", \\"1\\") employee1.set(\\"employee_name\\", \\"John\\") employee1.set(\\"department\\", \\"IT\\") employee1.set(\\"salary\\", \\"50000\\") employee2 = ET.SubElement(root, \\"employee\\") employee2.set(\\"employee_id\\", \\"2\\") employee2.set(\\"employee_name\\", \\"Jane\\") employee2.set(\\"department\\", \\"Marketing\\") employee2.set(\\"salary\\", \\"55000\\") tree = ET.ElementTree(root) tree.write(\\"employee_data.xml\\")"},{"prompt":"Edit the following Python program to make it more efficient and concise. def calculate_sum(lst): total = 0 for num in lst: total = total + num return total","completion":"def calculate_sum(lst): return sum(lst)"},{"prompt":"Create a Python script that divides a list of numbers into two subsets whose sum is as close as possible. numbers = [1, 4, 8, 10, 5, 9]","completion":"def divide_list(numbers): # find the sum of the list list_sum = sum(numbers) # try all possible combinations of dividing the list best_difference = float('inf') best_subset_1 = None best_subset_2 = None for i in range(2**len(numbers)): # get the binary representation of i bit_string = '{:0b}'.format(i).zfill(len(numbers)) subset_1 = [] subset_2 = [] for j, bit in enumerate(bit_string): if bit == '0': subset_1.append(numbers[j]) else: subset_2.append(numbers[j]) # check if the difference between the two subsets is the lowest difference = abs(sum(subset_1) - sum(subset_2)) if difference < best_difference: best_difference = difference best_subset_1 = subset_1 best_subset_2 = subset_2 return best_subset_1, best_subset_2"},{"prompt":"Create a Python function to detect a specific sequence Given a list of integers, list_a = [1, 6, 3, 7, 4], find the index of the sequence [3, 7]","completion":"def find_sequence(list_a, pattern): result = [] for i in range(len(list_a)-len(pattern)+1): if list_a[i:i+len(pattern)] == pattern: result.append(i) return result"},{"prompt":"Can you construct a class in Python which will allow users to assign attributes and values like a dictionary?","completion":"class MyDict(dict): def __init__(self, **kwargs): super().__init__(**kwargs) def __getattr__(self, attr): if attr in self: return self[attr] else: raise AttributeError(\\"Attribute '{}' not found\\".format(attr)) def __setattr__(self, attr, value): self[attr] = value"},{"prompt":"Generate a universal JSON serialization from any Python class.","completion":"import json def serialize_object(obj): if hasattr(obj, '__dict__'): return obj.__dict__ else: return obj def serialize_class(class_instance): return json.dumps(class_instance, default=serialize_object) if __name__ == '__main__': # Sample class Person: def __init__(self, name, age): self.name = name self.age = age def hello(self): print(\\"Hello, my name is {} and I'm {} years old\\".format(self.name, self.age)) person = Person('Jane', 20) print(serialize_class(person))"},{"prompt":"Write a function in Python to classify a given number into even or odd.","completion":"def classify_num(num): if (num % 2 == 0): return \\"Even\\" else: return \\"Odd\\""},{"prompt":"Create a python script to compare the similarity between two given sentences using cosine similarity.","completion":"import numpy as np from sklearn.feature_extraction.text import CountVectorizer def similarity_score(sentence1, sentence2): \\"\\"\\"Computes the similarity between two sentences using cosine similarity.\\"\\"\\" # Vectorize the sentences vectorizer = CountVectorizer(stop_words='english') vectorizer.fit_transform([sentence1, sentence2]) vector1, vector2 = vectorizer.transform([sentence1, sentence2]).toarray() # Compute cosine similarity score = np.dot(vector1, vector2) / (np.linalg.norm(vector1) * np.linalg.norm(vector2)) return score"},{"prompt":"Write a Python program to find the closest number to zero from an array. [8, 5, 2, 10]","completion":"def closest_number(arr): min_diff = abs(arr[0]) for num in arr: if abs(num) < min_diff: min_diff = abs(num) return min_diff # Driver Code arr = [8, 5, -2, 10] print(closest_number(arr)) # -2"},{"prompt":"Create a program in Python to output all the ndigit Armstrong numbers. n = 3","completion":"def armstrong_numbers(n): # Generate numbers up to 10^n for i in range(10**(n - 1), 10**n): # Convert the number to a list of digits digits = [int(d) for d in str(i)] # Calculate the sum of the nth powers of the digits sum_of_nth_powers = 0 for d in digits: sum_of_nth_powers += d**n # If the sum is equal to the original number, it is an Armstrong number if sum_of_nth_powers == i: print(i) n = 3 armstrong_numbers(n) # Output 153 370 371 407"},{"prompt":"Write a Python code to update the values in a table. Table name: orders Table Schema: order_id INT customer_name VARCHAR price INT Input Data: order_id = 2345 customer_name = ‘John Smith' price = 59.99","completion":"cur.execute(\\"UPDATE orders SET customer_name = %s, price = %s WHERE order_id = %s\\", (customer_name, price, order_id)) conn.commit()"},{"prompt":"Write a function in Python to find the kth smallest element in an unsorted array. input_array = [7, 2, 5, 9, 6], k = 4","completion":"def kth_smallest(input_array, k): input_array.sort() return input_array[k-1]"},{"prompt":"Create a new class in Python to represent a point in the Euclidean plane.","completion":"class Point: def __init__(self, x, y): self.x = x self.y = y"},{"prompt":"Create a Python script to generate 10 random numbers and print their sum. <noinput>.","completion":"import random nums = random.sample(range(100), 10) total = 0 for num in nums: total += num print(total)"},{"prompt":"Write a Python program to simulate a random neuron network.","completion":"import random # Neuron class class Neuron: # Initialize inputs and weights def __init__(self, numInputs): self.weights = [] for i in range(numInputs): self.weights.append(random.uniform(-1, 1)) # Process inputs and produce output def process(self, inputs): # Multiply inputs by weights output = 0 for i in range(len(self.weights)): output += self.weights[i] * inputs[i] # Use sigmoid function to normalize result return 1 / (1 + math.exp(-output))"},{"prompt":"Convert a given list of integers to a string in Python. [56, 23, 7]","completion":"def list_to_string(int_list): return ' '.join(str(x) for x in int_list) int_list = [56, 23, 7] print(list_to_string(int_list))"},{"prompt":"Create an algorithm in Python that approximates pi upto given accuracy. Accuracy: 2 decimal po","completion":"# function to approximate pi def approximate_pi(accuracy): pi = 0 iteration = 0 # set precision point precision = 10 ** -accuracy while True: pi += (4 / (2 * iteration + 1)) * ((-1) ** iteration) # terminates if the difference in pi is less than given accuracy if abs((pi - 3.14) > precision): break iteration += 1 return round(pi, accuracy) # example accuracy = 2 print(approximate_pi(accuracy)) # Output: 3.14"},{"prompt":"Create a function in Python that takes two arguments, x and y, and returns the sum of x and y.","completion":"def add(x, y): return x + y"},{"prompt":"Create a python data structure to store customer data, including customer name, address, email and phone number. John Doe 1234 Anystreet Anytown, ST 12345 johnd@example.com 1234567890","completion":"customer = { 'name': \\"John Doe\\", 'address': \\"1234 Anystreet Anytown, ST 12345\\", 'email': \\"johnd@example.com\\", 'phone': \\"123-456-7890\\" }"},{"prompt":"Create a Python program to search for a particular pattern in a string of text and return all matching substrings. let text = hey this is a string to match for a pattern;","completion":"import re text = \\"hey this is a string to match for a pattern\\" pattern = \\"match\\" # Find all matches matches = re.findall(pattern, text) # Print the matches print(matches) # Output: ['match']"},{"prompt":"w would you convert a string to float in Python?","completion":"We can use the float() function to convert a string to float in Python. We can pass the string to the function as an argument and it will return the float representation of the same. Example: string_value = \\"12.45\\" float_value = float(string_value) print(float_value) #Output: 12.45"},{"prompt":"Develop a Python program to grade a student's performance on a multiple choice test. [5, 10, 15]","completion":"def grade_test(scores): total = 0 for score in scores: total += score if total >= 40: return \\"Pass\\" else: return \\"Fail\\" scores = [5, 10, 15] grade = grade_test(scores) print(\\"Grade: \\" + grade)"},{"prompt":"Create an AI assistant to answer questions about the Python programming language. The assistant should be able to answer questions like What is a while loop?, What is the difference between a list and a dictionary? Not applicable","completion":"from rasa_nlu.model import Interpreter interpreter = Interpreter.load('./models/nlu/default/model') def ask_question(question): result = interpreter.parse(question) intent = result['intent']['name'] if intent == 'python_while_loop': #return answer to \\"What is a while loop?\\" elif intent == 'python_list_dictionary': #return answer to \\"What is the difference between a list and a dictionary?\\""},{"prompt":"Write a python program to preprocess a dataset such that each row is a list containing tuples and containing max four columns.","completion":"import csv def preprocess_data(in_file): '''This function preprocesses a csv file into a list containing tuples with max four columns per row.''' with open(in_file) as fin: reader = csv.reader(fin) data = [line[:4] for line in reader] return [tuple(line) for line in data]"},{"prompt":"Convert the following JavaScript code to its equivalent Python code. const array = [1, 2, 3];","completion":"array = [1, 2, 3]"},{"prompt":"Write a Python program to find the number of divisors of an integer.","completion":"def count_number_divisors(x): count = 0 for i in range(1, x+1): if x % i == 0: count = count + 1 return count"},{"prompt":"Update a Python program which constructs a list of prime numbers using the Sieve of Eratosthenes algorithm. The program should improve its performance by using an efficient implementation of the algorithm. Not applicable","completion":"def sieve_of_eratosthenes(n): primes = [True for i in range(n+1)] p = 2 while (p * p <= n): if (primes[p] == True): for i in range(p *2, n+1, p): primes[i] = False p += 1 primes[0] = False primes[1] = False prime_numbers = [] for i in range(n+1): if primes[i]: prime_numbers.append(i) return prime_numbers print(sieve_of_eratosthenes(20))"},{"prompt":"Write a Python program to find the greatest overlapping of two interval lists. [[1,4], [7, 10], [3, 5]] and [[2,5], [6,9]]","completion":"def overlap(intervals1, intervals2): max_overlap = 0 for i in range(len(intervals1)): for j in range(len(intervals2)): overlap = min(intervals1[i][1], intervals2[j][1]) - max(intervals1[i][0], intervals2[j][0]) max_overlap = max(max_overlap, overlap) return max_overlap result = overlap([[1,4], [7, 10], [3, 5]], [[2,5], [6,9]]) print(result)"},{"prompt":"Create a set of instructions in Python to generate a Mad Libs game. Not applicable","completion":"# define the set of words words = { 'adjective': ['funny', 'beautiful', 'tall'], 'noun': ['cat', 'dog', 'computer'], 'verb': ['jump', 'run', 'walk'] } # function for getting user input def get_input(type): print(\\"Enter a %s\\" % type) return input() # function for getting a random word def get_random_word(type): import random return random.choice(words[type]) # main function def play_game(): print(\\"Welcome to Mad Libs! Let's get started!\\") # get user input adjective1 = get_input('adjective') noun1 = get_input('noun') verb1 = get_input('verb') # get random words adjective2 = get_random_word('adjective') noun2 = get_random_word('noun') verb2 = get_random_word('verb') # create mad lib mad_lib = \\"The %s %s %s over the %s %s and then %s away!\\" % (adjective1, noun1, verb1, adjective2, noun2, verb2) # print mad lib print(mad_lib)"},{"prompt":"Design a function in Python that takes an array of strings as input and returns all the strings in reversed order. data = [Hello, World, Foo, Bar]","completion":"def reverseStrings(data): return [string[::-1] for string in data] reversedStrings = reverseStrings(data) print(reversedStrings) # [\\"olleH\\", \\"dlroW\\", \\"ooF\\", \\"raB\\"]"},{"prompt":"This code creates a textured pyramid in Python using OpenGL drawing primitives. To create the pyramid, define a function called createPyramid() that returns a geode. Then, load a texture from a file and create a StateSet that enables the texture. Finally, assign the StateSet to the geode and enter a simulation loop.","completion":"#!/bin/env python # Translated into python from C++ tutorial at # http:#trac.openscenegraph.org/projects/osg/wiki/Support/Tutorials/Textures from osgpypp import osg, osgDB, osgViewer import sys # Creating Textured Geometry using StateSets # Goals # Add a texture to geometry defined by OpenGL drawing primitives introduced in # tutorial Basic geometry. # Background # The previous tutorial introduced viewing scenes that include basic shapes # created from OpenGL primitives. This section explains how to add textures to # these shapes. To make the code easier to use, we'll put the pyramid code # into a function that creates a geode and returns a pointer to it. The # following code is from tutorial Basic geometry. def createPyramid(): pyramidGeode = osg.Geode() pyramidGeometry = osg.Geometry() pyramidGeode.addDrawable(pyramidGeometry) # Specify the vertices: pyramidVertices = osg.Vec3Array() pyramidVertices.append( osg.Vec3(0, 0, 0) ) # front left pyramidVertices.append( osg.Vec3(2, 0, 0) ) # front right pyramidVertices.append( osg.Vec3(2, 2, 0) ) # back right pyramidVertices.append( osg.Vec3( 0,2, 0) ) # back left pyramidVertices.append( osg.Vec3( 1, 1,2) ) # peak # Associate this set of vertices with the geometry associated with the # geode we added to the scene. pyramidGeometry.setVertexArray( pyramidVertices ) # Create a QUAD primitive for the base by specifying the # vertices from our vertex list that make up this QUAD: pyramidBase = osg.DrawElementsUInt(osg.PrimitiveSet.QUADS, 0) pyramidBase.append(3) pyramidBase.append(2) pyramidBase.append(1) pyramidBase.append(0) # Add this primitive to the geometry: # pyramidGeometry.addPrimitiveSet(pyramidBase) # code to create other faces goes here! pyramidGeometry.addPrimitiveSet(pyramidBase) # Repeat the same for each of the four sides. Again, vertices are specified in counter-clockwise order. pyramidFaceOne = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0) pyramidFaceOne.append(0) pyramidFaceOne.append(1) pyramidFaceOne.append(4) pyramidGeometry.addPrimitiveSet(pyramidFaceOne) pyramidFaceTwo = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0) pyramidFaceTwo.append(1) pyramidFaceTwo.append(2) pyramidFaceTwo.append(4) pyramidGeometry.addPrimitiveSet(pyramidFaceTwo) pyramidFaceThree = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0) pyramidFaceThree.append(2) pyramidFaceThree.append(3) pyramidFaceThree.append(4) pyramidGeometry.addPrimitiveSet(pyramidFaceThree) pyramidFaceFour = osg.DrawElementsUInt(osg.PrimitiveSet.TRIANGLES, 0) pyramidFaceFour.append(3) pyramidFaceFour.append(0) pyramidFaceFour.append(4) pyramidGeometry.addPrimitiveSet(pyramidFaceFour) colors = osg.Vec4Array() colors.append(osg.Vec4(1.0, 0.0, 0.0, 1.0) ) #index 0 red colors.append(osg.Vec4(0.0, 1.0, 0.0, 1.0) ) #index 1 green colors.append(osg.Vec4(0.0, 0.0, 1.0, 1.0) ) #index 2 blue colors.append(osg.Vec4(1.0, 1.0, 1.0, 1.0) ) #index 3 white colors.append(osg.Vec4(1.0, 0.0, 0.0, 1.0) ) #index 4 red pyramidGeometry.setColorArray(colors) pyramidGeometry.setColorBinding(osg.Geometry.BIND_PER_VERTEX) # Since the mapping from vertices to texture coordinates is 1:1, # we don't need to use an index array to map vertices to texture # coordinates. We can do it directly with the 'setTexCoordArray' # method of the Geometry class. # This method takes a variable that is an array of two dimensional # vectors (osg.Vec2). This variable needs to have the same # number of elements as our Geometry has vertices. Each array element # defines the texture coordinate for the cooresponding vertex in the # vertex array. texcoords = osg.Vec2Array(5) texcoords[0].set(0.00,0.0) # tex coord for vertex 0 texcoords[1].set(0.25,0.0) # tex coord for vertex 1 texcoords[2].set(0.50,0.0) # \\"\\" texcoords[3].set(0.75,0.0) # \\"\\" texcoords[4].set(0.50,1.0) # \\"\\" pyramidGeometry.setTexCoordArray(0,texcoords) return pyramidGeode # Loading a Texture, Creating a State Set, assigning it to a Node # The method for rendering primitives is controlled using StateSets. This # section of code demonstrates how to load a texture from file, create a # StateSet in which this texture is enabled, and assign this StateSet to a # node in the scene. The first section starts out the same as previous # tutorials. Initialize a viewer and build a scene with a single pyramid. # Declare a group to act as root node of a scene: root = osg.Group() pyramidGeode = createPyramid() root.addChild(pyramidGeode) # Now for adding a texture. Here we'll declare a texture instance and set # its data variance as 'DYNAMIC'. (If we don't declare the texture as dynamic, # some of the osg's optimization routines could remove it.) The texture class # encapsulates OpenGL texture modes (wrap, filiter, etc.) as well as an # osg.Image. The code below shows how to read an osg.Image instance from a # file and associate this image with a texture. KLN89FaceTexture = osg.Texture2D() # protect from being optimized away as static state: KLN89FaceTexture.setDataVariance(osg.Object.DYNAMIC) # load an image by reading a file: klnFace = osgDB.readImageFile(\\"KLN89FaceB.tga\\") if klnFace is None: print \\" Couldn't find texture, quitting.\\" sys.exit(-1) # Assign the texture to the image we read from file: KLN89FaceTexture.setImage(klnFace) # Textures can be associated with rendering StateSets. The next step is to # create a StateSet, associate and enable our texture with this state set and # assign the StateSet to our geometry. # Create a StateSet with default settings: stateOne = osg.StateSet() # Assign texture unit 0 of our StateSet to the texture # we just created and enable the texture. stateOne.setTextureAttributeAndModes(0, KLN89FaceTexture, osg.StateAttribute.ON) # Associate this state set with the Geode that contains # the pyramid: pyramidGeode.setStateSet(stateOne) # The last step is the simulation loop: viewer = osgViewer.Viewer() #The final step is to set up and enter a simulation loop. viewer.setSceneData( root ) viewer.run()"},{"prompt":"Create a Python function that takes two parameters, a number (n) and a word (w), and prints out the word n number of times. 3, Hello","completion":"def repeat(n, w): for i in range(n): print(w) repeat(3, \\"Hello\\") # Output: Hello Hello Hello"},{"prompt":"Create a Python script that finds the most frequent words in a passage. passage = This is a passage about cats.","completion":"from collections import Counter def most_frequent_words(passage): word_list = passage.split() word_freq = Counter(word_list) most_freq_word = word_freq.most_common(1) return most_freq_word"},{"prompt":"Create an email migration script in Python to migrate emails from source mailbox to destination. The script should enable reading, writing, and deleting emails from the source mailbox. source_mailbox = <path to source mailbox> destination_mailbox = <path to destination mailbox>","completion":"import imaplib import email import os # Source mailbox settings, assuming IMAP source_mailbox = \\"<path to source mailbox>\\" source_mailbox_username = \\"<source mailbox username>\\" source_mailbox_password = \\"<source mailbox password>\\" # Destination mailbox settings, assuming IMAP destination_mailbox = \\"<path to destination mailbox>\\" destination_mailbox_username = \\"<destination mailbox username>\\" destination_mailbox_password = \\"<destination mailbox password>\\" # Establish connection to source mailbox try: source_imap = imaplib.IMAP4_SSL(source_mailbox) except imaplib.IMAP4.error: print('Failed to connect to source mailbox. Exiting...') sys.exit(-1) # Establish connection to destination mailbox try: destination_imap = imaplib.IMAP4_SSL(destination_mailbox) except imaplib.IMAP4.error: print('Failed to connect to destination mailbox. Exiting...') sys.exit(-1) # Login to source mailbox try: source_imap.login(source_mailbox_username, source_mailbox_password) except imaplib.IMAP4.error: print('Failed to login to source mailbox. Exiting...') sys.exit(-1) # Login to destination mailbox try: destination_imap.login(destination_mailbox_username, destination_mailbox_password) except imaplib.IMAP4.error: print('Failed to login to destination mailbox. Exiting...') sys.exit(-1) # Establish connection to source mailbox try: source_imap.select() except imaplib.IMAP4.error: print('Failed to select source mailbox. Exiting...') sys.exit(-1) # Establish connection to destination mailbox try: destination_imap.select() except imaplib.IMAP4.error: print('Failed to select destination mailbox. Exiting...') sys.exit(-1) # Read emails from source and copy to destination mailbox _, messages = source_imap.search(None, 'ALL') for message in messages[0].split(): _, data = source_imap.fetch(message, '(RFC822)') msg = email.message_from_bytes(data[0][1]) source_imap.store(message, '+FLAGS', 'Deleted') destination_imap.append( destination_mailbox, None, None, msg.as_bytes()) # Commit changes to source mailbox source_imap.expunge() # Log out of source and destination mailbox source_imap.close() source_imap.logout() destination_imap.close() destination_imap.logout()"},{"prompt":"Generate a function in Python to find the maximum element from a given array. [10, 15, 20, 11, 99]","completion":"def findMaxElement(array): maxElement = 0 for element in array: if element > maxElement: maxElement = element return maxElement array = [10, 15, 20, 11, 99] maxElement = findMaxElement(array) print(\\"The maximum element in the array is\\", maxElement)"},{"prompt":"Create a Python program to crop a list to a specific length list = [1, 2, 3, 4, 5, 6], length = 4","completion":"def crop_list(input_list, length): output_list = [] for i in range(length): output_list.append(input_list[i]) return output_list my_list = [1, 2, 3, 4, 5, 6] length = 4 result = crop_list(my_list, length) print(result)"},{"prompt":"Design a Python web crawler that takes a URL as an input and prints out a list of all the hyperlinks on the page. https://www.example.com","completion":"import requests from bs4 import BeautifulSoup def crawl_page(url): page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') return [link.get('href') for link in soup.find_all('a')] url = \\"https://www.example.com\\" links = crawl_page(url) for link in links: print(link)"},{"prompt":"Write a Python program to detect if a string contains any special characters.","completion":"def has_special_characters(string): import re return bool(re.search('[^a-zA-Z0-9]', string))"},{"prompt":"Generate a Python script to convert a text to title case format.","completion":"def title_case(string): convert_string = string.split(\\" \\") title_string = \\"\\" for each_word in convert_string: first_letter = each_word[0].upper() other_letters = each_word[1:].lower() title_string += first_letter + other_letters + \\" \\" return title_string"},{"prompt":"Design a web scraper using Python that gathers all the phone numbers from a set of webpages? URLs to scrape","completion":"import requests import re def scrape_phone_numbers(urls): phone_numbers = [] for url in urls: response = requests.get(url) numbers = re.findall(\\"([+]d{2}s?0?d{10})\\", response.text) phone_numbers.extend(numbers) return phone_numbers"},{"prompt":"Write a Python algorithm that finds the factorial of a given number. 5","completion":"def factorial(n): if n == 0: return 1 return n * factorial(n-1)"},{"prompt":"Create a Python script that evaluates an expression using a stackbased algorithm. Expression: 5+3*4","completion":"def eval_expr(expr): stack = [] tokens = expr.split() for token in tokens: if token == '+': n1 = stack.pop() n2 = stack.pop() stack.append(n1 + n2) elif token == '-': n1 = stack.pop() n2 = stack.pop() stack.append(n2 - n1) elif token == '*': n1 = stack.pop() n2 = stack.pop() stack.append(n1 * n2) elif token == '/': n1 = stack.pop() n2 = stack.pop() stack.append(n2 / n1) else: stack.append(int(token)) return stack[0] print(eval_expr('5 + 3 * 4')) # 17"},{"prompt":"Write a Python program to optimize the sorting of a given list of items. ['chair', 'lamp', 'books', 'table']","completion":"def optimize_sort(items): sorted_items = sorted(items) return sorted_items"},{"prompt":"Create a simple Python application for calculating the area of different shapes (circle, square, triangle, and rectangle). Not applicable","completion":"import math def calculate_area(shape, *args): if shape == 'circle': radius = args[0] return math.pi * radius * radius elif shape == 'square': side_length = args[0] return side_length * side_length elif shape == 'triangle': base, height = args return 0.5 * base * height elif shape == 'rectangle': length, width = args return length * width else: return 'Invalid shape' if __name__ == '__main__': print(calculate_area('circle', 5))"},{"prompt":"Write a Python program to optimize the given linear objective function using the Simplex algorithm.","completion":"import numpy as np from scipy.optimize import minimize def optimize_function(objective): bounds = ((0, None), (0, None), (0, None)) res = minimize(objective, [1,1,1], method=\\"Nelder-Mead\\", bounds=bounds) return res"},{"prompt":"Create a Python class called Rectangle that stores the length and width.","completion":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def area(self): return self.length * self.width"},{"prompt":"Construct an Python program for binary search for an item in a sorted list.","completion":"def binary_search(my_list, item): low = 0 high = len(my_list)-1 while low<=high: mid = (low+high)//2 if my_list[mid] == item: return mid elif my_list[mid] > item: high = mid - 1 else: low = mid + 1 return -1"},{"prompt":"Can you suggest an algorithm for finding all the permutations of a given string in Python?","completion":"def permutations(string): if len(string) == 1: return [string] result = [] for i in range(0, len(string)): subString = string[0:i] + string[i+1: len(string)] subPermutations = permutations(subString) for j in range(0, len(subPermutations)): result.append(string[i] + subPermutations[j]) return result"},{"prompt":"Create a Python program that takes a string as input and outputs the string with all characters replaced with their corresponding ASCII values. Python","completion":"def ascii_repr_str(str): ans = '' for ch in str: ans += str(ord(ch)) return ans print(ascii_repr_str(\\"Python\\")) # result: 080 121 116 104 111 110"},{"prompt":"Write a Python program that takes a string and gives the frequency of each letter and the relative frequency of each letter. string = Foo Bar","completion":"input_string = \\"Foo Bar\\" # A dict is initialized to store the frequency of each letter letter_frequency = {} # for loop to calculate frequency of each letter # in the input_string for letter in input_string: # updating the value letter_frequency[letter] = letter_frequency.get(letter, 0) + 1 # variable to store total number of characters total_characters = 0 # variable to store the relative frequency relative_frequency = {} # loop to count total number of characters for letter in letter_frequency: total_characters += letter_frequency[letter] # loop to calculate relative frequency # of each letter for letter in letter_frequency: relative_frequency[letter] = (letter_frequency[letter] / total_characters) * 100 # printing the result print(\\"Letter Frequency : \\", letter_frequency) print(\\"Relative Frequency : \\", relative_frequency)"},{"prompt":"Optimize the following Python function to calculate the sum of natural numbers up to a given number. n = 10","completion":"def sum_natural_numbers(n): total = 0 for i in range(1, n + 1): total += i return total def sum_natural_numbers(n): return n * (n + 1) // 2 print(sum_natural_numbers(10))"},{"prompt":"Construct a Python function that takes two integers a and b and returns the sum of their squares. 2 and 3","completion":"def sum_sqr(a, b): return a*a + b*b print(sum_sqr(2, 3))"},{"prompt":"Write a Python code to sort the given array. array : [ 2, 4, 1, 3, 7, 5]","completion":"# Bubble sort algorithm def sort_array(array): for i in range(len(array)): for j in range(len(array)-i-1): if array[j] > array[j+1]: array[j], array[j+1] = array[j+1], array[j] return array # Sample array array = [2, 4, 1, 3, 7, 5] # Function call sorted_array = sort_array(array) # Print sorted output print(sorted_array)"},{"prompt":"Generate a python program to determine which episode of a TV show is the most popular.","completion":"def get_most_popular_episode(data): \\"\\"\\" Args: data (dict): A dictionary with information about each episode of the TV show, including the number of views and the episode number Returns: int: The number of the most popular episode \\"\\"\\" max_views = 0 most_popular_episode = 0 for ep_num, ep_data in data.items(): num_views = ep_data[\\"views\\"] if num_views > max_views: max_views = num_views most_popular_episode = ep_num return most_popular_episode"},{"prompt":"Optimize a Python script's performance by refactoring the code to use multiprocessing. def process_list_data(data): for record in data: # Process the data list_data = [1,2,3,4,5] process_list_data(list_data)","completion":"from multiprocessing import Pool def process_data(record): # Process the data def process_list_data(data): with Pool() as p: p.map(process_data, data) list_data = [1,2,3,4,5] process_list_data(list_data)"},{"prompt":"Output a program in Python to find the most frequent occurring item in an array arr = [1,3,3,3,4,4,4,4,5,5]","completion":"from collections import Counter arr = [1,3,3,3,4,4,4,4,5,5] data = Counter(arr) get_mode = dict(data) mode = [k for k, v in get_mode.items() if v == max(list(data.values()))] print(f\\"Mode of the given list is {mode}\\")"},{"prompt":"Construct a Python function to reverse the contents of a given array inplace.","completion":"def reverse_in_place(arr): start = 0 end = len(arr)-1 while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1"},{"prompt":"Using a Decision Tree model, create a Python program to predict whether a customer is likely to churn given 5 different features. Features: Purchase history, Gender, Age, Location, Billing Amou","completion":"import pandas as pd from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import train_test_split # Read the dataset dataset = pd.read_csv('data.csv') # Extract the input and output X = dataset.iloc[:, :5].values y = dataset.iloc[:, 5].values # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42) # Train the decision tree clf = DecisionTreeClassifier() clf.fit(X_train, y_train) # Predict the output y_pred = clf.predict(X_test) # Print the accuracy print('Accuracy:', clf.score(X_test, y_test))"},{"prompt":"Create a Python class to represent a student's name and GPA.","completion":"class Student: def __init__(self, name, gpa): self.name = name self.gpa = gpa def get_name(self): return self.name def get_gpa(self): return self.gpa"},{"prompt":"Construct a for loop in Python to calculate the sum of the first 10 even numbers.","completion":"total = 0 for x in range(2, 21, 2): total += x print(total)"},{"prompt":"Generate a Python program to classify a sentence as positive, neutral, or negative using sentiment analysis. This is a great movie!","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_classifier(sentence): sid = SentimentIntensityAnalyzer() sentiment_scores = sid.polarity_scores(sentence) if sentiment_scores['compound'] > 0.5: sentiment_class = 'positive' elif sentiment_scores['compound'] == 0.0: sentiment_class = 'neutral' else: sentiment_class = 'negative' return sentiment_class if __name__ == '__main__': sentence = 'This is a great movie!' print(sentiment_classifier(sentence))"},{"prompt":"Generate a Python code to print the symmetric differences between two sets. Set1 = {1, 3, 4, 8} Set2 = {2, 3, 5, 6}","completion":"# Define sets Set1 = {1, 3, 4, 8} Set2 = {2, 3, 5, 6} # Compute the symmetric difference difference = Set1.symmetric_difference(Set2) # Print the symmetric differences print(\\"The symmetric differences between the two sets :\\", difference)"},{"prompt":"Write a Python program to format a specified string to limit the number of characters to 6. String: Hello World","completion":"def limit_chars(string): # Limit the number of character to 6 limited_string = string[:6] return limited_string string = \\"Hello World\\" result = limit_chars(string) print(result)"},{"prompt":"Construct a Python dictionary that has the value hello assigned to the key word.","completion":"my_dict = { \\"word\\": \\"hello\\" }"},{"prompt":"Design a GUI in Python to display data in tabular format and the ability to sort by column.","completion":"import tkinter as tk # Set up the root window root = tk.Tk() # Create the table table = tk.Frame(root) table.grid(row=0, column=0) # Set the row and column numbers rows = 5 columns = 5 # Create the label for column 0 for i in range(rows): for j in range(1, columns): b = tk.Entry(table, text=\\"\\") b.grid(row=i, column=j, sticky=\\"nsew\\") # Sort by column def sortByColumn(col): list = table.grid_slaves() sortlist = [] for l in list: if int(l.grid_info()[\\"column\\"]) == col: sortlist.append(l.get()) sortlist = sorted(sortlist) i = 0 for l in list: if int(l.grid_info()[\\"column\\"]) == col: l.delete(0, \\"end\\") l.insert(0, sortlist[i]) i += 1 # Create the button to initiate the sort for c in range(1, columns): tk.Button(table, text=\\"Sort\\", command=lambda c=c: sortByColumn(c)).grid(row=rows, column=c) # Diplay the root window root.mainloop()"},{"prompt":"Generate Python code to remove all punctuation in a given string.","completion":"import string def remove_all_punctuation(string): \\"\\"\\" Remove all punctuation from a given string. string: string to be modified \\"\\"\\" punctuations = string.maketrans('', '', string.punctuation) no_punct = string.translate(punctuations) return no_punct"},{"prompt":"Use the Python code to translate reStructuredText to HTML using the docutils package. The resulting HTML will be printed to the console.","completion":"#!/usr/bin/python # -*- coding: utf-8 -*- # # --- BEGIN_HEADER --- # # html_writer - [insert a few words of module description on this line] # Copyright (C) 2003-2009 The MiG Project lead by Brian Vinter # # This file is part of MiG. # # MiG is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # MiG is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA. # # -- END_HEADER --- # from docutils.writers.html4css1 import Writer, HTMLTranslator from docutils.core import publish_string # Setup a translator writer html_writer = Writer() html_writer.translator_class = HTMLTranslator # Setup a restructured text example reST = \\"\\"\\" Example of reST: ================ This is a small example of the way reST can be used as a base for generating HTMLformatted text that: - looks nice - is standards compliant - is flexible We *may* decide to start using this as text formatting tool in MiG__ later on. __ http://mig-1.imada.sdu.dk/ We can also use it for creating tables if we want to: ===== ===== ====== Input Output ----- ----- ------ A B A or B ===== ===== ====== False False False True False True False True True True True True ===== ===== ====== Have fun! ---- Cheers, Jonas \\"\\"\\" # Translate reST to html html = publish_string(reST, settings_overrides={'output_encoding' : 'unicode'}, writer=html_writer) print html"},{"prompt":"This code performs BLAST evaluation. To use it, follow these steps: 1. Import the necessary libraries: glob, sys, csv, and tabulate from Bio.Blast.Applications. 2. Define the following functions: carga_csv(file_name): creates a list of lists with a csv file. crea_comparacion(tabla_ref, estructura = 'star', comparacion = 'bi'): creates comparisons lists (code) depending on arguments. imprime_comparacion(listas): prints the comparison as a readable format. imprime_referencia(claves): prints the comparison as a readable format. crea_diccionario(tabla): creates a dictionary of code:organism. 3. In the program body, prompt the user to enter the CSV file name and load the data using carga_csv(). 4. Present the CSV data using tabulate(). 5. Present the options: blast parameters, comparison parameters, run. 6. If the user selects option 1, prompt them to enter the comparisons using the organism index and the direction (bidirectional or unidirectional). Use crea_comparacion() to create the comparison list. 7. If the user selects option 2, prompt them to enter the desired E value for BLAST runs. Use NcbiblastpCommandline() to create the commands for comparisons. 8. Run the commands and inform the user when the work is completed.","completion":"#! /usr/bin/env python \\"\\"\\" DESCRIPTION \\"\\"\\" import glob, sys, csv from tabulate import tabulate from Bio.Blast.Applications import NcbiblastpCommandline \\"\\"\\"--- FUNCTIONS ---\\"\\"\\" def carga_csv(file_name): \\"\\"\\" creates a list of lists with a csv file \\"\\"\\" tabla = [] cr = csv.reader(open(file_name,\\"rb\\")) for row in cr: tabla.append(row) return tabla def crea_comparacion(tabla_ref, estructura = 'star', comparacion = 'bi'): \\"\\"\\" creates comparisons lists (code) depending on arguments \\"\\"\\" lista = [] tabla = list(tabla_ref) if estructura == 'star': nodo = tabla.pop() for organismo in tabla: lista.append([nodo[1],organismo[1]]) if comparacion == 'bi': lista.append([organismo[1], nodo[1]]) else: comps = estructura.split(',') for comp in comps: pareja = comp.split('-') query = tabla[int(pareja[0])][1] db = tabla[int(pareja[1])][1] lista.append([query, db]) if comparacion == 'bi': lista.append([db, query]) return lista def imprime_comparacion(listas): \\"\\"\\" prints the comparison as a readable format\\"\\"\\" print 'COMPARISONSn-----------n' for lista in listas: print lista[0] + ' --> ' + lista[1] print 'n' def imprime_referencia(claves): \\"\\"\\" prints the comparison as a readable format\\"\\"\\" print 'REFERENCEn---------' n = 0 for key, val in claves.items(): print n, '. ', key, 't', val n=n+1 print 'n' def crea_diccionario(tabla): \\"\\"\\" creates a dictionary of code:organism\\"\\"\\" diccionario={} for row in tabla: diccionario[row[1]]=row[0] return diccionario \\"\\"\\"--- PROGRAM BODY ---\\"\\"\\" print '----------------nBLAST EVALUATIONn----------------' blast_eval = 1e-05 comparison_list = [] # charge csv file nombre_csv = raw_input('Please enter the CSV file name: ') organismos = carga_csv(nombre_csv) referencia = crea_diccionario(organismos) comparison_list = crea_comparacion(organismos) # present csv data print 'nCSV datan--------' print tabulate(organismos, headers=[\\"Organism\\",\\"Code\\", \\"Genome File\\", \\"Database folder\\"]) + 'n' # present options: blast parameters, comparison parameters, run while 1: imprime_referencia(referencia) imprime_comparacion(comparison_list) print 'CHOOSE AN OPTIONn----------------n1) Comparisonsn2) Runn3) Quit' user_in = raw_input('Option: ') if user_in == '1': imprime_referencia(referencia) print ('Please enter the comparisons using the organism index.n' + 'Format: \\"-\\" between indices; \\",\\" between comparisons; no spaces.n') nueva_comparacion = raw_input('Comparisons: ') print 'Choose \\"bi\\" for bidirectional or \\"uni\\" for unidirectional; no quotation marks.' tipo_comparacion = raw_input('Direction: ') comparison_list = crea_comparacion(organismos, nueva_comparacion, tipo_comparacion) elif user_in == '2': blast_eval = raw_input('nPlease write the desired E value for BLAST runs; 1e-5 suggested.nE_value: ') print 'nBLAST+ commands to be runned...n' break elif user_in == '3': quit() else: print ('Incorrect option, try again.n') # create commands for comparisons comandos = [] for pair in comparison_list: nombre = referencia[pair[0]].split() comandos.append([(nombre[0]+'_'+nombre[1]+'.faa'), ('db_'+pair[1]+'/db_'+pair[1]), (pair[0]+'_'+pair[1]+'.xml')]) print tabulate(comandos, headers=[\\"Genome file\\",\\"Database\\", \\"Product file\\"]) + 'n' raw_input('Press ENTER to continue') # run commands, inform data created for comando in comandos: blastp_cline = NcbiblastpCommandline(query=comando[0], db=comando[1], evalue=blast_eval ,outfmt=5, out=comando[2]) print 'File ' + comando[2] + ' is currently in progess...' stdout, stderr = blastp_cline() print 'WORK COMPLETEDn--------------'"},{"prompt":"From the input, create Python code that checks if a given number is a palindrome or not. num = 12321","completion":"def is_palindrome(num): \\"\\"\\"Check if a given number is a palindrome or not\\"\\"\\" str_num = str(num) length = len(str_num) if length % 2 == 0: left = str_num[:length//2] right = str_num[length//2:] right_rev = right[::-1] return left == right_rev else: left = str_num[:length//2] middle = str_num[length//2] right = str_num[(length//2)+1:] right_rev = right[::-1] return left == right_rev and middle == middle"},{"prompt":"Write a Python program to convert a given string to a list, using a specified delimiter. red, blue, green, delimiter = ,","completion":"def string_to_list(string, delimiter): list = string.split(delimiter) return list string = \\"red, blue, green\\" delimiter = \\",\\" print(string_to_list(string, delimiter))"},{"prompt":"Generate a list in Python that contains all the words from a source string that start with a certain letter. source_string = My dog loves to play in the park! letter = p","completion":"def generate_list(source_string, letter): words = source_string.split() result = [] for word in words: if word[0].lower() == letter: result.append(word) return result print(generate_list(source_string, letter))"},{"prompt":"Optimize the following Python program to increase its performance by three times. def slow_operation(n): result = 0 for i in range(n): result += i return resul","completion":"def fast_operation(n): result = (n * (n + 1)) // 2 return result"},{"prompt":"Write a Python program to check whether two strings are anagrams or not String 1: dog String 2: god","completion":"\\"\\"\\" Check whether two strings are anagrams or not \\"\\"\\" # Function to check if two strings are anagrams or not def is_anagram(str1, str2): # Create two lists with the characters of the strings list_str1 = list(str1) list_str1.sort() list_str2 = list(str2) list_str2.sort() # If the two lists are equal, then it is an anagram if (list_str1 == list_str2): return True else: return False # main if __name__ == \\"__main__\\": # Given strings str1 = 'dog' str2 = 'god' if (is_anagram(str1, str2)): print(\\"The two strings are anagrams\\") else: print(\\"The two strings are not anagrams\\")"},{"prompt":"This code is an IBM Storwize V7000 autodiscovery script for Zabbix. To use it, run svc_perf_discovery_sender.py with the following options: debug (to enable debug output), clusters <svc1>[,<svc2>...] (commaseparated Storwize node list), user <username> (Storwize V7000 user account with Administrator role), password <pwd> (user password), and discoverytypes <type1>,[type2] (discovery types: 'volumemdisk','volume','mdisk','pool'). The script sends volume/mdisk/pool LLD JSON data to LLD trapper items svc.discovery.<volumemdisk|volume|mdisk|pool> and should be used with _Special_Storwize_Perf Zabbix template. See also http://www.zabbix.com/documentation/2.0/manual/discovery/low_level_discovery.","completion":"#!/usr/bin/python # -*- coding: utf-8 -*- # coding: utf-8 # # IBM Storwize V7000 autodiscovery script for Zabbix # # 2013 Matvey Marinin # # Sends volume/mdisk/pool LLD JSON data to LLD trapper items \\"svc.discovery.<volume-mdisk|volume|mdisk|pool>\\" # Use with \\"_Special_Storwize_Perf\\" Zabbix template # # See also http://www.zabbix.com/documentation/2.0/manual/discovery/low_level_discovery # # Usage: # svc_perf_discovery_sender.py [--debug] --clusters <svc1>[,<svc2>...] --user <username> --password <pwd> # # --debug = Enable debug output # --clusters = Comma-separated Storwize node list # --user = Storwize V7000 user account with Administrator role (it seems that Monitor role is not enough) # --password = User password # import pywbem import getopt, sys from zbxsend import Metric, send_to_zabbix import logging def usage(): print >> sys.stderr, \\"Usage: svc_perf_discovery_sender_zabbix.py [--debug] --clusters <svc1>[,<svc2>...] --user <username> --password <pwd> --discovery-types <type1>,[type2]\\" print >> sys.stderr, \\"Discovery types: 'volume-mdisk','volume','mdisk','pool'\\" try: opts, args = getopt.gnu_getopt(sys.argv[1:], \\"-h\\", [\\"help\\", \\"clusters=\\", \\"user=\\", \\"password=\\", \\"debug\\", \\"discovery-types=\\"]) except getopt.GetoptError, err: print >> sys.stderr, str(err) usage() sys.exit(2) debug = False clusters = [] DISCOVERY_TYPES = [] user = None password = None for o, a in opts: if o == \\"--clusters\\" and not a.startswith('--'): clusters.extend( a.split(',')) elif o == \\"--user\\" and not a.startswith('--'): user = a elif o == \\"--password\\" and not a.startswith('--'): password = a elif o == \\"--debug\\": debug = True elif o == \\"--discovery-types\\": DISCOVERY_TYPES.extend( a.split(',')) elif o in (\\"-h\\", \\"--help\\"): usage() sys.exit() if not clusters: print >> sys.stderr, '--clusters option must be set' usage() sys.exit(2) if not DISCOVERY_TYPES: print >> sys.stderr, '--discovery-types option must be set' usage() sys.exit(2) if not user or not password: print >> sys.stderr, '--user and --password options must be set' usage() sys.exit(2) def debug_print(message): if debug: print message for cluster in clusters: debug_print('Connecting to: %s' % cluster) conn = pywbem.WBEMConnection('https://'+cluster, (user, password), 'root/ibm') conn.debug = True for discovery in DISCOVERY_TYPES: output = [] if discovery == 'volume-mdisk' or discovery == 'volume': for vol in conn.ExecQuery('WQL', 'select DeviceID, ElementName from IBMTSSVC_StorageVolume'): output.append( '{\\"{#TYPE}\\":\\"%s\\", \\"{#NAME}\\":\\"%s\\", \\"{#ID}\\":\\"%s\\"}' % ('volume', vol.properties['ElementName'].value, vol.properties['DeviceID'].value) ) if discovery == 'volume-mdisk' or discovery == 'mdisk': for mdisk in conn.ExecQuery('WQL', 'select DeviceID, ElementName from IBMTSSVC_BackendVolume'): output.append( '{\\"{#TYPE}\\":\\"%s\\", \\"{#NAME}\\":\\"%s\\", \\"{#ID}\\":\\"%s\\"}' % ('mdisk', mdisk.properties['ElementName'].value, mdisk.properties['DeviceID'].value) ) if discovery == 'pool': for pool in conn.ExecQuery('WQL', 'select PoolID, ElementName from IBMTSSVC_ConcreteStoragePool'): output.append( '{\\"{#TYPE}\\":\\"%s\\",\\"{#NAME}\\":\\"%s\\",\\"{#ID}\\":\\"%s\\"}' % ('pool', pool.properties['ElementName'].value, pool.properties['PoolID'].value) ) json = [] json.append('{\\"data\\":[') for i, v in enumerate( output ): if i < len(output)-1: json.append(v+',') else: json.append(v) json.append(']}') json_string = ''.join(json) print(json_string) trapper_key = 'svc.discovery.%s' % discovery debug_print('Sending to host=%s, key=%s' % (cluster, trapper_key)) #send json to LLD trapper item with zbxsend module if debug: logging.basicConfig(level=logging.INFO) else: logging.basicConfig(level=logging.WARNING) send_to_zabbix([Metric(cluster, trapper_key, json_string)], 'localhost', 10051) debug_print('')"},{"prompt":"Create a program that takes a name as input and prints the length of the name using Python. Jane","completion":"def nameLength(name): return len(name) name = \\"Jane\\" print(\\"Length of the name is:\\", nameLength(name))"},{"prompt":"Define a class in Python that stores information about a person and provides methods for essential operations such as obtaining their age, date of birth and calculating the number of days until their next birthday Not applicable","completion":"import datetime class Person: def __init__(self, name, date_of_birth): self.name = name self.date_of_birth = datetime.datetime.strptime(date_of_birth, '%Y-%m-%d') def get_age(self): today = datetime.datetime.now() return today.year - self.date_of_birth.year - ((today.month, today.day) < (self.date_of_birth.month, self.date_of_birth.day)) def get_date_of_birth(self): return self.date_of_birth def days_until_next_birthday(self): today = datetime.datetime.now() next_birthday = datetime.datetime(today.year, self.date_of_birth.month, self.date_of_birth.day) if today > next_birthday: next_birthday = next_birthday.replace(year=today.year+1) return abs((next_birthday - today).days)"},{"prompt":"Design a class in Python for storing information about books. The class should contain fields for the book title, author, and year of publication. Not applicable","completion":"class Book: def __init__(self, title, author, year): self.title = title self.author = author self.year = year def __str__(self): return f\\"{self.title} by {self.author} ({self.year})\\""},{"prompt":"Create an algorithm in Python to check whether a number is prime or not. 14","completion":"\\"\\"\\" Create an algorithm in Python to check whether a number is prime or not \\"\\"\\" #define a function to check whether a number is prime def is_prime(num): #check if the number is 1 or 2 if num in [1, 2]: return True #check if the number is mulitple of 2 if num % 2 == 0: return False #otherwise check all odd numbers between 3 and the number's square root for i in range(3, int(num ** 0.5 + 1), 2): #if the number is divisble by any odd number, it is not prime if num % i == 0: return False #if the number isn't divisible by any odd number, it is prime return True #test the function if __name__ == '__main__': num = 14 print(is_prime(num))"},{"prompt":"Generate a class definition for a Car object in Python. The object should have attributes for brand, horsepower, and color. Not applicable","completion":"class Car: def __init__(self, brand, horsepower, color): self.brand = brand self.horsepower = horsepower self.color = color def get_brand(self): return self.brand def set_brand(self, brand): self.brand = brand def get_horsepower(self): return self.horsepower def set_horsepower(self, horsepower): self.horsepower = horsepower def get_color(self): return self.color def set_color(self, color): self.color = color"},{"prompt":"w can you sort a list of integers in ascending order in Python?","completion":"def sort_list(lst): return sorted(lst)"},{"prompt":"Generate a Python program to divide two numbers and produce the result in decimal form.","completion":"def divide(a,b): return round(a/b, 2)"},{"prompt":"Write a Python script to generate a multiplication table with a given number of rows and columns. rows = 6 columns = 8","completion":"def multiplicationTable(x, y): table = [[ 0 for j in range(x)] for i in range(y)] for row in range(x): for col in range(y): table[row][col] = (row + 1) * (col + 1) return table print(multiplicationTable(rows, columns)) Output: [[1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6, 8, 10, 12, 14, 16], [3, 6, 9, 12, 15, 18, 21, 24], [4, 8, 12, 16, 20, 24, 28, 32], [5, 10, 15, 20, 25, 30, 35, 40], [6, 12, 18, 24, 30, 36, 42, 48]]"},{"prompt":"Create a function in Python to optimize the hyperparameters of a support vector machine model for a given data set.","completion":"import numpy as np from sklearn.svm import SVC from sklearn.model_selection import GridSearchCV def optimize_svm(X, y): \\"\\"\\"Optimizes the hyperparameters of a Support Vector Machine model using GridSearchCV. Parameters ---------- X : numpy array The feature dataset y : numpy array The target values Returns ------- best_estimator : sklearn.svm.SVC A fitted SVM Estimator instance \\"\\"\\" tuned_parameters = [{'kernel': ['rbf'], 'gamma': [1e-3, 1e-4], 'C': [1, 10, 100, 1000]}, {'kernel': ['linear'], 'C': [1, 10, 100, 1000]}] clf = GridSearchCV(SVC(), tuned_parameters, cv=5) clf.fit(X, y) best_estimator = clf.best_estimator_ return best_estimator"},{"prompt":"Create a class in Python that can represent a 3D point with the given fields. x y and z coordinate","completion":"class Point3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def __str__(self): return 'Point3D is at {x}, {y}, {z}'.format(x = self.x, y = self.y, z = self.z)"},{"prompt":"Write a Python program to classify numbers into prime and nonprime. A list of integers: [2, 4, 8, 11, 15]","completion":"def is_prime(num): for i in range(2, num): if num % i == 0: return False return True def classify_prime_nums(nums): result = [] for num in nums: if is_prime(num): result.append((\\"prime\\", num)) else: result.append((\\"non-prime\\", num)) return result nums = [2, 4, 8, 11, 15] print(classify_prime_nums(nums))"},{"prompt":"Create an optimization problem in Python to optimize the function. The given function is f(x, y) = x + y^2, where x and y are real numbers.","completion":"import numpy as np from scipy.optimize import minimize def f(x): x, y = x return x + y**2 x0 = np.array([0,0]) res = minimize(f, x0, method='nelder-mead') print(res.x)"},{"prompt":"Design an algorithm in Python to calculate the sum of individual digits in a given number. Number: 12345","completion":"def digitSum(n): sum = 0 # loop until we have no digits left while (n != 0): # extract the last digit dig = n % 10 # add the digit to the total sum sum += dig # remove the last digit from n n = n // 10 return sum # Driver Code n = 12345 sum = digitSum(n) # Print the result print(sum)"},{"prompt":"Develop a Python algorithm to validate a given palindrome string. level","completion":"def isPalindrome(s): i = 0 j = len(s) - 1 while i < j: if s[i] != s[j]: return False i += 1 j -= 1 return True # Driver code s = \\"level\\" if isPalindrome(s): print(\\"Yes\\") else: print(\\"No\\")"},{"prompt":"Write a Python script to sort the given array using Heap sort algorithm [8, 5, 2, 1, 8]","completion":"def heapify(arr, n, i): largest = i l = 2 * i + 1 r = 2 * i + 2 if l < n and arr[i] < arr[l]: largest = l if r < n and arr[largest] < arr[r]: largest = r if largest != i: arr[i],arr[largest] = arr[largest],arr[i] heapify(arr, n, largest) def heapSort(arr): n = len(arr) for i in range(n // 2 - 1, -1, -1): heapify(arr, n, i) for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] heapify(arr, i, 0) arr = [8, 5, 2, 1, 8] heapSort(arr) n = len(arr) print (\\"Sorted array is\\") for i in range(n): print (\\"% d\\" %arr[i]),"},{"prompt":"Write a Python program to generate a password of length 10 from lowercase alphabets, uppercase alphabets, digits and special characters.","completion":"import random import string length = 10 def generatePassword(length): chars = string.ascii_lowercase + string.ascii_uppercase + string.digits + \\"!@#%^&*\\" return ''.join([random.choice(chars) for _ in range(length)]) password = generatePassword(length) print(password)"},{"prompt":"Create a Python program to calculate the square root of a number without using the square root function. 36","completion":"def my_sqrt(x): guess = x i = 0 while guess * guess != x and i < 20: guess = (guess + x/guess) / 2.0 i += 1 return guess result = my_sqrt(36) print(\\"Square root of 36 is = \\", result)"},{"prompt":"Write a Python program that prints out items that appear in both listA and listB listA = [1, 2, 3, 4] listB = [2, 4, 5, 6]","completion":"listA = [1, 2, 3, 4] listB = [2, 4, 5, 6] for i in listA: if i in listB: print(i) # Output 2 4"},{"prompt":"Develop a Python program for solving a quadratic equation. Not applicable","completion":"import cmath def quadratic_equation(a, b, c): # calculate the discriminant d = (b**2) - (4*a*c) # find two solutions sol1 = (-b-cmath.sqrt(d))/(2*a) sol2 = (-b+cmath.sqrt(d))/(2*a) return sol1, sol2 if __name__ == \\"__main__\\": a = 1 b = 5 c = 6 solutions = quadratic_equation(a, b, c) print('The solution are {0} and {1}'.format(solutions[0],solutions[1]))"},{"prompt":"Create a JavaScript object containing a list of programming languages and their respective paradigms. Not applicable","completion":"const languages = { 'C': 'Imperative', 'C++': 'Imperative', 'Java': 'Object-Oriented', 'Scala': 'Object-Oriented', 'Python': 'Object-Oriented', 'PHP': 'Object-Oriented', 'Go': 'Imperative/Functional', 'Ruby': 'Object-Oriented/Functional', ' JavaScript': 'Functional/Prototype-based', };"},{"prompt":"Create an algorithm in Python for sorting an array of integers with the bubble sort method. [12, 3, 10, 7, 5, 11]","completion":"def bubble_sort(arr): for i in range(len(arr)): for j in range(len(arr) - 1): if arr[j] > arr[j+1]: temp = arr[j] arr[j] = arr[j+1] arr[j+1] = temp return arr result = bubble_sort([12, 3, 10, 7, 5, 11]) print(result)"},{"prompt":"Create a Twitter bot in Python to reply with popular trends whenever a user searches for a hashtag. Not applicable","completion":"# Import necessary packages import tweepy import json #Authentication consumer_key = 'your_consumer_key' consumer_secret = 'your_consumer_secret' access_token = 'your_access_token' access_token_secret = 'your_access_token_secret' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) # Track tweets with a specific hashtag keyword = \\"#python\\" # Reply with popular trends trends_result = api.trends_place(1) trends = json.loads(json.dumps(trends_result, indent=2)) for trend in trends[0][\\"trends\\"]: try: api.update_status(trend[\\"name\\"]) except tweepy.TweepError as e: print(e.reason)"},{"prompt":"Write a Python program to find the prime numbers from a list given by the user. mylist = [3,4,7,11,13,18]","completion":"def isPrime(num): for i in range (2, num): if num % i == 0: return False return True # Driver Code mylist = [3,4,7,11,13,18] for num in mylist: # if condition is true, print the number if isPrime(num): print(num, end =\\" \\")"},{"prompt":"Write a Python script that takes a list of strings, finds the longest string, and prints it out. ['dog', 'cat', 'zebra','elephant']","completion":"def find_longest_string(string_list): longest_string = \\"\\" for i in string_list: if len(i) > len(longest_string): longest_string = i print(longest_string) find_longest_string(['dog', 'cat', 'zebra', 'elephant'])"},{"prompt":"mplement a Neural Network written in Python using TensorFlow for predicting the local weather. Not applicable.","completion":"import tensorflow as tf # Build the neural network model model = tf.keras.Sequential([ tf.keras.layers.Input(shape=(24,)), # 8 neurons on the first hidden layer tf.keras.layers.Dense(8, activation='relu'), # 4 neurons on the second hidden layer tf.keras.layers.Dense(4, activation='relu'), # Output layer, which will have 3 neurons since we have 3 classes tf.keras.layers.Dense(3, activation='softmax') ]) model.compile(optimizer='adam', loss=tf.losses.CategoricalCrossentropy(), metrics=['accuracy']) # Train the model model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test)) # Save the model model.save('weather_predictor_model.h5')"},{"prompt":"Create a class in Python with properties to store the name and age of a person.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age def get_name(self): return self.name def get_age(self): return self.age"},{"prompt":"Create a python script to download a complete web page and cache it for faster offline access. URL: https://www.example.com/page1","completion":"import requests import os url = 'https://www.example.com/page1' if not os.path.exists('cache'): os.makedirs('cache') r = requests.get(url) filename = url.rsplit('/', 1)[-1] file_path = os.path.join('cache', filename) with open(file_path, 'wb') as f: f.write(r.content)"},{"prompt":"Pick two languages from Python, Java, C++ and Go. Write a function in both languages that takes in two integer numbers and returns the sum of them. Not applicable","completion":"#Python def add(a, b): return a + b #Java public static int add(int a, int b) { return a + b; } #C++ int add(int a, int b) { return a + b; } #Go func add(a int, b int) int { return a + b }"},{"prompt":"Generate an algorithm in Python to rotate an array of size 'n' by 'd' elements. [1, 2, 3, 4, 5], d=2","completion":"def rotate(arr, d): for _ in range(d): temp = arr[0] for i in range(len(arr)-1): arr[i] = arr[i+1] arr[len(arr)-1] = temp return arr arr = [1, 2, 3, 4, 5] d = 2 rotated_arr = rotate(arr, d) print(rotated_arr) # [3, 4, 5, 1, 2]"},{"prompt":"Develop a Python program to calculate the mean of a given array. 60, 54, 77, 78, 37, 35","completion":"def mean(arr): total = 0 for num in arr: total += num return total/len(arr) arr = [60, 54, 77, 78, 37, 35] print(\\"Mean: \\", mean(arr))"},{"prompt":"Generate Python code to perform an action based on a given condition. Condition: If the user input is an integer, print You have entered an integer","completion":"user_input = input(\\"Enter a number:\\") if user_input.isdigit(): print(\\"You have entered an integer.\\")"},{"prompt":"Write a python program to sort an array with n elements in ascending order. arr = [7, 5, 2, 9, 6, 4, 1, 3, 8]","completion":"def sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # The last element has already been sorted for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [7, 5, 2, 9, 6, 4, 1, 3, 8] sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (arr[i]),"},{"prompt":"Write a Python program that can generate a random 5digit number and check if that number is prime or not. Not applicable","completion":"import random def is_prime(num): for i in range(2, num): if num%i == 0: return False return True def generate_prime(): while True: num = random.randint(10000, 99999) if is_prime(num): return num if __name__ == '__main__': num = generate_prime() print(num, 'is a prime number')"},{"prompt":"Write a python script that does the following: Download the content of a website","completion":"import requests url = \\"https://example.com\\" r = requests.get(url) data = r.content with open(\\"example_website.html\\", \\"wb\\") as file: file.write(data) print(\\"File downloaded successfully.\\")"},{"prompt":"This script takes an aligned fasta file and a tab delimited file containing CDS coordinates and creates a nexus input for BEAST. To use this script, run it with the following options: f [aligned fasta file], c [tab delimited file with CDS coordinates], o [name for output nexus file]. You can also add the flag onlyCDS if you only want coding regions to be included in the output nexus file.","completion":"#!/usr/bin/env python from __future__ import division import optparse, os #This script uses an aligned fasta file and a tab deliminted file containing CDS coordinates to create a nexus input for BEAST #In version 2.0, added a flag to throw if you only want coding sequence to be included in the nexus file def main(): usage = '%prog [options]' p = optparse.OptionParser() p.add_option('-f', '--fasta', help='Aligned fasta. [None]') p.add_option('-c', '--coords', help='Tab delimited file with coordinates of CDS. Should have at least 3 tab delimited columns. The first is not used, will probably have some sort of CDS name. The next two have start and stop base positions.[None]') p.add_option('-o', '--out', help='Name for output nexus file. [None]') p.add_option('--onlyCDS', default=False, action=\\"store_true\\", help='Use this flag if you only want coding regions to be included in the output nexus file. [None]') opts, args = p.parse_args() make_beast_nexus(opts) #----------------------End of main() def make_beast_nexus(opts): fout=open(opts.out, 'w') #Read in seqs names, seqs = read_fasta_lists(opts.fasta) #Get coding coordinates coding_coords=get_coords(opts.coords) #Make concatenated coding seqs coding_seqs=['']*len(seqs) for start, end in coding_coords: for i in range(len(seqs)): coding_seqs[i]+=seqs[i][start-1:end] if opts.onlyCDS: fout.write(\\"#NEXUSn[File created using beast_nexus_prep.py using %s and %s]nnBEGIN TAXA;n\\" % (opts.fasta, opts.coords)) fout.write(\\"DIMENSIONS NTAX=%d;nnTAXLABELSn%sn;nnEND;n\\" % (len(names), 'n'.join(names))) fout.write(\\"BEGIN CHARACTERS;nDIMENSIONS NCHAR=%d;nFORMAT DATATYPE=DNA MISSING=N GAP=-;nMATRIXnn%sn;nnEND;nn\\" % (len(coding_seqs[0]), 'n'.join(['%s %s' % (names[x], coding_seqs[x]) for x in range(len(names))]))) fout.write(\\"BEGIN ASSUMPTIONS;ntcharset coding = 1-%d;nend;n\\" % (len(coding_seqs[0]))) else: #Get non-coding coordinates noncoding_coords=extrap_noncoding(coding_coords, len(seqs[0])) #Make concatenated noncoding seqs noncoding_seqs=['']*len(seqs) for start, end in noncoding_coords: for i in range(len(seqs)): noncoding_seqs[i]+=seqs[i][start-1:end] concat_seqs=[coding_seqs[i]+noncoding_seqs[i] for i in range(len(seqs))] coding_start=1 coding_end=len(coding_seqs[0]) noncoding_start=coding_end+1 noncoding_end=len(concat_seqs[0]) fout.write(\\"#NEXUSn[File created using beast_nexus_prep.py using %s and %s]nnBEGIN TAXA;n\\" % (opts.fasta, opts.coords)) fout.write(\\"DIMENSIONS NTAX=%d;nnTAXLABELSn%sn;nnEND;n\\" % (len(names), 'n'.join(names))) fout.write(\\"BEGIN CHARACTERS;nDIMENSIONS NCHAR=%d;nFORMAT DATATYPE=DNA MISSING=N GAP=-;nMATRIXnn%sn;nnEND;nn\\" % (len(concat_seqs[0]), 'n'.join(['%s %s' % (names[x], concat_seqs[x]) for x in range(len(names))]))) fout.write(\\"BEGIN ASSUMPTIONS;ntcharset coding = %d-%d;ntcharset noncoding = %d-%d;nend;n\\" % (coding_start, coding_end, noncoding_start, noncoding_end )) fout.close() def extrap_noncoding(coding_coords, seq_len): non_coords=[] #To handle noncoding at the very beginning of the sequence if coding_coords[0][0] != 1: non_coords.append((1,coding_coords[0][0]-1)) #To handle noncoding regions in between coding seqs coding_sorted=sorted(coding_coords[:]) for i in range(len(coding_sorted[:-1])): if coding_sorted[i+1][0]-coding_sorted[i][1]>0: non_coords.append((coding_sorted[i][1]+1,coding_sorted[i+1][0]-1)) #To handle non-coding at the very end of the sequence if coding_coords[-1][1] != seq_len: non_coords.append((coding_coords[-1][1]+1, seq_len)) print non_coords return non_coords def get_coords(c_file): fin=open(c_file, 'r') coords=[] for line in fin: cols=line.strip().split('t') coords.append((int(cols[1]), int(cols[2]))) return coords # Extracts data from a fasta sequence file. Returns two lists, the first holds the names of the seqs (excluding the '>' symbol), and the second holds the sequences def read_fasta_lists(file): fin = open(file, 'r') count=0 names=[] seqs=[] seq='' for line in fin: line=line.strip() if line and line[0] == '>': #indicates the name of the sequence count+=1 names.append(line[1:]) if count>1: seqs.append(seq) seq='' else: seq +=line seqs.append(seq) return names, seqs #------------------------------------->>>> if __name__ == \\"__main__\\": main()"},{"prompt":"Create an Artificial Neural Network in Python to classify flower colors from a given input.","completion":"\\"\\"\\" Creating an Artificial Neural Network in Python to classify flower colors from a given input \\"\\"\\" import numpy as np import keras from keras.models import Sequential from keras.layers import Dense, Dropout # Create the input data and labels X_train = np.array([ [0], [1], [2], [3], [4], [5], [6] ]) y_train = np.array([ [0, 0, 0, 0, 1], # Blue [0, 0, 0, 1, 0], # Green [0, 0, 1, 0, 0], # Yellow [1, 0, 0, 0, 0], # Red [0, 1, 0, 0, 0], # Orange [0, 0, 0, 0, 0], # Purple [0, 0, 0, 1, 0] # Green ]) # Create the model model = Sequential() model.add(Dense(20, activation='relu', input_shape=(1,))) model.add(Dropout(0.2)) model.add(Dense(20, activation='relu')) model.add(Dropout(0.2)) model.add(Dense(20, activation='relu')) model.add(Dense(5, activation='softmax')) # Compile and run the model model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(X_train, y_train, epochs=50, batch_size=1)"},{"prompt":"Create a neural network in Python that is able to classify Iris flower species given sepal and petal measurements.","completion":"import pandas as pd import numpy as np import tensorflow as tf from tensorflow import keras from tensorflow.keras import layers # read in data data = pd.read_csv('iris.data') # labels labels = data['species'] # features features = data.drop('species', axis=1) # normalize features features = (features - features.mean()) / features.std() # create model model = keras.Sequential() model.add(layers.Dense(units=4, activation='relu', input_shape=(4,))) model.add(layers.Dense(units=10, activation='relu')) model.add(layers.Dense(units=3, activation='softmax')) # compile model model.compile(optimizer=tf.keras.optimizers.Adam(), loss='sparse_categorical_crossentropy', metrics=['accuracy']) # train/fit model model.fit(features, labels, epochs=100, validation_split=0.2)"},{"prompt":"Design a program in Python that outputs the Nth Fibonacci number.","completion":"def nth_fibonacci_number(n): if n == 0: return 0 if n == 1: return 1 a = 0 b = 1 for i in range(2, n+1): c = a + b a = b b = c return c"},{"prompt":"Develop a program in python to generate a matrix Rows: 3 Columns: 4","completion":"def generate_matrix(rows, cols): matrix = [] for i in range(rows): row = [] for j in range(cols): row.append(0) matrix.append(row) return matrix # Example m = generate_matrix(3, 4) print(m) # Output: [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]"},{"prompt":"Given a list of integers, write a Python program to find the two numbers whose sum is closest to zero. arr = [25, 19, 3, 8, 12]","completion":"def find_sum_close_to_zero(arr): min_sum = float('inf') for i in range(len(arr)): for j in range(i+1, len(arr)): if abs(arr[i] + arr[j]) < abs(min_sum): min_sum = arr[i] + arr[j] return min_sum print(find_sum_close_to_zero(arr)) # -7"},{"prompt":"Develop a function in Python to identify the courses in a list of courses that need prerequisites. [ [Calculus I,none], [Calculus II, Calculus I], [Algebra I, none], [Algebra II, Algebra I] ]","completion":"def prerequisitesCourses(courses): requiredCourses = [] for course in courses: if course[1] != \\"none\\": requiredCourses.append(course[1]) return requiredCourses"},{"prompt":"Create a Python program which will take a number n as input and prints the nth fibonacci number in the series 8","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(8))"},{"prompt":"Create a Python program to parse and modify the following input string. ABC 123 XYZ 456","completion":"input_string = \\"ABC 123 XYZ 456\\" output_string = \\"\\" for char in input_string: if char.isalpha(): output_string += char.lower() else: output_string += char print(output_string)"},{"prompt":"Create a web scraper in Python using bs4 to collect news headlines and article summaries from a news website. Not applicable","completion":"import requests from bs4 import BeautifulSoup URL = \\"INSERT_NEWS_WEBSITE_URL_HERE\\" r = requests.get(URL) soup = BeautifulSoup(r.content, 'html5lib') headlines = soup.findAll('h2', attrs = {'class': 'entry-title'}) for headline in headlines: print(headline.get_text()) summaries = soup.findAll('div', attrs = {'class': 'entry-summary'}) for summary in summaries: print(summary.get_text())"}]`),N={name:"App",components:{PoemCard:A},data(){return{searchQuery:"",visibleCount:4,poemsData:j,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.prompt&&e.prompt.toLowerCase().includes(a)||e.completion&&e.completion.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},I={class:"search-container"},E={class:"card-container"},R={key:0,class:"empty-state"},D=["disabled"],F={key:0},z={key:1};function L(a,e,l,u,i,o){const f=_("PoemCard");return r(),n("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",I,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),g(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=s=>i.searchQuery=s),placeholder:"Search..."},null,512),[[y,i.searchQuery]]),i.searchQuery?(r(),n("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=s=>i.searchQuery="")}," ✕ ")):p("",!0)]),t("div",E,[(r(!0),n(b,null,w(o.displayedPoems,(s,h)=>(r(),v(f,{key:h,poem:s},null,8,["poem"]))),128)),o.displayedPoems.length===0?(r(),n("div",R,' No results found for "'+m(i.searchQuery)+'". ',1)):p("",!0)]),o.hasMorePoems?(r(),n("button",{key:0,class:"load-more-button",disabled:i.isLoading,onClick:e[2]||(e[2]=(...s)=>o.loadMore&&o.loadMore(...s))},[i.isLoading?(r(),n("span",z,"Loading...")):(r(),n("span",F,"See more"))],8,D)):p("",!0)])}const O=c(N,[["render",L],["__scopeId","data-v-277c2a82"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/5.md","filePath":"quotes/5.md"}'),G={name:"quotes/5.md"},W=Object.assign(G,{setup(a){return(e,l)=>(r(),n("div",null,[x(O)]))}});export{B as __pageData,W as default};
