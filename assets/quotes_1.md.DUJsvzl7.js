import{_ as c,o as r,c as n,a as t,m as d,t as m,C as _,M as g,U as y,f as p,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},P={class:"poem-container"},T={class:"review"},C={class:"review-title"},S={class:"review-content"};function q(i,e,l,u,a,o){return r(),n("div",P,[t("div",T,[t("div",C,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),d(m(l.poem.prompt),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",S,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),d(m(l.poem.completion),1)])])])}const j=c(k,[["render",q],["__scopeId","data-v-0d84fb3b"]]),N=JSON.parse(`[{"prompt":"Create a function to calculate the sum of a sequence of integers. [1, 2, 3, 4, 5]","completion":"# Python code def sum_sequence(sequence): sum = 0 for num in sequence: sum += num return sum"},{"prompt":"Generate a Python code for crawling a website for a specific type of data. website: www.example.com data to crawl: phone number","completion":"import requests import re def crawl_website_for_phone_numbers(website): response = requests.get(website) phone_numbers = re.findall('d{3}-d{3}-d{4}', response.text) return phone_numbers if __name__ == '__main__': print(crawl_website_for_phone_numbers('www.example.com'))"},{"prompt":"Create a Python list comprehension to get the squared values of a list [1, 2, 3, 5, 8, 13].","completion":"[x*x for x in [1, 2, 3, 5, 8, 13]]"},{"prompt":"Generate a python script to perform this action. Given a string, remove all the consecutive duplicates from the string. Input: AAABBCCCD","completion":"def remove_duplicates(string): result = \\"\\" prev = '' for char in string: if char != prev: result += char prev = char return result result = remove_duplicates(\\"AAABBCCCD\\") print(result)"},{"prompt":"Write a python script to generates random numbers between 0 and 9 that are divisible by 3.","completion":"def generate_random_divisible_number(): import random while True: # Generate a random number process = random.randint(0, 9) # Check if the number is divisible by 3 if process % 3 == 0: # If it is divisible, return it return process"},{"prompt":"Write a Python code to get the third largest element in a given row. [12, 13, 13, 45, 22, 99]","completion":"def third_largest(lst): if len(lst) < 3: return distinct = [] for i in lst: if i not in distinct: distinct.append(i) distinct.sort(reverse=True) return distinct[2]"},{"prompt":"Generate a REST API with Python and Flask that allows users to create, read, update, and delete records from a database. Not applicable","completion":"from flask import Flask, request from flask_sqlalchemy import SQLAlchemy app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class Record(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(120), unique=True) db.create_all() @app.route('/records', methods=['GET']) def get_records(): records = Record.query.all() return {'records':[record.name for record in records]} @app.route('/records', methods=['POST']) def create_record(): record = Record(name=request.json['name']) db.session.add(record) db.session.commit() return {'id': record.id} @app.route('/records/int:id', methods=['PUT']) def update_record(id): record = Record.query.get(id) record.name = request.json['name'] db.session.commit() return {'message': 'Record updated'} @app.route('/records/int:id', methods=['DELETE']) def delete_record(id): Record.query.filter_by(id=id).delete() db.session.commit() return {'message': 'Record deleted'} if name == 'main': app.run(debug=True)"},{"prompt":"Create a Python function that takes in a string and a list of words and returns true if the string contains all the words in the list. 'This is a test', ['test', 'this', 'is']","completion":"def contains_words(input_string, words): for word in words: if word not in input_string: return False return True print(contains_words('This is a test', ['test', 'this', 'is'])) # True"},{"prompt":"What should this Python program do? def is_palindrome(s): '''Write your code here.'''","completion":"def is_palindrome(s): '''This function returns True if the string s is a palindrome and False if it isn't.''' return s == s[::-1] # Checks if s is the same as its reverse."},{"prompt":"Create a Python program to sort and print out the elements of an array of integers. [17, 41, 5, 22, 54, 6, 29, 3, 13]","completion":"arr = [17, 41, 5, 22, 54, 6, 29, 3, 13] arr.sort() print(arr) # Output: [3, 5, 6, 13, 17, 22, 29, 41, 54]"},{"prompt":"Generate a Python program that adds two then doubles the result.","completion":"def double_add(num1, num2): return (num1 + num2) * 2"},{"prompt":"Write a python program to extract the nonvowel words in a sentence. This machine learning project is challenging.","completion":"def extract_words(sentence): non_vowel_words = [] words = sentence.split() vowels = ['a','e','i','o','u','A','E','I','O','U'] for word in words: if not any(char in vowels for char in word): non_vowel_words.append(word) return non_vowel_words"},{"prompt":"Write a Python program to calculate the average of a list of positive integers and output the result. List of positive integers: [1, 5, 6, 7, 8]","completion":"list_of_positive_integers = [1, 5, 6, 7, 8] total = sum(list_of_positive_integers) avg = total/len(list_of_positive_integers) print(\\"The average of the list of positive integers is {}\\".format(avg))"},{"prompt":"Develop a function in Python that prints out the Pascal's triangle for a given number of rows.","completion":"def pascal_triangle(n): trow = [1] y = [0] for x in range(max(n, 0)): print(trow) trow=[l+r for l,r in zip(trow + y, y + trow)] return n>=1 pascal_triangle(5)"},{"prompt":"mplement a decisionmaking algorithm for a rockpaperscissors game using Python.","completion":"# Rock, paper, scissors game! def play_game(player1, player2): # Define the winning rules rules = {'rock': 'scissors', 'scissors': 'paper', 'paper': 'rock'} if player1 == player2: return 'It is a draw!' elif rules[player1] == player2: return 'Player 1 wins!' elif rules[player2] == player1: return 'Player 2 wins!' # Get user input player1 = input('Player 1, make a choice: rock, paper, or scissors? ').lower() player2 = input('Player 2, make a choice: rock, paper, or scissors? ').lower() # Start the game and get the result result = play_game(player1, player2) print(result)"},{"prompt":"Collate a machine learning model in Python that distinguishes between cats and dogs. A dataset of 800 images of cats and dog","completion":"import numpy as np import keras from keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten from keras.models import Sequential from keras.preprocessing.image import ImageDataGenerator # Create the neural network model model = Sequential() # Input layer model.add(Conv2D(32, (3, 3), input_shape = (64, 64, 3), activation = 'relu')) # Hidden layers model.add(MaxPooling2D(pool_size = (2, 2))) model.add(Dropout(0.3)) model.add(Conv2D(64, (3, 3), activation = 'relu')) model.add(MaxPooling2D(pool_size = (2, 2))) model.add(Dropout(0.3)) model.add(Conv2D(64, (3, 3), activation = 'relu')) model.add(MaxPooling2D(pool_size = (2, 2))) model.add(Dropout(0.3)) # Output layer model.add(Flatten()) model.add(Dense(units = 128, activation = 'relu')) model.add(Dense(units = 1, activation = 'sigmoid')) # Compile the model model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy']) # Create data generator datagen = ImageDataGenerator(rescale = 1./255, shear_range = 0.2, zoom_range = 0.2, horizontal_flip = True) # Fit the model train_generator = datagen.flow_from_directory(directory = '/path/to/dataset', target_size = (64, 64), color_mode = 'rgb', class_mode = 'binary', batch_size = 32) model.fit_generator(generator = train_generator, steps_per_epoch = 800, epochs = 5, validation_data = test_generator, validation_steps = 200)"},{"prompt":"Write a Python program to find all the numbers divisible by a certain number within a certain range. int m=36, int n=74, int divisor=6","completion":"def find_numbers_divisible_by(m, n, divisor): divisible_numbers = [] for i in range(m, n+1): if i % divisor == 0: divisible_numbers.append(i) return divisible_numbers"},{"prompt":"mplement a Python function that will take two strings and return true if the first string contains the second. query = catering word = cat","completion":"def check_contains(query, word): if query.find(word) != -1: return True return False result = check_contains(query, word)"},{"prompt":"Write an algorithm in Python 3 that calculates the factorial of a number. Not applicable","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Develop a Python function to predict the class labels of a given set of data. The dataset contains 4 features: Length, Width, Height and Weight.","completion":"# Load the dataset import pandas as pd csv_url = 'http://test.test/test.csv' df = pd.read_csv(csv_url) # Split the dataset into features and label X = df.iloc[:, 0:4].values y = df.iloc[:, 4].values # Import the ML model from sklearn.tree import DecisionTreeClassifier # Create and fit the model model = DecisionTreeClassifier() model.fit(X, y) # Predict the label def predict(data): predicted_label = model.predict([data]) return predicted_label"},{"prompt":"Develop a Python program to generate random passwords that consist of 8 characters. Not applicable","completion":"import string import random def generate_password(): chars = string.ascii_letters + string.digits return ''.join(random.choice(chars) for _ in range(8)) password = generate_password() print(password)"},{"prompt":"Generate a list using a while loop in Python and appends the current number to the list.","completion":"my_list = [] num = 0 while num < 10: my_list.append(num) num += 1 print(my_list)"},{"prompt":"Write a Python program to query Twitter to get the most recent tweets from a user. username: @elonmusk","completion":"import tweepy # Authenticate to Twitter auth = tweepy.OAuthHandler(\\"CONSUMER_KEY\\", \\"CONSUMER_SECRET\\") auth.set_access_token(\\"ACCESS_TOKEN\\", \\"ACCESS_TOKEN_SECRET\\") # Create API object api = tweepy.API(auth) # Get the most recent tweets from the given user tweets = api.user_timeline(screen_name=\\"@elonmusk\\") for tweet in tweets: print(tweet.text)"},{"prompt":"Create a Python neural network model that takes in a given trajectory of stock prices and predicts the stock price for the next day. [10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]","completion":"import numpy as np import tensorflow as tf def create_model(): model = tf.keras.Sequential([ tf.keras.layers.Dense(64, activation='relu', input_shape=(7, )), tf.keras.layers.Dense(1) ]) model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy']) return model if __name__ == \\"__main__\\": model = create_model() input_data = np.array([[10, 10.4, 10.5, 10.6, 10.7, 10.9, 11]]) predictions = model.predict(input_data) print(f\\"Predicted stock price for the next day is: {predictions[0][0]}\\")"},{"prompt":"Create a way to encrypt a message using a key in Python. message = Hello world! key = secret","completion":"import hashlib def encrypt(message, key): encrypted_msg = \\"\\" for char in message: encrypted_msg += chr(ord(char) + ord(key[0])) return encrypted_msg encrypted_msg = encrypt(message, key) print(encrypted_msg)"},{"prompt":"Create a function in Python that takes two parameters and prints out the larger of them. parameter_1 = 7 parameter_2 = 9","completion":"def printMax(parameter_1, parameter_2): if parameter_1 > parameter_2: print(parameter_1) else: print(parameter_2)"},{"prompt":"Rewrite the following Python code by introducing list comprehensions. even_numbers = [] for i in range(1,21): if i % 2 == 0: even_numbers.append(i)","completion":"even_numbers = [i for i in range(1, 21) if i % 2 == 0]"},{"prompt":"Develop an algorithm in Python to print Fibonacci series up to a given number.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b n = int(input(\\"Enter a number: \\")) print(fibonacci(n))"},{"prompt":"Make the following code snippet into a function in Python3 capable of solving Any Sudoku puzzle board = [ [7,8,0,4,0,0,1,2,0], [6,0,0,0,7,5,0,0,9], [0,0,0,6,0,1,0,7,8], [0,0,7,0,4,0,2,6,0], [0,0,1,0,5,0,9,3,0], [9,0,4,0,6,0,0,0,5], [0,7,0,3,0,0,0,1,2], [1,2,0,0,0,7,4,0,0], [0,4,9,2,0,6,0,0,7] ]","completion":"def solve_sudoku(board): # Utility function to find vacant cells # Returns a boolean def find_vacant_cell(board, l): for row in range(9): for col in range(9): if board[row][col] == 0: l[0] = row l[1] = col return True return False # Utility function to check if a number # is not currently placed in a particular # row, column and block def is_safe(board, row, col, num): # Check if 'num' is not already placed # in current row, current column # and current 3x3 box for i in range(9): # Check the rows if(board[row][i] == num): return False # Check the columns if(board[i][col] == num): return False # Check the 3x3 boxes if(board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num): return False return True # Solve the sudoku def solve(board): # 'l' is a list variable that keeps # the record of row and col in # find_vacant_cell function l = [0, 0] # If there is no unassigned location, # we are done if (not find_vacant_cell(board, l)): return True # Assigning the list values row = l[0] col = l[1] # consider digits 1 to 9 for num in range(1, 10): # if it is a safe position if (is_safe(board, row, col, num)): # make tentative assignment board[row][col] = num # return if succcess if (solve(board)): return True # failure, unmake and try again board[row][col] = 0 # trigger backtracking return False #Driver Program if (solve(board)): for row in board: print(row) else: print(\\"No solution\\")"},{"prompt":"Write a function in Python to calculate the sum of the digits in a given number.","completion":"def sum_digits(num): total = 0 while num > 0: digit = num % 10 total += digit num = num // 10 return total"},{"prompt":"Take the list of people below and create a Python dictionary with the names as keys and the ages as values. John (20), Jane (40), Alex (18), Peter (45)","completion":"people_dict = {'John': 20, 'Jane': 40, 'Alex': 18, 'Peter': 45}"},{"prompt":"Develop a Python program to clearly understand the concept of recursion.","completion":"# This program is to understand recursion in Python. # Define a recursive function to calculate the factorial of a number def factorial(n): if n == 1: return 1 else: return n * factorial(n - 1) # Calculate factorial of number 5 result = factorial(5) print(\\"Factorial of 5 is \\", result) # Output: Factorial of 5 is 120"},{"prompt":"Generate a random 6digits number in Python.","completion":"import random number = random.randint(100000, 999999) print(number)"},{"prompt":"Create a sorting algorithm in Python to sort strings by their length. [cat, dog, apple, banana]","completion":"def sort_by_length(strings): for i in range(len(strings) - 1): for j in range(i + 1, len(strings)): if len(strings[i]) > len(strings[j]): strings[i], strings[j] = strings[j], strings[i] return strings unsorted_list = [\\"cat\\", \\"dog\\", \\"apple\\", \\"banana\\"] sorted_list = sort_by_length(unsorted_list) print(sorted_list)"},{"prompt":"Write a Python function to get the maximum and minimum values in a given list. Not applicable","completion":"def get_max_min(lst): min_value = lst[0] max_value = lst[0] for i in range(1, len(lst)): if lst[i] > max_value: max_value = lst[i] if lst[i] < min_value: min_value = lst[i] return (min_value, max_value)"},{"prompt":"Create a for loop in Python to iterate over a list of numbers and print only the even numbers. my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"for num in my_list: if num % 2 == 0: print(num)"},{"prompt":"Can you suggest a pure python alternative to declaring a Float32 array with numbers from 0 to 10?","completion":"myArray = [float(i) for i in range(0,11)]"},{"prompt":"Construct a neural network model in Python to classify the MNIST data set correctly.","completion":"import keras # Input layer input_layer = keras.layers.Input(shape=(784,)) # Hidden layer hidden_layer = keras.layers.Dense(128, activation='relu')(input_layer) # Output layer output_layer = keras.layers.Dense(10, activation='softmax')(hidden_layer) # Model model = keras.Model(inputs=input_layer, outputs=output_layer) # Compile model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"},{"prompt":"Create a machine learning classifier in Python for categorizing user input.","completion":"from sklearn.naive_bayes import MultinomialNB # Assuming an input string is passed to the function as a parameter def classify_string(input_string): # Feature extraction and transformation from string to numeric features = . . . # Create an instance of the classifier model = MultinomialNB() # Train the classifier on the data model.fit(data, target) # Make a prediction based on the input prediction = model.predict([features]) # Return the prediction return prediction"},{"prompt":"mplement a algorithm in Python for sorting two large lists A and B. The algorithm should take the first element of list A and compare it with the first element of list B. If it is greater, then it should add the element to the result list and move the pointer of B to the next element. If the element of A is smaller, the pointer should move to the next element of A, and so on. A = [3, 6, 8, 10, 11] B = [2, 5, 7, 12]","completion":"def merge_sort(A, B): result = [] i, j = 0, 0 # Compare elements and add lower one to result while i < len(A) and j < len(B): if A[i] < B[j]: result.append(A[i]) i += 1 else: result.append(B[j]) j += 1 # Add remaining elements result += A[i:] result += B[j:] return result #Test the algorithm A = [3, 6, 8, 10, 11] B = [2, 5, 7, 12] print(merge_sort(A, B)) # Output: [2, 3, 5, 6, 7, 8, 10, 11, 12]"},{"prompt":"Develop a program in Python for finding the longest common subsequence between two strings. ABCDF, ABECD","completion":"def longest_common_subsequence(string1, string2): table = [[0]*(len(string2)+1) for _ in range(len(string1)+1)] for i, x in enumerate(string1): for j, y in enumerate(string2): if x == y: table[i+1][j+1] = table[i][j]+1 else: table[i+1][j+1] = max(table[i+1][j], table[i][j+1]) result = \\"\\" x, y = len(string1), len(string2) while x != 0 and y != 0: if table[x][y] == table[x-1][y]: x -= 1 elif table[x][y] == table[x][y-1]: y -= 1 else: result = string1[x-1] + result x -= 1 y -= 1 return result result = longest_common_subsequence(\\"ABCDF\\", \\"ABECD\\") print(result)"},{"prompt":"Convert a given Python program to a C# program. def power(x, y): if y == 0: return 1 else: return x * power(x, y 1)","completion":"public int Power(int x, int y) { if (y == 0) { return 1; } else { return x * Power(x, y - 1); } }"},{"prompt":"Rewrite the following code in a different programming language. // JavaScript code let arr = [1, 2, 3, 4, 5]; arr.forEach(item => { console.log(item * 2); });","completion":"# Python code arr = [1, 2, 3, 4, 5] for item in arr: print(item * 2)"},{"prompt":"Create a TicTacToe game in Python.","completion":"class TicTacToe: def __init__(self): self.board = [['_' for _ in range(3)] for _ in range(3)] self.turn = 'x' def display(self): for row in self.board: print(' '.join(row)) def check_win(self): board = self.board # check if the player with the current turn has a row of three for row in self.board: if row.count(self.turn) == 3: return True # check if the player with the current turn has a column of three for col in range(3): if board[0][col] == board[1][col] and board[1][col] == board[2][col] and board[2][col] == self.turn: return True # check for the two diagonals if board[0][0] == board[1][1] and board[1][1] == board[2][2] and board[2][2] == self.turn: return True if board[0][2] == board[1][1] and board[1][1] == board[2][0] and board[2][0] == self.turn: return True return False"},{"prompt":"Create a Python program to store the strings Hello and World and print them in the same line.","completion":"string1 = \\"Hello\\" string2 = \\"World\\" print(string1 + \\" \\" + string2)"},{"prompt":"Use the inputs provided, write Python code to check if two integers are equal. First Integer: 10 Second Integer: 10","completion":"if int(10) == int(10): print(\\"The two integers are equal\\") else: print(\\"The two integers are not equal\\")"},{"prompt":"Create a Python program for analyzing the sentiment of given text. The program should categorize the text into positive, negative, and neutral sentiments. Not applicable","completion":"import nltk from nltk.tokenize import sent_tokenize from nltk.classify import NaiveBayesClassifier def analyze_sentiment(text): sents = sent_tokenize(text) neg = 0 pos = 0 for sentence in sents: sentiment_analysis = NaiveBayesClassifier.classify(sentence) if sentiment_analysis == 'neg': neg += 1 if sentiment_analysis == 'pos': pos += 1 if neg > pos: sentiment = 'negative' elif pos > neg: sentiment = 'positive' else: sentiment = 'neutral' return sentiment # End analyze sentiment definition"},{"prompt":"Create a Python program to calculate the average of five numbers entered by a user.","completion":"nums = [] for i in range(5): nums.append(int(input(\\"Please enter number: \\"))) #Calculate average average = sum(nums) / len(nums) #Print average print(\\"The average is \\", average)"},{"prompt":"Write a Python program to generate a Markov chain given a text input. Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, \`and what is the use of a book,' thought Alice \`without pictures or conversation?'","completion":"import random def generateMarkov(text): words = text.split(' ') markovChain = {} for i in range(len(words) - 2): current = words[i] next = words[i + 1] if current in markovChain: if next in markovChain[current]: markovChain[current][next] += 1 else: markovChain[current][next] = 1 else: markovChain[current] = {next: 1} generatedText = \\"\\" current = random.choice(list(markovChain)) generatedText += current for i in range(100): choices = markovChain[current] choices = [ key for key, value in choices.items() for i in range(value) ] try: current = random.choice(choices) generatedText += \\" \\" + current except: break return generatedText text = 'Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, \`and what is the use of a book,' thought Alice \`without pictures or conversation?' print(generateMarkov(text))"},{"prompt":"Write a Python program to determine if a number provided by the user is prime or not. 17","completion":"# Ask the user for a number num = int(input('Enter a number: ')) # Set initial values is_prime = True # Check for prime for i in range(2, num): if num % i == 0: is_prime = False break # Output result if is_prime: print(f'{num} is a prime number.') else: print(f'{num} is not a prime number.')"},{"prompt":"Write a Python program to calculate the difference between the lowest and highest value for an array of integers. [12, 24, 3, 8, 1]","completion":"def diffHighestLowest(arr): lowest = min(arr) highest = max(arr) return highest - lowest arr = [12, 24, 3, 8, -1] difference = diffHighestLowest(arr) print(difference) # 25"},{"prompt":"Rewrite the following code snippet to find prime numbers using Python. Not applicable","completion":"def is_prime(num): # Iterate from 2 to the square root of the number for i in range(2, int(num ** 0.5) + 1): if num % i == 0: return False return True # Iterate from 2 to n for n in range(2, n+1): # Check if the number is prime if is_prime(n): print(n)"},{"prompt":"Write a Python program to create a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.","completion":"d = {} for i in range(1, 16): d[i] = i**2 print(d)"},{"prompt":"Write a Python program to calculate the sum of all even numbers less than or equal to n.","completion":"def sum_of_even_numbers(n): result = 0 for i in range(2, n+1, 2): result += i return result"},{"prompt":"Create a Python script to calculate the Fibonacci numbers up to a given number.","completion":"def Fibonacci(n): if n==0: return 0 if n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2)"},{"prompt":"Write a Python program to calculate the total cost of a shopping cart. The program should consider the item prices, quantity, shipping cost, and any applicable taxes. [ {name: widget, price: 10, quantity: 5 }, {name: thingy, price: 7, quantity: 3 }, {name: doodad, price: 5, quantity: 2 }, ] Shipping cost: 7.50 Tax rate: 9.5%","completion":"items = [ {\\"name\\": \\"widget\\", \\"price\\": 10, \\"quantity\\": 5 }, {\\"name\\": \\"thingy\\", \\"price\\": 7, \\"quantity\\": 3 }, {\\"name\\": \\"doodad\\", \\"price\\": 5, \\"quantity\\": 2 }, ] taxRate = 0.095 shippingCost = 7.50 totalCost = 0 for item in items: totalCost += item['price'] * item['quantity'] totalCost += totalCost * taxRate totalCost += shippingCost print('Total cost:', totalCost)"},{"prompt":"Python, create a function to find the maximum value within a nested dictionary. sample_dict = { key1: { value1: 10, value2: 20 }, key2: { value3: 40 }, }","completion":"def findMaxValue(dict): max_val = None for key, value in dict.items(): if isinstance(value, dict): max_val = max(findMaxValue(value), max_val) else: max_val = max(value, max_val) return max_val print(findMaxValue(sample_dict))"},{"prompt":"Write a function in Python that returns an object of the following time and date: Sunday March 7 5:30 PM.","completion":"from datetime import datetime def get_date_time(): dt = datetime(year=2021, month=3, day=7, hour=17, minute=30) return dt date_time = get_date_time() print(date_time) # will output 2021-03-07 17:30:00"},{"prompt":"Generate a Python program to perform matrix multiplication on two given matrices.","completion":"def matrix_multiplication(A, B): rows_A = len(A) cols_A = len(A[0]) rows_B = len(B) cols_B = len(B[0]) result = [[0 for i in range(cols_B)] for j in range(rows_A)] for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"prompt":"Write a Python script to read an array from the user and then determine the mean and median of the array. arr = [10, 15, 20, 25, 30, 35]","completion":"def mean_median(arr): arr_sum = 0 for i in range(len(arr)): arr_sum += arr[i] mean = arr_sum/len(arr) arr = sorted(arr) if len(arr) % 2 != 0: median = arr[floor(len(arr)/2)] else: median = (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2 return mean, median mean, median = mean_median(arr) print(\\"Mean =\\", mean) print(\\"Median =\\", median)"},{"prompt":"Create an algorithm in Python to check whether an array has even or odd number of elements. [1, 2, 3, 4]","completion":"def is_array_even(arr): if len(arr)%2 == 0: return True else: return False"},{"prompt":"mplement a Python function to calculate the Gini coefficient of a given dataset. [2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]","completion":"def gini(x): \\"\\"\\"Calculate Gini Coefficient of a given dataset.\\"\\"\\" # calculate the frequency of each item in x x_value_counts = x.value_counts().sort_index() # calculate the cumulative sum of x_value_counts x_cum_sum = x_value_counts.cumsum() # calculate the Lorenz values n = len(x) lorenz = x_cum_sum / n lorenz = np.insert(lorenz, 0, 0) # add 0 to the beginning of array # calculate the Gini Coefficient width = lorenz[:-1] - lorenz[1:] gini_coef = (1 / n) * sum(width * (lorenz[1:] + lorenz[:-1])) return gini_coef if __name__ == '__main__': x = np.array([2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,21]) gini_coef = gini(x) print(gini_coef) # should print 0.605"},{"prompt":"Generate a neural network model with TensorFlow and Python for classifying handwritten digits from the MNIST dataset. Not applicable","completion":"import tensorflow as tf # Import MNIST data from tensorflow.examples.tutorials.mnist import input_data mnist = input_data.read_data_sets(\\"/tmp/data\\", one_hot=True) # Parameters learning_rate = 0.001 training_epochs = 15 batch_size = 100 display_step = 1 # Network Parameters n_hidden_1 = 256 # 1st layer number of neurons n_hidden_2 = 256 # 2nd layer number of neurons n_input = 784 # MNIST data input (img shape: 28*28) n_classes = 10 # MNIST total classes (0-9 digits) # tf Graph input X = tf.placeholder(\\"float\\", [None, n_input]) Y = tf.placeholder(\\"float\\", [None, n_classes]) # Store layers weight & bias weights = { 'h1': tf.Variable(tf.random_normal([n_input, n_hidden_1])), 'h2': tf.Variable(tf.random_normal([n_hidden_1, n_hidden_2])), 'out': tf.Variable(tf.random_normal([n_hidden_2, n_classes])) } biases = { 'b1': tf.Variable(tf.random_normal([n_hidden_1])), 'b2': tf.Variable(tf.random_normal([n_hidden_2])), 'out': tf.Variable(tf.random_normal([n_classes])) } # Create model def multilayer_perceptron(x): # Hidden fully connected layer with 256 neurons layer_1 = tf.add(tf.matmul(x, weights['h1']), biases['b1']) # Hidden fully connected layer with 256 neurons layer_2 = tf.add(tf.matmul(layer_1, weights['h2']), biases['b2']) # Output fully connected layer with a neuron for each class out_layer = tf.matmul(layer_2, weights['out']) + biases['out'] return out_layer # Construct model logits = multilayer_perceptron(X) # Define loss and optimizer loss_op = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits( logits=logits, labels=Y)) optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate) train_op = optimizer.minimize(loss_op) # Initializing the variables init = tf.global_variables_initializer() # Train model model = tf.Session() model.run(init) # Training cycle for epoch in range(training_epochs): avg_cost = 0. total_batch = int(mnist.train.num_examples/batch_size) # Loop over all batches for i in range(total_batch): batch_x, batch_y = mnist.train.next_batch(batch_size) # Run optimization op (backprop) and cost op (to get loss value) _, c = model.run([train_op, loss_op], feed_dict={X: batch_x, Y: batch_y}) # Compute average loss avg_cost += c / total_batch # Display logs per epoch step if epoch % display_step == 0: print(\\"Epoch:\\", '%04d' % (epoch+1), \\"cost=\\", \\"{:.9f}\\".format(avg_cost)) print(\\"Optimization Finished!\\") # Test model pred = tf.nn.softmax(logits) # Apply softmax to logits correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(Y, 1)) # Calculate accuracy accuracy = tf.reduce_mean(tf.cast(correct_prediction, \\"float\\")) print(\\"Accuracy:\\", accuracy.eval({X: mnist.test.images, Y: mnist.test.labels}, model))"},{"prompt":"Write a function to generate a prime number sequence using Python.","completion":"def generate_prime_numbers(n): primes = [True for i in range(n+ 1)] p = 2 while (p * p <= n): if (primes[p] == True): for i in range(p * p, n + 1, p): primes[i] = False p += 1 primes[0] = False primes[1] = False for p in range(n + 1): if primes[p]: print(p)"},{"prompt":"Write a Python program that removes duplicates from a list. Input List: [1, 2, 3, 4, 3, 2, 1]","completion":"def remove_duplicates(my_list): return list(dict.fromkeys(my_list)) my_list = [1, 2, 3, 4, 3, 2, 1] print(remove_duplicates(my_list)) # output [1, 2, 3, 4]"},{"prompt":"Generate a Python script to sort the given list of words. ['bubble', 'selection', 'quicksort', 'insertion']","completion":"# function to sort the given list of words def sort_words(words): # sort the list of words in alphabetical order words.sort() # print the sorted list of words print(words) # driver code words = ['bubble', 'selection', 'quicksort', 'insertion'] sort_words(words) # output ['bubble', 'insertion', 'quicksort', 'selection']"},{"prompt":"Generate a function for calculating the average of a list of numbers in Python. Not applicable","completion":"def avg_list(lst): sum = 0 count = 0 for i in lst: sum += i count += 1 avg = sum / count return avg"},{"prompt":"Generate a Python program that compares two binary trees to check if they are similar.","completion":"class TreeNode: def __init__(self, x): self.val = x self.left = None self.right = None def are_similar(root1, root2): if root1 is None and root2 is None: return True if (root1 and root2) is None or (root1 or root2) is None: return False if root1.val != root2.val: return False else: return are_similar(root1.left, root2.left) and are_similar(root1.right, root2.right)"},{"prompt":"Create a program for solving a quadratic equation in Python. Equation: x2 + 3x 4 = 0","completion":"import math def solveQuadratic(a, b, c): discriminant = (b**2) - (4*a*c); # If discriminant is negative there are no real roots. if (discriminant < 0): return { \\"status\\": false, \\"roots\\": [] } # If discriminant is zero, there is only one real roots. elif (discriminant == 0): x = -b/(2*a) return { \\"status\\": true, \\"roots\\": [x] } # Otherwise there are 2 real roots else: x1 = (-b + math.sqrt(discriminant)) / (2*a); x2 = (-b - math.sqrt(discriminant)) / (2*a); return { \\"status\\": true, \\"roots\\": [x1, x2] } a = 1 b = 3 c = -4 print(solveQuadratic(a, b, c)) #{'status': True, 'roots': [-4.0, 1.0]}"},{"prompt":"Construct a Python code for adding two matrices.","completion":"def add_matrix(matrix1, matrix2): if len(matrix1) != len(matrix2): return 'Matrices not compatible' if len(matrix1[0]) != len(matrix2[0]): return 'Matrices not compatible' rows = len(matrix1) cols = len(matrix1[0]) result = [[sum(row) for row in zip(*size)] for size in zip(matrix1, matrix2)] return result"},{"prompt":"Generate a Python program which takes a string as input and prints all of its substrings in order from longest to shortest length.","completion":"def substring_in_order(string): result = [] n = len(string) for l in range(n, 0, -1): for i in range(n-l + 1): result.append(string[i:i+l]) return result string = input(\\"Enter the string: \\") print (\\"All substrings in order from longest to shortest:\\") print (substring_in_order(string))"},{"prompt":"Generate a Python function which takes an array and a value and returns the index at which this value is present in the array. arr = [2, 5, 9, 15], x = 5","completion":"def find_index(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1 print(find_index(arr, x))"},{"prompt":"Develop a Python program to find the common elements in two lists. List 1: [3, 9, 15, 21, 27] List 2: [21, 7, 13, 29, 31]","completion":"common_elements = [] # using loop for i in [3, 9, 15, 21, 27]: for j in [21, 7, 13, 29, 31]: if i == j: common_elements.append(i) # printing common elements print(common_elements) # Output: [21]"},{"prompt":"Create a Python program that takes in two strings and returns an integer indicating the number of common substrings between the two strings. s1 = abcd, s2 = bae","completion":"def num_common_substrings(s1, s2): count = 0 for i in range(len(s1)): for j in range(len(s2)): if s1[i] == s2[j]: count += 1 return count result = num_common_substrings(\\"abcd\\", \\"bae\\") print(result)"},{"prompt":"Generate a Python program to convert a string to its lowercase version.","completion":"def str_to_lower(string): new_string = \\"\\" for char in string: new_string += char.lower() return new_string"},{"prompt":"Can you generate a function in Python that shuffles a given list?","completion":"import random def shuffle_list(list): # Initialize the random number generator random.seed() # Shuffle the list random.shuffle(list) # Return the list return list"},{"prompt":"Write a Python function to validate an a list of emails. The function should return a boolean indicating whether a given email address is valid. mail_list = [example.user@gmail.com, bad@example]","completion":"def validate_mail_list(mail_list): for mail in mail_list: if not re.match(\\"[^@]+@[^@]+.[^@]+\\", mail): return False return True"},{"prompt":"Create a Python script that will perform several simple math operations. The script should accept two integers as inputs and output the results of the following operations: addition, subtraction, multiplication, division, and modulo. int1 = 10 int2 = 5","completion":"int1 = 10 int2 = 5 addition = int1 + int2 print('Addition:', addition) subtraction = int1 - int2 print('Subtraction:', subtraction) multiplication = int1 * int2 print('Multiplication:', multiplication) division = int1 / int2 print('Division:', division) modulo = int1 % int2 print('Modulo:', modulo)"},{"prompt":"Create a Python program to perform sentiment analysis on product reviews. The program should use natural language processing techniques like tokenization and ngrams to generate features for sentiment analysis and use a classification model to assign sentiments to the reviews. Not applicable","completion":"import numpy as np import pandas as pd import nltk from nltk.tokenize import word_tokenize import matplotlib.pyplot as plt from nltk.corpus import stopwords from nltk.stem import WordNetLemmatizer from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import classification_report # Read in the data data = pd.read_csv('reviews.csv') # Tokenise the texts data['tokenised'] = data['review'].apply(word_tokenize) # Remove stopwords stop_words = set(stopwords.words('english')) data['filtered'] = data['tokenised'].apply(lambda x: [val for val in x if val not in stop_words]) # Normalize words wordnet_lemmatizer = WordNetLemmatizer() data['normalised'] = data['filtered'].apply(lambda x: [wordnet_lemmatizer.lemmatize(val) for val in x]) # Generate features using CountVectorizer cv = CountVectorizer() data['features'] = cv.fit_transform(data['normalised'].astype('str')).toarray() # Split into training and test sets X = data['features'] y = data['sentiment'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train model model = MultinomialNB(alpha=0.1) model.fit(X_train, y_train) # Predict using the test set predictions = model.predict(X_test) # Generate a classification report report = classification_report(y_test, predictions) print(report)"},{"prompt":"Write a python program to clean up a list of emails and put them into a new list. The original list of emails: ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example']","completion":"original_list = ['bob@example.com', 'alice+bob@cafe.com', 'bob@gmail.com.uk', 'bob+alice@example'] clean_list = [] for email in original_list: email_without_plus = email.split('+')[0] email_without_dot_uk = email_without_plus.split('.uk')[0] clean_list.append(email_without_dot_uk) print(clean_list) # prints ['bob@example.com', 'alice@cafe.com', 'bob@gmail.com', 'bob@example']"},{"prompt":"Generate sample data for a web application using Python's faker library. The output should contain three columns of data: name, email, and age. Not applicable","completion":"from faker import Faker fake = Faker() for _ in range(10): print(fake.name(), fake.email(), fake.random_int(min=18, max=60))"},{"prompt":"Create a Python algorithm to classify positive and negative sentiment in tweets.","completion":"def sentiment_analysis(tweets): # Initialize a list to store the result results = [] # Iterate through each tweet for tweet in tweets: # Clean the tweet tweet = preprocessing(tweet) # Vectorize the tweet and obtain the prediction tweet_vector = vectorize(tweet) prediction = predict_sentiment(tweet_vector) # Append the prediction to the result list if prediction == 1: results.append(\\"Positive\\") elif preduction == 0: results.append(\\"Negative\\") return results"},{"prompt":"Parse the given URL and print out the protocol, domain name, and path using Python. https://www.example.com/path/to/file","completion":"import urllib.parse url = 'https://www.example.com/path/to/file' parsed_url = urllib.parse.urlparse(url) # Get the protocol protocol = parsed_url.scheme # Get the domain name domain_name = parsed_url.netloc # Get the path path = parsed_url.path # Print the results print('Protocol:', protocol) print('Domain name:', domain_name) print('Path:', path) # Output: # Protocol: https # Domain name: www.example.com # Path: /path/to/file"},{"prompt":"Write a recursive Python function to generate Fibonacci numbers.","completion":"def fibonacci(n): if n == 1 or n == 2: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2) print(fibonacci(10))"},{"prompt":"Create a Kubernetes pod setup that publishes a tweet every 5 minutes. Not applicable","completion":"apiVersion: v1 kind: Pod metadata: name: tweet-publisher spec: containers: - name: tweet-publisher image: <INSERT_PUBLIC_PULLABLE_IMAGE_PATH_HERE> command: - sh - -c - 'crontab -lcrontab && while true; do python publish-tweet.py && crontab -l | { cat; echo \\"*/5 * * * * python publish-tweet.py\\"; } | crontab -; sleep 31622400; done' volumeMounts: - mountPath: /crontab/crontab subPath: crontab name: cronmount volumes: - name: cronmount configMap: name: tweet-cron --- apiVersion: v1 kind: ConfigMap metadata: name: tweet-cron data: crontab: \\"* * * * * python publish-tweet.py\\""},{"prompt":"Write a code to generate a twodimensional array with zeros shapes in Python Row = 3, Column = 3","completion":"\\"\\"\\" Write a code to generate a two-dimensional array with zeros shapes in Python \\"\\"\\" def generate_zeros_array(row,col): return [[0] * col for _ in range(row)] # Example row = 3 col = 3 array = generate_zeros_array(row, col) print(array) # Output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]]"},{"prompt":"Write a Python code to create a dictionary which contains a data structrue in the form of [x:x^2] where x is the key and x^2 is the value. numbers = [1, 2, 3, 4, 5]","completion":"numbers = [1, 2, 3, 4, 5] dict_numbers = {num: num**2 for num in numbers} print(dict_numbers)"},{"prompt":"Create a Python script to print the numbers from 1 to 50, but for multiples of 3 print Fizz instead of the number, for multiples of 5 print Buzz instead of the number and for multiples of both 3 and 5 print FizzBuzz. Not applicable","completion":"for i in range(1, 51): if i % 3 == 0 and i % 5 == 0: print(\\"FizzBuzz\\") elif i % 3 == 0: print(\\"Fizz\\") elif i % 5 == 0: print(\\"Buzz\\") else: print(i)"},{"prompt":"Create a Python program to calculate the square root of a userdefined positive number. n = 100","completion":"import math n = 100 #Calculate the square root of a number square_root = math.sqrt(n) print(f'Square root of {n} is {square_root}')"},{"prompt":"Create a Python class called Rectangle to represent a twodimensional rectangle with a length and width.","completion":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def area(self): return self.length * self.width"},{"prompt":"Create a data visualization dashboard in Python using Matplotlib.","completion":"import matplotlib import matplotlib.pyplot as plt # Generate the data for the dashboard x = [1,2,3,4,5] y = [10,25,30,50,80] # Create the figure and set the size fig = plt.figure(figsize=(10,6)) # Configure the plot plt.plot(x, y, color='green', marker='o', linestyle='dashed', linewidth=2, markersize=12) plt.title(\\"My Data Visualization Dashboard\\") plt.xlabel('X-axis') plt.ylabel('Y-axis') # Show the plot plt.show()"},{"prompt":"Edit the following python code to prompt the user to enter the value of radius to calculate the area of a circle.","completion":"# Calculate area of a circle Pi = 3.14 # Get radius from user radius = float(input(\\"Please enter the radius of the circle: \\")) # Calculate the circle area area = Pi*radius**2 # Print the area print(\\"The area of the circle is:\\", area)"},{"prompt":"Create a Python algorithm to identify the longest word in a sentence. “The rain in Spain stays mainly in the plain.”","completion":"def find_longest_word(sentence): words = sentence.split() # initialise longest_word variable with 0 longest_word = 0 for word in words: if len(word) > longest_word: longest_word = len(word) longest_word_str = word return longest_word_str"},{"prompt":"Write a Python script that can convert degrees Fahrenheit to degrees Celsius.","completion":"def FahrenheitToCelsius(temp_fahrenheit): temp_celsius = (temp_fahrenheit - 32) * 5/9 return temp_celsius"},{"prompt":"Generate a Python function that checks if a given number is an Armstrong number.","completion":"def is_armstrong_number(num): n = len(str(num)) # initialize sum temp = num sum_of_digits = 0 # find sum of nth power of individual digits while temp > 0: digit = temp % 10 sum_of_digits += digit ** n temp //= 10 # if num is equal to sum_of_digits then the number is an Armstrong number if num == sum_of_digits: return True else: return False"},{"prompt":"Write a code in Python to print the following pattern:","completion":"for i in range(5): for j in range(i+1): print(\\"*\\", end=\\"\\") print(\\"\\") for i in range(5, 0, -1): for j in range(i): print(\\"*\\", end=\\"\\") print(\\"\\")"},{"prompt":"Program a web scraper in Python to extract the latest stock prices from specific websites. [AAPL stocks, MSFT stocks, FB stocks, GOOG stocks]","completion":"import requests from bs4 import BeautifulSoup # input stocks = [\\"AAPL stocks\\", \\"MSFT stocks\\", \\"FB stocks\\", \\"GOOG stocks\\"] # process def get_stock_price(stock): url = f\\"https://finance.yahoo.com/quote/{stock}\\" response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') price = soup.find('div', {'class': 'My(6px) Pos(r) smartphone_Mt(6px)'}).find('span').text return price # output for stock in stocks: price = get_stock_price(stock) print(f'The price of {stock} is {price}.')"},{"prompt":"The code provides Python wrappers around TensorFlow ops for decoding LibSVM input to tensors. To use it, call the \`decode_libsvm\` function with the following arguments: \`input\` (a \`Tensor\` of type \`string\`), \`num_features\` (an \`int\` that is \`>= 1\`), \`dtype\` (an optional \`tf.DType\` from: \`tf.float32, tf.float64, tf.int32, tf.int64\`. Defaults to \`tf.float32\`), \`label_dtype\` (an optional \`tf.DType\` from: \`tf.float32, tf.float64, tf.int32, tf.int64\`. Defaults to \`tf.int64\`), and \`name\` (a name for the operation, optional). The function returns a tuple of \`Tensor\` objects \`(label, feature_indices, feature_values, feature_shape)\`, where \`label\` is a \`Tensor\` of type \`label_dtype\`, \`feature_indices\` is a \`Tensor\` of type \`int64\`, \`feature_values\` is a \`Tensor\` of type \`dtype\`, and \`feature_shape\` is a \`Tensor\` of type \`int64\`.","completion":"\\"\\"\\"Python wrappers around TensorFlow ops. This file is MACHINE GENERATED! Do not edit. Original C++ source file: libsvm_ops.cc \\"\\"\\" import collections as _collections import six as _six from tensorflow.python import pywrap_tensorflow as _pywrap_tensorflow from tensorflow.python.eager import context as _context from tensorflow.python.eager import core as _core from tensorflow.python.eager import execute as _execute from tensorflow.python.framework import dtypes as _dtypes from tensorflow.python.framework import errors as _errors from tensorflow.python.framework import tensor_shape as _tensor_shape from tensorflow.core.framework import op_def_pb2 as _op_def_pb2 # Needed to trigger the call to _set_call_cpp_shape_fn. from tensorflow.python.framework import common_shapes as _common_shapes from tensorflow.python.framework import op_def_registry as _op_def_registry from tensorflow.python.framework import ops as _ops from tensorflow.python.framework import op_def_library as _op_def_library from tensorflow.python.util.tf_export import tf_export _decode_libsvm_outputs = [\\"label\\", \\"feature_indices\\", \\"feature_values\\", \\"feature_shape\\"] _DecodeLibsvmOutput = _collections.namedtuple( \\"DecodeLibsvm\\", _decode_libsvm_outputs) @tf_export('decode_libsvm') def decode_libsvm(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None): r\\"\\"\\"Convert LibSVM input to tensors. The output consists of a label and a feature tensor. The shape of the label tensor is the same as input and the shape of the feature tensor is \`[input_shape, num_features]\`. Args: input: A \`Tensor\` of type \`string\`. Each string is a record in the LibSVM. num_features: An \`int\` that is \`>= 1\`. The number of features. dtype: An optional \`tf.DType\` from: \`tf.float32, tf.float64, tf.int32, tf.int64\`. Defaults to \`tf.float32\`. label_dtype: An optional \`tf.DType\` from: \`tf.float32, tf.float64, tf.int32, tf.int64\`. Defaults to \`tf.int64\`. name: A name for the operation (optional). Returns: A tuple of \`Tensor\` objects (label, feature_indices, feature_values, feature_shape). label: A \`Tensor\` of type \`label_dtype\`. A tensor of the same shape as input. feature_indices: A \`Tensor\` of type \`int64\`. A 2-D int64 tensor of dense_shape [N, ndims]. feature_values: A \`Tensor\` of type \`dtype\`. A 1-D tensor of any type and dense_shape [N]. feature_shape: A \`Tensor\` of type \`int64\`. A 1-D int64 tensor of dense_shape [ndims]. \\"\\"\\" _ctx = _context._context if _ctx is None or not _ctx._eager_context.is_eager: num_features = _execute.make_int(num_features, \\"num_features\\") if dtype is None: dtype = _dtypes.float32 dtype = _execute.make_type(dtype, \\"dtype\\") if label_dtype is None: label_dtype = _dtypes.int64 label_dtype = _execute.make_type(label_dtype, \\"label_dtype\\") _, _, _op = _op_def_lib._apply_op_helper( \\"DecodeLibsvm\\", input=input, num_features=num_features, dtype=dtype, label_dtype=label_dtype, name=name) _result = _op.outputs[:] _inputs_flat = _op.inputs _attrs = (\\"dtype\\", _op.get_attr(\\"dtype\\"), \\"label_dtype\\", _op.get_attr(\\"label_dtype\\"), \\"num_features\\", _op.get_attr(\\"num_features\\")) _execute.record_gradient( \\"DecodeLibsvm\\", _inputs_flat, _attrs, _result, name) _result = _DecodeLibsvmOutput._make(_result) return _result else: try: _result = _pywrap_tensorflow.TFE_Py_FastPathExecute( _ctx._context_handle, _ctx._eager_context.device_name, \\"DecodeLibsvm\\", name, _ctx._post_execution_callbacks, input, \\"dtype\\", dtype, \\"label_dtype\\", label_dtype, \\"num_features\\", num_features) _result = _DecodeLibsvmOutput._make(_result) return _result except _core._FallbackException: return decode_libsvm_eager_fallback( input, dtype=dtype, label_dtype=label_dtype, num_features=num_features, name=name, ctx=_ctx) except _core._NotOkStatusException as e: if name is not None: message = e.message + \\" name: \\" + name else: message = e.message _six.raise_from(_core._status_to_exception(e.code, message), None) def decode_libsvm_eager_fallback(input, num_features, dtype=_dtypes.float32, label_dtype=_dtypes.int64, name=None, ctx=None): r\\"\\"\\"This is the slowpath function for Eager mode. This is for function decode_libsvm \\"\\"\\" _ctx = ctx if ctx else _context.context() num_features = _execute.make_int(num_features, \\"num_features\\") if dtype is None: dtype = _dtypes.float32 dtype = _execute.make_type(dtype, \\"dtype\\") if label_dtype is None: label_dtype = _dtypes.int64 label_dtype = _execute.make_type(label_dtype, \\"label_dtype\\") input = _ops.convert_to_tensor(input, _dtypes.string) _inputs_flat = [input] _attrs = (\\"dtype\\", dtype, \\"label_dtype\\", label_dtype, \\"num_features\\", num_features) _result = _execute.execute(b\\"DecodeLibsvm\\", 4, inputs=_inputs_flat, attrs=_attrs, ctx=_ctx, name=name) _execute.record_gradient( \\"DecodeLibsvm\\", _inputs_flat, _attrs, _result, name) _result = _DecodeLibsvmOutput._make(_result) return _result _ops.RegisterShape(\\"DecodeLibsvm\\")(None) def _InitOpDefLibrary(op_list_proto_bytes): op_list = _op_def_pb2.OpList() op_list.ParseFromString(op_list_proto_bytes) _op_def_registry.register_op_list(op_list) op_def_lib = _op_def_library.OpDefLibrary() op_def_lib.add_op_list(op_list) return op_def_lib # op { # name: \\"DecodeLibsvm\\" # input_arg { # name: \\"input\\" # type: DT_STRING # } # output_arg { # name: \\"label\\" # type_attr: \\"label_dtype\\" # } # output_arg { # name: \\"feature_indices\\" # type: DT_INT64 # } # output_arg { # name: \\"feature_values\\" # type_attr: \\"dtype\\" # } # output_arg { # name: \\"feature_shape\\" # type: DT_INT64 # } # attr { # name: \\"dtype\\" # type: \\"type\\" # default_value { # type: DT_FLOAT # } # allowed_values { # list { # type: DT_FLOAT # type: DT_DOUBLE # type: DT_INT32 # type: DT_INT64 # } # } # } # attr { # name: \\"label_dtype\\" # type: \\"type\\" # default_value { # type: DT_INT64 # } # allowed_values { # list { # type: DT_FLOAT # type: DT_DOUBLE # type: DT_INT32 # type: DT_INT64 # } # } # } # attr { # name: \\"num_features\\" # type: \\"int\\" # has_minimum: true # minimum: 1 # } # } _op_def_lib = _InitOpDefLibrary(b\\"n311001n014DecodeLibsvm022tn005input030007032024n005label\\"013label_dtype032023n017feature_indices030t032027n016feature_values\\"005dtype032021nrfeature_shape030t\\"033n005dtype022004type0320020001:010n0062004001002003t\\"!n013label_dtype022004type0320020t:010n0062004001002003t\\"027n014num_features022003int(0010001\\")"},{"prompt":"Write a Python program to compute the sum of the values of a given dictionary dictionary = {'A':5, 'B':6, 'C':10}","completion":"def dict_sum(dict): sum = 0 for key, value in dict.items(): sum += value return sum"},{"prompt":"Create a REST API in Python that can be used to delete an item from a list. Not applicable","completion":"from flask import Flask, request import json app = Flask(__name__) items = [\\"Apple\\", \\"Banana\\", \\"Orange\\"] @app.route('/items', methods=[\\"GET\\"]) def get_items(): return json.dumps(items) @app.route('/items/<item>', methods=[\\"DELETE\\"]) def delete_item(item): if item in items: items.remove(item) message = \\"Item successfully deleted.\\" else: message = \\"Item not found.\\" return json.dumps({\\"message\\": message})"},{"prompt":"Read a given list of strings and create a new list of all strings that are longer than 5 characters long. ['Python', 'is', 'Fun']","completion":"def filter_long_strings(string_list): long_strings = [] for string in string_list: if len(string) > 5: long_strings.append(string) return long_strings string_list = ['Python', 'is', 'Fun'] long_strings = filter_long_strings(string_list) print(long_strings)"},{"prompt":"Craft an algorithm in Python to move all zeroes in a list to the end of the list. [3, 0, 1, 0, 5, 0, 2]","completion":"def move_zeroes(lst): # Count the number of non-zero elements num_non_zeroes = 0 for num in lst: if num != 0: num_non_zeroes += 1 # Initialize the new list new_lst = [] # Move all non-zeroes to the beginning of the new list for i in range(num_non_zeroes): new_lst.append(lst[i]) # Append 0's to the end for _ in range(len(lst)-num_non_zeroes): new_lst.append(0) # Return the new list return new_lst lst = [3, 0, 1, 0, 5, 0, 2] result = move_zeroes(lst) print(result)"},{"prompt":"Create a Python program to implement the Fibonacci sequence.","completion":"def fibonacci_seq(n): if n==0: return 0 elif n==1: return 1 else: return fibonacci_seq(n-1)+fibonacci_seq(n-2)"},{"prompt":"Write a function in Python to print out an array backwards.","completion":"def print_reverse_array(arr): for i in range(len(arr)-1, -1, -1): print(arr[i])"},{"prompt":"Create a Python program to find the possible prime numbers from one to one hundred by using the Sieve of Eratosthenes algorithm.","completion":"def sieve_eratosthenes(n): prime_list = [True] * (n+1) prime_list[0] = False prime_list[1] = False primes = [] for i in range(2, n+1): if prime_list[i] == True: primes.append(i) for j in range(i*i, n+1, i): prime_list[j] = False return primes n = 100 print(\\"The Prime numbers from 1 to 100 are:\\") print(sieve_eratosthenes(n))"},{"prompt":"Create a Python function named Transpile that takes in four arguments: src_dir, dst_dir, model_filename, and params_filename. Inside the function, create a CPUPlace object and an Executor object using Paddle Fluid. Then, create a Scope object using fluid.core.Scope(). Load the inference program, feed target names, and fetch targets using fluid.io.load_inference_model() with the src_dir, exe, model_filename, and params_filename arguments. Clone the inference program and apply the inference transpiler using fluid.InferenceTranspiler() and t.transpile(). Save the optimized inference program to dst_dir using fluid.io.save_persistables() and the inference_transpiler_program and params_filename arguments. If dst_dir does not exist, create it using os.makedirs(). Finally, create a main function that takes in arguments using argparse.ArgumentParser() and calls the Transpile function with the parsed arguments.","completion":"import os import sys import argparse import paddle.fluid as fluid def Transpile(src_dir, dst_dir, model_filename, params_filename): place = fluid.CPUPlace() exe = fluid.Executor(place) inference_scope = fluid.core.Scope() with fluid.scope_guard(inference_scope): print \\"Loading inference_program from \\", src_dir [inference_program, feed_target_names, fetch_targets] = fluid.io.load_inference_model(src_dir, exe, model_filename, params_filename) inference_transpiler_program = inference_program.clone() # NOTE: Applying the inference transpiler will change the inference_transpiler_program. t = fluid.InferenceTranspiler() # Under the with statement, inference_scope is the global scope. t.transpile(inference_transpiler_program, place) #print inference_transpiler_program print \\"Saving the optimized inference_program to \\", dst_dir # There is a bug in fluid.io.save_inference_model, so we can use the following code instead. if not os.path.isdir(dst_dir): os.makedirs(dst_dir) model_path = os.path.join(dst_dir, model_filename) with open(model_path, \\"wb\\") as f: f.write(inference_transpiler_program.desc.serialize_to_string()) fluid.io.save_persistables(exe, dst_dir, inference_transpiler_program, params_filename) def main(): parser = argparse.ArgumentParser() parser.add_argument('--src_dir', help='Source directory of inference model') parser.add_argument('--dst_dir', help='Dstination directory of inference model') parser.add_argument('--model_filename', default=None, help='The name of model file') parser.add_argument('--params_filename', default=None, help='The name of params file') args = parser.parse_args() Transpile(args.src_dir, args.dst_dir, args.model_filename, args.params_filename) if __name__ == '__main__': main()"},{"prompt":"Create a Python function called add_marks which takes two parameters: marks(a list) and mark(an integer). The function should add the mark to each value in the marks list. marks = [87, 56, 99, 54] mark = 4","completion":"def add_marks(marks, mark): return [m + mark for m in marks]"},{"prompt":"Design a positive feedback loop for the following python program. for i in range(10): print(hello)","completion":"for i in range(10): print(\\"hello\\") i += 1 if i == 10: print(\\"You've got it!\\")"},{"prompt":"mplement a function that prints out the numbers from 1 to 50 in python","completion":"def print_numbers(): for i in range(1, 51): print(i) print_numbers()"},{"prompt":"Write a Python program to send an automated email. The program should take a list of emails as input, iterate over the list, and send an email to each address. recipient_emails = [email1@example.com,email2@example.com]","completion":"import smtplib sender_email = 'example@gmail.com' password = 'example_password' for email in recipient_emails: with smtplib.SMTP('smtp.gmail.com', 587) as server: server.ehlo() server.starttls() server.login(sender_email, password) subject = 'Automated Email from Program' message = 'Message body' server.sendmail(sender_email, email, 'Subject: ' + subject + 'nn' + message) server.quit() print('Email sent successfully.')"},{"prompt":"Create a Python class which represents a 3D Vector","completion":"class Vector3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def __str__(self): return \\"(\\" + str(self.x) + \\", \\" + str(self.y) + \\", \\" + str(self.z) + \\")\\""},{"prompt":"Given two strings, write a Python program to find the total number of common characters present in both strings","completion":"def num_common_chars(str1, str2): common = 0 for c in str1: if c in str2: common += 1 return common"},{"prompt":"Modify the following Python code to handle errors. def read_data_from_json(filename): with open(filename, 'r') as f: data = json.load(f) return d","completion":"def read_data_from_json(filename): try: with open(filename, 'r') as f: data = json.load(f) return data except FileNotFoundError: print(\\"The file specified does not exist.\\") except json.decoder.JSONDecodeError: print(\\"The file specified is not in a valid JSON format.\\")"},{"prompt":"Analyze a given Python code and write a function that checks if a given number is prime. def primeCheck(num)","completion":"def primeCheck(num): if num > 1: for i in range(2, num): if (num % i) == 0: return False else: return False return True"},{"prompt":"Create a python program to filter out all the even numbers from a given list. [3, 4, 5, 6, 7]","completion":"def filter_even_numbers(numbers): even_numbers = [] for i in numbers: if i % 2 == 0: even_numbers.append(i) return even_numbers filtered = filter_even_numbers([3, 4, 5, 6, 7]) print(filtered)"},{"prompt":"mplement a function in Python that takes a Huffman tree and drop all its leaf nodes. (1) / (2) (3) / / (4) (5) (6) (7)","completion":"def dropLeafNodes(head): # If node is not None and doesn't have any children if head and not head.left and not head.right: return None # Don't change anything if head is None if not head: return None # Recursively call dropLeafNodes on left and right subtrees head.left = dropLeafNodes(head.left) head.right = dropLeafNodes(head.right) # Return head of the modified tree return head"},{"prompt":"Create a web crawler in Python that starts from a website and looks for other links in the page then scrapes the page content. Not applicable","completion":"import requests from bs4 import BeautifulSoup import re def crawl(url): visited = set() queue = [url] while queue: curr = queue.pop(0) visited.add(curr) response = requests.get(curr) if response.ok: soup = BeautifulSoup(response.text, 'html.parser') # scrape the page here # find all the links links = soup.find_all('a', href=re.compile('^http')) for link in links: if link['href'] not in visited: queue.append(link['href'])"},{"prompt":"Write a Python program to calculate the maximum, minimum and mean number of elements in a given string.","completion":"def get_stats_for_string(string): num_elements = len(string) max_element = max(string) min_element = min(string) mean_element = sum(string) / num_elements return (max_element, min_element, mean_element) string = \\"abcdef\\" stats_for_string = get_stats_for_string(string) print(\\"Max: {0}, Min: {1}, Mean: {2}\\".format(*stats_for_string))"},{"prompt":"Write a Python program to calculate the compound interest. investment_amount = 1000, time = 5, rate_of_interest = 5","completion":"def compoundInterest(investment_amount, rate_of_interest, time): compound_interest = investment_amount * (pow((1 + rate_of_interest / 100), time)) return compound_interest ci = compoundInterest(1000, 5, 5) print(ci)"},{"prompt":"Create a commandline application in Python that stores customer data and allows customer to query by customer name","completion":"import sys def print_customer_data(name): # Code for searching customer data by customer name and # printing results ... # Main function for the customer search application if __name__==\\"__main__\\": # Get command line arguments args = sys.argv if len(args) == 2: name = args[1] print_customer_data(name) else: print(\\"Invalid arguments, please specify a customer name.\\")"},{"prompt":"Develop a program in Python to calculate the Fibonacci sequence.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b # Driver Code print(fibonacci(9))"},{"prompt":"Generate a python program that takes two sets of integers as input and outputs the intersection of those sets. set1 = {1, 2, 3, 4} set2 = {3, 4, 5, 6}","completion":"def intersection(set1, set2): return set1 & set2 result = intersection(set1, set2) print(result)"},{"prompt":"Design an algorithm in Python to find the smallest number in a given list. [4, 5, 6, 7, 8]","completion":"def smallestNumber(nums): smallest = nums[0] for i in range(1, len(nums)): if nums[i] < smallest: smallest = nums[i] return smallest nums = [4, 5, 6, 7, 8] smallestNum = smallestNumber(nums) print('The smallest number is', smallestNum)"},{"prompt":"Generate a python program for printing a Pascal triangle. Number of rows= 5","completion":"def PascalTriangle(n) : # An auxiliary array to store # generated pscal triangle values arr = [0 for i in range(n)] # Iterate through every line and # print integer(s) in it for line in range(0, n) : # Every line has number of # integers equal to line # number for i in range (0, line + 1) : # First and last values # in every row are 1 if (i == 0 or i == line) : arr[i] = 1 # Other values are sum of # values just above and # left of above else : arr[i] = arr[i] + arr[i - 1] # Printing array in # mantainence of order for i in range (0, line + 1) : print(arr[i], end =\\" \\") print() # Driver Code n = 5 PascalTriangle(n)"},{"prompt":"Create a python script that filters out all negative numbers from the given matrix [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"import numpy as np def filter_out_negative(matrix): # Convert matrix to numpy array matrix = np.array(matrix) # Find all negative numbers and set them to 0 matrix[matrix < 0] = 0 return matrix result = filter_out_negative([[-1, 2, -3], [-4, 5, 6], [-7, 8, 9]]) print(result)"},{"prompt":"Create a basic REST API using Python and Flask to list all the countries in the world. Not applicable","completion":"import flask from flask import Flask, request, jsonify import json app = Flask(name) @app.route('/countries', methods=['GET']) def get_countries(): with open('data.json', 'r') as f: countries = json.load(f) return jsonify(countries) if name == 'main': app.run()"},{"prompt":"Create a web scraper in Python that can extract hotel reviews from TripAdvisor. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Define the URL and the headers url = '<url>' headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36'} # Make a request and get HTML in response response = requests.get(url, headers=headers) # Parse HTML soup = BeautifulSoup(response.text, 'html.parser') # Find all reviews reviews = soup.find_all('div', {'class': 'review-container'}) # Go through every review and extract the data for review in reviews: # Get the title title = review.find('span', {'class': 'noQuotes'}).text # Get the text text = review.find('p', {'class': 'partial_entry'}).text # Print for demo print(title) print(text) print('-' * 50)"},{"prompt":"Develop a machine learning model in Python to identify the author of a given article.","completion":"from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import GaussianNB from sklearn.pipeline import Pipeline from sklearn.model_selection import train_test_split # load data samples = [ \\"sample 1 from AuthorA\\", \\"sample 2 from AuthorA\\", \\"sample 1 from AuthorB\\", \\"sample 2 from AuthorB\\" ] labels = [ \\"AuthorA\\", \\"AuthorA\\", \\"AuthorB\\", \\"AuthorB\\" ] # build the model model = Pipeline([ ('tfidf', TfidfVectorizer()), ('clf', GaussianNB()) ]) # train the model X_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.3) model.fit(X_train, y_train) # evalulate the model score = model.score(X_test, y_test) print(f'model score: {score}')"},{"prompt":"Write a Python program to divide a given list of numbers into two equal parts such that the difference between the sum of the two parts is minimum. [2, 3, 4, 5, 6, 7]","completion":"def divide_in_two_equal_parts(lst): target = sum(lst) // 2 part1 = [] part2 = [] left_sum = 0 right_sum = 0 for num in lst: if left_sum <= right_sum: left_sum += num part1.append(num) else: right_sum += num part2.append(num) return part1, part2 part1, part2 = divide_in_two_equal_parts([2, 3, 4, 5, 6, 7]) print(\\"Part 1:\\", part1) print(\\"Part 2:\\", part2)"},{"prompt":"Develop an algorithm to detect and fix Python syntax errors in a given code snippet. def test (): x = 5 y = 3 z","completion":"def test(): x = 5 y = 3 try: z except NameError: print(\\"NameError: Name 'z' is not defined\\")"},{"prompt":"Design a data structure in Python to store integer values.","completion":"class IntList: def __init__(self): self.values = [] def add_value(self, value): self.values.append(value) def find_min(self): return min(self.values)"},{"prompt":"Create an algorithm in Python for a linear search. The algorithm should take in an array and a value to search for, and return the index of the value if it is found, or 1 if it is not. Array: [5, 3, 7, 2] Search value: 7","completion":"def linearSearch(arr, value): for i in range(len(arr)): if arr[i] == value: return i # value found, return index return -1 # value not found arr = [5, 3, 7, 2] searchValue = 7 result = linearSearch(arr, searchValue) if result == -1: print(\\"Element not found\\") else: print(\\"Element present at index\\", result)"},{"prompt":"Given a list of strings, write a Python function to remove all the whitespaces from each string. ['Hello World ', 'Hi there', 'Good Morning']","completion":"def remove_whitespace(word_list): return [word.strip() for word in word_list] stripped_list = remove_whitespace(['Hello World ', 'Hi there', 'Good Morning']) print(stripped_list)"},{"prompt":"Design a Python program to randomize a list of given integers using an optimized FisherYates algorithm.","completion":"def randomized_list(num_list): for i in range(len(num_list)-1,0,-1): j = random.randint(0,i) num_list[i],num_list[j] = num_list[j],num_list[i] return num_list"},{"prompt":"Create a system in Python for generating natural language responses. A sample utterance What time is it?","completion":"from tensorflow.keras.layers import Input, Dense, Embedding, GRU from tensorflow.keras.models import Model from tensorflow.keras.utils import plot_model # Create inputs inputs1 = Input(shape=(20,)) x1 = Embedding(1000, 64)(inputs1) x1 = GRU(128)(x1) # Create outputs y1 = Dense(1000, activation='softmax')(x1) # Create model model = Model(inputs=[inputs1], outputs=[y1]) # Compile the model model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) # Train the model model.fit([inputs], [outputs], epochs=10, batch_size=32) # Generate the response to the sample utterance query = \\"What time is it?\\" prediction = model.predict(query) print(prediction)"},{"prompt":"Create a web scraper using Python that collects the title and content from the homepage of a given website. https://www.example.com as the target website.","completion":"import requests import bs4 url = 'https://www.example.com' r = requests.get(url) html = bs4.BeautifulSoup(r.text,\\"html.parser\\") # Find title title = html.find('title') print(title.text) # Find content content = html.find('div', {'class': 'content'}) print(content.text)"},{"prompt":"Generate a Python script that finds the total surface area of a cuboid, given its three dimensions. 2, 3, 4","completion":"def find_total_surfacearea(length, breadth, height): return (2*(length*breadth + breadth*height + height*length)) print(find_total_surfacearea(2, 3, 4)) Output: 52"},{"prompt":"Generate a Python program to clean a string of HTML tags. Example Input: <p>This is a <b>test</b> string</p>.","completion":"import re # Clean a string of HTML tags def clean_html_tags(str): clean_str = re.sub(\\"<.*?>\\", \\"\\", str) return clean_str html_string = \\"<p>This is a <b>test</b> string</p>\\" clean_str = clean_html_tags(html_string) print(clean_str) #This is a test string"},{"prompt":"Generate a Python function that takes an integer array as input and returns the number of unique elements in the array. [1, 2, 3, 2, 1, 4, 7, 8, 9, 8]","completion":"def num_unique_elements(arr): unique_arr = set(arr) return len(unique_arr) print(num_unique_elements([1, 2, 3, 2, 1, 4, 7, 8, 9, 8]))"},{"prompt":"Create a Python program to scrape an online news website to get the headlines.","completion":"import requests from bs4 import BeautifulSoup # url of the website you want to scrape url = \\"https://www.news.com/\\" # get the response in the form of html r = requests.get(url) # create a beautifulsoup object to parse contents soup = BeautifulSoup(r.content, 'html5lib') # find headlines from the parsed page headlines = soup.find_all('h2') # Print the headlines for headline in headlines: print(headline.text)"},{"prompt":"Edit the given Python program to print 'Happy Holidays' 10 times. for i in range(10): print('Hello World')","completion":"for i in range(10): print('Happy Holidays')"},{"prompt":"Combine 2 strings and reverse the result in Python. words = Hello words2 = world!","completion":"words = \\"Hello \\" words2 = \\"world!\\" combined = words + words2 result = combined[::-1] print(result)"},{"prompt":"Create a class to represent a bank account in Python.","completion":"class BankAccount: def __init__(self, name, balance): self.name = name self.balance = balance def deposit(self, amount): self.balance += amount def withdraw(self, amount): if self.balance >= amount: self.balance -= amount return True else: return False def get_balance(self): return self.balance"},{"prompt":"Optimize the following Python code to sort a set of numbers (set = [2, 6, 3, 8, 4]) in O(n) time complexity. unsorted_list = [2, 6, 3, 8, 4]","completion":"def sort_list(unsorted_list): sorted_list = [] while unsorted_list: min_elem = min(unsorted_list) unsorted_list.remove(min_elem) sorted_list.append(min_elem) return sorted_list"},{"prompt":"Design a Python program to perform linear regression for predicting the numbers in a given dataset. X = [1,2,3,4,5] Y = [3,5,7,9,13]","completion":"import numpy as np from sklearn.linear_model import LinearRegression X = np.array([1,2,3,4,5]).reshape(-1,1) Y = np.array([3,5,7,9,13]) model = LinearRegression() model.fit(X, Y) # Predicts the value of y print(model.predict([[7]]))"},{"prompt":"Create a Python object that contains two attributes, Name and Age.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age person = Person(\\"John\\", 25)"},{"prompt":"Write a function in Python that takes a list of objects and returns a list of those objects sorted by one of their attributes. [{name: Alice, age: 20}, {name: Bob, age: 21}]","completion":"def sort_by_attr(objects, attr): return sorted(objects, key=lambda item: item[attr]) sort_by_attr([{\\"name\\": \\"Alice\\", \\"age\\": 20}, {\\"name\\": \\"Bob\\", \\"age\\": 21}], \\"age\\")"},{"prompt":"Write a Python program to generate an HTML table displaying information about the top 10 bestselling books in a specific genre. Table name: Books Table columns: id (int), title (string), author (string), genre (string), sales (int)","completion":"import sqlite3 # connect to the database conn = sqlite3.connect('books.db') c = conn.cursor() # retrieve the data c.execute('''SELECT title, author, genre, sales FROM Books WHERE genre='Fantasy' ORDER BY sales DESC LIMIT 10''') # save the results results = c.fetchall() # generate the HTML code html = '<table>' html += '<tr><th>Title</th><th>Author</th><th>Genre</th><th>Sales</th></tr>' for result in results: title = result[0] author = result[1] genre = result[2] sales = result[3] html += f'<tr><td>{title}</td><td>{author}</td><td>{genre}</td><td>{sales}</td></tr>' html += '</table>' # display the results print(html)"},{"prompt":"Create a Python script to filter out all the vowels from a string.","completion":"def filter_vowels(string): vowels = ('a', 'e', 'i', 'o', 'u') return ''.join(c for c in string if c not in vowels)"},{"prompt":"Python, write a script to sort the list items in descending order. list_items = [3, 7, 5, 8, 10]","completion":"list_items = [3, 7, 5, 8, 10] list_items.sort(reverse=True) print(list_items) # Output: [10, 8, 7, 5, 3]"},{"prompt":"Create a Python function that takes in a text string and returns a dictionary of words and the number of times each word appears in the text string. A quick brown fox jumps over the lazy dog","completion":"def words_count(text): words_dict = {} for word in text.split(' '): if word in words_dict: words_dict[word] += 1 else: words_dict[word] = 1 return words_dict words_dict = words_count(\\"A quick brown fox jumps over the lazy dog\\") print(words_dict)"},{"prompt":"Create an objectoriented structure to solve a maze by using python.","completion":"import collections class Maze: def __init__(self, n, m): self._n, self._m = n, m self._grid = [[None] * m for _ in range(n)] def solve_maze(self): result, found = [], False start, end = (0, 0), (self._n-1, self._m-1) for i in range(self._n): for j in range(self._m): if self._grid[i][j] == 1: value = 0 self._find_omega(i, j, value, result, start, end, found) return result def _find_omega(self, i, j, value, result, start, end, found): rowNbr, colNbr = [-1, 0, 0, 1], [0, -1, 1, 0] if (i, j) == end: found = True result.append(value) return if found == True: return self._grid[i][j] = 0 for k in range(4): if self._on_board(i + rowNbr[k], j + colNbr[k]): self._find_omega(i + rowNbr[k], j + colNbr[k], value + 1, result, start, end, found) def _on_board(self, i, j): return 0 <= i < self._n and 0 <= j < self._m and self._grid[i][j] == 1"},{"prompt":"Compose a piece of code to print the length of a given string. Python","completion":"string = \\"Python\\" print(\\"Length of the given string is:\\", len(string))"},{"prompt":"Compose a Python program to calculate the maximum possible revenue from the items with given weights and values. weights = [2, 1, 3], values = [4, 2, 3]","completion":"\\"\\"\\" Calculate the maximum possible revenue from the items with given weights and values \\"\\"\\" # given weights and values weights = [2, 1, 3] values = [4, 2, 3] # number of items n = len(weights) # function to calculate the maximum revenue def knapsack(weights, values, n): # total capacity of knapsack W = 5 # matrix to store solution matrix K = [[0 for x in range(W+1)] for x in range(n+1)] # build the solution matrix in bottom up manner for i in range(n+1): for w in range(W+1): if i==0 or w==0: K[i][w] = 0 elif weights[i-1] <= w: K[i][w] = max(values[i-1] + K[i-1][w-weights[i-1]], K[i-1][w]) else: K[i][w] = K[i-1][w] return K[n][W] print (knapsack(weights, values, n))"},{"prompt":"Write a Python program to read in a tweet and remove all punctuation, special characters and stopwords. I'm so excited to be going to the #MuseumTour! #BigDay #travel","completion":"import re import string from nltk.corpus import stopwords tweet = \\"I'm so excited to be going to the #MuseumTour! #BigDay #travel\\" tweet_clean = re.sub(r'[^ws]','',tweet) #remove punctuation tokens = tweet_clean.split() #split string into individual words stop_words = set(stopwords.words(\\"english\\")) #get list of stopwords filtered_tokens = [w for w in tokens if not w in stop_words] #remove stopwords print(filtered_tokens)"},{"prompt":"mplement a web scraper in Python to extract the top ten trending YouTube videos.","completion":"import requests from bs4 import BeautifulSoup # make a request to get the page content page = requests.get(\\"https://www.youtube.com/feed/trending\\") # parse the page content soup = BeautifulSoup(page.content, 'html.parser') # extract the list of trending videos trending_videos = soup.find_all(class_='expanded-shelf-content-item-wrapper') # print the top ten trending videos for video in trending_videos[:10]: print(video.find(class_='yt-uix-tile-link').get('title'))"},{"prompt":"Make a code in Python to find the mode of the given set of values. 1, 2, 3, 2, 4, 2","completion":"def find_mode(list): max_count = 0 mode = list[0] count = {} for item in list: if (item in count): count[item] += 1 else: count[item] = 1 if (count[item] > max_count): max_count = count[item] mode = item return mode"},{"prompt":"Create a web API with Python and Flask to give the current date and time. Not applicable","completion":"from flask import Flask import datetime app = Flask(__name__) @app.route('/datetime') def get_datetime(): return datetime.datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\") if __name__ == '__main__': app.run()"},{"prompt":"Create a Python function that takes a list containing fruit names and returns the most common fruit name. ['Apple', 'Orange', 'Apple', 'Pineapple', 'Grape', 'Apple']","completion":"def most_common_fruit(fruit_list): # Dictionary to get count of each fruit freq_dict = {} # Count frequency of each fruit for fruit in fruit_list: if fruit in freq_dict: freq_dict[fruit] += 1 else: freq_dict[fruit] = 1 # Get maximum frequency max_freq = 0 for freq in freq_dict.values(): if freq > max_freq: max_freq = freq # Get the most common fruit most_common_fruit = None for fruit, freq in freq_dict.items(): if freq == max_freq: most_common_fruit = fruit break return most_common_fruit"},{"prompt":"Write a Python program to take in a list of phrases and generate a string with the each phrase followed by its length. phrases = [A bird in the hand, is worth two in the bush]","completion":"result = \\"A bird in the hand (17)is worth two in the bush (25)\\" code: input_phrases = [\\"A bird in the hand\\", \\"is worth two in the bush\\"] result = \\"\\" for phrase in input_phrases: result += phrase + ' (' + str(len(phrase)) + ')' print(result)"},{"prompt":"Write a simple Python function that takes a list of integers and returns the sum of all elements divisible by 3. li = [4, 6, 17, 24, 5, 9]","completion":"def divisibleBy3(li): total = 0 for num in li: if num % 3 == 0: total += num return total # Output: 24"},{"prompt":"Create a program in Python that takes a number from the user and prints all the divisors of the number.","completion":"divisors = [] num = int(input('Enter a number: ')) for i in range(1, num + 1): if num % i == 0: divisors.append(i) print('The divisors of',num ,'are:') print(*divisors, sep=', ')"},{"prompt":"Write a Python program to generate an HTML page containing a table with some employee data. Employee Data: Name: John Doe Job Title: Senior Developer Department: IT Salary: 120,000 Name: Jane Doe Job Title: Manager Department: Finance Salary: 95,000 Name: Tim Smith Job Title: Junior Developer Department: IT Salary: 55,000","completion":"<html> <head> <title>Employee Data</title> </head> <body> <table> <thead> <tr> <th>Name</th> <th>Job Title</th> <th>Department</th> <th>Salary</th> </tr> </thead> <tbody> <tr> <td>John Doe</td> <td>Senior Developer</td> <td>IT</td> <td>120,000</td> </tr> <tr> <td>Jane Doe</td> <td>Manager</td> <td>Finance</td> <td>95,000</td> </tr> <tr> <td>Tim Smith</td> <td>Junior Developer</td> <td>IT</td> <td>55,000</td> </tr> </tbody> </table> </body> </html>"},{"prompt":"Create a Python function to select all rows from a table where the 'status' is 'approved'","completion":"def select_approved_rows(): sql = \\"SELECT * FROM table WHERE status = 'approved'\\" cur.execute(sql) return cur.fetchall()"},{"prompt":"Create a Python program to generate random passwords of length 8 characters, containing at least one lowercase letter, one uppercase letter and one number.","completion":"from random import choice import string def generate_password(): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits password = ''.join(choice(chars) for i in range(8)) if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password): return password else: return generate_password() if __name__ == '__main__': print(generate_password())"},{"prompt":"Generate a solution to translate a text from English to French using Python.","completion":"# install the module # in command prompt pip install googletrans # import module from googletrans import Translator # create an object translator = Translator() # define text text = \\"Hello, this is a sample text to translate.\\" # call the function and pass the text translation = translator.translate(text, dest='fr') # print the translation print(translation.text)"},{"prompt":"Create a function to generate a unique 6 digit number.","completion":"# Python program to generate # a unique 6 digit number import random def generate_number(): # Choose a random number # between 10000 and 99999 random_number = random.randint(10000, 99999) # Return the random number return random_number # Driver Code if __name__ == \\"__main__\\": print(generate_number())"},{"prompt":"Write a Python program to generate 10 random numbers and put them in a list.","completion":"import random random_list = [] for i in range(10): number = random.randint(1, 100) random_list.append(number)"},{"prompt":"Write a Python program to replace all occurrences of a given string with an alternate string. Hello World!, World, Python","completion":"def replace_string(input_string, target_string, replacement_string): return input_string.replace(target_string, replacement_string) print(replace_string(\\"Hello World!\\", \\"World\\", \\"Python\\"))"},{"prompt":"Generate a Python class for an online store item that includes fields for ID, name, price, and description. Not applicable","completion":"class StoreItem: def __init__(self, item_id, name, price, description): self.item_id = item_id self.name = name self.price = price self.description = description def __str__(self): return f'{self.name}, {self.price}' def to_dict(self): return { 'item_id': self.item_id, 'name': self.name, 'price': self.price, 'description': self.description }"},{"prompt":"Create a virtual assistant using Python and Dialogflow to answer a basic set of questions. Not applicable","completion":"import dialogflow_v2 as dialogflow import requests project_id = 'project-id' session_client = dialogflow.SessionsClient() session = session_client.session_path(project_id, 'session-id') while True: text = input('User: ') text_input = dialogflow.types.TextInput(text=text, language_code='en-US') query_input = dialogflow.types.QueryInput(text=text_input) response = session_client.detect_intent(session=session, query_input=query_input) print('Assistant:', response.query_result.fulfillment_text)"},{"prompt":"Create an algorithm in Python to solve Tower of Hanoi game of a 4 disk problem.","completion":"def solveTowerOfHanoi(num_disks, start_rod = 'A', end_rod = 'C', aux_rod = 'B'): if num_disks == 1: print(\\"Move disk 1 from rod\\", start_rod, \\"to rod\\", end_rod) return solveTowerOfHanoi(num_disks - 1, start_rod, aux_rod, end_rod) print(\\"Move disk\\", num_disks, \\"from rod\\", start_rod, \\"to rod\\", end_rod) solveTowerOfHanoi(num_disks - 1, aux_rod, end_rod, start_rod) # Driver code num_disks = 4 solveTowerOfHanoi(num_disks)"},{"prompt":"Generate an api response in Python for the provided data. Data = { name : John, age : 28 }","completion":"response = { \\"status\\": 200, \\"data\\": {\\"name\\": \\"John\\",\\"age\\":28}, \\"message\\": \\"Success\\" }"},{"prompt":"Create a webscraper using Python’s Selenium that retrieves data from an online store. Not applicable","completion":"from selenium import webdriver # create a new Firefox session driver = webdriver.Firefox() driver.implicitly_wait(30) driver.maximize_window() # navigate to the application home page driver.get(\\"https://www.example.com/\\") # get the search textbox search_field = driver.find_element_by_name(\\"q\\") search_field.clear() # enter search keyword and submit search_field.send_keys(\\"shoes\\") search_field.submit() # get the list of elements which are displayed after the search # currently on result page using find_elements_by_class_name product_list = driver.find_elements_by_class_name(\\"product\\") # iterate through each element and print the text that is # name of the product for product in product_list: print(product.text) # close the browser window driver.quit()"},{"prompt":"Develop a web scraper with Python BeautifulSoup to scrape data from an online web store. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Make a GET request to fetch the raw HTML content html_content = requests.get('http://web-store.com').text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Get the product data products = soup.find_all('div', attrs={\\"itemprop\\": \\"product\\"}) for product in products: name = product.find(\\"span\\", attrs={\\"itemprop\\": \\"name\\"}).text price = product.find(\\"span\\", attrs={\\"itemprop\\": \\"price\\"}).text description = product.find(\\"span\\", attrs={\\"itemprop\\": \\"description\\"}).text print(name, price, description)"},{"prompt":"mplement a basic algorithm in Python to calculate the nth Fibonacci number. 6","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2) print(fibonacci(6)) // 8"},{"prompt":"Create a Python class that receives two strings and has methods for comparing the strings and returning whether they are equal, different, or similar up to a provided threshold. Not applicable","completion":"class StringComparator: def __init__(self, string1, string2): self.string1 = string1 self.string2 = string2 def is_equal(self): return self.string1 == self.string2 def is_different(self): return self.string1 != self.string2 def is_similar(self, threshold=0.5): distance = edit_distance(self.string1, self.string2) max_length = max(len(self.string1), len(self.string2)) return distance / max_length < threshold"},{"prompt":"Generate a program in Python to evaluate the accuracy of a machinelearning model. from sklearn.svm import SVC clf = SVC(kernel='poly', degree=2, gamma=0.05)","completion":"import numpy as np from sklearn.metrics import accuracy_score clf.fit(X_train, y_train) y_pred = clf.predict(X_test) # Calculating the accuracy accuracy = accuracy_score(y_test, y_pred) print(\\"Accuracy: \\" + str(accuracy))"},{"prompt":"Write a Python program to replace all occurrences of a character in a string with the provided replacement character. str = Hello World! replacement = ‘X'","completion":"def replace_all_occurrences(str, char, replacement): return str.replace(char, replacement) print(replace_all_occurrences(\\"Hello World!\\", 'l', 'X'))"},{"prompt":"Create a python program to find the largest prime factor of a number. Number: 331","completion":"import math def largest_prime_factor(n): # Separate the list of larger factors of the number into prime and composite numbers factors = [] for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0: factors.append(i) factors.append(int(n/i)) # Find the largest prime factor in the list prime_factors = [] for potential_factor in factors: is_prime = True for j in range(2,int(math.sqrt(potential_factor))+1): if potential_factor % j == 0 and potential_factor != j: is_prime = False if is_prime: prime_factors.append(potential_factor) # Return the largest prime factor return max(prime_factors) print(largest_prime_factor(331))"},{"prompt":"Write a Python program to check if an element exists within a given list of integers.","completion":"def element_exists(elem, list_int): return elem in list_int"},{"prompt":"Create a Python program that takes a sentence and converts it to Morse code. Not applicable","completion":"MORSE_CODE = { 'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..', '0': '-----', '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..', '9': '----.', ' ': ' ', '.': '.-.-.-', ',': '--..--', '?': '..--..', '/': '-..-.', '-': '-....-', '(': '-.--.-', ')': '-.--.-' } def encode(message): code = '' for letter in message: code += MORSE_CODE[letter.upper()] + ' ' return code print(encode(\\"Hello world\\")) # Output: .... . .-.. .-.. --- .-- --- .-. .-.. -.."},{"prompt":"Generate a python program to sort a list of numbers array = [4, 2, 6, 7, 1]","completion":"def sort_list(array): n = len(array) for i in range(n): min_idx = i for j in range(i+1, n): if array[min_idx] > array[j]: min_idx = j array[i], array[min_idx] = array[min_idx], array[i] if __name__ == \\"__main__\\": array = [4, 2, 6, 7, 1] sort_list(array) print(array)"},{"prompt":"Create a program in Python to remove all the occurrences of an item from a list. List: [1, 2, 3, 4, 2, 5, 2] Item to Remove: 2","completion":"def removeItem(list, item): # loop through the list for i in list: # check if the element is the item to remove if i == item: # remove the item list.remove(i) # return the list return list #example list = [1, 2, 3, 4, 2, 5, 2] result = removeItem(list, 2) print(result) # Output: [1, 3, 4, 5]"},{"prompt":"Could you build a web scraper in Python that collects all the links from a website?","completion":"# Python program to scrape a webpage import requests as req from bs4 import BeautifulSoup URL = \\"http://www.example.com/\\" # GET request r = req.get(URL) # parse the downloaded homepage and grab all text soup = BeautifulSoup(r.text, \\"html.parser\\") # find and print all links links = soup.find_all('a') for link in links: print(link.get('href'))"},{"prompt":"Generate a Python program to delete a given key from a dictionary. dictionary = {'foo': 1, 'bar': 2, 'baz': 3} key = 'baz'","completion":"dictionary = {'foo': 1, 'bar': 2, 'baz': 3} key = 'baz' def delete_key(dic, k): if k in dic: del dic[k] delete_key(dictionary, key) print(dictionary)"},{"prompt":"Analyze the following Python function to detect any potential errors. def expand_list(list): for item in list: list *= 2","completion":"The function is attempting to modify the list while iterating over it. This can lead to unexpected behavior and should be avoided. To fix the code, the list should be copied before the iteration takes place: def expand_list(list): list_copy = list[:] # make a copy of the list for item in list_copy: list *= 2"},{"prompt":"Generate a Python program to reverse the order of words in a sentence but keep the order of the characters in each word the same.","completion":"def reverse_words(string): words = string.split(\\" \\") reversed_words = [] for word in words: reversed_words.insert(0, word) return ' '.join(reversed_words) string = 'This is a sentence.' reverse_words = reverse_words(string) print(reverse_words)"},{"prompt":"Port a Java code snippet to Python 3. public class Foo { public int foo( int a, int b ) { return a + b; } }","completion":"def foo(a, b): return a + b"},{"prompt":"Generate a Python program that takes a list of strings as input and prints the strings in alphabetical order. ['cat', 'dog', 'apple', 'banana']","completion":"strings = ['cat', 'dog', 'apple', 'banana'] strings.sort() for string in strings: print(string)"},{"prompt":"Build a Python program that extracts all email addresses from a given string. This is an example with two emails: john@example.com, and jane@example.com","completion":"import re def find_emails(text): regex = r\\"([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+)\\" emails = re.findall(regex, text) return emails emails = find_emails(\\"This is an example with two emails: john@example.com, and jane@example.com\\") print(emails)"},{"prompt":"Create a Python code to generate a random string of length 8 made of uppercase letters and numbers.","completion":"import string import random length = 8 chars = string.ascii_uppercase + string.digits password = ''.join(random.choice(chars) for i in range(length)) print (password)"},{"prompt":"This code calculates the percent of transcripts mapping to rRNA. To use it, you need to supply two inputs: an HTseq_counts file and an original reference transcriptome aligned to. To produce tables with rRNA and MT counts for each sample, run the command ./rRNA_MT_count.py gtf /path/to/GTF/file htseq /path/to/HTseq_counts/file. The script will extract all the identifiers of genes/transcripts mapping to the rRNA and MT genes and store them in two arrays. Then, it will count reads matching the rRNA identifiers and write the output files. The summary output file will be named HTseq_counts_file_rRNAmtRNACounts.txt.","completion":"#!/usr/bin/python # Malwina Prater, mn367@cam.ac.uk, 2017, Copyright # Centre for Trophoblast Research, University of Cambridge # # Script version: v01. # # Script to calculate the percent of transcripts mapping to rRNA # # INPUTS : # 1. HTseq_counts file # 2. Original reference transcriptome alignned to # # USAGE : # For producing table(s) with rRNA and MT counts for each sample use commands like that: # # ./rRNA_MT_count.py --gtf /Users/malwina/Documents/CTR-Data/genomes/Mus_musculus/mm10/Mus_musculus.GRCm38.84.gtf --htseq C17_3_S20_Aligned.out.srt.bam_htseq_combined_counts.txt # # import modules: import os,sys from optparse import OptionParser import re # parse in the user options: parser = OptionParser(usage=\\"%prog [-x Excel [-i imagefile] [-s squares]\\", version=\\"%prog 0.1\\") parser.add_option(\\"--htseq\\", dest=\\"FileName\\", type=\\"string\\", action=\\"store\\") parser.add_option(\\"--gtf\\", dest=\\"GTF\\", type=\\"string\\", action=\\"store\\") (options, args) = parser.parse_args() #files = sys.argv[] HTSEQ_COUNTS = options.FileName GTF = options.GTF # check if files supplied exist: try: handle = open(GTF, \\"rU\\") handle.close() except: print \\"nError->tGTF File: %s does not existn\\" % GTF sys.exit() try: handle = open(HTSEQ_COUNTS, \\"rU\\") handle.close() except: print \\"nError->tFile: %s does not existn\\" % HTSEQ_COUNTS sys.exit() # # First job is to extract all the identifiers of genes/transcripts mapping to the rRNA and MT genes and store in 2 arrays # rRNA_identifiers = {} MT_identifiers = {} with open(GTF, \\"rU\\") as handle: #line = handle.readline() for line in handle: line.rstrip('n') if 'gene_biotype \\"rRNA\\"' in line: identifier = line identifier = re.sub('.*gene_id \\"', '', identifier) identifier = re.sub('\\"; gene_version.*n', '', identifier) rRNA_identifiers[identifier] = 1 if 'MT' in line: identifier = line identifier = re.sub('.*gene_id \\"', '', identifier) identifier = re.sub('\\"; gene_version.*n', '', identifier) MT_identifiers[identifier] = 1 handle.close() #print(\\"rRNA:\\") #print(rRNA_identifiers.keys()) #print(\\"MT:\\") #print(MT_identifiers.keys()) # # Second job is to go through the HTSEQ-couts and count reads matching the rRNA identifiers # Cummulative_rRNA_Count = 0 rRNA_genes = 0 ReadCount = 0 line_number = 0 MT_genes = 0; Cummulative_MT_Count = 0; with open(HTSEQ_COUNTS, \\"rU\\") as handle: for line in handle: line.rstrip('n') split_line = line.split(\\"t\\") if line_number > 0: if split_line[0] in rRNA_identifiers.keys(): # if rRNA_identifiers[gene_id] rRNA_genes += 1 Cummulative_rRNA_Count += int(split_line[1]) if split_line[0] in MT_identifiers.keys(): MT_genes += 1 Cummulative_MT_Count += int(split_line[1]) ReadCount += int(split_line[1]) line_number += 1 handle.close() #print(Cummulative_MT_Count) #print(Cummulative_rRNA_Count) # # wiritng the output files: # out = HTSEQ_COUNTS + '_rRNAmtRNACounts.txt'; out = re.sub('.txt_', '_', out) print \\"Summary output file: \\", out, \\"n\\" OUT = open(out, \\"w\\") OUT.write('HT-SEQ file name: t' + HTSEQ_COUNTS + 'nn') OUT.write('GTF file name: tt' + GTF + 'nnn') OUT.write('---------------------------------------------------------------------------------' + 'n') OUT.write(' rRNA and MT identifiersn') OUT.write('---------------------------------------------------------------------------------' + 'n') OUT.write('No. of rRNA identifiers: ' + str(len(rRNA_identifiers.keys())) + 'n') # PRINT size of this hash OUT.write('No. of MT identifiers: ' + str(len(MT_identifiers.keys())) + 'n') # PRINT size of this hash OUT.write('nn') OUT.write('---------------------------------------------------------------------------------' + 'n') OUT.write(' HTSEQ mapping summaryn') OUT.write('---------------------------------------------------------------------------------' + 'n') OUT.write('ReadCount: ' + str(ReadCount) + 'nn') #OUT.write(' Number of rRNA genes: ' + str(rRNA_genes) + 'n') OUT.write('Total no. of rRNA transcripts: ' + str(Cummulative_rRNA_Count) + 'n') perc_rRNA = 100*float(Cummulative_rRNA_Count)/float(ReadCount) perc_rRNA = str(round(perc_rRNA, 3)) OUT.write('Percent rRNA mapped reads: ' + str(Cummulative_rRNA_Count) + ' / ' + str(ReadCount) + ' * 100 = ' + perc_rRNA + '%nn') #OUT.write('n Number of MT genes: ' + str(MT_genes) + 'n') OUT.write('Total no. of MT transcripts: ' + str(Cummulative_MT_Count) + 'n') perc_MT = 100*float(Cummulative_MT_Count)/float(ReadCount) perc_MT = str(round(perc_MT, 3)) OUT.write('Percent MT mapped reads: ' + str(Cummulative_MT_Count) + ' / ' + str(ReadCount) + ' * 100 = ' + perc_MT + '%nn') OUT.close()"},{"prompt":"Modify the following Python code to raise an exception if the input value is not an integer def square_root(x): return x**0.5","completion":"def square_root(x): if not isinstance(x, int): raise TypeError('Input must be an integer') return x**0.5"},{"prompt":"Create a program in Python that extracts titles of all YouTube videos from a URL. https://www.youtube.com/user/Thexvid/video","completion":"import requests import re url = \\"https://www.youtube.com/user/Thexvid/videos\\" r = requests.get(url) titles = re.findall('<a href=\\"/watch?v=([^\\"]+)\\">(.+?)</a>',r.content.decode('utf-8')) for title in titles: print(title[1])"},{"prompt":"Write Python code to list the contents of a directory.","completion":"# get the list of contents import os directory_contents = os.listdir() # print the contents for content in directory_contents: print(content)"},{"prompt":"Create an AIpowered Python script to optimize any given code. Example code: function getResult(a, b, c) { return a + b + c; }","completion":"# Import the required libraries from dataclasses import dataclass @dataclass class Params: a: int b: int c: int def get_result(params: Params) -> int: \\"\\"\\"Returns the sum of the three given numbers\\"\\"\\" return params.a + params.b + params.c # Optimize the code def optimize(fn, params): best_score = 0 best_params = None for a in range(params.a - 10, params.a + 10): for b in range(params.b - 10, params.b + 10): for c in range(params.c - 10, params.c + 10): score = fn(Params(a, b , c)) if score > best_score: best_score = score best_params = { 'a': a, 'b': b, 'c': c } return best_params if __name__ == '__main__': # Initialize the parameters params = Params(a=1, b=2, c=3) # Get the optimized params best_params = optimize(get_result, params) # Print the optimized result print(\\"Optimized result: %d\\" % get_result(Params(best_params['a'], best_params['b'], best_params['c'])))"},{"prompt":"Create a Python function that takes two strings and returns true if the first string is a subsequence of the second. String 1: abc String 2: qaxbcy","completion":"def is_subsequence(str1, str2): i = 0 j = 0 while(i < len(str1) and j < len(str2)): if str1[i] == str2[j]: i += 1 j += 1 return i == len(str1)"},{"prompt":"Create a neural network class in Python to model a linear regression function.","completion":"import numpy as np class LinearRegressionModel: def __init__(self, input_dim, output_dim): ''' Initialises the weights and bias of the linear regression model Arguments: input_dim {int} -- Number of input features output_dim {int} -- Number of outputs ''' self.weights = np.zeros((input_dim, output_dim)) self.bias = np.zeros((1, output_dim)) def forward(self, x): ''' Calculates the forward pass of the linear regression model Arguments: x {numpy array} -- Input data of size (N, input_dim) Returns: out {numpy array} -- Output of the linear regression model of size (N, output_dim) ''' out = np.dot(x, self.weights) + self.bias return out"},{"prompt":"Develop a ML model in Python for predicting the winning team of football matches. Use data from the past 5 years of the Premier League. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.ensemble import GradientBoostingClassifier # Load data data = pd.read_csv('data.csv') # Select features features = data[['home_team_goals', 'away_team_goals', 'home_team_possession', 'away_team_possession', 'home_team_shots', 'away_team_shots', 'home_team_yellow_cards', 'away_team_yellow_cards', 'home_team_red_cards', 'away_team_red_cards']] # Select target target = data['winner'] # Split data into training and test sets X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42) # Train the model gbm = GradientBoostingClassifier() gbm.fit(X_train, y_train) # Make predictions y_pred = gbm.predict(X_test) # Evaluate the model score = gbm.score(X_test, y_test) print(f'Model score: {score}')"},{"prompt":"Create a program in Python that evaluates a postfix expression. The input to the program should be a string with the postfix expression. The output should be the evaluated value of the expression. 2 3 + 4 5 * *","completion":"def evaluate(expression): # split expression into list expression = expression.split() # stack to store integer values. stack = [] # do for every element of expression. for element in expression: # If element is an operand push # into stack it's a number only if element.isdigit(): stack.append(element) # if element is an operator, # pop two elements from stack # perform respective operations else: val1 = stack.pop() val2 = stack.pop() stack.append(str(eval(val2 + element + val1))) # return the value return (int(stack[0])) # Driver Code expression = \\"2 3 + 4 5 * *\\" print(evaluate(expression)) Output: 46"},{"prompt":"Write a Python script to identify the words that contain more than one vowel in a given sentence. Sentence: The quick brown fox jumped over the lazy dog.","completion":"import re sentence = \\"The quick brown fox jumped over the lazy dog.\\" pattern = r\\"b(w*[aeiou]w*){2,}b\\" match = re.findall(pattern, sentence) print(match) # Output: ['quick', 'brown', 'jumped', 'over', 'lazy']"},{"prompt":"This code provides a Python API for KB SRU. To use it, you can create an instance of the sru class and call its search method, passing in a query string and optionally a collection name, start record number, maximum number of records to return, and record schema. The method will return a response object containing the results of the search. You can then use the various properties of the response object to extract specific information from the search results, such as titles, creators, and subjects.","completion":"#! /usr/bin/env python \\"\\"\\" Python API for KB SRU \\"\\"\\" import sys import urllib import requests from lxml import etree SRU_BASEURL = 'http://jsru.kb.nl/sru/sru' SRU_BASEURL += '?version=1.2&maximumRecords=%i' SRU_BASEURL += '&operation=searchRetrieve' SRU_BASEURL += '&startRecord=%i' SRU_BASEURL += '&recordSchema=%s' SRU_BASEURL += '&x-collection=%s&query=%s' SETS = {'ANP': {'collection': 'ANP', 'description_en': 'Radio Bulletins ANP Press Agency', 'description_nl': 'ANP Radiobulletins Digitaal', 'metadataPrefix': 'didl', 'recordschema': 'dcx', 'setname': 'anp', 'time_period': [1937, 1989]}, 'DPO': {'collection': 'DPO_boekdeel', 'description_en': 'Early Dutch Books Online', 'description_nl': 'Early Dutch Books Online', 'metadataPrefix': 'didl', 'recordschema': 'ddd', 'setname': 'DPO', 'time_period': [1781, 1800]}, 'BYVANCK': {'description_en': 'Medieval Illuminated Manuscripts', 'description_nl': 'Middeleeuwse Verluchte Handschriften', 'metadataPrefix': 'dcx', 'setname': 'BYVANCK', 'time_period': [500, 1500]}, 'SGD': {'description_en': 'States General Digital', 'description_nl': 'Staten-Generaal Digitaal', 'metadataPrefix': 'dcx', 'setname': 'sgd:register', 'time_period': [1962, 1994]}, 'GGC': {'collection': 'GGC', 'description_en': 'General Catalogue KB', 'description_nl': 'Algemene Catalogus KB', 'metadataPrefix': 'dcx', 'recordschema': 'dcx', 'setname': 'ggc', 'time_period': [1937, 2021]}} # No idea what to use here? # Name spaces in GGC records srw_ns = 'http://www.loc.gov/zing/srw/' tel_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html' xsi_ns = 'http://www.w3.org/2001/XMLSchema-instance' dc_ns = 'http://purl.org/dc/elements/1.1/' dcterms_ns = 'http://purl.org/dc/terms/' dcx_ns = 'http://krait.kb.nl/coop/tel/handbook/telterms.html' NSMAPGGC = {\\"srw\\": srw_ns, \\"tel\\": tel_ns, \\"xsi\\": xsi_ns, \\"dc\\": dc_ns, \\"dcterms\\": dcterms_ns, \\"dcx\\": dcx_ns} class response(): def __init__(self, record_data, sru): self.record_data = record_data self.sru = sru def getElementText(self, tagName, attributeName, attributeValue): # Returns text content of all elements for which tag matches tagName, # and attribute value equals attributeValue. Set attributeName to empty # string to get all tagName matches. textFields = [] for r in self.record_data.iter(): if r.tag == tagName: if attributeName != '': try: if r.attrib[attributeName] == attributeValue: textFields.append(r.text) except KeyError: pass else: textFields.append(r.text) return textFields @property def records(self): if self.sru.nr_of_records == 0: record_data = \\"<xml></xml>\\" else: ns = {'zs': 'http://www.loc.gov/zing/srw/'} record_data = self.record_data.xpath(\\"zs:records/zs:record\\", namespaces=ns)[0] return record(record_data, self.sru) # Below property functions all return a list with all instances that satisfy # criteria @property def typesDutch(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}type', '{http://www.w3.org/XML/1998/namespace}lang', 'nl')) @property def typesDCMI(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}type', '{http://www.w3.org/2001/XMLSchema-instance}type', 'DCMIType')) @property def identifiersISBN(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier', '{http://www.w3.org/2001/XMLSchema-instance}type', 'dcterms:ISBN')) @property def identifiersBrinkman(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier', '{http://www.w3.org/2001/XMLSchema-instance}type', 'dcx:Brinkman')) @property def identifiersURI(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier', '{http://www.w3.org/2001/XMLSchema-instance}type', 'dcterms:URI')) @property def identifiersOCLC(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}identifier', '{http://www.w3.org/2001/XMLSchema-instance}type', 'OCLC')) @property def languagesDutch(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}language', '{http://www.w3.org/XML/1998/namespace}lang', 'nl')) @property def languagesEnglish(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}language', '{http://www.w3.org/XML/1998/namespace}lang', 'en')) @property def languagesFrench(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}language', '{http://www.w3.org/XML/1998/namespace}lang', 'fr')) @property def languagesISO639(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}language', '{http://www.w3.org/2001/XMLSchema-instance}type', 'dcterms:ISO639-2')) @property def dates(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}date', '', '')) @property def extents(self): return(self.getElementText('{http://purl.org/dc/terms/}extent', '', '')) @property def creators(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}creator', '', '')) @property def contributors(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}contributor', '', '')) @property def titles(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}title', '', '')) @property def titlesMain(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}title', '{http://www.w3.org/2001/XMLSchema-instance}type', 'dcx:maintitle')) @property def titlesIntermediate(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}title', '{http://www.w3.org/2001/XMLSchema-instance}type', 'dcx:intermediatetitle')) @property def publishers(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}publisher', '', '')) @property def countries(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}country', '', '')) @property def subjectsBrinkman(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject', '{http://www.w3.org/2001/XMLSchema-instance}type', 'dcx:Brinkman')) @property def subjectsISO9707(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject', '{http://www.w3.org/2001/XMLSchema-instance}type', 'ISO_9707_[Brinkman]')) @property def subjectsUNESCO(self): return(self.getElementText('{http://purl.org/dc/elements/1.1/}subject', '{http://www.w3.org/2001/XMLSchema-instance}type', 'UNESCO')) @property def collectionIdentifiers(self): return(self.getElementText('{http://purl.org/dc/terms/}isPartOf', '{http://www.w3.org/2001/XMLSchema-instance}type', 'dcx:collectionIdentifier')) @property def recordIdentifiersURI(self): return(self.getElementText('{http://krait.kb.nl/coop/tel/handbook/telterms.html}recordIdentifier', '{http://www.w3.org/2001/XMLSchema-instance}type', 'dcterms:URI')) @property def annotations(self): # Note that annotations sometimes contain language or itenID attibutes; # ignored for now (collect everything). return(self.getElementText('{http://krait.kb.nl/coop/tel/handbook/telterms.html}annotation', '', '')) class record(): def __init__(self, record_data, sru): self.record_data = record_data self.sru = sru def __iter__(self): return self # This works under Python 2.7 def next(self): if self.sru.nr_of_records == 0: raise StopIteration if self.sru.startrecord < self.sru.nr_of_records + 1: record_data = self.sru.run_query() self.sru.startrecord += 1 return response(record_data, self.sru) else: raise StopIteration # This works under Python 3 def __next__(self): if self.sru.nr_of_records == 0: raise StopIteration if self.sru.startrecord < self.sru.nr_of_records + 1: record_data = self.sru.run_query() self.sru.startrecord += 1 return response(record_data, self.sru) else: raise StopIteration class sru(): DEBUG = False collection = False maximumrecords = 50 nr_of_records = 0 query = \\"\\" recordschema = False sru_collections = SETS startrecord = 0 def search(self, query, collection=False, startrecord=1, maximumrecords=1, recordschema=False): self.maximumrecords = maximumrecords if sys.version.startswith('3'): self.query = urllib.parse.quote_plus(query) elif sys.version.startswith('2'): self.query = urllib.quote_plus(query) self.startrecord = startrecord if collection not in self.sru_collections: raise Exception('Unknown collection') self.collection = self.sru_collections[collection]['collection'] if not self.collection: raise Exception('Error, no collection specified') if not recordschema: self.recordschema = self.sru_collections[collection]['recordschema'] else: self.recordschema = recordschema record_data = self.run_query() nr_of_records = [i.text for i in record_data.iter() if i.tag.endswith('numberOfRecords')][0] self.nr_of_records = int(nr_of_records) if self.nr_of_records > 0: return response(record_data, self) return False def run_query(self): url = SRU_BASEURL % (self.maximumrecords, self.startrecord, self.recordschema, self.collection, self.query) if self.DEBUG: sys.stdout.write(url) r = requests.get(url) if not r.status_code == 200: raise Exception('Error while getting data from %s' % url) record_data = etree.fromstring(r.content) return record_data"},{"prompt":"Using numpy, create a Python code which would return an array with the running total of numbers in a given list.","completion":"import numpy as np def runningTotal(arr): return np.cumsum(arr)"},{"prompt":"Construct a neural network in Python that can perform basic regression. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from keras.models import Sequential from keras.layers import Dense # Load the data data = pd.read_csv('data.csv') # Split the data into features and labels X = data.drop(['label'], axis=1).values y = data['label'].values # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create the neural network model = Sequential() model.add(Dense(12, input_dim=X.shape[1], kernel_initializer='normal', activation='relu')) model.add(Dense(12, kernel_initializer='normal', activation='relu')) model.add(Dense(1, kernel_initializer='normal')) # Compile the model model.compile(loss='mean_squared_error', optimizer='adam') # Train the model model.fit(X_train, y_train, epochs=100, batch_size=20, verbose=0) # Evaluate the model score = model.evaluate(X_test, y_test, verbose=0) print('Test score:', score)"},{"prompt":"Generate a program in Python to take in two strings as input, and output a list of all thewords in both strings. String 1: I want to make a difference String 2: The journey to success is long","completion":"def string_to_list(s1, s2): s1_list = s1.split() s2_list = s2.split() output_list = s1_list + s2_list return output_list words = string_to_list(\\"I want to make a difference\\", \\"The journey to success is long\\") print(words)"},{"prompt":"Create a web scraper using Python that retrieves the 10 most recent articles from a news website. Not applicable","completion":"import requests from bs4 import BeautifulSoup # URL to scrap URL = 'http://example.com/news' # get the source code html_content = requests.get(URL).text # parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # get all the articles articles = soup.find_all('article') # print the first 10 articles for article in articles[:10]: print(article.text)"},{"prompt":"Create a Python program to convert HTML to plain text without using any libraries.","completion":"def html_to_text(html_string): output = '' in_tag = False for char in html_string: if char == '<': in_tag = True elif char == '>': in_tag = False elif in_tag == False: output += char return output"},{"prompt":"Write a python program to convert the given temperature from Celsius to Fahrenheit. 0°C","completion":"\\"\\"\\" Convert the given temperature from Celsius to Fahrenheit \\"\\"\\" def celsius_to_fahrenheit(celsius): fahrenheit = (celsius * 9/5) + 32 return fahrenheit if __name__ == '__main__': celsius = 0 print(celsius_to_fahrenheit(celsius))"},{"prompt":"Create a lambda expression in Python to filter a list of integer greater than 50. [45, 12, 52, 89, 33, 99]","completion":"list1 = [45, 12, 52, 89, 33, 99] filtered_list = list(filter(lambda x: x > 50, list1)) print(filtered_list)"},{"prompt":"Create a Python program to evaluate and compare the performance of two different heuristics algorithms.","completion":"import time import heuristics_algorithm1 import heuristics_algorithm2 #input data for algorithms data1 = ... data2 = ... #Evaluate and compare the performance of two different heuristics algorithms start = time.time() result1 = heuristics_algorithm1.run(data1) end = time.time() time1 = end - start start = time.time() result2 = heuristics_algorithm2.run(data2) end = time.time() time2 = end - start if time1 < time2: print(\\"Algorithm 1 is faster than algorithm 2\\") elif time2 < time1: print(\\"Algorithm 2 is faster than algorithm 1\\") else: print(\\"Both algorithms have the same performance time\\")"},{"prompt":"Generate a function in Python that takes in a dictionary (string → integer) and returns the sum of all values in the dictionary. my_dict = { a: 5, b: 10, c: 15 }","completion":"def compute_dict_sum(input_dict): result = 0 for val in input_dict.values(): result += val return result print(compute_dict_sum(my_dict))"},{"prompt":"Write a Python script that filters a list of integers and returns only even numbers. list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def filter_even_numbers(lst): # Filter out even numbers from the given list even_numbers = [num for num in lst if num % 2 == 0] return even_numbers list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] result = filter_even_numbers(list) print(result)"},{"prompt":"Generate a Python program that takes a sentence as input and prints out only the verbs. The cat jumped over the moon.","completion":"import nltk def extract_verbs(sentence): tokens = nltk.word_tokenize(sentence) tags = nltk.pos_tag(tokens) verbs = [word for word, pos in tags if pos.startswith('V')] return verbs sentence = \\"The cat jumped over the moon.\\" verbs = extract_verbs(sentence) print(verbs)"},{"prompt":"Create an AIbased system in Python for predicting stock market movements. Not applicable","completion":"#import libraries import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns #import data data = pd.read_csv('data.csv') #split data into train and test data X_train=data.iloc[:, 0] #Choosing the independent variable y_train=data.iloc[:, 1] #Choosing the dependent variable X_test=data.iloc[:, 0] #Choosing the independent variable y_test=data.iloc[:, 1] #Choosing the dependent variable #Build a deep learning model #import necessary libraries import tensorflow as tf from tensorflow.keras.layers import Dense from tensorflow.keras.models import Sequential #create a model and add layers model = Sequential() model.add(Dense(64, input_shape=(1,), activation='relu')) model.add(Dense(128, activation='relu')) model.add(Dense(64, activation='relu')) model.add(Dense(1)) #compile the model model.compile(optimizer='adam', loss='mse', metrics=['mse']) #train the model model.fit(X_train, y_train, batch_size=64, epochs=20, validation_data=(X_test, y_test)) #Evaluate the model score = model.evaluate(X_test, y_test, verbose=0)"},{"prompt":"Develop an API in Python that fetches data from an SQL database and presents the data in the form of a JSON. None","completion":"import json import sqlite3 from flask import Flask, request, jsonify app = Flask(__name__) def dict_factory(cursor, row): d = {} for idx, col in enumerate(cursor.description): d[col[0]] = row[idx] return d @app.route('/', methods=['GET']) def index(): connection = sqlite3.connect('database.db') connection.row_factory = dict_factory cur = connection.cursor() all_users = cur.execute('SELECT * FROM users;').fetchall() return jsonify(all_users) if __name__ == '__main__': app.run(debug = True)"},{"prompt":"Generate a Python dictionary that contains the count of the characters in a given string. Hello World","completion":"def count_chars(string): count_dict = {} for char in string: if char in count_dict: count_dict[char] += 1 else: count_dict[char] = 1 return count_dict print(count_chars(\\"Hello World\\")) # Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}"},{"prompt":"Write a Python program to store and querying user data. user_data = { Name: John, Age: 25, City: New York }","completion":"import json user_data = {\\"Name\\": \\"John\\", \\"Age\\": 25, \\"City\\": \\"New York\\"} def store_user_data(data): with open('user_data.json', 'w') as f: json.dump(data, f) def get_user_data(): with open('user_data.json') as f: return json.load(f) # store data in JSON file store_user_data(user_data) # get data data = get_user_data() print(data)"},{"prompt":"You are required to write a Python program to optimize an equation. x + x + y + y + y","completion":"def optimize_equation(equation): variables = [] for term in equation.split('+'): var, count = term.strip().split(' ') variables.append((var, int(count))) new_equation = \\"\\" for var, count in variables: new_equation += (var + '^' + str(count)) + ' + ' return new_equation[:-3] equation = 'x + x + y + y + y' print(optimize_equation(equation))"},{"prompt":"Generate Python code that takes a list of strings and generates a list of lists of words from the strings. The returned list should have the first word for each string followed by following words for each string. [Hello world, This is a test]","completion":"def get_word_lists(strings): word_lists = [] for string in strings: words = string.split(\\" \\") word_list = [] for i in range(len(words)): word_list.append(words[i:]) word_lists.append(word_list) return word_lists word_lists = get_word_lists([\\"Hello world\\", \\"This is a test\\"]) print(word_lists) # prints \\"[[\\"Hello\\", \\"world\\"], [\\"This\\", \\"is\\", \\"a\\", \\"test\\"]]\\""},{"prompt":"Create a web scraper that extracts specific data from a given website.","completion":"The web scraper should utilize the Python package BeautifulSoup to parse webpages and extract the required data. BeautifulSoup will allow us to find HTML elements on the webpage using tags and attributes. Once the data is found, it can be converted into the desired format and stored. For example, to extract the URL from a list of webpages, the following code snippet can be used: import requests from bs4 import BeautifulSoup # Get the web page webpage = requests.get(\\"<url_of_webpage>\\") # Parse the web page soup = BeautifulSoup(webpage.content, 'html.parser') # Find all 'a' tags links = soup.find_all('a') # Extract the URLs in the 'href' attribute for link in links: print(link.get('href'))"},{"prompt":"Construct a script in Bash that can install a given software. Python 3.8.5","completion":"#!/bin/bash # Download latest version of Python curl -O https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tgz # Extract the tgz file tar -xzf Python-3.8.5.tgz # Move into the Python directory cd Python-3.8.5 # Run the configure script ./configure # Compile and install make make install"},{"prompt":"Write a function in Python that takes a list of integers and returns a new list containing only odd numbers. [3, 8, 6, 10, 17]","completion":"def odd_numbers_list(numbers): return [num for num in numbers if num % 2 != 0]"},{"prompt":"Create a Python script that adds two numbers together and prints the result.","completion":"def add(a, b): sum = a + b print(sum) add(5,7)"},{"prompt":"Design an algorithm in Python to find the most common elements in an array of integers. [3, 4, 1, 2, 5, 3, 3]","completion":"def most_common(nums): # Create a dictionary to store the counts counts = {} # Iterate over the elements for num in nums: # If the element is not present in the dictionary, add it if num not in counts: counts[num] = 0 # Update the count counts[num] += 1 # Get the maximum count max_count = max(counts.values()) # Return the elements that have maximum count return [num for num, count in counts.items() if count == max_count]"},{"prompt":"Write a Python program to find the maximum element in the given array [1, 10, 50, 3, 8]. Not applicable","completion":"array = [1, 10, 50, 3, 8] # Get the maximum element max_element = max(array) print(max_element) # Output: 50"},{"prompt":"Create a Python script to analyze the sentiment of a text.","completion":"import re from nltk.stem.snowball import SnowballStemmer from nltk.tokenize import word_tokenize from nltk.corpus import stopwords from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_analyzer(text): # Tokenize the text tokens = word_tokenize(text) # Create stemmer object stemmer = SnowballStemmer('english') # Stem each token stemmed_words = [stemmer.stem(word) for word in tokens] # Remove punctuation clean_words = [word for word in stemmed_words if re.match('[a-zA-Z-]+', word)] # Remove stopwords meaningful_words = [word for word in clean_words if not word in stopwords.words('english')] # Create a SentimentIntensityAnalyzer object sid = SentimentIntensityAnalyzer() # Get the polarity score of the text polarity_score = sid.polarity_scores(' '.join(meaningful_words)) return polarity_score"},{"prompt":"Create a Python script that takes a list of email addresses as input and prints a filtered list of email addresses that belong to a particular domain. list = [john@gmail.com, sarah@yahoo.com, bob@microsoft.com, sophie@gmail.com]","completion":"filtered_list = [email for email in list if email.endswith(\\"@gmail.com\\")] print(filtered_list) # Output: [\\"john@gmail.com\\", \\"sophie@gmail.com\\"]"},{"prompt":"Generate a Python function to execute a valid insertion sort on a given list of integers.","completion":"def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i] j = i -1 while j >= 0 and key < arr[j] : arr[j + 1] = arr[j] j = j - 1 arr[j + 1] = key return arr"},{"prompt":"Generate a program to sort a list of numbers using Insertion Sort algorithm in Python.","completion":"def insertionSort(arr): for i in range(1, len(arr)): current = arr[i] j =i-1 while j>=0 and arr[j]>current: arr[j+1] = arr[j] j-=1 arr[j+1] = current return arr if __name__ == '__main__': arr = [2, 4, 7, 3, 8, 6, 1] print(insertionSort(arr))"},{"prompt":"Create an Python function that takes a string containing a numerical expression and returns the result.","completion":"def eval_expr(expr): return eval(expr)"},{"prompt":"Given a jsonformatted string, create a python program to parse it into a dict. data = '{name: John,age: 30,address: {city: New York,state: NY}}'","completion":"import json data = '{\\"name\\": \\"John\\",\\"age\\": 30,\\"address\\": {\\"city\\": \\"New York\\",\\"state\\": \\"NY\\"}}' data_dict = json.loads(data)"},{"prompt":"Create a Python program to compress a given string by replacing all repeating characters with a single instance and its count. String: aabbbbbbcccc","completion":"def compress(s): # Initialize results output = \\"\\" # Initialize count count = 1 # Traverse the string for i in range(len(s)): # If the current character is same # as next one, increment its count if (i+1 < len(s) and s[i] == s[i+1]): count += 1 else: # Append the count and character outputo + = str(count) + s[i] # Reset the count count = 1 # Append the last obtained characters # and their count output += str(count) + s[i] return output s = \\"aabbbbbbcccc\\" print(compress(s)) # Output: 2a6b4c"},{"prompt":"Create a basic CRUD API for the BlogPost model with Python/Flask. The API should include endpoints for creating a post, getting all posts, getting a single post, editing a post, and deleting a post. Not applicable","completion":"from flask import Flask, jsonify, request from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db' db = SQLAlchemy(app) class BlogPost(db.Model): id = db.Column(db.Integer, primary_key=True) title = db.Column(db.String(200)) content = db.Column(db.Text) def __repr__(self): return '<BlogPost %r>' % self.title @app.route('/post', methods=['POST']) def create_post(): data = request.get_json() post = BlogPost(title=data['title'], content=data['content']) db.session.add(post) db.session.commit() return jsonify(post.id) @app.route('/posts', methods=['GET']) def get_posts(): posts = BlogPost.query.all() return jsonify([post.serialize() for post in posts]) @app.route('/post/<id>', methods=['GET']) def get_post(id): post = BlogPost.query.filter_by(id=id).first() return jsonify(post.serialize()) @app.route('/post/<id>', methods=['PUT']) def edit_post(id): data = request.get_json() post = BlogPost.query.filter_by(id=id).first() post.title = data['title'] post.content = data['content'] db.session.commit() return jsonify(post.serialize()) @app.route('/post/<id>', methods=['DELETE']) def delete_post(id): post = BlogPost.query.filter_by(id=id).first() db.session.delete(post) db.session.commit() return jsonify({ 'message' : 'Post deleted' }) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python program that calculates the distance between two points on a twodimensional plane. Point1 (x1: 3, y1: 4); Point2 (x2: 9, y2: 2)","completion":"#include <iostream> #include <math.h> int main() { int x1 = 3; int y1 = 4; int x2 = -9; int y2 = -2; float distance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2)); std::cout << \\"Distance between the two points is: \\" << distance << std::endl; return 0; }"},{"prompt":"Create an AIbased chatbot in Python that can answer simple queries about a product or service. Not applicable","completion":"import random # The answers to the queries answers = { 'What is XYZ?': 'XYZ is a company that provides XYZ services.', 'What does XYZ do?': 'XYZ helps customers find solutions to their problems.', 'Where is XYZ located?': 'XYZ is located in ABC city.', 'What are the benefits of using XYZ?': 'XYZ provides a quick and easy way to find solutions to your problems.' } # Generate a response def generate_response(question): if question in answers: return answers[question] else: return random.choice(['I am not sure I understand.', 'Can you give me more information?', 'Can I help you with something else?']) # Start the conversation question = input('Welcome to XYZ. How can I help you? ') response = generate_response(question) while response != 'Goodbye': print(response) question = input('Is there anything else I can help you with? ') response = generate_response(question) print('Goodbye!')"},{"prompt":"Generate a python program to read the contents from a given URL","completion":"import requests def read_url(url): r = requests.get(url) if r.status_code == 200: return r.text else: return None"},{"prompt":"Code a function in Python that takes a list of integers (denoted by \`lst\`) and returns a list of booleans where each element of the output list is \`True\` if the corresponding element in the input list is a prime number, and \`False\` otherwise. lst = [7, 8, 12, 19, 22, 23]","completion":"def is_prime(n): # check if n is divisible by any of the numbers # between 2 and n-1 for i in range(2, n): if n % i== 0: return False return True def check_lst(lst): # generate a list of booleans # where each element corresponds to the corresponding # element of lst result_lst = [] for i in range(len(lst)): if is_prime(lst[i]): result_lst.append(True) else: result_lst.append(False) return result_lst lst = [7, 8, 12, 19, 22, 23] print(check_lst(lst)) # Output: # [True, False, False, True, False, True]"},{"prompt":"Generate a program in Python to output the top 3 numbers from an array of integers [7, 13, 5, 8, 50, 11, 64, 48]","completion":"def top_three(numbers): sorted_numbers = sorted(numbers, reverse=True) return sorted_numbers[:3] print(top_three([7, 13, 5, 8, 50, 11, 64, 48]))"},{"prompt":"Using Python, build a dictionary containing the numbers from 1 to n as the key and the square of each number as the value. n = 10","completion":"my_dict = {} for i in range(1,n+1): my_dict[i] = i**2 print(my_dict)"},{"prompt":"Edit the following Python program to make a correct API request and parse the response. import requests url = 'https://api.example.com/users' response = requests.get(url) print(response.json())","completion":"import requests url = 'https://api.example.com/users' headers = { 'Authorization': 'Bearer YOUR_API_TOKEN', 'Content-Type': 'application/json', } response = requests.get(url, headers=headers).json() for user in response['data']: print(user)"},{"prompt":"Create a Python program that takes in text input from the user and searches a given list of strings to find any matches. strings = [First,Second,Third]","completion":"import re # input string strings = [\\"First\\",\\"Second\\",\\"Third\\"] # Get the string inp_str = input(\\"Please enter your string :\\") # Initialize the flag found = False # Search the string for i in strings: if re.search(i, inp_str): found = True # Print result if found == True: print(\\"String matches\\") else: print(\\"String doesn't matches\\")"},{"prompt":"Generate a program in Python to convert all characters of a string in lowercase. String = HELLO","completion":"def to_lower(string): return string.lower()"},{"prompt":"Edit the following Python program to use a dictionary instead of a list. items = [1, 2, 3, 4] for item in items: print(item)","completion":"items = {1: 'one', 2: 'two', 3: 'three', 4: 'four'} for key, value in items.items(): print(value)"},{"prompt":"Construct a prime number sieve in Python which returns a list of all primes up to a given number. n = 10","completion":"def primeSieve(n): prime_list = [True for i in range(n+1)] p = 2 while (p * p <= n): if (prime_list[p] == True): for i in range(p * 2, n+1, p): prime_list[i] = False p += 1 primes=[] for p in range(2, n): if prime_list[p]: primes.append(p) return primes print(primeSieve(10)) # [2, 3, 5, 7]"},{"prompt":"Write a python code to print all prime numbers between 1 and a given number n.","completion":"# Function to generate prime numbers between 1 and a given number n def generate_prime_numbers(n): # Array for checking if a number is prime or not prime_list = [True for i in range(n + 1)] p = 2 while (p * p <= n): # If prime_list[p] is not changed, then it is a prime if (prime_list[p] == True): # Update all multiples of p for i in range(p * 2, n + 1, p): prime_list[i] = False p += 1 # Collecting prime numbers for p in range(2, n): if prime_list[p]: print(p)"},{"prompt":"Find the optimal solution to solve a knapsack problem using dynamic programming. Given Items (with values and weights): [(60, 10), (100, 20), (120, 30)] Capacity of Knapsack: 50","completion":"// A Naive recursive Python // program for 0-1 Knapsack problem # Returns the maximum value # that can be put in a knapsack of # capacity W def knapSack(W, wt, val, n): # Base Case if n == 0 or W == 0 : return 0 # If weight of the nth item is more # than Knapsack capacity W, then # this item cannot be included in the optimal solution if (wt[n-1] > W): return knapSack(W, wt, val, n-1) # return the maximum of two cases: # (1) nth item included # (2) not included else: return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), knapSack(W, wt, val, n-1)) # end of function knapSack"},{"prompt":"Using Python, create a function that calculates the objective function of a linear equation. ax + by = c a = 3, b = 5, c = 7","completion":"def linear_eq(a, b, c): return a*x + b*y - c # For example: result = linear_eq(3, 5, 7) print(result)"},{"prompt":"mplement an insertion sort algorithm in Python.","completion":"def insertion_sort(list): for i in range(1,len(list)): key = list[i] j = i - 1 while j>=0 and key < list[j]: list[j+1] = list[j] j-=1 list[j+1] = key return list"},{"prompt":"Write a python program to generate a random password given a set of letters, numbers, and characters. No inpu","completion":"import random # All the possible characters # that could go into the password string = \\"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#%^&*()?\\" # Using the choice function of the # random module choose any # character randomly from the set of characters password = \\"\\".join(random.sample(string, 8)) print(password)"},{"prompt":"Develop a Python module to generate random numbers.","completion":"import random def generate_random_numbers(length, min_value, max_value): return [random.uniform(min_value, max_value) for _ in range(length)]"},{"prompt":"w do we use recursion to solve a given problem in Python?","completion":"Recursion is a powerful technique for solving problems. It involves defining a problem in terms of itself. A recursion problem is solved by breaking it down into smaller problems, until the problem is small enough to be solved directly. The result from a smaller problem can then be combined with the result from the larger problem, until the original problem is solved. In Python, a recursive function is one that calls itself."},{"prompt":"Create an application using Python and Flask to submit form data and store it in a database. Form elements: Name, Email, Phone","completion":"from flask import Flask, render_template, request, redirect import sqlite3 app = Flask(__name__) @app.route('/') def home(): return render_template('index.html') @app.route('/submit', methods=['POST']) def submit(): name = request.form.get('name') email = request.form.get('email') phone = request.form.get('phone') conn = sqlite3.connect('data.db') cur = conn.cursor() cur.execute(\\"INSERT INTO data (name, email, phone) VALUES (?, ?, ?)\\", (name, email, phone)) conn.commit() return redirect('/') if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Optimize a Python program that processes a 2d array and stores the transpose output in a new array. Not applicable","completion":"def transpose(A): n = len(A) m = len(A[0]) B = [[0 for x in range(n)] for x in range(m)] for i in range(n): for j in range(m): B[j][i] = A[i][j] return B"},{"prompt":"Generate a Python script that takes any number of integer arguments and returns their sum. 3 5 7","completion":"def sum_ints(*args): total = 0 for num in args: total += num return total print(sum_ints(3, 5, 7))"},{"prompt":"Create a function in Python which takes a list as input and returns the sum of the items in the list.","completion":"def sum_list(input_list): sum = 0 for i in input_list: sum += i return sum"},{"prompt":"Create a Selenium script in Python to automate the login process in a given website. Target website: www.example.com","completion":"from selenium import webdriver from selenium.webdriver.common.keys import Keys import time # Initialize web driver driver = webdriver.Chrome() # Navigate to the target web page driver.get('http://www.example.com') # Locate username field username = driver.find_element_by_name('username') # Enter username username.send_keys('username') # Locate password field password = driver.find_element_by_name('password') # Enter password password.send_keys('password') # Locate submit button submit_button = driver.find_element_by_name('submit') # Click submit button submit_button.click() # Wait for login process to complete time.sleep(5) # Login successful print('Login successful!') driver.close()"},{"prompt":"Create an AI model in Python to classify emails from the Enron Spam Dataset as either spam or nonspam. Not applicable","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn import svm from sklearn.metrics import precision_score # Load the dataset df = pd.read_csv(\\"spam.csv\\", encoding='iso-8859-1') # Load label and data X = df['EmailText'] y = df['Label'] # Split data into train-test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42) # Create bag of words model count_vectorizer = CountVectorizer() X_train_counts = count_vectorizer.fit_transform(X_train) # Train the model clf = svm.SVC(kernel='linear') clf.fit(X_train_counts, y_train) # Test the model X_test_counts = count_vectorizer.transform(X_test) predictions = clf.predict(X_test_counts) score = precision_score(y_test, predictions, average='binary') print('Precision score of the model:', score)"},{"prompt":"Rewrite the following SQL query in Python. SELECT * FROM Movies WHERE category = 'horror';","completion":"import sqlite3 conn = sqlite3.connect('movies.db') cursor = conn.cursor() cursor.execute(\\"SELECT * FROM Movies WHERE category = 'horror'\\") result = cursor.fetchall() for row in result: print(row) conn.close()"},{"prompt":"Take two matrices, A and B, and produce a matrix C where each element is the product of the corresponding elements of A and B. A = [[3, 4], [1, 2]] B = [[7, 5], [0, 1]]","completion":"# Python def matrixMultiplication(A, B): if len(A[0]) != len(B): return \\"Matrix multiplication not possible\\" C = [[0 for i in range(len(A[0]))] for j in range(len(B[0]))] for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): C[i][j] += A[i][k] * B[k][j] return C A = [[3, 4], [1, 2]] B = [[7, 5], [0, 1]] C = matrixMultiplication(A, B) print(C) # Output = [[21, 17], [0, 2]]"},{"prompt":"Come up with a correct approach to optimize the following python program. numbers = [1, 2, 3, 4, 5, 6] for x in numbers: print(x)","completion":"numbers = [1, 2, 3, 4, 5, 6] print(*numbers, sep='n')"},{"prompt":"Design a program in Python to detect the vowel in a given string. Hello World","completion":"def vowelCheck(inputString): vowels = ['a','e','i','o','u','A','E','I','O','U'] for x in inputString: if x in vowels: return x"},{"prompt":"Convert a given SQL statement into a Python Pandas DataFrame. SELECT * FROM book;","completion":"import pandas as pd df = pd.read_sql_query(\\"SELECT * FROM book;\\", conn)"},{"prompt":"Using the data provided, generate a histogram in Python. data = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]","completion":"import matplotlib.pyplot as plt data = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150] # plotting the histogram plt.hist(data, bins = [0, 20, 40, 60, 80, 100, 120, 140, 160], edgecolor = 'black') # x-axis label plt.xlabel('Range of values') # y-axis label plt.ylabel('Number of Occurrences') # plot title plt.title('Histogram of data') # function to show the plot plt.show()"},{"prompt":"Create a Python script to populate an array with random numbers from 1100.","completion":"import random def populateArray(array_length): array = [] for i in range(array_length): array.append(random.randint(1, 100)) return array"},{"prompt":"Create an natural language processing application in Python that extracts the top 10 most frequent words from a given text. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.","completion":"from collections import Counter text = \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\" # Split the text into individual words words = text.split() # Create a counter object counter = Counter(words) # Get the top 10 most frequent words top_words = counter.most_common(10) print(top_words) # Output: [('dolor', 1), ('Lorem', 1), ('ipsum', 1), ('amet', 1), ('consectetur', 1), ('adipiscing', 1), ('elit,', 1), ('sed', 1), ('do', 1), ('eiusmod', 1)]"},{"prompt":"Given an array of strings, write a Python function to remove all duplicates and return the resulting array. Example array: ['a', 'b', 'a', 'c', 'c', 'd']","completion":"def removeDuplicates(arr): result = [] # traverse for all elements for i in arr: # check if exists in result if i not in result: result.append(i) # return result return result"},{"prompt":"Generate a Python script to find the longest common substring in two strings. Helwallomst, Welcome","completion":"def longest_common_substring(str1, str2): match = 0 substr = \\"\\" for i in range(len(str1)): for j in range(len(str2)): l = 0 while (i + l < len(str1) and j + l < len(str2) and str1[i + l] == str2[j + l]): l += 1 if l > match: substr = str1[i:i + l] match = l return substr result = longest_common_substring(\\"Helwallomst\\", \\"Welcome\\") print(result)"},{"prompt":"Write a function in Python to search for a character in a given string. String: “Hello” Character: ‘l’","completion":"def serach_char(input_str, char): for char in input_str: if char == input_char: return True return False"},{"prompt":"Write a python program to parse an XML document and return a list of tag objects. <xml> <root> <child1 id=1> <subchild1 value=a> </subchild1> <subchild2 value=b> </subchild2> </child1> <child2 id=2> <subchild3 value=c> </subchild3> <subchild4 value=d> </subchild4> </child2> </root> </xml>","completion":"def parse_xml(text): tag_objects = [] root = ET.fromstring(text) for child in root: tag = Tag(child.attrib[\\"id\\"]) for subchild in child: tag.add_value(subchild.attrib[\\"value\\"]) tag_objects.append(tag) return tag_objects class Tag: def __init__(self, tag_id): self.tag_id = tag_id self.values = [] def add_value(self, value): self.values.append(value)"},{"prompt":"Based on a given input, create a function in Python to generate a random string of length 6.","completion":"import random import string def random_string(length): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(length)) random_string(6)"},{"prompt":"Create a Python program to average the elements of a 2dimensional array. a = [[3,2,6], [8,5,9], [4,7,1]]","completion":"def averageMatrix(matrix): sum = 0 for row in matrix: for e in row: sum += e return sum / (len(matrix) * len(matrix[0])) a = [[3,2,6], [8,5,9], [4,7,1]] print(averageMatrix(a)) # 4.77"},{"prompt":"Generate a code in Python to convert a number into binary format.","completion":"\\"\\"\\" Generate a code in Python to convert a number into binary format \\"\\"\\" def convert_to_binary(num): # check if the number is 0, if so return 0 if num == 0: return 0 # initialize an empty binary string binary = '' # loop through the number and get the remainder # which is the bits of the binary while num != 0: remainder = num % 2 binary = str(remainder) + binary num = num // 2 return binary # test the function print(convert_to_binary(10)) # 1010"},{"prompt":"Generate a python program that takes an integer and then prints out the factorial of it? 7","completion":"def factorial(num): if num <= 1: return 1 else: return num * factorial(num - 1) n = int(input(\\"Enter a number: \\")) print(\\"Factorial of\\",n,\\"is\\",factorial(n))"},{"prompt":"Write a Python program to convert a positive integer to negative or vice versa using bitwise NOT operator.","completion":"def convert_to_negative(x): return ~x + 1 def convert_to_positive(x): return ~(x-1)"},{"prompt":"Build a simple blockchain system in Python. Not applicable","completion":"import hashlib import json # Define the Block class class Block: def __init__(self, index, timestamp, data, previous_hash): self.index = index self.timestamp = timestamp self.data = data self.previous_hash = previous_hash self.hash = self.hash_block() # Create the hash of the block contents def hash_block(self): sha = hashlib.sha256() sha.update((str(self.index) + str(self.timestamp) + str(self.data) + str(self.previous_hash)).encode('utf-8')) return sha.hexdigest() # Create the blockchain def create_blockchain(): blockchain = [create_genesis_block()] previous_block = blockchain[0] # Add blocks for each item in the list of transactions for i in range(1, len(blockchain_transactions)): block_to_add = next_block(previous_block, blockchain_transactions[i]) blockchain.append(block_to_add) previous_block = block_to_add # Print the blockchain def print_blockchain(): for block in blockchain: block_index = str(block.index) block_timestamp = str(block.timestamp) block_data = str(block.data) block_hash = block.hash"},{"prompt":"Write a Python script to find the GCD of two numbers. 1000, 500","completion":"def findGCD(a, b): if (b == 0): return a return findGCD(b, a % b) a = 1000 b = 500 print(\\"GCD of number is: \\", findGCD(a, b))"},{"prompt":"Create a program in Python to find the number of occurrences of an element x in a list y. [3, 5, 2, 7, 4, 3, 2], x = 2","completion":"def count_x(x, y): count = 0 for i in y: if i == x: count += 1 return count"},{"prompt":"Write a Python program to convert ratings in a list of strings to a float. ['4.5', '3.0', '2.5', '4.0']","completion":"def str_to_float(ratings): return [float(x) for x in ratings]"},{"prompt":"Create a Python program that encrypts a message using a Caesar cipher.","completion":"def caesar_encrypt(message, shift): encrypted_message = \\"\\" for c in message: encrypted_c = ord(c) + shift if encrypted_c > 126: encrypted_c -= 94 encrypted_message += chr(encrypted_c) return encrypted_message"},{"prompt":"Write a Python program to find the largest three numbers in a list. 1, 6, 3, 8, 7, 4","completion":"my_list = [1, 6, 3, 8, 7, 4] largest_three = sorted(my_list)[-3:] print(largest_three)"},{"prompt":"Given two binary trees, check if the first tree is subtree of the second tree.","completion":"# Python program to check if # a binary tree is subtree of another binary tree # A binary tree node class Node: # Constructor to create a new node def __init__(self, data): self.data = data self.left = None self.right = None def isSubTree(T, S): if S is None: return True if T is None: return False if areIdentical(T, S): return True return isSubTree(T.left, S) or isSubTree(T.right, S) def areIdentical(T, S): if T is None and S is None: return True if T is None or S is None: return False return (T.data == S.data and areIdentical(T.left, S.left)and areIdentical(T.right, S.right))"},{"prompt":"Write a Python program to swap the values of two variables.","completion":"x = 5 y = 10 # Swapping process x, y = y, x print(\\"x:\\", x) print(\\"y:\\", y)"},{"prompt":"Optimize the following Python code to use builtin functions. def removeDuplicates(array): for i in range (len(array)): for j in range (i + 1, len(array)): if array[i] == array[j]: array.pop(j)","completion":"def removeDuplicates(array): finalArray = [] for element in array: if element not in finalArray: finalArray.append(element) return finalArray"},{"prompt":"Create a program in Python that takes a list of words and an integer n and returns a list of words that appear at least n times in the given list. words =['a', 'b', 'a', 'c', 'd', 'a', 'x', 'd', 'd'] n = 3","completion":"from collections import Counter def frequent_words(words, n): counts = Counter(words) return [word for word, count in counts.items() if count >= n] result = frequent_words(words, n) print(result) # prints ['a', 'd']"},{"prompt":"Devise a Python program to determine whether a given number is even or odd.","completion":"def even_or_odd(num): if num % 2 == 0: return \\"Even\\" else: return \\"Odd\\""},{"prompt":"Compose a basic blockchain system in Python.","completion":"import hashlib import json # We will use SHA256 as our hashing function def sha256(data): hash_function = hashlib.sha256() hash_function.update(data.encode('utf-8')) return hash_function.hexdigest() # Create a class for each block class Block: def __init__(self, index, timestamp, data, previous_hash): self.index = index self.timestamp = timestamp self.data = data self.previous_hash = previous_hash self.hash = sha256(f'{self.index}{self.timestamp}{self.data}{self.previous_hash}') # Create a class for the blockchain class Blockchain: def __init__(self): self.chain = [] def add_block(self, data): previous_hash = self.chain[-1].hash if len(self.chain) > 0 else None block = Block(len(self.chain), data['timestamp'], data['data'], previous_hash) self.chain.append(block) # This method will return the entire blockchain in JSON format def get_chain(self): return json.dumps([b.__dict__ for b in self.chain], indent=2)"},{"prompt":"Provide a Python code that uses the exponential smoothing algorithm to predict the next day's forecast temperature given the past three day's forecast temperatures. [21, 22, 20]","completion":"\\"\\"\\" This code uses the exponential smoothing algorithm to predict the next day's forecasted temperature given the past three day's forecasted temperatures. \\"\\"\\" def predict_temperature(temperature_list): alpha = 0.5 #Confidence value predicted_temperature = temperature_list[-1] # Initializing prediction for temperature in temperature_list[:-1]: predicted_temperature = alpha*temperature + (1-alpha)*predicted_temperature return predicted_temperature if __name__ == '__main__': temperature_list = [21, 22, 20] print(predict_temperature(temperature_list))"},{"prompt":"Write a function in Python to sort a dictionary according to its values, in descending order. dictionary = {'apple': 2, 'banana': 3, 'mango': 1}","completion":"def sortDictionary(dictionary): sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True) sorted_dictionary = dict(sorted_list) return sorted_dictionary sorted_dictionary = sortDictionary({'apple': 2, 'banana': 3, 'mango': 1}) print(sorted_dictionary)"},{"prompt":"Create a function in Python to generate a multiplication table with numbers in a range given start and end parameters. start = 5 end = 10","completion":"def multiplication_table(start, end): for x in range(start, end + 1): for y in range(start, end + 1): print(x * y, end = \\" \\") print(\\"n\\") multiplication_table(start, end)"},{"prompt":"Write a python program to identify if a string s has matching parentheses","completion":"def matching_paren(s): stack = [] for char in s: if char == '(': stack.append(char) elif char == ')': if len(stack) == 0: return False stack.pop() if len(stack) == 0: return True else: return False"},{"prompt":"Develop a function in Python to take as input two array of integers and swap their elements. arr1 = [3, 5, 6, 9] arr2 = [2, 4, 7, 8]","completion":"def swap(arr1, arr2): assert len(arr1) == len(arr2) for i in range(len(arr1)): temp = arr1[i] arr1[i] = arr2[i] arr2[i] = temp"},{"prompt":"Can you design a function in Python for reversing a list? [1,2,3,4,5]","completion":"def reverse_list(list): return list[::-1]"},{"prompt":"Create a Python script to build a dictionary from string to string of the given samples. Samples: apple>red banana>yellow cherry>red","completion":"def build_dictionary(samples): dictionary = {} for sample in samples: key, value = sample.split(\\"->\\") dictionary[key] = value return dictionary samples = [\\"apple->red\\", \\"banana->yellow\\", \\"cherry->red\\"] dictionary = build_dictionary(samples) print(dictionary)"},{"prompt":"Write a Python script to find the average of numbers stored in an array. [10, 20, 30]","completion":"def calculate_mean(numbers): total_sum = 0 for num in numbers: total_sum += num mean = total_sum / len(numbers) return mean print(calculate_mean([10, 20, 30]))"},{"prompt":"Generate a Python program that takes two lists as input and returns a new list containing only the common elements. [1, 2, 3, 4, 8], [2, 6, 8, 10]","completion":"def common_elements(list1, list2): common_list=[] for element in list1: if element in list2: common_list.append(element) return common_list list1 = [1, 2, 3, 4, 8] list2 = [2, 6, 8, 10] common_list = common_elements(list1, list2) print(common_list)"},{"prompt":"Create a loop in Python to print out all the odd numbers from 1 to 10.","completion":"for i in range(1, 11): if i % 2 != 0: print(i)"},{"prompt":"Create a machine learning model in Python that predecits customer lifetime value given a customer's past transactions. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.preprocessing import StandardScaler from sklearn.ensemble import RandomForestRegressor # Preprocessing df = pd.read_csv('transactions.csv') X = df.iloc[:,:-1].values y = df.iloc[:,-1].values scaler = StandardScaler() X = scaler.fit_transform(X) # Model Training model = RandomForestRegressor() model.fit(X, y) # Prediction customer_input = np.array([[10,100,5,...]]) # provide data related to past transactions trans_scaled = scaler.transform(customer_input) predicted_LTV = model.predict(trans_scaled)[0] print('Predicted customer lifetime value', predicted_LTV)"},{"prompt":"Given a list of numbers and a target number, write a Python program to find a pair of numbers from the given list that add up to the given target. Input List: [1, 2, 3, 4, 4, 5, 6] Target: 8","completion":"def find_pair(lst, target): for i in range(len(lst)): if (target - lst[i]) in lst[i+1:]: return [lst[i], target-lst[i]] find_pair([1,2,3,4,4,5,6], 8)"},{"prompt":"Develop a class in Python to perform various matrix operations like addition, subtraction, multiplication and transpose.","completion":"class Matrix: def __init__(self, m, n, lst): self.m = m self.n = n self.mat = [] c = 0 for i in range(self.m): a =[] for j in range(self.n): a.append(lst[c]) c += 1 self.mat.append(a) def __str__(self): output = \\"\\" for i in self.mat: for j in i: output += str(j) + \\" \\" output += 'n' return output def add(self, mat2): for i in range(self.m): for j in range(self.n): self.mat[i][j] += mat2.mat[i][j] def sub(self, mat2): for i in range(self.m): for j in range(self.n): self.mat[i][j] -= mat2.mat[i][j] def mul(self, mat2): result = [] for i in range(self.m): a =[] for j in range(mat2.n): s = 0 for k in range(self.n): s += self.mat[i][k] * mat2.mat[k][j] a.append(s) result.append(a) self.mat = result self.m = len(result) self.n = len(result[0]) def transpose(self): result = [[self.mat[j][i] for j in range(len(self.mat))] for i in range(len(self.mat[0]))] self.mat = result self.m = len(result) self.n = len(result[0])"},{"prompt":"Write a Python script to generate a random number between 0 and 9.","completion":"import random random_num = random.randint(0,9) print(random_num)"},{"prompt":"Create a Python Flask app that listens for POST requests on the '/webhook' route. When a request is received, extract the necessary parameters from the request and call the 'makeWebhookResult' function to generate a response. The response should be a JSON object containing a 'speech' field with the text to be spoken by the voice assistant. The app should be started on port 5000 and run in debug mode.","completion":"#!/usr/bin/env python # coding=utf-8 import requests import urllib2 import json import os from flask import Flask from flask import request from flask import make_response from bs4 import BeautifulSoup # Flask app should start in global layout app = Flask(__name__) @app.route('/webhook', methods=['POST']) def webhook(): req = request.get_json(silent=True, force=True) res = makeWebhookResult(req) res = json.dumps(res, indent=4) print(res) r = make_response(res) r.headers['Content-Type'] = 'application/json' return r def makeWebhookResult(req): result = req.get(\\"result\\") parameters = result.get(\\"parameters\\") if req.get(\\"result\\").get(\\"action\\") == \\"productos.sura\\": cliente = parameters.get(\\"tipo_cliente\\") speech = \\"Buscando productos para \\" + cliente elif req.get(\\"result\\").get(\\"action\\") == \\"producto.info\\": producto = parameters.get(\\"producto\\") if (producto==\\"hogar\\"): url = \\"https://www.sura.com/soluciones-personas/seguro-hogar.aspx\\" r = urllib2.urlopen(url).read() soup = BeautifulSoup(r, 'html.parser') print soup contenido = soup.find_all(\\"div\\",class_=\\"textRightColumn\\") if (len(contenido)==0): speech = \\"No encontrado\\" else: speech = contenido[0] else: speech = \\"Buscando informacion del producto \\" + producto elif req.get(\\"result\\").get(\\"action\\") == \\"planes.salud\\": url = \\"https://api.segurossura.com.co/public/v1/directory/products\\" myResponse = requests.get(url) if(myResponse.ok): jData = json.loads(myResponse.text) speech = \\"Seguros Sura Colombia ofrece los siguientes planes de salud: n\\" for plan in jData: speech = speech + \\"n\\" + plan[\\"nombreField\\"].title() elif req.get(\\"result\\").get(\\"action\\") == \\"info.especialistas\\": producto = parameters.get(\\"plan-salud\\") ciudad = parameters.get(\\"ciudad\\") especialidad = parameters.get(\\"especialidad\\") url = \\"https://api.segurossura.com.co/public/v1/directory/search/\\" + producto + \\"/\\" + ciudad + \\"?speciality=\\" + especialidad + \\"&firstname=&secondname=&firstlastname=&secondlastname=\\" myResponse = requests.get(url) if(myResponse.ok): jData = json.loads(myResponse.text) speech = \\"Los profesionales que coinciden con tu busqueda son: n\\" for medico in jData: speech = speech + \\"n\\" + medico[\\"nombreField\\"] + \\"n Direccion: \\" + medico[\\"direccionField\\"].title() + \\"n Telefono: \\" + medico[\\"telefonoField\\"] + \\"n\\" elif req.get(\\"result\\").get(\\"action\\") == \\"coberturas.producto\\": producto = parameters.get(\\"productos\\") speech = \\"Buscando coberturas del producto: \\" + producto else: speech =\\" \\" return { \\"speech\\": speech, \\"displayText\\": speech, #\\"data\\": {}, # \\"contextOut\\": [], \\"source\\": \\"apiai-onlinestore-shipping\\" } if __name__ == '__main__': port = int(os.getenv('PORT', 5000)) print \\"Starting app on port %d\\" % port app.run(debug=True, port=port, host='0.0.0.0')"},{"prompt":"Modify an existing Python function to eliminate any redundancies def just_me(name): print(Hi, my name is +name+.) print(I am special and nothing else matters.) print(What about you?)","completion":"def just_me(name): print(\\"Hi, my name is \\"+name+\\". I am special and nothing else matters.\\") print(\\"What about you?\\")"},{"prompt":"Create a simple chatbot using Python and state diagrams. Not applicable","completion":"# Create the states state0 = { 'name': 'state0', 'message': 'Hello! How can I help you?', 'replies': {'I need some advice': 'state1', 'Can you answer my questions?': 'state2'} } state1 = { 'name': 'state1', 'message': 'Sure, what kind of advice do you need?', 'replies': {'Career advice': 'state3','Health advice': 'state4'} } state2 = { 'name': 'state2', 'message': 'Yes, I'll do my best! What do you want to know?', 'replies': {'Where can I find good tutorials': 'state5', 'Why is coding so hard': 'state6'} } state3 = { 'name': 'state3', 'message': 'It is always a good idea to research the field you are interested in and creating a plan to learn the skills that are required. Make sure to contact professionals in the field to understand their experience.', 'replies': {} } state4 = { 'name': 'state4', 'message': 'Focus on eating healthy and staying active. Make sure to consult a medical professional if you have any concerns.', 'replies': {} } state5 = { 'name': 'state5', 'message': 'You can find tutorials online or join coding communities to get help from experienced coders. StackOverflow and Cod Academy are great resources.', 'replies': {} } state6 = { 'name': 'state6', 'message': 'Coding can be challenging, especially at first. Just remember that with practice, patience and problem solving skills you can overcome the obstacles.', 'replies': {} } # Initialize the state current_state = state0 # Keep a record of conversation conversation = [] while True: # Print the current state message print(current_state['message']) conversation.append(current_state['message']) # Get the user input user_input = input('>> ') conversation.append(user_input) # Update the state if user_input in current_state['replies']: current_state = eval(current_state['replies'][user_input]) else: print(\\"I don't understand what you mean. Please try again.\\") # End the conversation when the state is terminal if not bool(current_state['replies']): print('Goodbye!') break print(\\"=========================\\") print(\\"Conversation:\\") for message in conversation: print(message)"},{"prompt":"Create a Python 3 program that takes an integer input from the user and prints its cube.","completion":"number = int(input(\\"Please enter a number: \\")) cube = number**3 print(\\"The cube of the number is: \\" + str(cube))"},{"prompt":"Write a Python program to find the first nonrepeating character in a given list. lst = [1, 2, 3, 4, 4, 3, 2, 1]","completion":"def first_non_repeating_char(lst): dct = {} for l in lst: if l in dct: dct[l] += 1 else: dct[l] = 1 for l in lst: if dct[l] == 1: return l return None lst = [1, 2, 3, 4, 4, 3, 2, 1] print(first_non_repeating_char(lst))"},{"prompt":"Create a kmeans clustering algorithm in Python.","completion":"import numpy as np def kmeans(k, data): \\"\\"\\" Perform k-means clustering on data \\"\\"\\" # randomly set initial centroids centroids = data[np.random.randint(low=0, high=len(data), size=k)] prev_centroids = np.zeros(centroids.shape) clusters = np.zeros(len(data)) distances = np.zeros((len(data), k)) # find the closest centroid for each sample while not np.allclose(centroids, prev_centroids): # save old centroids prev_centroids = centroids # get the distance between each point and each centroid for idx, centroid in enumerate(centroids): distances[:, idx] = np.linalg.norm(data - centroid, axis=1) # assign each sample to the closest centroids clusters = np.argmin(distances, axis=1) # update centroids for idx in range(k): centroids[idx] = np.mean(data[clusters == idx], axis=0) return clusters, centroids"},{"prompt":"Write a Python code snippet that produces the following output:","completion":"for i in range(7): for j in range(7): if (i + j) % 2 == 0: print('#', end='') else: print(' ', end='') print()"},{"prompt":"Construct a Python class that takes a given number and calculates the sum of the digits. 6342","completion":"class SumOfDigits: def __init__(self, num): self.num = num def calculate_sum_of_digits(self): total = 0 for ch in str(self.num): total += int(ch) return total digit_sum = SumOfDigits(6342) result = digit_sum.calculate_sum_of_digits() print(result)"},{"prompt":"mplement a sorting algorithm in Python that takes a list of integers as input and outputs the list sorted in ascending order.","completion":"def sort_ascending(nums): for i in range(len(nums)): min_idx = i for j in range(i + 1, len(nums)): if nums[min_idx] > nums[j]: min_idx = j nums[i], nums[min_idx] = nums[min_idx], nums[i] return nums"},{"prompt":"Create a feature extraction function in Python to extract data from a json string. {id:111,title:This is a sample title,body:This is a sample body text}","completion":"def feature_extraction(input_str): import json data = json.loads(input_str) features = { \\"id\\": data[\\"id\\"], \\"title\\": data[\\"title\\"], \\"body_len\\": len(data[\\"body\\"]) } return features"},{"prompt":"Construct a Python program to combine the elements of two lists into a list of tuples. [1, 2, 3], [4, 5, 6]","completion":"def combine_list(array1, array2): return list(zip(array1, array2))"},{"prompt":"Design and implement a neural network in Python to predict the price of a house given a set of features. [0.8, 0.4, 0.7]","completion":"import numpy as np from keras.models import Sequential from keras.layers import Dense features = np.array([[0.8, 0.4, 0.7]]) model = Sequential() model.add(Dense(64, input_dim=3, activation='relu')) model.add(Dense(32, activation='relu')) model.add(Dense(1, activation='linear')) model.compile(loss='mse', optimizer='adam', metrics=['mse']) model.fit(features, batch_size=3,epochs=200)"},{"prompt":"Create a Python program that takes two arguments in the form of two lists and calculates the dot product of the two arguments. [1,2], [3,4]","completion":"def dot_product(list1, list2): product = 0 for i in range(len(list1)): product += (list1[i] * list2[i]) return product #Example list1 = [1,2] list2 = [3,4] result = dot_product(list1, list2) print(result) #Output 11"},{"prompt":"Create a Python web application for a car insurance calculator. The application should have a page where the user can input the data (e.g age, gender, car model, etc) and should return a calculated insurance price. Not applicable","completion":"import flask from flask import request, jsonify # Creating the application app app = flask.Flask(__name__) @app.route('/calculate', methods=['POST']) def calculate(): # Get the input data from the user data = request.get_json() age = data['age'] gender = data['gender'] car_model = data['car_model'] # Calculate the insurance price # ... insurance_price = 0.00 # Return the calculated insurance price in JSON format return jsonify({'insurance_price': insurance_price}) app.run(host='0.0.0.0', port=8006)"},{"prompt":"Create a Python script that generates a list of the prime numbers between two given numbers. The script should use the Sieve of Eratosthenes algorithm to generate the prime numbers Start=1, End=20","completion":"def sieve_of_eratosthenes(start, end): prime = [True] * (end + 1) p = 2 while p * p <= end: if prime[p]: for i in range(p * p, end + 1, p): prime[i] = False p += 1 prime_numbers = [] for p in range (start, end): if prime[p]: prime_numbers.append(p) return prime_numbers print (sieve_of_eratosthenes(1, 20))"},{"prompt":"Construct a program in Python to compute the sum of square numbers in a given range, including the start and end numbers. Range: 1020","completion":"def sumOfRanges(start, end): sum = 0 for i in range(start, end+1): sum += i*i return sum sumOfRanges(10,20) #673"},{"prompt":"Python, build a program that can remove all vowels from a given string.","completion":"def remove_vowels(string): vowels = ['a','e','i','o','u'] new_string = '' for char in string: if char.lower() not in vowels: new_string += char return new_string"},{"prompt":"mprove the following function by using Python builtin functions: def sum_array(array): '''A function that takes in an array of numbers and returns the sum of all the numbers''' total = 0 for num in array: total = total + num return total","completion":"def sum_array(array): '''A function that takes in an array of numbers and returns the sum of all the numbers''' return sum(array)"},{"prompt":"Write a python code for sorting n distinct integers using insertion sort.","completion":"def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i] # Move elements of arr[0..i-1], # that are greater than key, # to one position ahead of # their current position j = i-1 while j >= 0 and key < arr[j] : arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key"},{"prompt":"Create a Python script for a djangolike ORM with standard CRUD functionality. The script should include methods for Create, Read, Update and Delete. Model. name string","completion":"import sqlite3 class Model: def __init__(self): self.conn = sqlite3.connect(\\":memory:\\") self.cursor = self.conn.cursor() def create(self,name): self.cursor.execute( \\"CREATE TABLE IF NOT EXISTS Models (name TEXT)\\" ) self.cursor.execute( \\"INSERT INTO Models(name) VALUES (?)\\", (name,), ) self.conn.commit() def read(self): self.cursor.execute(\\"SELECT * FROM Models\\") return self.cursor.fetchall() def update(self,name): self.cursor.execute( \\"UPDATE Models SET name = ? WHERE name = ?\\", (name, name,), ) self.conn.commit() def delete(self, name): self.cursor.execute( \\"DELETE FROM Models WHERE name = ?\\", (name,), ) self.conn.commit()"},{"prompt":"Can you write a Python script to sort a list of strings alphabetically? [Hello, Yes, No, World]","completion":"strings = [\\"Hello\\", \\"Yes\\", \\"No\\", \\"World\\"] strings.sort() print(strings)"},{"prompt":"Write a class in Python that can find the median of an unsorted list of numbers.","completion":"class MedianFinder: def __init__(self): self._data = [] def add(self, num): self._data.append(num) def find_median(self): data = sorted(self._data) n = len(data) return (data[(n-1)//2] + data[n//2])/2"},{"prompt":"Generate an array of random numbers in Python. size: 10","completion":"import numpy as np size = 10 random_array = np.random.randint(0, 100, size) print(random_array)"},{"prompt":"Compute the edit distance between two strings in Python. string1 = “kitten” string2 = “sitting”","completion":"def editDistance(string1, string2, m, n): # Create an empty matrix dp = [[0 for x in range(n+1)] for x in range(m+1)] # Filling the first column of the matrix for i in range(m+1): dp[i][0] = i # Filling the second column of the matrix for j in range(n+1): dp[0][j] = j # Populate the matrix for i in range(1, m+1): for j in range(1, n+1): if string1[i-1] == string2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n] # Driver program string1 = \\"kitten\\" string2 = \\"sitting\\" m = len(string1) n = len(string2) print(editDistance(string1, string2, m, n))"},{"prompt":"Create a 3layer artificial neural network using Python and print the outcome.","completion":"import numpy as np # define the 3 layers # input_layer = np.array([2, 3]) hidden_layer = np.array([[0.1, 0.4], [0.8, 0.6], [0.3, 0.9]]) output_layer = np.array([0.3, 0.7]) # compute the output of the 3-layer network # hidden_layer_output = np.dot(input_layer, hidden_layer) output = np.dot(hidden_layer_output, output_layer) print(output)"},{"prompt":"Create a Python program to read in 15 integers and print the sum of them. [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14]","completion":"def sum_nums(nums): total = 0 for num in nums: total += num return total lst = [1, 5, 9, 0, 2, 4, 7, 8, 6, 10, 3, 11, 12, 13, 14] total = sum_nums(lst) print(total)"},{"prompt":"mplement a REST API in Python for creating and reading users. The API should have endpoints for creating a user, reading all users, and reading a single user. Not applicable","completion":"from flask import Flask, jsonify, request from flask_mysqldb import MySQL app = Flask(name) # Mysql configuration app.config['MYSQL_USER'] = 'root' app.config['MYSQL_PASSWORD'] = 'password' app.config['MYSQL_DB'] = 'users' app.config['MYSQL_CURSORCLASS'] = 'DictCursor' mysql = MySQL(app) @app.route('/users', methods=['POST']) def create_user(): name = request.json['name'] email = request.json['email'] cur = mysql.connection.cursor() cur.execute(\\"INSERT INTO users (name, email) VALUES (%s, %s)\\", (name, email)) mysql.connection.commit() cur.close() return jsonify({'message': 'User created'}) @app.route('/users', methods=['GET']) def get_users(): cur = mysql.connection.cursor() cur.execute(\\"SELECT * FROM users\\") users = cur.fetchall() cur.close() return jsonify(users) @app.route('/users/int:id', methods=['GET']) def get_user(id): cur = mysql.connection.cursor() cur.execute(\\"SELECT * FROM users WHERE id=%s\\", (id)) user = cur.fetchone() cur.close() return jsonify(user) if name == \\"main\\": app.run(debug=True)"},{"prompt":"Explain the approach for solving a linear programming problem using the Simplex method in Python.","completion":"The Simplex Method is an algorithm for solving a linear programming problem, which involves finding the maximum or minimum value of a linear function. This method uses simultaneous equations to define a polytope that contains the solution to the linear programming problem. It then finds the optimal solution in this polytope by iteratively making moves from a vertex to another in the polytope that gives an increase in the message value. To solve a linear programming problem using the Simplex Method in Python, first, define the problem in terms of the decision variables, objective function, and constraints. Next, convert the problem into standard form by introducing slack variables, if needed. Then, create a tableau containing the coefficients of the decision variables and the right-hand sides of the constraints, and set up the starting solution in the tableau. Now, iteratively use the Simplex algorithm to move from a vertex to the next until an optimum solution is reached. Determine the optimum solution by inspecting the values in the tableau."},{"prompt":"Optimize a Python algorithm to find the greatest 2 numbers from a 10000 integers list. myList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8]","completion":"def get_greatest_2(items): max1 = max2 = float('-inf') for item in items: if item > max1: max1, max2 = item, max1 elif item > max2: max2 = item return max1, max2 myList = [1, 5, 3, 7, 4, 7, 8, 9, 2, 10, 6, 8] print('The greatest 2 numbers from the array:', get_greatest_2(myList)) Output: The greatest 2 numbers from the array: (9, 8)"},{"prompt":"Write a python code that takes in a list of integers and removes all the duplicate elements from it. [1, 2, 3, 2, 4, 5, 6, 3]","completion":"final_list = [] for num in list_of_integers: if num not in final_list: final_list.append(num) print(final_list)"},{"prompt":"Using the NumPy library, create a Python program to generate a 3X3 array of random integers ranging from 1 to 5. Not applicable","completion":"import numpy as np a = np.random.randint(1, 6, size=(3,3)) print(a)"},{"prompt":"Can you provide a code snippet in Python that takes a list of strings as input and sorts them based on their length? [Hello,World!,Good,Morning]","completion":"words = [\\"Hello\\",\\"World!\\",\\"Good\\",\\"Morning\\"] words.sort(key=len) print(words)"},{"prompt":"Create a Python program to classify the sentiment of movie reviews using Natural Language Processing. The movie was terrible. It felt like it would never end!","completion":"import nltk from nltk.sentiment import vader sentence = 'The movie was terrible. It felt like it would never end!' sid = vader.SentimentIntensityAnalyzer() scores = sid.polarity_scores(sentence) if scores['neg'] > scores['pos']: print('The sentiment of the sentence is negative!') else: print('The sentiment of the sentence is positive!')"},{"prompt":"Create a python script that parses a CSV and generates a new CSV that adds the total number of rows, total number of columns, and total amount of the data for each attribute.","completion":"\\"\\"\\" Parses a CSV and generates a new CSV that adds the total number of rows, total number of columns, and total amount of data for each attribute. \\"\\"\\" import csv def parse_csv(filename): with open(filename) as csv_file: reader = csv.DictReader(csv_file) rows =0 cols = 0 data_totals = [] for row in reader: rows += 1 cols = len(row) for col in row: if len(data_totals) < cols: data_totals.append([row[col],1]) else: existing_total = data_totals[cols - 1] new_total = [existing_total[0] + float(row[col]), existing_total[1] + 1] data_totals.append(new_total) #write to new csv with open('new_csv.csv', mode='w') as new_csv_file: writer = csv.writer(new_csv_file, delimiter=',', quotechar='\\"', quoting=csv.QUOTE_MINIMAL) writer.writerow(['Rows', 'Columns', 'Data Totals']) writer.writerow([rows, cols, data_totals]) if __name__ == '__main__': filename = 'test.csv' parse_csv(filename)"},{"prompt":"Create a class in Python which matches the following criteria. A class Song with two instance variables, title and artist, and three methods, str(), eq(), and length().","completion":"class Song: def __init__(self, title, artist): self.title = title self.artist = artist def __str__(self): return f'Title: {self.title}nArtist: {self.artist}' def __eq__(self, other): return self.artist == other.artist and self.title == other.title def length(self): return len(self.title)"},{"prompt":"Create a Python script to scrape a given website.","completion":"import requests from bs4 import BeautifulSoup url = '<your website url>' page = requests.get(url) soup = BeautifulSoup(page.text, 'html.parser') # Scraping code goes here...."},{"prompt":"Create objects of type Student in Python containing relevant attributes.","completion":"class Student: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender"},{"prompt":"Design and write a Python program to extract all public email addresses from a given string My email is john@example.com and yours is john@gmail.com.","completion":"import re def extract_emails(text): emails = re.findall(r\\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\", text) return emails extracted_emails = extract_emails(\\"My email is john@example.com and yours is john@gmail.com\\") print(extracted_emails)"},{"prompt":"Generate a basic REST API with authentication and endpoints in Python. Not applicable","completion":"from flask import Flask, request from flask_restful import Resource, Api from flask_jwt import JWT, jwt_required app = Flask(name) api = Api(app) # Setup JWT authentication app.secret_key = 'super-secret-key' jwt = JWT(app, authenticate, identity) items = [] class Item(Resource): @jwt_required() def get(self, name): for item in items: if item['name'] == name: return item return {'item': None}, 404 def post(self, name): new_item = {'name': name, 'price': 12.00} items.append(new_item) return new_item, 201 class ItemList(Resource): def get(self): return {'items': items} api.add_resource(Item, '/item/<string:name>') api.add_resource(ItemList, '/items') if name == 'main': app.run(port=5000, debug=True)"},{"prompt":"Generate a set of Python functions to take inputs values from a list of objects and output a result. The output for each object should include the object's ID and the calculated results from the given inputs. [{id: 1, inputs: [1,2,3]}, {id: 2, inputs: [2,3,4]}]","completion":"def calculate_result(obj_list): result_list = [] for obj in obj_list: result = {} result['id'] = obj['id'] result['result'] = sum(obj['inputs']) result_list.append(result) return result_list obj_list = [{\\"id\\": 1, \\"inputs\\": [1,2,3]}, {\\"id\\": 2, \\"inputs\\": [2,3,4]}] print(calculate_result(obj_list)) # Output: [{'id': 1, 'result': 6}, {'id': 2, 'result': 9}]"},{"prompt":"Reverse an input string using Python. Hello World!","completion":"def rev_string(s): return s[::-1] s = \\"Hello World!\\" print(rev_string(s))"},{"prompt":"Create an algorithm in Python to find the longest common subsequence of two sequences. x = abcdaf; y = acbcf;","completion":"#Function to find the LCS of two strings def find_lcs(x, y): # Find lengths of the two strings m = len(x) n = len(y) #To store the lengths of longest common subsequences lcs = [[0 for x in range(n+1)] for x in range(m+1)] #Fill the table in bottom up manner for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: lcs[i][j] = 0 elif x[i-1] == y[j-1]: lcs[i][j] = lcs[i-1][j-1] + 1 else: lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1]) #To store one of the possible common subsequence index = lcs[m][n] lcs_str = [\\"\\"] * (index+1) lcs_str[index] = \\"\\" #Following loop code is used to find one of the longest common subsequence i = m j = n while i > 0 and j > 0: #If current character in X and Y are same,then # reduce both the count and add the character to the result string if x[i-1] == y[j-1]: lcs_str[index-1] = x[i-1] i-=1 j-=1 index-=1 # If not same, move to the left, top or corner (diagonal) cell #Whichever has the max value elif lcs[i-1][j] > lcs[i][j-1]: i-=1 else: j-=1 # Return the longest common subsequence return \\"\\".join(lcs_str) # Main function x = \\"abcdaf\\" y = \\"acbcf\\" res = find_lcs(x,y) print(\\"The Longest Common Subsequence is:\\") print(res) # Output: The Longest Common Subsequence is: # abcf"},{"prompt":"Write a python script to generate a random password of length 8, which consists of alphanumeric characters and at least one special character.","completion":"import string import random def generate_password(): chars = string.ascii_letters + string.digits + string.punctuation pwd_length = 8 password = '' for i in range(pwd_length): password += random.choice(chars) # Check if at least one special character exists in the password if any([char in string.punctuation for char in password]): return password else: return generate_password() print(generate_password())"},{"prompt":"Create a Python script that takes the list [1, 2, 3, 4, 5] and returns the sum. [1, 2, 3, 4, 5]","completion":"def sum_list(lst): total = 0 for num in lst: total += num return total sum_list([1,2,3,4,5])"},{"prompt":"Edit the Python program to sort words in a given string by their length in decreasing alphabetical order. my_string = This is the string which is to be sorted","completion":"my_string = \\"This is the string which is to be sorted\\" words = my_string.split(' ') # split string into list of words # create a list of tuples where the first element # is the length of the word and the second element # is the word itself words_with_length = [(len(word), word) for word in words] # sort list of tuples according to 1st element of tuple i.e. length of word words_with_length.sort(reverse = True) # wl contains list words in decreasing order of their length # now use join() to join all words whith \\" \\" sorted_string = \\" \\".join([i[1] for i in words_with_length]) # print sorted string print(sorted_string)"},{"prompt":"Write a python program to calculate maximum revenue. prices = [10, 7, 5, 8, 11, 9]","completion":"def max_revenue(prices): diff = [prices[i + 1] - prices[i] for i in range(len(prices) - 1)] max_diff = 0 for i in range(len(diff)): for j in range(i + 1, len(diff) + 1): current_diff = sum(diff[i:j]) if current_diff > max_diff: max_diff = current_diff return max_diff"},{"prompt":"Write a Python program to print the following output pattern","completion":"for i in range(1,6): for j in range(1,i+1): print(j, end=\\"\\") print()"},{"prompt":"Develop a loop that prints a python array from the end to the beginning. arr = [1, 2, 3, 4, 5]","completion":"def printArrayReverse(arr): for i in range(len(arr) - 1, -1, -1): print(arr[i], end = \\" \\") printArrayReverse(arr)"},{"prompt":"Given a list of phone numbers, extract only the ones that start with 08 using Python. ['0834567', '0945678', '07123456', '08901234', '07890123']","completion":"phone_numbers = ['0834567', '0945678', '07123456', '08901234', '07890123'] result = [number for number in phone_numbers if number.startswith('08')] print(result)"},{"prompt":"Write a Python program that takes a list and a search query as input and returns the indices of all elements in the list which match the search query. list = [apple, banana, peach, orange, grape] search_query = apple","completion":"def search_list(list, search_query): result = [] for i in range(len(list)): if list[i] == search_query: result.append(i) return result search_list(list, search_query) # returns [0]"},{"prompt":"Write a function in Python that takes an array of integer values and reverses the order of the values. [1, 2, 3, 4, 5]","completion":"def reverse_array(arr): return arr[::-1] # Returns a slice of the list in reverse order"},{"prompt":"Write a function in Python to create a random string of 10 characters.","completion":"import random def generate_string(string_length): random_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' random_string = ''.join(random.choices(random_characters, k=string_length)) return random_string print(generate_string(10)) # Length: 10"},{"prompt":"Develop a Tic Tac Toe game in Python.","completion":"# define the board board = [\\" \\" for i in range(9)] def print_board(): row1 = \\"| {} | {} | {} |\\".format(board[0], board[1], board[2]) row2 = \\"| {} | {} | {} |\\".format(board[3], board[4], board[5]) row3 = \\"| {} | {} | {} |\\".format(board[6], board[7], board[8]) print() print(row1) print(row2) print(row3) print() # define player turn def player_turn(icon): if icon == \\"X\\": number = 1 elif icon == \\"O\\": number = 2 print(\\"Your turn player {}\\".format(number)) choice = int(input(\\"Enter your move (1-9): \\").strip()) if board[choice -1] == \\" \\": board[choice -1] = icon else: print() print(\\"That space is taken!\\") # check win def is_victory(icon): if (board[0] == icon and board[1] == icon and board[2] == icon) or (board[3] == icon and board[4] == icon and board[5] == icon) or (board[6] == icon and board[7] == icon and board[8] == icon) or (board[0] == icon and board[3] == icon and board[6] == icon) or (board[1] == icon and board[4] == icon and board[7] == icon) or (board[2] == icon and board[5] == icon and board[8] == icon) or (board[0] == icon and board[4] == icon and board[8] == icon) or (board[2] == icon and board[4] == icon and board[6] == icon): return True else: return False # define main function def main(): print(\\"Welcome to Tic Tac Toe!\\") print_board() while True: player_turn(\\"X\\") print_board() if is_victory(\\"X\\"): print(\\"X Wins! Congratulations!\\") break elif not \\" \\" in board: print(\\"It's a tie!\\") break player_turn(\\"O\\") print_board() if is_victory(\\"O\\"): print(\\"O Wins! Congratulations!\\") break elif not \\" \\" in board: print(\\"It's a tie!\\") break main()"},{"prompt":"Write Python code to merge two sorted lists. Lists A and B contain the elements [2,4,6] and [3,5,7] respectively.","completion":"def merge_sorted_lists(listA, listB): merged_list = [] ptrA = 0 ptrB = 0 while ptrA < len(listA) and ptrB < len(listB): if listA[ptrA] <= listB[ptrB]: merged_list.append(listA[ptrA]) ptrA += 1 else: merged_list.append(listB[ptrB]) ptrB += 1 while ptrA < len(listA): merged_list.append(listA[ptrA]) ptrA += 1 while ptrB < len(listB): merged_list.append(listB[ptrB]) ptrB += 1 return merged_list"},{"prompt":"Create a Python program to find the longest common subsequence between two strings. string 1 = ABACEDF string 2 = ABDCF","completion":"# Program to find the longest common subsequence between two strings def lcs(X, Y): # find the length of the strings m = len(X) n = len(Y) # declaring the array for storing the dp values L = [[None]*(n+1) for i in range(m+1)] # Following steps to build L[m+1][n+1] in bottom up manner for i in range(m+1): for j in range(n+1): if i == 0 or j == 0 : L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1]+1 else: L[i][j] = max(L[i-1][j] , L[i][j-1]) # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] return L[m][n] # Driver program X = \\"ABACEDF\\" Y = \\"ABDCF\\" print(\\"Length of LCS is \\", lcs(X, Y))"},{"prompt":"Construct a naive bayes classifier using python to classify emails as spam or not spam.","completion":"from sklearn.naive_bayes import GaussianNB # Create a Gaussian Classifier model = GaussianNB() # Train the model using the training sets model.fit(X_train, y_train) # Predict Output y_pred = model.predict(X_test)"},{"prompt":"This code performs a series of calculations and plots based on input data. Before running the script, run eval_spectrum.py and calibration.py with appropriate measurements. The script imports necessary modules and functions from external sources. The main function loads the input data, performs calibration, calculates various values, and generates plots based on instructions provided in a separate text file. The generated plots show absorbed power vs emitted power, absorbed power vs reflectivity, and dissipated power vs wavelength. The script also calculates thermal resistance and displays it on the plot. To run the code, execute the main function.","completion":"#! /usr/bin/python2.7 # -*- coding: utf-8 -*- import numpy as np import matplotlib.pyplot as plt import errorvalues as ev # github.com/stefantkeller/errorvalues from VECSELsetup.eval.varycolor import varycolor from VECSELsetup.eval.gen_functions import load, extract, plotinstructions_write, plotinstructions_read, lut_from_calibfolder, lut_interp_from_calibfolder, thermal_resistance def main(): # before running this script: # run eval_spectrum.py to provide the .._eval.csv files required for the spectra # run calibration.py (with appropriate calib measurements) # and don't forget temperature_heatsink (this is not necessary for this script here, but it provides interesting insights for the measurement at hand) logfile = '../24_LL_ev/20150211_sample21-1-d6/spot333um.csv' calib_folder = '../24_LL_ev/20150204_calib_333um_s21-1-d6' #------------------------------------ # calibration emis_lut = lut_from_calibfolder(calib_folder,identifiers=['Laser'],ignore_error=False) # emission has constant value solely due to BS, no ND in front of detector etc. pump_lut, refl_lut = lut_interp_from_calibfolder(calib_folder,identifiers=['Pump','Refl']) #------------------------------------ # load measurement current_set, current, pump, refl, laser, spectra, meantemp = extract(logfile, identifiers=['Current','Pump','Refl','Laser','Spectra', 'Temperature']) Temperatures = sorted(current_set.keys()) # set temperatures (round numbers like 15.0 or 22.5 etc) T_out = dict((T,meantemp[T].round(1)) for T in Temperatures) # real temperatures for display in plot, including +-uncertainty #------------------------------------ # calculate using calibration absorbed, reflected, emitted, pumped, dissipated = {}, {}, {}, {}, {} for T in Temperatures: reflected[T] = refl_lut(refl[T]) pumped[T] = pump_lut(pump[T]) absorbed[T] = pumped[T] - reflected[T] emitted[T] = emis_lut(laser[T]) dissipated[T] = absorbed[T] - emitted[T] # #------------------------------------ # invoke instructions for plot and fit # plotting the data can be tricky to reproduce, store the plot properties in a text file and read from there! # (easy to repeat the plot at a later time) # open the instruction file in a text editor, edit the instructions and run this module again; it will use the new instructions instrfile = logfile[:-4]+'_instr.csv' plotinstructions_write(instrfile,Temperatures,calib_folder) #------------------------------------ # retrieve instructions instr = plotinstructions_read(instrfile) # #------------------------------------ # translate instructions str2lst = lambda s: map(float,s[1:-1].split(',')) textx = float(instr['textx']) # x coordinate for text; same for first two subplots (absorbed-emitted and absorbed-reflectivity) fontsize = float(instr['fontsize']) title = instr['title'] xlim = str2lst(instr['xlim']) # range of x-axis; same for first two subplots ylim1 = str2lst(instr['ylim1']) # range of y-axis of first (aborbed-emitted) plot ylim2 = str2lst(instr['ylim2']) # range of second y-axis (absorbed-reflectivity) xlim3 = str2lst(instr['xlim3']) # third x-axis; (dissipated-wavelength) ylim3 = str2lst(instr['ylim3']) # 3rd y-axis plot_temps_for_3 = str2lst(instr['plot_temps_for_3']) # which ones to plot? you may have measured a heat sink temperature without lasing output, whose data will confuse the reader, so you don't plot it. textx3 = float(instr['textx3']) # x-coordinate of text in 3rd plot texty3 = str2lst(instr['texty3']) # 3rd y-coordinate llow0 = {} lhigh0 = {} texty1 = {} for T in Temperatures: llow0[T] = sum(absorbed[T].v()<float(instr['llow0[{0}]'.format(T)])) # index indicating start of lasing activity lhigh0[T] = sum(absorbed[T].v()<float(instr['lhigh0[{0}]'.format(T)])) # index corresponding to where linear segment stops texty1[T] = float(instr['texty1[{0}]'.format(T)]) # # #------------------------------------ #------------------------------------ # plot cols = varycolor(3*len(Temperatures)) plt.subplot(3,1,1) cnt = 0 # color counter q0,m0 = {},{} # for linreg for T in Temperatures: # linreg q0[T],m0[T] = ev.linreg(absorbed[T].v()[llow0[T]:lhigh0[T]], emitted[T].v()[llow0[T]:lhigh0[T]], emitted[T].e()[llow0[T]:lhigh0[T]], overwrite_zeroerrors=True) emax,emaxi = ev.max(emitted[T],True) amax = absorbed[T][emaxi] print 'Max emission at ({}) degC at ({}) W absorbed power: ({}) W'.format(T_out[T],amax,emax) # plot plt.errorbar(absorbed[T].v(),emitted[T].v(), xerr=absorbed[T].e(),yerr=emitted[T].e(), c=cols[cnt],linestyle=' ') plt.plot(absorbed[T].v(),m0[T].v()*absorbed[T].v()+q0[T].v(),c=cols[cnt+1]) plt.text(textx,texty1[T], '{0}^circC: {1} %'.format(T_out[T],m0[T].round(3)*100), color=cols[cnt],fontsize=fontsize) cnt+=3 plt.title(title) plt.xlabel('Absorbed power (W)') plt.ylabel('Emited power (W)') plt.xlim(xlim) plt.ylim(ylim1) plt.grid('on') #plt.show() #------------------------------------ plt.subplot(3,1,2) cnt = 0 # reset color counter q1,m1 = {},{} for T in Temperatures: relref = reflected[T]/pumped[T]*100 # plot plt.errorbar(absorbed[T].v(),relref.v(), xerr=absorbed[T].e(),yerr=relref.e(), c=cols[cnt],linestyle=' ') cnt+=3 plt.title(title) plt.xlabel('Absorbed power (W)') plt.ylabel('Reflectivity (%)') plt.xlim(xlim) plt.ylim(ylim2) plt.grid('on') #plt.show() #------------------------------------ # plot dissipation and spectra plt.subplot(3,1,3) cnt = 0 # reset q3,m3 = {},{} for T in Temperatures: if T in plot_temps_for_3: # lambda_short #plt.errorbar(dissipated[T].v(),spectra[T][0].v(), # xerr=dissipated[T].e(),yerr=spectra[T][0].e(), # c=cols[cnt],linestyle=' ') # lambda_long # lin reg for range that lases (>threshold, <roll over), hence instr from subplot 1 q3[T],m3[T] = ev.linreg(dissipated[T].v()[llow0[T]:lhigh0[T]], spectra[T][1].v()[llow0[T]:lhigh0[T]], spectra[T][1].e()[llow0[T]:lhigh0[T]], overwrite_zeroerrors=True) # show only a part, not to confuse reader #plt.errorbar(dissipated[T].v()[llow0[T]:lhigh0[T]],spectra[T][1].v()[llow0[T]:lhigh0[T]], # xerr=dissipated[T].e()[llow0[T]:lhigh0[T]],yerr=spectra[T][1].e()[llow0[T]:lhigh0[T]], # c=cols[cnt],linestyle=' ') # show the whole range plt.errorbar(dissipated[T].v(),spectra[T][1].v(), xerr=dissipated[T].e(),yerr=spectra[T][1].e(), c=cols[cnt],linestyle=' ') cnt += 3 plt.title(title) plt.xlim(xlim3) plt.ylim(ylim3) plt.xlim() plt.xlabel('Dissipated power (W)') plt.ylabel('Wavelength (nm)') plt.grid('on') cnt = 0 # reset wavelength = ev.errvallist([q3[T] for T in plot_temps_for_3]) # wavelength offsets slopes = ev.errvallist([m3[T] for T in plot_temps_for_3]) # slopes T_active = ev.errvallist([T_out[T] for T in plot_temps_for_3]) dldD, dldT, l0 = thermal_resistance(T_active,wavelength,slopes) #, R_th R_th = dldD/dldT for T in Temperatures: if T in plot_temps_for_3: plt.plot(dissipated[T].v(),l0.v() + dldT.v()*T_out[T].v() + dldD.v()*dissipated[T].v(),c=cols[cnt+1]) cnt+=3 plt.text(textx3,texty3[0], 'lambda='+'({})'.format(dldT.round(3))+'T_{hs}+'+'({})'.format(dldD.round(3))+'D+'+'{}'.format(l0.round(3)), color='k') R_th = R_th.round(2) therm_imp = 'Thermal impedance: ({0}) K/W'.format(R_th) plt.text(textx3,texty3[1], therm_imp,color='k') print therm_imp for T in Temperatures: print meantemp[T] plt.show() if __name__ == \\"__main__\\": main()"},{"prompt":"w can you return two values from a Python function?","completion":"There are multiple ways to return multiple values from a Python function. One way is to use a tuple inside the function and return it. Another way is to use Python's 'return' statement to return multiple values. For example: def get_multi_values(): value1 = \\"ABC\\" value2 = 123 return value1, value2 value1, value2 = get_multi_values() print(value1, value2)"},{"prompt":"Generate a Python program to count the number of pairs with given sum x X = 10","completion":"def count_pairs(numbers, x): count = 0 i, j = 0, len(numbers) - 1 while i < j: sum = numbers[i] + numbers[j] if sum == x: count += 1 i += 1 elif sum < x: i += 1 else: j -= 1 return count"},{"prompt":"Create a Celery task in Python to send an email. recipient_name = 'John Smith' recipient_email = 'john@example.com' subject = 'Hello World' message = 'This is a test email.'","completion":"from celery import Celery from flask_mail import Message app = Celery('tasks', backend='redis://localhost') @app.task def send_email(recipient_name, recipient_email, subject, message): msg = Message(subject, sender='example@example.com', recipients=[recipient_email]) msg.body = message mail.send(msg)"},{"prompt":"Optimize the following python code using best practices def linear_search(arr, x): for i in range(len(arr)): if arr[i] == x: return i return 1","completion":"def linear_search(arr, x): for index, item in enumerate(arr): if item == x: return index return -1"},{"prompt":"Create a Python program to find the nth Fibonacci number","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==0: return 0 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2)"},{"prompt":"Write a Python program to identify the largest number in the given list. [1000, 506, 299, 620, 35]","completion":"max_num = 0 for num in lst : if num > max_num : max_num = num print(max_num)"},{"prompt":"Write a Python program to find a substring in a string.","completion":"def find_substring(source, substring): '''This function returns the start index of a substring in given string ''' if substring not in source: return -1 i=0 while i < len(source): if source[i] == substring[0]: flag = True for j in range(len(substring)): if substring[j] != source[i+j]: flag = False break if flag: return i i += 1 return -1"},{"prompt":"Given a list of numbers, create a Python script to print all the elements greater than 50. [2, 60, 5, 4, 78, 32, 99]","completion":"nums = [2, 60, 5, 4, 78, 32, 99] for num in nums: if num > 50: print(num)"},{"prompt":"Create a program in Python to sort a given array in ascending order using bubble sort. [3,7,4,1]","completion":"def bubble_sort(arr): n = len(arr) for i in range(n-1): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] arr = [3,7,4,1] bubble_sort(arr) print (\\"Sorted array :\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Generate a function in Python that takes a number and prints its factors. Not applicable","completion":"def print_factors(x): \\"\\"\\" This function takes a number and prints its factors :param x: The number whose factors to be printed :return: None \\"\\"\\" print(\\"The factors of\\",x,\\"are:\\") for i in range(1, x + 1): if x % i == 0: print(i) 5. Instruction: Generate a basic HTML form using JavaScript to submit a user's city and the submit the details to the server. 5. Input: Not applicable 5. Output: <form id=\\"myForm\\" onsubmit=\\"submitForm(event)\\"> City:<br> <input type=\\"text\\" name=\\"city\\"><br> <input type=\\"submit\\"> </form> <script> function submitForm(event) { event.preventDefault(); const form = document.getElementById('myForm'); const city = form.querySelector('input[name=\\"city\\"]').value; const data = { city: city }; const options = { method: 'POST', body: JSON.stringify(data), headers: { 'Content-Type': 'application/json' } }; fetch('/my-api/submit-form', options) .then(response => response.json()) .then(data => { console.log(data); }); } <\/script>"},{"prompt":"Write a python script to generate an array of random numbers between two specified values. min = 0 max = 50","completion":"import random # Generate an array of random numbers between two specified values def generate_array(min, max): array = [] for i in range(min, max): array.append(random.randint(min, max)) return array min = 0 max = 50 print(generate_array(min, max))"},{"prompt":"Create a Python program to filter out words containing five characters or less from a list of words. [Hello, Good, Where, Been, World, House]","completion":"# Function to filter out words containing five characters or less def filterWords(arr): result = [word for word in arr if len(word) > 5] return result # Get the input arr = [\\"Hello\\", \\"Good\\", \\"Where\\", \\"Been\\", \\"World\\", \\"House\\"] # Call the function result = filterWords(arr) # Print the result print(\\"Filtered list of words:\\", result)"},{"prompt":"Create a Python function to identify the number of even numbers present in a given list of numbers. list = [1, 2, 3, 4, 5]","completion":"def countEvenNum(list): return len([x for x in list if x % 2 == 0]) list = [1, 2, 3, 4, 5] print(countEvenNum(list))"},{"prompt":"Write a Python function to generate a random string of length 8 containing alphanumeric characters.","completion":"import string import random def generate_random_string(length): chars = string.ascii_letters + string.digits return ''.join(random.choice(chars) for _ in range(length))"},{"prompt":"Write a Python program to solve a linear equation system of the form: ax + by = c. a, b, c = 2, 1, 4","completion":"def solve_linear_equation_system(a, b, c): x = (c - b) / a y = (c - a*x) / b return x, y x, y = solve_linear_equation_system(a, b, c) print(\\"x = {}, y = {}\\".format(x, y)) # x = 2.0, y = 2.0"},{"prompt":"This code loads a JSON fixture file, extracts properties from it, creates Property objects from the properties, and saves them to the database. To use this code, you need to create a JSON fixture file with a properties key containing a list of property objects. Then, run the code with the appropriate command line arguments to specify the fixture file and folder. The saved objects will be printed to the console.","completion":"#!/usr/bin/env python # coding: utf-8 from __future__ import ( print_function, unicode_literals, absolute_import ) import argparse import json import os def get_path(): return unicode(os.path.abspath('.')) def parse_args(): _parser = argparse.ArgumentParser() _parser.add_argument('--fixture', type=str, help='fixture file to load', default='properties.json') _parser.add_argument('--fixture_folder', type=str, default='models/fixtures', help='where fixtures are stored.' ) return _parser.parse_args() def main(base_path): properties_to_save = [] args = parse_args() path = os.path.sep.join([base_path, 'app', args.fixture_folder, args.fixture]) with open(path) as file_: data = json.load(file_) properties = data['properties'] for property_ in properties: property_.pop('id') properties_to_save.append(Property(**property_)) Property.objects.insert(properties_to_save) return len(properties_to_save) if __name__ == '__main__': from app.models.properties import Property base_path = get_path() out = main(base_path) print(\\"{} objects saved\\".format(out))"},{"prompt":"Create an algorithm in Python to determine the most efficient order of tasks from an array of given tasks. tasks = [Task1, Task2, Task3, Task4, Task5]","completion":"def most_efficient_order(tasks): \\"\\"\\" This method takes a list of tasks and produces the most efficient order for completing the tasks. Parameters ---------- tasks: List A list of tasks to be performed. Returns ------- List An ordered list of tasks representing the most efficient order for completing the tasks. \\"\\"\\" tasks_to_complete = tasks.copy() order = [] while tasks_to_complete: min_time = float(\\"inf\\") task_index = None for i, task in enumerate(tasks_to_complete): if task.get_time() < min_time: min_time = task.get_time() task_index = i order.append(tasks_to_complete.pop(task_index)) return order"},{"prompt":"Optimize a given Python script that reverse a string. def reverse_string(string): reversed_string = for char in string: reversed_string = char + reversed_string return reversed_string","completion":"def reverse_string(string): return string[::-1]"},{"prompt":"Create an HTML form with a submit button to send information to a Python program.","completion":"<form action=\\"action.py\\" method=\\"post\\"> <input type=\\"submit\\" value=\\"Submit\\"> </form>"},{"prompt":"Generate a Python script that contains a function with two parameters and returns the sum of the two parameters. Not applicable","completion":"def add(x, y): \\"\\"\\"Returns the sum of x and y\\"\\"\\" return x + y"},{"prompt":"Create a Python program to read an array of integers and calculate their sum. [1, 3, 5, 7]","completion":"def calculate_sum(arr): sum = 0 for i in arr: sum += i return sum input_array = [1, 3, 5, 7] result = calculate_sum(input_array) print(result) # prints 16"},{"prompt":"Create a Python program that multiplies two input numbers and prints the result. a = 3 b = 4","completion":"def multiply(a, b): result = a * b print(result) multiply(a, b)"},{"prompt":"The code is a Python class called FileSystem that provides methods for saving, deleting, and finding task data. To use this class, import it and create an instance with a parameter dictionary that includes a 'taskDir' key specifying the directory where task data should be stored. Then call the methods on the instance as needed: To save task data, call the save_task method with a dictionary containing the data. If the dictionary does not already include an 'id' key, one will be generated and added to the dictionary. The task data will be stored in a file in a subdirectory of the taskDir directory named after the task ID. To delete task data, call the delete_task method with the ID of the task to delete. This will remove the subdirectory containing the task data. To find task data by ID, call the find_by_id method with the ID of the task to find. This will return the task data as a dictionary. To find task data for multiple IDs, call the find_by_ids method with a list of IDs. This will return a list of task data dictionaries. To find all task data, call the all_task_data method. This will return a list of all task data dictionaries, sorted by ID in ascending order by default (or descending order if the 'order' parameter is set to 'desc'). To get task data for a specific ID without raising an error if the data is not found, call the task_data method with the ID of the task to find. This will return the task data as a dictionary, or None if the task data is not found.","completion":"import os import json import logging import fcntl from jsub.util import safe_mkdir from jsub.util import safe_rmdir from jsub.error import RepoReadError from jsub.error import TaskNotFoundError ID_FILENAME = 'id' class FileSystem(object): def __init__(self, param): self.__jsub_dir = os.path.expanduser(param.get('taskDir', '~/jsub/')) # self.__id_file = os.path.join(self.__jsub_dir, ID_FILENAME) self.__logger = logging.getLogger('JSUB') # self.__create_repo_dir() self.__json_format = param.get('format', 'compact') def save_task(self, data): if 'id' not in data: safe_mkdir(self.__jsub_dir) data['id'] = self.__new_task_id() safe_mkdir(os.path.join(self.__jsub_dir,str(data['id']),'taskInfo')) task_path = os.path.join(self.__jsub_dir, str(data['id']),'taskInfo','repo') data_str = self.__json_str(data) with open(task_path, 'a+') as f: fcntl.flock(f, fcntl.LOCK_EX) f.seek(0) f.truncate() f.write(data_str) def delete_task(self, task_id): safe_rmdir(os.path.join(self.__jsub_dir,str(task_id))) def find_by_id(self, task_id): return self.task_data(task_id) def find_by_ids(self, task_ids): all_data = [] for task_id in task_ids: try: td = self.task_data(task_id) all_data.append(td) except RepoReadError as e: self.__logger.debug(e) return all_data def all_task_data(self, order='asc'): task_ids =[d for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))] task_ids.sort(key=int, reverse=(order=='desc')) return self.find_by_ids(task_ids) def task_data(self, task_id): safe_mkdir(os.path.join(self.__jsub_dir,str(task_id),'taskInfo')) task_path = os.path.join(self.__jsub_dir,str(task_id),'taskInfo','repo') with open(task_path, 'a+') as f: fcntl.flock(f, fcntl.LOCK_EX) f.seek(0) data_str = f.read() try: return json.loads(data_str) except ValueError as e: raise RepoReadError('JSON decode error on task %s: %s' % (task_id, e)) # def __create_repo_dir(self): # safe_mkdir(self.__jsub_dir) def __new_task_id(self): task_ids =[int(d) for d in os.listdir(self.__jsub_dir) if os.path.isdir(os.path.join(self.__jsub_dir,d))] if not task_ids: return 1 task_ids.sort(key=int, reverse=True) return(task_ids[0]+1) def __json_str(self, data): if self.__json_format == 'pretty': return json.dumps(data, indent=2) return json.dumps(data, separators=(',', ':'))"},{"prompt":"Create a visualization in Python using Matplotlib that displays the top 5 most popular programming languages. x_values = [Python, Java, C++, Javascript, C#] y_values = [45, 25, 15, 10, 5]","completion":"import matplotlib.pyplot as plt x_values = [\\"Python\\", \\"Java\\", \\"C++\\", \\"Javascript\\", \\"C#\\"] y_values = [45, 25, 15, 10, 5] plt.bar(x_values, y_values) plt.title(\\"Popular Programming Languages\\") plt.ylabel(\\"Percentage of Use\\") plt.xlabel(\\"Languages\\") plt.show()"},{"prompt":"Generate a single Python line to create a list that contains elements from another list. given_list = [1, 2, 3, 4, 5]","completion":"new_list = [element for element in given_list]"},{"prompt":"Write a Python function to find the maximum of three numbers. 3, 4, 5","completion":"def max_of_three(a, b, c): if a > b and a > c: return a elif b > a and b > c: return b else: return c result = max_of_three(3, 4, 5) print(result)"},{"prompt":"Write a Python program to scrape the table at the following URL and extract the planets information (name, mass, and distance from the sun). URL: https://en.wikipedia.org/wiki/List_of_gravitationally_rounded_objects_of_the_Solar_System","completion":"import requests from bs4 import BeautifulSoup page = requests.get('https://en.wikipedia.org/wiki/List_of_gravitationally_rounded_objects_of_the_Solar_System') soup = BeautifulSoup(page.content, 'lxml') planets_table = soup.find('table', class_='wikitable sortable') planets = [] for row in planets_table.find_all('tr'): if row.find('th'): continue cells = row.find_all('td') planets.append({ 'name': cells[0].text, 'mass': cells[2].text, 'distance_from_sun': cells[5].text }) print(planets)"},{"prompt":"Create a Python dictionary to store data about a student.","completion":"student_data = { 'name': 'John Smith', 'year': 'Freshman', 'gpa': 3.25, 'courses': ['math', 'english', 'Computer Science', 'Statistics'], 'extracurricular': ['Chess Club', 'Student Government', 'Debate Team'] }"},{"prompt":"Write a function in Python to remove duplicate entries from a list. [1,2,2,3,3,4]","completion":"def removeDuplicates(input): final_list = [] for num in input: if num not in final_list: final_list.append(num) return final_list lst = [1,2,2,3,3,4] print(removeDuplicates(lst))"},{"prompt":"Given the following array of numbers, write a Python program to find the maximum element. numbers = [1, 43, 78, 3, 92, 42]","completion":"#import max from the built-in library from max import max #initialize array of numbers numbers = [1, 43, 78, 3, 92, 42] #find maximum element print(max(numbers)) #output 92"},{"prompt":"Create a Python program to compress a given data sequence. Data sequence: 9, 2, 6, 0, 7","completion":"def compress_sequence(nums): output = [] temp = [] for i in range(1, len(nums)): if nums[i-1] * nums[i] >= 0: temp.append(nums[i-1]) else: temp.append(nums[i-1]) output.append(temp) temp = [] temp.append(nums[i]) output.append(temp) return output print(compress_sequence([9, -2, 6, 0, -7]))"},{"prompt":"Write a function in python to split an given array into two parts with equal sum. [1, 2, 3, 4]","completion":"def split_equal_sum(arr): n = len(arr) leftsum = 0 rightsum = sum(arr) for i in range(n): rightsum -= arr[i] if leftsum == rightsum: return True leftsum += arr[i] return False"},{"prompt":"Create a for loop in Python to calculate the total sum of all elements in the given list. data = [1, 9, 3, 5]","completion":"total = 0 for element in data: total = total + element print(total)"},{"prompt":"Suppose you want to build an autocomplete feature for a text editor, develop a Python program to generate a list of suggestions based on a given prefix. dictionnary = [ dog, deer, deal, dungeon, dark, dusk ] prefix = d","completion":"def auto_complete(dictionary, prefix): # list for words with the given prefix prefix_words = [] # iterate through the dictionary for word in dictionary: # if the word starts with given prefix, # add it to the list if word.startswith(prefix): prefix_words.append(word) return prefix_words dictionary = [\\"dog\\", \\"deer\\", \\"deal\\", \\"dungeon\\", \\"dark\\", \\"dusk\\"] prefix = \\"d\\" prefix_words = auto_complete(dictionary, prefix) print(prefix_words) # Output: # ['dog', 'deer', 'deal', 'dungeon', 'dark', 'dusk']"},{"prompt":"Design a neural network in Python to predict a customer’s annual income based on their age and education level. Not applicable","completion":"import numpy as np import keras from keras.layers import Dense from keras.models import Sequential # Build model model = Sequential() model.add(Dense(64, input_dim = 2, activation = 'relu')) model.add(Dense( 1)) # Compile the model model.compile(loss = 'mean_squared_error', optimizer = 'adam') # Obtain some data - age (years), education level (high school, college, university) x_train = np.array([[25, 0], [30, 0], [35, 0], [40, 0], [45, 1], [45, 2], [50, 1], [50, 2], [55, 1], [55, 2], [50, 3], [60, 3]]) # Labels - annual income y_train = [15000, 20000, 25000, 30000, 40000, 45000, 50000, 60000, 65000, 70000, 80000, 90000] # Fit the model model.fit(x_train, y_train, epochs = 150, batch_size = 2) # Calculate the predicted annual income age = 50 education = 3 annualIncome = model.predict(np.array([[age, education]])) print(annualIncome) # output: [[80000]]"},{"prompt":"Create a python program to classify text documents into two classes: positive and negative. positiveText = This is a great movie! negativeText = This movie was terrible","completion":"import nltk from nltk.classify import NaiveBayesClassifier def label_words(words): return dict([(word, True) for word in words]) positive_tokens = nltk.word_tokenize(positiveText) negative_tokens = nltk.word_tokenize(negativeText) positive_data = [(label_words(positive_tokens), 'positive')] negative_data = [(label_words(negative_tokens), 'negative')] train_data = positive_data + negative_data classifier = NaiveBayesClassifier.train(train_data) # classify classifier.classify( label_words(nltk.word_tokenize(\\"This movie was ok\\")))"},{"prompt":"Design a Python program to filter out the odd numbers from a list. list1 = [1, 2, 3, 4, 5, 6]","completion":"def filter_odd_numbers(numbers): filtered_list = [] for num in numbers: if num % 2 != 0: filtered_list.append(num) return filtered_list list1 = [1,2,3,4,5,6] filtered_list = filter_odd_numbers(list1) print(filtered_list) # [1, 3, 5]"},{"prompt":"Write a Python script to refresh a given table of data in a PostgreSQL database every 5 minutes. Not applicable","completion":"import psycopg2 from datetime import datetime, timedelta import schedule import time conn = psycopg2.connect( host=\\"localhost\\", database=\\"db\\", user=\\"user\\", password=\\"password\\" ) def refresh_data(): cur = conn.cursor() query = 'REFRESH TABLE \\"TableName\\";' cur.execute(query) conn.commit() # run the refresh_data job every 5 minutes schedule.every(5).minutes.do(refresh_data) while True: schedule.run_pending() time.sleep(1)"},{"prompt":"Make the following Python code snippet more efficient. def determine_commission_rate(gross_sales): if gross_sales >= 10000: commission_rate = 0.1 elif gross_sales >= 5000 and gross_sales < 10000: commission_rate = 0.07 elif gross_sales < 5000: commission_rate = 0.05 return commission_rate","completion":"def determine_commission_rate(gross_sales): if gross_sales >= 10000: return 0.1 elif gross_sales >= 5000: return 0.07 else: return 0.05"},{"prompt":"Construct a Python program that computes the area of a circle with the given radius. radius = 5","completion":"import math def area_circle(radius): return math.pi * (radius ** 2) area = area_circle(radius) print('The area of the circle is %.2f' % area)"},{"prompt":"mplement a basic version control system in Python that keeps track of changes in the code.","completion":"class VersionControl: def __init__(self, lines): self.lines = lines self.mark = 0 def commit(self): self.mark += 1 log_file = open(\\"log_file.txt\\", \\"a+\\") log_file.write(str(self.mark) + \\": \\" + str(self.lines)) log_file.close() def restore(self): log_file = open(\\"log_file.txt\\", \\"r\\") lines = log_file.readlines() to_mark = self.mark-1 self.lines = lines[to_mark] log_file.close()"},{"prompt":"Write a Python program to solve the Towers of Hanoi game. starting = [(1, A), (4, A), (7, A), (2, A), (5, A), (8, A), (3, A), (6, A)]","completion":"def hanoi(n, source, spare, target): if n == 1: disk = source.pop(0) print(\\"Moving disk {0} from {1} to {2}\\".format(disk[0], disk[1], target[1])) target.insert(0, disk) else: hanoi(n-1, source, target, spare) disk = source.pop(0) print(\\"Moving disk {0} from {1} to {2}\\".format(disk[0], disk[1], target[1])) target.insert(0, disk) hanoi(n-1, spare, source, target) n = 8 source = [(i, \\"A\\") for i in range(1, n+1)] target = [] spare = [] hanoi(n, source, spare, target)"},{"prompt":"Analyze a dataset of customers and create a classification model in scikitlearn to determine customer churn. Not applicable","completion":"# Python code import pandas as pd import numpy as np from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split # Load the data set data = pd.read_csv(\\"customer_data.csv\\") # Select features X = data.drop(['churn'], axis=1) # Select targets y = data['churn'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create the model model = RandomForestClassifier() # Train the model model.fit(X_train, y_train) # Make predictions and measure accuracy predictions = model.predict(X_test) print(model.score(X_test, y_test))"},{"prompt":"Create a Django application with a model that stores the name, address, and email of a user.","completion":"# create Django app django-admin startproject myapp # create user model from django.db import models class User(models.Model): name = models.CharField(max_length=100) address = models.CharField(max_length=100) email = models.EmailField(max_length=100) # migrate models python manage.py makemigrations python manage.py migrate"},{"prompt":"Create a function in Python to convert a given number into its Roman form. number = 15","completion":"def int_to_Roman(number): val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while number > 0: for_val = number // val[i] roman_num += syb[i] * for_val number -= val[i] * for_val i += 1 return roman_num"},{"prompt":"Create a linkedlist in Python that can traverse in both directions.","completion":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class DoubleLinkedList: def __init__(self): self.head = None def append(self, new_data): new_node = Node(new_data) if self.head is None: self.head = new_node else: curr_node = self.head while curr_node.next != None: curr_node = curr_node.next curr_node.next = new_node new_node.prev = curr_node def prepend(self, new_data): new_node = Node(new_data) if self.head is None: self.head = new_node return new_node.next = self.head self.head.prev = new_node self.head = new_node def reverse(self): curr_node = self.head while curr_node: temp = curr_node.next curr_node.next = curr_node.prev curr_node.prev = temp curr_node = curr_node.prev if temp: self.head = temp.prev"},{"prompt":"Program a python code to convert Celsius to Fahrenheit.","completion":"def celsiusToFahrenheit(temp): return round((temp * 9/5) + 32, 2)"},{"prompt":"Create a machine learning algorithm in Python to categorize a dataset of records. [ {label: apple, features: [1, 1, 0]}, {label: banana, features: [0, 1, 1]}, {label: lemon, features: [0, 0, 1]}, {label: orange, features: [1, 0, 0]}, {label: pear, features: [0, 1, 0]}, ]","completion":"import numpy as np from sklearn.svm import SVC # Dataset training_data = [ {\\"label\\": \\"apple\\", \\"features\\": [1, 1, 0]}, {\\"label\\": \\"banana\\", \\"features\\": [0, 1, 1]}, {\\"label\\": \\"lemon\\", \\"features\\": [0, 0, 1]}, {\\"label\\": \\"orange\\", \\"features\\": [1, 0, 0]}, {\\"label\\": \\"pear\\", \\"features\\": [0, 1, 0]}, ] # Feature extraction X = [] y = [] for data in training_data: X.append(data['features']) y.append(data['label']) # Model clf = SVC() clf.fit(X, y) # Prediction predict_data = [1, 0, 1] predicted_label = clf.predict([predict_data]) print(predicted_label[0])"},{"prompt":"Create an application in Python for encryption and decryption of strings. The application should take a string as input, and use a cipher text algorithm of choice to encrypt the string. Not applicable","completion":"from Crypto.Cipher import AES key = b'Sixteen byte key' def encrypt(plaintext): cipher = AES.new(key, AES.MODE_ECB) return cipher.encrypt(plaintext) def decrypt(ciphertext): cipher = AES.new(key, AES.MODE_ECB) return cipher.decrypt(ciphertext)"},{"prompt":"Suggest a valid Python syntax to calculate the sum of two variables using lambda a = 3, b = 4","completion":"sum = lambda a, b : a + b print(sum(3,4))"},{"prompt":"Generate code for a Machine Learning model in Python which can recognize handwritten digits from 0 to 9 Not applicable","completion":"# Importing necessary libraries import numpy as np import pandas as pd from tensorflow.keras.datasets import mnist from tensorflow.keras.layers import Dense, Input, Dropout from tensorflow.keras.models import Model from tensorflow.keras.utils import to_categorical # Loading data (X_train, y_train), (X_test, y_test) = mnist.load_data() # Defining the neural network model # Input layer inputs = Input(shape=(28,28,)) # Hidden layer h1 = Dense(64, activation='relu')(inputs) h2 = Dropout(0.5)(h1) # Output layer outputs = Dense(10, activation='softmax')(h2) # Compiling the model model = Model(inputs=inputs, outputs=outputs) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) # Data pre-processing # Reshape inputs from (60000, 28, 28) to (60000, 784) X_train = X_train.reshape(60000, 784) X_test = X_test.reshape(10000, 784) # Normalize pixel values X_train = X_train.astype('float32') X_train /= 255 X_test = X_test.astype('float32') X_test /= 255 # One-hot encode labels y_train = to_categorical(y_train, num_classes=10) y_test = to_categorical(y_test, num_classes=10) # Fitting the model model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, batch_size=128)"},{"prompt":"Explain the difference between a \`\`list\`\` and a \`\`tuple\`\` in Python.","completion":"The difference between a list and a tuple in Python is that a list is mutable, meaning its contents can be changed, while a tuple is immutable, meaning its contents cannot be changed. A list has square brackets around it, while a tuple has parentheses around it. Lists are used when the data needs to be changed, while tuples are used when the data is fixed and cannot be changed."},{"prompt":"Generate a Python program to calculate the Fibonacci number at a given position. n = 10","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) n = 10 print(fibonacci(n))"},{"prompt":"Create a program in Python to generate a Random Password of length 8 characters, which contains at least one of each character type (lowercase, uppercase, digits, special characters). Not applicable","completion":"import string import random # length of password length = 8 # special characters special_characters = \\"!#%&'()*+,-./:;<=>?@[]^_\`{|}~\\" # generating password password = random.choice(string.ascii_lowercase) password += random.choice(string.ascii_uppercase) password += random.choice(string.digits) password += random.choice(special_characters) for i in range(length): password += random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits + special_characters) password = ''.join(random.sample(password,len(password))) print (\\"Password is: \\", password)"},{"prompt":"Write a Python program to extract all the words starting with a specific letter The letter is 's'","completion":"\\"\\"\\" Extract all the words starting with a specific letter \\"\\"\\" def extract_words(word, letter): words_list = [] for w in word.split(): if w[0] == letter: words_list.append(w) return words_list if __name__ == '__main__': words = 'This is a sample sentence to test the program' letter = 's' print(extract_words(words, letter))"},{"prompt":"mplement a hash table in Python that supports insert, delete and retrieve operations.","completion":"class HashTable: def __init__(self): self.table = [[] for _ in range(256)] def insert(self, key, value): h = hash(key) % 256 for i, kv in enumerate(self.table[h]): if kv[0] == key: self.table[h][i] = (key, value) return self.table[h].append((key, value)) def retrieve(self, key): h = hash(key) % 256 for kv in self.table[h]: if kv[0] == key: return kv[1] def delete(self, key): h = hash(key) % 256 for i, kv in enumerate(self.table[h]): if kv[0] == key: del self.table[h][i]"},{"prompt":"Create a search engine in Python to quickly search through a given array. Array: ['school', 'hospital', 'bookstore', 'mall', 'theatre']","completion":"# Define the array array = ['school', 'hospital', 'bookstore', 'mall', 'theatre'] # Function to perform linear search def linearSearch(search_item): # Loop through array for i in range(len(array)): # If search item is found, return its position if array[i] == search_item: return i # If item is not found, return -1 return -1 # Input search item s = input(\\"Enter the item to be searched: \\") # Search the item result = linearSearch(s) # Print result if result == -1: print(\\"Item not found.\\") else: print(\\"Item is found at position \\"+str(result))"},{"prompt":"Create a function in Python that prints out the largest value from a given list of numbers. list = [2, 4, 1, 6]","completion":"def get_max_value(numbers): return max(numbers) print(get_max_value(list)) # 6"},{"prompt":"Write a python script that takes a list of numbers from 1 to 8 and prints its cubic values. [1, 2, 3, 4, 5, 6, 7, 8]","completion":"list_numbers = [1, 2, 3, 4, 5, 6, 7, 8] for num in list_numbers: print(num**3)"},{"prompt":"Create a dictionary in Python with keyvalue pairs Key: FirstName value: John","completion":"my_dict = { \\"FirstName\\": \\"John\\" }"},{"prompt":"Write a Python code to find the number of unique paths from a given source to a destination.","completion":"def num_unique_paths(m, n): dp = [[0 for x in range(m)] for y in range(n)] # Count of paths to reach any # cell in first column is 1 for i in range(n): dp[i][0] = 1 # Count of paths to reach any # cell in first column is 1 for j in range(m): dp[0][j] = 1 # Calculate count of paths for other # cells in bottom-up manner using # the recursive solution for i in range(1, n): for j in range(1, m): # By uncommenting the last # part the code calculatest he total # possible paths if the diagonal # Movements are allowed dp[i][j] = dp[i-1][j] + dp[i][j-1]# + dp[i-1][j-1] return dp[n-1][m-1]"},{"prompt":"Generate a Python program to display a Fibonacci sequence of first n numbers.","completion":"def Fibonacci(n): if n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) n = 10 for i in range(1, n): print(Fibonacci(i))"},{"prompt":"This code is a Python script that provides a commandline interface to download subtitles for movies and TV shows. To use it, run the script and provide one or more release paths as arguments. You can also specify the language and subtitle site to use. The available commands are download, exist, test, list, help, and version.","completion":"#!/usr/bin/env python #-*- coding:utf-8 -*- # Name: Subtitles Client # Site: http://RealGame.co.il __author__ = 'RealGame (Tomer Zait)' __license__ = 'GPL v3' __version__ = '1.0' __email__ = 'realgam3@gmail.com' from os import path from sys import argv from docopt import docopt from engines.engine import SubtitleSite, SUBTITLE_SITE_LIST, DEFAULTS __doc__ = \\"\\"\\" Subtitles Client Usage: {prog} download <releases_path>... [--lang=<language> --engine=<subtitle_site>...] {prog} exist <releases_path>... [--lang=<language> --engine=<subtitle_site>...] {prog} test [<engines>...] {prog} (-l | --list) {prog} (-h | --help) {prog} (-v | --version) Options: -l --list Show subtitles engine list. -h --help Show this screen. -v --version Show version. --lang=<language> Subtitle language (alpha2) [default: {def_language}]. --engine=<subtitle_site> Subtitle site [default: {def_engine}]. \\"\\"\\".format(prog=path.basename(argv[0]), def_language=DEFAULTS['subtitle_language'], def_engine=DEFAULTS['subtitle_engine']) def download_subtitles(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']): if releases: for release in releases: for engine in engines: subtitle_release = SubtitleSite.get_file_properties(release)['release_name'] print \\"[{engine: ^15}] Trying To Download Subtitles For: '{release}'\\".format(engine=engine, release=subtitle_release) sub_obj = SubtitleSite.class_factory(engine) subtitle_path = sub_obj.download_subtitle(release, lang) if subtitle_path: print \\"{0:17} Download Success: ({file_path}).n\\".format(\\"\\", file_path=subtitle_path) else: print \\"{0:17} Subtitles Not Found.n\\".format(\\"\\") def is_subtitles_exist(releases, engines=[DEFAULTS['subtitle_engine']], lang=DEFAULTS['subtitle_language']): if releases: for release in releases: for engine in engines: subtitle_release = SubtitleSite.get_file_properties(release)['release_name'] sub_obj = SubtitleSite.class_factory(engine) exist_flag = sub_obj.is_subtitle_exist(release, lang) res = \\"Exist\\" if not exist_flag: res = \\"Does Not \\" + res print \\"[{engine: ^15}] '{release}' - {res}.\\".format(engine=engine, release=subtitle_release, res=res) def test_engines(engines): if not engines: engines = SUBTITLE_SITE_LIST.keys() for engine_key in engines: t = SubtitleSite.class_factory(engine_key) t.test_engine() def main(): args = docopt(__doc__, help=True, version='Subtitles Client %s' % __version__) if args['download']: download_subtitles(args['<releases_path>'], args['--engine'], args['--lang']) elif args['exist']: is_subtitles_exist(args['<releases_path>'], args['--engine'], args['--lang']) elif args['test']: test_engines(args['<engines>']) elif args['--list']: for sub_site in SUBTITLE_SITE_LIST.keys(): sub_dict = SUBTITLE_SITE_LIST.get(sub_site) print sub_dict.get('class_name') if __name__ == \\"__main__\\": main()"},{"prompt":"Optimize the following Python program to find the maximum number in a list. list = [9, 2, 5, 6, 4, 1]","completion":"def max_num(list): max_num = list[0] for num in list: if num > max_num: max_num = num return max_num"},{"prompt":"Develop an algorithm in Python that takes a list of strings as an input and sorts them alphabetically. List of Strings: [hello, world, good, morning, programming]","completion":"def sortAlphabetically(strings): strings.sort() return strings #Test strings = [\\"hello\\", \\"world\\", \\"good\\", \\"morning\\", \\"programming\\"] sorted_strings = sortAlphabetically(strings) print(*sorted_strings)"},{"prompt":"Create a Python program to print a formatted table of grades for a given set of students. Students = [ { 'name': John, 'grade': 92 }, { 'name': Alice, 'grade': 95 }, { 'name': Bob, 'grade': 87 } ]","completion":"def print_grade_table(students): max_name_length = max(len(student['name']) for student in students) line_template = \\"{{name:<{max_name_length}}} {{grade}}\\".format(max_name_length=max_name_length) header = line_template.format(name='Name', grade='Grade') sep = '-' * len(header) print(header) print(sep) for student in students: print(line_template.format(**student))"},{"prompt":"Design a Python code snippet that deletes all duplicates in a given list of numbers.","completion":"def deleteDuplicates(list): final_list = [] for num in list: if num not in final_list: final_list.append(num) return final_list"},{"prompt":"Write a Python program to visually summarize the Twitter data. Twitter data is a stream of tweets with data fields like : tweet author, date of tweet, text, number of likes, number of retweets.","completion":"import matplotlib.pyplot as plt # Process the Twitter data to extract # the relevant data fields # ... # Plot the tweet authors plt.xlabel('Tweet Authors') plt.ylabel('Number of tweets') plt.title('Tweet Author Summary') plt.bar(authors, num_tweets) plt.show() # Plot the number of likes plt.xlabel('Tweets') plt.ylabel('Number of Likes') plt.title('Number of Likes Summary') plt.bar(tweets, num_likes) plt.show() # Plot the number of retweets plt.xlabel('Tweets') plt.ylabel('Number of Retweets') plt.title('Number of Retweets Summary') plt.bar(tweets, num_retweets) plt.show()"},{"prompt":"Develop a function in Python that takes in a string of sentences and removes all the punctuations. This is a sample string!","completion":"import string def remove_punctuations(s): return s.translate(str.maketrans('', '', string.punctuation)) if __name__ == '__main__': sentence = \\"This is a sample string!\\" print(remove_punctuations(sentence))"},{"prompt":"Create a model in Python using Linear Regression that can predict the housing prices given the living area and number of rooms. data = [[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]]","completion":"import numpy as np from sklearn import linear_model X = np.array([[2000, 3], [1600, 2.5], [2400, 3.5], [1400, 2], [3000, 4]]) y = np.array([75000, 43000, 59000, 32000, 85000]) model = linear_model.LinearRegression() model.fit(X, y) prediction = model.predict([[2200, 3]])"},{"prompt":"Create a loop in Python that prints each item of the following list with a message: my_list = ['A', 'B', 'C', 'D']","completion":"my_list = ['A', 'B', 'C', 'D'] for item in my_list: print(\\"The item is: {}\\".format(item))"},{"prompt":"Develop a regular expression in Python to match all numeric strings.","completion":"import re # Regular expression to match all numeric strings pattern = '^[0-9]+' # Input string string = '123456789' # Matching a pattern result = re.match(pattern, string) if result: print(\\"String is a valid numeric string\\") else: print(\\"String isn't a valid numeric string\\")"},{"prompt":"Create a BPMN diagram for FOMDES process 1 using Python and the bpmn_pgv library. The diagram should include clusters for Secretaría Ejecutiva, Presidencia, and Presupuesto/Administración, with specific tasks and edges defined within each cluster. Additionally, include nodes for SIGEFOMDES Administración and SISAC, and connect them to the appropriate clusters using dashed edges. Finally, save the diagram as a PNG file named proc4.png and a DOT file named proc4.dot.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- \\"\\"\\" BPMN diagram for FOMDES process 1 \\"\\"\\" from __future__ import absolute_import from __future__ import division from __future__ import print_function from __future__ import unicode_literals from bpmn_pgv import * import pygraphviz as pgv __author__ = 'mapologo' PROCESS_LABEL = \\"Liquidación de Créditos\\" # A graph for FOMDES processes F = pgv.AGraph(strict=False, directed=True) F.graph_attr.update(label=\\"\\", rankdir=\\"TB\\", splines=\\"ortho\\", labelloc=\\"b\\", size=\\"8, 7.5\\", forcelabels=\\"true\\", ranksep=\\"0.25\\", fontname=\\"Liberation Sans Narrow Condensed\\") F.node_attr.update(fontname=\\"Liberation Sans Narrow Condensed\\") F.edge_attr.update(fontname=\\"Liberation Sans Narrow Condensed\\", fontsize=\\"10\\") se_cluster = {\\"se7\\": (\\"Recibir el documento protocolizado\\", \\"start\\"), \\"se8\\": (\\"Revisar el documento protocolizado\\", \\"human\\"), \\"se9\\": (\\"\\", \\"end\\")} se_edges = {\\"se7\\": {\\"se8\\": {}}, \\"se8\\": {\\"se9\\": {\\"style\\": \\"invis\\"}}} SE = add_cluster(F, \\"se\\", \\"Secretaría Ejecutiva\\", se_cluster, se_edges) p_cluster = {\\"p1\\": (\\"Firma del cheque\\", \\"human\\"), \\"p2\\": (\\"Entregar cheque a beneficiario\\", \\"message\\")} p_edges = {\\"p1\\":{\\"p2\\": {}}} P = add_cluster(F, \\"p\\", \\"Presidencia\\", p_cluster, p_edges) pr_cluster = {\\"pr2\\": (\\"Verificar documentación legal y elaborar certificación de disponibilidad\\", \\"human\\"), \\"pr3\\": (\\"Crear las cuentas por cobrar\\", \\"human\\"), \\"pr4\\": (\\"Generar tablas de amortización\\", \\"human\\"), \\"pr5\\": (\\"Imprimir y firmar orden de liquidación y cheque\\", \\"human\\")} pr_edges = {\\"pr2\\": {\\"pr3\\": {}}, \\"pr3\\": {\\"pr4\\": {}}, \\"pr4\\": {\\"pr5\\": {}}} PR = add_cluster(F, \\"pr\\", \\"Presupuesto/Administración\\", pr_cluster, pr_edges) F.add_node(\\"SIGEFOMDES Administración\\", image=IMAGE_PATH + \\"database.png\\", shape=\\"plaintext\\", label=\\"\\", xlabel=\\"SIGEFOMDES Administración\\") F.add_node(\\"SISAC\\", image=IMAGE_PATH + \\"database.png\\", shape=\\"plaintext\\", label=\\"\\", xlabel=\\"SISAC\\") global_edges = {\\"Beneficiario\\": {\\"se7\\": {\\"style\\": \\"dashed\\"}}, \\"se8\\": {\\"pr2\\": {\\"style\\": \\"dashed\\"}}, \\"pr3\\": {\\"SIGEFOMDES Administración\\": {\\"style\\": \\"dashed\\"}}, \\"pr4\\": {\\"SISAC\\": {\\"style\\": \\"dashed\\"}}, \\"pr5\\": {\\"p1\\": {\\"style\\": \\"dashed\\"}}, \\"p2\\": {\\"se9\\": {\\"style\\": \\"dashed\\"}, \\"Beneficiario\\": {\\"style\\": \\"dashed\\"}}} add_edges(F, global_edges) F.draw(\\"proc4.png\\", prog='dot') F.write(\\"proc4.dot\\")"},{"prompt":"Write a python function to calculate an exponential series","completion":"def exponential_series(x,n): sum = 0 for i in range(n+1): sum += x ** i return sum"},{"prompt":"Design an algorithm in Python to add two large numbers represented as strings. The two numbers: 111 and 1337","completion":"def add_large_numbers(num1, num2): num1 = num1[::-1] num2 = num2[::-1] carry = 0 result = \\"\\" # Iterate over the length of the length of larger string for i in range(max(len(num1), len(num2))): if i < len(num1): digit1 = int(num1[i]) else: digit1 = 0 if i < len(num2): digit2 = int(num2[i]) else: digit2 = 0 sum_total = digit1 + digit2 + carry carry = sum_total // 10 result += str(sum_total % 10) # Add remaining carry if carry > 0: result += str(carry) return result[::-1] print(add_large_numbers(\\"111\\", \\"1337\\")) # Output: 1448"},{"prompt":"Design an algorithm in Python, that takes an array and sort it in ascending order. [10, 3, 9, 1, 15, 2]","completion":"def sort_ascending(array): array.sort() return array sort_ascending([10, 3, 9, 1, 15, 2]) # [1, 2, 3, 9, 10, 15]"},{"prompt":"Complete the Python class below so that it can calculate the sum of two integers. class Sum: def __init__(self, x, y): self.x = x self.y = y","completion":"class Sum: def __init__(self, x, y): self.x = x self.y = y def add(self): return self.x + self.y"},{"prompt":"Suggest a completion for the following Python code to check if a given number is an Armstrong number. def is_armstrong_number(num)","completion":"def is_armstrong_number(num): order = len(str(num)) sum = 0 temp = num while temp > 0: digit = temp % 10 sum += digit ** order temp //= 10 if num == sum: return True else: return False"},{"prompt":"Write an algorithm in Python that finds the maximum sum of an array of nonnegative integers, given an upper limit value. limit = 10 array = [1, 3, 5, 4, 2, 6]","completion":"def findMaxSum(limit, array): maxSum = 0 for i in range(len(array)): currentSum = 0 for j in range(i, len(array)): currentSum += array[j] if currentSum <= limit and currentSum > maxSum: maxSum = currentSum return maxSum"},{"prompt":"Write a Python program to generate ngrams of the given text with a window size of 3. The quick brown fox jumps over the lazy dog","completion":"from collections import Counter def generate_ngrams(text, window_size): text = text.lower().split(' ') ngrams = [] for n in range(window_size, len(text)+1): for i in range(len(text)-n+1): ngrams.append(' '.join(text[i:i+n])) return Counter(ngrams) text = \\"The quick brown fox jumps over the lazy dog\\" window_size = 3 ngrams_count = generate_ngrams(text, window_size) print('nNGRAMS COUNT:',ngrams_count) # Output # NGRAMS COUNT: Counter({'the quick brown': 3, # 'quick brown fox': 2, # 'over the lazy': 1, # 'brown fox jumps': 1, # 'fox jumps over': 1, # 'the lazy dog': 1, # 'jumps over the': 1, # 'quick brown fox jumps': 1})"},{"prompt":"Output the Fibonacci sequence as a list of integers in Python","completion":"def fibonacci_sequence(n): # Creating list of length n fib_list = [0]*n # first and second terms fib_list[0] = 0 fib_list[1] = 1 # Application of the recursive algorithm for i in range(2, n): fib_list[i] = fib_list[i-1] + fib_list[i-2] return fib_list"},{"prompt":"Develop a machine learning algorithm in Python to identify apples from bananas. No Inpu","completion":"import numpy as np import matplotlib.pyplot as plt from sklearn.svm import SVC # Load data X = np.array([[1,2,3], [-1,2,5], [-1,2,7], [5,5,5], [3,3,3], [5,5,7]]) y = np.array([0, 0, 0, 1, 0, 1]) # Initialize classifier clf = SVC(kernel='linear') # Fit data clf.fit(X, y) # Test classifier x_test = np.array([[2,2,2], [4,4,4]]) prediction = clf.predict(x_test) print(prediction)"},{"prompt":"Write a Python program to convert a list of lists into a dictionary where the first element of each list is the key and the rest of the elements are the values. list1 = [apple, red, green] list2 = [banana, yellow, green]","completion":"dict1 = {} for lst in [list1, list2]: key = lst[0] val = lst[1:] dict1[key] = val print(dict1) # Output: {'apple': ['red', 'green'], 'banana': ['yellow', 'green']}"},{"prompt":"Generate a fuzzy search algorithm in Python that can match strings with near similarities.","completion":"def find_matches(query, choices, threshold): # Convert query and choices to lower case query, choices = query.lower(), [choice.lower() for choice in choices] # Initialize empty list to store matches matches = [] # Loop through each choice for choice in choices: # Calculate Levenshtein distance between query and choice distance = levenshtein_distance(query, choice) # If distance is less than threshold, append choice to matches if distance <= threshold: matches.append(choice) return matches"},{"prompt":"Write a Python program to generate a random password. The program should generate a string of 8 characters (numbers, letters and special characters) No inpu","completion":"import random import string def generate_password(): password_characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(password_characters) for i in range(8)) print(password) generate_password()"},{"prompt":"it possible to create a HTML page that displays a table of contents from the data stored in a database?","completion":"Yes, it is possible to create a HTML page that displays a table of contents from the data stored in a database. You can use HTML, CSS, and JavaScript to create the table and a server-side language such as PHP or Python to query the database and retrieve the relevant data. Once you have the data, you can use JavaScript to render the table within the HTML page."},{"prompt":"Write a Python program to compute the average salary of people over a given range of numbers from the dataset 'salary.csv'. salary.csv: name, salary John, 1000 Sara, 2000 Alice, 3000","completion":"import csv def get_average_salary(filename): total = 0 count = 0 with open(filename, 'r') as csvfile: csvreader = csv.reader(csvfile) next(csvreader) # skip header # loop through the CSV rows for row in csvreader: total += int(row[1]) count += 1 return total/count average_salary = get_average_salary('salary.csv') print('Average Salary: ', average_salary) # Output: # Average Salary: 2000.0"},{"prompt":"mplement a supervised learning algorithm in Python for a classification task using the iris dataset. Not applicable","completion":"# Import necessary libraries import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier from sklearn.metrics import confusion_matrix # Load and explore the data dataset = pd.read_csv('iris.csv') X = dataset.iloc[:, :-1].values y = dataset.iloc[:, -1].values # Split the dataset into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # Preprocess the data scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Define the model clf = KNeighborsClassifier(n_neighbors=5) # Fit the model to the training set clf.fit(X_train, y_train) # Make predictions on the test set y_pred = clf.predict(X_test) # Evaluate the model's performance cm = confusion_matrix(y_test, y_pred) print(cm)"},{"prompt":"mprove the following Python code to check if a number is in the range of 1 to 10 (inclusive). def check_number(num): if num >= 1 and num <= 10: return True","completion":"def check_number(num): if (num > 0 and num < 11): return True else: return False"},{"prompt":"Create an algorithm in Python to generate the first n elements of the Sierpinski triangle. n = 6","completion":"def sierpinski_triangle(n): # Drawing lines for first row for i in range(2**n): print(' ', end=\\" \\") # loop for printing n rows for i in range(1, n+1): # bit pattern for first and # last line of each row for j in range(2**(i-1), 2**i): print('1', end=\\" \\") print() # inner rows have opposite bit pattern if i > 1: for j in range(2**(i-1)+1, 2**i-1): print('0', end=\\" \\") print() sierpinski_triangle(6)"},{"prompt":"Write a function in Python to count the number of vowels in a string.","completion":"def count_vowels(string): count = 0 vowels = set(\\"aeiouAEIOU\\") for letter in string: if letter in vowels: count += 1 return count"},{"prompt":"mplement a function f() in Python that takes an argument n and prints the multiplication table of n","completion":"def f(n): for i in range(1, 11): print(\\"{} * {} = {}\\".format(n, i, n*i))"},{"prompt":"Write a python program to optimize the given objective function.","completion":"from scipy.optimize import minimize def obj_func(x): # objective function # ... def optimize(): # set up optimization problem x0 = [0.0, 0.0, 0.0] res = minimize(obj_func, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) return res.x print(optimize())"},{"prompt":"Create a Python generator that returns numbers from a given list. [1,3,5,7,9]","completion":"def list_generator(input_list): for item in input_list: yield item gen = list_generator([1,3,5,7,9]) for item in gen: print(item)"},{"prompt":"Develop a Python program to create an autocomplete system that predicts words based on the input text.","completion":"def autocomplete(input_text): # Generate the word candidates word_candidates = generate_candidates(input_text) # Filter the word candidates filtered_words = filter_candidates(word_candidates) # Rank the words and return the top 5 sorted_words = rank_words(filtered_words) return sorted_words[:5]"},{"prompt":"Write a Python code snippet to print the unique elements of a given list.","completion":"def print_unique(my_list): seen = set() for x in my_list: if x not in seen: print(x) seen.add(x)"},{"prompt":"Create a Python program that convert a given string to a list of integers.","completion":"def to_int_list(s): return [int(x) for x in s.split(',')]"},{"prompt":"Create a basic blockchain in Python using only the core modules Not applicable","completion":"import hashlib import json class Blockchain: def __init__(self): self.chain = [] self.transactions = [] def create_block(self, nonce, previous_hash): block = { 'block_number': len(self.chain) + 1, 'timestamp': self._current_timestamp(), 'nonce': nonce, 'previous_hash': previous_hash } self.chain.append(block) return block def _current_timestamp(self): return round(time.time() * 1000) def hash_block(self, block): string_object = json.dumps(block, sort_keys=True) block_string = string_object.encode() raw_hash = hashlib.sha256(block_string) hex_hash = raw_hash.hexdigest() return hex_hash"},{"prompt":"Create a Python program to remove all duplicate elements from a list and preserving the original order. [1, 3, 3, 5, 5, 7]","completion":"# Program to remove duplicate elements def remove_duplicates(nums): new_list = [] for num in nums: if num not in new_list: new_list.append(num) return new_list # Main program nums = [1, 3, 3, 5, 5, 7] dedup_nums = remove_duplicates(nums) print(dedup_nums) # [1, 3, 5, 7]"},{"prompt":"Generate a voltage signal with random noise using a Python script. A signal of frequency 250 Hz and amplitude 1 V.","completion":"import numpy as np freq = 250 amplitude = 1 t= np.linspace(0, 1, 1000) voltage_signal = np.sin(2*np.pi*freq*t) + np.random.normal(0, 0.1, 1000)"},{"prompt":"Write a Python function that takes an array of numbers and returns an array with the greatest and smallest values. [3, 4, 2, 8, 15, 6]","completion":"def min_max(arr): min_val = min(arr) max_val = max(arr) return [min_val, max_val] result = min_max([3, 4, 2, 8, 15, 6]) print(result)"},{"prompt":"Construct a Python code that accepts a string as an input and returns the total number of vowels in the string","completion":"def count_vowels(string): vowels = \\"aeiou\\" count = 0 for s in string: if s.lower() in vowels: count += 1 return count"},{"prompt":"Generate a Python program that prints out every number from 0 to 10, but with every number being multiplied by 2. Not applicable","completion":"for i in range(11): print(i*2)"},{"prompt":"Create a Python program that takes a string and indicates whether it is a palindrome or not. racecar","completion":"def is_palindrome(s): s = s.lower() left = 0 right = len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True print(is_palindrome(\\"racecar\\"))"},{"prompt":"Generate a machine learning model in Python using scikitlearn for classifying digits in the MNIST dataset. mnist datase","completion":"# Import the necessary libraries from sklearn.datasets import fetch_openml import numpy as np from sklearn.linear_model import LogisticRegression #Load the dataset mnist = fetch_openml('mnist_784') # Split into features and labels X = mnist.data y = mnist.target # Reshape data to be valid X = X.reshape((X.shape[0], -1)) print(X.shape, y.shape) # Create a Logistic Regression classifier clf = LogisticRegression() # Fit the model to the data clf.fit(X, y)"},{"prompt":"Develop a Python script to generate an RSA public/private key pair. Not applicable","completion":"from Crypto.PublicKey import RSA def generate_key_pair(): key = RSA.generate(2048) pub_key = key.publickey().export_key().decode() with open('public.pem', 'w') as file: file.write(pub_key) priv_key = key.export_key().decode() with open('private.pem', 'w') as file: file.write(priv_key) generate_key_pair()"},{"prompt":"Create a web application in Python using Flask that will take user input and generate an HTML page with the input. Not applicable","completion":"from flask import Flask, render_template, request app = Flask(__name__) @app.route('/', methods=['GET', 'POST']) def home(): if request.method == 'POST': input_text = request.form.get('input_text') return render_template('result.html', input_text=input_text) return render_template('index.html') if __name__ == '__main__': app.run(debug=True) // result.html file <html> <body> <h1>Your Input: </h1> <p>{{input_text}}</p> </body> </html>"},{"prompt":"mplement a basic machine learning model in Python that performs binary classification on the given data. [ [0.3, 0.2, 0.6], [0.3, 0.1, 0.4], [0.2, 0.3, 0.4], [0.7, 0.4, 0.2], [0.5, 0.2, 0.1] ]","completion":"from sklearn import linear_model from sklearn.metrics import accuracy_score X = [[0.3, 0.2, 0.6], [0.3, 0.1, 0.4], [0.2, 0.3, 0.4], [0.7, 0.4, 0.2], [0.5, 0.2, 0.1]] y = [1, 0, 0, 1, 0] model = linear_model.LogisticRegression() model.fit(X, y) y_pred = model.predict(X) accuracy = accuracy_score(y, y_pred) print('Model accuracy:', accuracy)"},{"prompt":"Design a machine learning algorithm in Python that can identify whether a given sentence is an 'affirmative' sentence or a 'negative' sentence.","completion":"import re import nltk nltk.download('stopwords') from nltk.corpus import stopwords # Function to find the negation words def findNegation(sentence): # save all the negation words negationwords = {'not', 'never', 'no', 'none', 'non', 'neither', 'nobody', 'nowhere', 'cannot', 'couldnt', 'shouldnt', 'wouldnt', 'dont', 'didnt', 'hasnt', 'havent', 'isnt', 'arent'} words = nltk.word_tokenize(sentence) neg = [] for word in words: if word in negationwords: neg.append(word) return neg # Function to check if the sentence is affirmative or negative def isAffirmativeorNegative(sentence): negationwords = findNegation(sentence) if len(negationwords)==0: return \\"Affirmative\\" else: return \\"Negative\\" sentence = \\"He always comes late but I dont mind.\\" result = isAffirmativeorNegative(sentence) print(result) # prints Negative"},{"prompt":"Create an environment object that can execute and analyze Python code. The environment includes a set of predefined global variables and functions, as well as the ability to add additional global variables. The environment can execute Python code and analyze it for variable usage and imports. The environment also includes a stdout object that can be used to capture and display output from executed code.","completion":"import os import ast import traceback import time import sys import types import builtins import collections import astor import weakref from .jsonify import jsonify, jsonify_print, jsonify_print_expr from .datalayer import Analysis, Execution, FileEdit from .router import send from . import stdlib def now(): return int(time.time() * 1000) class Environment: extra_globals = {} active = weakref.WeakSet() def __init__(self, path): self.path = path self.globals = { \\"print\\": jsonify_print, \\"print_expr\\": jsonify_print_expr, \\"jsonify\\": jsonify, \\"jsonify_print\\": jsonify_print, \\"listdir\\": stdlib.listdir, \\"__builtins__\\": __builtins__, \\"FILES\\": stdlib.FilesDict(self.path), } for name in stdlib.builtin_names: self.globals[name] = getattr(stdlib, name) self._cached_analysis = {} self.active.add(self) predefined_names = set([\\"parsed\\"]) def init_commands(self): \\"\\"\\"Returns a list of commands that represent the existing state of the filesystem\\"\\"\\" for path in os.listdir(self.path): if path.endswith(\\".json\\"): continue if not os.path.isfile(os.path.join(self.path, path)): continue try: with open(os.path.join(self.path, path), \\"r\\") as fp: content = fp.read() yield FileEdit(filename=path, content=content, external_edit=True) except UnicodeDecodeError: pass def fixup_globals(self): for name, value in self.extra_globals.items(): self.globals.setdefault(name, value) def execute(self, filename, content, subexpressions=False): print(\\"Executing\\", filename, subexpressions) self.fixup_globals() stdout = Stdout() compiled = None try: parsed = ast.parse(content, filename, mode='exec') RewriteExprToPrint(subexpressions).walk(parsed) var_inspect = VariableInspector() var_inspect.walk(parsed) print(\\"varsed used:\\", sorted(var_inspect.used), \\"set:\\", sorted(var_inspect.set), \\"imported:\\", var_inspect.imports) compiled = compile(parsed, filename, 'exec') except: stdout.write(traceback.format_exc()) def displayhook(value): stdout.write_repr(value) orig_displayhook = sys.displayhook sys.displayhook = displayhook orig_stdout = sys.stdout orig_stderr = sys.stderr sys.stdout = stdout sys.stderr = stdout self.globals[\\"parsed\\"] = parsed self.globals[\\"ast\\"] = ast globals_before = self.globals.copy() start = time.time() try: try: if compiled: exec(compiled, self.globals) except: traceback.print_exc() finally: end = time.time() sys.dipslayhook = orig_displayhook sys.stdout = orig_stdout sys.stderr = orig_stderr local_scope = dict( (name, value) for name, value in self.globals.items() if name not in globals_before or globals_before[name] is not value) defines = dict( (key, { \\"json\\": jsonify(local_scope[key]), \\"type\\": str(type(local_scope[key])), }) for key in local_scope if not isinstance(local_scope[key], types.ModuleType)) command = Execution( filename=filename, content=content, emitted=stdout.emitted, defines=defines, start_time=int(start * 1000), end_time=int(end * 1000), exec_time=int((end - start) * 1000), with_subexpressions=subexpressions, ) send(command) def analyze(self, filename, content): print(\\"Analyzing\\", filename) properties = {} try: parsed = ast.parse(content, filename, mode='exec') var_inspect = VariableInspector() var_inspect.walk(parsed) except: return properties[\\"parse_error\\"] = jsonify(traceback.format_exc()) else: properties = var_inspect.json if properties != self._cached_analysis.get(filename): self._cached_analysis[filename] = properties send(Analysis(filename=filename, content=content, properties=properties)) class VariableInspector(astor.TreeWalk): builtin_names = dir(builtins) def init_variables(self): self.used = set() self.set = set() self.imports = set() self.in_target = False @property def json(self): used = set(self.used) for key in self.builtin_names: used.discard(key) for key in self.set: used.discard(key) for key in Environment.predefined_names: used.discard(key) return { \\"variables_used\\": list(used), \\"variables_set\\": list(self.set), \\"imports\\": list(self.imports) } def pre_arg(self): self.set.add(self.cur_node.arg) def pre_Name(self): if self.in_target: # Actually this is a set self.set.add(self.cur_node.id) else: self.used.add(self.cur_node.id) def pre_For(self): self.process_assignment(self.cur_node.target) def pre_Assign(self): self.process_assignment(self.cur_node.targets) def pre_withitem(self): self.process_assignment(self.cur_node.optional_vars) def pre_ExceptHandler(self): if self.cur_node.name: self.set.add(self.cur_node.name) def pre_alias(self): # Used in imports name = self.cur_node.asname or self.cur_node.name name = name.split(\\".\\")[0] self.set.add(name) self.imports.add(name) def pre_FunctionDef(self): self.set.add(self.cur_node.name) def pre_ListComp(self): self.process_assignment(self.cur_node.elt) def process_assignment(self, item): if isinstance(item, list): for x in item: self.process_assignment(x) return old_in_target = self.in_target self.in_target = True try: self.walk(item) finally: self.in_target = old_in_target class RewriteExprToPrint(astor.TreeWalk): expr_node_types = \\"\\"\\" UnaryOp BinOp BoolOp Compare Call IfExp Attribute Subscript ListComp SetComp GeneratorExp DictComp \\"\\"\\".split() # Skipped: # UAdd USub Not Invert # Add Sub Mult Div FloorDiv Mod Pow LShift RShift BitOr BitXor BitAnd MatMult # And Or # Eq NotEq Lt Gt GtE Is IsNot In NotIn # Index Slice ExtSlice def __init__(self, subexpressions=False): self.subexpressions = subexpressions self.id_counter = 0 astor.TreeWalk.__init__(self) if self.subexpressions: for method in self.expr_node_types: self.pre_handlers[method] = self.save_node_name self.post_handlers[method] = self.fixup_subexpressions del self.post_handlers['Module'] def post_Name(self): if not self.subexpressions: return if isinstance(self.cur_node.ctx, ast.Load): self.replace(self.rewrite_expr(self.cur_node)) def post_Module(self): node = self.cur_node node.body = [ self.rewrite_expr(n) if isinstance(n, ast.Expr) else n for n in node.body] def save_node_name(self): self.cur_node.astor_repr = astor.to_source(self.cur_node) def fixup_subexpressions(self): new_node = self.rewrite_expr(self.cur_node, self.cur_node.astor_repr) self.replace(new_node) def rewrite_expr(self, node, expr_string=None): if expr_string is None: expr_string = astor.to_source(node) node_string = ast.Str(s=expr_string) self.id_counter += 1 if isinstance(node, ast.Expr): new_node = ast.Expr( ast.Call( func=ast.Name(id='print_expr', ctx=ast.Load()), args=[node_string, node.value, ast.Num(n=self.id_counter)], keywords=[], starargs=None, ) ) new_node.is_print_expr = True else: new_node = ast.Call( func=ast.Name(id='print_expr', ctx=ast.Load()), args=[node_string, node, ast.Num(n=self.id_counter)], keywords=[], starargs=None, ) new_node.is_print_expr = True ast.fix_missing_locations(new_node) return new_node class Stdout: total_exprs_limit = 100 expr_limit = 10 def __init__(self): self.emitted = [] self.total_exprs_printed = 0 self.exprs_printed = collections.Counter() def write(self, content): self.emitted.append({ \\"type\\": \\"print\\", \\"time\\": now(), \\"parts\\": [{\\"type\\": \\"str\\", \\"str\\": content}], }) def writejson(self, json): assert json.get(\\"type\\"), \\"JSON objects must have a type\\" json.setdefault(\\"time\\", now()) self.emitted.append(json) def write_repr(self, o): self.emitted.append(jsonify(o)) def flush(self): pass def add_global(name, value): Environment.extra_globals[name] = value Environment.predefined_names.add(name) for env in Environment.active: env.globals.setdefault(name, value)"},{"prompt":"Write a Python class to modify the case of the string A String with the text: Hello World","completion":"class StringCaseModifier: def __init__(self, string): self.string = string def to_upper(self): return self.string.upper() def to_lower(self): return self.string.lower() def to_title(self): return self.string.title() if __name__ == '__main__': test_string = 'Hello World' string_modifier = StringCaseModifier(test_string) print(string_modifier.to_upper()) print(string_modifier.to_lower()) print(string_modifier.to_title())"},{"prompt":"Generate a Python program to reverse the order of words in a given string.","completion":"def reverse_words(str): return \\" \\".join(str.split()[::-1])"},{"prompt":"Write a Python program to replace a given string with another string. sentence = I love walking on the beach old_word = walking new_word = swimming","completion":"sentence = \\"I love walking on the beach\\" old_word = \\"walking\\" new_word = \\"swimming\\" new_sentence = sentence.replace(old_word, new_word) print(\\"The new sentence is: '{}'\\".format(new_sentence))"},{"prompt":"Write a python program to merge two lists of integers into one sorted list without using the inbuilt sort function. list1 = [3, 5, 9, 1, 8]; list2 = [4, 11, 7, 2];","completion":"def merge_sort(list1, list2): merged_list = list1 + list2 for i in range(len(merged_list)): min_idx = i for j in range(i+1, len(merged_list)): if merged_list[min_idx] > merged_list[j]: min_idx = j merged_list[i], merged_list[min_idx] = merged_list[min_idx], merged_list[i] return merged_list list1 = [3, 5, 9, 1, 8] list2 = [4, 11, 7, 2] print(merge_sort(list1, list2))"},{"prompt":"Create a Python dictionary with three keys named Name, Address and Phone. Name = 'John'; Address = '212 Smith Street'; Phone = '7321234567';","completion":"info = { 'Name':Name, 'Address':Address, 'Phone':Phone }"},{"prompt":"mplement a chatbot in Python that can provide customer support in a restaurant. random_user_question.txt What meals do you serve?","completion":"import random # list of possible answers possible_responses = [ 'We serve a variety of dishes - from salads to pizzas to steaks!', 'Check out our menu for a full list of options', 'We serve a variety of dishes, including traditional Italian, Mexican, and American fare. What would you like to try?', 'We have a great selection of meals! What kind of dish are you looking for?', 'We have a unique selection of meals - have you checked out our menu?' ] # read the user's question with open('random_user_question.txt') as user_question: question = user_question.read() # choose a random response response = random.choice(possible_responses) # display the response to the user print(response)"},{"prompt":"Design a Python program to simulate a simple ATM machine.","completion":"# account class with the necessary functions class Account: def __init__(self, name, balance): self.name = name self.balance = balance def deposit(self, amount): self.balance += amount def withdrawal(self, amount): self.balance -= amount # ATM class with the necessary functions class ATM: def __init__(self): self.accounts = [] def createAccount(self, name, balance): account = Account(name, balance) self.accounts.append(account) def deposit(self, name, amount): for account in self.accounts: if account.name == name: account.deposit(amount) def withdrawal(self, name, amount): for account in self.accounts: if account.name == name: account.withdrawal(amount) def printBalance(self, name): for account in self.accounts: if account.name == name: print(name, \\" Balance: \\", account.balance)"},{"prompt":"Create a program in Python which will take in a list of strings, and print out the longest string in the list. ['foo', 'test', 'longstring', 'bar']","completion":"def longest_string(str_list): longest_str = '' for str in str_list: if len(str) > len(longest_str): longest_str = str return longest_str string_list = ['foo', 'test', 'longstring', 'bar'] long_string = longest_string(string_list) print(long_string)"},{"prompt":"Create a program in Python that will find the smallest number in a list of numbers. [5, 4, 12, 17, 9]","completion":"def find_smallest_number(numbers): smallest = numbers[0] for num in numbers: if num < smallest: smallest = num return smallest print(find_smallest_number([5, 4, 12, 17, 9]))"},{"prompt":"Generate a Python code to compute the moving average of timeseries data points. window = 3 time_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150]","completion":"def moving_average(data_points, window): moving_average = [] for index in range(len(data_points)): start = 0 if index-window+1 < 0 else index-window+1 window_data = data_points[start:index+1] average = sum(window_data)/len(window_data) moving_average.append(average) return moving_average window = 3 time_series = [3, 5, 7, 2, 8, 10, 11, 65, 72, 81, 99, 100, 150] moving_average = moving_average(time_series, window) print(moving_average)"},{"prompt":"Create a Python program to filter an array by a given criteria. criteria = x % 5 == 0 array = [1, 2, 5, 10, 15, 20, 25, 30]","completion":"# Function to filter an array by a given criteria def filter_array(array, criteria): # Create an empty list filtered_array = [] # Iterate through the array for value in array: # Check if it matches the criteria if criteria(value): # If it matches, add it to the list filtered_array.append(value) # Return the filtered array return filtered_array # Input criteria def criteria(x): return x % 5 == 0 result = filter_array(array, criteria) print(result) # Outputs [5, 10, 15, 20, 25, 30]"},{"prompt":"Create a Python function to find the maximum number from a list of nonnegative integers. list = [1, 3, 12, 5, 8, 10]","completion":"def find_max(list): max_num = 0 for i in list: if i > max_num: max_num = i return max_num list = [1, 3, 12, 5, 8, 10] max_num = find_max(list) print(\\"Maximum number is:\\", max_num)"},{"prompt":"Write a Python function that takes a list of strings and returns the concatenation of all the elements with a separator/delimiter. strings = [Sample,Text,Hello]","completion":"def concatenate_strings(strings, separator): return separator.join(strings)"},{"prompt":"Come up with a code in Python to find the union of two lists. List 1: [1, 2, 3, 4, 5] List 2: [3, 4, 5, 6, 7]","completion":"list1 = [1, 2, 3, 4, 5] list2 = [3, 4, 5, 6, 7] def unionList(list1, list2): return set(list1 + list2) result = unionList(list1, list2) print(result)"},{"prompt":"Construct a python dictionary containing student names and marks as keyvalue pairs.","completion":"student_marks = { \\"John\\" : 90, \\"Levi\\" : 85, \\"Jill\\" : 95, \\"Sara\\" : 75 }"},{"prompt":"Write a code snippet for a simple linear regression model in Python. Not applicable","completion":"import pandas as pd import matplotlib.pyplot as plt from sklearn import linear_model # Read data from CSV data = pd.read_csv('data.csv') # Set X and Y X = data['X'] Y = data['Y'] # Create linear regression model model = linear_model.LinearRegression() # Train the model model.fit(X, Y) # Make predictions Y_pred = model.predict(X) # Visualize the results plt.scatter(X, Y) plt.plot(X, Y_pred, color='red') plt.show()"},{"prompt":"Write code in Python to implement a linked list using classes.","completion":"class Node: \\"\\"\\"Node class to represent the node in a linked list\\"\\"\\" def __init__(self, data): self.data = data self.next = None class LinkedList: \\"\\"\\"LinkedList class to represent the entire linked list\\"\\"\\" def __init__(self): self.head = None def print_list(self): node = self.head while(node): print(node.data) node = node.next # Creating a linked list linked_list = LinkedList() # Creating the nodes node1 = Node(1) node2 = Node(2) node3 = Node(3) # Linking the nodes linked_list.head = node1 node1.next = node2 node2.next = node3 # Printing the linked list linked_list.print_list()"},{"prompt":"Construct an XML document using Python which contains the following data. Item1, Item2, Item3","completion":"import xml.etree.ElementTree as ET # creating the root element data = ET.Element('data') items = ['Item1', 'Item2', 'Item3'] # loop over items for item in items: # creating sub elements item_element = ET.SubElement(data, 'item') # assign the value for the sub elements item_element.text = item # write the XML Tree tree = ET.ElementTree(data) tree.write('data.xml')"},{"prompt":"Make a Python program generating numbers","completion":"def generate_numbers(): numbers = [] for i in range(10): numbers.append(random.randint(0,10)) return numbers"},{"prompt":"Convert this sql query into a python program SELECT * FROM orders WHERE YEAR(order_date) = 2020","completion":"import datetime, pyodbc # Establish a connection to the database conn = pyodbc.connect(\\"<connection details>\\") cursor = conn.cursor() # Get the year of the order date sql = \\"SELECT * FROM orders\\" query_date = datetime.date.today().year where_clause = \\"WHERE YEAR(order_date) = ?\\" # Execute the query cursor.execute(sql + \\" \\" + where_clause, query_date) results = cursor.fetchall() # Output the results for result in results: print(result)"},{"prompt":"This code loads a configuration file and libraries, imports necessary modules, defines two custom colormaps, loads a data file, performs cubic spline interpolation on the data, applies a threshold to remove small values, and generates three plots: a histogram, an interpolated image, and a contour plot. To use this code, make sure to have the necessary files and libraries in the correct paths, and adjust the parameters as needed for your data.","completion":"# -*- coding: utf-8 -*- import os, sys print(\\"CWD: \\" + os.getcwd() ) # Load configuration file before pyplot config_path = os.path.abspath('../matplotlib/') sys.path.append(config_path) import configuration as config # Library path lib_path = os.path.abspath('../../lib') sys.path.append(lib_path) import framemanager_python import numpy as np import matplotlib.pyplot as plt import scipy.interpolate # Color map # Define \\"bds_highcontrast\\" color map by Britton Smith <brittonsmith@gmail.com> from http://yt-project.org/ cdict = {'red': ((0.0, 80/256., 80/256.), (0.2, 0.0, 0.0), (0.4, 0.0, 0.0), (0.6, 256/256., 256/256.), (0.95, 256/256., 256/256.), (1.0, 150/256., 150/256.)), 'green': ((0.0, 0/256., 0/256.), (0.2, 0/256., 0/256.), (0.4, 130/256., 130/256.), (0.6, 256/256., 256/256.), (1.0, 0.0, 0.0)), 'blue': ((0.0, 80/256., 80/256.), (0.2, 220/256., 220/256.), (0.4, 0.0, 0.0), (0.6, 20/256., 20/256.), (1.0, 0.0, 0.0))} plt.register_cmap(name='bds_highcontrast', data=cdict) # Define YELLOW_RED colormap: each row consists of (x, y0, y1) where the x must increase from 0 to 1 #row i: x y0 y1 # / # / #row i+1: x y0 y1 cdict = {'red': ((0.0, 0.9, 0.9), (1.0, 0.9, 0.9)), 'green': ((0.0, 0.9, 0.9), (1.0, 0.0, 0.0)), 'blue': ((0.0, 0.0, 0.0), (1.0, 0.0, 0.0))} plt.register_cmap(name='YELLOW_RED', data=cdict) #cmap=plt.get_cmap('YELLOW_RED') #cmap=plt.get_cmap('autumn') #cmap=plt.get_cmap('gist_heat') #cmap=plt.get_cmap('Spectral_r') #cmap.set_under([0.0, 0.0, 0.0]) # Load profile profileName = os.path.abspath(\\"foam_ball_short.dsa\\") frameID = 230 frameManager = framemanager_python.FrameManagerWrapper() frameManager.load_profile(profileName); numTSFrames = frameManager.get_tsframe_count(); matrixID = 1 # Load single frame tsframe = np.copy( frameManager.get_tsframe(frameID, matrixID) ); cols = tsframe.shape[1] rows = tsframe.shape[0] # Add padding on border padding = 2 v_padding = np.empty((padding, cols)); v_padding.fill(-50) h_padding = np.empty((rows+2*padding, padding)); h_padding.fill(-50) zs = np.vstack([v_padding, tsframe]) # Top zs = np.vstack([zs, v_padding]) # Bottom zs = np.hstack([h_padding, zs]) # Left zs = np.hstack([zs, h_padding]) # Right # Update matrix size with padding cols = zs.shape[1] rows = zs.shape[0] # Coordinates of sampled data points xs = np.arange(0, cols, 1) ys = np.arange(0, rows, 1) # Coordinates of interpolation points scaleFactor = 10; xi = np.linspace(xs.min(), xs.max(), cols*scaleFactor) yi = np.linspace(ys.min(), ys.max(), rows*scaleFactor) #------------------------------------------------------ # Interpolate with cubic splines spline = scipy.interpolate.RectBivariateSpline(ys, xs, zs, kx=3, ky=3, s=0) # Evaluate splines zi = spline(yi, xi) #------------------------------------------------------ ''' #------------------------------------------------------ # Polynomial interpolation: ‘linear’, ‘nearest’, ‘cubic’ coordinates = [(y, x) for y in ys for x in xs] zs_flattened = np.ravel(zs, order='C') coordinates_interpolated = [(y, x) for y in yi for x in xi] # Interpolate with griddata zi_flattened= scipy.interpolate.griddata(coordinates, zs_flattened, coordinates_interpolated, method='cubic') # Reshape flattened array to 2D zi = zi_flattened.reshape((rows*scaleFactor, cols*scaleFactor)) #------------------------------------------------------ ''' #------------------------------------------------------ # Old API # Set up a regular grid of sampled data points #ys, xs = np.meshgrid(xs, ys) # Set up a regular grid of interpolated points #yi, xi = np.meshgrid(xi, yi) # Interpolate #tck = scipy.interpolate.bisplrep(xs2, ys2, zs, kx=3, ky=3, s=0) # Evaluate splines #zi = scipy.interpolate.bisplev(xi2[:,0], yi2[0,:], tck) #------------------------------------------------------ # Apply threshold to level out small values (interpolation ripples) min_threshold = 25 zi[zi < min_threshold ] = 0 # # Plotting # fig, ax = plt.subplots() # Histogram plt.hist(zi.flatten(), 128, range=(min_threshold, zi.max()), fc='k', ec='k') plt.savefig(\\"histogram.pdf\\", format='pdf') plt.close() # Interpolated image fig, ax = plt.subplots() # Interpolated image #cmap=plt.get_cmap('gray') cmap=plt.get_cmap('bds_highcontrast') cax = ax.imshow(zi, cmap=cmap, vmin=zs.min(), vmax=zs.max(), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()]) # Colorbar with countour levels cbar = fig.colorbar(cax) cbar.set_label('Raw sensor value', rotation=90) cbar.solids.set_edgecolor(\\"face\\") # set the color of the lines ax.invert_yaxis() ax.xaxis.tick_top() plt.axis('off') plt.savefig(\\"interpolation.pdf\\", format='pdf') plt.close() # Contour fig, ax = plt.subplots() # Nearest-Neighbor Image cax = ax.imshow(zs, interpolation='nearest', cmap=plt.get_cmap('gray'), vmin=zs.min(), vmax=zs.max(), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()]) #------------------------------------------------------ # Contour lines: contour() #------------------------------------------------------ countour_threshold = 50 levels = np.linspace(countour_threshold, zs.max(), 10) #contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, colors=[(0.0, 0.0, 0.0)], origin='upper') # black contour contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, colors=[(1.0, 0.0, 0.0)], origin='upper') # Red contour #contour = ax.contour(xi, yi, zi, levels, linewidths=1.0, cmap=plt.get_cmap('bds_highcontrast'), origin='upper') # Colormap #plt.clabel(contour, inline=True, fontsize=9) # Colorbar with countour levels cbar = fig.colorbar(cax) cbar.add_lines(contour) cbar.set_label('Raw sensor value', rotation=90) cbar.solids.set_edgecolor(\\"face\\") # set the color of the lines ''' #------------------------------------------------------ # Filled contours: contourf() #------------------------------------------------------ # Background image background = np.empty((rows, cols)); background.fill(0) cax = ax.imshow(background, cmap=plt.get_cmap('gray'), origin='lower', extent=[xs.min(), xs.max(), ys.min(), ys.max()] ) # Filled contour countour_threshold = 100 # Ignore \\"ripples\\" from spline extrapolation max_threshold = 0 # Boost the upper limit to avoid truncation error levels = np.linspace(countour_threshold, zs.max(), num=10, endpoint=True) # Levels correspond to midpoint of layers: # Extend level range to enlarge top layer (avoid ugly hole) levels[-1] = levels[-1] + (levels[-1] - levels[-2])/2 contour = ax.contourf(xi, yi, zi, levels=levels, cmap=plt.get_cmap('bds_highcontrast'), origin='upper') cbar = fig.colorbar(contour, format='%.0f') cbar.set_label('mV', rotation=0) cbar.solids.set_edgecolor(\\"face\\") # set the color of the lines # Restore old levels #levels[-1] = zs.max() #cbar.set_ticks(levels) #------------------------------------------------------ ''' ax.invert_yaxis() ax.xaxis.tick_top() plt.axis('off') plt.savefig(\\"contour.pdf\\", format='pdf') plt.show()"},{"prompt":"Write a function to generate a set of random numbers in Python.","completion":"import random def generate_randoms(n): # generate a set of n random numbers rands = [] for _ in range(n): rands.append(random.randint(1,100)) return rands generate_randoms(10)"},{"prompt":"Write a python program to check if a given string contains any numbers","completion":"def string_contains_number(string): pattern = re.compile(\\"[0-9]\\") return pattern.search(string) != None"},{"prompt":"Design a class in Python for storing movie information including the name, year of release, genre and rating.","completion":"class Movie: def __init__(self, name, release_year, genre, rating): self.name = name self.release_year = release_year self.genre = genre self.rating = rating movie = Movie(\\"Interstellar\\", 2014, \\"Sci-Fi\\", 8.4) print(movie.name, movie.release_year, movie.genre, movie.rating)"},{"prompt":"Given an input string, write a Python program to count the occurrence of each character in the string. Hello, World!","completion":"def char_occurrences(a_string): char_count = {} for char in a_string: if char in char_count: char_count[char] += 1 else: char_count[char] = 1 return char_count string = \\"Hello, World!\\" print(char_occurrences(string)) # Output # {'H': 1, 'e': 1, 'l': 3, 'o': 2, ', ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"},{"prompt":"Create a Python program to generate a random password. Specify a minimum length of 8 characters and it should contain at least one number and one special character. Not applicable","completion":"import string import random def generate_password(): length = 8 chars = string.ascii_letters + string.digits + string.punctuation password = \\"\\".join(random.choice(chars) for i in range(length)) return password password = generate_password() print(password)"},{"prompt":"Write a Python function to generate an even number between 10 and 200 that is divisible by 5. Not applicable","completion":"def generate_even_number(): # Generate a random number between 10 and 200 num = random.randint(10, 200) # Check if the number is even if num % 2 == 0: # Check if the number is divisible by 5 if num % 5 == 0: return num # If number not divisible by 5, increment number else: return generate_even_number(num+1) # If number not even, increment number else: return generate_even_number(num+1)"},{"prompt":"Create a Python function to find the closest value to a given number in a given array. [5, 4, 8, 7], 5","completion":"def closest_num(arr, num): arr.sort() n = len(arr) left = 0 right = n - 1 if arr[right] <= num: return arr[right] elif arr[left] >= num: return arr[left] while right-left > 1: mid = (right+left)//2 if arr[mid] == num: return arr[mid] elif arr[mid] > num: right = mid else: left = mid return sorted([arr[right], arr[left]])[0] arr = [5, 4, 8, 7] num = 5 closest = closest_num(arr, num) print(closest)"},{"prompt":"Write a Python code to store and print the multiplication table of a given number. num = 5","completion":"# Function to print the multiplication table def print_multiplication_table(num): # Iterate over numbers from 1 to 10 for i in range(1, 11): print('{0} x {1} = {2}'.format(num, i, num*i)) print_multiplication_table(5)"},{"prompt":"Found and fix any bugs with the following python code. def sum_list(list): sum_list = 0 for num in list: sum_list += num return sum","completion":"def sum_list(list): sum_list = 0 for num in list: sum_list += num return sum_list"},{"prompt":"Generate a function in Python that takes two parameters: ‘x’ and ‘y’ and prints the output as “x is greater than y” when x is greater than y, otherwise “y is greater than or equal to x”. Not applicable","completion":"def print_comparison(x, y): if x > y: print(f'{x} is greater than {y}') else: print(f'{y} is greater than or equal to {x}')"},{"prompt":"Create a Python program to take an array of integers and calculate the sum of squares of all numbers provided in the array. [2, 3, 4]","completion":"def sum_squares(arr): total = 0 for num in arr: total += num ** 2 return total arr = [2, 3, 4] total = sum_squares(arr) print(total) # 29"},{"prompt":"Design an algorithm in Python for finding out the factorial of a given number. 7","completion":"def factorial(n): fact = 1 for i in range(2,n+1): fact = fact * i return fact"},{"prompt":"Construct a class in Python which implements two methods to add two numbers.","completion":"class Calculator: def __init__(self): pass def add_two_numbers(self, a, b): return a + b def add(self, a, b, c): return a + b + c calculator = Calculator() result = calculator.add_two_numbers(1, 2) print(result)"},{"prompt":"Create a Python program that takes in a positive integer, then uses a while loop to output the numbers counting down to 1. 6","completion":"num = int(input(\\"Enter a positive integer: \\")) while num > 0: print(num) num -= 1 print(\\"Done!\\")"},{"prompt":"Develop an AI TicTacToe game using Python. Not appliccable","completion":"import random # printing the board def drawBoard(board): print(\\"---------------\\") print(\\" \\"+board[1]+\\" | \\"+board[2]+\\" | \\"+board[3]+\\" \\") print(\\"___|___|___\\") print(\\" \\"+board[4]+\\" | \\"+board[5]+\\" | \\"+board[6]+\\" \\") print(\\"___|___|___\\") print(\\" \\"+board[7]+\\" | \\"+board[8]+\\" | \\"+board[9]+\\" \\") print(\\" | | \\") # defining the part of the game def checkWin(board, player): return ( (board[1] == board[2] == board[3] == player) or (board[5] == board[4] == board[6] == player) or (board[7] == board[8] == board[9] == player) or (board[1] == board[5] == board[9] == player) or (board[3] == board[5] == board[7] == player) or (board[1] == board[4] == board[7] == player) or (board[2] == board[5] == board[8] == player) or (board[3] == board[6] == board[9] == player)) def getComputerSpot(board,player): openSpots = [] indices = [i for i, spot in enumerate(board) if spot == '-'] for i in indices: board[i] = player if checkWin(board, player): board[i] = '-' return i board[i] = '-' for i in indices: openSpots.append(i) if len(openSpots): return random.choice(openSpots) else: return None def playGame(): board = ['-' for x in range(10)] won = False turn = -1 while not won: if turn == -1: # human turn humanSpot = int(input(\\"Enter your spot: \\")) if board[humanSpot] == '-': board[humanSpot] = 'X' else: print(\\"the spot is already filled!\\") continue turn *= -1 if checkWin(board,'X'): drawBoard(board) print(\\"You won!\\") won = True break if turn == 1: # computer turn computerSpot = getComputerSpot(board,'O') if computerSpot == None: drawBoard(board) print(\\"The game is drawn!\\") break else: board[computerSpot] = 'O' turn *= -1 drawBoard(board) playGame()"},{"prompt":"Create a Python program to calculate the sum of series 1 + ½ + ⅓ + ... + 1/n. n = 5","completion":"def seriesSum(n): # set the initial sum to 0 total = 0 # loop over the range for i in range(1, n+1): total += 1 / i return total print(seriesSum(5))"},{"prompt":"Develop a decision tree classifier in Python to predict a fourth feature from three other features. Features: A, B, C","completion":"import pandas as pd #importing the dataset dataset = pd.read_csv('data.csv') #splitting the dataset into features and labels X = dataset.iloc[:, :-1].values y = dataset.iloc[:, 3].values #importing DecisionTreeClassifier from sklearn.tree import DecisionTreeClassifier classifier = DecisionTreeClassifier(criterion = 'entropy') #fitting the classifier to the dataset classifier.fit(X,y)"},{"prompt":"mplement a function in Python that takes a string argument and returns the characters of the string in reverse order.","completion":"def reverse_string(input_string): reversed_string = '' for i in range(len(input_string)-1, -1, -1): reversed_string += input_string[i] return reversed_string"},{"prompt":"Once the user has provided a list of numbers and a target number, suggest a Python function to check if any two numbers from the list sum up to the target.","completion":"def check_sum(numbers, target): for i in range(len(numbers)): for j in range(i+1, len(numbers)): if numbers[i] + numbers[j] == target: return True return False"},{"prompt":"Write a Python Program to print out the first n prime numbers.","completion":"def sieve_of_eratosthenes(n): primes = [True] * (n+1) primes[0] = primes[1] = False for i in range(2, int(n**0.5)+1): if primes[i]: for j in range(i*i, n+1, i): primes[j] = False prime_numbers = [] for i in range(len(primes)): if primes[i]: prime_numbers.append(i) return prime_numbers"},{"prompt":"Generate a Python function that takes a dictionary as an argument and returns an inverted dictionary. Not applicable","completion":"def invert_dictionary(d): inverted_d = {} for key, value in d.items(): if value not in inverted_d: inverted_d[value] = [] inverted_d[value].append(key) return inverted_d"},{"prompt":"Write a Python code to implement Gradient Descent Algorithm.","completion":"\\"\\"\\" Implement gradient descent algorithm in Python \\"\\"\\" import numpy as np def gradient_descent(x,y,learning_rate=0.01,iterations=100): m_curr = b_curr = 0 n = len(x) for i in range(iterations): y_predicted = m_curr * x + b_curr cost = (1/n) * sum([val**2 for val in (y-y_predicted)]) md = -(2/n)*sum(x*(y-y_predicted)) bd = -(2/n)*sum(y-y_predicted) m_curr = m_curr - learning_rate * md b_curr = b_curr - learning_rate * bd print (\\"m {}, b {}, cost {} iteration {}\\".format(m_curr,b_curr,cost, i)) return m_curr, b_curr"},{"prompt":"Binary search is an efficient algorithm for finding an item in a sorted list of items. Develop an efficient algorithm using Python that implements a binary search. nums = [3, 4, 5, 6, 7, 8, 9] val = 8","completion":"def binary_search(nums, val): low = 0 high = len(nums) - 1 while low <= high: mid = (low + high) // 2 if nums[mid] == val: return mid elif nums[mid] > val: high = mid - 1 else: low = mid + 1 return -1"},{"prompt":"Construct a nested loop in Python to print out the following elements in a new line. [1,2,3], [4,5,6], [7,8,9]","completion":"for x in [1,2,3]: for y in [4,5,6]: for z in [7,8,9]: print(x,y,z)"},{"prompt":"Create a machine learning program in Python that will classify text data into 3 different categories. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import classification_report # Load the data data = pd.read_csv(\\"data.csv\\") # Vectorize the text cv = CountVectorizer() X = cv.fit_transform(data[\\"text\\"]) # Convert target labels to numerical values y = np.array([1 if label == \\"category1\\" else 2 if label == \\"category2\\" else 3 for label in data[\\"category\\"]]) # Split into train and test data X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1) # Train the model nb = MultinomialNB() nb.fit(X_train, y_train) # Test the model y_pred = nb.predict(X_test) # Print out the results print(classification_report(y_test, y_pred))"},{"prompt":"Create a Python function that takes in a list and prints a dictionary with the elements and the product of each element. list = [7, 8, 5]","completion":"def product_of_list(list): output = {} for element in list: output[element] = element * element return output print(product_of_list([7, 8, 5]))"},{"prompt":"Write a function in Python to print the Fibonacci series.","completion":"def printFibonacciSeries(n): # Taking 1st two fibonacci nubers as 0 and 1 f1 = 0 f2 = 1 print(f1, f2, end = \\" \\") for i in range(2, n): next = f1 + f2 print(next, end = \\" \\") # update values f1 = f2 f2 = next"},{"prompt":"Design an algorithm in Python to find the longest common substring in two strings.","completion":"def longestCommonSubstring(string1, string2): n1=len(string1) n2=len(string2) L=[[0 for _ in range(n2+1)]for _ in range(n1+1)] longestSubstring=\\"\\" longestSubstringLength=0 for i in range(1, n1+1): for j in range(1, n2+1): if string1[i-1]==string2[j-1]: L[i][j]=L[i-1][j-1]+1 if L[i][j]>longestSubstringLength: longestSubstringLength=L[i][j] longestSubstring=string1[i-1-longestSubstringLength+1:i] else: L[i][j]=0 return longestSubstring"},{"prompt":"Create a Python function to shuffle a list of numbers. [1, 2, 3, 4, 5]","completion":"import random def shuffle_list(nums): random.shuffle(nums) return nums shuffled_list = shuffle_list([1, 2, 3, 4, 5]) print(shuffled_list) #[3, 5, 2, 4, 1]"},{"prompt":"What Python code can you write that takes two strings and returns whether they are anagrams? str1 = abcd str2 = cbda","completion":"def is_anagram(str1, str2): if len(str1) != len(str2): return False str1_counts = collections.Counter(str1) str2_counts = collections.Counter(str2) for char in str1_counts: if str1_counts[char] != str2_counts[char]: return False return True"},{"prompt":"Create a basic Python script that computes the sum of two variables and stores the result in a third variable. x = 5 y = 8","completion":"# compute the sum of x and y result = x + y # store the result in a third variable z = result #print the result print(z) # Output: 13"},{"prompt":"Generate a set of unique random numbers in the range 010 using Python.","completion":"import random random_numbers = set() while len(random_numbers) < 10: random_numbers.add(random.randint(0, 10)) print(random_numbers)"},{"prompt":"Write a function in Python to search for a given word in a large document. The function should return the line number of the document where the word is found. largeDocument = 'This is the first line of the document.nThis is the second line of the document.nThis is the third line of the document.'; word = 'second'","completion":"def findWord(document, word): lines = document.split('n') line_number = -1 for i, line in enumerate(lines): if word in line: line_number = (i + 1) break return line_number findWord(largeDocument, word) # 2"},{"prompt":"Design a script in Python to scrape photos and captions from a given website.","completion":"\\"\\"\\" Script to scrape photos and captions from a given website \\"\\"\\" from bs4 import BeautifulSoup import requests # Get the HTML source code url = 'https://example.com/webpage' req = requests.get(url) html = req.text # Parse HTML source and extract photo and caption soup = BeautifulSoup(html, features='lxml') image_divs = soup.find_all('div', {'class': 'image-gallery__image'}) for image_div in image_divs: figure = image_div.find('figure') src = figure.find('img')['src'] caption = figure.find('figcaption') print('Photo: ', src) if caption: print('Caption: ', caption.text) else: print('No caption') print('n')"},{"prompt":"Create a python program that prints Hello World! five times.","completion":"for x in range(5): print(\\"Hello World!\\")"},{"prompt":"Write a Python program to find the common elements between two given lists. [1, 2, 3], [2, 3, 4]","completion":"def find_common_elements(list1, list2): common = [x for x in list1 if x in list2] return common"},{"prompt":"Generate a list of all numbers from 0 to 50 in Python, that are divisible by both 3 and 5.","completion":"my_list = [x for x in range(0, 51) if x % 3 == 0 and x % 5 == 0]"},{"prompt":"Create a class to create a linked list in python nodes.","completion":"class ListNode: def __init__(self, data): self.data = data self.next = None"},{"prompt":"Design a web server in Python using the Flask framework that would serve a json object containing the current temperature for a city based on the city name given in the request. Not applicable","completion":"import requests import json from flask import Flask, request app = Flask(name) @app.route('/getTemp', methods=['POST']) def get_temp(): city = request.json['city'] url = 'http://api.openweathermap.org/data/2.5/weather?q={}&APPID=xxxxxx' r = requests.get(url.format(city)) weather = json.loads(r.text) return {'temperature': weather['main']['temp']} if name == 'main': app.run(debug=True)"},{"prompt":"mprove the following Python program to reduce its time complexity. def find_max_sum(arr): max_sum = 0 for i in range(len(arr)): for j in range(i+1, len(arr)): max_sum = max(max_sum, arr[i] + arr[j]) return max_sum","completion":"def find_max_sum(arr): max_sum = 0 left = 0 right = len(arr) - 1 while left < right: if arr[left] + arr[right] > max_sum: max_sum = arr[left] + arr[right] if arr[left] > arr[right]: right -= 1 else: left += 1 return max_sum"},{"prompt":"Write a Python program to format a given piece of text (input) with different options for fontstyle, size, and color. Given text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh.","completion":"def format_text(text, font=\\"Times New Roman\\", size='14px', color='#000000'): return \\"<span style='font-family: {} font-size: {} color: {}'>{}</span>\\".format(font, size, color, text) print(format_text('Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer ut lectus vel nisi consequat bibendum ac a erat. Aliquam non velit sit amet arcu placerat vulputate a ut nibh.'))"},{"prompt":"Write a Python script that takes a list of integers, and returns a list of tuples that contain the index and square of each number in the original list. nums = [1, 2, 3, 4, 5]","completion":"def square_index(nums): return [(index, num ** 2) for index, num in enumerate(nums)] square_index(nums) # Output: [(0, 1), (1, 4), (2, 9), (3, 16), (4, 25)]"},{"prompt":"Using Python, create a function that takes two numbers as input, and generates a random number between them. 2 and 5","completion":"def random_number_generator(min, max): return random.randint(min, max)"},{"prompt":"Generate a Python program to demonstrate a sorting algorithm.","completion":"def sort_list(mylist): for i in range(len(mylist)): min_index = i temp = mylist[i] for j in range(i + 1, len(mylist)): if mylist[min_index] > mylist[j]: min_index = j mylist[i] = mylist[min_index] mylist[min_index] = temp return mylist mylist = [1, 5, 7, 8, 4, 10, 2] print(\\"Sorted list is:\\") print(sort_list(mylist))"},{"prompt":"Write a code to delete a certain element from a linked list.","completion":"# Python program to delete a node from Linked List # Node class class Node: # Function to initialize the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class contains a Node object class LinkedList: # Function to initialize head def __init__(self): self.head = None # Function to delete a node def deleteNode(self, node): # Store head node temp = self.head # If head node itself holds the key to be deleted if (temp is not None): if (temp == node): self.head = temp.next temp = None return # Search for the key to be deleted, keep track of the # previous node as we need to change 'prev.next' while(temp is not None): if temp == node: break prev = temp temp = temp.next # if key is not present in linked list if(temp == None): return # Unlink the node from linked list prev.next = temp.next temp = None"},{"prompt":"Create a Python program to determine the total sum of all elements of a list. [1, 2, 3, 4]","completion":"def calculate_sum_of_list(arr): total_sum = 0 for item in arr: total_sum += item return total_sum list1 = [1, 2, 3, 4] sum_of_list = calculate_sum_of_list(list1) print(sum_of_list)"},{"prompt":"Write a script in Python to compete in a Kaggle competition. Not applicable","completion":"# Load the necessary libraries import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score # Read in the data train_data = pd.read_csv(\\"data.csv\\") # Split the data into X (predictors) and y (response) X = train_data.drop('response', axis=1) y = train_data['response'] # Split into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42) # Define the model and fit it model = ... model.fit(X_train, y_train) # Make predictions on the test set y_pred = model.predict(X_test) # Score the prediction score = accuracy_score(y_test, y_pred) # Submit the prediction to Kaggle # ..."},{"prompt":"Given a list of integers and an integer k, can you write a Python program to find the consecutive integers whose sum is equal to the given integer k? lst = [1,3,5,7,9] k = 10","completion":"def find_consecutive_integers(lst, k): # Edge cases if k > sum(lst) or k < 0: return -1 # Create a window and move it's boundaries l, h, curr_sum = 0, 0, 0 while h < len(lst): # Sum of current window curr_sum += lst[h] # See if the window sum equals k while curr_sum > k and l <= h: curr_sum -= lst[l] l += 1 # When window sum is equal to k, print the winow if curr_sum == k: return lst[l:h+1] # Move the window one step at a time h += 1 # If window size reaches last element and no window is # found return -1 lst = [1,3,5,7,9] k = 10 print(find_consecutive_integers(lst, k)) # Output: [3,5,7]"},{"prompt":"Design a basic chatbot in Python for responding to casual inquiries.","completion":"import random #list of possible answers answers = [\\"That's a great question!\\", \\"I'm not sure, but I'll try to find out!\\", \\"That sounds interesting, tell me more!\\", \\"I have no idea, sorry!\\"] def chatbot_response(user_input): # get a random response from answers response = random.choice(answers) return response # simple loop to keep the conversation going while True: user_input = input('You: ') if user_input == 'Goodbye': print('Chatbot: Goodbye!') break else: print('Chatbot: ', chatbot_response(user_input))"},{"prompt":"Write a Python program to print the top 5 most frequent words in a given sentence. Python is an interpreted, highlevel, generalpurpose programming language.","completion":"import collections sentence = \\"Python is an interpreted, high-level, general-purpose programming language.\\" # Split sentence into words words = sentence.split() # Set the counter for words counter = collections.Counter(words) # Find top 5 most frequent words result = counter.most_common(5) print(result)"},{"prompt":"Make a program in Python to print a staircase of height 'n', where n is an integer. 5","completion":"def staircase(n): for i in range(0, n): for j in range(0, n - i - 1): print(end=\\" \\") for j in range(0, i + 1): print(\\"#\\", end=\\"\\") print(\\"r\\") # Driver code n = 5 staircase(n)"},{"prompt":"Write python code to return the maximum number in a list. nums = [1, 15, 20, 6]","completion":"def find_max(nums): '''Returns the maximum number in the list.''' max_val = nums[0] for num in nums: if num > max_val: max_val = num return max_val"},{"prompt":"Compose a python program to identify the characters in a given alphabet alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'","completion":"alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' def identify_characters(alphabet): char_list = [] for c in alphabet: char_list.append(c) return char_list"},{"prompt":"Optimize a Flask application for efficient performance. Not applicable","completion":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/api/<endpoint>', methods=['GET', 'POST']) def process_request(endpoint): # Performance optimization # Use Redis for caching session and query performance # Use uWSGI for Python applications # Use gunicorn as WSGI server # Use Flask-Compress extension for compression # Use global variables where applicable # Don't use sql queries directly, always use model methods # Use query parameter in URLs instead of plain parameters # Use thread-local objects for performance # Your code here"},{"prompt":"Design a Python program to take a list of integers and return the sum of the even numbers in the list. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def sum_even_numbers(numbers): result = 0 for number in numbers: if number % 2 == 0: result += number return result print(sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"},{"prompt":"Write a Python program to print the maximum number from a given list. [5, 4, 2, 7, 12]","completion":"def max_num(nums): max = nums[0] for num in nums[1:]: if num > max: max = num return max nums = [5, 4, 2, 7, 12] print(max_num(nums))"},{"prompt":"Write a Python program to sort a list of dictionaries by a key in each dictionary. my_list = [{'name': 'Tom', 'age': 25}, {'name': 'John', 'age': 21}, {'name': 'Adam', 'age': 26}]","completion":"def sort_list_of_dicts_by_key(my_list, key): return sorted(my_list, key=lambda k: k[key])"},{"prompt":"Create a Python program to remove all occurrences of the given element in a given array. arr = [2, 4, 5, 7, 4, 2], element = 4","completion":"def remove_element(arr, element): arr = [x for x in arr if x != element] return arr"},{"prompt":"Create a Python program to optimize a given multivariate function.","completion":"import scipy.optimize as opt def optimize_function(function, initial_guess): result = opt.minimize(function, initial_guess) return result.x"},{"prompt":"Build a Python class to identify if a provided number is prime or composite. 10","completion":"class PrimeNumber: def __init__(self, num): self.num = num def is_prime(self): for i in range(2, self.num): if(self.num % i == 0): return False return True num = 10 obj = PrimeNumber(num) if obj.is_prime(): print(\\"Number is Prime\\") else: print(\\"Number is Composite\\")"},{"prompt":"Write a Python function to format a twodimensional array as a table. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def printTable(array): # find the longest string in each of the inner lists # so we can format the output col_width = [max(len(str(x)) for x in col) for col in array] for row in array: print(\\" \\".join(str(x).ljust(col_width[i]) for i, x in enumerate(row))) array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] printTable(array) # Output: # 1 2 3 # 4 5 6 # 7 8 9"},{"prompt":"Develop a program in Python to check whether a string contains only digits. 0123","completion":"def is_digit_only(string): for char in string: if not char.isdigit(): return False return True print(is_digit_only(\\"0123\\"))"},{"prompt":"mplement a function to remove all the duplicates from a linked list in Python. list_nodes = [7, 14, 28, 28, 28, 35, 49]","completion":"class Node: # Function to initialise the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class contains a Node object class LinkedList: # Function to initialize head def __init__(self): self.head = None def remove_duplicates(self, list_nodes): curr_node= self.head new_list=[] while curr_node != None: if curr_node.data not in new_list: new_list.append(curr_node.data) curr_node = curr_node.next # creating a linked list from the unique elements of list_nodes self.head=None for i in new_list: self.insert_node(i) def insert_node(self, data): # Create a new node new_node = Node(data) # Check if list is empty if self.head is None: self.head = new_node return # Otherwise, traverse to the end of list before # inserting the new Node last = self.head while (last.next): last = last.next last.next = new_node"},{"prompt":"Generate a Python program to calculate the maximum, minimum, and average values from a given sequence of numbers.","completion":"# Function to calculate the maximum, minimum, and average values def calculate_metrics(list): # Calculate the maximum value maximum = max(list) # Calculate the minimum value minimum = min(list) # Calculate the average n = len(list) total = 0 for num in list: total += num average = total/n return maximum, minimum, average # Main Program list = [3, 4, 5, 6, 21, 8] maximum, minimum, average = calculate_metrics(list) print(\\"Maximum value:\\", maximum) print(\\"Minimum value:\\", minimum) print(\\"Average value:\\", average)"},{"prompt":"Create a Deep Learning Program in Python to Predict Stock Price.","completion":"from keras.models import Sequential from keras.layers import Dense from keras.layers import LSTM from keras.layers import Dropout import numpy as np # define constants time_steps = 60 batch_size = 32 # build the model model = Sequential() model.add(LSTM(units=50, return_sequences=True, input_shape=(time_steps, 1))) model.add(Dropout(0.2)) model.add(LSTM(units=50, return_sequences=True)) model.add(Dropout(0.2)) model.add(LSTM(units=50)) model.add(Dropout(0.2)) model.add(Dense(units=1)) model.compile(optimizer='adam', loss='mean_squared_error') # read the data dataset = np.loadtxt('data.csv', delimiter=',') data = dataset[:, 0:1] # create train and test data x_train = data[:int(len(data)*0.8)] x_test = data[int(len(data)*0.8):] # reshape the data for input format x_train = np.reshape(x_train, (x_train.shape[0], time_steps, 1)) x_test = np.reshape(x_test, (x_test.shape[0], time_steps, 1)) # train the model model.fit(x_train, x_train, epochs=50, batch_size=batch_size, validation_data=(x_test, x_test))"},{"prompt":"Generate a Python program that performs an edit distance calculation using dynamic programming.","completion":"def edit_distance(str1, str2): m = len(str1) n = len(str2) edit_table = [[0 for x in range(n+1)] for x in range(m+1)] for i in range(m+1): for j in range(n+1): if i == 0: edit_table[i][j] = j elif j == 0: edit_table[i][j] = i elif str1[i-1] == str2[j-1]: edit_table[i][j] = edit_table[i-1][j-1] else: edit_table[i][j] = 1 + min(edit_table[i][j-1], edit_table[i-1][j], edit_table[i-1][j-1]) return edit_table[m][n]"},{"prompt":"Create an algorithm in python that calculates the sum of squares of all the numbers from 1 to N. N = 10","completion":"def sum_of_squares(n): result = 0 for i in range(n+1): result += i**2 return result"},{"prompt":"Generate a Python program that takes a string and capitalizes the first character of each word. this is an example","completion":"def capitalize_string(str): words = str.split(' ') capitalized_words = [word.capitalize() for word in words] return \\" \\".join(capitalized_words) capitalized_string = capitalize_string(\\"this is an example\\") print(capitalized_string)"},{"prompt":"Construct a python program which takes in input the size of a jagged array and prints it(no values). <noInpit>","completion":"def print_jagged_array(array_size): # Initialize a jagged array with the given size array = [None] * array_size # Populate the array with empty arrays for i in range(array_size): array[i] = [] # Print the output array print(array) if __name__ == \\"__main__\\": array_size = 4 print_jagged_array(array_size)"},{"prompt":"Create a simple chatbot using Python and Dialogflow, which can answer questions about the current days of the week. Not applicable","completion":"from flask import Flask from flask_restful import Resource, Api from dialogflow import detect_intent_texts app = Flask(__name__) api = Api(app) @app.route('/', methods=['GET', 'POST']) def detect_intent_text(): IF session_id NOT present PLEASE create session_id request = detect_intent_texts(session_id, text) response = request.fulfillment_text return response if __name__ == '__main__': app.run()"},{"prompt":"Create a python program for constructing a decision tree algorithm for predicting the value of a stock. A csv file containing stock data from the last 3 months.","completion":"# Load libraries import pandas as pd import numpy as np # Load data data = pd.read_csv(\\"stockdata.csv\\") # Split data X = data.iloc[:, :-1].values y = data.iloc[:, -1].values # Train/Test Split from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Decision Tree Model from sklearn.tree import DecisionTreeClassifier clf = DecisionTreeClassifier(criterion='entropy', random_state=0) clf.fit(X_train, y_train) # Model Accuracy y_pred = clf.predict(X_test) print('Model accuracy: ',clf.score(X_test, y_test))"},{"prompt":"Create a Python class with the given attributes and functions. Attributes: name (string), age (integer), email address (string) Function: toString() return a string with the formatted attribute","completion":"class Person: def __init__(self, name, age, email): self.name = name self.age = age self.email = email def toString(self): return f\\"Name: {self.name}, Age: {self.age}, Email: {self.email}\\""},{"prompt":"w would you create a class in Python to store and process data in a Car object?","completion":"class Car: def __init__(self, make, model, color, mileage): self.make = make self.model = model self.color = color self.mileage = mileage def accelerate(self, speed): self.speed = speed def decelerate(self, speed): self.speed = speed"},{"prompt":"Write a Python program to print out the Fibonacci series up to n numbers where n is a user input. User input n = 10","completion":"# Python Program to print the Fibonacci series up to n numbers n = int(input(\\"Enter the value of 'n': \\")) # first two numbers a = 0 b = 1 print(\\"Fibonacci Series:\\") print(a, b, end=\\" \\") for i in range(2,n): c = a + b a = b b = c print(c, end = \\" \\") print()"},{"prompt":"Edit the following Python program to return true if the following string contains the word Hello. def check_hello(s)","completion":"def check_hello(s): return 'Hello' in s"},{"prompt":"Given a list of integers, write a Python program to find the index of the largest number. [5, 10, 20, 6, 8]","completion":"nums = [5, 10, 20, 6, 8] max_num = max(nums) max_index = nums.index(max_num) print(max_index)"},{"prompt":"Design a python program to handle an array with the following rules: If the element is divisible by 3, the element should be replaced with Fizz. If the element is divisible by 5, the element should be replaced with Buzz. If the element is divisible by 3 and 5, the element should be replaced with FizzBuzz. arr = [2, 3, 4, 5, 6, 15]","completion":"def fizz_buzz(arr): new_arr = [] for element in arr: if element % 3 == 0 and element % 5 == 0: new_arr.append(\\"FizzBuzz\\") elif element % 3 == 0: new_arr.append(\\"Fizz\\") elif element % 5 == 0: new_arr.append(\\"Buzz\\") else: new_arr.append(element) return new_arr print(fizz_buzz([2, 3, 4, 5, 6, 15]))"},{"prompt":"Write a Python function that takes two strings as arguments and returns the longest common substring between them. str_1 = abcdabcdabde str_2 = defabcdabcd","completion":"def longest_substring(str_1, str_2): len_1 = len(str_1) len_2 = len(str_2) longest_substring = '' for x in range(len_1): for y in range(len_2): if str_1[x] == str_2[y]: cur_substring = str_1[x] while (x + 1 < len_1 and y + 1 < len_2 and str_1[x + 1] == str_2[y + 1]): cur_substring += str_1[x + 1] x += 1 y += 1 if len(cur_substring) > len(longest_substring): longest_substring = cur_substring return longest_substring longest_sub = longest_substring(str_1, str_2) print(longest_sub)"},{"prompt":"Design a program to reverse a given string. Pytho","completion":"def reverse_string(input_string): reversed_string = \\"\\" for i in range(len(input_string)-1, -1, -1): reversed_string += input_string[i] return reversed_string input_string = \\"Python\\" print(reverse_string(input_string))"},{"prompt":"Generate a python program to calculate the minimum and maximum values in an array","completion":"def min_max(array): min = array[0] max = array[0] for val in array[1:]: if val > max: max = val if val < min: min = val return min, max"},{"prompt":"Create a function in Python that takes a list of strings, converts it to camelCase, and returns a new list with the converted strings. list = [this, is, an, example]","completion":"def convertToCamelCase(list): camelCaseList = [] for string in list: string = string.capitalize() camelCaseList.append(string) return ''.join(camelCaseList)"},{"prompt":"Write a Python algorithm that finds the longest contiguous sequence of increasing numbers within an array. [3, 2, 1, 4, 5, 6, 7, 8]","completion":"def find_longest_increasing_sequence(arr): longest_start = 0 longest_length = 0 current_start = 0 current_length = 0 for i in range(1, len(arr)): prev_val = arr[i - 1] curr_val = arr[i] if curr_val > prev_val: current_length += 1 else: current_start = i current_length = 1 if current_length > longest_length: longest_start = current_start longest_length = current_length longest_sequence = arr[longest_start:longest_start + longest_length] return longest_sequence arr = [3, 2, 1, 4, 5, 6, 7, 8] longest_seq = find_longest_increasing_sequence(arr) print(longest_seq) // Output: [4, 5, 6, 7, 8]"},{"prompt":"Generate a Python function to parse a JSON data structure. data = { name: John, age: 18, occupation: Software Engineer }","completion":"import json def parse_json(data): data = json.loads(data) return data['name'], data['age'], data['occupation'] name, age, occupation = parse_json(data) print(name, age, occupation) # Output: John 18 Software Engineer"},{"prompt":"Suggest an improvement for the following python code for finding the sum of elements of a list def sum_elements(arr): sum_value = 0 for num in arr: sum_value += num return sum_value","completion":"def sum_elements(arr): return sum(arr) # return sum of elements of arr with one line of code."},{"prompt":"Generate a Python class to represent a 3dimensional vector.","completion":"class Vector3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def length(self): return (self.x**2 + self.y**2 + self.z**2)**0.5"},{"prompt":"Work out a solution to the Towers of Hanoi game using Python. The game consists of 3 rods and 4 disks.","completion":"def TowersOfHanoi(n, fromRod, toRod, auxRod): if n == 1: print(\\"Move disk 1 from rod\\",fromRod,\\"to rod\\",toRod) return TowersOfHanoi(n-1, fromRod, auxRod, toRod) print(\\"Move disk\\", n, \\"from rod\\", fromRod, \\"to rod\\", toRod) TowersOfHanoi(n-1, auxRod, toRod, fromRod) n = 4 TowersOfHanoi(n, 'A', 'C', 'B')"},{"prompt":"Develop an algorithm using Python to calculate the Euclidean distance between 2 points.","completion":"def euclidean_distance(point1, point2): sum_squared_distance = 0 for i in range(len(point1)): sum_squared_distance += (point1[i] - point2[i])**2 return sum_squared_distance**0.5"},{"prompt":"Create a Python script to print the absolute difference between two given numbers. 9, 5","completion":"def absolute_difference(A, B): return abs(A - B) # Driver Code A = 9 B = 5 print(absolute_difference(A, B))"},{"prompt":"Create a recommendation system in Python using Pandas to recommend new products to customers based on past purchases. Not applicable","completion":"import pandas as pd from sklearn.neighbors import NearestNeighbors # Read in data data = pd.read_csv('product_data.csv') # Create an item-based collaborative filter cf = NearestNeighbors(metric='cosine', algorithm='brute') cf.fit(data) # Make recommendations distances, indices = cf.kneighbors(data, n_neighbors=3) # Print results for i in range(len(data)): print('Recommendations for item {}:'.format(i), indices[i])"},{"prompt":"Generate a Python program to filter out a list of numbers and keep only those that are prime nums = [2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def filter_prime(nums): # Keep track of the prime numbers primes = [] # Iterate through each number for num in nums: is_prime = True # Check if the number is divisible by any number from 2 to itself for i in range(2, num): # If so, the number is not prime if num % i == 0: is_prime = False break # Add the number to the list of primes if it is prime if is_prime: primes.append(num) # Return the updated list return primes"},{"prompt":"Write a Python program to store a list of books in a dictionary. Each book should include title, author, and number of pages. ['The Hobbit', 'J.R.R. Tolkien', 295], ['The Catcher in the Rye', 'J.D. Salinger', 223]","completion":"book_list = [ {'title': 'The Hobbit', 'author': 'J.R.R. Tolkien', 'pages': 295}, {'title': 'The Catcher in the Rye', 'author': 'J.D. Salinger', 'pages': 223}, ]"},{"prompt":"Assume that you have a web application which stores data in three different databases: MySQL, MongoDB, and PostgreSQL. Write a python program using the libraries for all three databases to query and display the data on the web page. Not applicable","completion":"import pymysql from pymongo import MongoClient import psycopg2 # connect to MySQL connection_mysql = pymysql.connect(host='localhost', user='root', password='password', database='db_name') # connect to MongoDB client = MongoClient('mongodb://localhost:27017') # connect to PostgreSQL connection_postgresql = psycopg2.connect(host='localhost', user='postgres', password='password', dbname='db_name') # define a query for each database query_mysql = 'SELECT * FROM table_name' query_mongodb = {'name': 'John Doe'} query_postgresql = 'SELECT * FROM table_name WHERE age > 18' # execute the query and fetch the results result_mysql = connection_mysql.execute(query_mysql) result_mongodb = client.db_name.collection_name.find(query_mongodb) result_postgresql = connection_postgresql.execute(query_postgresql) # close the connections connection_mysql.close() client.close() connection_postgresql.close() # render the results on webpage def render_page(request): return render(request, 'template.html', { 'data_mysql': result_mysql, 'data_mongodb': result_mongodb, 'data_postgresql': result_postgresql })"},{"prompt":"Create a class in Python to represent a complex number.","completion":"class ComplexNumber: def __init__(self, real, imaginary): self.real = real self.imaginary = imaginary def __str__(self): return \\"({0} + {1}i)\\".format(self.real, self.imaginary)"},{"prompt":"Create an Python program that takes a list of integers and returns the sublist consisting of the prime numbers from the list. [2, 8, 3, 6, 10, 7, 14, 11, 17, 15]","completion":"def is_prime(num): for i in range(2, num // 2 + 1): if num % i == 0: return False return True def prime_list(lst): prime_lst = [] for num in lst: if is_prime(num): prime_lst.append(num) return prime_lst lst = [2, 8, 3, 6, 10, 7, 14, 11, 17, 15] prime_lst = prime_list(lst) print(prime_lst) # Output: [2, 3, 7, 11, 17]"},{"prompt":"Write a Python program to find the most efficient path for a robot to take from its current location to the destination start = (4, 2) end = (9, 9)","completion":"# Function to find the most efficient path def find_path(start, end): # Current location of the robot x = start[0] y = start[1] # Destination coordinates goal_x = end[0] goal_y = end[1] # set to record the cells already visited visited = set() # define a queue to store the tuple of current position and the path queue = [([x, y], [])] # define a neighbor list neighbor = [[1, 0], [0, 1], [-1, 0], [0, -1]] # define a maximum tries max_tries = 100 # define a while loop while queue: # get current position and current path position, path = queue.pop(0) # check if the goal is reached if position[0] == goal_x and position[1] == goal_y: return path + [position] # check if the current position is out of maximum tries and not visited before if position not in visited and max_tries > 0: visited.add(position) max_tries = max_tries - 1 #get all neighbors of the current position for neighbor_x, neighbor_y in neighbor: next_x = position[0] + neighbor_x next_y = position[1] + neighbor_y # add to the queue queue.append(([next_x, next_y], path + [position])) return None start = (4, 2) end = (9, 9) # most efficient path from start to end path = find_path(start, end) print(path)"},{"prompt":"Edit this python code to be more efficient. data = [1, 2, 3, 4] result = [] for x in data: if x > 2: result.append(x)","completion":"data = [1, 2, 3, 4] result = [x for x in data if x > 2]"},{"prompt":"Debug the following Python code def f1 (x): y = x + 1 def f2(x): return f1(x)*f1(x) f2(2)","completion":"# define f1 # def f1(x): return x + 1 # define f2 # def f2(x): return f1(x) * f1(x) # call f2 # print(f2(2)) #Output: 9"},{"prompt":"Debug the following Python program which raises a SyntaxError.","completion":"def func(a, b): c = a + b return c a = 4 b = 5 res = func(a, b) print(res)"},{"prompt":"Set up GPIO pins, import necessary modules, define operating modes, prompt for password and mode selection, check license validity and user registration, calculate BAC, open solenoid to dispense beer if valid license and BAC below threshold, record swipe data in appropriate file.","completion":"# bin/usr/python # Setting up GPIO pins from time import sleep import RPi.GPIO as GPIO GPIO.setmode(GPIO.BOARD) # Identifies the pin numbers to the pi GPIO.setwarnings(False) GPIO.setup(3, GPIO.OUT) # Should sets pin #3 as an output...but doesnt work yet GPIO.setup(3, GPIO.LOW) # Turns initial output for pin 3 off import time timestr = time.strftime(\\"%Y%m%d %H%M%S\\") # Import functions to analyze license validity from CheckLicense.py from CheckLicense import check_license, calc_BAC import getpass import sys import re # Operating modes while True: #try: mode_req=raw_input(\\"Enter Mode(normal, party, barkeep): \\") if mode_req==\\"party\\": passwd=getpass.getpass(\\"Enter password: \\") if passwd==\\"admin\\": mode=\\"party\\" if mode_req==\\"normal\\": passwd=getpass.getpass(\\"Enter password: \\") if passwd==\\"admin\\": mode=\\"normal\\" if mode_req==\\"barkeep\\": passwd=getpass.getpass(\\"Enter password: \\") if passwd==\\"admin\\": mode=\\"barkeep\\" #Normal mode operations-------------------------------------------------------------------------------------------- while mode=='normal': #try: print '{0} mode!' .format(mode) raw_text=getpass.getpass('Swipe card now: ').strip() check_license_out=check_license(raw_text) valid_license=check_license_out[0] first_name=check_license_out[1] last_name=check_license_out[2] DL_num=check_license_out[3] # Check to see if person is registered user users=open(\\"users_list.txt\\", 'r') hit=0 print DL_num if valid_license=='Yes': for line in users: if re.search(DL_num, line, re.IGNORECASE): hit=hit+1 if hit>=1: valid_license='Yes' else: print 'Not registered user' valid_license='No' # Calculating the BAC BAC=calc_BAC(raw_text) print BAC # Opening the solenoid if valid_license=='Yes': GPIO.setup(3, GPIO.HIGH) print 'Beer time!' sleep(2); GPIO.setup(3, GPIO.LOW) with open(\\"swipes.txt\\", \\"a\\") as myfile: myfile.write(last_name+\\",\\"+first_name+\\" \\") myfile.write(DL_num+\\" \\") myfile.write(mode+\\" \\") myfile.write(time.strftime(\\"%Y-%m-%d\\")+\\" \\") myfile.write(str(time.time())+\\"n\\") # except (NameError, IndexError, ValueError): # print \\"error\\" # continue #Party mode operations-------------------------------------------------------------------------------------------- while mode==\\"party\\": try: print '{0} mode!' .format(mode) raw_license_text=getpass.getpass('Swipe card now: ').strip() check_license_out=check_license(raw_license_text) valid_license=check_license_out[0] first_name=check_license_out[1] last_name=check_license_out[2] # Opening the solenoid if valid_license=='Yes': GPIO.setup(3, GPIO.HIGH) print 'Beer time!' sleep(2); GPIO.setup(3, GPIO.LOW) with open(\\"swipes_normal.txt\\", \\"a\\") as myfile: myfile.write(last_name) myfile.write(\\",\\") myfile.write(first_name) myfile.write(\\",\\") myfile.write(time.strftime(\\"%Y%m%d%H%M%Sn\\")) except (NameError, IndexError, ValueError): print \\"error\\" continue #Barkeep mode operations------------------------------------------------------------------------------------------- while mode==\\"barkeep\\": try: print '{0} mode!' .format(mode) check_license_out=check_license(getpass.getpass('Swipe card now: ').strip()) valid_license=check_license_out[0] first_name=check_license_out[1] last_name=check_license_out[2] #usr_chksum = #chksum(firstname_lastname) #'{0}beer_score' .format(usr_chksum) #Check to see if person is blacklisted blacklist=open(\\"blacklist.txt\\", 'r') hit=0 if valid_license=='Yes': for line in blacklist: if re.search(last_name, line, re.IGNORECASE): hit=hit+1 if re.search(first_name, line, re.IGNORECASE): hit=hit+1 if hit>=2: print \\"We don't serve your kind here.\\" blacklisted='Yes' else: blacklisted='No' #Calculate BAC #Opening the solenoid if blacklisted=='No': if BAC < intoxicated: GPIO.setup(3, GPIO.HIGH) print 'Beer time!' print BAC sleep(2); GPIO.setup(3, GPIO.LOW) with open(\\"swipes_barkeep.txt\\", \\"a\\") as myfile: myfile.write(last_name) myfile.write(\\",\\") myfile.write(first_name) myfile.write(\\"_\\") myfile.write(time.strftime(\\"%Y-%m-%d %H:%M%Sn\\")) else: print 'Your BAC is {0}' .format(BAC) print \\"You are too drunk, beer time is over\\" except (NameError, IndexError, ValueError): print \\"error\\" continue # except (NameError, IndexError, ValueError): print \\"error\\" # continue #end ---------------------------------------------------------------------------"},{"prompt":"Using Python, create a program to print a random element from a list. [apple, banana, mango, pear, grape]","completion":"import random # list of fruits fruits = [\\"apple\\", \\"banana\\", \\"mango\\", \\"pear\\", \\"grape\\"] # generate a random index randomIndex = random.randint(0, len(fruits)-1) # select and print the random fruit randomFruit = fruits[randomIndex] print(\\"Random fruit: \\" + randomFruit)"},{"prompt":"Develop an interactive textbased RPG game in Python that gives the player options to move around in an environment and battle monsters. Not applicable","completion":"# Player class class Player(object): def __init__(self): self.health = 100 self.location = 'room one' self.monsters_killed = 0 # Room class class Room(object): def __init__(self): self.name = '' self.description = '' self.monsters = [] def add_monster(self, monster): self.monsters.append(monster) # Monster class class Monster(object): def __init__(self): self.name = '' self.health = 100 def attack(self, player): player.health -= 10 # Function to start the game def start_game(): # Create player, rooms and monsters player = Player() # Main game loop while True: # Show the current room; print(f'You are in {player.location}.') # Display available actions print('Available actions: move, fight') # Get user's action response = input('What would you like to do? ').lower() # Moving to a new room if response == 'move': # Get the list of available rooms # Get the user's destination # Move the player to the chosen room # Fighting a monster if response == 'fight': # Get all monsters in the current room # Get the user's chosen monster # Initiate a battle between the player and the monster # End of the game if player.health <= 0: print ('You have been defeated!') break if __name__ == '__main__': start_game()"},{"prompt":"Create a TexttoSpeech Python application to read out a simple sentence.","completion":"import pyttsx3 def text_to_speech(sentence): engine = pyttsx3.init() engine.say(sentence) engine.runAndWait() text_to_speech(\\"Hello, this is a simple sentence\\")"},{"prompt":"Create an application with a Python backend and a React frontend that allows a user to create a list of tasks. Not applicable","completion":"# Python Backend # Web server setup app = Flask(__name__) # Database setup db = SQLAlchemy(app) # Model for tasks class Task(db.Model): id = db.Column(db.Integer, primary_key=True) title = db.Column(db.String(80), unique=True, nullable=False) is_completed = db.Column(db.Boolean, default=False) def __repr__(self): return f'<Task {self.id}: {self.title}>' # API Endpoint @app.route('/tasks', methods=['POST']) def create_task(): request_data = request.get_json() title = request_data.get('title') if not title: return jsonify({'error': 'Title must be provided.'}), 400 task = Task(title=title) db.session.add(task) db.session.commit() return jsonify(task.serialize()) # React Frontend import React, { useState, useEffect } from 'react' import axios from 'axios' export const TaskList = () => { const [tasks, setTasks] = useState([]) useEffect(() => { getTasks() }, []) const getTasks = async () => { const response = await axios.get('http://localhost:3000/tasks') setTasks(response.data) } return ( <div> {tasks.map(task => ( <div key={task.id}> <input type=\\"checkbox\\" checked={task.is_complete} /> <label>{task.title}</label> </div> ))} </div> ) }"},{"prompt":"Write a Python program to combine two dictionaries of similar structure together, such that the entries in the two dictionaries are merged into a single dictionary. dict_a = {'a':1, 'b':2, 'c':3} dict_b = {'d':4, 'e':5, 'f':6}","completion":"def merge_dict(dict_a, dict_b): merged_dict = {**dict_a, **dict_b} return merged_dict"},{"prompt":"Generate a Python program to read a list of integers and print its elements in reversed order. The input should include a sample list of integers for testing the program, for example: [1, 3, 6, 8, 10]","completion":"list_of_ints = [1, 3, 6, 8, 10] list_of_ints.reverse() print(list_of_ints) # [10, 8, 6, 3, 1]"},{"prompt":"Given a binary tree, write a Python program to determine the sum of all elements in the tree.","completion":"def sum_tree(root): if root is None: return 0 return root.val + sum_tree(root.left) + sum_tree(root.right)"},{"prompt":"Create an API using flask and python which takes a list or array of integers and returns their minimum and maximum values. [12, 4, 9, 24, 5]","completion":"from flask import Flask, request app = Flask(name) @app.route('/minmax', methods=['POST']) def minmax(): data = request.get_json() nums = data['nums'] minVal = min(nums) maxVal = max(nums) return {'min': minVal, 'max': maxVal} if name == 'main': app.run()"},{"prompt":"Design a python class to represent a 3dimensional vector with methods to support vector addition and subtraction.","completion":"# Defining a class for 3-dimensional vectors class Vector: # defining constructor def __init__(self, x, y, z): self.x = x self.y = y self.z = z # Defining function to print vector def printVec(self): print(self.x, self.y, self.z) # Defining function to add two vectors def addVec(self, V): return Vector(self.x+V.x, self.y+V.y, self.z+V.z) # Defining function to subtract two vectors def subVec(self, V): return Vector(self.x-V.x, self.y-V.y, self.z-V.z) # Driver code v1= Vector(1, 2, 3) v2= Vector(5, 3, 2) print(\\"Vector 1: \\") v1.printVec() print(\\"Vector 2: \\") v2.printVec() v3 = v1.addVec(v2) print(\\"sum of vector 1 and vector 2: \\") v3.printVec() v4 = v1.subVec(v2) print(\\"difference of vector 1 and vector 2: \\") v4.printVec()"},{"prompt":"Write a string slicing function in Python that takes a string and start and end index, and return the slice. string = This is a slicing test start = 8 end = 15","completion":"def slicing(string, start, end): return string[start:end] print(slicing(string, start, end))"},{"prompt":"Write a python program to tokenize a given text Text='Python is an interpreted, highlevel, generalpurpose programming language.'","completion":"import nltk from nltk.tokenize import word_tokenize # input text text = 'Python is an interpreted, high-level, general-purpose programming language.' # converting the text into tokens token = word_tokenize(text) print(token)"},{"prompt":"Generate a Python code for an algorithm to find the shortest path between two points in a matrix matrix = [[2, 3, 5], [1, 7, 6], [3, 0, 9]] start = (0, 0) end = (2, 2)","completion":"def shortest_path(matrix, start, end): queue = [] min_len = math.inf queue.append([start]) while queue: path = queue.pop(0) x, y = path[-1] if (x, y) == end: if len(path) < min_len: min_len = len(path) for dx, dy in [[-1, 0], [1, 0], [0, -1], [0, 1]]: new_x, new_y = x + dx, y + dy if 0 <= new_x < len(matrix) and 0 <= new_y < len(matrix[0]): if matrix[new_x][new_y] == 0: queue.append(path + [(new_x, new_y)]) return min_len"},{"prompt":"Create a basic Python algorithm that searches a given sorted array for a value using binary search. sortedArray = [1, 2, 3, 4, 5, 6, 7] value = 5","completion":"# Array to search sortedArray = [1, 2, 3, 4, 5, 6, 7] # Target value value = 5 # Binary search function def binarySearch(array, target): # Find the middle of the array mid = len(array) // 2 # Check if the target is equal to the middle value if array[mid] == target: return True # If the target is less than the middle value, search the left half elif target < array[mid]: return binarySearch(array[:mid], target) # If the target is greater than the middle value, search the right half elif target > array[mid]: return binarySearch(array[mid+1:], target) # If the target is not found else: return False # Check if the value is in the array if binarySearch(sortedArray, value): print('Value found!') else: print('Value not found!')"},{"prompt":"Write a Python program that takes the following dictionary as an argument and returns the count of each item {apples: 5, oranges: 6, bananas: 7}","completion":"def item_counts(fruits): counts = {} for k, v in fruits.items(): counts[k] = v return counts"},{"prompt":"Generate a Python class to read in a textfile and count the frequency of each word.","completion":"class WordCounter: def __init__(self, filename): self.word_counts = {} self.filename = filename self.process_file() def process_file(self): with open(self.filename) as f: for line in f: words = line.split() for word in words: if word in self.word_counts: self.word_counts[word] += 1 else: self.word_counts[word] = 1 def get_word_counts(self): return self.word_counts"},{"prompt":"it possible to create a Python program that converts a given string to a different case?","completion":"def convert_string_case(string): new_string = string.swapcase() return new_string string = \\"this Is A TeST\\" new_string = convert_string_case(string) print(new_string)"},{"prompt":"Create a translation field for storing a string in multiple languages in a Django model. Use the TransCharField or TransTextField subclass of TransField depending on the widget needed. Use the TransDbValue class to store the translations in a dictionary format and implement the get_in_language and set_in_language methods to access the translations. Use the TransFormField class for form validation in admin and when using ModelForm.","completion":"from django.db import models from django.conf import settings from django.utils.translation import get_language from django.utils.translation import ugettext as _ from django.utils.encoding import force_unicode, smart_str, smart_unicode from django.forms.fields import Field from django.forms import ValidationError from widgets import TransCharWidget, TransTextWidget def get_default_language_name(): ''' Get language from default language specified by LANGUAGE_CODE in settings Used in error messages ''' lang_name = '' for lang in settings.LANGUAGES: if lang[0] == settings.LANGUAGE_CODE: lang_name = lang[1] break return force_unicode(lang_name) class TransDbValue(unicode): ''' This class implements a unicode string, but with a hidden attribute raw_data. When used as a string it returns the translation of the current language raw_data attribute stores a dictionary with all translations Also implements a method \\"get_in_language(language)\\" that returns the translation on any available language ''' raw_data = {} def get_in_language(self, language): if self.raw_data and self.raw_data.has_key(language): return self.raw_data[language] else: return u'' def set_in_language(self, language, value): self.raw_data[language] = value class TransFormField(Field): ''' forms field, used when ModelForm (or deprecated form_for_model/form_form_instance) is called Also implements form validation in admin ''' def clean(self, value): if isinstance(value, dict) and self.required: filled_value = [ v for v in value.values() if bool(v) ] if not filled_value: raise ValidationError, _(\\"This field is required.\\") return super(TransFormField, self).clean(value) class TransField(models.Field): ''' Model field to be subclassed Used for storing a string in many languages at database (with python's dictionary format) pickle module could be used, but wouldn't alow search on fields? ''' def get_internal_type(self): return 'TextField' def to_python(self, value): if isinstance(value, TransDbValue): return value if isinstance(value, dict): # formfield method makes this function be called with value as a dict python_value = value else: try: python_value = eval(value) for k,v in python_value.items(): python_value[k] = smart_unicode(v) except Exception: python_value = None if isinstance(python_value, dict): if python_value.has_key(get_language()) and python_value[get_language()]: result = TransDbValue(python_value[get_language()]) elif python_value.has_key(settings.LANGUAGE_CODE) and python_value[settings.LANGUAGE_CODE]: result = TransDbValue(python_value[settings.LANGUAGE_CODE]) else: val = \\"bal\\" for item in python_value.items(): try: val = item[1] except: pass if val: break result = TransDbValue(python_value.items()[0][1]) result.raw_data = python_value else: result = TransDbValue(value) result.raw_data = {settings.LANGUAGE_CODE: value} return result def get_db_prep_save(self, value): if not isinstance(value, TransDbValue): return value value = [u\\"'%s': '''%s'''\\" % (k, v) for k, v in value.raw_data.items()] value = u'{%s}' % u','.join(value) return smart_str(value) def formfield(self, **kwargs): defaults = {'form_class': TransFormField} defaults.update(kwargs) return super(TransField, self).formfield(**defaults) def flatten_data(self, follow, obj=None): ''' for serializing objects ''' raw_data = self._get_val_from_obj(obj).raw_data.copy() for k,v in raw_data.items(): raw_data[k] = smart_str(v) return {self.attname: raw_data} class TransCharField(TransField): ''' TransField used with CharField widget ''' __metaclass__ = models.SubfieldBase def formfield(self, **kwargs): kwargs['widget'] = TransCharWidget return super(TransCharField, self).formfield(**kwargs) class TransTextField(TransField): ''' TransField used with CharField widget ''' __metaclass__ = models.SubfieldBase def formfield(self, **kwargs): kwargs['widget'] = TransTextWidget return super(TransTextField, self).formfield(**kwargs)"},{"prompt":"Create a python script that displays the information of three different cities. Edinburgh: Scotland, 54.6°N, UK Paris: France, 48.86°N, Europe Dhaka: Bangladesh, 23.78°N,","completion":"def get_city_info(city, country, latitude, continent): print(\\"City: {}, Country: {}, Latitude: {}, Continent: {}\\".format( city, country, latitude, continent)) get_city_info('Edinburgh', 'Scotland', '54.6°N', 'UK') get_city_info('Paris', 'France', '48.86°N', 'Europe') get_city_info('Dhaka', 'Bangladesh', '23.78°N', 'Asia')"},{"prompt":"Write a Python program to remove duplicate characters of a given string. bufferoverflow","completion":"def remove_duplicate_characters(string): result = \\"\\" seen = set() for char in string: if char not in seen: seen.add(char) result += char return result print(remove_duplicate_characters(\\"bufferoverflow\\"))"},{"prompt":"Produce a Python program that takes a list of numbers as an input and prints the result of finding the sum of the list.","completion":"def sum_list(arr): \\"\\"\\"Finds the sum of a given list of numbers. Args: arr (list): List of numbers. Returns: int: Sum of list elements. \\"\\"\\" sum = 0 for num in arr: sum += num return sum"},{"prompt":"Create a function in Python to calculate the distance between two points. point1 (x1, y1): (2, 7) point2 (x2, y2): (4, 9)","completion":"import math def distance_between_points(x1, y1, x2, y2): return math.sqrt((x2 - x1)**2 + (y2 - y1)**2) # Call the function distance = distance_between_points(2, 7, 4, 9) print(\\"The distance between the two points is\\", distance)"},{"prompt":"Create an AI program that recognizes handwritten letters and digits using Python. Not applicable","completion":"# imports import tensorflow as tf from tensorflow import keras # load the MNIST dataset mnist = keras.datasets.mnist # Split the dataset into training and testing sets (x_train, y_train), (x_test, y_test) = mnist.load_data() # Preprocess the data x_train, x_test = x_train / 255.0, x_test / 255.0 # create a model model = keras.Sequential() # add a convolution layer model.add(keras.layers.Conv2D(28, kernel_size=(3,3), input_shape=(28, 28, 1))) # add a max pooling layer model.add(keras.layers.MaxPool2D(pool_size=(2, 2))) # add a flatten layer model.add(keras.layers.Flatten()) # add a dense layer model.add(keras.layers.Dense(128, activation='relu')) # add an output layer model.add(keras.layers.Dense(10, activation='softmax')) # compile the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) # train the model model.fit(x_train, y_train, epochs=5) # evaluate the model model.evaluate(x_test, y_test)"},{"prompt":"Given a list of numbers, write a Python function to find out if any two numbers add up to a given number.","completion":"def two_sum(numbers, given): for i in range(len(numbers)): for j in range(i+1, len(numbers)): if numbers[i] + numbers[j] == given: return True return False"},{"prompt":"Write a Python program to generate a random number between the given input numbers.","completion":"import random def random_num(start, stop): return random.randint(start, stop) # Example num = random_num(0, 10) print(num)"},{"prompt":"Create a python program to include a webpage rendering feature.","completion":"import webbrowser url = \\"www.example.com\\" webbrowser.open(url)"},{"prompt":"Create a Python dictionary from two given lists. list1 = ['a', 'b', 'c'] list2 = [1, 2, 3]","completion":"dict1 = dict(zip(list1, list2)) print(dict1)"},{"prompt":"Construct a code snippet for Python to check whether a number is even or odd.","completion":"def is_even(n): if n % 2 == 0: print(\\"Even\\") else: print(\\"Odd\\") is_even(4)"},{"prompt":"Develop a reinforcement learning environment that plays tictactoe in Python","completion":"import random # Create class for environment class TicTacToeEnv(): # Define initializer def __init__(self): self.state = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '] self.player = 'X' self.player_turn = 0 # Define a reset method to set initial state def reset(self): self.state = [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '] self.player = 'X' self.player_turn = 0 return self.state # Define step function def step(self, action): # Set player mark self.state[action] = self.player # Check for winner winner = self.check_winner() done = False if winner == 'X' or winner == 'O': reward = 1 done = True else: reward = 0 # Switch players if self.player == 'X': self.player = 'O' else: self.player = 'X' # Check for draw and switch player turn if self.player_turn == 8: done = True reward = 0.5 self.player_turn += 1 # Return state, reward, done, info return self.state, reward, done, None # Define a method to check if someone has won def check_winner(self): win_state = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]] for i in win_state: if self.state[i[0]] == self.state[i[1]] == self.state[i[2]] == 'X': return 'X' if self.state[i[0]] == self.state[i[1]] == self.state[i[2]] == 'O': return 'O' return None # Play a game env = TicTacToeEnv() env.reset() done = False while not done: action = random.randint(0, 8) state, reward, done, _ = env.step(action) print(env.state) if reward == 1 or reward == 0.5: print(\\"Winner: \\"+str(reward))"},{"prompt":"Create a Python program to convert a list of strings to a dictionary. The dictionary keys should be the characters of the strings and the values should be the lengths of the strings. strings = ['hello', 'world', 'computer']","completion":"strings = ['hello', 'world', 'computer'] dictionary = {} for string in strings: for char in string: dictionary[char] = len(string) print(dictionary) # {'h': 5, 'e': 5, 'l': 5, 'o': 5, 'w': 5, 'r': 5, 'd': 5, 'c': 8, 'm': 8, 'u': 8, 't': 8, 'p': 8, 'e': 8, 'r': 8}"},{"prompt":"Develop a Python script to sort a given list of names alphabetically. [John, Harry, Robert]","completion":"def sort_names(names): names.sort() return names names = [\\"John\\", \\"Harry\\", \\"Robert\\"] result = sort_names(names) print(result)"},{"prompt":"Create a Python script to connect to a domain and fetch the contents of its homepage","completion":"import requests url = \\"https://www.example.com/\\" response = requests.get(url) if response.status_code == 200: print(response.content) else: print(\\"Error fetching the page\\")"},{"prompt":"What function will you use to count the number of words in a string? 'Hello world, this is a sentence.'","completion":"There are 5 words in the given string. To count the number of words in a string, you can use the \`len()\` or \`count()\` functions in Python. For example: \`\`\` num_words = len(string.split()) \`\`\` or \`\`\` num_words = string.count(\\" \\") + 1 \`\`\`"},{"prompt":"Create a Python program that shuffles an array of integers. [1, 5, 9, 4, 2]","completion":"import random def shuffle(arr): random.shuffle(arr) return arr my_arr = [1, 5, 9, 4, 2] print(shuffle(my_arr))"},{"prompt":"Write a Python program that calculates the greatest common divisor of two numbers and displays the result. 10 and 20","completion":"def gcd(a, b): if b == 0: return a return gcd(b, a % b) num1 = 10 num2 = 20 gcd_value = gcd(num1, num2) print(f'The greatest common divisor of {num1} and {num2} is {gcd_value}')"},{"prompt":"Develop a python program to convert a given temperature value from Fahrenheit to Celsius.","completion":"def fahrenheit_to_celsius(temp): celsius = (temp - 32) * 5/9 return round(celsius, 2)"},{"prompt":"Write a Python program to generate a random password for a user with length of 8 characters, containing at least one uppercase letter, one lowercase letter, one digit, and one special character. Not applicable","completion":"import string import random def generate_password(): up_alphabet = string.ascii_uppercase low_alphabet = string.ascii_lowercase digits = string.digits symbols = string.punctuation length = 8 pass_characters = up_alphabet + low_alphabet + digits + symbols password = ''.join(random.sample(pass_characters, length)) return password print(generate_password())"},{"prompt":"mplement a logistic regression classifier in python to classify handwritten digits from the MNIST dataset. MNIST datase","completion":"import numpy as np import matplotlib.pyplot as plt import gzip import pickle # load training data with gzip.open('./mnist_dataset/mnist.pkl.gz', 'rb') as f: train_data,valid_data,test_data = pickle.load(f, encoding='latin1') # prepare logistic regression X_train, y_train = train_data[0], train_data[1] X_valid, y_valid = valid_data[0], valid_data[1] X_test, y_test = test_data[0], test_data[1] X_train = np.hstack([np.ones([X_train.shape[0],1]), X_train]) X_valid = np.hstack([np.ones([X_valid.shape[0],1]), X_valid]) X_test = np.hstack([np.ones([X_test.shape[0],1]), X_test]) def sigmoid(z): return 1.0/(1.0+np.exp(-z)) def LogisticRegression(X, y, max_iter, alpha): m, n = X.shape weights = np.zeros(n) for _ in range(max_iter): weights = weights - alpha * (1/m) * (X.T @ (sigmoid(X @ weights) - y)) return weights weights = LogisticRegression(X_train, y_train, 1000, 0.001) # accuracy on training set predictions = np.round(sigmoid(X_train @ weights)) train_accuracy = np.mean(predictions == y_train) # accuracy on validation set predictions = np.round(sigmoid(X_valid @ weights)) valid_accuracy = np.mean(predictions == y_valid) # accuracy on test set predictions = np.round(sigmoid(X_test @ weights)) test_accuracy = np.mean(predictions == y_test) print('Train accuracy = ', train_accuracy) print('Validation accuracy = ', valid_accuracy) print('Test accuracy = ', test_accuracy)"},{"prompt":"Develop a design algorithm in Python that randomly generates a unique snowflake pattern.","completion":"import random def generate_snowflake(): # Generate random numbers between 0 and 1 a = random.random() b = random.random() c = random.random() # Generate the snowflake snowflake = [] snowflake.append((a**2 + b**2 + c**2)**0.5 * math.cos(a * math.pi * 2)) snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(b * math.pi * 2)) snowflake.append((a**2 + b**2 + c**2)**0.5 * math.sin(c * math.pi * 2)) return snowflake"},{"prompt":"Use Python to build a random number generator in the range [0, 10).","completion":"import random x = random.randint(0, 9) print(x)"},{"prompt":"Create a Python class called Employee that represents an employee in an organization. The Employee class should have instance attributes for the employee’s name, job title, and job number. Not applicable","completion":"class Employee: def __init__(self, name, job_title, job_number): self.name = name self.job_title = job_title self.job_number = job_number"},{"prompt":"Develop a system that finds similarities between given strings.","completion":"def get_jaccard_similarity(str1, str2): a = set(str1.split()) b = set(str2.split()) c = a.intersection(b) return float(len(c)) / (len(a) + len(b) - len(c)) # Driver code str1 = \\"python programming\\" str2 = \\"java programming\\" print(get_jaccard_similarity(str1, str2))"},{"prompt":"Write a python program that selects five random elements from a list and prints them. my_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9]","completion":"import random my_list = [1, 3, 5, 8, 7, 2, 10, 4, 6, 9] random.shuffle(my_list) for i in range(5): print(my_list[i])"},{"prompt":"Devolop a Python code to remove the duplicates from a given list and sort them in ascending order. [2, 8, 5, 2, 6, 3, 4]","completion":"my_list = [2, 8, 5, 2, 6, 3, 4] my_list = list(dict.fromkeys(my_list)) my_list.sort() print(my_list) # [2, 3, 4, 5, 6, 8]"},{"prompt":"Create a function in Python that takes two numbers as input and returns a dictionary with all the prime numbers between them. 8 and 20","completion":"def prime_numbers(x, y): prime_nums = {} for i in range(x, y+1): if(i > 1): for j in range(2, i): if(i % j == 0): break else: prime_nums[i] = i return prime_nums print(prime_numbers(8, 20)) # { 8: 8, 11: 11, 13: 13, 17: 17, 19: 19 }"},{"prompt":"Develop a Python script to print the first 10 cubes of natural numbers.","completion":"for i in range(1, 11): print(i**3)"},{"prompt":"Create a python function that takes in two strings and output their combined length. string_1 = Hello string_2 = World","completion":"def get_string_length(string_1, string_2): return len(string_1 + string_2)"},{"prompt":"Develop a function in Python to randomly select one element from a given array. [1, 2, 3, 4]","completion":"import random def randomElement(arr): return random.choice(arr)"},{"prompt":"Develop a Python script to train a multilayer perceptron to identify MNIST handwritten digits. Not applicable","completion":"# import libraries from keras.models import Sequential from keras.layers import Dense, Dropout import numpy # load the dataset dataset = numpy.loadtxt(\\"mnist.csv\\", delimiter=\\",\\") # split into input (X) and output (Y) variables X = dataset[:,0:784] Y = dataset[:,784] # Create model model = Sequential() model.add(Dense(784, input_dim=784, activation='relu')) model.add(Dense(256, activation='relu')) model.add(Dense(128, activation='relu')) model.add(Dense(10, activation='softmax')) # Compile model model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy']) # Fit the model model.fit(X, Y, epochs=10, batch_size=128, verbose=2) # Evaluate the model scores = model.evaluate(X, Y) print(\\"n%s: %.2f%%\\" % (model.metrics_names[1], scores[1]*100))"},{"prompt":"Sort a list of dictionaries in Python by a given key. [{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}]","completion":"list_of_dicts = [{'food': 'apple', 'color': 'red'}, {'food': 'banana', 'color': 'yellow'}, {'food': 'pear', 'color': 'green'}] # Sort list by given key sorted_list = sorted(list_of_dicts, key=lambda item:item['color']) print(sorted_list)"},{"prompt":"Create a Python script to scrape tweets with a particular hashtag from Twitter. #100DaysOfCode","completion":"import tweepy # Replace the API_KEY and API_SECRET with your application's key and secret. auth = tweepy.AppAuthHandler(API_KEY, API_SECRET) api = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True) # Replace the hashtag with your hashtag of interest. hashtag = '#100DaysOfCode' # Fetch the tweets tweets = tweepy.Cursor(api.search, q=hashtag, lang=\\"en\\").items() # Print out the tweets for tweet in tweets: print(tweet.text)"},{"prompt":"Design an algorithm in Python to find the number of occurrences of a given string in another string. haystack = Hello World needle = l","completion":"def count_occurrences(haystack, needle): count = 0 for char in haystack: if char == needle: count += 1 return count"},{"prompt":"Generate Python code to print the sum of two userdefined variables. var1 = 3 var2 = 7","completion":"var1 = 3 var2 = 7 sum = var1 + var2 print('The sum of var1 and var2 is ' + str(sum)) # prints 'The sum of var1 and var2 is 10'"},{"prompt":"Create a Python program to calculate the 10th Fibonacci number. The program should use a recursive approach to calculate the Fibonacci number. Not applicable","completion":"def fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return fibonacci(n-1)+fibonacci(n-2) # Driver Program print(fibonacci(10))"},{"prompt":"Create a web application using Django and Python. This application should allow users to register and login to view a list of quotes. Not applicable","completion":"# projects/quotes/models.py class Quote(models.Model): author = models.CharField(max_length=255) quote_text = models.TextField() class UserQuote(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) quote = models.ForeignKey(Quote, on_delete=models.CASCADE) # projects/quotes/views.py def index(request): if not request.user.is_authenticated: return redirect('login') quotes = request.user.userquote_set.all() return render(request, 'quotes/index.html', {'quotes': quotes}) def login(request): if request.user.is_authenticated: return redirect('index') if request.method == 'POST': form = AuthenticationForm(request.POST) if form.is_valid(): user = form.get_user() django_login(request, user) return redirect('index') else: form = AuthenticationForm() return render(request, 'quotes/login.html', {'form': form})"},{"prompt":"Create a program in Python 3 to simulate the rolling of two dice.","completion":"import random def roll_dice(): '''This function simulates rolling two dice.''' die_1 = random.randint(1, 6) die_2 = random.randint(1, 6) print(\\"Die 1: {}\\".format(die_1)) print(\\"Die 2: {}\\".format(die_2)) return (die_1, die_2)"},{"prompt":"Create a Python script to format the following string with proper new lines and indentation. '{ name:John, age:30, city:New York}'","completion":"formatted = '{n \\"name\\":\\"John\\",n \\"age\\":30,n \\"city\\":\\"New York\\"n}'"},{"prompt":"mplement a Python function to generate the Fibonacci sequence of a given length. 6","completion":"def generate_fibonacci(length): # Initialize n1, n2 = 0, 1 # Check if length is valid if length <= 0: print('Invalid length. Positive numbers only.') elif length == 1: print(n1) else: print(n1, n2, end=' ') # Generate sequence for i in range(2, length): n3 = n1 + n2 print(n3, end=' ') n1 = n2 n2 = n3 # Show output generate_fibonacci(6) # Output: 0 1 1 2 3 5"},{"prompt":"Create a python program to calculate the sum of odd numbers within a given range. range(1, 10)","completion":"total = 0 for i in range(1, 10): if i % 2 != 0: total += i print(total)"},{"prompt":"Optimize a function written in Python that calculates the mean of a given sequence of numbers import numpy as np sequence = np.array([1, 4, 6, 5, 9], dtype=np.float64) def calculate_mean(sequence): sum = 0 for number in sequence: sum += number return sum / len(sequence)","completion":"import numpy as np sequence = np.array([1, 4, 6, 5, 9], dtype=np.float64) def calculate_mean(sequence): return np.mean(sequence)"},{"prompt":"Write a Python program to create a dictionary mapping letters to numbers and numbers to letters.","completion":"letters_numbers = { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26 } numbers_letters = dict(zip(letters_numbers.values(), letters_numbers.keys())) print(numbers_letters)"},{"prompt":"Develop a script in Python to find the longest common subsequence of two given strings. AGGTAB GXTXAYB","completion":"def lcs(X, Y, m, n): if m == 0 or n == 0: return 0 elif X[m-1] == Y[n-1]: return 1 + lcs(X, Y, m-1, n-1) else: return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)) X = \\"AGGTAB\\" Y = \\"GXTXAYB\\" m = len(X) n = len(Y) print(\\"The length of LCS is \\" + lcs(X, Y, m, n))"},{"prompt":"Create a function in Python that takes the input of two sorted lists and outputs a merged list of sorted elements. list1 = [2, 3, 5, 8] list2 = [4, 6, 7]","completion":"def merge_sorted_lists(list1, list2): new_list = [] i1 = 0 i2 = 0 while i1 < len(list1) and i2 < len(list2): if list1[i1] < list2[i2]: new_list.append(list1[i1]) i1 += 1 else: new_list.append(list2[i2]) i2 += 1 while i1 < len(list1): new_list.append(list1[i1]) i1 += 1 while i2 < len(list2): new_list.append(list2[i2]) i2 += 1 return new_list list1 = [2, 3, 5, 8] list2 = [4, 6, 7] merged = merge_sorted_lists(list1, list2) print(merged)"},{"prompt":"Find the 5 most frequent words in the given text. Text: Python is a highlevel programming language.","completion":"from collections import Counter text = \\" Python is a high-level programming language.\\" words = text.split() frequencies = Counter(words) # printing five most frequent words frequent_words = frequencies.most_common(5) print(frequent_words)"},{"prompt":"Design a python program that calculates a person's BMI (body mass index).","completion":"def calculate_bmi(weight, height): bmi = weight/(height**2) return bmi"},{"prompt":"Generate Python code to print the smallest number in a given list of numbers. [24, 14, 67, 89, 34, 52]","completion":"list_of_numbers = [24, 14, 67, 89, 34, 52] print(min(list_of_numbers))"},{"prompt":"Write a Python program to quickly search for a substring in a larger string. string = hello world substring = or","completion":"def search_substring(string, substring): index = string.find(substring) return index result = search_substring(\\"hello world\\", \\"or\\") print(result)"},{"prompt":"Develop a Python program to fetch the website users of an online store. Website URL: www.example.com","completion":"import requests url = 'https://www.example.com/users' response = requests.get(url) data = response.json() for user in data: print(user['name'])"},{"prompt":"Write a python program that will generate a password containing numbers and letters from an entered string. Hello","completion":"def generate_password(word): # initialize variables password = \\"\\" letters = \\"\\" numbers = \\"\\" # create new password for i in range(0, len(word)): letters += word[i] numbers += str(i) password = letters + numbers return password print(generate_password(\\"Hello\\"))"},{"prompt":"Generate a Python program to delete an item from a given list. Item: 5 List: [8, 4, 5, 9, 2]","completion":"def remove_item(item, list): list.remove(item) return list list_org = [8, 4, 5, 9, 2] result = remove_item(5, list_org) print(result)"},{"prompt":"Write a Python code snippet that takes a list of numbers as argument and prints the average. [2, 3, 4, 5, 6]","completion":"def average(numbers: list): if numbers: return sum(numbers) / len(numbers) else: return 0 numbers = [2, 3, 4, 5, 6] print(f\\"Average of {numbers} is {average(numbers)}\\")"},{"prompt":"Write a Python program to check whether a number is in a given range","completion":"def is_in_range(n, lower, upper): return lower <= n <= upper"},{"prompt":"Design and implement a function in Python that takes a list of numbers as input and checks if any of the numbers are prime. [2, 3, 5, 7, 8, 11, 13, 15]","completion":"def is_prime(list_of_numbers): # Iterate over the list of numbers for num in list_of_numbers: # Check if the number is divisible by any number # other than 1 and the number itself for divisor in range(2, num): if num % divisor == 0: # If there is any divisor, the # number is not a prime number return False # All the numbers in the list are prime numbers return True list_of_numbers = [2, 3, 5, 7, 8, 11, 13, 15] outcome = is_prime(list_of_numbers) print(outcome)"},{"prompt":"Create an algorithm in Python to sort an array of 1000 randomly generated numbers between 0 and 10,000 using the quicksort algorithm. list = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799]","completion":"def quicksort(arr): if len(arr) < 2: return arr else: pivot = arr[0] less = [i for i in arr[1:] if i <= pivot] greater = [i for i in arr[1:] if i > pivot] return quicksort(less) + [pivot] + quicksort(greater) list = [735, 422, 662, 310, 536, 721, 705, 129, 156, 799] print(quicksort(list)) # Output: [129, 156, 310, 422, 536, 662, 705, 721, 735, 799]"},{"prompt":"Write a script in Python to detect the sentiment of a given text.","completion":"import textblob def detect_sentiment(text): analysis = textblob.TextBlob(text) if analysis.sentiment.polarity > 0: return 'positive' elif analysis.sentiment.polarity == 0: return 'neutral' else: return 'negative'"},{"prompt":"Write a Python program to check if a given number is divisible by 3 and 5 or not. 10","completion":"def check_divisible_3and5(num): if (num % 3 == 0 and num % 5 == 0): return True else: return False # test given number num = 10 if check_divisible_3and5(num): print(\\"%d is divisible by 3 and 5\\" %num) else: print(\\"%d is not divisible by 3 and 5\\" %num)"},{"prompt":"Design a Python program to stop a loop after some specific iterations","completion":"for i in range(100): if (i > 10): break print(i)"},{"prompt":"Create a REST API in Python Flask for the following model. class User: def __init__(self, name, email): self.name = name self.email = email","completion":"from flask import Flask, jsonify, request # Class class User: def __init__(self, name, email): self.name = name self.email = email # Create the application instance app = Flask(__name__) # Create a URL route in our application for \\"/\\" @app.route('/', methods=['GET', 'POST']) def index(): # POST request if request.method == 'POST': json_data = request.get_json(force=True) if not json_data: return jsonify({'message': 'No input data provided'}), 400 user_name = json_data['name'] user_email = json_data['email'] user = User(name=user_name, email=user_email) return jsonify({ 'name': user.name, 'email': user.email }) # GET request if request.method == 'GET': # Get user list users = [user.__dict__ for user in users] return jsonify({'users': users}), 200 # Run the application if __name__ == '__main__': app.run(host='0.0.0.0', port=8080, debug=True)"},{"prompt":"Create a neural network with two hidden layers in Python.","completion":"import numpy as np #importing the libraries from sklearn.neural_network import MLPClassifier #importing the neural network classifier #defining the input values X = np.array([[0,0],[0,1],[1,0],[1,1]]) y = np.array([[0],[1],[1],[0]]) #Creating the model model = MLPClassifier(hidden_layer_sizes = (2,2)) #creating the neural network with two hidden layers. model.fit(X,y) #Testing the model with a new input test_data = np.array([[1,1]]) prediction = model.predict(test_data) print(\\"The model predicts the output as:\\",prediction[0])"},{"prompt":"Create a Python program that takes a positive integer as an input and prints all its prime factors.","completion":"def prime_factors(num): prime_list = [] i = 2 while i * i <= num: if num % i: i += 1 else: num //= i prime_list.append(i) if num > 1: prime_list.append(num) return prime_list n = int(input('Enter a positive integer: ')) print(prime_factors(n))"},{"prompt":"Write an algorithm to implement a trie data structure in Python.","completion":"\\"\\"\\" Write an algorithm to implement a trie data structure in Python \\"\\"\\" class TrieNode(object): \\"\\"\\"Trie node class\\"\\"\\" def __init__(self): \\"\\"\\"Constructor for trie node\\"\\"\\" self.children = {} self.end_of_word = False class Trie(object): \\"\\"\\"Trie class\\"\\"\\" def __init__(self): \\"\\"\\"Constructor for Trie\\"\\"\\" self.root = TrieNode() def insert(self, word): \\"\\"\\"Inserts the given word into the trie\\"\\"\\" node = self.root for char in word: if char not in node.children: node.children[char] = TrieNode() node = node.children[char] node.end_of_word = True def search(self, word): \\"\\"\\"Searches if the given word is present in the trie\\"\\"\\" node = self.root for char in word: if char not in node.children: return False node = node.children[char] return node.end_of_word # Test code trie = Trie() words = [\\"apple\\", \\"application\\", \\"hi\\"] # Insert words into the trie for word in words: trie.insert(word) # Test search if trie.search(\\"apple\\"): print(\\"Word Found\\") else: print(\\"Word Not Found\\")"},{"prompt":"Create a test suite in Python to verify the correctness of a function that takes two numbers as inputs and returns their sum.","completion":"import unittest def add(a, b): return a + b class myTests(unittest.TestCase): def test_add(self): self.assertEqual(add(2, 3), 5) self.assertEqual(add(-1, 7), 6) def test_type(self): self.assertRaises(TypeError, add, 'a', 'b') if __name__ == '__main__': unittest.main()"},{"prompt":"Write a Python program to sort a list of tuples by their second element. [(1, 3), (3, 2), (4, 1), (2, 4)]","completion":"def sortBySecondElement(lst): # Sort the list of tuples by their second elements return sorted(lst, key=lambda x : x[1]) # Testing lst = [(1, 3), (3, 2), (4, 1), (2, 4)] sortedLst = sortBySecondElement(lst) print(sortedLst) # Output # [(4, 1), (3, 2), (1, 3), (2, 4)]"},{"prompt":"Create a Python module for a contact book application. This module should include classes for User (with fields for name, age, address, and email) and Contact (with fields for name, age, phone number). Not applicable","completion":"class User: \\"\\"\\"A class representing a user.\\"\\"\\" def __init__(self, name, age, address, email): self.name = name self.age = age self.address = address self.email = email class Contact: \\"\\"\\"A class representing a contact.\\"\\"\\" def __init__(self, name, age, phone_number): self.name = name self.age = age self.phone_number = phone_number"},{"prompt":"Generate Python classes from the given JSON. { name: Employee, attributes: { emp_id: { type: int }, name: { type: string }, department: { type: string }, salary: { type: float } } }","completion":"class Employee: def __init__(self, emp_id, name, department, salary): self.emp_id = emp_id self.name = name self.department = department self.salary = salary"},{"prompt":"Given two strings S and T. Generate a Python program to count the number of distinct substrings of T in S.","completion":"def count_substring(S, T): count = 0 for i in range(len(S)): for j in range(len(T)): if(S[i:i+j+1] == T): count += 1 return count"},{"prompt":"Develop a Python script that can query a SQL database and return the total number of entries in all the tables SQL database","completion":"import sqlite3 conn = sqlite3.connect(\\"example.db\\") cur = conn.cursor() sql = \\"SELECT name FROM sqlite_master WHERE type='table';\\" cur.execute(sql) tables = cur.fetchall() count = 0 for table in tables: sql = f\\"SELECT COUNT(*) FROM {table[0]};\\" cur.execute(sql) count += cur.fetchone()[0] print(f\\"Number of entries: {count}\\")"},{"prompt":"Write a Python program to filter out strings from a list of strings containing specific characters. list_of_strings = [Hello, World, 1, 0, This is a string.]","completion":"def filter_strings(list_of_strings): return list(filter(lambda x: x.isalpha(), list_of_strings)) print (filter_strings(list_of_strings)) # Output: ['Hello', 'World', 'This is a string.']"},{"prompt":"Create a function in Python to calculate the sum of the cubes of the first n positive integers. n = 4","completion":"def sum_cubes(n): sum = 0 for i in range(1,n+1): sum += i**3 return sum"},{"prompt":"Write a Python function that takes a string as input and checks if it is a palindrome or not. Not applicable","completion":"def is_palindrome(string): # reverse the string rev_string = string[::-1] # check if the string is equal to its reverse if (string == rev_string): return True return False # Example usage: result = is_palindrome('racecar') # result = True"},{"prompt":"Create a Python script that pulls data from an API and stores it in a database. Not applicable","completion":"import requests import json import sqlite3 # Make a GET request to the API response = requests.get(url) data = response.json() # Save the data to a database conn = sqlite3.connect('data.db') c = conn.cursor() for item in data: c.execute(\\"INSERT INTO items VALUES (?, ?)\\", (item['id'], item['name'])) conn.commit() conn.close()"},{"prompt":"Generate a Python program to iterate over a list of numbers and print out only the even numbers. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"for num in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: if num % 2 == 0: print(num)"},{"prompt":"Modify the following Python code to use a loop instead of recursion. def GCD(x, y): if y == 0: return x else: return GCD(y, x%y)","completion":"def GCD(x, y): while(y != 0): temp = y y = x % y x = temp return x"},{"prompt":"Write a Python function to transpose a given matrix of size (m x n). [[1, 2], [3, 4], [5, 6]]","completion":"def transposeMatrix(matrix): m = len(matrix) n = len(matrix[0]) # Create a new matrix transpose = [[0 for x in range(m)] for y in range(n)] # Iterate through the original matrix for i in range(m): for j in range(n): transpose[j][i] = matrix[i][j] return transpose"},{"prompt":"Generate a python program that multiplies two matrices.","completion":"def matrix_multi(A, B): rows_A = len(A) cols_A = len(A[0]) rows_B = len(B) cols_B = len(B[0]) if cols_A != rows_B: print(\\"Cannot multiply the given matrices.\\") return C = [[0 for row in range(cols_B)] for col in range(rows_A)] for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): C[i][j] += A[i][k] * B[k][j] return C"},{"prompt":"Create a basic calculator in Python","completion":"def calculator(): while True: try: userInput = input('Input equation (type \\"quit\\" to exit): ') if userInput == \\"quit\\": break result = eval(userInput) print(result) except: print('Invalid equation') calculator()"},{"prompt":"Design a solution in Python for determining the frequency of characters in a given string. A quick brown fox jumps over the lazy dog.","completion":"text = \\"A quick brown fox jumps over the lazy dog.\\" count = {} for character in text: if character in count: count[character] += 1 else: count[character] = 1 for key in count: print('%s appears %d times' % (key, count[key]))"},{"prompt":"Write a Python program to create a class for managing a linked list.","completion":"\\"\\"\\" Write a Python program to create a class for managing a linked list. \\"\\"\\" # Create the Node class class Node: def __init__(self, data): self.data = data self.next = None # Create the LinkedList class class LinkedList: def __init__(self): self.head = None def addNode(self, data): node = Node(data) if self.head == None: self.head = node else: curr = self.head while curr.next != None: curr = curr.next curr.next = node def printList(self): curr = self.head while curr != None: print(curr.data) curr = curr.next"},{"prompt":"Write a Python function to remove all consecutive duplicates of a given number. [1,1,2,3,3,3,4,4,4,4]","completion":"def remove_duplicates(lst): result = [] curr = lst[0] for num in lst: if num != curr: result.append(num) curr = num return result"},{"prompt":"Create a commandline tool in Python with a single argument number. The tool should prompt for a number, then calculate and print the factorial of the number. Not applicable","completion":"import sys def factorial(n): if n == 1 or n == 0: return 1 else: return n * factorial(n-1) if __name__ == '__main__': if len(sys.argv) > 1 and sys.argv[1] == '--number': try: number = int(input('Please enter a number: ')) print(f'{number}! = {factorial(number)}') except ValueError: print('Please enter a valid number.') else: print('Please provide a single argument --number')"},{"prompt":"mplement the PageRank algorithm in Python. Not applicable","completion":"import networkx as nx def page_rank(G, alpha=0.85, personalization=None, max_iter=100, tol=1.0e-6, nstart=None, weight='weight', dangling=None): \\"\\"\\" Return the PageRank of the nodes in the graph. G: graph alpha: damping parameter for PageRank, default=0.85 personalization: dict, optional The \\"personalization vector\\" consists of a dictionary with a key for every graph node and nonzero personalization value for each node. max_iter: int, optional Maximum number of iterations in power method eigensolve. tol: float, optional Error tolerance used to check convergence in power method eigensolve. nstart: dict, optional Starting value of PageRank iteration for each node. weight: key, optional Edge data key to use as weight. dangling: dict, optional The outedges to be assigned to any \\"dangling\\" nodes, i.e., nodes without any outedges. Returns: Dictionary of nodes with PageRank as value. \\"\\"\\" # Initialize results vector with (1-alpha)/N, # where N is the number of nodes in the graph. N = G.number_of_nodes() x = dict.fromkeys(G, (1 - alpha) / N) # Check if personalization vector was passed in; if so, update results vector if personalization is None: p = dict.fromkeys(G, 1 / N) else: missing = set(G) - set(personalization) if missing: raise NetworkXError('Personalization dictionary ' 'must have a value for every node. ' 'Missing nodes %s' % missing) p = personalization p = p.copy() s = float(sum(p.values())) for k in p: x[k] = p[k] / s p[k] = p[k] / s if dangling is None: # Use personalization vector if dangling vector not specified dangling_weights = p else: # Dangling nodes are nodes with no outedges. # Use personalization vector if dangling vector is specified but # doesn't have an entry for every node missing = set(G) - set(dangling) if missing: raise NetworkXError('Dangling node dictionary ' 'must have a value for every node. ' 'Missing nodes %s' % missing) s = float(sum(dangling.values())) for k in dangling: dangling[k] /= s dangling_weights = dangling # power iteration: make up to max_iter iterations for _ in range(max_iter): xlast = x x = dict.fromkeys(xlast.keys(), 0) danglesum = alpha * sum(xlast[n] for n in dangling_weights) for n in x: # this matrix multiply looks odd because it is # doing a left multiply x^T=xlast^T*W for nbr in G[n]: x[nbr] += alpha * xlast[n] * G[n][nbr].get(weight, 1) x[n] += danglesum * dangling_weights.get(n, 0) + (1.0 - alpha) * p.get(n, 0) # check convergence err = sum([abs(x[n] - xlast[n]) for n in x]) if err < N*tol: return x return x"},{"prompt":"Generate a Python function to calculate the area of a triangle given the three sides.","completion":"def triangle_area(side1, side2, side3): s = (side1 + side2 + side3) / 2 area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5 return area"},{"prompt":"Code a python function to combine two lists into a single list of tuples.","completion":"def combine_lists(list1, list2): combined_list = [(list1[i], list2[i]) for i in range(len(list1))] return combined_list"},{"prompt":"Generate an AI algorithm in Python to predict tomorrow's Bitcoin price given a dataset of today's prices. [8882.17, 8889.11, 8890.52, 8892.11, 8895.42, 8893.94, 8899.01]","completion":"import numpy as np import pandas as pd def bitcoinPricePrediction(data): # convert data to numpy array data = np.array(data) # define the model model = keras.Sequential([ keras.layers.Dense(64, activation='relu'), keras.layers.Dense(64, activation='relu'), keras.layers.Dense(64, activation='relu'), keras.layers.Dense(1)]) # compile and train the model model.compile(optimizer='adam', loss='mean_squared_error') model.fit(data, epochs=50, verbose=1) # predict the tomorrow's bitcoin price prediction = model.predict(data)[0][0] return prediction"},{"prompt":"Code a Python program that takes two integers and checks if they are coprime numbers. num1 = 34 num2 = 21","completion":"def is_coprime(num1, num2): while num1 != 0 and num2 != 0: if(num1 > num2): num1 %= num2 else: num2 %= num1 if(num1 == 0): gcd = num2 else: gcd = num1 if(gcd == 1): return True else: return False if __name__ == \\"__main__\\": num1 = 34 num2 = 21 result = is_coprime(num1, num2) print(result)"},{"prompt":"Compose a Python class that creates a list of unique elements in the input. ['a','b','b','c','a','c']","completion":"class ListUnique: def __init__(self,list1): # set up empty list self.list1 = [] # loop through input list for x in list1: # add element to list if it is not already in the list if x not in self.list1: self.list1.append(x) # returns the modified list def get_list(self): return self.list1 list1 = ['a','b','b','c','a','c'] # create instance of ListUnique lu = ListUnique(list1) # print the modified list print(lu.get_list()) # prints ['a', 'b', 'c']"},{"prompt":"Develop a code to sort the following Python dictionary by its values from low to high. students = { 'Jacob': 95.5, 'Leah': 91.8, 'Sebastian': 98.4, 'David': 95.1, 'Joseph': 90.4 }","completion":"def sort_dict_by_values(students): sorted_students = sorted(students, key=students.get) return [sorted_students, [students[key] for key in sorted_students]] print(sort_dict_by_values(students))"},{"prompt":"Construct a machine learning model in Python for predicting the prices of apartments in your city.","completion":"#Import Data import pandas as pd data = pd.read_csv(‘data.csv’) #Prepare Data X = data[['size', 'location', 'bedrooms']] y = data['price'] #Train Model from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(X,y) #Test Model test_X = [[1500, 'downtown', 3]] test_y = model.predict(test_X) print(test_y)"},{"prompt":"Generate a code to print the stack trace in Python when an exception occurs.","completion":"import traceback try: # some code that might generate exceptions pass except Exception as e: print(traceback.format_exc())"},{"prompt":"Create a Python program to read a list of strings and display the same strings in a reverse order. [Apple, Banana, Mango, Orange]","completion":"def reverse_strings(string_list): reversed_string_list = [] for string in string_list: reversed_string_list.insert(0, string) return reversed_string_list string_list = [\\"Apple\\", \\"Banana\\", \\"Mango\\", \\"Orange\\"] print(reverse_strings(string_list))"},{"prompt":"Devise an algorithm in Python to determine if a given number is even or odd.","completion":"def is_even(num): if num % 2 == 0: return True else: return False"},{"prompt":"Create a machine learning model to classify text documents into two different categories. Provide a sample dataset contains text from two different categories.","completion":"from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Sample dataset docs = [ \\"The sky is blue.\\", \\"Violets are red.\\", \\"I love programming.\\", \\"JavaScript is fun.\\" \\"Python is great!\\" ] labels = [0, 0, 1, 1, 1] # Create the vectorizer vectorizer = CountVectorizer() # Vectorize the documents X = vectorizer.fit_transform(docs).toarray() # Create a Naive Bayes model model = MultinomialNB() # Fit the model to the dataset model.fit(X, labels) # Make a prediction prediction = model.predict([X[3]]) # Print the prediction print(prediction) # prints [1]"},{"prompt":"Train a model to classify spam emails using Python.","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB # loading dataset df = pd.read_csv(\\"spam_classification.csv\\") # splitting dataset X = df[\\"Message\\"] y = df[\\"Label\\"] X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1) # creating a model model = MultinomialNB() model.fit(X_train, y_train) # evaluating the model score = model.score(X_test, y_test) print(\\"Model score: {}\\".format(score))"},{"prompt":"Design a web application in Django that fetches tweets with the #python hashtag. Not applicable","completion":"import os import tweepy from django.shortcuts import render # Create your views here. def index(request): consumer_key = os.environ['TWITTER_CONSUMER_KEY'] consumer_secret = os.environ['TWITTER_CONSUMER_SECRET'] access_key = os.environ['TWITTER_ACCESS_KEY'] access_secret = os.environ['TWITTER_ACCESS_SECRET'] auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_key, access_secret) api = tweepy.API(auth) hashtags = [\\"#python\\"] tweets = api.search(q=hashtags, lang='en') args = {'tweets': tweets} return render(request, 'index.html', args)"},{"prompt":"Design an objectoriented program in Python for playing a game of tictactoe. No Inpu","completion":"class Game: def __init__(self): self.board = [[\\"-\\", \\"-\\", \\"-\\"], [\\"-\\", \\"-\\", \\"-\\"], [\\"-\\", \\"-\\", \\"-\\"]] self.current_player = \\"X\\" def display_board(self): for i in range(len(self.board)): for j in range(len(self.board[i])): print(self.board[i][j], end=\\" \\") print() def move(self, current_player, row, col): if self.board[row][col] == \\"-\\": self.board[row][col] = current_player else: print(\\"invalid move, row and col has already been taken\\") def check_winner(self): winner = None for row in self.board: if row[0] == row[1] == row[2]: winner = row[0] break for col in range(len(self.board[0])): if self.board[0][col] == self.board[1][col] == self.board[2][col]: winner = self.board[0][col] break if self.board[0][0] == self.board[1][1] == self.board[2][2]: winner = self.board[0][0] if self.board[0][2] == self.board[1][1] == self.board[2][0]: winner = self.board[0][2] if winner == None: return False else: return winner"},{"prompt":"mplement an algorithm in Python to reverse a given string.","completion":"def reverse_string(string): return string[::-1]"},{"prompt":"Compare two strings using Python and output the similarity score between them. String 1: hello world String 2: hey world","completion":"import difflib def compare_strings(str1, str2): score = difflib.SequenceMatcher(None, str1, str2).ratio() print(\\"Similarity score is:\\", score) compare_strings(\\"hello world\\", \\"hey world\\") # Output: Similarity score is: 0.909"},{"prompt":"Write a function in Python to create a dictionary from two lists, one of keys and the other one of values. keys = [1,2,3] values = ['a','b','c']","completion":"def createDict(keys, values): dict = {} for i in range(len(keys)): dict[keys[i]] = values[i] return dict"},{"prompt":"Creat a Python program to find the sum of the digits of an arbitrary number. 345","completion":"def sum_of_digits(num): total = 0 while num > 0: total += num % 10 num = num // 10 return total total = sum_of_digits(345) print(f'Sum of the digits of the number is {total}')"},{"prompt":"Write a Python function that takes a list of integers as an argument and returns a list of the squares of all the elements in the input list. [1, 2, 3, 4, 5]","completion":"def squareList(inputList): # Returns a list of the squares of all the elements in inputList squaredList = [] for num in inputList: squaredList.append(num ** 2) return squaredList # Example inputList = [1, 2, 3, 4, 5] squaredList = squareList(inputList) print(squaredList) # Output: [1, 4, 9, 16, 25]"},{"prompt":"Write a Python script to parse a JSON string and convert it into a dictionary. '{name: GPT, type: AI}'","completion":"import json json_str = '{\\"name\\": \\"GPT\\", \\"type\\": \\"AI\\"}' dict_x = json.loads(json_str) print(dict_x)"},{"prompt":"Come up with a solution to parse an HTML document using Python.","completion":"Using the BeautifulSoup library in Python, we can parse an HTML document. First, we need to import the BeautifulSoup module: from bs4 import BeautifulSoup Then, we can create a BeautifulSoup object with the contents of the HTML document: soup = BeautifulSoup(html, 'html.parser') We can then use various methods provided by the library to parse the document, such as find(), findAll(), select() etc. For example, soup.find('div') will return the first <div> element in the document."},{"prompt":"Write an API endpoint in Python which takes a JSON object as an input and returns a modified version of the same object. {name: John, age: 30}","completion":"@app.route('/api', methods=['POST']) def api(): data = request.get_json() data['age'] = data['age'] + 2 return jsonify(data)"},{"prompt":"Write a python program that sorts the list using insertion sort algorithm. unsorted_list = [10, 2, 6, 8, 5, 4, 9, 7, 3, 1]","completion":"def insertion_sort(input_list): # creating a copy of input list so that the original list is not modified sorted_list = input_list.copy() # Iterating through input list and inserting elements in the right place in the sorted list for i in range(1, len(sorted_list)): j = i-1 key = sorted_list[i] while sorted_list[j] > key and j >= 0: sorted_list[j+1] = sorted_list[j] j -= 1 sorted_list[j+1] = key return sorted_list sorted_list = insertion_sort(unsorted_list)"},{"prompt":"Create an algorithm in Python to separate numbers below 10 and above 5. array = [4, 7, 10, 8, 12, 6]","completion":"below_ten = [] # Separated numbers above_five = [] # Separated numbers # Iterate over array for n in array: if n > 5: above_five.append(n) else: below_ten.append(n) # Print results print(\\"Below 10: \\", below_ten) print(\\"Above 5: \\", above_five)"},{"prompt":"Write a Python function to check if a given list contains any duplicate elements.","completion":"def check_duplicates(A): seen = set() for elem in A: if elem in seen: return True seen.add(elem) return False"},{"prompt":"Make a Python program that reads a 3x3 matrix and prints the sum of all elements. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] total = 0 for i in range(len(matrix)): for j in range(len(matrix[i])): total += matrix[i][j] print(total)"},{"prompt":"Can you create a Python script to extract email addresses from a raw text? John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com","completion":"import re text = \\"John Doe john@example.com, Jane Doe jane@example.com, Kevin Smith kevin@example.com\\" emails = re.findall(r\\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\", text) print(emails) # ['john@example.com', 'jane@example.com', 'kevin@example.com']"},{"prompt":"Write a class in Python that will allow users to input their name and will return different sentences depending on the length of the name.","completion":"class NameGame: def __init__(self, name): self.name = name def play_game(self): if len(self.name) == 0: return \\"Are you playing games with me ?\\" elif len(self.name) == 1: return \\"Is that all you are ?\\" elif len(self.name) == 2: return \\"That's quite a name !\\" else: return \\"What an interesting name !\\""},{"prompt":"Create a basic Twitter bot using Python and Tweepy for publishing tweets. Not applicable","completion":"import tweepy # authentication consumer_key = 'YOUR_CONSUMER_KEY' consumer_secret = 'YOUR_CONSUMER_SECRET' access_token = 'YOUR_ACCESS_TOKEN' access_token_secret = 'YOUR_ACCESS_TOKEN_SECRET' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) # Tweeting text = 'Hello, world!' api.update_status(text)"},{"prompt":"mplement a queue data structure in python","completion":"class Queue(object): def __init__(self): self.queue = [] def enqueue(self, item): self.queue.insert(0, item) def dequeue(self): if len(self.queue)>0: return self.queue.pop() else: return None def size(self): return len(self.queue)"},{"prompt":"Generate a program in Python to compare two strings and output true if one string is a permutation of another. String 1: abc String 2: cb","completion":"def is_permutation(str1, str2): if len(str1) != len(str2): return False else: dict_str1 = {} dict_str2 = {} for i in range(len(str1)): if str1[i] not in dict_str1: dict_str1[str1[i]] = 1 else: dict_str1[str1[i]] += 1 if str2[i] not in dict_str2: dict_str2[str2[i]] = 1 else: dict_str2[str2[i]] += 1 return dict_str1 == dict_str2 print(is_permutation(str1, str2))"},{"prompt":"Use the NumPy library to generate a 3x3 identity matrix in Python. Not applicable","completion":"import numpy as np identity_matrix = np.identity(3) print(identity_matrix)"},{"prompt":"Develop an algorithm in Python, that prints out the Fibonacci sequence up to the number N.","completion":"def Fibonacci(n): a, b = 0, 1 while a < n: print(a, end = ' ') a, b = b, a + b print() n = 10 Fibonacci(n) Output: 0 1 1 2 3 5 8"},{"prompt":"Gather the information about all Python library released by the Mozilla foundation","completion":"The Mozilla Foundation has released multiple open source Python libraries over the years. Some of these libraries include mozmill, an automation tool for web application testing; Mozbase, a set of base libraries for Firefox-related testing; Mozhttpserver, a library for testing HTTP servers; and Mozilla Telemetry, a library for gathering large amounts of data from users. These libraries can be found on their GitHub page."},{"prompt":"Configure a webserver in Python using Flask.","completion":"from flask import Flask app = Flask(__name__) @app.route(\\"/\\") def hello(): return \\"Hello World!\\" app.run()"},{"prompt":"Create a graphical user interface using Tkinter in Python that allows the user to input numbers and calculate the sum.","completion":"# Create the window window = tk.Tk() # Create two entry fields in the window entry1 = tk.Entry(window) entry2 = tk.Entry(window) # Create a function to get inputs from the entry fields and calculate sum def get_sum(): num1 = entry1.get() num2 = entry2.get() sum = int(num1) + int(num2) label.config(text=\\"Sum is \\" + str(sum)) # Create a button to execute the function button = tk.Button(window, text=\\"Calculate\\", command=get_sum) # Create a label to display the result label = tk.Label(window) # Pack all widgets entry1.pack() entry2.pack() button.pack() label.pack() # Main loop window.mainloop()"},{"prompt":"Compute the product of two matrices using Python. Matrix A: [2 3] [4 7] Matrix B: [6 5] [1 4]","completion":"# Matrix multiplication in Python matrix_A = [[2, 3], [4, 7]] matrix_B = [[6, 5], [1, 4]] # result matrix result = [[0, 0], [0, 0]] # iterating by row of Matrix A for i in range(len(matrix_A)): # iterating by coloum of Matrix B for j in range(len(matrix_B[0])): # iterating by rows of Matrix B for k in range(len(matrix_B)): result[i][j] += matrix_A[i][k] * matrix_B[k][j] for r in result: print(r)"},{"prompt":"Develop a Python Program to determine if two given strings are an anagram or not. string1 = abcd string2 = cbad","completion":"def is_anagram(string1, string2): # check if strings have equal length if len(string1) != len(string2): return False sorted1 = sorted(string1); sorted2 = sorted(string2); # check if sorted strings are the same if sorted1 == sorted2: return True return False"},{"prompt":"Develop a Python script to extract the specific keyword from the given URL. URL: https://www.test.com/whereisthekey Keyword: key","completion":"import re url = \\"https://www.test.com/where-is-the-key\\" keyword = \\"key\\" match = re.search(f'{keyword}', url) if match: print(f'{keyword} found at starting index: {match.start()}') else: print(f'{keyword} not found')"},{"prompt":"Optimize an existing Bitcoin mining algorithm written in Python to use multiple threads so the program runs faster. import threading import time def mining(difficulty, start): nonce = start # Main mining loop while True: hash = generate_hash(nonce) # Check if the hash meets the difficulty if hash[:difficulty] == '0' * difficulty: print('Hash found!') return nonce nonce = nonce + 1","completion":"import threading import time def mining(difficulty, start): threads = [] nonce = start # Create threads for _ in range(10): t = threading.Thread(target=mining_thread, args=(difficulty, nonce)) threads.append(t) nonce = nonce + 100 # Start threads for thread in threads: thread.start() # Join threads for thread in threads: thread.join() # Main mining loop def mining_thread(difficulty, start): nonce = start while True: hash = generate_hash(nonce) # Check if the hash meets the difficulty if hash[:difficulty] == '0' * difficulty: print('Hash found!') return nonce nonce = nonce + 1"},{"prompt":"Provide an algorithm in Python to merge two sorted arrays into a single sorted array. [3, 8, 11] and [1, 4, 9]","completion":"def merge_arrays(arr1, arr2): merged_arr = [] # Make copies of arrays arr1_copy = arr1[:] arr2_copy = arr2[:] # add elements from both array in sorted order while arr1_copy and arr2_copy: if arr1_copy[0] <= arr2_copy[0]: merged_arr.append(arr1_copy.pop(0)) else: merged_arr.append(arr2_copy.pop(0)) # add remaining elements of array if arr1_copy: merged_arr.extend(arr1_copy) else: merged_arr.extend(arr2_copy) # return merged array return merged_arr arr1 = [3, 8, 11] arr2 = [1, 4, 9] print(merge_arrays(arr1, arr2))"},{"prompt":"Create a Python script that takes an array with n elements and shuffles it. n = 10","completion":"import random def shuffle(lst): random.shuffle(lst) return lst arr = [i for i in range(10)] print(shuffle(arr))"},{"prompt":"Write a Python class that implements a binary search tree. It should have methods for adding nodes to the tree, searching the tree, and obtaining the size of the tree. Not applicable","completion":"class BinarySearchTree: def __init__(self): self.root = None def add_node(self, value): if not self.root: self.root = Node(value) else: self._add_node(self.root, value) def _add_node(self, node, value): if value <= node.value: if node.left: self._add_node(node.left, value) else: node.left = Node(value) else: if node.right: self._add_node(node.right, value) else: node.right = Node(value) def search(self, value): return self._search(self.root, value) def _search(self, node, value): if node is None: return False if node.value == value: return True else: if value <= node.value: return self._search(node.left, value) else: return self._search(node.right, value) def get_size(self): return self._get_size(self.root) def _get_size(self, node): if not node: return 0 return self._get_size(node.left) + 1 + self._get_size(node.right)"},{"prompt":"Given a list of strings, write a Python program to sort the strings according to the length of each string. strings = ['abc', 'def', 'ghi', 'jkl', 'mno']","completion":"def sort_strings_by_length(strings): return sorted(strings, key=len)"},{"prompt":"Write a Python program to construct a spam filter using Naïve Bayes. Not applicable","completion":"from sklearn.naive_bayes import MultinomialNB import pandas as pd # Read the data into a dataframe df = pd.read_csv('spam.csv', header=None) #Split data into features and target X = df[df.columns[:-1]] y = df[df.columns[-1]] # Create a multinomial naive bayes classifier model = MultinomialNB() #Train the model model.fit(X,y) # Use the trained model to predict the class for the new data predicted_classes = model.predict(X) # Calculate the accuracy of the model print(\\"Accuracy:\\", model.score(X,y))"},{"prompt":"Design an algorithm in Python that checks if a given number is even or odd.","completion":"def is_even(n): if n % 2 == 0: return True else: return False"},{"prompt":"Create a textbased adventure game in Python Not applicable","completion":"import textwrap class TextGame(object): def __init__(self): self.level = 1 self.is_playing = True def start_game(self): self.print_intro() while self.is_playing: self.level_one() def print_intro(self): # Introduction text intro = textwrap.dedent(''' You awaken in a strange place, and it seems you have no memory of how you got there. You can feel cold dampness of the stone walls and ground beneath your feet. It appears to be a dungeon of some sort. You can see a light ahead. You decide to move towards it. ''') print(intro) def level_one(self): # Level one text level_one = textwrap.dedent(''' As you make your way towards the light, you come across a fork in the path. You hear a soft whisper coming from the left path. ''') print(level_one) action = raw_input('''Do you choose to take the left or right path? ''') if action.upper() == \\"LEFT\\": self.level_two_left() elif action.upper() == \\"RIGHT\\": self.level_two_right() else: self.level_one() def level_two_left(self): # Level two left text level_two_left = textwrap.dedent(''' The whisper gets louder as you take the left path. Eventually, you reach a small room. In the center of the room is a hooded figure standing in front of a pedestal. There is a strange looking artifact on the pedestal. ''') print(level_two_left) action = raw_input('''Do you 'approach' the figure or 'flee'? ''') if action.upper() == \\"APPROACH\\": print(\\"You approach the figure and it removes its hood to reveal a face you recognize\\") elif action.upper() == \\"FLEE\\": print(\\"You turn and run, taking the right path\\") self.level_two_right() else: self.level_two_left() # Create instance and start the game. game = TextGame() game.start_game()"},{"prompt":"Write a function in Python that takes an input list, multiplies each item in the list by two, and returns the resulting list.","completion":"def double_list(lst): return [x * 2 for x in lst]"},{"prompt":"Write a python program to which given a list of numbers, will calculate the mean value","completion":"def mean(nums): total = 0 for num in nums: total += num # Return the mean by dividing by the number of elements return total / len(nums)"},{"prompt":"Write a Python program to sort the values of a dictionary by its keys in alphabetical order. dictionary = {c: 3, a: 1, b: 2}","completion":"def sort_dictionary_by_keys(dictionary): result = {} for key in sorted(dictionary.keys()): result[key] = dictionary[key] return result dictionary = {\\"c\\": 3, \\"a\\": 1, \\"b\\": 2} sorted_dictionary = sort_dictionary_by_keys(dictionary) print(sorted_dictionary)"},{"prompt":"Create a Tic Tac Toe game in Python.","completion":"# define the game board board = [\\"_\\" for i in range(9)] # define the player and computer symbols player = \\"X\\" computer = \\"O\\" def display_board(): row1 = \\"| {} | {} | {} |\\".format(board[0], board[1], board[2]) row2 = \\"| {} | {} | {} |\\".format(board[3], board[4], board[5]) row3 = \\"| {} | {} | {} |\\".format(board[6], board[7], board[8]) print() print(row1) print(row2) print(row3) print() # check for a win def check_win(): # check rows row1 = board[0] == board[1] == board[2] != \\"_\\" row2 = board[3] == board[4] == board[5] != \\"_\\" row3 = board[6] == board[7] == board[8] != \\"_\\" # if any row does have a match, flag that there is a win if row1 or row2 or row3: game_over = True # check columns col1 = board[0] == board[3] == board[6] != \\"_\\" col2 = board[1] == board[4] == board[7] != \\"_\\" col3 = board[2] == board[5] == board[8] != \\"_\\" # if any column does have a match, flag that there is a win if col1 or col2 or col3: game_over = True # check diagonals diag1 = board[0] == board[4] == board[8] != \\"_\\" diag2 = board[2] == board[4] == board[6] != \\"_\\" # if any diagonal does have a match, flag that there is a win if diag1 or diag2: game_over = True # if any condition is true, there is a win if row1 or row2 or row3 or col1 or col2 or col3 or diag1 or diag2: winner = player else: game_over = False return game_over, winner # play the game while True: # display the game board display_board() # get player input while True: try: player_choice = int(input(\\"Pick a number between 1-9: \\")) if player_choice >= 1 and player_choice <= 9: if board[player_choice - 1] == \\"_\\": board[player_choice - 1] = player break else: print(\\"Sorry, please try again\\") except: print(\\"Sorry, please try again\\") # check for a win game_over, winner = check_win() if game_over: display_board() print(\\"Congratulations! You win! \\") break # check for a tie if \\"_\\" not in board: print(\\"It's a tie\\") break"},{"prompt":"Design a program in Python that takes a list of strings and returns a list containing the length of each of the strings. ['hello', 'world']","completion":"def string_lengths(arr): lengths = [len(s) for s in arr] return lengths result = string_lengths(['hello', 'world']) print(result)"},{"prompt":"Write a Python script that takes as input a list of random numbers and returns only the even numbers from the list A list of 20 random numbers: [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59]","completion":"\\"\\"\\"Generate a python script that takes a list of random numbers as input and return only the even numbers from the list\\"\\"\\" # Take a list as input lst = [1,6, 3,2 ,8,7, 0, 4, 9, 11, 22, 18, 33, 28, 26, 55, 49, 37, 63, 59] # Create a new list that will contain only the even numbers from the input list even_numbers = [] # Iterate through input list and append only even numbers to the new list for num in lst: if num % 2 == 0: even_numbers.append(num) # Print out the new list containing only even numbers print(even_numbers)"},{"prompt":"Generate a Python function that takes an matrix as input and raises each element of it to the power of 3. [[1,2,3], [4,5,6], [7,8,9]]","completion":"def power_of_3(matrix): for i in range(len(matrix)): for j in range(len(matrix[0])): matrix[i][j] = matrix[i][j] ** 3 return matrix"},{"prompt":"Create a Python program to find the total number of elements in a stack. Stack: [1, 2, 3, 4, 5]","completion":"def findNumOfElements(stack): return len(stack)"},{"prompt":"Write a Python program to create a dataframe from a given dictionary of lists. data = { 'name': ['John', 'Mark', 'Tom'], 'age': [21, 18, 20] }","completion":"import pandas as pd data_df = pd.DataFrame(data) print(data_df)"},{"prompt":"Generate a Python program to output the most frequently occurring word in a given string. sentence = Code Generation is an important task in the AI research","completion":"import collections def most_frequent_word(string): counts = collections.Counter(string.split()) max_count = max(counts.values()) most_frequent = [word for word, count in counts.items() if count == max_count] print(most_frequent) if __name__ == \\"__main__\\": sentence = \\"Code Generation is an important task in the AI research\\" most_frequent_word(sentence) # Output # ['Generation']"},{"prompt":"Construct a function in Python to calculate the volume of a sphere.","completion":"def sphere_volume(radius): return (4/3) * 3.14 * (radius*radius*radius) # Program to test above function radius = 3 volume = sphere_volume(radius) print(\\"Volume of a sphere with radius %d = %.2f\\" %(radius, volume))"},{"prompt":"Generate a python program to find the shortest path between two given nodes","completion":"def find_path(start, end, graph): # Initialize an empty list to store path path = [] # Initialize a queue with start node q = [start] # Initialize a visited list visited = set() # Iterate until we get to the end node while q: node = q.pop(0) if node == end: path.append(node) return path elif node not in visited: visited.add(node) for neighbour in graph[node]: q.append(neighbour) path.append(node) return path"},{"prompt":"Write a python program to clean up a string by removing punctuation, nonalphanumeric regions or converting to lowercase. example_string = This in't a siMPle StrinG","completion":"import string example_string = \\"This in't a siMPle StrinG\\" new_string = example_string.translate(str.maketrans('', '', string.punctuation)).replace(' ', '').lower() print(new_string) Output: thisisntasimplestring"},{"prompt":"Generate a Python code to calculate the value of the nth Fibonacci number. 6","completion":"def fib(n): if n == 0: return 0 elif n == 1: return 1 else: return fib(n-1) + fib(n-2) print(\\"The requested Fibonacci number is: \\" + str(fib(6)))"},{"prompt":"Build a Python script for deleting all characters from a string string = Hello world!","completion":"newString = string.replace(\\"\\", \\"\\") print(newString)"},{"prompt":"Create a Python function that takes the words in the string and returns the frequency of each word.","completion":"def count_words(string): words = string.split() count_words = {} for word in words: if word in count_words: count_words[word] += 1 else: count_words[word] = 1 return count_words"},{"prompt":"Write a machine learning model in Python to detect the sentiment of a text document. The text document is This movie was horrible and I never want to watch it again.","completion":"def sentiment_model(text): pred = model.predict([text]) if pred == 0: sentiment = 'Positive' elif pred == 1: sentiment = 'Negative' return sentiment sentiment = sentiment_model(\\"This movie was horrible and I never want to watch it again.\\") print(sentiment) # Output: Negative"},{"prompt":"Write a Python program to generate an SQL query from a given set of parameters. Table Name: users Fields: id, name, age Filter: age > 18","completion":"def generate_sql_query(table_name, fields, filter_clause): query = \\"SELECT \\" for i in range(len(fields)-1): query += fields[i] + \\", \\" query += fields[-1] query += \\" FROM \\" + table_name + \\" WHERE \\" + filter_clause return query"},{"prompt":"Create a Python script to generate a random 4digit number (from 10009999) and display it on the screen. Not applicable","completion":"import random print(random.randint(1000,9999))"},{"prompt":"Define a Python class to model an appointment.","completion":"class Appointment: def __init__(self, title, time, location): self.title = title self.time = time self.location = location def get_title(self): return self.title def get_time(self): return self.time def get_location(self): return self.location"},{"prompt":"Automate the process of pulling data from a website using Python. Website URL: http://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = 'http://www.example.com' # Use requests to get website HTML resp = requests.get(url) # Parse the HTML using BeautifulSoup soup = BeautifulSoup(resp.text, 'lxml') # Extract data from HTML data = [] for item in soup.find_all('div'): data.append(item.text) # Print the data for d in data: print(d)"},{"prompt":"Create a Google Cloud Function in Python to parse an incoming JSON object and extract its values Not applicable","completion":"import json def parse_json_object(request): # Parse the incoming JSON object data = json.loads(request.data) # Extract the values param1 = data['param1'] param2 = data['param2'] return 'Parameters extracted: param1={}, param2={}'.format(param1,param2)"},{"prompt":"Write a function in Python that takes two arrays of the same size and performs elementwise addition. arr1 = [1, 2, 3] arr2 = [3, 4, 5]","completion":"def add_arrays(arr1, arr2): if len(arr1) != len(arr2): raise Exception(\\"Arrays are not of the same size!\\") return [x + y for x, y in zip(arr1, arr2)] add_arrays(arr1, arr2) # [4, 6, 8]"},{"prompt":"Create a Python program to retrieve and list all the books in a given category in an online book store. Category = Computer Science","completion":"# define category variable category = \\"Computer Science\\" # import JSON library for retrieving the data import json # import HTTP library for fetching the data import urllib.request # create the target url url = \\"https://www.example.com/books/category/\\" + category # fetch the data response = urllib.request.urlopen(url) # read the data data = json.loads(response.read()) # print the books for book in data: print(book['title'])"},{"prompt":"Create a class in Python that manages a student database. It should have several methods including one to add a new student into the database, one to delete a student from the database, and one to update the student's information in the database. Not applicable","completion":"import sqlite3 class StudentDatabase: def __init__(self, db): self.conn = sqlite3.connect(db) self.cur = self.conn.cursor() self.cur.execute(\\"CREATE TABLE IF NOT EXISTS students (id INTEGER PRIMARY KEY, name TEXT, email TEXT, age INTEGER)\\") self.conn.commit() def add_student(self, name, email, age): self.cur.execute(\\"INSERT INTO students VALUES (NULL, ?, ?, ?)\\", (name, email, age)) self.conn.commit() def delete_student(self, id): self.cur.execute(\\"DELETE FROM students WHERE id=?\\", (id,)) self.conn.commit() def update_student(self, id, name, email, age): self.cur.execute(\\"UPDATE students SET name=?, email=?, age=? WHERE id=?\\", (name, email, age, id)) self.conn.commit() def list_students(self): self.cur.execute(\\"SELECT * FROM students\\") rows = self.cur.fetchall() return rows def main(): db = StudentDatabase('students.db') db.add_student('John Doe', 'john@doe.com', 30) db.add_student('Adam Smith', 'adam@smith.com', 25) db.delete_student(2) db.update_student(1, 'John Smith', 'john@smith.com', 40) print(db.list_students()) if __name__ == '__main__': main()"},{"prompt":"Write a Python program to delete a node from a linked list head = 5 > 2 > 1 > 4 > 3","completion":"# Node class class Node: # Function to initialize the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class class LinkedList: # Function to initialize the Linked # List object def __init__(self): self.head = None # Deletes the node at position n def deleteNode(self, position): # If linked list is empty if self.head == None: return # Store headnode temp = self.head # If head needs to be removed if position == 0: self.head = temp.next temp = None return # Find previous node of the node to be deleted for i in range(position-1): temp = temp.next if temp is None: break # If position is more than number of nodes if temp is None: return if temp.next is None: return # Node temp.next is the node to be deleted # store pointer to the next of node to be deleted next = temp.next.next # Unlink the node from linked list temp.next = None temp.next = next"},{"prompt":"Create a Python script to format a string containing email addresses. The script should remove special characters and extra spaces, and format the email addresses according to their domain. List of email addresses with special characters [ Mike@example.co m , Jane#gmail.com, Mason*yahoo.com]","completion":"import re emails = [ \\"Mike@example.co m\\" , \\"Jane#gmail.com\\", \\"Mason*yahoo.com\\"] result = [] for email in emails: email = re.sub('[^A-Za-z0-9@.+-_]', '', email) email = email.replace(' ', '') if 'gmail' in email: email = email.replace('gmail', 'google') elif 'yahoo' in email: email = email.replace('yahoo', 'ymail') result.append(email) print(result)"},{"prompt":"Create a function in Python to extract all words from a sentence that are greater than 3 chars in length. This is a sample sentence","completion":"def extract_long_words(s): words = s.split() filtered = [w for w in words if len(w) > 3] return filtered"},{"prompt":"Create a Python function to remove all the characters of a specified string that appear more than once.","completion":"def remove_duplicates(string): result = \\"\\" for char in string: if string.count(char) == 1: result += char return result"},{"prompt":"Create an optimized sorting alogirthm in Python. unsorted_list = [5, 2, 3, 1, 4]","completion":"def optimized_sort(unsorted_list): length = len(unsorted_list) for i in range(length): min_index = i for j in range(i+1, length): if unsorted_list[j] < unsorted_list[min_index]: min_index = j unsorted_list[i], unsorted_list[min_index] = unsorted_list[min_index], unsorted_list[i] return unsorted_list sorted_list = optimized_sort(unsorted_list) print(sorted_list)"},{"prompt":"Create a Python program to compute the primes between 1 and n n = 15","completion":"import math def primes(n): if n < 2: return [] size = int(math.sqrt(n)) + 1 sieve = bytearray([True]) * size for i in range(2, size): if sieve[i]: for j in range(i*i, size, i): sieve[j] = False primes = [i for i in range(2, size) if sieve[i]] return [p for p in primes if p <= n] if __name__ == '__main__': n = 15 print(primes(n)) # Output: [2, 3, 5, 7, 11, 13]"},{"prompt":"Create a function in Python that takes a string, removes all nonalphanumeric characters, and prints the result to console. Not applicable","completion":"def clean_string(s): clean_s = ''.join(c for c in s if c.isalnum()) print(clean_s)"},{"prompt":"Develop an algorithm in Python to generate a Fibonacci series up to the nth value. n = 10","completion":"# Program to generate a Fibonacci series using an algorithm # function to generate Fibonacci series def generate_fibonacci_series(n): a, b = 0, 1 result = [] while b < n: result.append(b) a, b = b, a + b return result # Driver code n = 10 result = generate_fibonacci_series(n) print(\\"The Fibonacci number up to\\", n, \\"is\\", result)"},{"prompt":"Develop a program to implement a linear search in Python. [7, 3, 10, 13, 6], 3","completion":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 arr = [7, -3, 10, 13, -6] target = -3 print(\\"Index of\\", target, \\" is \\", linear_search(arr, target)) # 1"},{"prompt":"Write a Python script that will take an array of numbers and output the distinct elements. [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9]","completion":"my_list = [1, 1, 3, 4, 5, 6, 6, 7, 8, 9, 9] new_list = [] for item in my_list: if item not in new_list: new_list.append(item) print(new_list) # Output: [1, 3, 4, 5, 6, 7, 8, 9]"},{"prompt":"Design a function in Python that takes in a list and returns its reverse. [1, 2, 3, 4]","completion":"def reverse_list(list): return list[::-1] result = reverse_list([1,2,3,4]) print(result)"},{"prompt":"Create a class in Python that models a contact with details such as singlename, lastname, email, address, and phone number.","completion":"class Contact: def __init__(self, single_name, last_name, email, address, phone_number): \\"\\"\\" This is the constructor for the contact class. \\"\\"\\" self.single_name = single_name self.last_name = last_name self.email = email self.address = address self.phone_number = phone_number def get_full_name(self): \\"\\"\\" This method returns the full name of the contact. \\"\\"\\" return self.last_name + \\", \\" + self.single_name def get_email(self): \\"\\"\\" This method returns the email of the contact. \\"\\"\\" return self.email def get_address(self): \\"\\"\\" This method returns the address of the contact. \\"\\"\\" return self.address def get_phone_number(self): \\"\\"\\" This method returns the phone number of the contact. \\"\\"\\" return self.phone_number"},{"prompt":"mplement a function in Python that takes as input an integer and prints out the Fibonacci sequence up to the entered value. 10","completion":"def fibonacci(n): arr = [0, 1] for i in range(2, n+1): arr.append(arr[i-2] + arr[i-1]) return arr[:n+1] print(fibonacci(10))"},{"prompt":"Write code in Python to define a class to represent a linked list node. The class should have a data property, a pointer to the next node, and a 'add' method to append a node to the list. Not applicable","completion":"class Node: def __init__(self, data): self.data = data self.next = None def add(self, new_node): self.next = new_node"},{"prompt":"Create a Python script to generate a n by n multiplication table. 3","completion":"# Function to generate multiplication table def multiplication_table(n): # set the initial value and iters num = 1 iters = n + 1 # outer loop for i in range(1, iters): # inner loop for j in range(1, iters): # print statement print(num, end = \\" \\") num = num + 1 print() # Driver code n = 3 multiplication_table(n)"},{"prompt":"Create a web crawler in Python to automatically scrape data from a given web page. url = http://www.example.com","completion":"import requests from bs4 import BeautifulSoup # URL to be scraped url = \\"http://www.example.com\\" # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Scrape data from the HTML using beautiful soup data = soup.find_all('p') # Print the scraped data for item in data: print(item.text)"},{"prompt":"Write a code snippet in Python to print out the contents of a given dictionary. {apple: 1, banana: 2, carrot: 3}","completion":"dictionary = {\\"apple\\": 1, \\"banana\\": 2, \\"carrot\\": 3} for item in dictionary: print(\\"{}: {}\\".format(item, dictionary[item]))"},{"prompt":"This code defines an abstract class called \`Domain\` that represents an abstract domain. The class has various attributes and methods, including \`from_expr\`, \`to_expr\`, \`convert_from\`, \`convert\`, \`unify\`, \`poly_ring\`, and \`frac_field\`. To use this class, create a subclass and implement the abstract methods \`from_expr\` and \`to_expr\`. You can also use the \`convert\` method to convert elements to the domain, and the \`unify\` method to construct a minimal domain that contains elements of two given domains. The \`poly_ring\` and \`frac_field\` methods can be used to create polynomial rings and fraction fields, respectively.","completion":"\\"\\"\\"Implementation of :class:\`Domain\` class.\\"\\"\\" import abc import inspect from ..core import Expr from ..core.compatibility import HAS_GMPY from ..polys.orderings import lex from ..polys.polyerrors import CoercionFailed, UnificationFailed from ..polys.polyutils import _unify_gens from ..printing.defaults import DefaultPrinting from .domainelement import DomainElement class Domain(DefaultPrinting, abc.ABC): \\"\\"\\"Represents an abstract domain.\\"\\"\\" is_Ring = False is_Field = False has_assoc_Ring = False is_FiniteField = False is_IntegerRing = False is_RationalField = False is_RealField = False is_ComplexField = False is_AlgebraicField = False is_RealAlgebraicField = False is_ComplexAlgebraicField = False is_PolynomialRing = False is_FractionField = False is_ExpressionDomain = False is_Exact = True is_Numerical = False def __hash__(self): return hash((self.__class__.__name__, self.dtype)) def __call__(self, *args): \\"\\"\\"Construct an element of \`\`self\`\` domain from \`\`args\`\`.\\"\\"\\" return self.dtype(*args) def __getstate__(self): return {} @abc.abstractmethod def from_expr(self, expr): \\"\\"\\"Convert Diofant's expression \`\`expr\`\` to \`\`dtype\`\`.\\"\\"\\" raise NotImplementedError @abc.abstractmethod def to_expr(self, element): \\"\\"\\"Convert domain \`\`element\`\` to Diofant expression.\\"\\"\\" raise NotImplementedError def convert_from(self, element, base): \\"\\"\\"Convert \`\`element\`\` to \`\`self.dtype\`\` given the base domain.\\"\\"\\" for superclass in inspect.getmro(base.__class__): method = '_from_' + superclass.__name__ convert = getattr(self, method, None) if convert: result = convert(element, base) if result is not None: return result raise CoercionFailed(f\\"can't convert {element} of type {type(element)} \\" f'from {base} to {self}') def convert(self, element, base=None): \\"\\"\\"Convert \`\`element\`\` to \`\`self.dtype\`\`.\\"\\"\\" if base is not None: return self.convert_from(element, base) if isinstance(element, self.dtype): return element from . import ComplexField, PythonRational, RealField from .expressiondomain import ExpressionDomain from .integerring import GMPYIntegerRing, PythonIntegerRing from .rationalfield import GMPYRationalField, PythonRationalField if isinstance(element, int): return self.convert_from(element, PythonIntegerRing()) if isinstance(element, PythonRational): return self.convert_from(element, PythonRationalField()) if HAS_GMPY: integers = GMPYIntegerRing() if isinstance(element, integers.dtype): return self.convert_from(element, integers) rationals = GMPYRationalField() if isinstance(element, rationals.dtype): return self.convert_from(element, rationals) if isinstance(element, float): parent = RealField(tol=False) return self.convert_from(parent(element), parent) if isinstance(element, complex): parent = ComplexField(tol=False) return self.convert_from(parent(element), parent) if isinstance(element, DomainElement): return self.convert_from(element, element.parent) if isinstance(element, ExpressionDomain.Expression): return self.convert_from(element, ExpressionDomain()) if isinstance(element, Expr): try: return self.from_expr(element) except (TypeError, ValueError): pass raise CoercionFailed(f\\"can't convert {element} of type {type(element)} to {self}\\") def __contains__(self, a): \\"\\"\\"Check if \`\`a\`\` belongs to this domain.\\"\\"\\" try: self.convert(a) return True except CoercionFailed: return False def _from_PolynomialRing(self, a, K0): if a.is_ground: return self.convert(a.LC, K0.domain) def _from_FractionField(self, a, K0): if a.numerator.is_ground and a.denominator == 1: return self.convert(a.numerator.LC, K0.domain.ring) def unify(self, K1, symbols=()): \\"\\"\\" Construct a minimal domain that contains elements of \`\`self\`\` and \`\`K1\`\`. Known domains (from smallest to largest): - \`\`GF(p)\`\` - \`\`ZZ\`\` - \`\`QQ\`\` - \`\`RR(prec, tol)\`\` - \`\`CC(prec, tol)\`\` - \`\`ALG(a, b, c)\`\` - \`\`K[x, y, z]\`\` - \`\`K(x, y, z)\`\` - \`\`EX\`\` \\"\\"\\" from .compositedomain import CompositeDomain if symbols: if any(isinstance(d, CompositeDomain) and (set(d.symbols) & set(symbols)) for d in [self, K1]): raise UnificationFailed(f\\"Can't unify {self} with {K1}, \\" f'given {symbols} generators') return self.unify(K1) if self == K1: return self if self.is_ExpressionDomain: return self if K1.is_ExpressionDomain: return K1 if any(isinstance(d, CompositeDomain) for d in (self, K1)): if isinstance(self, CompositeDomain): self_ground = self.domain self_symbols = self.symbols order = self.order else: self_ground = self self_symbols = () order = K1.order if isinstance(K1, CompositeDomain): K1_ground = K1.domain K1_symbols = K1.symbols else: K1_ground = K1 K1_symbols = () domain = self_ground.unify(K1_ground) symbols = _unify_gens(self_symbols, K1_symbols) if ((self.is_FractionField and K1.is_PolynomialRing or K1.is_FractionField and self.is_PolynomialRing) and (not self_ground.is_Field or not K1_ground.is_Field) and domain.has_assoc_Ring): domain = domain.ring if isinstance(self, CompositeDomain) and (not isinstance(K1, CompositeDomain) or self.is_FractionField or K1.is_PolynomialRing): cls = self.__class__ else: cls = K1.__class__ return cls(domain, symbols, order) def mkinexact(cls, K0, K1): prec = max(K0.precision, K1.precision) tol = max(K0.tolerance, K1.tolerance) return cls(prec=prec, tol=tol) if self.is_ComplexField and K1.is_ComplexField: return mkinexact(self.__class__, self, K1) if self.is_ComplexField and K1.is_RealField: return mkinexact(self.__class__, self, K1) if self.is_RealField and K1.is_ComplexField: return mkinexact(K1.__class__, K1, self) if self.is_RealField and K1.is_RealField: return mkinexact(self.__class__, self, K1) if self.is_ComplexField or self.is_RealField: return self if K1.is_ComplexField or K1.is_RealField: return K1 if self.is_AlgebraicField and K1.is_AlgebraicField: return self.__class__(self.domain.unify(K1.domain), *_unify_gens(self.gens, K1.gens)) elif self.is_AlgebraicField: return self elif K1.is_AlgebraicField: return K1 if self.is_RationalField: return self if K1.is_RationalField: return K1 if self.is_FiniteField and self.domain == K1: return self if K1.is_FiniteField and K1.domain == self: return K1 raise NotImplementedError def __eq__(self, other): \\"\\"\\"Returns \`\`True\`\` if two domains are equivalent.\\"\\"\\" return isinstance(other, Domain) and self.dtype == other.dtype def get_exact(self): return self def poly_ring(self, *symbols, **kwargs): \\"\\"\\"Returns a polynomial ring, i.e. \`K[X]\`.\\"\\"\\" from ..polys import PolynomialRing return PolynomialRing(self, symbols, kwargs.get('order', lex)) def frac_field(self, *symbols, **kwargs): \\"\\"\\"Returns a fraction field, i.e. \`K(X)\`.\\"\\"\\" from ..polys import FractionField return FractionField(self, symbols, kwargs.get('order', lex))"},{"prompt":"Given a set of data, develop a Python program to classify the data into two categories: low and high. [8, 5, 9, 1, 3, 10]","completion":"# Define the threshold threshold = 5 def classify(data): result = [] for item in data: if item <= threshold: result.append('low') else: result.append('high') return result print(classify([8, 5, 9, 1, 3, 10])) # Output: ['high', 'low', 'high', 'low', 'low', 'high']"},{"prompt":"Create an HTML page that displays a table containing a list of books with their ISBN and title. [{ISBN: 9780134813071, title: Python Programming }, {ISBN: 9781590595377, title: Advanced Python }, {ISBN: 9780302005945, title: PHP Programming }]","completion":"<html> <head> <title>Book List</title> </head> <body> <h1>Book List</h1> <table> <thead> <tr> <th>ISBN</th> <th>Title</th> </tr> <tbody> <tr> <td>978-0134813071</td> <td>Python Programming</td> </tr> <tr> <td>978-1590595377</td> <td>Advanced Python</td> </tr> <tr> <td>978-0302005945</td> <td>PHP Programming</td> </tr> </thead> <tbody> </table> </body> </html>"},{"prompt":"Edit the following Python program to accept a list of numbers as input and find the second largest number from the list. [12, 23, 45, 22, 50]","completion":"# Find the second largest number from a given list numbers = [12, 23, 45, 22, 50] # Sort the list in ascending order numbers.sort() # Get the second largest number second_largest_num = numbers[-2] print('The second largest number in the list is:', second_largest_num)"},{"prompt":"Write a Python class that implements a binary search tree. The class should include methods to insert a node, delete a node, and traverse the tree. Not applicable","completion":"class Node: def __init__(self, val): self.val = val self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def insert(self, val): newNode = Node(val) if self.root == None: self.root = newNode else: curr = self.root while curr: if val < curr.val: if curr.left == None: curr.left = newNode break else: curr = curr.left else: if curr.right == None: curr.right = newNode break else: curr = curr.right def delete(self, val): curr = self.root parent = None isLeftChild = True while curr.val != val: parent = curr if val < curr.val: curr = curr.left isLeftChild = True else: curr = curr.right isLeftChild = False if curr == None: return # if node has no children if curr.left == None and curr.right == None: if isLeftChild: parent.left = None else: parent.right = None # if node has one child elif curr.left == None: if isLeftChild: parent.left = curr.right else: parent.right = curr.right elif curr.right == None: if isLeftChild: parent.left = curr.left else: parent.right = curr.left # if node has two children else: succParent = curr succ = curr.right while succ.left != None: succParent = succ succ = succ.left # if successor is a direct right child if succParent == curr: succParent.right = succ.right else: succParent.left = succ.right curr.val = succ.val def traverse(self): if self.root is None: return curr = self.root self.traverseInOrder(curr) def traverseInOrder(self, curr): if curr.left != None: self.traverseInOrder(curr.left) print(curr.val) if curr.right != None: self.traverseInOrder(curr.right)"},{"prompt":"Create a Python program for sorting a list of numbers in increasing order. [3, 1, 8, 5, 7]","completion":"def sort_list(list): for _ in range(len(list)): for j in range(len(list)-1): if list[j] > list[j+1]: list[j], list[j+1] = list[j+1], list[j] return list # Testing the function example_list = [3, 1, 8, 5, 7] sorted_list = sort_list(example_list) print(sorted_list) # Output: [1, 3, 5, 7, 8]"},{"prompt":"Write a function to create a JSON object from a given Python list.","completion":"import json def list_to_json(data): return json.dumps(data)"},{"prompt":"Create a Python script to generate a password that meets the following criteria: length of 8 characters, includes at least one uppercase, one lowercase and one numeric character.","completion":"import string import random def generate_password(): lowercase = string.ascii_lowercase uppercase = string.ascii_uppercase digits = string.digits characters = lowercase + uppercase + digits password = ''.join(random.sample(characters,8)) return password print(generate_password())"},{"prompt":"Determine the performance of a given Python function by seeing how long it takes to run. def count_words(text): words = text.split(' ') return len(words)","completion":"import time def count_words(text): start_time = time.time() words = text.split(' ') result = len(words) end_time = time.time() duration = end_time - start_time return result, duration if __name__ == '__main__': text = 'This sentence has five words' result, duration = count_words(text) print(f'The result is {result} and it took {duration} seconds!')"},{"prompt":"Write a Python program to filter a list of words by their length. word_list = [apple, banana, pear, grape, mango]","completion":"def filter_by_length(word_list, length): filtered_list = [] for word in word_list: if len(word) == length: filtered_list.append(word) return filtered_list result = filter_by_length(word_list, 5) print(result)"},{"prompt":"Create a Python program to parse a sentence and identify all named entities mentioned in the sentence. The founder of Apple Steve Jobs passed away.","completion":"import nltk from nltk import word_tokenize sentence = \\"The founder of Apple Steve Jobs passed away.\\" tokenized_text = word_tokenize(sentence) tagged = nltk.pos_tag(tokenized_text) namedEnt = nltk.ne_chunk(tagged, binary=False) for ne in namedEnt: if type(ne) == nltk.tree.Tree: entity_name = ' '.join(c[0] for c in ne.leaves()) print(entity_name)"},{"prompt":"Write a Python program that can detect the language of a given piece of text. The text is: Bonjour tout le monde","completion":"import detect_language text = \\"Bonjour tout le monde\\" language = detect_language.detect(text) print(language) # fr"},{"prompt":"Write a blank Python program to convert celsius to fahrenheit.","completion":"def celsius_to_fahrenheit(celsius): \\"\\"\\" This function converts the given celsius value to its corresponding fahrenheit value \\"\\"\\" fahrenheit = (celsius * (9/5)) + 32 return fahrenheit"},{"prompt":"Write a Python program to implement a simple HTTP server that can return the HTML page given below on a request. <html> <body> <h1>Hello, World!</h1> </body> </html>","completion":"import http.server from http.server import SimpleHTTPRequestHandler class MyHandler(SimpleHTTPRequestHandler): def do_GET(self): self.send_response(200) self.send_header('Content-type', 'text/html') self.end_headers() html = b\\"\\"\\" <html> <body> <h1>Hello, World!</h1> </body> </html> \\"\\"\\" self.wfile.write(html) server = http.server.HTTPServer(('', 8080), MyHandler) server.serve_forever()"},{"prompt":"Generate a code to send an email using Python.","completion":"import smtplib from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart subject = \\"Your Subject\\" body = \\"Your message here\\" sender = \\"from@fromdomain.com\\" receivers = [\\"to@todomain.com\\"] msg = MIMEMultipart() msg['from'] = sender msg['To'] = \\", \\".join(receivers) msg['Subject'] = subject msg.attach(MIMEText(body, 'plain')) server = smtplib.SMTP('smtp.gmail.com', 587) server.starttls() server.login(\\"username\\", \\"password\\") text = msg.as_string() server.sendmail(sender, receivers, text) server.quit()"},{"prompt":"Write a function in Python that takes an array of integers as an input and returns an array with only the distinct numbers from the input. [1, 2, 3, 4, 4, 5, 5]","completion":"def distinct_numbers(arr): return list(set(arr))"},{"prompt":"Design a data structure in Python that implements a Stack. Not applicable","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if not self.is_empty(): return self.items.pop() def is_empty(self): return len(self.items) == 0 def peek(self): if not self.is_empty(): return self.items[-1] def size(self): return len(self.items)"},{"prompt":"Create a unit test for an existing Python function. The function should take a single argument and return the square of the argument. Not Applicable","completion":"import unittest def square(x): return x * x class TestSquareFunction(unittest.TestCase): def test_square(self): self.assertEqual(square(3), 9) self.assertEqual(square(5), 25) self.assertEqual(square(7), 49) if __name__ == '__main__': unittest.main()"},{"prompt":"Create a python program to reverse a string passed as input. Hello World!","completion":"def reverse_string(stringToReverse): reversedString = \\"\\" for i in reversed(stringToReverse): reversedString += i return reversedString stringToReverse = input(\\"Enter string to reverse: \\") result = reverse_string(stringToReverse) print(result)"},{"prompt":"Create a class in Python to represent a Person which contains attributes like name, age, height and address.","completion":"class Person: def __init__(self, name, age, height, address): self.name = name self.age = age self.height = height self.address = address def describe(self): print('Name:', self.name) print('Age:', self.age) print('Height:', self.height) print('Address:', self.address)"},{"prompt":"Create a function in Python that takes a string as input and prints out a list of all the words containing at least five letters. The quick brown fox jumps over the lazy dog","completion":"def five_letter_words(string): words = string.split() output_list = [] for word in words: if len(word) >= 5: output_list.append(word) print(output_list) five_letter_words(\\"The quick brown fox jumps over the lazy dog\\") # Output [\\"quick\\", \\"brown\\", \\"jumps\\", \\"over\\", \\"lazy\\"]"},{"prompt":"Write a Python program for finding the longest subarray with a given sum. arr: [1, 2, 3, 4, 5], sum: 9","completion":"def longest_subarray_with_sum(arr, given_sum): max_len = 0 curr_sum = 0 start_index = 0 n = len(arr) for end_index in range(n): curr_sum += arr[end_index] while curr_sum > given_sum: curr_sum -= arr[start_index] start_index += 1 if curr_sum == given_sum and (end_index-start_index+1) > max_len: max_len = end_index-start_index+1 return max_len arr = [1, 2, 3, 4, 5] given_sum = 9 print(longest_subarray_with_sum(arr, given_sum))"},{"prompt":"Write a Python class that will generate an output in JSON format from a provided input.","completion":"class JSONGenerator: def __init__(self, input): self.input = input def generate(self): return json.dumps(self.input)"},{"prompt":"Write a Python program to calculate the hypotenuse of a rightangled triangle. a = 5, b = 12","completion":"import math # calculate the hypotenuse def calc_hypotenuse(a, b): hyp = math.sqrt(a**2 + b**2) print(\\"The length of the hypotenuse is\\", hyp) # input lengths of triangle sides a = 5 b = 12 # call the function calc_hypotenuse(a, b)"},{"prompt":"Generate random numbers between 1 and 2 using the random module in Python.","completion":"import random random_number = random.uniform(1, 2) print(random_number)"},{"prompt":"Can you make a function in Pyhton that takes in two strings and returns a new string with all the letters from the second string which are not in the first string? “Python”, “Programming”","completion":"def new_string(s1, s2): new_str = \\"\\" for char in s2: if char not in s1: new_str += char return new_str print(new_string(\\"Python\\", \\"Programming\\")) # Output: \\"roammig\\""},{"prompt":"Generate a Python function to validate a credit card billing address. Credit card billing address example Ann Smith 1234 Main St. Anytown, CA 99999","completion":"def validate_billing_address(address): # Split address into individual elements street, city_state_zip = address.split(\\"n\\") # Check street element if not street: return False # Check city_state_zip element elements = city_state_zip.split(\\",\\") if len(elements) != 2: return False city, state_zip = elements state, zip = state_zip.split(\\" \\") if len(zip) != 5 or not zip.isdigit(): return False return True"},{"prompt":"Create a RESTful web service in Python which can add and subtract two numbers and return the result. Not applicable","completion":"from flask import Flask, request app = Flask(__name__) @app.route(\\"/\\", methods=['GET', 'POST']) def math(): if request.method == 'POST': num1 = int(request.form.get('num1')) num2 = int(request.form.get('num2')) operation = request.form.get('operation') if operation == 'add': result = num1 + num2 elif operation == 'subtract': result = num1 - num2 return {'result': result} if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Design a Python script for merging two sorted lists. list1 = [1, 5, 9] list2 = [2, 6, 8]","completion":"def merge_lists(list1, list2): merged_list = [] # Iterate over both the lists # and compare their elements while len(list1) > 0 and len(list2) > 0: if list1[0] < list2[0]: merged_list.append(list1.pop(0)) else: merged_list.append(list2.pop(0)) # Check to see if any elements remain in one of the lists # and add them to the end of the merged list merged_list += list1 merged_list += list2 return merged_list list1 = [1, 5, 9] list2 = [2, 6, 8] merged_list = merge_lists(list1, list2) print(merged_list) # prints [1, 2, 5, 6, 8, 9]"},{"prompt":"Create a Python program to loop through a given list and print each item on a new line. my_list = [apples, oranges, bananas]","completion":"for item in my_list: print(item)"},{"prompt":"mplement a Genetic Algorithm in Python to find the maximum possible fitness score given a set of parameters. Number of paramters = 3 Range of values for each parameter = [0, 1] Fitness function = x1 * x2 + x3","completion":"import numpy as np def fitness_function(X): return X[0] * X[1] + X[2] def generate_genes(n, lower, upper): return np.random.uniform(lower, upper, n) def GA(genes, fitness, lower, upper, mutation_rate, max_iterations): max_fitness = -float('inf') max_genes = None n = len(genes) for iteration in range(max_iterations): if max_fitness >= fitness_function(genes): break # Generate new population parent_generation = [] for _ in range(int(n/2)): parent_generation.append((genes, fitness_function(genes))) parent_generation.sort(key=lambda x: x[1], reverse=True) # Sort parents # Select the best elite_genes, elite_fitness = parent_generation[0] # Crossover child_generation = [] for _ in range(int(n/2)): # Breed new population parent_1 = np.random.choice(parent_generation) parent_2 = np.random.choice(parent_generation) child_1, child_2 = crossover(parent_1, parent_2, n) child_generation.append(child_1) child_generation.append(child_2) # Mutate mutants = [] for child in child_generation: if np.random.uniform(0, 1) < mutation_rate: mutants.append(mutation(child, lower, upper)) else: mutants.append(child) # Update for gene in mutants: genes = gene fitness = fitness_function(genes) if fitness > max_fitness: max_fitness = fitness max_genes = gene return max_fitness, max_genes def crossover(parent_1, parent_2, n): n_split = np.random.randint(1, n) # Split child_1 = np.concatenate([parent_1[:n_split], parent_2[n_split:]]) child_2 = np.concatenate([parent_2[:n_split], parent_1[n_split:]]) return child_1, child_2 def mutation(gene, lower, upper): for i, gene_value in enumerate(gene): if np.random.uniform(0, 1) < mutation_rate: gene[i] = np.random.uniform(lower, upper) return gene # Run GA n = 3 lower = 0 upper = 1 genes = generate_genes(n, lower, upper) mutation_rate = 0.1 max_iterations = 1000 max_fitness, max_genes = GA(genes, fitness_function, lower, upper, mutation_rate, max_iterations) # Print results print(\\"Maximum fitness score:\\", max_fitness) print(\\"Parameters:\\", max_genes)"},{"prompt":"Write a Robotic Process Automation (RPA) script in Python to read data from an Excel spreadsheet and insert into a database table. A database table with columns item_id, item_name, price An Excel spreadsheet with the same colum","completion":"import pandas as pd import pyodbc # Connect to database server = '<yourserver>' database = '<yourdatabase>' username = '<yourusername>' password = '<yourpassword>' conn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER=' + server + ';DATABASE=' + database + ';UID=' + username + ';PWD=' + password) cursor = conn.cursor() # Read Excel file df = pd.read_excel('<yourfilename>') # Insert values into database for index, row in df.iterrows(): item_id = row['item_id'] item_name = row['item_name'] price = row['price'] cursor.execute(f\\"INSERT INTO table (item_id, item_name, price) VALUES ({item_id}, '{item_name}', {price})\\") conn.commit()"},{"prompt":"Calculate the correlation between artists using the Last.fm dataset. Intermediate datasets will be saved in an HDF5 file and the final dataset will be saved in a database. The artist correlation matrix will be saved only for the single selected artist, used in the final step for the similarity comparison. Run the provided Python code to execute the calculation.","completion":"#!/usr/bin/env python ''' Calculate the correlation between the artists. Intermediate datasets are saved in the HDF5 file and the final dataset is saved in the database as well. The artist correlation matrix is saved only for the single selected artist, used in the final step for the similarity comparison. #--------------------------------------------------------------------------# Copyright (C) 2014, Zlatko Prpa <zprpa.ca@gmail.com> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. #--------------------------------------------------------------------------# ''' #-- standard libs import os, sys, sqlite3, time, locale, itertools as it #-- add-on libs import numpy, h5py #-- custom libs import utils #==============================================================================# #--------------------------------- SETUP --------------------------------------# #==============================================================================# log = utils.ZpLog( 'logs/' + os.path.basename(__file__) + '.log') elog = utils.ZpErrLog('logs/' + os.path.basename(__file__) + '.ERROR-traceback.log') log.write(''.ljust(150,'*'), skip_line=1, add_line=1) #-- setup number formatting locale.setlocale( locale.LC_ALL, \\"\\" ) fmt = locale.format #-- open the HDF5 file for the storage of the intermediate datasets h5f = h5py.File('data/artist-correlation-datasets.h5','w') vlen_dtype = h5py.special_dtype(vlen=str) #==============================================================================# #------------------------- Load and process data ------------------------------# #==============================================================================# #--------------------------------------# #-- load data and apply basic filter # #--------------------------------------# ''' Load the records from the artist/tag table. There is no reason to apply any filter to this basic dataset, as opposite to the tag correlation procedure. We do not need to generalize any specific artist, as we had to do with tag data. Otherwise, the whole processing logic is very much the same. ''' log.write('Load data.') dbs = sqlite3.connect('data/lastfm.sql3', detect_types=sqlite3.PARSE_DECLTYPES) cur = dbs.cursor() cur.execute(\\"SELECT t.artist_name, t.tag, t.count FROM top_artist_tags t\\") recs = numpy.array([r for r in cur],dtype=[('art','O'),('tag','O'),('count','i4')]) cur.close() dbs.close() log.write('Loaded %s records.'%fmt('%12d',recs.shape[0],True).strip()) #--------------------------------------# #-- prepare data for correlation calc # #--------------------------------------# log.write('Prepare data for the correlation calc.') #-- Get unique list of artists and tags. unique_art = numpy.unique( recs['art'] ) unique_tags = numpy.unique( recs['tag'] ) ''' Create 2d array to hold the vector for each artist. The vector size is 2x the length of the list of the unique tags. First part will have the value 0/1, depending if the given artist is associated with the given tag. The second part will have the tag ranking (count) value, at the same position for the given tag. Assuming the following tuples in the basic dataset [recs]: (art1,tag1,90), (art1,tag2,80), (art1,tag3,60), (art2,tag1,80), (art2,tag3,90), (art3,tag2,90), (art3,tag3,80), (art4,tag1,50), (art4,tag2,70), (art4,tag3,70) The \\"unique_art\\" list is: [art1,art2,art3,art4] The \\"unique_tags\\" list is: [tag1,tag2,tag3] offset = 3 Single artist vector is [0,0,0,0,0,0], with logical mask as [tag1,tag2,tag3,rank1,rank2,rank3]. Based on the above described data, the complete matrix \\"tags_mx\\" will have 4 vectors with following values: [[1,1,1,90,80,60], [1,0,1,80, 0,90], [0,1,1, 0,90,80], [1,1,1,50,70,70]] The sample data (tags for 1000 artists) is very small and this executes fast, otherwise this loop would be a strong candidate for parallel execution. ''' offset = unique_tags.shape[0] art_mx = numpy.zeros((unique_art.shape[0],offset*2),'i4') for i in xrange(unique_art.shape[0]): #-- find indicies for all records in the basic dataset for given artist idx = numpy.where( recs['art']==unique_art[i] )[0] #-- get all tags and counts for the given artist tags = recs['tag'].take(idx) counts = recs['count'].take(idx) #-- find the index positions in the tag unique list, for all tag artists idx = unique_tags.searchsorted(tags) #-- fill in the first part of the artist vector with 1, for each tag found numpy.put( art_mx[i], idx, 1 ) #-- fill in the tag count (rank) in the second part of the artist vector numpy.put( art_mx[i], idx+offset, counts ) ds = h5f.create_dataset('unique_art', unique_art.shape, dtype=vlen_dtype) ds[...] = unique_art ds = h5f.create_dataset('unique_tags', unique_tags.shape, dtype=vlen_dtype) ds[...] = unique_tags ds = h5f.create_dataset('art_mx', art_mx.shape, dtype=art_mx.dtype) ds[...] = art_mx h5f.flush() log.write('Saved following datasets:') log.write('unique_art: shape->%stdtype->%s'%(unique_art.shape, unique_art.dtype)) log.write('unique_tags: shape->%stdtype->%s'%(unique_tags.shape,unique_tags.dtype)) log.write('art_mx: shape->%stdtype->%s'%(art_mx.shape, art_mx.dtype), add_line=1) #--------------------------------------# #-- calculate artist correlation # #--------------------------------------# log.write('Calculate artist correlation.') ''' Calculate correlation for each distinct pair of artist vectors. Again, in case of high data volume, this could be executed in parallel using the pool of worker processes. For the present dataset, the approx size of the artist correlation matrix is around 500K recs. ''' #-- first iterator to get the matrix size itr = ((i,j) for i in xrange(unique_art.shape[0]) for j in xrange(i+1,unique_art.shape[0])) size = sum(1 for _ in itr) corr = numpy.empty( size, dtype=[('art1','O'),('art2','O'),('c','f8')] ) #-- full iterator itr = it.izip( ((i,j) for i in xrange(unique_art.shape[0]) for j in xrange(i+1,unique_art.shape[0])), (k for k in xrange(size)) ) t = time.time() for (x,y),z in itr: c = numpy.corrcoef( art_mx[x], art_mx[y] )[0,1] corr[z] = (unique_art[x], unique_art[y], c) #-- update progres every 10K recs if z%10000==0: log.write_timing1( z, size, t, time.time(), out_type='TTY') ''' Because the full dataset is somewhat big, save only the sample used later in the \\"similar artist\\" comparison. Comment out if you want to re-run and get all records. ''' log.write('Full artist correlation matrix: [corr] shape->%stdtype->%s'%(corr.shape,corr.dtype)) sample_artist = 'Cyndi Lauper' i = numpy.where( (corr['art1']==sample_artist)|(corr['art2']==sample_artist) )[0] corr = corr.take(i) log.write('Sample artist correlation matrix: [corr] shape->%stdtype->%s'%(corr.shape,corr.dtype)) ds = h5f.create_dataset('corr', corr.shape, dtype=[('art1',vlen_dtype),('art2',vlen_dtype),('c','f8')]) ds[...] = corr h5f.close() log.write('Saved sample artist correlation matrix: [corr] shape->%stdtype->%s'%(corr.shape,corr.dtype),add_line=1) #-- save the records in the database as well dbs = sqlite3.connect('data/lastfm.sql3', detect_types=sqlite3.PARSE_DECLTYPES) cur = dbs.cursor() cur.execute(\\"DELETE FROM artist_correlation\\") cur.executemany(\\"INSERT INTO artist_correlation VALUES (?,?,?)\\",(r for r in corr)) log.write('Loaded %s records in the database.'%fmt('%6d',cur.rowcount,True)) dbs.commit() cur.close() dbs.close() log.write(''.ljust(150,'*'), add_line=1) log.close() #==============================================================================# #------------------------------------------------------------------------------# #==============================================================================#"},{"prompt":"Create a Python dictionary structure that stores a warning message for each item in the following list. ['apple', 'orange', 'banana']","completion":"{ 'apple': 'This apple is not fresh.', 'orange': 'This orange has gone bad.', 'banana': 'This banana is too ripe.' }"},{"prompt":"Create a python program to find the maximum value of an array using divide and conquer technique. arr = [1, 4, 9, 2, 6]","completion":"def find_max_Using_Divide_and_Conquer(arr): # Base case if len(arr) == 1: return arr[0] if len(arr) == 2: return max(arr[0], arr[1]) # Recursive case mid = len(arr)//2 max_left_sublist = find_max_Using_Divide_and_Conquer(arr[:mid]) max_right_sublist = find_max_Using_Divide_and_Conquer(arr[mid:]) return max(max_left_sublist, max_right_sublist)"},{"prompt":"Develop an algorithm for calculating the sum of two numbers, in Python. 2, 20","completion":"def add_numbers(a, b): return a + b print(\\"The sum of 2 and 20 is: \\", add_numbers(2, 20))"},{"prompt":"Design a function to tell if a number is even or odd using Python. x = 5","completion":"def isEven(x): if x % 2 == 0: return True else: return False x = 5 if isEven(x): print(\\"It is even\\") else: print(\\"It is odd\\")"},{"prompt":"Compose a Python Code to swap two numbers without using a temporary variable.","completion":"# Input two numbers a = 10 b = 5 # Swapping using bitwise operator a = a ^ b b = a ^ b a = a ^ b # Printing output print(\\"a =\\", a) print(\\"b =\\", b)"},{"prompt":"Construct a recursive Python program that computes the factorial of an integer.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Write a Python program to differentiate the following equation: y = 5*x^2 + 3*x + 1 Not applicable","completion":"def differentiate(x): return 10*x + 3; # Test x = 2 print(\\"The derivative of y = 5*x^2 + 3*x + 1 at x = 2 is:\\", differentiate(x)) # Output: 17"},{"prompt":"Develop a basic cloudbased application using Google App Engine. Not applicable","completion":"# main.py # The Google App Engine entry point with requests and responses from google.appengine.ext import ndb from flask import Flask # Define the Flask application app = Flask(__name__) @app.route('/api/v1/ persons/<id>', methods=['GET']) def get_person_by_id(id): person = ndb.Key(\\"Person\\", id).get() if person is not None: data = person.to_dict() return json.dumps(data) else: # Return an error code if person with the provided ID was not found return '{\\"error\\": \\"Person not found\\"}' if __name__ == '__main__': # This is used when running locally only. When deploying to Google App # Engine, a webserver process such as Gunicorn will serve the app. app.run(host='127.0.0.1', port=8080, debug=True) # app.yaml # [START gae_python_app] runtime: python27 api_version: 1 threadsafe: true # app.yaml env_variables: # Replace the placeholder below with your GCP project ID and make sure # the variable is named \`GCP_PROJECT\` GCP_PROJECT: <YOUR_PROJECT_ID> # app.yaml handlers: - url: /.* script: main.app # [END gae_python_app]"},{"prompt":"Create a Python function for computing the Fibonacci sequence up to the nth number. Number n: 10","completion":"def fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return a print(fibonacci(10)) # outputs 55"},{"prompt":"Write a Python program that takes a list of numbers and creates a new list of even numbers only. lst = [2, 3, 5, 6, 7, 8, 10, 11]","completion":"def get_even_numbers(lst): even_lst = [] for num in lst: if num % 2 == 0: even_lst.append(num) return even_lst"},{"prompt":"Python, debug the following program and explain what was the issue? def greet(name): if name == John: msg = Hello, John else: msg = Name not found print(greet(John))","completion":"The issue with the program is that it is not printing the message stored in the \\"msg\\" variable. To fix this, the program can be modified as follows: def greet(name): if name == \\"John\\": msg = \\"Hello, John\\" else: msg = \\"Name not found\\" print(msg) greet(\\"John\\")"},{"prompt":"Suggest a method to improve the efficiency of the following Python program. s = 'abcdefghijklmnopqrstuvwxyz' def func(s): s_list = [] for c in s: if c not in s_list: s_list.append(c) return s_l","completion":"s = 'abcdefghijklmnopqrstuvwxyz' def func(s): s_list = set() for c in s: s_list.add(c) return list(s_list)"},{"prompt":"Can you create a program in Python which reverses a number? Number = 12345","completion":"# Using Python def reverseNumber(number): reversed = 0 while(number > 0): digit = number%10 reversed = reversed*10 + digit number = number//10 return reversed number = 12345 reverse = reverseNumber(number) print(reverse) # Output: 54321"},{"prompt":"Create a function in Python that takes two numbers as arguments and returns their average. 2, 3","completion":"def average(a, b): return (a + b) / 2 print(average(2, 3))"},{"prompt":"Python, create a method to generate a random string.","completion":"import random import string def generateRandomString(length): chars = string.ascii_letters + string.digits randStr = \\"\\".join(random.choice(chars) for i in range(length)) return randStr print(generateRandomString(8))"},{"prompt":"Design an algorithm in Python to simulate a game of rock paper scissors.","completion":"# We define the possible winning combination of the game WINNING_COMBINATION = { \\"rock\\": \\"scissors\\", \\"paper\\": \\"rock\\", \\"scissors\\": \\"paper\\" } def playRockPaperScissors(): # Player 1's turn player1_choice = input(\\"Player 1: Choose rock, paper or scissors: \\") # Player 2's turn player2_choice = input(\\"Player 2: Choose rock, paper or scissors: \\") # Find the winner if WINNING_COMBINATION[player1_choice] == player2_choice: print(\\"Player 1 has won.\\") elif WINNING_COMBINATION[player2_choice] == player1_choice: print(\\"Player 2 has won.\\") else: print(\\"It's a tie!\\") playRockPaperScissors()"},{"prompt":"Generate a Python script for a query to fetch data from a given MySQL table. Table Name: Products Columns: product_id, name, price","completion":"import mysql.connector db = mysql.connector.connect( host=\\"localhost\\", user=\\"root\\", passwd=\\"password\\", database=\\"dbname\\" ) mycursor = db.cursor() sql = \\"SELECT product_id, name, price FROM Products\\" mycursor.execute(sql) myresult = mycursor.fetchall() for row in myresult: print(row)"},{"prompt":"Create a Python script to send an email.","completion":"import smtplib # Set up the SMTP server s = smtplib.SMTP(host='your_host_address_here', port=your_port_here) s.starttls() s.login(\\"your_username_here\\", \\"your_password_here\\") # Send the mail message = \\"A message\\" s.sendmail(\\"from@example.com\\", \\"to@example.com\\", message) # Terminate the SMTP session and close the connection s.quit()"},{"prompt":"Create an algorithm in Python to make a prediction given a list of features. features = ['feature1', 'feature2', 'feature3']","completion":"def predict(features): # Use the features to make a prediction prediction = 0 # Iterate through each feature to calculate the prediction for feature in features: prediction += calculate_feature(feature) return prediction def calculate_feature(feature): # Use a suitable algorithm to calculate the prediction # Value of the feature return value"},{"prompt":"Rewrite the code from this Python2 code to be compatible with Python3 code. #This code prints the numbers from 0 to 5. for i in range(6): print","completion":"#This code prints the numbers from 0 to 5. for i in range(6): print(i)"},{"prompt":"Create a class in Python that represents a vector in a 3dimensional space.","completion":"class Vec3: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def __str__(self): return \\"({}, {}, {})\\".format(self.x, self.y, self.z)"},{"prompt":"Using Python, create a program to filter out all nonprime numbers from a list. myList = [2, 4, 5, 20, 44]","completion":"def filterPrimes(myList): result = [] for i in myList: is_prime = True for j in range(2,i): if i % j == 0: is_prime = False break if is_prime: result.append(i) return result print(filterPrimes(myList)) #[2, 5]"},{"prompt":"Create a python program to calculate the compound interest for a given principal amount and a given interest rate. Principal amount = 1000 Interest rate = 9%","completion":"# Python program to calculate the compound interest def compound_interest(principal, rate, time): # Calculates compound interest CI = principal * (pow((1 + rate / 100), time)) print(\\"Compound interest is\\", CI) # Driver Code compound_interest(1000, 9, 2)"},{"prompt":"Write a Python script to generate all possible permutations of a set of input strings. ['a', 'b', 'c']","completion":"def permute(input): res = [] for i in range(len(input)): for result in permute(input[:i] + input[i + 1:]): res.append([input[i]] + result) return res inputValues = ['a', 'b', 'c'] permutations = permute(inputValues) for perm in permutations: print(perm)"},{"prompt":"Generate a python code that adds a delimiter string between every list item. [apple, orange, mango]","completion":"def join_list_items(my_list, delimiter): joined_list = delimiter.join(my_list) return joined_list list_string = join_list_items([\\"apple\\", \\"orange\\", \\"mango\\"], \\", \\") print(list_string) # Output: apple, orange, mango"},{"prompt":"Optimize a given Python script by running in parallel.","completion":"import concurrent.futures def thread_function(script): // Code to run the given script in parallel with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(thread_function, scripts)"},{"prompt":"Create a Python function that converts an integer into a binary representation as a string. 13","completion":"def to_binary(num): result = \\"\\" while num > 0: remainder = num % 2 num = num // 2 result = str(remainder) + result return result print(to_binary(13)) # '1101'"},{"prompt":"Write an example of a class definition in Python.","completion":"class Employee: def __init__(self, name, age): self.name = name self.age = age def get_name(self): return self.name def get_age(self): return self.age def set_age(self, age): self.age = age"},{"prompt":"Generate a Python function that takes in a list of numbers and returns the greatest common divisor (GCD) of the list elements. [25, 15, 20]","completion":"def find_GCD(input_list): gcd = input_list[0] for num in input_list[1:]: gcd = find_GCD(gcd, num) return gcd def find_GCD(a, b): while(b != 0): a, b = b, a%b return a"},{"prompt":"Design a Python program to find out the number of unique keywords used in documents. A list of documents: ['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again']","completion":"documents = ['The quick brown fox jumps over the lazy dog', 'The quick brown fox jumps over the lazy dog again', 'The quick brown fox jumps over the lazy dog again and again'] # Get the words from the documents words = [] for doc in documents: words += doc.split() # Get the unique words unique_words = set(words) # Print the number of unique words print(f'The number of unique words is {len(unique_words)}')"},{"prompt":"Design and implement an API in Python for an online store application.","completion":"from flask import Flask, jsonify, request app = Flask(__name__) @app.route('/products', methods=['GET']) def get_all_products(): # query database products = [] # format result return jsonify(products) @app.route('/products/<int:product_id>', methods=['GET']) def get_product(product_id): # query database product = {} # format result return jsonify(product) @app.route('/products', methods=['POST']) def create_product(): # get data from request data = request.get_json() # save to database # format result return jsonify({'message': 'Product added successfully.'}), 201 @app.route('/products/<int:product_id>', methods=['PUT']) def update_product(product_id): # get data from the request data = request.get_json() # update data in the database # format the result return jsonify({'message': 'Product successfully updated.'}) @app.route('/products/<int:product_id>', methods=['DELETE']) def delete_product(product_id): # delete data from the database # format the result return jsonify({'message': 'Product successfully deleted.'})"},{"prompt":"Create a Python program that will generate random passwords consisting of any combination of uppercase, lowercase letters, and numbers. Not applicable","completion":"import random def generate_password(length): password = \\"\\" for i in range(length): x = random.randint(1,3) if x == 1: password += chr(random.randint(48,57)) elif x == 2: password += chr(random.randint(65,90)) else: password += chr(random.randint(97,122)) return password"},{"prompt":"Generate the Python code for a pipelie of KMeans and GaussianMixture clustering models. n_clusters = 10","completion":"from sklearn.cluster import KMeans, GaussianMixture cluster = KMeans(n_clusters=n_clusters).fit(X) pipeline = GaussianMixture(n_components=2).fit(cluster.cluster_centers_)"},{"prompt":"Build a Naive Bayes classifier in Python.","completion":"import numpy as np class NaiveBayesClassifer(): def __init__(self, x, y): self.x = x self.y = y self.classes = np.unique(y) def fit(self): n_samples, n_features = self.x.shape self.class_priors = np.zeros(len(self.classes)) self.means, self.stds = [], [] # calculate class prior probability for i, c in enumerate(self.classes): x_class = self.x[self.y == c] self.class_priors[i] = x_class.shape[0]/float(n_samples) # sample mean and std for each feature self.means.append(x_class.mean(axis=0)) self.stds.append(x_class.std(axis=0)) def predict(self, X): prediction = [] for x in X: posteriors = [] for i, c in enumerate(self.classes): # calculate prior probability prior = np.log(self.class_priors[i]) # calculate conditional probability posterior = np.sum(np.log(self.pdf(x, self.means[i], self.stds[i]))) posteriors.append(prior + posterior) # print posteriors prediction.append(self.classes[np.argmax(posteriors)]) return prediction # calculate probability density function def pdf(self, x, mean, std): # probabilities probabilities = (1/(np.sqrt(2*np.pi)*std))*(np.exp((-(x-mean)**2)/(2*std**2))) return probabilities"},{"prompt":"The given code is a Python script that contains functions to deregister HiveServer2 in preparation for an upgrade and to complete an upgrade. To use these functions, import the necessary modules and call the functions with the required parameters. The pre_upgrade_deregister() function runs the hive service hiveserver2 deregister <version> command to deprovision the server in preparation for an upgrade. The post_upgrade_deregister() function runs the same command to complete the upgrade. Both functions obtain the Kerberos ticket if security is enabled.","completion":"\\"\\"\\" Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the \\"License\\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \\"AS IS\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. \\"\\"\\" import os import re from resource_management.core.logger import Logger from resource_management.core.exceptions import Fail from resource_management.core.resources.system import Execute from resource_management.core import shell from resource_management.libraries.functions import format from resource_management.libraries.functions import stack_select from resource_management.libraries.functions.version import format_stack_version from resource_management.libraries.functions.version import compare_versions def pre_upgrade_deregister(): \\"\\"\\" Runs the \\"hive --service hiveserver2 --deregister <version>\\" command to de-provision the server in preparation for an upgrade. This will contact ZooKeeper to remove the server so that clients that attempt to connect will be directed to other servers automatically. Once all clients have drained, the server will shutdown automatically; this process could take a very long time. This function will obtain the Kerberos ticket if security is enabled. :return: \\"\\"\\" import params Logger.info('HiveServer2 executing \\"deregister\\" command in preparation for upgrade...') if params.security_enabled: kinit_command=format(\\"{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; \\") Execute(kinit_command,user=params.smokeuser) # calculate the current hive server version current_hiveserver_version = _get_current_hiveserver_version() if current_hiveserver_version is None: raise Fail('Unable to determine the current HiveServer2 version to deregister.') # fallback when upgrading because /usr/iop/current/hive-server2/conf/conf.server may not exist hive_server_conf_dir = params.hive_server_conf_dir if not os.path.exists(hive_server_conf_dir): hive_server_conf_dir = \\"/etc/hive/conf.server\\" # deregister hive_execute_path = params.execute_path # If upgrading, the upgrade-target hive binary should be used to call the --deregister command. # If downgrading, the downgrade-source hive binary should be used to call the --deregister command. if \\"upgrade\\" == params.upgrade_direction: # hive_bin upgrade_target_version = format_stack_version(params.version) if upgrade_target_version and compare_versions(upgrade_target_version, \\"4.1.0.0\\") >= 0: upgrade_target_hive_bin = format('/usr/iop/{version}/hive/bin') if (os.pathsep + params.hive_bin) in hive_execute_path: hive_execute_path = hive_execute_path.replace(os.pathsep + params.hive_bin, os.pathsep + upgrade_target_hive_bin) # hadoop_bin_dir upgrade_target_hadoop_bin = stack_select.get_hadoop_dir(\\"bin\\", upgrade_stack_only=True) upgrade_source_hadoop_bin = params.hadoop_bin_dir if upgrade_target_hadoop_bin and len(upgrade_target_hadoop_bin) > 0 and (os.pathsep + upgrade_source_hadoop_bin) in hive_execute_path: hive_execute_path = hive_execute_path.replace(os.pathsep + upgrade_source_hadoop_bin, os.pathsep + upgrade_target_hadoop_bin) command = format('hive --config {hive_server_conf_dir} --service hiveserver2 --deregister ' + current_hiveserver_version) Execute(command, user=params.hive_user, path=hive_execute_path, tries=1 ) def _get_current_hiveserver_version(): \\"\\"\\" Runs \\"hive --version\\" and parses the result in order to obtain the current version of hive. :return: the hiveserver2 version, returned by \\"hive --version\\" \\"\\"\\" import params try: command = 'hive --version' return_code, iop_output = shell.call(command, user=params.hive_user, path=params.execute_path) except Exception, e: Logger.error(str(e)) raise Fail('Unable to execute hive --version command to retrieve the hiveserver2 version.') if return_code != 0: raise Fail('Unable to determine the current HiveServer2 version because of a non-zero return code of {0}'.format(str(return_code))) match = re.search('^(Hive) ([0-9]+.[0-9]+.S+)', iop_output, re.MULTILINE) if match: current_hive_server_version = match.group(2) return current_hive_server_version else: raise Fail('The extracted hiveserver2 version \\"{0}\\" does not matching any known pattern'.format(iop_output)) def post_upgrade_deregister(): \\"\\"\\" Runs the \\"hive --service hiveserver2 --deregister <version>\\" command to de-provision the server in preparation for an upgrade. This will contact ZooKeeper to remove the server so that clients that attempt to connect will be directed to other servers automatically. Once all clients have drained, the server will shutdown automatically; this process could take a very long time. This function will obtain the Kerberos ticket if security is enabled. :return: \\"\\"\\" import params Logger.info('HiveServer2 executing \\"deregister\\" command to complete upgrade...') if params.security_enabled: kinit_command=format(\\"{kinit_path_local} -kt {smoke_user_keytab} {smokeuser_principal}; \\") Execute(kinit_command,user=params.smokeuser) # calculate the current hive server version current_hiveserver_version = _get_current_hiveserver_version() if current_hiveserver_version is None: raise Fail('Unable to determine the current HiveServer2 version to deregister.') # fallback when upgrading because /usr/hdp/current/hive-server2/conf/conf.server may not exist hive_server_conf_dir = params.hive_server_conf_dir if not os.path.exists(hive_server_conf_dir): hive_server_conf_dir = \\"/etc/hive/conf.server\\" # deregister hive_execute_path = params.execute_path # If upgrading, the upgrade-target hive binary should be used to call the --deregister command. # If downgrading, the downgrade-source hive binary should be used to call the --deregister command. # By now <stack-selector-tool> has been called to set 'current' to target-stack if params.downgrade_from_version is not None: hive_execute_path = _get_hive_execute_path(params.downgrade_from_version) command = format('hive --config {hive_server_conf_dir} --service hiveserver2 --deregister ' + current_hiveserver_version) Execute(command, user=params.hive_user, path=hive_execute_path, tries=1 ) def _get_hive_execute_path(stack_version): \\"\\"\\" Returns the exact execute path to use for the given stack-version. This method does not return the \\"current\\" path :param stack_version: Exact stack-version to use in the new path :return: Hive execute path for the exact hdp stack-version \\"\\"\\" import params hive_execute_path = params.execute_path formatted_stack_version = format_stack_version(stack_version) if formatted_stack_version and compare_versions(formatted_stack_version, \\"4.1\\") >= 0: # hive_bin new_hive_bin = format('/usr/iop/{stack_version}/hive/bin') if (os.pathsep + params.hive_bin) in hive_execute_path: hive_execute_path = hive_execute_path.replace(os.pathsep + params.hive_bin, os.pathsep + new_hive_bin) # hadoop_bin_dir new_hadoop_bin = stack_select.get_hadoop_dir_for_stack_version(\\"bin\\", stack_version) old_hadoop_bin = params.hadoop_bin_dir if new_hadoop_bin and len(new_hadoop_bin) > 0 and (os.pathsep + old_hadoop_bin) in hive_execute_path: hive_execute_path = hive_execute_path.replace(os.pathsep + old_hadoop_bin, os.pathsep + new_hadoop_bin) return hive_execute_path"},{"prompt":"Design a neural network in Python to identify the characters in a given alphanumeric string.","completion":"# Imports import numpy as np import pandas as pd import tensorflow as tf # Data data = pd.DataFrame(columns=['string']) data = data.append({'string':'3aF5yD'}, ignore_index=True) # Neural Network Architecture model = tf.keras.models.Sequential([ tf.keras.layers.Embedding(input_dim=len(data.columns), output_dim=1, input_length=len(data.columns)), tf.keras.layers.LSTM(256, return_sequences=True), tf.keras.layers.Dense(32), tf.keras.layers.Dense(len(data), activation='softmax') ]) # Optimizer model.compile(optimizer='adam', loss='mse') # Train model.fit(data.values, epochs=10) # Prediction predictions = model.predict(data.values) print(predictions)"},{"prompt":"Generate Python code to implement a binary search algorithm. Not applicable","completion":"def binary_search(arr, target): left = 0 right = len(arr)-1 while left <= right: mid = (left + right) // 2 if arr[mid] > target: right = mid - 1 elif arr[mid] < target: left = mid + 1 else: return mid return -1"},{"prompt":"Generate the following sequence using a while loop in Python. 0, 1, 2, 4, 7, 11, ...","completion":"a, b = 0, 1 while b < 100: print(a) a, b = b, a + b"},{"prompt":"Write a Python code snippet that creates a dictionary with keys 1,2,3 and string One,Two and Three as the corresponding values","completion":"myDict = {1: \\"One\\", 2:\\"Two\\", 3:\\"Three\\"}"},{"prompt":"Refactor the following code to be more pythonic def print_all(sequences): for sequence in sequences: print(sequence)","completion":"def print_all(sequences): [print(sequence) for sequence in sequences]"},{"prompt":"Create a simple game using Python and Pygame.","completion":"import pygame import random # Define some colors black = ( 0, 0, 0) white = ( 255, 255, 255) green = ( 0, 255, 0) red = ( 255, 0, 0) # This sets the width and height of each grid location width=20 height=20 # This sets the margin between each cell margin=5 # Create a 2 dimensional array. A two dimensional # array is simply a list of lists. grid=[] for row in range(10): # Add an empty array that will hold each cell # in this row grid.append([]) for column in range(10): grid[row].append(0) # Append a cell # Set row 1, cell 5 to one. (Remember rows and # column numbers start at zero.) grid[1][5] = 1 # Initialize pygame pygame.init() # Set the height and width of the screen size=[255,255] screen=pygame.display.set_mode(size) # Set title of screen pygame.display.set_caption(\\"Array Backed Grid\\") # Loop until the user clicks the close button. done=False # Used to manage how fast the screen updates clock=pygame.time.Clock() # -------- Main Program Loop ----------- while done==False: for event in pygame.event.get(): # User did something if event.type == pygame.QUIT: # If user clicked close done=True # Flag that we are done so we exit this loop if event.type == pygame.KEYDOWN: if event.key == pygame.K_SPACE: grid[1][5] = 0 # Set the screen background screen.fill(white) # Draw the grid for row in range(10): for column in range(10): color = white if grid[row][column] == 1: color = green pygame.draw.rect(screen, color, [(margin+width)*column+margin, (margin+height)*row+margin, width, height]) # Limit to 20 frames per second clock.tick(20) # Go ahead and update the screen with what we've drawn. pygame.display.flip() # Be IDLE friendly. If you forget this line, the program will 'hang' # on exit. pygame.quit ()"},{"prompt":"Generate a program using Python to calculate the factorial of a positive number. Number = 4","completion":"#Calculate the Factorial of a Positive Number #Get input factNum = 4 #Calculate and print result factNum = factNum*(factNum - 1) factNum = factNum*(factNum - 1) factNum = factNum*(factNum - 1) print(\\"The factorial of 4 is:\\", factNum)"},{"prompt":"Write a Python program to complete the implementing of a searching algorithm. List: [1, 2, 3, 4, 5, 6, 7, 8, 9] Target item: 7","completion":"\\"\\"\\" Write a Python program to complete the implementing of a searching algorithm \\"\\"\\" # Function to implement searching algorithm def search(list, item): # traverse through all list elements for i in range(len(list)): if list[i] == item: return i # item not found return -1 # main if __name__ == \\"__main__\\": # Given list list = [1, 2, 3, 4, 5, 6, 7, 8, 9] item = 7 # Calling Function index = search(list, item) if index != -1: print(\\"Item found at index\\", index) else: print(\\"Item is not found in list\\")"},{"prompt":"Write a Python script to extract data from a web page using Regular Expressions (RegEx). <div class=data> <h1>Name: John Doe</h1> <h3>Age: 25</h3> <h3>Location: Los Angeles, CA</h3> </div>","completion":"import re html = \\"<div class=\\"data\\"> <h1>Name: John Doe</h1> <h3>Age: 25</h3> <h3>Location: Los Angeles, CA</h3> </div>\\" pattern = '<h1>Name: (.*)</h1>.*<h3>Age: (.*)</h3>.*<h3>Location: (.*)</h3>' data = re.search(pattern, html) name = data.group(1) age = data.group(2) location = data.group(3) print('Name: {}'.format(name)) print('Age: {}'.format(age)) print('Location: {}'.format(location))"},{"prompt":"Create a commandline tool for voting on git commands. The tool should have the following subcommands: vote, list, tally, and elect. The vote subcommand should allow a user to vote for a specific commit. The list subcommand should list all votes. The tally subcommand should tally all votes. The elect subcommand should elect a commit based on the number of votes. The tool should be implemented using Python and the Git commandline tool.","completion":"import argparse import collections import re import subprocess NOTES_REF = 'refs/notes/votes' Vote = collections.namedtuple('Vote', ['commit', 'user']) def vote(args): assert args.user, 'TODO: determine user automatically' vote = 'vote:%s' % args.user subprocess.check_call([ 'git', 'notes', '--ref', NOTES_REF, 'append', '--allow-empty', '-m', vote, args.COMMIT], cwd=args.repo_dir) # TODO: prevent voting twice as same user def get_all_votes(repo_dir): output_bytes = subprocess.check_output([ 'git', 'notes', '--ref', NOTES_REF, 'list'], cwd=repo_dir) output = output_bytes.decode('utf-8') for line in output.splitlines(): if not line: continue votenote_ref, commit_id = line.split() # TODO use dulwich or something more efficient here votenote_bytes = subprocess.check_output( ['git', 'show', votenote_ref], cwd=repo_dir) votenote_content = votenote_bytes.decode('utf-8') # TODO ignore invalid votes for voteline in votenote_content.splitlines(): if not voteline: continue m = re.match(r'^vote:(?P<user>[a-z0-9@._]+)', voteline.strip()) # TODO check re for user spec if not m: print('Skipping crap %r' % voteline) continue user = m.group('user') yield Vote(commit=commit_id, user=user) def print_list(args): all_votes = get_all_votes(args.repo_dir) all_votes_sorted = sorted(all_votes, key=lambda v: (v.commit, v.user)) for v in all_votes_sorted: print('%s: +1 from %s' % (v.commit, v.user)) def tally(all_votes): \\"\\"\\" Returns a dict commit id => set of users \\"\\"\\" res = collections.defaultdict(set) for v in all_votes: res[v.commit].add(v.user) return res def print_tally(args): all_votes = get_all_votes(args.repo_dir) for commit, votes in sorted(tally(all_votes).items(), key=lambda kv: (kv[1], kv[0])): print('%s: %d votes' % (commit, len(votes))) def print_elect(args): all_votes = get_all_votes(args.repo_dir) winner_vcount, winner_commit = max((len(votes), commit) for commit, votes in tally(all_votes).items()) # TODO more algorithms print('%s won the election with %d votes' % (winner_commit, winner_vcount)) def main(): parser = argparse.ArgumentParser('Vote on git commands') parser.add_argument('-r', '--repo-dir', metavar='DIR', help='root directory of the repository to modify') subparsers = parser.add_subparsers(dest='cmd') vote_parser = subparsers.add_parser('vote', help='Vote for commit') vote_parser.add_argument('--user', metavar='USER_ID', help='ID of the user to vote as') vote_parser.add_argument('COMMIT', help='reference to the commit to vote for') subparsers.add_parser('list', help='List all votes') subparsers.add_parser('tally', help='Tally all votes') subparsers.add_parser('elect', help='Elect a commit') args = parser.parse_args() if args.cmd == 'vote': vote(args) elif args.cmd == 'list': print_list(args) elif args.cmd == 'tally': print_tally(args) elif args.cmd == 'elect': print_elect(args) else: parser.print_help() if __name__ == '__main__': main()"},{"prompt":"Write a Python function to calculate the product of elements in a list. [1, 2, 3, 4]","completion":"def product(arr): product = 1 for num in arr: product *= num return product product([1, 2, 3, 4])"},{"prompt":"Design an interface for a Python program that parses HTML documents. Not applicable","completion":"from bs4 import BeautifulSoup class HTMLParser: def __init__(self, html_doc): self.html_doc = html_doc def parse(self): soup = BeautifulSoup(self.html_doc, 'html.parser') return soup"},{"prompt":"Convert a given code snippet from Swift to Python. let username = John let score = 123","completion":"username = \\"John\\" score = 123"},{"prompt":"Create a Python script to optimize search engine queries.","completion":"import requests from bs4 import BeautifulSoup def get_keywords_from_page(url): headers = { 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36' } response = requests.get(url, headers = headers) soup = BeautifulSoup(response.content, 'html.parser') keywords = soup.find('meta', attrs={'name':'keywords'}) if keywords: return keywords['content'] else: return \\"\\" # Optimize search queries by finding keywords from a given website def optimize_query(url): keywords = get_keywords_from_page(url) if keywords: return keywords else: return url"},{"prompt":"Compile a function to calculate the difference of two date objects in Python.","completion":"import datetime def date_diff(date1, date2): \\"\\"\\"Returns the difference between two date objects in days\\"\\"\\" diff_date = date2 - date1 return diff_date.days"},{"prompt":"Design an algorithm in Python that takes in a list of numbers and prints out the first and last element in the list. lst=[5,3,1,7,9]","completion":"def first_last(lst): first_element = lst[0] last_element = lst[-1] return [first_element, last_element] print(first_last([5,3,1,7,9]))"},{"prompt":"Design a Python class to store customer purchase histories.","completion":"class CustomerHistory: def __init__(self, customer_id): self.customer_id = customer_id self.purchase_history = [] def add_purchase(self, product): self.purchase_history.append(product) def get_purchase_history(self): return self.purchase_history"},{"prompt":"Create a python script that can find the longest common substring between two strings. FIRST STRING = “abcdaf” SECOND STRING = “zbcdf”","completion":"def lcs(X , Y): # find the length of the strings m = len(X) n = len(Y) # declaring the array for storing the dp values L = [[None]*(n+1) for i in range(m+1)] \\"\\"\\"Following steps build L[m+1][n+1] in bottom up fashion Note: L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1]\\"\\"\\" for i in range(m+1): for j in range(n+1): if i == 0 or j == 0 : L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1]+1 else: L[i][j] = max(L[i-1][j] , L[i][j-1]) # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] return L[m][n] # Driver program to test the above function X = \\"abcdaf\\" Y = \\"zbcdf\\" print(\\"The length of LCS is \\", lcs(X, Y))"},{"prompt":"Design a neural network model in Python for text classification.","completion":"from keras.models import Sequential from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D model = Sequential() model.add(Embedding(input_dim=1000, output_dim=64, input_length=50)) model.add(SpatialDropout1D(0.2)) model.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2)) model.add(Dense(2, activation=\\"softmax\\")) model.compile(loss=\\"categorical_crossentropy\\", optimizer=\\"adam\\", metrics=[\\"accuracy\\"])"},{"prompt":"Create a function in Python to perform a binary search on a sorted array. A sorted array arr = [1, 3, 5, 7, 8, 9, 12]","completion":"def binary_search(arr, target): start = 0 end = len(arr) -1 while start <= end: mid = (start + end) // 2 if arr[mid] == target: return mid elif arr[mid] > target: end = mid - 1 else: start = mid + 1 return -1"},{"prompt":"Construct a Python function to insert a node at the head of a given linked list. Not applicable","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None # Recursive function to insert a node at the beginning of the linked list def insert_at_head(self, new_node): current_head = self.head new_node.next = current_head self.head = new_node list = LinkedList() list.insert_at_head(Node(1))"},{"prompt":"Write a Python program to find the minimum number of coins that sum up to a given amount.","completion":"def find_min_coins(amount, denominations): min_coins = [float(\\"inf\\")] * (amount + 1) min_coins[0] = 0 for i in range(1, amount + 1): for c in denominations: if i - c >= 0: min_coins[i] = min(min_coins[i - c] + 1, min_coins[i]) return min_coins[amount]"},{"prompt":"Create a program in Python for performing a linear search on a given list. [1, 2, 3, 4, 5, 6], 5","completion":"def linear_search(list, n): for i in range(len(list)): if list[i] == n: return i list = [1, 2, 3, 4, 5, 6] n = 5 x = linear_search(list, n) if x == None: print(\\"Element is not present in the list\\") else: print(\\"Element is present at index\\", x)"},{"prompt":"Create an algorithm to replace all the vowels in a string with the character ''. Pytho","completion":"def replace_vowels(s): # Initialize an empty string new_s = '' # Iterate through each character for ch in s: # Check if the character is a vowel if (ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u'): # Replace it with '' new_s = new_s + '' else: # Copy the same character new_s = new_s + ch return new_s str = 'Python' result = replace_vowels(str) print(result)"},{"prompt":"Write a Python program to calculate the sum of two numbers (input in separate lines) and print it. 2 3","completion":"num1 = int(input()) num2 = int(input()) sum_of_nums print(sum_of_nums)"},{"prompt":"Using the given data, create a class in Python and add some methods to the class. class File: def __init__(self, name, size, type): self.name = name self.size = size self.type = type","completion":"class File: \\"\\"\\"A simple file class\\"\\"\\" def __init__(self, name, size, type): self.name = name self.size = size self.type = type def get_name(self): return self.name def get_size(self): return self.size def get_type(self): return self.type"},{"prompt":"Can you convert a given HTML page into PDF using Python?","completion":"from xhtml2pdf import pisa # open the page with open('input.html', 'r') as f: html = f.read() # convert to PDF pdf = pisa.CreatePDF(html, open('output.pdf', 'wb')) # print the result if not pdf.err: print('PDF created successfully') else: print('Error creating PDF')"},{"prompt":"Generate a password strength checker in Python that follows the NIST guidelines.","completion":"import re def check_password_strength(password): '''This function checks if the given password is strong according to NIST guidelines''' # check if password is atleast 8 characters long if len(password) < 8: return False # check if password contains atleast one lowercase letter if not re.search('[a-z]', password): return False # check if password contains atleast one uppercase letter if not re.search('[A-Z]', password): return False # check if password contains atleast one number if not re.search('[0-9]', password): return False return True"},{"prompt":"Create two functions in Python to capitalize and uncapitalize each character of a string. string = 'hello world'","completion":"def capitalize_each_character(string): result = '' for char in string: result += char.capitalize() return result def uncapitalize_each_character(string): result = '' for char in string: result += char.lower() return result"},{"prompt":"Generate a script in Python that can make a given webpage mobilefriendly.","completion":"import bs4 from urllib.request import urlopen def make_webpage_mobile_friendly(url): html = urlopen(url) soup = bs4.BeautifulSoup(html, 'html.parser') head_html = soup.find('head') meta_attribute = {'name': 'viewport', 'content': 'width=device-width, initial-scale=1'} meta_tag = soup.new_tag('meta', attrs=meta_attribute) head_html.append(meta_tag) html_body = soup.find('body') for element in html_body.find_all('div', {'class': 'large-wrapper'}): element['style'] = 'max-width:100% !important' element['width'] = '100% !important' for element in html_body.find_all('img'): element['style'] = 'max-width:100% !important' element['width'] = '100% !important' return soup.prettify()"},{"prompt":"Write a function to implement Bubble Sort in Python.","completion":"def bubbleSort(arr): n = len(arr) # Traverse through all array elements for i in range(n-1): # range(n) also work but outer loop will repeat one time more than needed. # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j]"},{"prompt":"Write a Python program to filter a list of strings so that strings containingthe substring bad are removed. list_of_string = [good,bad,weird,great,amazing]","completion":"list_of_string = [\\"good\\",\\"weird\\",\\"great\\",\\"amazing\\"] filtered_list = [s for s in list_of_string if \\"bad\\" not in s] print(filtered_list)"},{"prompt":"Write a python program to add two matrices. X = [[1, 2, 3], [3, 4, 5], [6, 7, 8]] Y = [[2, 3, 4], [5, 6, 7], [8, 9, 10]]","completion":"def add_matrices(X, Y): result = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] # iterate through rows for i in range(len(X)): # iterate through columns for j in range(len(X[0])): result[i][j] = X[i][j] + Y[i][j] for r in result: print(r)"},{"prompt":"Given a multidimensional array, write a python code snippet to find the sum of its elements. arr = [[1, 4, 7], [2, 6, 3], [3, 5, 9]]","completion":"# Use nested list comprehension to calculate the sum total_sum = sum([sum(row) for row in arr])"},{"prompt":"Given the following Python code, determine how many lines of code are in the code. def foo(x): y = x/2 z = x/3 return x+yz","completion":"4"},{"prompt":"Create a program in Python that takes an integer n as input and prints out n lines of Hello World! 5","completion":"def hello_world_lines(n): for i in range(n): print(\\"Hello World!\\")"},{"prompt":"Write a code to define a class object in Python.","completion":"class Object: def __init__(self,attr1,attr2,attr3): self.attr1 = attr1 self.attr2 = attr2 self.attr3 = attr3"},{"prompt":"Develop a Python program to remove all characters from an input string that are not az, AZ, 09, or white space. Hello,@ World.","completion":"import re def remove_non_alphanum(s): return re.sub('[^a-zA-Z0-9 n.]', '', s) string = \\"Hello,@ World.\\" res = remove_non_alphanum(string) print(res)"},{"prompt":"Create a Python application for running a textbased adventure game. The application should support user input and provide a textual feedback for each action. Not applicable","completion":"import random import os # define the characters villain = { \\"name\\": \\"Evil Wizard\\", \\"hp\\": 100 } hero = { \\"name\\": \\"Hero\\", \\"hp\\": 100 } def fight_evil_wizard(): print(\\"You attack the Evil Wizard!\\") # randomly choose to either hit or miss the target is_hit = random.choice([True, False]) if is_hit: print(\\"You hit the Evil Wizard!\\") villain[\\"hp\\"] -= 10 else: print(\\"You missed!\\") # print out the hp of each character print(\\"Your HP: {}\\".format(hero[\\"hp\\"])) print(\\"Evil Wizard HP: {}\\".format(villain[\\"hp\\"])) def manage_hp(target, value): target[\\"hp\\"] += value print(\\"Your HP: {}\\".format(hero[\\"hp\\"])) print(\\"Evil Wizard HP: {}\\".format(villain[\\"hp\\"])) while True: os.system(\\"cls\\") # clear the terminal output # check if either character is alive if hero[\\"hp\\"] <= 0: print(\\"You have been defeated!\\") break if villain[\\"hp\\"] <= 0: print(\\"You have slain the Evil Wizard!\\") # you won! break # show the user the options print(\\"What would you like to do?\\") print(\\"1. Fight Evil Wizard\\") print(\\"2. Heal (HP +10)\\") print(\\"3. Run away\\") user_input = int(input(\\">> \\")) if user_input == 1: fight_evil_wizard() elif user_input == 2: manage_hp(hero, 10) elif user_input == 3: print(\\"You run away from the Evil Wizard!\\") break else: print(\\"Invalid input!\\")"},{"prompt":"Create a Python program prompt the user for two numbers and compute the product of these two numbers using recursive and nonrecursive algorithms.","completion":"# Non-recursive algorithm num_1 = int(input('Please enter the first number: ')) num_2 = int(input('Please enter the second number: ')) def prod_non_recursive(num_1, num_2): product = 1 while num_2 > 0: product = product * num_1 num_2 = num_2 - 1 return product product_non_recursive = prod_non_recursive(num_1, num_2) print('The product of {} and {} is {}.'.format(num_1, num_2, product_non_recursive)) # Recursive algorithm def prod_recursive(num_1, num_2): if num_2 == 0: return 1 else: return num_1 * prod_recursive(num_1, num_2 - 1) product_recursive = prod_recursive(num_1, num_2) print('The product of {} and {} is {}.'.format(num_1, num_2, product_recursive))"},{"prompt":"Construct a SQL query to find all the authors whose book titles contain python in a given database.","completion":"SELECT author FROM books WHERE title LIKE '%python%';"},{"prompt":"Build a function in Python to test whether a string is a palindrome. aba","completion":"def is_palindrome(s): # Reverse the string rev = s[::-1] # Check if the string is equal to its reverse if (s == rev): return True return False # Driver code s = \\"aba\\" ans = is_palindrome(s) if ans == 1: print(\\"Yes\\") else: print(\\"No\\")"},{"prompt":"Write a python program to search through a list of integers and find the smallest number. int_list = [25, 64, 11, 43, 7]","completion":"def find_smallest(int_list): # set the minimum value to the first item in the list initially min_val = int_list[0] # loop over the list and compare each item to the minimum value for num in int_list: if num < min_val: min_val = num # return the minimum value return min_val"},{"prompt":"Create a Python function that takes two strings as input and returns the total of the lengths of the two strings. string1 = example string2 = string","completion":"def string_length_sum(string1, string2): return len(string1) + len(string2) result = string_length_sum(string1, string2)"},{"prompt":"Write a Python program to create a Tic Tac Toe game.","completion":"\\"\\"\\" Write a Python program to create a Tic Tac Toe game \\"\\"\\" # global variables board = [\\"-\\", \\"-\\", \\"-\\", \\"-\\", \\"-\\", \\"-\\", \\"-\\", \\"-\\", \\"-\\"] game_is_still_going = True # who is the winner winner = None # whose turn is it current_player = \\"X\\" # display board def display_board(): print(board[0] + \\" | \\" + board[1] + \\" | \\" + board[2]) print(board[3] + \\" | \\" + board[4] + \\" | \\" + board[5]) print(board[6] + \\" | \\" + board[7] + \\" | \\" + board[8]) # play a game of tic tac toe def play_game(): # display initial board display_board() # while game is still going while game_is_still_going: # assign handle turn to a variable handle_turn(current_player) # check if game is finished check_if_game_over() # flip to another player flip_player() # check if winner if winner == \\"X\\" or winner == \\"O\\": print(\\"Winner is: \\" + winner) elif winner == None: print(\\"Tie.\\") # handle a single turn of a player def handle_turn(player): position = input(\\"Choose a position from 1-9: \\") position = int(position) - 1 board[position] = player display_board() # check win def check_if_game_over(): check_if_win() check_if_tie() # check rows, columns and diagonals for a win def check_if_win(): # set global variables global winner # check rows row_winner = check_rows() # check columns column_winner = check_columns() # check diagonals diagonal_winner = check_diagonals() if row_winner: # there is a win winner = row_winner elif column_winner: # there is a win winner = column_winner elif diagonal_winner: # there is a win winner = diagonal_winner else: # there is no win winner = None return # check rows for a win def check_rows(): # set global varibales global game_is_still_going # check if any of the rows have all the same values (and is not empty) row_1 = board[0] == board[1] == board[2] != \\"-\\" row_2 = board[3] == board[4] == board[5] != \\"-\\" row_3 = board[6] == board[7] == board[8] != \\"-\\" # if any row does have a match, flag that there is a win if row_1 or row_2 or row_3: game_is_still_going = False # return the winner (X or O) if row_1: return board[0] elif row_2: return board[3] elif row_3: return board[6] # or return None if there was no win else: return None # check columns for a win def check_columns(): # set global variables global game_is_still_going # check if any of the columns have all the same values (and is not empty) column_1 = board[0] == board[3] == board[6] != \\"-\\" column_2 = board[1] == board[4] == board[7] != \\"-\\" column_3 = board[2] == board[5] == board[8] != \\"-\\" # if any column does have a match, flag that there is a win if column_1 or column_2 or column_3: game_is_still_going = False # return the winner (X or O) if column_1: return board[0] elif column_2: return board[1] elif column_3: return board[2] # or return None if there was no win else: return None # check diagonals for a win def check_diagonals(): # set global variables global game_is_still_going # check if any of the diagonals have all the same values (and is not empty) diagonal_1 = board[0] == board[4] == board[8] != \\"-\\" diagonal_2 = board[2] == board[4] == board[6] != \\"-\\" # if any diagonal does have a match, flag that there is a win if diagonal_1 or diagonal_2: game_is_still_going = False # return the winner (X or O) if diagonal_1: return board[0] elif diagonal_2: return board[2] # or return None if there was no win else: return None # check if there is a tie def check_if_tie(): # set global variables global game_is_still_going # if board is full if \\"-\\" not in board: game_is_still_going = False # return true if there is a tie, false if not return # flip to another player def flip_player(): # global variables we need global current_player # if current player was x, make it o if current_player == \\"X\\": current_player = \\"O\\" # if current player was o, make it x elif current_player == \\"O\\": current_player = \\"X\\" if __name__ == '__main__': play_game()"},{"prompt":"Write a Python program to remove all duplicate items from a list. [1, 2, 2, 4, 5]","completion":"def remove_duplicates(lst): return list(dict.fromkeys(lst)) result = remove_duplicates([1, 2, 2, 4, 5]) print(result)"},{"prompt":"Given a string as an argument, write a Python function to find the longest palindrome in the string.","completion":"def longest_palindrome(s): longest_p = 0 for i in range(len(s)): for j in range(i+1,len(s)+1): if s[i:j] == s[j-1::-1] and len(s[i:j]) > longest_p: longest_p = len(s[i:j]) return longest_p"},{"prompt":"Optimize a given Python code to find all prime numbers up to a given limit. n = 10 for num in range(2, n+1): for i in range(2, num): if num % i == 0: break else: print(num, end = ' ')","completion":"# Optimized Python code to find prime numbers in a range # using primality tests def is_prime(num): if num <= 1: return False for i in range(2, num): if (num % i) == 0: return False return True # Generate a range of consecutive numbers # and check for each if it is prime def prime_numbers(n): for num in range(2, n+1): if is_prime(num): print(num, end=' ') # Driver code if __name__ == '__main__': n = 10 prime_numbers(n)"},{"prompt":"Write a Python code to find the second most frequent value in the given array. [1, 2, 3, 3, 3, 2, 4, 4, 1, 5]","completion":"def second_most_frequent(arr): counts = {} # Count the frequency of the elements for item in arr: if item in counts: counts[item] += 1 else: counts[item] = 1 # Sort the list by frequency sorted_count = sorted(counts.items(), key=lambda x: x[1], reverse=True) # Return the second most frequent element return sorted_count[1][0] print(second_most_frequent([1, 2, 3, 3, 3, 2, 4, 4, 1, 5]))"},{"prompt":"Optimize the following python code array to get the maximum value from it in one pass. [5, 2, 3, 4, 6, 8]","completion":"def find_max(arr): max_so_far = arr[0] current_max = arr[0] for i in range(1, len(arr)): current_max = max(arr[i], current_max + arr[i]) max_so_far = max(max_so_far, current_max) return max_so_far arr = [-5, 2, 3, 4, 6, -8] max_val = find_max(arr) print(max_val) # 10"},{"prompt":"Write a python program to print the least common multiple of two integers 6, 8","completion":"def lcm(x, y): if x > y: greater = x else: greater = y while(True): if((greater % x == 0) and (greater % y == 0)): lcm = greater break greater += 1 return lcm"},{"prompt":"Create a Python program to edit a string and remove the vowels from it. Hello world","completion":"def remove_vowels(string): vowels = \\"aeiouAEIOU\\" result = \\"\\" for character in string: if character not in vowels: result += character return result print (remove_vowels(\\"Hello world\\"))"},{"prompt":"Create a Python class for a rectangle with properties for the length and width and methods for finding the area and perimeter. No Inpu","completion":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def area(self): return self.length * self.width def perimeter(self): return (2 * self.length) + (2 * self.width)"},{"prompt":"Optimize a given code in Python to run faster. def factorial(n): fact = 1 while n > 0: fact *= n n = 1 return fac","completion":"def factorial(n): fact = 1 while n > 1: fact *= n n -= 1 return fact # Eliminated unnecessary check for n > 0, as n will always be greater than 0 before the loop begins. This makes the function run faster."},{"prompt":"Convert the given JSON object to a Python list. {name: John, age: 25, hobby: programming}","completion":"data = {\\"name\\": \\"John\\", \\"age\\": 25, \\"hobby\\": \\"programming\\"} list = list(data.values()) print(list) # Output: [\\"John\\", 25, \\"programming\\"]"},{"prompt":"Train a linear regression model using Python to predict the prices of houses.","completion":"import pandas as pd from sklearn.linear_model import LinearRegression #load dataset df = pd.read_csv(\\"housing_data.csv\\") #split dataset X = df.drop(\\"price\\", axis=1) y = df[\\"price\\"] #train model model = LinearRegression() model.fit(X, y)"},{"prompt":"Write a Python program to perform sentiment analysis using a pretrained model. Not applicable","completion":"import torch # Load the pre-trained model model = torch.load('model.pt') # Get the input data input_data = \\"This movie was amazing!\\" # Convert the input data into a tensor input_tensor = torch.tensor([input_data]) # Make a prediction with the pre-trained model prediction = model(input_tensor) # Get the results if prediction[0][0].item() > 0.5: print('Positive sentiment') else: print('Negative sentiment')"},{"prompt":"Design a function in Python that takes two lists as input and returns the elements in common. list1 = [2, 3, 4, 5] list2 = [1, 2, 4, 5]","completion":"list1 = [2, 3, 4, 5] list2 = [1, 2, 4, 5] def common_elements(list1, list2): result = [] for item in list1: if item in list2: result.append(item) return result print(common_elements(list1, list2))"},{"prompt":"Write a short Python script to compute the average temperature of a given set of temperatures. temperatures = [71,77,82,81,75,72,78]","completion":"def average(temperatures): total = 0 for temp in temperatures: total += temp return total/len(temperatures) print(average(temperatures))"},{"prompt":"This code is a Python script that renders a stereo scene using OpenGL. To use it, follow these steps: 1. Install Python and OpenGL. 2. Run the script in a Python environment. 3. Wait for the scene to render in a new window. 4. Use the arrow keys to move the objects in the scene. 5. Press the ESC key to quit the program.","completion":"#!/usr/bin/python '''Test for an openGL based stereo renderer - test binocular rendering to a single window David Dunn Feb 2017 - created www.qenops.com ''' __author__ = ('David Dunn') __version__ = '1.0' import OpenGL OpenGL.ERROR_CHECKING = False # Uncomment for 2x speed up OpenGL.ERROR_LOGGING = False # Uncomment for speed up #OpenGL.FULL_LOGGING = True # Uncomment for verbose logging #OpenGL.ERROR_ON_COPY = True # Comment for release import OpenGL.GL as GL import math, os import numpy as np import dGraph as dg import dGraph.ui as ui import dGraph.cameras as dgc import dGraph.shapes as dgs import dGraph.materials as dgm import dGraph.shaders as dgshdr import dGraph.config as config import dGraph.util.imageManip as im import time MODELDIR = '%s/data'%os.path.dirname(__file__) WINDOWS = [{ \\"name\\": 'Test 5', \\"location\\": (0, 0), #\\"location\\": (2436, 1936), # px coordinates of the startup screen for window location #\\"size\\": (1920, 1080), \\"size\\": (1600,800), # px size of the startup screen for centering \\"center\\": (400,400), # center of the display \\"refresh_rate\\": 60, # refreshrate of the display for precise time measuring \\"px_size_mm\\": 0.09766, # px size of the display in mm \\"distance_cm\\": 20, # distance from the viewer in cm, #\\"is_hmd\\": False, #\\"warp_path\\": 'data/calibration/newRight/', }, ] def loadScene(renderStack, file=None, cross=False): '''Load or create our sceneGraph''' scene = dg.SceneGraph(file) stereoCam = dgc.StereoCamera('front', scene) stereoCam.setResolution((renderStack.width/2, renderStack.height)) stereoCam.setTranslate(0.,-.06,0.) stereoCam.setRotate(20.,0.,0.) stereoCam.setFOV(50.) stereoCam.IPD = .062 crosses = [ #np.array((.031,.0,-10.)), #np.array((-.031,.0,-10.)), np.array((-.2,-.2,-10.)), np.array((-.2,.0,-10.)), np.array((-.2,.2,-10.)), np.array((.0,-.2,-10.)), np.array((.0,.0,-10.)), np.array((.0,.2,-10.)), np.array((.2,-.2,-10.)), np.array((.2,.0,-10.)), np.array((.2,.2,-10.)), ] for idx, position in enumerate(crosses): cross = dgs.PolySurface('cross%s'%idx, scene, file = '%s/cross.obj'%MODELDIR) cross.setScale(.01,.01,.01) cross.translate = position renderStack.objects[cross.name] = cross print(1,(idx/3.)/3.+1/3.,(idx%3)/3.+1/3.) material = dgm.Material('material%s'%idx,ambient=(1,(idx/3.)/3.+1/3.,(idx%3)/3.+1/3.), amb_coeff=.5) #material = dgm.Lambert('material%s'%idx,ambient=(1,0,0), amb_coeff=.5, diffuse=(1,1,1), diff_coeff=1) cross.setMaterial(material) renderStack.cameras = [stereoCam] renderStack.append(stereoCam) return True def animateScene(renderStack, frame): ''' Create motion in our scene ''' # infinity rotate: y = 1 x = math.cos(frame*math.pi/60) for obj in renderStack.objects.itervalues(): obj.rotate += np.array((x,y,0.)) def addInput(): for rs in renderStack: ui.add_key_callback(arrowKey, ui.KEY_RIGHT, renderStack=rs, direction=3) ui.add_key_callback(arrowKey, ui.KEY_LEFT, renderStack=rs, direction=2) ui.add_key_callback(arrowKey, ui.KEY_UP, renderStack=rs, direction=1) ui.add_key_callback(arrowKey, ui.KEY_DOWN, renderStack=rs, direction=0) def arrowKey(window,renderStack,direction): for o in renderStack.objects: if direction == 3: # print \\"right\\" o.rotate(np.array((0.,5.,0.))) elif direction == 2: # print \\"left\\" o.rotate(-np.array((0.,5.,0.))) elif direction == 1: # print 'up' o.translate(np.array((0.,.01,0.))) else: # print \\"down\\" o.translate(-np.array((0.,.01,0.))) def drawScene(renderStack): ''' Render the stack ''' myStack = list(renderStack) # copy the renderStack so we can pop and do it again next frame temp = myStack.pop() temp.render(renderStack.width, renderStack.height, myStack) # Render our warp to screen def setup(): winData = WINDOWS[0] renderStack = ui.RenderStack() renderStack.display = ui.Display(resolution=winData['size']) ui.init() mainWindow = renderStack.addWindow(ui.open_window(winData['name'], winData['location'][0], winData['location'][1], renderStack.display.width, renderStack.display.height)) if not mainWindow: ui.terminate() exit(1) ui.make_context_current(mainWindow) ui.add_key_callback(ui.close_window, ui.KEY_ESCAPE) scenes = [loadScene(renderStack) for renderStack in renderStacks] for rs in renderStacks: rs.graphicsCardInit() return renderStacks, scenes, windows def runLoop(renderStack, mainWindow): # Print message to console, and kick off the loop to get it rolling. print(\\"Hit ESC key to quit.\\") frame = 0 start = time.time() while not ui.window_should_close(mainWindow): ui.make_context_current(mainWindow) drawScene(renderStack) now = time.time() time.sleep(max((frame+1)/config.maxFPS+start-now,0)) ui.swap_buffers(mainWindow) ui.poll_events() #animateScene(renderStack, frame) frame += 1 ui.terminate() exit(0) if __name__ == '__main__': renderStack, scene, windows = setup() addInput() runLoop(renderStack, windows[0])"},{"prompt":"Update the existing code in the following Python program to generate a list of prime numbers in a given range.","completion":"def generate_prime_numbers(start, end): for i in range(start, end + 1): is_prime = True # check for all numbers from 2 to (i - 1) for j in range(2, i): if i % j == 0: is_prime = False break if is_prime: print(i, end=\\" \\")"},{"prompt":"Create a class in Python that describes a student. This class should have public attributes for their name, age, grade level and major.","completion":"class Student: def __init__(self, name, age, grade, major): self.name = name self.age = age self.grade = grade self.major = major"},{"prompt":"Write a Python program to compute the readability score of a given text. text = Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.","completion":"def compute_readability(text): \\"\\"\\"Compute the readability score of a given text\\"\\"\\" words = 0 sentences = 0 syllables = 0 for word in text.split(): words += 1 syllables += count_syllables(word) for sentence in text.split(\\".\\"): sentences += 1 score = 206.835 - (1.015 * (words / sentences)) - (84.6 * (syllables / words)) return score def count_syllables(word): \\"\\"\\"Count the number of syllables in a given word\\"\\"\\" vowels = \\"aeiouAEIOU\\" syllables = 0 for letter in word: if letter in vowels: syllables += 1 if len(word) >= 3 and word[-3:] == \\"ely\\" or word[-2:] == \\"es\\": syllables -= 1 return syllables"},{"prompt":"This code checks if files changed in git match the .clangformat specification. To use it, run the \`cli()\` function with the following arguments: \`fileextensions\`: a commaseparated list of file extensions to check (default is \`.cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp\`) \`exclude\`: a list of files or directories to exclude from the check \`clangformatbin\`: the path to the clangformat binary (default is \`clangformat\`) \`gitbin\`: the path to the git binary (default is \`git\`)","completion":"#!/usr/bin/env python import argparse import os import sys import subprocess def check_file(filename, excludes, extensions): \\"\\"\\" Check if a file should be included in our check \\"\\"\\" name, ext = os.path.splitext(filename) if len(ext) > 0 and ext in extensions: if len(excludes) == 0: return True for exclude in excludes: if exclude in filename: return False return True return False def check_directory(directory, excludes, extensions): output = [] if len(excludes) > 0: for exclude in excludes: if exclude in directory: directory_excluded = False return output for root, _, files in os.walk(directory): for file in files: filename = os.path.join(root, file) if check_file(filename, excludes, extensions): print(\\"Will check file [{}]\\".format(filename)) output.append(filename) return output def get_git_root(git_bin): cmd = [git_bin, \\"rev-parse\\", \\"--show-toplevel\\"] try: return subprocess.check_output(cmd).strip() except subprocess.CalledProcessError, e: print(\\"Error calling git [{}]\\".format(e)) raise def clean_git_filename(line): \\"\\"\\" Takes a line from git status --porcelain and returns the filename \\"\\"\\" file = None git_status = line[:2] # Not an exhaustive list of git status output but should # be enough for this case # check if this is a delete if 'D' in git_status: return None # ignored file if '!' in git_status: return None # Covers renamed files if '->' in line: file = line[3:].split('->')[-1].strip() else: file = line[3:].strip() return file def get_changed_files(git_bin, excludes, file_extensions): \\"\\"\\" Run git status and return the list of changed files \\"\\"\\" extensions = file_extensions.split(\\",\\") # arguments coming from cmake will be *.xx. We want to remove the * for i, extension in enumerate(extensions): if extension[0] == '*': extensions[i] = extension[1:] git_root = get_git_root(git_bin) cmd = [git_bin, \\"status\\", \\"--porcelain\\", \\"--ignore-submodules\\"] print(\\"git cmd = {}\\".format(cmd)) output = [] returncode = 0 try: cmd_output = subprocess.check_output(cmd) for line in cmd_output.split('n'): if len(line) > 0: file = clean_git_filename(line) if not file: continue file = os.path.join(git_root, file) if file[-1] == \\"/\\": directory_files = check_directory( file, excludes, file_extensions) output = output + directory_files else: if check_file(file, excludes, file_extensions): print(\\"Will check file [{}]\\".format(file)) output.append(file) except subprocess.CalledProcessError, e: print(\\"Error calling git [{}]\\".format(e)) returncode = e.returncode return output, returncode def run_clang_format(clang_format_bin, changed_files): \\"\\"\\" Run clang format on a list of files @return 0 if formatted correctly. \\"\\"\\" if len(changed_files) == 0: return 0 cmd = [clang_format_bin, \\"-style=file\\", \\"-output-replacements-xml\\"] + changed_files print(\\"clang-format cmd = {}\\".format(cmd)) try: cmd_output = subprocess.check_output(cmd) if \\"replacement offset\\" in cmd_output: print(\\"ERROR: Changed files don't match format\\") return 1 except subprocess.CalledProcessError, e: print(\\"Error calling clang-format [{}]\\".format(e)) return e.returncode return 0 def cli(): # global params parser = argparse.ArgumentParser(prog='clang-format-check-changed', description='Checks if files chagned in git match the .clang-format specification') parser.add_argument(\\"--file-extensions\\", type=str, default=\\".cpp,.h,.cxx,.hxx,.hpp,.cc,.ipp\\", help=\\"Comma separated list of file extensions to check\\") parser.add_argument('--exclude', action='append', default=[], help='Will not match the files / directories with these in the name') parser.add_argument('--clang-format-bin', type=str, default=\\"clang-format\\", help=\\"The clang format binary\\") parser.add_argument('--git-bin', type=str, default=\\"git\\", help=\\"The git binary\\") args = parser.parse_args() # Run gcovr to get the .gcda files form .gcno changed_files, returncode = get_changed_files( args.git_bin, args.exclude, args.file_extensions) if returncode != 0: return returncode return run_clang_format(args.clang_format_bin, changed_files) if __name__ == '__main__': sys.exit(cli())"},{"prompt":"Write a function in Python to generate random numbers within a desired range.","completion":"import random # define a function to generate random numbers def generate_random(start, end): return random.randint(start, end) # generate a random number in the given range start = 10 end = 15 print(generate_random(start, end))"},{"prompt":"Can you produce a program that demonstrates the basics of how to use object oriented programming in Python? <noinput>","completion":"# Python program to display introduction of # Object Oriented Programming # Creating a class class Person: # Constructor def __init__(self, name, age): self.name = name self.age = age # Method def introduce_self(self): print(\\"I'm {0} aged {1}.\\".format(self.name, self.age)) # Instantiating an object p1 = Person(\\"John\\", 25) # Calling a method p1.introduce_self()"},{"prompt":"Create an algorithm in Python to calculate the maximum sum of a subarray of an int array. Given an array arr = [2, 1, 3, 5, 7, 3].","completion":"def max_sum_subarray(arr): n = len(arr) max_sum = 0 for i in range(n): sum = arr[i] for j in range(i + 1, n): sum += arr[j] if sum > max_sum: max_sum = sum return max_sum # Test array arr = [2, -1, 3, 5, -7, 3] # Function Call max_sum = max_sum_subarray(arr) # Printing maximum sum print(\\"Maximum sum of the sub-array is\\", max_sum) # Output: Maximum sum of the sub-array is 8"},{"prompt":"Create a Python program that produces the output shown in this example. 3 3 3 3 3 3","completion":"def print_grid(grid_size): for x in range(grid_size): for y in range(grid_size): print(grid_size, end=\\" \\") print() grid_size = 3 print_grid(grid_size)"},{"prompt":"w can you create a Python function that prints the number of characters in a string?","completion":"def char_count(string): count = 0 for char in string: count += 1 print(\\"Number of characters:\\", count)"},{"prompt":"Create a Python program to generate and print out a calendar for a given month.","completion":"import calendar # Input the year and month year = int(input('Enter year: ')) month = int(input('Enter month: ')) # Generate the calendar cal = calendar.month(year, month) # Print the calendar print(cal)"},{"prompt":"Write a Python program to print a given number in words 123","completion":"def number_to_words(num): units_list = {\\"0\\": \\"Zero\\", \\"1\\": \\"One\\", \\"2\\": \\"Two\\", \\"3\\": \\"Three\\", \\"4\\": \\"Four\\", \\"5\\": \\"Five\\", \\"6\\": \\"Six\\", \\"7\\": \\"Seven\\", \\"8\\": \\"Eight\\", \\"9\\": \\"Nine\\"} tens_list = { \\"10\\": \\"Ten\\", \\"11\\": \\"Eleven\\", \\"12\\": \\"Twelve\\", \\"13\\": \\"Thirteen\\", \\"14\\": \\"Fourteen\\", \\"15\\": \\"Fifteen\\", \\"16\\": \\"Sixteen\\", \\"17\\": \\"Seventeen\\", \\"18\\": \\"Eighteen\\", \\"19\\": \\"Nineteen\\", \\"20\\": \\"Twenty\\", \\"30\\": \\"Thirty\\", \\"40\\": \\"Forty\\", \\"50\\": \\"Fifty\\", \\"60\\": \\"Sixty\\", \\"70\\": \\"Seventy\\", \\"80\\": \\"Eighty\\", \\"90\\": \\"Ninety\\"} output = \\"\\" if num in units_list: output += units_list[str(num)] elif num in tens_list: output += tens_list[str(num)] else: if len(str(num)) >= 3: output += units_list[str(num)[0]] + \\" Hundred \\" output += number_to_words(int(str(num)[1:])) else: output += tens_list[str(num)[0]+\\"0\\"] + \\" \\" output += units_list[str(num)[1]] return output result = number_to_words(123) print(result)"},{"prompt":"Given a list of words, write a Python program to group the anagrams (words which have the same letters in a different order) together. [tea, eat, ate, apple, plea, rat, tar]","completion":"def anagram_grouping(words): anagrams = dict() #loop through the list and sort each word for word in words: sorted_word = ''.join(sorted(word)) # check if sorted word exists as a key in dictionary if sorted_word not in anagrams: anagrams[sorted_word] = [word] #add key and word to dict else: anagrams[sorted_word].append(word) #add word to existing anagrams #create a list of anagrams result = [] for values in anagrams.values(): result.append(values) return result words = [\\"tea\\", \\"eat\\", \\"ate\\", \\"apple\\", \\"plea\\", \\"rat\\", \\"tar\\"] ans = anagram_grouping(words) print(ans)"},{"prompt":"Write an efficient algorithm to optimize the given code in Python. def my_process(data): result = [] for item in data: processed_data = do_process(item) result.append(processed_data) return resul","completion":"def my_process(data): result = [] for item in data: processed_data = do_process(item) result.append(processed_data) return result def my_optimized_process(data): return [do_process(item) for item in data]"},{"prompt":"Generate a Python code snippet to rearrange an array of integers into an alternate order of even and odd elements.","completion":"def rearrange(arr): even, odd = [], [] for n in arr: if n % 2 == 0: even.append(n) else: odd.append(n) return [item for pair in zip(even, odd) for item in pair]"},{"prompt":"Create a class in Python named Employee with 3 instance variables name, salary, and age.","completion":"class Employee(): def __init__(self, name, salary, age): self.name = name self.salary = salary self.age = age"},{"prompt":"Convert the given algorithm written in pseudo code to Python. Input: Array A 1. from i=1 to i=length[A] 2. j=i 3. min = A[i] 4. for j = i+1 to length[A] 5. if min > A[j] 6. min = A[j] 7. swap A[i] with A[j]","completion":"def selection_sort(A): for i in range(len(A)): minimum = i for j in range(i+1, len(A)): if A[minimum] > A[j]: minimum = j A[i], A[minimum] = A[minimum], A[i]"},{"prompt":"Build a classifier model in Python to classify text into two categories. Dataset: text1: I love cats label1: 1 text2: I am scared of dogs label2: 0 Model Instructions: 1. Bring the dataset into the model. 2. Preprocess it. 3. Split the dataset into training and testing set. 4. Build a classification model using an appropriate algorithm.","completion":"#import necessary libraries import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB #load and allocate dataset dataset = pd.read_csv(\\"dataset.csv\\") X = dataset.Text y = dataset.Label #Preprocessing cv = CountVectorizer() X = cv.fit_transform(X) #Split the data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y) #Model training clf = MultinomialNB() clf.fit(X_train,y_train) #Evaluate the model score = clf.score(X_test,y_test) print(\\"Accuracy of model: \\",score)"},{"prompt":"Edit this code snippet in Python to remove any errors and improve readability. def remove_arr(arr): result =[]; for a in arr: if a != 'b' result.append(a) return resul","completion":"def remove_arr(arr): result = [] for a in arr: if a != 'b': result.append(a) return result"},{"prompt":"Generate a function which implements a backwards for loop in Python.","completion":"def backwards_for_loop(n): for i in range(n, 0, -1): # Do something with i print(i)"},{"prompt":"Create a python program to carry out the following tasks: Given an array of integers, find the two elements whose sum is closest to 0.","completion":"def find_closest_sum_of_two(arr): if len(arr) < 2: return None # initialize the closest sum and indicies closest_sum = arr[0] + arr[1] first_index = 0 second_index = 1 # loop through the array and check for closer sums for i in range(0, len(arr)): for j in range(i+1, len(arr)): if abs(arr[i] + arr[j]) < abs(closest_sum): closest_sum = arr[i] + arr[j] first_index = i second_index = j return arr[first_index], arr[second_index], closest_sum"},{"prompt":"Write a Python script to simulate a coin toss experiment.","completion":"import random def coin_toss(): coin_side = random.choice(['Heads', 'Tails']) print('The coin landed on', coin_side) coin_toss()"},{"prompt":"Create a python class that implements a stack.","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def isEmpty(self): return self.items == [] def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"prompt":"Write a python function to parse a list of strings and extract the date that appears at the end of the strings? list_of_strings = [April 11th, 2019, July 2nd, 2018, October 16th, 2012]","completion":"def parse_list_of_strings(list_of_strings): date_list = [] for string in list_of_strings: date_to_add = datetime.strptime(string, '%B %dth, %Y') date_list.append(date_to_add) return date_list"},{"prompt":"Design a class in Python for storing employee information. The employee information should include name, age, salary and department. Not applicable","completion":"class Employee: def __init__(self, name, age, salary, department): self.name = name self.age = age self.salary = salary self.department = department def get_name(self): return self.name def get_age(self): return self.age def get_salary(self): return self.salary def get_department(self): return self.department"},{"prompt":"Create a Flask API endpoint in Python that accepts an array of numbers and returns the average of the numbers Not applicable","completion":"from flask import Flask, request, jsonify app = Flask(name) @app.route('/calculate_average', methods=['POST']) def calculate_average(): numbers = request.json['numbers'] # calculate the sum total = 0 for number in numbers: total += number # calculate the average average = total / len(numbers) return jsonify({'average': average}) if name == 'main': app.run(debug=True)"},{"prompt":"Design a Python program to convert all the lowercase letters to their corresponding uppercase letters in a given string.","completion":"def upper_string(str): res = \\"\\" for i in range(len(str)): if str[i].isupper(): res += str[i] else: res += chr(ord(str[i])-32) return res"},{"prompt":"Construct a Python script to find the average of three numbers. 10, 20, 30","completion":"def find_average(a, b, c): return (a + b + c) / 3 result = find_average(10, 20, 30) print(result) # 20"},{"prompt":"Write an algorithm in Python that calculates the maximum subarray of a given array. [2,1,3,4,1,2,1,5,4]","completion":"def max_subarray(arr): max_so_far = arr[0] max_ending_here = arr[0] for i in range(1, len(arr)): max_ending_here = max(arr[i], max_ending_here + arr[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"prompt":"Create a list of ten random numbers in Python.","completion":"import random random_numbers = [random.randint(1,50) for _ in range(10)]"},{"prompt":"Generate a Python program to implement the following feature: Search a phrase in a given string. Search the phrase to be or not to be in the string Whether 'tis nobler in the mind to suffer.","completion":"def search(phrase, string): if phrase in string: return True else: return False result = search(\\"to be or not to be\\", \\"Whether 'tis nobler in the mind to suffer\\") print(result)"},{"prompt":"Develop an algorithm in Python to sort an array of integers using the Merge Sort algorithm [6, 2, 5, 1, 8, 9, 0]","completion":"# Merge Sort Algorithm def merge(left, right): sortedList = [] i, j = 0, 0 while i < len(left) and j < len(right): if left[i] < right[j]: sortedList.append(left[i]) i += 1 else: sortedList.append(right[j]) j += 1 # Check if anything remains sortedList += left[i:] sortedList += right[j:] return sortedList def mergeSort(arr): # Base case, already sorted if len(arr) <= 1: return arr # Split in half mid = len(arr)/2 left = arr[:mid] right = arr[mid:] # Sort each half and merge left = mergeSort(left) right = mergeSort(right) return merge(left, right) # Driver Code arr = [6,2,5,1,8,9,0] sortedArr = mergeSort(arr) print(sortedArr) # Output: [0, 1, 2, 5, 6, 8, 9]"},{"prompt":"Create a version of the game 'Tictactoe' using Python.","completion":"# create Tic-tac-toe game board = [None] * 9 def draw_board(): row1 = \\"|{}|{}|{}|\\".format(board[0], board[1], board[2]) row2 = \\"|{}|{}|{}|\\".format(board[3], board[4], board[5]) row3 = \\"|{}|{}|{}|\\".format(board[6], board[7], board[8]) print() print(row1) print(row2) print(row3) print() def get_row_col(): row = int(input(\\"Enter row: \\")) col = int(input(\\"Enter col: \\")) index = (row * 3) + col return index def update_board(icon, index): board[index] = icon def is_victory(icon): # check victory across row across1 = (board[0] == icon) and (board[1] == icon) and (board[2] == icon) across2 = (board[3] == icon) and (board[4] == icon) and (board[5] == icon) across3 = (board[6] == icon) and (board[7] == icon) and (board[8] == icon) # check victory across column column1 = (board[0] == icon) and (board[3] == icon) and (board[6] == icon) column2 = (board[1] == icon) and (board[4] == icon) and (board[7] == icon) column3 = (board[2] == icon) and (board[5] == icon) and (board[8] == icon) # check victory across diagonal diagonal1 = (board[0] == icon) and (board[4] == icon) and (board[8] == icon) diagonal2 = (board[2] == icon) and (board[4] == icon) and (board[6] == icon) if (across1 or across2 or across3 or column1 or column2 or column3 or diagonal1 or diagonal2): return True else: return False while True: # player 1 index = get_row_col() update_board(\\"X\\", index) draw_board() if(is_victory(\\"X\\")): print(\\"Player 1 wins\\") break # player 2 index = get_row_col() update_board(\\"O\\", index) draw_board() if(is_victory(\\"O\\")): print(\\"Player 2 wins\\") break"},{"prompt":"Create a Flask Python service that serves an array of strings as JSON using a GET request. Not applicable","completion":"import json from flask import Flask, request, jsonify app = Flask(__name__) data = ['Apple', 'Banana', 'Carrot'] @app.route('/data', methods=['GET']) def serve_data(): return jsonify(data) if __name__ == '__main__': app.run()"},{"prompt":"Create a web api in Python, using Flask, that takes a search string and returns a collection of books that match that search. searchTerm: cat","completion":"from flask import Flask, jsonify import requests app = Flask(__name__) @app.route('/books/<string:search_term>') def search_books(search_term): url = 'https://www.googleapis.com/books/v1/volumes?q={}'.format(search_term) r = requests.get(url).json() books = r['items'] return jsonify(books) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Generate a program in Python for sorting the elements of an array in descending order. [2, 4, 1, 6, 5]","completion":"def sort_descending(arr): # Sort array from largest to smallest arr.sort(reverse=True) # Print result print(arr) # Test arr = [2, 4, 1, 6, 5] sort_descending(arr) # Output: [6, 5, 4, 2, 1]"},{"prompt":"Normalize the following text using Python. the Cat in the h","completion":"text = \\"the Cat in the hat\\" text = text.replace(' ', ' ').strip() print(text)"},{"prompt":"Write a service in Python that can be used to find the closest point to an input in a given set of coordinates. Input coordinates: (2, 3) Set of coordinates: [(2.1, 3.1), (1, 1), (0.5, 2.5)]","completion":"import math def find_closest_point(input_coordinates, coordinates_set): # Calculate the euclidean distance for each point in the set distances = [] for c in coordinates_set: dist = math.sqrt((input_coordinates[0] - c[0]) **2 + (input_coordinates[1] - c[1]) **2) distances.append(dist) # Find the index of the point with the smallest distance idx = distances.index(min(distances)) # Return the closest point return coordinates_set[idx] # Input coordinates input_coordinates = (2, 3) # Set of coordinates coordinates_set = [(2.1, 3.1), (1, 1), (0.5, 2.5)] # Find and print the closest point closest_point = find_closest_point(input_coordinates, coordinates_set) print('Closest point: ', closest_point)"},{"prompt":"Develop a Python program to calculate the area of a triangle using the side lengths. a=5, b=9, c=11","completion":"# Calculates the area of a triangle given the three side lengths def area_triangle(a, b, c): # Calculate the semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 return area # Driver Code a = 5 b = 9 c = 11 print(\\"Area of triangle is : \\", area_triangle(a, b, c))"},{"prompt":"Write a Python script that takes a given string and finds the longest palindromic substring in it.","completion":"def longest_palindromic_substring(s): n = len(s) L = [[0 for x in range(n)] for y in range(n)] # All substrings of length 1 are palindromes for i in range(n): L[i][i] = 1 # check all substring of length 2 for cl in range(2, n + 1): for i in range(n - cl + 1): j = i + cl - 1 if s[i] == s[j] and cl == 2: L[i][j] = 2 elif s[i] == s[j]: L[i][j] = L[i + 1][j - 1] + 2 else: L[i][j] = max(L[i][j - 1],L[i + 1][j]); # start position of the longest palindromic substring start = 0 length = 1 for i in range(n): if (length < L[i][n - 1]): length = L[i][n - 1] start = i return s[start - length + 1:start + length] print(longest_palindromic_substring(\\"abracadabra\\"))"},{"prompt":"Write a function in Python to generate n numbers of Fibonacci series.","completion":"def fibonacci_series(n): # First two terms a = 0 b = 1 c = 0 print(\\"Fibonacci Series:\\", end = \\" \\") print(a , b , end = \\" \\") for i in range(2,n): c = a + b a = b b = c print(c , end = \\" \\") # Output should come like # 0 1 1 2 3 5 8 13 21 34"},{"prompt":"Write a valid python statement to convert a dict to a list","completion":"mylist = list(mydict.items())"},{"prompt":"Create a python script to calculate the moving average of the given data Data: [2, 3, 5, 10, 11]","completion":"def moving_average(data, num_points): moving_average_list = [] for i in range(0, len(data)-num_points+1): window_sum = 0 for j in range(i, i+num_points): window_sum += data[j] moving_average_list.append(window_sum/num_points) return moving_average_list"},{"prompt":"mplement a Python program to check if a number is divisible by another number. 7, 2","completion":"def is_divisible(n, m): if (n % m == 0): return True else: return False print(is_divisible(7, 2)) # Outputs False"},{"prompt":"Write a python code to identify outliers in data using Standard Deviation methods. Data = [2, 3, 1, 4, 5, 6, 5, 8, 9, 10, 11, 12]","completion":"import numpy as np # Create data data = np.array([2, 3, 1, 4, 5, 6, 5, 8, 9, 10, 11, 12]) # Calculate mean and standard deviation mean = np.mean(data) std = np.std(data) # Set the boundaries lower_bound = mean - 3*std upper_bound = mean + 3*std # Find outliers outliers = [] for i in data: if i < lower_bound or i > upper_bound: outliers.append(i) # Print the outliers print(\\"Outliers:\\", outliers) \\"\\"\\" Outliers: [1, 11, 12] \\"\\"\\""},{"prompt":"Create a neural network in Python which can classify a given set of food posters as either Italian or Mexican. Train Data: Italian: Pizza poster Lasagna poster Spaghetti poster Mexican: Burrito poster Enchilada poster Taco poster","completion":"import tensorflow as tf # Set up the input and output data X = tf.placeholder(tf.float32, shape=[None, 3]) y = tf.placeholder(tf.float32, shape=[None, 2]) # Define the model model = tf.keras.Sequential() model.add(tf.keras.layers.Dense(6, activation=tf.nn.relu)) model.add(tf.keras.layers.Dense(2, activation=tf.nn.softmax)) # Train the model model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) model.fit(X, y, epochs=10)"},{"prompt":"Write a Python function to take a text string as an input, and generate a table of the frequencies of each letter in the string. sample_string = HelloWorld","completion":"def find_frequencies(sample_string): frequency_table = dict() for char in sample_string: if char in frequency_table: frequency_table[char] += 1 else: frequency_table[char] = 1 return frequency_table result = find_frequencies(\\"HelloWorld\\") print(result)"},{"prompt":"Generate a Python program to filter a list of strings to only return words that have 7 or more characters. words = ['Apple', 'Banana', 'Cabbage', 'Cucumber']","completion":"words = ['Apple', 'Banana', 'Cabbage', 'Cucumber'] def filter_list(words): filtered_list = [] for word in words: if len(word) >= 7: filtered_list.append(word) return filtered_list"},{"prompt":"Write a for loop in Python to print out the squared value of the numbers from 0 to 10.","completion":"for i in range(0,11): print(i**2)"},{"prompt":"Convert a given python data structure into a json string using json package data = { name: John, age: 30, location: Greece }","completion":"import json # convert python data structure to json data = { \\"name\\": \\"John\\", \\"age\\": 30, \\"location\\": \\"Greece\\" } data_string = json.dumps(data) print(data_string) # '{\\"name\\": \\"John\\", \\"age\\": 30, \\"location\\": \\"Greece\\"}'"},{"prompt":"Develop a Twitter bot in Python. The bot should search for a given hashtag, like the posts it finds, and follow their authors. Hashtag: #new","completion":"import tweepy # authentication for twitter api auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_secret) # create an API instance api = tweepy.API(auth) # search for posts with the hashtag for tweet in tweepy.Cursor(api.search, q='#news').items(10): # like post api.create_favorite(tweet.id) # follow the author api.create_friendship(tweet.user.id)"},{"prompt":"Write a Python program to parse a JSON object. The program should take as input a JSON object and print the parsed values. Sample JSON: { name: John, age: 24, hobbies: [Soccer, Dance] }","completion":"import json # sample json object data = { \\"name\\": \\"John\\", \\"age\\": 24, \\"hobbies\\": [\\"Soccer\\", \\"Dance\\"] } # parse the json object parsed_data = json.loads(data) # print the parsed values print(\\"Name: \\", parsed_data[\\"name\\"]) print(\\"Age: \\", parsed_data[\\"age\\"]) print(\\"Hobbies: \\", parsed_data[\\"hobbies\\"])"},{"prompt":"Create a Python script to help streamline the process of scraping data from a web page. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Get HTML content from target website r = requests.get('URL') html_doc = r.text # Create a beautiful soup object soup = BeautifulSoup(html_doc) # Find and extract desired data data = soup.select('SELECTOR') # Print extracted data for x in data: print(x.text)"},{"prompt":"Write a python class to represent a Person. The Person class will have name and age properties as well as a method that prints the name and age.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age def print_person(self): print('Name:', self.name, ', Age:', self.age)"},{"prompt":"Make an algorithm in Python for printing the maximum frequency of an element in an array. Data = [1, 4, 2, 6, 2, 1, 2, 9]","completion":"#Using Python def max_frequency_element(data): # Create an empty dictionary to store the frequency of each element frequency = {} # Iterate over the list and fill in the frequency dictionary for x in data: if x in frequency: frequency[x] += 1 else: frequency[x] = 1 # Now find the key with the maximum frequency maximum_frequency = 0 max_frequency_element = None for key, value in frequency.items(): if value > maximum_frequency: maximum_frequency = value max_frequency_element = key return max_frequency_element data = [1, 4, 2, 6, 2, 1, 2, 9] max_frequency_element = max_frequency_element(data) print(max_frequency_element) # Output: 2"},{"prompt":"Design an algorithm in Python that checks whether a given number is a perfect square.","completion":"def is_perfect_square(n): if n < 0: return False x = n while x*x > n: x = (x + n/x) // 2 return x*x == n"},{"prompt":"Write a Python program which prints all perfect numbers between 1 and a given number N (inclusive). 25","completion":"def print_perfect_numbers(N): for val in range(1, N + 1): sum = 0 for testval in range(1, val): if (val % testval) == 0: sum += testval if (sum == val): print(val)"},{"prompt":"To start pyHegel, import the module and call the function start_pyHegel(). If starting on Windows with the Console program, call start_console() instead.","completion":"# -*- coding: utf-8 -*- Copyrights and license # # # Copyright 2011-2015 Christian Lupien <christian.lupien@usherbrooke.ca> # # # # This file is part of pyHegel. http://github.com/lupien/pyHegel # # # # pyHegel is free software: you can redistribute it and/or modify it under # # the terms of the GNU Lesser General Public License as published by the # # Free Software Foundation, either version 3 of the License, or (at your # # option) any later version. # # # # pyHegel is distributed in the hope that it will be useful, but WITHOUT # # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or # # FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public # # License for more details. # # # # You should have received a copy of the GNU Lesser General Public License # # along with pyHegel. If not, see <http://www.gnu.org/licenses/>. # # # from __future__ import absolute_import # Use version according to option 5 in https://packaging.python.org/en/latest/single_source_version.html # make sure that new versions numbers compare properly when using # pkg_resources.parse_version __version__ = '1.0.0rc2' __copyright__ = '2011-2015 Christian Lupien' def start_pyHegel(): \\"\\"\\" This is the recommanded way to start pyHegel. It starts ipython in a standard way (pylab, autocall enabled,...) and then loads and initializes the pyHegel commands. If the python session was started with command line arguments --console, it will try to start pyHegel in the Console program that comes with pythonxy. This is windows only. If you later need access to the commands in a module: import pyHegel.commands as cmds cmds.get(somedevice) or from pyHegel.commands import * get(somedevice) or any other variants you want. \\"\\"\\" import sys import os if os.name == 'nt' and len(sys.argv) == 2 and sys.argv[1] == '--console': start_console() else: from . import main main.main_start() def start_console(): from . import win_console_helper win_console_helper.start_console()"},{"prompt":"Design a Python program that predicts a movie's popularity given its genre, rating, and release date. The input includes three parameters: genre (action), rating (8.5), and release date (20200210).","completion":"import pandas as pd # read the data file df = pd.read_csv('movie_data.csv') # feature engineering df['action'] = (df['genres'].str.contains('Action')) * 1 # define which features to be used features_df = df[['action','rating']] # define the target variable target = df.popularity # split data into train and test sets from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(features_df, target, test_size=0.2, random_state=42) # train a RandomForestRegressor model from sklearn.ensemble import RandomForestRegressor rf = RandomForestRegressor() rf.fit(X_train, y_train) # make prediction input_data = { 'action': 1, 'rating': 8.5, 'release_date': '2020-02-10' } prediction = rf.predict([input_data]) print(prediction) // Outputs the predicted movie popularity"},{"prompt":"Design a program that takes a date as input and calculates the day of the week that date falls on. 31/05/2020","completion":"#!/usr/bin/env python3 import datetime def dayOfWeek(date): year,month,day = map(int,date.split('/')) dayNumber = datetime.date(year, month, day).weekday() return [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"][dayNumber]"},{"prompt":"Create a Python program which takes a list of integers and prints a list containing only those integers which have more than 2 occurrences in the input list. list = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3]","completion":"list = [1, 2, 3, 4, 5, 2, 3, 1, 6, 3] def findDuplicates(list): result = [] seen = set() for num in list: if num not in seen: seen.add(num) else: result.append(num) return result print(findDuplicates(list))"},{"prompt":"Create a Python program that will count and print the number of vowels and consonants in a userprovided string. Declare a variable text that contains a sample string","completion":"text = 'This is a sample string' # Get the total number of characters total = len(text) # Count the number of vowels vowels = 0 for character in text: if character in 'aeiou': vowels += 1 # Count the number of consonants consonants = 0 for character in text: if character in 'bcdfghjklmnpqrstvwxyz': consonants += 1 # Print the result print(f\\"Vowels: {vowels}\\") print(f\\"Consonants: {consonants}\\") print(f\\"Total: {total}\\")"},{"prompt":"Create a Python program that takes in a 2D array and returns the sum of all the elements. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def sum_2D_array(arr): \\"\\"\\"Return the sum of all the elements in a 2D array.\\"\\"\\" sum_arr = 0 for row in arr: for elem in row: sum_arr += elem return sum_arr"},{"prompt":"mplement a logistic regression algorithm in Python to solve a classification task. Not applicable","completion":"import numpy as np class LogisticRegression: def __init__(self, learning_rate=0.001, max_iter=1000): self.learning_rate = learning_rate self.max_iter = max_iter self.weights = None def sigmoid(self, z): return 1 / (1 + np.exp(-z)) def fit(self, X, y): # add bias term to X X = np.hstack([np.ones([X.shape[0], 1]), X]) num_features = X.shape[1] self.weights = np.zeros(num_features) for _ in range(self.max_iter): # compute the linear combination of the input and weights (z) z = np.dot(X, self.weights) # compute the model output (a) a = self.sigmoid(z) # compute the cost of the model output cost = (-y * np.log(a) - (1 - y) * np.log(1 - a)).mean() # compute the derivatives of the cost for each weights dCost_dw = np.dot(X.T, (a - y)) / len(y) # update weights self.weights -= self.learning_rate * dCost_dw def predict(self, X): # add bias term to X X = np.hstack([np.ones([X.shape[0], 1]), X]) z = np.dot(X, self.weights) a = self.sigmoid(z) return np.round(a)"},{"prompt":"Develop a Python program to convert the following Fahrenheit value to Celsius. 212","completion":"def convert_to_celsius(fahrenheit): celsius = (fahrenheit - 32) / 1.8 return celsius fahrenheit = 212 celsius = convert_to_celsius(fahrenheit) print(celsius)"},{"prompt":"Create a program in Python to remove duplicates from a list and return the new list. arr = [1, 2, 3, 1, 4]","completion":"def remove_duplicates(arr): new_list = [] for item in arr: if item not in new_list: new_list.append(item) return new_list"},{"prompt":"Create a class in Python to manage the expiry dates of products.","completion":"class ProductExpiry: def __init__(self, product_id, expiry_date): self.product_id = product_id self.expiry_date = expiry_date def is_expired(self): \\"\\"\\"Returns True if the product has passed its expiry date, False otherwise\\"\\"\\" return datetime.now() > self.expiry_date def get_time_left(self): \\"\\"\\"Returns the number of days left before the product expires\\"\\"\\" time_left = (self.expiry_date - datetime.now()) days_left = time_left.days return days_left"},{"prompt":"Create a Python script that includes a function that returns the sum of the first n prime numbers. n = 5","completion":"import math def is_prime(num): # Check if the number is 1 or less than 1 if num <= 1: return False # Check if the number is divisible by any number between 2 and the square root of the number for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: return False return True def sum_primes(n): prime_sum = 0 count = 0 i = 2 while count < n: if is_prime(i): prime_sum += i count += 1 i += 1 return prime_sum sum_primes(n)"},{"prompt":"Design and generate a valid Java program that uses Stack Overflow's API to print all of the most recent questions and answers on a specific topic. Topic Pytho","completion":"import java.net.URL; import java.util.Scanner; public class QueryOverflow { public static void main(String[] args) throws Exception { URL url = new URL(\\"https://api.stackexchange.com/2.2/search?order=desc&sort=activity&tags=python&site=stackoverflow\\"); Scanner scan = new Scanner(url.openStream()); String str = new String(); while (scan.hasNext()) str += scan.nextLine(); scan.close(); JSONObject obj = new JSONObject(str); JSONArray items = obj.getJSONArray(\\"items\\"); for (int i = 0; i < items.length(); i++) { // print title System.out.println(items.getJSONObject(i).getString(\\"title\\")); // print answer System.out.println(items.getJSONObject(i).getJSONObject(\\"accepted_answer\\").getString(\\"body\\")); } } }"},{"prompt":"Write a Python function to check whether a number is in a given range. num = 10 lower = 10 upper = 20","completion":"def check_range(num, lower, upper): return (num >= lower and num <= upper) print(check_range(10, 10, 20)) # prints True"},{"prompt":"Connect to a database, retrieve data, and write it to a JSON file named extract.json. The code is written in Python and requires the SQLite3 library.","completion":"#!/usr/bin/python # -*- coding: utf-8 -*- # TESTING FILE made.by.a.fox. 12.2.15 # Updated by acrule 01.21.16 #FEATURE LIST # Y connect to db # Y write to file # Y Write JSON format # Accept input date parameter #KNOWN ISSUES # 2. no formatting or conversion of datetime stamps import re import os import sys import json import sqlite3 as lite import collections import time import datetime db_file = os.path.expanduser('~/.traces/traces.sqlite') #looks for db under ~/.traces con = lite.connect(db_file) with con: data = [] #master data container apps = [] #list of apps windows = [] # list of windows urls = [] appevents = [] #list of application events windowevents = [] #list of window events urlevents = [] exps = [] #list of experiences images = [] #list of screenshots words = [] #list of keywords cur = con.cursor() #SQL query strings appsSQL = \\"SELECT * FROM app\\" windowsSQL = \\"SELECT * FROM window\\" urlSQL = \\"SELECT * FROM url\\" activeappSQL = \\"SELECT a.id, a.app_id, a.event, a.time as startt, min(b.time) AS endt FROM appevent a, appevent b WHERE a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\\" activewindowSQL = \\"SELECT a.id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM windowevent a, windowevent b WHERE a.window_id = b.window_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\\" activeurlSQL = \\"SELECT a.id, a.url_id, a.app_id, a.window_id, a.event, a.time as startt, min(b.time) AS endt FROM urlevent a, urlevent b WHERE a.url_id = b.url_id AND a.window_id = b.window_id AND a.app_id = b.app_id AND a.event = 'Active' AND b.event in ('Inactive', 'Close') AND a.time < b.time AND a.time IS NOT NULL AND b.time IS NOT NULL GROUP BY startt\\" experienceSQL = \\"SELECT * FROM experience\\" wordsSQL = \\"SELECT * FROM keys\\" #GET list of applications cur.execute(appsSQL) rows = cur.fetchall() for row in rows: a = collections.OrderedDict() a['id'] = row[0] a['time'] = row[1] a['name'] = row[2] apps.append(a) #GET list of windows cur.execute(windowsSQL) rows = cur.fetchall() for row in rows: w = collections.OrderedDict() w['id'] = row[0] w['time'] = row[1] w['name'] = row[2] w['app'] = row[3] windows.append(w) #GET list of urls cur.execute(urlSQL) rows = cur.fetchall() for row in rows: u = collections.OrderedDict() u['id'] = row[0] u['time'] = row[1] u['title'] = row[2] u['url'] = row[3] u['host'] = row[4] urls.append(u) #GET list intervals for primary application cur.execute(activeappSQL) rows = cur.fetchall() for row in rows: a = collections.OrderedDict() a['id'] = row[0] a['appid'] = row[1] a['event'] = row[2] a['start'] = row[3] a['end'] = row[4] appevents.append(a) #GET list intervals for primary window cur.execute(activewindowSQL) rows = cur.fetchall() for row in rows: w = collections.OrderedDict() w['id'] = row[0] w['windowid'] = row[1] w['appid'] = (item for item in windows if item[\\"id\\"] == row[1]).next()['app'] w['event'] = row[2] w['start'] = row[3] w['end'] = row[4] windowevents.append(w) #GET list intervals for urls cur.execute(activeurlSQL) rows = cur.fetchall() for row in rows: u = collections.OrderedDict() u['id'] = row[0] u['urlid'] = row[1] u['appid'] = row[2] u['windowid'] = row[3] u['event'] = row[4] u['start'] = row[5] u['end'] = row[6] urlevents.append(u) #GET list of experiences cur.execute(experienceSQL) rows = cur.fetchall() for row in rows: a = collections.OrderedDict() a['id'] = row[0] a['text'] = row[2] exps.append(a) #GET list of screenshots image_dir = os.path.expanduser('~/.traces/screenshots') #looks for db under ~/.traces for y in os.listdir(image_dir): y_dir = os.path.join(image_dir,y) if not os.path.isdir(y_dir): continue for m in os.listdir(y_dir): m_dir = os.path.join(y_dir, m) if not os.path.isdir(m_dir): continue for d in os.listdir(m_dir): d_dir = os.path.join(m_dir, d) if not os.path.isdir(d_dir): continue for h in os.listdir(d_dir): h_dir = os.path.join(d_dir, h) if not os.path.isdir(h_dir): continue h_images = os.listdir(h_dir) for image in h_images: #make sure the file is an image if image[-4:] == '.jpg': i = collections.OrderedDict() image_time = datetime.datetime.strptime(image[0:19], '%y%m%d-%H%M%S%f') i['time'] = (image_time - datetime.datetime(1970,1,1)).total_seconds() + time.timezone #add timezone offset i['image'] = os.path.join(\\"screenshots\\", y, m, d, h, image) images.append(i) #GET keywords cmd_rows = [] newWord = ['Enter','Left','Right','Up','Down','Tab','Escape', ' '] starttime = 0.0 app = 0 window = 0 s = '' cur.execute(wordsSQL) rows = cur.fetchall() for row in rows: if 'Cmd' in row[3]: cmd_rows.append(row) else: text = str(row[2]) # if its a char indicating a new word, save our text token if text in newWord: # save our data if len(s) > 0: k = collections.OrderedDict() k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\\"%H:%M %m/%d/%y\\") k['text'] = s #just pass the whole string for now k['app'] = app k['window'] = window words.append(k) #reset tracking time starttime = float(row[1]) s = '' # if its a regular char on the same window, just keep building the string elif int(row[5]) == window: # and float(row[1]) - time <= 300.0: if text == 'Backspace': s = s[:-1] else: s += row[2] #else its a regular char but we switched windows, save the data else: if len(s) > 0: k = collections.OrderedDict() k['time'] = starttime #datetime.datetime.fromtimestamp(starttime).strftime(\\"%H:%M %m/%d/%y\\") k['text'] = s #just pass teh whole string for now k['app'] = app k['window'] = window words.append(k) #reset tracking variables window = int(row[5]) app = int(row[4]) starttime = float(row[1]) #write the character to start the next word if text in newWord or text == 'Backspace': s = '' else: s = row[2] #ASSEMBLE apps and experince into json d = collections.OrderedDict() d['apps']=apps d['window']=windows d['url']=urls d['appevents']=appevents d['windowevents']=windowevents d['urlevents']=urlevents d['exps']=exps d['images']=images d['words']=words data = d #WRITE file file = 'extract.json' z = open(file,'w') z.writelines(json.dumps(data))"},{"prompt":"Compose a python program to search an element in an array [2, 3, 4, 5]","completion":"def linear_search(arr, x): for i in range(len(arr)): if arr[i] == x: return i+1 return -1 arr = [2, 3, 4, 5] x = 4 print(linear_search(arr, x))"},{"prompt":"Create a class in Python using objectoriented programming that creates instance of a book.","completion":"class Book(object): def __init__(self, title, author, year_published): self.title = title self.author = author self.year_published = year_published def __str__(self): return '{0} by {1} published in {2}.'.format( self.title, self.author, self.year_published)"},{"prompt":"Write a Python script to implement an iterator that iterates over a given array. [2, 5, 6, 8, 9]","completion":"def iterator(array): index = 0 while (index < len(array)): yield array[index] index += 1 given_array = [2, 5, 6, 8, 9] iterating = iterator(given_array) for value in iterating: print(value)"},{"prompt":"Suggest a data structure in Python to store the following information about a list of students: Name, Age, Grade.","completion":"students = [ { 'name': 'John Doe', 'age': 18, 'grade': 'A' }, { 'name': 'Jane Smith', 'age': 16, 'grade': 'B' } ]"},{"prompt":"Write a python code to find the longest contiguous increasing subsequence in the following array. [3,6,9,1,2,3,4,5]","completion":"\\"\\"\\" Find the longest contiguous increasing subsequence \\"\\"\\" def long_increasing_subsequence(arr): n = len(arr) dp = [1 for x in range(n)] for i in range (1 , n): for j in range(0 , i): print (i,j) if (arr[i] > arr[j]) and (dp[i]< dp[j] + 1): dp[i] = dp[j]+1 maximum = 0 for i in range(n): maximum = max(maximum, dp[i]) return maximum arr =[3,6,9,1,2,3,4,5] longest_subsequence_length = long_increasing_subsequence(arr) print(longest_subsequence_length) # prints 5"},{"prompt":"Create a Python for loop that prints out each element in a given list. [10, 20, 30, 40]","completion":"for element in [10,20,30,40]: print(element)"},{"prompt":"Create a Python program to calculate the number of possible combinations of a given set of elements. range = [1, 2, 3]","completion":"def calculate_combinations(range): count = 0 # base case if len(range) == 0: return 0 if len(range) == 1: return 1 # recursive case for i in range: sub_set = range[:] sub_set.remove(i) count += calculate_combinations(sub_set) + 1 return count range = [1, 2, 3] print(calculate_combinations(range)) # Output: 6"},{"prompt":"Can you write a program in Python to remove the duplicate elements in a list? [5, 9, 2, 4, 5, 9, 2]","completion":"def remove_duplicates(arr): new_arr = [] for item in arr: if item not in new_arr: new_arr.append(item) return new_arr my_list = [5, 9, 2, 4, 5, 9, 2] print(remove_duplicates(my_list)) # Output: [5, 9, 2, 4]"},{"prompt":"Write a Python function to remove elements from a given list of integers, if the integer is a multiple of 3 list = [3, 6, 9, 11, 12, 15]","completion":"def remove_multiple_of_three(list): new_list = [] for item in list: if item % 3 != 0: new_list.append(item) return new_list"},{"prompt":"Create an algorithm in Python that uses a greedy approach to scheduling tasks. The algorithm should take in a list of tasks and the corresponding deadlines, and output a list of tasks that can be completed without exceeding any deadlines. [(Task A, 2), (Task B, 1), (Task C, 3)]","completion":"def schedule_tasks(tasks): scheduled_tasks = [] tasks.sort(key=lambda x: x[1]) # sort tasks by deadline current_time = 0 while len(tasks) > 0: for task in tasks: if current_time + task[1] <= task[2]: # check if the task can be completed before its deadline scheduled_tasks.append(task) # add the task to the list of scheduled tasks current_time += task[1] # update the current time tasks.remove(task) # remove the task from the list of tasks break # move on to the next task return scheduled_tasks schedule_tasks([(\\"Task A\\", 2), (\\"Task B\\", 1), (\\"Task C\\", 3)]); # returns [(\\"Task B\\", 1), (\\"Task A\\", 2)]"},{"prompt":"You need to create a python module to explain the Canny Edge Detection algorithm.","completion":"import numpy as np def cannyEdgeDetector(img, sigma): # Step 1: Filter the image with a Gaussian filter to remove noise blurred = gaussianFilter(img, sigma) # Step 2: Obtain the gradients (Gx, Gy) of the blurred image Gx, Gy = sobelFilter(blurred) # Step 3: Calculate the magnitude and angle of the gradient magnitude, angle = calculateGradient(Gx, Gy) # Step 4: Non-maximum suppression to thin the edges while retaining # strong edge points thin_image = nonMaximumSuppression(magnitude, angle) # Step 5: Double threshold to classify pixels as weak or strong edge strong_px, weak_px = doubleThreshold(thin_image) # Step 6: Trace through the edge map and obtain the final edges edges = followEdge(strong_px, weak_px) return edges"},{"prompt":"Write a Python program for predicting stock prices. A sample dataset with historic prices for Apple Inc. (AAPL)","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt # Read the dataset dataset = pd.read_csv('AAPL.csv') # Separate the dataset into features and labels #labels = dataset['Label'] y = np.array(dataset['Close']) dataset.drop(\\"Close\\", axis=1, inplace=True) x = np.array(dataset) # Split the data into training and testing sets from sklearn.model_selection import train_test_split x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25) # Create the model from sklearn.ensemble import RandomForestRegressor regressor = RandomForestRegressor(n_estimators=100) # Train the model regressor.fit(x_train, y_train) # Make predictions y_pred = regressor.predict(x_test) # Check the accuracy from sklearn.metrics import mean_squared_error mse = mean_squared_error(y_test, y_pred) print(\\"Mean squared error:\\", mse)"},{"prompt":"Create a machine learning model in Python that will classify each sentence as Positive, Neutral or Negative sentiment. Not applicable","completion":"import spacy import nltk from nltk.corpus import opinion_lexicon from sklearn.feature_extraction.text import CountVectorizer from sklearn.svm import LinearSVC # Download and create a spaCy model nlp = spacy.load('en_core_web_sm') # Create a list of positive, negative and neutral words positive_words = opinion_lexicon.positive() negative_words = opinion_lexicon.negative() neutral_words = list(set(nlp.vocab.words) - set(positive_words) - set(negative_words)) # Create a Bag of Words Vectorizer vectorizer = CountVectorizer(vocabulary=list(positive_words + neutral_words + negative_words)) def create_examples(words, sentiment): examples = [] # Create BOW for each example for w in words: bow = vectorizer.transform([w]) examples.append((bow, sentiment)) return examples # Create training examples positive_examples = create_examples(positive_words, 'POSITIVE') negative_examples = create_examples(negative_words, 'NEGATIVE') neutral_examples = create_examples(neutral_words, 'NEUTRAL') # Create training data train_data = positive_examples + negative_examples + neutral_examples # Train a classifier classifier = LinearSVC() classifier.fit([x[0] for x in train_data], [x[1] for x in train_data]) def predict_sentiment(sentence): # Create BOW of sentence bow = vectorizer.transform([sentence]) # Get sentiment sentiment = classifier.predict(bow)[0] return sentiment sentence = 'I had a great time today!' sentiment = predict_sentiment(sentence) print('The sentiment of the sentence is:', sentiment)"},{"prompt":"Optimize a Python program for space efficiency. The program should take input from the command line, and should determine whether a given threedigit number is an Armstrong number or not. ArmstrongNumber(371)","completion":"import math def ArmstrongNumber(num): sum = 0 temp_num = num digits_count = 0 while temp_num>0: digits_count += 1 temp_num = math.floor(temp_num/10) digits_sum = 0 while num > 0: r = num % 10 sum += math.pow(r, digits_count) num = math.floor(num/10) if sum == temp_num: print (f'{temp_num} is an Armstrong number') else: print (f'{temp_num} is not an Armstrong number ') num = int(input(\\"Enter a number: \\")) ArmstrongNumber(num)"},{"prompt":"Modify a Python program to encrypt a string using the XOR Cipher. current program: def xor_strings(xs, ys): return .join(chr(ord(x) ^ ord(y)) for x, y in zip(xs, ys)) password = TestPassword string = TopSecret print(xor_strings(password, string))","completion":"def xor_strings(xs, ys): output = \\"\\" for i in range(0, len(xs)): output += format(ord(xs[i]) ^ ord(ys[i]), '02x').upper() return output password = \\"TestPassword\\" string = \\"TopSecret\\" print(xor_strings(password, string))"},{"prompt":"Write a Python program to extract the first letter of each word in a sentence and print it as an acronym. This is a sample sentence.","completion":"SIS"},{"prompt":"Design a class to convert Fahrenheit to Celsius in Python.","completion":"class TempConverter: def __init__(self, temp_in_fahrenheit): self.temp_in_fahrenheit = temp_in_fahrenheit def convert_f_to_c(self): temp_in_celsius = (self.temp_in_fahrenheit - 32) * 5/9 return temp_in_celsius"},{"prompt":"Generate Python code that uses a list comprehension to take a given list of numbers and multiple each by 10. [1,2,3,4]","completion":"[x * 10 for x in [1,2,3,4]]"},{"prompt":"Create a function in Python that takes two matrices and prints the result of their subtraction. A = [[2, 5, 3], [1, 4, 7], [5, 2, 9]] B = [[4, 7, 0], [3, 2, 8], [1, 3, 6]]","completion":"def subtractMatrix(A, B): rowsA = len(A) colsA = len(A[0]) rowsB = len(B) colsB = len(B[0]) # Checking if the given two matrix are of same size if rowsB != rowsA or colsA != colsB: print(\\"ERROR\\") # Subtracting corresponding elements C = [[0 for j in range(colsA)] for i in range(rowsB)] for i in range(rowsA): for j in range(colsB): C[i][j] = A[i][j] - B[i][j] return C"},{"prompt":"Optimize a Python function that returns the value at the index of an array (list) of size n. [20, 30, 50, 70, 90]","completion":"def getValueAtIndex(arr, index): return arr[index] if index >= 0 and index < len(arr) else 0 print(getValueAtIndex([20, 30, 50, 70, 90], 3)) # 70"},{"prompt":"Create a data structure in Python to represent a classical play.","completion":"class Play(object): def __init__(self): self.characters = [] self.scenes = [] self.title = \\"\\" def add_character(self, character): self.characters.append(character) def add_scene(self, scene): self.scenes.append(scene) def set_title(self, title): self.title = title"},{"prompt":"Write a python program for searching for a specific product within a given list of products. products = [Apple, Banana, Cherry, Grape] search_query = Grape","completion":"# Define a search function def search (products, query): # Loop through list for product in products: if product == query: # Return the product index if it matches the query return products.index(product) # Get the index of the item result = search(products, search_query) # Print the result print(result)"},{"prompt":"Create a Machine Learning model in Python that predicts the direction of the stock market using historical data. Sample of 1000 days of State Street Corporation's stock prices.","completion":"import pandas as pd import numpy as np from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier df = pd.read_csv('stock_prices.csv') y = df['direction'].values X = df.drop(['date', 'direction'], axis=1).values X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) knn = KNeighborsClassifier(n_neighbors=3) knn.fit(X_train, y_train) accuracy = knn.score(X_test, y_test) print(\\"Model accuracy: {}%\\".format(round(accuracy*100, 2)))"},{"prompt":"Python print out the first 10 numbers of the Fibonacci sequence.","completion":"a, b = 0, 1 for i in range(10): print(a) a, b = b, a + b # Output: 0 1 1 2 3 5 8 13 21 34"},{"prompt":"Create a Python program to generate a random list of numbers between 1 to 20 and print out the largest and second largest ones. Not applicable","completion":"import random myList = [] for i in range(20): myList.append(random.randint(1,20)) print(\\"List of random numbers:\\", myList) myList.sort() largest_num = myList[len(myList)-1] second_largest_num = myList[len(myList)-2] print('Largest number:', largest_num) print('Second-largest number:', second_largest_num)"},{"prompt":"Design a function in Python to find the maximum pair sum from the list input. input_list = [20, 11, 33, 67, 89 ,34]","completion":"def maxPairSum(input_list): #assume the first and second elements are the max pair max_pair_sum = input_list[0] + input_list[1] # Keep track of the max pair pair_index_one = 0 pair_index_two = 1 # iterate through the entire list for index_one in range(0, len(input_list)): for index_two in range(index_one + 1, len(input_list)): # if the current pair sum is greater than the max pair sum # update the max pair sum and the pair indices if input_list[index_one] + input_list[index_two] > max_pair_sum: max_pair_sum = input_list[index_one] + input_list[index_two] pair_index_one = index_one pair_index_two = index_two #return the max pair sum return max_pair_sum"},{"prompt":"Build a basic web scraper using Python and Scrapy that can crawl a specific website and extract the content from the webpage. Website URL: https://www.example.com","completion":"import scrapy class ExampleSpider(scrapy.Spider): name = 'example' start_urls = ['https://www.example.com'] def parse(self, response): for item in response.css('div.listing-item') : yield { 'title' : item.css('h3.listing-title::text').get(), 'price' : item.css('span.price::text').get(), 'description' : item.css('p.description::text').get() }"},{"prompt":"Create a Python program that takes two lists of integers and prints the common elements between the two lists. list1 = [2, 4, 6, 8] list2 = [4, 8, 10]","completion":"list1 = [2, 4, 6, 8] list2 = [4, 8, 10] common_elements = list(set(list1).intersection(list2)) print(common_elements) # Output: [4, 8]"},{"prompt":"Design a function in Python to convert a given temperature in Celsius to Fahrenheit.","completion":"def celsius_to_fahrenheit(degrees_c): return (degrees_c * 9/5) + 32"},{"prompt":"Create a Django view in Python to retrieve user records from a database with pagination. Example Schema of User Table user_id | first_name | last_name | age | email Example of User Records user_id |first_name |last_name |age |email 1097 |John |Smith |25 |js@example.com 3785 |Michael |Johnson |30 |mj@example.com","completion":"from django.shortcuts import render from django.http import JsonResponse from django.core.paginator import Paginator # Create your views here. def get_user_records(request): page_num = request.GET.get('page', 1) page_size = int(request.GET.get('page_size', 10)) users = User.objects.all().order_by('user_id') paginator = Paginator(users, page_size) page_data = paginator.page(page_num) response_data = { 'data': [ { 'user_id': user.user_id, 'first_name': user.first_name, 'last_name': user.last_name, 'age': user.age, 'email': user.email } for user in page_data ] } return JsonResponse(response_data)"},{"prompt":"Create a Python program to find the sum of the Fibonacci sequence.","completion":"def fibonacci_sum(n): if n <= 1: return n previous = 0 current = 1 sum = 1 for _ in range(n - 1): previous, current = current, previous + current sum += current return sum"},{"prompt":"Create an algorithm in Python to find the first index of an item in an array. arr = [1,3,7,9,0,4] num = 7","completion":"def findIndex(arr, num): for index in range(len(arr)): if arr[index] == num: return index return -1 arr = [1,3,7,9,0,4] num = 7 index = findIndex(arr, num) print('Index of %d is %d' % (num, index)) # Index of 7 is 2"},{"prompt":"Create a program using Python to determine the words in a string with the highest frequency. Lorem ipsum dolor sit amet, consectetur adipiscing elit.","completion":"from collections import Counter string = \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\" words = string.split() cnt = Counter() for word in words: cnt[word] += 1 word, count = cnt.most_common(1)[0] print(f'Word with highest frequency is \\"{word}\\" occurring {count} times.') # Output Word with highest frequency is \\"dolor\\" occurring 1 times."},{"prompt":"Generate a Python program to sort an array of integers in linear time. [5, 4, 3, 1, 2]","completion":"def sort(arr): n = len(arr) for i in range(n): min_index = i # assuming current element is smallest # look for smallest element in the rest of the array for j in range(i+1, n): if arr[j] < arr[min_index]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] # swap return arr arr = [5, 4, 3, 1, 2] sorted_arr = sort(arr) print(sorted_arr)"},{"prompt":"Optimize an existing Python script by improving its runtime performance. import time start = time.time() def foo(): for _ in range(1000): print('Hello World') foo() end = time.time() print('Time Taken:', end start)","completion":"import time start = time.time() def foo(): for i in range(1000): print('Hello World', i) foo() end = time.time() print('Time Taken:', end - start)"},{"prompt":"Create a Web Scraper in Python to Scrape the Wikipedia page of a given musician and extract the discography.","completion":"import requests from bs4 import BeautifulSoup def get_discography(artist): base_url = \\"https://en.wikipedia.org/wiki/\\" # Wikipedia base URL artist_name = artist.replace(\\" \\", \\"_\\") # Format URL parameter url = base_url + artist_name response = requests.get(url) if response.status_code == 200: html = response.content soup = BeautifulSoup(html, \\"html.parser\\") discography = soup.find(\\"span\\",{\\"id\\":\\"Discography\\"}).find_next_sibling().text.strip().replace(\\"n\\", \\",\\").replace(\\")\\",\\"\\").replace(\\"(\\",\\"\\") return discography.split(\\",\\") else: print(\\"Error in response.\\") return None"},{"prompt":"Write a script in python that can take a magnitude and corresponding angle (in degrees) and convert it to vectors in threedimensional space. magnitude: 5 angle: 90","completion":"import math def magnitude_to_vector(magnitude, angle): x = magnitude * math.cos(math.radians(angle)) y = magnitude * math.sin(math.radians(angle)) z = 0 return (x, y, z) result = magnitude_to_vector(5, 90) print(f\\"The vector is {result}\\")"},{"prompt":"Write a python program to generate an array filled with the first n prime numbers. n = 10","completion":"# Python3 code to generate an # array containing first n primes import math def generatePrimeArray(n): prime = [True for i in range(n + 1)] p = 2 while (p * p <= n): if (prime[p] == True): for i in range(p * 2, n + 1, p): prime[i] = False p += 1 # prime[0]= False # prime[1]= False # Store prime numbers prime_numbers = [] for p in range(n + 1): if prime[p]: prime_numbers.append(p) # Print the array return prime_numbers result = generatePrimeArray(n) print(result)"},{"prompt":"Develop a Python function to calculate the summed weighted average from a given set of values and weight. values = [90, 50, 70], weights = [0.4, 0.2, 0.4]","completion":"def weightedAverage(values, weights): sum = 0.0 for i in range(len(values)): sum += values[i] * weights[i] return sum/len(values) values = [90, 50, 70] weights = [0.4, 0.2, 0.4] print(weightedAverage(values, weights))"},{"prompt":"Write a Python program to solve a system of linear equations. 2x+3y=8 5x1y=10","completion":"def solve_linear_system(A, b): # Find the solution of the linear system x = np.linalg.solve(A, b) # Print the solution print('Solution: x = ' + str(x[0]) + ', y = ' + str(x[1])) A = [[2, 3], [5, -1]] b = [8, -10] solve_linear_system(A, b)"},{"prompt":"Write a Python program to add a prefix and suffix to all strings in a list. list = ['abc', 'def', 'ghi']","completion":"pre = \\"PRE-\\" suf = \\"-SUF\\" enriched_list = [ pre + s + suf for s in list] print(enriched_list)"},{"prompt":"Generate a Python program to calculate the square root of a given number using Newton’s Method. x = 36","completion":"def square_root(x): guess = x/2 while True: next_guess = 0.5 * (guess + (x/guess)) if abs(guess - next_guess) < 0.0001: break guess = next_guess return guess print(square_root(36)) # prints 6.0"},{"prompt":"Write a Python program to extract phone numbers from a given text. This is a sample text. Mr. Smith's cell phone number is (123) 4567890 and Mrs. Smith's phone number is (321) 2345678.","completion":"\\"\\"\\" Write a Python program to extract phone numbers from a given text. \\"\\"\\" import re def extract_phone_numbers(text): phone_numbers = [] pattern = r'(d{3}[-.s]??d{3}[-.s]??d{4}|(d{3})s*d{3}[-.s]??d{4}|d{3}[-.s]??d{4})' regex = re.compile(pattern) matches = regex.finditer(text) for m in matches: phone_numbers.append(m.group()) return phone_numbers text = \\"This is a sample text. Mr. Smith's cell phone number is (123) 456-7890 and Mrs. Smith's phone number is (321) 234-5678.\\" print(extract_phone_numbers(text))"},{"prompt":"Write a python program to parse an XML document","completion":"import xml.etree.ElementTree as ET def parse_xml(xml_file): root = ET.parse(xml_file).getroot() for child in root: print(child.tag, child.attrib)"},{"prompt":"Write a Python program to search for a given string in a list of strings and return the index of the first occurrence of that string. List of strings: [Hello, World, Hello, World] Search String: World","completion":"def search_string(lst, s): for i, item in enumerate(lst): if item == s: return i return -1"},{"prompt":"Generate a Python program to perform matrix multiplication. A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] B = [[7, 8, 9], [4, 5, 6], [1, 2, 3]]","completion":"def matrixMultiplication(A,B): return [[sum(a*b for a,b in zip(A_row,B_col)) for B_col in zip(*B)] for A_row in A] A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] B = [[7, 8, 9], [4, 5, 6], [1, 2, 3]] C = matrixMultiplication(A,B) for i in range(len(C)): print(C[i])"},{"prompt":"Build a chatbot with Python Flask that can converse with a user. Not applicable","completion":"from flask import Flask, request, jsonify # Initialize the Flask application app = Flask(__name__) @app.route('/', methods=['GET','POST']) def dialog(): # Get the user's input from the request user_input = request.json['user_input'] # Define a response based on the user's input if user_input == 'Hi': response = 'Hello there!' # Add additional actions here # Return the response as JSON return jsonify({'response':response}) if __name__ == '__main__': app.run(port=5000, debug=True)"},{"prompt":"Create a Python program to compare two strings and print out the number of differences. String 1: python String 2: perl","completion":"def compareStrings(string1, string2): result = 0 if len(string1) != len (string2): result += 1 else: for i in range(len(string1)): if string1[i] != string2[i]: result += 1 return result if __name__ == '__main__': string1 = 'python' string2 = 'perl' print(compareStrings(string1, string2)) Output: 3"},{"prompt":"Design a Python script to merge two sorted arrays into one.","completion":"def merge_arrays(arr1, arr2): len1, len2 = len(arr1), len(arr2) # initialize empty result list and pointers to traverse the both array arr_merged, i, j = [], 0, 0 # traverse both array and compare the element # append the lesser one to result while i < len1 and j < len2: if arr1[i] < arr2[j]: arr_merged.append(arr1[i]) i += 1 else: arr_merged.append(arr2[j]) j += 1 # append remaining elements(if any) of faster completed array to result while i < len1: arr_merged.append(arr1[i]) i += 1 while j < len2: arr_merged.append(arr2[j]) j += 1 return arr_merged"},{"prompt":"Generate a spreadsheet to model a sine wave using Python.","completion":"import pandas as pd import numpy as np # Create spreadsheet df = pd.DataFrame() # Add column of x-values x_values = np.arange(start=0,stop=2*np.pi,step=0.1) df['x'] = x_values # Add column of y-values y_values = np.sin(x_values) df['y'] = y_values # Save spreadsheet df.to_csv('sine-wave.csv', index=False)"},{"prompt":"Convert the following python code which uses sets to one which uses lists. s = set([2, 3, 4]) for n in s: print(n)","completion":"l = [2, 3, 4] for n in l: print(n)"},{"prompt":"Generate a Python code to print all the permutations of an array.","completion":"def permutation(arr): if not arr: return [] elif len(arr) == 1: return [arr] else: l = [] for i in range(len(arr)): data = arr[i] remainders = arr[:i] + arr[i+1:] for p in permutation(remainders): l.append([data] + p) return l"},{"prompt":"Write a Python program to classify the given data into two classes.","completion":"def classify(data): # Fit your model on the data model.fit(data) # Return the predicted classes return model.predict(data)"},{"prompt":"Write a natural language processing algorithm (in Python) to classify a given sentence as positive, negative, or neutral sentiment. Not applicable","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_calculator(text): sid = SentimentIntensityAnalyzer() sentiment_scores = sid.polarity_scores(text) if sentiment_scores['compound'] >= 0.5: sentiment = 'positive' elif -0.5 < sentiment_scores['compound'] < 0.5: sentiment = 'neutral' else: sentiment = 'negative' return sentiment sentence = 'This is an amazing experience!' sentiment_calculator(sentence) # Output: 'positive'"},{"prompt":"Write a function in Python that receives two numbers as parameters and returns the larger one","completion":"def larger_num(a, b): if a > b: return a else: return b"},{"prompt":"Design an algorithm in Python to find the minimum of three values. 3, 2, 1","completion":"def find_min(a, b, c): min_val = a if b < min_val: min_val = b if c < min_val: min_val = c return min_val print(find_min(3, 2, 1)) # Output: 1"},{"prompt":"Create a Python program to generate a hamming code for a given bit string.","completion":"def generateHammingCode(bitString): # Get length of the input bit string n = len(bitString) # Calculate the number of parity bits m = 0 while 2**m < n + m + 1: m+= 1 # Initialize 2 empty lists to store parity and encoded bits parityBits = [] encodedList = [] # Calculate parity bits for i in range(m): k = 2**i parityBits.append(calculateParityBit(bitString, k)) # Generate hamming code j = 0 for i in range (1, n + m + 1): if i == 2**j: encodedList.append(parityBits[j]) j += 1 else : encodedList.append(int(bitString[i - j - 1])) return encodedList def calculateParityBit(bitString, k): counter = 0 for i in range(len(bitString)): if i & k == k : counter += int(bitString[i]) if counter % 2 == 0: return '0' else: return '1'"},{"prompt":"Create a Python program to print out the sum of squares of all the numbers from 1 to 10.","completion":"def sum_of_squares(numbers): total = 0 for num in range(1,numbers+1): total += num**2 print(total) sum_of_squares(10)"},{"prompt":"Design an algorithm in Python that finds the occurrences of 'cat' in a given sentence. Sentence: “The cat sat on the mat.”","completion":"def find_occurrences(sentence): # Empty list to store indices of occurrence indices = [] # get length of sentence l = len(sentence) # iterate to go through the sentence for i in range(l): # if at any point a substring from i to i+3 is equal to \\"cat\\" if sentence[i:i+3] == \\"cat\\": # add i to list of indices indices.append(i) # return the list of indices return indices occurrences = find_occurrences(\\"The cat sat on the mat.\\") print(\\"Indices of occurrences:\\", occurrences)"},{"prompt":"Produce a Python program to convert a given number of minutes to years and days. 76586","completion":"def convertMinutesToYears(minutes): years = minutes / 525600 days = minutes % 525600 / 1440 print(\\"The given\\" + str(minutes) + \\" minutes is equal to \\" + str(round(years)) + \\" year(s) and \\" + str(round(days)) + \\" day(s)\\") convertMinutesToYears(76586)"},{"prompt":"Create a Python function that takes a string argument, removes all the special characters and returns the modified string. This# 1 i^s an% e*xa_mple str_ing","completion":"def remove_special_characters(s): new_s = s.replace('#', '').replace('', '').replace('^', '').replace('%', '').replace('*', '').replace('_', '') return new_s remove_special_characters(\\"This# 1 i^s an% e*xa_mple -str_ing\\")"},{"prompt":"Make a program in Python that takes a number n and returns the nth fibonacci number.","completion":"def fibonacci(n): if n <= 2: return 1 else: return fibonacci(n-1) + fibonacci(n-2) print(fibonacci(5)) # 5"},{"prompt":"Generate a python program which prints a formatted list containing the elements from two input lists. list_1 = [1, 2, 3] list_2 = [4, 5, 6]","completion":"def print_list(list_1, list_2): formatted_list = [list_1 + list_2 for i in range(len(list_1))] for x in formatted_list: for y in x: print(y) list_1 = [1, 2, 3] list_2 = [4, 5, 6] print_list(list_1, list_2) # Output: # 1 # 2 # 3 # 4 # 5 # 6"},{"prompt":"Create a Python script to generate a random password. The generated password should have at least 6 characters, and must contain both letters and numbers. Not applicable","completion":"import random def generate_password(): alphabet = \\"abcdefghijklmnopqrstuvwxyz01234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" pw_length = 6 mypw = \\"\\" for i in range(pw_length): next_index = random.randrange(len(alphabet)) mypw = mypw + alphabet[next_index] return mypw print(generate_password())"},{"prompt":"Write a Python statement to check if a given number is within a given range Number: 3, Range: 010","completion":"if 0 <= 3 <= 10: print('Number is within the range') else: print('Number is not within the range')"},{"prompt":"Design an automated system in Python to remove all even numbers from a list. list = [3, 8, 10, 11, 12, 15]","completion":"def remove_even(list): return [i for i in list if i%2 != 0]"},{"prompt":"Write a python code to perform a threeway comparison of three numbers.","completion":"def three_way_comparison(num1, num2, num3): if num1 > num2 and num1 > num3: return 1 elif num2 > num1 and num2 > num3: return 2 elif num3 > num1 and num3 > num2: return 3"},{"prompt":"Write a Python program to print Hello World ten times. Not applicable","completion":"for i in range(10): print(\\"Hello World\\")"},{"prompt":"Write a Python script that computes the sum of two given integers.","completion":"def sum_two_ints(a, b): return a + b"},{"prompt":"Create a hash table in Python to store the values (1, 2, 3, 4).","completion":"hash_table = {1: 1, 2: 2, 3: 3, 4: 4}"},{"prompt":"Convert a string into a valid python program that prints the string on the terminal. Hello World!","completion":"print('Hello World!')"},{"prompt":"Write a Python program to print the factorial of a number. 5","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) num = 5 print(\\"The factorial of\\", num, \\"is\\", factorial(num))"},{"prompt":"Construct a regular expression in Python to find all consecutive digits in a sentence. There are 3 sets of consecutive numbers in this sentence: 12, 22 and 33.","completion":"import re str = \\"There are 3 sets of consecutive numbers in this sentence: 12, 22 and 33.\\" num_list = re.findall(r'd+', str) print(num_list) # Output: ['3', '12', '22', '33']"},{"prompt":"Create a Python objectoriented program to represent a student. The student class should have a method calculate_grade which takes a student's grades as input and returns their average. Not applicable","completion":"class Student: def __init__(self, name, grades): self.name = name self.grades = grades def calculate_grade(self): total = 0 for grade in self.grades: total += grade return total / len(self.grades) student1 = Student(\\"John\\", [80,90,85,95]) print(student1.calculate_grade()) # Output: 88.75"},{"prompt":"Create a python script that compares two sets of input data (lists of numbers) and outputs the intersection set. set1 = [1, 2, 3, 4, 5] set2 = [3, 4, 5, 6, 7]","completion":"def find_intersection(set1, set2): intersect_set = [] for num in set1: if num in set2: intersect_set.append(num) return intersect_set set1 = [1, 2, 3, 4, 5] set2 = [3, 4, 5, 6, 7] intersect_set = find_intersection(set1, set2) print(intersect_set) # Output -> [3, 4, 5]"},{"prompt":"Suggest a completion for the following Python code so that it prints all the numbers between 0 and 10 (inclusive). for num in range(11)","completion":"for num in range(11): print(num)"},{"prompt":"Given a list of integers, write a Python function to find the largest consecutive sum of elements in the list. nums = [1, 2, 5, 9, 0, 10]","completion":"def largest_consecutive_sum(nums): max_sum = 0 total_sum = 0 for num in nums: total_sum += num if total_sum > max_sum: max_sum = total_sum return max_sum"},{"prompt":"Develop an algorithm in Python to identify prime numbers in a given range of numbers.","completion":"def prime_numbers(lower_limit, upper_limit): prime_numbers = [] while lower_limit <= upper_limit: if all(lower_limit % i != 0 for i in range(2, lower_limit)): prime_numbers.append(lower_limit) lower_limit += 1 return prime_numbers print(prime_numbers(2, 10))"},{"prompt":"Design an AI model in Python to predict the sentiment of a given sentiment text. This product is excelle","completion":"from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_analysis(text): sid = SentimentIntensityAnalyzer() sentiment = sid.polarity_scores(text) if sentiment[\\"compound\\"] >= 0.5: return \\"positive\\" elif sentiment[\\"compound\\"] <= -0.5: return \\"negative\\" else: return \\"neutral\\" sentiment = sentiment_analysis(\\"This product is excellent\\") print(sentiment)"},{"prompt":"Create a solution for objectoriented programming in Python. The solution should include a way to represent base class, derived class, single inheritance, and multiple inheritance. Not applicable","completion":"# Base class class Base: pass # Derived class class Derived(Base): pass # Single inheritance class SingleInheritance(Base): pass # Multiple inheritance class MultipleInheritance(Base, Derived): pass"},{"prompt":"Create a python script to find the longest words in a dictionary. dict = {Hello: 5, World: 6, this: 4, is: 2, a: 1, test: 4}","completion":"def longest_words(dict): longest_words = [] max_length = 0 for word, length in dict.items(): if length > max_length: longest_words = [word] max_length = length elif length == max_length: longest_words.append(word) return longest_words"},{"prompt":"Write a Python program to find the optimal solution for a given weighted job scheduling problem. jobs = [(1, 5, 1), (3, 5, 7), (4, 6, 5), (6, 7, 4)]","completion":"def jobScheduling(jobs): n = len(jobs) jobs = sorted(jobs, key = lambda x: x[1]) table = [0 for i in range(n)] table[0] = jobs[0][2] for i in range(1, n): inclProf = jobs[i][2] l = binarySearch(jobs, i) if (l != -1): inclProf += table[l] table[i] = max(inclProf, table[i-1]) return table[n-1]"},{"prompt":"Create a program that returns the number of the occurrences of an element in the given list nums = [1, 2, 3, 2, 3, 2, 4]","completion":"# Python 3 program to count the number of occurrences # of an element in the given list # function to count the number of occurrences def countOccurrences(nums, query): count = 0 for num in nums: if query == num: count = count + 1 return count # Driver code nums = [1, 2, 3, 2, 3, 2, 4] # Function Call query = 2 print(\\"{0} occurs {1} times\\".format(query, countOccurrences(nums, query)))"},{"prompt":"Write a Python program to optimize an equation to find the minimum value.","completion":"import numpy as np from scipy.optimize import minimize def equation(x): return x**5 + 5*x**4 - 10*x**3 - 40*x**2 + 81*x results = minimize(equation, [0]) minx = results.x miny = results.fun print('The minimum value of f(x) is {:.2f} when x={:.2f}.'.format(miny, minx))"},{"prompt":"Develop an algorithm in Python to replace all the vowels in a string with an asterisk. string = “Hello World”","completion":"string = “Hello World” def replaceVowels(string): vowels = (\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\") result = \\"\\" for char in string: if char in vowels: result += \\"*\\" else: result += char return result new_string = replaceVowels(string) print(new_string) # This will print out \\"H*ll* W*rld\\""},{"prompt":"Create a Python function that calculates the standard deviation of a given list of numbers. [2, 4, 4, 4, 5, 5, 7, 9]","completion":"def calculate_std_deviation(numbers): mean = sum(numbers) / len(numbers) variance = 0 for num in numbers: variance += (num - mean)**2 variance = variance/len(numbers) std_deviation = variance**0.5 return std_deviation numbers = [2, 4, 4, 4, 5, 5, 7, 9] std_deviation = calculate_std_deviation(numbers) print('The standard deviation is: {}'.format(std_deviation))"},{"prompt":"This code is a Python script that defines a class called source with several methods for searching and retrieving movie and TV show sources from the website filmpalast.to. To use this code, import the source class and create an instance of it, then call its methods to search for and retrieve sources for specific movies or TV shows.","completion":"# -*- coding: UTF-8 -*- # ..#..#.....#.........#....#.... # ......#......#.......#...#.....#.....#......#...........#............#..... # ......#......#.........#..................#...........#............#....... # ......#......#...............#....... # ......#................#.......#..................................... # ......#......................#.....#...........#....................... # ..#........#.....#..........#......#........#......#... # # ---------------------------------------------------------------------------- # \\"THE BEER-WARE LICENSE\\" (Revision 42): # @Daddy_Blamo wrote this file. As long as you retain this notice you # can do whatever you want with this stuff. If we meet some day, and you think # this stuff is worth it, you can buy me a beer in return. - Muad'Dib # ---------------------------------------------------------------------------- # # Addon Name: Placenta # Addon id: plugin.video.placenta # Addon Provider: Mr.Blamo import json import re import urllib import urlparse from openscrapers.modules import cleantitle from openscrapers.modules import client from openscrapers.modules import dom_parser from openscrapers.modules import source_utils class source: def __init__(self): self.priority = 1 self.language = ['de'] self.domains = ['filmpalast.to'] self.base_link = 'http://filmpalast.to' self.search_link = '/search/title/%s' self.stream_link = 'stream/%s/1' def movie(self, imdb, title, localtitle, aliases, year): try: url = self.__search([localtitle] + source_utils.aliases_to_array(aliases)) if not url and title != localtitle: url = self.__search([title] + source_utils.aliases_to_array(aliases)) return url except: return def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year): try: url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'localtvshowtitle': localtvshowtitle, 'aliases': aliases, 'year': year} url = urllib.urlencode(url) return url except: return def episode(self, url, imdb, tvdb, title, premiered, season, episode): try: if not url: return data = urlparse.parse_qs(url) data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data]) title = data['localtvshowtitle'] title += ' S%02dE%02d' % (int(season), int(episode)) aliases = source_utils.aliases_to_array(eval(data['aliases'])) aliases = [i + ' S%02dE%02d' % (int(season), int(episode)) for i in aliases] url = self.__search([title] + aliases) if not url and data['tvshowtitle'] != data['localtvshowtitle']: title = data['tvshowtitle'] title += ' S%02dE%02d' % (int(season), int(episode)) url = self.__search([title] + aliases) return url except: return def sources(self, url, hostDict, hostprDict): sources = [] try: if not url: return sources query = urlparse.urljoin(self.base_link, url) r = client.request(query) quality = dom_parser.parse_dom(r, 'span', attrs={'id': 'release_text'})[0].content.split('&nbsp;')[0] quality, info = source_utils.get_release_quality(quality) r = dom_parser.parse_dom(r, 'ul', attrs={'class': 'currentStreamLinks'}) r = [(dom_parser.parse_dom(i, 'p', attrs={'class': 'hostName'}), dom_parser.parse_dom(i, 'a', attrs={'class': 'stream-src'}, req='data-id')) for i in r] r = [(re.sub(' hd', '', i[0][0].content.lower()), [x.attrs['data-id'] for x in i[1]]) for i in r if i[0] and i[1]] for hoster, id in r: valid, hoster = source_utils.is_host_valid(hoster, hostDict) if not valid: continue sources.append({'source': hoster, 'quality': quality, 'language': 'de', 'info': ' | '.join(info + ['' if len(id) == 1 else 'multi-part']), 'url': id, 'direct': False, 'debridonly': False, 'checkquality': True}) return sources except: return sources def resolve(self, url): try: h_url = [] for id in url: query = urlparse.urljoin(self.base_link, self.stream_link % id) r = client.request(query, XHR=True, post=urllib.urlencode({'streamID': id})) r = json.loads(r) if 'error' in r and r['error'] == '0' and 'url' in r: h_url.append(r['url']) h_url = h_url[0] if len(h_url) == 1 else 'stack://' + ' , '.join(h_url) return h_url except: return def __search(self, titles): try: query = self.search_link % (urllib.quote_plus(titles[0])) query = urlparse.urljoin(self.base_link, query) t = [cleantitle.get(i) for i in set(titles) if i] r = client.request(query) r = dom_parser.parse_dom(r, 'article') r = dom_parser.parse_dom(r, 'a', attrs={'class': 'rb'}, req='href') r = [(i.attrs['href'], i.content) for i in r] r = [i[0] for i in r if cleantitle.get(i[1]) in t][0] return source_utils.strip_domain(r) except: return"},{"prompt":"Develop a function in Python that takes a list of strings as input and returns a dictionary mapping each string to its length. [apple, mango, banana]","completion":"def getStringLengths(words): # Create an empty dictionary lengths = {} # For each word in the list of words for word in words: # find the length of the word length = len(word) # add the length of the word to the dictionary lengths[word] = length # return the dictionary return lengths print(getStringLengths([\\"apple\\", \\"mango\\", \\"banana\\"]))"},{"prompt":"Create a Python code snippet to check if a given number is a prime number. Not applicable","completion":"def is_prime(num): if num > 1: for i in range(2, num): if (num % i) == 0: return False else: return True else: return False"},{"prompt":"Test the following Python code and identify a bug not_a_number = 'A123' number = int(not_a_number)","completion":"This code will result in a \`ValueError\` because \`int()\` cannot convert the string 'A123' into an integer. To fix this, you can use \`try/except\` statements to catch the error and handle it appropriately. try: number = int(not_a_number) except ValueError as e: print(f'Error converting {not_a_number} to an integer: {e}')"},{"prompt":"Create a program to group the strings of a given list according to their lengths in Python. input = [apple, mango, banana, kiwi, grapes, watermelon]","completion":"\\"\\"\\" Create a program to group the strings of a given list according to their lengths in Python \\"\\"\\" # List of strings input = [\\"apple\\", \\"mango\\", \\"banana\\", \\"kiwi\\", \\"grapes\\", \\"watermelon\\"] # Dictionary to store the grouped strings result = {} # Iterate over the list for elem in input: # Get length of each string length = len(elem) # If the length is present in the result dictionary, # add the string to its corresponding list if length in result: result[length].append(elem) # Else, create a new list in the result dictionary # and append the string to the list else: result[length] = [elem] # Print the result print(result) # Output: {5: ['apple', 'mango', 'kiwi'], 6: ['banana', 'grapes'], 12: ['watermelon']}"},{"prompt":"Rewrite a given code snippet in Python using a list comprehension. my_list = [] for i in range(10): my_list.append(i ** 2)","completion":"my_list = [i ** 2 for i in range(10)]"},{"prompt":"Modify the existing Python program to add an exception clause. def calculate_square(x): try: return x * x except TypeError: print(The argument must be a number) calculate_square(10)","completion":"def calculate_square(x): try: return x * x except TypeError: print(\\"The argument must be a number\\") except ValueError: print(\\"The argument cannot be a negative number\\") calculate_square(10)"},{"prompt":"Create a function in Python to initialize an array with two parameters. params: (4, 5)","completion":"def initialize_array(rows, cols): array = [[0 for i in range(cols)] for j in range(rows)] return array"},{"prompt":"Generate Python code to sort a given list using insertion sort.","completion":"def insertion_sort(list): \\"\\"\\" Sort a given list using insertion sort. list: the list to be sorted \\"\\"\\" # loop through each element in the list, starting from the second element for i in range(1, len(list)): temp = list[i] # find the position where the current element should be inserted j = i-1 while j >= 0 and temp < list[j] : list[j+1] = list[j] j -= 1 list[j+1] = temp return list"},{"prompt":"Generate a Python program to display a pyramid pattern The maximum height should be 6","completion":"# Function to demonstrate printing pattern in pyramid format def pyramid(n): k = 2*n - 2 # outer loop to handle number of rows for i in range(0, n): # inner loop to handle number spaces # values changing acc. to requirement for j in range(0, k): print(end=\\" \\") # decrementing k after each loop k = k - 2 # inner loop to handle number of columns # values changing acc. to outer loop for j in range(0, i+1): # printing stars print(\\"* \\", end=\\"\\") # ending line after each row print(\\"r\\") # Driver Code n = 6 pyramid(n)"},{"prompt":"Create a Python function to format a string with the proper case and punctuation string=hello, world","completion":"def format_string(string): \\"\\"\\"Function to format a string with the proper case and punctuation\\"\\"\\" return string.lower().capitalize() + \\".\\""},{"prompt":"What are the differences between lists and tuples in Python?","completion":"Lists and tuples are both data structures in Python. The main difference between them is that a list is mutable (can be changed) while a tuple is immutable (cannot be changed). Tuples use parentheses and lists use square brackets. Tuples can contain any type of data, including other tuples, and can be indexed and sliced. Lists, on the other hand, cannot contain mutable objects, such as other lists, and cannot be indexed or sliced because they are mutable. Tuples also tend to be faster than lists."},{"prompt":"Create a Python program that sorts a list of integers. my_list = [9, 3, 6, 7, 1]","completion":"def sort_list(list): for i in range(len(list)): for j in range(i+1, len(list)): if list[i] > list[j]: list[i], list[j] = list[j], list[i] return list my_list = [9, 3, 6, 7, 1] my_list = sort_list(my_list) print(my_list)"},{"prompt":"Create a web scraper in Python that retrieves the top 10 headlines from a website's news section. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'http://example.com/news' response = requests.get(url) soup = BeautifulSoup(response.text, \\"html.parser\\") headlines = soup.find_all(\\"h2\\", class_=\\"headline\\") for headline in headlines[:10]: print(headline.string)"},{"prompt":"Write a Python function to fetch the data from this API https://coronavirus19api.herokuapp.com/","completion":"import requests def fetch_data(): url = 'https://coronavirus-19-api.herokuapp.com/' response = requests.get(url) data = response.json() return data if __name__ == '__main__': print(fetch_data())"},{"prompt":"Write a function in Python that calculates the maximum value in a 2dimensional array. [ [1, 4, 8], [7, 9, 6] ]","completion":"def find_max_val(arr): max_val = 0 for lst in arr: for num in lst: if num > max_val: max_val = num return max_val print(find_max_val([[1, 4, 8], [7, 9, 6]])) # Output: 9"},{"prompt":"Design a Flask application in Python to create an API endpoint for user registration. Not applicable","completion":"from flask import Flask, request app = Flask(name) @app.route('/users', methods=['POST']) def create_user(): data = request.json # Create the user # ... return {'status': 'user created'} if name == 'main': app.run(debug=True)"},{"prompt":"Determine the type of the following python object. [1, 2, [3, 4]]","completion":"list"},{"prompt":"Write a function in Python that takes a string as input and returns the length of the longest word. string = the quick brown fox jumps over the lazy dog","completion":"def length_longest_word(s): longest_word = \\"\\" longest_len = 0 words = s.split() for word in words: if len(word) > longest_len: longest_len = len(word) longest_word = word return len(longest_word) result = length_longest_word(string) print(result)"},{"prompt":"Create a Python script to print all prime numbers between 1 to 1000.","completion":"def print_prime_numbers(): for num in range(2, 1001): for i in range(2, num): if (num % i) == 0: break else: print(num) print_prime_numbers()"},{"prompt":"Create a program in Python to merge two dictionaries into a new one. Dictionary 1 \`{'name': 'John', 'age': 25}\` Dictionary 2 \`{'company': 'Google', 'city': 'New York'}\`","completion":"# Dictionaries dict1 = {'name': 'John', 'age': 25} dict2 = {'company': 'Google', 'city': 'New York'} # Merge two dictionaries dict3 = {**dict1, **dict2} # Print the merged dictionary print(dict3) # Output: # {'name': 'John', 'age': 25, 'company': 'Google', 'city': 'New York'}"},{"prompt":"Write a code in Python to add two given numbers. x = 5 y = 11","completion":"#Function to add two given numbers def add(x, y): return x + y # Print the sum print(add(x, y))"},{"prompt":"Write a Python program to generate a linked list of numbers from 0 to n.","completion":"def generateLinkedList(n): head = Node(0) prev = head for i in range(1, n + 1): node = Node(i) prev.next = node prev = node return head"},{"prompt":"Given a list of integers as input, write a Python code snippet to find the largest number. [9, 2, 6, 3, 5, 5, 7]","completion":"max_num = -float('inf') for num in [9, 2, 6, 3, -5, 5, 7]: if num > max_num: max_num = num print(max_num)"},{"prompt":"Classify different programming languages based on their features. C++, Java, Python, JavaScrip","completion":"C++: Object-oriented, compiled language Java: Object-oriented, compiled language Python: Object-oriented, interpreted language JavaScript: Object-oriented, interpreted language"},{"prompt":"Develop a RESTful web service in Python which returns the data provided in the given URL. URL: https://example.com/dataset.jso","completion":"import flask from flask import Flask import requests app = Flask(__name__) @app.route('/data', methods=[\\"GET\\"]) def data(): r = requests.get('https://example.com/dataset.json') return flask.jsonify(r.json()) if __name__ == '__main__': app.run()"},{"prompt":"Create an algorithm to solve the Tower of Hanoi in Python.","completion":"def tower_of_hanoi(num_discs, source, auxiliary, destination): if num_discs == 1: print(\\"Move disc 1 from\\", source, \\"to\\", destination) return tower_of_hanoi(num_discs - 1, source, destination, auxiliary) print(\\"Move disc\\", num_discs, \\"from\\", source, \\"to\\", destination) tower_of_hanoi(num_discs - 1, auxiliary, source, destination) tower_of_hanoi(3, \\"A\\", \\"B\\", \\"C\\")"},{"prompt":"Build a Python commandline program that takes in a string and encrypts it with a password.","completion":"import hashlib def encrypt_string(string, password): md5_string = hashlib.md5(string.encode()).hexdigest() password_string = hashlib.md5(password.encode()).hexdigest() result = \\"\\" for i in range(32): result += md5_string[i] + password_string[i] return result string = \\"Hello World!\\" password = \\"password\\" result = encrypt_string(string, password) print(result)"},{"prompt":"Write a Python algorithm to compute the number of islands. An island is a group of connected 1s in an array where all four adjacent lands have value 0.","completion":"def count_islands(grid): if not grid: return 0 row = len(grid) col = len(grid[0]) num_islands = 0 for i in range(row): for j in range(col): if grid[i][j] == 1: num_islands += dfs(grid, i, j, row, col) return num_islands def dfs(grid, i, j, row, col): if i < 0 or i >= row or j < 0 or j >= col or grid[i][j] == 0: return 0 grid[i][j] = 0 dfs(grid, i + 1, j, row, col) dfs(grid, i - 1, j, row, col) dfs(grid, i, j + 1, row, col) dfs(grid, i, j - 1, row, col) return 1"},{"prompt":"Our project requires to classify different types of objects into two classes (A and B). Can you provide a Python code to achieve this? [objectA, objectB, objectC, objectD]","completion":"def classify_objects(list_of_objects): results = [] for obj in list_of_objects: if obj == 'objectA' or obj == 'objectB': results.append('A') elif obj == 'objectC' or obj == 'objectD': results.append('B') return results list_of_objects = ['objectA', 'objectB', 'objectC', 'objectD'] classifications = classify_objects(list_of_objects) print(classifications)"},{"prompt":"Create an algorithm in Python for counting the number of islands in a given grid. An island is defined as a group of 1's (land) connected horizontally or vertically. [[1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1]]","completion":"def countIslands(grid): count = 0 for i in range(len(grid)): for j in range(len(grid[0])): if grid[i][j] == 1: dfs(grid, i, j) count += 1 return count def dfs(grid, r, c): if r < 0 or c < 0 or r >= len(grid) or c >= len(grid[0]) or grid[r][c] == 0: return grid[r][c] = 0 dfs(grid, r+1, c) dfs(grid, r, c+1) dfs(grid, r-1, c) dfs(grid, r, c-1) print(countIslands([[1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1]])) // Output: 5"},{"prompt":"Construct a calculator application in Python that takes input from a string and outputs the result 3+5*7","completion":"def calculator(expression): # create a stack for storing values stack = [] # iterate through the expression for char in expression: # check if the character is a number if char.isdigit(): # if so, push it to the stack stack.append(int(char)) # check if the character is an operator if char == '+' or char == '*': # pop two values from the stack val_one = stack.pop() val_two = stack.pop() # determine which operator was used and # perform the corresponding operation if char == '+': stack.append(val_one + val_two) elif char == '*': stack.append(val_one * val_two) # return the calculated result return stack.pop()"},{"prompt":"Can you produce a Python script that outputs all possible permutations of a given string? ABC","completion":"from itertools import permutations def print_permutations(input): perms = [''.join(p) for p in permutations(input)] for perm in perms: print(perm) if __name__ == \\"__main__\\": print_permutations(\\"ABC\\")"},{"prompt":"Write a Python function to detect geographical coordinates of a given address. Address: 1 Rockefeller Plaza, New York City, NY","completion":"(40.7588972, -73.9787129)"},{"prompt":"Write a python script that takes in a string and remove all vowels from the string. string = Hello World!","completion":"# Python program to remove vowels from a string def remove_vowels(string): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] output_string = \\"\\" for char in string: if char not in vowels: output_string += char return output_string if __name__ == \\"__main__\\": string = \\"Hello World!\\" print(\\"Original String:\\", string) string = remove_vowels(string) print(\\"String without Vowels:\\", string)"},{"prompt":"Design a Python class that can store the properties of a person.","completion":"class Person: def __init__(self, name, age, gender, address): self.name = name self.age = age self.gender = gender self.address = address def get_name(self): return self.name def get_age(self): return self.age def get_gender(self): return self.gender def get_address(self): return self.address"},{"prompt":"Use Selenium to create a Python program to automate testing an existing web page. https://example.com","completion":"from selenium import webdriver import time driver = webdriver.Chrome() driver.get('https://example.com') # Check the title of the page assert driver.title == 'Example Domain' # Check the text on the page text = driver.find_element_by_xpath('//p').text assert text == 'This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.' # Check for a hyperlink link = driver.find_element_by_xpath('//a') assert link.text == 'More information...' time.sleep(2) driver.quit()"},{"prompt":"Create a Python script that imports the necessary modules and defines several functions for managing fleet channels and driver positions. The functions include creating a service, getting or creating a fleet channel, deleting a fleet channel, clearing all fleet channels, updating a driver's position, and deleting a driver's position.","completion":"import json import requests from logistics.models import Fleet SERVER_URL = \\"http://demo.geo2tag.org/instance/\\" BASE_SERVICE_NAME = \\"testservice\\" SERVICE_NAME = BASE_SERVICE_NAME channel_dict = {} points_dict = {} def getSerivceUrl(): return SERVER_URL + \\"service/\\" + SERVICE_NAME def one_time_startup(): print(\\"Application startup execution\\") createService() clearAllFleetChannels() def createService(): # m = hashlib.md5() # m.update(socket.gethostbyname(socket.getfqdn()).encode('utf-8')) # global SERVICE_NAME # SERVICE_NAME = BASE_SERVICE_NAME + \\"_\\" + str(m.hexdigest()) # print(\\"SERVICE_NAME: \\"+SERVICE_NAME) # # url = SERVER_URL + 'service' # data = {'name': SERVICE_NAME} # request = requests.post(url, data=data) # print(request.text) pass # возвращает url карты (при открытии driver-fleet-id) def getFleetMap(fleet_id): try: fleet = Fleet.objects.get(id=fleet_id) channel_id = getOrCreateFleetChannel(fleet) except: channel_id = \\"none\\" return getSerivceUrl() + \\"/map?zoom=10&latitude=59.8944&longitude=30.2642&channel_ids=[\\"\\"+str(channel_id)+\\"\\"]\\" # создаёт канал для автопарка, если не существует (при добавлении точки updateDriverPos) # возвращает oid канала для fleet def getOrCreateFleetChannel(fleet): try: channel_oid = channel_dict.get(fleet.id, None) if channel_oid is not None: return channel_oid print(\\"create channel for fleet \\" + str(fleet)) url = getSerivceUrl() + '/channel' full_name = str(fleet.name) + \\"_\\" + str(fleet.id) data = {'name': full_name, 'json': {'name': str(fleet.name), 'id': str(fleet.id), 'owner': fleet.owner.first_name+' '+fleet.owner.last_name}} request = requests.post(url, data=data) response = request.text channel_exists = response == 'null' if channel_exists: print(full_name+' already exists : '+str(channel_exists)) oid = None else: oid = json.loads(response)[\\"oid\\"] channel_dict[fleet.id] = oid return oid except Exception as e: print(\\"EXCEPTION WHILE createFleetChannel: \\" + str(e)) # удаляет канал автопарка (при удалении автопарка) def deleteFleetChannel(fleet): try: channel_oid = channel_dict.get(fleet.id) headers = {'content-type': 'application/json'} url = getSerivceUrl() + \\"/channel/\\" + channel_oid request = requests.delete(url, headers=headers) channel_dict.pop(fleet.id) print(\\"delete channel of fleet \\" + str(fleet) +\\" result: \\"+request.text) except Exception as e: print(\\"EXCEPTION WHILE deleteFleetChannel: \\" + str(e)) # удаляет все каналы (при запуске приложения) def clearAllFleetChannels(): print(\\"delete all channels\\") try: url = getSerivceUrl() + '/channel?number=0' request = requests.get(url) response = request.text print(response) parsed_string = json.loads(response) for channel in parsed_string: channel_oid = channel[\\"_id\\"][\\"oid\\"] headers = {'content-type': 'application/json'} url = getSerivceUrl() + \\"/channel/\\" + channel_oid print(\\"DELETE \\" + url) requests.delete(url, headers=headers) channel_dict.clear() points_dict.clear() except Exception as e: print(\\"EXCEPTION WHILE clearAllFleetChannels: \\" + str(e)) # обновляет текущее метоположение водителя ( при api/driver/update_pos/) def updateDriverPos(fleet, driver, lat, lon): try: channel_oid = getOrCreateFleetChannel(fleet) if channel_oid is not None: point_oid = points_dict.get(driver.id, None) url = getSerivceUrl() + '/point' data = [{\\"lon\\": float(lat), \\"lat\\": float(lon), \\"alt\\": 1.1, \\"json\\": {\\"name\\": driver.first_name + \\" \\" + driver.last_name}, \\"channel_id\\": channel_oid}] if point_oid is None: request = requests.post(url, data=json.dumps(data)) point_oid = json.loads(request.text)[0] points_dict[driver.id] = point_oid print(\\"added point \\" + str(lat) + \\" \\" + str(lon) + \\" for driver \\" + str(driver) + \\" in fleet \\" + str(fleet) + \\" result: \\"+request.text) else: # delete old del_url = getSerivceUrl() + '/point/' + point_oid request = requests.delete(del_url) success = request.text == '{}' if success: points_dict.pop(driver.id) # add new request = requests.post(url, data=json.dumps(data)) point_oid = json.loads(request.text)[0] points_dict[driver.id] = point_oid print(\\"updated point \\" + str(lat) + \\" \\" + str(lon) + \\" for driver \\" + str(driver) + \\" in fleet \\" + str(fleet) + \\" result: \\" + request.text) else: print(\\"error while delete \\"+request.text) except Exception as e: print(\\"EXCEPTION WHILE updateDriverPos: \\" + str(e)) # удаляет точку, соответствующую водителю в автопарке fleet (при исключении водителя из автопарка и при завершении поездки) def deleteDriverPos(fleet, driver): try: point_oid = points_dict.get(driver.id) url = getSerivceUrl() + '/point/' + point_oid request = requests.delete(url) points_dict.pop(driver.id) print(\\"cleared position for driver \\" + str(driver) + \\" from fleet \\" + str(fleet) + \\" result: \\"+request.text) except Exception as e: print(\\"EXCEPTION WHILE deleteDriverPos: \\" + str(e))"},{"prompt":"Create an efficient sorting algorithm in Python to sort a given array. [9, 4, 6, 1, 3, 7]","completion":"def sort_arr(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr result = sort_arr([9, 4, 6, 1, 3, 7]) print(result)"},{"prompt":"Generate a Python script to identify which words in a given list appear more than 3 times and print them out. words = ['blue', 'red', 'green', 'red', 'yellow', 'blue', 'blue', 'orange']","completion":"words = ['blue', 'red', 'green', 'red', 'yellow', 'blue', 'blue', 'orange'] from collections import Counter word_counts = Counter(words) words_appearing_more_than_3_times = [word for word, count in word_counts.items() if count > 3] print(words_appearing_more_than_3_times)"},{"prompt":"w do you create a function in Python to find the highest common factor of the two given numbers?","completion":"def highestCommonFactor(num1, num2): if num1 > num2: small = num2 else: small = num1 for i in range(1, small+1): if((num1 % i == 0) and (num2 % i == 0)): hcf = i return hcf"},{"prompt":"Design a scalable REST API in Python that allows users to register and login using their credentials. Not applicable","completion":"from flask import Flask, request from flask_restful import Resource, Api # Create the Flask application app = Flask(__name__) api = Api(app) # Create app routes class UserRegister(Resource): def post(self): # Get data from the request body data = request.get_json() username = data['username'] password = data['password'] # Register the user # ... # Return a success message return {'msg': 'User registered successfully!'} class UserLogin(Resource): def post(self): # Get data from the request body data = request.get_json() username = data['username'] password = data['password'] # Verify login credentials # ... # Return a success message if credentials verified return {'msg': 'User logged in successfully!'} # Register resources with the API api.add_resource(UserRegister, '/register') api.add_resource(UserLogin, '/login') # Run the application if __name__ == '__main__': app.run()"},{"prompt":"Construct a class in Python to represent complex numbers.","completion":"class ComplexNumber: def __init__(self, real, imaginary): self.real = real self.imaginary = imaginary def __str__(self): return f\\"{self.real} + {self.imaginary}i\\""},{"prompt":"Write a python program to classify a given text into either spam or ham. <This is an example of a spam message.>.","completion":"\\"\\"\\" Classify a text into either spam or ham \\"\\"\\" from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB def classify_spam(text): # Create a vectorizer object vec = CountVectorizer() # Tokenize the text X = vec.fit_transform([text]) # Create a Multinomial NB model model = MultinomialNB() model.fit(X, y) # Make predictions prediction = model.predict(X) if prediction[0] == 0: return 'ham' else: return 'spam' if __name__ == '__main__': text = 'This is an example of a spam message.' print(classify_spam(text))"},{"prompt":"Design and write a Python script to generate Fibonacci numbers up to n=10000. Not applicable","completion":"def generate_fibonacci(n): #first two Fibonacci numbers a = 0 b = 1 #check if the number of terms is valid if n <=0: print(\\"Please enter a positive integer\\") elif n == 1: print(\\"Fibonacci sequence upto\\",n,\\":\\") print(a) else: print(\\"Fibonacci sequence:\\") for i in range(0,n): print(a) c = a + b #update values a = b b = c # Driver function generate_fibonacci(10000)"},{"prompt":"Write a Python program to assess a patient's current state based on their temperature, pulse rate and respiratory rate. temperature = 98.6 breathing_rate = 18 pulse_rate = 70","completion":"def assess_patient(temperature, breathing_rate, pulse_rate): if temperature > 100: print('Fever present') if breathing_rate < 12 or breathing_rate > 20: print('Respiratory distress') if pulse_rate < 60 or pulse_rate > 100: print('Heart rate issue')"},{"prompt":"Create a python program that generates a random integer between two numbers.","completion":"import random def random_int(x, y): return random.randint(x, y)"},{"prompt":"Write a Python function which takes an array as input and prints out all the even numbers in the array. [1, 4, 5, 8, 9, 11]","completion":"def print_even(nums): for num in nums: if num % 2 == 0: print(num) print_even([1, 4, 5, 8, 9, 11])"},{"prompt":"Create a function in python to generate a multiplication table for a given number n.","completion":"def generate_multiplication_table(n): table = [] for i in range(1, n+1): row = [] for j in range(1, n+1): row.append(i * j) table.append(row) return table"},{"prompt":"Create a Python program that prints out a random id number containing 6 digits. Not applicable","completion":"import random def generateId(): return ''.join(str(random.randint(0,9)) for i in range(6)) print(generateId())"},{"prompt":"Python, build a function that takes in two arguments (x,y) and returns the product of the two numbers.","completion":"def product(x, y): return x * y"},{"prompt":"Create a function in Python using Pandas to recode a column in the following dataframe. name,age,city John,30,New York Mary,25,London Mike,38,Paris Recode age such that every age greater than 30 is Above 30 and every age below 30 is Below 30.","completion":"import pandas as pd def recode_age(data): data['age_recoded'] = data['age'].apply( lambda x: 'Above 30' if x > 30 else 'Below 30' ) df = pd.read_csv('data.csv') recode_age(df) print(df)"},{"prompt":"Generate a piece of Python code to print the reversed version of a list. [1, 2, 3]","completion":"print(list(reversed([1, 2, 3])))"},{"prompt":"Develop a Python program that computes the sum of integers from 1 to n.","completion":"def find_sum(n): if n == 0: return 0 return n + find_sum(n-1) n = int(input(\\"Enter a number:\\")) print(\\"The sum of integers from 1 to\\", n, \\"is\\", find_sum(n))"},{"prompt":"Produce a Python program to do a linear search of an element in a given array.","completion":"def linearSearch(arr, x): for i in range (len(arr)): if arr[i] == x: return i return -1"},{"prompt":"Write a code snippet in Python which takes an array and returns the list of its square root values. [2, 4, 9]","completion":"[math.sqrt(x) for x in [2, 4, 9]]"},{"prompt":"Write a Python program to find an index in a list of numbers, where sum of numbers before it is equal to the sum of numbers after it [1, 4, 9, 5, 3, 2]","completion":"def index_sum_equal(nums): total = sum(nums) left_sum = 0 for i in range(len(nums)): right_sum = total - left_sum - nums[i] if left_sum == right_sum: return i left_sum += nums[i] return -1"},{"prompt":"Design a loop in a Python program to print the Fibonacci series up to the nth term. n=10","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b print(fibonacci(n))"},{"prompt":"Develop a Python generator to generate all prime numbers in range of 0 100.","completion":"def generate_prime_numbers(n): for num in range(2, n): prime = True for i in range(2, num): if num % i == 0: prime = False break if prime: yield num for prime_number in generate_prime_numbers(100): print(prime_number)"},{"prompt":"Design a neural network in Python to classify a set of data points into one of four different classes.","completion":"import tensorflow as tf from tensorflow import keras import numpy as np # define 2-D data points with four different classes x_train = np.array([[1,2], [2,4], [4,2], [2,1], [4,4], [3,3], [3,1], [1,3]]) y_train = np.array([0,0,1,1,2,2,3,3]) # define the network model model = keras.Sequential([ keras.layers.Dense(32, activation='relu'), keras.layers.Dense(4, activation='softmax') ]) # compile the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) # train the model model.fit(x_train, y_train, epochs=10)"},{"prompt":"Generate a Python decorator for calculating the time taken for a function to execute. Not applicable","completion":"import time def timeit(func): def wrapper(*args, **kwargs): start = time.time() result = func(*args, **kwargs) end = time.time() print(f\\"Time taken for {func.__name__}: {end-start} seconds\\") return result return wrapper"},{"prompt":"Create a Python program to print the numbers from 1 to 100, except for multiples of three, where the program should print Fizz instead.","completion":"for num in range(1, 101): if num % 3 == 0: print('Fizz') else: print(num)"},{"prompt":"Create an Algorithm in Python for implementing a Binary Search Tree. Not applicable","completion":"class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None class BST: def __init__(self): self.root = None def insert(self, val): node = TreeNode(val) if self.root is None: self.root = node else: self.__insert_helper(self.root, node) def __insert_helper(self, root, node): if node.val < root.val: if root.left is None: root.left = node else: self.__insert_helper(root.left, node) else: if root.right is None: root.right = node else: self.__insert_helper(root.right, node) def search(self, val): node = self.__search_helper(self.root, val) return node is not None def __search_helper(self, root, val): if root is None: return None if root.val == val: return root if val < root.val: return self.__search_helper(root.left, val) else: return self.__search_helper(root.right, val)"},{"prompt":"Write a function in Python to generate a spacedelimited matrix of m rows and n columns. m = 3 n = 5","completion":"def generate_matrix(m, n): matrix = \\"\\" # generate the matrix row by row for i in range(m): row = \\"\\" # generate a single row with n columns for j in range(n): row += str(random.randint(-100, 100)) + \\" \\" matrix += row + \\"n\\" return matrix matrix = generate_matrix(3, 5) print(matrix) # 23 12 -72 -35 47 # -6 67 42 -54 95 # 93 13 75 -9 -63"},{"prompt":"Create a security system in Python to check if a given password matches a database of hashed passwords. Hashed password: abcdefg12345678","completion":"import bcrypt def checkPassword(hashed_password): # Hash the password password = bcrypt.hashpw(password, bcrypt.gensalt()) # Check the password against the hash if bcrypt.checkpw(password, hashed_password): return True else: return False if __name__ == \\"__main__\\": hashed_password = \\"abcdefg12345678\\" if checkPassword(hashed_password): print(\\"Password match\\") else: print(\\"Password verficiation failed\\")"},{"prompt":"Design a solution in Python to identify all the words containing the given letter. String: Hello World Letter: H","completion":"def find_words_containing_letter(givenString, letter): words = givenString.split(' ') words_containing_letter = [] for word in words: if letter in word: words_containing_letter.append(word) return words_containing_letter print(find_words_containing_letter('Hello World', 'H'))"},{"prompt":"Create a Python class to implement a queue with methods push() to insert an element, pop() to remove an element, and peek() to return the top element of the queue. Not applicable","completion":"class Queue: def __init__(self): self.queue = [] def push(self, item): self.queue.append(item) def pop(self): return self.queue.pop(0) def peek(self): return self.queue[0] # Usage example q = Queue() q.push(1) q.push(2) q.push(3) print(q.pop()) # 1 print(q.peek()) # 2"},{"prompt":"What would be the best data structure to efficiently store the knearest neighbors of a given point in a 2Dimensional space in Python?","completion":"The best data structure to efficiently store the k-nearest neighbors of a given point in a 2-Dimensional space in Python is a k-d tree. A k-d tree is a specialized data structure that can be used to store and efficiently query k-nearest neighbors of points in a 2-Dimensional space. It is a space partitioning tree that recursively splits the dimensions of the space around a median. This allows for extremely efficient queries of the k-nearest neighbors."},{"prompt":"Create a function in Python to check if a number is greater than a given threshold.","completion":"def is_greater(num, threshold): if num > threshold: return True else: return False"},{"prompt":"Rewrite the following JavaScript code in Python. function addNumbers(x, y) { return x + y; }","completion":"def addNumbers(x, y): return x + y"},{"prompt":"Write a Python program that takes in a string of numbers delimited by spaces and returns the largest number. 64 8 224 54 21","completion":"def findMax(string): numbers = string.split(\\" \\") largest = 0 for number in numbers: if number > largest: largest = number return largest string = \\"64 8 224 54 21\\" print(f\\"The largest number is {findMax(string)}.\\")"},{"prompt":"Create a Python program that takes a string as input and returns all palindromic substrings of the string. String = “abc”","completion":"def palindromic_substring(s): all_palindromes = [] # check for substrings of length 3 for i in range(len(s) - 2): if s[i] == s[i + 2]: all_palindromes.append(s[i:i + 3]) # check for substrings of length 4 for i in range(len(s) - 3): if s[i] == s[i + 3]: all_palindromes.append(s[i:i + 4]) return all_palindromes result = palindromic_substring(\\"abc\\") print(result)"},{"prompt":"Write a quick sorting algorithm using Python.","completion":"def quick_sort(array): if len(array) <= 1: return array pivot = array[0] left = [] right = [] for element in array[1:]: if element <= pivot: left.append(element) else: right.append(element) return quick_sort(left) + [pivot] + quick_sort(right)"},{"prompt":"Create a RNN model using Python that can classify a piece of text as either positive or negative sentiment.","completion":"# Load the required libraries import numpy as np import tensorflow from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout # Load the training dataset sentences = ['This is a good sentiment', 'This is a bad sentiment'] labels = [1, 0] # Create the tokenizer tokenizer = Tokenizer(num_words=1000) tokenizer.fit_on_texts(sentences) # Encode the sentences encoded_sentences = tokenizer.texts_to_sequences(sentences) padded_sentences = pad_sequences(encoded_sentences, maxlen=10) # Build the model model = Sequential() model.add(Embedding(input_dim=1000, output_dim=32, input_length=10)) model.add(LSTM(32)) model.add(Dense(1, activation='sigmoid')) # Compile and fit the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(padded_sentences, labels, epochs=10) # Evaluate the model scores = model.evaluate(padded_sentences, labels) print(\\"Accuracy: %.2f%%\\" % (scores[1]*100))"},{"prompt":"Create a function in python that takes two integers as inputs and outputs the greatest common divisor. 105, 45","completion":"def gcd(x, y): while(y): x, y = y, x % y return x # driver code x = 105 y = 45 print(\\"The gcd of\\", x, \\"and\\", y, \\"is\\", gcd(x, y))"},{"prompt":"Create a textbased game using Python. The game should have different levels and points for completing each level. Not applicable","completion":"import random # Initialize the game level = 1 points = 0 while True: # Randomly generate the level level = random.randint(1, 10) # Print out the level and ask for input print('Level {}'.format(level)) user_input = input() # Logic for checking the input if user_input == 'correct': points += 10 elif user_input == 'wrong': break # Print out the result print('Points:', points)"},{"prompt":"Find a way to write an entire program without using any looping constructs or ifelse statements.","completion":"// In C #include <stdio.h> int main() { int x = 0; // Recurse to infinity x = main(); printf(\\"Infinite Recursion Complete\\"); return 0; } // In Python def recursive_call(): recursive_call() recursive_call()"},{"prompt":"Write a Python program to identify the longest line in a string. Sentence 1 Sentence 2 Sentence 3 (longest sentence) Sentence 4","completion":"test_str = 'Sentence 1nSentence 2nSentence 3 (longest sentence)nSentence 4' # Get all lines in test_str into a list str_lines = test_str.split('n') # Find the longest line in the list longest_line = max(str_lines, key=len) # Print the longest line print(f'The longest line is: {longest_line}')"},{"prompt":"Optimize a code snippet in Python. The code snippet is a function for computing the factorial of a number. def factorial(n): if n < 1: return 1 else: return n*factorial(n1)","completion":"def factorial(n): if n == 0: return 1 else: result = 1 for i in range(1, n+1): result *= i return result"},{"prompt":"Create a Python script for scraping a website and extracting a list of URLs from it. https://example.com","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com' response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') urls = [] for link in soup.find_all('a', href=True): if link['href'].startswith('http'): urls.append(link['href']) print(urls)"},{"prompt":"Design a program to filter out strings in a list that have length 3. ['ada', 'python', 'ruby', 'egg', 'coffee']","completion":"def filter_by_length(list): \\"\\"\\" Filters out strings in the given list that have length 3. \\"\\"\\" filtered_list = [word for word in list if len(word) == 3] return filtered_list if __name__ == '__main__': list = ['ada', 'python', 'ruby', 'egg', 'coffee'] print(filter_by_length(list))"},{"prompt":"Design a code generator to convert a Python code into Javascript code. def hello_world(): print(Hello World)","completion":"function helloWorld() { console.log(\\"Hello World\\"); }"},{"prompt":"Write a Python program to parse a JSON object from a given string. Input String: {name: John Doe, age: 28}","completion":"import json givenString = \\"{\\"name\\": \\"John Doe\\", \\"age\\": 28}\\" data = json.loads(givenString) print(data)"},{"prompt":"mplement a Python module that converts a given date to ISO format 25 December 2024","completion":"import datetime def convertToISO(dateString): date = datetime.datetime.strptime(dateString, \\"%d %B %Y\\").isoformat() return date # test dateString = '25 December 2024' print(convertToISO(dateString)) # Output: 2024-12-25T00:00:00"},{"prompt":"Generate a program in Python to find the maximum element in a given array.","completion":"# Generate a program in Python to find the maximum element in a given array def maximum_element(arr): \\"\\"\\" Find the maximum element in a given array. Parameters ---------- arr : array_like The array of integers. Returns ------- int The maximum value found in the array, or None if the array is empty. \\"\\"\\" max_element = None for n in arr: if max_element is None or n > max_element: max_element = n return max_element"},{"prompt":"Write a Dockerfile that sets up a Python environment for a web application. Not applicable","completion":"FROM python:3.8 # Set environment variables ENV PYTHONUNBUFFERED 1 ENV PYTHONDONTWRITEBYTECODE 1 # Copy project files WORKDIR /usr/src/app RUN mkdir static RUN mkdir templates COPY requirements.txt . # Install dependencies RUN pip install --no-cache-dir -r requirements.txt # Run the app CMD uvicorn app:app --host=0.0.0.0 --port=8000"},{"prompt":"Write a code snippet in Python to create a Pandas Dataframe with three columns containing random numbers in the range 11000. Not applicable","completion":"import pandas as pd import numpy as np # Create a Dataframe with 3 Columns and 10 Rows df = pd.DataFrame(np.random.randint(1,1000,size=(10, 3)), columns=['col1', 'col2','col3']) print(df)"},{"prompt":"Generate a Python program that will convert a given integer to a string.","completion":"def int_to_string(num): return str(num)"},{"prompt":"Using Python create a web scraper to retrieve the text in a specific HTML element.","completion":"import requests from bs4 import BeautifulSoup response = requests.get('http://example.com/') html = response.content soup = BeautifulSoup(html, 'html.parser') text_in_element = soup.find('div', {'class': 'my-class'}).get_text() print(text_in_element)"},{"prompt":"Generate a Python program that searches a list of given integers for a given target value and returns its index if found. list = [2, 3, 4, 5, 6], target = 4","completion":"def search(list, target): for i in range(len(list)): if list[i] == target: return i return -1 list = [2, 3, 4, 5, 6] target = 4 index = search(list, target) if index == -1: print(\\"The target was not found.\\") else: print(\\"The target was found at index %d.\\" % index)"},{"prompt":"Generate a list of the top 10 common words in a given list of words. ['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile']","completion":"from collections import Counter words = ['Python', 'programming', 'language', 'is', 'powerful', 'and', 'versatile'] word_counts = Counter(words) top_10 = word_counts.most_common(10) print (top_10)"},{"prompt":"Design a method in Python to test whether or not a number is a palindrome.","completion":"def is_palindrome(n): n_str = str(n) return n_str == n_str[::-1]"},{"prompt":"Find the Fibonacci sequence of a given number using a Python program. var n = 10;","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(n))"},{"prompt":"Write a function in Python to print a random permutation of array elements. input_array = [1, 2, 3, 4, 5]","completion":"import random def random_permutation(input_array): perm = [] while(len(input_array) > 0): el = random.choice(input_array) perm.append(el) input_array.remove(el) return perm"},{"prompt":"Create a web application using Flask and Python to read in a dataset and print the number of unique items.","completion":"@app.route('/', methods=['GET','POST']) def read_dataset(): if request.method == 'POST': data = request.form['data'] unique_items = len(set(data.split())) print('Number of Unique items is:',unique_items) return render_template('index.html')"},{"prompt":"Create a simple webscraper using Python library BeautifulSoup which scrapes a website for articles and downloads all the articles The website url should be https://www.example.com/","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') # Get articles articles = soup.find_all('article') # Download the articles for article in articles: article_url = article.find('a')['href'] article_response = requests.get(article_url) with open(article_url.split('/')[-1], 'wb') as f: f.write(article_response.content)"},{"prompt":"To reproduce Figure 8 from Prsa et al. 2016, first set up a binary system with reasonable albedos and relevant parameters. Then compute light curves with wilson and horvat irradiation and plot the relative differences between the two as a function of phase, for several different values of the inclination. Use the given code as a reference.","completion":"#!/usr/bin/env python # coding: utf-8 # Lambert Scattering (irrad_method='horvat') # ============================ # # Setup # ----------------------------- # Let's first make sure we have the latest version of PHOEBE 2.0 installed. (You can comment out this line if you don't use pip for your installation or don't want to update to the latest release). # In[ ]: get_ipython().system('pip install -I \\"phoebe>=2.0,<2.1\\"') # As always, let's do imports and initialize a logger and a new bundle. See [Building a System](../tutorials/building_a_system.html) for more details. # In[1]: get_ipython().run_line_magic('matplotlib', 'inline') # In[2]: import phoebe from phoebe import u # units import numpy as np import matplotlib.pyplot as plt logger = phoebe.logger('error') b = phoebe.default_binary() # Relevant Parameters # --------------------------------- # For parameters that affect reflection and heating (irrad_frac_*) see the tutorial on [reflection and heating](./reflection_heating.ipynb). # # The 'irrad_method' compute option dictates whether irradiation is handled according to the new Horvat scheme which includes Lambert Scattering, Wilson's original reflection scheme, or ignored entirely. # In[3]: print(b['irrad_method']) # Influence on Light Curves (fluxes) # --------------------------------- # # Let's (roughtly) reproduce Figure 8 from [Prsa et al. 2016](http://phoebe-project.org/publications/2016Prsa+) which shows the difference between Wilson and Horvat schemes for various inclinations. # # <img src=\\"prsa+2016_fig8.png\\" alt=\\"Figure 8\\" width=\\"600px\\"/> # # First we'll roughly create a A0-K0 binary and set reasonable albedos. # In[4]: b['teff@primary'] = 11000 b['rpole@primary'] = 2.5 b['gravb_bol@primary'] = 1.0 b['teff@secondary'] = 5000 b['rpole@secondary'] = 0.85 b['q@binary'] = 0.8/3.0 b.flip_constraint('mass@primary', solve_for='sma@binary') b['mass@primary'] = 3.0 # In[5]: print(b.filter(qualifier=['mass', 'rpole', 'teff'], context='component')) # In[6]: b['irrad_frac_refl_bol@primary'] = 1.0 b['irrad_frac_refl_bol@secondary'] = 0.6 # Now we'll compute the light curves with wilson and horvat irradiation, and plot the relative differences between the two as a function of phase, for several different values of the inclination. # # Note that Figure 8 excluded eclipse effects, but that ability is not included in PHOEBE 2.0, so there will be a slight discrepancy for inclinations which exhibit eclipses. # In[7]: phases = np.linspace(0,1,101) b.add_dataset('lc', times=b.to_time(phases)) # In[8]: for incl in [0,30,60,90]: b.set_value('incl@binary', incl) b.run_compute(irrad_method='wilson') fluxes_wilson = b.get_value('fluxes', context='model') b.run_compute(irrad_method='horvat') fluxes_horvat = b.get_value('fluxes', context='model') plt.plot(phases, (fluxes_wilson-fluxes_horvat)/fluxes_wilson, label='i={}'.format(incl)) plt.xlabel('phase') plt.ylabel('[F(wilson) - F(horvat)] / F(wilson)') plt.legend(loc='upper center') plt.show()"},{"prompt":"Create a web application using Python Flask for managing a library database, including models for Book, Author, and Publisher. Not applicable","completion":"from flask import Flask from flask_sqlalchemy import SQLAlchemy app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class Book(db.Model): id = db.Column(db.Integer, primary_key=True) title = db.Column(db.String(80), unique=True) author_id = db.Column(db.Integer, db.ForeignKey('author.id')) publisher_id = db.Column(db.Integer, db.ForeignKey('publisher.id')) class Author(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(80), unique=True) class Publisher(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(80), unique=True) db.create_all() if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a decisiontree algorithm that takes a CSV of input data and predicts the correct class for python.","completion":"def decision_tree_classifier(input_data): from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(input_data.drop(axis=1), input_data[input_data.columns[-1]], test_size=0.3) classifier = DecisionTreeClassifier() classifier.fit(X_train, y_train) y_pred = classifier.predict(X_test) return y_pred"},{"prompt":"Create an AWS Lambda function in Python that sends an automated SMS message when a new user signup is detected. Phone Number = 3233334444, Message = Thank you for signing up for our service","completion":"import boto3 def lambda_handler(event, context): phone_number = event[\\"Phone Number\\"] message = event[\\"Message\\"] # Create an SNS client sns = boto3.client(\\"sns\\") # Publish a simple message to the specified SNS topic response = sns.publish( PhoneNumber=phone_number, Message=message ) # Response return { 'statusCode': 200, 'body': response }"},{"prompt":"Generate a code to convert Celsius to Fahrenheit in Python","completion":"def celsius_to_fahrenheit(celsius): \\"\\"\\" Convert Celsius Temperature to Fahrenheit. Parameters: celsius (float): Temperature in Celsius Returns: Temperature in Fahrenheit \\"\\"\\" return celsius * 9/5 + 32"},{"prompt":"Create an HTML page for a directory of Engineers that displays their name, organization, and skills. data = [ {name: 'John Doe', organization: 'Acme Co.', skills: ['JavaScript', 'Python']}, {name: 'Jane Doe', organization: 'Acme Co.', skills: ['JavaScript', 'Node.js']}, {name: 'Bob Doe', organization: 'ABC Co.', skills:['GoLang', 'PHP']}, ]","completion":"<!DOCTYPE html> <html> <head> <title>Engineers Directory</title> </head> <body> <p>Directory of Engineers and their skills</p> <ul> <li> <span>Name: </span><span>John Doe</span>, <span>Organization: </span><span>Acme Co.</span>, <span>Skills: </span><span>JavaScript, Python</span> </li> <li> <span>Name: </span><span>Jane Doe</span>, <span>Organization: </span><span>Acme Co.</span>, <span>Skills: </span><span>JavaScript, Node.js</span> </li> <li> <span>Name: </span><span>Bob Doe</span>, <span>Organization: </span><span>ABC Co.</span>, <span>Skills: </span><span>GoLang, PHP</span> </li> </ul> </body> </html>"},{"prompt":"Create a Python module that calculates the distance between two points given their latitude and longitude. Not applicable","completion":"import math def haversine_distance(lat1, lon1, lat2, lon2): ''' Calculate the great circle distance between two points on the earth (specified in decimal degrees). Source: https://stackoverflow.com/a/4913653 ''' # convert decimal degrees to radians lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2]) # haversine formula dlon = lon2 - lon1 dlat = lat2 - lat1 a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2 c = 2 * math.asin(math.sqrt(a)) r = 6371 # Radius of earth in kilometers. Use 3956 for miles return c * r"},{"prompt":"Create a Python program to print the nth Fibonacci number in the sequence, where n is provided as an input. n = 10","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b print(Fibonacci(10))"},{"prompt":"Write a Python program to create a new list with only odd numbers. [1,2,3,4,5,6,7,8,9]","completion":"def get_odd_numbers(nums): odd_nums = [] for num in nums: if num % 2 == 1: odd_nums.append(num) return odd_nums nums = [1,2,3,4,5,6,7,8,9] print(get_odd_numbers(nums))"},{"prompt":"Edit this Python code to improve the runtime complexity of the program. def solve(list): max_len = 0 for i in range(len(list)1): for j in range(i+1, len(list)): if list[i] == list[j]: cur_len = 0 k = 0 while i+k < len(list) and j+k < len(list) and list[i+k] == list[j+k]: cur_len += 1 k += 1 max_len = max(max_len, cur_len) return max_le","completion":"def solve(list): max_len = 0 longest_prefix = [0] * len(list) for i in range(1, len(list)): if list[i] == list[i-1]: longest_prefix[i] = longest_prefix[i-1] + 1 else: longest_prefix[i] = 0 max_len = max(max_len, longest_prefix[i]) return max_len"},{"prompt":"Create a python script to check if a given name is valid or not.","completion":"def is_name_valid(name): # Check if the name contains only alphabets if name.isalpha(): return True return False name = 'John' print(is_name_valid(name))"},{"prompt":"Given a sentence, write a python program to return all the possible permutations of the words in the sentence. sentence = the cat sat on the mat","completion":"import itertools def get_permutations(sentence): sentence_list = sentence.split(\\" \\") return list(itertools.permutations(sentence_list)) if __name__ == '__main__': print(get_permutations(\\"the cat sat on the mat\\"))"},{"prompt":"Create a JSON parser in Python","completion":"import json def parseJSON(jsonString): data = json.loads(jsonString) return data"},{"prompt":"Create a function in Python to display numbers from 1 to 10.","completion":"def display_nums(): for i in range(1, 11): print(i)"},{"prompt":"Write a function in Python to calculate the Odds Ratios for a given contingency table. contingency_table = [[100, 75], [40, 35]]","completion":"def odds_ratio(contingency_table): numerator = (contingency_table[0][0] * contingency_table[1][1]) denominator = (contingency_table[0][1] * contingency_table[1][0]) if denominator == 0: return None odds_ratio = numerator / denominator return odds_ratio if __name__ == \\"__main__\\": contingency_table = [[100, 75], [40, 35]] print(odds_ratio(contingency_table))"},{"prompt":"Create a KNearest Neighbors classifier model in Python for predicting the sale price of a used car. 1,Toyota,Corolla,110000,Petrol,Manual,1990,30,3000","completion":"import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier # list of features and labels features = np.array([[110000, 'Petrol', 'Manual', 1990, 30, 3000]]) labels = np.array([[1]]) # perform data preprocessing X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2) scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) # create the model model = KNeighborsClassifier() model.fit(X_train_scaled, y_train) # predict sales price predicted_price = model.predict([X_test_scaled[0]]) print(\\"Predicted sale price:\\", predicted_price[0])"},{"prompt":"Given a list of objects and a property of each object. Can you create a Python program to output the value of the property of the first and last object? [ { name: Alice , age: 24 }, { name: Bob , age: 29 }, { name: Charlie , age: 28 } ]","completion":"nameFirst = 'Alice' nameLast = 'Charlie' ageFirst = 24 ageLast = 28"},{"prompt":"Answer a question using Python. Question: What is the sum of all numbers divisible by 25 between 500 and 1000?","completion":"int sum = 0 for i in range(500, 1000): if(i % 25 == 0): sum += i print(sum)"},{"prompt":"Design an efficient datastructure using Python for storing a list of strings that can be efficiently searched.","completion":"class StringList: def __init__(self): self.storage = [] def add(self, item): self.storage.append(item) def search(self, query): if query in self.storage: return True else: return False"},{"prompt":"Modify the given Python code to perform sentiment analysis (positive or negative) on a given text. text = This movie was truly amazing","completion":"import nltk nltk.download('vader_lexicon') from nltk.sentiment.vader import SentimentIntensityAnalyzer sid = SentimentIntensityAnalyzer() text = \\"This movie was truly amazing\\" sentiment_scores = sid.polarity_scores(text) if sentiment_scores['compound'] >= 0.05 : print(\\"Positive\\") elif sentiment_scores['compound'] <= - 0.05 : print(\\"Negative\\") else : print(\\"Neutral\\")"},{"prompt":"Generate a code to calculate the mean absolute difference of items in a list in Python. my_list = [1, 2, 3, 4, 5]","completion":"def mean_absolute_difference(my_list): diff = 0 for i in range(len(my_list) - 1): diff += abs(my_list[i] - my_list[i + 1]) return diff / (len(my_list) - 1) if __name__ == \\"__main__\\": print(mean_absolute_difference(my_list))"},{"prompt":"Write a Python program to optimize a function with multiple input parameters. function = f(x, y) = 5x + 3y","completion":"#import matplotlib.pyplot as plt import numpy as np import sympy as sym from scipy import optimize # define the function def function(x, y): return 5*x + 3*y # define the inputs x = sym.Symbol('x') y = sym.Symbol('y') # optimize the function result = optimize.minimize(function, [0, 0]) # output the results print('The optimal value of x is:', result.x[0]) print('The optimal value of y is:', result.x[1])"},{"prompt":"Create a function in Python to calculate the sum of squares for all numbers within a range given two integers, n and m. n = 4 m = 6","completion":"def sum_of_squares(n, m): result = 0 for i in range(n, m+1): result += i*i return result print(sum_of_squares(n, m))"},{"prompt":"Create a Python program that separates odd and even numbers. [3, 4, 7, 12, 19]","completion":"def odd_even(numbers): odd = [] even = [] for num in numbers: if num % 2 == 0: even.append(num) else: odd.append(num) return odd, even odds, evens = odd_even([3, 4, 7, 12, 19]) print(odds) # prints: [3, 7, 19] print(evens) # prints: [4, 12]"},{"prompt":"Create a program using Python that adds two numbers entered by the user. Not applicable","completion":"# The function to add two numbers def add(num1, num2): # Adding the two numbers result = num1 + num2 # Printing the result print(f'The result of the addition is {result}') # Taking the input from the user num1 = int(input('Enter the first number: ')) num2 = int(input('Enter the second number: ')) # Calling the add function add(num1, num2)"},{"prompt":"Sort a list in descending order using a lambda function in Python. Input list : [1, 5, 9, 8, 21]","completion":"list = [1, 5, -9, 8, 21] sorted_list = sorted(list, reverse=True, key= lambda x:x) print(sorted_list)"},{"prompt":"Write a Python program to generate an array of random numbers in the range [0,99], with the length given as input. length = 10","completion":"import random def generate_random_array(length): return [random.randint(0, 99) for _ in range(length)]"},{"prompt":"Generate a TensorFlow model in Python to predict the sentiment of text. data = [('Where can I find a good cup of coffee?', 0), ('I am so happy!', 1), ('This is so sad :(', 0)]","completion":"import tensorflow as tf from tensorflow import keras # Split data into train and test sets train_X, train_y, test_X, test_y = [], [], [], [] for x, y in data: train_X.append(x) train_y.append(y) # Create tokenizer tokenizer = keras.preprocessing.text.Tokenizer() tokenizer.fit_on_texts(train_X) # Create model model = keras.models.Sequential([ keras.layers.Dense(64, input_shape=[None,]), keras.layers.Dense(64, activation='relu'), keras.layers.Dense(1, activation='sigmoid') ]) # Compile model model.compile( optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'] ) # Train train_X_vector = tokenizer.texts_to_matrix(train_X) model.fit(train_X_vector, train_y, epochs=10, validation_split=0.2)"},{"prompt":"Generate code to build an API using python and Flask","completion":"from flask import Flask app = Flask(__name__) @app.route(\\"/\\") def greet(): return \\"Hello world!\\" if __name__ == \\"__main__\\": app.run()"},{"prompt":"Develop a Python program to estimate the value of PI using Leibniz's formula. Not applicable","completion":"def estimate_pi(n_terms: int) -> float: numerator: float = 4.0 denominator: float = 1.0 operation: float = 1.0 pi: float = 0.0 for _ in range(n_terms): pi += operation * (numerator / denominator) denominator += 2.0 operation *= -1.0 return pi if __name__ == \\"__main__\\": print(estimate_pi(1000))"},{"prompt":"Prepare a Python 3 program that takes the following input and finds the most frequently occurring characters in it. Lorem ipsum dolor sit amet consectetur adipiscing elit morbi in ultrice","completion":"string = \\"Lorem ipsum dolor sit amet consectetur adipiscing elit morbi in ultrices\\" # Create an empty dictionary freq = {} # Loop through the string and populate the dictionary for i in string: if i in freq: freq[i] += 1 else: freq[i] = 1 # Get the most frequently occurring character max_freq = 0 for key, value in freq.items(): if value > max_freq: max_freq = value max_char = key # Print the most frequent character print(\\"The most frequent character is '\\" + max_char + \\"' and it occurred \\" + str(max_freq) + \\" times.\\")"},{"prompt":"Write a Python program to compare two sets of strings, and print the longest common substring of the two sets. set1: [pineapple ,mango,apple,orange] set2: [grandfather,grandmother,father,mother]","completion":"s1 = set([\\"pineapple\\" ,\\"mango\\",\\"apple\\",\\"orange\\"]) s2 = set([\\"grandfather\\",\\"grandmother\\",\\"father\\",\\"mother\\"]) longest_common_string = \\"\\" for word1 in s1: for word2 in s2: if word1 not in longest_common_string and word2 not in longest_common_string: common_string = \\"\\" for i in range(min(len(word1),len(word2))): if word1[i] == word2[i]: common_string += word1[i] if len(common_string) > len(longest_common_string): longest_common_string = common_string print(longest_common_string)"},{"prompt":"Create a web scrapper in Python that extracts the number of subscribers from a YouTube Channel. https://www.youtube.com/user/mahalo","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.youtube.com/user/mahalo' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') subs = soup.find(id='subscriber-count').text subscribers = int(subs.replace(',', '').split(' ')[0]) print('Number of subscribers: ', subscribers)"},{"prompt":"Construct a for loop in Python to iterate over a list and print out each item in the list. myList = [1, 2, 3, 4]","completion":"for element in myList: print(element)"},{"prompt":"Write a Python function to generate an array of numbers from 1 to n in random order. 7","completion":"import random def generate_random_array(n): array = [i for i in range(1, n + 1)] random.shuffle(array) return array result = generate_random_array(7) print(result)"},{"prompt":"Define an interface for a data import task in Python. Not applicable","completion":"class DataImportTask: def __init__(self, source, destination): self.source = source self.destination = destination # Method to download the source file to the file system def download(self): # Implementation here # Method to read the content of the source file into a CSV format def read(self): # Implementation here # Method to format the content into the destination format def format(self): # Implementation here # Method to save the destination in the desired location def save(self): # Implementation here"},{"prompt":"Write a Python program to remove a given element from a list.","completion":"def remove_item(items, target): return [i for i in items if i != target]"},{"prompt":"Create a Python program to check if a given string consists of only numeric digits. 123456","completion":"# Python program to check if a given string consists of only numeric digits # making a string with only digits # and assigning it to a variable test_string = \\"123456\\" # printing original string print(\\"Original String: \\" + test_string) # using if condition to # Check if all values are numbers if test_string.isdigit(): print(\\"String contains only numbers\\") else : print(\\"String not contains only numbers\\")"},{"prompt":"Can you write a python program to produce the intersection of two given lists? list 1: [2, 3, 4] list 2: [3, 5, 6, 4]","completion":"list1 = [2, 3, 4] list2 = [3, 5, 6, 4] # create a set of elements in list1 s1 = set(list1) # create a set of elements in list2 s2 = set(list2) # find the intersection intersection = s1.intersection(s2) # print the intersection print(intersection) # prints {3, 4}"},{"prompt":"Convert the following code from python 2.x to python 3.x. import csv csvReader = csv.reader(open(filename.csv, rb))","completion":"import csv with open(\\"filename.csv\\", 'r', newline='') as f: csvReader = csv.reader(f)"},{"prompt":"Outpus the number of unique elements in a Python list. list = [1, 2, 2, 3, 4, 4, 4]","completion":"unique_elements = set(list) print(\\"Number of unique elements:\\", len(unique_elements))"},{"prompt":"Write an algorithm in Python that takes an array of numbers and returns an array of only the even numbers. [2, 5, 8, 9, 10, 13, 11]","completion":"def keep_even_only(arr): return [n for n in arr if n%2 == 0] arr = [2, 5, 8, 9, 10, 13, 11] even_arr = keep_even_only(arr) print(even_arr) # Output: # [2, 8, 10]"},{"prompt":"Create a sorting algorithm for an array of integers using Python. [4, 2, 9, 7, 3]","completion":"def sort(array): # base case: if array is empty or has only one element, it is already sorted if len(array) <= 1: return array # divide array into two halves midpoint = len(array) // 2 left = array[:midpoint] right = array[midpoint:] # recursively sort left and right subarrays left = sort(left) right = sort(right) # merge two sorted halfs return merge(left, right) def merge(left, right): result = [] left_index = 0 # index of the left subarray right_index = 0 # index of the right subarray # keep going until one of the two subarrays is depleted while left_index < len(left) and right_index < len(right): if left[left_index] <= right[right_index]: # add the smallest element and increment its index result.append(left[left_index]) left_index += 1 else: result.append(right[right_index]) right_index += 1 # we must have reached the end of the left or right subarray # append all remaining elements for i in range(left_index, len(left)): result.append(left[i]) for i in range(right_index, len(right)): result.append(right[i]) return result # Test code array = [4, 2, 9, 7, 3] sorted_array = sort(array) print(sorted_array)"},{"prompt":"Utilize array sorting to sort an array in Python. arr = [10, 7, 8, 4, 2, 9]","completion":"arr.sort() print(arr)"},{"prompt":"Generate a Python function that returns the maximum of two given numbers.","completion":"def maxOfTwo Numbers(num1, num2): if num1 > num2: return num1 else: return num2 print(maxOfTwoNumbers(4, 6))"},{"prompt":"Using a mix of SQL and Python, build a program to read from a database table into a pandas dataframe, perform some manipulation on that data, and return the manipulated data back to the database table.","completion":"# Establish an SQL connection import sqlite3 conn = sqlite3.connect(\\"mydatabase.db\\") # Create a cursor object c = conn.cursor() # Execute SQL Query c.execute(\\"SELECT * FROM TABLE\\") # Store the result in a dataframe import pandas as pd df = pd.DataFrame(c.fetchall()) # Perform some manipulation on the data # E.g. Add a new column df['new_col'] = df['old_col1'] + df['old_col2'] # Update the table df.to_sql(\\"TABLE\\", conn, if_exists='replace', index=False) # Close connection conn.close()"},{"prompt":"Write a Python function capable of generating a personalized Etsy product listing URL for a given product. Product name: 'Tulip Breeze Necklace' Product category: 'Jewelry' Product price: 45","completion":"def generateURL(productName, productCategory, productPrice): productName = productName.lower().replace(' ', '-') productCategory = productCategory.lower().replace(' ', '-') return 'https://www.etsy.com/listing/{}-{}-{}/{}'.format(productName, productPrice, productCategory, productName) generatedURL = generateURL('Tulip Breeze Necklace', 'Jewelry', 45) # https://www.etsy.com/listing/tulip-breeze-necklace-45-jewelry/tulip-breeze-necklace"},{"prompt":"mplement a class in Python to represent a rectangle with two fields: width and height.","completion":"class Rectangle: def __init__(self, width, height): self.width = width self.height = height def area(self): return self.width * self.height"},{"prompt":"Create a Python script for classifying customer data. customer_data = [ {name: John Doe, age: 25, gender: Male}, {name: Jane Doe, age: 30, gender: Female}, {name: Pat Smith, age: 75, gender: Unknown} ]","completion":"import pandas as pd df = pd.DataFrame(customer_data) df[\\"age_category\\"] = df[\\"age\\"].apply(lambda a: \\"Young\\" if 0 < a <= 20 else \\"Middle-aged\\" if 21 <= a <= 60 else \\"Senior\\") df[\\"gender_category\\"] = df[\\"gender\\"].apply(lambda g: \\"Male\\" if g == \\"Male\\" else \\"Female\\" if g == \\"Female\\" else \\"Other\\") print(df)"},{"prompt":"Create a Python function to convert centimeter to inches.","completion":"def centimeter_to_inches(cm): inches = cm * 0.39 return inches cm = 10 inches = centimeter_to_inches(cm) print(inches)"},{"prompt":"Create a python script that checks if all numbers in an array are greater than, equal to, or less than a given number. [3, 5,7], 4","completion":"def checkNum(arr, num): response = [] for element in arr: if element > num: response.append('greater than') elif element < num: response.append('less than') else: response.append('equal to') return response nums = [3,5,7] out = checkNum(nums, 4) print(out)"},{"prompt":"Write a script to classify the sentiment of a list of comments with Python. comments = [This product is great!, I hate this product, Not sure whether to buy it]","completion":"def classify_sentiment(comments): results = [] for comment in comments: if \\"great\\" in comment or \\"love\\" in comment: results.append(\\"positive\\") elif \\"hate\\" in comment or \\"bad\\" in comment: results.append(\\"negative\\") else: results.append(\\"neutral\\") return results print(classify_sentiment(comments))"},{"prompt":"Create a twoplayer game of Blackjack in Python.","completion":"from random import shuffle from itertools import product deck = list(product(['A','2','3','4','5','6','7','8','9','10','J','Q','K'],['C','D','H','S'])) shuffle(deck) player1_score = 0 player2_score = 0 def deal_cards(player): card1 = deck.pop() card2 = deck.pop() player.append(card1) player.append(card2) return player player1 = deal_cards([]) player2 = deal_cards([]) # Player 1 turn player1_score = 0 for i in range(len(player1)): card_score = 0 if (player1[i][0] == 'A'): card_score = 11 elif (player1[i][0] == 'J' or player1[i][0] == 'Q' or player1[i][0] == 'K'): card_score = 10 else: card_score = int(player1[i][0]) player1_score += card_score # Player 2 turn player2_score = 0 for i in range(len(player2)): card_score = 0 if (player2[i][0] == 'A'): card_score = 11 elif (player2[i][0] == 'J' or player2[i][0] == 'Q' or player2[i][0] == 'K'): card_score = 10 else: card_score = int(player2[i][0]) player2_score += card_score # Checking the winner if (player1_score > player2_score): print(\\"Player 1 wins!\\") elif (player2_score > player1_score): print(\\"Player 2 wins!\\") else: print(\\"It's a Tie!\\")"},{"prompt":"Create a function in Python to find the length of a string.","completion":"def string_length(word): return len(word) print(string_length('Hello World!')) # Output: 12"},{"prompt":"Create an logging utility in Python that prints the timestamp along with the logged content for each log entry. Not applicable.","completion":"import datetime def log(content): timestamp = datetime.datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\") message = f\\"{timestamp}: {content}\\" print(message) log('Logging Message')"},{"prompt":"Create a Python script to print out 10 random values between 1 and 10.","completion":"import random for i in range(10): print(random.randint(1, 10))"},{"prompt":"Create a program in Python that takes a list of integers, and prints the sum of the even numbers and the sum of the odd numbers. list=[2,4,5,7,1,3]","completion":"list=[2,4,5,7,1,3] even_sum= 6 odd_sum= 15 def sum_even_odd(list): even_sum=0 odd_sum=0 for num in list: if num % 2 == 0: even_sum+=num else: odd_sum+=num print(\\"even_sum=\\",even_sum) print(\\"odd_sum=\\",odd_sum) sum_even_odd(list)"},{"prompt":"Automate the testing of a Python Flask application by writing a script that will run unit tests on the models. Not applicable","completion":"import unittest from flask_testing import TestCase from app import db, Task class TestModel(TestCase): def create_app(self): return app def setUp(self): db.create_all() self.task = Task(description='Description') db.session.add(self.task) db.session.commit() def tearDown(self): db.session.remove() db.drop_all() class TestTask(TestModel): def test_task_creation(self): self.assertEqual('Description', self.task.description) if __name__ == '__main__': unittest.main()"},{"prompt":"Rewrite a python function from a set of instructions using list comprehension. Define a function that takes a list of numbers and returns a list containing only the odd numbers from the given list.","completion":"def odd_numbers(numbers): return [n for n in numbers if n % 2 != 0]"},{"prompt":"Write a Python groupby function that returns the top 3 most frequent elements in each group.","completion":"def top_frequent(data, key): grouped = data.groupby(key) result = [] for name, group in grouped: counts = group.value_counts() top_3 = counts.nlargest(3).index.tolist() result.append((name, top_3)) return result"},{"prompt":"Write a python function that accepts a number n as input and outputs its nth prime number.","completion":"def nth_prime(n): num_primes = 0 curr_num = 2 while num_primes < n: is_prime = True for i in range(2, curr_num): if curr_num % i == 0: is_prime = False break if is_prime: num_primes += 1 curr_num += 1 return curr_num - 1"},{"prompt":"Build a binary search algorithm in Python that takes in an input list and a target value to search for.","completion":"def binary_search(arr,target): low = 0 high = len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1 arr = [2, 3, 4, 10, 40] target = 10 index = binary_search(arr, target) if index != -1: print(\\"Element is present at index\\", index) else: print(\\"Element is not present in the array\\")"},{"prompt":"Optimize the given Python code so that it runs more efficiently. def calculateSum(a, b): total = 0 for i in range(a,b+1): total += i return total","completion":"def calculateSum(a, b): return int((b - a + 1) * (a + b) / 2)"},{"prompt":"Create a textbased RPG game in Python. The game should involve player navigation, be randomly generated, and include enemies the player must defeat in order to win. Not applicable","completion":"import random import time # Create classes class Player: def __init__(self, name): self.name = name self.hp = 100 self.position = [0, 0] class Enemy: def __init__(self, name): self.name = name self.hp = random.randint(50, 100) # Initialize globals player = Player(input(\\"What is your name? \\")) enemies = [] done = False # Game loop while not done: print(\\"You are in room ({}, {})\\".format(player.position[0], player.position[1])) print(\\"1. Move\\") print(\\"2. Check HP\\") print(\\"3. Exit Game\\") action = int(input(\\"What do you want to do? \\")) if action == 1: # Movement x = int(input(\\"Move how many units on the x-axis? \\")) y = int(input(\\"Move how many units on the y-axis? \\")) player.position[0] += x player.position[1] += y elif action == 2: # Check HP print(\\"Your HP is {}\\".format(player.hp)) elif action == 3: # Exit Game done = True # Generate enemies randomly if random.random() < 0.1: enemies.append(Enemy(\\"Rat\\")) print(\\"An enemy appeared!\\") # Combat for enemy in enemies: print(\\"A {} approaches!\\".format(enemy.name)) print(\\"What do you do? 1. Fight 2. Flee\\") action = int(input(\\">\\")) if action == 1: fight(player, enemy)"},{"prompt":"Write a Python function to filter strings using a filter function as a parameter.","completion":"def filter_strings(strings, filter_function): filtered = [] for string in strings: if filter_function(string): filtered.append(string) return filtered"},{"prompt":"Convert a given sentence to uppercase using Python. This is a sample sentence.","completion":"sentence = \\"This is a sample sentence.\\" output = sentence.upper() print(output)"},{"prompt":"Design a Python algorithm to perform a Prefix Sum operation on an array. [1, 2, 3, 4]","completion":"def prefix_sum(arr): result = [] s = 0 for x in arr: s += x result.append(s) return result arr = [1, 2, 3, 4] prefix_sum(arr)"},{"prompt":"Write a Python program to determine the number of elements in a given array before the return value is 1. Array = [2, 3, 1, 5, 4, 7]","completion":"def countElements(Array): count = 0 for i in Array: if i != -1: count = count + 1 else: break return count"},{"prompt":"Create a code editor program in Python to easily format code and highlight syntax.","completion":"import tkinter as tk from tkinter import filedialog, Text, Menu # root window configuration root = tk.Tk() root.title(\\"Code Editor\\") # text area where code is written textArea = Text(root, relief=\\"sunken\\") textArea.grid(row=0, column = 0, columnspan=3, padx = 5, pady = 5, sticky = \\"nsew\\") # sets the scrollbar x y scrollbar = tk.Scrollbar(textArea) textArea.configure(xscrollcommand=scrollbar.set) scrollbar.config(command=textArea.yview) scrollbar.grid(row=0, column=3, sticky='nsew') # open file def open_file(): global filename filename = filedialog.askopenfilename(defaultextension=\\".txt\\", filetypes=[(\\"All Files\\", \\"*.*\\"), (\\"Text Files\\", \\"*.txt\\")]) if filename == \\"\\": filename = None else: root.title(f\\"Code Editor - {filename}\\") textArea.delete(1.0, tk.END) f = open(filename, \\"r\\") textArea.insert(1.0, f.read()) f.close() # save file def save_file(): if filename == None: save_as() else: f = open(filename, \\"w\\") f.write(textArea.get(1.0, tk.END)) f.close() # save as file def save_as(): global filename filename = filedialog.asksaveasfilename(initialfile=\\"Untitled.txt\\", defaultextension=\\".txt\\", filetypes=[(\\"All Files\\", \\"*.*\\"), (\\"Text Files\\", \\"*.txt\\")]) f = open(filename, \\"w\\") f.write(textArea.get(1.0, tk.END)) f.close() # creating the statusbar statusBar = tk.Label(root, text=\\"Status Bar\\") statusBar.grid(row=1, column=0, columnspan=3, sticky=\\"ew\\") # creating the menubar menubar = Menu(root) root.config(menu=menubar) # creating the options for the file menu fileMenu = Menu(menubar) menubar.add_cascade(label=\\"File\\", menu=fileMenu) fileMenu.add_command(label=\\"Open\\", command=open_file) fileMenu.add_command(label=\\"Save\\", command=save_file) fileMenu.add_command(label=\\"Save As\\", command=save_as) # coding syntax highlighting textArea.configure(bg=\\"grey\\", fg=\\"white\\") # loop to run application root.mainloop()"},{"prompt":"Create a web service in Python that can save blog posts to a database. Not applicable","completion":"import sqlite3 from flask import Flask app = Flask(__name__) @app.route('/save', methods=['POST']) def save(): # Extract request data title = request.json['title'] content = request.json['content'] # Connect to database conn = sqlite3.connect('blog.db') c = conn.cursor() # Save blog post to database c.execute( 'INSERT INTO blog_posts(title, content) VALUES(?, ?)', (title, content) ) conn.commit() conn.close() return 'Blog post saved successfully!' if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python program to analyze a sentiment analysis dataset. The dataset contains 3000 rows of tweets, and each row contains the content of the tweets and the corresponding sentiment label (either 0 for negative, or 1 for positive). Not applicable","completion":"import pandas as pd # Load the data data = pd.read_csv('./dataset.csv') # Get the text and the labels texts = data['text'].values labels = data['label'].values # Generate a dictionary of all the words in the dataset words = set() for text in texts: for word in text.split(): words.add(word) # Create a dictionary of word counts word_counts = {} for word in words: word_counts[word] = 0 # Count the number of times each word appears in each sentiment label for i in range(len(texts)): for word in texts[i].split(): if labels[i] == 0: word_counts[word] -= 1 else: word_counts[word] += 1 # Print out the words with the highest sentiment polarity sorted_words = sorted(word_counts.items(), key=lambda x: x[1]) for word, count in sorted_words[:10]: print(f'{word}: {count}')"},{"prompt":"mplement a strategy pattern in Python to manage different behaviors for different objects. Not applicable","completion":"class Strategy: \\"\\"\\"The Strategy Pattern class\\"\\"\\" def __init__(self, func=None): if func: self.execute = func def execute(self): \\"\\"\\"The default method that prints 'Hello world!'\\"\\"\\" print(\\"Hello world!\\") # Replace by other strategies def execute_replacement1(): print(\\"Hola mundo!\\") def execute_replacement2(): print(\\"Mere saath kaam kar!\\") # Instantiate the strategy s1 = Strategy() # Execute the strategy s1.execute() # Create replacement strategy 1 s2 = Strategy(execute_replacement1) # Execute the strategy s2.execute() # Create replacement strategy 2 s3 = Strategy(execute_replacement2) # Execute the strategy s3.execute()"},{"prompt":"Create a PipelineManager class with methods to list, get, install, and delete pipelines. The install method should take a pipeline ID and start the installation of the pipeline in another thread. The delete method should start the uninstallation of the pipeline in another thread and remove the image file if it exists. The class should import several modules and classes, including ipdb, os, shutil, json, zipfile, datetime, time, uuid, subprocess, requests, config, common, postgresql, and model.","completion":"#!env/python3 # coding: utf-8 try: import ipdb except ImportError: pass import os import shutil import json import zipfile import datetime import time import uuid import subprocess import requests from config import * from core.framework.common import * from core.framework.postgresql import execute from core.model import * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # PIPELINE MANAGER # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # class PipelineManager: def __init__(self): pass def list(self): \\"\\"\\" List all pipelines with minimum of data \\"\\"\\" sql = \\"SELECT id, name, type, status, description, version, image_file_id, starred, installation_date, manifest, documents FROM pipeline ORDER BY id\\" result = [] for res in execute(sql): result.append({ \\"id\\": res.id, \\"name\\": res.name, \\"description\\": res.description, \\"type\\": res.type, \\"status\\": res.status, \\"version\\": res.version, \\"image_file_id\\": res.image_file_id, \\"starred\\": res.starred, \\"installation_date\\": res.installation_date.isoformat(), \\"manifest\\": res.manifest, \\"documents\\": res.documents }) return result def get(self, fields=None, query=None, order=None, offset=None, limit=None, depth=0): \\"\\"\\" Generic method to get pipelines according provided filtering options \\"\\"\\" if not isinstance(fields, dict): fields = None if query is None: query = {} if order is None: order = \\"name, installation_date desc\\" if offset is None: offset = 0 if limit is None: limit = RANGE_MAX pipes = Session().query(Pipeline).filter_by(**query).order_by(order).limit(limit).offset(offset).all() for p in pipes: p.init(depth) return pipes def install_init (self, name, metadata={}): pipe = Pipeline.new() pipe.name = name pipe.status = \\"initializing\\" pipe.save() if metadata and len(metadata) > 0: pipe.load(metadata) log('core.PipeManager.register : New pipe registered with the id {}'.format(pipe.id)) return pipe def install_init_image_upload(self, filepath, file_size, pipe_metadata={}): \\"\\"\\" Initialise a pipeline installation. To use if the image have to be uploaded on the server. Create an entry for the pipeline and the file (image that will be uploaded) in the database. Return the Pipeline and the File objects created This method shall be used to init a resumable upload of a pipeline (the pipeline/image are not yet installed and available, but we need to manipulate them) \\"\\"\\" from core.core import core pfile = core.files.upload_init(filepath, file_size) pipe = self.install_init(filepath, pipe_metadata) pipe.image_file_id = pfile.id pipe.save() return pipe, pfile async def install_init_image_url(self, url, pipe_metadata={}): \\"\\"\\" Initialise a pipeline installation. To use if the image have to be retrieved via an url. Create an entry for the pipeline and the file (image) in the database. Async method as the download start immediatly, followed by the installation when it's done Return the Pipeline object ready to be used \\"\\"\\" raise NotImplementedError(\\"TODO\\") def install_init_image_local(self, filepath, move=False, pipe_metadata={}): \\"\\"\\" Initialise a pipeline installation. To use if the image have to be retrieved on the local server. Create an entry for the pipeline and the file (image) in the database. Copy the local file into dedicated directory and start the installation of the Pipeline Return the Pipeline object ready to be used \\"\\"\\" from core.core import core pfile = core.files.from_local(filepath, move) pipe = self.install_init(os.path.basename(filepath), pipe_metadata) # FIXME: Sometime getting sqlalchemy error 'is not bound to a Session' # why it occure here ... why sometime :/ check_session(pfile) check_session(pipe) pipe.image_file_id = pfile.id pipe.save() return pipe def install_init_image(self, file_id, pipe_metadata={}): \\"\\"\\" Initialise a pipeline installation. To use if the image have already been uploaded the local server via the regovar file api. Create an entry for the pipeline in the database. Return the Pipeline object ready to be used \\"\\"\\" from core.core import core pfile = File.from_id(file_id) if pfile: pipe = self.install_init(os.path.basename(pfile.path), pipe_metadata) pipe.image_file_id = file_id pipe.save() return pipe return None def check_manifest(self, manifest): \\"\\"\\" Check that manifest (json) is valid and return the full version completed with default values if needed \\"\\"\\" missing = \\"\\" for k in [\\"name\\", \\"version\\"]: if k not in manifest.keys(): missing += k + \\", \\" if missing != \\"\\": missing = missing[:-2] raise RegovarException(\\"FAILLED Checking validity of manifest (missing : {})\\".format(missing)) # 2- Default value for optional fields in mandatory file default = { \\"description\\": \\"\\", \\"type\\": \\"job\\", \\"contacts\\": [], \\"regovar_db_access\\": False, \\"inputs\\": \\"/pipeline/inputs\\", \\"outputs\\": \\"/pipeline/outputs\\", \\"databases\\": \\"/pipeline/databases\\", \\"logs\\": \\"/pipeline/logs\\" } for k in default.keys(): if k not in manifest.keys(): manifest[k] = default[k] # 3- check type if manifest[\\"type\\"] not in [\\"job\\", \\"importer\\", \\"exporter\\", \\"reporter\\"]: raise RegovarException(\\"FAILLED Checking validity of manifest (type '{}' not supported)\\".format(manifest[\\"type\\"])) log('Validity of manifest checked') return manifest def install(self, pipeline_id, asynch=True): \\"\\"\\" Start the installation of the pipeline. (done in another thread) The initialization shall be done (image ready to be used) \\"\\"\\" from core.core import core pipeline = Pipeline.from_id(pipeline_id, 1) if not pipeline : raise RegovarException(\\"Pipeline not found (id={}).\\".format(pipeline_id)) if pipeline.status != \\"initializing\\": raise RegovarException(\\"Pipeline status ({}) is not \\"initializing\\". Cannot perform another installation.\\".format(pipeline.status)) if pipeline.image_file and pipeline.image_file.status not in [\\"uploaded\\", \\"checked\\"]: raise RegovarException(\\"Wrong pipeline image (status={}).\\".format(pipeline.image_file.status)) if not pipeline.image_file or pipeline.image_file.status in [\\"uploaded\\", \\"checked\\"]: if asynch: run_async(self.__install, pipeline) else: pipeline = self.__install(pipeline) return pipeline def __install(self, pipeline): from core.core import core # Dezip pirus package in the pirus pipeline directory root_path = os.path.join(PIPELINES_DIR, str(pipeline.id)) log('Installation of the pipeline package : ' + root_path) os.makedirs(root_path) os.chmod(pipeline.image_file.path, 0o777) # TODO: Check zip integrity and security before extracting it # see python zipfile official doc with zipfile.ZipFile(pipeline.image_file.path,\\"r\\") as zip_ref: zip_ref.extractall(root_path) # check package tree # find root folder files = [i.filename for i in zip_ref.infolist()] for f in files: if f.endswith(\\"manifest.json\\"): break zip_root = os.path.dirname(f) # remove intermediate folder if zip_root != \\"\\": zip_root = os.path.join(root_path, zip_root) for filename in os.listdir(zip_root): shutil.move(os.path.join(zip_root, filename), os.path.join(root_path, filename)) os.rmdir(zip_root) # Load manifest try: log(os.path.join(root_path, \\"manifest.json\\")) with open(os.path.join(root_path, \\"manifest.json\\"), \\"r\\") as f: data = f.read() log(data) # Fix common parsing problem regarding json syntaxe data = data.replace(\\"False\\", \\"false\\") data = data.replace(\\"True\\", \\"true\\") manifest = json.loads(data) manifest = self.check_manifest(manifest) pipeline.developpers = manifest.pop(\\"contacts\\") pipeline.manifest = manifest # list documents available pipeline.documents = { \\"about\\": os.path.join(root_path, \\"doc/about.html\\"), \\"help\\": os.path.join(root_path, \\"doc/help.html\\"), \\"icon\\": os.path.join(root_path, \\"doc/icon.png\\"), \\"icon2\\": os.path.join(root_path, \\"doc/icon.jpg\\"), \\"form\\": os.path.join(root_path, \\"form.json\\"), \\"license\\":os.path.join(root_path, \\"LICENSE\\"), \\"readme\\": os.path.join(root_path, \\"README\\") } for k in pipeline.documents.keys(): if not os.path.exists(pipeline.documents[k]): pipeline.documents[k] = None p = pipeline.documents.pop(\\"icon2\\") if not pipeline.documents[\\"icon\\"]: pipeline.documents[\\"icon\\"] = p pipeline.load(manifest) pipeline.save() except Exception as ex: pipeline.status = \\"error\\" pipeline.save() raise RegovarException(\\"Unable to open and read manifest.json. The pipeline package is wrong or corrupt.\\", exception=ex) # Update and save pipeline status pipeline.type = manifest[\\"type\\"] pipeline.installation_date = datetime.datetime.now() pipeline.status = \\"installing\\" pipeline.save() # Install pipeline result = core.container_manager.install_pipeline(pipeline) return result def delete(self, pipeline_id, asynch=True): \\"\\"\\" Start the uninstallation of the pipeline. (done in another thread) Remove image file if exists. \\"\\"\\" from core.core import core result = None pipeline = Pipeline.from_id(pipeline_id, 1) if pipeline: result = pipeline.to_json() # Clean container try: if asynch: run_async(self.__delete, pipeline) else: self.__delete(pipeline) except Exception as ex: war(\\"core.PipelineManager.delete : Container manager failed to delete the container with id {}.\\".format(pipeline.id)) try: # Clean filesystem shutil.rmtree(pipeline.path, True) # Clean DB core.files.delete(pipeline.image_file_id) Pipeline.delete(pipeline.id) except Exception as ex: raise RegovarException(\\"core.PipelineManager.delete : Unable to delete the pipeline's pirus data for the pipeline {}.\\".format(pipeline.id), ex) return result def __delete(self, pipeline): from core.core import core try: core.container_manager.uninstall_pipeline(pipeline) except Exception as ex: raise RegovarException(\\"Error occured during uninstallation of the pipeline. Uninstallation aborded.\\", ex)"},{"prompt":"Write a Python program to read a CSV and converting the contents to a dictionary.","completion":"import csv def csv_to_dict(filename): with open(filename) as csv_file: reader = csv.DictReader(csv_file) csv_dict = {} for row in reader: csv_dict[row['Date']] = row['Product'] return csv_dict"},{"prompt":"Python, write a function to format a given address into a humanreadable form. 60 Fifth Avenue, New York","completion":"def format_address(address): address_items = address.split(',') street = address_items[0] city_state = address_items[1].split() city = city_state[0] state = city_state[1] formatted_address = street + ', ' + city + ', ' + state return formatted_address address = '60 Fifth Avenue, New York' formatted_address = format_address(address) print(formatted_address)"},{"prompt":"Create a function in Python to remove all nonalphanumeric characters in a string. Not applicable","completion":"import re def remove_non_alphanum(str): return re.sub(r'[^w]', '', str)"},{"prompt":"Create a Python program to generate a sentence based on the input text. The quick brown fox jumps over the lazy dog.","completion":"\\"\\"\\" Generate a sentence based on the input text \\"\\"\\" import random #get the user input user_input = \\"The quick brown fox jumps over the lazy dog.\\" #split the string into a list of words word_list = user_input.split() #shuffle the list random.shuffle(word_list) #convert the list back to a string generated_sentence = ' '.join(word_list) #print the generated sentence print(generated_sentence)"},{"prompt":"Modify the following Python code to remove the duplicate elements from the list L = [1, 2, 2, 3, 4, 4]","completion":"L = [1, 2, 2, 3, 4, 4] L = list(set(L)) print(L)"},{"prompt":"Optimize a program in Python for searching for a string in a list. value = 'apple' list = ['bannanas', 'oranges', 'apple']","completion":"def search(value, list): for i in range(len(list)): if list[i] == value: return i return -1 value= 'apple' list = ['bannanas', 'oranges', 'apple'] print(search(value, list))"},{"prompt":"Design a Python algorithm to generate a unique sixcharacter alphanumeric string.","completion":"import string import random def get_unique_string(): characters = string.ascii_uppercase + string.digits return ''.join(random.choice(characters) for _ in range(6)) unique_string = get_unique_string() print(unique_string)"},{"prompt":"Create a Python class for a customer that stores the customer’s first name, last name and email address.","completion":"class Customer: def __init__(self, first_name, last_name, email): self.first_name = first_name self.last_name = last_name self.email = email customer = Customer(\\"John\\", \\"Smith\\", \\"john.smith@example.com\\")"},{"prompt":"Create a Python class for an employee with variable type member fields of name, age, and salary. Not applicable","completion":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary"},{"prompt":"Write a Python program to generate a random password using the given conditions. Minimum length = 8 Maximum length = 15 Must contain at least one uppercase letter Must contain at least one lowercase letter Must contain at least one digit Must contain at least one special character","completion":"import string import random def generate_password(length): all_chars = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(all_chars) for _ in range(length)) if (any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password) and any(c in string.punctuation for c in password)): return password else: return generate_password(length) # Create random passwords with length 10 x = generate_password(10) print ('Random Password :', x)"},{"prompt":"Given an URL as a string, write a program in Python to find the domain name. url = https://www.google.com","completion":"def get_domain_name(url): return url.split(\\"/\\")[2] print(get_domain_name(\\"https://www.google.com\\")) # prints www.google.com"},{"prompt":"Write Python code to generate a list of prime numbers between 2 and 1000.","completion":"def generate_prime_numbers(lower, upper): prime_numbers = [] for num in range(lower, upper + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: prime_numbers.append(num) return prime_numbers"},{"prompt":"Edit this Python code to execute the following tasks: for i in range(1, 11): print(i)","completion":"for i in range(1, 11): print(str(i) + \\" squared is \\" + str(i ** 2))"},{"prompt":"Formulate a design pattern using objectorientedprogramming concepts in Python that returns the sum of results from multiple classes.","completion":"class Computer: def __init__(self, name): self.name = name def calculate(self): pass # Let's create a class to add two numbers class Add(Computer): def calculate(self, x, y): return x + y # Let's create a class to multiply two numbers class Multiply(Computer): def calculate(self, x, y): return x * y # Client code to use the classes above class Client(Computer): # Utility method to calculate sum def sum(self, a, b): s = Add(self.name) m = Multiply(self.name) total = s.calculate(a, b) + m.calculate(a, b) print(\\"Result of sum and multiply\\", total) return total # Create a client object c = Client(\\"Comp\\") c.sum(2, 6) # Result of sum and multiply 14"},{"prompt":"Develop a Python script to print out the prime numbers up to a given limit. An integer limit of 100.","completion":"def is_prime(n): if n == 1: return False for i in range(2, n): if n % i == 0: return False return True # Print out prime numbers from 1 to 100 limit = 100 for i in range(1, limit+1): if is_prime(i): print(i)"},{"prompt":"Write a Python script to create a web server to handle two resources using the GET method.","completion":"import http.server class myHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): if self.path == '/page1': self.send_response(200) self.end_headers() self.wfile.write(b\\"This is page 1\\") elif self.path == '/page2': self.send_response(200) self.end_headers() self.wfile.write(b\\"This is page 2\\") else: self.send_error(404) httpd = http.server.HTTPServer(('0.0.0.0',8080), myHandler) httpd.serve_forever()"},{"prompt":"Create a Python function to generate a 8letter random alphanumeric string. Not applicable","completion":"import random import string def randomString(stringLength=8): lettersAndDigits = string.ascii_letters + string.digits return ''.join(random.choice(lettersAndDigits) for i in range(stringLength)) print(randomString()) // output '7Oti2cgn'"},{"prompt":"Write an algorithm to implement a bubble sort in Python. Example array to sort: [4, 2, 9, 12, 3, 5, 7]","completion":"def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [4, 2, 9, 12, 3, 5, 7] bubble_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Create a Python script to calculate the intersection point of two lines # Line 1 l1_m = 3 l1_c = 5 # Line 2 l2_m = 7 l2_c = 9","completion":"# define a function def getIntersectionPoint(line1, line2): # line1 (slope and intercept) l1_m = line1[0] l1_c = line1[1] # line2 (slope and intercept) l2_m = line2[0] l2_c = line2[1] x = (l2_c - l1_c) / (l1_m - l2_m) y = l1_m * x + l1_c return (x, y) # given two lines line1 = (3, 5) line2 = (7, 9) # calculate intersection point intersection_point = getIntersectionPoint(line1, line2) # print the point print(\\"Intersection point of lines is:\\", intersection_point)"},{"prompt":"Given a JSON string, write a Python program that prints out the values for each key. {FirstName: John, LastName: Smith}","completion":"import json data_string = '{\\"FirstName\\": \\"John\\", \\"LastName\\": \\"Smith\\"}' data = json.loads(data_string) for key, value in data.items(): print(\\"{} = {}\\".format(key, value))"},{"prompt":"Edit the given Python code to convert a list of temperatures in Fahrenheit to a list of temperatures in Celsius. temperatures_fahrenheit = [32, 64, 78, 10]","completion":"temperatures_fahrenheit = [32, 64, 78, -10] temperatures_celsius = [((temp-32)*5)/9 for temp in temperatures_fahrenheit] print(temperatures_celsius)"},{"prompt":"Create a Python script that extracts the text from a webpage URL: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.example.com\\" page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') text = soup.find_all(text=True) for t in text: print(t.strip())"},{"prompt":"Write a function or class in Python to parse an Excel sheet and extract all strings that are in bold. EXCEL SHEET CONTENT ; | Customer ID | Name | Date | |||| | 12345 | John | 10/9 | | **STRING1** | Mary | 12/3 | | 54321 | Joe | 5/7 | | **STRING2** | Paul | 3/1 |","completion":"import xlrd def extract_bold_strings(filename): strings = [] workbook = xlrd.open_workbook(filename) sheet = workbook.sheet_by_index(0) for row in range(sheet.nrows): for col in range(sheet.ncols): cell_value = sheet.cell(row, col).value font_style = sheet.cell_xf_index(row, col).font_record.weight if font_style == 700: strings.append(cell_value) return strings strings = extract_bold_strings('test.xlsx') print(strings) # prints ['STRING1', 'STRING2']"},{"prompt":"Design a class in Python to represent a Rectangle, which has the two attributes 'length' and 'width'.","completion":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width"},{"prompt":"Write a python program to print the name and age of all customers in a list. customers = [ {'name': 'John', 'age': 25}, {'name': 'Bob', 'age': 40}, {'name': 'Alice', 'age': 10}, {'name': 'Mark', 'age': 35}, ]","completion":"for customer in customers: print(f\\"Name: {customer['name']}, Age: {customer['age']}\\")"},{"prompt":"Create a Python class that constructor prints “Hello World”.","completion":"class HelloWorld: def __init__(self): print(“Hello World”)"},{"prompt":"Generate a function in Python that displays the Fibonacci sequence for a given value. n = 10","completion":"def fibonacci(n): a, b = 0, 1 result = [] while a < n: result.append(a) a, b = b, a + b return result print(fibonacci(n))"},{"prompt":"Generate an edit script for transforming an input text. Text 1: He went to the store Text 2: She visited the store","completion":"#!/usr/bin/env python text1 = \\"He went to the store\\" text2 = \\"She visited the store\\" edited_text = text1[:2] + text2[2:] print edited_text"},{"prompt":"Create a web scraper in Python that extracts the titles and summary from the reviews on a certain web page. https://www.example.com/review","completion":"import requests from bs4 import BeautifulSoup url = “https://www.example.com/reviews” response = requests.get(url) soup = BeautifulSoup(response.text, “html.parser”) titles = [] summaries = [] for review in soup.find_all(‘div’, {‘class’: ‘review’}): titles.append(review.find(‘h3’).text) summaries.append(review.find(‘p’).text)"},{"prompt":"Name different Python string methods.","completion":"String methods include capitalize(), count(), endswith(), find(), format(), index(), isalnum(), join(), lower(), replace(), split(), startswith(), strip(), title(), upper(), and zfill()."},{"prompt":"Write a Python script to process user input and generate a response according to the user's query. Sample queries: Give me the weather in New York What is the population of China?","completion":"# Libraries import requests import json # Get user input user_input = input('Please enter your query: ') # Process user input if 'weather' in user_input: # Get weather data city = user_input.split()[-1] # extract city from user query r = requests.get(f'http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&appid=YOUR_API_KEY') data = json.loads(r.text) # Output response if data['cod'] == '404': print('City not found!') else: print(f'The temperature in {city} is: {data[\\"main\\"][\\"temp\\"]} °C') elif 'population' in user_input: # Get population data country = user_input.split()[-1] # extract country from user query r = requests.get(f'https://restcountries.eu/rest/v2/name/{country}') data = json.loads(r.text)[0] # extract population from API response # Output response print(f'The population of {country} is: {data[\\"population\\"]}') else: print(\\"I'm sorry, I don't understand.\\")"},{"prompt":"Create a payment processing API in Python that takes in a customer's credit card information and validates it using a thirdparty payment processor like Stripe. Not applicable","completion":"import stripe stripe.api_key = 'sk_test_YOUR_KEY' def process_payment(card_info): # validate the credit card information if not stripe.Token.create( card={ 'number': card_info['number'], 'exp_month': card_info['exp_month'], 'exp_year': card_info['exp_year'], 'cvc': card_info['cvc'], }, ): return False # create and process the charge: stripe.Charge.create( amount=card_info['amount'], currency='usd', source=card_info['token'], description='Example charge', ) return True"},{"prompt":"Produce a Python code to calculate the sum of two squares given x and y as input.","completion":"def sum_squares(x, y): return x**2 + y**2 x = 2 y = 4 s = sum_squares(x, y) print(\\"The sum of two squares is {}\\".format(s))"},{"prompt":"Create a Python script for calculating the Fibonacci sequence for the given number.","completion":"def fibonacci_sequence(n): a, b = 0, 1 for i in range(n): a, b = b, a + b return a"},{"prompt":"Create a system to detect plagiarism in Python based on Levenshtein similarity. Not applicable","completion":"import nltk from nltk.metrics import edit_distance def levenshtein_similarity(string1, string2): edit_dist = edit_distance(string1, string2) similarity = 1-(edit_dist/max(len(string1), len(string2))) return similarity def detect_plagiarism(s1, s2): similarity_score = levenshtein_similarity(s1, s2) if similarity_score > 0.75: return \\"The texts have high similarity\\" elif similarity_score > 0.5: return \\"The texts have moderate similarity\\" else: return \\"The texts have low similarity\\""},{"prompt":"Write a Python program that can recognize the handwritten digits using OpenCV library?","completion":"\\"\\"\\" Recognize handwritten digits using OpenCV library \\"\\"\\" import cv2 import numpy as np # Load the model model = cv2.ml.SVM_load('svm_model.xml') # Read the input image img = cv2.imread('input.png') # Convert to grayscale and apply Gaussian filtering img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) img_gray = cv2.GaussianBlur(img_gray, (5,5), 0) # Threshold the image ret, img_thresh = cv2.threshold(img_gray, 90, 255, cv2.THRESH_BINARY_INV) # Find contours _, ctrs, _ = cv2.findContours(img_thresh.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) # Get rectangles contains each contour rects = [cv2.boundingRect(ctr) for ctr in ctrs] # For each rectangular region, calculate HOG features and predict # the digit using Linear SVM. for rect in rects: # Draw the rectangles #cv2.rectangle(img, (rect[0], rect[1]), (rect[0] + rect[2], rect[1] + rect[3]), (0, 255, 0), 3) # Make the rectangular region around the digit leng = int(rect[3] * 1.6) pt1 = int(rect[1] + rect[3] // 2 - leng // 2) pt2 = int(rect[0] + rect[2] // 2 - leng // 2) roi = img_thresh[pt1:pt1+leng, pt2:pt2+leng] # Resize the image roi = cv2.resize(roi, (64, 64), interpolation=cv2.INTER_AREA) roi = cv2.dilate(roi, (3, 3)) # Calculate the HOG features roi_hog_fd = hog(roi, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(1, 1), visualize=False) roi_hog_fd = np.asarray(roi_hog_fd, dtype=np.float32) # Predict the digit using Linear SVM nbr = model.predict(roi_hog_fd) #cv2.putText(img, str(int(nbr[0][0])), (rect[0], rect[1]),cv2.FONT_HERSHEY_DUPLEX, 2, (0, 255, 255), 3) print(int(nbr[0][0]))"},{"prompt":"Define a class method in Python to initialize an object's fields.","completion":"class SomeClass: def __init__(self, field1, field2): self.field1 = field1 self.field2 = field2"},{"prompt":"Create a python program to trace any recursive function on the screen.","completion":"def trace_function(F): def wrapper(*args, **kwargs): print(F.__name__ + str(args) + str(kwargs)) value = F(*args, **kwargs) print(F.__name__ + \\" returns \\" + str(value)) return value return wrapper"},{"prompt":"Use MongoDB and Python to store customer information with needed fields. Not applicable","completion":"# Import the needed libraries from pymongo import MongoClient # Connect to the MongoDB client client = MongoClient('localhost:27017') # Create an instance of a MongoDB database db = client['customer_database'] # Create the customers collection customers = db.create_collection('customers') # Add the needed fields customers.create_index([(\\"Name\\", 1)], unique=True) customers.create_index([(\\"Phone Number\\", 1)], unique=True) customers.create_index([(\\"Email\\", 1)], unique=True) customers.create_index([(\\"Address\\", 1)], unique=True)"},{"prompt":"Generate python code to encode a given string in base64. string = 'This is a test string.'","completion":"def base64_encode(string): encoded_string = base64.b64encode(string.encode('utf-8')) return encoded_string.decode('utf-8')"},{"prompt":"Generate a Python program to print the common elements from two sorted lists. list1=[1,3,5,7] list2=[2,3,6,7]","completion":"def print_common_elements(list1, list2): result = [] i = 0 j = 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: i += 1 elif list2[j] < list1[i]: j += 1 else: result.append(list1[i]) i += 1 j += 1 for i in range(len(result)): print(result[i],end=\\" \\")"},{"prompt":"Create a random forest classifier in Python which predicts if a house is affordable or not based on its features such as location, size, number of bedrooms, number of bathrooms, etc. [ { location: downtown, size: 2650, bedrooms: 3, bathrooms: 2, price: 540000, label: affordable }, { location: uptown, size: 3600, bedrooms: 5, bathrooms: 4, price: 750000, label: not affordable }, { location: rural, size: 2500, bedrooms: 4, bathrooms: 2, price: 400000, label: affordable }, { location: suburban, size: 3500, bedrooms: 5, bathrooms: 3, price: 500000, label: not affordable } ]","completion":"import pandas as pd from sklearn.ensemble import RandomForestClassifier # Read in data data = pd.read_csv('data.csv') # Train the classifier features = ['location', 'size', 'bedrooms', 'bathrooms', 'price'] X = data[features] y = data['label'] clf = RandomForestClassifier(n_estimators=100) clf.fit(X, y) # Make predictions predictions = clf.predict(X) print(predictions)"},{"prompt":"Can you provide a Python program that resize an array of integers in place? arr = [10, 20, 30, 40] new_size = 6","completion":"\\"\\"\\" Providing a Python program that resizes an array of integers in place \\"\\"\\" def resize_array(arr, new_size): # base case if len(arr) == new_size: return # add elements to increase the size if len(arr) < new_size: for _ in range(new_size - len(arr)): arr.append(0) # delete elements to decrease the size elif len(arr) > new_size: for _ in range(len(arr) - new_size): arr.remove(arr[-1]) if __name__ == '__main__': arr = [10, 20, 30, 40] new_size = 6 resize_array(arr, new_size) print(arr)"},{"prompt":"Write a Python program to filter out unique elements from an array. arr = [3, 6, 3, 2, 7, 5, 6]","completion":"arr = [3, 6, 3, 2, 7, 5, 6] def unique_elements(arr): return list(set(arr)) unique_arr = unique_elements(arr) print(unique_arr)"},{"prompt":"Write a Python program to split a string on any whitespace. String to be split = Python is an interpreted language.","completion":"def splitOnWhitespace(inputString): words = inputString.split() return words stringToBeSplit = \\"Python is an interpreted language.\\" words = splitOnWhitespace(stringToBeSplit) print(words) // Output: ['Python', 'is', 'an', 'interpreted', 'language.']"},{"prompt":"Create a ML model in Python to classify different types of fruits. Dataset containing images of fru","completion":"import matplotlib.pyplot as plt import numpy as np from sklearn.model_selection import train_test_split from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten from tensorflow.keras.utils import to_categorical # Load the dataset X = np.load('fruits-images.npy') y = np.load('fruits-labels.npy') y = to_categorical(y) # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Create the model model = Sequential() model.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(100,100,3))) model.add(MaxPool2D(pool_size=(2,2))) model.add(Flatten()) model.add(Dense(128, activation='relu')) model.add(Dense(y_train.shape[1], activation='softmax')) # Compile and fit model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) history = model.fit(X_train, y_train, epochs=15, batch_size=32, validation_data=(X_test, y_test)) # Plot the accuracy plt.plot(history.history['accuracy']) plt.plot(history.history['val_accuracy']) plt.title('Model accuracy') plt.ylabel('Accuracy') plt.xlabel('Epoch') plt.legend(['Train', 'Test'], loc='upper left') plt.show()"},{"prompt":"Create a natural language processing (NLP) program in Python to classify words into five categories Not applicable","completion":"import nltk from nltk.classify import maxent from nltk.tokenize import word_tokenize # define the categories CATEGORIES = ['noun', 'verb', 'adjective', 'adverb', 'other'] # generate training data training_data = [ (\\"That's an interesting book.\\", {'category': 'noun'}), (\\"Can I borrow it?\\", {'category': 'verb'}), (\\"It's really amazing.\\", {'category': 'adjective'}), (\\"I'm learning a lot.\\", {'category': 'adverb'}), (\\"It's blue.\\", {'category': 'other'}) ] # create a feature extractor def extract_features(sentence): words = word_tokenize(sentence) features = {} for w in words: features[w.lower()] = True return features # train the classifier classifier = maxent.MaxentClassifier.train( training_data, 'GIS', trace=0, encoding=None, labels=CATEGORIES ) # classify a sentence sentence = \\"It's yellow.\\" features = extract_features(sentence) label = classifier.classify(features) # print the result print(label) # other"},{"prompt":"Create a Python program to print the current timestamp","completion":"from datetime import datetime now = datetime.now() print(now.strftime(\\"%Y-%m-%d %H:%M:%S\\"))"},{"prompt":"Write a python program to receive user input and calculate the sum of every number entered.","completion":"numbers = [] while True: userInput = input(\\"Enter a number: \\") if userInput == 'done': break try: userInput = int(userInput) numbers.append(userInput) except ValueError: print(\\"Invalid input, please enter a valid number\\") print(\\"Sum of entered numbers : \\" + str(sum(numbers)))"},{"prompt":"Create a Python program to find the area of a given trapezoid. base1 = 2 base2 = 4 height = 3","completion":"def area_trapezoid(base1, base2, height): return (base1 + base2) * (height / 2) print(area_trapezoid(2, 4, 3)) # Output: 9.0"},{"prompt":"Upgrade the following code so that it runs on Python 3 #This code runs on python 2 print Hello World!","completion":"print(\\"Hello World!\\")"},{"prompt":"Create a python program that reads a list of names and picks a random name from that list. John, Mary, Paul, Gerry","completion":"import random names = [\\"John\\", \\"Mary\\", \\"Paul\\", \\"Gerry\\"] print(\\"The randomly chosen name is\\", random.choice(names))"},{"prompt":"Write a Python code using the Pandas package to filter out rows with a specific condition in a table data. Table data: Country | Population | Area | GDP USA | 330,000,000 | 3,796,000 | 21,427,000 China | 1,400,000,000 | 9,596,961 | 14,140,163 France | 67,000,000 | 640,679 | 2,777,000","completion":"import pandas as pd # Read data data = {'Country': ['USA', 'China', 'France'], 'Population': [330000000, 1400000000, 67000000], 'Area': [3796000, 9596961, 640679], 'GDP': [21427000,14140163,2777000]} df = pd.DataFrame(data, columns =['Country', 'Population', 'Area', 'GDP']) # Filter for rows with a population higher than 500 million large_countries = df[df['Population'] > 500000000] print(large_countries)"},{"prompt":"Can you create a Python program that returns the largest number in a list of numbers? [4, 8, 2, 6, 9]","completion":"def largestNumber(list): maximum = list[0] for num in list: if num > maximum: maximum = num return maximum list = [4, 8, 2, 6, 9] largestNumber = largestNumber(list) print(\\"Largest number in the given list is:\\", largestNumber)"},{"prompt":"Create a Python program to implement a linear search algorithm to find an element in a list. x = [1, 5, 8, 3], n = 8","completion":"def linear_search(x, n): found = False for i in range(len(x)): if x[i] == n: found = True break if found == True: print('Element', n, 'found at position', i) else: print('Element', n, 'not found') x = [1, 5, 8, 3] n = 8 linear_search(x, n)"},{"prompt":"Optimize the given Python code to use list comprehension. my_list = [] for value in range(10): my_list.append(value * 2)","completion":"my_list = [value * 2 for value in range(10)]"},{"prompt":"Create a search algorithm in Python using a binary search, that takes an array of integers and a number as an argument and returns the position of the number within the array if the number exists. array = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40] number = 15","completion":"def binary_search(array, target): left = 0 right = len(array) - 1 while left <= right: middle = (left + right)//2 if array[middle] < target: left = middle + 1 elif array[middle] > target: right = middle - 1 else: return middle return -1 position = binary_search(array, number) if position == -1: print(\\"Number not found in array.\\") else: print(f\\"{number} found at position {position}\\")"},{"prompt":"Edit the following Python function to handle keyboard interrupts. def main(): try: counter = 0 while True: print(counter) counter += 1 time.sleep(1) except KeyboardInterrupt: print('Goodbye!')","completion":"def main(): try: counter = 0 while True: print(counter) counter += 1 time.sleep(1) except KeyboardInterrupt: print('Goodbye!') sys.exit()"},{"prompt":"Create a regex pattern that matches two different words and prints out the second word if found. text = Learn Python now or learn Java later","completion":"pattern = r\\"learn (Python|Java) (w+)\\" match = re.search(pattern, text) if match: print(match.group(2)) # Prints \\"now\\" or \\"later\\""},{"prompt":"Create an API route in Python to return the top three highestpriced products. Not applicable","completion":"import json from flask import Flask, request, jsonify app = Flask(__name__) products = [ { \\"name\\": \\"book\\", \\"price\\": 15 }, { \\"name\\": \\"pen\\", \\"price\\": 5 }, { \\"name\\": \\"tablet\\", \\"price\\": 200 }, { \\"name\\": \\"chair\\", \\"price\\": 80 } ] @app.route(\\"/top_three_products\\", methods=[\\"GET\\"]) def get_top_three_products(): # Sort the list of products by price in descending order sorted_products = sorted(products, key=lambda product: -product['price']) # Return only the top 3 products highest_priced_products = sorted_products[:3] return jsonify(highest_priced_products) if __name__ == \\"__main__\\": app.run()"},{"prompt":"Create an optimization algorithm in Python to determine the ideal stock portfolio allocation. Example data of stock prices and number of available stocks.","completion":"import numpy as np from scipy.optimize import minimize # Define the objective function def objective(allocation): # Calculate portfolio return on investment portfolio_return = np.sum(allocation * stock_return) return -portfolio_return # Set the bounds and constraints bounds = [(0, n) for n in available_stocks] constraints = [{'type': 'eq', 'fun': lambda x: np.sum(x)-1}] # Initialize the starting allocations starting_allocations = np.array([1/len(available_stocks)]*len(available_stocks)) # Optimize result = minimize(objective, starting_allocations, bounds=bounds, constraints=constraints) allocation = result.x # Print the optimal portfolio allocation print(allocation)"},{"prompt":"Write a Python program to encode the given string using a Caesar Cipher. String: \`attack\` Cipher: Rotate 3 positio","completion":"def caesar_cipher_encode(input_string, cipher): output = '' for c in input_string: ascii_val = ord(c) if (ascii_val > 64 and ascii_val < 91) or (ascii_val > 96 and ascii_val < 123): new_ascii_val = ascii_val + cipher if (ascii_val > 64 and ascii_val < 91 and new_ascii_val > 90) or (ascii_val > 96 and ascii_val < 123 and new_ascii_val > 122): new_ascii_val = ascii_val - 26 + cipher output += chr(new_ascii_val) else: output += c return output"},{"prompt":"Develop a Python program that prints Hello, World! whenever it is run.","completion":"#Python program to print \\"Hello World!\\" print(\\"Hello, World!\\")"},{"prompt":"Develop a Python program to generate 10 random numbers between 1 and 100.","completion":"import random for i in range(10): print(random.randint(1,100))"},{"prompt":"Create a class and object in python to model the bill of a restaurant.","completion":"class Bill: def __init__(self, items): self.items = items self.total_cost = 0.0 def calculate_total_cost(self): for item in self.items: self.total_cost += item['price'] return self.total_cost # Create an object of Bill restaurant_bill = Bill([{'item': 'burger', 'price': 10.99}, {'item': 'fries', 'price': 2.49}]) print(restaurant_bill.calculate_total_cost())"},{"prompt":"Write a Python program to take a list of words and create a dictionary with the words as keys and the frequency of each word as the values. words = ['a', 'b', 'a', 'c', 'b', 'a', 'd']","completion":"words_dict = {} for word in words: if word in words_dict: words_dict[word] += 1 else: words_dict[word] = 1 print(words_dict) # Output # {'a': 3, 'b': 2, 'c': 1, 'd': 1}"},{"prompt":"Create a userdefined function in Python for finding the sum of squares of three numbers.","completion":"def sumOfSquares(a, b, c): return a*a + b*b + c*c"},{"prompt":"Reverse the words in this sentence using Python. This is a sentence.","completion":"\\"sentence. a is This\\""},{"prompt":"Write a Python code snippet to classify animals into mammals, birds, and fishes using decision tree. Animals = [dog, cat, elephant, owl, tuna, salmon]","completion":"import pandas as pd from sklearn.tree import DecisionTreeClassifier # Creating pandas dataframe to hold the animal data animals_df = pd.DataFrame({'Animal': Animals}) # Create target variable Mammal, Bird and Fish mammals = ['dog', 'cat', 'elephant'] birds = ['owl'] fishes = ['tuna', 'salmon'] animals_df['Mammal'] = animals_df.Animal.apply(lambda x: 1 if x in mammals else 0) animals_df['Bird'] = animals_df.Animal.apply(lambda x: 1 if x in birds else 0) animals_df['Fish'] = animals_df.Animal.apply(lambda x: 1 if x in fishes else 0) # Create the target variable using the code labels animals_df['target'] = animals_df.Mammal.astype(str) + '_' + animals_df.Bird.astype(str) + '_' + animals_df.Fish.astype(str) #drop unwanted columns animals_df.drop(columns = ['Mammal', 'Bird', 'Fish'], inplace=True) # Create decision tree classifier object clf = DecisionTreeClassifier() # Train the model using the data clf.fit(animals_df[['Animal']], animals_df['target'])"},{"prompt":"Build a recommendation system in Python to suggest movies to a user based on their previous ratings.","completion":"def movie_recommender_system(user): \\"\\"\\" This function uses a collaborative filtering algorithm to suggest movies to the given user \\"\\"\\" # Get the list of rated movies by the user user_movies = user.get_rated_movies() # Get the list of ratings given by other users user_ratings = user.get_ratings() # Calculate the similarity between the user and other users user_similarity = user.calculate_similarity(user_movies, user_ratings) # Get the list of movies rated highly by other users other_rated_movies = user.get_top_rated_movies(user_ratings) # Find the movies which the user has not seen so far, but recommended by other users unseen_movies = [m for m in other_rated_movies if m not in user_movies] # Sort the movies based on their similarity and the ratings given by other users sorted_movies = sorted(unseen_movies, key=lambda m: user_similarity[m] * user_ratings[m], reverse=True) # Get the top 10 movies top_movies = sorted_movies[:10] return top_movies"},{"prompt":"Create a Python program for sorting a list of words into alphabetical order. [dog, cat, apple, banana]","completion":"def sort_words(words): return sorted(words) words = [\\"dog\\", \\"cat\\", \\"apple\\", \\"banana\\"] sorted_words = sort_words(words) print(sorted_words)"},{"prompt":"Given a list of strings, write a Python program to calculate the maximum length of a string. list_of_strings = [dog, cat, elephant, bird]","completion":"max_length = 0 for string in list_of_strings: max_length = max(max_length, len(string)) print(max_length)"},{"prompt":"The code is a Python script that contains functions to format and plot data using Plotly. To use the code, import it into your Python environment and call the functions as needed. The main function is post, which takes in a filename, data, and optional parameters to customize the plot. The format_data function can be used to convert raw data into a format that can be plotted using the other functions. The get_histogram, get_scatter2d, and get_scatter3d functions generate different types of plots based on the input data.","completion":"import os import json from dateutil.parser import parse import plotly from plotly.graph_objs import Histogram, Scatter, Scatter3d, Data, Layout, XAxis, YAxis, ZAxis, Figure __version__ = '0.0.1' def is_numeric(x): try: float(x) return True except ValueError: return False def is_date(d): try: parse(d) return True except ValueError, AttributeError: return False def is_string(x): return is_numeric(x) + is_date(x) == 0 def format_data(data): data = json.loads(''.join(data)) keys = data[0].keys() # Check column type sidx = [ idx for idx, key in enumerate(keys) if is_string(data[0][key]) ] values = [ [ d.get(key) for key in keys ] for d in data ] values = zip(*values) if len(sidx) == 1: text = values.pop(sidx[0]) keys.pop(sidx[0]) else: text = None return { 'layout': { 'axes': keys }, 'data': { 'values': values, 'text': text } } def get_histogram(data): values = data['values'] return Data([ Histogram( x=values ) ]) def get_scatter2d(data): values = data['values'] return Data([ Scatter( x=values[0], y=values[1], mode='markers', text=data['text'] ) ]) def get_scatter3d(data): values = data['values'] return Data([ Scatter3d( x=values[0], y=values[1], z=values[2] ) ]) def post(filename, data, fileopt='new', title=None, world_readable=True): # Get username and api key username = os.environ.get('PLOTLY_USERNAME') api_key = os.environ.get('PLOTLY_API_KEY') plotly.tools.set_credentials_file(username=username, api_key=api_key) axes = data['layout']['axes'] nAxes = len(axes) get_data = { 1: get_histogram, 2: get_scatter2d, 3: get_scatter3d } axes_kwargs = ['xaxis', 'yaxis', 'zaxis'] axes_obj = [XAxis, YAxis, ZAxis] layout_kwargs = { axes_kwargs[idx]: axes_obj[idx](title=axis) for idx, axis in enumerate(axes) } dataobj = get_data[nAxes](data['data']) layout = Layout(**layout_kwargs) fig = Figure(data=dataobj, layout=layout) r = plotly.plotly.plot(fig, filename=filename) print r"},{"prompt":"Generate a Python script for searching for a pattern in a given text. Text: The cat jumped over the fence Pattern: cat","completion":"import re text = \\"The cat jumped over the fence\\" pattern = \\"cat\\" match = re.search(pattern, text) if match: print(\\"Pattern found!\\")"},{"prompt":"Classify the following statement as a valid Python statement, an invalid Python statement or a comment. print(Hello Python!)","completion":"Valid Python statement."},{"prompt":"Suggest a programming language and a library for text classification.","completion":"Python is a great language for text classification tasks and there are several libraries that could be used, including scikit-learn and NLTK. Additionally, pytorch provides a number of utilities for text classification."},{"prompt":"Generate a textbased progress bar using Python.","completion":"import sys def progress_bar(iteration, total, length=50, fill='█'): iteration = iteration + 1 percent = (\\"{0:.1f}\\").format(100 * (iteration / float(total))) filledLength = int(length * iteration // total) bar = fill * filledLength + '-' * (length - filledLength) sys.stdout.write('r |{}| {}% {}'.format(bar,percent, \\"Complete\\")) sys.stdout.flush()"},{"prompt":"Develop a chatbot in Python that records customer requests and stores them in a database.","completion":"import sqlite3 # Connect to the database con = sqlite3.connect('customer_requests.db') cursor = con.cursor() # Create the customer table cursor.execute(\\"CREATE TABLE IF NOT EXISTS customer_requests(request_id INTEGER PRIMARY KEY, request TEXT NOT NULL)\\") # Create and run the chatbot def chatbot(): print(\\"Welcome to the chatbot! Enter 'exit' to quit.n\\") while True: response = input(\\"You: \\") if response == 'exit': break else: print(\\"Chatbot: Your request has been recorded.n\\") # Store the request in the database con.execute(f\\"INSERT INTO customer_requests(request) VALUES ('{response}')\\") con.commit() chatbot()"},{"prompt":"Create a Python script to return the first two elements of a list. [1,2,3,4,5]","completion":"def get_first_two(list): return list[:2] list = [1,2,3,4,5] print(get_first_two(list)) # returns [1,2]"},{"prompt":"Write a Python script to generate a list of prime numbers between 2 and 30.","completion":"# Generate a list of prime numbers between 2 and 30 # Generate a list of all numbers between 2 and 30 numbers = range(2, 31) # Loop over all numbers for num in numbers: prime_flag = True # Check if the number is divisible by any other between 2 and itself for i in range(2, num): if (num % i == 0): prime_flag = False break # If the number is not divisible by any other number, it is prime if prime_flag: print(num)"},{"prompt":"Write a Python function that converts a given number from one numeric base to another. number = 42 from_base = 10 to_base = 16","completion":"def convert_number(number, from_base, to_base): # convert number to base 10 result = int(str(number), from_base) # convert base 10 to new base res = \\"\\" while result > 0: res += str(result % to_base) result //= to_base res = res[::-1] return res"},{"prompt":"Create a program in Python to flatten a given array of arrays. [[1,2,[3]],4]","completion":"def flatten_list(arr): result = [] for element in arr: if type(element) == list: result += flatten_list(element) else: result.append(element) return result arr = [[1,2,[3]],4] print(flatten_list(arr)) # [1, 2, 3, 4]"},{"prompt":"Create a Python script using requests library to get the weather forecast of 8 cities. [New York, London, Beijing, Los Angeles, Berlin, Tokyo, Mumbai, Moscow]","completion":"import requests # list of cities for which we want the weather forecast cities = [\\"New York\\", \\"London\\", \\"Beijing\\", \\"Los Angeles\\", \\"Berlin\\", \\"Tokyo\\", \\"Mumbai\\", \\"Moscow\\"] # api key api_key = YOUR_API_KEY # base url for the weather api url = \\"http://api.openweathermap.org/data/2.5/weather?q={}&APPID=\\" + api_key # create an empty list to store weather data weather_data = [] # loop through the cities and get the weather data for city in cities: # make a request to the api r = requests.get(url.format(city)).json() # store the weather data in the list weather_data.append(r) # print the weather data print(weather_data)"},{"prompt":"Generate a Python function to return the index of a given number in a sorted list.","completion":"def index_of(number, lst): hi = len(lst) lo = 0 index = -1 while hi > lo: mid = (hi + lo)//2 if lst[mid] < number: lo = mid + 1 elif lst[mid] > number: hi = mid else: index = mid return index return index"},{"prompt":"Design a class to represent a book in Python.","completion":"class Book: # Attributes title = \\"\\" author = \\"\\" pages = 0 # Constructor def __init__(self, title, author, pages): self.title = title self.author = author self.pages = pages # Create a book object book = Book(\\"The Catcher in the Rye\\", \\"JD Salinger\\", 277)"},{"prompt":"Write a Python program that can recognize handwritten letters.","completion":"import numpy as np from tensorflow.keras.callbacks import TensorBoard # Load the MNIST dataset (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data() # Reshape and normalize the data x_train = x_train.reshape((x_train.shape[0], 28, 28, 1)) x_test = x_test.reshape((x_test.shape[0], 28, 28, 1)) x_train, x_test = x_train / 255.0, x_test / 255.0 # Build the model model = tf.keras.Sequential([ tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)), tf.keras.layers.MaxPooling2D(), tf.keras.layers.Flatten(), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(10, activation='softmax') ]) # Compile and train the model model.compile( optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'] ) model.fit(x_train, y_train, epochs=5, callbacks=[TensorBoard('logs')]) # Evaluate the model model.evaluate(x_test, y_test)"},{"prompt":"Create a class for a person in Python which includes name and age as attributes.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age p = Person(\\"John\\", 18) print(p.name, p.age)"},{"prompt":"Design a python script to build a tree from a list of parentchild relationships. [ (1, 2), (1, 3), (2, 4), (2, 5), (4, 6), (4, 7) ]","completion":"# Python class Node: def __init__(self, data): self.data = data self.children = [] def buildTree(relationships): tree = {} for parent, child in relationships: if parent not in tree: tree[parent] = Node(parent) parent_node = tree[parent] if child not in tree: tree[child] = Node(child) child_node = tree[child] parent_node.children.append(child_node) return tree[1]"},{"prompt":"Develop an AI program in Python which can play the game tictactoe.","completion":"def tic_tac_toe(): game_board = [[0,0,0], [0,0,0], [0,0,0]] player_1 = True while not game_over(): move = get_ai_move() if player_1: game_board[move[0]][move[1]] = 1 player_1 = False else: game_board[move[0]][move[1]] = -1 player_1 = True def get_ai_move(): # Use AI algorithms to find the best move best_move = 0 # Return the best move return best_move def game_over(): # Game is over if there's a winner or a tie return False"},{"prompt":"Create a Python program that stores user data into a SQL database.","completion":"import sqlite3 # create database connection conn = sqlite3.connect('user_data.db') c = conn.cursor() # create database table c.execute('''CREATE TABLE users (name TEXT, age INTEGER, city TEXT)''') # add user data c.execute(\\"INSERT INTO users VALUES ('John', 24, 'New York')\\") c.execute(\\"INSERT INTO users VALUES ('Thomas', 28, 'Chicago')\\") c.execute(\\"INSERT INTO users VALUES ('Emily', 32, 'Los Angeles')\\") # save and close database connection conn.commit() conn.close()"},{"prompt":"Develop a Python script to print the prime factors of a given positive integer.","completion":"def primeFactors(n): factors = [] while n % 2 == 0: factors.append(2) n = n / 2 for i in range(3, int(sqrt(n))+1, 2): while n % i== 0: factors.append(i) n = n / i if n > 2: factors.append(n) return factors n = 315 print(primeFactors(n))"},{"prompt":"Create a program in Python to convert any number from 0 to 999 to its corresponding word. Input number: 259","completion":"def number_to_words(num): units = [\\"\\", \\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\", \\"seven\\", \\"eight\\", \\"nine\\"] teens = [\\"\\", \\"eleven\\", \\"twelve\\", \\"thirteen\\", \\"fourteen\\", \\"fifteen\\", \\"sixteen\\", \\"seventeen\\", \\"eighteen\\", \\"nineteen\\"] tens = [\\"\\", \\"ten\\", \\"twenty\\", \\"thirty\\", \\"forty\\", \\"fifty\\", \\"sixty\\", \\"seventy\\", \\"eighty\\", \\"ninety\\"] hundreds = [\\"\\", \\"onehundred\\", \\"twohundred\\", \\"threehundred\\", \\"fourhundred\\", \\"fivehundred\\", \\"sixhundred\\", \\"sevenhundred\\", \\"eighthundred\\", \\"ninehundred\\"] num_str = str(num) result = \\"\\" if num == 0: result = \\"zero\\" elif len(num_str) == 3: result += hundreds[int(num_str[0])] + \\" \\" if int(num_str[1:]) != 0: result += number_to_words(int(num_str[1:])) elif len(num_str) == 2: if int(num_str[0]) == 1: result += teens[int(num_str[1])] else: result += tens[int(num_str[0])] + \\" \\" if int(num_str[1]) != 0: result += units[int(num_str[1])] elif len(num_str) == 1: result += units[int(num_str[0])] return result print(number_to_words(259))"},{"prompt":"Write a function in Python to uniformly convert any data format into a JSON format. This is an example of a string in XML format: <note> <to>Tove</to> <from>Jani</from> <heading>Reminder</heading> <body>Don't forget me this weekend!</body> </note>","completion":"import json def convert_to_json(data): \\"\\"\\"Convert any data format into a JSON format.\\"\\"\\" try: # check if data is string if isinstance(data, str): return json.loads(data) # check if data is xml elif data.tag == 'note': return { 'to': data.find('to').text, 'from': data.find('from').text, 'heading': data.find('heading').text, 'body': data.find('body').text, } except Exception as e: raise e"},{"prompt":"Write a Python program to generate all subsets of a given set.","completion":"def generate_subset(input_set): subsets = [[]] for elem in input_set: n = len(subsets) for i in range(n): current_subset = subsets[i] subsets.append(current_subset + [elem]) return subsets"},{"prompt":"Create a code to print the nth Fibonacci number in Python.","completion":"def fibonacci_n(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b n = 9 print(fibonacci_n(n))"},{"prompt":"Create a Python program to convert degrees Celsius to degrees Fahrenheit given a value in Celsius. Value: 32","completion":"# Function to convert degrees Celsius to degrees Fahrenheit def celsius_to_fahrenheit(celsius): return (celsius * 9/5) + 32 # Input Celsius value celsius = 32 # Calculate Fahrenheit fahrenheit = celsius_to_fahrenheit(celsius) print(f'{celsius} Celsius is {fahrenheit} Fahrenheit')"},{"prompt":"Develop a greedy algorithm in Python to complete a given optimization task.","completion":"def greedy_solution(arr): arr.sort() cur_max = arr[0] result = [cur_max] for i in range(1, len(arr)): if arr[i] > cur_max + 1: cur_max = arr[i] result.append(cur_max) return result"},{"prompt":"Create a Python program that counts the occurrences of each letter of the alphabet in a given sentence. Sentence: 'The quick brown fox jumps over the lazy dog.'","completion":"# Create a dictionary to store the count of each letter letter_counts = {} # Loop through each letter in the given sentence for letter in 'The quick brown fox jumps over the lazy dog.': # Check if the letter is present in the dictionary if letter in letter_counts: # Increment the count if the key is present letter_counts[letter] += 1 else: # Initialize the count if the key is not present letter_counts[letter] = 1 # Print the output in a nice format for key,val in letter_counts.items(): print(key, '-', val)"},{"prompt":"Write Python code to print the number present in an inputted string. string_1 = The temperature is 24 degrees Celsius","completion":"def print_numbers_in_string(string): numbers = [int(s) for s in string.split() if s.isdigit()] print(numbers) string_1 = \\"The temperature is 24 degrees Celsius\\" print_numbers_in_string(string_1) # Output # [24]"},{"prompt":"Edit the following Python code to rerank the numbers in descending order. numbers = [4, 7, 2, 3]","completion":"numbers = [4, 7, 2, 3] numbers.sort(reverse=True) print(numbers)"},{"prompt":"Create a kmeans clustering algorithm in Python to cluster a given dataset.","completion":"from sklearn.cluster import KMeans def k_means_clustering(data, num_clusters): kmeans = KMeans(n_clusters=num_clusters, random_state=0).fit(data) labels = kmeans.labels_ return labels"},{"prompt":"Design an API in Python to fetch location information using geopoints.","completion":"# Import relevant modules import requests import json # Url for API URL = \\"https://api.example.com/geocode\\" # Create function to fetche location information def get_location_info(lat, lon): PARAMS = {'lat': lat, 'lon': lon} response = requests.get(url=URL, params=PARAMS) output = json.loads(response.text) return output # Call the function location_info = get_location_info(lat, lon)"},{"prompt":"Generate a program in python to capitalize the first letter of each word in a string. my name is joh","completion":"def capitalize(string): words = string.split() capitalized_words = [word.capitalize() for word in words] return \\" \\".join(capitalized_words)"},{"prompt":"Write a function in Python that will take two inputs, an array of strings and a letter, and returns the number of elements in the array that contain the given letter. ['cat', 'dog', 'fish','apple'] letter: 'a'","completion":"def count_elements_with_letter(arr,letter): count = 0 for a in arr: if letter in a: count += 1 return count count_elements_with_letter(['cat','dog','fish','apple'], 'a') # output: 3"},{"prompt":"Create a python function that is able to parse a input string and extract all words that have at least 4 characters. input_string = 'This is a sample string'","completion":"def extract_words_with_length_greater_equal_than(input_string, length): words = input_string.split(' ') result = [] for word in words: if len(word) >= length: result.append(word) return result result = extract_words_with_length_greater_equal_than(input_string, 4) print(result) # This should print ['This', 'sample', 'string']"},{"prompt":"Write a python program to convert a given string in valid json format str = '{key1: value1, key2: value2}'","completion":"import json def str_to_json(json_string): # convert the string to dictionary json_dict = json.loads(json_string) # convert the dictionary to json json_data = json.dumps(json_dict) # return json return json_data"},{"prompt":"Write a function in Python for encrypting a given string with a given key. Key: mykey123 String: My secret message","completion":"import base64 from Crypto.Cipher import AES def encrypt(key, message): cipher = AES.new(key.encode(), AES.MODE_ECB) padded_msg = message.encode() + ((16 - len(message) % 16) * '{'.encode()) encrypted = cipher.encrypt(padded_msg) encoded = base64.b64encode(encrypted) return encoded.decode() encrypt('mykey123', 'My secret message')"},{"prompt":"Create a script in Python that prints a matrix of size n x m containing random numbers. n=3, m=2","completion":"import random def random_matrix(n, m): matrix = [] for i in range(n): row = [] for j in range(m): row.append(random.randint(1,100)) matrix.append(row) return matrix res = random_matrix(3, 2) print(res)"},{"prompt":"Generate a Python code to get the min and max elements of an array.","completion":"def min_and_max(array): min_element = array[0] max_element = array[0] for element in array: if element < min_element: min_element = element elif element > max_element: max_element = element return (min_element, max_element)"},{"prompt":"Create a Python program to determine the category of a given number based on predefined criteria. 28 criteria = { low: [0,15], medium: [16,30], high: [31,99] }","completion":"def define_category(num, criteria): if num >= criteria[\\"low\\"][0] and num <= criteria[\\"low\\"][1]: return \\"low\\" elif num >= criteria[\\"medium\\"][0] and num <= criteria[\\"medium\\"][1]: return \\"medium\\" elif num >= criteria[\\"high\\"][0] and num <= criteria[\\"high\\"][1]: return \\"high\\" else: return \\"not found\\" num = 28 criteria = { \\"low\\": [0,15], \\"medium\\": [16,30], \\"high\\": [31,99] } category = define_category(num, criteria) print(category)"},{"prompt":"Create a Python function to filter a given list of strings and return a new list of strings containing only unique elements. The list is: [abc, def, abc, ghi, jkl, mno, abc, pqr]","completion":"def filter_list(strings): unique_strings = [] for string in strings: if string not in unique_strings: unique_strings.append(string) return unique_strings strings = [\\"abc\\", \\"def\\", \\"abc\\", \\"ghi\\", \\"jkl\\", \\"mno\\", \\"abc\\", \\"pqr\\"] filtered_strings = filter_list(strings) print(filtered_strings) # Output: ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']"},{"prompt":"Optimize the given Python code by removing any redundant or unnecessary operations. s = for i in range(0, 10): for x in range(0, 10): for y in range(0, 10): s += str(i) + str(x) + str(y)","completion":"s = \\"\\" for i in range(0, 10): for x in range(0, 10): s += str(i) + str(x) + ''.join([str(y) for y in range(0, 10)])"},{"prompt":"Create a function in Python that converts a sentence to upper case. This is an example sentence.","completion":"def sentence_to_upper(sentence): return sentence.upper() print(sentence_to_upper(\\"This is an example sentence.\\"))"},{"prompt":"Write a Python program that simulates a coin flip game. The program should randomize a value between 0 and 1 and return Heads for values less than .5 and Tails for values greather than .5 Not applicable","completion":"import random def coin_flip(): if random.random() < 0.5: return \\"Heads\\" else: return \\"Tails\\" print(coin_flip())"},{"prompt":"Create a function in Python that converts an array of strings into a dictionary containing character counts. [hello, world, the]","completion":"def array_to_char_count_dict(arr): character_count = {} for string in arr: for char in string: if char in character_count: character_count[char] += 1 else: character_count[char] = 1 return character_count arr = [\\"hello\\", \\"world\\", \\"the\\"] print(array_to_char_count_dict(arr)) # Output: {'h': 1, 'e': 2, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1, 't': 1}"},{"prompt":"Design a program in Python which prints the Fibonacci sequence up to the given number n.","completion":"def print_fibonacci_seq(n): a, b = 0, 1 while a < n: print(a, end=' ') a, b = b, a + b if __name__ == '__main__': n = 100 print_fibonacci_seq(n)"},{"prompt":"Translate an algorithm from Java to Python to delete a node in a linked list. Not applicable","completion":"# Python function to delete a node # in a Linked List. class Node: # Constructor to initialize the node object def __init__(self, data): self.data = data self.next = None # Function to delete node from Linked List def deleteNode(head, position): # If linked list is empty if head == None: return temp = head # If head needs to be removed if position == 0: head = temp.next temp = None return head # Find previous node of the node to be deleted for i in range(position -1 ): temp = temp.next if temp is None: break # If position is more than number of nodes if temp is None: return if temp.next is None: return # Node temp.next is the node to be deleted # store pointer to the next of node to be deleted next = temp.next.next # Unlink the node from linked list temp.next = None temp.next = next return head"},{"prompt":"Simplify a fraction using a provided Python code. def gcd(a, b): if b == 0: return a return gcd(b, a % b)","completion":"def simplify(numerator, denominator): # find the gcd (greatest common divisor) gcd = gcd(numerator, denominator) # divide both numerator and denominator by the gcd simplified_numerator = int(numerator/gcd) simplified_denominator = int(denominator/gcd) return simplified_numerator, simplified_denominator"},{"prompt":"Create a function in Python that takes two strings in as arguments and returns a boolean value indicating if the strings have the same letter case. String1: Hello String2: HeLLo","completion":"def same_case(string1, string2): # Take the lengths of two strings into consideration if len(string1) != len(string2): return False # Compare character by character # If any one of the characters are not of same case # return false for x, y in zip(string1, string2): if x.islower() != y.islower(): return False # If execution reaches this point # it means that all characters of both strings # are having same case return True"},{"prompt":"mplement a bubble sort in Python.","completion":"def bubble_sort(lst): for i in range(len(lst)-1,0,-1): for j in range(i): if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst"},{"prompt":"Design an algorithm in Python that accepts a list of integers as an input and returns true if the list contains duplicates. arr = [1, 4, 9, 6, 2, 5, 9, 7]","completion":"def is_duplicate(arr): return len(arr) != len(set(arr)) is_duplicate(arr) # returns True"},{"prompt":"Generate code to remove any duplicates from a list of integers in Python. [1, 1, 2, 3, 4, 4, 5]","completion":"def remove_duplicates(lst): final_list = [] for num in lst: if num not in final_list: final_list.append(num) return final_list lst = [1, 1, 2, 3, 4, 4, 5] print(remove_duplicates(lst))"},{"prompt":"Using Tkinter library, write a Python program to create a window with two buttons: One for stopping a program, and the other for starting a program.","completion":"import tkinter as tk # Create window root = tk.Tk() # Create two buttons stop_button = tk.Button(root, text=\\"Stop Program\\", command=stop_program) start_button = tk.Button(root, text=\\"Start Program\\", command=start_program) # Place two buttons in the window stop_button.pack() start_button.pack() # Display window root.mainloop()"},{"prompt":"Create a script in Python to sort a list of names by alphabetical order. names = [John, Sara, Joseph, James]","completion":"names.sort() print(names)"},{"prompt":"Generate a Python program to transform a given list of integers into a dictionary with each list element as the key and its square root as the value. [4, 9, 16, 25]","completion":"def to_dict(lst): # Initialize a new dictionary new_dict = {} # Iterate over the list and assign the square root of each element as value for item in lst: new_dict[item] = item**0.5 # Return the dictionary return new_dict"},{"prompt":"Edit the Python program given below, so that it computes the factorial of the given number n. def factorial(n): # TODO","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Clone a remote Git repository using a Python program.","completion":"import git # Clone a remote Git repository repo = git.Repo.clone_from(\\"https://github.com/username/repo.git\\")"},{"prompt":"Generate a Python script to calculate the factorial of a number.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) num = int(input(\\"Enter a number: \\")) factorial = factorial(num) print(\\"The factorial of\\",num,\\"is\\",factorial)"},{"prompt":"Generate a script in Python to generate a random password that has a minimum of 8 characters, including special characters and numbers. Not applicable","completion":"import string import random # Generate 8 random characters, including special characters and numbers size = 8 password = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation, k=size)) print(password) # Output: euy6c17"},{"prompt":"Given a sentence, write a Python program to capitalise the first letter of each word. Sentence: hello world","completion":"words = \\"hello world\\" words = words.split() new_words = [word.capitalize() for word in words] modified_string = \\" \\".join(new_words) print(modified_string)"},{"prompt":"Generate a function in python that takes two strings and returns the longest substring that is common to both strings. s1 = abcde s2 = xabxcdxxef","completion":"def longest_common_substring(s1, s2): \\"\\"\\" This function takes two strings and returns the longest substring that is common to both strings. :param s1: string :param s2: string :return: longest common substring \\"\\"\\" m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] longest, x_longest = 0, 0 for x in range(1, 1 + len(s1)): for y in range(1, 1 + len(s2)): if s1[x - 1] == s2[y - 1]: m[x][y] = m[x - 1][y - 1] + 1 if m[x][y] > longest: longest = m[x][y] x_longest = x else: m[x][y] = 0 return s1[x_longest - longest: x_longest]"},{"prompt":"Write a function in Python to print all the prime numbers between 0 and 100. Not applicable","completion":"def print_prime_numbers(): for num in range(0, 101): if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num) print_prime_numbers()"},{"prompt":"Write a Python function to compute the frequency of unique words from a given string.","completion":"def unique_words_freq(string): words = string.split() words_freq = {} for word in words: if word not in words_freq.keys(): words_freq[word] = 1 else: words_freq[word] += 1 return words_freq result = unique_words_freq(\\"Hello world, hello world\\") print(result)"},{"prompt":"Write a Python program to generate a simple Maze game where the player starts at position (0,0) and needs to find the goal position (4,4) by navigating the maze. Not applicable","completion":"# Maze Class class Maze: # Maze constructor def __init__(self): self.n = 5 self.maze = [[ 1, 0, 0, 0, 1 ], [ 1, 1, 1, 0, 1 ], [ 0, 0, 0, 0, 0 ], [ 0, 1, 1, 1, 1 ], [ 0, 1, 0, 0, 1 ]] # function to print the maze def printMaze(self): for i in range(self.n): for j in range(self.n): print(self.maze[i][j], end =\\" \\") print () # function to check if maze is solved or not def isSolved(self, x, y): if x == self.n - 1 and y == self.n - 1: return True return False # Driver Function if __name__ == \\"__main__\\": mazeObj = Maze() mazeObj.printMaze() print(\\"Is the maze solved? :\\", mazeObj.isSolved(0, 0))"},{"prompt":"Generate a correct program in Python to perform two dimensional binary search arr = [[1, 5, 8], [2, 15, 20], [3, 25, 30], [11, 13, 16]]","completion":"def binarySearch2D(arr, key): start = 0 end = len(arr) - 1 while start <= end: mid = (start + end) // 2 if arr[mid][0] == key: return True elif arr[mid][0] > key: end = mid - 1 else: start = mid + 1 return False arr = [[1, 5, 8], [2, 15, 20], [3, 25, 30], [11, 13, 16]] key = 3 if binarySearch2D(arr, key): print(True) else : print(False)"},{"prompt":"Develop a text summarizer in Python that takes a text input and returns a summary of the text in two sentences. Not applicable","completion":"import nltk import re def summarize_text(text): \\"\\"\\" A basic text summarizer that takes a text input and returns a summary of the text in two sentences. \\"\\"\\" # Tokenize the text tokens = nltk.sent_tokenize(text) # Get the frequency of each word word_frequencies = {} for word in nltk.word_tokenize(text): if word not in word_frequencies.keys(): word_frequencies[word] = 1 else: word_frequencies[word] += 1 # Get the maximum frequency maximum_frequency = max(word_frequencies.values()) # Compute the weight of each word for word in word_frequencies.keys(): word_frequencies[word] = (word_frequencies[word]/maximum_frequency) # Generate the summary sentence_scores = {} for sent in tokens: for word in nltk.word_tokenize(sent.lower()): if word in word_frequencies.keys(): if len(sent.split(' ')) < 30: if sent not in sentence_scores.keys(): sentence_scores[sent] = word_frequencies[word] else: sentence_scores[sent] += word_frequencies[word] # Get the two highest-scoring sentences summary_sentences = heapq.nlargest(2, sentence_scores, key=sentence_scores.get) # Construct the summary summary = ' '.join(summary_sentences) return summary"},{"prompt":"Write a Python program that uses an API to retrieve data from a given web page and displays the relevant information to the user. Sample Webpage: https://www.example.com/page1","completion":"import requests # api-endpoint URL = \\"https://www.example.com/page1\\" # sending get request and saving the response as response object r = requests.get(url = URL) # extracting data in json format data = r.json() # extracting relevant data status = data['status'] sub_title = data['sub_title'] max_clients = data['max_clients'] # printing extracted data print(\\"Status:\\", status) print(\\"Sub Title:\\", sub_title) print(\\"Max Clients:\\", max_clients)"},{"prompt":"Write an algorithm in Python to detect duplicate values in a given array. [5, 2, 1, 5, 9, 1, 3]","completion":"def find_duplicates(arr): duplicates = [] seen = set() for i in arr: if i not in seen: seen.add(i) else: duplicates.append(i) return duplicates"},{"prompt":"Design a sorting algorithm in Python that is capable of sorting very large lists. [25, 6, 7, 3, 12, 89, 74, 55]","completion":"def sort(array): for i in range(len(array)): low = i for j in range(i+1, len(array)): if array[low] > array[j]: low = j array[i], array[low] = array[low], array[i] return array example = [25, 6, 7, 3, 12, 89, 74, 55] sorted_array = sort(example) print(sorted_array)"},{"prompt":"Create a Python script for downloading a web page's HTML content. http://example.com","completion":"import requests url = 'http://example.com' r = requests.get(url) html = r.text with open('page.html', 'w') as f: f.write(html)"},{"prompt":"Write a python code that takes the starting and ending numbers of a range, and returns the largest prime within that range. 3, 22","completion":"def largest_prime_in_range(start, end): largest_prime = 0 # Iterate over the range for i in range(start, end + 1): # Check if number is prime is_prime = True if i > 1: for j in range(2, ceil(sqrt(i))+ 1): if i % j == 0: is_prime = False break # Check if number is the largest prime if is_prime and i > largest_prime: largest_prime = i return largest_prime if __name__ == '__main__': output = largest_prime_in_range(3, 22) print(output)"},{"prompt":"Create a Python function to calculate the sum of two numbers using a for loop.","completion":"def sum_of_two(x, y): result = 0 for i in range(x, y+1): result += i return result"},{"prompt":"Refactor a code snippet that creates a list of numbers from 1 to 10 in Python to use a list comprehension. Not applicable","completion":"numbers = [x for x in range(1, 11)]"},{"prompt":"Design a Python class to represent a circle with a center and a radius.","completion":"class Circle: def __init__(self, center, radius): self.center = center self.radius = radius def area(self): return 3.14 * self.radius * self.radius def circumference(self): return 2 * 3.14 * self.radius circle = Circle((1, 2), 5) print(f\\"Area of the circle: {circle.area()}\\") print(f\\"Circumference of the circle: {circle.circumference()}\\")"},{"prompt":"Can you create a loop in Python to find the highest value in an array? arr = [2, 3, 9, 1, 4, 5]","completion":"max_val = arr[0] for num in arr: if num > max_val: max_val = num print(max_val)"},{"prompt":"Design a Python program to compute the maximum sum of any subpolygon within a given array of N points N = 5 points = [[1, 2], [2, 8], [4, 6], [8, 0], [7, 1]]","completion":"def max_subpolygon_sum(N, points): maximum_sum = 0 for i in range(N): for j in range(i+1, N): for k in range(j+1, N): for l in range(k+1, N): current_sum = points[i][0] + points[j][1] + points[k][0] + points[l][1] maximum_sum = max(maximum_sum, current_sum) return maximum_sum max_sum = max_subpolygon_sum(N, points) print(f'The maximum sum of any subpolygon within the given array of points is {max_sum}.')"},{"prompt":"Write a Python program to evaluate a given string and return a Boolean value. String = “The sky is blue”","completion":"def evaluate_string(string): if string == 'The sky is blue': return True else: return False"},{"prompt":"Make a Python program that can generate random numbers between 1 and 1000.","completion":"import random def random_number(): return random.randint(1, 1000) print(random_number())"},{"prompt":"Write a function in Python to extract domain name from given URLs. http://www.google.com","completion":"import re def extract_domain_name(url): regex = r\\"://([^/]+)/?\\" match = re.search(regex, url) if match: return match.group(1) url = \\"http://www.google.com\\" domain_name = extract_domain_name(url) print(domain_name) # Output: # google.com"},{"prompt":"Write a Python function that takes in a 2D array of integers and return the sum of all elements in the array. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def sumArray(arr): sum = 0 for i in range(len(arr)): for j in range(len(arr[i])): sum += arr[i][j] return sum sumArray([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # returns 45"},{"prompt":"Develop a Python program that automatically prints out a Fibonacci sequence of length n.","completion":"def print_fibonacci(length): a = 0 b = 1 while length > 0: print(a) temp = a a = b b = temp + b length = length - 1"},{"prompt":"Design an algorithm for sorting a list in Python.","completion":"def sort_list(list): for i in range(len(list)-1): # loop over index i from 0 to n-2 small = i # set minimum index to i for j in range(i + 1, len(list)): # loop over index j from i+1 to n-1 if list[j] < list[small]: # compare list[j] with list[small] small = j # update minimum index list[i], list[small] = list[small], list[i] # swap list[i] and list[small] return list # Main program list = [ 3, 8, 4, 6, 2, 9, 7] print (\\"Original list:\\", list) sort_list(list) print (\\"Sorted list:\\", list)"},{"prompt":"This code tests BIP forks in Python 2. To run the test, follow these steps: 1. Start a single node. 2. Use regtest lockin with 108/144 block signalling. 3. Activate after a further 144 blocks. 4. Mine 2 blocks and save coinbases for later use. 5. Mine 141 blocks to transition from DEFINED to STARTED. 6. Mine 100 blocks signalling readiness and 44 not in order to fail to change state this period. 7. Mine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED>LOCKED_IN). 8. Mine a further 143 blocks (LOCKED_IN). 9. Test that enforcement has not triggered (which triggers ACTIVE). 10. Test that enforcement has triggered.","completion":"#!/usr/bin/env python2 # Copyright (c) 2015 The Deuscoin Core developers # Distributed under the MIT/X11 software license, see the accompanying # file COPYING or http://www.opensource.org/licenses/mit-license.php. # from test_framework.test_framework import ComparisonTestFramework from test_framework.util import * from test_framework.mininode import CTransaction, NetworkThread from test_framework.blocktools import create_coinbase, create_block from test_framework.comptool import TestInstance, TestManager from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP from binascii import hexlify, unhexlify import cStringIO import time import itertools ''' This test is meant to exercise BIP forks Connect to a single node. regtest lock-in with 108/144 block signalling activation after a further 144 blocks mine 2 block and save coinbases for later use mine 141 blocks to transition from DEFINED to STARTED mine 100 blocks signalling readiness and 44 not in order to fail to change state this period mine 108 blocks signalling readiness and 36 blocks not signalling readiness (STARTED->LOCKED_IN) mine a further 143 blocks (LOCKED_IN) test that enforcement has not triggered (which triggers ACTIVE) test that enforcement has triggered ''' class BIP9SoftForksTest(ComparisonTestFramework): def __init__(self): self.num_nodes = 1 def setup_network(self): self.nodes = start_nodes(1, self.options.tmpdir, extra_args=[['-debug', '-whitelist=127.0.0.1']], binary=[self.options.testbinary]) def run_test(self): self.test = TestManager(self, self.options.tmpdir) self.test.add_all_connections(self.nodes) NetworkThread().start() # Start up network handling in another thread self.test.run() def create_transaction(self, node, coinbase, to_address, amount): from_txid = node.getblock(coinbase)['tx'][0] inputs = [{ \\"txid\\" : from_txid, \\"vout\\" : 0}] outputs = { to_address : amount } rawtx = node.createrawtransaction(inputs, outputs) tx = CTransaction() f = cStringIO.StringIO(unhexlify(rawtx)) tx.deserialize(f) tx.nVersion = 2 return tx def sign_transaction(self, node, tx): signresult = node.signrawtransaction(hexlify(tx.serialize())) tx = CTransaction() f = cStringIO.StringIO(unhexlify(signresult['hex'])) tx.deserialize(f) return tx def generate_blocks(self, number, version, test_blocks = []): for i in xrange(number): block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1) block.nVersion = version block.rehash() block.solve() test_blocks.append([block, True]) self.last_block_time += 1 self.tip = block.sha256 self.height += 1 return test_blocks def get_bip9_status(self, key): info = self.nodes[0].getblockchaininfo() for row in info['bip9_softforks']: if row['id'] == key: return row raise IndexError ('key:\\"%s\\" not found' % key) def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature): # generate some coins for later self.coinbase_blocks = self.nodes[0].generate(2) self.height = 3 # height of the next block to build self.tip = int (\\"0x\\" + self.nodes[0].getbestblockhash() + \\"L\\", 0) self.nodeaddress = self.nodes[0].getnewaddress() self.last_block_time = int(time.time()) assert_equal(self.get_bip9_status(bipName)['status'], 'defined') # Test 1 # Advance from DEFINED to STARTED test_blocks = self.generate_blocks(141, 4) yield TestInstance(test_blocks, sync_every_block=False) assert_equal(self.get_bip9_status(bipName)['status'], 'started') # Test 2 # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1 # using a variety of bits to simulate multiple parallel softforks test_blocks = self.generate_blocks(50, activated_version) # 0x20000001 (signalling ready) test_blocks = self.generate_blocks(20, 4, test_blocks) # 0x00000004 (signalling not) test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready) test_blocks = self.generate_blocks(24, 4, test_blocks) # 0x20010000 (signalling not) yield TestInstance(test_blocks, sync_every_block=False) assert_equal(self.get_bip9_status(bipName)['status'], 'started') # Test 3 # 108 out of 144 signal bit 1 to achieve LOCKED_IN # using a variety of bits to simulate multiple parallel softforks test_blocks = self.generate_blocks(58, activated_version) # 0x20000001 (signalling ready) test_blocks = self.generate_blocks(26, 4, test_blocks) # 0x00000004 (signalling not) test_blocks = self.generate_blocks(50, activated_version, test_blocks) # 0x20000101 (signalling ready) test_blocks = self.generate_blocks(10, 4, test_blocks) # 0x20010000 (signalling not) yield TestInstance(test_blocks, sync_every_block=False) assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in') # Test 4 # 143 more version 536870913 blocks (waiting period-1) test_blocks = self.generate_blocks(143, 4) yield TestInstance(test_blocks, sync_every_block=False) assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in') # Test 5 # Check that the new rule is enforced spendtx = self.create_transaction(self.nodes[0], self.coinbase_blocks[0], self.nodeaddress, 1.0) invalidate(spendtx) spendtx = self.sign_transaction(self.nodes[0], spendtx) spendtx.rehash() invalidatePostSignature(spendtx) spendtx.rehash() block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1) block.nVersion = activated_version block.vtx.append(spendtx) block.hashMerkleRoot = block.calc_merkle_root() block.rehash() block.solve() self.last_block_time += 1 self.tip = block.sha256 self.height += 1 yield TestInstance([[block, True]]) assert_equal(self.get_bip9_status(bipName)['status'], 'active') # Test 6 # Check that the new sequence lock rules are enforced spendtx = self.create_transaction(self.nodes[0], self.coinbase_blocks[1], self.nodeaddress, 1.0) invalidate(spendtx) spendtx = self.sign_transaction(self.nodes[0], spendtx) spendtx.rehash() invalidatePostSignature(spendtx) spendtx.rehash() block = create_block(self.tip, create_coinbase(self.height), self.last_block_time + 1) block.nVersion = 5 block.vtx.append(spendtx) block.hashMerkleRoot = block.calc_merkle_root() block.rehash() block.solve() self.last_block_time += 1 yield TestInstance([[block, False]]) # Restart all stop_nodes(self.nodes) wait_deuscoinds() shutil.rmtree(self.options.tmpdir) self.setup_chain() self.setup_network() self.test.clear_all_connections() self.test.add_all_connections(self.nodes) NetworkThread().start() # Start up network handling in another thread def get_tests(self): for test in itertools.chain( self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing), self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing), self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate) ): yield test def donothing(self, tx): return def csv_invalidate(self, tx): '''Modify the signature in vin 0 of the tx to fail CSV Prepends -1 CSV DROP in the scriptSig itself. ''' tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP3, OP_DROP] + list(CScript(tx.vin[0].scriptSig))) def sequence_lock_invalidate(self, tx): '''Modify the nSequence to make it fails once sequence lock rule is activated (high timespan) ''' tx.vin[0].nSequence = 0x00FFFFFF tx.nLockTime = 0 def mtp_invalidate(self, tx): '''Modify the nLockTime to make it fails once MTP rule is activated ''' # Disable Sequence lock, Activate nLockTime tx.vin[0].nSequence = 0x90FFFFFF tx.nLockTime = self.last_block_time if __name__ == '__main__': BIP9SoftForksTest().main()"},{"prompt":"Write an algorithm in Python to find the largest and smallest element in an array. arr = [3, 7, 1, 12, 5]","completion":"def find_min_max(arr): min, max = arr[0], arr[0] for item in arr: if item < min: min = item if item > max: max = item return min, max # test arr = [3, 7, 1, 12, 5] min, max = find_min_max(arr) print(f'min: {min}, max: {max}')"},{"prompt":"Generate a Python class that takes a single number as an argument, which indicates an array size, and calculate the median value of the array arr_size = 10","completion":"class MedianCalculator: def __init__(self, arr_size): self.arr_size = arr_size self.arr = [] def calculate_median(self): if self.arr_size == 0: return 0 elif self.arr_size == 1: return self.arr[0] else: self.arr.sort() if self.arr_size % 2 == 0: mid1 = self.arr_size // 2 - 1 mid2 = self.arr_size // 2 return (self.arr[mid1] + self.arr[mid2]) / 2 else: return self.arr[self.arr_size // 2]"},{"prompt":"Write a Python program to extract all emails from an HTML page. <html> <head> <title>Page title</title> </head> <body> <p>For more information email us at info@example.com.</p> <p>You can also contact john@example.com.</p> </body> </html>","completion":"import re html_str = \\"\\"\\" <html> <head> <title>Page title</title> </head> <body> <p>For more information email us at info@example.com.</p> <p>You can also contact john@example.com.</p> </body> </html>\\"\\"\\" emails = re.findall(r'S+@S+', html_str) print(emails) # Output: ['info@example.com', 'john@example.com']"},{"prompt":"This code is a Python module for image manipulation. To use it, import the module and create an instance of the ImageHelper class. The module provides several methods for image manipulation, including comparison, loading, cropping, bordering, resizing, colorizing, and saving. To manipulate an image, call the manipulate method and pass in the source image file path and any desired options. The method will return True if the image was successfully manipulated and saved, False if there was an error, or the manipulated image if no save destination was specified.","completion":"# -*- coding: utf-8 -*- import tempfile from dp_tornado.engine.helper import Helper as dpHelper class ImageHelper(dpHelper): def compare(self, i1, i2, error=0): i1 = self.load(i1) i2 = self.load(i2) if not i1 or not i2: return None s1 = i1.size s2 = i2.size if s1[0] != s2[0] or s2[1] != s2[1]: print('size ne,', s1, s2) return False i1 = i1.load() i2 = i2.load() for i in range(s1[0]): for j in range(s1[1]): if i1[i, j] != i2[i, j]: if error: for k in range(len(i1[i, j])): if abs(i1[i, j][k] - i2[i, j][k]) > error: print('pixel ne,', i1[i, j], i2[i, j], abs(i1[i, j][k] - i2[i, j][k]), error) return False else: return False return True def _driver(self, options=None, **kwargs): if not options and kwargs: options = kwargs if options and 'driver' in options and options['driver'] == 'wand': return self.helper.io.image.driver.wand return self.helper.io.image.driver.pillow def load(self, src, options=None, **kwargs): if not options and kwargs: options = kwargs tmp = None drivers = [] pillow_image = self.helper.io.image.driver.pillow.Image wand_image = self.helper.io.image.driver.wand.Image if pillow_image: drivers.append(pillow_image) if wand_image: drivers.append(wand_image) try: if isinstance(src, tuple(drivers)): return src elif self.helper.web.url.validate(src): code, res = self.helper.web.http.get.raw(src) if code != 200: raise Exception('The specified image url is invalid.') tmp = tempfile.NamedTemporaryFile(delete=False) tmp.write(res) tmp.close() tmp = tmp.name else: tmp = None if not tmp and not src: raise Exception('The specified image is invalid.') img = self._driver(options=options).load(tmp if tmp else src) if not img: raise Exception('The specified image is invalid.') return img except Exception as e: self.logging.exception(e) return False finally: if tmp: self.helper.io.file.remove(tmp) def execute(self, src, fn, options=None, **kwargs): if not options and kwargs: options = kwargs img = self.load(src, options=options) if not img: return False try: return fn(img, options) except Exception as e: self.logging.exception(e) return False def size(self, src, options=None, **o_kwargs): if not options and o_kwargs: options = o_kwargs def fn(img, kwargs): if not img: return -1, -1 return img.width, img.height return self.execute(src, fn, options=options) def crop(self, src, options=None, **o_kwargs): if not options and o_kwargs: options = o_kwargs def fn(img, kwargs): crop = kwargs['crop'] if 'crop' in kwargs else None if not crop: return img e_top = 0 e_left = 0 e_right = 0 e_bottom = 0 if self.helper.misc.type.check.string(crop): crop = crop.split(',') crop = [int(e.strip()) for e in crop] if self.helper.misc.type.check.numeric(crop): e_top = e_left = e_right = e_bottom = crop elif isinstance(crop, (tuple, list)): if len(crop) == 1: e_top = e_left = e_right = e_bottom = crop[0] elif len(crop) == 2: e_top = e_bottom = crop[0] e_left = e_right = crop[1] elif len(crop) == 4: e_top = crop[0] e_right = crop[1] e_bottom = crop[2] e_left = crop[3] img = self._driver(options=kwargs).crop(img, e_left, e_top, img.size[0] - e_right, img.size[1] - e_bottom) return img return self.execute(src, fn, options=options) def border(self, src, options=None, **o_kwargs): if not options and o_kwargs: options = o_kwargs def fn(img, kwargs): border = int(kwargs['border']) if 'border' in kwargs else 0 border_color = kwargs['border_color'] if 'border_color' in kwargs else '#000000' if not border: return img if '_org' in kwargs and 'radius' in kwargs and kwargs['radius']: return img img = self._driver(options=kwargs).border(img, border, border_color) return img return self.execute(src, fn, options=options) def radius(self, src, options=None, **o_kwargs): if not options and o_kwargs: options = o_kwargs def fn(img, kwargs): radius = int(kwargs['radius'] or 0) if 'radius' in kwargs else None border = int(kwargs['border']) if 'border' in kwargs else 0 border_color = kwargs['border_color'] if 'border_color' in kwargs else '#000000' if not radius: return img elif '__radius_processed__' in img.__dict__: return img img = self._driver(options=kwargs).radius(img, radius, border, border_color) img.__dict__['__radius_processed__'] = True return img return self.execute(src, fn, options=options) def colorize(self, src, options=None, **o_kwargs): if not options and o_kwargs: options = o_kwargs def fn(img, kwargs): colorize = kwargs['colorize'] if 'colorize' in kwargs else None if not colorize: return img img = self._driver(options=kwargs).colorize(img, colorize) return img return self.execute(src, fn, options=options) def resize(self, src, options=None, **o_kwargs): if not options and o_kwargs: options = o_kwargs def fn(img, kwargs): size = kwargs['size'] if 'size' in kwargs else None mode = kwargs['mode'] if 'mode' in kwargs else None scale = int(kwargs['scale']) if 'scale' in kwargs else 1 limit = True if 'limit' in kwargs and kwargs['limit'] else False border = int(kwargs['border']) if 'border' in kwargs else 0 if not size: return img width_new, height_new = size width_origin, height_origin = img.size if scale > 1: if limit: scale_max_width = float(width_origin) / float(width_new) scale_max_height = float(height_origin) / float(height_new) scale_max = min(scale, scale_max_width, scale_max_height) else: scale_max = scale if scale_max > 1: width_new = int(width_new * scale_max) height_new = int(height_new * scale_max) if not width_new: width_new = width_origin * height_new / height_origin mode = self.helper.io.image.mode.resize if not height_new: height_new = height_origin * width_new / width_origin mode = self.helper.io.image.mode.resize if border: width_new -= border * 2 height_new -= border * 2 if not mode: mode = self.helper.io.image.mode.resize if mode not in self.helper.io.image.mode.modes: raise Exception('The specified mode is not supported.') seqs = [] for i, im in self._driver(options=kwargs).iter_seqs(img, kwargs): # Image Resizing if mode == self.helper.io.image.mode.center: im = self._driver(options=kwargs).resize(im, width_new, height_new, kwargs) elif mode == self.helper.io.image.mode.fill: ratio_origin = float(width_origin) / float(height_origin) ratio_new = float(width_new) / float(height_new) if ratio_origin > ratio_new: tw = int(round(height_new * ratio_origin)) im = self._driver(options=kwargs).resize(im, tw, height_new) left = int(round((tw - width_new) / 2.0)) im = self._driver(options=kwargs).crop(im, left, 0, left + width_new, height_new) elif ratio_origin < ratio_new: th = int(round(width_new / ratio_origin)) im = self._driver(options=kwargs).resize(im, width_new, th) top = int(round((th - height_new) / 2.0)) im = self._driver(options=kwargs).crop(im, 0, top, width_new, top + height_new) else: im = self._driver(options=kwargs).resize(im, width_new, height_new) elif mode == self.helper.io.image.mode.resize: if width_new > width_origin or height_new > height_origin: width_new = width_origin height_new = height_origin im = self._driver(options=kwargs).resize(im, width_new, height_new) seqs.append(im) img = seqs[0] seqs.remove(img) img.__dict__['__frames__'] = seqs return img return self.execute(src, fn, options=options) def save(self, src, options=None, **o_kwargs): if not options and o_kwargs: options = o_kwargs def fn(img, kwargs): ext = kwargs['format'] if 'format' in kwargs else None dest = kwargs['dest'] if 'dest' in kwargs else None if not dest: return None if not ext and self.helper.misc.type.check.string(dest): ext = self.helper.io.path.ext(dest, dot='').lower() if not ext and self.helper.misc.type.check.string(src): ext = self.helper.io.path.ext(src, dot='').lower() if not ext and '_org' in kwargs and kwargs['_org'] and self.helper.misc.type.check.string(kwargs['_org']): ext = self.helper.io.path.ext(kwargs['_org'], dot='').lower() if dest == 's3': # TODO return False if not self._driver(options=kwargs).save(img, ext, dest, kwargs): return False return True return self.execute(src, fn, options=options) def manipulate(self, src, options=None, **kwargs): if not options and kwargs: options = kwargs options['_org'] = src try: img = self.load(src, options=options) # Crop img = self.crop(img, options=options) if not img: return False # Resize img = self.resize(img, options=options) if not img: return False # Radius img = self.radius(img, options=options) if not img: return False # Border img = self.border(img, options=options) if not img: return False # Colorize img = self.colorize(img, options=options) if not img: return False # Save saved = self.save(img, options=options) if saved is None: return img elif saved is False: return False return True except Exception as e: self.logging.exception(e) return False"},{"prompt":"Write a python program to find the longest palindromic substring from a given string. string = forgeeksskeegfor","completion":"# Function to find longest palindromic substring def longest_palindromic_substring(string): maxLength = 1 start = 0 length = len(string) low = 0 high = 0 # One by one consider every character as center point # of even and length palindromes for i in range(1, length): # Find the longest even length palindrome with center # points as i - 1 and i. low = i - 1 high = i while low >= 0 and high < length and string[low] == string[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 # Find the longest odd length palindrome with center # point as i low = i - 1 high = i + 1 while low >= 0 and high < length and string[low] == string[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 # print the substring print(string[start: start + maxLength]) # Driver code string = \\"forgeeksskeegfor\\" longest_palindromic_substring(string)"},{"prompt":"Generate a Python program to calculate the area of a provided room. The room has length 5 meters, width 8 meters and height 3 meters.","completion":"length_meters = 5 width_meters = 8 height_meters = 3 # Calculate area of room room_area_meters_squared = length_meters * width_meters * height_meters # Print the area print(f\\"The area of the room is {room_area_meters_squared} meters squared.\\")"},{"prompt":"mplement a function in Python to implement Merge Sort algorithm.","completion":"def merge_sort(arr): # Base case if len(arr) <= 1: return arr else: # Split array into two halves mid = len(arr)//2 left = arr[:mid] right = arr[mid:] # Call merge_sort recursively with each half left = merge_sort(left) right = merge_sort(right) # Merge each half return merge(left, right) def merge(left, right): # Initialize variables result = [] left_index = 0 right_index = 0 # result will be a sorted array while left_index < len(left) and right_index < len(right): if left[left_index] < right[right_index]: result.append(left[left_index]) left_index += 1 else: result.append(right[right_index]) right_index += 1 # If left is longer, add remaining elements result += left[left_index:] # If right is longer, add remaining elements result += right[right_index:] return result"},{"prompt":"Python, generate a function to extract data from a MySQL table, given a query string. query_string = SELECT * FROM student WHERE course='Python'","completion":"def extract_data_from_mysql(query_string): conn = mysql.connector.connect(host=\\"localhost\\", user=\\"root\\", passwd=\\"password\\", database=\\"student\\") cursor = conn.cursor() cursor.execute(query_string) result = cursor.fetchall() conn.close() return result"},{"prompt":"Construct a program to filter out empty strings from a given list. [Hello, , Python, World, ]","completion":"def remove_empty_strings(lst): filtered_list = [] for item in lst: if item != \\"\\": filtered_list.append(item) return filtered_list filtered_list = remove_empty_strings([\\"Hello\\", \\"\\", \\"Python\\", \\"World\\", \\"\\"]) print(filtered_list)"},{"prompt":"Design an algorithm in Python to compute the intersection of two given arrays.","completion":"def intersection(arr1,arr2): return set(arr1).intersection(set(arr2))"},{"prompt":"Write a Python program to generate an array of all the prime numbers within a given range. lower = 20 upper = 40","completion":"def generate_primes(lower, upper): \\"\\"\\" This functions returns an array of all the prime numbers within a given range. \\"\\"\\" prime_list = [] for num in range(lower, upper + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: prime_list.append(num) return prime_list"},{"prompt":"Design a program in Python to track inventory.","completion":"class Inventory: def __init__(self): # Declare an empty dictionary to hold inventory information self.inventory = {} # Function for adding product def add_product(self, product_name, quantity): # If product_name exists in inventory, add quantity to existing product's quantity if product_name in self.inventory.keys(): self.inventory[product_name] += quantity else: # If product_name is not in inventory, add it to inventory self.inventory[product_name] = quantity # Function for removing product def remove_product(self, product_name, quantity): # If product_name exists in inventory and there's insufficient quantity, print an error message if product_name in self.inventory.keys() and self.inventory[product_name] < quantity: print(\\"Error: Insufficient Quantity!\\") else: # If product_name is in inventory and there's sufficient quantity, remove product from inventory self.inventory[product_name] -= quantity if self.inventory[product_name] == 0: del self.inventory[product_name] # Function for printing inventory def print_inventory(self): print(\\"Inventory:\\") # Iterate through keys and values of inventory and print them for product_name, quantity in self.inventory.items(): print(product_name + \\" : \\" + str(quantity))"},{"prompt":"Write a Python program to compare two given strings in terms of length, characters, and case sensitivity. String 1: 'Hello World' String 2: 'hello world!'","completion":"def compare_strings(str1, str2): # compare string length if len(str1) > len(str2): print('String 1 is longer than String 2') elif len(str2) > len(str1): print('String 2 is longer than String 1') else: print('Strings are of equal length') # compare characters common_chars = set(str1).intersection(set(str2)) if len(common_chars) == min(len(str1), len(str2)): print('Strings have same characters') # compare case sensitivity if str1.lower() == str2.lower(): print('Strings are equal in terms of case sensitivity') str1 = 'Hello World' str2 = 'hello world!' compare_strings(str1, str2);"},{"prompt":"Create a Python program that takes a list and returns a dictionary with the elements from the list as keys, and their frequency as values. my_list = [1,1,2,3,4,4,4,4,5,6]","completion":"my_dict = {} for item in my_list: if item not in my_dict: my_dict[item] = 0 my_dict[item] += 1 print(my_dict) # {1: 2, 2: 1, 3: 1, 4: 4, 5: 1, 6: 1}"},{"prompt":"Create an API endpoint in Python Flask to add two numbers. This API should accept two numbers as Formula Parameters and should return the addition of those two numbers. num1 = 4 num2 = 5","completion":"from flask import Flask, request app = Flask(__name__) @app.route('/add', methods=['GET']) def add(): num1 = float(request.args.get('num1')) num2 = float(request.args.get('num2')) sum = num1 + num2 return str(sum) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Generate a Python program to generate a Fibonacci series up to 5 terms.","completion":"def fibonacci(num): # Initializing first two numbers of the series a = 0 b = 1 print(\\"Fibonacci series: \\", end = \\" \\") for i in range(num): # Generating next number in the series c = a + b a = b b = c # printing the generated number in the series print(c, end =\\" \\") # Get number of terms to generate in the series num = 5 #Calling fibonacci function fibonacci(num)"},{"prompt":"Generate a random 5x5 matrix consisting of numerical entries in Python. Not applicable","completion":"import numpy as np random_matrix = np.random.randint(1, 100, size=(5, 5)) print(random_matrix)"},{"prompt":"Write a function in Python that takes two strings and checks if they are anagrams (i.e., if they contain the same characters in the same order). Strings: Hello, World","completion":"def isAnagram(str1, str2): # Convert the strings to lowercase str1 = str1.lower() str2 = str2.lower() # Sort the strings str1sorted = ''.join(sorted(str1)) str2sorted = ''.join(sorted(str2)) # Check if sorted strings are equal if(str1sorted == str2sorted): return True else: return False # Test print(isAnagram('Hello', 'World'))"},{"prompt":"Construct a python visualization to display a bar chart of the results of some data. Array of word strings and the associated frequency [ [word1, 5], [word2, 8], [word3, 3], [word4, 2], ]","completion":"import matplotlib.pyplot as plt words = [\\"word1\\", \\"word2\\", \\"word3\\", \\"word4\\"] frequencies = [5, 8, 3, 2] plt.bar(words, frequencies) plt.title(\\"Word Frequency Chart\\") plt.xlabel(\\"Words\\") plt.ylabel(\\"Frequency\\") plt.show()"},{"prompt":"Design a python program to return the nth element of a given list. list_input = [1, 3, 5, 7, 9] n = 3","completion":"def get_nth_element(list_input, n): return list_input[n] print(get_nth_element(list_input, n))"},{"prompt":"Suggest a solution to improve the following Python code to minimize the running time. def reverse_list(input_list): rev_list = [] for i in range(len(input_list)1,1,1): rev_list.append(input_list[i]) return rev_l","completion":"def reverse_list(input_list): left = 0 right = len(input_list) - 1 while left < right: input_list[left], input_list[right] = input_list[right], input_list[left] left += 1 right -= 1 return input_list"},{"prompt":"Create a Python program to search through a list of names and print out any names that contain the letter 'a'. names = [John, Paul, George, Ringo, Adam, Peter, Alice, Karen, Jerry]","completion":"names = [\\"John\\", \\"Paul\\", \\"George\\", \\"Ringo\\", \\"Adam\\", \\"Peter\\", \\"Alice\\", \\"Karen\\", \\"Jerry\\"] for name in names: if 'a' in name: print(name) # Output Adam Alice Karen"},{"prompt":"Create a function in Python that takes a list of strings and count all occurrences of a particular word in the list. [how, how, are, you, how, are, you], how","completion":"def countOccurrences(words, target): count = 0 for word in words: if word == target: count += 1 return count print(countOccurrences([\\"how\\", \\"how\\", \\"are\\", \\"you\\", \\"how\\", \\"are\\", \\"you\\"], \\"how\\"))"},{"prompt":"Create a function in Python that takes two integers and returns the larger with the smaller one as its divisor. Input integers: 10, 20","completion":"def get_larger_number_divisible_by_smaller(num1, num2): max_num = max(num1, num2) min_num = min(num1, num2) return max_num if max_num % min_num == 0 else None result = get_larger_number_divisible_by_smaller(10, 20) print(result) # 20"},{"prompt":"Modify the following python code to include a trycatch block. def add_number(a, b): return a + b","completion":"def add_number(a, b): try: return a + b except TypeError: print(\\"Please enter numeric values\\")"},{"prompt":"The given code is a Python script that defines a TestMailNotifier class and several methods for testing a NotifierBase class. To use this code, you can create an instance of the TestMailNotifier class and call its methods to test the behavior of the NotifierBase class. To run the tests, you can execute the script.","completion":"# This file is part of Buildbot. Buildbot is free software: you can # redistribute it and/or modify it under the terms of the GNU General Public # License as published by the Free Software Foundation, version 2. # # This program is distributed in the hope that it will be useful, but WITHOUT # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS # FOR A PARTICULAR PURPOSE. See the GNU General Public License for more # details. # # You should have received a copy of the GNU General Public License along with # this program; if not, write to the Free Software Foundation, Inc., 51 # Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. # # Copyright Buildbot Team Members import copy import sys from mock import Mock from twisted.internet import defer from twisted.trial import unittest from buildbot import config from buildbot.process.results import CANCELLED from buildbot.process.results import EXCEPTION from buildbot.process.results import FAILURE from buildbot.process.results import SUCCESS from buildbot.process.results import WARNINGS from buildbot.reporters.notifier import NotifierBase from buildbot.test.fake import fakedb from buildbot.test.fake import fakemaster from buildbot.test.util.config import ConfigErrorsMixin from buildbot.test.util.misc import TestReactorMixin from buildbot.test.util.notifier import NotifierTestMixin py_27 = sys.version_info[0] > 2 or (sys.version_info[0] == 2 and sys.version_info[1] >= 7) class TestMailNotifier(ConfigErrorsMixin, TestReactorMixin, unittest.TestCase, NotifierTestMixin): def setUp(self): self.setUpTestReactor() self.master = fakemaster.make_master(self, wantData=True, wantDb=True, wantMq=True) @defer.inlineCallbacks def setupNotifier(self, *args, **kwargs): mn = NotifierBase(*args, **kwargs) mn.sendMessage = Mock(spec=mn.sendMessage) mn.sendMessage.return_value = \\"<message>\\" yield mn.setServiceParent(self.master) yield mn.startService() return mn def test_init_enforces_tags_and_builders_are_mutually_exclusive(self): with self.assertRaises(config.ConfigErrors): NotifierBase(tags=['fast', 'slow'], builders=['a', 'b']) def test_init_warns_notifier_mode_all_in_iter(self): with self.assertRaisesConfigError( \\"mode 'all' is not valid in an iterator and must be passed in as a separate string\\"): NotifierBase(mode=['all']) @defer.inlineCallbacks def test_buildsetComplete_sends_message(self): _, builds = yield self.setupBuildResults(SUCCESS) mn = yield self.setupNotifier(buildSetSummary=True, mode=(\\"failing\\", \\"passing\\", \\"warnings\\"), builders=[\\"Builder1\\", \\"Builder2\\"]) mn.buildMessage = Mock() yield mn.buildsetComplete('buildset.98.complete', dict(bsid=98)) mn.buildMessage.assert_called_with( \\"whole buildset\\", builds, SUCCESS) self.assertEqual(mn.buildMessage.call_count, 1) @defer.inlineCallbacks def test_buildsetComplete_doesnt_send_message(self): _, builds = yield self.setupBuildResults(SUCCESS) # disable passing... mn = yield self.setupNotifier(buildSetSummary=True, mode=(\\"failing\\", \\"warnings\\"), builders=[\\"Builder1\\", \\"Builder2\\"]) mn.buildMessage = Mock() yield mn.buildsetComplete('buildset.98.complete', dict(bsid=98)) self.assertFalse(mn.buildMessage.called) @defer.inlineCallbacks def test_isMessageNeeded_ignores_unspecified_tags(self): _, builds = yield self.setupBuildResults(SUCCESS) build = builds[0] # force tags build['builder']['tags'] = ['slow'] mn = yield self.setupNotifier(tags=[\\"fast\\"]) self.assertFalse(mn.isMessageNeeded(build)) @defer.inlineCallbacks def test_isMessageNeeded_tags(self): _, builds = yield self.setupBuildResults(SUCCESS) build = builds[0] # force tags build['builder']['tags'] = ['fast'] mn = yield self.setupNotifier(tags=[\\"fast\\"]) self.assertTrue(mn.isMessageNeeded(build)) @defer.inlineCallbacks def test_isMessageNeeded_schedulers_sends_mail(self): _, builds = yield self.setupBuildResults(SUCCESS) build = builds[0] # force tags mn = yield self.setupNotifier(schedulers=['checkin']) self.assertTrue(mn.isMessageNeeded(build)) @defer.inlineCallbacks def test_isMessageNeeded_schedulers_doesnt_send_mail(self): _, builds = yield self.setupBuildResults(SUCCESS) build = builds[0] # force tags mn = yield self.setupNotifier(schedulers=['some-random-scheduler']) self.assertFalse(mn.isMessageNeeded(build)) @defer.inlineCallbacks def test_isMessageNeeded_branches_sends_mail(self): _, builds = yield self.setupBuildResults(SUCCESS) build = builds[0] # force tags mn = yield self.setupNotifier(branches=['master']) self.assertTrue(mn.isMessageNeeded(build)) @defer.inlineCallbacks def test_isMessageNeeded_branches_doesnt_send_mail(self): _, builds = yield self.setupBuildResults(SUCCESS) build = builds[0] # force tags mn = yield self.setupNotifier(branches=['some-random-branch']) self.assertFalse(mn.isMessageNeeded(build)) @defer.inlineCallbacks def run_simple_test_sends_message_for_mode(self, mode, result, shouldSend=True): _, builds = yield self.setupBuildResults(result) mn = yield self.setupNotifier(mode=mode) self.assertEqual(mn.isMessageNeeded(builds[0]), shouldSend) def run_simple_test_ignores_message_for_mode(self, mode, result): return self.run_simple_test_sends_message_for_mode(mode, result, False) def test_isMessageNeeded_mode_all_for_success(self): return self.run_simple_test_sends_message_for_mode(\\"all\\", SUCCESS) def test_isMessageNeeded_mode_all_for_failure(self): return self.run_simple_test_sends_message_for_mode(\\"all\\", FAILURE) def test_isMessageNeeded_mode_all_for_warnings(self): return self.run_simple_test_sends_message_for_mode(\\"all\\", WARNINGS) def test_isMessageNeeded_mode_all_for_exception(self): return self.run_simple_test_sends_message_for_mode(\\"all\\", EXCEPTION) def test_isMessageNeeded_mode_all_for_cancelled(self): return self.run_simple_test_sends_message_for_mode(\\"all\\", CANCELLED) def test_isMessageNeeded_mode_failing_for_success(self): return self.run_simple_test_ignores_message_for_mode(\\"failing\\", SUCCESS) def test_isMessageNeeded_mode_failing_for_failure(self): return self.run_simple_test_sends_message_for_mode(\\"failing\\", FAILURE) def test_isMessageNeeded_mode_failing_for_warnings(self): return self.run_simple_test_ignores_message_for_mode(\\"failing\\", WARNINGS) def test_isMessageNeeded_mode_failing_for_exception(self): return self.run_simple_test_ignores_message_for_mode(\\"failing\\", EXCEPTION) def test_isMessageNeeded_mode_exception_for_success(self): return self.run_simple_test_ignores_message_for_mode(\\"exception\\", SUCCESS) def test_isMessageNeeded_mode_exception_for_failure(self): return self.run_simple_test_ignores_message_for_mode(\\"exception\\", FAILURE) def test_isMessageNeeded_mode_exception_for_warnings(self): return self.run_simple_test_ignores_message_for_mode(\\"exception\\", WARNINGS) def test_isMessageNeeded_mode_exception_for_exception(self): return self.run_simple_test_sends_message_for_mode(\\"exception\\", EXCEPTION) def test_isMessageNeeded_mode_warnings_for_success(self): return self.run_simple_test_ignores_message_for_mode(\\"warnings\\", SUCCESS) def test_isMessageNeeded_mode_warnings_for_failure(self): return self.run_simple_test_sends_message_for_mode(\\"warnings\\", FAILURE) def test_isMessageNeeded_mode_warnings_for_warnings(self): return self.run_simple_test_sends_message_for_mode(\\"warnings\\", WARNINGS) def test_isMessageNeeded_mode_warnings_for_exception(self): return self.run_simple_test_ignores_message_for_mode(\\"warnings\\", EXCEPTION) def test_isMessageNeeded_mode_passing_for_success(self): return self.run_simple_test_sends_message_for_mode(\\"passing\\", SUCCESS) def test_isMessageNeeded_mode_passing_for_failure(self): return self.run_simple_test_ignores_message_for_mode(\\"passing\\", FAILURE) def test_isMessageNeeded_mode_passing_for_warnings(self): return self.run_simple_test_ignores_message_for_mode(\\"passing\\", WARNINGS) def test_isMessageNeeded_mode_passing_for_exception(self): return self.run_simple_test_ignores_message_for_mode(\\"passing\\", EXCEPTION) @defer.inlineCallbacks def run_sends_message_for_problems(self, mode, results1, results2, shouldSend=True): _, builds = yield self.setupBuildResults(results2) mn = yield self.setupNotifier(mode=mode) build = builds[0] if results1 is not None: build['prev_build'] = copy.deepcopy(builds[0]) build['prev_build']['results'] = results1 else: build['prev_build'] = None self.assertEqual(mn.isMessageNeeded(builds[0]), shouldSend) def test_isMessageNeeded_mode_problem_sends_on_problem(self): return self.run_sends_message_for_problems(\\"problem\\", SUCCESS, FAILURE, True) def test_isMessageNeeded_mode_problem_ignores_successful_build(self): return self.run_sends_message_for_problems(\\"problem\\", SUCCESS, SUCCESS, False) def test_isMessageNeeded_mode_problem_ignores_two_failed_builds_in_sequence(self): return self.run_sends_message_for_problems(\\"problem\\", FAILURE, FAILURE, False) def test_isMessageNeeded_mode_change_sends_on_change(self): return self.run_sends_message_for_problems(\\"change\\", FAILURE, SUCCESS, True) def test_isMessageNeeded_mode_change_sends_on_failure(self): return self.run_sends_message_for_problems(\\"change\\", SUCCESS, FAILURE, True) def test_isMessageNeeded_mode_change_ignores_first_build(self): return self.run_sends_message_for_problems(\\"change\\", None, FAILURE, False) def test_isMessageNeeded_mode_change_ignores_first_build2(self): return self.run_sends_message_for_problems(\\"change\\", None, SUCCESS, False) def test_isMessageNeeded_mode_change_ignores_same_result_in_sequence(self): return self.run_sends_message_for_problems(\\"change\\", SUCCESS, SUCCESS, False) def test_isMessageNeeded_mode_change_ignores_same_result_in_sequence2(self): return self.run_sends_message_for_problems(\\"change\\", FAILURE, FAILURE, False) @defer.inlineCallbacks def setupBuildMessage(self, **mnKwargs): _, builds = yield self.setupBuildResults(SUCCESS) mn = yield self.setupNotifier(**mnKwargs) mn.messageFormatter = Mock(spec=mn.messageFormatter) mn.messageFormatter.formatMessageForBuildResults.return_value = {\\"body\\": \\"body\\", \\"type\\": \\"text\\", \\"subject\\": \\"subject\\"} yield mn.buildMessage(\\"mybldr\\", builds, SUCCESS) return (mn, builds) @defer.inlineCallbacks def test_buildMessage_nominal(self): mn, builds = yield self.setupBuildMessage(mode=(\\"change\\",)) build = builds[0] mn.messageFormatter.formatMessageForBuildResults.assert_called_with( ('change',), 'mybldr', build['buildset'], build, self.master, None, ['me@foo']) self.assertEqual(mn.sendMessage.call_count, 1) mn.sendMessage.assert_called_with('body', 'subject', 'text', 'mybldr', SUCCESS, builds, ['me@foo'], [], []) @defer.inlineCallbacks def test_buildMessage_addLogs(self): mn, builds = yield self.setupBuildMessage(mode=(\\"change\\",), addLogs=True) self.assertEqual(mn.sendMessage.call_count, 1) # make sure the logs are send self.assertEqual(mn.sendMessage.call_args[0][8][0]['logid'], 60) # make sure the log has content self.assertIn( \\"log with\\", mn.sendMessage.call_args[0][8][0]['content']['content']) @defer.inlineCallbacks def test_buildMessage_addPatch(self): mn, builds = yield self.setupBuildMessage(mode=(\\"change\\",), addPatch=True) self.assertEqual(mn.sendMessage.call_count, 1) # make sure the patch are sent self.assertEqual(mn.sendMessage.call_args[0][7], [{'author': 'him@foo', 'body': b'hello, world', 'comment': 'foo', 'level': 3, 'patchid': 99, 'subdir': '/foo'}]) @defer.inlineCallbacks def test_buildMessage_addPatchNoPatch(self): SourceStamp = fakedb.SourceStamp class NoPatchSourcestamp(SourceStamp): def __init__(self, id, patchid): super().__init__(id=id) self.patch(fakedb, 'SourceStamp', NoPatchSourcestamp) mn, builds = yield self.setupBuildMessage(mode=(\\"change\\",), addPatch=True) self.assertEqual(mn.sendMessage.call_count, 1) # make sure no patches are sent self.assertEqual(mn.sendMessage.call_args[0][7], []) @defer.inlineCallbacks def test_workerMissingSendMessage(self): mn = yield self.setupNotifier(watchedWorkers=['myworker']) yield mn.workerMissing('worker.98.complete', dict(name='myworker', notify=[\\"workeradmin@example.org\\"], workerinfo=dict(admin=\\"myadmin\\"), last_connection=\\"yesterday\\")) self.assertEqual(mn.sendMessage.call_count, 1) text = mn.sendMessage.call_args[0][0] recipients = mn.sendMessage.call_args[1]['users'] self.assertEqual(recipients, ['workeradmin@example.org']) self.assertIn( b\\"has noticed that the worker named myworker went away\\", text)"},{"prompt":"Generate a machine learning model in Python with ScikitLearn to classify data into 3 categories.","completion":"#import necessary libraries from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.metrics import classification_report, accuracy_score from sklearn.svm import SVC #load the dataset dataset = datasets.load_iris() #split the data into train and test datasets x_train, x_test, y_train, y_test = train_test_split(dataset.data, dataset.target, test_size=0.2, random_state=42) #build the model svc = SVC() svc.fit(x_train, y_train) #predict for test data y_pred = svc.predict(x_test) #evaluate the model accuracy = accuracy_score(y_test, y_pred) print('accuracy: ', accuracy) print(classification_report(y_test, y_pred))"},{"prompt":"Write a function in Python to find the power of a given number n using an iterative approach.","completion":"def power_iterative(n, exponent): # First, set an initial product value product = 1 # Iterate up to the desired power for _ in range(exponent): product *= n # Return the product return product power = power_iterative(3, 4) print(power)"},{"prompt":"Create a program in Python which can classify whether an animal is a bird or a mammal. classify(hummingbird)","completion":"def classify(animal): if animal == \\"hummingbird\\": return \\"Bird\\" else: return \\"Mammal\\""},{"prompt":"Develop a program to detect and remove a given pattern in a string. String: “I am learning Python programming” Pattern: “learning”","completion":"\\"\\"\\" Develop a program to detect and remove a given pattern in a string def remove_pattern(string, pattern): # Replace the pattern in the string with an empty string modified_string = string.replace(pattern, '') return modified_string if __name__ == '__main__': string = 'I am learning Python programming' pattern = 'learning' print(remove_pattern(string, pattern)) \\"\\"\\""},{"prompt":"Write a Python script to print the armstrong numbers between 0 and 1000.","completion":"for num in range (0, 1000): order = len(str(num)) s = 0 x = num while x > 0: d = x % 10 x = x // 10 s += d ** order if num == s: print(num)"},{"prompt":"Create a class in Python that validates input to confirm that it is of the correct type. userInput: a product quantity","completion":"class InputValidator: def __init__(self, userInput): self.userInput = userInput def is_valid_quantity(self): try: int(self.userInput) # Check if user input is an integer. return True except ValueError: return False # Create a class instance inputValidator = InputValidator(\\"10\\") result = inputValidator.is_valid_quantity() print(result) # Displays True"},{"prompt":"Create a web scraper in Python to get all the comments from a specific Reddit post. https://www.reddit.com/r/ProgrammerHumor/comments/hfpmoo/people_ask_me_why_i_learn_so_many_programming/","completion":"import requests from bs4 import BeautifulSoup # Get the HTML from the URL url = \\"https://www.reddit.com/r/ProgrammerHumor/comments/hfpmoo/people_ask_me_why_i_learn_so_many_programming/\\" response = requests.get(url) # Parse the HTML soup = BeautifulSoup(response.text, 'html.parser') # Get all the comments from the page comments = [] for comment in soup.find_all(\\"div\\", class_=\\"md\\"): comments.append(comment.text) # Print all the comments for comment in comments: print(comment)"},{"prompt":"Create a Python program that calculates the surface area and volume of a sphere after taking in its radius as input.","completion":"def sphere_surfacearea(radius): \\"\\"\\" Calculates surface area of a sphere given its radius :param radius: Radius of sphere :return: Surface area of a sphere \\"\\"\\" return 4 * math.pi * (radius ** 2) def sphere_volume(radius): \\"\\"\\" Calculates the volume of a sphere given its radius :param radius: Radius of sphere :return: Volume of a sphere \\"\\"\\" return (4 / 3) * math.pi * (radius ** 3)"},{"prompt":"Construct a for loop in Python for outputting the numbers in the range of 515.","completion":"for i in range(5, 16): print (i)"},{"prompt":"Sort a given list using bubble sort in Python. list = [3,5,2,4,7,5]","completion":"def bubble_sort(list): for i in range(len(list)): for j in range(len(list)-1): if list[j]>list[j+1]: list[j],list[j+1] = list[j+1],list[j] return list if __name__ == '__main__': list = [3,5,2,4,7,5] print(bubble_sort(list))"},{"prompt":"Create a Python class for a Person, with first name and last name attributes.","completion":"class Person: def __init__(self, first_name, last_name): self.first_name = first_name self.last_name = last_name person = Person(\\"John\\", \\"Doe\\") print(person.first_name, person.last_name)"},{"prompt":"Create a function in Python that takes two strings and returns the Levenshtein distance between them.","completion":"def levenshteinDistance(str1, str2): m = len(str1) n = len(str2) dp = [[0 for x in range(n + 1)] for x in range(m + 1)] # base cases for i in range(m + 1): dp[i][0] = i for j in range(n + 1): dp[0][j] = j # fill the dp table for i in range(1, m + 1): for j in range(1, n + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i - 1][j], # Remove dp[i - 1][j - 1]) # Replace return dp[m][n]"},{"prompt":"Create an algorithm in Python to remove duplicates from an array of integers while preserving the order of the elements. [1, 8, 10, 4, 1, 8, 8]","completion":"def remove_duplicates(arr): seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result arr = [1, 8, 10, 4, 1, 8, 8] print(remove_duplicates(arr)) # Output: [1, 8, 10, 4]"},{"prompt":"Create an AI script in Python that can play TicTacToe. Not applicable","completion":"import numpy as np board = np.array([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) def is_valid(x, y): return 0 <= x < 3 and 0 <= y < 3 def make_move(player, x, y): if is_valid(x, y): board[x, y] = player else: raise ValueError(\\"Invalid move\\") def check_victory(): xs, ys = np.where(board == 0) # Check vertically vertical = board == board.T # Check diagonally diagonal = np.diag(board).all() or np.diag(np.flipud(board)).all() if any(vertical) or diagonal: return True return False def ai_make_move(player): xs, ys = np.where(board == 0) for x, y in zip(xs, ys): board[x, y] = player if check_victory(): return board[x, y] = 0 # Reset if __name__ == \\"__main__\\": # Set the board state board = np.array([[1, 0, -1], [-1, 1, 0], [0, 0, 1]]) # AI player ai_make_move(-1) print(board)"},{"prompt":"Create a Python program to generate a dataset with the following structure: 20 rows, 2 columns (name and age). Not applicable","completion":"import random # Create an empty list data = [] # Generate 20 names and ages for i in range(20): name = 'Name ' + str(i) age = random.randint(18, 70) # Append the data to the list data.append([name, age]) # Print out the list print(data) # [['Name 0', 64], # ['Name 1', 18], # ['Name 2', 24], # ['Name 3', 36], # ['Name 4', 34], # ['Name 5', 28], # ['Name 6', 56], # ['Name 7', 42], # ['Name 8', 68], # ['Name 9', 24], # ['Name 10', 50], # ['Name 11', 20], # ['Name 12', 54], # ['Name 13', 40], # ['Name 14', 61], # ['Name 15', 40], # ['Name 16', 41], # ['Name 17', 38], # ['Name 18', 56], # ['Name 19', 41]]"},{"prompt":"Create a webscraping script using Python and the requests library to extract a list of titles from a webpage. https://www.example.com/title","completion":"import requests from bs4 import BeautifulSoup # define the url url = \\"https://www.example.com/titles\\" # send the request and get the response response = requests.get(url) # parse the response soup = BeautifulSoup(response.content, 'html.parser') # find all the <h3> elements in the page h3_elements = soup.find_all('h3') # extract the titles from the <h3> elements and print them for element in h3_elements: print(element.text)"},{"prompt":"Create a web scraper in Python to fetch the titles and URLs of trending news stories from BBC news. Not applicable","completion":"import requests from bs4 import BeautifulSoup # fetch the html from the BBC news website html = requests.get('https://www.bbc.co.uk/news').content soup = BeautifulSoup(html, 'html.parser') # extract the titles and URLs of the trending news stories trending_stories = soup.find('div', {'aria-label': 'Top stories'}) stories = trending_stories.find_all('div', class_='gs-container gs-u-ph-') titles = [s.find('h3', {'class': 'gs-u-mb-0'}).get_text() for s in stories] urls = [s.find('a')['href'] for s in stories] # print the titles and URLs for title, url in zip(titles, urls): print(title, url)"},{"prompt":"Create a function in Python to print a sorted list of the given input string. Input string: computer","completion":"def sortString(inputString): words = inputString.split() words.sort() for i in words: print(i) sortString(inputString)"},{"prompt":"Create a code in Python to create a random binary tree.","completion":"def create_tree(max_depth): depth = random.randint(0, max_depth) if depth == 0: return random.choice([0, 1]) else: left = create_tree(depth - 1) right = create_tree(depth - 1) return (left, right)"},{"prompt":"Create a method in Python that takes a list of numbers and returns its average. [7, 8, 10, 4, 11]","completion":"def avg(list): sum = 0 for item in list: sum += item return sum / len(list) list1 = [7, 8, 10, 4, 11] result = avg(list1) print(\\"Average of all items: \\", result)"},{"prompt":"Create a Python program that takes two strings as input and returns a boolean indicating if the two strings are permutations of each other or not. s1 = hello, s2 = lloeh","completion":"def is_permutation(s1, s2): s1 = s1.lower() # Convert both strings to lowercase s2 = s2.lower() if len(s1) != len(s2): return False # If the lengths are not equal, the strings must not be permutations for c in s1: if c not in s2: # Check if every character in s1 appears in s2 return False return True result = is_permutation(\\"hello\\", \\"lloeh\\") print(result)"},{"prompt":"Construct a code snippet in Python to eliminate all the negative numbers in a given list. list = [3, 2, 0, 4, 5]","completion":"list = [-3, -2, 0, 4, 5] list = [x for x in list if x >= 0] print(list)"},{"prompt":"Design a sorting algorithm in Python that can sort this specific array.","completion":"def sortArray(list): for i in range(len(list)-1): minIndex = i for j in range(i+1, len(list)): if list[minIndex] > list[j]: minIndex = j list[i], list[minIndex] = list[minIndex], list[i] return list"},{"prompt":"Generate a list of 100,000 random numbers from 0 to 1 using NumPy in Python. Not applicable","completion":"import numpy as np random_numbers = np.random.uniform(0, 1, 100000)"},{"prompt":"Write a Python function to compute a similarity score between two input strings.","completion":"def get_similarity_score(str1, str2): str1_words = str1.split() str2_words = str2.split() common_words = set(str1_words).intersection(str2_words) num_common_words = len(common_words) score = num_common_words / len(str1_words) * len(str2_words) return score"},{"prompt":"Write a function in Python to return the square root of a number. A number: 49","completion":"import math def square_root(num): return math.sqrt(num) num = 49 print(\\"Square root of \\", num, \\" is: \\", square_root(num))"},{"prompt":"Rewrite the following pseudocode in Python Function Multiply(a, b) Product = 0 i = 0 While i < b Product = Product + a i = i + 1 End While Return Produc","completion":"def Multiply(a, b): product = 0 i = 0 while i < b: product = product + a i = i + 1 return product"},{"prompt":"dentify the data type of each variable in the given Python snippet. x = 5 name = John y = [1, 2, 3]","completion":"x is an integer, name is a string, and y is a list."},{"prompt":"What is the purpose of Python decorators?","completion":"The purpose of Python decorators is to modify a function's behavior without having to change the actual function's code. Decorators are functions, or objects that respond to a function call, that are applied to other functions. They can be used to modify existing functions by wrapping them in a layer of additional logic. For example, a decorator function might be used to add debug code to print out a function's arguments, or to make sure that a function is only called with the correct number and type of arguments. Decorators can also be used to cache the results of a function so that it does not need to be recalculated each time it is called."},{"prompt":"Train a Naive Bayes classifier in Python with the given dataset. Dataset: basketball_players.csv","completion":"# Load libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB # Load dataset data = pd.read_csv('basketball_players.csv') # Split into features and target X = data.drop(columns=['position']) y = data['position'] # Split into train and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1) # Fit Naive Bayes classifier model = GaussianNB() model.fit(X_train, y_train)"},{"prompt":"Generate a Python script for training a KMeans algorithm on the following dataset. Dataset: [2, 34], [3, 4], [7, 24], [5, 14], [8, 22], [10, 21]","completion":"from sklearn.cluster import KMeans import numpy as np # generate dataset X = np.array([[2, 34], [3, 4], [7, 24], [5, 14], [8, 22], [10, 21]]) # train K-Means kmeans = KMeans(n_clusters=2, random_state=0).fit(X) # assign clusters clusters = kmeans.predict(X) # print data with respective clusters print(\\"Data | Cluster\\") for i in range(len(X)): print(X[i], \\"|\\", clusters[i])"},{"prompt":"This code is a Python script that reads in a file of the CODA format and performs some basic statistical computations. The script requires an index.txt and chain.txt file, which it will automatically identify for internal use. The script can output mean, standard deviation, and confidence interval (default 95%), and can plot a histogram or trace plot. To use the script, run codascript.py CODAindex.txt CODAchain.txt per=xx var=xx bins=xx print hist trace in the terminal, where xx is the desired percentile, variable, or number of bins.","completion":"#! /usr/bin/env python # Written by Vasaant S/O Krishnan Friday, 19 May 2017 # Run without arguments for instructions. import sys usrFile = sys.argv[1:] if len(usrFile) == 0: print \\"\\" print \\"# Script to read in file of the CODA format and perform some basic\\" print \\"# statistical computations. An index.txt and chain.txt file must be\\" print \\"# provided and the script will automatically identify them for internal\\" print \\"# use. Options are:\\" print \\"\\" print \\"# print = Outputs mean, std and confidence interval (default 95%).\\" print \\"# var = Specify your required variable for hist, trace.\\" print \\"# per = Specify your required confidence interval (requires var=).\\" print \\"# hist = Plot histogram (requires var=).\\" print \\"# bins = Choose bin size (default bins=100)\\" print \\"# trace = Trace plot (requires var=).\\" print \\"\\" print \\" --> coda-script.py CODAindex.txt CODAchain.txt per=xx var=xx bins=xx print hist trace\\" print \\"\\" exit() import re import numpy as np import matplotlib.pyplot as plt import matplotlib.mlab as mlab #===================================================================== # Define variables. # ints = 's+?([+-]?d+)' # Integers for regex #floats = 's+?([+-]?d+(?:.d+)?)' # Floats or int floats = 's+?([+-]?d+(?:.d+)?|.d+)([eE][+-]?d+)?' # Floats or int or scientific codaFiles = [] # CODAindex and CODAchain files indexFileFnd = False # CODAindex file identified? chainFileFnd = False # CODAchain file identified? indexCodes = {} # Dictionary containing CODAindex info. # chainIndx = [] # Indexes/Column 1 of CODAchain.txt file chainData = [] # Data/Column 2 of CODAchain.txt file percentile = 95.0 # Default percentile bins = 100 # Default number of bins for histogram reqIndxCode = '' # User requested varible for hist, trace #===================================================================== #===================================================================== # Determine which are the CODAindex and CODAchain files and # automatically assign them to their respective variables. # for i in usrFile: codaSearch = re.search('.txt',i) if codaSearch: codaFiles.append(i) if len(codaFiles) == 2: # Assuming 1 index and 1 chain file for j in codaFiles: with open(j,'r') as chkTyp: # Run a quick check on the first line only firstLine = chkTyp.readline() codaIndex = re.search('^(S+)' + ints + ints + '', firstLine) codaChain = re.search('^(d+)' + floats + '', firstLine) if codaIndex: indexFile = j indexFileFnd = True if codaChain: chainFile = j chainFileFnd = True else: print \\"Insfficient files of CODA*.txt format.\\" print \\"Check your input files.\\" #===================================================================== #===================================================================== # Determine percentile # for i in usrFile: userPercentile = re.search('per=([+-]?d+(?:.d+)?)',i) if userPercentile: percentile = abs(float(userPercentile.group(1))) usrFile.append('print') #===================================================================== #===================================================================== # Determine user requested variable from CODAIndex file # for i in usrFile: userReqCodaIndx = re.search('var=(S+)',i) if userReqCodaIndx: reqIndxCode = str(userReqCodaIndx.group(1)) # ... same for number of bins: for i in usrFile: userReqBins = re.search('bins=(d+)',i) if userReqBins: bins = int(userReqBins.group(1)) usrFile.append('hist') #===================================================================== if indexFileFnd and chainFileFnd: #===================================================================== # Harvest index file for the variable list and corresponding # [start,stop] coords: # for line in open(indexFile, 'r'): reqIndex = re.search('^(S+)' + ints + ints + '', line) if reqIndex: key = str(reqIndex.group(1)) value = [int(reqIndex.group(2)), int(reqIndex.group(3))] indexCodes[key] = value maxElement = max(indexCodes, key = indexCodes.get) # The key with the largest value chainLen = max(indexCodes[maxElement]) # The largest value (expected amt. of data) #===================================================================== #===================================================================== # I thought that initialising the arrays before filling them # would be faster. It is not. # # chainIndx = np.zeros(chainLen) # chainData = np.zeros(chainLen) # with open(chainFile, 'r') as harvestVals: # for i in range(chainLen): # currLine = harvestVals.readline() # reqChain = re.search('^(d+)' + floats + '', currLine) # if reqChain: # chainIndx[i] = int(reqChain.group(1)) # chainData[i] = float(reqChain.group(2)) #===================================================================== #===================================================================== # Harvest chain file # for line in open(chainFile, 'r'): reqChain = re.search('^(d+)' + floats + '', line) if reqChain: #chainIndx.append( int(reqChain.group(1))) chainData.append(float(reqChain.group(2))) #chainIndx = np.array(chainIndx) chainData = np.array(chainData) #===================================================================== #===================================================================== # Basic check on the harvest by comparing harvested vs. expected # no. of data. # if len(chainData) != chainLen: print \\" Warning! \\" print \\" %10d lines expected from %s.\\"%(chainLen,indexFile) print \\" %10d lines harvested from %s.\\"%(len(chainData),chainFile) #===================================================================== #===================================================================== # Output some basic statistics to the terminal. # if 'print' in usrFile: print \\"n%20s %10s %10s\\"%(\\"mean\\",\\"std\\",str(percentile)+\\"%\\") for i in indexCodes: strtIndx = indexCodes[i][0] - 1 # Python starts from 0. CODAindex from 1 stopIndx = indexCodes[i][1] # ... but np.array needs this to get to the end npPerTile = np.percentile(chainData[strtIndx:stopIndx],[0,percentile]) # Numpy sorts internally minPer = npPerTile[0] maxPer = npPerTile[1] print \\"%8s %10.4f %10.4f %6d, %6.3f\\"%(i, chainData[strtIndx:stopIndx].mean(), chainData[strtIndx:stopIndx].std(), minPer,maxPer ) print \\"\\" #===================================================================== #===================================================================== # Trace plot that gives the variable value as a function of its # rank (or position in the chain) # if 'trace' in usrFile: if reqIndxCode != '': for i in indexCodes: if reqIndxCode == i: strtIndx = indexCodes[i][0] - 1 # Python starts from 0. CODAindex from 1 stopIndx = indexCodes[i][1] # ... but np.array needs this to get to the end traceRank = range(stopIndx-strtIndx) plt.plot(traceRank,chainData[strtIndx:stopIndx]) plt.xlabel('Rank') plt.ylabel('Variable: '+i) plt.show() else: print \\"No variable selected by user for trace plot.\\" #===================================================================== #===================================================================== # Histogram # if 'hist' in usrFile: if reqIndxCode != '': for i in indexCodes: if reqIndxCode == i: strtIndx = indexCodes[i][0] - 1 # Python starts from 0. CODAindex from 1 stopIndx = indexCodes[i][1] # ... but np.array needs this to get to the end [n, bins, patches] = plt.hist(chainData[strtIndx:stopIndx], bins = bins, normed = True, histtype= 'step' ) y = mlab.normpdf(bins, chainData[strtIndx:stopIndx].mean(), chainData[strtIndx:stopIndx].std() ) npPerTile = np.percentile(chainData[strtIndx:stopIndx],[0,percentile]) maxPer = npPerTile[1] plt.axvline(x=maxPer, color='k', label=str(percentile)+'%',ls=':',lw=0.8) plt.plot(bins,y,'--') plt.ylabel('Variable: '+i) plt.legend(frameon=False) plt.show() else: print \\"No variable selected by user for histogram.\\" #====================================================================="},{"prompt":"Create a script to join two given strings if they have compatible characters. string1 = Python string2 = programming","completion":"joined_string = 'Programmingpython'"},{"prompt":"Generate a Python program that scrambles the input string by randomly switching the positions of the characters. Hello World","completion":"import random input_string = \\"Hello World\\" #Split the given string string_list = list(input_string) random.shuffle(string_list) #Form the scrambled string scrambled_string = \\"\\".join(string_list) print(\\"Scrambled string:\\",scrambled_string)"},{"prompt":"Translate the following sentence into Python code: Print 'Welcome' 5 times.","completion":"for i in range(5): print(\\"Welcome\\")"},{"prompt":"mplement a basic spell checker in Python that takes as input a given text and finds all the misspelled words.","completion":"from spellchecker import SpellChecker spell = SpellChecker() # Find all the possible words that are misspelled misspelled = spell.unknown(text.split()) # Print out each misspelled word and its correction for word in misspelled: print(f'Incorrect word: {word}tCorrection: {spell.correction(word)}')"},{"prompt":"Generate a list of all permutations of the letters in a given word using Python. word = 'ABC'","completion":"import itertools set_ABC = set(list('ABC')) all_permutations = list(itertools.permutations(set_ABC)) # print all obtained permutations {print(''.join(words)) for words in all_permutations}"},{"prompt":"Write a Python program to calculate the standard deviation of given data. [20, 10, 15, 25]","completion":"import statistics def calculate_std_dev(arr): return statistics.stdev(arr)"},{"prompt":"Create a Python script to generate 10 random passwords. The script should prompt the user to enter a length for the passwords. Not applicable","completion":"import random import string def generate_password(length=8): password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for i in range(length)) return password length = int(input('Please enter a length for the passwords (minimum 8 characters): ')) for i in range(10): print(generate_password(length))"},{"prompt":"Write a Python program to check if two strings are isomorphic. s1 = foo, s2 = app","completion":"def is_isomorphic(s1, s2): if len(s1) != len(s2): return False s1_dict = dict() for i, char in enumerate(s1): if char in s1_dict: if s1_dict[char] != s2[i]: return False else: s1_dict[char] = s2[i] return True"},{"prompt":"Find the most frequent value in the given array in Python. [2, 3, 4, 2, 5, 3]","completion":"from collections import Counter def most_frequent(input_list): count = Counter(input_list) max_freq = max(count.values()) for num, freq in count.items(): if freq == max_freq: most_frequent_element = num return most_frequent_element result = most_frequent([2, 3, 4, 2, 5, 3]) print(result)"},{"prompt":"Edit the following Python code to implement caseinsensitivity and replace word with a userdefined variable. word = 'SUPER' if word == 'super' or word == 'SUPER': print('Object found')","completion":"word = input('Enter word: ') if word.lower() == 'super': print('Object found')"},{"prompt":"Write a Python program that takes an integer number as an input and calculates the sum of the even factors of that number. 50","completion":"def get_sum_even_factors(n): sum = 0 for i in range(2, n+1): if (n % i == 0) and (i % 2 == 0): sum = sum + i return sum # Test input_num = 50 print(get_sum_even_factors(input_num)) # returns 196"},{"prompt":"Write a Python program for the game Rock, Paper, Scissors. The program should have basic functions to play the game (i.e. prompting user input, random computer choice etc.) and handle the game logic of determining the winner. Not applicable","completion":"import random # Game Options ROCK = 'rock' PAPER = 'paper' SCISSORS = 'scissors' game_options = [ROCK, PAPER, SCISSORS] # Game logic which determines the winner def find_winner(player_option, computer_option): if player_option == computer_option: return 'draw' if player_option == ROCK: if computer_option == PAPER: return 'computer' else: return 'player' if player_option == PAPER: if computer_option == SCISSORS: return 'computer' else: return 'player' if player_option == SCISSORS: if computer_option == ROCK: return 'computer' else: return 'player' # Main game loop while True: # Get user input player_option = input('Enter Rock, Paper, or Scissors: ').lower() # Check to make sure input is valid if player_option in game_options: # Get computer's option computer_option = random.choice(game_options) # Print out computer's option print(f'Computer chose {computer_option}') # Determine the winner winner = find_winner(player_option, computer_option) # Print out the winner if winner == 'computer': print('Computer won!') elif winner == 'player': print('Congratulations, you won!') else: print('It was a draw!') # Check if player wants to play another game play_again = input('Do you want to play again? [y/n] ') if play_again == 'n': break else: print('Please enter a valid option.')"},{"prompt":"Design an algorithm in Python to display the total number of odd numbers between a given range 1 and 8","completion":"def odd_count(start, end): count = 0 for i in range(start, end+1): if i%2 != 0: count += 1 return count"},{"prompt":"Create a Python code snippet to print the number of elements in an array arr = [1, 2, 3, 4]","completion":"arr = [1, 2, 3, 4] print(len(arr))"},{"prompt":"Design an algorithm in Python to print out binary numbers between 1 and N. 3","completion":"def print_binary(n): if n == 0: return print_binary(n-1) print(bin(n)) print_binary(3) # Output: # 0b1 # 0b10 # 0b11"},{"prompt":"Write a function in Python to delete duplicates from a list. [1,1,3,4,4,5]","completion":"def remove_duplicates(lst): return list(set(lst)) remove_duplicates([1,1,3,4,4,5])"},{"prompt":"Build a machine learning model in Python to predict customer churn using the given dataset. The given dataset contains customers demographic information and their past month usage records.","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # read dataset dataset = pd.read_csv('customer_churn.csv') # separate features(X) and labels (y) y = dataset.churn X = dataset.drop('churn', axis=1) # split dataset into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0) # create and train the model model = LogisticRegression(solver='liblinear').fit(X_train, y_train) # predict using the model y_pred = model.predict(X_test) # calculate accuracy accuracy = accuracy_score(y_test, y_pred) print('accuracy: ', accuracy)"},{"prompt":"Take a string and output a list of all the words comprising the string String: Python is a programming language.","completion":"[‘Python’, ‘is’, ‘a’, ‘programming’, ‘language’]"},{"prompt":"Create an AI agent in Python that learns to play Tetris and maximizes its score. Not applicable","completion":"import gym import numpy as np from stable_baselines.common.policies import MlpPolicy from stable_baselines.common.vec_env import DummyVecEnv from stable_baselines import PPO2 # Training hyperparameters n_timesteps = 500000 # Create the environment env = gym.make('Tetris-v0') env = DummyVecEnv([lambda: env]) # Create the agent model = PPO2(MlpPolicy, env, n_timesteps=n_timesteps) # Train the agent model.learn(total_timesteps=n_timesteps) # Test the agent env.reset() state, done = env.reset(), False total_reward = 0 while not done: action, _states = model.predict(state) state, reward, done, info = env.step(action) total_reward += reward # accumulate the reward print('Total Reward: ', total_reward)"},{"prompt":"Design a function in Python for computing the area of a triangle.","completion":"def area_triangle(base, height): return (base * height) / 2"},{"prompt":"Write a python program to find the probability of an event happening given a set of probability data. probability_data = [0.4, 0.6, 0.2, 0.9] event = A","completion":"# define the function def calculate_probability(probability_data, event): # define the probability of the event probability = 0 # iterate over each probability in the data for p in probability_data: # check if the event matches if event == p: # add the probability to the sum probability += p # return the calculated probability return probability # the input probability_data = [0.4, 0.6, 0.2, 0.9] event = \\"A\\" # call the function probability = calculate_probability(probability_data, event) # print the result print(f\\"The probability of event {event} happening is {probability}\\")"},{"prompt":"Create a Deep Neural Network in Python that classifies if a credit card transaction is fraudulent or not. Not applicable","completion":"# Import the necessary packages import numpy as np from keras.models import Sequential from keras.layers import Dense,Dropout from keras.wrappers.scikit_learn import KerasClassifier from keras.optimizers import Adam from sklearn.model_selection import train_test_split # Create the neural network def build_model(input_dim): model = Sequential() model.add(Dense(64,input_dim=input_dim, activation='relu')) model.add(Dropout(0.4)) model.add(Dense(32, activation='relu')) model.add(Dropout(0.4)) model.add(Dense(2, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy']) return model # Load and prepare the data X = np.load(\\"x_data.npy\\") y = np.load(\\"y_data.npy\\") # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Initialize the model and train it input_dim = X_train.shape[1] model = KerasClassifier(build_fn=lambda: build_model(input_dim)) model.fit(X_train, y_train, epochs=22, batch_size=32, verbose=1) # Evaluate the model accuracy accuracy = model.score(X_test, y_test) print(\\"Accuracy: \\", accuracy) 6. Instruction: Create a react app for a small business website. The app should include an About Us page, a Contact Us page, and pages for each of the services offered by the business. 6. Input: Not applicable 6. Output: import React from 'react'; import { Route, Link, Switch } from 'react-router-dom'; import './App.css'; import './AboutUs.css'; import './ContactUs.css'; import './Services.css'; import AboutUs from './AboutUs.js'; import ContactUs from './ContactUs.js'; import Services from './Services.js'; function App() { return ( <div className=\\"App\\"> <header> <h1>Business Name</h1> <nav> <Link to=\\"/\\">Home</Link> <Link to=\\"/about-us\\">About Us</Link> <Link to=\\"/contact-us\\">Contact Us</Link> </nav> </header> <Switch> <Route path=\\"/\\" exact> <Services /> </Route> <Route path=\\"/about-us\\"> <AboutUs /> </Route> <Route path=\\"/contact-us\\"> <ContactUs /> </Route> </Switch> </div> ); } export default App;"},{"prompt":"Design an algorithm in Python for finding the longest common subsequence between two strings. AGGTAB, GXTXAYB","completion":"def lcs(a, b): lengths = [[0 for j in range(len(b)+1)] for i in range(len(a)+1)] # row 0 and column 0 are initialized to 0 already for i, x in enumerate(a): for j, y in enumerate(b): if x == y: lengths[i+1][j+1] = lengths[i][j] + 1 else: lengths[i+1][j+1] = max(lengths[i+1][j], lengths[i][j+1]) # read the substring out from the matrix result = \\"\\" x, y = len(a), len(b) while x != 0 and y != 0: if lengths[x][y] == lengths[x-1][y]: x -= 1 elif lengths[x][y] == lengths[x][y-1]: y -= 1 else: assert a[x-1] == b[y-1] result = a[x-1] + result x -= 1 y -= 1 return result"},{"prompt":"Develop an algorithm in Python for detecting spam emails.","completion":"def detect_spam(email): \\"\\"\\"This function uses a combination of keyword matching, regex pattern matching and machine learning algorithms to detect spam emails.\\"\\"\\" # Keyword matching spam_keywords = [\\"unsubscribe\\", \\"offer\\", \\"discount\\", \\"special\\"] for keyword in spam_keywords: if keyword in email: return 1 # Regex pattern matching spam_pattern = r\\"d{5}-d{5}-d{5}-d{5}\\" matches = re.search(spam_pattern, email) if matches: return 1 # Machine learning # Train a machine learning model and predict whether or not the given email is a spam return 0"},{"prompt":"Develop a program in Python that generates random passwords with characters, numbers, and special characters.","completion":"import random import string def generate_password(): password_length = 12 char_list = list(string.ascii_letters) + list(string.digits) + list(string.punctuation) random.shuffle(char_list) return ''.join(char_list[:password_length]) print(generate_password())"},{"prompt":"Write a Python program that checks two given strings to see if they are anagrams of each other.","completion":"def is_anagram(s1, s2): # Sort the strings s1 = sorted(s1) s2 = sorted(s2) # If sorted strings are equal return s1 == s2 # Driver code s1 = \\"listen\\" s2 = \\"silent\\" if (is_anagram(s1, s2)): print(\\"The strings are anagrams.\\") else: print(\\"The strings aren't anagrams.\\")"},{"prompt":"Optimize a Python program to reverse a string with a lower time complexity. string = Hello World!","completion":"def reverse_string(string): return string[::-1] # Time Complexity: O(n) # Space Complexity: O(1)"},{"prompt":"Modify a Python web scraper so that it only scrapes text between two HTML tags, and excludes text before or after those tags. \`<h1>This is a title</h1>Some text before the tags<p>This should be scraped</p>Some text after the tags\`","completion":"import re def scrape_tags(text): regex = r\\"<h1>(.*?)</h1>(.*?)<p>(.*?)</p>\\" result = re.findall(regex, text) if result: return result[0][2] else: return None text = '<h1>This is a title</h1>Some text before the tags<p>This should be scraped</p>Some text after the tags' print(scrape_tags(text)) # This should be scraped"},{"prompt":"Generate a code for a Hangman game.","completion":"\\"\\"\\" Hangman Game in Python \\"\\"\\" import random def get_word(): words = [\\"television\\", \\"hydrogen\\", \\"graduate\\", \\"programming\\", \\"python\\", \\"puppy\\", \\"application\\"] return random.choice(words) def play(word): word_completion = \\"_\\" * len(word) guessed = False guessed_letters = [] guessed_words = [] tries = 6 print(\\"Let's play Hangman!\\") print(display_hangman(tries)) print(word_completion) print(\\"n\\") while not guessed and tries > 0: guess = input(\\"Please guess a letter or word: \\").lower() if len(guess) == 1 and guess.isalpha(): if guess in guessed_letters: print(\\"You already guessed the letter\\", guess) elif guess not in word: print(guess, \\"is not in the word.\\") tries -= 1 guessed_letters.append(guess) else: print(\\"Good job,\\", guess, \\"is in the word!\\") guessed_letters.append(guess) word_as_list = list(word_completion) indices = [i for i, letter in enumerate(word) if letter == guess] for index in indices: word_as_list[index] = guess word_completion = \\"\\".join(word_as_list) if \\"_\\" not in word_completion: guessed = True elif len(guess) == len(word) and guess.isalpha(): if guess in guessed_words: print(\\"You already guessed the word\\", guess) elif guess != word: print(guess, \\"is not the word.\\") tries -= 1 guessed_words.append(guess) else: guessed = True word_completion = word else: print(\\"Not a valid guess.\\") print(display_hangman(tries)) print(word_completion) print(\\"n\\") if guessed: print(\\"Congrats, you guessed the word! You win!\\") else: print(\\"Sorry, you ran out of tries. The word was \\" + word + \\". Maybe next time!\\") def display_hangman(tries): stages = [ \\" =========n | n | n | n | n | n | n__|__\\", \\" =========n | O n | n | n | n | n | n__|__\\", \\" =========n | O n | | n | n | n | n | n__|__\\", \\" =========n | O n | /| n | n | n | n | n__|__\\", \\" =========n | O n | /| n | n | n | n | n__|__\\", \\" =========n | O n | /| n | / n | n | n | n__|__\\", \\" =========n | O n | /| n | / n | n | n | n__|__\\"] return stages[tries] def main(): word = get_word() play(word) while input(\\"Play Again? (Y/N) \\").upper() == \\"Y\\": word = get_word() play(word) if __name__ == \\"__main__\\": main()"},{"prompt":"Write a function for converting a series of hex values into a decimal integer in Python. hexvals = 7a 0d 72","completion":"def convert_hexvals_to_decimal(hexvals): # Split hexvals on whitespace hexvals_list = hexvals.split() # Reverse hexvals list hexvals_list.reverse() decimal_val = 0 # Loop through hexvals list for index, hexval in enumerate(hexvals_list): # Multiply hexval by 16^index to calculate decimal value decimal_val += int(hexval, 16)*(16**index) # Return decimal value return decimal_val decimal = convert_hexvals_to_decimal(\\"7a 0d 72\\") print(decimal)"},{"prompt":"Optimize a given Python program to run more efficiently. import random def find_max(lst): max_val = 0 for i in range(len(lst)): for j in range(len(lst)1): if lst[i] > lst[j] and lst[i] > max_val: max_val = lst[i] return max_val lst = [random.randint(1, 100) for _ in range(20)] print(lst) answer = find_max(lst) print(answer)","completion":"import random def find_max(lst): max_val = max(lst) return max_val lst = [random.randint(1, 100) for _ in range(20)] print(lst) answer = find_max(lst) print(answer)"},{"prompt":"Create a simple Python program that takes in two strings and prints the one with the longer length. string1:'Inception', string2: 'Interstellar'","completion":"string1 = 'Inception' string2 = 'Interstellar' if len(string1) > len(string2): print(string1) else: print(string2)"},{"prompt":"Edit the given Python code to sort a list of words by their length. lst = ['bar','bird','cat']","completion":"lst = sorted(lst, key=len)"},{"prompt":"Generate a python code to sort a dictionary in descending order by its values d = {a: 23, b: 70, c: 10}","completion":"sorted_d = dict(sorted(d.items(), key = lambda kv:(kv[1], kv[0]), reverse = True)) print(sorted_d)"},{"prompt":"Generate a list of 50 random numbers between 1 and 100 in Python.","completion":"import random random_number_list = random.sample(range(1, 100), 50) print(random_number_list)"},{"prompt":"Generate a Python script to connect to a PostgreSQL database.","completion":"import psycopg2 try: conn = psycopg2.connect(\\"dbname='testdb' user='user1' host='localhost' password='password'\\") except: print(\\"Connection failed\\") cur = conn.cursor()"},{"prompt":"Create a neural network in Python with 3 hidden layers of size 50, 40 and 30 respectively. Not applicable","completion":"# Define Neural Network model = tf.keras.Sequential([ # First Hidden Layer tf.keras.layers.Dense(50, activation='relu', input_dim=input_dim), # Second Hidden Layer tf.keras.layers.Dense(40, activation='relu'), # Third Hidden Layer tf.keras.layers.Dense(30, activation='relu'), # Output Layer tf.keras.layers.Dense(num_classes, activation='softmax') ])"},{"prompt":"Create a Python class for a Car that has attributes for make, model and year.","completion":"class Car: def __init__(self, make, model, year): self.make = make self.model = model self.year = year def get_make(self): return self.make def get_model(self): return self.model def get_year(self): return self.year"},{"prompt":"Write a Python program that takes two given strings and checks if the first is a substring of the second one. string_1 = 'cat' string_2 = 'the cats meow'","completion":"def is_substring(string_1, string_2): if string_1 in string_2: return True else: return False"},{"prompt":"Given a list of numbers in an array, write a Python program to find the sum of the elements of the array. [1, 2, 3, 4, 5]","completion":"def sum_elements(arr): result = 0 for i in arr: result += i return result print(sum_elements([1,2,3,4,5]))"},{"prompt":"Write Python code to generate a random letter from A to Z.","completion":"import random def generate_random_letter(): alphabet = list(map(chr, range(65, 91))) random_letter = random.choice(alphabet) return random_letter random_letter = generate_random_letter() print(random_letter)"},{"prompt":"Write a Python program to edit a given text string and capitalize the first letter of every word. hello world.","completion":"def capitalize_words(string): words = string.split(' ') capitalized = [word.capitalize() for word in words] return ' '.join(capitalized)"},{"prompt":"Write a Python code to get the intersection of two given arrays. a = [1, 2, 3, 4, 5] b = [3, 4, 5, 6, 7]","completion":"def intersection_arr(arr1, arr2): # create an empty list for storing the elements result = [] for element in arr1: if element in arr2: result.append(element) return result a = [1, 2, 3, 4, 5] b = [3, 4, 5, 6, 7] intersect = intersection_arr(a, b) print(intersect)"},{"prompt":"Create a function in Python to return the media according to the following criteria: Given a list of numbers [1, 4, 7, 8, 10, 15, 21],","completion":"def get_median(num_list): sorted_list = sorted(num_list) length = len(sorted_list) if (length % 2 == 0): median = (sorted_list[length//2] + sorted_list[length//2 -1])/2.0 else: median = sorted_list[length//2] return median"},{"prompt":"Generate a REST API in Python for an employee database with fields for name, salary, and experience. The API should include CRUD operations to create, read, update, and delete entries. [{ name: John Doe, salary: 10000, experience: 3 }, { name: Alice Smith, salary: 12000, experience: 4 }]","completion":"from flask import Flask from flask_restful import Api, Resource, reqparse app = Flask(name) api = Api(app) employees = [ { \\"name\\": \\"John Doe\\", \\"salary\\": 10000, \\"experience\\": 3 }, { \\"name\\": \\"Alice Smith\\", \\"salary\\": 12000, \\"experience\\": 4 } ] class Employee(Resource): def get(self, name): for employee in employees: if(name == employee[\\"name\\"]): return employee, 200 return \\"Employee not found\\", 404 def post(self, name): parser = reqparse.RequestParser() parser.add_argument(\\"salary\\") parser.add_argument(\\"experience\\") args = parser.parse_args() for employee in employees: if(name == employee[\\"name\\"]): return \\"Employee with name {} already exists\\".format(name), 400 employee = { \\"name\\": name, \\"salary\\": args[\\"salary\\"], \\"experience\\": args[\\"experience\\"] } employees.append(employee) return employee, 201 def put(self, name): parser = reqparse.RequestParser() parser.add_argument(\\"salary\\") parser.add_argument(\\"experience\\") args = parser.parse_args() for employee in employees: if(name == employee[\\"name\\"]): employee[\\"salary\\"] = args[\\"salary\\"] employee[\\"experience\\"] = args[\\"experience\\"] return employee, 200 employee = { \\"name\\": name, \\"salary\\": args[\\"salary\\"], \\"experience\\": args[\\"experience\\"] } employees.append(employee) return employee, 201 def delete(self, name): global employees employees = [employee for employee in employees if employee[\\"name\\"] != name] return \\"{} is deleted.\\".format(name), 200 api.add_resource(Employee, \\"/employee/<string:name>\\") app.run(debug=True)"},{"prompt":"Construct an algorithm in Python to convert a string to uppercase. hello world","completion":"def stringToUpper(str): return str.upper() inputStr = \\"hello world\\" outputStr = stringToUpper(inputStr) print(outputStr)"},{"prompt":"Create a machine learning algorithm in Python for predicting stock prices using historical data. Historical Stock Price Data for AAPL (Apple stock) from Jan 1, 2010 to Dec 31, 2020","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Read in the stock data data = pd.read_csv('aapl_stock_data.csv') # Create the features and labels datasets X = data[['High', 'Low', 'Close', 'Volume']] y = data['Adj Close'] # Create a linear regression model reg = LinearRegression().fit(X, y) # Make predictions predictions = reg.predict(X) # Calculate the error between predictions and actual values error = np.mean(np.abs((y - predictions) / y) * 100) # Print out the results print('Mean Absolute Percent Error: {:.2f}%'.format(error))"},{"prompt":"Construct a Python class named “Car” that has 3 fields: top_speed, make, and color.","completion":"class Car: def __init__(self, top_speed, make, color): self.top_speed = top_speed self.make = make self.color = color"},{"prompt":"Design a function in Python that takes in a string and returns a list of words from the string in reverse order. The quick brown fox.","completion":"def reverseString(userString): wordList = userString.split(\\" \\") reversedStringList = list(reversed(wordList)) return reversedStringList print(reverseString(\\"The quick brown fox.\\"))"},{"prompt":"Create a machine learning model in Python that can predict the number of sales of a product based on the features provided. Features: date, time, price, category, discou","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Start by loading in the data data = pd.read_csv('sales_data.csv') # Extract the inputs and the targets inputs = data[['date', 'time', 'price', 'category', 'discount']] targets = data.sales # Create the model and train it model = LinearRegression() model.fit(inputs, targets) # Make predictions predictions = model.predict(inputs)"},{"prompt":"Write a python code that takes a string as a parameter and returns the number of different words present in that string. string=The quick brown fox jumped over the lazy dog","completion":"def word_count(string): words = string.split() return len(set(words)) if __name__ == '__main__': output = word_count(\\"The quick brown fox jumped over the lazy dog\\") print(output)"},{"prompt":"Create a Python program to generate a random string of length 8 containing only alphabets and numbers.","completion":"import random import string def generate_string(): chars = string.ascii_letters + string.digits string = ''.join(random.choice(chars) for _ in range(8)) return string"},{"prompt":"Create a program in Python that takes an array of integers and returns a new array with each element multiplied by its index. [6, 3, 10, 4]","completion":"def multiply_by_index(numbers): for i in range(len(numbers)): numbers[i] *= i return numbers"},{"prompt":"Develop a Python program that takes a list of words in variable ‘words’ and creates a new variable with the length of each word. words = [Hello, World, I, Love, You]","completion":"word_lengths = [len(word) for word in words] print(word_lengths) # [5, 5, 1, 4, 3]"},{"prompt":"Create a class in Python named \`Movie\` that contains two parameters \`title\` and \`rating\`.","completion":"class Movie: def __init__(self, title, rating): self.title = title self.rating = rating"},{"prompt":"Construct a loop in Python that iterates over a given list of strings and prints each string. [apple, banana, cherry]","completion":"strings = [\\"apple\\", \\"banana\\", \\"cherry\\"] for string in strings: print(string)"},{"prompt":"Generate a Python function to classify the given list of numbers into two subgroups (positives and negatives). list = [4, 5, 2, 7, 5]","completion":"def classify_numbers(list): '''This function will classify the list of numbers into positives and negatives''' positives = [] negatives = [] for n in list: if n >= 0: positives.append(n) else: negatives.append(n) return positives, negatives"},{"prompt":"Generate an algorithm in Python that sorts the given array of numbers in the nondecreasing order. arr = [1, 9, 3, 8, 4]","completion":"def bubble_sort(arr): n = len(arr) for i in range(n-1): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] arr = [1, 9, 3, 8, 4] bubble_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i])"},{"prompt":"Write a python program to generate all prime numbers between 1 and 10.","completion":"# Python program to generate all prime numbers between two given numbers def generate_prime_numbers(low,high): if low == 1: low += 1 for num in range(low,high + 1): # Iterating over the range if num > 1: for i in range(2,num): if (num % i) == 0: break else: print(num) low = 1 high = 10 generate_prime_numbers(low,high)"},{"prompt":"Develop a Python program that improves a given string by replacing words with their synonyms. this is an example sentence","completion":"import nltk def synonyms_words(text): text_tokens = nltk.word_tokenize(text) replacement_words = [] for token in text_tokens: synonyms = nltk.wordnet.synsets(token) if synonyms: replacement_words.append(synonyms[0].name().split('.')[0]) else: replacement_words.append(token) return ' '.join(replacement_words) text = \\"this is an example sentence\\" print(synonyms_words(text))"},{"prompt":"Write a python code to print the current time in the given timezone (America/Chicago).","completion":"import datetime import pytz def print_time(timezone): tz = pytz.timezone(timezone) current_time = datetime.datetime.now(tz) print(\\"Current time in {tz}: {time}\\".format(tz=timezone, time=str(current_time))) if __name__ == '__main__': print_time('America/Chicago')"},{"prompt":"Create a basic Natural Language Processing (NLP) system using Python to analyze sentences. Not applicable","completion":"import nltk def process_sentence(sentence): \\"\\"\\" A basic NLP pipeline for analyzing a given sentence. \\"\\"\\" tokens = nltk.word_tokenize(sentence) # Tokenize the sentence tagged = nltk.pos_tag(tokens) # Assign part-of-speech labels parsed = nltk.parse.stanford.StanfordParser().raw_parse(sentence) # Parse the sentence return tokens, tagged, parsed"},{"prompt":"Create a class in Python for representing a simple counter.","completion":"class Counter: def __init__(self): self.counter = 0 def increase(self): self.counter += 1 def decrease(self): self.counter -= 1 def getter(self): return self.counter"},{"prompt":"Create a Python package that contains a collection of functions for finding the average value of an array. [1,2,3,4,5]","completion":"def average(array): ''' Finds the average of all numbers in an array Args: array (list): List of numbers Returns: float: The average of all values in the array ''' total = 0 for value in array: total += value return total / len(array)"},{"prompt":"Create a Python program to find the root of a quadratic equation. given equation is ax2+bx+c=0","completion":"def roots(a, b, c): disc = b*b - 4*a*c root1 = (-b + math.sqrt(disc))/(2*a) root2 = (-b - math.sqrt(disc))/(2*a) return root1, root2"},{"prompt":"Build a Python application using Flask and SQLAlchemy that returns a JSON object containing the results of a database query. The application should accept a query parameter that determines what data is returned. SELECT * FROM users WHERE age > 18","completion":"import json from flask import Flask, request from flask_sqlalchemy import SQLAlchemy app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) @app.route('/query', methods=['GET']) def get_data(): query = request.args['query'] users = db.session.execute(query) users_list = [dict(user) for user in users] return json.dumps({ \\"users\\": users_list }) if name == 'main': app.run(debug=True)"},{"prompt":"Create a Python module that implements functions for classes and objects.","completion":"# Python module for classes and objects class MyClass: \\"\\"\\"A basic example to demonstrate classes and objects\\"\\"\\" # Class attributes color = 'red' shape = 'circle' # Initializer def __init__(self, radius): self.radius = radius # Methods def area(self): return 3.14 * self.radius * self.radius # Create an object obj = MyClass(radius = 15) # Access object attributes print(\\"The color of the object is:\\", obj.color) print(\\"The shape of the object is:\\", obj.shape) # Access object methods print(\\"The area of the object is:\\", obj.area())"},{"prompt":"Write a loop in Python to iterate through a list and print all elements that have an even length. List: [apples, oranges, bananas, pineapples]","completion":"list_x = [\\"apples\\", \\"oranges\\", \\"bananas\\", \\"pineapples\\"] for item in list_x: if(len(item) % 2 == 0): print(item) #output: apples, oranges, pineapples"},{"prompt":"Create a function in Classical Python to extract the hostname from a given URL url = http://www.example.com/index.html","completion":"def get_hostname(url): hostname = url.split(\\"/\\")[2] return hostname hostname = get_hostname(url) print(hostname)"},{"prompt":"Create a Python function to generate anagrams from a given string.","completion":"def generate_anagrams(s): if len(s) == 1: return s anagrams = [] for i, letter in enumerate(s): for anagram in generate_anagrams(s[:i] + s[i+1:]): anagrams.append(letter + anagram) return anagrams"},{"prompt":"Design a function in Python to find the longest increasing subsequence from an array [3, 4, 1, 0, 6, 2, 3]","completion":"def lis(arr): n = len(arr) # Initialize LIS values for all indices lis = [1]*n # Compute optimized LIS values in bottom up manner for i in range (1 , n): for j in range(0 , i): if arr[i] > arr[j] and lis[i] < lis[j] + 1 : lis[i] = lis[j]+1 # Initialize maximum to 0 to get the maximum of all LIS maximum = 0 # Pick maximum of all LIS values for i in range(n): maximum = max(maximum , lis[i]) return maximum arr = [3,4,-1,0,6,2,3] print('Length of LIS is', lis(arr))"},{"prompt":"Design a class in Python that stores information about three sides of a triangle.","completion":"class Triangle: def __init__(self, side1, side2, side3): self.side1 = side1 self.side2 = side2 self.side3 = side3 def get_area(self): s = (self.side1 + self.side2 + self.side3) / 2 return (s*(s-self.side1)*(s-self.side2)*(s-self.side3)) ** 0.5 def is_equilateral(self): return self.side1 == self.side2 == self.side3"},{"prompt":"Create a class in Python to store the details of mobile phone","completion":"class MobilePhone: def __init__(self, brand, model, year, display_size): self.brand = brand self.model = model self.year = year self.display_size = display_size"},{"prompt":"Create a function in Python that takes a string as an argument and replace all vowels with underscores. teststring","completion":"def replace_vowels(input_string): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\", \\"A\\", \\"E\\", \\"I\\", \\"O\\", \\"U\\"] output_string = '' for s in input_string: if s in vowels: output_string += '_' else: output_string += s return output_string result = replace_vowels('teststring') print(result)"},{"prompt":"Write a Python program to find the nearest 3 squares to a given number. 30","completion":"def findNearestSquares(n): nearestSquareList = [] i = 1 # Find all the nearest squares while i * i <= n: nearestSquareList.append(i * i) i += 1 # Find the nearest 3 squares nearest3Squares = nearestSquareList[-3:] return nearest3Squares nearest3Squares = findNearestSquares(30) print(nearest3Squares) # Output: # [25, 28, 29]"},{"prompt":"Create a Python program to read the contents of a JSON document and store it in a list. Not applicable","completion":"import json with open('data.json', 'r') as f: data = json.load(f) data_list = [] for item in data: data_list.append(item) print(data_list)"},{"prompt":"Create a function in Python which takes a given string and returns a dictionary containing the frequency of each word in the string. Hello world hello world","completion":"def word_frequency(string): word_freq = {} for word in string.split(): if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq string = \\"Hello world hello world\\" print(word_frequency(string))"},{"prompt":"Generate a Python program to remove all occurrences of the character 'x' from a list No Inpu","completion":"def remove_x(lst): \\"\\"\\" Function to remove all occurrences of a character 'x' from a list. Args: lst (list): The list to process. Returns: A list with all occurrences of the character 'x' removed. \\"\\"\\" return [item for item in lst if item != 'x']"},{"prompt":"Create a Python class that encapsulates a Queue data structure.","completion":"class Queue: def __init__(self): self.items = [] def is_empty(self): return self.items == [] def enqueue(self, item): self.items.insert(0, item) def dequeue(self): return self.items.pop() def size(self): return len(self.items)"},{"prompt":"Develop a neural network model in Python to recognize a handwritten number.","completion":"\\"\\"\\" Develop a neural network model in Python to recognize a hand-written number \\"\\"\\" import numpy as np import tensorflow as tf #load the mnist dataset (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data() #discretize the images by flattening them x_train = x_train.reshape(-1, 784) x_test = x_test.reshape(-1, 784) #normalize the pixel values from 0 to 1 x_train = x_train/255.0 x_test = x_test/255.0 #create a neural network model model = tf.keras.models.Sequential() model.add(tf.keras.layers.Dense(512, activation='relu', input_shape= (784,))) model.add(tf.keras.layers.Dense(512, activation='relu')) model.add(tf.keras.layers.Dropout(0.2)) model.add(tf.keras.layers.Dense(10, activation='softmax')) #compile and train the model model.compile( loss='sparse_categorical_crossentropy', metrics=['accuracy'] ) model.fit(x_train, y_train, epochs = 10) #evaluate the model model.evaluate(x_test, y_test)"},{"prompt":"Create a program in Python that implements linear regression. Not applicable","completion":"import numpy as np import matplotlib.pyplot as plt class LinearRegression: def __init__(self): self.weights = None self.bias = None def fit(self, X, y): \\"\\"\\" Fit the linear regression model to the given data Parameters ---------- X : array-like, shape (n_samples, n_features) Training data y : array-like, shape (n_samples,) Target values Returns ------- self : returns an instance of self. \\"\\"\\" # Compute the weights and bias X = np.array(X) y = np.array(y) weights = np.dot(np.linalg.pinv(X), y) bias = y - np.dot(X, weights) self.weights = weights self.bias = bias def predict(self, x): \\"\\"\\" Predict the output value for a given input Parameters ---------- x : array-like, shape (n_samples, n_features) Input data Returns ------- y : array-like, shape (n_samples,) Predicted output value \\"\\"\\" # Return the predictions using the weights and bias predictions = np.dot(np.array(x), self.weights) + self.bias return predictions"},{"prompt":"Create a Python program to convert the following expression in infix notation to postfix notation A * B + C D","completion":"def infix_to_postfix(expression): # Separate the expression by tokens tokens = expression.split(' ') # Create an operator stack op_stack = [] # Create a list for the postfix output postfix_output = [] # Iterate through the tokens for token in tokens: # If token is an operator if token == '+' or token == '-' or token == '*': # Append it to the operator stack op_stack.append(token) # If token is an operand else: # Append it to the postfix output postfix_output.append(token) # Pop operands from the stack while not empty while op_stack: # Append it to the postfix output postfix_output.append(op_stack.pop()) # Return the postfix output as a string return ' '.join(postfix_output)"},{"prompt":"w would you create a 3D Array in python?","completion":"A 3D array can be created using the numpy.array() method in Python and specifying three dimensions, such as: array_3d = numpy.array([[[0, 0, 0], [1, 1, 1], [2, 2, 2]], [[3, 3, 3], [4, 4, 4], [5, 5, 5]], [[6, 6, 6], [7, 7, 7], [8, 8, 8]]])"},{"prompt":"Design a game controller class that stores and updates game state in Python","completion":"class GameController: def __init__(self): self.state = {'lives': 3, 'score': 0, 'level': 1} def update_game_state(self, lives, score, level): self.state['lives'] = lives self.state['score'] = score self.state['level'] = level def get_game_state(self): return self.state"},{"prompt":"Produce a python code to satisfy the following requirements: Given two dictionaries d1 and d2, create another dictionary d3 containing the keys from both dictionaries.","completion":"def merge_dictionaries(d1, d2): d3 = {} for key in d1: d3[key] = d1[key] for key in d2: d3[key] = d2[key] return d3"},{"prompt":"Create a Python script to break the given sentence into words. sentence = This is an example sentence.","completion":"def break_sentence(sentence): return sentence.split(\\" \\")"},{"prompt":"Make a Python program to check if a given string is a pangram or not. A pangram is a sentence that contains all letters of the English alphabet.","completion":"import string def is_pangram(sentence): alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" for char in alphabet: if char not in sentence.lower(): return False return True"},{"prompt":"Create a web scraper with Python to extract the hyperlinks from a given website.","completion":"from bs4 import BeautifulSoup import requests def get_hyperlinks(url): page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') links = [] for a in soup.find_all('a', href=True): links.append(a['href']) return links"},{"prompt":"Come up with a solution to optimize a classifier model in Python.","completion":"# Importing necessary libraries import numpy as np from sklearn.model_selection import GridSearchCV from sklearn.metrics import accuracy_score # Defining the function which takes the classifier object and optimizes it def optimize_model(classifier, parameters): # Create a GridSearchCV object, which will use 5-fold cross validation clf = GridSearchCV(classifier, parameters, scoring = 'accuracy', cv = 5) # Fit the model on the training data clf.fit(X_train, y_train) # Predict the values on the test dataset y_pred = clf.predict(X_test) # Calculate the accuracy score accuracy = accuracy_score(y_test, y_pred) # Print the accuracy print('Accuracy: {:.2f}%'.format(accuracy*100)) # Return the best parameters and the classifier return clf.best_params_, clf"},{"prompt":"Generate a Python program to calculate the maximum possible sum of a subarray in an array of integers. A list of integers [2, 4, 1, 5, 6]","completion":"def max_subarray_sum(arr): current_sum = 0 max_sum = 0 for x in arr: current_sum += x if current_sum < 0: current_sum = 0 if current_sum > max_sum: max_sum = current_sum return max_sum result = max_subarray_sum([-2, 4, -1, 5, 6]) print(result)"},{"prompt":"Generate an algorithm to count substrings in Python. string: abcdabcd substring: cd","completion":"def count_substr(str, substr): count = 0 start = 0 while (str.find(substr, start) != -1): count += 1 start = str.find(substr, start) + 1 return count string = \\"abcdabcd\\" substring = \\"cd\\" result = count_substr(string, substring) print(result)"},{"prompt":"Write a Python regex expression to match any telephone number that has 812 digits with area code.","completion":"^(?d{3})?s?-?d{8,12}"},{"prompt":"Write a Python program to generate and print a random list of size n. 8","completion":"import random def generate_random_list(n): random_list = [] for i in range(n): random_list.append(random.randint(0, 100)) return random_list n = 8 random_list = generate_random_list(n) print(random_list)"},{"prompt":"Create a machine learning model in Python using the scikitlearn library for classifying emails as ham or spam. Not applicable","completion":"import numpy as np from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Create a data frame from the input data df = pd.read_csv(\\"emails.csv\\") # Extract features and outputs X = df['content'].values y = df['label'].values # Split the dataset into train & test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42) # Count vectorizer vectorizer = CountVectorizer() X_train = vectorizer.fit_transform(X_train) X_test = vectorizer.transform(X_test) # Create & fit the model model = MultinomialNB() model.fit(X_train, y_train) # Test the model score = model.score(X_test, y_test) print(score)"},{"prompt":"Create a web scraper in Python using the BeautifulSoup library. This scraper should be able to extract information from a web page and store it in a list of dictionaries. HTML document of a web page <html> <head> <title>Example Page</title> </head> <body> <h1>Welcome to my page!</h1> <p>Here is some information about me:</p> <ul> <li>Name: John Smith</li> <li>Age: 38</li> </ul> </body> </html>","completion":"import requests from bs4 import BeautifulSoup url = 'http://example.com/' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') data = [] for li in soup.find_all('li'): data.append({ 'name': li.text.split(\\":\\")[0], 'value': li.text.split(\\":\\")[1] }) print(data) # Output: [{'name': 'Name', 'value': 'John Smith'}, {'name': 'Age', 'value': '38'}]"},{"prompt":"Output the factorial of a given number in Python. 4","completion":"def factorial(n): if n == 0 or n == 1: return 1 else: return n * factorial(n-1) print(factorial(4))"},{"prompt":"Write a Python program to optimize a given binary search tree by rotating the nodes to make sure the tree is balanced.","completion":"def rotateNodes(root): # if node has a left child if root.left is not None: # we rotate clockwise newRoot = root.left root.left = newRoot.right newRoot.right = root root = newRoot # if node has a right child if root.right is not None: # we rotate counter clockwise newRoot = root.right root.right = newRoot.left newRoot.left = root root = newRoot return root"},{"prompt":"Generate a Python program that automatically generates bar charts for given data [1, 2, 3, 6, 5, 4, 7]","completion":"import matplotlib.pyplot as plt # Data to plot data = [1, 2, 3, 6, 5, 4, 7] # Create the graph object plt.bar(range(len(data)), data, align='center') # Label the graph plt.xticks(range(len(data)), range(1, len(data)+1)) plt.xlabel('x') plt.ylabel('y') plt.title('Bar Graph') # Display the graph plt.show()"},{"prompt":"Write a Python function to filter out strings that contain numbers. [apple,hello123,hi12345, good15]","completion":"def filter_numbers(strings): return [s for s in strings if not any(c.isdigit() for c in s)] if __name__ == '__main__': strings = [\\"apple\\",\\"hello123\\",\\"hi12345\\", \\"good15\\"] print (filter_numbers(strings))"},{"prompt":"mplement a function in Python to generate a password of size n 6","completion":"import string import random def generate_password(n): password = '' for i in range(n): password += random.choice(string.ascii_letters + string.digits + string.punctuation) return password"},{"prompt":"Write a Python program to create a function that takes two strings as parameters and returns true if the first string contains the second string. String 1 = Hello World! String 2 = World","completion":"def contains(s1, s2): return s2 in s1 string1 = \\"Hello World!\\" string2 = \\"World\\" print(contains(string1, string2)) # True"},{"prompt":"Write a Python program to calculate the total cost of a customer's online orders. orders = [ {'item': 'Pizza', 'price': 12.00}, {'item': 'Chips', 'price': 3.50}, {'item': 'Coke', 'price': 2.50} ]","completion":"total_cost = 0 for order in orders: total_cost += order['price'] print('Total cost is', total_cost)"},{"prompt":"Generate a Python program to find the number of words with distinct letters in a given string string = 'hello world'","completion":"def count_distinct_letters(string): distinct_letters = set() for word in string.split(' '): distinct_letters.update(set(word)) return len(distinct_letters) # example string = 'hello world' print(count_distinct_letters(string)) # 6"},{"prompt":"Generate a function in Python for generating a random integer between two given numbers (inclusive).","completion":"import random def random_integer(start, end): return random.randint(start, end)"},{"prompt":"Optimize the following Python program to count the frequencies of characters in a string. string = String Counting","completion":"def countCharacters(string): # Create dictionary to return # count of each character str_dict = {} # Count frequency of each # character of the string for i in string: if i in str_dict: str_dict[i] += 1 else: str_dict[i] = 1 return str_dict # Driver code string = \\"String Counting\\" # Print result print(countCharacters(string))"},{"prompt":"Develop a Python program to test a condition Test whether a given number is greater than 5.","completion":"def test_gt_5(num): return num > 5"},{"prompt":"Create a class in Python that represents a 3D Cube and initializes all side lengths to 10.","completion":"class Cube: def __init__(self): self.sideLengthA = 10 self.sideLengthB = 10 self.sideLengthC = 10"},{"prompt":"Generate a Python object literal from a dictionary. my_dict = {'a':1, 'b':2, 'c':3}","completion":"my_obj = { 'a': 1, 'b': 2, 'c': 3 }"},{"prompt":"Classify the following snippet of Python code as data wrangling, visualization, or machine learning. from sklearn.neighbors import KNeighborsClassifier knn = KNeighborsClassifier(n_neighbors=5) knn.fit(X, y)","completion":"Machine learning."},{"prompt":"Write a function in Python that takes a sentence as an argument and returns the same sentence but with all the words reversed. sentence = This is a test sentence","completion":"def reverse_sentence(sentence): reversed_sentence = \\" \\".join(sentence.split()[::-1]) return reversed_sentence print(reverse_sentence(sentence)) # Output: sentence test a is This"},{"prompt":"Generate a Python program that computes and prints the sum of the even numbers in a given list. [2, 3, 6, 7, 13, 14]","completion":"def get_even_sum(nums): even_sum = 0 for num in nums: if num % 2 == 0: even_sum += num return even_sum nums = [2, 3, 6, 7, 13, 14] even_sum = get_even_sum(nums) print(even_sum)"},{"prompt":"Create a basic webscraper in Python that obtains the price and description of a product from a website. A link to the product page on a website.","completion":"import requests from bs4 import BeautifulSoup # Website URL url = 'LINK' # Make a request and get the HTML content r = requests.get(url) html_content = r.text # Parse the HTML content soup = BeautifulSoup(html_content, 'lxml') # Price price_tag = soup.find(class_='price') price = price_tag.text # Description description_tag = soup.find(class_='product-description') description = description_tag.text print('Price:', price) print('Description:', description)"},{"prompt":"Create a web scraper in Python that downloads a list of news articles. The script should take a URL as an input and produce a list of articles from that page. Each article should have the URL, title, author and publication date. https://www.nytimes.com/","completion":"import requests from bs4 import BeautifulSoup # URL to scrape url = \\"https://www.nytimes.com/\\" # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # News Section news_Section = soup.find(\\"div\\", class_=\\"css-1qwxefa esl82me1\\") # print(news_Section) # News Articles articles = news_Section.find_all(\\"h2\\", class_=\\"e1xfvim30\\") # print(articles) # Empty list to store all news articles news_list = [] # Loop over each article for article in articles: # Extract the title of the article title = article.find(\\"a\\").text # Extract the author of the article author = article.find(\\"span\\", class_=\\"css-1n7hynb\\").text # Extract the date the article was published date = article.find(\\"time\\").text # Extract the URL of the article link = article.find(\\"a\\")[\\"href\\"] # Store all the information in one dictionary news_dict = { \\"title\\": title, \\"author\\": author, \\"date\\": date, \\"link\\": link } # Append the dictionary to the list news_list.append(news_dict) # Print the list print(news_list)"},{"prompt":"Create a Python program to search for a given item in a list of strings. [hello, world, foo, bar], bar","completion":"def search_for_item(strings, item): for string in strings: if string == item: return True return False"},{"prompt":"Generate a Python program to parse a given list of URLs and extract the titles of the web pages. [ https://en.wikipedia.org/wiki/Python_(programming_language), https://wikipedia.org/wiki/Deep_learning, https://www.wikipedia.org/wiki/Cat ]","completion":"import urllib.request from bs4 import BeautifulSoup urls = [ \\"https://en.wikipedia.org/wiki/Python_(programming_language)\\", \\"https://wikipedia.org/wiki/Deep_learning\\", \\"https://www.wikipedia.org/wiki/Cat\\" ] for url in urls: html = urllib.request.urlopen(url).read() soup = BeautifulSoup(html) title = soup.title.string print(title)"},{"prompt":"Create a Python program to find and print all pairs of numbers from a given array of integers whose sum is equal to a given number. [3, 4, 2, 8, 5, 6], the number should be 10","completion":"array = [3, 4, 2, 8, 5, 6] sum = 10 def find_pair(array,sum): for i in range (len(array)-1): for j in range (i+1, len(array)): if array[i] + array[j] == sum: print(\\"Pair found:\\",array[i], array[j]) find_pair(array,sum)"},{"prompt":"Create a Python program that will take an array of integers as input and output a reversed version of the array. [1,2,3,4,5]","completion":"def reverseArray(arr): return arr[::-1] arr = [1,2,3,4,5] reverseArr = reverseArray(arr) print(\\"Reversed array is\\", reverseArr)"},{"prompt":"Convert the following JavaScript program into a Python program that does the same things: let a = 5; let b = 10; let c = a + b; Not applicable","completion":"a = 5 b = 10 c = a + b print(c)"},{"prompt":"Generate a script using a language of your choice to validate a field for a given email after taking the input from the user.","completion":"# Python script to validate an email address # Ask the user to enter an email address email = input(\\"Please enter your email address:\\") # Define a regular expression to validate the email address valid_email_regex = r\\"^[w-]+@([w-]+.)+[w]+\\" # Check whether the given email address is valid if re.search(valid_email_regex, email): # If valid display success message print(\\"The entered email address is valid\\") else: # Otherwise display an error message print(\\"The entered email address is invalid!\\")"},{"prompt":"Create a program to generate a frequency table from a given list a list of eleme","completion":"# Python3 program to find frequency table from collections import Counter def freq_table(arr): return dict(Counter(arr))"},{"prompt":"mplement a 'closest to zero' algorithm in Python, which returns the closest to 0 value from a given array. [2, 4, 5, 1]","completion":"def closest_to_zero(arr): closest_val = 0 closest_diff = float('inf') for val in arr: if abs(val) < abs(closest_diff): closest_diff = val closest_val = val return closest_val arr1 = [-2, 4, -5, -1] result = closest_to_zero(arr1) print(result)"},{"prompt":"Write a Python function to create a Fibonacci sequence up to nth number. n=10","completion":"def FibonacciGenerator(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b # Driver Program print(FibonacciGenerator(10))"},{"prompt":"Convert the following JSON object to Python dictionary. {name: John, age: 25}","completion":"import json def convert_json_to_dict(json_object): return json.loads(json_object)"},{"prompt":"Create an AI game in Python for the user to guess a number between 1 and 10.","completion":"import random # set the maximum number of guess max_guesses = 5 # generate a random number target_num = random.randint(1, 10) # initialize number of guesses num_guesses = 0 # prompt user for a guess while num_guesses < max_guesses: user_guess = int(input(\\"Guess a number between 1 and 10: \\")) # check if user guess is correct if user_guess == target_num: print(\\"You have guessed the number correctly\\") break # check if user guess is greater or lesser elif user_guess > target_num: print(\\"Your guess is greater than the target number\\") else: print(\\"Your guess is lesser than the target number\\") num_guesses += 1 if num_guesses == max_guesses: print(\\"You have reached your maximum number of guesses\\")"},{"prompt":"mplement webscraping with Python to extract content from a given website. A website URL","completion":"import requests from bs4 import BeautifulSoup # Fetch the website content link = \\"https://example.com\\" data = requests.get(link) # Parse the HTML content soup = BeautifulSoup(data.text, 'html.parser') # Extract all the <p> tags content = soup.find_all('p') # Print the content for item in content: print(item.text)"},{"prompt":"Create a Python lambda expression that takes two parameters, a and b, and returns the average of them.","completion":"avg = lambda a,b : (a + b)/2"},{"prompt":"Generate a random number in Python between 10 and 20 excluding 14.","completion":"import random number = random.randint(10, 20) while (number == 14): number = random.randint(10, 20) print(number)"},{"prompt":"Write a function in Python that normalizes a list of numbers by subtracting their average and dividing by the standard deviation. [4,2,7,8,2]","completion":"def normalize(numbers): avg = sum(numbers) / len(numbers) variance = sum((x - avg) ** 2 for x in numbers) / len(numbers) stdev = variance ** 0.5 return [(x - avg) / stdev for x in numbers]"},{"prompt":"Design a Python program to extract data from the given dataset. [ { name: John, age: 20, hobby: soccer }, { name: Sarah, age: 19, hobby: dancing }, { name: Dave, age: 21, hobby: painting } ]","completion":"def extract_data(dataset): name_list = [] age_list = [] hobby_list = [] for entry in dataset: name_list.append(entry[\\"name\\"]) age_list.append(entry[\\"age\\"]) hobby_list.append(entry[\\"hobby\\"]) return name_list, age_list, hobby_list"},{"prompt":"Build a text generator in Python that can generate poem based on a given input.","completion":"def generate_poem(input): poem = [] for i in range(len(input)): line = '' for j in range(i): line += input[j] + ' ' poem.append(line) return poem"},{"prompt":"Write a Python comparative sorting algorithm [9, 8, 7, 6, 5, 4, 3, 2, 1]","completion":"def sort(list): \\"\\"\\" Implements a comparison sorting algorithm using Python. Sorts the given list in ascending order. \\"\\"\\" for i in range(len(list)): for j in range(i + 1, len(list)): if list[i] > list[j]: list[i], list[j] = list[j], list[i] return list if __name__ == '__main__': list = [9, 8, 7, 6, 5, 4, 3, 2, 1] print(sort(list))"},{"prompt":"Create a web scraper in Python's BeautifulSoup to scrape a list of titles and their corresponding URLs from a web page. URL: https://www.example.com/","completion":"import requests from bs4 import BeautifulSoup # Make a GET request to fetch the raw HTML content url = \\"https://www.example.com/\\" html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Find all links in the page titles_list = soup.find_all(\\"a\\") titles_urls = [(title.text, title[\\"href\\"]) for title in titles_list] # Print all titles and their corresponding links for title, url in titles_urls: print(\\"Title:\\", title) print(\\"URL:\\", url) print()"},{"prompt":"Can you create a Python program that compares two lists and finds common elements? list1 = [3, 4, 5, 6, 7] list2 = [2, 3, 4, 5, 6]","completion":"list1 = [3, 4, 5, 6, 7] list2 = [2, 3, 4, 5, 6] common_elements = set(list1) & set(list2) print(list(common_elements)) # Output: [3, 4, 5, 6]"},{"prompt":"Create a virtual chatbot in Python that can handle simple conversations. Not applicable","completion":"import random import spacy import nltk # load the English language model nlp = spacy.load('en_core_web_sm') # define some sample conversations conversations = [ ['Hello', 'Hi there'], ['How are you?', 'I am doing great!'], ['Bye', 'Goodbye!'], ] # define an answer generator def answer(text): doc = nlp(text) tokens = [token.text for token in doc] for conversation in conversations: if conversation[0] in tokens: return random.choice(conversation[1:]) return '' # create a loop to run the chatbot while True: text = input('You: ') response = answer(text) print('Bot: ', response) if response == 'Goodbye!': break"},{"prompt":"Create a Python program to reformat a JSON string, preserving indentation and enforcing the order in which members appear. json_string = '{fruit: [apple, banana, cherry], vegetable: [carrot, potato, onion]}'","completion":"import json def reformat_json(json_string): return json.dumps(json.loads(json_string), indent=4, sort_keys=True)"},{"prompt":"Generate a python program to remove duplicate elements in a given list.","completion":"def remove_duplicates(arr): new_arr = [] for i in arr: if i not in new_arr: new_arr.append(i) return new_arr"},{"prompt":"Write a python function to remove duplicates from an array. [1, 2, 3, 3, 3, 4, 5, 6]","completion":"\\"\\"\\" Remove duplicates from an array \\"\\"\\" def remove_duplicates(arr): # Create a set seen = set() # Traverse the array for i in range(len(arr)): if arr[i] not in seen: seen.add(arr[i]) return seen if __name__ == '__main__': arr = [1, 2, 3, 3, 3, 4, 5, 6] print(remove_duplicates(arr))"},{"prompt":"Create a Python script to parse an XML document and extract the title and description for each item in the document. Not applicable","completion":"import xml.etree.ElementTree as ET # Read the XML file tree = ET.parse('items.xml') # Get the root element root = tree.getroot() # Iterate over each item for item in root.findall('item'): # Get the title title = item.find('title').text # Get the description description = item.find('description').text print('Title: ', title) print('Description: ', description)"},{"prompt":"Create a Python program to simulate an automatic grocery store checkout machine.","completion":"import collections def calculate_price(items): items_dict = collections.Counter(items) total_price = 0 # Iterate through each item for item in items_dict: price = items_dict[item] * prices[item] total_price += price # Return the total price return total_price # Mapping of item and its price prices = { 'apple': 2, 'banana': 4, 'orange': 6 } # List of items to buy items = ['apple', 'apple', 'orange', 'banana', 'apple'] # Calculate total price price = calculate_price(items) print(\\"Total Price is\\", price)"},{"prompt":"Create a set of functions to encrypt a string in Python using the Advanced Encryption Standard (AES) with a given key and initialization vector (IV). Key: 2b7e151628aed2a6abf7158809cf4f3c; IV: 000102030405060708090a0b0c0d0e0f","completion":"import base64 from Crypto.Cipher import AES def encrypt_string(plain_text, key, iv): # convert strings to bytes plain_text_bytestring = bytes(plain_text, encoding='utf8') key = bytes(key, encoding='utf8') iv = bytes(iv, encoding='utf8') # create an AES cipher object with the key cipher = AES.new(key, AES.MODE_CBC, iv) # encrypt the message using the cipher object encrypted_string = cipher.encrypt(plain_text_bytestring) # base64 encode the encrypted message base64_encrypted_string = base64.b64encode(encrypted_string) # return the base64 encoded message return base64_encrypted_string.decode('utf-8') def decrypt_string(base64_encrypted_string, key, iv): # convert strings to bytes base64_encrypted_string = bytes(base64_encrypted_string, encoding='utf8') key = bytes(key, encoding='utf8') iv = bytes(iv, encoding='utf8') # decode the base encoded message encrypted_string = base64.b64decode(base64_encrypted_string) # create an AES cipher object with the key cipher = AES.new(key, AES.MODE_CBC, iv) # decrypt the message using the cipher object decrypted_string = cipher.decrypt(encrypted_string) # return the decrypted message in string format return decrypted_string.decode('utf-8')"},{"prompt":"Write a Python program that prints all prime numbers up to a given number n. Not applicable","completion":"def prime_numbers(n): for i in range(2,n+1): prime = True for j in range(2,i): if i % j == 0: prime = False if prime: print(i) prime_numbers(10) # Output: 2, 3, 5, 7"},{"prompt":"Given a set of numbers, write a Python program to find the maximum number after performing arithmetic operations on the digits of the set of numbers. nums = [12, 198, 16]","completion":"def find_max(nums): max_num = 0 for num in nums: str_num = str(num) mul_res = 1 for digit in str_num: mul_res *= int(digit) max_num = max(max_num, mul_res) return max_num"},{"prompt":"Compose a Python program to classify data Classify the given dataset [5, 10, 25, 11, 14, 20] into two categories numbers below 15 and numbers above 15.","completion":"def classify_number_data(data): numbers_below_15 = [] numbers_above_15 = [] for number in data: if number <= 15: numbers_below_15.append(number) else: numbers_above_15.append(number) return numbers_below_15, numbers_above_15"},{"prompt":"Create a function in Python to calculate the sum of 1 to n numbers. n = 10","completion":"def sum_nums(n): result = 0 for i in range(1, n+1): result += i return result print(sum_nums(10))"},{"prompt":"Create a Python function that takes a given list of strings, and returns a dictionary of all the words paired with how many times they appear in the list. ['a', 'b', 'a', 'a', 'c', 'b', 'd', 'a']","completion":"def word_count(text_list): result = {} for word in text_list: if word in result.keys(): result[word] += 1 else: result[word] = 1 return result text_list = ['a', 'b', 'a', 'a', 'c', 'b', 'd', 'a'] counts = word_count(text_list) print(counts) # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1}"},{"prompt":"Create a function in Python that takes an array of strings and returns a new array of strings with all the vowels removed from each string. [hello, world, how]","completion":"def remove_vowels(strings): vowels = ['a', 'e', 'i', 'o', 'u'] result = [] for string in strings: result.append(''.join(c for c in string if c not in vowels)) return result"},{"prompt":"Develop a Python webcrawler that takes a URL as input and returns the number of words on the page. url = http://example.com","completion":"import requests from bs4 import BeautifulSoup def get_page_word_count(url): r = requests.get(url) soup = BeautifulSoup(r.content, 'html.parser') words = soup.find_all(text=True) count = 0 for w in words: count += len(w.split()) return count url = \\"http://example.com\\" word_count = get_page_word_count(url) print(\\"word count = \\", word_count)"},{"prompt":"Write a Python function to convert a string to an integer.","completion":"def string_to_int(string): num = 0 for char in string: num = num * 10 + (ord(char) - ord('0')) return num"},{"prompt":"Edit a given Python program to optimize the time complexity. def get_maximum_item(arr): maximum_number = float('infinity') for item in arr: if item > maximum_number: maximum_number = item return maximum_number","completion":"def get_maximum_item(arr): if len(arr) == 0: return float('-infinity') maximum_number = arr[0] for item in arr[1:]: if item > maximum_number: maximum_number = item return maximum_number"},{"prompt":"Write an optimized Python program to sort the elements of an array in ascending order. arr = [5, 3, 2, 4, 1]","completion":"def bubbleSort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [5, 3, 2, 4, 1] bubbleSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Write a Python script to convert a list of words into a dictionary that details the frequencies of each word. ['word', 'word', 'words', 'python']","completion":"word_dict = {} # Count frequency of each word for word in input_list: if word in word_dict.keys(): word_dict[word] += 1 else: word_dict[word] = 1 print(word_dict) # Output: {'word': 2, 'words': 1, 'python': 1}"},{"prompt":"Optimize an existing Python code snippet that sorts a list of integers in ascending order. The code should be optimized for speed and should not use any libraries. unsorted_list = [2, 4, 1, 5, 3]","completion":"def bubble_sort(lst): n = len(lst) for i in range(n-1): for j in range(0, n-i-1): if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j], lst[j+1] sorted_list = bubble_sort(unsorted_list)"},{"prompt":"Given the input, create a Python program which prints out all the words inside the input in alphabetical order. I like cats and playing the piano","completion":"def print_words_in_order(string): \\"\\"\\"Print out all the words in the input in alphabetical order\\"\\"\\" words = string.split() words.sort() for word in words: print(word)"},{"prompt":"Create a web scraping script in Python that extracts all the users and their reviews from a page on TripAdvisor. The URL of the page: https://www.tripadvisor.com/Hotel_Reviewg469893d13034369ReviewsThe_Fountainhead_HotelSan_Fernando_Trinidad_Tobago.html","completion":"from lxml import html import requests url = \\"https://www.tripadvisor.com/Hotel_Review-g469893-d13034369-Reviews-The_Fountainhead_Hotel-San_Fernando_Trinidad_Tobago.html\\" page = requests.get(url) tree = html.fromstring(page.content) user_names = tree.xpath('//a[@class=\\"scrname\\"]/text()') review_texts = tree.xpath('//p[@class=\\"partial_entry\\"]/text()') # print user names and comments for user_name, review_text in zip(user_names, review_texts): print(user_name, 'n', review_text, 'nn')"},{"prompt":"Write a python program to implement Merge Sort","completion":"def mergeSort(arr): if len(arr) >1: mid = len(arr)//2 #Finding the mid of the array L = arr[:mid] # Dividing the array elements R = arr[mid:] # into 2 halves mergeSort(L) # Sorting the first half mergeSort(R) # Sorting the second half i = j = k = 0 # Copy data to temp arrays L[] and R[] while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i+=1 else: arr[k] = R[j] j+=1 k+=1 # Checking if any element was left while i < len(L): arr[k] = L[i] i+=1 k+=1 while j < len(R): arr[k] = R[j] j+=1 k+=1"},{"prompt":"Generate a program in Python that takes in a string and returns the reverse of the string. Hello World","completion":"def reverse_string(str): \\"\\"\\" Reverses a given string \\"\\"\\" rev_str = \\"\\" for c in str: rev_str = c + rev_str return rev_str str = \\"Hello World\\" rev_str = reverse_string(str) print(rev_str)"},{"prompt":"Generate a Python statement to select unique values from a list. seq = [2, 3, 5, 3, 4, 9, 5]","completion":"result = set(seq) print(result)"},{"prompt":"Create a program in Python that checks if a number is prime or not.","completion":"def is_prime(n): ''' Function to check if the given number is a prime ''' if n < 2: return False for i in range(2, n): if n % i == 0: return False return True"},{"prompt":"Create a Python program to create a stack with basic push and pop operations.","completion":"\\"\\"\\" Create a stack with basic push and pop operations \\"\\"\\" class Stack: def __init__(self): self.stack = [] def push(self, item): self.stack.append(item) def pop(self): return self.stack.pop() def peek(self): return self.stack[-1] def is_empty(self): return len(self.stack) == 0"},{"prompt":"Write a Python program to calculate the DFT of a signal using the Fast Fourier Transform (FFT) algorithm.","completion":"import numpy as np # Number of sample points N = 600 # sample spacing T = 1.0 / 800.0 x = np.linspace(0.0, N*T, N) y = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(80.0 * 2.0*np.pi*x) yf = np.fft.fft(y) xf = np.fft.fftfreq(N, T) import matplotlib.pyplot as plt plt.plot(xf, 2.0/N * np.abs(yf[0:N//2])) plt.grid() plt.show()"},{"prompt":"Write a Python program to convert a string in camel case format to snake case format myNameIsRy","completion":"my_name_is_ryan"},{"prompt":"Given two strings s and t, write a Python program to check if t is a substring of s. s = abcabc t = abc","completion":"def is_substring(s, t): if t in s: return True else: return False"},{"prompt":"Generate a program to recognize the sentence 'Good morning' in Python.","completion":"import speech_recognition as sr r = sr.Recognizer() with sr.Microphone() as source: print(\\"Say something!\\") audio = r.listen(source) try: print(\\"You said: \\" + r.recognize_google(audio)) if r.recognize_google(audio) == 'Good morning': print('correct') else: print('incorrect') except: pass"},{"prompt":"Write a Python program to parse an HTML table and extract its contents. <table> <tr> <td>Name</td> <td>Email</td> </tr> <tr> <td>John Doe</td> <td>john@example.com</td> </tr> </table>","completion":"import requests from bs4 import BeautifulSoup # Fetch HTML page response = requests.get('http://example.com/table.html') # Create BeautifulSoup object soup = BeautifulSoup(response.content, 'html.parser') # Extract table table = soup.find('table') # Extract columns columns = [col.text for col in table.find_all('td')] # Extract rows rows = [row.find_all('td') for row in table.find_all('tr')] # Iterate over each row and store data in a dict data = [] for row in rows: data.append([col.text for col in row]) # Print the data print(data) # [['Name', 'Email'], ['John Doe', 'john@example.com']]"},{"prompt":"Create a Python function named \`time_in_words\` that takes in input two integer variables, \`hours\` and \`mins\`. The function should return a phrase string corresponding to the time indicated by the inputs. For example, if \`hours\` is equal to \`5\` and \`mins\` is equal to \`12\`, the return value of the function should be \`five twelve\`.","completion":"def time_in_words(hours, mins): # Create phrase string corresponding to time phrase = \\"\\" if hours == 0: phrase += \\"twelve\\" elif hours == 1: phrase += \\"one\\" elif hours == 2: phrase += \\"two\\" elif hours == 3: phrase += \\"three\\" elif hours == 4: phrase += \\"four\\" elif hours == 5: phrase += \\"five\\" elif hours == 6: phrase += \\"six\\" elif hours == 7: phrase += \\"seven\\" elif hours == 8: phrase += \\"eight\\" elif hours == 9: phrase += \\"nine\\" elif hours == 10: phrase += \\"ten\\" elif hours == 11: phrase += \\"eleven\\" elif hours == 12: phrase += \\"twelve\\" if mins == 0: phrase += \\" o'clock\\" elif mins == 1: phrase += \\" o'one\\" elif mins == 2: phrase += \\" o'two\\" elif mins == 3: phrase += \\" o'three\\" elif mins == 4: phrase += \\" o'four\\" elif mins == 5: phrase += \\" o'five\\" elif mins == 6: phrase += \\" o'six\\" elif mins == 7: phrase += \\" o'seven\\" elif mins == 8: phrase += \\" o'eight\\" elif mins == 9: phrase += \\" o'nine\\" elif mins == 10: phrase += \\" ten\\" elif mins == 11: phrase += \\" eleven\\" elif mins == 12: phrase += \\" twelve\\" elif mins == 13: phrase += \\" thirteen\\" elif mins == 14: phrase += \\" fourteen\\" elif mins == 15: phrase += \\" fifteen\\" elif mins == 16: phrase += \\" sixteen\\" elif mins == 17: phrase += \\" seventeen\\" elif mins == 18: phrase += \\" eighteen\\" elif mins == 19: phrase += \\" nineteen\\" elif mins == 20: phrase += \\" twenty\\" elif mins == 30: phrase += \\" thirty\\" else: tens = int(mins/10) ones = mins - tens * 10 phrase += \\" \\" + str(tens) + \\"ty\\" phrase += \\" \\" + str(ones) return phrase"},{"prompt":"Create an AI model in Python that predicts whether a person is a relative of the speaker. No inpu","completion":"def relative_prediction_model(): # Variables features = [\\"age\\", \\"gender\\", \\"race\\", \\"income\\", \\"location\\", \\"origin\\", \\"religion\\", \\"political views\\", \\"marital status\\", \\"education level\\", \\"occupation\\"] target = \\"relation\\" # Defining model, training and predicting model = MLPClassifier() model.fit(features, target) return model"},{"prompt":"Write a Python program that takes a URL and checks for broken links.","completion":"import requests def check_for_broken_links(url): # Request webpage response = requests.get(url) # Parse webpage for all links links = response.html.find_all('a') # Check response code of each link for link in links: link_url = link['href'] response = requests.get(link_url) if not response.ok: # Link is broken print('Broken link found:', link_url) check_for_broken_links('http://example.com')"},{"prompt":"Build a solution using the given resources. The end result should present the user with a search bar to query a database. Frontend: React Backend: Python Database: MongoDB","completion":"Create a React application that sends user queries to a Python backend, which runs the queries against a MongoDB database. The backend will communicate results back to the React application. The React application will then display the results to the user."},{"prompt":"Create a Python script that classifies an incoming sentence as either positive or negative.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def classify_sentence(text): sid = SentimentIntensityAnalyzer() ss = sid.polarity_scores(text) if ss['compound'] >= 0.05: return 'positive' elif ss['compound'] <= -0.05: return 'negative' else: return 'neutral'"},{"prompt":"Generate a python program that create a pandas dataframe from a dictionary column. data_dict = {'name': ['Bob', 'Alice', 'John'], 'age': [18, 20, 19]}","completion":"import pandas as pd df = pd.DataFrame(data_dict)"},{"prompt":"Given some code, identify the type of the code written. def foo(): x = 0 y = 1 z = 2 if x == y: z += 1","completion":"The code written is a combination of Python and logic control. It is a conditional statement which checks whether x is equal to y and adds one to z if this is true."},{"prompt":"Create a Python script that parses a JSON string and complete the following tasks: (1) convert the string to an object, (2) sort the object by keys, and (3) print the object in a formatted way. {a: 3, b: 1, c: 2}","completion":"import json # Convert the string to an object data = json.loads('{\\"a\\": 3, \\"b\\": 1, \\"c\\": 2}') # Sort the object by keys sorted_data = {k: data[k] for k in sorted(data.keys())} # Print the object in a formatted way print(json.dumps(sorted_data, indent=4))"},{"prompt":"Convert the following Java program to Python program. public class GFG { static void printPattern(int n) { int i, j; for (i=0; i<n; i++) { for (j=0; j<=i; j++ ) System.out.print(* ); System.out.println(); } } public static void main(String args[]) { int n = 5; printPattern(n); } }","completion":"def printPattern(n): for i in range(0,n): for j in range(0, i + 1): print(\\"* \\", end=\\"\\") print(\\"r\\") n = 5 printPattern(n)"},{"prompt":"Create a Python program for classifying the sentiment of a text. The program should take a string argument and predict whether the sentiment is positive or negative. Not applicable","completion":"import textblob def predict_sentiment(text): sentiment = textblob.TextBlob(text).sentiment sentiment_value = sentiment.polarity sentiment_class = 'positive' if sentiment_value >= 0 else 'negative' return sentiment_value, sentiment_class sentiment_value, sentiment_class = predict_sentiment('This is a great article!') print(sentiment_value, sentiment_class) # Output: 0.8 positive"},{"prompt":"Create a python program to convert a list of strings to a dictionary.","completion":"def list_to_dict(lst): res = {} for item in lst: res[item] = True return res"},{"prompt":"Generate a list comprehension in Python for the following operation. mulitply each element in (1, 2, 3, 4) by 3","completion":"[x * 3 for x in (1, 2, 3, 4)]"},{"prompt":"Create a Python function to find all the prime numbers between 0 and a given number.","completion":"def find_prime_numbers(num): prime_numbers = [] # Traverse through all numbers for i in range(2, num + 1): count = 0 for j in range(2, i // 2 + 1): if (i % j == 0): count += 1 break # If the number is prime then print it if (count == 0 and i != 1): prime_numbers.append(i) return prime_numbers"},{"prompt":"Create a script written in Python for accessing the Reddit API and formulating a Sentiment Analysis on a given subreddit. Subreddit to analyze: r/AskRedd","completion":"import requests import praw from textblob import TextBlob # Initializing the Reddit instance reddit = praw.Reddit(client_id=YOUR_CLIENT_ID, client_secret=YOUR_CLIENT_SECRET, user_agent='YOUR_USER_AGENT') # Inputting the subreddit to analyze subreddit = reddit.subreddit(\\"AskReddit\\") # Getting the 50 top posts posts = subreddit.top(limit=50) # Iterating over the posts for post in posts: # Fetching the post data post_data = requests.get(url=post.url).json() # Calculating the sentiment sentiment = TextBlob(post_data['data']['title']).sentiment # Printing the sentiment print('Post Title: {0} --> Sentiment: {1}'.format(post_data['data']['title'], sentiment))"},{"prompt":"You need to write a Python program for computing the factorial of a number. 5","completion":"def factorial(num): if num == 0: return 1 else: return num * factorial(num - 1) print(factorial(5))"},{"prompt":"Generate a list of 10 random numbers in Python between 0 and 1 (including 0, excluding 1).","completion":"import random rand_nums = [None] * 10 for i in range(10): rand_nums[i] = random.random() print(rand_nums)"},{"prompt":"Create a programmatic interface in Python to search for domain names. The interface should include a text field to enter a query string and a “Search” button to initiate the search. query string = example","completion":"from tldextract import extract import requests query_string = input(\\"Enter a query string: \\") # Get the top-level domain from the query string tld = extract(query_string).suffix # Construct the API request URL url = \\"https://api.\\" + tld + \\"/v1/domains\\" # Send the request and store the response response = requests.get(url, params={ \\"q\\": query_string, \\"fields\\": \\"domain_name\\", }) # Extract all the domain names from the response data data = response.json() domain_names = [d[\\"domain_name\\"] for d in data[\\"domains\\"]] # Print the list of domain names print(domain_names)"},{"prompt":"Suggest an algorithm to generate a string of random numbers.","completion":"A simple algorithm to generate a string of random numbers is to use the Python standard library's random module to generate n number of random numbers in the range [0, 9]. The generated random numbers can then be appended to a string to form the desired string of random numbers. def generateRandomNumberString(length): # Generate a random string of length N import random string = '' for i in range(0,length): x = random.randint(0,9) string += str(x) return string"},{"prompt":"Create a Python program to create a histogram from a given list of integers.","completion":"def print_histogram(nums): for num in nums: output = '' times = num while(times > 0): output += '#' times = times - 1 print(output)"},{"prompt":"Write a Python program to retrieve the titles and scores of the top 10 movies rated by users from the IMDB database. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = \\"http://www.imdb.com/search/title?count=10&sort=user_rating,desc\\" page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') title_list = soup.find_all('div', {'class': 'lister-item-content'}) for title in title_list: # get title movie_title = title.h3.a.get_text() # get score score = title.find('span', {'class': 'value'}).get_text() print(movie_title + ': ' + score)"},{"prompt":"Generate a Python code that takes in two sets of coordinates and prints the distance between them (2,3), (4,5)","completion":"def calculate_distance(p1, p2): x1, y1 = p1 x2, y2 = p2 return ((x2 - x1)**2 + (y2 - y1)**2)**0.5"},{"prompt":"Write a single line of code to display the current date and time in the format Month day year, Hour:Minute” using the Python module datetime.","completion":"print(datetime.datetime.now().strftime('%b %d %Y, %H:%M'))"},{"prompt":"Create a program in Python that removes duplicates from a given array. [1,1,2,3,4,5,5,5]","completion":"def remove_duplicates(array): new_array = [] for element in array: if element not in new_array: new_array.append(element) return new_array"},{"prompt":"Create a function that concatenates two lists in Python.","completion":"def concatenate_lists(list1, list2): return list1 + list2"},{"prompt":"Create a text editor in Python using the PyQt5 library. Not applicable","completion":"import sys from PyQt5.QtWidgets import * from PyQt5.QtGui import * class Editor(QDialog): def __init__(self, parent=None): super(Editor, self).__init__(parent) self.text = QTextEdit() self.initUI() def initUI(self): layout = QVBoxLayout() layout.addWidget(self.text) self.setLayout(layout) self.setWindowTitle(\\"Text Editor\\") if __name__ == '__main__': app = QApplication(sys.argv) window = Editor() window.resize(350, 250) window.show() sys.exit(app.exec_())"},{"prompt":"Create an algorithm in Python for computing the Levenshtein distance between two strings. Two strings: kitten and sitting","completion":"def levenshteinDistance(str1, str2): m = len(str1) n = len(str2) # Create a table for storing results dp = [[0 for x in range(n + 1)] for x in range(m + 1)] # Fill d[][] in bottom-up manner for i in range(m + 1): for j in range(n + 1): # If first string is empty, only option is to # insert all characters of second string if i == 0: dp[i][j] = j # Min. operations = j # If second string is empty, only option is to # remove all characters of second string elif j == 0: dp[i][j] = i # Min. operations = i # If characters in both strings are same, no operations required elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] # If characters are not same, consider all operations # on \\"left-hand\\" side and pick minimum else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n] # Driver program str1 = \\"kitten\\" str2 = \\"sitting\\" print(levenshteinDistance(str1, str2))"},{"prompt":"Create a Python script which removes specified index from a list.","completion":"def remove_index(my_list, remove_index): my_list.remove(my_list[remove_index]) return my_list"},{"prompt":"Create a Python program to check if the given number is divisible by 3 or not. 12","completion":"def is_divisible_by_3(n): return (n % 3 == 0) n = 12 if is_divisible_by_3(n): print(str(n) + ' is divisible by 3.') else: print(str(n) + ' is not divisible by 3.')"},{"prompt":"Develop a basic web crawler using Python language.","completion":"import requests from bs4 import BeautifulSoup def get_links(url): # Fetch the page res = requests.get(url) # Parse the HTML html_doc = res.text soup = BeautifulSoup(html_doc, 'html.parser') # Extract all links from the page links = [] for link in soup.find_all('a'): links.append(link.get('href')) return links"},{"prompt":"Rewrite the following code in python #include <stdio.h> int main() { int a[10], b[10], i, j; for (i = 0; i < 10; ++i) { a[i] = 0; b[i] = 0; } for (j = 1; j <= 5; ++j) { for (i = 0; i < 10; ++i) { a[i] = a[i] + j; b[i] = b[i] + b[i 1] + a[i]; } } for (i = 0; i < 10; ++i) { printf(%d , b[i]); } return 0; }","completion":"a = [0] * 10 b = [0] * 10 for j in range(1, 6): for i in range(10): a[i] = a[i] + j b[i] = b[i] + b[i - 1] + a[i] for i in range(10): print(b[i], end=\\" \\")"},{"prompt":"Create a code in Python to generate a random English word.","completion":"import random words = [\\"hello\\", \\"world\\", \\"hi\\", \\"moon\\", \\"sun\\"] random_word = random.choice(words) print(\\"Random word: \\" + random_word)"},{"prompt":"Write a Python code that takes in data points in timeseries and returns the average of the data points for the given period. [1, 3, 4, 5, 3, 9, 6]","completion":"def average_of_period(arr): return sum(arr) / len(arr) result = average_of_period([1, 3, 4, 5, 3, 9, 6]) print(result)"},{"prompt":"Generate an efficient heap sort algorithm for a Python list containing random numbers. list = [2, 4, 5, 1, 7, 6, 0, 8]","completion":"def heapify(arr, n, i): largest = i # Initialize largest as root l = 2 * i + 1 # left = 2*i + 1 r = 2 * i + 2 # right = 2*i + 2 # See if left child of root exists and is # greater than root if l < n and arr[i] < arr[l]: largest = l # See if right child of root exists and is # greater than root if r < n and arr[largest] < arr[r]: largest = r # Change root, if needed if largest != i: arr[i],arr[largest] = arr[largest],arr[i] # swap # Heapify the root. heapify(arr, n, largest) # The main function to sort an array of given size def heapSort(arr): n = len(arr) # Build a maxheap. for i in range(n, -1, -1): heapify(arr, n, i) # One by one extract elements for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] # swap heapify(arr, i, 0) # Driver code to test above arr = [2, 4, 5, 1, 7, 6, 0, 8] heapSort(arr) n = len(arr) print (\\"Sorted array is\\") for i in range(n): print (\\"%d\\" %arr[i]),"},{"prompt":"Design a class in Python that contains a method to format a given string, removing all nonalphanumeric characters and replacing spaces with underscores.","completion":"class StringFormatter(): def __init__(self, string): self.string = string def format_string(self): new_string = \\"\\".join([c for c in self.string if (c.isalnum() or c == '_')]) return new_string.replace(\\" \\", \\"_\\") if __name__ == '__main__': formatter = StringFormatter(\\"Hello, World!\\") print(formatter.format_string())"},{"prompt":"Produce a program in python to solve a given Sudoku puzzle. grid = [ [7,8,0,4,0,0,1,2,0], [6,0,0,0,7,5,0,0,9], [0,0,0,6,0,1,0,7,8], [0,0,7,0,4,0,2,6,0], [0,0,1,0,5,0,9,3,0], [9,0,4,0,6,0,0,0,5], [0,7,0,3,0,0,0,1,2], [1,2,0,0,0,7,4,0,0], [0,4,9,2,0,6,0,0,7] ]","completion":"def solve(grid): \\"\\"\\"solves a 9x9 sudoku grid \\"\\"\\" row = 0 col = 0 # Initially searching for an unassigned position while row<9: while col<9: # If the entry is empty if grid[row][col]==0: for num in range(1,10): if check(grid, row, col, num): grid[row][col] = num # recursively checking if solve(grid): return True else: grid[row][col]=0 # If the entry is not empty, go to the next position col += 1 if col >= 9: col = 0 row += 1 # returning true when the whole grid is assigned with numbers return True def check(grid, row, col, num): # checking row and column for i in range(0, 9): # To check whether this num is # already present in the row if grid[row][i] == num: return False # To check whether this num is # already present in the column if grid[i][col] == num: return False # now checking in its block (3x3) r = row - row%3 c = col - col%3 for i in range(3): for j in range(3): if grid[i+r][j+c] == num: return False # If everything checks out, # return true (num is not being used) return True # Driver program to test above function if __name__ == '__main__': grid = [ [7,8,0,4,0,0,1,2,0], [6,0,0,0,7,5,0,0,9], [0,0,0,6,0,1,0,7,8], [0,0,7,0,4,0,2,6,0], [0,0,1,0,5,0,9,3,0], [9,0,4,0,6,0,0,0,5], [0,7,0,3,0,0,0,1,2], [1,2,0,0,0,7,4,0,0], [0,4,9,2,0,6,0,0,7] ] if solve(grid): for row in grid: print (*row, sep=' ') else: print(\\"No solution exists!\\")"},{"prompt":"Write a Python program to calculate the maximum possible sum of a route between two nodes in a tree. A tree with 3 nodes. Node A with a value of 8, Node B with a value of 11, and Node C with a value of 7.","completion":"def max_sum_route(tree, start, end): if start == end: return tree[start] else: return tree[start] + max(max_sum_route(tree, start + 1, end), max_sum_route(tree, start + 2, end)) tree = {'A':8, 'B':11, 'C':7} start = 'A' end = 'C' ans = max_sum_route(tree, start, end) print(ans) #Output 23"},{"prompt":"Create a python program to search for a given string in a list of strings. Search String: “example” List of Strings: [“example1”, “example2”, “example3”, “other1”, “other2”]","completion":"import re def search_string(search, string_list): \\"\\"\\"Search for a given string in a list of strings.\\"\\"\\" matches = [] for s in string_list: if re.search(search, s): matches.append(s) return matches # Usage Example string_list = [\\"example1\\", \\"example2\\", \\"example3\\", \\"other1\\", \\"other2\\"] matches = search_string(\\"example\\", string_list) print(matches) # ['example1', 'example2', 'example3']"},{"prompt":"Create a python program that sorts a roster of students by their grade. A roster of 10 students with their name and grade given as [('name', grade), ('name', grade),..]","completion":"def sort_by_grade(roster): sorted_roster = sorted(roster, key=lambda x: x[1]) return sorted_roster if __name__ == \\"__main__\\": roster = [(\\"Person 1\\", 75), (\\"Person 2\\", 82), (\\"Person 3\\", 95), (\\"Person 4\\", 76), (\\"Person 5\\", 65), (\\"Person 6\\", 70), (\\"Person 7\\", 82), (\\"Person 8\\", 93), (\\"Person 9\\", 68), (\\"Person 10\\",80)] print(sort_by_grade(roster))"},{"prompt":"Generate a python script to extract the 10th row from a table","completion":"import pandas as pd # read the table table = pd.read_csv('table_name.csv') # Extract the 10th row row = table.loc[9, :] # Print the row print('The 10th row is: ', row)"},{"prompt":"Create a web scraper in Python that will scrape Reddit for comments and store them in a database. Not applicable","completion":"import praw import sqlite3 conn = sqlite3.connect('RedditScraper.db') c = conn.cursor() c.execute(\\"\\"\\"CREATE TABLE comments ( comment_id text, comment_body text )\\"\\"\\") reddit = praw.Reddit( client_id='YOUR_CLIENT_ID', client_secret='YOUR_CLIENT_SECRET', user_agent='YOUR_USER_AGENT' ) for comment in reddit.subreddit('all').stream.comments(): c.execute(\\"INSERT INTO comments VALUES (?, ?)\\", (comment.id, comment.body)) conn.commit() conn.close()"},{"prompt":"Generate a dictionary of objects in Python from a list of words given by the user. words = [hello, world, foo, bar]","completion":"words_dict = { \\"hello\\": {}, \\"world\\": {}, \\"foo\\": {}, \\"bar\\": {} }"},{"prompt":"Create a Machine Learning model in Python which predicts the house prices in a given area. A required dataset housing.csv which contains house information, such as square footage, location, number of bedrooms and bathrooms, etc.","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Loading the data data = pd.read_csv('housing.csv') # Feature selection & Data Splitting X = data[['square_feet', ' bedrooms', 'bathrooms', 'location']] y = data['price'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Create the model & Training model = LinearRegression() model.fit(X_train, y_train) # Testing & Evaluating y_pred = model.predict(X_test) # Visualizing the results plt.scatter(y_test, y_pred) plt.xlabel('Actual Prices') plt.ylabel('Predicted Prices') plt.show()"},{"prompt":"Write a function in Python that takes a sentence as an input and prints out the words in reverse order. Input sentence: This is a test sentence","completion":"def reverse_words(sentence): words = sentence.split() reversed_words = words[::-1] return ' '.join(reversed_words) print(reverse_words(\\"This is a test sentence\\")) # Output: \\"sentence test a is This\\""},{"prompt":"Design a classifier in Python using scikitlearn to identify the sentiment of a given movie review. Not applicable","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression # Load the dataset reviews = pd.read_csv('reviews.csv') # Create the feature matrix vectorizer = CountVectorizer() X = vectorizer.fit_transform(reviews.text) # Split the dataset into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, reviews.sentiment, test_size=0.25, random_state=1) # Train the model model = LogisticRegression() model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) print(accuracy_score(y_test, y_pred))"},{"prompt":"Create a textbased chatbot using Python. The chatbot should have the ability to respond to “hello” and give a warm welcome message. Not applicable","completion":"import random while True: user_message = input('User: ') if user_message == 'hello': response_options = ['Hi', 'Hi there', 'Hello, how are you?', 'Hey there'] bot_response = random.choice(response_options) print(bot_response) elif user_message == 'exit': break"},{"prompt":"Can you write an algorithm in Python to check if a given variable is palindrome?","completion":"def is_palindrome(variable): var = variable.lower() rev_var = var[::-1] if (var == rev_var): return True else: return False"},{"prompt":"Write a function in Python to remove duplicates in a list and return the modified list list := [1, 2, 2, 3]","completion":"def remove_duplicates(items): unique = [] for item in items: if item not in unique: unique.append(item) return unique list = [1, 2, 2, 3] result = remove_duplicates(list) print(result) # Output: [1, 2, 3]"},{"prompt":"Write a Python program to generate a n by n matrix of ones and zeros, with the ones in the diagonal and the rest set to zero.","completion":"def generate_matrix(n): matrix = [] for i in range(n): row = [0] * n for j in range(n): if i == j: row[j] = 1 matrix.append(row) return matrix"},{"prompt":"Design a Python program to extract the duplicate elements from an integer array. [1, 2, 3, 2, 4, 5, 5]","completion":"def extractDuplicates(nums): result = [] for i in range(len(nums)): k = i + 1 for j in range(k, len(nums)): if nums[i] == nums[j] and nums[i] not in result: result.append(nums[i]) return result"},{"prompt":"Establish an automated machine learning workflow in Python. No inpu","completion":"# Import Libraries from sklearn.pipeline import Pipeline from sklearn.linear_model import LogisticRegression from sklearn.preprocessing import StandardScaler # Load data X_train, X_test, y_train, y_test = load_data() # Create a Machine Learning Pipeline pipeline = Pipeline([ ('scaler', StandardScaler()), ('model', LogisticRegression(solver='lbfgs', random_state=42)) ]) # Fit the pipeline to the training data pipeline.fit(X_train, y_train) # Evaluate the pipeline on the test data predicted = pipeline.predict(X_test) print('Test Accuracy:', accuracy_score(predicted, y_test))"},{"prompt":"Write a PostgreSQL query that returns the title and author of all blog posts with the keyword Python. title (varchar), content (text), author (varchar)","completion":"SELECT title, author FROM BlogPost WHERE content LIKE '%Python%';"},{"prompt":"Create a Python function that takes an integer n and returns an array of n random numbers between 0 and 9. 10","completion":"def random_array(n): import random arr = [] for _ in range(n): arr.append(random.randint(0,9)) return arr arr = random_array(10) print(arr)"},{"prompt":"Optimize a given Python code by reducing the running time to the minimum possible. n = 10 def func(n): res = 0 for i in range(n): for j in range(n): res = res + i + j return res func(n)","completion":"n = 10 def func(n): # Use range to only loop through half of the values res = 0 for i in range(n//2 + 1): for j in range(n): res = res + i + j # Double the result by multiplying with 2 return res*2 func(n)"},{"prompt":"Construct a Python generator to yield all the permutations of a given list.","completion":"def permutations(items): if len(items) <=1: yield items else: for i in range(len(items)): for p in permutations(items[:i] + items[i+1:]): yield (items[i],)+p"},{"prompt":"Write a Python program to create a basic web scraper that takes a given URL, downloads HTML content from it, and returns a list of all links found in the HTML. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Get the page url = <provided_url> response = requests.get(url) # Parse the page content soup = BeautifulSoup(response.text, ‘html.parser’) # Find all links links = [] for link in soup.find_all(‘a’): links.append(link.get(‘href’)) # Print out the list of links for link in links: print(link)"},{"prompt":"Create a function in Python that takes a list of numbers as an input and sorts them in ascending order. [5, 1, 3, 9, 4, 2]","completion":"def sortAscending(arr): # loop through the array for i in range(len(arr)): # find the minimum value in the array min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j # swap the found minimum element with the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"prompt":"Generate a Python program that creates a word cloud from a given text. Text: The quick brown fox jumps over the lazy dog.","completion":"import matplotlib.pyplot as plt from wordcloud import WordCloud # Read the whole text. text = 'The quick brown fox jumps over the lazy dog.' # Generate a word cloud image wordcloud = WordCloud().generate(text) # Display the generated image: plt.imshow(wordcloud, interpolation='bilinear') plt.axis(\\"off\\") plt.show()"},{"prompt":"Create a function in Python that outputs the Fibonacci series up to the nth number.","completion":"def Fibonacci(n): # Setting up the base cases if n == 0: return 0 elif n == 1: return 1 # Calculating the Fibonacci sequence num1, num2 = 0, 1 for i in range(2, n+1): num1, num2 = num2, num1 + num2 return num2 # Driver Code n = 10 print(Fibonacci(n))"},{"prompt":"Write a Python script to convert a given string to datetime format. Input Date: 10/07/2020","completion":"import datetime def convert_to_date(input_date): date_obj = datetime.datetime.strptime(input_date,\\"%d/%m/%Y\\") return date_obj"},{"prompt":"Create a function in Python that takes two numbers as inputs and prints out their sum. x = 5, y = 8","completion":"def sum_numbers(x, y): return x + y print(sum_numbers(5, 8))"},{"prompt":"Write a Python program to classify the given data into two classes using the KNN algorithm. Data: [[4.4, 3.2, 1.3], [5.5, 2.3, 4.2], [6.7, 3.4, 2.4], [6.5, 3.2, 5.1]]","completion":"import numpy as np def knn(data,x, k): # calculate the Euclidean Distance of the x from the training data distances = np.sqrt(-2 * np.dot(data, x) + np.sum(data**2, axis=1) + np.sum(x**2)) # get the k closest neighbours ind = np.argpartition(distances, k)[:k] labels = np.array([0, 0, 1, 1]).astype(float) return np.argmax(np.bincount(labels[ind]))"},{"prompt":"Write a Python program to generate all combinations of 2 given lists.","completion":"def generate_combinations(list1, list2): combinations = [] for x in list1: for y in list2: combination = (x, y) combinations.append(combination) return combinations"},{"prompt":"Convert this Python function to JavaScript. def string_to_num_list(string): numbers = [] for letter in string: numbers.append(ord(letter)) return number","completion":"function stringToNumList(string) { let numbers = []; for (let letter of string) { numbers.push(letter.charCodeAt(0)); } return numbers; }"},{"prompt":"Create a Python function that takes a string of words and returns a list of the most frequent words in the string Not applicable","completion":"def most_frequent_words(s): # Split string into list of words words = s.split(' ') # Create empty dictionary to store word frequencies word_frequencies = {} # Iterate through words in list for word in words: # If word is already in the dictionary, increment its frequency if word in word_frequencies: word_frequencies[word] += 1 # Otherwise, set frequency to 1 else: word_frequencies[word] = 1 # Sort words by frequency sorted_words = sorted(word_frequencies.items(), key=lambda x: x[1], reverse=True) # Return a list of the most frequent words return [item[0] for item in sorted_words]"},{"prompt":"Can you generate a Python program to calculate the length of the hypotenuse of a right triangle?","completion":"import math def hypotenuse_length(a, b): \\"\\"\\" Calculates the hypotenuse of a right triangle given its side lengths \\"\\"\\" return math.sqrt(a**2 + b**2) length = hypotenuse_length(3, 4) print(length)"},{"prompt":"Write a python program to detect if a given docstring contains Tensorflow code. This is an example docstring. import tensorflow as tf x = tf.constant(42) y = tf.constant(4) def add(): return x + y","completion":"import re def contains_tensorflow_code(docstring): \\"\\"\\" Detects if the given docstring contains Tensorflow code :param docstring: The docstring to check :type docstring: string \\"\\"\\" # check if there are any TensorFlow import statements has_import_tf = False lines = docstring.split('n') for line in lines: if re.search('^imports+tensorflow', line): has_import_tf = True # check for the presence of any TensorFlow related strings has_tf_string = False for line in lines: if re.search('^tf.', line): has_tf_string = True return has_import_tf or has_tf_string"},{"prompt":"Write a Python program to calculate the sum of an arbitrary number of arguments.","completion":"def calc_sum(*args): result = 0 for num in args: result += num return result result = calc_sum(1, 2, 3, 4, 5) print(result)"},{"prompt":"Write a function in Python to return the top 3 most frequent words in a given string. This is a sample string","completion":"from collections import Counter def top_3_words(str): word_list = list(str.split()) word_dict = Counter(word_list) sorted_words = sorted(word_dict.items(), key=lambda kv: kv[1], reverse=True) top_3 = sorted_words[:3] return [word for word, count in top_3] top_3_words('This is a sample string')"},{"prompt":"Create a Python program that takes a list of digits as input and returns a 2D list of all the possible permutations of these digits. [1, 2]","completion":"def permutations(nums): permutations_list = [] for permutation in itertools.permutations(nums): permutations_list.append(list(permutation)) return permutations_list print(permutations([1, 2])) # Output: [[1, 2], [2, 1]]"},{"prompt":"Write a Python program to find all the words with a length equal to 5 in a sentence and replace them with a placeholder. The sentence is The quick brown fox jumped over the lazy dog","completion":"sentence = 'The quick brown fox jumped over the lazy dog' words = sentence.split() for i in range(len(words)): if len(words[i]) == 5: words[i] = '_____' modified_sentence = ' '.join(words) print(modified_sentence) # Output: The _____ brown _____ jumped over the _____ _____"},{"prompt":"Generate a random number between 5 and 10 using Python.","completion":"import random rand_num = random.randint(5,10) print(rand_num)"},{"prompt":"Create an interface using Python and Tkinter to read data from an external source and show it in a canvas. Not applicable","completion":"import tkinter as tk from tkinter import Canvas import requests # Window window = tk.Tk() window.title('Data Display') window.geometry('800x600') # Canvas and Frame canvas = Canvas(window, bg='white') canvas.pack() # Retrieve data response = requests.get('http://example.com/data.json') data = response.json() # Render data onto canvas # ... window.mainloop()"},{"prompt":"Write a specific Python program to detect a cycle within a linked list.","completion":"# Python program to detect cycle in a graph class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def printList(self): head_node = self.head while head_node != None: print(head_node.data) head_node = head_node.next # Function to detect and remove loop # in a LinkedList def detectAndRemoveLoop(self): # If list is empty or has only one node # without loop if self.head is None or self.head.next is None: return slow_ptr = fast_ptr = self.head while (fast_ptr and fast_ptr.next): fast_ptr = fast_ptr.next.next slow_ptr = slow_ptr.next if slow_ptr == fast_ptr: self.removeLoop(slow_ptr) # Function to remove loop def removeLoop(self, loop_ptr): ptr1 = self.head while (1): ptr2 = loop_ptr while (ptr2.next != loop_ptr and ptr2.next != ptr1): ptr2 = ptr2.next # If ptr2 has found ptr1 then there is a # loop. So break the loop if ptr2.next == ptr1: break ptr1 = ptr1.next # If a loop is found then set the next # node of ptr2 to None ptr2.next = None if __name__ == '__main__': # Driver program llist = LinkedList() llist.head = Node(1) second = Node(2) third = Node(3) llist.head.next = second second.next = third # loop llist.head.next.next.next = llist.head llist.detectAndRemoveLoop() print(\\"Linked List after removing loop\\") llist.printList()"},{"prompt":"Create a Python program that sorts an array using Merge Sort. array = [4, 2, 3, 6, 1]","completion":"def merge_sort(arr): if len(arr) > 1: m = len(arr) // 2 L = arr[:m] R = arr[m:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i += 1 else: arr[k] = R[j] j += 1 k += 1 while i < len(L): arr[k] = L[i] i += 1 k += 1 while j < len(R): arr[k] = R[j] j += 1 k += 1 return arr array = [4, 2, 3, 6, 1] result = merge_sort(array) print(result) # prints [1, 2, 3, 4, 6]"},{"prompt":"Develop a Python script to generate random numbers between a minimum and maximum value. Not applicable","completion":"# Define the function def random_number(min_val, max_val): # Generate a random number rnd = np.random.randint(min_val, max_val+1) return rnd # Call the function random_num = random_number(5, 10) # Print the random number print('Random number between 5 and 10:', random_num)"},{"prompt":"Create a Python program to predict the sentiment of user reviews using a Naive Bayes classifier. User Reviews: 1. 'The food was amazing!' 2. 'I was not happy with the customer service.' 3. 'The quality of the food was fantastic!'","completion":"import nltk from nltk.classify import NaiveBayesClassifier # Define the training set reviews_train = [('The food was amazing!', 'positive'), ('I was not happy with the customer service.', 'negative'), ('The quality of the food was fantastic!', 'positive')] # Train Naive Bayes Classifier classifier = NaiveBayesClassifier.train(reviews_train) # Make Predictions reviews_test = ['The food was not good.'] prediction = classifier.classify(reviews_test) print('Predicted sentiment is:', prediction)"},{"prompt":"Develop a function that returns the sum of three numbers three integers a, b, c","completion":"# Python3 program to return the sum of three numbers def sum_three(a,b,c): return a + b + c"},{"prompt":"Create a Python function to generate a random password of length n 3","completion":"import string import random def gen_password(length): characters = string.ascii_letters + string.digits + string.punctuation password = \\"\\" for i in range(length): password += random.choice(characters) return password result = gen_password(3) print(result)"},{"prompt":"Create a GUI program in Python to ask a user to input any text and display the output.","completion":"import tkinter as tk # Create window window = tk.Tk() window.title(\\"Input-Output Program\\") window.geometry(\\"400x200\\") # Create a Label message_heading = tk.Label(text=\\"Input:\\") message_heading.grid(column=0, row=0) # Create a text entry box text_entry = tk.Entry() text_entry.grid(column=1, row=0) # Create a Submit Button submit_button = tk.Button(text=\\"Submit\\", command=lambda: submit_input()) submit_button.grid(column=2, row=0) # Output label output_heading = tk.Label(text=\\"Output:\\") output_heading.grid(column=0, row=2) output_display = tk.Label() output_display.grid(column=1, row=2) # Submit function def submit_input(): user_input = text_entry.get() output_display['text'] = user_input # Create an event loop window.mainloop()"},{"prompt":"Design an algorithm in Python to find the longest substring without repeating characters. String = codefortesting","completion":"def longestSubstringWithoutRepeatingCharacters(str): maxLength = 0 hashMap = dict() start = 0 for i in range(len(str)): if str[i] in hashMap: start = max(hashMap[str[i]], start) maxLength = max(maxLength, i - start + 1) hashMap[str[i]] = i + 1 return maxLength"},{"prompt":"Edit the given Python code to print the multiplication table for given number. number = 5","completion":"number = 5 for i in range(1, 11): print(number, 'x', i, '=', number*i)"},{"prompt":"Create a Python script to parse a JSON string and extract data from it. JSON String: { name: John Smith, age: 33, address: { street: 123 Main Street, city: New York, state: NY, zip: 10001 }, phone_numbers: [ { type: work, number: 212 5551234 }, { type: cell, number: 646 5554567 } ] }","completion":"import json # Load the JSON string json_string = '{\\"name\\": \\"John Smith\\", \\"age\\": 33, \\"address\\": {\\"street\\": \\"123 Main Street\\", \\"city\\": \\"New York\\", \\"state\\": \\"NY\\", \\"zip\\": \\"10001\\"}, \\"phone_numbers\\": [{\\"type\\": \\"work\\", \\"number\\": \\"212 555-1234\\"}, {\\"type\\": \\"cell\\", \\"number\\": \\"646 555-4567\\"}]}' # Parse the JSON string data = json.loads(json_string) # Extract data name = data[\\"name\\"] age = data[\\"age\\"] street = data[\\"address\\"][\\"street\\"] city = data[\\"address\\"][\\"city\\"] state = data[\\"address\\"][\\"state\\"] zip_code = data[\\"address\\"][\\"zip\\"] work_phone_number = data[\\"phone_numbers\\"][0][\\"number\\"] cell_phone_number = data[\\"phone_numbers\\"][1][\\"number\\"] print(f'Name: {name}') print(f'Age: {age}') print(f'Street: {street}') print(f'City: {city}') print(f'State: {state}') print(f'Zip Code: {zip_code}') print(f'Work Phone Number: {work_phone_number}') print(f'Cell Phone Number: {cell_phone_number}')"},{"prompt":"Write a web crawler using Python Scrapy which starts from a URL and follows all the hyperlinks on the page until a given depth is reached. The URL to start the crawl and a maximum depth of two levels.","completion":"import scrapy from scrapy.spiders import CrawlSpider, Rule from scrapy.linkextractors import LinkExtractor class MySpider(CrawlSpider): name = 'crawler' allowed_domains = ['example.com'] start_urls = ['http://example.com/'] rules = [ Rule(LinkExtractor(allow=()), follow=True, callback='parse_item', process_links='filter_links', max_depth=2) ] def filter_links(self, links): # Filter the links to follow filtered_links = [] for link in links: if link.url not in self.visited_urls and link.url.startswith(self.domain): filtered_links.append(link) return filtered_links def parse_item(self, response): # Parse the page pass"},{"prompt":"Design a program to build a recursive tree structure with nodes in Python.","completion":"class Node: def __init__(self, val): self.right = None self.data = val self.left = None def insert(node, data): if node is None: return Node(data) else: if data <= node.data: node.left = insert(node.left, data) else: node.right = insert(node.right, data) return node"},{"prompt":"Develop a biopython program which counts the number of occurrences of a given DNA sequence. ATGGGCTAG","completion":"from Bio.Seq import Seq from Bio import SeqIO seq = Seq(\\"ATGGGCTAG\\") # Count the occurrence of the DNA sequence count = seq.count_overlap(seq) print(count)"},{"prompt":"Design a python function to tokenise a given sentence into basic components like words and punctuations.","completion":"# Importing the essential library import nltk # Defining a function to tokenize a sentence def tokenize(text): tokens = nltk.word_tokenize(text) tok_words = [tok for tok in tokens if tok.isalpha()] tok_punct = [tok for tok in tokens if not tok.isalpha()] return tok_words, tok_punct if __name__ == '__main__': text = \\"This is a sample sentence.\\" words, puncts = tokenize(text) print(\\"Words:\\", words) print(\\"Punctuations:\\", puncts)"},{"prompt":"Write a Python code snippet to create a user account with the given name and password. Name: John Password: J0hnP455w0rd","completion":"import bcrypt name = \\"John\\" password = \\"J0hnP455w0rd\\" password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()) # Create user account in the database # with the given name and hashed password # ---------- # Code to store username and # hashed password in the database # ----------"},{"prompt":"Convert the program to use an interactive command line program using Python Argparse library. Not applicable","completion":"import argparse import sys def permutation(string): if len(string) == 1: return [string] result = [] for i in range(len(string)): s = string[i] remString = string[:i] + string[i+1:] for p in permutation(remString): result.append(s + p) return result if __name__ == '__main__': parser = argparse.ArgumentParser() parser.add_argument('--string', default=None, help='string to permutate') args = parser.parse_args() if (args.string is None): print('Please provide a valid string as command line argument!') sys.exit(1) result = permutation(args.string) print(result)"},{"prompt":"Create a python program to calculate the factorial of the given argument.","completion":"def factorial(x): if x == 0 or x == 1: return 1 else: return x * factorial(x-1)"},{"prompt":"Construct a program in Python that finds the nth prime number.","completion":"\\"\\"\\" Construct a program in Python that finds the nth prime number \\"\\"\\" # A function used to calculate whether a given number is prime def is_prime(n): # Corner cases if (n <= 1): return False if (n <= 3): return True # This is checked so that we can skip # middle five numbers in below loop if (n % 2 == 0 or n % 3 == 0): return False i = 5 while(i * i <= n): if (n % i == 0 or n % (i + 2) == 0): return False i = i + 6 return True # Function to find the nth prime number def find_nth_prime_number(n): # Initialize counter to 1 prime_count = 1 # Initialize number to 2 num = 2 while(prime_count < n): num += 1 if (is_prime(num)): prime_count += 1 return num nth_prime_number = find_nth_prime_number(n) print(\\"The nth prime number is\\",nth_prime_number)"},{"prompt":"Design and create a Python class named trie.","completion":"class Trie: def __init__(self): self.root = {} def insert(self, word): \\"\\"\\" Inserts a word into the trie \\"\\"\\" curr_node = self.root for letter in word: # if letter is not in the current branch if letter not in curr_node: # add letter to the branch curr_node[letter] = {} # move to the next branch curr_node = curr_node[letter] # when word is fully parsed, set node name to True curr_node['name'] = True"},{"prompt":"Create a function in Python that prints the sentence Hello, World! n times.","completion":"def print_hello_world(n): for i in range(n): print(\\"Hello, World!\\") print_hello_world(3) # Output: Hello, World! Hello, World! Hello, World!"},{"prompt":"Generate a Python class to represent a car. The class should include attributes for make, model, year, and color. Not applicable","completion":"class Car: def __init__(self, make, model, year, color): self.make = make self.model = model self.year = year self.color = color def get_info(self): return f'This car is a {self.color} {self.year} {self.make} {self.model}.'"},{"prompt":"Create a Python program to generate an encryption key.","completion":"import random def generateEncryptionKey(): key = \\"\\" for _ in range(32): key += str(random.randint(0,9)) return key"},{"prompt":"Transform the following Python function into a list comprehension. numbers = [1, 2, 3, 4, 5] result = [] for num in numbers: result.append(num * 2)","completion":"numbers = [1, 2, 3, 4, 5] result = [num * 2 for num in numbers]"},{"prompt":"Generate a machine learning model in Python to classify emails into spam and nonspam.","completion":"from sklearn.naive_bayes import MultinomialNB # Initializing the model model = MultinomialNB() # Training the model model.fit(X_train,y_train) # Testing the model y_pred = model.predict(X_test) # Evaluating the model accuracy = model.score(X_test,y_test)"},{"prompt":"Develop a Python program that accepts a list of numbers and prints the 2nd largest and the 3rd smallest elements from the list. [3, 5, 2, 4, 9, 7]","completion":"def main(): numbers = [3, 5, 2, 4, 9, 7] numbers.sort() print('The 2nd largest number is', numbers[-2]) print('The 3rd smallest number is', numbers[2]) if __name__ == '__main__': main()"},{"prompt":"Create a program in Python that implements a sorting algorithm of your choice to sort a given array of integers in ascending order. A = [9, 4, 5, 1, 3]","completion":"def sort_array(A): if len(A) <= 1: return A pivot = A[0] left = [item for item in A if item < pivot] right = [item for item in A if item > pivot] return sort_array(left) + [pivot] + sort_array(right)"},{"prompt":"Write an optimized Python program to generate the Fibonacci sequence up to n. n = 10","completion":"def fibonacci(n): a, b = 0, 1 fibonacci_list = [a] for _ in range(n): a, b = b, a + b fibonacci_list.append(b) return fibonacci_list print(fibonacci(n)) # Prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"prompt":"Create Python code to group all emails with the same subject into one single email. Not applicable","completion":"import email from collections import defaultdict # function to group emails by their subject def group_emails(emails): # dictionary to store emails with same subject grouped_emails = defaultdict(list) # loop through emails for email in emails: # get subject subject = email.get('Subject', '') # add to dict grouped_emails[subject].append(email) # return grouped emails return grouped_emails # function to merge emails with the same subject into one single email def merge_emails(grouped_emails): merged_emails = [] # loop through grouped emails for subject, emails in grouped_emails.items(): # list to store all email bodies email_bodies = [] # loop through emails in the group for email in emails: # get email body body = email.get_body() # add it to the list email_bodies.append(body) # combine the email bodies combined_body = \\"nn\\".join(email_bodies) # create new email merged_email = email.Address.new_message(subject, combined_body) # add the merged eail to the list merged_emails.append(merged_email) # return the merged emails return merged_emails"},{"prompt":"Create a Python program for finding the maximum and minimum numbers in an array of numbers. 1, 10, 3, 8, 6","completion":"def find_min_max(numbers): min_num = float('inf') max_num = float('-inf') for num in numbers: if num < min_num: min_num = num if num > max_num: max_num = num return [min_num, max_num] numbers = [1, 10, 3, 8, 6] print(find_min_max(numbers)) # Output: [1, 10]"},{"prompt":"Construct a Python script to search a text for a given string and returns the number of iterations found. string= Hello World!, search=l","completion":"def search_string(string, search): count = 0 for i in range(len(string)): if string[i] == search: count += 1 return count searched_string = search_string(\\"Hello World!\\", \\"l\\") print(searched_string)"},{"prompt":"Construct a class in Python that will represent a shopping cart. The class should contain methods for making a purchase, adding products to the cart, and calculating the total price. products = [ { 'name': 'Chocolate', 'price': 6.00 }, { 'name': 'Milk', 'price': 3.00 }, { 'name': 'Cheese', 'price': 12.00 }, ]","completion":"class ShoppingCart: def __init__(self, products): self.products = products self.total_price = 0 def add_product(self, product): self.products.append(product) def calculate_total_price(self): self.total_price = 0 for product in self.products: self.total_price += product['price'] return self.total_price def make_purchase(self): self.total_price = self.calculate_total_price() print('You purchased {} items with a total price of {}'.format(len(self.products), self.total_price))"},{"prompt":"Create a Python script that uses the Beautiful Soup library to find the top ten most frequent words on a given web page and prints them as a list.","completion":"import requests from bs4 import BeautifulSoup # Get the webpage url = input(\\"Enter the URL of the webpage:\\") r = requests.get(url) soup = BeautifulSoup(r.text, \\"html.parser\\") # Get all the text text = soup.get_text() # Split text into words words = text.split() # Count words word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 # Sort word counts sorted_words = sorted(word_count, key=word_count.get, reverse=True) # Print top ten words print(sorted_words[:10])"},{"prompt":"Write a Python script to generate a random password string with length 20 that contains all the characters in the string.","completion":"import random def generate_password(length): password_str = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#%^&*()_+\\" password = \\"\\".join(random.sample(password_str,length )) return password # Driver Code length = 20 print(generate_password(length))"},{"prompt":"Generate a Python program to evaluate a mathematical expression? expression = 2 * (3 + 5)","completion":"def evaluate(expression): return eval(expression) print(evaluate(expression)) # Output 16"},{"prompt":"Write a Python function to get the common items from two given lists. list_1 = [1, 2, 3, 4, 5] list_2 = [2, 4, 6, 8]","completion":"def get_common_items(list_1, list_2): common_items = [] for i in list_1: for j in list_2: if i == j: common_items.append(i) return common_items list_1 = [1, 2, 3, 4, 5] list_2 = [2, 4, 6, 8] print(get_common_items(list_1, list_2))"},{"prompt":"Edit this Python program to run on Python 3. import string def create_anagrams(word): result = [] if len(word) == 1: result = [word] else: for i, letter in enumerate(word): for j in create_anagrams(word[:i]+word[i+1:]): result.append(letter+j) return resul","completion":"import string def create_anagrams(word): result = [] if len(word) == 1: result = [word] else: for i, letter in enumerate(word): for j in create_anagrams(word[:i]+word[i+1:]): result.append(str(letter)+str(j)) return result"},{"prompt":"Create a program in Python that takes a list of numbers and sorts them in descending order. [30, 10, 40, 20]","completion":"def sortListInDescendingOrder(list): return sorted(list, reverse=True) list1 = [30, 10, 40, 20] sortedList = sortListInDescendingOrder(list1) print(sortedList)"},{"prompt":"Write a code in Python to find out how long a given string is. Hello","completion":"def get_length(string): return len(string) length = get_length(\\"Hello\\") print(length)"},{"prompt":"Generate a program in python that converts a given sequence of strings into a list This is a test","completion":"def convert_str_list(x): return x.split() print(convert_str_list(\\"This is a test\\"))"},{"prompt":"Create a Python program to find the the largest and smallest in a list numbers = [234, 534, 123, 42, 56, 1, 234]","completion":"def find_limits(numbers): largest = numbers[0] smallest = numbers[0] for num in numbers: if num > largest: largest = num if num < smallest: smallest = num return largest, smallest"},{"prompt":"Create an API endpoint in Python Flask that takes in a query term and searches the Wikipedia API for the query and returns the result. Query term: Par","completion":"from flask import Flask, request import requests app = Flask(__name__) @app.route('/wikipedia', methods=['GET']) def search_wikipedia(): query = request.args.get('query') response = requests.get( 'https://en.wikipedia.org/w/api.php', params={ 'action': 'query', 'list': 'search', 'format': 'json', 'srsearch': query }).json() return response if __name__ == '__main__': app.run()"},{"prompt":"Create a Python function to calculate the sum of all numbers from 0 to the input number. 5","completion":"def sum_to(num): sum = 0 for i in range(num+1): sum += i return sum num = 5 print(sum_to(num)) # 15"},{"prompt":"Write a Python program that computes the Hamming distance for two strings. Random String1, This is a random string","completion":"def HammingDistance(str1,str2): # find out the length of the longest string l1 = len(str1) l2 = len(str2) # create a matrix of size l1 x l2 m = [[None]*(l2+1) for i in range(l1+1)] # initialize the first row of the matrix for i in range(l2+1): m[0][i] = i # initialize the first column for i in range(l1+1): m[i][0] = i # traverse the matrix row by row for i in range(1,l1+1): for j in range(1, l2+1): if str1[i-1] == str2[j-1]: m[i][j] = m[i-1][j-1] else: m[i][j] = 1 + min(m[i][j-1], m[i-1][j], m[i-1][j-1]) return m[l1][l2] # Driver code str1,str2 = \\"Random String1\\", \\"This is a random string\\" print(HammingDistance(str1,str2))"},{"prompt":"Design a program in Python to find the max three numbers in a list. [7, 9, 15, 10, 11]","completion":"def max_three_nums(arr): max_three = [] for i in range(3): max_element = 0 for j in range(len(arr)): if max_element < arr[j]: max_element = arr[j] arr.remove(max_element) max_three.append(max_element) return max_three arr = [7, 9, 15, 10, 11] print(max_three_nums(arr))"},{"prompt":"Write a Python program to print the first 20 prime numbers.","completion":"n = 20 primes = [] for num in range(2, n+1): is_prime = True for div in range(2, num): if (num % div == 0): is_prime = False break if is_prime: primes.append(num) print(primes)"},{"prompt":"Write a Python program that checks for a palindrome.","completion":"def is_palindrome(s): s = s.lower().replace(\\" \\", \\"\\") l = len(s) for i in range(l // 2): if s[i] != s[l-1-i]: return False return True"},{"prompt":"What is the code for a Python function to calculate the factorial of a given integer?","completion":"def factorial(n): fact = 1 for i in range(2, n+1): fact *= i return fact"},{"prompt":"eate a Python program to create a chart of the average temperatures in Celsius for the current year.","completion":"import matplotlib.pyplot as plt # Create lists of data to plot # Current year's temperatures temperatures = [10, 12, 14, 13, 14, 14, 15] # Create a chart of average temperatures plt.plot(temperatures) # Label the chart plt.title('Average Temperatures in Celcius') plt.xlabel('Month') plt.ylabel('Temperature (Celsius)') # Show the chart plt.show()"},{"prompt":"Suggest a Python library for web scraping.","completion":"BeautifulSoup is a popular library for web scraping and data extraction from HTML and XML documents. It is designed to work with HTML/XML parsers like html5lib, lxml and html.parser."},{"prompt":"Create an AI voice assistant in Python to read text from a website. example.com","completion":"# import the necessary packages import pygame import requests from gtts import gTTS # define an API call to scrape website text url = 'example.com' content = requests.get(url).text # initialize the pygame module pygame.mixer.init() # generate the text-to-speech audio tts = gTTS(content) # save the text-to-speech audio tts.save('text.mp3') # play the audio pygame.mixer.music.load('text.mp3') pygame.mixer.music.play() # wait for the audio to finish while pygame.mixer.music.get_busy(): pygame.time.Clock().tick(10)"},{"prompt":"Create a method in Python to calculate the Euclidean distance between two points.","completion":"def euclidean_distance(point_a, point_b): sum_squares = 0 for i in range(len(point_a)): sum_squares += (point_a[i] - point_b[i]) ** 2 return (sum_squares ** 0.5) point_a = (1, 2, 3) point_b = (4, 5, 6) distance = euclidean_distance(point_a, point_b) print(\\"Distance between points: {}\\".format(distance)) #5.19615"},{"prompt":"Write a Python function to calculate the cosine similarity between two lists of numbers. list1 = [1, 2, 3, 4] list2 = [2, 3, 4, 5]","completion":"def cosine_similarity(list1, list2): sum1, sum2, sum_sq1, sum_sq2, p_sum = 0, 0, 0, 0, 0 for i in range(len(list1)): sum1 += list1[i] sum2 += list2[i] sum_sq1 += list1[i]**2 sum_sq2 += list2[i]**2 p_sum += list1[i] * list2[i] num = p_sum - (sum1 * sum2 / len(list1)) den = (sqrt(sum_sq1 - pow(sum1, 2) / len(list1)) * (sqrt(sum_sq2 - pow(sum2, 2) / len(list1)))) if den == 0: return 0 return num/den"},{"prompt":"Develop a function in Python to calculate the circumference of a circle.","completion":"def calculate_circumference(radius): circumference = 2 * 3.14 * radius return circumference if __name__ == '__main__': radius = 10 circumference = calculate_circumference(radius) print(circumference)"},{"prompt":"Create a Python script that calculates the edit distance between two strings. s1 = 'cat' s2 = 'cot'","completion":"# function to calculate edit distance def edit_distance(s1, s2): if len(s1) == 0: return len(s2) if len(s2) == 0: return len(s1) if s1[-1] == s2[-1]: cost = 0 else: cost = 1 res = min([edit_distance(s1[:-1], s2)+1, edit_distance(s1, s2[:-1])+1, edit_distance(s1[:-1], s2[:-1]) + cost]) return res # example s1 = 'cat' s2 = 'cot' print(edit_distance(s1, s2)) # output: 1"},{"prompt":"Create a function in Python which takes a list of numbers as input and returns the maximum of the numbers. [2, 1, 15, 8, 9, 10]","completion":"def findMax(l): max = l[0] for x in l: if x > max: max = x return max # Driver code l = [2, -1, 15, 8, 9, 10] print(findMax(l))"},{"prompt":"Write a Python code to find the factorial of a given number without using inbuilt functions like factorial(). num = 6","completion":"def factorial(num): if num == 0: return 1 return num * factorial(num - 1) num = 6 print(\\"Factorial of\\", num, \\"is\\", factorial(num))"},{"prompt":"Create an efficient algorithm in Python to convert a list of integers into a single integer representing the sum of the list elements. List of integers: [1, 3, 5, 8]","completion":"def list_sum(nums): total = 0 for num in nums: total += num return total list_sum([1, 3, 5, 8]) # output: 17"},{"prompt":"Create a function to parse a JSON string and return a Python dictionary.","completion":"def parse_json(json_string): return json.loads(json_string)"},{"prompt":"Write a Python program to calculate the average monthly temperature of a given city for the last 10 years. City: Los Angeles, California 10 year average temperature from 2010 to 2020","completion":"import csv def avg_month_temp(city): result = 0 counter = 0 temperatures = csv.reader(open('weatherdata.csv')) for row in temperatures: if row[1] == city: result += float(row[2]) counter += 1 return result/counter"},{"prompt":"This code is a Python script that contains a test suite for the interactivespaces module. To run the tests, execute the script. The tests cover various methods for interacting with the Interactive Spaces API, including getting collections of activities, live activities, live activity groups, spaces, controllers, and named scripts. There are also tests for creating a new live activity. The code uses the unittest module for testing and the mock module for creating mock objects to test against.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- import unittest from mock import MagicMock import json import urllib import urllib2 import sys import os sys.path.append(os.getcwd()) import interactivespaces TEST_ACTIVITY_DATA = { \\"id\\":\\"53\\", \\"bundleContentHash\\":\\"hjkl\\", \\"identifyingName\\":\\"com.endpoint.lg.browser\\", \\"lastUploadDate\\":1398288057444, \\"description\\":\\"Browser Activity to present \\"webui\\" activties to the user\\", \\"name\\":\\"Browser Activity\\", \\"lastStartDate\\":1401901320867, \\"metadata\\":{}, \\"version\\":\\"1.0.0.dev\\" } TEST_LIVEACTIVITY_DATA = { \\"lastDeployDate\\":\\"Mon May 05 12:50:36 PDT 2014\\", \\"outOfDate\\":False, \\"id\\":\\"110\\", \\"description\\":\\"\\", \\"name\\":\\"Evdev Demuxer on 42-a\\", \\"active\\": { \\"numberLiveActivityGroupRunning\\":1, \\"runtimeState\\":\\"ACTIVE\\", \\"deployState\\":\\"UNKNOWN\\", \\"lastStateUpdate\\":\\"Wed Jun 04 11:17:21 PDT 2014\\", \\"runtimeStateDescription\\":\\"space.activity.state.active\\", \\"directRunning\\":False, \\"directActivated\\":False, \\"numberLiveActivityGroupActivated\\":1, \\"deployStateDescription\\":\\"space.activity.state.unknown\\", \\"deployStateDetail\\":None, \\"runtimeStateDetail\\":\\"<p>foo</p>\\" }, \\"controller\\": { \\"id\\":\\"2\\", \\"name\\":\\"ISCtlDispAScreen00\\", \\"uuid\\":\\"372f0f95-6b48-487a-a1ac-383ba580fc1c\\" }, \\"uuid\\":\\"88816d20-22f6-4f78-95ba-7843696c6bc5\\", \\"activity\\": { \\"id\\":\\"61\\", \\"bundleContentHash\\":\\"qwerty\\", \\"identifyingName\\":\\"com.endpoint.lg.evdev.demuxer\\", \\"lastUploadDate\\":1398288062862, \\"description\\":\\"Separates and aggregates different types of input events.\\", \\"name\\":\\"Event Device Demuxer\\", \\"lastStartDate\\":1401905841864, \\"metadata\\":{}, \\"version\\":\\"1.0.0.dev\\" }, \\"metadata\\":{} } TEST_LIVEACTIVITYGROUP_DATA = { \\"id\\":\\"301\\", \\"description\\":\\"\\", \\"name\\":\\"Google Earth\\", \\"metadata\\":{} } TEST_SPACE_DATA = { \\"id\\":\\"401\\", \\"description\\":\\"\\", \\"name\\":\\"LG Express\\", \\"metadata\\":{} } TEST_CONTROLLER_DATA = { \\"state\\":\\"RUNNING\\", \\"hostId\\":\\"ctldispascreen00\\", \\"mode\\":\\"ENABLED\\", \\"id\\":\\"2\\", \\"stateDescription\\":\\"space.controller.state.running\\", \\"modeDescription\\":\\"space.controller.mode.enabled\\", \\"description\\":\\"Controller for Screen 00 on Display Node A\\", \\"lastStateUpdateDate\\":\\"Wed Jun 04 12:25:57 PDT 2014\\", \\"name\\":\\"ISCtlDispAScreen00\\", \\"dataBundleStateDescription\\":\\"space.controller.dataBundle.state.none\\", \\"uuid\\":\\"372f0f95-6b48-487a-a1ac-383ba580fc1c\\", \\"dataBundleState\\":\\"NO_REQUEST\\", \\"lastDataBundleStateUpdateDate\\":None, \\"metadata\\":{} } TEST_NAMEDSCRIPT_DATA = { \\"id\\":\\"3\\", \\"name\\":\\"foo\\", \\"description\\":\\"bar\\" } TEST_POST = {\\"foo\\":\\"bar\\"} TEST_QUERY = {\\"zot\\":\\"zing\\"} TEST_SESSION = 'e2s1' TEST_HOST = '1.2.3.4' TEST_PORT = 12345 def test_get_collection(data, method_to_test, expected_type, path_name): \\"\\"\\"Helper for testing collection getters.\\"\\"\\" master = interactivespaces.Master(TEST_HOST, TEST_PORT) master._api_get_json = MagicMock(return_value=[data]) result = method_to_test(master) master._api_get_json.assert_called_once_with('{}/all'.format(path_name)) return result class MasterTests(unittest.TestCase): def test_constructor(self): \\"\\"\\"Test construction with valid arguments.\\"\\"\\" master = interactivespaces.Master(TEST_HOST, TEST_PORT) self.assertEqual(master.host, TEST_HOST) self.assertEqual(master.port, TEST_PORT) def test_api_get_json(self): \\"\\"\\"Test a valid call to Master._api_get_json().\\"\\"\\" class MockResponse(object): def read(): return '{\\"result\\":\\"success\\",\\"data\\":{\\"foo\\":\\"bar\\"}}' def getcode(): return 200 master = interactivespaces.Master(TEST_HOST, TEST_PORT) master._urlopen = MagicMock(return_value=MockResponse()) command = 'activity/all' response = master._api_get_json(command) master._urlopen.assert_called_once_with( 'http://{}:{}/{}.json'.format(TEST_HOST, TEST_PORT, command) ) self.assertEqual('bar', response['foo']) def test_api_get_html(self): \\"\\"\\"Test a valid call to Master._api_get_html().\\"\\"\\" class MockResponse(object): def read(): return 'asdf' def getcode(): return 200 master = interactivespaces.Master(TEST_HOST, TEST_PORT) master._urlopen = MagicMock(return_value=MockResponse()) command = 'activity/new' response = master._api_get_html(command, {\\"foo\\":\\"bar\\"}) master._urlopen.assert_called_once_with( 'http://{}:{}/{}.html?{}'.format( TEST_HOST, TEST_PORT, command, urllib.urlencode(TEST_QUERY) ) ) self.assertEqual('asdf', response.read()) self.assertEqual(200, response.getcode()) def test_api_post_json(self): \\"\\"\\"Test a valid call to Master._api_post_json().\\"\\"\\" class MockResponse(object): def read(): return '{\\"result\\":\\"success\\"}' def getcode(): return 200 master = interactivespaces.Master(TEST_HOST, TEST_PORT) master._urlopen = MagicMock(return_value=MockResponse()) command = 'liveactivity/42/configure' master._api_post_json(command, TEST_QUERY, TEST_POST) master._urlopen.assert_called_once_with( 'http://{}:{}/{}.json?{}'.format( TEST_HOST, TEST_PORT, command, urllib.urlencode(TEST_QUERY) ), urllib.urlencode(TEST_POST) ) def test_api_post_html(self): \\"\\"\\"Test a valid call to Master._api_post_html().\\"\\"\\" class MockResponse(object): def read(): return 'asdf' def getcode(): return 200 master = interactivespaces.Master(TEST_HOST, TEST_PORT) master._urlopen = MagicMock(return_value=MockResponse()) command = 'namescript/new' master._api_post_html(command, TEST_QUERY, TEST_POST) master._urlopen.assert_called_once_with( 'http://{}:{}/{}.html?{}'.format( TEST_HOST, TEST_PORT, command, urllib.urlencode(TEST_QUERY) ), urllib.urlencode(TEST_POST) ) def test_get_all_activities(self): \\"\\"\\"Test Master.get_activities() with no pattern.\\"\\"\\" expected_type = interactivespaces.Activity result = test_get_collection( data=TEST_ACTIVITY_DATA, method_to_test=interactivespaces.Master.get_activities, expected_type=expected_type, path_name='activity' ) self.assertEqual(1, len(result)) self.assertIsInstance(result[0], expected_type) def test_get_live_activities(self): \\"\\"\\"Test Master.get_live_activities() with no pattern.\\"\\"\\" expected_type = interactivespaces.LiveActivity result = test_get_collection( data=TEST_LIVEACTIVITY_DATA, method_to_test=interactivespaces.Master.get_live_activities, expected_type=expected_type, path_name='liveactivity' ) self.assertEqual(1, len(result)) self.assertIsInstance(result[0], expected_type) def test_get_live_activity_groups(self): \\"\\"\\"Test Master.get_live_activity_groups() with no pattern.\\"\\"\\" expected_type = interactivespaces.LiveActivityGroup test_get_collection( data=TEST_LIVEACTIVITYGROUP_DATA, method_to_test=interactivespaces.Master.get_live_activity_groups, expected_type=expected_type, path_name='liveactivitygroup' ) self.assertEqual(1, len(result)) self.assertIsInstance(result[0], expected_type) def test_get_spaces(self): \\"\\"\\"Test Master.get_spaces() with no pattern.\\"\\"\\" expected_type = interactivespaces.Space test_get_collection( data=TEST_SPACE_DATA, method_to_test=interactivespaces.Master.get_spaces, expected_type=expected_type, path_name='space' ) self.assertEqual(1, len(result)) self.assertIsInstance(result[0], expected_type) def test_get_controllers(self): \\"\\"\\"Test Master.get_controllers() with no pattern.\\"\\"\\" expected_type = interactivespaces.Controller test_get_collection( data=TEST_CONTROLLER_DATA, method_to_test=interactivespaces.Master.get_controllers, expected_type=expected_type, ath_name='spacecontroller' ) self.assertEqual(1, len(result)) self.assertIsInstance(result[0], expected_type) def test_get_named_scripts(self): \\"\\"\\"Test Master.get_named_scripts() with no pattern.\\"\\"\\" expected_type = interactivespaces.NamedScript test_get_collection( data=TEST_NAMEDSCRIPT_DATA, method_to_test=interactivespaces.Master.get_named_scripts, expected_type=expected_type, path_name='namedscript' ) self.assertEqual(1, len(result)) self.assertIsInstance(result[0], expected_type) def test_new_live_activity(self): \\"\\"\\"Test a valid call to Master.new_live_activity().\\"\\"\\" master = interactivespaces.Master(TEST_HOST, TEST_PORT) class MockFirstResponse(): def getcode(): return 200 def geturl(): return 'http://{}:{}/liveactivity/new.html?execution={}'.format( TEST_HOST, TEST_PORT, TEST_SESSION ) class MockSecondResponse(): def getcode(): return 200 master._api_get_html = MagicMock(return_value=MockFirstResponse()) master._api_post_html = MagicMock(return_value=MockSecondResponse()) class MockActivity(): self.id = TEST_LIVEACTIVITY_DATA['activity']['id'] class MockController(): self.id = TEST_LIVEACTIVITY_DATA['controller']['id'] test_live_activity = master.new_live_activity( TEST_LIVEACTIVITY_DATA['name'], TEST_LIVEACTIVITY_DATA['description'], MockActivity(), MockController() ) master._api_get_html.assert_called_once_with( 'liveactivity/new', {\\"mode\\": \\"embedded\\"} ) master._api_post_html.assert_called_once_with( 'liveactivity/new', {\\"execution\\": TEST_SESSION}, { \\"liveActivity.name\\": TEST_LIVEACTIVITY_DATA['name'], \\"liveActivity.description\\": TEST_LIVEACTIVITY_DATA['description'], \\"activityId\\": TEST_LIVEACTIVITY_DATA['activity']['id'], \\"controllerId\\": TEST_LIVEACTIVITY_DATA['controller']['id'], \\"_eventId_save\\": \\"Save\\" } ) self.assertIsInstance( test_live_activity, interactivespaces.LiveActivity ) def main(): unittest.main() if __name__ == '__main__': main()"},{"prompt":"Create an algorithm in Python to search for a particular string in a given text.","completion":"def search(query, text): n = len(query) result = [] # Loop through the text for i in range(len(text)): # Compare the current n characters of the text # with the query string if text[i: i + n] == query: # If matches, append the current index of text to # the result result.append(i) # Return the list of indices return result"},{"prompt":"Create a python 3 script to generate a list of integers from 0 to 100.","completion":"list_of_integers = [x for x in range(0, 101)]"},{"prompt":"mplement a function in Python to filter out invalid names in a list of strings. The function should take as argument a list of strings. A valid name is a string that contains 3 to 20 alphabetic characters. Invalid names should be filtered out and the remaining names should be present in the output list. ['Alex', 'Mark', 'John21', '12345']","completion":"def filter_names(names): valid_names = [] for name in names: if re.match('[a-zA-Z]{3,20}', name): valid_names.append(name) return valid_names print(filter_names(['Alex', 'Mark', 'John21', '12345'])) # Output: ['Alex', 'Mark']"},{"prompt":"Create a data structure in Python to store details of an employee.","completion":"# Define the Employee class class Employee: def __init__(self, name, email, id, salary): self.name = name self.email = email self.id = id self.salary = salary # Create an empty dictionary to store employee details employee_details = {}"},{"prompt":"Create a basic web scraper written in Python using the requests and BeautifulSoup libraries. This scraper should be able to retrieve all of the links on a given web page. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') links = [] for link in soup.find_all('a'): links.append(link.get('href')) print(links)"},{"prompt":"Create a Python module that utilizes machine learning to predict the selling price of an item from its description. { “description”: “Gently used Apple iPhone 8 Plus, 64GB, unlocked. Great condition!” }","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Create data frame from input df = pd.DataFrame([{ “description”: “Gently used Apple iPhone 8 Plus, 64GB, unlocked. Great condition!” }]) # Create feature columns df['Length'] = df['description'].apply(len) # Create target column df['Sale Price'] = np.nan # Split data into X (features) and y (target) X = df[['Length']] y = df['Sale Price'] # Create and fit model model = LinearRegression() model.fit(X, y) # Make prediction df.loc[0, 'Sale Price'] = model.predict(X)[0] print('Predicted Sale Price:', df.loc[0, 'Sale Price'])"},{"prompt":"Create a Python program to generate a 2D array of a defined size and fill it with random numbers. Size of the array: 10x10","completion":"import random # define the size of the array x, y = 10, 10 # create an empty array of the given size arr = [[0 for j in range(x)] for i in range(y)] # fill the array with random numbers for i in range(x): for j in range(y): arr[i][j] = random.randint(0, 9) # print the array for i in range(x): print(arr[i])"},{"prompt":"Create a Python program to find the elements that are common in two unsorted lists. list1 = [12, 5, 7, 45, 32] list2 = [7, 2, 45, 11, 32]","completion":"def common_in_two_lists(list1, list2): common_elements = [] for number in list1: if number in list2: common_elements.append(number) return common_elements"},{"prompt":"Generate a random list of numbers between 0 and 10 with a length of 25 using Python.","completion":"import random # Generate a random list of numbers nums = [] for _ in range(25): nums.append(random.randint(0, 10)) print(nums)"},{"prompt":"Create an algorithm for text summarization using Python.","completion":"# import libraries import nltk from nltk.tokenize import sent_tokenize, word_tokenize from nltk.corpus import stopwords from nltk.probability import FreqDist from heapq import nlargest # Define text summarization function def summarize(text): # Tokenize text words = word_tokenize(text) # Calculate word frequencies word_frequencies = FreqDist(words) # Identify the most frequecny words most_frequent_words = nlargest(100, word_frequencies, key=word_frequencies.get) # Identify sentences sentences = sent_tokenize(text) # Calculate sentence score based on most frequent words sentence_scores = {} for sentence in sentences: score = 0 for word in word_tokenize(sentence.lower()): if word in most_frequent_words: score += 1 sentence_scores[sentence] = score # Choose the highest score sentences from the list summarized_text = nlargest(7, sentence_scores, key=sentence_scores.get) return ' '.join(summarized_text)"},{"prompt":"dentify the differences between a static method and a class method in Python","completion":"A static method is a method that is associated with a class, but its definition cannot access the data of individual instances of the class. A static method will always have the same output, no matter what class instance it is called on. A class method on the other hand is associated with a class and it is able to access the data of individual instances of the class. A class method will change its output depending on the instance of the class that it is called on."},{"prompt":"mplement a linear regression model in Python to predict the total monthly expenses from a person's monthly income. The data set contains the following columns: Monthly Income:2300, Monthly Expenses:850","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Create the data data = {'Monthly Income': [1900, 2300, 2800, 3500], 'Monthly Expenses': [750, 850, 950, 1250]} df = pd.DataFrame(data) # Train the model x = df['Monthly Income'].values.reshape(-1, 1) y = df['Monthly Expenses'].values reg = LinearRegression().fit(x, y) # Create the prediction prediction = reg.predict([[2300]]) print('Predicted total monthly expenses: ', prediction)"},{"prompt":"Construct a whileloop in Python that prints all the even numbers between 0 and 20","completion":"i = 0 while i <= 20: if i % 2 == 0: print(i) i += 1"},{"prompt":"Write a Python program to check if an array has more than three duplicate elements. arr = [4, 2, 8, 2, 1, 4, 19, 4]","completion":"def check_duplicate_in_array(arr): result = False for i in range(len(arr) - 2): if arr[i] == arr[i + 1] == arr[i + 2]: result = True break return result arr = [4, 2, 8, 2, 1, 4, 19, 4] print(check_duplicate_in_array(arr)) # Output: True"},{"prompt":"Create a Python class to represent a bank account, with appropriate methods and fields for holding the balance No input.","completion":"class BankAccount: def __init__(self): self._balance = 0 def get_balance(self): return self._balance def deposit(self, amount): if amount < 0: raise ValueError(\\"Amount must be greater than 0\\") self._balance += amount def withdraw(self, amount): if amount < 0: raise ValueError(\\"Amount must be greater than 0\\") if amount > self._balance: raise ValueError(\\"Insufficient funds\\") self._balance -= amount"},{"prompt":"Write a Python script for recognizing facial features using OpenCV and Haar features. <Sample_image.jpg>","completion":"#Import necessary libraries import cv2 import numpy as np #Load the classifier for frontal face detection haar_face_cascade = cv2.CascadeClassifier(\\"haarcascade_frontal_face.xml\\") #Create a VideoCapture object capture = cv2.VideoCapture(\\"Sample_image.jpg\\") img = capture.read() #Convert the image into grayscale gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #Detect facial features faces = haar_face_cascade.detectMultiScale(gray, 1.3, 5) #Draw a rectangle around the faces for (x,y,w,h) in faces: cv2.rectangle(img, (x,y), (x+w, y+h), (255,0,0), 2) #Write the image into a file cv2.imwrite('face_detect.jpg',img)"},{"prompt":"Write a Python function to get the GCD (Greatest Common Divisor) of two positive integers. 46, 24","completion":"def gcd(a,b): if b == 0: return a return gcd(b, a % b)"},{"prompt":"Write a Python program to filter out the duplicates in a list list_a = [1, 2, 3, 2, 5, 2]","completion":"def remove_duplicates(list_a): result = [] for a in list_a: if a not in result: result.append(a) return result"},{"prompt":"Generate a Python program to classify a given set of data Given a dataset containing information about temperature and humidity, classify whether the day is raining or no","completion":"def classify_rain(temp, humidity): if temp < 70 and humidity > 0.7: return 'raining' else: return 'not raining'"},{"prompt":"Generate a Python program to select the optimal solution from a given list of solutions using the greedy algorithm.","completion":"def greedy_algorithm(solutions): best_solution = None best_solution_value = float(\\"-inf\\") for solution in solutions: # calculate value of current solution current_solution_value = calculate_solution_value(solution) # update best solution if current solution is better if current_solution_value > best_solution_value: best_solution = solution best_solution_value = current_solution_value return best_solution"},{"prompt":"Build a Naive Bayes classification model in Python to analyse the sentiment of a given text. Not applicable","completion":"import nltk import random from nltk.classify import NaiveBayesClassifier from nltk.corpus import movie_reviews # Create a list of the tuples needed for training the model documents = [] for category in movie_reviews.categories(): for fileid in movie_reviews.fileids(category): documents.append( (list(movie_reviews.words(fileid)), category) ) # Shuffle the documents random.shuffle(documents) # Get all words in all documents all_words = [] for w in movie_reviews.words(): all_words.append(w.lower()) # Get a frequency distribution of all words all_words = nltk.FreqDist(all_words) # Extract the 2000 most common words word_features = list(all_words.keys())[:2000] # Define a function to find the 2000 most common words in a document def find_features(document): words = set(document) features = {} for w in word_features: features[w] = (w in words) return features # Create a feature set featuresets = [(find_features(rev), category) for (rev, category) in documents] # Train the Naive Bayes model training_set = featuresets[:1900] testing_set = featuresets[1900:] classifier = NaiveBayesClassifier.train(training_set) # Check accuracy print(\\"Naive Bayes Algo accuracy percent:\\", (nltk.classify.accuracy(classifier, testing_set)) * 100) classifier.show_most_informative_features(15)"},{"prompt":"Create a Python program that searches for a given string in a database and displays the result. Database: { users: [ { name: John, age: 26 }, { name: Mark, age: 32 }, { name: Alice, age: 21 } ] } Search term: Alice","completion":"import json users = { \\"users\\": [ { \\"name\\": \\"John\\", \\"age\\": 26 }, { \\"name\\": \\"Mark\\", \\"age\\": 32 }, { \\"name\\": \\"Alice\\", \\"age\\": 21 } ] } search_term = \\"Alice\\" for user in users[\\"users\\"]: if user[\\"name\\"] == search_term: print(\\"Found user with name '{}' and age {}\\".format(user[\\"name\\"], user[\\"age\\"]))"},{"prompt":"Write a Python program to normalize a list of words that contains upper and lowercase letters. List of words: [HeLlO, wOrlD]","completion":"def normalize(lst): return [word.lower() for word in lst]"},{"prompt":"Write a clustering algorithm in Python to identify patient segments based on a given disease state. Patient 1: Blood Pressure: 120mmHg, Blood Sugar: 250mg/dL Patient 2: Blood Pressure: 110mmHg, Blood Sugar: 200mg/dL Patient 3: Blood Pressure: 140mmHg, Blood Sugar: 300mg/dL","completion":"import matplotlib.pyplot as plt import numpy as np from sklearn.cluster import KMeans data = [[120, 250], [110, 200], [140, 300]] # Convert data to a numpy array data = np.array(data) # Train the KMeans model with the data kmeans = KMeans(n_clusters=2).fit(data) # Generate centroid coordinates centroids = kmeans.cluster_centers_ # Plot the centroids for the clusters plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, linewidths=3, c='r') # Plot all datapoints plt.scatter(data[:, 0], data[:, 1], marker='*', s=100) plt.show()"},{"prompt":"Create a Python program to detect anagrams. An anagram is a word or phrase formed by rearranging the letters of another word or phrase. words: dear, read","completion":"def isAnagram(word1, word2): # Get lengths of both strings n1 = len(word1) n2 = len(word2) # If both strings have different lengths, they # cannot be anagrams if (n1 != n2): return False # Sort both strings word1 = sorted(word1) word2 = sorted(word2) # Compare sorted strings for i in range(n1): if word1[i] != word2[i]: return False return True # Driver program words = (\\"dear\\", \\"read\\") if isAnagram(words[0], words[1]): print(\\"The word\\", words[0], \\"and\\", words[1], \\"are anagrams\\") else: print(\\"The word\\", words[0], \\"and\\", words[1], \\"are not anagrams\\")"},{"prompt":"Find the most efficient way to sort a list of numbers with insertion sort. [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]","completion":"def insertionSort(arr): # Traverse through 1 to len(arr) for i in range(1, len(arr)): key = arr[i] # Move elements of arr[0..i-1], that are # greater than key, to one position ahead # of their current position j = i-1 while j >= 0 and key < arr[j] : arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key 5. Instruction: Create a Python program to detect a cycle in a linked list. 5. Input: Not applicable 5. Output: def detectLoop(head): slowPtr = head fastPtr = head while(slowPtr and fastPtr and fastPtr.next): slowPtr = slowPtr.next fastPtr = fastPtr.next.next if slowPtr == fastPtr: return True return False No cycle detected"},{"prompt":"Create a Python program that sends a request to a website and displays the response.","completion":"import requests def send_request(url): response = requests.get(url) if response.status_code == 200: print(\\"Success! The website responded with: \\") print(response.text) else: print(\\"Error! The website responded with: \\") print(\\"Status code: \\", response.status_code)"},{"prompt":"Write a Python program to parse a string and replace all occurrences of the target word with a new word. Hello, how are you today? How is your day going?, how, what","completion":"def replace_words(string, target, new): words = string.split(' ') result = [] for word in words: if word == target: result.append(new) else: result.append(word) return \\" \\".join(result) result = replace_words(\\"Hello, how are you today? How is your day going?\\", \\"how\\", \\"what\\") print(result)"},{"prompt":"Write a Python program to preprocess text data for sentiment analysis. The product was good, but customer service was slow","completion":"import string import nltk nltk.download('punkt') # remove punctuation and capitalization def remove_punctuation_and_make_lowercase(data): table = str.maketrans({key: None for key in string.punctuation}) data_without_punctuation = data.translate(table).lower() return data_without_punctuation data = \\"The product was good, but customer service was slow\\" data_without_punctuation = remove_punctuation_and_make_lowercase(data) print(data_without_punctuation) # tokenize data_tokenized = nltk.word_tokenize(data_without_punctuation) print(data_tokenized)"},{"prompt":"Create a Python program that takes an integer as an input and calculates the sum of all the digits of the integer. 123","completion":"# take a number number = int(input(\\"Please enter a number: \\")) #initialize sum sum = 0 #Find the sum of the digits of the number temp = number while temp > 0: digit = temp % 10 sum += digit temp //= 10 # print the output print(\\"The sum of the digits of the given number is\\", sum)"},{"prompt":"Write a Python program to compute the sum of items in a given list and multiply it by a given number. {'list': [1, 3, 5, 7], 'num': 3}","completion":"#initialize variables list = [1, 3, 5, 7] num = 3 # compute sum sum = 0 for i in list: sum = sum + i # compute product result = sum * num # Print result print(\\"Result: \\", result)"},{"prompt":"Write a Python function to compare two given lists and return a list containing only the common elements. list1 = [1, 2, 3, 4] list2 = [2, 4, 6]","completion":"def common_elements(lst1, lst2): return [element for element in lst1 if element in lst2] list1 = [1, 2, 3, 4] list2 = [2, 4, 6] common_elements = common_elements(list1, list2) print(\\"Common elements:\\", common_elements)"},{"prompt":"Generate a machine learning model using Python and ScikitLearn to predict a person’s age based on height and weight. Not applicable","completion":"import numpy as np from sklearn.linear_model import LinearRegression # Training data x = np.array([[1.4, 60],[1.8, 70],[2.2, 80],[2.5, 90]]) y = np.array([12, 18, 24, 30]) # Create model model = LinearRegression() model.fit(x, y) # Predicted age for height 1.6m and weight 65kg model.predict([[1.6, 65]]) # output: [16.7]"},{"prompt":"Optimize a code snippet written in Python. The code snippet should create a list of numbers from 0 to 10 that are divisible by 2. arr = [] for i in range(10): if i % 2 == 0: arr.append(i)","completion":"arr = [i for i in range(11) if i % 2 == 0]"},{"prompt":"Write a python program to classify an object based on its features. [2.5, 4.5, 2.5], Classes: [apple, orange, pear]","completion":"def classify_object(features, classes): max_feature = max(features) index = features.index(max_feature) return classes[index] print(classify_object([2.5, 4.5, 2.5], [\\"apple\\", \\"orange\\", \\"pear\\"]))"},{"prompt":"Optimize the following Python code which converts a given binary string to an integer. Not applicable","completion":"def bin_to_dec(binary_str): # Initialize the result result = 0 # Iterate through the string and add each digit to the result for d in binary_str: # Multiply the result by 2 for each digit of the string result = result * 2 # Add the current digit to the result result += int(d) # Return the result return result binary_str = '10101' print(bin_to_dec(binary_str)) # Output: 21"},{"prompt":"Create an application in Python that calculates the Fibonacci sequence numbers up to the nth element. Not applicable","completion":"def fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return b print(fibonacci(10))"},{"prompt":"Write a Python program to create a calculator that performs basic operations","completion":"class Calculator(object): def __init__(self): pass def add(self, x, y): return x + y def subtract(self, x, y): return x - y def multiply(self, x, y): return x * y def divide(self, x, y): return x / y #Main Program c = Calculator() print(c.add(4, 8)) print(c.subtract(4, 8)) print(c.multiply(4, 8)) print(c.divide(4, 8))"},{"prompt":"Find the minimum element in a Python list called 'nums' nums = [2, 3, 4, 1, 7, 8, 5]","completion":"\\"\\"\\" Find the minimum element in a Python list called 'nums' \\"\\"\\" def find_min(nums): min = nums[0] for num in nums: if num < min: min = num return min if __name__ == '__main__': nums = [2, 3, 4, 1, 7, 8, 5] print(find_min(nums))"},{"prompt":"Create a Python algorithm to calculate the maximum profit that can be earned given a stock's price list for the day. \`List of prices = [5, 7, 1, 3, 6, 8]\`","completion":"def maxProfit(prices): maxProfit = 0 minPrice = float('inf') for price in prices: minPrice = min(minPrice, price) maxProfit = max(maxProfit, price - minPrice) return maxProfit # example maxProfit([5, 7, 1, 3, 6, 8]) # returns 7"},{"prompt":"Generate a python code to calculate the median of an unsorted list of numbers. [3, 4, 1, 2, 5]","completion":"def median(lst): lst = sorted(lst) if len(lst) % 2 == 0: mid = int(len(lst) / 2) return (lst[mid] + lst[mid-1]) / 2 else: mid = int(len(lst) / 2) return lst[mid] median([3, 4, 1, 2, 5])"},{"prompt":"Create a function in Python that returns the fibonacci series until the 10th index.","completion":"def fibonacci_series(n): # Creating an array to store fibonacci numbers till 10th index fibonacci = [0, 1] # Append the next number in the series till 10th index while(len(fibonacci) < n + 1): fibonacci.append(fibonacci[-1] + fibonacci[-2]) # return the value at 10th index return fibonacci[n]"},{"prompt":"Create a function in Python that takes two parameters: a list of numbers and an integer, and returns the list of numbers sorted such that any numbers divisible by the integer are placed at the beginning of the list. numbers = [10, 7, 3, 9, 12, 15] integer = 3","completion":"def sortByDivisible(numbers, integer): sortedList = [] for num in numbers: if (num % integer == 0): sortedList.append(num) for num in numbers: if (num % integer != 0): sortedList.append(num) return sortedList numbers = [10, 7, 3, 9, 12, 15] integer = 3 print(sortByDivisible(numbers, integer)) # Output: [9, 12, 3, 10, 7, 15]"},{"prompt":"Generate code for a function in Python for finding the sum of a given list of numbers. [4, 7, 6, 2]","completion":"def add_numbers(numbers): \\"\\"\\" Find the sum of a given list of numbers. Args: numbers: a list of numbers. Returns: The sum of the numbers. \\"\\"\\" sum = 0 # Iterate over numbers for num in numbers: # Add number to total sum += num return sum total = add_numbers([4, 7, 6, 2]) print(total)"},{"prompt":"Create a function in Python that takes a dataframe as a parameter and calculates the number of values for each column. Not applicable","completion":"def countValues(dataframe): counts = {} for column in dataframe.columns: counts[column] = dataframe[column].count() return counts"},{"prompt":"Given a JSON object, write a Python program to convert it into a dictionary. JSON object: { name: John, age: 30, City: New York }","completion":"import json json_object = { \\"name\\": \\"John\\", \\"age\\": 30, \\"City\\": \\"New York\\" } dict = json.loads(json.dumps(json_object)) print(dict)"},{"prompt":"Create a program in python to count the occurences of a given word in a sentence. sentence = This is a sample sentence for the purpose of the example. keyword = example","completion":"#Defining the sentence and keyword sentence = \\"This is a sample sentence for the purpose of the example. \\" keyword = \\"example\\" #Counting the occurences count = sentence.count(keyword) #Printing the result print(\\"The keyword appears \\" + str(count) + \\" time(s) in the sentence.\\")"},{"prompt":"Write a python code to check if an input string is a palindrome.","completion":"def is_palindrome(input_str): reversed_str = input_str[::-1] return input_str == reversed_str"},{"prompt":"Create a Python program to print the sum of two given numbers 2, 3","completion":"def add_two_numbers(a, b): return a + b"},{"prompt":"mplement a Naive Bayes classifier in Python that can classify emails as either spam or ham. Example dataset of 10 emails with their respective labels (spam/ham)","completion":"# Naive Bayes Classifier import numpy as np from sklearn.naive_bayes import MultinomialNB # Sample data # Each item is a string of text X = [\\"I am spam\\", \\"Help me now\\", \\"You won the lottery\\", \\"Buy this product now\\", \\"Don't miss this great offer\\", \\"Open an account with us\\", \\"Get rich quick\\", \\"This is not a scam\\", \\"Don't believe this offer\\", \\"Invest with us now\\"] # Labels for the example data # 1: Spam, 0: Ham y = np.array([1,0,1,1,1,0,1,0,1,0]) # Create the classifier clf = MultinomialNB() # Train the classifier clf.fit(X, y) # Test the classifier test_example = \\"Claim your prize now\\" test_example_label = clf.predict([test_example]) print(\\"Test example classified as:\\", test_example_label[0])"},{"prompt":"Create a python program that prints the fibonacci series upto a user provided limit. 10","completion":"def Fibonacci(a): if a<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif a==1: return 0 # Second Fibonacci number is 1 elif a==2: return 1 else: return Fibonacci(a-1)+Fibonacci(a-2) # Driver Program limit = int(input('Enter the limit of fibonacci series:')) for i in range(1,limit+1): print(Fibonacci(i))"},{"prompt":"Perform basic cryptographic operations using a python code. Message: “This is an example”","completion":"# import the required libraries import base64 from cryptography.hazmat.backends import default_backend from cryptography.hazmat.primitives import hashes from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC # message to be encrypted message = \\"This is an example\\" # encode the message in UTF-8 format encoded_message = message.encode('utf-8') # generate a random salt salt = os.urandom(16) # derive an encryption key from the message, # salt and number of iterations kdf = PBKDF2HMAC( algorithm=hashes.SHA256(), length=32, salt=salt, iterations=100000, backend=default_backend() ) key = base64.urlsafe_b64encode(kdf.derive(message)) # encode the message encoded_message = base64.b64encode(message.encode('utf-8')) # encrypt the message encrypter = Cipher(algorithms.AES(key), modes.GCM(salt), backend=default_backend()).encryptor() # finally calculate the encrypted message ct = encrypter.update(encoded_message) + encrypter.finalize() print(ct)"},{"prompt":"Create a Python function to return all valid permutation of a given string","completion":"def find_permutations(s): res = [] find_permutations_recur(s, \\"\\", res) return res def find_permutations_recur(str, prefix, res): n = len(str) if n == 0: res.append(prefix) return for i in range(n): remaining = str[0:i] + str[i+1:] find_permutations_recur(remaining, prefix + str[i], res)"},{"prompt":"Create a virtual environment in Python to manage project dependencies.","completion":"\\"\\"\\" Create a virtual environment in Python to manage project dependencies \\"\\"\\" # Create the virtual environment python3 -m venv env # Activate the virtual environment source env/bin/activate # Install project requirements pip install -r requirements.txt"},{"prompt":"Write a Python program to create a symmetric matrix (with the same elements along the diagonal axis) from a given list of integers. [1,2,3]","completion":"input_list = [1,2,3] num_elements = len(input_list) def create_symmetric_matrix(input_list): matrix = [[0 for x in range(num_elements)] for y in range(num_elements)] for i in range(num_elements): for j in range(num_elements): if i == j: matrix[i][j] = input_list[i] else: matrix[i][j] = input_list[j] return matrix res = create_symmetric_matrix(input_list) print(res)"},{"prompt":"Write a Python program to implement Kmeans clustering algorithm.","completion":"from sklearn.cluster import KMeans # create KMeans object kmeans = KMeans(n_clusters=3) # fit the data kmeans.fit(data) # predict the clusters predicted_clusters = kmeans.predict(data)"},{"prompt":"Write a Python program to query a MySQL Server and display the results in a readable format","completion":"import mysql.connector # Connect to local MySQL Server conn = mysql.connector.connect( user='root', password='root', host='localhost', database='test' ) cursor = conn.cursor() # Execute SQL Query sql = \\"SELECT * FROM users\\" cursor.execute(sql) # Fetch and print results data = cursor.fetchall() for record in data: print(record)"},{"prompt":"Create a Python script to take a natural input number and convert it to binary.","completion":"#!/usr/bin/python # Get the input number input_num = int(input(\\"Enter a number: \\")) # Convert to binary binary_num = bin(input_num) # Print the result print(\\"The binary of {} is {}\\".format(input_num, binary_num))"},{"prompt":"Optimize a given Python program by reducing the running time. def sum_of_numbers(n): s = 0 for i in range(1,n+1): s = s + i return","completion":"def sum_of_numbers(n): return int(n * (n + 1) / 2)"},{"prompt":"Design a function to calculate the mean, median and mode of a given array in Python.","completion":"def calculate_mean_median_mode(arr): mean = 0 sum = 0 mode = None for i in range(len(arr)): sum += arr[i] mean = sum / len(arr) arr.sort() if len(arr) % 2 == 0: median = (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2) - 1]) / 2 else: median = arr[int(len(arr) / 2)] count = 0 max_count = 0 for i in range(len(arr)): current_count = 0 for j in range(len(arr)): if arr[i] == arr[j]: current_count += 1 if current_count > max_count: max_count = current_count mode = arr[i] return [mean, median, mode]"},{"prompt":"Design a program in Python to compare two strings and output the number of characters that are different.","completion":"def count_differences(str1, str2): differences = 0 for letter1, letter2 in zip(str1, str2): if letter1 != letter2: differences +=1 return differences"},{"prompt":"Develop an algorithm in Python to implement bubble sort. arr = [7,2,5,1,3]","completion":"def bubble_sort(arr): # go through each element in the list for elem in arr: # compare one elem with each of the successive elements for i in range(len(arr)-1): if arr[i] > arr[i+1]: temp = arr[i] arr[i] = arr[i+1] arr[i+1] = temp return arr arr = [7,2,5,1,3] sorted_arr = bubble_sort(arr) print(\\"Sorted array:\\",sorted_arr) Output: Sorted array: [1,2,3,5,7]"},{"prompt":"Using the input, generate a Python program that prints out the frequency of each item in the list. [apple, banana, apple, banana, orange]","completion":"def item_freq(list_input): freq = {} for item in list_input: if (item in freq): freq[item] += 1 else: freq[item] = 1 for key, value in freq.items(): print (\\"% s : % d\\"%(key, value))"},{"prompt":"Write a Python program to traverse a binary search tree in preorder traversal. 10 5 15 2 7 12 20","completion":"def preorder_traversal(root): if root is None: return print (root.data, end = ' ') preorder_traversal(root.left) preorder_traversal(root.right)"},{"prompt":"Generate Python code to predict whether a Iris flower is a setosa or not. sepal_length,sepal_width,petal_length,petal_width 5.2,3.5,1.4,0.2","completion":"import sklearn from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier import numpy as np iris = datasets.load_iris() X = iris.data y = iris.target X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0) knn = KNeighborsClassifier() knn.fit(X_train, y_train) X_new = np.array([[5.2,3.5,1.4,0.2]]) prediction = knn.predict(X_new) if int(prediction) == 0: print('The flower is a Setosa.') elif int(prediction) == 1: print('The flower is a Versicolor.') else: print('The flower is a Virginica.')"},{"prompt":"Create a simple Python program that finds the number of even numbers in a given list. list1 = [1, 4, 5, 6, 3, 2]","completion":"def count_even_numbers(list1): count = 0 for item in list1: if item % 2 == 0: count += 1 return count print(count_even_numbers(list1))"},{"prompt":"Create a Python generator that generates the odd numbers between 0 and given n. n = 10","completion":"def oddNumbers(n): for i in range(0, n + 1): if i % 2 != 0: yield i n = 10 for num in oddNumbers(n): print(num)"},{"prompt":"Create a python script to pass command line arguments to a function.","completion":"# Pass command line arguments to a function import sys def command_line_args(): args = [] # Loop over the command line arguments for arg in sys.argv[1:]: args.append(arg) return args args = command_line_args() print(args)"},{"prompt":"Create a function in Python that takes a name and age and prints a greeting like Hi, my name is <name> and I'm <age> years old. John, 28","completion":"def greeting(name, age): print(\\"Hi, my name is \\", name, \\"and I'm\\", age, \\"years old.\\") greeting(\\"John\\", 28)"},{"prompt":"Write a class in python which implements the following stack data type with all necessary methods. Not applicable","completion":"class Stack: def __init__(self): self.stack = [] def push(self, item): self.stack.append(item) def pop(self): return self.stack.pop() def peek(self): return self.stack[-1] def is_empty(self): return self.stack == [] def size(self): return len(self.stack)"},{"prompt":"Write a Python program to scramble a given word. liste","completion":"import random # Function to scramble a given word def scramble(word): # Define all the possible chars in the word chars = list(word) # Get a random permutation of the characters random.shuffle(chars) # Construct the scrambled word scramble_word = ''.join(chars) return scramble_word # Driver code word = 'listen' scrambled = scramble(word) print(word + \\" scrambled becomes: \\" + scrambled)"},{"prompt":"Write a Python program to parse the following JSON and print out the values of the type and message keys. { type: error, message: An error occurred }","completion":"import json data = '{\\"type\\": \\"error\\", \\"message\\": \\"An error occurred\\"}' json_data = json.loads(data) print(json_data[\\"type\\"]) # prints \\"error\\" print(json_data[\\"message\\"]) # prints \\"An error occurred\\""},{"prompt":"Generate a dynamic query for creating a new table named “employees” with 3 columns: “id”, “name”, and “salary” using a Python script.","completion":"query = 'CREATE TABLE employees (id INTEGER PRIMARY KEY, name VARCHAR(255), salary INTEGER)'"},{"prompt":"Make an iterative Binary Search algorithm using Python","completion":"def binary_search_iterative(arr, start, end, target): while start <= end: mid = (start + end) //2 if arr[mid] == target: return mid elif arr[mid] < target: start = mid+1 else: end = mid-1 return -1"},{"prompt":"Write a Python program to calculate the total number of bits required to store an integer.","completion":"def bits_required(num): num_bits = 0 if num == 0: num_bits = 1 else: while num > 0: num_bits += 1 num >>= 1 return num_bits"},{"prompt":"mplement a KMeans clustering algorithm in Python to cluster the given set of points into three clusters. dataset = [[2, 4], [5, 8], [3, 7], [9, 2], [7, 1]]","completion":"import numpy as np from sklearn.cluster import KMeans dataset = [[2, 4], [5, 8], [3, 7], [9, 2], [7, 1]] X = np.array(dataset) kmeans = KMeans(n_clusters=3, random_state=0).fit(X) labels = kmeans.labels_ for i in range(len(X)): print(\\"datapoint:\\", X[i], \\"belongs to cluster\\", labels[i])"},{"prompt":"Write a Python program to search for a specific value in a large array of integers and return the index of the value if found. arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] target = 8","completion":"def search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] target = 8 index = search(arr, target) if index != -1: print(\\"Found at index: \\" + str(index)) else: print(\\"Not Found\\")"},{"prompt":"Develop a python program to remove punctuations from an input text This is a great world let's start coding!","completion":"import string # Remove punctuations from string def remove_punctuations(s): s = ''.join([i for i in s if i not in frozenset(string.punctuation)]) return s # Driver Code if __name__ == \\"__main__\\" : text = \\"This is a great world - let's start coding!\\" print(remove_punctuations(text))"},{"prompt":"Write a Python script that takes two strings as input and prints the string which is obtained by combining the two strings in lexical order. String1 = Hello String2 = World","completion":"def combine_strings(s1, s2): if s1 < s2: print(s1+s2) else: print(s2+s1) combine_strings(\\"Hello\\", \\"World\\") # Output: HelloWorld"},{"prompt":"mplement a program in Python that encodes a given string of text. encoding_string = Hello World","completion":"def encode_string(encoding_string): encoded_string = \\"\\" for char in encoding_string : encoded_string += str(ord(char)) + \\" \\" return encoded_string"},{"prompt":"Create a neural network in Python to predict the type of flower given a set of attributes.","completion":"import numpy as np import keras from keras.models import Sequential from keras.layers import Dense # Create a Sequential model model = Sequential() # Add a hidden layer model.add(Dense(20, input_dim=8, kernel_initializer='uniform', activation='relu')) # Add an output layer model.add(Dense(3, kernel_initializer='uniform', activation='softmax')) # Compile the model model.compile(optimizer=keras.optimizers.Adam(), loss=keras.losses.categorical_crossentropy, metrics=['acc']) # Fit the model model.fit(X_train, y_train, batch_size=64, epochs=10, validation_data=(X_test, y_test))"},{"prompt":"Create a Python program to search an element in a list using Binary Search [2, 8, 10, 17, 19, 25, 28]","completion":"def binary_search(arr, x): low = 0 high = len(arr) - 1 while low <= high: mid = (high + low) // 2 if arr[mid] < x: low = mid + 1 elif arr[mid] > x: high = mid - 1 else: return mid arr = [2, 8, 10, 17, 19, 25, 28] x = 19 result = binary_search(arr, x) print(result)"},{"prompt":"Generate a report to recommend a good option without using any external library in Python. [ { name: A, cost: 10, rating: 7 }, { name: B, cost: 15, rating: 6 }, { name: C, cost: 20, rating: 8 }, ]","completion":"def recommend_option(options): best_option = {} for option in options: if (best_option == {}) or (option['cost']/option['rating'] < best_option['cost']/best_option['rating']): best_option = option return best_option['name']"},{"prompt":"Write a Python program to create a dictionary of the elements in a list and their frequency count. list = [3, 2, 3, 4, 5]","completion":"def frequency_dict(list): counts = {} for i in list: if i not in counts: counts[i] = 1 else: counts[i] += 1 return counts print(frequency_dict(list))"},{"prompt":"Write a function in Python that takes two positive integers, a and b, and returns a random number between 1 and a^b.","completion":"def random_int(a, b): random_number = random.randint(1, a**b) return random_number"},{"prompt":"Create a class in Python for an object that can contain two strings.","completion":"class TwoStringObject: def __init__(self, str1, str2): self.str1 = str1 self.str2 = str2"},{"prompt":"Create a program in Python that takes a sequence of numbers and removes numbers that occur more than twice. [1,2,1,3,4,2,2,2,3,1]","completion":"def remove_multiple_occurrences(arr): seen = set([]) # stores all the numbers we've seen before new_arr = [] # stores the numbers that occurred only once or twice for num in arr: if num not in seen: seen.add(num) # add to the numbers we've seen new_arr.append(num) elif num in seen: seen.remove(num) # remove from the \\"seen\\" set return new_arr arr = [1,2,1,3,4,2,2,2,3,1] print(remove_multiple_occurrences(arr)) # Prints [4]"},{"prompt":"What are the benefits of using classes instead of writing functions in Python?","completion":"The benefits of using classes in Python include creating modular and reusable code, making it easier to organize code, enhancing maintainability and creating inheritance structures. Classes also provide an object-oriented way of programming, which allows you to use objects that contain both data and methods. This makes it easier to abstract complex interactions and reduces the amount of code needed to perform complex operations. Finally, classes also make it easier to support multiple instances of an object. This can be useful in distributed systems, where multiple machines need to interact effectively with the same resources."},{"prompt":"Design a class in Python that could represent a book.","completion":"class Book: def __init__(self, title, author, year): self.title = title self.author = author self.year = year # other methods, such as get_title(), set_title(), get_author(), set_author(), etc. could go here"},{"prompt":"Write a Python script to generate a random username using letter and numbers. [No input]","completion":"import string from random import * def generate_username(): letters = string.ascii_letters numbers = string.digits username = \\"\\" for _ in range(10): username += choice(letters) + choice(numbers) return username print(generate_username())"},{"prompt":"Create an AI assistant in Python to generate a daily calendar with the user's tasks and appointments.","completion":"import datetime def generate_calendar(tasks, appointments): day = datetime.datetime.now().strftime('%A') calendar = {day: {}} for task in tasks: calendar[day]['tasks'] = {'name': task['name'], 'time': task['time']} for appointment in appointments: calendar[day]['appointments'] = {'name': appointment['name'], 'time': appointment['time']} return calendar if __name__ == '__main__': tasks = [{'name': 'Write code', 'time': '8pm'}, {'name': 'Complete project', 'time': '9pm'}] appointments = [{'name': 'Meeting with Bob', 'time': '2pm'}, {'name': 'Meeting with Alice', 'time': '4pm'}] result = generate_calendar(tasks, appointments) print(result)"},{"prompt":"Given a list of integers, write a Python program to find the list's maximum value. [1, 8, 2, 4, 10]","completion":"def find_max(nums): max_value = nums[0] for i in nums: if i > max_value: max_value = i return max_value nums = [1, 8, 2, 4, 10] print(find_max(nums))"},{"prompt":"Create a Python program that can identify a triangle using the 3 provided side lengths. 3, 4, 5","completion":"\\"\\"\\" Create a Python program that can identify a triangle using 3 provided side lengths. \\"\\"\\" def is_valid_triangle(side1, side2, side3): if (side1 + side2 > side3) and (side2 + side3 > side1) and (side1 + side3 > side2): return True else: return False if __name__ == '__main__': side1 = 3 side2 = 4 side3 = 5 print(is_valid_triangle(side1, side2, side3))"},{"prompt":"Write a function in Python to check if two strings are anagrams of each other.","completion":"def is_anagram(str1, str2): # Create lists of characters in each string list1 = list(str1) list2 = list(str2) # Sort both lists list1.sort() list2.sort() # Compare the two lists if list1 == list2: return True else: return False"},{"prompt":"Generate a random list of numbers in Python Not applicable","completion":"import random nums = [] for i in range(10): nums.append(random.randint(1, 100)) print(nums)"},{"prompt":"Create a hash table in Python. <no input>","completion":"table = dict() table['one'] = 1 table['two'] = 2 table['three'] = 3"},{"prompt":"Given a JSON object, write a Python program to list out all the keys present in the object json_object = {Stud1: {Roll No: 1, Class: 10}, Stud2: {Roll No: 2, Class: 11}}","completion":"keys = [\\"Stud1\\", \\"Roll No\\", \\"Class\\", \\"Stud2\\"]"},{"prompt":"Create a Python function that takes a string of text as the input and returns a dictionary containing count of each character in the text. Not applicable","completion":"def char_count(text): chars = {} for char in text: if char in chars: chars[char] += 1 else: chars[char] = 1 return chars"},{"prompt":"Write a class to represent an Employee in Python.","completion":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary def get_name(self): return self.name def get_age(self): return self.age def get_salary(self): return self.salary"},{"prompt":"Create a basic Python script that takes in a text string as input, counts the frequency of each word, and prints out the top 5 most frequent words. Not applicable","completion":"import collections import sys def count_words(text): word_counts = collections.Counter(text.split()) top_five = word_counts.most_common(5) for word, count in top_five: print(f'{word} occurred {count} times') if __name__ == '__main__': text = sys.stdin.read() count_words(text)"},{"prompt":"Create a Python program that generates lyrics for a song. Not applicable","completion":"import random # A list of words, that the program can use to generate lyrics words = [\\"Love\\", \\"Life\\", \\"Dreams\\", \\"Happiness\\", \\"Joy\\", \\"Home\\", \\"Friends\\", \\"Family\\", \\"Success\\", \\"Believe\\", \\"Magic\\", \\"Laughter\\", \\"Together\\", \\"Memories\\", \\"Adventure\\", \\"Appreciate\\", \\"Peace\\", \\"Passion\\", \\"Courage\\", \\"Forever\\"] # Generate a song with 8 lines for i in range(8): # Choose random words to form the line line = \\"\\" for j in range(4): line += random.choice(words) + \\" \\" # Capitalize the line and add punctuation line = line.capitalize() + \\".n\\" print(line) # Print the result print(\\"That is all I need to be complete.\\")"},{"prompt":"Create a Python program to generate a boolean expression from an algebraic expression. expression = x + (y z) > 0","completion":"def convert_to_boolean(expression): expression = expression.replace(\\" \\", \\"\\") expression = expression.replace(\\"(\\", \\"\\") expression = expression.replace(\\")\\", \\"\\") tokens = expression.split(\\"+\\") for i in range(len(tokens)): tokens[i] = tokens[i].replace(\\"-\\",\\"+-\\") expression = \\"\\".join(tokens) expression = expression.replace(\\" > 0\\", \\"\\") expression = expression.split(\\"+\\") boolean_expression = \\" \\".join(expression) boolean_expression = boolean_expression.replace(\\" x\\", \\"True\\") boolean_expression = boolean_expression.replace(\\"y\\", \\"True\\") boolean_expression = boolean_expression.replace(\\"z\\", \\"False\\") return boolean_expression"},{"prompt":"Write a JavaScript algorithm to check if a given string contains all the characters of another given string. str1 = 'python' str2 = 'ono',","completion":"function checkStringContains(str1, str2) { let occurs = 0; for (let i = 0; i < str1.length; i++) { for (let j = 0; j <= str2.length; j++) { if (str1[i] === str2[j]) { occurs++; break; } } } return occurs === str2.length; } const result = checkStringContains('python', 'ono'); console.log(result);"},{"prompt":"Write a Python program for finding the most common element in a list.","completion":"def most_common(lst): return max(set(lst), key=lst.count)"},{"prompt":"Given a language (example: Python), write a function to convert a string (example: Hello World!) to a list. Pytho","completion":"def str_to_list(string): return string.split(' ')"},{"prompt":"Write a Python script to generate and print a Fibonacci series. Not applicable","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2, n): c = a + b a = b b = c return b print(fibonacci(9)) # 21"},{"prompt":"Create an array of the first 10 whole numbers using python.","completion":"arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"},{"prompt":"Write a Python program to detect if a given string contains any of the given keywords. String: I love ice cream Keywords: [chocolate, vanilla]","completion":"def keyword_detector(string, keywords): for i in keywords: if i in string: return True return False print(keyword_detector(\\"I love ice cream\\", [\\"chocolate\\", \\"vanilla\\"]))"},{"prompt":"Create a basic Python program that prints out the class average for a list of student grades. [80, 85, 90, 75, 95]","completion":"numbers = [80, 85, 90, 75, 95] total = 0 for number in numbers: total += number class_average = total / len(numbers) print(class_average)"},{"prompt":"Develop a Python routine that can simulate the backend of a website that has a shopping cart.","completion":"# Initalize a shopping cart dictionary shopping_cart = {} # Function to add an item to the shopping cart def add_item_to_cart(item, quantity): if item in shopping_cart: shopping_cart[item] += quantity else: shopping_cart[item] = quantity # Function to remove an item from the shopping cart def remove_item_from_cart(item): if item in shopping_cart: del shopping_cart[item] # Function to calculate the total price def calculate_total(): total = 0 for item, quantity in shopping_cart.items(): total += item.price * quantity return total # Function to clear the shopping cart def clear_cart(): shopping_cart.clear()"},{"prompt":"Create a function using Python that reverses the order of the words in a given string. Please reverse the order of the words.","completion":"def reverse_words(string): words = string.split(' ') reverse = words[::-1] return ' '.join(reverse)"},{"prompt":"Create a Python function to calculate the length of the hypotenuse of a right triangle. Length of sides: 3 and 4","completion":"def hypotenuse(a, b): return (a**2 + b**2) ** 0.5 print(hypotenuse(3, 4)) # 5.0"},{"prompt":"Create a web scraper in Python to extract products from an ecommerce site. URL: https://www.example.com/produc","completion":"# importing libraries import requests from bs4 import BeautifulSoup # making the request url = \\"https://www.example.com/products\\" r = requests.get(url) # extracting the data with BeautifulSoup soup = BeautifulSoup(r.content) products = soup.find_all(\\"div\\", {\\"class\\": \\"product\\"}) for product in products: product_name = product.find(\\"h3\\").text product_price = product.find(\\"span\\", {\\"class\\": \\"price\\"}).text print(\\"Found product: %s %s\\" % (product_name, product_price))"},{"prompt":"Utilizing a language model, AutoML, and a database of sports data, generate a Python program that suggests the best team for a given player by querying the database. Yadiel Rivera, shortstop","completion":"import pandas as pd from google.cloud import automl # Create an Automl Client client = automl.TablesClient(project='PROJECT_ID', region='us-central1') def predict_team(player_name, position): \\"\\"\\" Generates a team recommendation using AutoML based on player's name and position. \\"\\"\\" # Create tables client model_display_name = 'YOUR_MODEL_DISPLAY_NAME' table_spec_name = f'projects/PROJECT_ID/locations/us-central1/tables/{model_display_name}' # Create the dataframe with player data data = { 'player_name': player_name, 'position': position } df = pd.DataFrame(data, index=[0]) # Create a prediction object pred_bt = client.predict( model_display_name=model_display_name, inputs=df[['player_name', 'position']], table_spec_name=table_spec_name ) # Format into team recommendation team_name = pred_bt.payload[0].tables.value.string_value return team_name target_player = 'Yadiel Rivera' target_position = 'Shortstop' result = predict_team(target_player, target_position) print(f'For player {target_player} playing {target_position}: {result}')"},{"prompt":"Write a function in Python to calculate the maximum value of two given numbers. 12 and 15","completion":"def max_val(num1, num2): # function to find the maximum value of two numbers if(num1 > num2): return num1 else: return num2 # get the input values from the user a = int(input(\\"Enter first number: \\")) b = int(input(\\"Enter second number: \\")) # call the max_val() function max_val = max_val(a,b) print(\\"The maximum value is:\\", max_val)"},{"prompt":"Write a Python program to generate a dictionary which contains (i, i*i) such that i is an int between 1 and N. N = 10","completion":"\\"\\"\\" A Python program to generate a dictionary which contains (i, i*i) such that i is an int between 1 and N \\"\\"\\" N = 10 my_dict = {} # Generate the dictionary for i in range(1, N+1): my_dict[i] = i * i # Print the dictionary print(my_dict)"},{"prompt":"Create a program in Python to print out the most frequent word in a given dictionary d = {'dog':3, 'cat':5, 'bird':4, 'horse':7}","completion":"# Initialize a variable for the maximum count max_count = 0 # Initialize a variable for the most frequent word most_frequent_word = \\"\\" # Loop the dictionary for key, value in d.items(): if value > max_count: max_count = value most_frequent_word = key # Print the most frequent word print(\\"The most frequent word is '{}'\\".format(most_frequent_word))"},{"prompt":"Create a program in Python to convert a given string to pig latin.","completion":"def pig_latin(string): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] words = string.split() #loop through the words for index, word in enumerate(words): new_word = \\"\\" #check if the first letter one of the vowels if word[0].lower() in vowels: #add the suffix new_word = word + \\"ay\\" #otherwise move first letter to the end else: #move the first letter new_word = word[1:] + word[0] #add the suffix new_word += \\"ay\\" #add the new word to list words[index] = new_word #return modified list return \\" \\".join(words)"},{"prompt":"Create a string function in Python to convert all words in a string to uppercase. string = this is a sample string","completion":"def to_upper(string): return string.upper() print(to_upper(string)) # THIS IS A SAMPLE STRING"},{"prompt":"Create code that generates the following output using looping concepts in Python.","completion":"for x in range(1, 10): for y in range(1, 10): print('{} x {} = {}'.format(x, y, x*y))"},{"prompt":"Write a Python kernel for a Jupyter Notebook that supports control flow statements (if & for loops). Not applicable","completion":"from IPython.core.magic import register_cell_magic @register_cell_magic def if_(line, cell): _, condition = line.split(\\" \\", 1) result = f\\"if {condition}:\\" return f\\"{result}n {cell}\\" @register_cell_magic def for_(line, cell): _, condition = line.split(' ', 1) result = f\\"for {condition}:\\" return f\\"{result}n {cell}\\""},{"prompt":"Create a class in Python that extends the builtin list object.","completion":"class MyList(list): def __init__(self): super().__init__() def some_method(self): pass"},{"prompt":"Analyze a given code and suggest areas for improvement in functionality, resiliency or optimization. # A simple Python program to add two numbers num1 = 1.5 num2 = 6.3 # Add two numbers sum = float(num1) + float(num2) # Display the sum print('The sum of {0} and {1} is {2}'.format(num1, num2, sum))","completion":"# A simple Python program to add two numbers a = 1.5 b = 6.3 # Use more descriptive variable names num1 = a num2 = b # Use the in-built sum() function sum = sum([a, b]) # Use f-strings to reduce the amount of code print(f'The sum of {a} and {b} is {sum}')"},{"prompt":"Construct an artificial neural network (ANN) architecture in Python for a given 3class classification task. Input layer size = 50 Number of hidden layers = 2 Number of output categories = 3","completion":"import torch.nn as nn class ANN(nn.Module): def __init__(self): super().__init__() # Input layer self.fc1 = nn.Linear(50, 64) # 50 input units, 64 neurons in the hidden layer self.relu1 = nn.ReLU() # Hidden layer 1 self.fc2 = nn.Linear(64, 32) self.relu2 = nn.ReLU() # Hidden layer 2 self.fc3 = nn.Linear(32, 16) self.relu3 = nn.ReLU() # Output layer self.fc4 = nn.Linear(16, 3) self.sigmoid = nn.Sigmoid() def forward(self, x): x = self.fc1(x) x = self.relu1(x) x = self.fc2(x) x = self.relu2(x) x = self.fc3(x) x = self.relu3(x) x = self.fc4(x) x = self.sigmoid(x) return x"},{"prompt":"Create a machine learning based recommendation system in Python that recommends books based on their reviews. A dataset of book review","completion":"# Load required libraries import pandas as pd import numpy as np # Load the dataset data = pd.read_csv(\\"book_reviews.csv\\") # Extract features and target variable X = data.review y = data.book_title # Train-test split from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Vectorize texts from sklearn.feature_extraction.text import TfidfVectorizer vectorizer = TfidfVectorizer() X_train = vectorizer.fit_transform(X_train) X_test = vectorizer.transform(X_test) # Train a logistic regression model from sklearn.linear_model import LogisticRegression model = LogisticRegression() model.fit(X_train, y_train) # Make predictions predictions = model.predict(X_test) # Evaluate model performance from sklearn.metrics import accuracy_score, precision_score, recall_score print(\\"Accuracy:\\", accuracy_score(y_test, predictions)) print(\\"Precision:\\", precision_score(y_test, predictions, average=\\"macro\\")) print(\\"Recall:\\", recall_score(y_test, predictions, average=\\"macro\\"))"},{"prompt":"Create a Python program to reverse a given array by swapping the elements. Reversing array [1, 2, 3]","completion":"def reverse_array(arr): # Initialize start and end index start = 0 end = len(arr) - 1 # Loop over the array while start < end: # Swap the elements at start and end arr[start], arr[end] = arr[end], arr[start] # Update start and end index start += 1 end -= 1 # Driver code arr = [1, 2, 3] reverse_array(arr) # Print our modified array print(arr)"},{"prompt":"Create a class in Python to store employee details like name, age and salary.","completion":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary def get_details(self): print(f\\"Name: {self.name}\\") print(f\\"Age: {self.age}\\") print(f\\"Salary: {self.salary}\\")"},{"prompt":"Create an objectoriented class in Python for a Song.","completion":"class Song: def __init__(self, title, artist, album): self.title = title self.artist = artist self.album = album def print_info(self): print(\\"Title: %s, Artist: %s, Album: %s\\" % (self.title, self.artist, self.album))"},{"prompt":"Read the following pseudocode and generate a Python program to complete the given task. Given a list of numbers, print the numbers in reverse order","completion":"numbers = [1, 2, 3, 4, 5] numbers.reverse() for num in numbers: print(num)"},{"prompt":"Rewrite the code snippet below in Python so that it takes advantage of list comprehension. items = [1, 2, 3, 4, 5] new_items = [] for item in items: new_items.append(item**2)","completion":"items = [1, 2, 3, 4, 5] new_items = [item**2 for item in items]"},{"prompt":"Write a function in Python that will take two input strings, concatenate them, and return the reversed string. string1 = 'Hello' string2 = 'World'","completion":"def reverseString(s1, s2): s = s1 + s2 return s[::-1] reverseString(string1, string2) # Result: dlroW olleH"},{"prompt":"Create a function in Python that takes two parameters: string and character. It should return the number of occurrences of the given character in the given string. string = 'This is a sample string.' character = 's'","completion":"def count_char(string, character): count = 0 for c in string: if c == character: count += 1 return count print(count_char('This is a sample string.', 's')) # 3"},{"prompt":"Write a Python program to apply a function to all the elements of a given list and return the mapped list. [1, 2, 3, 4, 5]","completion":"def applyFunc(lst, func): mapped_list = [] for el in lst: mapped_list.append(func(el)) return mapped_list def square(x): return x*x lst = [1, 2, 3, 4, 5] print(applyFunc(lst, square))"},{"prompt":"Optimize a given machine learning model in Python using techniques such as feature selection, parameter tuning, and regularization. Not Applicable","completion":"# Feature selection from sklearn.feature_selection import RFE # Use recursive feature elimination to select the most # important features rfe = RFE(estimator = model, step = 1) fit = rfe.fit(X, y) # Parameter tuning using grid search from sklearn.model_selection import GridSearchCV # Create grid search object parms = {'C': [0.1, 1, 10, 100, 1000], 'gamma': [1, 0.1, 0.01, 0.001, 0.0001], 'kernel': ['rbf']} grid = GridSearchCV(estimator = model, param_grid = parms, scoring = 'accuracy', cv = 5) # Fit grid search to the data grid.fit(X, y) # Regularization and model selection from sklearn.linear_model import Ridge, Lasso # Ridge regression with parameter alpha = 0.01 model = Ridge(alpha = 0.01) model.fit(X, y)"},{"prompt":"Generate a Python program to delete an item from a given list","completion":"def delete_item(lst, item): if item in lst: lst.remove(item) return lst"},{"prompt":"Create a Python serverless function that takes in a JSON payload and performs the appropriate action based on the payload content. Payload Example: { action: “send_email”, recipient: “jane@example.com”, subject: “Hello!”, message: “This is a message from Jane.” }","completion":"import json import boto3 def send_email(event, context): recipient = event['recipient'] subject = event['subject'] message = event['message'] #send email here client = boto3.client('ses') response = client.send_email( Source='sender@example.com', Destination={ 'ToAddresses': [recipient,], }, Message={ 'Subject': {'Data': subject}, 'Body': {'Text': {'Data': message}}, }, ) def handler(event, context): event = json.loads(event) response = send_email(event, context) return json.dumps(response)"},{"prompt":"Create a function in Python that takes two parameters 'a' and 'b' and returns the remainder when 'a' is divided by 'b'.","completion":"def get_remainder(a, b): return a % b"},{"prompt":"Create a Python program that prints the characters in the alphabet, one per line. Not applicable","completion":"for letter in \\"abcdefghijklmnopqrstuvwxyz\\": print(letter)"},{"prompt":"mplement a function in Python that takes two strings and returns their longest common substring.","completion":"def find_longest_common_substring(s1, s2): # Set the length of the longest common substring longest = 0 # Split the strings into lists of characters list1 = list(s1) list2 = list(s2) # Iterate over each character of the strings for i in range(len(list1)): for j in range(len(list2)): # Compare the characters if list1[i] == list2[j]: # Increase the largest substring length by one longest += 1 else: # Reset the longest substring length longest = 0 # Update the shortest substring length shortest = min(len(list1) - i, len(list2) - j) # Return the longest common substring if it has reached the length of the shortest string if longest == shortest: return s1[i-longest+1:i+1] # Return an empty string if the longest common substring length is 0 if longest == 0: return \\"\\""},{"prompt":"Write a function in Python that given a number n prints the first n Fibonacci numbers. Not applicable","completion":"def fibonacci(number): a = 0 b = 1 for i in range(number): print(a) temp = a a = b b = temp + b number = int(input(\\"Enter a nmber: \\")) fibonacci(number)"},{"prompt":"Optimize the following python program such that it reaches an O(logN) complexity def power(x, n): if (n == 0): return 1 elif (n % 2 == 0): return power(x, n / 2) * power(x, n / 2) else: return x * power(x, n / 2) * power(x, n / 2)","completion":"def power(x, n): if (n == 0): return 1 elif (n % 2 == 0): y = power(x, n / 2) return y * y else: y = power(x, (n - 1) / 2) return x * y * y"},{"prompt":"Write a python function to compare two strings and return 1 if the strings are anagrams, 0 if not. bob, bob","completion":"def is_anagram(string1, string2): string1 = sorted(string1.replace(\\" \\", \\"\\").lower()) string2 = sorted(string2.replace(\\" \\", \\"\\").lower()) if string1 == string2: return 1 else: return 0"},{"prompt":"Create a Python program that prints out the pyramid pattern as described in the input. height = 5","completion":"def print_pyramid(height): \\"\\"\\"Print the pyramid pattern as described in the input\\"\\"\\" for i in range(1, height+1): spaces = \\" \\" * (height - i) symbols = (2 * i - 1) * \\"*\\" print(spaces + symbols + spaces)"},{"prompt":"Create a program in Python which takes a given string and removes all the vowels from it. string = This is a test string","completion":"def removeVowels(string): vowels = ['a', 'e', 'i', 'o', 'u'] new_string = ''.join([x for x in string if x.lower() not in vowels]) return new_string print(removeVowels(string))"},{"prompt":"Create a python program that personalizes a user experience based on their name. User name is Alice","completion":"name = input(\\"Please enter your name: \\") if name == \\"Alice\\": print(\\"Welcome, Alice! Here are some personalized recommendations:\\") print(\\"1. Movie recommendations\\") print(\\"2. Restaurant recommendations\\") print(\\"3. Shopping recommendations\\") else: print(\\"Welcome! Please check out our general recommendations:\\") print(\\"1. Popular movies\\") print(\\"2. Popular restaurants\\") print(\\"3. Popular shopping stores\\")"},{"prompt":"Write a Python code to tokenize the given sentence. This is a sample sentence","completion":"import nltk sentence = \\"This is a sample sentence\\" tokenized_words = nltk.word_tokenize(sentence) print(tokenized_words)"},{"prompt":"Design a function in Python which takes two integers and returns the maximum of the two.","completion":"def get_max(a, b): if a > b: return a else: return b"},{"prompt":"Write code in Python to model a CloudFormation template which creates a SNS Topic.","completion":"import json CloudFormationTemplate = { \\"AWSTemplateFormatVersion\\": \\"2010-09-09\\", \\"Resources\\": { \\"MySNSTopic\\": { \\"Type\\": \\"AWS::SNS::Topic\\", \\"Properties\\": { \\"TopicName\\": \\"MySNSTopic\\" } } } } print(json.dumps(CloudFormationTemplate))"},{"prompt":"Write a Python program to parse an XML string and save the parsed values into a SQLite database. <root> <person> <name>John Doe</name> <age>32</age> </person> <person> <name>Jane Doe</name> <age>30</age> </person> </root>","completion":"import sqlite3 import xml.etree.ElementTree xml_str = ''' <root> <person> <name>John Doe</name> <age>32</age> </person> <person> <name>Jane Doe</name> <age>30</age> </person> </root> ''' conn = sqlite3.connect('test.db') cur = conn.cursor() sql_command = ''' CREATE TABLE IF NOT EXISTS people ( name VARCHAR(20), age INTEGER );''' cur.execute(sql_command) root = xml.etree.ElementTree.fromstring(xml_str) people = root.findall('person') for person in people: name = person.find('name').text age = person.find('age').text cur.execute(\\"INSERT INTO people VALUES (?, ?)\\", (name, age)) conn.commit() conn.close()"},{"prompt":"Create a Python code snippet to calculate the average of the following array. items = [1, 5, 6, 4, 8, 9]","completion":"def get_average(array): array_length = len(array) total_sum = 0 for i in array: total_sum += i average = total_sum / array_length return average print(get_average(items))"},{"prompt":"Create a function in Python that will take a list of elements and return the sum of their cube. [2, 3, 4]","completion":"def cube_sum(nums): sum = 0 for num in nums: sum += num*num*num return sum"},{"prompt":"Develop a sentiment analysis model by implementing a Naive Bayes classifier in Python.","completion":"import numpy as np import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import BernoulliNB # Data Preprocessing # Read dataset into pandas dataframe df = pd.read_csv(\\"data.csv\\") # Extract relevant features features = df.iloc[:, :-1].values labels = df.iloc[: , -1].values # Split dataset into training and testing datasets X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state= 0) # Train and Test data feature engineering cv = CountVectorizer() X_train = cv.fit_transform(X_train) X_test = cv.transform(X_test) # Train the Naive Bayes Classifier Model classifier = BernoulliNB() classifier.fit(X_train, y_train) # Test the accuracy of the model y_pred = classifier.predict(X_test) accuracy = np.mean(y_pred == y_test) # Print the accuracy of the model print(\\"Accuracy: \\", accuracy * 100, \\"%\\")"},{"prompt":"Write a Python program to convert an integer number to words.","completion":"from num2words import num2words def int_to_words(num): return num2words(num)"},{"prompt":"Generate a Python program that takes an input string and reverse it. string = Hello world!","completion":"def reverse(string): return string[::-1] string = \\"Hello world!\\" print(reverse(string))"},{"prompt":"Write a Python script to loop through a list of numbers and print out only the even numbers. List of numbers: [3, 7, 10, 15, 17, 20]","completion":"my_list = [3, 7, 10, 15, 17, 20] for number in my_list: if (number % 2 == 0): print(number)"},{"prompt":"Create a Python script that connects to a database and displays a list of table information for an SQL database. Not applicable","completion":"import sqlite3 # Connect to database conn = sqlite3.connect('my_database.db') # Get cursor c = conn.cursor() # Print information about all tables c.execute(\\"SELECT name FROM sqlite_master WHERE type='table'\\") print(\\"List of tables:\\") tables = c.fetchall() for table in tables: print('t',table[0]) # Close connection conn.close()"},{"prompt":"Generate a Python program to group a given list of strings into a dictionary based on the length of the string. words = [apple, cat, robot, fly, revolution]","completion":"words = [\\"apple\\", \\"cat\\", \\"robot\\", \\"fly\\", \\"revolution\\"] words_by_length = {} for word in words: length = len(word) if length not in words_by_length: words_by_length[length] = [] words_by_length[length].append(word)"},{"prompt":"Write a Python code snippet to sort lists of integers in descending order. [4, 6, 1, 3, 8]","completion":"lst = [4, 6, 1, 3, 8] lst.sort(reverse=True) print(lst) # [8, 6, 4, 3, 1]"},{"prompt":"Given a list of colors [red, green, blue], create a Python program to find the longest color name. [red, green, blue]","completion":"def longest_color_name(colors): longest_name = 0 longest_color = None for color in colors: if len(color) > longest_name: longest_name = len(color) longest_color = color return longest_color"},{"prompt":"Create a new Class in Python, named 'Neural_Network' that uses stochastic gradient descent to optimize a given values.","completion":"class Neural_Network: def __init__(self, learning_rate=0.01): self.learning_rate = learning_rate def sgd(self, values, target): guess = sum(values)*self.learning_rate gradients = [(2 * (guess - target)) for value in values] for gradient_index in range(len(gradients)): values[gradient_index] -= gradients[gradient_index] * self.learning_rate return values"},{"prompt":"Will you provide an algorithm in Python to find the longest increasing subsequence in a given sequence? Sequence: [3, 5, 1, 6, 4, 2, 9]","completion":"def findLongestIncreasingSubsequence(sequence): n = len(sequence) # LIS[i] stores the length of the longest increasing # subsequence upto index i # Initialize the sequence as 1 LIS = [1 for i in range(n)] # Compute LIS values for all indexes for i in range (1 , n): for j in range(0 , i): if sequence[i] > sequence[j] and LIS[i]< LIS[j] + 1 : LIS[i] = LIS[j]+1 # Return the maximum value return max(LIS)"},{"prompt":"Create a Python function to remove duplicate elements from a given array.","completion":"def remove_duplicates(arr): seen = set() result = [] for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"prompt":"Create a python program to find the length of the longest run of 1s in the binary form of a positive integer.","completion":"def longest_run_of_ones(n): max = 0 count = 0 while n > 0: if n % 2 == 1: count += 1 else: if count > max: max = count count = 0 n //= 2 if count > max: max = count return max"},{"prompt":"Write a Python program to find the sum of the given series 1 + 1/2 + 1/3 +...... + 1/100.","completion":"sum = 0 for i in range(1,101): sum += 1/i print(sum)"},{"prompt":"Using Python, modify the implementation of a linked list to include a remove method that takes a value as an argument and removes the node with the given value from the linked list.","completion":"class Node: # Constructor to create a new node def __init__(self, data): self.data = data self.next = None class LinkedList: # Function to initialize head def __init__(self): self.head = None # Function to insert a new node at the beginning def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node # Utility function to print it the linked LinkedList def printList(self): temp = self.head while (temp): print (temp.data,) temp = temp.next # Function to remove a node from linked list def remove(self, value): temp = self.head # If head node itself holds the key # or multiple occurrences of key while temp is not None: if temp.data == value: break prev = temp temp = temp.next if temp == None: return if temp == self.head: self.head = temp.next else: prev.next = temp.next # This code is contributed by Sachin Bisht"},{"prompt":"Write a Python function to calculate the sum of all the amicable numbers within a given range.","completion":"def sum_amicable_numbers(start, end): amicable_sum = 0 for num in range(start, end + 1): divisors = get_divisors(num) div_sum = sum(divisors) other_divisors = get_divisors(div_sum) other_div_sum = sum(other_divisors) if other_div_sum == num and num != div_sum: amicable_sum += num return amicable_sum def get_divisors(num): divisors = [] for i in range(1, int(num/2) + 1): if num % i == 0: divisors.append(i) return divisors sum_amicable_numbers(1, 10000)"},{"prompt":"Edit the following Python program to remove the redundant lines. def foo(list): list.append(1) list.append(2) list.append(3) list.append(1) list.append(2) return list list = [1, 2, 3]","completion":"def foo(list): list.append(1) list.append(2) list.append(3) return list list = [1, 2, 3]"},{"prompt":"Write a Python program to solve the Tower of Hanoi problem.","completion":"def towers_of_hanoi(n, from_rod, aux_rod, to_rod): if n == 1: print(\\"Move disk 1 from rod\\",from_rod,\\"to rod\\",to_rod) return towers_of_hanoi(n-1, from_rod, to_rod, aux_rod) print(\\"Move disk\\",n,\\"from rod\\",from_rod,\\"to rod\\",to_rod) towers_of_hanoi(n-1, aux_rod, from_rod, to_rod) # Driver code n = 4 towers_of_hanoi(n, 'A', 'B', 'C')"},{"prompt":"Create a basic web crawler using Python that searches for a given keyword in a website and prints the pages where it is found. Keyword: Python Website: www.example.com","completion":"import requests from bs4 import BeautifulSoup # Given a keyword and a website URL def web_crawler(keyword, url): # Make a request to the given URL response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') # Loop through the pages visited = set() while True: # Get all the links on the page links = soup.find_all('a') for link in links: # Get the absolute URL for the link link_url = link.get('href') # If the URL is already visited, continue if link_url in visited: continue # If it is a valid URL, visit it if link_url.startswith('http'): visited.add(link_url) response = requests.get(link_url) soup = BeautifulSoup(response.content, 'html.parser') # Search for the keyword in the page if keyword in response.text: print(f'Found keyword \\"{keyword}\\" in URL: {link_url}') # Test keyword = 'Python' url = 'www.example.com' web_crawler(keyword, url)"},{"prompt":"Formulate an algorithm to find the longest palindrome in a given string in Python. String = babad","completion":"def findLongestPalindrome(s): if s is None or s == '': return '' start, end = 0, 0 for i in range(len(s)): len1 = expandFromMiddle(s, i, i) len2 = expandFromMiddle(s, i, i+1) len_tot = max(len1, len2) if len_tot > end - start: start = i - (len_tot-1)//2 end = i + len_tot//2 return s[start:end+1] def expandFromMiddle(s, left, right): while left > -1 and right < len(s) and s[left] == s[right]: left -= 1 right += 1 return right - left - 1"},{"prompt":"Create a Python program for building a chatbot. The program should include a chat window and should respond to simple questions with predefined answers. Not applicable","completion":"import re import random # define the bot class Bot: def __init__(self): self.greets = ['hey', 'hello', 'hi', 'greetings'] self.responses = ['Hello!', 'Hi there!', 'Greetings!', 'Nice to meet you!'] # process message using regular expression def process_message(self, message): pattern = re.search(\\"(?:hey|hello|hi|greetings)(.*)\\", message) if pattern: # generate a random response response = random.choice(self.responses) # return the response return response # create an instance of the Bot class bot = Bot() while True: # enter the message print('You:', end='') message = input() # process the message response = bot.process_message(message) # print the response print('Bot:', response)"},{"prompt":"Explain the following Python code def fun(a,b): return a+b","completion":"The given code defines a function named 'fun' which accepts two arguments, 'a' and 'b'. The function returns the sum of 'a' and 'b'."},{"prompt":"Create a python function that takes two integers as parameters, and return the greater of the two numbers.","completion":"def greater_of_two_numbers(int1, int2): if int1 > int2: return int1 else: return int2"},{"prompt":"This code combines the r.sun model with Light Penetration Index (LPI) to estimate Total Solar Radiation in watthours per meter squared per day. To generate the output, follow these steps: 1. Set up the GRASS & SSR environment for external use. 2. Open the log file. 3. Print the parameters. 4. Run the algorithm. 5. Reset GRASS env values.","completion":"#!/usr/bin/env python # # MODULE: ssr_algore.py # AUTHOR: Collin Bode, UC Berkeley # # PURPOSE: # Al Gore Rhythm combines r.sun model with Light Penetration Index (LPI). # Merges all the r.sun solar radiation runs into a single estimate of # Total Solar Radiation in watt-hours per meter squared per day. # Optional clear sky vs real sky. <-- only clear sky for now. # # Modified: Collin Bode, October, 2012 # Migrated to unified parameter set. # Simplified all the tweaks: JuneLPI kept, removed normalization for LPI # R.sun calibration now serparated from algorithm (\\"HalfDiff\\") # # COPYRIGHT: (c) 2011 Collin Bode # (c) 2006 Hamish Bowman, and the GRASS Development Team # (c) 2008 Glynn Clements, and the GRASS Development Team # This program is free software under the GNU General Public # License (>=v2). Read the file COPYING that comes with GRASS # for details. # # # GLOBALS global lf global cores global gisbase global gisdbase # MODULES # GRASS & SSR environment setup for external use from ssr_params import * import os import sys gisdbase = os.path.abspath(gisdbase) os.environ['GISBASE'] = gisbase sys.path.append(os.path.join(os.environ['GISBASE'], \\"etc\\", \\"python\\")) import grass.script as grass import grass.script.setup as gsetup # ssr_utilities must go after grass.script imports from ssr_utilities import * def main(): gsetup.init(gisbase, gisdbase, location, 'PERMANENT') # Algorithms for combining Diffuse and Direct # 'd' = old default value of 1, # 'pl' = Power Law,Diffuse = 1.1224 * x^0.3157, R2 = 0.41. Direct = = 1.2567 * x, R2 = 0.78 # 'nl' = Natural Log, # 'cl' = Cameau Linear, 'cn' = Cameau linear Normalized, nLPI = 1.428 * LPI, Diffuse = 0.94 * nLPI # 'gn' = Gendron linear normalized, nLPI = 1.428 * LPI, Diffuse = 0.01719 + 1.024 * nLPI # 'gl' = Gendron linear. no normalization. It overestimates field radiation. # Input bare-earth r.sun diffuse is too high. Instead of changing Linke Turbidity, modified here. # See weatherstations.xlsx for analysis. # Open log file tlog = dt.datetime.strftime(dt.datetime.now(),\\"%Y-%m-%d_h%Hm%M\\") lf = open(gisdbase+os.sep+'ssr_'+tlog+'_algore.log', 'a') # Overwrite files? ow = int(algore_run -1) # Print parameters printout('---------------------------------------',lf) printout('-- ALGORITHM FOR CLEAR SKY RADIATION --',lf) printout(' LPI year: '+year,lf) printout(' LPI pref: '+lpipref,lf) printout(' region: '+bregion,lf) printout(' sun mapset: '+msun,lf) printout(' SSR output mapset: '+mssr,lf) printout(' max veg height: '+maxheight,lf) printout(' Algorithm code: '+algore,lf) printout('keep intermediates: '+str(keeptemp),lf) printout(' overwrite files: '+str(ow),lf) printout('---------------------------------------',lf) # Run Algorithm r1start = dt.datetime.now() printout(\\"Starting Al Gore Rhythm at \\"+str(r1start),lf) # Goto Correct Mapset and make sure Region is correctly set (ssr_utilities) mapset_gotocreate(mssr,bregion,C,lf) # For each week for doyn in range(5,366,7): doy = str(doyn).zfill(3) month = dt.datetime.strftime(dt.datetime(2011,1,1) + dt.timedelta(doyn -1),\\"%m\\") printout(\\"Processing Day of Year \\" + doy + \\" in month \\"+month,lf) # Input Raster Layers sundem = bregion + C + 'mdem' suncan = bregion + C + 'mcan' dembeam = sundem + doy + 'beam@'+msun demdiff = sundem + doy + 'diff@'+msun canbeam = suncan + doy + 'beam@'+msun candiff = suncan + doy + 'diff@'+msun canglob = suncan + doy + 'glob' veg = vegheight+'@PERMANENT' lpi = lpipref + 'm'+ month + '@' + mlpi # lpi_c30y14s17m01 if(lpivsjune == True): lpi = lpipref + '06@' + mlpi # Output Raster Layers lpipart = C + 'm' + year + 's' + boxsize + 'm' + algore if(lpivsjune == True): lpipart = C + 'm' + year + 's' + boxsize+'mjune' + algore ssr = 'ssr_'+ lpipart + doy opencanopy = 'opencanopy_' + lpipart + doy subcanopy = 'subcanopy_' + lpipart + doy lpibeam = 'subbeam_' + lpipart + doy lpidiff = 'subdiff_' + lpipart + doy # #1. SUBCANOPY Merge LPI and Bare-earth by Algorithm printout(\\"DOY \\"+doy+\\" 1. merging lpi and dem using: \\"+algore,lf) if(algore == 'cl'): # 'cl' Cameau Linear regression grass.mapcalc(\\"tmp_lpidiff = 0.94 * lpi * diff\\", tmp_lpidiff = lpidiff, diff = demdiff, lpi = lpi,overwrite = ow) grass.mapcalc(\\"tmp_lpibeam = beam * lpi\\", tmp_lpibeam = lpibeam, beam = dembeam, lpi = lpi,overwrite = ow) elif(algore == 'cn'): # 'cn' Cameau Normalized - assumes halfdiff is set to True grass.mapcalc(\\"tmp_lpidiff = 0.94 * (1.428 * lpi) * diff\\", tmp_lpidiff = lpidiff, diff = demdiff, lpi = lpi,overwrite = ow) grass.mapcalc(\\"tmp_lpibeam = 1.428 * beam * lpi\\", tmp_lpibeam = lpibeam, beam = dembeam, lpi = lpi,overwrite = ow) elif(algore == 'gn'): #gn Diffuse Gendron Linear Normalized. y = 0.01719 + 1.024 * nLPI grass.mapcalc(\\"tmp_lpidiff = 0.01719 + 1.024 * (1.428 * lpi) * diff\\", tmp_lpidiff = lpidiff, diff = demdiff, lpi = lpi,overwrite = ow) grass.mapcalc(\\"tmp_lpibeam = (1.428 * lpi) * beam\\", tmp_lpibeam = lpibeam, beam = dembeam, lpi = lpi,overwrite = ow) elif(algore == 'gl'): #gl Diffuse Gendron Linear NON-normalized y = 0.01719 + 1.024 * LPI grass.mapcalc(\\"tmp_lpidiff = 0.01719 + 1.024 * lpi * diff\\", tmp_lpidiff = lpidiff, diff = demdiff, lpi = lpi,overwrite = ow) grass.mapcalc(\\"tmp_lpibeam = lpi * beam\\", tmp_lpibeam = lpibeam, beam = dembeam, lpi = lpi,overwrite = ow) else: # 'pl' power law grass.mapcalc(\\"tmp_lpidiff = 1.1224 * (lpi^0.3157) * diff\\", tmp_lpidiff = lpidiff, diff = demdiff, lpi = lpi,overwrite = ow) grass.mapcalc(\\"tmp_lpibeam = 1.2567 * beam * lpi\\", tmp_lpibeam = lpibeam, beam = dembeam, lpi = lpi,overwrite = ow) grass.mapcalc(\\"subcanopy = tmp_lpibeam + tmp_lpidiff\\", subcanopy = subcanopy, tmp_lpidiff = lpidiff, tmp_lpibeam = lpibeam, overwrite = ow) # #2. OPEN CANOPY: Remove areas under tall trees (maxheight meters or higher) printout('DOY '+doy+' 2. set subcanopy values to -88',lf) grass.mapcalc(\\"canglob = canbeam + candiff\\",canglob = canglob, canbeam = canbeam, candiff = candiff,overwrite = ow) grass.mapcalc(\\"opencanopy = if(veg < maxheight, canglob,-88)\\",opencanopy = opencanopy, veg = veg, canglob = canglob, maxheight = maxheight,overwrite = ow) # #3. Merge lpi*bare-earth with cleaned canopy, keeping whichever is higher. printout(\\"DOY \\"+doy+\\" 3. Merge lpi*dem with canopy shade = \\"+ssr,lf) grass.mapcalc(\\"ssr = if(opencanopy > subcanopy, opencanopy, subcanopy)\\", opencanopy = opencanopy, subcanopy = subcanopy,ssr = ssr,overwrite = ow) grass.run_command(\\"r.colors\\",map = ssr, color = \\"bcyr\\") #4. Remove temp maps if(keeptemp == False): for raster in [lpibeam,lpidiff,opencanopy,subcanopy,canglob]: grass.run_command(\\"g.remove\\",rast=raster) # Reset GRASS env values grass.run_command(\\"g.mapset\\", mapset=\\"PERMANENT\\") grass.run_command(\\"g.region\\", flags = \\"d\\") r1end = dt.datetime.now() printout(\\"Al can shake his booty, 'cause...\\",lf) printout(\\"DONE! with Al Gore Rhythm at \\"+str(r1end),lf) printout(\\"--------------------------------------\\",lf) lf.close() sys.exit(\\"FINISHED.\\") if __name__ == \\"__main__\\": main() \\"\\"\\" try: #options, flags = grass.parser() main() except: printout('ERROR! quitting.') print traceback.print_exc() traceback.print_exc(file=lf) traceback.print_exc(file=sys.stdout) finally: lf.close() sys.exit(\\"FINISHED.\\") \\"\\"\\""},{"prompt":"Write a function in Python to print the top n elements of an array. [2, 3, 4, 5, 1], top_n = 3","completion":"def max_n_elements(arr, n): res = [] for i in range(n): max_val = max(arr) res.append(max_val) arr.remove(max_val) return res arr = [2, 3, 4, 5, 1] top_n = 3 print(max_n_elements(arr, top_n))"},{"prompt":"Generate a Python code snippet to remove all the whitespaces from a string.","completion":"def remove_spaces(s): return s.replace(' ', '') s = input(\\"Enter a string: \\") print(remove_spaces(s))"},{"prompt":"Write a Python program to search for a particular string in a given paragraph. The given paragraph is Juggling is the height of skill and it needs serious practice. The search string is height","completion":"def search_string (paragraph, search_string): if search_string in paragraph: print(\\"Found the string '\\" + search_string + \\"'\\") else: print(\\"Sorry, string not found\\") search_string(paragraph, 'height')"},{"prompt":"Write a Python program to determine the maximum of two numbers. a = 15, b = 20","completion":"def get_max(a, b): if a > b: return a else: return b a = 15 b = 20 max_value = get_max(a, b) print(\\"The maximum value is:\\", max_value)"},{"prompt":"Create a Python program to calculate the minimum cost path from the top left corner to the bottom right corner in a twodimensional array. [ [1, 2, 3], [4, 8, 2], [1, 5, 3], ]","completion":"def minCost(cost, row, col): if (row < 0 or col < 0): return sys.maxsize elif (row == 0 and col == 0): return cost[row][col] else: return cost[row][col] + min(minCost(cost, row-1, col-1), minCost(cost, row-1, col), minCost(cost, row, col-1))"},{"prompt":"Create a solution to implement a sorting algorithm in Python.","completion":"def sort(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"prompt":"Write a Python program to generate a dataframe from a given JSON response. {name: John, age: 30, job: Engineer, salary: 5000}","completion":"import pandas as pd json_data = {\\"name\\": \\"John\\", \\"age\\": 30, \\"job\\": \\"Engineer\\", \\"salary\\": 5000} # Convert the data into a dataframe df = pd.DataFrame(json_data, index=[0]) print(df)"},{"prompt":"Create a Python script to remove all empty elements from a list. list = [a, , b, , c, ]","completion":"list = [\\"a\\", \\"\\", \\"b\\", \\"\\", \\"c\\", \\"\\"] result = [element for element in list if len(element) > 0] print(result)"},{"prompt":"Design a program in Python to split a list of strings into two halves.","completion":"def split_list(string_list): mid = len(string_list) // 2 return string_list[:mid], string_list[mid:]"},{"prompt":"Create a ModelViewController example for a basic blog post application in Python. Not applicable","completion":"Model class Post(Model): author = CharField() title = CharField() content = TextField() num_comments = IntegerField() published_date = DateTimeField() View def post_detail_view(request, slug): post = Post.objects.get(slug=slug) return render(request, \\"blog/post_detail.html\\", {'post': post}) Controller def post_list_view(request): posts = Post.objects.all() return render(request, \\"blog/post_list.html\\", {'posts': posts})"},{"prompt":"Generate a Python program to find the sum of all even numbers in an array [1, 5, 9, 11, 2, 8]","completion":"def sumEven(array): sum = 0 for x in array: if x % 2 == 0: sum += x return sum print(sumEven([1, 5, 9, 11, 2, 8]))"},{"prompt":"Write a Python script to print the size and color of shoes in a list. shoes = [('size', 10), ('color', 'blue'), ('size', 8), ('color', 'green')]","completion":"def print_size_color(shoes): for size, color in shoes: print('size:', size, 'color:', color) print_size_color(shoes)"},{"prompt":"Generate an algorithm in Python that takes a decimal number x and converts it to binary. 178","completion":"# Input decimal number decimal_number = 178 # Output binary number binary_number = \\"\\" # Main algorithm to convert from decimal to binary while decimal_number > 0: remainder = decimal_number % 2 binary_number = str(remainder) + binary_number decimal_number = decimal_number // 2 print(binary_number)"},{"prompt":"Cut and paste the following code into Python, then fix the errors: print(Hello World)","completion":"print(\\"Hello World!\\")"},{"prompt":"Generate a function in Python that takes an integer value from a dictionary and returns its value as a string. {number1: 8, number2: 16, number3: 20}","completion":"def get_string_value(input_dict): \\"\\"\\"Return string value in the input dictionary\\"\\"\\" output_value = \\"\\" for key, value in input_dict.items(): output_value = str(value) return output_value"},{"prompt":"Python, write code to optimize the execution time of a function that calculates the sum of two vectors. def get_sum(vector1, vector2): result_vector = [] for i in range(len(vector1)): result_vector.append(vector1[i] + vector2[i]) return result_vector","completion":"def get_sum(vector1, vector2): result_vector = [] length = len(vector1) for i in range(0, length, 4): # Looping with step of 4 result_vector.append(vector1[i] + vector2[i]) result_vector.append(vector1[i+1] + vector2[i+1]) result_vector.append(vector1[i+2] + vector2[i+2]) result_vector.append(vector1[i+3] + vector2[i+3]) for i in range(length % 4, length): # Looping the remaining part result_vector.append(vector1[i] + vector2[i]) return result_vector"},{"prompt":"mplement a natural language processing algorithm in Python to detect the sentiment of an English sentence.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def detect_sentiment(sentence): nltk.download('vader_lexicon') sid = SentimentIntensityAnalyzer() scores = sid.polarity_scores(sentence) return scores['compound']"},{"prompt":"Create a Python program that takes in a string and counts how many vowels are in it, regardless of case. amazing","completion":"def count_vowels(word): answer = 0 for letter in word: if letter.lower() in 'aeiou': answer += 1 return answer print(count_vowels('amazing'))"},{"prompt":"Design a simple linear regression algorithm in Python.","completion":"def simple_linear_regression(X, y): # calculate the mean value of a list of numbers def mean(values): return sum(values) / float(len(values)) # calculate covariance between x and y def covariance(x, mean_x, y, mean_y): covar = 0.0 for i in range(len(x)): covar += (x[i] - mean_x) * (y[i] - mean_y) return covar # calculate the variance of a list of numbers def variance(values, mean): return sum([(x - mean)**2 for x in values]) # calculate coefficients def coefficients(X, y): x_mean, y_mean = mean(X), mean(y) b1 = covariance(X, x_mean, y, y_mean) / variance(X, x_mean) b0 = y_mean - b1 * x_mean return [b0, b1] b = coefficients(X, y) return b[0], b[1]"},{"prompt":"Write a function in Python that takes a list of integers as an input and returns a new list with every even number doubled and every odd number quadrupled. [2, 5, 6, 8]","completion":"def multiply_values(lst): return [x * 2 if x % 2 == 0 else x * 4 for x in lst] # Example lst = [2, 5, 6, 8] print(multiply_values(lst)) # [4, 20, 12, 16]"},{"prompt":"Develop a Python program to generate a random string of length 10.","completion":"import string import random def random_string(stringLength=10): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(stringLength)) print(random_string())"},{"prompt":"Create a basic function in Python to extract the first digit from a number. Number: 2458","completion":"def firstDigit(num): return int(str(num)[0]) num = 2458 print(firstDigit(num)) # 2"},{"prompt":"Edit the Python code below to optimize it's runtime by using an alternative algorithm. def sum_all_numbers(n): result = 0 for number in range(1, n+1): result += number return resul","completion":"def sum_all_numbers(n): return n * (n + 1) // 2"},{"prompt":"Design a machine learning model in Python to predict whether a bank loan will be approved or rejected. Objective: predicting the loan approval statu","completion":"# import required modules import pandas as pd import numpy as np from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split # read in data dataframe = pd.read_csv('loan_data.csv') # define feature and target labels X = dataframe.loc[:, dataframe.columns != 'loan_status'] y = dataframe.loan_status # split into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42) # create a model model = RandomForestClassifier() # train the model model.fit(X_train, y_train) # make predictions on the test set predictions = model.predict(X_test)"},{"prompt":"Write a python program to compute the edit distance between two strings.","completion":"def edit_distance(str1, str2): m=len(str1) n=len(str2) dp= [[0 for x in range(n+1)] for x in range(m+1)] for i in range(m+1): for j in range(n+1): if i==0: dp[i][j] = j elif j==0: dp[i][j] = i elif str1[i-1]==str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) return dp[m][n]"},{"prompt":"Write a Python program to generate both upper and lower case random alphabets.","completion":"import random def random_alphabet(): random_alphabet = chr(random.randint(97, 122)).upper() return random_alphabet alphabets = [] for x in range(10): alphabets.append(random_alphabet()) print(alphabets)"},{"prompt":"Could you come up with a function in Python that removes all occurrences of the word 'impossible' from the given string? It was impossible to find the answer.","completion":"def remove_word(text): return text.replace('impossible', '')"},{"prompt":"mplement a function in Python to print the next n prime numbers.","completion":"def n_prime_numbers(n): prime_list = [] num = 2 while len(prime_list) < n: for x in range(2,num): if num % x == 0: break else: prime_list.append(num) num += 1 return prime_list print(n_prime_numbers(10))"},{"prompt":"Build a basic CLI command line application in Python that takes user input to search for records in a database and prints the results to the console. Not applicable","completion":"import sqlite3 #connect to the database conn = sqlite3.connect('example.db') c = conn.cursor() #program loop while True: #input search query search_term = input('Enter search query: ') #execute query c.execute(\\"SELECT * from records WHERE search_term LIKE ?\\", ('%'+search_term+'%',)) #fetch and print results results = c.fetchall() print('Results: ') for result in results: print(result)"},{"prompt":"Write a class in Python to represent a rectangle as an object.","completion":"class Rectangle: def __init__(self, width, height): self.width = width self.height = height def get_area(self): return self.width * self.height def get_perimeter(self): return 2 * (self.width + self.height)"},{"prompt":"Generate a random 2D array in Python of size 10x7","completion":"import numpy as np array = np.random.randint(1, 10, size=(10, 7)) print(array)"},{"prompt":"Generate a Python script to shuffle the elements in a list. Sample list [5, 2, 7, 1, 8]","completion":"import random list = [5, 2, 7, 1, 8] random.shuffle(list) print(list) # Output -> [1, 8, 5, 2, 7]"},{"prompt":"Write a Python program to generate a mock version of the given data set. data_set = [('John', 32, 'Male'), ('Mary', 31, 'Female')]","completion":"import random mock_data_set = [] for row in data_set: name = row[0] + str(random.randint(1,100)) age = random.randint(1, 100) gender = random.choice(['Male', 'Female']) new_row = (name, age, gender) mock_data_set.append(new_row) print(mock_data_set)"},{"prompt":"Generate a method in Python that takes an array of strings and selects strings that contain more than 6 characters. [apple, banana, grape, strawberry, mango]","completion":"def filter_long_words(words): return [word for word in words if len(word) > 6]"},{"prompt":"Optimize the following Python code for runtime and memory performance. def factorial(n): if n == 1: return 1 else: return n * factorial(n1)","completion":"def factorial(n): if n == 0: return 1 res = 1 for i in range(2, n+1): res *= i return res"},{"prompt":"Edit a given Python program to use regex to extract the phone numbers from the text. import re txt = My number is 6661111111 and my office number is 8886661234.","completion":"import re txt = \\"My number is 666-111-1111 and my office number is 888-666-1234.\\" phone_numbers = re.findall(r'd{3}-d{3}-d{4}', txt) print(phone_numbers) # output: ['666-111-1111', '888-666-1234']"},{"prompt":"Create an algorithm in Python that takes in a twodimensional array (matrix) and returns a flattened version of the array. matrix = [[1,2,3], [4,5,6], [7,8,9]]","completion":"def flattenMatrix(matrix): return [elem for row in matrix for elem in row] matrix = [[1,2,3], [4,5,6], [7,8,9]] flatMatrix = flattenMatrix(matrix) print(flatMatrix) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]"},{"prompt":"Analyze a given text to extract the entities(with their type) in the text using a Python script. The President Barack Obama was born in Hawaii.","completion":"import spacy text = \\"The President Barack Obama was born in Hawaii.\\" nlp = spacy.load(\\"en_core_web_sm\\") doc = nlp(text) for entity in doc.ents: print(f\\"{entity.text} ({entity.label_})\\") Output: The President (ORG) Barack Obama (PERSON) Hawaii (GPE)"},{"prompt":"Write a Python program to print a multiplication table up to 10.","completion":"def print_multiplication_table(n): for i in range(1, 11): print(\\"{} * {} = {}\\".format(n, i, n*i))"},{"prompt":"Create a Python class to manage a shopping cart.","completion":"class ShoppingCart: def __init__(self): self.cart = [] def add_item(self, item): self.cart.append(item) def remove_item(self, item): self.cart.remove(item) def get_total(self): total = 0 for item in self.cart: total += item.price return total"},{"prompt":"Create a program that takes a text input and prints out a histogram of word frequencies. the quick brown fox jumps over the lazy dog","completion":"# Python code # input text text = \\"the quick brown fox jumps over the lazy dog\\" # store words in list words = text.split() # empty dictionary to store word frequencies word_freq = {} # loop through list of words for word in words: # check if word is already in the dictionary if word in word_freq: # if so, increase count by 1 word_freq[word] += 1 else: # if not, add it to the dictionary with count = 1 word_freq[word] = 1 # print the output print(\\"Word Frequency Histogram\\") for word, freq in word_freq.items(): print(word + ' |' + '*' * freq)"},{"prompt":"Write a Python script to parse a JSON string and convert it into an array of strings. Not applicable","completion":"import json def parse_json(json_string): json_data = json.loads(json_string) result = [] for key, value in json_data.items(): result.append(f'{key}: {value}') return result"},{"prompt":"Rewrite this better Python program to calculate the square root of a given number. def squareRoot(number): root = number/2 for k in range(20): root = (1/2)*(root + (number / root)) return roo","completion":"def square_root(number): \\"\\"\\" Calculate the square root of a number \\"\\"\\" root = number # Initial guess for i in range(20): # Iterative approach to refine guess root = (1/2) * (root + (number/root)) return root"},{"prompt":"Generate a function in Python to print the sum of two integers. Not applicable","completion":"def print_sum(a, b): \\"\\"\\" Print the sum of the two numbers \\"\\"\\" print(a+b)"},{"prompt":"Construct a Python program that uses a Decision Tree to classify a given dataset. Not applicable","completion":"import pandas as pd from sklearn import datasets from sklearn import tree data = pd.read_csv('data.csv') # Split the data X = data.drop('target', axis=1) y = data['target'] # Train the model clf = tree.DecisionTreeClassifier() clf.fit(X, y) # Test the model y_pred = clf.predict(X) # Evaluate accuracy accuracy = metrics.accuracy_score(y, y_pred) print('Accuracy:', accuracy)"},{"prompt":"Build a simple chatbot using Python and nltk library. The chatbot should read a given set of strings as input and generate an appropriate response. Hello, how are you?","completion":"import nltk # sample input input = 'Hello, how are you?' # list of tokenized words words = nltk.word_tokenize(input) # list of part-of-speech tagged words words_tagged = nltk.pos_tag(words) # defining chatbot's greeting response greeting_response = 'Hi there! How can I help you?' # defining chatbot's response to a question if words_tagged[1][1] == \\"WP\\": response = 'I am sorry, I can not answer this question.' # checking for greeting in input if words_tagged[0][1] == 'UH': response = greeting_response # printing the chatbot response print(response) # Hi there! How can I help you?"},{"prompt":"Write a Python program to convert a given binary number to decimal.","completion":"def binary_to_decimal(binary): decimal, i = 0, 0 while binary != 0: dec = binary % 10 decimal = decimal + dec * pow(2, i) binary = binary//10 i += 1 return decimal"},{"prompt":"Write a code to create a temperature conversion program using a switch statement in Python.","completion":"def temperature_conversion(temperature, conversion): switch (conversion): case 'FtoC': return (temperature - 32) * (5 / 9) case 'CtoF': return (temperature * (9 / 5)) + 32 case 'FtoK': return (temperature - 32) * (5 / 9) + 273.15 case 'KtoF': return (temperature - 273.15) * (9 / 5) + 32 case 'CtoK': return temperature + 273.15 case 'KtoC': return temperature - 273.15 # converting a temperature of 100F to Celsius temperature_in_celsius = temperature_conversion(100, 'FtoC') print(\\"Temperature in Celsius:\\", temperature_in_celsius)"},{"prompt":"Write a function in Python to get the intersection of two sorted lists. list1 = [5, 7, 9, 11, 13] list2 = [7, 8, 10, 11, 12]","completion":"def intersection(list1, list2): result = [] i = 0 j = 0 while i < len(list1) and j < len(list2): if list1[i] == list2[j]: result.append(list1[i]) i += 1 j += 1 elif list1[i] < list2[j]: i += 1 else: j += 1 return result print(intersection(list1, list2)) # Output: [7, 11]"},{"prompt":"Create a Python function to search for a specific piece of text in a string. This function should return true if the string contains the text and false otherwise. Not applicable","completion":"def search(text, string): return text in string"},{"prompt":"Generate a Python program to calculate the absolute difference between two given numbers.","completion":"def absolute_difference(num1, num2): return abs(num1 - num2)"},{"prompt":"Create a Python program to generate a list of random numbers. length = 5, min = 2, max = 10","completion":"import random def generate_random_numbers(length, min, max): result = [] for _ in range(length): result.append(round(random.uniform(min, max), 1)) return result print(generate_random_numbers(5, 2, 10)) # [2.6, 6.2, 2.5, 8.5, 8.1]"},{"prompt":"Design a function in Python for deleting all empty directories.","completion":"import os def delete_empty_dirs(path): for root, directories, files in os.walk(path): for directory in directories: joined_path = os.path.join(root, directory) try: os.rmdir(joined_path) except OSError: # Directory not empty pass"},{"prompt":"Develop an AIbased recommendation system in Python for a movies website. Not applicable","completion":"# import the necessary libraries import pandas as pd import numpy as np from sklearn.metrics.pairwise import cosine_similarity from sklearn.feature_extraction.text import TfidfVectorizer # Read in the movie data movies = pd.read_csv('movies.csv') # Vectorize the movie title vectorizer = TfidfVectorizer(tokenizer=lambda x: x.split(' ')) tfidf_matrix = vectorizer.fit_transform(movies['title']).toarray() # Calculate the cosine similarity matrix cosine_similarity_matrix = cosine_similarity(tfidf_matrix) # Generate a list of recommended movies def recommend(movie_title): recommended_movies = [] # Find the index of the movie by title movie_index = movies[movies['title'] == movie_title].index[0] # Generate a list of movies with cosine similarities > 0 for i in range(len(cosine_similarity_matrix[movie_index])): if cosine_similarity_matrix[movie_index][i] > 0: recommended_movies.append(i) # Return the titles of the recommended movies return movies.iloc[recommended_movies]['title'] # Testing print(recommend('The Godfather')) # Output: The Shawshank Redemption, The Godfather Part II, Apocalypse Now"},{"prompt":"Write a Python function that takes an array of integers and returns the sorted array with the most common element in the middle. [4, 5, 2, 5, 8, 5, 6, 5]","completion":"def medianMostCommon(arr): # Count the number of occurences of every element counts = {} for element in arr: if element in counts: counts[element] += 1 else: counts[element] = 1 # Find the most common element most_common_element = None max_count = 0 for element, count in counts.items(): if count > max_count: most_common_element = element max_count = count # Sort the array sorted_arr = sorted(arr) # Find the index of the most common element index = sorted_arr.index(most_common_element) # Swap the most common element and the middle element in the array mid = len(sorted_arr) // 2 sorted_arr[index] = sorted_arr[mid] sorted_arr[mid] = most_common_element return sorted_arr arr = [4, 5, 2, 5, 8, 5, 6, 5] result = medianMostCommon(arr) print(result) # [4, 5, 5, 5, 5, 6, 8, 2]"},{"prompt":"mplement a Python function to calculate the sum of all prime numbers between two given numbers, inclusive. 2 5","completion":"def prime_sum(start,end): total = 0 for num in range(start, end + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: total += num return total if __name__ == \\"__main__\\": lower_limit = int(input('Input lower limit: ')) upper_limit = int(input('Input upper limit: ')) print(prime_sum(lower_limit, upper_limit))"},{"prompt":"Create a Python program that print the Fibonacci sequence for n terms.","completion":"def fibonacci_sequence(n): a = 0 b = 1 print(\\"Fibonacci sequence:\\") print(a) print(b) for i in range(2,n): c = a + b a = b b = c print(c)"},{"prompt":"Create a program in Python that displays a 3x3 chess board, with pieces at starting positions. Not applicable","completion":"import numpy as np chess_board = np.array([[\\"R\\", \\"N\\", \\"B\\", \\"Q\\", \\"K\\", \\"B\\", \\"N\\", \\"R\\"], [\\"P\\", \\"P\\", \\"P\\", \\"P\\", \\"P\\", \\"P\\", \\"P\\", \\"P\\"], [\\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\"], [\\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\"], [\\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\"], [\\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\", \\" \\"], [\\"p\\", \\"p\\", \\"p\\", \\"p\\", \\"p\\", \\"p\\", \\"p\\", \\"p\\"], [\\"r\\", \\"n\\", \\"b\\", \\"q\\", \\"k\\", \\"b\\", \\"n\\", \\"r\\"]]) print (chess_board)"},{"prompt":"Generate a valid Python program that finds all the prime numbers in a given range 2, 20","completion":"def find_primes(start, end): result = [] for number in range(start, end + 1): if number > 1: for i in range(2, number): if (number % i) == 0: break else: result.append(number) return result result = find_primes(2, 20) print(result)"},{"prompt":"Write a function in Python to convert a string of text into separate words in a list. The quick brown fox jumped over the lazy dog.","completion":"def convert_to_list(sentence): words = [] for word in sentence.split(): words.append(word) return words result = convert_to_list(\\"The quick brown fox jumped over the lazy dog.\\") print(result) # Output: ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog.']"},{"prompt":"Using Regular Expressions, write a python program to check if the given string contains only alphanumeric characters.","completion":"import re def is_alphanumeric(input_string): # Using Regular Expressions, check if the given string contains only alphanumeric characters. regex = re.compile('^[a-zA-Z0-9]+') return regex.match(input_string)"},{"prompt":"The given code is a Python class called FeaturesExtractor that extracts features from XML files containing event annotations. To use it, create an instance of the class and call the extract_features method. The resulting features will be stored in a pandas DataFrame accessible through the data attribute of the class instance. To save the features to a CSV file, call the save_to_csv method with the desired filename as an argument.","completion":"from bs4 import BeautifulSoup import os import pandas as pd import sys import traceback from sklearn.feature_extraction.text import CountVectorizer class FeaturesExtractor: def __init__(self): self.FEATURE_NAMES = ['e1_token_id', 'e1_number','e1_sentence','e1_token','e1_aspect', 'e1_class','e1_event_id','e1_modality','e1_polarity','e1_pos','e1_tense','e2_token_id', 'e2_number','e2_sentence','e2_token','e2_aspect', 'e2_class','e2_event_id','e2_modality','e2_polarity','e2_pos','e2_tense','dep_path', 'same_pos_tag','sentence_distance','event_distance','same_polarity','same_aspect','same_tense','same_class','csignals_in_bw','csignal_position','tlink_exists','e1_is_sent_root','e2_is_sent_root','causal_relation_exists'] COLUMN_NAMES = ['filename', 'sentence', 'relation', 'governor', 'governor_idx', 'dependent', 'dependent_idx'] self.data = [] self.deps = pd.read_csv('data/text/_out_dependencies.csv', names=COLUMN_NAMES, sep='t') def recursive_search(self, df, path, to_find_token, to_find_index, to_find_sentence, governor_token, governor_index, governor_sentence): dependencies = df[(self.deps['governor'] == governor_token) & (self.deps['governor_idx'] == int(governor_index)) & (self.deps['sentence'] == int(governor_sentence))] for i in range(len(dependencies)): dependency = dependencies.iloc[i] #Weird idiosynracy I came across where the governor and the dependent #were the same token if ((dependency['governor'] == dependency['dependent']) and (dependency['dependent_idx'] == dependency['governor_idx'])): continue #check break condition if (dependency['dependent'] == to_find_token and dependency['dependent_idx'] == to_find_index and dependency['sentence'] == to_find_sentence): path = path+' '+dependency['relation'] break else: path_to_pass = path+' '+dependency['relation'] path_returned = self.recursive_search( df, path_to_pass, to_find_token, to_find_index, to_find_sentence, dependency['dependent'], dependency['dependent_idx'], dependency['sentence']) if path_returned != path_to_pass: path = path_returned break return path def get_dependency_path(self, filename, e1_token, e1_token_id, e1_sentence, e2_token, e2_token_id, e2_sentence): #Since intersentential paths are allowed, the next sentence is #also included df = self.deps[(self.deps['filename'] == filename) & ((self.deps['sentence'] == int(e1_sentence)) | (self.deps['sentence'] == int(e1_sentence)+1))] path = self.recursive_search(df, '', e2_token, e2_token_id, e2_sentence, e1_token, e1_token_id, e1_sentence) if path is not '': return path else: #Try finding path from e2 to e1 return self.recursive_search(df, '', e1_token, e1_token_id, int(e1_sentence), e2_token, e2_token_id, int(e2_sentence)) def parseFile(self, filename): f = open(filename) soup = BeautifulSoup(f.read()) events = soup.findAll('event') tokens = soup.findAll('token') for i in range(0,len(events)-1): event = events[i] for j in range(i+1, len(events)): next_event = events[j] event_token_id = event.find('token_anchor').attrs['id'] next_event_token_id = next_event.find('token_anchor').attrs['id'] event_token_tag = soup.find(lambda tag: (tag.name) == 'token' and (tag.attrs['id']) == (event_token_id)) next_event_token_tag = soup.find(lambda tag: (tag.name) == 'token' and (tag.attrs['id']) == (next_event_token_id)) event_sentence = event_token_tag['sentence'] next_event_sentence = next_event_token_tag['sentence'] if (int(next_event_sentence) - int(event_sentence)) > 1: break # For now, intersentential event pairs can only be one sentence apart else: e1_number = event_token_tag.attrs['number'] e1_sentence = event_sentence e1_token = event_token_tag.text e1_aspect = event.attrs['aspect'] e1_certainty = event.attrs['certainty'] e1_class = event.attrs['class'] e1_comment = event.attrs['comment'] e1_factuality = event.attrs['factuality'] e1_event_id = event.attrs['id'] e1_modality = event.attrs['modality'] e1_polarity = event.attrs['polarity'] e1_pos = event.attrs['pos'] e1_tense = event.attrs['tense'] e2_number = next_event_token_tag.attrs['number'] e2_sentence = event_sentence e2_token = next_event_token_tag.text e2_aspect = next_event.attrs['aspect'] e2_certainty = next_event.attrs['certainty'] e2_class = next_event.attrs['class'] e2_comment = next_event.attrs['comment'] e2_factuality = next_event.attrs['factuality'] e2_event_id = next_event.attrs['id'] e2_modality = next_event.attrs['modality'] e2_polarity = next_event.attrs['polarity'] e2_pos = next_event.attrs['pos'] e2_tense = next_event.attrs['tense'] causal_relation_exists = len(soup.findAll(lambda tag: tag.name == 'source' and tag.findParent().name == 'clink' and tag.findNextSibling().name == 'target' and ((tag.attrs['id'] == e1_event_id and tag.findNextSibling().attrs['id'] == e2_event_id) or (tag.attrs['id'] == e2_event_id and tag.findNextSibling().attrs['id'] == e1_event_id)) )) > 0 e1_token_id_offset = soup.find( lambda tag: tag.name == 'token' and tag.attrs['sentence'] == e1_sentence).attrs['id'] if e1_sentence == e2_sentence: e2_token_id_offset = e1_token_id_offset else: e2_token_id_offset = soup.find( lambda tag: tag.name == 'token' and tag.attrs['sentence'] == e2_sentence).attrs['id'] e1_token_id = int(event_token_tag.attrs['id']) - int(e1_token_id_offset) + 1 e2_token_id = int(next_event_token_tag.attrs['id']) - int(e2_token_id_offset) + 1 e1_event_id = int(e1_event_id) e2_event_id = int(e2_event_id) same_pos_tag = e1_pos == e2_pos sentence_distance = int(e2_sentence) - int(e1_sentence) event_distance = e2_event_id - e1_event_id + 1 same_polarity = e1_polarity == e2_polarity same_aspect = e1_aspect == e2_aspect same_tense = e1_tense == e2_tense same_class = e1_class == e2_class ''' TODO: The conditions between e1_event_id and e2_event_id maybe don't make sense because e1_event_id would always be greater than e2_event_id. Reverse causal relations are identified only if e2 is specifed as source in clink and e1 as target ''' csignals_in_bw = soup.findAll(lambda tag: tag.name == 'c-signal' and (( (e1_event_id < e2_event_id) and (int(tag.attrs['id']) > e1_event_id) and (int(tag.attrs['id']) < e2_event_id)) or (e1_event_id > e2_event_id and int(tag.attrs['id']) > e2_event_id and int(tag.attrs['id']) < e1_event_id))) csignal_position = csignal = '' if len(csignals_in_bw) == 0: csignal_tag = event.findPreviousSibling(lambda tag: tag.name == 'c-signal') if csignal_tag is not None: csignal_token_id = csignal_tag.find('token_anchor').attrs['id'] csignal_token_tag = soup.find(lambda x: x.name == 'token' and x.attrs['id'] == csignal_token_id) if csignal_token_tag.attrs['sentence'] == e1_sentence: csignal = soup.find(lambda x: x.name == 'token' and x.attrs['id'] == csignal_token_id).text csignal_position = 'before' else: csignal_token_id = csignals_in_bw[-1].find('token_anchor').attrs['id'] csignal = soup.find(lambda x: x.name == 'token' and x.attrs['id'] == csignal_token_id).text csignal_position = 'between' tlink_exists = len(soup.findAll(lambda tag: tag.name == 'tlink' and ( ((tag.find('source').attrs['id'] == str(e1_event_id)) and (tag.find('target').attrs['id'] == str(e2_event_id))) or ((tag.find('source').attrs['id'] == str(e2_event_id)) and (tag.find('target').attrs['id'] == str(e1_event_id))) ) )) > 0 filename = filename.split('.xml')[0] filename = filename.split('/') filename = filename[len(filename) - 1] dep_path = self.get_dependency_path( filename, e1_token, e1_token_id, e1_sentence, e2_token, e2_token_id, e2_sentence) e1_is_sent_root = len(self.deps[ (self.deps['governor'] == 'ROOT') & (self.deps['dependent'] == e1_token) & (self.deps['dependent_idx'] == int(e1_token_id)) & (self.deps['sentence'] == int(e1_sentence))] ) > 0 e2_is_sent_root = len(self.deps[ (self.deps['governor'] == 'ROOT') & (self.deps['dependent'] == e2_token) & (self.deps['dependent_idx'] == int(e2_token_id)) & (self.deps['sentence'] == int(e2_sentence))] ) > 0 row = [ e1_token_id, e1_number, e1_sentence, e1_token, e1_aspect, e1_class, e1_event_id, e1_modality, e1_polarity, e1_pos, e1_tense, e2_token_id, e2_number, e2_sentence, e2_token, e2_aspect, e2_class, e2_event_id, e2_modality, e2_polarity, e2_pos, e2_tense, dep_path, same_pos_tag, sentence_distance, event_distance, same_polarity, same_aspect, same_tense, same_class, csignal, csignal_position, tlink_exists, e1_is_sent_root, e2_is_sent_root, causal_relation_exists ] self.data.append(row) f.close() def extract_features(self): for folder, subs, files in os.walk('data/xml'): for filename in files: try: if ('.xml' in filename) and (filename[0] != '.'): print 'Parsing File: '+filename self.parseFile(os.path.join(folder, filename)) except Exception as e: traceback.print_exc() continue self.data = pd.DataFrame(self.data) self.data.columns = self.FEATURE_NAMES def save_to_csv(filename): self.data.to_csv(filename) if __name__ == \\"__main__\\": extractor = FeaturesExtractor() extractor.extract_features() extractor.save_to_csv('features.csv')"},{"prompt":"Design a web service in Python that takes two parameters: a list and an operation.","completion":"def web_service(list, operation): if operation == ‘sum': sum = 0 for i in list: sum += i return sum elif operation == 'mean': return sum(list) / len(list)"},{"prompt":"Build a decision tree classifier in Python using the scikitlearn library.","completion":"from sklearn import tree X = [[0, 0], [1, 1]] y = [0, 1] clf = tree.DecisionTreeClassifier() clf = clf.fit(X, y)"},{"prompt":"Develop a Python script to print all the permutations of a given string.","completion":"def permutations(string): perms = [] if len(string) == 1: perms.append(string) return perms for i in range(len(string)): substring = string[:i] + string[i+1:] for permutation in permutations(substring): perms.append(string[i] + permutation) return perms permutations('ABC')"},{"prompt":"Construct a Python program that shuffles a deck of cards. A standard deck of cards with 52 card","completion":"import random # A standard deck of cards with 52 cards deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A', 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A', 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A', 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K', 'A'] # Shuffle the deck random.shuffle(deck) print(deck)"},{"prompt":"Code a Python script to find the sum of the digits in a given number. Number: 452","completion":"def find_sum_of_digits(n): sum = 0 while(n > 0): rem = n % 10 sum += rem n = n // 10 return sum"},{"prompt":"Design an algorithm in Python to identify anagrams in a given list of words. [dog, god, cat, act]","completion":"def find_anagrams(words): # create an empty list to store the anagrams anagrams = [] # create a dictionary where the keys represent the sorted word and # the values represent the original word anagram_map = {} # loop through the given list of words for word in words: # sort the word alphabetically sorted_word = ''.join(sorted(word)) if sorted_word in anagram_map: # if the sorted word is already present # in the dictionary, add it to the anagrams list anagrams.append([word, anagram_map[sorted_word]]) else: # if the sorted word is not present # in the dictionary, add it to the dictionary anagram_map[sorted_word] = word return anagrams words = [\\"dog\\", \\"god\\", \\"cat\\", \\"act\\"] print(find_anagrams(words)) # prints [[\\"dog\\", \\"god\\"], [\\"cat\\", \\"act\\"]]"},{"prompt":"Create a matrix multiplication function in Python <no input>","completion":"# function to multiply two matrices def matrix_multiply(A, B): rows_A = len(A) cols_A = len(A[0]) rows_B = len(B) cols_B = len(B[0]) # rows of A should be equal to rows of B if rows_A != rows_B: print(\\"Cannot multiply the two matrices\\") return # colums of A should be equal to colums of B if cols_A != cols_B: print(\\"Cannot multiply the two matrices\\") return # multiplying matrices C = [[0 for row in range(cols_B)] for col in range(rows_A)] for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): C[i][j] += A[i][k] * B[k][j] return C"},{"prompt":"Using a for loop and if block, write a Python program to print numbers divisible by 5. Start: 1 End: 20","completion":"for num in range(1, 20): if num % 5 == 0: print(num)"},{"prompt":"Write a Python program to search a list of strings for the longest common substring. strings = [abcdmno, abcdxyz, bcdefmno, abccyz]","completion":"def longest_common_substring(strings): longest_string = \\"\\" for s in strings: longest_string = longest_string if longest_string else s for i in range(len(s)): for j in range(i, len(s)): if all(s[i:j+1] in s2 for s2 in strings) and len(s[i:j+1]) > len(longest_string): longest_string = s[i:j+1] return longest_string print(longest_common_substring(strings))"},{"prompt":"Create a Python function to remove all duplicate elements in a given list. list = [1, 2, 3, 4, 4, 4, 5, 5]","completion":"def removeDuplicates(lst): return list(set(lst)) list = [1, 2, 3, 4, 4, 4, 5, 5] print(removeDuplicates(list))"},{"prompt":"Edit this Python code to raise an error if the length of the list less than 3 def check_list_length(lists): if len(lists) > 3: return True else: return False","completion":"def check_list_length(lists): if len(lists) > 3: return True else: raise ValueError(\\"list length should be more than 3\\")"},{"prompt":"Write a Python program to insert a given string at the beginning of all items in a list. mylist=[one,two,three]","completion":"# Insert the given string at the beginning of all list items new_list = [\\"prefix_\\" + item for item in mylist] # Print the new list print(new_list) # Output: [\\"prefix_one\\", \\"prefix_two\\", \\"prefix_three\\"]"},{"prompt":"Create an API endpoint in Python that reads from a database table and returns a JSON object. The database table _students with the following columns and entries: | Name | Age | Course | |||| | Alice | 20 | CS | | Bob | 21 | Math |","completion":"from flask import Flask from flask_sqlalchemy import SQLAlchemy import json app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///students.db' db = SQLAlchemy(app) class Student(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(20)) age = db.Column(db.Integer) course = db.Column(db.String(20)) @app.route('/get_students') def get_students(): students = Student.query.all() students_list = [] for student in students: student_data = {} student_data['name'] = student.name student_data['age'] = student.age student_data['course'] = student.course students_list.append(student_data) return json.dumps(students_list)"},{"prompt":"Create a program in Python to encode a string with the Caesar cipher. The program should accept a string and a key as inputs and return the encoded string. \`\`\` string = 'Hello World' key = 2 \`\`\`","completion":"def encode_caesar_cipher(string, key): # initialize an empty result string result_string = '' # loop through the characters in the string for char in string: # get the ASCII value of the character ascii_value = ord(char) # do the encryption if (ascii_value >= 65 and ascii_value <= 90): # uppercase alphabet ascii_value += key if (ascii_value > 90): ascii_value -= 26 elif (ascii_value >= 97 and ascii_value <= 122): #lowercase alphabet ascii_value += key if (ascii_value > 122): ascii_value -= 26 # add the encrypted character to the result string result_string += chr(ascii_value) return result_string encoded_string = encode_caesar_cipher(string, key) print(encoded_string) # prints Jgnnq Yqtnf"},{"prompt":"Create a python program that detects if a number is even or odd. 7","completion":"def is_even_odd(num): if num % 2 == 0: return \\"Even\\" else: return \\"Odd\\" result = is_even_odd(7) print(result)"},{"prompt":"Create an algorithm to detect a palindrome string in Python. String str = madam;","completion":"def isPalindrome(str): left, right = 0, len(str) - 1 while right >= left: if not str[left] == str[right]: return False left += 1 right -= 1 return True"},{"prompt":"mplement a program in Python to separate odd and even numbers in separate arrays.","completion":"def separate_odd_even(arr): odd = [] even = [] for num in arr: if num % 2 == 0: even.append(num) else: odd.append(num) return odd, even"},{"prompt":"Create a Python program to remove all duplicate numbers from a list. [1, 2, 3, 2, 4, 3, 5]","completion":"def remove_duplicates(nums): new_list = [] for num in nums: if num not in new_list: new_list.append(num) return new_list if __name__ == '__main__': nums = [1,2,3,2,4,3,5] new_list = remove_duplicates(nums) print(new_list)"},{"prompt":"Create a loop in Python to print out every even number until 10.","completion":"for i in range(2, 11, 2): print(i)"},{"prompt":"Make a program in Python to calculate the square of a number when the number is given as an input. 5","completion":"num = int(input('Enter a number: ')) square = num**2 print(f'Square of {num} is {square}')"},{"prompt":"Construct a Python function to redesign a given list to meet a given sorting criteria. my_list = [31, 5, 42, 69, 20]","completion":"def sort_list(my_list): return sorted(my_list)"},{"prompt":"Create a REST API in Python that allows a user to post a message and returns the message and a unique identifier. Not applicable","completion":"import uuid import flask app = flask.Flask(__name__) messages = [] @app.route('/message', methods=['POST']) def add_message(): data = flask.request.get_json() data['id'] = str(uuid.uuid4) messages.append(data) return {'message': 'Added message', 'data': data}, 200 if __name__ == '__main__': app.run()"},{"prompt":"Create a Python script for computing the factorial of a number. The script should accept an integer as an input and then print the factorial of that number. 5","completion":"# define a function to compute factorial def factorial(num): if num == 0: return 1 else: return num * factorial(num-1) # main program starts here number = int(input('Enter a number : ')) if number < 0: print(\\"Factorial doesn't exist for negative numbers\\") elif number == 0: print(\\"Factorial of 0 is 1\\") else: print(\\"Factorial of\\", number, \\"is\\", factorial(number))"},{"prompt":"Can you generate a random number between 1 and 10 using Python?","completion":"import random def generate_random_number(): return random.randint(1, 10)"},{"prompt":"Generate a Python program that takes a number as input and prints all of the powers of two up to that number. number = 10","completion":"def pow_2(number): for i in range(number + 1): print(2 ** i) pow_2(10)"},{"prompt":"Write a Python program to detect potential anomalies in a dataset using unsupervised learning. Not applicable","completion":"import pandas as pd from sklearn.cluster import KMeans from sklearn.preprocessing import StandardScaler # Read in the dataset data = pd.read_csv('data.csv') # Prepare the dataset with feature scaling X = data.values scaler = StandardScaler() X = scaler.fit_transform(X) # Train a KMeans model kmeans = KMeans(n_clusters=2).fit(X) # Check the predictions for potential anomalies predictions = kmeans.predict(X) for i in range(len(predictions)): if predictions[i] == 1: print('Possible anomaly detected!')"},{"prompt":"Generate a python program to generate a random list of N elements. N = 5","completion":"import random def generate_random_list(n): res = [] for _ in range(n): res.append(random.randint(1, 100)) return res"},{"prompt":"Create a Python program classifying words into two classes based on their length Luxury, Ant, Dormitory, Pro","completion":"def classify_words(words): # Empty dictionaries short_dict = {} long_dict = {} # Splitting the input string into words word_list = words.split(\\", \\") # Classifying the words into two classes for word in word_list: if len(word) <= 7: short_dict[word] = len(word) else: long_dict[word] = len(word) # Return the dictionary return short_dict, long_dict # Main code input_string = \\"Luxury, Ant, Dormitory, Pro\\" short_dict, long_dict = classify_words(input_string) print(short_dict, long_dict)"},{"prompt":"Write a Python program to find the elements that are present in both lists. <list1:[1, 2, 3, 4]><list2:[3, 4, 5, 6]>","completion":"list1 = [1, 2, 3, 4] list2 = [3, 4, 5, 6] common_elements = [] for i in range(len(list1)): for j in range(len(list2)): if list1[i] == list2[j]: common_elements.append(list1[i]) print(common_elements) # [3, 4]"},{"prompt":"mplement a Python script which encodes a given string using #Base64. Not applicable","completion":"import base64 #encode def encode(string): string_bytes = string.encode('ascii') base64_bytes = base64.b64encode(string_bytes) base64_string = base64_bytes.decode('ascii') return base64_string string = 'This is a test string' print('Encoded string: ', encode(string)) // Output: Encoded string: VGhpcyBpcyBhIHRlc3Qgc3RyaW5n"},{"prompt":"Edit a Python program to add support for a GUI. import math def calculate_area(radius): area = math.pi * radius * radius return are","completion":"import math import tkinter as tk def calculate_area(radius): area = math.pi * radius * radius return area root = tk.Tk() canvas1 = tk.Canvas(root, width=300, height=300) canvas1.pack() entry1 = tk.Entry (root) canvas1.create_window(150, 140, window=entry1) def getSquareRoot (): root = entry1.get() label1 = tk.Label(root, text= calculate_area(int(root))) canvas1.create_window(150, 230, window=label1) button1 = tk.Button(text='Calculate Area', command=getSquareRoot) canvas1.create_window(150, 180, window=button1) root.mainloop()"},{"prompt":"Create a game of Rock, Paper, Scissors in Python. Not applicable","completion":"import random # Possible game outcomes outcomes = ['rock', 'paper', 'scissors'] # Print a welcome message print('Welcome to Rock, Paper, Scissors!') # Prompt for the user's choice user_choice = input('What is your choice? rock/paper/scissorsn') # Validate the user's choice if user_choice not in outcomes: print('Invalid choice!') exit() # Generate a random choice computer_choice = random.choice(outcomes) # Compare the choices if user_choice == computer_choice: print('It's a tie!') elif user_choice == 'rock' and computer_choice == 'scissors': print('You win!') elif user_choice == 'rock' and computer_choice == 'paper': print('Computer wins!') elif user_choice == 'paper' and computer_choice == 'rock': print('You win!') elif user_choice == 'paper' and computer_choice == 'scissors': print('Computer wins!') elif user_choice == 'scissors' and computer_choice == 'rock': print('Computer wins!') elif user_choice == 'scissors' and computer_choice == 'paper': print('You win!') # Print the choices print(f'You chose {user_choice}, computer chose {computer_choice}')"},{"prompt":"Create a class called 'Car' in Python, which instantiates with name, model, and price.","completion":"class Car: def __init__(self, name, model, price): self.name = name self.model = model self.price = price"},{"prompt":"Develop a Python program that converts temperature between Celsius, Fahrenheit and Kelvin.","completion":"def convertTemp(temp, fromUnit, toUnit): if fromUnit == 'C': if toUnit == 'F': temp = temp * (9/5) + 32 elif toUnit == 'K': temp += 273.15 elif fromUnit == 'F': if toUnit == 'C': temp = (temp - 32) * (5/9) elif toUnit == 'K': temp = (temp - 32) * (5/9) + 273.15 elif fromUnit == 'K': if toUnit == 'C': temp -= 273.15 elif toUnit == 'F': temp = (temp - 273.15) * (9/5) + 32 return temp temp = 100 print(\\"In Celsius:\\", convertTemp(temp, 'F', 'C')) print(\\"In Fahrenheit:\\", convertTemp(temp, 'C', 'F')) print(\\"In Kelvin:\\", convertTemp(temp, 'C', 'K'))"},{"prompt":"Create a Python function that prints the largest of three numbers. num1 = 10 num2 = 20 num3 = 5","completion":"def max_number(num1,num2,num3): max_num=max(num1,num2,num3) print(f\\"The largest number is {max_num}\\")"},{"prompt":"Generate a classification model to classify spam messages using logistic regression in python.","completion":"\\"\\"\\" Generate a classification model to classify spam messages using logistic regression in python \\"\\"\\" # Import libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # Read the dataset dataset = pd.read_csv('spam.csv') # Split the dataset into features and labels X = dataset.iloc[:, :-1].values y = dataset.iloc[:, -1].values # Split the dataset into training and test data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1) # Create a Logistic Regression model and train it log_reg = LogisticRegression() log_reg.fit(X_train, y_train) # Calculate the accuracy score accuracy = log_reg.score(X_test, y_test) print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(accuracy))"},{"prompt":"Using a while loop, create a Python program that prints the Fibonacci sequence from 0 to 100.","completion":"a, b = 0, 1 while b <= 100: print(b) a, b = b, a+b"},{"prompt":"Develop a Python script to generate a report containing the top keywords mentioned in the given document. Document: The quick brown fox jumped over the lazy dog","completion":"import re text = \\"The quick brown fox jumped over the lazy dog\\" # Extract words from the document words = re.findall(r'w+', text) # Get the frequency of each word word_freq = {} for word in words: if word not in word_freq: word_freq[word] = 0 word_freq[word] += 1 # Sort words in descending order by frequency sorted_word_freq = sorted(word_freq.items(), key = lambda x: x[1], reverse = True) # Print the top 10 most frequent words print(\\"Top 10 most frequent words:\\") for word, freq in sorted_word_freq[:10]: print(word, ' :', freq)"},{"prompt":"Design a computer program to sort the list according to alphabetical order. [python, javascript, java, ruby]","completion":"def alphabetical_sort(words): return sorted(words) list_of_words = [\\"python\\", \\"javascript\\", \\"java\\", \\"ruby\\"] sorted_list = alphabetical_sort(list_of_words) print(sorted_list)"},{"prompt":"Create a script in Python that checks that a given URL is active and responding. url = http://www.example.com","completion":"import requests url = \\"http://www.example.com\\" try: request = requests.get(url) if request.status_code == 200: print(\\"URL is active and responding\\") except Exception as e: print(f\\"Error: {e}\\")"},{"prompt":"Design an optimized selection sort algorithm in Python.","completion":"def selection_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, n): if arr[min_idx] > arr[j]: min_idx = j # Swap the found minimum element with # the first element arr[i], arr[min_idx] = arr[min_idx], arr[i]"},{"prompt":"Create a web scraper using Python that collects data from the given URL http://example.com/ http://example.com/","completion":"import requests from lxml import html # Get the response resp = requests.get('http://example.com/') # Parse the response doc = html.fromstring(resp.text) # Extract the data data = doc.xpath('//div/span/text()') # Print out the data print(data)"},{"prompt":"Create a Python function that takes a list of strings as an argument and returns a new sorted list with no duplicates. ['cat', 'dog', 'cat', 'mouse', 'lion', 'dog']","completion":"def remove_duplicates(strings): new_list = [] for s in strings: if s not in new_list: new_list.append(s) new_list.sort() return new_list strings = [\\"cat\\", \\"dog\\", \\"cat\\", \\"mouse\\", \\"lion\\", \\"dog\\"] unique_list = remove_duplicates(strings) print(unique_list)"},{"prompt":"Create a Python program that takes two strings as input, then counts and returns the number of characters that are different between the two strings. Hello World, Hello!","completion":"def count_difference(str1, str2): # the number of characters that are different diff = 0 # loop through the length for i in range(min(len(str1), len(str2))): # check if characters are different if str1[i] != str2[i]: diff += 1 # returning final result return diff print(count_difference(\\"Hello World\\", \\"Hello!\\"))"},{"prompt":"Write a function that generates a random password of 8 characters in Python.","completion":"import random def generate_password(): password = \\"\\" characters = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#%^&*()_+\\" for i in range(0,8): password += random.choice(characters) return password"},{"prompt":"Generate a multiline string in Python.","completion":"multi_line_str = ''' This is a multi-line string that spans multiple lines. '''"},{"prompt":"Create an API in Python for generating a random password. Not applicable","completion":"import random import string def generate_random_password(): # Choose a length for the password length = 8 # Create the password password = ''.join(random.choice(string.ascii_letters + string.digits) for i in range(length)) print(\\"Generated Password:\\", password) return password generate_random_password()"},{"prompt":"Create a python program for the following purpose: Create a program that takes a positive integer N and an array A of length N, and outputs the total number of unique pairs of elements in A which sum up to an even number.","completion":"def count_even_pairs(N, A): n = 0 for i in range(N): for j in range(i+1,N): if (A[i] + A[j]) % 2 == 0: n += 1 return n"},{"prompt":"Generate a logistic regression classifier in Python that classifies data into two classes (0 or 1). X: An array containing 8 feature values (floats). [1.0472, 2.1930, 1.6025, 0.8886, 2.5850, 1.4692, 1.2548, 0.8496] Y: An array containing labels for the data points (1 or 0). [0, 0, 1, 0, 0, 0, 0, 1]","completion":"# Import the necessary libraries import numpy as np from sklearn.linear_model import LogisticRegression # Load in the feature values and labels X = np.array([1.0472, 2.1930, 1.6025, 0.8886, 2.5850, 1.4692, 1.2548, 0.8496]).reshape(-1, 1) y = np.array([0, 0, 1, 0, 0, 0, 0, 1]) # Create the logistic regression model model = LogisticRegression(solver='liblinear').fit(X, y) # Evaluate the model score = model.score(X, y) print('Model accuracy is:', score) # Output: 0.75"},{"prompt":"Create an algorithm in Python to find the GCD of two numbers. Number 1: 28 Number 2: 56","completion":"# function to calculate GCD def gcd(x, y): # This function implements the Euclidian # algorithm to find GCD while(y): x, y = y, x % y return x # Driver program to test above function n1 = 28 n2 = 56 print(\\"GCD of\\", n1, \\"and\\", n2, \\"is\\", gcd(n1, n2))"},{"prompt":"Write a Python Script to find all pairs of numbers in a list that have a sum equal to the target value. list = [2, 4, 6, 8], target = 10","completion":"def findPair(lst, target): for i in range(0, len(lst)): for j in range(i + 1, len(lst)): if lst[i] + lst[j] == target: return print(lst[i],\\",\\", lst[j]) list = [2, 4, 6, 8] target = 10 findPair(list, target)"},{"prompt":"Write a custom python sorting algorithm. List of numbers: [3, 2, 1, 4]","completion":"def custom_sort(list_a): # Creating a list to store the sorted elements sorted_list = [] while list_a: # Find the smallest number from the list min_item = min(list_a) # Append the smallest number to the sorted list sorted_list.append(min_item) # Remove the number from the original list list_a.remove(min_item) # Return the sorted list return sorted_list print(custom_sort([3, 2, 1, 4]))"},{"prompt":"Write a Python class for Polygon which has the ability to compute the perimeter of a polygon.","completion":"class Polygon: def __init__(self, num_of_sides): self.number_of_sides = num_of_sides self.sides = [0 for i in range(num_of_sides)] def input_sides(self, sides): self.sides = sides def perimeter(self): peri = 0 for side in self.sides: peri += side return peri"},{"prompt":"Write a Python code to sort a dictionary by values dictionary = { red: 5, blue: 6, yellow: 9 }","completion":"sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[1]) print(sorted_dictionary)"},{"prompt":"Create a decision tree classifier in Python to predict if a patient has a disease given a set of symptoms. 50 patient records, each having 4 symptoms (fever, headache, sore throat, nausea) and a boolean value indicating the presence or absence of the disease.","completion":"# Import relevant packages import pandas as pd from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import train_test_split # Load the data data = pd.read_csv('patients_data.csv') # Create the feature and target vectors X = data[['fever', 'headache', 'sore throat', 'nausea']] y = data['disease'] # Split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # Create and fit the Decision Tree tree = DecisionTreeClassifier() tree.fit(X_train, y_train) # Make predictions predictions = tree.predict(X_test) # Evaluate the model accuracy = tree.score(X_test, y_test) print('Accuracy: ', accuracy)"},{"prompt":"Write a Python function to generate a substitution cipher of a given string string = abcdefghijklmnopqrstuvwxyz","completion":"def substitution_cipher(string): cipher = \\"\\" for i in string: cipher += chr(ord('a') + (ord(i) - ord('a') + 13) % 26) return cipher"},{"prompt":"Use NLP techniques in Python to generate a tagline from a sample text Sample text: this painting is an amazing representation of the beauty of nature.","completion":"import nltk from nltk.tokenize import word_tokenize sample_text = \\"This painting is an amazing representation of the beauty of nature.\\" words = word_tokenize(sample_text) tags = nltk.pos_tag(words) generator_words = [\\"Explore\\",\\"Discover\\",\\"Witness\\",\\"Captivate\\", \\"Embrace\\"] for tag in tags: if tag[1] == 'JJ': print(f'{tag[0]}, {generator_words[random.randint(0,4)]} the Wonder of Nature')"},{"prompt":"Could you write a program that does linear regression with two variables in Python?","completion":"import numpy as np from sklearn.linear_model import LinearRegression # Create data x = np.array([[1, 1], [1, 2], [2, 2], [2, 3]]) # Create target y = np.dot(x, np.array([1, 2])) + 3 # Create a linear regression model model = LinearRegression() # Fit the model model.fit(x, y) # Make prediction x_test = np.array([3, 5]) y_test = model.predict([x_test]) # Output prediction print(\\"Predicted value of y given x=[3,5] :\\", y_test[0])"},{"prompt":"Create a Python program for sentiment analysis. The program should read a given text, classify the overall sentiment as positive, neutral, or negative, and display the result. Text: The food was delicious but the service was slow.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer nltk.download('vader_lexicon') text = 'The food was delicious but the service was slow.' sid = SentimentIntensityAnalyzer() ss = sid.polarity_scores(text) if ss['compound'] >= 0.5: print('Positive sentiment') elif ss['compound'] <= -0.5: print('Negative sentiment') else: print('Neutral sentiment') Output: Negative sentiment"},{"prompt":"Can you develop a Python program to implement a stack data structure?","completion":"class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"prompt":"Create a class in python to store employee records.","completion":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary def set_name(self, name): self.name = name def set_age(self, age): self.age = age def set_salary(self,salary): self.salary = salary employee1 = Employee(\\"John\\", 30, 5000)"},{"prompt":"Given a list of tuples containing names and grades, calculate the average grade for each name using Python. [('Bob', 80), ('John', 90), ('Bob', 70), ('John', 85)]","completion":"grades = [('Bob', 80), ('John', 90), ('Bob', 70), ('John', 85)] grade_totals = {} for name, grade in grades: if name in grade_totals: grade_totals[name] = (grade_totals[name] + grade) / 2 else: grade_totals[name] = grade for name, average in grade_totals.items(): print(f'{name} has an average grade of {average}')"},{"prompt":"Write a python program to find the sum and average of four numbers.","completion":"nums = [5, 9, 16, 17] sum_nums = sum(nums) avg_nums = sum_nums / 4 print('Sum of the numbers is:', sum_nums) print('Average of the numbers is:', avg_nums)"},{"prompt":"Generate a Python function that takes two integer arguments and returns the greatest of them.","completion":"def greatest_of_two_integers(x, y): if x > y: return x elif y > x: return y else: return x"},{"prompt":"Create a program in Python to generate an infinite sequence of random numbers. Not applicable","completion":"# This program will generate an infinite sequence of random numbers import random # Generate infinite sequence of random numbers def rand_seq(): while True: yield random.random() # Print 10 random numbers for i in range(10): print(next(rand_seq()))"},{"prompt":"Write a Python script to filter out all words containing 10 or more characters. This is a sample sentence","completion":"sentence = \\"This is a sample sentence\\" words = sentence.split() long_words = [word for word in words if len(word) > 10] print(long_words)"},{"prompt":"Create a python program that generates a random password. The password should contain a combination of uppercase, lowercase, and numbers. Not applicable","completion":"import random import string def generate_password(): password_length = 8 chars = string.ascii_letters + string.digits return ''.join(random.choice(chars) for i in range(password_length)) print(generate_password())"},{"prompt":"a Python class, create a method to compute the average of n numbers without using the average function.","completion":"class AverageCalculator: def average(self, nums): sum = 0 for i in range(len(nums)): sum += nums[i] return sum / len(nums)"},{"prompt":"Write a function in Python that takes an integer as a parameter and returns the sum of all its positive divisors","completion":"def sum_of_divisors(n): divisors = [i for i in range(1,n+1) if n%i == 0] return sum(divisors) n = 24 print(\\"Sum of the positive divisors of 24 is:\\",sum_of_divisors(n))"},{"prompt":"Create a function in Python that takes an array of integers as input, checks if the array is sorted, and, if not, sorts it. [3, 1, 4, 2, 5]","completion":"def is_sorted(arr): sorted_arr = sorted(arr) if arr == sorted_arr: return True else: arr.sort() return arr"},{"prompt":"Generate a Python program that implements Linear Search with a list of integers as input. sampleList = [5, 2, 3, 8, 0]","completion":"def linearSearch(sampleList, x): for i in range(len(sampleList)): if sampleList[i] == x: return i return -1 # Driver code x = 5 result = linearSearch(sampleList, x) if result == -1: print(\\"Element not found\\") else: print(\\"Element found at index\\", result)"},{"prompt":"Create a TensorFlow program in Python that takes an array of labels and classification scores as input, and plots the precision/recall curve. import numpy as np # Array of classification labels y = np.array([1, 0, 1, 0, 1, 0, 0, 0, 1, 1]) # Array of classification scores scores = np.array([0.8, 0.6, 0.75, 0.9, 0.7, 0.3, 0.2, 0.1, 0.85, 0.5])","completion":"import numpy as np import matplotlib.pyplot as plt from sklearn.metrics import precision_recall_curve # Array of classification labels y = np.array([1, 0, 1, 0, 1, 0, 0, 0, 1, 1]) # Array of classification scores scores = np.array([0.8, 0.6, 0.75, 0.9, 0.7, 0.3, 0.2, 0.1, 0.85, 0.5]) # Get precision and recall value precision, recall, _ = precision_recall_curve(y, scores) # plot precision and recall curve plt.plot(recall, precision) plt.xlabel('Recall') plt.ylabel('Precision') plt.show()"},{"prompt":"Write a code to automate the process of sending an email to a list of people from a specified address.","completion":"import smtplib # create SMTP object s = smtplib.SMTP('smtp-mail.outlook.com', 587) # start TLS for security s.starttls() # Authentication s.login(\\"sender_address\\", \\"sender_password\\") # message to be sent message = \\"\\"\\" Subject: Hi there This message is sent from Python.\\"\\"\\" # sending the mail s.sendmail(\\"sender_address\\", receivers_list , message) # terminating the session s.quit()"},{"prompt":"Write a code to create a dictionary from given list of words. words = ['Python', 'is', 'an', 'interpreted', 'highlevel', 'programming', 'language', 'for', 'generalpurpose', 'programming']","completion":"word_dict = {'Python': 1, 'is': 2, 'an': 3, 'interpreted': 4, 'high-level': 5, 'programming': 6, 'language': 7, 'for': 8, 'general-purpose': 9, 'programming': 10 }"},{"prompt":"Generate a python program to calculate the mean, median and mode of a given set of numbers [1, 2, 2, 3, 4]","completion":"def mean(data): return sum(data) / len(data) def median(data): sorted_data = sorted(data) mid = len(data)//2 if len(data) % 2 == 0: return (sorted_data[mid] + sorted_data[mid-1])/2 else: return sorted_data[mid] def mode(data): counted_data = dict() for item in data: if item not in counted_data: counted_data[item] = 1 else: counted_data[item] += 1 highest_count = 0 modes = [] for key, value in counted_data.items(): if value > highest_count: modes = [key] highest_count = value elif value == highest_count: modes.append(key) if len(modes) == len(data): modes = [] return modes"},{"prompt":"Can you write a Python script that prints out the number of 'a's found in a text string? string = abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc","completion":"text = \\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\\" count = 0 for char in text: if char == 'a': count += 1 print(count)"},{"prompt":"Create a program in Python that adds two numbers together. 5, 10","completion":"def add(x, y): return x + y x = 5 y = 10 print(add(x, y))"},{"prompt":"Create an autocomplete suggestion engine that takes in a prefix string and returns a set of valid words. prefix = 'pyth'","completion":"def auto_complete(prefix): valid_words = [] words_list = get_words_list() for word in words_list: if word.startswith(prefix): valid_words.append(word) return set(valid_words) prefix = 'pyth' print(auto_complete(prefix)) # Output: {'python', 'pythagorean', 'pythagoras', 'pythons'}"},{"prompt":"Design an algorithm in Python that sorts an unordered list of three numbers in increasing order. List = [3, 1, 2]","completion":"def sort_list(input_list): output_list = [] while input_list: smallest = input_list[0] for i in input_list: if i < smallest: smallest = i output_list.append(smallest) input_list.remove(smallest) return output_list"},{"prompt":"Write a Python program to create a random password generator with a length of 8 characters. The password should contain a combination of uppercase letters, lowercase letters, numbers and special characters. Not applicable","completion":"import random import string def generate_password(): password_characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(password_characters) for x in range(8)) print(generate_password())"},{"prompt":"Generate a program in Python to remove all vowels from a sentence, and print the resulting string to the console. This is a sentence","completion":"def remove_vowels(word): new_word = \\"\\" for i in word: if i not in \\"aeiouAEIOU\\": new_word += i return new_word sentence = \\"This is a sentence\\" print(remove_vowels(sentence))"},{"prompt":"Write a function in Python that will take in a string and return the most commonly occurring character. Sample string: abrakadabra","completion":"def max_char(s): chars = {} for c in s: chars[c] = chars.get(c, 0) + 1 max_val = -1 max_char = None for c, v in chars.items(): if v > max_val: max_val = v max_char = c return max_char print(max_char('abrakadabra')) # Output: a (occurs 5 times)"},{"prompt":"Design a state machine in Python to ensure that a finite series of events take place in a predetermined order.","completion":"import enum class State(enum.Enum): Initialize = 0, Event1 = 1, Event2 = 2, Event3 = 3, Finalize = 4 class StateMachine: def __init__(self): self.state = State.Initialize def process(self): if self.state == State.Initialize: self.state = State.Event1 elif self.state == State.Event1: self.state = State.Event2 elif self.state == State.Event2: self.state = State.Event3 elif self.state == State.Event3: self.state = State.Finalize elif self.state == State.Finalize: self.state = State.Initialize"},{"prompt":"Create a regular expression in Python to match strings that contain two consecutive identical numbers.","completion":"import re pattern = re.compile(r'(d)1') pattern.search(\\"ab890087kkk\\") # returns None pattern.search(\\"ab89888kkk\\") # returns <re.Match object; span=(2, 5), match='888'>"},{"prompt":"Develop a program in Python that will identify the number of days until a given date. Given date: 12/25/2022","completion":"Develop a program in Python that will identify the number of days until a given date. An example of the code may be as follows: from datetime import datetime # get the current date current_date = datetime.now() # get the given date given_date = datetime.strptime(\\"12/25/2022\\", \\"%m/%d/%Y\\") # calculate the difference difference = given_date - current_date # print the result print(\\"Number of days until 12/25/2022: \\" + str(difference.days))"},{"prompt":"Calculate the computational complexity of this Python code. def find_max(list): max_num = 1 for item in list: if item > max_num: max_num = item return max_num","completion":"The computational complexity of this code is O(n) because the code iterates through each element in the list only once. Therefore, the complexity is directly proportional to the length of the list, n."},{"prompt":"Generate Python code to clean a text string by removing all punctuation marks.","completion":"import string def clean_string(text): return ''.join(c for c in text if c not in string.punctuation)"},{"prompt":"Convert the given Python code to Java. def search(arr, x): n = len(arr) for i in range (0, n): if (arr[i] == x): return i; return 1;","completion":"public static int search(int[] arr, int x) { int n = arr.length; for (int i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; }"},{"prompt":"Optimize the following Python function to merge two lists. a = [1,3,5] b = [2,4,6]","completion":"def merge_lists(a, b): merged_list = [] a_pos = 0 b_pos = 0 while a_pos < len(a) and b_pos < len(b): if a[a_pos] < b[b_pos]: merged_list.append(a[a_pos]) a_pos += 1 else: merged_list.append(b[b_pos]) b_pos += 1 return merged_list + a[a_pos:] + b[b_pos:] a = [1,3,5] b = [2,4,6] print(merge_lists(a,b))"},{"prompt":"Generate a python program that prints the cube of a given number. 3","completion":"def print_cube(num): print(num**3) num = 3 print_cube(num)"},{"prompt":"Given a Python dictionary, write a program to remove all the keys whose value is greater than a specified number. dictionary = {'a': 1, 'b': 2, 'c': 3, 'd':4}, threshold = 2","completion":"dictionary = {'a': 1, 'b': 2, 'c': 3, 'd':4} threshold = 2 def remove_keys(dict, threshold): to_remove = [k for k, v in dict.items() if v > threshold] for k in to_remove: del dict[k] return dict print(remove_keys(dictionary, threshold)) # Output: {'a': 1, 'b':2}"},{"prompt":"Generate the output for the following Python code. List = [1, 2, 3, 4, 5, 6] for num in List: if (num % 2 == 0): print (num, is even) break","completion":"2 is even"},{"prompt":"dentify a code segment's language from a given snippet. if a > b: print(a is bigger) else: print(b is bigger)","completion":"Python"},{"prompt":"Generate a function in Python using the input argument sideeffect free function to calculate the square root of a number. 25","completion":"def get_sqrt(x): return x**0.5"},{"prompt":"Develop a Python program to find the shortest distance between two words in a sentence. The quick brown fox jumps over the lazy dog","completion":"def find_shortest_distance(sentence, word1, word2): words = sentence.split() shortest_distance = float(\\"inf\\") for i, word in enumerate(words): if word == word1 or word == word2: if word == word1: target_word = word2 else: target_word = word1 for j in range(i + 1, len(words)): if words[j] == target_word: distance = j - i if distance < shortest_distance: shortest_distance = distance break return shortest_distance sentence = \\"The quick brown fox jumps over the lazy dog\\" distance = find_shortest_distance(sentence, 'fox', 'dog') print(\\"The shortest distance between fox and dog is \\", distance) # The shortest distance between fox and dog is 8"},{"prompt":"The given code sets up an Autobahn|Python WAMPv2 server and client. To set up a server, call the function \`wampServ\` with the address and port as arguments. To set up a client, call the function \`wampClient\` with the address, client endpoint, topic, and key as arguments. The client function returns a list of connections.","completion":"# DF Everywhere # Copyright (C) 2014 Travis Painter # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # You should have received a copy of the GNU General Public License along # with this program; if not, write to the Free Software Foundation, Inc., # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. from twisted.internet import reactor from twisted.internet.endpoints import clientFromString from twisted.internet.protocol import ReconnectingClientFactory from autobahn.twisted.wamp import ApplicationSessionFactory from autobahn.twisted.wamp import ApplicationSession from autobahn.twisted.websocket import WampWebSocketClientFactory from autobahn.wamp import types from autobahn.wamp import auth class SubpubTileset(ApplicationSession): \\"\\"\\" An application component that subscribes and receives events. \\"\\"\\" def onConnect(self): self.join(self.config.realm, [u\\"wampcra\\"], self.config.extra['topic']) def onChallenge(self, challenge): #print challenge if challenge.method == u\\"wampcra\\": if u'salt' in challenge.extra: key = auth.derive_key(self.config.extra['topic'], challenge.extra['salt'], challenge.extra.get('iterations', None), challenge.extra.get('keylen', None)) else: key = self.config.extra['topic'] signature = auth.compute_wcs(key, challenge.extra['challenge']) return signature else: raise Exception(\\"don't know how to compute challenge for authmethod {}\\".format(challenge.method)) def onJoin(self, details): if not self in self.factory._myConnection: self.factory._myConnection.append(self) def onLeave(self, details): if self in self.factory._myConnection: self.factory._myConnection.remove(self) self.disconnect() class MyClientFactory(WampWebSocketClientFactory, ReconnectingClientFactory): #from: https://gist.github.com/DenJohX/e6d0864738da10cb9685 def clientConnectionFailed(self, connector, reason): print \\"*************************************\\" print \\"Connection Failed\\" print \\"reason:\\", reason print \\"*************************************\\" ReconnectingClientFactory.clientConnectionFailed(self, connector, reason) def clientConnectionLost(self, connector, reason): print \\"*************************************\\" print \\"Connection Lost\\" print \\"reason:\\", reason print \\"*************************************\\" ReconnectingClientFactory.clientConnectionLost(self, connector, reason) def wampServ(wampAddress, wampPort, wampDebug = False): \\"\\"\\" Sets up an Autobahn|Python WAMPv2 server. Code modified from WAMP documentation. \\"\\"\\" from twisted.internet.endpoints import serverFromString from autobahn.wamp.router import RouterFactory from autobahn.twisted.wamp import RouterSessionFactory from autobahn.twisted.websocket import WampWebSocketServerFactory create a WAMP router factory router_factory = RouterFactory() create a WAMP router session factory session_factory = RouterSessionFactory(router_factory) create a WAMP-over-WebSocket transport server factory transport_factory = WampWebSocketServerFactory(session_factory, wampAddress, debug = wampDebug) transport_factory.setProtocolOptions(failByDrop = False) Start websocket server server = serverFromString(reactor, wampPort) server.listen(transport_factory) def wampClient(wampAddress, wampClientEndpoint, topic, key): \\"\\"\\" Sets up an Autobahn|python WAMPv2 client. Code modified from WAMP documentation. \\"\\"\\" component_config = types.ComponentConfig(realm = \\"realm1\\", extra = {'key': unicode(key), 'topic': unicode(topic)}) session_factory = ApplicationSessionFactory(config = component_config) session_factory._myConnection = [] session_factory.session = SubpubTileset create a WAMP-over-WebSocket transport client factory #transport_factory = WampWebSocketClientFactory(session_factory, wampAddress, debug = False) transport_factory = MyClientFactory(session_factory, wampAddress, debug = False, debug_wamp = False) transport_factory.setProtocolOptions(failByDrop = False) start a WebSocket client from an endpoint client = clientFromString(reactor, wampClientEndpoint) client.connect(transport_factory) return session_factory._myConnection"},{"prompt":"Write an algorithm in Python to optimize the ordering of the items in an online shopping cart. The algorithm should optimize for the lowest shipping cost and the fastest delivery time. Items: item1: weight 5oz, cost 2 item2: weight 12oz, cost 5 item3: weight 8oz, cost 3 item4: weight 3oz, cost 1 Shipping cost options: Option 1 2 for first 5oz and +50¢ per additional oz Option 2 3 for first 6oz and +20¢ per additional oz","completion":"def optimize_shipping_cost(items): # sort items by cost items_by_cost = sorted(items, key=lambda x: x['cost']) # traverse the sorted list from the lowest to highest cost total_cost = 0 # total cost of the cart weight = 0 # total weight of the cart for item in items_by_cost: weight += item['weight'] # select the least expensive shipping option if weight <= 5: total_cost = 2 elif 6 < weight < 12: total_cost = 3 + (weight - 6) * 0.2 else: total_cost = 2 + (weight - 5) * 0.5 return total_cost"},{"prompt":"Create a serverless API in Python that takes a text string as input and returns the associated Wikipedia page for the text. Text String: Python programming language","completion":"import wikipedia def get_wiki_page(query): try: page = wikipedia.page(query) except: return None return page.content"},{"prompt":"Design a Python program to find the number of valid parentheses combinations.","completion":"def find_valid_parens_combinations(n): if n == 0: return 0 if n == 1: return 1 combinations = 0 for i in range(1, n, 2): left = i right = n - i combinations += find_valid_parens_combinations(left) * find_valid_parens_combinations(right) return combinations"},{"prompt":"Write a Python class for storing student ID and name","completion":"class Student: def __init__(self, student_id, name): self.student_id = student_id self.name = name def get_details(self): return self.student_id, self.name"},{"prompt":"Construct a Python program to search all numbers divisible by 5 and 7 between a given range The range 1000 to 2000","completion":"def find_divisble_numbers(start, end): divisible_numbers = [] for i in range(start, end + 1): if i % 5 == 0 and i % 7 == 0: divisible_numbers.append(i) return divisible_numbers divisible_numbers = find_divisble_numbers(1000, 2000) print(divisible_numbers)"},{"prompt":"Create a text analyzer in Python that can count the number of words, characters, and sentences in a text string. The quick brown fox jumps over the lazy dog.","completion":"# Function to count number of words def count_words(text): words = text.split() return len(words) # Function to count number of characters def count_characters(text): return len(text) # Function to count number of sentences def count_sentences(text): sentences = text.split('.') return len(sentences) text = \\"The quick brown fox jumps over the lazy dog.\\" num_words = count_words(text) print(f\\"Number of words: {num_words}\\") num_characters = count_characters(text) print(f\\"Number of characters: {num_characters}\\") num_sentences = count_sentences(text) print(f\\"Number of sentences: {num_sentences}\\")"},{"prompt":"Create a Python program to read a string and return the character with the highest frequency. Sample string","completion":"import collections str = \\"Sample string\\" count = collections.Counter(str) highest_freq = 0 highest_freq_char = '' for char, value in count.items(): if value > highest_freq: highest_freq = value highest_freq_char = char print(\\"The character {} has the highest frequency of {} in this string\\".format(highest_freq_char, highest_freq))"},{"prompt":"Construct a decision tree in Python using the given data set. import pandas as pd data = { 'Skewness': ['low', 'high', 'medium'], 'Target': ['yes', 'no', 'yes'] } df = pd.DataFrame(data)","completion":"from sklearn import tree features = ['Skewness'] X = df[features] y = df['Target'] clf = tree.DecisionTreeClassifier(random_state=0) clf = clf.fit(X, y)"},{"prompt":"Write a short program in Python that takes in a string as input and counts the number of distinct characters in it.","completion":"def distinct_char_count(string): unique_characters = set(string) return len(unique_characters)"},{"prompt":"Create a Python GUI to display the output of the following program in a chart. import pandas as pd data = { 'x': [5,6,7,8,9,10], 'y': [11,5,5,5,5,5] } df = pd.DataFrame(data)","completion":"import tkinter as tk import pandas as pd import matplotlib.pyplot as plt # Load the data data = { 'x': [5,6,7,8,9,10], 'y': [11,5,5,5,5,5] } df = pd.DataFrame(data) # Create the application window root = tk.Tk() # Create a figure to display the data fig = plt.Figure(figsize=(4,4), dpi=100) ax = fig.add_subplot(111) ax.plot(df['x'], df['y']) canvas = FigureCanvasTkAgg(fig, master=root) canvas.get_tk_widget().pack() # Run the application root.mainloop()"},{"prompt":"Write an algorithm in Python to measure the similarity between two text documents. Not applicable","completion":"# Import essential libraries import os from nltk.tokenize import word_tokenize from nltk.corpus import stopwords from nltk.stem import PorterStemmer from sklearn.feature_extraction.text import CountVectorizer import numpy as np # Define the documents doc1 = \\"This is the first document\\" doc2 = \\"This is the second document\\" # Tokenize the documents words_in_doc1 = word_tokenize(doc1) words_in_doc2 = word_tokenize(doc2) # Remove the stop words stop_words = set(stopwords.words('english')) filtered_doc1 = [w for w in words_in_doc1 if not w in stop_words] filtered_doc2 = [w for w in words_in_doc2 if not w in stop_words] # Stem the documents ps = PorterStemmer() stem_doc1 = [ps.stem(word) for word in filtered_doc1] stem_doc2 = [ps.stem(word) for word in filtered_doc2] #Generate Bag of Words for both documents bag_of_words1 = ' '.join(stem_doc1) bag_of_words2 = ' '.join(stem_doc2) # Generate the corpus corpus = [bag_of_words1, bag_of_words2] # Generate the Count Vector cv = CountVectorizer() vectors = cv.fit_transform(corpus).toarray() # Calculate the cosine similarity similarity = np.dot(vectors[0], vectors[1])/(np.linalg.norm(vectors[0])* np.linalg.norm(vectors[1])) print(\\"Similarity between the 2 texts: {}\\".format(similarity))"},{"prompt":"Design a code generation program in Python to generate a HTML page with text content.","completion":"def generate_html(text): html = \\"<html>n\\" html += \\"<body>n\\" html += \\"<p>\\" + text + \\"</p>n\\" html += \\"</body>n\\" html += \\"</html>n\\" return html if __name__ == \\"__main__\\": text = \\"Hello World!\\" html = generate_html(text) print(html)"},{"prompt":"Create a class in Python to define a point in 3D space.","completion":"class Point3D(object): def __init__(self, x, y, z): self.x = x self.y = y self.z = z def to_string(self): return \\"({}, {}, {})\\".format(self.x, self.y, self.z)"},{"prompt":"Write a correct Python program to find the sum of all the digits of an integer.","completion":"def sum_of_digits(n): \\"\\"\\"Find the sum of all the digits of an integer n\\"\\"\\" s = 0 while n: s += n % 10 n //= 10 return s"},{"prompt":"Develop a Python program to check whether two given strings are anagrams of each other. s1 = listen, s2 = silent","completion":"def is_anagram(s1, s2): s1 = s1.lower().replace(\\" \\", \\"\\") s2 = s2.lower().replace(\\" \\", \\"\\") #check if both strings have exact letters if sorted(s1) == sorted(s2): print(\\"The strings are anagrams.\\") else: print(\\"The strings are not anagrams.\\") # Driver program to check the above function is_anagram(\\"listen\\", \\"silent\\")"},{"prompt":"Create a python program that creates a random password with 8 characters.","completion":"import random import string def create_password(): chars = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(chars) for _ in range(8)) return password print(create_password())"},{"prompt":"Determine the type of the given expression in Python. Expression: 9 + 5","completion":"int"},{"prompt":"Develop a webscraper in Python to retrieve information from a given website. URL = https://en.wikipedia.org/wiki/Python_(programming_language)","completion":"import requests from bs4 import BeautifulSoup # Make a GET request to fetch the raw HTML content html_content = requests.get(URL).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Print all the articles on the page print(\\"All articles\\") print(\\"-----------\\") articles = soup.find_all('p') for article in articles: print(article.text) # Print all the headlines print(\\"Headlines\\") print(\\"--------\\") headlines = soup.find_all('h1') for headline in headlines: print(headline.text) # Print all the hyperlinks print(\\"Hyperlinks\\") print(\\"---------\\") links = soup.find_all('a') for link in links: print(link.get('href'))"},{"prompt":"Create a Python function that reorders an integer array using the Bubble Sort algorithm. arr = [2, 3, 1, 5, 9]","completion":"def bubble_sort(arr): # Traverse through all array elements for i in range(len(arr)): # Last i elements are already in place for j in range(0, len(arr)-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [2, 3, 1, 5, 9] bubble_sort(arr) # Prints the sorted array print (\\"Sorted array list is:\\" ,arr)"},{"prompt":"Suggest a program to calculate the dot product of two vectors","completion":"# Python program to calculate the dot product of two vectors # vector A A = [1, 2, 3] # vector B B = [2, 3, 4] # dot product of two vectors dot_product = 0 # iterating over vector elements for i in range(len(A)): dot_product += A[i] * B[i] # print the dot product print(dot_product) # Output: 20"},{"prompt":"Classify the given words using a Python classification program. Words: horse, dog, c","completion":"import nltk from nltk.tokenize import word_tokenize words = ['horse', 'dog', 'cat'] tokens = [word_tokenize(word) for word in words] for token in tokens: print(nltk.pos_tag([token])[0][1]) # prints NN, NN, NN"},{"prompt":"Create a function in Python that sorts a list of integers in O(nlog(n)) time complexity.","completion":"def sortList(arr): if len(arr) == 0: return [] mid = len(arr) // 2 left = arr[:mid] right = arr[mid:] left = sortList(left) right = sortList(right) return merge(left, right) def merge(left, right): result = [] leftIndex = 0 rightIndex = 0 while leftIndex < len(left) and rightIndex < len(right): if left[leftIndex] < right[rightIndex]: result.append(left[leftIndex]) leftIndex += 1 else: result.append(right[rightIndex]) rightIndex += 1 result += left[leftIndex:] result += right[rightIndex:] return result"},{"prompt":"Generate the python code that check if the given element is in a list. list = [1, 2, 3, 4]","completion":"def check_list(list, element): if element in list: print(element, \\"is in the list\\") else: print(element, \\"is not in the list\\")"},{"prompt":"Develop a Python program to decrypt the given messages using a key? message: AB cDE@5sfg90~!, key: 6","completion":"def decrypt(message, key): decrypted_message = \\"\\" for char in message: ascii_value = ord(char) decrypted_char = chr(ascii_value - key) decrypted_message += decrypted_char return decrypted_message message = \\"AB cDE@5sfg90~!\\" key = 6 decrypted_message = decrypt(message, key) print(decrypted_message)"},{"prompt":"Build a Python program to print the smallest number in a list. [3, 5, 2, 8, 1]","completion":"def smallest_list(list_numbers): smallest = list_numbers[0] for i in list_numbers[1:]: if i < smallest: smallest = i return smallest"},{"prompt":"Generate a function in Python to compute the maximum of two numbers without using any comparison operator.","completion":"def maximum(x, y): # subtract two numbers # and return the sign of the result s = (x - y) >> 63 # return x if s = 0 # else return y return x - s * (x - y)"},{"prompt":"Generate a function in Python that takes a number as input and prints its corresponding binary representation. 5","completion":"def binary_representation(num): binary_representation = bin(num)[2:] print(\\"Binary representation of \\" + str(num) + \\" is: \\" + binary_representation) # Driver code binary_representation(5) # Binary representation of 5 is: 101"},{"prompt":"Define a sorting algorithm in Python that sorts numbers in ascending order. [3, 7, 5, 4, 1]","completion":"def sort(A): A_len = len(A) for i in range(A_len): for j in range(A_len - i - 1): if A[j] > A[j+1]: A[j], A[j+1] = A[j+1], A[j] return A sort([3, 7, 5, 4, 1]) # Outputs [1, 3, 4, 5, 7]"},{"prompt":"Create a Python program to find the shortest path from source to destination. Source = [0,0] Destination = [5,5]","completion":"from collections import deque # Helper function to get the neighbors of a cell def get_neighbors(cell): x, y = cell[0], cell[1] neighbors = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)] return [neighbor for neighbor in neighbors if 0 <= neighbor[0] < 6 and 0 <= neighbor[1] < 6] # Helper function to get the cost of a cell def get_cost(cell): x, y = cell[0], cell[1] return abs(x-5) + abs(y-5) # Find the shortest path from the source to the destination def find_shortest_path(source, destination): # Create a queue to store the cells to be visited cells_to_visit = deque([source]) # Create a dictionary to store the parent cell for each cell parents = {source: None} while cells_to_visit: current_cell = cells_to_visit.popleft() # Find the neighbors of the current cell neighbors = get_neighbors(current_cell) # Iterate over the neighbors for neighbor in neighbors: # Get the cost of the neighbor neighbor_cost = get_cost(neighbor) # If the neighbor has not been visited yet if neighbor not in parents: # Update the queue cells_to_visit.append(neighbor) # Update the parents dictionary parents[neighbor] = current_cell # If the neighbor is the destination if neighbor == destination: shortest_path = [] current = destination while current is not None: shortest_path.append(current) current = parents[current] return reversed(shortest_path) # Call the find_shortest_path function shortest_path = find_shortest_path([0, 0], [5, 5]) # Print the shortest path print('The shortest path is:') print(list(shortest_path))"},{"prompt":"To run Scalability1, follow the instructions in the README.md file. The code imports modules and defines variables and functions necessary for the program to run. To execute the program, run the main function. The program measures the scalability of a clustering algorithm using instance matrices and outputs statistics to a specified directory. Edit the parameters in the params dictionary to adjust the clustering algorithm's performance.","completion":"#!/usr/bin/python3 '''Run Scalability-1. See README.md for details. ''' import sys, subprocess, os.path from Util import intersperse def main(): skip = { 'Measure' : False, } basedir = '' dirs = { 'Instances' : os.path.join(basedir, 'Data', 'Instances'), 'Statistics' : os.path.join(basedir, 'Data', 'Statistics', 'Scalability-1'), 'Bin' : '../../Build', } files = { 'Instances' : [ os.path.join(dirs['Instances'], 'instances500.csv'), os.path.join(dirs['Instances'], 'instances1000.csv'), os.path.join(dirs['Instances'], 'instances2500.csv'), os.path.join(dirs['Instances'], 'instances5000.csv'), os.path.join(dirs['Instances'], 'instances7500.csv'), os.path.join(dirs['Instances'], 'instances10000.csv') ], } progs = { 'Scalability' : os.path.join(dirs['Bin'],'Experiments/02-ScalabilityOfClusteringAlgorithm/Scalability'), } params = { 'clusters' : [4, 8, 16, 32, 64], 'histograms' : 7*8, # 7 scales * 8 features 'burnin' : 10, 'iterations' : 100, 'branching' : 1, } if skip['Measure']: print( 'Skipping: Measure' ) else: print( 'Measuring' ) for instanceMatrix in files['Instances']: args = [ progs['Scalability'], '--input', instanceMatrix, '--nHistograms', \\"%d\\" % params['histograms'], '--output', os.path.join(dirs['Statistics'], 'stats_' + os.path.basename(instanceMatrix)), '--burnin', \\"%d\\" % params['burnin'], '--iterations', \\"%d\\" % params['iterations'], '--branching', \\"%d\\" % params['branching'] ] + list(intersperse('--clusters', (\\"%d\\" % k for k in params['clusters']))) print(' '.join(args)) if subprocess.call( args ) != 0: print( 'Error measuring', instanceMatrix ) return 1 return 0 if __name__ == '__main__': sys.exit( main() )"},{"prompt":"Write some Python code to detect bias in text using the Gender Bias Detection software? The software requires a text string to query.","completion":"from gender_bias_detection import detect_bias text = \\"The software requires a text string to query.\\" bias_signal = detect_bias(text) # Checking is the detected bias is positive if bias_signal > 0: print(\\"The text contains gender bias.\\") else: print(\\"The text does not contain gender bias.\\")"},{"prompt":"Create an algorithm in Python that takes a list of strings and returns a list of strings with the duplicates removed. [apple, banana, apple, orange]","completion":"def remove_duplicates(list_of_strings): unique_strings = set(list_of_strings) return list(unique_strings)"},{"prompt":"Develop a function that prints out the first 100 prime numbers in Python.","completion":"def is_prime(num): # Return False if num is less than 2 if num < 2: return False # Check if any number from 2 to (num - 1) divides num for i in range(2, num): if num % i == 0: return False else: return True nums = [] num = 2 while len(nums) < 100: if is_prime(num): nums.append(num) num = num + 1 print(nums)"},{"prompt":"Write a Python program to combine two given strings by alternating its characters string1 = ab string2 = xy","completion":"def combine_strings(string1, string2): combined_string = \\"\\" length = max(len(string1), len(string2)) for i in range(length): combined_string += string1[i] if i < len(string1) else \\"\\" combined_string += string2[i] if i < len(string2) else \\"\\" return combined_string result = combine_strings(\\"ab\\", \\"xy\\") print(result)"},{"prompt":"Write a Python script to find the common elements in two given lists. List A: [1, 3, 5, 7, 9] List B: [2, 3, 4, 5, 8]","completion":"def findCommonElements(listA, listB): commonElements = [] for elementA in listA: for elementB in listB: if elementA == elementB: commonElements.append(elementA) return commonElements listA = [1, 3, 5, 7, 9] listB = [2, 3, 4, 5, 8] commonElements = findCommonElements(listA, listB) print(commonElements) # Output: [3, 5]"},{"prompt":"Create a Python script to merge two dictionaries. dict1 = {'a': 1, 'b': 2} dict2 = {'c': 3, 'd': 4}","completion":"def merge_dicts(dict1, dict2): res = {**dict1, **dict2} return res dict1 = {'a': 1, 'b': 2} dict2 = {'c': 3, 'd': 4} merged_dicts = merge_dicts(dict1, dict2) print(merged_dicts)"},{"prompt":"Design a distributed system using Kafka and Spark to process tweets. Not applicable","completion":"The distributed system consists of two core components: Apache Kafka and Apache Spark. Apache Kafka receives real-time tweets from the Twitter API as a stream of data in JSON format. This stream is routed to persistent message queues in Kafka. A Kafka consumer can then read and process the tweets from these queues. Apache Spark is then used to process and analyze the data from these Kafka queues. The data is ingested into Spark and processed using custom code written in Python. This code performs a variety of functions such as data transformation, cleansing, and aggregation. The output of this process is then written to a persistent data store such as Amazon S3. This distributed system can process a high volume of tweets in real-time and can provide powerful insights."},{"prompt":"Develop probabilistic models using Python to label the sentiment of a given sentence. Sentence: This movie was extremely disappointing.","completion":"import nltk from nltk.tokenize import sent_tokenize from nltk.sentiment.vader import SentimentIntensityAnalyzer sentence = \\"This movie was extremely disappointing.\\" sid = SentimentIntensityAnalyzer() sentiment = sid.polarity_scores(sentence) if sentiment['compound'] >= 0.05: sentiment_label = \\"positive\\" elif sentiment['compound'] <= - 0.05: sentiment_label = \\"negative\\" else: sentiment_label = \\"neutral\\" print(sentiment_label) # prints \\"negative\\""},{"prompt":"Create a Python function to evaluate a given polynomial equation P(x) = x^2 4x + 6","completion":"def poly_evaluation(x): return x**2 - 4*x + 6 x = 2 result = poly_evaluation(x) print(result) # prints 0"},{"prompt":"Design a function in Python that accepts a string and prints the number of occurrences of each letter in the string. Hello, World!","completion":"def count_letters(text): letters_count = dict() for char in text: if char not in letters_count: letters_count[char] = 1 else: letters_count[char] += 1 return letters_count if __name__ == '__main__': text = 'Hello, World!' print(count_letters(text))"},{"prompt":"Write a python script to calculate the standard deviation of a given list of numbers numbers = [1, 2, 3, 4, 5]","completion":"import numpy as np def calculate_standard_deviation(arr): return np.std(arr) print(calculate_standard_deviation(numbers)) # Prints 1.4142135623730951"},{"prompt":"Create a Python script to print the first 20 elements of the Fibonacci sequence.","completion":"# Function to print first n fibonacci numbers def fibonacci(n): f1 = 0 f2 = 1 print(f1, f2, end = \\" \\") for x in range(2, n): next_el = f1 + f2 print(next_el, end = \\" \\") f1 = f2 f2 = next_el # Driver code n = 20 fibonacci(n)"},{"prompt":"Write Python code to calculate the sum of all the items in a dictionary.","completion":"def sum_dict_items(dictionary): total = 0 for key, value in dictionary.items(): total = total + value return total"},{"prompt":"Write a Python program to accept user input as a string and check if the user input is a palindrome (a word, phrase, or sequence that reads the same backward as forward). radar","completion":"input_word = input(\\"Enter a word: \\") def is_palindrome(word): word = word.lower() reversed_word = word[::-1] if reversed_word == word: return True else: return False print(is_palindrome(input_word)) # Output: True"},{"prompt":"Create a Python class for representing a stack.","completion":"class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"prompt":"Create a code snippet in Python that calculates the sum of the digits of a number. 123","completion":"def sum_of_digits(number): sum_digits = 0 while number > 0: sum_digits += (number % 10) number //= 10 return sum_digits print(sum_of_digits(123))"},{"prompt":"Generate a Python algorithm to generate permuations.","completion":"def permute(nums): res = [] generatePermutations(nums, 0, [], res) return res def generatePermutations(nums, index, current, result): if index == len(nums): result.append(current[:]) else: for i in range(index, len(nums)): current.append(nums[i]) generatePermutations(nums, index+1, current, result) current.pop()"},{"prompt":"Write a python program to calculate the discount rate based on a given purchase price and discount amount. The purchase price is 100, the discount amount is 10.","completion":"discount_rate = 10/100 discount = purchase_price * discount_rate purchase_price = 100 discount_rate = 10/100 discount = purchase_price * discount_rate print(\\"The discount is: {}\\".format(discount))"},{"prompt":"Generate Python code for finding the minimum of two given numbers.","completion":"def min_num(x, y): if x < y: return x else: return y print(min_num(5, 10)) # Output 5"},{"prompt":"Create a Python class to store multiple objects in a dictionary?","completion":"class MultiObjectDict(object): def __init__(self): self.data = {} def add(self, key, value): try: self.data[key].append(value) except KeyError: self.data[key] = [value] def get(self, key): return self.data.get(key, None)"},{"prompt":"Write a class in Python that can generate a Fibonacci sequence up to a given number.","completion":"class Fibonacci(): def __init__(self, n): self.n = n self.fibonacci_list = [0, 1] def generate_list(self): for i in range(2, self.n): self.fibonacci_list.append(self.fibonacci_list[i-2] + self.fibonacci_list[i-1]) return self.fibonacci_list fibonacci = Fibonacci(10) print(fibonacci.generate_list())"},{"prompt":"Program a function in Python that will recognize if a given number is even.","completion":"def is_even(num): if num % 2 == 0: return True else: return False"},{"prompt":"Write a Python program to parse a JSON string and store the result in a new dictionary. json_string = '{name: John, age: 30, city: New York}'","completion":"import json # parse JSON string into a dictionary json_dict = json.loads(json_string) # result print(json_dict) # Output: {'name': 'John', 'age': 30, 'city': 'New York'}"},{"prompt":"Create a Python program that uses a dictionary to store the information of ten books.","completion":"books_dict = { \\"The Great Gatsby\\": { \\"author\\": \\"F. Scott Fitzgerald\\", \\"genre\\": \\"Novel\\", \\"year_published\\": 1925 }, \\"To Kill a Mockingbird\\": { \\"author\\": \\"Harper Lee\\", \\"genre\\": \\"Novel\\", \\"year_published\\": 1960 }, \\"The Catcher in the Rye\\": { \\"author\\": \\"J.D. Salinger\\", \\"genre\\": \\"Novel\\", \\"year_published\\": 1951 }, \\"1984\\": { \\"author\\": \\"George Orwell\\", \\"genre\\": \\"Fiction\\", \\"year_published\\": 1949 }, \\"The Hobbit\\": { \\"author\\": \\"J.R.R. Tolkien\\", \\"genre\\": \\"Fantasy\\", \\"year_published\\": 1937 }, \\"The Lord of the Rings\\": { \\"author\\": \\"J.R.R. Tolkien\\", \\"genre\\": \\"Fantasy\\", \\"year_published\\": 1955 }, \\"Alice's Adventures in Wonderland\\": { \\"author\\": \\"Lewis Carroll\\", \\"genre\\": \\"Fantasy\\", \\"year_published\\": 1865 }, \\"Pride and Prejudice\\": { \\"author\\": \\"Jane Austen\\", \\"genre\\": \\"Novel\\", \\"year_published\\": 1813 }, \\"The Adventures of Sherlock Holmes\\": { \\"author\\": \\"Arthur Conan Doyle\\", \\"genre\\": \\"Mystery\\", \\"year_published\\": 1892 }, \\"The Little Prince\\": { \\"author\\": \\"Antoine de Saint-Exupéry\\", \\"genre\\": \\"Fable\\", \\"year_published\\": 1943 } }"},{"prompt":"Generate a correct python program that reverses a string string = Hello","completion":"def reverse_string(string): reversed_string = \\"\\" for char in string: reversed_string = char + reversed_string return reversed_string"},{"prompt":"Rewrite the following bash script using Python. #!/bin/bash echo Enter a name: read name echo Hello name","completion":"name = input('Enter a name: ') print(f'Hello {name}')"},{"prompt":"Create a class in python that finds the sum of two numbers. No inpu","completion":"class Sum: def __init__(self, x, y): self.x = x self.y = y def find_sum(self): return self.x + self.y if __name__ == '__main__': s = Sum(10, 5) print(s.find_sum())"},{"prompt":"Edit this Python code to make the while loop break when the user inputs an empty string. user_input = input(Please enter a word:) while user_input: print(user_input) user_input = input(Please enter a word:)","completion":"user_input = input(\\"Please enter a word:\\") while user_input != \\"\\": print(user_input) user_input = input(\\"Please enter a word:\\")"},{"prompt":"Create a Python class that takes a list as input and returns a sorted list as output. [5, 2, 7, 3]","completion":"class SortList: def __init__(self, lst): self.lst = lst def sort_list(self): self.lst.sort() return self.lst"},{"prompt":"Create a Python script to output the maximum number from a set of userinputted numbers.","completion":"def find_max_number(numbers): maximum = numbers[0] for i in numbers: if i > maximum: maximum = i return maximum"},{"prompt":"Create a Python program that reads user input and prints it out.","completion":"name = input('Please enter your name: ') print('Hello, ' +name)"},{"prompt":"Create a Python program that accepts an integer and displays its factorial. num=5","completion":"def factorial(num): result = 1 for i in range(1, num+1): result *= i return result n = int(input(\\"Enter an Integer: \\")) print(factorial(n))"},{"prompt":"Write a python script that prints the 20th Fibonacci number.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b print(fibonacci(20))"},{"prompt":"Write a Python program to generate all possible strings by rearranging the characters of a given string. String = ABC","completion":"def generate_all_strings(string): if len(string) == 1: return [string] result = [] for i, letter in enumerate(string): for permutation in generate_all_strings(string[:i] + string[i+1:]): result += [letter + permutation] return result"},{"prompt":"Create a Python script to open a web page.","completion":"import webbrowser url = \\"www.example.com\\" # open the web page in a new browser tab webbrowser.open_new_tab(url)"},{"prompt":"Write a class in Python that encodes a DataFrame object.","completion":"class DataFrameEncoder: def __init__(self, data): self.data = data def encode(self): encoded = [] for row in self.data: encoded_row = [] for column in row: encoded_column = str(column) encoded_row.append(encoded_column) encoded.append(encoded_row) return encoded"},{"prompt":"Rewrite the following snippet of code so it can run in modern python versions. def foo(my_list): result = [] for element in my_list: if 'foo' in element result.add('foo') return resul","completion":"def foo(my_list): result = [] for element in my_list: if 'foo' in element: result.append('foo') return result"},{"prompt":"Create a Python script to generate a calendar representation of a given month. Month : April; Year : 2020","completion":"import calendar year = 2020 month = 4 # create a calendar of the given month and year cal = calendar.month(year, month) # print it print(cal) # Output April 2020 Mo Tu We Th Fr Sa Su 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19"},{"prompt":"Create an objectoriented programming model using python to represent a student in a classroom.","completion":"class Student: def __init__(self, name, age): self.name = name self.age = age def get_info(self): return \\"Name: {}, Age: {}\\".format(self.name, self.age)"},{"prompt":"Generate a Python script that can detect whether a given string is a palindrome or not.","completion":"def is_palindrome(s): rev = ''.join(reversed(s)) if (s == rev): return True return False # driver code s = \\"level\\" ans = is_palindrome(s) if ans == 1: print(\\"Yes\\") else: print(\\"No\\")"},{"prompt":"Create a machine learning model in Python to identify whether a given sentence is in the active or passive voice. Not applicable","completion":"import nltk from nltk.corpus import brown from nltk.tokenize import word_tokenize # Train and test data train_data = brown.tagged_sents(categories='news') test_data = brown.sents(categories='news') # Build our POS Tagger tagger = nltk.UnigramTagger(train_data, backoff = nltk.DefaultTagger('NN')) def check_voice(sentence): tokens = word_tokenize(sentence) tagged_sent = tagger.tag(tokens) if tagged_sent[0][1] == 'VBN': return 'Passive' else: return 'Active' >>>check_voice('The work was done by John.') 'Passive'"},{"prompt":"Edit an existing Python code so that it is more efficient and optimized for run time. def average(arr): sum = 0 for num in arr: sum += num avg = float(sum) / len(arr) return avg","completion":"def average(arr): return sum(arr) / len(arr)"},{"prompt":"Build a Python program to read the following data and generate the running average of temperature after every 10 minutes. time temperature 10:00 21 10:10 22 10:20 21 10:30 19 10:40 24 10:50 21","completion":"def running_average(data): time_list = [] current_average = 0 num_values = 0 for t, c in data: time_list.append(t) current_average += c num_values += 1 if t in time_list[-10:]: print(\\"The running average of temperature after %s is %f\\" %(t, current_average/num_values)) data = [('10:00', 21), ('10:10', 22), ('10:20', 21), ('10:30', 19), ('10:40', 24), ('10:50', 21)] running_average(data)"},{"prompt":"Given two positive numbers x and y, write a Python program to multiply them. 15 and 10","completion":"def multiply_numbers(x, y): return x * y result = multiply_numbers(15, 10) print(result)"},{"prompt":"Develop a function in Python to remove all the whitespaces from a given string.","completion":"def remove_whitespace(s): return s.replace(\\" \\", \\"\\")"},{"prompt":"Design a program in Python to Sum the digits in an integer.","completion":"def sum_digits(n): sum = 0 while n > 0: sum+= n % 10 n //= 10 return sum"},{"prompt":"Write a python program that takes in a given list of string and then prints out a list of all the anagrams of those strings. strings = [dear, read, dare]","completion":"def find_anagrams(strings): anagrams = [] for string in strings: temp = [string] for s in strings: if sorted(string) == sorted(s) and string != s: temp.append(s) anagrams.append(temp) return anagrams"},{"prompt":"Create a Python function that takes an array of numbers as input, prints the largest and the smallest number in the array, and returns the average of all numbers. [2, 4, 6, 10, 14, 18]","completion":"def find_min_max_avg(arr): # set the min, max numbers to the first item in the array min_num = arr[0] max_num = arr[0] # keep track of the sum of all the numbers sum_num = 0 # iterate through the array for item in arr: # find smallest number if item < min_num: min_num = item # find largest number elif item > max_num: max_num = item # add each number to the sum sum_num += item # calculate the average avg_num = sum_num / len(arr) print(\\"Smallest Number: {}nLargest Number: {}\\".format(min_num, max_num)) return avg_num"},{"prompt":"Modify the below Python function to make it efficient. def min_product(a, b): return a * b * (a b)","completion":"def min_product(a, b): if a > b: return a * b else: return a * b * (a - b)"},{"prompt":"Modify the the following python program so that it can be run in Python 3 words = raw_input(Enter words:) print word","completion":"words = input(\\"Enter words:\\") print(words)"},{"prompt":"Create a Python script to calculate the edit distance between two strings. The script should accept two strings as input and output the edit distance between them. string1 = 'kitten' string2 = 'sitting'","completion":"def edit_distance(string1, string2): m = len(string1) n = len(string2) dp = [[0 for x in range(n+1)] for x in range(m+1)] for i in range(m+1): dp[i][0] = i for j in range(n+1): dp[0][j] = j for i in range(1, m+1): for j in range(1, n+1): if string1[i-1]==string2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) return dp[m][n] string1 = 'kitten' string2 = 'sitting' print(edit_distance(string1, string2)) # Output: 3"},{"prompt":"Write a Python program that builds a calculator.","completion":"while True: print(\\"Options:\\") print(\\"Enter 'add' to add two numbers\\") print(\\"Enter 'subtract' to subtract two numbers\\") print(\\"Enter 'multiply' to multiply two numbers\\") print(\\"Enter 'divide' to divide two numbers\\") print(\\"Enter 'quit' to end the program\\") user_input = input(\\": \\") if user_input == \\"quit\\": break elif user_input == \\"add\\": num1 = float(input(\\"Enter a number: \\")) num2 = float(input(\\"Enter another number: \\")) result = str(num1 + num2) print(\\"The answer is \\" + result) elif user_input == \\"subtract\\": num1 = float(input(\\"Enter a number: \\")) num2 = float(input(\\"Enter another number: \\")) result = str(num1 - num2) print(\\"The answer is \\" + result) elif user_input == \\"multiply\\": num1 = float(input(\\"Enter a number: \\")) num2 = float(input(\\"Enter another number: \\")) result = str(num1 * num2) print(\\"The answer is \\" + result) elif user_input == \\"divide\\": num1 = float(input(\\"Enter a number: \\")) num2 = float(input(\\"Enter another number: \\")) result = str(num1 / num2) print(\\"The answer is \\" + result) else: print(\\"Unknown input\\")"},{"prompt":"Create a Python function that takes in two parameters, a list of numbers and a number to be compared to the list. The function should return the number of elements in the list that are larger than the parameter number. nums = [3,5,7,1,2] num_to_compare = 3","completion":"def larger_than_num(nums, num_to_compare): count = 0 for num in nums: if num > num_to_compare: count += 1 return count print(larger_than_num(nums, num_to_compare)) # 3"},{"prompt":"Generate a python program that calculates the area of a triangle.","completion":"def area(b,h): return (b*h)/2 b = int(input('Please enter the base: ')) h = int(input('Please enter the height: ')) print('The area of the triangle is: ', area(b,h))"},{"prompt":"Create a Python program to generate a random number between 1 to 100.","completion":"import random number = random.randint(1, 100) print(number)"},{"prompt":"Construct a program in Python to find the total number of words in a list of strings. strings = [Hello World, Foo Bar, Hello Again]","completion":"def count_words(strings): count = 0 for string in strings: words = string.split(' ') count += len(words) return count strings = [\\"Hello World\\", \\"Foo Bar\\", \\"Hello Again\\"] count = count_words(strings) print(count)"},{"prompt":"Write a Python code snippet to convert a string to a dictionary. 'student=John&grade=A'","completion":"my_dict = dict(item.split(\\"=\\") for item in s.split(\\"&\\")) print(my_dict) # prints {'student': 'John', 'grade': 'A'}"},{"prompt":"Create a visually appealing line chart in Python comparing the sales of two products over a 6month period.","completion":"import matplotlib.pyplot as plt x1 = [1, 2, 3, 4, 5, 6] y1 = [50, 60, 70, 80, 70, 60] x2 = [1, 2, 3, 4, 5, 6] y2 = [40, 50, 70, 80, 90, 100] # set figure size plt.figure(figsize=(8, 5)) # plot data plt.plot(x1, y1, label='Product A') plt.plot(x2, y2, label='Product B') # beautify the graph plt.xlabel('Months') plt.xticks([1, 2, 3, 4, 5, 6]) plt.ylabel('Sales (in Units)') plt.title('Comparing Sales of Two Products') plt.legend() plt.grid(True) # show the chart plt.show()"},{"prompt":"Replace a string in the following python program. string = Hello, world! substring = world substitution = Python","completion":"string = \\"Hello, world!\\" substring = \\"world\\" substitution = \\"Python\\" print(string.replace(substring, substitution))"},{"prompt":"Write a python program that takes a string as an input and prints out the character that occur the most frequently. hello","completion":"string = input(\\"enter a string\\") # Create dictionary to keep track of count of characters d = {} # Loop through each character in string and add it to # dictionary as key and its count as value for char in string: if char in d: d[char] += 1 else: d[char] = 1 # Initialize min with the first characters frequency # and character with first character max_value = 0 max_char = string[0] # Loop through each character in string for char in string: val = d.get(char) if val > max_value: max_value = val max_char = char print(\\"Character with maximum occurrence is: \\", max_char)"},{"prompt":"Edit the following Python code to calculate the average of three values given by the user. a = int(input(Enter first value: ) b = int(input(Enter second value: ) c = int(input(Enter third value: ) print(The average is: + a)","completion":"a = int(input(\\"Enter first value: \\")) b = int(input(\\"Enter second value: \\")) c = int(input(\\"Enter third value: \\")) average = (a + b + c) / 3 print(\\"The average is: \\" + str(average))"},{"prompt":"Develop a Python program to edit a given string such that each word starts with its first letter capitalized.","completion":"def capitalized(string): output = [] # Split the input string into list of words words = string.split() for word in words: # Capitalize the first letter first_letter = word[0] word = first_letter.upper() + word[1:] output.append(word) return \\" \\".join(output) # Driver code string = \\"this is a sample sentence\\" print(capitalized(string))"},{"prompt":"Evaluate a basic machine learning model for predicting house prices using the provided dataset. The model should be written in Python using the scikitlearn library. housing.csv","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # read the dataset data = pd.read_csv('housing.csv') # split the data X = data.drop('price', axis=1) y = data['price'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # train the model model = LinearRegression() model.fit(X_train, y_train) # evaluate the model score = model.score(X_test, y_test) print(\\"Model Score:\\", score)"},{"prompt":"Generate a list of zeros of length m using Python m = 10","completion":"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"},{"prompt":"Write a Python program to find the sum of the first n natural numbers.","completion":"def sum_of_n_numbers(n): sum = 0 for i in range(n+1): sum += i return sum"},{"prompt":"Write a Python script to generate a random password of a given length. length = 8","completion":"import string import random def random_password_generator(length): chars = string.ascii_letters + string.digits + string.punctuation return ''.join((random.choice(chars) for i in range(length))) print(random_password_generator(length))"},{"prompt":"Create a script in Python to classify digits from 0 to 9. digit = 8","completion":"if digit == 0: print(\\"This is a zero.\\") elif digit == 1: print(\\"This is a one.\\") elif digit == 2: print(\\"This is a two.\\") elif digit == 3: print(\\"This is a three.\\") elif digit == 4: print(\\"This is a four.\\") elif digit == 5: print(\\"This is a five.\\") elif digit == 6: print(\\"This is a six.\\") elif digit == 7: print(\\"This is a seven.\\") elif digit == 8: print(\\"This is an eight.\\") elif digit == 9: print(\\"This is a nine.\\")"},{"prompt":"Write a Python function to perform a linear search in a given array. array = [2, 3, 41, 64, 1, 5] target = 5","completion":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1"},{"prompt":"Create a Python function to generate random numbers between a given range of numbers.","completion":"def random_number_generator(lhs, rhs): '''This function generates a random number between given range (lhs, rhs)''' import random return random.randint(lhs, rhs)"},{"prompt":"Construct a web scraper in Python that downloads some content from website www.example.com","completion":"import requests from bs4 import BeautifulSoup # Make a GET request to fetch the raw HTML content html_content = requests.get('http://www.example.com').text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Scrape the content content = soup.p # Save the content in a text file with open('content.txt', 'w') as file: file.write(content)"},{"prompt":"Write a python program that computes the sum of squares of all the elements of a list.","completion":"def sum_sq_list(lst): sum = 0 for i in lst: sum += i * i return sum"},{"prompt":"Create a Python program that prints a multiplication table of the given number. number = 5","completion":"def multiplication_table(number): for i in range(1, 11): print(number, 'x', i, '=', number*i) multiplication_table(number)"},{"prompt":"Develop an algorithm in Python for searching for a given item in a sorted list? sorted_list = [2, 3, 4, 5, 8, 9, 10] item = 8","completion":"def search(sorted_list, item): low = 0 high = len(sorted_list) - 1 found = False while low <= high and not found: mid = (low + high) // 2 if sorted_list[mid] == item: found = True else: if item < sorted_list[mid]: high = mid - 1 else: low = mid + 1 return found sorted_list = [2, 3, 4, 5, 8, 9, 10] item = 8 print(search(sorted_list, item))"},{"prompt":"Create a function in Python to make a list that contains the sum of each pair of elements in two different lists. list1 = [1, 8, 3, 10] list2 = [2, 3, 4, 5]","completion":"def list_sums(lst1, lst2): pairs = list(zip(lst1, lst2)) sums = [i1+i2 for (i1, i2) in pairs] return sums"},{"prompt":"Write a python program to fill missing values in a given dataset. Dataset with missing value","completion":"def fill_missing_values(data): for column in data.columns: if data[column].isnull().any(): mean = data[column].mean() data[column] = data[column].fillna(mean) return data"},{"prompt":"Write a Python code to display the following output","completion":"print(\\"*\\" * 10) for i in range(4): print(\\"* *\\") print(\\"*\\" * 10)"},{"prompt":"Optimize a given Python Class using an OOP approach. class User: def __init__(self, name, age): self.name = name self.age = age","completion":"class User: def __init__(self, name, age): self._name = name self._age = age @property def name(self): return self._name @name.setter def name(self, value): self._name = value @property def age(self): return self._age @age.setter def age(self, value): if value < 0: raise ValueError('Age must be a positive number') self._age = value"},{"prompt":"Code a function in Python to search for an element in a linked list.","completion":"# Node class class Node: # Function to initialize the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked list class class LinkedList: # Function to initialize the Linked List object def __init__(self): self.head = None # This function returns true if a value x is present in linked list def search(self, x): temp = self.head while temp.next != None: if temp.data == x: return True # data found temp = temp.next if temp.data == x: return True # data found return False # data not found # Code execution if __name__=='__main__': # Start with the empty list llist = LinkedList() llist.head = Node(1) second = Node(2) third = Node(3) # Link first node with second llist.head.next = second # Link second node with third second.next = third # Search value 3 if llist.search(3): print(\\"Value found\\") else: print(\\"Value not found\\")"},{"prompt":"Design an algorithm in Python for linear search. [3, 1, 5, 8], 8","completion":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1"},{"prompt":"Design a program in Python to remove duplicate items in a list and display the resulting list. mylist = ['apple', 'pineapple', 'apple', 'banana']","completion":"def remove_duplicates(mylist): newlist = list(set(mylist)) return newlist mylist = ['apple', 'pineapple', 'apple', 'banana'] print(remove_duplicates(mylist))"},{"prompt":"Create a program to sort the elements of an unsorted array using the bubble sort technique in Python.","completion":"\\"\\"\\" Create a program to sort the elements of an unsorted array using the bubble sort technique in Python \\"\\"\\" def bubbleSort(arr): length = len(arr) for i in range(length): for j in range(length-1-i): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr # Driver Code arr = [4, 5, 7, 3, 8, 1, 9] result = bubbleSort(arr) print(result)"},{"prompt":"Create a virtual assistant class in Python to provide weather forecasts in various cities. cities = ['New York', 'Paris', 'London']","completion":"class VirtualAssistant: def __init__(self): self.cities = ['New York', 'Paris', 'London'] def get_weather_forecast(self): for city in self.cities: response = requests.get(f'http://api.openweathermap.org/data/2.5/weather?q={city}&APPID=12234fg908jkh') weather = response.json() print(f'The forecast for {city} is {weather[\\"main\\"][\\"temp\\"]} degrees Celsius.')"},{"prompt":"Develop a Python module that provides an interface to Cloudflare's API","completion":"import requests from requests.auth import HTTPBasicAuth class CloudflareApi: def __init__(self, username, api_key): self.username = username self.api_key = api_key self.api_url = 'https://api.cloudflare.com/client/v4/{endpoint}' def get_zone_list(self): endpoint = 'zones' url = self.api_url.format(endpoint=endpoint) response = requests.get(url, auth=HTTPBasicAuth(self.username, self.api_key)) return response.json()"},{"prompt":"Given a list of numbers, write a Python program to sort the list in ascending order using the merge sort algorithm. 8, 4, 14, 1, 9","completion":"def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 left = arr[:mid] right = arr[mid:] merge_sort(left) merge_sort(right) i = j = k = 0 while i < len(left) and j < len(right): if left[i] < right[j]: arr[k] = left[i] i += 1 else: arr[k] = right[j] j += 1 k += 1 while i < len(left): arr[k] = left[i] i += 1 k += 1 while j < len(right): arr[k] = right[j] j += 1 k += 1 arr = [8, 4, 14, 1, 9] merge_sort(arr) print(arr) # prints [1, 4, 8, 9, 14]"},{"prompt":"The code is a unit test for generating and loading JSON files. To use this code, create a new Python file and copy the code into it. Then, run the file to execute the unit tests. The tests will check that the generated JSON file has valid keys and values, and that an exception is raised if the file is not found. The code also includes some skipped tests that check that the keys in the JSON file only contain alphabetic characters.","completion":"''' Created on Jul 30, 2015 @author: Mikhail ''' import unittest import re from json_file_generator import MyOwnJSONProcessing as json_processing from json_file_generator import __version__ as json_file_generator_version from unittest.case import skip, skipIf class GenerateAndLoadJSONTestUpdateFour(unittest.TestCase): expected_data = {} @classmethod def setUpClass(cls): print \\"{} for {} has been called\\".format(cls.setUpClass.__name__, cls.__name__) cls.expected_data = json_processing.generate_data_for_json_obj() def setUp(self): print \\"{} for {} has been called\\".format(self.setUp.__name__, self._testMethodName) self.file_name = \\"generate_and_load_unittest.json\\" self.original_name = json_processing.generate_json_file_with_data(self.file_name, self.expected_data) def tearDown(self): print \\"{} for {} has been called\\".format(self.tearDown.__name__, self._testMethodName) @classmethod def tearDownClass(cls): print \\"{} for {} has been called\\".format(cls.tearDownClass.__name__, cls.__name__) json_processing.clean_up() def testGenerateAndLoadJSONValidKeys(self): print \\"Processing file {}\\".format(self.original_name) actual_data = json_processing.load_data_from_json_file(self.original_name) for exp_key in self.expected_data.keys(): self.assertTrue(actual_data.has_key(exp_key), \\"Expected key '{}' has not been found in loaded json\\".format(exp_key)) for act_key in actual_data.keys(): self.assertTrue(self.expected_data.has_key(act_key), \\"Loaded key '{}' has not been found in dumped json\\".format(act_key)) # General version of skip @skip(\\"old functionality\\") def testGenerateAndLoadJSONValidKeysHasOnlyLetters1(self): print \\"Processing file {}\\".format(self.original_name) actual_data = json_processing.load_data_from_json_file(self.original_name) for act_key in actual_data.keys(): self.assertTrue(re.match(\\"[^a-zA-Z]\\", act_key) is None, \\"Key should contains only alpha symbols: {}\\".format(act_key)) # Version of skip that check version of our json_file_generator @skipIf(json_file_generator_version > 1, \\"This functionality is not supported in this version on the json file generator\\") def testGenerateAndLoadJSONValidKeysHasOnlyLetters2(self): print \\"Processing file {}\\".format(self.original_name) actual_data = json_processing.load_data_from_json_file(self.original_name) for act_key in actual_data.keys(): self.assertIsNone(re.match(\\"[^a-zA-Z]\\", act_key), \\"Key should contains only alpha symbols: {}\\".format(act_key)) def testGenerateAndLoadJSONValidValues(self): print \\"Processing file {}\\".format(self.original_name) actual_data = json_processing.load_data_from_json_file(self.original_name) for exp_key, exp_value in self.expected_data.items(): self.assertEquals(exp_value, actual_data.get(exp_key), \\"Dictionaries have different values '{}' for first and '{}' for second for the same key\\".format(exp_value, actual_data.get(exp_key))) for act_key, act_value in actual_data.items(): self.assertEquals(act_value, self.expected_data.get(act_key), \\"Dictionaries have different values '{}' for first and '{}' for second for the same key\\".format(act_value, self.expected_data.get(act_key))) def testGenerateAndLoadJSONForInvalidFile(self): \\"\\"\\" This test checks that valid exception will be raised if required file will not be found \\"\\"\\" invalid_name = \\"invalid_\\" + self.original_name print \\"Processing file {}\\".format(invalid_name) with self.assertRaises(IOError) as io_exception: # attempt to read file that doesn't exist json_processing.load_data_from_json_file(invalid_name) self.assertEqual(io_exception.exception.errno, 2) self.assertEqual(io_exception.exception.strerror, 'No such file or directory') if __name__ == \\"__main__\\": unittest.main(verbosity=2)"},{"prompt":"Create a Python program to convert a commaseparated string into a list. 1,2,3,4,5","completion":"string = \\"1,2,3,4,5\\" list = string.split(\\",\\") print(list)"},{"prompt":"Write a Python program to optimize the algorithm of finding the maximum value in a list of numbers.","completion":"def find_max_value(lst): max_value = lst[0] for item in lst: # loop through list and compare each item with max_value if item > max_value: max_value = item return max_value lst = [1, -5, 8, 10, -2] # call the function maximum_value = find_max_value(lst) print(\\"The maximum value in the list is\\", maximum_value) # Output: The maximum value in the list is 10"},{"prompt":"Create a program using Python to check if two strings are anagrams. s1 = listen s2 = silent","completion":"def are_anagrams(s1, s2): # get lengths of both strings n1 = len(s1) n2 = len(s2) # if lengths not equal, strings are not anagrams if n1 != n2: return False # sort both strings s1 = sorted(s1) s2 = sorted(s2) # linearly compare characters of both strings for i in range(0, n1): if s1[i] != s2[i]: return False return True s1 = \\"listen\\" s2 = \\"silent\\" if are_anagrams(s1,s2): print(\\"The strings are anagrams of each other.\\") else: print(\\"The strings are not anagrams of each other.\\")"},{"prompt":"Write a Python function to sort a list of dictionaries according to a certain key. [{'a': 5, 'b': 3}, {'a': 4, 'b': 1}, {'a': 2, 'b': 8}]","completion":"def sort_dict_list(dict_list, sort_key): return sorted(dict_list, key=lambda k: k[sort_key])"},{"prompt":"Generate a structure to store customer data, such as Name, Address, Email, Phone, etc., in Python Not applicable","completion":"class Customer: def __init__(self, name, address, email, phone): self.name = name self.address = address self.email = email self.phone = phone customer1 = Customer('John Doe', '123 Main Street', 'john@example.com', '555-555-5555')"},{"prompt":"Generate a Python program that recursively prints a string of characters in reverse.","completion":"def reverse_string(s): if len(s) == 0: return else: print(s[-1], end=\\"\\") reverse_string(s[:-1]) # Driver program string = \\"Hello World!\\" reverse_string(string)"},{"prompt":"Create a Python program to decide whether a given string is a valid JSON or an invalid one.","completion":"import json def is_valid_json(string): try: json.loads(string) return True except: return False"},{"prompt":"Write a Python program to automatically submit a form when a user fills out all fields. Not applicable","completion":"import requests # Create a form form_data = { 'name': 'John Doe', 'email': 'john@example.com' } # Send request r = requests.post('http://example.com/form-submit', data=form_data) # Check status code if r.status_code == 200: print('Form submitted successfully!') else: print('Failed to submit form!')"},{"prompt":"Optimize the above Python program to calculate the sum of a given array of numbers for better performance. [1, 2, 3, 4]","completion":"import numpy as np def sum(arr): return np.sum(arr) sum([1,2,3,4]) # 10"},{"prompt":"Create a python script for calculating the mode of a given sequence of numbers Not applicable","completion":"def calculate_mode(sequence): counts = {} for num in sequence: if num in counts: counts[num] += 1 else: counts[num] = 1 max_count = 0 mode_num = 0 for key, value in counts.items(): if value > max_count: max_count = value mode_num = key return mode_num"},{"prompt":"Write a Python program to convert a query string into a dictionary. queryString = country=usa&city=ny&lang=en&temp=77","completion":"queryString = \\"country=usa&city=ny&lang=en&temp=77\\" queryDict = {} for keyValueString in queryString.split('&'): key, value = keyValueString.split('=') queryDict[key] = value print(queryDict) # Output: {'country': 'usa', 'city': 'ny', 'lang': 'en', 'temp': '77'}"},{"prompt":"Create a Python algorithm which generates a unique ID for every user. The ID should be unique within a given set of users and should not be guessable. Not applicable","completion":"import random import string def generate_user_id(length): generated_id = '' chars = string.ascii_letters + string.digits + '!@#%^&*()' current_users = [user.id for user in User.query.all()] while generated_id in current_users: generated_id = ''.join(random.choice(chars) for _ in range(length)) return generated_id"},{"prompt":"Create an algorithm to reverse a given string without using the builtin python reverse function","completion":"\\"\\"\\" Reverse a given string without using the built-in python reverse function. \\"\\"\\" def reverse_string(in_str): rev_str = '' for i in range(len(in_str) - 1, -1, -1): rev_str += in_str[i] return rev_str if __name__ == '__main__': in_str = 'reverse me' rev_str = reverse_string(in_str) print(rev_str)"},{"prompt":"Write a code to subtract two 8bit integers. x = 15 y = 6","completion":"#Python code for subtracting two 8-bit integers # Function to subtract two 8-bit binary numbers # a and b def subtractTwoBits(a, b): # a is larger if (a >= b): # Array storing values # after X-OR diff = [0] * 8 # Till same bits reach for i in range(8): # If current of b is 0 if (b % 2 == 0): # Take X-OR with 0 diff[i] = (int)(a % 2) # If current of b is 1 else: # Take the X-OR with 1 diff[i] = (int)(a % 2) ^ 1 # Right shift a = int(a / 2) b = int(b / 2) # Convert the Binary result to Integer return diffToDecimal(diff) else: print(\\"Error: a is smaller\\") return -1 # Function to convert 8 bit # binary number to Decimal def diffToDecimal(diff): # Initialize the value val = 0 # value before raising it # to the power of 2 p = 1 # Calculating the decimal value for i in range (7, -1, -1): # Subtracting the value val = (val + (diff[i] * p)) p = p * 2 return val # Driver Code x = 15 y = 6 res = subtractTwoBits(x, y) print(res)"},{"prompt":"Optimize this Python code to reduce run time complexity def function(n): result = 0 for i in range(n): for j in range(n): result += i * j return resul","completion":"def function(n): result = 0 for i in range(n): result += (n * (i * (i+1)) // 2) return result"},{"prompt":"Write a JavaScript program to create a bar chart that displays the number of jobs available for different programming languages. [ { language: 'JavaScript', count: 250 }, { language: 'Python', count: 200 }, { language: 'C++', count: 150 }, { language: 'Java', count: 100 } ]","completion":"<html> <head> <title>Job Openings By Language</title> </head> <body> <canvas id=\\"chart\\"></canvas> <script> const ctx = document.getElementById('chart').getContext('2d'); const chart = new Chart(ctx, { type: 'bar', data: { labels: [\\"JavaScript\\", \\"Python\\", \\"C++\\", \\"Java\\"], datasets: [{ label: '# of Openings', data: [250, 200, 150, 100], backgroundColor: [ 'rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)' ], borderColor: [ 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)' ], borderWidth: 1 }] }, options: { scales: { yAxes: [{ ticks: { beginAtZero: true } }] } } }); <\/script> </body> </html>"},{"prompt":"Design a Python function to return the sum of three numbers. [5, 10, 8]","completion":"def sum_three_numbers(nums): return sum(nums) result = sum_three_numbers([5, 10, 8]) print(result)"},{"prompt":"Create a Python program that uses natural language processing and machine learning to analyze sentiment in a given sentence. The food was absolutely delicious.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentences = [\\"The food was absolutely delicious.\\"] sid = SentimentIntensityAnalyzer() for sentence in sentences: print(sentence) ss = sid.polarity_scores(sentence) for k in ss: print('{0}: {1}'.format(k, ss[k]), end='n')"},{"prompt":"Write a Python program to find the missing number from a given list. [2, 3, 1, 5]","completion":"def find_missing_number(list_of_numbers): max_number = max(list_of_numbers) total_sum = (max_number * (max_number + 1)) // 2 actual_sum = 0 for number in list_of_numbers: actual_sum += number return total_sum - actual_sum list_of_numbers = [2, 3, 1, 5] missing_number = find_missing_number(list_of_numbers) print(\\"Missing number: \\", missing_number)"},{"prompt":"Create a Python program to generate 10 random numbers between 0 and 100, then print out the average. Not applicable","completion":"import random numbers = [] total = 0 #Generate 10 random numbers for i in range(10): n = random.randint(0, 100) numbers.append(n) total += n #Print the generated numbers print(\\"Generated numbers :\\") for i in numbers: print(i) #Calculate and print the average average = total / len(numbers) print(\\"The average is:\\", average)"},{"prompt":"Write a Python script to filter out the given list and create a new reduced list. [1, 2, 5, 0, 6, 8, 4, 9]","completion":"original = [-1, -2, 5, 0, 6, 8, 4, 9] filtered = [x for x in original if x > 0] print(filtered)"},{"prompt":"Create a program to print a binary tree in reverse level order.","completion":"# Python program to print reverse level # order traversal # Binary Tree Node class Node: def __init__(self, data): self.data = data self.left = None self.right = None #reverse Level Order Traversal def reverseLevelOrder(root): # Base Case if root is None: return # Create an empty queue for level order # traversal q = [] # Enqueue Root and initialize height q.append(root) # Loop while there is at least one # discovered node while(len(q) > 0): # Print front of queue and remove it from queue print(q[len(q)-1].data) node = q.pop(len(q)-1) # Insert right child first if node.right is not None: q.append(node.right) # Insert left child if node.left is not None: q.append(node.left) #Driver Program root = Node(1) root.left = Node(2) root.right = Node(3) root.left.left = Node(4) root.left.right = Node(5) # Function Call reverseLevelOrder(root)"},{"prompt":"Given a list of words and a target word, write a function in Python that finds the index of target word in the list. words = [hello, world, another], target_word = world","completion":"def find_word_index(words, target_word): for i, word in enumerate(words): if word == target_word: return i return -1 word_index = find_word_index(words, target_word) print(word_index)"},{"prompt":"Create a Python program to check whether a telephone number is valid or not based on its length and the presence of a '9' as the second character. telephone_number = '370641'","completion":"def check_telephone_number(telephone_number): is_valid = False if len(telephone_number) == 6 and telephone_number[1] == '9': is_valid = True return is_valid if __name__ == '__main__': telephone_number = '370641' is_valid = check_telephone_number(telephone_number) print(is_valid)"},{"prompt":"Generate a program using Python to scrape a given website and extract a list of prices. https://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com' headers = { 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36' } response = requests.get(url, headers=headers) soup = BeautifulSoup(response.text, 'html.parser') price_list = [] for price in soup.find_all('span', class_='price'): price_list.append(price.text) print(price_list)"},{"prompt":"Generate an algorithm in Python which takes a matrix of integers as input and returns the position of the largest element in the matrix. matrix = [[2, 8, 7], [3, 11, 5], [1, 9, 4]]","completion":"def max_pos(mat): max_v = -float('inf') max_i = -1 max_j = -1 for i in range(len(mat)): for j in range(len(mat[i])): if mat[i][j] > max_v: max_i = i max_j = j return (max_i, max_j) matrix = [[2, 8, 7], [3, 11, 5], [1, 9, 4]] pos = max_pos(matrix) print(pos) # (1, 1)"},{"prompt":"Write a Python Flask app to fetch data from a public API and persist it in a SQL database. Not applicable","completion":"import requests import json from flask import Flask, request from flask_sqlalchemy import SQLAlchemy app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class Data(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(50), nullable=False) age = db.Column(db.Integer, nullable=False) db.create_all() @app.route('/fetch', methods=['GET']) def fetch_data(): r = requests.get('https://example.com/public-api/data') response = r.json() for item in response: data = Data(name=item['name'], age=item['age']) db.session.add(data) db.session.commit() return {'message': 'Data successfully fetched'} if name == 'main': app.run(debug=True)"},{"prompt":"Create a python program that identifies all the words in a string that start with a vowel. Apple, orange, banana","completion":"import re def find_vowel_words(string): # split the string into words words = string.split() # Define the regular expression to identify words starting with vowels regex = r\\"b[aeiouAEIOU][a-zA-Z]*b\\" # Initialize an empty list to store all the words vowel_words = [] # Iterate over all the words for word in words: # Check if the word starts with a vowel if re.match(regex, word): # Append it to the vowel_words list vowel_words.append(word) return vowel_words # Driver code string = \\"Apple, orange, banana\\" vowel_words = find_vowel_words(string) print(vowel_words)"},{"prompt":"Create a REST API in Python Flask for a blog application. The API should accept requests to create blog posts, get a list of blog posts, update blog posts, and delete blog posts. Not applicable","completion":"# imports from flask import Flask, jsonify, request # setting up the application app = Flask(__name__) # defining the data blog_posts = [ { 'id': '1', 'title': 'Introducing my blog', 'content': 'This blog is all about my journey as a software developer.' }, { 'id': '2', 'title': 'My First day', 'content': 'Today I created a website and wrote a few lines of code!' } ] # routes @app.route('/posts', methods=['GET']) def get_all_posts(): return jsonify({'posts': blog_posts}) @app.route('/posts/<post_id>', methods=['GET']) def get_post_by_id(post_id): post = next((item for item in blog_posts if item['id'] == post_id), None) return jsonify({'post': post}) @app.route('/posts', methods=['POST']) def create_post(): data = request.get_json() blog_posts.append(data) return jsonify({'posts': blog_posts}) @app.route('/posts/<post_id>', methods=['PUT']) def update_post(post_id): data = request.get_json() for item in blog_posts: if item['id'] == data['id']: item['title'] = data['title'] item['content'] = data['content'] return jsonify({'posts': blog_posts}) @app.route('/posts/<post_id>', methods=['DELETE']) def delete_post(post_id): data = request.get_json() for item in blog_posts: if item['id'] == data['id']: blog_posts.remove(item) return jsonify({'posts': blog_posts}) if __name__ == '__main__': app.run(host='0.0.0.0', port=8000)"},{"prompt":"Write a Python function to calculate the sum of a list of numbers after transforming them using a given function. numbers = [1, 2, 3] transform_function = lambda x: x**2","completion":"def transform_sum(numbers, transform_function): transformed_numbers = [transform_function(x) for x in numbers] return sum(transformed_numbers)"},{"prompt":"Write a Python program to generate a Web page containing all the digits arranged in a 3x3 matrix structure.","completion":"<html> <head> <title>Digit 3x3 Matrix</title> <style> table{ border:1px solid black; width: 50px; height:50px; } </style> </head> <body> <h1>Digit 3x3 Matrix</h1> <table> <tr> <td>1</td><td>2</td><td>3</td> </tr> <tr> <td>4</td><td>5</td><td>6</td> </tr> <tr> <td>7</td><td>8</td><td>9</td> </tr> </table> </body> </html>"},{"prompt":"Write Python code to generate random colors using the 'matplotlib color' module.","completion":"\\"\\"\\" Generate random colors using the 'matplotlib color' module \\"\\"\\" import matplotlib.colors as colors # Generate 10 random colors colors = [colors.to_hex(colors.rgb2hex(np.random.rand(3))) for i in range(10)] print(colors)"},{"prompt":"Generate a random number in Python between 2 inclusive numbers. int min = 1; int max = 6;","completion":"import random num = random.randint(min, max) print(num)"},{"prompt":"mplement a generic multivalue dictionary in Python.","completion":"class MultiValueDict: def __init__(self): # Initialize and empty dictionary self.dict = {} def add(self, key, value): # Add value to key if key in self.dict: self.dict[key].append(value) else: self.dict[key] = [value] def get(self, key): # Return the list of values for given key if key in self.dict: return self.dict[key] --> else: return None"},{"prompt":"Build a python program to multiply two matrices. Matrix A 2x3 1 2 3 4 5 6 Matrix B 3x2 7 8 9 10 11 12","completion":"def multiply(A, B): rows_A = len(A) cols_A = len(A[0]) rows_B = len(B) cols_B = len(B[0]) if cols_A != rows_B: # Check matrix dimensions print(\\"Cannot multiply the two matrices. Incorrect dimensions.\\") return result = [[0 for row in range(cols_B)] for col in range(rows_A)] for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): result[i][j] += A[i][k] * B[k][j] return result"},{"prompt":"Design a class for representing student data in Python","completion":"class Student: def __init__(self, name, age): self.name = name self.age = age def get_name(self): return self.name def get_age(self): return self.age"},{"prompt":"Using objectoriented principles, write a small Python program to reverse a string without using the builtin reverse function. String = “Hello World”","completion":"class ReverseString(): def __init__(self, string): self.string = string def reverse(self): splittedString = self.string.split(' ') reversedString = [] for word in splittedString: reversedString.insert(0, word) reversedString = ' '.join(reversedString) return reversedString r = ReverseString(string) print(r.reverse())"},{"prompt":"Design a Python function to evaluate the number of underlying characters in a string.","completion":"def getNumberOfChars(String): total_len = 0 for word in string.split(): total_len += len(word) return total_len"},{"prompt":"Design a Python script to remove any overlapping words in two string and join them into a single string. string1 = Hello world string2 = world my friend","completion":"def remove_overlap(string1, string2): #split string1 into a list of words words1 = string1.split() #split string2 into a list of words words2 = string2.split() #initialize an empty list result = [] #compare between the two words list for word in words1: if word not in words2: result.append(word) #join string2 into the result list result = result + words2 # join the result list into a single string new_string = ' '.join(result) return new_string #call the remove_overlap()function result = remove_overlap(string1, string2) print(result)"},{"prompt":"Create a function in Python to convert a string to a list of words. Hello, World!","completion":"def convert_to_list(string): return string.split() string = \\"Hello, World!\\" words_list = convert_to_list(string) print(words_list)"},{"prompt":"Create a game in Python using OpenGL. The game should be a basic 3D maze. The maze should contain walls, a starting point, and an exit point. Not applicable","completion":"import OpenGL from OpenGL.GL import * from OpenGL.GLU import * from math import pi, cos, sin # Variables that will be used for the game width = 15 #Maze width height = 15 #Maze height keyDistance = 3.0 #Distance between keys # Define constants used to create the maze MAZE_WALL = 0 MAZE_EXIT = 2 MAZE_EMPTY = 1 # Create the maze maze = [ [0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0], [1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0], [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0] ] # The starting position posX = 0.0 posY = 0.0 # The rotation angle of the camera angle = 0.0 #Draw each maze world def draw_maze(): glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) glLoadIdentity() glTranslatef(-float(width)/2.0, -float(height)/2.0, -5.0) glRotatef(angle,0.0,1.0,0.0) glTranslatef(posX, posY, 0) # Draw each of the cubes in the maze for x in range(width): for y in range(height): # Select the appropriate shade for the cube if maze[y][x] == MAZE_WALL: glColor3f(0.0, 0.0, 0.0) elif maze[y][x] == MAZE_EXIT: glColor3f(1.0, 0.0, 0.0) elif maze[y][x] == MAZE_EMPTY: glColor3f(1.0, 1.0, 1.0) # Draw the cube glPushMatrix() glTranslatef(x, y, 0.0) draw_cube(1.0) glPopMatrix() glutSwapBuffers() # Determine the position of the camera and key presses def update(dt): global angle, posX, posY # Check for key presses keys = glutGetModifiers() if keys & GLUT_ACTIVE_ALT: # Rotate the camera angle += 5.0 if keys & GLUT_ACTIVE_SHIFT: # Move the camera backward posX -= keyDistance * cos(angle * pi/180.0) posY -= keyDistance * sin(angle * pi/180.0) if keys & GLUT_ACTIVE_CTRL: # Move the camera forward posX += keyDistance * cos(angle * pi/180.0) posY += keyDistance * sin(angle * pi/180.0) # Draw a cube. The cube is of size 1 and is centered around the origin def draw_cube(size): halfSize = size / 2.0 glBegin(GL_LINE_STRIP) glVertex3f(-halfSize,-halfSize, halfSize) glVertex3f( halfSize,-halfSize, halfSize) glVertex3f( halfSize, halfSize, halfSize) glVertex3f(-halfSize, halfSize, halfSize) glVertex3f(-halfSize,-halfSize, halfSize) glEnd() glBegin(GL_LINE_STRIP) glVertex3f(-halfSize,-halfSize,-halfSize) glVertex3f( halfSize,-halfSize,-halfSize) glVertex3f( halfSize, halfSize,-halfSize) glVertex3f(-halfSize, halfSize,-halfSize) glVertex3f(-halfSize,-halfSize,-halfSize) glEnd() glBegin(GL_LINES) glVertex3f(-halfSize,-halfSize, halfSize) glVertex3f(-halfSize,-halfSize,-halfSize) glVertex3f( halfSize,-halfSize, halfSize) glVertex3f( halfSize,-halfSize,-halfSize) glVertex3f( halfSize, halfSize, halfSize) glVertex3f( halfSize, halfSize,-halfSize) glVertex3f(-halfSize, halfSize, halfSize) glVertex3f(-halfSize, halfSize,-halfSize) glEnd()"},{"prompt":"Build a web scraper in Python to extract data from a given webpage. https://www.example.com","completion":"import requests from bs4 import BeautifulSoup # Make a request to the website and get the HTML url = \\"https://www.example.com\\" response = requests.get(url) html = response.content # Parse the HTML using BeautifulSoup soup = BeautifulSoup(html, 'html.parser') # Extract data from tags which contain specific class names data = soup.find_all('div', {\\"class\\": \\"example-class\\"})"},{"prompt":"Write a Python function to classify data points as low, medium and high according to the given threshold values. threshold = [4, 6]","completion":"def classify(value, threshold): if value < threshold[0]: return 'low' elif threshold[0] <= value < threshold[1]: return 'medium' else: return 'high'"},{"prompt":"Generate a list of prime numbers from 1 to 1000 using Python.","completion":"primes = [] for x in range(2, 1001): for i in range(2, x): if x % i == 0: break else: primes.append(x) print(primes)"},{"prompt":"Write a Python program to check whether a string contains all letters of the alphabet","completion":"def check_alphabet(s): alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" for letter in alphabet: if letter not in s: return False return True"},{"prompt":"Create a unique name generator using Python that takes a list of first names and a list of last names as inputs and returns combinations of those names. first_names = ['John', 'Emma', 'Sarah', 'Liam'] last_names = ['Smith', 'Jones', 'Brown', 'Robinson']","completion":"import itertools def generate_names(first_names, last_names): names = [] for first, last in itertools.product(first_names, last_names): names.append(first + ' ' + last) return names first_names = ['John', 'Emma', 'Sarah', 'Liam'] last_names = ['Smith', 'Jones', 'Brown', 'Robinson'] names = generate_names(first_names, last_names) print(names)"},{"prompt":"Develop a program in Python to delete a node in a linked list. Head of the linked list = 1>2>3>4 Node to delete = 2","completion":"# Node class class Node: # Function to initialise the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class class LinkedList: # Function to initialize head def __init__(self): self.head = None # This function prints contents of linked list # starting from head def printList(self): temp = self.head while (temp): print(temp.data) temp = temp.next # Function to delete node at position 'index' def delete_node(self, index): # Initialize temp and prev temp = self.head prev = None # Check if index is valid if temp is None or index < 0: return # If index is 0, delete the first node if index == 0: self.head = temp.next temp = None return # Find the node before the node to be deleted for i in range(index): prev = temp temp = temp.next # Unlink the node from linked list prev.next = temp.next temp = None # Driver Program llist = LinkedList() # Create the list 1->2->3->4 llist.head = Node(1) second = Node(2) third = Node(3) fourth = Node(4) llist.head.next = second; # Link first node with second second.next = third; # Link second node with the third node third.next = fourth; # Link third node with the fourth node # Delete the node at positions 2 llist.delete_node(2)"},{"prompt":"Develop a web scraper in Python that visits a website and retrieves the contents of the web page. The URL of the website: https://www.example.com","completion":"import requests url = \\"https://www.example.com\\" response = requests.get(url) if response.status_code == 200: html = response.content print(html)"},{"prompt":"The given code is a Python script that connects to ArcGIS Online and retrieves data from a web map. It then updates a feature layer with new data and statistics based on the retrieved data. To use this script, you need to provide the necessary input parameters such as the web map ID, data and stats layer names, and login credentials for ArcGIS Online. Once you have provided the input parameters, you can run the script and it will automatically update the feature layer with new data and statistics.","completion":"#------------------------------------------------------------------------------- # Name: executive_dashboard.py # Purpose: # # Author: Local Government # # Created: 05/06/2016 AM # Version: Python 2.7 #------------------------------------------------------------------------------- import json, urllib, arcrest, re from arcrest.security import AGOLTokenSecurityHandler from arcresthelper import securityhandlerhelper from arcresthelper import common from arcrest.agol import FeatureLayer from datetime import datetime as dt from datetime import timedelta as td import getpass import indicator_constants as ic from os.path import dirname, join # Messages m1 = \\"Can not not create token to access map. Please check username, password, and organization URL.\\" m2 = \\"Can not access web map JSON. Please check map ID.\\" m3 = \\"Map does not contain the specified data layer\\" m4 = \\"Map does not contain the specified stats layer\\" m5 = \\"Apply a filter to the stats layer so that exactly one record is available in the map.\\" m6 = \\"Layer does not contain a filter that uses the provided date field, {0}, and the BETWEEN operator.\\" m7 = \\"Stats layer capabilities must include 'Update'.\\" def get_layer_properties(title, layers): \\"\\"\\"Parse the JSON of a web map and retrieve the URL of a specific layer, and any filters that have been applied to that layer.\\"\\"\\" for layer in layers: if layer['title'] == title: url = layer['url'] if 'layerDefinition' in layer: query = layer['layerDefinition']['definitionExpression'] else: query = \\"1=1\\" return url, query return \\"\\", \\"\\" def connect_to_layer(url, sh, proxy_port=None, proxy_url=None, initialize=True): \\"\\"\\"Establish a connection to an ArcGIS Online feature layer\\"\\"\\" fl = FeatureLayer( url=url, securityHandler=sh, proxy_port=proxy_port, proxy_url=proxy_url, initialize=initialize) return fl def count_features(layer, query=\\"1=1\\"): \\"\\"\\"Count feature in a feature layer, optionally respecting a where clause\\"\\"\\" cnt = layer.query(where=query, returnGeometry=False, returnCountOnly=True) return cnt['count'] def featureset_to_dict(fs): \\"\\"\\"Returns JSON of a feature set in dictionary format\\"\\"\\" fs_str = fs.toJSON fs_dict =json.loads(fs_str) return fs_dict def get_attributes(layer, query=\\"1=1\\", fields=\\"*\\"): \\"\\"\\"Get all attributes for a record in a table\\"\\"\\" vals = layer.query(where=query, out_fields=fields, returnGeometry=False) valsdict = featureset_to_dict(vals) return valsdict['features'][0]['attributes'] def update_values(layer, field_info, query=\\"1=1\\"): \\"\\"\\"Update feature values \\"\\"\\" out_fields = ['objectid'] for fld in field_info: out_fields.append(fld['FieldName']) resFeats = layer.query(where=query, out_fields=\\",\\".join(out_fields)) for feat in resFeats: for fld in field_info: feat.set_value(fld[\\"FieldName\\"],fld['ValueToSet']) return layer def trace(): \\"\\"\\" trace finds the line, the filename and error message and returns it to the user \\"\\"\\" import traceback, inspect,sys tb = sys.exc_info()[2] tbinfo = traceback.format_tb(tb)[0] filename = inspect.getfile(inspect.currentframe()) # script name + line number line = tbinfo.split(\\", \\")[1] # Get Python syntax error # synerror = traceback.format_exc().splitlines()[-1] return line, filename, synerror def create_security_handler(security_type='Portal', username=\\"\\", password=\\"\\", org_url=\\"\\", proxy_url=None, proxy_port=None, referer_url=None, token_url=None, certificatefile=None, keyfile=None, client_id=None, secret_id=None): \\"\\"\\"Creates a security handler helper using the specified properties.\\"\\"\\" securityinfo = {} securityinfo['security_type'] = security_type#LDAP, NTLM, OAuth, Portal, PKI, ArcGIS securityinfo['username'] = username securityinfo['password'] = password securityinfo['org_url'] = org_url securityinfo['proxy_url'] = proxy_url securityinfo['proxy_port'] = proxy_port securityinfo['referer_url'] = referer_url securityinfo['token_url'] = token_url securityinfo['certificatefile'] = certificatefile securityinfo['keyfile'] = keyfile securityinfo['client_id'] = client_id securityinfo['secret_id'] = secret_id return securityhandlerhelper.securityhandlerhelper(securityinfo=securityinfo) def get_epoch_time(date): epoch = dt.utcfromtimestamp(0) return (date - epoch).total_seconds() * 1000 def main(): with open(join(dirname(__file__), 'DashboardLog.log'), 'a') as log_file: # Get current time for report datetime range start_time = dt.utcnow() today_agol = get_epoch_time(start_time) temp_fc = arcpy.env.scratchGDB + \\"temp_fc\\" proj_out = \\"{}_proj\\".format(temp_fc) min_date = None try: # Get security handler for organization content org_shh = create_security_handler(security_type='Portal', username=ic.org_username, password=ic.org_password, org_url=ic.org_url) if org_shh.valid == False: raise Exception(org_shh.message) org_sh = org_shh.securityhandler # Access map JSON admin = arcrest.manageorg.Administration(securityHandler=org_sh) item = admin.content.getItem(ic.map_id) mapjson = item.itemData() if 'error' in mapjson: raise Exception(m2) # Get security handler for ags services ags_sh = None if ic.ags_username is not None and ic.ags_username != \\"\\": ags_sh = arcrest.AGSTokenSecurityHandler(username=ic.ags_username, password=ic.ags_password, token_url=ic.ags_token_url, proxy_url=None, proxy_port=None) print \\"Getting stats layer info...\\" # Get attributes of a single row in stats layer statsurl, statsquery = get_layer_properties(ic.stats_layer_name, mapjson['operationalLayers']) if not statsurl: raise Exception(m4) if ic.stats_service_type in ['AGOL', 'Portal']: statslayer = connect_to_layer(statsurl, org_sh) else: statslayer = connect_to_layer(statsurl, ags_sh) if not count_features(statslayer, query=statsquery) == 1: raise Exception(m5) stats = get_attributes(statslayer, query=statsquery) # If requested, update layer query using today as max date if ic.auto_update_date_query: print \\"Updating date filter on layer...\\" if ic.report_duration: # get diff value to min date if ic.report_time_unit == 'minutes': delta = td(minute=ic.report_duration) elif ic.report_time_unit == 'hours': delta = td(hours=ic.report_duration) elif ic.report_time_unit == 'days': delta = td(days=ic.report_duration) elif ic.report_time_unit == 'weeks': delta = td(weeks=ic.report_duration) min_date = start_time - delta else: # Use end date of previous report min_date = stats[ic.end_date] # update filter on layer for layer in mapjson['operationalLayers']: if layer['title'] == ic.data_layer_name: try: original_query = layer['layerDefinition']['definitionExpression'] #Find if the expression has a clause using the date field and Between operator match = re.search(\\".*?{0} BETWEEN.*?'(.*?)'.*?AND.*?'(.*?)'.*\\".format(ic.date_field), original_query) if match is None: raise ValueError() #Construct a new query replacing the min and max date values with the new dates new_query = match.group()[0:match.start(1)] + min_date.strftime(\\"%Y-%m-%d %H:%M:%S\\") + match.group()[match.end(1):match.start(2)] + start_time.strftime(\\"%Y-%m-%d %H:%M:%S\\") + match.group()[match.end(2):] # Update JSON with new query layer['layerDefinition']['definitionExpression'] = new_query except ValueError, KeyError: d = dt.strftime(dt.now(), \\"%Y-%m-%d %H:%M:%S\\") log_file.write(\\"{}:n\\".format(d)) log_file.write(\\"{}n\\".format(m6.format(ic.date_field))) print(m6.format(ic.date_field)) continue # Commit update to AGOL item useritem = item.userItem params = arcrest.manageorg.ItemParameter() useritem.updateItem(itemParameters = params, text=json.dumps(mapjson)) # Retrieve the url and queries associated with the data and stats layers print \\"Getting layer info...\\" dataurl, dataquery = get_layer_properties(ic.data_layer_name, mapjson['operationalLayers']) if not dataurl: raise Exception(m3) # Connect to the services print \\"Connecting to data layer...\\" if ic.data_service_type in ['AGOL', 'Portal']: datalayer = connect_to_layer(dataurl, org_sh) else: datalayer = connect_to_layer(dataurl, ags_sh) # If necessary, load new points to hosted service if ic.data_feature_class: # only attemp append if there are new features temp_fc = arcpy.CopyFeatures_management(ic.data_feature_class, temp_fc) sr_output = datalayer.extent['spatialReference']['wkid'] temp_fc_proj = arcpy.Project_management(temp_fc, proj_out, sr_output) # Load data from layer to service datalayer.deleteFeatures(where=\\"1=1\\") datalayer.addFeatures(temp_fc_proj) arcpy.Delete_management(temp_fc) arcpy.Delete_management(temp_fc_proj) # Count the data features that meet the map query print \\"Counting features\\" feature_cnt = count_features(datalayer, query=dataquery) print \\"Getting new stats...\\" # Current editor editor = getpass.getuser() attributes = get_attributes(statslayer, statsquery) attributes[ic.datecurr] = today_agol attributes[ic.date1] = stats[ic.datecurr] attributes[ic.date2] = stats[ic.date1] attributes[ic.date3] = stats[ic.date2] attributes[ic.date4] = stats[ic.date3] attributes[ic.observcurr] = feature_cnt attributes[ic.observ1] = stats[ic.observcurr] attributes[ic.observ2] = stats[ic.observ1] attributes[ic.observ3] = stats[ic.observ2] attributes[ic.observ4] = stats[ic.observ3] attributes[ic.last_update] = today_agol attributes[ic.last_editor] = editor attributes[ic.end_date] = today_agol if min_date is None: attributes[ic.start_date] = stats[ic.end_date] else: attributes[ic.start_date] = get_epoch_time(min_date) edits = [{\\"attributes\\" : attributes}] statslayer.applyEdits(updateFeatures=edits) print \\"Done.\\" except (common.ArcRestHelperError),e: print \\"error in function: %s\\" % e[0]['function'] print \\"error on line: %s\\" % e[0]['line'] print \\"error in file name: %s\\" % e[0]['filename'] print \\"with error message: %s\\" % e[0]['synerror'] if 'arcpyError' in e[0]: print \\"with arcpy message: %s\\" % e[0]['arcpyError'] except Exception as ex: print(\\"{}n\\".format(ex)) d = dt.strftime(dt.now(), \\"%Y-%m-%d %H:%M:%S\\") log_file.write(\\"{}:n\\".format(d)) log_file.write(\\"{}n\\".format(ex)) finally: if arcpy.Exists(temp_fc): arcpy.Delete_management(temp_fc) if arcpy.Exists(proj_out): arcpy.Delete_management(proj_out) # End main function if __name__ == '__main__': main()"},{"prompt":"Optimize an existing Python algorithm to select the best points of distribution for a delivery service. The algorithm should take into account distance, demand, and availability. A list of customers, the location of the warehouse, and the maximum delivery distance.","completion":"def select_points_of_distribution(customers, warehouse_location, max_distance): # Sort customers by distance from the warehouse sorted_customers = sorted(customers, key=lambda c: distance(c, warehouse_location)) # Keep track of the points of distribution we select points_of_distribution = [] # Initialize variables current_customer = 0 points_covered = 0 # Iterate until all points are covered while points_covered < len(customers): # Select the customer with the largest demand max_demand_customer = sorted_customers[current_customer] points_of_distribution.append(max_demand_customer) # Iterate through customers and mark those within the max_distance for customer in sorted_customers: if distance(max_demand_customer, customer) <= max_distance: points_covered += 1 # Move on to the next customer current_customer += 1 # Return the points of distribution return points_of_distribution def distance(point_1, point_2): # Calculate the Euclidean distance between two points return math.sqrt((point_1[0] - point_2[0])**2 + (point_1[1] - point_2[1])**2)"},{"prompt":"Generate a script in Python that takes a list of numbers and prints out the smallest number in the list. [5, 12, 3, 1, 8]","completion":"# Function to print the minimum number in a list def min_in_list(list): # Inialise minimum to first element in the list min = list[0] # Traverse through the list from 1st index # and update minimum if found for i in range(len(list)): if list[i] < min: min = list[i] return min # Driver Code list = [5, 12, 3, 1, 8] print (\\"Minimum in the list is \\", min_in_list(list))"},{"prompt":"Create a memory game in Python.","completion":"import random # Create the list of possible values cards = [\\"A\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"10\\", \\"J\\", \\"Q\\", \\"K\\"] * 4 # Shuffle the cards random.shuffle(cards) # Create a variable to store the user's score user_score = 0 # Initialize the game # The user is shown a card, and asked if they remember what it is while cards: current_card = cards.pop() print(f\\"What is the card? {current_card}\\") answer = input() # Check the user's answer if answer == current_card: user_score += 1 print(\\"Correct!\\") else: print(\\"Incorrect.\\") break print(f\\"Game over! Your score is {user_score}\\")"},{"prompt":"Write a Python program to convert a given string to all uppercase letters. hello world","completion":"string = \\"hello world\\" string_upper_characters = string.upper() print(string_upper_characters)"},{"prompt":"Write a Python program that takes a positive integer and prints the squares of all the numbers from 1 to the given number. Given number: 5","completion":"# Program to print the squares of all # the numbers from 1 to the given number # Positive number taken as an input num = 5 # Iterate from 1 to num for i in range(1, num+1): # Calculate the square value = i**2 # Print the value print(value) # Output: # 1 # 4 # 9 # 16 # 25"},{"prompt":"Develop a Python script that receives two lists and returns a new list that contains a unique combination of all elements in the two lists. list1 = [1, 2, 3], list2 = [2, 3, 4]","completion":"def combine_lists(list1, list2): result = list1 + list2 return list(set(result)) list1 = [1, 2, 3] list2 = [2, 3, 4] print(combine_lists(list1, list2)) # [1, 2, 3, 4]"},{"prompt":"Generate a regular expression pattern in Python that matches a 10 digit phone number.","completion":"r'd{10}'"},{"prompt":"Create a Python code to classify a given Iris flower as Iris setosa, Iris versicolor and Iris virginica. [5.9, 3.0, 5.1, 1.8]","completion":"def classify_iris(flower): if flower[0] < 5 and flower[2] < 4: return 'Iris setosa' elif flower[2] >= 4.9 and flower[3] <= 1.8: return 'Iris virginica' else: return 'Iris versicolor'"},{"prompt":"Sort an array of strings in descending order according to their length. ['coding', 'algorithm', 'programming', 'python']","completion":"['programming', 'algorithm', 'python', 'coding']"},{"prompt":"Construct a python function that sorts a list of tuples containing the names of the keys and values of a dictionary. dictionary = {'a': 4, 'b': 2, 'c': 3, 'd': 1}","completion":"def sort_dictionary(dictionary): return sorted(dictionary.items(), key=lambda x: x[1])"},{"prompt":"Create a python program for checking whether a number is a palindrome or not. 12321","completion":"def is_palindrome(num): rev = 0 tmp = num while tmp > 0: rev = rev * 10 rev = rev + (tmp % 10) tmp = tmp // 10 return num == rev num = 12321 if (is_palindrome(num)): print(\\"Number is a palindrome\\") else: print(\\"Number is not a palindrome\\")"},{"prompt":"Create a Python script to search a given source code For the given keywords and display the search results. hou, calc","completion":"\\"\\"\\" Create a python script to search a given source code for the given keywords and display the search results. \\"\\"\\" import re def search_source_code(source_code, keywords): matches = [] for keyword in keywords: matches += re.findall(keyword, source_code) return matches if __name__ == '__main__': source_code = ''' #def hou(a, b): # some code #def calc(a, b): # some code ''' keywords = ['hou', 'calc'] print(search_source_code(source_code, keywords))"},{"prompt":"Create a function in Python to compute the sum of two numbers, x and y. sample input: x = 2 and y = 3","completion":"def sum(x, y): return x + y # testing print(sum(2, 3)) # Output: 5"},{"prompt":"Construct a ForLoop in Python to generate a list of numbers from 0 to 10 (inclusive).","completion":"list = [] for i in range(11): list.append(i)"},{"prompt":"Create a Python program to group a list of numbers into two lists according to their parity (even/odd) in the most efficient way. [1, 4, 5, 3, 2, 6, 7]","completion":"even_list = [] odd_list = [] for num in input_list: if num % 2 == 0: even_list.append(num) else: odd_list.append(num) print('Even list:', even_list) print('Odd list:', odd_list)"},{"prompt":"Generate a correct Python program to build an inverted index. A text file contains a list of word","completion":"def build_inverted_index(filename): inverted_index = {} with open(filename) as fin: for line in fin: for word in line.split(): if word in inverted_index: inverted_index[word].append(fin.tell()) else: inverted_index[word] = [fin.tell()] return inverted_index"},{"prompt":"Create a method in Python to sum up all the elements of a given list.","completion":"# sum_list function takes in a list and # returns the sum of the elements of the list def sum_list(input_list): # Set sum to 0 sum = 0 # Iterate through the list and # add each element to the sum for element in input_list: sum = sum + element # Return the sum return sum"},{"prompt":"Create a Python program to extract the top 10 words from a text. My name is John and I work as a software engineer.","completion":"import re from collections import Counter def get_top_words(txt): words = re.findall(r'w+', txt.lower()) return Counter(words).most_common(10) print(get_top_words('My name is John and I work as a software engineer.')) # Output: [('i', 2), ('a', 1), ('as', 1), ('engineer', 1), ('john', 1), ('name', 1), ('software', 1), ('work', 1)]"},{"prompt":"Write a Python function, which takes an argument as an array of integers and returns an array of integers consisting of only numbers that are divisible by 3 or 5. [3, 4, 6, 7, 8, 9, 10, 12, 15]","completion":"def find_number_divisible_by_three_five(numbers): result = [] for number in numbers: if (number % 3 == 0 or number % 5 == 0): result.append(number) return result # Testing print(find_number_divisible_by_three_five([3, 4, 6, 7, 8, 9, 10, 12, 15])) # Output [3, 6, 9, 10, 12, 15]"},{"prompt":"Create a function in Python which takes a list of strings as input, and prints the longest palindrome contained in the list. [racecar, python, mom, abba]","completion":"def longest_palindrome(str_list): longest_palindrome = \\"\\" for s in str_list: if s == s[::-1] and len(s) > len(longest_palindrome): longest_palindrome = s print(longest_palindrome) longest_palindrome([\\"racecar\\", \\"python\\", \\"mom\\", \\"abba\\"])"},{"prompt":"Write a Python script to access the last 5 tweets from a Twitter user using the Tweepy library. Not applicable","completion":"import tweepy # Set up API access for your application consumer_key = \\"<your_consumer_key>\\" consumer_secret = \\"<your_consumer_secret>\\" access_token = \\"<your_access_token>\\" access_token_secret = \\"<your_access_token_secret>\\" # Create the API access object auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) # Get the user's timeline user_timeline = api.user_timeline('username', count=5) # Print each tweet for tweet in user_timeline: print(tweet.text)"},{"prompt":"Create an algorithm to determine if two strings have the same character set in Python. Strings: paris and sapir","completion":"def same_charset(str1, str2): str1 = sorted(str1) str2 = sorted(str2) if(str1 == str2): return True else: return False"},{"prompt":"Create a Python program to read and parse XML data from a URL. https://example.com/data.xml","completion":"import requests import xml.etree.ElementTree as ET url = 'https://example.com/data.xml' r = requests.get(url) xml_data = r.text root = ET.fromstring(xml_data) for child in root: print(child.tag, child.attrib)"},{"prompt":"Optimize a Python program to copy and append an array of integers. [2, 4, 6]","completion":"def array_copy(arr): return arr[:] def array_append(arr, value): arr.append(value) arr = [2, 4, 6] arr_copy = array_copy(arr) array_append(arr_copy, 8) print(arr_copy)"},{"prompt":"Create a game loop in Python that waits for user input and handles it. Not applicable","completion":"while True: user_input = input(\\"Enter your input: \\") # handle user input if user_input == 'exit': break"},{"prompt":"Given a set of numbers and a target number, write Python code to find the combination of numbers that add up to the target number. Target Number: 6 Set of Numbers: [1, 2, 3, 4, 5]","completion":"def find_combinations(numbers, target): solutions = [] #recursive solution def find_combos(solution, index): if sum(solution) == target: solutions.append(solution) elif sum(solution) < target: for i in range(index, len(numbers)): find_combos(solution + [numbers[i]], i) find_combos([], 0) return solutions"},{"prompt":"Add a feature in a Python program to check if a variable is a string.","completion":"if isinstance(variable, str): # variable is a string"},{"prompt":"Construct a Python script to generate a random password with at least one capital letter, one small letter, one numeric character, and one special character.","completion":"import string import random def genPassword(length): # Create strings of possible characters digits = string.digits upper = string.ascii_uppercase lower = string.ascii_lowercase special = string.punctuation all = upper + lower + digits + special # Create empty strings password = '' upper_password = '' lower_password = '' digit_password = '' special_password = '' # Iterate a loop over given length of string and all character array to generate random password with given rules for x in range(length): upper_password = upper_password + random.choice(upper) lower_password = lower_password + random.choice(lower) digit_password = digit_password + random.choice(digits) special_password = special_password + random.choice(special) # Concate all character string to generate random password password = upper_password + lower_password + digit_password + special_password # Use 'sample' method to scatter characters in password string password = ''.join(random.sample(password, len(password))) return password length = 12 password = genPassword(length) print(password)"},{"prompt":"Write a Python code snippet to count the number of occurrences of a given letter in a string. string = Mississippi, letter = s","completion":"letter = 's' string = \\"Mississippi\\" count = 0 for char in string: if char == letter: count += 1 print(count)"},{"prompt":"Compute the dot product of two 1d vectors using Python. x = [1, 4, 5] y = [2, 4, 6]","completion":"def dot_product(x, y): result = 0 for i in range(len(x)): result += x[i] * y[i] return result"},{"prompt":"Write a Python program to go through a list of employee names and print the highestpaid one. John, 45000 Jane, 50000 Michael, 60000 Josh, 40000","completion":"employees = [ ['John', 45000], ['Jane', 50000], ['Michael', 60000], ['Josh', 40000] ] highest_salary = 0 highest_name = \\"\\" for name, salary in employees: if salary > highest_salary: highest_salary = salary highest_name = name print(\\"The highest-paid employee is \\" + highest_name + \\" with a salary of \\" + str(highest_salary))"},{"prompt":"Create a web crawler in Python to scrape data from Quora.","completion":"# import libraries import requests from bs4 import BeautifulSoup # define the search url url = 'https://www.quora.com/search' # create a payload for the query parameters payload = {'q': 'machine learning'} # get the content from the specified url r = requests.get(url, params=payload) # parse the content soup = BeautifulSoup(r.content, 'html.parser') # collect data from all the elements with class 'question_link' results = soup.find_all('a', class_='question_link') # print the results for result in results: print(result.text)"},{"prompt":"Write a python program to perform monkey sorting of an array. arr = [7, 5, 4, 9, 6, 2, 1, 8]","completion":"def monkey_sort(arr): # Check array length arr_len = len(arr) # Create a copy of the array result = arr.copy() # Randomly shuffle the elements of the array # until it is sorted while(result != sorted(result)): for i in range(arr_len): r = random.randint(0, arr_len - 1) result[i], result[r] = result[r], result[i] # Return the sorted array return result # Driver code arr = [7, 5, 4, 9, 6, 2, 1, 8] print(monkey_sort(arr))"},{"prompt":"Create a Python script to determine the roots of a quadratic equation. The coefficients of the equation (a, b, c).","completion":"import math def findRoots(a, b, c): discriminant = b ** 2 - 4 * a * c if discriminant < 0: print('No real roots.') elif discriminant == 0: root = -b / (2 * a) print('One root: ', root) else: root1 = (-b + math.sqrt(discriminant)) / (2 * a) root2 = (-b - math.sqrt(discriminant)) / (2 * a) print('Two roots: ', root1, root2)"},{"prompt":"Create a python code that can randomly select 10 numbers from a sequence of numbers from 1 to 100","completion":"import random as rd def random_selection(n): num_list = [i for i in range(1, n+1)] index_list = rd.sample(range(1, n+1), 10) selected_list = [num_list[i] for i in index_list] return selected_list"},{"prompt":"Create a Python Programm to verify the validity of a credit card based the Luhn algorithm. Credit card number: 4539 7431 8574 7991","completion":"def validateCreditCardNumber(number): # Reverse of the card number rev_number = number[::-1] # Declare a sum of all digits sum_of_digits = 0 for i in range(len(rev_number)): digit = int(rev_number[i]) # For alternate digits multiply by 2 if i % 2 != 0: digit *= 2 # Add the higher digit of each result to the sum if digit > 9: sum_of_digits += digit // 10 + digit % 10 else: sum_of_digits += digit # If the sum is divisible by 10 its a valid card number return sum_of_digits % 10 == 0 print(validateCreditCardNumber('45397431 85747991')) // Output: True"},{"prompt":"Write a Python program to find the most common letter in the given string. str = hello world","completion":"str = \\"hello world\\" from collections import Counter def most_common_letter(str): letters_count = Counter(str).most_common() return letters_count[0][0] print(most_common_letter(str))"},{"prompt":"Add a function to a python program that returns the maximum value in a list of integers. arr = [3, 6, 4, 7, 15, 10]","completion":"def max_val(arr): max_val = 0 for num in arr: if num > max_val: max_val = num return max_val"},{"prompt":"Write a Python program to ask the user for an input and then calculate the factorial of that number.","completion":"num = int(input('Enter an integer: ')) factorial = 1 if num < 0: print(\\"Sorry, factorial does not exist for negative numbers\\") elif num == 0: print(\\"The factorial of 0 is 1\\") else: for i in range(1,num + 1): factorial = factorial*i print(\\"The factorial of\\",num,\\"is\\",factorial)"},{"prompt":"Create a Python program to calculate the factorial of an integer.","completion":"def factorial(num): if num == 0: return 1 else: return num * factorial(num-1) num = int(input(\\"Enter an integer: \\")) print(\\"Factorial of \\", num, \\"is: \\", factorial(num))"},{"prompt":"Create an algorithm in Python that finds the maximum and minimum numbers in an unsorted array. [5, 7, 2, 11, 9]","completion":"def get_max_min(arr): max_num = None min_num = None for n in arr: if max_num is None or n > max_num: max_num = n if min_num is None or n < min_num: min_num = n return max_num, min_num max_num, min_num = get_max_min([-5, 7, 2, 11, -9]) print(f\\"max = {max_num}, min = {min_num}\\")"},{"prompt":"Generate a program to compare the lengths of two strings using Python. s1 = hello s2 = world","completion":"def compare_string_lengths(s1, s2): if len(s1) == len(s2): return 0 elif len(s1) < len(s2): return -1 else: return 1"},{"prompt":"Write a Python program to display the first and last colors from the following list. Colors: ['Red', 'Green', 'White', 'Black']","completion":"# List of colors colors = ['Red', 'Green', 'White', 'Black'] # First color print(colors[0]) # Last color print(colors[-1])"},{"prompt":"Create a Python function that takes a list of strings and returns a dictionary with the strings as keys and their frequencies as values. [hello, world, hello, goodbye, world, hello]","completion":"def frequency(lst): result = {} for el in lst: if el in result: result[el] += 1 else: result[el] = 1 return result print(frequency([\\"hello\\", \\"world\\", \\"hello\\", \\"goodbye\\", \\"world\\", \\"hello\\"])) # Output: {'hello': 3, 'world': 2, 'goodbye': 1}"},{"prompt":"Create a program that takes a numerical array and returns a reversed array in Python. [1,2,3,4,5]","completion":"def reverse_array(array): reversed_array = array[::-1] return reversed_array reversed_array = reverse_array([1,2,3,4,5]) print(reversed_array)"},{"prompt":"mplement a recursive function in Python that takes a (string) as input and returns a reversed version of the input string.","completion":"def rev_string(input_str): if len(input_str) == 0: return input_str else: return rev_string(input_str[1:]) + input_str[0]"},{"prompt":"Create a Python program to compare two strings.","completion":"def compare_strings(s1, s2): if len(s1) != len(s2): return False for i in range(len(s1)): if s1[i] != s2[i]: return False return True"},{"prompt":"Generate a Python API wrapper for an existing API. API URL: https://api.example.com","completion":"\\"\\"\\" Generate a Python API wrapper for an existing API \\"\\"\\" import requests class APIWrapper(): # API URL API_URL = 'https://api.example.com' # API Endpoints API_ENDPOINTS = { 'get': '/v1/get', 'create': '/v1/create' } def __init__(self): pass def get(self, endpoint, data): url = self.API_URL + self.API_ENDPOINTS.get(endpoint) response = requests.get(url, params=data) return response.json() def create(self, endpoint, data): url = self.API_URL + self.API_ENDPOINTS.get(endpoint) response = requests.post(url, data=data) return response.json()"},{"prompt":"Create a Python function that takes a list of numbers as an argument and sorts it in descending order using quick sort algorithm. [7, 5, 2, 4, 2, 9, 3, 8]","completion":"def quickSort(nums): if len(nums) <= 1: return nums pivot = nums[len(nums) // 2] left = [x for x in nums if x < pivot] middle = [x for x in nums if x == pivot] right = [x for x in nums if x > pivot] return quickSort(right) + middle + quickSort(left) if __name__ == \\"__main__\\": numbers = [7, 5, 2, 4, 2, 9, 3, 8] print(quickSort(numbers))"},{"prompt":"Build an algorithm in Python to check if a string is a palindrome. abccba","completion":"def is_palindrome(str): # Get the length of the string n = len(str) for i in range(n//2): # Compare characters from both ends if str[i] != str[n-i-1]: return False return True str = \\"abccba\\" print(is_palindrome(str))"},{"prompt":"Write a Python program to translate a string into pig latin. Hello","completion":"def toPigLatin(word): vowels = [\\"a\\",\\"e\\",\\"i\\",\\"o\\",\\"u\\"] first_letter = word[0] if first_letter in vowels: modified_word = word + \\"way\\" else: modified_word = word[1:] + first_letter + \\"ay\\" return modified_word result = toPigLatin(\\"Hello\\") print(result)"},{"prompt":"Write a Python program to sum up the prime numbers below 100.","completion":"def sum_prime_numbers(limit): sum = 0 for num in range(2, limit + 1): if all(num % i != 0 for i in range(2, num)): sum += num return sum print(sum_prime_numbers(100))"},{"prompt":"Create an algorithm in Python to calculate the mean of a given list. [1,2,3,4]","completion":"def calculate_mean(numbers): # Get the length of the list numbers_len = len(numbers) # Sum up all the elements in the list total = 0 for num in numbers: total += num # Divide the total with the length of the list mean = total / numbers_len # Return the mean return mean mean = calculate_mean([1,2,3,4]) print(mean)"},{"prompt":"Suggest a way to automate a process that extracts the data from a web page.","completion":"The process of extracting data from a web page can be automated by using web scraping techniques. Web scraping is a process of extracting data from websites using programming languages such as Python or JavaScript. It involves making web requests to the respective web pages using tools like BeautifulSoup and then parsing the data from the response using libraries like lxml or html5lib."},{"prompt":"Create a basic Python web scraper that visits the Wikipedia page for a given language and extracts the list of official languages of each country belonging to that language. English","completion":"import requests from bs4 import BeautifulSoup # Make the request url = f'https://en.wikipedia.org/wiki/List_of_languages_by_number_of_native_speakers' r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') # Get the official language for each country languages = [] for table in soup.find_all('table'): headings = table.find('th').text if headings == 'Official language(s)': rows = table.find_all('td') for row in rows: lang = row.find('a') if lang.text.lower() == 'english': languages.append(lang.text) # Print out the list of languages print(languages)"},{"prompt":"Write a Python program to scrape PubMed webpages for articles related to Covid19 and store them in a MongoDB database. MongoDB URL: mongodb+srv://username:password@mycluster.mongodb.net/pubmed","completion":"import pymongo import requests from bs4 import BeautifulSoup # mongodb connection client = pymongo.MongoClient( 'mongodb+srv://username:password@mycluster.mongodb.net/pubmed') db = client.pubmed # configure request headers headers = { 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36' } # get the html from the page res = requests.get('https://pubmed.ncbi.nlm.nih.gov/?term=covid-19', headers=headers) soup = BeautifulSoup(res.text, 'html.parser') # parse the html and extract the articles articles = soup.find_all('div', {'class': 'docsum-content'}) for article in articles: # article title title = article.find('p', {'class': 'title'}).text # link to article link = article.find('p', {'class':'links'}).find('a')['href'] # insert article into DB db.articles.insert_one({'title': title, 'link': link}) client.close()"},{"prompt":"Create a Python script to categorize the following list of words. carpet, chair, table, floor","completion":"words = [\\"carpet\\", \\"chair\\", \\"table\\", \\"floor\\"] categories = {} for word in words: if word in [\\"carpet\\"]: categories[\\"furnishing\\"] = categories.get(\\"furnishing\\", []) + [word] elif word in [\\"chair\\", \\"table\\"]: categories[\\"furniture\\"] = categories.get(\\"furniture\\", []) + [word] elif word in [\\"floor\\"]: categories[\\"flooring\\"] = categories.get(\\"flooring\\", []) + [word] else: categories[\\"other\\"] = categories.get(\\"other\\", []) + [word] print(categories)"},{"prompt":"Create a class in Python for a given Job object with properties like title, company, location, and job type.","completion":"class Job: def __init__(self, title, company, location, job_type): self.title = title self.company = company self.location = location self.job_type = job_type"},{"prompt":"Create a machine learning model in Python to predict the airline’s ticket prices, given some input values.","completion":"def build_model(input_values): # Build the model code return model"},{"prompt":"Create a python function which takes a list of string and converts each string to its uppercase equivalent. ['Hello', 'World']","completion":"def to_uppercase(items): return [item.upper() for item in items] result = to_uppercase(['Hello', 'World']) print(result)"},{"prompt":"Write a Python program to calculate the letter grade of a given numerical grade.","completion":"def calculate_grade(score): if score >= 90: return \\"A\\" elif score >= 80: return \\"B\\" elif score >= 70: return \\"C\\" elif score >= 60: return \\"D\\" else: return \\"F\\" result = calculate_grade(90) print(result)"},{"prompt":"Design a function in Python to find the minimum of three numbers. 2, 6, 4","completion":"def find_min(a, b, c): if a<b and a<c: return a elif b<a and b<c: return b else: return c min = find_min(2, -6, 4) print(min)"},{"prompt":"Write a Python program to input three integers and determine their sum. 5, 8, 10","completion":"def three_integers(x, y, z): return x + y + z x = 5 y = 8 z = 10 print(three_integers(x, y, z))"},{"prompt":"This code is an Ansible module that configures online sign up (OSU) provider list in Fortinet's FortiOS and FortiGate. To use it, provide the necessary parameters such as host, username, password, vdom, etc. and set the state to either present or absent. Additionally, provide the required parameters for the wireless_controller_hotspot20_h2qp_osu_provider dictionary, such as name, osu_method, and service_description. The module uses the FortiOSAPI library and requires a version of at least 0.9.8. The module can be run as a local_action in your playbook.","completion":"#!/usr/bin/python from __future__ import (absolute_import, division, print_function) # Copyright 2019 Fortinet, Inc. # # This program is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program. If not, see <https://www.gnu.org/licenses/>. __metaclass__ = type ANSIBLE_METADATA = {'status': ['preview'], 'supported_by': 'community', 'metadata_version': '1.1'} DOCUMENTATION = ''' --- module: fortios_wireless_controller_hotspot20_h2qp_osu_provider short_description: Configure online sign up (OSU) provider list in Fortinet's FortiOS and FortiGate. description: - This module is able to configure a FortiGate or FortiOS (FOS) device by allowing the user to set and modify wireless_controller_hotspot20 feature and h2qp_osu_provider category. Examples include all parameters and values need to be adjusted to datasources before usage. Tested with FOS v6.0.4 version_added: \\"2.9\\" author: - Miguel Angel Munoz (@mamunozgonzalez) - Nicolas Thomas (@thomnico) notes: - Requires fortiosapi library developed by Fortinet - Run as a local_action in your playbook requirements: - fortiosapi>=0.9.8 options: host: description: - FortiOS or FortiGate IP address. type: str required: false username: description: - FortiOS or FortiGate username. type: str required: false password: description: - FortiOS or FortiGate password. type: str default: \\"\\" vdom: description: - Virtual domain, among those defined previously. A vdom is a virtual instance of the FortiGate that can be configured and used as a different unit. type: str default: root https: description: - Indicates if the requests towards FortiGate must use HTTPS protocol. type: bool default: true ssl_verify: description: - Ensures FortiGate certificate must be verified by a proper CA. type: bool default: true state: description: - Indicates whether to create or remove the object. type: str required: true choices: - present - absent wireless_controller_hotspot20_h2qp_osu_provider: description: - Configure online sign up (OSU) provider list. default: null type: dict suboptions: friendly_name: description: - OSU provider friendly name. type: list suboptions: friendly_name: description: - OSU provider friendly name. type: str index: description: - OSU provider friendly name index. required: true type: int lang: description: - Language code. type: str icon: description: - OSU provider icon. Source wireless-controller.hotspot20.icon.name. type: str name: description: - OSU provider ID. required: true type: str osu_method: description: - OSU method list. type: str choices: - oma-dm - soap-xml-spp - reserved osu_nai: description: - OSU NAI. type: str server_uri: description: - Server URI. type: str service_description: description: - OSU service name. type: list suboptions: lang: description: - Language code. type: str service_description: description: - Service description. type: str service_id: description: - OSU service ID. type: int ''' EXAMPLES = ''' - hosts: localhost vars: host: \\"192.168.122.40\\" username: \\"admin\\" password: \\"\\" vdom: \\"root\\" ssl_verify: \\"False\\" tasks: - name: Configure online sign up (OSU) provider list. fortios_wireless_controller_hotspot20_h2qp_osu_provider: host: \\"{{ host }}\\" username: \\"{{ username }}\\" password: \\"{{ password }}\\" vdom: \\"{{ vdom }}\\" https: \\"False\\" state: \\"present\\" wireless_controller_hotspot20_h2qp_osu_provider: friendly_name: - friendly_name: \\"<your_own_value>\\" index: \\"5\\" lang: \\"<your_own_value>\\" icon: \\"<your_own_value> (source wireless-controller.hotspot20.icon.name)\\" name: \\"default_name_8\\" osu_method: \\"oma-dm\\" osu_nai: \\"<your_own_value>\\" server_uri: \\"<your_own_value>\\" service_description: - lang: \\"<your_own_value>\\" service_description: \\"<your_own_value>\\" service_id: \\"15\\" ''' RETURN = ''' build: description: Build number of the fortigate image returned: always type: str sample: '1547' http_method: description: Last method used to provision the content into FortiGate returned: always type: str sample: 'PUT' http_status: description: Last result given by FortiGate on last operation applied returned: always type: str sample: \\"200\\" mkey: description: Master key (id) used in the last call to FortiGate returned: success type: str sample: \\"id\\" name: description: Name of the table used to fulfill the request returned: always type: str sample: \\"urlfilter\\" path: description: Path of the table used to fulfill the request returned: always type: str sample: \\"webfilter\\" revision: description: Internal revision number returned: always type: str sample: \\"17.0.2.10658\\" serial: description: Serial number of the unit returned: always type: str sample: \\"FGVMEVYYQT3AB5352\\" status: description: Indication of the operation's result returned: always type: str sample: \\"success\\" vdom: description: Virtual domain used returned: always type: str sample: \\"root\\" version: description: Version of the FortiGate returned: always type: str sample: \\"v5.6.3\\" ''' from ansible.module_utils.basic import AnsibleModule from ansible.module_utils.connection import Connection from ansible.module_utils.network.fortios.fortios import FortiOSHandler from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG def login(data, fos): host = data['host'] username = data['username'] password = data['password'] ssl_verify = data['ssl_verify'] fos.debug('on') if 'https' in data and not data['https']: fos.https('off') else: fos.https('on') fos.login(host, username, password, verify=ssl_verify) def filter_wireless_controller_hotspot20_h2qp_osu_provider_data(json): option_list = ['friendly_name', 'icon', 'name', 'osu_method', 'osu_nai', 'server_uri', 'service_description'] dictionary = {} for attribute in option_list: if attribute in json and json[attribute] is not None: dictionary[attribute] = json[attribute] return dictionary def underscore_to_hyphen(data): if isinstance(data, list): for elem in data: elem = underscore_to_hyphen(elem) elif isinstance(data, dict): new_data = {} for k, v in data.items(): new_data[k.replace('_', '-')] = underscore_to_hyphen(v) data = new_data return data def wireless_controller_hotspot20_h2qp_osu_provider(data, fos): vdom = data['vdom'] state = data['state'] wireless_controller_hotspot20_h2qp_osu_provider_data = data['wireless_controller_hotspot20_h2qp_osu_provider'] filtered_data = underscore_to_hyphen(filter_wireless_controller_hotspot20_h2qp_osu_provider_data(wireless_controller_hotspot20_h2qp_osu_provider_data)) if state == \\"present\\": return fos.set('wireless-controller.hotspot20', 'h2qp-osu-provider', data=filtered_data, vdom=vdom) elif state == \\"absent\\": return fos.delete('wireless-controller.hotspot20', 'h2qp-osu-provider', mkey=filtered_data['name'], vdom=vdom) def is_successful_status(status): return status['status'] == \\"success\\" or status['http_method'] == \\"DELETE\\" and status['http_status'] == 404 def fortios_wireless_controller_hotspot20(data, fos): if data['wireless_controller_hotspot20_h2qp_osu_provider']: resp = wireless_controller_hotspot20_h2qp_osu_provider(data, fos) return not is_successful_status(resp), resp['status'] == \\"success\\", resp def main(): fields = { \\"host\\": {\\"required\\": False, \\"type\\": \\"str\\"}, \\"username\\": {\\"required\\": False, \\"type\\": \\"str\\"}, \\"password\\": {\\"required\\": False, \\"type\\": \\"str\\", \\"default\\": \\"\\", \\"no_log\\": True}, \\"vdom\\": {\\"required\\": False, \\"type\\": \\"str\\", \\"default\\": \\"root\\"}, \\"https\\": {\\"required\\": False, \\"type\\": \\"bool\\", \\"default\\": True}, \\"ssl_verify\\": {\\"required\\": False, \\"type\\": \\"bool\\", \\"default\\": True}, \\"state\\": {\\"required\\": True, \\"type\\": \\"str\\", \\"choices\\": [\\"present\\", \\"absent\\"]}, \\"wireless_controller_hotspot20_h2qp_osu_provider\\": { \\"required\\": False, \\"type\\": \\"dict\\", \\"default\\": None, \\"options\\": { \\"friendly_name\\": {\\"required\\": False, \\"type\\": \\"list\\", \\"options\\": { \\"friendly_name\\": {\\"required\\": False, \\"type\\": \\"str\\"}, \\"index\\": {\\"required\\": True, \\"type\\": \\"int\\"}, \\"lang\\": {\\"required\\": False, \\"type\\": \\"str\\"} }}, \\"icon\\": {\\"required\\": False, \\"type\\": \\"str\\"}, \\"name\\": {\\"required\\": True, \\"type\\": \\"str\\"}, \\"osu_method\\": {\\"required\\": False, \\"type\\": \\"str\\", \\"choices\\": [\\"oma-dm\\", \\"soap-xml-spp\\", \\"reserved\\"]}, \\"osu_nai\\": {\\"required\\": False, \\"type\\": \\"str\\"}, \\"server_uri\\": {\\"required\\": False, \\"type\\": \\"str\\"}, \\"service_description\\": {\\"required\\": False, \\"type\\": \\"list\\", \\"options\\": { \\"lang\\": {\\"required\\": False, \\"type\\": \\"str\\"}, \\"service_description\\": {\\"required\\": False, \\"type\\": \\"str\\"}, \\"service_id\\": {\\"required\\": False, \\"type\\": \\"int\\"} }} } } } module = AnsibleModule(argument_spec=fields, supports_check_mode=False) # legacy_mode refers to using fortiosapi instead of HTTPAPI legacy_mode = 'host' in module.params and module.params['host'] is not None and 'username' in module.params and module.params['username'] is not None and 'password' in module.params and module.params['password'] is not None if not legacy_mode: if module._socket_path: connection = Connection(module._socket_path) fos = FortiOSHandler(connection) is_error, has_changed, result = fortios_wireless_controller_hotspot20(module.params, fos) else: module.fail_json(**FAIL_SOCKET_MSG) else: try: from fortiosapi import FortiOSAPI except ImportError: module.fail_json(msg=\\"fortiosapi module is required\\") fos = FortiOSAPI() login(module.params, fos) is_error, has_changed, result = fortios_wireless_controller_hotspot20(module.params, fos) fos.logout() if not is_error: module.exit_json(changed=has_changed, meta=result) else: module.fail_json(msg=\\"Error in repo\\", meta=result) if __name__ == '__main__': main()"},{"prompt":"Create a Python script for retrieving data from the web. The script should access a website using the URL and return the data in a KeyValue format. URL : https://example.com/blogpage","completion":"import json import requests #Get the URL for the website url = 'https://example.com/blogpage' r = requests.get(url) #Check for errors if r.status_code != 200: print('Error:', r.status_code) #Parse the page content page_content = r.text #Parse the page_content into a Key-Value format dict = {} for line in page_content.split('n'): words = line.split() if len(words) > 1: key = words[0] value = words[1] dict[key] = value #Create a new JSON data = json.dumps(dict); #Print the JSON print(data)"},{"prompt":"mplement an algorithm in Python to find the mode of the given array arr = [2, 4, 3, 3, 5, 3, 7]","completion":"def findMode(arr): max_count = 1 mode = arr[0] count = 1 for i in range(1,len(arr)): if (arr[i] == arr[i - 1]): count = count + 1 # increment count if (count > max_count): max_count = count # update max_count mode = arr[i] else: count = 1 # reset count return mode # Driver program arr = [2, 4, 3, 3, 5, 3, 7] print(findMode(arr)) # prints 3"},{"prompt":"Develop Python code to calculate the Average of two numbers. 2, 3","completion":"def average(a, b): return (a + b) / 2 result = average(2, 3) print(result)"},{"prompt":"Create a Python program that calculates the total cost of an online purchase. ProductName: Powerbank, Quantity: 3, PriceEach: 15","completion":"def calculate_total_cost(product_name, quantity, price): return quantity * price total_cost = calculate_total_cost(\\"Powerbank\\", 3, 15) print(\\"Total cost of the purchase is \\" + str(total_cost))"},{"prompt":"Edit the following Python code so that it prints the sum of the list elements. list = [10, 20, 30, 40]","completion":"list = [10, 20, 30, 40] sum = 0 for i in list: sum += i print(\\"The sum is\\", sum)"},{"prompt":"Create a chatbot in Python to answer questions about a given topic.","completion":"# importing required libraries import random import string import spacy import nltk # Function to generate response def chatbot_response(user_input): # Preprocessing user input user_input = user_input.lower() user_input = user_input.translate(str.maketrans('', '', string.punctuation)) # Loading spacy model to parse and understand user input nlp = spacy.load('en_core_web_sm') doc = nlp(user_input) # Initializing nltk for Stopwords removal nltk.download('stopwords') from nltk.corpus import stopwords stopwords = stopwords.words('english') # Extracting keyword from user input key_word = [word for word in doc if word.text not in stopwords] # Generating response response = '' if key_word: # Generate a random response if keyword is recognized by chatbot response = random.choice(['That is an interesting topic.', 'I see. Tell me more.', 'I am happy to help.']) else: response = \\"Sorry, I didn't quite understand what you said.\\" return response"},{"prompt":"Write a python program to create a data structure composed of random values with a total of n elements.","completion":"import random def create_random_structure(n): structure = [] for i in range(n): structure.append(random.randint(0, n)) return structure"},{"prompt":"Write a Python script to delete all duplicate characters in a given string string = mississippi","completion":"def deleteDuplicates(string): result = \\"\\" for i in string: if i not in result: result = result + i return result print(\\"The output string is: \\", deleteDuplicates(string))"},{"prompt":"Create a recommendation system in Python that takes in an user's interests and suggests movies based on their interests. user interests: SciFi, Horror","completion":"import pandas as pd # Load data movies = pd.read_csv('dataset/movies.csv') # Create recommendations based on user interests def recommend_movies(interests): # Create a list of movies based on user interests recommended_movies = movies[movies['Genre'].isin(interests)] # Sort movies by popularity recommended_movies = recommended_movies.sort_values('Popularity', ascending=False) return recommended_movies[['Title', 'Rating', 'Genre']] # Use the function to get recommendations recommend_movies(['Sci-Fi', 'Horror'])"},{"prompt":"Write a Python script to scrape website text content","completion":"import requests from bs4 import BeautifulSoup url = \\"example.com\\" response = requests.get(url) html_response = response.content soup = BeautifulSoup(html_response, \\"html.parser\\") text_content = soup.find_all(\\"p\\") for text in text_content: print(text.text)"},{"prompt":"Write a Python program to find the longest common substring between two strings. s1 = abcdabxabcdabcdabt, s2 = abcdabyabcdabcdabz","completion":"def longest_common_substring(s1, s2): m = len(s1) n = len(s2) lengths = [[0 for x in range(n+1)] for y in range(m+1)] longest = \\"\\" for i in range(1, m+1): for j in range(1, n+1): if s1[i-1] == s2[j-1]: lengths[i][j] = lengths[i-1][j-1] + 1 if lengths[i][j] > len(longest): longest = s1[i-1-lengths[i][j]+1:i] return longest"},{"prompt":"Create a data pipeline in Python to process customer data. The pipeline should read customer data from a MySQL database and transform it to the desired format before storing it in a MongoDB database. Not applicable","completion":"import mysql.connector import pymongo import json import pandas as pd # Connect to the MySQL database mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"yourusername\\", passwd=\\"yourpassword\\", database=\\"yourdatabase\\" ) # Connect to the MongoDB database myclient = pymongo.MongoClient(\\"mongodb://localhost:27017/\\") db = myclient[\\"yourdatabase\\"] # Create a DataFrame to store the customer data df = pd.read_sql(\\"SELECT * FROM customers\\", con=mydb) # Transform the DataFrame to the desired format # and store it in a json file df_transformed = pd.DataFrame({ 'id': df['customer_id'], 'name': df['name'], 'age': df['age'] }) data = df_transformed.to_json(orient='records') # Load the json data into the MongoDB database json_data = json.loads(data) db.customers.insert_many(json_data)"},{"prompt":"Write a python program to calculate the factorial of a number given by the user.","completion":"def calculate_factorial(num): if num < 0: return 0 elif num == 0 or num == 1: return 1 else: factorial = 1 while num > 1: factorial = factorial * num num = num - 1 return factorial # get user input number = int(input(\\"Enter a number: \\")) # call the function factorial = calculate_factorial(number) # print the result print(\\"Factorial of\\", number, \\"is\\", factorial)"},{"prompt":"Design a Python program to read in a list of list of strings, eliminate duplicate entries, sort them and print out the result. [['b', 'a', 'd'], ['c', 'a', 'd'], ['a', 'f', 'g']]","completion":"def removeduplicates(list_of_string): result = [] for item in list_of_string: if item not in result: result.append(item) result.sort() return result list_of_string = [['b', 'a', 'd'], ['c', 'a', 'd'], ['a', 'f', 'g']] print(removeduplicates(list_of_string))"},{"prompt":"Create a python program which takes a sentance as the input, split it into words, and prints all the words on a new line. This is a sentence","completion":"sentence = \\"This is a sentence\\" words = sentence.split() for word in words: print(word)"},{"prompt":"Given a list of numbers in an array, use the Python slice operator to return the last five elements of the array. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] b = a[-5:] print(b) # [6, 7, 8, 9, 10]"},{"prompt":"Write a Python program that reads a text document and performs tokenization followed by partofspeech (POS) tagging. text.txt The quick brown fox jumps over the lazy dog.","completion":"import nltk def tokenize_and_tag(filename): tokens = nltk.word_tokenize(open(filename).read()) tagged_tokens = nltk.pos_tag(tokens) print(tagged_tokens) tokenize_and_tag('text.txt') # Output: [('The', 'DT'), ('quick', 'JJ'), ('brown', 'NN'), ('fox', 'NN'), ('jumps', 'VBZ'), ('over', 'IN'), ('the', 'DT'), ('lazy', 'JJ'), ('dog', 'NN'), ('.', '.')]"},{"prompt":"Translate the following sentence into Python language using Loops: Print all the numbers from 0 to 20.","completion":"for i in range(0, 21): print(i)"},{"prompt":"Write a Python program to remove all duplicate elements in a given list. given_list = [1, 2, 3, 4, 3, 2, 1]","completion":"def remove_duplicates(given_list): output = [] for num in given_list: if num not in output: output.append(num) return output"},{"prompt":"Write a Python program to automatically format a given source code in standardized way.","completion":"import ast import autopep8 # astunparse: https://docs.python.org/3/library/ast.html#ast.unparse def format_source_code(code): root = ast.parse(code) code_ast = ast.unparse(root) code_formatted = autopep8.fix_code(code_ast, options={'aggressive': 1}) return code_formatted"},{"prompt":"Write a Python program to classify the given list of words into two categories: positive and negative words.","completion":"positive_words = [\\"happy\\", \\"glad\\", \\"love\\", \\"joyful\\", \\"grateful\\"] negative_words = [\\"sad\\", \\"angry\\", \\"depressed\\", \\"hopeless\\", \\"heartbroken\\"] def classify_words(words): positive = [] negative = [] for word in words: if word in positive_words: positive.append(word) else: negative.append(word) return positive, negative"},{"prompt":"Construct a web crawler in Python to retrieve the URL of all the articles posted on a given page. URL: https://www.example.com/","completion":"\\"\\"\\" Construct a web crawler in Python to retrieve the URL of all the articles posted on a given page \\"\\"\\" import requests from bs4 import BeautifulSoup def get_urls(url): response = requests.get(url) soup = BeautifulSoup(response.text, \\"lxml\\") articles = set() for article in soup.find_all('a', attrs={'class':'article-link'}): articles.add(article['href']) return articles if __name__ == '__main__': url = 'https://www.example.com/' print(get_urls(url))"},{"prompt":"Create a list in Python from a given list of numbers. [1, 2, 4, 8, 16]","completion":"myList = [1, 2, 4, 8, 16]"},{"prompt":"Generate a Python code to count assign the occurrence of an element in a list to a dictionary.","completion":"def get_occurrence_dict(list): result_dict = {} for element in list: if element in result_dict: result_dict[element] += 1 else: result_dict[element] = 1 return result_dict"},{"prompt":"Create a function in Python to print a dictionary in a formatted way d={'Name':'Donald Trump', 'Age': 70, 'Profession': 'President'}","completion":"def print_dict(d): for key, value in d.items(): print(f\\"{key}: {value}\\") print_dict(d) # Output: Name: Donald Trump Age: 70 Profession: President"},{"prompt":"Write a Python program to classify the iris dataset. The program should have an input field for the train and test data and output a confusion matrix. Train data: SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species 6.0 3.2 4.7 1.4 Irisversicolor 5.4 3.7 1.5 0.2 Irissetosa Test data: SepalLengthCm SepalWidthCm PetalLengthCm PetalWidthCm Species 5.7 2.8 4.5 1.3 6.1 2.9 4.7 1.4","completion":"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier # Load and split the dataset iris_data = load_iris() x_train, x_test, y_train, y_test = train_test_split(iris_data.data, iris_data.target, test_size=0.2) # Train the classifier clf = RandomForestClassifier(n_estimators=100) clf.fit(x_train, y_train) # Make predictions preds = clf.predict(x_test) from sklearn.metrics import confusion_matrix # Output confusion matrix confusion_matrix(y_test, preds)"},{"prompt":"Construct a tree data structure in Python to represent a given binary search tree.","completion":"class Node(object): def __init__(self, x): self.val = x self.left = None self.right = None def construct_tree(vals): root = Node(vals[0]) for val in vals[1:]: node = Node(val) tmp_node = root while True: if node.val > tmp_node.val: if tmp_node.right is None: tmp_node.right = node break else: tmp_node = tmp_node.right else: if tmp_node.left is None: tmp_node.left = node break else: tmp_node = tmp_node.left return root"},{"prompt":"Use threading in Python to add two matrices. [[2, 3, 4], [5, 6, 7]], [[3, 4, 5], [6, 7, 8]]","completion":"import threading import numpy as np mat_1 = np.array([[2, 3, 4], [5, 6, 7]]) mat_2 = np.array([[3, 4, 5], [6, 7, 8]]) def matrix_sum(a, b): return a + b threads = [] for i in range(len(mat_1)): thread = threading.Thread(target=matrix_sum, args=(mat_1[i], mat_2[i])) threads.append(thread) thread.start() for thread in threads: thread.join() print(matrix_sum(mat_1, mat_2))"},{"prompt":"mplement a basic AI algorithm in Python to solve the 8puzzle game. The program should be able to solve any given 8puzzle in optimal time. Not Applicable","completion":"import copy def find_zero(state): for i in range(9): if state[i] == 0: return i def move_up(state): new_state = copy.copy(state) index = find_zero(state) x = index % 3 y = int(index / 3) if y == 0: return None temp = state[index - 3] new_state[index - 3] = 0 new_state[index] = temp return new_state def move_down(state): .... def move_left(state): .... def move_right(state): .... def bfs(initial_state, goal_state): .... def main(): initial_state = [7, 8, 0, 2, 3, 5, 4, 1, 6] goal_state = [0, 1, 2, 3, 4, 5, 6, 7, 8] solution = bfs(initial_state, goal_state) print(solution) main()"},{"prompt":"Create a Python program to calculate the average number of items in a list. The list should be taken as input from the user. List elements: 1, 6, 5, 7","completion":"list_elements = input('List elements: ').split() sum = 0 for num in list_elements: sum += int(num) average = sum / len(list_elements) print(f'The average number of items in the list is {average}.')"},{"prompt":"Design a polynomial class in Python that stores the coefficients of an nth degree polynomial function.","completion":"class Polynomial: def __init__(self, coefficients): self.coefficients = coefficients def __call__(self, x): result = 0 for i, c in enumerate(self.coefficients): result += c * x**i return result"},{"prompt":"mplement a function in Python that given an array of integers, returns the largest number in the array. [1, 2, 4, 8, 3, 7]","completion":"def get_largest_number(arr): max_val = arr[0] for n in arr: if n > max_val: max_val = n return max_val arr = [1, 2, -4, 8, 3, 7] ans = get_largest_number(arr) print(ans) # Output 8"},{"prompt":"Write an algorithm in Python to merge two sorted lists. list_1 = [3, 5, 7, 11] list_2 = [2, 4, 6, 8]","completion":"def merge_list(list_1, list_2): merged_list =[] while list_1 and list_2: if list_1[0] < list_2[0]: merged_list.append(list_1.pop(0)) else: merged_list.append(list_2.pop(0)) merged_list.extend(list_1 if list_1 else list_2) return merged_list"},{"prompt":"mplement a function in Python which takes an array of integers and an integer target and returns whether the given target exists in the array or not. [1, 4, 7, 11], 4","completion":"def contains_target(numbers, target): return target in numbers"},{"prompt":"Create a text summarization algorithm in Python. Not applicable","completion":"import nltk nltk.download('punkt') import re from collections import defaultdict def summarize_text(text, factor=0.2): text = re.sub(r's+', ' ', text) sentences = nltk.sent_tokenize(text) word_counts = defaultdict(int) for sentence in sentences: for word in nltk.word_tokenize(sentence.lower()): word_counts[word] += 1 top_words = sorted(word_counts, key=word_counts.get, reverse=True)[:int(len(word_counts.keys()) * factor)] summaries = [] for sentence in sentences: summary = [] for word in nltk.word_tokenize(sentence.lower()): if word in top_words: summary.append(word) summaries.append(' '.join(summary)) return '. '.join(summaries) summarize_text('This is a test sentence. This is another example sentence. Test sentence number 3.') // Output: This test sentence another example number"},{"prompt":"Generate a set of Python classes for a game application. The classes should include a main Character class with fields for name, health, and inventory, and a Monster class with fields for name, health, and type (e.g. dragon, ogre, goblin). Not applicable","completion":"class Character: def __init__(self, name, health=100): self.name = name self.health = health self.inventory = [] def add_item(self, item): self.inventory.append(item) def remove_item(self, item): self.inventory.remove(item) class Monster: def __init__(self, name, health=100, type=\\"Monster\\"): self.name = name self.health = health self.type = type def attack(self, character): pass"},{"prompt":"Create a class in Python to store employee information such as name, address, age and salary.","completion":"class Employee: def __init__(self, name, address, age, salary): self.name = name self.address = address self.age = age self.salary = salary def get_info(self): return self.name, self.address, self.age, self.salary"},{"prompt":"Design a Python program to generate a set of Fibonacci numbers up to a given value. n = 10","completion":"def fibonacci(n): fib = [] a, b = 0, 1 while a < n: fib.append(a) a, b = b, a + b return fib n = 10 print(fibonacci(n))"},{"prompt":"Create a Python class for a binary tree. Not applicable","completion":"class BinaryTree: def __init__(self, root): self.key = root self.left_child = None self.right_child = None def insert_left(self, new_node): if self.left_child == None: self.left_child = BinaryTree(new_node) else: t = BinaryTree(new_node) t.left_child = self.left_child self.left_child = t def insert_right(self, new_node): if self.right_child == None: self.right_child = BinaryTree(new_node) else: t = BinaryTree(new_node) t.right_child = self.right_child self.right_child = t def get_right_child(self): return self.right_child def get_left_child(self): return self.left_child def set_root_val(self, obj): self.key = obj def get_root_val(self): return self.key"},{"prompt":"Use a basic linear regression model in Python to predict the price of a house based on its size and number of rooms. Example data: Size: 500, Rooms: 4","completion":"import pandas as pd from sklearn.linear_model import LinearRegression # Create data = {'Size': [500], 'Rooms': [4]} df = pd.DataFrame(data) # Train X = df[['Size','Rooms']] Y = df['Price'] reg = LinearRegression().fit(X, Y) # Predict reg.predict([[500,4]]) # Predicted price: 1715.667543"},{"prompt":"Design and implement a function in Python to calculate the standard deviation of values in an array. X = [1,2,3,4,5,6]","completion":"def calculate_standard_deviation(X): # Calculate the mean of the list mean = 0 for x in X: mean += x mean = mean/len(X) # Calculate the variance of the list variance = 0 for x in X: variance += (x - mean)**2 variance = variance / len(X) # Calculate the standard deviation std_dev = variance**0.5 return std_dev if __name__ == '__main__': X = [1,2,3,4,5,6] print(calculate_standard_deviation(X))"},{"prompt":"Develop a Django application for a blog platform. Not applicable","completion":"# In your project directory django-admin startproject blog # In the blog directory python manage.py startapp blogapp # In blog/settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'blogapp.apps.BlogappConfig', # Add this line to register your app ] # In blogapp/models.py from django.db import models class Post(models.Model): title = models.CharField(max_length=100) body = models.TextField() def __str__(self): return self.title # In blogapp/admin.py from django.contrib import admin from .models import Post admin.site.register(Post) # In blogapp/urls.py from django.urls import path from . import views urlpatterns = [ path('', views.all_posts, name=\\"all_posts\\"), ] # In blog/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('', include('blogapp.urls')), # Add this line ]"},{"prompt":"Consume a REST API and return the response in Python.","completion":"import requests #specify the base URL of the API base_url = 'http://example.com/api/' #make the request and receive the response response = requests.get(base_url) #parse the response JSON data = response.json()"},{"prompt":"Create an objectoriented Python program to convert temperatures from Celsius to Fahrenheit and viceversa. Not applicable","completion":"class Temperature: def __init__(self, value): self.value = value def to_fahrenheit(self): return (self.value * 9/5) + 32 def to_celsius(self): return (self.value - 32) * 5/9 temp = Temperature(212) print(temp.to_celsius()) print(temp.to_fahrenheit())"},{"prompt":"Construct a function in Python that sorts a list of tuples by the second element of the tuple in ascending order. tuples = [(6, 2), (5, 4), (7, 3), (2, 8), (1, 5)]","completion":"def sort_tuples(tuples): return sorted(tuples, key=lambda x: x[1]) print(sort_tuples(tuples)) # Output: [(6, 2), (7, 3), (1, 5), (5, 4), (2, 8)]"},{"prompt":"Create a python program to take as input a list of strings and concatenate them into a single string. list = [alpha, beta, gamma]","completion":"def concatenate_list(list): result = \\"\\" for item in list: result += item return result"},{"prompt":"Create a Python program that takes two strings as input and finds if they are anagrams. listen, silent","completion":"def is_anagram(str1, str2): if(len(str1) != len(str2)): return False str1 = sorted(str1) str2 = sorted(str2) for i in range(0, len(str1)): if(str1[i] != str2[i]): return False return True str1 = \\"listen\\" str2 = \\"silent\\" if(is_anagram(str1, str2)): print(\\"The strings are anagrams of each other\\") else: print(\\"The strings are not anagrams of each other\\")"},{"prompt":"This code is a console application that allows searching for train stations and getting departure times. To use this application, you can run it in a Python environment and call the functions defined in the code. The main functions are do_stations, do_departures, and do_roadmap. The do_stations function searches for train stations based on a given pattern. The do_departures function lists all departures for a given station. The do_roadmap function displays the roadmap to travel from a departure to an arrival station. To use the do_roadmap function, you can pass the departure and arrival stations as arguments and optionally specify the departure and arrival times using the departuretime and arrivaltime options.","completion":"# -*- coding: utf-8 -*- # Copyright(C) 2010-2011 Romain Bignon, Julien Hébert # # This file is part of weboob. # # weboob is free software: you can redistribute it and/or modify # it under the terms of the GNU Affero General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # weboob is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU Affero General Public License for more details. # # You should have received a copy of the GNU Affero General Public License # along with weboob. If not, see <http://www.gnu.org/licenses/>. import sys from datetime import datetime import logging from weboob.capabilities.travel import ICapTravel, RoadmapFilters from weboob.tools.application.repl import ReplApplication, defaultcount __all__ = ['Traveloob'] class Traveloob(ReplApplication): APPNAME = 'traveloob' VERSION = '0.h' COPYRIGHT = 'Copyright(C) 2010-2011 Romain Bignon' DESCRIPTION = \\"Console application allowing to search for train stations and get departure times.\\" SHORT_DESCRIPTION = \\"search for train stations and departures\\" CAPS = ICapTravel DEFAULT_FORMATTER = 'table' def add_application_options(self, group): group.add_option('--departure-time') group.add_option('--arrival-time') @defaultcount(10) def do_stations(self, pattern): \\"\\"\\" stations PATTERN Search stations. \\"\\"\\" for backend, station in self.do('iter_station_search', pattern): self.format(station) @defaultcount(10) def do_departures(self, line): \\"\\"\\" departures STATION [ARRIVAL] List all departures for a given station. \\"\\"\\" station, arrival = self.parse_command_args(line, 2, 1) station_id, backend_name = self.parse_id(station) if arrival: arrival_id, backend_name2 = self.parse_id(arrival) if backend_name and backend_name2 and backend_name != backend_name2: logging.error('Departure and arrival aren't on the same backend') return 1 else: arrival_id = backend_name2 = None if backend_name: backends = [backend_name] elif backend_name2: backends = [backend_name2] else: backends = None for backend, departure in self.do('iter_station_departures', station_id, arrival_id, backends=backends): self.format(departure) def do_roadmap(self, line): \\"\\"\\" roadmap DEPARTURE ARRIVAL Display the roadmap to travel from DEPARTURE to ARRIVAL. Command-line parameters: --departure-time TIME requested departure time --arrival-time TIME requested arrival time TIME might be in form \\"yyyy-mm-dd HH:MM\\" or \\"HH:MM\\". Example: > roadmap Puteaux Aulnay-sous-Bois --arrival-time 22:00 \\"\\"\\" departure, arrival = self.parse_command_args(line, 2, 2) filters = RoadmapFilters() try: filters.departure_time = self.parse_datetime(self.options.departure_time) filters.arrival_time = self.parse_datetime(self.options.arrival_time) except ValueError as e: print >>sys.stderr, 'Invalid datetime value: %s' % e print >>sys.stderr, 'Please enter a datetime in form \\"yyyy-mm-dd HH:MM\\" or \\"HH:MM\\".' return 1 for backend, route in self.do('iter_roadmap', departure, arrival, filters): self.format(route) def parse_datetime(self, text): if text is None: return None try: date = datetime.strptime(text, '%Y-%m-%d %H:%M') except ValueError: try: date = datetime.strptime(text, '%H:%M') except ValueError: raise ValueError(text) date = datetime.now().replace(hour=date.hour, minute=date.minute) return date"},{"prompt":"Can you create a Python program to get the largest element from a list? myList = [13, 7, 5, 21, 101]","completion":"def largestElement(myList): return max(myList)"},{"prompt":"Design a Python program to build a classifier that can predict the gender of a given name. The names Amy, Booker, Charles, and Daisy.","completion":"import nltk # Training data names = [(\\"Amy\\", \\"female\\"), (\\"Booker\\", \\"male\\"), (\\"Charles\\", \\"male\\"), (\\"Daisy\\", \\"female\\")] # Feature extraction def gender_features(name): features = {} features[\\"first_letter\\"] = name[0].lower() features[\\"last_letter\\"] = name[-1].lower() return features # Feature set feature_set = [(gender_features(name), gender) for (name, gender) in names] # Classifier classifier = nltk.NaiveBayesClassifier.train(feature_set) # Test print(classifier.classify(gender_features('Amy'))) # female print(classifier.classify(gender_features('Booker'))) # male print(classifier.classify(gender_features('Charles'))) # male print(classifier.classify(gender_features('Daisy'))) # female"},{"prompt":"Develop a Python script to find the number of vowels and consonants in a given string.","completion":"def findVowelsConsonants(string): # Initializing vowels and consonants count to 0 vowels_count = 0 consonants_count = 0 # Iterate through the string and calculate the count of vowels and consonants for char in string: if (char >= 'a' and char <= 'z'): if char in 'aeiou': vowels_count += 1 else: consonants_count += 1 return (vowels_count, consonants_count)"},{"prompt":"Develop a function to replicate strings in Python.","completion":"def replicate_string(string, n): \\"\\"\\"This function takes in a string and an integer value n, and returns a string with n replications of the input string. \\"\\"\\" return string * n"},{"prompt":"Write Python code to create an array of 10 numbers with random values between 1 and 100.","completion":"import random arr = [random.randint(1, 100) for _ in range(10)]"},{"prompt":"Write a function in Python to gather data from a web page and save it in CSV format.","completion":"\\"\\"\\" Write a function in Python to gather data from a web page and save it in CSV format. \\"\\"\\" import requests import csv def get_data_and_save_as_csv(url): response = requests.get(url) data = response.json() with open('output.csv', 'w', newline = '') as csv_file: writer = csv.writer(csv_file) writer.writerows([data[key] for key in data.keys()]) if __name__ == '__main__': url = input(\\"Enter URL:\\") get_data_and_save_as_csv(url)"},{"prompt":"mplement quick sort in Python.","completion":"def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right)"},{"prompt":"Write a Python program to generate random passwords based on user input. The program should take the user input as the length of the password, number of special characters to include, and the list of available characters and generate a random password. length= 10, num_special_char = 2, allowed_chars= abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+*_","completion":"import random def generate_password(length, num_special_char, allowed_chars): password = '' for i in range(length): password += random.choice(allowed_chars) for i in range(num_special_char): password += random.choice('!@#%^&*') return ''.join(random.sample(password, len(password))) print(generate_password(length, num_special_char, allowed_chars))"},{"prompt":"Using the input provided, write a Python program to print the sum of the numbers in both lists. list1 = [7, 4, 5] list2 = [8, 10, 4]","completion":"list3 = list1 + list2 total = 0 for num in list3: total += num print(total) # output: 29"},{"prompt":"Create an algorithm in Python to determine all pairs of negative numbers in an array. [2, 1, 0, 1, 2]","completion":"def findNegativePairs(arr): results = [] for i in range(0, len(arr)): for j in range(i + 1, len(arr)): if arr[i] < 0 and arr[j] < 0: results.append((arr[i], arr[j])) return results print(findNegativePairs([-2, -1, 0, 1, 2]))"},{"prompt":"Create a datastructured python library that stores products.","completion":"class Product: def __init__(self, name, price): self.name = name self.price = price class Products: def __init__(self): self.products = [] def add_product(self, product): self.products.append(product) def get_product(self, name): for product in self.products: if product.name == name: return product return None"},{"prompt":"Construct an algorithm in Python to find the longest substring in a string which does not have any repeating characters. string = 'abcaac'","completion":"def findLongestSubstring(string): # Initialize the result max_length = 0 # Initialize substrings curr = '' for char in string: if char not in curr: curr += char max_length = max(max_length, len(curr)) else: curr = char return max_length string = 'abcaac' print(findLongestSubstring(string))"},{"prompt":"Develop a program in Python for converting a base 10 number to binary. 17","completion":"def decimalToBinary(n): binary = 0 power = 1 while (n != 0): last_bit = n % 2 binary = binary + last_bit * power n = n // 2 power = power * 10 return binary n = 17 print('Binary Representation of', n, 'is', decimalToBinary(n))"},{"prompt":"Create a Python program to output the Fibonacci sequence until the value is greater than 2000.","completion":"def fibonacciUntil2000(): f1 = 0 f2 = 1 print(f1) print(f2) while (f1 + f2) <= 2000: f3 = f1 + f2 f1 = f2 f2 = f3 print(f3) fibonacciUntil2000()"},{"prompt":"Develop a Python function to calculate mean, median and mode of a dataset. [1, 2, 2, 3, 5, 8, 10]","completion":"def calculateMeanMedianMode(lst): lst.sort() length = len(lst) mean = sum(lst) / length if length % 2 == 0: idx1 = (length / 2) - 1 idx2 = length / 2 median = (lst[int(idx1)] + lst[int(idx2)]) / 2 else: median = lst[int(length / 2)] count = 0 max_occurance = 0 for i in range(length): if lst[i] == lst[i + 1]: count += 1 if count > max_occurance: max_occurance = count mode = lst[i] else: count = 0 return mean, median, mode mean, median, mode = calculateMeanMedianMode([1, 2, 2, 3, 5, 8, 10]) print(\\"Mean: \\", mean) print(\\"Median: \\", median) print(\\"Mode: \\", mode)"},{"prompt":"Create a Python function to parse an XML document and extract all the <tag> elements. An XML file","completion":"import xml.etree.ElementTree as ET def extract_tags(xml): root = ET.fromstring(xml) tags = root.findall('tag') # Create list to store tag elements tag_list = [] for tag in tags: tag_list.append(tag.text) # Return list of tags return tag_list"},{"prompt":"Write a Python program to create a join of two given strings being separated by a given separator. First string: Apples Second string: Oranges Separator: and","completion":"a = \\"Apples\\" b = \\"Oranges\\" #joining the strings, using the separator joinedString = a +\\" \\"+ \\"and\\" +\\" \\"+ b # print the joined string print(joinedString)"},{"prompt":"Create a function in Python which takes 3 arrays as input, and returns the arrays merged together into a single array. [1, 2, 3], [4, 5, 6], [7, 8, 9]","completion":"def merge_arrays(arr1, arr2, arr3): combined_arr = arr1 + arr2 + arr3 return combined_arr result = merge_arrays([1, 2, 3], [4, 5, 6], [7, 8, 9]) print(result)"},{"prompt":"Create an array of length 5 in Python and print the contents.","completion":"myArray = [1,2,3,4,5] print(myArray)"},{"prompt":"Generate a Python function that takes in a string x and returns a substring of x that is the longest palindrome. x = 'abacdbcdbafeaccba'","completion":"def longest_palindrome(x): longest = '' for i in range(len(x)): j = i + len(longest) + 1 while j <= len(x): substring = x[i:j] if substring == substring[::-1] and len(substring) > len(longest): longest = substring j = j + 1 return longest"},{"prompt":"Design an artificial neural network in Python to recognize handwritten digits A dataset of 2000 images of handwritten dig","completion":"# Import libraries import numpy as np import matplotlib.pyplot as plt import tensorflow as tf from tensorflow.keras.datasets import mnist # Load dataset (X_train, y_train), (X_test, y_test) = mnist.load_data() # Pre-process the data X_train = X_train.astype(np.float32).reshape(-1, 28*28) / 255.0 X_test = X_test.astype(np.float32).reshape(-1, 28*28) / 255.0 y_train = y_train.astype(np.int32) y_test = y_test.astype(np.int32) X_valid, X_train = X_train[:5000], X_train[5000:] y_valid, y_train = y_train[:5000], y_train[5000:] # Build the model model = tf.keras.models.Sequential() model.add(tf.keras.layers.Dense(256, activation='relu', input_shape=(784,))) model.add(tf.keras.layers.Dense(128, activation='relu')) model.add(tf.keras.layers.Dense(10, activation='softmax')) # Compile the model model.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metrics=['accuracy']) # Train the model model.fit(X_train, y_train, epochs=30, validation_data=(X_valid, y_valid)) # Evaluate the model model.evaluate(X_test, y_test)"},{"prompt":"Create a Python web scraper to scrape a list of business email addresses from a web page. Website: www.example.com","completion":"import requests from bs4 import BeautifulSoup # make a request to the website r = requests.get('www.example.com') # parse the content soup = BeautifulSoup(r.content, 'html.parser') # find all elements with the class \\"business-email\\" emails = soup.find_all(class_=\\"business-email\\") # extract the email from each element emails = [e.text for e in emails]"},{"prompt":"w would you design a Python program that checks if a number is divisible by three? 45","completion":"def is_divisible(n): if n % 3 == 0: return True else: return False num = 45 check_divisible = is_divisible(num) if check_divisible: print(\\"Number is divisible by three.\\") else: print(\\"Number is not divisible by three.\\")"},{"prompt":"Write Python code to implement the Quick Sort algorithm. [10, 7, 8, 9, 1, 5]","completion":"def partition(arr,p,r): x = arr[r] i = p - 1 for j in range(p, r): if arr[j] <= x: i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[r] = arr[r], arr[i+1] return i + 1 def quick_sort(arr,p,r): if p < r: q = partition(arr,p,r) quick_sort(arr,p,q-1) quick_sort(arr,q+1,r)"},{"prompt":"Can you provide a Python script to automatically generate a 5 character long random alphanumeric string?","completion":"import string import random def generate_random_string(length=5): letters = string.ascii_letters + string.digits return ''.join(random.choice(letters) for _ in range(length))"},{"prompt":"Generate a definition for a neural network layer using the Keras framework in Python. Not applicable","completion":"from keras.layers import Dense # Define a Layer model.add(Dense(units=64, activation='relu', input_dim=100))"},{"prompt":"Create a data extraction program in Python code to extract information from an online database","completion":"import requests import pandas as pd def extract_data(url,query_parameters): '''Function to extract data from the given url with the given query parameters''' # Execute the query response = requests.get(url,params=query_parameters) # Check the status code of the response if(response.status_code==200): # If the response is OK, Convert the response to pandas dataframe df = pd.DataFrame(response.json()) return df"},{"prompt":"Generate a Python program to split a given string into uppercase and lowercase letters. string=GPTIsForever","completion":"def case_split(string): string_list =list(string) upper_list = [] lower_list = [] for i in string_list: if i.isupper(): upper_list.append(i) else: lower_list.append(i) return ''.join(upper_list), ''.join(lower_list)"},{"prompt":"Write a Python function to multiple two matrices. Matrix 1: [[1, 2], [3, 4]] Matrix 2: [[5, 6], [7, 8]]","completion":"def multiply_matrices(m1, m2): # create a 3x3 matrix to hold the result result = [[0, 0], [0, 0]] for i in range(len(m1)): for j in range(len(m2[0])): for k in range(len(m2)): result[i][j] += m1[i][k] * m2[k][j] return result result = multiply_matrices([[1, 2], [3, 4]], [[5, 6], [7, 8]]) print(result)"},{"prompt":"Create a Python program that takes a list of integers as an input and returns a dictionary with keys being the numbers and values being the frequency of those numbers in the list. [1, 3, 5, 6, 1, 2, 5, 3]","completion":"def counting(nums): result={} for num in nums: if num in result: result[num]+=1 else: result[num]=1 return result nums=[1, 3, 5, 6, 1, 2, 5, 3] result=counting(nums) print(result) # Output: {1: 2, 3: 2, 5: 2, 6: 1, 2: 1}"},{"prompt":"Write a code snippet in Python to print a table of the perfect squares ranging from 1 to 100.","completion":"for i in range(1,101): square = i * i print(f\\"{i}:{square}\\")"},{"prompt":"Convert a Python program that uses multiple functions to a single function using only a single recursive call. def main(): x = 1 def inner(x): x += 1 print(x) inner(x) main()","completion":"def main(x): if x == 1: print(2) else: main(x + 1) main(1)"},{"prompt":"Create a Python program to classify data points according to two criteria Score and Level. Score can be Low, Medium, or High, and Level can be beginner, intermediate, or advanced. The program should be able to classify data points into three categories Low/Beginner, Medium/Intermediate, and High/Advanced. [[18, 'Beginner'], [32, 'Intermediate'], [40, 'Advanced'], [12, 'Beginner'], [20, 'Intermediate']]","completion":"data = [[18, 'Beginner'], [32, 'Intermediate'], [40, 'Advanced'], [12, 'Beginner'], [20, 'Intermediate']] classifier = { 'Low/Beginner': [], 'Medium/Intermediate': [], 'High/Advanced': [] } def classify(data): for point in data: score = point[0] level = point[1] if score < 20 and level == 'Beginner': classifier['Low/Beginner'].append(point) elif score >= 20 and score < 40 and level == 'Intermediate': classifier['Medium/Intermediate'].append(point) elif score >= 40 and level == 'Advanced': classifier['High/Advanced'].append(point) classify(data) print(classifier)"},{"prompt":"Create a program in Python to print all elements of a given set. {10, 20, 30}","completion":"my_set = {10, 20, 30} for i in my_set: print(i)"},{"prompt":"Develop a system in Python to allow users to rate sports teams using a scale from 1 to 5.","completion":"# import required libraries import pandas as pd # define the rating scale rating_scale = [1,2,3,4,5] # create an empty DataFrame rating_df = pd.DataFrame(columns=['Team', 'Rating']) # function to take in user input and add it to the DataFrame def add_rating(team, rating): rating_df = rating_df.append({'Team': team, 'Rating': rating}, ignore_index=True) # function to allow a user to rate a team def rate_team(): team = input('Which team would you like to rate? ') rating = input('Please enter a rating between 1 and 5: ') if rating not in rating_scale: print('Error: Rating must be between 1 and 5!') rate_team() else: add_rating(team, rating) print('Rating added successfully!') # call the rate_team() function rate_team()"},{"prompt":"mplement a Heap Sort algorithm in Python. [9, 8, 7, 6, 5, 4, 3, 2, 1]","completion":"def heapify(arr, n, i): largest = i # Initialize largest as root l = 2 * i + 1 # left = 2*i + 1 r = 2 * i + 2 # right = 2*i + 2 # See if left child of root exists and is # greater than root if l < n and arr[i] < arr[l]: largest = l # See if right child of root exists and is # greater than root if r < n and arr[largest] < arr[r]: largest = r # Change root, if needed if largest != i: arr[i],arr[largest] = arr[largest],arr[i] # swap # Heapify the root. heapify(arr, n, largest) def heapSort(arr): n = len(arr) # Build a maxheap. for i in range(n, -1, -1): heapify(arr, n, i) # One by one extract elements for i in range(n-1, 0, -1): arr[i], arr[0] = arr[0], arr[i] # swap heapify(arr, i, 0) # Driver code to test above arr = [9, 8, 7, 6, 5, 4, 3, 2, 1] heapSort(arr) n = len(arr) print (\\"Sorted array is\\") for i in range(n): print (\\"%d\\" %arr[i]),"},{"prompt":"Write a Python program to classify a given array of numbers into even number and odd number arrays. my_array = [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"# Create empty lists to store odd and even elements odd_elements = [] even_elements = [] # Iterate through the array for element in my_array: # Check if the element is even or odd if element % 2 == 0: even_elements.append(element) else: odd_elements.append(element) print(odd_elements) print(even_elements)"},{"prompt":"Create a python program that converts a number to its Roman Numeral equivalent. 10","completion":"def int_to_Roman(number): num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000] sym = [\\"I\\", \\"IV\\", \\"V\\", \\"IX\\", \\"X\\", \\"XL\\", \\"L\\", \\"XC\\", \\"C\\", \\"CD\\", \\"D\\", \\"CM\\", \\"M\\"] i = 12 while number: div = number // num[i] number %= num[i] while div: print(sym[i], end = \\"\\") div -= 1 i -= 1 # Driver Code if __name__ == \\"__main__\\": number = 10 int_to_Roman(number) # Output: X"},{"prompt":"Design a Python program to optimize search accuracy by applying a relevance metric to the query. coronaviru","completion":"from collections import defaultdict def calculate_relevance_score(query_terms): relevance_score = defaultdict(int) # Pre-process the query and extract each term terms = query_terms.split() # Calculate relevance scores for each term for term in terms: relevance_score[term] = len(term) # Simple example, can be replaced with a better relevance score return relevance_score def search(query_terms): relevance_score = calculate_relevance_score(query_terms) # Perform the search and sort the results based on the relevance score search_results = sorted(search_results, key=lambda r: relevance_score[r], reverse=True) # Return the results return search_results"},{"prompt":"Create a Python program to scrape a website and extract the text from the paragraphs in the page. <html> <head> <title>Test File</title> </head> <body> <h1>This is the title</h1> <p> This is the text of the first paragraph. </p> <p> This is the text of the second paragraph. </p> </body> </html>","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') for p in soup.find_all('p'): print(p.text)"},{"prompt":"Write a Python program to apply a kNN algorithm for classification tasks.","completion":"import numpy as np from sklearn.neighbors import KNeighborsClassifier def knn_classify(X, y, k): model = KNeighborsClassifier(n_neighbors=k, weights='distance') model.fit(X, y) return model"},{"prompt":"Write a Python code to prompt the user for a word and then search for it in a dictionary","completion":"word = input(\\"Please enter a word: \\") dictionary = [\\"apple\\", \\"banana\\", \\"orange\\", \\"grapes\\"] if word in dictionary: print(\\"The word is found in the dictionary.\\") else: print(\\"The word is not found in the dictionary.\\")"},{"prompt":"Create a Python function that searches a given list of strings for a match. The function should return true if any of the strings match, and false if none of the strings match. list = ['Hello', 'World', '!']","completion":"def search_list(lst, s): for item in lst: if item == s: return True return False"},{"prompt":"mplement a search algorithm in Python that searches for a given element in a given array. [3, 5, 7, 8, 9], 5","completion":"def search_array(array, element): # loop through array for i in range(len(array)): # compare array element and search element if array[i] == element: # return index if elements are equal return i # return -1 if search element is not found return -1 array = [3, 5, 7, 8, 9] element = 5 index = search_array(array, element) if index != -1: print(\\"Element {} found at index {}\\".format(element, index)) else: print(\\"Element not found.\\")"},{"prompt":"Create a function in Python that takes a list of strings as parameter and outputs a new list with each string sorted in alphabetical order [‘apple’, ‘mango’, ‘orange’]","completion":"def sort_list(a_list): ''' Sort the given list of strings in alphabetical order Args: a_list (list): List of strings Returns: list: Returns the sorted list in alphabetical order ''' return sorted(a_list)"},{"prompt":"Edit the following Python program so that it prints out the square root of a given number. number = 8","completion":"import math number = 8 # compute the square root of the given number square_root = math.sqrt(number) # print the square root print(f\\"The square root of {number} is {square_root}\\")"},{"prompt":"Optimize a Python program to count occurrences of each letter in a given string. This is a sample string","completion":"from collections import Counter def count_letters(string): return Counter(string) print(count_letters(\\"This is a sample string\\"))"},{"prompt":"Generate a correct Python program to take two lists as input and combine them into a 3rd list. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"def combine_lists(list1, list2): output = list1 + list2 return output combined_list = combine_lists(list1, list2) print(combined_list)"},{"prompt":"Write a Python script for finding the maximum and minimum value in a given list. [1,5,6,8,7]","completion":"list = [1,5,6,8,7] min_val = min(list) max_val = max(list) print(\\"Minimum value in list is: %d\\"%min_val) print(\\"Maximum value in list is: %d\\"%max_val)"},{"prompt":"Design a function in Python to print a n x n matrix in spiral order. n = 4","completion":"def print_spiral_matrix(n): matrix = [[0] * n for i in range(n)] i = 0 j = 0 top = 0 left = 0 right = n - 1 bottom = n - 1 direction = 0 while top <= bottom and left <= right: if direction == 0: for j in range(left, right + 1): matrix[top][j] = i i += 1 top += 1 direction = 1 elif direction == 1: for i in range(top, bottom + 1): matrix[i][right] = i i += 1 right -= 1 direction = 2 elif direction == 2: for j in range(right, left - 1, -1): matrix[bottom][j] = i i += 1 bottom -= 1 direction = 3 elif direction == 3: for i in range(bottom, top - 1, -1): matrix[i][left] = i i += 1 left += 1 direction = 0 for i in range(n): print(matrix[i])"},{"prompt":"Generate an XOR function in Python that takes two integers as parameters and returns a boolean.","completion":"def xor(a, b): return (a or b) and not (a and b)"},{"prompt":"mplement gradient descent in a Python program.","completion":"# Define function to compute the gradient, given a set of weights def compute_gradient(weights): # Compute the gradient with respect to each weight in the weight vector gradients = [] for w in weights: gradients.append(2 * w) # Return the gradient vector return gradients # Define a function to compute the cost, given a set of weights def compute_cost(weights): # Compute the cost with given weights cost = 0 for w in weights: cost += w**2 # Return the cost return cost # Gradient descent loop weights = np.array([1, 2, 3]) # Initialize weights learning_rate = 0.01 # Set learning rate for i in range(1000): # Iterate for 1000 steps gradients = compute_gradient(weights) # Compute gradients weights -= learning_rate * np.array(gradients) # Do gradient descent step cost = compute_cost(weights) # Compute cost # Print cost every 100 steps if i % 100 == 0: print(\\"Cost at iteration %d: %f\\" % (i, cost)) # Print the final weights print(weights)"},{"prompt":"Create a game of ‘Rock, Paper, Scissor’ in Python.","completion":"import random options = ['Rock', 'Paper', 'Scissor'] while True: # Player 1 turn print('What would you like to choose?n Rock, Paper, or Scissor?') p1_choice = input() # Player 2 turn p2_choice = random.choice(options) # Game rules if p1_choice == p2_choice: print('Its a tie!') elif (p1_choice == 'Rock' and p2_choice == 'Paper') or (p1_choice == 'Paper' and p2_choice == 'Scissor') or (p1_choice == 'Scissor' and p2_choice == 'Rock'): print('Player 2 wins') else: print('Player 1 wins') quit_game = input('Would you like to play again?(yes/no)n') if quit_game.lower() == 'no': break"},{"prompt":"Create an ML model in Python for predicting house prices in Seattle. Not applicable","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt # Load the data data = pd.read_csv('seattle_house_prices.csv') # Select feature and target columns X = data.iloc[:,:-1] y = data.iloc[:,-1] # Split data into training and test sets from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Train the model from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X_train, y_train) # Make predictions on the test data y_pred = regressor.predict(X_test) # Evaluate the model from sklearn.metrics import r2_score r2_score(y_test, y_pred)"},{"prompt":"Create a Python program for splitting a given string by every nth character. String = Hello World n = 3","completion":"#Function for splitting a given string by every nth character def splitStringByN(string, n): res = [string[i:i+n] for i in range(0, len(string), n)] return res # Driver code string = \\"Hello World!\\" n = 3 splitString = splitStringByN(string, n) print(splitString)"},{"prompt":"Modify the following Python code to make it faster by using an appropriate data structure. numbers = [1, 2, 3, 4, 5] total = 0 for i in range(len(numbers)): total = total + numbers[i]","completion":"numbers = [1, 2, 3, 4, 5] total = 0 for num in numbers: total += num"},{"prompt":"Create a Python script which takes a keyword as an input and searches wikipedia for articles related to the keyword.","completion":"import wikipedia def search_wikipedia(keyword): results = wikipedia.search(keyword) for result in results: print(wikipedia.summary(result, sentences=2)) search_wikipedia(\\"machine learning\\")"},{"prompt":"Generate a Python program to print a numbers pyramid of size n, with the first line of the pyramid containing n consecutive numbers. 10","completion":"n = int(input()) for i in range(1, n + 1): for j in range(1, i + 1): print(j, end=\\"\\") print(\\"\\") for i in range(n - 1, 0, -1): for j in range(1, i + 1): print(j, end=\\"\\") print(\\"\\")"},{"prompt":"Create a Python class that provides an interface for a Stack data structure. Not applicable","completion":"class Stack: def __init__(self): self.stack = [] def push(self, item): self.stack.append(item) def pop(self): if self.stack: return self.stack.pop() else: return None def is_empty(self): return len(self.stack) == 0"},{"prompt":"Write a Python program that will replace all the numbers greater than 5 in an array with 0. arr = [1, 4, 6, 7, 8, 9]","completion":"def replace_numbers(arr): for i, num in enumerate(arr): if num > 5: arr[i] = 0 replace_numbers(arr) print(arr) # [1, 4, 0, 0, 0, 0]"},{"prompt":"Write a Python function that creates a JSON response with fields for score and data. The data field should contain a message that varies depending on the score value. If the score is 0, the message should state Try again. If the score is 1, the message should state Well done. score = 0","completion":"def create_response(score): if score == 0: message = \\"Try again\\" elif score == 1: message = \\"Well done\\" else: message = \\"\\" return {\\"score\\": score, \\"message\\": message}"},{"prompt":"Write a Python function to generate a matrix filled with random numbers.","completion":"def random_matrix(m, n): mat = [[random.randint(0, 100) for j in range(n)] for i in range(m)] return mat"},{"prompt":"Develop a Python program to find the nth number in the Fibonacci sequence.","completion":"def fibonacci(n): a = 0 b = 1 if n == 0: return a elif n == 1: return b else: for i in range(2, n+1): c = a + b a = b b = c return b n = 15 print(\\"The {0}th number in the Fibonacci sequence is {1}\\".format(n, fibonacci(n)))"},{"prompt":"Create a unique list of items from a given list in Python. given_list = [2, 2, 4, 5, 5, 6, 8, 8]","completion":"# Unique list unq_list = list(set(given_list)) #Print unique list print(unq_list)"},{"prompt":"Refactor a Python program that prints a sports leaderboard to improve speed and accuracy. Example Python program: scores = [12, 14, 16, 18, 20] names = [Ann, Bob, Carol, Dave, Ella] for i in range(len(scores)): print(f{i+1}. {names[i]} {scores[i]} points)","completion":"scores = [12, 14, 16, 18, 20] names = [\\"Ann\\", \\"Bob\\", \\"Carol\\", \\"Dave\\", \\"Ella\\"] # create a dictionary with name-score pairs leaderboard = {names[i]:scores[i] for i in range(len(scores))} # sort the leaderboard by score sorted_leaderboard = sorted(leaderboard.items(), key=lambda x: x[1], reverse=True) # print the sorted leaderboard for i, (name, score) in enumerate(sorted_leaderboard): print(f\\"{i+1}. {name} - {score} points\\")"},{"prompt":"Write code to determine the type of a given variable in Python.","completion":"def get_type(var): return type(var).__name__"},{"prompt":"Using the given input, write a Python program that prints the maximum number from the list. [1, 5, 8, 3, 10]","completion":"mylist = [1, 5, 8, 3, 10] print(max(mylist))"},{"prompt":"Using the sample data, convert the provided string into a dictionary in Python. Sample Data: Name: John Doe; Age: 23; Course: Data Science","completion":"sample_data = \\"Name: John Doe; Age: 23; Course: Data Science\\" # Split the string by the \\";\\" character data_items = sample_data.split(';') # Strip any extra whitespace and split by the \\":\\" character data_dict = {} for item in data_items: key, value = item.strip().split(': ') data_dict[key] = value print(data_dict)"},{"prompt":"Create a function in Python to parse a string representing an expression into a tree. Expression String: 2 + 3 * 4 + 5","completion":"\\"\\"\\" Create a function in Python to parse a string representing an expression into a tree \\"\\"\\" import re # Node to store the information of each node in the expression Tree class Node: def __init__(self, data): self.data = data self.left = None self.right = None # Function to parse the expression string and # build the expression Tree def parse(expression): # split the expression string using space delimiter tokens = re.split('([+-/*])', expression) # create the root node root = Node(tokens[0]) # store the current node current_node = root for i in range(1, len(tokens) - 1, 2): # create a new node node = Node(tokens[i + 1]) if tokens[i] == '+' or tokens[i] == '-': # set the left child of current node current_node.left = node # make the newly created node as current node current_node = node elif tokens[i] == '*' or tokens[i] == '/': # set the right child of current node current_node.right = node current_node = node return root if __name__ == \\"__main__\\": expression = \\"2 + 3*4 + 5\\" root = parse(expression) print(\\"Expression Tree\\") print(\\" \\" + root.data) print(\\" / \\") print(root.left.data, root.right.data) print(\\" / /\\") print(root.left.right.data, root.right.left.data)"},{"prompt":"Create a method in Python to sort all the elements in the given dictionary in descending order of the values. dictionary = {A: 30, B: 40, C: 20}","completion":"def sortByValue(dictionary): sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1], reverse=True)) return sorted_dict dictionary = {\\"A\\": 30, \\"B\\": 40, \\"C\\": 20} result = sortByValue(dictionary) print(result) # prints {'B': 40, 'A': 30, 'C': 20}"},{"prompt":"Create a function in Python that takes two lists of integers and return a list which contains elements present in both the lists. list1 = [1, 2, 3 ,4 ,5] list2 = [3, 4, 5, 6 ,7]","completion":"def intersection(list1, list2): return [value for value in list1 if value in list2] list1 = [1, 2, 3 ,4 ,5] list2 = [3, 4, 5, 6 ,7] print (intersection(list1, list2))"},{"prompt":"The given code is a Python script that defines a SupportTicket class and several functions. To use this code, import the necessary modules and create an instance of the SupportTicket class. The class has several methods that can be called to get the sender, subject, and content of a support ticket, as well as to update the status and send an email notification. There are also several helper functions for setting the status of a ticket, assigning tickets to users, and reenabling user accounts. To use these functions, call them with the appropriate arguments.","completion":"# Copyright (c) 2013, Web Notes Technologies Pvt. Ltd. and Contributors # License: GNU General Public License v3. See license.txt from __future__ import unicode_literals import frappe from erpnext.utilities.transaction_base import TransactionBase from frappe.utils import now, extract_email_id import json import requests STANDARD_USERS = (\\"Guest\\", \\"Administrator\\") class SupportTicket(TransactionBase): def get_sender(self, comm): return frappe.db.get_value('Support Email Settings',None,'support_email') def get_subject(self, comm): return '[' + self.name + '] ' + (comm.subject or 'No Subject Specified') def get_content(self, comm): signature = frappe.db.get_value('Support Email Settings',None,'support_signature') content = comm.content if signature: content += '<p>' + signature + '</p>' return content def get_portal_page(self): return \\"ticket\\" def on_update1(self): from frappe.utils import get_url, cstr frappe.errprint(get_url()) if get_url()=='http://tailorpad.com': pass else: pr2 = frappe.db.sql(\\"\\"\\"select name from \`tabSupport Ticket\`\\"\\"\\") frappe.errprint(pr2) frappe.errprint(\\"is feed back saved\\") if pr2: # self.login() frappe.errprint(\\"in if for creation support ticket\\") test = {} support_ticket = self.get_ticket_details() self.call_del_keys(support_ticket) #test['communications'] = [] #self.call_del_keys(support_ticket.get('communications'), test) self.login() frappe.errprint(\\"support_ticket\\") frappe.errprint(support_ticket) self.tenent_based_ticket_creation(support_ticket) # def on_update(self): # self.send_email() def send_email(self): frappe.errprint(\\"in the sendmail\\") from frappe.utils.user import get_user_fullname from frappe.utils import get_url if self.get(\\"__islocal\\") and get_url()=='http://tailorpad.com': # mail_titles = frappe.get_hooks().get(\\"login_mail_title\\", []) # title = frappe.db.get_default('company') or (mail_titles and mail_titles[0]) or \\"\\" full_name = get_user_fullname(frappe.session['user']) if full_name == \\"Guest\\": full_name = \\"Administrator\\" first_name = frappe.db.sql_list(\\"\\"\\"select first_name from \`tabUser\` where name='%s'\\"\\"\\"%(self.raised_by)) frappe.errprint(first_name[0]) msg=\\"Dear \\"+first_name[0]+\\"!<br><br>Support Ticket is created successfully for '\\"+self.subject+\\"'<br><br>Your Support Ticket Number is '\\"+self.name+\\"' <br><br>Please note for further information. <br><br>Regards, <br>Team TailorPad.\\" sender = frappe.session.user not in STANDARD_USERS and frappe.session.user or None frappe.sendmail(recipients=self.raised_by, sender=sender, subject=self.subject, message=msg) def login(self): login_details = {'usr': 'Administrator', 'pwd': 'admin'} url = 'http://tailorpad.com/api/method/login' headers = {'content-type': 'application/x-www-form-urlencoded'} frappe.errprint([url, 'data='+json.dumps(login_details)]) response = requests.post(url, data='data='+json.dumps(login_details), headers=headers) def get_ticket_details(self): # return frappe.get_doc('Support Ticket', self.name) response = requests.get(\\"\\"\\"%(url)s/api/resource/Support Ticket/SUP-00001\\"\\"\\"%{'url':get_url()}) # frappe.errprint([\\"\\"\\"%(url)s/api/resource/Support Ticket/%(name)s\\"\\"\\"%{'url':get_url(), 'name':self.name}]) frappe.errprint(response.text) return eval(response.text).get('data') def call_del_keys(self, support_ticket): if support_ticket: if isinstance(support_ticket, dict): self.del_keys(support_ticket) if isinstance(support_ticket, list): for comm in support_ticket: self.del_keys(comm) def del_keys(self, support_ticket): frappe.errprint(type(support_ticket)) del support_ticket['name'] del support_ticket['creation'] del support_ticket['modified'] del support_ticket['company'] def tenent_based_ticket_creation(self, support_ticket): frappe.errprint(support_ticket) url = 'http://tailorpad.com/api/resource/Support Ticket' #url = 'http://192.168.5.12:7676/api/method/login' headers = {'content-type': 'application/x-www-form-urlencoded'} frappe.errprint('data='+json.dumps(support_ticket)) response = requests.post(url, data='data='+json.dumps(support_ticket), headers=headers) frappe.errprint(response) frappe.errprint(response.text) def validate(self): self.update_status() self.set_lead_contact(self.raised_by) if self.status == \\"Closed\\": from frappe.widgets.form.assign_to import clear clear(self.doctype, self.name) #self.on_update1() self.send_email() def set_lead_contact(self, email_id): import email.utils email_id = email.utils.parseaddr(email_id) if email_id: if not self.lead: self.lead = frappe.db.get_value(\\"Lead\\", {\\"email_id\\": email_id}) if not self.contact: self.contact = frappe.db.get_value(\\"Contact\\", {\\"email_id\\": email_id}) if not self.company: self.company = frappe.db.get_value(\\"Lead\\", self.lead, \\"company\\") or frappe.db.get_default(\\"company\\") def update_status(self): status = frappe.db.get_value(\\"Support Ticket\\", self.name, \\"status\\") if self.status!=\\"Open\\" and status ==\\"Open\\" and not self.first_responded_on: self.first_responded_on = now() if self.status==\\"Closed\\" and status !=\\"Closed\\": self.resolution_date = now() if self.status==\\"Open\\" and status !=\\"Open\\": # if no date, it should be set as None and not a blank string \\"\\", as per mysql strict config self.resolution_date = None @frappe.whitelist() def set_status(name, status): st = frappe.get_doc(\\"Support Ticket\\", name) st.status = status st.save() @frappe.whitelist() def get_admin(name): admin = frappe.db.sql(\\"select email_id_admin from tabUser where name='administrator'\\") frappe.errprint(admin) frappe.errprint(frappe.session.get('user')) if admin: frappe.errprint(\\"if\\") return admin[0][0] else: frappe.errprint(\\"else\\") return frappe.session.get('user') @frappe.whitelist() def assing_future(name, assign_in_future,raised_by,assign_to): frappe.errprint(\\"in assign future\\") from frappe.utils import get_url, cstr if get_url()=='http://tailorpad.com': check_entry = frappe.db.sql(\\"\\"\\"select assign_to from \`tabAssing Master\` where name = %s \\"\\"\\", raised_by) frappe.errprint(\\"in assign\\") if check_entry : frappe.errprint(\\"chk\\") if assign_in_future=='No': frappe.errprint(\\"no\\") frappe.db.sql(\\"\\"\\"delete from \`tabAssing Master\` where name = %s \\"\\"\\", raised_by) else : frappe.errprint(\\"Yes\\") frappe.db.sql(\\"\\"\\"update \`tabAssing Master\` set assign_to=%s where name = %s \\"\\"\\",(assign_to,raised_by)) else : frappe.errprint(\\"not chk\\") if assign_in_future=='Yes': frappe.errprint(\\"Yes\\") am = frappe.new_doc(\\"Assing Master\\") am.update({ \\"name\\": raised_by, \\"assign_to\\": assign_to, \\"raised_by\\":raised_by }) am.insert() def auto_close_tickets(): frappe.db.sql(\\"\\"\\"update \`tabSupport Ticket\` set status = 'Closed' where status = 'Replied' and date_sub(curdate(),interval 15 Day) > modified\\"\\"\\") @frappe.whitelist() def reenable(name): frappe.errprint(\\"calling superadmin\\") from frappe.utils import get_url, cstr frappe.errprint(get_url()) if get_url()!='http://tailorpad.com': frappe.errprint(\\"in reenable\\") from frappe.utils import get_url, cstr,add_months from frappe import msgprint, throw, _ res = frappe.db.sql(\\"select validity from \`tabUser\` where name='Administrator' and no_of_users >0\\") if res: res1 = frappe.db.sql(\\"select validity_end_date from \`tabUser\` where '\\"+cstr(name)+\\"' and validity_end_date <CURDATE()\\") if res1: bc=\\"update \`tabUser\` set validity_end_date=DATE_ADD((nowdate(), INTERVAL \\"+cstr(res[0][0])+\\" MONTH) where name = '\\"+cstr(name)+\\"'\\" frappe.db.sql(bc) frappe.db.sql(\\"update \`tabUser\`set no_of_users=no_of_users-1 where name='Administrator'\\") else: ab=\\"update \`tabUser\` set validity_end_date=DATE_ADD(validity_end_date,INTERVAL \\"+cstr(res[0][0])+\\" MONTH) where name = '\\"+cstr(name)+\\"' \\" frappe.errprint(ab) frappe.db.sql(ab) frappe.db.sql(\\"update \`tabUser\`set no_of_users=no_of_users-1 where name='Administrator'\\") else: frappe.throw(_(\\"Your subscription plan expired .Please purchase an subscription plan and enable user.\\"))"},{"prompt":"Optimize the following loop in Python for i in range(0, len(arr)): for j in range(0, i+1): if arr[i] < arr[j]: temp = arr[i] arr[i] = arr[j] arr[j] = temp","completion":"def optimizeLoop(arr): for i in range(len(arr)): min_idx = i for j in range(i + 1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr arr = [64, 34, 25, 12, 22, 11, 90] print(optimizeLoop(arr)) # [11, 12, 22, 25, 34, 64, 90]"},{"prompt":"Write a Python script to download the html content of a given webpage https://www.example.com/","completion":"import requests url = 'https://www.example.com/' resp = requests.get(url) html = resp.content"},{"prompt":"Write a python program to scrape the comments section of a given webpage and store the comments in a list. URL: https://example.com/","completion":"import requests from bs4 import BeautifulSoup # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Get all the comments of the HTML document comments = soup.find_all('div', attrs={'class': 'comments'}) # Store the comments in a list comment_list = [] for comment in comments: comment_list.append(comment.text)"},{"prompt":"Python code to find out if a linked list has a loop Head of link list | v 1 > 2 > 3 > 4 ^ | |_________|","completion":"def hasLoop(self): if self.head is None: return False slow = fast = self.head while(slow and fast and fast.next): slow = slow.next fast = fast.next.next if slow == fast: return True return False"},{"prompt":"Can you build a program in Python to calculate the median of a given list of integers? [4, 9, 12, 8, 1]","completion":"def median(list): list.sort() length = len(list) if length % 2 == 0: return sum(list[int(length / 2) - 1:int(length / 2) + 1]) / 2 else: return list[int(length / 2)] median_of_list = median([4, 9, 12, 8, 1]) print(\\"Median of the list is: \\" + str(median_of_list)) # Output: 8"},{"prompt":"Write a Python program to modify a given list such that each element is equal to the square of the original element minus 2. sample_list = [3, 5, 7, 9]","completion":"modified_list = [7, 15, 23, 31] # Python code sample_list = [3, 5, 7, 9] modified_list = [x**2 - 2 for x in sample_list]"},{"prompt":"Create a Python function which will take a list of numbers as input and return a list but with each value doubled. [1, 2, 3, 4, 5]","completion":"def double_list(lst): new_list = [] for num in lst: new_list.append(num * 2) return new_list my_list = [1, 2, 3, 4, 5] double_list(my_list) #[2, 4, 6, 8, 10]"},{"prompt":"Find the highest number in a list of numbers in Python. [7, 4, 5, 100, 2]","completion":"max_number = max([7, 4, 5, 100, 2]) print(max_number)"},{"prompt":"w can we create a function to check if a given string is a palindrome in Python? No inpu","completion":"def is_palindrome(s): s = s.lower() return s == s[::-1]"},{"prompt":"mplement a sorting algorithm in Python to sort a list of integers. [5, 2, 8, 1, 4]","completion":"def sort(list): for i in range(len(list)): min_idx = i for j in range(i+1, len(list)): if list[min_idx] > list[j]: min_idx = j list[i], list[min_idx] = list[min_idx], list[i] list = [5, 2, 8, 1, 4] sort(list) print(list)"},{"prompt":"Write a Python program to calculate the simple interest on a loan of 1000 over 10 years at an interest rate of 5%. Not applicable","completion":"loan_amount = 1000 interest_rate = 5 number_of_years = 10 simple_interest = loan_amount * (interest_rate/100) * number_of_years print(\\"Simple interest = %.2f\\" %simple_interest)"},{"prompt":"Generate a program in Python to convert a list of strings to a dictionary where all the values are 1. words = [Hello, World, Welcome]","completion":"def to_dict(words): result = {} for word in words: result[word] = 1 return result result = to_dict([\\"Hello\\", \\"World\\", \\"Welcome\\"]) print(result)"},{"prompt":"Write a Python program to compute the randomness score of a given string.","completion":"import random def randomness_score(string): random.seed(string) score = 0 for i in range(100): score += random.random() return score"},{"prompt":"Develop a test suite in Python to test a class or function.","completion":"import unittest class TestMyClassOrFunction(unittest.TestCase): def test_something(self): # Setup # Code to set up a value to test # Exercise # Code for the function to test result = function_to_test(*args) # Verify self.assertEqual(result, expected_result) if __name__ == \\"__main__\\": unittest.main()"},{"prompt":"Calculate the shortest path from source to destination using Dijkstra's Algorithm. graph = { 'a': {'b':10, 'c':3}, 'b': {'c':1, 'd':2}, 'c': {'b':4, 'd':8, 'e':2}, 'd': {'e':7}, 'e': {'d':9} } source = a dest = d","completion":"\\"\\"\\" Calculate the shortest path from source to destination using Dijkstra's Algorithm. \\"\\"\\" # Python program for Dijkstra's single # source shortest path algorithm. The program is # for adjacency matrix representation of the graph # Library for INT_MAX import sys class Graph(): def __init__(self, vertices): self.V = vertices self.graph = graph # A utility function to find the vertex with # minimum distance value, from the set of vertices # not yet included in shortest path tree def minDistance(self, dist, mstSet): # Initilaize minimum distance for next node min = sys.maxint # Search not nearest vertex not in the # shortest path tree for v in range(self.V): if dist[v] < min and mstSet[v] == False: min = dist[v] min_index = v return min_index # Funtion that implements Dijkstra's single source # shortest path algorithm for a graph represented # using adjacency matrix representation def dijkstra(self, source): dist = [sys.maxint] * self.V dist[source] = 0 mstSet = [False] * self.V for cout in range(self.V): # Pick the minimum distance vertex from # the set of vertices not yet processed. # u is always equal to src in first iteration u = self.minDistance(dist, mstSet) # Put the minimum distance vertex in the # shotest path tree mstSet[u] = True # Update dist value of the adjacent vertices # of the picked vertex only if the current # distance is greater than new distance and # the vertex in not in the shotest path tree for v in range(self.V): if self.graph[u][v] > 0 and mstSet[v] == False and dist[v] > dist[u] + self.graph[u][v]: dist[v] = dist[u] + self.graph[u][v] # print the constructed distance array print (\\"Shortest path from %s to %s is %d\\" % (source, dest, dist[dest])) # Driver program graph = { 'a': {'b':10, 'c':3}, 'b': {'c':1, 'd':2}, 'c': {'b':4, 'd':8, 'e':2}, 'd': {'e':7}, 'e': {'d':9} } g = Graph(len(graph)) source = \\"a\\" dest = \\"d\\" g.dijkstra(graph.index(source))"},{"prompt":"Create a program to solve linear equations in Python.","completion":"import numpy as np def solve_linear_eqns(coefficients, constants): # the matrix of coefficients matrix = np.array(coefficients) # the vector of constants vector = np.array(constants) # solve the system of linear equations solution = np.linalg.solve(matrix, vector) return solution"},{"prompt":"Write a class to represent a hotel in Python.","completion":"class Hotel: def __init__(self, name, stars, rooms): self.name = name self.stars = stars self.rooms = rooms def num_rooms(self): return self.rooms def rating(self): return self.stars"},{"prompt":"Develop a program to normalize a list of numbers in Python. [1.2,2.3, 3.4, 4.5, 5.6]","completion":"def normalize_list(lst): '''Normalizes a list of numbers''' max_val = max(lst) min_val = min(lst) normalized_lst = [] for num in lst: normalized_val = (num - min_val)/(max_val - min_val) normalized_lst.append(normalized_val) return normalized_lst"},{"prompt":"Write a Python program to identify the words with the highest frequency in a given text. At home, the clock ticks and the foot of the stair","completion":"def most_frequent_words(text): # Split the text into words words = text.split() # Create an empty dictionary word_counter = {} # Iterate through each word in the list of words for word in words: # If the word is already in the dictionary if word in word_counter: # Add 1 to the count of the word word_counter[word] += 1 else: # Else, set the count of the word to 1 word_counter[word] = 1 # Sort the dictionary by value word_sorted = sorted(word_counter.items(), key=lambda count: count[1], reverse=True) # Return the words with highest frequency return [word_sorted[0][0], word_sorted[1][0], word_sorted[2][0]]"},{"prompt":"mplement a function in Python that takes two strings as input and finds the longest common substring between them. text1 = 'abcdefghi' text2 = 'acelgghi'","completion":"def find_longest_common_substring(text1,text2): answer = \\"\\" len1, len2 = len(text1), len(text2) for i in range(len1): match = \\"\\" for j in range(len2): if (i + j < len1 and text1[i + j] == text2[j]): match += text2[j] else: if (len(match) > len(answer)): answer = match match = \\"\\" return answer text1 = 'abcdefghi' text2 = 'acelgghi' print(find_longest_common_substring(text1, text2))"},{"prompt":"Design a Python program that computes the maximum and minimum of a given list. [5, 3, 4, 10, 7]","completion":"def find_max_min(list_vals): max_val = max(list_vals) min_val = min(list_vals) return max_val, min_val list_vals = [5, 3, 4, 10, 7] print(\\"Maximum value :\\", find_max_min(list_vals)[0]) print(\\"Minimum value :\\", find_max_min(list_vals)[1])"},{"prompt":"Create a program in Python to extract and recommend the most important keywords from a text. This is a sample text for Keyword extraction.","completion":"import nltk import pandas as pd import numpy as np # Input text text = \\"This is a sample text for Keyword extraction.\\" # Tokenize words words = nltk.word_tokenize(text) # Initialize corpus corpus = [] # Convert tokens to lowercase for word in words: corpus.append([word.lower()]) # Get unigrams wordsFreq = pd.DataFrame(corpus, columns=['Word']) # Calculate document frequency df = wordsFreq.groupby('Word').size().reset_index(name='Doc Frequency') # Calculate term frequency tf = wordsFreq['Word'].value_counts().reset_index(name='Term Frequency') # Merge both frequencies for computing TF - IDF tfidf = pd.merge(df, tf, on='Word', how='inner') # Calculate Inverse Document Frequency tfidf['Inverse Document Frequency'] = np.log(len(text)/(tfidf['Doc Frequency'] + 1)) # Calculate TF - IDF tfidf['TF - IDF'] = tfidf['Term Frequency'] * tfidf['Inverse Document Frequency'] # Sort words by TF - IDF in descending order tfidf.sort_values('TF - IDF', ascending=False, inplace=True) # Print the most important words print(tfidf[:5]['Word']) # Output: # 0 sample # 1 keyword # 2 extract # 3 for # 4 this"},{"prompt":"Develop a random number guessing game in Python","completion":"import random num = random.randint(1,10) guess = 0 attempts = 0 while guess != num and attempts < 3: guess = int(input(\\"Guess a number between 1 and 10: \\")) attempts += 1 if guess == num: print(\\"You guessed correctly in\\", attempts, \\"attempts\\") elif guess > num: print(\\"Too High\\") else: print(\\"Too Low\\") if guess != num: print(\\"You failed to guess the number\\")"},{"prompt":"Create a Python program to interpret a user command from a given set of instructions and execute it. Taking a break","completion":"command = input(\\"Please enter your command: \\") if command == \\"Taking a break\\": print(\\"Taking a five minute break\\") # code to execute the taking a break command else: print(\\"Invalid command\\")"},{"prompt":"Write a python program to create an array of length n, where each element is a random number between 0 and 10. n = 10","completion":"import random array_length = 10 my_array = [random.randint(0, 10) for _ in range(array_length)] print(my_array)"},{"prompt":"Create a basic Python program to print the Pascal's Triangle for a given number of rows. 5","completion":"def pascal_triangle(n): # Array to store generated pascal triangle values pascal = [] for i in range(n): pascal.append([]) pascal[i].append(1) for j in range(1, i+1): # Generate next row values from previous row values x = pascal[i-1][j-1] + pascal[i-1][j] if j!=0 else 1 pascal[i].append(x) # Print last row of Pascal's Triangle for i in range(n): print(pascal[n-1][i], end = \\" \\") n = 5 pascal_triangle(n) # Output: 1 5 10 10 5 1"},{"prompt":"Suggest a code optimization to make this python snippet run faster. def add_numbers_in_list(l): sum = 0 for i in l: sum += i return sum","completion":"def add_numbers_in_list(l): total = 0 for i in range(0, len(l), 2): total += (l[i] + l[i+1]) if (i+1 < len(l)) else l[i] return total"},{"prompt":"Create an algorithm in Python that reads an array of integers and returns the maximum element. [1, 5, 3, 10]","completion":"def findMaxElement(arr): max_element = 0 for element in arr: if element > max_element: max_element = element return max_element arr = [1, 5, -3, 10] max_element = findMaxElement(arr) print(max_element)"},{"prompt":"Create a web service in Python that takes in a temperature value as input in Celsius and returns the equivalent value in Fahrenheit. celsius = 21","completion":"import flask app = flask.Flask(__name__) @app.route('/celsius-to-fahrenheit/<int:celsius>', methods=['GET']) def celsius_to_fahrenheit(celsius): fahrenheit = celsius * 9/5 + 32 return flask.jsonify({'celsius': celsius, 'fahrenheit': fahrenheit}) if __name__ == '__main__': app.run()"},{"prompt":"Optimize the following Python code to run faster by using appropriate data structures. def find_subarrays(arr): subarrays = [] for i in range(len(arr)): for j in range(i, len(arr)): subarrays.append(arr[i:j+1]) return subarray","completion":"def find_subarrays(arr): subarrays = [] for i in range(len(arr)): subarrays.append(arr[i:]) for j in range(i+1, len(arr)): subarrays.append(arr[i:j+1]) return subarrays"},{"prompt":"Generate Python class to define and simulate a bouncing ball.","completion":"import math class BouncingBall(): def __init__(self): self.x = 0.0 # horizontal position self.y = 5.0 # vertical position self.vy = 0.2 # vertical velocity self.g = 9.81 # gravitational acceleration def update(self, dt): self.y -= self.vy * dt self.vy -= self.g * dt if self.y <= 0: self.y = 0 self.vy *= -0.9"}]`),A={name:"App",components:{PoemCard:j},data(){return{searchQuery:"",visibleCount:4,poemsData:N,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.prompt&&e.prompt.toLowerCase().includes(i)||e.completion&&e.completion.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},E={class:"search-container"},F={class:"card-container"},I={key:0,class:"empty-state"},D=["disabled"],L={key:0},z={key:1};function R(i,e,l,u,a,o){const f=_("PoemCard");return r(),n("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",E,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),g(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=s=>a.searchQuery=s),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(r(),n("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=s=>a.searchQuery="")}," ✕ ")):p("",!0)]),t("div",F,[(r(!0),n(b,null,w(o.displayedPoems,(s,h)=>(r(),v(f,{key:h,poem:s},null,8,["poem"]))),128)),o.displayedPoems.length===0?(r(),n("div",I,' No results found for "'+m(a.searchQuery)+'". ',1)):p("",!0)]),o.hasMorePoems?(r(),n("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...s)=>o.loadMore&&o.loadMore(...s))},[a.isLoading?(r(),n("span",z,"Loading...")):(r(),n("span",L,"See more"))],8,D)):p("",!0)])}const M=c(A,[["render",R],["__scopeId","data-v-20b10aca"]]),G=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/1.md","filePath":"quotes/1.md"}'),O={name:"quotes/1.md"},B=Object.assign(O,{setup(i){return(e,l)=>(r(),n("div",null,[x(M)]))}});export{G as __pageData,B as default};
