import{_ as c,o as r,c as n,a as t,m as d,t as m,C as _,M as g,U as y,f as p,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},P={class:"poem-container"},T={class:"review"},C={class:"review-title"},S={class:"review-content"};function A(a,e,l,u,i,o){return r(),n("div",P,[t("div",T,[t("div",C,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),d(m(l.poem.prompt),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",S,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),d(m(l.poem.completion),1)])])])}const E=c(k,[["render",A],["__scopeId","data-v-1e8d3253"]]),q=JSON.parse(`[{"prompt":"Create a Python script to calculate the average age of a list of people. people = [ { 'name': 'John', 'age': 25 }, { 'name': 'Jane', 'age': 34 }, { 'name': 'Dave', 'age': 19 }, { 'name': 'Sarah', 'age': 21 }, { 'name': 'Henry', 'age': 29 } ]","completion":"total = 0 for person in people: total += person['age'] average = total / len(people) print(f'Average age is {average}') // 24.4"},{"prompt":"Generate a Python program to extract the emailIDs from a text string. Example user input: The list of contacts is john@test.com,jane@example.com,bob@test.com","completion":"import re text = \\"The list of contacts is john@test.com,jane@example.com,bob@test.com\\" pattern = r'[w.-]+@[w.-]+' match = re.findall(pattern, text) print(match)"},{"prompt":"Develop a system in Python for detecting plagiarism.","completion":"import difflib def plagiarism_detector(string_a, string_b): sequence = difflib.SequenceMatcher(None, string_a, string_b) similarity = sequence.ratio() * 100 print('Similarity = {:.2f}%'.format(similarity)) plagiarism_detector('The quick brown fox', 'The quick brown fox jumps over the lazy dog')"},{"prompt":"mplement a basic web server using Python.","completion":"import socket HOST, PORT = '', 8888 listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) listen_socket.bind((HOST, PORT)) listen_socket.listen(1) print 'Serving HTTP on port %s ...' % PORT while True: client_connection, client_address = listen_socket.accept() request = client_connection.recv(1024) print request http_response = \\"\\"\\" HTTP/1.1 200 OK Hello, World! \\"\\"\\" client_connection.sendall(http_response) client_connection.close()"},{"prompt":"Generate a solution for finding all possible subsets of a given set in Python. [1, 2, 3]","completion":"\\"\\"\\" Generate a solution for finding all possible subsets of a given set in Python. \\"\\"\\" def find_subsets(nums): subsets = [[]] for current_num in nums: for i in range(len(subsets)): set_to_add = subsets[i] + [current_num] subsets.append(set_to_add) return subsets nums = [1, 2, 3] print(find_subsets(nums))"},{"prompt":"Create a Python function to classify a given string as a Positive, Negative, or Neutral sentiment. This is an amazing service.","completion":"def classify_sentiment(string): if 'positive' in string: return 'Positive' elif 'negative' in string: return 'Negative' elif 'neutral' in string: return 'Neutral' else: return 'Unknown' sentiment = classify_sentiment(\\"This is an amazing service.\\") print(sentiment) # Positive"},{"prompt":"Code an algorithm in Python for generating a random password.","completion":"import string import random def generate_password(length): chars = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(chars) for _ in range(length)) return password"},{"prompt":"Build a program in Python using the Pandas library to calculate the mean, median, and mode of a given series. [1, 2, 2, 3, 3, 3, 4, 5]","completion":"import pandas as pd # Create Series data = [1, 2, 2, 3, 3, 3, 4, 5] series = pd.Series(data) # Calculate mean mean = series.mean() # Calculate median median = series.median() # Calculate mode mode = series.mode() # Print results print(\\"Mean:\\", mean) print(\\"Median:\\", median) print(\\"Mode:\\", mode)"},{"prompt":"Develop a natural language processing application in Python which can predict the sentiment of reviews. Not applicable","completion":"import pandas as pd from keras.preprocessing.text import Tokenizer from keras.preprocessing.sequence import pad_sequences from keras.models import Sequential from keras.layers import Dense, GRU, Embedding # Load the dataset df = pd.read_csv(\\"reviews.csv\\") # Select labels and text data = df[[\\"review\\", \\"sentiment\\"]] # Split data into training and test set train_data, test_data = train_test_split(data, random_state=42) # Tokenize the text tokenizer = Tokenizer() tokenizer.fit_on_texts(train_data['review']) # Pad and encode the sequences # This pad the article to a length of 120 X_train = tokenizer.texts_to_sequences(train_data['review']) X_test = tokenizer.texts_to_sequences(test_data['review']) X_train = pad_sequences(X_train, maxlen=120) X_test = pad_sequences(X_test, maxlen=120) # Prepare labels y_train = train_data['sentiment'] y_test = test_data['sentiment'] # Create a model model = Sequential() model.add(Embedding(1000, 128, input_length=120)) model.add(GRU(256)) model.add(Dense(1, activation='sigmoid')) # Compile the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Fit the model model.fit(X_train, y_train, batch_size=128, epochs=20)"},{"prompt":"Generate a loop to iterate through each character of a string in Python.","completion":"\\"\\"\\" Generate a loop to iterate through each character of a string \\"\\"\\" # Define a string string = 'Example string' # Iterate through the characters of the string for char in string: # Print each character print(char)"},{"prompt":"Create a Python function to generate a matrix with random numbers in it.","completion":"import numpy as np def random_matrix(row, col): matrix = np.random.random((row,col)) print(matrix) random_matrix(3,3) #Outputs: [[0.48281427 0.8640267 0.16479638] [0.65602432 0.37230416 0.05444421] [0.78832705 0.19239374 0.03173512]]"},{"prompt":"dentify the output of the following python code snippet: arr = [1, 2, 4, 8, 16] new_arr = [i * 2 for i in arr]","completion":"[2, 4, 8, 16, 32]"},{"prompt":"Optimize the following Python code for calculating the Fibonacci numbers up to n. def fibonacci(n): if n <= 1: return n return fibonacci(n1) + fibonacci(n2)","completion":"def fibonacci(n): # Initialize a memoization dictionary memo = { 0: 0, 1: 1 } # If n is in the memoization dictionary, return the value if n in memo: return memo[n] # Calculate the Fibonacci number if n > 1: memo[n] = fibonacci(n-1) + fibonacci(n-2) return memo[n] print(fibonacci(10))"},{"prompt":"Create a Python function to format a given ip address to IPv4 format. 192.168.1","completion":"def ipv4_format(ip): octets = ip.split('.') octets.extend(['0', '0', '0', '0']) octets = octets[:4] return '.'.join(octets) if __name__ == '__main__': ip = '192.168.1' print(ipv4_format(ip))"},{"prompt":"Generate code for a predictive model in Python that uses linear regression to predict the stock price for a given company.","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Read in csv data data = pd.read_csv('stock_data.csv') # Split our data into testing and training sets X_train = data[data['date'] < '2014-01-01'] X_test = data[data['date'] >= '2014-01-01'] # Extract our feature and target columns X_train = X_train.drop(['date', 'price'], axis=1) X_test = X_test.drop(['date', 'price'], axis=1) y_train = data[data['date'] < '2014-01-01']['price'] y_test = data[data['date'] >= '2014-01-01']['price'] # Fit our Linear Regression Model linear_regression = LinearRegression() linear_regression.fit(X_train, y_train) y_preds = linear_regression.predict(X_test) # Print out our predictions for i in range(1, len(y_preds)): print(f\\"Predicted: {y_preds[i]}, Actual: {y_test.iloc[i]}\\")"},{"prompt":"Create a web scraper in Python to scrape the content from a website Website URL: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup def scraper(url): response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') for article in soup.find_all('article'): print(article.text) if __name__ == \\"__main__\\": scraper(\\"https://www.example.com\\")"},{"prompt":"What code would you write to implement an efficient binary search in Python?","completion":"def binary_search(arr, target): low = 0 high = len(arr) - 1 while low <= high: mid = (low + high) // 2 # floor division guess = arr[mid] if guess == target: return mid elif guess > target: high = mid - 1 else: low = mid + 1 return None"},{"prompt":"Create a Python function that prints the next prime number after a given number. 19","completion":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5)+1): if n % i == 0: return False return True def next_prime(num): if is_prime(num): num += 1 while (True): if is_prime(num): return num num += 1 num = 19 print(next_prime(num)) # Output: 23"},{"prompt":"Write a Python program to find the most common number among a given array of numbers. [1, 5, 4, 3, 2, 5, 4, 1, 3, 5]","completion":"def most_common(arr): counts = {} for n in arr: if n in counts: counts[n] += 1 else: counts[n] = 1 max_count = 0 max_element = None for k, v in counts.items(): if v > max_count: max_count = v max_element = k return max_element"},{"prompt":"Write a python script to remove all punctuations and whitespace in a string string = Hello, how are you! I'm doing great.","completion":"def remove_punc_and_whitespace(string): return ''.join([x for x in string if x not in [\\" \\", \\",\\", \\":\\", \\"-\\", \\"!\\", \\"?\\", \\".\\"]])"},{"prompt":"Edit the following objectoriented Python code to use inheritance. class A: def __init__(self, x): self.x = x def get_x(self): return self.x class B: def modify_x(self, x): self.x = x + 1","completion":"class A: def __init__(self, x): self.x = x def get_x(self): return self.x class B(A): def modify_x(self, x): A.modify_x(self, x) self.x += 1"},{"prompt":"Edit the following code snippet to calculate average in Python. def calculate_avg(values): total = 0","completion":"def calculate_avg(values): total = 0 count = len(values) for value in values: total += value return total/count"},{"prompt":"Optimize this Python code for speed. lst = [] for i in range(100): lst.append(i) for i in lst: print(i)","completion":"lst = list(range(100)) for i in lst: print(i)"},{"prompt":"Generate a Python program to test the equality of two given strings St1= Python St2= Programming","completion":"if st1 == st2: print(\\"Strings are equal.\\") else: print(\\"Strings are not equal.\\")"},{"prompt":"Create a Python program to take two numbers as input and list their lowest common multiple? a = 15, b = 20","completion":"def LCM(x, y): if x > y: z = x else: z = y while(True): if((z % x == 0) and (z % y == 0)): lcm = z break z += 1 return lcm a = 15 b = 20 print(LCM(a, b))"},{"prompt":"Create a code snippet to sort a given array of strings in descending order based on their lengths in Python. arr = [Python, Javascript, Ruby, Java]","completion":"arr.sort(key=lambda x: len(x), reverse=True) print(arr)"},{"prompt":"Write a Kubernetes deployment configuration for a Python web application, called “myapp”, running on port 8080. Not applicable","completion":"apiVersion: apps/v1 kind: Deployment metadata: name: my-app-deployment spec: replicas: 3 selector: matchLabels: app: my-app template: metadata: labels: app: my-app spec: containers: - name: my-app image: my-app-image ports: - containerPort: 8080"},{"prompt":"Given the following JSON input, write a Python program to calculate the average age of all the users. [ { name: Alice, age: 25 }, { name: Bob, age: 30 }, { name: John, age: 20 } ]","completion":"import json users = json.loads(input) total_age = 0 for user in users: total_age += user[\\"age\\"] average_age = total_age / len(users) print(f\\"Average age of users is {average_age}\\")"},{"prompt":"Use a Python library to visualize a Gaussian normal distribution with the mean set to 5 and the standard deviation set to 1.","completion":"import matplotlib.pyplot as plt import numpy as np mean = 5 std = 1 x = np.linspace(mean - 3*std, mean+3*std, 100) plt.plot(x, 1/(np.sqrt(2*np.pi*std**2)) *np.exp(-(x-mean)**2/(2*std**2))) plt.show()"},{"prompt":"Evaluate the following expression in Python. (4 + 6) * 5 8","completion":"44"},{"prompt":"Create a python program to filter a list of words by length. [Apple, Banana, Orange, Grapes]","completion":"def filter_words_by_length(word_list, length): return [word for word in word_list if len(word) == length]"},{"prompt":"Generate a Python function that will double the given input value.","completion":"def double(x): return x * 2"},{"prompt":"Create a GUI using Tkinter in Python which allows a user to input some text, and then prints out the text on the screen.","completion":"import tkinter as tk # Create a window window = tk.Tk() window.title(\\"Printed Text Output\\") window.geometry(\\"500x500\\") # Label and Entry to input text label1 = tk.Label(window, text=\\"Input text:\\").place(x=50, y=50) entry = tk.Entry(window) entry.place(x=120, y=50) # Print out the text def print_text(): userInput = entry.get() label2 = tk.Label(window, text=\\"The printed text is: \\"+userInput, font=(\\"Helvetica\\", 30)) label2.place(x=50, y=100) # Button to trigger the printing of text button = tk.Button(window, text=\\"Print\\", command=print_text) button.place(x=50, y=80) # Run the window window.mainloop()"},{"prompt":"Create a Python class that can be used to represent a user profile.","completion":"class UserProfile: def __init__(self, username, password): self.username = username self.password = password def get_username(self): return self.username def get_password(self): return self.password user = UserProfile('username', 'password') print(user.get_username())"},{"prompt":"Write a function in Python to input a single number and display the square of that number.","completion":"def display_square(number): result = number * number print(result) display_square(5)"},{"prompt":"Generate a random string with 8 characters in Python.","completion":"import string import random def generate_random_string(stringLength=8): \\"\\"\\"Generate a random string of fixed length \\"\\"\\" letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(stringLength)) print(generate_random_string())"},{"prompt":"Create a Python program to identify the most frequently occurring item in a list. [3,4,3,4,3]","completion":"def most_frequent(list): return max(set(list), key = list.count) most_frequent([3,4,3,4,3])"},{"prompt":"Write a python program to generate a dictionary object from a list containing keyvalue tuples. my_list = [('key1', 'value1'), ('key2', 'value2')]","completion":"my_dict = dict(my_list)"},{"prompt":"Create a python class that generates a multiplication quiz.","completion":"class MultiplicationQuiz: def __init__(self, num_questions): self.num_questions = num_questions def generate_quiz(self): # Generate num_questions random questions for _ in range(self.num_questions): num1 = random.randint(1, 12) num2 = random.randint(1, 12) print(f'What is {num1} x {num2}?') # Test quiz = MultiplicationQuiz(10) quiz.generate_quiz()"},{"prompt":"Write a Python program to calculate the sum of the first 10 prime numbers. Not applicable","completion":"# Calculate the sum of the first 10 prime numbers # Variable to store the sum sum = 0 # Iterate over the first 10 prime numbers and add them to the sum for i in range(2,37): # Check for Prime number if all(i % j != 0 for j in range(2, i)): sum += i # Output the result print(\\"Sum of the first 10 prime numbers is\\",sum)"},{"prompt":"Create a user registration system in Python.","completion":"import hashlib class User: def __init__(self, username, password): self.username = username self.password_hash = self.hash_password(password) def check_password(self, password): if self.hash_password(password) == self.password_hash: return True else: return False def hash_password(self, password): return hashlib.sha256(password.encode('utf-8')).hexdigest() users = {} def register(username, password): if username in users: print('Username already exists!') return users[username] = User(username, password) print('Registration successful!') def login(username, password): if username not in users: print('Username doesn't exist!') return user = users[username] if user.check_password(password): print('Login successful!') else: print('Wrong password!')"},{"prompt":"Create a dataset using Python Pandas containing the countries of the world and their capital cities. Not applicable","completion":"import pandas as pd country_data = [ [\\"Afghanistan\\", \\"Kabul\\"], [\\"Albania\\", \\"Tirana\\"], [\\"Algeria\\", \\"Algiers\\"], [\\"Andorra\\", \\"Andorra la Vella\\"], [\\"Angola\\", \\"Luanda\\"], [\\"Antigua and Barbuda\\", \\"St. John's\\"], [\\"Argentina\\", \\"Buenos Aires\\"], [\\"Armenia\\", \\"Yerevan\\"], [\\"Australia\\", \\"Canberra\\"], [\\"Austria\\", \\"Vienna\\"] ] df = pd.DataFrame(country_data, columns=[\\"Country\\", \\"Capital\\"]) print(df)"},{"prompt":"Create a Python script to perform the following transformation on a given string? HELLO WORLD","completion":"inp_str = \\"HELLO WORLD\\" result_str = '' for c in inp_str: if c.isupper(): result_str += c.lower() else: result_str += c.upper() print(result_str)"},{"prompt":"Create a Python function to parse an HTML to extract all links from the content. Not applicable","completion":"from BeautifulSoup import BeautifulSoup def parseHtml(html): soup = BeautifulSoup(html) links = [] for link in soup.findAll('a'): links.append(link.get('href')) return links"},{"prompt":"Develop a function in Python that sorts a dictionary by value in descending order. dictionary = {'a': 10, 'b': 20, 'c': 5}","completion":"def sort_dict_by_value(dict): sorted_dict = dict(sorted(dict.items(), key = lambda kv: kv[1], reverse = True)) return sorted_dict sorted_dict = sort_dict_by_value(dictionary) print(sorted_dict)"},{"prompt":"Analyze a given Python script and provide a list of key terms and concepts that appear in the code. import os document = '' for root, dirs, files in os.walk('data'): for file in files: if file.endswith('.txt'): with open(os.path.join(root, file)) as f: document += f.read()","completion":"Key Terms and Concepts: - Importing: os - Loops: for, while - Paths: os.walk - Opening files: open, with - File I/O: reading/writing files - Logical operators: endswith - Strings: join, read, append"},{"prompt":"Create a Python program that takes a user's input and converts it into pig latin. Not applicable","completion":"def pig_latin(word): vowels = \\"aeiouy\\" if word[0].lower() in vowels: return word + \\"ay\\" else: return word[1:] + word[0] + \\"ay\\" print(pig_latin(\\"hello\\")) # Output: \\"ellohay\\""},{"prompt":"Python, develop a function which reverses the order of elements in the given list.","completion":"def reverse_list(l): return list(reversed(l))"},{"prompt":"Create a Python program to edit a given string by removing all space characters.","completion":"def remove_spaces(string): return \\"\\".join(string.split()) # Driver code string = \\"this is a sample sentence\\" print(remove_spaces(string))"},{"prompt":"Construct a Python class that can represent Rectangles.","completion":"class Rectangle: def __init__(self, width, height): self.width = width self.height = height def area(self): return self.width * self.height def perimeter(self): return 2*self.width + 2*self.height"},{"prompt":"Create a Python program that implements a binary search on a given array of integers. arr = [3, 14, 25, 34, 51, 52, 74]","completion":"def binarysearch(arr, x): low = 0 high = len(arr) - 1 mid = 0 while low <= high: mid = (high + low) // 2 # Check if x is present at mid if arr[mid] < x: low = mid + 1 # If x is greater, ignore left half elif arr[mid] > x: high = mid - 1 # If x is smaller, ignore right half else: return mid # If we reach here, then the element # was not present return -1"},{"prompt":"Create a Python3 program to process a list of strings and print each string in uppercase. ['this', 'is', 'a', 'list', 'of', 'strings']","completion":"list_of_strings = ['this', 'is', 'a', 'list', 'of', 'strings'] for string in list_of_strings: print(string.upper())"},{"prompt":"Generate an optimized Python program to multiply two given matrices.","completion":"def matrix_multiply(mat1, mat2): result = [[0] * len(mat2[0]) for i in range(len(mat1))] for i in range(len(mat1)): for j in range(len(mat2[0])): for k in range(len(mat2)): result[i][j] += mat1[i][k] * mat2[k][j] return result"},{"prompt":"Explain what is a closure in Python","completion":"A closure in Python is a record storing a function and a surrounding environment. A closure allows a function to access and modify the local variables that were defined in the environment where the function was defined, even after the original environment no longer exists. In other words, a closure allows you to retain the state of a function even after it has returned from execution. Closures can be used to create objects with private variables, as any variables declared within a closure are private and inaccessible from outside the closure. This is a powerful tool for encapsulation, allowing for easier management and testing of code."},{"prompt":"Write a Python program to calculate the average and maximum temperature for each month in a given dataset. Dataset: Month | Temperature January | 10 January | 11 January | 12 February | 15 February | 13 February | 16","completion":"temperatures = { 'January': [10, 11, 12], 'February': [15, 13, 16] } # Calculate average temperature avgTemperatures = {} for month in temperatures: avgTemperatures[month] = sum(temperatures[month])/len(temperatures[month]) # Calculate maximum temperature maxTemperatures = {} for month in temperatures: maxTemperatures[month] = max(temperatures[month]) print('Average Temperatures:', avgTemperatures) print('Max Temperatures:', maxTemperatures)"},{"prompt":"Analyze and clean a dataset with exploratory data analysis methods using Python. Not applicable","completion":"# import necessary packages import pandas as pd import numpy as np import matplotlib.pyplot as plt # load the dataset data = pd.read_csv('TimeSeriesData.csv') # check for missing values data.isnull().sum() # check the data types data.dtypes # check the descriptive statistics data.describe() # visualize the data data.hist(bins = 50) plt.show() # check for outliers for column in data: data.boxplot(column, vert = False) plt.show()"},{"prompt":"Create a Python function that takes an integer as an input and returns all positive integers less than the input number. Integer: 10","completion":"def get_pos_int(num): pos_ints = [] for i in range(num): if i > 0: pos_ints.append(i) return pos_ints pos_ints = get_pos_int(10) print(pos_ints)"},{"prompt":"Optimize a Python program to calculate the solution for the 8 Queens Problem. Not applicable","completion":"def check(row, col): for (i, j) in zip(row[:col], range(col)): if abs(i - row[col]) == abs(j - col) or i == row[col]: return False return True def nQueens(n, row=None): if row is None: row = [0] * n if len(row) == n and check(row, n - 1): return [list(x) for x in set(tuple(x) for x in solutions)] else: for i in range(n): row[len(row)] = i if check(row, len(row) - 1): solutions.append(row[:]) x = nQueens(n, row[:]) if x != None: return x solutions = [] nQueens(8) print(solutions[0])"},{"prompt":"Create a function for checking valid passwords in Python.","completion":"def check_valid_password(pwd): length_valid = (len(pwd) >= 8) has_uppercase = False has_lowercase = False has_digit = False for char in pwd: if char.isupper(): has_uppercase = True elif char.islower(): has_lowercase = True elif char.isnumeric(): has_digit = True valid = length_valid and has_uppercase and has_lowercase and has_digit return valid"},{"prompt":"Write a Python script that generates a chess board with 8 rows and 8 columns of squares. Not applicable","completion":"# create 8 rows for row in range(8): # create 8 columns for col in range(8): # create a square square = {\\"row\\": row, \\"col\\": col} # If it is the first row or the last row of the board if row == 0 or row == 7: # if it is an odd square if (col % 2) == 0: # set the square to white square[\\"color\\"] = \\"white\\" else: square[\\"color\\"] = \\"black\\" # if it is the second row or the sixth row of the board elif row == 1 or row == 6: # if it is an even square if (col % 2) == 0: # set the square to white square[\\"color\\"] = \\"white\\" else: square[\\"color\\"] = \\"black\\" # if it is the third or fifth row of the board elif row == 2 or row == 5: # if it is an odd square if (col % 2) == 0: # set the square to black square[\\"color\\"] = \\"black\\" else: square[\\"color\\"] = \\"white\\" # if it is the fourth row of the board elif row == 3 or row == 4: # if it is an even square if (col % 2) == 0: # set the square to black square[\\"color\\"] = \\"black\\" else: square[\\"color\\"] = \\"white\\" print(square)"},{"prompt":"Create a Python program to calculate the minimum cost of connecting cities together. n = 4, costs = [[0,1,1],[0,2,5],[1,2,1],[2,3,8]]","completion":"def min_cost(n, costs): # create cost matrix matrix = [[float('inf')] * n for _ in range(n)] matrix[0][0] = 0 # populate cost matrix for cost in costs: start, end, value = cost[0], cost[1], cost[2] matrix[start][end] = value # traverse the matrix for i in range(n): for j in range(n): for k in range(n): if matrix[j][k] > matrix[j][i] + matrix[i][k]: matrix[j][k] = matrix[j][i] + matrix[i][k] # find the minimum cost min_cost = float('inf') for row in matrix: min_cost = min(min_cost, min(row)) return min_cost"},{"prompt":"Create a Python program to calculate the total price of a purchase including sales tax. tax rate: 8% quantity: 2 price: 10","completion":"# Defining Variables tax_rate = 0.08 quantity = 2 price = 10 # Calculating the Total Price total_price = (price * quantity) + (tax_rate * price * quantity) # Printing Out the Result print(\\"Total Price:\\", total_price)"},{"prompt":"Write a Python script for scraping text from a webpage.","completion":"import requests from bs4 import BeautifulSoup url = \\"http://example.com\\" page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') text = soup.find_all(text=True) for t in text: print(t)"},{"prompt":"Create a Python script that reads two integers from the user and prints out their sum.","completion":"# Taking two numbers from the user num1 = int(input(\\"Enter first number: \\")) num2 = int(input(\\"Enter second number: \\")) # Calculating the sum of two numbers sum = num1 + num2 # Printing out the sum print(\\"The sum of the two numbers is:\\", sum)"},{"prompt":"Develop an efficient sorting technique in Python to arrange the following list of strings. L1= [This, is, a, list, of, strings]","completion":"def sort_list(L1): L1.sort() return L1"},{"prompt":"Create a python script to group values according to given conditions. group1 = [1, 2, 3, 4] group2 = [5, 6, 7, 8] condition = lambda x: x > 5","completion":"group1 = [1, 2, 3, 4] group2 = [5, 6, 7, 8] condition = lambda x: x > 5 group_1 = list(filter(condition, group1)) group_2 = list(filter(condition, group2)) print(group_1) print(group_2)"},{"prompt":"mplement bubble sort in Python code.","completion":"def bubbleSort(arr): # Traverse through all array elements for i in range(len(arr)): # Last i elements are already in place for j in range(0, len(arr)-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [64, 34, 25, 12, 22, 11, 90] bubbleSort(arr)"},{"prompt":"Create a Python script which takes a list containing items and their prices and calculates the total cost. [('Bread', 5.99), ('Cheese', 4.99), ('Milk', 2.99)]","completion":"total = 0 items_with_price = [('Bread', 5.99), ('Cheese', 4.99), ('Milk', 2.99)] for item, price in items_with_price: total += price print(f'The total cost is {total}')"},{"prompt":"Generate an optimization algorithm with Python using the scipy.optimize library. An array of values for parameters a, b and c, and an optimization goal of maximizing the function f(x) = a * x + b * sin(c * x).","completion":"from scipy.optimize import minimize import numpy as np # define the parameters a, b, c = <array of values for parameters a, b and c> # define the objective function def f(x): return a * x + b * np.sin(c * x) # optimize result = minimize(f, 0, method='BFGS') # print the results print(result.x)"},{"prompt":"Translate the following code from JavaScript to Python function add(a, b){ return a + b; }","completion":"# Translate the following function from JavaScript to Python def add(a, b): return a + b"},{"prompt":"Write a Python program to predict the class label for a given data sample. X = [[2.2, 3.5], [2.7, 3.2]] y = [1, 0]","completion":"from sklearn.linear_model import LogisticRegression model = LogisticRegression() model.fit(X, y) def predict_class(X): pred = model.predict([X]) return pred"},{"prompt":"Create a function in Python to mask out any personal information from sensitive data. John Smith,1234567890","completion":"def mask_information(data): masked_data = \\"\\" for char in data: if char.isdigit(): masked_data += 'x' else: masked_data += char return masked_data masked_data = mask_information('John Smith,123-456-7890') print(masked_data) // John Smith,xxx-xxx-xxxx"},{"prompt":"Write a Python program to use the natural language processing library NLTK to classify emails into two categories: spam and nonspam. The following are five sample emails: 1. “Hey, I'm offering a 50% discount on our services!” 2. “Did you see the latest news about the software update?” 3. “Do you want to make money fast and easy?” 4. “Please save the date for our upcoming event on April 15th.” 5. “You have one last chance to get this limited offer!”","completion":"import nltk from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # sample emails emails = [ \\"Hey, I'm offering a 50% discount on our services!\\", \\"Did you see the latest news about the software update?\\", \\"Do you want to make money fast and easy?\\", \\"Please save the date for our upcoming event on April 15th.\\", \\"You have one last chance to get this limited offer!\\" ] labels = [1, 0, 1, 0, 1] # pre-process the emails email_words = [] for email in emails: email_words.append(' '.join(nltk.word_tokenize(email))) # feature extraction vectorizer = CountVectorizer() features = vectorizer.fit_transform(email_words) #naive bayes calssifier classifier = MultinomialNB() classifier.fit(features, labels) # test the model test_email = \\"Will you join us at the upcoming meeting?” test_email_words = ' '.join(nltk.word_tokenize(test_email)) test_features = vectorizer.transform([test_email_words]) # predict the class print(classifier.predict(test_features)) # output: [0] - non-spam email"},{"prompt":"Create a python program to remove all characters in a string that occur more than once string = aaabbcdefg","completion":"def remove_duplicates(string): unique_chars = \\"\\" for ch in string: if ch not in unique_chars: unique_chars += ch return unique_chars remove_duplicates(\\"aaabbcdefg\\") # returns \\"bcdefg\\""},{"prompt":"Generate a valid Python program that finds all the odd numbers in a given list of integers. [1, 2, 3, 4, 5, 6]","completion":"def find_odds(nums): result = [] for num in nums: if num % 2 == 1: result.append(num) return result odd_nums = find_odds([1, 2, 3, 4, 5, 6]) print(odd_nums)"},{"prompt":"Create a python code to print the frequency of each character in a string. String: Hello World","completion":"for char in \\"Hello World\\": print(char, \\":\\", \\"Hello World\\".count(char))"},{"prompt":"Write a Python function to check if a number is perfect or not. A perfect number is a positive integer which is equal to the sum of its positive divisors.","completion":"def is_perfect(n): sum = 0 for i in range(1, n): if (n % i == 0): sum += i return sum == n"},{"prompt":"Create a Natural Language Processing (NLP) model in Python to classify customer emails into two categories: spam and not spam. Not applicable","completion":"import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB # Read and preprocess the data dataset = pd.read_csv('train.csv') vectorizer = TfidfVectorizer() x_train = vectorizer.fit_transform(dataset['text']) y_train = dataset['label'] # Train the model model = MultinomialNB().fit(x_train, y_train) # Test the model x_test = vectorizer.transform(test_data['text']) predictions = model.predict(x_test)"},{"prompt":"Develop a Python program to print the Fibonacci series between 0 to 50.","completion":"def Fibonacci_Series(num): i = 0 First_Value = 0 Second_Value = 1 if num < 0: print(\\"Incorrect input\\") elif num == 0: print(First_Value) elif num == 1: print(First_Value,\\",\\",Second_Value,end=\\" , \\") else: print(First_Value,\\",\\",Second_Value,end=\\" , \\") while i < num-2: next_Value = First_Value + Second_Value print(next_Value,end=\\" , \\") First_Value = Second_Value Second_Value = next_Value i = i + 1 num = 50 Fibonacci_Series(num)"},{"prompt":"Create a Python program to fetch the data from a web page and store it into a dictionary.","completion":"import requests url = \\"https://example.com/data\\" response = requests.get(url) data = response.json() data_dict = {} for item in data: data_dict[item['id']] = item print(data_dict)"},{"prompt":"Create a Python program to extract the email and phone numbers within a given string. String: 'My email is hello@domain.com and my phone number is +123456789.'","completion":"import re text = 'My email is hello@domain.com and my phone number is +123456789' email = re.findall(\\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\", text) phone = re.findall(\\"+(9[976]d|8[987530]d|6[987]d|5[90]d|42d|3[875]d| 2[98654321]d{9}|9[8543210]d{8})b\\", text) print(email) print(phone)"},{"prompt":"Create a Python program that takes a list of carbohydrates [glucose, fructose, galactose] and calculates the net energy charge. [glucose, fructose, galactose]","completion":"net_energy_charge = 0 for carbohydrate in list_of_carbohydrates: if carbohydrate == 'glucose': net_energy_charge += -2.3 elif carbohydrate == 'fructose': net_energy_charge += -2.5 elif carbohydrate == 'galactose': net_energy_charge += -3 print(net_energy_charge)"},{"prompt":"This code is a script that runs MITObim for mitochondrial genome assembly. To use it, run the script with the following command line arguments: NumberOfReads ListOfFiles Reference [miramito/quickmito/seedmito] missmatch. If any of these arguments are not provided, the script will prompt you to enter them. The script will then iterate through each pair of files listed in ListOfFiles, create a folder for each pair, and run MITObim with the specified protocol and missmatch value. The resulting consensus sequence will be written to a fasta file with the format filename_protocol.fa.","completion":"#!/usr/bin/python import sys import os from subprocess import call from Bio import SeqIO print \\"Usage: mitobim_run.py NumberOfReads ListOfFiles Reference [miramito/quickmito/seedmito] missmatch\\" try: nreads = sys.argv[1] except: nreads = raw_input(\\"Introduce number of reads: \\") try: lista = sys.argv[2] except: lista = raw_input(\\"Introduce list of files: \\") try: ref = sys.argv[3] except: ref = raw_input(\\"Introduce Fasta file as reference: \\") try: prot = sys.argv[4] except: prot = raw_input(\\"Introduce protocol name (miramito/quickmito/seedmito): \\") try: mism = sys.argv[5] except: mism = \\"15\\" manifest = \\"\\"\\"echo \\"n#manifest file for basic mapping assembly with illumina data using MIRA 4nnproject = initial-mapping-testpool-to-Salpinus-mtnnjob=genome,mapping,accuratennparameters = -NW:mrnl=0 -AS:nop=1 SOLEXA_SETTINGS -CO:msr=nonnreadgroupnis_referencendata = reference.fanstrain = Salpinus-mt-genomennreadgroup = readsndata = reads.fastqntechnology = solexanstrain = testpooln\\" > manifest.conf\\"\\"\\" miramito = \\"\\"\\"mira manifest.conf && MITObim_1.8.pl --missmatch %s --clean -start 1 -end 1000 -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq -maf initial-mapping-testpool-to-Salpinus-mt_assembly/initial-mapping-testpool-to-Salpinus-mt_d_results/initial-mapping-testpool-to-Salpinus-mt_out.maf > log\\"\\"\\" % mism quickmito = \\"\\"\\"MITObim_1.8.pl -start 1 -end 1000 -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq --missmatch %s --quick reference.fa --clean > log\\"\\"\\" % mism seedmito = \\"\\"\\"MITObim_1.8.pl -sample testpool -ref Salpinus_mt_genome -readpool reads.fastq --quick reference.fa --missmatch %s -end 1000 --clean > log\\"\\"\\" % mism miramitoout = \\"\\"\\"/testpool-Salpinus_mt_genome_assembly/testpool-Salpinus_mt_genome_d_results/testpool-Salpinus_mt_genome_out_testpool.unpadded.fasta\\"\\"\\" pairs = open(lista).readlines() npairs = len(pairs)/2 for npair in range(0,npairs): pairone = pairs[npair*2][:-1] pairtwo = pairs[(npair*2)+1][:-1] name = \\"\\" paironesplit = pairone.split(\\".\\") if paironesplit[-1] == \\"gz\\": name = \\".\\".join(paironesplit[0:-2]) elif paironesplit[-1] == \\"fastq\\" or paironesplit[-1] == \\"fq\\": name = \\".\\".join(paironesplit[0:-1]) name = name[:-2] foldername = \\"%s_%s\\" % (name,prot) call(\\"mkdir %s\\" % foldername , shell=True) os.chdir(foldername) print \\"nStarting with \\" + name call(\\"seqtk sample -s100 ../%s %s > %s\\" % (pairone,nreads,name+\\".fq.subset1\\"), shell=True) call(\\"seqtk sample -s100 ../%s %s > %s\\" % (pairtwo,nreads,name+\\".fq.subset2\\"), shell=True) call(\\"shuffleSequences_fastq.pl %s %s %s\\" % (name+\\".fq.subset1\\",name+\\".fq.subset2\\",name+\\".shuffled.fastq\\"), shell=True) call(\\"ln -sf %s reads.fastq\\" % (name+\\".shuffled.fastq\\"), shell=True) call(\\"ln -sf ../%s reference.fa\\" % ref, shell=True) if prot == \\"miramito\\": call(manifest, shell=True) call(miramito, shell=True) elif prot == \\"quickmito\\": call(quickmito, shell=True) elif prot == \\"seedmito\\": call(seedmito, shell=True) else: break list_dir = os.listdir(\\".\\") list_dir.sort() iterations = [] for dir in list_dir: if dir.startswith(\\"iteration\\"): iterations.append(dir) os.chdir(\\"../\\") consensus = \\"%s/%s\\" % (foldername,iterations[-1]+miramitoout) secus = SeqIO.parse(open(consensus), \\"fasta\\") out = open(\\"%s_%s.fa\\" % (name,prot), \\"w\\") i = 0 for secu in secus: i+=1 s = str(secu.seq) s = s.replace(\\"x\\",\\"n\\") out.write(\\">%s_%s_%sn%sn\\" % (name,prot,i, s)) out.close() print name + \\" finalized!!!\\""},{"prompt":"Create a search engine in Python using a TFIDF algorithm. Not applicable","completion":"import nltk import string import os from sklearn.feature_extraction.text import TfidfVectorizer from nltk.stem.porter import PorterStemmer #files in th eclipse path = 'data' token_dict = {} stemmer = PorterStemmer() #read all the files in the given directory def stem_tokens(tokens, stemmer): stemmed = [] for item in tokens: stemmed.append(stemmer.stem(item)) return stemmed #read the file and add the tokens to token dict def tokenize(text): token = [t.lower() for t in nltk.word_tokenize(text)] tokens = [word for word in token if word not in string.punctuation] stems = stem_tokens(tokens, stemmer) return stems for subdir, dirs, files in os.walk(path): for file in files: file_path = subdir + os.path.sep + file f = open(file_path, 'r') text = f.read() token_dict[file] = text #create TFIDF vectorizer tfidfvectorizer = TfidfVectorizer(tokenizer=tokenize, stop_words='english') #train the vectorizer tfidfvectorizer.fit_transform(token_dict.values()) #function to search the files def search(query): query_tfidfvectorizer = tfidfvectorizer.transform([query]) #search for the files results = tfidfvectorizer.transform(token_dict.values()).transpose() * query_tfidfvectorizer best_result_index = results.argmax() return list(token_dict.keys())[best_result_index]"},{"prompt":"Create an algorithm to check if a sentence is a palindrome in Python. Sentence: Rise to vote, Sir","completion":"def is_sentence_palindrome(sentence): sentence = sentence.lower().replace(\\" \\", \\"\\") return sentence == sentence[::-1] is_sentence_palindrome(\\"Rise to vote, Sir\\") # False"},{"prompt":"Create a Python program to sort a list in O(n) time.","completion":"def sort_list_in_O_n(lst): n = len(lst) for i in range(n-1): for j in range(0, n-i-1): if lst[j] > lst[j+1] : lst[j], lst[j+1] = lst[j+1], lst[j]"},{"prompt":"Create a python program to convert the given time value to 24hour time format. time = '08:45 PM'","completion":"time_24_hour = '20:45'"},{"prompt":"Convert this psuedocode into a Python program. num = 0 while num < 20: print (num) num += 4","completion":"num = 0 while num < 20: print (num) num += 4"},{"prompt":"Create a Python program that adds logic programming (Prolog) syntax and resolution into Python. Define a Struct class that takes a database, head, and subs as input and adds it to the database. Implement unary + to insert into the database as fact, unary ~ to insert into the database as a query, and << to add a conditional. Define a Symbol class that takes a name and database as input and returns a Variable or Constant object. Implement a Database class that stores facts, conditionals, and queries. Implement a solve method that extends valuations in V satisfying the last query. Implement a unify method that finds one valuation extending v and unifying x with y. Define a LogicalFunction class that replaces a logical function once it has been consulted.","completion":"# # pythologic2.py # # Add logic programming (Prolog) syntax and *resolution* into Python. # # (c) 2004 Francisco Coelho # after (c) 2004 Shai Berger # and AIMA examples # import string import copy class Struct: def __init__(self, database, head, subs): \\"\\"\\" The head and subs are essential - what makes this struct. The database should only be used while structs are constructed, and later removed. \\"\\"\\" self.database = database self.head = head self.subs = subs def __pos__(self): \\"\\"\\" unary + means insert into database as fact \\"\\"\\" self.database.add_fact(self) def __invert__(self): \\"\\"\\" unary ~ means insert into database as query \\"\\"\\" self.database.add_query(self) def __lshift__(self, requisites): \\"\\"\\" The ideal is consequent(args) << cond1(args1),... for now we must do with consequent(args) << [cond1(args1),...] \\"\\"\\" self.database.add_conditional(self, requisites) def __str__(self): subs = map (str, self.subs) return str(self.head) + \\"(\\" + string.join(subs,',') + \\")\\" class Symbol: def __init__ (self, name, database): self.name = name self.database = database def __call__(self, *args): return Struct(self.database, self, args) def __str__(self): return self.name class Constant(Symbol): \\"\\"\\" A constant is a name. Its value is its name too. \\"\\"\\" def value(self): return self.name class Variable(Symbol): pass def symbol(name, database): if (name[0] in string.uppercase): return Variable(name,database) else: return Constant(name, database) class Database: def __init__(self, name): self.name= name self.facts = [] self.conditionals = [] self.queries = [] def add_fact(self, fact): self.facts.append(fact) def add_query(self, query): self.queries.append(query) def add_conditional(self,head,requisites): if not(isinstance(requisites, list)): requisites = [requisites] self.conditionals.append((head,requisites)) def __str__(self): factsStr= string.join(map(str, self.facts),'n') condsStr= '' for (h,r) in self.conditionals: condsStr = condsStr + \\"%s << %sn\\"%(h,string.join( map(str, r), ', ')) queryStr= string.join( map(str, self.queries),'n') return self.name + ' factsn' + factsStr +'n'+self.name + ' conditionalsn'+ condsStr + 'n'+self.name + ' queriesn'+queryStr + 'n' def append(self, func): \\"\\"\\" Include definitions from func into database \\"\\"\\" try: code = func.func_code except: raise TypeError, \\"function or method argument expected\\" names = code.co_names locally_defined = code.co_varnames globally_defined = func.func_globals.keys() defined = locally_defined+tuple(globally_defined) undefined = [name for name in names if name not in defined] newglobals = func.func_globals.copy() for name in undefined: newglobals[name] = symbol(name, self) exec code in newglobals def __lshift__(self, func): \\"\\"\\" A helper for decorator implementation \\"\\"\\" self.append(func) return LogicalFunction(self, func) def solve(self, V = [{}]): \\"\\"\\" The query queue is LIFO: Extend valuations in V satisfying the last query. \\"\\"\\" def solve1( v ): # get solutions from facts unify_facts = [unify(query, fact, v) for fact in self.facts] # look for solutions from conditionals unify_conditionals = [] for ( header , condition_list ) in self.conditionals: u = unify(query, header , v) # unify headers U = [ u ] if u != None: # remember query queue oldQueries = copy.deepcopy(self.queries) # we want to start by the first conditional D = copy.copy( condition_list ) D.reverse() # phase 1: append the conditionals to query queue for condition in D: if type( condition ) == type('string'): # process python code # should return True or False self.queries.append( condition ) #eval_python_string( condition , u) else: # append the conditional, # with variables replaced according to u # to the query queue unified_condition = subst(u, condition ) self.queries.append( unified_condition ) # phase 2: solve the appended conditionals for condition in D: U = self.solve( U ) # restore query queue self.queries = oldQueries # grow the list of solutions unify_conditionals = unify_conditionals + U return [ u for u in (unify_facts + unify_conditionals) if not u in [None, {}] ] if self.queries: query = self.queries[-1] del self.queries[-1] else: return [] if type( query ) == type( 'string' ): U = [ v for v in V if python_eval_string(query, v) ] else: U = [] for v in V: U = U + solve1(v) return U def python_eval_string(s, v): for k in v: s=string.replace(s, str(k), str(v[k])) return eval( s, {} ) def subst(v, x): if v.has_key(x): return v[x] elif isinstance(x, Variable): return x elif isinstance(x, Struct): return Struct( x.database, x.head, [subst(v, xi) for xi in x.subs]) def unify(x,y,v={}): \\"\\"\\" Find one valuation extending v and unifying x with y \\"\\"\\" def extend(v, x, t): \\"\\"\\" Extend valuation v with v[x] = t \\"\\"\\" v1 = copy.copy(v) v1[x] = t return v1 def occur_check(x, t): \\"\\"\\" Test if the variable x occurr in structure t \\"\\"\\" if x == t: return True elif isinstance(t, Struct): return t.head == x.head or occur_check(x, t.subs) return False def unify_var(x, t, v): \\"\\"\\" Test if v can be extended with v[x] = t; In that case return the extention Else return None \\"\\"\\" if x in v: return unify( v[ x ], t, v) elif occur_check(x, t): return None else: return extend(v, x, t) if v == None: return None elif x == y: return v elif isinstance(x, Variable): return unify_var(x, y, v) elif isinstance(y, Variable): return unify_var(y, x, v) elif isinstance(x, Struct) and isinstance(y, Struct) and (x.head == y.head): z = v n = len(x.subs) m = len(y.subs) if n == m: for i in range( n ): z = unify( x.subs[i], y.subs[i], z) return z else: return None else: return None class LogicalFunction: \\"\\"\\" This class replaces a logical function once it has been consulted, to avoid erroneous use \\"\\"\\" def __init__(self, database, func): self.database=database self.logical_function=func def __call__(self): raise TypeError, \\"Logical functions are not really callable\\" if __name__ == \\"__main__\\": db = Database('TEST') print \\"Defining a prolog program... \\", def prolog_func(): # prolog facts are prefixed with \\"+\\" + number(0) + number(1) + number(2) + number(3) + number(4) # prolog conditionals have the pattern p << [q1, ..., qn] test(X, Y) << [number(X), number(Y), 'X==2*Y' ] # prolog queries are prefixed with \\"~\\" ~ test(X, Y) # Update the database db << prolog_func print \\"done\\" print \\"Before solving\\" print db # Solve the queries x = db.solve() print 'Solutions' for v in x: for k in v: print k,\\"=\\", v[k],' ', print print \\"After solving\\" print db"},{"prompt":"Create a neural network in Python for a binary classification problem with two classes. Not applicable","completion":"import keras from keras.models import Sequential from keras.layers import Dense, Activation, Dropout # Create the model model = Sequential() model.add(Dense(32, input_shape=(2,))) model.add(Activation('relu')) model.add(Dense(2)) model.add(Activation('softmax')) # Compile the model model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"},{"prompt":"Design a Python program to read in a list of integers and remove any duplicates from the list. Not applicable","completion":"def remove_duplicates(lst): unique_list = [] for item in lst: if item not in unique_list: unique_list.append(item) return unique_list lst = [1, 2, 3, 4, 5, 1, 2, 3] unique_list = remove_duplicates(lst) print(unique_list) # Output [1, 2, 3, 4, 5]"},{"prompt":"Automate a customer segmentation system using a clustering technique in Python. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.cluster import KMeans # Load the customer data data = pd.read_csv('customer_data.csv') # Extract relevant features features = ['age', 'spending', 'income'] X = data[features] # Create the model and determine the optimum number of clusters model = KMeans(n_clusters=3) model.fit(X) # Add the predicted clusters back to the data data['cluster'] = model.predict(X) # Calculate the centroids of each cluster centroids = model.cluster_centers_ # Get the labels of each cluster labels = model.labels_ # Print the cluster centroids print(centroids)"},{"prompt":"Generate a Python program for reversing a string. string = Hello World","completion":"string = \\"Hello World\\" # get length of the string length = len(string) # create an empty string reverse = \\"\\" # loop backword through the string for i in range(length-1, -1, -1): # add current character to empty string reverse = reverse + string[i] # print out the result print(reverse)"},{"prompt":"Create a program in Python that takes an integer and prints out the Fibonacci sequence up to the given integer. 17","completion":"def fibonacci(num): if num<=0: print(\\"Incorrect input\\") elif num==1: return 0 elif num==2: return 1 else: return fibonacci(num-1)+fibonacci(num-2) for x in range(1, num+1): print(fibonacci(x))"},{"prompt":"Write a Python function to search for an element in a given array of integers.","completion":"def search_in_list(list, element): for item in list: if item == element: return element return None result = search_in_list([1,5,8,2], 2) print(result)"},{"prompt":"Create a Python method which takes a String and two integers as parameters, and returns the String with the characters between the integers reversed. String: Hello world 1st Integer: 0 2nd Integer: 5","completion":"def reverse_substring(sentence, start, end): reversed = sentence[end:start-1:-1] return sentence[:start] + reversed + sentence[end+1:] result = reverse_substring(\\"Hello world\\", 0, 5) print(result)"},{"prompt":"mplement ObjectOriented Programming in this blog post. Blog post content: This post is about the basics of Python programming. You'll learn about data types, loops, and functio","completion":"# Object-Oriented Programming Implementation class Python: # Basic data types INTEGER = \\"integer\\" FLOAT = \\"float\\" STRING = \\"string\\" BOOLEAN = \\"boolean\\" def __init__(self): self.__data_types = [self.INTEGER, self.FLOAT, self.STRING, self.BOOLEAN] # Function to get the data types def get_data_types(self): return self.__data_types # Loops # Function to loop through a list def loop_list(self, collection): for item in collection: print(item) # Function to loop through a range def loop_range(self, start, end): for i in range(start,end): print(i) # Functions # Function to calculate the sum def sum_nums(self, num1, num2): return num1+num2 # Function to calculate the product def multiply_nums(self, num1, num2): return num1*num2 # Main code python = Python() data_types = python.get_data_types() print(\\"Data Types: \\", data_types) numbers = [1,2,3,4] python.loop_list(numbers) python.loop_range(1, 10) print(\\"Sum: \\", python.sum_nums(4,5)) print(\\"Product: \\", python.multiply_nums(4,5))"},{"prompt":"Edit the Python 3 code below so that it returns the sum of the two integers a and b. a = 3 b = 5","completion":"def add_numbers(a, b): return a + b if __name__ == '__main__': a = 3 b = 5 result = add_numbers(a, b) print(result)"},{"prompt":"Using Python, create a calculator that can perform basic operations such as addition, subtraction, multiplication, and division.","completion":"# Program to create a basic calculator # Function to add two numbers def add(num1, num2): return num1 + num2 # Function to subtract two numbers def subtract(num1, num2): return num1 - num2 # Function to multiply two numbers def multiply(num1, num2): return num1 * num2 # Function to divide two numbers def divide(num1, num2): return num1 / num2 print(\\"Please select operation:\\") print(\\"1. Add\\") print(\\"2. Subtract\\") print(\\"3. Multiply\\") print(\\"4. Divide\\") # Take input from the user select = int(input(\\"Select operations form 1, 2, 3, 4 :\\")) number_1 = int(input(\\"Enter first number: \\")) number_2 = int(input(\\"Enter second number: \\")) if select == 1: print(number_1, \\"+\\", number_2, \\"=\\", add(number_1, number_2)) elif select == 2: print(number_1, \\"-\\", number_2, \\"=\\", subtract(number_1, number_2)) elif select == 3: print(number_1, \\"*\\", number_2, \\"=\\", multiply(number_1, number_2)) elif select == 4: print(number_1, \\"/\\", number_2, \\"=\\", divide(number_1, number_2)) else: print(\\"Invalid input\\")"},{"prompt":"Create a Raspberry Pi Python script that reads temperature and humidity via a sensor and logs the data to a remote database. Not applicable","completion":"import sys import Adafruit_DHT import time import requests sensor = Adafruit_DHT.DHT11 pin = 23 while True: humidity, temperature = Adafruit_DHT.read_retry(sensor, pin) if humidity is not None and temperature is not None: payload = {'temperature': temperature, 'humidity': humidity} r = requests.post('http://mydatabase.url/api/data', json=payload, verify=False) print('Temp={0:0.1f}°C Humidity={1:0.1f}%'.format(temperature, humidity)) time.sleep(60) else: print('Failed to get reading. Try again!') sys.exit(1)"},{"prompt":"Generate a correct Python program to print out the sequence of numbers in ascending order from a given list. [10, 5, 2, 8, 12]","completion":"for i in sorted([10, 5, 2, 8, 12]): print(i)"},{"prompt":"Modify the following python code to take in an argument to carry out a specific operation and print it out. def operation(): result = 2*2 print(result)","completion":"def operation(op): result = eval(op) print(result) operation('2*2') # prints 4"},{"prompt":"Generate a complete send/receive system in Python that incorporates encryption and decryption. Not applicable","completion":"import socket import os from cryptography.fernet import Fernet # generate an encryption key key = Fernet.generate_key() # create a socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # bind the socket sock.bind(('127.0.0.1', 8080)) # wait for incoming connections sock.listen() conn, addr = sock.accept() with conn: print('Connected by', addr) while True: # get the incoming message msg = conn.recv(1024) # decrypt the message with the key f = Fernet(key) decrypted_msg = f.decrypt(msg) # do something with the message print('Message:', decrypted_msg) # send a reply reply = 'Thanks for the message' encrypted_reply = f.encrypt(reply) conn.sendall(encrypted_reply)"},{"prompt":"Create a Python program to scrape data from a website. The program should accept the website's URL as input. https://example.com","completion":"import requests from bs4 import BeautifulSoup url = \\"https://example.com\\" response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') # Scrape data from the website # ... # ..."},{"prompt":"Construct a python program to keep track of the total number of times each word in an input string has been encountered. This is a test string and this is a test string again","completion":"# Defining a function to keep track of the total number of times each word in an input string has been encountered def count_words(input_string): words_dict = dict() for word in input_string.split(): if word not in words_dict: words_dict[word] = 1 else: words_dict[word] += 1 return words_dict # Testing the count_words() function input_string = \\"This is a test string and this is a test string again\\" print(count_words(input_string)) # {'This': 2, 'is': 2, 'a': 2, 'test': 2, 'string': 2, 'and': 1, 'again': 1}"},{"prompt":"Create a Supplier model with a name, type, stock management, module identifier, and module data fields. The model should implement the ModuleInterface and ShuupModel. It should also have methods to get orderability errors, stock statuses, suppliable products, and adjust/update stock. Finally, define a SupplierLogEntry model using the define_log_model function.","completion":"# -*- coding: utf-8 -*- # This file is part of Shuup. # # Copyright (c) 2012-2016, Shoop Ltd. All rights reserved. # # This source code is licensed under the AGPLv3 license found in the # LICENSE file in the root directory of this source tree. from django.db import models from django.utils.encoding import python_2_unicode_compatible from django.utils.translation import ugettext_lazy as _ from enumfields import Enum, EnumIntegerField from jsonfield import JSONField from shuup.core.fields import InternalIdentifierField from shuup.core.modules import ModuleInterface from shuup.utils.analog import define_log_model from ._base import ShuupModel class SupplierType(Enum): INTERNAL = 1 EXTERNAL = 2 class Labels: INTERNAL = _('internal') EXTERNAL = _('external') @python_2_unicode_compatible class Supplier(ModuleInterface, ShuupModel): default_module_spec = \\"shuup.core.suppliers:BaseSupplierModule\\" module_provides_key = \\"supplier_module\\" identifier = InternalIdentifierField(unique=True) name = models.CharField(verbose_name=_(\\"name\\"), max_length=64) type = EnumIntegerField(SupplierType, verbose_name=_(\\"supplier type\\"), default=SupplierType.INTERNAL) stock_managed = models.BooleanField(verbose_name=_(\\"stock managed\\"), default=False) module_identifier = models.CharField(max_length=64, blank=True, verbose_name=_('module')) module_data = JSONField(blank=True, null=True, verbose_name=_(\\"module data\\")) def __str__(self): return self.name def get_orderability_errors(self, shop_product, quantity, customer): \\"\\"\\" :param shop_product: Shop Product :type shop_product: shuup.core.models.ShopProduct :param quantity: Quantity to order :type quantity: decimal.Decimal :param contect: Ordering contact. :type contect: shuup.core.models.Contact :rtype: iterable[ValidationError] \\"\\"\\" return self.module.get_orderability_errors(shop_product=shop_product, quantity=quantity, customer=customer) def get_stock_statuses(self, product_ids): \\"\\"\\" :param product_ids: Iterable of product IDs :return: Dict of {product_id: ProductStockStatus} :rtype: dict[int, shuup.core.stocks.ProductStockStatus] \\"\\"\\" return self.module.get_stock_statuses(product_ids) def get_stock_status(self, product_id): \\"\\"\\" :param product_id: Product ID :type product_id: int :rtype: shuup.core.stocks.ProductStockStatus \\"\\"\\" return self.module.get_stock_status(product_id) def get_suppliable_products(self, shop, customer): \\"\\"\\" :param shop: Shop to check for suppliability :type shop: shuup.core.models.Shop :param customer: Customer contact to check for suppliability :type customer: shuup.core.models.Contact :rtype: list[int] \\"\\"\\" return [ shop_product.pk for shop_product in self.shop_products.filter(shop=shop) if shop_product.is_orderable(self, customer, shop_product.minimum_purchase_quantity) ] def adjust_stock(self, product_id, delta, created_by=None, type=None): from shuup.core.suppliers.base import StockAdjustmentType adjustment_type = type or StockAdjustmentType.INVENTORY return self.module.adjust_stock(product_id, delta, created_by=created_by, type=adjustment_type) def update_stock(self, product_id): return self.module.update_stock(product_id) def update_stocks(self, product_ids): return self.module.update_stocks(product_ids) SupplierLogEntry = define_log_model(Supplier)"},{"prompt":"Design an objectoriented program in Python that models a library and displays books that are checked out.","completion":"class Library: def __init__(self, name, books): self.name = name self.books = books def show_checked_out_books(self): for book in self.books: if book.checked_out: print (\\"Name: {}, Author: {}\\".format(book.name, book.author)) class Book: def __init__(self, name, author, checked_out): self.name = name self.author = author self.checked_out = checked_out library = Library(\\"My Library\\", [Book(\\"Harry Potter\\", \\"JK Rowling\\", True), Book(\\"Lord of the Rings\\", \\"JRR Tolkien\\", False)]) library.show_checked_out_books()"},{"prompt":"Design a class in Python for hashing passwords.","completion":"import hashlib class PasswordHasher: def __init__(self, algorithm='sha256'): self.algorithm = algorithm def generate_hash(self, password): \\"\\"\\" Generates a hash string using the given algorithm. \\"\\"\\" hash_value = hashlib.new(self.algorithm) hash_value.update(password.encode('utf-8')) return hash_value.hexdigest()"},{"prompt":"Create a Python program to build a dictionary of each unique word in the text and the number of times it appears. text = In computing, a hash table (hash map) is a data structure which implements an associative array abstract data type, a structure that can map keys to values. A hash table uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found.","completion":"words = text.split(' ') words_dict = {} for word in words: if word not in words_dict: words_dict[word] = 1 else: words_dict[word] += 1 print(words_dict)"},{"prompt":"Create a simple Python script/program to fetch the current stock price of a company from an online financial service. Company Name: Apple","completion":"import requests # Company Name company_name = “Apple” # Fetch the current stock price using an API call api_url = f\\"https://financial-service.com/api/get_price/{company_name}\\" response = requests.get(api_url) print(response.text) # Output current stock price current_price = response.text print(f\\"The current stock price of {company_name} is {current_price}\\")"},{"prompt":"Develop a class in Python to store information about a customer.","completion":"class Customer: ''' A class used to store information about a Customer. Attributes: name (str): the customer's name address (str): the customer's address phone_number (str): the customer's phone number email (str): the customer's email ''' def __init__(self, name, address, phone_number, email): self.name = name self.address = address self.phone_number = phone_number self.email = email def display_info(self): print('Name: {}nAddress: {}nPhone Number: {}nEmail: {}'.format(self.name, self.address, self.phone_number, self.email))"},{"prompt":"Develop a class in Python to represent a Bank Account and implement functions to perform transactions.","completion":"class BankAccount: def __init__(self, name, balance): self.name = name self.balance = balance def deposit(self, amount): self.balance += amount def withdraw(self, amount): self.balance -= amount def check_balance(self): return self.balance"},{"prompt":"Write a Python program to compare two strings and return the longest common substrings. String 1: abcde String 2: abcxyz","completion":"def longest_common_substring(str1, str2): # a 2D array to store the comparison comparison = [[0 for i in range(len(str2)+1)] for j in range(len(str1)+1)] result = \\"\\" # To store the result print(comparison) # iterate through the 2D array comparing each character for i in range(1, len(str1) + 1): for j in range(1, len(str2) + 1): # check if the characters match if str1[i-1] == str2[j-1]: comparison[i][j] = comparison[i - 1][j - 1] + 1 # update the result if a longer common substring is found if comparison[i][j] > len(result): result = str1[i - comparison[i][j]:i] else: comparison[i][j] = 0 return result common_str = longest_common_substring(str1, str2) print(\\"The longest common substring is: \\" + common_str)"},{"prompt":"Create a Python function to find the probability of an event using the binomial distribution. n = 10 p = 0.5 x = 6","completion":"from math import factorial def binomial_probability(n, p, x): \\"\\"\\"Find the probability of an event using the binomial distribution. Args: n (int): The number of trials. p (float): The probability of success of the event. x (int): The number of successes. Returns: float: The probability of x successes in n trials. \\"\\"\\" return factorial(n)/(factorial(x)*factorial(n-x)) * p**x * (1-p)**(n-x) if __name__ == '__main__': n = 10 p = 0.5 x = 6 result = binomial_probability(n, p, x) print(result)"},{"prompt":"Write a Python program to convert a list into a tuple. [3, 4, 5, 6]","completion":"list = [3, 4, 5, 6] tuple = tuple(list) print(\\"Tuple:\\", tuple)"},{"prompt":"Create a for loop in python to search for a word in a given list. The list is ['cat', 'dog', 'bird', 'tiger']","completion":"def find_word(my_list, word): for i in my_list: if i == word: return True return False"},{"prompt":"Using a given dataset, create a visualization in Python to identify how many of each type of fruit has been sold. The dataset has 24 observations and three variables (fruit type, quantity and price). Fruit Quantity Price Banana 20 5 Orange 30 3 Apple 50 4 Pear 10 2 ... ... ...","completion":"import matplotlib.pyplot as plt import pandas as pd # Read data data = pd.read_csv(\\"fruits.csv\\") # Get fruit types types = data['Fruit'].unique() # Calculate quantity for each type quantity = [sum(data['Quantity'][data['Fruit'] == t]) for t in types] # Plot the bar chart plt.bar(types, quantity) # Add title, x and y axis labels and legend plt.title('Quantity of Fruits sold') plt.xlabel('Fruit Type') plt.ylabel('Quantity') plt.legend('Quantity sold') # Show the plot plt.show()"},{"prompt":"Write a python program to calculate the longest increasing subsequence of an array.","completion":"def longest_increasing_subsequence(arr): n = len(arr) # Declare the list (array) for LIS and # initialize LIS values for all indexes lis = [1]*n # Compute optimized LIS values in bottom up manner for i in range (1 , n): for j in range(0 , i): if arr[i] > arr[j] and lis[i]< lis[j] + 1 : lis[i] = lis[j]+1 # Initialize maximum to 0 to get the maximum of all # LIS maximum = 0 # Pick maximum of all LIS values for i in range(n): maximum = max(maximum , lis[i]) return maximum"},{"prompt":"Create a Python program that uses a dictionary to convert Fahrenheit temperatures to Celsius temperatures. Not applicable","completion":"def fahrenheit_to_celsius(fahrenheit: float): \\"\\"\\"Converts Fahrenheit temperatures to Celsius\\"\\"\\" return (fahrenheit - 32) * 5/9 temperatures_in_celsius = { 'Steven' : fahrenheit_to_celsius(98.6), 'Thomas' : fahrenheit_to_celsius(99.8), 'Nicole' : fahrenheit_to_celsius(100.4) } print(temperatures_in_celsius)"},{"prompt":"Create a Python script to generate random numbers between 1 and 100.","completion":"import random # Generate 10 random numbers between 1 and 100 for _ in range(10): print(random.randint(1, 100))"},{"prompt":"Design a function in Python to remove the vowels from a given string. text = Hello World","completion":"def remove_vowels(text): \\"\\"\\"Remove the vowels from a given string.\\"\\"\\" vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] result = \\"\\" for char in text: if char.lower() not in vowels: result += char return result # Output print(remove_vowels(text))"},{"prompt":"Write a Python program to calculate the total number of days between two given dates. First date: 20 Dec 2020 Second date: 10 Jan 2021","completion":"from datetime import date def daysDifference(date1, date2): return (date2-date1).days date1 = date(2020, 12, 20) date2 = date(2021, 1, 10) print(daysDifference(date1, date2))"},{"prompt":"Create a neural network in Python to classify fruits into one of three categories (apples, oranges, and pears). Not applicable","completion":"import numpy as np from keras.utils import to_categorical from keras.models import Sequential from keras.layers import Dense # Data x_data = np.array([1,2,3,4,5,6,7,8,9,10]) labels = ['apple', 'apple', 'orange', 'orange', 'pear', 'pear', 'apple', 'orange', 'pear', 'apple'] # One-hot encoding y_data = to_categorical([labels.index(label) for label in labels]) # Model building model = Sequential() model.add(Dense(units=3, activation='softmax', input_dim=1)) model.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy']) model.fit(x_data, y_data, batch_size=10, epochs=100, verbose=2) # Predictions predictions = model.predict(x_data) # Print predictions for (x, prediction) in zip(x_data, predictions): print('x={0} -- Predicted class={1}'.format(x, np.argmax(prediction)))"},{"prompt":"Create a Python Flask application with an API backend. The application should allow users to search and rate movies. The API should have endpoints for movie search, movie rating and reviews retrieval. Not applicable","completion":"from flask import Flask, request import requests app = Flask(__name__) @app.route('/movie/search', methods=['GET']) def search_movie(): query = request.args.get('query') api_key = '<YOUR_API_KEY>' url = 'http://www.omdbapi.com/?apikey={}&s={}'.format(api_key, query) response = requests.get(url).json() movies = [] for movie in response['Search']: movies.append({ 'title': movie['Title'], 'id': movie['imdbID'], 'year': movie['Year'], 'poster': movie['Poster'], }) return { 'movies': movies } @app.route('/movie/<movie_id>/rating', methods=['GET']) def get_movie_rating(movie_id): url = 'http://www.omdbapi.com/?apikey={}&i={}'.format(api_key, movie_id) response = requests.get(url).json() return { 'rating': response['imdbRating'] } @app.route('/movie/<movie_id>/reviews', methods=['GET']) def get_movie_reviews(movie_id): url = 'http://www.omdbapi.com/?apikey={}&i={}'.format(api_key, movie_id) response = requests.get(url).json() reviews = [] for review in response['Ratings']: reviews.append({ 'source': review['Source'], 'score': review['Value'], }) return { 'reviews': reviews } if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write Python code to classify input sentences into positive and negative sentiment using Naive Bayes classifier.","completion":"import numpy as np from sklearn.naive_bayes import BernoulliNB def predict_sentiment(clf, features): # Predict the sentiment from features using the Naive Bayes classifier return clf.predict(features) def train_naive_bayes(features, labels): \\"\\"\\" Train a Naive Bayes classifier on a set of features and labels :param features: The array of features :param labels: The corresponding labels :return: A trained Naive Bayes classifier \\"\\"\\" # Create a Bernoulli Naive Bayes classifier clf = BernoulliNB() # Train the classifier clf.fit(features, labels) return clf def extract_features_from_sentences(sentences): \\"\\"\\" Extract features from sentences :param sentences: An array of sentences :return: Array of feature vectors for each sentence \\"\\"\\" # Get the length of each sentence len_features = [len(sentence.split()) for sentence in sentences] # Return the feature vector containing the lengths of each sentence return np.array([len_features])"},{"prompt":"Automate this Excel task using Python. abc,1 def,2 ghi,3 jkl,4","completion":"import pandas as pd # Read data df = pd.read_csv(\\"data.csv\\") # Perform tasks df['result'] = df['column2'] + df['column2'] # Write the result df.to_csv(\\"result.csv\\", index=False)"},{"prompt":"Optimize this Python code for inserting a large number of records into an existing MongoDB collection. people = [ { 'name': 'John Doe', 'age': 30 }, { 'name': 'Jane Doe', 'age': 28 }, ... ]","completion":"import pymongo client = pymongo.MongoClient('mongodb://localhost:27017/') db = client['database_name'] collection = db['collection_name'] # Use bulk_write to insert a large number of documents collection.bulk_write([ pymongo.InsertOne(document) for document in people ])"},{"prompt":"Create a Python program to check if two given lists are disjoint. list1 = [2, 3, 4, 5] list2 = [6, 7, 8, 9]","completion":"def check_disjoint(list1, list2): return not bool(set(list1) & set(list2)) result = check_disjoint(list1, list2) print(result)"},{"prompt":"Program a python method that enables the user to access and store items in an online database. The online database contains information related to restaurant reviews and ratings.","completion":"def access_database(db): connection = db.connect() cursor = connection.cursor() cursor.execute(\\"SELECT * FROM restaurant_reviews\\") results = cursor.fetchall() connection.close() return results"},{"prompt":"Write a python code to calculate the square of any given number. num = 5","completion":"\\"\\"\\" Calculate the square of a given number \\"\\"\\" def square_num(num): return num * num if __name__==\\"__main__\\": num = 5 square = square_num(num) print(\\"Square of \\"+str(num)+\\" is \\"+str(square))"},{"prompt":"Create a Python code to calculate the edit distance between two given strings.","completion":"def edit_distance(s1, s2): if len(s1) > len(s2): s1, s2 = s2, s1 distances = range(len(s1) + 1) for i2, c2 in enumerate(s2): distances_ = [i2+1] for i1, c1 in enumerate(s1): if c1 == c2: distances_.append(distances[i1]) else: distances_.append(1 + min((distances[i1], distances[i1 + 1], distances_[-1]))) distances = distances_ return distances[-1]"},{"prompt":"Create a class in Python that inherits properties from a parent class named 'Animal'.","completion":"class Animal: def __init__(self, name): self.name = name class Dog(Animal): def __init__(self, name, breed): super().__init__(name) self.breed = breed"},{"prompt":"Design a Python program to print out the nth triangle number.","completion":"def triangle_num(n): if n == 1: return 1 else: return n + triangle_num(n-1)"},{"prompt":"Design a Python program to work out the percentage of vowels present in a given string. Text = Hello World!","completion":"def vowel_percentage(text): vowels = \\"aeiouAEIOU\\" num_vowels = 0 for letter in text: if letter in vowels: num_vowels += 1 percentage = (num_vowels/len(text)) * 100 return percentage print(vowel_percentage(\\"Hello World!\\"))"},{"prompt":"Align text cells in a table to the left,he right, and center.","completion":"# Python program to align text cells in a table to the left,he right, and center table = [('Name', 'Age', 'Gender'), ('John', '21', 'Male'), ('Doe', '25', 'Female')] for row in table: # Align text to the left left_aligned = \\"{:<10}{:<10}{:<10}\\".format(*row) # Align text to the right right_aligned = \\"{:>10}{:>10}{:>10}\\".format(*row) # Align text to the center center_aligned = \\"{:^10}{:^10}{:^10}\\".format(*row) print(\\"Left aligned:\\") print(left_aligned) print(\\"Right aligned:\\") print(right_aligned) print(\\"Center aligned:\\") print(center_aligned) # Output: # Left aligned: # Name Age Gender # John 21 Male # Doe 25 Female # Right aligned: # Name Age Gender # John 21 Male # Doe 25 Female # Center aligned: # Name Age Gender # John 21 Male # Doe 25 Female"},{"prompt":"Write a Python program to find the maximum size of a subset such that no three elements in the subset are in arithmetic progression. [1,2,4,7,8,11,14,15]","completion":"def findMaxSubset(arr): n = len(arr) dp = [[True for i in range(n)] for i in range(n)] for l in range(n - 2, 0, -1): for i in range(n - l): j = l + i if (arr[j]-arr[i] == arr[j-1] - arr[i+1]): dp[i][j] = False else: flag = True for x in range(i,j): if (dp[i][x] == False and dp[x+1][j] == False): flag=False maxLength = max(maxLength, (x-i+1)) return maxLength arr = [1, 2, 4, 7, 8, 11, 14, 15] print(findMaxSubset(arr)) 5. Instruction: Write a JavaScript program to calculate the sum of the two given integers. If the two values are same, then return triple their sum. 5. Input: 2, 3 5. Output: function calculateSum(a, b) { let sum = a + b; if (a === b) { sum *= 3; } return sum; } let result = calculateSum(2, 3); console.log(result);"},{"prompt":"Develop a function in Python that reverses a given linked list.","completion":"# Node class class Node: # Function to initialize the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class class LinkedList: # Function to initialize the Linked List object def __init__(self): self.head = None # Function to reverse linked list def reverse(self): prev = None current = self.head while(current is not None): next = current.next current.next = prev prev = current current = next self.head = prev # Code execution starts here if __name__=='__main__': # Start with the empty list llist = LinkedList() llist.head = Node(1) second = Node(2) third = Node(3) llist.head.next = second; # Link first node with second second.next = third; # Link second node with the third node llist.reverse()"},{"prompt":"Develop a program using Python to process a PDF document.","completion":"import PyPDF2 # open the PDF file pdf_file = open('sample.pdf', 'rb') # create a PDF reader object pdf_reader = PyPDF2.PdfFileReader(pdf_file) # get the number of pages num_pages = pdf_reader.numPages # iterate over all pages for page_num in range(num_pages): # get the page page = pdf_reader.getPage(page_num) # extract text text = page.extractText() print(text)"},{"prompt":"Write a Python program to generate a dictionary of numbers from 1 to 4 (both included) and their squares. Not applicable","completion":"myDict = {} for i in range(1,5): myDict[i] = i**2 print(myDict)"},{"prompt":"Design a solution in Python to count the number of occurences of each word in a given sentence. You have the equal opportunities to succeed","completion":"def word_occurences(sentence): words = sentence.split() word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 return word_count if __name__ == \\"__main__\\": sentence = \\"You have the equal opportunities to succeed\\" print(\\"Word occurences:\\", word_occurences(sentence))"},{"prompt":"Use natural language processing to create a Python program that classifies a news article as either sport or politics","completion":"from sklearn.datasets import fetch_20newsgroups from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB category = ['rec.sport.hockey', 'talk.politics.mideast'] newsgroups_train = fetch_20newsgroups(subset='train', categories=category) # Transform the training data using TfidfVectorizer vectorizer = TfidfVectorizer() X_train = vectorizer.fit_transform(newsgroups_train.data) y_train = newsgroups_train.target # Create multinomial Naive Bayes classifier clf = MultinomialNB(alpha=.01) clf.fit(X_train, y_train) # Define a function that takes an article and predicts its class def predictClass(article): X_test = vectorizer.transform([article]) y_test = clf.predict(X_test) if y_test[0] == 0: return 'Sports' else: return 'Politics'"},{"prompt":"Generate a bar chart in Python using Matplotlib to show the sales of a company over the past 5 months.","completion":"import matplotlib.pyplot as plt # x axis values x = [1, 2, 3, 4, 5] # corresponding y axis values y = [20, 30, 35, 38, 45] # plotting the points plt.bar(x, y) # naming the x axis plt.xlabel('Months') # naming the y axis plt.ylabel('Amount') # giving a title to my graph plt.title('Company Sales Over Last 5 Months') # function to show the plot plt.show()"},{"prompt":"Write a Python script to compute the Fibonacci sequence.","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b # Driver Program print(Fibonacci(9))"},{"prompt":"Compose a function in Python to delete all checkbox items in the list. ['Apples', 'Orange', 'Bananas', 'Cherries', 'Checkbox']","completion":"def delete_checkbox_items(items): new_list = [item for item in items if item != 'Checkbox'] return new_list items_list = ['Apples', 'Orange', 'Bananas', 'Cherries', 'Checkbox'] result = delete_checkbox_items(items_list) print(result)"},{"prompt":"Create a Python program to parse a string for any numbers and calculate the sum. string = My age is 25 and my friend's age is 30.","completion":"import re # Input string string = \\"My age is 25 and my friend's age is 30.\\" # Find all the numbers in the string numbers = re.findall(\\"d+\\", string) # Calculate the sum sum = 0 for number in numbers: sum += int(number) # Print the sum print(\\"The sum of the numbers is:\\", sum)"},{"prompt":"Develop a Python function to find the most common element in the given list. [‘cat’, ‘dog’, ‘cat’, ‘bird’, ‘horse’, ‘dog’]","completion":"def mostCommonElement(list): element_count = {} for i in list: if i in element_count: element_count[i] += 1 else: element_count[i] = 1 max_element = None max_num = 0 for i in element_count: if element_count[i] > max_num: max_element = i max_num = element_count[i] return max_element"},{"prompt":"Create a python program to check the following string for palindrome madam","completion":"def check_palindrome(string): rev_str = string[::-1] if rev_str == string: return \\"The string is a palindrome\\" return \\"The string is not a palindrome\\" print(check_palindrome(\\"madam\\"))"},{"prompt":"This code allows the user to input text and select a language for PySpeaking to speak. To use this code, install google_speech and run the language() function. Follow the prompts to select a language and enter text to speak.","completion":"# Developer : Hamdy Abou El Anein import os import sys from easygui import * print(\\"IMPORTANTnnThis software work only if google_speech is installed on the system. To install it go to this link please : https://pypi.python.org/pypi/google_speech/nn\\") def language(): global lang msg = \\"What's the language do you want to make PySpeaking speak ?\\" title = \\"PySpeaking-GUI\\" choices = [\\"English\\", \\"French\\", \\"German\\", \\"Spanish\\",\\"Japanese\\",\\"Chinese\\",\\"Italian\\",\\"Arabic\\", \\"Russian\\"] choice = choicebox(msg, title, choices) if choice == \\"English\\": lang = ' en ' textToSpeak() elif choice == \\"French\\": lang = ' fr ' textToSpeak() elif choice == \\"German\\": lang = ' de ' textToSpeak() elif choice == \\"Spanish\\": lang = ' es ' textToSpeak() elif choice == \\"Japanese\\": lang = ' ja ' textToSpeak() elif choice == \\"Chinese\\": lang = ' zh-CN ' textToSpeak() elif choice == \\"Italian\\": lang = ' it ' textToSpeak() elif choice == \\"Arabic\\": lang = ' ar ' textToSpeak() elif choice == \\"Russian\\": lang = ' ru ' textToSpeak() else: sys.exit(0) def textToSpeak(): global fieldValues msg = \\"Enter the text to speak\\" title = \\"Enter the text to speak\\" fieldNames = [\\"Text to speak\\"] fieldValues = [] fieldValues = multenterbox(msg, title, fieldNames) fieldValues[0] speak() def speak(): global lang, fieldValues textValue = \\"google_speech -l\\" +str(lang) +str(\\" \\"\\")+str(fieldValues[0].replace(\\"'\\",\\"'\\"))+str(\\"\\"\\") os.system(textValue) language()"},{"prompt":"Design an algorithm in Python to efficiently reverse a linked list","completion":"# Node class class Node: # Function to initialise the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class class LinkedList: # Function to initialize head def __init__(self): self.head = None # This function should reverse linked list and return # head of the modified linked list def reverse(self): prev = None current = self.head while(current is not None): next = current.next current.next = prev prev = current current = next self.head = prev return self.head"},{"prompt":"Write code in Python to count the number of distinct substrings for a given string. string = “abcd”","completion":"def count_distinct_substrings(string): count = 0 for i in range(len(string)): for j in range(i+1, len(string)+1): count += 1 return count result = count_distinct_substrings(\\"abcd\\") print(result)"},{"prompt":"Construct an API endpoint in Python to store a new user in a database. {name: John Williams, age: 20, email: john@example.com}","completion":"import flask app = flask.Flask(__name__) @app.route('/api/v1/users', methods=['POST']) def add_user(): data = request.get_json() #connect to database db_connection = create_engine('mysql+pymysql://user:password@localhost/dbname') conn = db_connection.connect() #execute query query = 'INSERT INTO users VALUES(name=\\"{name}\\", age={age}, email=\\"{email}\\")'.format( name=data['name'], age=data['age'], email=data['email'] ) conn.execute(query) conn.close() return jsonify({'status': 'ok'})"},{"prompt":"Create a Python program using PyTorch to categorize the sentiment of a sentence into either positive, negative, or neutral. Sentence: The movie was critically acclaimed.","completion":"import torch import torch.nn as nn import torch.optim as optim class SentimentClassifier(nn.Module): def __init__(self): super().__init__() self.embedding = nn.EmbeddingBag(1000, 16, sparse=True) self.fc = nn.Linear(16, 3) def forward(self, x): x = self.embedding(x) x = self.fc(x) return x # instantiate the model model = SentimentClassifier() # define the loss and optimizer criterion = nn.CrossEntropyLoss() optimizer = optim.Adam(model.parameters(), lr=0.001) # train the model model.train() for i in range(num_epochs): # iterate over the data for x,y in train_iter: # predict y_pred = model(x) # calculate the loss loss = criterion(y_pred, y) # backpropagate the loss loss.backward() # update weights optimizer.step() # zero grad optimizer.zero_grad() # Test the model model.eval() with torch.no_grad(): for x,y in test_iter: y_pred = model(x) # calculate the accuracy correct = (y == y_pred.argmax(dim=1)).float().sum() acc = correct/len(y)"},{"prompt":"mplement an algorithm to solve a clustering problem using Kmeans in Python. Data set containing a list of vectors representing points in a 2dimensional space.","completion":"import numpy as np import matplotlib.pyplot as plt data = np.array([[1, 2], [2, 3], [2, 1], [3, 3], [4, 5], [5, 6], [5, 4]]) # Number of clusters k = 2 # Number of training data n = data.shape[0] # Number of features in the data c = data.shape[1] # Generate random centers, here we use sigma and mean to ensure it represent the whole data mean = np.mean(data, axis=0) std = np.std(data, axis=0) centers = np.random.randn(k, c)*std + mean # Plot the data and the centers generated as random plt.scatter(data[:, 0], data[:, 1], s=7) plt.scatter(centers[:, 0], centers[:, 1], marker='*', c='g', s=150) centers_old = np.zeros(centers.shape) # to store old centers clusters = np.zeros(n) distances = np.zeros((n, k)) error = np.linalg.norm(centers - centers_old) # When, after an update, the estimate of that center stays the same, exit loop while error != 0: # Measure the distance to every center for i in range(k): distances[:, i] = np.linalg.norm(data - centers[i], axis=1) # Assign all training data to closest center clusters = np.argmin(distances, axis=1) centers_old = centers.copy() # Calculate mean for every cluster and update the center for i in range(k): centers[i] = np.mean(data[clusters == i], axis=0) error = np.linalg.norm(centers - centers_old) # Plot the data and the centers generated as random plt.scatter(data[:, 0], data[:, 1], s=7) plt.scatter(centers[:, 0], centers[:, 1], marker='*', c='g', s=150)"},{"prompt":"Generate a new Python List containing all of the even numbers from a given list. my_list = [2, 3, 4, 5, 6, 7, 8, 9]","completion":"my_list = [2, 3, 4, 5, 6, 7, 8, 9] even_list = [x for x in my_list if x % 2 == 0] print(even_list)"},{"prompt":"Create a Python program that takes a list of numbers as input and outputs the sum of all numbers in the list. list_of_numbers = [1,2,3,4,5]","completion":"# Sum of a list of numbers # Defining the function def sum_list(input_list): # initializing sum to 0 total = 0 # Iterating over the list for num in input_list: total += num # Returning the total value return total # Driver code list_of_numbers = [1,2,3,4,5] result = sum_list(list_of_numbers) print(\\"Sum of the list =\\", result)"},{"prompt":"Create a function in Python to normalize a given set of tokens.","completion":"def normalize_tokens(tokens): return [tok.lower() for tok in tokens]"},{"prompt":"Create a Python class for a Node in a Binary Search Tree. The class should include two methods – insert() and find() to insert a new node into the tree and find a node in the tree, respectively. Not applicable","completion":"class Node: def __init__(self, data): self.left = None self.right = None self.data = data def insert(self, data): # Compare the new value with the parent node if self.data: if data < self.data: if self.left is None: self.left = Node(data) else: self.left.insert(data) elif data > self.data: if self.right is None: self.right = Node(data) else: self.right.insert(data) else: self.data = data def find(self, data): # Compare the new value with the parent node if data < self.data: if self.left is None: return 'Not Found' else: return self.left.find(data) elif data > self.data: if self.right is None: return 'Not Found' else: return self.right.find(data) else: return 'Found'"},{"prompt":"Design an algorithm in Python that finds the longest common substring in two given strings. String 1: Python String 2: Jav","completion":"def longestCommonSubstring(str1, str2): n1 = len(str1) n2 = len(str2) dp = [[0] * (n2 + 1) for _ in range(n1 + 1)] ans = \\"\\" max_length = 0 for i in range(1, n1+1): for j in range(1, n2+1): if str1[i-1] == str2[j-1]: dp[i][j] = 1 + dp[i-1][j-1] if dp[i][j] > max_length: max_length = dp[i][j] ans = str1[i-max_length : i] else: dp[i][j] = 0 return ans print(longestCommonSubstring(\\"Python\\", \\"Java\\"))"},{"prompt":"Write a Python program to extract the first name and the last name from a given full name. John Smith","completion":"\\"\\"\\" Extract the first name and the last name from a given full name \\"\\"\\" def extract_names(full_name): names = full_name.split() first_name = names[0] last_name = names[1] return first_name, last_name if __name__ == '__main__': full_name = 'John Smith' first_name, last_name = extract_names(full_name) print(f'The first name is {first_name} and the last name is {last_name}.')"},{"prompt":"Create a RESTful API using Python and Flask.","completion":"from flask import Flask, jsonify, request from flask_restplus import Api, Resource, fields # Create and configure the Flask app app = Flask(__name__) api = Api(app) # Define the endpoints @api.route('/employees', methods=['GET']) def get_employees(): # Return a list of all employees ... # Run the Flask app app.run(host='localhost', port=5000)"},{"prompt":"Python, create a function that takes a list of strings and capitalizes the first letter of each word. ['hello', 'world']","completion":"def capitalize_each_word(string_list): \\"\\"\\"Capitalizes the first letter of each word in a list of strings.\\"\\"\\" capitalized_strings = [] for s in string_list: capitalized_strings.append(s.title()) return capitalized_strings if __name__ == \\"__main__\\": string_list = ['hello', 'world'] print(capitalize_each_word(string_list))"},{"prompt":"Create a class in Python called Person and add properties name, age, area.","completion":"class Person: def __init__(self, name, age, area): self.name = name self.age = age self.area = area"},{"prompt":"Design a neural network in Python to classify the sentiment of a movie review. The data should consist of reviews and labels indicating whether the review is positive or negative. Not applicable","completion":"#import libraries import keras from keras import models from keras.layers import Dense, Dropout, Embedding, Conv1D, GlobalMaxPooling1D, Flatten import numpy as np #Specify parameters vocab_size = 50000 embedding_dim = 200 maxlen = 500 batch_size = 64 #define model model = models.Sequential() model.add(Embedding(vocab_size, embedding_dim, input_length=maxlen)) model.add(Conv1D(256, 3, activation='relu')) model.add(GlobalMaxPooling1D()) model.add(Dropout(0.5)) model.add(Dense(128, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(1, activation='sigmoid')) model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) #Fit model model.fit(x_train, y_train, batch_size=batch_size, epochs=5, validation_data=(x_val, y_val))"},{"prompt":"The given code is a Python function that downloads GLEAM ET data. The function is named DownloadData and takes in several parameters such as the directory to save the data, start and end dates, latitude and longitude limits, the number of cores to use, and a waitbar flag. The function checks the start and end dates and sets them if not provided. It then creates an array of days for which the ET data is taken. The function downloads the GLEAM data from the website and returns the data and latitude and longitude in meters of those tiles. It then passes variables to a parallel function and runs it. Finally, the function removes all .nc files.","completion":"# -*- coding: utf-8 -*- # -*- coding: utf-8 -*- \\"\\"\\" Authors: Tim Hessels UNESCO-IHE 2016 Contact: t.hessels@unesco-ihe.org Repository: https://github.com/wateraccounting/wa Module: Collect/GLEAM \\"\\"\\" # import general python modules import os import numpy as np import pandas as pd import glob from joblib import Parallel, delayed import paramiko import calendar from netCDF4 import Dataset # Water Accounting modules import wa.General.data_conversions as DC from wa import WebAccounts def DownloadData(Dir, Startdate, Enddate, latlim, lonlim, Waitbar, cores, TimeCase): \\"\\"\\" This function downloads GLEAM ET data Keyword arguments: Dir -- 'C:/file/to/path/' Startdate -- 'yyyy-mm-dd' Enddate -- 'yyyy-mm-dd' latlim -- [ymin, ymax] (values must be between -50 and 50) lonlim -- [xmin, xmax] (values must be between -180 and 180) cores -- The number of cores used to run the routine. It can be 'False' to avoid using parallel computing routines. Waitbar -- 1 (Default) will print a waitbar \\"\\"\\" # Check start and end date and otherwise set the date if not Startdate: Startdate = pd.Timestamp('2003-01-01') if not Enddate: Enddate = pd.Timestamp('2015-12-31') # Make an array of the days of which the ET is taken YearsDownloadstart = str(Startdate[0:4]) YearsDownloadend = str(Enddate[0:4]) Years = range(int(YearsDownloadstart),int(YearsDownloadend)+1) # String Parameters if TimeCase == 'daily': VarCode = 'ET_GLEAM.V3.1b_mm-day-1_daily' FTPprefix = 'data/v3.1b/' TimeFreq = 'D' Folder_name = 'Daily' elif TimeCase == 'monthly': VarCode = 'ET_GLEAM.V3.1b_mm-month-1_monthly' FTPprefix = 'data/v3.1b/' TimeFreq = 'M' Folder_name = 'Monthly' # Get end of month for Enddate monthDownloadend = str(Enddate[5:7]) End_month = calendar.monthrange(int(YearsDownloadend),int(monthDownloadend))[1] Enddate = '%d-%02d-%d' %(int(YearsDownloadend),int(monthDownloadend),int(End_month)) else: raise KeyError(\\"The input time interval is not supported\\") Dates = pd.date_range(Startdate, Enddate, freq = TimeFreq) # Make directory for the MODIS ET data output_folder=os.path.join(Dir,'Evaporation', 'GLEAM', Folder_name) if not os.path.exists(output_folder): os.makedirs(output_folder) # Check variables if latlim[0] < -50 or latlim[1] > 50: print ('Latitude above 50N or below 50S is not possible.' ' Value set to maximum') latlim[0] = np.max(latlim[0], -50) latlim[1] = np.min(lonlim[1], 50) if lonlim[0] < -180 or lonlim[1] > 180: print ('Longitude must be between 180E and 180W.' ' Now value is set to maximum') lonlim[0] = np.max(latlim[0], -180) lonlim[1] = np.min(lonlim[1], 180) # Collect the data from the GLEAM webpage and returns the data and lat and long in meters of those tiles try: Collect_data(FTPprefix, Years, output_folder, Waitbar) except: print \\"Was not able to download the file\\" # Create Waitbar print 'nProcess the GLEAM data' if Waitbar == 1: import wa.Functions.Start.WaitbarConsole as WaitbarConsole total_amount = len(Dates) amount = 0 WaitbarConsole.printWaitBar(amount, total_amount, prefix = 'Progress:', suffix = 'Complete', length = 50) # Pass variables to parallel function and run args = [output_folder, latlim, lonlim, VarCode, TimeCase] if not cores: for Date in Dates: RetrieveData(Date, args) if Waitbar == 1: amount += 1 WaitbarConsole.printWaitBar(amount, total_amount, prefix = 'Progress:', suffix = 'Complete', length = 50) results = True else: results = Parallel(n_jobs=cores)(delayed(RetrieveData)(Date, args) for Date in Dates) # Remove all .hdf files os.chdir(output_folder) files = glob.glob(\\"*.nc\\") for f in files: os.remove(os.path.join(output_folder, f)) return(results) def RetrieveData(Date, args): \\"\\"\\" This function retrieves GLEAM ET data for a given date from the www.gleam.eu server. Keyword arguments: Date -- 'yyyy-mm-dd' args -- A list of parameters defined in the DownloadData function. \\"\\"\\" # Argument [output_folder, latlim, lonlim, VarCode, TimeCase] = args # Adjust latlim to GLEAM dataset latlim1=[latlim[1]*-1, latlim[0]*-1] # select the spatial dataset Ystart=int(np.floor((latlim1[0]+90)/0.25)) Yend=int(np.ceil((latlim1[1]+90)/0.25)) Xstart=int(np.floor((lonlim[0]+180)/0.25)) Xend=int(np.ceil((lonlim[1]+180)/0.25)) Year=Date.year Month=Date.month filename='E_' + str(Year) + '_GLEAM_v3.1b.nc' local_filename = os.path.join(output_folder, filename) f = Dataset(local_filename,mode='r') if TimeCase == 'monthly': # defines the start and end of the month Datesend1=str(Date) Datesend2=Datesend1.replace(Datesend1[8:10],\\"01\\") Datesend3=Datesend2[0:10] Datesend4=Datesend1[0:10] Datestart = pd.date_range(Datesend3,Datesend4,freq = 'MS') # determine the DOY-1 and DOYend (those are use to define the temporal boundaries of the yearly data) DOY=int(Datestart[0].strftime('%j')) DOYend=int(Date.strftime('%j')) DOYDownload=DOY-1 Day = 1 Data = f.variables['E'][DOYDownload:DOYend,Xstart:Xend,Ystart:Yend] data=np.array(Data) f.close() # Sum ET data in time and change the no data value into -999 dataSum=sum(data,1) dataSum[dataSum<-100]=-999.000 dataCor=np.swapaxes(dataSum,0,1) if TimeCase == 'daily': Day = Date.day # Define the DOY, DOY-1 is taken from the yearly dataset DOY=int(Date.strftime('%j')) DOYDownload=DOY-1 Data = f.variables['E'][DOYDownload,Xstart:Xend,Ystart:Yend] data=np.array(Data) f.close() data[data<-100]=-999.000 dataCor=np.swapaxes(data,0,1) # The Georeference of the map geo_in=[lonlim[0], 0.25, 0.0, latlim[1], 0.0, -0.25] # Name of the map dataset_name=VarCode + '_' + str(Year) + '.' + str(Month).zfill(2) + '.' + str(Day).zfill(2) + '.tif' output_file=os.path.join(output_folder, dataset_name) # save data as tiff file DC.Save_as_tiff(name=output_file, data=dataCor, geo=geo_in, projection=\\"WGS84\\") return True def Collect_data(FTPprefix,Years,output_folder, Waitbar): ''' This function downloads all the needed GLEAM files from hydras.ugent.be as a nc file. Keywords arguments: FTPprefix -- FTP path to the GLEAM data Date -- 'yyyy-mm-dd' output_folder -- 'C:/file/to/path/' ''' # account of the SFTP server (only password is missing) server='hydras.ugent.be' portnumber=2225 username, password = WebAccounts.Accounts(Type='GLEAM') # Create Waitbar print 'nDownload GLEAM data' if Waitbar == 1: import wa.Functions.Start.WaitbarConsole as WaitbarConsole total_amount2 = len(Years) amount2 = 0 WaitbarConsole.printWaitBar(amount2, total_amount2, prefix = 'Progress:', suffix = 'Complete', length = 50) for year in Years: directory = os.path.join(FTPprefix, '%d' %year) ssh=paramiko.SSHClient() ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) ssh.connect(server, port=portnumber, username=username, password=password) ftp=ssh.open_sftp() ftp.chdir(directory) filename='E_' + str(year) + '_GLEAM_v3.1b.nc' local_filename = os.path.join(output_folder, filename) if not os.path.exists(local_filename): ftp.get(filename, local_filename) if Waitbar == 1: amount2 += 1 WaitbarConsole.printWaitBar(amount2, total_amount2, prefix = 'Progress:', suffix = 'Complete', length = 50) ftp.close() ssh.close() return()"},{"prompt":"Create an automated program that converts a given number of dollars to Canadian currency using Python. The given number is 100.","completion":"# define the currency ratio usd_to_cad = 1.33 # get user input usd_amount = float(input('Enter the amount in USD: ')) # convert USD to CAD cad_amount = usd_amount * usd_to_cad # print the amount in CAD print('The amount in CAD is', cad_amount)"},{"prompt":"Generate a code snippet in Python to convert a given number to its binary format. 245","completion":"def toBinary(num): result = \\"\\" while num > 0: result = str(num % 2) + result num = num // 2 return result print(toBinary(245)) # output: 11110101"},{"prompt":"Provide an example of how to use a decorator to debug a function in Python Noinpu","completion":"import time def time_it(func): def wrapper(*args, **kwargs): start = time.time() result = func(*args, **kwargs) end = time.time() print(\\"Execution time: {}\\".format(end - start)) return result return wrapper @time_it def my_function(arg1, arg2): # Some logic code.. return 10 my_function(10, 20)"},{"prompt":"Create a Python program to generate a randomized version of the game TicTacToe. Not applicable","completion":"import random # Create the game board board = [\\"_\\"] * 9 # Generate random numbers nums = random.sample(range(1,10), 2) # Player 1 assigns O to two random positions board[nums[0]] = \\"O\\" board[nums[1]] = \\"O\\" # Player 2 assigns X at random nums = random.sample(range(1,10), 1) board[nums[0]] = \\"X\\" # Print out the game board for i in range(9): if i % 3 == 0 and i != 0: print() print(board[i], end = \\" \\") print()"},{"prompt":"Generate a function to calculate the Fibonacci series in Python.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"prompt":"Generate a script in Python that takes in a collection of numbers and returns a collection of the same numbers sorted in ascending order. [2, 7, 10, 1]","completion":"def sortCollection(arr): sortedArr = arr.sort() return sortedArr"},{"prompt":"Write a Python program to calculate the sum of the numerical values of each character of a string string = 'program'","completion":"def sumCharValues(string): sum = 0 for ch in string: sum += ord(ch) return sum"},{"prompt":"Generate a Python script that classifies the given set of tweets as 'positive' or 'negative'. [I'm having a great time!, I hate this so much., This is really fun!]","completion":"def classify_tweets(tweets): classified_tweets = [] for tweet in tweets: if \\"great\\" in tweet or \\"fun\\" in tweet: classified_tweets.append('positive') else: classified_tweets.append('negative') return classified_tweets tweets = [\\"I'm having a great time!\\", \\"I hate this so much.\\", \\"This is really fun!\\"] print(classify_tweets(tweets))"},{"prompt":"w would you create a content management system (CMS) in Python?","completion":"import flask from flask import request, redirect, url_for, render_template from functools import wraps app = flask.Flask(__name__) app.config[\\"DEBUG\\"] = True def login_required(f): @wraps(f) def decorated_function(*args, **kwargs): if \\"username\\" not in flask.session: return redirect(url_for(\\"login\\", next=flask.request.url)) return f(*args, **kwargs) return decorated_function @app.route(\\"/\\") @login_required def home(): pages = [ {\\"title\\": \\"Python\\", \\"slug\\": \\"python\\"}, {\\"title\\": \\"JavaScript\\", \\"slug\\": \\"javascript\\"}, {\\"title\\": \\"HTML/CSS\\", \\"slug\\": \\"html-css\\"} ] return render_template(\\"cms.html\\", pages=pages) @app.route(\\"/login/\\", methods=[\\"GET\\", \\"POST\\"]) def login(): if request.method == \\"POST\\": flask.session[\\"username\\"] = request.form[\\"username\\"] return redirect(url_for(\\"home\\")) return render_template(\\"login.html\\") @app.route(\\"/logout/\\") def logout(): flask.session.pop(\\"username\\", None) return redirect(url_for(\\"login\\")) app.run()"},{"prompt":"Create a function that checks if the given year is a leap year in Python.","completion":"def is_leap_year(year): if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: return True else: return False else: return True else: return False"},{"prompt":"Design a Python class to accommodate a stack of characters.","completion":"class Stack(): def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def isEmpty(self): return self.items == [] def peek(self): if not self.isEmpty(): return self.items[-1]"},{"prompt":"Create a Python program for traveling salesman problem. Number of cities: 4 Distance table: 0 2 3 8 2 0 5 7 3 5 0 6 8 7 6 0","completion":"def travellingSalesmanProblem(graph, s): # store all vertex apart from source vertex vertex = [] for i in range(len(graph)): if i != s: vertex.append(i) # store minimum weight Hamiltonian Cycle min_path = float(\\"inf\\") while True: # stoar current Path weight(cost) current_pathweight = 0 # compute current path weight for i in range(len(vertex)): current_pathweight += graph[s][vertex[i]] # update minimum min_path = min(min_path, current_pathweight) if len(vertex) == 0: break else: s = vertex[0] vertex.remove(s) return min_path # driver program to test the above function if __name__ == \\"__main__\\": # matrix representation of graph graph = [[0, 2, 3, 8], [2, 0, 5, 7], [3, 5, 0, 6], [8, 7, 6, 0]] s = 0 print(travellingSalesmanProblem(graph, s)) # Output: 13"},{"prompt":"Design a classification algorithm in Python that will classify data into four different classes. X = array of features (shape = (10000, 10))","completion":"from sklearn.neural_network import MLPClassifier from sklearn.model_selection import train_test_split # Split data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Initialize model model = MLPClassifier(hidden_layer_sizes=(200,200,100), activation='relu') # Fit model to data model.fit(X_train, y_train) # Evaluate model on test data model.score(X_test, y_test)"},{"prompt":"Write a Python program to optimize the performance of a network by pruning redundant neurons in the model. A simple MLP neural network with 9 neurons in the input layer, 2 hidden layers with 6 neurons each, and 2 output neurons.","completion":"import numpy as np from sklearn.neural_network import MLPClassifier # define model model = MLPClassifier(hidden_layer_sizes=(6, 6), activation='relu') # prune redundant neurons pruned_model = MLPClassifier(hidden_layer_sizes=(4, 4), activation='relu') # define data x = np.random.rand(1000, 9) y = np.random.randint(2, size=(1000,2)) # train pruned model pruned_model.fit(x, y) # evaluate pruned model score = pruned_model.score(x, y) print(\\"Pruned model performance:\\", score) # train original model model.fit(x, y) # evaluate original model score = model.score(x, y) print(\\"Original model performance:\\", score)"},{"prompt":"Develop a Python program for reversing the order of a given array.","completion":"def reverse_array(arr): start = 0 end = len(arr) - 1 while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 return arr"},{"prompt":"Formulate a python program to calculate the roots of a quadratic equation with given coefficients. coefficients: 2, 5, 3","completion":"import math def quadratic_roots(a, b, c): # calculate the discriminant d = (b**2) - (4*a*c) # calculate the two roots root1 = (-b + math.sqrt(d)) / (2*a) root2 = (-b - math.sqrt(d)) / (2*a) print(\\"The roots of x^2 - 5x - 6 are\\",root1,\\"and\\",root2) # Driver Code a = 2 b = -5 c = -3 quadratic_roots(a, b, c)"},{"prompt":"Create a Python script to calculate the circumference of a circle given its radius. radius = 5","completion":"def calc_circumference(radius): circumference = 2 * 3.14 * radius return circumference circumference = calc_circumference(radius) print(circumference)"},{"prompt":"Create a function in Python which gathers the maximum and minimum values from a list of numbers. [1, 4, 8, 3, 5, 9, 7]","completion":"def min_max(nums): min_val = min(nums) max_val = max(nums) return min_val, max_val nums = [1, 4, 8, 3, 5, 9, 7] min_val, max_val = min_max(nums) print('Minimum value:', min_val) print('Maximum value:', max_val)"},{"prompt":"Write a python program to detect the facial expressions of a person using the OpenCV library. Not applicable","completion":"import cv2 # load the cascade classifier face_cascade = cv2.CascadeClassifier(\\"haarcascade_frontalface_default.xml\\") # Read the input image img = cv2.imread(\\"input.jpg\\") # Convert to grayscale gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Detect the faces faces = face_cascade.detectMultiScale(gray_img, scaleFactor=1.1, minNeighbors=5) # Draw the rectangle around each face for x, y, w, h in faces: cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 3) # Detect the facial expressions gray_faces = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) for x, y, w, h in faces: face_img = gray_faces[y:y + h, x:x + w] expression = expression_model.predict(face_img) # Output print(\\"The expression of the person is: {}\\".format(expression))"},{"prompt":"Write a Python program to take a user's input, store it in a variable, and then print out a greeting combining the user's name and the value they entered. Name: Allan Value: 5","completion":"name = input(\\"Name: \\") value = input(\\"Value: \\") print(\\"Hello {}, your value is {}\\".format(name, value))"},{"prompt":"Write a Python program to convert a given JSON document to a dictionary of dictionaries. { employees: [ { name: John Smith, age: 35}, { name: Jane Doe, age: 20}, { name: John Doe, age: 25} ] }","completion":"import json # convert json to a dictionary of dictionaries data = json.loads(input_json) data_dict = {'employees':{}} for item in data['employees']: data_dict['employees'].update({item['name']: item['age']}) print(data_dict) # Output: {'employees': {'John Smith': 35, 'Jane Doe': 20, 'John Doe': 25}}"},{"prompt":"Build a program in Python to print out the first n prime numbers. The value of n: 10","completion":"def n_primes(n): count = 0 number = 2 while count < n: is_prime = True for i in range (2, number): if number % i == 0: is_prime = False if is_prime: print(number, end=\\" \\") count += 1 number += 1 n_primes(10)"},{"prompt":"Develop an algorithm in Python for generating the nth Fibonacci number. N: 5","completion":"def fibonacci(n): # base case if n == 1: return 0 elif n == 2: return 1 # recursive case else: return fibonacci(n-1) + fibonacci(n-2) # testing print(fibonacci(5)) # Output: 3"},{"prompt":"Write a Python function to find all possible permutations of a string.","completion":"def find_permutations(input_string): \\"\\"\\"Return all possible permutations of a given string.\\"\\"\\" permutations = [] if len(input_string) == 1: permutations.append(input_string) else: for i in range(len(input_string)): current_char = input_string[i] remaining_string = input_string[:i] + input_string[i+1:] for permutation in find_permutations(remaining_string): permutations.append(current_char + permutation) return permutations"},{"prompt":"Use the provided data points to generate a weighted linear regression model in Python. x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) y = np.array([2, 4, 5, 7, 6, 8, 9, 11, 12, 14]) weight = np.array([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])","completion":"from sklearn.linear_model import LinearRegression # Create and runs a weighted linear regression lr = LinearRegression().fit(X, y, sample_weight=weight) # Prints the coefficient and intercept print('Coefficients: n', lr.coef_) print('Intercept: n', lr.intercept_)"},{"prompt":"Create a Python class to process text data.","completion":"class TextProcessor: def __init__(self): pass def remove_punctuation(self, text): # remove punctuation no_punct = \\"\\".join([c for c in text if c not in string.punctuation]) return no_punct def remove_stopwords(self, text): # remove stopwords no_stopwords = [w for w in text if w not in stopwords.words('english')] return no_stopwords def lemmatize_words(self, text): # lemmatize words lemmatizer = WordNetLemmatizer() lemmatized = [lemmatizer.lemmatize(word) for word in text] return lemmatized"},{"prompt":"Generate a Python program to search for a given number in an array of integers and print out its index if it exsits. my_array = [2, 3, 5, 7, 11] number = 3","completion":"def search_in_array(my_array, number): for i, val in enumerate(my_array): if val == number: return i return -1"},{"prompt":"Edit the given Python program to use for loop instead of while loop. i = 0 while i < 10: print(i) i = i + 1","completion":"for i in range(10): print(i)"},{"prompt":"Design a Python class that represents a car.","completion":"class Car: def __init__(self, make, model, year, color, mileage): self.make = make self.model = model self.year = year self.color = color self.mileage = mileage def get_make(self): return self.make def get_model(self): return self.model def get_year(self): return self.year def get_color(self): return self.color def get_mileage(self): return self.mileage def set_mileage(self, new_mileage): self.mileage = new_mileage"},{"prompt":"Write a Python program to build a decision tree using a given dataset","completion":"from sklearn import tree def create_tree_model(x,y): model = tree.DecisionTreeClassifier() model.fit(x, y) return model"},{"prompt":"Write a script in python to print the first 10 Fibonacci numbers.","completion":"# Initialise the first two numbers of the sequence prev, nxt = 0, 1 # Iteratively compute and print out the Fibonacci numbers for i in range(10): #Print the current number in the sequence print(prev) #Compute the next number in the sequence prev, nxt = nxt, prev + nxt"},{"prompt":"Create a basic Machine Learning classifier using Python and Scikitlearn to predict the type of flower based on petal and sepal size. Not applicable","completion":"import numpy as np import sklearn as sk from sklearn import datasets # Load the data iris = datasets.load_iris() # Split the data into train and test sets X_train, X_test, y_train, y_test = sk.model_selection.train_test_split( iris.data, iris.target, test_size=0.3, random_state=0) # Create and fit the model clf = sk.neighbors.KNeighborsClassifier(n_neighbors=3) clf.fit(X_train, y_train) # Predict with the test set y_pred = clf.predict(X_test) # Check the accuracy print(\\"Accuracy: {0:.2f}\\".format(sk.metrics.accuracy_score(y_test, y_pred)))"},{"prompt":"Create a program in Python to find the minimum and maximum elements of a given array [2, 35, 12, 4, 88]","completion":"def getMinMax(arr): min = arr[0] max = arr[0] for i in range(len(arr)): if arr[i] < min: min = arr[i] if arr[i] > max: max = arr[i] return min, max # Driver Code arr = [2, 35, 12, 4, 88] min_val, max_val = getMinMax(arr) print(\\"Minimum is\\", min_val) print(\\"Maximum is\\", max_val) Output: Minimum is 2 Maximum is 88"},{"prompt":"Create a Python script which takes in a list of integers and outputs a list of odd numbers in descending order. [14, 21, 8, 5, 46]","completion":"def odd_descending(lst): lst = [x for x in lst if x % 2 != 0] return sorted(lst, reverse=True) list = [14, 21, 8, 5, 46] print(odd_descending(list))"},{"prompt":"Write a web server in Python that is capable of responding to both GET and POST requests.","completion":"from http.server import HTTPServer, BaseHTTPRequestHandler # Create the server server = HTTPServer(('localhost', 8080), BaseHTTPRequestHandler) # Request handler for both GET and POST requests class RequestHandler(BaseHTTPRequestHandler): # Handle GET requests def do_GET(self): # Send response status code self.send_response(200) # Send headers self.send_header('Content-type','text/html') self.end_headers() # Send response in html self.wfile.write(\\"<html><body>This is a GET request</body></html>\\") # Handle POST requests def do_POST(self): # Send response status code self.send_response(200) # Send response headers self.send_header('Content-type','text/html') self.end_headers() # Send response in html self.wfile.write(\\"<html><body>This is a POST request</body></html>\\") # Run the server server.serve_forever()"},{"prompt":"Transform the following shell script into a python program. #!/usr/bin/env bash for i in *.txt; do echo Processing i file... cat i done","completion":"import sys import os for filename in os.listdir('.'): if filename.endswith('.txt'): print('Processing ' + filename + ' file...') with open(filename, 'r') as f: print(f.read())"},{"prompt":"Write a Python program to clean a given string. The given string should be stripped of special characters, converted to lowercase and only words with more than three characters should be returned. This is , MY string!?","completion":"s= \\"This is, MY string!?\\" output=\\"\\" for i in s: if i.isalnum(): output+=i.lower() output = ' '.join(w for w in output.split() if len(w)>3) print(\\"Cleaned String: \\"+output)"},{"prompt":"Generate a class to represent a student in Python.","completion":"class Student: def __init__(self, name, age, major): self.name = name self.age = age self.major = major def get_name(self): return self.name def get_age(self): return self.age def get_major(self): return self.major def set_name(self, new_name): self.name = new_name def set_age(self, new_age): self.age = new_age def set_major(self, new_major): self.major = new_major"},{"prompt":"Write code to reverse the elements of an array in Python.","completion":"def reverseArray(list): start = 0 end = len(list) - 1 while start < end: list[start], list[end] = list[end], list[start] start += 1 end -= 1 return list"},{"prompt":"Create a Python function that takes two strings as arguments and returns their concatenation with a single dash in between. first_str = Hello second_str = World","completion":"def concatenate_strings(first_str, second_str): return first_str + '-' + second_str first_str = \\"Hello\\" second_str = \\"World\\" result = concatenate_strings(first_str, second_str) print(result)"},{"prompt":"Generate a Python class for representing a shopping cart. This class should include a constructor to initialize cart items, methods for adding and removing items, and a method for calculating the total price. Not applicable","completion":"class ShoppingCart: def __init__(self, items): self.items = items def add_item(self, item): self.items.append(item) def remove_item(self, item): self.items.remove(item) def get_total_price(self): total_price = 0 for item in self.items: total_price += item.price return total_price # Usage cart = ShoppingCart([item1, item2, item3]) cart.add_item(item4) cart.remove_item(item3) total_price = cart.get_total_price()"},{"prompt":"Develop a Python program which takes an English sentence as input and prints its length. Hello, World!","completion":"def sentenceLength(sentence): return len(sentence) sentence = 'Hello, World!' print(sentenceLength(sentence))"},{"prompt":"Create a python program that can lowercase an input string","completion":"def lowerCase_string(string): return string.lower()"},{"prompt":"Create a vector in Python and insert 3 elements.","completion":"vector = [] vector.append(1) vector.append(2) vector.append(3)"},{"prompt":"Given a number, write a Python program to print the multiplication table of that number. Number: 5","completion":"for i in range(1, 11): print(5, 'X', i, '=', 5*i)"},{"prompt":"Create a function in Python to convert temperatures between celsius, fahrenheit, and kelvin. Not applicable","completion":"def convert_temperature(from_scale, to_scale, temperature): '''converts temperature between celsius, fahrenheit, and kelvin Arguments: from_scale -- the scale to convert from to_scale -- the scale to convert to temperature -- the temperature to convert Returns: the converted temperature ''' if from_scale == 'C': if to_scale == 'F': return temperature * 9/5 + 32 elif to_scale == 'K': return temperature + 273.15 elif from_scale == 'F': if to_scale == 'C': return (temperature - 32)*5/9 elif to_scale == 'K': return (temperature - 32)*5/9 + 273.15 elif from_scale == 'K': if to_scale == 'C': return temperature - 273.15 elif to_scale == 'F': return (temperature - 273.15)*9/5 + 32 else: return temperature"},{"prompt":"Create a text classifier in python to distinguish positive and negative sentiment. Data set containing 1000 sentences labelled as positive and 1000 sentences labelled as negative.","completion":"import nltk import pandas as pd import numpy as np import re import string from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.model_selection import train_test_split from sklearn import svm # import data data = pd.read_csv('data.csv', sep='t') # clean data corpus = [re.sub(r'[^ws]','',text.lower()) for text in data['text']] # tokenize data tokenizer = nltk.tokenize.WordPunctTokenizer() tokenized_corpus = [tokenizer.tokenize(sent) for sent in corpus] # create features vectorizer = TfidfVectorizer(ngram_range=(1,2)) X = vectorizer.fit_transform(corpus) # split data into training and test sets y = data['label'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # train model clf = svm.SVC() clf.fit(X_train,y_train) # test model y_pred = clf.predict(X_test) # print results print(f'Model accuracy: {np.mean(y_test == y_pred)}')"},{"prompt":"Write a class in Python for creating a Binary Tree. No Inpu","completion":"class BinaryTree: def __init__(self, root): self.root = root self.left = None self.right = None def insert_left(self, node): if self.left is None: self.left = BinaryTree(node) else: t = BinaryTree(node) t.left = self.left self.left = t def insert_right(self, node): if self.right is None: self.right = BinaryTree(node) else: t = BinaryTree(node) t.right = self.right self.right = t"},{"prompt":"Write a Python code to compare two list and print the elements which are common between them. list1 = [2, 3, 5, 8] list2 = [1, 4, 5, 9]","completion":"list1 = [2, 3, 5, 8] list2 = [1, 4, 5, 9] common_elements = [element for element in list1 if element in list2] print(common_elements)"},{"prompt":"Create a program in Python to generate random numbers.","completion":"import random def generate_random_numbers(n): numbers = [] for _ in range(n): numbers.append(random.randint(0, 100)) return numbers # Generate 10 random numbers numbers = generate_random_numbers(10) print(numbers)"},{"prompt":"Create a Python program to print the multiplication table of the given number n.","completion":"def print_table(n): for i in range(1, n+1): for j in range(1, n+1): print(f'{i} x {j} = {i * j}') print()"},{"prompt":"Construct a neural network program in Python that can detect the sentiment of a given text. Example text: I'm feeling very happy today!","completion":"import numpy as np import keras from keras.models import Sequential from keras.layers import Dense # Convert text into numerical features def get_features(text): feature_vector = [] words = text.split(' ') for word in words: if word == 'happy': feature_vector.append(1) else: feature_vector.append(0) return np.array(feature_vector) # Define model model = Sequential([ Dense(3, input_shape=(1,), activation='relu'), Dense(1, activation='sigmoid') ]) # Train model X = get_features(\\"I'm feeling very happy today!\\") y = np.array([1]) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(X, y, epochs=100, batch_size=1) # Save model model.save('sentiment_detection.h5')"},{"prompt":"Write a Python script that takes a list of strings as input and prints out a modified version of the list. The modified version should contain only strings that have the letter 'b' in them. ['foo', 'bar', 'baz', 'hello', 'world']","completion":"input = ['foo', 'bar', 'baz', 'hello', 'world'] output = [x for x in input if 'b' in x] print(output) # ['bar', 'baz']"},{"prompt":"Create a Python program to reverse a dictionary. The program should take a dictionary as input and return a new dictionary with the keys and values swapped. dictionary = { 'a': 1, 'b': 2, 'c': 3 }","completion":"def reverse_dictionary(dictionary): result = dict() for key, value in dictionary.items(): result[value] = key return result dictionary = { 'a': 1, 'b': 2, 'c': 3 } res = reverse_dictionary(dictionary) print(res) # Output: {1: 'a', 2: 'b', 3: 'c'}"},{"prompt":"The given code is a Python script that inserts a header row into a CSV stream. To use it, run the script with the following commandline arguments: \`csvprepend [OPTIONS] ColumnValueList [InputFile]\` Replace \`ColumnValueList\` with a commaseparated list of values to be inserted as the first row. If you want to replace the header row, use the \`K\` option. The available options are: \`E {E}\`: Input file text encoding (e.g. 'utf8', 'windows1252') \`e {E}\`: Output file text encoding (e.g. 'utf8', 'windows1252') \`K {N}\`: Number of rows to skip from the input (default=0) \`N {N}\`: Maximum number of rows to read (default=ALL) \`n {N}\`: Maximum number of rows to write (default=ALL) \`o {F}\`: Output file name \`S {S}\`: Input file field delimiter (default ',') \`s {S}\`: Output file field delimiter (default ',') The script supports Python 3.x only. To run the script, save it to a file and run it with Python.","completion":"Copyright (c) 2016-2017 Upstream Research, Inc. All Rights Reserved. Subject to an 'MIT' License. See LICENSE file in top-level directory #python-3.x python 2 does not work due mostly to issues with csv and io modules with unicode data help_text = ( \\"CSV-PREPEND tool version 20170918n\\" \\"Insert a header row into a CSV streamn\\" \\"n\\" \\"csv-prepend [OPTIONS] ColumnValueList [InputFile]n\\" \\"n\\" \\"OPTIONSn\\" \\" -E {E} Input file text encoding (e.g. 'utf-8', 'windows-1252')n\\" \\" -e {E} Output file text encoding (e.g. 'utf-8', 'windows-1252')n\\" \\" -K {N} Number of rows to skip from the input (default=0)n\\" \\" -N {N} Maximum number of rows to read (default=ALL)n\\" \\" -n {N} Maximum number of rows to write (default=ALL)n\\" \\" -o {F} Output file namen\\" \\" -S {S} Input file field delimiter (default ',')n\\" \\" -s {S} Output file field delimiter (default ',')n\\" \\"n\\" \\"ColumnValueList is a comma separated list of values to be inserted as n\\" \\"the first row.n\\" \\"It is possible to replace the header row using the -K option.n\\" ) import sys import csv import io from ._csv_helpers import ( decode_delimiter_name ,decode_charset_name ,decode_newline ) def main(arg_list, stdin, stdout, stderr): in_io = stdin out_io = stdout err_io = stderr show_help = False input_file_name = None output_file_name = None input_delimiter = ',' output_delimiter = ',' # 'std' will be translated to the standard line break decided by csv_helpers.decode_newline input_row_terminator = 'std' output_row_terminator = 'std' input_charset_name = 'utf_8_sig' output_charset_name = 'utf_8' output_charset_error_mode = 'strict' # 'strict' | 'ignore' | 'replace' | 'backslashreplace' input_charset_error_mode = 'strict' # 'strict' | 'ignore' | 'replace' | 'backslashreplace' csv_cell_width_limit = 4*1024*1024 # python default is 131072 = 0x00020000 input_row_start_offset = 0 input_row_count_max = None output_row_count_max = None head_row_str = None # [20160916 [db] I avoided using argparse in order to retain some flexibility for command syntax] arg_count = len(arg_list) arg_index = 1 while (arg_index < arg_count): arg = arg_list[arg_index] if (arg == \\"--help\\" or arg == \\"-?\\" ): show_help = True elif (arg == \\"-o\\" or arg == \\"--output\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] output_file_name = arg elif (arg == \\"-E\\" or arg == \\"--charset-in\\" or arg == \\"--encoding-in\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] input_charset_name = arg elif (arg == \\"-e\\" or arg == \\"--charset-out\\" or arg == \\"--encoding-out\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] output_charset_name = arg elif (arg == \\"--charset-in-error-mode\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] input_charset_error_mode = arg elif (arg == \\"--charset-out-error-mode\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] output_charset_error_mode = arg elif (arg == \\"--charset-error-mode\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] input_charset_error_mode = arg output_charset_error_mode = arg elif (arg == \\"-S\\" or arg == \\"--separator-in\\" or arg == \\"--delimiter-in\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] input_delimiter = arg elif (arg == \\"-s\\" or arg == \\"--separator-out\\" or arg == \\"--delimiter-out\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] output_delimiter = arg elif (arg == \\"-W\\" or arg == \\"--terminator-in\\" or arg == \\"--newline-in\\" or arg == \\"--endline-in\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] input_row_terminator = arg elif (arg == \\"-w\\" or arg == \\"--terminator-out\\" or arg == \\"--newline-out\\" or arg == \\"--endline-out\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] output_row_terminator = arg elif (arg == \\"--cell-width-limit\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] csv_cell_width_limit = int(arg) elif (arg == \\"-K\\" or arg == \\"--row-offset-in\\" or arg == \\"--offset\\" or arg == \\"--skip\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] input_row_start_offset = int(arg) elif (arg == \\"-N\\" or arg == \\"--row-count-in\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] if ('ALL' == arg.upper()): input_row_count_max = None else: input_row_count_max = int(arg) elif (arg == \\"-n\\" or arg == \\"--row-count-out\\" ): if (arg_index < arg_count): arg_index += 1 arg = arg_list[arg_index] if ('ALL' == arg.upper()): output_row_count_max = None else: output_row_count_max = int(arg) elif (None != arg and 0 < len(arg) ): if (None == head_row_str): head_row_str = arg elif (None == input_file_name): input_file_name = arg arg_index += 1 head_row = None if (None != head_row_str): head_row = head_row_str.split(',') if (None == head_row): show_help = True if (show_help): out_io.write(help_text) else: input_charset_name = decode_charset_name(input_charset_name) output_charset_name = decode_charset_name(output_charset_name) input_row_terminator = decode_newline(input_row_terminator) output_row_terminator = decode_newline(output_row_terminator) input_delimiter = decode_delimiter_name(input_delimiter) output_delimiter = decode_delimiter_name(output_delimiter) in_file = None out_file = None try: read_text_io_mode = 'rt' #in_newline_mode = '' # don't translate newline chars in_newline_mode = input_row_terminator in_file_id = input_file_name should_close_in_file = True if (None == in_file_id): in_file_id = in_io.fileno() should_close_in_file = False in_io = io.open( in_file_id ,mode=read_text_io_mode ,encoding=input_charset_name ,newline=in_newline_mode ,errors=input_charset_error_mode ,closefd=should_close_in_file ) if (should_close_in_file): in_file = in_io write_text_io_mode = 'wt' out_newline_mode='' # don't translate newline chars #out_newline_mode = output_row_terminator out_file_id = output_file_name should_close_out_file = True if (None == out_file_id): out_file_id = out_io.fileno() should_close_out_file = False out_io = io.open( out_file_id ,mode=write_text_io_mode ,encoding=output_charset_name ,newline=out_newline_mode ,errors=output_charset_error_mode ,closefd=should_close_out_file ) if (should_close_out_file): out_file = out_io in_csv = csv.reader( in_io ,delimiter=input_delimiter ,lineterminator=input_row_terminator ) out_csv = csv.writer( out_io ,delimiter=output_delimiter ,lineterminator=output_row_terminator ) execute( in_csv ,out_csv ,input_row_terminator ,output_row_terminator ,input_row_start_offset ,input_row_count_max ,output_row_count_max ,head_row ) except BrokenPipeError: pass finally: if (None != in_file): in_file.close() in_file = None if (None != out_file): out_file.close() out_file = None def execute( in_csv ,out_csv ,input_row_terminator ,output_row_terminator ,in_row_offset_start ,in_row_count_max ,out_row_count_max ,new_head_row ): # first write the new row out_csv.writerow(new_head_row) # then write the output using the csv-translate code # [20170918 [db] This is just a copy of the code from -csv-translate; # it is a bit overkill to include all of this here] end_row = None cr_newline = 'r' lf_newline = 'n' crlf_newline = 'rn' out_newline = output_row_terminator in_row_count = 0 out_row_count = 0 in_row = next(in_csv, end_row) while (end_row != in_row and (None == in_row_count_max or in_row_count < in_row_count_max) and (None == out_row_count_max or out_row_count < out_row_count_max) ): in_row_count += 1 if (in_row_offset_start < in_row_count): out_row = list(in_row) column_count = len(out_row) column_position = 0 while (column_position < column_count): cell_value = out_row[column_position] # fix newline characters in the data # (some tools - like postgres - can't handle mixed newline chars) if (None != cell_value): # replace crlf with lf, then we will replace lf's with the output newline, # this prevents us from turning a crlf into a double newline cell_value = cell_value.replace(crlf_newline, lf_newline) cell_value = cell_value.replace(cr_newline, lf_newline) cell_value = cell_value.replace(lf_newline, out_newline) out_row[column_position] = cell_value column_position += 1 out_csv.writerow(out_row) out_row_count += 1 in_row = next(in_csv, end_row) def console_main(): main(sys.argv, sys.stdin, sys.stdout, sys.stderr) if __name__ == \\"__main__\\": console_main()"},{"prompt":"Create a web scraper in Python to extract the content of a Wikipedia page and save it as an json object. Wikipedia page URL","completion":"import requests from bs4 import BeautifulSoup import json url = '<Your URL>' # Get the page page = requests.get(url) # Parse the HTML soup = BeautifulSoup(page.content, 'html.parser') # Scrape the content data = { 'title': soup.find(id='firstHeading').text, 'content': soup.find(id='mw-content-text').text } # Save as JSON with open('data.json', 'w') as outfile: json.dump(data, outfile)"},{"prompt":"Using Python, write a program that finds the most common word in a given set of text. This is an example sentence. The quick brown fox jumps over the lazy dog","completion":"from collections import Counter def most_common_word(text): words = text.split() cnt = Counter() for word in words: cnt[word] += 1 return cnt.most_common(1)[0][0] text = \\"This is an example sentence. The quick brown fox jumps over the lazy dog\\" print(most_common_word(text))"},{"prompt":"Develop an algorithm to find the maximum depth of a binary treeand generate a Python code for it.","completion":"def max_depth(node): if node is None: return 0 leftDepth = max_depth(node.left) rightDepth = max_depth(node.right) if leftDepth > rightDepth: return leftDepth + 1 else: return rightDepth + 1"},{"prompt":"Design a Python program to switch the indices of two values in a given 2dimensional array. arr = [[1, 2], [3, 4]]","completion":"def switchIndexes(arr): result = [[0 for i in range(len(arr[0]))] for j in range(len(arr))] for i in range(0, len(arr)): for j in range(0, len(arr[0])): result[j][i] = arr[i][j] return result switchIndexes(arr)"},{"prompt":"Build a graphical user interface in Python with a text box and a submit button. When the submit button is clicked, the program should print the contents of the text box.","completion":"import tkinter def on_submit(): print(user_input.get()) # Create the main window root = tkinter.Tk() root.geometry(\\"300x200\\") # Create a textbox user_input = tkinter.Entry(root) user_input.pack() # Create the submit button submit_button = tkinter.Button(root, text=\\"Submit\\", command=on_submit) submit_button.pack() # Run the main loop root.mainloop()"},{"prompt":"Write a code to implement a priority queue using a max heap in Python","completion":"class MaxHeap: def __init__(self): self.heap_list = [0] self.current_size = 0 def perc_up(self, i): while i // 2 > 0: if self.heap_list[i] > self.heap_list[i // 2]: self.heap_list[i // 2], self.heap_list[i] = self.heap_list[i], self.heap_list[i // 2] i = i // 2 def insert(self, k): self.heap_list.append(k) self.current_size = self.current_size + 1 self.perc_up(self.current_size) def perc_down(self, i): while (i * 2) <= self.current_size: mc = self.max_child(i) if self.heap_list[i] < self.heap_list[mc]: self.heap_list[i], self.heap_list[mc] = self.heap_list[mc], self.heap_list[i] i = mc def max_child(self, i): if i * 2 + 1 > self.current_size: return i * 2 else: if self.heap_list[i*2] > self.heap_list[i*2+1]: return i * 2 else: return i * 2 + 1 def delete_max(self): retval = self.heap_list[1] self.heap_list[1] = self.heap_list[self.current_size] self.current_size = self.current_size - 1 self.heap_list.pop() self.perc_down(1) return retval def build_heap(self, alist): i = len(alist) // 2 self.current_size = len(alist) self.heap_list = [0] + alist[:] while (i > 0): self.perc_down(i) i = i - 1"},{"prompt":"Create logic in your Python application to handle any corner cases in the user input. <no input>","completion":"def handle_corner_cases(input_string): input_string = input_string.lower() if 'heavy' in input_string or 'big' in input_string: return 'Heavy/Big objects detected!' elif 'light' in input_string or 'small' in input_string: return 'Light/Small objects detected!' else: return 'Input not recognized!'"},{"prompt":"Generate a reinforcement learning algorithm. Design a RL algorithm to solve an environment with a single agent and sparse rewards.","completion":"Create a Python program to implement a reinforcement learning agent that utilizes Q-learning for solving an environment with sparse rewards. The algorithm should keep the learning agent in a continuous loop of taking actions, observing rewards and updating the Q-value function to reach the outcome desired."},{"prompt":"mplement an algorithm in Python that can calculate the maximum path sum from the given tree. # tree structure root = BinaryTreeNode(10) root.left = BinaryTreeNode(5) root.right = BinaryTreeNode(20) root.left.left = BinaryTreeNode(2) root.left.right = BinaryTreeNode(11) root.right.left = BinaryTreeNode(15) root.right.right = BinaryTreeNode(40)","completion":"def max_path_sum(root): if not root: return 0 left_sum = max_path_sum(root.left) right_sum = max_path_sum(root.right) max_single_val = max(max(left_sum, right_sum) + root.data, root.data) max_top = max(max_single_val, left_sum + root.data + right_sum) max_path_sum.res = max(max_path_sum.res, max_top) return max_single_val max_path_sum.res = float('-inf') max_path_sum(root) print (max_path_sum.res)"},{"prompt":"Write a Python program to edit a dataset of 20 records. The program should take the dataset as input, sort it according to a specific field, and output the sorted dataset. dataset = [ {'name': 'John', 'age': 30}, {'name': 'Adam', 'age': 20}, {'name': 'Eric', 'age': 40}, {'name': 'Mia', 'age': 25}, {'name': 'Jasper', 'age': 30}, {'name': 'Noah', 'age': 22}, {'name': 'Emma', 'age': 35}, {'name': 'Eva', 'age': 45}, {'name': 'Adam', 'age': 23}, {'name': 'Olivia', 'age': 20}, {'name': 'Daniel', 'age': 33}, {'name': 'Ava', 'age': 26}, {'name': 'Levi', 'age': 40}, {'name': 'Isabella', 'age': 27}, {'name': 'Ethan', 'age': 24}, {'name': 'Sophia', 'age': 19}, {'name': 'Liam', 'age': 35}, {'name': 'Charlotte', 'age': 38}, {'name': 'Benjamin', 'age': 17}, {'name': 'Amelia', 'age': 44} ]","completion":"# Sort the dataset according to age sorted_dataset = sorted(dataset, key=lambda x: x['age']) # Output the sorted dataset for record in sorted_dataset: print(record) # Output: {'name': 'Benjamin', 'age': 17} {'name': 'Adam', 'age': 20} {'name': 'Olivia', 'age': 20} {'name': 'Sophia', 'age': 19} {'name': 'Adam', 'age': 23} {'name': 'Noah', 'age': 22} {'name': 'Ethan', 'age': 24} {'name': 'Mia', 'age': 25} {'name': 'Ava', 'age': 26} {'name': 'Isabella', 'age': 27} {'name': 'John', 'age': 30} {'name': 'Jasper', 'age': 30} {'name': 'Daniel', 'age': 33} {'name': 'Liam', 'age': 35} {'name': 'Emma', 'age': 35} {'name': 'Charlotte', 'age': 38} {'name': 'Eva', 'age': 45} {'name': 'Amelia', 'age': 44} {'name': 'Eric', 'age': 40} {'name': 'Levi', 'age': 40}"},{"prompt":"Extend a Python program to calculate the area of any regular polygon. 3 side","completion":"def calculate_area(n): \\"\\"\\" Calculates the area of an n-sided regular polygon \\"\\"\\" # Calculate the area of the n-sided regular polygon side_length = 1 area = (n * side_length**2) / (4 * math.tan(math.pi / n)) return round(area, 2) # Get the number of sides as an input n = int(input(\\"Enter the number of sides\\")) # Calculate the area and print it area = calculate_area(n) print(\\"The area of the regular polygon is\\", area)"},{"prompt":"Write a script in Python to delete a given element from an array.","completion":"def delete_element(arr, element): if element in arr: arr.remove(element) return arr"},{"prompt":"mplement a Python parser to print return a list of words from a given string. Hello, World!","completion":"def parse_words(string): words = [] for word in string.split(\\" \\"): words.append(word.strip(\\"!,.? ntr\\"'-\\")) return words result = parse_words(\\"Hello, World!\\") print(result) Output: ['Hello', 'World']"},{"prompt":"Write a function in Python to compute the accuracy of a classification by comparing the true labels and the predicted labels. true_labels = [0, 0, 1, 1] predicted_labels = [1, 0, 0, 1]","completion":"def compute_accuracy(true, pred): correct = 0 total = len(true) for i in range(total): if true[i] == pred[i]: correct += 1 return correct/total"},{"prompt":"Create an application in Python to convert temperatures from Celsius to Fahrenheit","completion":"def celsius_to_fahrenheit(celsius): return celsius * 9/5 + 32 celsius = float(input(\\"Enter the temperature in Celsius: \\")) fahrenheit = celsius_to_fahrenheit(celsius) print(\\"The temperature in Fahrenheit is: \\", fahrenheit)"},{"prompt":"Create an AI system in Python that can evaluate the sentiment of a given sentence and classify it as positive, negative or neutral. Not applicable","completion":"import nltk import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB #Data processing data = pd.read_csv('dataset.csv') train, test = train_test_split(data,test_size=0.2,random_state=1) X_train = train['Sentence'].values y_train = train['Sentiment'].values X_test = test['Sentence'].values y_test = test['Sentiment'].values #Create a CountVectorizer count_vectorizer = CountVectorizer(stop_words='english') count_train = count_vectorizer.fit_transform(X_train) count_test = count_vectorizer.transform(X_test) #Train the model nb_classifier = MultinomialNB() nb_classifier.fit(count_train,y_train) #Evaluate the model predictions = nb_classifier.predict(count_test) print('Accuracy score: ', format(np.mean(predictions==y_test)))"},{"prompt":"Create a python program that finds the number of elements between two given indices in a given list. list = [0, 4, 5, 8, 9] start = 2 end = 4","completion":"def count_elements(list, start, end): elements_count = 0 start_index = list.index(start) end_index = list.index(end) for i in range(start_index + 1, end_index): elements_count += 1 return elements_count"},{"prompt":"Create a script in Python that prints the first 10 Fibonacci numbers. Not applicable","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: x = 0 y = 1 for i in range(2, n): z = x+y x = y y = z return z for i in range(1, 11): print(Fibonacci(i))"},{"prompt":"Design a python program that takes an integer as input and returns the sum of all multiples of 3 and 5 up to (but not including) the given integer. 15","completion":"def calculate_sum(n): sum = 0 for i in range(n): if i % 3 == 0 or i % 5 == 0: sum += i return sum print(calculate_sum(15)) # 42"},{"prompt":"Take the following Python data structure and render it to JSON format. data = { 'name': 'John', 'age': 34, 'hobbies': ['surfing', 'hiking', 'golf'] }","completion":"import json data = { 'name': 'John', 'age': 34, 'hobbies': ['surfing', 'hiking', 'golf'] } json_data = json.dumps(data) print(json_data)"},{"prompt":"Compose Python code to remove all elements from a list by value. mylist = [1,2,3,4,2]","completion":"def remove_by_val(mylist, val): return [i for i in mylist if i != val] mylist = [1,2,3,4,2] result = remove_by_val(mylist, 2) print(\\"Updated list after removing elements are: \\", result)"},{"prompt":"Create a search algorithm in Python to find a target element in a given array. [1, 4, 6, 8, 10], target = 8","completion":"def search(arr, target): for idx, num in enumerate(arr): if num == target: return idx return -1 idx = search([1, 4, 6, 8, 10], 8) print(idx)"},{"prompt":"Create a web scraper in Python to extract all data from a page with the URL: http://example.com http://example.com","completion":"import requests from bs4 import BeautifulSoup r = requests.get(\\"http://example.com\\") data = r.text soup = BeautifulSoup(data, 'html.parser') for item in soup.find_all(\\"div\\"): print(item.text)"},{"prompt":"Write a Python code to convert a numeric string to number.","completion":"def convert_string_to_number(str): try: return int(str) except ValueError: try: return float(str) except ValueError: return \\"String could not be converted to number.\\" str = input(\\"String: \\") print(\\"Number:\\", convert_string_to_number(str))"},{"prompt":"Create a basic web server in Python that serves static pages from a given directory. Not applicable","completion":"import http.server import socketserver PORT = 8080 Handler = http.server.SimpleHTTPRequestHandler with socketserver.TCPServer((\\"\\", PORT), Handler) as httpd: print(\\"Serving at port\\", PORT) httpd.serve_forever()"},{"prompt":"Using the given input, sort a list containing both numerical and strings data types in Python. [1, 'c', 3, 'a', 2, 'b']","completion":"# define list lst = [1, 'c', 3, 'a', 2, 'b'] # sort list sorted_lst = sorted(lst, key=lambda x:str(x)) # print sorted list print(sorted_lst)"},{"prompt":"Create a Python function for encrypting strings using a “Vigenere Cipher”. HELLO","completion":"def encrypt_vigenere(plaintext, key): ciphertext = \\"\\" index = 0 for c in plaintext: ciphertext += chr((ord(c) - 65 + ord(key[index]) - 65) % 26 + 65) index = (index + 1) % len(key) return ciphertext"},{"prompt":"Create a Python program to compare two list and return a new combined list list_a = [1, 2, 3] list_b = [4, 5, 6]","completion":"def combine_list(list_a, list_b): combined_list = [] for a in list_a: combined_list.append(a) for b in list_b: combined_list.append(b) return combined_list"},{"prompt":"Compute the frequency of the words in a sentence using Python. sentence = Hi there, how are you?","completion":"def compute_word_frequency(sentence): words = sentence.split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 return frequency"},{"prompt":"Generate code to find the intersection of two lists in Python.","completion":"def intersect(list1, list2): return list(set(list1).intersection(list2)) print(intersect([1,2,3,4], [2,3,4,5])) # prints [2,3,4]"},{"prompt":"Generate a predictive model using the scikitlearn library in Python. An array of user data containing user attributes such as age, location, marital status, salary etc.","completion":"import numpy as np from sklearn.model_selection import train_test_split # prepare the data user_data = np.array(< array of user data >) features = user_data[:,:-1] labels = user_data[:,-1] # split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2) # create the model from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(X_train, y_train) # make predictions predictions = model.predict(X_test) # evaluate the model from sklearn.metrics import accuracy_score accuracy = accuracy_score(y_test, predictions) print('Model accuracy: ', accuracy)"},{"prompt":"Create a method in the Python language that takes a list of integers and returns a list containing only the values greater than 10. [1, 5, 10, 15, 20]","completion":"def filter_greater_than_10(nums): filtered_nums = [] for num in nums: if num > 10: filtered_nums.append(num) return filtered_nums nums = [1, 5, 10, 15, 20] filtered_nums = filter_greater_than_10(nums) print(filtered_nums) # [15, 20]"},{"prompt":"Generate a python code to find the sum of the n terms of a series given the first term and the common ratio [a, r],","completion":"def find_sum_series(a, r, n): sum = 0 for i in range(1, n + 1): sum = sum + a*(r**(i - 1)) return sum"},{"prompt":"Create a python script to train a machine learning model using a given dataset","completion":"from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.neighbors import KNeighborsClassifier # creating standard scalar object scaler = StandardScaler() # loading the dataset data = load_dataset() # splitting the dataset into the train and test dataset X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.25) # standarizing the features X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Creating the model classifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2) # training the model classifier.fit(X_train, y_train) # predictions y_pred = classifier.predict(X_test)"},{"prompt":"Create a Python script to print out the number of days between two dates.","completion":"import datetime def date_difference(date1, date2): return (date2-date1).days date1 = datetime.date(year1, month1, day1) date2 = datetime.date(year2, month2, day2) print(date_difference(date1, date2))"},{"prompt":"Write a Python program to check if an element exists within a list. my_list = [1, 3, 5 ,7, 9]","completion":"def find_elm(lst, elm): return elm in lst print(find_elm(my_list, 7)) # True"},{"prompt":"Create a class called Person using Python, with attributes name, age and country.","completion":"class Person: def __init__(self, name, age, country): self.name = name self.age = age self.country = country def get_name(self): return self.name def get_age(self): return self.age def get_country(self): return self.country"},{"prompt":"Create a basic Python program that prints a message in the console every 3 seconds. Not applicable","completion":"import time while True: print 'This message is printed every 3s' time.sleep(3) # Sleep for 3 seconds"},{"prompt":"mplement a basic clientserver network communication system with a protocol for exchanging messages between a client and a server using Python. Not applicable","completion":"# Server program import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = socket.gethostname() port = 8888 # Bind to the port server_socket.bind((host, port)) server_socket.listen(5) print(\\"Waiting for a connection...\\") # Establish a connection with the client client_socket, addr = server_socket.accept() print(\\"Received a connection from %s \\" % str(addr)) while True: data = client_socket.recv(1024).decode('utf-8') if not data: break print(\\"Received from client: %s\\" %data) data = data.upper() print(\\"Sending to client: %s\\" %data) client_socket.send(data.encode('utf-8')) client_socket.close() # Client program import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) host = socket.gethostname() port = 8888 # Connect to server's socket client_socket.connect((host, port)) message = input(\\"Enter a message -> \\") # Send a message client_socket.send(message.encode('utf-8')) # Receive a message data = client_socket.recv(1024).decode('utf-8') print(\\"Received from server: %s\\" %data) client_socket.close()"},{"prompt":"Make a Python program to rotate a list by n elements to the left.","completion":"# Function to rotate a list by n elements to the left def rotateList(input_list, n): return input_list[n:] + input_list[:n] # Driver Code if __name__ == \\"__main__\\": input_list = [1, 2, 3, 4, 5, 6] print(rotateList(input_list, 3))"},{"prompt":"Create a web application using Python and Flask with an endpoint that takes a customers address as an input and matches it with the nearest store from a list of stores. address: 1 Main Street, Anytown, US stores: { id: 1, name: Store A, address: 2 Main Street, Anytown, US }, { id: 2, name: Store B, address: 3 Main Street, Anytown, US }, { id: 3, name: Store C, address: 4 Main Street, Anytown, US }","completion":"import flask from geopy.distance import geodesic app = flask.Flask('__name__') stores = [ { 'store_id': 1, 'name': 'Store A', 'address': '2 Main Street, Anytown, US' }, { 'store_id': 2, 'name': 'Store B', 'address': '3 Main Street, Anytown, US' }, { 'store_id': 3, 'name': 'Store C', 'address': '4 Main Street, Anytown, US' }, ] @app.route('/nearest-store', methods=['POST']) def find_nearest_store(): request_data = flask.request.get_json() address = request_data.get('address') nearest_store = None min_distance = None for store in stores: store_distance = geodesic(address, store['address']).kilometers if not min_distance or store_distance < min_distance: nearest_store = store min_distance = store_distance return flask.jsonify({ 'store': nearest_store }) if __name__ == '__main__': app.run()"},{"prompt":"Optimize the following Python program to calculate the sum of two numbers. a = 100 b = 200 sum = a + b","completion":"a = 100 b = 200 sum = a + b # Optimized code sum = sum(100, 200)"},{"prompt":"Create a function in Python that returns the average of three numbers given as its arguments.","completion":"def average_three(num1, num2, num3): return (num1 + num2 + num3) / 3"},{"prompt":"Develop a Python function for validating email addresses according to RFC2822.","completion":"import re def is_valid_email(email): # Making sure it contains an @ and at least one '.' if re.match(\\"^.+@[^.].*.[a-z]{2,10}\\", email) is None: return False return True"},{"prompt":"Write a Python code that finds the sum of the two largest numbers in a given list. [1,2,3,4,5]","completion":"def find_largest_sum(list): largestNum = max(list) list.remove(largestNum) secondLargestNum = max(list) return largestNum+secondLargestNum print(find_largest_sum([1,2,3,4,5])) # 9"},{"prompt":"Generate a list of distinct values from an array of integers using a python program. [50, 20, 30, 40, 10]","completion":"unique_list = list(set([50, 20, 30, 40, 10])) print(unique_list)"},{"prompt":"Write an objectoriented code in Python to create a class named Student, which has two instance variables, name and age.","completion":"class Student: def __init__(self, name, age): self.name = name self.age = age"},{"prompt":"Write a Python program to extract the email address from a given string.","completion":"import re def extract_email(string): emails = re.findall(r\\"[w.-]+@[w.-]+\\", string) return emails string = \\"My email is abc@gmail.com\\" extract_email(string) # ['abc@gmail.com']"},{"prompt":"Create an AWS Lambda function with a Python runtime for sending a message to an SNS topic. Not applicable","completion":"import json import boto3 def lambda_handler(event, context): # Create an SNS Client sns_client = boto3.client('sns') # Send a message to the SNS topic topic_arn = 'arn:aws:sns:eu-west-1:123456789012:my-topic' message = 'This is a test message' response = sns_client.publish( TopicArn = topic_arn, Message = message ) return { 'statusCode': 200, 'body': json.dumps(response) }"},{"prompt":"Create a Python program to evaluate exprression trees. The program should take in a preorder list of nodes and evaluate them. ['*', '+', 9, 10, 11]","completion":"def evaluate_tree(preorder): # base case if len(preorder) == 1: return preorder[0] else: # identify the lowest level operator and its operands operator = preorder[0] leftoperand = preorder[1] rightoperand = preorder[2] # evaluate the operands leftoperand = evaluate_tree(leftoperand) if isinstance(leftoperand, list) else leftoperand rightoperand = evaluate_tree(rightoperand) if isinstance(rightoperand, list) else rightoperand # compute the result of the operation if operator == '+': return leftoperand + rightoperand elif operator == '-': return leftoperand - rightoperand elif operator == '*': return leftoperand * rightoperand elif operator == '/': return leftoperand / rightoperand print(evaluate_tree(['*', '+', 9, 10, 11])) # prints 99"},{"prompt":"Generate a function in Python that takes integer numbers as input and prints out their binary, octal and hexadecimal equivalent.","completion":"def decimal_binary_octal_hexadecimal(n): print(\\"Binary =\\", bin(n)) print(\\"Octal =\\", oct(n)) print(\\"Hexadecimal =\\", hex(n))"},{"prompt":"Write a python program to determine if the given list has duplicates. list = [1, 2, 4, 6, 2, 5]","completion":"def isDuplicates(list): duplicate_items = set() for item in list: if item in duplicate_items: return True duplicate_items.add(item) return False my_list = [1, 2, 4, 6, 2, 5] result = isDuplicates(my_list) print(result) # prints True"},{"prompt":"Create a basic web scraper in Python to parse HTML. <p>This is some text</p><a href='www.example.com/'>Click Here</a>","completion":"#import library import bs4 #store HTML data html_data = '<p>This is some text</p><a href='www.example.com/'>Click Here</a>' #parse HTML data soup = bs4.BeautifulSoup(html_data, 'html.parser') #get all tags all_tags = soup.find_all() #print result for tag in all_tags: print(tag)"},{"prompt":"Generate 3 random numbers within the specified range using Python. [0, 10]","completion":"import random random_numbers = random.sample(range(0, 10), 3) print(random_numbers)"},{"prompt":"Write a function in Python that takes an unordered list of integers as a parameter and will return a sorted list. Unordered list = [8, 20, 5, 1]","completion":"def sortList(list): sorted_list = sorted(list) return sorted_list"},{"prompt":"Develop a machine learning model in Python to predict the age of a person based on their height.","completion":"from sklearn import linear_model from sklearn.model_selection import train_test_split #load the data X = height y = age #split it into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) #train a linear regression model model = linear_model.LinearRegression() model.fit(X_train, y_train) #predict the age based on height y_pred = model.predict(X_test)"},{"prompt":"Write a python program that takes a string as input and check if it is palindrome or not","completion":"\\"\\"\\" Write a python program that takes a string as input and check if it is palindrome or not \\"\\"\\" def is_palindrome(string): # Reverse the string rev_string = string[::-1] # Compare both strings if string == rev_string: return True else: return False if __name__ == '__main__': string = 'malayalam' print(is_palindrome(string)) # Output: True"},{"prompt":"Generate a function in Python which takes a string and returns a dictionary with count of each character.","completion":"def char_count(string): char_dict = {} for char in string: if char in char_dict: char_dict[char] += 1 else: char_dict[char] = 1 return char_dict"},{"prompt":"Develop a Python script to automate the following tasks. Send an email template when customers sign up for a subscription.","completion":"import smtplib from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText # Email message content template = \\"Dear {name}, thank you for signing up for our subscription! We just wanted to let you know that we'll be sending you emails with the latest news and offers so you can stay up to date with what we have going on. Don't forget to check out our website to learn more about our services. Thanks again for signing up! - Team XYZ\\" # Load customer names and email address from file with open('customer_file.csv') as f: customers = f.readlines() # Iterate through customers and send email for customer in customers: name = customer.split(',')[0] email_address = customer.split(',')[1] # Create message message = MIMEMultipart() message['Subject'] = 'Thanks for signing up for our subscription!' message['From'] = 'Team XYZ <support@xyz.com>' message['To'] = email_address # Formatted message message.attach(MIMEText(template.format(name = name), 'plain')) # Connect to server and send email server = smtplib.SMTP('smtp.gmail.com', 587) server.starttls() server.login('username', 'password') server.send_message(message)"},{"prompt":"Write a python script to parse a JSON string and create two reports one containing all the cities in the US and another one containing all the cities in Europe. jsonString = { locations: [ { name: New York, continent: North America }, { name: Berlin, continent: Europe }, { name: San Francisco, continent: North America }, { name: Paris, continent: Europe } ] }","completion":"import json data = json.loads(jsonString) us_cities = [] europe_cities = [] for location in data['locations']: if location['continent'] == 'North America': us_cities.append(location['name']) elif location['continent'] == 'Europe': europe_cities.append(location['name']) print(f'US cities: {us_cities}n') print(f'Europe cities: {europe_cities}n')"},{"prompt":"Generate a python program to display the largest and smallest elements in a given array [2, 3, 8, 5, 10, 6]","completion":"def display_min_max(arr): # initializing max and min element max_element = arr[0] min_element = arr[0] # traverse through the array elements for x in arr: if (x > max_element): max_element = x if (x < min_element): min_element = x # display max and min element print(\\"The largest element is\\", max_element) print(\\"The smallest element is\\", min_element) # Driver code arr = [2, 3, 8, 5, 10, 6] display_min_max(arr)"},{"prompt":"Generate a Python code that calculates the mean of a data set given as a list of integers. [1, 2, 3, 4, 5, 6]","completion":"def calculate_mean(data): # Initialize the sum and length of data sum = 0 length = len(data) # Calculating the sum for x in data: sum += x # Calculating the mean mean = sum / length return mean # Test the function data = [1, 2, 3, 4, 5, 6] print('Mean of data is:', calculate_mean(data))"},{"prompt":"Generate code to construct a deck of cards with Python. Not applicable","completion":"class Card(): # suits is a set of all possible suits suits = {\\"spades\\", \\"hearts\\", \\"diamonds\\", \\"clubs\\"} # ranks is a set of all possible ranks ranks = {\\"Ace\\", 2, 3, 4, 5, 6, 7, 8, 9, 10, \\"Jack\\", \\"Queen\\", \\"King\\"} # Create a new card def __init__(self, suit, rank): # Check if the suit is valid if suit not in self.suits: raise ValueError(f\\"{suit} is not a valid suit\\") # Check if the rank is valid if rank not in self.ranks: raise ValueError(f\\"{rank} is not a valid rank\\") # Set the attributes of the card self.suit = suit self.rank = rank # Print the card as a string def __str__(self): return f\\"{self.rank} of {self.suit}\\" class Deck(): # Create a deck of 52 cards def __init__(self): self.cards = [] for suit in Card.suits: for rank in Card.ranks: self.cards.append(Card(suit, rank)) # Generate a random card from the deck def get_random_card(self): return self.cards.pop()"},{"prompt":"Write a Python program to allow a user to input a sentence and print the words in the sentence in reverse order. This is my sentence.","completion":"def reverse_words_in_sentence(sentence): words_list = sentence.split() words_list.reverse() reversed_sentence = \\" \\".join(words_list) return reversed_sentence sentence = \\"This is my sentence.\\" result = reverse_words_in_sentence(sentence) print(result)"},{"prompt":"Design an algorithm to find out the top 5 characters with the highest occurrence from a string in Python. This is a test sentence to use for the example.","completion":"from collections import Counter def top_characters(string): counter = Counter(string).most_common(5) return counter string = \\"This is a test sentence to use for the example.\\" print(top_characters(string)) # Output: [('e', 5), ('s', 4), ('t', 4), ('o', 3), ('i', 3)]"},{"prompt":"Write a function in Python that computes the median of a given array of numbers. [2,3,4,5,6,7,8]","completion":"def median(arr): arr.sort() n = len(arr) if n % 2 != 0: return arr[n//2] else: return (arr[(n-1)//2] + arr[n//2]) / 2 # driver code arr = [2,3,4,5,6,7,8] print(median(arr))"},{"prompt":"Write a Python script which iterates over a list of numbers and prints them out in reverse order. [1, 2, 3, 4]","completion":"numbers = [1, 2, 3, 4] for i in range(len(numbers)-1, -1, -1): print(numbers[i])"},{"prompt":"Write a Python class that prints the mean and median of a given list. [2, 4, 6, 8, 10]","completion":"class MeanMedianCalculator: def __init__(self, data): self.data = data def mean(self): return sum(self.data) / len(self.data) def median(self): self.data.sort() return self.data[(len(self.data)-1) // 2] calculator = MeanMedianCalculator([2, 4, 6, 8, 10]) print(\\"Mean is {}, Median is {}\\".format(calculator.mean(), calculator.median()))"},{"prompt":"Optimize the code for the travelling salesman problem in Python.","completion":"import itertools # Define the travelling salesman problem (TSP) def calc_dist(a, b): # calculate Euclidean distance between points 'a' and 'b' dist = # your code return dist def travelling_salesman(points): # \\"points\\" is a list of tuples [(x1, y1), (x2, y2), ...] best_solution = None min_dist = float('inf') solutions = itertools.permutations(points) for solution in solutions: # calculate the total distance of the route dist = 0 for i in range(len(solution) - 1): dist += calc_dist(solution[i], solution[i+1]) # check if it is the shortest route if dist < min_dist: min_dist = dist best_solution = solution return best_solution solution = travelling_salesman([(0, 0), (2, 2), (3, 1), (1, 3)]) print(solution) # [(0, 0), (2, 2), (3, 1), (1, 3)]"},{"prompt":"Given a linked list, write an algorithm in Python to check if the linked list contains a cycle (i.e. the list is circular). Not applicable","completion":"def contains_cycle(head): slow_pointer = head fast_pointer = head while fast_pointer and fast_pointer.next: slow_pointer = slow_pointer.next fast_pointer = fast_pointer.next.next if slow_pointer == fast_pointer: return True return False"},{"prompt":"Generate an algorithm in Python that finds the maximum subarray sum of an array. [1, 2, 3, 4, 5, 6]","completion":"def maxSubArraySum(arr): max_so_far = 0 max_ending_here = 0 for i in range(0, len(arr)): max_ending_here = max_ending_here + arr[i] if (max_ending_here < 0): max_ending_here = 0 if (max_so_far < max_ending_here): max_so_far = max_ending_here return max_so_far # Test arr = [1, -2, 3, 4, -5, 6] max_sum = maxSubArraySum(arr) print('Max Sum =', max_sum)"},{"prompt":"Create a Python program to open the user's default web browser with the given URL as an argument. www.example.com","completion":"import webbrowser url = 'www.example.com' webbrowser.open_new(url)"},{"prompt":"Write a python program to make an API call, return the response status code, and store return json data in a dictionary. The API endpoint is https://api.example.com/user","completion":"import requests url = 'https://api.example.com/users' response = requests.get(url) response_status_code = response.status_code data = response.json() data_dict = dict(data) print(response_status_code) print(data_dict)"},{"prompt":"This code is a Python script for downloading slides and exercises for university lectures. To use it, you need to provide a config file under data/config.yaml. The script takes several command line arguments: v or verbose for verbose output c or course to specify a course which should be checked s or source to specify a source which should be checked sim or simulate to specify if the process should only be simulated clear to specify a course which files should be deleted from the database (not from file system). Use keyword 'all' to clear the whole database. The script dynamically loads a class from a string, logs messages if verbose output is on, and loops through sources and courses to download relevant files. It also checks file extensions and names, and saves file and timestamp information in a database. To clear courses from the database, use the clear argument.","completion":"#!/usr/bin/env python3 import argparse import importlib import os import re import sqlite3 from datetime import datetime from urllib.parse import urljoin import requests import yaml def load_plugin_class(plugin_class_str): \\"\\"\\" dynamically load a class from a string \\"\\"\\" class_data = plugin_class_str.split(\\".\\") module_path = \\"plugins.\\" + \\".\\".join(class_data[:-1]) class_str = class_data[-1] mod = importlib.import_module(module_path) return getattr(mod, class_str) # print if verbose output is on def log(msg): if verbose_output: print(msg) def course_loop(): download_count = 0 skip_count = 0 # import config try: with open(os.path.join(os.path.dirname(__file__), 'data', 'config.yaml'), 'r', encoding='utf-8') as config_file: config = yaml.load(config_file) except FileNotFoundError: print(\\"Please provide a config file under data/config.yaml.\\") return # make the initial request to get the token session = requests.Session() # Loop through sources for src_cfg in config: # check if there are courses to download from if 'courses' not in src_cfg or (source_part is not None and src_cfg['name'] not in source_part): continue log('nnSource: %s' % src_cfg['name']) # load dynamically the source class try: src_class = load_plugin_class(src_cfg['class']) src = src_class() except AttributeError: print('Class %s not found. Check your config file.' % src_cfg['class']) continue except ImportError: print( 'Class %s not found. Check your config file' % src_cfg['class'] + ' and ensure you have the class qualifier relative to the plugin directory.') continue # login if 'login_url' in src_cfg and 'username' in src_cfg and 'password' in src_cfg: src.login(session, src_cfg['login_url'], src_cfg['username'], src_cfg['password']) # loop through courses for course in src_cfg['courses']: # check if only some courses should be checked if course_part is not None and course['name'] not in course_part: continue log('nCourse: %sn' % course['name']) if 'path' in course and course['path'] is not None: course_url = urljoin(src_cfg['base_url'], course['path']) elif 'param' in course and course['param'] is not None: course_url = src.course_url(src_cfg['base_url'], course['param']) else: course_url = src_cfg['base_url'] # regex pattern for link text and file name text_pattern = re.compile(course['pattern']) filename_pattern = None if 'filename_pattern' in course: filename_pattern = re.compile(course['filename_pattern']) # get all relevant links from the source site links = src.link_list(session, course_url) if links is None: continue for link in links: if text_pattern.search(link[0]) is not None: # request file http header file_request = session.head(link[1], allow_redirects=True) # get file name if 'Content-Disposition' in file_request.headers: file_disposition = file_request.headers['Content-Disposition'] file_name = file_disposition[ file_disposition.index('filename=') + 10:len(file_disposition) - 1].encode( 'latin-1').decode('utf8') else: # last part of the link (usually filename) file_name = link[1].rsplit('/', 1)[-1] # check extension file_ext = os.path.splitext(file_name)[1] if 'ext' in course and course['ext'] is not False: if file_ext != course['ext'] or file_ext not in course['ext']: continue # check file name if filename_pattern is not None and filename_pattern.search(file_name) is None: continue # get last modified date as timestamp if 'Last-Modified' in file_request.headers: file_last_modified = int(datetime.strptime(file_request.headers['Last-Modified'], '%a, %d %b %Y %H:%M:%S %Z').timestamp()) else: print(\\"No timestamp found for file %s\\" % file_name) continue # adjust file name if 'rename' in course and course['rename'] is not False: # find a number num = re.search('d{1,3}', link[0]) if num is None: num = re.search('d{1,3}', file_name) if num is None: num = file_last_modified else: num = num.group(0) file_name = course['rename'].replace('%', str(num)) + file_ext # remove trailing whitespaces file_name = file_name.strip() # the complete file path file_path = os.path.join(course['local_folder'], file_name) # fetch old timestamp from database file_last_modified_old = c.execute( 'SELECT last_modified FROM file_modifications WHERE source=? AND course=? AND file_name=?', (src_cfg['name'], course['name'], file_name)).fetchone() # save file and timestamp in the database if it doesn't exists if not simulate and file_last_modified_old is None: c.execute( ''' INSERT INTO file_modifications (source, course, file_name, file_path, last_modified) VALUES (?,?,?,?,?) ''', (src_cfg['name'], course['name'], file_name, file_path, file_last_modified)) # update timestamp if there's a newer version of the file elif not simulate and file_last_modified > file_last_modified_old[0]: c.execute( 'UPDATE file_modifications SET last_modified=? WHERE source=? AND course=? AND file_name=?', (file_last_modified, src_cfg['name'], course['name'], file_name)) # otherwise skip saving else: skip_count += 1 # log(file_name + ' (skipped)') continue log(file_name + ' (new)') if simulate: conn.rollback() continue # request whole file file_request = session.get(link[1]) # write file try: os.makedirs(os.path.dirname(file_path), exist_ok=True) with open(file_path, 'wb') as f: f.write(file_request.content) download_count += 1 except FileNotFoundError: print('Can't write file to %s' % file_path) conn.rollback() # save changes to the database conn.commit() # display count of downloaded files log('nDownloaded %i file(s), skipped %i file(s)' % (download_count, skip_count)) def clear_course(): if course_to_clear[0] == 'all': c.execute(\\"DELETE FROM file_modifications\\") log('nCleared all courses') else: c.execute(\\"DELETE FROM file_modifications WHERE course=?\\", course_to_clear) log('nCleared course %s' % course_to_clear[0]) conn.commit() # command line args parser = argparse.ArgumentParser( description='A simple script for downloading slides and exercises for university lectures.') parser.add_argument('-v', '--verbose', action='store_true', help='verbose output') parser.add_argument('-c', '--course', action='append', help='specify a course which should be checked') parser.add_argument('-s', '--source', action='append', help='specify a source which should be checked') parser.add_argument('-sim', '--simulate', action='store_true', help='specify if the process should only be simulated') parser.add_argument('--clear', action='append', help='specify a course which files should be deleted from the database (not from file system).' + 'Use keyword 'all' to clear the whole database') args = parser.parse_args() verbose_output = args.verbose simulate = args.simulate course_part = args.course source_part = args.source course_to_clear = args.clear # database for timestamps conn = sqlite3.connect(os.path.join(os.path.dirname(__file__), 'data', 'file_modifications.db')) c = conn.cursor() # check if table exists otherwise create it c.execute( ''' CREATE TABLE IF NOT EXISTS file_modifications ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, source TEXT, course TEXT, file_name TEXT, file_path TEXT, last_modified INTEGER ); ''') if simulate: log(\\"Simulation on\\") if course_to_clear is not None: clear_course() else: course_loop() # close cursor c.close()"},{"prompt":"Create a class in Python which takes an employee name and salary as parameters and prints them. Employee Name: John Smith, Salary: 5000","completion":"class Employee: def __init__(self, name, salary): self.name = name self.salary = salary def print_employee_details(self): print('Employee Name: {}, Salary: {}'.format(self.name, self.salary)) employee = Employee('John Smith', 5000) employee.print_employee_details()"},{"prompt":"Create an automated process in Python to generate reports for sales data. Not applicable","completion":"import pandas as pd #Read the sales data data = pd.read_csv('sales_data.csv') # Generate a report for the sales data def generate_report (data): #Group data by Region and Month region_month = data.groupby(['Region','Month']) #Calculate total sales total_sales = region_month.sum()['Sales'] #Calculate total profit total_profit = region_month.sum()['Profit'] #Calculate max sales max_sales = region_month.max()['Sales'] #Create a report for the data report = pd.DataFrame({'Total Sales': total_sales, 'Total Profit': total_profit, 'Max Sales': max_sales}) #Return the report return report #Run the report print(generate_report(data))"},{"prompt":"Create a function in Python that takes in a string and returns the frequency of each character in the string in form of a dictionary. 'hello world'","completion":"def frequency(string): freq = {} for i in string: if i in freq: freq[i] += 1 else: freq[i] = 1 return freq print(frequency('hello world'))"},{"prompt":"Generate a code in Python to sort an array using insertion sort. [1, 3, 5, 2, 4]","completion":"def insertion_sort(arr): for j in range(1, len(arr)): key = arr[j] i = j - 1 while i >= 0 and arr[i] > key: arr[i + 1] = arr[i] i -= 1 arr[i + 1] = key return arr # Main program input_array = [1, 3, 5, 2, 4] output_array = insertion_sort(input_array) print(output_array)"},{"prompt":"Generate a Python program which takes two strings as input and returns true if they are anagrams of each other. listen, silent","completion":"def is_anagram(a, b): return sorted(a) == sorted(b) result = is_anagram(\\"listen\\", \\"silent\\") print(result)"},{"prompt":"Write a Python program to encrypt a given message using an affine cipher. message = Hello world","completion":"def encode_message(message, a, b): encoded_message = \\"\\" for char in message: # encode each character x = (ord(char) - 97) * a + b # wrap around if x is greater than 26 x = x % 26 # convert back to character encoded_message += chr(x + 97) return encoded_message # Main if __name__ == \\"__main__\\": message = \\"Hello world\\" a = 3 # a and b must be relatively prime b = 5 print(encode_message(message, a, b)) # Khoor zruog"},{"prompt":"Create a Python function for converting a Celsius temperature to Fahrenheit scale.","completion":"def celsius_to_fahrenheit(celsius): return (celsius * (9/5)) + 32"},{"prompt":"Write a Python script to sort a given list in ascending order. [4, 6, 1, 7]","completion":"def sort_ascending(list): return sorted(list)"},{"prompt":"Write a Python script to extract all the URLs from a given HTML page.","completion":"import re from bs4 import BeautifulSoup def extract_urls(html): soup = BeautifulSoup(html, 'html.parser') urls = [] for link in soup.find_all('a'): url = link.get('href') if url: urls.append(url) return urls"},{"prompt":"Convert hierarchical xml files to csv using Python. The code takes in an input file or port and converts the xml file to csv format. It only makes sense if the hierarchy has low depth. The output can be split into different files for the first hierarchy level using the p or split option. The output file name can be specified using the o or output option. The separating character for fields can be specified using the s or separator option, and the quoting character for fields can be specified using the q or quotechar option. The code also supports schema validation using an xsd schema specified using the x or xsd option and the a or validation option.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- \\"\\"\\" @file xml2csv.py @author Jakob Erdmann @author Michael Behrisch @author Laura Bieker @date 2013-12-08 @version Id: xml2csv.py 22608 2017-01-17 06:28:54Z behrisch Convert hierarchical xml files to csv. This only makes sense if the hierarchy has low depth. SUMO, Simulation of Urban MObility; see http://sumo.dlr.de/ Copyright (C) 2013-2017 DLR (http://www.dlr.de/) and contributors This file is part of SUMO. SUMO is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. \\"\\"\\" from __future__ import print_function from __future__ import absolute_import import os import sys import socket import collections from optparse import OptionParser import xml.sax try: import lxml.etree import lxml.sax haveLxml = True except ImportError: haveLxml = False import xsd PY3 = sys.version_info > (3,) class NestingHandler(xml.sax.handler.ContentHandler): \\"\\"\\"A handler which knows the current nesting of tags\\"\\"\\" def __init__(self): self.tagstack = [] def startElement(self, name, attrs): self.tagstack.append(name) def endElement(self, name): self.tagstack.pop() def depth(self): # do not count the root element return len(self.tagstack) - 1 class AttrFinder(NestingHandler): def __init__(self, xsdFile, source, split): NestingHandler.__init__(self) self.tagDepths = {} # tag -> depth of appearance self.tagAttrs = collections.defaultdict( collections.OrderedDict) # tag -> set of attrs self.renamedAttrs = {} # (name, attr) -> renamedAttr self.attrs = {} self.depthTags = {} # child of root: depth of appearance -> tag list self.rootDepth = 1 if split else 0 if xsdFile: self.xsdStruc = xsd.XsdStructure(xsdFile) if split: for ele in self.xsdStruc.root.children: self.attrs[ele.name] = [] self.depthTags[ele.name] = [[]] self.recursiveAttrFind(ele, ele, 1) else: self.attrs[self.xsdStruc.root.name] = [] self.depthTags[self.xsdStruc.root.name] = [] self.recursiveAttrFind( self.xsdStruc.root, self.xsdStruc.root, 0) else: self.xsdStruc = None xml.sax.parse(source, self) def addElement(self, root, name, depth): if name not in self.tagDepths: if len(self.depthTags[root]) == depth: self.tagDepths[name] = depth self.depthTags[root].append([]) self.depthTags[root][depth].append(name) return True if name not in self.depthTags[root][depth]: print(\\"Ignoring tag %s at depth %s\\" % (name, depth), file=sys.stderr) return False def recursiveAttrFind(self, root, currEle, depth): if not self.addElement(root.name, currEle.name, depth): return for a in currEle.attributes: if \\":\\" not in a.name: # no namespace support yet self.tagAttrs[currEle.name][a.name] = a anew = \\"%s_%s\\" % (currEle.name, a.name) self.renamedAttrs[(currEle.name, a.name)] = anew attrList = self.attrs[root.name] if anew in attrList: del attrList[attrList.index(anew)] attrList.append(anew) for ele in currEle.children: self.recursiveAttrFind(root, ele, depth + 1) def startElement(self, name, attrs): NestingHandler.startElement(self, name, attrs) if self.depth() >= self.rootDepth: root = self.tagstack[self.rootDepth] if self.depth() == self.rootDepth and root not in self.attrs: self.attrs[root] = [] self.depthTags[root] = [[]] * self.rootDepth if not self.addElement(root, name, self.depth()): return # collect attributes for a in sorted(list(attrs.keys())): if a not in self.tagAttrs[name] and \\":\\" not in a: self.tagAttrs[name][a] = xsd.XmlAttribute(a) if not (name, a) in self.renamedAttrs: anew = \\"%s_%s\\" % (name, a) self.renamedAttrs[(name, a)] = anew self.attrs[root].append(anew) class CSVWriter(NestingHandler): def __init__(self, attrFinder, options): NestingHandler.__init__(self) self.attrFinder = attrFinder self.options = options self.currentValues = collections.defaultdict(lambda: \\"\\") self.haveUnsavedValues = False self.outfiles = {} self.rootDepth = 1 if options.split else 0 for root in sorted(attrFinder.depthTags): if len(attrFinder.depthTags) == 1: if not options.output: options.output = os.path.splitext(options.source)[0] if not options.output.isdigit() and not options.output.endswith(\\".csv\\"): options.output += \\".csv\\" self.outfiles[root] = getOutStream(options.output) else: if options.output: outfilename = options.output + \\"%s.csv\\" % root else: outfilename = os.path.splitext( options.source)[0] + \\"%s.csv\\" % root self.outfiles[root] = open(outfilename, 'w') if (PY3): self.outfiles[root].write(str.encode( options.separator.join(map(self.quote, attrFinder.attrs[root])) + \\"n\\")) else: self.outfiles[root].write( options.separator.join(map(self.quote, attrFinder.attrs[root])) + \\"n\\") def quote(self, s): return \\"%s%s%s\\" % (self.options.quotechar, s, self.options.quotechar) # the following two are needed for the lxml saxify to work def startElementNS(self, name, qname, attrs): self.startElement(qname, attrs) def endElementNS(self, name, qname): self.endElement(qname) def startElement(self, name, attrs): NestingHandler.startElement(self, name, attrs) if self.depth() >= self.rootDepth: root = self.tagstack[self.rootDepth] # print(\\"start\\", name, root, self.depth(), self.attrFinder.depthTags[root][self.depth()]) if name in self.attrFinder.depthTags[root][self.depth()]: for a, v in attrs.items(): if isinstance(a, tuple): a = a[1] # print(a, dict(self.attrFinder.tagAttrs[name])) if a in self.attrFinder.tagAttrs[name]: if self.attrFinder.xsdStruc: enum = self.attrFinder.xsdStruc.getEnumeration( self.attrFinder.tagAttrs[name][a].type) if enum: v = enum.index(v) a2 = self.attrFinder.renamedAttrs.get((name, a), a) self.currentValues[a2] = v self.haveUnsavedValues = True def endElement(self, name): if self.depth() >= self.rootDepth: root = self.tagstack[self.rootDepth] # print(\\"end\\", name, root, self.depth(), self.attrFinder.depthTags[root][self.depth()], self.haveUnsavedValues) if name in self.attrFinder.depthTags[root][self.depth()]: if self.haveUnsavedValues: if(PY3): self.outfiles[root].write(str.encode(self.options.separator.join( [self.quote(self.currentValues[a]) for a in self.attrFinder.attrs[root]]) + \\"n\\")) else: self.outfiles[root].write(self.options.separator.join( [self.quote(self.currentValues[a]) for a in self.attrFinder.attrs[root]]) + \\"n\\") self.haveUnsavedValues = False for a in self.attrFinder.tagAttrs[name]: a2 = self.attrFinder.renamedAttrs.get((name, a), a) del self.currentValues[a2] NestingHandler.endElement(self, name) def getSocketStream(port, mode='rb'): s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((\\"localhost\\", port)) s.listen(1) conn, addr = s.accept() return conn.makefile(mode) def getOutStream(output): if output.isdigit(): return getSocketStream(int(output), 'wb') return open(output, 'wb') def get_options(): optParser = OptionParser( usage=os.path.basename(sys.argv[0]) + \\" [<options>] <input_file_or_port>\\") optParser.add_option(\\"-s\\", \\"--separator\\", default=\\";\\", help=\\"separating character for fields\\") optParser.add_option(\\"-q\\", \\"--quotechar\\", default='', help=\\"quoting character for fields\\") optParser.add_option(\\"-x\\", \\"--xsd\\", help=\\"xsd schema to use\\") optParser.add_option(\\"-a\\", \\"--validation\\", action=\\"store_true\\", default=False, help=\\"enable schema validation\\") optParser.add_option(\\"-p\\", \\"--split\\", action=\\"store_true\\", default=False, help=\\"split in different files for the first hierarchy level\\") optParser.add_option(\\"-o\\", \\"--output\\", help=\\"base name for output\\") options, args = optParser.parse_args() if len(args) != 1: optParser.print_help() sys.exit() if options.validation and not haveLxml: print(\\"lxml not available, skipping validation\\", file=sys.stderr) options.validation = False if args[0].isdigit(): if not options.xsd: print(\\"a schema is mandatory for stream parsing\\", file=sys.stderr) sys.exit() options.source = getSocketStream(int(args[0])) else: options.source = args[0] if options.output and options.output.isdigit() and options.split: print( \\"it is not possible to use splitting together with stream output\\", file=sys.stderr) sys.exit() return options def main(): options = get_options() # get attributes attrFinder = AttrFinder(options.xsd, options.source, options.split) # write csv handler = CSVWriter(attrFinder, options) if options.validation: schema = lxml.etree.XMLSchema(file=options.xsd) parser = lxml.etree.XMLParser(schema=schema) tree = lxml.etree.parse(options.source, parser) lxml.sax.saxify(tree, handler) else: xml.sax.parse(options.source, handler) if __name__ == \\"__main__\\": main()"},{"prompt":"Write a Python program to search for a specific word in a given string and return the number of times the string appears. String: Hello, world! This is a sample message. Word: hello","completion":"string = \\"Hello, world! This is a sample message.\\" word = \\"hello\\" count = string.lower().split().count(word.lower()) print(f\\"The word {word} appears {count} times in the given string.\\")"},{"prompt":"Create an HTML page to display a form with a text input field, a dropdown list, and a submit button. Not applicable","completion":"<!DOCTYPE html> <html> <head> <title>Form Example</title> </head> <body> <h1>Form Example</h1> <form action=\\"submit.php\\" method=\\"post\\"> <label for=\\"nameInput\\">Name:</label> <input type=\\"text\\" id=\\"nameInput\\" name=\\"name\\" /> <label for=\\"languageSelect\\">Favorite Language:</label> <select id=\\"languageSelect\\" name=\\"language\\"> <option value=\\"java\\">Java</option> <option value=\\"javascript\\">Javascript</option> <option value=\\"python\\">Python</option> </select> <input type=\\"submit\\" value=\\"Submit\\" /> </form> </body> </html>"},{"prompt":"Optimize a basic application written in Python. The program should accept two arguments, an integer and a string, and should print the sum of the two arguments. Not applicable","completion":"def main(a, b): try: a = int(a) b = int(b) except ValueError: print('Input arguments must be integers') return print('Sum: {}'.format(a + b)) if __name__ == '__main__': import sys main(sys.argv[1], sys.argv[2])"},{"prompt":"Create a hashmap (a keyvalue pair data structure) in Python that stores two values, name and age.","completion":"dict = { 'name': 'John', 'age': 30 }"},{"prompt":"Write a function to normalize a vector of values in Python.","completion":"def normalize_vector(values): length = 0 for v in values: length += (v ** 2) length = pow(length, 0.5) if length == 0: return [0 for v in values] return [v / length for v in values]"},{"prompt":"Write a Python function to reproduce a single neural network layer.","completion":"import numpy as np def get_layer(input_dim, output_dim, activation='relu'): \\"\\"\\" This function creates a single layer neural network in a form of numpy array with given input and output dimensions and activation (default relu). \\"\\"\\" layer = np.random.rand(input_dim, output_dim) if activation == 'relu': layer = np.maximum(layer, 0) elif activation == 'softmax': layer = np.exp(layer) / np.sum(np.exp(layer)) elif activation == 'sigmoid': layer = 1 / (1 + np.exp(-layer)) return layer"},{"prompt":"Generate a python program to find the minimum element of a list. [1, 7, 4, 8, 2]","completion":"def find_min(input_list): min_ele = input_list[0] for ele in input_list: if ele < min_ele: min_ele = ele return min_ele"},{"prompt":"Examine a Python function and refactor it to make it more efficient and optimized. def foo(n): result = 0 while n > 0: result += n n = 1 return resul","completion":"def foo(n): return n * (n + 1) // 2"},{"prompt":"Create a python program to insert a new element into a given list in the correct order Input List: [1, 2, 3, 4] Element: 0","completion":"def insert_element(array, element): if element >= array[len(array)-1]: array.append(element) else: for i in range(len(array)): if element < array[i]: array.insert(i, element) break return array"},{"prompt":"Write a Python program that takes the items and the weights of a knapsack problem as input and returns the maximum value of items that can be fitted in the knapsack. items = [hammer, pliers, screwdriver] weights = [4, 5, 2] max_weight = 6","completion":"def knapsack(items, weights, max_weight): n = len(items) dp = [[0 for x in range(max_weight + 1)] for x in range(n + 1)] for i in range(1, n + 1): for w in range(max_weight + 1): if weights[i - 1] <= w: dp[i][w] = max(items[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) else: dp[i][w] = dp[i - 1][w] value = dp[n][max_weight] return value items = [\\"hammer\\", \\"pliers\\", \\"screwdriver\\"] weights = [4, 5, 2] max_weight = 6 value = knapsack(items, weights, max_weight) print(\\"The maximum value of items that can be fitted in the knapsack is:\\", value)"},{"prompt":"Design a program that takes a complicated function and simplifies it in Python. def func (x): return 3*(x**2) + 5*x 4","completion":"def simplified_func (x): return 3*x**2 + 5*x - 4"},{"prompt":"Develop a python program to remove special characters from a string. The quick brown fox _ jumps over the lazy dog!","completion":"def remove_special_characters(input_str): '''This function takes a string as input and removes all the special characters from it.''' # creating a regular expression pattern for special characters pattern = r\\"[^A-Za-z0-9]\\" # Removing special characters from the given string new_str = re.sub(pattern, '', input_str) return new_str # Test input_str = \\"The quick brown fox _ jumps over the lazy dog!\\" print(remove_special_characters(input_str)) # Output Thequickbrownfoxjumpsoverthelazydog"},{"prompt":"Optimize the following Python code to print the numbers in reverse. for i in range(1,11): print(i)","completion":"for i in reversed(range(1,11)): print(i)"},{"prompt":"Write a function in Python to calculate the nth value of the Fibonacci sequence. 7","completion":"def fibonacci(n): if n == 0 or n == 1: return n else: return fibonacci(n - 1) + fibonacci(n - 2) result = fibonacci(7) print(result)"},{"prompt":"Build a Python machine learning model on a given dataset and evaluate its performance. Dataset provided: Features: age gender income marital_status education Target purchase","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier # Load data into a dataframe data = pd.read_csv(\\"data.csv\\") # Split data into features and target X = data[['age','gender','income','marital_status','education']] y = data['purchase'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123) # Initialize model rf = RandomForestClassifier(random_state=123) # Train the model on the training set rf.fit(X_train, y_train) # Test the model on the testing set and calculate the accuracy accuracy = rf.score(X_test, y_test) # Print the accuracy print(\\"Accuracy: \\" + str(accuracy))"},{"prompt":"Generate code that will use the AWS SDK for Python to create an S3 bucket. bucketname: mybucke","completion":"import boto3 # Create an S3 client s3 = boto3.client('s3') # Create an S3 bucket response = s3.create_bucket( Bucket='mybucket', CreateBucketConfiguration={ 'LocationConstraint': 'us-east-1' } ) print(response)"},{"prompt":"Create a Python script to clean the given text and make it ready for processing. text = This is the teXt for procesSsing! Some puncT!_UATion must be removed. Let's, Trim the whitespace too.. Please preServe the cases as is.","completion":"text_cleaned = \\"This is the text for processing! Some punctuation must be removed. Lets Trim the whitespace too. Please preserve the cases as is.\\""},{"prompt":"Create a Python script to print characters from the abcd string until the total of characters printed reaches 50.","completion":"string = \\"abcd\\" count = 0 while count < 50: for ch in string: print(ch) count += 1 if count >= 50: break"},{"prompt":"Write a Python script to generate a random password of at least 8 characters.","completion":"import random import string def gen_random_password(): chars = string.ascii_letters + string.digits password = ''.join(random.choice(chars) for _ in range(8)) return password print(gen_random_password())"},{"prompt":"Write a python statement to print out the elements of the given list. my_list = [1, 2, 3]","completion":"print(my_list)"},{"prompt":"Generate a Python function that takes in a list of numbers, and creates a new list with each number doubled. [1, 2, 3, 4]","completion":"def double_numbers(numbers): # use list comprehesion to double each number doubled_numbers = [num * 2 for num in numbers] return doubled_numbers numbers = [1, 2, 3, 4] doubled_numbers = double_numbers(numbers) print(doubled_numbers) # [2, 4, 6, 8]"},{"prompt":"Create a python program to identify all the duplicate elements in the given list. list = [1, 2, 3, 2, 1]","completion":"def find_duplicates(list): \\"\\"\\"Identify all the duplicate elements in the given list.\\"\\"\\" seen = set() duplicates = set() for i in list: if i not in seen: seen.add(i) else: duplicates.add(i) return list(duplicates) # Usage Example list = [1, 2, 3, 2, 1] duplicates = find_duplicates(list) print(duplicates) # [1, 2]"},{"prompt":"Create Python functions to shuffle an array and calculate the median of an array. Not Applicable","completion":"import random def shuffle(array): random.shuffle(array) return array def calculate_median(array): n = len(array) if n < 1: return None if n % 2 == 0: return (array[n//2 - 1] + array[n//2]) / 2.0 else: return array[n//2]"},{"prompt":"Create a Python program to detect anomalies in a time series.","completion":"import numpy as np import matplotlib.pyplot as plt def detect_anomalies(data): '''This function detects anomalies in a time series.''' # calculate rolling mean and rolling standard deviation rolling_mean = np.mean(data, axis=0) rolling_std = np.std(data, axis=0) # create an empty dataframe anomalies_df = [] # detect anomalies for i in range(len(data)): z_score = (data[i] - rolling_mean) / rolling_std if np.abs(z_score) > 3: anomalies_df.append(data[i]) # plot the anomalies plt.plot(data, color='blue', label='Original data') plt.scatter(range(len(data)), anomalies_df, color='red', label='Anomalies') plt.legend() plt.show()"},{"prompt":"Develop an algorithm for solving a Sudoku puzzle in Python. [ [3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0] ]","completion":"# Algorithm to solve a 9x9 sudoku def solve(board): # Function to check if a given position on the board is empty def is_empty(board): for row in range(0, 9): for col in range(0, 9): if board[row][col] == 0: return (row, col) return None # Function to check if a given number is valid in the given position on the board def is_safe(board, row, col, num): for position in range(0, 9): # checking for row if board[row][position] == num and position != col: return False # checking for column if board[position][col] == num and position != row: return False # checking for subboxes upper_row = row - row%3 upper_col = col - col%3 for r in range(upper_row, upper_row + 3): for c in range(upper_col, upper_col + 3): if board[r][c] == num and (r, c) != (row, col): return False return True next_num = is_empty(board) if not next_num: return True row, col = next_num for number in range(1, 10): if is_safe(board, row, col, number): board[row][col] = number if solve(board): return True # backtracking board[row][col] = 0 return False board = [ [3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0] ] solve(board) for row in range(9): for col in range(9): print(board[row][col], end=\\" \\") print()"},{"prompt":"Create a Python program to store and access user information. The program should store 4 pieces of data for each user: name, age, gender, and phone number.","completion":"# Create database to store user information db = sqlite3.connect('user_information.db') # Create table in the database cursor = db.cursor() cursor.execute(\\"CREATE TABLE IF NOT EXISTS User_Info (Name TEXT, Age INTEGER, Gender TEXT, Phone_Number INTEGER)\\") # Function to store user information in database def store_info(name, age, gender, number): cursor.execute(\\"INSERT INTO User_Info (Name, Age, Gender, Phone_Number) VALUES(?, ?, ?, ?)\\", (name, age, gender, number)) db.commit() # Function to get user information from database def get_info(name): cursor.execute(\\"SELECT * FROM User_Info WHERE Name = ?\\", (name,)) results = cursor.fetchall() return results # Example store_info(\\"John\\", 20, \\"Male\\", 8054839479) john_info = get_info(\\"John\\") print(john_info)"},{"prompt":"Modify the following python code to print the count of values greater than 5. data = [1,2,3,4,5,6,7,8,9]","completion":"data = [1,2,3,4,5,6,7,8,9] count = 0 for value in data: if value > 5: count += 1 print(count)"},{"prompt":"Construct a python program to create a dictionary containing a list of student grades James: 95 Alice: 80 John: 75","completion":"grades_dict = { \\"James\\": 95, \\"Alice\\": 80, \\"John\\": 75 }"},{"prompt":"Write a sorting algorithm in Python to sort a set of strings based on the length of each string. ['banana', 'apple', 'mango', 'pear']","completion":"def sort_strings(string_list): return sorted(string_list, key=len) # Usage example string_list = ['banana', 'apple', 'mango', 'pear'] print(sort_strings(string_list)) # Outputs ['apple', 'pear', 'mango', 'banana']"},{"prompt":"Generate a python program to filter a given array of numbers and remove all numbers greater than 5. [3, 4, 6, 1, 8, 9]","completion":"def filter_greater_than_5(arr): new_arr = [] for x in arr: if x <= 5: new_arr.append(x) return new_arr arr = [3, 4, 6, 1, 8, 9] print(filter_greater_than_5(arr))"},{"prompt":"Generate a Python script to calculate the sum of the first 10 numbers.","completion":"number_sum = 0 for i in range(1, 11): number_sum += i print(number_sum) # 55"},{"prompt":"Write a function in Python that takes an array of integers and its size as parameters and returns the maximum value in the array. arr = [1, 6, 8, 4, 9, 6, 10] n = len(arr)","completion":"def findMax(arr, n): # Initializing max with first element of array max = arr[0] # Starting loop from second element for i in range(1, n): # Comparing max with remaining elements of array if arr[i] > max: max = arr[i] # Returning maximum return max"},{"prompt":"Given an array of numbers, create an algorithm in Python to find the maximum sum of any subarray. Not applicable","completion":"def max_subarray_sum(arr): max_sum = 0 for i in range(len(arr)): for j in range(i, len(arr)): current_sum = 0 for k in range(i, j+1): current_sum += arr[k] max_sum = max(max_sum, current_sum) return max_sum arr = [1, 8, -1, 3, 4, -2] result = max_subarray_sum(arr) print(result) # 17"},{"prompt":"Create a Azure Function to send an email every day at a specified time. Not applicable","completion":"import datetime import logging import azure.functions as func import azure.storage.blob as blob from azure.storage.blob.post_policy import BlobPostPolicy import azure.cosmosdb.table as table def main(mytimer: func.TimerRequest) -> None: utc_timestamp = datetime.datetime.utcnow().replace( tzinfo=datetime.timezone.utc).isoformat() if mytimer.past_due: logging.info('The timer is past due!') logging.info('Python timer trigger function ran at %s', utc_timestamp) # Create and send the email here # ... cur_time = datetime.datetime.utcnow().replace( tzinfo=datetime.timezone.utc).isoformat() next_time = cur_time[:18] + '00:00+00:00' # Every day at 00:00 UTC logging.info('Setting next run time for %s', next_time) mytimer.wait_for_next_run(next_run_time=datetime.datetime.strptime(next_time, \\"%Y-%m-%dT%H:%M:%S+00:00\\"))"},{"prompt":"Create a Python program to perform Bubble Sort on an unsorted list. [2, 4, 9, 5, 1]","completion":"# Bubble Sort Algorithm def bubbleSort(lst): n = len(lst) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if lst[j] > lst[j+1] : lst[j], lst[j+1] = lst[j+1], lst[j] # Driver code to test above lst = [2, 4, 9, 5, 1] bubbleSort(lst) print (\\"Sorted array is:\\") for i in range(len(lst)): print (\\"%d\\" %lst[i])"},{"prompt":"Write a Python program to calculate the Fibonacci number at a particular position. 6","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program if __name__ == \\"__main__\\": print(Fibonacci(6))"},{"prompt":"Create a function in Python to check if an integer is prime or not.","completion":"def is_prime(number): # If given number is greater than 1 if number > 1: # Iterate from 2 to n / 2 for i in range(2, int(number/2)): # If number is divisible by any number between # 2 and n / 2, it is not prime if (number % i) == 0: return False return True else: return False"},{"prompt":"Count the number of unique items in a list using dictionaries in Python. list = [1, 2, 5, 9, 10, 1, 3, 9, 1, 2]","completion":"def count_unique(list): unique = {} for item in list: if item not in unique: unique[item] = 1 else: unique[item] += 1 return len(unique)"},{"prompt":"Write a python program to convert a list of words into a string delimited by a space separator. [Hello,World,!]","completion":"words = [\\"Hello\\", \\"World\\", \\"!\\"] print(' '.join(words))"},{"prompt":"Create a set in Python to store the elements of an array.","completion":"numbers = [1, 2, 3, 4, 5, 6] numbers_set = set(numbers)"},{"prompt":"Create a Packet class that generates a binary packet from provided init_packet_fields. The class should include a method called generate_packet that returns a string representing the init_packet (in binary). The class should also include a dictionary called init_packet_fields that contains the packet fields. The class should use little endian format with standard sizes for python. The class should include an enum called PacketField that contains the packet field values. The class should include constants for unsigned short, unsigned int, unsigned char, and char array. The class should include a private method called __generate_struct_format_string that generates a struct format string based on keys that are present in init_packet_fields. The class should handle fields that require length and fields that require a specific format.","completion":"# Copyright (c) 2015, Nordic Semiconductor # All rights reserved. # # Redistribution and use in source and binary forms, with or without # modification, are permitted provided that the following conditions are met: # # * Redistributions of source code must retain the above copyright notice, this # list of conditions and the following disclaimer. # # * Redistributions in binary form must reproduce the above copyright notice, # this list of conditions and the following disclaimer in the documentation # and/or other materials provided with the distribution. # # * Neither the name of Nordic Semiconductor ASA nor the names of its # contributors may be used to endorse or promote products derived from # this software without specific prior written permission. # # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\"AS IS\\" # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE # DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE # FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR # SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER # CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, # OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. from enum import Enum import struct INIT_PACKET_USES_CRC16 = 0 INIT_PACKET_USES_HASH = 1 INIT_PACKET_EXT_USES_ECDS = 2 class PacketField(Enum): PACKET_VERSION = 1 COMPRESSION_TYPE = 2 DEVICE_TYPE = 3 DEVICE_REVISION = 4 APP_VERSION = 5 REQUIRED_SOFTDEVICES_ARRAY = 6 OPT_DATA = 7 NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID = 8 NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH = 9 NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH = 10 NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16 = 11 NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS = 12 class Packet(object): \\"\\"\\" Class that implements the INIT packet format. http://developer.nordicsemi.com/nRF51_SDK/doc/7.1.0/s110/html/a00065.html \\"\\"\\" UNSIGNED_SHORT = \\"H\\" UNSIGNED_INT = \\"I\\" UNSIGNED_CHAR = \\"B\\" CHAR_ARRAY = \\"s\\" def __init__(self, init_packet_fields): \\"\\"\\" :param init_packet_fields: Dictionary with packet fields \\"\\"\\" self.init_packet_fields = init_packet_fields def generate_packet(self): \\"\\"\\" Generates a binary packet from provided init_packet_fields provided in constructor. This version includes the extended data :return str: Returns a string representing the init_packet (in binary) \\"\\"\\" # Create struct format string based on keys that are # present in self.init_packet_fields format_string = self.__generate_struct_format_string() args = [] for key in sorted(self.init_packet_fields.keys(), key=lambda x: x.value): # Add length to fields that required that if key in [PacketField.REQUIRED_SOFTDEVICES_ARRAY, PacketField.OPT_DATA]: args.append(len(self.init_packet_fields[key])) args.extend(self.init_packet_fields[key]) elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID]: args.append(self.init_packet_fields[key]) # Extended packet id format elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH]: args.append(self.init_packet_fields[key]) # Length of firmware image elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16]: args.append(self.init_packet_fields[key]) # CRC-16 elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH]: args.append(self.init_packet_fields[key]) # SHA-256 hash of firmware image elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS]: args.append(self.init_packet_fields[key]) # ECDS of base init packet using Curve P-256 amd SHA-256 else: args.append(self.init_packet_fields[key]) return struct.pack(format_string, *args) def __generate_struct_format_string(self): format_string = \\"<\\" # Use little endian format with standard sizes for python, # see https://docs.python.org/2/library/struct.html for key in sorted(self.init_packet_fields.keys(), key=lambda x: x.value): if key in [PacketField.PACKET_VERSION, PacketField.COMPRESSION_TYPE, PacketField.DEVICE_TYPE, PacketField.DEVICE_REVISION, ]: format_string += Packet.UNSIGNED_SHORT elif key in [PacketField.APP_VERSION]: format_string += Packet.UNSIGNED_INT elif key in [PacketField.REQUIRED_SOFTDEVICES_ARRAY]: array_elements = self.init_packet_fields[key] format_string += Packet.UNSIGNED_SHORT # Add length field to format packet for _ in range(len(array_elements)): format_string += Packet.UNSIGNED_SHORT elif key in [PacketField.OPT_DATA]: format_string += Packet.UNSIGNED_SHORT # Add length field to optional data format_string += \\"{0}{1}\\".format(len(self.init_packet_fields[key]), Packet.CHAR_ARRAY) elif key in [PacketField.NORDIC_PROPRIETARY_OPT_DATA_EXT_PACKET_ID]: format_string += Packet.UNSIGNED_INT # Add the extended packet id field elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_LENGTH: format_string += Packet.UNSIGNED_INT # Add the firmware length field elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_HASH: format_string += \\"32{0}\\".format(Packet.CHAR_ARRAY) # SHA-256 requires 32 bytes elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_FIRMWARE_CRC16: format_string += Packet.UNSIGNED_SHORT elif key == PacketField.NORDIC_PROPRIETARY_OPT_DATA_INIT_PACKET_ECDS: format_string += \\"64{0}\\".format(Packet.CHAR_ARRAY) # ECDS based on P-256 using SHA-256 requires 64 bytes return format_string"},{"prompt":"w can you use Python to calculate the mean value of a given list [25, 34, 42]","completion":"def mean_value(numbers): sum = 0 for n in numbers: sum += n return sum / len(numbers)"},{"prompt":"Create a class in Python with two methods, one to calculate the area of a circle and one to calculate the circumference.","completion":"class Circle: def __init__(self, radius): self.radius = radius def area(self): return 3.14 * self.radius**2 def circumference(self): return 2 * 3.14 * self.radius"},{"prompt":"Modify the following Python program to replace each number with its square. my_list = [1, 4, 9, 16, 25]","completion":"my_list = [1, 16, 81, 256, 625]"},{"prompt":"Develop an algorithm in Python for solving the Tower of Hanoi problem. Towers with 3 disc","completion":"def hanoi(discs, source, aux, dest): if discs == 1: print (\\"Move disc 1 from {} to {}\\".format(source, dest)) return hanoi(discs-1, source, dest, aux) print (\\"Move disc {} from {} to {}\\".format(discs, source, dest)) hanoi(discs-1, aux, source, dest) hanoi(3,'A', 'B', 'C')"},{"prompt":"Create a python program to remove the python comments from a text # This is a python comment print(Hello world) # This is another comme","completion":"import re def remove_comments(text): regex = r\\"(\\".*?\\"|'.*?')|(/*.*?*/|#[^rn]*)\\" clean_text = re.sub(regex, \\"\\", text, 0, re.MULTILINE).strip() return clean_text remove_comments(\\"# This is a python commentnprint(\\"Hello world\\") # This is another comment\\") #output: print(\\"Hello world\\")"},{"prompt":"Create a data structure in Python that can store a set of customer details (name, address, and phone number) and perform a search operation. Not applicable","completion":"class Customer: def __init__(self, name, address, phone_number): self.name = name self.address = address self.phone_number = phone_number #Create a class for storing the customers class CustomersContainer: def __init__(self): self.customers = [] def add_customer(self, customer): self.customers.append(customer) def search_customer(self, query): matches = [] #Search for matches and append to list for customer in self.customers: if query.lower() in customer.name.lower(): matches.append(customer) return matches #Create instance of CustomersContainer my_customers = CustomersContainer() #Add customers my_customers.add_customer(Customer('John Doe', '123 Main St', '555-5555')) my_customers.add_customer(Customer('Jane Doe', '456 Elm St', '555-6666')) #Search customers = my_customers.search_customer('doe')"},{"prompt":"Write a python code to achieve the following purpose: Given a string, find all the possible permutations.","completion":"def find_permutations(s): # If a string is empty, return an empty list if len(s) == 0: return [s] # Take the first character as the prefix prefix = s[0] # Take the rest of the string as the suffix suffix = s[1:] # Find all the possible permutations of the suffix permutations = find_permutations(suffix) result = [] # Insert the prefix into all possible positions in each permutation for permutation in permutations: for i in range(len(permutation)+1): result.append(permutation[:i] + prefix + permutation[i:]) return result"},{"prompt":"This code is a Python module for the Exodus Addon. To use it, import the necessary modules and create an instance of the source class. Then call the methods of the class to search for movies or TV shows, find episodes, and get sources for streaming. The request method sends an HTTP request to a given URL and checks if a certain string is present in the response. The sources method extracts streaming sources from a given URL. The resolve method returns the input URL unchanged.","completion":"# -*- coding: utf-8 -*- ''' Exodus Add-on Copyright (C) 2016 Exodus This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. ''' import re,urllib,urlparse,base64 from resources.lib.modules import cleantitle from resources.lib.modules import client from resources.lib.modules import proxy class source: def __init__(self): self.domains = ['primewire.ag'] self.base_link = 'http://www.primewire.ag' self.key_link = 'http://www.primewire.ag/index.php?search' self.moviesearch_link = 'http://www.primewire.ag/index.php?search_keywords=%s&key=%s&search_section=1' self.tvsearch_link = 'http://www.primewire.ag/index.php?search_keywords=%s&key=%s&search_section=2' def request(self, url, check): try: result = client.source(url) if check in str(result): return result.decode('iso-8859-1').encode('utf-8') result = client.source(proxy.get() + urllib.quote_plus(url)) if check in str(result): return result.decode('iso-8859-1').encode('utf-8') result = client.source(proxy.get() + urllib.quote_plus(url)) if check in str(result): return result.decode('iso-8859-1').encode('utf-8') except: return def movie(self, imdb, title, year): try: result = self.request(self.key_link, 'searchform') query = client.parseDOM(result, 'input', ret='value', attrs = {'name': 'key'})[0] query = self.moviesearch_link % (urllib.quote_plus(re.sub(''', '', title)), query) result = self.request(query, 'index_item') result = client.parseDOM(result, 'div', attrs = {'class': 'index_item.+?'}) title = 'watch' + cleantitle.get(title) years = ['(%s)' % str(year), '(%s)' % str(int(year)+1), '(%s)' % str(int(year)-1)] result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'a', ret='title')) for i in result] result = [(i[0][0], i[1][0]) for i in result if len(i[0]) > 0 and len(i[1]) > 0] result = [i for i in result if any(x in i[1] for x in years)] try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['q'][0], i[1]) for i in result] except: pass try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['u'][0], i[1]) for i in result] except: pass try: result = [(urlparse.urlparse(i[0]).path, i[1]) for i in result] except: pass match = [i[0] for i in result if title == cleantitle.get(i[1])] match2 = [i[0] for i in result] match2 = [x for y,x in enumerate(match2) if x not in match2[:y]] if match2 == []: return for i in match2[:5]: try: if len(match) > 0: url = match[0] ; break result = self.request(urlparse.urljoin(self.base_link, i), 'choose_tabs') if imdb in str(result): url = i ; break except: pass url = client.replaceHTMLCodes(url) url = url.encode('utf-8') return url except: return def tvshow(self, imdb, tvdb, tvshowtitle, year): try: result = self.request(self.key_link, 'searchform') query = client.parseDOM(result, 'input', ret='value', attrs = {'name': 'key'})[0] query = self.tvsearch_link % (urllib.quote_plus(re.sub(''', '', tvshowtitle)), query) result = self.request(query, 'index_item') result = client.parseDOM(result, 'div', attrs = {'class': 'index_item.+?'}) tvshowtitle = 'watch' + cleantitle.get(tvshowtitle) years = ['(%s)' % str(year), '(%s)' % str(int(year)+1), '(%s)' % str(int(year)-1)] result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'a', ret='title')) for i in result] result = [(i[0][0], i[1][0]) for i in result if len(i[0]) > 0 and len(i[1]) > 0] result = [i for i in result if any(x in i[1] for x in years)] try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['q'][0], i[1]) for i in result] except: pass try: result = [(urlparse.parse_qs(urlparse.urlparse(i[0]).query)['u'][0], i[1]) for i in result] except: pass try: result = [(urlparse.urlparse(i[0]).path, i[1]) for i in result] except: pass match = [i[0] for i in result if tvshowtitle == cleantitle.get(i[1])] match2 = [i[0] for i in result] match2 = [x for y,x in enumerate(match2) if x not in match2[:y]] if match2 == []: return for i in match2[:5]: try: if len(match) > 0: url = match[0] ; break result = self.request(urlparse.urljoin(self.base_link, i), 'tv_episode_item') if imdb in str(result): url = i ; break except: pass url = client.replaceHTMLCodes(url) url = url.encode('utf-8') return url except: return def episode(self, url, imdb, tvdb, title, premiered, season, episode): try: if url == None: return url = urlparse.urljoin(self.base_link, url) result = self.request(url, 'tv_episode_item') result = client.parseDOM(result, 'div', attrs = {'class': 'tv_episode_item'}) title = cleantitle.get(title) result = [(client.parseDOM(i, 'a', ret='href'), client.parseDOM(i, 'span', attrs = {'class': 'tv_episode_name'}), re.compile('(d{4}-d{2}-d{2})').findall(i)) for i in result] result = [(i[0], i[1][0], i[2]) for i in result if len(i[1]) > 0] + [(i[0], None, i[2]) for i in result if len(i[1]) == 0] result = [(i[0], i[1], i[2][0]) for i in result if len(i[2]) > 0] + [(i[0], i[1], None) for i in result if len(i[2]) == 0] result = [(i[0][0], i[1], i[2]) for i in result if len(i[0]) > 0] url = [i for i in result if title == cleantitle.get(i[1]) and premiered == i[2]][:1] if len(url) == 0: url = [i for i in result if premiered == i[2]] if len(url) == 0 or len(url) > 1: url = [i for i in result if 'season-%01d-episode-%01d' % (int(season), int(episode)) in i[0]] url = client.replaceHTMLCodes(url[0][0]) try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['u'][0] except: pass try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['q'][0] except: pass url = urlparse.urlparse(url).path url = client.replaceHTMLCodes(url) url = url.encode('utf-8') return url except: return def sources(self, url, hostDict, hostprDict): try: sources = [] if url == None: return sources url = urlparse.urljoin(self.base_link, url) result = self.request(url, 'choose_tabs') links = client.parseDOM(result, 'tbody') for i in links: try: url = client.parseDOM(i, 'a', ret='href')[0] try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['u'][0] except: pass try: url = urlparse.parse_qs(urlparse.urlparse(url).query)['q'][0] except: pass url = urlparse.parse_qs(urlparse.urlparse(url).query)['url'][0] url = base64.b64decode(url) url = client.replaceHTMLCodes(url) url = url.encode('utf-8') host = re.findall('([w]+[.][w]+)', urlparse.urlparse(url.strip().lower()).netloc)[0] if not host in hostDict: raise Exception() host = client.replaceHTMLCodes(host) host = host.encode('utf-8') quality = client.parseDOM(i, 'span', ret='class')[0] if quality == 'quality_cam' or quality == 'quality_ts': quality = 'CAM' elif quality == 'quality_dvd': quality = 'SD' else: raise Exception() sources.append({'source': host, 'quality': quality, 'provider': 'Primewire', 'url': url, 'direct': False, 'debridonly': False}) except: pass return sources except: return sources def resolve(self, url): return url"},{"prompt":"Analyze a given list of numbers and print out the mean and variance using Python. numbers = [2, 4, 6, 9, 12, 13]","completion":"def analyze_list(numbers): mean = 0 for num in numbers: mean += num mean /= len(numbers) variance = 0 for num in numbers: variance += (num - mean)**2 variance /= len(numbers) print(\\"Mean:\\", mean) print(\\"Variance:\\", variance)"},{"prompt":"Create a class in Python that represents a rectangle and has methods to calculate its area and perimeter.","completion":"class Rectangle: def __init__(self, width, length): self.width = width self.length = length def area(self): return self.width * self.length def perimeter(self): return 2 * (self.width + self.length)"},{"prompt":"Develop a recursive solution in Python to calculate the Fibonacci sequence up to the nth term. n = 7","completion":"def fibonacci_sequence(n): if n <= 1: return n else: return(fibonacci_sequence(n-1) + fibonacci_sequence(n-2)) print(\\"The Fibonacci sequence up to the nth term:\\") for i in range(7): print(fibonacci_sequence(i))"},{"prompt":"Create a function to fetch data from a web page using Python. http://www.example.com","completion":"import requests def fetch_data(url): response = requests.get(url) return response.text fetched_data = fetch_data('http://www.example.com')"},{"prompt":"Write a Python program to generate a list of all prime numbers between 1 and n (inclusive).","completion":"def generate_primes(n): primes = [] for num in range(1, n+1): is_prime = True for i in range(2, num): if num % i == 0: is_prime = False # Append if the number is prime if is_prime: primes.append(num) return primes print(generate_primes(n))"},{"prompt":"Design the code for a Python program that takes a sentence as input and returns the longest word from the sentence. The quick brown fox jumps over the lazy dog.","completion":"def longest_word(sentence): words = sentence.split() max_len = len(words[0]) longest_word = words[0] for word in words[1:]: if len(word) > max_len: max_len = len(word) longest_word = word return longest_word result = longest_word(\\"The quick brown fox jumps over the lazy dog.\\") print(result)"},{"prompt":"Write a code snippet in Python for sorting a given array of numbers in ascending order. [3, 7, 1, 5]","completion":"def sort_array(arr): arr.sort() return arr sort = sort_array([3, 7, 1, 5]) print(sort)"},{"prompt":"Write a Python function to calculate the sum of all numbers in a list. [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"def sum_nums(nums): sum = 0 for num in nums: sum += num return sum sum_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) # returns 45"},{"prompt":"Create a Python program to calculate a loan's monthly payments. Loan amount: 10000, Annual interest rate: 5.5%, Loan period: 5 year","completion":"def loan_payment(loan_amt, annual_interest_rate, loan_period): # convert the interest rate to a decimal interest_rate = annual_interest_rate / 100 # calculate the monthly interest rate monthly_interest_rate = interest_rate/12 # calculate the total number of payments total_payments = loan_period * 12 # calculate the monthly payments monthly_payment = loan_amt*(monthly_interest_rate/(1 -(1+monthly_interest_rate)**(-total_payments))) return monthly_payment #print the result print(loan_payment(10000, 5.5, 5))"},{"prompt":"Write a Python program to simulate a rockpaperscissor game which is played for 3 rounds.","completion":"import random # Dictionary with all possible choices choices = {\\"rock\\": 0, \\"paper\\": 1, \\"scissors\\": 2} # A dictionary to store the results results = {0:0, 1:0, 2:0} # Number of rounds to be performed rounds = 3 # Main game loop for i in range(rounds): # Generate random player choices user_choice = random.choice(list(choices.keys())) computer_choice = random.choice(list(choices.keys())) # Evaluate who won user_choice_val = choices[user_choice] computer_choice_val = choices[computer_choice] if user_choice_val == computer_choice_val: result = 0 elif user_choice_val > computer_choice_val or (user_choice_val == 2 and computer_choice_val == 0): result = 1 else: result = 2 # Update the results dictionary results[result] += 1 print(\\"User Score: \\", results[1]) print(\\"Computer Score: \\", results[2])"},{"prompt":"Create a Python program to group a list of numbers into evens and odds. A list of numbers [1, 2, 3, 4, 5, 6]","completion":"def even_odd_grouping(nums): evens = [] odds = [] for num in nums: if num % 2 == 0: evens.append(num) else: odds.append(num) return (evens, odds) nums = [1, 2, 3, 4, 5, 6] evens, odds = even_odd_grouping(nums) print(\\"Evens: \\", evens) print(\\"Odds: \\", odds)"},{"prompt":"Write a Python program to read a list of numbers from the user, and then output the average of the numbers.","completion":"numbers = [] # get numbers from the user while True: user_input = input('Enter a number (or press enter to quit): ') if user_input == '': break numbers.append(int(user_input)) #calculate the average average = sum(numbers) / len(numbers) print(f'The average is {average}')"},{"prompt":"Create a Python program to filter a list of numbers between a minimum and maximum value. This program should prompt the user for the min and max. The program should then print the filtered list. Not applicable","completion":"# Prompt the user for the min and max min_val = int(input(\\"Please enter minimum value: \\")) max_val = int(input(\\"Please enter maximum value: \\")) # Create a list of numbers numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Filter the list filtered_list = list(filter(lambda x: x>=min_val and x<= max_val, numbers)) # Print the filtered list print(filtered_list)"},{"prompt":"mplement a function to find the greatest common divisor of two numbers in Python.","completion":"def gcd(a, b): if(a == 0): return b if(b == 0): return a if(a == b): return a if(a > b): return gcd(a-b, b) return gcd(a, b-a)"},{"prompt":"Create a lookup table implementation using a Python dictionary.","completion":"lookup_table = {\\"key1\\":\\"value1\\", \\"key2\\":\\"value2\\", \\"key3\\":\\"value3\\"}"},{"prompt":"Test a given object to see if it’s a member of a given class using Python.","completion":"#objects to test for membership object1 = [1, 2, 3] object2 = 4 #test if an object is a member of a given class def is_member_of_class(obj, the_class): return isinstance(obj, the_class) #test the objects print(is_member_of_class(object1, list)) print(is_member_of_class(object2, int))"},{"prompt":"This code provides three functions: stderr, fatalerr, and logerr. The stderr function takes an error title and an error message and shows the error to the end user. The fatalerr function returns HTML from python code, which is more likely to work in case of a fatal error. The logerr function logs a full error to the python logger.","completion":"#!/usr/bin/python # -*- coding: utf-8 -*- from deskctl import app from flask import g, render_template, make_response, session, request import traceback standard error (uses render_template and thus standard page layout) def stderr(title,message,code=200,template=\\"error.html\\"): \\"\\"\\"This function is called by other error functions to show the error to the end user. It takes an error title and an error message. \\"\\"\\" # Should we show a traceback? if app.debug: debug = traceback.format_exc() else: debug = \\"\\" return render_template(template,title=title,message=message,debug=debug), code fatal error (returns HTML from python code - which is more likely to work) def fatalerr(title=u\\"fatal error ☹\\",message=\\"Whilst processing your request an unexpected error occured which the application could not recover from\\",debug=None): # Should we show a traceback? if debug is None: if app.debug: debug = traceback.format_exc() else: debug = \\"Please ask your administrator to consult the error log for more information.\\" # Build the response. Not using a template here to prevent any Jinja # issues from causing this to fail. html = u\\"\\"\\" <!doctype html> <html> <head> <title>Fatal Error</title> <meta charset=\\"utf-8\\" /> <meta http-equiv=\\"Content-type\\" content=\\"text/html; charset=utf-8\\" /> <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" /> <style type=\\"text/css\\"> body { background-color: #8B1820; color: #FFFFFF; margin: 0; padding: 0; font-family: \\"Open Sans\\", \\"Helvetica Neue\\", Helvetica, Arial, sans-serif; } h1 { font-size: 4em; font-weight: normal; margin: 0px; } div { width: 80%%; margin: 5em auto; padding: 50px; border-radius: 0.5em; } @media (max-width: 900px) { div { width: auto; margin: 0 auto; border-radius: 0; padding: 1em; } } </style> </head> <body> <div> <h1>%s</h1> <p>%s</p> <pre>%s</pre> </div> </body> </html> \\"\\"\\" % (title,message,debug) return make_response(html, 500) log a full error to the python logger def logerr(): # Get the username if 'username' in session: username = session['username'] else: username = 'Not logged in' Log the critical error (so that it goes to e-mail) app.logger.error(\\"\\"\\"Request details: HTTP Path: %s HTTP Method: %s Client IP Address: %s User Agent: %s User Platform: %s User Browser: %s User Browser Version: %s Username: %s Traceback: %s \\"\\"\\" % ( request.path, request.method, request.remote_addr, request.user_agent.string, request.user_agent.platform, request.user_agent.browser, request.user_agent.version, username, traceback.format_exc(), ))"},{"prompt":"Create a Python algorithm to solve the classic game Connect 4. Not applicable","completion":"ROW_COUNT = 6 COLUMN_COUNT = 7 def create_board(): board = [[0 for i in range(COLUMN_COUNT)] for j in range(ROW_COUNT)] return board def drop_piece(board, row, col, piece): board[row][col] = piece def is_valid_location(board, col): return board[ROW_COUNT - 1][col] == 0 Check for a win def check_win(board): # Check all horizontal locations for win for c in range(COLUMN_COUNT-3): for r in range(ROW_COUNT): if board[r][c] == board[r][c + 1] == board[r][c + 2] == board[r][c + 3] != 0: return board[r][c] # Check all vertical locations for c in range(COLUMN_COUNT): for r in range(ROW_COUNT-3): if board[r][c] == board[r + 1][c] == board[r + 2][c] == board[r + 3][c] != 0: return board[r][c] # Check both diagonals for c in range(COLUMN_COUNT-3): for r in range(ROW_COUNT-3): if board[r][c] == board[r + 1][c + 1] == board[r + 2][c + 2] == board[r + 3][c + 3] != 0: return board[r][c] if board[r][c + 3] == board[r + 1][c + 2] == board[r + 2][c + 1] == board[r + 3][c] != 0: return board[r][c + 3] # No win found return 0"},{"prompt":"Your task is to generate Python code to find the number of letters that are common to two given strings. string1 = 'Hello World' string2 = 'Goodbye World'","completion":"def num_common_letters(string1, string2): \\"\\"\\" Finds the number of letters that are common to two given strings Parameters: string1 (string): first string string2 (string): second string Returns: comm_letter_count (int): Number of letters that are common to two strings \\"\\"\\" # Initialize the variables comm_letter_count = 0 # Iterate through the letters in the first string for c1 in string1: # Iterate through the letters in the second string for c2 in string2: # Check if the letters are the same if c1 == c2: comm_letter_count += 1 return comm_letter_count if __name__ == '__main__': string1 = 'Hello World' string2 = 'Goodbye World' print(num_common_letters(string1, string2))"},{"prompt":"Generate an algorithm in Python to reverse a sting.","completion":"def reverse_string(string): return string[::-1]"},{"prompt":"Design a Python program that can identify an anomaly from a given data set. data_set = [[7, 4.2], [5.5, 3.3], [7.4, 4.1], [4.5, 2.4], [8, 5.1]]","completion":"def findAnomaly(data): mean = [] std = [] for column in data.T: mean.append(np.mean(column)) std.append(np.std(column)) anomalies = [] for row in data: zscore = [] for i in range(len(mean)): zscore.append((row[i] - mean[i])/std[i]) if np.max(zscore) > 2: anomalies.append(row) return anomalies"},{"prompt":"Develop a numerical optimization algorithm in Python to minimize the cost of a given function. The function to be minimized is f(x) = x^2 + 2x + 3","completion":"# Import the required libraries import numpy as np # Define the objective function def f(x): return np.square(x) + 2*x + 3 # Define the optimization algorithm def opt(f, x0, lr, n_iter): x = x0 for i in range(n_iter): x_prev = x grad = 2 * x + 2 x = x - lr * grad if np.abs(x - x_prev) < 1e-5: break # Print the results print(\\"Minimum at {} with value {}\\".format(x, f(x)))"},{"prompt":"Create a function in Python to classify a given data according to two classes, class 0 or class 1.","completion":"def classify_data(data): \\"\\"\\"Classify given data into either class 0 or class 1.\\"\\"\\" if condition # Replace the condition with specific criteria for classification return 0 else: return 1"},{"prompt":"Suggest an algorithm in Python to generate the nth prime number.","completion":"def nth_prime_number(n): if n==1: return 2 count, num = 1, 3 while count < n: for i in range(2,num): if num % i == 0: break else: count += 1 num += 2 return num"},{"prompt":"Write a python program to compute the total cost of an item given a price and the quantity. price = 5 quantity = 10","completion":"def calculate_total_price(price, quantity): total_cost = price * quantity return total_cost price = 5 quantity = 10 total_cost = calculate_total_price(price, quantity) print(\\"The total cost is:\\", total_cost)"},{"prompt":"Write a Python program to print out the even numbers in the given list. list = [1, 4, 5, 6, 7, 8]","completion":"#Print out even numbers from the given list for num in list: if (num % 2 == 0): print(num)"},{"prompt":"Create a Python script that takes a text and replaces all occurrences of a given word to its uppercase version. Text: The quick brown fox jumps over the lazy dog and the word to replace: quick","completion":"import re text = \\"The quick brown fox jumps over the lazy dog\\" replaced = re.sub(r'quick', \\"QUICK\\", text) print(replaced) #prints \\"The QUICK brown fox jumps over the lazy dog\\""},{"prompt":"Create a sqlite3 database in Python for managing personal contacts. The database should have a table for storing contact information such as names, phone number, and email address. Not applicable","completion":"import sqlite3 conn = sqlite3.connect('contacts.db') c = conn.cursor() c.execute(\\"\\"\\"CREATE TABLE contacts ( first_name text, last_name text, phone_number text, email text )\\"\\"\\") c.execute(\\"INSERT INTO contacts VALUES ('John', 'Doe', '1234567890', 'doe@example.com')\\") conn.commit() conn.close()"},{"prompt":"Optimize an existing Python TensorFlow deep learning model to reduce its size. Not applicable","completion":"import tensorflow as tf # Create example deep learning model model = tf.keras.Sequential() model.add(tf.keras.layers.Conv2D(32, (3,3), input_shape=(300, 300, 3))) model.add(tf.keras.layers.MaxPool2D(2, 2)) model.add(tf.keras.layers.Conv2D(64, (3,3), input_shape=(150, 150, 3))) model.add(tf.keras.layers.MaxPool2D(2, 2)) # Optimize model for size model.add(tf.keras.layers.Conv2D(32, (3,3), input_shape=(50, 50, 3), activation='relu')) model.add(tf.keras.layers.MaxPool2D(2, 2)) model.add(tf.keras.layers.BatchNormalization()) model.add(tf.keras.layers.Conv2D(64, (3,3), input_shape=(25, 25, 3),activation=\\"relu\\")) model.add(tf.keras.layers.MaxPool2D(2, 2)) model.add(tf.keras.layers.BatchNormalization()) model.add(tf.keras.layers.Flatten())"},{"prompt":"Write a Python program to return the top 5 results sorted by a given column from a given list of dictionaries. [ {'name': 'Tom', 'score': 10}, {'name': 'John', 'score': 20}, {'name': 'Kate', 'score': 15}, {'name': 'Bob', 'score': 17}, {'name': 'David', 'score': 25}, {'name': 'Carol', 'score': 8}, ]","completion":"def top_five(dict_list, key): sorted_list = sorted(dict_list, key=lambda k: k[key], reverse=True) return sorted_list[:5] my_list = [ {'name': 'Tom', 'score': 10}, {'name': 'John', 'score': 20}, {'name': 'Kate', 'score': 15}, {'name': 'Bob', 'score': 17}, {'name': 'David', 'score': 25}, {'name': 'Carol', 'score': 8}, ] top_five_results = top_five(my_list, 'score') print(top_five_results) # Output: [{'name': 'David', 'score': 25}, {'name': 'John', 'score': 20}, {'name': 'Bob', 'score': 17}, {'name': 'Kate', 'score': 15}, {'name': 'Tom', 'score': 10}]"},{"prompt":"Using regular expression, construct a pattern in Python to identify strings of the form word1word2word3word4word5.","completion":"import re pattern = r\\"b(w+)b(w+)b(w+)b(w+)b(w+)b\\""},{"prompt":"Create a containerized application that reads data from a source and saves the data into a database. Data Source: CSV file Database Type: MySQL","completion":"FROM python:3.6 RUN pip install mysql-connector-python RUN pip install pandas COPY data.csv . CMD [\\"python\\", \\"main.py\\"] # File: main.py import mysql.connector import pandas as pd # Connect to MySQL mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"root\\", passwd=\\"YOUR_PASSWORD_HERE\\" ) # Read CSV file df = pd.read_csv('data.csv') # Insert data to database for index, row in df.iterrows(): cursor = mydb.cursor() sql = \\"INSERT INTO table (column_1, column_2) VALUES (%s, %s)\\" val = (row['column_1'], row['column_2']) cursor.execute(sql, val) mydb.commit() cursor.close() mydb.close()"},{"prompt":"Create a Python program to print out the sum of all even numbers between the given range, inclusive. start = 2 end = 10","completion":"def sum_even_numbers(start, end): result = 0 for n in range(start, end+1): if n % 2 == 0: result += n return result print(sum_even_numbers(2, 10))"},{"prompt":"Create a Python program to sort a dictionary according to the values. {John: 90, Mary: 95, Aaron: 80}","completion":"def sort_dict(d): sorted_dict = {} for k, v in sorted(d.items(), key=lambda x: x[1], reverse=True): sorted_dict[k] = v return sorted_dict input_data = {\\"John\\": 90, \\"Mary\\": 95, \\"Aaron\\": 80} sorted_dict = sort_dict(input_data) print(sorted_dict) # Output: {\\"Mary\\": 95, \\"John\\": 90, \\"Aaron\\": 80}"},{"prompt":"Sort a list of strings in Python alphabetically. string_list = [apple,banana, orange, kiwi]","completion":"def sort_list(string_list): sorted_list = sorted(string_list) return sorted_list"},{"prompt":"Create a Python program to replace all the vowels in a string with a corresponding number. String: Hello World","completion":"def replace_vowels(string): result = \\"\\" for char in string: if char in \\"aeiouAEIOU\\": result += str(ord(char)) else: result += char return result string = \\"Hello World\\" result = replace_vowels(string) print(result)"},{"prompt":"Find the most common word in a sentence using Python. this is a sentence with several words in it","completion":"from collections import Counter def most_frequent(sentence): words = sentence.split() counter = Counter(words) return counter.most_common(1)[0][0] sentence = \\"this is a sentence with several words in it\\" print(most_frequent(sentence)) // Outputs: \\"a\\""},{"prompt":"Create a for loop with range up to 5 in python and print the values.","completion":"for num in range(5): print(num)"},{"prompt":"Explain a method of hashing a string in Python.","completion":"One method of hashing a string in Python is to use the built-in hash() function. This function generates a hash code for a given string, which is a numerical representation of the string’s contents. It is important to note that the hash code generated is a fixed-length numerical representation regardless of the length of the string provided. Additionally, the hash code is unique for each input string and is deterministic, meaning it will always produce the same output for the same input."},{"prompt":"Write a function in Python to sum all the positive integers of n numbers. [1,2,3,4,5]","completion":"def sum_numbers(arr): total = 0 for num in arr: if num > 0: total += num return total print(sum_numbers([1,2,3,4,5])) # 15"},{"prompt":"Classify the following sentences as positive or negative using Python. Sentence: She is a great teacher","completion":"def classifySentence(sentence): #importing the necessary libraries import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer #Create a sentiment analyzer object sid_obj = SentimentIntensityAnalyzer() #calling the polarity_scores method sentiment_dict = sid_obj.polarity_scores(sentence) #decide sentiment as positive, negative, neutral or mixed if sentiment_dict['compound'] >= 0.05 : return \\"Positive\\" elif sentiment_dict['compound'] <= - 0.05 : return \\"Negative\\" else : return \\"Neutral\\" result = classifySentence(\\"She is a great teacher\\") print(result)"},{"prompt":"Generate a Python program to construct a hash table that stores strings as keys and integers as values.","completion":"def create_hash_table(): hash_table = dict(zip(list_of_strings, list_of_integers)) return hash_table"},{"prompt":"Given a string and a pattern, write a Python program to find the position of the pattern in the string and return the index of first occurrence. String: abcdabcd Pattern: abc","completion":"def find_pattern(string, pattern): n = len(string) m = len(pattern) # A loop to slide pat[] # one by one for i in range(n - m + 1): j = 0 # For current index i, # check for pattern match while(j < m): if (string[i + j] != pattern[j]): break j += 1 if (j == m): return i return -1"},{"prompt":"Write a Python program to print out the numbers from one to ten and identify any numbers that are divisible by three. Not applicable","completion":"for i in range(1, 11): if i % 3 == 0: print (f'{i} is divisible by three.') else: print (i)"},{"prompt":"Create a Python code that sorts the given data in descending order. [2, 4, 3, 6, 1, 7]","completion":"def descending_sort(data): for j in range(len(data)-1): for i in range(len(data)-1): if data[i] < data[i+1]: temp = data[i] data[i] = data[i+1] data[i+1] = temp return data print(descending_sort([2, 4, 3, 6, 1, 7]))"},{"prompt":"Create a python program to preorder traverse a given binary tree.","completion":"def preOrderTraverse(tree): if tree is None: return print(tree.data) preOrderTraverse(tree.left) preOrderTraverse(tree.right)"},{"prompt":"Extend the Python Flask application generated in the previous step to list specific information about a task when queried. Not applicable","completion":"from flask import Flask, request from flask_sqlalchemy import SQLAlchemy app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class Task(db.Model): id = db.Column(db.Integer, primary_key=True) description = db.Column(db.String(120), unique=True) db.create_all() @app.route('/tasks', methods=['POST']) def create_task(): task = Task(description=request.json['description']) db.session.add(task) db.session.commit() return {'id': task.id} @app.route('/tasks', methods=['GET']) def get_tasks(): tasks = Task.query.all() return {'tasks': [task.description for task in tasks]} @app.route('/tasks/int:id', methods=['GET']) def get_task_info(id): task = Task.query.get(id) return {'id': task.id, 'description': task.description} @app.route('/tasks/int:id', methods=['PUT']) def update_task(id): task = Task.query.get(id) task.description = request.json['description'] db.session.commit() return {'message': 'Task updated'} @app.route('/tasks/int:id', methods=['DELETE']) def delete_task(id): Task.query.filter_by(id=id).delete() db.session.commit() return {'message': 'Task deleted'} if name == 'main': app.run(debug=True)"},{"prompt":"Create a Python program to calculate the Fibonacci numbers up to a certain value. The value is 50.","completion":"def fib(n): if n <= 1: return n else: return(fib(n-1) + fib(n-2)) # Take input from the user n = int(input(\\"Enter a number: \\")) # Print Fibonacci sequence up to n print(\\"Fibonacci sequence:\\") for i in range(n): print(fib(i))"},{"prompt":"Code a program in Python for printing the course content of a software engineering course with the following information: course name, instructor name, list of topics covered. Course Name: Software Engineering Instructor Name: Allen Jones List of Topics: Design Patterns, Testing Strategies, Project Manageme","completion":"class Course: def __init__(self, course_name, instructor): self.course_name = course_name self.instructor = instructor self.topics = [] def add_topic(self, topic): self.topics.append(topic) SE_course = Course('Software Engineering', 'Allen Jones') SE_course.add_topic('Design Patterns') SE_course.add_topic('Testing Strategies') SE_course.add_topic('Project Management') print('Course:', SE_course.course_name) print('Instructor:', SE_course.instructor) print('Topics:') for topic in SE_course.topics: print('- ', topic)"},{"prompt":"Write a Python program to use the MusicBrainz API to find the biographic information of a given musician.","completion":"import requests def get_biography(artist): base_url = \\"https://musicbrainz.org/ws/2/artist/\\" artist_name = artist.replace(\\" \\", \\"%20\\") # Format URL parameter mbz_url = base_url + artist_name params = \\"?fmt=json&inc=url-rels+release-groups\\" # Include biographical info url = mbz_url + params response = requests.get(url) if response.status_code == 200: return response.json() else: print(\\"Error in response.\\") return None"},{"prompt":"Create a Python code to classify text into two classes A and B. dataset = [[This is class A text, A], [This is class B text, B]]","completion":"# Import the necessary libraries from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.feature_extraction.text import TfidfTransformer from sklearn.naive_bayes import MultinomialNB # Extract the data into X (text) and y (labels) X, y = zip(*dataset) # Create the training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0) # Create the count vectorizer count_vectorizer = CountVectorizer() # Transform the training and test data using count vectorizer X_train_counts = count_vectorizer.fit_transform(X_train) X_test_counts = count_vectorizer.transform(X_test) # Create the tf-idf transformer tfidf_transformer = TfidfTransformer() # Transform the training and test data using tf-idf X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts) X_test_tfidf = tfidf_transformer.transform(X_test_counts) # Create the Multinomial Naive Bayes classifier and fit the data clf = MultinomialNB().fit(X_train_tfidf, y_train) # Make predictions predicted = clf.predict(X_test_tfidf) # Calculate the accuracy accuracy = accuracy_score(y_test, predicted) print(\\"Accuracy: {0:.2f}%\\".format(accuracy*100))"},{"prompt":"Construct a linked list of nodes in Python. No Inpu","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node def insert_after(self, prev_node, new_data): if prev_node is None: print \\"The given previous node must be in Linked List.\\" return new_node = Node(new_data) new_node.next = prev_node.next prev_node.next = new_node def append(self, new_data): new_node = Node(new_data) if self.head is None: self.head = new_node return last = self.head while (last.next): last = last.next last.next = new_node"},{"prompt":"Create a Python program to copy elements of one array into another array. Array 1=[1,2,3,4]","completion":"array_1 = [1,2,3,4] array_2 = [] # Copying all the elements for i in range(0, len(array_1)): array_2.append(array_1[i]) print (\\"Elements Copied from the Array1 to Array2 are : \\" + str(array_2))"},{"prompt":"Create a Python script to scrape a website and extract the main content of any webpage. URL: www.example.com","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.example.com\\" html = requests.get(url).content soup = BeautifulSoup(html, 'html.parser') content = soup.find(\\"div\\", {\\"class\\": \\"main-content\\"}).text print(content)"},{"prompt":"Generate a set of Python classes to initialize a game board.","completion":"class Board: def __init__(self, rows, columns): \\"\\"\\" Constructor to initilize the board\\"\\"\\" # Grid of the board self.grid = [] # Initialize the grid for row in range(rows): self.grid.append([]) for col in range(columns): self.grid[row].append(\\"\\") class Player: def __init__(self, name): \\"\\"\\" Constructor to initilize the player \\"\\"\\" self.name = name self.score = 0 self.moves = 0 class GameEngine: def __init__(self, board, player1, player2): \\"\\"\\" Constructor to initilize the game engine \\"\\"\\" self.board = board self.player1 = player1 self.player2 = player2 self.current_player = player1 self.winning_player = None"},{"prompt":"Create a program in Python to count the number of elements of a given list. list = ['This', 'is', 'a', 'list']","completion":"def element_count(list): return len(list) list = ['This', 'is', 'a', 'list'] print(element_count(list))"},{"prompt":"Create a DataFrame in Python Pandas using given dates, numbers, and strings. dates = ['20130101', '20130102', '20130103'] numbers = [1, 2, 3] strings = ['a', 'b', 'c']","completion":"import pandas as pd # Create the dataframe df = pd.DataFrame({'date': dates, 'number': numbers, 'string': strings}) df date number string 0 2013-01-01 1 a 1 2013-01-02 2 b 2 2013-01-03 3 c"},{"prompt":"Given two strings, write a Python function to find the minimum edit distance between them. editing, distance","completion":"def edit_distance(str1, str2): # convert the strings into a list of characters list_str1 = list(str1) list_str2 = list(str2) # create a matrix to store the result matrix = [[0 for x in range(len(list_str2)+1)] for x in range(len(list_str1)+1)] # create the matrix in bottom up manner for i in range(len(list_str1)+1): for j in range(len(list_str2)+1): # if the first string is empty if i == 0: matrix[i][j] = j # if the second string is empty elif j == 0: matrix[i][j] = i # if the last characters of both strings match elif list_str1[i-1] == list_str2[j-1]: matrix[i][j] = matrix[i-1][j-1] # if the last characters of both strings do not match else: matrix[i][j] = 1 + min(matrix[i][j-1], matrix[i-1][j], matrix[i-1][j-1]) # return the last element of the matrix return matrix[-1][-1] str1 = \\"editing\\" str2 = \\"distance\\" print(edit_distance(str1, str2)) # Output: 5"},{"prompt":"Create a Python program to calculate the sum of the following series: 1/3 + 3/5 + 5/7 + 7/9 + 9/11 +... + 95/97 + 97/99 Not applicable","completion":"sum = 0 for num in range(1, 98, 2): n1 = num / (num + 2) sum += n1 print(sum)"},{"prompt":"Create a function in Python to merge two given lists in sorted order. list1 = [6, 8, 15, 33] list2 = [4, 15, 20, 25]","completion":"def merge_sorted_lists(list1, list2): sorted_list = [] i = 0 j = 0 # loop through both lists and compare values while i < len(list1) and j < len(list2): if list1[i] < list2[j]: sorted_list.append(list1[i]) i += 1 else: sorted_list.append(list2[j]) j += 1 # add the remaining elements while i < len(list1): sorted_list.append(list1[i]) i += 1 while j < len(list2): sorted_list.append(list2[j]) j += 1 return sorted_list list1 = [6, 8, 15, 33] list2 = [4, 15, 20, 25] sorted_list = merge_sorted_lists(list1, list2) print(sorted_list) # [4, 6, 8, 15, 15, 20, 25, 33]"},{"prompt":"Create a python program that takes a sentence and returns a list of words in alphabetical order. Sentence: The quick brown fox jumped over the lazy dog.","completion":"sentence = \\"The quick brown fox jumped over the lazy dog.\\" # Split sentence into words words = sentence.split() # Sort list of words alphabetically words.sort() # Print sorted list of words print(words) # Output: ['brown', 'dog.', 'fox', 'The', 'jumped', 'lazy', 'over', 'quick', 'the']"},{"prompt":"Develop a python program to cipher the following message using Caesar Cipher. Message: hello world Shift: 3","completion":"def caesar_cipher(message, shift): encoded_msg = \\"\\" for char in message: if char.isalpha(): char_code = ord(char) char_code += shift if char.isupper(): if char_code > ord('Z'): char_code -= 26 elif char_code < ord('A'): char_code += 26 elif char.islower(): if char_code > ord('z'): char_code -= 26 elif char_code < ord('a'): char_code += 26 encoded_msg += chr(char_code) else: encoded_msg += char return encoded_msg message = \\"hello world\\" shift = 3 encoded_msg = caesar_cipher(message, shift) print(\\"Encoded message:\\", encoded_msg) # -> Encoded message: khoor zruog"},{"prompt":"Generate a python script to fill in a missing data in a given dataset. Given a dataset with 10 columns and 10 rows, with the 6th row missing.","completion":"def fill_missing_data(data): # Get the shape of the data num_rows, num_columns = data.shape # Get the index for the missing row missing_row_index = 6 # Iterate through the columns and fill in the missing data for col_index in range(num_columns): # Calculate the mean of the two values before and after the missing row mean_val = (data[missing_row_index -1, col_index] + data[missing_row_index + 1, col_index]) /2 # Fill in the missing value data[missing_row_index, col_index] = mean_val # Return the data with the missing row filled in return data"},{"prompt":"Create an algorithm in Python to calculate the maximum profit that one can achieve from stock purchasing. 15, 12, 13, 10, 11, 16","completion":"def max_profit(prices): max_profit = 0 for i in range(len(prices) - 1): for j in range(i + 1, len(prices)): if prices[j] - prices[i] > max_profit: max_profit = prices[j] - prices[i] return max_profit prices = [15, 12, 13, 10, 11, 16] print(\\"Maximum profit :\\", max_profit(prices))"},{"prompt":"Design a program in Python to filter the elements from a list which are not divisible by 3. [2, 3, 4, 5, 6, 7, 8, 9]","completion":"def filter_list(arr): filtered_list = [] for num in arr: if num % 3 != 0: filtered_list.append(num) return filtered_list print(filter_list([2, 3, 4, 5, 6, 7, 8, 9]))"},{"prompt":"Create a python program to filter a list of items by a condition Given a list of numbers example: [1,2,3,4,5] filter for items thats greater than or equal to 3.","completion":"def filter_list(list_input): filtered_list = [i for i in list_input if i >= 3] return filtered_list list_input = [1,2,3,4,5] filtered_list = filter_list(list_input) print(filtered_list) # [3, 4, 5]"},{"prompt":"Write an algorithm in Python that takes as input an array of numbers and returns the maximum element. [15, 25, 7, 1]","completion":"def maxElement(arr): maxElement = arr[0]; for i in range(1, len(arr)): if maxElement < arr[i]: maxElement = arr[i]; return maxElement; arr = [15, 25, 7, 1]; maxElement = maxElement(arr); print (\\"Maximum element in the array is:\\", maxElement);"},{"prompt":"Create an Python decorator that measures the execution time of a function and logs it. Not applicable","completion":"import time import logging def timeit(func): def wrapper(*args, **kwargs): start = time.time() result = func(*args, **kwargs) end = time.time() duration = end - start logging.info(\\"Execution of {} took {} seconds\\".format(func.__name__, duration)) return result return wrapper"},{"prompt":"Write a Python script to print a multiplication table for all the numbers from 1 to 10.","completion":"for i in range(1, 11): for j in range(1, 11): print(i*j, end=\\"t\\") print()"},{"prompt":"Create a class for a Word Counter in Python. The class should take a string of text as an argument and have a method to count the total number of words. not applicable","completion":"class WordCounter: def __init__(self, text): self.text = text def count_words(self): return len(self.text.split()) text = 'This is some sample text.' wc = WordCounter(text) num_words = wc.count_words() print(num_words) # Output: 4"},{"prompt":"Edit the program in Python, so it prints out the sum of the list of numbers and the average [10, 15, 20, 25]","completion":"arr = [10, 15, 20, 25] totalSum = 0 for x in arr: totalSum += x print(\\"Sum of the list: \\"+str(totalSum)) print(\\"Average of the list: \\"+str(totalSum/len(arr))) Output: Sum of the list: 70 Average of the list: 17.5"},{"prompt":"Create a Python program to detect whether an input string is palindrome or not. Example input string: 'racecar'","completion":"def is_palindrome(input_string): rev_string = input_string[::-1] return input_string == rev_string input_string = 'racecar' if is_palindrome(input_string): print('The input string', input_string, 'is a palindrome.') else: print('The input string', input_string, 'is not a palindrome.')"},{"prompt":"Write a Python function to determine whether a number is a prime or a composite number.","completion":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"prompt":"Create an application for predicting stock prices in Python. Sample stock d","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.svm import SVR # Import dataset dataset = pd.read_csv('stock_prices.csv') # Separate features (X) and target (y) X = dataset.iloc[:, :-1].values y = dataset.iloc[:, -1].values # Split data into training set and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # Train the model regressor = SVR(kernel = 'rbf', gamma = 'scale') regressor.fit(X_train, y_train) # Test model y_pred = regressor.predict(X_test)"},{"prompt":"Write a function in Python to extract the domain name from an email address. test@example.com","completion":"def get_domain_name_from_email(email): return email.split('@')[-1]"},{"prompt":"Given a list, write a Python script to reverse the order of the list. [10, 20, 30, 40, 50]","completion":"list = [10, 20, 30, 40, 50] list.reverse() print(list)"},{"prompt":"Create a numerical optimization algorithm using Python that minimizes the function f(x,y) = x^2 + 2y^2","completion":"import numpy as np # Define the function to be optimized def f(x, y): return np.square(x) + 2 * np.square(y) # Initialize the parameters x = 0 y = 0 learning_rate = 10 # Gradient Descent Algorithm for i in range(1000): # Calculate the derivatives grad_x = 2 * x grad_y = 4 * y # Calculate the new values x -= learning_rate * grad_x y -= learning_rate * grad_y # Print the minimum print(\\"The minimum is: {:.4f}\\".format(f(x, y)))"},{"prompt":"Design a method in Python to deduplicate a given list of elements. [4, 5, 1, 9, 5, 4, 3]","completion":"# store the given list my_list = [4, 5, 1, 9, 5, 4, 3] # remove the duplicates deduplicated_list = list(set(my_list)) # print the result print(\\"Deduplicated list:\\", deduplicated_list)"},{"prompt":"Rewrite the following Python program using recursion to sum the numbers in a list. [2, 4, 6, 8]","completion":"# Using recursion to sum the numbers in a list def recursive_sum(arr): if len(arr) == 0: return 0 # Base case else: return arr[0] + recursive_sum(arr[1:]) # Recursive case print(\\"Sum of the list:\\", recursive_sum([2, 4, 6, 8]))"},{"prompt":"Create a function in Python that takes a list of integers as an argument and then returns the maximum integer. [3, 5, 12, 20, 6, 4]","completion":"def find_max(a): max = a[0] for i in a: if i > max: max = i return max print(find_max([3, 5, 12, 20, 6, 4])) # 20"},{"prompt":"mplement an ASTbased linting tool in Python to detect errors and suggest improvements to code. A sample Python code snippet: def sum(x, y): return x + y","completion":"import ast def detect_errors(code): tree = ast.parse(code) errors = [] for node in ast.walk(tree): if isinstance(node, ast.Name): errors.append(\\"Name node '{}' should be declared\\".format(node.id)) elif isinstance(node, ast.Return): # check that return is followed by an expression if not isinstance(node.value, ast.expr): errors.append(\\"Return statement should be followed by an expression\\") return errors def autofix(code): errors = detect_errors(code) fixed_code = ast.fix_missing_locations(ast.parse(code)) for node in ast.walk(fixed_code): if isinstance(node, ast.Name): node_decl = ast.copy_location(ast.arg(node.id, None), node) fixed_code.body.insert(0, node_decl) elif isinstance(node, ast.Return): expr_node = ast.Num(3) fixed_node = ast.Return(expr_node) ast.copy_location(fixed_node, node) ast.fix_missing_locations(fixed_node) fixed_code.body[-1] = fixed_node return fixed_code"},{"prompt":"Create an algorithm in Python that takes a list and returns the sum of the list items. [1, 2, 3]","completion":"def listSum(lst): s = 0 for i in range (len(lst)): s += lst[i] return s print (listSum([1,2,3])) # 6"},{"prompt":"mplement a function to find the longest common subsequence between two strings in Python. str1 = abcdabcd, str2 = bcdee","completion":"def lcs(str1, str2): n = len(str1) m = len(str2) # Create a matrix to store # results of subproblems LCSuff = [[0 for k in range(m+1)] for l in range(n+1)] # Fill the LCSuff matrix in # bottom up manner for i in range(n+1): for j in range(m+1): if (i == 0 or j == 0): LCSuff[i][j] = 0 elif (str1[i-1] == str2[j-1]): LCSuff[i][j] = LCSuff[i-1][j-1] + 1 else: LCSuff[i][j] = max(LCSuff[i-1][j], LCSuff[i][j-1]) # finding the common substring index = LCSuff[n][m] # Create a character array # to store the lcs string lcs = [\\"\\"] * (index+1) lcs[index] = \\"\\" # Start from the right-most-bottom-most # corner and one by one store characters # in lcs[] i = n j = m while (i > 0 and j > 0): # If current character in str1 and # str2 are same, then current # character is part of LCS if (str1[i-1] == str2[j-1]): lcs[index-1] = str1[i-1] i -= 1 j -= 1 index -= 1 # If not same, then find the larger # of two and go in the direction # of larger value elif (LCSuff[i-1][j] > LCSuff[i][j-1]): i -= 1 else: j -= 1 return \\"\\".join(lcs) str1 = \\"abcdabcd\\" str2 = \\"bcdee\\" print(lcs(str1, str2)) #\\"bcd\\""},{"prompt":"Write a function in Python that takes two strings as parameters and returns a boolean indicating whether they are anagrams.","completion":"def is_anagram(string1, string2): # Create two lists from input strings list_string1 = list(string1) list_string2 = list(string2) # If both strings are of different length then they # cannot be anagram if len(list_string1) != len(list_string2): return False # Sort both strings list_string1.sort() list_string2.sort() # Compare sorted strings if list_string1 == list_string2: return True else: return False"},{"prompt":"Compute the area of a given circle using its radius in Python. radius = 5","completion":"import math def calculateCircleArea(radius): area = math.pi * radius * radius return area radius = 5 print(\\"Area of a circle with radius 5 is: \\", calculateCircleArea(radius))"},{"prompt":"Write a Python code snippet which sorts a list by the values of the 2nd element of each tuple in the list. [(1, 2), (3, 1), (2, 3)]","completion":"unsorted_list = [(1, 2), (3, 1), (2, 3)] def take_second(el): return el[1] # sorting list # the second elements of tuples sorted_list = sorted(unsorted_list, key = take_second) # printing sorted list print(sorted_list)"},{"prompt":"Design a genetic algorithm for a travelling salesman problem in Python.","completion":"import numpy as np def geneticAlgorithm(population, iter): for i in range(iter): new_population = [] for chromosome in population: cost = getCost(chromosome) fitness = 1/cost parent1, parent2 = selectParents(population) offspring = crossover(parent1, parent2) offspring = mutation(offspring) new_population.append(offspring) population = new_population return population def selectParents(population): parent1, parent2 = getRandomParents(population) fitness1 = getCost(parent1) fitness2 = getCost(parent2) if (fitness1 < fitness2): return parent1, parent2 else: return parent2, parent1 def getRandomParents(population): parent1 = population[np.random.randint(0, len(population))] parent2 = population[np.random.randint(0, len(population))] while (parent1 == parent2): parent2 = population[np.random.randint(0, len(population))] return parent1, parent2 def crossover(parent1, parent2): ''' Insert code to perform crossover here ''' return offspring def mutation(offspring): ''' Insert code to perform mutation here ''' return offspring def getCost(chromosome): ''' Insert code to compute the cost for a chromosome here ''' return cost"},{"prompt":"Write a python code to a randomly select a number of items, but with a given algorithm. 7 items in list, select 5 items algorithm should select the items randomly, but gives better chance to the higher number item","completion":"\\"\\"\\" Write a python code to a randomly select a number of items, but with a given algorithm \\"\\"\\" import random def select_with_algorithm(items, size): # Create a list from 0 to len(items)-1 item_indices = list(range(len(items))) # Create a list of size 0 selection = [] # Iterate for the size desired for _ in range(size): # Select one of the indices randomly index = random.choice(item_indices) # Store it in the selection list selection.append(items[index]) # Then remove it from the item_indices list item_indices.remove(index) # Return the selection return selection if __name__ == '__main__': items = [1, 2, 3, 4, 5, 6, 7] size = 5 selection = select_with_algorithm(items, size) print(selection)"},{"prompt":"Design an algorithm in Python for randomizing the elements of an array of size \`n\`.","completion":"import random def randomize(arr, n): # Start from the last element and # swap one by one. We don't need to # run for the first element # that's why i > 0 for i in range(n-1,0,-1): # Pick a random index j = random.randint(0,i+1) # Swap arr[i] with the element # at random index arr[i],arr[j] = arr[j],arr[i] return arr"},{"prompt":"Write a web scraper in Python to collect all the articles from the front page of a given website. URL: website.com","completion":"import requests from bs4 import BeautifulSoup # Specify the URL url = 'website.com' # Get the response response = requests.get(url) # Parse the response soup = BeautifulSoup(response.text, 'html.parser') # Extract all the articles on the front page articles = soup.find_all('article', class_='front-page-article') # Iterate through each article and print its text for article in articles: print(article.find('h2').text)"},{"prompt":"Write a Python program to print out the alphabet pattern 'ABCD...XYZ'.","completion":"for i in range(65, 91): print(chr(i), end=\\" \\")"},{"prompt":"Write a Python code to count the number of matching elements between two lists list1 = [1,2,3,4,5] list2 = [1,3,4,7,9]","completion":"def count_matches(list1, list2): count = 0 for elem in list1: if elem in list2: count += 1 return count"},{"prompt":"Create a Python program to calculate the average value of an array and store the result in the variable average. Input array: [1, 2, 3, 4, 5]","completion":"input_array = [1, 2, 3, 4, 5] # calculate the average value average = sum(input_array) / len(input_array) # print result print(\\"Average:\\", average) # Output: Average: 3.0"},{"prompt":"Using the comment as guide, construct a python program that checks whether a given value is in a list Input List: [1, 2, 3, 4, 5] Input Value: 3","completion":"def search_list(input_list, input_value): \\"\\"\\"Checks whether a given value is in a list\\"\\"\\" for num in input_list: if num == input_value: return True return False"},{"prompt":"Write a Python code to edit the given sentence by replacing all the '@' symbols with '#' symbols. Sentence: This is a sentence with @ symbols.","completion":"sentence = \\"This is a sentence with @ symbols.\\" sentence = sentence.replace('@', '#') print(sentence) # This is a sentence with # symbols."},{"prompt":"Edit a Python program to optimize the code while computing the Fibonacci series. # Fibonacci series program def fibonacci(n): # base case if n == 0: return 0 elif n == 1: return 1 else: return (fibonacci(n 1) + fibonacci(n 2))","completion":"# Fibonacci series program def fibonacci(n, f_values): # base case if n == 0: return 0 elif n == 1: return 1 if n in f_values: return f_values[n] else: f_values[n] = fibonacci(n-1, f_values) + fibonacci(n-2, f_values) return f_values[n] # calculate the fibonacci series def calculate_fibonacci(n): f_values = {} for i in range(n+1): value = fibonacci(i, f_values) print(f\\"{i}: {value}\\")"},{"prompt":"Construct an algorithm in Python for calculating the median of a given list of numbers. [2, 4, 3, 5, 7]","completion":"def calculateMedian(numbers): n = len(numbers) if n % 2 == 0: num1 = numbers[n//2] num2 = numbers[n//2 - 1] median = (num1 + num2)/2 else: median = numbers[n//2] return median numbers = [2, 4, 3, 5, 7] median = calculateMedian(numbers) print(\\"Median of list is:\\", median)"},{"prompt":"Create a Python program to convert Roman numerals to integers. MCMLIV","completion":"def roman_to_int(roman): # Create a dictionary for the Roman numerals roman_values = { 'M': 1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1 } total = 0 for i in range(len(roman)): # If the current value is greater than the previous value, subtract it from the total if i != 0 and roman_values[roman[i]] > roman_values[roman[i-1]]: total -= roman_values[roman[i-1]] # Add the current value to the total total += roman_values[roman[i]] return total num = roman_to_int('MCMLIV') print(num)"},{"prompt":"Create a python program to create a contact list using a Dictionary. This program should take user input to add new entries to the dictionary and also update existing entries. Example dictionary contactlist = { John: { Phone: 5555123456, Email: john@test.com }, Jane: { Phone: 4445123456, Email: jane@test.com } }","completion":"contactlist = {} # Function to add contact def add_contact(): name = input(\\"Enter the name of the contact: \\") phone = input(\\"Enter the phone number: \\") email = input(\\"Enter the email address: \\") contactlist[name] = { \\"Phone\\": phone, \\"Email\\": email } print(\\"Contact saved successfully!\\") # Function to update contact def update_contact(): name = input(\\"Enter the name of the contact: \\") if name in contactlist: phone = input(\\"Enter the new phone number: \\") email = input(\\"Enter the new email address: \\") contactlist[name][\\"Phone\\"] = phone contactlist[name][\\"Email\\"] = email print(\\"Contact updated successfully!\\") else: print(\\"Contact not found!\\") # Main program while(1): print(\\"1. Add contact\\") print(\\"2. Update contact\\") print(\\"3. Exit\\") option = int(input(\\"Enter your choice: \\")) if option == 1: add_contact() elif option == 2: update_contact() else: break"},{"prompt":"Optimize the following Python code by replacing the forloop with a list comprehension def hipsterify(sentence): hipster_sentence = [] for i in range(len(sentence)): hipster_sentence.append(hipster + sentence[i]) return ' '.join(hipster_sentence)","completion":"def hipsterify(sentence): return ' '.join([\\"hipster \\" + word for word in sentence])"},{"prompt":"Create a Python script that processes a sentence and classifies it as positive or negative. The food was really bad.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentence = \\"The food was really bad.\\" sentiment_analyzer = SentimentIntensityAnalyzer() score = sentiment_analyzer.polarity_scores(sentence) if score['compound'] > 0: sentiment = 'positive' elif score['compound'] < 0: sentiment = 'negative' print(f'The sentence is {sentiment}.')"},{"prompt":"Write a function to implement insertion sort in Python","completion":"\\"\\"\\" Function to implement insertion sort in Python \\"\\"\\" def insertionSort(arr): # traverse through 1 to len(arr) for i in range(1, len(arr)): key = arr[i] # Move elements of arr[0..i-1], that are # greater than key, to one position ahead # of their current position j = i-1 while j >= 0 and key < arr[j] : arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key # Driver code to test above arr = [12, 11, 13, 5, 6] insertionSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Create a Python program which sorts elements of an array in ascending order. [5, 2, 1, 3, 6, 4]","completion":"def sort_ascending(array): for i in range(len(array)-1): for j in range(i, len(array)): if array[i] > array[j]: array[i], array[j] = array[j], array[i] return array sort_ascending([5, 2, 1, 3, 6, 4]) # Output = [1, 2, 3, 4, 5, 6]"},{"prompt":"Create a web server using Python.","completion":"import http.server import socketserver PORT = 8000 Handler = http.server.SimpleHTTPRequestHandler with socketserver.TCPServer((\\"\\", PORT), Handler) as httpd: print(\\"serving at port\\", PORT) httpd.serve_forever()"},{"prompt":"Generate a function in Python to optimize a function based on the mean squared error metric. def f(weights): cost = 0 for i in range(len(weights)): cost += weights[i]**2 return co","completion":"import gradientDescent as GD def optimize(weights): cost, gradient = GD.cost_function(f, weights) optimizer = GD.Optimizer(learning_rate=0.01, momentum=0.9, decay=0.001) optimizer.run(cost, gradient) return optimizer.weights"},{"prompt":"Generate a python script to calculate the total public holiday hours for a given state. state = Illinois","completion":"state = \\"Illinois\\" def calculate_public_holiday_hours(state): # code to calculate public holiday hours for a given state if state == \\"Illinois\\": return 8 # code for other states hours = calculate_public_holiday_hours(state) print(\\"Public holiday hours:\\", hours)"},{"prompt":"Give a Python function that shuffles the elements of a given list. [1, 2, 3, 4, 5]","completion":"import random def shuffle(list): random.shuffle(list) return list list = [1, 2, 3, 4, 5] shuffledList = shuffle(list) print(shuffledList)"},{"prompt":"Write a Python program to optimize a given code and make it run faster.","completion":"def optimize_code(code): optimized_code = \\"\\" lines = code.splitlines() indentation_level = 0 for line in lines: # Remove redundant white space and apply proper indentation optimized_code += \\" \\" * indentation_level + line.strip() + \\"n\\" # Increment/Decrement indentation level if line.endswith(\\":\\"): indentation_level += 4 else: if line[0] not in [\\"#\\", \\"\\"]: indentation_level -= 4 indentation_level = max(indentation_level, 0) # prevent it going below 0 return optimized_code"},{"prompt":"Construct a function that will find the value of a given key in a Python dictionary. dictionary = {'key1':1, 'key2':2, 'key3':3} key = 'key2'","completion":"def find_value(dictionary, key): value = dictionary.get(key) return value dictionary = {'key1':1, 'key2':2, 'key3':3} key = 'key2' value = find_value(dictionary, key) print(value) # Output is 2"},{"prompt":"Create a Python class for a car with three fields: make, model and color.","completion":"class Car: def __init__(self, make, model, color): self.make = make self.model = model self.color = color"},{"prompt":"Using the input, write a Python code to find the armstrong number. 153","completion":"def is_armstrong_number(number): result = 0 n = len(str(number)) for num in str(number): result += int(num)**n return result == number result = is_armstrong_number(153) print(result)"},{"prompt":"Create an algorithm in Python to find the sum of all the numbers in a given range.","completion":"def sum_range(start, end): sum = 0 for i in range(start, end+1): sum += i return sum # Driver Code start = 2 end = 5 print(sum_range(start, end)) # Result: 14"},{"prompt":"Create a function in Python that calculates the sum of all even numbers in a given list [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"def sum_evens(nums): total = 0 for num in nums: if num % 2 == 0: total += num return total a = [1, 2, 3, 4, 5, 6, 7, 8, 9] print(sum_evens(a)) # 20"},{"prompt":"Generate a code snippet in Python that validates whether a number is within a given range or not.","completion":"def number_in_range(num, start, end): if num >= start and num <= end: return True else: return False"},{"prompt":"Suggest a line of code to parse a JSON string.","completion":"pythonObject = json.loads(jsonString)"},{"prompt":"Design a binary tree in Python that stores characters and can search for a given character. Not applicable","completion":"class Node: def __init__(self, data, left=None, right=None): self.data = data self.left = left self.right = right class BinaryTree: def __init__(self): self.root = None def search(self, char): current = self.root while current: if char == current.data: return True elif char < current.data: current = current.left else: current = current.right return False tree = BinaryTree() tree.root = Node('F') tree.root.left = Node('D') tree.root.right = Node('J') tree.root.left.left = Node('B') tree.root.left.right = Node('E') tree.root.right.left = Node('G') tree.root.right.right = Node('K') print(tree.search('G')) # Output: True"},{"prompt":"Generate a python program to find the sum of series 1 +1/2 + 1/4 +….+ 1/n","completion":"def series_sum(n): sum_series = 0 for i in range(1, n + 1): sum_series += 1/i return sum_series"},{"prompt":"Write a code snippet in Python to print the last 3 characters of a given string string = Hello, World!","completion":"print(string[-3:])"},{"prompt":"Create a web scraper in Python that extracts information from a webpage and stores it in a JSON object. Not applicable","completion":"import requests from bs4 import BeautifulSoup import json url = 'http://example.com/' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') # Get the information information = {} information['title'] = soup.title.string information['h1'] = soup.h1.string information['description'] = soup.find('meta', attrs={'name':'description'})['content'] # Save the information with open('information.json', 'w') as f: json.dump(information, f) print('Data saved!')"},{"prompt":"Create a machine learning model using Python and the Scikit Learn package to predict net sales value for a company. Dataframe containing the following columns: Region (categorical): the region where the company operates Area (categorical): the area (urban, suburban, or rural) of the region Employee Count (int): the number of employees in the company Promotion (int): the amount spent on advertising and promotions Price (float): the price of the produc","completion":"from sklearn.ensemble import RandomForestRegressor region = pd.get_dummies(data['Region']) area = pd.get_dummies(data['Area']) X = data.drop(['Net Sales'], axis=1) X = pd.concat([X, region, area], axis=1) y = data['Net Sales'] ml_model = RandomForestRegressor() ml_model.fit(X, y)"},{"prompt":"Edit the given Python function to include an exception handling code block. def convert_to_integer(x): return int(x)","completion":"def convert_to_integer(x): try: return int(x) except Exception: print('Unable to convert to integer.') return x"},{"prompt":"Find the maximum element in an array of integers and return its index. [3,8,15,2,6,10]","completion":"// Python def findMaxElementIndex(arr): max_val = max(arr) max_index = arr.index(max_val) return max_index"},{"prompt":"Write a Python script to apply the Polynomial Regression model to analyse a dataset. The dataset consists of 10 observations with 2 features (X and Y).","completion":"import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from sklearn.preprocessing import PolynomialFeatures # create the dataset x_train = np.array([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]) y_train = np.array([[3], [5], [7], [9], [11], [14], [17], [22], [25], [27]]) # create and fit the polynomial regression model pr = LinearRegression() quadratic = PolynomialFeatures(degree=2) x_train_quad = quadratic.fit_transform(x_train) # fit the model pr.fit(x_train_quad, y_train) # predict the output for the values in x y_pred = pr.predict(x_train_quad) # visualize the input and output plt.scatter(x_train, y_train, label='Training Data') plt.plot(x_train, y_pred, label='Polynomial Regression', color='red') plt.legend() plt.show()"},{"prompt":"Design a program to capitalize each letter of a given string in Python.","completion":"def capitalize_string(str): capitalized_str = \\"\\" for char in str: capitalized_str += char.upper() return capitalized_str test_string = \\"hello world\\" capitalized_string = capitalize_string(test_string) print(capitalized_string)"},{"prompt":"Create a Python script to generate an HTML table using data from a list of dictionaries. data = [ {'Name': 'John', 'Age': 30}, {'Name': 'Alice', 'Age': 20}, {'Name': 'Bob', 'Age': 25}, ]","completion":"import csv data = [ {'Name': 'John', 'Age': 30}, {'Name': 'Alice', 'Age': 20}, {'Name': 'Bob', 'Age': 25}, ] # Generate the table table_html = \\"<table><tr><th>Name</th><th>Age</th></tr>\\" for item in data: table_html += \\"<tr><td>{}</td><td>{}</td></tr>\\".format(item['Name'], item['Age']) table_html += \\"</table>\\" print(table_html)"},{"prompt":"Create a function in Python to construct the following pattern The maximum number of lines is 10","completion":"def construct_pattern(n): for i in range(1,n+1): for j in range(i): print(\\"*\\",end=\\"\\") print(\\"\\") for i in range(n-1,0,-1): for j in range(i): print(\\"*\\",end=\\"\\") print(\\"\\")"},{"prompt":"Generate a python program that takes in a list and an integer and prints the element at index in the list list = [a, b, c, d] and integer = 2","completion":"def print_element(lst, index): print(lst[index])"},{"prompt":"Create a python program to remove characters from a string that's not a letter or symbol. string = ABC%@#XYZ","completion":"string = \\"ABC%@#XYZ\\" new_string = ''.join(c for c in string if c.isalnum()) print(new_string) # output: ABCXYZ"},{"prompt":"Given input and output examples, create a classification model in Python that can predict the output for a given input. Inputs: [1, 2, 3] Outputs: [2, 4, 6]","completion":"def pred_model(inputs): outputs=[] for i in inputs: outputs.append(i*2) return outputs inputs = [1,2,3] outputs = pred_model(inputs) print(\\"Outputs:\\", outputs)"},{"prompt":"Create a function in Python to apply a discount rate to a given price. This should accept two parameters, a float for the discount rate between 0 and 1 and the price. The function should return the discounted price. discountRate = 0.9 price = 200","completion":"def applyDiscount(discountRate, price): discountedPrice = discountRate * price return discountedPrice print(applyDiscount(discountRate, price)) # 180"},{"prompt":"Write a generic function in Python to sort a list of dictionaries based on multiple parameters.","completion":"def multi_sort(lst, keys): # lst is a list of dictionaries # keys is a list containing the keys to sort on split_list = [item[k] for k in keys] lst.sort(key = lambda x:split_list) return lst # Example: my_list = [{\\"name\\": \\"John\\", \\"age\\": 24}, {\\"name\\": \\"Chris\\", \\"age\\": 25}, {\\"name\\": \\"John\\", \\"age\\": 20}] keys = [\\"name\\", \\"age\\"] multi_sort(my_list, keys) # Output: [{'name': 'Chris', 'age': 25}, {'name': 'John', 'age': 20}, {'name': 'John', 'age': 24}]"},{"prompt":"Create a Python program to parse a domain name and extract important information. example.com","completion":"import tldextract def parse_domain_name(name): \\"\\"\\"Parses a domain name and extracts information such as the subdomain and the root domain.\\"\\"\\" extract = tldextract.extract(name) subdomain = extract.subdomain root_domain = extract.domain + '.' + extract.suffix return subdomain, root_domain"},{"prompt":"Create a function in Python that takes a string of any length and capitalizes every word. 'hello world'","completion":"def capitalize_words(string): words = string.split(' ') capitalized = [word.capitalize() for word in words] return ' '.join(capitalized) # Usage print(capitalize_words('hello world')) # Hello World"},{"prompt":"Design a Python program to remove duplicates from a given array. [1, 3, 5, 1, 5, 9]","completion":"def remove_duplicates(arr): final_list = [] for num in arr: if num not in final_list: final_list.append(num) return final_list"},{"prompt":"Create a simple Python script to send an email whenever the temperature of a given city drops below a certain threshold. Threshold: 10 City: New York","completion":"import requests THRESHOLD = 10 CITY = 'New York' def check_temp(): url = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid=<API_KEY>'.format(CITY) r = requests.get(url).json() temp = r['temp'] if temp < THRESHOLD: send_email(f'The temperature is {temp} in {CITY}') def send_email(message): # Code to send an email pass check_temp()"},{"prompt":"Write a python code to find a set of consecutive numbers in a given list. [2, 3, 4, 5, 6, 7, 8, 10, 11, 12]","completion":"def get_consecutive_numbers(numbers): consecutive_numbers = [] for i in range(len(numbers)): temp = [numbers[i]] for j in range(i+1, len(numbers)): if numbers[j] == numbers[i] + 1: temp.append(numbers[j]) i += 1 else: break if len(temp) > 1: consecutive_numbers.append(temp) return consecutive_numbers if __name__ == '__main__': print(get_consecutive_numbers([2, 3, 4, 5, 6, 7, 8, 10, 11, 12]))"},{"prompt":"Develop a Python program to query the Spotify Web API for information about a given artist. The Beatle","completion":"import requests import json # Get access token url = 'https://accounts.spotify.com/api/token' data = {'grant_type': 'client_credentials'} auth = ('YOUR_CLIENT_ID', 'YOUR_CLIENT_SECRET') response = requests.post(url, data=data, auth=auth) token = json.loads(response.text)['access_token'] # Search for artist url = 'https://api.spotify.com/v1/search' params = { 'q': 'The Beatles', 'type': 'artist' } header = { 'Authorization': f'Bearer {token}' } response = requests.get(url, params=params, headers=header) artist = json.loads(response.text)['artists']['items'][0] # Get artist information url = artist['href'] response = requests.get(url, headers=header) artist_info = json.loads(response.text) print(artist_info)"},{"prompt":"Design an API in Python for a simple store where customers can search for products. The API should have the following features: searching for products by name or by category, displaying information about a product, and adding a product to user's cart. Not applicable","completion":"# Store API # app.py from flask import Flask from flask_restful import Api, Resource, reqparse app = Flask(__name__) api = Api(app) products = [ {\\"name\\": \\"laptop\\", \\"category\\": \\"electronics\\", \\"price\\": 899.99}, {\\"name\\": \\"iphone\\", \\"category\\": \\"electronics\\", \\"price\\": 999.99}, {\\"name\\": \\"headphones\\", \\"category\\": \\"electronics\\", \\"price\\": 99.99} ] # product class Product(Resource): def get(self, name): for product in products: if name == product['name']: return product, 200 return {\\"message\\": \\"Product not found\\"}, 404 def post(self, name): parser = reqparse.RequestParser() parser.add_argument('category') parser.add_argument('price') args = parser.parse_args() for product in products: if product['name'] == name: return {\\"message\\": \\"Product with name {} already exists\\".format(name)}, 400 product = { \\"name\\": name, \\"category\\": args['category'], \\"price\\": args['price'] } products.append(product) return products[-1], 201 def put(self, name): parser = reqparse.RequestParser() parser.add_argument('category') parser.add_argument('price') args = parser.parse_args() for product in products: if product['name'] == name: product['category'] = args['category'] product['price'] = args['price'] return product, 200 return {\\"message\\": \\"Product not found\\"}, 404 # products class ProductList(Resource): def get(self): return products, 200 api.add_resource(Product, \\"/product/<string:name>\\") api.add_resource(ProductList, \\"/products\\") if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python class and functions to read data from a SQL database.","completion":"import sqlite3 class SQLReader(): def __init__(self, db_name): self.db_name = db_name self.connection = sqlite3.connect(dB_name) def execute_query(self, query): cursor = self.connection.cursor() cursor.execute(query) return cursor.fetchall() def close_connection(self): self.connection.close()"},{"prompt":"Create a Python script for calculating the area of a circle with radius r.","completion":"def calculate_area_circle(r): PI = 3.1415 area = PI * r**2 return area"},{"prompt":"Edit the given Python program so that it prints the current date, in the format YYYYmmdd. print(Hello!)","completion":"from datetime import date print(\\"Hello!\\") current_date = date.today().strftime(\\"%Y-%m-%d\\") print(\\"Today's date is\\", current_date)"},{"prompt":"Generate a Python dictionary with 10 keyvalue pairs, where the value should be an integer.","completion":"dictionary = { 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10 }"},{"prompt":"Generate a Python program to find the most frequent number in a given array arr = [10, 8, 8, 9, 10, 11, 12, 12, 11]","completion":"# find the most frequent number in a given array def get_most_frequent(arr): freq_map = dict() # build frequency map for num in arr: if num not in freq_map: freq_map[num] = 1 else: freq_map[num] += 1 # find the most frequent number max_freq = -1 most_frequent_num = 0 for key, value in freq_map.items(): if value > max_freq: max_freq = value most_frequent_num = key return most_frequent_num # Test arr = [10, 8, 8, 9, 10, 11, 12, 12, 11] most_frequent_num = get_most_frequent(arr) print(most_frequent_num) # Output: 11"},{"prompt":"ert missing keyword in this Python statement. for i in range()","completion":"for i in range(10):"},{"prompt":"Create a code in Python that determines the most common words in a given string? Hello world. This is a sentence.","completion":"\\"\\"\\" Algorithm to determine the most common words in a given string \\"\\"\\" def most_common_words(string): # split the string on whitespace words = string.split() # create a dictionary to store the count of each word word_count = {} # for each word, add it to the dictionary or increment the count for word in words: if word not in word_count: word_count[word] = 1 else: word_count[word] += 1 # convert the dictionary into a list of tuples (word, count) count_list = sorted(word_count.items(), key=lambda x: x[1], reverse=True) return count_list[0][0] if __name__ == '__main__': string = 'Hello world. This is a sentence.' print('The most common word is:', most_common_words(string))"},{"prompt":"Write a Python program to print out a rectangular pattern from inputted data. D O G S U","completion":"def print_pattern(data): words = data.split(\\" \\") max_length = 0 for word in words: if len(word) > max_length: max_length = len(word) for i in range(max_length): line = \\"\\" for word in words: if i < len(word): line += word[i] + \\" \\" else: line += \\" \\" print(line) result = print_pattern(\\"D O G S U\\")"},{"prompt":"Create a Python program to find the minimum number of steps required to make all array elements equal. arr = [2, 3, 6, 8]","completion":"def min_steps(arr): min_step = 0 min_val = min(arr) for i in range(len(arr)): min_step += arr[i] - min_val return min_step"},{"prompt":"Write a python program to compute the GCD of two numbers.","completion":"def gcd(a,b): if b == 0: return a else: return gcd(b, a % b) a = 10 b = 15 print(gcd(a, b))"},{"prompt":"Create a Python program that takes in a list of strings, sorts them, and then prints each string in sorted order. [banana, apple, orange, pear]","completion":"def sortStrings(arr): arr.sort() for string in arr: print(string) #Test arr = [\\"banana\\", \\"apple\\", \\"orange\\", \\"pear\\"] sortStrings(arr) # Outputs: apple banana orange pear"},{"prompt":"Create an algorithm in Python that finds a 'magic number' in an array. A magic number is an integer in the array that is strictly greater than the number of elements before it in the array. [1, 2, 5, 7, 9, 10]","completion":"def find_magic_number(a): m = -1 for i in range(len(a)): if a[i] > i: m = a[i] break return m print(find_magic_number([1, 2, 5, 7, 9, 10])) # 7"},{"prompt":"Create a function in Python that takes a list of strings and a value, and returns a new list of the strings with the value preprended to each string. List = [one, two, three] Value = STR","completion":"def prepend_list(List, Value): return [Value + Value for Value in List] List = [\\"one\\", \\"two\\", \\"three\\"] Value = \\"STR-\\" print (prepend_list(List, Value)) # Output: ['STR-one', 'STR-two', 'STR-three']"},{"prompt":"Write a Python web crawler that fetches all the URLs from a given website and stores them in a list. https://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.example.com\\" links = [] r = requests.get(url) soup = BeautifulSoup(r.text, \\"html.parser\\") for link in soup.find_all(\\"a\\"): links.append(link.get(\\"href\\")) print(links)"},{"prompt":"Create a Python script to generate random passwords. Not applicable","completion":"import random import string def generate_password(length): characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(characters) for _ in range(length)) length = int(input('Enter password length: ')) password = generate_password(length) print(password)"},{"prompt":"Create a Python program to print the numbers from 1 to 10 using a for loop. Not applicable","completion":"for i in range(1,11): print(i)"},{"prompt":"Create a python script to remove all the vowels from the given string. string = Hello World!","completion":"import re def remove_vowels(string): \\"\\"\\"Remove all the vowels from the given string.\\"\\"\\" return re.sub(r'[aeiouAEIOU]', '', string) # Usage Example string = \\"Hello World!\\" removed_vowels = remove_vowels(string) print(removed_vowels) # Hll Wrld!"},{"prompt":"Devise an algorithm in Python that takes an array and returns a histogram of the occurrences of each element in the array. [1, 2, 1, 2, 3, 1, 3, 3]","completion":"def histogram(arr): hist = {} for num in arr: if num in hist: hist[num] += 1 else: hist[num] = 1 return hist"},{"prompt":"Write a Python program which takes a list as input, finds 3 elements in the list which sum closest to 0 and prints their indices. [1, 12, 7, 3, 5, 2, 23]","completion":"def find_3sum_closest_to_0(nums): min_sum = float('inf') min_indices = () for i, num_1 in enumerate(nums): for j, num_2 in enumerate(nums[i+1:]): for k, num_3 in enumerate(nums[j+i+2:]): current_sum = num_1 + num_2 + num_3 if abs(current_sum) < abs(min_sum): min_sum = current_sum min_indices = (i, j+i+1, k+j+i+2) print(min_indices) find_3sum_closest_to_0(nums)"},{"prompt":"The given code is a Python script that defines a management command called run. This command executes a standalone Python script after setting up the Django environment. To use this command, run python manage.py run scriptname [args ...] where scriptname is the name of the Python script you want to run and [args ...] are any command line arguments you want to pass to the script. The script will see the modified values of sys.argv, __name__, and __file__ as if it had been called directly.","completion":"# -*- coding: UTF-8 -*- # Copyright 2012-2013 by Luc Saffre. # License: BSD, see LICENSE for more details. \\"\\"\\" .. management_command:: run Execute a standalone Python script after having set up the Django environment. Also modify \`sys.args\`, \`__file__\` and \`__name__\` so that the invoked script sees them as if it had been called directly. This is yet another answer to the frequently asked Django question about how to run standalone Django scripts (\`[1] <http://stackoverflow.com/questions/4847469/use-django-from-python-manage-py-shell-to-python-script>\`__, \`[2] <http://www.b-list.org/weblog/2007/sep/22/standalone-django-scripts/>\`__). It is almost the same as redirecting stdin of Django's \`\`shell\`\` command (i.e. doing \`\`python manage.py shell < myscript.py\`\`), but with the possibility of using command line arguments and without the disturbing messages from the interactive console. For example if you have a file \`myscript.py\` with the following content... :: from myapp.models import Partner print Partner.objects.all() ... then you can run this script using:: python manage.py run myscript.py [<Partner: Rumma & Ko OÜ>, ... <Partner: Charlier Ulrike>, '...(remaining elements truncated)...'] \\"\\"\\" from __future__ import unicode_literals import sys from django.core.management.base import BaseCommand, CommandError class Command(BaseCommand): help = __doc__ args = \\"scriptname [args ...]\\" def handle(self, *args, **options): if len(args) == 0: raise CommandError(\\"I need at least one argument.\\") fn = args[0] sys.argv = sys.argv[2:] globals()['__name__'] = '__main__' globals()['__file__'] = fn execfile(fn, globals()) #~ execfile(fn,{})"},{"prompt":"Write a python code to sort the given array of numbers in ascending order. [3, 5, 1, 6, 9, 4]","completion":"\\"\\"\\" Sort array of numbers in ascending order \\"\\"\\" def sort_in_ascending(arr): arr.sort() return arr if __name__==\\"__main__\\": arr = [3, 5, 1, 6, 9, 4] sorted_arr = sort_in_ascending(arr) print(\\"Sorted array in ascending order is \\"+str(sorted_arr))"},{"prompt":"Write a function in Python to generate an email address with a given name and domain. name = 'John Smith' domain = 'example.com'","completion":"def generate_email(name, domain): '''Generates an email address using the given name and domain.''' name_parts = name.lower().split(' ') email_name = '.'.join(name_parts) return email_name + '@' + domain"},{"prompt":"Create a Python function that prints a given string n times. string: Hello World!! N: 5","completion":"def repeatString(string, n): for i in range(n): print(string, end = \\"\\") # Driver Code string = \\"Hello World!!\\" n = 5 repeatString(string, n)"},{"prompt":"Create a machine learning model in Python that can classify whether an email is spam or not. Not applicable","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Load the dataset data=pd.read_csv(\\"data.csv\\") # Extract the features and labels features = data.iloc[:, :-1].values labels = data.iloc[:, -1].values # splitting of training and testing data X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size = 0.2, random_state = 0) # Feature extraction vect = CountVectorizer() X_train_dtm = vect.fit_transform(X_train) X_test_dtm = vect.transform(X_test) # Building and training the model model = LogisticRegression() model.fit(X_train_dtm,y_train) # Predictions predictions = model.predict(X_test_dtm) # Evaluating the model print('accuracy score:', accuracy_score(y_test, predictions)*100)"},{"prompt":"Translate the following pseudocode into Python: IF number > 0 Print positive ELSE Print negative","completion":"if number > 0: print(\\"positive\\") else: print(\\"negative\\")"},{"prompt":"Design a basic class in Python called Dog and create a constructor method.","completion":"class Dog: def __init__(self, name, age, weight): self.name = name self.age = age self.weight = weight # Sample call dog = Dog(\\"Fido\\", 2, 40)"},{"prompt":"Create a web crawler in Python to find a specific keyword on webpages. keyword = python","completion":"import urllib.request from bs4 import BeautifulSoup # target url url = 'https://www.example.com/' # create request and obtain html page = urllib.request.urlopen(url) html_doc = page.read() soup = BeautifulSoup(html_doc, 'html.parser') keywords = soup.find_all(string = lambda text: keyword in text) # print all sites containing the given keyword for keyword in keywords: print(keyword)"},{"prompt":"Transform the code snippet into a Python class. def multiply(x, y): return x * y","completion":"class Calculator: def __init__(self): pass def multiply(self, x, y): return x * y"},{"prompt":"Test if a given number is a Prime or not using Python. number = 32","completion":"if number<=1: print(\\"Number is not a prime number.\\") for i in range(2,int(number**0.5)+1): if(number % i == 0): print(\\"Number is not a prime number.\\") break else: print(\\"Number is a prime number.\\")"},{"prompt":"Create a Python program to check if a triangle is valid or not with the given values for its three sides. a = 2 b = 2 c = 3","completion":"def is_valid_triangle(a, b, c): # triangle should have 3 sides if a + b <= c or a + c <= b or b + c <= a: return False # sum of any two side should always be greater than third side if a + b > c and a + c > b and b + c > a: return True return False is_valid_triangle(2, 2, 3)"},{"prompt":"Design and implement a Python class that implements a basic stack. Not applicable","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[-1] def is_empty(self): return self.items == [] def size(self): return len(self.items)"},{"prompt":"Write a Python program to detect the most frequently used words in a given set of HTML documents. <html> <head> <title>Example</title> </head> <body> <p>This is some text containing words like cat, dog and mouse.</p> <p>This is a different paragraph with additional words like apple and banana.</p> </body> </html>","completion":"# imports import re import string from collections import Counter # read the html file html text = \\"\\" with open('example.html', 'r') as f: html_text = f.read() # remove punctuation from the html file for char in string.punctuation: html_text = html_text.replace(char, \\"\\") # split file into words words = html_text.split() # count the occurrence of each word word_counts = Counter(words) # print the most frequent word print(\\"Most frequent words: \\") for word in word_counts.most_common(): print(word[0])"},{"prompt":"Develop a Python program to generate all the even numbers between two given numbers.","completion":"def generateEvenNumber(start, end): for num in range(start, end+ 1): if num % 2 == 0: yield num evens = [] start = 1 end = 10 for even in generateEvenNumber(start, end): evens.append(even) print(evens)"},{"prompt":"Compose a regular expression in Python for validating email addresses.","completion":"import re def validate_email(email): regex = r\\"^[a-z0-9]+[._]?[a-z0-9]+[@]w+[.]w{2,3}\\" if re.search(regex, email): print(\\"Valid Email\\") else: print(\\"Invalid Email\\")"},{"prompt":"Create a Python script to filter a list and return all elements which are divisible by a given number (i.e. create a filter function). num_list = [1, 2, 3, 4, 5, 6] divisor = 2","completion":"def filter_list(num_list, divisor): return list(filter(lambda n: n % divisor == 0, num_list)) num_list = [1, 2, 3, 4, 5, 6] divisor = 2 divisible_nums = filter_list(num_list, divisor) print(divisible_nums) # [2, 4, 6]"},{"prompt":"Write a Python program to convert a binary number to decimal.","completion":"def bin_to_dec(binary): decimal, i, n = 0, 0, 0 while(binary != 0): dec = binary % 10 decimal = decimal + dec * pow(2, i) binary = binary//10 i += 1 return decimal"},{"prompt":"Edit the code below to print the output using the Python format() method. number1 = 2 number2 = 3 print('The sum of the numbers is ' + number1 + number2)","completion":"number1 = 2 number2 = 3 print('The sum of the numbers is {}'.format(number1 + number2))"},{"prompt":"What is the most efficient way to find all the prime numbers between 1 and 100 in Python?","completion":"def find_primes(n): numbers = [True] * (n + 1) numbers[0] = False numbers[1] = False for i in range(2, n + 1): if numbers[i] == True: for j in range(2 * i, n + 1, i): numbers[j] = False primes = [] for i in range(2, n + 1): if numbers[i] == True: primes.append(i) return primes print(find_primes(100))"},{"prompt":"Create a python function to count the number of unique elements from a given list. arr = [1, 4, 2, 1, 5, 4, 3]","completion":"def count_unique_elements(arr): unique_elements = set(arr) return len(unique_elements) if __name__ == '__main__': arr = [1, 4, 2, 1, 5, 4, 3] print(count_unique_elements(arr))"},{"prompt":"Produce an actionable item for the following task. Create a web applicatio","completion":"Create a web application using HTML, CSS, and JavaScript. Design the interface and develop the functionality of the application. Implement backend features using a server-side language such as Python or Node.js."},{"prompt":"Can you write a segment of code in Python that sets a variable equal to a random integer between 1 and 10?","completion":"import random my_random_number = random.randint(1,10)"},{"prompt":"Write a python program that sums up all the values from a list of dictionaries data = [{'key1':1, 'key2':2}, {'key1':2, 'key2':5}]","completion":"def sum_dictionaries(data): total = 0 for dic in data: total += sum(dic.values()) return total"},{"prompt":"Generate a code snippet to find the duplicate words in a string. Python is a programming language programming used widely","completion":"s = \\"Python is a programming language programming used widely\\" words = s.split(' ') duplicate_words = [] for i in range(len(words)): for j in range(i + 1, len(words)): if words[i] == words[j]: duplicate_words.append(words[i]) print(duplicate_words)"},{"prompt":"Using Python, generate a program to count the number of words in a given sentence. given_sentence = This is a given sentence","completion":"def count_words(given_sentence): return(len(given_sentence.split())) given_sentence = \\"This is a given sentence\\" word_count = count_words(given_sentence) print(\\"Number of words in given sentence is: \\", word_count)"},{"prompt":"List three popular web frameworks used in Python.","completion":"Popular Python web frameworks include Flask, Django and Pyramid."},{"prompt":"Create a Python script to check the validity of a given password string","completion":"def is_valid_password(password): if len(password) < 8: return False has_uppercase = False has_lowercase = False has_digit = False for i in range(len(password)): ch = password[i] if ch.isupper(): has_uppercase = True elif ch.islower(): has_lowercase = True elif ch.isdigit(): has_digit = True if has_uppercase and has_lowercase and has_digit: return True return False"},{"prompt":"Compile a Python program that takes a given list and returns a dictionary with the list elements as keys and their frequencies as values. [apple, orange, banana, apple, apple]","completion":"def get_frequencies(arr): frequency_dict = {} for item in arr: if item in frequency_dict: frequency_dict[item] += 1 else: frequency_dict[item] = 1 return frequency_dict"},{"prompt":"Develop a function in Python that takes in two strings and returns a boolean value indicating if the two strings are anagrams of each other. Not applicable","completion":"def is_anagram(str1, str2): if sorted(str1) == sorted(str2): return True else: return False if __name__ == '__main__': assert is_anagram('abcd', 'dcba') == True assert is_anagram('abcd', 'abdc') == False"},{"prompt":"Generate Python code for a random walk algorithm which calculates and returns the root mean squared displacement (RMSD).","completion":"import random def random_walk_algo(steps): x, y = 0, 0 for _ in range(steps): (dx, dy) = random.choice([(0, 1), (0, -1), (1, 0), (-1, 0)]) x += dx y += dy return (x,y) def rmsd(p1, p2): x1, y1 = p1 x2, y2 = p2 return ((x1 - x2)**2 + (y1 - y2)**2)**0.5 steps = 200 point1 = random_walk_algo(steps) point2 = random_walk_algo(steps) rmsd_res = rmsd(point1, point2) print('Root mean squared displacement = {}'.format(rmsd_res))"},{"prompt":"an you provide a python for loop that prints out the product of two lists? list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"list1 = [1, 2, 3] list2 = [4, 5, 6] for i in range(len(list1)): product = list1[i] * list2[i] print(product)"},{"prompt":"Create a function in Python that takes a string as input and replaces the character at a given index with the character '*'. Input string: Hello world Index: 3","completion":"def replace_character(string, index): new_string = \\"\\" for i in range(len(string)): if i == index: new_string += \\"*\\" else: new_string += string[i] return new_string print(replace_character(\\"Hello world\\", 3)) # Output: Hel*lo world"},{"prompt":"Using Python, create a function which will take an input string and return a list containing every other word from the string, beginning with the first word. This is a sentence for demonstration.","completion":"def everyOtherWord(in_string): word_list = in_string.split() out_list = [] for i in range(len(word_list)): # get every other word starting with the first one. if i % 2 == 0: out_list.append(word_list[i]) return out_list sentence = \\"This is a sentence for demonstration.\\" result = everyOtherWord(sentence) print(result) # Output - [\\"This\\", \\"a\\", \\"for\\"]"},{"prompt":"Generate a code snippet that implements the linear search algorithm in Python","completion":"def linear_search(array, element): for i in range(len(array)): if array[i] == element: return i return -1"},{"prompt":"Design a class in Python to represent a collection of data points.","completion":"class DataPointCollection: def __init__(self, data_points=[]): self.data_points = data_points def add_data_point(self, data_point): self.data_points.append(data_point) def get_data_points(self): return self.data_points"},{"prompt":"Write a Python program that implements a search algorithm on a given list of numbers. numbers = [2, 8, 9, 5, 15, 12, 4] key = 12","completion":"def linearSearch(numbers, key): for i in range(len(numbers)): if numbers[i] == key: return i return -1 numbers = [2, 8, 9, 5, 15, 12, 4] key = 12 index = linearSearch(numbers, key) if index == -1: print(\\"Element not found\\") else: print(\\"Element found at index\\", index) # output: Element found at index 5"},{"prompt":"Create a program in Python to perform web scraping using the BeautifulSoup module. URL: https://en.wikipedia.org/wiki/Python_(programming_language)","completion":"import requests from bs4 import BeautifulSoup # Get the webpage url = 'https://en.wikipedia.org/wiki/Python_(programming_language)' response = requests.get(url) # Create the soup soup = BeautifulSoup(response.text, 'html.parser') # Extract the text text = soup.get_text() # Output the text print(text)"},{"prompt":"Generate a python code to concatenate two strings.","completion":"def concat(s1, s2): return s1 + s2"},{"prompt":"What is the most efficient way to implement a priority queue data structure in Python?","completion":"import heapq class PriorityQueue: def __init__(self): self.heap = [] self.count = 0 def push(self, item, priority): entry = (priority, self.count, item) heapq.heappush(self.heap, entry) self.count += 1 def pop(self): (_, _, item) = heapq.heappop(self.heap) return item def is_empty(self): return len(self.heap) == 0"},{"prompt":"Create a Python program that will print the current date and time in the following format:","completion":"import datetime date = datetime.datetime.now() print(\\"{:0>2}/{:0>2}/{} {:0>2}:{:0>2}\\".format(date.day, date.month, date.year, date.hour, date.minute))"},{"prompt":"Write a Python class that takes two parameters and calculates the addition and multiplication of the two numbers and returns the result.","completion":"class Calculate: def __init__(self, a, b): self.a = a self.b = b def add(self): return self.a+self.b def multiply(self): return self.a*self.b calc = Calculate(3,4) add = calc.add() multiply = calc.multiply() print(\\"Addition result: {}\\".format(add)) print(\\"Multiplication result: {}\\".format(multiply))"},{"prompt":"Write a Python code to traverse a binary tree in depthfirst search (DFS)","completion":"def dfs(root): stack = [root] while stack: node = stack.pop(-1) print(node.data) if node.right: stack.append(node.right) if node.left: stack.append(node.left)"},{"prompt":"Generate a python function to find the maximum of two numbers 4, 5","completion":"def get_max(a,b): if a > b: return a else: return b # main program a = 4 b = 5 result = get_max(a,b) print(result)"},{"prompt":"Create a Neural Network model in Python that classifies MNIST numbers.","completion":"import keras from keras.datasets import mnist from keras.layers import Dense, Activation from keras.models import Sequential (x_train, y_train), (x_test, y_test) = mnist.load_data() x_train = x_train.reshape(60000, 784) x_test = x_test.reshape(10000, 784) x_train = x_train.astype('float32') x_test = x_test.astype('float32') x_train /= 255 x_test /= 255 # Initializing the model model = Sequential() # Input and hidden Layer model.add(Dense(units=32, input_shape=(784, ))) model.add(Activation('relu')) # Output Layer model.add(Dense(units=10)) model.add(Activation('softmax')) # Compiling the model model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy']) # Train the model history = model.fit(x_train, y_train, epochs=25, batch_size=200, validation_data=(x_test ,y_test )) # Evaluate the model scores = model.evaluate(x_test, y_test)"},{"prompt":"Write a queue data structure from scratch using Python.","completion":"class Queue: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def enqueue(self, item): self.items.insert(0,item) def dequeue(self): return self.items.pop() def size(self): return len(self.items)"},{"prompt":"Create a Python program to create a game of Rock, Paper, Scissors. The program should have functions to set the user's choice, randomly generate the computer's choice, and compare the user's choice to the computer's choice to decide the winner. Not applicable","completion":"import random def set_choice(user_choice): return user_choice def generate_computer_choice(): computer_choice = random.choice(['Rock', 'Paper', 'Scissor']) return computer_choice def compare_choices(user_choice, computer_choice): if user_choice == computer_choice: print('It is a tie!') elif user_choice == 'Rock': if computer_choice == 'Paper': print('You lose!') else: print('You win!') elif user_choice == 'Paper': if computer_choice == 'Scissor': print('You lose!') else: print('You win!') elif user_choice == 'Scissor': if computer_choice == 'Rock': print('You lose!') else: print('You win!') else: print('Please enter a valid choice!') if __name__ == '__main__': user_choice = input('Please enter your choice: ') user_choice = set_choice(user_choice) computer_choice = generate_computer_choice() print(f'Computer chose: {computer_choice}') compare_choices(user_choice, computer_choice)"},{"prompt":"Optimize an algorithm written in Python that sums up the numbers in an array. [2, 4, 6, 8]","completion":"def sum_numbers(arr): result = 0 for num in arr: result += num return result arr = [2, 4, 6, 8] print(sum_numbers(arr)) # optimized version def optimised_sum_numbers(arr): return sum(arr) print(optimised_sum_numbers(arr))"},{"prompt":"Create a Python class that uses a custom exception for handling incorrect data types. Not applicable","completion":"class CustomExceptionHandling: class DataTypeException(Exception): def __init__(self, message): super().__init__(message) def check(self, value): if type(value) != str: raise self.DataTypeException(\\"Invalid data type\\")"},{"prompt":"Create a web scraper in Python that finds the title and author information from a given list of book URLs. URLs: https://www.amazon.com/CupStarsNovelAlexAwardsebook/dp/B07PWNWS3G https://www.amazon.com/LifeWillDarkNovel/dp/B07KY7P1SR","completion":"import requests from bs4 import BeautifulSoup urls = [ 'https://www.amazon.com/Cup-Stars-Novel-Alex-Awards-ebook/dp/B07PWNWS3G', 'https://www.amazon.com/Life-Will-Dark-Novel/dp/B07KY7P1SR' ] for url in urls: page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') title = soup.find(id=\\"productTitle\\").get_text() author = soup.find(class_=\\"author notFaded\\").get_text() print('Title: ', title) print('Author: ', author)"},{"prompt":"Create a simple linear regression model in Python using two given datasets. The dataset 1 contains the independent variables x1 and x2 and the dataset 2 contains the corresponding dependent variable y.","completion":"import numpy as np import matplotlib.pyplot as plt # Load the data x1 = np.loadtxt(\\"dataset1.txt\\") x2 = np.loadtxt(\\"dataset1.txt\\") y = np.loadtxt(\\"dataset2.txt\\") # Fit the linear model coefficients = np.polyfit(x1,x2,2) # Plot the linear regression line plt.scatter(x1, x2) plt.plot(x1, np.polyval(coefficients, x1), 'r') plt.show()"},{"prompt":"Create an algorithm to detect plagiarism in text using natural language processing in Python. Not applicable","completion":"import nltk from sklearn.feature_extraction.text import TfidfVectorizer # Function to tokenize text into words def tokenize_text(text): tokens = nltk.word_tokenize(text) return tokens # Create TF-IDF vectorizer vectorizer = TfidfVectorizer(tokenizer=tokenize_text) # Calculate cosine similarity score between two texts def calculate_similarity(text1, text2): vector = vectorizer.fit_transform([text1, text2]) return ((vector * vector.T).A)[0,1] # Detect plagiarism based on similarity score def detect_plagiarism(text1, text2, similarity_threshold=0.8): similarity_score = calculate_similarity(text1, text2) if similarity_score > similarity_threshold: return True else: return False"},{"prompt":"Create a Django project for a ecommerce website with basic user authentication. Not applicable","completion":"# Setup Virtual Environment and Django mkdir my_ecommerce_site cd my_ecommerce_site python3 -m venv venv source venv/bin/activate pip install django # Create the Project django-admin startproject ecommerce # Create the User app and database cd ecommerce python manage.py startapp users python manage.py migrate # Add 'users' to INSTALLED_APPS in settings.py INSTALLED_APPS = [ 'users.apps.UsersConfig', 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages' ] # Create and register the user model # models.py from django.db import models from django.contrib.auth.models import AbstractUser class CustomUser(AbstractUser): username = models.CharField(max_length=20, unique=True) phone_number = models.CharField(max_length=20,blank=True) class Meta: db_table = 'users' # admin.py from django.contrib import admin from .models import CustomUser admin.site.register(CustomUser) # Update the default User model # settings.py AUTH_USER_MODEL = 'users.CustomUser' # Add users app URLs # urls.py from django.urls import path, include urlpatterns = [ path('users/', include('users.urls')), ] # Create users app URLs # urls.py from django.urls import path from .views import register, login, logout urlpatterns = [ path('register/', register, name=\\"register\\"), path('login/', login, name=\\"login\\"), path('logout/', logout, name=\\"logout\\"), ] # Create views # views.py from django.shortcuts import render, redirect from django.contrib.auth import authenticate, login, logout from django.contrib.auth.forms import UserCreationForm def register(request): if request.method == 'POST': form = UserCreationForm(request.POST) if form.is_valid(): form.save() email = form.cleaned_data.get('email') raw_password = form.cleaned_data.get('password1') user = authenticate(email=email, password=raw_password) login(request, user) return redirect('home') else: form = UserCreationForm() return render(request, 'register.html', {'form': form}) def login(request): if request.method == 'POST': email = request.POST.get('email') raw_password = request.POST.get('password') user = authenticate(email=email, password=raw_password) if user is not None: login(request, user) return redirect('home') else: return render(request, 'login.html') def logout(request): logout(request) return redirect('login')"},{"prompt":"Create a Python program to convert a list into a dictionary. my_list = [(apple, fruit), (carrot, vegetable)]","completion":"# Function to convert list to dictionary def list_to_dict(my_list): \\"\\"\\"Converts a list to a dictionary.\\"\\"\\" my_dict = {} for item in my_list: my_dict[item[0]] = item[1] return my_dict if __name__ == '__main__': # Sample list my_list = [(\\"apple\\", \\"fruit\\"), (\\"carrot\\", \\"vegetable\\")] # Convert list to dictionary my_dict = list_to_dict(my_list) # Print dictionary print(my_dict)"},{"prompt":"Generate code in Python to find all unique elements in a list. [1, 2, 5, 2, 4, 1]","completion":"original_list = [1, 2, 5, 2, 4, 1] unique_list = [] for item in original_list: if item not in unique_list: unique_list.append(item) print(unique_list)"},{"prompt":"Combine two strings using Python. string1=Hello string2=World","completion":"string1 = \\"Hello \\" string2 = \\"World\\" new_str = string1 + string2 print(new_str)"},{"prompt":"Develop an AIassisted chatbot in Python to respond to customer inquiries. Not applicable","completion":"import tensorflow as tf import nltk from tensorflow.keras.layers import Dense, Input, Embedding, LSTM from tensorflow.keras.models import Model inputs = Input(shape=(None,)) # shape is the length of the sentences embedding = Embedding(input_dim=1000, output_dim=32)(inputs) lstm_1 = LSTM(50, return_state=True,name=\\"LSTM_1\\") outputs, h, c = lstm_1(embedding) # h and c are hidden states dense_1 = Dense(15, activation='relu')(outputs) dense_2 = Dense(1)(dense_1) model = Model(inputs=inputs, outputs=dense_2) model.summary() nltk.download('punkt') sentences = [['Hi', 'How are you?'], ['I am good', 'That is awesome'], ['Thank you']] # Tokenize Sentences tokenized_sentences = [nltk.word_tokenize(sentence) for sentence in sentences] # Generate Vocabulary and Embedding vocab = set([word for sentence in sentences for word in sentence]) word_2_idx = {word: idx for idx, word in enumerate(vocab)} train_data = [[word_2_idx[word] for word in sentence] for sentence in tokenized_sentences] model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) model.fit(train_data, labels, epochs=50, batch_size=32)"},{"prompt":"Generate a correct python code for implementing a stack","completion":"class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"prompt":"Create a python program to simulate basic Twitter functionality","completion":"def post_tweet(username, tweet): tweet_db.addTweet(username, tweet) def get_tweets(username): return tweet_db.getTweets(username) def delete_tweet(username, tweetId): tweet_db.deleteTweet(username, tweetId)"},{"prompt":"Create a Python script to generate a random password with an 8 character length. Not applicable","completion":"import string import random def generate_password(): chars = string.ascii_letters + string.digits + string.punctuation password = random.choice(string.ascii_lowercase) password += random.choice(string.ascii_uppercase) password += random.choice(string.digits) password += random.choice(string.punctuation) for i in range(4): password += random.choice(chars) passwordList = list(password) random.SystemRandom().shuffle(passwordList) password = ''.join(passwordList) return password"},{"prompt":"Write a Python program to generate a random string of fixed length of 10 characters, which contains only lowercase letters and numbers.","completion":"import string import random def generate_random_string(length): chars = string.ascii_lowercase + string.digits return ''.join(random.choice(chars) for _ in range(length)) result = generate_random_string(10) print(result) # Output : 'n5z5hp5d5v'"},{"prompt":"Develop a mechanism in Python that uses a given dataset to predict the category a sample belongs to Dataset: [{'name': 'abc', 'category': 'A'}, {'name': 'def', 'category': 'B'}, {'name': 'ghi', 'category': 'A'}, {'name': 'jkl', 'category': 'B'}] Sample: 'mno'","completion":"def predict_category(data, sample): if not data: return None # Count the number of samples in each category categories = {} for d in data: if d['category'] in categories: categories[d['category']] += 1 else: categories[d['category']] = 1 # Find the majority category majority_cat = None majority_cat_count = 0 for cat, count in categories.items(): if count > majority_cat_count: majority_cat = cat majority_cat_count = count # Predict the sample category as the majority category return majority_cat"},{"prompt":"Design a machine learning algorithm in Python to identify the most important features from a dataset.","completion":"def find_important_features(X, y): \\"\\"\\"Finds the most important features for a given dataset. Args: X(ndarray): The independent variables. y(ndarray): The dependent variable. Returns: important_features(list): The list of most important features. \\"\\"\\" # Initializing list with default values important_features = [] # Initializing feature importance score feature_importance_scores = [0] * X.shape[1] # Iterating over all the features for i in range(X.shape[1]): # Calculating the mutual information score score = mutual_info_score(X[:, i], y) # Updating feature importance scores feature_importance_scores[i] += score # Sorting the feature importance scores sorted_scores_idx = list(reversed(np.argsort(feature_importance_scores))) # Retrieving top-k features for idx in sorted_scores_idx: important_features.append(idx) return important_features"},{"prompt":"Generate a Python program to calculate the Fibonacci sequence up to a certain number. num = 10","completion":"def fibonacci_sequence(num): result = [0, 1] if num < 0: return None elif num == 0 or num == 1: return 0 elif num == 2: return result else: for i in range(2,num): next_num = result[i-1] + result[i-2] result.append(next_num) return result print(fibonacci_sequence(num))"},{"prompt":"Construct a program, in Python code, to identify all the anagrams of a given word word = eat","completion":"def find_anagrams(word): word_list = list(word) anagrams = [] for i in range(len(word_list)): for j in range(i+1,len(word_list)+1): anagram = ''.join(word_list[i:j]) if anagram != '' and anagram != word and anagram not in anagrams: anagrams.append(anagram) return anagrams"},{"prompt":"Convert a Javascript function to Python. function add(a, b) { return a + b; }","completion":"def add(a, b): return a + b"},{"prompt":"Deploy a Python function to AWS Lambda that sends an SMS with Twilio when invoked. Twilio account SID, Auth token, Twilio from number, Twilio to number","completion":"import json from twilio.rest import Client def lambda_handler(event, context): account_sid = event['AccountSID'] auth_token = event['AuthToken'] from_number = event['FromNumber'] to_number = event['ToNumber'] message_body = event['MessageBody'] client = Client(account_sid, auth_token) client.messages.create( body=message_body, from_=from_number, to=to_number ) return json.dumps({ \\"message\\": \\"Successfully sent sms\\" })"},{"prompt":"Create a class in Python which implements a binary search tree for integers and a method to print the results. Not applicable","completion":"class Node: def __init__(self,value): self.left = None self.right = None self.value = value class BinarySearchTree: def __init__(self): self.root = None # Insert nodes to the binary search tree. def insert(self,value): new_node = Node(value) if self.root == None: self.root = new_node return else: current_node = self.root while True: if value < current_node.value: if current_node.left == None: current_node.left = new_node return current_node = current_node.left else: if current_node.right == None: current_node.right = new_node return current_node = current_node.right def printTree(self, node): if node != None: self.printTree(node.right) print(node.value) self.printTree(node.left) # Test code bst = BinarySearchTree() nums = [10,4,2,15,14,16] for num in nums: bst.insert(num) bst.printTree(bst.root)"},{"prompt":"Write a Python program to find all the unique numbers in a list. [1, 2, 1, 3, 4, 5, 5, 1]","completion":"def unique_numbers(number_list): unique_numbers = [] for number in number_list: if number not in unique_numbers: unique_numbers.append(number) return unique_numbers print(unique_numbers([1, 2, 1, 3, 4, 5, 5, 1]))"},{"prompt":"Create a web scraper with Python that collects all the titles of posts from a website. https://example.com","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') post_titles = [title.text for title in soup.find_all('h2', class_='post-title')] for post_title in post_titles: print(post_title)"},{"prompt":"Create a for loop in Python to print numbers between 0 and 10.","completion":"for i in range(11): print(i)"},{"prompt":"Write a function in Python that takes a 2D array and a target value as input, and determines if the array contains the target value. [[3, 6, 2], [2, 3, 4], [1, 2, 5]], target = 4","completion":"def targetInArray(arr,target): for i in range(len(arr)): for j in range(len(arr[i])): if target == arr[i][j]: return True return False"},{"prompt":"Write a Python program to create a new list that contains the common elements of two other lists. [1, 2, 3, 4], [2, 4, 6, 8]","completion":"def common_elements(list1, list2): common_list = [] for element in list1: if element in list2: common_list.append(element) return common_list list1 = [1, 2, 3, 4] list2 = [2, 4, 6, 8] print(common_elements(list1, list2))"},{"prompt":"Create a class in Python that encapsulates the information of a given website, including the URL and other metadata such as the author, copyright, language etc.","completion":"class Website: def __init__(self, url, author, copyright, language): self.url = url self.author = author self.copyright = copyright self.language = language def get_url(self): return self.url def get_author(self): return self.author def get_copyright(self): return self.copyright def get_language(self): return self.language"},{"prompt":"Develop an algorithm in Python to optimize a given set of parameters for a given objective function. Objective function: f(x, y) = (x * y) + (y + x) Parameters: x, y","completion":"import numpy as np import scipy.optimize def objective(params): x = params[0] y = params[1] return (x * y) + (y + x) starting_point = np.array([1.0, 1.0]) res = scipy.optimize.minimize(objective, starting_point, method='nelder-mead', options={'xtol': 1e-8, 'disp': True}) print(res.x) # Optimal Values"},{"prompt":"Create a function in Python that takes an integer route x as input and returns all possible subsequences of length x. x = 2","completion":"def subsequences(x): subs = [] for i in range(1<<x): sub = [] for j in range(x): if (i & (1 << j)) > 0: sub.append(j) subs.append(sub) return subs"},{"prompt":"Write a code block in Python that checks if an input is an integer or not.","completion":"def is_int(n): try: int(n) return True except ValueError: return False"},{"prompt":"Visualize a dataset containing the exam scores of 3 classes (class A, B, and C) in the form of a bar chart using Matplotlib and Python. Class A: 85, 75, 95 Class B: 89, 73, 72 Class C: 82, 81, 89","completion":"import matplotlib.pyplot as plt class_A = [85, 75, 95] class_B = [89, 73, 72] class_C = [82, 81, 89] classes = ['Class A', 'Class B', 'Class C'] plt.bar(classes, [sum(class_A) / len(class_A), sum(class_B) / len(class_B), sum(class_C)/ len(class_C)]) plt.xlabel('Classes') plt.ylabel('Average Score') plt.title('Exam Scores') plt.show()"},{"prompt":"Create a dashboard using Python code to visualize the sales of a certain product. sample sales d","completion":"import pandas as pd import matplotlib.pyplot as plt # Read the sales data data = pd.read_csv('sales_data.csv') # Create a figure fig = plt.figure() # Create a bar chart ax = fig.add_subplot() ax.bar(data['date'], data['sales'], color='orange') # Set the x-axis and y-axis limits ax.set_xlim([min(data['date']), max(data['date'])]) ax.set_ylim([0, max(data['sales']) + 10]) # Set the title of the chart ax.set_title('Sales of a Product') # Display the chart plt.show()"},{"prompt":"Using the given dataset, create a clustering algorithm in Python for mission planning. Dataset: { 'mission_name': 'Space Mission', 'mission_details': { 'num_of_satellites': 5, 'target_region': 'South East Asia', 'mission_duration': 24 } }","completion":"\\"\\"\\" Clustering Algorithm for Mission Planning \\"\\"\\" import numpy as np def create_cluster_matrix(dataset): # Get required data num_satellites = dataset['mission_details']['num_of_satellites'] target_region = dataset['mission_details']['target_region'] mission_duration = dataset['mission_details']['mission_duration'] # Create the matrix matrix = np.zeros((num_satellites, mission_duration)) # Fill the matrix with the target region for i in range(num_satellites): matrix[i]= np.ones((1, mission_duration))*target_region return matrix if __name__ == '__main__': dataset = { 'mission_name': 'Space Mission', 'mission_details': { 'num_of_satellites': 5, 'target_region': 'South East Asia', 'mission_duration': 24 } } cluster_matrix = create_cluster_matrix(dataset) print(cluster_matrix)"},{"prompt":"Write a Python function to remove the nth occurrence of a given substring from the given string. string = This is a chance to practice python string manipulation skills substring = is n = 2","completion":"def remove_nth_occurrence(string, substring, n): count = 0 for i, ch in enumerate(string): if string[i:i+len(substring)] == substring: count += 1 if count == n: string = string[:i] + string[i+len(substring):] return string"},{"prompt":"Create a Python program that sorts the given array of numbers from smallest to largest using the bubble sort algorithm. arr = [3, 5, 1, 9, 6]","completion":"# function to perform bubble sort def bubble_sort(arr): # iterate over a range of the length of the array for i in range(len(arr)): # iterate over the array until the index is equal to the current # iteration of the first loop for j in range(0, len(arr)-i-1): # compare two adjacent elements # if the one on the left is greater than the one on the right, # swap them if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # driver code to test the above code arr = [3, 5, 1, 9, 6] bubble_sort(arr) # print the sorted array print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i], end=' ')"},{"prompt":"Generate a Python script using ScikitLearn for performing kmeans clustering on a given dataset. Dataset: The dataset consists of three features x1, x2 and x3.","completion":"import numpy as np from sklearn.cluster import KMeans data = np.array([[x1, x2, x3]]) #replace x1, x2 and x3 with the features in the dataset kmeans = KMeans(n_clusters=3).fit(data) clusters = kmeans.predict(data)"},{"prompt":"Generate a Python script for calculating the Fibonacci numbers.","completion":"def fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return fibonacci(n-1)+fibonacci(n-2) # Driver Program print(fibonacci(9))"},{"prompt":"You need to optimize a given Python code for improving speed. def find_corresponding_nums(nums1, nums2): result = [] for num1 in nums1: for num2 in nums2: if num1 == num2: result.append(num1) return resul","completion":"def find_corresponding_nums(nums1, nums2): result = [] seen = set(nums2) for num1 in nums1: if num1 in seen: result.append(num1) return result"},{"prompt":"Write a Python code snippet to print all numbers between 1 to 10 except 3 and 5.","completion":"for numb in range(1, 11): if numb == 3 or numb == 5: continue print(numb)"},{"prompt":"Write some python code that prints out the following information Student marks in a class: [{'name': 'John', 'mark': 75}, {'name': 'Alex', 'mark': 92}, {'name': 'Tiffany', 'mark': 83}, {'name': 'Eddie', 'mark': 67}]","completion":"student_scores = [{'name': 'John', 'mark': 75}, {'name': 'Alex', 'mark': 92}, {'name': 'Tiffany', 'mark': 83}, {'name': 'Eddie', 'mark': 67}] for student in student_scores: print(f'Name: {student[\\"name\\"]}, Mark: {student[\\"mark\\"]}')"},{"prompt":"Generate a code for automated deployment of an application on Amazon Web Services (AWS). Not applicable","completion":"# Necessary libraries import boto3 # Create an S3 bucket s3 = boto3.resource('s3') s3.create_bucket(Bucket='example-bucket') # Create an EC2 instance ec2 = boto3.resource('ec2') instance = ec2.create_instances( ImageId= 'ami-035be7bafff33b6b6', MinCount=1, MaxCount=1, KeyName='example-key', InstanceType='t2.micro') # Create a security group security_group = ec2.create_security_group( GroupName= 'example-sg', Description= 'example security group') # Add rules to the security group security_group.authorize_ingress( CidrIp='0.0.0.0/0', IpProtocol='-1', FromPort='-1', ToPort='-1') # Wait for the instance to start up ec2.Instance(instance[0].id).wait_until_running() # Install the necessary libraries ec2.Instance(instance[0].id).run_command( 'sudo apt-get install -y python') ec2.Instance(instance[0].id).run_command( 'sudo apt-get install -y apache2') # Write the relevant configuration files ec2.Instance(instance[0].id).run_command( 'sudo echo \\"Hello World\\" > /var/www/html/index.html') ec2.Instance(instance[0].id).run_command( 'sudo echo \\"Listen 80\\" > /etc/apache2/ports.conf') # Restart the service ec2.Instance(instance[0].id).run_command( 'sudo systemctl restart apache2')"},{"prompt":"Construct a Python program that tests if an input number is an Armstrong number","completion":"def is_armstrong_number(num): order = len(str(num)) sum = 0 temp = num while temp > 0: remainder = temp % 10 sum += remainder ** order temp //= 10 if sum == num: return True else: return False"},{"prompt":"Write a Python program to search a list of box ids for duplicates and return a list of all duplicated items. box_ids = [‘abc123’, ‘def456’, ‘ghi789’, ‘abc123’]","completion":"duplicates = [] for box_id in box_ids: if box_ids.count(box_id) > 1 and box_id not in duplicates: duplicates.append(box_id) print(duplicates)"},{"prompt":"Build a linear search algorithm with Python. arr = [3, 4, 10, 15, 23, 42]","completion":"def linear_search(arr, value): for i in range(len(arr)): if arr[i] == value: return i return -1 arr = [3, 4, 10, 15, 23, 42] value = 10 index = linear_search(arr, value) if index == -1: print('Value not found in array.') else: print('Value found at index ' + str(index) + '.')"},{"prompt":"Suggest the python code for detecting the position of a character in a string. String: Hello World! Character: !","completion":"def position_of_char(string, char): '''This function will detect the position of a character in a string.''' return string.index(char)"},{"prompt":"Create a logic gate simulation using a Python program Details of an OR gate","completion":"def or_gate(a, b): if a or b == 0: return 0 else: return 1"},{"prompt":"Write a Python script that normalizes given input strings. Hello, world ! How are you?","completion":"import re s = \\"Hello, world ! How are you?\\" s = re.sub(' +', ' ', s) print(s) # Output # 'Hello, world! How are you?'"},{"prompt":"Compute the sum of squares of all the numbers in a given range using a loop in Python. 2, 8","completion":"def sum_squares_in_range(start, end): sum = 0 for i in range(start, end+1): sum += i*i return sum result = sum_squares_in_range(2, 8) print(result)"},{"prompt":"Create a Python script for web scraping data from a website using the BeautifulSoup library. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = \\"<website url>\\" # Make request to website r = requests.get(url) # Get the HTML of the page html = r.text # Parse HTML using BeautifulSoup soup = BeautifulSoup(html, 'html.parser') # Extract desired info from the page data = soup.find_all('div', {'class': 'content'}) # Print the data print(data)"},{"prompt":"Write a Python program to compute the sum of two given integers, a and b.","completion":"def sum_ints(a, b): return a + b"},{"prompt":"Given a 2D array of integers, write a Python function that returns the sum of all values in the array. [[1, 2], [3, 4], [5, 6]]","completion":"def sum2dArray(arr): two_d_sum = 0 for sub_arr in arr: for elem in sub_arr: two_d_sum += elem return two_d_sum arr = [[1,2], [3,4], [5,6]] result = sum2dArray(arr) print(result) # 21"},{"prompt":"Write a Python program to calculate the sum of two given numbers. The two supplied numbers will be equal or one will be greater than the other. num1 = 3 num2 = 5","completion":"def sum_two_numbers(num1, num2): return num1 + num2 print(sum_two_numbers(num1, num2)) # Output: 8"},{"prompt":"Modify the code from the previous example to count the frequency of words in the string. string = 'Python is an interpreted, highlevel, generalpurpose programming language.'","completion":"def word_frequency(string): words = string.split() word_dict = {} for word in words: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 return word_dict frequency = word_frequency(string) print(frequency) # prints {'Python': 1, 'is': 1, 'an': 1, 'interpreted': 1, 'high-level': 1, 'general-purpose': 1, 'programming': 1, 'language.': 1}"},{"prompt":"Write a Python code to check whether an integer is divisible by 3 and 5.","completion":"def is_divisible_by_3_and_5(number): \\"\\"\\"This function checks whether a number is divisible by 3 and 5. Parameters: number (int): The number to be checked. Returns: True if the number is divisible by 3 and 5, False otherwise. \\"\\"\\" if (number % 3 == 0) and (number % 5 == 0): return True else: return False"},{"prompt":"Edit a Python module to include a function that adds two given numbers. The Python module contains the following code: def subtract(x, y): return x y","completion":"def subtract(x, y): return x - y def add(x, y): return x + y"},{"prompt":"Create a Python program that suggests a sentence given the last word typed by the user. Array of sample sentences: [the cat is cute, the dog is smart, the duck is noisy]","completion":"import random def suggest_sentence(lastWord): sentences = [\\"the cat is cute\\", \\"the dog is smart\\", \\"the duck is noisy\\"] suggestedSentences = [] for sentence in sentences: if sentence.split()[-1] == lastWord: suggestedSentences.append(sentence) return random.choice(suggestedSentences) suggestion = suggest_sentence(\\"cute\\")"},{"prompt":"Write a Python program to optimize the given code for speed and reduce memory usage. def func(a): result = [] for x in range(len(a)): result.append(a[x] + 5) return resul","completion":"def func(a): result = [x + 5 for x in a] return result"},{"prompt":"Create a function in Python that takes a number N and returns the sum of the first N odd numbers. N = 5","completion":"def sum_of_odds(N): return sum([i for i in range(1, 2*N + 1, 2)]) N = 5 print(sum_of_odds(N))"},{"prompt":"Optimize the existing Python program to reduce the maximum time complexity. def reverse_list(list_in): reversed_list = [] for item in list_in: reversed_list.insert(0, item) return reversed_list list_in = [1, 2, 3, 4] reverse_list(list_in)","completion":"def reverse_list(list_in): start = 0 end = len(list_in) - 1 while start < end: list_in[start], list_in[end] = list_in[end], list_in[start] start += 1 end -= 1 return list_in list_in = [1, 2, 3, 4] reverse_list(list_in)"},{"prompt":"Given two number arrays A and B, write a Python function to check if each element in A also exists in B A = [1,2,3], B = [2,3,4]","completion":"def check_equality(arr1, arr2): for num in arr1: if num not in arr2: return False return True A = [1, 2, 3] B = [2, 3, 4] result = check_equality(A, B) print(result)"},{"prompt":"Design a program in Python to delete an element from the give list. List: [1,2,3,4,5] Element to delete: 3","completion":"def delete_element(arr, element): new_arr = [i for i in arr if i!=element] return new_arr"},{"prompt":"Create a Python function to classify Tweets as positive or negative","completion":"def classify_tweet(tweet): # Create bag of words bag_of_words = tweet.split() # Filter out words in bag of words that are not in the classifier words filtered_bag_of_words = [word for word in bag_of_words if word in classifier_words] # Calculate the score score = sum(classifier_values[word] for word in filtered_bag_of_words) # Classify the tweet as positive or negative base on the score if score > 0: return 'positive' elif score < 0: return 'negative' else: return 'neutral'"},{"prompt":"Construct a Python program that fetches the top 10 news headlines from The New York Times.","completion":"import requests import json # Define endpoint endpoint = 'https://api.nytimes.com/svc/topstories/v2/home.json?' # Pass API key payload = {'api-key': 'INSERT-KEY-HERE'} # Make request to endpoint req = requests.get(endpoint, params=payload) # Parse the response data = json.loads(req.text) # Iterate over results and print headline for result in data['results'][:10]: print(result['title'])"},{"prompt":"mplement a function in Python that takes a presorted array of integers and a search target and determines if the target exists in the array. The presorted array is [ 1, 3, 5, 7, 9]. The target is 3.","completion":"def binarySearch(arr, x): start = 0 end = len(arr) - 1 while start <= end: mid = start + (end - start) // 2 if arr[mid] == x: return mid elif arr[mid] < x: start = mid + 1 else: end = mid - 1 return -1 arr = [ 1, 3, 5, 7, 9 ] result = binarySearch(arr, 3) if result != -1: print(\\"Element is present at index\\", str(result)) else: print(\\"Element is not present in array\\")"},{"prompt":"Classify a piece of code into an appropriate language. def f(x): return x * x","completion":"Python"},{"prompt":"Create a class in Python to store student details with the name and age data.","completion":"class Student: def __init__(self, name, age): self.name = name self.age = age"},{"prompt":"To classify a tweet into a positive, negative or neutral sentiment, develop a Python script that takes the text of a tweet as an input and returns the sentiment of the tweet.","completion":"import re import nltk def classify_sentiment(tweet_text): tokens = nltk.word_tokenize(tweet_text) sentiment_scores = 0 # Calculate sentiment score for token in tokens: if token in POSITIVE_WORDS: sentiment_scores += 1 elif token in NEGATIVE_WORDS: sentiment_scores -= 1 # Classify sentiment if sentiment_scores > 0: return \\"positive\\" elif sentiment_scores == 0: return \\"neutral\\" else: return \\"negative\\""},{"prompt":"Generate a list of strings in Python containing all possible combinations of letters a and b, with the length of each string being 5.","completion":"import itertools words = [''.join(i) for i in itertools.product('ab', repeat = 5)] print(words)"},{"prompt":"Come up with a Python program to aggregate a list of strings based on the number of character occurrences in each string. List of strings = [Apple, Orange, Banana, Pineapple]","completion":"from collections import defaultdict strings = [\\"Apple\\", \\"Orange\\", \\"Banana\\", \\"Pineapple\\"] dictionary = defaultdict(list) for string in strings: char_count = len(string) dictionary[char_count].append(string) print(dictionary)"},{"prompt":"Generate a code in Python that takes a string as input and removes duplicate characters from it St = DaSSmmoonnd","completion":"st = \\"DaSSmmoonnd\\" st_list = list(st) st_set = set(st_list) st_nodupes = ''.join(st_set) print(st_nodupes)"},{"prompt":"Design a Python program to find the difference between two provided times. The two times should be provided as strings in the format [HH:mm:ss]. time1 = 08:30:15 time2 = 10:20:20","completion":"from datetime import datetime def time_diff(time1, time2): t1 = datetime.strptime(time1, \\"%H:%M:%S\\") t2 = datetime.strptime(time2, \\"%H:%M:%S\\") return (t2 - t1).total_seconds() print(time_diff('08:30:15', '10:20:20')) // 7200.0"},{"prompt":"Create a program in Python which takes a string and an integer as input and prints the string the given number of times. String: Hello Integer: 3","completion":"string = \\"Hello\\" num = 3 for i in range(num): print(string)"},{"prompt":"mplement a function in Python to convert a decimal number to binary.","completion":"def decimalToBinary(num): # empty list to store the binary number binaryList = [] # if the number is 0, return 0 if num == 0: return [0] # loop until the number becomes 0 after division by 2 while num > 0: binaryList.append(num % 2) num //= 2 # Reverse the list binaryList = binaryList[::-1] return binaryList"},{"prompt":"Edit the following code to create a class in Python that represents a customer of a store. The class should include a class method calculate_total, which takes a list of prices and returns the total sum. class Customer: def __init__(self, name): self.name = name","completion":"class Customer: def __init__(self, name): self.name = name def calculate_total(self, prices): total = 0 for price in prices: total += price return total"},{"prompt":"Generate a Python program that performs quick sort on a given array of integers [1, 5, 8, 7, 2]","completion":"def quicksort(arr): if len(arr) < 2: return arr pivot = arr[0] left = [] right = [] for i in range(1, len(arr)): if arr[i] < pivot: left.append(arr[i]) elif arr[i] > pivot: right.append(arr[i]) arr = quicksort(left) + [pivot] + quicksort(right) return arr arr = [1, 5, 8, 7, 2] sorted_arr = quicksort(arr) print(sorted_arr)"},{"prompt":"Create a python function to calculate the probability of a given event. An example event is rolling a dice that has 6 sides and the event is rolling a number 6.","completion":"def calculate_probability(event): num_outcomes = 6 num_favorable = 1 probability = num_favorable/num_outcomes return probability # calculate probability of rolling a 6 probability = calculate_probability(\\"rolling a 6\\") print(probability)"},{"prompt":"Create a Python program to download and save a web page using the Requests library. https://www.example.com","completion":"import requests url = 'https://www.example.com' response = requests.get(url) with open('example.html', 'wb') as file: file.write(response.content)"},{"prompt":"Generate a program in Python which extracts all unique words from the given string. This is a te","completion":"def get_unique_words(word_string): word_string = word_string.lower() # Convert the string to lower case words = word_string.split() # Split the string into a list of words unique_words = [] # Create an empty list to store unique words # Iterate over the list of words and check if the word is already # present in the list of unique words. # If not, then append the word to the list of unique words. for word in words: if word not in unique_words: unique_words.append(word) # Return the list of unique words return unique_words print(get_unique_words(\\"This is a test\\"))"},{"prompt":"Create a web application using Python and Django that enables users to register and log in. Not applicable","completion":"from django.contrib.auth.forms import UserCreationForm class SignUpForm(UserCreationForm): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) self.fields['username'].label = 'Display Name' self.fields['email'].label = 'Email Address' form = SignUpForm(data=request.POST or None) if form.is_valid(): new_user = form.save(commit=False) new_user.save() return render(request, 'register.html', {'form': form})"},{"prompt":"Create a Python program that retrieves the latest stock prices from the NASDAQ Stock Market and stores it in a MongoDB database. NASDAQ: AAPL","completion":"import pymongo import requests from bs4 import BeautifulSoup client = pymongo.MongoClient(\\"mongodb://localhost:27017\\") # declare the database db = client.stock_prices # name the collection collection = db.nasdaq # get the data response = requests.get(\\"https://www.nasdaq.com/symbol/aapl\\") # parse it soup = BeautifulSoup(response.text, 'html.parser') # get the table table = soup.find('table', {'class': 'genTable'}) # get each row for tr in table.find_all('tr')[1:]: # get each column td = tr.find_all('td') # data manipulation date = td[0].text open_price = float(td[1].text) high_price = float(td[2].text) low_price = float(td[3].text) close_price = float(td[4].text) # define the document doc = { 'date': date, 'open_price': open_price, 'high_price': high_price, 'low_price': low_price, 'close_price': close_price } # insert collection.insert_one(doc)"},{"prompt":"Create a function in Python to remove all the occurences of a given letter in a string. letter = 'a', string = 'Abra Cadabra'","completion":"def remove_occurences(letter, string): return string.replace(letter, '')"},{"prompt":"mplement a function in Python to detect whether a given string is a valid ISBN number.","completion":"def is_isbn_valid(isbn): isbn = isbn.replace(\\"-\\", \\"\\") if len(isbn) != 10: return False sum = 0 factor = 10 for i in range(len(isbn)): if isbn[i].isdigit(): sum += int(isbn[i]) * factor elif isbn[i].upper() == 'X': sum += 10 * factor else: return False factor -= 1 if sum % 11 == 0: return True else: return False"},{"prompt":"Create a Python program to generate passwords of length 8 containing at least one uppercase character and one number.","completion":"import random uppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' numbers = '1234567890' def generate_password(): password = '' for _ in range(4): password += random.choice(uppercase_letters) password += random.choice(numbers) return password password = generate_password() print(password)"},{"prompt":"mplement a supervised learning algorithm in Python to predict the quality of a given input text.","completion":"\\"\\"\\" Program to predict the quality of a text using supervised learning \\"\\"\\" import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.svm import SVC #Load the training dataset train_data = pd.read_csv(\\"data\\") #Preprocess the data by creating features using CountVectorizer vectorizer = CountVectorizer() X_train = vectorizer.fit_transform(train_data['text']) Y_train = train_data['quality'] #Train the model model = SVC() model.fit(X_train, Y_train) #Test the model test_data = \\"This is a sample text\\" X_test = vectorizer.transform([test_data]) prediction = model.predict(X_test) print('Predicted Quality: %s' % prediction[0])"},{"prompt":"Write an algorithm in Python that uses an iterative approach to count all elements greater than a given value in an array. array: [7, 8, 4, 2, 9], target: 5","completion":"def countGreaterThan(arr, target): count = 0 for element in arr: if element > target: count += 1 return count # Example arr = [7, 8, 4, 2, 9] target = 5 print(countGreaterThan(arr, target)) # Output: 3"},{"prompt":"Optimize a Python code to minimize program execution time def sum_array(array): res = 0 for i in range(len(array)): res += array[i] return re","completion":"def sum_array(array): return sum(array)"},{"prompt":"Develop a program in Python to sort a given list of integers in ascending order.","completion":"def sort_list(list): for i in range(len(list)-1,0,-1): for j in range(i): if list[j] > list[j+1] : temp = list[j] list[j] = list[j+1] list[j+1] = temp return list"},{"prompt":"Suggest a python code to get the common elements of a list of lists. list_of_lists = [[1,3,5], [3,5,7], [1,2,3]]","completion":"def get_common_elements(list_of_lists): commons = [] for i in range(len(list_of_lists)): commons = list(set(commons).intersection(list_of_lists[i])) return commons"},{"prompt":"Write a Python function which takes the 3 sides of a triangle as the arguments and calculates the area.","completion":"def calculate_area_triangle(a, b, c): '''This function will calculate the area of a triangle given the three sides as parameters.''' s = (a + b + c) / 2 area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 return area"},{"prompt":"Create a for loop in Python to print out the numbers in a given list in reverse order. [1,2,3,4,5]","completion":"list = [1,2,3,4,5] for i in reversed(list): print(i)"},{"prompt":"Modify the following code to reverse a string without using the builtin reverse() method in Python. Hello World!","completion":"def reverseString(string): newString = \\"\\" length = len(string) for i in range(length - 1, -1, -1): newString += string[i] return newString print(reverseString(\\"Hello World!\\"))"},{"prompt":"Create a classification algorithm in Python to predict the sentiment of a given text as either positive, negative or neutral. Text: I love it when the weather is good.","completion":"# import libraries import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import BernoulliNB # read data df = pd.read_csv('data.csv') # set up dependent and independent variables X = df['text'] y = df['sentiment'] # creating document term matrix vectorizer = CountVectorizer() X_dtm = vectorizer.fit_transform(X).toarray() # split data into train and test set X_train, X_test, y_train, y_test = train_test_split(X_dtm, y, test_size = 0.2, random_state = 0) # train model nb = BernoulliNB() nb.fit(X_train, y_train) # evaluate model accuracy = nb.score(X_test, y_test) # predicting sentiment text = 'I love it when the weather is good.' data = vectorizer.transform([text]).toarray() prediction = nb.predict(data) print(prediction) # Output: ['positive']"},{"prompt":"Create a program in Python to calculate the median of a list of numbers.","completion":"def median_list(list_of_numbers): list_of_numbers.sort() length_list = len(list_of_numbers) if length_list % 2 == 0: return (list_of_numbers[length_list//2] + list_of_numbers[(length_list//2)-1])/2 else: return list_of_numbers[length_list//2]"},{"prompt":"Write a Python script that finds the minimum sum of an array of integers. arr = [13, 2, 7, 6, 5]","completion":"def min_sum_array(arr): minimum = arr[0] total = 0 for i in range (0, len(arr)): element = arr[i] if element < minimum: minimum = element total += element return total arr = [13, -2, 7, -6, 5] min_sum = min_sum_array(arr) print(min_sum) # Output: -11"},{"prompt":"Write a python program to create a list of every third number between 1 and fifty.","completion":"my_list = [] for i in range(1, 50, 3): my_list.append(i)"},{"prompt":"mplement a Machine Learning algorithm in Python for Arrhythmia detection. Not applicable","completion":"import pandas as pd from sklearn.ensemble import RandomForestClassifier # Read data data = pd.read_csv('arrhythmaiadata.csv') # Select features and targets X = data.drop('arrhythmia', axis=1) y = data.arrhythmia # Split data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train model model = RandomForestClassifier(n_estimators=100, random_state=42) model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Calculate accuracy accuracy = accuracy_score(y_test, y_pred) print('Accuracy: %.2f' % (accuracy))"},{"prompt":"Generate code for a Python class that contains functions to add and remove elements from a list.","completion":"class MyList: def __init__(self): self.elements = [] def add_element(self, element): self.elements.append(element) def remove_element(self, index): del self.elements[index]"},{"prompt":"mplement an optimization algorithm in Python to find the local minima of a given function f(x). f(x) = x^2 + 6x 4","completion":"def objective_function(x): return x**2 + 6*x - 4 def find_local_minima(func): x = 0 delta = 0.01 while True: x_new = x + delta if objective_function(x_new) < objective_function(x): x = x_new else: return x print('The local minima is', find_local_minima(objective_function))"},{"prompt":"Create a python program that splits a sentence into individual words and prints out the words in reverse order. Not applicable","completion":"s = 'This is an example sentence' words = s.split(' ') words.reverse() for word in words: print(word)"},{"prompt":"Automate the process of finding the sum of all possible combinations of numbers in a given list using Python. my_list = [1,2,3,4]","completion":"my_list = [1,2,3,4] # function to find the sum of all possible combinations def sum_combinations(arr): total = 0 for i in range(len(arr)): partial_sum = 0 for j in range(i,len(arr)): partial_sum += arr[j] total += partial_sum return total # find the sum of all possible combinations total_sum = sum_combinations(my_list) print(\\"The sum of all possible combinations of numbers in the list is\\", total_sum)"},{"prompt":"Create a function in Python that takes a list of integers as input and returns a list of the sorted integers. [5, 7, 3, 2, 9]","completion":"def sort_list_of_integers(lst): lst.sort() return lst print(sort_list_of_integers([5, 7, 3, 2, 9])) # Output: [2, 3, 5, 7, 9]"},{"prompt":"Write a Python script to reduce an array of integers by their GCD. [30, 20, 45]","completion":"def gcd(a, b): while a != 0: a, b = b % a, a return b def reduce_by_gcd(arr): gcd_val = arr[0] for i in range(len(arr)): gcd_val = gcd(gcd_val, arr[i]) return [a // gcd_val for a in arr] reduced_arr = reduce_by_gcd([30, 20, 45]) print(reduced_arr) # [2, 3, 5]"},{"prompt":"Rewrite the following function in Python: function add(x, y) { return x + y; } Not applicable","completion":"def add(x, y): return x + y"},{"prompt":"mplement a function in Python that takes two integers as input and returns the larger one.","completion":"def larger_of_two(num1, num2): \\"\\"\\"Return the larger of two integers\\"\\"\\" if num1 > num2: return num1 else: return num2"},{"prompt":"Create a class in Python that represents a twodimensional vector. Not applicable","completion":"class Vector2D: def __init__(self, x = 0, y = 0): self.x = x self.y = y def __str__(self): return '<' + str(self.x) + ', ' + str(self.y) + '>' def add(self, other): return Vector2D(self.x + other.x, self.y + other.y) def __add__(self, other): return self.add(other) # testing v1 = Vector2D(3, 4) v2 = Vector2D(1, 2) print(v1 + v2) # Output: <4, 6>"},{"prompt":"Write a Python program to store and display information about a restaurant. The restaurant is called 'The Olive' and it has a Chinese and Thai cuisine.","completion":"class Restaurant: def __init__(self, name, cuisine): self.name = name self.cuisine = cuisine restaurant = Restaurant('The Olive', 'Chinese and Thai') print('Name of the restaurant: ', restaurant.name) print('Cuisine served in the restaurant: ', restaurant.cuisine)"},{"prompt":"Write a Python program to generate a square matrix with random values from 0 to 9. 4 (Size of matrix)","completion":"import random def matrix(size): matrix = [[0 for i in range(size)] for j in range(size)] for i in range(size): for j in range(size): matrix[i][j] = random.randint(0, 9) return matrix result = matrix(4) for row in result: print(row)"},{"prompt":"Create a Caesar Cipher encryption method in Python.","completion":"def caesar_cipher_encrypt(plain_text, shift): cipher_text = \\"\\" for char in plain_text: if char == ' ': cipher_text += char elif char.isupper(): cipher_text += chr((ord(char) + shift - 65) % 26 + 65) else: cipher_text += chr((ord(char) + shift - 97) % 26 + 97) return cipher_text"},{"prompt":"Create a function in Python that takes a list of numbers and finds the largest even number. [2, 5, 7, 6]","completion":"def largest_even(arr): even_nums = [] for num in arr: if num % 2 == 0: even_nums.append(num) if len(even_nums) == 0: return None largest = even_nums[0] for num in even_nums: if num > largest: largest = num return largest result = largest_even([2, 5, 7, 6]) print(result)"},{"prompt":"Develop a Python code snippet to compute the Euclidean distance between two points. point1 = (2, 3) point2 = (4, 5)","completion":"def euclidean_distance(point1, point2): dx = point1[0] - point2[0] dy = point1[1] - point2[1] return (dx*dx + dy*dy)**0.5"},{"prompt":"Create a Python program to sort numbers in an array using different algorithms, such as quick sort, insertion sort and merge sort.","completion":"def quick_sort(array): if len(array) < 2: return array pivot = array[0] less = [i for i in array[1:] if i <= pivot] greater = [i for i in array[1:] if i > pivot] return quick_sort(less) + [pivot] + quick_sort(greater) def insertion_sort(array): for i in range(1, len(array)): j = i while j > 0 and array[j - 1] > array[j]: array[j], array[j - 1] = array[j - 1], array[j] j -= 1 return array def merge_sort(array): if len(array) > 1: mid = len(array) // 2 left = array[:mid] right = array[mid:] merge_sort(left) merge_sort(right) i, j, k = 0, 0, 0 while i < len(left) and j < len(right): if left[i] < right[j]: array[k] = left[i] i += 1 else: array[k] = right[j] j += 1 k += 1 while i < len(left): array[k] = left[i] i += 1 k += 1 while j < len(right): array[k] = right[j] j += 1 k += 1 return array"},{"prompt":"Generate a function in Python that takes in a list of integers and a target sum, it should return all the unique pairs of numbers in the list that add up to the target sum. [2, 3, 5, 7], 10","completion":"def findPairs(nums, t_sum): '''Function to find all the unique pairs of numbers that add up to the target sum.''' num_set = set(nums) found_pairs = [] for num in nums: if (t_sum - num) in num_set: found_pair = (min(num, t_sum - num), max(num, t_sum - num)) if found_pair not in found_pairs: found_pairs.append(found_pair) return found_pairs nums = [2, 3, 5, 7] t_sum = 10 print(findPairs(nums, t_sum))"},{"prompt":"Write a Python program which will take a list of score of five students and compute the average score for the five students. [85, 70, 72, 90, 75]","completion":"def compute_average(score_list): return sum(score_list)//len(score_list)"},{"prompt":"Use pandas in Python to aggregate a given dataset with 4 columns (A, B, C, D) into a single column. | A | B | C | D | ||||| | 0 | 34 | 2 | 6 | | 1 | 21 | 9 | 0 |","completion":"import pandas as pd data = [[0, 34, 2, 6], [1, 21, 9, 0]] df = pd.DataFrame(data, columns = ['A', 'B', 'C', 'D']) df['Aggregate'] = df.apply(lambda row: row.A + row.B + row.C + row.D, axis=1) print(df)"},{"prompt":"Generate Python code that computes the nth Fibonacci number. n = 5","completion":"def nth_fibonacci(n): \\"\\"\\"Return the nth Fibonacci number\\"\\"\\" a = 0 b = 1 if n == 0: return 0 elif n == 1: return 1 else: for i in range(2, n): c = a + b a = b b = c return b"},{"prompt":"Create a program in Python to print out the elements in a list in reverse order. List = [A, B, C, D]","completion":"list = [\\"A\\", \\"B\\", \\"C\\", \\"D\\"] for i in range(len(list)-1, -1, -1): print(list[i])"},{"prompt":"Design a Python function that outputs the sum of all multiples of 4 and 7 between 1 and a given number n. 100","completion":"def sum_multiples_4_7(n): sum = 0 # iterate from 1 to n for i in range(1, n+1): # Sum only if it's a # multiple of 4 or 7 if(i % 4 == 0 or i % 7 == 0): sum += i return sum result = sum_multiples_4_7(100) print(result)"},{"prompt":"Build a function in Python to compute the Fibonacci numbers up to a given maximum. maximum = 15","completion":"def fibonacciGenerator(maximum): i1, i2 = 0, 1 while i1 < maximum: yield i1 i1, i2 = i2, i1 + i2 fibonacci = list(fibonacciGenerator(15)) print(fibonacci)"},{"prompt":"Create an algorithm in Python to compile a list of all possible ships given a list of components. components = [a, b, c, d, e]","completion":"ships = [] permutations = [[]] def generate_ships(components, index, permutation): if index == len(components): ships.append(permutation) else: for i in [0, 1]: permutation_copy = permutation.copy() permutation_copy.append(i) generate_ships(components, index + 1, permutation_copy) # Initial call generate_ships(components, 0, []) print(ships)"},{"prompt":"Generate an optimized Python code that computes the product of two numbers without using the multiplication operator. The numbers are 3 and 7","completion":"def product_without_mul(x, y): result = 0 while (y > 0): partial_result = 0 for i in range(y): partial_result += x result += partial_result y -= 1 return result x = 3 y = 7 print(\\"Product of two numbers without using multiplication operator is \\", product_without_mul(x, y))"},{"prompt":"Create a quiz game using Python. Every round should be timed and display a count down timer on the screen. List of questio","completion":"import time import random questions = [...List of questions] def start_game(): score = 0 start_time = time.time() for i in range( len(questions) ): print(f'Question {i+1}:') question = random.choice(questions) print(question['text']) print('Options:') for j, option in enumerate(question['options'], start=1): print(f\\"{j}. {option}\\") answer = int(input('Answer: ')) if answer == question['answer']: score += 1 print('Correct!n') else: print('Incorrect!n') elapsed_time = time.time() - start_time print(f'Time remaining: {30 - int(elapsed_time):02} secondsn') if elapsed_time >= 30: break print(f'Your score is {score}/{len(questions)}') if __name__ == '__main__': start_game()"},{"prompt":"Compute the maximum sum subarray of a given array using Python. [2, 1, 3, 4, 1, 2, 1, 5, 4]","completion":"# Kadane's algorithm def max_sum_subarray(array): max_so_far = 0 max_ending_here = 0 for i in range(len(array)): max_ending_here += array[i] if max_ending_here < 0: max_ending_here = 0 if max_so_far < max_ending_here: max_so_far = max_ending_here return max_so_far array = [-2, 1, -3, 4, -1, 2, 1, -5, 4] print(max_sum_subarray(array))"},{"prompt":"List the IPsec status using the Vici interface.","completion":"#!/usr/local/bin/python3 \\"\\"\\" Copyright (c) 2015-2019 Ad Schellevis <ad@opnsense.org> All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED \`\`AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. -------------------------------------------------------------------------------------- list ipsec status, using vici interface \\"\\"\\" import sys import socket import ujson import vici try: s = vici.Session() except socket.error: # cannot connect to session, strongswan not running? print ('ipsec not active') sys.exit(0) def parse_sa(in_conn): result = {'local-addrs': '', 'remote-addrs': '', 'children': '', 'local-id': '', 'remote-id': ''} result['version'] = in_conn['version'] if 'local_addrs' in in_conn: result['local-addrs'] = b','.join(in_conn['local_addrs']) elif 'local-host' in in_conn: result['local-addrs'] = in_conn['local-host'] if 'remote_addrs' in in_conn: result['remote-addrs'] = b','.join(in_conn['remote_addrs']) elif 'remote-host' in in_conn: result['remote-addrs'] = in_conn['remote-host'] if 'children' in in_conn: result['children'] = in_conn['children'] result['sas'] = [] return result result = dict() # parse connections for conns in s.list_conns(): for connection_id in conns: result[connection_id] = parse_sa(conns[connection_id]) result[connection_id]['routed'] = True result[connection_id]['local-class'] = [] result[connection_id]['remote-class'] = [] # parse local-% and remote-% keys for connKey in conns[connection_id].keys(): if connKey.find('local-') == 0: if 'id' in conns[connection_id][connKey]: result[connection_id]['local-id'] = conns[connection_id][connKey]['id'] result[connection_id]['local-class'].append(conns[connection_id][connKey]['class']) elif connKey.find('remote-') == 0: if 'id' in conns[connection_id][connKey]: result[connection_id]['remote-id'] = conns[connection_id][connKey]['id'] result[connection_id]['remote-class'].append(conns[connection_id][connKey]['class']) result[connection_id]['local-class'] = b'+'.join(result[connection_id]['local-class']) result[connection_id]['remote-class'] = b'+'.join(result[connection_id]['remote-class']) # attach Security Associations for sas in s.list_sas(): for sa in sas: if sa not in result: result[sa] = parse_sa(sas[sa]) result[sa]['routed'] = False result[sa]['sas'].append(sas[sa]) print (ujson.dumps(result, reject_bytes=False))"},{"prompt":"Generate a function in Python to count the number of words in a given sentence. Hello there","completion":"def count_words(sentence): words = sentence.split(' ') return len(words) print(count_words(\\"Hello there\\")) # Output: 2"},{"prompt":"Generate code to prompt user input using Python. Not applicable","completion":"name = input('What is your name? ') print('Hello', name, '!')"},{"prompt":"Generate a Python note to query a database and display 5 records. Database table name: users","completion":"import sqlite3 conn = sqlite3.connect('database.db') c = conn.cursor() # query the database c.execute('SELECT * FROM users LIMIT 5') # fetch all records records = c.fetchall() # print all records for record in records: print(record) # close the connection conn.close()"},{"prompt":"Manipulate a python dictionary to print the duplicate keys in a keyvalue pair. dictionary = {'a': 1, 'c': 3, 'b': 2, 'd': 4, 'a': 1}","completion":"for key, value in dictionary.items(): if dictionary.count(key) > 1: print(key)"},{"prompt":"Create a sentiment analysis algorithm for Python The algorithm should identify the sentiment of a given sentence by analyzing its words and phrases.","completion":"from textblob import TextBlob from collections import Counter def sentiment_analysis(sentence): # Tokenize the sentence tokens = TextBlob(sentence).words # Create a dictionary to store the sentiment polarity sentiments = Counter() # Calculate polarity scores and store the results for token in tokens: blob = TextBlob(token) sentiments[token] += blob.sentiment.polarity # Calculate total polarity total = sum(sentiments.values()) # Round to 2 decimal places total = round(total, 2) # Assign sentiment label if total > 0.2: sentiment = 'Positive' elif total < -0.2: sentiment = 'Negative' else: sentiment = 'Neutral' sentiment_info = {'total':total, 'sentiment': sentiment} return sentiment_info"},{"prompt":"Generate a function in Python for computing the Levenshtein distance between two strings.","completion":"#Compute the Levenshtein distance between two strings def levenshtein(s1, s2): if len(s1) < len(s2): return levenshtein(s2, s1) # len(s1) >= len(s2) if len(s2) == 0: return len(s1) previous_row = range(len(s2) + 1) for i, c1 in enumerate(s1): current_row = [i + 1] for j, c2 in enumerate(s2): insertions = previous_row[j + 1] + 1 # j+1 instead of j since previous_row and current_row are one character longer deletions = current_row[j] + 1 # than s2 substitutions = previous_row[j] + (c1 != c2) current_row.append(min(insertions, deletions, substitutions)) previous_row = current_row return previous_row[-1]"},{"prompt":"Design an artificial neural network that recognizes handwritten digits using Keras and Python. Not applicable","completion":"import keras from keras.models import Sequential from keras.layers import Dense, Dropout, Activation, Flatten from keras.layers.convolutional import Conv2D, MaxPooling2D # Load the MNIST data set from keras.datasets import mnist (train_images, train_labels), (test_images, test_labels) = mnist.load_data() # Rescale images to value between 0 and 1 train_images = train_images / 255 test_images = test_images / 255 # dtype is based on data type of input images train_images = train_images.astype('float32') test_images = test_images.astype('float32') # Reshape the data train_images = train_images.reshape(60000, 28, 28, 1) test_images = test_images.reshape(10000, 28, 28, 1) # Label encoding train_labels = keras.utils.to_categorical(train_labels, 10) test_labels = keras.utils.to_categorical(test_labels, 10) # Model Architecture Design model = Sequential() model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1))) model.add(MaxPooling2D()) model.add(Flatten()) model.add(Dense(128, activation='relu')) # Add a softmax layer with 10 output units: model.add(Dense(10, activation='softmax')) # Compile the model model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) # Train the model model.fit(train_images, train_labels, epochs=5) # Test the model model.evaluate(test_images, test_labels)"},{"prompt":"Create a program in python to identify the the frequency of words in a given string. string=This is a test string to check the frequency of words in the string","completion":"from collections import Counter def word_frequency(sentence): # Split the sentence into words words = sentence.split() # Generate a dictionary to store the frequencies freq = dict() # Iterate over the words for word in words: if word in freq: freq[word] += 1 else: freq[word] = 1 # Use Counter to find the frequencies of words frequencies = Counter(freq) # Print the frequencies of words for word, frequency in frequencies.items(): print(word + \\": \\" + str(frequency)) # Driver code sentence = \\"This is a test string to check the frequency of words in the string\\" word_frequency(sentence)"},{"prompt":"Build a function in Python for computing the Hamming Distance between two strings of equal length. String 1: python String 2: perl","completion":"def hammingDistance(s1, s2): # initialize with 0 distance = 0 # Calculate the length of the string length_str1 = len(s1) # Compare adjacent characters and increment the count # if characters are not same for i in range(length_str1): if s1[i] != s2[i]: distance += 1 return distance"},{"prompt":"Using Python functions and data structures, design a program to efficiently store and update customer data. <no input>","completion":"# Initialize a dictionary to store customer data customers = {} # Define a function to add customer information def add_customer(customer_id, customer_name, customer_address): customers[customer_id] = { 'name': customer_name, 'address': customer_address } # Define a function to update customer information def update_customer_info(customer_id, customer_name=None, customer_address=None): # Return if customer does not exist if customer_id not in customers: print('Customer not found!') return # Update customer name if provided if customer_name: customers[customer_id]['name'] = customer_name # Update customer address if provided if customer_address: customers[customer_id]['address'] = customer_address"},{"prompt":"Use the given code to optimize the dimensions of a beam. Import the necessary libraries and define the parameters P and E. Define the objective function to calculate the volume of the beam. Define the constraints for the optimization problem. Use the fmin_cobyla function to find the optimal dimensions of the beam. Print the optimal dimensions and the objective function value.","completion":"from scipy.optimize import fmin_cobyla import sys, os, subprocess, numpy P, E = 1000.0, 69e9 # N, Pa, m, m fileName = 'optimizeTest.txt' resultName = '../TestsResults/opt.txt' def objective(x): height = x[0] width = x[1] length = x[2] volume = length * width * height return volume def g0(x): height = 0.0 width = 0.0 length = 0.0 if type(x) is numpy.ndarray: height = x[0] width = x[1] length = x[2] else: height = x[0] width = x[1] length = x[2] print 'Calculating for Height, Width, Length:', height, width, length, 'n' # fail-safes if height <= 0.0 or width <= 0.0 or length <= 0.0: return -100 file_write = open(fileName, 'w') file_write.write(fileName + \\".scad \\"+str(length)+\\" \\"+str(width*1000)+\\" \\"+str(height*1000)) file_write.close() subprocess.check_output(['python', 'pipeline.py', '--template', 'templateBeam.py', '--batch', fileName, '--sConfig', 'slic3rConfig.ini', '--ind', str(height* 1000 + width * 1000 + length * 1000), '-c']) # read results from file and return those opt = open(resultName) for line in opt.readlines(): curLine = line.strip().split(' ') disp = float(curLine[0]) / 1000 I = width * height**3 / 12 tip_disp = (P * length**3)/(3*E*I) print 'Displacement for Height, Width, Length', height, width, length 'is ::', disp print 'Analytical Disp for Height, Width, Length', height, width, length, 'is ::', tip_disp, 'n' return 1e-4 - (float(curLine[0]) / -1000) return -1000000 def g1(x): # height > 0.01 m (10 mm) if x[0] > 0.01 and x[1] > 0.01 and x[2] > 0.01: return 1 return -1 def g2(x): # height < 0.5 m (500 mm) if x[0] < 0.5 and x[1] < 0.5 and x[2] < 0.5 return 1 return -1 h0 = [0.02, 0.02, 0.02] # 20 mm constraints = [g0, g1, g2] h_opt = fmin_cobyla(objective, h0, constraints, rhoend=1e-6, maxfun=100, catol=1e-6) print h_opt, objective(h_opt), g0(h_opt)"},{"prompt":"Create a Python class that processes text according to some simple rules and counts the frequency of words in the text.","completion":"class TextProcessor: def __init__(self): self.frequency_map = {} def process_text(self, text): clean_text = self._preprocess_text(text) word_list = clean_text.split() self._count_frequencies(word_list) def _preprocess_text(self, text): # Strip punctuation, convert to lower case, etc. return text.strip().lower() def _count_frequencies(self, word_list): for word in word_list: if word in self.frequency_map: self.frequency_map[word] += 1 else: self.frequency_map[word] = 1"},{"prompt":"Generate a random number between given two numbers. min = 10 max = 20","completion":"We can generate a random number between two numbers using the random.randint() function in Python. We can call the function like this: random.randint(min, max)."},{"prompt":"Can you modify the previous program in python to generate random passwords with length 10 and include a symbol?","completion":"import string, random characters = string.ascii_letters + string.digits + string.punctuation def generate_password(): password = \\"\\" for i in range(10): password += random.choice(characters) return password print(generate_password())"},{"prompt":"Create an API in Python to generate recommendations using matrix factorization. ratings.csv (with columns user, item, rating)","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error from sklearn.decomposition import TruncatedSVD # Load Data data = pd.read_csv('ratings.csv') # Split into training and test sets train_data, test_data = train_test_split(data, test_size=0.2) # Create user-item matrices train_user_item = train_data.pivot(index='user', columns='item', values='rating').fillna(0) test_user_item = test_data.pivot(index='user', columns='item', values='rating').fillna(0) # Create model model = TruncatedSVD(n_components=20) model.fit(train_user_item) # Make predictions on the test set preds = model.predict(test_user_item) # Calculate mean squared error mse = mean_squared_error(test_user_item, preds) print('MSE: ' + str(mse)) # Define Recommendations API def recommend(user, num_recommend): user_item = train_data[train_data['user'] == user].pivot( index='user', columns='item', values='rating' ).fillna(0) recommendations = model.predict(user_item) # Get the item ids item_ids = np.argsort(-recommendations)[:num_recommend] # Return the top recommendations return train_user_item.columns.values[item_ids]"},{"prompt":"Create a python program which will take user name as input and print the same","completion":"name = input(\\"Enter your name: \\") print(\\"Hello \\" + name + \\"!\\")"},{"prompt":"Write a Python program to analyze a given dataset and generate a report on the top ten most frequently used words. Not applicable","completion":"import collections import string # define punctuation punctuations = string.punctuation # open the file and read lines with open('words.txt', 'r') as f: words = f.readlines() # remove punctuation and make all words lowercase words = [word.strip(punctuations).lower() for word in words] # count the words and store the word count in dictionary word_count = collections.Counter(words) # sort the data and get the top ten words top_ten_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)[:10] # print the results print(\\"Result:\\") for word in top_ten_words: print(f\\"{word[0]} {word[1]}\\")"},{"prompt":"Create a Python function that displays median and mode for a given set of data. [1, 2, 3, 4, 5, 6]","completion":"def calculate_median_and_mode(data): median = 0 mode = 0 data_length = len(data) data.sort() # Calculate median if data_length % 2 == 0: median = (data[int(data_length/2)] + data[int(data_length/2) - 1])/2 else: median = data[int(data_length/2)] # Calculate mode lst = [] max_freq = 1 for i in range(data_length): freq = 1 for j in range(data_length): if (data[i] == data[j] and i != j): freq += 1 if freq > max_freq: lst.clear() max_freq = freq lst.append(data[i]) elif freq == max_freq and data[i] not in lst: lst.append(data[i]) # If no elements have maximum frequency, function return mode equal to 0 if len(lst) == 0: mode = 0 else: mode = lst return (median, mode) if __name__ == '__main__': data = [1, 2, 3, 4, 5, 6] median_and_mode = calculate_median_and_mode(data) print(\\"The median of given data set is :\\", median_and_mode[0]) print(\\"The mode of given data set is :\\", median_and_mode[1])"},{"prompt":"Write a Python script to download tweets from a given list of twitter accounts. <no input>","completion":"\\"\\"\\" Python script to download tweets from a given list of twitter accounts. \\"\\"\\" import tweepy def get_tweets(accounts): # Authenticate with twitter auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) # Get the latest tweets all_tweets = [] for account in accounts: tweets = api.user_timeline(screen_name=account, count=10) all_tweets.extend(tweets) # Return the tweets as a list of dictionaries return [tweet._json for tweet in all_tweets] if __name__ == '__main__': accounts = ['USER1', 'USER2', 'USER3'] tweets = get_tweets(accounts) print(tweets)"},{"prompt":"Develop a Python script to automate the web application UI testing.","completion":"import unittest from selenium import webdriver class LoginForm(unittest.TestCase): def setUp(self): self.driver = webdriver.Firefox() self.driver.get('http://example.com/login') def test_login_form(self): username_field = self.driver.find_element_by_name('user[username]') username_field.send_keys('bob') password_field = self.driver.find_element_by_name('user[password]') password_field.send_keys('s3cr3t') password_field.submit() # Check that we are now logged in welcome_message = self.driver.find_element_by_xpath('//*[contains(text(), \\"Welcome, bob\\")]') self.assertTrue(welcome_message) def tearDown(self): self.driver.quit if __name__ == '__main__': unittest.main()"},{"prompt":"Create a Python function that takes a dictionary as input and returns a list containing the values sorted by the key. dictionary = { 'John': 23, 'Alice': 27, 'Bob': 17, 'Eve': 33 }","completion":"def sort_dict_by_key(dictionary): sorted_list = [] for key in sorted(dictionary): sorted_list.append(dictionary[key]) return sorted_list # Example mydict = { 'John': 23, 'Alice': 27, 'Bob': 17, 'Eve': 33 } print(sort_dict_by_key(mydict)) # Output: [17, 23, 27,33]"},{"prompt":"What is the output of this python program? x = 5 y = 8 print(x + y)","completion":"13"},{"prompt":"Write a Python program that converts an integer into a Roman numeral. Integer: 1899","completion":"def intToRoman(num): romans = [\\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\"] numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1] res = \\"\\" i = 0 while num > 0: # if num is greater than the number # at index i, subtract the number # at index i and append roman # at index i in the res. for _ in range(num // numbers[i]): res += romans[i] num -= numbers[i] i += 1 return res num = 1899 print(intToRoman(num)) Output: MDCCCXCIX"},{"prompt":"Create a Python program to predict the price of a stock from past data. Historical Data: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]","completion":"import numpy as np # Function to predict stock prices def stock_price_prediction(data): # Calculating the moving average of the data moving_average = np.mean(data) # Printing the prediction print(\\"Predicted Stock Price :\\",moving_average) # Predicting the Stock Price data = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100] stock_price_prediction(data)"},{"prompt":"Debug this python code to find and fix any issues it contains. def check_anagrams(s1, s2): s1 = s1.lower() s2 = s2.lower() return sorted(s1) == sorted(s2)","completion":"def check_anagrams(s1, s2): s1 = s1.lower().replace(\\" \\", \\"\\") s2 = s2.lower().replace(\\" \\", \\"\\") return sorted(s1) == sorted(s2)"},{"prompt":"Create a sentiment analysis algorithm in Python that evaluates the sentiment of a text document. <no input>","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer # Create the sentiment analyzer object sentiment_analyzer = SentimentIntensityAnalyzer() # Read the text document text = open('example.txt', 'r').read() # Get the sentiment scores sentiment_scores = sentiment_analyzer.polarity_scores(text) # Print the sentiment for key in sentiment_scores: print('{0}: {1}, '.format(key, sentiment_scores[key]), end='') print('nThe sentiment of the text is: ', end='') if sentiment_scores['compound'] >= 0.05: print('Positive') elif sentiment_scores['compound'] <= - 0.05: print('Negative') else: print('Neutral')"},{"prompt":"Use the NLTK library in Python to create a program that can classify a given sentence as positive or negative sentiment. This restaurant is terrible.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer text = 'This restaurant is terrible.' sentiment_analyzer = SentimentIntensityAnalyzer() scores = sentiment_analyzer.polarity_scores(text) label = 'positive' if scores['compound'] >= 0.05 else 'negative' print(f'The sentiment of the sentence is {label}.')"},{"prompt":"Generate a Python function to multiply two given positive integers without using the * operator.","completion":"def multiply(x, y): # Base case if y == 0: return 0 # Recursive case else: return (x + multiply(x, y-1))"},{"prompt":"Write Python code to compress a given string by counting the successive occurrences of a character aaabccddeeexx","completion":"def compress_string(string): compressed_string = \\"\\" prev_char = \\"\\" count = 0 for char in string: if char == prev_char: count += 1 else: if prev_char != \\"\\": compressed_string += prev_char + str(count) prev_char = char count = 1 compressed_string += prev_char + str(count) return compressed_string"},{"prompt":"You are given a list of numbers and a certain threshold value. Write a Python program to automatically find all pairs of numbers in the list whose sum is equal to the threshold value. [2, 3, 5, 7, 8] and threshold value 10","completion":"def find_pairs_threshold(nums, threshold): pairs = [] for i in range(len(nums)): for k in range(i + 1, len(nums)): if (nums[i] + nums[k] == threshold): pairs.append((nums[i], nums[k])) return pairs print(find_pairs_threshold([2, 3, 5, 7, 8], 10)) # Output : [(2, 8), (3, 7)]"},{"prompt":"Create a web scraping script with Python using Scrapy and BeautifulSoup libraries to collect data from a single web page. Not applicable","completion":"import scrapy from bs4 import BeautifulSoup class MySpider(scrapy.Spider): name = 'MySpider' # Create a start_requests() method to set the requests def start_requests(self): urls = [BASE_URL] for url in urls: yield scrapy.Request(url=url, callback=self.parse) # Create a parse() method to process the requests def parse(self, response): soup = BeautifulSoup(response.text, 'html.parser') data = soup.find_all('div', attrs={'class':'some-class-name'}) for div in data: # Extract the data from the div item = { 'name': div.find('h3').text, 'link': div.find('a')['href'], 'price': div.find('span').text } # Return the item yield item"},{"prompt":"Write a function in python for finding a substring of a given string Hello World, lo Wo","completion":"def find_substring(string, sub_string): indices = [] for i in range(0, len(string)-len(sub_string)+1): if (string[i:i+len(sub_string)] == sub_string): indices.append(i) return indices print(find_substring(\\"Hello World\\", \\"lo Wo\\"))"},{"prompt":"Write a Python program to determine if a given point (x,y) is inside or outside a given circle. point = (2,2), center=(0, 0), radius=5","completion":"def isInsideCircle(point, center, radius): x = point[0] - center[0] y = point[1] - center[1] distance = (x**2 + y**2)**0.5 if distance <= radius: return True return False point = (2,2) center = (0, 0) radius = 5 isInsideCircle = isInsideCircle(point, center, radius) if isInsideCircle: print(\\"Point is inside the circle.\\") else: print(\\"Point is outside the circle.\\")"},{"prompt":"Write a code to create a GUI calculator using Python and Tkinter.","completion":"\\"\\"\\" This code creates a GUI calculator using Python and Tkinter. Step 1: Create a main window using tkinter. import tkinter as tk root = tk.Tk() root.title(\\"Calculator\\") root.geometry(\\"400x500\\") Step 2: Add all the necessary buttons for the calculator. # Create all button widgets btn_zero = tk.Button(root, text=\\"0\\", bg=\\"black\\", fg=\\"white\\") btn_one = tk.Button(root, text=\\"1\\", bg=\\"black\\", fg=\\"white\\") btn_two = tk.Button(root, text=\\"2\\", bg=\\"black\\", fg=\\"white\\") btn_three = tk.Button(root, text=\\"3\\", bg=\\"black\\", fg=\\"white\\") btn_four = tk.Button(root, text=\\"4\\", bg=\\"black\\", fg=\\"white\\") btn_five = tk.Button(root, text=\\"5\\", bg=\\"black\\", fg=\\"white\\") btn_six = tk.Button(root, text=\\"6\\", bg=\\"black\\", fg=\\"white\\") btn_seven = tk.Button(root, text=\\"7\\", bg=\\"black\\", fg=\\"white\\") btn_eight = tk.Button(root, text=\\"8\\", bg=\\"black\\", fg=\\"white\\") btn_nine = tk.Button(root, text=\\"9\\", bg=\\"black\\", fg=\\"white\\") btn_decimal = tk.Button(root, text=\\".\\", bg=\\"black\\", fg=\\"white\\") btn_clear = tk.Button(root, text=\\"Clear\\", bg=\\"black\\", fg=\\"white\\") btn_plus = tk.Button(root, text=\\"+\\", bg=\\"black\\", fg=\\"white\\") btn_minus = tk.Button(root, text=\\"-\\", bg=\\"black\\", fg=\\"white\\") btn_multiply = tk.Button(root, text=\\"*\\", bg=\\"black\\", fg=\\"white\\") btn_divide = tk.Button(root, text=\\"/\\", bg=\\"black\\", fg=\\"white\\") btn_equals = tk.Button(root, text=\\"=\\", bg=\\"black\\", fg=\\"white\\") Step 3: Use a grid layout to position all the widgets on the screen. # Use grid layout to position all buttons btn_zero.grid(row=4, column=1) btn_one.grid(row=3, column=0) btn_two.grid(row=3, column=1) btn_three.grid(row=3, column=2) btn_four.grid(row=2, column=0) btn_five.grid(row=2, column=1) btn_six.grid(row=2, column=2) btn_seven.grid(row=1, column=0) btn_eight.grid(row=1, column=1) btn_nine.grid(row=1, column=2) btn_decimal.grid(row=4, column=0) btn_clear.grid(row=4, column=2) btn_plus.grid(row=5, column=0) btn_minus.grid(row=5, column=1) btn_multiply.grid(row=5, column=2) btn_divide.grid(row=6, column=0) btn_equals.grid(row=6, column=1, columnspan=2) Step 4: Add functionality to the calculator. # Function to calculate result def calculate(): # Get the user input user_input = text_input.get() # Try and evaluate the user input try: result = eval(user_input) text_input.delete(0, \\"end\\") text_input.insert(0, result) except: pass # Create a text entry box for input text_input = tk.Entry(root, width=50, bg=\\"white\\") text_input.grid(row=0, column=0, columnspan=4) # Add command to all button widgets btn_zero.config(command=lambda: text_input.insert(tk.END, \\"0\\")) btn_one.config(command=lambda: text_input.insert(tk.END, \\"1\\")) btn_two.config(command=lambda: text_input.insert(tk.END, \\"2\\")) btn_three.config(command=lambda: text_input.insert(tk.END, \\"3\\")) btn_four.config(command=lambda: text_input.insert(tk.END, \\"4\\")) btn_five.config(command=lambda: text_input.insert(tk.END, \\"5\\")) btn_six.config(command=lambda: text_input.insert(tk.END, \\"6\\")) btn_seven.config(command=lambda: text_input.insert(tk.END, \\"7\\")) btn_eight.config(command=lambda: text_input.insert(tk.END, \\"8\\")) btn_nine.config(command=lambda: text_input.insert(tk.END, \\"9\\")) btn_decimal.config(command=lambda: text_input.insert(tk.END, \\".\\")) btn_clear.config(command=lambda: text_input.delete(0, tk.END)) btn_plus.config(command=lambda: text_input.insert(tk.END, \\"+\\")) btn_minus.config(command=lambda: text_input.insert(tk.END, \\"-\\")) btn_multiply.config(command=lambda: text_input.insert(tk.END, \\"*\\")) btn_divide.config(command=lambda: text_input.insert(tk.END, \\"/\\")) btn_equals.config(command=calculate) # Mainloop root.mainloop() \\"\\"\\""},{"prompt":"Develop a Python script to calculate the average of all the numbers present in a list. list_num = [1, 5, 9, 10, 6]","completion":"def avg(list_num): sum = 0 for num in list_num: sum += num return sum / len(list_num) print(\\"Average is:\\", avg(list_num))"},{"prompt":"Create a class in Python which calculates the cost of a given item based on its size and weight.","completion":"class CostCalculator: def __init__(self, size, weight): self.size = size self.weight = weight def calculate_item_cost(self): cost = self.size * self.weight * 0.1 return cost"},{"prompt":"Set up a MongoDB Atlas instance and connect it to a Python web application. Not applicable","completion":"import pymongo # Connect to the MongoDB Atlas Cluster uri = \\"mongodb+srv://<dbuser>:<dbpassword>@<cluster>.mongodb.net/<dbname>?retryWrites=true&w=majority\\" client = pymongo.MongoClient(uri) # Set up the database and collection db = client.get_database(\\"<dbname>\\") collection = db[\\"<collectionname>\\"] # Insert a document document = { \\"name\\": \\"John Doe\\" } collection.insert_one(document) # Retrieve documents documents = collection.find({}) for document in documents: print(document) # Disconnect client.close()"},{"prompt":"Optimize a given Python function to run faster. def lower_string(string): return string.lower()","completion":"def lower_string(string): return string.strip().lower()"},{"prompt":"Create a Python AI program that can predict the probability of a book being a bestseller. Book title, genre, author, publisher, release date, number of reviews, average rating","completion":"import pandas as pd import numpy as np from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # read the dataset df = pd.read_csv('path/to/dataset/file.csv') # feature selection X = df[['title', 'genre', 'author', 'publisher', 'release_date', 'number_of_reviews', 'avg_rating']] # label selection y = np.array(df['bestseller']) # data preprocessing scaler = StandardScaler() X_scaled = scaler.fit_transform(X) # split data into training and test set X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.15, random_state = 0) # train the model model = LogisticRegression(random_state = 0) model.fit(X_train, y_train) # prediction score = model.score(X_test, y_test) # print probability book_title = input(\\"Enter the book title:\\") genre = input(\\"Enter the genre:\\") author = input(\\"Enter the author:\\") publisher = input(\\"Enter the publisher:\\") release_date = int(input(\\"Enter the release_date:\\")) number_of_reviews = int(input(\\"Enter the number_of_reviews:\\")) avg_rating = float(input(\\"Enter the average ratings:\\")) input_data = [[book_title, genre, author, publisher, release_date, number_of_reviews, avg_rating]] input_data = scaler.transform(input_data) probability = model.predict_proba(input_data)[0][1] print('The probability of the book being a bestseller is', probability)"},{"prompt":"Define a class in Python that creates a person object with the name, age, and gender.","completion":"class Person: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def describe(self): print(f\\"Name: {self.name}, Age: {self.age}, Gender: {self.gender}\\") p = Person(\\"John\\", 25, \\"Male\\") p.describe()"},{"prompt":"Write a Python program to compute the probability of an event based on the input data. data = {'success': 833, 'failure': 917}","completion":"def probability_calc(data): total = data['success'] + data['failure'] return data['success']/total"},{"prompt":"Access the Yelp API and build a program in Python that takes in a zip code and returns the average ratings for all restaurants in that zip code. 94115","completion":"\\"\\"\\" Access the Yelp API and build a program that takes a zip code and returns the average ratings for all restaurants in that zip code. \\"\\"\\" import requests def get_restaurant_ratings(zip_code): api_url = 'https://api.yelp.com/v3/businesses/search?location=' + zip_code headers = {'Authorization': 'Bearer [API KEY]'} r = requests.get(api_url, headers=headers) data = r.json() business_ids = [b['id'] for b in data['businesses']] total_rating = 0 num_ratings = 0 for business_id in business_ids: business_url = 'https://api.yelp.com/v3/businesses/' + business_id business_data = requests.get(business_url, headers=headers).json() total_rating += business_data['rating'] num_ratings += 1 return total_rating / num_ratings if __name__ == '__main__': zip_code = '94115' print(get_restaurant_ratings(zip_code))"},{"prompt":"Write a function in Python that takes a list of numbers as input and returns the product of all the numbers. [1, 2, 3, 4]","completion":"def product(lst): product = 1 for num in lst: product *= num return product print(product([1, 2, 3, 4]))"},{"prompt":"Generate a program to search for a given pattern in a string.","completion":"def search_pattern(string, pattern): index = string.find(pattern) if index == -1: return False else: return (index, index + len(pattern)) result = search_pattern(\\"i love python!\\", \\"love\\") print(result) # (2, 6)"},{"prompt":"Create a function in Python that takes a list as an argument and removes any duplicate values in the list. [1, 2, 3, 4, 2]","completion":"def remove_duplicates(my_list): new_list = [] for num in my_list: if num not in new_list: new_list.append(num) return new_list"},{"prompt":"Write a Python web scraper that sends a search query to Reddit. Machine Learning","completion":"import requests import json # base url as given in Reddit API documentation base_url = 'https://www.reddit.com/search.json' # parameters for the search query. In our case - q is the query params = { 'q': 'Machine Learning' } # send get request response = requests.get(base_url, params=params) # extract data in json format data = response.json() # data is a nested dictionary. Get the list of results using the 'data' key results = data['data']['children'] # iterate through the list and print each post for post in results: print(post['data']['title'])"},{"prompt":"Create a Python class that can detect whether a given number is a prime number.","completion":"class Number: \\"\\"\\"Class to detect if a given number is a prime number.\\"\\"\\" def __init__(self, number): self.number = number def is_prime(self): \\"\\"\\" Method to detect if a given number is a prime number \\"\\"\\" for i in range(2, self.number): if self.number % i == 0: return False return True"},{"prompt":"Generate a Python program to fetch data from a website.","completion":"import requests def main(): url = 'https://www.example.com' r = requests.get(url) if r.status_code == 200: content = r.content print(content) else: print(\\"Failed to fetch data.\\") if __name__ == \\"__main__\\": main()"},{"prompt":"Create a class in Python to perform basic arithmetic operations such as addition, subtraction, multiplication and division.","completion":"class Arithmetic: def __init__(self, a, b): self.a = a self.b = b def addition(self): return self.a + self.b def subtraction(self): return self.a - self.b def multiplication(self): return self.a * self.b def division(self): return self.a / self.b a = Arithmetic(2, 4) print(a.addition()) # Output: 6 print(a.subtraction()) # Output: -2 print(a.multiplication()) # Output: 8 print(a.division()) # Output: 0.5"},{"prompt":"Generate all possible permutations of a given string in Python.","completion":"import itertools def permutations(string): return list(itertools.permutations(string))"},{"prompt":"Create a Python script to calculate the total number of visitors on a Web page. Number of visitors per day (example: 2000, 1500, 2500, 1800)","completion":"visitors_per_day = [2000, 1500, 2500, 1800] total_visitors = sum(visitors_per_day) print(\\"Total number of visitors:\\", total_visitors)"},{"prompt":"Create a Python script to divide a list of numbers into two sublists so that the sum of numbers in each sublist is roughly equal. [10, 2, 3, 8, 7, 6, 5, 9, 4, 1]","completion":"list_nums = [10, 2, 3, 8, 7, 6, 5, 9, 4, 1]; # find the mid point of the list list_len = len(list_nums); mid = list_len//2 # split list into two sublists list_1 = list_nums[:mid] list_2 = list_nums[mid:] # sum up all the numbers in each sublist sum_1 = 0 sum_2 = 0 for num in list_1: sum_1 += num for num in list_2: sum_2 += num # check if the sum of each of the two sublists is roughly equal if abs(sum_1 - sum_2) < 10: print(f'The lists {list_1} and {list_2} have a sum difference of {abs(sum_1 - sum_2)}') else: print('The two sublists are not equal in sum')"},{"prompt":"Generate a Python program to group a list of integers into even and odd numbers. [1, 2, 3, 4, 5, 6]","completion":"def group_integers(lst): evens = [] odds = [] for num in lst: if (num % 2 == 0): evens.append(num) else: odds.append(num) return (evens, odds) lst = [1, 2, 3, 4, 5, 6] result = group_integers(lst) print(\\"Even numbers:\\", result[0]) print(\\"Odd numbers:\\", result[1])"},{"prompt":"Estimate the time it takes to execute a given Python function. def foo(): a = 0 for i in range(10000): a += 1","completion":"# TODO: Estimate time import time def estimate_time(func): start_time = time.time() func() end_time = time.time() return end_time - start_time time_taken = estimate_time(foo) print(f'Time taken to execute the function is {time_taken} seconds')"},{"prompt":"Write a Python program to get the squares of the numbers up to a given number n.","completion":"def get_squares(n): squares = [] for i in range(1, n + 1): squares.append(i**2) return squares result = get_squares(10) print(result)"},{"prompt":"Modify a Python program to accept a string argument and evaluate the length of it","completion":"import sys def len_string(str): len_str = 0 for char in str: len_str += 1 return len_str if __name__ == \\"__main__\\": if len(sys.argv) == 2: string = sys.argv[1] print(\\"Length of the string is\\", len_string(string)) else: print(\\"Please provide a string argument.\\")"},{"prompt":"Write a Python code that extracts all the text from a given HTML page <html> <head> <title>Example</title> </head> <body> <h1>Example Title</h1> <p>This is a paragraph.</p> </body> </html>","completion":"import re import requests from bs4 import BeautifulSoup html_doc = \\"\\"\\" <html> <head> <title>Example</title> </head> <body> <h1>Example Title</h1> <p>This is a paragraph.</p> </body> </html> \\"\\"\\" # parse the html soup = BeautifulSoup(html_doc, 'html.parser') # remove all script and style elements for script in soup([\\"script\\", \\"style\\"]): script.extract() # rip it out # separate the text text = soup.get_text() text_list = re.split('[rn]', text) # print the final text for text in text_list: if len(text) > 0: print(text)"},{"prompt":"Create a class in Python to generate a multiplied ndimensional matrix.","completion":"class MultidimensionalMatrix(): def __init__(self, n): self.n = n def multiply_matrix(self, a, b): if len(a[0]) == len(b): result = [[sum(a*b for a,b in zip(i,j)) for j in zip(*b)] for i in a] return result else: print(\\"Incompatible matrix\\")"},{"prompt":"Create a Python function to optimize a given function towards a minimum","completion":"def optimize_function(function): # Perform optimization return min_value"},{"prompt":"Write a python program to print out the contents of a email message.","completion":"import email from email.Parser import Parser # parse email parser = Parser() message = parser.parse(open('sample_email.eml')) # print out the message print(message.as_string())"},{"prompt":"Design a Python script to remove duplicate elements of an array. [10, 1, 2, 5, 1, 10, 3]","completion":"def remove_duplicates(list): result = [] for value in list: if value not in result: result.append(value) return result list = [10, 1, 2, 5, 1, 10, 3] result = remove_duplicates(list) print(result) # Output: [10, 1, 2, 5, 3]"},{"prompt":"Create a Python program to calculate the average age of all the students in a school. Table Name: Student Columns: Name, Age","completion":"total_age = 0 # open and read the file with open('student.csv', 'r') as f: # read the file data = f.read().splitlines() # loop through the rows for row in data: # get the age from each row age = row.split(',')[1] # add the age to the total total_age = total_age + int(age) # calculate the average age of all the students avg_age = total_age / len(data) # print the result print('Average age of all students is: ', avg_age)"},{"prompt":"Create a loop using Python that prints the numbers from 0 to 10 and stops if the number is 8.","completion":"for i in range(11): if i == 8: break else: print(i)"},{"prompt":"Generate a Python program to perform string matching.","completion":"def string_match(str1, str2): if len(str1) > len(str2): longer, shorter = str1, str2 else: longer, shorter = str2, str1 # Check if strings are the same for all possible shifts for i in range(len(longer)-len(shorter)+1): if longer[i:len(shorter)+i] == shorter: return True return False"},{"prompt":"Analyze the given dataset and construct a decision tree classifier in Python.","completion":"from sklearn.tree import DecisionTreeClassifier # Load the dataset X, y = dataset # Split the dataset X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1) # Train Decision Tree classifier clf = DecisionTreeClassifier() clf = clf.fit(X_train, y_train) # Make predictions pred = clf.predict(X_test) # Evaluate accuracy acc = accuracy_score(y_test, pred) print('Accuracy: {:.2f}%'.format(acc*100))"},{"prompt":"Write an Algorithm to sort an array of integers using the insertion sort technique in Python [9, 3, 4, 2, 6, 7]","completion":"def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i] j = i-1 while j>=0 and key < arr[j] : arr[j+1] = arr[j] j -= 1 arr[j+1] = key return arr arr = [9, 3, 4, 2, 6, 7] answer = insertion_sort(arr) print(answer) # [2, 3, 4, 6, 7, 9]"},{"prompt":"Design a class in Python that contains the following functions: set_name, set_age, get_name and get_age.","completion":"class Person(): def __init__(self): self.name = None self.age = None def set_name(self, name): self.name = name def set_age(self, age): self.age = age def get_name(self): return self.name def get_age(self): return self.age"},{"prompt":"Convert the following Python dictionary to a JSON string. data = { Name: John, Age: 30, Cities: [New York, London, Paris] }","completion":"{ \\"Name\\": \\"John\\", \\"Age\\": 30, \\"Cities\\": [\\"New York\\", \\"London\\", \\"Paris\\"] }"},{"prompt":"Generate a code to build a basic decision tree model in Python using scikitlearn library. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.tree import DecisionTreeClassifier # Load the dataset data = pd.read_csv('data.csv') # Separate the features and labels X = data.iloc[:, :-1].values y = data.iloc[:, -1].values # Create an instance of the DecisionTreeClassifier clf = DecisionTreeClassifier() # Fit the model clf.fit(X, y) # Make predictions y_pred = clf.predict(X)"},{"prompt":"Develop a function in Python to detect palindromes.","completion":"def is_palindrome(s): #reverse string and compare rev = s[::-1] if (s == rev): return True else: return False"},{"prompt":"Design a Python script for encrypting text using AES encryption. Example text: hello world","completion":"import base64 from Crypto.Cipher import AES def encrypt(key, text): cipher = AES.new(key, AES.MODE_EAX) nonce = cipher.nonce ciphertext, tag = cipher.encrypt_and_digest(text.encode('utf-8')) return (nonce, tag, ciphertext) key = b'Sixteen byte key' text = \\"hello world\\" nonce, tag, ciphertext = encrypt(key, text) encoded_nonce = base64.b64encode(nonce) encoded_tag = base64.b64encode(tag) encoded_ciphertext = base64.b64encode(ciphertext) print(\\"Encrypted Text:\\", encoded_nonce, encoded_tag, encoded_ciphertext)"},{"prompt":"mplement a Python code to check if a given linked list is palindrome. 1>2>3>2>1","completion":"# Node class class Node: # Function to initialize the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class class LinkedList: # Function to initialize the Linked List object def __init__(self): self.head = None # A helper function to check if a given linked list is a palindrome def checkPalindrome(root): #base case if root == None: return True # Find length of list lenList = 0 iterator = root while iterator != None: lenList = lenList+1 iterator = iterator.next # Find middle pointer # If length is even, moving the second pointer right # So, we can get two middle pointers midPtr = root for i in range(int(lenList/2)-1): midPtr = midPtr.next # Now pointer is at the exact middle # Checking each next node if its same currentNode = midPtr prevNode = None while currentNode != None: nextn = currentNode.next currentNode.next = prevNode prevNode = currentNode currentNode = nextn # now both the halves are swapped # checking each node one by one startPtr1 = root startPtr2 = prevNode # if length is odd # move the second pointer one step right if lenList%2!=0: startPtr2 = startPtr2.next palindrome = True while startPtr1 != None: if startPtr1.data != startPtr2.data: palindrome = False break startPtr1 = startPtr1.next startPtr2 = startPtr2.next # Re-linking both the pointers currentNode = prevNode prevNode = None while currentNode != None: nextn = currentNode.next currentNode.next = prevNode prevNode = currentNode currentNode = nextn return palindrome # Driver Code # Create a linked list with # 1->2->3->2->1 head = Node(1) firstNode = Node(2) secondNode = Node(3) thirdNode = Node(2) fourthNode = Node(1) # Now link the next pointers head.next = firstNode firstNode.next = secondNode secondNode.next = thirdNode thirdNode.next = fourthNode if(checkPalindrome(head)): print (\\"Linked List is palindrome\\") else: print (\\"Linked List is not palindrome\\")"},{"prompt":"Write a computer program in Python which will take an array as input and then return the index of the first occurrence of a given element. A list of 10 random integers and a target number.","completion":"def find_first_occurrence(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 arr = [1, 7, 3, 5, 4, 7, 8, 10, 6, 9] target = 7 index = find_first_occurrence(arr, target) if index != -1: print(\\"The first occurrence of the number is at index\\", index) else: print(\\"The number does not exist in the array.\\")"},{"prompt":"Create a class in Python that can store the details of a student including name, age, gender, GPA, and college.","completion":"class Student: def __init__(self, name, age, gender, gpa, college): self.name = name self.age = age self.gender = gender self.gpa = gpa self.college = college def __str__(self): return f\\"Name: {self.name}, Age: {self.age}, Gender: {self.gender}, GPA: {self.gpa}, College: {self.college}\\""},{"prompt":"Generate code in Python to accept student information like name, age, course and print it. Name: John Doe Age: 23 Course: Data Science","completion":"name = \\"John Doe\\" age = 23 course = \\"Data Science\\" print(\\"Name: \\" + name) print(\\"Age: \\" + str(age)) print(\\"Course: \\" + course)"},{"prompt":"Create a game loop for a game of Pong using Python","completion":"\\"\\"\\" A game loop for a game of Pong using Python \\"\\"\\" import pygame import time # Define constants BLACK = (0, 0, 0) WIDTH = 600 HEIGHT = 400 RADIUS = 20 PADDLE_WIDTH = 10 PADDLE_HEIGHT = 75 # Initialize game pygame.init() screen = pygame.display.set_mode((WIDTH, HEIGHT)) pygame.display.set_caption(\\"Pong\\") center_point = WIDTH/2, HEIGHT/2 clock = pygame.time.Clock() # Game variables paddleA_y = HEIGHT / 2 paddleB_y = HEIGHT / 2 ball_x = WIDTH / 2 ball_y = HEIGHT / 2 ball_change_x = 2 ball_change_y = 2 # Begin game loop while True: # Reset screen screen.fill(BLACK) # Drawing objects ball = pygame.draw.circle(screen, (255,255,255), (int(ball_x), int(ball_y)), RADIUS) paddleA = pygame.draw.rect(screen, (255,255,255), (0, paddleA_y, PADDLE_WIDTH, PADDLE_HEIGHT)) paddleB = pygame.draw.rect(screen, (255,255,255), (WIDTH - PADDLE_WIDTH, paddleB_y, PADDLE_WIDTH, PADDLE_HEIGHT)) # Event loop for event in pygame.event.get(): if event.type == pygame.QUIT: pygame.quit() exit() # Movement of paddles keys = pygame.key.get_pressed() if keys[pygame.K_w]: paddleA_y -= 3 elif keys[pygame.K_s]: paddleA_y += 3 elif keys[pygame.K_UP]: paddleB_y -= 3 elif keys[pygame.K_DOWN]: paddleB_y += 3 # Limit the position of the paddles if paddleA_y < 0: paddleA_y = 0 elif paddleA_y > HEIGHT - PADDLE_HEIGHT: paddleA_y = HEIGHT - PADDLE_HEIGHT if paddleB_y < 0: paddleB_y = 0 elif paddleB_y > HEIGHT - PADDLE_HEIGHT: paddleB_y = HEIGHT - PADDLE_HEIGHT # Ball bouncing to the left if (ball.left <= paddleA.right + 10) and ball.colliderect(paddleA): ball_change_x = -ball_change_x # Ball bouncing to the right if (ball.right >= paddleB.left - 10) and ball.colliderect(paddleB): ball_change_x = -ball_change_x # Ball bouncing up if (ball.top <= 0) or (ball.bottom >= HEIGHT): ball_change_y = -ball_change_y # Ball movement ball_x += ball_change_x ball_y += ball_change_y #Update display pygame.display.flip() clock.tick(30)"},{"prompt":"Write a Python program to implement a process scheduler. Process 1 cpuburst: 10, priority: 1 Process 2 cpuburst: 6, priority: 4 Process 3 cpuburst: 4, priority: 5","completion":"from queue import PriorityQueue class Process: def __init__(self, id, cpuburst, priority): self.id = id self.cpuburst = cpuburst self.priority = priority return def __lt__(self, other): return self.priority < other.priority def Scheduler(processes): ready_queue = PriorityQueue() result = [] for process in processes: ready_queue.put(process) while (not ready_queue.empty()): process = ready_queue.get() result.append([process.id, process.cpuburst]) return result if __name__ ==\\"__main__\\": processes = [Process(1, 10, 1), Process(2, 6, 4), Process(3, 4, 5)] print(Scheduler(processes)) Output: [[1, 10],[2, 6],[3, 4]]"},{"prompt":"Create code to multiply two matrices in Python. A = [[1, 2], [3, 4]] B = [[4, 3], [2, 1]]","completion":"def matrixMultiplication(A, B): N = len(A) C = [[0 for x in range(N)] for y in range(N)] for i in range(N): for j in range(N): for k in range(N): C[i][j] += A[i][k] * B[k][j] return C A = [[1,2], [3,4]] B = [[4,3], [2,1]] print(matrixMultiplication(A, B)) #output: [[8, 5], [20, 13]]"},{"prompt":"Generate a Python program to create a game loop.","completion":"import pygame # Game constants WIDTH = 800 HEIGHT = 600 FPS = 30 # Initialize pygame pygame.init() # Create window screen = pygame.display.set_mode((WIDTH, HEIGHT)) # Game loop running = True while running: # Process events for event in pygame.event.get(): if event.type == pygame.QUIT: running = False # Logic # Rendering screen.fill(0, 0, 0) pygame.display.flip() # Terminates the game pygame.quit()"},{"prompt":"Write a Python program to find all matches of a given string in another string while ignoring case sensitivity. string1 = Hello world string2 = World","completion":"import re def find_match(string1, string2): return re.findall(r'(?i)'+re.escape(string2), string1) string1 = \\"Hello world\\" string2 = \\"World\\" print(find_match(string1, string2))"},{"prompt":"Refactor a Python program by identifying code unnecessarily repeated, converting it into a function, and using the function wherever necessary. def my_function(): for i in range(0, 5): print('loop 1:', i) for i in range(0, 5): print('loop 2:', i)","completion":"def my_function(): print_loop(0, 5, 'loop 1') print_loop(0, 5, 'loop 2') def print_loop(start, end, tag): for i in range(start, end): print(tag + ':', i)"},{"prompt":"Construct a Python program for extracting multiple values from a nested dictionary. dictionary = { data: { user: { id: 123, name: John Doe, email: john@example.com } } }","completion":"dictionary = { \\"data\\": { \\"user\\": { \\"id\\": \\"123\\", \\"name\\": \\"John Doe\\", \\"email\\": \\"john@example.com\\" } } } # extract values from dict user_id = dictionary[\\"data\\"][\\"user\\"][\\"id\\"] user_name = dictionary[\\"data\\"][\\"user\\"][\\"name\\"] user_email = dictionary[\\"data\\"][\\"user\\"][\\"email\\"] print(user_id, user_name, user_email)"},{"prompt":"Optimize an existing Python code to reduce the response time. Original Python code: import time def foo(): iter = 0 for i in range(10000000): iter += i return iter start = time.time() foo() end = time.time() duration = end start print(Time taken: , duration)","completion":"\\"\\"\\" Optimized Python code: import time def foo(): iter = 0 max_val = 10000000 i = 0 while i < max_val: iter += i i += 1 return iter start = time.time() foo() end = time.time() duration = end - start print(\\"Time taken: \\", duration) \\"\\"\\""},{"prompt":"Given two strings, write a python function to check whether one string is a substring of another. String1 = abc String2 = abcdef","completion":"def is_substring(string1, string2): if string1 in string2: return True else: return False"},{"prompt":"Create a Python program that takes a list of numbers as an input from the user and prints out the number that appears the most in the list. 1, 1, 2, 3","completion":"list_of_numbers = [int(x) for x in input(\\"Please enter a list of numbers: \\").split(',')] c = collections.Counter(list_of_numbers) most_common_num = c.most_common(1)[0][0] print(\\"The most common number in the list is \\" + str(most_common_num))"},{"prompt":"Create a program in Python that takes a list of strings as input, sorts the strings in alphabetical order, and prints out the list in reverse alphabetical order. Sample List: [cat,bird,dog,zebra,ant]","completion":"# create a list sample_list = [\\"cat\\", \\"bird\\", \\"dog\\", \\"zebra\\", \\"ant\\"] # sort the list sample_list.sort() # reverse the list sample_list.reverse() # print the reversed list print(sample_list) # ['zebra', 'dog', 'cat', 'bird', 'ant']"},{"prompt":"Create a script in Python for finding the maximum and minimum value of an array. Array: [1, 5, 10, 25, 6]","completion":"def max_min(arr): max = arr[0] min = arr[0] for i in range(1, len(arr)): if arr[i] > max: max = arr[i] if arr[i] < min: min = arr[i] return max, min max, min = max_min(arr)"},{"prompt":"Convert the following Python function to C++ def sum_list(numbers): result = 0 for n in numbers: result += n return resul","completion":"int sum_list(vector<int>& numbers) { int result = 0; for (auto& n : numbers) { result += n; } return result; }"},{"prompt":"Create a program in Python to design and implement a knapsack problem. n = 5, W = 8, weights = [2, 3, 4, 5, 6], values = [2, 5, 6, 12, 9]","completion":"def knapsack(n, W, weights, values): # create a 2D array, dp[n+1][W+1], and fill with zeros dp = [[0 for x in range(W+1)] for x in range(n+1)] #iterating over array rows for i in range(n+1): #iterating over array columns for w in range(W+1): if i==0 or w==0 : dp[i][w] = 0 elif weights[i-1] <= w: dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]) else: dp[i][w] = dp[i-1][w] return dp[n][W] # test print(knapsack(5, 8, [2, 3, 4, 5, 6], [2, 5, 6, 12, 9])) # Output: 20"},{"prompt":"Write a Python program to sum the list of integers in input_list. input_list = [1, 2, 3, 4, 5]","completion":"def sum_list(input_list): total = 0 for item in input_list: total += item return total"},{"prompt":"Generate a Python function that checks to see if a given string is a palindrome. Input: madam","completion":"def is_palindrome(str): reversed_str = \\"\\" for i in range(len(str) - 1, -1, -1): reversed_str += str[i] if str == reversed_str: return True else: return False string = \\"madam\\" result = is_palindrome(string) print(result)"},{"prompt":"Create a program in Python that converts a given number into its corresponding binary representation in 8 bits. 10","completion":"def int_to_bin(n): bin_num = bin(n) bin_num = bin_num[2:].zfill(8) return bin_num print(int_to_bin(10)) # Output: 00001010"},{"prompt":"Automate the testing of a function with different inputs using a testing framework.","completion":"#import the python testing library import unittest #import the function to be tested from mycode import myfunction # Create an instance of the test test = unittest.TestCase() # Create a list of inputs to test inputs = [[1,2], [3,4], [5,6]] # Create expected outputs expected_outputs = [3, 7, 11] # Check the outputs for all inputs for i in range(len(inputs)): result = myfunction(inputs[i][0], inputs[i][1]) test.assertEqual(result, expected_outputs[i])"},{"prompt":"Generate a Python program that examines a given string and prints out the substring between the first and second occurrence of a given substring. string: abHello Worldab substring: ab","completion":"def get_substring(s, t): start_index = s.find(t) end_index = s.find(t, start_index + len(t)) if start_index == -1 or end_index == -1: return \\"\\" else: return s[start_index + len(t) : end_index] s = \\"ab-Hello World-ab\\" t = \\"ab\\" print(get_substring(s, t)) // Output: Hello World"},{"prompt":"Develop a web socket server with Python that will communicate with a web client, and process messages received from the user. Not applicable","completion":"import asyncio import websockets async def handler(websocket, path): message = await websocket.recv() print(f\\"Received {message}\\") await websocket.send(message) start_server = websockets.serve(handler, 'localhost', 8765) asyncio.get_event_loop().run_until_complete(start_server) asyncio.get_event_loop().run_forever()"},{"prompt":"Write a code in Python to find the area of a circle using its radius.","completion":"import math def circle_area(radius): \\"\\"\\" Returns the area of a circle based on its radius \\"\\"\\" return math.pi * (radius**2) if __name__ == '__main__': print(circle_area(4))"},{"prompt":"Create a neural network in Python to recognize the handwritten digits from 0 to 9.","completion":"\\"\\"\\" Create a neural network in Python to recognize the handwritten digits from 0 to 9. \\"\\"\\" import tensorflow as tf import numpy as np from tensorflow import keras # load the MNIST dataset mnist = keras.datasets.mnist (x_train, y_train), (x_test, y_test) = mnist.load_data() # normalize the data x_train, x_test = x_train/255.0, x_test/255.0 # build the model model = keras.Sequential([ keras.layers.Flatten(input_shape=(28, 28)), keras.layers.Dense(256, activation='relu'), keras.layers.Dense(10, activation='softmax') ]) # compile and fit the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) model.fit(x_train, y_train, epochs=10) # evaluate the model test_loss, test_acc = model.evaluate(x_test, y_test) print(\\"Test accuracy: \\", test_acc)"},{"prompt":"Design a function in Python that takes an integer and returns its opposite in sign.","completion":"def opposite_int(num): return -1 * num"},{"prompt":"Build a program in Python to find the factorial of a given number using recursion.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) # Driver Code num = 5 print(factorial(num))"},{"prompt":"Extend the previous Python function to flip the order of the elements in the array.","completion":"def reverse_list(numbers): return numbers[::-1] def flip_array_order(numbers): new_list = [] for i in range(0, len(numbers)): new_list.append(numbers[len(numbers) - i - 1]) return new_list"},{"prompt":"Write a python script to process a dataset and generate a model. Dataset: speech_data.csv columns: student_id, speech_tex","completion":"import pandas as pd # Load dataset speech_data = pd.read_csv(\\"speech_data.csv\\") # Preprocessing X_features = speech_data[\\"speech_text\\"] Y_target = speech_data[\\"student_id\\"] # Split into training and test sets from sklearn.model_selection import train_test_split X_train, X_test, Y_train, Y_test = train_test_split(X_features, Y_target, test_size = 0.2, random_state = 0) # Generate Model from sklearn.linear_model import LogisticRegression classifier = LogisticRegression() classifier.fit(X_train, Y_train) # Evaluate Model accuracy = classifier.score(X_test, Y_test) print('Accuracy of logistic regression classifier on test set: {:.2f}'.format(accuracy))"},{"prompt":"Create a algorithm in Python that will predict the outcome of a dice roll.","completion":"import random def dice_predict(sides): '''Returns a random outcome of dice roll between 1 and specified number of sides.''' return random.randint(1, sides)"},{"prompt":"Create a loop in Python that prints out all the natural numbers below 6.","completion":"for num in range(6): print(num)"},{"prompt":"Create a Python class named “Employee” with the static method that calculates the number of employees in the company.","completion":"class Employee: count = 0 def __init__(self): Employee.count += 1 @staticmethod def get_employee_count(): return Employee.count"},{"prompt":"Create a Euclidean distance function in Python.","completion":"def euclidean_distance(x1, y1, x2, y2): # Calculating distance return math.sqrt(math.pow(x2 - x1, 2) + math.pow(y2 - y1, 2)) # Driver Code x1 = int(input(\\"Enter x1:\\")) y1 = int(input(\\"Enter y1:\\")) x2 = int(input(\\"Enter x2:\\")) y2 = int(input(\\"Enter y2:\\")) print(euclidean_distance(x1,y1,x2,y2))"},{"prompt":"Produce a chart of linear equations in Python. Equations: y = 5x + 2 y = 3x + 6","completion":"import matplotlib.pyplot as plt x = [i for i in range(-10, 10)] y1 = [5*i + 2 for i in x] y2 = [-3*i + 6 for i in x] plt.plot(x, y1, label='y = 5x + 2') plt.plot(x, y2, label='y = -3x + 6') plt.legend() plt.show()"},{"prompt":"Generate a Python script to produce a 2D visualization of a given data set. The data set contains 3 attributes: age, sex and income.","completion":"import matplotlib.pyplot as plt # define data age = [15, 17, 20, 22, 25, 28, 33, 35, 37, 45, 50] sex = [\\"female\\",\\"male\\",\\"male\\",\\"female\\",\\"female\\",\\"male\\",\\"female\\",\\"male\\",\\"male\\",\\"female\\",\\"female\\"] income = [20000, 24000, 25000, 27000, 28000, 26000, 29000, 33000, 31000, 50000, 52000] # create figure for plotting fig = plt.figure() # create 2D scatter graph of data plt.scatter(age, income, c=sex, s=150) # add axis labels plt.xlabel('Age') plt.ylabel('Income') # add legend plt.legend([\\"Female\\",\\"Male\\"]) # show graph plt.show()"},{"prompt":"Solve the following traveling salesman problem using a genetic algorithm. The following distances between cities need to be minized: Berlin > Munich = 755km Berlin > Frankfurt = 463km Munich > Frankfurt = 493km","completion":"# Python Program to Implement # Traveling Salesman Problem using Genetic Algorithm import numpy as np from GeneticAlgorithm import GeneticAlgorithm class TSP(GeneticAlgorithm): def __init__(self, distances): super().__init__(distances) self.distances = distances self.n_cities = len(self.distances) self.init_population(pop_size= 150, chromosome_length=self.n_cities) def init_population(self, pop_size, chromosome_length): self.population = np.zeros((pop_size, chromosome_length)).astype(np.uint8) for i, chromosome in enumerate(self.population): np.random.shuffle(chromosome) def fitness(self, chromosome): current = 0 fitness = 0 for gene in chromosome: fitness += self.distances[current][gene] current = gene return fitness def selection(self): return np.argsort(self.fitness_value)[::-1][:int(self.pop_size/2)] def crossover(self, parent_1, parent_2): index = np.random.randint(1, self.chromosome_len - 1) child_1 = np.hstack((parent_1[0:index], parent_2[index:])) child_2 = np.hstack((parent_2[0:index], parent_1[index:])) return child_1, child_2 def mutation(self, chromosome): index_1 = np.random.randint(0, self.chromosome_len) index_2 = np.random.randint(0, self.chromosome_len) temp = chromosome[index_1] chromosome[index_2] = temp return chromosome if __name__ == '__main__': distances = [[0, 755, 463, 493], [755, 0, 689, 582], [463, 689, 0, 744], [493, 582, 744, 0]] tsp = TSP(distances) tsp.run() tsp.show_result()"},{"prompt":"Write a Python function to parse an HTML response from a website.","completion":"import requests from bs4 import BeautifulSoup def parse_html(url): # Send a get request response = requests.get(url) # Create a BeautifulSoup object soup = BeautifulSoup(response.text, 'lxml') # Find the required data data = soup.find_all('div', class_='content') # Return the data return data"},{"prompt":"Generate a valid JSON representation for the following object. {name: John Doe, age: 34, skills: [JavaScript, Python]}","completion":"{ \\"name\\": \\"John Doe\\", \\"age\\": 34, \\"skills\\": [ \\"JavaScript\\", \\"Python\\" ] }"},{"prompt":"Write a function in Python for sorting a list of objects by an attribute 'name'. list_of_objects = [{name: John, age: 35}, {name: Liz, age: 25}, {name: Max, age: 28}]","completion":"def sort_by_name(lst): return sorted(lst, key=lambda item: item[\\"name\\"])"},{"prompt":"mplement a linear search algorithm in Python to search for an element in an array. arr = [2, 3, 4, 10, 40] x = 10","completion":"def linear_search(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1 arr = [2, 3, 4, 10, 40] x = 10 result = linear_search(arr, x) if result == -1: print(\\"Element is not present in array\\") else: print(\\"Element is present at index\\", result)"},{"prompt":"Rewrite the following Python code using for loop instead of list comprehensions. list_of_nums = [1, 2, 3, 4, 5] list_of_squares = [num**2 for num in list_of_nums]","completion":"list_of_nums = [1, 2, 3, 4, 5] list_of_squares = [] for num in list_of_nums: list_of_squares.append(num**2)"},{"prompt":"Using the input, write a Python function to calculate the average number of items in the list. list_items = [1, 3, 5, 7, 8, 10]","completion":"def average_list_items(list_items): list_length = len(list_items) list_sum = sum(list_items) average = list_sum/list_length return average"},{"prompt":"Create a Python script for formatting a sentence. He went to the store","completion":"def format_sentence(sentence): sentence = sentence.split() sentence = [word.capitalize() for word in sentence] return ' '.join(sentence) print(format_sentence(\\"He went to the store\\"))"},{"prompt":"Create a Python program for encoding and decoding a text string. The program should be able to accept a text string, encode it with a custom encoding scheme, and then decode it to the original text string. Hello World","completion":"# Alphabet string alphabets = 'abcdefghijklmnopqrstuvwxyz' # Function to encode def encoding(text): # Empty string to store encoded string encoded_string = \\"\\" # iterate through all characters of text for i in range(len(text)): # store the corresponding index # of current character c = alphabets.index(text[i]) # append the corresponding alphabet # from alphabet string encoded_string += alphabets[25-c] # Return the encoded string return encoded_string # Function to decode def decoding(encoded_string): # Empty string to store decoded string decoded_string = \\"\\" # iterate through all characters of encoded string for i in range(len(encoded_string)): # store the corresponding index # of current character c = alphabets.index(encoded_string[i]) # append the corresponding alphabet # from alphabet string decoded_string += alphabets[25-c] # Return the decoded string return decoded_string # Driver code encoded_string = encoding(\\"Hello World\\") print(encoded_string) decoded_string = decoding(encoded_string) print(decoded_string)"},{"prompt":"Create a code to calculate the area of the triangle with given side lengths. a=3 b=4 c=5","completion":"# Python Program to find the area of triangle a = 3 b = 4 c = 5 # calculate the semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 print('The area of the triangle is %0.2f' %area)"},{"prompt":"Write a Python program to find the longest subarray with the sum equals to zero. [1, 2, 3, 4, 5, 6, 7]","completion":"def longest_subarray_sum_to_zero(arr): maxlen = 0 # maxlen of the subarray whose sum equals 0 sums = 0 # current sum sum_dict = {0: -1} # used to store previous sums for i in range(len(arr)): sums += arr[i] if sums in sum_dict: maxlen = max(maxlen, i - sum_dict[sums]) else: sum_dict[sums] = i return maxlen"},{"prompt":"Create a short Python program that prints out the current date and time in the specified format. Format YYYYMMDD HH:MM:SS","completion":"import time time_now = time.strftime(\\"%Y-%m-%d %H:%M:%S\\") print(time_now)"},{"prompt":"Write a Python program to find the most frequent item of an input list.","completion":"def most_frequent(input_list): # Create a dictionary to store frequency of each item frequency_dict = {} for item in input_list: if item in frequency_dict: frequency_dict[item] += 1 else: frequency_dict[item] = 1 # Find the most frequent item most_frequent_item = max(frequency_dict, key=frequency_dict.get) return most_frequent_item input_list = [1, 2, 3, 4, 1, 2, 5, 2, 4] most_frequent_item = most_frequent(input_list) print(most_frequent_item)"},{"prompt":"Create a Python script that takes a string of commaseparated temperatures and returns a minimum, maximum, and median value. Input String: 82.0, 84.3, 69.6, 78.2","completion":"input_string = '82.0, 84.3, 69.6, 78.2' temperatures = [float(temp) for temp in input_string.split(',')] min_temp = min(temperatures) max_temp = max(temperatures) median_temp = statistics.median(temperatures) print(f'Minimum temperature: {min_temp}, Maximum temperature: {max_temp}, Median temperature: {median_temp}')"},{"prompt":"Create a web scraper in Python that visits a specific site, scrapes a list of URLs, and stores the results to a database. Not applicable","completion":"import requests import sqlite3 # Connect to the database conn = sqlite3.connect('urls.db') c = conn.cursor() # Scrape the website r = requests.get('http://example.com') # Extract all URLs from the webpage links = r.html.absolute_links # Insert the URLs into the database for link in links: c.execute(\\"INSERT INTO urls VALUES (?)\\", (link,)) # Save changes to the database conn.commit() conn.close()"},{"prompt":"Create a Python program that updates the dictionary with the new keyvalue pair. dictionary = {'apple': 1, 'banana': 2, 'orange': 3} key = 'mango' value = 4","completion":"dictionary = {'apple': 1, 'banana': 2, 'orange': 3} key = 'mango' value = 4 dictionary[key] = value print(dictionary) # {'apple': 1, 'banana': 2, 'orange': 3, 'mango': 4}"},{"prompt":"Generate a program in Python that takes in a string and returns its reverse.","completion":"def reverse_string(string): return string[::-1]"},{"prompt":"Convert the following Python loop into a list comprehension. for x in range(0, 5): if (x%2 == 0): print(x)","completion":"# Solution [x for x in range(0,5) if (x%2 == 0)]"},{"prompt":"Write a Python function to retrieve records from a database table and create a new table with specific columns. Table: Table_1 Rows: id, name, age Create Table Name: Table_2 Columns: id, full_name","completion":"def create_new_table(table_name, columns): conn = sqlite3.connect('database.db') c = conn.cursor() c.execute(f'CREATE TABLE IF NOT EXISTS {table_name} ({columns})') c.execute(f'INSERT INTO {table_name} (SELECT id, name || ' ' || age AS full_name FROM Table_1)') conn.commit() conn.close()"},{"prompt":"Create a visualization using the Python library matplotlib that compares the sales of two products. Product1: [10, 15, 12, 18, 20] Product2: [5, 8, 9, 10, 15]","completion":"import matplotlib.pyplot as plt product1 = [10, 15, 12, 18, 20] product2 = [5, 8, 9, 10, 15] plt.plot(product1, marker='o', label='Product 1') plt.plot(product2, marker='o', label='Product 2') plt.title('Comparing sales of two products') plt.xlabel('Products') plt.ylabel('Sales') plt.legend() plt.show()"},{"prompt":"Execute the following python program # Sum of elements of the given list def sumEle(lst): sum = 0 for ele in lst: sum += ele return sum","completion":"The output of the code is 12."},{"prompt":"Create a RESTful API in Python with Flask that implements a simple message board. It should include endpoints for creating, updating, and deleting messages. Not applicable","completion":"import json from flask import Flask, request, jsonify app = Flask(__name__) messages = {} @app.route('/messages', methods=['GET', 'POST']) def all_messages(): if request.method == 'POST': message = request.get_json() messages[message['id']] = message return jsonify(messages) elif request.method == 'GET': return jsonify(messages) @app.route('/messages/<int:message_id>', methods=['GET', 'PUT', 'DELETE']) def single_message(message_id): if request.method == 'GET': if message_id in messages: return jsonify(messages[message_id]) elif request.method == 'PUT': message = request.get_json() messages[message_id] = message return jsonify(messages[message_id]) elif request.method == 'DELETE': del messages[message_id] return jsonify({'message': 'Message deleted'}) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"mplement a Python program to find all substrings of a given string.","completion":"def all_substrings(input_string): substrings = [] for i in range(len(input_string)): for j in range(i + 1, len(input_string) + 1): substring = input_string[i:j] substrings.append(substring) return substrings #example: all_substrings(\\"Hello\\") # returns ['H', 'He', 'Hel', 'Hell', 'Hello', 'e', 'el', 'ell', 'ello', 'l', 'll', 'llo', 'l', 'lo', 'o']"},{"prompt":"Create a Python program to generate unique coupon codes with a given length and character set. length = 8 characters = '0123456789ABCDEF'","completion":"import random def generate_coupon(length, characters): coupon_code = '' for i in range(length): coupon_code += random.choice(characters) return coupon_code coupon_code = generate_coupon(8, '0123456789ABCDEF') print(coupon_code)"},{"prompt":"Optimize the given code using any of the data structure available in Python. def add(array): sum = 0 for i in range(len(array)): sum = sum + array[i] return sum","completion":"def add(array): sum = 0 for element in array: sum = sum + element return sum"},{"prompt":"Design a Python program to build a menubased system to carry out various operations.","completion":"# Define menu menu = ['Calculator', 'Quiz', 'Message Board', 'Live Chat'] # Print menu print(\\"Menu:\\") for item in menu: print(\\"-\\", item) # Run a loop until user quits the program done = False while not done: # Print list of options selection = input(\\"Type the name of the action you want to select (or type 'Quit to exit): \\") if selection == 'Calculator': # Code for Calculator print(\\"Calculator....\\") elif selection == 'Quiz': # Code for Quiz print(\\"Quiz....\\") elif selection == 'Message Board': # Code for Message Board print(\\"Message Board....\\") elif selection == 'Live Chat': # Code for Live Chat print(\\"Live Chat....\\") elif selection == 'Quit': done = True else: print(\\"Invalid selection, please choose from the list of options.\\")"},{"prompt":"Write a Python program to classify the set of strings into two categories based on their length. strings = ['short', 'longer_string', 'medium_length', 'very_long_string']","completion":"def classify_strings(strings): # initialize lists for each classification short = [] long = [] # classify each string for s in strings: if len(s) <= 6: short.append(s) else: long.append(s) # return classified lists return [short, long] if __name__ == '__main__': strings = ['short', 'longer_string', 'medium_length', 'very_long_string'] print(classify_strings(strings))"},{"prompt":"Create a class for a student in Python","completion":"class Student: def __init__(self, name, age, course): self.name = name self.age = age self.course = course def getCourse(self): return self.course"},{"prompt":"Generate a Python program to split a given list of strings into two halves containing even and odd length strings.","completion":"def split_list(input_list): # Create two empty lists to hold the even and odd length strings even_list = [] odd_list = [] # Iterate through the given list for element in input_list: # If the current length of element is even append it to even_list if len(element) % 2 == 0: even_list.append(element) # Else append it to odd_list else: odd_list.append(element) return even_list, odd_list"},{"prompt":"Create a class in python with a static method which computes the factorial of a given number. <No input>","completion":"class Factorial: @staticmethod def compute_factorial(n): if n < 0: return None if n == 0 or n == 1: return 1 factorial = 1 while n > 1: factorial *= n n -= 1 return factorial # Compute factorial of 5 result = Factorial.compute_factorial(5) print(result)"},{"prompt":"mplement a function to remove all occurrences of the word 'python' from a given sentence. sentence = I love learning Python but sometimes it is hard to understand","completion":"def remove_word(sentence, word): words = sentence.split() new_words = [w for w in words if w != word] return ' '.join(new_words) new_sentence = remove_word(sentence, 'Python')"},{"prompt":"Create a Python program to sort a list of tuples based on the second elements of the tuples. l = [(1, 3), (2, 5), (4, 1), (6, 4)]","completion":"def sortTuples(l): l.sort(key = lambda x: x[1]) return l # Sample Output # [(4, 1), (1, 3), (6, 4), (2, 5)] print(sortTuples(l))"},{"prompt":"Write a Python program that takes user input and prints it back in reverse.","completion":"input_string = input(\\"Enter a string: \\") # Reverse the string reverse_string = input_string[::-1] # Print the reversed string print(reverse_string)"},{"prompt":"Generate a Python function to create an nbyn matrix where the element at row i and column j is i*j","completion":"def create_matrix(n): matrix = [[i * j for j in range(n)] for i in range(n)] return matrix"},{"prompt":"Create an array of 10 integers in Python.","completion":"arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"},{"prompt":"Create a program that will generate random sequence of words.","completion":"import random def generate_random_words(n): words = [\\"hello\\", \\"world\\", \\"foobar\\", \\"python\\", \\"code\\"] output = \\"\\" for _ in range(n): output += random.choice(words) output += \\" \\" return output[:-1]"},{"prompt":"Create an algorithm in Python to print a pattern consisting of '*' and '#' characters. Not applicable","completion":"def pattern(n): m = 0 for i in range(1, n+1): for j in range(1, m+1): print(\\"*\\", end=\\"\\") m = m + 2 for k in range(1, n-i+1): print(\\"#\\", end=\\"\\") print() pattern(5) /* Output: *#*#* **#** ***# **** */"},{"prompt":"Suggest a function for concatenating two strings in Python.","completion":"def concatenate_strings(str1, str2): '''This function concatenates two strings, str1 and str2.''' return str1 + str2"},{"prompt":"Starting from given list of numbers, use Python to generate a new list of integers containing the square root of each number in original list. [4, 9, 16, 25]","completion":"import math def get_sqrt_list(lst): sqrt_list = [] for el in lst: sqrt_list.append(math.sqrt(el)) return sqrt_list print(get_sqrt_list([4, 9, 16, 25]))"},{"prompt":"Design a Python program that asks a user to enter three numbers and prints out the largest one.","completion":"def largest_of_three(): num1 = int(input(\\"Enter the first number: \\")) num2 = int(input(\\"Enter the second number: \\")) num3 = int(input(\\"Enter the third number: \\")) largest = max(num1, num2, num3) print(\\"The largest number is: \\", largest)"},{"prompt":"Generate a Python code to find the minimum and maximum of a given array of integers. [5, 2, 6, 0, 1]","completion":"def get_min_max(numbers): minimum = min(numbers) maximum = max(numbers) return minimum, maximum"},{"prompt":"Write a Python program to print out the numbers from 1 to 20, one number per line.","completion":"for i in range(1, 21): print(i)"},{"prompt":"Create a Python script to crawl a website and retrieve all the titles from the webpages. Not applicable","completion":"import requests from bs4 import BeautifulSoup base_url = 'https://www.example.com' r = requests.get(base_url) soup = BeautifulSoup(r.content, 'html.parser') all_links = soup.find_all('a', href=True) for link in all_links: page_url = base_url + link['href'] page_response = requests.get(page_url) page_content = BeautifulSoup(page_response.content, 'html.parser') page_title = page_content.find('title').text print(page_title)"},{"prompt":"Create a Python program that prints a Fibonacci sequence. length = 10","completion":"def fibonacci(length): fibonacci_list = [1, 1] while len(fibonacci_list) < length: last_item = fibonacci_list[-1] second_last_item = fibonacci_list[-2] next_item = last_item + second_last_item fibonacci_list.append(next_item) return fibonacci_list length = 10 print(fibonacci(length))"},{"prompt":"Create a Python application for creating a card game. The application should generate a random deck of cards to play with, keep track of the score, and calculate the winner of the game. Not applicable","completion":"import random class CardGame: deck = None scores = None def __init__(self): self.deck = self.generateDeck() self.scores = {'player1': 0, 'player2': 0} def generateDeck(self): suits = ['Clubs', 'Diamonds', 'Hearts', 'Spades'] ranks = ['2','3','4','5','6','7','8','9','10','J','Q','K','A'] deck = [] for suit in suits: for rank in ranks: deck.append([suit, rank]) random.shuffle(deck) return deck # Returns total points of a player's cards def getScore(self, player): score = 0 for card in self.deck: if card[1] in ['J', 'Q', 'K']: score += 10 elif card[1] == 'A': score += 11 else: score += int(card[1]) self.scores[player] = score return score # Check if a player won or there is a tie def isWinner(self, player1, player2): score1 = self.getScore(player1) score2 = self.getScore(player2) if score1 > score2: print(f'{player1} Wins') elif score2 > score1: print(f'{player2} Wins') else: print('It is a tie')"},{"prompt":"Write a Python function to create a new list filled with the divided result of a given list and a specific number. numbers = [2, 8, 10] divisor = 2","completion":"def divide_list(numbers, divisor): return [i/divisor for i in numbers]"},{"prompt":"Write a Python script to print the Fibonacci series from 0 to n. 10","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b print(Fibonacci(10))"},{"prompt":"Write a Python program to get the current date and time","completion":"from datetime import datetime def current_date_time(): now = datetime.now() return now result = current_date_time() print(result)"},{"prompt":"Automate a Python program to check the length of each word in a given string.","completion":"def lengthWord(inp): result = [] for word in inp.split(' '): result.append(len(word)) return result # Driver Code inp = \\"Generating a code generation task instructions\\" print(lengthWord(inp))"},{"prompt":"Create a python program to output ‘Hello World’ 10 times","completion":"for i in range(10): print(\\"Hello World\\")"},{"prompt":"Edit a given python program Input: A program to round off a number to the nearest integer def round_off(a): if (a math.floor(a) >= 0.5): a = math.ceil(a) else: a = math.floor(a) return","completion":"import math def round_off(a): if (a - math.floor(a) >= 0.5): a = math.ceil(a) else: a = math.floor(a) return int(a)"},{"prompt":"Design a Python program to calculate the total number of possible routes between two points on a grid. Grid dimensions: 4 x 6 Start point: [0,0] End point: [3,5]","completion":"def num_routes(grid_dim, start, end): paths = 1 xdiff = end[0] - start[0] ydiff = end[1] - start[1] num_rows, num_cols = grid_dim max_x = num_rows - 1 - xdiff max_y = num_cols - 1 - ydiff for x in range(0, max_x): paths *= (x+ydiff+1) for y in range(0, max_y): paths *= (y+xdiff+1) return int(paths/math.factorial(xdiff+ydiff)) print(num_routes([4,6], [0,0], [3,5])) // Output: 126"},{"prompt":"To run the server, execute the Python script with the path to a valid configuration file and an optional log file. The server will listen on the specified address and port for HTTP requests and on the specified port for XMPP requests. The server will handle requests for uploading and downloading files, and will automatically expire files that are over the user quota soft limit and older than the specified maximum age. The server will also calculate and enforce user quota hard limits. To enable XMPP support, provide a valid component JID and secret in the configuration file.","completion":"#!/usr/bin/env python3 import argparse import base64 import errno import hashlib import logging import mimetypes import os import random import shutil import ssl import string import sys import time import urllib.parse import yaml from sleekxmpp.componentxmpp import ComponentXMPP from threading import Event from threading import Lock from threading import Thread from http.server import HTTPServer, BaseHTTPRequestHandler from socketserver import ThreadingMixIn LOGLEVEL=logging.DEBUG global files global files_lock global config global quotas def normalize_path(path, sub_url_length): \\"\\"\\" Normalizes the URL to prevent users from grabbing arbitrary files via \`../' and the like. \\"\\"\\" return os.path.normcase(os.path.normpath(path))[sub_url_length:] def expire(quotaonly=False, kill_event=None): \\"\\"\\" Expire all files over 'user_quota_soft' and older than 'expire_maxage' - quotaonly - If true don't delete anything just calculate the used space per user and return. Otherwise make an exiry run every config['expire_interval'] seconds. - kill_event - threading.Event to listen to. When set, quit to prevent hanging on KeyboardInterrupt. Only applicable when quotaonly = False \\"\\"\\" global config global quotas while True: if not quotaonly: # Wait expire_interval secs or return on kill_event if kill_event.wait(config['expire_interval']): return now = time.time() # Scan each senders upload directories seperatly for sender in os.listdir(config['storage_path']): senderdir = os.path.join(config['storage_path'], sender) quota = 0 filelist = [] # Traverse sender directory, delete anything older expire_maxage and collect file stats. for dirname, dirs, files in os.walk(senderdir, topdown=False): removed = [] for name in files: fullname = os.path.join(dirname, name) stats = os.stat(fullname) if not quotaonly: if now - stats.st_mtime > config['expire_maxage']: logging.debug('Expiring %s. Age: %s', fullname, now - stats.st_mtime) try: os.unlink(fullname) removed += [name] except OSError as e: logging.warning(\\"Exception '%s' deleting file '%s'.\\", e, fullname) quota += stats.st_size filelist += [(stats.st_mtime, fullname, stats.st_size)] else: quota += stats.st_size filelist += [(stats.st_mtime, fullname, stats.st_size)] if dirs == [] and removed == files: # Directory is empty, so we can remove it logging.debug('Removing directory %s.', dirname) try: os.rmdir(dirname) except OSError as e: logging.warning(\\"Exception '%s' deleting directory '%s'.\\", e, dirname) if not quotaonly and config['user_quota_soft']: # Delete oldest files of sender until occupied space is <= user_quota_soft filelist.sort() while quota > config['user_quota_soft']: entry = filelist[0] try: logging.debug('user_quota_soft exceeded. Removing %s. Age: %s', entry[1], now - entry[0]) os.unlink(entry[1]) quota -= entry[2] except OSError as e: logging.warning(\\"Exception '%s' deleting file '%s'.\\", e, entry[1]) filelist.pop(0) quotas[sender] = quota logging.debug('Expire run finished in %fs', time.time() - now) if quotaonly: return class MissingComponent(ComponentXMPP): def __init__(self, jid, secret, port): ComponentXMPP.__init__(self, jid, secret, \\"localhost\\", port) self.register_plugin('xep_0030') self.register_plugin('upload',module='plugins.upload') self.add_event_handler('request_upload_slot',self.request_upload_slot) def request_upload_slot(self, iq): global config global files global files_lock request = iq['request'] maxfilesize = int(config['max_file_size']) if not request['filename'] or not request['size']: self._sendError(iq,'modify','bad-request','please specify filename and size') elif maxfilesize < int(request['size']): self._sendError(iq,'modify','not-acceptable','file too large. max file size is '+str(maxfilesize)) elif 'whitelist' not in config or iq['from'].domain in config['whitelist'] or iq['from'].bare in config['whitelist']: sender = iq['from'].bare sender_hash = base64.urlsafe_b64encode(hashlib.sha1(sender.encode()).digest()).decode('ascii').rstrip('=') if config['user_quota_hard'] and quotas.setdefault(sender_hash, 0) + int(request['size']) > config['user_quota_hard']: msg = 'quota would be exceeded. max file size is %d' % (config['user_quota_hard'] - quotas[sender_hash]) logging.debug(msg) self._sendError(iq, 'modify', 'not-acceptable', msg) return filename = request['filename'] folder = ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(int(len(sender_hash) / 2))) sane_filename = \\"\\".join([c for c in filename if (c == '_' or c == '.' or ord(c) >= 48 and ord(c) <= 122)]).rstrip() path = os.path.join(sender_hash, folder) if sane_filename: path = os.path.join(path, sane_filename) with files_lock: files.add(path) print(path) reply = iq.reply() reply['slot']['get'] = urllib.parse.urljoin(config['get_url'], path) reply['slot']['put'] = urllib.parse.urljoin(config['put_url'], path) reply.send() else: self._sendError(iq,'cancel','not-allowed','not allowed to request upload slots') def _sendError(self, iq, error_type, condition, text): reply = iq.reply() iq.error() iq['error']['type'] = error_type iq['error']['condition'] = condition iq['error']['text'] = text iq.send() class HttpHandler(BaseHTTPRequestHandler): def do_PUT(self): print('do put') global files global files_lock global config path = normalize_path(self.path, config['put_sub_url_len']) length = int(self.headers['Content-Length']) maxfilesize = int(config['max_file_size']) if config['user_quota_hard']: sender_hash = path.split('/')[0] maxfilesize = min(maxfilesize, config['user_quota_hard'] - quotas.setdefault(sender_hash, 0)) if maxfilesize < length: self.send_response(400,'file too large') self.end_headers() else: print('path: '+path) files_lock.acquire() if path in files: files.remove(path) files_lock.release() filename = os.path.join(config['storage_path'], path) os.makedirs(os.path.dirname(filename)) remaining = length with open(filename,'wb') as f: data = self.rfile.read(min(4096,remaining)) while data and remaining >= 0: databytes = len(data) remaining -= databytes if config['user_quota_hard']: quotas[sender_hash] += databytes f.write(data) data = self.rfile.read(min(4096,remaining)) self.send_response(200,'ok') self.end_headers() else: files_lock.release() self.send_response(403,'invalid slot') self.end_headers() def do_GET(self, body=True): global config path = normalize_path(self.path, config['get_sub_url_len']) slashcount = path.count('/') if path[0] in ('/', '') or slashcount < 1 or slashcount > 2: self.send_response(404,'file not found') self.end_headers() else: filename = os.path.join(config['storage_path'], path) print('requesting file: '+filename) try: with open(filename,'rb') as f: self.send_response(200) mime, _ = mimetypes.guess_type(filename) if mime is None: mime = 'application/octet-stream' self.send_header(\\"Content-Type\\", mime) if mime[:6] != 'image/': self.send_header(\\"Content-Disposition\\", 'attachment; filename=\\"{}\\"'.format(os.path.basename(filename))) fs = os.fstat(f.fileno()) self.send_header(\\"Content-Length\\", str(fs.st_size)) self.end_headers() if body: shutil.copyfileobj(f, self.wfile) except FileNotFoundError: self.send_response(404,'file not found') self.end_headers() def do_HEAD(self): self.do_GET(body=False) def do_OPTIONS(self): if 'allow_web_clients' in config and config['allow_web_clients']: self.send_response(200, 'OK') self.send_header(\\"Access-Control-Allow-Origin\\", \\"*\\") self.send_header(\\"Access-Control-Allow-Methods\\", \\"GET,PUT\\") self.end_headers() else: self.send_response(501, 'NO OPTIONS') self.end_headers() class ThreadedHTTPServer(ThreadingMixIn, HTTPServer): \\"\\"\\"Handle requests in a separate thread.\\"\\"\\" if __name__ == \\"__main__\\": parser = argparse.ArgumentParser() parser.add_argument(\\"-c\\", \\"--config\\", default='config.yml', help='Specify alternate config file.') parser.add_argument(\\"-l\\", \\"--logfile\\", default=None, help='File where the server log will be stored. If not specified log to stdout.') args = parser.parse_args() with open(args.config,'r') as ymlfile: config = yaml.load(ymlfile) files = set() files_lock = Lock() kill_event = Event() logging.basicConfig(level=LOGLEVEL, format='%(asctime)-24s %(levelname)-8s %(message)s', filename=args.logfile) if not config['get_url'].endswith('/'): config['get_url'] = config['get_url'] + '/' if not config['put_url'].endswith('/'): config['put_url'] = config['put_url'] + '/' try: config['get_sub_url_len'] = len(urllib.parse.urlparse(config['get_url']).path) config['put_sub_url_len'] = len(urllib.parse.urlparse(config['put_url']).path) except ValueError: logging.warning(\\"Invalid get_sub_url ('%s') or put_sub_url ('%s'). sub_url's disabled.\\", config['get_sub_url'], config['put_sub_url']) config['get_sub_url_int'] = 1 config['put_sub_url_int'] = 1 # Sanitize config['user_quota_*'] and calculate initial quotas quotas = {} try: config['user_quota_hard'] = int(config.get('user_quota_hard', 0)) config['user_quota_soft'] = int(config.get('user_quota_soft', 0)) if config['user_quota_soft'] or config['user_quota_hard']: expire(quotaonly=True) except ValueError: logging.warning(\\"Invalid user_quota_hard ('%s') or user_quota_soft ('%s'). Quotas disabled.\\", config['user_quota_soft'], config['user_quota_soft']) config['user_quota_soft'] = 0 config['user_quota_hard'] = 0 # Sanitize config['expire_*'] and start expiry thread try: config['expire_interval'] = float(config.get('expire_interval', 0)) config['expire_maxage'] = float(config.get('expire_maxage', 0)) if config['expire_interval'] > 0 and (config['user_quota_soft'] or config['expire_maxage']): t = Thread(target=expire, kwargs={'kill_event': kill_event}) t.start() else: logging.info('Expiring disabled.') except ValueError: logging.warning(\\"Invalid expire_interval ('%s') or expire_maxage ('%s') set in config file. Expiring disabled.\\", config['expire_interval'], config['expire_maxage']) try: server = ThreadedHTTPServer((config['http_address'], config['http_port']), HttpHandler) except Exception as e: import traceback logging.debug(traceback.format_exc()) kill_event.set() sys.exit(1) if 'http_keyfile' in config and 'http_certfile' in config: server.socket = ssl.wrap_socket(server.socket, keyfile=config['http_keyfile'], certfile=config['http_certfile']) jid = config['component_jid'] secret = config['component_secret'] port = int(config.get('component_port',5347)) xmpp = MissingComponent(jid,secret,port) if xmpp.connect(): xmpp.process() print(\\"connected\\") try: server.serve_forever() except (KeyboardInterrupt, Exception) as e: if e == KeyboardInterrupt: logging.debug('Ctrl+C pressed') else: import traceback logging.debug(traceback.format_exc()) kill_event.set() else: print(\\"unable to connect\\") kill_event.set()"},{"prompt":"Create a Python script for generating a random string of a desired length. length of 10","completion":"import random def generate_random_string(length): chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%&*' output_str = '' for _ in range(length): output_str += random.choice(chars) return output_str result = generate_random_string(10) print(result)"},{"prompt":"Create a function that implements a binary search algorithm in Python. The function should accept two parameters: an array of integers and a target value. The function should return the index of the target value within the array, or 1 if the value does not exist. [1, 3, 5, 7, 8], 8","completion":"def binary_search(arr, target): start = 0 end = len(arr) - 1 while start <= end: mid = (start + end) // 2 if arr[mid] == target: return mid elif arr[mid] > target: end = mid - 1 else: start = mid + 1 return -1"},{"prompt":"Create a Dockerfile that will run the program you wrote in Task 4. Not applicable","completion":"FROM python:3.7 RUN mkdir -p /usr/src/app WORKDIR /usr/src/app EXPOSE 8080 COPY . /usr/src/app RUN pip install -r requirements.txt ENTRYPOINT [\\"python\\", \\"scrape.py\\"]"},{"prompt":"vent a Python library to facilitate working with big data such as Apache Spark or Hadoop.","completion":"import os import sys # Library to facilitate working with Apache Spark and Hadoop class PySparkLib: def __init__(self): # initialize the Spark and Hadoop contexts self._sc_context = None self._hc_context = None def create_spark_context(self, **kwargs): # creates a Spark context from pyspark import SparkContext self._sc_context = SparkContext(master=kwargs['master'], appName=kwargs['appName']) def create_hadoop_context(self, **kwargs): # creates a Hadoop context from huwap import HadoopContext self._hc_context = HadoopContext(**kwargs) def read_data_from_hdfs(self, resources): # reads data from an HDFS resource hdfs_data = self._hc_context.read(resources[0]) return hdfs_data def write_data_to_hdfs(self, resource, data): # write data to an HDFS resource self._hc_context.write(resource, data)"},{"prompt":"Design a basic addition function in Python.","completion":"def add(a, b): return a + b"},{"prompt":"w would you efficiently sort a list with 1 million integers using Python?","completion":"The most efficient way to sort a list with 1 million integers using Python would be to use the Timsort algorithm. Timsort is an adaptive, stable sorting algorithm based on merge sort and insertion sort, which runs in O(n log n) time. To use Timsort to sort a Python list, we can use the built-in sorted() function, which utilizes Timsort under the hood. For example: sorted_list = sorted(list_of_integers) # list_of_integers is the list with 1 million integers."},{"prompt":"Given the following JSON string, write a program in Python to parse it.","completion":"import json json_string = '{\\"name\\": \\"John\\", \\"age\\": 20, \\"courses\\": [\\"English\\", \\"Maths\\"]}' data = json.loads(json_string) name = data['name'] age = data['age'] courses = data['courses'] print('Name:', name) print('Age:', age) print('Courses:', courses)"},{"prompt":"Create a Python program to create a histogram to show the frequency of different words in a given sentence. This is a sentence with a lot of different words.","completion":"import re import matplotlib.pyplot as plt # Get the sentence sentence = \\"This is a sentence with a lot of different words.\\" # Get all the words words = re.findall(r'w+', sentence) # Count the frequency of each word frequency = {} for word in words: count = frequency.get(word, 0) frequency[word] = count + 1 # Create the labels and counts for the histogram labels, counts = list(frequency.keys()), list(frequency.values()) # Plot the histogram using matplotlib plt.bar(labels, counts, width=0.8, align='center') plt.title('Frequency of Words') plt.show()"},{"prompt":"Translate the following description into a Python code to find the maximum and minimum of a given list of numbers. [1, 5 ,10, 3, 9, 4]","completion":"def find_max_min(list_of_numbers): max_number = list_of_numbers[0] min_number = list_of_numbers[0] for number in list_of_numbers: if number > max_number: max_number = number if number < min_number: min_number = number return max_number, min_number list_of_numbers = [1, 5, 10, 3, 9, 4] max_number, min_number = find_max_min(list_of_numbers) print(f\\"The maximum number is {max_number} and the minimum number is {min_number}\\")"},{"prompt":"Design a function in python to generate random numbers.","completion":"import random def generate_random(): my_list = [random.randint(0,100) for i in range(5)] return my_list"},{"prompt":"Create a functional programming program to calculate the value of the Fibonacci number up to the nth number in Python. The number should be 9.","completion":"def fibonacci(n): if n < 0: raise ValueError(\\"Negative number\\") if n == 0 or n == 1: return n return fibonacci(n-1) + fibonacci(n-2) # calculate 9th Fibonacci number print(fibonacci(9))"},{"prompt":"Write a Python code to implement a list containing at least three dictionaries.","completion":"list_of_dicts = [ { \\"name\\": \\"John\\", \\"age\\": 32, \\"country\\": \\"USA\\" }, { \\"name\\": \\"Peter\\", \\"age\\": 28, \\"country\\": \\"Australia\\" }, { \\"name\\": \\"David\\", \\"age\\": 30, \\"country\\": \\"Canada\\" } ]"},{"prompt":"Write a Python program to check if a given number is a prime number or not.","completion":"def is_prime(num): if num <= 1: return False for i in range(2, num): if num % i == 0: return False return True"},{"prompt":"Create a basic bot for Telegram using Python. It should respond to the /start command by sending a welcome message and display a list of command the bot supports. Not applicable","completion":"import telebot bot = telebot.TeleBot(\\"<bot token>\\") @bot.message_handler(commands=['start']) def send_welcome(message): bot.reply_to(message, 'Welcome! Here are the commands this bot supports:n /list - list all itemsn /add - add a new itemn /remove - remove an itemn ') # Bot logic bot.polling()"},{"prompt":"Construct a function to calculate the sums of the rows of a 2D array in Python.","completion":"def calculateRowSums(arr: List[List[int]]): sums = [] for row in arr: sums.append(sum(row)) return sums if __name__ == \\"__main__\\": arr = [[1, 2, 3], [4, 5, 6]] print(calculateRowSums(arr))"},{"prompt":"Update the following Python program to validate a phone number. import re phone = 4049999999 pattern = r^[09]{3}[09]{3}[09]{4} result = re.match(pattern, phone) if result: print(Valid phone number) else: print(Invalid phone number)","completion":"import re phone = \\"404-999-9999\\" pattern = r\\"^[0-9]{3}-[0-9]{3}-[0-9]{4}\\" result = re.match(pattern, phone) if result and len(phone) == 12: print(\\"Valid phone number\\") else: print(\\"Invalid phone number\\")"},{"prompt":"Write a Python program to return the top 5 customers by average purchase amount in a given month. Sales Data: {customer_id: 1, month: 1, amount: 40000}, {customer_id: 2, month: 1, amount: 10000}, {customer_id: 3, month: 1, amount: 20000}, {customer_id: 1, month: 2, amount: 30000}, {customer_id: 2, month: 2, amount: 15000}, {customer_id: 3, month: 2, amount: 50000}","completion":"import pandas as pd # Create a dataframe from the input data df = pd.DataFrame([ {\\"customer_id\\": 1, \\"month\\": 1, \\"amount\\": 40000}, {\\"customer_id\\": 2, \\"month\\": 1, \\"amount\\": 10000}, {\\"customer_id\\": 3, \\"month\\": 1, \\"amount\\": 20000}, {\\"customer_id\\": 1, \\"month\\": 2, \\"amount\\": 30000}, {\\"customer_id\\": 2, \\"month\\": 2, \\"amount\\": 15000}, {\\"customer_id\\": 3, \\"month\\": 2, \\"amount\\": 50000}, ]) # Group by customer and get the average purchase amount in each month result = df.groupby('customer_id')['amount'].mean().sort_values(ascending=False).head(5) # Print the result print(result)"},{"prompt":"Replace the forloop in the following Python function with an equivalent while loop. def count_down(value): ret = 1 for i in range(value, 0, 1): ret *= i return re","completion":"def count_down(value): ret = 1 while value > 0: ret *= value value -= 1 return ret"},{"prompt":"Create a function to find the number of times the given string appears in the array. Python, Python","completion":"def count_occurrences(items, string): count = 0 for item in items: if item == string: count += 1 return count print(count_occurrences(['Python', 'Python'], \\"Python\\")) # Output: 2"},{"prompt":"Use Python loops to generate a new list containing the square of all numbers in the following list. list = [1,2,3,4,5]","completion":"\\"\\"\\" Generate a new list containing the square of all numbers in a list \\"\\"\\" # input list in_list = [1,2,3,4,5] # output list out_list = [] # loop over the input list for i in in_list: # calculate the square of the element and append it to output list out_list.append(i**2) # print the output list print(out_list)"},{"prompt":"Edit a Python program given to produce a new program with different outputs according to the given criteria. none","completion":"def double(value): return value * 2 def triple(value): return value * 3 def quad(value): return value * 4 def calculate_value(n): if n > 10: return double(n) elif n > 5: return triple(n) else: return quad(n) print(calculate_value(-2)) print(calculate_value(8)) print(calculate_value(13))"},{"prompt":"Create a Python program that takes a list of tuples as input and generates a dictionary where each tuple is a keyvalue pair [('apple', 'fruit'), ('goat', 'animal'), ('three', 'number')]","completion":"my_dict = { 'apple': 'fruit', 'goat': 'animal', 'three': 'number' }"},{"prompt":"Build a chatbot in Python.","completion":"import random #GREETINGS greetings = [\\"Hi\\", \\"Hey\\", \\"Hello\\", \\"Hi there\\", \\"What's up?\\"] #PROMPTS prompts = [\\"how may I help you?\\", \\"want to talk about something?\\", \\"What do you want to talk about?\\"] #Program def respond(message): if any(greeting in message for greeting in greetings): index = random.randint(0, len(prompts)-1) return prompts[index] return \\"\\" #Example test user_message = \\"Hey\\" bot_response = respond(user_message) print(bot_response) # What do you want to talk about?"},{"prompt":"Design a web API for a database powered by MongoDB in Python.","completion":"# Import the required libraries import pymongo import json # Establish a connection to the database client = pymongo.MongoClient(\\"mongodb://localhost:27017\\") mydb = client[\\"mydb\\"] # Define the API endpoints @app.route(\\"/api/v1/getAll\\", methods=[\\"GET\\"]) def api_get_all(): # Get all the documents from the database and return as JSON documents = mydb.mycollection.find({}) data = [json.loads(d) for d in documents] return json.dumps({\\"data\\": data}) @app.route(\\"/api/v1/add\\", methods=[\\"POST\\"]) def api_add(): # Create a document from the \`request.data\` and insert it into the database doc = json.loads(request.data) mydb.mycollection.update(doc) return json.dumps({\\"message\\": \\"Document added successfully!\\"})"},{"prompt":"Generate a Python 2D list containing a 10x10 checkerboard pattern","completion":"board = [[0]*10 for _ in range(10)] for i in range(10): for j in range(10): if i%2 == j%2: board[i][j] = 1 print board"},{"prompt":"Write a Python program to find the maximum possible sum of a sequence of consecutive numbers in a given array of integers. [2, 6, 2, 3, 8, 4]","completion":"def max_sum_sequence(arr): curr_max = 0 max_so_far = 0 for i in range(0, len(arr)): curr_max = max(arr[i], curr_max + arr[i]) max_so_far = max(max_so_far, curr_max) return max_so_far arr = [2, 6, -2, -3, 8, 4] max_sum = max_sum_sequence(arr) print(max_sum)"},{"prompt":"Edit a Python program so that it calculates the sum of two integers. # Program to add two numbers num1 = 3 num2 = 5 print(3 + 5)","completion":"# Program to add two numbers num1 = 3 num2 = 5 print(num1 + num2)"},{"prompt":"We have a list of students and marks as shown below. Write a Python program that prints out the names of students with marks above 60. students = [['Bob', 90], ['James', 86], ['Grace', 78], ['Charles', 62], ['Martin', 64]]","completion":"def findStudentsAboveSixty(students): output = [] for student in students: name = student[0] mark = student[1] if mark > 60: output.append(name) return output students = [['Bob', 90], ['James', 86], ['Grace', 78], ['Charles', 62], ['Martin', 64]] passedStudents = findStudentsAboveSixty(students) print(\\"Students with marks above 60: \\" + str(passedStudents))"},{"prompt":"Write a Python program to check if a string contains a specific substring","completion":"def contains_substring(string, substring): return substring in string"},{"prompt":"Can you create a program Python to find the top ten most frequent words in a text? text=Python is a great language to learn. It is very powerful and easy to learn.","completion":"import collections #Splitting the text into words words=text.split() #Creating a frequency table word_freq = collections.Counter(words) #Printing the top 10 most frequent words for word, frequency in word_freq.most_common(10): print(word, frequency)"},{"prompt":"Create a Python program to encrypt a given text This is a secret message","completion":"def encrypt(text, key): cipher = \\"\\" for c in text: cipher += chr(ord(c) + key) return cipher #Driver code if __name__ == '__main__': plaintext = \\"This is a secret message\\" key = 3 ciphertext = encrypt(plaintext, key) print(ciphertext)"},{"prompt":"Write a Python function to count the number of occurances of a given letter in a given string. s = Hello World","completion":"def count_letter(s, letter): count = 0 for char in s: if char == letter: count += 1 return count s = \\"Hello World\\" letter = \\"l\\" print(count_letter(s, letter))"},{"prompt":"Create a function in Python which takes a string as an input and adds the number 1 to each character in the string. mystring = Hello","completion":"def add_one_to_each_char(mystring): new_str = \\"\\" for c in mystring: new_str += chr(ord(c) + 1) return new_str"},{"prompt":"Write code in Python that takes a given dictionary and returns the difference of the maximal and minimal values of the dictionary. {'a': 5, 'b': 2, 'c': 3}","completion":"def calculate_difference(input_dict): max_val = max(input_dict.values()) min_val = min(input_dict.values()) return max_val - min_val input_dict = {'a': 5, 'b': -2, 'c': 3} difference = calculate_difference(input_dict) print(difference)"},{"prompt":"Generate code in Python to find the factorial of a given number.","completion":"def factorial(n): if n == 0: return 1 else: return n*factorial(n-1)"},{"prompt":"Write a function in Python to find the index of a given element in a given list of numbers.","completion":"def find_index(nums, element): for i, num in enumerate(nums): if num == element: return i return -1"},{"prompt":"Create a program in Python which will take in a sentence and print out each word in reverse. 'This sentence will be reversed'","completion":"string = 'This sentence will be reversed' words = string.split() for word in words: print(word[::-1], end=\\" \\") # Output: sihT ecnetnes lliw eb desrever"},{"prompt":"Create a python script to detect a palindrome from a given string.","completion":"def is_palindrome(s): s = s.lower() return s == s[::-1]"},{"prompt":"Create a Python application to send emails. The application should use the SMTP library to send messages to a specified address. Email Address: example@example.com","completion":"import smtplib # Email information sender = 'user@example.com' receivers = 'example@example.com' message = \\"\\"\\"From: From User <user@example.com> To: To User <example@example.com> Subject: SMTP e-mail test This is a test e-mail message. \\"\\"\\" try: smtpObj = smtplib.SMTP('localhost') smtpObj.sendmail(sender, receivers, message) print (\\"Successfully sent email\\") except SMTPException: print (\\"Error: unable to send email\\")"},{"prompt":"Write a code to perform Principal Component Analysis (PCA) in Python. Data set: <noinput>","completion":"from sklearn.decomposition import PCA # create PCA object pca = PCA(n_components=None) # fit the object with the data pca.fit(data) # transform the data into lower dimension pca_data = pca.transform(data) # variance of each PC pca.explained_variance_ratio_"},{"prompt":"Construct an algorithm in Python to identify whether a number is odd or even. x = 7","completion":"def findNumberType(x): if x % 2 == 0: return \\"Even\\" else: return \\"Odd\\" x = 7 print(findNumberType(x)) # Odd"},{"prompt":"Optimize the following Python code for faster runtime performance for i in range(5): print(Hello)","completion":"for i in range(5): print(\\"Hello\\", end=\\"n\\")"},{"prompt":"Create a RESTful API with Python, using the Flask framework. Not applicable","completion":"from flask import Flask, jsonify, request app = Flask(__name__) @app.route('/', methods=['GET']) def home(): return 'Welcome to the API' @app.route('/data', methods=['POST']) def add_data(): data = request.get_json() # Do something with data return jsonify({'message': 'Data added successfully'}) @app.route('/data/int:id', methods=['GET']) def get_data(id): data = # Retrieve data from database return jsonify({'data': data}) if __name__ == '__main__': app.run()"},{"prompt":"mplement an algorithm in Python to search for a number in a given sorted list of numbers. arr = [1,3,5,7,8,9] number = 7","completion":"def binarySearch(arr, number): left = 0 right = len(arr) - 1 while left <= right: mid = (left + right)//2 if arr[mid] == number: return mid elif arr[mid] < number: left = mid + 1 else: right = mid - 1 return -1 if __name__ == '__main__': arr = [1, 3, 5, 7, 8, 9] number = 7 result = binarySearch(arr, number) print(result)"},{"prompt":"Generate five lines of code in Python that will check if a given number is prime and print a corresponding message. Not applicable","completion":"# Function to check if the number is prime or not def is_prime(n): # Corner case if n <= 1: return False # Check from 2 to n-1 for i in range(2, n): if n % i == 0: return False return True # Driver Code num = 11 # Check if prime if is_prime(num): print(\\"{} is a prime number\\".format(num)) else: print(\\"{} is not a prime number\\".format(num))"},{"prompt":"Modify the following Python funciton to return the second largest element in the list. x = [1, 2, 3, 4, 5]","completion":"def second_largest(x): x.sort() return x[-2]"},{"prompt":"Write a Python program to calculate the distance between two points","completion":"def calculate_distance(x1, y1, x2, y2): return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5"},{"prompt":"Describe a function in Python which takes two integer arguments and outputs the product of them","completion":"def product(a, b): return a * b"},{"prompt":"Create a Python dictionary where the keys are student IDs and the values are the corresponding student names. id_lst = [123, 456, 789] name_lst = [John, Emma, David]","completion":"def create_dict(id_lst, name_lst): dic = {} for i in range(len(id_lst)): dic[id_lst[i]] = name_lst[i] return dic result = create_dict(id_lst, name_lst) print(result)"},{"prompt":"Design an algorithm in Python that can check if an input word is an anagram of the other. word1: rat word2: ar","completion":"def anagramCheck(word1, word2): # Removing whitespace characters w1 = word1.replace(\\" \\", \\"\\") w2 = word2.replace(\\" \\", \\"\\") # Check lengths if len(w1) != len(w2): return False # Convert to lowercase w1 = w1.lower() w2 = w2.lower() # Create dictionary to count frequency of each character count_dict1 = dict() count_dict2 = dict() for ch in w1: count_dict1[ch] = count_dict1.get(ch, 0) + 1 for ch in w2: count_dict2[ch] = count_dict2.get(ch, 0) + 1 # Check if character frequencies are equal if count_dict1 != count_dict2: return False return True word1 = 'rat' word2 = 'art' result = anagramCheck(word1, word2) if result: print('The words are anagrams.') else: print('The words are not anagrams.')"},{"prompt":"mplement a solution to mark the middle element in a singly linked list in Python. Not applicable","completion":"class Node: def __init__(self, data): self.data = data self.next = None class SinglyLinkedList: def __init__(self): self.head = None self.tail = None self.middle = None def addNode(self, node): if self.head is None: self.head = node self.tail = node self.middle = node else: self.tail.next = node self.tail = node # To mark the middle node if self.head.next is self.middle: self.middle = node def mark_middle(self): if self.middle is None: return self.middle.data = 'Middle Node'"},{"prompt":"Design a Python program to display the details of a given employee data. John, 25, 10,000, Developer","completion":"class Employee: def __init__(self, name, age, salary, designation): self.name = name self.age = age self.salary = salary self.designation = designation def show_details(self): print(\\"Employee Details\\") print(\\"-------------------------------\\") print(\\"Name:\\", self.name) print(\\"Age:\\", self.age) print(\\"Salary:\\", self.salary) print(\\"Designation:\\", self.designation) emp1 = Employee(\\"John\\", 25, 10000, \\"Developer\\") emp1.show_details()"},{"prompt":"Train a recurrent neural network in Python to generate a text summary of a given article The text of a news article about the US 2020 presidential electio","completion":"import tensorflow as tf from tensorflow.keras.layers import Input, Dense, Embedding, GRU, Dropout def build_model(vocab_size, embedding_dim): model = tf.keras.Sequential() # Embedding layer model.add(Embedding(vocab_size, embedding_dim, input_length=500)) # GRU layer model.add(GRU(128, dropout=0.25)) # Dropout layer model.add(Dropout(0.5)) # Output layer model.add(Dense(vocab_size, activation='softmax')) return model"},{"prompt":"Create a minimum heap in python","completion":"class MinHeap: def __init__(self): self.heap_list = [0] self.current_size = 0 def insert(self, item): self.heap_list.append(item) self.current_size += 1 self.fix_new_item() def fix_new_item(self): idx = self.current_size while idx // 2 > 0: if self.heap_list[idx] < self.heap_list[idx // 2]: temp = self.heap_list[idx // 2] self.heap_list[idx // 2] = self.heap_list[idx] self.heap_list[idx] = temp idx = idx // 2"},{"prompt":"Create a Python function that checks whether a given list contains any repeated elements.","completion":"def has_duplicates(arr): # Create an empty set s = set() # Traverse through the list for item in arr: # If the element is present # in the set then it is a duplicate if item in s: return True else: s.add(item) # No duplicate element found return False"},{"prompt":"Create a Python program to classify a given sentence according to its sentiment (positive, negative, or neutral). The interface is very intuitive and userfriendly.","completion":"import nltk import sklearn from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB sentence = 'The interface is very intuitive and user-friendly.' # Tokenize the sentence tokens = nltk.word_tokenize(sentence) # Get the features from the tokens count_vect = CountVectorizer() word_count = count_vect.fit_transform(tokens) # Create a Multinomial Naive Bayes classifier clf = MultinomialNB().fit(word_count, ['positive']) # Predict the sentiment of the sentence prediction = clf.predict(word_count) # Print the result print(f'The sentiment of the sentence is {prediction[0]}.')"},{"prompt":"Write a Python program to remove the duplicates from a given list of numbers while preserving the order of elements. [1, 2, 3, 2, 1]","completion":"def remove_duplicates(lst): new_list = [] for i in lst: if i not in new_list: new_list.append(i) return new_list print(remove_duplicates([1, 2, 3, 2, 1]))"},{"prompt":"Create a new python class called Person that takes a name and age as parameters.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age"},{"prompt":"Write a Python program to predict stock prices for a given stock. Given stock: XYZ","completion":"import numpy as np import pandas as pd from sklearn.linear_model import LinearRegression # Read data data = pd.read_csv(\\"xyz.csv\\") # Separate data for prediction X = np.array(data['Date']).reshape(-1, 1) y = np.array(data['Price']).reshape(-1, 1) # Train the model model = LinearRegression() model.fit(X, y) # Predict the prices predicted_price = model.predict(np.array([\\"2020-10-01\\"]).reshape(-1, 1)) print(\\"Predicted Stock Price for 2020-10-01:\\", predicted_price[0][0])"},{"prompt":"Develop a function in Python that takes a string as input and finds a pattern in it and replaces it with a given set of characters. abcabcabc, abc, xyz","completion":"def replacePattern(string, pattern, replacement): return string.replace(pattern, replacement) result = replacePattern(\\"abcabcabc\\", \\"abc\\", \\"xyz\\") print(result)"},{"prompt":"Write a Python program to calculate the sum of the values for all numbers between 1 and n (inclusive).","completion":"def sum_of_values(n): \\"\\"\\"Find the sum of all numbers between 1 and n (inclusive).\\"\\"\\" return sum(range(1, n+1))"},{"prompt":"Create an algorithm in any language (Python, JavaScript, etc.) that searches for a given value in a binary search tree. tree = {value: 24, left: {value: 19, left: {value: 12, left: None, right: None}, right: None}, right: {value: 38, left: None, right: None}} search_term = 12","completion":"def search(tree, searchTerm): if tree['value'] == searchTerm: return True if tree['left'] != None: if search(tree['left'], searchTerm): return True if tree['right'] != None: if search(tree['right'], searchTerm): return True return False tree = {value: 24, left: {value: 19, left: {value: 12, left: None, right: None}, right: None}, right: {value: 38, left: None, right: None}} search_term = 12 if search(tree, search_term): print(\\"Value found\\") else: print(\\"Value not found\\")"},{"prompt":"Use a while loop to print the numbers from 0 to 10 in Python.","completion":"# Initialise the counter i = 0 # Use a while loop to print numbers from 0 to 10 while i <= 10: print(i) i += 1"},{"prompt":"Write a Python script that collects data from two different APIs and merges the response data into a single dataset. Open Movie Database (OMDB) API Key: 12345678 Football Data API Key: 87654321","completion":"import json import requests # Fetch data from OMDB API def fetch_omdb_data(omdb_api_key): omdb_data = [] # Query for movies omdb_url = f'http://www.omdbapi.com/?apikey={omdb_api_key}&s=movies' response = requests.get(omdb_url) data = response.json() for item in data['Search']: omdb_data.append( (item['Title'], item['Year'], item['Type'], item['imdbID']) ) # Fetch data from Football Data API def fetch_football_data(football_api_key): football_data = [] # Query for football matches football_url = f'http://api.football-data.org/v2/matches?apikey={football_api_key}' response = requests.get(football_url) data = response.json() for item in data['matches']: football_data.append( (item['competition']['name'], item['season']['startDate'], item['season']['endDate'], item['utcDate']) ) # Merge data from both APIs merged_data = [] for omdb_row in omdb_data: for football_row in football_data: if (omdb_row[1] >= football_row[1] and omdb_row[1] <= football_row[2]): merged_data.append(( *omdb_row, *football_row )) # Write merged data into JSON file with open('merged_data.json', 'w') as outfile: json.dump(merged_data, outfile) # Run functions omdb_api_key = '12345678' football_api_key = '87654321' fetch_omdb_data(omdb_api_key) fetch_football_data(football_api_key)"},{"prompt":"Use a machine learning model in Python to predict whether a song belongs to a given genre. Sample datasets for the genre, artist, and song","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import LabelEncoder from sklearn.svm import SVC from sklearn.metrics import accuracy_score # Load the dataset data = pd.read_csv(\\"data.csv\\") # Split the dataset into training and testing sets X = data.drop(['genre', 'artist', 'song'], axis=1) y = data['genre'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Encode the labels encoder = LabelEncoder() y_train = encoder.fit_transform(y_train) y_test = encoder.transform(y_test) # Train a Support Vector Classifier model clf = SVC(kernel='linear') clf.fit(X_train, y_train) # Make predictions y_pred = clf.predict(X_test) accuracy = accuracy_score(y_test, y_pred)"},{"prompt":"Build an algorithm in Python for classification task.","completion":"def classify(x): if (x > 0): return 'positive' else: return 'negative'"},{"prompt":"Write a Python program for solving a basic NQueen problem. The program should take N as an input and return the positions of all N queens on an NxN board. N = 4","completion":"def solveNQueens(n): # A utility function to check if # a queen can be placed on board[row][col] # Note that this function is called when # \\"col\\" queens are already placed in columns # from 0 to col -1. So we need to check # only left side for attacking queens def is_safe(row, col): # Check this row on left side for i in range(col): if board[row][i] == 1: return False # Check upper diagonal on left side for i, j in zip(range(row, -1, -1), range(col, -1, -1)): if board[i][j] == 1: return False # Check lower diagonal on left side for i, j in zip(range(row, n, 1), range(col, -1, -1)): if board[i][j] == 1: return False return True # Place N queens on an NxN board def solve(n): # A board for the queen positions board = [[0 for _ in range(n)] for _ in range(n)] # A list to store the positions of the queens result = [] # Start from the first column solveQueen(board, 0, result) return result # Function to check if the queen can be # placed or not def solveQueen(board, col, result): # If all the queens are already placed if col == n: # Add the result to the result list # Append the list of a single result result.append(list()) # Add the queen's positions to the current list for i in range(n): current_result = [] for j in range(n): # Add only the positions with the queen # in it to the current list if board[i][j] == 1: current_result.append(j + 1) # Add the current list to the result list result[-1].append(current_result) return # Try the current row for i in range(n): # If the column of the current row is safe # for the queen if is_safe(i, col): # Place the queen board[i][col] = 1 # Increase the column by 1 # and recursively call the # function for the next column solveQueen(board, col + 1, result) # Else backtrack board[i][col] = 0 # start solving result = solve(n) # Print the result for res in result: print(res) n = 4 solveNQueens(n)"},{"prompt":"Create a Python program to determine the missing elements from a given list. [2, 4, 6, 8, 10]","completion":"def find_missing_elements(list): missing_elements = [] for i in range(min(list), max(list)): if i not in list: missing_elements.append(i) return missing_elements"},{"prompt":"Generate a graphical representation of a network using Python and matplotlib. Number of nodes = 10","completion":"import matplotlib.pyplot as plt node_list = [] for i in range(10): node_list.append(i) G = nx.Graph() G.add_nodes_from(node_list) nx.draw(G, with_labels=True) plt.show()"},{"prompt":"Create a Python program to convert a binary string to its decimal equivalent.","completion":"def bin_to_dec(binary_string): decimal = 0 for digit in binary_string: decimal = decimal * 2 + int(digit) return decimal print(bin_to_dec('1100'))"},{"prompt":"Create a program in Python to generate a random password. The password should contain a minimum of 8 characters including lowercase letters, uppercase letters, numbers, and special characters. Not applicable","completion":"import string import random def generate_password(length=8): characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(characters) for _ in range(length)) password = generate_password() print(password)"},{"prompt":"Create a Python script to predict the stock price of a given company in the next 30 days. Input data: Historical stock prices of a particular company","completion":"\\"\\"\\" Predicts the stock price of a given company in the next 30 days \\"\\"\\" import pandas as pd import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression import numpy as np #Get the historical stock prices data = pd.read_csv('historical_stock_prices.csv') #Train the linear regression model using the historical stock prices X = data['date'].values.reshape(-1,1) y = data['price'].values.reshape(-1,1) linear_regressor = LinearRegression() linear_regressor.fit(X, y) #Predict the stock prices for the next 30 days next_30_days = np.arange(X.flatten()[-1]+1, X.flatten()[-1]+30, 1).reshape(-1,1) y_pred = linear_regressor.predict(next_30_days) #Print the predicted stock prices print(\\"The predicted stock prices for the next 30 days are:\\") for i in range(30): print(\\"Date:\\", next_30_days[i][0],\\"Price:\\",y_pred[i][0])"},{"prompt":"Generate a Python program that reads in a sentence and generates a new string with the first letter of every word capitalized.","completion":"def capitalize_words(sentence): words = sentence.split() capitalized_words = [] for word in words: capitalized_words.append(word.capitalize()) return ' '.join(capitalized_words) sentence = input(\\"Enter a sentence: \\") print(capitalize_words(sentence))"},{"prompt":"Write a Python program to print all the divisors of a give number n.","completion":"def divisors(n): for i in range(1,n+1): if n % i == 0: print(i) n = 15 divisors(15) # Output: 1 3 5 15"},{"prompt":"Construct a Python code to find the maximum in a given list. [10, 3, 16, 17, 8]","completion":"def find_max(list): max = list[0] for i in list: if i > max: max = i return max list = [10, 3, 16, 17, 8] print(\\"Maximum number in the list:\\", find_max(list))"},{"prompt":"egrate a provided python code with a graphical userinterface. import tkinter def mbutton(): t = tkinter.Toplevel() t.geometry('400x400') t.title('New Window') tkinter.Button(t, text='Click me').pack() root = tkinter.Tk() root.geometry('200x200') tkinter.Button(root, text='Open new window', command=mbutton).pack()","completion":"import tkinter def mbutton(): t = tkinter.Toplevel() t.geometry('400x400') t.title('New Window') tkinter.Button(t, text='Click me').pack() root = tkinter.Tk() root.geometry('200x200') b1 = tkinter.Button(root, text='Open new window', command=mbutton) b2 = tkinter.Button(root, text='Close', command=root.destroy) b1.pack() b2.pack() root.mainloop()"},{"prompt":"Create a Python program to calculate the customer's total purchase amount from a list of items and amounts. The list of items and amounts: item1: 10 item2: 20 item3: 30","completion":"items = [ {'name': 'item1', 'amount': 10}, {'name': 'item2', 'amount': 20}, {'name': 'item3', 'amount': 30}, ] total = 0 for item in items: total += item['amount'] print(f\\"Total: {total}\\") # Output: Total: 60"},{"prompt":"Create a Web Scrapper using Python to collect a list of all the phone numbers from a specific website. https://www.example.com/","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.example.com/\\" r = requests.get(url) data = r.text soup = BeautifulSoup(data, 'html.parser') phone_numbers = [] for tag in soup.find_all('a'): text = tag.text.replace(\\" \\", \\"\\").replace(\\"-\\",\\"\\") if (text.isdigit() and len(text) == 10): phone_numbers.append(text) print(\\"Phone Numbers: \\", phone_numbers)"},{"prompt":"Modify an existing Python program to make it more efficient. # Program to find the sum of all elements in an array def sum_arr(arr): s = 0 for n in arr: s += n return","completion":"# Program to find the sum of all elements in an array def sum_arr(arr): # faster sum using numpy return np.sum(arr)"},{"prompt":"Create a Python program to sort a list of strings by the descending length of the strings and alphabetically in case of ties. [hello, world, from, code]","completion":"unsorted_list = [\\"hello\\", \\"world\\", \\"from\\", \\"code\\"] sorted_list = sorted(unsorted_list, key=lambda s: (-len(s), s)) print(sorted_list) # Output: [\\"world\\", \\"hello\\", \\"from\\", \\"code\\"]"},{"prompt":"Design a python program to create a directory","completion":"import os def create_dir(path): try: os.mkdir(path) except OSError: print(\\"Creation of the directory %s failed\\" % path) else: print(\\"Successfully created the directory %s \\" % path)"},{"prompt":"Create a python module to edit a dataframe The DataFrame is composed of two columns, 'id' and 'value'.","completion":"import pandas as pd def edit_dataframe(df): # Adding the column 'new_value' df['new_value'] = df['value'] + 1 # Replacing values in the 'id' column df['new_id'] = df['id'].map(lambda x: 'id_' + str(x)) # Updating the value in the 'value' column df.value = df.value * 2 return df"},{"prompt":"Generate a Python Program to generate a Bar Chart from a given list of data data=[2,4,6,7]","completion":"import matplotlib.pyplot as plt def generate_bar_chart(data): plt.bar(list(range(len(data))), data) plt.xlabel('x') plt.ylabel('y') plt.title('Bar Chart') plt.show() if __name__ == '__main__': generate_bar_chart(data)"},{"prompt":"Write a code to generate a random 6 digit number in Python.","completion":"import random def generate_6_digit_number(): return random.randint(100000, 999999) num = generate_6_digit_number() print(num)"},{"prompt":"This code generates a first order Redfield kernel. To use it, import the necessary modules and create an instance of the ApproachRedfield class. Call the prepare_arrays() method to initialize the necessary arrays, then call generate_fct() to generate the coupling terms. Finally, call generate_current() to calculate the current and energy current.","completion":"\\"\\"\\"Module containing python functions, which generate first order Redfield kernel. For docstrings see documentation of module neumann1.\\"\\"\\" import numpy as np import itertools from ...wrappers.mytypes import doublenp from ...wrappers.mytypes import complexnp from ..aprclass import Approach from .neumann1 import Approach1vN # --------------------------------------------------------------------------------------------------- # Redfield approach # --------------------------------------------------------------------------------------------------- class ApproachRedfield(Approach): kerntype = 'pyRedfield' def prepare_arrays(self): Approach1vN.prepare_arrays(self) def clean_arrays(self): Approach1vN.clean_arrays(self) def generate_fct(self): Approach1vN.generate_fct(self) def generate_coupling_terms(self, b, bp, bcharge): Tba, phi1fct = self.leads.Tba, self.phi1fct si, kh = self.si, self.kernel_handler nleads, statesdm = si.nleads, si.statesdm acharge = bcharge-1 ccharge = bcharge+1 # -------------------------------------------------- for a, ap in itertools.product(statesdm[acharge], statesdm[acharge]): if kh.is_included(a, ap, acharge): bpap = si.get_ind_dm1(bp, ap, acharge) ba = si.get_ind_dm1(b, a, acharge) fct_aap = 0 for l in range(nleads): fct_aap += (+ Tba[l, b, a]*Tba[l, ap, bp]*phi1fct[l, bpap, 0].conjugate() - Tba[l, b, a]*Tba[l, ap, bp]*phi1fct[l, ba, 0]) kh.set_matrix_element(fct_aap, b, bp, bcharge, a, ap, acharge) # -------------------------------------------------- for bpp in statesdm[bcharge]: if kh.is_included(bpp, bp, bcharge): fct_bppbp = 0 for a in statesdm[acharge]: bppa = si.get_ind_dm1(bpp, a, acharge) for l in range(nleads): fct_bppbp += +Tba[l, b, a]*Tba[l, a, bpp]*phi1fct[l, bppa, 1].conjugate() for c in statesdm[ccharge]: cbpp = si.get_ind_dm1(c, bpp, bcharge) for l in range(nleads): fct_bppbp += +Tba[l, b, c]*Tba[l, c, bpp]*phi1fct[l, cbpp, 0] kh.set_matrix_element(fct_bppbp, b, bp, bcharge, bpp, bp, bcharge) # -------------------------------------------------- if kh.is_included(b, bpp, bcharge): fct_bbpp = 0 for a in statesdm[acharge]: bppa = si.get_ind_dm1(bpp, a, acharge) for l in range(nleads): fct_bbpp += -Tba[l, bpp, a]*Tba[l, a, bp]*phi1fct[l, bppa, 1] for c in statesdm[ccharge]: cbpp = si.get_ind_dm1(c, bpp, bcharge) for l in range(nleads): fct_bbpp += -Tba[l, bpp, c]*Tba[l, c, bp]*phi1fct[l, cbpp, 0].conjugate() kh.set_matrix_element(fct_bbpp, b, bp, bcharge, b, bpp, bcharge) # -------------------------------------------------- for c, cp in itertools.product(statesdm[ccharge], statesdm[ccharge]): if kh.is_included(c, cp, ccharge): cpbp = si.get_ind_dm1(cp, bp, bcharge) cb = si.get_ind_dm1(c, b, bcharge) fct_ccp = 0 for l in range(nleads): fct_ccp += (+ Tba[l, b, c]*Tba[l, cp, bp]*phi1fct[l, cpbp, 1] - Tba[l, b, c]*Tba[l, cp, bp]*phi1fct[l, cb, 1].conjugate()) kh.set_matrix_element(fct_ccp, b, bp, bcharge, c, cp, ccharge) # -------------------------------------------------- def generate_current(self): E, Tba = self.qd.Ea, self.leads.Tba phi1fct, phi1fct_energy = self.phi1fct, self.phi1fct_energy si = self.si ncharge, nleads, statesdm = si.ncharge, si.nleads, si.statesdm phi1 = self.phi1 current = self.current energy_current = self.energy_current kh = self.kernel_handler for charge in range(ncharge-1): ccharge = charge+1 bcharge = charge for c, b in itertools.product(statesdm[ccharge], statesdm[bcharge]): cb = si.get_ind_dm1(c, b, bcharge) for l in range(nleads): current_l, energy_current_l = 0, 0 for bp in statesdm[bcharge]: if not kh.is_included(bp, b, bcharge): continue phi0bpb = kh.get_phi0_element(bp, b, bcharge) cbp = si.get_ind_dm1(c, bp, bcharge) fct1 = phi1fct[l, cbp, 0] fct1h = phi1fct_energy[l, cbp, 0] phi1[l, cb] += Tba[l, c, bp]*phi0bpb*fct1 current_l += Tba[l, b, c]*Tba[l, c, bp]*phi0bpb*fct1 energy_current_l += Tba[l, b, c]*Tba[l, c, bp]*phi0bpb*fct1h for cp in statesdm[ccharge]: if not kh.is_included(c, cp, ccharge): continue phi0ccp = kh.get_phi0_element(c, cp, ccharge) cpb = si.get_ind_dm1(cp, b, bcharge) fct2 = phi1fct[l, cpb, 1] fct2h = phi1fct_energy[l, cpb, 1] phi1[l, cb] += Tba[l, cp, b]*phi0ccp*fct2 current_l += Tba[l, b, c]*phi0ccp*Tba[l, cp, b]*fct2 energy_current_l += Tba[l, b, c]*phi0ccp*Tba[l, cp, b]*fct2h current[l] += -2*current_l.imag energy_current[l] += -2*energy_current_l.imag self.heat_current[:] = energy_current - current*self.leads.mulst # ---------------------------------------------------------------------------------------------------"},{"prompt":"Generate a Python function to perform sentiment analysis on a given text.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_analysis(text): analyzer = SentimentIntensityAnalyzer() scores = analyzer.polarity_scores(text) sentiment = None if scores['compound'] > 0: sentiment = 'positive' elif scores['compound'] == 0: sentiment = 'neutral' else: sentiment = 'negative' return sentiment"},{"prompt":"Write a function in Python that will take in two numbers and return their sum. num1 = 5; num2 = 10;","completion":"def sum(num1, num2): return num1 + num2 sum(5, 10); // returns 15"},{"prompt":"Create a program in Python that takes a string as an argument and tokenizes it, removing any punctuation. 'This sentence has commas, periods, and colons.'","completion":"import string def tokenize(string): tokens = string.split() tokens = [token.strip(string.punctuation) for token in tokens] return tokens tokenized_str = tokenize('This sentence has commas, periods, and colons.') print(tokenized_str) # Output: ['This', 'sentence', 'has', 'commas', 'periods', 'and', 'colons']"},{"prompt":"Write a Python program to optimize the given binary search tree.","completion":"def optimize_bst(tree): \\"\\"\\"Given a binary search tree, optimizes the tree for better search performance.\\"\\"\\" if tree is None: return optimize_bst(tree.left) optimize_bst(tree.right) if tree.left and tree.right: tree.data = min(tree.left.data, tree.right.data)"},{"prompt":"Create a Python program which takes two lists as input and outputs all the elements which appear in both lists. list1 = [1, 2, 3] list2 = [3, 4, 5]","completion":"def list_intersection(list1, list2): return [item for item in list1 if item in list2] list1 = [1, 2, 3] list2 = [3, 4, 5] intersectedList = list_intersection(list1, list2) print(intersectedList) # Output: [3]"},{"prompt":"Create a Python function called \`fitForecast\` that takes in the following parameters: * \`y\` (pandas DataFrame): A pandas DataFrame of the time series to be forecasted. The first column should be the date or time period, and the remaining columns should be the time series data. * \`h\` (int): The number of periods ahead to forecast. * \`sumMat\` (numpy array): A numpy array that specifies the hierarchical structure of the time series. It should be a matrix of 0s and 1s, where the rows represent the bottomlevel series and the columns represent the higherlevel series. If the ith bottomlevel series belongs to the jth higherlevel series, then the (i,j) entry of the matrix should be 1; otherwise, it should be 0. * \`nodes\` (list): A list of lists that specifies the hierarchical structure of the time series. The ith element of the list should be a list of the indices of the bottomlevel series that belong to the ith higherlevel series. * \`method\` (string): The method to use for forecasting. It should be one of the following: BU, AHP, PHA, FP, OLS, WLSS, or WLSV. * \`freq\` (string): The frequency of the time series data. It should be one of the following: D, W, M, Q, or Y. * \`include_history\` (boolean): Whether or not to include the historical data in the forecast. * \`cap\` (pandas DataFrame or None): A pandas DataFrame that specifies the capacity of the time series data. It should have the same number of columns as \`y\`, and the same number of rows as the bottomlevel series. If a column has a capacity of None, then it is assumed to be unbounded. * \`capF\` (pandas DataFrame or None): A pandas DataFrame that specifies the capacity of the forecasted data. It should have the same number of columns as \`y\`, and the same number of rows as the bottomlevel series. If a column has a capacity of None, then it is assumed to be unbounded. * \`changepoints\` (pandas DataFrame or None): A pandas DataFrame that specifies the changepoints of the time series data. It should have the same number of columns as \`y\`, and the same number of rows as the bottomlevel series. If a column has a changepoint of None, then it is assumed to have no changepoints. * \`n_changepoints\` (int or list): The number of changepoints to use for the time series data. If it is an integer, then the same number of changepoints is used for all series. If it is a list, then the ith element of the list specifies the number of changepoints to use for the ith series. * \`yearly_seasonality\` (boolean): Whether or not to include yearly seasonality in the forecast. * \`weekly_seasonality\` (boolean): Whether or not to include weekly seasonality in the forecast. * \`daily_seasonality\` (boolean): Whether or not to include daily seasonality in the forecast. * \`holidays\` (pandas DataFrame or None): A pandas DataFrame that specifies the holidays to include in the forecast. It should have two columns: \`ds\`, which contains the dates of the holidays, and \`holiday\`, which contains the names of the holidays. * \`seasonality_prior_scale\` (float): The prior scale for the seasonality component of the forecast. * \`holidays_prior_scale\` (float): The prior scale for the holidays component of the forecast. * \`changepoint_prior_scale\` (float): The prior scale for the changepoints component of the forecast. * \`mcmc_samples\` (int): The number of MCMC samples to use for the forecast. * \`interval_width\` (float): The width of the uncertainty intervals for the forecast. * \`uncertainty_samples\` (int): The number of uncertainty samples to use for the forecast. * \`boxcoxT\` (list or None): A list of the lambda values to use for the BoxCox transformation of the time series data. If a lambda value is None, then no transformation is applied to the corresponding series. * \`skipFitting\` (boolean): Whether or not to skip the fitting of the Prophet models and use prefitted models instead. The function should return a dictionary of pandas DataFrames, where the keys of the dictionary are the indices of the bottomlevel series, and the values of the dictionary are the forecasts for the corresponding series. The DataFrames should have two columns: \`ds\`, which contains the dates of the forecasts, and \`yhat\`, which contains the forecasted values.","completion":"# -*- coding: utf-8 -*- \\"\\"\\" Name: fitForecast.py Author: Collin Rooney Last Updated: 7/18/2017 This script will contain functions for all types of hierarchical modeling approaches. It will use the prophet package as a forecasting tool. The general idea of it is very similar to the hts package in R, but it is a little more specific with how the dataframe is put together. Credit to Rob J. Hyndman and research partners as much of the code was developed with the help of their work https://www.otexts.org/fpp https://robjhyndman.com/publications/ Credit to Facebook and their fbprophet package https://facebookincubator.github.io/prophet/ It was my intention to make some of the code look similar to certain sections in the Prophet and (Hyndman's) hts packages \\"\\"\\" import pandas as pd import numpy as np from fbprophet import Prophet import contextlib, os from scipy.special import inv_boxcox #%% def fitForecast(y, h, sumMat, nodes, method, freq, include_history, cap, capF, changepoints, n_changepoints, yearly_seasonality, weekly_seasonality, daily_seasonality, holidays, seasonality_prior_scale, holidays_prior_scale, changepoint_prior_scale, mcmc_samples, interval_width, uncertainty_samples, boxcoxT, skipFitting): forecastsDict = {} mse = {} resids = {} nForecasts = sumMat.shape[0] # If you have a ditionary of Prophet Dataframes already, skip the prophet part, and put all the values into a dictionary if skipFitting == True: for key in range(len(y.columns.tolist())-1): forecastsDict[key] = pd.DataFrame(y.iloc[:,key+1]) forecastsDict[key] = forecastsDict[key].rename(columns = {forecastsDict[key].columns[0] : 'yhat'}) if skipFitting == False: if method == 'FP': nForecasts = sum(list(map(sum, nodes)))+1 for node in range(nForecasts): nodeToForecast = pd.concat([y.iloc[:, [0]], y.iloc[:, node+1]], axis = 1) if isinstance(cap, pd.DataFrame): cap1 = cap.iloc[:, node] else: cap1 = cap if isinstance(capF, pd.DataFrame): cap2 = capF.iloc[:, node] else: cap2 = capF if isinstance(changepoints, pd.DataFrame): changepoints1 = changepoints[:, node] else: changepoints1 = changepoints if isinstance(n_changepoints, list): n_changepoints1 = n_changepoints[node] else: n_changepoints1 = n_changepoints # Put the forecasts into a dictionary of dataframes with contextlib.redirect_stdout(open(os.devnull, \\"w\\")): # Prophet related stuff nodeToForecast = nodeToForecast.rename(columns = {nodeToForecast.columns[0] : 'ds'}) nodeToForecast = nodeToForecast.rename(columns = {nodeToForecast.columns[1] : 'y'}) if capF is None: growth = 'linear' m = Prophet(growth=growth, changepoints=changepoints1, n_changepoints=n_changepoints1, yearly_seasonality=yearly_seasonality, weekly_seasonality=weekly_seasonality, daily_seasonality=daily_seasonality, holidays=holidays, seasonality_prior_scale=seasonality_prior_scale, holidays_prior_scale=holidays_prior_scale, changepoint_prior_scale=changepoint_prior_scale, mcmc_samples=mcmc_samples, interval_width=interval_width, uncertainty_samples=uncertainty_samples) else: growth = 'logistic' m = Prophet(growth=growth, changepoints=changepoints, n_changepoints=n_changepoints, yearly_seasonality=yearly_seasonality, weekly_seasonality=weekly_seasonality, daily_seasonality=daily_seasonality, holidays=holidays, seasonality_prior_scale=seasonality_prior_scale, holidays_prior_scale=holidays_prior_scale, changepoint_prior_scale=changepoint_prior_scale, mcmc_samples=mcmc_samples, interval_width=interval_width, uncertainty_samples=uncertainty_samples) nodeToForecast['cap'] = cap1 m.fit(nodeToForecast) future = m.make_future_dataframe(periods = h, freq = freq, include_history = include_history) if capF is not None: future['cap'] = cap2 # Base Forecasts, Residuals, and MSE forecastsDict[node] = m.predict(future) resids[node] = y.iloc[:, node+1] - forecastsDict[node].yhat[:-h].values mse[node] = np.mean(np.array(resids[node])**2) # If logistic use exponential function, so that values can be added correctly if capF is not None: forecastsDict[node].yhat = np.exp(forecastsDict[node].yhat) if boxcoxT is not None: forecastsDict[node].yhat = inv_boxcox(forecastsDict[node].yhat, boxcoxT[node]) forecastsDict[node].trend = inv_boxcox(forecastsDict[node].trend, boxcoxT[node]) if \\"seasonal\\" in forecastsDict[node].columns.tolist(): forecastsDict[node].seasonal = inv_boxcox(forecastsDict[node].seasonal, boxcoxT[node]) if \\"daily\\" in forecastsDict[node].columns.tolist(): forecastsDict[node].daily = inv_boxcox(forecastsDict[node].daily, boxcoxT[node]) if \\"weekly\\" in forecastsDict[node].columns.tolist(): forecastsDict[node].weekly = inv_boxcox(forecastsDict[node].weekly, boxcoxT[node]) if \\"yearly\\" in forecastsDict[node].columns.tolist(): forecastsDict[node].yearly = inv_boxcox(forecastsDict[node].yearly, boxcoxT[node]) if \\"holidays\\" in forecastsDict[node].columns.tolist(): forecastsDict[node].yearly = inv_boxcox(forecastsDict[node].yearly, boxcoxT[node]) # Now, Revise them if method == 'BU' or method == 'AHP' or method == 'PHA': y1 = y.copy() nCols = len(list(forecastsDict.keys()))+1 if method == 'BU': ''' Pros: No information lost due to aggregation Cons: Bottom level data can be noisy and more challenging to model and forecast ''' hatMat = np.zeros([len(forecastsDict[0].yhat),1]) for key in range(nCols-sumMat.shape[1]-1, nCols-1): f1 = np.array(forecastsDict[key].yhat) f2 = f1[:, np.newaxis] if np.all(hatMat == 0): hatMat = f2 else: hatMat = np.concatenate((hatMat, f2), axis = 1) if method == 'AHP': ''' Pros: Creates reliable aggregate forecasts, and good for low count data Cons: Unable to capture individual series dynamics ''' if boxcoxT is not None: for column in range(len(y.columns.tolist())-1): y1.iloc[:,column+1] = inv_boxcox(y1.iloc[:, column+1], boxcoxT[column]) # Find Proportions fcst = forecastsDict[0].yhat fcst = fcst[:, np.newaxis] numBTS = sumMat.shape[1] btsDat = pd.DataFrame(y1.iloc[:,nCols-numBTS:nCols]) divs = np.divide(np.transpose(np.array(btsDat)),np.array(y1.iloc[:,1])) props = divs.mean(1) props = props[:, np.newaxis] hatMat = np.dot(np.array(fcst),np.transpose(props)) if method == 'PHA': ''' Pros: Creates reliable aggregate forecasts, and good for low count data Cons: Unable to capture individual series dynamics ''' if boxcoxT is not None: for column in range(len(y.columns.tolist())-1): y1.iloc[:,column+1] = inv_boxcox(y1.iloc[:, column+1], boxcoxT[column]) # Find Proportions fcst = forecastsDict[0].yhat fcst = fcst[:, np.newaxis] numBTS = sumMat.shape[1] btsDat = pd.DataFrame(y1.iloc[:,nCols-numBTS:nCols]) btsSum = btsDat.sum(0) topSum = sum(y1.iloc[:,1]) props = btsSum/topSum props = props[:, np.newaxis] hatMat = np.dot(np.array(fcst),np.transpose(props)) newMat = np.empty([hatMat.shape[0],sumMat.shape[0]]) for i in range(hatMat.shape[0]): newMat[i,:] = np.dot(sumMat, np.transpose(hatMat[i,:])) if method == 'FP': newMat = forecastProp(forecastsDict, nodes) if method == 'OLS' or method == 'WLSS' or method == 'WLSV': if capF is not None: print(\\"An error might occur because of how these methods are defined (They can produce negative values). If it does, then please use another method\\") newMat = optimalComb(forecastsDict, sumMat, method, mse) for key in forecastsDict.keys(): values = forecastsDict[key].yhat.values values = newMat[:,key] forecastsDict[key].yhat = values # If Logistic fit values with natural log function to revert back to format of input if capF is not None: forecastsDict[key].yhat = np.log(forecastsDict[key].yhat) return forecastsDict #%% def forecastProp(forecastsDict, nodes): ''' Cons: Produces biased revised forecasts even if base forecasts are unbiased ''' nCols = len(list(forecastsDict.keys()))+1 # Find proportions of forecast at each step ahead, and then alter forecasts levels = len(nodes) column = 0 firstNode = 1 newMat = np.empty([len(forecastsDict[0].yhat),nCols - 1]) newMat[:,0] = forecastsDict[0].yhat lst = [x for x in range(nCols-1)] for level in range(levels): nodesInLevel = len(nodes[level]) foreSum = 0 for node in range(nodesInLevel): numChild = nodes[level][node] lastNode = firstNode + numChild lst = [x for x in range(firstNode, lastNode)] baseFcst = np.array([forecastsDict[k].yhat[:] for k in lst]) foreSum = np.sum(baseFcst, axis = 0) foreSum = foreSum[:, np.newaxis] if column == 0: revTop = np.array(forecastsDict[column].yhat) revTop = revTop[:, np.newaxis] else: revTop = np.array(newMat[:,column]) revTop = revTop[:, np.newaxis] newMat[:,firstNode:lastNode] = np.divide(np.multiply(np.transpose(baseFcst), revTop), foreSum) column += 1 firstNode += numChild return newMat #%% def optimalComb(forecastsDict, sumMat, method, mse): hatMat = np.zeros([len(forecastsDict[0].yhat),1]) for key in forecastsDict.keys(): f1 = np.array(forecastsDict[key].yhat) f2 = f1[:, np.newaxis] if np.all(hatMat == 0): hatMat = f2 else: hatMat = np.concatenate((hatMat, f2), axis = 1) # Multiply the Summing Matrix Together S*inv(S'S)*S' if method == \\"OLS\\": optiMat = np.dot(np.dot(sumMat, np.linalg.inv(np.dot(np.transpose(sumMat), sumMat))),np.transpose(sumMat)) if method == \\"WLSS\\": diagMat = np.diag(np.transpose(np.sum(sumMat, axis = 1))) optiMat = np.dot(np.dot(np.dot(sumMat, np.linalg.inv(np.dot(np.dot(np.transpose(sumMat), np.linalg.inv(diagMat)), sumMat))), np.transpose(sumMat)), np.linalg.inv(diagMat)) if method == \\"WLSV\\": diagMat = [mse[key] for key in mse.keys()] diagMat = np.diag(np.flip(np.hstack(diagMat)+0.0000001, 0)) optiMat = np.dot(np.dot(np.dot(sumMat, np.linalg.inv(np.dot(np.dot(np.transpose(sumMat), np.linalg.inv(diagMat)), sumMat))), np.transpose(sumMat)), np.linalg.inv(diagMat)) newMat = np.empty([hatMat.shape[0],sumMat.shape[0]]) for i in range(hatMat.shape[0]): newMat[i,:] = np.dot(optiMat, np.transpose(hatMat[i,:])) return newMat"},{"prompt":"Create a list comprehension expression for adding two lists in Python. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"list3 = [list1[i] + list2[i] for i in range(len(list1))]"},{"prompt":"This code is an OTA firmware update script for ESP8226 implementation of the Homie MQTT IoT convention. To use it, you need to run the main function with the following arguments: brokerhost, brokerport, brokerusername, brokerpassword, basetopic, deviceid, and firmware. The firmware argument should be the path to the firmware to be sent to the device. Once the script is running, it will connect to the MQTT broker and wait for device info. When the device info is received, the script will push the firmware binary to the device and update it. The script will print progress updates during the update process and disconnect from the broker when the update is complete.","completion":"#!/usr/bin/env python from __future__ import division, print_function import paho.mqtt.client as mqtt import base64, sys, math from hashlib import md5 # The callback for when the client receives a CONNACK response from the server. def on_connect(client, userdata, flags, rc): if rc != 0: print(\\"Connection Failed with result code {}\\".format(rc)) client.disconnect() else: print(\\"Connected with result code {}\\".format(rc)) # calcluate firmware md5 firmware_md5 = md5(userdata['firmware']).hexdigest() userdata.update({'md5': firmware_md5}) # Subscribing in on_connect() means that if we lose the connection and # reconnect then subscriptions will be renewed. client.subscribe(\\"{base_topic}{device_id}/implementation/ota/status\\".format(**userdata)) client.subscribe(\\"{base_topic}{device_id}/implementation/ota/enabled\\".format(**userdata)) client.subscribe(\\"{base_topic}{device_id}/fw/#\\".format(**userdata)) # Wait for device info to come in and invoke the on_message callback where update will continue print(\\"Waiting for device info...\\") # The callback for when a PUBLISH message is received from the server. def on_message(client, userdata, msg): # decode string for python2/3 compatiblity msg.payload = msg.payload.decode() if msg.topic.endswith('implementation/ota/status'): status = int(msg.payload.split()[0]) if userdata.get(\\"published\\"): if status == 206: # in progress # state in progress, print progress bar progress, total = [int(x) for x in msg.payload.split()[1].split('/')] bar_width = 30 bar = int(bar_width*(progress/total)) print(\\"r[\\", '+'*bar, ' '*(bar_width-bar), \\"] \\", msg.payload.split()[1], end='', sep='') if (progress == total): print() sys.stdout.flush() elif status == 304: # not modified print(\\"Device firmware already up to date with md5 checksum: {}\\".format(userdata.get('md5'))) client.disconnect() elif status == 403: # forbidden print(\\"Device ota disabled, aborting...\\") client.disconnect() elif msg.topic.endswith('fw/checksum'): checksum = msg.payload if userdata.get(\\"published\\"): if checksum == userdata.get('md5'): print(\\"Device back online. Update Successful!\\") else: print(\\"Expecting checksum {}, got {}, update failed!\\".format(userdata.get('md5'), checksum)) client.disconnect() else: if checksum != userdata.get('md5'): # save old md5 for comparison with new firmware userdata.update({'old_md5': checksum}) else: print(\\"Device firmware already up to date with md5 checksum: {}\\".format(checksum)) client.disconnect() elif msg.topic.endswith('ota/enabled'): if msg.payload == 'true': userdata.update({'ota_enabled': True}) else: print(\\"Device ota disabled, aborting...\\") client.disconnect() if ( not userdata.get(\\"published\\") ) and ( userdata.get('ota_enabled') ) and ( 'old_md5' in userdata.keys() ) and ( userdata.get('md5') != userdata.get('old_md5') ): # push the firmware binary userdata.update({\\"published\\": True}) topic = \\"{base_topic}{device_id}/implementation/ota/firmware/{md5}\\".format(**userdata) print(\\"Publishing new firmware with checksum {}\\".format(userdata.get('md5'))) client.publish(topic, userdata['firmware']) def main(broker_host, broker_port, broker_username, broker_password, base_topic, device_id, firmware): # initialise mqtt client and register callbacks client = mqtt.Client() client.on_connect = on_connect client.on_message = on_message # set username and password if given if broker_username and broker_password: client.username_pw_set(broker_username, broker_password) # save data to be used in the callbacks client.user_data_set({ \\"base_topic\\": base_topic, \\"device_id\\": device_id, \\"firmware\\": firmware }) # start connection print(\\"Connecting to mqtt broker {} on port {}\\".format(broker_host, broker_port)) client.connect(broker_host, broker_port, 60) # Blocking call that processes network traffic, dispatches callbacks and handles reconnecting. client.loop_forever() if __name__ == '__main__': import argparse parser = argparse.ArgumentParser( description='ota firmware update scirpt for ESP8226 implemenation of the Homie mqtt IoT convention.') # ensure base topic always ends with a '/' def base_topic_arg(s): s = str(s) if not s.endswith('/'): s = s + '/' return s # specify arguments parser.add_argument('-l', '--broker-host', type=str, required=False, help='host name or ip address of the mqtt broker', default=\\"127.0.0.1\\") parser.add_argument('-p', '--broker-port', type=int, required=False, help='port of the mqtt broker', default=1883) parser.add_argument('-u', '--broker-username', type=str, required=False, help='username used to authenticate with the mqtt broker') parser.add_argument('-d', '--broker-password', type=str, required=False, help='password used to authenticate with the mqtt broker') parser.add_argument('-t', '--base-topic', type=base_topic_arg, required=False, help='base topic of the homie devices on the broker', default=\\"homie/\\") parser.add_argument('-i', '--device-id', type=str, required=True, help='homie device id') parser.add_argument('firmware', type=argparse.FileType('rb'), help='path to the firmware to be sent to the device') # workaround for http://bugs.python.org/issue9694 parser._optionals.title = \\"arguments\\" # get and validate arguments args = parser.parse_args() # read the contents of firmware into buffer fw_buffer = args.firmware.read() args.firmware.close() firmware = bytearray() firmware.extend(fw_buffer) # Invoke the business logic main(args.broker_host, args.broker_port, args.broker_username, args.broker_password, args.base_topic, args.device_id, firmware)"},{"prompt":"Write a Python script to find all prime numbers in a given list of numbers. [13, 19, 23, 5, 7]","completion":"\\"\\"\\" Find all prime numbers in a given list of numbers \\"\\"\\" def is_prime(n): for i in range(2, n): if n % i == 0: return False else: return True numbers = [13, 19, 23, 5, 7] for num in numbers: if is_prime(num): print(num,\\"is a prime number\\")"},{"prompt":"Write a Python function to find the most frequent elements in a list. [3, 4, 2, 5, 4, 3, 2, 5, 4]","completion":"def most_frequent_elements(lst): count = {} for item in lst: if item in count: count[item] += 1 else: count[item] = 1 max_count = 0 max_element = None for item in count: if count[item] > max_count: max_count = count[item] max_element = item return max_element print(most_frequent_elements([3, 4, 2, 5, 4, 3, 2, 5, 4])) # Output: 4"},{"prompt":"Suggest a function to round a float number to two decimal places in Python.","completion":"def round_to_two_decimals(x): return round(x, 2)"},{"prompt":"Create an objectoriented Python program to display an employee's details","completion":"class Employee: def __init__(self, name, address, salary): self.name = name self.address = address self.salary = salary def displayEmployeeDetails(self): # This method prints employee details print(\\"Employee Details -\\") print(\\"Name: {}\\".format(self.name)) print(\\"Address: {}\\".format(self.address)) print(\\"Salary: {}\\".format(self.salary)) employee = Employee(\\"John Doe\\", \\"NYC\\", \\"10000\\") employee.displayEmployeeDetails()"},{"prompt":"mplement a web scraper in Python that can extract the number of followers of a particular user.","completion":"import requests from bs4 import BeautifulSoup # Set the URL url = 'https://www.instagram.com/{username}' # Make a request response = requests.get(url) # Parse the response soup = BeautifulSoup(response.text, 'lxml') # Extract the followers followers = soup.find('span', {'class': 'g47SY'}).next_sibling.text # Print the followers print(f'Number of followers of the user: {followers}')"},{"prompt":"Write a Python program to sort a given array in ascending order. array = [3, 1, 5, 4, 2]","completion":"def sort_ascending(array): n = len(array) for i in range(n): for j in range(0, n-i-1): if array[j] > array[j+1]: array[j], array[j+1] = array[j+1], array[j] return array array = [3, 1, 5, 4, 2] print(sort_ascending(array))"},{"prompt":"Create a function for adding two numbers in Python.","completion":"def add(num1, num2): return num1 + num2 print(add(1, 2))"},{"prompt":"Write a function in Python that receives two positive integers and prints out all the numbers in the range of the two integers (inclusive), except for numbers divisible by three. lower_bound = 5 upper_bound = 15","completion":"def print_numbers(lower_bound, upper_bound): for num in range(lower_bound, upper_bound+1): if num % 3 != 0: print(num) print_numbers(5, 15)"},{"prompt":"Create a program in Python to generate a random 2D matrix of size NxN containing integers between 1 and 10. N = 10","completion":"import random n = 10 matrix = [[random.randint(1, 10) for _ in range(n)] for _ in range(n)] print(matrix)"},{"prompt":"Create a Python dictionary for alphabetical order of numeric input [2, 3, 1]","completion":"def createDict(arr): res = {} for i in range(len(arr)): res[arr[i]] = i + 1 return res d = createDict([2, 3, 1]) print(d)"},{"prompt":"Construct a python program that takes an array of integers as an argument, and returns the second largest number. arr = [10, 12, 2, 8, 6, 4]","completion":"def second_largest(arr): max_first = max(arr[0], arr[1]) max_second = min(arr[0], arr[1]) for i in range(2, len(arr)): if arr[i] > max_first: max_second = max_first max_first = arr[i] else: if arr[i] > max_second: max_second = arr[i] return max_second print(second_largest(arr))"},{"prompt":"Can you create a program to implement the factorial of a number","completion":"# Python code to implement factorial def factorial(n): # single line to find factorial return 1 if (n==1 or n==0) else n * factorial(n - 1); # Driver Code num = 5; print(\\"Factorial of\\", num, \\"is\\", factorial(num))"},{"prompt":"Create a class in Python with three attributes and three methods.","completion":"class SampleClass: def __init__(self, attr1, attr2, attr3): self.attr1 = attr1 self.attr2 = attr2 self.attr3 = attr3 def method1(self): # code here def method2(self): # code here def method3(self): # code here"},{"prompt":"Write a function in Python that takes a list of numbers and returns a new list with all the elements sorted in descending order. [9,4,3,2,1]","completion":"def sort_descending(input): input.sort(reverse=True) return input"},{"prompt":"Write Python code to count the number of nodes in a BST. 4 / 2 6 / / 1 3 5 7","completion":"def countNodes(root): if root is None: return 0 return (1 + countNodes(root.left) + countNodes(root.right))"},{"prompt":"dentify one potential optimization that could be made to the following Python code. def func(n): if n == 0: return 0 return n + func(n1)","completion":"The potential optimization is to store the previous results in a dictionary and check if the results for n - 1 is already present in the dictionary, if it is present then use the result present in the dictionary instead of executing the function for n-1 again. This will reduce the time complexity from O(n) to O(1). def func(n): mydict = dict() if n == 0: return 0 if n in mydict: return mydict[n] mydict[n] = n + func(n-1) return mydict[n]"},{"prompt":"This code is a protocol to read data from an Arduino device and save it to a file. To use it, import the necessary modules and classes, including LineReceiver from twisted.protocols.basic, SerialPort from twisted.internet.serialport, Site from twisted.web.server, and File from twisted.web.static. Define a function called timeToArray that converts a time string to an array similar to a datetime object. Define another function called dataToFile that saves data to a file. Finally, define a class called PalmAcqProtocol that inherits from LineReceiver and takes in the wsMcuFactory, sensor, and outputdir as arguments. In this class, define methods to extract and process data from the Arduino device, and to send the data to a dispatch URL.","completion":"import sys, time, os, socket import struct, binascii, re, csv from datetime import datetime, timedelta from twisted.protocols.basic import LineReceiver from twisted.internet import reactor from twisted.python import usage, log from twisted.internet.serialport import SerialPort from twisted.web.server import Site from twisted.web.static import File try: # version > 0.8.0 from autobahn.wamp1.protocol import exportRpc except: from autobahn.wamp import exportRpc iddict = {'f': '10', 'x': '11', 'y': '12', 'z': '13', 'df': '14', 't': '30', 'rh': '33', 'p': '35', 'w': '38'} \\"\\"\\" 0: clientname -- str (atlas) 1: timestamp (PC) -- str (2013-01-23 12:10:32.712475) 2: date (PC) -- str (2013-01-23) 3: outtime (PC) -- str (12:10:32.712475) 4: timestamp (sensor) -- str (2013-01-23 12:10:32.712475) 5: GPS coordinates -- str (??.??N ??.??E) 9: Sensor Description -- str (to be found in the adict) 10: f -- float (48633.04) [nT] 11: x -- float (20401.3) [nT] 12: y -- float (-30.0) [nT] 13: z -- float (43229.7) [nT] 14: df -- float (0.06) [nT] 30: T (ambient) -- float (7.2) [C] 31: T (sensor) -- float (10.0) [C] 32: T (electronics) -- float (12.5) [C] 33: rh (relative humidity) -- float (99.0) [%] 34: T (dewpoint) -- float (6.0) [C] 38: W (weight) -- float (24.0042) [g] 40: Error code (POS1) -- float (80) [-] 60: VDD (support voltage) -- float (5.02) [V] 61: VAD (measured voltage) -- float (2.03) [V] 62: VIS (measured voltage) -- float (0.00043) [V] \\"\\"\\" def timeToArray(timestring): # Converts time string of format 2013-12-12 23:12:23.122324 # to an array similiar to a datetime object try: splittedfull = timestring.split(' ') splittedday = splittedfull[0].split('-') splittedsec = splittedfull[1].split('.') splittedtime = splittedsec[0].split(':') datearray = splittedday + splittedtime datearray.append(splittedsec[1]) datearray = map(int,datearray) return datearray except: log.msg('Error while extracting time array') return [] def dataToFile(outputdir, sensorid, filedate, bindata, header): # File Operations try: hostname = socket.gethostname() path = os.path.join(outputdir,hostname,sensorid) # outputdir defined in main options class if not os.path.exists(path): os.makedirs(path) savefile = os.path.join(path, sensorid+'_'+filedate+\\".bin\\") if not os.path.isfile(savefile): with open(savefile, \\"wb\\") as myfile: myfile.write(header + \\"n\\") myfile.write(bindata + \\"n\\") else: with open(savefile, \\"a\\") as myfile: myfile.write(bindata + \\"n\\") except: log.err(\\"PalmAcq - Protocol: Error while saving file\\") PalmAcq protocol -------------------- class PalmAcqProtocol(LineReceiver): \\"\\"\\" Protocol to read Arduino data (usually from ttyACM0) Tested so far only for Arduino Uno on a Linux machine The protocol works only if the serial output follows the MagPy convention: Up to 99 Sensors are supported identified by unique sensor names and ID's. ARDUINO OUTPUT: - serial output on ttyACM0 needs to follow the MagPy definition: Three data sequences are supported: 1.) The meta information The meta information line contains all information for a specific sensor. If more than one sensor is connected, then several meta information lines should be sent (e.g. M1:..., M2:..., M99:...) Meta lines should be resent once in a while (e.g. every 10-100 data points) Example: M1: SensorName: MySensor, SensorID: 12345, SensorRevision: 0001 2.) The header line The header line contains information on the provided data for each sensor. The typical format includes the MagPy key, the actual Variable and the unit. Key and Variable are separeted by an underscore, unit is provided in brackets. Like the Meta information the header should be sent out once in a while Example: H1: f_F [nT], t1_Temp [deg C], var1_Quality [None], var2_Pressure [mbar] 3.) The data line: The data line containes all data from a specific sensor Example: D1: 46543.7898, 6.9, 10, 978.000 - recording starts after meta and header information have been received MARTAS requirements: - add the following line to the sensor.txt ARDUINO ACM0 9600 - on the MARTAS machine an additional information file will be created containing the sensor information for connected ARDUINO boards: arduinolist.csv: \\"HMC5883_12345_0001\\",\\"['x', 'y', 'z']\\" This file is used by the MARCOS machine to identify connected sensors and their keys \\"\\"\\" delimiter = \\"r\\" need a reference to our WS-MCU gateway factory to dispatch PubSub events def __init__(self, wsMcuFactory, sensor, outputdir): self.wsMcuFactory = wsMcuFactory self.sensorid = sensor self.hostname = socket.gethostname() self.outputdir = outputdir self.sensor = '' self.sensordict = {} self.ConversionConstant = 40/4/float(int(\\"0x800000\\",16)) eventstring = \\"evt0,evt1,evt3,evt11,evt12,evt13,evt32,evt60,evt99\\" self.eventlist = eventstring.split(',') def connectionMade(self): log.msg('%s connected.' % self.sensorid) def extractPalmAcqData(self, line): \\"\\"\\" Method to convert hexadecimals to doubles Returns a data array \\"\\"\\" # INTERPRETING INCOMING DATA AND CONVERTING HEXDECIMALS TO DOUBLE if line.startswith('*'): try: data = [] chunks = [] line = line.strip('*') chunks.append(line[:6]) chunks.append(line[6:12]) chunks.append(line[12:18]) trigger = line[18] ar = line.split(':') if len(ar) == 2: extended = ar[1] chunks.append(extended[:4]) chunks.append(extended[4:8]) chunks.append(extended[8:12]) chunks.append(extended[12:16]) chunks.append(extended[16:20]) for idx, chunk in enumerate(chunks): if len(chunk) == 6: val = hex(int('0x'+chunk,16) ^ int('0x800000',16)) val = hex(int(val,16) - int('0x800000',16)) # Conversion constanst should be obtained from palmacq-init val = float(int(val,16)) * self.ConversionConstant elif len(chunk) == 4: val = hex(int('0x'+chunk,16) ^ int('0x8000',16)) val = hex(int(val,16) - int('0x8000',16)) if idx == 3: val = float(int(val,16)) * 0.000575 + 1.0 elif idx == 4: val = float(int(val,16)) / 128.0 elif idx > 4: val = float(int(val,16)) / 8000.0 data.append(val) # SOME TEST OUTPUT #if len(data)> 4: # print datetime.utcnow(), data #print data, trigger return data, trigger except: #print \\"PALMACQ: an error occurred while interpreting the hexadecimal code\\" return [], 'N' else: return [], 'N' def processPalmAcqData(self, data): \\"\\"\\"Convert raw ADC counts into SI units as per datasheets\\"\\"\\" printdata = False currenttime = datetime.utcnow() outdate = datetime.strftime(currenttime, \\"%Y-%m-%d\\") filename = outdate outtime = datetime.strftime(currenttime, \\"%H:%M:%S\\") # IMPORTANT : GET TIMESTAMP FROM DATA !!!!!! timestamp = datetime.strftime(currenttime, \\"%Y-%m-%d %H:%M:%S.%f\\") datearray = timeToArray(timestamp) packcode = '6hL' # Would probably be good to preserve the hexadecimal format # Seems to be extremely effective regarding accuracy and storage x = data[0] y = data[1] z = data[2] v = 0.0 t = 0.0 p = 0.0 q = 0.0 r = 0.0 if len(data) > 4: v = data[3] t = data[4] p = data[5] q = data[6] r = data[7] datearray.append(x) datearray.append(y) datearray.append(z) datearray.append(int(float(v)*10000)) datearray.append(int(float(t)*10000)) datearray.append(p) datearray.append(q) datearray.append(r) packcode = packcode + 'fffllfff' multiplier = [1,1,1,10000,10000,1,1,1] try: data_bin = struct.pack(packcode,*datearray) except: log.msg('Error while packing binary data') pass header = \\"# MagPyBin %s %s %s %s %s %s %d\\" % (self.sensorid, \\"[x,y,z,v,t,p,q,r]\\", \\"[x,y,z,v,t,p,q,r]\\", \\"[V,V,V,V,C,V,V,V]\\", str(multiplier).replace(\\" \\",\\"\\"), packcode, struct.calcsize(packcode)) if printdata: #print header print timestamp # File Operations try: dataToFile(self.outputdir, self.sensorid, filename, data_bin, header) except: log.msg('Saving failed') pass evt0 = {'id': 0, 'value': self.hostname} evt1 = {'id': 1, 'value': timestamp} evt3 = {'id': 3, 'value': outtime} evt11 = {'id': 11, 'value': x} evt12 = {'id': 12, 'value': y} evt13 = {'id': 13, 'value': z} evt32 = {'id': 32, 'value': t} evt60 = {'id': 60, 'value': v} evt99 = {'id': 99, 'value': 'eol'} return evt0,evt1,evt3,evt11,evt12,evt13,evt32,evt60,evt99 def lineReceived(self, line): data=[] if line: data, trigger = self.extractPalmAcqData(line) if len(data) > 1: evt0,evt1,evt3,evt11,evt12,evt13,evt32,evt60,evt99 = self.processPalmAcqData(data) dispatch_url = \\"http://example.com/\\"+self.hostname+\\"/pal#\\"+self.sensorid+\\"-value\\" # eventlist defined in init for event in self.eventlist: self.wsMcuFactory.dispatch(dispatch_url, eval(event))"},{"prompt":"Generate a function in python that takes a string (plain text) and returns the highest frequency of a letter in upper case. string=The quick brown fox jumped over the lazy dog","completion":"def highest_frequency(string): freq_map = {} max_freq = 0 result = \\"\\" for char in string: char = char.upper() if char in freq_map: freq_map[char] += 1 if freq_map[char] > max_freq: max_freq = freq_map[char] result = char else: freq_map[char] = 1 return result"},{"prompt":"mplement a solution in Python to convert the given number to its binary representation. 155","completion":"def convertToBinary(x): return bin(x).replace(\\"0b\\", \\"\\") x = 155 print(convertToBinary(x))"},{"prompt":"Create a program in Python to find all pairs of elements in a list with the given difference. [9, 4, 7, 5], 4","completion":"def find_pair_with_difference(list, difference): result = [] for i in range(len(list)): for j in range(i+1, len(list)): if list[j] - list[i] == difference: result.append((list[i], list[j])) return result list=[9, 4, 7, 5] difference = 4 result = find_pair_with_difference(list, difference) print(result)"},{"prompt":"mplement a function in Python that prints out the contents of a given list with even indices only. my_list = [1, 5, 10, 15, 20]","completion":"def print_even_indices(my_list): for i in range(len(my_list)): if i % 2 == 0: print(my_list[i]) print_even_indices(my_list)"},{"prompt":"Generate a Python code to execute the following logic Given a string, take all the characters and add them up, then store the result in a variable.","completion":"def add_string(string): result = 0 for char in string: result += ord(char) return result"},{"prompt":"Create a Python Flask application with a REST API. The API should include endpoints for GET and POST requests to retrieve user data from a database and store them in a database respectively. Not applicable","completion":"from flask import Flask, jsonify, request app = Flask(__name__) @app.route('/users', methods=['GET', 'POST']) def user_data(): if request.method == 'GET': # Retrieve user data from the database return jsonify({'users': []}) if request.method == 'POST': # Store user data in the database return jsonify({'message': 'success'}) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a function to find the mean of a given array in Python. [2, 4, 5, 7]","completion":"def mean(arr): return sum(arr)/len(arr) arr = [2, 4, 5, 7] mean_val = mean(arr) print(\\"Mean of the array is\\", mean_val) # Output: Mean of the array is 4.5"},{"prompt":"Generate a Python program to generate a list of all prime numbers between 1 and 100.","completion":"prime_numbers = [] for num in range(2, 101): isPrime = True for i in range(2, num//2 + 1): if (num % i == 0): isPrime = False break if isPrime: prime_numbers.append(num) print(prime_numbers)"},{"prompt":"Generate a function in Python to capitalize the first letter of every word in a given sentence. newton theory of gravitatio","completion":"def capitalize(sentence): words = sentence.split() new_sentence = [] for word in words: new_sentence.append(word.capitalize()) return \\" \\".join(new_sentence) sentence = \\"newton theory of gravitation\\" print(capitalize(sentence))"},{"prompt":"Write a code in Python to remove all entries from a dictionary which have even numbers as values. my_dict = {1:1, 2:2, 3:3, 4:4, 5:5, 6:6 }","completion":"my_dict = {1:1, 3:3, 5:5 } new_dict = {} for key, value in my_dict.items(): if value % 2 != 0: new_dict[key] = value my_dict = new_dict"},{"prompt":"Build a machine learning model in Python to classify animals.","completion":"#import libraries from sklearn.ensemble import RandomForestClassifier from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split #import dataset data = load_iris() #divide the data into independent and dependent variables X = data.data y = data.target # Split the data into training and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) #Define the model model = RandomForestClassifier(n_estimators=100) #Train the model model.fit(X_train, y_train) # Test the model model.score(X_test, y_test)"},{"prompt":"Translate the following code snippet from Java to Python. public void helloWorld() { System.out.println(Hello World!); }","completion":"def helloWorld(): print(\\"Hello World!\\")"},{"prompt":"Concatenate two strings using Python string1 = Hello string2 = World","completion":"string1 + string2 result = string1 + string2 print(result)"},{"prompt":"Generate a python method to solve the given system of linear equations. 2x 3y = 6 ; 3x + 4y = 12","completion":"def solve_linear_eq(a,b,c,d): x = (b*d - c*a) / (b*d - c*a) y = (d*a - b*c) / (b*d - c*a) return x, y"},{"prompt":"Write a function in Python that uses an exponential function to calculate the number of steps needed for a particular sorting algorithm for a given array A=[1,2,3,4], sorting algorithm is Merge Sor","completion":"def merge_complexity(arr, sort): n = len(arr) # base case if (n <= 1): return 0 # Merge sort complexity calculation if (sort == \\"Merge Sort\\"): return (n * log(n, 2)) # Driver code A = [1, 2, 3, 4] print(merge_complexity(A, 'Merge Sort'))"},{"prompt":"This code generates rooted trees and writes their adjacency and gamma matrices to files. To use it, run the script with the maximum number of nodes as the first argument and the maximum branching factor (optional) as the second argument. The code will output the number of trees for each number of nodes and write the matrices to files in the GammaAdjMatrices directory. If the number of trees is greater than 100,000, the code will abort.","completion":"import sys # G is the gamma matrix # par is the parent array # n is the number of nodes def writeGammaMatrix(gammaFile, G, par, n): for i in range(n): for j in range(n): G[i][j] = 0 for i in range(n): G[i][i] = 1 j = par[i]-1 while j > -1: G[j][i] = 1 j = par[j]-1 for i in range(n): for j in range(n): gammaFile.write(str(G[i][j]) + ' ') gammaFile.write('n') gammaFile.write('n') # par is the parent array # n is the number of nodes def writeAdjMatrix(adjFile, par, n): adjFile.write(str(n-1)) # number of edges for i in range(1, n): adjFile.write(' ' + str(par[i]-1) + ' ' + str(i) + ' ') adjFile.write('n'); # writes a dot file to be processed with Graphviz def writeDotFile(par, n, num): dotFile = open('./GammaAdjMatrices/dotFile' + str(n) + '_' + str(num-1) + '.dot', 'w') dotFile.write('digraph G { n') for i in range(1, n): dotFile.write(str(par[i]-1) + ' -> ' + str(i) + ';n') dotFile.write('}n') dotFile.close() # n is the number of nodes # k is the max number of children allowed per node def getRootedTrees(adjFile, gammaFile, n, k, writeDots): num = 0 L = [] par = [] levels = [] children = [] G = [] p = n-1 q = 0 for i in range(n): L.append(i) par.append(i) levels.append(i+1) children.append(0) G.append([]) for j in range(n): G[i].append(0) while (p > 0): for i in range(n): children[i] = 0 for i in range(n): children[par[i]] += 1 if max(children) <= k: num += 1 writeAdjMatrix(adjFile, par, n) writeGammaMatrix(gammaFile, G, par, n) if writeDots: writeDotFile(par, n, num) p = 0 for i in range(n-1, -1, -1): if L[i] > 1: p = i break if p == 0: break for i in range(p-1, -1, -1): if L[i] == L[p] - 1: q = i break for i in range(p, n): L[i] = L[i-p+q] for i in range(1, n): x = L[i] par[i] = levels[x-1] levels[x] = i+1 # n is the number of nodes # k is the max number of children allowed per node def getNumTrees(n, k): num = 0 L = [] par = [] levels = [] children = [] p = n-1 q = 0 for i in range(n): L.append(i) par.append(i) levels.append(i+1) children.append(0) while (p > 0): for i in range(n): children[i] = 0 for i in range(n): children[par[i]] += 1 if max(children) <= k: num += 1 p = 0 for i in range(n-1, -1, -1): if L[i] > 1: p = i break if p == 0: break for i in range(p-1, -1, -1): if L[i] == L[p] - 1: q = i break for i in range(p, n): L[i] = L[i-p+q] for i in range(1, n): x = L[i] par[i] = levels[x-1] levels[x] = i+1 return num if __name__ == \\"__main__\\": if len(sys.argv) < 2: print 'Usage: python', sys.argv[0], '<max_num_nodes> [<max_branching_factor>]' sys.exit(0) maxNumNodes = 1 + int(sys.argv[1]) k = maxNumNodes if len(sys.argv) == 3: k = int(sys.argv[2]) for i in range(2, maxNumNodes): x = getNumTrees(i, k) print 'Number of trees with ', i, ' nodes: ', x if x > 100000: print 'Sorry, that is too many trees to write on file. Aborting now, already written files are ok to use.' sys.exit(3) adjFile = open('./GammaAdjMatrices/AdjacencyMatrix' + str(i) + '.txt', 'w') gammaFile = open('./GammaAdjMatrices/GammaMatrix' + str(i) + '.txt', 'w') adjFile.write(str(i) + ' ' + str(x) + 'nn') gammaFile.write(str(i) + ' ' + str(x) + 'n') getRootedTrees(adjFile, gammaFile, i, k, False) adjFile.close() gammaFile.close()"},{"prompt":"Write a Python program which converts feet to centimeters.","completion":"def convert_ft_to_cm(ft): return ft * 30.48"},{"prompt":"Develop a greedy strategy in Python to find the minimum total cost of connecting n given points on a 2D plane using minimum number of lines. Not applicable","completion":"def min_cost(points): points.sort() # sort the points by their x-coordinate total_cost = 0 # initial cost for i in range(len(points)-1): cost = abs(points[i+1][1] - points[i][1]) # calculate the cost of connecting two successive points total_cost += cost # add to the total cost return total_cost"},{"prompt":"Write a RNN in Python to classify email messages into two classes: Spam and Not Spam. [ {'message': 'This is an important offer act now!', 'label': 'spam'}, {'message': 'You have been chosen to win a prize', 'label': 'spam'}, {'message': 'To complete your order, please follow the link below', 'label': 'spam'}, {'message': 'See the attached report for details', 'label': 'not_spam'}, {'message': 'I will be away for the next few days', 'label': 'not_spam'} ]","completion":"import tensorflow as tf from tensorflow.keras.preprocessing.text import one_hot from tensorflow.keras.preprocessing.sequence import pad_sequences from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Embedding, Dense, Dropout, LSTM # Step 1: Preprocess the data input_data = [ {'message': 'This is an important offer - act now!', 'label': 'spam'}, {'message': 'You have been chosen to win a prize', 'label': 'spam'}, {'message': 'To complete your order, please follow the link below', 'label': 'spam'}, {'message': 'See the attached report for details', 'label': 'not_spam'}, {'message': 'I will be away for the next few days', 'label': 'not_spam'} ] # one-hot encoding labels = [data['label'] for data in input_data] labels_one_hot_encoded = [one_hot(label, 2) for label in labels] # text encoding messages = [data['message'] for data in input_data] messages_encoded = [one_hot(message, 100) for message in messages] # padding messages_padded = pad_sequences(messages_encoded, maxlen=128, padding='pre') labels_encoded = pad_sequences(labels_one_hot_encoded, maxlen=2, padding='post') # creating the model model = Sequential() model.add(Embedding(input_dim=100, output_dim=128, input_length=messages_padded.shape[1])) model.add(LSTM(128)) model.add(Dense(2, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(x=messages_padded, y=labels_encoded, epochs=10, batch_size=32)"},{"prompt":"Convert the following SQL query into a python pandas dataframe. SELECT * from books WHERE author LIKE '%Rowling%';","completion":"import pandas as pd # read the books table df = pd.read_sql(\\"SELECT * from books\\", connection) # filter for rows with matching author df_filtered = df[df['author'].str.contains(\\"Rowling\\")] # print the results print(df_filtered)"},{"prompt":"Create an AIbased chatbot in Python using TensorFlow and DialogFlow. Not applicable","completion":"# Import necessary libraries import tensorflow as tf from tensorflow import keras import dialogflow_v2 as dialogflow # Create a model to generate responses model = keras.Sequential([ keras.layers.InputLayer(input_shape=[1]), keras.layers.Dense(units=32, activation=\\"relu\\"), keras.layers.Dense(units=32, activation=\\"relu\\"), keras.layers.Dense(units=1, activation=\\"sigmoid\\"), ]) # Compile the model model.compile(optimizer=\\"adam\\", loss=\\"binary_crossentropy\\", metrics=[\\"accuracy\\"]) # Configure the DialogFlow agent session_client = dialogflow.SessionsClient() project_id = \\"myproject\\" session_id = \\"test\\" # Set up an input/output context contexts_client = dialogflow.ContextsClient() context_path = contexts_client.context_path(project_id, session_id, \\"userInput\\") # Utilize the model for generating responses def generate_response(response): # Input response input_response = response # Predict the response prediction = model.predict([input_response]) predicted_class = int(prediction > 0.5) # Generate response based on the prediction if predicted_class == 1: response = \\"\\" else: response = \\"\\" # Return the response return response # Create the DialogFlow request/response request = dialogflow.types.TextInput(text=input_response, language_code=\\"en-US\\") response = session_client.detect_intent(session=session_path, query_input=request) # Generate a response response = generate_response(response) # Respond to the user print (response)"},{"prompt":"Generate a python program to read a integer of length 5 digits and split them into single digits. 12345","completion":"def split_digits(num): '''This function takes an integer of length 5 and return a list of single digits''' result = [] while num > 0: result.append(num%10) num = num//10 return result[::-1] num = int(input('Please enter a number of length 5 digits: ')) if len(str(num)) == 5: print(split_digits(num)) else: print('Invalid input!')"},{"prompt":"Using HTTP, create a Python program to make a request to an API endpoint and receive a response.","completion":"import requests url = 'https://api.example.com/endpoint' response = requests.get(url) data = response.json()"},{"prompt":"Create a Python script that takes a word as an input and returns a list of synonyms for that word. Word (e.g. happy)","completion":"import requests import json word = input(\\"Enter a word: \\") url = \\"https://api.datamuse.com/words?rel_syn=\\" + word response = requests.get(url) if response.status_code == 200: json_data = json.loads(response.text) synonyms = [item['word'] for item in json_data] print(synonyms) else: print(\\"Something went wrong!\\")"},{"prompt":"Create a python program that determines the grade of a student based on the marks they received in their exams. marks = { 'math': 90, 'history': 80, 'english': 75 }","completion":"def determine_grade(marks): # Determine the average mark avg = (marks['math'] + marks['history'] + marks['english'])/3 # If the average mark is greater than or equal to 90, the student's grade is A if avg >= 90: return 'A' # If the average mark is greater than or equal to 80, the student's grade is B elif avg >= 80: return 'B' # If the average mark is greater than or equal to 70, the student's grade is C elif avg >= 70: return 'C' # If the average mark is greater than or equal to 60, the student's grade is D elif avg >= 60: return 'D' # Anything less than 60 is an F else: return 'F'"},{"prompt":"Use Python to scrape the content of the Wikipedia page for Machine Learning and store the text in a string.","completion":"from urllib.request import urlopen from bs4 import BeautifulSoup def scrape_wikipedia_page(url): # Retrieve the page html = urlopen(url) # Create an instance of the bs4 parser soup = BeautifulSoup(html, 'html.parser') # Extract content from the page page_content = soup.find_all('p') page_content_str = ''.join(str(p) for p in page_content) return page_content_str page_content_str = scrape_wikipedia_page('https://en.wikipedia.org/wiki/Machine_learning') print(page_content_str)"},{"prompt":"Write a Python program to calculate the total cost of an order from an online shop. The program should take a price of a product and the quantity of that product as inputs. ProductPrice = 12 Quantity = 5","completion":"total = ProductPrice * Quantity print(f\\"Total cost of the order is {total}\\") # Total cost of the order is 60"},{"prompt":"Write a python program that generates a random IP address.","completion":"import random def generate_random_IP(): ip = \\"\\" for i in range(4): ip += str(random.randint(0, 255)) if i != 3: ip += \\".\\" return ip"},{"prompt":"Generate a sentence in Python that uses a for loop to iterate over a list of strings. strings = ['apple', 'banana', 'cherry']","completion":"for s in strings: print(f'I like to eat {s}!')"},{"prompt":"Write a Python function that generates a random password of 8 characters containing alphanumeric characters and symbols.","completion":"import string import random def generate_password(): symbols = string.ascii_letters + string.digits + string.punctuation password = \\"\\".join(random.choice(symbols) for i in range(8)) return password pwd = generate_password() print(pwd) # 1F(8y3?"},{"prompt":"Create a web service in Python which allows a user to register their email address.","completion":"from flask import Flask, request, redirect app = Flask(__name__) @app.route(\\"/\\") def home(): return \\"<form action='/save' method='POST'><input type='text' name='email'/><input type='submit’/></form>\\" @app.route(\\"/save\\", methods=[\\"POST\\"]) def save(): email = request.form[\\"email\\"] # save the email address to your database return redirect(\\"/\\") if __name__ == \\"__main__\\": app.run()"},{"prompt":"Create a python class object for the following data: A customer has name, age, emailid and phone number as attributes.","completion":"class Customer: def __init__(self, name, age, emailid, phone_number): self.name = name self.age = age self.emailid = emailid self.phone_number = phone_number"},{"prompt":"Write a Python function to check if a given number is an Armstrong number. Not applicable","completion":"def is_armstrong_number(num): # Calculate the number of digits n = len(str(num)) # Check whether is an armstrong number sum = 0 temp = num while temp > 0: digit = temp % 10 sum += digit ** n temp //= 10 if num == sum: return True else: return False"},{"prompt":"Design an algorithm in Python to calculate the greatest common divisor of two numbers. x = 32 y = 8","completion":"def gcd(x,y): if x == 0: return y return gcd(y%x, x) # Driver code print(gcd(x,y))"},{"prompt":"Generate a list in Python containing all numbers between 0 and 50 (inclusive) that are multiples of 3.","completion":"my_list = [x for x in range(0, 51) if x % 3 == 0]"},{"prompt":"Develop an algorithm in Python that finds the longest increasing subsequence in an array. [10, 22, 9, 33, 21, 50, 41, 60]","completion":"def LIS(arr): n = len(arr) lis = [1]*n for i in range (1 , n): for j in range(0 , i): if arr[i] > arr[j] and lis[i]< lis[j] + 1 : lis[i] = lis[j]+1 maximum = 0 for i in range(n): maximum = max(maximum , lis[i]) return maximum print(LIS([10, 22, 9, 33, 21, 50, 41, 60]))"},{"prompt":"Construct an algorithm for factoring a large number in Python. Number = 600851475143","completion":"def get_factor(n): factors = [] for i in range(2, n + 1): if n % i == 0: factors.append(i) n //= i return factors number = 600851475143 print(get_factor(number))"},{"prompt":"Create a Python script that finds the longest word in a given array of words. ['Python', 'JavaScript', 'C++', 'Java', 'Kotlin']","completion":"# find the longest word def findLongestWord(arr): longestWord = \\"\\" for word in arr: if(len(word) > len(longestWord)): longestWord = word return longestWord # Driver code words = ['Python', 'JavaScript', 'C++', 'Java', 'Kotlin'] print(\\"Longest word in the array is \\"+ findLongestWord(words))"},{"prompt":"Rewrite the code snippet with updated syntax for Python 3. print Hello World!","completion":"print(\\"Hello World!\\")"},{"prompt":"mplement a hash algorithm according to these specifications in Python. Length of Hashed String: 6 Hash Algorithm: SHA1","completion":"import hashlib def generate_hash(string): hashed_string = hashlib.sha1(string.encode()) return hashed_string.hexdigest()[:6] hashed_string = generate_hash(\\"Code Generation Task Instructions\\") print(hashed_string)"},{"prompt":"Create a Python function that checks if a given number is a multiple of 6.","completion":"def is_multiple_of_six(num): if num % 6 == 0: return True else: return False"},{"prompt":"This task is to write an AIbased chatbot in Python to answer customer queries. Query: Can I get a refund if my product is defective?","completion":"import nltk from nltk.stem import WordNetLemmatizer lemmatizer = WordNetLemmatizer() # Define a function for processing the user query def process_message(message): # Split the query into separate words tokens = nltk.word_tokenize(message) # Lemmatize each word tokens = [lemmatizer.lemmatize(token) for token in tokens] # Return the list of lemmatized tokens return tokens # Define the answer function def answer_query(query): # Process the message tokens = process_message(query) # Check if the query includes the word \\"refund\\" if 'refund' in tokens: # Return the message return 'Yes, you can get a refund if your product is defective.' # Return the message return 'Sorry, I can't answer that question.'"},{"prompt":"Create an algorithm in python to sort a list of numbers using bubble sort. <noinptut>","completion":"def bubble_sort(nums): for i in range(len(nums)-1): for j in range(0, len(nums)-i-1): if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] return nums"},{"prompt":"Write a for loop in Python to iterate through the list [4, 7, 11, 13] and print each number.","completion":"for num in [4,7,11,13]: print(num)"},{"prompt":"Develop a Python function to determine the maximum possible sum of two numbers even after swapping.","completion":"\\"\\"\\" def max_sum_swap(a, b): x = max(a, b) y = min(a, b) # swap the numbers x = x + y y = x - y x = x - y return x + y \\"\\"\\""},{"prompt":"Create a program in Python that asks the user for a number, multiplies the number by 7, and then prints the result.","completion":"num = int(input(\\"Please enter a number: \\")) print(\\"The result of multiplying your number by 7 is \\" + str(num * 7))"},{"prompt":"Generate python code to implement a linear search algorithm to find a particular value in an array. array = [5, 10, 15, 20]","completion":"def linear_search(array, value): length = len(array) for i in range(length): if array[i] == value: return i return -1 print(linear_search(array, 15))"},{"prompt":"Demonstrate how to use classes and objects in Python by creating an Account class","completion":"class Account: def __init__(self, name, balance): # instance attributes self.name = name self.balance = balance # method to withdraw money from account def withdraw(self, amount): # check if amount is a valid number if not isinstance(amount, (int, float)): raise ValueError('Invalid amount') # check if amount is greater than balance if amount > self.balance: raise ValueError('Insufficient funds') # subtract the amount from the balance self.balance -= amount # method to deposit money to account def deposit(self, amount): # check if amount is a valid number if not isinstance(amount, (int, float)): raise ValueError('Invalid amount') # add the amount to the balance self.balance +=amount # create an instance of the Account class my_account = Account('John Doe', 100) # withdraw money from account my_account.withdraw(50) # deposit money to account my_account.deposit(20) # print the updated balance print('Account balance:', my_account.balance)"},{"prompt":"Generate a predictive model in Python to classify news articles as being either about technology, sports, or politics. The following article is about technology: NASA unveiled the Mars 2020 mission on Wednesday, a rover that will search for traces of ancient Martian life while performing geological studies of the red planet.","completion":"import pandas as pd # Preparation of data # Fetch articles from news sources # Create a dataframe from the articles # Split into training and test data df = pd.DataFrame({ 'Text': ['NASA unveiled the Mars 2020 mission on Wednesday, a rover that will search for traces of ancient Martian life while performing geological studies of the red planet.'], 'Label': ['technology'] }) train_data, test_data = train_test_split(df, test_size=0.2, random_state=42) # Create a model using a random forest classifier model = RandomForestClassifier(n_estimators=100) # Extract features from the articles vectorizer = TfidfVectorizer(stop_words='english') vectorizer.fit(train_data.Text) X_train = vectorizer.transform(train_data.Text) X_test = vectorizer.transform(test_data.Text) # Train the model model.fit(X_train, train_data.Label) # Evaluate the model print(model.score(X_test, test_data.Label)) # Make a prediction prediction = model.predict(X_test) print(prediction)"},{"prompt":"Write an algorithm in Python to find the sum of the digits in a number. 123","completion":"def findSum(n): Sum = 0 n = str(n) for i in n: Sum = Sum + int(i) return Sum # Driver code n = 123 print(findSum(n))"},{"prompt":"Generate a random string that consists only of letters and digits using python","completion":"import string import random def generate_string(): letters_and_digits = string.ascii_letters + string.digits result = \\"\\".join(random.choice(letters_and_digits) for i in range(8)) return result"},{"prompt":"Create an algorithm in Python to classify 2dimensional data points as either positive or negative. Example data points: (1, 5), (2, 3), (3, 4)","completion":"import numpy as np # Define the data points points = np.array([[1, 5], [2, 3], [3, 4]]) # Define the labels labels = np.array([1, -1, -1]) # Define the parameters of the algorithm b = 0 w0 = 0 w1 = 0 learning_rate = 0.001 # Define the training loop for i in range(100): pred = w0 + w1 * points[:, 0] > b loss = np.mean((labels - pred) ** 2) dloss_dw0 = 2 * np.mean(points[:, 0] * (labels - pred)) dloss_dw1 = 2 * np.mean(points[:, 1] * (labels - pred)) dloss_db = 2 * np.mean(labels - pred) # update parameters w0 = w0 + learning_rate * dloss_dw0 w1 = w1 + learning_rate * dloss_dw1 b = b + learning_rate * dloss_db # Define the prediction function def predict(x): pred = w0 + w1 * x > b if pred: return \\"Positive\\" else: return \\"Negative\\""},{"prompt":"Create a Python program that parses a JSON document and prints all the keys and values. { name: John, age: 30, items: [ {name: pen, price: 10.5}, {name: book, price: 15.75}, {name: notebook, price: 12.5} ] }","completion":"import json data = '{\\"name\\": \\"John\\",\\"age\\": 30,\\"items\\": [{\\"name\\": \\"pen\\",\\"price\\": 10.5},{\\"name\\": \\"book\\",\\"price\\": 15.75},{\\"name\\": \\"notebook\\",\\"price\\": 12.5}]}' json_data = json.loads(data) for key, val in json_data.items(): print(f'{key}: {val}') for item in json_data['items']: for key, val in item.items(): print(f'{key}: {val}')"},{"prompt":"mplement a neural network in Python to recognize handwritten digits from MNIST using Keras. Not applicable","completion":"import numpy as np import matplotlib.pyplot as plt import keras from keras.datasets import mnist (x_train, y_train), (x_test, y_test) = mnist.load_data() # Normalize our data x_train = x_train.astype('float32') / 255 x_test = x_test.astype('float32') / 255 # Reshape image data x_train = x_train.reshape((x_train.shape[0], 28, 28, 1)) x_test = x_test.reshape((x_test.shape[0], 28, 28, 1)) # Convert class vectors to binary class matrices y_train = keras.utils.to_categorical(y_train, 10) y_test = keras.utils.to_categorical(y_test, 10) # Create our neural network model = keras.Sequential([ keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1) ), keras.layers.MaxPooling2D(pool_size=(2, 2)), keras.layers.Conv2D(64, kernel_size=(3, 3), activation='relu' ), keras.layers.MaxPooling2D(pool_size=(2, 2)), keras.layers.Flatten(), keras.layers.Dense(128, activation='relu'), keras.layers.Dense(10, activation='softmax') ]) model.compile( optimizer='adam', loss=keras.losses.categorical_crossentropy, metrics=['accuracy'] ) # Fit our model model.fit(x_train, y_train, batch_size=64, epochs=2, verbose=1) # Evaluate our model score = model.evaluate(x_test, y_test, verbose=0) # Print our model's accuracy print('Test loss:', score[0]) print('Test accuracy:', score[1])"},{"prompt":"Can you generate the source code for a Python class that displays a working binary search algorithm?","completion":"class BinarySearch: def __init__(self, arr): self.arr = arr def search(self, x): low = 0 high = len(self.arr) - 1 while low <= high: mid = (high + low) // 2 # Check if x is present at mid if self.arr[mid] < x: low = mid + 1 # If x is greater, ignore left half elif self.arr[mid] > x: high = mid - 1 # If x is smaller, ignore right half else: return mid # If we reach here, then the element was not present return -1"},{"prompt":"Create a multiprocessing application using Python that prints out the pid of each process. Not applicable","completion":"import os from multiprocessing import Process def print_pid(): try: # Prints process id print(\\"Process ID is : \\", os.getpid()) except: print(\\"Error occured\\") if __name__ == \\"__main__\\": # Create process p1 = Process(target=print_pid) p2 = Process(target=print_pid) p3 = Process(target=print_pid) # Start process p1.start() p2.start() p3.start() # Wait till process finish execution p1.join() p2.join() p3.join()"},{"prompt":"Create a web crawler using Python to extract data from a website and export it as a CSV. https://example.com/","completion":"import csv import requests from bs4 import BeautifulSoup url = 'https://example.com/' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') csv_file = open('data.csv', 'w') csv_writer = csv.writer(csv_file) csv_writer.writerow(['title', 'description']) for article in soup.find_all('article'): title = article.h2.a.text description = article.find('div', class_='entry-content').p.text csv_writer.writerow([title, description]) csv_file.close()"},{"prompt":"Create a function to generate a random string of fixed length using Python. length=8","completion":"import random import string def generate_random_string(length): letters = string.ascii_lowercase result_str = ''.join(random.choice(letters) for i in range(length)) return result_str random_string = generate_random_string(8) print(random_string) # Outputs 'yezrtsyz'"},{"prompt":"Design a Python class to store information about student records.","completion":"class StudentRecord: def __init__(self, name, age, gender, gpa): self.name = name self.age = age self.gender = gender self.gpa = gpa def get_name(self): return self.name def get_age(self): return self.age def get_gender(self): return self.gender def get_gpa(self): return self.gpa"},{"prompt":"Write a Python script that takes a list of strings as an input and creates a dictionary containing the unique letters in each string, and their respective counts. string_list = [apple,banana,carrot]","completion":"char_dict = {} for string in string_list: for char in string: if char in char_dict: char_dict[char] += 1 else: char_dict[char] = 1 print(char_dict) # Output: # {'a': 3, 'p': 2, 'l': 1, 'e': 1, 'b': 1, 'n': 2, 'c': 1, 'r': 2, 'o': 1, 't': 1}"},{"prompt":"Design a natural language processing model in Python to find patterns in text data.","completion":"import re from nltk import tokenize input_text = 'string with several words' tokens = tokenize.word_tokenize(input_text) for token in tokens: if re.search('w+', token): print(token)"},{"prompt":"Create a Python program to add two matrices of 3 x 3 dimension. matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] matrix2 = [[10, 11, 12], [13, 14, 15], [16, 17, 18]]","completion":"def add_matrices(matrix1, matrix2): results = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] for i in range(len(matrix1)): for j in range(len(matrix1[0])): results[i][j] = matrix1[i][j] + matrix2[i][j] return results result = add_matrices(matrix1, matrix2) print(result) # output: [[11, 13, 15], [17, 19, 21], [23, 25, 27]]"},{"prompt":"Create a class in Python that implements the iterator protocol and produces the sequence of the Fibonacci numbers when iterated.","completion":"class Fibonacci: def __init__(self, n): self.n = n self.a = 0 self.b = 1 def __iter__(self): return self def __next__(self): if self.a <= self.n: temp = self.a self.a, self.b = self.b, self.a + self.b return temp else: raise StopIteration"},{"prompt":"Create a program in Python to extract the first and last names from a string of full names. Elizabeth W. Jenning","completion":"names = input().split() first_name = names[0] last_name = names[-1] print('First Name:', first_name) print('Last Name:', last_name)"},{"prompt":"Create a Machine Learning algorithm in Python that predicts the price of a car based on its features. Not applicable","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestRegressor # Read the data data = pd.read_csv('cars.csv') # Split the data in features (X) and labels (y) X = data.drop('price', axis=1) y = data['price'] # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Train the model model = RandomForestRegressor() model.fit(X_train, y_train) # Predict the price of the cars in the test set y_pred = model.predict(X_test) # Compare the predictions with the actual values for prediction, actual in zip(y_pred, y_test): print(prediction, actual)"},{"prompt":"Generate a function in Python that performs random forest regression on a dataset of features to predict some numerical output. A dataset containing features and the output label","completion":"# Load required libraries import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestRegressor # Load the dataset data = pd.read_csv(\\"dataset.csv\\") # Extract features and target variable X = data.drop('output',axis=1) y = data.output # Split into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42).fit(X_train, y_train) # Get predictions y_pred = model.predict(X_test) # Evaluate the model from sklearn.metrics import mean_squared_error mse = mean_squared_error(y_test,y_pred) # Return results return mse"},{"prompt":"edit the following Python code to make the loop stop when the counter is equal to five counter = 0 while counter < 10: print(counter) counter = counter + 1","completion":"counter = 0 while counter < 10: print(counter) if counter == 5: break counter = counter + 1"},{"prompt":"Perform optimization task using a genetic algorithm in Python. The cost function is f(x) = x^2 The range of x is 0100","completion":"import random import numpy as np # Define the cost function def cost(x): return x**2 # Initialize the population population_size = 20 population = [random.randint(0, 100) for _ in range(population_size)] # Perform the optimization max_generation = 100 for _ in range(max_generation): # Calculate the fitness fitness = [cost(x) for x in population] # Select the fittest individuals fittest_individuals = np.argsort(fitness)[::-1][:int(population_size/2)] # Generate the new population new_population = [] for individual in fittest_individuals: new_population.append(population[individual]) new_population.append(population[individual] + random.randint(-5, 5)) population = new_population # Print the result print(population)"},{"prompt":"Create a function in Python that takes a given number, removes all its digits and returns an integer. x = 356","completion":"def removeDigits(x): str_x = str(x) without_digits = int(\\"\\".join([i for i in str_x if not i.isdigit()])) return without_digits x = 356 print(removeDigits(x))"},{"prompt":"Reinforce an agent in a simple environment using Python and OpenAI gym. Not applicable","completion":"import gym import numpy as np # Set up the environment env = gym.make('CartPole-v0') # Set hyperparameters learning_rate = 0.01 n_episodes = 1000 max_steps_per_episode = 1000 # Initialize the q-table q_table = np.zeros([env.observation_space.n, env.action_space.n]) # Reinforce the agent for episode in range(n_episodes): # Reset the environment observation = env.reset() # Initialize reward total_reward = 0 # Iterate over the episode for t in range(max_steps_per_episode): # Sample action action = np.argmax(q_table[observation, :]) # Take an action observation_next, reward, done, info = env.step(action) # Update the q-table q_table[observation, action] = q_table[observation, action] + learning_rate * (reward + np.max(q_table[observation_next, :]) - q_table[observation, action]) # Update the total reward and the observation total_reward += reward observation = observation_next # End the episode if done if done: break # Print out the total reward print('Total Reward:', total_reward)"},{"prompt":"Rewrite a Python program to support multiple versions of Python 3. # Example Python 3 program for finding the area of a circle PI = 3.14 def calculateArea(radius): return PI * radius * radius; print(Area is %.6f % calculateArea(5));","completion":"# Example Python program for finding the area of a circle # Adjust for compatibility with Python3 and above import sys PI = 3.14 if sys.version_info.major >= 3: long = int def calculateArea(radius): return PI * radius * radius; print(\\"Area is %.6f\\" % calculateArea(long(5)));"},{"prompt":"Write a script in Python to send an email using the Gmail SMTP service.","completion":"import smtplib sender_email = \\"sender@gmail.com\\" receiver_email = \\"receiver@example.com\\" password = 'password' message = \\"\\"\\" Subject: Hi There This is an email to test the Gmail SMTP service. \\"\\"\\" server = smtplib.SMTP('smtp.gmail.com', 587) server.ehlo() server.starttls() server.login(sender_email, password) server.sendmail(sender_email, receiver_email, message) server.quit()"},{"prompt":"Develop a python program that prints out all the prime numbers until a given number n.","completion":"def is_prime(n): for i in range(2,int(n ** 0.5)+1): if (n % i) == 0: return False return True def print_prime_numbers_up_to_n(n): for num in range(2, n + 1): if is_prime(num): print(num) print_prime_numbers_up_to_n(n)"},{"prompt":"Create a Python script to loop over a list of numbers and print out each value if it is greater than five. list = [1, 2, 3, 4, 5, 6, 7, 8]","completion":"def loop_list(list): for i in list: if i > 5: print(i)"},{"prompt":"Create a Python class called Foo and give it three properties: name, num, and array.","completion":"class Foo: def __init__(self, name, num, array): self.name = name self.num = num self.array = array"},{"prompt":"Generate a Python program that produces a spiral matrix with the specified number of rows and columns. Row count: 9 Column count: 6","completion":"def spiral_matrix(num_rows, num_columns): matrix = [[0] * num_columns for row in range(num_rows)] stride = [(1, 0), (0, 1), (-1, 0), (0, -1)] direction = 0 x, y = 0, 0 val = 1 while 0 <= x < num_rows and 0 <= y < num_columns: matrix[x][y] = val x += stride[direction][0] y += stride[direction][1] if x < 0 or y < 0 or x == num_rows or y == num_columns or matrix[x][y] != 0: x -= stride[direction][0] y -= stride[direction][1] direction += 1 if direction == len(stride): direction = 0 x += stride[direction][0] y += stride[direction][1] val += 1 return matrix"},{"prompt":"Train a Logistic Regression model in Python on a dataset containing 5000 samples and 5 features.","completion":"from sklearn.linear_model import LogisticRegression # Load the dataset X = ... y = ... # Initialize model model = LogisticRegression() # Fit the model model.fit(X, y) # Evaluate the model model.score(X, y)"},{"prompt":"Create a Python program that takes in an array of arrays of numbers as an argument and returns a new array with each of the inner arrays multiplied by its index in the outer array. [[1, 2, 3], [4, 5, 6]]","completion":"def arrayMultiplied(arr): resultArr = [] for index, innerArr in enumerate(arr): resultArr.append([x * index for x in innerArr]) return resultArr print(arrayMultiplied([[1, 2, 3], [4, 5, 6]])) # Output: [[0, 2, 6], [0, 5, 12]]"},{"prompt":"Create a Python class representing a vehicle with attributes make, model, year, and color.","completion":"class Vehicle: \\"\\"\\"Class representing a vehicle.\\"\\"\\" def __init__(self, make, model, year, color): \\"\\"\\"Initialize vehicle object with its attributes.\\"\\"\\" self.make = make self.model = model self.year = year self.color = color"},{"prompt":"Create a new method in Python that prints all the numbers from 1 to 5.","completion":"def print_numbers(): for i in range(1, 6): print(i)"},{"prompt":"Write a Python program to optimize an existing array using Bubble sort. arr = [2,3,1,4,5]","completion":"def bubble_sort(arr): for i in range(len(arr)): for j in range(len(arr) - 1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr if __name__ == '__main__': arr = [2,3,1,4,5] print(\\"Optimized array:\\", bubble_sort(arr))"},{"prompt":"Create an API in Python using Flask that returns a JSON list of Zip codes for the given city. City = 'New York City'","completion":"from flask import Flask import requests app = Flask(__name__) @app.route('/zipcodes/<city>', methods=['GET']) def get_zipcodes_for_city(city: str): base_url = 'INSERT_API_ENDPOINT_HERE' r = requests.get(base_url + city) response_data = r.json() zip_codes = response_data['data'] return {'zip_codes': zip_codes} if __name__ == '__main__': app.run()"},{"prompt":"Create an SHA2 encryption algorithm in Python using a provided string abc. abc","completion":"import hashlib s = 'abc'.encode(\\"utf-8\\") hash_object = hashlib.sha256(s) hex_dig = hash_object.hexdigest() print(hex_dig)"},{"prompt":"Suggest a completion for the following python function in order to generate a random number between 0 and 1. import random def generate_random(): # Your code here","completion":"import random def generate_random(): return random.random()"},{"prompt":"Create a Python program to retrieve the longest string from an array of strings names = ['John', 'Paul', 'George', 'Ringo']","completion":"def get_longest_string(names): longest_string = '' for name in names: if len(name) > len(longest_string): longest_string = name return longest_string"},{"prompt":"Write a Python script to generate a random password of 8 characters with at least 2 letters, 2 numbers, and 2 symbols. Not applicable","completion":"import random import string def generate_password(): letter_lowercase = string.ascii_lowercase letter_uppercase = string.ascii_uppercase numbers = string.digits symbols = string.punctuation all_chars = letter_lowercase + letter_uppercase + numbers + symbols password = \\"\\" for i in range(2): password += random.choice(letter_lowercase) password += random.choice(letter_uppercase) password += random.choice(numbers) password += random.choice(symbols) for i in range(2): password += random.choice(all_chars) password_list = list(password) random.shuffle(password_list) password = ''.join(password_list) return password"},{"prompt":"Create a Python class that represents a person and contains attributes such as name, age, and occupation.","completion":"class Person: def __init__(self, name, age, occupation): self.name = name self.age = age self.occupation = occupation def get_info(self): print(\\"Name: \\"+self.name) print(\\"Age: \\"+str(self.age)) print(\\"Occupation: \\"+self.occupation)"},{"prompt":"Edit the following Python program to print all the numbers in a given list, one number per line. [1, 2, 3, 4, 5]","completion":"list = [1, 2, 3, 4, 5] for num in list: print(num)"},{"prompt":"Write a Python program to simulate the game of rock paper scissors. The program should accept user input. Not applicable","completion":"import random moves = [\\"Rock\\", \\"Paper\\", \\"Scissors\\"] player_move = input(\\"Please enter your move: Rock, Paper, Scissors n\\") computer_random = random.randint(0,2) computer_move = moves[computer_random] print(\\"Computer plays:\\" + computer_move) if player_move == \\"Rock\\" and computer_move == \\"Scissors\\" or player_move == \\"Paper\\" and computer_move == \\"Rock\\" or player_move == \\"Scissors\\" and computer_move == \\"Paper\\": print(\\"You Win!\\") elif player_move == computer_move: print(\\"It's a tie!\\") else: print(\\"You Lose!\\")"},{"prompt":"Generate a python script to calculate the median of a given data set.","completion":"def median(data): n = len(data) if n % 2 == 0: return (data[n//2] + data[(n//2)-1])/2 else: return data[n//2] data = [5, 6, 7, 8, 9] median = median(data) print('Median:', median)"},{"prompt":"Develop a Python program that can find the average of any set of numbers.","completion":"def find_average(nums): total = 0 for num in nums: total += num return total / len(nums)"},{"prompt":"Modify a given Python function to accept additional arguments. def divide(a, b): return a / b","completion":"def divide(a, b, c=1, d=1): return (a / b) / (c / d)"},{"prompt":"Write a python program to classify books with different genres based on a given list of book titles and authors. books = [('The Catcher in the Rye', 'J.D. Salinger'), ('To Kill a Mockingbird', 'Harper Lee'), ('Pride and Prejudice', 'Jane Austen'), ('The Hunger Games', 'Suzanne Collins')]","completion":"def classify_books(books): # Use a dictionary to store book title and corresponding genres titles_and_genres = { 'The Catcher in the Rye': 'Fiction', 'To Kill a Mockingbird': 'Novel', 'Pride and Prejudice': 'Romance', 'The Hunger Games': 'Young Adult Fiction' } result = [] for book in books: title = book[0] author = book[1] genre = titles_and_genres[title] result.append({'title': title, 'author': author, 'genre': genre}) return result books = [('The Catcher in the Rye', 'J.D. Salinger'), ('To Kill a Mockingbird', 'Harper Lee'), ('Pride and Prejudice', 'Jane Austen'), ('The Hunger Games', 'Suzanne Collins')] print(classify_books(books))"},{"prompt":"Create a function with two parameters, x and y, in Python that returns the sum of x and y. Not applicable","completion":"def add(x, y): return x+y"},{"prompt":"Create a REST API in Python Flask. This API should provide functionality for retrieving, creating, updating and deleting records from a database. Not applicable","completion":"from flask import Flask, request, jsonify import MySQLdb app = Flask(__name__) db = MySQLdb.connect(db='mydb', user='root', passwd='', host='localhost') @app.route('/records', methods=['GET']) def get_records(): cur = db.cursor() sql = 'SELECT * from records' cur.execute(sql) result = cur.fetchall() records = [] for row in result: records.append( { 'id': row[0], 'name': row[1], 'age': row[2] }) return jsonify({'records': records}) @app.route('/records', methods=['POST']) def create_record(): name = request.form['name'] age = request.form['age'] cur = db.cursor() sql = (f\\"INSERT INTO records (name, age) VALUES('{name}', {age})\\") cur.execute(sql) db.commit() return jsonify( { 'message': 'Record successfully created!' } ) @app.route('/records/<int:id>', methods=['PUT']) def update_record(id): name = request.form['name'] age = request.form['age'] cur = db.cursor() sql = ( f\\"UPDATE records SET name = '{name}', age = {age} WHERE id={id}\\") cur.execute(sql) db.commit() return jsonify( { 'message': 'Record successfully updated!' } ) @app.route('/records/<int:id>', methods=['DELETE']) def delete_record(id): cur = db.cursor() sql = (f\\"DELETE FROM records WHERE id={id}\\") cur.execute(sql) db.commit() return jsonify( { 'message': 'Record successfully deleted!' } ) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create an automated trading algorithm in Python.","completion":"import datetime import pandas as pd def automated_strategy(data, window1, window2): # Calculating SMA short_rolling = data.rolling(window=window1).mean() long_rolling = data.rolling(window=window2).mean() # Creating signals data['short_mavg'] = short_rolling data['long_mavg'] = long_rolling data['signal'] = 0.0 data['signal'][window1:] = np.where(data['short_mavg'][window1:] > data['long_mavg'][window1:], 1.0, 0.0) # Generating trading orders data['positions'] = data['signal'].diff() # Initializing the plot figure fig = plt.figure() # Plotting SMA ax1 = fig.add_subplot(111, ylabel='Price in ') data[['Close', 'short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.) # Plotting the trading orders ax2 = fig.add_subplot(111, ylabel='Order', yticklabels=[]) data['positions'].plot(ax=ax2, lw=2., color='r') # Plotting the trading orders ax3 = fig.add_subplot(111, ylabel='P&L', yticklabels=[]) data['p&l'].plot(ax=ax3, lw=2., color='g') # Show the plot plt.show()"},{"prompt":"Create a Python program to generate a random number between 1 and 10.","completion":"import random def generate_random_number(): return random.randint(1, 10) print(generate_random_number())"},{"prompt":"Translate a given python program into a mips assembly instruction. x = 0 y = 0 z = x + y","completion":"#Load x into register 1 li t0, 0 #Load y into register 2 li t1, 0 #Add x and y, store result in register 3 add t2, t0, t1 #Store the result in z sw t2, z(0)"},{"prompt":"Design a neural network in Python to distinguish between cats and dogs.","completion":"import tensorflow as tf import numpy as np import matplotlib.pyplot as plt # Define the number of classes and the shape of image input num_classes = 2 image_shape = (64, 64, 3) # Create input and output layers inputs = tf.keras.Input(shape=image_shape) x = tf.keras.layers.Conv2D(32, (3, 3), activation='relu')(inputs) x = tf.keras.layers.MaxPooling2D((2, 2))(x) x = tf.keras.layers.Conv2D(64, (3, 3), activation='relu')(x) x = tf.keras.layers.MaxPooling2D((2, 2))(x) x = tf.keras.layers.Conv2D(64, (3, 3), activation='relu')(x) x = tf.keras.layers.Flatten()(x) x = tf.keras.layers.Dense(64, activation='relu')(x) outputs = tf.keras.layers.Dense(num_classes, activation='softmax')(x) # Build the model model = tf.keras.Model(inputs, outputs) # Compile the model model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy']) model.summary()"},{"prompt":"Write a Python program to remove items from a list present in other list. list1 = [1, 2, 3, 4, 5] list2 = [3, 4, 5, 6]","completion":"result_list = [item for item in list1 if item not in list2]"},{"prompt":"Create a python function to calculate the factorial of a integer input.","completion":"def factorial(n): \\"\\"\\"Calculate the factorial of an integer.\\"\\"\\" if n <= 1: return 1 return n*factorial(n-1)"},{"prompt":"Create a simple web server using Flask in Python. Not applicable","completion":"from flask import Flask app = Flask(__name__) @app.route('/') def hello(): return 'Hello World!' if __name__ == '__main__': app.run()"},{"prompt":"Create an algorithm in Python to generate the fibonacci sequence.","completion":"def fibonacci_sequence(n): sequence = [1] if n == 1: return sequence else: sequence.append(1) for i in range(2, n): sequence.append(sequence[i-1] + sequence[i-2]) return sequence n = 10 result = fibonacci_sequence(n) print(result)"},{"prompt":"Create a Python function that shuffles an array of numbers.","completion":"import random def shuffle_array(arr): random.shuffle(arr) return arr"},{"prompt":"Construct an algorithm to find the median of a given array in Python. [4, 5, 2, 7, 1]","completion":"def median(arr): # Sort the array arr.sort() # Calculate the index of the middle element if len(arr) % 2 == 0: # If the number of elements is even mid = int(len(arr)/2) median = (arr[mid] + arr[mid-1])/2 else: # If the number of elements is odd mid = int(len(arr)/2) median = arr[mid] return median arr = [4, 5, 2, 7, 1] print(median(arr))"},{"prompt":"Write a Python code snippet to generate a pseudorandom number between 0 and 1.","completion":"import random random_number = random.random() print(random_number)"},{"prompt":"What are the advantages and disadvantages of using an interpreted language like Python?","completion":"Advantages of using a interpreted language like Python: - It generally runs faster than compiled languages as it just evaluates expressions as they run. - It is easier to debug since errors are caught during the interpretation process, rather than during compilation process. - It is easier to learn and requires less development time, so it is cheaper to implement. - It is a versatile language, supported by many libraries and frameworks, which makes it suitable for many different projects. Disadvantages of using a interpreted language like Python: - It tends to be slower than compiled languages as the code must be interpreted each time it is run. - Code can be difficult to optimize, resulting in less efficient programs. - Interpreted languages are not always suitable for resource-intensive tasks, such as video game development. - Interpreted languages can be more vulnerable to security issues."},{"prompt":"Create a Python program that counts the number of occurrences of a character in a string String = 'Hello World', Character = 'o'","completion":"def count_char(string, char): count = 0 for c in string: if c == char: count += 1 return count"},{"prompt":"Create a web scraper using Python Scrapy that extracts a list of the latest published articles from some website. Not applicable","completion":"import scrapy class ArticleSpider(scrapy.Spider): name = 'articles' start_urls = ['https://www.some-website.com/latest'] def parse(self, response): for article in response.css('article'): yield { 'title': article.css('h2 ::text').extract_first(), 'url': article.css('a ::attr(href)').extract_first(), } next_page = response.css('li.next a ::attr(href)').extract_first() if next_page is not None: yield response.follow(next_page, callback=self.parse)"},{"prompt":"Design a function in Python for finding the missing number in an array of integers. Array: [1, 2, 3, 4, 6, 7, 8, 9]","completion":"def find_missing_number(arr): # Set to store all numbers from 1 to the last element in the array # For an array of length n, the last element has value n all_nums = set(range(1, arr[-1] + 1)) # Set to store all numbers present in the array arr_nums = set(arr) return list(all_nums - arr_nums)[0] # Test print(find_missing_number([1, 2, 3, 4, 6, 7, 8, 9])) # Output: 5"},{"prompt":"Create an optimizer tool in Python to find the maximum of a given set of inputs. [5, 10, 15, 20]","completion":"def max_optimizer(input_list): maximum = max(input_list) return maximum"},{"prompt":"Write a Python function to sort a dictionary by value. dictionary = { 'a': 10, 'b': 3, 'c': 5 }","completion":"def sortDictByValue(dictionary): sorted_dictionary = sorted(dictionary.items(), key=lambda x: x[1]) return dict(sorted_dictionary) dictionary = { 'a': 10, 'b': 3, 'c': 5 } print(sortDictByValue(dictionary)) // Output: {'b': 3, 'c': 5, 'a': 10}"},{"prompt":"What is the most efficient way to reverse a linked list in Python?","completion":"def reverse(head): prev = None current = head while current: next = current.next current.next = prev prev = current current = next return prev"},{"prompt":"Create a function in Python to split a list into sublists of given length x.","completion":"def split_list(list, x): return [list[i * x:(i + 1) * x] for i in range((len(list) + x - 1) // x )]"},{"prompt":"Write a Python program to create a Caesar Cipher encryption for a given string.","completion":"def encrypt(text,s): result = \\"\\" # traverse text for i in range(len(text)): char = text[i] # Encrypt uppercase characters if (char.isupper()): result += chr((ord(char) + s-65) % 26 + 65) # Encrypt lowercase characters else: result += chr((ord(char) + s - 97) % 26 + 97) return result"},{"prompt":"Combine the given lists using the zip method in Python. list1 = [1, 2, 3, 4] list2 = [5, 6, 7, 8]","completion":"list3 = list(zip(list1, list2)) print(list3) # Output: [(1, 5), (2, 6), (3, 7), (4, 8)]"},{"prompt":"Write a class that implements the singleton pattern in Python. No inpu","completion":"class Singleton: instance = None @staticmethod def get_instance(): if Singleton.instance is None: Singleton.instance = Singleton() return Singleton.instance"},{"prompt":"Design a Python program that prints out the first 10 prime numbers.","completion":"\\"\\"\\" Design a Python program to print out the first 10 prime numbers \\"\\"\\" def get_prime_numbers(n): prime_numbers = [] x = 2 while len(prime_numbers) < n: is_prime = True for num in prime_numbers: if x % num == 0: is_prime = False break if is_prime: prime_numbers.append(x) x += 1 return prime_numbers if __name__ == '__main__': result = get_prime_numbers(10) print(result)"},{"prompt":"Write a Python program to parse a HTML document using the BeautifulSoup library. <html> <head> <title>Example HTML Document</title> </head> <body> <p>This is an example of a HTML document.</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ul> </body> </html>","completion":"from bs4 import BeautifulSoup html_doc = \\"\\"\\" <html> <head> <title>Example HTML Document</title> </head> <body> <p>This is an example of a HTML document.</p> <ul> <li>Item 1</li> <li>Item 2</li> <li>Item 3</li> </ul> </body> </html> \\"\\"\\" soup = BeautifulSoup(html_doc, 'html.parser') title = soup.find('title').text print(title) items = [item.text for item in soup.findAll('li')] print(items)"},{"prompt":"This code is a Python script that exports information about members of a crew in the game Grand Theft Auto V. To use it, you need to have Python installed and the Selenium module installed. You also need to provide login information for the Rockstar Social Club website if you want to see more detailed information about each member. To run the script, open a terminal or command prompt, navigate to the directory where the script is saved, and type python gtav_crew_exporter.py c <crew_name> where <crew_name> is the name of the crew you want to export information for. You can also provide optional arguments to specify a username and password for the Rockstar Social Club website, an output file to save the information to, and a verbose flag to see more detailed output.","completion":"#!/usr/bin/python Import modules from selenium import selenium from selenium import webdriver import sys, time, re, string, getopt Constants default_crew = 'elotrolado' login_url = 'https://socialclub.rockstargames.com/profile/signin' base_crew_url = 'http://socialclub.rockstargames.com/crew' path_gtav_base_url = '/games/gtav' path_gtav_overview_url = '/career/overview/gtaonline' Global username = '' password = '' crew_name = '' output_file = '' verbose_flag = '' Class definition class crew_member: def __init__(self): self.id = '' self.psn = '' self.url = '' self.level = '' self.playtime = '' self.country = '' self.rank = '' self.crew = '' self.platform = '' self.error = 'All ok.' Function definitions def print_help(): print 'gtav_crew_exporter.py -c <crew_name> [-u <username> -p <password>] [-o <output_file>] [-v]' def arg_parser(argv): global crew_name global username global password global output_file global verbose_flag try: opts, args = getopt.getopt(argv,\\"hvu:p:c:o:\\",[\\"verbose\\",\\"username\\",\\"password\\",\\"crew=\\",\\"ofile=\\"]) except getopt.GetoptError: print_help() debug(2) for opt, arg in opts: if opt == '-h': print_help() debug() elif opt in (\\"-c\\", \\"--crew\\"): crew_name = arg elif opt in (\\"-o\\", \\"--ofile\\"): output_file = arg if not output_file: print_help() elif opt in (\\"-v\\", \\"--verbose\\"): verbose_flag = 1 elif opt in (\\"-u\\", \\"--username\\"): username = arg if not username: print_help() elif opt in (\\"-p\\", \\"--password\\"): password = arg if not password: print_help() if not crew_name: crew_name = default_crew return 0 def debug(msg): global verbose_flag if verbose_flag: print 'DBG : ' + msg def WaitForElement(webdriver, path): limit = 10 # waiting limit in seconds inc = 1 # in seconds; sleep for 500ms c = 0 while (c < limit): try: webdriver.find_element_by_xpath(path) return 1 # Success except: time.sleep(inc) c = c + inc # print sys.exc_info() return 0 def LoginSocialClub(driver): if not username or not password: print '!! Without login and password, only username and rank are available:' return 1 driver.get(login_url) path = '//*[@id=\\"submitBtn\\"]' result = WaitForElement(driver, path) if not result: # interprets returned value # driver.close() debug(\\"nThe page is not loaded yet.\\") else: debug('web - page fully loaded!') path='//input[@id=\\"login-field\\"]' driver.find_element_by_xpath(path).clear() driver.find_element_by_xpath(path).send_keys(username) path='//input[@id=\\"password-field\\"]' driver.find_element_by_xpath(path).clear() driver.find_element_by_xpath(path).send_keys(password) path = '//*[@id=\\"submitBtn\\"]' driver.find_element_by_xpath(path).click() driver.get(login_url) path = '//*[@id=\\"panelaccounts\\"]' result = WaitForElement(driver, path) if not result: # interprets returned value # driver.close() debug(\\"nThe page is not loaded yet.\\") else: debug('web - page fully loaded!') return 0 def GetMembersList(driver): crew_url = base_crew_url + '/' + crew_name + '/hierarchy' driver.get(crew_url) path = '//*[@id=\\"muscleList\\"]' result = WaitForElement(driver, path) if not result: # interprets returned value # driver.close() debug(\\"nThe page is not loaded yet.\\") else: debug('web - page fully loaded!') path = '//a[@data-ga=\\"footer_selectlanguage_en\\"]' viewall = driver.find_element_by_xpath(path) if not viewall: debug(\\"meh.\\") else: debug(\\"web - set page in english.\\") # viewall.click() path = '//a[@class=\\"viewAll\\"]' try: viewall = driver.find_element_by_xpath(path) debug(\\"web - unfold users.\\") viewall.click() except: debug(\\"web - all users visible.\\") path = '//div[contains(@id, \\"crewRank_\\")]' hierarchy = driver.find_elements_by_xpath(path) crew_members = list() for rank in hierarchy: # print rank.get_attribute('id') path = '//div[@id=\\"' + rank.get_attribute('id') + '\\"]//i[@class=\\"icon-info\\"]' rank_name = rank.find_element_by_xpath(path).get_attribute('data-name') # print rank_name path = '//div[@id=\\"' + rank.get_attribute('id') + '\\"]//ul[@id=\\"' + rank_name + 'List\\"]//div[@class=\\"member\\"]//img' members = rank.find_elements_by_xpath(path) for member in members: cm = crew_member() cm.id = member.get_attribute('data-original-title') cm.url = member.find_element_by_xpath('..').get_attribute('href') cm.rank = rank_name crew_members.append(cm) return crew_members Function definitions def GetMemberInfo(driver, member): debug('[' + member.id + ']') retry = 0 max_retry = 5 # Add retry to avoid errors for rety in range(max_retry): Load profile page driver.get(member.url) path = '//*[@id=\\"cardInfoVitals\\"]' result = WaitForElement(driver, path) if not result: # interprets returned value # driver.close() debug(\\"web - The page is not loaded yet. [\\" + str(retry) + \\"]\\") retry += 1 else: debug('web - page fully loaded! [' + str(retry) + ']') break Check if profile is private try: path = '//div[@id=\\"no-profile\\"]' profail = driver.find_element_by_xpath(path) debug('[' + member.id + '] Profile is private!') member.error = 'Private profile.' return 1 # Success except: Crew Principal path = '//div[@class=\\"crew-info\\"]/a' member.crew = driver.find_element_by_xpath(path).get_attribute(\\"href\\").rsplit('/',1)[1] debug('[' + member.id + '] main crew: ' + member.crew) try: PSN ID path = '//div[@class=\\"PSN\\"]/h5' member.psn = driver.find_element_by_xpath(path).text except: member.psn = '' debug('[' + member.id + '] PSN ID: ' + member.psn) try: Language path = '//div[@id=\\"cardInfoFooter\\"]//span[contains(@class,\\"Country\\")]' member.country = driver.find_element_by_xpath(path).get_attribute(\\"data-original-title\\") except: member.country = '' debug('[' + member.id + '] country: ' + member.country) driver.get(member.url + '/'+ path_gtav_base_url + '/ps3' + path_gtav_overview_url) path = '//div[@id=\\"freemodeRank\\"]' result = WaitForElement(driver, path) if not result: # interprets returned value # driver.close() debug(\\"nThe page is not loaded yet.\\") else: debug('web - page fully loaded!') try: path = '//div[@id=\\"freemodeRank\\"]//h3' member.level = driver.find_element_by_xpath(path).text except: member.level = '' if member.level == 0: member.platform = 'XBOX360' driver.get(member.url + '/'+ path_gtav_base_url + '/xbox' + path_gtav_overview_url) path = '//div[@id=\\"freemodeRank\\"]' result = WaitForElement(driver, path) if not result: # interprets returned value # driver.close() debug(\\"nThe page is not loaded yet.\\") else: debug('web - page fully loaded!') try: path = '//div[@id=\\"freemodeRank\\"]//h3' member.level = driver.find_element_by_xpath(path).text except: member.level = '' else: member.platform = 'PS3' debug('[' + member.id + '] rank: ' + member.rank) try: Language path = '//div[@id=\\"freemodeRank\\"]//div[@class=\\"rankBar\\"]/h4' member.playtime = driver.find_element_by_xpath(path).text.rsplit(':',1)[1] except: member.playtime = '' debug('[' + member.id + '] playtime: ' + member.playtime) # print sys.exc_info() return member Main function if __name__ == \\"__main__\\": arg_parser(sys.argv[1:]) debug('web - starting browser') driver = webdriver.Firefox() print 'Crew: ' + crew_name crew_members = GetMembersList(driver) print 'Crew Size: ' + str(len(crew_members)) + ' members' error = LoginSocialClub(driver) if error: print 'Crew Members :' for cm in crew_members: print cm.rank + \\", \\" + cm.id + \\", \\" + cm.url debug('You need to provide login information to view each member info.') for cm in crew_members: cm = GetMemberInfo(driver, cm) if output_file: f = open(output_file,'w') for cm in crew_members: member_csv = str(cm.id) + ', ' + str(cm.country) + ', ' + str(cm.psn) + ', ' + str(cm.platform) + ', ' + str(cm.crew) + ', ' + str(cm.rank) + ', ' + str(cm.level) + ', ' + str(cm.playtime) + ', ' + str(cm.error) if output_file: f.write(member_csv + 'n') else: print member_csv if output_file: print 'Output saved as ' + output_file + '.' f.close() # you can omit in most cases as the destructor will call if driver.close() sys.exit() # Grab URL #url = str(sys.argv[1]) # Check if it's malformed #regex = re.compile( # r'^(?:http|ftp)s?://' # http:// or https:// # r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?.)+(?:[A-Z]{2,6}.?|[A-Z0-9-]{2,}.?)|' #domain... # r'localhost|' #localhost... # r'd{1,3}.d{1,3}.d{1,3}.d{1,3})' # ...or ip # r'(?::d+)?' # optional port # r'(?:/?|[/?]S+)', re.IGNORECASE) #vurl = regex.match(url) #if vurl: # print (\\"Good url : %s\\" % url) #else: # debug (\\"Malformed url : %s\\" % url)"},{"prompt":"Build a function in Python that will calculate the area of a right angled triangle.","completion":"def area_of_right_triangle(base, height): \\"\\"\\"Calculate the area of a right angled triangle\\"\\"\\" return (1/2) * base * height"},{"prompt":"Create a Python class which detects whether a sentence is an anagram. sentence1 = hello world sentence2 = world hello","completion":"class AnagramDetector: def __init__(self, sentence1, sentence2): self.sentence1 = sentence1 self.sentence2 = sentence2 def is_anagram(self): # put words in sentences in lowercase s1_words = [word.lower() for word in self.sentence1.split()] s2_words = [word.lower() for word in self.sentence2.split()] # compare the length of the words if len(s1_words) != len(s2_words): return False # compare the words in both list for word in s1_words: if word not in s2_words: return False return True detector = AnagramDetector(sentence1, sentence2) result = detector.is_anagram() print(result)"},{"prompt":"Construct a code to sum all the numbers in a list in Python. [3, 4, 7, 1]","completion":"sum = 0 for num in [3, 4, 7, 1]: sum += num print(sum) # Output is 15"},{"prompt":"Generate an optimized machine learning model in Python that predicts the price of a house given a set of features. Features: square_feet, bedrooms, bathrooms, location (zipcode)","completion":"import numpy as np import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error #Loading the dataset data = pd.read_csv('house_pricing.csv') X = data[['square_feet', 'bedrooms', 'bathrooms', 'location']] y = data['price'] #Splitting the data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2020) #Training the model model = LinearRegression() model.fit(X_train, y_train) #Evaluating the model y_pred = model.predict(X_test) mse = mean_squared_error(y_test, y_pred) #Optimizing the model optimized_model = LinearRegression(normalize = True) optimized_model.fit(X_train, y_train) #Evaluating the optimized model y_pred_opt = optimized_model.predict(X_test) mse_opt = mean_squared_error(y_test, y_pred_opt) #Printing results print('Mean Squared Error (Unoptimized) : {:.4f}'.format(mse)) print('Mean Squared Error (Optimized) : {:.4f}'.format(mse_opt))"},{"prompt":"Develop an algorithm in Python for determining the optimal set of items to purchase when given a set of items and prices. A list of items with corresponding price","completion":"# Create a function to compute the total cost of purchasing the items def compute_cost(items): total = 0 for item in items: total += item['price'] return total # Create a function for computing the maximum cost of purchasing the items def compute_maximum_cost(items, budget): max_cost = 0 n = len(items) # Generate all possible combinations of items for i in range(1 << n): current_cost = 0 for j in range(n): if i & (1 << j): current_cost += items[j]['price'] if current_cost <= budget and current_cost > max_cost: max_cost = current_cost return max_cost # Create a function for determining the optimal set of items to purchase def compute_optimal_items(items, budget): n = len(items) max_cost = compute_maximum_cost(items, budget) optimal_set = [] # Generate all possible combinations of items for i in range(1 << n): current_cost = 0 for j in range(n): if i & (1 << j): current_cost += items[j]['price'] if current_cost == max_cost: for j in range(n): if i & (1 << j): optimal_set.append(items[j]['name']) return optimal_set"},{"prompt":"Create a function for converting a string to an integer in Python.","completion":"def string_to_int(s): return int(s)"},{"prompt":"Write a loop in Python to print out all the prime numbers up to a given number.","completion":"def print_prime_numbers(num): for i in range(2, num+1): for j in range(2, i): if (i % j) == 0: break else: print(i)"},{"prompt":"Write a Python program to generate random passwords. The passwords should include letters, numbers, and special characters (like , &, #). The passwords should be at least 8 characters long. Not applicable","completion":"import random import string def generate_password(length): chars = string.ascii_letters + string.digits + '#&' return ''.join(random.choice(chars) for _ in range(length)) length = 8 password = generate_password(length) print(password)"},{"prompt":"Create a Python program to store multiple names of your friends in a list and access the names using indices. Not applicable","completion":"my_friends = [\\"Greg\\", \\"Emily\\", \\"Sam\\", \\"Jess\\", \\"Leo\\"] for i in range(len(my_friends)): print(my_friends[i]) # Output # Greg # Emily # Sam # Jess # Leo"},{"prompt":"dentify the bug in the following Python code snippet and suggestion a fix. def updateList(myList): myList = myList + [1] myList = [1, 2, 3] updateList(myList) print(myList)","completion":"def updateList(myList): myList.append(1) myList = [1, 2, 3] updateList(myList) print(myList)"},{"prompt":"Create a Python program for performing sentiment analysis on an article. Not applicable","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer from nltk.tokenize import word_tokenize # input text article = \\"\\"\\" This article is about Harry Potter and how he saves the day. It is a feel-good story of triumph and courage in the face of adversity. \\"\\"\\" # create sentiment analyzer sentiment_analyzer = SentimentIntensityAnalyzer() # tokenize the input text into separate words tokens = word_tokenize(article) # perform sentiment analysis sentiment_scores = {} for token in tokens: sentiment_score = sentiment_analyzer.polarity_scores(token) sentiment_scores[token] = sentiment_score # print the sentiment scores print(sentiment_scores) // Output: // {'This': {'neg': 0.0, 'neu': 0.323, 'pos': 0.677, 'compound': 0.4939}, // 'article': {'neg': 0.0, 'neu': 0.451, 'pos': 0.549, 'compound': 0.6249}, // 'is': {'neg': 0.0, 'neu': 1.0, 'pos': 0.0, 'compound': 0.0}, // 'about': {'neg': 0.0, 'neu': 1.0, 'pos': 0.0, 'compound': 0.0}, // …"},{"prompt":"Generate a Python program to add a prefix and suffix to each elements of a list. [apple, banana, cherry]","completion":"def add_prefix_suffix(lst, prefix, suffix): return [prefix + i + suffix for i in lst]"},{"prompt":"Write a Python code to detect the Odd or Even numbers in a given list. list = [1, 2, 3, 4, 5]","completion":"for num in list: if num % 2 == 0: print(num, \\"is an even number\\") else: print(num, \\"is an odd number\\")"},{"prompt":"Write a function in Python which takes a number and multiplies it by 3. number = 4","completion":"def multiplyByThree(number): return number*3 multiplied_value = multiplyByThree(4) print(multiplied_value)"},{"prompt":"Create a Python program to calculate the total cost of an order, including the base price and applicable taxes. orderItems = [{Name:Apples,Price:2.00,Qty:2},{Name:Milk,Price:2.50,Qty:1},{Name:Eggs,Price:3.00,Qty:6}] taxRate = 0.08","completion":"def calculate_total(order_items, tax_rate): total = 0.00 for item in order_items: total += (item[\\"Price\\"] * item[\\"Qty\\"]) total += total * tax_rate return total order_items = [{\\"Name\\":\\"Apples\\",\\"Price\\":2.00,\\"Qty\\":2},{\\"Name\\":\\"Milk\\",\\"Price\\":2.50,\\"Qty\\":1},{\\"Name\\":\\"Eggs\\",\\"Price\\":3.00,\\"Qty\\":6}] tax_rate = 0.08 total = calculate_total(order_items, tax_rate) print(total)"},{"prompt":"Design a Python program to print out the list of prime numbers up to the input value. 25","completion":"def printPrimeNum(n): prime_list = [] for num in range(2, n + 1): prime = True for i in range(2, num): if (num % i == 0): prime = False if prime: prime_list.append(num) print(prime_list) num = 25 printPrimeNum(num)"},{"prompt":"mplement a Python program to print all numbers from 0 to 100 that are multiples of 3. Not applicable","completion":"for i in range(0, 101): if i % 3 == 0: print(i) # Output 0 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99"},{"prompt":"Create a Python class to accurately define a circle.","completion":"class Circle(): \\"\\"\\" Accurately define a circle in Python \\"\\"\\" def __init__(self, x, y, radius): \\"\\"\\" Constructor for Circle \\"\\"\\" self.x = x self.y = y self.radius = radius def get_area(self): \\"\\"\\" Returns area of the circle \\"\\"\\" return 3.14*self.radius**2 def get_perimeter(self): \\"\\"\\" Returns perimeter of the circle \\"\\"\\" return 2*3.14*self.radius def get_centre(self): \\"\\"\\" Returns the centre point of the circle \\"\\"\\" return self.x, self.y"},{"prompt":"mplement a Stack data structure in Python","completion":"class Stack: def __init__(self): self.stack = [] def is_empty(self): return self.stack == [] def push(self, data): self.stack.append(data) def pop(self): data = self.stack[-1] del self.stack[-1] return data def peek(self): return self.stack[-1] def size_stack(self): return len(self.stack)"},{"prompt":"Generate a Python program to delete the element at a given index from the given array. [1,2,3,4,5], index=3","completion":"def delete_element_at_index(arr, index): if index >= len(arr): raise Exception('index out of range') # Delete the element at the index del arr[index] # Example array and index my_arr = [1,2,3,4,5]; index = 3; # Call the function delete_element_at_index(my_arr, index) # Print the array print(my_arr)"},{"prompt":"Develop a Sentiment Analysis classifier in Python. The classifier should predict the sentiment (positive or negative) of a given sentence. The food at this restaurant is terrible","completion":"import pandas as pd import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.svm import LinearSVC # Load the data data = pd.read_csv('data.csv') # Create the feature vector vectorizer = CountVectorizer() X = vectorizer.fit_transform(data['text']) # Create labels y = np.where(data['sentiment']=='positive', 1, 0) # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the classifier model = LinearSVC() model.fit(X_train, y_train) # Make a prediction sentence = 'The food at this restaurant is terrible' preds = model.predict(vectorizer.transform([sentence])) # Print the prediction print('Sentiment:', 'Positive' if preds[0] else 'Negative')"},{"prompt":"Develop a code to search a word in a given sentence and return the index at which it was found. sentence = Python is a powerful programming language. word = powerful","completion":"# Search a given word in a sentence and return the index def find_word(sentence, word): index = -1 for i in range(len(sentence)-len(word)+1): if sentence[i:i+len(word)] == word: index = i break return index sentence = \\"Python is a powerful programming language.\\" word = \\"powerful\\" index = find_word(sentence, word) print('The index of the word is', index) # Output The index of the word is 14"},{"prompt":"Create a web service in Python that accesses and stores weather data from a given API. Not applicable","completion":"import requests import json API_KEY = 'myapikey' def get_weather(location): url = 'http://api.openweathermap.org/data/2.5/weather?q={}&APPID={}'.format(location, API_KEY) response = requests.get(url) data = json.loads(response.text) return data def store_weather(location, data): # store the weather data in a database pass # main application if __name__ == '__main__': location = 'London' data = get_weather(location) store_weather(location, data)"},{"prompt":"Create a python program for searching for a word in a text document. The quick brown fox jumped over the lazy dog search: fox","completion":"import re text = 'The quick brown fox jumped over the lazy dog' search = 'fox' result = re.findall(search, text) if result: print('Found!'); else: print('Not Found!')"},{"prompt":"Construct a Python program to generate the following pattern given a number as input. 6","completion":"def pattern(n): # outer loop to handle number of rows for i in range(0, n): # inner loop to handle number of columns for j in range(0, i+1): # printing stars if j%2 == 0: print(\\"* \\",end=\\"\\") else: print(\\"# \\",end=\\"\\") # ending line after each row print(\\"r\\") # Driver Code n = 6 pattern(n)"},{"prompt":"Create a Python script to read a given PDF document. file = ‘document.pdf’","completion":"import PyPDF2 # open and read the pdf file file = open('document.pdf', 'rb') reader = PyPDF2.PdfFileReader(file) # read complete document for page in range(reader.numPages): print(reader.getPage(page).extractText()) file.close()"},{"prompt":"Write a Python program to scrape news articles from a given website and store them in a database. The program should record basic information such as headline, author, date, and link for each article. https://www.news.example.com/","completion":"import requests from bs4 import BeautifulSoup from datetime import datetime import sqlite3 #Specify the URL url = 'https://www.news.example.com/' #Send a request to the website and fetch the response r = requests.get(url) #Parse the response using BeautifulSoup soup = BeautifulSoup(r.content, 'html.parser') #Retrive all the articles articles = soup.find_all('article') # Create a database connection conn = sqlite3.connect(\\"news.db\\") c = conn.cursor() # Create a table in the database c.execute('CREATE TABLE IF NOT EXISTS articles(' 'id INTEGER PRIMARY KEY AUTOINCREMENT,' 'headline VARCHAR(255),' 'author VARCHAR(255),' 'date DATETIME,' 'link VARCHAR(255))') #Iterate over the articles for article in articles: headline = article.h2.a.text author = article.find('span', attrs = {'class':'author'}).text date = article.span.text link = article.h2.a['href'] # Insert data in the table c.execute('INSERT INTO articles(headline, author, date, link)' 'VALUES(?, ?, ?, ?)', (headline, author, date, link)) #Commit the changes conn.commit() #Close the connection conn.close()"},{"prompt":"Classify a set of programming language names into highlevel languages and lowlevel languages. JavaScript, Python, C, Assembly","completion":"High Level Languages: 1. JavaScript 2. Python Low Level Languages: 1. C 2. Assembly"},{"prompt":"Create a program in any language that outputs all the prime numbers between 1 and a given number (say, n). 90","completion":"# Python code n = 90 for num in range(2, n+1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num)"},{"prompt":"Create a visualization in Python using a library like Matplotlib or Seaborn to compare the price of tomatoes over the past 10 years.","completion":"import matplotlib.pyplot as plt # Set the x-axis to a list of strings for each month. x_axis = [\\"Jan\\", \\"Feb\\", \\"Mar\\", \\"Apr\\", \\"May\\", \\"Jun\\", \\"Jul\\", \\"Aug\\", \\"Sep\\", \\"Oct\\", \\"Nov\\", \\"Dec\\"] # Set the y-axis to a list of floats as the total fare in US dollars accumulated for each month. y_axis = [10.02, 23.24, 39.20, 35.42, 32.34, 27.04, 43.82, 10.56, 11.85, 27.90,"},{"prompt":"Develop a function to generate all combinations of a given list in Python. [1, 2, 3]","completion":"def all_combinations(list_of_numbers): if len(list_of_numbers) == 0: return [] if len(list_of_numbers) == 1: return [list_of_numbers] combinations = [] for combination in all_combinations(list_of_numbers[1:]): combinations.append(combination) combinations.append([list_of_numbers[0]] + combination) return combinations"},{"prompt":"Design a Graphical User Interface (GUI) in Python with a label and a button.","completion":"import tkinter as tk root = tk.Tk() root.title('My App') # Create a label label = tk.Label(root, text=\\"Hello, World!\\") label.pack() # Create a button button = tk.Button(root, text = \\"Click Me!\\") button.pack() root.mainloop()"},{"prompt":"Develop a program in Python that prints the multiplication table for the number 5. Not applicable","completion":"for i in range(1,11): print('5 *', i, '=', 5 * i) # Output # 5 * 1 = 5 # 5 * 2 = 10 # 5 * 3 = 15 # 5 * 4 = 20 # 5 * 5 = 25 # 5 * 6 = 30 # 5 * 7 = 35 # 5 * 8 = 40 # 5 * 9 = 45 # 5 * 10 = 50"},{"prompt":"Develop a Python Webscraper for collecting data from a given URL. Example URL: http://example.com/d","completion":"import requests from bs4 import BeautifulSoup URL = 'http://example.com/data' # Send a request to the URL page = requests.get(URL) # Parse the page soup = BeautifulSoup(page.content, 'html.parser') # Get the data data = soup.find_all('div', class_='data') # Print the data for item in data: print(item.text)"},{"prompt":"Develop a classifier in Python to predict whether a person is male or female based on the height, weight, and shoe size. Height: 6 foot Weight: 170 lbs Shoe Size: 9","completion":"from sklearn import tree # [Height, Weight, Shoe Size] data = [[6, 170, 9], [5.5, 150, 6], [5.7, 160, 8], [5.9, 180, 10]] target = ['male', 'female', 'female', 'male'] clf = tree.DecisionTreeClassifier() clf.fit(data, target) height = 6 weight = 170 shoe_size = 9 predict = clf.predict([[height, weight, shoe_size]]) if predict == 'male': print('Male') elif predict == 'female': print('Female')"},{"prompt":"Edit the following Python code to remove the syntax errors. print('Please enter a number:) n = int(input())","completion":"print('Please enter a number:') n = int(input())"},{"prompt":"Generate a class in Python that deals with database operations for a Customer model. The class should include methods for writing to the database, querying from the database, and deleting from the database. Not applicable","completion":"import sqlite3 class CustomerData: def __init__(self): self.db = sqlite3.connect('customers.db') def write(self, customer): with self.db: self.db.execute('INSERT INTO customers VALUES(?, ?)', (customer.name, customer.age)) return customer def get(self, customer_name): with self.db: row = self.db.execute('SELECT * FROM customers WHERE name=?', (customer_name,)).fetchone() if row: return Customer(*row) else: return None def delete(self, customer_name): with self.db: self.db.execute('DELETE FROM customers WHERE name=?', (customer_name,)) class Customer: def __init__(self, name, age): self.name = name self.age = age def __str__(self): return f'{self.name}, {self.age}'"},{"prompt":"Create code in Python to check the righthand side of a list and remove any elements which are divisible by 3. arr = [12, 15, 3, 8, 10, 24]","completion":"arr = [12, 15, 8, 10] arr[:] = [x for x in arr if x % 3 != 0]"},{"prompt":"Generate a Python program that implements a class for calculating the area of a circle. Not applicable","completion":"class Circle: def __init__(self, radius): self.radius = radius def area(self): \\"\\"\\"Returns the area of a circle given the radius\\"\\"\\" return (self.radius**2) * 3.14159 # Usage example: my_circle = Circle(2) print(my_circle.area()) # 12.56636"},{"prompt":"Design a class in Python to store and manage employee records.","completion":"class Employee: def __init__(self, name, age, salary, designation): self.name = name self.age = age self.salary = salary self.designation = designation # other methods def update_salary(self, salary): self.salary = salary"},{"prompt":"Generate a Python function for calculating the information gain of a given feature in a dataset.","completion":"def information_gain(data, feature): \\"\\"\\" Calculates the information gain of the given feature in a dataset. Args: data (list of dicts): The dataset. feature (str): The feature for which to calculate the information gain. Returns: float: The information gain of the given feature. \\"\\"\\" # Calculate the entropy of the dataset data_entropy = __calc_entropy(data) # Calculate the weighted average of the entropy of each bin weighted_avg_entropy = __calc_weighted_avg_entropy(data, feature) # Calculate the information gain info_gain = data_entropy - weighted_avg_entropy return info_gain"},{"prompt":"Write a python code to complete the following. Sequentially fill a numpy array of size 4 with numbers from 0 to 3","completion":"import numpy as np arr = np.zeros(4, dtype=int) for i in range(len(arr)): arr[i] = i"},{"prompt":"Generate a Random Forest algorithm in Python to predict the class of a given data set. Not applicable","completion":"from sklearn.ensemble import RandomForestClassifier # Initialize the Random Forest model model = RandomForestClassifier(n_estimators=100) # Train the model using the training data model.fit(train_x, train_y) # Use the model to predict the class predictions = model.predict(test_x)"},{"prompt":"Write a Python script that will take in a user's input in a textbox and return the most frequent words, in descending order. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.","completion":"import re import operator user_input = input(\\"Please enter a sentence: n\\") words = re.findall(r'w+', user_input) word_frequency = {} for word in words: if word in word_frequency: word_frequency[word] += 1 else: word_frequency[word] = 1 # Sort words by frequency in descending order sorted_words = sorted(word_frequency.items(), key=operator.itemgetter(1), reverse=True) print(\\"Most Frequent Words: n\\") for k,v in sorted_words: print(k + \\": \\" + str(v))"},{"prompt":"Create a class in Python to calculate the area and perimeter of a rectangle.","completion":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def area(self): return self.length * self.width def perimeter(self): return 2 * (self.length + self.width)"},{"prompt":"Generate a REST API using Python, Flask, and Marshmallow. Not applicable","completion":"from flask import Flask, request from flask_sqlalchemy import SQLAlchemy from flask_marshmallow import Marshmallow app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) ma = Marshmallow(app) class Books(db.Model): id = db.Column(db.Integer, primary_key=True) title = db.Column(db.String(50)) author = db.Column(db.String(50)) db.create_all() class BookSchema(ma.Schema): class Meta: model = Books fields = ('title', 'author') book_schema = BookSchema(strict=True) books_schema = BookSchema(many=True, strict=True) @app.route('/books', methods=['POST']) def add_book(): title = request.json['title'] author = request.json['author'] new_book = Books(title=title, author=author) db.session.add(new_book) db.session.commit() return book_schema.jsonify(new_book) @app.route('/books', methods=['GET']) def get_books(): all_books = Books.query.all() result = books_schema.dump(all_books) return jsonify(result.data) if name == 'main': app.run(debug=True)"},{"prompt":"Write a Python program to generate a random matrix of size mXn where all numbers are greater than k.","completion":"import numpy as np def generate_matrix(m, n, k): matrix = np.random.randint(k + 1, high=9, size=(m, n)) return matrix m = 5 n = 5 k = 6 matrix = generate_matrix(m, n, k) print(matrix)"},{"prompt":"Write a Python script that prints out a multiplication table from 1 to 10.","completion":"for i in range(1, 11): for j in range(1, 11): print(i*j, end='t') print()"},{"prompt":"Create a Python script that optimizes a 2D matrix for maximal sum. [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]","completion":"def find_max_sum(matrix): row = len(matrix) col = len(matrix[0]) max_sum = 0 max_row = 0 max_col = 0 for i in range(row): for j in range(col): # Iterating over top, bottom, left, right columns top_val = 0 left_val = 0 if i > 0: top_val = matrix[i - 1][j] if j > 0: left_val = matrix[i][j - 1] cur_sum = matrix[i][j] + top_val + left_val if cur_sum > max_sum: max_sum = cur_sum max_row = i max_col = j return max_sum result = find_max_sum( [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ) print(result)"},{"prompt":"Generate a neural network model which uses the Keras API in Python to predict whether an email is spam or not. Not applicable","completion":"from tensorflow.keras.layers import Dense, Input from tensorflow.keras.models import Sequential model = Sequential() input = Input(shape=(1,)) x = Dense(32, activation='relu')(input) x = Dense(32, activation='relu')(x) x = Dense(1, activation='sigmoid')(x) model = Model(inputs=input, outputs=x) model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])"},{"prompt":"Create a web scraper in Python that extracts reviews data from a major ecommerce website. The output should include a rating, date, and review comment. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/product' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') reviews = [] for review in soup.findAll('div', {'data-hook': 'review'}): rating = review.find('span', {'class': 'a-icon-alt'}).text date = review.find('span', {'data-hook': 'review-date'}).text review_comment = review.find('span', {'data-hook': 'review-body'}).text reviews.append([rating, date, review_comment]) print(reviews)"},{"prompt":"Create a web crawler in Python to extract text from web pages.","completion":"import requests from bs4 import BeautifulSoup def web_crawler(url): response = requests.get(url) if response.status_code == 200: html = response.text soup = BeautifulSoup(html, \\"lxml\\") text = soup.findAll(text=True) return text"},{"prompt":"Create a Python function that takes a string and a number as arguments. The function replaces all digits in the string with the supplied number. str = I am 8 years old. num = 3","completion":"def replace_digit(str, num): new_str = \\"\\" for char in str: if char.isnumeric(): new_str += str(num) else: new_str += char return new_str new_str = replace_digit(str, num) print(new_str)"},{"prompt":"Write a Python script that creates a class Student that has two attributes name and age.","completion":"class Student: def __init__(self, name, age): self.name = name self.age = age"},{"prompt":"Create a Python script that finds the median value in an unsorted list of numbers. [3, 4, 1, 2, 5]","completion":"def median(nums): sorted_list = sorted(nums) if len(sorted_list) % 2 == 0: mid = int(len(sorted_list) / 2) return (sorted_list[mid] + sorted_list[mid-1]) / 2 else: return sorted_list[int(len(sorted_list)/2)] median([3, 4, 1, 2, 5]) # Output: 3.0"},{"prompt":"Write a function in Python that takes two lists as arguments and return all their common elements. [1, 3, 5, 7], [3, 4, 5, 8]","completion":"def common_elements(list1, list2): common = [] for num in list1: if num in list2: common.append(num) return common print(common_elements([1, 3, 5, 7], [3, 4, 5, 8]))"},{"prompt":"Optimize this Python code to achieve better performance. def functionA(x): answer = 0 for i in range(x): for j in range(i+1): answer += 1 return answer","completion":"def functionA(x): answer = 0 for i in range(x): answer += x-i return answer"},{"prompt":"Create a Python program to take a list of numbers and set any negative numbers to 0. [2, 5, 8, 0, 1, 6]","completion":"def set_negative_to_zero(arr): new_arr = [] for num in arr: if num < 0: new_arr.append(0) else: new_arr.append(num) return new_arr result = set_negative_to_zero([2, 5, -8, 0, 1, -6]) print(result)"},{"prompt":"Generate a Python program that prompts the user to enter a threedigit integer.","completion":"number = int(input(\\"Please enter a 3-digit integer: \\"))"},{"prompt":"Generate a python script that plans a route from point A to point B. Point A = (1.2, 2.6) Point B = (7.9, 5.3)","completion":"# import modules import math # function to calculate the distance def route_distance(A, B): dX = B[0] - A[0] dY = B[1] - A[1] return math.sqrt(dX * dX + dY * dY) # Driver code A = (1.2, -2.6) B = (7.9, 5.3) dist = route_distance(A, B) print(\\"Distance from A to B is:\\", dist)"},{"prompt":"Design a program to find the nth term of the Fibonacci sequence for a given number n. n = 10","completion":"# Python 3 program to find the nth # Fibonacci number def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(10)) # Output 34"},{"prompt":"Create a Python function that takes a list of strings as input and returns the longest string in the list. ['Data', 'Science', 'Machine', 'Learning']","completion":"def find_longest_string(string_list): longest_string = '' for string in string_list: if len(string) > len(longest_string): longest_string = string return longest_string"},{"prompt":"Design a program using Python that capitalizes the first letter of every word in a given string. string = this is a sentence","completion":"def capitalize(string): words = string.split() capitalized_words = [word[0].upper() + word[1:] for word in words] return \\" \\".join(capitalized_words) print(capitalize(\\"this is a sentence\\"))"},{"prompt":"Write a python code to calculate the sum of numbers in a list except for the last element. [1,2,3,4,5]","completion":"def sum_except_last(arr): total = 0 for i in range(len(arr) - 1): total += arr[i] return total if __name__ == '__main__': output = sum_except_last([1,2,3,4,5]) print(output)"},{"prompt":"Python, create a method that can take two integers and return their sum. 3, 8","completion":"def sum_ints(int1, int2): return int1 + int2"},{"prompt":"Using the data structure provided below, create a Python program to sort a list of numbers in descending order. numbers = [23, 45, 56, 78, 33, 19, 20]","completion":"def sort_descending(numbers): numbers.sort(reverse=True) return numbers print(sort_descending(numbers))"},{"prompt":"Use a whileloop in Python to print the sum of the first 10 natural numbers.","completion":"num = 1 sum = 0 while num <= 10: sum = sum + num num = num + 1 print(sum) # Output: 55"},{"prompt":"Can you write code to calculate the Fibonacci sequence in Python up to the 10th number?","completion":"a, b = 0, 1 fibonacci = [a] while b < 10: fibonacci.append(b) a, b = b, a + b print(fibonacci)"},{"prompt":"Create a Python program to print out an HTML page that displays all prime numbers between 1 and an upper limit. Upper limit = 10","completion":"def prime_numbers(upper_limit): prime_nums = [] for i in range(2, upper_limit + 1): for j in range(2, i): if i % j == 0: break else: prime_nums.append(i) return prime_nums # Create Template output_html = \\"\\"\\" <!DOCTYPE html> <html> <head> <title>Prime Numbers</title> </head> <body> <h1>Prime Numbers between 1 and {}</h1> <p> \\"\\"\\" upper_limit = 10 # Calculate prime numbers prime_nums = prime_numbers(upper_limit) # Construct HTML output_html += \\" <br>\\".join(str(x) for x in prime_nums) # Finalize HTML output_html += \\"\\"\\" </p> </body> </html>\\"\\"\\" # Print HTML to screen print(output_html)"},{"prompt":"Generate a function in Python that takes a list and returns an ordered list mylist = [5, 9, 1, 4]","completion":"def order_list(mylist): mylist.sort() return mylist print(\\"Ordered list: \\", order_list(mylist))"},{"prompt":"Generate a program in Python to evaluate the following expression: (x*x) − (𝑦*𝑦) x=10 y=5","completion":"x = 10 y = 5 result = (x*x) - (y*y) print(result)"},{"prompt":"Write a python program that prints out the number of times each letter appears in a given string. string = Hello, World!","completion":"string = \\"Hello, World!\\" for char in string: count = string.count(char) print(char + \\" appears \\" + str(count) + \\" times\\") # Output H appears 1 times e appears 1 times l appears 3 times o appears 2 times , appears 1 times appears 1 times W appears 1 times r appears 1 times d appears 1 times ! appears 1 times"},{"prompt":"Please produce a python program that can shuffle the elements of a given array.","completion":"import random def shuffle_array(array): for i in range(len(array)): random_idx = random.randint(i, len(array) - 1) array[i], array[random_idx] = array[random_idx], array[i] return array print(shuffle_array([1,2,3,4,5]))"},{"prompt":"Create a code to classify 10 different types of fruits in Python. fruits = [ apple, orange, mango, banana, pineapple, pear, strawberry, blueberry, plum, peach ]","completion":"fruits_dict = { 'apple':'fruit', 'orange':'fruit', 'mango':'fruit', 'banana':'fruit', 'pineapple':'fruit', 'pear':'fruit', 'strawberry':'fruit', 'blueberry':'fruit', 'plum':'fruit', 'peach':'fruit' }"},{"prompt":"Write a Python program to insert a given string at the beginning of all items in a list. _list = ['digger', 'dog', 'deer'] string = 'The'","completion":"_list = ['digger', 'dog', 'deer'] string = 'The' # Create an empty list to store the modified elements new_list = [] # Iterate through the old list and create the modified list for item in _list: new_list.append(string + ' ' + item) # Print the modified list print(new_list) # Output: ['The digger', 'The dog', 'The deer']"},{"prompt":"Write a Python program to find the most common element in given an array. Array: [1, 2, 2, 5, 2, 3, 0, 1]","completion":"def find_common_element(arr): count_dict = {} for i in arr: if i in count_dict: count_dict[i] += 1 else: count_dict[i] = 1 max_key = None max_value = 0 for key, value in count_dict.items(): if value > max_value: max_key = key max_value = value return max_key array = [-1, -2, 2, 5, 2, -3, 0, 1] result = find_common_element(array) print (result) // 2"},{"prompt":"Write a Python program to create a string from the last 3 characters of a given string.","completion":"def last_characters(string): return string[-3:]"},{"prompt":"Create a program in Python to optimize a function f(x) with x = 0, 1, 2, ..., n. f(x) = x^2 3x + 5","completion":"def f(x): return x**2 - 3 * x + 5 def optimize(f, n): best_x = 0 best_y = f(0) for x in range(n+1): y = f(x) if y > best_y: best_x = x best_y = y return best_x print(optimize(f, 5))"},{"prompt":"Design a python program that prints out alternating strings from two lists words1 = [Hello,World,My,Name,Is] words2 = [John, Smith, Where, Are, You]","completion":"words1 = [\\"Hello\\",\\"World\\",\\"My\\",\\"Name\\",\\"Is\\"] words2 = [\\"John\\", \\"Smith\\", \\"Where\\", \\"Are\\", \\"You\\"] for i in range(len(words1)): print(words1[i], words2[i])"},{"prompt":"Generate a program in Python for merging two sorted lists into one.","completion":"def merge_sorted_lists(list1, list2): merged_list = [] i = 0 j = 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 merged_list += list1[i:] merged_list += list2[j:] return merged_list"},{"prompt":"Design an algorithm in Python that takes an array of integers and returns an array with no repeating integers. Not applicable","completion":"def removeDuplicates(arr): result = [] for num in arr: if num not in result: result.append(num) return result arr = [1, 2, 3, 2, 5, 4, 3, 1] print(removeDuplicates(arr)) # should print [1, 2, 3, 5, 4]"},{"prompt":"Write a Python program that takes a string and prints the frequency of each character in the string. Code Generation Task","completion":"# Frequency of each character in the string string = \\"Code Generation Task\\" for i in string: print(\\"Number of Occurrence of\\", i, \\"is\\", string.count(i))"},{"prompt":"Create a web scraper in Python to extract the number of views, likes, and dislikes from YouTube videos. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.youtube.com/watch?v=YAOm5YBT-Tk' r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') likes = int(soup.find(\\"button\\", attrs={\\"title\\":\\"I like this\\"}).span.text) dislikes = int(soup.find(\\"button\\", attrs={\\"title\\":\\"I dislike this\\"}).span.text) views = int(soup.find(\\"span\\", attrs={\\"class\\":\\"view-count\\"}).text.strip()) print('Likes: {}, Dislikes: {}, Views: {}'.format(likes, dislikes, views))"},{"prompt":"Write an algorithm in Python to convert a given binary string to decimal number. 11010","completion":"def bin2dec(binary): decimal, i = 0, 0 while binary != 0: dec = binary % 10 decimal = decimal + dec * pow(2, i) binary = binary//10 i += 1 return decimal binary = 11010 print(bin2dec(binary))"},{"prompt":"Write a Python program to automatically generate English sentences.","completion":"\\"\\"\\" Generate English sentences \\"\\"\\" import random article_list = [\\"the\\", \\"a\\", \\"an\\"] subject_list = [\\"boy\\", \\"girl\\"] verb_list = [\\"ate\\", \\"ran\\", \\"jumped\\"] noun_list = [\\"fish\\", \\"ice cream\\", \\"cat\\"] def generate_sentence(): article = random.choice(article_list) subject = random.choice(subject_list) verb = random.choice(verb_list) noun = random.choice(noun_list) sentence = article + \\" \\" + subject + \\" \\" + verb + \\" \\" + noun return sentence if __name__ == '__main__': print(generate_sentence())"},{"prompt":"Can you write a function that takes a set of keywords and returns the top 10 web pages with highest keyword search rate? [python, programming, language]","completion":"import requests import json def top_webpages_with_keywords(keywords): url = 'http://example.com/search-engine-api' params = { 'keywords': keywords } response = requests.get(url, params=params) data = json.loads(response.text) pages_with_keywords = [page['url'] for page in data if page['score'] > 0.5] top_pages = pages_with_keywords[:10] return top_pages print(top_webpages_with_keywords([\\"python\\", \\"programming\\", \\"language\\"]))"},{"prompt":"Generate a web scraper in Python that can read the contents of a specific webpage and extract a desired type of content from it. URL: https://en.wikipedia.org/wiki/Python_(programming_language) Desired Content: list of Python book","completion":"import requests from bs4 import BeautifulSoup url = 'https://en.wikipedia.org/wiki/Python_(programming_language)' page = requests.get(url); soup = BeautifulSoup(page.content, 'html.parser') # find the related books sections books_sections = soup.find_all('h2', attrs={'class': 'mw-headline'}) books_section = books_section[3] # get the info about books books_table = books_section.find_next_sibling('div') books = books_table.find_all('li') # get books list books_list = [] for book in books: book_name = book.text if book_name not in books_list: books_list.append(book_name) print('List of Python books : ', books_list)"},{"prompt":"Create a Python function that takes two lists as parameters, and returns the first list with each element doubled. list1: [1, 2, 3] list2: [4, 5, 6]","completion":"def double_list(list1,list2): for i in range(len(list1)): list1[i] *= 2 return list1 list1 = [1, 2, 3] list2 = [4, 5, 6] print(double_list(list1,list2))"},{"prompt":"Design an algorithm in Python that prints out the squares of each number between 1 and n. n = 8","completion":"def printSquares(n): for num in range(1,n+1): sqr = num * num print(sqr) n = 8 printSquares(n)"},{"prompt":"Create a Python data structure to store customer details in a dictionary { id: 1, name: John, email: john@example.com }","completion":"customers = { 1: { \\"name\\": \\"John\\", \\"email\\": \\"john@example.com\\" } }"},{"prompt":"Write a Python program to perform linear regression with gradient descent. The program should output the regression line equation. x_data = [1,2,3,4,5] y_data = [5,7,9,11,13]","completion":"import numpy as np def compute_cost(x, y, parameters): m = len(y) h = x @ parameters return (1/(2*m)) * np.sum(np.square(h - y)) def gradient_descent(x, y, parameters, alpha, num_iter): m = len(y) cost_graph = np.zeros(num_iter) parameters_history = np.zeros((num_iter, parameters.shape[0])) for iteration in range(num_iter): h = x @ parameters error = h - y gradient = (1/m) * x.T @ error parameters = parameters - alpha * gradient cost = compute_cost(x, y, parameters) cost_graph[iteration] = cost parameters_history[iteration] = parameters.flatten() return parameters, parameters_history, cost_graph # Data x_data = np.array([1,2,3,4,5]) y_data = np.array([5,7,9,11,13]) # Parameters parameters = np.array([1.0, 1.0]) # Hyperparameters alpha = 0.01 #Learning rate num_iter = 1000 # Number of iterations # Regression with Gradient Descent parameters, parameters_history, cost_graph = gradient_descent(x_data, y_data, parameters, alpha, num_iter) # Print the results print(\\"Equation of the regression line = y = {:.2f} + {:.2f}x\\".format(parameters[0], parameters[1]))"},{"prompt":"Write a Python program to create a function to sort an array of objects by a specified key. The function should accept the array and sort it based on the key given, and return a new array with the objects sorted in ascending order. array = [ { name: Bob, age: 18 }, { name: Alice, age: 16 }, { name: John, age: 19 } ] key = age","completion":"def sortArrayByKey(array, key): sortedArray = array[:] sortedArray.sort(key=lambda x: x[key]) return sortedArray sortedArray = sortArrayByKey(array, key)"},{"prompt":"Create a code to extract articles from all Wikipedia pages.","completion":"\\"\\"\\" Extract articles from all Wikipedia pages. \\"\\"\\" import wikipedia wiki_pages = wikipedia.search('Python') # Fetch content of all the pages for page in wiki_pages: content = wikipedia.page(page).content # Parse the content and extract articles extract_articles(content)"},{"prompt":"Design a function in a Python program to calculate the area of a circle with a given radius.","completion":"def get_circle_area(radius): \\"\\"\\"Calculate and return the area of a circle with a given radius. Args: radius (float): The radius of the circle Returns: float: The area of the circle \\"\\"\\" return 3.14 * (radius * radius)"},{"prompt":"Create a function to sort a list of strings alphabetically in Python. [zzz,ccc,aaa,rrr,bbb]","completion":"def sort_strings(string_list): return sorted(string_list)"},{"prompt":"Create a python function add_numbers that takes two ints and returns their sum Not applicable","completion":"def add_numbers(a, b): return a + b"},{"prompt":"Create a GUIbased program in Python that allows a user to input the radius of a circle, and display its area.","completion":"import tkinter # Create the window window = tkinter.Tk() #Set up interface elements window.title(\\"Radius Calculator\\") text_label = tkinter.Label(window, text=\\"Input Radius: \\") text_label.grid(row=0) area_label = tkinter.Label(window, text=\\"Output Area: \\") area_label.grid(row=1) radius_entry = tkinter.Entry(window, width=20) radius_entry.grid(row=0, column=1, padx=20, pady=20) area_output = tkinter.Text(window, width=20, height=1, borderwidth=3, relief=tkinter.GROOVE) area_output.grid(row=1, column=1, padx=20, pady=20) def calculate_area(): r = float(radius_entry.get()) area = 3.14 * (r ** 2) area_output.delete(1.0, tkinter.END) area_output.insert(tkinter.END, str(area)) # Add the \\"Calculate Area\\" button calc_btn = tkinter.Button(window, text=\\"Calculate Area\\", command=calculate_area) calc_btn.grid(row=2, columnspan=2, padx=10, pady=10) # Run the program window.mainloop()"},{"prompt":"Generate a TicTacToe game in Python.","completion":"import random # The board is represented by a list of strings. # X is player 1 # O is the computer # _ is a blank spot board = [\\"_\\",\\"_\\",\\"_\\", \\"_\\",\\"_\\",\\"_\\", \\"_\\",\\"_\\",\\"_\\"] # A function to print out the board in its current state def print_board(): print(board[0] + \\"|\\" + board[1] + \\"|\\" + board[2]) print(board[3] + \\"|\\" + board[4] + \\"|\\" + board[5]) print(board[6] + \\"|\\" + board[7] + \\"|\\" + board[8]) # A function to check if X or O has won # Only if a row, column or diagonal is filled with the same player def check_win(): # Check rows if board[0] == board[1] == board[2] != \\"_\\" or board[3] == board[4] == board[5] != \\"_\\" or board[6] == board[7] == board[8] != \\"_\\": return board[0] # Check columns elif board[0] == board[3] == board[6] != \\"_\\" or board[1] == board[4] == board[7] != \\"_\\" or board[2] == board[5] == board[8] != \\"_\\": return board[0] # Check diagonals elif board[0] == board[4] == board[8] != \\"_\\" or board[2] == board[4] == board[6] != \\"_\\": return board[0] # No one has won else: return None # An AI to choose the best move for the computer def computer_move(): # Check the board to see if the computer can win for i in range(9): board_copy = board[:] if board_copy[i] == \\"_\\": board_copy[i] = \\"O\\" if check_win() == \\"O\\": return i # Check the board to see if the player can win for i in range(9): board_copy = board[:] if board_copy[i] == \\"_\\": board_copy[i] = \\"X\\" if check_win() == \\"X\\": return i # Try to take one of the corners corners = [0, 2, 6, 8] open_corners = [] for i in corners: if board[i] == \\"_\\": open_corners.append(i) if len(open_corners) > 0: return random.choice(open_corners) # Try to take the center if board[4] == \\"_\\": return 4 # Take any open space for i in range(9): if board[i] == \\"_\\": return i # Yhe game loop player_turn = True while True: print_board() if check_win() == \\"X\\": print(\\"You win! Congratulations!\\") break elif check_win() == \\"O\\": print(\\"The computer wins!\\") break if player_turn: # Player turn index = int(input(\\"Enter index (0-8):\\")) while board[index] != \\"_\\": index = int(input(\\"Invalid choice. Enter index (0-8):\\")) board[index] = \\"X\\" else: # Computer turn index = computer_move() board[index] = \\"O\\" player_turn = not player_turn"},{"prompt":"Write a Python program to compare two lists and print out the one that is greater in length. list1 = [1, 2, 3, 4] list2 = [3, 4]","completion":"def compare_list_length(list1, list2): if len(list1) > len(list2): return list1 else: return list2 list1 = [1, 2, 3, 4] list2 = [3, 4] longer_list = compare_list_length(list1, list2) print(longer_list) # Output: [1, 2, 3, 4]"},{"prompt":"Write a Python program to edit a given string to replace each vowel with its following character as defined below. Vowel> next character a>e e>i i>o o>u u>a string=geeks","completion":"def edit_vowels(string): vowels = 'aeiou' next_chars = 'eioua' result_string = '' for char in string: if char in vowels: result_string += next_chars[vowels.index(char)] else: result_string += char return result_string"},{"prompt":"Write an algorithm in Python to calendarify the dates in the following array dates = [423, 198, 720, 930, 505]","completion":"def calendarify(dates): calendar = [] for date in dates: day = date % 100 month = date // 100 calendar.append((day, month)) return calendar calendarify(dates)"},{"prompt":"Write a quicksort algorithm in Python. [3, 6, 8, 10, 1, 2, 1]","completion":"def quick_sort(arr): if len(arr) < 2: return arr else: pivot = arr[0] less = [i for i in arr[1:] if i <= pivot] greater = [i for i in arr[1:] if i > pivot] return quick_sort(less) + [pivot] + quick_sort(greater)"},{"prompt":"Create a data structure in Python to store the following data: Student Name, Score in Mathematics, Score in English. Student1: John, 91, 83 Student2: Mary, 94, 93","completion":"students = { 'John': {'Math': 91, 'English': 83}, 'Mary': {'Math': 94, 'English': 93}, }"},{"prompt":"Make a prediction model in Python and classify a given set of data into two different categories Data: [1, 2, 3, 4, 5] Category 1: Even Category 2: Odd","completion":"def predict_model(arr): labels = [] for num in arr: if num % 2 == 0: labels.append('Even') else: labels.append('Odd') return labels result = predict_model([1, 2, 3, 4, 5]) print(result)"},{"prompt":"Create a Python program to identify the type of triangles given three sides.","completion":"def triangle_type(a, b, c): if a > 0 and b > 0 and c > 0: if a == b == c and a != 0: return 'Equilateral' if a == b or b == c or a == c and a != 0: return 'Isosceles' if a != b and b != c and a != c and a + b > c and b + c > a and a + c > b: return 'Scalene' else: return 'Invalid'"},{"prompt":"Write a code to remove a specific value from a list in Python. mylist = [10, 20, 30, 40, 10] value = 10","completion":"mylist = [10, 20, 30, 40, 10] value_to_remove = 10 # new list after value is removed new_list = [item for item in mylist if item != value_to_remove] print(new_list)"},{"prompt":"Generate a class in Python for a selfbalancing binary search tree. No Inpu","completion":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None self.height = 1 class AVL_Tree: def insert(self, root, key): # Step 1 - Perform normal BST if not root: return Node(key) elif key < root.data: root.left = self.insert(root.left, key) else: root.right = self.insert(root.right, key) # Step 2 - Update the height of the # ancestor node root.height = 1 + max(self.getHeight(root.left), self.getHeight(root.right)) # Step 3 - Get the balance factor balance = self.getBalance(root) # Step 4 - If the node is unbalanced, # then try out the 4 cases # Case 1 - Left Left if balance > 1 and key < root.left.data: return self.rightRotate(root) # Case 2 - Right Right if balance < -1 and key > root.right.data: return self.leftRotate(root) # Case 3 - Left Right if balance > 1 and key > root.left.data: root.left = self.leftRotate(root.left) return self.rightRotate(root) # Case 4 - Right Left if balance < -1 and key < root.right.data: root.right = self.rightRotate(root.right) return self.leftRotate(root) return root def leftRotate(self, z): y = z.right T2 = y.left # Perform rotation y.left = z z.right = T2 # Update heights z.height = 1 + max(self.getHeight(z.left), self.getHeight(z.right)) y.height = 1 + max(self.getHeight(y.left), self.getHeight(y.right)) # Return the new root return y def rightRotate(self, z): y = z.left T3 = y.right # Perform rotation y.right = z z.left = T3 # Update heights z.height = 1 + max(self.getHeight(z.left), self.getHeight(z.right)) y.height = 1 + max(self.getHeight(y.left), self.getHeight(y.right)) # Return the new root return y def getHeight(self, root): if not root: return 0 return root.height def getBalance(self, root): if not root: return 0 return self.getHeight(root.left) - self.getHeight(root.right) def preOrder(self, root): if not root: return # First print the data of node print(\\"{0} \\".format(root.data), end=\\"\\") # Then recur on left child self.preOrder(root.left) # Finally recur on right child self.preOrder(root.right)"},{"prompt":"Write a machine learning algorithm in Python to classify books into one of 4 categories: fiction, nonfiction, poetry, textbooks. An example book title: Pride and Prejudice","completion":"# Import necessary libraries import pandas as pd import numpy as np import matplotlib.pyplot as plt # Load the data data = pd.read_csv(\\"books_data.csv\\") # Define feature and target variables X = data['title'] y = data['category'] # Transform words into numerical features # Vectorize feature and target data from sklearn.feature_extraction.text import CountVectorizer vectorizer = CountVectorizer() X = vectorizer.fit_transform(X).toarray() # Build the ML model from sklearn.naive_bayes import MultinomialNB clf = MultinomialNB() # Fit the data on the classifier clf.fit(X, y) # Make a prediction pride_and_prejudice = vectorizer.transform([\\"Pride and Prejudice\\"]).toarray() category = clf.predict(pride_and_prejudice)[0] print(\\"The book 'Pride and Prejudice' is classified as: \\", category)"},{"prompt":"Create a Python script to run the Knapsack Problem using brute force approach. capacity = 6 items = [ { 'name': 'item 1', 'weight': 2, 'value': 40 }, { 'name': 'item 2', 'weight': 3, 'value': 50 }, { 'name': 'item 3', 'weight': 4, 'value': 60 }, { 'name': 'item 4', 'weight': 5, 'value': 70 } ]","completion":"def knapsack_brute_force(capacity, items): max_value = 0 # the number of items num_items = len(items) # Iterate through the items. for i in range(2**num_items): # Create a subset. subset = [items[item] for item in range(num_items) if i & (1 << item)] # Calculate the total weight of the subset. subset_weight = sum([item['weight'] for item in subset]) # Skip the subset if it exceeds the capacity. if subset_weight > capacity: continue # Otherwise, add the subset's total value to the max value. subset_value = sum([item['value'] for item in subset]) max_value = max(subset_value, max_value) return max_value # Execute the function. max_value = knapsack_brute_force(capacity, items) print(max_value) # 120"},{"prompt":"Create a Django app that displays statistical data from a database. Not applicable","completion":"# Install Django pip install django # Create a new Django project django-admin startproject Statistics # Create a new with Django cd Statistics python manage.py startapp stats # Define the models for the application vim stats/models.py from django.db import models class Statistic(models.Model): title = models.CharField(max_length=50) data = models.IntegerField() # Register the models with Django vim Statistics/settings.py INSTALLED_APPS = [ . . . 'stats', ] # Create the database tables python manage.py makemigrations python manage.py migrate # Create a view to show the data vim stats/views.py from .models import Statistic from django.shortcuts import render def stats_view(request): stats = Statistic.objects.all() return render(request, 'stats.html', {'stats': stats}) # Create a URL pattern for the view vim Statistics/urls.py from stats.views import stats_view urlpatterns = [ . . . path('stats/', stats_view, name='stats') ] # Create a template to render the data vim stats/templates/stats.html <html> <head> <title>Statistics data</title> </head> <body> <h1>Statistics data</h1> {% for statistic in stats %} <p>{{ statistic.title }}: {{ statistic.data }}</p> {% endfor %} </body> </html>"},{"prompt":"Write a Python code snippet to print the current date and time.","completion":"import datetime now = datetime.datetime.now() print(now)"},{"prompt":"Create a function in Python to tokenize an English sentence.","completion":"\\"\\"\\" Tokenize an English sentence \\"\\"\\" import nltk def tokenize(sentence): tokens = nltk.word_tokenize(sentence) return tokens if __name__ == '__main__': sentence = \\"This is a sentence.\\" print(tokenize(sentence))"},{"prompt":"mplement a depth first search algorithm in Python to find a given node in a tree. <Example tree structure>","completion":"def depth_first_search(tree, node): if tree == None: return False elif tree.data == node: return True else: left_search = depth_first_search(tree.left, node) if left_search == True: return True right_search = depth_first_search(tree.right, node) return right_search"},{"prompt":"Produce a Python script that counts the number of words in a sentence Sentence: The quick brown fox jumps over the lazy dog","completion":"sentence = \\"The quick brown fox jumps over the lazy dog\\" words = sentence.split() print(\\"The sentence has\\", len(words), \\"words.\\")"},{"prompt":"Generate a Python program to compute the sum of values of a given dictionary. data = {'a':1, 'b':2, 'c':3}","completion":"def sum_values(data): return sum(data.values())"},{"prompt":"Write a class in Python that represents a chess piece. Not applicable","completion":"class Piece: def __init__(self, color: str) -> None: self.color = color self.has_moved = False def move(self, row: int, column: int) -> str: if self.has_moved: return f\\"{self.color.capitalize()} piece already moved!\\" self.has_moved = True return f\\"{self.color.capitalize()} piece moved to {chr(column + 97)}{row + 1}.\\" piece = Piece('white') print(piece.move(7, 4))"},{"prompt":"Write a function to remove a given item from a python list. [1, 4, 8, 2], 8","completion":"def remove_item(lst, item): while item in lst: lst.remove(item) return lst print(remove_item([1, 4, 8, 2], 8)) # prints [1, 4, 2]"},{"prompt":"Calculate the square root of a given number using recursion in Python. Number: 64","completion":"def recursive_sqrt(number, current_value = 1): \\"\\"\\"Return the square root of a given number using recursion Arguments: number -- The number whose square root is to be calculated. value -- The current approximation of the square root of the number. \\"\\"\\" new_value = (current_value + number/current_value)/2 if abs (new_value - current_value) <= 0.0000009 : return new_value else : return recursive_sqrt(number, new_value) print(recursive_sqrt(64)) # output 8.0"},{"prompt":"Create a Python program to calculate the cost of an order given the items ordered, the tax rate and the shipping cost. items = [('apple', 0.5, 2), ('pear', 0.75, 5), ('orange', 1.2, 3)] tax rate = 0.2 shipping cost = 5","completion":"def calculate_cost(items, tax_rate, shipping_cost): total_cost = 0 for item in items: total_cost += item[1] * item[2] total_cost *= (1 + tax_rate) total_cost += shipping_cost return total_cost"},{"prompt":"Develop code for a multidimensional array using Python","completion":"def get_array(n): a = [[0 for i in range(n)] for i in range(n)] return a"},{"prompt":"Develop a Python code to find the longest palindromic substring BANANAB","completion":"def find_longest_palindrome(word): max_length = 0 max_start = 0 for i in range(len(word)): for j in range(0, i): sub = word[j:i+1] if sub == sub[::-1] and len(sub) > max_length: max_start = j max_length = len(sub) print(word[max_start:max_start + max_length])"},{"prompt":"Edit the following Python code to include a while loop: a = 0 b = 0","completion":"a = 0 b = 0 while a < 10: a += 1 b = b + a print(b)"},{"prompt":"Create a Python program to determine the optimal solution to a knapsack problem with given weights, values and a capacity. Weights: [1, 2, 2, 3, 4] Values: [5, 6, 8, 10, 11] Capacity: 5","completion":"def knapsack(weights, values, capacity): # Create a matrix to store the maximum values at each nth item matrix = [[0 for x in range(capacity+1)] for x in range(len(weights)+1)] # Fill in the matrix for i in range(len(weights)+1): for j in range(capacity+1): # If the capacity is 0 or there are no items to choose, the value is 0 if i == 0 or j == 0: matrix[i][j] = 0 # If the current item is less than or equal to total capacity elif weights[i-1] <= j: # Choose between the maximum of not including the item versus including it matrix[i][j] = max(values[i-1] + matrix[i-1][j-weights[i-1]], matrix[i-1][j]) # If it is larger, the maximal value is without the item else: matrix[i][j] = matrix[i-1][j] # Return the top right corner of the matrix return matrix[len(weights)][capacity] weights = [1,2,2,3,4] values = [5,6,8,10,11] capacity = 5 print(knapsack(weights, values, capacity)) # Expected output: 18"},{"prompt":"Write a Python program that sorts a given array of numbers in ascending order. [1, 3, 5, 2, 6]","completion":"def sort_ascending(arr): for x in range(len(arr)-1): for y in range(x+1, len(arr)): if arr[x] > arr[y]: arr[x], arr[y] = arr[y], arr[x] return arr arr = [1, 3, 5, 2, 6] print(sort_ascending(arr)) # Output: [1, 2, 3, 5, 6]"},{"prompt":"Write a Python program to generate an encrypted version of the given string using Caesar’s Cipher. string='Hello World'","completion":"def encrypt(string, key): # Create an empty output string output = \\"\\" # For each character in the given string for char in string: # Convert to ASCII value char_ascii = ord(char) # Add the key (shift) shifted = char_ascii + key # Convert to character output += chr(shifted) # Return the output string return output"},{"prompt":"Create a class in Python that can calculate the total price of items.","completion":"class TotalPriceCalculator(): def __init__(self): self.total_price = 0 def add_item(self,price): self.total_price+=price def get_total_price(self): return self.total_price"},{"prompt":"Given an array of strings, you need to write a Python program to move the elements that contain a certain letter to the end of the array. strings = [abcd, efgh, ijkl, mnop, qrst] letter = m","completion":"def move_letter(strings, letter): new_list = [] for s in strings: if letter not in s: new_list.append(s) else: new_list.append(s) return new_list"},{"prompt":"Generate a python code to rotate an array by k steps. [1,2,3,4,5]","completion":"def leftRotate(arr, k): new_arr = arr[k:] + arr[:k] return new_arr"},{"prompt":"Optimize a Python program to print the sum of the 10 smallest even numbers larger than a userdefined number. num = 20","completion":"num = int(input(\\"Enter a number: \\")) # Find the 10 smallest even numbers larger than the user-defined number numbers = [] total = 0 for i in range(num+1, num+21): if i%2 == 0: numbers.append(i) total += i print('The sum is', total)"},{"prompt":"Write a Python program to generate random passwords of length 8 using alphabet, numbers, and symbols. Not applicable","completion":"import string import random def generate_password(): chars = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(chars) for _ in range(8)) return password print(generate_password())"},{"prompt":"Write a Python code to determine if the user has enough money in the account for a given transaction. balance = 200 amount = 50","completion":"def enough_balance(balance, amount): if amount > balance: return False return True if __name__ == '__main__': print(enough_balance(balance, amount))"},{"prompt":"Create a python function for calculating the area of a circle given the radius.","completion":"def area(radius): return 3.14 * radius * radius"},{"prompt":"Write a Python script that performs sentiment analysis on a given piece of text. The text I love this movie!","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer # Set up the sentiment analyzer sid = SentimentIntensityAnalyzer() # Get the sentiment from the text text = \\"I love this movie!\\" scores = sid.polarity_scores(text) # Output the results for k in sorted(scores): print(k, ':', scores[k]) print('Sentiment:', 'positive' if scores['compound'] > 0.05 else 'negative')"},{"prompt":"Using the given list of countries and a Python program, compute and display the total population of all countries in the list. Countries: India, China, United States, Indonesia Population of India = 1.3 billion Population of China = 1.4 billion Population of the United States = 329 million Population of Indonesia = 269 millio","completion":"countries = [\\"India\\", \\"China\\", \\"United States\\", \\"Indonesia\\"] population = [1300000000, 1400000000, 329000000, 269000000] total_population = 0 for i in range(len(countries)): total_population += population[i] print(\\"Total population of all countries in the list is \\" + str(total_population) + \\".\\")"},{"prompt":"This code is a Python implementation of the V4 Variant of the Protocol BSON. To use it, import the Protocol4 class from this module and create an instance of it. Then, call the appropriate methods on the instance to interact with the protocol. The available methods include login, logout, addGame, delGame, addPlayer, delPlayer, updatePlayer, and list. The protocol requires authentication before executing any method, except for login. The login method takes a username and password or token as arguments and returns a deferred that will fire when the login is complete. The other methods take various arguments and return deferreds that will fire when the corresponding operation is complete.","completion":"# -*- coding: utf-8 -*- # vim: set et sts=4 sw=4 encoding=utf-8: # # This file is part of Warzone 2100. # Copyright (C) 2011 Warzone 2100 Project # # Warzone 2100 is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # Warzone 2100 is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with Warzone 2100; if not, write to the Free Software # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA # # # This is the V4 Variant of the Protocol - BSON. __all__ = ['Protocol4'] from twisted.internet import defer from twisted.python import log from socketrpc.twisted_srpc import SocketRPCProtocol, set_serializer, Fault from wzlobby import settings set_serializer('jsonlib') NO_GAME = -402 NOT_ACCEPTABLE = -403 WRONG_LOGIN = -404 LOGIN_REQUIRED = -405 SESSION_INVALID = -406 class Protocol4(SocketRPCProtocol): game = None lobbyVersion = 4 def connectionMade(self): SocketRPCProtocol.connectionMade(self) self.debug = settings.debug self.gameDB = self.factory.gameDB self.db = self.factory.db self.authenticated = False def dispatch_call(self, method, id, args, kwargs): if not self.authenticated and settings.login_required and method != 'login': log.msg('Not executing %s - login required' % method) return defer.fail( Fault(LOGIN_REQUIRED, \\"Please login first!\\") ) log.msg('executing docall_%s' % method) return SocketRPCProtocol.dispatch_call(self, method, id, args, kwargs) def docall_login(self, username, password=None, token=None): def check_pass_cb(result): # Login ok self.authenticated = True return result def check_pass_eb(failure): self.authenticated = False return defer.fail(Fault(WRONG_LOGIN, \\"Password login failed, unknown user or wrong password!\\")) def check_token_cb(result): # Token login ok self.authenticated = True return result def check_token_eb(failure): self.authenticated = False return defer.fail(Fault(WRONG_LOGIN, \\"Token login failed, unknown user or wrong password!\\")) if token is None: d = self.db.check_user_password(username, password, self.transport.getPeer().host) d.addCallbacks(check_pass_cb, check_pass_eb) else: d = self.db.check_user_token(username, token, self.transport.getPeer().host) d.addCallbacks(check_token_cb, check_token_eb) return d def docall_logout(self): self.authenticated = False return defer.succeed(\\"\\") def docall_addGame(self, *args, **kwargs): def checkFailed(reason): return defer.fail( Fault( NOT_ACCEPTABLE, reason.getErrorMessage() ) ) def checkDone(result): self.gameDB.register(game) log.msg('new game %d: \\"%s\\" from \\"%s\\".' % (game['gameId'], game['description'].encode('utf8'), game['hostplayer'].encode('utf8'))) return {\\"gameId\\": game['gameId'], \\"result\\": result} game = self.gameDB.create(self.lobbyVersion) # Update the game with the received data for k, v in kwargs.iteritems(): try: game[k] = v except KeyError: pass # Add hosts ip game['host'] = self.transport.getPeer().host d = self.gameDB.check(game) d.addCallback(checkDone) d.addErrback(checkFailed) return d def docall_delGame(self, gameId): game = self.gameDB.get(gameId, False) if not game: return defer.fail( Fault(NO_GAME, 'Game %d does not exists' % gameId) ) self.gameDB.remove(game) return defer.succeed('') def docall_addPlayer(self, gameId, slot, name, username, session): def check_cb(result): if result: game['currentPlayers'] += 1 return defer.succeed('') else: return defer.fail(Fault(SESSION_INVALID, 'Users session is invalid!')) game = self.gameDB.get(gameId, False) if not game: return defer.fail( Fault(NO_GAME, 'Game %d does not exists' % gameId) ) d = self.db.check_user_session(username, session) d.addCallback(check_cb) return d def docall_delPlayer(self, gameId, slot): game = self.gameDB.get(gameId, False) if not game: return defer.fail( Fault(NO_GAME, 'Game %d does not exists' % gameId) ) game['currentPlayers'] -= 1 return defer.succeed('') def docall_updatePlayer(self, gameId, slot, name): return defer.succeed('') def docall_list(self, maxgames=9999): maxgames = int(maxgames); games = [] for game in self.gameDB.itervalues(): # Skip empty games. if not game['description']: continue games.append({ \\"host\\" : game[\\"host\\"], \\"port\\" : game[\\"port\\"], \\"description\\" : game[\\"description\\"], \\"currentPlayers\\" : game[\\"currentPlayers\\"], \\"maxPlayers\\" : game[\\"maxPlayers\\"], \\"multiVer\\" : game[\\"multiVer\\"], \\"wzVerMajor\\" : game[\\"wzVerMajor\\"], \\"wzVerMinor\\" : game[\\"wzVerMinor\\"], \\"isPrivate\\" : game[\\"isPrivate\\"], \\"modlist\\" : game[\\"modlist\\"], \\"mapname\\" : game[\\"mapname\\"], \\"hostplayer\\" : game[\\"hostplayer\\"], }) maxgames -= 1 if maxgames == 0: break; return defer.succeed(games)"},{"prompt":"Given a list of tuples, write a Python program to calculate the Euclidean distance between two items in the list.","completion":"def euclidean_distance(lst): distance = 0 for i in range(len(lst[0])): distance += (lst[0][i]-lst[1][i])**2 return (distance**0.5)"},{"prompt":"Write Python code to find the maximum distance between two elements in a given array x = [2, 4, 8, 11, 13, 18, 19, 21]","completion":"def maxdistance(x): # Initialize max distance max_distance = 0 for i in range(0, len(x)): for j in range(i + 1, len(x)): # Find the current distance between two elements d = abs(x[i] - x[j]) # Update the maximum distance if max_distance < d: max_distance = d return max_distance"},{"prompt":"Can you provide an algorithm in Python to check if a string is an anagram of another string? listen, silent","completion":"def areAnagrams(str1, str2): # Get lengths of both strings n1 = len(str1) n2 = len(str2) # If length of both strings is not same, then they # cannot be anagrams if n1 != n2: return False # Sort both strings str1 = sorted(str1) str2 = sorted(str2) # Compare sorted strings for i in range(0, n1): if str1[i] != str2[i]: return False return True"},{"prompt":"Write a Python script to generate a random integer in the interval [0, 10).","completion":"import random x = random.randint(0, 10) print(x)"},{"prompt":"Design a python function to filter out the fields from a JSON data. { name: John, age: 25, position: Developer }","completion":"def filter_json_data(input, fields): output = {} for field in fields: if field in input: output[field] = input[field] return output"},{"prompt":"Create a web crawler in Python.","completion":"# import necessary libraries import requests from bs4 import BeautifulSoup def crawler(max_pages): page = 1 while page <= max_pages: # fetch the page url = \\"https://www.example.com/?page=\\" + str(page) code = requests.get(url) plain = code.text # convert plain text to beautiful soup object soup = BeautifulSoup(plain, \\"html.parser\\") for link in soup.findAll('a', {'class': 'post_title'}): # extract \\"href\\" attribute of \\"<a>\\" tag href = link.get('href') # print the extracted link print(href) # increase page number page += 1 # start the crawler crawler(5)"},{"prompt":"Run an EEG analysis experiment with the following parameters: 10 Hz/5Hz, wisp, attention, 70, cA 5, delta, theta, alpha low, alpha high, beta low, beta high, batch size = 10 and balanced data set. Analyze the signal records with IDs 'IO_10_2', 'IO_TXT', 'IO_SKY', 'KS_10_2', 'RO_10_2' and noise records with ID 'noise'. Run classifiers over the analyzed records and save the output in a directory with the name 'cA_n_hidden_5_batch_size_10_dttha_la_hb_lb_h'.","completion":"#!/usr/bin/env python3 # -*- coding: utf-8 -*- \\"\\"\\" The experiment with 10 Hz/5Hz, wisp, attention, 70, cA 5, delta, theta, alpha low, alpha high, beta low, beta high, batch size = 10 and balanced data set @author: yaric \\"\\"\\" import experiment as ex import config from time import time n_hidden = 5 batch_size = 10 experiment_name = 'cA_%d_%d_dt-th-a_l-a_h-b_l-b_h' % (n_hidden, batch_size) # will be used as parent dir for analyzer results # The sample records identifiers signal_ids = ['IO_10_2', 'IO_TXT', 'IO_SKY', 'KS_10_2', 'RO_10_2'] noise_ids = ['noise'] # Setup analyzer configuration analyzer_config = ex.defaultAnalyzerConfig() analyzer_config['batch_size'] = batch_size analyzer_config['learning_rate'] = 0.1 analyzer_config['n_hidden'] = n_hidden analyzer_config['training_epochs'] = 50000 analyzer_config['encoder'] = 'cA' analyzer_config['bands'] = 'delta,theta,alpha_l,alpha_h,beta_l,beta_h' start = time() # # Run analyzer # print(\\"nStart analysis with parameters:n%sn\\" % analyzer_config) print(\\"Start analysis for signal records: %s\\" % signal_ids) ex.runEEGAnalyzerWithIDs(ids_list=signal_ids, experiment_name=experiment_name, a_config=analyzer_config) print(\\"Start analysis for noise records: %s\\" % noise_ids) ex.runEEGAnalyzerWithIDs(ids_list=noise_ids, experiment_name=experiment_name, a_config=analyzer_config) # # Run classifiers # signal_dir = \\"%s/%s\\" % (config.analyzer_out_dir, experiment_name) noise_dir = \\"%s/%s/%s\\" % (config.analyzer_out_dir, experiment_name, noise_ids[0]) out_suffix = experiment_name print(\\"Run classifiers over analyzed records. nSignal dir: %snNoise dir: %s\\" % (signal_dir, noise_dir)) ex.runClassifier(signal_dir=signal_dir, signal_records=signal_ids, noise_dir=noise_dir, out_suffix=out_suffix) print(\\"nnExperiment %s took %.2f seconds.n\\" % (experiment_name, time() - start))"},{"prompt":"Develop a python program that targets a specific element in a dictionary. target_key = age my_dict = { name: John Smith, age: 27, location: New York }","completion":"target_key = \\"age\\" my_dict = { \\"name\\": \\"John Smith\\", \\"age\\": 27, \\"location\\": \\"New York\\" } value = my_dict[target_key] print(\\"The value of {} is {}.\\".format(target_key, value))"},{"prompt":"Develop an algorithm in Python for given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array. Array : [2, 3, 1, 5, 4]","completion":"def missingNumber(arr): n = len(arr) total = (n + 1)*(n + 2)/2 sum_of_arr = sum(arr) return total - sum_of_arr arr = [2, 3, 1, 5, 4] missing = missingNumber(arr) print(missing)"},{"prompt":"Write a python program to find the pair of elements in a given array whose sum is equal to a given number. arr = [2, 3, 4, 5, 6, 7], sum = 9","completion":"def find_pair(arr, s): pairs = [] # traverse each element for i in range(0, len(arr)): # traverse each element again for j in range(i+1, len(arr)): if arr[i] + arr[j] == s: pairs.append((arr[i], arr[j])) return pairs # Driver Code arr = [2, 3, 4, 5, 6, 7] s = 9 print(find_pair(arr, s)) # Output: [(2, 7), (3, 6), (4, 5)]"},{"prompt":"Create a program in Python for filling missing values in an array. [3, 7, 1, 5], 6","completion":"def fillMissingValues(arr, n): for i in range(n): if (arr[i] == -1): # j is used to store the index of # element before the zero j = i - 1; while (arr[j] != -1 and j >= 0) : j -= 1; # If there is no element before 0, # then assign zeroes to all # missing elements if (j < 0): j = i; # fill the missing elements with # the last found non-zero element while (j < n): arr[j] = arr[j - 1]; j += 1; # Driver program arr = [ 3, 7, -1, 4, 5, 6, -1, 1 ]; n = len(arr); fillMissingValues(arr, n); # Print the modified array for i in range(n): print(arr[i], end = ' ');"},{"prompt":"Write a Python class to represent a polynomial of degree n. <no input>","completion":"class Polynomial: def __init__(self, coeff): self.coeff = coeff def __call__(self, x): result = 0 for idx, c in enumerate(self.coeff): result += c * x ** idx return result"},{"prompt":"Write a python code for solving the following equation for x. Equation: 4x^2 + 7x − 5 = 0","completion":"\\"\\"\\" Write a python code for solving the following equation for \\"x\\". \\"\\"\\" import math def solve_equation(a, b, c): d = (b**2) - (4 * a * c) x1 = (-b + math.sqrt(d)) / (2 * a) x2 = (-b - math.sqrt(d)) / (2 * a) return x1, x2 if __name__ == '__main__': a = 4 b = 7 c = -5 x1, x2 = solve_equation(a, b, c) print(\\"The solutions are x1 = {}, x2 = {}\\".format(x1, x2)) # Output # The solutions are x1 = 1.5, x2 = -2.5"},{"prompt":"Write a Python program to find all combinations of 3 numbers from an array that sum up to a given number. Array: [1, 2, 3, 4, 5] Target sum: 7","completion":"def combinations(arr, target): results = [] for i in range(len(arr)): for j in range(i+1, len(arr)): for k in range(j+1, len(arr)): if arr[i] + arr[j] + arr[k] == target: results.append([arr[i], arr[j], arr[k]]) return results arr = [1, 2, 3, 4, 5] target = 7 results = combinations(arr, target) print(results) # [[1, 2, 4], [1, 3, 3], [2, 3, 2]]"},{"prompt":"mplement a basic decision tree classifier in Python. Not applicable","completion":"class DecisionTreeClassifier: def __init__(self): self.tree = {} def fit(self, X, y): \\"\\"\\" Constructs a decision tree from the given training data. Args: X (list): Training input data y (list): Training output labels \\"\\"\\" # Calculate the best split attribute best_attr = self.__find_best_split_attr(X, y) # Build tree recursively if best_attr: self.tree = {best_attr: {}} sub_tree = self.tree[best_attr] # Find best split values best_values = self.__find_best_split_values(X, y, best_attr) # Do splits for val in best_values: x_subset, y_subset = self.__split(X, y, best_attr, val) sub_tree[val] = self.fit(x_subset, y_subset) else: # Leaf node unique_labels = set(y) self.tree = {'label': list(unique_labels)[0]} return self.tree def predict(self, X): \\"\\"\\" Predicts the labels of the given test data using the built decision tree. Args: X (list): Test input data Returns: list: Predicted labels \\"\\"\\" preds = [] for x in X: # Find the most likely label pred_label = self.__predict_instance(x, self.tree) preds.append(pred_label) return preds"},{"prompt":"Convert a string of commaseparated values into a list in Python. apple, banana, orange","completion":"str = \\"apple, banana, orange\\" # split the string string_list = str.split(', ') # print result print(string_list) # ['apple', 'banana', 'orange']"},{"prompt":"Create a linear regression model for predicting house prices in Python. Not applicable","completion":"import numpy as np import matplotlib.pyplot as plt from sklearn import datasets boston = datasets.load_boston() X = boston.data y = boston.target X_rm = X[:, 5] def model(X, w): return X * w # Mean Squared Error def cost(X, y, w): y_pred = model(X, w) mse = np.sum((y_pred - y) ** 2) / len(X) return mse # Gradient Descent def gd(X, y, learning_rate, n_iters): w = np.zeros() mse = [] for i in range(n_iters): y_pred = model(X, w) grad_w = X.T.dot(y_pred - y) w = w - learning_rate * grad_w current_mse = cost(X, y, w) mse.append(current_mse) return w, mse w, mse = gd(X_rm, y, 0.2, 100) y_pred = model(X_rm, w) # Plotting the data plt.scatter(X_rm, y) plt.plot(X_rm, y_pred, c='r') plt.show() # Plotting the cost curve plt.plot(np.arange(100), mse) plt.show()"},{"prompt":"Optimize the following Python code for best runtime. def is_prime(n): for i in range(2, n): if (n % i) == 0: return False return True","completion":"def is_prime(n): if n == 1: return False if n in (2, 3): return True if not (n & 1) and n > 2: return False for i in range(3, int(n**0.5)+1, 2): if n % i == 0: return False return True"},{"prompt":"Build a linear regression model using python.","completion":"import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error # Read data data = pd.read_csv('data.csv') X = data[['x']] y = data['y'] # Create a linear regression model model = LinearRegression() model.fit(X,y) # Make predictions predictions = model.predict(X) # Calculate the mean squared error mse = mean_squared_error(y, predictions) print(mse)"},{"prompt":"Create a function in Python to remove duplicate elements from a list.","completion":"def removeDuplicates(list): newList = [] for element in list: if element not in newList: newList.append(element) return newList"},{"prompt":"Create a Python program to classify a list of English words as prefix, infix, or suffix using a training set of English words. prefix at, in, up infix around, between, through suffix ate, ize, lfy","completion":"import re # Training set prefix = [ \\"at\\", \\"in\\", \\"up\\" ] infix = [ \\"around\\", \\"between\\", \\"through\\" ] suffix = [ \\"ate\\", \\"ize\\", \\"lfy\\" ] # Classifier def classify(word): pattern = re.compile(r'^(.*?)(w+?)(.*?)') m = pattern.match(word) if m.group(1) in prefix: print('Prefix - {}'.format(word)) elif m.group(2) in infix: print('Infix - {}'.format(word)) elif m.group(3) in suffix: print('Suffix - {}'.format(word)) # Test words = [\\"attempting\\", \\"beyond\\", \\"caresses\\"] for word in words: classify(word) # Output # Prefix - attempting # Infix - beyond # Suffix - caresses"},{"prompt":"Write a python program to perform sentiment analysis on a dataset of customer comments.","completion":"# Import libraries import pandas as pd import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer nltk.download('vader_lexicon') # Read the customer comments into a dataframe df = pd.read_csv('customer_comments.csv') df.head() # Create an instance of the SentimentIntensityAnalyzer sia = SentimentIntensityAnalyzer() # Loop over comments in the dataframe and compute sentiment scores for comment in df[\\"comment\\"]: sentiment=sia.polarity_scores(comment)['compound'] df.loc[df[\\"comment\\"]==comment,\\"sentiment\\"]=sentiment # Print the results print(df.head())"},{"prompt":"Python create a function that takes a list of numbers and returns the sum of the even numbers in the list. [3, 5, 8, 9, 10]","completion":"def even_sum(numbers): even_sum = 0 for num in numbers: if (num % 2 == 0): even_sum += num return even_sum"},{"prompt":"Edit the following python function so that it prints its parameters in reversed order. def print_params(a, b): print(a + ' ' + b)","completion":"def print_params(a, b): print(b + ' ' + a)"},{"prompt":"Write Python code that prints out the characters of a given string in reverse.","completion":"string = input() length = len(string) for i in range(length-1, -1, -1): print(string[i], end=\\"\\")"},{"prompt":"Create a script in Python to determine the largest number in a sequence of numbers. 11, 9, 12, 8, 5","completion":"nums = [11, 9, 12, 8, 5] max_num = max(nums) print(max_num) # 12"},{"prompt":"Create a Python script to optimize a portfolio. Not applicable","completion":"import numpy as np from scipy.optimize import minimize # Define the objective function def objective(x): return -np.sum(np.log(x)) # Define the constraints def constraints(x): return np.sum(x) - 1 # Set the initial values of the variables x0 = np.ones(5)/5 # Minimize the portfolio x = minimize(objective, x0, method=\\"SLSQP\\", constraints=[constraints]) # Print the optimized portfolio print(\\"Optimized weights: \\", x.x)"},{"prompt":"Create a Python program to calculate the output of a given system of linear equations. 3x + 2y = 8 x y = 0","completion":"def calcSystem(equations): ans = [] M = [equations[0][0],equations[1][0],equations[0][2]] N = [equations[0][1],equations[1][1],equations[1][2]] for x in range(3): if N[x] != 0: ans.append(M[x]/N[x]) M[(x+1)%3] = M[(x+1)%3] - (M[x]/N[x]) * N[(x+1)%3] N[(x+1)%3] = N[(x+1)%3] - (M[x]/N[x]) * N[(x+1)%3] else: ans.append(M[x+1]/N[x+1]) break ans.append(M[2]/N[2]) return ans eq1 = [3,2,8] eq2 = [1,-1,0] answer = calcSystem([eq1, eq2]) print(\\"x = \\", answer[0]) print(\\"y = \\", answer[1])"},{"prompt":"Write a Python program that takes a list of integers and returns the largest number my_list = [1, 5, 10, 15, 20]","completion":"def find_largest_number(numbers): largest_number = -float('inf') for number in numbers: if number > largest_number: largest_number = number return largest_number my_list = [1, 5, 10, 15, 20] largest_number = find_largest_number(my_list) print(largest_number)"},{"prompt":"Construct a python program to copy an array.","completion":"def copyArray(arr): res = [] for i in range(len(arr)): res.append(arr[i]) return res"},{"prompt":"Generate an OOP Python program to create a simple calculator app. The calculator should accept inputs in the form of two numbers, an operator between the two numbers and perform the calculations when the calculate button is clicked. 2, +, 4","completion":"class Calculator: def __init__(self, num1, operator, num2): self.num1 = num1 self.operator = operator self.num2 = num2 def calculate(self): if self.operator == \\"+\\": return self.num1 + self.num2 elif self.operator == \\"-\\": return self.num1 - self.num2 elif self.operator == \\"*\\": return self.num1 * self.num2 elif self.operator == \\"/\\": return self.num1 / self.num2 calc = Calculator(2,\\"+\\",4) result = calc.calculate() print(result) # Outputs 6"},{"prompt":"Concatenate two strings in Python using the + operator. string1 = Hello string2 = World","completion":"string1 = \\"Hello\\" string2 = \\"World\\" concatenated_string = string1 + string2"},{"prompt":"Find the maximum of three numbers using a Python function. a = 10, b = 5, c = 20","completion":"def maximumOfThreeNumbers(a, b, c): if (a >= b) and (a >= c): return a elif (b >= a) and (b >= c): return b else: return c maximum = maximumOfThreeNumbers(10, 5, 20) print(\\"The maximum number is:\\", maximum)"},{"prompt":"Create a function to calculate the dot product of two vectors in Python.","completion":"def dot_product(v1, v2): return sum(x1*x2 for x1, x2 in zip(v1, v2))"},{"prompt":"Design a neural network in Python that estimates the monthly electric bills of a household.","completion":"import numpy as np import tensorflow as tf # Input layer inputs = tf.keras.Input(shape=(3,)) # Hidden layers dense_1 = tf.keras.layers.Dense(7, activation='relu')(inputs) dense_2 = tf.keras.layers.Dense(5, activation='relu')(dense_1) # Output layer output = tf.keras.layers.Dense(1, activation='relu')(dense_2) # Create model model = tf.keras.Model(inputs=inputs, outputs=output) # Compile model model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy'])"},{"prompt":"Generate code in python to automate the following task Given a list of numbers, find and return the first number that is greater than 10.","completion":"def find_number_greater_than_10(arr): for num in arr: if num > 10: return num # Example data_set = [1, 2, 11, 20, 6, 7] print(find_number_greater_than_10(data_set)) # Output: 11"},{"prompt":"Create a neural network in python to classify the dataset below into two categories 0 0 1 0 1 0 0 0 1 1 0 0","completion":"import numpy as np import tensorflow as tf # Define inputs and outputs X = tf.placeholder(tf.float32, shape=[3, 4]) y = tf.placeholder(tf.float32, shape=[3, 1]) # Define weights and biases W = tf.Variable(tf.random_normal([4, 1])) b = tf.Variable(tf.random_normal([1])) # Define model model = tf.sigmoid(tf.matmul(X, W ) + b) # Define cost and optimizer cost = tf.reduce_mean(-y * tf.log(model) - (1-y) * tf.log(1-model)) optimizer = tf.train.GradientDescentOptimizer(0.1).minimize(cost) # Train model with tf.Session() as sess: sess.run(tf.global_variables_initializer()) for i in range(1000): sess.run(optimizer, feed_dict={X:[[0,0,1,0],[1,0,0,0],[1,1,0,0]], y:[[0],[1],[1]]}) # Print results print(\\"Final weights\\", sess.run(W)) print(\\"Final bais: \\", sess.run(b))"},{"prompt":"Rewrite the following python code into JavaScript. leader_info = { name: Diana Prince, job: Leader }","completion":"let leader_info = { \\"name\\": \\"Diana Prince\\", \\"job\\": \\"Leader\\" };"},{"prompt":"Create a Python program that generate a random sequence of numbers with length of 5. Not applicable","completion":"import random def generate_sequence(): sequence = [random.randint(0,20) for i in range(5)] print(sequence) generate_sequence()"},{"prompt":"Create a function in Python to count the frequency of each unique word in a string. This is a sentence of words which contains words repeated multiple times","completion":"def count_words(sentence): words = sentence.split() freq_dict = {} for word in words: if word in freq_dict: freq_dict[word] += 1 else: freq_dict[word] = 1 return freq_dict print(count_words(\\"This is a sentence of words which contains words repeated multiple times\\"))"},{"prompt":"Create a python program to classify if a given string contains any numbers. string = password123","completion":"import re def contains_numbers(string): \\"\\"\\"Classify if a given string contains any numbers.\\"\\"\\" return bool(re.search(r'd', string)) # Usage Example string = \\"password123\\" contains_numbers = contains_numbers(string) print(contains_numbers) # True"},{"prompt":"Create a machine learning model using Python and scikitlearn to classify text into four categories: positive, negative, neutral, and mixed. Not applicable","completion":"import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import ComplementNB category_map = { 0: 'positive', 1: 'negative', 2: 'neutral', 3: 'mixed' } # get text data text_data = //... # extract features from text data vectorizer = CountVectorizer() features = vectorizer.fit_transform(text_data) # create and train model model = ComplementNB() model.fit(features, labels) # make predictions predictions = model.predict(features) # map predictions to category labels prediction_labels = [category_map[i] for i in predictions]"},{"prompt":"Modify the provided Python code to find the prime numbers up to the given number.","completion":"def prime_numbers(number): # initialise prime list to empty prime_list = [] # loop over the range from 2 to the given number for num in range(2, number + 1): # assume the number to be a prime number is_prime = True # check if any number less than it divides num for divider in range(2, num): if (num % divider == 0): is_prime = False break # append the number to the prime list if is_prime: prime_list.append(num) # return the result return prime_list"},{"prompt":"Write a Python function that will calculate the average temperature for the past week. [64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7]","completion":"def calc_avg_temperature(temperatures): total = 0 for temp in temperatures: total += temp avg = total / len(temperatures) return avg print(calc_avg_temperature([64.7, 67.3, 71.3, 73.1, 75.7, 73.2, 75.7])) # Output: 71.17142857142857"},{"prompt":"Create a function in Python to convert a given list of strings to integers.","completion":"def convert_string_to_ints(strings): return [int(string) for string in strings]"},{"prompt":"Build a Python script to remove all punctuation from a given string. This is a cool string!","completion":"import string input_str = \\"This is a cool string!\\" punctuation_removed = input_str.translate(str.maketrans('', '', string.punctuation)) print(punctuation_removed)"},{"prompt":"Create a Python Class to check if a given string is a palindrome.","completion":"class Palindrome: def __init__(self, string): self.string = string def checkPalindrome(self): if(self.string == self.string[::-1]): return True else: return False string = 'radar' obj = Palindrome(string) if(obj.checkPalindrome()): print(\\"String is a Palindrome!\\") else: print(\\"String is not a Palindrome!\\")"},{"prompt":"Generate a python class to represent fractions and represent operations like multiplication, division, adding and subtracting of two instances of a fraction.","completion":"class Fraction: def __init__(self, numerator, denominator): self.numerator = numerator self.denominator = denominator def __str__(self): return '{}/{}'.format(self.numerator, self.denominator) def __mul__(self, other): new_numerator = self.numerator * other.numerator new_denominator = self.denominator * other.denominator return Fraction(new_numerator, new_denominator) def __truediv__(self, other): new_numerator = self.numerator * other.denominator new_denominator = self.denominator * other.numerator return Fraction(new_numerator, new_denominator) def __add__(self, other): new_numerator = (self.numerator * other.denominator) + (other.numerator * self.denominator) new_denominator = self.denominator * other.denominator return Fraction(new_numerator, new_denominator) def __sub__(self, other): new_numerator = (self.numerator * other.denominator) - (other.numerator * self.denominator) new_denominator = self.denominator * other.denominator return Fraction(new_numerator, new_denominator)"},{"prompt":"Given a JSON object, write a python program to print the square of every value, only if the value is even. { a: 1, b: 2, c: 3, d: 4 }","completion":"import json data = { \\"a\\": 1, \\"b\\": 2, \\"c\\": 3, \\"d\\": 4 } for key, value in data.items(): if value % 2 == 0: print(value**2)"},{"prompt":"Create a simple Python script to query and fetch data from an SQL database. Not applicable","completion":"import sqlite3 def query_database(database_name, query): conn = sqlite3.connect(database_name) c = conn.cursor() results = c.execute(query).fetchall() conn.close() return results # Example query to get all rows in the table query_database('mydatabase.db', 'SELECT * FROM mytable')"},{"prompt":"Write a Python program to create a list consisting of the squares of all the odd numbers between two given numbers m and n.","completion":"def list_odd_squares(m, n): squares = [] for i in range(m, n+1): if i % 2 != 0: squares.append(i*i) return squares"},{"prompt":"Write a Python program to automatically classify a text sentence into positive, negative and neutral classes. Sentence: This is amazing!","completion":"# create a dictionary of words and their sentiment values sentiment_dict = { 'amazing': 1, 'good': 1, 'bad': -1, 'awful': -1 } # function to classify sentiment def sentiment_classifier(text): sentiment = 0 words = text.split(' ') for word in words: if word in sentiment_dict: sentiment += sentiment_dict[word] if sentiment > 0: return 'positive' elif sentiment < 0: return 'negative' else: return 'neutral' # call the classifier sentiment = sentiment_classifier(\\"This is amazing!\\") print(sentiment) # prints: positive"},{"prompt":"Edit the Python script to make sure the program will run correctly # This program prints out the numbers from 1 to 10 for x in range(9): print(x + 1)","completion":"# This program prints out the numbers from 1 to 10 for x in range(10): print(x + 1)"},{"prompt":"Create an ASPModule object to contain specialized functions. Use the add_library method to add a library to the module. Use the add_header method to add a header file to the module. Use the add_function method to add a specialized function to the module. Use the add_helper_function method to add a helper function","completion":"import codepy, codepy.jit, codepy.toolchain, codepy.bpl, codepy.cuda from asp.util import * import asp.codegen.cpp_ast as cpp_ast import pickle from variant_history import * import sqlite3 import asp import scala_module class ASPDB(object): def __init__(self, specializer, persistent=False): \\"\\"\\" specializer must be specified so we avoid namespace collisions. \\"\\"\\" self.specializer = specializer if persistent: # create db file or load db # create a per-user cache directory import tempfile, os if os.name == 'nt': username = os.environ['USERNAME'] else: username = os.environ['LOGNAME'] self.cache_dir = tempfile.gettempdir() + \\"/asp_cache_\\" + username if not os.access(self.cache_dir, os.F_OK): os.mkdir(self.cache_dir) self.db_file = self.cache_dir + \\"/aspdb.sqlite3\\" self.connection = sqlite3.connect(self.db_file) self.connection.execute(\\"PRAGMA temp_store = MEMORY;\\") self.connection.execute(\\"PRAGMA synchronous = OFF;\\") else: self.db_file = None self.connection = sqlite3.connect(\\":memory:\\") def create_specializer_table(self): self.connection.execute('create table '+self.specializer+' (fname text, variant text, key text, perf real)') self.connection.commit() def close(self): self.connection.close() def table_exists(self): \\"\\"\\" Test if a table corresponding to this specializer exists. \\"\\"\\" cursor = self.connection.cursor() cursor.execute('select name from sqlite_master where name=\\"%s\\"' % self.specializer) result = cursor.fetchall() return len(result) > 0 def insert(self, fname, variant, key, value): if (not self.table_exists()): self.create_specializer_table() self.connection.execute('insert into '+self.specializer+' values (?,?,?,?)', (fname, variant, key, value)) self.connection.commit() def get(self, fname, variant=None, key=None): \\"\\"\\" Return a list of entries. If key and variant not specified, all entries from fname are returned. \\"\\"\\" if (not self.table_exists()): self.create_specializer_table() return [] cursor = self.connection.cursor() query = \\"select * from %s where fname=?\\" % (self.specializer,) params = (fname,) if variant: query += \\" and variant=?\\" params += (variant,) if key: query += \\" and key=?\\" params += (key,) cursor.execute(query, params) return cursor.fetchall() def update(self, fname, variant, key, value): \\"\\"\\" Updates an entry in the db. Overwrites the timing information with value. If the entry does not exist, does an insert. \\"\\"\\" if (not self.table_exists()): self.create_specializer_table() self.insert(fname, variant, key, value) return # check if the entry exists query = \\"select count(*) from \\"+self.specializer+\\" where fname=? and variant=? and key=?;\\" cursor = self.connection.cursor() cursor.execute(query, (fname, variant, key)) count = cursor.fetchone()[0] # if it exists, do an update, otherwise do an insert if count > 0: query = \\"update \\"+self.specializer+\\" set perf=? where fname=? and variant=? and key=?\\" self.connection.execute(query, (value, fname, variant, key)) self.connection.commit() else: self.insert(fname, variant, key, value) def delete(self, fname, variant, key): \\"\\"\\" Deletes an entry from the db. \\"\\"\\" if (not self.table_exists()): return query = \\"delete from \\"+self.specializer+\\" where fname=? and variant=? and key=?\\" self.connection.execute(query, (fname, variant, key)) self.connection.commit() def destroy_db(self): \\"\\"\\" Delete the database. \\"\\"\\" if not self.db_file: return True import os try: self.close() os.remove(self.db_file) except: return False else: return True class SpecializedFunction(object): \\"\\"\\" Class that encapsulates a function that is specialized. It keeps track of variants, their timing information, which backend, functions to determine if a variant can run, as well as a function to generate keys from parameters. The signature for any run_check function is run(*args, **kwargs). The signature for the key function is key(self, *args, **kwargs), where the args/kwargs are what are passed to the specialized function. \\"\\"\\" def __init__(self, name, backend, db, variant_names=[], variant_funcs=[], run_check_funcs=[], key_function=None, call_policy=None): self.name = name self.backend = backend self.db = db self.variant_names = [] self.variant_funcs = [] self.run_check_funcs = [] self.call_policy = call_policy if variant_names != [] and run_check_funcs == []: run_check_funcs = [lambda *args,**kwargs: True]*len(variant_names) for x in xrange(len(variant_names)): self.add_variant(variant_names[x], variant_funcs[x], run_check_funcs[x]) if key_function: self.key = key_function def key(self, *args, **kwargs): \\"\\"\\" Function to generate keys. This should almost always be overridden by a specializer, to make sure the information stored in the key is actually useful. \\"\\"\\" import hashlib return hashlib.md5(str(args)+str(kwargs)).hexdigest() def add_variant(self, variant_name, variant_func, run_check_func=lambda *args,**kwargs: True): \\"\\"\\" Add a variant of this function. Must have same call signature. Variant names must be unique. The variant_func parameter should be a CodePy Function object or a string defining the function. The run_check_func parameter should be a lambda function with signature run(*args,**kwargs). \\"\\"\\" if variant_name in self.variant_names: raise Exception(\\"Attempting to add a variant with an already existing name %s to %s\\" % (variant_name, self.name)) self.variant_names.append(variant_name) self.variant_funcs.append(variant_func) self.run_check_funcs.append(run_check_func) if isinstance(self.backend.module, scala_module.ScalaModule): self.backend.module.add_to_module(variant_func) self.backend.module.add_to_init(variant_name) elif isinstance(variant_func, basestring): if isinstance(self.backend.module, codepy.cuda.CudaModule):#HACK because codepy's CudaModule doesn't have add_to_init() self.backend.module.boost_module.add_to_module([cpp_ast.Line(variant_func)]) self.backend.module.boost_module.add_to_init([cpp_ast.Statement(\\"boost::python::def(\\"%s\\", &%s)\\" % (variant_name, variant_name))]) else: self.backend.module.add_to_module([cpp_ast.Line(variant_func)]) if self.call_policy == \\"python_gc\\": self.backend.module.add_to_init([cpp_ast.Statement(\\"boost::python::def(\\"%s\\", &%s, boost::python::return_value_policy<boost::python::manage_new_object>())\\" % (variant_name, variant_name))]) else: self.backend.module.add_to_init([cpp_ast.Statement(\\"boost::python::def(\\"%s\\", &%s)\\" % (variant_name, variant_name))]) else: self.backend.module.add_function(variant_func) self.backend.dirty = True def pick_next_variant(self, *args, **kwargs): \\"\\"\\" Logic to pick the next variant to run. If all variants have been run, then this should return the fastest variant. \\"\\"\\" # get variants that have run already_run = self.db.get(self.name, key=self.key(*args, **kwargs)) if already_run == []: already_run_variant_names = [] else: already_run_variant_names = map(lambda x: x[1], already_run) # which variants haven't yet run candidates = set(self.variant_names) - set(already_run_variant_names) # of these candidates, which variants *can* run for x in candidates: if self.run_check_funcs[self.variant_names.index(x)](*args, **kwargs): return x # if none left, pick fastest from those that have already run return sorted(already_run, lambda x,y: cmp(x[3],y[3]))[0][1] def __call__(self, *args, **kwargs): \\"\\"\\" Calling an instance of SpecializedFunction will actually call either the next variant to test, or the already-determined best variant. \\"\\"\\" if self.backend.dirty: self.backend.compile() which = self.pick_next_variant(*args, **kwargs) import time start = time.time() ret_val = self.backend.get_compiled_function(which).__call__(*args, **kwargs) elapsed = time.time() - start #FIXME: where should key function live? #print \\"doing update with %s, %s, %s, %s\\" % (self.name, which, self.key(args, kwargs), elapsed) self.db.update(self.name, which, self.key(*args, **kwargs), elapsed) #TODO: Should we use db.update instead of db.insert to avoid O(N) ops on already_run_variant_names = map(lambda x: x[1], already_run)? return ret_val class HelperFunction(SpecializedFunction): \\"\\"\\" HelperFunction defines a SpecializedFunction that is not timed, and usually not called directly (although it can be). \\"\\"\\" def __init__(self, name, func, backend): self.name = name self.backend = backend self.variant_names, self.variant_funcs, self.run_check_funcs = [], [], [] self.call_policy = None self.add_variant(name, func) def __call__(self, *args, **kwargs): if self.backend.dirty: self.backend.compile() return self.backend.get_compiled_function(self.name).__call__(*args, **kwargs) class ASPBackend(object): \\"\\"\\" Class to encapsulate a backend for Asp. A backend is the combination of a CodePy module (which contains the actual functions) and a CodePy compiler toolchain. \\"\\"\\" def __init__(self, module, toolchain, cache_dir, host_toolchain=None): self.module = module self.toolchain = toolchain self.host_toolchain = host_toolchain self.compiled_module = None self.cache_dir = cache_dir self.dirty = True self.compilable = True def compile(self): \\"\\"\\" Trigger a compile of this backend. Note that CUDA needs to know about the C++ backend as well. \\"\\"\\" if not self.compilable: return if isinstance(self.module, codepy.cuda.CudaModule): self.compiled_module = self.module.compile(self.host_toolchain, self.toolchain, debug=True, cache_dir=self.cache_dir) else: self.compiled_module = self.module.compile(self.toolchain, debug=True, cache_dir=self.cache_dir) self.dirty = False def get_compiled_function(self, name): \\"\\"\\" Return a callable for a raw compiled function (that is, this must be a variant name rather than a function name). \\"\\"\\" try: func = getattr(self.compiled_module, name) except: raise AttributeError(\\"Function %s not found in compiled module.\\" % (name,)) return func class ASPModule(object): \\"\\"\\" ASPModule is the main coordination class for specializers. A specializer creates an ASPModule to contain all of its specialized functions, and adds functions/libraries/etc to the ASPModule. ASPModule uses ASPBackend instances for each backend, ASPDB for its backing db for recording timing info, and instances of SpecializedFunction and HelperFunction for specialized and helper functions, respectively. \\"\\"\\" #FIXME: specializer should be required. def __init__(self, specializer=\\"default_specializer\\", cache_dir=None, use_cuda=False, use_cilk=False, use_tbb=False, use_pthreads=False, use_scala=False): self.specialized_functions= {} self.helper_method_names = [] self.db = ASPDB(specializer) if cache_dir: self.cache_dir = cache_dir else: # create a per-user cache directory import tempfile, os if os.name == 'nt': username = os.environ['USERNAME'] else: username = os.environ['LOGNAME'] self.cache_dir = tempfile.gettempdir() + \\"/asp_cache_\\" + username if not os.access(self.cache_dir, os.F_OK): os.mkdir(self.cache_dir) self.backends = {} self.backends[\\"c++\\"] = ASPBackend(codepy.bpl.BoostPythonModule(), codepy.toolchain.guess_toolchain(), self.cache_dir) if use_cuda: self.backends[\\"cuda\\"] = ASPBackend(codepy.cuda.CudaModule(self.backends[\\"c++\\"].module), codepy.toolchain.guess_nvcc_toolchain(), self.cache_dir, self.backends[\\"c++\\"].toolchain) self.backends['cuda'].module.add_to_preamble([cpp_ast.Include('cuda.h', True)]) # codepy.CudaModule doesn't do this automatically for some reason self.backends['cuda'].module.add_to_preamble([cpp_ast.Include('cuda_runtime.h', True)]) # codepy.CudaModule doesn't do this automatically for some reason self.backends['c++'].module.add_to_preamble([cpp_ast.Include('cuda_runtime.h', True)]) # codepy.CudaModule doesn't do this automatically for some reason self.backends[\\"cuda\\"].toolchain.cflags += [\\"-shared\\"] if use_cilk: self.backends[\\"cilk\\"] = self.backends[\\"c++\\"] self.backends[\\"cilk\\"].toolchain.cc = \\"icc\\" if use_tbb: self.backends[\\"tbb\\"] = self.backends[\\"c++\\"] self.backends[\\"tbb\\"].toolchain.cflags += [\\"-ltbb\\"] if use_pthreads: self.backends[\\"pthreads\\"] = self.backends[\\"c++\\"] self.backends[\\"pthreads\\"].toolchain.cflags += [\\"-pthread\\"] if use_scala: self.backends[\\"scala\\"] = ASPBackend(scala_module.ScalaModule(), scala_module.ScalaToolchain(), self.cache_dir) def add_library(self, feature, include_dirs, library_dirs=[], libraries=[], backend=\\"c++\\"): self.backends[backend].toolchain.add_library(feature, include_dirs, library_dirs, libraries) def add_cuda_arch_spec(self, arch): archflag = '-arch=' if 'sm_' not in arch: archflag += 'sm_' archflag += arch self.backends[\\"cuda\\"].toolchain.cflags += [archflag] def add_header(self, include_file, brackets=False, backend=\\"c++\\"): \\"\\"\\" Add a header (e.g. #include \\"foo.h\\") to the module source file. With brackets=True, it will be C++-style #include <foo> instead. \\"\\"\\" self.backends[backend].module.add_to_preamble([cpp_ast.Include(include_file, brackets)]) def add_to_preamble(self, pa, backend=\\"c++\\"): if isinstance(pa, basestring): pa = [cpp_ast.Line(pa)] self.backends[backend].module.add_to_preamble(pa) def add_to_init(self, stmt, backend=\\"c++\\"): if isinstance(stmt, str): stmt = [cpp_ast.Line(stmt)] if backend == \\"cuda\\": self.backends[backend].module.boost_module.add_to_init(stmt) #HACK because codepy's CudaModule doesn't have add_to_init() else: self.backends[backend].module.add_to_init(stmt) def add_to_module(self, block, backend=\\"c++\\"): if isinstance(block, basestring): block = [cpp_ast.Line(block)] self.backends[backend].module.add_to_module(block) def add_function(self, fname, funcs, variant_names=[], run_check_funcs=[], key_function=None, backend=\\"c++\\", call_policy=None): \\"\\"\\" Add a specialized function to the Asp module. funcs can be a list of variants, but then variant_names is required (also a list). Each item in funcs should be a string function or a cpp_ast FunctionDef. \\"\\"\\" if not isinstance(funcs, list): funcs = [funcs] variant_names = [fname] self.specialized_functions[fname] = SpecializedFunction(fname, self.backends[backend], self.db, variant_names, variant_funcs=funcs, run_check_funcs=run_check_funcs, key_function=key_function, call_policy=call_policy) def add_helper_function(self, fname, func, backend=\\"c++\\"): \\"\\"\\" Add a helper function, which is a specialized function that it not timed and has a single variant. \\"\\"\\" self.specialized_functions[fname] = HelperFunction(fname, func, self.backends[backend]) def expose_class(self, classname, backend=\\"c++\\"): \\"\\"\\" Expose a class or struct from C++ to Python, letting us pass instances back and forth between Python and C++. TODO: allow exposing *functions* within the class \\"\\"\\" self.backends[backend].module.add_to_init([cpp_ast.Line(\\"boost::python::class_<%s>(\\"%s\\");n\\" % (classname, classname))]) def __getattr__(self, name): if name in self.specialized_functions: return self.specialized_functions[name] else: raise AttributeError(\\"No method %s found; did you add it to this ASPModule?\\" % name) def generate(self): \\"\\"\\" Utility function for, during development, dumping out the generated source from all the underlying backends. \\"\\"\\" src = \\"\\" for x in self.backends.keys(): src += \\"nSource code for backend '\\" + x + \\"':n\\" src += str(self.backends[x].module.generate()) return src"},{"prompt":"Create a python code to remove duplicates from a given list while preserving the order.","completion":"def remove_duplicates(data): \\"\\"\\"Removes duplicates from a given list while preserving the order.\\"\\"\\" seen = set() result = [] for x in data: if x not in seen: seen.add(x) result.append(x) return result"},{"prompt":"Create a Python program to optimize a given set of four variables using the simulated annealing optimization algorithm. Variables: x1, x2, x3, x4","completion":"import numpy as np import random import simanneal # Optimization function def optimize(state): x1, x2, x3, x4 = state value = x1**2 + x2**2 - 3*x3 + x4**2 return -value # Simulated Annealing Algorithm init_state = [1.0, 1.0, 1.0, 1.0] schedule = simanneal.Annealer(optimize, init_state) schedule.steps = 1000 result = schedule.anneal() # Print results print(\\"Optimized variables: \\") print(\\"x1 = {0}\\".format(result[0])) print(\\"x2 = {0}\\".format(result[1])) print(\\"x3 = {0}\\".format(result[2])) print(\\"x4 = {0}\\".format(result[3]))"},{"prompt":"Write a python program to create a user authentication system that uses a username and password.","completion":"class User: def __init__(self, username, password): self.username = username self.password = password self.is_authenticated = False def authenticate(self, username, password): if (username == self.username and password == self.password): self.is_authenticated = True def logout(self): self.is_authenticated = False"},{"prompt":"Create a Python program to generate an infinite sequence of numbers in a Fibonaccilike pattern.","completion":"def fibonacci(): a, b = 0, 1 while True: yield b a, b = b, a + b for num in fibonacci(): print(num)"},{"prompt":"Create a script in Python to check for palindromes.","completion":"def is_palindrome(s): # Strip punctuation and make input lowercase s = ''.join(e.lower() for e in s if e.isalnum()) # Check if the string is a palindrome return s == s[::-1] # Driver Code string = \\"A man, a plan, a canal: Panama\\" print(is_palindrome(string)) # Output: true"},{"prompt":"Create a class in python that has three attributes and two methods","completion":"class MyClass: def __init__(self, a, b, c): self.a = a self.b = b self.c = c def add(self): return self.a + self.b + self.c def multiply(self): return self.a * self.b * self.c"},{"prompt":"Create an algorithm in Python to search an element from a given array of integers. arr = [3, 5, 6, 9, 11]","completion":"def searchElement(arr, element): for i in range(len(arr)): if arr[i] == element: return i return -1"},{"prompt":"This code is a Django migration that adds a new M2M table for the 'projects_relateds' field on the 'New' model and removes the old M2M table for the 'project' field. To apply this migration, run the 'python manage.py migrate' command.","completion":"# encoding: utf-8 import datetime from south.db import db from south.v2 import SchemaMigration from django.db import models class Migration(SchemaMigration): def forwards(self, orm): # Removing M2M table for field project on 'New' db.delete_table('news_new_project') # Adding M2M table for field projects_relateds on 'New' db.create_table('news_new_projects_relateds', ( ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)), ('new', models.ForeignKey(orm['news.new'], null=False)), ('project', models.ForeignKey(orm['projects.project'], null=False)) )) db.create_unique('news_new_projects_relateds', ['new_id', 'project_id']) def backwards(self, orm): # Adding M2M table for field project on 'New' db.create_table('news_new_project', ( ('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)), ('new', models.ForeignKey(orm['news.new'], null=False)), ('project', models.ForeignKey(orm['projects.project'], null=False)) )) db.create_unique('news_new_project', ['new_id', 'project_id']) # Removing M2M table for field projects_relateds on 'New' db.delete_table('news_new_projects_relateds') models = { 'auth.group': { 'Meta': {'object_name': 'Group'}, 'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}), 'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \\"orm['auth.Permission']\\", 'symmetrical': 'False', 'blank': 'True'}) }, 'auth.permission': { 'Meta': {'ordering': \\"('content_type__app_label', 'content_type__model', 'codename')\\", 'unique_together': \\"(('content_type', 'codename'),)\\", 'object_name': 'Permission'}, 'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}), 'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['contenttypes.ContentType']\\"}), 'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}) }, 'auth.user': { 'Meta': {'object_name': 'User'}, 'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}), 'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}), 'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}), 'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': \\"orm['auth.Group']\\", 'symmetrical': 'False', 'blank': 'True'}), 'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}), 'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}), 'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}), 'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}), 'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}), 'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}), 'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \\"orm['auth.Permission']\\", 'symmetrical': 'False', 'blank': 'True'}), 'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'}) }, 'contenttypes.contenttype': { 'Meta': {'ordering': \\"('name',)\\", 'unique_together': \\"(('app_label', 'model'),)\\", 'object_name': 'ContentType', 'db_table': \\"'django_content_type'\\"}, 'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}), 'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}), 'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}) }, 'news.new': { 'Meta': {'object_name': 'New'}, 'author': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['auth.User']\\"}), 'body': ('django.db.models.fields.TextField', [], {}), 'datetime': ('django.db.models.fields.DateTimeField', [], {}), 'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'image': ('django.db.models.fields.files.ImageField', [], {'max_length': '100', 'null': 'True', 'blank': 'True'}), 'projects_relateds': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': \\"orm['projects.Project']\\", 'null': 'True', 'blank': 'True'}), 'summary': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}), 'title': ('django.db.models.fields.CharField', [], {'max_length': '200'}) }, 'projects.project': { 'Meta': {'object_name': 'Project'}, 'description': ('django.db.models.fields.TextField', [], {}), 'end_date': ('django.db.models.fields.DateField', [], {'null': 'True'}), 'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'logo': ('django.db.models.fields.files.ImageField', [], {'max_length': '100'}), 'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}), 'sponsor': ('django.db.models.fields.CharField', [], {'max_length': '100'}), 'start_date': ('django.db.models.fields.DateField', [], {}), 'status': ('django.db.models.fields.CharField', [], {'max_length': '100'}) } } complete_apps = ['news']"},{"prompt":"Write a python program for text processing tasks such as to reverse the text of every line. line1: Welcome to Text Processing line2: This is fu","completion":"line1: emocleW ot gnirtS ecnerefxeT line2: sI si nuf"},{"prompt":"Write a Python code snippet to get the length of string Hello World.","completion":"len(\\"Hello World\\")"},{"prompt":"Generate a Python class to represent a 2D point.","completion":"class Point: def __init__(self, x, y): self.x = x self.y = y def __str__(self): return '({}, {})'.format(self.x, self.y)"},{"prompt":"Create a function in python to calculate the square root","completion":"def sqrt(x): if x == 0 or x == 1: return x i = 1 res = 1 while res <= x: i += 1 res = i * i return i-1"},{"prompt":"Create a web scraper in Python that loads a website page and extracts a particular string of text. URL: https://www.example.com/ Text to extract: Hello, world!","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.example.com/\\" page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') text = soup.find(string=\\"Hello, world!\\") print(text)"},{"prompt":"Generate a Python class which represents the Enigma machine from World War II and executes encryption and decryption.","completion":"class Enigma(object): def __init__(self, rotors, reflector, ringsetting, plugboard): self.rotors = rotors self.reflector = reflector self.ringsetting = ringsetting self.plugboard = plugboard def encrypt(self, message): # code for encryption pass def decrypt(self, message): # code for decryption pass"},{"prompt":"Add a loop structure to create a Python program that prints out the numbers 0 to 10.","completion":"for x in range(0, 11): print(x)"},{"prompt":"Create a basic web crawler in Python. The crawler should take a URL as input and return a list of all external links found on the page. https://canvas.elte.hu/","completion":"import requests from bs4 import BeautifulSoup # make an HTTP request to the given URL r = requests.get(url) # parse the response soup = BeautifulSoup(r.content, 'html.parser') # find all the links on the page links = soup.find_all('a') external_links = [] # loop through the links and extract the external ones for link in links: href = link.get('href') # check if the link is valid and external (not on the same page) if href and href.startswith('http'): external_links.append(href) # print the list of external links print(external_links)"},{"prompt":"Create a Python script that prints a square pattern of * characters with a given size. size = 5","completion":"# size is the dimension of the square size = 5 # loop through the rows for row in range(size): # loop through the columns for col in range(size): print('*', end='') # end='' prevents line break print() # prints new line"},{"prompt":"Write a Python program to query a MySQL database and produce a chart representing the results of the query. The query is to calculate the total number of orders for each customer. The table name is 'orders'.","completion":"import mysql.connector import matplotlib.pyplot as plt # Connect to the database mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"root\\", passwd=\\"password\\", database=\\"dbname\\" ) # Create a cursor mycursor = mydb.cursor() # Execute a query mycursor.execute(\\"SELECT customer_id, COUNT(*) FROM orders GROUP BY customer_id\\") # Fetch results results = mycursor.fetchall() # Generate Chart ordercounts = [result[1] for result in results] customers = [] for result in results: mycursor.execute(\\"SELECT name FROM customers WHERE id = %s\\" % (result[0],)) name_result = mycursor.fetchone() customers.append(name_result[0]) plt.bar(customers, ordercounts) plt.xticks(customers, rotation=90) plt.ylabel('Order Count') plt.xlabel('Customer') plt.show()"},{"prompt":"Develop an automated trading system in Python. The system should use a technical indicator such as the Relative Strength Index (RSI) to trade a given asset. It should generate buy and sell signals and allocate capital accordingly. Realtime price data for assets like the S&P 500, currency pairs like EUR/USD, commodities like Crude Oil, etc.","completion":"import numpy as np import pandas as pd from scipy.stats import norm import matplotlib.pyplot as plt import datetime as dt # import price data for the asset prices = pd.read_csv('data.csv', index_col=0, parse_dates=True) # add a new column for the relative strength index prices['RSI'] = np.nan # define the period for the rolling window n = 14 # calculate the relative strength index for i in range(n,len(prices)): prices.loc[prices.index[i],'RSI'] = round(100 - 100/(1+prices['Close'][i-n:i].pct_change().mean()/prices['Close'][i-n:i].pct_change().std()),2) # generate buy and sell signals prices['Signal'] = np.nan for i in range(n,len(prices)): if prices.loc[prices.index[i],'RSI'] <= 30: prices.loc[prices.index[i],'Signal'] = 'BUY' elif prices.loc[prices.index[i],'RSI'] >= 70: prices.loc[prices.index[i],'Signal'] = 'SELL' else: prices.loc[prices.index[i],'Signal'] = None # define capital to trade capital = 100000 # assign positions position = 0 # 0 = no position, 1 = long, -1 = short # plot the RSI indicator with buy and sell signals plt.figure(figsize=(15,10)) plt.plot(prices.RSI, label='Relative Strength Index (RSI)') plt.scatter(prices[prices['Signal']=='BUY'].index,prices[prices['Signal']=='BUY'].RSI, marker='o', color='green', label='Buy Signal') plt.scatter(prices[prices['Signal']=='SELL'].index,prices[prices['Signal']=='SELL'].RSI, marker='o', color='red', label='Sell Signal') plt.legend(loc='upper left') plt.title('Relative Strength Index (RSI) with Buy and Sell Signals') plt.show() # execute trades for i in range(0, len(prices)-1): if prices.loc[prices.index[i],'Signal'] == 'BUY' and position == 0: # enter long position position = 1 # calculate the number of contracts lotSize = np.int(np.floor(capital * 0.01 / (prices.loc[prices.index[i],'Close'] * 100))) # calculate entry price entryPrice = prices.loc[prices.index[i],'Close'] # update capital capital = capital - lotSize * entryPrice * 100 elif prices.loc[prices.index[i],'Signal'] == 'SELL' and position == 0: # enter short position position = -1 # calculate the number of contracts lotSize = np.int(np.floor(capital * 0.01 / (prices.loc[prices.index[i],'Close'] * 100))) # calculate entry price entryPrice = prices.loc[prices.index[i],'Close'] # update capital capital = capital + lotSize * entryPrice * 100 elif prices.loc[prices.index[i+1],'Signal'] == 'SELL' and position == 1: # exit long position position = 0 # calculate exit price exitPrice = prices.loc[prices.index[i+1],'Close'] # update capital capital = capital + lotSize * exitPrice * 100 elif prices.loc[prices.index[i+1],'Signal'] == 'BUY' and position == -1: # exit short position position = 0 # calculate exit price exitPrice = prices.loc[prices.index[i+1],'Close'] # update capital capital = capital - lotSize * exitPrice * 100 # print final capital print('Final capital:',round(capital,2))"},{"prompt":"Write a Python function to access a given key from a given dictionary. d = {'x': 3, 'y': 4, 'z': 5}","completion":"def access_key(key, dictionary): if key not in dictionary: return -1 return dictionary[key]"},{"prompt":"Create a Python script to print out the most common words in the text. The quick brown fox jumps over the lazy dog.","completion":"from collections import Counter text = \\"The quick brown fox jumps over the lazy dog.\\" words = text.split() word_counts = Counter(words) most_common_words = word_counts.most_common() for word, count in most_common_words: print(word, count) # Output: # the 2 # quick 1 # brown 1 # fox 1 # jumps 1 # over 1 # lazy 1 # dog 1"},{"prompt":"Develop a class in Python to keep track of stock prices Symbol: AAPL","completion":"class Stock: def __init__(self, symbol): self.symbol = symbol self.prices = [] def add_price(self, price): self.prices.append(price) def get_prices(self): return self.prices AAPL = Stock('AAPL') AAPL.add_price(191.43) AAPL.add_price(193.57) AAPL.add_price(190.08) AAPL.get_prices()"},{"prompt":"Create a python program to replace specific words in a given input string with a custom word. Input string: I love robots Replace: love > hate","completion":"def replace_word(inp, src, target): inp = inp.split() for i in range(len(inp)): if inp[i] == src: inp[i] = target return ' '.join(inp)"},{"prompt":"Write a Python program to optimize a list of numbers such that each value is equal to the mean of its neighboring values. [3, 8, 8, 9, 5]","completion":"def optimize_list(numbers): optimized_list = [] for i, n in enumerate(numbers): if i == 0: # first element optimized_list.append(numbers[1]/2) elif i == len(numbers)-1: # last element optimized_list.append(numbers[-2]/2) else: # any other element optimized_list.append(sum(numbers[i-1:i+2])/3) return optimized_list"},{"prompt":"Create a virtual assistant application using Python that can understand voice commands and greetings. Not applicable","completion":"import speech_recognition as sr import pyttsx3 # Initialize text-to-speech engine engine = pyttsx3.init() # Listen for voice commands r = sr.Recognizer() with sr.Microphone() as source: r.adjust_for_ambient_noise(source) audio = r.listen(source) # Get transcript command = r.recognize_google(audio).lower() if 'hello' or 'hi' in command: engine.say('Hello! How can I help you?') engine.runAndWait() # Create logic for other commands here..."},{"prompt":"Create a program in Python to analyze the following data set and print the mean, median, and standard deviation of each group. DataSet = [ [21, 24, 23, 20, 19, 19], [15, 22, 20, 16, 8, 14], [7, 6, 5, 9, 10, 14] ]","completion":"import statistics data_set = [ [21, 24, 23, 20, 19, 19], [15, 22, 20, 16, 8, 14], [7, 6, 5, 9, 10, 14] ] for group in data_set: print(\\"Mean: \\" + str(statistics.mean(group))) print(\\"Median: \\" + str(statistics.median(group))) print(\\"Standard Deviation: \\" + str(statistics.stdev(group))) print()"},{"prompt":"Create a Python script to generate random numbers in the given range","completion":"def generate_random_numbers(start, end): import random return random.randint(start, end)"},{"prompt":"Write a web scraping program in Python to download all the articles from a given URL? https://www.example.com/articles/","completion":"import requests from bs4 import BeautifulSoup # URL of the website to scrape url = 'https://www.example.com/articles/' # Request the HTML page r = requests.get(url) # Create a BeautifulSoup object soup = BeautifulSoup(r.content, 'html.parser') # Extract all the links from the page links = soup.find_all('a') # Iterate through the links and download the articles for link in links: # Get the link target link_target = link.get('href') # If the link target is an article, download it if 'article' in link_target: article_url = url + link_target r = requests.get(article_url) with open(link_target, 'w') as f: f.write(r.content)"},{"prompt":"Create a selection loop in Python that prompts the user to select from a menu, and prints out the selected item. Menu Items: 1. Apple 2. Orange 3. Banana 4. Ex","completion":"def menu(): menu_items = { '1': 'Apple', '2': 'Orange', '3': 'Banana', '4': 'Exit' } print(\\"Menu Items:\\") print(\\"1. Apple\\") print(\\"2. Orange\\") print(\\"3. Banana\\") print(\\"4. Exit\\") while True: selection = input(\\"Enter your selection: \\") if selection in menu_items: if selection == '4': break else: print(\\"Selected item:\\", menu_items[selection]) break else: print(\\"Invalid selection!\\") menu()"},{"prompt":"Generate a Python function that takes a list of strings and returns a dictionary with each string as the key and the length of the string as the value. ['one', 'two', 'three', 'four']","completion":"def count_lengths(strings): return {string : len(string) for string in strings} strings = ['one', 'two', 'three', 'four'] print(count_lengths(strings)) # Output: {'one': 3, 'two': 3, 'three': 5, 'four': 4}"},{"prompt":"Build a model in Python to classify if a given input is a positive or negative sentiment","completion":"import numpy as np import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import accuracy_score # load and prepare the data data = pd.read_csv(\\"data.csv\\") # split into training and test datasets X_train, X_test, y_train, y_test = train_test_split(data['text'], data['sentiment'], test_size=0.3, random_state=42) # transform text into numbers tfidf = TfidfVectorizer(max_features=1000, stop_words='english') X_train_tfidf = tfidf.fit_transform(X_train) X_test_tfidf = tfidf.transform(X_test) # create and train the model model = MultinomialNB() model.fit(X_train_tfidf, y_train) # make predictions y_pred = model.predict(X_test_tfidf) # evaluate the model score = accuracy_score(y_test, y_pred) print(score)"},{"prompt":"Create a Python program to print all prime numbers between two given numbers. The function should take two numbers as input and print all the prime numbers between them. 2, 10","completion":"def print_primes(start, end): for i in range(start, end + 1): if is_prime(i): print(i) def is_prime(n): if n <= 1: return False if n == 2: return True if n > 2 and n % 2 == 0: return False for i in range(3, int(n ** 0.5) + 1, 2): if n % i == 0: return False return True print_primes(2, 10)"},{"prompt":"Generate a Python Class which takes one input 'name' and has two methods 'showName' and 'hideName'.","completion":"class Name: def __init__(self, name): self.name = name def showName(self): print(self.name) def hideName(self): self.name = '*****' print(self.name)"},{"prompt":"Write a code in Python to display a sorted array of the numbers in an array that are greater than the given value. [2, 4, 6, 8, 10, 12] Given number: 6","completion":"def sort_greater_numbers(arr, num): result = [x for x in arr if x > num] result.sort() return result"},{"prompt":"Create a Python program to search for an item in a list and return its index. [2, 3, 5, 7, 11], target = 5","completion":"def linear_search(list, target): for index, item in enumerate(list): if target == item: return index return -1 result = linear_search([2, 3, 5, 7, 11], 5) print(result)"},{"prompt":"Calculate the area of a circle using a Python program radius = 7","completion":"import math def areaOfCircle(radius): area = round(math.pi * (radius ** 2), 2) return area area = areaOfCircle(7) print(area)"},{"prompt":"Create a Django app to store and provide access to user data. Not applicable","completion":"# Create the project django-admin startproject myproject # Create the application cd myproject python manage.py startapp user_data # Add the app to installed apps # myproject/settings.py INSTALLED_APPS = [ 'user_data', ... ] # Create the models # user_data/models.py from django.db import models class User(models.Model): name = models.CharField(max_length=100) email = models.EmailField() class Data(models.Model): user = models.ForeignKey(User, on_delete=models.CASCADE) data = models.TextField() # Create the migrations python manage.py makemigrations python manage.py migrate # Create the views # user_data/views.py from django.shortcuts import render from .models import User, Data def index(request): users = User.objects.all() context = { 'users': users, } return render(request, 'user_data/index.html', context) def user_data(request, user_id): user = User.objects.get(id=user_id) data = Data.objects.filter(user=user) context = { 'user': user, 'data': data, } return render(request, 'user_data/user_data.html', context)"},{"prompt":"Optimize the following function by rewriting it in Python def double(number): return number * 2","completion":"def double(number: int) -> int: return number << 1"},{"prompt":"Create a Python class that holds information about a car.","completion":"class Car: def __init__(self, make, model, year): self.make = make self.model = model self.year = year def description(self): return f'This car is a {self.year} {self.make} {self.model}'"},{"prompt":"Write a Python program to compare two given strings and check if they are anagrams St1 = listen St2 = silent","completion":"from collections import Counter def is_anagram(str1, str2): # Convert both strings to lowercase str1 = str1.lower() str2 = str2.lower() # Remove all whitespaces str1 = str1.replace(\\" \\", \\"\\") str2 = str2.replace(\\" \\", \\"\\") # remove all special characters for char in \\"!'_,@#%^&*():;\\": str1 = str1.replace(char, '') str2 = str2.replace(char, '') # sort the character of both strings sorted_str1 = sorted(str1) sorted_str2 = sorted(str2) # Check if both strings are equal or not if(sorted_str1 == sorted_str2): return True else: return False # Driver program str1 = \\"listen\\" str2 = \\"silent\\" if is_anagram(str1, str2): print(\\"The strings are anagrams.\\") else: print(\\"The strings are not anagrams.\\")"},{"prompt":"Write a Python program to optimize a given set of stock prices to maximize the total profit. stock_prices=[10,7,5,8,11,9]","completion":"def max_profit(prices): n = len(prices) profit = [0]*n max_price = prices[n-1] Traverse from last element of Prices array for i in range(n-2, -1, -1): if (prices[i]> max_price): max_price = prices[i] profit[i] = max(profit[i+1], max_price-prices[i]) total_profit = profit[0] for i in range(1,n): if (profit[i] > total_profit): total_profit = profit[i] return total_profit # Driver code stock_prices = [10, 7, 5, 8, 11, 9] print(\\"Total profit:\\", max_profit(stock_prices))"},{"prompt":"Create a class in Python to optimize a set of parameters. import numpy as np # Sample data n_samples = 10 X = np.random.rand(n_samples, 3) y = np.arange(n_samples)","completion":"import numpy as np from scipy.optimize import minimize class ParamOptimizer: def __init__(self, X, y): self.X = X self.y = y def cost_function(self, x): return np.sum(np.reshape(x, (self.X.shape[1], -1)) * self.X - self.y) ** 2 def optimize(self): res = minimize(self.cost_function, np.zeros(self.X.shape[1])) return res.x"},{"prompt":"Generate a correct python program to accomplish the next objective Implement a function which takes two arrays and finds the element which is common to both of them.","completion":"def find_common_element(arr1, arr2): common_elements = [] for element1 in arr1: for element2 in arr2: if element1 == element2 and element1 not in common_elements: common_elements.append(element1) return common_elements"},{"prompt":"Write a web scraper in Python that is able to collect the top 5 news headlines from your local news website. Not applicable","completion":"import requests from bs4 import BeautifulSoup # We can use requests to get the webpage data webpage = requests.get('http://localnewwebsite.com') # Parse the HTML using BeautifulSoup soup = BeautifulSoup(webpage.content, 'html.parser') # Find the div containing the headlines headlines_div = soup.find('div', class_='headlines') # Find all the h2 elements within the headlines div headlines = headlines_div.find_all('h2') # Print the top 5 headlines for h in headlines[:5]: print (h.text)"},{"prompt":"Write an optimization algorithm in Python for a given set of points.","completion":"def optimize(arr): # Get the length of the list n = len(arr) # Initialize index variables max_len = 1 ending_index = 0 # Initialize temp index temp_index = 0 # If array of length is more than 1 if (n > 1): # Create a loop to find the longest sub sequence for i in range(1, n): # If previous value is less then the current value if (arr[temp_index] < arr[i]): # increment the max_len and temp_index max_len += 1 temp_index = i else: # If max_len is greater then previous max_len if (max_len > (i - ending_index)): # assign the ending_index and temp_index ending_index = temp_index temp_index = i # else assiging the max_len to its minimum value max_len = 1 return max_len"},{"prompt":"Write a Python program to print out all even numbers in a given range. 1, 10","completion":"def print_even_numbers(start, end): for i in range(start, end + 1): if i % 2 == 0: print(i) if __name__ == '__main__': print_even_numbers(1, 10) # Output 2 4 6 8 10"},{"prompt":"Create a Python program to generate Fibonacci sequence of a given length.","completion":"def generateFibo(length): fibo = [0, 1] for i in range(2, length): fibo.append(fibo[i-2] + fibo[i-1]) return fibo if __name__ == '__main__': print(generateFibo(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"prompt":"Rewrite the given SQL query to fetch the same results using Python. SELECT CustomerID, FirstName, LastName FROM Customers WHERE Country = 'Germany';","completion":"import sqlite3 conn = sqlite3.connect('database.db') cursor = conn.cursor() cursor.execute(\\"SELECT CustomerID, FirstName, LastName FROM Customers WHERE Country = 'Germany'\\") rows = cursor.fetchall() conn.close() # Output rows for row in rows: print(row[0], row[1], row[2])"},{"prompt":"Create a data structure in JavaScript to represent a directory structure.","completion":"const directoryStructure = { \\"root\\": { \\"Projects\\": { \\"Python\\": { \\"Scripts\\": { \\"script1.py\\": null, \\"script2.py\\": null } }, \\"JavaScript\\": { \\"Scripts\\": { \\"script1.js\\": null, \\"script2.js\\": null } } }, \\"Documents\\": { \\"paper1.pdf\\": null, \\"paper2.pdf\\": null } } };"},{"prompt":"Craft a Python script to reverse a string","completion":"def reverse_string(s): result = \\"\\" for i in range(len(s)-1, -1, -1): result += s[i] return result"},{"prompt":"Write a function in Python that counts the number of words in the given string. Example String: This is a sample string with some words","completion":"def word_count(str): words = str.split() return len(words) print(word_count(\\"This is a sample string with some words\\"))"},{"prompt":"mplement a Python method to encrypt a given string. text = Hello, World!","completion":"def encrypt(text): result = \\"\\" for i in range(len(text)): char = text[i] if (char.isupper()): result += chr((ord(char) + 7)) else: result += chr((ord(char) + 3)) return result text = \\"Hello, World!\\" print(encrypt(text))"},{"prompt":"Create a program in Python which will compute the sum of all the numbers in a range. Range: 1020","completion":"def sum_of_range(start, end): sum = 0 for i in range(start, end+1): sum += i return sum # Driver Code print(sum_of_range(10, 20))"},{"prompt":"Create a Python script to store and manipulate contact information.","completion":"# Create a dictionary to store contact info contacts = {} # Ask user to enter contact name name = input('Enter contact name: ') # Ask user to enter contact number number = input('Enter contact number: ') # Store contact in contacts dictionary contacts[name] = number # Print out contact info for contact, number in contacts.items(): print(f'{contact}: {number}')"},{"prompt":"Create a Python script to interact with a PostgreSQL database. The script should be able to add new entries to the database. Not applicable","completion":"import psycopg2 try: connection = psycopg2.connect( user = \\"postgres\\", password = \\"your_password\\", host = \\"localhost\\", port = \\"5432\\", database = \\"your_database\\" ) cursor = connection.cursor() postgreSQL_select_Query = \\"select * from table_name\\" cursor.execute(postgreSQL_select_Query) print(\\"Table Before inserting a record\\") records = cursor.fetchall() postgres_insert_query = \\"\\"\\" INSERT INTO table_name (column_1, column_2, colum_n) VALUES (%s,%s,%s)\\"\\"\\" record_to_insert = ('value1', 'value2', 'value3') cursor.execute(postgres_insert_query, record_to_insert) connection.commit() print(\\"Table After inserting a record\\") cursor.execute(postgreSQL_select_Query) records = cursor.fetchall() except (Exception, psycopg2.Error) as error : print (\\"Error while connecting to PostgreSQL\\", error) finally: if(connection): cursor.close() connection.close() print(\\"PostgreSQL connection is closed\\")"},{"prompt":"Write a Python program to generate a random password. The password should be 8 characters long and should contain at least one uppercase letter, one lowercase letter and one number. Not applicable","completion":"import random import string def get_password(): chars = string.ascii_letters + string.digits password = ''.join((random.choice(chars)) for i in range(8)) if (any(x.isupper() for x in password) and any(x.islower() for x in password) and any(x.isdigit() for x in password)): return password else: return get_password() password = get_password() print(password)"},{"prompt":"Write a Python utility to calculate the Fibonacci series up to a specified number. Length of the Fibonacci series : 5","completion":"def fibonacci(length): # Initialize the first two numbers a, b = 0, 1 # We generate the Fibonacci series # up to a given length res = [] while (len(res) < length): res.append(b) # Calculate the next Fibonacci number a, b = b, a + b # Return the generated Fibonacci series return res print(fibonacci(5)) # Output -> [1, 1, 2, 3, 5]"},{"prompt":"Create a Python program that prints out a multiplication table for any number.","completion":"def computeTable(num): # Print the header row print(\\" \\", end=\\"\\") for colNum in range(1, 11): print(f\\"{colNum:4}\\", end=\\"\\") print() # Print each row for rowNum in range(1, 11): print(f\\"{rowNum:3} \\", end=\\"\\") for colNum in range(1, 11): # Compute and print the product product = rowNum * colNum print(f\\"{product:4}\\", end=\\"\\") print() num = 6 computeTable(num)"},{"prompt":"Write a Python code to calculate the sum of two numbers. Number 1: 7 Number 2: 4","completion":"sum = 7 + 4 print(sum)"},{"prompt":"Create a function in Python that takes a list of strings and returns a dictionary where the key is the first character of each string and the value is a list of the strings starting with that character. [‘apple’, ‘elephant’, ‘ball’, ‘cat’]","completion":"def groupStrings(strings): # Initialize a dictionary dict = {} # Iterate over the list for string in strings: # Get the first character first_char = string[0] # Check if the first character is in the dictionary if first_char in dict: # Append the string to the existing list dict[first_char].append(string) else: # Create a list with the string dict[first_char] = [string] return dict result = groupStrings(['apple', 'elephant', 'ball', 'cat']) print(result) # {'a': ['apple'], 'e': ['elephant'], 'b': ['ball'], 'c': ['cat']}"},{"prompt":"Create a basic Python program to generate random numbers. The program should accept two numbers, a lower limit and a higher limit and should return a random number in the range of the two given numbers. lowerLimit=10 higherLimit=20","completion":"import random lowerLimit = int (input(\\"Enter lower limit: \\")) higherLimit = int (input(\\"Enter higher limit: \\")) if (lowerLimit > higherLimit): print(\\"Invalid range.\\") else: print(\\"Random number between\\", lowerLimit, \\"and\\", higherLimit, \\"is:\\", random.randint(lowerLimit, higherLimit))"},{"prompt":"Create a machine learning model in Python to classify emails into spam and nonspam categories.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB #Read the dataset data = pd.read_csv('YOUR_DATASET.csv') #Split dataset into train & test sets train_data, test_data = train_test_split(data,test_size=0.2) #Vectorizing the words in the dataset for training and testing vectorizer = CountVectorizer(stop_words = 'english',lowercase = True) # Creating a document-term matrix x_train = vectorizer.fit_transform(train_data['TEXT']) x_test = vectorizer.transform(test_data['TEXT']) #Creating the model nb_model = MultinomialNB() # Training the model nb_model.fit(x_train, train_data['Spam/Non-Spam']) # Predicting the outcomes of the test data predictions = nb_model.predict(x_test)"},{"prompt":"Write a Python script to parse a given string and construct a dictionary from its content. bio: John Smith, age: 32","completion":"def parse_string(s): info = s.split(\\", \\") result = {} for item in info: k, v = item.split(\\": \\") result[k] = v return result result = parse_string(\\"bio: John Smith, age: 32\\") print(result)"},{"prompt":"Write a python program that creates and prints a range of numbers. Start from 0, increment by 2 and end at 10","completion":"for number in range(0, 11, 2): print(number)"},{"prompt":"Create a Python API endpoint to search a database for a given item. Not applicable","completion":"@app.route('/search', methods=['POST']) def search(): req = request.get_json() search_term = req['search_term'] # Query your database here query_result = db.find_by_search_term(search_term) return jsonify({'result': query_result})"},{"prompt":"Using Python, create a program that predicts the price of a new car based on the make, model, year, and feature options of the car. make: Honda model: Odyssey year: 2020 features: V6 engine, navigation system","completion":"import pandas as pd # Load the dataset df = pd.read_csv('car-pricing-dataset.csv') # Create new row of data new_row = { 'make': 'Honda', 'model': 'Odyssey', 'year': 2020, 'features': 'V6 engine, navigation system', } # Vectorize data X = pd.get_dummies(df) X_row = pd.get_dummies(pd.DataFrame(new_row, index=[0])) # Train a model from sklearn.ensemble import RandomForestRegressor model = RandomForestRegressor(n_estimators=100) model.fit(X, df['price']) # Predict new row of data predicted_price = model.predict(X_row)[0] # Print result print(f'The estimated price of the {new_row[\\"year\\"]} {new_row[\\"make\\"]} {new_row[\\"model\\"]} {new_row[\\"features\\"]} is {predicted_price:.2f}.')"},{"prompt":"Write a Python program to implement a FIFO queue using the collections module.","completion":"from collections import deque class FIFOQueue: def __init__(self): self.queue = deque([]) def enqueue(self, item): self.queue.appendleft(item) def dequeue(self): if self.is_empty(): raise IndexError(\\"Cannot dequeue from an empty queue.\\") return self.queue.pop() def is_empty(self): return len(self.queue) == 0 def size(self): return len(self.queue)"},{"prompt":"Generate a Python script to generate n distinct prime numbers.","completion":"import math def generate_primes(n): primes = [] num = 2 while len(primes) < n: is_prime = True for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: is_prime = False break if is_prime: primes.append(num) num += 1 return primes n = 8 primes = generate_primes(n) print(primes)"},{"prompt":"Can you provide a Python code for extracting the first word from a sentence?","completion":"def extract_first_word(sentence): words = sentence.split() return words[0] sentence = \\"This is a sentence\\" first_word = extract_first_word(sentence) print(first_word)"},{"prompt":"Reconstruct the following Python function such that the output is reduced to one line. def calculate_sum(numbers): result = 0 for i in range(len(numbers)): result += numbers[i] return resul","completion":"def calculate_sum(numbers): return sum(numbers)"},{"prompt":"Write a code to perform a connected components analysis in Python","completion":"import networkx as nx def connected_components(graph): subgraphs = nx.connected_components(graph) components = [graph.subgraph(c).copy() for c in subgraphs] return components"},{"prompt":"Create a Python program to request data from an API and find the largest value in a given field. Not applicable","completion":"import requests url = 'https://example.com/api' response = requests.get(url) data = response.json() max_value = 0 for item in data: if item['field'] > max_value: max_value = item['field'] print('The largest value is:', max_value)"},{"prompt":"Write a Python function that takes two strings as input and checks if they are anagrams of each other. String 1: “listen” String 2: “silent”","completion":"def is_anagram(str1, str2): str1 = str1.lower() str2 = str2.lower() if len(str1) != len(str2): return False char_count = {} for c in str1: if c not in char_count: char_count[c] = 1 else: char_count[c] += 1 for c in str2: if c not in char_count: return False else: char_count[c] -= 1 for k in char_count: if char_count[k] != 0: return False return True print(is_anagram(\\"listen\\", \\"silent\\")) // True"},{"prompt":"Write a Python program to traverse a twodimensional array and print each row. [ [1, 2, 3], [4, 5, 6] ]","completion":"def traverse_2d_list(list2d): for row in list2d: print(row)"},{"prompt":"Rewrite a Python code snippet to take advantage of vectorization. # Compute list of squared values my_list = [1,2,3,4,5] out_list = [] for element in my_list: out_list.append(pow(element,2))","completion":"# Compute list of squared values using vectorization my_list = [1,2,3,4,5] out_list = [pow(element,2) for element in my_list]"},{"prompt":"Generate a python class which has two methods to convert a number to string and viceversa.","completion":"class NumStringConverter: def int_to_str(self, number): return str(number) def str_to_int(self, string): return int(string)"},{"prompt":"Build a program in Python for finding the largest prime number in a given range. 1100","completion":"def largest_prime(num): largest_prime = 0 for n in range (num): if(isPrime(n)): largest_prime = n return largest_prime def isPrime(n): if(n == 1): return False elif(n == 2): return True else: for x in range(2,n//2+1): if(n % x == 0): return False return True print(largest_prime(100))"},{"prompt":"Write a Python program to access an item of a list. list1 = [1, 2, 3, 4, 5] item_index = 3","completion":"list1 = [1, 2, 3, 4, 5] item_index = 3 def access_list_item(my_list, index): return my_list[index] result = access_list_item(list1, item_index) print(result)"},{"prompt":"Modify a Raspberry Pi Python program to implement GPIO pins and write to the console when a button is pressed. Not applicable","completion":"import RPi.GPIO as GPIO import time # Set GPIO mode GPIO.setmode(GPIO.BCM) # Set up GPIO pin GPIO.setup(18, GPIO.IN, pull_up_down = GPIO.PUD_UP) # Function that will run every time a button is pressed def buttonPressed(channel): print(\\"Button was pressed!\\") # Bind the button press to the function GPIO.add_event_detect(18, GPIO.FALLING, callback=buttonPressed, bouncetime=300) while True: time.sleep(1)"},{"prompt":"Generate a python function that finds the maximum occurring character in a given string. worldwide","completion":"\\"\\"\\" A function that finds the maximum occurring character in a given string. \\"\\"\\" def maxCharFinder(string): charDict = dict() for char in string: if char in charDict: charDict[char] += 1 else: charDict[char] = 1 maximumOccurChar = max(charDict, key=charDict.get) return maximumOccurChar if __name__ == '__main__': string = \\"worldwide\\" print(maxCharFinder(string))"},{"prompt":"Write a Python script for testing a sorting algorithm. The script should generate a randomly populated array of size 20 and compare the sorted outputs of the algorithm with Python's inbuilt sorting function. Not applicable","completion":"import random import unittest def sorting_algorithm(arr): # Insert sorting algorithm here return sorted_arr def test_sorting_algorithm(): test_arr = [random.randint(0, 100) for _ in range(20)] assert sorting_algorithm(test_arr) == sorted(test_arr) if __name__=='__main__': unittest.main()"},{"prompt":"Construct a dynamic programming program in Python to solve the knapsack problem. weights: [2, 2, 6, 5, 4] values: [6, 3, 5, 4, 6] capacity: 10","completion":"\\"\\"\\" Dynamic programming program in Python to solve the knapsack problem \\"\\"\\" def knapsack(weights, values, capacity): n = len(weights) K = [[0 for x in range(capacity+1)] for x in range(n+1)] # Build table K[][] in bottom up manner for i in range(n+1): for w in range(capacity+1): if i==0 or w==0: K[i][w] = 0 elif weights[i-1] <= w: K[i][w] = max(values[i-1] + K[i-1][w-weights[i-1]], K[i-1][w]) else: K[i][w] = K[i-1][w] # stores the result of Knapsack res = K[n][capacity] return res"},{"prompt":"Write a Python program for supervised learning that can predict the price of a house given some features of the house. Not applicable","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Read the dataset df = pd.read_csv('data.csv') # Split the dataset into features and labels X = df.drop('price',axis=1) y = df['price'] # Split the dataset into train and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Build the model model = LinearRegression() model.fit(X_train, y_train) # Evaluate the model test_score = model.score(X_test, y_test) print('Test Score:', test_score) # Make predictions y_pred = model.predict(X_test) # Print out some example predictions print('nSample Predictions') for i in range(10): print(f'Predicted Price: {y_pred[i]:.2f}, Actual Price: {y_test.values[i]}')"},{"prompt":"Compose a function in Python to check if a given number is a power of two. 10","completion":"def is_power_two(num): if num == 0: return False while num != 1: if num % 2 != 0: return False num = num // 2 return True"},{"prompt":"Can you create a program for web scraping using Python?","completion":"import requests from bs4 import BeautifulSoup # Send a request to the URL res = requests.get(\\"https://www.example.com\\") # Parse the response soup = BeautifulSoup(res.text, 'html.parser') # Extract the data data = soup.find_all('div')"},{"prompt":"Design a algorithm in Python that finds the number of occurrence of a character in a string String = This is a sample string Character = s","completion":"def count_occurrence(string, character): # Initializing the counter count = 0 # Traversing the string for i in range(len(string)): # Checking if character is the same if (string[i] == character): count += 1 # Returning the result return count # Testing the code if __name__ == \\"__main__\\": # Testing string string = 'This is a sample string' character = 's' # Printing the result print(\\"Number of occurrence of '\\", character, \\"' =\\", count_occurrence(string, character))"},{"prompt":"Convert the following algorithm into a recursive Python function def sum_digits(n): total = 0 while n > 0: digit = n % 10 total += digit n //= 10 return total","completion":"def sum_digits(n): \\"\\"\\" Calculates the sum of all digits of a number Args: n (int): The number Returns: int: The sum of the digits \\"\\"\\" if n == 0: return 0 return n % 10 + sum_digits(n // 10)"},{"prompt":"Create a Python script for a game of Rock, Paper, Scissors. This script should include a function that takes two inputs, determines who won, and prints out the result. Not applicable","completion":"import random def play_game(player1, player2): choices = ['rock', 'paper', 'scissors'] player1_choice = random.choice(choices) player2_choice = random.choice(choices) # If player 1 chooses rock if player1_choice == 'rock': # and player 2 chooses scissors, player 1 wins if player2_choice == 'scissors': print('Player 1 wins!') # and player 2 chooses paper, player 2 wins elif player2_choice == 'paper': print('Player 2 wins!') # otherwise it's a tie else: print('It's a tie!') # If player 1 chooses paper elif player1_choice == 'paper': # and player 2 chooses rock, player 1 wins if player2_choice == 'rock': print('Player 1 wins!') # and player 2 chooses scissors, player 2 wins elif player2_choice == 'scissors': print('Player 2 wins!') # otherwise it's a tie else: print('It's a tie!') # If player 1 chooses scissors elif player1_choice == 'scissors': # and player 2 chooses rock, player 2 wins if player2_choice == 'rock': print('Player 2 wins!') # and player 2 chooses paper, player 1 wins elif player2_choice == 'paper': print('Player 1 wins!') # otherwise it's a tie else: print('It's a tie!')"},{"prompt":"Write a Python code to compute the average of all numbers in a list. numbers = [2, 8, 4, 3]","completion":"def average(numbers): total = 0 for num in numbers: total += num return total / len(numbers)"},{"prompt":"Write a python program to generate a random password that is 8 characters long and contains at least 1 uppercase letter, 1 lowercase letter, and 1 number.","completion":"\\"\\"\\" Generate a random 8 character password that contain at least 1 uppercase letter, 1 lowercase letter and 1 number \\"\\"\\" import string import random def generate_password(): chars = string.ascii_letters + string.digits password = ''.join(random.sample(chars, 8)) upper_count = sum(1 for c in password if c.isupper()) lower_count = sum(1 for c in password if c.islower()) digit_count = sum(1 for c in password if c.isdigit()) while upper_count == 0 or lower_count == 0 or digit_count == 0: password = ''.join(random.sample(chars, 8)) upper_count = sum(1 for c in password if c.isupper()) lower_count = sum(1 for c in password if c.islower()) digit_count = sum(1 for c in password if c.isdigit()) return password if __name__ == '__main__': print(generate_password())"},{"prompt":"Develop a Python program to insert a given element into a specific position in a list 2, [1, 3, 4]","completion":"# Create a function def insert_element(el, lst): # Insert the element into the specific position lst.insert(2, el) return lst # Test the function print(insert_element(2, [1,3,4])) # Output [1, 3, 2, 4]"},{"prompt":"Construct a Python program to convert a list of strings to a single string, and separate the string elements with a ',' character. list = [test, string]","completion":"def list_to_string(list): return \\",\\".join(list) list = [\\"test\\",\\"string\\"] print(list_to_string(list))"},{"prompt":"The given code is a Python module for implementing Google reCAPTCHA. To use it, import the necessary modules and functions, and then call the functions as needed. To display the reCAPTCHA HTML, call the displayhtml function and pass in the public key and any optional parameters. To submit the reCAPTCHA response for verification, call the submit function and pass in the necessary parameters. To check the reCAPTCHA response in a Django view, call the check_captcha function and pass in the request object. To generate new reCAPTCHA HTML based on the result of the verification, call the new_captcha_html function and pass in the result object.","completion":"import urllib2, urllib from proj.settings import * API_SSL_SERVER=\\"https://www.google.com/recaptcha/api\\" API_SERVER=\\"http://www.google.com/recaptcha/api\\" VERIFY_SERVER=\\"www.google.com\\" class RecaptchaResponse(object): def __init__(self, is_valid, error_code=None): self.is_valid = is_valid self.error_code = error_code def displayhtml (public_key, use_ssl = False, error = None): \\"\\"\\"Gets the HTML to display for reCAPTCHA public_key -- The public api key use_ssl -- Should the request be sent over ssl? error -- An error message to display (from RecaptchaResponse.error_code)\\"\\"\\" error_param = '' if error: error_param = '&error=%s' % error if use_ssl: server = API_SSL_SERVER else: server = API_SERVER return \\"\\"\\"<script type=\\"text/javascript\\" src=\\"%(ApiServer)s/challenge?k=%(PublicKey)s%(ErrorParam)s\\"><\/script> <noscript> <iframe src=\\"%(ApiServer)s/noscript?k=%(PublicKey)s%(ErrorParam)s\\" height=\\"300\\" width=\\"500\\" frameborder=\\"0\\"></iframe><br /> <textarea name=\\"recaptcha_challenge_field\\" rows=\\"3\\" cols=\\"40\\"></textarea> <input type='hidden' name='recaptcha_response_field' value='manual_challenge' /> </noscript> \\"\\"\\" % { 'ApiServer' : server, 'PublicKey' : public_key, 'ErrorParam' : error_param, } def submit (recaptcha_challenge_field, recaptcha_response_field, private_key, remoteip): \\"\\"\\" Submits a reCAPTCHA request for verification. Returns RecaptchaResponse for the request recaptcha_challenge_field -- The value of recaptcha_challenge_field from the form recaptcha_response_field -- The value of recaptcha_response_field from the form private_key -- your reCAPTCHA private key remoteip -- the user's ip address \\"\\"\\" if not (recaptcha_response_field and recaptcha_challenge_field and len (recaptcha_response_field) and len (recaptcha_challenge_field)): return RecaptchaResponse (is_valid = False, error_code = 'incorrect-captcha-sol') def encode_if_necessary(s): if isinstance(s, unicode): return s.encode('utf-8') return s params = urllib.urlencode ({ 'privatekey': encode_if_necessary(private_key), 'remoteip' : encode_if_necessary(remoteip), 'challenge': encode_if_necessary(recaptcha_challenge_field), 'response' : encode_if_necessary(recaptcha_response_field), }) request = urllib2.Request ( url = \\"http://%s/recaptcha/api/verify\\" % VERIFY_SERVER, data = params, headers = { \\"Content-type\\": \\"application/x-www-form-urlencoded\\", \\"User-agent\\": \\"reCAPTCHA Python\\" } ) httpresp = urllib2.urlopen (request) return_values = httpresp.read ().splitlines (); httpresp.close(); return_code = return_values [0] if (return_code == \\"true\\"): return RecaptchaResponse (is_valid=True) else: return RecaptchaResponse (is_valid=False, error_code = return_values [1]) def check_captcha(request): captcha_challenge = request.POST.get('recaptcha_challenge_field') captcha_response = request.POST.get('recaptcha_response_field') captcha_result = None ip = None if 'HTTP_X_FORWARDED_FOR' in request.META: ip = request.META['HTTP_X_FORWARDED_FOR'] elif 'REMOTE_ADDR' in request.META: ip = request.META['REMOTE_ADDR'] if captcha_response is not None and captcha_challenge is not None: captcha_result = submit(captcha_challenge, captcha_response, recaptcha_private_key, ip) return captcha_result def new_captcha_html(captcha_result): if captcha_result is None: captcha_html = displayhtml(recaptcha_public_key, use_ssl=True) else: captcha_html = displayhtml(recaptcha_public_key, use_ssl=True, error = captcha_result.error_code) return captcha_html"},{"prompt":"Create a program in Python that generates a random password given the length of the password and a set of characters. Length = 8 Characters = numbers, lowercase, uppercase","completion":"import random def generate_password(length, characters): password = \\"\\" for _ in range(length): character_index = random.randint(0, len(characters) - 1) password += characters[character_index] return password characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' password = generate_password(8, characters)"},{"prompt":"Create a web crawler in Python to scrape news articles from a given website. Bonus points if you can add support for pagination. Not applicable","completion":"# a web crawler in Python to scrape news articles from a given website # imports import requests from bs4 import BeautifulSoup # the URL of the website url = 'https://example.com' # a list to store the articles articles = [] # a function to scrape the articles def scrape_articles(url): # request the HTML page response = requests.get(url) # parse the HTML html = BeautifulSoup(response.text, 'html.parser') # find the articles article_elements = html.find_all('article') # loop over article elements for article_element in article_elements: # extract the title title = article_element.find('h2').text # extract the content content = article_element.find('p').text # create a dictionary to store the article article = { 'title': title, 'content': content } # add the article to the list articles.append(article) # scrape the first page scrape_articles(url) # check if the page has a next page next_page_element = html.find('a', {'title': 'Next page'}) # loop until there are no more pages while next_page_element: # get the link of the next page next_page_url = next_page_element['href'] # scrape the next page scrape_articles(next_page_url) # get the next page element next_page_element = html.find('a', {'title': 'Next page'}) # print the articles for article in articles: print(article)"},{"prompt":"Create a Python script to connect to a database and fetch the details of a particular table.","completion":"import mysql.connector # establish a database connection mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"user\\", password=\\"password\\", database=\\"database\\" ) # create a cursor object cursor = mydb.cursor() # execute the SQL query cursor.execute(\\"SELECT * FROM table\\") # fetch the rows from the cursor object rows = cursor.fetchall() # print all the details for row in rows: print(row)"},{"prompt":"Develop a Python code to print the pairs of the numbers in the given list which adds up to the given target number. [1, 5, 9, 4], 10","completion":"def pairs_adding_to_target(nums, target): result = [] for i in range(0, len(nums)): for j in range(i+1, len(nums)) : if nums[i] + nums[j] == target: result.append([nums[i], nums[j]]) return result result = pairs_adding_to_target([1, 5, 9, 4], 10) print(result)"},{"prompt":"Generate a predict function in Python to predict the net price of a car given its features such as price, make, model, age, etc. The following data, Price: 15000 Make: Ford Model: Focus Age: 5 Distance: 20,000","completion":"import numpy as np from sklearn.linear_model import LinearRegression features = [[15000, 'Ford', 'Focus', 5, 20000]] model = LinearRegression() # Train the model with the given data model.fit(features, [14500]) # Define the predict function def predict(price, make, model, age, distance): inputs = [[price, make, model, age, distance]] return model.predict(inputs)[0] net_price = predict(15000, 'Ford', 'Focus', 5, 20000) print(net_price) #14500"},{"prompt":"Write a Python program to convert the list of characters ['a', 'b', 'c', 'd'] into a string of the form abcd.","completion":"def list_to_string(lst): return '-'.join(lst) result = list_to_string(['a', 'b', 'c', 'd']) print(result) # 'a-b-c-d'"},{"prompt":"Create a forloop in Python to print a list of strings that contain only the vowels from a given list of strings. words = [apple, bear, cat, dog]","completion":"for word in words: vowels = \\"\\" for x in word: if x in ('a', 'e', 'i', 'o', 'u'): vowels += x print(vowels)"},{"prompt":"Write a function in Python to remove the last element from a given array. [1, 6, 7, 3, 4]","completion":"def remove_last_element(arr): return arr[:-1]"},{"prompt":"Create a Python class to represent a car object with the attributes make, model and price, and a method to print out all the information about the car. Car: Fiat 500 Price: 10,00 USD","completion":"class Car(): def __init__(self, make, model, price): self.make = make self.model = model self.price = price def print_info(self): print(f\\"This car is a {self.make} {self.model} and it costs {self.price}.\\") if __name__ == '__main__': my_car = Car('Fiat', '500', '10,00 USD') my_car.print_info()"},{"prompt":"Create a Python script that uses Gaussian Mixture Models to classify online reviews of a movie into two sets positive and negative reviews. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.mixture import GaussianMixture from sklearn.preprocessing import LabelEncoder #Read the data df = pd.read_csv('data.csv') #Transform the reviews into numerical values le = LabelEncoder() df['review'] = le.fit_transform(df['review']) X = np.array(df.drop(['polarity'], axis=1)) y = np.array(df['polarity']) #Train the model gmm = GaussianMixture(n_components=2) gmm.fit(X) #Predict the labels labels = gmm.predict(X) #Evaluate the accuracy accuracy = np.mean(labels==y) print('Classification accuracy: {:.2f}'.format(accuracy))"},{"prompt":"Write a function to generate a random MAC address in Python.","completion":"import random import string def gen_mac_address(): \\"\\"\\"Generates a random MAC address\\"\\"\\" mac = [ 0x00, 0x24, 0x81, random.randint(0x00, 0x7f), random.randint(0x00, 0xff), random.randint(0x00, 0xff) ] return ':'.join(map(lambda x: \\"%02x\\" % x, mac)) print(gen_mac_address())"},{"prompt":"Write a Python program to generate a fibonacci series until the total count reaches 50. Not applicable","completion":"def fibonacci_series(num) : num1, num2 = 0, 1 count = 0 while count < num : print(num1) nth = num1 + num2 num1 = num2 num2 = nth count += 1 # fibonacci series until count reaches 50 fibonacci_series(50)"},{"prompt":"Generate a Python program that takes a date as input and returns the day of the week as a string (i.e. Sunday, Monday, etc.). 3/22/2021","completion":"import datetime def get_weekday(date_string): date = datetime.datetime.strptime(date_string, '%m/%d/%Y') return date.strftime('%A') weekday = get_weekday('3/22/2021') print(weekday)"},{"prompt":"Create a list of all prime numbers from 1 to 1000 using Python.","completion":"# Create an empty list prime_list = [] # loop 1 to 1000 for num in range(2,1001): prime = True for i in range(2,num): if (num % i == 0): prime = False if prime: prime_list.append(num) print(\\"Prime numbers from 1 to 1000 are:\\") print(prime_list)"},{"prompt":"Design a python class for a person object.","completion":"class Person: def __init__(self, first_name, last_name, age, gender): self.first_name = first_name self.last_name = last_name self.age = age self.gender = gender def get_name(self): return f\\"{self.first_name} {self.last_name}\\" def get_age(self): return self.age def get_gender(self): return self.gender"},{"prompt":"Create an AI model in Python to predict restaurant ratings from customer reviews. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.preprocessing import LabelEncoder from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.feature_extraction.text import CountVectorizer # Read in dataset df = pd.read_csv('restaurant_reviews.csv') # Label Encode Ratings encoder = LabelEncoder() df['rating_enc'] = encoder.fit_transform(df['rating']) # Train Test Split X_train, X_test, y_train, y_test = train_test_split(df['review'], df['rating_enc'], test_size=0.25) # Count Vectorize the Reviews vectorizer = CountVectorizer() X_train_vect = vectorizer.fit_transform(X_train) X_test_vect = vectorizer.transform(X_test) # Train the Logistic Regression Model classifier = LogisticRegression(C=1e9, random_state=42) classifier.fit(X_train_vect, y_train) # Get the Predictions predictions = classifier.predict(X_test_vect)"},{"prompt":"Create a Python class that identifies if a number is a multiple of five.","completion":"class MultipleOfFive: def __init__(self, number): self.number = number def is_multiple_of_five(self): return self.number % 5 == 0"},{"prompt":"Create a function in Python for finding the maximum of two numbers.","completion":"def max_of_two_numbers(x, y): if x > y: larger_number = x else: larger_number = y return larger_number"},{"prompt":"Write a function in Python to render a table in ASCII with 4 columns and 3 rows.","completion":"def render_ascii_table(columns, rows): col_width = 10 # Create array of column labels header_row = [('{:^' + str(col_width) + '}').format(label) for label in columns] # Create divider row divider_row = ['-' * col_width] * len(columns) # Create row of data data_rows = [[('{:^' + str(col_width) + '}').format(data) for data in row] for row in rows] # Create table table = [header_row] + [divider_row] + data_rows # Render table for row in table: print('|'.join(row)) render_ascii_table(['col1', 'col2', 'col3', 'col4'], [ ['data1', 'data2', 'data3', 'data4'], ['data5', 'data6', 'data7', 'data8'], ['data9', 'data10', 'data11', 'data12'] ])"},{"prompt":"Generate a function in Python to return the highest value in a dictionary for the given key. dictionary = {'A': 10, 'B': 20, 'C': 30, 'D': 40}","completion":"def highestValue(dictionary, key): highest = 0 for key,value in dictionary.items(): if value > highest: highest = value return highest highestValue(dictionary, key)"},{"prompt":"Write a loop to multiply all the numbers from 1 to 5 in Python. Not applicable","completion":"multiply = 1 for x in range(1,6): multiply = multiply * x print(multiply)"},{"prompt":"Create a Python calculation that finds the minimum number of moves to solve the tower of hanoi. Not applicable","completion":"def hanoi(n, source, helper, target): if n > 0: # Move tower of size n - 1 to helper: hanoi(n - 1, source, target, helper) # Move disk from source peg to target peg if source[0]: disk = source[0].pop() print(\\"moving \\" + str(disk) + \\" from \\" + source[1] + \\" to \\" + target[1]) target[0].append(disk) # Move tower of size n-1 from helper to target hanoi(n - 1, helper, source, target) # source = (stack, name) source = ([3,2,1], \\"A\\") target = ([], \\"C\\") helper = ([], \\"B\\") hanoi(len(source[0]),source,helper,target)"},{"prompt":"Develop a Python program to compare two given lists and remove any duplicate elements from the list.","completion":"def remove_duplicates(list1, list2): # Merge two lists into a single list combined_list = list1 + list2 # Create a new empty list new_list = [] # Iterate over the combined list for element in combined_list: # If element is not present in new_list if element not in new_list: new_list.append(element) return new_list # Main Program list1 = [11, 7, 10, 2, 4] list2 = [10, 5, 8, 11] new_list = remove_duplicates(list1, list2) print(\\"The resulting list is: \\", new_list)"},{"prompt":"Write a Python program to convert a given integer to binary representation. 30","completion":"def int_to_bin(int_num): bin_str = bin(int_num) return bin_str[2:] int_num = 30 bin_num = int_to_bin(int_num) print(bin_num) # 11110"},{"prompt":"Create a Python class called Person with fields for name and age. The class should also include an initialization function and a method to say hello. Not applicable","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age def say_hello(self): print('Hello, my name is {} and I am {} years old'.format(self.name, self.age))"},{"prompt":"Write a Python script to calculate the sum of the elements of a list. [1, 2, 3, 4, 5]","completion":"nums = [1, 2, 3, 4, 5] sum_val = 0 for n in nums: sum_val += n print(f\\"Sum of the elements in the list: {sum_val}\\")"},{"prompt":"Write a Python program to do data classification.","completion":"from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier def classify_data(dataset): X, y = dataset.data, dataset.target X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) knn = KNeighborsClassifier(n_neighbors=3) knn.fit(X_train, y_train) print(\\"Accuracy of K-NN: {}\\".format(knn.score(X_test, y_test)))"},{"prompt":"Construct a Python code to combine the elements of two given list and return a sorted union list. input_list_1: [4, 10, 2] input_list_2: [10, 2, 15]","completion":"def union_list(list1, list2): list3 = list1 + list2 list3.sort() return list3 union_list(input_list_1, input_list_2)"},{"prompt":"Create a python script that evaluates a binary expression. Expr: 1 + 0","completion":"def evalBinaryExpr(expr): return eval(expr) print(evalBinaryExpr(\\"1 + 0\\"))"},{"prompt":"Create an algorithm in Python for removing duplicates from an array of integers. [1, 2, 4, 5, 6, 2, 7, 4]","completion":"def remove_duplicates(arr): s = set() result = [] for i in arr: if i not in s: s.add(i) result.append(i) return result arr = [1, 2, 4, 5, 6, 2, 7, 4] print(remove_duplicates(arr)) # Output: [1, 2, 4, 5, 6, 7]"},{"prompt":"Write a Python program to remove duplicates from a list of strings. The program should maintain the order of the strings in the list. ['abc', 'def', 'abc', 'ghi', 'ghi', 'ghi', 'xyz']","completion":"def remove_duplicates(list_strings): # Create an empty list to store unique strings unique_strings = [] # Iterate over the list for string in list_strings: # Append string to unique_strings if it is not already present if string not in unique_strings: unique_strings.append(string) return unique_strings list_strings = ['abc', 'def', 'abc', 'ghi', 'ghi', 'ghi', 'xyz'] print(remove_duplicates(list_strings))"},{"prompt":"Create a Python program that prints a number sequence of the Fibonacci series up to 15.","completion":"def fibonacci(n): a, b = 0, 1 while a < n: print(a, end=' ') a, b = b, a+b print() fibonacci(15)"},{"prompt":"Create an algorithm in Python to calculate the prime factors of an integer number.","completion":"def primeFactors(n): pf = [] i = 2 while i * i <= n: if n % i: i += 1 else: n //= i pf.append(i) if n > 1: pf.append(n) return pf"},{"prompt":"Generate a Python program to calculate the most common value in a list ['a', 'a', 'b', 'd', 'e', 'a']","completion":"def most_common(list): dict = {} for item in list: dict[item] = dict.get(item,0) + 1 max_count = 0 max_item = list[0] for k,v in dict.items(): if v > max_count: max_count = v max_item = k return max_item list = ['a', 'a', 'b', 'd', 'e', 'a'] result = most_common(list) print(result)"},{"prompt":"Generate a Python function that takes a string and returns the longest substring without repeating characters.","completion":"def longestSubstringWithoutRepeatingCharacters(string): longest = \\"\\" current = \\"\\" for c in string: if c not in current: current += c else: if len(current) > len(longest): longest = current current = c if len(current) > len(longest): longest = current return longest"},{"prompt":"Given the following code snippet, create a function in Python that takes two strings and returns true if one string is a substring of the other. s1 = 'Hello World' s2 = 'World'","completion":"def is_substring(s1, s2): # check for empty strings if s1 == '' or s2 == '': return False # check if s2 is a substring of s1 if s1.find(s2) > -1: return True return False"},{"prompt":"Write a Python program to optimize the following code such that it runs faster. xx = [4, 4, 2, 2] s = 0 for i in xx: if i > 0: s +=","completion":"xx = [4, -4, 2, -2] s = 0 for i in xx: s += max(i, 0) if __name__ == \\"__main__\\": xx = [4, -4, 2, -2] s = 0 for i in xx: s += max(i, 0) print(s) # Output: 6"},{"prompt":"Create a Python class for a Student with fields for name and age.","completion":"class Student: def __init__(self, name, age): self.name = name self.age = age"},{"prompt":"Develop a classifier in Python that can distinguish between mathematical sentences and scientific sentences. [The derivative of x^2 is 2x., Water is a molecule composed of two hydrogen atoms and one oxygen atom.]","completion":"import numpy as np from sklearn.feature_extraction.text import CountVectorizer sentences = [\\"The derivative of x^2 is 2x.\\", \\"Water is a molecule composed of two hydrogen atoms and one oxygen atom.\\"] labels = [1, 0] # Instantiate CountVectorizer vectorizer = CountVectorizer() # Fit the vectorizer to the data vectorizer.fit(sentences) # Create a vector from the data X = vectorizer.transform(sentences).toarray() y = np.asarray(labels) # Import the classifier from sklearn.naive_bayes import MultinomialNB # Instantiate and fit the classifier classifier = MultinomialNB() classifier.fit(X, y) # Predict a sentence sentence = \\"The derivative of x^2 is 2x.\\" vector = vectorizer.transform([sentence]).toarray() prediction = classifier.predict(vector) # Print the prediction print(\\"Prediction:\\", prediction[0])"},{"prompt":"Generate a module for sending emails with Python.","completion":"\\"\\"\\" Module for sending emails with Python \\"\\"\\" import smtplib from email.mime.multipart import MIMEMultipart from email.mime.text import MIMEText def send_email(sender, recipients, subject, body): message = MIMEMultipart() message['From'] = sender message['To'] = ', '.join(recipients) message['Subject'] = subject message.attach(MIMEText(body, 'plain')) smtp_server = smtplib.SMTP('smtp.example.com') smtp_server.starttls() smtp_server.login('username', 'password') smtp_server.send_message(message) smtp_server.quit()"},{"prompt":"Design a web API in Python that adds two numbers from the query parameter.","completion":"from flask import Flask, jsonify app = Flask(__name__) @app.route(\\"/add\\", methods=[\\"GET\\"]) def add_numbers(): a = request.args.get(\\"a\\") b = request.args.get(\\"b\\") result = int(a) + int(b) return jsonify(result)"},{"prompt":"Write a web API in Python that has a single endpoint and provides the current time when it's called Not applicable","completion":"import datetime from flask import Flask, jsonify app = Flask(__name__) @app.route('/time') def get_current_time(): now = datetime.datetime.now() current_time = { 'datetime': now.strftime(\\"%m-%d-%Y %H:%M:%S\\"), 'h': now.hour, 'm': now.minute, 's': now.second } return jsonify(current_time) if __name__ == '__main__': app.run()"},{"prompt":"Design a python oracle for evaluating an arithmetic expression when an undefined variable is encountered. Expression: 3 * x + 4","completion":"def evaluate_with_oracle(expression, oracle): # List of all possible valid operations operator_operand_tuple = { \\"+\\": lambda x, y: x + y, \\"-\\": lambda x, y: x - y, \\"*\\": lambda x, y: x * y, \\"/\\": lambda x, y: x / y } expression_stack = [] operations_stack = [] for item in expression.split(' '): try: expression_stack.append(float(item)) except ValueError: # If the item is not a number then it must be operator operations_stack.append(operator_operand_tuple[item]) if item == 'x': expression_stack.append(oracle()) while operations_stack: # Retrive the last operator and its operands operator = operations_stack.pop() op1 = expression_stack.pop() op2 = expression_stack.pop() expression_stack.append(operator(op1, op2)) return expression_stack[0]"},{"prompt":"Create a Python program to find the most frequent item in a list. [1, 3, 1, 3, 2, 1]","completion":"def most_frequent(list): counter = 0 num = list[0] for i in list: curr_frequency = list.count(i) if(curr_frequency> counter): counter = curr_frequency num = i return num list = [1, 3, 1, 3, 2, 1] print(most_frequent(list))"},{"prompt":"Rewrite the code in Python to improve its readability. import math def area(r): return math.pi*r**2","completion":"import math def calculate_area(radius): return math.pi * (radius ** 2)"},{"prompt":"Construct a Python program that reads 10 numbers and returns the average.","completion":"def avg_of_10_numbers(): numbers = [] for i in range(0, 10): num = float(input(\\"Enter number: \\")) numbers.append(num) avg = sum(numbers) / len(numbers) return avg print(avg_of_10_numbers())"},{"prompt":"Create a CNN classifier in Python using Keras that can classify the MNIST dataset. Not applicable","completion":"import keras from keras.datasets import mnist from keras.models import Sequential from keras.layers import Dense, Dropout, Flatten from keras.layers import Conv2D, MaxPooling2D from keras import backend as K # Set image dimensions img_rows, img_cols = 28, 28 # Load data (X_train, y_train), (X_test, y_test) = mnist.load_data() # Reshape data if K.image_data_format() == 'channels_first': X_train = X_train.reshape(X_train.shape[0], 1, img_rows, img_cols) X_test = X_test.reshape(X_test.shape[0], 1, img_rows, img_cols) inpx_shape = (1, img_rows, img_cols) else: X_train = X_train.reshape(X_train.shape[0], img_rows, img_cols, 1) X_test = X_test.reshape(X_test.shape[0], img_rows, img_cols, 1) inpx_shape = (img_rows, img_cols, 1) # Normalize data X_train = X_train.astype('float32') X_test = X_test.astype('float32') X_train /= 255 X_test /= 255 # Number of catogries num_catogries = 10 # Create neuron network model = Sequential() model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=inpx_shape)) model.add(MaxPooling2D(pool_size=(2, 2))) model.add(Dropout(0.25)) model.add(Flatten()) model.add(Dense(128, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(num_catogries, activation='softmax')) # Compile model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adadelta(), metrics=['accuracy']) # Fit data model.fit(X_train, y_train, batch_size=256, epochs=4, verbose=1, validation_data=(X_test, y_test)) # Evaluate score = model.evaluate(X_test, y_test, verbose=0) print('Test loss:', score[0]) print('Test accuracy:', score[1])"},{"prompt":"Write a Python function to classify a dataset into its different categories.","completion":"def classify_data(data): labels = [] for d in data: labels.append(d[-1]) unique_labels = set(labels) classification = {label: [] for label in unique_labels} for d in data: classification[d[-1]].append(d[:-1]) return classification"},{"prompt":"Write a Python program to evaluate a mathematical expression given as string. 2 + 3 * 5","completion":"expression = \\"2 + 3 * 5\\" result = eval(expression) print(result)"},{"prompt":"Write a commmandline script that sums all numbers from 0 to N where N is provided as input. N = 10","completion":"# python code import sys input_val = int(sys.argv[1]) sum = 0 for i in range(input_val + 1): sum += i print(\\"Sum from 0 to {} is = {}\\".format(input_val, sum))"},{"prompt":"Create a python program to create a dictionary with keyvalue pairs using two lists keys = [a, b, c] values = [1, 2, 3]","completion":"keys = [\\"a\\", \\"b\\", \\"c\\"] values = [1, 2, 3] d = dict(zip(keys, values)) print(d) # output: {'a': 1, 'b': 2, 'c': 3}"},{"prompt":"Rewrite the following Python code using list comprehensions. def divisible(x): out = [] for i in range(1, x): if (i % 3 == 0) or (i % 5 == 0): out.append(i) return ou","completion":"def divisible(x): return [i for i in range(1, x) if (i % 3 == 0) or (i % 5 == 0)]"},{"prompt":"Modify a Python program to accept input from a user. def printMessage(): print(Hello World!)","completion":"def printMessage(): message = input(\\"Type your message here: \\") print(message)"},{"prompt":"Generate a linear regression program for Python This program should return the coefficient of determination (R2) of a linear regression model.","completion":"import numpy as np def calculateR2(x, y): # Calculate the mean of x and y vectors x_mean = np.mean(x) y_mean = np.mean(y) # Calculate the sums SS_tot = np.sum((y - y_mean)**2) SS_res = np.sum((y - x)**2) # Calculate R2 r2 = 1 - (SS_res / SS_tot) return r2"},{"prompt":"Design a computer vision program in Python that can recognize handwritten digits. Example dataset of 28 x 28 pixel images of handwritten digits (09).","completion":"import tensorflow as tf from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense, Flatten, Conv2D from tensorflow.keras.preprocessing.image import ImageDataGenerator # Initializing the image data generator image_generator = ImageDataGenerator(rescale=1./255) data_gen = image_generator.flow_from_directory(directory='data', target_size=(28, 28), color_mode='grayscale', batch_size=128 ) # Building the model model = Sequential([ Conv2D(16, 3, padding='same',activation='relu', input_shape=(28, 28 ,1)), MaxPooling2D(), Flatten(), Dense(128, activation='relu'), Dense(10) ]) # Compiling the model model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy']) # Training the model model.fit( data_gen, steps_per_epoch=10, epochs=5 ) # Testing the model test_loss, test_acc = model.evaluate(data_gen, steps=5) print('Test accuracy:', test_acc)"},{"prompt":"Generate a procedure in the form of a Python script to automate the process of downloading a list of websites. website_list: [www.example.com, www.google.com, www.facebook.com]","completion":"import requests for website in website_list: response = requests.get(website) with open(website.split('.')[0]+'.html', 'wb') as file: file.write(response.content)"},{"prompt":"Create a program in Python to normalize a given input string. input_string = david_Xq3r5","completion":"import re def normalize_string(input_string): convert to lowercase normalized_string = input_string.lower() remove special characters normalized_string = re.sub(\\"[^a-z0-9]\\", \\"\\", normalized_string) return the normalized string return normalized_string normalized_string = normalize_string(input_string) print(normalized_string) # davidxq35"},{"prompt":"Create a basic GUI in Python using Tkinter. The GUI should have a button and a label. When the button is pressed, it should change the label text. Not applicable","completion":"import tkinter as tk class App(tk.Tk): def __init__(self): super().__init__() self.btn = tk.Button(self, text=\\"Press me\\", command=self.on_press) self.btn.pack() self.label = tk.Label(self, text=\\"\\") self.label.pack() def on_press(self): self.label.configure(text=\\"You pressed the button!\\") if __name__ == '__main__': App().mainloop()"},{"prompt":"Write a python program to verify if the given DNA strand is a palindrome or not.","completion":"def is_palindrome_dna(dna): # Step 1: Extract the complementary strand by replacing each nucleotide with its complement in the strand complement = \\"\\" for letter in dna: if letter == 'A': complement += 'T' elif letter == 'C': complement += 'G' elif letter == 'G': complement += 'C' elif letter == 'T': complement += 'A' else: print(\\"Invalid nucleotide detected\\") # Step 2: Reverse the strand and compare it to its complementary strand reverse = complement[::-1] return reverse == dna print(is_palindrome_dna(\\"ATGCTATCG\\")) # prints True"},{"prompt":"Design a Python program that finds the most common elements in a list list = [1,2,3,4,4,4,5,5,6,6,6]","completion":"from collections import Counter def most_common(list): counter = Counter(list) most_occur = counter.most_common(1)[0][0] return most_occur print(most_common(list))"},{"prompt":"Convert the following basic Python code into its equivalent JavaScript code. for i in range(1, 5): print(i)","completion":"for(let i = 1; i < 5; i++){ console.log(i); }"},{"prompt":"Create a Python program to generate a numpy array containing dates of the upcoming 50 days from today. Not applicable","completion":"import numpy as np from datetime import datetime, timedelta # define start (today) and end (50 days from today) date start_date = datetime.today() end_date = start_date + timedelta(days=50) # generate numpy array of dates between the dates defined above dates = np.arange(start_date, end_date).astype('datetime64[D]') print(dates) # Output: array(['2021-05-17', '2021-05-18', '2021-05-19', '2021-05-20', '2021-05-21', '2021-05-22', '2021-05-23', '2021-05-24', '2021-05-25', '2021-05-26', '2021-05-27', '2021-05-28', '2021-05-29', '2021-05-30', '2021-05-31', '2021-06-01', '2021-06-02', '2021-06-03', '2021-06-04', '2021-06-05', '2021-06-06', '2021-06-07', '2021-06-08', '2021-06-09', '2021-06-10', '2021-06-11', '2021-06-12', '2021-06-13', '2021-06-14', '2021-06-15', '2021-06-16', '2021-06-17', '2021-06-18', '2021-06-19', '2021-06-20', '2021-06-21', '2021-06-22', '2021-06-23', '2021-06-24', '2021-06-25', '2021-06-26', '2021-06-27', '2021-06-28', '2021-06-29', '2021-06-30', '2021-07-01', '2021-07-02', '2021-07-03', '2021-07-04', '2021-07-05', '2021-07-06', '2021-07-07', '2021-07-08', '2021-07-09', '2021-07-10'], dtype='datetime64[D]')"},{"prompt":"Given a value for the parameter numRows and a Python list of lists as input data, write a Python program that prints out a valid HTML table. numRows: 3 Data: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"numRows = 3 data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] print('<table border=\\"1\\">') for i in range(numRows): print('<tr>') for j in range(len(data[i])): print('<td>' + str(data[i][j]) + '</td>') print('</tr>') print('</table>')"},{"prompt":"Create an endpoint in Python for handling an API request for getting data from a database. Not applicable","completion":"from flask import Flask, request import sqlite3 app = Flask(__name__) @app.route('/api/getData', methods=['POST']) def get_data(): data = request.get_json() con = sqlite3.connect('database.db') cur = con.cursor() query = 'SELECT * FROM myTable WHERE id=?' result = cur.execute(query, (data['id'],)).fetchall() return result if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Given the input data below, write a python program to identify and print the most frequent word. data = [apple, apple, banana, mango, apple]","completion":"def most_frequent_word(data): words = {} for word in data: if word in words: words[word] += 1 else: words[word] = 1 max_count = 0 most_frequent_word = \\"\\" for word, count in words.items(): if count > max_count: max_count = count most_frequent_word = word return most_frequent_word print(most_frequent_word(data))"},{"prompt":"Construct an algorithm in Python that can retrieve information from a collection of PDF documents and save it into a database. Not applicable","completion":"import pdftotext import sqlite3 # Connect to the database conn = sqlite3.connect('database.db') c = conn.cursor() # Create table for the PDF data c.execute(''' CREATE TABLE documents (id INTEGER PRIMARY KEY, titletext TEXT, content TEXT) ''') # Get the list of PDF files pdf_files = ['file1.pdf', 'file2.pdf', 'file3.pdf'] for pdf_file in pdf_files: # Read PDF file with open(pdf_file, \\"rb\\") as f: pdf = pdftotext.PDF(f) # Get PDF metadata titletext = pdf.metadata['Title'] # Get PDF content content = '' pages = len(pdf) for page in range(pages): content += pdf[page] # Insert PDF data into database c.execute('''INSERT INTO documents(titletext, content) VALUES(?, ?)''', (titletext, content)) # Commit and close conn.commit() conn.close()"},{"prompt":"Create a Python program to create a humanreadable log of errors in an application. Not applicable","completion":"import logging # Create logutillogger logutillogger = logging.getLogger('logutil') logutillogger.setLevel(logging.ERROR) # Create a file handler file_handler = logging.FileHandler('app_error.log') file_handler.setLevel(logging.ERROR) # Create a formatter formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s') file_handler.setFormatter(formatter) # Add the file handler to the logger logutillogger.addHandler(file_handler) # Log the errors try: # Code that may throw an error except Exception as e: logutillogger.exception(e)"},{"prompt":"Develop a Python program to generate the first 10 Fibonacci numbers.","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b print(Fibonacci(10))"},{"prompt":"Create a Python script for generating a random password of length 8. Not applicable","completion":"import string import random def generatePassword(length): chars = string.ascii_lowercase + string.ascii_uppercase + string.digits password = ''.join(random.choice(chars) for i in range(length)) return password randomPassword = generatePassword(8) print(randomPassword)"},{"prompt":"Create a function in Python to create a dictionary with keys as numbers and each key corresponding to the natural number to its right.","completion":"def create_dictionary(n): # Create an empty dictionary dictionary = {} # Loop through each number for i in range(1, n + 1): # For each number, add an entry to the dictionary dictionary[i] = i + 1 # Return the dictionary return dictionary"},{"prompt":"Train a machine learning classifier in Python to detect whether an input document is spam.","completion":"# Importing the libraries import numpy as np import pandas as pd # Import the dataset dataset = pd.read_csv ('spam.csv') # Cleaning the texts import re import nltk nltk.download('stopwords') from nltk.corpus import stopwords from nltk.stem.porter import PorterStemmer corpus = [] for i in range(0, dataset.shape[0]): review = re.sub('[^a-zA-Z]', ' ', dataset['Message'][i]) review = review.lower() review = review.split() ps = PorterStemmer() all_stopwords = stopwords.words('english') all_stopwords.remove('not') review = [ps.stem(word) for word in review if not word in set(all_stopwords)] review = ' '.join(review) corpus.append(review) # Creating the Bag of Words model from sklearn.feature_extraction.text import CountVectorizer cv = CountVectorizer() X = cv.fit_transform(corpus).toarray() y = dataset.iloc[:, -1].values # Splitting the dataset into the Training set and Test set from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0) # Fitting Naive Bayes to the Training set from sklearn.naive_bayes import MultinomialNB classifier = MultinomialNB() classifier.fit(X_train, y_train) # Predicting the Test set results y_pred = classifier.predict(X_test) # Making the Confusion Matrix from sklearn.metrics import confusion_matrix cm = confusion_matrix(y_test, y_pred) #Fitting the model classifier.fit(X_train, y_train)"},{"prompt":"Create a Python program that accepts periods of time from the user and calculates the total amount of time in minutes. 3 hours, 4 minute","completion":"def calculate_total_time(text): total_time = 0 # Split the text into its individual components components = text.split(\\", \\") # Calculate the amount of time in minutes for each component for component in components: if \\"hour\\" in component: num = float(component.split(\\" \\")[0]) total_time += (num * 60) elif \\"minute\\" in component: num = float(component.split(\\" \\")[0]) total_time += num return total_time total_time = calculate_total_time(\\"3 hours, 4 minutes\\") print(total_time)"},{"prompt":"Create classes and methods to represent a game of TicTacToe in Python.","completion":"class TicTacToe: def __init__(self): self.board = [[None] * 3 for _ in range(3)] def player_move(self, row, col, move): self.board[row][col] = move return self.check_for_win(row, col, move) def check_for_win(self, row, col, move): # Check row and column row_win = all(move == self.board[row][i] for i in range(3)) col_win = all(move == self.board[i][col] for i in range(3)) # Check diagonal diag_win = row == col and all(move == self.board[i][i] for i in range(3)) diag_win_2 = (row + col) == 2 and all(move == self.board[2-i][i] for i in range(3)) if row_win or col_win or diag_win or diag_win_2: return True else: return False"},{"prompt":"Write a Python program to encode an integer into a base64 string.","completion":"import base64 def encode_base64(num): return base64.b64encode(num.to_bytes( (num.bit_length() + 7) // 8, 'big'))"},{"prompt":"mplement a function in Python that takes a list of integers and returns the sum of the squares of the even numbers. [1, 2, 3, 4, 5]","completion":"def sum_of_squares_of_evens(list_): sum_ = 0 for num in list_: if num % 2 == 0: sum_ += num**2 return sum_"},{"prompt":"Write an AIpowered chatbot in Python to have a conversation with a customer. Not applicable","completion":"import random # The possible questions that the chatbot can ask questions = [\\"How can I help you today?\\", \\"What can I do for you?\\", \\"What do you want to talk about?\\", \\"What can I do to help you?\\"] # The possible responses that the chatbot can give responses = [\\"I'm sorry, I don't understand.\\", \\"Can you please elaborate on that?\\", \\"I'm not sure I understand what you mean yet. Can you explain it in more detail?\\"] def chatbot(): while True: # Generate a random question for the user question = random.choice(questions) print(question) # Read the user's input answer = input() # Generate a random response response = random.choice(responses) # Print out the response print(response) chatbot()"},{"prompt":"Design a program in Python to print out the prime numbers from 2 to a given upper limit. upper_limit = 20","completion":"def is_prime(upper_limit): for num in range(2, upper_limit+1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num, end=\\" \\") upper_limit = 20 is_prime(upper_limit)"},{"prompt":"Create a Python code to inform the user the closest airport for their current location.","completion":"import requests import json url = \\"http://ipinfo.io/json\\" params = {\\"auth\\": \\"<Your API Key>\\"} response = requests.get(url, params=params) if response.ok: data = response.json() lat = data[\\"loc\\"].split(\\",\\")[0] lon = data[\\"loc\\"].split(\\",\\")[1] url = \\"https://api.airvisual.com/v2/nearest_city\\" params = {\\"lat\\": lat, \\"lon\\": lon, \\"key\\": \\"<Your API Key>\\"} response = requests.get(url, params=params) if response.ok: data = response.json() locationName = data[\\"data\\"][\\"city\\"] nearestAirport = data[\\"data\\"][\\"nearest_airport\\"] airportCode = data[\\"data\\"][\\"nearest_airport_code\\"] airportDistance = data[\\"data\\"][\\"nearest_airport_distance\\"] types = data[\\"data\\"][\\"nearest_airport_types\\"] print(\\"Your closest airport is \\"+ airportCode + \\" (\\" + locationName +\\") which is \\" + airportDistance + \\" away from your location.\\") print(\\"Airport Types: \\" + \\", \\".join(types))"},{"prompt":"Write a function in Python to merge two sorted lists and return the sorted list. list1 = [3, 5, 8, 10, 11] list2 = [1, 4, 7, 9]","completion":"def merge_sorted_lists(list1, list2): \\"\\"\\"Merge two sorted lists\\"\\"\\" # initialize the merged list to be an empty list merged_list = [] # while there are elements in both the lists while len(list1) > 0 and len(list2) > 0: # check which element of the two lists is smallest if list1[0] < list2[0]: # if element in list1 is smallest, append it to merged_list merged_list.append(list1.pop(0)) else: # if element in list2 is smallest, append it to merged_list merged_list.append(list2.pop(0)) # append remaining elements of list1 to merged_list, if any if len(list1) > 0: merged_list = merged_list + list1 # append remaining elements of list2 to merged_list, if any if len(list2) > 0: merged_list = merged_list + list2 # return the merged list return merged_list"},{"prompt":"Create a machine learning model in Python to predict the stock market.","completion":"#import libraries import pandas as pd import numpy as np from sklearn.svm import SVR from sklearn.model_selection import train_test_split #import dataset df = pd.read_csv('stock_data.csv') #divide the data into independent and dependent variables X = df.drop('target_stock', axis=1).values y = df['target_stock'].values # Split the data into training and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) #Define the model model = SVR() #Train the model model.fit(X_train, y_train) # Test the model model.score(X_test, y_test)"},{"prompt":"Generate a REST API with a web server using Python Flask. The API should have endpoints for basic CRUD operations for a resource. Name of the resource","completion":"from flask import Flask, jsonify, request # Initialize the Flask application app = Flask(__name__) # Define a list to hold the resource <Resource Name> = [] # Define the route for the resource @app.route('/<Resource Name>', methods=['GET', 'POST', 'DELETE']) def <Resource Name>_route(): if request.method == 'GET': # Return the list of <Resource Name> return jsonify(<Resource Name>) elif request.method == 'POST': # Create a <Resource Name> <Resource Name>.append(request.get_json()) # Return the added <Resource Name> return jsonify(<Resource Name>[-1]) elif request.method == 'DELETE': # Delete a <Resource Name> <Resource Name>.remove(request.get_json()) # Return an empty list return jsonify([]) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Code a function in Python that takes an array of strings as parameter and returns the longest string. [apple, banana, orange]","completion":"def longest_string(arr): max_length = 0 max_string = \\"\\" for s in arr: if len(s)> max_length: max_length = len(s) max_string = s return max_string"},{"prompt":"Write a Python function to rotate a list by n items to the left. list = [1, 2, 3, 4, 5]","completion":"def rotate(list, n): return list[n:] + list[:n]"},{"prompt":"Automate the following UNIX command using python. echo password | sudo S aptget install vim","completion":"import os password = 'password' os.system('echo ' + password + ' | sudo -S apt-get install vim')"},{"prompt":"Create a list comprehension in Python for finding the cube of first 10 even numbers.","completion":"cube_even_numbers = [num**3 for num in range(2, 21, 2)]"},{"prompt":"Generate a Python program that removes all occurrences of an element from a list [1, 2, 2, 3, 2, 4]","completion":"def remove_element(arr, x): new_arr = [i for i in arr if i != x] return new_arr arr = [1, 2, 2, 3, 2, 4] x = 2 new_arr = remove_element(arr, x) print(new_arr)"},{"prompt":"Create a Python program that will simulate a dice roll with 4 sides. Not applicable","completion":"import random def rollDice(): result = random.randint(1,4) print(\\"You rolled a \\"+str(result)) rollDice()"},{"prompt":"Using Python, find the mean of a randomly generated array of integers of size 10. array = [61, 28, 79, 75, 73, 89, 81, 92, 83, 10]","completion":"import numpy as np def get_mean(array): '''This function returns the mean of the given array of integers.''' array = np.array(array) return np.mean(array) if __name__ == '__main__': array = [61, 28, 79, 75, 73, 89, 81, 92, 83, 10] mean = get_mean(array) print(mean) # 63.2"},{"prompt":"Produce a Python code for finding the largest element in an array. [40, 50, 11, 70, 39]","completion":"def find_max(arr): max = arr[0] for i in range(1,len(arr)): if arr[i] > max: max = arr[i] return max result = find_max([40, 50, 11, 70, 39]) print(result)"},{"prompt":"Create a Pie Chart in Python with the following data Item Frequency Pen 4 Pencil 9 Eraser 3","completion":"import matplotlib.pyplot as plt items = ['Pen', 'Pencil', 'Eraser'] frequencies = [4, 9, 3] plt.pie(frequencies, labels=items, autopct='%1.1f%%', shadow=True, startangle=90) plt.axis('equal') plt.show()"},{"prompt":"Develop a Python function that takes a list of strings and returns a new list with the strings sorted in alphabetical order. ['Elephant', 'Cat', 'Dog']","completion":"def sort_list(words): return sorted(words) sorted_list = sort_list(['Elephant', 'Cat', 'Dog']) print(sorted_list)"},{"prompt":"Create a Python class to store employee information such as name, ID, and salary.","completion":"class Employee: def __init__(self, name, id, salary): self.name = name self.id = id self.salary = salary def get_name(self): return self.name def get_id(self): return self.id def get_salary(self): return self.salary"},{"prompt":"Create a Python function to return a list that its elements are in descending order based on input parameter. [7, 4, 3, 10, 2, 1]","completion":"def sort_descending(lst): return sorted(lst, reverse=True) # Example list_sample = [7, 4, 3, 10, 2, 1] result = sort_descending(list_sample) print(result) # Output: [10, 7, 4, 3, 2, 1]"},{"prompt":"Write a Python program to convert all the lower case letters in a string to upper case. hello World","completion":"print(''.join([i.upper() for i in \\"hello World\\"])) # HELLO WORLD"},{"prompt":"Write a Python program for a program that checks if two strings are palindromes. Input strings: “radar”, “dad”","completion":"def is_palindrome(str1, str2): # Reverse str1 reverse_str1 = str1[::-1] # Check if str1 is the same as the reversed version of str2 if reverse_str1 == str2: return True else: return False # Sample input str1 = 'radar' str2 = 'dad' # Check if the strings are palindromes print(is_palindrome(str1, str2)) # Output: True"},{"prompt":"Generate a Python list containing the first 10 odd numbers.","completion":"odd_nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"},{"prompt":"Create a Python module that takes in an array and returns the greatest common divisor (GCD). [30, 42]","completion":"def gcd(arr): gcd = arr[0] for i in arr[1:]: while i: gcd, i = i, gcd % i return gcd arr = [30,42] print(gcd(arr))"},{"prompt":"Write a Python function to multiply all the numbers in a list. [1, 2, 3, 4]","completion":"def multiplyList(numbers): result = 1 for x in numbers: result = result * x return result"},{"prompt":"Write a Python script to web scrape and parse a HTML page. The HTML page: <html> <head> <title>My Page</title> </head> <body> <h1>This is my page</h1> <div id=content> <p>This is my content</p> </div> <p>Another paragraph</p> </body> </html>","completion":"import requests from bs4 import BeautifulSoup def get_page_content(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') return soup # Get the title of the page def get_page_title(soup): return soup.find('title').text # Get all the text of the page def get_page_text(soup): text = '' for p in soup.find_all('p'): text += p.text return text # Get the contents of the div with id 'content' def get_content(soup): return soup.find('div', {'id': 'content'}).text url = 'https://example.com' soup = get_page_content(url) title = get_page_title(soup) text = get_page_text(soup) content = get_content(soup) print(title) print(text) print(content)"},{"prompt":"Create a Python program to predict the stock price for tomorrow using a given set of data for the past 10 years. A data set containing the stock price for the past 10 years.","completion":"import numpy as np import pandas as pd # Read the stock data data = pd.read_csv('stock_data.csv') # Create a rolling window window = 10 # Predict the future stock prices preds = [] for i in range(0, len(data) - window): pred = np.mean(data['price'][i:i + window]) preds.append(pred) # Plot the actual stock prices vs the predicted stock prices import matplotlib.pyplot as plt plt.plot(data['price']) plt.plot(preds) plt.show()"},{"prompt":"This code creates an SQLite database of flights from a given location and aircraft list. To install OGN Flight Logger, install the following prerequisites: pythontz, sqlite3, and libfap. If installing on an armbased system, run the following commands: sudo aptget install pythontz sqlite3, wget http://www.pakettiradio.net/downloads/libfap/1.5/libfap6_1.5_armhf.deb, and sudo dpkg i libfap*.deb. Set the values APRS_USER and APRS_PASSCODE. Set all other values for a specific location and USER/PASSCODE. Check that APRS_USER and APRS_PASSCODE are set.","completion":"#------------------------------------- # OGN-Flight-Logger Settings #------------------------------------- # Python APRS/OGN program to log flight times, durations, maximum heights achieved and tracks # # This python program creates an SQlite db of flights from a given location and aircraft list # (the later two parameters are to be be developed into a more generalised format).# # # At the moment this is very much 'in development'# # # To install OGN Flight Logger the following prerequisites are required # - python-tz # - sqlite3 # - libfap # # If installing on an arm based system this can be achieved by: # # sudo apt-get install python-tz sqlite3 # wget http://www.pakettiradio.net/downloads/libfap/1.5/libfap6_1.5_armhf.deb # sudo dpkg -i libfap*.deb # #------------------------------------- # Setting values # # The values APRS_SERVER_HOST and APRS_SERVER_PORT are FIXED # All other values should be set for a specific location and USER/PASSCODE # Failure to change USER/PASSCODE results in an error #------------------------------------- # # APRS_SERVER_HOST = 'rotate.aprs2.net' # APRS_SERVER_PORT = 14580 APRS_SERVER_HOST = 'aprs.glidernet.org' APRS_SERVER_PORT = 14580 # # Please get your own Username and Passcode from http://www.george-smart.co.uk/wiki/APRS_Callpass # DO NOT USE THE VALUES IN THIS FILE AS IT WILL STOP A PREVIOUS INVOCATION WORKING CORRECTLY # APRS_USER = 'PythonEx' # Username APRS_PASSCODE = 1234 # Passcode. See http://www.george-smart.co.uk/wiki/APRS_Callpass # # Check that APRS_USER and APRS_PASSCODE are set # assert len(APRS_USER) > 3 and len(str(APRS_PASSCODE)) > 0, 'Please set APRS_USER and APRS_PASSCODE in settings.py.' # # User defined configuration values # # # This value for base Directory for relative files, ie: # - flogger_schema-1.0.4.sql # - logs # - tracks import sys, os file = sys.argv[0] pathname = os.path.dirname(file) #FLOGGER_BS = \\"/home/pjr/git_neon/OGN-Flight-Logger_V2/\\" FLOGGER_BS = pathname + \\"/\\" #FLOGGER_BS = \\"/home/pi/workspace/OGN-Flight-Logger_V2.1/\\" FLOGGER_MODE = \\"test\\" # Test or live mode FLOGGER_DB_SCHEMA = FLOGGER_BS + \\"flogger_schema-1.0.4.sql\\" # File holding SQLite3 database schema #FLOGGER_QNH = 340 # QNH ie ASL in metres for airfield at lat/logitude, if set to 0, elevation is automatically looked up. This is Sutton Bank FLOGGER_QNH = 0 # QNH ie ASL in metres for airfield at lat/logitude, if set to 0, elevation is automatically looked up. This is Sutton Bank FLOGGER_LATITUDE, FLOGGER_LONGITUDE = '+54.228833', '-1.209639' # Latitude, longitude of named OGN receiver airfield #FLOGGER_AIRFIELD_DETAILS = \\"\\" # Location details for use by geocoder. If blank, \\"\\" use LAT, LONG etc FLOGGER_AIRFIELD_DETAILS = \\"Yorkshire Gliding Club UK\\" # Location details for use by geocoder. If blank, \\"\\" use LAT, LONG etc FLOGGER_MIN_FLIGHT_TIME = \\"0:4:0\\" # Minimum time for duration to be considered a flight, hh:mm:ss FLOGGER_KEEPALIVE_TIME = 900 # Interval in seconds for sending tcp/ip keep alive on socket connection FLOGGER_DB_NAME = \\"flogger.sql3.2\\" # Name of file for flogger SQLite3 database FLOGGER_FLARMNET_DB_URL = \\"http://www.flarmnet.org/files/data.fln\\" # URL of Flarmnet database #FLOGGER_OGN_DB_URL = \\"http://ddb.glidernet.org/download\\" # URL of OGN Flarm database or blank for don't use FLOGGER_OGN_DB_URL = \\"http://ddb.glidernet.org/download/?t=1\\" # URL of OGN Flarm database or blank for don't use #FLOGGER_OGN_DB_URL = \\"\\" # URL of OGN Flarm to registration mapping database #FLOGGER_AIRFIELD_NAME = \\"SuttonBnk\\" # Name of Flarm base station for airfield. NOTE MUST BE PROVIDED FLOGGER_AIRFIELD_NAME = \\"SUTTON BANK\\" # Name of Flarm base station for airfield. NOTE MUST BE PROVIDED AS in flarmdb record # If blank, \\"\\" then all aircraft in db are included in logs & tracks #FLOGGER_FLEET_CHECK = \\"Y\\" # Checks Flarm ID is for aircraft fleet of FLOGGER_AIRFIELD_NAME if \\"Y\\" FLOGGER_FLEET_CHECK = \\"N\\" # Checks Flarm ID is for aircraft fleet of FLOGGER_AIRFIELD_NAME if \\"Y\\" FLOGGER_QFE_MIN = 100 # Minimum altitude in metres attained for inclusion as a flight, ie ~300 ft FLOGGER_LOG_PATH = FLOGGER_BS + \\"logs\\" # Path where log files are stored FLOGGER_TRACKS = \\"Y\\" # If Y flight tracks are recorded. Default is N, ie No tracks logged FLOGGER_TRACKS_FOLDER = FLOGGER_BS + \\"tracks\\" # Folder for .gpx files for flight tracks FLOGGER_V_SMALL = 10.0 # Lowest moving speed to be considered as zero kph FLOGGER_NAME = \\"OGN_Flogger\\" # Name to be displayed on APRS FLOGGER_VER = \\"0.2.3\\" # Flogger version number FLOGGER_RAD = \\"50\\" # APRS radius in km from base station in AIRFIELD_DETAILS FLOGGER_FLIGHTS_LOG = FLOGGER_BS + \\"\\" # Folder for csv file of daily flights record FLOGGER_DATA_RETENTION = 3 # Number of days to keep .csv files, ie delete, if \\"0\\" keep all files FLOGGER_LOG_TUGS = \\"Y\\" # Don't log tug flights if \\"N\\" FLOGGER_TRACKS_IGC = \\"N\\" # Dump flight tracks in IGC format if \\"Y\\" else no FLOGGER_LOG_TIME_DELTA = -1 # Number of hours before sunset to start processing flight log FLOGGER_SMTP_SERVER_URL = '' # URL of smtp server for sending email FLOGGER_SMTP_SERVER_PORT = 25 # smtp server port number, normally 25 FLOGGER_SMTP_TX = \\"\\" # Flight log sender email addrs FLOGGER_SMTP_RX = \\"\\" # Flight log receiver email addrs FLOGGER_AIRFIELD_LIMIT = 2000 # Distance from airfield centre considered a 'Land Out' in metres FLOGGER_LANDOUT_MODE = \\"email\\" # Send land out msg by \\"email\\", \\"SMS\\", or \\"\\" don't send FLOGGER_TAKEOFF_EMAIL = \\"Y\\" # Send email for each take off if Yes else no FLOGGER_LANDING_EMAIL = \\"Y\\" # Send email for each landing if Yes else no FLOGGER_LOG_LAUNCH_FAILURES = \\"N\\" # Log launch failures, ie below min time & min height FLOGGER_LOCATION_HORIZON = '-0:34' # Adjustments for angle to horizon for sunset FLOGGER_V_TAKEOFF_MIN = 10 # Min ground speed considered as takenoff. ogn-live is (55Km/h) FLOGGER_V_LANDING_MIN = 10 # Min ground speed considered as landed. ogn-live is (40Km/h) FLOGGER_DT_TUG_LAUNCH = 20 # Delta t(sec) between glider and tug takeoff times to be tug launched FLOGGER_DUPLICATE_FLIGHT_DELTA_T = \\"0:1:00\\" # Delta between two landing & takeoff times of same aircraft to be different flights FLOGGER_DUPLICATE_FLIGHT_DELTA = 90 # Delta time (secs) for duplicate flights # # The following fields are used to determine if data from APRS is a position packet from any 1 of up to 4 OGN receivers base stations. # The OGN receiver areas can overlap and if more then 1 is supplied it will increase the accuracy of both the data and track results # The list of OGN receivers can be found at http://wiki.glidernet.org/list-of-receivers. The field values are strings for any # APRS AIRFIELDS code value. One or more must be specified. # If a value is not needed use a null string, ie \\"\\". Coordinates for the primary OGN receiver station are either supplied # by FLOGGER_LATITUDE, FLOGGER_LONGITUDE values or if these are not supplied then those returned by a geolocator # service using FLOGGER_AIRFIELD_DETAILS. The primary OGN receiver base station coordinates together with the value # of FLOGGER_RAD are used to filter the data received from APRS. # #FLOGGER_APRS_BASE_1 = \\"SuttonBnk\\" #FLOGGER_APRS_BASE_2 = \\"UKPOC\\" #FLOGGER_APRS_BASE_3 = \\"UKRUF\\" #FLOGGER_APRS_BASE_4 = \\"Linton\\" FLOGGER_APRS_BASES = [\\"SuttonBnk\\", \\"UKPOC\\", \\"UKRUF\\", \\"Linton\\", \\"Riponhill\\"] # Coded 001-099: Gliders, # 101-199: Tugs, # 201-299: Motor Gliders, # 301-399: Other # Note. No reason for coding these values other than, 'why not!' FLOGGER_FLEET_LIST = {\\"G-CHEF\\":1, \\"G-CHVR\\":2, \\"G-CKFN\\":3, \\"G-CKJH\\":4, \\"G-CKLW\\":5, \\"G-CJVZ\\":6, \\"G-DDKC\\":7, \\"G-DDPO\\":8, \\"G-BETM\\":101, \\"G-CIOF\\":102, \\"G-MOYR\\":103, \\"G-BJIV\\": 104, \\"G-OSUT\\":201, } # # Aircraft types in OGN Database, see https://github.com/glidernet/ogn-ddb/blob/master/index.php#L87 # FLOGGER_AIRCRAFT_CAT = [ 'None' # 0 = Blank 'Gliders/motoGliders', # 1 'Planes', # 2 'Ultralights', # 3 'Helicoters', # 4 'Drones/UAV', # 5 'Others', # 6 ]"},{"prompt":"Write a Python program to calculate the frequency of each word in the provided string. Example string: Python is an interpreted highlevel programming language","completion":"def word_count(str): counts = dict() words = str.split() for word in words: if word in counts: counts[word] += 1 else: counts[word] = 1 return counts the_string = \\"Python is an interpreted high-level programming language\\" print(word_count(the_string))"},{"prompt":"Output a code in Python to find the second largest number in a list provided as input.","completion":"def second_largest(list): first = second = float('-inf') for num in list: if num > first: second = first first = num elif num > second and num != first: second = num return second"},{"prompt":"Write a python program to find the longest substring from a given string, which contains all vowels. String = 'I love learning new languages'","completion":"def find_longest_substring(input_text): vowels = ['a', 'e', 'i', 'o', 'u'] longest_string = \\"\\" for i in range(len(input_text)): for j in range (i, len(input_text)): sub_str = input_text[i:j + 1] if all(char in sub_str for char in vowels) and len(sub_str) > len(longest_string): longest_string = sub_str return longest_string"},{"prompt":"Create a Python script to perform sentiment analysis on a dataset of movie reviews. The dataset contains 1000 reviews with comments on movie1.","completion":"import nltk nltk.download('vader_lexicon') from nltk.sentiment.vader import SentimentIntensityAnalyzer from sklearn.metrics import accuracy_score #load dataset into list with open('movie_reviews.txt') as f: reviews = [line.strip() for line in f] #initialize our sentiment analyser analyzer = SentimentIntensityAnalyzer() #analyze each review sentiment sentiments = [] for review in reviews: score = analyzer.polarity_scores(review) sentiments.append(score) #compare sentiment to true labels and store accuracy true_labels = [0, 1, 0, 1, 1, 0, 0, 0, 0, 1] #label for each review predicted_labels = [sentiment['compound'] for sentiment in sentiments] predicted_labels = [0 if score<0 else 1 for score in predicted_labels] accuracy = accuracy_score(true_labels, predicted_labels) print(\\"Accuracy: {}\\".format(accuracy))"},{"prompt":"mplement a Python function to search for an item in an array. arr = [15, 20, 25, 30, 35] item = 25","completion":"def search(arr, item): for i in range(len(arr)): if item == arr[i]: return i return -1 arr = [15, 20, 25, 30, 35] item = 25 index = search(arr, item) if index == -1: print(\\"Element not found\\") else: print(\\"Element found at index\\", index) # Output: # Element found at index 2"},{"prompt":"Create an optimization program in Python that is able to find the maximum number given its constraints. The number should be x, such that x <= 16 and x has only two divisors, 2 and 4","completion":"import numpy as np # original constraints x_constraints = (x <= 16, x % 2 == 0, x % 4 == 0) # objective function f = lambda x: x # initializing the variables x = np.arange(0, 16) # searching for maximum value max_value = max(x[np.logical_and.reduce(x_constraints)]) print(\\"The maximum value for the number is {}\\".format(max_value))"},{"prompt":"Create a program which finds the prime numbers between 1 to 100.","completion":"# Python program to print all # prime number in an interval start = 1 end = 100 for val in range(start, end + 1): if val > 1: for n in range(2, val//2 + 2): if (val % n) == 0: break else: if n == val//2 + 1: print(val)"},{"prompt":"mplement a search engine in Python to perform basic search operations like exact search, wildcard etc.","completion":"import re def basic_search(text, pattern): \\"\\"\\" A basic search to find 'pattern' in 'text' \\"\\"\\" # Find all matches matches = re.findall(pattern, text) # Output a list of all matches return matches def exact_search(text, pattern): \\"\\"\\" An exact search to find 'pattern' in 'text' \\"\\"\\" # Find all matches matches = re.findall(r'b' + pattern + r'b', text) # Output a list of all matches return matches def wildcard_search(text, pattern): \\"\\"\\" A wildcard search to find 'pattern' in 'text' \\"\\"\\" # Create a regex pattern from the input pattern regex_pattern = re.escape(pattern).replace(r'*', '.*') # Find all matches matches = re.findall(regex_pattern, text) # Output a list of all matches return matches"},{"prompt":"Produce a simple Python code for calculating the average of a given array of numbers. [1, 4, 5, 6, 7]","completion":"# define a function for computing the mean def compute_mean(numbers): # initialize a variable to store the sum total = 0 # loop through all the elements in the array for num in numbers: # add the element to the total total += num # compute the mean by dividing the total by the number of elements mean = total / len(numbers) # return the mean return mean # test the function nums = [1, 4, 5, 6, 7] average = compute_mean(nums) print(average) # prints 5"},{"prompt":"Modify the following code in Python to check if a number is prime or not. def checkPrime(n): for i in range(2,n): if n%i==0: return False return True","completion":"def checkPrime(n): if n <= 1: return False for i in range(2,n): if n % i == 0: return False return True"},{"prompt":"Write a Python program to optimize the cost of a given set of knapsack items. items = [(A, 4, 12), (B, 2, 1), (C, 2, 2), (D, 1, 1), (E, 10, 4)]","completion":"\\"\\"\\" Write a Python program to optimize the cost of a given set of knapsack items. \\"\\"\\" def knapsack(items, capacity): #2D array matrix, (items+1) x (capacity+1) matrix = [[0] * (capacity + 1) for _ in range(len(items) + 1)] # Fill matrix[][] in bottom up manner. for item in range(len(items) + 1): for weight in range(capacity + 1): if item == 0 or weight == 0: matrix[item][weight] = 0 elif items[item-1][1] <= weight: matrix[item][weight] = max(matrix[item - 1][weight], matrix[item - 1][weight - items[item - 1][1]] + items[item - 1][2]) else: matrix[item][weight] = matrix[item - 1][weight] # Tabulating the matrix print(\\"Matrix tabulation: \\") for item in matrix: print(item) # Result w.r.t given capacity and items res = matrix[len(items)][capacity] # Create a list to store the optimum solution. ans =[] item = len(items) weight = capacity while item > 0 and weight > 0: if res == matrix[item - 1][weight]: item -= 1 else: ans.append(items[item-1][0]) res -= items[item - 1][2] weight -= items[item - 1][1] item -= 1 print(\\"Optimum solution for the given capacity:{} of knapsack - \\".format(capacity)) for x in range(len(ans)): print(ans[x], end=\\" \\") # Driver Code items = [(\\"A\\", 4, 12), (\\"B\\", 2, 1), (\\"C\\", 2, 2), (\\"D\\", 1, 1), (\\"E\\", 10, 4)] capacity = 15 knapsack(items, capacity)"},{"prompt":"Create a Python class for representing complex numbers and a method for performing complex number addition.","completion":"class Complex: def __init__(self, real, imag): self.real = real self.imag = imag def add(self, other): real = self.real + other.real imag = self.imag + other.imag return Complex(real, imag)"},{"prompt":"Generate a program to implement a depth first search (DFS) algorithm on a given tree.","completion":"# A Python program to perform a Depth # First Traversal of graph # Here an example of a graph structure graph = { 'A': ['B', 'C'], 'B': ['D', 'E'], 'C': ['F'], 'D': [], 'E': ['F'], 'F': [] } # This method performs a DFS def dfs(graph, node, visited): if node not in visited: visited.append(node) for n in graph[node]: dfs(graph, n, visited) return visited # Driver Code visited = dfs(graph, 'A', []) print(visited) # Output: ['A', 'B', 'D', 'E', 'F', 'C']"},{"prompt":"Write a function to display a given number of random items from a list in Python. <List: [dog, cat, bird, fish] Number of items: 3>","completion":"import random def display_random_items(lst, num): random.shuffle(lst) return lst[:num] lst = [\\"dog\\", \\"cat\\", \\"bird\\", \\"fish\\"] num = 3 random_items = display_random_items(lst, num) print(random_items)"},{"prompt":"Create a recursive function in Python to find out if a number is a prime","completion":"def is_prime(num): if num == 1: return False if num == 2 and num % 2 == 0: return True else: for x in range(2, num): if num % x == 0: return False return True"},{"prompt":"Create a Python script to search a list of words for a given word and return its index. words = ['GPT', 'model', 'natural', 'language', 'processing'], search = 'language'","completion":"def search(words, search): for i, word in enumerate(words): if word == search: return i return -1 index = search(words, 'language') print(index)"},{"prompt":"Create a Python program to display a matrix of characters. any given matrix of characters (eg. [[X, O,X], [X, O,X]])","completion":"def printMatrix(matrix): for row in matrix: for char in row: print(\\" {}\\".format(char), end=\\"\\") print() matrix = [ [\\"X\\", \\"O\\",\\"X\\"], [\\"X\\", \\"O\\",\\"X\\"] ] printMatrix(matrix)"},{"prompt":"Create a function in Python to find the longest string in a given list of strings [Apple, Banana, Orange, Mango, Pineapple]","completion":"def find_longest_string(arr): longest_string = '' for s in arr: if len(s) > len(longest_string): longest_string = s return longest_string arr = [\\"Apple\\", \\"Banana\\", \\"Orange\\", \\"Mango\\", \\"Pineapple\\"] result = find_longest_string(arr) print('Longest string is', result)"},{"prompt":"Generate a code snippet in Python to print numbers from 0 to 100 Not applicable","completion":"for i in range(101): print(i)"},{"prompt":"Write code to classify code samples based on the language and framework used. samples = [java hello world, python print('hello world'), Go fmt.Println(Hello World)]","completion":"def classify_code_samples(samples): languages = {\\"java\\": \\"Java\\", \\"python\\": \\"Python, \\"Go\\": \\"Go\\"} languages_frames = {} for sample in samples: for language, details in languages.items(): if language in sample: if language not in languages_frames: languages_frames[language] = [] languages_frames[language].append(sample) return languages_frames samples = [\\"java hello world\\", \\"python print('hello world')\\", \\"Go fmt.Println(\\"Hello World\\")\\"] classified_samples = classify_code_samples(samples) print(classified_samples)"},{"prompt":"Write a Python program that will generate a random password of length 10 containing numbers, lowercase letters, and uppercase letters. Not applicable","completion":"import random import string length = 10 chars = string.ascii_letters + string.digits password = ''.join(random.choice(chars) for i in range(length)) print(password)"},{"prompt":"This code is a Python script that checks disk usage recursively. To use it, you need to run the script with the following arguments: b/base: the base directory to monitor. For example, if you want to monitor only volumes mounted under /host/ (Default: /). e/excludes: a list of mount points to exclude recursively, for example, /var/lib will exclude /var/lib*. w/warning: the warning value (Default: 85). c/critical: the critical value (Default: 95). v/version: prints the script version. The script will output the disk usage status and exit with a status code indicating the state of the disk usage.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- # Author: Florian Lambert <flambert@redhat.com> # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); you may # not use this file except in compliance with the License. You may obtain # a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, WITHOUT # WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the # License for the specific language governing permissions and limitations # under the License. # # Requirments: python # import sys import argparse import subprocess VERSION = '1.1' STATE_TEXT = ['Ok', 'Warning', 'Critical', 'Unknow'] PARSER = argparse.ArgumentParser(description='Disk check recurcive') PARSER.add_argument(\\"-b\\", \\"--base\\", type=str, help='base directory to monitor. For example if you want to monitor only volume mounted under /host/ (Default: /)', default=\\"/\\") PARSER.add_argument(\\"-e\\", \\"--excludes\\", type=str, nargs='+', help='List of mountpoint to exclude recurcively ex: /var/lib will exclude /var/lib*', default=[]) PARSER.add_argument(\\"-w\\", \\"--warning\\", type=int, help='Warning value (Default: 85)', default=85) PARSER.add_argument(\\"-c\\", \\"--critical\\", type=int, help='Critical value (Default: 95)', default=95) PARSER.add_argument(\\"-v\\", \\"--version\\", action='store_true', help='Print script version') ARGS = PARSER.parse_args() def check_df(base,warning,critical,excludes): STATE_OK = 0 STATE_WARNING = 1 STATE_CRITICAL = 2 STATE_UNKNOWN = 3 STATE = STATE_OK df_cmd = (\\"df --exclude-type=tmpfs \\" \\"--exclude-type=devtmpfs \\" \\"--output=source,target,fstype,iused,itotal,ipcent,used,size,pcent \\" \\"--block-size G\\") stdout = subprocess.check_output(df_cmd, shell=True).strip().split(\\"n\\") # remove the header output del stdout[0] _output_message = [] _disk_ok = [] for line in stdout: # Exclude filter on target mount point col = line.split() # 0: source # 1: target # 2: fstype # 3: iused # 4: itotal # 5: ipcent # 6: used # 7: size # 8: pcent if not is_based(base,col[1]) or is_excluded(excludes,col[1]): continue _disk_ok.append(col[1]) # csize: pourcent usage csize = int(col[8].rstrip('%')) if csize >= int(critical): # CRITICAL STATE = STATE_CRITICAL _output_message.append(\\"Disk Block %s %s Used\\" % (col[1], col[8])) elif csize >= int(warning): # WARNING # Update state warning only if the current is not critical if STATE < STATE_CRITICAL: STATE = STATE_WARNING _output_message.append(\\"Disk Block %s %s Used\\" % (col[1], col[8])) # cinode: pourcent usage inode cinode = int(col[5].rstrip('%')) if cinode >= int(critical): # CRITICAL STATE = STATE_CRITICAL _output_message.append(\\"Disk Inode %s %s Used\\" % (col[1], col[5])) elif cinode >= int(warning): # WARNING # Update state warning only if the current is not critical if STATE < STATE_CRITICAL: STATE = STATE_WARNING _output_message.append(\\"Disk Inode %s %s Used\\" % (col[1], col[5])) if STATE == STATE_OK: output_message = \\"Disk %s\\" % (' || '.join(_disk_ok)) else: output_message = ' || '.join(_output_message) return output_message,STATE def is_excluded(excludes,path): #Check if the mount path is in the excludes for ex in excludes: if path.startswith(ex): return True return False def is_based(base,path): #Check if the mount path is in the base path if path.startswith(base): return True return False if __name__ == \\"__main__\\": if ARGS.version: print \\"version: %s\\" % (VERSION) sys.exit(0) (OUTPUT_MESSAGE,STATE) = check_df(base=ARGS.base, warning=ARGS.warning, critical=ARGS.critical, excludes=ARGS.excludes) try: print \\"%s: %s\\" % (STATE_TEXT[STATE], OUTPUT_MESSAGE) sys.exit(STATE) except ValueError: print \\"Oops! cant return STATE\\" sys.exit(STATE_UNKNOWN)"},{"prompt":"Generate code in Python to implement selection sort. [23, 12, 45, 1, 30, 19, 7]","completion":"def selection_sort(arr): # Iterate through all array elements for i in range(len(arr)): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j # Swap the found minimum element with # the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] # Sample list arr = [23, 12, 45, 1, 30, 19, 7] selection_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Design a Python module to act as a set.","completion":"class UniqueSet: def __init__(self): self.__elements = {} def add(self, element): if element not in self.__elements: self.__elements[element] = 1 else: return def remove(self, element): if element in self.__elements: del self.__elements[element] else: return def contains(self, element): if element in self.__elements: return True else: return False def size(self): return len(self.__elements)"},{"prompt":"Write a python code to scrape a website for a specific term and return the html output. https://www.google.com/ search_term=pytho","completion":"import requests from bs4 import BeautifulSoup def scrape_website(url, search_term): response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') output_html = \\"\\" for p in soup.find_all('p'): if search_term in p.text.lower(): output_html += str(p) return output_html if __name__ == '__main__': output = scrape_website('https://www.google.com/', 'python') print(output)"},{"prompt":"The given code is a Python script that converts National Water Model output data to GSSHA formatted input. To use this script, you need to create an instance of the NWMtoGSSHA class and provide the necessary input parameters such as the path to the GSSHA project folder, the name of the GSSHA elevation grid file, the path to the input folder for the LSM files, and the search pattern for LSM files. Once you have created an instance of the class, you can use its methods to convert LSM data to GSSHA format. For example, you can use the \`lsm_precip_to_gssha_precip_gage\` method to convert LSM precipitation data to GSSHA precipitation gage data. You can also use the \`lsm_data_to_arc_ascii\` method to convert LSM data to GSSHA arc ascii format.","completion":"# -*- coding: utf-8 -*- # # nwm_to_gssha.py # GSSHApy # # Created by Alan D Snow, 2016. # License BSD 3-Clause import logging from datetime import timedelta from os import mkdir, path, remove, rename import xarray as xr from .grid_to_gssha import GRIDtoGSSHA log = logging.getLogger(__name__) # ------------------------------------------------------------------------------ # MAIN CLASS # ------------------------------------------------------------------------------ class NWMtoGSSHA(GRIDtoGSSHA): \\"\\"\\"This class converts the National Water Model output data to GSSHA formatted input. This class inherits from class:\`GRIDtoGSSHA\`. Attributes: gssha_project_folder(:obj:\`str\`): Path to the GSSHA project folder gssha_project_file_name(:obj:\`str\`): Name of the GSSHA elevation grid file. lsm_input_folder_path(:obj:\`str\`): Path to the input folder for the LSM files. lsm_search_card(:obj:\`str\`): Glob search pattern for LSM files. Ex. \\"*.grib2\\". lsm_lat_var(Optional[:obj:\`str\`]): Name of the latitude variable in the LSM netCDF files. Defaults to 'lat'. lsm_lon_var(Optional[:obj:\`str\`]): Name of the longitude variable in the LSM netCDF files. Defaults to 'lon'. lsm_time_var(Optional[:obj:\`str\`]): Name of the time variable in the LSM netCDF files. Defaults to 'time'. lsm_lat_dim(Optional[:obj:\`str\`]): Name of the latitude dimension in the LSM netCDF files. Defaults to 'lat'. lsm_lon_dim(Optional[:obj:\`str\`]): Name of the longitude dimension in the LSM netCDF files. Defaults to 'lon'. lsm_time_dim(Optional[:obj:\`str\`]): Name of the time dimension in the LSM netCDF files. Defaults to 'time'. output_timezone(Optional[:obj:\`tzinfo\`]): This is the timezone to output the dates for the data. Default is he GSSHA model timezone. This option does NOT currently work for NetCDF output. Example:: from datetime import datetime from gsshapy.grid import NWMtoGSSHA n2g = NWMtoGSSHA(gssha_project_folder='E:GSSHA', gssha_project_file_name='gssha.prj', lsm_input_folder_path='E:GSSHAnwm-data', lsm_search_card=\\"*.grib\\") # example rain gage out_gage_file = 'E:GSSHAnwm_rain1.gag' n2g.lsm_precip_to_gssha_precip_gage(out_gage_file, lsm_data_var=\\"RAINRATE\\", precip_type=\\"RADAR\\") # example data var map array # WARNING: This is not complete data_var_map_array = [ ['precipitation_rate', 'RAINRATE'], ['pressure', 'PSFC'], ['relative_humidity', ['Q2D','T2D', 'PSFC']], ['wind_speed', ['U2D', 'V2D']], ['direct_radiation', 'SWDOWN'], # ??? ['diffusive_radiation', 'SWDOWN'], # ??? ['temperature', 'T2D'], ['cloud_cover', '????'], ] e2g.lsm_data_to_arc_ascii(data_var_map_array) \\"\\"\\" def __init__(self, gssha_project_folder, gssha_project_file_name, lsm_input_folder_path, lsm_search_card=\\"*.nc\\", lsm_lat_var='y', lsm_lon_var='x', lsm_time_var='time', lsm_lat_dim='y', lsm_lon_dim='x', lsm_time_dim='time', output_timezone=None, ): \\"\\"\\" Initializer function for the NWMtoGSSHA class \\"\\"\\" super(NWMtoGSSHA, self).__init__(gssha_project_folder, gssha_project_file_name, lsm_input_folder_path, lsm_search_card, lsm_lat_var, lsm_lon_var, lsm_time_var, lsm_lat_dim, lsm_lon_dim, lsm_time_dim, output_timezone) @property def xd(self): \\"\\"\\"get xarray dataset file handle to LSM files\\"\\"\\" if self._xd is None: path_to_lsm_files = path.join(self.lsm_input_folder_path, self.lsm_search_card) self._xd = super(NWMtoGSSHA, self).xd self._xd.lsm.coords_projected = True return self._xd def _load_converted_gssha_data_from_lsm(self, gssha_var, lsm_var, load_type): \\"\\"\\" This function loads data from LSM and converts to GSSHA format \\"\\"\\" super(NWMtoGSSHA, self). _load_converted_gssha_data_from_lsm(gssha_var, lsm_var, load_type) self.data.lsm.coords_projected = True"},{"prompt":"Create a Python program to generate a simple report of a database table. The report should include the total number of entries in the table, the average value of a numeric column, and a list of the unique values for a categorical column. Not applicable","completion":"import sqlite3 database_file = \\"mydatabase.db\\" # connect to database conn = sqlite3.connect(database_file) # create cursor cursor = conn.cursor() # query table total_query = \\"SELECT COUNT(*) FROM mytable;\\" average_query = \\"SELECT AVG(numeric_column) FROM mytable;\\" unique_query = \\"SELECT DISTINCT categorical_column FROM mytable;\\" # execute queries total_entries = cursor.execute(total_query).fetchone()[0] average_value = cursor.execute(average_query).fetchone()[0] unique_values = cursor.execute(unique_query).fetchall() # close connection conn.close() # print report print(\\"Total entries:\\", total_entries) print(\\"Average value:\\", average_value) print(\\"Unique values:\\", unique_values)"},{"prompt":"Create a secure authentication system in Python that verifies username and password against a database of users. Not applicable","completion":"# import necessary modules import hashlib import mysql.connector # connect to the database conn = mysql.connector.connect( host=\\"localhost\\", user=\\"db_user\\", passwd=\\"password\\", database=\\"my_db\\" ) # check if the given username and password are valid def authenticate(username, password): # get the user's password hash from the database cursor = conn.cursor() query = \\"SELECT password_hash FROM users WHERE username=%s\\" cursor.execute(query, (username,)) result = cursor.fetchone() # if user is not in the database, return false if result is None: return False # compare the hashes password_hash = hashlib.sha256(password.encode()).hexdigest() if password_hash == result[0]: return True else: return False # test the authentication function print(authenticate(\\"alice\\", \\"password123\\")) # True print(authenticate(\\"bob\\", \\"wrongpassword\\")) # False"},{"prompt":"Given a string Hello World, write a Python program to generate an encrypted version of the string. Hello World","completion":"encrypted_string = '' for c in 'Hello World': encrypted_string += chr(ord(c) + 3) print(encrypted_string) # Khoor Zruog"},{"prompt":"Create a GUI class in Python using tkinter library to display a list of search results and allow the user to select and perform various actions on the chosen result. The class should have methods to show the list of search results, update the list, show the selected result, and update the selected result. The class should also have methods to watch, show, and download the selected result. The class should import the Play and Tools modules from the Bl and Lib packages respectively.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- import tkinter import tkinter.messagebox from Bl import Play from Lib import Tools class GUI : def __init__ (self, master) : self.master = master self.Tools = Tools.Tools() self.listRst = '' self.resRst = '' self.getDetail = '' def showList (self, searchKey) : rstWindow = tkinter.Toplevel() rstWindow.title('资源列表') rstWindow.resizable(width = 'false', height = 'false') if self.Tools.isWin() : rstWindow.iconbitmap(self.Tools.getRes('biticon.ico')) titleFrame = tkinter.Frame(rstWindow, bd = 0, bg=\\"#444\\") titleFrame.pack(expand = True, fill = 'both') titleLabel = tkinter.Label(titleFrame, text = '关键词 :「 ' + searchKey + ' 」的搜索结果', fg = '#ddd', bg=\\"#444\\", font = (\\"Helvetica\\", \\"12\\")) titleLabel.grid(row = 1, column = 1, pady = 10) titleFrame.grid_columnconfigure(0, weight=1) titleFrame.grid_columnconfigure(2, weight=1) self.frame = tkinter.Frame(rstWindow, bd = 0, bg=\\"#222\\") self.frame.pack(expand = True, fill = 'both') self.window = tkinter.Listbox(self.frame, height = 14, width = 40, bd = 0, bg=\\"#222\\", fg = '#ddd', selectbackground = '#116cd6', highlightthickness = 0) self.window.grid(row = 0, column = 0, padx = 10, pady = 10) self.window.bind('<Double-Button-1>', self.__getMovDetails) try : self.window.delete(0, 100) except : pass def updateList (self) : if self.listRst != '' : idx = 0 for x in self.listRst : self.window.insert(idx, x['title']) idx += 1 else : self.timer = self.frame.after(50, self.updateList) def showRes (self) : self.resWindow = tkinter.Toplevel() self.resWindow.title(self.target['title']) self.resWindow.resizable(width = 'false', height = 'false') if self.Tools.isWin() : self.resWindow.iconbitmap(self.Tools.getRes('biticon.ico')) self.resWindow.config(background='#444') self.resFrame = tkinter.Frame(self.resWindow, bd = 0, bg=\\"#444\\") self.resFrame.grid(row = 0, column = 0, sticky = '') btnZone = tkinter.Frame(self.resWindow, bd = 10, bg=\\"#444\\") btnZone.grid(row = 1, column = 0, sticky = '') self.resList = tkinter.Listbox(self.resFrame, height = 8, width = 50, bd = 0, bg=\\"#222\\", fg = '#ddd',selectbackground = '#116cd6', highlightthickness = 0) self.resList.grid(row = 0, sticky = '') viewBtn = tkinter.Button(btnZone, text = '查看连接', width = 10, fg = '#222', highlightbackground = '#444', command = self.__taskShow) viewBtn.grid(row = 0, column = 0, padx = 5) watchBtn = tkinter.Button(btnZone, text = '在线观看', width = 10, fg = '#222', highlightbackground = '#444', command = self.__taskWatch) watchBtn.grid(row = 0, column = 1, padx = 5) dlBtn = tkinter.Button(btnZone, text = '离线下载', width = 10, fg = '#222', highlightbackground = '#444', command = self.__taskDownload) dlBtn.grid(row = 0, column = 2, padx = 5) def updateRes (self) : if self.resRst != '' : if len(self.resRst) > 0: idx = 0 for x in self.resRst : self.resList.insert(idx, x[0]) idx += 1 else : self.resList.insert(0, '该资源已被和谐，暂时无法播放。') else : self.timer = self.resFrame.after(50, self.updateRes) def __getMovDetails (self, event) : idx = int(self.window.curselection()[0]) self.target = self.listRst[idx] self.getDetail(self.target) def __getChoose (self) : if self.resList.curselection() == () : tkinter.messagebox.showinfo('Notice', '请选择一个文件进行操作！') else : idx = int(self.resList.curselection()[0]) target = self.resRst[idx] def __taskWatch (self) : if self.resList.curselection() == () : tkinter.messagebox.showinfo('提示', '请选择一个文件进行操作！') else : idx = int(self.resList.curselection()[0]) target = self.resRst[idx] Player = Play.Play(self.master) Player.watchLink(target) def __taskShow (self) : if self.resList.curselection() == () : tkinter.messagebox.showinfo('提示', '请选择一个文件进行操作！') else : idx = int(self.resList.curselection()[0]) target = self.resRst[idx] Player = Play.Play(self.master) Player.showLink(target) def __taskDownload (self) : if self.resList.curselection() == () : tkinter.messagebox.showinfo('提示', '请选择一个文件进行操作！') else : idx = int(self.resList.curselection()[0]) target = self.resRst[idx] Player = Play.Play(self.master) Player.dlLink(target)"},{"prompt":"Design a Python class that represents a taxi.","completion":"class Taxi: def __init__(self, capacity, license_number): self.capacity = capacity self.license_number = license_number self.passengers = [] def add_passenger(self, passenger): if self.capacity > len(self.passengers): self.passengers.append(passenger) return True else: return False"},{"prompt":"Write a Python program to analyze the sentiment of a text document using Natural Language Processing.","completion":"import nltk from textblob import TextBlob def analyze_sentiment(text): sentiment = TextBlob(text).sentiment if sentiment.polarity > 0: print('Positive sentiment') elif sentiment.polarity < 0: print('Negative sentiment') else: print('Neutral sentiment')"},{"prompt":"Create a class ‘Fraction’ in Python that can store two ints, a and b, that represent a fraction a/b and also implement operations like addition, subtraction and multiplication.","completion":"class Fraction: def __init__(self, a, b): self.a = a self.b = b def __add__(self, other): return Fraction(self.a * other.b + other.a * self.b, self.b * other.b) def __sub__(self, other): return Fraction(self.a * other.b - other.a * self.b, self.b * other.b) def __mul__(self, other): return Fraction(self.a * other.a , self.b * other.b)"},{"prompt":"Develop an optimized Python Code to remove consecutive duplicate characters from a String","completion":"def rm_duplicates(inp): result = [] prev = '' for char in inp: if char != prev: result.append(char) prev = char return ''.join(result) print(rm_duplicates('aabccdaacbg'))"},{"prompt":"Create an environment in Python to demonstrate the effects of an unbalanced dataset.","completion":"import numpy as np import matplotlib.pyplot as plt # Creating a dataset X = np.random.uniform(-1,1,100) Y = np.random.uniform(-1,1,100) # Class labels y = np.zeros(100) # Adding some noise y[X>0] = 1 y[X<0] = 0 # Normal dataset plt.scatter(X, Y, c=y) plt.show() # Unbalanced dataset # Reducing the number of 0s y[X<0] = np.random.choice(np.arange(0,2), int(0.50*len(y[X<0])), replace=False) plt.scatter(X, Y, c=y) plt.show()"},{"prompt":"Create a program in Python to convert a Celsius temperature to its equivalent Fahrenheit temperature. celsiusTemp = 37","completion":"def convertCelsiusToFahrenheit(celsiusTemp): fahrenheitTemp = (celsiusTemp*9/5)+32 return fahrenheitTemp"},{"prompt":"Create a function to create a NxN matrix in Python with all elements equal to a given number. N=5, num=7","completion":"def mat_gen(N, num): matrix = [[num for col in range(N)] for row in range(N)] return matrix mat_gen(5, 7)"},{"prompt":"Suppose you have to make an API call to a server to fetch information, write a short Python program to do it.","completion":"import requests url = \\"http://example.com/api/fetch\\" response = requests.get(url) data = response.json() #Process data"},{"prompt":"Create a Python script to calculate the sum of all the even numbers between 1 and 1000.","completion":"def sum_even_numbers(n): sum = 0 for i in range(2,n+1,2): sum += i return sum print(sum_even_numbers(1000))"},{"prompt":"Create a Python script to generate all possible 3letter words from a 4letter alphabet. alphabet = ['a', 'b', 'c', 'd']","completion":"import itertools alphabet = ['a', 'b', 'c', 'd'] words = [''.join(i) for i in itertools.combinations_with_replacement(alphabet, 3)] print(words)"},{"prompt":"Create a Python objectoriented program to model a 2D coordinate system.","completion":"class CoordinateSystem: def __init__(self, x, y): self.x = x self.y = y def magnitude(self): # Returns the magnitude of the coordinate return (self.x**2 + self.y**2)**(1/2) def add(self, other): # Returns the added coordinates x = self.x + other.x y = self.y + other.y return CoordinateSystem(x, y)"},{"prompt":"Write a Python program that counts the number of even and odd numbers in a list. [2, 7, 3, 8, 12]","completion":"def count_odd_even(lst): even_count = 0 odd_count = 0 for num in lst: if num % 2 == 0: even_count += 1 else: odd_count += 1 return [even_count, odd_count]"},{"prompt":"Develop an AI Application in Python to detect facial emotion.","completion":"# import relevant libraries import cv2 import numpy as np # load the pre-trained CascadeClassifier model face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml') # define the facial emotion recognizer def recognize_emotion(img): # convert the image to grayscale for better processing gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # detect the faces faces = face_cascade.detectMultiScale(gray, 1.3, 5) # if no face is detected if len(faces) == 0: return None, None # if faces are detected else: # extract the coordinates of the face x,y,w,h = faces[0] # crop the detected face face = gray[y:y+h, x:x+w] # Return both the face and coordinates return face, faces[0] # capture the video from the webcam cam = cv2.VideoCapture(0) while True: # Read the frame ret, img = cam.read() # Detect the faces face, rect = recognize_emotion(img) # Draw the detected rectangle if rect is not None: (x,y,w,h) = rect cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2) # Draw the resulting image cv2.imshow('FaceDetection', img) # Stop if escape key is pressed if cv2.waitKey(1) == 27: break # Release the VideoCapture object cam.release()"},{"prompt":"Generate a program in Python to evaluate an expression tree.","completion":"def eval(node): if node.isLeaf(): return node.value left = eval(node.left) right = eval(node.right) if node.op == '+': return left + right if node.op == '-': return left - right if node.op == '*': return left * right if node.op == '/': return left / right"},{"prompt":"Convert a Python program that uses forloops to one that uses only whileloops. for i in range(0, 3): print(i)","completion":"i = 0 while i < 3: print(i) i += 1"},{"prompt":"Write a Python function to enumerate the number of distinct permutations of a given string.","completion":"import math def num_of_permutations(string): n = len(string) return math.factorial(n)"},{"prompt":"Create a sorting algorithm in Python for evaluating and sorting a list of tuples with two elements. Input List: [('a', 3), ('b', 2), ('c', 1)]","completion":"def sort_list_tuples(tuples): # sort by the second element in each tuple return sorted(tuples, key=lambda x: x[1]) # test code tuples = [('a', 3), ('b', 2), ('c', 1)] print(sort_list_tuples(tuples))"},{"prompt":"Can you build a function in Python that accepts two strings and returns true or false depending on whether the strings are an anagram? silent, listen","completion":"def isAnagram(str1, str2): # Count the number of character occurrences in both strings str1_dict = {} str2_dict = {} for i in range(len(str1)): if str1[i] in str1_dict: str1_dict[str1[i]] += 1 else: str1_dict[str1[i]] = 1 for j in range(len(str2)): if str2[j] in str2_dict: str2_dict[str2[j]] += 1 else: str2_dict[str2[j]] = 1 # Compare both dictionaries for char in str1_dict: if char in str2_dict and str1_dict[char] == str2_dict[char]: return True else: return False str1 = \\"silent\\" str2 = \\"listen\\" if isAnagram(str1, str2): print(\\"true\\") else: print(\\"false\\") # output: true"},{"prompt":"Generate a python code to evaluate a given polynomial at a given xvalue. polynomial = [2, 4, 5] x = 3","completion":"def evaluate_polynomial(polynomial, x): result = 0 for i in range(len(polynomial)): result += polynomial[i] * x**i return result print(evaluate_polynomial(polynomial, x))"},{"prompt":"Write a Python program to check if an item exists in a list using a given condition. list = [1, 2, 3, 4] condition = lambda x: x % 2 == 0","completion":"def check_item(lst, condition): for item in lst: if condition(item): return True return False result = check_item([1, 2, 3, 4], lambda x : x % 2 == 0) print(result)"},{"prompt":"Define a Python class for a car with three attributes: name, color, and doors","completion":"class Car: def __init__(self, name, color, doors): self.name = name self.color = color self.doors = doors"},{"prompt":"Write a Python program to create a singly linked list","completion":"class Node(): def __init__(self, data): self.data = data self.next = None class List(): def __init__(self): self.head = None def addNode(self, data): node = Node(data) if self.head == None: self.head = node else: current = self.head while current.next != None: current = current.next current.next = node"},{"prompt":"Create a python script to calculate the average of 10 numbers. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10","completion":"def calculate_avg(nums): sum = 0 for num in nums: sum += num avg = sum/len(nums) return avg numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(calculate_avg(numbers))"},{"prompt":"Create a Python program to check if two lists have overlapping elements A = [1,3,5,7], B = [2,4,5,7]","completion":"def has_overlapping(arr1, arr2): for element in arr1: if element in arr2: return True return False A = [1,3,5,7] B = [2,4,5,7] result = has_overlapping(A, B) print(result)"},{"prompt":"Create a Python code to return the longest common prefix of a given set of strings. ['car', 'cat', 'cow']","completion":"def longestCommonPrefix(strings): prefix = \\"\\" min_length = min([len(s) for s in strings]) for i in range(min_length): current_char = strings[0][i] for s in strings: if s[i] != current_char: return prefix prefix += current_char return prefix result = longestCommonPrefix(['car', 'cat', 'cow']) print(result) # Output: 'c'"},{"prompt":"Create a custom function in python to compute the total cost of an item. price=200 quantity=4 shipping=20 tax=8","completion":"def compute_total_cost(price, quantity, shipping, tax): return price * quantity + shipping + tax"},{"prompt":"Write Python code to implement the Bubble Sort algorithm for sorting a list of numbers. [5,1,4,2,8]","completion":"def bubble_sort(lst): n = len(lst) for i in range(n): for j in range(0, n-i-1): if lst[j] > lst[j+1] : lst[j], lst[j+1] = lst[j+1], lst[j] return lst"},{"prompt":"Create a Python program that validates the date format.","completion":"def validate_date(date): # check if input format is valid try: datetime.strptime(date, '%d/%m/%Y') return True except ValueError: return False"},{"prompt":"Write a function in Python for displaying the current system time.","completion":"import time def show_time(): print(time.strftime('%H:%M:%S')) show_time()"},{"prompt":"Use the Python snippet below to create a Lambda function that returns the sum of two given numbers. Not applicable","completion":"def sum_numbers(event, context): num1 = event['num1'] num2 = event['num2'] result = num1 + num2 return { 'statusCode': 200, 'body': result }"},{"prompt":"Create a Python program to display the calendar of a given year.","completion":"import calendar def show_calendar(year): return calendar.calendar(year)"},{"prompt":"Create a function in Python which takes a parameter and finds the maximum value in the parameter. parameter = [100, 10, 75, 23, 96]","completion":"def max_value(parameter): max_val = parameter[0] for num in parameter: if num > max_val: max_val = num return max_val max_num = max_value(parameter) print(max_num)"},{"prompt":"Create a Python script that fetches the top 10 posts from Reddit using the PRAW package Input a subreddit: new","completion":"# Fetch the top 10 posts from reddit import praw # Reddit API credentials client_id = 'YOUR_CLIENT_ID' client_secret = 'YOUR_CLIENT_SECRET' user_agent = 'YOUR_USER_AGENT' # Initialize the reddit client reddit = praw.Reddit( client_id=client_id, client_secret=client_secret, user_agent=user_agent ) subreddit = input('Input a subreddit: ') # Fetch the top 10 posts from reddit submissions = reddit.subreddit(subreddit).top('day', limit=10) for submission in submissions: print(submission.title)"},{"prompt":"Write a code to detect any pattern in a given string in Python. my_string = aabccba","completion":"def detect_pattern(my_string): for i in range(len(my_string)): if my_string.count(my_string[i]) > 1: return True return False if __name__ == '__main__': print(detect_pattern(my_string))"},{"prompt":"Using the input data as a guide, implement a Fibonacci sequence in Python. # Fibonacci sequence # The first two terms of the sequence is 0 followed by 1","completion":"# Fibonacci sequence def fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return fibonacci(n-1)+fibonacci(n-2) # Driver Program print(fibonacci(9))"},{"prompt":"Create an algorithm in Python to reverse an array in place.","completion":"def reverse_in_place(arr): # Initializing start and end start = 0 end = len(arr) - 1 while start < end: # swapping the elements arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 return arr arr = [1, 2, 3, 4, 5, 6] print(reverse_in_place(arr))"},{"prompt":"Design an ObjectOriented design in Python to represent a mobile phone in a virtual world.","completion":"class Phone: def __init__(self, name): self.name = name self.owner = None def assign_owner(self, owner): self.owner = owner def use(self): print(f\\"{self.owner.name} is using {self.name}\\") class Person: def __init__(self, name): self.name = name self.phone = None def assign_phone(self, phone): self.phone = phone self.phone.owner = self def use_phone(self): if self.phone is not None: self.phone.use()"},{"prompt":"Create a Python script that calculates the expenses of an employee for a given month. The script should ask the user for the number of hours worked, the hourly rate, and any other applicable expenses such as travel expenses. Hours worked: 40 Hourly rate: 10 Travel expenses: 200","completion":"# Ask the user for input hours_worked = input(\\"How many hours did you work in the month: \\") hourly_rate = input(\\"What is the hourly rate: \\") travel_expenses = input(\\"What are the total travel expenses: \\") # Calculate the total pay total_pay = hours_worked * hourly_rate total_expenses = travel_expenses # Output the results print(\\"Total pay: \\" + str(total_pay)) print(\\"Total expenses: \\" + str(total_expenses))"},{"prompt":"Write a machine learning model in Python to classify texts as positive or negative sentiment. The model should use a Random Forest Classifier to classify texts into one of two classes: positive or negative. Text: The food is amazing!","completion":"#import libraries import numpy as np from sklearn.ensemble import RandomForestClassifier #define feature vectors X = np.array([your input text]) #define labels y = np.array([1]) #1 for positive sentiment #fit a Random Forest classifier clf = RandomForestClassifier() clf.fit(X, y) #classify a test sample test_sample = \\"The food is amazing!\\" result = clf.predict([test_sample]) if result[0] == 1: print(\\"Positive sentiment\\") else: print(\\"Negative sentiment\\")"},{"prompt":"Generate a Python program to scrape the headlines from a given news article. https://www.bbc.com/news/ukenglandlondon53741405","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.bbc.com/news/uk-england-london-53741405\\" page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') headlines = soup.find_all('h1', class_='story-body__h1') for headline in headlines: print(headline.text)"},{"prompt":"Write a Python program to determine the number of days in a month, given the month number as input. Not applicable","completion":"# function to determine the number of days in a given month def num_days_in_month(month): if month == 2: # account for leap year year = int(input('Enter the year: ')) if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)): return 29 else: return 28 elif month in (4, 6, 9, 11): return 30 else: return 31 # get month number from user month = int(input('Enter the month (1-12): ')) # print the result print('Number of days in the month:', num_days_in_month(month))"},{"prompt":"Create a Python function for converting infix to postfix notation. [2+3*5, 94*2+7, (5+2)*3]","completion":"def infix_to_postfix(infix_expr): stack = [] output = [] # Iterate through the characters of the expression for i in infix_expr: # Push opening brackets onto the stack if i == '(': stack.append(i) # Push operators onto the stack elif i in ['+', '-', '*', '/']: stack.append(i) # Pop and add to output when a closing bracket is found elif i == ')': while len(stack) != 0 and stack[-1] != '(': output.append(stack.pop()) # Pop opening bracket if len(stack) != 0 and stack[-1] == '(': stack.pop() # Add numbers to output else: output.append(i) # Pop remaining operators on the stack while len(stack) != 0: output.append(stack.pop()) return \\"\\".join(output) # Test infix_exprs = [\\"2+3*5\\", \\"9-4*2+7\\", \\"(5+2)*3\\"] for infix_expr in infix_exprs: postfix_expr = infix_to_postfix(infix_expr) print(\\"Infix expression: {} Postfix expression: {}\\".format(infix_expr, postfix_expr))"},{"prompt":"Create a Python program to check for anagrams of a string. listen, silent","completion":"def anagramCheck(str1, str2): if (len(str1) != len(str2)): return False str1 = sorted(str1) str2 = sorted (str2) # Compare each character in str1 with # each character in str2 for i in range( len( str1 ) ): if (str1[i] != str2[i]): return False return True"},{"prompt":"Create a program in Python to calculate the Euclidean distance between two points. x1 = 2 y1 = 3 x2 = 6 y2 = 8","completion":"import math x1 = 2 y1 = 3 x2 = 6 y2 = 8 distance = math.sqrt( (x2 - x1)**2 + (y2 - y1)**2 ) print(distance)"},{"prompt":"Generate a Python function to determine whether a given string is a palindrome.","completion":"def is_palindrome(string): left, right = 0, len(string) - 1 while right >= left: if not string[left] == string[right]: return False left += 1 right -= 1 return True"},{"prompt":"Design and provide a Python function to compute the nth Fibonacci number","completion":"def Fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return Fibonacci(n-1) + Fibonacci(n-2)"},{"prompt":"Create a python program to convert a string of HTML text into valid XML. No inpu","completion":"from xml.dom import minidom def html_to_xml(html_text): '''This function will convert a string of HTML text into valid XML.''' # Locate all HTML tags html_tags = re.findall('<[^>]+>', html_text) # Create XML documents doc = minidom.Document() root_tag = doc.createElement('xmlroot') doc.appendChild(root_tag) # Append each HTML tag to the XML document for tag in html_tags: xml_tag = doc.createElement(tag) root_tag.appendChild(xml_tag) # Return XML string return doc.toprettyxml(indent=\\" \\", newl=\\"n\\")"},{"prompt":"Create a deep learning model for sentiment analysis powered by Python TensorFlow. Not applicable","completion":"import tensorflow as tf from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences import matplotlib.pyplot as plt # load the dataset data = pd.read_csv('./sentiment_data.csv') x = data['text'].tolist() y = data['label'].tolist() # create an instance of the Tokenizer class tokenizer = Tokenizer(num_words=None, lower=True) tokenizer.fit_on_texts(x) # prepare the sequences train_sequences = tokenizer.texts_to_sequences(x) lengths = [len(x) for x in train_sequences] # pad the sequences train_padded = pad_sequences(train_sequences) # create and train the model model = tf.keras.Sequential([ tf.keras.layers.Embedding(tokenizer.num_words, 128, trainable=True), tf.keras.layers.LSTM(64, activation='tanh'), tf.keras.layers.Dense(1, activation='sigmoid') ]) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) history = model.fit( train_padded, y, batch_size=32, epochs=10, validation_split=0.2 )"},{"prompt":"Create a python program to calculate the mean of 3 numbers.","completion":"def calculate_mean(num1, num2, num3): mean = (num1 + num2 + num3) / 3 return mean"},{"prompt":"dentify all bugs in the following Python code and suggest fixes. a = input('Enter a number: ') b = input('Enter a number: ') if a > b print('a is greater than b')","completion":"a = int(input('Enter a number: ')) b = int(input('Enter a number: ')) if a > b: print('a is greater than b')"},{"prompt":"Generate a Python programmethod to perform left rotation of an array","completion":"def left_rotate_array(arr, d): n = len(arr) if d % n == 0: return for _ in range(d): i = 0 temp = arr[0] for i in range(n - 1): arr[i] = arr[i + 1] arr[n - 1] = temp if __name__ == '__main__': arr = [1, 2, 3, 4, 5] d = 2 left_rotate_array(arr, d) print(arr)"},{"prompt":"Write a Python code to add two numbers using bitwise operations and print the result.","completion":"def add_numbers(x, y): while (y != 0): carry = x & y x = x ^ y y = carry << 1 return x num1 = 10 num2 = 5 res = add_numbers(num1, num2) print(res)"},{"prompt":"Generate a Python script that takes a list of integers and prints out the sum of their squares. data: [1, 2, 3]","completion":"data = [1, 2, 3] sum = 0 for number in data: sum += number ** 2 print(f\\"The sum of the squares of the given numbers is {sum}.\\")"},{"prompt":"Write a Python program to generate a random string of length n from a set of characters consisting of lowercase (az) and uppercase (AZ). n = 7","completion":"import string import random length = 7 chars = string.ascii_letters random_string = ''.join(random.choice(chars) for x in range(length)) print(random_string)"},{"prompt":"Create a Python script to parse a list of IP addresses into readable fields. IPs = [123.235.123.245, 54.72.56.14, 182.193.146.172]","completion":"import re IPs = [\\"123.235.123.245\\", \\"54.72.56.14\\", \\"182.193.146.172\\"] for ip in IPs: ip_parts = ip.split('.') octet1 = ip_parts[0] octet2 = ip_parts[1] octet3 = ip_parts[2] octet4 = ip_parts[3] print(f'The first octet is {octet1}, the second is {octet2}, the third is {octet3}, and the fourth is {octet4}.')"},{"prompt":"Create a Python script that prints numbers from 1 to 10, one number per line with a delay of 1 second.","completion":"import time for i in range(1, 11): print(i) time.sleep(1)"},{"prompt":"Construct an algorithm in Python to sort the characters of a string in alphabetical order.","completion":"def sort_string(string): # convert string to list chars = list(string) # sort the list chars.sort() # return the sorted string return ''.join(chars) sorted_string = sort_string('abzcdr') print(sorted_string)"},{"prompt":"Generate a Python dictionary from two given lists. The dictionary should contain a list of keys and the corresponding value for each key should be the element from the second list. keys = [apple, orange, pear] values = [1, 2, 3]","completion":"my_dictionary = dict(zip(keys, values))"},{"prompt":"Generate a Python function to find all anagrams of a given string in a given list of strings.","completion":"def find_anagrams(string, words): anagrams = [] for word in words: if sorted(word) == sorted(string): anagrams.append(word) return anagrams"},{"prompt":"mplement the A* search algorithm with minimum cost first in Python.","completion":"def minimum_cost_first(start, end): fringe = [[start, 0]] visited = set() cost = {} while fringe: node = fringe.pop(0) visited.add(node[0]) if node[0] == end: return cost[node[0]] edges = graph[node[0]] for edge in edges: edge_cost = node[1] + edge[1] if edge[0] not in visited and (edge[0] not in cost or edge_cost < cost[edge[0]]): cost[edge[0]] = edge_cost fringe.append([edge[0], edge_cost]) fringe.sort(key=lambda x:x[1])"},{"prompt":"Create a webscraping script with Python to extract information from a website with 20 thousand pages. Example website: https://example.com","completion":"import requests import bs4 url = 'https://example.com' while True: response = requests.get(url) soup = bs4.BeautifulSoup(response.text, 'html.parser') # Extract information here next_page_url = soup.find('a', {'class': 'next-page'}) if next_page_url: url = next_page_url['href'] else: break"},{"prompt":"Using Python, create a dictionary with the list of elements in a and as the value, the list of elements in b. a = [1, 2, 3, 4] b = [5, 6, 7, 8]","completion":"dict_1 = {1: [5, 6, 7, 8], 2: [5, 6, 7, 8], 3: [5, 6, 7, 8], 4: [5, 6, 7, 8]}"},{"prompt":"Write a Python program to create a tuple with 10 random numbers.","completion":"import random def create_random_tuple(): tup = () while len(tup) < 10: tup += (random.randint(1,100), ) return tup"},{"prompt":"Generate Python code to print the first 10 numbers from 10 to 19, seperated by commas.","completion":"for i in range(10,20): if i == 19: print(i, end = '') else: print(i, end = ', ')"},{"prompt":"Create a Python script to sort the numbers in an array. [2, 4, 5, 1, 3]","completion":"def sort_array(array): array.sort() return array result = sort_array([2, 4, 5, 1, 3]) print(result)"},{"prompt":"Create a SocketServer that can serve multiple clients in Python.","completion":"import socket import threading class SocketServer: # constructor def __init__(self, host, port): self.host = host self.port = port # create socket self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # bind socket self.sock.bind((self.host, self.port)) # accept incoming connections def start(self): self.sock.listen(5) print(\\"Server is listening...\\") while True: conn, addr = self.sock.accept() threading.Thread(target=self.handle_clients, args=(conn, addr)).start() # handlerClient method to handle multiple clients def handle_clients(self, conn, addr): print(\\"Connection established with:\\" + str(addr)) conn.send(\\"Welcome to SocketServer\\".encode()) while True: data = conn.recv(4096).decode() # Do something with received data if not data: break conn.send(data.encode()) conn.close() print(\\"Connection closed with:\\" + str(addr)) host, port = \\"localhost\\", 8080 SocketServer(host, port).start()"},{"prompt":"Convert this Python code to JavaScript code. arr = [3, 4, 5 ,2 ,6, 8, 1]","completion":"let arr = [3, 4, 5, 2, 6, 8, 1]; function bubbleSort(arr) { let swapped; do { swapped = false; for (let i = 0; i < arr.length; i++) { if (arr[i] && arr[i + 1] && arr[i] > arr[i + 1]) { let temp = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = temp; swapped = true; } } } while (swapped); return arr; }"},{"prompt":"Design a program in Python to calculate the sum of prime numbers between 1 to n","completion":"\\"\\"\\" Design a program in Python to calculate the sum of prime numbers between 1 to n \\"\\"\\" # Function to check for prime numbers def isPrime(num): for n in range(2, num): if (num % n) == 0: return False return True # Get the sum of prime numbers from 0 to n def sum_prime_numbers(n): prime_sum = 0 for i in range(2,n+1): if isPrime(i): prime_sum += i return prime_sum if __name__ == '__main__': n = 10 print(f'The sum of prime numbers from 0 to {n} is: {sum_prime_numbers(n)}')"},{"prompt":"Edit the following python class so that it is a singly linked list. class Node: def __init__(self, data): self.data = data self.prev = None self.next = None","completion":"class Node: def __init__(self, data): self.data = data self.next = None"},{"prompt":"Create a function in Python that takes in a list of words and returns the most common pair of consecutive words as a tuple. words = ['content', 'creation', 'digital', 'content', 'management', 'system']","completion":"def most_common_pair(words): count = {} # Iterate through the words for i in range(len(words) - 1): # Create a key by concatenating the two words key = words[i] + ' ' + words[i + 1] # Increment the count for the key if key in count: count[key] += 1 else: count[key] = 1 # Find the word with the highest count max_count = 0 max_pair = None for word, c in count.items(): if c > max_count: max_count = c max_pair = word # Return the word with the highest count return max_pair result = most_common_pair(words) print(result) # Output: \\"content creation\\""},{"prompt":"Rewrite this Python code block to use the reduce function. lst = [4, 1, 3, 2, 6, 5] result = [] for i in range(len(lst)): result.append(lst[i] * 2)","completion":"from functools import reduce lst = [4, 1, 3, 2, 6, 5] result = reduce(lambda a, b: a + [b * 2], lst, [])"},{"prompt":"Create a timer class in Python to create a 5minute countdown","completion":"import time class Timer: # Constructor def __init__(self, duration): self.duration = duration self.start_time = time.time() self.end_time = self.start_time + self.duration # Methods def start(self): while time.time() < self.end_time: minutes, seconds = divmod((self.end_time - time.time()), 60) print(f'{int(minutes)} minutes and {int(seconds)} seconds left') time.sleep(1) print('Timer completed') if __name__ == '__main__': timer = Timer(300) # Timer duration in seconds (5-minute timer in this example) timer.start()"},{"prompt":"Create a function in Python that takes a list of numbers and returns the sum of all of the squared elements in the list. [1, 2, 3, 4]","completion":"def sum_squares(nums): total = 0 for num in nums: total += num**2 return total print(sum_squares([1, 2, 3, 4])) # Output: 30"},{"prompt":"Create an automated security system using Python and Raspberry Pi. Not applicable","completion":"#import necessary modules import os import RPi.GPIO as GPIO import time #Set up Raspberry pi hardware GPIO.setmode(GPIO.BCM) pirPin = 16 GPIO.setup(pirPin, GPIO.IN) #Define Motion detection task def detectMotion(): if GPIO.input(pirPin): print('Motion Detected!') #Do some action if motion is detected time.sleep(1) #Run task while True: detectMotion()"},{"prompt":"Write an algorithm in Python to take a list of numbers and find the two numbers with the greatest difference (the smallest number subtracted from the largest number). [1, 2, 5, 4, 10, 8]","completion":"def get_largest_diff(list_of_numbers): max_number = list_of_numbers[0] min_number = list_of_numbers[0] for num in list_of_numbers: if num > max_number: max_number = num if num < min_number: min_number = num return (max_number - min_number) list_of_numbers = [1,2,5,4,10,8] print(get_largest_diff(list_of_numbers)) # 9"},{"prompt":"Can you design a Python program to sort a list of tuples? [(4,20) , (3,5), (10, 0)]","completion":"def sort_tuples(lst): return sorted(lst, key = lambda x : x[1]) # Driver code tuple_list = [(4, 20), (3, -5), (10, 0)] print(sort_tuples(tuple_list))"},{"prompt":"Generate a code which implements the selection sort algorithm in Python. arr = [5, 4, 6, 8, 1]","completion":"# Selection Sort function def selection_sort(arr): for i in range(len(arr)): # Find the minimum element in remaining unsorted array min_index = i for j in range(i+1, len(arr)): if arr[min_index] > arr[j]: min_index = j # Swap the found minimum element with the first element arr[i], arr[min_index] = arr[min_index], arr[i] # Print the sorted array selection_sort(arr) print (\\"Sorted array is:\\",arr)"},{"prompt":"Write a Python code to print the Fibonacci sequence upto a given number ‘n’.","completion":"def generateFibonacciSequence(n): a = 0 b = 1 print(a, end=\\" \\") print(b, end=\\" \\") for _ in range(2, n + 1): c = a + b a = b b = c print(c, end=\\" \\") generateFibonacciSequence(10)"},{"prompt":"Modify the Python code below to create a function for finding the sum of a list of numbers. list=[1,2,3,4,5]","completion":"def sum_list(nums): total = 0 for num in nums: total += num return total my_list = [1,2,3,4,5] print(sum_list(my_list))"},{"prompt":"Write a function in Python to remove duplicate elements from a given list.","completion":"def remove_duplicates(List): unique_list = [] for x in List: if x not in unique_list: unique_list.append(x) return unique_list"},{"prompt":"Write a Python program that counts the occurrence of each string in a dictionary. data = {foo: 1, bar: 2, baz: 3, foo: 4, bar: 5}","completion":"data = {\\"foo\\": 1, \\"bar\\": 2, \\"baz\\": 3, \\"foo\\": 4, \\"bar\\": 5} counts = {} for key, value in data.items(): if key in counts: counts[key] += 1 else: counts[key] = 1 print(counts)"},{"prompt":"Create a function in Python to calculate the square root of a number. num = 16","completion":"def cal_sqrt(num): return num ** 0.5 num1 = 16 sqrt_of_num1 = cal_sqrt(num1) print(sqrt_of_num1) # 4.0"},{"prompt":"Convert the given code from one programming language to another. //JavaScript code function printHello(){ console.log(Hello World!); }","completion":"#Python code def printHello(): print(\\"Hello World!\\")"},{"prompt":"Generate a Python program which will filter all prime numbers from a list of integers. [19, 32, 13, 35, 22, 17, 27]","completion":"def filter_prime_numbers(l): result = [] for num in l: if is_prime(num): result.append(num) return result def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"prompt":"Design a Python program to solve the following problem: Given two strings of equal length, print the number of differences. str1 = abcd, str2 = abcx","completion":"def diff_characters(str1, str2): diff_count = 0 for i in range(len(str1)): if str1[i] != str2[i]: diff_count += 1 return diff_count str1 = \\"abcd\\" str2 = \\"abcx\\" print(diff_characters(str1, str2)) # Output: 1"},{"prompt":"Write a Python program to create a function for adding two numbers.","completion":"def add(a, b): return a + b"},{"prompt":"Develop a function in Python to calculate the maximum depth of a binary tree.","completion":"\\"\\"\\" Function to calculate the maximum depth of a binary tree \\"\\"\\" class Node: def __init__(self, val): self.val = val self.left = None self.right = None def calculate_depth(root): if root is None: return 0 return 1 + max(calculate_depth(root.left), calculate_depth(root.right)) # Driver Code if __name__ == '__main__': root = Node(1) root.left = Node(2) root.right = Node(3) root.left.left = Node(4) root.left.right = Node(5) print(\\"Maximum Depth of binary tree is\\", calculate_depth(root))"},{"prompt":"Create a Python class that can scrape a given website and return data as a list of dictionaries","completion":"class WebsiteScraper(object): def __init__(self, url): self.url = url def scrapedata(self): response = requests.get(self.url) soup = BeautifulSoup(response.text) scraped_list = [] for item in soup.find_all('div'): data = { 'name': item.get('title'), 'value': item.get_text() } scraped_list.append(data) return scraped_list"},{"prompt":"Generate a Python program to detect the key phrases in a given text. text = I like to eat apples and oranges.","completion":"def detect_key_phrases(text): # use some NLP model to detect the key phrases key_phrases = model.predict(text) return key_phrases"},{"prompt":"Write a Python program to create a line chart displaying numbers from 1 to 15.","completion":"import matplotlib.pyplot as plt data = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] # making the line plot plt.plot(data, '-o') # '-o' is used to connected the dots # naming the x axis plt.xlabel('x - axis') # naming the y axis plt.ylabel('y - axis') # giving a title to my graph plt.title('Line chart of numbers from 1 to 15') # function to show the plot plt.show()"},{"prompt":"Create an algorithm in Python to print all the prime numbers between two given numbers. Range: (2, 10)","completion":"def printPrimeNumbers(start, end): for num in range(start, end + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num) start = 2 end = 10 print(\\"Prime numbers between\\", start, \\"and\\", end, \\"are:\\") printPrimeNumbers(start, end)"},{"prompt":"Design a Python script for querying and visualizing geospatial data.","completion":"The script should accept a search query as an input and query a geospatial database. The output should be a visual representation of the data, such as a map, heatmap or chart."},{"prompt":"Create a data structure to store a list of integers in Python.","completion":"int_list = [] def add_element_to_list(element): int_list.append(element); def remove_element_from_list(element): int_list.remove(element);"},{"prompt":"Generate a Python program to replace a given text segment with another one. Roses are red, violets are blue. replace_word=blue replace_with=red","completion":"def replace_word(txt, replace_word, replace_with): words = txt.split(\\" \\") for i in range(0, len(words)): if (words[i] == replace_word): words[i] = replace_with return \\" \\".join(words) s = \\"Roses are red, violets are blue.\\" print(replace_word(s, \\"blue\\", \\"red\\")) # Roses are red, violets are red."},{"prompt":"Append a number to each element of a list in Python. [1, 2, 3]","completion":"def append_nums(lst): new_list = [x + 10 for x in lst] return new_list print(append_nums([1, 2, 3]))"},{"prompt":"Create a Discord bot that has the capability to respond to questions related to computer programming. Not applicable","completion":"import discord from discord.ext import commands client = commands.Bot(command_prefix='.') @client.event async def on_ready(): print('Bot is ready.') @client.command() async def question(ctx, *, question): responses = { \\"what is python\\": \\"Python is a high-level programming language.\\", \\"who created python\\": \\"Python was created by Guido van Rossum in 1991.\\", \\"what is java\\": \\"Java is a class-based, object-oriented programming language.\\", \\"who created java\\": \\"Java was created by James Gosling in 1995.\\" } await ctx.send(responses.get(question.lower(), \\"I'm sorry, I don't understand.\\")) client.run('<YOUR BOT TOKEN>')"},{"prompt":"Create a program that takes a user's input and checks if the number is prime.","completion":"# Python program to check if user's # input is prime or not # function to check prime number def checkPrime(num): # Looping from 2 to n-1 for i in range(2, num): # Checking if there is a remainder if (num % i) == 0: print(num, \\" is not a prime number\\") break else: print(num, \\" is a prime number\\") # Taking input from user num = int(input(\\"Enter a number to check if it is prime: \\")) # Check the number if prime or not checkPrime(num)"},{"prompt":"Design a program in Python that finds the maximum of two numbers. number1 = 4 number2 = 6","completion":"def find_max(num1, num2): if num1 > num2: return num1 else: return num2 max_num = find_max(number1, number2) print(max_num) # Outputs 6"},{"prompt":"dentify and fix the bug in the following Python code. def remove_duplicates(ls): result = [] for e in ls: if e not in result: result.append(e) return resul","completion":"def remove_duplicates(ls): result = [] for e in ls: if e not in result: result.append(e) return list(set(result))"},{"prompt":"Create a Python program to detect if a given string contains an anagram of a given substring. string: listen substring: silent","completion":"def isAnagramSubstring(string, substring): if len(substring) > len(string): return False chars = {} for char in string[:len(substring)]: if char in chars: chars[char] += 1 else: chars[char] = 1 for char in substring: if char not in chars or chars[char] == 0: return False else: chars[char] -= 1 return True string = \\"listen\\" substring = \\"silent\\" if isAnagramSubstring(string, substring): print(\\"It contains an anagram of the substring\\") else: print(\\"It does not contain an anagram of the substring\\")"},{"prompt":"Create an implementation of Quick Sort in Python which does not repeat elements. Not applicable","completion":"def quickSort(v, low, high): if low < high: # Get the partition index using partition() pi = partition(v, low, high) # Sort the elements before the partition quickSort(v, low, pi - 1) # Sort the elements after the partition quickSort(v, pi + 1, high) def partition(v, low, high): # Select the pivot element pivot = v[high] i = low - 1 # Iterate over the list of integers for j in range(low, high): # Accept the element as part of the partition if it is not repeated if v[j] != pivot: i = i + 1 v[i], v[j] = v[j], v[i] v[i + 1], v[high] = v[high], v[i + 1] return i + 1 # Main function if __name__ == \\"__main__\\": v = [9, 5, 7, 4, 3, 10] n = len(v) quickSort(v, 0, n - 1) print(\\"Sorted array is:\\") for i in range(n): print(v[i], end=\\" \\")"},{"prompt":"Write a Python program to find all numbers in a list and replace them with their product. [1, 2, 3, 4, 5]","completion":"my_list = [1, 2, 3, 4, 5] new_list = [x * y for x, y in zip(my_list, my_list[1:] + [1])]"},{"prompt":"Construct a Python program that calculates the sum of all the items in a given list. [1, 4, 2, 5, 9]","completion":"def sumoflist(list): sum = 0 for i in range(0, len(list)): sum = sum + list[i] return sum list1 = [1, 4, 2, 5, 9] print(sumoflist(list1))"},{"prompt":"Write a Python program that takes a string as input and edits the string to remove all punctuation marks. string = This string contains , a comma, and a % symbol.","completion":"import string def remove_puncutuation(string): translator = str.maketrans('', '', string.punctuation) return string.translate(translator) string = \\"This string contains , a comma, and a % symbol.\\" print(remove_puncutuation(string))"},{"prompt":"Generate Python code to fetch an item from a dictionary based on a given key. dictionary = { name: John, age: 40 } key = name","completion":"dictionary = { \\"name\\": \\"John\\", \\"age\\": 40 } key = \\"name\\" for key, value in dictionary.items(): if key == key: print(value) break"},{"prompt":"Generate a Python object initialization routine for the following object. Object: InventoryItem Attributes: name, cost, quantity","completion":"class InventoryItem: def __init__(self, name, cost, quantity): self.name = name self.cost = cost self.quantity = quantity"},{"prompt":"Create an API in Python that takes in an integer as an input parameter and returns whether the number is prime or not. num: 37","completion":"# Import the required library import math # Check if a number is prime def is_prime(num): if num < 2: return False for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: return False return True # Main program num = int(input('Enter a number: ')) if is_prime(num): print(f'{num} is a prime number') else: print(f'{num} is not a prime number')"},{"prompt":"Create a Python class Person with a name and age.","completion":"class Person(object): def __init__(self, name, age): self.name = name self.age = age"},{"prompt":"Create a program to simulate a 3 body orbital system in Python.","completion":"import numpy as np def simulateSystem(x1, v1, x2, v2, x3, v3, time): G = 6.67 * 10**-11 m1, m2, m3 = 10, 5, 15 # mass of each body (in kilograms) dt = time / 500.0 # time step X = [] Y = [] for t in range(time): # Compute forces r12 = np.sqrt( (x2[0]-x1[0])**2 + (x2[1]-x1[1])**2 ) r23 = np.sqrt( (x3[0]-x2[0])**2 + (x3[1]-x2[1])**2 ) r13 = np.sqrt( (x3[0]-x1[0])**2 + (x3[1]-x1[1])**2 ) F12x = G * m1 * m2 * (x2[0] - x1[0]) / r12**3 F12y = G * m1 * m2 * (x2[1] - x1[1]) / r12**3 F23x = G * m2 * m3 * (x3[0] - x2[0]) / r23**3 F23y = G * m2 * m3 * (x3[1] - x2[1]) / r23**3 F31x = G * m3 * m1 * (x3[0] - x1[0]) / r13**3 F31y = G * m3 * m1 * (x3[1] - x1[1]) / r13**3 # Update position x1[0] += v1[0] * dt x1[1] += v1[1] * dt x2[0] += v2[0] * dt x2[1] += v2[1] * dt x3[0] += v3[0] * dt x3[1] += v3[1] * dt # Update velocity v1[0] += (F12x + F31x) * dt / m1 v1[1] += (F12y + F31y) * dt / m1 v2[0] += (F12x + F23x) * dt / m2 v2[1] += (F12y + F23y) * dt / m2 v3[0] += (F23x + F31x) * dt / m3 v3[1] += (F23y + F31y) * dt / m3 # Store trajectory X.append(x1[0]) Y.append(x1[1]) return X, Y"},{"prompt":"Write an efficient Python function to find the depth of a given binary tree Tree Node structure: class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None Root node of the tree root = TreeNode(1) root.left = TreeNode(2) root.right = TreeNode(3) root.left.left = TreeNode(4) root.left.right = TreeNode(5)","completion":"def max_depth(node): if node is None: return 0 ; else : # Compute the depth of each subtree depth_left = max_depth(node.left) depth_right = max_depth(node.right) # Use the larger one if (depth_left > depth_right): return depth_left+1 else: return depth_right+1 depth = max_depth(root) print (depth)"},{"prompt":"Convert the following JavaScript code to Python const days = [Monday, Tuesday, Wednesday, Thursday, Friday]; days.forEach((day) => { console.log(day); });","completion":"days = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\"] for day in days: print(day)"},{"prompt":"Write a Python function to remove all elements from a given list present in another list. list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6]","completion":"def remove_elements(list1, list2): for item in list2: if item in list1: list1.remove(item) return list1 result = remove_elements([1, 2, 3, 4, 5], [4, 5, 6]) print(result)"},{"prompt":"Construct a program that computes the sum of the first n natural numbers in Python.","completion":"def sum_of_n(n): sum = 0 for i in range(1, n+1): sum += i return sum"},{"prompt":"Write a Python program to append multiple lists into one list. list1 = [2, 3, 4] list2 = [5, 6, 7] list3 = [8, 9, 10]","completion":"list1 = [2, 3, 4] list2 = [5, 6, 7] list3 = [8, 9, 10] list = list1 + list2 + list3 print(list) # Output: [2, 3, 4, 5, 6, 7, 8, 9, 10]"},{"prompt":"Create a Python script to calculate the sum of two integers. 10, 20","completion":"num1 = 10 num2 = 20 sum = num1 + num2 print(\\"The sum of {0} and {1} is {2}\\".format(num1, num2, sum))"},{"prompt":"Create a simple web crawler in Python to count the number of words in a given website.","completion":"# Imports import requests from bs4 import BeautifulSoup # Function to crawl the website def crawl_website(url): # Make a request to the website r = requests.get(url) # Parse the html soup = BeautifulSoup(r.content) # Retrieve all the text text = soup.get_text() # Count the number of words word_count = len(text.split()) return word_count"},{"prompt":"Create a python program to sort list elements in ascending order using the selection sort method. unsortedList = [4,3,2,1]","completion":"unsortedList = [4,3,2,1] for i in range(len(unsortedList)): min_idx = i for j in range(i+1, len(unsortedList)): if unsortedList[min_idx] > unsortedList[j]: min_idx = j unsortedList[i], unsortedList[min_idx] = unsortedList[min_idx], unsortedList[i] print(\\"Sorted list:\\", unsortedList)"},{"prompt":"Develop a Python class that implements a least recently used (LRU) cache.","completion":"class LRUCache: def __init__(self, capacity): self.capacity = capacity self.cache = {} self.lru_list = [] def get(self, key): if key in self.cache: self.lru_list.remove(key) self.lru_list.append(key) return self.cache[key] else: return None def put(self, key, value): self.cache[key] = value if key in self.lru_list: self.lru_list.remove(key) self.lru_list.append(key) if len(self.lru_list) > self.capacity: elementToRemove = self.lru_list.pop(0) del self.cache[elementToRemove]"},{"prompt":"Create a Python program to design a database schema for an ecommerce store. Not applicable","completion":"import sqlite3 conn = sqlite3.connect('ecommerce.db') cursor = conn.cursor() # Create table for products cursor.execute('''CREATE TABLE products ( product_id INTEGER PRIMARY KEY, name VARCHAR(100) NOT NULL, price INTEGER NOT NULL );''') # Create table for orders cursor.execute('''CREATE TABLE orders ( order_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, customer_id INTEGER NOT NULL, quantity INTEGER NOT NULL, FOREIGN KEY (product_id) REFERENCES products(product_id) );''') # Create table for customers cursor.execute('''CREATE TABLE customers ( customer_id INTEGER PRIMARY KEY, name VARCHAR(100) NOT NULL, phone VARCHAR(20) NOT NULL, address VARCHAR(100) NOT NULL );''') conn.commit() conn.close()"},{"prompt":"Generate a program in Python to classify text documents.","completion":"import spacy nlp = spacy.load('en_core_web_sm') def classifier(doc): if doc.text.startswith('http'): return 'Website' elif doc.text.startswith('www'): return 'Website' elif '@' in doc.text: return 'Email' elif '#' in doc.text: return 'Hashtag' elif doc.is_space: return 'Space' else: doc = nlp(doc.text) tokens_no_punct = [token for token in doc if not token.is_punct] token_length = len(tokens_no_punct) if token_length <= 3: return 'Short Text' elif token_length > 3 and token_length <=15: return 'Medium Text' elif token_length > 15: return 'Long Text' if __name__ == '__main__': doc = input('Input your text:') print('Classification: ' + classifier(doc))"},{"prompt":"Write a Python class to store the features of a product. Title Price Model Brand Color","completion":"class Product: def __init__(self, title, price, model, brand, color): self.title = title self.price = price self.model = model self.brand = brand self.color = color def get_title(self): return self.title def set_title(self, title): self.title = title def get_price(self): return self.price def set_price(self, price): self.price = price def get_model(self): return self.model def set_model(self, model): self.model = model def get_brand(self): return self.brand def set_brand(self, brand): self.brand = brand def get_color(self): return self.color def set_color(self, color): self.color = color"},{"prompt":"Create a class in Python to store student information. The class should contain all relevant information including student id, name, email, and contact.","completion":"class Student: def __init__(self, student_id, name, email, contact_no): self.student_id = student_id self.name = name self.email = email self.contact_no = contact_no def get_details(self): return f\\"Student ID: {self.student_id}, Name: {self.name}, Email: {self.email}, Contact No.: {self.contact_no}\\""},{"prompt":"Create a Python program that calculates the longest increasing subsequence of an array. [10, 22, 9, 33, 21, 50, 41, 60, 80]","completion":"def longest_increasing_subsequence(nums): n = len(nums) lengths = [1] * n for i in range(n): for j in range(i): if nums[j] < nums[i]: lengths[i] = max(lengths[i], lengths[j] + 1) longest_increasing_subsequence_length = max(lengths) return longest_increasing_subsequence_length nums = [10, 22, 9, 33, 21, 50, 41, 60, 80] print(longest_increasing_subsequence(nums)) // prints 6"},{"prompt":"Develop a Python program to standardize a given dataset using the zscore normalization technique.","completion":"def standardize(data): mean = data.mean() std = data.std() z_score = (data - mean) / std return z_score"},{"prompt":"Create a document clustering program in Python that groups similar documents together. Not applicable","completion":"from sklearn.feature_extraction.text import TfidfVectori from sklearn.cluster import KMeans # Create tf-idf vectors for each document vectorizer = TfidfVectorizer(stop_words='english') X = vectorizer.fit_transform(documents) # Generate the clusters true_k = 5 model = KMeans(n_clusters=true_k, init='k-means++', max_iter=100, n_init=1) model.fit(X) # Show the top terms for each cluster print(\\"Top terms per cluster:\\") order_centroids = model.cluster_centers_.argsort()[:, ::-1] terms = vectorizer.get_feature_names() for i in range(true_k): print(\\"Cluster %d:\\" % i) for ind in order_centroids[i, :10]: print(' %s' % terms[ind]) print()"},{"prompt":"Design a program in Python to display the time in a digital format.","completion":"from time import strftime def digital_clock(): current_time = strftime(\\"%H:%M:%S\\") print(current_time) digital_clock()"},{"prompt":"Build a Python function that takes a single list of numbers and performs an insertion sort. The function should return a sorted list. [4, 1, 8, 11, 15]","completion":"def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i] j = i-1 while j >= 0 and key < arr[j] : arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr insertion_sort([4,1,8,11,15]) # Output [1, 4, 8, 11, 15]"},{"prompt":"mplement a function in Python that takes a 2dimensional list of integers and returns a list with the same shape, containing the sums of previous elements from left to right. [[1, 2, 1], [2, 3, 4], [1, 4, 6]]","completion":"def accumulator_add(matrix): output_matrix = [] #iterates over all sublists for row in matrix: #creates a new sublist to store the sums output_sublist = [] sum = 0 #iterates over all elements in the sublist for sublist_element in rows: #adds the element to the total sum sum +=sublist_element #appends the updated total sum to the new sublist output_sublist.append(sum) #appends the new sublist to the new list output_matrix.append(output_sublist) #returns the new matrix return output_matrix"},{"prompt":"Generate a random 10 character string using Python.","completion":"import string import random def generate_random_string(length): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(length)) random_string = generate_random_string(10) print(random_string)"},{"prompt":"Create a Python program which prints the top three elements in a given list [10, 4, 45, 34, 99, 24, 10]","completion":"def top_three(list): sorted_list = sorted(list, reverse = True) return sorted_list[:3]"},{"prompt":"Create a Python script to divide two sets and store the results in a new set. Set 1: {2, 4, 6, 8, 10} Set 2: {3, 5, 7, 9}","completion":"set1 = {2, 4, 6, 8, 10} set2 = {3, 5, 7, 9} # Divide two sets and store the results in a new set new_set = set1.difference(set2) # Print the result print(new_set) # Output: {2, 4, 6, 8, 10}"},{"prompt":"Compose a program in Python to retrieve the most frequent letter in a given string. String: Programmers","completion":"def most_frequent(input_string): # Convert input string to a dictionary char_frequency = {} for n in input_string: keys = char_frequency.keys() if n in keys: char_frequency[n] += 1 else: char_frequency[n] = 1 # Sort the dictionary by value in descending order max_value = max(char_frequency.values()) max_char = [element for element in char_frequency if char_frequency[element] == max_value] # Print the most frequent letter if len(max_char) > 1: print(\\"Most frequent character: \\" + \\",\\".join(max_char)) else: print(\\"Most frequent character: \\" + max_char[0]) most_frequent(\\"Programmers\\")"},{"prompt":"Convert a given list of integers into a binary search tree in Python. [2, 6, 1, 4, 3, 5, 7]","completion":"class Node: def __init__(self, data): self.left = None self.right = None self.data = data def insert(root, node): if root is None: root = node else: if root.data < node.data: if root.right is None: root.right = node else: insert(root.right, node) else: if root.left is None: root.left = node else: insert(root.left, node) def build_tree(input_list): root = Node(input_list[0]) for i in range(1, len(input_list)): insert(root, Node(input_list[i])) return root # Test List input_list = [2, 6, 1, 4, 3, 5, 7] # Use the above function root = build_tree(input_list) def inOrder(root): if root is not None: inOrder(root.left) print(root.data) inOrder(root.right) inOrder(root) # Output: 1 2 3 4 5 6 7"},{"prompt":"Write a code to implement a priority queue data structure in Python.","completion":"\\"\\"\\" Implement a priority queue data structure in Python. \\"\\"\\" class PriorityQueue: def __init__(self): self.items = [] def insert(self, data, priority): # Insert item data with priority p in the priority queue. item = (data, priority) self.items.append(item) self.items = sorted(self.items, key = lambda item: item[1]) def pop(self): # Remove the highest priority item from the queue. return self.items.pop(0)[0] def peek(self): # Get the highest priority item without removing it. return self.items[0][0]"},{"prompt":"Write a Python code for a program that takes an integer as an input and prints the number of divisors for that integer.","completion":"def count_divisors(number): divisors = 0 for i in range(1, number+1): if number % i == 0: divisors += 1 print(\\"Number of divisors:\\", divisors)"},{"prompt":"Develop a python program that checks if a given word is consonant or not. word: hello","completion":"def is_consonant(word): # List containing all consonants consonants = [\\"b\\",\\"c\\",\\"d\\",\\"f\\",\\"g\\",\\"h\\",\\"j\\",\\"k\\",\\"l\\",\\"m\\",\\"n\\",\\"p\\",\\"q\\",\\"r\\",\\"s\\",\\"t\\",\\"v\\",\\"x\\",\\"z\\"] for char in word: if char in consonants: return True return False # Example print (is_consonant(\\"hello\\")) # False"},{"prompt":"Write a Python program to optimize a given machine learning model using hyperparameter tuning. Model: Random Forest Classifier","completion":"from sklearn.model_selection import RandomizedSearchCV from sklearn.ensemble import RandomForestClassifier # Number of trees in random forest n_estimators = [int(x) for x in np.linspace(start=100, stop=700, num=7)] # Number of features to consider at every split max_features = ['auto', 'sqrt'] # Maximum number of levels in tree max_depth = [int(x) for x in np.linspace(10, 60, num=6)] max_depth.append(None) # Minimum number of samples required to split a node min_samples_split = [2, 5, 10] # Minimum number of samples required at each leaf node min_samples_leaf = [1, 2, 4] # Method of selecting samples for training each tree bootstrap = [True, False] # Create the random grid random_grid = {'n_estimators': n_estimators, 'max_features': max_features, 'max_depth': max_depth, 'min_samples_split': min_samples_split, 'min_samples_leaf': min_samples_leaf, 'bootstrap': bootstrap} # Use the random grid to search for best hyperparameters # First create the base model to tune rf = RandomForestClassifier() # Random search of parameters, using 3 fold cross validation, # search across 100 different combinations, and use all available cores rf_random = RandomizedSearchCV(estimator=rf, param_distributions=random_grid, n_iter=100, cv=3, verbose=2, random_state=0, n_jobs=-1) # Fit the random search model rf_random.fit(X_train, y_train) # Print best hyperparameters print(\\"Best hyperparameters:\\", rf_random.best_params_) §§ COM"},{"prompt":"Generate a python function to optimize a given function","completion":"def optimize_function(func): optimizer = tf.keras.optimizers.Adam() for step in range(steps): with tf.GradientTape() as tape: y_pred = func() # compute loss loss = some_loss(y_true, y_pred) gradients = tape.gradient(loss, func.variables()) optimizer.apply_gradients(zip(gradients, func.variables())) return func"},{"prompt":"Write a Python program to create a customised calculator that can perform the chosen operation Operations: Addition and Subtractio","completion":"# Program to create a customised calculator def customised_calculator(): operation = input(\\"Please specify the operation you want to perform (add or subtract): \\") # take input from the user num1 = float(input(\\"Enter first number: \\")) num2 = float(input(\\"Enter second number: \\")) # check the operation if operation == 'add': sum = num1 + num2 print('Sum of {0} and {1} is {2}'.format(num1, num2, sum)) elif operation == 'subtract': difference = num1 - num2 print('Difference of {0} and {1} is {2}'.format(num1, num2, difference)) else: print('Please enter a valid operation') # invoke the function customised_calculator()"},{"prompt":"Create an interactive program to Convert text to Pig Latin in Python. Hello World","completion":"# Function to convert a sentence to Pig Latin def toPigLatin(sentence): words = sentence.split() pigLatin = [] for word in words: firstLetter = word[0] if firstLetter in 'aeiou': pigLatinWord = word + 'way' else: pigLatinWord = word[1:] + firstLetter + 'ay' pigLatin.append(pigLatinWord) return ' '.join(pigLatin) # Get a sentence from the user sentence = input('Enter a sentence: ') # Convert the sentence to Pig Latin pigLatin = toPigLatin(sentence) # Print the result print(pigLatin)"},{"prompt":"Optimize a program that uses a Web Scraper to fetch data from a website. Not applicable","completion":"# Import Python modules import os import lxml import requests import html5lib # Retrieve the HTML url = 'https://www.example.com/' r = requests.get(url) html_doc = r.text # Parse the HTML tree = lxml.html.fromstring(html_doc) links = tree.xpath('//a/@href') # Fetch the data from each link data = [] for link in links: try: r = requests.get(link) data.append(r.text) except: pass # Store data in a file file_name = os.path.join('data', 'data.txt') with open(file_name, 'w') as f: f.write('n'.join(data))"},{"prompt":"Solve this recursion problem in python. Problem: Given an array of integers, find the sum of its elements. For example, if the array ar = [1, 2, 3], then 1 + 2 + 3 = 6.","completion":"def sum(arr): if not arr: return 0 else: return arr[0] + sum(arr[1:])"},{"prompt":"Using the data provided, write a program in Python to determine which city is furthest north. New York,USA,40.71,74.00 London,UK,0.13,51.50 Paris,France,2.35,48.85","completion":"cities = [[\\"New York\\", \\"USA\\", 40.71,-74.00], [\\"London\\", \\"UK\\", -0.13, 51.50], [\\"Paris\\", \\"France\\", 2.35, 48.85]] def find_furthest_north(cities): furthest_north = cities[0] for city in cities: if city[2] > furthest_north[2]: furthest_north = city return furthest_north furthest_north = find_furthest_north(cities) print(furthest_north) # prints [\\"London\\", \\"UK\\", -0.13, 51.50]"},{"prompt":"Create a program in Python that prints out a list of all items located within a specified directory.","completion":"import os for item in os.listdir(): print(item)"},{"prompt":"Create a Python program to calculate the sum of all digits of a number number = 2345","completion":"def sum_digits(number): total = 0 while number > 0: total += number % 10 number //= 10 return total print(\\"Sum of digits:\\",sum_digits(2345))"},{"prompt":"Design an algorithm in Python to estimate future house prices.","completion":"import pandas as pd from sklearn.linear_model import LinearRegression # Read the data data = pd.read_csv('housing.csv') # Split into X and y X = data.drop('price', axis=1) y = data['price'] # Initialize the model model = LinearRegression() # Fit the model to the training data model.fit(X, y) # Estimate future prices using the model predictions = model.predict(X)"},{"prompt":"Create a Python function to detect if a string contains a duplicate character.","completion":"def contains_duplicate(s): counts = dict() for ch in s: if ch in counts: return True counts[ch] = 1 return False"},{"prompt":"mplement a decision tree classifier in Python. Dataset: Name, Age, Pet John, 20, Cat Jill, 30, Dog Kyle, 22, Fish","completion":"import pandas as pd from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score, confusion_matrix data = pd.read_csv(\\"data.csv\\") X = data[['Name', 'Age', 'Pet']] y = data['Label'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=0) dtree_model=DecisionTreeClassifier(max_depth=2).fit(X_train,y_train) dtree_predictions=dtree_model.predict(X_test) accuracy_score=accuracy_score(y_test,dtree_predictions) print(accuracy_score) conf_matrix = confusion_matrix(y_test,dtree_predictions) print(conf_matrix)"},{"prompt":"Modify the existing python program to fulfill the following purpose Given a list of strings, find and print the most frequent string in the list.","completion":"def most_frequent(lst): max = 0 frequent = lst[0] for item in lst: freq = lst.count(item) if freq > max: max = freq frequent = item return frequent"},{"prompt":"Create a Python program to search for a particular string in an array of strings and return the indices of the matches. [hello, world, hello, world], world","completion":"def find_string(arr, query): indices = [] for i in range(len(arr)): if arr[i] == query: indices.append(i) return indices print(find_string([\\"hello\\", \\"world\\", \\"hello\\", \\"world\\"], \\"world\\"))"},{"prompt":"Write a Python program to calculate the probability of getting heads in a given number of tosses of a fair coin.","completion":"def calc_prob(n): return (1/2)**n"},{"prompt":"Create a Python program to generate a random string composed of 8 special characters (e.g., @#%). Not applicable","completion":"import random def generate_random_string(): # Inputs: None # Output: Random special character string special_chars = [x for x in '@#%^&*'] random_string = \\"\\" for _ in range(8): random_string += random.choice(special_chars) return random_string print(generate_random_string())"},{"prompt":"Create a python program to filter a list of numbers to include only the prime numbers [2, 3, 7, 11, 12, 15]","completion":"def isPrime(n): for i in range(2,n): if n % i == 0: return False return True numbers = [2, 3, 7, 11, 12, 15] primes = filter(isPrime, numbers) print('Prime numbers are:') print(list(primes))"},{"prompt":"Optimize a linear programming problem in Python using the scipy.optimize library. Objective Function: max 3x + 4y Constraints: 2x + y ≤ 10 x + 2y ≤ 10 x, y ≥ 0","completion":"import numpy as np from scipy.optimize import linprog # Define objective function c = np.array([3,4]) # Define constraints A = np.array([[2,1], [1,2]]) b = np.array([10,10]) # Define bounds x0_bnds = (0, None) x1_bnds = (0, None) # Apply constraint res = linprog(c, A_ub=A, b_ub=b, bounds=(x0_bnds, x1_bnds), options={\\"disp\\": True}) # Print result print(\\"Optimal value:\\", res.fun, \\"nX =\\", res.x) # Output: Optimal value: 13.333333333333334 # X = [3.33333333 2.33333333]"},{"prompt":"Given a string S, write a Python program to find the longest substring of S which contains distinct characters. stringS = abcabcbb","completion":"def longest_distinct_substring(s): longest = 0 # creating a dictionary seen = {} start = 0 for i, char in enumerate(s): if char in seen and start <= seen[char]: start = seen[char] + 1 else: longest = max(longest, i - start + 1) seen[char] = i return longest print(longest_distinct_substring(\\"abcabcbb\\")) # Output: 3 (the longest substring is \\"abc\\")"},{"prompt":"Create a python code to implement the Edit Distance algorithm to compare two strings and output their edit distance.","completion":"\\"\\"\\" Create a Python code to implement the \\"Edit Distance\\" algorithm to compare two strings and output their edit distance. \\"\\"\\" def edit_distance(str1, str2): # create a matrix for storing the results matrix = [[0 for x in range(len(str1) + 1)] for x in range(len(str2) + 1)] # initialize the matrix for i in range(len(str2) + 1): matrix[i][0] = i for j in range(len(str1) + 1): matrix[0][j] = j # fill the matrix for i in range(1, len(str2) + 1): for j in range(1, len(str1) + 1): if str2[i - 1] == str1[j - 1]: matrix[i][j] = matrix[i - 1][j - 1] else: matrix[i][j] = min(matrix[i - 1][j], matrix[i][j - 1], matrix[i - 1][j - 1]) + 1 return matrix[len(str2)][len(str1)]"},{"prompt":"Create a function in Python which takes a list and returns a list of unique elements in ascending order. [15, 2, 4, 15, 46, 4, 3, 21]","completion":"def unique_list(list): new_list = list(set(list)) new_list.sort() return new_list print (unique_list([15, 2, 4, 15, 46, 4, 3, 21]))"},{"prompt":"Write a Python program that uses objectoriented programming to construct a calendar containing several dates and events. Jaunch conference on 4 April 2020, Mothers Day on 10 May 2020","completion":"class Calendar: def __init__(self): self.events = {} def add_event(self, date, description): if date in self.events: self.events[date].append(description) else: self.events[date] = [description] def list_events(self): for date, descriptions in self.events.items(): for description in descriptions: print(date, \\":\\", description) calendar = Calendar() calendar.add_event(\\"04-04-2020\\", \\"Jaunch conference\\") calendar.add_event(\\"10-05-2020\\", \\"Mothers Day\\") calendar.list_events()"},{"prompt":"Write a function in Python to generate a random integer between two numbers, a and b. a = 4 b = 15","completion":"import random def random_int_generator(a, b): return random.randint(a, b)"},{"prompt":"Design and implement a custom hashmap data structure using python.","completion":"class HashMap: def __init__(self, size): self.size = size self.map = [None] * size def _get_hash(self, key): hashCode = 0 for char in key: hashCode += ord(char) return hashCode % self.size def add(self, key, value): keyHash = self._get_hash(key) keyValue = [key, value] if self.map[keyHash] is None: self.map[keyHash] = list([keyValue]) return True else: for pair in self.map[keyHash]: if pair[0] == key: pair[1] = value return True self.map[keyHash].append(keyValue) return True def get(self, key): keyHash = self._get_hash(key) if self.map[keyHash] is None: return None else: for pair in self.map[keyHash]: if pair[0] == key: return pair[1] return None"},{"prompt":"Generate an array in Python with a range of numbers from 0 to 10, including 0 and 10.","completion":"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"},{"prompt":"Create a basic Python program that clusters tweets by its similarity. # A sample tweet This is a sample twee","completion":"import re import nltk from sklearn.feature_extraction.text import TfidfVectorizer # Preprocess the tweet def preprocess(text): text = text.lower() text = re.sub(r'[^a-zA-Z0-9s]', '', text) tokens = nltk.word_tokenize(text) tokens = [token for token in tokens if token not in stopwords.words('english')] text = \\" \\".join(tokens) return text # Create TF-IDF vectorizer tfidf_vectorizer = TfidfVectorizer() # Vectorize the sample tweet vectorized_text = tfidf_vectorizer.fit_transform(preprocess(tweet)).todense() from sklearn.cluster import KMeans # Create a cluster of tweets number_of_clusters = 3 clusters = KMeans(n_clusters=number_of_clusters, random_state=0).fit(vectorized_text) # Print the cluster for the sample tweet print(clusters.predict(vectorized_text))"},{"prompt":"Write a function in Python that prints all the prime numbers between two given numbers inclusive. Start: 15 End: 25","completion":"def printPrimeNumbers(start, end): for num in range(start, end+1): # base case if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num) # Driver Code start = 15 end = 25 printPrimeNumbers(start, end) # Output: # 17 # 19 # 23 # 25"},{"prompt":"Create a script in Python to convert a given integer to its binary equivalent. 19","completion":"def dec_to_bin(num): if num > 1: dec_to_bin(num // 2) print(num % 2,end = '') num = 19 dec_to_bin(num)"},{"prompt":"Write a Python script to transform a given list of integers into a single integer. int_list = [1,2,3,4,5]","completion":"def int_to_int(int_list): return int(''.join(str(e) for e in int_list))"},{"prompt":"Write a Python program that finds the sum of squares of all numbers between 1 and 10","completion":"def sum_of_squares(start, end): \\"\\"\\" This function calculates the sum of squared numbers from start to end Input: start: starting number end: ending number Output: total: total sum of squares \\"\\"\\" total = 0 for num in range(start, end + 1): total += num ** 2 return total total_sum = sum_of_squares(1, 10) print(total_sum)"},{"prompt":"Convert the following Python code to JavaScript. x = 3 if x >= 3: print(x is greater than or equal to 3)","completion":"let x = 3; if(x >= 3){ console.log('x is greater than or equal to 3'); }"},{"prompt":"Compose a Python program that calculates the probability of an event given two independent events.","completion":"def probability(p, q): return p * q def calculate_probability(p, q): \\"\\"\\" Calculates the probability of an event given two independent events. Parameters ---------- p : float Probability of one event. q : float Probability of another event. Returns ------- float The probability of the combined event. \\"\\"\\" return probability(p, q)"},{"prompt":"Generate a Python program that adds a given number to an array. Number: 5","completion":"def add_to_array(num, array): for i in range(len(array)): array[i] += num return array"},{"prompt":"Generate a Python code that prints the Fibonacci numbers up to n. 10","completion":"def Fibonacci(n): a = 0 b = 1 if n == 1: print(a) else: print(a) print(b) for i in range(2,n): c = a + b a = b b = c print(b) Fibonacci(10)"},{"prompt":"Create a program to remove all the duplicate elements from the given array in Python. [3, 5, 7, 9, 3, 5, 7]","completion":"def remove_duplicates(arr): result = [] seen = set() for item in arr: if item not in seen: seen.add(item) result.append(item) return result print(remove_duplicates([3, 5, 7, 9, 3, 5, 7]))"},{"prompt":"Develop a Python code to convert the given binary string to its corresponding integer value. '100100'","completion":"def binary_to_int(binary): result = 0 for i in range(len(binary)): digit = binary[i] if digit == '1': result = result + pow(2, len(binary)-i-1) return result binary_to_int('100100') # returns 36"},{"prompt":"Construct a python program that takes a positive integer as input and outputs its factorial Input Number: 5","completion":"def factorial(inp): if inp == 0: return 1 else: return inp*factorial(inp-1)"},{"prompt":"Create a Python method that takes a list and a value as arguments, and returns the index of the value if it exists in the list. list = [2, 4, 6, 8] value = 6","completion":"def find_index(list, value): for i in range(len(list)): if list[i] == value: return i return -1"},{"prompt":"Develop a Python program to find the sum of first n even numbers. 7","completion":"def find_sum(n): sum = 0 for i in range(1, n+1): if i % 2 == 0: sum += i return sum n = 7 print(\\"The sum of first n even numbers is:\\", find_sum(n))"},{"prompt":"Write a Python code to sort a dictionary by a specific key. numbers = { '1': 50, '2': 60, '3': 20, '4': 70 }","completion":"numbers = { '1': 50, '2': 60, '3': 20, '4': 70 } sorted_dictionary = sorted(numbers.items(), key=lambda x: x[1]) print(sorted_dictionary)"},{"prompt":"Write a code to compare two strings in Python and display their similarity score. str1 = 'The quick brown fox jumps over the lazy dog' str2 = 'The fast yellow rabbit jumps on top of the tired lion'","completion":"def get_similarity_score(str1, str2): tokens1 = str1.split() tokens2 = str2.split() common_words = set(tokens1) & set(tokens2) all_words = set(tokens1) | set(tokens2) return len(common_words) / len(all_words) str1 = \\"The quick brown fox jumps over the lazy dog\\" str2 = \\"The fast yellow rabbit jumps on top of the tired lion\\" similarity_score = get_similarity_score(str1, str2) print(\\"Similarity score:\\", similarity_score)"},{"prompt":"Create a Python program to identify duplicates in an array of integers. The program should output the number of duplicate elements and the frequency of each duplicate element. [1, 2, 2, 3, 4, 4, 4, 5]","completion":"from collections import Counter # Input list arr = [1, 2, 2, 3, 4, 4, 4, 5] # Output frequencies of duplicates counter = Counter(arr) for num in counter: if (counter[num] > 1): print('{} appears {} times'.format(num, counter[num])) # Output count of duplicates doubles = [num for num in arr if arr.count(num) > 1] print('Duplicates found: {}'.format(len(set(doubles))))"},{"prompt":"Generate code in Python to traverse a tree in preorder.","completion":"def preOrder(tree): # Root print(tree.data) # Left if tree.left is not None: preOrder(tree.left) # Right if tree.right is not None: preOrder(tree.right)"},{"prompt":"Write a Python program to classify an animal as either a mammal or a reptile based on a set of five features features = [0,1,1,0,1] Mammals: 0 Warm blooded, 1 Fur/hair, 1 Eat meat, 0 Cold blooded, 1 Lay eggs Reptiles: 0 Cold blooded, 1 Scaly skin, 1 Dig underground, 1 Eat plants, 0 Quadruped","completion":"mammal_score = 0 reptile_score = 0 if features[0] == 0: mammal_score += 1 if features[1] == 1: mammal_score += 1 if features[2] == 1: mammal_score += 1 if features[3] == 1: reptile_score += 1 if features[4] == 0: reptile_score += 1 if mammal_score > reptile_score: animal_class = \\"Mammal\\" else: animal_class = \\"Reptile\\" print(animal_class)"},{"prompt":"Write a Python program for linear regression using gradient descent. A 2dimensional sample dataset: X = [1, 2, 3, 4] Y = [2, 7, 3, 8]","completion":"import numpy as np def gradient_descent(x, y, alpha, num_iters): # Initialize theta theta = np.ones(x.shape[1]) m = len(y) J_history = list() # Perform Gradient Descent for _ in range(num_iters): # Compute Hypothesis h = np.dot(x, theta) # Compute errors error = h - y # Compute gradient grad = np.dot(x.T, error) / m # Update theta theta = theta - alpha * grad # Save cost function J_history.append(calculate_cost(h, y)) return theta, J_history def calculate_cost(h, y): m = len(y) return np.sum(np.power(h-y, 2)) / (2*m)"},{"prompt":"Generate a Python program that takes a positive integer as input and returns a boolean indicating whether it is a prime number or not.","completion":"def is_prime(n): if n < 2: return False for i in range(2, n): if n % i == 0: return False return True"},{"prompt":"Create a Python program that takes in a sentence as an input and prints out the same sentence in Pig Latin. The quick brown fox","completion":"def pig_latin(sentence): words = sentence.split() translated_words = [] for word in words: translated_words.append(word[1:] + word[0] + \\"ay\\") return \\" \\".join(translated_words) sentence = input(\\"Enter a sentence to translate: \\") print(pig_latin(sentence))"},{"prompt":"Write a Python program to calculate the mean and standard deviation of an array of numbers. [2,3,4,5,7]","completion":"mean = 4.4 std = 1.6 import numpy as np arr = np.array([2, 3, 4, 5, 7]) mean = np.mean(arr) std = np.std(arr) print('mean =', mean) print('std =', std)"},{"prompt":"Generate a program for searching for a pattern in a string using Python and the Boyer Moore pattern matching algorithm. Input string: Hello World! Pattern to search for: World","completion":"\\"\\"\\" Search for a pattern in a string using the Boyer Moore pattern matching algorithm \\"\\"\\" def boyer_moore(text, pattern): # Initialize the index buffer and the location of the target pattern index_buffer = {} index = -1 # Preprocess the patterns for i in range(len(pattern) - 1, -1, -1): if pattern[i] in index_buffer: index_buffer[pattern[i]].append(i) else: index_buffer[pattern[i]] = [i] # Search through the text until the target pattern is found while index == -1: for i in range(0, len(pattern)): if pattern[i] != text[i]: if pattern[i] in index_buffer: try: ind = index_buffer[pattern[i]][-1] except: return -1 i = i - (ind - i) else: i = i + len(pattern) if pattern == text[0:len(pattern)]: index = 0 else: text = text[1:] return index # Test text = \\"Hello World!\\" pattern = \\"World\\" index = boyer_moore(text, pattern) if index >= 0: print(\\"Pattern found at index \\" + str(index)) else: print(\\"Pattern not found\\")"},{"prompt":"mplement a sorting algorithm in Python to sort an array of integers. ary = [5,7,3,1,9]","completion":"def sort(ary): # Iterate over each item in the array for i in range(len(ary)): min_index = i # Find the minimum value in the subarray from i to the end of the array for j in range(i + 1, len(ary)): if ary[j] < ary[min_index]: min_index = j # Swap the values ary[i], ary[min_index] = ary[min_index], ary[i] sort(ary) print(ary) # Output: [1, 3, 5, 7, 9]"},{"prompt":"Develop a Python program that reads in a string and reverses the words in it maintaining their order. This is a sample string","completion":"def reverseWords(str): words = str.split(\\" \\") newWords = [word[::-1] for word in words] newString = \\" \\".join(newWords) return newString print(reverseWords(\\"This is a sample string\\")) # Result: sihT si a elpmas gnirts"},{"prompt":"Create a Python function that sorts the numbers in a given list in ascending order. [8,3,5,2,9,7]","completion":"def sort_list(list): list.sort() return list if __name__ == \\"__main__\\": l = [8,3,5,2,9,7] print(sort_list(l))"},{"prompt":"Create a Python script to search for a (partial) substring in a string.","completion":"def find_substring(string, substring): if substring in string: index = string.find(substring) return \\"Substring found at index \\" + str(index) else: return \\"Substring not found\\""},{"prompt":"Find the number of ways to reach nth step in a staircase if a person can take 1 or 2 steps at a time in Python. n = 6","completion":"def stairs(n): step = [0] * (n + 2) step[1] = 1 step[2] = 2 for i in range(3, n + 2): step[i] = step[i - 1] + step[i - 2] return step[n] n = 6 print(stairs(n))"},{"prompt":"Design a program in Python to find the highest occurring character in a given string.","completion":"def highest_occurring_char(str): char_dict = {} highest_count = 0 highest_char = \\"\\" for char in str: if char in char_dict: char_dict[char] += 1 else: char_dict[char] = 1 if char_dict[char] > highest_count: highest_count = char_dict[char] highest_char = char return highest_char my_str = \\"test string\\" highest_char = highest_occurring_char(my_str) print(highest_char)"},{"prompt":"Generate a code snippet to split a given string using a given delimiter in Python.","completion":"str.split(delimiter)"},{"prompt":"Convert the following code from Java to Python: public class HelloWorld { public static void main(String[] args) { System.out.println(Hello World); } } public class HelloWorld { public static void main(String[] args) { System.out.println(Hello World); } }","completion":"def main(): print(\\"Hello World\\") if __name__ == \\"__main__\\": main()"},{"prompt":"Create a Python program that prints out the Fibonacci sequence up to the nth number given as input. n = 10","completion":"def fibonacci(n): fib_list = [0 , 1] for i in range(2 , n): fib_list.append(fib_list[i - 2] + fib_list[i - 1]) return fib_list[:n] print(fibonacci(n))"},{"prompt":"Create a Python program to create a fibonacci sequence of the length of n","completion":"def create_fibonacci(n): fibonacci_sequence = [0] if n == 0: return fibonacci_sequence elif n == 1: fibonacci_sequence.append(1) return fibonacci_sequence else: fibonacci_sequence.append(1) current_num = 1 while len(fibonacci_sequence) < n: previous_num = fibonacci_sequence[-2] current_num = previous_num + fibonacci_sequence[-1] fibonacci_sequence.append(current_num) return fibonacci_sequence"},{"prompt":"Design an algorithm in Python to calculate the Euclidean distance between two points Input: ([2, 4], [4, 8])","completion":"import math def euclidean_distance(point1, point2): dist = math.sqrt( (point1[0]-point2[0])**2 + (point1[1]-point2[1])**2 ) return dist print(euclidean_distance([2,4], [4,8]))"},{"prompt":"What is the sum of all even numbers from 1 to 100 in Python?","completion":"sum = 0 for i in range(2,101,2): sum += i print(sum)"},{"prompt":"Create a Python script to fetch the current stock price of a company and store it in a database. Example Company Stock Symbol: AAPL","completion":"import requests import sqlite3 # create connection conn = sqlite3.connect('data.db') c = conn.cursor() # create table c.execute('CREATE TABLE Prices (stock_symbol TEXT, price REAL)') # get stock price data res = requests.get('https://api.iextrading.com/1.0/stock/AAPL/price') price = res.json() # insert data into table c.execute('INSERT INTO Prices (stock_symbol, price) VALUES (?, ?)', ('AAPL', price)) # commit changes to database conn.commit() # close database connection conn.close()"},{"prompt":"Create a Python program to identify the class of an IP address. ip = '192.168.128.0'","completion":"def ip_class(ip): # Split the IP address ip_split = ip.split('.') # Get the first octet first_octet = int(ip_split[0]) # Classify based on the first octet if first_octet >= 0 and first_octet <=127: ip_class = 'A' elif first_octet >= 128 and first_octet <= 191: ip_class = 'B' elif first_octet >= 192 and first_octet <= 223: ip_class = 'C' elif first_octet >= 224 and first_octet <= 239: ip_class = 'D' elif first_octet >= 240 and first_octet <= 255: ip_class = 'E' else: ip_class = 'Invalid' return ip_class # Driver Code ip = '192.168.128.0' # Function call ip_classifcation = ip_class(ip) # Print the result print(\\"IP address is:\\", ip) print(\\"Classification:\\", ip_classifcation)"},{"prompt":"Create an algorithm in Python to group the numbers of an array in such a way that the total sum of each group is equal. [1, 2, 3, 4, 5, 6, 7, 8]","completion":"def group_equal_sum(arr): result = [] arr.sort() while len(arr) > 0: group = [arr[0]] arr.remove(arr[0]) sum_ = group[0] while sum_ in arr: group.append(sum_) arr.remove(sum_) sum_ += 1 result.append(group) return result"},{"prompt":"Code an algorithm in Python to optimize a sales plan for a given company. The company sells furniture with 3 products: chairs, desks, and couches. Each product has 100 units in stock and a target quantity for sale. The objective is to maximize profit.","completion":"import numpy as np # target values target_chairs = 25 target_desks = 50 target_couches = 75 # list of prices for each product prices = [50, 75, 100] # function to calculate profit def calculate_profit(chairs, desks, couches): profit = chairs * prices[0] + desks * prices[1] + couches * prices[2] return profit # define our range upper_bound = np.array([100, 100, 100]) lower_bound = np.array([0, 0, 0]) # define our variables x0 = np.array([25, 50, 75]) # define our objective function def obj_func(x): profit = calculate_profit(*x) return -1 * profit # optimization res = minimize(obj_func, x0, bounds=(lower_bound, upper_bound)) # print the results print(f'Optimal quantities:nchairs: {int(res.x[0])}ndesks: {int(res.x[1])}ncouches: {int(res.x[2])}nTotal Profit: {int(-res.fun)}')"},{"prompt":"Can you provide a script to remove any dot (.) in an URL string? URL String: https://www.google.com/example/?q=python.","completion":"url_string = \\"https://www.google.com/example/?q=python.\\" def remove_dot(url_string): url_string = url_string.replace('.', '') return url_string modified_url_string = remove_dot(url_string) print(modified_url_string) # https://wwwgooglecom/example/?q=python"},{"prompt":"w would you convert the following pseudocode into python? IF A > B { PRINT “A is greater than B” } ELSE { PRINT “B is greater than A” }","completion":"if A > B: print(\\"A is greater than B\\") else: print(\\"B is greater than A\\")"},{"prompt":"Refactor a given Python program to reduce its run time. A Python program that prints the first 20 prime numbers.","completion":"import math def is_prime(num): \\"\\"\\"Function to check for prime number\\"\\"\\" if num == 1: return False for i in range(2, int(math.sqrt(num)) + 1): if num % i == 0: return False return True def get_first_prime_numbers(limit): \\"\\"\\"Function to get the first limit prime numbers\\"\\"\\" num = 2 count = 0 prime_numbers = [] while count < limit: if is_prime(num): prime_numbers.append(num) count += 1 num += 1 return prime_numbers # Get the first 20 prime numbers limit = 20 print(get_first_prime_numbers(limit))"},{"prompt":"Create a code generation task to generate a Python program to calculate the sum of a list of numbers. nums = [2, 5, 10, 15]","completion":"def list_sum(nums): '''This function will take a list as input and return the sum of its elements.''' result = 0 for num in nums: result += num return result nums = [2, 5, 10, 15] print(list_sum(nums))"},{"prompt":"Given a list of strings, write a python program to sort the list alphabetically and print it. strings = [ada, javascript, c++, python]","completion":"strings = [\\"ada\\", \\"javascript\\", \\"c++\\", \\"python\\"] strings.sort() print(strings) # Output: ['ada', 'c++', 'javascript', 'python']"},{"prompt":"Design a program in Python to convert a given number into the equivalent number in the Roman Numeral system. 29","completion":"def dec_to_roman(num): val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num roman_num = dec_to_roman(29) print(roman_num)"},{"prompt":"Given a dictionary, create a program to find the longest word in Python. {hello: 5, world: 5, welcome: 7, to: 2, programming: 11}","completion":"def longest_word(dictionary): longest = \\"\\" for word in dictionary: if len(word) > len(longest): longest = word return longest"},{"prompt":"Create a machine learning model in Python to classify different types of flowers. Data set: Iris setosa Iris versicolor Iris virginica Features Sepal Length Sepal Width Petal Length Petal Width","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.svm import SVC from sklearn.metrics import confusion_matrix, accuracy_score # Load the Data df = pd.read_csv('iris_data.csv') X = df.drop('target', axis=1) y = df['target'] # Split Data into Train and Test X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Build the Model model = SVC() model.fit(X_train, y_train) # Evaluate the Model y_pred = model.predict(X_test) matrix = confusion_matrix(y_test, y_pred) score = accuracy_score(y_test, y_pred) # Print Results print(\\"Confusion Matrix:\\") print(matrix) print(\\"Accuracy Score:\\", score)"},{"prompt":"Design a REST API in Python that performs the CRUD operations Noinpu","completion":"from flask import Flask, request app = Flask(__name__) # Create a resource @app.route('/users', methods=['POST']) def create(): return 'Create a new user.' # Read a resource @app.route('/users/<id>', methods=['GET']) def read(id): return 'Read user ' + str(id) # Update a resource @app.route('/users/<id>', methods=['PUT']) def update(id): return 'Update user ' + str(id) # Delete a resource @app.route('/users/<id>', methods=['DELETE']) def delete(id): return 'Delete user ' + str(id) if __name__ == \\"__main__\\": app.run(debug=True)"},{"prompt":"Create a loop in Python that prints a random number between 0 and 9.","completion":"import random for i in range(10): print(random.randint(0, 9))"},{"prompt":"Create a dictonary in Python with 5 key value pairs. Not applicable","completion":"myDict = { 'name': 'John', 'age': 25, 'height': 6.1, 'city': 'New York', 'job': 'Developer' }"},{"prompt":"Create a graphical user interface (GUI) in Python that displays a text box and two buttons. When the first button is pressed, the text in the box should be changed to 'Hello World!'. When the second button is pressed, a message box should appear with the following text: 'This is a message box.' Not applicable","completion":"import tkinter as tk import tkinter.messagebox as tkmsg def hello_world(): text_box.config(text='Hello World!') def message_box(): tkmsg.showinfo(title='Message Box', message='This is a message box.') window = tk.Tk() window.title('Hello World App') text_box = tk.Label(window) text_box.pack(padx=20, pady=20) btn_1 = tk.Button(window, text='Change Text', command=hello_world) btn_1.pack(padx=20, pady=20) btn_2 = tk.Button(window, text='Show Message', command=message_box) btn_2.pack(padx=20, pady=20) window.mainloop()"},{"prompt":"Create a Python script that counts the number of vowels from a given string. This is an example string","completion":"def count_vowels(string): count = 0 for char in string: if char in \\"aeiouAEIOU\\": count += 1 return count string = \\"This is an example string\\" vowels = count_vowels(string) print(f\\"Number of vowels in the given string: {vowels}\\")"},{"prompt":"Create a program to generate unique 5digit IDs in Python. Not applicable","completion":"import random def generate_id(): # Generate a list of 5 random integers between 0-9 digits = [random.randint(0, 9) for i in range(5)] # Convert the list of numbers to a string unique_id = \\"\\".join(str(digit) for digit in digits) # Return the unique ID return unique_id # Generate a unique ID unique_id = generate_id() print(unique_id)"},{"prompt":"Find and fix the errors in the following Python code snippet. def multiplying(): retrun x * y","completion":"def multiplying(x, y): return x * y"},{"prompt":"Generate an algorithm in Python that given a string of words, should check if it is a Palindrome. racecar","completion":"def isPalindrome(s): s = s.lower() left = 0 right = len(s) - 1 while left < right: if s[left] != s[right]: return False left += 1 right -= 1 return True s = 'racecar' isPalindrome = isPalindrome(s) print(isPalindrome) # Output: True"},{"prompt":"Build a version control system using Python for a web development project. A web development project with 10 files.","completion":"import os import json # function to return a json structure representing current # state of the files present in the working directory def genStatusJson(): statusJson = {} files = os.listdir('.') for file in files: if file.endswith('.py'): statusJson[file] = { 'hash': getFileHash(file), 'created_time': os.path.getctime(file) } return statusJson # function to check if there any changes in # the working directory since last commit def checkForChanges(): newStatusJson = genStatusJson() with open('status.json', 'r') as f: statusJson = json.load(f) # compare current status # with previous status if newStatusJson != statusJson: return True else: return False # function to commit changes to version control def commitChanges(): statusJson = genStatusJson() with open('status.json', 'w') as f: json.dump(statusJson, f) print('Changes committed to version control!') # function to check out an older version # of the project def checkoutVersion(version): with open('status.json', 'r') as f: statusJson = json.load(f) # loop through files and replace # current files with older files for file in statusJson.keys(): name = file + '_v' + str(version) os.rename(name, file) print('Project checked out to version ' + str(version)) # main function to run program def main(): if checkForChanges(): commitChanges() checkoutVersion(2) if __name__ == '__main__': main()"},{"prompt":"Write a Python code to create an API endpoint with the Flask framework that can store usersubmitted comments in a database. Not applicable","completion":"# imports from flask import Flask, jsonify, request from flask_sqlalchemy import SQLAlchemy # Set up application app = Flask(__name__) app.config[\\"SQLALCHEMY_DATABASE_URI\\"] = \\"sqlite:///database.db\\" db = SQLAlchemy(app) # Model for comment table class Comment(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(256), nullable=False) comment = db.Column(db.String(256), nullable=False) # Endpoint to store comments @app.route('/comments', methods=[\\"POST\\"]) def store_comment(): data = request.get_json() name = data[\\"name\\"] comment = data[\\"comment\\"] comment = Comment(name=name, comment=comment) db.session.add(comment) db.session.commit() return jsonify({\\"message\\": \\"comment stored successfully\\"}) # Endpoint to get all comments @app.route('/comments', methods=[\\"GET\\"]) def get_comments(): all_comments = Comment.query.all() result = [] for comment in all_comments: result.append({ \\"name\\" : comment.name, \\"comment\\" : comment.comment }) return jsonify(result) # Run the app if __name__ == '__main__': app.run()"},{"prompt":"Suggest a python code to merge two sorted list and maintain the order list1 = [1, 5, 11, 15] list2 = [3, 10, 12]","completion":"def merge_sorted_lists(list1, list2): result = [] while len(list1) > 0 and len(list2) > 0: if list1[0] < list2[0]: result.append(list1.pop(0)) else: result.append(list2.pop(0)) if len(list1) > 0: result += list1 else: result += list2 return result list1 = [1, 5, 11, 15] list2 = [3, 10, 12] print(merge_sorted_lists(list1, list2))"},{"prompt":"Create a machine learning model in Python to predict the stock prices of a company given the stock prices for the be past 10 days. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.linear_model import LinearRegression df = pd.read_csv(\\"stock_data.csv\\") X = df[['Day1', 'Day2', 'Day3', 'Day4', 'Day5', 'Day6', 'Day7', 'Day8', 'Day9', 'Day10']] y = df['Day11'] model = LinearRegression() model.fit(X, y)"},{"prompt":"Write a python program to sort a list of strings based on their lengths. ['test', 'sample', 'hello', 'world']","completion":"list_of_strings = ['test', 'sample', 'hello', 'world'] list_of_strings.sort(key=len) print(list_of_strings)"},{"prompt":"Generate a cache class in Python to store keyvalue pairs. This class should use the LeastRecently Used (LRU) strategy to optimize the cache performance. Not applicable","completion":"import collections class LRUCache: def __init__(self, capacity): self.capacity = capacity self._cache = collections.OrderedDict() def get(self, key): try: value = self._cache.pop(key) self._cache[key] = value return value except KeyError: return -1 def set(self, key, value): try: self._cache.pop(key) except KeyError: if len(self._cache) >= self.capacity: self._cache.popitem(last=False) self._cache[key] = value"},{"prompt":"Design a basic class in Python that contains a constructor, three variables (name, age, and language), and a function that prints out the person's information. Jim, 25, Pytho","completion":"class Person: def __init__(self, name, age, language): self.name = name self.age = age self.language = language def print_info(self): print(f\\"Name: {self.name}, Age: {self.age}, Language: {self.language}\\") person = Person(\\"Jim\\", 25, \\"Python\\") person.print_info()"},{"prompt":"Develop a Python program to calculate the maximum number of different routes from A to B. A = (1,1) and B = (3,3)","completion":"def countMaxRoutes(A, B): # declaring the grid size MAX_ROWS = 4 MAX_COLS = 4 # calculating the number of unique paths # possible to go from A to B return factorial(MAX_ROWS - 1 + MAX_COLS - 1) // (factorial(MAX_ROWS - 1) * factorial(MAX_COLS - 1)) def factorial(n): res = 1; for i in range(n, 0, -1): res *= i; return res; A = (1, 1) B = (3, 3) print(countMaxRoutes(A, B))"},{"prompt":"Create a Python 3 program to calculate the Fibonacci sequence up to the given number. n = 20","completion":"def Fibonacci(n): # 0 and 1 are the first two numbers in # the Fibonacci sequence if n<=0: return 0 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Number of terms to calculate n = 20 print(\\"Fibonacci sequence:\\") for i in range(n): print(Fibonacci(i),end=\\" \\")"},{"prompt":"Edit a Python program to create a multithreaded network scanner. import socket def connect(ip, port): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) result = sock.connect_ex((ip, port)) if result == 0: print(Port {} is open.format(port)) else: print(Port {} is closed.format(port))","completion":"import socket from threading import Thread def connect(ip, port): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) result = sock.connect_ex((ip, port)) if result == 0: print(\\"Port {} is open\\".format(port)) else: print(\\"Port {} is closed\\".format(port)) def scan(ip, ports): for port in ports: thread = Thread(target=connect, args=(ip, port)) thread.start() ip=\\"127.0.0.1\\" ports=[80, 443, 8080] scan(ip, ports)"},{"prompt":"Rewrite a given JavaScript function as a Python function. Make sure the output is the same. function powerOfTwo(num) { return 2 ** num; }","completion":"def powerOfTwo(num): return 2 ** num"},{"prompt":"Create a Python program for solving the 8puzzle problem using a* search algorithm. 1 2 3 4 5 6 7 8 0","completion":"\\"\\"\\" Create a Python program for solving the 8-puzzle problem using a* search algorithm. \\"\\"\\" from collections import deque from collections import namedtuple # Create a namedtuple to store the puzzle information Puzzle = namedtuple('Puzzle', ['board', 'steps', 'cost']) # Find the index of 0 def find_index(board): return board.index(0) # Move the 0 to the left def move_left(board, blank_idx): left = blank_idx - 1 if left < 0: return None else: new_board = list(board) new_board[blank_idx], new_board[left] = new_board[left], new_board[blank_idx] return new_board # Move the 0 to the right def move_right(board, blank_idx): right = blank_idx + 1 if right > 8: return None else: new_board = list(board) new_board[blank_idx], new_board[right] = new_board[right], new_board[blank_idx] return new_board # Move the 0 up def move_up(board, blank_idx): up = blank_idx - 3 if up < 0: return None else: new_board = list(board) new_board[blank_idx], new_board[up] = new_board[up], new_board[blank_idx] return new_board # Move the 0 down def move_down(board, blank_idx): down = blank_idx + 3 if down > 8: return None else: new_board = list(board) new_board[blank_idx], new_board[down] = new_board[down], new_board[blank_idx] return new_board # Calculate the total cost of the puzzle def cost_function(puzzle): return puzzle.steps + sum([abs(b % 3 - t % 3) + abs(b//3 - t//3) for b, t in ((puzzle.board.index(i), puzzle.board.index(goal.board[i])) for i in range(1, 9))]) # Perform the A* search def a_star_search(start, goal): explored = set() # Start with the queue of puzzles queue = deque([Puzzle(start, 0, 0)]) # Keep searching until the queue is empty or the goal is found while queue: # Pop from the queue puzzle = queue.popleft() # Find the blank tile blank_idx = find_index(puzzle.board) explored.add(tuple(puzzle.board)) # Move 0 to the left new_board = move_left(puzzle.board, blank_idx) if new_board and tuple(new_board) not in explored: if new_board == goal.board: return Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0))) queue.append(Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0)))) # Move 0 to the right new_board = move_right(puzzle.board, blank_idx) if new_board and tuple(new_board) not in explored: if new_board == goal.board: return Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0))) queue.append(Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0)))) # Move 0 up new_board = move_up(puzzle.board, blank_idx) if new_board and tuple(new_board) not in explored: if new_board == goal.board: return Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0))) queue.append(Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0)))) # Move 0 down new_board = move_down(puzzle.board, blank_idx) if new_board and tuple(new_board) not in explored: if new_board == goal.board: return Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0))) queue.append(Puzzle(new_board, puzzle.steps + 1, cost_function(Puzzle(new_board, puzzle.steps + 1, 0)))) # Reorder queue to the lowest cost board queue = deque(sorted(queue, key=lambda x: x.cost)) # Define the start and end board start = [1, 2, 3, 4, 5, 6, 7, 8, 0] goal = Puzzle([1, 2, 3, 4, 5, 6, 7, 0, 8], 0, 0) # Perform the a* search print('Start Board:') print(start[0], start[1], start[2]) print(start[3], start[4], start[5]) print(start[6], start[7], start[8]) solution = a_star_search(start, goal) print('Solution Board:') print(solution.board[0], solution.board[1], solution.board[2]) print(solution.board[3], solution.board[4], solution.board[5]) print(solution.board[6], solution.board[7], solution.board[8]) print('Number of Steps:', solution.steps)"},{"prompt":"Write a Python program to check whether a given number is an Armstrong number. Armstrong numbers are the numbers that are equal to the sum of the cubes of their individual digits.","completion":"def is_armstrong_number(n): s = 0 for digit in str(n): s += int(digit)**3 return s == n"},{"prompt":"Generate a Python function to compute the Fibonacci sequence. Not applicable","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"prompt":"Create a randomized version of quicksort in Python. Example array to sort: [4, 2, 9, 12, 3, 5, 7]","completion":"from random import randint def quick_sort(arr): if len(arr) <= 1: return arr else: pivot = arr[randint(0, len(arr)-1)] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) arr = [4, 2, 9, 12, 3, 5, 7] quick_sort(arr)"},{"prompt":"Develop a program in Python that generates the Fibonacci Series.","completion":"def fib(n): a, b = 0, 1 while a < n: print(a, end=\\" \\") a, b = b, a+b print() n = int(input(\\"Enter the number of terms: \\")) fib(n)"},{"prompt":"Write a Python program to find the shortest path between two points A (1,2), B (5,6)","completion":"# Initialize the two points A = (1,2) B = (5,6) # Create a function def short_path(p1, p2): # Compute the x-distance x_dist = abs(p2[0] - p1[0]) # Compute the y-distance y_dist = abs(p2[1] - p1[1]) # Compute the manhattan distance manh_dist = x_dist + y_dist return manh_dist # Test the function print(short_path(A, B)) # Output 6"},{"prompt":"Create a Python program to find the area of a triangle given 3 sides","completion":"def findArea(a,b,c): #calculate the semiperimeter s = (a + b + c) / 2.0 area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 return area"},{"prompt":"Write a code to check how many consecutive elements are equal in a given Python list. [1, 2, 3, 4, 4, 4, 5]","completion":"def check_consecutive_equal(lst): count = 1 max_count = 0 for i in range(1, len(lst)): if lst[i] == lst[i-1]: count+=1 else: if max_count < count: max_count = count count = 1 return max(max_count, count)"},{"prompt":"Create a Python script to compute the average of a list of elements [1,4,7,3]","completion":"def average(l): total = 0 for element in l: total += element return total / len(l) l = [1,4,7,3] print(average(l))"},{"prompt":"Create a Python script that takes a sentence as an input, separates all the words into a list and prints them in alphabetical order. This is an example sentence","completion":"input_sentence = \\"This is an example sentence\\" words = input_sentence.split() words.sort() print(words) # ['an', 'example', 'is', 'sentence', 'This']"},{"prompt":"Fulfill the following criteria in Python Given an array of numbers, find the length of the longest increasing subsequence","completion":"def longest_increasing_subsequence(nums): # Dynamic programming approach # to maintain a list of increasing subsequences # with their respective lengths subseq_lengths = [1 for _ in range(len(nums))] # Traverse through pairs of numbers to find sequences for i in range(1, len(nums)): for j in range(0, i): if nums[i] > nums[j] and subseq_lengths[i] < subseq_lengths[j] + 1: subseq_lengths[i] = subseq_lengths[j]+1 # Return the maximum length of increasing subsequence return max(subseq_lengths)"},{"prompt":"Create a Python class to represent a circle having radius, color and area as its data members.","completion":"class Circle: def __init__(self, radius, color): self.radius = radius self.color = color self.area = 3.14 * (radius**2) def get_radius(self): return self.radius def get_color(self): return self.color def get_area(self): return self.area if __name__ == '__main__': c = Circle(4, 'blue') print(\\"Radius of circle:\\", c.get_radius()) print(\\"Color of circle:\\", c.get_color()) print(\\"Area of circle:\\", c.get_area())"},{"prompt":"Create a function in Python to find the sum of two numbers in a given array and return their indices. [3, 5, 7, 10]","completion":"def sumIndices(arr, n): Indices = [] # traverse array elements for i in range(0, n): # complement will be checked in # same array for j in range(i + 1, n): # if complement found, # return the indices if(arr[i] + arr[j] == n): return (i, j) arr = [3, 5, 7, 10] n = 10 Indices = sumIndices(arr, n) print(Indices)"},{"prompt":"Generate a Python class to store a student’s information including their name, age, and phone number.","completion":"class Student: def __init__(self, name, age, phone_number): self.name = name self.age = age self.phone_number = phone_number"},{"prompt":"Write a python function to take a list of numbers as input and return the largest number. [5, 7, 2, 4, 9]","completion":"def find_largest_number(numbers): largest_number = numbers[0] for number in numbers: if number > largest_number: largest_number = number return largest_number"},{"prompt":"Create a program in Python to convert an array of integers to an array of binary numbers. [2,4,7]","completion":"def int_to_bin(arr): binary = [] for num in arr: binary.append(bin(num)) return binary arr = [2,4,7] bin_arr = int_to_bin(arr) print(bin_arr)"},{"prompt":"Create a python program to aggregate multiple items together into a composite data structure. items = [{'code': 'abc', 'foo': 1, 'bar': 'a'}, {'code': 'def', 'foo': 4, 'bar': 'b'}, {'code': 'ghi', 'foo': 6, 'bar': 'c'}]","completion":"result = {} for item in items: code = item.get('code') foo = item.get('foo') bar = item.get('bar') if code not in result: result[code] = [] result[code].append({'foo':foo, 'bar':bar}) print(result) # Output {'abc': [{'foo': 1, 'bar': 'a'}], 'def': [{'foo': 4, 'bar': 'b'}], 'ghi': [{'foo': 6, 'bar': 'c'}]}"},{"prompt":"Convert an array of hexadecimal strings to decimal numbers with a Python script. [FF, A0, 5E]","completion":"def hex_to_dec(hex_strings): # Define an array to store the decimal numbers dec_nums = [] # Iterate over each hex string in the array for hex_string in hex_strings: # Convert the hexadecimal to integer and # store the result in dec_nums dec_nums.append(int(hex_string, 16)) return dec_nums # Test example print(hex_to_dec([\\"FF\\", \\"A0\\", \\"5E\\"])) # Output: [255, 160, 94]"},{"prompt":"Write an algorithm to reverse a linked list in Python Node 1: (1→2→3→4→None)","completion":"class Node(): def __init__(self, value): self.value = value self.next = None def reverseLinkedList(head): prev = None curr = head while(curr != None): next_node = curr.next curr.next = prev prev = curr curr = next_node head = prev return head # Create linked list head = Node(1) head.next = Node(2) head.next.next = Node(3) head.next.next.next = Node(4) # Reversed linked list reverseLinkedList(head)"},{"prompt":"Program a python method to add a given number to each element of a given list.","completion":"def add_number(numbers, number): result = [] for x in numbers: result.append(x + number) return result"},{"prompt":"Given an array of integers, write a Python program to find the longest consecutive sequence of increasing integers arr = [3, 5, 2, 7, 6, 4, 8, 9, 10, 11]","completion":"def longest_consecutive_sequence(arr): # to store the start of the sequence start = 0 # store the maximum length of the consecutive sequence maximum_length = 0 # to store the current consecutive sequence length current_length = 1 # traverse through the array for i in range(1, len(arr)): # skipping the duplicate values if arr[i] == arr[i-1]: continue # if consecutive increases, # increase the current_length if arr[i] == arr[i-1] + 1: current_length += 1 # update the maximum_length if current_length is greater if current_length > maximum_length: maximum_length = current_length start = arr[i-1] else: current_length = 1 #print the longest consecutive sequence print(*range(start - maximum_length + 1, start + 1)) # Driver Code arr = [3, 5, 2, 7, 6, 4, 8, 9, 10, 11] longest_consecutive_sequence(arr)"},{"prompt":"Write a Python program that takes an integer and prints a set of stairs with that many levels. Number of levels: 5","completion":"def staircase(n): for i in range(1, n+1): for j in range(1, n+1): if j <= n-i: print(' ', end='') else: print('#', end='') print('') n = 5 staircase(n)"},{"prompt":"Create a GUI in Python to print the data stored in a database. The database contains student records like name, roll number, marks etc.","completion":"import tkinter as tk from tkinter import * import pymysql # Connect to the database conn = pymysql.connect(host=\\"localhost\\", user=\\"username\\", password=\\"password\\", db=\\"database_name\\") cursor = conn.cursor() # Create the main window root = tk.Tk() # Add a title root.title(\\"Student Records\\") # Add a label label = Label(root, text=\\"This window shows the data stored in the database\\") label.grid() # Select the data from the database cursor.execute(\\"SELECT name, roll_no, marks from student_records\\") # Fetch all the records from database records = cursor.fetchall() # Create a dataframe with the records df = DataFrame(records, columns=['Name', 'Roll No.', 'Marks']) # Print the dataframe df.head() # Close the database connection conn.close() # End the tkinter program root.mainloop()"},{"prompt":"Optimize the following Python bubble sort algorithm for efficiency. def bubble_sort(numbers): for i in range(len(numbers)): for j in range(len(numbers)i1): if numbers[j] > numbers[j+1]: numbers[j], numbers[j+1] = numbers[j+1], numbers[j] return number","completion":"def bubble_sort(numbers): swapped = True while swapped: swapped = False for i in range(len(numbers)-1): if numbers[i] > numbers[i+1]: numbers[i], numbers[i+1] = numbers[i+1], numbers[i] swapped = True return numbers"},{"prompt":"Write a query to select the first four characters of a given string. String: python_program","completion":"SELECT SUBSTRING(string, 1, 4) FROM table WHERE string = 'python_program'"},{"prompt":"Develop a function in Python to print the first 10 Fibonacci numbers.","completion":"def printFibo(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: print(a) elif n == 1: print(b) else: print(a) print(b) for i in range(2,n): c = a + b a = b b = c print(b) printFibo(10)"},{"prompt":"Create a Python function to print the Fibonacci series up to a given range. range: 10","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program result = [] for i in range(1,10): result.append(Fibonacci(i)) print(result)"},{"prompt":"Create a Python AI program that will predict the demand of a product from its past sales data. The past sales data of product X in the form of a Pandas dataframe.","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # load the data data = pd.read_csv('product_x_data.csv') # split the data into feature columns (X) and label column (y) X = data.drop(columns=['demand']) y = data['demand'] # split the data into training and test set n_samples = len(X) train_samples = int(n_samples * 0.8) X_train, X_test = X.iloc[:train_samples], X.iloc[train_samples:] y_train, y_test = y.iloc[:train_samples], y.iloc[train_samples:] # fit the model model = LinearRegression() model.fit(X_train, y_train) # predict the test set y_pred = model.predict(X_test) # check the accuracy accuracy = np.mean(abs(y_test - y_pred)) print(\\"Accuracy: {}\\".format(accuracy))"},{"prompt":"Generate code to encrypt a message using the AES algorithm in Python. Not applicable","completion":"from Crypto.Cipher import AES key = b'0123456789ABCDEF' def encryptAES(message): cipher = AES.new(key, AES.MODE_ECB) ciphertext = cipher.encrypt(message) return ciphertext message = b'Encrypt this message' encrypted_message = encryptAES(message) print(encrypted_message)"},{"prompt":"Build an algorithm in Python for finding the sum of all the odd numbers in a given array. [1, 2, 3, 4, 5, 6]","completion":"def sumOddNumbers(arr): sum = 0 for num in arr: if num % 2 != 0: sum += num return sum arr = [1, 2, 3, 4, 5, 6] print(sumOddNumbers(arr))"},{"prompt":"Generate Python code to detect whether a given sentence is a palindrome Level","completion":"def is_palindrome(text): text = text.lower() text = text.replace(\\" \\",\\"\\") reversed_text = text[::-1] if text == reversed_text: return True return False print(is_palindrome(\\"Level\\")) # True"},{"prompt":"Write a Python class to represent a typical lock with methods to lock, unlock, check status, and reset code. not applicable","completion":"class Lock: def __init__(self): self._isLocked = False self._code = \\"\\" def lock(self): self._isLocked = True def unlock(self, code): if code == self._code: self._isLocked = False return True else: return False def is_locked(self): return self._isLocked def reset_code(self, code): self._code = code"},{"prompt":"Create a Python script that produces a bar chart of the top 10 global languages.","completion":"import matplotlib.pyplot as plt # Data to plot languages = ['English', 'Chinese', 'Hindi', 'Spanish', 'Arabic', 'Portuguese', 'Russian', 'Japanese', 'German', 'French'] counts = [1.25, 1.21, 0.558, 0.455, 0.347, 0.336, 0.310, 0.282, 0.242, 0.220] # Generate the bar chart plt.bar(languages, counts, align='center', color='green', alpha=0.5) plt.title('Top 10 Global Languages') plt.xlabel('Language') plt.ylabel('Number of Speakers (in billions)') plt.show()"},{"prompt":"Write a code block to merge two given dictionaries into a single one.","completion":"def mergeDictionaries(dict1, dict2): '''This function takes two python dictionaries as inputs and returns a single merged dictionary.''' # Create a new empty dictionary merged_dict = {} # Iterate over the two argument dictionaries and add the key-value pairs to the new dictionary for key, value in dict1.items(): merged_dict[key] = value for key, value in dict2.items(): merged_dict[key] = value # Return the merged dictionary return merged_dict"},{"prompt":"Create a Python Flask app that listens for POST requests on '/star' and '/webhook' routes. The '/star' route connects to a MongoDB database and retrieves a record with the employee number '1503051'. If the record exists, return the employee name. If the record does not exist, return 'no record'. The '/webhook' route listens for POST requests and retrieves a JSON object from the request. If the action in the JSON object is 'branchcontact', retrieve the branch or any text parameter and return the corresponding contact information. The app should run on port 5000 and be accessible from any IP address.","completion":"#!/usr/bin/env python import urllib import json import os from flask import Flask from flask import request from flask import make_response from pymongo import MongoClient # Flask app should start in global layout app = Flask(__name__) client = MongoClient('mongodb://localhost:27017') @app.route('/star', methods=['POST']) def get_one_star(): db = client['hrvisual'] collect=db['ORG_DEPT_EMP_2016'] post1 = collect.find_one({'emp_number': '1503051'}) if post1 is None: return 'no record' else: return post1['emp_name'] @app.route('/webhook', methods=['POST']) def webhook(): req = request.get_json(silent=True, force=True) print(\\"Request:\\") print(json.dumps(req, indent=4)) res = makeWebhookResult(req) res = json.dumps(res, indent=4) print(res) r = make_response(res) r.headers['Content-Type'] = 'application/json' return r def makeWebhookResult(req): if req.get(\\"result\\").get(\\"action\\") != \\"branchcontact\\": return {} result = req.get(\\"result\\") parameters = result.get(\\"parameters\\") contact = {'Narl':'02-6630-0151', 'Ndl':'03-5726100', 'Nchc':'03-5776085', 'Cic':'03-7777777', '1503051':'0911111111'} speech =\\"unknow\\" branch = parameters.get(\\"branch\\") if branch is not None: speech = \\"The contact information for \\" + branch + \\" is \\" + contact[branch] anytxt = parameters.get(\\"any\\") if anytxt is not None: speech = \\"The contact information for \\" + anytxt + \\" is \\" + contact[anytxt] print(\\"Response:\\") print(speech) return { \\"speech\\": speech, \\"displayText\\": speech, # \\"data\\": data, # \\"contextOut\\": [], \\"source\\": \\"apiai-onlinestore-shipping\\" } if __name__ == '__main__': port = int(os.getenv('PORT', 5000)) app.run(debug=True, port=port, host='0.0.0.0')"},{"prompt":"Develop a Python program to reverse an integer. 12345","completion":"def reverse_int(num): rev = 0 while num > 0: rev = (rev*10) + (num%10) num = num//10 return rev #test print(reverse_int(12345))"},{"prompt":"Create a Python program to find the most common element in a list. [3, 5, 3, 3, 3, 4, 5]","completion":"def most_common_element(list_of_numbers): # Initialize the dictionary and count the number of each element in the list frequency_dict = {} for element in list_of_numbers: if element not in frequency_dict: frequency_dict[element] = 1 else: frequency_dict[element] += 1 # Find the element with the highest frequency max_frequency = 1 element_with_max_frequency = None for element in frequency_dict: if frequency_dict[element] > max_frequency: max_frequency = frequency_dict[element] element_with_max_frequency = element return element_with_max_frequency if __name__ == '__main__': print(most_common_element([3, 5, 3, 3, 3, 4, 5])) # Output 3"},{"prompt":"Create a Python program to parse a given string and count the occurrences of each word. This is a sample sentence with several words","completion":"def count_occurrences(string): counts = dict() words = string.split() for word in words: if word in counts: counts[word] += 1 else: counts[word] = 1 return counts string = \\"This is a sample sentence with several words\\" print(count_occurrences(string)) # {'This': 1, 'is': 1, 'a': 1, 'sample': 1, 'sentence': 1, 'with': 1, 'several': 1, 'words': 1}"},{"prompt":"mplement a 'boggle_checker' function in Python 3 that takes in a 4x4 board and returns a list of all words present on the board. boggle_board = [ ['a', 'b', 'c', 'd'], ['x', 'o', 'n', 'e'], ['q', 'u', 'i', 't'], ['z', 'y', 'p', 's'], ]","completion":"def boggle_checker(board): current_words = [] # loop through all characters on board for row_i, row in enumerate(board): for col_i, col in enumerate(row): # look up in dictionary for all words starting at this character current_words.extend(get_words(board, row_i, col_i)) # remove duplicates final_words = list(set(current_words)) return final_words def get_words(board, row_i, col_i): words = [] # recursive dfs to form all words get_words_rec(board, row_i, col_i, [], words) return words def get_words_rec(board, row_i, col_i, current_word, words): # base case when at the edge of board if row_i < 0 or col_i < 0 or row_i > 3 or col_i > 3: return current_char = board[row_i][col_i] # check if the current path lies in the dictionary if is_word(\\"\\".join(current_word + [current_char])): words.append(\\"\\".join(current_word + [current_char])) # explore all surrounding cells board[row_i][col_i] = None get_words_rec(board, row_i - 1, col_i, current_word + [current_char], words) get_words_rec(board, row_i + 1, col_i, current_word + [current_char], words) get_words_rec(board, row_i, col_i - 1, current_word + [current_char], words) get_words_rec(board, row_i, col_i + 1, current_word + [current_char], words) board[row_i][col_i] = current_char def is_word(word): # dummy function that checks if a word lies in the dictionary return True"},{"prompt":"Write a Python algorithm to identify special numbers Compute a list of numbers that are special (e.g., the prime numbers that are also perfect squares, or the Fibonacci numbers that are also multiples of five).","completion":"def identify_special_numbers(): special_numbers = [] for n in range(1, 1000): # check if n is prime is_prime = True for i in range(2, n): if n % i == 0: is_prime = False break # check if n is perfect square is_square = False i = 1 while i * i <= n: if i * i == n: is_square = True i += 1 # check if n is Fibonacci number is_fibonacci = False x = 5 * n * n + 4 y = 5 * n * n - 4 if x > 0 and (x ** (1.0/2.0)).is_integer() or y > 0 and (y ** (1.0/2.0)).is_integer(): is_fibonacci = True # if n satisfies all criteria, add n to the list if is_prime and is_square and is_fibonacci and n % 5 == 0: special_numbers.append(n) return special_numbers"},{"prompt":"Write a Python program to generate a Haiku poem using a preexisting dataset of words. Not applicable","completion":"import random def generate_haiku(): with open('words.txt') as f: words = f.read().splitlines() first_line = random.choices(words, k=5) second_line = random.choices(words, k=7) third_line = random.choices(words, k=5) return f'{first_line[0].title()} {first_line[1]} {first_line[2]} n{second_line[0]} {second_line[1]} {second_line[2]} {second_line[3]} {second_line[4]} {second_line[5]} {second_line[6]} n {third_line[0]} {third_line[1]} {third_line[2]} {third_line[3]} {third_line[4]}' print(generate_haiku())"},{"prompt":"Classify the following code as either a python function or code section. x = hello z = x + world","completion":"Code section."},{"prompt":"Write a function in Python that takes a list of numbers as input and returns the minimum value. [4,6,2,1,10,8]","completion":"def find_min(numbers): min_value = numbers[0] for num in numbers: if num < min_value: min_value = num return min_value result = find_min([4,6,2,1,10,8]) print(result)"},{"prompt":"Write a Python function to recognize a date (in “DD/MM/YYYY” format) in a string The deadline is 23/05/2020","completion":"def recognize_date(s): '''This function recognizes a date (in DD/MM/YYYY format) in a string.''' # Regex for DD/MM/YYYY format format_regex = re.compile(r'd{2}/d{2}/d{4}') match = format_regex.search(s) if match: date = match.group() return date else: return None"},{"prompt":"Create a program to calculate the number of ways to arrange five numbers in a sequence. 5 numbers: 1, 2, 3, 4, 5","completion":"# Python numbers = [1, 2, 3, 4, 5] count = 0 for i in range(5): for j in range(5): if j != i: for k in range(5): if k != i and k != j: for l in range(5): if l != i and l != j and l != k: for m in range(5): if m != i and m != j and m != k and m != l: count += 1 print(count) # 120"},{"prompt":"Can you build a machine learning model in Python to classify a dataset with three classes? data.csv: x1,x2,x3,label 1,2,3,a 2,2,2,b 4,4,4,c","completion":"import pandas as pd import numpy as np # Load and prepare the data data = pd.read_csv(\\"data.csv\\") X = np.array(data.iloc[:, :3]) y = np.array(data.iloc[:, 3]) # Train the model from sklearn.linear_model import LogisticRegression model = LogisticRegression(multi_class=\\"multinomial\\", solver=\\"lbfgs\\") model.fit(X, y) # Test the model predictions = model.predict(X) print(\\"Confusion matrix:n\\", confusion_matrix(y, predictions))"},{"prompt":"Rewrite the following Python code using vectorization techniques to reduce the computation time. squares = [] for x in range(100): squares.append(x * x)","completion":"squares = [x * x for x in range(100)] # vectorized code equivalent to the for loop, which will be faster"},{"prompt":"Construct a Python program that takes a list of words and checks if the list is in alphabetical order. ['cat', 'dog', 'hippo', 'horse']","completion":"def check_if_list_is_in_alphabetical_order(words_list): for i in range(len(words_list)-1): if words_list[i] > words_list[i+1]: return False return True words_list = ['cat', 'dog', 'hippo', 'horse'] result = check_if_list_is_in_alphabetical_order(words_list) print (result)"},{"prompt":"Write a Python function to check if a given matrix is a valid multiplication table. A valid multiplication table contains the numbers 1 to n2, where n is the number of rows and columns in the table. [[1,2,3],[4,5,6],[7,8,9]]","completion":"def is_valid_mul_table(matrix): num_list = set() for row in matrix: for item in row: num_list.add(item) length = int(len(matrix) ** 0.5) if len(num_list) != (length ** 2): return False for num in range(1,length ** 2 + 1): if num not in num_list: return False return True"},{"prompt":"Given a Python script containing functions, optimize the code to reduce the number of iterations. def myfunc(n): for i in range(n): print(i) def main(): myfunc(50) myfunc(100)","completion":"def myfunc(n): for i in range(0, n, 5): print(i) def main(): myfunc(50) myfunc(100)"},{"prompt":"Create a Python module to read a specific XML schema and return a list of model objects.","completion":"import xml.etree.ElementTree as ET class ModelObject: def __init__(self, xml_node): \\"\\"\\"Constructor for ModelObject xml_node should be an ElementTree node of the xml data \\"\\"\\" self.name = xml_node.attrib['name'] self.value = xml_node.text def read_xml(xml): \\"\\"\\"Reads a given xml and returns a list of ModelObjects \\"\\"\\" root = ET.fromstring(xml) objects = [] for node in root.iter('model'): objects.append(ModelObject(node)) return objects"},{"prompt":"Build a web application in Python using the Django web framework. Not applicable","completion":"# Create a project directory mkdir myproject cd myproject # Create a virtual environment to isolate our package dependencies locally python3 -m venv env # Activate the virtual environment source env/bin/activate # Install Django and Django Rest Framework pip install django pip install djangorestframework # Start a new Django project django-admin startproject myproject . # Set up the database python manage.py migrate # Create an app python manage.py startapp myapp # Add your models to your models.py file in the app # Register the new app in myproject/settings.py # Set up the URLs # Write the views # Create a templates directory mkdir templates # Add HTML files in the templates directory # Create a static directory mkdir static # Run the development server python manage.py runserver"},{"prompt":"Propose and implement a method to sort a list of varied size nested lists in Python. Sample input: [[2,6],[1],[3,4,5]]","completion":"def sortList(lists): sortedList = [sorted(lst) for lst in lists] sortedList.sort(key = len) return sortedList lists = [[2,6],[1],[3,4,5]] print(sortList(lists)) // prints [[1],[2,6],[3,4,5]]"},{"prompt":"Develop a Python class to represent a stack with the functions push, pop and peek.","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if self.is_empty(): return None return self.items.pop() def peek(self): if self.is_empty(): return None return self.items[-1] def is_empty(self): return self.items == []"},{"prompt":"Create a function in Python that takes an array of strings and returns an array with the strings sorted in reversealphabetical order. [‘tomato’, ‘apple’, ‘mango’]","completion":"def reverse_sort(arr): return sorted(arr, reverse=True) # driver code arr = [\\"tomato\\", \\"apple\\", \\"mango\\"] sorted_arr = reverse_sort(arr) print(sorted_arr)"},{"prompt":"Construct a machine learning algorithm in Python to predict sales for a retail store.","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Read the data data = pd.read_csv('sales_data.csv') # Split into X and y X = data.drop('sales', axis=1) y = data['sales'] # Split into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=1) # Initialize the model model = LinearRegression() # Fit the model to the training data model.fit(X_train, y_train) # Predict using the model on the test data predictions = model.predict(X_test) # Evaluate the model performance score = model.score(X_test, y_test)"},{"prompt":"Write a Python program to print out the current time. Not applicable","completion":"from datetime import datetime # get the current time and print it out now = datetime.now() print(now)"},{"prompt":"Write a Python function to find the maximum and minimum number from a list of numbers. list = [1, 4, 5, 6, 7, 8]","completion":"def find_max_min(list): max_number = max(list) min_number = min(list) return max_number, min_number max_number, min_number = find_max_min(list) print(\\"Max number: \\", max_number) print(\\"Min number: \\", min_number)"},{"prompt":"Develop an algorithm in Python to find the median of a list of numbers. [1, 4, 6, 12, 24, 36]","completion":"def get_median(nums): nums.sort() if len(nums) % 2 == 0: return (nums[int(len(nums)/2)] + nums[int(len(nums)/2-1)])/2 else: return nums[int((len(nums)-1)/2)] result = get_median([1, 4, 6, 12, 24, 36]) print(result)"},{"prompt":"Generate a python script that takes a list of integer values, and reverse the order of elements in the list","completion":"def reverse_list(lst): return lst[::-1]"},{"prompt":"Write a Python program to create a class that represents a stack, and code that uses the class to implement an operation that prints the contents of a string using a stack. A string: 'Hello World!'","completion":"# A class to represent a stack class Stack: def __init__(self): self.stack = [] def push(self, data): self.stack.append(data) def pop(self): return self.stack.pop() def peek(self): return self.stack[-1] # Create a stack of characters string = 'Hello World!' char_stack = Stack() # Push every character in the string to the stack for i in string: char_stack.push(i) # Pop and print each character from the stack while len(char_stack.stack) > 0: print(char_stack.pop())"},{"prompt":"Use ObjectOriented Programming (OOP) in Python to create a class for a bookstore object.","completion":"class Bookstore(): def __init__(self, name, books): self.name = name self.books = books def add_book(self, book): self.books.append(book) def get_book_by_title(self, title): for book in self.books: if book.title == title: return book return None"},{"prompt":"Design an algorithm (in Python) to determine whether a given number is even or odd.","completion":"def is_even(number): if(number % 2 == 0): return True else: return False"},{"prompt":"mplement a machine learning algorithm of your choice in Python. An Iris data set with 150 data points (50 each in three classes) and 4 features (sepal length and width, petal length and width).","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.svm import SVC from sklearn.metrics import accuracy_score # Read the data into pandas data = pd.read_csv('http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data', names=['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']) # Split into training and test set data_train, data_test = train_test_split(data, test_size=0.2, random_state=42) # Create x and y train and test sets x_train = data_train.drop('species', axis=1).values x_test = data_test.drop('species', axis=1).values y_train = data_train['species'].values y_test = data_test['species'].values # Create a support vector classifier svc = SVC(gamma='auto', C=1.0) # Train the classifier svc.fit(x_train, y_train) # Test the classifier y_pred = svc.predict(x_test) print(\\"The accuracy of the predictions are: {:.2f}%\\".format(accuracy_score(y_test, y_pred)*100))"},{"prompt":"Generate a valid code in Python that takes two numbers as input from user, and checks if one is divisible by another","completion":"num1 = int(input(\\"Enter first number: \\")) num2 = int(input(\\"Enter second number: \\")) if (num1 % num2 == 0): print(\\"The number %s is divisible by %s.\\" % (num1, num2)) else: print(\\"The number %s is not divisible by %s.\\" % (num1, num2))"},{"prompt":"Convert an existing function from Python 3 to Python 2. def check_anagram(string1, string2): if(sorted(string1) == sorted(string2)): return True else: return False","completion":"def check_anagram(string1, string2): if(sorted(list(string1)) == sorted(list(string2))): return True else: return False"},{"prompt":"Create an ML model in Python to predict house prices based on house size. Number of data records: 200","completion":"import numpy as np import pandas as pd from sklearn.linear_model import LinearRegression # Load the data data = pd.read_csv(\\"data.csv\\") # Split into features (X) and labels (y) X = data[['Size']] y = data['Price'] # Create the linear regression model model = LinearRegression() # Train the model with the data model.fit(X, y) # Make predictions with the model predictions = model.predict(X) # Print out the R^2 score of the model print(model.score(X, y))"},{"prompt":"Write a Python program to randomly split a list into two parts. [1, 2, 3, 4, 5, 6, 7, 8]","completion":"import random def split_list(input_list): index = random.randint(0, len(input_list)-1) part1 = input_list[:index] part2 = input_list[index:] return part1, part2 input_list = [1, 2, 3, 4, 5, 6, 7, 8] print(\\"Original list :\\", input_list) result1, result2 = split_list(input_list) print(\\"nPart 1 :\\", result1) print(\\"Part 2 :\\", result2)"},{"prompt":"Develop a Python program to demonstrate the use of **args and *kargs.","completion":"\\"\\"\\"Demonstrates usage of *args and **kwargs\\"\\"\\" def my_func(*args, **kwargs): \\"\\"\\"Prints arguments passed to the my_func() function\\"\\"\\" for arg in args: print(\\"Argument passed:\\", arg) for key, value in kwargs.items(): print(\\"{0} = {1}\\".format(key,value)) a = 1 b = 2 my_dict = {'firstname': 'John', 'lastname': 'Doe'} my_func(a, b, **my_dict)"},{"prompt":"Write a Python program to extract all the numbers from a specified string. This is 3 string with 4 number","completion":"def extract_numbers(s): numbers = [] for char in s: if char.isdigit(): numbers.append(int(char)) return numbers result = extract_numbers(\\"This is 3 string with 4 numbers\\") print(result)"},{"prompt":"Create a KMeans Clustering algorithm in Python.","completion":"# Import KMeans from sklearn.cluster import KMeans # Create KMeans object kmeans = KMeans(n_clusters=3, random_state=0) # Train the model kmeans.fit(X) # Get the labels labels = kmeans.labels_ # Get the cluster centroids centroids = kmeans.cluster_centers_"},{"prompt":"Develop a Python function that can detect the spoken language of a user’s input. Bonjour","completion":"def detect_language(text): \\"\\"\\"Detect the language of a given text. Args: text (str): The text to detect the language of. Returns: str: The detected language of the text. \\"\\"\\" language = detect(text) return language"},{"prompt":"Generate an algorithm in Python that finds the smallest positive number not present in an array. [1, 10, 5, 3, 8]","completion":"def findSmallestMissingPositiveInteger(arr): positiveIntegers = set(i for i in range(1, len(arr) + 2)) arrSet = set(arr) res = positiveIntegers - arrSet return res.pop() arr = [1, 10, 5, 3, 8] print(findSmallestMissingPositiveInteger(arr))"},{"prompt":"Given the dataset users, where each row contains a user's name and email address, create a script in python for sending a standard email to all the users in the dataset. users = [{name: John, email: john@example.com}, {name: Steve, email: steve@example.com}]","completion":"import smtplib def emailUsers(data): sender = \\"your@email.com\\" server = smtplib.SMTP('smtp.gmail.com', 587) server.starttls() server.login(sender, \\"YourPassword\\") for user in data: to = user['email'] subject = \\"Subject for the Email\\" body = \\"Body for the Email\\" message = \\"From: %snTo: %snSubject: %snn%s\\" % (sender, to, subject, body) try: server.sendmail(sender, [to], message) print('email sent') except: print('failed') emailUsers(users)"},{"prompt":"What path do you suggest to optimize the runtime of a program written in Python?","completion":"One suggestion to optimize the runtime of a program written in Python is to use vectorized operations with NumPy where possible, as it can offer significant performance gains over native Python code. Additionally, use data structures such as dictionaries, sets and lists, where appropriate, as they can help improve lookup time and memory efficiency. Furthermore, implementing memoization, or caching of intermediate results, can greatly reduce the runtime performance of a program. Finally, use python profiling tools to identify and optimize code sections or functions which are the slowest."},{"prompt":"Write a Python code to convert the given number to hours, minutes and seconds. my_number = 3600","completion":"my_number = 3600 def convert_to_time(number): hours = number // 3600 minutes = (number % 3600) // 60 seconds = (number % 3600) % 60 return hours, minutes, seconds print(convert_to_time(my_number))"},{"prompt":"Optimize a Python program that displays prime numbers up to a given number to make the program run faster. Not applicable","completion":"import math def prime_sieve(n): sieve = [True] * (n+1) sieve[0] = False sieve[1] = False for i in range(2, int(math.sqrt(n)) + 1): if sieve[i]: for j in range(i*i, n+1, i): sieve[j] = False primes = [i for i in range(n+1) if sieve[i]] return primes # Example usage primes = prime_sieve(100) print(primes)"},{"prompt":"Given a sample data set, write a Python program to remove all rows that have missing values. name age nationality John 22 Nigerian Steve null American Harry 25 British","completion":"import pandas as pd data = { 'name': ['John', 'Steve', 'Harry'], 'age': [22, None, 25], 'nationality': ['Nigerian', 'American', 'British'] } df = pd.DataFrame(data) df = df.dropna() print(df)"},{"prompt":"Write a Python program which takes in a sentence and lists out all the words sorted by length. He had seen too many terrible things","completion":"sentence = \\"He had seen too many terrible things\\" words = sentence.split() sorted_words = sorted(words, key=len) print(sorted_words) # Output: ['He', 'had', 'too', 'many', 'seen', 'things', 'terrible']"},{"prompt":"Develop a program in Python to sort the elements in a list in ascending order. unsorted_list = [4,6,1,7,2]","completion":"def bubble_sort(unsorted_list): for i in range(len(unsorted_list)-1): for j in range(0, len(unsorted_list)-1-i): if(unsorted_list[j] > unsorted_list[j+1]): temp = unsorted_list[j] unsorted_list[j] = unsorted_list[j+1] unsorted_list[j+1] = temp bubble_sort(unsorted_list) print(unsorted_list)"},{"prompt":"Create a program in Python for searching a database for a specified record. Input database: name age John Smith 25 Jane Doe 32 Record to search for: John Smith","completion":"def search_database(data, record): # Search each row in the database for row in data: if row[0] == record: # Record found print(\\"Record found:\\", row) return # Record not found print(\\"Record not found\\") # Driver code data = [[\\"John Smith\\", 25], [\\"Jane Doe\\", 32]] record = \\"John Smith\\" search_database(data, record)"},{"prompt":"Write a python script to calculate the sum of an array of integers, ignoring any negative numbers. array = [4, 1, 6, 2, 9, 5]","completion":"def sum_without_negatives(arr): total = 0 for n in arr: if n >= 0: total += n return total array = [-4, 1, 6, 2, -9, 5] print(sum_without_negatives(array))"},{"prompt":"Modify the given program to print the output in reverse order def print_list(lst): for i in lst: print(i) word_list = [Python, is, fun] print_list(word_list)","completion":"def print_list_reverse(lst): for i in reversed(lst): print(i) word_list = [\\"Python\\", \\"is\\", \\"fun\\"] print_list_reverse(word_list)"},{"prompt":"Create a Python code snippet to separate colored objects into two groups, one for red and the other for blue.","completion":"def separate_objects(objects): red_group = [] blue_group = [] for obj in objects: if obj.color == 'red': red_group.append(obj) else: blue_group.append(obj) return (red_group, blue_group)"},{"prompt":"Write a function in Python to convert a base 10 number to a base 2 number. 72","completion":"def base10_to_base2(n): # Create an empty list to hold the binary representation of the number base2 = [] # Divide the number by 2 and keep track of the remainder while n > 0: remainder = n % 2 n = n // 2 base2.insert(0, remainder) return ''.join([str(x) for x in base2]) num = 72 base2_num = base10_to_base2(num) print(\\"Base 2 Representation: \\", base2_num)"},{"prompt":"Create a program in Python for ASCII conversion. String: “Hello World”","completion":"def ascii_conversion(string): return ''.join([f'{ord(c):08b}' for c in string]) print(ascii_conversion(\\"Hello World\\"))"},{"prompt":"Write a function in Python that creates a list of all the letter combinations of a given string.","completion":"def letterCombinations(string): letters = [] for i in range(len(string)): for j in range(i+1, len(string)+1): letters.append(string[i:j]) return letters"},{"prompt":"Create an unsupervised ML algorithm in Python which detects anomalies in a data set. Not applicable","completion":"import numpy as np from sklearn.cluster import DBSCAN def detect_anomalies(X): clustering = DBSCAN(eps=0.3, min_samples=2).fit(X) labels = clustering.labels_ num_clusters = len(np.unique(labels)) anomalies = np.zeros((len(X), 1)) for i in range(num_clusters): indices = np.where(labels == i)[0] if len(indices) < 2: anomalies[indices] = True return anomalies"},{"prompt":"Generate a program in Python that counts the number of words in a string. String: This is a sentence","completion":"def count_words(string): words = 0 for x in string.split(): words += 1 return words"},{"prompt":"Write a python function to search a list of numbers for a given number and output the position if found. numbers=[1,2,3,4,5], search=3","completion":"def search_list(numbers, search): for index, num in enumerate(numbers): if num == search: return index return -1"},{"prompt":"Write a Python function to find the index of the smallest integer in a list. [1, 4, 7, 8, 10]","completion":"def find_smallest_int(lst): min_index = 0 for index, num in enumerate(lst): if num < lst[min_index]: min_index = index return min_index lst = [1, 4, 7, 8, 10] smallest_int_index = find_smallest_int(lst) print(\\"Index of the smallest integer:\\", smallest_int_index)"},{"prompt":"Develop Python code to reverse an array. arr = [1, 2, 3, 4, 5]","completion":"def reverse_array(arr): start = 0 end = len(arr) - 1 while start < end: arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 return arr # Driver code arr = [1, 2, 3, 4, 5] print(reverse_array(arr))"},{"prompt":"Build a Python program to sort values Sort the array [9, 3, 1, 8, 5] in ascending order.","completion":"def sort_ascending(arr): # Bubble sort for i in range(len(arr) - 1): for j in range(len(arr) - 1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"prompt":"Generate a python program to approximate the maximum likelihood values of weights of a linear model.","completion":"def approximate_weights(X, y): # define random starting points for weights weights = np.random.rand(X.shape[1], 1) # optimize weights using gradient descent weights = gradient_descent(X, y, weights) return weights"},{"prompt":"Write a Python script to simulate the process of buying an item on a website where customers have to fill in multiple forms. No Inpu","completion":"def purchase_item(): print(\\"Hello! Let's purchase an item!\\") name = input(\\"Please enter your name: \\") address = input(\\"Please enter your address: \\") item = input(\\"What would you like to purchase? \\") quantity = input(\\"How many of that item would you like? \\") print(\\"Thank you for your order!\\") print(\\"Name: {}\\".format(name)) print(\\"Address: {}\\".format(address)) print(\\"Item: {}, Quantity: {}\\".format(item, quantity)) purchase_item()"},{"prompt":"Correct the errors and run this Python code. print(Hello&%World)","completion":"print(\\"Hello World\\")"},{"prompt":"Generate a python list comprehension to square each item in the list. alist = [1, 2, 3, 4]","completion":"[i**2 for i in alist]"},{"prompt":"Optimize a Python code snippet that implements quicksort. def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)","completion":"def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] right = [x for x in arr if x > pivot] # Move pivot to the end arr.remove(pivot) arr.append(pivot) # Sort the left and right sides left = quicksort(left) right = quicksort(right) # Merge and return the result return left + [pivot] + right"},{"prompt":"Design a linear search algorithm in Python that returns the index of an item in an array. arr = [1,2,3,4,5]","completion":"def linear_search(arr, target): \\"\\"\\" Searches through a given input array to find the index of a provided target number. Returns -1 if the target number is not found. \\"\\"\\" for i in range(len(arr)): if arr[i] == target: return i return -1"},{"prompt":"Generate a program in Python for predicting the price of a given house, given the characteristics of the house such as size, number of bedrooms, number of bathrooms, etc. size = 1,600 bedrooms = 3 bathrooms = 2 garage_size = 1","completion":"import pandas as pd # Create dataframe data = { 'size': [1,600], 'bedrooms': [3], 'bathrooms': [2], 'garage_size': [1] } df = pd.DataFrame(data) # Define the features and target features = df[['size','bedrooms','bathrooms','garage_size']] target = df['house_price'] # Split the data into training and testing sets from sklearn.model_selection import train_test_split x_train, x_test, y_train, y_test = train_test_split(features, target, test_size = 0.2) # Import linear regression model and train from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(x_train, y_train) # Make prediction on test data predictions = model.predict(x_test) print(predictions)"},{"prompt":"Modify the following python program to create a new list whose elements are a tuple with the values of both lists? list1 = [1, 2, 3, 4] list2 = [5, 6, 7, 8]","completion":"list1 = [1, 2, 3, 4] list2 = [5, 6, 7, 8] #create an empty list list3 = [] #iterate through each item in the two lists for x, y in zip(list1, list2): #append each tuple as a single element in the new list list3.append((x, y)) print(list3)"},{"prompt":"Construct a Python program to perform principal component analysis A dataset of 10 rows and 3 colum","completion":"from sklearn.decomposition import PCA def pca_transformation(X): pca = PCA() X_pca = pca.fit_transform(X) return X_pca"},{"prompt":"Write a python program to print the elements of a matrix in spiral form","completion":"def spiralPrint(m, n, a) : k = 0; l = 0 ''' k - starting row index m - ending row index l - starting column index n - ending column index i - iterator ''' while (k < m and l < n) : # Print the first row from the remaining rows for i in range(l, n) : print(a[k][i], end = \\" \\") k += 1 # Print the last column from the remaining columns for i in range(k, m) : print(a[i][n - 1], end = \\" \\") n -= 1 # Print the last row from the remaining rows if ( k < m) : for i in range(n - 1, (l - 1), -1) : print(a[m - 1][i], end = \\" \\") m -= 1 # Print the first column from the remaining columns if (l < n) : for i in range(m - 1, k - 1, -1) : print(a[i][l], end = \\" \\") l += 1"},{"prompt":"Generate a Python program that finds the maximum and minimum values of a given list. [1, 6, 4, 2, 3]","completion":"def findMaxMin(numbers): max_val = max(numbers) min_val = min(numbers) return max_val, min_val numbers = [-1, 6, 4, -2, 3] max_val, min_val = findMaxMin(numbers) print(\\"The maximum value is:\\", max_val) print(\\"The minimum value is:\\", min_val)"},{"prompt":"Propose a series of Python commands for downloading the content of a web page.","completion":"import requests page_url = 'https://www.example.com' page = requests.get(page_url) content = page.content"},{"prompt":"Write a Python program to generate a Pascal's triangle with a given number of rows. Number of Rows = 8","completion":"1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 1 6 15 20 15 6 1 1 7 21 35 35 21 7 1"},{"prompt":"Compare this objectoriented code in Python to the same code written in Java. class Car: def __init__(self, make, model, year): self.make = make self.model = model self.year = year self.odometer_reading = 0 def get_make_and_model(self): return f'{self.make} {self.model}'","completion":"// Java code public class Car { private String make; private String model; private int year; private int odometerReading; public Car(String make, String model, int year) { this.make = make; this.model = model; this.year = year; this.odometerReading = 0; } public String getMakeAndModel() { return this.make + \\" \\" + this.model; } }"},{"prompt":"Create a function in a Python script to produce the sum of an arbitrary number of integers. Not applicable","completion":"def sum_of_ints(*args): return sum(args) # Example Usage: sum_of_ints(1,2,3,4,5,6) # 21"},{"prompt":"Using the information provided, write a Python program to classify a given text into the proper category. categories = [sports, politics, history] text = The world cup is an international soccer competition.","completion":"def classify_text(categories, text): if any(category in text for category in categories): for category in categories: if category in text: return category else: return \\"Uncategorized\\" print(classify_text(categories, text)) # Output: sports"},{"prompt":"Create a Python program to print the even numbers from a given list. [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"[2, 4, 6, 8]"},{"prompt":"Create a web scraper with Python Scrapy to collect data on news articles from the web. Not applicable","completion":"import scrapy class NewsSpider(scrapy.Spider): name = 'news_spider' start_urls = ['https://www.example.com/news/'] def parse(self, response): for article_url in response.css('a.article-title::attr(href)').extract(): yield scrapy.Request(response.urljoin(article_url), callback=self.parse_article) def parse_article(self, response): yield { 'title': response.css('h1.article-title::text').extract_first(), 'date': response.css('time.article-date::text').extract_first(), 'author': response.css('span.article-author::text').extract_first(), 'text': response.css('div.article-content p::text').extract() }"},{"prompt":"Develop a web crawler to fetch data for a given keyword.","completion":"A web crawler can be developed using programming languages such as Python, JavaScript, etc. It will contain code to crawl the web based on the given keyword, parse the data and store it."},{"prompt":"Design a class in Python that can store student information such as name and marks.","completion":"class Student: def __init__(self, name, marks): self.name = name self.marks = marks def getName(self): return self.name def getMarks(self): return self.marks"},{"prompt":"Create a Python function which takes an integer as input and prints it in binary.","completion":"def int_to_binary(n): if n == 0: return '0' bin_string = \\"\\" while n > 0: bin_string = str(n%2) + bin_string n = n // 2 return bin_string"},{"prompt":"Generate code that optimizes a Python program so it runs faster. n = 30 result = 0 for i in range(n): for j in range(n): result += i * j","completion":"import numpy as np n = 30 # Optimized code using numpy result = np.sum(np.multiply(np.arange(n), np.arange(n)))"},{"prompt":"Create a Python program to generate a random string of length 5, containing only lowercase letters.","completion":"import random def generateString(string_length): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(string_length)) print(generateString(5))"},{"prompt":"Optimize and refactor an existing Python function. Example function: def factorial_recursive(n): if n == 0: return 1 return n * factorial_recursive(n1)","completion":"def factorial(n): if n == 0: return 1 result = 1 while n > 0: result = result * n n = n - 1 return result"},{"prompt":"Create a basic Python script for printing a pattern of stars. Not applicable","completion":"# Print pattern for i in range(1, 6): for j in range(0, i): print(\\"* \\", end=\\"\\") print() # Output # * # * * # * * * # * * * * # * * * * *"},{"prompt":"Create a python script to fetch data from an API","completion":"import requests #make the API call response = requests.get('http://api.example.com/') #get the data from the response data = response.json() #print the data print(data)"},{"prompt":"This code is a job runner for SGE (Sun Grid Engine) that runs jobs in a finite pool of worker threads. To use this code, import the necessary modules and create an instance of the SGEJobRunner class, passing in the app as an argument. Then, call the put method on the instance of the SGEJobRunner class, passing in a job wrapper as an argument to add a job to the queue. The monitor thread will watch the jobs in the queue and deal with state changes and job completion. To shut down the monitor thread, call the shutdown method on the instance of the SGEJobRunner class.","completion":"import os, logging, threading, time from Queue import Queue, Empty from galaxy import model from paste.deploy.converters import asbool import pkg_resources try: pkg_resources.require( \\"DRMAA_python\\" ) DRMAA = __import__( \\"DRMAA\\" ) except: DRMAA = None log = logging.getLogger( __name__ ) if DRMAA is not None: DRMAA_state = { DRMAA.Session.UNDETERMINED: 'process status cannot be determined', DRMAA.Session.QUEUED_ACTIVE: 'job is queued and waiting to be scheduled', DRMAA.Session.SYSTEM_ON_HOLD: 'job is queued and in system hold', DRMAA.Session.USER_ON_HOLD: 'job is queued and in user hold', DRMAA.Session.USER_SYSTEM_ON_HOLD: 'job is queued and in user and system hold', DRMAA.Session.RUNNING: 'job is running', DRMAA.Session.SYSTEM_SUSPENDED: 'job is system suspended', DRMAA.Session.USER_SUSPENDED: 'job is user suspended', DRMAA.Session.DONE: 'job finished normally', DRMAA.Session.FAILED: 'job finished, but failed', } sge_template = \\"\\"\\"#!/bin/sh # -S /bin/sh GALAXY_LIB=\\"%s\\" if [ \\"GALAXY_LIB\\" != \\"None\\" ]; then if [ -n \\"PYTHONPATH\\" ]; then PYTHONPATH=\\"GALAXY_LIB:PYTHONPATH\\" else PYTHONPATH=\\"GALAXY_LIB\\" fi export PYTHONPATH fi cd %s %s \\"\\"\\" class SGEJobState( object ): def __init__( self ): \\"\\"\\" Encapsulates state related to a job that is being run via SGE and that we need to monitor. \\"\\"\\" self.job_wrapper = None self.job_id = None self.old_state = None self.running = False self.job_file = None self.ofile = None self.efile = None self.runner_url = None class SGEJobRunner( object ): \\"\\"\\" Job runner backed by a finite pool of worker threads. FIFO scheduling \\"\\"\\" STOP_SIGNAL = object() def __init__( self, app ): \\"\\"\\"Initialize this job runner and start the monitor thread\\"\\"\\" # Check if SGE was importable, fail if not if DRMAA is None: raise Exception( \\"SGEJobRunner requires DRMAA_python which was not found\\" ) self.app = app # 'watched' and 'queue' are both used to keep track of jobs to watch. # 'queue' is used to add new watched jobs, and can be called from # any thread (usually by the 'queue_job' method). 'watched' must only # be modified by the monitor thread, which will move items from 'queue' # to 'watched' and then manage the watched jobs. self.watched = [] self.queue = Queue() self.default_cell = self.determine_sge_cell( self.app.config.default_cluster_job_runner ) self.ds = DRMAA.Session() self.ds.init( self.default_cell ) self.monitor_thread = threading.Thread( target=self.monitor ) self.monitor_thread.start() log.debug( \\"ready\\" ) def determine_sge_cell( self, url ): \\"\\"\\"Determine what SGE cell we are using\\"\\"\\" url_split = url.split(\\"/\\") if url_split[0] == 'sge:': return url_split[2] # this could happen if sge is started, but is not the default runner else: return '' def determine_sge_queue( self, url ): \\"\\"\\"Determine what SGE queue we are submitting to\\"\\"\\" url_split = url.split(\\"/\\") queue = url_split[3] if queue == \\"\\": # None == server's default queue queue = None return queue def queue_job( self, job_wrapper ): \\"\\"\\"Create SGE script for a job and submit it to the SGE queue\\"\\"\\" try: job_wrapper.prepare() command_line = job_wrapper.get_command_line() except: job_wrapper.fail( \\"failure preparing job\\", exception=True ) log.exception(\\"failure running job %d\\" % job_wrapper.job_id) return runner_url = job_wrapper.tool.job_runner # This is silly, why would we queue a job with no command line? if not command_line: job_wrapper.finish( '', '' ) return # Check for deletion before we change state if job_wrapper.get_state() == model.Job.states.DELETED: log.debug( \\"Job %s deleted by user before it entered the SGE queue\\" % job_wrapper.job_id ) job_wrapper.cleanup() return # Change to queued state immediately job_wrapper.change_state( model.Job.states.QUEUED ) if self.determine_sge_cell( runner_url ) != self.default_cell: # TODO: support multiple cells log.warning( \\"(%s) Using multiple SGE cells is not supported. This job will be submitted to the default cell.\\" % job_wrapper.job_id ) sge_queue_name = self.determine_sge_queue( runner_url ) # define job attributes ofile = \\"%s/database/pbs/%s.o\\" % (os.getcwd(), job_wrapper.job_id) efile = \\"%s/database/pbs/%s.e\\" % (os.getcwd(), job_wrapper.job_id) jt = self.ds.createJobTemplate() jt.remoteCommand = \\"%s/database/pbs/galaxy_%s.sh\\" % (os.getcwd(), job_wrapper.job_id) jt.outputPath = \\":%s\\" % ofile jt.errorPath = \\":%s\\" % efile if sge_queue_name is not None: jt.setNativeSpecification( \\"-q %s\\" % sge_queue_name ) script = sge_template % (job_wrapper.galaxy_lib_dir, os.path.abspath( job_wrapper.working_directory ), command_line) fh = file( jt.remoteCommand, \\"w\\" ) fh.write( script ) fh.close() os.chmod( jt.remoteCommand, 0750 ) # job was deleted while we were preparing it if job_wrapper.get_state() == model.Job.states.DELETED: log.debug( \\"Job %s deleted by user before it entered the SGE queue\\" % job_wrapper.job_id ) self.cleanup( ( ofile, efile, jt.remoteCommand ) ) job_wrapper.cleanup() return galaxy_job_id = job_wrapper.job_id log.debug(\\"(%s) submitting file %s\\" % ( galaxy_job_id, jt.remoteCommand ) ) log.debug(\\"(%s) command is: %s\\" % ( galaxy_job_id, command_line ) ) # runJob will raise if there's a submit problem job_id = self.ds.runJob(jt) if sge_queue_name is None: log.debug(\\"(%s) queued in default queue as %s\\" % (galaxy_job_id, job_id) ) else: log.debug(\\"(%s) queued in %s queue as %s\\" % (galaxy_job_id, sge_queue_name, job_id) ) # store runner information for tracking if Galaxy restarts job_wrapper.set_runner( runner_url, job_id ) # Store SGE related state information for job sge_job_state = SGEJobState() sge_job_state.job_wrapper = job_wrapper sge_job_state.job_id = job_id sge_job_state.ofile = ofile sge_job_state.efile = efile sge_job_state.job_file = jt.remoteCommand sge_job_state.old_state = 'new' sge_job_state.running = False sge_job_state.runner_url = runner_url # delete the job template self.ds.deleteJobTemplate( jt ) # Add to our 'queue' of jobs to monitor self.queue.put( sge_job_state ) def monitor( self ): \\"\\"\\" Watches jobs currently in the PBS queue and deals with state changes (queued to running) and job completion \\"\\"\\" while 1: # Take any new watched jobs and put them on the monitor list try: while 1: sge_job_state = self.queue.get_nowait() if sge_job_state is self.STOP_SIGNAL: # TODO: This is where any cleanup would occur self.ds.exit() return self.watched.append( sge_job_state ) except Empty: pass # Iterate over the list of watched jobs and check state self.check_watched_items() # Sleep a bit before the next state check time.sleep( 1 ) def check_watched_items( self ): \\"\\"\\" Called by the monitor thread to look at each watched job and deal with state changes. \\"\\"\\" new_watched = [] for sge_job_state in self.watched: job_id = sge_job_state.job_id galaxy_job_id = sge_job_state.job_wrapper.job_id old_state = sge_job_state.old_state try: state = self.ds.getJobProgramStatus( job_id ) except DRMAA.InvalidJobError: # we should only get here if an orphaned job was put into the queue at app startup log.debug(\\"(%s/%s) job left SGE queue\\" % ( galaxy_job_id, job_id ) ) self.finish_job( sge_job_state ) continue except Exception, e: # so we don't kill the monitor thread log.exception(\\"(%s/%s) Unable to check job status\\" % ( galaxy_job_id, job_id ) ) log.warning(\\"(%s/%s) job will now be errored\\" % ( galaxy_job_id, job_id ) ) sge_job_state.job_wrapper.fail( \\"Cluster could not complete job\\" ) continue if state != old_state: log.debug(\\"(%s/%s) state change: %s\\" % ( galaxy_job_id, job_id, DRMAA_state[state] ) ) if state == DRMAA.Session.RUNNING and not sge_job_state.running: sge_job_state.running = True sge_job_state.job_wrapper.change_state( model.Job.states.RUNNING ) if state == DRMAA.Session.DONE: self.finish_job( sge_job_state ) continue if state == DRMAA.Session.FAILED: sge_job_state.job_wrapper.fail( \\"Cluster could not complete job\\" ) sge_job_state.job_wrapper.cleanup() continue sge_job_state.old_state = state new_watched.append( sge_job_state ) # Replace the watch list with the updated version self.watched = new_watched def finish_job( self, sge_job_state ): \\"\\"\\" Get the output/error for a finished job, pass to \`job_wrapper.finish\` and cleanup all the SGE temporary files. \\"\\"\\" ofile = sge_job_state.ofile efile = sge_job_state.efile job_file = sge_job_state.job_file # collect the output try: ofh = file(ofile, \\"r\\") efh = file(efile, \\"r\\") stdout = ofh.read() stderr = efh.read() except: stdout = '' stderr = 'Job output not returned from cluster' log.debug(stderr) try: sge_job_state.job_wrapper.finish( stdout, stderr ) except: log.exception(\\"Job wrapper finish method failed\\") # clean up the sge files self.cleanup( ( ofile, efile, job_file ) ) def cleanup( self, files ): if not asbool( self.app.config.get( 'debug', False ) ): for file in files: if os.access( file, os.R_OK ): os.unlink( file ) def put( self, job_wrapper ): \\"\\"\\"Add a job to the queue (by job identifier)\\"\\"\\" self.queue_job( job_wrapper ) def shutdown( self ): \\"\\"\\"Attempts to gracefully shut down the monitor thread\\"\\"\\" log.info( \\"sending stop signal to worker threads\\" ) self.queue.put( self.STOP_SIGNAL ) log.info( \\"sge job runner stopped\\" ) def stop_job( self, job ): \\"\\"\\"Attempts to delete a job from the SGE queue\\"\\"\\" try: self.ds.control( job.job_runner_external_id, DRMAA.Session.TERMINATE ) log.debug( \\"(%s/%s) Removed from SGE queue at user's request\\" % ( job.id, job.job_runner_external_id ) ) except DRMAA.InvalidJobError: log.debug( \\"(%s/%s) User killed running job, but it was already dead\\" % ( job.id, job.job_runner_external_id ) ) def recover( self, job, job_wrapper ): \\"\\"\\"Recovers jobs stuck in the queued/running state when Galaxy started\\"\\"\\" sge_job_state = SGEJobState() sge_job_state.ofile = \\"%s/database/pbs/%s.o\\" % (os.getcwd(), job.id) sge_job_state.efile = \\"%s/database/pbs/%s.e\\" % (os.getcwd(), job.id) sge_job_state.job_file = \\"%s/database/pbs/galaxy_%s.sh\\" % (os.getcwd(), job.id) sge_job_state.job_id = str( job.job_runner_external_id ) sge_job_state.runner_url = job_wrapper.tool.job_runner job_wrapper.command_line = job.command_line sge_job_state.job_wrapper = job_wrapper if job.state == model.Job.states.RUNNING: log.debug( \\"(%s/%s) is still in running state, adding to the SGE queue\\" % ( job.id, job.job_runner_external_id ) ) sge_job_state.old_state = DRMAA.Session.RUNNING sge_job_state.running = True self.queue.put( sge_job_state ) elif job.state == model.Job.states.QUEUED: log.debug( \\"(%s/%s) is still in SGE queued state, adding to the SGE queue\\" % ( job.id, job.job_runner_external_id ) ) sge_job_state.old_state = DRMAA.Session.QUEUED sge_job_state.running = False self.queue.put( sge_job_state )"},{"prompt":"Create a Python program that takes as input a binary tree and returns an array with the inorder traversal of the binary tree. Not applicable","completion":"# Definition for a binary tree node. class TreeNode: def __init__(self, val=0, left=None, right=None): self.val = val self.left = left self.right = right def inOrderTraversal(root): result = [] stack = [] current = root while True: if current is not None: # If there is a left node, add it to the stack if current.left is not None: stack.append(current) current = current.left else: # If at a leaf node, get the value result.append(current.val) # Check if there is a right node, if so go to it if current.right is not None: current = current.right else: # Check if stack is empty, if it is then the tree has been # fully visited if len(stack) == 0: break # Get node from the stack and go to it's right node current = stack.pop() current = current.right return result"},{"prompt":"Write a function in Python that takes a string as input and returns a count of the number of vowels found in the string.","completion":"def count_vowels(string): vowels = 0 for i in string: if(i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u'): vowels = vowels + 1 return vowels"},{"prompt":"Create a class in Python that contains a property called name and a constructor to set the value of the name property. Joh","completion":"class Person: def __init__(self, name): self.name = name person = Person(\\"John\\")"},{"prompt":"Develop a program in Python to calculate the average of five given numbers.","completion":"def average(nums): total = 0 for num in nums: total+=num return total / len(nums) print(average([1, 2, 3, 4, 5])) // Output: 3"},{"prompt":"mplement a function in Python that takes in an array of integers and returns the pair of integers that have the greatest product. array = [10, 3, 5, 6, 2]","completion":"def calculate_greatest_product(array): greatest_product = float('-inf') first_pair = None second_pair = None for i in range(0, len(array)-1): for j in range(i+1, len(array)): product = array[i] * array[j] if product > greatest_product: greatest_product = product first_pair = array[i] second_pair = array[j] return first_pair, second_pair greatest_product = calculate_greatest_product(array) print(greatest_product) # Output: (-10, 6)"},{"prompt":"Write a SQL query to find all the articles with a title containing the word Python. Not applicable","completion":"SELECT * FROM Articles WHERE title LIKE '%Python%';"},{"prompt":"Develop an AI chatbot that can answer natural language queries about the top 10 most popular programming languages. What is the most popular programming language?","completion":"The most popular programming language is Java. It is the first choice of many companies, developers, and students. It is widely used for developing desktop, web, and mobile applications. Its usage percentage has been steadily increasing since 2017 and other languages such as Python and JavaScript have been slowly catching up. According to the TIOBE index, Java is currently the most popular language in the world, followed by C, Python, and C++. Other major programming languages in the top 10 include JavaScript, C#, Ruby, and Go. Java is used by more than 13 million developers and is the official language of Android development. It is also used widely in many large enterprises and is one of the best choices for developers to learn to stay up-to-date in the field."},{"prompt":"Can you design an algorithm in Python to optimize the given array order? [10, 40, 70,30, 20]","completion":"def optimize_array(array): # Create an empty list new_arr = [] # Initialize subtracted sum and maximum element max_element = array[0] sums = 0 # Iterate through given array for i in range(len(array)): # Calculate sums and find new maximum element sums += array[i] if max_element < array[i]: max_element = array[i] # Append subtracted sum and maximum element to new array new_arr.append(max_element - sums) return new_arr array1 = [10, 40, 70,30, 20] optimized_array = optimize_array(array1) print(optimized_array)"},{"prompt":"mprove the following code by simplifying it using Python's builtin functions. def add_two_nums(a, b): result =0 for i in range(a): result = result + b return resul","completion":"def add_two_nums(a, b): return a * b"},{"prompt":"Create a web crawler in Python which searches for all links on a given website and prints them out in the terminal. url = 'https://example.com'","completion":"import requests from bs4 import BeautifulSoup # Get the HTML from the given URL resp = requests.get(url) # Parse the HTML soup = BeautifulSoup(resp.text, 'html.parser') # Find all the links for link in soup.find_all('a'): print(link.get('href'))"},{"prompt":"Write an Algorithm in Python that takes in a commaseparated string of numbers and returns the sum of the numbers. '1,2,3'","completion":"def sumString(s): nums = s.split(',') total = 0 for num in nums: total += int(num) return total"},{"prompt":"Create a Python function to establish a connection to a SQL database.","completion":"import mysql.connector def establish_connection(hostname, user, password): db = mysql.connector.connect( host=hostname, user=user, passwd=password ) return db"},{"prompt":"Create a Python script to print out the values in a given dictionary, with each key and value on a separate line. my_dict = {'a': 1, 'b': 2, 'c': 3}","completion":"for k, v in my_dict.items(): print(f'{k}: {v}')"},{"prompt":"Using Python, write a program that prints out the Fibonacci sequence up until the number 100. Not applicable","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b # Function to display Fibonacci sequence until number 100 for i in range(101): print(Fibonacci(i),end = \\" \\")"},{"prompt":"Create a Python program that displays the number of characters and words in a given sentence. Francesco is learning to code","completion":"def count_words_and_characters(str): character_count = 0 word_count = 0 #remove non-character unicode from string str = str.strip(' ') for s in str: if s != ' ': character_count += 1 #count the words separated by space for word in str.split(' '): word_count += 1 print('Number of characters:', character_count) print('Number of words:', word_count) count_words_and_characters('Francesco is learning to code')"},{"prompt":"Create a Python script which calculate the sum of all even numbers from 0 to 100.","completion":"def calculateSumOfEvenNumbers(number): sum = 0 for i in range(number+1): if i % 2 == 0: sum += i return sum sum = calculateSumOfEvenNumbers(100) print(sum)"},{"prompt":"Write a Python program to create a list of tuples from two lists of equal length with each element in the tuple being the sum of the two corresponding elements in the lists. list1 = [1, 2, 3, 4] list2 = [4, 3, 2, 1]","completion":"tuple_list = list(zip(list1, list2)) sum_list = [(x + y) for (x, y) in tuple_list]"},{"prompt":"Write python code to find the sum of all even numbers from 0 to 100.","completion":"# Function to find the sum of all even numbers from 0 to n def sum_of_even_numbers(n): # Initialize a sum variable sum = 0 # Iterate through all even numbers less than or equal to n for i in range(0, n+1, 2): sum += i # Return the sum return sum # This function is called sum = sum_of_even_numbers(100) print(sum)"},{"prompt":"Create a function in Python to reverse a linked list.","completion":"class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next def reverseList(head): # initialize prev to null prev = None # till end of list while head is not None: # new points to old head new = head # move head to the postion of old head head = head.next # transfer old head's next to pointing at previus element new.next = prev # prev points to new head prev = new # prev will become new head head = prev return head"},{"prompt":"Generate a program using Python that takes a userdefined dictionary with string values and returns the reversed keyvalue mappings. The dictionary is: {one: apple,two: banana,three: pear }","completion":"myDict = {\\"one\\": \\"apple\\",\\"two\\": \\"banana\\",\\"three\\": \\"pear\\" } reverseMyDict = {} for key, value in myDict.items(): reverseMyDict[value] = key print(reverseMyDict) # Output: {'apple': 'one', 'banana': 'two', 'pear': 'three'}"},{"prompt":"Using Python, create a function that calculates the factorial of any given number.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n - 1)"},{"prompt":"Create code to print out the Fibonacci numbers using a Python recursive function","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Code print(Fibonacci(9))"},{"prompt":"Create an AI assistant in Python that can take a natural language query and respond back in human language. What is the meaning of life?","completion":"import nltk from nltk.stem import WordNetLemmatizer from nltk.corpus import wordnet class AIAssistant: def __init__(self): self.lemmatizer = WordNetLemmatizer() def lemmatize_file_output(self, sentence): sentence_words = nltk.word_tokenize(sentence) lemmatized_words = [self.lemmatizer.lemmatize(word, self.get_wordnet_pos(word)) for word in sentence_words] return ' '.join(lemmatized_words) def get_wordnet_pos(self, word): tag = nltk.pos_tag([word])[0][1][0].upper() tag_dict = {\\"J\\": wordnet.ADJ, \\"N\\": wordnet.NOUN, \\"V\\": wordnet.VERB, \\"R\\": wordnet.ADV} return tag_dict.get(tag, wordnet.NOUN) def reply(sentence): ai_assistant = AIAssistant() lemmatzed_query = ai_assistant.lemmatize_file_output(sentence) if lemmatzed_query == 'What be the meaning of life ?': return 'The meaning of life is to find your purpose, whatever that may be.' print(reply(\\"What is the meaning of life?\\"))"},{"prompt":"Write a Python program to implement KMeans clustering. The program should take two mandatory arguments, k and data, where k is the number of clusters and data is a 2D array containing the data points. k = 3 data = [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]","completion":"import numpy as np from sklearn.cluster import KMeans def kmeans(k, data): kmeans = KMeans(k) kmeans.fit(data) return kmeans.labels_ k = 3 data = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) cluster_labels = kmeans(k, data) print(cluster_labels)"},{"prompt":"'s been a long day! Can you develop a python program that will print the lyrics of the song Tubthumping to the console?","completion":"def print_lyrics(): lyrics = [\\"We'll be singing when we're winning\\",\\"We'll be singing I get knocked down, but I get up again\\",\\"You're never gonna keep me down \\",\\"I get knocked down, but I get up again\\",\\"You're never gonna keep me down \\",\\"I get knocked down, but I get up again\\",\\"You're never gonna keep me down \\",\\"We'll be singing when we're winning\\",\\"We'll be singing.\\"] for line in lyrics: print(line) print_lyrics()"},{"prompt":"Write a Python program to calculate the total sum of a given list of numbers [1,2,3,4,5]","completion":"\\"\\"\\" Calculate the total sum of a given list of numbers using Python \\"\\"\\" # Function to calculate the total sum of a given list of numbers def get_total_sum(num_list): total = 0 for num in num_list: total += num return total if __name__ == '__main__': num_list = [1,2,3,4,5] total_sum = get_total_sum(num_list) print(total_sum)"},{"prompt":"Develop a Python program that takes in a sentence and returns a list containing all the words in the sentence converted to upper case.","completion":"def makeUpperCase(sentence): words = sentence.split() newWords = [word.upper() for word in words] return newWords print(makeUpperCase('Welcome to world of python')) #['WELCOME', 'TO', 'WORLD', 'OF', 'PYTHON']"},{"prompt":"Design an algorithm in Python to Merge two lists. [1, 3, 5], [2, 4, 6]","completion":"def merge(list1, list2): merged_list = [] while list1 and list2: if list1[0] < list2[0]: merged_list.append(list1[0]) list1.pop(0) else: merged_list.append(list2[0]) list2.pop(0) merged_list += list1 merged_list += list2 return merged_list list1 = [1, 3, 5] list2 = [2, 4, 6] merged_list = merge(list1, list2) print(\\"Merged list:\\") print(merged_list)"},{"prompt":"Develop a program to remove all the comments from a Python code. import sys # This code prints hello world def main(): print(Hello World!)","completion":"import sys def main(): print(\\"Hello World!\\")"},{"prompt":"Generate code to calculate factorial using a while loop in Python","completion":"def factorial(n): fact = 1 while(n>0): fact=fact*n n=n-1 return fact"},{"prompt":"Write a Python program to take a list of numbers and reverse the order of the elements in the list in place. [1, 2, 3, 4, 5]","completion":"def reverse_list(numbers): # get the length of the list n = len(numbers) # loop through the list for i in range(n // 2): # swap the elements numbers[i], numbers[n - i - 1] = numbers[n - i - 1], numbers[i] numbers = [1, 2, 3, 4, 5] reverse_list(numbers) print(numbers) # [5, 4, 3, 2, 1]"},{"prompt":"Create a class in python to encode and decode text using a caesar cipher method","completion":"class CaesarCipher: def __init__(self, shift): self.shift = shift def encode(self, text): encoded_text = '' for c in text: if c.isalpha(): num_shift = ord(c) + self.shift if c.isupper(): if num_shift > ord('Z'): num_shift -= 26 elif num_shift < ord('A'): num_shift += 26 elif c.islower(): if num_shift > ord('z'): num_shift -= 26 elif num_shift < ord('a'): num_shift += 26 encoded_text += chr(num_shift) else: encoded_text += c return encoded_text def decode(self, text): decoded_text = '' for c in text: if c.isalpha(): num_shift = ord(c) - self.shift if c.isupper(): if num_shift > ord('Z'): num_shift -= 26 elif num_shift < ord('A'): num_shift += 26 elif c.islower(): if num_shift > ord('z'): num_shift -= 26 elif num_shift < ord('a'): num_shift += 26 decoded_text += chr(num_shift) else: decoded_text += c return decoded_text"},{"prompt":"Generate a python program to implement a DFA (deterministic finite automaton)m for the language L = {a^nb^m | m=n or m=n+1}","completion":"def implement_dfa(input_string): state = 0 a_count = 0 b_count = 0 for c in input_string: if c == 'a': a_count += 1 if state == 0: state = 1 if c == 'b': b_count += 1 if state == 1 and b_count < a_count + 1: state = 2 elif state == 1 and b_count == a_count + 1: state = 3 if state == 2: return True else: return False"},{"prompt":"Construct a web scraper using Python to find the temperature for a given city. city = 'San Francisco'","completion":"import requests from bs4 import BeautifulSoup def get_temperature(city): url = f'https://www.google.com/search?q=temperature+in+{city}' response = requests.get(url) soup = BeautifulSoup(response.text, 'lxml') temperature = soup.find('div', {'id': 'wob_tm'}).text return temperature if __name__ == '__main__': city = 'San Francisco' print(get_temperature(city))"},{"prompt":"Create a function in Python that takes two dates as parameters and calculates the number of days between them.","completion":"def date_difference(date1, date2): diff = date2 - date1 return diff.days"},{"prompt":"Design a program in Python which evaluates a given expression and produces an output. expression = 2+24/2","completion":"#define plus '+' #define minus '-' #define mul '*' #define div '/' # Function to evaluate the expression # and return the result def evaluate(expression): stack = [] result = 0 sign = \\"+\\" for i in range(len(expression)): # If digit is encountered, convert # it into number and push it into the stack if expression[i].isdigit(): digit = 0 while (i < len(expression) and expression[i].isdigit()): digit = (digit * 10 + (ord(expression[i]) - ord('0'))) i += 1 stack.append(digit) # If operator is encountered # pop two element from stack # perform operation and # push result into the stack elif expression[i] == plus: sign = \\"+\\" elif expression[i] == minus: sign = \\"-\\" elif expression[i] == mul: sign = \\"*\\" elif expression[i] == div: sign = \\"/\\" elif expression[i] == ' ': continue # Pop two elements from stack # perform operation and push result # into the stack else: val1 = stack.pop() val2 = stack.pop() if sign == \\"-\\": result = val2 - val1 stack.append(result) elif sign == \\"+\\": result = val2 + val1 stack.append(result) elif sign == \\"*\\": result = val2 - val1 stack.append(result) elif sign == \\"/\\": result = val2 - val1 stack.append(result) return stack.pop() # Driver code expression = \\"2+2-4/2\\" print(evaluate(expression)) # Outputs 2"},{"prompt":"Generate a program in Python for a simple chatbot. The program should accept a user input and output a response using the input provided. Hello","completion":"user_input = input(\\"User: \\") if user_input == \\"Hello\\": print(\\"Chatbot: Hi there!\\") else: print(\\"Chatbot: I'm not sure what you mean, please try again.\\")"},{"prompt":"Write a Python code snippet to remove the last element from a list. example_list = [3, 1, 5, 7, 4, 8, 2]","completion":"def remove_last_element(lst): last_index = len(lst) - 1 del lst[last_index] example_list = [3, 1, 5, 7, 4, 8, 2] remove_last_element(example_list) print(example_list) # Output: [3, 1, 5, 7, 4, 8]"},{"prompt":"Write a code in Python to convert a binary tree into its mirrored version.","completion":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None def mirrorBinaryTree(node): if node is None: #base case return else: #recursive temp = node.left node.left = node.right node.right = temp mirrorBinaryTree(node.left) # left subtree mirrorBinaryTree(node.right) #right subtree"},{"prompt":"Create a function in Python that implements the bubble sort algorithm.","completion":"def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [64, 34, 25, 12, 22, 11, 90] bubble_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Given two strings, write a Python function to check if they are anagrams of each other. schoolmaster, the classroom","completion":"def is_anagram(s1, s2): s1 = s1.lower().replace(\\" \\", \\"\\") s2 = s2.lower().replace(\\" \\", \\"\\") return sorted(s1) == sorted(s2) result = is_anagram(\\"schoolmaster\\", \\"the classroom\\") print(result)"},{"prompt":"Create a Python class for a Car. This class should contain fields for the type, model, and number of seats, and methods for calculating the maximum speed and average fuel consumption. Not applicable","completion":"class Car: def __init__(self, type, model, seats): self.type = type self.model = model self.seats = seats def calculate_max_speed(self): pass def calculate_avg_fuel(self): pass # create a car my_car = Car('sedan', 'Tesla Model 3', 5)"},{"prompt":"Optimize a given Python program using memoization. def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n1) + fibonacci(n2)","completion":"def fibonacci(n): # store the already calculated values in the dictionary memo = {0:0, 1:1} if n in memo: return memo[n] else: memo[n] = fibonacci(n-1) + fibonacci(n-2) return memo[n]"},{"prompt":"Create a python program to generate the 1st 10 Fibonacci numbers.","completion":"def generate_fibonacci(): \\"\\"\\"This program generates the 1st 10 Fibonacci numbers.\\"\\"\\" a, b = 0, 1 result = [] for i in range(1, 11): a, b = b, a + b result.append(a) return result"},{"prompt":"Create a Python program to sort a list of tuples based on the second element in each tuple. [(1, 2), (4, 1), (9, 10), (13, 3)]","completion":"def sort_tuples(a): return sorted(a, key = lambda x: x[1]) a = [(1, 2), (4, 1), (9, 10), (13, -3)] print(sort_tuples(a)) # Output: [(13, -3), (4, 1), (1, 2), (9, 10)]"},{"prompt":"Create a Python script to open a web browser and navigate to www.google.com.","completion":"import webbrowser # open web browser and navigate to google webbrowser.open(\\"https://www.google.com\\")"},{"prompt":"Design an algorithm in Python that finds all the elements of an array that sum to a given number. Not applicable","completion":"def findElements(arr, sum): result = [] for i in range(0,len(arr)-1): for j in range(i + 1, len(arr)): if arr[i] + arr[j] == sum: result.append([arr[i], arr[j]]) return result arr = [3, 5, 2, -4, 8, 11] sum = 7 print(findElements(arr, sum))"},{"prompt":"Create a hashmap data structure in Python that stores keys and values.","completion":"my_dict = {} # Adding key-value pairs my_dict['a'] = 'apple' my_dict['b'] = 'banana' my_dict['c'] = 'cat' # Retrieving values apple = my_dict['a'] banana = my_dict['b'] cat = my_dict['c'] print(apple, banana, cat)"},{"prompt":"Develop an algorithm in Python to generate a maze.","completion":"# Algorithm to generate a maze using the depth-first search algorithm def generate_maze(width, height): maze = [[0]*width + [1] for _ in range(height)] + [[1]*(width + 1)] visited = [[False]*width + [True] for _ in range(height)] + [[True]*(width + 1)] stack = [(0, 0)] while stack: (cx, cy) = stack[-1] neighbours = [] directions = ((-1, 0), (1, 0), (0, -1), (0, 1)) for dx, dy in directions: nx, ny = cx + dx, cy + dy if width > nx >= 0 <= ny < height and not visited[ny][nx]: neighbours.append((nx, ny)) if neighbours: visited[cy][cx] = True (nx, ny) = neighbours[0] maze[cy][cx] = 0 stack.append((nx, ny)) visited[ny][nx] = True else: stack.pop() if stack: (nx, ny) = stack[-1] maze[cy][cx] = 0 else: break return maze # Driver code maze = generate_maze(10, 10) # Print the generated maze for line in maze: print(line)"},{"prompt":"Create a Python program to find the total number of vowels and consonants in a given set of words. Hello World","completion":"def count_letters(sentence): \\"\\"\\" Count the number of vowels and consonants in the given sentence. @param sentence: str @return: tuple \\"\\"\\" vowels = 0 consonants = 0 for char in sentence: if char.lower() in \\"aeiou\\": vowels += 1 elif char.isalpha(): consonants += 1 return (vowels, consonants)"},{"prompt":"Write a Python script that takes a dictionary and prints out the keys and their respective lengths. dictionary = { one: 1, two: 2, three: 3, four: 4 }","completion":"for key, value in dictionary.items(): print(f'The length of {key} is {len(key)}')"},{"prompt":"Build a decision tree in Python to identify potential customers.","completion":"import pandas as pd from sklearn.tree import DecisionTreeClassifier # Read in data data = pd.read_csv('customer_data.csv') # Create features and target X = data.drop('is_potential_customer', axis=1) y = data['is_potential_customer'] # Create the decision tree model = DecisionTreeClassifier() model.fit(X, y)"},{"prompt":"Design an algorithm in Python that checks if a string is a palindrome.","completion":"def isPalindrome(string): l = \\"\\".join(re.findall(\\"[a-zA-z]+\\", string)).lower() return l == l[::-1]"},{"prompt":"Using the Iterator pattern, write a Python program to traverse through a given set of data Data Set: [Apple, Banana, Orange, Strawberry]","completion":"\\"\\"\\" Using the Iterator pattern, write a Python program to traverse through a given set of data Data Set: [\\"Apple\\", \\"Banana\\", \\"Orange\\", \\"Strawberry\\"] \\"\\"\\" class Iterator: def __init__(self, data): self.data = data self.index = 0 def __iter__(self): return self def __next__(self): if self.index >= len(self.data): raise StopIteration data = self.data[self.index] self.index += 1 return data # create an iterator data = [\\"Apple\\", \\"Banana\\", \\"Orange\\", \\"Strawberry\\"] iterator = Iterator(data) # traversing through the data for fruit in iterator: print(fruit) # Output: # Apple # Banana # Orange # Strawberry"},{"prompt":"Create a variable in Python which stores a list of tuples that contains student names and their scores. Not applicable","completion":"students = [('John', 85.5), ('Chris', 90.5), ('Jane', 95.7)]"},{"prompt":"Create a Python program that takes a string as input and prints out the words with more than 4 characters A brown fox jumped over a lazy dog","completion":"# Python program to print words # with more than 4 characters # Function to print words with more than 4 characters def print_words(string): # split the string words = string.split(' ') # iterate in words list at the same time for word in words: # if length of word is more than 4 if len(word) > 4: # print the word print(word) # driver code if __name__ == '__main__': string = 'A brown fox jumped over a lazy dog' print_words(string)"},{"prompt":"Write a Python program to validate a given telephone number.","completion":"import re def validate_telephone_number(number): pattern = '^[0-9]{10}' if re.match(pattern, number): return True else: return False"},{"prompt":"Optimize a Python program to print all odd numbers between 0 and 50 Not applicable","completion":"# Using for loop for num in range(0, 51): if num % 2 != 0: print(num, end = \\" \\") # Output: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49"},{"prompt":"Modify the given Python code to handle errors more precisely. try: a = 5 / 0 except Exception as error: print(error)","completion":"try: a = 5 / 0 except ZeroDivisionError as error: print(error) except Exception as error: print(error)"},{"prompt":"Create a class in Python that has one method for adding two numbers and another method for subtracting two numbers.","completion":"class Numbers: def __init__(self): pass def add(self, a, b): return a + b def subtract(self, a, b): return a - b"},{"prompt":"Write a Python program that determines the shortest path between two points on a grid. The program should take two points (x1, y1) and (x2, y2) on the grid as inputs, and return the shortest path between them. x1 = 10, y1 = 8 x2 = 15, y2 = 8","completion":"def shortestPath(x1, y1, x2, y2): # Store all points in two dimensional array points = [[x1, y1], [x2, y2]] # Store the shortest distance shortest_dist = float('inf') # Loop over all the points for i in range(len(points)-1): for j in range(i+1, len(points)): dist = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]) if dist < shortest_dist: shortest_dist = dist return shortest_dist x1 = 10 y1 = 8 x2 = 15 y2 = 8 print(\\"The shortest distance is :\\",shortestPath(x1,y1,x2,y2)) # Output: # The shortest distance is: 5"},{"prompt":"Analyze the input provided and generate a function in Python that returns Invalid input if the input is not a valid integer number, or returns the number of digits in the input number otherwise. 212","completion":"def count_digits(inp): if not isinstance(inp, int): return \\"Invalid input\\" else: return len(str(inp))"},{"prompt":"Create a feature in Python to extract the category information from a given URL. No inpu","completion":"def extract_category_from_url(url): # Extract the hostname from the URL hostname = urlparse(url).hostname # Split the hostname on '/' categories = hostname.split('/') return categories"},{"prompt":"Create a Python program for calculating the area of a given triangle. float a = 5 float b = 10 float c = 8","completion":"def triangleArea(a, b, c): # calculate the semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s * (s - a) * (s - b) * (s - c)) ** 0.5 return area"},{"prompt":"Generate a JSON string from a Python dict object. dict_object = { 'name': 'John Doe', 'age': 40 }","completion":"import json json_obj = json.dumps(dict_object)"},{"prompt":"Create a Python function for computing the Factorial of a number. 6","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) print(factorial(6))"},{"prompt":"Create a program in Python that prints the following figure with the given number of units. 7","completion":"for row in range(7): for col in range(7): if (row + col) % 2 == 0: print('#', end='') else: print(' ', end='') print()"},{"prompt":"Create a network application in Python that sends a GET request to an API and parses the JSON response. URL of API endpoint: https://api.mydomain.com/getd","completion":"import requests url = 'https://api.mydomain.com/getdata' response = requests.get(url) data = response.json() print(data)"},{"prompt":"Develop a Python script to output the result of the following boolean expression: (not A or B) and (C or D)","completion":"def booleanExpression(A, B, C, D): return (not A or B) and (C or D)"},{"prompt":"Write a Python program that parses a web page and extracts all the hyperlinks.","completion":"import re import requests url = 'https://www.example.com/' html = requests.get(url).text links = re.findall(\\"<a href=\\"(.*?)\\"\\", html) for link in links: print(link)"},{"prompt":"Write a python program to parse a JSON array of objects. [name:Bob,age:30,city:New York],[name:Alice,age:27,city:San Francisco]","completion":"import json arr = json.loads('[{\\"name\\":\\"Bob\\",\\"age\\":30,\\"city\\":\\"New York\\"}, {\\"name\\":\\"Alice\\",\\"age\\":27,\\"city\\":\\"San Francisco\\"}]') for obj in arr: print(\\"Name:\\", obj[\\"name\\"]) print(\\"Age:\\", obj[\\"age\\"]) print(\\"City:\\", obj[\\"city\\"]) print()"},{"prompt":"mplement a search engine for a dataset in Python. Not applicable","completion":"# Build an inverted index # The key is each unique term # The value is a list of (id, position) tuples, where: # - id is the document id # - position is the position of the term in the document def build_index(documents): inverted_index = {} for doc_id, doc in enumerate(documents): for position, term in enumerate(doc.split()): if term not in inverted_index: inverted_index[term] = [] inverted_index[term].append((doc_id, position)) return inverted_index # Query the index def query(index, query): if query in index: return index[query] else: return [] # Example documents = ['hello world', 'hello world wide web'] inverted_index = build_index(documents) query_result = query(inverted_index, 'hello') # Prints [(0, 0), (1, 0)] print(query_result)"},{"prompt":"Write a Python script that takes two integers as input and prints the least common multiple of the two numbers. a = 15 b = 20","completion":"def lcm(a, b): \\"\\"\\" Finds the least common multiple of two integers. \\"\\"\\" # Create a list of multiples of the larger integer multiple_list = [n*b for n in range(1, a+1)] # Iterate through the list and find the smallest multiple that is divisible by the second integer for n in multiple_list: if n % a == 0: return n if __name__ == '__main__': a = 15 b = 20 result = lcm(a, b) print(\\"The least common multiple of %d and %d is %d.\\" % (a, b, result))"},{"prompt":"Create a Python function to print every character in a given string. string = Hello World!","completion":"# Python Function def printChars(string): # Iterate over the string for i in range(len(string)): print(string[i]) # Test string = \\"Hello World!\\" printChars(string)"},{"prompt":"This code is a Django migration file that adds a new field to the Item model and alters the data type of three other fields. To use this code, run the migration using the Django management command python manage.py migrate.","completion":"# encoding: utf-8 import datetime from south.db import db from south.v2 import SchemaMigration from django.db import models class Migration(SchemaMigration): def forwards(self, orm): # Adding field 'Item.unusable' db.add_column('Machine_item', 'unusable', self.gf('django.db.models.fields.BooleanField')(default=False), keep_default=False) # Changing field 'Item.mac3' db.alter_column('Machine_item', 'mac3', self.gf('Machine.models.MacField')()) # Changing field 'Item.mac2' db.alter_column('Machine_item', 'mac2', self.gf('Machine.models.MacField')()) # Changing field 'Item.mac1' db.alter_column('Machine_item', 'mac1', self.gf('Machine.models.MacField')()) def backwards(self, orm): # Deleting field 'Item.unusable' db.delete_column('Machine_item', 'unusable') # Changing field 'Item.mac3' db.alter_column('Machine_item', 'mac3', self.gf('django.db.models.fields.CharField')(max_length=17)) # Changing field 'Item.mac2' db.alter_column('Machine_item', 'mac2', self.gf('django.db.models.fields.CharField')(max_length=17)) # Changing field 'Item.mac1' db.alter_column('Machine_item', 'mac1', self.gf('django.db.models.fields.CharField')(max_length=17)) models = { 'LabtrackerCore.group': { 'Meta': {'object_name': 'Group'}, 'description': ('django.db.models.fields.CharField', [], {'max_length': '2616'}), 'group_id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'it': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['LabtrackerCore.InventoryType']\\", 'null': 'True', 'blank': 'True'}), 'items': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': \\"orm['LabtrackerCore.Item']\\", 'null': 'True', 'blank': 'True'}), 'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '60'}) }, 'LabtrackerCore.inventorytype': { 'Meta': {'object_name': 'InventoryType'}, 'description': ('django.db.models.fields.CharField', [], {'max_length': '2616'}), 'inv_id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '60'}), 'namespace': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '60'}) }, 'LabtrackerCore.item': { 'Meta': {'object_name': 'Item'}, 'it': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['LabtrackerCore.InventoryType']\\"}), 'item_id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '60'}) }, 'LabtrackerCore.labuser': { 'Meta': {'object_name': 'LabUser'}, 'accesses': ('django.db.models.fields.IntegerField', [], {'default': '0'}), 'user_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'primary_key': 'True'}) }, 'Machine.contact': { 'Meta': {'object_name': 'Contact'}, 'contact_id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'is_primary': ('django.db.models.fields.BooleanField', [], {'default': 'False'}), 'mg': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['Machine.Group']\\"}), 'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['auth.User']\\"}) }, 'Machine.group': { 'Meta': {'object_name': 'Group', '_ormbases': ['LabtrackerCore.Group']}, 'casting_server': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}), 'core': ('django.db.models.fields.related.OneToOneField', [], {'to': \\"orm['LabtrackerCore.Group']\\", 'unique': 'True', 'primary_key': 'True'}), 'gateway': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}), 'is_lab': ('django.db.models.fields.BooleanField', [], {'default': 'False'}) }, 'Machine.history': { 'Meta': {'object_name': 'History'}, 'login_time': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}), 'machine': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['Machine.Item']\\"}), 'mh_id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'ms': ('django.db.models.fields.related.ManyToManyField', [], {'symmetrical': 'False', 'to': \\"orm['Machine.Status']\\", 'null': 'True', 'blank': 'True'}), 'session_time': ('django.db.models.fields.DecimalField', [], {'null': 'True', 'max_digits': '16', 'decimal_places': '2', 'blank': 'True'}), 'user': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['LabtrackerCore.LabUser']\\"}) }, 'Machine.item': { 'Meta': {'object_name': 'Item', '_ormbases': ['LabtrackerCore.Item']}, 'comment': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}), 'core': ('django.db.models.fields.related.OneToOneField', [], {'to': \\"orm['LabtrackerCore.Item']\\", 'unique': 'True', 'primary_key': 'True'}), 'date_added': ('django.db.models.fields.DateTimeField', [], {'auto_now_add': 'True', 'blank': 'True'}), 'ip': ('django.db.models.fields.IPAddressField', [], {'max_length': '15'}), 'last_modified': ('django.db.models.fields.DateTimeField', [], {'auto_now': 'True', 'blank': 'True'}), 'location': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['Machine.Location']\\"}), 'mac1': ('Machine.models.MacField', [], {}), 'mac2': ('Machine.models.MacField', [], {'blank': 'True'}), 'mac3': ('Machine.models.MacField', [], {'blank': 'True'}), 'manu_tag': ('django.db.models.fields.CharField', [], {'max_length': '200'}), 'purchase_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}), 'status': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': \\"'machine_status'\\", 'symmetrical': 'False', 'to': \\"orm['Machine.Status']\\"}), 'stf_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}), 'type': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['Machine.Type']\\"}), 'unusable': ('django.db.models.fields.BooleanField', [], {'default': 'False'}), 'uw_tag': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}), 'verified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}), 'wall_port': ('django.db.models.fields.CharField', [], {'max_length': '25'}), 'warranty_date': ('django.db.models.fields.DateField', [], {'null': 'True', 'blank': 'True'}) }, 'Machine.location': { 'Meta': {'object_name': 'Location'}, 'building': ('django.db.models.fields.CharField', [], {'max_length': '60', 'null': 'True'}), 'comment': ('django.db.models.fields.CharField', [], {'max_length': '600'}), 'floor': ('django.db.models.fields.SmallIntegerField', [], {'null': 'True', 'blank': 'True'}), 'ml_id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '60'}), 'room': ('django.db.models.fields.CharField', [], {'max_length': '30', 'null': 'True'}), 'usable_threshold': ('django.db.models.fields.IntegerField', [], {'default': '95'}) }, 'Machine.platform': { 'Meta': {'object_name': 'Platform'}, 'description': ('django.db.models.fields.CharField', [], {'max_length': '400', 'blank': 'True'}), 'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '60'}), 'platform_id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}) }, 'Machine.status': { 'Meta': {'unique_together': \\"(('ms_id', 'name'),)\\", 'object_name': 'Status'}, 'description': ('django.db.models.fields.CharField', [], {'max_length': '400', 'blank': 'True'}), 'ms_id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'name': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '60', 'db_index': 'True'}) }, 'Machine.type': { 'Meta': {'object_name': 'Type'}, 'description': ('django.db.models.fields.CharField', [], {'max_length': '400', 'blank': 'True'}), 'model_name': ('django.db.models.fields.CharField', [], {'max_length': '60'}), 'mt_id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '60'}), 'platform': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['Machine.Platform']\\"}), 'specs': ('django.db.models.fields.TextField', [], {}) }, 'auth.group': { 'Meta': {'object_name': 'Group'}, 'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}), 'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \\"orm['auth.Permission']\\", 'symmetrical': 'False', 'blank': 'True'}) }, 'auth.permission': { 'Meta': {'ordering': \\"('content_type__app_label', 'content_type__model', 'codename')\\", 'unique_together': \\"(('content_type', 'codename'),)\\", 'object_name': 'Permission'}, 'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}), 'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \\"orm['contenttypes.ContentType']\\"}), 'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'name': ('django.db.models.fields.CharField', [], {'max_length': '50'}) }, 'auth.user': { 'Meta': {'object_name': 'User'}, 'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}), 'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}), 'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}), 'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': \\"orm['auth.Group']\\", 'symmetrical': 'False', 'blank': 'True'}), 'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}), 'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}), 'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}), 'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}), 'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}), 'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}), 'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \\"orm['auth.Permission']\\", 'symmetrical': 'False', 'blank': 'True'}), 'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'}) }, 'contenttypes.contenttype': { 'Meta': {'ordering': \\"('name',)\\", 'unique_together': \\"(('app_label', 'model'),)\\", 'object_name': 'ContentType', 'db_table': \\"'django_content_type'\\"}, 'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}), 'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}), 'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}), 'name': ('django.db.models.fields.CharField', [], {'max_length': '100'}) } } complete_apps = ['Machine']"},{"prompt":"Combine two lists into a dictionary using Python. list1 = [1, 2, 3] list2 = ['a', 'b', 'c']","completion":"\\"\\"\\" Combine two lists into a dictionary using Python \\"\\"\\" list1 = [1, 2, 3] list2 = ['a', 'b', 'c'] dict = dict(zip(list1, list2)) print(dict) # Output {1: 'a', 2: 'b', 3: 'c'}"},{"prompt":"Generate a Python program to create a histogram from a data set. [2, 4, 5, 3, 5, 6, 8, 2]","completion":"import matplotlib.pyplot as plt data = [2, 4, 5, 3, 5, 6, 8, 2] plt.hist(data, bins = 5) plt.title(\\"Histogram\\") plt.xlabel(\\"Values\\") plt.ylabel(\\"Frequency\\") plt.show()"},{"prompt":"Write a python script to classify the following film review as either Positive or Negative. The film was so captivating! Absolutely loved it!","completion":"\\"\\"\\" Classify a film review as either Positive or Negative \\"\\"\\" import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def classify_review(review): sid = SentimentIntensityAnalyzer() review_scores = sid.polarity_scores(review) if review_scores['compound'] > 0.05: return 'Positive' else: return 'Negative' if __name__ == '__main__': review = 'The film was so captivating! Absolutely loved it!' sentiment = classify_review(review) print(sentiment)"},{"prompt":"Create a program in Python that takes a sentence as an input and prints out the sentence in reverse. Hello world!","completion":"def reverse_sentence(sentence): words = sentence.split() newWords = [word[::-1] for word in words] newSentence = \\" \\".join(newWords) return newSentence print(reverse_sentence(\\"Hello world!\\"))"},{"prompt":"Create a Python program to generate multiplication tables from 1 to 10.","completion":"for i in range(1, 11): for j in range(1, 11): print(i*j, end = \\" \\") print()"},{"prompt":"Write a Python function to calculate the difference between two dates in days. (11/22/2016, 12/30/2016)","completion":"def days_difference(date1, date2): from datetime import datetime difference = datetime.strptime(date1, '%m/%d/%Y') - datetime.strptime(date2, '%m/%d/%Y') return abs(difference.days)"},{"prompt":"Build a web crawler using Python to crawl a specific topic and collect information on the internet. Artificial Intelligence","completion":"import requests import bs4 start_url = 'http://www.example.com/search?q=artificial+intelligence' def crawl(url): response = requests.get(url) if response.status_code == 200: html = bs4.BeautifulSoup(response.text, 'html.parser') for link in html.find_all('a'): link_url = link.get('href') if link_url and link_url.startswith('http'): crawl(link_url) crawl(start_url)"},{"prompt":"The given code is a Python class called Watcher that can monitor Git repositories for changes and update the local repository accordingly. To use this class, you need to follow these steps: 1. Import the necessary modules: os, urlparse, shutil, datetime, hopper.utils.logger, hopper.utils.git.tasks, hopper.utils.git.repo, hopper.source.meta, and threading. 2. Create an instance of the Watcher class, passing in an environment object as an argument. 3. Call the addLayers method on the Watcher instance, passing in a LayerCollection object that contains the Git repositories you want to monitor. 4. Call the start method on the Watcher instance to start the monitoring process. You can optionally pass in an interval argument to specify how often the Watcher should check for changes (default is 30 seconds). 5. If you want to stop the monitoring process, call the stop method on the Watcher instance. 6. If you want to manually trigger a check for changes, call the trigger method on the Watcher instance. 7. If you want to wait for changes to occur, call the wait method on the Watcher instance. This method will block until a change occurs. 8. If a change occurs, you can retrieve the updated LayerCollection object by calling the getnext method on the Watcher instance. This method will return a tuple containing the original LayerCollection object, the updated LayerCollection object, and the time the change occurred.","completion":"# Copyright (c) 2015 Xilinx Inc. # # Permission is hereby granted, free of charge, to any person obtaining a copy # of this software and associated documentation files (the \\"Software\\"), to deal # in the Software without restriction, including without limitation the rights # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell # copies of the Software, and to permit persons to whom the Software is # furnished to do so, subject to the following conditions: # # The above copyright notice and this permission notice shall be included in # all copies or substantial portions of the Software. # # THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE # SOFTWARE. import os import urlparse import shutil import datetime from hopper.utils.logger import * import hopper.utils.git.tasks import hopper.utils.git.repo import hopper.source.meta import threading class Watcher: class GroupState: def __init__(self, layers): self.layers = layers self.refstate = {} def getRefPairs(self): pairs = [] for i in self.layers: if i.source and isinstance(i.source, hopper.source.meta.GitSource): if i.source.canFetch(): # TODO: handle ref/tag/commit properly below pairs.append((i.source.remote, \\"refs/heads/\\" + i.source.ref)) return pairs def filterPairs(self, remoterefs): filteredrefs = {} for p in self.getRefPairs(): if p[0] in remoterefs: for i in remoterefs[p[0]].iteritems(): if i[0] == p[1]: if p[0] not in filteredrefs: filteredrefs[p[0]] = {} filteredrefs[p[0]][i[0]] = i[1] return filteredrefs def update(self, remoterefs, trigger = False): rrefs = self.filterPairs(remoterefs) pairs = self.getRefPairs() changed = False oldrefstate = self.refstate newrefstate = {} for i in pairs: if i[0] in rrefs: if i[1] in rrefs[i[0]]: newcommit = rrefs[i[0]][i[1]] if i[0] not in newrefstate: newrefstate[i[0]] = {} newrefstate[i[0]][i[1]] = newcommit log(\\"remote: %s, ref: %s, value = %s\\" % (i[0], i[1], newcommit)) if trigger: changed = True if oldrefstate != None: if i[0] in oldrefstate and i[1] in oldrefstate[i[0]]: if newrefstate[i[0]][i[1]] != oldrefstate[i[0]][i[1]]: changed = True self.refstate = newrefstate return changed def cloneRefPin(self, remoterefs): filtered = self.filterPairs(remoterefs) # create layers that match the layers object, fill in pinned refs pinnedlayers = hopper.source.meta.LayerCollection(self.layers.defaultversion) for i in self.layers: if isinstance(i.source, hopper.source.meta.GitSource): # TODO: fixup pciking of ref name refname = \\"refs/heads/\\" + i.source.ref refpin = None if i.source.remote in filtered: refs = filtered[i.source.remote] if refname in refs: refpin = refs[refname] newsource = hopper.source.meta.GitSource(i.source.remote, refpin) else: newsource = i.source pinnedlayers.add(i.getFullName(), newsource) return pinnedlayers def __init__(self, environment): self.environment = environment self.stop = threading.Event() self.thread = None self.interval = 0 self.lock = threading.RLock() self.groups = [] self.changeevent = threading.Condition() self.changequeue = [] def addLayers(self, layers): group = Watcher.GroupState(layers) self.groups.append(group) def start(self, interval = 30): if self.thread and self.thread.isAlive(): return self.interval = interval self.thread = threading.Thread(target = self.__worker__) self.daemon = True self.thread.start() def stop(self): if self.thread and self.thread.isAlive(): self.stop.set() self.thread.join() def alive(self): if self.thread and self.thread.isAlive(): return True return False def trigger(self): self.__check__(True) def __check__(self, trigger = False): with self.lock: haschanges = False remotes = [] for i in self.groups: for p in i.getRefPairs(): if p[0] not in remotes: remotes.append(p[0]) self.environment.debug(\\"need to update for the following remotes -> %s\\" % remotes) refstate = {} for i in remotes: self.environment.log(\\"Grabbing refs from remote for %s\\" % i) result = hopper.utils.git.tasks.GitTask.run([\\"ls-remote\\", i], environment = self.environment) if result[0] == 0: refstate[i] = {} for r in result[1].splitlines(): parts = r.split() refstate[i][parts[1]] = parts[0] self.environment.debug(\\"got refs -> %s\\" % repr(refstate[i])) else: self.environment.error(\\"Failed to get remote state for '%s' error message = %s\\" % (i, result[1])) return haschanges = False for i in self.groups: if i.update(refstate, trigger): self.environment.log(\\"Changes have happened since last check, pinning\\") changes = i.cloneRefPin(refstate) self.changequeue.append((i.layers, changes, datetime.datetime.utcnow())) haschanges = True if haschanges: with self.changeevent: self.changeevent.notifyAll() def __worker__(self): while not self.stop.wait(self.interval): self.__check__() def wait(self): if self.alive(): if self.hasnext(): return with self.changeevent: self.changeevent.wait() def hasnext(self): with self.lock: if len(self.changequeue) != 0: return True return False def getnext(self): with self.lock: if len(self.changequeue) != 0: return self.changequeue.pop() return None"},{"prompt":"mplement a Python Script that prints out all the prime numbers between 0 and a given number.","completion":"def find_primes(number): for num in range(1, number + 1): # prime numbers are greater than 1 if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num) find_primes(20)"},{"prompt":"Develop a Python program to identify characters that occur more than once in a string","completion":"def find_duplicate_characters(string): count = {} result = [] for char in string: count[char] = count.get(char, 0) + 1 if count[char] > 1: result.append(char) return result"},{"prompt":"Create an algorithm in Python to check if a given string is a valid IP address.","completion":"def is_valid_ip(ip_address): parts = ip_address.split('.') if len(parts) != 4: return False for part in parts: try: if not 0 <= int(part) <= 255: return False except ValueError: return False return True"},{"prompt":"Create a python script that takes 2 arguments an array and an integer and prints the sum of the array multiplied by the integer. Array: [3, 5, 8] Integer: 5","completion":"def sum_arr(arr, num): total = 0 for i in arr: total += i total *= num return total # Output 95"},{"prompt":"Write a Python program to print the following pattern using a for loop.","completion":"for i in range(1,6): for j in range(1,i+1): print('*',end='') print() Output: * ** *** **** *****"},{"prompt":"Create a script in Python that takes a sentence as an input and outputs a list of the top five most common words Sentence: The quick brown fox jumps over the lazy dog.","completion":"import collections string = \\"The quick brown fox jumps over the lazy dog.\\" # convert string to lower case string = string.lower() # split the string and convert to list words = string.split(' ') # define empty list word_count = [] # Initialize a dictionary word_dict = dict() # count words in lists for word in words: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 # Sort words by count in descending order word_count = sorted(word_dict.items(), key=lambda x: x[1], reverse=True) # Print top 5 most common words print(\\"Top 5 most common words:\\") for wc in word_count[:5]: print(wc[0], \\":\\", wc[1])"},{"prompt":"Write a python code to check if the string has unique characters. String: “abcdefg”","completion":"def unique_string(string): return len(string) == len(set(string)) if __name__ == '__main__': string = 'abcdefg' print(unique_string(string))"},{"prompt":"Suggest five different ways to optimize the following Python code. data_sample = [1, 2, 3, 4, 5, 6, 7, 8] def find_max(data): max_value = data[0] for x in data: if x > max_value: max_value = x return max_value","completion":"1. Use max() instead of looping through each item of array 2. Preallocate memory for max_value 3. Using in-built iterator 4. Remove redundant statements from code 5. Use list comprehension instead of looping through each item of array"},{"prompt":"Determine the output of the given Python program. list = [1, 2, [3,4], [5,[100, 200,['hello']], 23, 11], 1, 7] result = list[3][1][2][0]","completion":"hello"},{"prompt":"Optimize a Python program to convert all lowercase letters in a string to uppercase in the most efficient way. lowercase.txt Hello World","completion":"# Open the input file with open('lowercase.txt') as file: content = file.read() # Convert the string to uppercase using a list comprehension uppercase = ''.join([c.upper() for c in content]) print('Converted string to uppercase:', uppercase)"},{"prompt":"Create a python program that given an input string and an array of strings, returns true if an anagram of the input string exists within the array. input_string=listen strings=[enlist,google,inlets,banana]","completion":"def anagram_in_list(input_string, strings): result = False for string in strings: if is_anagram(input_string, string): result = True break return result input_string=\\"listen\\" strings=[\\"enlist\\",\\"google\\",\\"inlets\\",\\"banana\\"] print(anagram_in_list(input_string, strings))"},{"prompt":"Using Python, generate an HTML page with a table of contents that contains five sections. Not applicable","completion":"<html> <head> <title>Table of Contents</title> </head> <body> <h1>Table of Contents</h1> <ul> <li><a href=\\"#section1\\">Section 1</a></li> <li><a href=\\"#section2\\">Section 2</a></li> <li><a href=\\"#section3\\">Section 3</a></li> <li><a href=\\"#section4\\">Section 4</a></li> <li><a href=\\"#section5\\">Section 5</a></li> </ul> <h2 id=\\"section1\\">Section 1</h2> <p>Content section 1...</p> <h2 id=\\"section2\\">Section 2</h2> <p>Content section 2...</p> <h2 id=\\"section3\\">Section 3</h2> <p>Content section 3...</p> <h2 id=\\"section4\\">Section 4</h2> <p>Content section 4...</p> <h2 id=\\"section5\\">Section 5</h2> <p>Content section 5...</p> </body> </html>"},{"prompt":"Create a Python generator to generate an infinite sequence of a given number.","completion":"def generate_infinite_sequence(num): while True: yield num for n in generate_infinite_sequence(5): print(n)"},{"prompt":"Develop a class in Python that tracks the number of objects created.","completion":"class Counter: count = 0 def __init__(self): Counter.count += 1 @classmethod def get_count(cls): return cls.count"},{"prompt":"Generate a Python program for grading multiple choice tests. The program should allow the user to input an answer key and a collection of scores and output the results including the number of correct answers and the overall percentage. answer_key = {1: 'A', 2: 'B', 3: 'A', 4: 'D'} scores = { 'John': {1: 'A', 2: 'B', 3: 'A', 4: 'C'}, 'Tom': {1: 'A', 2: 'A', 3: 'D', 4: 'A'} }","completion":"def grade_test(answer_key, scores): graded_results = {} total_questions = len(answer_key) # Iterate over each student's test results for name, results in scores.items(): graded_results[name] = { 'total_correct': 0, 'percent': 0 } num_correct = 0 # Iterate over each student's test answers for qnum, answer in results.items(): if answer == answer_key[qnum]: num_correct += 1 # Calculate the overall percentage graded_results[name]['total_correct'] = num_correct graded_results[name]['percent'] = (num_correct/total_questions)*100 # Return the graded results return graded_results"},{"prompt":"Optimize the given code in Python to reduce its complexity my_list = [1, 2, 3, 4, 5] total = 0 for x in my_list: total = total + x","completion":"my_list = [1, 2, 3, 4, 5] total = sum(my_list) print(\\"Sum of all elements in given list:\\", total)"},{"prompt":"Create a list of codes to store product data in Python. <Product information: product code (string), product name (string), quantity (integer)>","completion":"product_data = [ ('code', 'str'), ('name', 'str'), ('quantity', 'int') ]"},{"prompt":"Design a function in Python to search for a specific subset in a given set.","completion":"def containsSubset(s1, s2): for i in s2: if i not in s1: return False return True s1 = {1, 2, 3, 4, 5} s2 = {2, 4} print(containsSubset(s1, s2))"},{"prompt":"Develop a python program to demonstrate taxonomic classification.","completion":"class SpeciesClassifier(): def __init__(self, species_list): self.species_list = species_list def classify_species(self, species_name): for name_from_list in self.species_list: if name_from_list == species_name: return self.species_list[name_from_list]['classification'] return None"},{"prompt":"Design a Python program to generate a random password containing both lowercase and uppercase characters. <no input>","completion":"import random import string def generate_random_password(): charset = string.ascii_letters + string.digits return ''.join(random.sample(charset, 8)) print(generate_random_password())"},{"prompt":"Can you provide a Python program to generate all possible combinations of a given list of numbers? list = [1, 2, 3]","completion":"import itertools # list of numbers list_of_nums = [1, 2, 3] # get all possible combinations of numbers combinations = itertools.combinations(list_of_nums, 3) # print all possible combinations for combination in combinations: print(combination)"},{"prompt":"Write a function in Python to print the Fibonacci sequence up to the nth term. n = 10","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b print(\\"Fibonacci sequence:\\") for i in range(n): print(fibonacci(i))"},{"prompt":"Given an array of integers, sort the array in ascending order using a Python program. [5,3,7,1,9]","completion":"def sort_asc(arr): for i in range(len(arr)): for j in range(i+1,len(arr)): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i] return arr print(sort_asc([5,3,7,1,9]))"},{"prompt":"Create an optimized program in Python code to coordinate multiple deliveries from a single source to multiple destinations We are given a list of pickup and delivery locations with start times, finish times and travel times between locations.","completion":"import networkx as nx def delivery_coordinates(pickup_locations, delivery_locations, start_times, finish_times, travel_times): # Create a graph G = nx.DiGraph() # Add nodes for i in range(len(pickup_locations)): G.add_node(pickup_locations[i]) G.add_node(delivery_locations[i]) # Add edges and corresponding weights for i in range(len(pickup_locations)): G.add_edge(pickup_locations[i], delivery_locations[i], start_time=start_times[i], finish_time=finish_times[i], weight = travel_times[i]) return G"},{"prompt":"Generate a Python program that will convert an array of strings with commaseparated values to a commaseparated string. ['John','Joseph','Shirley']","completion":"def to_csv(input_list): return ','.join(input_list) if __name__ == '__main__': input_list = ['John','Joseph','Shirley'] output_str = to_csv(input_list) print(f'Result: {output_str}')"},{"prompt":"Write a python script to compare two directories and output the differences. dir1/ file1.txt file2.txt dir2/ file1.txt file3.tx","completion":"import os def compare_dirs(dir1, dir2): dir1_listing = os.listdir(dir1) dir2_listing = os.listdir(dir2) dir1_files = set(dir1_listing) dir2_files = set(dir2_listing) new_files = dir2_files.difference(dir1_files) deleted_files = dir1_files.difference(dir2_files) print('NEW FILES:') for f in new_files: print(f) print('DELETED FILES:') for f in deleted_files: print(f) compare_dirs('dir1/', 'dir2/')"},{"prompt":"Write a Python program to create a 3D scatterplot.","completion":"import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D fig = plt.figure() ax = Axes3D(fig) # Data for a three-dimensional line zline = [0, 1, 2, 3] xline = [0, 1, 2, 3] yline = [0, 1, 2, 3] ax.scatter3D(xline, yline, zline, c=zline, cmap='Greens'); plt.show()"},{"prompt":"Modify the Python function so that it prints Success! if the input parameter is greater than 10, or prints Failed! if it is less than or equal to 10. 7","completion":"def check_num(num): if num > 10: print(\\"Success!\\") else: print(\\"Failed!\\") check_num(7)"},{"prompt":"Create a Python program to visualize Pandas DataFrame. df = pandas.DataFrame({ 'Name': ['Alice', 'Bob', 'Carol', 'Dave'], 'Age': [18, 25, 35, 45] })","completion":"import matplotlib.pyplot as plt import pandas as pd df = pd.DataFrame({ 'Name': ['Alice', 'Bob', 'Carol', 'Dave'], 'Age': [18, 25, 35, 45] }) ax = df.plot.bar(x='Name', y='Age', rot=0) plt.show()"},{"prompt":"Write a python program to generate all the permutations for a given list of elements. elements = [A, B, C]","completion":"def permutations(elements): # Calculate the number of permutations elements_permutation = len(elements)**len(elements) # Generate a list for all permutations permutations = [] # Iterate through the number of permutations for i in range(elements_permutation): permutation = [] # Create an empty list for each permutation # Iterate through each element in elements for j in range(len(elements)): # Calculate the index of the current permutated element permutation_index = i // (len(elements) ** j) # Append the current permutated element to the permutation list permutation.append(elements[permutation_index % len(elements)]) # Append the current permutation to the permutations list permutations.append(permutation) return permutations permutations = permutations(elements)"},{"prompt":"Create a program in Python that detects the largest palindrome within a given phrase. Quick brown fox","completion":"def find_largest_palindrome(phrase): palindromes = [] for word in phrase.split(): # split phrase into words for i in range(len(word)): # iterate through each letter for j in range(len(word)-i+1): # build each possible substring s = word[i:i+j] if s == s[::-1] and len(s) > 1: # check if is a palindrome palindromes.append(s) return max(palindromes, key=len) # return longest palindrome find_largest_palindrome(\\"Quick brown fox\\") # oo"},{"prompt":"Given a list of author IDs, write a Python method to retrieve the corresponding authors names from a database. ids = [5,6,7,8]","completion":"def get_author_names(ids): # connect to the authors database conn = sqlite3.connect(authors_db) cur = conn.cursor() # define query to select author names query = \\"SELECT name FROM authors WHERE id IN({})\\".format(', '.join('?' * len(ids))) cur.execute(query, ids) # store data in list results = cur.fetchall() conn.close() # return authors names return [name[0] for name in results]"},{"prompt":"Generate a code to create an array in python of size n. n = 5","completion":"array = [None] * n"},{"prompt":"Generate Python code that merges two sorted linked lists into one. L1 = [1,3,5] L2 = [2,4,6]","completion":"# Singly-linked lists class Node: def __init__(self, data=None, next=None): self.data = data self.next = next def merge(L1, L2): curr = dummyHead = Node(0) while L1 and L2: if L1.data < L2.data: curr.next = L1 L1 = L1.next else: curr.next = L2 L2 = L2.next curr = curr.next curr.next = L1 or L2 return dummyHead.next"},{"prompt":"Edit the following Python program to take user input. name = John print(Hello World)","completion":"name = input(\\"Please enter your name: \\") print(\\"Hello {name}\\".format(name=name))"},{"prompt":"Create a sorting algorithm that sorts a list of strings alphabetically in Python. [list, of, unsorted, strings]","completion":"def sortAlphabetically(stringList): sortedList = sorted(stringList) return sortedList unsortedList = [\\"list\\", \\"of\\", \\"unsorted\\", \\"strings\\"] sortedList = sortAlphabetically(unsortedList) print(sortedList)"},{"prompt":"Write a Python program to simulate the behavior of a vending machine. Product list: Chips: price: 1.5 Soda: price: 1.25 Snickers: price 2.25 Input Amount: 2.75","completion":"class VendingMachine(): def __init__(self): # All the items and their prices self.products = { 'Chips': 1.5, 'Soda': 1.25, 'Snickers': 2.25 } def dispenseItem(self, inputAmount): for item in self.products: if self.products[item] <= inputAmount: print('Dispensing: ', item) inputAmount -= self.products[item] break self.calculateChange(inputAmount) def calculateChange(self, inputAmount): print('Change remaining: ', inputAmount) vm = VendingMachine() vm.dispenseItem(2.75)"},{"prompt":"Develop an AIpowered movie recommendation system in Python. A list of user's ratings for 50 different movies.","completion":"# import necessary libraries import numpy as np import pandas as pd from sklearn.metrics.pairwise import cosine_similarity #Define the rating matrix df = pd.read_csv('ratings.csv') rating_matrix = df.pivot_table(values='rating',index='user_id',columns='movie_title') #Calculate cosine similarity similarity_scores = cosine_similarity(rating_matrix.values) #Define a function to recommend movies def recommend_movies(user_id, input_rating_matrix, similarity_matrix): #Calculate the mean of all ratings for each user user_mean = np.nanmean(input_rating_matrix,axis=1) #Calculate and subtract mean from user ratings user_rating_minus_mean = input_rating_matrix - user_mean.reshape(-1,1) #Calculate weighted similarity scores weighted_similarity_scores = similarity_matrix * user_rating_minus_mean #Calculate the weighted sum of all similarity scores for each movie movie_score = weighted_similarity_scores.sum(axis=0) #Generate list of recommended movies, sorted by score in descending order sorted_movie_scores = np.sort(movie_score)[::-1] sorted_movies = np.argsort(movie_score)[::-1] #Recommend movies, excluding movies which the user has already rated user_rated_movies = input_rating_matrix[user_id].nonzero()[0] recommend_movies = [] for i in sorted_movies: if i not in user_rated_movies: recommend_movies.append(i) return recommend_movies #Call the function recommend_movies(user_id, rating_matrix, similarity_scores)"},{"prompt":"Develop a function in Python to filter out invalid emails from a given list of emails.","completion":"def filter_invalid_emails(email_list): valid_emails = [] for email in email_list: if '@' in email and '.' in email: valid_emails.append(email) return valid_emails"},{"prompt":"Develop a function in Python to convert a given list to a dictionary. list = [1,2,3,4,5,6]","completion":"def convert_list_to_dict(list): final_dict = {} for index, value in enumerate(list): final_dict.update({index: value}) return final_dict list = [1,2,3,4,5,6] list_dict = convert_list_to_dict(list) print(list_dict)"},{"prompt":"Create a Python script to generate the following pattern:","completion":"for i in range(1,6): for j in range(1,i+1): print(\\"*\\", end=\\" \\") print()"},{"prompt":"Generate a Python program to invert the words in a string, for example: This is a string should be converted to string a is This. This is a string","completion":"def invertWords(string): words = string.split(' ') def reverseStringWordWise(words, start, end): while (start < end): words[start], words[start] = words[end], words[start] start += 1 end -= 1 start = 0 end = len(words) - 1 reverseStringWordWise(words, start, end) start = 0 end = len(words) - 1 while (start < end): reverseStringWordWise(words, start, end) start += 1 end -= 1 return ' '.join(words) string = \\"This is a string\\" print(invertWords(string)) # Output: string a is This"},{"prompt":"Python, write a code to validate an IPv4 address.","completion":"import re def validate_ipv4_address(ip): \\"\\"\\"Validates an IPv4 address.\\"\\"\\" pattern = re.compile(r\\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\") return True if pattern.match(ip) else False if __name__ == \\"__main__\\": ip = '1.2.3.4' valid = validate_ipv4_address(ip) print(valid)"},{"prompt":"Write a code to create a class in Python for Employee with two private attributes: first_name and last_name.","completion":"class Employee: def __init__(self, first_name, last_name): self.__first_name = first_name self.__last_name = last_name @property def first_name(self): return self.__first_name @property def last_name(self): return self.__last_name"},{"prompt":"Create a Python script that takes a list of strings as an input and prints the length of each string in the list. words = ['dog', 'cat', 'spring', 'summer']","completion":"words = ['dog', 'cat', 'spring', 'summer'] for word in words: print(len(word))"},{"prompt":"Create a web scraper in Python to extract information from a webpage. https://www.example.com","completion":"import requests from bs4 import BeautifulSoup URL = \\"https://www.example.com\\" page = requests.get(URL) soup = BeautifulSoup(page.content, 'html.parser') # extract information by tags title = soup.find(\\"title\\") headings = soup.find_all(\\"h1\\") links = soup.find_all(\\"a\\") # print the extracted data print(\\"Title: \\", title) print(\\"Headings: \\") for h in headings: print(\\"- \\", h.text) print(\\"Links: \\") for link in links: print(\\"- \\", link.text, link.get(\\"href\\"))"},{"prompt":"Write a function in Python which takes a question string and returns the answer. What is the capital of China?","completion":"def answer_question(question): if question == 'What is the capital of China?': return 'Beijing' else: return 'I don't know'"},{"prompt":"Create a Python script to print out the multiplication table for the numbers 1 10. Not applicable","completion":"for i in range(1, 11): for j in range(1, 11): print(f'{i} * {j} = {i * j}') print()"},{"prompt":"Create a Python function that uses a given dictionary to calculate the sum of all the values for each key. {'a': 4, 'b': 2, 'c': 1}","completion":"def sum_dict_values(dict): result = 0 for key in dict: result += dict[key] return result dict = {'a': 4, 'b': 2, 'c': 1} sum = sum_dict_values(dict) print(sum) # 7"},{"prompt":"Create an algorithm in Python that takes a list of numbers and returns a new list with only the even numbers. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def get_even_numbers(nums_list): even_numbers = [] for num in nums_list: if num % 2 == 0: even_numbers.append(num) return even_numbers nums_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] even_numbers = get_even_numbers(nums_list) print(even_number)"},{"prompt":"Compute the area of a triangle given its three points in Python. Point1(1, 4) Point2(5, 4) Point3(3, 2)","completion":"def triangle_area(Point1, Point2, Point3): #Calculate the area of the triangle x1, y1 = Point1 x2, y2 = Point2 x3, y3 = Point3 area = abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2) return area Point1 = (1, 4) Point2 = (5, 4) Point3 = (3, 2) area = triangle_area(Point1, Point2, Point3) print(f\\"Area of the triangle: {area}units\\")"},{"prompt":"Modify this python code to increase the speed of the program. def divide(a, b): return a/b a = 5 b = 2 number = divide(a, b) print(number)","completion":"def divide(a, b): return a // b a = 5 b = 2 number = divide(a, b) print(number)"},{"prompt":"Write a script in Python that creates a class with five methods.","completion":"class MyClass: def __init__(self): pass def foo(self, arg1, arg2): pass def bar(self, arg1, arg2, arg3): pass def fizz(self, arg1, arg2, arg3, arg4): pass def buzz(self, arg1, arg2, arg3, arg4, arg5): pass"},{"prompt":"Create a Python code to generate the valid set of parenthesis for a given integer n.","completion":"def generate_parenthesis(n): result = [] def generate_parens(left, right, n, curr_string): if left == n and right == n: result.append(curr_string) return # open a new parenthesis if one can still be opened if left < n: generate_parens(left + 1, right, n, curr_string + \\"(\\") # close a parenthesis if it's safe to do so if right < left: generate_parens(left, right + 1, n, curr_string + \\")\\") generate_parens(0, 0, n, \\"\\") return result"},{"prompt":"Write a Python program to select the longest palindrome from a given list of strings. [racecar, car, radar]","completion":"def find_longest_palidrome(list): longest = 0 longest_str = '' for i in list: if i == i[::-1]: if len(i) > longest: longest = len(i) longest_str = i return longest_str word_list = [\\"racecar\\", \\"car\\", \\"radar\\"] longest_palidrome = find_longest_palidrome(word_list) print(\\"Longest palindrome is:\\", longest_palidrome) # racecar"},{"prompt":"Develop a python program that detects and corrects spelling mistakes in a given string. String: The quik brown foox jumped oevr the lasy dog.","completion":"import re def spell_check(s): corrected = re.sub(r'bfooxb', 'fox', s) corrected = re.sub(r'boevrb', 'over', corrected) corrected = re.sub(r'blasyb', 'lazy', corrected) return corrected print spell_check(\\"The quik brown foox jumped oevr the lasy dog.\\")"},{"prompt":"Create a data structure that can store the 10 most recent items inserted into a list.","completion":"#!/usr/bin/env python from collections import deque # Create an empty container myList = deque(maxlen=10) # Add values to the list for i in range(100): myList.append(i) # Access the 10 recent values in the list print(list(myList))"},{"prompt":"Create a Python program to optimize an expression using linear algebra. 3x + 2y + 4z = 5","completion":"\\"\\"\\" Optimize an expression using linear algebra \\"\\"\\" import numpy as np def optimize_expression(expr): coeffs, rhs = expr.split(\\"=\\") coeffs = [int(x) for x in coeffs.split(\\"+\\")] rhs = int(rhs) A = np.array(coeffs).reshape(1, 3) b = np.array(rhs).reshape(1, 1) result = np.linalg.solve(A, b) return result[0], result[1], result[2] if __name__ == '__main__': expr = \\"3x + 2y + 4z = 5\\" x, y, z = optimize_expression(expr) print(f\\"x = {x}, y = {y}, z = {z}\\")"},{"prompt":"Create an Adaboost classifier in Python to classify a given dataset. Not applicable","completion":"import numpy as np from sklearn.ensemble import AdaBoostClassifier X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]]) Y = np.array([1, 1, 1, 2, 2, 2]) clf = AdaBoostClassifier(n_estimators=50, learning_rate=1) clf.fit(X, Y) print(clf.predict([[-0.8, -1]]))"},{"prompt":"Generate a program in any language to check if a given array is sorted or not.","completion":"# Python def is_sorted(array): n = len(array) # Array of length 0 or 1 is considered sorted if n == 0 or n == 1: return True for i in range(n-1): # Without the equals it will return false even when the array was sorted if array[i] > array[i+1]: return False return True arr = [2, 3, 4] print(is_sorted(arr)) # True"},{"prompt":"Write a script in Python to generate a histogram of a given data set. data = [3, 5, 4, 6, 7, 8, 9, 3, 8, 5]","completion":"import matplotlib.pyplot as plt plt.hist(data, 10) plt.title(\\"Frequency Histogram\\") plt.xlabel(\\"Values\\") plt.ylabel(\\"Frequency\\") plt.show()"},{"prompt":"Design a class in Python to represent a Credit Card Account. The class should include attributes for name, card number, balance, and limit. It should also include methods for adding and subtracting from the balance and returning the card number. Not applicable","completion":"class CreditCardAccount: def __init__(self, name, card_number, balance, limit): self.name = name self.card_number = card_number self.balance = balance self.limit = limit def add_to_balance(self, amount): self.balance += amount def subtract_from_balance(self, amount): self.balance -= amount def get_card_number(self): return self.card_number"},{"prompt":"Write a Python Program to create a list of all the words in a given string and its frequency. Sample string = hello world, this is a test string","completion":"def word_frequency(string): freq = {} for word in string.split(): if word in freq: freq[word] += 1 else: freq[word] = 1 for key, value in freq.items(): print(\\"% s : % d\\"%(key, value)) # Driver program if __name__ == \\"__main__\\": string = \\"hello world, this is a test string\\" word_frequency(string)"},{"prompt":"Write a python program to successfully insert a row into a table named 'students' with the given values. student_name = John Doe student_age = 20","completion":"import sqlite3 conn = sqlite3.connect(\\"example.db\\") c = conn.cursor() c.execute(\\"INSERT INTO students VALUES ('John Doe', 20)\\") conn.commit() conn.close()"},{"prompt":"Develop a basic Reinforcement Learning agent in Python that learns to move an object from one end of a grid to another. Not applicable","completion":"import numpy as np import gym env = gym.make('GridWorld-v0') # Initialize Q-Table Q = np.zeros([env.observation_space.n, env.action_space.n]) # Define learning parameters lr = .8 y = .95 num_episodes = 2000 # Create lists to contain total rewards and steps per episode rList = [] for i in range(num_episodes): # Reset environment and get first new observation s = env.reset() rAll = 0 done = False # The Q-Table learning algorithm while not done: # Choose an action by greedily (with noise) picking from Q table a = np.argmax(Q[s,:] + np.random.randn(1,env.action_space.n)*(1./(i+1))) # Get new state and reward from environment s1,r,done,_ = env.step(a) # Update Q-Table with new knowledge Q[s,a] = Q[s,a] + lr*(r + y*np.max(Q[s1,:]) - Q[s,a]) rAll += r s = s1 rList.append(rAll)"},{"prompt":"Create a Python class that will store a list of integers and calculate the sum of all the elements in the list. [2, 3, 5, 7]","completion":"class CalcListSum: def __init__(self, numbers): self.numbers = numbers def get_sum(self): sum = 0 for num in self.numbers: sum += num return sum nums = [2, 3, 5, 7] calc_sum = CalcListSum(nums) sum_of_nums = calc_sum.get_sum() print(sum_of_nums)"},{"prompt":"Generate a Python program to print the most popular item in a list. A list of integers [1, 5, 9, 1, 4, 5, 9]","completion":"from collections import Counter def most_popular(arr): cnt = Counter() for number in arr: cnt[number] += 1 return cnt.most_common(1)[0][0] result = most_popular([1, 5, 9, 1, 4, 5, 9]) print(result)"},{"prompt":"Generate a Python script to automate web scraping of Wikipedia for extracting the data on the list of Presidents of the United States. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Make the request req = requests.get('https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States') # Parse html content soup = BeautifulSoup(req.content, 'html.parser') # Find the table table = soup.find('table', class_='wikitable') # Find all table rows table_rows = table.find_all('tr') # Print each row and the contents of each cell for tr in table_rows: td = tr.find_all('td') row = [i.text for i in td] print(row)"},{"prompt":"Create a Python program that takes a sentence as input and returns a dictionary of the words and their frequencies This is a sample sentence.","completion":"def word_frequency(sentence): words = sentence.split() freq = {word: words.count(word) for word in words} return freq sentence = 'This is a sample sentence.' result = word_frequency(sentence) print(result)"},{"prompt":"Create a Python script for creating a GUI app with a login page. Not applicable","completion":"from tkinter import * root = Tk() root.title(\\"Login Page\\") # Create window window_width = 400 window_height = 350 screen_width = root.winfo_screenwidth() screen_height = root.winfo_screenheight() x_cord = int((screen_width/2) - (window_width/2)) y_cord = int((screen_height/2) - (window_height/2)) # Set window geometry root.geometry(\\"{}x{}+{}+{}\\".format(window_width, window_height, x_cord, y_cord)) # Create widgets user_label = Label(root, text=\\"Username:\\") user_label.place(x=50, y=150) username_input = Entry(root, width=30) username_input.place(x=130, y=150) password_label = Label(root, text=\\"Password:\\") password_label.place(x=50, y=200) password_input = Entry(root, width=30, show=\\"*\\") password_input.place(x=130, y=200) def login(): #Verify input and authenticate user print(\\"Username: {}nPassword: {}\\".format(username_input.get(),password_input.get())) login_button = Button(root, text=\\"Login\\", command=login) login_button.place(x=180, y=230) # Create event loop root.mainloop()"},{"prompt":"Generate a Python program to find the closest pair of points in a twodimensional plane.","completion":"import math # List of points points = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]] # Initialize variables min_distance = float('inf') closest_pair = () # Loop through points for i in range(len(points)): for j in range(i+1, len(points)): # calculate the distance distance = math.sqrt((points[i][0]-points[j][0])**2 + (points[i][1]-points[j][1])**2) # check if the distance is less than the minimum distance if distance < min_distance: min_distance = distance closest_pair = (points[i], points[j]) # Print the closest pair print(\\"The closest pair of points is:\\", closest_pair)"},{"prompt":"Write a Python function that takes two integers, n and base, as parameters and returns a string representation of the basen number. n: 3, base: 4","completion":"def base_n(n, base): result = \\"\\" while n != 0: result += str(n % base) n //= base return result[::-1] # Reverse the string"},{"prompt":"Generate a program in Python that accepts a string as input and removes all vowels from it. Hello World","completion":"def removeVowels(str): vowels = ('a', 'e', 'i', 'o', 'u') res = \\"\\" for char in str: if char.lower() not in vowels: res += char return res print(removeVowels(\\"Hello World\\"))"},{"prompt":"Optimize the Python code below to operate in linear time complexity. Not applicable","completion":"# inefficient code def find_duplicates(array): seen = set() duplicates = [] for num in array: if num in seen: duplicates.append(num) seen.add(num) return duplicates # optimized code def find_duplicates_linear(array): duplicates = [] seen = set() for num in array: if num not in seen: seen.add(num) else: duplicates.append(num) return duplicates"},{"prompt":"Write a python program that takes a sentence as input and returns the reverse of it. sentence = hello world","completion":"\\"\\"\\" Reverse given sentence \\"\\"\\" def reverse_sentence(sentence): words = sentence.split(\\" \\") reverse_words = words[::-1] reverse_sentence = \\" \\".join(reverse_words) return reverse_sentence if __name__==\\"__main__\\": sentence = \\"hello world\\" reverse_sentence = reverse_sentence(sentence) print(\\"Reverse of sentence '\\"+sentence+\\"' is '\\"+reverse_sentence+\\"'\\")"},{"prompt":"Write a Python program to find the index of an item in the given array. [5, 7, 8, 6], 8","completion":"def search_index(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 print(search_index([5, 7, 8, 6], 8)) # 2"},{"prompt":"Create a function in Python that can print the first 5 prime numbers.","completion":"def print_first_five_primes(): prime_numbers = [2, 3, 5, 7, 11] for prime in prime_numbers: print(prime)"},{"prompt":"Create a search engine using Python","completion":"#import the necessary packages from bs4 import BeautifulSoup from requests import get #function to scrape data def scrape_data(url): response = get(url) soup = BeautifulSoup(response.text, \\"html.parser\\") return soup #function to search data def search_data(search_query): #specify the base URL base_url = \\"https://www.example.com/search?q=\\" search_query = search_query.replace(\\" \\", \\"+\\") #generate the complete URL complete_url = base_url + search_query #extract the data soup = scrape_data(complete_url) results = soup.find_all('div', class_='result') #display the results print(\\"Showing Results For: \\" + search_query) print(\\"=================================\\") #search through the results for result in results: print(result.text) #sample search query search_query = \\"machine learning\\" search_data(search_query)"},{"prompt":"Develop a function to search for a value in a list. lst = [‘hello’, ‘world’, ‘python’] value = ‘python’","completion":"def search_list(lst, value): for item in lst: if item == value: return True return False # Driver Code lst = ['hello', 'world', 'python'] value = 'python' is_present = search_list(lst, value) if is_present == True: print(value, \\"is present in the list\\") else: print(value, \\"is not present in the list\\")"},{"prompt":"Write a Python function to detect patterns in a sequence of numbers. sequence = [8, 5, 6, 4, 9, 3, 7, 8, 5, 6, 4, 9]","completion":"def detect_patterns(sequence): distinct_numbers = set(sequence) # Distinct sequence numbers # Initialize variables count_flag = 0 # Number of instances for a certain consecutive sequence max_seq_len = 0 # Max length of a consecutive sequence max_seq_number = 0 # The number which had the max consecutive sequence # Loop through each distinct number to track its consecutive sequence for number in distinct_numbers: # Initialize flag variables current_count_flag = 0 current_seq_len = 0 # Begin tracking the number's consecutive sequence for num in sequence: if number == num: current_count_flag += 1 current_seq_len += 1 # Check if current count flag is greater than max count flag if current_count_flag > count_flag: count_flag = current_count_flag max_seq_len = current_seq_len max_seq_number = number # Return the maximum sequence length and corresponding number return max_seq_len, max_seq_number"},{"prompt":"Create a step by step tutorial for using a for loop to print the elements of a list in Python.","completion":"This tutorial will teach you how to use a for-loop to print the elements of a given list in Python. Step 1: Initialize your loop Start by initializing a loop to loop through the elements of the list. This can be done by using the for-loop keyword in Python followed by the name of the variable you will use to represent the element of the list followed by the keyword in and the name of the list you want to loop through. For example, if you want to loop through the elements of the list called ‘mylist’, you would write: for element in mylist: Step 2: Print the element Inside the loop, use the print() function to print the current element. The print() function takes as argument the element of the list, which you can refer to with the variable you defined in Step 1. For example, if the name of the variable you defined in Step 1 was ‘element’, you would write: print(element) Step 3: Terminate the loop After you’ve printed all the elements, you should terminate the loop. To do this, you can use the keyword break. By using break, you can tell the loop to stop looping once it has reached the last element of the list. For example, you can write: break That’s it! This is how you use a for-loop to print the elements of a given list in Python."},{"prompt":"Code an algorithm in Python to check if two given sets are equal. A = {1, 2, 3, 4, 5} B = {4, 1, 2, 3, 5}","completion":"def is_equal(A, B): if len(A) != len(B): return False for el in A: if el not in B: return False return True"},{"prompt":"Write a Python program to search for a specific value in a list. my_list = [2, 4, 6, 8, 10]","completion":"def search_list(search_term, my_list): for item in my_list: if item == search_term: return True return False my_list = [2, 4, 6, 8, 10] search_term = 8 if search_list(search_term, my_list): print(\\"Value found\\") else: print(\\"Value not found\\")"},{"prompt":"Write a class in Python to initalize an empty list.","completion":"class ListInitializer: def __init__(self): self.list = []"},{"prompt":"Given a string which contains commaseparated alphabetic characters , write a program that rearranges the characters in the string so that all of the palindromic characters are placed at the beginning. bcqbad,bcipbp,cfgcdeh","completion":"# Python code input_string = \\"bcqbad,bcipbp,cfgcdeh\\" # split the input string into list of characters char_list = input_string.split(\\",\\") # function to check for palindrome def isPalindrome(string): return string == string[::-1] # empty list to store all palindromic characters palindromic_list = [] # loop through the given list of characters for char in char_list: # check for palindrome if isPalindrome(char): # if palindrome, add to the palindromic list palindromic_list.append(char) # remove the palindromic character from original list for palindrome in palindromic_list: char_list.remove(palindrome) # concat the palindromic list and original list final_list = palindromic_list + char_list # join the list and convert to string final_string = ','.join(final_list) # print the output string print(final_string)"},{"prompt":"Create a web application with Django and Python to manage a ToDo list. The web application should have a login system with endpoints for user registration, user login and a protected route listing all tasks. Not applicable","completion":"#myproject/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path('admin/', admin.site.urls), path('todo/', include('todo.urls')), ] #todo/views.py from django.shortcuts import render from django.contrib.auth.decorators import login_required from todo.models import Todo @login_required def list_todos(request): todos = Todo.objects.filter(user=request.user) return render(request, 'todo/list_todos.html', {'todos': todos}) #todo/urls.py from django.urls import path from todo.views import list_todos urlpatterns = [ path('', list_todos, name='list_todos'), ]"},{"prompt":"Write a Python program to identify the number of times a given number appears in a list. list = [12, 46, 8, 12, 8, 8] number = 8","completion":"counter = 0 for num in list: if num == number: counter += 1 print(\\"The given number appears\\", counter, \\"times in the list.\\")"},{"prompt":"Generate a Python program that accepts an integer as an input and then outputs a string composed of stars 5","completion":"# Get the number from the user num = int(input(\\"Enter a number: \\")) # Generate a string of stars star_string = '*' * num print(star_string)"},{"prompt":"Generate a list of output values by multiplying the input values from two array in Python. [1, 2, 3] and [4, 5, 6]","completion":"array1 = [1, 2, 3] array2 = [4, 5, 6] output = [val1 * val2 for val1, val2 in zip(array1, array2)] print(output) # Output [4, 10, 18]"},{"prompt":"Create a Python program to build a simple chatbot that converses with the user about the weather in a given location. Not applicable","completion":"import os import requests import random def get_weather(city): api_key = os.environ.get(\\"WEATHER_API_KEY\\") url = \\"http://api.openweathermap.org/data/2.5/weather\\" params = {\\"APPID\\": api_key, \\"q\\": city, \\"units\\": \\"metric\\"} response = requests.get(url, params=params) data = response.json() description = data[\\"weather\\"][0][\\"description\\"] temp = data[\\"main\\"][\\"temp\\"] return description, temp def chatbot(): print(\\"Hi! I'm a chatbot. Let's talk about the weather!\\") print(\\"Which city are you in?\\") city = input() description, temp = get_weather(city) print(f\\"It's {temp}°C with {description} in {city}.\\") yes_words = [\\"yes\\", \\"y\\", \\"yeah\\", \\"sure\\"] no_words = [\\"no\\", \\"n\\", \\"nah\\", \\"nope\\"] print(\\"Do you want to hear about another city?\\") answer = input().lower() if answer in yes_words: chatbot() elif answer in no_words: print(\\"Okay, bye!\\") else: random_response = random.choice(yes_words + no_words) print(f\\"I don't understand. Let's assume you said {random_response}.\\") chatbot() chatbot()"},{"prompt":"Develop a Python script that augments a given sentence with additional data from a given dictionary. Sentence: I went to the store. Dictionary: {Noun: [apple, banana, orange], Verb: [bought]}","completion":"sentence = \\"I went to the store.\\" dictionary = {\\"Noun\\": [\\"apple\\", \\"banana\\", \\"orange\\"], \\"Verb\\": [\\"bought\\"]} words = sentence.split() for i, word in enumerate(words): if word in dictionary[\\"Noun\\"]: words[i] += \\"s\\" if words[-1] == \\"store.\\": words[-2] = dictionary[\\"Verb\\"][0] new_sentence = \\" \\".join(words) print(new_sentence) # Output: I bought apples at the store."},{"prompt":"Write a Python program to generate a list of random numbers between 1 to 100.","completion":"import random def random_numbers(n): list_num = [] for i in range(n): list_num.append(random.randint(1, 100)) return list_num list_num = random_numbers(10) print(list_num)"},{"prompt":"Modify a given Python program to optimize its performance. def process_array(array): n = len(array) result = 0 for i in range(n): result += array[i] return resul","completion":"def process_array(array): n = len(array) result = 0 sum_backward = 0 # Starting from the end and going towards the beginning # this is an opportunity to reduce the time complexity for i in range(n-1, -1, -1): sum_backward += array[i] result += sum_backward return result"},{"prompt":"Create a multilevel linked list in Python.","completion":"class Node: def __init__(self, data): self.data = data self.next = None self.down = None # Function to create multi-level linked list def multiLevelLL(root): q = Queue() q.put(root) lnk_lnst = [] while q.empty() == False: p = q.get() lnk_lnst.append(p) left = p.next right = p.down if left is not None: q.put(left) if right is not None: q.put(right) return lnk_lnst #Example Usage root = Node(10) root.next = Node(2) root.next.next = Node(6) root.next.next.next = Node(8) root.next.next.next.next = Node(4) root.down = Node(3) root.down.down = Node(19) root.next.down = Node(5) root.next.down.down = Node(11) root.next.next.down = Node(7) llist = multiLevelLL(root) # Printing the Multi-level Linked List for i in llist: print(i.data, end = \\" \\")"},{"prompt":"Create a Python module file named slot with a class named Slot that contains at least four methods: initialize for initializing resources, __enter__ for getting next data to process, slot for user custom code, and __exit__ for when the slot is finished. Override the initialize, __enter__, __exit__, and slot methods in the subclass as needed. Return False in __enter__ when there is no data to process. Add custom code to the slot method.","completion":"# -*- coding: utf-8 -*- class Slot(object): \\"\\"\\" To use comb, you should create a python module file. we named *slot*. A legal slot must be named 'Slot' in your module file and it must be at least contain four method: * \`initialize\` initial resource, e.g: database handle * \`__enter__\` get next data to do,you can fetch one or more data. * \`slot\` user custom code * \`__exit__\` when slot finished, call this method \\"\\"\\" def __init__(self, combd): \\"\\"\\"Don't override this method unless what you're doing. \\"\\"\\" self.threads_num = combd.threads_num self.sleep = combd.sleep self.sleep_max = combd.sleep_max self.debug = combd.debug self.combd = combd self.initialize() def initialize(self): \\"\\"\\"Hook for subclass initialization. This block is execute before thread initial Example:: class UserSlot(Slot): def initialize(self): self.threads_num = 10 def slot(self, result): ... \\"\\"\\" pass def __enter__(self): \\"\\"\\"You **MUST** return False when no data to do. The return value will be used in \`Slot.slot\` \\"\\"\\" print(\\"You should override __enter__ method by subclass\\") return False def __exit__(self, exc_type, exc_val, exc_tb): \\"\\"\\"When slot done, will call this method. \\"\\"\\" print(\\"You should override __exit__ method by subclass\\") pass def slot(self, msg): \\"\\"\\" Add your custom code at here. For example, look at: * \`comb.demo.list\` * \`comb.demo.mongo\` * \`comb.demo.redis\` \\"\\"\\" pass # @staticmethod # def options(): # \\"\\"\\" # replace this method if you want add user options # :return: # \\"\\"\\" # return () # pass"},{"prompt":"Write a Python script to decrypt the given ciphertext. Ciphertext: NPKUO","completion":"alphabet = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" def decrypt(ciphertext): plaintext = \\"\\" for letter in ciphertext: index = alphabet.find(letter) newIndex = (index - 3) % 26 plaintext += alphabet[newIndex] return plaintext print(decrypt(\\"NPKUO\\"))"},{"prompt":"Can you build a python program to generate a random 5 character string?","completion":"import random def generate_random_string(): char_list = \\"abcdefghijklmnopqrstuvwxyz0123456789\\" random_string = \\"\\" for _ in range(5): random_string += random.choice(char_list) return random_string"},{"prompt":"Change the following python code so that the loop only iterates through the even numbers in the list. for num in range(16): print(num)","completion":"for num in range(16): if num % 2 == 0: print(num)"},{"prompt":"Using the Python turtle library, create a drawing of a spider web on the screen.","completion":"import turtle # Create a starting point turtle.setup(400, 400) turtle.penup() turtle.backward(150) turtle.pendown() # Create the spiderweb for _ in range(10): turtle.forward(50) turtle.right(80) # Hide the turtle turtle.hideturtle() turtle.done()"},{"prompt":"Create a python code to find the fastest path from a given source node to target node A source node of 3, a target node of 5, and the following weighted undirected graph 3>4 (5) 3>7 (3) 4>5 (3)","completion":"graph = { 3: {4: 5, 7: 3}, 4: {5: 3}, 5: {}, 7: {}, } def find_fastest_path(graph, source, target): if source == target: return 0 costs = {} for node in graph: costs[node] = float(\\"inf\\") costs[source] = 0 paths = {} paths[source] = [source] visited = set() while len(visited) != len(graph): current_node, current_cost = min( [(k, v) for k, v in costs.items() if k not in visited], key=lambda x:x[1] ) visited.add(current_node) for neighbour, cost in graph[current_node].items(): if current_cost + cost < costs[neighbour]: costs[neighbour] = current_cost + cost paths[neighbour] = paths[current_node] + [neighbour] return costs[target], paths[target]"},{"prompt":"Create a script in Python for classifying the sentiment of a text. The script should be able to handle input of various lengths and should return a sentiment score (on a scale from 1 to +1) for the text. positive","completion":"import nltk def sentiment_analysis(text): tokens = nltk.word_tokenize(text) score = 0 for token in tokens: tag = nltk.pos_tag(token)[0] if tag[1] == 'positive': score += 1 else: score -= 1 return score / len(tokens)"},{"prompt":"Create a Python program to subtract two given timestamps. time1 = 4:00:00 AM time2 = 3:00:00 PM","completion":"def subtract_timestamps(time1, time2): time1_minutes = int(time1[0:2]) * 60 + int(time1[3:5]) if \\"PM\\" in time1: time1_minutes += 12 * 60 time2_minutes = int(time2[0:2]) * 60 + int(time2[3:5]) if \\"PM\\" in time2: time2_minutes += 12 * 60 diff_minutes = time1_minutes - time2_minutes diff_hours = int(diff_minutes / 60) diff_minutes = diff_minutes - diff_hours * 60 print(str(diff_hours) + \\":\\" + str(diff_minutes)) subtract_timestamps(\\"4:00:00 AM\\", \\"3:00:00 PM\\") # Output: 12:00"},{"prompt":"Create a Python program to print out the elements of a list in reverse order. mylist = [1, 2, 3, 4, 5]","completion":"# Creating a new reversed list reversed_list = mylist[::-1] # Iterating through the list and printing each element for num in reversed_list: print(num)"},{"prompt":"Create a Python script that plots the trend of how stock prices have changed over time. Example stock prices data: [ { date: 20200401, price: 100.00 }, { date: 20200501, price: 110.00 }, { date: 20200601, price: 125.00 } ]","completion":"import matplotlib.pyplot as plt import datetime import json data = [ { \\"date\\": \\"2020-04-01\\", \\"price\\": 100.00 }, { \\"date\\": \\"2020-05-01\\", \\"price\\": 110.00 }, { \\"date\\": \\"2020-06-01\\", \\"price\\": 125.00 } ] dates = [datetime.datetime.strptime(x[\\"date\\"], '%Y-%m-%d').date() for x in data] prices = [x[\\"price\\"] for x in data] fig, ax = plt.subplots() ax.plot(dates, prices) ax.set(xlabel='Dates', ylabel='Stock Price', title='Trend of Stock Prices Over Time') ax.grid() fig.autofmt_xdate() plt.show()"},{"prompt":"Create a program in Python to remove all elements of a given list with a value of 0. [0, 1, 0, 3, 5, 0, 4]","completion":"def remove_zeroes(nums): return [x for x in nums if x != 0] print(remove_zeroes([0, 1, 0, 3, 5, 0, 4]))"},{"prompt":"Create a Python program which computes the factorial of a given integer number. num = 5","completion":"def factorial(num): if num == 0: return 1 else: return num * factorial(num-1) x = 5 print(factorial(x)) # 120"},{"prompt":"Create a class in Python that can calculate the area of a triangle. 3,4,5 (length of sides of the triangle)","completion":"class Triangle: def __init__(self, side1, side2, side3): self.side1 = side1 self.side2 = side2 self.side3 = side3 def get_area(self): s = (self.side1 + self.side2 + self.side3) / 2.0 area = (s*(s-self.side1)*(s-self.side2)*(s-self.side3)) ** 0.5 return area if __name__ == '__main__': triangle = Triangle(3, 4, 5) print(triangle.get_area())"},{"prompt":"Generate a Python program to calculate the mean, median, mode and standard deviation of an input data set. [3, 1, 4, 5, 5, 6, 7]","completion":"def mean_median_mode_sd(data): # calculate the mean mean = sum(data) / len(data) # calculate the median sorted_data = sorted(data) mid = len(data) // 2 if len(data) % 2 == 0: median = (sorted_data[mid-1] + sorted_data[mid]) / 2 else: median = sorted_data[mid] # calculate the mode counts = dict() for d in data: if d in counts: counts[d] += 1 else: counts[d] = 1 mode = max(counts, key=counts.get) # calculate the standard deviation mean_sum_sq_diff = 0 for d in data: mean_sum_sq_diff += pow(d - mean, 2) sd = pow(mean_sum_sq_diff / len(data), 0.5) # return results return mean, median, mode, sd"},{"prompt":"Design a class in Python to describe a 3dimensional vector.","completion":"class Vector: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def magnitude(self): return (self.x**2 + self.y**2 + self.z**2)**0.5 def dot_product(self, other): return self.x*other.x + self.y*other.y + self.z*other.z"},{"prompt":"Create a python program with the following goal: Given a string, find the index of the first unique character.","completion":"def find_first_unique_char_index(s): # create a dict to store already encountered characters encountered = {} # loop through the string and check if character is unique for i in range(len(s)): c = s[i] if c not in encountered: encountered[c] = i else: encountered[c] = -1 # find the first occurrence of an unique character for i in range(len(s)): c = s[i] if encountered[c] == i: return i return -1"},{"prompt":"Create a Python script that prints an inverted pyramid pattern. Number = 5;","completion":"# Create an empty list pattern = [] # Add the elements to the list for the desired pattern rows = 5 for i in range(1, rows+1): rows = rows - i pattern.append(\\"*\\"*i + \\" \\"*rows) # print the pattern for i in pattern[::-1]: print(i)"},{"prompt":"Generate a machine learning algorithm in Python for recognizing handwritten digits from the MNIST dataset. Not applicable","completion":"import numpy as np from keras.models import Sequential from keras.layers import Dense, Conv2D, Flatten # Create a Sequential model model = Sequential() # Add Conv2D and Dense layers model.add(Conv2D(64, kernel_size=3, activation='relu', input_shape=(28,28,1))) model.add(Conv2D(32, kernel_size=3, activation='relu')) model.add(Flatten()) model.add(Dense(10, activation='softmax')) # Compile the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) # Train the model on the MNIST dataset model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=3)"},{"prompt":"Create a python script to calculate the sum of even numbers and the average of odd numbers in a given list. list = [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"# Initializing sum and count variables sum_even = 0 count_odd = 0 # Iterating through the list for x in list: # If number is even if x % 2 == 0: sum_even += x # If number is odd else: count_odd += 1 # Calculating average if count_odd > 0: avg_odd = sum_even/count_odd # Printing results print(\\"Sum of even numbers:\\", sum_even) print(\\"Average of odd numbers:\\", avg_odd)"},{"prompt":"Write a Python function to sort a dictionary of string keys by their length. d = {three: 3, four: 4, five: 5, one: 1, two: 2}","completion":"def sort_by_length(d): sorted_d = {} keys_list = list(d.keys()) keys_list.sort(key=len) for key in keys_list: sorted_d[key] = d[key] return sorted_d"},{"prompt":"Write a Python script to extract all the values for a given key from a dictionary. dictionary = { 'key1': 'val1', 'key2': 'val2', 'key3': 'val3', 'key4': 'val4', }","completion":"def get_key_values(dictionary, key): return [value for key, value in dictionary.items() if key == key]"},{"prompt":"Create an array in Python containing 10 evenly spaced numbers between 0 and 10.","completion":"arr = np.linspace(0, 10, 10)"},{"prompt":"Generate a python code that returns all distinct values of a given list. my_list = [2,2,4,4,6,2]","completion":"def get_distinct_elements(list): distinct_list = [] for item in list: if item not in distinct_list: distinct_list.append(item) return distinct_list distinct_list = get_distinct_elements(my_list)"},{"prompt":"Design a Python solution to find the position of a given element in a list. List: ['a', 'b', 'c', 'd'] Element: 'd'","completion":"def find_index(arr, element): for index, value in enumerate(arr): if value == element: return index return -1 arr = ['a', 'b', 'c', 'd'] element = 'd' print(find_index(arr, element)) # Output: 3"},{"prompt":"Write a Python program to compare two lists and return the differences as a new list. list1 = [1, 3, 4, 5] list2 = [2, 4, 6, 8]","completion":"list1 = [1, 3, 4, 5] list2 = [2, 4, 6, 8] diff = [] for item in list1: if item not in list2: diff.append(item) for item in list2: if item not in list1: diff.append(item) print(diff) # [1, 3, 6, 8]"},{"prompt":"mplement a function in Python to round a number up to 0 decimal places. 19.876","completion":"def roundUp(x): return int(round(x)) print(roundUp(19.876))"},{"prompt":"Generate a program in Python that takes a list of numbers and prints out the average value. [3, 5, 7, 9]","completion":"def find_average(nums): sum = 0 for num in nums: sum += num return sum/len(nums)"},{"prompt":"Generate a Python program to print ‘Hello, world!’ when executed.","completion":"print('Hello, world!')"},{"prompt":"Generate a MongoDB query to find all documents in a collection based on a given list of strings. StrList = [Python, Programming, Web]","completion":"db.collection.find({ or: [ {title: {regex: /Python/, options: 'i'} }, {description: {regex: /Python/, options: 'i'}}, {title: {regex: /Programming/, options: 'i'}}, {description: {regex: /Programming/, options: 'i'}}, {title: {regex: /Web/, options: 'i'}}, {description: {regex: /Web/, options: 'i' }} ]})"},{"prompt":"Edit the following Python code to return the same output with fewer code lines. def my_func(list): for i in list: if i % 2 == 0: output = True else: output = False return outpu","completion":"def my_func(list): return any(i % 2 == 0 for i in list)"},{"prompt":"Create a python program to print out all combinations of elements from two lists. list1 = [1,2,3] list2 = [5,6,7]","completion":"for i in list1: for j in list2: print(i, j)"},{"prompt":"Create a function in Python that takes two list of numbers and outputs the product of each element in both lists. [1, 2, 3], [3, 4, 5]","completion":"def productOfLists(arr1, arr2): res = [] for i in range(len(arr1)): for j in range(len(arr2)): if i == j: res.append(arr1[i] * arr2[j]) return res product = productOfLists([1, 2, 3], [3, 4, 5]) print(product)"},{"prompt":"Formulate the following task in Python: calculate the number of numbers between two given numbers that are divisible by 7. 18 and 48","completion":"def calculate_divisible_by_7(num1, num2): divisible_by_7 = 0 for i in range(num1, num2+1): if i % 7 == 0: divisible_by_7 += 1 return divisible_by_7 num1 = 18 num2 = 48 divisible_by_7 = calculate_divisible_by_7(num1, num2) print(\\"Number of numbers divisible by 7 between \\", num1, \\" and \\", num2, \\" is: \\", divisible_by_7)"},{"prompt":"Construct a function in Python that takes a list of strings and returns the original list with each string replaced by its reverse. list = ['hello', 'world', 'example']","completion":"def reverse_list(lst): return [s[::-1] for s in lst] print(reverse_list(list)) # Output: ['olleh', 'dlrow', 'elpmaxe']"},{"prompt":"Design a Python function to generate a random password with the given length.","completion":"import random import string def generate_password(length): chars = string.ascii_letters + string.digits return ''.join(random.choice(chars) for _ in range(length))"},{"prompt":"Write a Python program to remove duplicate characters from a given string. string = Hello World !","completion":"string = \\"Hello World !\\" result = \\"\\" for char in string: if char not in result: result += char print(\\"String after removing duplicate characters:\\", result)"},{"prompt":"Create a Python program that takes a sentence as an input and outputs all the words with their part of speech. This is a sentence.","completion":"import nltk sentence = 'This is a sentence.' words = nltk.word_tokenize(sentence) for word in words: print(f'{word}: {nltk.pos_tag([word])[0][1]}')"},{"prompt":"Develop a Python program to remove duplicates from a list of integers. arr = [1, 4, 2, 1, 7, 4, 4, 5, 7]","completion":"def remove_duplicates(arr): seen = set() for elem in arr: if elem not in seen: seen.add(elem) return list(seen)"},{"prompt":"Enhance a given Python program by making it concurrent. import random def delay(x): r = random.random() print(sleeping for, round(r*x, 2), seconds) time.sleep(r*x) if __name_ == '__main__': while True: delay(3) print(Hello from python)","completion":"import concurrent.futures import random import time def delay(x): r = random.random() print(\\"sleeping for\\", round(r*x, 2), \\"seconds\\") time.sleep(r * x) if __name__ == '__main__': with concurrent.futures.ThreadPoolExecutor() as executor: executors = [executor.submit(delay, 3) for i in range(2)] for future in concurrent.futures.as_completed(executors): print(\\"Hello from python\\")"},{"prompt":"Write a Python program to reverse a list without using any builtin function. [1, 2, 3, 4, 5]","completion":"def reverseList(l): revList = [] for i in range(len(l)-1,-1,-1): revList.append(l[i]) return revList lst = [1, 2, 3, 4, 5] print(reverseList(lst))"},{"prompt":"Python, use the re module to remove the HTML tags from a given string. String: <b>This is a bold string</b>","completion":"import re string = \\"<b>This is a bold string</b>\\" clean_string = re.sub(r'<[^>]*>', '', string) print(clean_string)"},{"prompt":"Write a class in Python that validates a given password and prints the result. password = 12345","completion":"\\"\\"\\" Write a class in Python to validate a given password \\"\\"\\" class PasswordValidator: def __init__(self, password): self.password = password def validate(self): is_valid = True # Add code to check length, special characters, etc. if len(self.password) < 8: is_valid = False return is_valid pwd = PasswordValidator(\\"12345\\") if pwd.validate(): print(\\"The password is valid\\") else: print(\\"The password is invalid\\")"},{"prompt":"Create a Python program to calculate the area of a triangular pyramid given the length and width of each of its triangular base faces. the lengths and widths of the three base face","completion":"# function to calculate the area of a triangular pyramid def area(face1_length, face1_width, face2_length, face2_width, face3_length, face3_width): # calculate the area of the three triangular base faces face1_area = (face1_length * face1_width) / 2 face2_area = (face2_length * face2_width) / 2 face3_area = (face3_length * face3_width) / 2 # calculate the area of a triangular pyramid area = face1_area + face2_area + face3_area return area # input face1_length = 5 face1_width = 4 face2_length = 6 face2_width = 2 face3_length = 3 face3_width = 5 # calculate the area area = area(face1_length, face1_width, face2_length, face2_width, face3_length, face3_width) # print the result print(\\"The area of the triangular pyramid is\\", area)"},{"prompt":"Build a linear search algorithm in Python. The list is [1, 5, 9 , 15].","completion":"def linear_search(data, target): \\"\\"\\"Linear search algorithm in Python.\\"\\"\\" for i in range(len(data)): if data[i] == target: return i return None if __name__ == \\"__main__\\": list = [1, 5, 9, 15] target = 15 index = linear_search(list, target) if index is not None: print(\\"Target found at index:\\", index) else: print(\\"Target not found in list\\")"},{"prompt":"Create a simple Python program to calculate the sum of two numbers and print out the result. Number 1: 3 Number 2: 5","completion":"num1 = 3 num2 = 5 result = num1 + num2 print(f'The sum of {num1} and {num2} is {result}')"},{"prompt":"Generate a python program to collect all elements of a given list that are of even length. list = [a, bb, ccc, dddd, eee]","completion":"def even_length_elements(my_list): even_length_list = list() for elem in my_list: if (len(elem) % 2 == 0): even_length_list.append(elem) return even_length_list"},{"prompt":"Build a Python program to detect credit card fraud. The program should ingest a batch of transactions, analyze the data, and output the predicted probability of each transaction being fraudulent. Not applicable","completion":"import pandas as pd from sklearn.metrics import confusion_matrix from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier # Create a dataframe of the transactions transactions = pd.DataFrame({ 'amount': [3.23, 5.41, 2.34, 8.45, 10.67, 16.23, 7.68, 18.9], 'from_account': ['A', 'B', 'B', 'A', 'A', 'C', 'A', 'C'], 'to_account': ['B', 'A', 'C', 'C', 'B', 'B', 'A', 'A'], 'timestamp': [1523443123, 1523443642, 1523440452, 1523443167, 1523437395, 1523440491, 1523438586, 1523441126], }) # Split the data into training and testing X = transactions[['amount', 'from_account', 'to_account']] y = transactions['timestamp'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train a Random Forest Classifier rfc = RandomForestClassifier(n_estimators=100) rfc.fit(X_train, y_train) # Make predictions for the test data predictions = rfc.predict(X_test) # Calculate the accuracy of our predictions accuracy = confusion_matrix(y_test, predictions) print(\\"Accuracy:\\", accuracy) # Calculate the probability of each transaction being fraudulent pred_proba = rfc.predict_proba(X_test) print(\\"Fraud Probability:\\", pred_proba)"},{"prompt":"Using the provided data, create a Python program that can categorize a book as fiction or nonfiction. {title: The Catcher in the Rye, author: JD Salinger, genre: Novel}","completion":"import json data = '{\\"title\\": \\"The Catcher in the Rye\\", \\"author\\": \\"JD Salinger\\", \\"genre\\": \\"Novel\\"}' book_data = json.loads(data) if book_data[\\"genre\\"] == \\"Novel\\": print(\\"Book is fiction\\") else: print(\\"Book is not fiction\\")"},{"prompt":"Create a function in Python to read specified properties from a list. props = ['name', 'age', 'gender']","completion":"def read_props(props): \\"\\"\\" Read listed properties from a list. Args: props (list): The list containing properties to be read. Returns: tuple: Returns a tuple with values of the specified properties. \\"\\"\\" data = list() for prop in props: data.append(input(\\"Enter {}: \\".format(prop))) return tuple(data)"},{"prompt":"Create a neural network in Python and Tensorflow on the MNIST dataset. import tensorflow as tf from tensorflow import keras import matplotlib.pyplot as plt import numpy as np from keras.datasets import mnist (x_train, y_train), (x_test, y_test) = mnist.load_data()","completion":"model = keras.models.Sequential([ keras.layers.Flatten(input_shape=(28,28)), keras.layers.Dense(128,activation='relu'), keras.layers.Dense(10,activation='softmax') ]) model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) model.fit(x_train,y_train)"},{"prompt":"Create a Python class that stores information about a person's function.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age def getInformation(self): return \\"Name: \\"+ self.name + \\", Age: \\" + str(self.age) person = Person(\\"John\\", 19) print(person.getInformation())"},{"prompt":"Convert a given Python program into pseudocode. # Python program to print even numbers in a list numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] for num in numbers: if num % 2 == 0: print(num)","completion":"// pseudocode numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] FOR num IN numbers IF num modulus 2 is equal to 0 PRINT num"},{"prompt":"Write a Python program to create a dictionary with keys numbers and their squares as the values.","completion":"def num_squares(): squares_dict = {} for i in range(1,11): squares_dict[i] = i*i return squares_dict"},{"prompt":"Develop a modularized Python code snippet to find the volume of a rectangular cube with side length 'a'. a = 4","completion":"def cube_volume(a): \\"\\"\\"Calculate the volume of a cube Args: a (float): length of a side of the cube Returns: Volume of the cube (float) \\"\\"\\" return a**3 # Input a = 4 # Calculate Cube Volume volume = cube_volume(a) # Print Volume print(\\"Volume of cube with side length\\", a, \\"is\\", volume)"},{"prompt":"Write a Python function to implement Quicksort.","completion":"def quick_sort(arr): if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quick_sort(left) + middle + quick_sort(right) print(quick_sort([3,6,8,10,1,2,1]))"},{"prompt":"Design an objectoriented class in Python to represent a person's contact information Not applicable","completion":"class Contact: def __init__(self, name, phone, email): self.name = name self.phone = phone self.email = email def get_name(self): return self.name def set_name(self, name): self.name = name def get_phone_number(self): return self.phone def set_phone_number(self, phone): self.phone = phone def get_email(self): return self.email def set_email(self, email): self.email = email"},{"prompt":"Generate a valid Python script which calculates the median of a given list of numbers. my_list = [1, 8, 4, 9, 5]","completion":"def median(my_list): my_list.sort() if len(my_list) % 2 == 0: return (my_list[(len(my_list) // 2) - 1] + my_list[(len(my_list)) // 2]) / 2 return my_list[len(my_list) // 2]"},{"prompt":"Edit the following Python program to fix the syntax error def fx(x): if(x=0) x=x++; return x","completion":"def fx(x): if x == 0: x += 1 return x"},{"prompt":"Generate a correct python program to initialize a dictionary of userdefined size.","completion":"def initialize_dict(size): my_dict = {} for i in range(size): my_dict[i] = None return my_dict"},{"prompt":"Write a python script to remove all occurrences of a particular string from a given text. Text: “I like cats, cats and cats”, String: “cats”","completion":"text = \\"I like cats, cats and cats\\" string = \\"cats\\" # Replace all occurrences of the string with an empty string modified_text = text.replace(string, \\"\\") print(modified_text) # Output: \\"I like , and \\""},{"prompt":"Distinguish classification task from regression task and generate a Python program to solve a given classification problem.","completion":"import numpy as np from sklearn.neighbors import KNeighborsClassifier # Define inputs and outputs # Inputs X = np.array([[10, 20], [30, 40], [50, 20], [10, 70], [50, 50]]) # Outputs y = np.array([0, 0, 1, 1, 1]) # Create a KNN classifier knn = KNeighborsClassifier(n_neighbors=3) # Train the classifier using training data knn.fit(X, y) # Make predictions based on the testing data predictions = knn.predict([[10, 50], [20, 30]]) # Print the predictions print(predictions) # Outputs: [0, 0]"},{"prompt":"Write a Python program to generate a random password of length 8 that contains both uppercase and lowercase letters. Not applicable","completion":"import string import random def generate_password(length): # Get all possible characters characters = string.ascii_lowercase + string.ascii_uppercase + string.digits # Generate a random password password = ''.join(random.choice(characters) for i in range(length)) # Return the generated password return password print(generate_password(8))"},{"prompt":"Create a Python script to calculate the average of the three numbers 62, 72, and 85.","completion":"# Calculate the average of three numbers def calculate_average(num1, num2, num3): sum = num1 + num2 + num3 average = sum / 3 return average number1 = 62 number2 = 72 number3 = 85 print(\\"The average is:\\", calculate_average(number1, number2, number3))"},{"prompt":"Write a Python program to summarize a long text into a shorter version using natural language processing techniques. <input> The fox is a small to mediumsized mammal belonging to several genera of the family Canidae. Its coat colour ranges from pale red to very dark brown. The fox lives in almost every biome, but its main territory is the forests of the northern hemisphere. Foxes are omnivores, meaning they eat both plants and animals. They are mainly active at night and often hunt for their food.</input>","completion":"import nltk import numpy as np from nltk.tokenize import sent_tokenize, word_tokenize from nltk.corpus import stopwords # Initialize input data text = \\"<input> The fox is a small to medium-sized mammal belonging to several genera of the family Canidae. Its coat colour ranges from pale red to very dark brown. The fox lives in almost every biome, but its main territory is the forests of the northern hemisphere. Foxes are omnivores, meaning they eat both plants and animals. They are mainly active at night and often hunt for their food.</input>\\" # Generate a summary using NLTK words = word_tokenize(text) stopwords = set(stopwords.words('english')) words_without_stopwords = [word for word in words if not word in stopwords] words_with_scores = nltk.FreqDist(words_without_stopwords) sentences_with_scores = {sent: sum([words_with_scores[word] for word in word_tokenize(sent) if word in words_with_scores]) for sent in sent_tokenize(text)} best_sent = max(sentences_with_scores, key=sentences_with_scores.get) # Print the summary print(best_sent) # Output: Foxes are omnivores, meaning they eat both plants and animals. They are mainly active at night and often hunt for their food."},{"prompt":"Write a Python program that prints out the multiplication table of 9. Not applicable","completion":"# Function to display the multiplication table def displayTable(): # Nested loop to iteratre through the table for i in range(1, 11): for j in range(1, 11): print(f'{i} x {j} = {i*j}') # Call the Function displayTable()"},{"prompt":"Write a Python program to print a Diamond pattern.","completion":"def diamond(n): if n % 2 == 0: n += 1 for i in range(n): if i < (n + 1)//2: for j in range((n - 3* i)//2): print(' ', end = '') for j in range(3*i + 1): print('*', end = '') for j in range((n - 3* i)//2): print(' ', end = '') else: for j in range(3* i - 3*(n // 2)): print(' ', end = '') for j in range(2*(n - i) - 1): print('*', end = '') for j in range(3* i - 3*(n // 2)): print(' ', end = '') print('') diamond(9)"},{"prompt":"Make a Python function that takes in three parameters and returns a boolean value.","completion":"# This function checks if the sum of three numbers is even or odd def is_sum_even(x, y, z): sum = x + y + z if (sum % 2 == 0): return True else: return False"},{"prompt":"Create a python script that takes an array of integers and returns an array of their squares. [1, 2, 3, 4, 5]","completion":"def find_squares(arr): squares = [] for num in arr: squares.append(num ** 2) return squares find_squares([1, 2, 3, 4, 5])"},{"prompt":"Generate a function in Python which can be used to compare two strings to see which one is longer.","completion":"def compare_length(s1, s2): if len(s1) == len(s2): return 0 elif len(s1) > len(s2): return 1 else: return 2"},{"prompt":"This code is used to interact with the wpa_supplicant1 service through the DBus interface. To use it, import the necessary modules and define the DBus service, interface, and object paths. Then, define functions to handle various signals and properties changes, such as listing available interfaces, showing BSS information, and scanning for networks. Finally, set up the DBus signal receivers and start the main loop.","completion":"#!/usr/bin/python import dbus import sys, os import time import gobject from dbus.mainloop.glib import DBusGMainLoop WPAS_DBUS_SERVICE = \\"fi.w1.wpa_supplicant1\\" WPAS_DBUS_INTERFACE = \\"fi.w1.wpa_supplicant1\\" WPAS_DBUS_OPATH = \\"/fi/w1/wpa_supplicant1\\" WPAS_DBUS_INTERFACES_INTERFACE = \\"fi.w1.wpa_supplicant1.Interface\\" WPAS_DBUS_INTERFACES_OPATH = \\"/fi/w1/wpa_supplicant1/Interfaces\\" WPAS_DBUS_BSS_INTERFACE = \\"fi.w1.wpa_supplicant1.BSS\\" WPAS_DBUS_NETWORK_INTERFACE = \\"fi.w1.wpa_supplicant1.Network\\" def byte_array_to_string(s): import urllib r = \\"\\" for c in s: if c >= 32 and c < 127: r += \\"%c\\" % c else: r += urllib.quote(chr(c)) return r def list_interfaces(wpas_obj): ifaces = wpas_obj.Get(WPAS_DBUS_INTERFACE, 'Interfaces', dbus_interface=dbus.PROPERTIES_IFACE) for path in ifaces: if_obj = bus.get_object(WPAS_DBUS_SERVICE, path) ifname = if_obj.Get(WPAS_DBUS_INTERFACES_INTERFACE, 'Ifname', dbus_interface=dbus.PROPERTIES_IFACE) print ifname def interfaceAdded(interface, properties): print \\"InterfaceAdded(%s): Ifname=%s\\" % (interface, properties['Ifname']) def interfaceRemoved(interface): print \\"InterfaceRemoved(%s)\\" % (interface) def propertiesChanged(properties): for i in properties: print \\"PropertiesChanged: %s=%s\\" % (i, properties[i]) def showBss(bss): net_obj = bus.get_object(WPAS_DBUS_SERVICE, bss) net = dbus.Interface(net_obj, WPAS_DBUS_BSS_INTERFACE) # Convert the byte-array for SSID and BSSID to printable strings val = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'BSSID', dbus_interface=dbus.PROPERTIES_IFACE) bssid = \\"\\" for item in val: bssid = bssid + \\":%02x\\" % item bssid = bssid[1:] val = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'SSID', dbus_interface=dbus.PROPERTIES_IFACE) ssid = byte_array_to_string(val) val = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'WPAIE', dbus_interface=dbus.PROPERTIES_IFACE) wpa = \\"no\\" if val != None: wpa = \\"yes\\" val = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'RSNIE', dbus_interface=dbus.PROPERTIES_IFACE) wpa2 = \\"no\\" if val != None: wpa2 = \\"yes\\" freq = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'Frequency', dbus_interface=dbus.PROPERTIES_IFACE) signal = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'Signal', dbus_interface=dbus.PROPERTIES_IFACE) val = net_obj.Get(WPAS_DBUS_BSS_INTERFACE, 'Rates', dbus_interface=dbus.PROPERTIES_IFACE) if len(val) > 0: maxrate = val[0] / 1000000 else: maxrate = 0 print \\" %s :: ssid='%s' wpa=%s wpa2=%s signal=%d rate=%d freq=%d\\" % (bssid, ssid, wpa, wpa2, signal, maxrate, freq) def scanDone(success): gobject.MainLoop().quit() print \\"Scan done: success=%s\\" % success def scanDone2(success, path=None): print \\"Scan done: success=%s [path=%s]\\" % (success, path) def bssAdded(bss, properties): print \\"BSS added: %s\\" % (bss) showBss(bss) def bssRemoved(bss): print \\"BSS removed: %s\\" % (bss) def blobAdded(blob): print \\"BlobAdded(%s)\\" % (blob) def blobRemoved(blob): print \\"BlobRemoved(%s)\\" % (blob) def networkAdded(network, properties): print \\"NetworkAdded(%s)\\" % (network) def networkRemoved(network): print \\"NetworkRemoved(%s)\\" % (network) def networkSelected(network): print \\"NetworkSelected(%s)\\" % (network) def propertiesChangedInterface(properties): for i in properties: print \\"PropertiesChanged(interface): %s=%s\\" % (i, properties[i]) def propertiesChangedBss(properties): for i in properties: print \\"PropertiesChanged(BSS): %s=%s\\" % (i, properties[i]) def propertiesChangedNetwork(properties): for i in properties: print \\"PropertiesChanged(Network): %s=%s\\" % (i, properties[i]) def main(): dbus.mainloop.glib.DBusGMainLoop(set_as_default=True) global bus bus = dbus.SystemBus() wpas_obj = bus.get_object(WPAS_DBUS_SERVICE, WPAS_DBUS_OPATH) if len(sys.argv) != 2: list_interfaces(wpas_obj) os._exit(1) wpas = dbus.Interface(wpas_obj, WPAS_DBUS_INTERFACE) bus.add_signal_receiver(interfaceAdded, dbus_interface=WPAS_DBUS_INTERFACE, signal_name=\\"InterfaceAdded\\") bus.add_signal_receiver(interfaceRemoved, dbus_interface=WPAS_DBUS_INTERFACE, signal_name=\\"InterfaceRemoved\\") bus.add_signal_receiver(propertiesChanged, dbus_interface=WPAS_DBUS_INTERFACE, signal_name=\\"PropertiesChanged\\") ifname = sys.argv[1] path = wpas.GetInterface(ifname) if_obj = bus.get_object(WPAS_DBUS_SERVICE, path) iface = dbus.Interface(if_obj, WPAS_DBUS_INTERFACES_INTERFACE) iface.connect_to_signal(\\"ScanDone\\", scanDone2, path_keyword='path') bus.add_signal_receiver(scanDone, dbus_interface=WPAS_DBUS_INTERFACES_INTERFACE, signal_name=\\"ScanDone\\", path=path) bus.add_signal_receiver(bssAdded, dbus_interface=WPAS_DBUS_INTERFACES_INTERFACE, signal_name=\\"BSSAdded\\", path=path) bus.add_signal_receiver(bssRemoved, dbus_interface=WPAS_DBUS_INTERFACES_INTERFACE, signal_name=\\"BSSRemoved\\", path=path) bus.add_signal_receiver(blobAdded, dbus_interface=WPAS_DBUS_INTERFACES_INTERFACE, signal_name=\\"BlobAdded\\", path=path) bus.add_signal_receiver(blobRemoved, dbus_interface=WPAS_DBUS_INTERFACES_INTERFACE, signal_name=\\"BlobRemoved\\", path=path) bus.add_signal_receiver(networkAdded, dbus_interface=WPAS_DBUS_INTERFACES_INTERFACE, signal_name=\\"NetworkAdded\\", path=path) bus.add_signal_receiver(networkRemoved, dbus_interface=WPAS_DBUS_INTERFACES_INTERFACE, signal_name=\\"NetworkRemoved\\", path=path) bus.add_signal_receiver(networkSelected, dbus_interface=WPAS_DBUS_INTERFACES_INTERFACE, signal_name=\\"NetworkSelected\\", path=path) bus.add_signal_receiver(propertiesChangedInterface, dbus_interface=WPAS_DBUS_INTERFACES_INTERFACE, signal_name=\\"PropertiesChanged\\", path=path) bus.add_signal_receiver(propertiesChangedBss, dbus_interface=WPAS_DBUS_BSS_INTERFACE, signal_name=\\"PropertiesChanged\\") bus.add_signal_receiver(propertiesChangedNetwork, dbus_interface=WPAS_DBUS_NETWORK_INTERFACE, signal_name=\\"PropertiesChanged\\") gobject.MainLoop().run() if __name__ == \\"__main__\\": main()"},{"prompt":"Develop an algorithm in Python for deletion of an element from an array. [1, 2, 3, 4], 3","completion":"def deleteElement(arr, element): index = -1 for i in range(len(arr)): if arr[i] == element: index = i break if index != -1: arr.pop(index) return arr else: return -1 arr = [1, 2, 3, 4] element = 3 new_arr = deleteElement(arr, element) print(new_arr)"},{"prompt":"Using OOP paradigm, create a Python class for a character in a roleplaying game.","completion":"class Character: def __init__(self,name,hp,mp,strength,intelligence,dexterity): self.name = name self.hp = hp self.mp = mp self.strength = strength self.intelligence = intelligence self.dexterity = dexterity def print_stats(self): print(f\\"Name: {self.name} nHP: {self.hp} nMP: {self.mp} nStrength: {self.strength} nIntelligence: {self.intelligence} nDexterity: {self.dexterity}\\")"},{"prompt":"Can you make a loop in Python to print out the number from 10 to 20?","completion":"for i in range(10, 21): print(i)"},{"prompt":"Optimize an existing Python application to run faster. Not applicable","completion":"There are many ways to optimize the performance of a Python application. Here are a few tips: 1. Reduce the number of function calls by passing parameters that are used multiple times. 2. Use lazy loading where possible. 3. Use list comprehensions and other iteration techniques to reduce overall time spent in loops. 4. Use built-in functions instead of hand-crafted solutions. 5. Use vectorized operations and optimized data structures to reduce the amount of computation. 6. Use asynchronous operations to reduce blocking and wait times. 7. Pre-allocate memory for loops and data structures to reduce dynamic memory allocations. 8. Use compilation techniques (e.g. Cython) to further optimize your code."},{"prompt":"Write a Python program to generate a list of prime numbers within a specified range.","completion":"def prime_range(lower, upper): prime_list = [] for num in range(lower, upper +1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: prime_list.append(num) return prime_list lower = 1 upper = 20 print(prime_range(lower, upper))"},{"prompt":"Train an XGBoost model in Python to classify emails into two categories: 'spam' and 'not spam'. Data set with 4,000 email","completion":"import pandas as pd import xgboost as xgb # Read in the data set data = pd.read_csv('email.csv') # Split the data into features and labels X = data.drop(columns=['label']) y = data['label'] # Train and test split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Build the model xg_clf = xgb.XGBClassifier(objective=\\"binary:logistic\\", random_state=42) xg_clf.fit(X_train, y_train) # Make predictions with the test data y_preds = xg_clf.predict(X_test) # Evaluate the model accuracy = accuracy_score(y_test, y_preds) print('The model accuracy is:', accuracy)"},{"prompt":"Create a Python dictionary that stores customer data. The keys should be customer ids (strings) and the values should be a tuple containing the customer's name, email, and city. Not applicable","completion":"customer_data = { '001': ('John', 'john@example.com', 'London'), '002': ('Jane', 'jane@example.com', 'New York'), '003': ('Bob', 'bob@example.com', 'Los Angeles') }"},{"prompt":"Create a function in Python that takes four parameters and returns the highest value. Not applicable","completion":"def get_highest(val1, val2, val3, val4): return max([val1, val2, val3, val4])"},{"prompt":"Write a function in Python for detecting outliers on a given data set. Not applicable","completion":"import numpy as np def detect_outliers(data): q75, q25 = np.percentile(data, [75 ,25]) iqr = q75 - q25 cut_off = iqr * 1.5 lower, upper = q25 - cut_off, q75 + cut_off outliers = [x for x in data if x < lower or x > upper] return outliers"},{"prompt":"Create a program in Python to find the longest common subarray in two int array The two int arrays are: [1, 2, 3, 4, 5] [3, 4, 2, 6]","completion":"def find_longest_common_subarray(arr1, arr2): # find the length of the two arrays n1 = len(arr1) n2 = len(arr2) # a 2D array to store the maximum length of # common subarray ending at each index dp = [[0 for i in range(n2+1)] for j in range(n1+1)] result = 0 # Fill dp[][] in bottom up manner for i in range(n1): for j in range(n2): # if the characters in the two arrays match if arr1[i] == arr2[j]: # Update dp[i][j] with the value of dp[i - 1][j - 1] + 1 dp[i][j] = dp[i - 1][j - 1] + 1 # update result if necessary result = max(result, dp[i][j]) else: # else update dp[i][j] to 0 dp[i][j] = 0 # return the longest length return result # driver code arr1 = [1, 2, 3, 4, 5] arr2 = [3, 4, 2, 6] print(find_longest_common_subarray(arr1, arr2)) # Output: 3"},{"prompt":"Compose a Python function that takes two numbers x and y and returns the sum of their squares.","completion":"\\"\\"\\" Compose a Python function that returns the sum of the squares of two numbers. \\"\\"\\" def sum_of_squares(x, y): # calculate the sum of the squares result = x**2 + y**2 # return the result return result if __name__ == '__main__': # define the numbers x = 2 y = 3 # calculate the sum of the squares result = sum_of_squares(x, y) # print the result print(result)"},{"prompt":"Create a function in Python that will convert a string to all uppercase letters. input_string = This Is A String","completion":"def uppercase_string(input_string): return input_string.upper()"},{"prompt":"Suggest a way to sort a list of integers in python in ascending order. [9, 1, 8, 0, 2]","completion":"sorted_list = [9, 1, 8, 0, 2].sort() print(sorted_list)"},{"prompt":"Create a function in Python to remove punctuation from a text. text = “Welcome! My name is Mike, and I’m here to help you.”","completion":"import string def remove_punctuation(text): punct_chars = string.punctuation no_punct = \\"\\" for char in text: if char not in punct_chars: no_punct += char return no_punct print(remove_punctuation(\\"Welcome! My name is Mike, and I’m here to help you.”\\")) # Output: Welcome My name is Mike and Im here to help you"},{"prompt":"Create a command line tool in Python that takes input from the user and prints a message. The message should be You entered <input>. hello","completion":"import sys def main(): args = sys.argv[1:] if args and len(args) == 1: print('You entered {}.'.format(args[0])) else: print('Please provide a single argument.') if __name__ == \\"__main__\\": main()"},{"prompt":"Can you create an algorithm in Python to calculate the sharpe ratio? A daily return of a stock: 2.3%, 3.3%, 8.5%, 2.3%, 1.1%, 5.3%, 3.2%, 4.2%, 3.1%, 2.1%","completion":"import numpy as np # Inputting daily returns ret = np.array([0.023, 0.033, 0.085, -0.023, -0.011, 0.053, 0.032, 0.042, -0.031, 0.021]) # Calculate the average returns avg_returns = np.mean(ret) # Survey the volatility of the portfolio std_returns = np.std(ret) # Calculate the Sharpe Ratio Sharpe_Ratio = avg_returns / std_returns print('The Sharpe ratio is ', Sharpe_Ratio)"},{"prompt":"mplement an RSA encryption algorithm in Python.","completion":"# generate a random prime number def gen_prime(): # generate a large, prime number p = getPrime(1024) q = getPrime(1024) # compute the modulus n = p * q return n # generate the private and public key def gen_keys(n): # generate two distinct large primes p = getPrime(1024) q = getPrime(1024) phi_n = (p - 1) * (q - 1) # choose an integer e such that e and phi(n) are coprime e = random.randrange(1, phi_n) g = gcd(e, phi_n) while g != 1: e = random.randrange(1, phi_n) g = gcd(e, phi_n) # generate private key d = modinv(e, phi_n) # return public and private keypair # public key is (e, n) and private key is (d, n) return ((e, n), (d, n)) # encrypt the message def encrypt(pk, plaintext): # unpack the key into it's components key, n = pk # convert each letter in the plaintext to numbers based on the character using a^b mod m cipher = [(ord(char) ** key) % n for char in plaintext] # return the array of bytes return cipher # decrypt the message def decrypt(pk, ciphertext): # unpack the key into its components key, n = pk # generate the plaintext based on the ciphertext and key using a^b mod m plain = [chr((char ** key) % n) for char in ciphertext] # return the array of bytes as a string return ''.join(plain)"},{"prompt":"Create a class in Python that represents a rectangle shape.","completion":"class Rectangle: # Initialize object def __init__(self, width, height): self.width = width self.height = height # Return area def get_area(self): return self.width * self.height # Return perimeter def get_perimeter(self): return 2 * (self.width + self.height)"},{"prompt":"Compute the length of a string in Python str = Hello, World!","completion":"str = \\"Hello, World!\\" length = len(str) print('Length of string is:',length) # Length of string is: 13"},{"prompt":"Design and develop an algorithm in Python to generate a Sudoku puzzle board. Not applicable","completion":"# Function to generate a 9x9 Sudoku puzzle board def generate_sudoku(): board = [[0 for x in range(9)] for y in range(9)] # Gnerate the board options = [1, 2, 3, 4, 5, 6, 7, 8, 9] # Array of all possible options for x in range(9): for y in range(9): # Get all the valid options valid_options = getValidOptions(board, x, y) # Get a random option from the valid options random_option = random.choice(valid_options) # Place the random option in the board board[x][y] = random_option return board # Function to get all valid options for a particular cell def getValidOptions(board, x, y): possibilities = [1, 2, 3, 4, 5, 6, 7, 8, 9] for i in range(9): # Remove the row numbers if board[x][i] in possibilities: possibilities.remove(board[x][i]) # Remove the column numbers if board[i][y] in possibilities: possibilities.remove(board[i][y]) # Calculate the 3 X 3 matrix unit_x_start = int((x / 3)) * 3 unit_y_start = int((y / 3)) * 3 for i in range(3): for j in range(3): if board[unit_x_start + i][unit_y_start + j] in possibilities: possibilities.remove(board[unit_x_start + i][unit_y_start + j]) return possibilities"},{"prompt":"Build a web application using Django and React that displays a list of products and provides user authentication. Not applicable","completion":"# Setup Django # Create a Django project django-admin startproject myproject # Create an app inside the Django project cd myproject python manage.py startapp products # Add the app to INSTALLED_APPS in the settings.py file INSTALLED_APPS = [ 'products.apps.ProductsConfig', # other apps ] # Add the authentication app to INSTALLED_APPS in the settings.py file INSTALLED_APPS = [ 'django.contrib.auth', # other apps ] # Setup React # Create a React application create-react-app myapp # Add the dependecies cd myapp npm install react-router-dom npm install axios npm install react-bootstrap # Create components # Create components for: # Home page # Product list page # Login page # Logout page # Authentication # Add routes for the components # Add routes for the login, logout, and product list components # Connect to the Django server # Add the Django API to the React application axios.defaults.baseURL = 'http://localhost:8000/' # Render the React application # Create the entry point for the application # Add a script tag pointing to the entry point # Render the application in the browser"},{"prompt":"Edit the given Python code to make it work for a list of dictionaries. list_data = [{'id': 1, 'name': 'Tom'}, {'id': 2, 'name': 'Bob'}] for element in list_data: print(element)","completion":"list_data = [{'id': 1, 'name': 'Tom'}, {'id': 2, 'name': 'Bob'}] for element in list_data: print(element['name'])"},{"prompt":"Create a python program to classify the type of a triangle based on the side lengths.","completion":"def get_triangle_type(a, b, c): if a == b and b == c: return \\"Equilateral\\" elif a == b or b == c or c == a: return \\"Isosceles\\" else: return \\"Scalene\\""},{"prompt":"Create a Python program to parse csv data and convert it into a list of dictionaries. No input.","completion":"import csv # Initialize empty list data = [] # Open csv file with open('data.csv', 'r') as csv_file: # Parse csv file csv_reader = csv.reader(csv_file) # Iterate over rows for row in csv_reader: # Convert each row into a dictionary row_dict = { 'name': row[0], 'age': row[1], 'location': row[2] } # Append dictionary to data list data.append(row_dict) # Display output print(data)"},{"prompt":"Develop a function in Python that takes an integer as an argument and prints the factorial of the number.","completion":"def factorial(n): \\"\\"\\"Computes the factorial of a number Parameters ---------- n : int The number Returns ------- factorial : int The factorial of the number \\"\\"\\" if n < 0: return 0 elif n == 0 or n == 1: return 1 else: factorial = 1 for i in range(2,n + 1): factorial = factorial * i return factorial"},{"prompt":"Generate a Python script for calculating the GCD and LCM of two numbers","completion":"# Function to calculate GCD and LCM of two numbers def gcd_lcm(a, b): if a > b: small = b else: small = a for i in range(1, small+1): if((a % i == 0) and (b % i == 0)): gcd = i lcm = int(a*b)/int(gcd) return gcd, lcm # Driver Code a = 8 b = 12 gcd, lcm = gcd_lcm(a, b) print(\\"GCD:\\", gcd) print(\\"LCM:\\", lcm)"},{"prompt":"Develop a binary tree to search an element if it is present or not Input: 5","completion":"# Python program to demonstrate insert operation in binary search tree # A utility class that represents an individual node in a BST class Node: def __init__(self,key): self.left = None self.right = None self.val = key # A utility function to insert a new node with the given key def insert(root,node): if root is None: root = node else: if root.val < node.val: if root.right is None: root.right = node else: insert(root.right, node) else: if root.left is None: root.left = node else: insert(root.left, node) # A utility function to search a given key in BST def search(root,key): # Base Cases: root is null or key is present at root if root is None or root.val == key: return root # Key is greater than root's key if root.val < key: return search(root.right,key) # Key is smaller than root's key return search(root.left,key) # Driver Program r = Node(50) insert(r,Node(30)) insert(r,Node(20)) insert(r,Node(40)) insert(r,Node(70)) insert(r,Node(60)) insert(r,Node(80)) # Print inoder traversal of the BST res = search(r,5) if res is not None: print (\\"Key is present\\") else: print (\\"Key is not present\\")"},{"prompt":"The given code contains functions to extract features from images and detect cars in a video using a linear support vector machine (SVM) classifier. To use this code, you need to provide a list of vehicle and nonvehicle images, and then call the \`extract_features\` function to extract features from these images. After that, you can train a linear SVM classifier using the extracted features and labels. Once the classifier is trained, you can use the \`process_image\` function to detect cars in a video. The output video will be saved in the specified location.","completion":"import matplotlib.image as mpimg import matplotlib.pyplot as plt import numpy as np import cv2 import glob from skimage.feature import hog from skimage import color, exposure import random from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.svm import LinearSVC import time from moviepy.editor import VideoFileClip from scipy.ndimage.measurements import label from IPython.display import HTML def load_data(my_list): new_list = [] for image in my_list: img = cv2.imread(image) img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) new_list.append(img) return new_list # Define a function to return HOG features and visualization def get_hog_features(img, orient, pix_per_cell, cell_per_block, vis=False, feature_vec=True): if vis == True: features, hog_image = hog(img, orientations=orient, pixels_per_cell=(pix_per_cell, pix_per_cell), cells_per_block=(cell_per_block, cell_per_block), transform_sqrt=False, visualise=True, feature_vector=False) return features, hog_image else: features = hog(img, orientations=orient, pixels_per_cell=(pix_per_cell, pix_per_cell), cells_per_block=(cell_per_block, cell_per_block), transform_sqrt=False, visualise=False, feature_vector=feature_vec) return features def bin_spatial(img, size=(32, 32)): color1 = cv2.resize(img[:,:,0], size).ravel() color2 = cv2.resize(img[:,:,1], size).ravel() color3 = cv2.resize(img[:,:,2], size).ravel() return np.hstack((color1, color2, color3)) def color_hist(img, nbins=32): #bins_range=(0, 256) # Compute the histogram of the color channels separately channel1_hist = np.histogram(img[:,:,0], bins=nbins) channel2_hist = np.histogram(img[:,:,1], bins=nbins) channel3_hist = np.histogram(img[:,:,2], bins=nbins) # Concatenate the histograms into a single feature vector hist_features = np.concatenate((channel1_hist[0], channel2_hist[0], channel3_hist[0])) # Return the individual histograms, bin_centers and feature vector return hist_features # Define a function to extract features from a list of images # Have this function call bin_spatial() and color_hist() def extract_features(imgs, color_space='RGB', spatial_size=(32, 32), hist_bins=32, orient=9, pix_per_cell=8, cell_per_block=2, hog_channel=0, spatial_feat=True, hist_feat=True, hog_feat=True): # Create a list to append feature vectors to features = [] # Iterate through the list of images for image in imgs: file_features = [] # Read in each one by one #image = mpimg.imread(file) # apply color conversion if other than 'RGB' if color_space != 'RGB': if color_space == 'HSV': feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HSV) elif color_space == 'LUV': feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2LUV) elif color_space == 'HLS': feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2HLS) elif color_space == 'YUV': feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YUV) elif color_space == 'YCrCb': feature_image = cv2.cvtColor(image, cv2.COLOR_RGB2YCrCb) else: feature_image = np.copy(image) if spatial_feat == True: spatial_features = bin_spatial(feature_image, size=spatial_size) file_features.append(spatial_features) if hist_feat == True: # Apply color_hist() hist_features = color_hist(feature_image, nbins=hist_bins) file_features.append(hist_features) if hog_feat == True: # Call get_hog_features() with vis=False, feature_vec=True if hog_channel == 'ALL': hog_features = [] for channel in range(feature_image.shape[2]): hog_features.append(get_hog_features(feature_image[:,:,channel], orient, pix_per_cell, cell_per_block, vis=False, feature_vec=True)) hog_features = np.ravel(hog_features) else: hog_features = get_hog_features(feature_image[:,:,hog_channel], orient, pix_per_cell, cell_per_block, vis=False, feature_vec=True) # Append the new feature vector to the features list file_features.append(hog_features) features.append(np.concatenate(file_features)) # Return list of feature vectors return features def add_heat(heatmap, bbox_list): # Iterate through list of bboxes for box in bbox_list: # Add += 1 for all pixels inside each bbox # Assuming each \\"box\\" takes the form ((x1, y1), (x2, y2)) heatmap[box[0][1]:box[1][1], box[0][0]:box[1][0]] += 1 # Return updated heatmap return heatmap def apply_threshold(heatmap, threshold): # Zero out pixels below the threshold heatmap[heatmap <= threshold] = 0 # Return thresholded map return heatmap def draw_labeled_bboxes(img, labels): # Iterate through all detected cars for car_number in range(1, labels[1]+1): # Find pixels with each car_number label value nonzero = (labels[0] == car_number).nonzero() # Identify x and y values of those pixels nonzeroy = np.array(nonzero[0]) nonzerox = np.array(nonzero[1]) # Define a bounding box based on min/max x and y bbox = ((np.min(nonzerox), np.min(nonzeroy)), (np.max(nonzerox), np.max(nonzeroy))) # Draw the box on the image cv2.rectangle(img, bbox[0], bbox[1], (0,0,255), 6) # Return the image return img img_boxes = [] def convert_color(img, conv='RGB2YCrCb'): if conv == 'RGB2YCrCb': return cv2.cvtColor(img, cv2.COLOR_RGB2YCrCb) if conv == 'BGR2YCrCb': return cv2.cvtColor(img, cv2.COLOR_BGR2YCrCb) if conv == 'RGB2LUV': return cv2.cvtColor(img, cv2.COLOR_RGB2LUV) # Define a single function that can extract features using hog sub-sampling and make predictions def find_cars(img, ystart, ystop, scale, svc, X_scaler, orient, pix_per_cell, cell_per_block, spatial_size, hist_bins): draw_img = np.copy(img) #img = img.astype(np.float32)/255 heat_map = np.zeros_like(img[:,:,0]).astype(np.float) img_tosearch = img[ystart:ystop,:,:] ctrans_tosearch = convert_color(img_tosearch, conv='RGB2YCrCb') if scale != 1: imshape = ctrans_tosearch.shape ctrans_tosearch = cv2.resize(ctrans_tosearch, (np.int(imshape[1]/scale), np.int(imshape[0]/scale))) ch1 = ctrans_tosearch[:,:,0] ch2 = ctrans_tosearch[:,:,1] ch3 = ctrans_tosearch[:,:,2] # Define blocks and steps as above nxblocks = (ch1.shape[1] // pix_per_cell) - cell_per_block + 1 nyblocks = (ch1.shape[0] // pix_per_cell) - cell_per_block + 1 nfeat_per_block = orient*cell_per_block**2 # 64 was the orginal sampling rate, with 8 cells and 8 pix per cell window = 64 nblocks_per_window = (window // pix_per_cell) - cell_per_block + 1 cells_per_step = 2 # Instead of overlap, define how many cells to step nxsteps = (nxblocks - nblocks_per_window) // cells_per_step + 1 nysteps = (nyblocks - nblocks_per_window) // cells_per_step + 1 # Compute individual channel HOG features for the entire image hog1 = get_hog_features(ch1, orient, pix_per_cell, cell_per_block, feature_vec=False) hog2 = get_hog_features(ch2, orient, pix_per_cell, cell_per_block, feature_vec=False) hog3 = get_hog_features(ch3, orient, pix_per_cell, cell_per_block, feature_vec=False) for xb in range(nxsteps): for yb in range(nysteps): ypos = yb*cells_per_step xpos = xb*cells_per_step # Extract HOG for this patch hog_feat1 = hog1[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel() hog_feat2 = hog2[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel() hog_feat3 = hog3[ypos:ypos+nblocks_per_window, xpos:xpos+nblocks_per_window].ravel() hog_features = np.hstack((hog_feat1, hog_feat2, hog_feat3)) xleft = xpos*pix_per_cell ytop = ypos*pix_per_cell # Extract the image patch subimg = cv2.resize(ctrans_tosearch[ytop:ytop+window, xleft:xleft+window], (64,64)) # Get color features spatial_features = bin_spatial(subimg, size=spatial_size) hist_features = color_hist(subimg, nbins=hist_bins) # Scale features and make a prediction test_features = X_scaler.transform(np.hstack((spatial_features, hist_features, hog_features)).reshape(1, -1)) #test_features = X_scaler.transform(np.hstack((shape_feat, hist_feat)).reshape(1, -1)) test_prediction = svc.predict(test_features) if test_prediction == 1: xbox_left = np.int(xleft*scale) ytop_draw = np.int(ytop*scale) win_draw = np.int(window*scale) cv2.rectangle(draw_img,(xbox_left, ytop_draw+ystart),(xbox_left+win_draw,ytop_draw+win_draw+ystart),(0,0,255),6) img_boxes.append(((xbox_left, ytop_draw+ystart),(xbox_left+win_draw, ytop_draw+win_draw+ystart))) heat_map[ytop_draw+ystart:ytop_draw+win_draw+ystart, xbox_left:xbox_left+win_draw] +=1 return draw_img, heat_map def process_image(img): # Find final boxes from heatmap using label function out_img, heatmap = find_cars(img, ystart=YSTART, ystop=YSTOP, scale=SCALE, svc = SVC, X_scaler = X_scaler, orient= ORIENTATION, pix_per_cell = PIX_PER_CELL, cell_per_block= CELL_PER_BLOCK, spatial_size = SPATIAL_SIZE, hist_bins = HIST_BINS) labels = label(heatmap) draw_img = draw_labeled_bboxes(np.copy(img), labels) return draw_img if __name__ == \\"__main__\\": vehicles_images = glob.glob('../../../vehicles/vehicles/*/*.png') non_vehicles_images = glob.glob('../../../non-vehicles/non-vehicles/*/*.png') cars = load_data(vehicles_images) non_cars = load_data(non_vehicles_images) \\"\\"\\"Parameters\\"\\"\\" COLOR_SPACE = 'YCrCb' # Can be RGB, HSV, LUV, HLS, YUV, YCrCb ORIENTATION = 9 # HOG orientations PIX_PER_CELL = 8 # HOG pixels per cell CELL_PER_BLOCK = 2 # HOG cells per block HOG_CHANNEL = \\"ALL\\" # Can be 0, 1, 2, or \\"ALL\\" SPATIAL_SIZE = (16, 16) # Spatial binning dimensions HIST_BINS = 16 # Number of histogram bins IS_SPATIAL_FEAT = True # Spatial features on or off IS_HIST_FEAT = True # Histogram features on or off IS_HOG_FEAT = True # HOG features on or off t=time.time() car_features = extract_features(cars, color_space = COLOR_SPACE, spatial_size= SPATIAL_SIZE, hist_bins = HIST_BINS, orient = ORIENTATION, pix_per_cell = PIX_PER_CELL, cell_per_block = CELL_PER_BLOCK, hog_channel = HOG_CHANNEL, spatial_feat = IS_SPATIAL_FEAT , hist_feat = IS_HIST_FEAT, hog_feat = IS_HOG_FEAT) notcar_features = extract_features(non_cars, color_space = COLOR_SPACE, spatial_size= SPATIAL_SIZE, hist_bins = HIST_BINS, orient = ORIENTATION, pix_per_cell = PIX_PER_CELL, cell_per_block = CELL_PER_BLOCK, hog_channel = HOG_CHANNEL, spatial_feat = IS_SPATIAL_FEAT , hist_feat = IS_HIST_FEAT, hog_feat = IS_HOG_FEAT) print(time.time()-t, 'Seconds to compute features...') X = np.vstack((car_features, notcar_features)).astype(np.float64) # Fit a per-column scaler X_scaler = StandardScaler().fit(X) # Apply the scaler to X scaled_X = X_scaler.transform(X) # Define the labels vector y = np.hstack((np.ones(len(car_features)), np.zeros(len(notcar_features)))) # Split up data into randomized training and test sets rand_state = np.random.randint(0, 100) X_train, X_test, y_train, y_test = train_test_split(scaled_X, y, test_size=0.2, random_state=rand_state) print('Using:',orient,'orientations',pix_per_cell,'pixels per cell and', cell_per_block,'cells per block') print('Feature vector length:', len(X_train[0])) # Use a linear SVC SVC = LinearSVC() # Check the training time for the SVC SVC.fit(X_train, y_train) t2 = time.time() print(round(t2-t, 2), 'Seconds to train SVC...') # Check the score of the SVC print('Test Accuracy of SVC = ', round(SVC.score(X_test, y_test), 4)) clip1 = VideoFileClip('../project_video.mp4') video_clip = clip1.fl_image(process_image) #NOTE: this function expects color images!! video_output = '../output_videos/project_video.mp4'"},{"prompt":"Write a Python program that calculates the sum of all odd numbers between two numbers. 5 10","completion":"# function to calculate the sum of all odd numbers def sum_odd_numbers(start, end): # initialize the sum sum = 0 # loop through all numbers from start to end for i in range(start, end+1): # check if the number is odd if i % 2 != 0: # add the odd number to sum sum += i # return the sum return sum # main function def main(): # input the boundaries start, end = [int(x) for x in input(\\"Enter start and end: \\").split()] # calculate the sum of all odd numbers sum = sum_odd_numbers(start, end) # print the result print(\\"Sum of all odd numbers between %d and %d = %d\\" % (start, end, sum)) # invoke main function if __name__ == \\"__main__\\": main()"},{"prompt":"mplement a search algorithm in Python that finds a given element in an array. [2, 4, 6, 3, 1], target 4","completion":"def search(array, target): for i in range(len(array)): if array[i] == target: return i return -1 array = [2, 4, 6, 3, 1] target = 4 result = search(array, target) if result != -1: print(\\"Element found at index \\" + str(result)) else: print(\\"Element not found\\")"},{"prompt":"Generate a class in Python that creates a fraction object and adds two fraction objects","completion":"\\"\\"\\" Generate a class in Python that creates a fraction object and adds two fraction objects \\"\\"\\" class Fraction: def __init__(self, numerator, denominator): self.numerator = numerator self.denominator = denominator def __add__(self, other): numerator = self.numerator * other.denominator + other.numerator * self.denominator denominator = self.denominator * other.denominator return Fraction(numerator, denominator) if __name__ == '__main__': f1 = Fraction(1, 2) f2 = Fraction(3, 5) f3 = f1 + f2 print(f3.numerator, f3.denominator)"},{"prompt":"a Python list, swap the items at index 3 and 4. List: [10, 20, 30, 40, 50]","completion":"def swap(arr, idx1, idx2): arr[idx1], arr[idx2] = arr[idx2], arr[idx1] arr = [10, 20, 30, 40, 50] swap(arr, 3, 4) print(arr)"},{"prompt":"Develop a Python script that can automate the task of fetching the titles of 500 web pages. List of 500 URL","completion":"import requests from bs4 import BeautifulSoup # store URLs in a list urls = [500 URLs] titles = [] for url in urls: response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') title = soup.find('title') if title: titles.append(title.get_text()) else: titles.append('[No title]') # print results for i, title in enumerate(titles): print(f'{i + 1}: {title}')"},{"prompt":"dentify the most used programming language in the following data. Java: 30%, Python: 40%, C++: 20%, JavaScript: 10%","completion":"most_used_language = \\"Python\\""},{"prompt":"Generate a string of random characters in Python. The length of the string should be determined by a parameter. length = 20","completion":"import string import random def generate_random_string(length): return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length)) length = 20 print(generate_random_string(length))"},{"prompt":"Write a Python program to query data from a PostgreSQL database.","completion":"import psycopg2 # Connect to the PostgreSQL database db_conn = psycopg2.connect( user=\\"<USER>\\", password=\\"<PASSWORD>\\", host=\\"localhost\\", port=\\"5432\\" ) # Create a cursor object cur = db_conn.cursor() # Execute a query cur.execute(\\"SELECT * FROM table_name\\") # Fetch the results rows = cur.fetchall() # Iterate through the results for row in rows: print(row)"},{"prompt":"Design a Python script to output all values in a given list that are factors of a given integer. list = [1, 2, 3, 4, 5, 6] integer = 6","completion":"def factors(list,integer): factors_list = [] for num in list: if integer % num == 0: factors_list.append(num) return factors_list print(factors([1,2,3,4,5,6], 6)) # [1, 2, 3, 6]"},{"prompt":"Create a script in Python to download the content of a webpage with a given URL. URL: https://github.com","completion":"import requests url = \\"https://github.com\\" response = requests.get(url) with open('webpage.txt', 'w') as file: file.write(response.text)"},{"prompt":"Write a Python program to check if a number is a palindrome.","completion":"def is_palindrome(num): temp = num rev = 0 while (temp > 0): dig = temp % 10 rev = rev * 10 + dig temp = temp // 10 if (num == rev): return True else: return False"},{"prompt":"Create a python program that clean up the given text. Hello t world!","completion":"def clean_text(text): return text.replace(\\"t\\", \\"\\").strip()"},{"prompt":"Create a loop in Python that prints out a list of numbers from 1 to 10 multiplied by 3.","completion":"for i in range(1, 11): print(i * 3)"},{"prompt":"Edit a Python program to calculate the product of two numbers. def product(num1, num2): return 0","completion":"def product(num1, num2): return num1 * num2"},{"prompt":"Optimize this Python function to improve its running time. def find_duplicates(a): result = [] for i in range(len(a)): for j in range(i + 1, len(a)): if a[i] == a[j]: result.append(a[i]) return resul","completion":"def find_duplicates(a): seen = set() result = [] for num in a: if num in seen: result.append(num) else: seen.add(num) return result"},{"prompt":"Create a web scraper in Python to extract the titles of all articles from Medium. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Make a request url = 'https://medium.com/' response = requests.get(url) html = response.text # Parse HTML soup = BeautifulSoup(html, 'html5lib') # Extract all the titles of the articles titles = soup.find_all('h3', class_='graf--title') # Print the titles for title in titles: print(title.text)"},{"prompt":"Create a Python program that takes a positive integer as input and returns the Fibonacci sequence up to the given number. 10","completion":"def fibonacci(n): fib = [0, 1] for i in range(2,n): fib.append(fib[i-2] + fib[i-1]) return fib[:n] fibonacciSequence = fibonacci(10) print(fibonacciSequence)"},{"prompt":"Create a Python 3 class called 'Bicycle' which has two attributes: 'brand' and 'colour'.","completion":"class Bicycle(): def __init__(self, brand, colour): self.brand = brand self.colour = colour"},{"prompt":"Create a graphical representation of a given string using Python. Hello World!","completion":"import matplotlib.pyplot as plt # initializing string string = \\"Hello World!\\" # declaring x, yaxis X = range(len(string)) Y = [ord(i) for i in string] # making a graph plt.plot(X, Y) plt.title('Graphical representation of String : ' + string) plt.show()"},{"prompt":"Translate this code from JavaScript to Python const helloWorld = () => console.log(Hello World!)","completion":"def hello_world(): print(\\"Hello World!\\")"},{"prompt":"Create a Python program to convert a list of characters into a string Convert this array ['a', 'b', 'c'] into a string","completion":"def list_to_str(arr): str = \\"\\" for i in arr: str += i return str arr = ['a', 'b', 'c'] result = list_to_str(arr) print(result)"},{"prompt":"Create a Python function to count the number of strings that contain the substring cat. [cat keeper, cat lover, lizard wrangler, cat wrangler]","completion":"def count_substring_cat(string_list): count = 0 for string in string_list: if \\"cat\\" in string: count += 1 return count string_list = [\\"cat keeper\\", \\"cat lover\\", \\"lizard wrangler\\", \\"cat wrangler\\"] result = count_substring_cat(string_list) print(result)"},{"prompt":"Rewrite the existing code to edit the contents of an existing Python dictionary. language_dict = { 'English': 'Hello', 'Spanish': 'Hola', 'Japanese': 'Konnichiwa' }","completion":"language_dict = { 'English': 'Hi', 'Spanish': 'Hola', 'Japanese': 'Konnichiwa' } def edit_dict(dictionary, key, value): dictionary[key] = value"},{"prompt":"Given a list of numbers, write a program in Python to create two new lists, one that contains even numbers and one that contains odd numbers. Input: [1, 2, 3, 4, 5, 6, 7, 8]","completion":"def even_odd_lists(list_input): even_list = [] odd_list = [] for element in list_input: if element % 2 == 0: even_list.append(element) else: odd_list.append(element) print(\\"Even list:\\", even_list) print(\\"Odd list:\\", odd_list) list_input = [1, 2, 3, 4, 5, 6, 7, 8] even_odd_lists(list_input)"},{"prompt":"Create a program in Python that has the following purpose: To determine if a given string is a palindrome radar","completion":"def check_palindrome(inputStr): revStr = reversed(inputStr) if list(inputStr) == list(revStr): return True else: return False userInput = \\"radar\\" if(check_palindrome(userInput)): print(\\"Yes\\") else: print(\\"No\\")"},{"prompt":"Create a Python script to normalize numerical data. The script should take a list of numbers as an input, and returns a normalized list of numbers. [1, 2, 7, 5, 2]","completion":"import numpy as np def normalize(data): return np.divide(data, np.linalg.norm(data)) data = [1, -2, 7, 5, 2] print(normalize(data)) # Output [ 0.1245256 -0.2490512 0.8736233 0.6207616 0.2490512]"},{"prompt":"Create a code snippet in Python to find the missing number in an array of length n1 when all numbers from 1 to n are present. [7, 5, 6, 4, 2]","completion":"def missing_number(nums): full_list = list(range(1,len(nums)+1)) return (set(full_list) - set(nums)).pop() nums = [7, 5, 6, 4, 2] result = missing_number(nums) print('Missing number is', result)"},{"prompt":"Create an optimization algorithm in Python to calculate the minimum distance between two points.","completion":"def distance(x1, y1, x2, y2): return ((x2 - x1)**2 + (y2 - y1)**2)**0.5 def get_minimum_distance(points): min_dist = sys.maxsize for i in range(len(points)): for j in range(i+1,len(points)): dist = distance(points[i][0], points[i][1], points[j][0], points[j][1]) if dist < min_dist: min_dist = dist return min_dist"},{"prompt":"Create a Python program to split a string in the match of a regular expression and return a list of the split strings. string = 102030abc5060","completion":"import re string = \\"102030-abc-5060\\" pattern = r'-w+-' result = re.split(pattern, string) print(result) # Output -> ['102030', '5060']"},{"prompt":"Create a python function that reads commaseparated values to generate a dataframe. Name, Age, City Jane, 36, London John, 24, Par","completion":"def csv_to_df(csv): # Create an empty list df = [] # Add each row as a list lines = csv.split(\\"n\\") for line in lines: df.append(line.split(\\",\\")) # Convert list into a DataFrame import pandas as pd df = pd.DataFrame(df[1:], columns=df[0]) return df"},{"prompt":"Make a program in Python to find the most frequently visited page in a given dataset logs = ['/index.php', '/home.php', '/about.php', '/contact.php', '/index.php']","completion":"def most_visited_page(logs): # Initiliaze a dictionary to store counts pages = {} # Iterate through the logs and count the number of visits for page in logs: if page in pages: pages[page] += 1 else: pages[page] = 1 # Find the page with the highest number of visits top_page = '' max_visits = 0 for page, count in pages.items(): if count > max_visits: top_page = page max_visits = count # Return the page with the highest number of visits return top_page"},{"prompt":"Create a Python function that takes a string and returns the longest prefix that is a palindrome. The input string is abca.","completion":"def longest_prefix_palindrome(s): if len(s) <= 1: return s max_length = 0 for i in range(1,len(s)): if s[:i] == s[i-1::-1]: max_length = i return s[:max_length] print(longest_prefix_palindrome(\\"abca\\"))"},{"prompt":"Replicate an existing 3D plotting library in Python. The 3D plotting library consists of three functions, Plot3D, MeshGrid and Show.","completion":"def Plot3D(x, y, z): fig = plt.figure() ax = plt.axes(projection =\\"3d\\") ax.plot3D(x, y, z) def MeshGrid(x, y, z): fig = plt.figure() ax = plt.axes(projection =\\"3d\\") ax.plot_surface(X, Y, Z) def Show(): plt.show()"},{"prompt":"Develop an algorithm in Python that takes an array of integers and finds two numbers whose sum is the given target. The array : [1, 3, 5, 7, 9] The target : 12","completion":"def two_sum(arr, target): for num1 in arr: for num2 in arr: if num1 + num2 == target: return (num1, num2) result = two_sum([1, 3, 5, 7, 9], 12) print(result) # Output -> (5, 7)"},{"prompt":"Generate a Python script that sorts a given array of integers. Array: <10, 8, 1, 4, 6, 5>","completion":"def array_sort(array): # Iterate over the array for i in range(len(array)): # Find the minimum element min_position = i for j in range(i + 1, len(array)): if array[min_position] > array[j]: min_position = j # Swap minimum element to current position array[i], array[min_position] = array[min_position], array[i] return array"},{"prompt":"Design a function in Python to find the longest substring that is a palindrome within a given string. str = abracadabra","completion":"def longestPalindrome(str): length = len(str) max_length = 0 start = 0 # check all possible substrings for i in range(length): for j in range(i, length): # find longest palindrome with center i, j if str[i] == str[j] and isPalindrome(str, i, j): if (j - i + 1) > max_length: max_length = j - i + 1 start = i return str[start:start + max_length] def isPalindrome(str, left, right): # check palindrome while left < right: if str[left] != str[right]: return False left += 1 right -= 1 return True # Driver code str = \\"abracadabra\\" print(longestPalindrome(str))"},{"prompt":"Create a Python script that creates random numbers in the range of 020 and displays the result.","completion":"import random def generateRandomNumbers(): randomNumbers = [] for i in range(0, 20): randomNumbers.append(random.randint(0, 20)) return randomNumbers print(generateRandomNumbers())"},{"prompt":"Create a Python class for a basic calculator that performs addition and subtraction. Not applicable","completion":"class Calculator: def __init__(self): pass def add(self, a, b): return a + b def subtract(self, a, b): return a - b calc = Calculator() print(calc.add(10, 5)) # 15 print(calc.subtract(10, 5)) # 5"},{"prompt":"Build a python program to convert any currency to a different currency given its exchange rate Input Currency = USD Output Currency = EUR Exchange Rate = 0.83","completion":"def currency_converter(input_currency, output_currency, exchange_rate): amount = float(input('Enter the amount to convert: ')) total_amount = amount * exchange_rate print('{} {} = {} {}'.format(amount, input_currency, total_amount, output_currency))"},{"prompt":"Create a function in Python which finds the minimum of the list of given numbers. [2, 4, 6, 3, 5, 8]","completion":"def min_list(list1): min_value = min(list1) return min_value"},{"prompt":"Create a chatbot in Python for customer service.","completion":"import nltk from nltk.stem import WordNetLemmatizer from nltk.corpus import wordnet # Define a function to get the simple POS tag def get_simple_pos(tag): if tag.startswith('J'): return wordnet.ADJ elif tag.startswith('V'): return wordnet.VERB elif tag.startswith('N'): return wordnet.NOUN elif tag.startswith('R'): return wordnet.ADV else: return wordnet.NOUN # Create a lemmatizer object lemmatizer = WordNetLemmatizer() def lemmatize_sentence(sentence): #tokenize the sentence and find the POS tag for each token nltk_tagged = nltk.pos_tag(nltk.word_tokenize(sentence)) #tuple of (token, simple POS tag) nltk_tagged = [(word, get_simple_pos(tag)) for word, tag in nltk_tagged] lemmatized_sentence = [] for word, tag in nltk_tagged: lemmatized_sentence.append(lemmatizer.lemmatize(word, tag)) return \\" \\".join(lemmatized_sentence) # Create the chatbot def create_bot(): print(\\"Hello! I am a customer service chatbot. How can I help you?\\") response = input() response = lemmatize_sentence(response) # Perform actions based on the response if response == \\"quit\\": return else: print(\\"Thank you for your question. I will get back to you shortly with an answer.\\") create_bot() create_bot()"},{"prompt":"Create a Python algorithm to find the fifth element from the end of a singly linked list. 1 > 2 > 3 > 4 > 5 > 6 > 7","completion":"class Node: def __init__(self, data): self.data = data self.next = None def find_fifth_from_end(self): if self is None: return None curr = self prev = self count = 0 while curr.next is not None: count += 1 if count >= 5: prev = prev.next curr = curr.next if count < 5: return None else: return prev.data # Example n1 = Node(1) n2 = Node(2) n3 = Node(3) n4 = Node(4) n5 = Node(5) n6 = Node(6) n7 = Node(7) # Linked list setup n1.next = n2 n2.next = n3 n3.next = n4 n4.next = n5 n5.next = n6 n6.next = n7 # Find 4th element from the end print(n1.find_fifth_from_end())"},{"prompt":"Design a program in Python to print the Fibonacci sequence.","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(9))"},{"prompt":"Rewrite the following code using reduce() method in Python def sum(x, y): return x + y list = [1, 2, 3, 4]","completion":"from functools import reduce result = reduce(lambda x,y: x+y, list) print(result) # 10"},{"prompt":"Build a web application for tracking the stock market.","completion":"# HTML <form action=\\"\\"> <input type=\\"text\\" name=\\"stockSymbol\\" placeholder=\\"Enter a stock symbol\\"> <input type=\\"submit\\"> </form> # JavaScript function trackStock() { var stockSymbol = document.querySelector(\\"input[name=stockSymbol]\\").value; // code to fetch stock quote and display it } # Python def getStockQuotes(stockSymbol): # code to fetch stock quote using an API return stockQuote"},{"prompt":"Write a function in Python to evaluate an expression given in the form of a string.","completion":"def evaluate(expression): return eval(expression)"},{"prompt":"Suggest a completion for the following python funtion which calculates the sum of two numbers. def sum_of_nums(num1, num2)","completion":"def sum_of_nums(num1, num2): return num1 + num2 example_sum = sum_of_nums(2, 3) print(\\"Sum of two numbers is:\\", example_sum)"},{"prompt":"Generate a RESTful API in Python which allows users to register, log in/out, and update user profiles. Not applicable","completion":"import os import uuid import datetime from flask import Flask, jsonify, request from flask_sqlalchemy import SQLAlchemy import jwt from werkzeug.security import generate_password_hash, check_password_hash app = Flask(__name__) # SQLAlchemy Configuration # FIXME: Replace with database URI app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' app.config['SECRET_KEY'] = 'secret-key' app.config['JWT_SECRET_KEY'] = 'jwt-secret-key' db = SQLAlchemy(app) # Flask-JWT-Extended Configuration app.config['JWT_ACCESS_TOKEN_EXPIRES'] = datetime.timedelta(days=1) app.config['JWT_REFRESH_TOKEN_EXPIRES'] = datetime.timedelta(days=30) # User Model class User(db.Model): id = db.Column(db.Integer, primary_key=True) public_id = db.Column(db.String(50), unique=True) username = db.Column(db.String(100), unique=True) password = db.Column(db.String(255)) first_name = db.Column(db.String(100)) last_name = db.Column(db.String(100)) @app.route('/register', methods=['POST']) def register(): data = request.get_json() # User already exists user = User.query.filter_by(username=data['username']).first() if user: return jsonify({'message': 'User already exists!'}), 400 public_id = str(uuid.uuid4()) hashed_password = generate_password_hash(data['password'], method='sha256') user = User(public_id=public_id, username=data['username'], password=hashed_password, first_name=data['first_name'], last_name=data['last_name']) db.session.add(user) db.session.commit() return jsonify({'public_id': public_id }), 201 @app.route('/login', methods=['POST']) def login(): data = request.get_json() user = User.query.filter_by(username=data['username']).first() if not user or not check_password_hash(user.password, data['password']): return jsonify({'message': 'Invalid credentials!'}), 400 # JWT Token access_token = jwt.encode({'public_id': user.public_id, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30), }, app.config['JWT_SECRET_KEY']) refresh_token = jwt.encode({'public_id': user.public_id, 'exp': datetime.datetime.utcnow() + datetime.timedelta(days=30), }, app.config['JWT_SECRET_KEY']) return jsonify({'access_token': access_token.decode('UTF-8'), 'refresh_token': refresh_token.decode('UTF-8') }), 200 @app.route('/update_profile', methods=['POST']) def update_profile(): data = request.get_json() public_id = jwt.decode(data['access_token'], app.config['JWT_SECRET_KEY'])['public_id'] user = User.query.filter_by(public_id=public_id).first() user.first_name = data['first_name'] user.last_name = data['last_name'] db.session.commit() return jsonify({'message': 'Profile updated'}) if __name__ == '__main__': db.create_all() port = int(os.environ.get('PORT', 5000)) app.run(host='0.0.0.0', port=port)"},{"prompt":"Create a Python algorithm to calculate the target sums of all elements in a given list with a given value subtrahend: 10 list: [4, 3, 8, 6, 5]","completion":"def target_sum(subtrahend, lst): target_sums = [] for num in lst: target_sums.append(subtrahend - num) return target_sums"},{"prompt":"Create a python web scraper that extracts the title and text of a web page and stores it in a dataframe. Not applicable","completion":"import requests from bs4 import BeautifulSoup import pandas as pd def scrape_page(url): # make a request to the page and get the HTHML content r = requests.get(url) content = r.content # parse the HTML content with Beatiful Soup soup = BeautifulSoup(content, 'html.parser') # extract the title and text title = soup.title.string paragraphs = soup.find_all('p') text = ' '.join([paragraph.get_text() for paragraph in paragraphs]) # store the data an a dictionary data = { 'title': title, 'text': text } return data # define the URL url = 'https://example.com' # scrape the page data = scrape_page(url) # print the data print(data) # store the data in a dataframe df = pd.DataFrame([data]) df.head()"},{"prompt":"w would you optimize the following Python code? def factorial(n): if n == 0: return 1 else: return n * factorial(n 1)","completion":"def factorial(n): if n == 0: return 1 else: # Use dynamic programming # to store the intermediate results memory = {} if n in memory: return memory[n] else: memory[n] = n * factorial(n - 1) return memory[n]"},{"prompt":"mplment the quicksort algorithm in Python","completion":"def quicksort(nums): '''This function implements the quicksort algorithm in Python.''' if len(nums) <= 1: return nums pivot = nums[len(nums) // 2] left = [x for x in nums if x < pivot] middle = [x for x in nums if x == pivot] right = [x for x in nums if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"prompt":"Write a Python program to create a webscraper for pricing and availability of products from Amazon. Not applicable","completion":"import requests from bs4 import BeautifulSoup from urllib.parse import urljoin def scrape(url): # Fetch the homepage response = requests.get(url) # Parse the page soup = BeautifulSoup(response.text, \\"html.parser\\") # Iterate over the products for card in soup.find_all(\\"div\\", { \\"class\\": \\"s-include-content-margin s-border-bottom\\" }): # Get the link and price link = card.find(\\"a\\", { \\"class\\": \\"a-link-normal a-text-normal\\" }) price = card.find(\\"span\\", { \\"class\\": \\"a-offscreen\\" }) # Get the actual page response = requests.get(urljoin(url, link[\\"href\\"])) # Parse the page soup = BeautifulSoup(response.text, \\"html.parser\\") # Check the availability availability = soup.find(\\"div\\", { \\"id\\": \\"availability\\" }) availability_text = availability.find(\\"span\\").string print(f\\"Link: {link['href']}\\") print(f\\"Price: {price.string}\\") print(f\\"Availability: {availability_text}\\") print() # Execute the function scrape(\\"https://www.amazon.com/s?k=laptops&ref=nb_sb_noss_2\\")"},{"prompt":"Create a program in Python to find the sum of all even numbers between a given range.","completion":"#Input range start = int(input(\\"Enter start of range: \\")) end = int(input(\\"Enter end of range: \\")) #Initialize sum to 0 sum = 0 #Loop to find the sum of even numbers for num in range(start,end+1): if num % 2 == 0: sum += num #Print the result print(\\"Sum of even numbers between\\",start,\\"and\\",end,\\"=\\",sum)"},{"prompt":"Construct an ObjectOriented design in Python to model a Book.","completion":"class Book: def __init__(self, title, author, pages, publisher): self.title = title self.author = author self.pages = pages self.publisher = publisher def get_title(self): return self.title def get_author(self): return self.author def get_pages(self): return self.pages def get_publisher(self): return self.publisher"},{"prompt":"Write a Python program to optimize this matrix so that entries in each row and column add up to a given number. matrix = [[2, 3, 4], [5, 6, 7], [8, 9, 10]] target_sum = 18","completion":"def optimize_matrix(matrix, target_sum): row_sums = [0] * len(matrix) col_sums = [0] * len(matrix[0]) # Calculate the sum of each row and column for row in range(len(matrix)): for col in range(len(matrix[0])): row_sums[row] += matrix[row][col] col_sums[col] += matrix[row][col] # Check if the matrix can be optimized if min(row_sums) + min(col_sums) > target_sum or max(row_sums) + max(col_sums) < target_sum: return \\"Can't optimize\\" else: # Bring the matrix closer to the target sum by subtracting or # adding an amount from each row and column for row in range(len(matrix)): for col in range(len(matrix[0])): matrix[row][col] += (target_sum - (row_sums[row] + col_sums[col])) // 2 return matrix"},{"prompt":"Write a Python program to split a string on the first occurrence of a given substring. string = www.example.com substring = .","completion":"string_list = string.split(substring,1) print(string_list)"},{"prompt":"Optimize a given Python program such that it runs efficiently in fewer lines of code. def add_two_numbers(): a = 5 b = 7 sum = a + b return sum","completion":"def add_two_numbers(): return 5 + 7"},{"prompt":"Write Python code to calculate the minimum edit distance between two strings. str1 = sitting str2 = kitten","completion":"def minEditDist(str1, str2): m = len(str1) n = len(str2) # create a table for storing edit distances EditDistance = [[0 for x in range(n+1)] for x in range(m+1)] # initialize the table for i in range(m+1): for j in range(n+1): if i == 0: EditDistance[i][j] = j elif j == 0: EditDistance[i][j] = i elif str1[i-1] == str2[j-1]: EditDistance[i][j] = EditDistance[i-1][j-1] else: EditDistance[i][j] = 1 + min(EditDistance[i][j-1], EditDistance[i-1][j], EditDistance[i-1][j-1]) return EditDistance[m][n] # Driver code print(minEditDist(\\"sitting\\", \\"kitten\\"))"},{"prompt":"Generate a Python program to sort a list of strings alphabetically. ['banana', 'apple', 'orange']","completion":"def sort_strings(string_list): sorted_list = sorted(string_list) return sorted_list unsorted_list = ['banana', 'apple', 'orange'] sorted_list = sort_strings(unsorted_list) print(sorted_list)"},{"prompt":"Generate a program in Python to classify 3dimensional data points according to their classes","completion":"def classify_points(points): classes = [] for point in points: if point[0] < 0 and point[1] < 0 and point[2] < 0: classes.append(1) elif point[0] > 0 and point[1] > 0 and point[2] > 0: classes.append(2) else: classes.append(3) return classes"},{"prompt":"Build a decision tree model in Python. X = [[0, 0], [1, 1]] y = [0, 1]","completion":"# Import decision tree classifier from the sklearn library from sklearn import tree # Input data to the model X = [[0, 0], [1, 1]] y = [0, 1] # Create a decision tree classifier object clf = tree.DecisionTreeClassifier() # Train the decision tree classifier clf = clf.fit(X, y)"},{"prompt":"To run the code, provide the following arguments in the command line: <context> <target> <vocabulary> <embedding size> <dropout> <batch size> <epochs> <output model>. The code loads the vocabulary, contexts, and targets, prepares the data, and trains the neural information density model with the given parameters. The trained model is saved in the specified output model file.","completion":"#!/usr/bin/env python3 # -*- coding: utf-8 -*- from __future__ import absolute_import import numpy as np np.random.seed( 1337 ) import data_utils from nid import Neural_information_density import sys if __name__ == '__main__': if len( sys.argv ) != 9: print( \\"nUsage: \\", sys.argv[ 0 ], \\"<context> <target> <vocabulary> <embedding size> <dropout> <batch size> <epochs> <output model>n\\" ) exit() context, target, vocab, embedding, dropout, batch, epoch, out_model = sys.argv[ 1: ] embedding = np.int( embedding ) dropout = np.float( dropout ) batch = np.int( batch ) epoch = np.int( epoch ) print( \\"Loading vocabulary\\" ) vocab, max_features = data_utils.load_vocab( vocab ) print( \\"Loading contexts\\" ) context = data_utils.load_context( context ) print( \\"Loading targets\\" ) target = data_utils.load_target( target ) #, max_features ) max_length = context.shape[ 1 ] validation_size = 0.25 print( \\"Data loaded\\" ) nid = Neural_information_density( context, target, max_features, max_length, batch, validation_size ) print( \\"Data prepared\\" ) print( \\"Training\\" ) nid.train( embedding, dropout, epoch, out_model )"},{"prompt":"Create a function in Python that takes in a string and returns true if all characters in the string are unique and false if there is at least one repeated character.","completion":"def check_unique(s): seen=set() for c in s: if c in seen: return False else: seen.add(c) return True"},{"prompt":"Write a Python program to calculate the sum of all multiples of 3 and 5 up to a given number.","completion":"def sum_of_multiples_of_3_and_5(num): sum = 0 for i in range(num): if i % 3 == 0 or i % 5 == 0: sum += i return sum result = sum_of_multiples_of_3_and_5(20) print(result)"},{"prompt":"Write a Python program to sort a given list of numbers in ascending order. [3, 4, 7, 1, 6, 9, 2]","completion":"list = [3, 4, 7, 1, 6, 9, 2] list.sort() print(\\"Ascending :\\",list)"},{"prompt":"Create a Python program to calculate the intersection points between two circles. Circle 1: Center (0, 0) and Radius 3 Circle 2: Center (3, 3) and Radius 6","completion":"\\"\\"\\" Create a Python program to calculate the intersection points between two circles \\"\\"\\" import math def get_intersection(c1, c2): # Calculate center distance between two circles dist = math.sqrt((c1[0] - c2[0]) ** 2 + (c1[1] - c2[1]) ** 2) # Check if distances between centers is equal to or greater than sum of radius if dist >= (c1[2] + c2[2]): return None # Calculate the angle between two circles angle = math.acos(((c1[2] ** 2 + dist ** 2) - c2[2] ** 2) / (2 * c1[2] * dist)) # Calculates the point P on the line segment which connects both the circles centers point_p = ( c1[0] + c1[2] * math.cos(angle), c1[1] + c1[2] * math.sin(angle) ) # Calculates the distance from point P to both circles intersection points dist_2 = math.sqrt((c1[2] ** 2) - (dist ** 2)) # Calculates the intersection point intersection1 = ( point_p[0] - dist_2 * (c2[1] - c1[1]) / dist, point_p[1] + dist_2 * (c2[0] - c1[0]) / dist ) intersection2 = ( point_p[0] + dist_2 * (c2[1] - c1[1]) / dist, point_p[1] - dist_2 * (c2[0] - c1[0]) / dist ) return intersection1, intersection2 if __name__ == \\"__main__\\": c1 = (0, 0, 3) # center 1 (x, y), radius c2 = (3, 3, 6) # center 2 (x, y), radius intersection = get_intersection(c1, c2) print(\\"Intersection points: \\", intersection)"},{"prompt":"Write a Python program to calculate the number of days between two dates. Date 1: 20200102 Date 2: 20200219","completion":"def days_between_dates(date1, date2): \\"\\"\\" Calculate the number of days between two dates date1: date object date2: date object \\"\\"\\" time_diff = date2 - date1 return time_diff.days days_between_dates(date(2020,1,2), date(2020,2,19))"},{"prompt":"Write a Python program to scrape a website and find the most common words and phrases used in the content.","completion":"from bs4 import BeautifulSoup import requests import collections URL = \\"https://example.com\\" page = requests.get(URL) soup = BeautifulSoup(page.content, 'html.parser') text = soup.get_text().split() wordcount = collections.Counter(text) top_words = wordcount.most_common(10) print(top_words)"},{"prompt":"The given code provides a set of functions and classes for testing in Python. To use this code, you can import the necessary functions and classes into your Python script. To run tests, you can create instances of the TestSuiteResult class and add instances of the TestModuleResult, TestClassResult, and TestResult classes to it. You can then call the get_status() method on the TestSuiteResult instance to get the overall status of the tests. The code also provides various error classes for handling test failures and exceptions. You can use these error classes to create instances of the corresponding result classes and add them to the appropriate TestResult instance.","completion":"\\"\\"\\" Copyright (c) 2012-2013, Austin Noto-Moniz (metalnut4@netscape.net) Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \\"AS IS\\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. \\"\\"\\" from pyinq.results import * # TEST ASSERT RESULTS # LINENO = 12 CALL = \\"assert_true(True)\\" FAIL = \\"FAIL\\" TRACE = \\"TRACE\\" EXPECTED = IOError def test_Result_true(): check_Result(True) def test_Result_false(): check_Result(False) def test_AssertResult_true(): check_AssertResult(True) def test_AssertResult_false(): check_AssertResult(False) def test_AssertEqualsResult_true(): check_AssertEqualsResult(True,4,4) def test_AssertEqualsResult_false(): check_AssertEqualsResult(False,4,5) def test_AssertInResult_true(): check_AssertInResult(True,4,[1,2,4,8,16,32,64]) def test_AssertInResult_false(): check_AssertInResult(False,4,[1,1,2,3,5,8,13]) def test_AssertInstanceResult_true(): check_AssertInstanceResult(True,IOError,Exception) def test_AssertInstanceResult_false(): check_AssertInstanceResult(False,IOError,WindowsError) def test_AssertRaisesResult_true(): check_AssertRaisesResult(True,TRACE) def test_AssertRaisesResult_false(): check_AssertRaisesResult(False,\\"\\") def test_ExpectedErrorResult_true(): check_ExpectedErrorResult(True,LINENO) def test_ExpectedErrorResult_false(): check_ExpectedErrorResult(False,None) def test_FailResult(): result = FailResult(LINENO,FAIL) assert result.lineno == LINENO assert result.mess == FAIL assert result.result == False def test_AssertError(): result = AssertError(TRACE) assert result.trace == TRACE assert result.result is None # TEST RESULTS # NAME = \\"FOO\\" def test_TestResult(): test_result = TestResult(NAME) assert test_result.name == NAME assert not test_result.before assert not test_result.after def test_TestResult_true(): test_result = TestResult(NAME) test_result.extend(make_AssertResult_list(True,True,True)) assert test_result.get_status() == True def test_TestResult_false(): test_result = TestResult(NAME) test_result.extend(make_AssertResult_list(True,True,False)) assert test_result.get_status() == False def test_TestClassResult(): cls_result = TestClassResult(NAME) assert cls_result.name == NAME assert not cls_result.before assert not cls_result.after def test_TestClassResult_true(): cls_result = TestClassResult(NAME) cls_result.extend(make_TestResult_list(True,True,True)) assert cls_result.get_status() == True def test_TestClassResult_false(): cls_result = TestClassResult(NAME) cls_result.extend(make_TestResult_list(True,True,False)) assert cls_result.get_status() == False def test_TestModuleResult(): mod_result = TestModuleResult(NAME) assert mod_result.name == NAME assert not mod_result.before assert not mod_result.after def test_TestModuleResult_true(): mod_result = TestModuleResult(NAME) mod_result.extend(make_TestClassResult_list(True,True,True)) assert mod_result.get_status() == True def test_TestModuleResult_false(): mod_result = TestModuleResult(NAME) mod_result.extend(make_TestClassResult_list(True,True,False)) assert mod_result.get_status() == False def test_TestSuiteResult(): suite_result = TestSuiteResult(NAME) assert suite_result.name == NAME assert not suite_result.before assert not suite_result.after def test_TestSuiteResult_true(): suite_result = TestSuiteResult(NAME) suite_result.extend(make_TestModuleResult_list(True,True,True)) assert suite_result.get_status() == True def test_TestSuiteResult_false(): suite_result = TestModuleResult(NAME) suite_result.extend(make_TestModuleResult_list(True,True,False)) assert suite_result.get_status() == False # TEST ERRORS # def construct_call_str(name, args): arg_str = \\",\\".join([str(arg) for arg in args]) return \\"{name}({arg_str})\\".format(name=name,arg_str=arg_str) def check_PyInqError(func_name, arg_dict, error_cls, result_cls, check_func): call = construct_call_str(func_name,arg_dict.values()) error = error_cls(LINENO,call,**arg_dict) result = error.result() assert error.lineno == LINENO assert error.call == call for arg_name in arg_dict: assert getattr(error,arg_name) == arg_dict[arg_name] assert type(result) is result_cls check_func(state=False,lineno=LINENO,call=call,result=result,**arg_dict) def test_PyInqAssertError(): arg_dict = {} check_PyInqError(\\"assert_true\\",arg_dict,PyInqAssertError,AssertResult,check_AssertResult) def test_PyInqAssertEqualsError(): arg_dict = {\\"actual\\":4, \\"expected\\":42} check_PyInqError(\\"assert_equal\\",arg_dict,PyInqAssertEqualsError,AssertEqualsResult,check_AssertEqualsResult) def test_PyInqAssertInError(): arg_dict = {\\"item\\":4, \\"collection\\":[1,1,2,3,5,8,13,21]} check_PyInqError(\\"assert_in\\",arg_dict,PyInqAssertInError,AssertInResult,check_AssertInResult) def test_PyInqAssertInstanceError(): arg_dict = {\\"obj\\":IOError, \\"cls\\":IndexError} check_PyInqError(\\"assert_is_instance\\",arg_dict,PyInqAssertInstanceError,AssertInstanceResult,check_AssertInstanceResult) def test_PyInqAssertRaisesError(): arg_dict = {\\"expected\\":IOError, \\"trace\\":\\"\\"} check_PyInqError(\\"assert_raises\\",arg_dict,PyInqAssertRaisesError,AssertRaisesResult,check_AssertRaisesResult) def test_PyInqFailError(): arg_dict = {\\"mess\\":\\"This is a failure message.\\"} error = PyInqFailError(LINENO,**arg_dict) result = error.result() assert error.lineno == LINENO assert error.mess == arg_dict[\\"mess\\"] assert type(result) is FailResult assert result.lineno == LINENO assert result.mess == arg_dict[\\"mess\\"] assert result.result == False # TEST HELPERS # def check_Result(state, result=None): if not result: result = Result(state) assert result.result == state def check_AssertResult(state, lineno=LINENO, call=CALL, result=None): if not result: result = AssertResult(lineno,call,state) assert result.lineno == lineno assert result.call == call assert result.result == state def check_AssertEqualsResult(state, actual, expected, lineno=LINENO, call=CALL, result=None): if not result: result = AssertEqualsResult(lineno,call,state,actual,expected) assert result.lineno == lineno assert result.call == call assert result.result == state assert result.actual == actual assert result.expected == expected def check_AssertInResult(state, item, collection, lineno=LINENO, call=CALL, result=None): if not result: result = AssertInResult(lineno,call,state,item,collection) assert result.lineno == lineno assert result.call == call assert result.result == state assert result.item == item assert result.collection == collection def check_AssertInstanceResult(state, obj, cls, lineno=LINENO, call=CALL, result=None): if not result: result = AssertInstanceResult(lineno,call,state,obj,cls) assert result.lineno == lineno assert result.call == call assert result.result == state assert result.obj_name == obj.__class__.__name__ assert result.class_name == cls.__name__ def check_AssertRaisesResult(state, trace, lineno=LINENO, call=CALL, expected=EXPECTED, result=None): if not result: result = AssertRaisesResult(lineno,call,state,trace,expected) assert result.lineno == lineno assert result.call == call assert result.result == state assert remove_whitespace(result.trace) == remove_whitespace(trace) assert result.expected == expected.__name__ def check_ExpectedErrorResult(state, lineno, expected=EXPECTED, result=None): if not result: result = ExpectedErrorResult(state,expected,lineno) assert result.expected == expected.__name__ assert result.lineno == lineno assert result.call is None assert result.result == state def make_AssertResult_list(*state_list): return [AssertResult(LINENO,CALL,state) for state in state_list] def make_TestResult_list(*state_list): result_list = [] for state in state_list: result = TestResult(NAME) result.extend(make_AssertResult_list(state)) result_list.append(result) return result_list def make_TestClassResult_list(*state_list): result_list = [] for state in state_list: result = TestClassResult(NAME) result.extend(make_TestResult_list(state)) result_list.append(result) return result_list def make_TestModuleResult_list(*state_list): result_list = [] for state in state_list: result = TestModuleResult(NAME) result.extend(make_TestClassResult_list(state)) result_list.append(result) return result_list # UTIL # def remove_whitespace(string): return ''.join([line.strip() for line in string.splitlines()])"},{"prompt":"Create a class in Python for creating a binary search tree. The class should include methods for inserting a node, searching for a node, and deleting a node. Not applicable","completion":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None # Insert a node def insert(self, data): if self.root == None: self.root = Node(data) else: self._insert(data, self.root) # Helper function for Node Insert def _insert(self, data, cur_node): if data < cur_node.data: if cur_node.left == None: cur_node.left = Node(data) else: self._insert(data, cur_node.left) elif data > cur_node.data: if cur_node.right == None: cur_node.right = Node(data) else: self._insert(data, cur_node.right) else: pass # Search a node def search(self, data): if self.root != None: return self._search(data, self.root) else: return False # Helper function for Node Search def _search(self, data, cur_node): if data > cur_node.data and cur_node.right != None: return self._search(data, cur_node.right) elif data < cur_node.data and cur_node.left != None: return self._search(data, cur_node.left) elif data == cur_node.data: return True # Delete a node def delete(self, data): if self.root == None: print(\\"The tree is empty\\") return # call the delete helper function self.root = self._delete(data, self.root) # Helper function for Node Delete def _delete(self, data, cur_node): if cur_node: if data > cur_node.data: cur_node.right = self._delete(data, cur_node.right) elif data < cur_node.data: cur_node.left = self._delete(data, cur_node.left) else: # Node to be deleted is a leaf node if not cur_node.right and not cur_node.left: print(\\"Deleting leaf node\\") cur_node = None return cur_node # Node to be deleted has only one child if not cur_node.right: print(\\"Deleting a Node with single left child\\") cur_node = cur_node.left return cur_node elif not cur_node.left: print(\\"Deleting a Node with single right child\\") cur_node = cur_node.right return cur_node # Node to be deleted has two children print(\\"Deleting a Node with two children\\") del_node = cur_node cur_node = cur_node.right min_node = self._min_value_node(cur_node) del_node.data = min_node.data del_node.right = self._delete(min_node.data, del_node.right) return del_node def _min_value_node(self, cur_node): while cur_node.left is not None: cur_node = cur_node.left return cur_node"},{"prompt":"Write a Python script to implement the bubble sort algorithm.","completion":"def bubble_sort(arr): for i in range(len(arr)-1): for j in range(len(arr)-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"prompt":"Add Python logging capabilities to a given Flask application. Example existing application: from flask import Flask app = Flask(name) @app.route('/') def index(): return 'Hello World!'","completion":"import logging import sys from flask import Flask app = Flask(name) # Set up logging app.logger.addHandler(logging.StreamHandler(sys.stdout)) app.logger.setLevel(logging.DEBUG) @app.route('/') def index(): app.logger.info('Processing request to index') return 'Hello World!'"},{"prompt":"Write a Python program that takes a sentence as an argument and removes all punctuations from it. String: This, is a?! test* sentence.","completion":"import string def removePunctuations(sentence): return sentence.translate(str.maketrans('', '', string.punctuation)) print(removePunctuations(\\"This, is a?! test* sentence.\\"))"},{"prompt":"Create an algorithm in Python 3 to find the largest number in a list. Input list: [1, 7, 3, 4, 9, 2]","completion":"def find_largest(list): n = len(list) max = list[0] for i in range(1,n): if list[i] > max: max = list[i] return max list = [1, 7, 3, 4, 9, 2] largest_number = find_largest(list) print(\\"Largest number in the given list is:\\", largest_number)"},{"prompt":"Generate a python program to classify an input string as either palindrome or not.","completion":"def is_palindrome(s): return s == s[::-1]"},{"prompt":"Write a Python function that takes three numbers as argument and prints the largest one. 3, 5, 9","completion":"def largest_number(a, b, c): max = a if b > max: max = b if c > max: max = c print(max) largest_number(3, 5, 9)"},{"prompt":"Modify the following Python code for calculating the factorial of a number. def factorial(n): fact = 1 for i in range(1,n+1): fact = fact*i return fac","completion":"def factorial(n): if n == 0: return 1 else: fact = 1 for i in range(1,n+1): fact = fact*i return fact"},{"prompt":"Create a function in Python that takes a list of numbers and returns the cumulative sum. 1, 2, 3","completion":"def cum_sum(lst): result = [] cumulative = 0 for num in lst: cumulative += num result.append(cumulative) return result"},{"prompt":"Develop a program written in Python that will print the first 30 prime numbers.","completion":"def print_primes(n): # Create a list of prime numbers prime_numbers = [] # Iterate from 2 to n for num in range(2, n + 1): isPrime = True # Check for factors for i in range(2, num): if num % i == 0: isPrime = False break # If prime, append to list if isPrime: prime_numbers.append(num) # Print out the first 30 prime numbers for p in prime_numbers[:30]: print(p, end=\\" \\") # Test function print_primes(100)"},{"prompt":"Construct a Python class to represent a rectangle.","completion":"class Rectangle: def __init__(self, width, height): self.width = width self.height = height def get_area(self): return self.width * self.height"},{"prompt":"Create a Python program for calculating the Fibonacci sequence. The program should print the nth number of the sequence. n: 7","completion":"def fibonacci(n): if n <= 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) n = 7 print(fibonacci(n)) # Output: 13"},{"prompt":"Create a class in Python to represent a point in 2D space with x and y coordinates","completion":"class Point: \\"\\"\\" Represent a point in 2D space with x and y coordinates \\"\\"\\" def __init__(self, x, y): \\"\\"\\" Initialize the Point's x and y coordinates \\"\\"\\" self.x = x self.y = y def distance(self, other): \\"\\"\\" Calculate the Euclidean distance between two points \\"\\"\\" return ((self.x - other.x) ** 2 + (self.y - other.y) ** 2) ** 0.5"},{"prompt":"Optimize the performance of a function in Python that calculates the total of a list of numbers. nums = [1, 2, 3, 4, 5]","completion":"def sum_list(nums): total = 0 for num in nums: total += num return total def sum_list_optimized(nums): total = 0 length = len(nums) while length > 0: total += nums[length - 1] length -= 1 return total nums = [1, 2, 3, 4, 5] print(sum_list_optimized(nums)) # Output: 15"},{"prompt":"Create a RESTful API in Python using the Flask microframework and a SQLite database. Not applicable","completion":"from flask import Flask, jsonify, request from flask_sqlalchemy import SQLAlchemy #initialize the flask app app = Flask(__name__) #configure the database app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////path/to/database.db' db = SQLAlchemy(app) #create the model class User(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(80), unique=True) #define the routes @app.route('/', methods=['GET']) def home(): return '<h1>Welcome to the API</h1>' @app.route('/users', methods=['GET']) def get_users(): users = User.query.all() output = [] #Loop through the user objects for user in users: user_data = {} user_data['id'] = user.id user_data['name'] = user.name output.append(user_data) return jsonify(output) #run the app if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python program to compute the product of two given matrices. <Example matrix files>","completion":"def multiply(A, B): rows_A = len(A) cols_A = len(A[0]) rows_B = len(B) cols_B = len(B[0]) if cols_A != rows_B: print(\\"Cannot multiply the two matrices. Incorrect dimensions.\\") return # Create the result matrix # Dimensions would be rows_A x cols_B C = [[0 for row in range(cols_B)] for col in range(rows_A)] for i in range(rows_A): for j in range(cols_B): for k in range(cols_A): C[i][j] += A[i][k] * B[k][j] return C"},{"prompt":"Generate a function in Python that receives a number and adds 15 to it.","completion":"def add_fifteen(num): return num + 15"},{"prompt":"Create a data structure to efficiently store and manipulate a set of strings.","completion":"# Create an empty set str_set = set() # Add elements to the set str_set.add(\\"Python\\") str_set.add(\\"Java\\") str_set.add(\\"C#\\") str_set.add(\\"JavaScript\\") # Check for the presence if \\"Python\\" in str_set: print(\\"Python is present\\") # Remove elements from the set str_set.remove(\\"Java\\") # Print the set print(\\"Set of strings: \\", end = \\" \\") for i in str_set: print(i, end =\\" \\")"},{"prompt":"Write a Python script that mines data from Twitter and displays the latest tweets for a keyword. Not applicable","completion":"import tweepy consumer_key = '' consumer_secret = '' access_token = '' access_token_secret = '' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) public_tweets = api.search('python') for tweet in public_tweets: print(tweet.text)"},{"prompt":"Create a Python program to generate all combinations of 3 elements from an array. array = [1, 2, 3, 4]","completion":"def comb3(arr): result = [] for i in range(len(arr)): for j in range(i+1, len(arr)): for k in range(j+1, len(arr)): t = [arr[i],arr[j],arr[k]] result.append(t) return result"},{"prompt":"Write a Python script which can print out all prime numbers between 0 and n.","completion":"def print_all_primes(n): for i in range(2, n+1): if is_prime(i): print(i) def is_prime(num): if num == 2 or num == 3: return True if num < 2 or num % 2 == 0: return False if num < 9: return True if num % 3 == 0: return False r = int(num**0.5) f = 5 while f <= r: if num % f == 0: return False if num % (f+2) == 0: return False f += 6 return True"},{"prompt":"Write a Python program to pad a 3D array along its first two axes. arr = [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]","completion":"import numpy as np arr = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) # Pad the array with 0s along its first two axes arr_pad = np.pad(arr, ((1, 1), (1, 1), (0, 0)), 'constant', constant_values=0)"},{"prompt":"Generate a bar chart using the given data in Python. data = [10, 5, 20, 25, 15]","completion":"import matplotlib.pyplot as plt data = [10, 5, 20, 25, 15] plt.bar(range(len(data)), data, color='blue') plt.show()"},{"prompt":"Create a multithreaded program in Python that uses database access.","completion":"import threading import sqlite3 def database_access(): # Connect to the database conn = sqlite3.connect('example.db') c = conn.cursor() # Do something with the database c.execute(\\"SELECT * FROM table_name\\") # Commit changes conn.commit() # Close the database connection conn.close() # Create thread thread = threading.Thread(target=database_access) # Start the thread thread.start()"},{"prompt":"Create a Python class that has a say_hello() method.","completion":"class Hello: def say_hello(): print('Hello!')"},{"prompt":"Write a script in Python for converting binary to decimal. 1010","completion":"input_binary = \\"1010\\" decimal = int(input_binary, 2) print(decimal)"},{"prompt":"Write a Python script to generate random numbers between 0 and 100, inclusive, that are divisible by 5.","completion":"def genRandomFive(): n = 100 divisor = 5 random_number = random.randint(0,n) while (random_number % divisor != 0): random_number = random.randint(0,n) return random_number for i in range(5): print(genRandomFive())"},{"prompt":"Use the provided data to create a machine learning model in Python that can predict the purchase amount of a customer. [ { age: 52, gender: Male, income: 16000, purchase_amount: 2100 }, { age: 44, gender: Female, income: 19000, purchase_amount: 3500 }, .... ]","completion":"#import necessary libraries import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression #load data data = pd.read_csv(...) #split data into train and test sets x = data.drop('purchase_amount', axis = 1) y = data['purchase_amount'] x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2) #fit model to training data model = LinearRegression() model.fit(x_train, y_train) #predict on testing data predictions = model.predict(x_test) #calculate accuracy score = model.score(x_test,y_test) print(\\"Model accuracy:\\", score)"},{"prompt":"Develop a Python program that takes a long sentence (i.e. around 200 words) and formats it into a series of shorter sentences (under 50 words each). The W3C HTML 4.01 specification defines the language used to create web pages, including elements such as <head>, <body>, <div> and <span>, as well as the structure of the web document as it appears in a web browser.","completion":"import re sentence = \\"The W3C HTML 4.01 specification defines the language used to create web pages, including elements such as <head>, <body>, <div> and <span>, as well as the structure of the web document as it appears in a web browser.\\" # Split sentence into individual words words = re.findall(r'w+', sentence) # Initialize empty output list output = [] # Split words into groups of 50 words while len(words) > 0: group = words[:50] output.append(' '.join(group)) words = words[50:] # Print output for line in output: print(line) # Output # The W3C HTML 4.01 specification defines the language used to create web pages, # including elements such as <head>, <body>, <div> and <span>, # as well as the structure of the web document as it appears in a web browser."},{"prompt":"Develop an algorithm in Python to sort a list of numbers using an insertion sort. [7, 8, 5, 4, 1, 9, 6, 3, 2]","completion":"def insertion_sort(nums): for i in range(1,len(nums)): key = nums[i] j = i-1 while j >= 0 and key < nums[j]: nums[j + 1] = nums[j] j -= 1 nums[j + 1] = key nums = [7, 8, 5, 4, 1, 9, 6, 3, 2] print(\\"Unsorted Array:\\", nums) insertion_sort(nums) print(\\"Sorted Array:\\", nums)"},{"prompt":"Write a python program to compute the Levenshtein distance between two strings. hello, world","completion":"def compute_levenshtein_distance(a, b): n = len(a) m = len(b) d = [[0 for i in range(m + 1)] for j in range(n + 1)] for i in range(n + 1): for j in range(m + 1): if i == 0: d[i][j] = j elif j == 0: d[i][j] = i elif a[i-1] == b[j-1]: d[i][j] = d[i-1][j-1] else: d[i][j] = min(d[i-1][j], d[i][j-1], d[i-1][j-1]) + 1 return d[n][m]"},{"prompt":"Create a Python program to find the square root of the sum of two numbers without using the sqrt() function. Num1 = 4 Num2 = 9","completion":"# Python program import math def square_root(a, b): return math.sqrt(a*a + b*b) Num1 = 4 Num2 = 9 print(\\"Square root of the sum of two numbers:\\", square_root(Num1, Num2))"},{"prompt":"Generate a Python script to send an email from a given address to a specified recipient.","completion":"import smtplib sender_email = \\"<sender_email_address>\\" receiver_email = \\"<receiver_email_address>\\" password = \\"<sender_password>\\" message = \\"Hi, This email is sent from Python!\\" server = smtplib.SMTP('smtp.gmail.com', 587) server.starttls() server.login(sender_email, password) print(\\"Login Success!\\") server.sendmail(sender_email, receiver_email, message) print(\\"Email has been sent successfully to \\", receiver_email) server.quit()"},{"prompt":"Create a Python program which performs sentiment analysis on a given text and prints the sentiment, either positive, neutral, or negative. text = This was an amazing movie, I really enjoyed it!","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentimentAnalysis(text): analyzer = SentimentIntensityAnalyzer() sentiment_scores = analyzer.polarity_scores(text) if sentiment_scores['compound'] >= 0.05: print('positive') elif sentiment_scores['compound'] <= -0.05: print('negative') else: print('neutral') sentimentAnalysis(text) #Output: positive"},{"prompt":"Construct an algorithm in Python to calculate the number of possible outcomes of flipping a coin 8 times. Not applicable","completion":"def count_outcomes(n): if n == 0: return 1 else: return count_outcomes(n-1) + 2**n print(count_outcomes(8)) # 256"},{"prompt":"Can you generate a sorting algorithm in Python that would sort this array of numbers in ascending order? [9, 2, 5, 6, 4, 3, 7, 10, 1, 8]","completion":"def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr bubble_sort([9, 2, 5, 6, 4, 3, 7, 10, 1, 8])"},{"prompt":"Write a Python program that outputs the average of 3 given numbers.","completion":"def find_average(num1, num2, num3): return (num1 + num2 + num3) / 3"},{"prompt":"Create a Python program which takes two parameters and outputs the difference between them. 21, 49","completion":"def diff(a, b): return abs(a - b) a = 21 b = 49 print(diff(a, b)) # Output 28"},{"prompt":"mplement a Python program to print the following structure using for loop.","completion":"# Program to print pyramid pattern in Python for i in range(0,5): for j in range(0,i+1): print(\\"*\\",end=\\"\\") print(\\"r\\") \\"\\"\\" * ** *** **** ***** \\"\\"\\""},{"prompt":"Convert a Python list into a string with each item separated by a comma, with no additional characters or whitespace my_list = [1, 2, 3]","completion":"','.join(str(item) for item in my_list)"},{"prompt":"Create a Python program to detect anomalies in sensor data. Not applicable","completion":"import numpy as np from scipy import stats def detect_anomalies(data): # Set upper and lower limit to 3 standard deviation u_limit = np.mean(data) + 3 * np.std(data) l_limit = np.mean(data) - 3 * np.std(data) # Detect anomalies anomalies = [] for outlier in data: if outlier > u_limit or outlier < l_limit: anomalies.append(outlier) return anomalies # Generate example data example_data = stats.norm.rvs(loc = 2, scale = 0.3, size = 1000) # Detect anomalies anomalies = detect_anomalies(example_data) # Print anomalies print('Anomalies: ', anomalies)"},{"prompt":"Write a Python program for fetching the current weather data from a public API and displaying it in the terminal. Assume you have the API key and the API URL available. API URL: https://api.openweathermap.org/data/2.5/weather API Key: <mykey>","completion":"import requests API_URL = 'https://api.openweathermap.org/data/2.5/weather' API_KEY = '<my-key>' response = requests.get(API_URL, params={'APPID': API_KEY, 'q': 'New York'}) if response.status_code == 200: data = response.json() temperature = data['main']['temp'] humidity = data['main']['humidity'] print(f'The temperature is {temperature:.2f}°C and the humidity is {humidity}%.') else: print('Error while fetching the data.')"},{"prompt":"Create a function in Python that takes two lists of equal length, and returns the sum of the elements in the same index in each list. [2, 3, 4], [2, 5, 6]","completion":"def sum_elements_in_lists(list1, list2): if len(list1) != len(list2): return None result = [] for i in range(len(list1)): result.append(list1[i] + list2[i]) return result result = sum_elements_in_lists([2, 3, 4], [2, 5, 6]) print(result)"},{"prompt":"Generate an algorithm in Python to find the optimized solution to the traveling salesman problem. Points = [(1,1), (1,2), (1,3), (2,1), (2,2), (2,3)]","completion":"import math # Generate distances between coordinates def generate_distances(coordinates): distances = [] for i in range(len(coordinates)): for j in range(len(coordinates)): if i != j: d = math.sqrt((coordinates[i][0] - coordinates[j][0])**2 + (coordinates[i][1]-coordinates[j][1])**2) distances.append([i,j,d]) return distances # Generate paths with minimum distance def traveling_salesman(coordinates, distances): towns_left = list(range(len(coordinates))) current_town = 0 path = [current_town] total_distance = 0 while len(towns_left) > 0: min_dist = float(\\"inf\\") # Find the nearest town nearest_town = None for i in towns_left: dist = distances[(current_town,i)] if dist < min_dist: min_dist = dist nearest_town = i # Move to the nearest town towns_left.remove(nearest_town) path.append(nearest_town) total_distance += min_dist current_town = nearest_town # Return to the starting point total_distance += distances[(current_town, 0)] return path, total_distance points = [(1,1), (1,2), (1,3), (2,1), (2,2), (2,3)] distances = generate_distances(points) print(\\"Path:\\", traveling_salesman(points, distances)[0]) print(\\"Total Distance:\\", traveling_salesman(points, distances)[1])"},{"prompt":"Write a Python program to extract all tweets with the hashtag #happy that have over 500 retweets. Not applicable","completion":"import tweepy # Authentication details consumer_key = 'consumer_key' consumer_secret = 'consumer_secret' access_token = 'access_token' access_token_secret = 'access_token_secret' # Create an Api instance auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) # Extract all tweets with the hashtag #happy that have over 500 retweets result = api.search(q=\\"#happy\\", count=100) for tweet in result: if tweet.retweet_count > 500: print(tweet.text)"},{"prompt":"The given code is a Python script that creates a player window for a Spotify client. It imports several modules and defines a class for the player window. It also defines several functions for controlling the Spotify client, getting information about the current track, and updating the player window with this information. To use this script, run the main() function.","completion":"# https://docs.python.org/2.7/ import os import sys import urllib import urlparse # http://mirrors.kodi.tv/docs/python-docs/ import xbmcaddon import xbmcgui import xbmcplugin # http://docs.python-requests.org/en/latest/ import requests from threading import Thread import time class PlayerWindow(xbmcgui.WindowXML): LABEL_ARTIST = 802 LABEL_TITEL = 801 LABEL_ALBUM = 803 IMG_ALBUM = 800 SLIDER_VOL = 815 BUTTON_SHUFFLE = 817 BUTTON_SHUFFLE_ACT = 818 BUTTON_REPEAT = 819 BUTTON_REPEAT_ACT = 819 BUTTON_BACK = 809 BUTTON_PLAY = 811 BUTTON_PAUSE = 812 BUTTON_FOR = 813 BUTTON_VOL_UP = 816 BUTTON_VOL_DOWN = 814 def __init__(self, *args, **kwargs): self.isRunning = True self.volume = 100 def onAction(self , action): ACTION_PREVIOUS_MENU = 10 ACTION_NAV_BACK = 92 ACTION_UP = 3 ACTION_DOWN = 4 ACTION_LEFT = 1 ACTION_RIGHT = 2 ACTION_MIDDLE = 7 ACTION_PAUSE = 12 ACTION_STOP = 13 ACTION_NEXT_ITEM = 14 ACTION_PREV_ITEM = 15 ACTION_FORWARD = 16 ACTION_REWIND = 17 ACTION_PLAYER_FORWARD = 77 ACTION_PLAYER_REWIND = 78 ACTION_PLAYER_PLAY = 79 ACTION_VOLUME_UP = 88 ACTION_VOLUME_DOWN = 89 ACTION_MUTE = 91 ACTION_PAGE_UP = 5 ACTION_PAGE_DOWN = 6 #ids = str(action.getId()) #xbmc.log(ids) if (action == ACTION_PREVIOUS_MENU) or (action == ACTION_NAV_BACK): xbmcgui.Window(10000).setProperty(\\"spotify-closed-by-user\\",\\"true\\") self.isRunning = False self.close() if (action == ACTION_LEFT) or (action == ACTION_RIGHT): self.volSlider = self.getControl(self.SLIDER_VOL) volume = self.volSlider.getPercent() setVol(volume) if(action == ACTION_PLAYER_PLAY) or (action == ACTION_PAUSE): if(self.playing): getSite(pause) else: getSite(play) if (action == ACTION_VOLUME_UP): self.volume = self.volume + 3 if(self.volume > 100): self.volume = 100 setVol(self.volume) self.volSlider = self.getControl(self.SLIDER_VOL) self.volSlider.setPercent(self.volume) if (action == ACTION_VOLUME_DOWN): self.volume = self.volume- 3 if(self.volume < 0): self.volume = 0 setVol(self.volume) self.volSlider = self.getControl(self.SLIDER_VOL) self.volSlider.setPercent(self.volume) if (action == ACTION_FORWARD) or (action == ACTION_PLAYER_FORWARD) or (action == ACTION_NEXT_ITEM) or (action == ACTION_PAGE_UP): getSite(next) if (action == ACTION_REWIND) or (action == ACTION_PLAYER_REWIND) or (action == ACTION_PREV_ITEM) or (action == ACTION_PAGE_DOWN): getSite(prev) if(action == ACTION_STOP): getSite(pause) def onClick(self, controlID): if (controlID == self.BUTTON_PAUSE) or (controlID == self.BUTTON_PLAY): if(self.playing): getSite(pause) else: getSite(play) if (controlID == self.BUTTON_VOL_UP): self.volume = self.volume + 3 if(self.volume > 100): self.volume = 100 setVol(self.volume) self.volSlider = self.getControl(self.SLIDER_VOL) self.volSlider.setPercent(self.volume) if (controlID == self.BUTTON_VOL_DOWN): self.volume = self.volume- 3 if(self.volume < 0): self.volume = 0 setVol(self.volume) self.volSlider = self.getControl(self.SLIDER_VOL) self.volSlider.setPercent(self.volume) if (controlID == self.BUTTON_FOR): getSite(next) if (controlID == self.BUTTON_BACK): getSite(prev) def updateLabels(self, information): self.albumCover = self.getControl(self.IMG_ALBUM) self.titleLabel = self.getControl(self.LABEL_TITEL) self.artistLabel = self.getControl(self.LABEL_ARTIST) self.albumName = self.getControl(self.LABEL_ALBUM) self.volSlider = self.getControl(self.SLIDER_VOL) self.playing = information['playing'] self.titleLabel.setLabel(information['track_name']) self.albumName.setLabel(information['album_name']) self.artistLabel.setLabel( information['artist_name']) self.albumCover.setImage(information['cover_url']) self.volume = int(information['volume'])/655.35 self.volSlider.setPercent(self.volume) self.getControl(self.BUTTON_PLAY).setVisible(not self.playing) self.getControl(self.BUTTON_SHUFFLE).setVisible(not information['shuffle']) self.getControl(self.BUTTON_REPEAT).setVisible(not information['repeat']) def getSite(url): #try... rq = requests.get(url) #handle return rq def getInfo(): information = getSite(info).json() statusInfo = getSite(status).json() playing = statusInfo['playing'] shuffleInfo = statusInfo['shuffle'] repeatInfo = statusInfo['repeat'] coverURL = \\"http://o.scdn.co/160/\\"+information['cover_uri'].split(':')[-1] information['cover_url'] = coverURL information['playing'] = playing information['shuffle'] = shuffleInfo information['repeat'] = repeatInfo return information def downloadCover(url): urllib.urlretrieve(url,'/tmp/spotAlCov.png') def setVol(value): value = int(round(value* 655.35)) jsonPost = {'value': value} requests.post(volume,data=jsonPost) def updateInfo(name,window): screensaverDelay = 30 screensaverCount = 0 updateInterval = 2 while True: try: window.getControl(800) break except Exception: xbmc.log(\\"Error: can't find Window, try again\\") time.sleep(1) # maybe fix for can't find window id's while window.isRunning and (not xbmc.abortRequested): information = getInfo() window.updateLabels(information) time.sleep(updateInterval) screensaverCount = screensaverCount + updateInterval if(screensaverCount>screensaverDelay) and information['playing']: #wakeup from screensaver by simulating a button activity json_query = xbmc.executeJSONRPC('{\\"jsonrpc\\": \\"2.0\\", \\"method\\": \\"Input.ContextMenu\\", \\"id\\": 1}') screensaverCount = 0 def main(): pw = PlayerWindow(\\"player.xml\\",CWD) #xbmcgui.Window( 10000 ) t1 = Thread(target=updateInfo,args=(\\"1\\",pw)) t1.setDaemon( True) t1.start() xbmcgui.Window(10000).setProperty(\\"spotify-showing\\", \\"true\\") pw.doModal() xbmcgui.Window(10000).clearProperty(\\"spotify-showing\\") del t1 del pw if __name__ == '__main__': page = 'http://127.0.0.1:4000' apiPlayback = '/api/playback' play = page+apiPlayback+'/play' pause = page+apiPlayback+'/pause' prev = page+apiPlayback+'/prev' next = page+apiPlayback+'/next' volume = page+apiPlayback+'/volume' shuffle = page+apiPlayback+'/shuffle' repeat = page+apiPlayback+'/repeat' info = page+'/api/info/metadata' status = page+'/api/info/status' ADDON = xbmcaddon.Addon(id='plugin.audio.example') CWD = ADDON.getAddonInfo('path').decode(\\"utf-8\\") main()"},{"prompt":"Can you design a Python class to represent a human being?","completion":"class Human: def __init__(self, age, name): self.age = age self.name = name def greet(self): print(\\"Hi, my name is \\" + self.name + \\" and I'm \\" + str(self.age) + \\" years old.\\") john = Human(25, \\"John\\") john.greet()"},{"prompt":"Generate a code to implement a linear search algorithm in python.","completion":"def linear_search(list_of_items, item_to_search): for items in list_of_items: if items == item_to_search: return list_of_items.index(item_to_search) return -1"},{"prompt":"Write a Python script to generate a table in a Word document, using the given headers and data. headers = ['Name', 'Phone', 'Email'] data = [['John', '9898989898', 'john@example.com'], ['Alice', '1234567890', 'alice@example.com']]","completion":"import docx headers = ['Name', 'Phone', 'Email'] data = [['John', '9898989898', 'john@example.com'], ['Alice', '1234567890', 'alice@example.com']] document = docx.Document() table = document.add_table(rows=1, cols=len(headers)) # Add column headings head_cells = table.rows[0].cells for header in headers: head_cells[headers.index(header)].text = header # Add data for row in data: row_cells = table.add_row().cells for cell in row: row_cells[row.index(cell)].text = cell document.save('table.docx')"},{"prompt":"Write a python program to implement a custom sorting algorithm that sorts an array of numbers by the sum of their digits. [126, 234, 21, 5]","completion":"def sort_by_sum_of_digits(arr): # Base case if not arr: return [] # Initializing variables result = [] sum_of_digits = [] for i in range(0, len(arr)): # Calculating the sum of digits # of each element in the array sum = 0 for j in str(arr[i]): sum += int(j) # storing it in two separate lists result.append(arr[i]) sum_of_digits.append(sum) # Sorting the sums list and storing # the index of the sorted list. sorted_index = [i[0] for i in sorted(enumerate(sum_of_digits), key = lambda p: p[1])] # Preparing the sorted array based on # the index of sorted list. sorted_arr = [] for k in sorted_index: sorted_arr.append(result[k]) return sorted_arr # Driver Code arr = [126, 234, 21, 5] print(sort_by_sum_of_digits(arr)) # Output: # [5, 21, 126, 234]"},{"prompt":"Create an algorithm in Python to optimize the order of parallel computations so that the total time required to finish all computations is minimized. operations = { A: 10, B: 5, C: 15, D: 20 }","completion":"# Compute the optimal order def compute_optimal_order(operations): # Create a list to store the order. order = [] # Sort the operations in ascending order by time. sorted_operations = sorted(operations.items(), key=lambda x: x[1]) # Total time for the operations in the order. total_time = 0 # Iterate through the operations. for operation in sorted_operations: operation_name = operation[0] operation_time = operation[1] order.append((operation_name, total_time)) # Update the total time for the order. total_time += operation_time return order operations = { A: 10, B: 5, C: 15, D: 20 } optimal_order = compute_optimal_order(operations) print(optimal_order) # Output: [('B', 0), ('A', 5), ('C', 15), ('D', 30)]"},{"prompt":"Write a forloop in Python to find the average of 5 numbers. 5 numbers: 10, 15, 20, 25, 30","completion":"total = 0 for num in [10, 15, 20, 25, 30]: total += num average = total / 5 print(average)"},{"prompt":"Create a quicksort algorithm in Python which sorts an array in ascending order.","completion":"def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"prompt":"Generate a correct python function to check if a given list of integers contains a certain number.","completion":"def contains_number(numbers, number): for x in numbers: if x == number: return True return False"},{"prompt":"Develop a Python script for swapping two variable values.","completion":"a, b = b, a"},{"prompt":"Create a Python program to search for a given query from a given array of strings using regular expressions. query = 'ab+c' string_array = ['abc', 'def', 'ghi', 'abcd', 'abcde']","completion":"import re query = 'ab+c' string_array = ['abc', 'def', 'ghi', 'abcd', 'abcde'] for string in string_array: if re.search(query, string): print(string) # Output: # abc # abcd # abcde"},{"prompt":"Converting the following algorithm into executable Python code Given an array of 1s and 0s, find the index of the 0 that’s the farthest from beginning of the array.","completion":"def farthest_from_begining_index(arr): index = -1 max_index = 0 for i in range(len(arr)): if arr[i] == 0: index = i if index > max_index: max_index = index return max_index"},{"prompt":"Create a Python program that uses the NumPy library to generate a series of random numbers. Not applicable","completion":"import numpy as np # Generate random integers within a specified range x = np.random.randint(0, 10, size=(3, 3)) # Generate random floats within a specified range y = np.random.uniform(low=0.0, high=10.0, size=(3, 3)) # Generate random numbers with numpy z = np.random.rand(3,3) print('Random integers:', x, 'n') print('Random floats:', y, 'n') print('Random numbers:', z)"},{"prompt":"Generate a simple Python script to compute basic statistics (mean, median and mode) for a given list of numbers. [7, 10, 16, 1, 18]","completion":"def compute_statistics(nums): mean = sum(nums)/len(nums) median = sorted(nums)[len(nums)//2] mode = max([(nums.count(i), i) for i in set(nums)], key=lambda x:x[0])[1] print('Mean:', mean) print('Median:', median) print('Mode:', mode) compute_statistics([7, 10, 16, 1, 18])"},{"prompt":"Write an algorithm in Python that can detect the number of times a given keyword appears in a given text. Text: Every morning I start my day with a cup of coffee. Keyword: cup","completion":"def count_keyword(text, keyword): count = 0 words = text.lower().split() for word in words: if word == keyword.lower(): count += 1 return count text = 'Every morning I start my day with a cup of coffee.' print(count_keyword(text, 'cup')) # Output: 1"},{"prompt":"Create a search engine in Python that searches the web for relevant information on a given topic.","completion":"import requests # Perform a google search and returns the first page of results def search(query): # Use a custom user-agent to avoid being blocked by Google headers = { 'User-Agent': 'MySearchEngine/1.0' } # Build the query string query_string = { 'q': query } # Send the GET request and extract the response details result = requests.get('https://www.google.com/search', params=query_string, headers=headers) response = result.text details = { 'url': result.url, 'response': result.text } return details if __name__ == '__main__': query = 'cats' print(search(query))"},{"prompt":"Generate a class in Python that contains a dictionary to store student name and their grades.","completion":"class StudentGrades: def __init__(self): self.student_grades = {} def store_grade(self, student_name, grade): self.student_grades[student_name] = grade def get_grade(self, student_name): return self.student_grades.get(student_name)"},{"prompt":"Write a function that generates a random 5letter string in Python.","completion":"import string import random def random_string(): letters = string.ascii_letters return ''.join(random.choice(letters) for i in range(5)) result = random_string() print(result)"},{"prompt":"Write a Python algorithm to calculate a person's body mass index (BMI). Body mass index (BMI) is calculated using a person’s weight in kilograms divided by their height in meters squared.","completion":"def bmi_calculation(height, weight): bmi = weight / (height * height) return bmi"},{"prompt":"Create a python program to find the longest consecutive 1s in a binary number. 10101010001","completion":"def max_ones(num): count = 0 result = 0 for i in range(len(num)): if num[i] == '1': count += 1 result = max(result, count) else: count = 0 return result num = '10101010001' print(max_ones(num))"},{"prompt":"Create a function in Python to check if a given string contains two of the same characters next to each other.","completion":"def check_for_two_same_chars(string): for i in range(len(string)-1): if string[i] == string[i+1]: return True return False"},{"prompt":"Explain the purpose of an iterator in Python.","completion":"An iterator in Python is an object that allows a programmer to traverse through all the elements of a collection, regardless of its specific implementation. An iterator object is initialized with the iter() method, and the object can be iterated one element at a time using the methods of the iterator object, such as next(). This makes it possible to iterate over any collection, regardless of its specific implementation, such as lists, sets, and dictionaries."},{"prompt":"Create a Python class that implements a queue data structure.","completion":"class Queue: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def enqueue(self, item): self.items.insert(0,item) def dequeue(self): return self.items.pop() def size(self): return len(self.items)"},{"prompt":"Create an ifelse statement to check if a number is a multiple of 3 in Python. num=12","completion":"if num % 3 == 0: print(\\"Number is multiple of 3\\") else: print(\\"Number is not a multiple of 3\\")"},{"prompt":"Given a list of student records consisting of student name, roll number, and marks, write a Python program to sort the records based on marks in descending order. records = [['John Doe', 1, 92], ['Anna Smith', 2, 91], ['Jim Green', 3, 87]]","completion":"def sort_by_marks(records): # Sort the records list according to the marks sorted_records =sorted(records, key = lambda x: x[2], reverse=True) # Return the sorted list return sorted_records"},{"prompt":"mplement a function in Python that takes a string as input and returns a deep copy of the string with its letters reversed. Hello World!","completion":"def reverse_string(string): # Create empty string to store reversed characters reversed_string = \\"\\" # Loop through string to get individual characters for char in string: reversed_string = char + reversed_string # Return reversed string return reversed_string print(reverse_string(\\"Hello World!\\")) # Output -> \\"!dlroW olleH\\""},{"prompt":"Write a Python program to generate a random array of numbers","completion":"import random def generate_random_array(size): return random.sample(range(100), size)"},{"prompt":"Create a Python class to store data about a student enrolled in a course. The class should have properties for name, course title, grade, and teacher's name of the student.","completion":"class Student: # Initializing the student data def __init__(self, name, course_title, grade, teacher_name): self.name = name self.course_title = course_title self.grade = grade self.teacher_name = teacher_name # Getters to return the student data def get_name(self): return self.name def get_course_title(self): return self.course_title def get_grade(self): return self.grade def get_teacher_name(self): return self.teacher_name # Create a new student object student_1 = Student(\\"John Doe\\", \\"Computer Science\\", \\"A\\", \\"Mr. Smith\\") # Print student data print(\\"Name: \\" + student_1.get_name()) print(\\"Course Title: \\" + student_1.get_course_title()) print(\\"Grade: \\" + student_1.get_grade()) print(\\"Teacher: \\" + student_1.get_teacher_name())"},{"prompt":"Generate a Python program to print out the even numbers from a given list. [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"list = [1,2,3,4,5,6,7,8,9] for num in list: if num % 2 == 0: print(num, end = \\" \\")"},{"prompt":"Develop a Python script to calculate the cosine similarity between two word vectors. [0.5, 0.2, 0.7, 0.8] [0.9, 0.6, 0.1, 0.2]","completion":"import numpy as np a = np.array([0.5, 0.2, 0.7, 0.8]) b = np.array([0.9, 0.6, 0.1, 0.2]) def cos_sim(a, b): dot_product = np.dot(a, b) norm_a = np.linalg.norm(a) norm_b = np.linalg.norm(b) return dot_product / (norm_a * norm_b) result = cos_sim(a, b) print(result)"},{"prompt":"Edit the given python program to display the sum of all even numbers in the given list. list = [1, 2, 3, 4, 5]","completion":"list = [1, 2, 3, 4, 5] total = 0 for num in list: if (num % 2 == 0): total += num print (total)"},{"prompt":"Use this code to create a simple, general purpose JSON RPC v1.0 over HTTP. The code provides a SimpleJSONRPCClient class that can be used to call remote methods and return results. To use the class, create an instance with the URL of the remote server, and then call the call method with the path, query, method, and arguments of the remote method you want to call. The method will return the result of the remote method call.","completion":"#!/usr/bin/python3.4 # vim:ts=4:sw=4:softtabstop=4:smarttab:expandtab # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. \\"\\"\\" Provides a simple, general purpose JSON RPC v1.0 over HTTP. TODO: Asynchronous client handling multiple connections at once. \\"\\"\\" import json from pycopia import urls from pycopia.inet import httputils from pycopia.http.client import (HTTPRequest, RequestResponseError) class JSONError(Exception): pass class JSONRequestError(JSONError): pass class JSONResponseError(JSONError): pass def Counter(): i = 0 while True: yield i i += 1 class JSON1Method: COUNTER = Counter() # class singleton def __init__(self, name, params): self.method = name self.params = params self.id = next(self.COUNTER) def to_json(self): return json.dumps({\\"method\\": self.method, \\"params\\": self.params, \\"id\\": self.id}) class SimpleJSONRPCClient: def __init__(self, url, logfile=None): self._baseurl = urls.UniversalResourceLocator(url) self._cookiejar = httputils.CookieJar() self._logfile = logfile def call(self, path, query, method, args): \\"\\"\\"Call the remote method, return result. \\"\\"\\" data = JSON1Method(method, args) resp = self.post(path, data, query) res = json.loads(resp.body.decode(\\"utf-8\\")) if res[\\"id\\"] != data.id: raise JSONRequestError(\\"mismatched id\\") err = res.get(\\"error\\") if err: raise JSONResponseError((err[\\"code\\"], err[\\"message\\"])) return res[\\"result\\"] def get(self, path, query=None): url = self._baseurl.copy() url.path = self._baseurl.path + path headers = [httputils.Referer(self._baseurl), httputils.Connection(\\"keep-alive\\")] request = HTTPRequest(url, method=\\"GET\\", query=query, cookiejar=self._cookiejar, extraheaders=headers) resp = request.perform(self._logfile) if resp.status.code != 200: raise RequestResponseError(str(resp.status)) self._cookiejar.parse_mozilla_lines(resp.cookielist) return resp def post(self, path, data, query=None): url = self._baseurl.copy() url.path = self._baseurl.path + path if query: url.query = query request = HTTPRequest(url, data, method=\\"POST\\", cookiejar=self._cookiejar, accept=\\"application/json\\") resp = request.perform(self._logfile) if resp.status.code != 200: raise RequestResponseError(str(resp.status)) self._cookiejar.parse_mozilla_lines(resp.cookielist) return resp @property def cookies(self): return self._cookiejar.get_setcookies() def clear_cookies(self): return self._cookiejar.clear() if __name__ == \\"__main__\\": m = JSON1Method(\\"callme\\", (\\"maybe\\", 1)) print(m.to_json()) m = JSON1Method(\\"callme\\", (\\"again\\", 2)) print(m.to_json())"},{"prompt":"Python, write a function that takes two strings as inputs and outputs the number of ways of transforming one string into another, using only one letter replacement at a time. start word: hello end word: world","completion":"def replacement_transformations(start, end): # prepare an empty 2D array matrix = [[0 for i in range(len(end))] for j in range(len(start))] # fill the top row with 1s for i in range(len(end)): matrix[0][i] = 1 # fill the leftmost column with 1s for i in range(len(start)): matrix[i][0] = 1 # fill the remaining cells with the number of transformations possible for i in range(1, len(start)): for j in range(1, len(end)): if start[i] == end[j]: matrix[i][j] = matrix[i-1][j-1] else: matrix[i][j] = matrix[i-1][j] + matrix[i][j-1] # return the bottom right cell of the matrix return matrix[len(start)-1][len(end)-1] # test the function result = replacement_transformations('hello', 'world') # result will be 24"},{"prompt":"Write a Python program to filter a list of numbers so only even numbers are kept. [2, 7, 3, 6, 10, 11, 13]","completion":"new_list = [x for x in input_list if x % 2 == 0] print(new_list) # Output: [2, 6, 10]"},{"prompt":"Create a Python function to calculate the greatcircle distance between two sets of GPS coordinates. Starting coordinates: 25.636045, 80.563424 Ending coordinates: 25.859637, 80.329789","completion":"import math def calculateDistance(origin, destination): lon1, lat1 = origin lon2, lat2 = destination radius = 6371 dlat = math.radians(lat2-lat1) dlon = math.radians(lon2-lon1) a = math.sin(dlat / 2) * math.sin(dlat / 2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) * math.sin(dlon / 2) c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a)) d = radius * c return d origin = (25.636045, -80.563424) destination = (25.859637, -80.329789) distance = calculateDistance(origin, destination) print(\\"Distance:\\", distance)"},{"prompt":"Convert the following Python code from imperative to functional style. nums = [1, 2, 3] sum = 0 for n in nums: sum +=","completion":"sum = reduce(lambda x, y: x + y, nums)"},{"prompt":"Write a Python program to print out all possible pairs of two lists. list1 = [1, 2, 3] list2 = ['a', 'b', 'c']","completion":"for i in list1: for j in list2: print(i,j) # Output: # (1, 'a') # (1, 'b') # (1, 'c') # (2, 'a') # (2, 'b') # (2, 'c') # (3, 'a') # (3, 'b') # (3, 'c')"},{"prompt":"Sort the following array from smallest to largest without using the built in sort method in Python. [5, 4, 2, 1, 3]","completion":"def bubbleSort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] arr = [5, 4, 2, 1, 3] bubbleSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i])"},{"prompt":"Write a Python program that uses the BeautifulSoup library to scrape the title, author, and text of the first 10 blog posts from a given blog. https://www.exampleblog.com/","completion":"import requests from bs4 import BeautifulSoup base_url = 'https://www.exampleblog.com/' r = requests.get(base_url) soup = BeautifulSoup(r.text) titles = [] authors = [] texts = [] for post in soup.find_all('div', {'class': 'post'}): title = post.find('h2').text titles.append(title) author = post.find('h3', {'class': 'author'}).text authors.append(author) text = post.find('div', {'class': 'post-excerpt'}).text texts.append(text) for x in range(10): print('Title:', titles[x]) print('Author:', authors[x]) print('Text:', texts[x])"},{"prompt":"Create a python program that uses API to get the list of upcoming movies and their release dates from a film API.","completion":"# import required libraries import requests # API call to get upcoming movies url = 'https://api.themoviedb.org/3/movie/upcoming' params = {'api_key': '<your_api_key>', 'region': 'US' } # get data from API response = requests.get(url, params= params) data = response.json() # extract required data movie_title = [] movie_release_date = [] for movie in data['results']: movie_title.append(movie['title']) movie_release_date.append(movie['release_date']) # print the result for i in range(len(movie_title)): print(\\"Movie Title: \\", movie_title[i]) print(\\"Release Date: \\", movie_release_date[i])"},{"prompt":"Develop a Python script to extract some text from a website. Website URL: http://example.com","completion":"import requests from bs4 import BeautifulSoup response = requests.get(\\"http://example.com\\") soup = BeautifulSoup(response.content, \\"html.parser\\") text = soup.get_text() print(text)"},{"prompt":"Write a Python script that takes an integer as input and outputs the Fibonacci number corresponding to that index. 7","completion":"# Input number num = int(input()) # Numbers a = 0 b = 1 for i in range(num): # Sum of all preceding numbers c = a + b # Set the second number as the first number a = b # Set the new sum as the second number b = c # Print the nth Fibonacci number print(a)"},{"prompt":"Design an algorithm and write a Python program to find the union and intersection of two given sets of numbers. Set A = { 1, 2, 3, 4, 5, 6 } Set B = { 1, 4, 5, 7, 8 }","completion":"def union(A, B): same = [] union = A + B for i in A: if i in B: same.append(i) union = list(set(union) - set(same)) return union def intersect(A, B): same = [] for i in A: if i in B: same.append(i) intersection = same return intersection SetA = { 1, 2, 3, 4, 5, 6 } SetB = { 1, 4, 5, 7, 8 } print(\\"Union:\\", union(SetA,SetB)) print(\\"Intersection:\\", intersect(SetA,SetB))"},{"prompt":"Create a Python program for analyzing a collection of texts. The program should take a text collection as an input and should return a list of the 10 most frequent words in the texts. [ This is a text about dogs, This is a text about cats ]","completion":"import collections texts = [ \\"This is a text about dogs\\", \\"This is a text about cats\\" ] # Create a counter to count the words counter = collections.Counter() # Go through each text for text in texts: # Split the text and count the words words = text.split() for word in words: counter[word] += 1 # Get the 10 most common words most_common_words = counter.most_common(10) # Print the most common words for word, count in most_common_words: print(word, count)"},{"prompt":"Generate Python code to connect to a SQL database. hostname: test.com, username: admin, password: pwd123","completion":"import mysql.connector connection = mysql.connector.connect( host = \\"test.com\\", user = \\"admin\\", password = \\"pwd123\\", database = \\"testdb\\" )"},{"prompt":"Using the Python library Scikitlearn, create a random forest regression model for predicting the prices of housing in California. Input data should be California Housing dataset from Scikitlearn (https://scikitlearn.org/stable/modules/generated/sklearn.datasets.fetch_california_housing.html)","completion":"import numpy as np from sklearn.ensemble import RandomForestRegressor from sklearn.datasets import fetch_california_housing # Load the dataset dataset = fetch_california_housing() X = dataset.data y = dataset.target # Train the model regr = RandomForestRegressor(n_estimators=100, random_state=42) regr.fit(X, y) # Print the R2 score score = round(regr.score(X, y) * 100, 2) print(f\\"R2 score: {score}%\\")"},{"prompt":"Create a simple class in Python to represent a point in 2D space with x, y coordinates.","completion":"class Point2D: def __init__(self, x, y): self.x = x self.y = y"},{"prompt":"Create a generative model in Python with Keras to generate new recipes.","completion":"import numpy as np import pandas as pd import string import keras from keras.preprocessing.text import Tokenizer from keras.preprocessing.sequence import pad_sequences from keras.utils import to_categorical from keras.layers import Dense, Dropout, Embedding, LSTM, Input, Flatten from keras.models import Sequential data = pd.read_csv('recipes.csv') tokenizer = Tokenizer() tokenizer.fit_on_texts(data['recipe']) sequence = tokenizer.texts_to_sequences(data['recipe']) x_train = pad_sequences(sequence, maxlen=50, padding='post') y_train = to_categorical(np.asarray(data['cuisine'])) model = Sequential() model.add(Embedding(input_dim=x_train.shape[1], output_dim=100, input_length=50)) model.add(LSTM(64, activation='relu')) model.add(Dense(y_train.shape[1], activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(x_train, y_train, epochs=5, batch_size=128) # Save trained model model.save('recipe_generator.h5')"},{"prompt":"Generate a Python program that will multiply two given matrices.","completion":"def multiply_matrices(m1, m2): # Initializing empty list result = [[0 for x in range(len(m2[0]))] for y in range(len(m1))] # Iterate through rows and columns for i in range(len(m1)): for j in range(len(m2[0])): for k in range(len(m2)): result[i][j] += m1[i][k] * m2[k][j] return result"},{"prompt":"Create a method to find the maximum element in a 2D array in Python. Array: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def maxElement2DArray(arr): maxElement = arr[0][0] for row in range(len(arr)): for column in range(len(arr[row])): maxElement = max(maxElement, arr[row][column]) return maxElement"},{"prompt":"Generate a python program that takes a list of names and prints the longest name. [John, Mark, Kelly, Cindy, Dylan]","completion":"def get_longest_name(names): longest_name = \\"\\" max_length = 0 for name in names: if len(name) > max_length: longest_name = name max_length = len(name) return longest_name longest_name = get_longest_name([\\"John\\", \\"Mark\\", \\"Kelly\\", \\"Cindy\\", \\"Dylan\\"]) print(longest_name)"},{"prompt":"Create a REST API endpoint in Python Flask for registering a new user. Example user parameters: {name: Alice, email: alice@example.com, password: 123456}","completion":"from flask import Flask, request from flask_sqlalchemy import SQLAlchemy app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class User(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(50)) email = db.Column(db.String(50), unique=True) password = db.Column(db.String(50)) db.create_all() @app.route('/register', methods=['POST']) def register_user(): user = User(name=request.json['name'], email=request.json['email'], password=request.json['password']) db.session.add(user) db.session.commit() return {'message': 'User created'} if name == 'main': app.run(debug=True)"},{"prompt":"mplement a Python version of the QuickSort algorithm. [3, 2, 5, 7, 6]","completion":"def quickSort(arr): less, equal, greater = [], [], [] if len(arr) > 1: pivot = arr[0] for x in arr: if x < pivot: less.append(x) elif x == pivot: equal.append(x) else: greater.append(x) return quickSort(less) + equal + quickSort(greater) else: return arr print(quickSort([3, 2, 5, 7, 6]))"},{"prompt":"Generate a program in Python that finds the nth number in the Fibonacci sequence n = 10","completion":"def nth_fibo(n): ''' This function finds the nth number in the Fibonacci sequence. Parameters ---------- n : int Desired position in the sequence Returns ------- int Nth number in the Fibonacci sequence. ''' # Initialize variables x = 0 y = 1 # Iterate through the Fibonacci sequence for _ in range(n-1): x, y = y, x + y # Return the nth number in the Fibonacci sequence return y"},{"prompt":"Design a system in Python that encrypts and decrypts text messages using a onetime pad encryption technique. Not applicable","completion":"def encrypt(message, key): cipher_text = [] for i in range(len(message)): cipher_text.append(ord(message[i]) ^ ord(key[i])) return cipher_text def decrypt(cipher_text, key): message = [] for i in range(len(cipher_text)): message.append(chr(cipher_text[i] ^ ord(key[i]))) return \\"\\".join(message)"},{"prompt":"Given a list of integers, write a Python program to find the maximum value in the array and display its index. [3, 2, 5, 8, 6]","completion":"mylist = [3, 2, 5, 8, 6] # initialize maximum value and index maxval = 0 maxindex = 0 # iterate through list for i, val in enumerate(mylist): # check if the current value is greater than the maximum value if val > maxval: maxval = val maxindex = i # print the result print('Maximum value:', maxval) print('Index of maximum value:', maxindex)"},{"prompt":"Create basic machine learning model in Python that predicts whether a customer will accept a certain product given their historical purchasing decisions. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.ensemble import RandomForestClassifier # Load the dataset df = pd.read_csv(‘data.csv’) # Create feature and target matrices X = df.drop(‘Accepted’, axis=1).values y = df[‘Accepted’].values # Create and train model model = RandomForestClassifier() model.fit(X, y) # New data new_data =np.array([[x1, x2, x3, x4]]) # Predict model.predict(new_data)"},{"prompt":"Write code to establish a connection between a Python backend and a MySQL database. Host = 'localhost' Username = 'root' Password = '123456' Database = 'sample_database'","completion":"import mysql.connector #Create MySQL Connection connection = mysql.connector.connect(host = Host, database = Database, user = Username, password = Password) #Check whether connection is established or not if connection.is_connected(): print(\\"Connection established successfully\\")"},{"prompt":"Create a web crawler in Python to extract all the links from a given website. Not applicable","completion":"import urllib import re #Extracting Links from a given website def extract_links(url): website = urllib.urlopen(url) html = website.read() links = re.findall('\\"((http|ftp)s?://.*?)\\"', html) #Loop through links and print for link in links: print (link[0]) url = 'http://www.example.com/' extract_links(url)"},{"prompt":"Create a generator function in Python to yield the numbers in a given range.","completion":"def num_range_generator(start, end): for num in range(start, end+1): yield num"},{"prompt":"Add code to the given function in Python, to check if a given keyword is already present in the list, and increase its count if it's already present or else add it to the list. inputList = [] keyword = hello","completion":"def CheckKeywordInList(inputList, keyword): flag = 0 for i in range (len(inputList)): if inputList[i][0] == keyword: inputList[i][1] = inputList[i][1] + 1 flag = 1 break if flag == 0: inputList.append([keyword,1]) return inputList"},{"prompt":"Write a python program to parse and print out the name, email, and phone number from a given string. John Doe, foobar@example.com, 1234567890","completion":"def parse_contact_info(string): name = string.split(\\", \\")[0] email = string.split(\\", \\")[1] phone_number = string.split(\\", \\")[2] print(f\\"Name: {name} nEmail: {email} nPhone Number: {phone_number}\\")"},{"prompt":"Write a Python program to calculate the sum of all words in a sentence.","completion":"def sum_of_words(sentence): words = sentence.split() total = 0 for word in words: total += len(word) return total result = sum_of_words(\\"This is a sentence\\") print(result)"},{"prompt":"Write a Python program for generating random strings of a given length from a given character set. The given character set: abcdefghijklmnopqrstuvwxyz","completion":"import random def random_string(length, char_set): result = \\"\\" for _ in range(length): result += random.choice(char_set) return result print(random_string(6, 'abcdefghijklmnopqrstuvwxyz')) # Output: acehkl"},{"prompt":"Develop a program in Python to store 5 integer numbers in a list and print out the maximum value. [7, 9, 23, 0, 4]","completion":"numbers = [7, 9, 23, 0, 4] maximum = max(numbers) print(\\"The maximum value is: \\"+ str(maximum))"},{"prompt":"Develop an algorithm in Python to reverse a given string. Hello World!","completion":"def reverse_string(string): reversed_string = \\"\\" for char in string: reversed_string = char + reversed_string return reversed_string result = reverse_string(\\"Hello World!\\") print(result)"},{"prompt":"Create a Python program for a text editor that replaces all instances of a specified pattern with a different text string. string = Hello world! pattern = Hello replacement = Goodbye","completion":"# Function to replace a given pattern with a different string def replace_pattern(string, pattern, replacement): # Split string into list of words words = string.split() # Go through each word and replace the pattern for i in range(len(words)): if words[i] == pattern: words[i] = replacement # Return the modified string return ' '.join(words) # Example string = \\"Hello world!\\" pattern = \\"Hello\\" replacement = \\"Goodbye\\" modified_string = replace_pattern(string, pattern, replacement) print(modified_string) # Output: Goodbye world!"},{"prompt":"Edit the given Python code to add a tryexcept block. x = 5 y = 0 z = x/y print(z)","completion":"try: x = 5 y = 0 z = x/y print(z) except ZeroDivisionError as e: print('Cannot divide by zero!')"},{"prompt":"Write a basic HTML parser in Python that extracts the data from a given webpage. Not applicable","completion":"import requests from bs4 import BeautifulSoup URL = 'http://example.com' page = requests.get(URL) soup = BeautifulSoup(page.content, 'html.parser') # find all links links = soup.find_all('a') for link in links: print(link.get('href')) # find all text texts = soup.find_all('p') for text in texts: print(text.get_text())"},{"prompt":"Generate a random string in Python of 32 characters using a range of alphanumeric characters. Not applicable","completion":"import random import string def random_string(stringLength=32): lettersAndDigits = string.ascii_letters + string.digits return ''.join(random.choice(lettersAndDigits) for i in range(stringLength)) print(random_string()) # Output: 'K1JyLQQjq5GKFVAvVx7Cv1ocTc62NHAK'"},{"prompt":"Write a Python function to randomize a given list of integers. [1, 2, 3, 4, 5]","completion":"import random def randomize(arr): random.shuffle(arr) return arr"},{"prompt":"Create a web scraper using Python’s Beautiful Soup that scrapes the title of the latest blog post from a given website. Example website URL: https://example.com/blog","completion":"import requests from bs4 import BeautifulSoup # get the html of the website response = requests.get(https://example.com/blog') html = response.text # parse it using beautiful soup soup = BeautifulSoup(html, 'html.parser') # find the latest blog post title latest_post_title = soup.find('div', {'class': 'latest-post'}).h3.text print(latest_post_title)"},{"prompt":"Create a program in Python that takes a sorted array of numbers as input, and prints the pairs of numbers that adds up to 10. arr = [1, 2, 3, 4, 5, 6]","completion":"def findPairs(arr): result = [] first = 0 last = len(arr) - 1 while first < last: if arr[first] + arr[last] == 10: result.append ((arr[first], arr[last])) first += 1 last -= 1 elif arr[first] + arr[last] < 10: first += 1 else: last -= 1 return result print(findPairs([1, 2, 3, 4, 5, 6]))"},{"prompt":"Create a Python function that takes a list of strings and returns a dict with the strings grouped by the length of the strings. ['word', 'sentence', 'hello', 'programming']","completion":"def group_by_length(lst): res = {} for x in lst: length = len(x) if length not in res: res[length] = [x] else: res[length].append(x) return res input = ['word', 'sentence', 'hello', 'programming'] output = group_by_length(input) print(output) // {4: ['word', 'hello'], 8: ['sentence'], 11: ['programming']}"},{"prompt":"Create a class in Python that simulates a timer object.","completion":"class Timer: def __init__(self): self.start_time = 0 self.end_time = 0 def start(self): self.start_time = time.time() def end(self): self.end_time = time.time() def elapsed(self): return self.end_time - self.start_time"},{"prompt":"Create a python program to test if a number is even or odd.","completion":"def is_even(num): if num%2==0: return True else: return False"},{"prompt":"Use Logistic Regression in Python to classify emails into spam and nonspam categories. Not applicable","completion":"#import necessary libraries import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression from sklearn.model_selection import train_test_split #read dataset containing emails dataset = pd.read_csv('emails.csv') #split data into features and labels X = dataset['message'] y = dataset['label'] #transform text into numerical values vectorizer = CountVectorizer() X = vectorizer.fit_transform(X) #split data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0) #build Logistic Regression model log_reg = LogisticRegression() log_reg.fit(X_train, y_train) #evaluate model score = log_reg.score(X_test, y_test) print('Model accuracy: ', score)"},{"prompt":"Write a function in Python that reads in a 2D list of size NxM and returns a list of list of size MxN. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def transposeMatrix(list2D): return list(map(list, zip(*list2D)))"},{"prompt":"Generate a code template for a class in Python.","completion":"class ClassName: def __init__(self, parameters): # initialization code def some_method(self): # method code # additional methods and class variables"},{"prompt":"Write a Python program that prints the time in a given timezone. timezone: UTC+11:00","completion":"from datetime import datetime import pytz def print_time(tz): timezone = pytz.timezone(tz) print(datetime.now(timezone).strftime(\\"%H:%M:%S\\")) print_time(\\"UTC+11:00\\")"},{"prompt":"Optimize the following Python code: def count_dups(arr): dt = {} count = 0 for x in arr: if x in dt: count += 1 else: dt[x] = 1 return count Not applicable","completion":"def count_dups(arr): dt = {} count = 0 for x in arr: count += x in dt dt[x] = 1 return count"},{"prompt":"Build a web application with Flask that displays the output of a Python dictionary. Not applicable","completion":"# app.py from flask import Flask, render_template app = Flask(__name__) @app.route('/') def home(): my_dict = { 'key1': 'value1', 'key2': 'value2', } return render_template('home.html', dict=my_dict) if __name__ == '__main__': app.run(debug=True) # home.html <html> <head> <title>Dictionary Output</title> </head> <body> {% for key, value in dict.items() %} <p>{{ key }} : {{ value }}</p> {% endfor %} </body> </html>"},{"prompt":"Create a Python program that can encrypt a string using the RSA asymmetric algorithm.","completion":"# Imports from Crypto.PublicKey import RSA # Generate an RSA key pair key = RSA.generate(2048) # Retrieve the public key public_key = key.publickey() # Encrypt the message using the public key def encrypt_message(message): encrypted_message = public_key.encrypt(message, 32) return encrypted_message"},{"prompt":"Create a Python program to sort a list of numbers using the quicksort algorithm. [10, 5, 6, 3, 2, 8, 9, 4, 7, 1]","completion":"def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) arr = [10, 5, 6, 3, 2, 8, 9, 4, 7, 1] result = quicksort(arr) print(result)"},{"prompt":"Write a Python function that classifies all words in a sentence into two categories positive and negative. The weather is so gloomy today.","completion":"def classify_word(word): if word in [\\"good\\", \\"wonderful\\", \\"amazing\\"]: return \\"positive\\" if word in [\\"bad\\", \\"gloomy\\", \\"sad\\"]: return \\"negative\\" def classify_sentence(sentence): classified = [] for word in sentence.split(): classified.append(classify_word(word)) return classified classify_sentence(\\"The weather is so gloomy today.\\")"},{"prompt":"Design a Python program that takes a list of strings as the input parameter and returns a single string which contains all the strings that were input. [ 'Hello', 'world!', 'Welcome', 'to', 'the', 'programming', 'world!']","completion":"def strings_to_string(string_list): \\"\\"\\"Function that takes a list of strings as parameter and returns a single string which contains all the strings supplied as input\\"\\"\\" final_string = \\"\\" for string in string_list: final_string += string + \\" \\" return final_string string_list = ['Hello', 'world!', 'Welcome', 'to', 'the', 'programming', 'world!'] print(strings_to_string(string_list))"},{"prompt":"Create a natural language processing (NLP) program in Python that extracts the main topic from a given sentence. Not applicable","completion":"#importing libraries import nltk from nltk.tokenize import sent_tokenize,word_tokenize from nltk.stem import WordNetLemmatizer from nltk.stem import PorterStemmer from nltk import wordpunct_tokenize #Importing input input_sentence = 'This sentence is related to NLP' #Tokenizing the input input_tokens = word_tokenize(input_sentence) #POS-Tagging the tokens input_pos = nltk.pos_tag(input_tokens) #Lemmatizing the tokens lemmatizer = WordNetLemmatizer() input_lemmatized = [lemmatizer.lemmatize(word) for word in input_tokens] #Stemming the tokens stemmer = PorterStemmer() input_stemmed = [ stemmer.stem(word) for word in input_tokens ] #Finding the main topic for (word, pos) in input_pos: if (pos == 'NN' or pos == 'NNP'): main_topic = word print('Main Topic: ', main_topic)"},{"prompt":"Generate a Python program to encode a given number into its Roman Numeral equivalent. Number = 17","completion":"def encodeRoman(num): val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num # Driver program num = 17 print(encodeRoman(num)) # Output: XVII"},{"prompt":"Create a Python script to automate the process of generating passwords.","completion":"import string import random def generate_password(num_chars): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits return ''.join(random.choice(chars) for x in range(num_chars))"},{"prompt":"Create a Python program to generate a bar chart of open and close prices of a stock over the past N days. N=7 open_prices=[112.22, 113.45, 114.98, 111.76, 112.35, 108.91, 111.65] close_prices=[114.72, 114.22, 115.46, 111.75, 112.31, 109.30, 111.33]","completion":"import matplotlib.pyplot as plt open_prices = [112.22, 113.45, 114.98, 111.76, 112.35, 108.91, 111.65] close_prices = [114.72, 114.22, 115.46, 111.75, 112.31, 109.30, 111.33] N = 7 x = range(1, N+1) plt.bar(x, open_prices, color=\\"lightblue\\", width=0.8) plt.bar(x, close_prices, color=\\"red\\", width=0.4, bottom=open_prices) plt.title('Open and Close Prices of a stock') plt.xlabel('Day') plt.ylabel('Price') plt.xticks(x) plt.show()"},{"prompt":"Create a Python program that can calculate the Volume of a pyramid based on the provided side length and height. side_length = 4; height = 6;","completion":"def volume_pyramid(side_length, height): # Calculate base area base = (side_length**2) * 4 # Calculate the volume volume = (base * height) / 3 return volume # driver code side_length = 4 height = 6 result = volume_pyramid(side_length, height) print(result)"},{"prompt":"Create a web scrapper in Python to fetch data from a website. The scrapper should accept a URL and fetch the data and output it in a JSON format. URL to example website: https://www.example.com","completion":"import requests import json url = \\"https://www.example.com\\" response = requests.get(url) if response.status_code == 200: response_data = response.text parsed_data = json.loads(response_data) print(parsed_data)"},{"prompt":"Create a Docker container for a simple web application. The application should expose an endpoint for displaying Hello world. Not applicable","completion":"FROM python:3.7 WORKDIR /app COPY requirements.txt . RUN pip install -r requirements.txt COPY . . EXPOSE 5000 CMD [\\"python\\", \\"app.py\\"] # File app.py from flask import Flask app = Flask(__name__) @app.route('/') def hello(): return 'Hello world!' if __name__ == '__main__': app.run(host='0.0.0.0', debug=True)"},{"prompt":"Write a Python function to sort an array of numbers in descending order.","completion":"def sort_descending(nums): return sorted(nums, reverse=True) print(sort_descending([5, 1, 8, 10, 0, 4]))"},{"prompt":"Write a function to generate a sequence of numbers from 1 to 10 in Python.","completion":"def sequence(): for i in range(1,11): print(i)"},{"prompt":"Generate an HTML content in Python which contains a text input field, submit button and a paragraph to display the results.","completion":"<!DOCTYPE html> <html> <head> <title>Input Form</title> <script> function handleFormResult() { let inputField = document.getElementById('input_field'); let resultField = document.getElementById('result_field'); resultField.innerText = inputField.value; } <\/script> </head> <body> <h1>Enter Your Data Below:</h1> <form> <input type=\\"text\\" id=\\"input_field\\" /> <input type=\\"submit\\" onclick=\\"handleFormResult()\\" /> </form> <h1>Result:</h1> <p id=\\"result_field\\"></p> </body> </html>"},{"prompt":"Create a Python program that implements a search algorithm (e.g. binary search, linear search). Array: [1, 3, 4, 6, 8, 9, 11, 12, 14] Target: 11","completion":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 arr = [1, 3, 4, 6, 8, 9, 11, 12, 14] target = 11 result = linear_search(arr, target) if result == -1: print('Element not found') else: print(f'Element found at index {result}') Output: Element found at index 6"},{"prompt":"Can you design a function in Python to print the first 20 even numbers in ascending order?","completion":"def print_even_numbers(): even_nums = [num for num in range(0, 40) if num % 2 == 0] for num in even_nums[:20]: print(num) print_even_numbers()"},{"prompt":"Create a neural network classifier in Python to predict the correct gender of a given name. Michael","completion":"# Load necessary modules import numpy as np from sklearn.preprocessing import LabelEncoder from keras.utils import to_categorical from keras.models import Sequential from keras.layers import Dense # Load the data name_data = ['Michael', 'John', 'Sarah', 'Paul', 'Rebecca', 'Brian'] gender_data = [0, 0, 1, 0, 1, 0] # Pre-process the data le = LabelEncoder() name_data_encoded = le.fit_transform(name_data) predict_data = ['Michael'] predict_data_encoded = le.transform(predict_data) gender_data_categorical = to_categorical(gender_data) # Create the model model = Sequential() model.add(Dense(8, activation='relu', input_shape=(1,))) model.add(Dense(2, activation=\\"softmax\\")) model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) # Train the model model.fit(name_data_encoded, gender_data_categorical, epochs=30, batch_size=1) # Make predictions prediction = model.predict(np.array(predict_data_encoded).reshape(-1, 1)) classification = np.argmax(prediction) if(classification == 0): print(\\"Male\\") else: print(\\"Female\\")"},{"prompt":"Create a Python program to generate a random password of 8 characters. The output should include random lowercase letters, uppercase letters, and numbers. Not applicable","completion":"import random def generate_password(): password_length = 8 chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' password = ''.join(random.choice(chars) for i in range(password_length)) return password password = generate_password() print(password)"},{"prompt":"Suppose you have a dictionary of books with each containing a title and a list of page numbers that refer to the page numbers of the book. Write a Python program to create a new dictionary with only the page numbers as the keys, and their corresponding titles as the values. book_dict = { The Lord of the Rings: [1, 32, 54, 75], Harry Potter and the Sorcerer's Stone: [1, 26, 92, 132], To Kill a Mockingbird: [1, 15, 52, 101] }","completion":"page_dict = { 1: [\\"The Lord of the Rings\\", \\"Harry Potter and the Sorcerer's Stone\\", \\"To Kill a Mockingbird\\"], 32: [\\"The Lord of the Rings\\"], 54: [\\"The Lord of the Rings\\"], 75: [\\"The Lord of the Rings\\"], 26: [\\"Harry Potter and the Sorcerer's Stone\\"], 92: [\\"Harry Potter and the Sorcerer's Stone\\"], 132: [\\"Harry Potter and the Sorcerer's Stone\\"], 15: [\\"To Kill a Mockingbird\\"], 52: [\\"To Kill a Mockingbird\\"], 101: [\\"To Kill a Mockingbird\\"] }"},{"prompt":"Write a Python program to find the maximum number in an unsorted array without using linear search. arr = [5, 6, 4, 9, 1, 8, 2, 7, 3]","completion":"def find_max_unsorted(arr): max_value = arr[0] for i in range(1, len(arr)): if arr[i] > max_value: max_value = arr[i] return max_value"},{"prompt":"Create a function in Python that takes in a list and returns the median value of the list. List: [2, 7, 3, 8, 5]","completion":"def median(nums): nums.sort() mid = len(nums) // 2 if len(nums) % 2 == 0: return (nums[mid] + nums[mid-1]) / 2 else: return nums[mid]"},{"prompt":"Write a function in Python to search a string for a specific pattern. Search for abc in abcxyzabc","completion":"def search_for_pattern(s, pattern): if pattern in s: return True else: return False result = search_for_pattern(\\"abcxyzabc\\", \\"abc\\") print(result)"},{"prompt":"Create a Python program to simulate a dice roller. Not applicable","completion":"import random def rollDice(): dice1 = random.randint(1,6) dice2 = random.randint(1,6) return dice1 + dice2 print(rollDice())"},{"prompt":"Generate a python script for predicting the stock market price. The stock market data consists of the closing prices of a company.","completion":"import numpy as np import pandas as pd # Load the dataset data = pd.read_csv('stock_data.csv') # Separate the features from the labels X = data.iloc[:,:-1].values y = data.iloc[:,-1].values # Split the dataset into train and test sets from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # Fit the regression model to the dataset from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X_train, y_train) # Make predictions based on the test set y_pred = regressor.predict(X_test) # Visualize the results import matplotlib.pyplot as plt plt.scatter(X_test, y_test, color = 'red') plt.plot(X_test, y_pred, color = 'blue') plt.title('Stock Market Price Prediction') plt.xlabel('Closing Prices') plt.ylabel('Predicted Price') plt.show()"},{"prompt":"Write a Python program to find the middle element of a list. [1,3,5,7,9,11]","completion":"def middle_element(list): mid = len(list) // 2 return list[mid] result = middle_element([1,3,5,7,9,11]) print(result)"},{"prompt":"Design an application in Python to perform sentiment analysis on the tweets of a given Twitter account. Twitter account name: example_accou","completion":"import tweepy from textblob import TextBlob consumer_key = '<enter_your_consumer_key>' consumer_secret = '<enter_your_consumer_secret>' access_token = '<enter_your_access_token>' access_token_secret = '<enter_your_access_token_secret>' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) public_tweets = api.user_timeline(screen_name = 'example_account') for tweet in public_tweets: analysis = TextBlob(tweet.text) print(analysis.sentiment)"},{"prompt":"This code is a Python script that checks the validity of packages on a CD during installation. To use this code, import the necessary modules and classes, and create an instance of the Widget class. The Widget class contains methods for checking the CD and updating the progress bar and validation status. To start the validation process, click the Check button. The validation can be stopped by clicking the button again. The validation status will be displayed in the UI.","completion":"# -*- coding: utf-8 -*- # # Copyright (C) 2006-2010 TUBITAK/UEKAE # # This program is free software; you can redistribute it and/or modify it under # the terms of the GNU General Public License as published by the Free # Software Foundation; either version 2 of the License, or (at your option) # any later version. # # Please read the COPYING file. # import gettext _ = gettext.translation('yali', fallback=True).ugettext from PyQt4.Qt import QWidget, SIGNAL, QIcon, QPixmap import pisi.ui import yali.context as ctx import yali.pisiiface from yali.gui import ScreenWidget from yali.gui.Ui.checkcdwidget import Ui_CheckCDWidget from yali.gui.YaliDialog import Dialog class Widget(QWidget, ScreenWidget): name = \\"mediaCheck\\" def __init__(self): QWidget.__init__(self) self.ui = Ui_CheckCDWidget() self.ui.setupUi(self) self.check_media_stop = True self.connect(self.ui.checkButton, SIGNAL(\\"clicked()\\"), self.slotCheckCD) if ctx.consts.lang == \\"tr\\": self.ui.progressBar.setFormat(\\"%%p\\") self.ui.validationSucceedBox.hide() self.ui.validationFailBox.hide() self.ui.progressBar.hide() def shown(self): pass def slotCheckCD(self): if self.check_media_stop: self.check_media_stop = False self.ui.progressBar.show() icon = QIcon() icon.addPixmap(QPixmap(\\":/gui/pics/dialog-error.png\\"), QIcon.Normal, QIcon.Off) self.ui.checkButton.setIcon(icon) self.ui.checkButton.setText(\\"\\") self.checkMedia() else: self.check_media_stop = True self.ui.progressBar.show() icon = QIcon() icon.addPixmap(QPixmap(\\":/gui/pics/task-accepted.png\\"), QIcon.Normal, QIcon.Off) self.ui.checkButton.setIcon(icon) self.ui.checkButton.setText(_(\\"Validate\\")) def checkMedia(self): ctx.mainScreen.disableNext() ctx.mainScreen.disableBack() ctx.interface.informationWindow.update(_(\\"Starting validation...\\")) class PisiUI(pisi.ui.UI): def notify(self, event, **keywords): pass def display_progress(self, operation, percent, info, **keywords): pass yali.pisiiface.initialize(ui=PisiUI(), with_comar=False, nodestDir=True) yali.pisiiface.addCdRepo() ctx.mainScreen.processEvents() pkg_names = yali.pisiiface.getAvailablePackages() self.ui.progressBar.setMaximum(len(pkg_names)) self.ui.checkLabel.setText(_(\\"Package validation is in progress. \\" \\"Please wait until it is completed.\\")) cur = 0 flag = 0 for pkg_name in pkg_names: cur += 1 ctx.logger.debug(\\"Validating %s \\" % pkg_name) ctx.interface.informationWindow.update(_(\\"Validating %s\\") % pkg_name) if self.check_media_stop: continue try: yali.pisiiface.checkPackageHash(pkg_name) self.ui.progressBar.setValue(cur) except: rc = ctx.interface.messageWindow(_(\\"Warning\\"), _(\\"Validation of %s package failed.\\" \\"Please remaster your installation medium and\\" \\"reboot.\\") % pkg_name, type=\\"custom\\", customIcon=\\"warning\\", customButtons=[_(\\"Skip Validation\\"), _(\\"Skip Package\\"), _(\\"Reboot\\")], default=0) flag = 1 if not rc: self.ui.validationBox.hide() self.ui.validationFailBox.show() ctx.mainScreen.enableNext() break elif rc == 1: continue else: yali.util.reboot() if not self.check_media_stop and flag == 0: ctx.interface.informationWindow.update(_('<font color=\\"#FFF\\"><b>Validation succeeded. You can proceed with the installation.</b></font>')) self.ui.validationSucceedBox.show() self.ui.validationBox.hide() else: ctx.interface.informationWindow.hide() self.ui.progressBar.setValue(0) yali.pisiiface.removeRepo(ctx.consts.cd_repo_name) ctx.mainScreen.enableNext() ctx.mainScreen.enableBack() self.ui.checkLabel.setText(_(\\"Package validation is finished.\\")) ctx.interface.informationWindow.hide()"},{"prompt":"Create a function in Python that takes a number as input and returns the random number generated.","completion":"import random def generate_random_number(number): random.seed(number) rand_number = random.randint(1, number**2) return rand_number"},{"prompt":"Write a function in Python to query the database and return the row value. Table Name: People Columns: Name, Age, Gender","completion":"def query_database(table_name, columns): conn = sqlite3.connect('test.db') cur = conn.cursor() cur.execute(f\\"SELECT {columns} FROM {table_name}\\") rows = cur.fetchall() conn.close() return rows"},{"prompt":"Write a Python program that creates a dictionary of emails and passwords based on the given input. A list of emails and passwords: [ ('John', 'j12345'), ('Adam', 'a12345'), ('Alex', 'a54321') ]","completion":"def create_email_password_dict(data): email_password_dict = {} for name, password in data: email_password_dict[name.lower() + '@example.com'] = password return email_password_dict email_password_dict = create_email_password_dict(information)"},{"prompt":"Can you generate a machine learning model in Python that can classify text strings into two different categories?","completion":"#importing the libraries import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB #loading the dataset df = pd.read_csv('data.csv') X = df['text_strings'] y = df['label'] #split into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 0) #creating the bag of words model with CountVectorizer cv = CountVectorizer(max_features = 500).fit(X_train) X_train_cv = cv.transform(X_train) X_test_cv = cv.transform(X_test) #creating the ML model classifier = MultinomialNB().fit(X_train_cv, y_train) #making prediction predictions = classifier.predict(X_test_cv)"},{"prompt":"Write a Python program to find the number of system parameters that are not set correctly.","completion":"def find_system_parameter_count(): \\"\\"\\"Find the number of system parameters not set correctly.\\"\\"\\" count = 0 for param in system_parameters: if not is_correctly_set(param): count += 1 return count"},{"prompt":"Using Python, design an algorithm to summarize a given text. text = This is a piece of text, that needs to be summarized. To summarize, you need to condense the information into a shorter form, while still conveying the main points of the text. You also need to make sure that the summary retains the meaning of the original text.","completion":"def summarize(text): sentences = text.split('.') # Create a dictionary to store the number of occurrences of each word in the input word_occurrences = {} for sentence in sentences: for word in sentence.split(): if word not in word_occurrences: word_occurrences[word] = 0 word_occurrences[word] += 1 # Sort the words based on their occurrences in the text sorted_words = sorted(word_occurrences.items(), key=lambda x: x[1], reverse=True) # Use the top N most frequent words as the cornerstone of the summary N = min(10, len(sorted_words)) cornerstone_words = [word[0] for word in sorted_words[:N]] # Find the sentences that contain the cornerstone words summary = \\"\\" for sentence in sentences: for word in sentence.split(): if word in cornerstone_words: summary += \\" \\" + sentence break return summary result = summarize(text) print(result)"},{"prompt":"Write an optimized sequential search algorithm in Python that takes a list of numbers and a target number as input and returns the index of the target if it exists in the list. [1, 2, 3, 4, 5, 6], target = 4","completion":"def find_target(nums, target): for i in range(len(nums)): if nums[i] == target: return i return -1"},{"prompt":"Construct a Python program to split a string at a given character occurrence index. Input String: Hello World Index: 6","completion":"def split_string(string, index): return string[:index] + \\",\\" + string[index+1:] s = \\"Hello World\\" index = 6 new_string = split_string(s, index) print(new_string) Output: Hello,World"},{"prompt":"Create a Python function to input a string and then return the number of vowels found in the string. hello","completion":"def count_vowels(string): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] count = 0 for letter in string.lower(): if letter in vowels: count += 1 return count output = count_vowels(\\"Hello\\") print(output) # output = 2"},{"prompt":"Design a web application to display the search results for sports listings.","completion":"// Step 1: Design the database schema /* The database schema would include tables such as Users, Sports, Venues, Events, etc and the fields would be chosen accordingly like user id, sports name, venue name, event start/end time, etc. */ // Step 2: Design and develop the application /* The application would be a web application consisting of back-end and front-end components. The back-end would involve a server-side scripting language such as PHP or Python and the front-end would involve HTML/CSS and JavaScript. The application would interact with the database to retrieve the search results. */ // Step 3: Design the user interface /* The user interface of the application would involve a search box for users to enter relevant search terms. The results would be displayed in a tabular format with details such as sport name, venue name, start/end times, etc. */"},{"prompt":"Create a python program to concatenate n strings and return the concatenated string input_strings = [Hello, World, !]","completion":"def concatenate_strings(input_strings): output_string = \\"\\" for string in input_strings: output_string += string return output_string"},{"prompt":"Generate a Python function to calculate compound interest.","completion":"def calculate_compound_interest(principal_amount, rate, time_period): total_amount = principal_amount * (pow((1 + rate / 100), time_period)) compound_interest = total_amount - principal_amount return compound_interest # Driver code principal_amount = 1000 rate = 4.4 time_period = 2 # Calculating compound interest compound_interest = calculate_compound_interest(principal_amount, rate, time_period) # Printing the values print(\\"Compound interest is\\", compound_interest)"},{"prompt":"Convert the problem statement below into valid python code with proper variable declarations and print statements. Given an integer n, find the sum of the multiples of 3 and 5 that are less than or equal to","completion":"#Given an integer n, find the sum of the multiples of 3 and 5 that are less than or equal to n def findSumOfMultiples(n): sum = 0 for i in range(1, n + 1): if (i % 3 == 0) or (i % 5 == 0): sum = sum + i return sum n = int(input(\\"Enter a positive number: \\")) print(findSumOfMultiples(n))"},{"prompt":"Please provide a python code snippet that counts the number of words in a given sentence. my_string = This is a sentence with five words.","completion":"my_string = \\"This is a sentence with five words.\\" words = my_string.split(\\" \\") print(len(words))"},{"prompt":"Create a program in Python to generate a list of prime numbers up to N","completion":"def prime_list(N): isPrime = [True for i in range(N + 1)] p = 2 while p * p <= N: if isPrime[p]: for i in range(p * p, N + 1, p): isPrime[i] = False p += 1 prime_nums = [] for p in range(2, N): if isPrime[p]: prime_nums.append(p) return prime_nums"},{"prompt":"w would you create a web scrapper to extract data from a given website?","completion":"The first step is to identify the data that needs to be extracted. Once the data to be extracted is determined, the specific elements containing the data need to be identified. This can be done by manually inspecting the HTML of the website. After the elements containing the data are identified, a scraper can be built with a programming language such as Python, which will locate the elements and extract the data. The scraper should be coded in such a way that it can be automated and repeated."},{"prompt":"Generate a Python program to find the intersection of two lists.","completion":"def intersect(l1, l2): return [x for x in l1 if x in l2]"},{"prompt":"Create a basic Python script to open a spreadsheet and read a particular column of data. Not applicable","completion":"import pandas as pd file_name = 'filename.xlsx' column_name = 'column_name' # Open the file df = pd.read_excel(file_name) # Read the column data = df[column_name] # Iterate the rows for i, row in data.iterrows(): # Do something with each row of data"},{"prompt":"Generate a list of 100 random numbers between 1 and 10 within python.","completion":"import random random_list = [] for i in range(100): random_list.append(random.randint(1,10)) print(random_list)"},{"prompt":"Write a python program to find the Longest Common Subsequence (LCS) of two sequences X = MZJAWXU Y = XMJYAUX","completion":"def lcs(X, Y, m, n): if m == 0 or n == 0: return 0; elif X[m-1] == Y[n-1]: return 1 + lcs(X, Y, m-1, n-1); else: return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n)); # Function to find the Longest Common Subsequence (LCS) X = \\"MZJAWXU\\" Y = \\"XMJYAUX\\" m = len(X) n = len(Y) print(\\"Length of Longest Common Subsequence is\\", lcs(X, Y, m, n))"},{"prompt":"Generate a program in Python to calculate the factorial of an integer.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Can you make a Python script to print out the average price of all the items in a list? [{name: chair, price: 20}, {name: table, price: 30}, {name: sofa, price: 40}]","completion":"items = [{\\"name\\": \\"chair\\", \\"price\\": 20}, {\\"name\\": \\"table\\", \\"price\\": 30}, {\\"name\\": \\"sofa\\", \\"price\\": 40}] # calculate the total price of all items total_price = 0 for item in items: total_price += item[\\"price\\"] # calculate the average price average_price = total_price / len(items) # print the result print(f\\"Average price: {average_price}\\")"},{"prompt":"Suggest a completion for the following python code to merge two given dictionaries into one. def merge_dict(dict1, dict2)","completion":"def merge_dict(dict1, dict2): result = dict1.copy() result.update(dict2) return result"},{"prompt":"Create a function in Python that takes three numbers and returns the maximum value.","completion":"def max_value(num1, num2, num3): max_val = num1 if num2 > max_val: max_val = num2 if num3 > max_val: max_val = num3 return max_val"},{"prompt":"Build a neural network model in Python to classify colors into red, green and blue.","completion":"#import libraries import numpy as np import matplotlib.pyplot as plt from sklearn.preprocessing import LabelEncoder from sklearn.model_selection import train_test_split import keras from keras.models import Sequential from keras.layers import Dense #create a dataset data = np.array([[255, 0, 0], [0, 255, 0], [0, 0, 255]]) labels = np.array(['red', 'green', 'blue']) #encode target labels encoder = LabelEncoder() encoded_labels = encoder.fit_transform(labels) #split dataset into 80% train and 20% test x_train, x_test, y_train, y_test = train_test_split(data, encoded_labels, test_size=0.2) #set parameters input_dim = 3 output_dim = 3 batch_size = 10 epochs = 10 #build a sequential model model = Sequential() model.add(Dense(64, activation='relu', input_dim=input_dim)) model.add(Dense(output_dim, activation='softmax')) #compile the model model.compile(loss='sparse_categorical_crossentropy', optimizer='sgd', metrics=['accuracy']) #train and evaluate the model model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs) score = model.evaluate(x_test, y_test, batch_size=batch_size)"},{"prompt":"Create an HTTP GET request in Python.","completion":"import requests resp = requests.get(\\"http://example.com\\")"},{"prompt":"Write a Python code to sort the given list of strings using insertion sort. ['tuna', 'apple', 'grapes', 'orange']","completion":"def insertion_sort(arr): \\"\\"\\"Sorts the given list of strings using insertion sort\\"\\"\\" # traverse through 1 to len(arr) for i in range(1, len(arr)): key = arr[i] # Move elements of arr[0..i-1], that are # greater than key, to one position ahead # of their current position j = i-1 while j >= 0 and key < arr[j] : arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key # test arr = ['tuna', 'apple', 'grapes', 'orange'] insertion_sort(arr) print (\\"Sorted Array:\\") print (arr)"},{"prompt":"Create a Python function that takes a single argument and prints the Fibonacci sequence from 0 to the argument value. Argument value: 9","completion":"def print_fibonacci_sequence(num): a = 0 b = 1 print(a, end=\\" \\") print(b, end=\\" \\") for i in range(2,num): c = a + b a = b b = c print(c, end=\\" \\") print_fibonacci_sequence(9) # prints 0 1 1 2 3 5 8 13 21"},{"prompt":"Design a function in Python that takes a list of strings as input and returns a new list of strings that contains only the string with the longest length. ['cat', 'kitten', 'puppy']","completion":"def get_longest_strings(string_list): longest_strings = [] longest_length = 0 for string in string_list: if len(string) > longest_length: longest_length = len(string) for string in string_list: if len(string) == longest_length: longest_strings.append(string) return longest_strings longest_strings = get_longest_strings(['cat', 'kitten', 'puppy']) print(longest_strings)"},{"prompt":"Write a Python function to calculate the total cost of a shopping cart given a list of items. The items list should contain the item name and price. items = [('Apple', 2.25), ('Banana', 0.75), ('Lemon', 1.50)]","completion":"def calculateTotalCost(items): total_cost = 0 for item in items: total_cost += item[1] return total_cost # Usage total_cost = calculateTotalCost(items) print(total_cost)"},{"prompt":"Using advanced data structures, write Python code to search for a string within a larger string. String = Data Science is the study of the occurrence, analysis, and prediction of outcomes from data sets. Search = outcomes","completion":"def search(string, search): # Create a Trie type datastructure t = {} # Put each character of the string in a lexicographic tree for char in string: if char in t: t = t[char] else: t[char] = {} t = t[char] # Now search for the search string in the trie structure cursor = t for char in search: if char in cursor: cursor = cursor[char] else: return False return True"},{"prompt":"Create a web scraper in Python to extract all links from a website.","completion":"import requests from bs4 import BeautifulSoup def get_all_links(url): # make a GET request to fetch the raw HTML content html_content = requests.get(url).text # parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # extract all links from web page links = soup.find_all(\\"a\\") return links"},{"prompt":"mprove the following Python code: def even_odd(x): if x % 2 == 0: print (even) else: print (odd) not applicable","completion":"def even_odd(x): if isinstance(x, int): if x % 2 == 0: print(\\"even\\") else: print(\\"odd\\") else: print(\\"x must be an integer\\")"},{"prompt":"Generate a Python script for sorting a list in ascending order. [3, 4, 8, 5, 10]","completion":"def sortList(list): list.sort() return list unsorted_list = [3, 4, 8, 5, 10] sorted_list = sortList(unsorted_list) print(\\"Sorted list:\\", sorted_list)"},{"prompt":"Develop a Python program to generate a list of all possible DNA sequences using a given sequence. sequence: ATCG","completion":"# Create a list to store all possible DNA sequences dna_sequence_list = [] # Generate the combinations using recursion def generate_dnasequence_combinations(sequence, seq_length, curr_index): # Break the execution when the index is greater than the length of the sequence if (curr_index == seq_length): dna_sequence_list.append(''.join(sequence)) return # Generate the combinations for each character in the sequence for i in range(curr_index, len(sequence)): # Swap the characters sequence[curr_index], sequence[i] = sequence[i], sequence[curr_index] #add the swapped character to the list generate_dnasequence_combinations(sequence, seq_length, curr_index + 1) # Swap back the characters sequence[curr_index], sequence[i] = sequence[i], sequence[curr_index] # Call the generate_dnasequence_combinations with the initial sequence generate_dnasequence_combinations(list(sequence), len(sequence), 0) # Print all the combinations print(dna_sequence_list)"},{"prompt":"Create a function in Python to generate a random string composed of letters and digits of length 8 characters.","completion":"import random def random_string_generator(): char_set = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' random_string = ''.join(random.sample(char_set, 8)) return random_string print(random_string_generator())"},{"prompt":"Write a Python script to generate a dictionary with counts of unique characters in a given string. String = Hello World!","completion":"def char_count(string): char_dict = {} for char in string: if char in char_dict: char_dict[char] += 1 else: char_dict[char] = 1 return char_dict string = \\"Hello World!\\" result = char_count(string) print(result) # Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"},{"prompt":"Edit the following Python code pasted and return the output. def print_message(name): print(Hello +name) print(Matthew)","completion":"def print_message(name): print(\\"Hello \\"+name) name = \\"Matthew\\" print_message(name)"},{"prompt":"Write a Python program to evaluate a mathematical expression string and return the result. Expression string: 2*3+4/5","completion":"import re # Function to evaluate a given expression string def evaluate(expression): # Regular expression to match only number and operators regex = re.compile('(d+.?d*)|(S)') tokens = regex.findall(expression) # Initialize two stacks, one for operands and one for operators operands = [] operators = [] # Iterate through tokens for token in tokens: # If token is an operator if token[1]: operators.append(token[1]) # If token is a number else: operands.append(float(token[0])) # Evaluate expression until all the operators are processed while (len(operators) > 0): # Pop one operator and two operands operator = operators.pop() operator2 = operands.pop() operator1 = operands.pop() # Evaluate the expression result = 0 if (operator == '+'): result = operator1 + operator2 elif (operator == '-'): result = operator1 - operator2 elif (operator == '*'): result = operator1 * operator2 elif (operator == '/'): result = operator1 / operator2 # Push the result back to the stack operands.append(result) # Return result return operands[0] expression = '2*3+4/5' result = evaluate(expression) print(result)"},{"prompt":"Create a Python program that uses regular expression to find and extract certain information from a text. Text: The customer's address is 123 Main Street, Anytown, USA.","completion":"import re text = \\"The customer's address is 123 Main Street, Anytown, USA.\\" address_pattern = re.compile(r'(d+s*(?:[A-Za-z]+s*)+),s*([A-Za-zs]+),s*([A-Z]{2})') match = address_pattern.search(text) if match: street = match[1] city = match[2] state = match[3] print(f'{street}, {city}, {state}')"},{"prompt":"Launch a platform client with given parameters. The function takes in an avatar name, password, grid information, client name, client path, location, and a boolean value indicating whether to purge the cache. The function then launches the client with the given parameters.","completion":"#!/usr/bin/python # -*- encoding: utf-8 -*- # Copyright (c) Contributors, http://opensimulator.org/ # See CONTRIBUTORS.TXT for a full list of copyright holders. # # Redistribution and use in source and binary forms, with or without # modification, are permitted provided that the following conditions are met: # * Redistributions of source code must retain the above copyright # notice, this list of conditions and the following disclaimer. # * Redistributions in binary form must reproduce the above copyright # notice, this list of conditions and the following disclaimer in the # documentation and/or other materials provided with the distribution. # * Neither the name of the OpenSim Project nor the # names of its contributors may be used to endorse or promote products # derived from this software without specific prior written permission. # # THIS SOFTWARE IS PROVIDED BY THE DEVELOPERS \`\`AS IS'' AND ANY EXPRESS OR # IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED # WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE # DISCLAIMED. IN NO EVENT SHALL THE CONTRIBUTORS BE LIABLE FOR ANY # DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL # DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE # GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS # INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER # IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR # OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF # ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. import logging import os import subprocess import urllib import PyQt4.QtCore import RezzMe.exceptions import RezzMe.launchers.hippo class PlatformLauncher(object): def __init__(self): self._clientsDefault = {'hippo' : 'hippo_opensim_viewer', 'secondlife': 'secondlife'} self._clients = {} for c in self._clientsDefault: for bin in os.environ['PATH'].split(':'): t = '%s/%s' % (bin, self._clientsDefault[c]) if os.path.exists(t): self._clients[c] = t break def _gClients(self): return self._clients Clients = property(fget = _gClients) def _gClientPattern(self): return 'client executable (*)' ClientPattern = property(fget = _gClientPattern) def HippoDefaultGrids(self, path): hippoHome = os.path.dirname(os.path.realpath(path)) defaultGrids = '%s/app_settings/default_grids.xml' % hippoHome if os.path.exists(defaultGrids): logging.debug(\\"launchers.linux2: found hippo's default_grids.xml at %s\\", defaultGrids) return defaultGrids logging.debug(\\"launchers.linux2: trying to find hippo's default_grids.xml via locate...\\") defaultGrids = subprocess.Popen(['locate', 'app_settings/default_grids.xml'], stdout = subprocess.PIPE).communicate()[0].rstrip() if defaultGrids: for p in defaultGrids.split(): if 'hippo' in p.lower(): logging.debug(\\"launchers.linux2: found hippo's default_grids.xml at %s\\", p) return p return None def Launch(self, avatar, password, gridInfo, clientName, client, location, purge): # fix ' character appearing in irish names avatar = urllib.unquote(avatar) clientArgs = [ ] clientArgs += ['-loginuri', gridInfo['login']] clientArgs += ['-multiple'] keys = gridInfo.keys() if 'welcome' in keys: clientArgs += ['-loginpage', gridInfo['welcome']] if 'economy' in keys: clientArgs += ['-helperuri', gridInfo['economy']] if purge: clientArgs += ['--purge'] # mirror clientArgs into logArgs to avoid capturing passwords into # log files logArgs = clientArgs[:] if avatar and password: clientArgs += ['-login'] avatar = avatar.replace('(', '(') avatar = avatar.replace(')', ')') clientArgs += map(lambda x: \\"%s\\" % x, avatar.split()) logArgs = clientArgs[:] clientArgs += [password] logArgs += [\\"'**********'\\"] if 'hippo' in clientName.lower() or 'hippo' in client.lower(): userGridXml = os.path.expanduser('~/.hippo_opensim_viewer/user_settings/grid_info.xml') defaultGridXml = self.HippoDefaultGrids(client) gridnick = RezzMe.launchers.hippo.HippoGridInfoFix(gridInfo, userGridXml, defaultGridXml) clientArgs += ['-grid', gridnick] logArgs += ['-grid', gridnick] # has to come last if location: clientArgs += [location] logArgs += [location] # all systems go: start client logging.debug('launchers.linux2: client %s %s', client, ' '.join(logArgs)) # os.execvp(client, clientArgs) PyQt4.QtCore.QProcess.startDetached(client, clientArgs)"},{"prompt":"Create a game with Python that allows two players.","completion":"import random players = [\\"Player 1\\", \\"Player 2\\"] # Assign random numbers to each of the players player_1_num = random.randint(1, 10) player_2_num = random.randint(1, 10) # Player 1 Turn player_1_guess = input(\\"What is your guess, Player 1? (1-10): \\") if player_1_guess != player_1_num: print(\\"Sorry! That was not the correct answer.\\") print(\\"Player 2 wins!\\") else: print(\\"Correct! Player 1 wins!\\") # Player 2 Turn player_2_guess = input(\\"What is your guess, Player 2? (1-10): \\") if player_2_guess != player_2_num: print(\\"Sorry! That was not the correct answer.\\") print(\\"Player 1 wins!\\") else: print(\\"Correct! Player 2 wins!\\")"},{"prompt":"Develop a web service to process text in a REST API using Python.","completion":"#import libraries from flask import Flask, jsonify, request import re #initialize flask app = Flask(__name__) #define the endpoint @app.route('/process_text') def process_text(): #get text from the request text = request.args.get('text') #process the text processed_text = re.sub('[^a-zA-Z0-9]', '', text) #return the result return jsonify({\\"result\\" : processed_text}) #run the server app.run(host='0.0.0.0')"},{"prompt":"Create a Python program to search for a specific number in an array. The program should loop through the array until it finds the specified number or reach the end of the array. array = [22, 54, 71, 12, 7, 37] number = 12","completion":"def search(array, number): for i in range(len(array)): if array[i] == number: return i return -1 array = [22, 54, 71, 12, 7, 37] number = 12 number_index = search(array, number) if number_index != -1: print(\\"Found at index: \\"+str(number_index)) else: print(\\"Number not found\\")"},{"prompt":"Write a Python program to generate a multiplication table of given number. number = 8","completion":"for i in range(1, 11): print(number,\\"X\\",i,\\"=\\",number*i)"},{"prompt":"Create a Flask application for a blog in Python. Not applicable","completion":"# Import Flask Library from flask import Flask # Create Flask App app = Flask(__name__) # Routes @app.route('/') def index(): return 'Welcome to my blog!' @app.route('/posts') def posts(): return 'These are my posts!' # Run Flask App if __name__ == '__main__': app.run()"},{"prompt":"Generate a recommendation system in Python to suggest songs to users based on their watch history.","completion":"import pandas as pd from sklearn.neighbors import NearestNeighbors # Read in the data df = pd.read_csv('songs.csv') # Calculate the similarities between songs model_knn = NearestNeighbors(metric='cosine', algorithm='brute') model_knn.fit(df[user_feats]) def recommend_songs(df, model_knn, song_id): distances, indices = model_knn.kneighbors(df.iloc[song_id, :].values.reshape(1, -1), n_neighbors = 5) # Suggest the most similar songs for i in range(0, len(distances.flatten())): if i == 0: print ('Recommendations for {0}:n'.format(df['song_title'][song_id])) else: print ('{0}: {1}, with distance of {2}:'.format(i, df['song_title'][indices.flatten()[i]], distances.flatten()[i]))"},{"prompt":"Code an algorithm in Python to compute the Fibonacci sequence. A positive integer n. n = 10","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b # Driver Program print(fibonacci(10)) # Output: 55"},{"prompt":"You need to write a python script that takes user input for hours worked and outputs the amount of salary due.","completion":"def calculate_salary(hours_worked): wage_per_hour = 8.0 salary = wage_per_hour * hours_worked return salary"},{"prompt":"Write a python program to calculate the Levenshtein distance, which is a measure of similarity between two strings.","completion":"def levenshtein_distance(str1, str2): \\"\\"\\" Write a python program to calculate the Levenshtein distance, which is a measure of similarity between two strings. \\"\\"\\" m = len(str1) n = len(str2) # Create a matrix to store edit distances edit_distance = [[0 for i in range(n+1)] for j in range(m+1)] # Fill the matrix for i in range(m+1): for j in range(n+1): if i == 0: edit_distance[i][j] = j elif j == 0: edit_distance[i][j] = i elif str1[i-1] == str2[j-1]: edit_distance[i][j] = edit_distance[i-1][j-1] else: edit_distance[i][j] = 1 + min(edit_distance[i-1][j], edit_distance[i][j-1], edit_distance[i-1][j-1]) # Return the last element of the matrix return edit_distance[m][n]"},{"prompt":"Generate a correct Python program for plotting bar chart for the following data. xaxis: [Honda, Ferrari, Ford] yaxis: [50, 100, 150]","completion":"import matplotlib.pyplot as plt x = [\\"Honda\\", \\"Ferrari\\", \\"Ford\\"] y = [50, 100, 150] plt.bar(x, y) plt.title(\\"Car Comparison\\") plt.xlabel(\\"Cars\\") plt.ylabel(\\"Value\\") plt.show()"},{"prompt":"Develop a program in Python to remove all the vowels from a given sentence. Sentence: This is a test sentence.","completion":"def removeVowels(sentence): vowels = \\"aeiouAEIOU\\" result = \\"\\" for char in sentence: if char not in vowels: result = result + char return result print(removeVowels(\\"This is a test sentence.\\")) # Output: \\"Ths s tst sntnc.\\""},{"prompt":"Develop a web application using Django and Python to show a list of names and corresponding contact details.","completion":"import os # Set up Django os.environ.setdefault(\\"DJANGO_SETTINGS_MODULE\\", \\"myproject.settings\\") import django django.setup() # Define the web application from django.http import HttpResponse def index(request): # Create a list of names and contact numbers names = ['John', 'Anthony', 'Dave'] contacts = ['212-555-1234', '212-555-2345', '212-555-3456'] # Build an html table html = '<html><table><tr><th>Name</th> <th>Contact Number</th> </tr>' for i in range(len(names)): html += '<tr><td align=center>' + names[i] + '</td> <td align=center>' + contacts[i] + '</td> </tr>' # Close the table html += '</table></html>' return HttpResponse(html)"}]`),N={name:"App",components:{PoemCard:E},data(){return{searchQuery:"",visibleCount:4,poemsData:q,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.prompt&&e.prompt.toLowerCase().includes(a)||e.completion&&e.completion.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},I={class:"search-container"},R={class:"card-container"},D={key:0,class:"empty-state"},j=["disabled"],F={key:0},L={key:1};function z(a,e,l,u,i,o){const f=_("PoemCard");return r(),n("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",I,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),g(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=s=>i.searchQuery=s),placeholder:"Search..."},null,512),[[y,i.searchQuery]]),i.searchQuery?(r(),n("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=s=>i.searchQuery="")}," ✕ ")):p("",!0)]),t("div",R,[(r(!0),n(b,null,w(o.displayedPoems,(s,h)=>(r(),v(f,{key:h,poem:s},null,8,["poem"]))),128)),o.displayedPoems.length===0?(r(),n("div",D,' No results found for "'+m(i.searchQuery)+'". ',1)):p("",!0)]),o.hasMorePoems?(r(),n("button",{key:0,class:"load-more-button",disabled:i.isLoading,onClick:e[2]||(e[2]=(...s)=>o.loadMore&&o.loadMore(...s))},[i.isLoading?(r(),n("span",L,"Loading...")):(r(),n("span",F,"See more"))],8,j)):p("",!0)])}const O=c(N,[["render",z],["__scopeId","data-v-47a48fb8"]]),W=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/3.md","filePath":"quotes/3.md"}'),M={name:"quotes/3.md"},B=Object.assign(M,{setup(a){return(e,l)=>(r(),n("div",null,[x(O)]))}});export{W as __pageData,B as default};
