import{_ as c,o as r,c as n,a as t,m as d,t as m,C as _,M as g,U as y,f as p,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},P={class:"poem-container"},T={class:"review"},C={class:"review-title"},S={class:"review-content"};function q(i,e,l,u,a,o){return r(),n("div",P,[t("div",T,[t("div",C,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),d(m(l.poem.prompt),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",S,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),d(m(l.poem.completion),1)])])])}const E=c(k,[["render",q],["__scopeId","data-v-0862b07d"]]),I=JSON.parse(`[{"prompt":"Optimize this code in Python to reduce the time complexity from O(n^2) to O(nlogn). def maximum_two(arr): m1 = m2 = float('inf') for n in arr: if n > m2: if n > m1: m1, m2 = n, m1 else: m2 = n return (m1, m2)","completion":"def maximum_two(arr): arr.sort(reverse=True) m1 = arr[0] m2 = arr[1] return (m1, m2)"},{"prompt":"Generate a new Python program to be able to classify a list of emails.","completion":"def classify_email(email_list): classified_list = [] for email in email_list: if '@' in email: classified_list.append('Valid') else: classified_list.append('Invalid') return classified_list"},{"prompt":"Create a machine learning program using Python to predict values from a linear regression model.","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt # Generate some random data x = np.random.randint(0,100,20) y = np.random.randint(0,100,20) # Plotting the points plt.plot(x, y, \\"ro\\") # Generating the linear regression model #X = X1.reshape(-1, 1) X = np.array(x).reshape(-1, 1) # Create linear regression object from sklearn.linear_model import LinearRegression reg = LinearRegression() #Train the model using the data reg = reg.fit(X, y) #Calculate the coefficient print(\\"Coefficient: \\", reg.coef_[0]) #Prediction predicted = reg.predict(np.array(x).reshape(-1, 1)) print(\\"Predicted Values: \\", predicted)"},{"prompt":"Create a python data structure that stores the following three values: apple: 0, orange: 25, and banana: 52.","completion":"numbers = {\\"apple\\": 0, \\"orange\\": 25, \\"banana\\": 52}"},{"prompt":"Write a Python code that prints out the prime numbers from 1 to 100","completion":"print(\\"The prime numbers from 1 to 100 are:\\") for number in range(1, 101): if number > 1: for i in range(2, number): if (number % i) == 0: break else: print(number)"},{"prompt":"Create a python code to extract the first name from a given full name. full_name = 'John Smith'","completion":"def extractFirstName(full_name): first_name = full_name.split()[0] return first_name # Input full_name = 'John Smith' # Output result = extractFirstName(full_name) print(result)"},{"prompt":"Create a Python program that features an endless loop that repeatedly asks the user to input a number between 1 and 10. When the number is valid, the program should output the number plus one. Not applicable","completion":"while True: num = int(input(\\"Please input a number between 1 and 10: \\")) if num in range(1, 11): print(num + 1) else: print(\\"Invalid number!\\")"},{"prompt":"Analyze a Python program to check if any variable names are longer than 20 characters. def some_function(a_variable, short_variable): long_variable_name_is_not_good_practice = 1","completion":"There is a variable (long_variable_name_is_not_good_practice) with a name that is longer than 20 characters."},{"prompt":"Write a Python script that processes the list of words, and changes the case of the characters to capital letters. words = [elephant, goose, rabbit]","completion":"def capitalize_strings(words): capital_words = [] for word in words: capital_words.append(word.upper()) return capital_words capitalized_words = capitalize_strings(words) print(capitalized_words)"},{"prompt":"Generate a Python program to detect whether a given integer is a prime number.","completion":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"prompt":"Create a dictionary in Python storing customer information which contains the name, address, and email.","completion":"customer = { 'name': '', 'address': '', 'email': '' }"},{"prompt":"Create a Google Cloud Function in Python that makes a GET call to an external API with an API key. API endpoint: https://example.com/api and API key: abc1234","completion":"import os import requests def call_api(request): api_key = os.environ.get('API_KEY') endpoint = os.environ.get('ENDPOINT') response = requests.get(endpoint, params={'api_key': api_key}) return response.json() if __name__ == '__main__': os.environ['API_KEY'] = 'abc1234' os.environ['ENDPOINT'] = 'https://example.com/api' response = call_api(None) print(response)"},{"prompt":"Design a Python program which takes a list of strings and prints the elements in reversed order.","completion":"def list_reverse(sequence): if len(sequence) == 0: return [] else: return list_reverse(sequence[1:]) + [sequence[0]]"},{"prompt":"Generate a python function that takes a dataframe as its input and returns the sum of all values in the dataframe. import pandas as pd df = pd.DataFrame([[3, 4, 5], [1, 2, 3], [4, 5, 6]], columns = ['A', 'B', 'C'])","completion":"def sum_dataframe(df): total = 0 for col in df.columns: total += df[col].sum() return total # Example usage print(sum_dataframe(df)) # prints 18"},{"prompt":"Generate a batch of 10 code samples for a classification task that takes a piece of code as input and outputs its programming language. Not applicable","completion":"Java // package com.example; public class Example { public static void main(String[] args) { System.out.println(\\"Hello World!\\"); } } Python # This program prints \\"Hello World\\" print(\\"Hello World\\") Swift // This program prints \\"Hello World\\" print(\\"Hello World\\") C #include <stdio.h> int main() { printf(\\"Hello World!\\"); return 0; } PHP <?php echo \\"Hello World!\\"; ?> C# // This program prints \\"Hello World\\" using System; public class Hello { public static void Main() { Console.WriteLine(\\"Hello World!\\"); } } JavaScript // This program prints \\"Hello World\\" console.log(\\"Hello World!\\"); Go // This program prints \\"Hello World\\" package main import \\"fmt\\" func main() { fmt.Println(\\"Hello World!\\") }"},{"prompt":"Develop a Python program that takes a list of integers as an input and sorts them in increasing order. [14, 2, 3, 12, 15, 8]","completion":"def sortList(input_list): # Create an empty list to store the sorted elements sorted_list = [] while len(input_list) > 0: # Take the first element of the input list min_element = input_list[0] # Get the index of the minimum element min_index = 0 # Iterate over the list to find the index of the minimum element for i in range(1, len(input_list)): # Check if the current element is the smallest if input_list[i] < min_element: min_element = input_list[i] min_index = i # After finding the minimum element, append it to the sorted list sorted_list.append(min_element) # Remove the minimum element from the input list del input_list[min_index] # Return the sorted list return sorted_list # Test input_list = [14, 2, 3, 12, 15, 8] sorted_list = sortList(input_list) print(sorted_list) # Output: [2, 3, 8, 12, 14, 15]"},{"prompt":"Develop an AI chatbot in Python with natural language processing capabilities. Not applicable","completion":"#import necessary libraries import string import random from nltk.corpus import wordnet #define the respond function def respond(sentence): bot_response='' sentence=sentence.lower() #Convert to lowercase #check for greetings for word in sentence.split(): if word in GREETING_INPUTS: bot_response=random.choice(GREETING_RESPONSES) return bot_response #check for farewells for word in sentence.split(): if word in FAREWELL_INPUTS: bot_response=random.choice(FAREWELL_RESPONSES) return bot_response #check for matching words res=wordnet.synsets(word) if len(res)>0: bot_response=random.choice(MATCH_RESPONSES) return bot_response else: bot_response=random.choice(NOMATCH_RESPONSES) return bot_response #list of inputs GREETING_INPUTS = (\\"hello\\", \\"hi\\", \\"greetings\\", \\"sup\\", \\"what's up\\",) FAREWELL_INPUTS = (\\"bye\\", \\"farewell\\", \\"see you later\\",) MATCH_RESPONSES = (\\"Yes, I understand.\\", \\"Yes, I agree with you.\\", \\"I find that interesting.\\", \\"That's intriguing.\\",) NOMATCH_RESPONSES = (\\"I'm not sure I understand.\\", \\"I'm not sure what you mean.\\", \\"Can you please explain that further?\\") #sample call to respond bot_response = respond(\\"What's happening?\\") print(bot_response) # Output: I'm not sure what you mean."},{"prompt":"Write a Python program to generate a random password of 8 characters.","completion":"import string import random def generate_password(): chars = string.ascii_letters size = 8 return ''.join(random.choice(chars) for x in range(size)) print(generate_password())"},{"prompt":"Using the comment as a guide, replace the TODO comment with the necessary code for a decision tree classifier in Python. # TODO: define a decision tree classifier","completion":"import pandas as pd from sklearn.tree import DecisionTreeClassifier # Define X and y X = pd.DataFrame(columns=['feature1', 'feature2', 'feature3']) y = pd.DataFrame(columns=['target']) # Train the decision tree classifier clf = DecisionTreeClassifier().fit(X, y)"},{"prompt":"Generate a correct python script to identify string elements whose length is even my_list = [House, Car, Tree, Planet, Satellite]","completion":"my_list = [\\"House\\", \\"Car\\", \\"Tree\\", \\"Planet\\", \\"Satellite\\"] def find_even_length(lst): even_list = [] for l in lst: if len(l) % 2 == 0: even_list.append(l) return even_list even_list = find_even_length(my_list) print(even_list)"},{"prompt":"Create a PoS tagging tool with Python and NLTK which takes a sentence as an input and tags each word with its partofspeech (POS) category. The quick brown fox jumps over the lazy dog","completion":"from nltk.tokenize import word_tokenize from nltk.tag import pos_tag sentence = \\"The quick brown fox jumps over the lazy dog\\" words = word_tokenize(sentence) print(pos_tag(words)) Output: [('The', 'DT'), ('quick', 'JJ'), ('brown', 'NN'), ('fox', 'NN'), ('jumps', 'VBZ'), ('over', 'IN'), ('the', 'DT'), ('lazy', 'JJ'), ('dog', 'NN')]"},{"prompt":"all necessary modules and libraries, including pyfirmata, mcpi, minecraftstuff, time, server, and serial. Connect to the Minecraft server and post a message to the chat window. Define a function called MemoryCloud1 that takes in parameters for starting x, y, and z coordinates, chart width, height, and depth, block type, and block ID. Use the function to create a memory cloud at specific coordinates.","completion":"#!/usr/bin/python #Install the modules we need #from pyfirmata import Arduino, util, INPUT from mcpi import minecraft from mcpi import minecraftstuff from time import sleep import server import serial # Set up a connection to the Arduino/Shrimp if we need it #PORT = \\"/dev/tty.SLAB_USBtoUART\\" #ser = serial.Serial(PORT, 9600) # Connect to the server: we use the imported server.py to make it work with CloudMaker mc = minecraft.Minecraft.create(server.address) #Post a message to the minecraft chat window mc.postToChat(\\"Ready to read Memory!\\") # Use the command /getpos or F3 in Minecraft client to find out where you are then use those # x, y, z coordinates to build things # translate CloudMaker coords for mcpi ones # add this to x mcx = 177 # - this from y mcy = 64 # - this from z mcz = 135 # Text Bubble 1 def MemoryCloud1(startx,starty,startz, chartwidth, chartheight, chartdepth, blocktype, blockid): # Main Bubble mc.setBlocks((startx + mcx), (starty-mcy), (startz-mcz), (startx + mcx) + chartwidth, (starty-mcy) + chartheight, (startz - mcz) + chartdepth, blocktype, blockid) # inset bottom mc.setBlocks((startx + mcx) + 1, (starty-mcy) - 1, (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) -1, (startz - mcz) + chartdepth, blocktype, blockid) #inset top mc.setBlocks((startx + mcx) + 1, (starty-mcy) + (chartheight + 1), (startz-mcz), (startx + mcx) + (chartwidth-1), (starty-mcy) + (chartheight + 1), (startz - mcz) + chartdepth, blocktype, blockid) # If you want to add a bubble diagram, insert your coordinates # Then use /js blocktype(\\"My Message\\", blockid) while facing the block where you want to write #MemoryCloud1(-343, 75, -15, 44, 14, 2, 35, 0) #MemoryCloud1(-343, 110, -15, 44, 14, 2, 35, 0) #MemoryCloud1(-343, 75, -15, 44, 14, 2, 0) #MemoryCloud1(-343, 100, -15, 44, 14, 2, 0) # the memory cloud funtction is (myposx, myposy, myposz, width, height, thickness, # blocktype, blockidoption) MemoryCloud1(332, 100, -1185, 44, 4, 2, 35, 0) #"},{"prompt":"Write an implementation solution in Python to solve the following problem Find the shortest path between two given nodes in a graph.","completion":"def find_shortest_path(graph, start, end): # Return a list containing the shortest path from # start node to end node shortest_path = [] # Track all visited nodes visited_nodes = [] # Create anqueue for nodes to visit queue = [] queue.append([start]) while queue: # Get the first path from the queue and extend it path = queue.pop(0) node = path[-1] # If we found the end node, return the path if node == end: return path # Check each adjacent node and extend the path for adjacent in graph.get(node, []): new_path = list(path) new_path.append(adjacent) # Add the new path if it is not visited before if adjacent not in visited_nodes: queue.append(new_path) visited_nodes.append(adjacent) return shortest_path"},{"prompt":"Suggest a code to generate the Fibonacci series in Python.","completion":"# Define a function to generate the Fibonacci series def FibonacciSeries(n): # Declare two variables to store the series a = 0 b = 1 # Print the initial values of the series print(a) print(b) # Iterate and generate the series for i in range(2, n): c = a + b print(c) a, b= b, c # Call the function with the n-terms FibonacciSeries(10)"},{"prompt":"Create a Python function that takes two numbers and returns the biggest of them. x = 3, y = 6","completion":"def max_of_two(x, y): if x > y: return x else: return y x = 3 y = 6 maximum = max_of_two(x, y) print('The maximum of', x, 'and', y, 'is', maximum)"},{"prompt":"Generate an array with 20 random unique numbers from 1 to 100 in Python.","completion":"import random random_numbers = [] while len(random_numbers) < 20: n = random.randint(1, 100) if n not in random_numbers: random_numbers.append(n) print(random_numbers)"},{"prompt":"Develop a Python program to calculate the sum of all the elements in a given 2D array. [[1, 2], [3, 4], [5, 6]]","completion":"def sum_2d_array(array): # Initialize sum _sum = 0 # Iterate over array and add each element for row in array: for element in row: _sum += element # Return sum return _sum arr = [[1, 2], [3, 4], [5, 6]] print(sum_2d_array(arr))"},{"prompt":"Create a Python script that fetches a web page and scrapes the HTML to extract the top 5 headlines from the page. URL to scrape: https://www.nytimes.com/","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.nytimes.com/' response = requests.get(url) if response.status_code == 200: html_data = response.text soup = BeautifulSoup(html_data, 'html.parser') headlines = soup.find_all('h2', {'class': 'e1voiwgp0'}) for headline in headlines[:5]: print(headline.text)"},{"prompt":"mplement kmeans clustering algorithm in python. Not applicable","completion":"#import necessary libraries import pandas as pd import numpy as np from matplotlib import pyplot as plt #get data url = 'https://raw.githubusercontent.com/krishnaik06/KNN-K-means/master/Dataset/dataset.csv' data = pd.read_csv(url,header=None).values #apply K-means algorithm k=3 x = data[:,0] y = data[:,1] #generate random centroid C_x = np.random.randint(0, np.max(x), size=k) C_y = np.random.randint(0, np.max(y), size=k) C = np.array(list(zip(C_x, C_y)), dtype=np.float32) print book #plot initial centroid fig, ax = plt.subplots(figsize = (5,5)) ax.scatter(x, y, marker='o', c='#f0f0f0', s=7) ax.scatter(C_x, C_y, marker='*', s=300, c='g') #calculate euclidean distance between datapoints and centroid dist = np.zeros(K) for i in range(K): dist[i] = np.sqrt(np.power(x-C_x[i],2) + np.power(y-C_y[i],2)) # find the cluster center clusters = np.zeros(len(x)) for i in range(len(x)): clusters[i] = np.argmin(dist[i]) # plot cluster center x1 = x[clusters==0] y1 = y[clusters==0] x2 = x[clusters==1] y2 = y[clusters==1] x3 = x[clusters==2] y3 = y[clusters==2] fig, ax = plt.subplots(figsize = (5,5)) ax.scatter(x1, y1, marker='o', c='r', s=7) ax.scatter(x2, y2, marker='o', c='b', s=7) ax.scatter(x3, y3, marker='o', c='y', s=7) ax.scatter(C_x, C_y, marker='*', s=300, c='g') #update the centroid for i in range(K): points = [X[j] for j in range(len(X)) if clusters[j] == i] C_x[i] = np.mean(points[0]) C_y[i] = np.mean(points[1]) C = np.array(list(zip(C_x, C_y)), dtype=np.float32)"},{"prompt":"Develop a Python script that prints the lowest temperature in a given sequence. [87, 97, 75, 104]","completion":"temps = [87, 97, 75, 104] min_temp = temps[0] for temp in temps: if temp < min_temp: min_temp = temp print('Lowest temperature: ', min_temp)"},{"prompt":"Create a web service using the Flask microframework in Python to return the information of a specific product { productId: 1234, name: Apple iPhone 11 Pro Max, price: 999.99, description: The latest iPhone from Apple with powerful A13 Bionic chip, triple camera lens, and more }","completion":"from flask import Flask, jsonify app = Flask(name) products = { 'productId': '1234', 'name': 'Apple iPhone 11 Pro Max', 'price': '999.99', 'description': 'The latest iPhone from Apple with powerful A13 Bionic chip, triple camera lens, and more' } @app.route('/product', methods=['GET']) def get_product(): return jsonify(products) if name == 'main': app.run(debug=True)"},{"prompt":"Create a python class to generate a sequence of integers","completion":"class sequenceGenerator: def __init__(self, n): self.n = n def genSequence(self): sequence = [] for i in range(self.n+1): sequence.append(i) return sequence"},{"prompt":"Write a code in Python to create a list of the first n Fibonacci numbers. n = 10","completion":"# Define a function to compute the nth Fibonacci number def fibonacci(n): a = 0 b = 1 if n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b def generate_fibonacci_list(n): # Create an empty list fib_list = [] # Iterate over n and fill the list with Fibonacci numbers for i in range(n): fib_list.append(fibonacci(i)) return fib_list n = 10 fib_list = generate_fibonacci_list(n) print(fib_list) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"prompt":"What does the following Python statement do? help(str.split)","completion":"The statement 'help(str.split)' returns the help documentation for the 'split' method of the 'str' class in Python. The 'split' method splits a string into a list of substrings, using a specified separator string. Each substring is added to the list. If the separator is not specified, the string is split at whitespace. The syntax for 'split' is 'str.split(separator, maxsplit)'. The 'maxsplit' parameter indicates the maximum number of splits that should be made, after which no further splitting will take place. The default value for 'maxsplit' is -1, meaning that there is no limit to the number of splits. The returned list contains the substrings in the order in which they appear in the original string."},{"prompt":"Build an AI classifier in Python to detect the sentiment of a given sentence. The input dataset contains 1000 sentences.","completion":"import nltk from nltk.tokenize import word_tokenize # load data sentences = [<input dataset>] sentiments = [<ground truth sentiments>] # create training and test datasets X_train, X_test, y_train, y_test = train_test_split(sentences, sentiments, test_size=0.25, random_state=42) # prepare datasets for vectorization word_counter = Counter(word for sentence in X_train for word in word_tokenize(sentence[1])) # vectorize the datasets using word count vectorizer = TfidfVectorizer(max_features=1000, stop_words='english', max_df=0.5, min_df=2, tokenizer=word_tokenize).fit(X_train) X_train_vec = vectorizer.transform(X_train) X_test_vec = vectorizer.transform(X_test) # fit the classifier using the vectorized train dataset clf = MultinomialNB().fit(X_train_vec, y_train) # predict the test dataset y_pred = clf.predict(X_test_vec)"},{"prompt":"Generate a Python program to fetch the data from a provided JSON input and store the data into a SQLite database. { items: [ { name: item1, value: 1 }, { name: item2, value: 2 }, { name: item3, value: 3 }, { name: item4, value: 4 }, { name: item5, value: 5 } ] }","completion":"import json import sqlite3 # parse the JSON data jsonStr = '''{ \\"items\\": [ { \\"name\\": \\"item1\\", \\"value\\": 1 }, { \\"name\\": \\"item2\\", \\"value\\": 2 }, { \\"name\\": \\"item3\\", \\"value\\": 3 }, { \\"name\\": \\"item4\\", \\"value\\": 4 }, { \\"name\\": \\"item5\\", \\"value\\": 5 } ] }''' decodedData = json.loads(jsonStr) # connect to the SQLite database con = sqlite3.connect('data.db') cur = con.cursor() # create the necessary tables cur.execute('CREATE TABLE IF NOT EXISTS items(name TEXT, value INTEGER)') # now iterate through the items in the data and store them in the database for item in decodedData['items']: cur.execute('INSERT INTO items(name, value) VALUES (?, ?)', (item['name'], item['value'])) con.commit() # close the connection con.close()"},{"prompt":"Generate a python program that prints out all the even numbers between a given range of integers 1 to 50","completion":"def print_even_numbers(start, end): for num in range(start, end+1): if num % 2 == 0: print(num) # main start = 1 end = 50 print_even_numbers(start, end)"},{"prompt":"Using the input provided, build a Python dictionary with the number as the key and its square as the value. numbers = [2, 3, 4]","completion":"square_dict = {number:number**2 for number in numbers}"},{"prompt":"Write a Python functions to generate a random number between 1 and 9","completion":"import random def random_number(): return random.randint(1,9)"},{"prompt":"Create a calculator program using Python. It should be able to take inputs from the user and perform basic operations such as addition, subtraction, multiplication and division.","completion":"def calculator(): num1 = int(input(\\"Enter first number: \\")) num2 = int(input(\\"Enter second number: \\")) operator = input(\\"Enter operator: \\") if operator == \\"+\\": print(\\"Answer:\\",num1+num2) elif operator == \\"-\\": print(\\"Answer:\\",num1-num2) elif operator == \\"*\\": print(\\"Answer:\\",num1*num2) elif operator == \\"/\\": print(\\"Answer:\\",num1/num2) else: print(\\"Invalid Operator\\")"},{"prompt":"Write a Python program to compute the sum of three given numbers. 5, 10, 15","completion":"def sum_numbers(num1, num2, num3): return num1 + num2 + num3 if __name__ == \\"__main__\\": print(sum_numbers(5, 10, 15))"},{"prompt":"Create a web scraper using Python that can extract tables from any Wikipedia page. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Function to extract tables from any Wikipedia page def extract_tables(url): # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Find all tables in the webpage tables = soup.find_all('table', class_='wikitable') # Get the data from each table for table in tables: th = table.find_all('th') headings = [header.text.strip().replace(' ', '').replace('[edit]', '') for header in th] rows_data = [] for tr in table.find_all('tr'): td = tr.find_all('td') row = [row_data.text.strip() for row_data in td] rows_data.append(row) # Clean the data clean_data = [d for d in rows_data if d != []] # Return the headings and the clean data return headings, clean_data"},{"prompt":"Create a deep learning model in Python to predict customer churn. A CSV file containing customer data, including customer ID, age, gender, customer tenure, and customer status (churn/no churn).","completion":"# import necessary libraries import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from tensorflow.keras.layers import Dense from tensorflow.keras.models import Sequential # read the csv file data = pd.read_csv('customer_data.csv') # define feature and target variables X = data.drop(['ID', 'Churn'],axis=1).values y = data['Churn'].values # split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) # scale the data sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test) # build the model model = Sequential() model.add(Dense(10, activation='relu', input_shape=(X_train.shape[1],))) model.add(Dense(8, activation='relu')) model.add(Dense(1, activation='sigmoid')) model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) # train the model model.fit(X_train, y_train, batch_size=32, epochs=20, verbose=1) # make predictions y_pred = model.predict(X_test)"},{"prompt":"Design a python function that finds the closest palindrome to a given number.","completion":"def findClosestPalindrome(num): # Convert number to string num_str = str(num) # Get length of number length = len(num_str) # Initialize solution solution = None # Loop over all possible number of same length for i in range(10**length): temp_str = str(i).zfill(length) # Check if number is palindrome if temp_str == temp_str[::-1]: diff = abs(i-num) if solution is None or diff < solution[1]: solution = (i, diff) # Return the closest palindrome return solution[0]"},{"prompt":"Create a python script to find and print the most common word in a string. string = “The quick brown fox jumps over the lazy dog.”","completion":"from collections import Counter def most_common_word(string): counter = Counter() for word in string.split(): counter[word] += 1 most_common = counter.most_common(1)[0] return most_common[0], most_common[1] string = “The quick brown fox jumps over the lazy dog.” most_common = most_common_word(string) print(f\\"The most common word is '{most_common[0]}' and it appears {most_common[1]} times\\")"},{"prompt":"Create an AI program in Python that determines whether a given sentence is a statement or a question. The weather is cold today","completion":"import re def is_question(sentence): sentence = sentence.strip() if sentence.endswith('?'): return True else: return False sentence = \\"The weather is cold today\\" print(is_question(sentence)) # False sentence = \\"Is it raining outside?\\" print(is_question(sentence)) # True"},{"prompt":"Classify whether a given number is even or odd using Python. 1","completion":"def is_even(n): if n % 2 == 0: return True else: return False"},{"prompt":"mplement a genetic algorithm in Python for a traveling salesman problem.","completion":"import random # We'll use a list to store the cities and a dictionary to represent the distances between them cities = ['A', 'B', 'C', 'D', 'E'] distances = { 'A': {'B': 10, 'C': 20, 'D': 30, 'E': 40}, 'B': {'A': 10, 'C': 15, 'D': 25, 'E': 35}, 'C': {'A': 20, 'B': 15, 'D': 40, 'E': 25}, 'D': {'A': 30, 'B': 25, 'C': 40, 'E': 10}, 'E': {'A': 40, 'B': 35, 'C': 25, 'D': 10} } # Create a population of random routes def create_population(pop_size): population = [] for _ in range(pop_size): route = random.sample(cities, len(cities)) population.append(route) return population # Calculate the total distance of a route def get_distance(route): distance = 0 for i in range(len(route)-1): distance += distances[route[i]][route[i+1]] return distance # Calculate the fitness of a route def get_fitness(route): return 1 / get_distance(route) # Select a route from the population according to their fitness def select_route(population): population_fitness = [(route, get_fitness(route)) for route in population] population_fitness.sort(key=lambda x: x[1], reverse=True) population_sorted = [route[0] for route in population_fitness] return population_sorted # Create a new population using crossover def crossover(parent1, parent2): child = parent1[:len(parent1)//2] + parent2[len(parent2)//2:] return child # Mutate a route by swapping two cities def mutate(route): index1 = random.randint(0, len(route)-1) index2 = random.randint(0, len(route)-1) new_route = route[:] new_route[index1], new_route[index2] = route[index2], route[index1] return new_route # Create a new population using genetic algorithm def genetic_algorithm(population, pop_size): population_sorted = select_route(population) new_population = [population_sorted[0]] # Create new routes using crossover while len(new_population) < pop_size: parent1 = random.choice(population_sorted) parent2 = random.choice(population_sorted) child = crossover(parent1, parent2) if random.random() < 0.1: child = mutate(child) new_population.append(child) return new_population"},{"prompt":"Create a Python function that takes in an arraylike data structure and returns the difference of its maximum and minimum values. [100, 45, 56, 30, 90, 100]","completion":"def get_difference(arr): return max(arr) - min(arr) input_arr = [100, 45, 56, 30, 90, 100] difference = get_difference(input_arr) print(difference) # Output: 70"},{"prompt":"Create a program in Python to classify each item in a given list as either an even number or an odd number. [5,4,2,7]","completion":"def classify(lst): result = [] for item in list: if item % 2 == 0: result.append(\\"even\\") else: result.append(\\"odd\\") return result"},{"prompt":"Write a for loop to print all the keys and values of a Python dictionary. my_dict = { name: John, age: 30, city: New York }","completion":"for key,value in my_dict.items(): print(key,\\" :\\",value)"},{"prompt":"Create a function in Python that takes two parameters: a list and a number. The function should return the list sorted in ascending order, based on the result of each element in the list multiplied by the input number. [3, 1, 5, 4, 2], 5","completion":"def sortList(arr, num): arr.sort(key = lambda x: x*num) return arr arr = [3, 1, 5, 4, 2] num = 5 print(sortList(arr, num))"},{"prompt":"Develop a function in Python that takes in a list and sorts the elements alphabetically. my_list = [word, translate, language, computer]","completion":"def sort_list(my_list): my_list.sort() return my_list print(sort_list(my_list))"},{"prompt":"Generate a Python function to count and print the total number of characters in a string.","completion":"def count_characters(string): count = 0 for char in string: count += 1 print(\\"Total number of characters:\\", count)"},{"prompt":"Develop a machine learning algorithm in Python to predict the win/lose outcome of a football game. [Winning team, losing team, goals scored, total number of attempts] Example: [Hawthorn, Geelong, 3, 11]","completion":"import pandas as pd from sklearn.linear_model import LogisticRegression def predict_outcome(data): x = data[:, 0:-1] y = data[:, -1] # fit the model model = LogisticRegression() model.fit(x, y) return model.predict([x[0]])[0] data = [['Hawthorn', 'Geelong', 3, 11], ['Other Team 1', 'Other Team 2', 3, 11], [1, 0]] data = pd.DataFrame(data) result = predict_outcome(data) print(result)"},{"prompt":"Write a python function that prints out the longest sequence of increasing numbers from the given array of numbers. [5, 3, 4, 8, 6, 7]","completion":"def printLongestIncreasingSequence(arr): # Set the maximum length to 0 maxLength = 0 # Iterate over all the elements of the given array for i in range(len(arr)): # Set currentLength to 1 currentLength = 1 # Iterate over all the subsequent elements of the array for j in range(i + 1, len(arr)): # If there is an increasing sequence of numbers, increment the currentLength if arr[j] - arr[j - 1] == 1: currentLength += 1 else: break # Check if the currentLength is greater than the maxLength if currentLength > maxLength: maxLength = currentLength # Print the longest sequence of increasing numbers for i in range(maxLength): print(arr[i], end=\\" \\") print() # Tests printLongestIncreasingSequence([5, 3, 4, 8, 6, 7])"},{"prompt":"Write a Python script to print all prime numbers from 1 to n n = 10","completion":"def print_primes(n): for num in range(2, n+1): for i in range(2, num): if (num % i) == 0: break else: print(num) print_primes(10)"},{"prompt":"Optimize a deep learning model in Python to improve classification accuracy. A dataset containing images of 10 classe","completion":"import tensorflow as tf # Load the dataset (x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data() # Normalize data x_train, x_test = x_train / 255.0, x_test / 255.0 # Build the model model = tf.keras.models.Sequential([ tf.keras.layers.Input(shape=x_train.shape[1:]), tf.keras.layers.Conv2D(32, (3, 3), activation='relu'), tf.keras.layers.MaxPooling2D((2, 2)), tf.keras.layers.Conv2D(64, (3, 3), activation='relu'), tf.keras.layers.MaxPooling2D((2, 2)), tf.keras.layers.Flatten(), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(10, activation='softmax') ]) # Compile and train the model model.compile(optimizer='adam', loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=['accuracy']) model.fit(x_train, y_train, epochs=10) # Evaluate the model model.evaluate(x_test, y_test)"},{"prompt":"Create an application in Python that can encode a string into Base64. The quick brown fox","completion":"import base64 def encode_base64(string): encoded_string = base64.b64encode(string.encode('utf-8')) return encoded_string string = \\"The quick brown fox\\" encoded_string = encode_base64(string) print(encoded_string) # Output: VGhlIHF1aWNrIGJyb3duIGZveA=="},{"prompt":"Propose a Python program to tokenize the given sentences. The quick brown fox jumps over the lazy dog","completion":"import nltk def tokenize_sentences(sentence): tokens = nltk.word_tokenize(sentence) return tokens"},{"prompt":"mplement a code in Python to print the prime numbers in a given range. 20","completion":"def printPrime(n): # Prints all prime numbers less than or equal to n prime = [True for i in range(n + 1)] p = 2 while (p * p <= n): # If prime[p] is not changed, then it is a prime if (prime[p] == True): # Update all multiples of p for i in range(p * p, n + 1, p): prime[i] = False p += 1 # Print all prime numbers for p in range(2, n): if prime[p] == True: print(p), # Driver Code n = 20 printPrime(n)"},{"prompt":"Generate a python program to scramble a sequence of characters. 'Hello World!'","completion":"import random # Initialize the string string = 'Hello World!' # Convert the string to a list char_list = list(string) # Shuffle the list random.shuffle(char_list) # Convert back the list to a string random_string = ''.join(char_list) # Print the scrambled string print(random_string)"},{"prompt":"Write a Python program that outputs the length of the longest substring of a given string which contains only unique characters. ABCBCDDEE","completion":"def longest_unique_substring(s): # Set the initial longest length to 0 longest_length = 0 # Traverse the string for i in range(len(s)): seen = set() # Traverse from i and outwards for j in range(i, len(s)): # Check if the character has been seen, if so, break if s[j] in seen: break # Otherwise, add the character to seen and increment the longest_length else: seen.add(s[j]) longest_length = max(longest_length, j - i + 1) return longest_length s = \\"ABCBCDDEE\\" print(longest_unique_substring(s)) # Output: 4"},{"prompt":"Write a python program to fill in a 2D array with zeros.","completion":"import numpy as np # define an array of size 5x5 my_array = np.zeros((5, 5)) print(my_array)"},{"prompt":"Optimize the performance of a Python function to calculate the sum of an array of numbers. Not applicable","completion":"def optimize_sum(arr): result = 0 for num in arr: result += num return result # Using numpy: import numpy as np def optimize_sum_np(arr): return np.sum(arr) # Using reduce function: from functools import reduce def optimize_sum_reduce(arr): return reduce((lambda x, y: x + y), arr)"},{"prompt":"Compose a Python program to check if a given year is a leap year","completion":"def is_leap_year(year): if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0: return true return false"},{"prompt":"Develop a Python program to input an integer and print all its digits in the English language. Number: 678","completion":"# Function to convert an integer to its English equivalent def convert(num): # Dictionary of numbers in the English language numbers = { 0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine' } # Convert number to string num = str(num) result = '' # Iterate through each digit for digit in num: result += numbers[int(digit)] + ' ' # Return the result return result # Take input from the user num = int(input('Enter a number: ')) # Convert the number to its English equivalent print(convert(num))"},{"prompt":"Write a script in Python that will generate multiplication tables from 1 to 10. Not applicable","completion":"# Generate multiplication tables from 1 to 10 # Define function, which takes a single number as input def multiplication_table(number): # Initialize list for storing results results = [] # Iterate from 1 to 10 for i in range(1, 11): # Compute result result = number*i # Append result to list of results results.append(result) # Return list of results return results # Iterate from 1 to 10 for i in range(1, 11): # Compute multiplication table table = multiplication_table(i) # Print multiplication table print(f'{i} x {table}')"},{"prompt":"Write a Python program that stores the months of the year in a dictionary.","completion":"months_dict = { 'January': 1, 'February': 2, 'March': 3, 'April': 4, 'May': 5, 'June': 6, 'July': 7, 'August': 8, 'September': 9, 'October': 10, 'November': 11, 'December': 12 }"},{"prompt":"Create a Python program that uses a sentiment analysis library like TextBlob to analyze reviews provided as input and classify each review as either positive or negative. The product is good quality and well made.","completion":"import textblob review = \\"The product is good quality and well made.\\" testimonial = textblob.TextBlob(review) sentiment = testimonial.sentiment.polarity if sentiment > 0: print(\\"Review is positive.\\") elif sentiment == 0: print(\\"Review is neutral.\\") else: print(\\"Review is negative.\\")"},{"prompt":"Create a Selenium test automation script in Python for verifying a user login. Not applicable","completion":"from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC driver = webdriver.Chrome() driver.get('https://www.example.com/login') username_field = driver.find_element_by_name('username') password_field = driver.find_element_by_name('password') username_field.send_keys('example_username') password_field.send_keys('example_password') driver.find_element_by_xpath(\\"//button[text()='Log in']\\").click() WebDriverWait(driver, 10).until_not(EC.url_changes('https://www.example.com/login')) assert driver.current_url == 'https://www.example.com/home'"},{"prompt":"Rewrite a python program to take input from the user n1 = 10 n2 = 20","completion":"n1 = int(input(\\"Enter first number: \\")) n2 = int(input(\\"Enter second number: \\"))"},{"prompt":"Write a Python program to find the sum of all numbers divisible by 10 between 50 and 200. Not applicable","completion":"# start with a sum of 0 sum = 0 # set the minimum and maximum numbers min = 50 max = 200 # loop from min to max for i in range(min, max+1): # check if number is divisible by 10 if i%10 == 0: # add the number to the sum sum += i # print the sum print(sum)"},{"prompt":"Create a Python script to print the first n even numbers. n = 10","completion":"n = 10 for i in range(1, n+1): if i % 2 == 0: print(i)"},{"prompt":"Write a Python program to calculate the sum of the elements in a given matrix. Assume the matrix is a list of lists. matrix = [[1,2], [3,4], [5,6]]","completion":"def matrix_sum(matrix): sum = 0 for row in matrix: for elem in row: sum += elem return sum"},{"prompt":"Create a Python function that takes in two parameters (n,k) and returns the value of n^k.","completion":"def power(n,k): result = 1 for i in range(0,k): result *= n return result"},{"prompt":"Design and write a Python program to search a particular website for links that contain a certain keyword. Not applicable","completion":"from urllib.request import urlopen from bs4 import BeautifulSoup # URL to search for (keyword included) url = 'http://example.com/search?query=keyword' # Parse HTML and save to BeautifulSoup object html = urlopen(url) bs = BeautifulSoup(html.read(), 'html.parser') # Save all links found in the HTML document links = bs.find_all('a') # Iterate over the links and print out the link URLs for link in links: print(link.get('href'))"},{"prompt":"Create a program in Python to filter and count the total number of words containing only one vowel. Sentence: I hardly ever go out and I hate taking pictures.","completion":"def filter_words_with_one_vowel(sentence): num_words = 0 for word in sentence.split(): vowels = 0 for char in word: if char in 'aeiou': vowels += 1 if vowels == 1: num_words += 1 return num_words sentence = 'I hardly ever go out and I hate taking pictures.' num_words = filter_words_with_one_vowel(sentence) print('Number of words with one vowel:', num_words)"},{"prompt":"Construct an object oriented model in Python which describes Animals and their Environments. Not applicable","completion":"class Animal: def __init__(self, name): self.name = name class Environment: def __init__(self, animals): self.animals = animals def add_animal(self, animal): self.animals.append(animal) def get_animals(self): return self.animals # Example Usage # Create 3 animals tiger = Animal('Tiger') lion = Animal('Lion') giraffe = Animal('Giraffe') # Create an environment to contain the animals safari_park = Environment([tiger, lion]) # Add the giraffe safari_park.add_animal(giraffe) # Get the animals in the park animals_in_park = safari_park.get_animals()"},{"prompt":"Create a Python NLTK program to tokenize a given English text. Example text: This is a sample sentence for tokenizing.","completion":"import nltk # Input text text = \\"This is a sample sentence for tokenizing.\\" # Tokenize sentences tokens = nltk.word_tokenize(text) # Print tokens print(tokens) # Output ['This', 'is', 'a', 'sample', 'sentence', 'for', 'tokenizing', '.']"},{"prompt":"Write a Python program to create an editable table showing a list of quote objects. quoteList = [{name: Albert Einstein, quote: Imagination is more important than knowledge.}, {name: Mahatma Gandhi, quote: Be the change you wish to see in the world.}, {name: J.K. Rowling, quote: The power of imagination makes us infinite.} ]","completion":"import tkinter as tk from tkinter import ttk root = tk.Tk() root.title('Quotes Table') # create a table of quote objects tree = ttk.Treeview(root, columns=['name', 'quote'], show = 'headings') tree.column('name', width=100, anchor='w') tree.heading('name', text='Name') tree.column('quote', width=300, anchor='w') tree.heading('quote', text='Quote') for quote in quoteList: tree.insert('', 'end', values=[quote['name'], quote['quote']]) tree.pack() root.mainloop()"},{"prompt":"Create an AI solution in Python that can predict the likelihood of an individual having a heart attack given their age, gender, cholesterol level, and other risk factors. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LogisticRegression # Load and prepare the data data = pd.read_csv('data.csv') X = np.array(data.iloc[:, 0:4]) y = np.array(data['Heart Attack Risk']) # Create the model model = LogisticRegression(solver='lbfgs') # Train the model model.fit(X, y) # Make the predictions predictions = model.predict_proba(X)"},{"prompt":"Create a class in Python that takes an array as an argument and reverses the elements. [1, 2, 3, 4]","completion":"class ReverseArray: def __init__(self, array): self.array = array def reverse(self): self.array.reverse() # To test with given input array = [1, 2, 3, 4] rev_array = ReverseArray(array) rev_array.reverse() print(array) # Output: [4, 3, 2, 1]"},{"prompt":"Design a Python algorithm to find the largest element in a list. lst = [3, 45, 18, 5, 9]","completion":"def find_largest_element(lst): largest_element = None for elem in lst: if largest_element is None or largest_element < elem: largest_element = elem return largest_element largest_element = find_largest_element(lst) print(largest_element) # 45"},{"prompt":"Develop a REST API in Python that fetches the number of likes of a specific post.","completion":"from flask import Flask import requests app = Flask(__name__) @app.route('/post-likes/<int:id>', methods=['GET']) def post_likes(id): response = requests.get('https://api.example.com/likes?id={id}') return response.json() if __name__ == '__main__': app.run()"},{"prompt":"Write a Python program to randomly shuffle a given list of numbers. numbers = [1,2,3,4,5]","completion":"import random def shuffle(numbers): random.shuffle(numbers) return numbers shuffle(numbers)"},{"prompt":"Design a full stack application for user authentication in Python.","completion":"# Imports and Setup import flask from flask import Flask, request, redirect, render_template from flask_login import LoginManager, login_user, login_required import os import sqlite3 # Configure application app = Flask(__name__) app.secret_key = os.urandom(24) # Configure database db_file = './data.db' conn = sqlite3.connect(db_file) cursor = conn.cursor() # User authentication login_manager = LoginManager() login_manager.init_app(app) @login_manager.user_loader def load_user(user_id): cursor.execute(f\\"SELECT * FROM users WHERE id = {user_id}\\") user = cursor.fetchone() return User(*user) @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'GET': return render_template('login.html') elif request.method == 'POST': username = request.form['username'] password = request.form['password'] cursor.execute(f\\"SELECT * FROM users WHERE username = ?\\" , (username,)) user = cursor.fetchone() if user is not None and check_password_hash(user[3], password): login_user(User(*user)) return redirect(url_for('index')) else: return redirect(url_for('login')) # Application routes @app.route('/') @login_required def index(): return 'Welcome to the application!' if __name__ == '__main__': app.run()"},{"prompt":"Create a Python synthetic dataset including 1000 samples and 10 continuous attributes.","completion":"import numpy as np # set seed for generating random numbers np.random.seed(101) # number of samples and attributes n_samples = 1000 n_attributes = 10 # generate random samples data = np.random.rand(n_samples, n_attributes)"},{"prompt":"Create a Python script that makes an HTTP request to retrieve data and convert it from JSON to a pandas DataFrame. Not applicable","completion":"import requests import pandas as pd url = 'https://example.com/api/data' # Make the request and get the response response = requests.get(url) # Convert the JSON response to a python dictionary data = response.json() # Convert the dictionary to a pandas DataFrame df = pd.DataFrame(data)"},{"prompt":"Generate a function in Python for sorting a list of numbers in decreasing order.","completion":"def sort_list(numbers): sorted_list = sorted(numbers, reverse=True) return sorted_list"},{"prompt":"Generate a Python 3 program to find out the highest common factor of two numbers. 60 and 80","completion":"def find_hcf(x, y): if x > y: smaller = y else: smaller = x for i in range(1,smaller + 1): if((x % i == 0) and (y % i == 0)): hcf = i return hcf x = 60 y = 80 hcf = find_hcf(x, y) print(\\"The Highest Common Factor of\\", x,\\"and\\", y,\\"is\\", hcf)"},{"prompt":"Develop a kNN model in Python to predict the type of wine based on the features and the data listed in the input. Input: Data: Type | Alk | Res | Mal Red | 11 | 0.3 | 6.8 White | 12 | 0.5 | 5.3 Features: Alk, Res, Mal","completion":"import pandas as pd from sklearn.neighbors import KNeighborsClassifier # Data data = [['Red', 11, 0.3, 6.8], ['White', 12, 0.5, 5.3]] df = pd.DataFrame(data, columns=['Type', 'Alk', 'Res', 'Mal']) # Feature and target X = df.drop('Type', axis=1) y = df['Type'] # Model development knn = KNeighborsClassifier(n_neighbors=3) knn.fit(X, y) # Predicting predictions = knn.predict([[11.4, 0.3, 6.6] ]) print(predictions)"},{"prompt":"Write a Python script to calculate the total marks by adding the marks of two subjects. subject1 = 78 subject2 = 85","completion":"total = subject1 + subject2 print(\\"Total Marks:\\", total)"},{"prompt":"Write a function in Python to check if a given string is a palindrome. String : racecar","completion":"def is_palindrome(input): s = input.lower() return s == s[::-1] print(is_palindrome(\\"racecar\\")) # True"},{"prompt":"Construct a Python application to compare the values of two given dictionary. dict1 = { A: 1, B: 2 } dict2 = { A: 1, B: 4 }","completion":"def compare_dicts(dict1, dict2): if len(dict1) != len(dict2): return False for key, value in dict1.items(): if key not in dict2 or dict2[key] != value: return False return True"},{"prompt":"Generate a Python function that takes a string and reverses its order of characters.","completion":"def reverse_string(my_string): reversed_string = '' for i in range(len(my_string) - 1, -1, -1): reversed_string += my_string[i] return reversed_string"},{"prompt":"Create a program in Python to delete all the elements from the list which have a value greater than a given number. list = [1, 5, 6, 8, 9, 10], num = 7","completion":"def removeGreaterNum(list, num): return [x for x in list if x < num] list = [1, 5, 6, 8, 9, 10] num = 7 print(removeGreaterNum(list, num))"},{"prompt":"Create a Python program that takes in a list of numbers and finds the closest number to a given number. [2, 4, 7, 8], 5","completion":"def find_closest(nums, target): closest_num = float('inf') for num in nums: if abs(target - num) < abs(target - closest_num): closest_num = num return closest_num nums = [2, 4, 7, 8] target = 5 print(find_closest(nums, target))"},{"prompt":"Write a Python program to look for an element in an array and return its index if found or 1 otherwise [10, 20, 10, 40, 5], 10","completion":"def search_element(arr, ele): for i in range(len(arr)): if arr[i] == ele: return i return -1"},{"prompt":"Generate a Python program which will take as input a string and output the corresponding hexadecimal representation of the string. Hello world","completion":"import binascii def stringToHex(s): output = '' for c in s: output += '%02x' % ord(c) return output inputString = input('Input a string:') hexString = stringToHex(inputString) print(\\"The hexadecimal representation of the string is: {}\\".format(hexString))"},{"prompt":"Create a Python program to sort a list of numbers from lowest to highest. [5, 2, 3, 7, 4]","completion":"def sort_list(numbers): numbers.sort() return numbers # Driver code numbers = [5, 2, 3, 7, 4] print(sort_list(numbers))"},{"prompt":"Create a Python machine learning model that predicts the gender of the given data based on height and weight. Height: 1.78m Weight: 80kg","completion":"import pandas as pd from sklearn.svm import SVC from sklearn.model_selection import train_test_split # Build dataset data = [[1.78, 80, \\"male\\"], [1.69, 55, \\"female\\"], [1.68, 65, \\"female\\"], [1.68, 70, \\"male\\"], [1.73, 68, \\"female\\"]] df = pd.DataFrame(data, columns=['height', 'weight', 'gender']) # Split data X = df[['height', 'weight']] y = df['gender'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train model model = SVC(kernel='linear') model.fit(X_train, y_train) # Make predictions y_pred = model.predict([[1.78, 80]]) print(\\"Prediction:\\", y_pred[0])"},{"prompt":"w can a user enter 5 numbers in Python and save them in a list?","completion":"# create an empty list my_nums = [] # loop to enter and append numbers to the list for i in range(5): num = int(input(f'Enter number {i+1}: ')) my_nums.append(num) # printing the list print(my_nums)"},{"prompt":"Create a Python class named Dog that will keep track of a breed, a name, age and person information.","completion":"class Dog: def __init__(self, breed, name, age, person): self.breed = breed self.name = name self.age = age self.person = person def get_breed(self): return self.breed def get_name(self): return self.name def get_age(self): return self.age def get_person(self): return self.person"},{"prompt":"Create a Python function that takes two strings as input. The function should return a boolean value that indicates whether the two strings are anagrams of each other. eat, te","completion":"def is_anagram(s1, s2): s1 = s1.replace(' ', '').lower() s2 = s2.replace(' ', '').lower() if len(s1) == len(s2): return sorted(s1) == sorted(s2) else: return False"},{"prompt":"mplement a customized Linear Search algorithm in Python No inpu","completion":"#Function to implement Linear Search def linear_search(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1 #Test arr = [1, 2, 3, 4, 5, 6] x = 4 #Function call result = linear_search(arr, x) if result != -1: print \\"Element is present at the index\\", result else: print \\"Element is not present in the array\\""},{"prompt":"Create a Python code to output the following text:","completion":"print(\\"Hello, World!\\")"},{"prompt":"Write a Python program to find the longest palindromic subsequence of a given string. roadrace","completion":"def longest_palindromic_subsequence(string): n = len(string) dp = [[0 for _ in range(n)] for _ in range(n)] for i in range(n): dp[i][i] = 1 for i in range(n-1): if string[i] == string[i+1]: dp[i][i+1] = 2 for l in range(3, n+1): for i in range(n-l+1): j = i+l-1 if string[i] == string[j]: dp[i][j] = dp[i+1][j-1] + 2 else: dp[i][j] = max(dp[i][j-1], dp[i+1][j]) return dp[0][n-1]"},{"prompt":"Write a python program to compute the Gini index for a given data set. [10, 3, 5, 7]","completion":"def gini_index(data): data_set_size = len(data) data_sum = sum(data) gini = 0.0 for val in data: gini += (val/data_sum)**2 return 1 - gini print(gini_index([10, 3, 5, 7]))"},{"prompt":"Define an iterator using a Python class.","completion":"class MyIterator: def __init__(self, data): self.data = data self.index = 0 def __iter__(self): return self def __next__(self): if self.index >= len(self.data): raise StopIteration item = self.data[self.index] self.index += 1 return item def __len__(self): return len(self.data)"},{"prompt":"Design an algorithm in Python to identify duplicate rows in a twodimensional array. arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [4, 5, 6]]","completion":"def find_duplicate_rows(arr): # Create a tracking array to keep track of visited rows visited = [0] * len(arr) # Iterate through the 2D array, starting from the 0th row for i, row in enumerate(arr): # If this row has been processed before, we do not need to process it again if visited[i]: continue # Else, check this row against all subsequent rows for j in range(i+1, len(arr)): # Mark what rows we have visited visited[j] = 1 # If two rows match, we have found a duplicate if row == arr[j]: print(f'Duplicate row {i} and {j}') find_duplicate_rows(arr)"},{"prompt":"mplement a priority queue in Python.","completion":"from queue import PriorityQueue class PriorityQueue(object): def __init__(self): self.queue = [] def __str__(self): return ' '.join([str(i) for i in self.queue]) # for checking if the queue is empty def isEmpty(self): return len(self.queue) == [] # for inserting an element in the queue def insert(self, data): self.queue.append(data) # for popping an element based on Priority def delete(self): try: max = 0 for i in range(len(self.queue)): if self.queue[i] > self.queue[max]: max = i item = self.queue[max] del self.queue[max] return item except IndexError: print() exit() if __name__ == '__main__': myQueue = PriorityQueue() myQueue.insert(12) myQueue.insert(1) myQueue.insert(14) myQueue.insert(7) print(myQueue) while not myQueue.isEmpty(): print(myQueue.delete())"},{"prompt":"Create a Python program to sort a list of tuples in ascending order by their second element. [(4, 2), (3, 7), (2, 3)]","completion":"def sort_tuples(tup): # reverse = None (Sorts in Ascending order) # key is set to sort using second element of # sublist lambda has been used tup.sort(key = lambda x: x[1]) return tup # Driver Code tuple1 = [(4, 2), (3, 7), (2, 3)] print(sort_tuples(tuple1))"},{"prompt":"Develop a listing page generator in Python. Two example listing","completion":"class ListingGenerator(): def __init__(self, listings): self.listings = listings def generate_listing(self): listing_html = \\"<div class=\\"listing\\">n\\" for listing in self.listings: listing_html += \\" <h3>{}</h3>n\\".format(listing[\\"title\\"]) listing_html += \\" <p>{}</p>n\\".format(listing[\\"description\\"]) listing_html += \\" <p><a href=\\"{}\\">READ MORE</a></p>n\\".format(listing[\\"link\\"]) listing_html += \\"</div>\\" return listing_html"},{"prompt":"mplement a web service in Python using Flask. The web service should have endpoints for creating, updating and deleting items from an inventory. Not applicable","completion":"from flask import Flask from flask import request app = Flask(__name__) # create item @app.route('/items', methods=['POST']) def create_item(): data = request.get_json() item = { 'name': data['name'], 'price': data['price'], 'quantity': data['quantity'], } return item # update item @app.route('/items/<item_id>', methods=['PUT']) def update_item(item_id): data = request.get_json() item = { 'name': data['name'], 'price': data['price'], 'quantity': data['quantity'], } return item # delete item @app.route('/items/<item_id>', methods=['DELETE']) def delete_item(item_id): # code for deleting item return 'item deleted'"},{"prompt":"Consider the following statement and write a code for it in Python A list of integers of length 5 is given. Calculate its sum and average.","completion":"my_list = [1,2,3,4,5] total_sum = 0 for x in my_list: total_sum = total_sum + x average = total_sum / len(my_list) print(\\"Sum of all elements in given list: \\" + str(total_sum)) print(\\"Average of all elements in given list: \\" + str(average))"},{"prompt":"Generate a Neural Network in Python to do binary classification on a dataset","completion":"# import libraries import numpy as np import tensorflow as tf # define inputs X = tf.placeholder(tf.float32, shape=[None, input_dim]) y = tf.placeholder(tf.float32, shape=[None, classes]) # define weights & biases W = tf.Variable(tf.random_normal([input_dim, classes])) b = tf.Variable(tf.random_normal([classes])) # define prediction pred = tf.nn.softmax(tf.matmul(X,W) + b) # define loss cost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(pred), reduction_indices=1)) # define optimizer optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost) # start session with tf.Session() as sess: sess.run(tf.global_variables_initializer()) # train model for epoch in range(training_epochs): _, c = sess.run([optimizer, cost], feed_dict={X: x_train, y: y_train}) # test model output = tf.argmax(pred, 1) accuracy = tf.reduce_mean(tf.cast(tf.equal(output, tf.argmax(y, 1)), tf.float32)) result = sess.run(accuracy, feed_dict={X: x_test, y: y_test}) print('The accuracy of the model on the test set is: {}'.format(result))"},{"prompt":"Create a Python app to take a list of words and determine if each word is an anagram of another.","completion":"def is_anagram(word1, word2): if sorted(word1) == sorted(word2): return True else: return False"},{"prompt":"Create an interactive Slack bot in Python to find the latest news article about a given topic from the web. Not Applicable","completion":"#import the required packages import requests from bs4 import BeautifulSoup #Define a function to find the latest news article def get_latest_news(topic): #Make a get request response = requests.get(\\"http://www.example.com/\\" + topic) #Parse the response soup = BeautifulSoup(response.text, \\"html.parser\\") #Find the first relevant news article latest_news = soup.find(\\"div\\", {\\"class\\": \\"related-news-item\\"}).find(\\"h3\\") #Extract the headline and the link headline = latest_news.find(\\"a\\") link = latest_news.find(\\"a\\").get('href') #Return the headline and the link return {'headline': headline.text.strip(\\"n\\"), 'link': link} #Call the function get_latest_news(\\"topic\\")"},{"prompt":"Create a Python lambda expression to return all strings that longer than 5 characters long. [hello, world, foobar]","completion":"words = [\\"hello\\", \\"world\\", \\"foobar\\"] filtered_words = list(filter(lambda x: len(x) > 5, words)) print(filtered_words) # ['world', 'foobar']"},{"prompt":"Create a Python program to generate a bar chart of a given data set. data_points = [50, 45, 55]","completion":"import matplotlib.pyplot as plt plt.bar(range(len(data_points)), data_points) plt.title('Bar Chart') plt.xlabel('index') plt.ylabel('value') plt.show()"},{"prompt":"Optimize a Python script to find all prime numbers between 1 to 100 using Sieve of Eratosthenes.","completion":"def sieve(n): prime = [True] * (n + 1) p = 2 while (p * p <= n): if prime[p] == True: for i in range(p * 2, n + 1, p): prime[i] = False p += 1 for p in range(2, n + 1): if prime[p]: print(p, end=' ') # Driver Code if __name__ == \\"__main__\\": n = 100 print(\\"Following are the primes smaller than or equal to\\", n) sieve(n)"},{"prompt":"Generate an algorithm in Python that takes an array of strings and returns all strings which are palindromes. ['racecar', 'level', 'toronto', 'bob', 'noon']","completion":"def palindrome_checker(string_list): result = [] for string in string_list: rev_string = string[::-1] if rev_string == string: result.append(string) return result palindromes = palindrome_checker(['racecar', 'level', 'toronto', 'bob', 'noon']) print(palindromes)"},{"prompt":"Write a Python program to generate a report on the number of tasks completed in a week. The report should include the total number of tasks completed, as well as the percentage of each type of task completed. Task Data: Task Type: Analysis, Number Completed: 3 Task Type: Design, Number Completed: 4 Task Type: Programming, Number Completed: 7","completion":"total_completed = 14 report = \\"In the past week, a total of {total_completed} tasks were completed. Analysis tasks accounted for {analysis_percent}%, design tasks accounted for {design_percent}%, and programming tasks accounted for {programming_percent}% of all tasks completed.\\" analysis_percent = (3/14)*100 design_percent = (4/14)*100 programming_percent = (7/14)*100 print(report.format(total_completed=total_completed, analysis_percent=analysis_percent, design_percent=design_percent, programming_percent=programming_percent))"},{"prompt":"Write a Python program to sort the list of elements by their occurrence in the list. l = [1,2,2,2,2,3,3,3,3,3,3,1,1,1]","completion":"\\"\\"\\" Sort the elements in the list by their occurrence \\"\\"\\" from collections import Counter def sort_by_occurrence(l): counts = Counter(l) sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True) unique_elems = [elem[0] for elem in sorted_counts] sorted_list = [] for elem in unique_elems: for i in range(counts[elem]): sorted_list.append(elem) return sorted_list print(sort_by_occurrence(l))"},{"prompt":"Construct a loop in Python to add all the elements of a given list. mylist = [5, 12, 17, 22]","completion":"total_sum = 0 for num in mylist: total_sum += num print(\\"The sum is\\",total_sum)"},{"prompt":"Write a function in Python to remove all numbers from an array. [3, 1, 4, 5, 6, 2]","completion":"def remove_numbers(arr): new_arr = [] for el in arr: if not isinstance(el, int): new_arr.append(el) return new_arr a = [3, 1, 4, 5, 6, 2] print(remove_numbers(a))"},{"prompt":"Develop a Python program to scrape a website for all links (internal and external) within the homepage. Not Applicable","completion":"import requests import bs4 # Function to scrape all links def scrapeLinks(url): # get the html content from the page r = requests.get(url) html = r.text # parse the html with beautiful soup soup = bs4.BeautifulSoup(html, 'lxml') # create an empty list to store the links links = [] # loop through each link in the page for link in soup.find_all('a'): # store the link in the list links.append(link.get('href')) return links # example url url = 'https://example.net' # scrape the links links = scrapeLinks(url) # print the links for link in links: print(link)"},{"prompt":"Create a distance calculator program in Python that takes in two coordinates and returns the distance between them. coordinates1 = (5, 3) coordinates2 = (2, 7)","completion":"import math def distance_calc(coord1, coord2): \\"\\"\\"Returns the distance between two coordinates.\\"\\"\\" x1, y1 = coord1 x2, y2 = coord2 dist = math.sqrt((x2-x1)**2 + (y2-y1)**2) return dist print(distance_calc(coordinates1, coordinates2))"},{"prompt":"Generate a Python code snippet to add two matrices of the same size. A = [[1, 2], [3, 4]], B = [[5, 6], [7, 8]].","completion":"def add_matrices(matrixA, matrixB): #Check matrices are the same size assert len(matrixA) == len(matrixB) assert len(matrixA[0]) == len(matrixB[0]) #Create an empty matrix for the answer answer = [[0 for row in range(len(matrixA))] for column in range(len(matrixA[0]))] #Go through the matrices and add them for row in range(0, len(matrixA)): for column in range(0, len(matrixA[0])): answer[row][column] = matrixA[row][column] + matrixB[row][column] return answer A = [[1, 2], [3, 4]] B = [[5, 6], [7, 8]] print(add_matrices(A, B))"},{"prompt":"Create a Python function which takes a list of strings as an input and determines if the list contains palindrome strings (i.e. strings that are the same forward and backwards). list_of_strings = [racecar, cat, mom, noon]","completion":"def is_palindrome(list_of_strings): palindrome_list = [string for string in list_of_strings if string == string[::-1]] if palindrome_list: return True return False"},{"prompt":"dentify if code is written in Python 2 or Python 3. import urllib2 url = http://www.example.com response = urllib2.urlopen(url) data = response.read() print(data)","completion":"def is_python2_or_3(code): \\"\\"\\" This function takes in a code and returns if it's written in Python 2 or Python 3. Parameters: code (str): the code Returns: str: Python 2 or Python 3 \\"\\"\\" if \\"urllib2\\" in code: return \\"Python 2\\" elif \\"urllib.request\\" in code: return \\"Python 3\\" else: return \\"\\""},{"prompt":"Create a machine learning model in Python to predict if a customer will place a new order based on past sales.","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression data = pd.read_csv('dataset.csv') X = data.drop('label', axis=1).to_numpy() y = data['label'].to_numpy() X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # logistic regression model model = LogisticRegression() model.fit(X_train, y_train)"},{"prompt":"Create a TCP server and client application in Python","completion":"#TCP server import socket # Create a TCP/IP socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Bind the socket to the port server_address = ('localhost', 10000) print('starting up on {} port {}'.format(*server_address)) sock.bind(server_address) # Listen for incoming connections sock.listen(1) while True: # Wait for a connection print('waiting for a connection') connection, client_address = sock.accept() try: print('connection from', client_address) # Receive the data in small chunks and retransmit it while True: data = connection.recv(16) print('received {!r}'.format(data)) if data: print('sending data back to the client') connection.sendall(data) else: print('no data from', client_address) break finally: # Clean up the connection connection.close() #TCP client import socket # Create a TCP/IP socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Connect the socket to the port where the server is listening server_address = ('localhost', 10000) print('connecting to {} port {}'.format(*server_address)) sock.connect(server_address) try: # Send data message = b'this is the message. It will be repeated.' print('sending {!r}'.format(message)) sock.sendall(message) # Look for the response amount_received = 0 amount_expected = len(message) while amount_received < amount_expected: data = sock.recv(16) amount_received += len(data) print('received {!r}'.format(data)) finally: print('closing socket') sock.close()"},{"prompt":"mplement a decision tree classifier in Python.","completion":"# Importing DecisionTreeClassifier from sklearn library from sklearn.tree import DecisionTreeClassifier # Defining the decision tree classifier # Using \\"entropy\\" as criterion to decide the further split clf = DecisionTreeClassifier(criterion=\\"entropy\\") # Fitting the decision tree classifier on the data clf = clf.fit(X, y)"},{"prompt":"Python, create a function that takes a character as input and returns its ASCII value.","completion":"def getAsciiValue(char): return ord(char)"},{"prompt":"Build a Python program that generates a list of prime numbers between a given range. 2, 11","completion":"# Function to generate prime numbers between the given range def generatePrimes(start, end): primeList = [] for num in range(start, end + 1): # all prime numbers are greater than 1 if num > 1: for i in range(2, num): if (num % i) == 0: break else: primeList.append(num) return primeList # Driver Code start, end = 2, 11 primeList = generatePrimes(start, end) print(\\"Prime numbers between\\", start, \\"and\\", end,\\"are:\\") print(primeList)"},{"prompt":"Develop a Python program to flatten a n level nested dictionary into a single list of keyvalue pairs. a nested dictionary { 'level1': { 'level2_1': { 'level3_1': 'value1' }, 'level2_2': { 'level3_2': 'value2' } } }","completion":"def flatten_dict(nested_dict, flat_dict={}, prefix=''): for key, value in nested_dict.items(): key_prefix = prefix + key + '.' if prefix else key if isinstance(value, dict): flatten_dict(value, flat_dict, key_prefix) else: flat_dict[key_prefix] = value return flat_dict"},{"prompt":"Develop a Python program that calculates the average of a set of numbers based on user input Not applicable","completion":"numlist = [] while True: user_input = input(\\"Enter a number: \\") if user_input == 'done': break elif user_input == '': continue else: numlist.append(int(user_input)) print(\\"Average is: \\", sum(numlist) / len(numlist))"},{"prompt":"Build a code program to index a set of strings of variable lengths. Strings: I am learning python, I love coding, Coding is awesome","completion":"from collections import defaultdict def index_strings(strings): index = defaultdict(list) for string in strings: for i, char in enumerate(string): index[char].append((i, string)) return index strings = [\\"I am learning python\\", \\"I love coding\\", \\"Coding is awesome\\"] print(index_strings(strings)) # { # 'I': [(0, 'I am learning python'), (0, 'I love coding')], # 'a': [(2, 'I am learning python')], # 'm': [(3, 'I am learning python')], # 'l': [(5, 'I am learning python'), (4, 'I love coding')], # 'e': [(7, 'I am learning python'), (6, 'I love coding')], # 'r': [(8, 'I am learning python'), (7, 'I love coding')], # 'n': [(10, 'I am learning python'), (9, 'I love coding'), (5, 'Coding is awesome')], # 'i': [(12, 'I am learning python'), (13, 'I love coding'), (6, 'Coding is awesome')], # 'g': [(14, 'I am learning python'), (15, 'I love coding'), (7, 'Coding is awesome')], # 'p': [(17, 'I am learning python')], # 'y': [(19, 'I am learning python')], # 't': [(20, 'I am learning python')], # 'h': [(21, 'I am learning python')], # 'o': [(16, 'I love coding'), (8, 'Coding is awesome')], # 'c': [(4, 'I love coding'), (0, 'Coding is awesome')], # 'd': [(5, 'I love coding'), (1, 'Coding is awesome')], # 's': [(2, 'Coding is awesome')], # 'a': [(3, 'Coding is awesome')], # 'w': [(4, 'Coding is awesome')], # 'e': [(5, 'Coding is awesome')], # }"},{"prompt":"Debug a Python function that swaps the values of two variables. def swap(x, y): temp = x x = y y = temp a = 10 b = 20 swap(a, b)","completion":"def swap(x, y): temp = x x = y y = temp a = 10 b = 20 swap(a, b) #Verify the result if a == 20 and b == 10: print(\\"Swap successful\\") else: print(\\"Swap unsuccessful\\") # Output: Swap successful"},{"prompt":"Write a Python program to find the pi (π) value to 5 decimal places.","completion":"import math # Caluclate pi to the 5th decimal place pi = round(math.pi, 5) # Print the pi print(pi)"},{"prompt":"Create an optimization program in Python using stochastic gradient descent (SGD) to solve a linear regression problem. Example data points [1,3], [2,5], [3,7], [4,11]","completion":"import numpy as np x = np.array([[1,3], [2,5], [3,7], [4,11]]) y = np.array([8,13,18,23]) alpha = 0.01 theta = np.zeros(2) iterations = 1000 def sgd(x, y, theta, alpha, m, iterations): for _ in range(iterations): for i in range(m): h = np.dot(x[i], theta) loss = h - y[i] gradient = x[i] * loss * (2/m) theta = theta - alpha * gradient return theta optimal_theta = sgd(x, y, theta, alpha, x.shape[0], iterations) print(optimal_theta)"},{"prompt":"Generate a correct python program to identify a particular character in a string. Search for the letter 'e' in the given string","completion":"def char_in_string(char, string): for c in string: if c == char: return True return False"},{"prompt":"Generate a Python program to implement a recursive search and replace on strings. Not applicable","completion":"def replace(s, old, new): if s == '': return s else: if s[0] == old: return new + replace(s[1:], old, new) else: return s[0] + replace(s[1:], old, new) string = \\"Hello World\\" print(replace(string, \\"World\\", \\"John\\"))"},{"prompt":"Develop a program in python to realize the following task: Calculate the average of all the elements of an array.","completion":"def avg(arr): tot_sum = 0 for num in arr: tot_sum += num return tot_sum/len(arr)"},{"prompt":"You need to classify if a given python code contains an error or not. Output true if there is an error, false if there is not. x=1 y=2 z=x+y","completion":"true"},{"prompt":"Build a basic textbased game in Python that prompts the user to enter a number between 0 and 10. Not applicable","completion":"import random def game(): num = random.randint(0, 10) num_guesses = 0 while True: guesses = int(input('Guess a number between 0 and 10: ')) num_guesses += 1 if guesses == num: print(f'You guessed correctly in {num_guesses} guesses! The number was {num}') break else: print('Wrong guess. Try again.') game()"},{"prompt":"Sum the integers in a Python list. List of integers: [1, 2, 3, 4, 5]","completion":"def sumList(list): sum = 0 for ele in list: sum += ele return sum list = [1, 2, 3, 4, 5] print(\\"Sum of the elements in given list is :\\", sumList(list))"},{"prompt":"Write a Python program that prompts the user for three numbers and prints the mean of those numbers. Not applicable","completion":"def get_mean(a, b, c): return (a + b + c)/3 a = float(input('Enter a number: ')) b = float(input('Enter a number: ')) c = float(input('Enter a number: ')) mean = get_mean(a, b, c) print('Mean:', mean)"},{"prompt":"Write a Python program to implement the Tower of Hanoi problem.","completion":"def hanoi(disc, source, auxiliary, target): if disc > 0: # Move n - 1 discs from source to auxiliary hanoi(disc - 1, source, target, auxiliary) # Move the last disc from source to target print(\\"Move the disc from {} to {}\\".format(source, target)) # Move the n - 1 discs from auxiliary to target hanoi(disc - 1, auxiliary, source, target) hanoi(3, 'A', 'B', 'C')"},{"prompt":"Write a Python code snippet that computes the Fibonacci sequence of the number 8.","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) print(Fibonacci(8))"},{"prompt":"Generate a function in Python that finds the maximum element in an array of integers using a linear search. [3, 17, 5, 19, 10]","completion":"# Function to find the maximum element in an array of integers def findMax(arr): maxEle = arr[0] # Iterate through the array and find the maximum element for i in range(1, len(arr)): if arr[i] > maxEle: maxEle = arr[i] return maxEle # Driver code arr = [3, 17, 5, 19, 10] maxEle = findMax(arr) print(\\"The maximum element in the given array is:\\", maxEle)"},{"prompt":"Write a function in Python that takes two strings and returns the length of the longest string. string1 = “hello” string2 = “goodbye”","completion":"def longest_string_length(string1, string2): if len(string1) > len(string2): return len(string1) return len(string2) string1 = “hello” string2 = “goodbye” result = longest_string_length(string1, string2) print(result)"},{"prompt":"Generate a Python program to find the distinct pair of the numbers whose product is equal to a given number. product = 24","completion":"def distinct_pair(product): pairs = [] for i in range(1,product): if product % i == 0: pairs.append((i,product//i)) return set(pairs)"},{"prompt":"Optimize the following python code for a more efficient solution. def to_square(nums): squares = [] for num in nums: squares.append(num * num) return square","completion":"def to_square(nums): squares = [num * num for num in nums] return squares"},{"prompt":"Write an XMB file from a .grd input file. The XMB file will contain all the translatable messages in the input file. Usage: grit xmb [i|h] [l LIMITFILE] OUTPUTPATH. OUTPUTPATH is the path you want to output the .xmb file to. The l option can be used to output only some of the resources to the .xmb file. LIMITFILE is the path to a file that is used to limit the items output to the xmb file. If the filename extension is .grd, the file must be a .grd file and the tool only output the contents of nodes from the input file that also exist in the limit file (as compared on the 'name' attribute). Otherwise it must contain a list of the IDs that output should be limited to, one ID per line, and the tool will only output nodes with 'name' attributes that match one of the IDs.","completion":"#!/usr/bin/env python # Copyright (c) 2012 The Chromium Authors. All rights reserved. # Use of this source code is governed by a BSD-style license that can be # found in the LICENSE file. \\"\\"\\"The 'grit xmb' tool. \\"\\"\\" import getopt import os from xml.sax import saxutils from grit import grd_reader from grit import lazy_re from grit import tclib from grit import util from grit.tool import interface # Used to collapse presentable content to determine if # xml:space=\\"preserve\\" is needed. _WHITESPACES_REGEX = lazy_re.compile(ur'ss*') # See XmlEscape below. _XML_QUOTE_ESCAPES = { u\\"'\\": u'&apos;', u'\\"': u'&quot;', } _XML_BAD_CHAR_REGEX = lazy_re.compile(u'[^u0009u000Au000D' u'u0020-uD7FFuE000-uFFFD]') def _XmlEscape(s): \\"\\"\\"Returns text escaped for XML in a way compatible with Google's internal Translation Console tool. May be used for attributes as well as for contents. \\"\\"\\" if not type(s) == unicode: s = unicode(s) result = saxutils.escape(s, _XML_QUOTE_ESCAPES) return _XML_BAD_CHAR_REGEX.sub(u'', result).encode('utf-8') def _WriteAttribute(file, name, value): \\"\\"\\"Writes an XML attribute to the specified file. Args: file: file to write to name: name of the attribute value: (unescaped) value of the attribute \\"\\"\\" if value: file.write(' %s=\\"%s\\"' % (name, _XmlEscape(value))) def _WriteMessage(file, message): presentable_content = message.GetPresentableContent() assert (type(presentable_content) == unicode or (len(message.parts) == 1 and type(message.parts[0] == tclib.Placeholder))) preserve_space = presentable_content != _WHITESPACES_REGEX.sub( u' ', presentable_content.strip()) file.write('<msg') _WriteAttribute(file, 'desc', message.GetDescription()) _WriteAttribute(file, 'id', message.GetId()) _WriteAttribute(file, 'meaning', message.GetMeaning()) if preserve_space: _WriteAttribute(file, 'xml:space', 'preserve') file.write('>') if not preserve_space: file.write('n ') parts = message.GetContent() for part in parts: if isinstance(part, tclib.Placeholder): file.write('<ph') _WriteAttribute(file, 'name', part.GetPresentation()) file.write('><ex>') file.write(_XmlEscape(part.GetExample())) file.write('</ex>') file.write(_XmlEscape(part.GetOriginal())) file.write('</ph>') else: file.write(_XmlEscape(part)) if not preserve_space: file.write('n') file.write('</msg>n') def WriteXmbFile(file, messages): \\"\\"\\"Writes the given grit.tclib.Message items to the specified open file-like object in the XMB format. \\"\\"\\" file.write(\\"\\"\\"<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?> <!DOCTYPE messagebundle [ <!ELEMENT messagebundle (msg)*> <!ATTLIST messagebundle class CDATA #IMPLIED> <!ELEMENT msg (#PCDATA|ph|source)*> <!ATTLIST msg id CDATA #IMPLIED> <!ATTLIST msg seq CDATA #IMPLIED> <!ATTLIST msg name CDATA #IMPLIED> <!ATTLIST msg desc CDATA #IMPLIED> <!ATTLIST msg meaning CDATA #IMPLIED> <!ATTLIST msg obsolete (obsolete) #IMPLIED> <!ATTLIST msg xml:space (default|preserve) \\"default\\"> <!ATTLIST msg is_hidden CDATA #IMPLIED> <!ELEMENT source (#PCDATA)> <!ELEMENT ph (#PCDATA|ex)*> <!ATTLIST ph name CDATA #REQUIRED> <!ELEMENT ex (#PCDATA)> ]> <messagebundle> \\"\\"\\") for message in messages: _WriteMessage(file, message) file.write('</messagebundle>') # Good resource on POT format: http://pology.nedohodnik.net/doc/user/en_US/ch-poformat.html def WritePotFile(file, cliques, lang='', include_translation=False): def WriteAttribute(prefix, value): if value: file.write('%s%sn' % (prefix, value)) def WriteExamples(): parts = message.GetContent() for part in parts: if isinstance(part, tclib.Placeholder): if part.GetExample(): file.write(u'#. - placeholder %s, example: %sn' % (part.GetPresentation(), part.GetExample())) else: file.write(u'#. - placeholder %s, literally replaced with: %sn' % (part.GetPresentation(), part.GetOriginal())) def PotEscape(text): return text.replace(u'', u'').replace(u'n', u'n').replace(u't', u't').replace(u'%', u'%').encode('utf-8') for clique in cliques: message = clique.GetMessage() WriteAttribute(u'#. - description:', message.GetDescription()) WriteExamples() WriteAttribute(u'#: id: ', message.GetId()) meaning = message.GetMeaning() if meaning: file.write(u'msgctxt \\"%s\\"n' % PotEscape(meaning)) def WriteMessagePart(key, msg): file.write(u'%s \\"' % key) parts = msg.GetContent() for part in parts: if isinstance(part, tclib.Placeholder): file.write(u'%%{%s}' % part.GetPresentation()) else: file.write(PotEscape(part)) file.write(u'\\"n') WriteMessagePart(u'msgid', message) if not include_translation: file.write(u'msgstr \\"\\"n') else: WriteMessagePart(u'msgstr', clique.MessageForLanguage(lang, pseudo_if_no_match=False, fallback_to_english=False)) file.write(u'n') class OutputXmb(interface.Tool): \\"\\"\\"Outputs all translateable messages in the .grd input file to an .xmb file, which is the format used to give source messages to Google's internal Translation Console tool. The format could easily be used for other systems. Usage: grit xmb [-i|-h] [-l LIMITFILE] OUTPUTPATH OUTPUTPATH is the path you want to output the .xmb file to. The -l option can be used to output only some of the resources to the .xmb file. LIMITFILE is the path to a file that is used to limit the items output to the xmb file. If the filename extension is .grd, the file must be a .grd file and the tool only output the contents of nodes from the input file that also exist in the limit file (as compared on the 'name' attribute). Otherwise it must contain a list of the IDs that output should be limited to, one ID per line, and the tool will only output nodes with 'name' attributes that match one of the IDs. The -i option causes 'grit xmb' to output an \\"IDs only\\" file instead of an XMB file. The \\"IDs only\\" file contains the message ID of each message that would normally be output to the XMB file, one message ID per line. It is designed for use with the 'grit transl2tc' tool's -l option. Other options: -D NAME[=VAL] Specify a C-preprocessor-like define NAME with optional value VAL (defaults to 1) which will be used to control conditional inclusion of resources. -E NAME=VALUE Set environment variable NAME to VALUE (within grit). \\"\\"\\" # The different output formats supported by this tool FORMAT_XMB = 0 FORMAT_IDS_ONLY = 1 FORMAT_POT = 2 def __init__(self, defines=None): super(OutputXmb, self).__init__() self.format = self.FORMAT_XMB self.defines = defines or {} def ShortDescription(self): return 'Exports all translateable messages into an XMB file.' def Run(self, opts, args): self.SetOptions(opts) limit_file = None limit_is_grd = False limit_file_dir = None own_opts, args = getopt.getopt(args, 'l:D:ihp') for key, val in own_opts: if key == '-l': limit_file = open(val, 'r') limit_file_dir = util.dirname(val) if not len(limit_file_dir): limit_file_dir = '.' limit_is_grd = os.path.splitext(val)[1] == '.grd' elif key == '-i': self.format = self.FORMAT_IDS_ONLY elif key == '-p': self.format = self.FORMAT_POT elif key == '-D': name, val = util.ParseDefine(val) self.defines[name] = val elif key == '-E': (env_name, env_value) = val.split('=', 1) os.environ[env_name] = env_value if not len(args) == 1: print ('grit xmb takes exactly one argument, the path to the XMB file ' 'to output.') return 2 xmb_path = args[0] res_tree = grd_reader.Parse(opts.input, debug=opts.extra_verbose) res_tree.SetOutputLanguage('en') res_tree.SetDefines(self.defines) res_tree.OnlyTheseTranslations([]) res_tree.RunGatherers() with open(xmb_path, 'wb') as output_file: self.Process( res_tree, output_file, limit_file, limit_is_grd, limit_file_dir) if limit_file: limit_file.close() print \\"Wrote %s\\" % xmb_path def Process(self, res_tree, output_file, limit_file=None, limit_is_grd=False, dir=None): \\"\\"\\"Writes a document with the contents of res_tree into output_file, limiting output to the IDs specified in limit_file, which is a GRD file if limit_is_grd is true, otherwise a file with one ID per line. The format of the output document depends on this object's format attribute. It can be FORMAT_XMB or FORMAT_IDS_ONLY. The FORMAT_IDS_ONLY format causes this function to write just a list of the IDs of all messages that would have been added to the XMB file, one ID per line. The FORMAT_XMB format causes this function to output the (default) XMB format. Args: res_tree: base.Node() output_file: file open for writing limit_file: None or file open for reading limit_is_grd: True | False dir: Directory of the limit file \\"\\"\\" if limit_file: if limit_is_grd: limit_list = [] limit_tree = grd_reader.Parse(limit_file, dir=dir, debug=self.o.extra_verbose) for node in limit_tree: if 'name' in node.attrs: limit_list.append(node.attrs['name']) else: # Not a GRD file, so it's just a file with one ID per line limit_list = [item.strip() for item in limit_file.read().split('n')] ids_already_done = {} cliques = [] for node in res_tree: if (limit_file and not ('name' in node.attrs and node.attrs['name'] in limit_list)): continue if not node.IsTranslateable(): continue for clique in node.GetCliques(): if not clique.IsTranslateable(): continue if not clique.GetMessage().GetRealContent(): continue # Some explanation is in order here. Note that we can have # many messages with the same ID. # # The way we work around this is to maintain a list of cliques # per message ID (in the UberClique) and select the \\"best\\" one # (the first one that has a description, or an arbitrary one # if there is no description) for inclusion in the XMB file. # The translations are all going to be the same for messages # with the same ID, although the way we replace placeholders # might be slightly different. id = clique.GetMessage().GetId() if id in ids_already_done: continue ids_already_done[id] = 1 clique = node.UberClique().BestClique(id) cliques += [clique] # Ensure a stable order of messages, to help regression testing. cliques.sort(key=lambda x:x.GetMessage().GetId()) messages = [c.GetMessage() for c in cliques] if self.format == self.FORMAT_IDS_ONLY: # We just print the list of IDs to the output file. for msg in messages: output_file.write(msg.GetId()) output_file.write('n') elif self.format == self.FORMAT_POT: WritePotFile(output_file, cliques) else: assert self.format == self.FORMAT_XMB WriteXmbFile(output_file, messages)"},{"prompt":"Suggest a way to generate a random series of characters with a given length in Python.","completion":"import random import string def generate_random_string(target_length): chars = string.ascii_letters + string.digits return ''.join(random.choice(chars) for _ in range(target_length))"},{"prompt":"Write an algorithm in Python to sort a given list using the bubble sort technique.","completion":"def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j]"},{"prompt":"Construct an algorithm in Python to print out the first 20 perfect squares. Not applicable","completion":"perfect_squares = [] i = 1 while len(perfect_squares) < 20: perfect_square = i * i perfect_squares.append(perfect_square) i = i + 1 print(perfect_squares)"},{"prompt":"Write a Python code to check if a given number is divisible by both 5 and 7 50","completion":"def is_divisible_by_5_and_7(num): if (num % 5 == 0 and num % 7 == 0): return True else: return False print(is_divisible_by_5_and_7(50))"},{"prompt":"Create a Python program that takes two strings and returns the result of concatenating them. string1 = 'Hello' string2 = 'World'","completion":"def concatStrings(string1, string2): return string1 + string2 print(concatStrings('Hello', 'World'))"},{"prompt":"Create an AWS Lambda function in Python that calculates the summation of two given numbers. Input1 = 2 Input2 = 3","completion":"import json def lambda_handler(event, context): # Get the input numbers num1 = event['Input-1'] num2 = event['Input-2'] # Calculate the sum result = num1 + num2 # Return the output return { 'Result': result }"},{"prompt":"Create a simple chatbot in Python with basic conversation and Q&A features. Not applicable","completion":"import re import random def respond(message): # Get a response based on the input message responses = [\\"I'm not sure I understand you fully.\\", \\"Please provide more information.\\", \\"What do you mean by that?\\", \\"Can you be more specific?\\"] # Set default response to random selection default_response = random.choice(responses) # Check for \\"greeting\\" type messages if re.search(r\\"hi|hey|hello|good morning|hola\\", message): responses = [\\"Hello!\\", \\"Hi there!\\", \\"Nice to meet you!\\", \\"Checking in.\\"] default_response = random.choice(responses) # Check for Q&A type questions query_words = [\\"where\\", \\"when\\", \\"what\\", \\"how\\", \\"why\\", \\"who\\"] words_in_message = message.lower().split() if any(word in words_in_message for word in query_words): default_response = \\"Sorry, I don't have the answer to that yet.\\" # Return the response return default_response"},{"prompt":"Write a Python program to find all the words in a string, that begin with a vowel. This is a sample string","completion":"vowels = ['a', 'e', 'i', 'o', 'u'] words = \\"This is a sample string\\".split() for word in words: if word[0].lower() in vowels: print(word)"},{"prompt":"Create an asynchronous task with a callback in Python.","completion":"import asyncio def callback(): print('Callback triggered') async def async_task(callback): await asyncio.sleep(3) callback() loop = asyncio.get_event_loop() loop.run_until_complete(async_task(callback))"},{"prompt":"Write a Python script that takes a long string and prints each word on a new line. string = Hello World this is a Test","completion":"#!/usr/bin/env python text = \\"Hello World this is a Test\\" words = text.split() for word in words: print(word)"},{"prompt":"Write a Python program to check if an item exists in a given list. mylist = [1,2,3,4,5]","completion":"def item_exists(mylist, element): if element in mylist: return True return False result = item_exists([1,2,3,4,5], 3) print(result)"},{"prompt":"Write Python code to build an ensembler for sentiment analysis","completion":"import pandas as pd import numpy as np from sklearn.ensemble import VotingClassifier from sklearn.naive_bayes import BernoulliNB from sklearn.feature_extraction import DictVectorizer from sklearn.linear_model import LogisticRegression class Ensembler(object): def __init__(self): self.ensemble_model = None def build_model(self, X, y): # Ensembler consists of Naive Bayes, Logistic Regression and Voting classifier nb_classifier = BernoulliNB() log_classifier = LogisticRegression() vectorizer = DictVectorizer() X_vectorized = vectorizer.fit_transform(X).toarray() voting_model = VotingClassifier( estimators=[ ('nb', nb_classifier), ('log', log_classifier) ], voting='soft', n_jobs=-1 ) self.ensemble_model = voting_model.fit(X_vectorized, y) def predict(self, X): X_vectorized = self.vectorizer.transform(X).toarray() return self.ensemble_model.predict(X_vectorized)"},{"prompt":"Create an algorithm in Python that implements Breadthfirst search. Not applicable","completion":"def breadth_first_search(graph, root): visited = [] queue = [] queue.append(root) while queue: node = queue.pop(0) if node not in visited: visited.append(node) queue.extend(graph[node]) return visited"},{"prompt":"Create an API for a movie ticket booking system that allows users to book tickets with specific seat numbers and payment methods. Not applicable","completion":"import flask from flask import request, jsonify app = flask.Flask(__name__) app.config[\\"DEBUG\\"] = True # Create some test data for our catalog in the form of a list of dictionaries. bookings = [ {'user_id': 1, 'movie_id': 1, 'movie_name':'Joker', 'seat_numbers':[1,2,3,4],'payment_method':'credit'}, {'user_id': 2, 'movie_id': 2, 'movie_name':'Hobbs and Shaw', 'seat_numbers':[3,4],'payment_method':'debit'}, {'user_id': 3, 'movie_id': 3, 'movie_name':'Toy Story 4', 'seat_numbers':[2],'payment_method':'cash'}, ] @app.route('/', methods=['GET']) def home(): return '''<h1>Movie Tickets Booking API</h1> <p>A prototype API for booking movie tickets.</p>''' @app.route('/api/bookings/all', methods=['GET']) def api_all(): return jsonify(bookings) @app.route('/api/bookings', methods=['GET']) def api_id(): # Check if an ID was provided as part of the URL. # If ID is provided, assign it to a variable. # If no ID is provided, display an error in the browser. if 'user_id' in request.args: user_id = int(request.args['user_id']) else: return \\"Error: No user_id field provided. Please specify an user_id.\\" # Create an empty list for our results results = [] # Loop through the data and match results that fit the requested ID. # IDs are unique, but other fields might return many results for booking in bookings: if booking['user_id'] == user_id: results.append(booking) # Use the jsonify function from Flask to convert our list of # Python dictionaries to the JSON format. return jsonify(results) app.run()"},{"prompt":"Generate a Python program to print out square numbers up to 10.","completion":"for i in range(1,11): print(i**2)"},{"prompt":"Write a Python program to convert a positive integer to its Roman numeral equivalent.","completion":"def int_to_roman(num): roman_numerals = { 1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I' } roman = '' for value, symbol in roman_numerals.items(): while num >= value: roman += symbol num -= value return roman"},{"prompt":"Create a function in Python which takes two arguments – an array of integers and an integer x – and returns a list of all pairs in the array with a sum equal to x. array = [4, 6, 2, 8] x = 10","completion":"def equalSums(array, x): result = [] for i in range(0, len(array)-1): for j in range(i + 1, len(array)): if array[i] + array[j] == x: result.append([array[i], array[j]]) return result print(equalSums(array, x))"},{"prompt":"Design a program in Python that can generate a frequency table for a given string. sample_string = This is a sample string","completion":"sample_string = \\"This is a sample string\\" # Create an empty dictionary to store the counts for each character counts = {} # Traverse through the string and update the count of each character for ch in sample_string: if ch not in counts: counts[ch] = 1 else: counts[ch] += 1 # Print the frequency table print(\\"Character t Frequency\\") for key in counts.keys(): print(key + 'tt' + str(counts[key]))"},{"prompt":"Create a Python program to encrypt a string using the Caesar’s Cipher. The caesar cipher involves shifting each letter of a plain text message by a fixed number of letters. Not applicable","completion":"def encrypt(plainText, shift): cipherText = \\"\\" for ch in plainText: if ch.isalpha(): stayInAlphabet = ord(ch) + shift if stayInAlphabet > ord('z'): stayInAlphabet -= 26 finalLetter = chr(stayInAlphabet) cipherText += finalLetter else: cipherText += ch return cipherText text = 'this is a plain text message.' shifted = encrypt(text, 3) print('Plain Text: ', text) print('Cipher Text:', shifted )"},{"prompt":"Design a Python class for creating a digital clock","completion":"class DigitalClock: def __init__(self): self.__hours = 0 self.__minutes = 0 self.__seconds = 0 def set_time(self,hours,minutes,seconds): self.__hours = hours self.__minutes = minutes self.__seconds = seconds def get_time(self): return self.__hours, self.__minutes, self.__seconds def display(self): print(str(self.__hours).zfill(2),\\":\\",str(self.__minutes).zfill(2),\\":\\",str(self.__seconds).zfill(2)) my_clock = DigitalClock() my_clock.set_time(12, 45, 10) my_clock.display()"},{"prompt":"Build a classifier in Python to differentiate between positive and negative sentiment in given text. Dataset: Twitter dataset with labels 0 for negative sentiment and 1 for positive sentiment.","completion":"import tensorflow as tf tf.compat.v1.enable_eager_execution() # Load training data train_data = tf.keras.datasets.twitter.load_data(num_words=10000) train_data[0] # Preprocess data train_x = tf.keras.preprocessing.sequence.pad_sequences(train_data[0], maxlen=500) train_y = train_data[1] model = tf.keras.Sequential([ tf.keras.layers.Embedding(10000, 64), tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)), tf.keras.layers.Dense(64, activation='relu'), tf.keras.layers.Dense(1, activation='sigmoid') ]) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(train_x, train_y, epochs=10)"},{"prompt":"Write a python program to connect to a database and fetch the user details.","completion":"import psycopg2 conn = psycopg2.connect(\\"host=localhost dbname=mydb user=myuser password=mypassword\\") cur = conn.cursor() cur.execute(\\"SELECT * FROM users\\") rows = cur.fetchall() for row in rows: user_id = row[0] username = row[1] user_email = row[3]"},{"prompt":"Generate a Python function to check whether a given list contains a given integer. [2, 4, 6], 4","completion":"def check_for_int(lst, int): if int in lst: return True else: return False lst = [2, 4, 6] int = 4 is_found = check_for_int(lst, int) print(is_found)"},{"prompt":"Write a Python program to traverse a tree data structure and print all the nodes in preorder. tree / 1 2 / / 3 4 5","completion":"def preorder(tree): if tree: print(tree.val) preorder(tree.left) preorder(tree.right) # Driver code tree = Node(1) tree.left = Node(2) tree.right = Node(3) tree.left.left = Node(4) tree.left.right = Node(5) preorder(tree)"},{"prompt":"Can you write a Python program to list all the prime numbers between 1 to 50?","completion":"def prime_numbers(n): prime_numbers_list = [] for num in range(2, n + 1): if all(num % i != 0 for i in range(2, num)): prime_numbers_list.append(num) return prime_numbers_list print(prime_numbers(50))"},{"prompt":"Create a base class in Python which serves as a parent class to other classes","completion":"class BaseClass: def __init__(self): self.var1 = None def method1(self, var1): raise NotImplementedError"},{"prompt":"Modify a python program so that it can sort the list of numbers in ascending order. numbers = [3, 5, 9, 1, 2]","completion":"numbers = [3, 5, 9, 1, 2] numbers.sort() print(numbers)"},{"prompt":"Write a python code to generate a sentence from a given grammar.","completion":"import random grammar = { \\"_S\\" : [\\"_NP _VP\\"], \\"_NP\\" : [\\"I\\", \\"you\\", \\"she\\"], \\"_VP\\" : [\\"love _NP\\", \\"hate _NP\\"] } def generate_sentence(grammar): # Select random start symbol symbol = random.choice(list(grammar.keys())) # Generate a new sentence sentence = [symbol] while symbol in grammar.keys(): # Choose a random alternative # of the current symbol alternatives = grammar[symbol] alternative = random.choice(alternatives) # Create a list of symbols from # the chosen alternative alternative_symbols = alternative.split() # Add the symbols to the sentence sentence.extend(alternative_symbols) # Get the next symbol symbol = sentence[-1] # Add a fullstop and return the sentence sentence[0] = sentence[0].capitalize() sentence.append(\\".\\") return \\" \\".join(sentence) if __name__ == '__main__': output = generate_sentence(grammar) print(output)"},{"prompt":"Optimize a given Python function to increase its performance. def factorial(n): if n == 0 or n == 1: return 1 else: return n * factorial(n1)","completion":"def factorial(n): \\"\\"\\"Calculates the factorial of \`n\` using an optimized approach. \\"\\"\\" result = 1 for i in range(2,n+1): result *= i return result if __name__ == '__main__': print(factorial(4)) # 24"},{"prompt":"Produce a Python program that outputs the factorials of the first 10 positive integers.","completion":"def factorial(n): result = 1 for x in range(2, n + 1): result = result * x return result for n in range(1, 11): print(n, \\"! =\\", factorial(n))"},{"prompt":"Create a natural language understanding task in Python to classify different kinds of fruits. data = [apple, orange, banana, mango, strawberry, peach]","completion":"import nltk # Label the fruits fruits = [\\"apple\\", \\"orange\\", \\"banana\\", \\"mango\\", \\"strawberry\\", \\"peach\\"] labels = [\\"APPLE\\", \\"ORANGE\\", \\"BANANA\\", \\"MANGO\\", \\"STRAWBERRY\\", \\"PEACH\\"] # Split data into train and test sets train_data = fruits[:int(len(fruits)*0.8)] test_data = fruits[int(len(fruits)*0.8):] # Create tuple pairs of train and test data train_data = list(zip(train_data, labels)) test_data = list(zip(test_data, labels)) # Train classifier classifier = nltk.NaiveBayesClassifier.train(train_data) # Test classifier accuracy = nltk.classify.accuracy(classifier, test_data) # Classify a new fruit fruit = \\"kiwi\\" fruit_class = classifier.classify(fruit) print(f'The fruit {fruit} is classified as {fruit_class}.')"},{"prompt":"mplement a Stack data structure in Python.","completion":"\\"\\"\\" Implement a Stack data structure in Python \\"\\"\\" class Stack: def __init__(self): self.stack = [] def push(self, data): self.stack.append(data) def pop(self): if len(self.stack) == 0: return None return self.stack.pop(-1) def peek(self): if len(self.stack) == 0: return None return self.stack[-1] if __name__ == \\"__main__\\": stack = Stack() stack.push(1) stack.push(2) stack.push(3) stack.push(4) print(\\"Peek:\\", stack.peek()) print(\\"Pop:\\", stack.pop())"},{"prompt":"Create a Python script to solve an equations. 2x + 3 = 5","completion":"def solve(eq): lhs_x = eq.split(\\"=\\")[0] rhs = float(eq.split(\\"=\\")[1]) x = float(lhs_x.split(\\"+\\")[0].split(\\"x\\")[0]) constant = float(lhs_x.split(\\"+\\")[1]) return (rhs - constant) / x if __name__ == \\"__main__\\": eq = \\"2x + 3 = 5\\" print(solve(eq))"},{"prompt":"Create a function in Python to improve the readability of a text by converting it into title case. This is My Sample Text for Testing","completion":"def to_title_case(text): words = text.split() title_case_words = [word.capitalize() for word in words] return \\" \\".join(title_case_words)"},{"prompt":"Convert the Python code attached to an equivalent Java program. def print_list(lst): for item in lst: print(item)","completion":"public class ListPrinter { public static void printList(List<Object> lst) { for (Object item : lst) { System.out.println(item); } } }"},{"prompt":"Calculate the average grade of a student given a list of their grades in Python. grades = [90, 85, 80, 75, 70]","completion":"def calculate_average_grade(grades): total = 0 for grade in grades: total += grade avg_grade = total / len(grades) return avg_grade grades = [90, 85, 80, 75, 70] avg_grade = calculate_average_grade(grades) print('Average Grade: ', avg_grade) # Output: Average Grade: 80.0"},{"prompt":"Create a Python program to parse a JSON object and create a SQL table with the data. { id: 1, name: John Doe, age: 25 }","completion":"import json import sqlite3 # Parse the JSON object data = json.loads(data) # Connect to the database conn = sqlite3.connect('database.db') c = conn.cursor() # Create the SQL table c.execute(\\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\\") # Insert the data c.execute(\\"INSERT INTO users (id, name, age) VALUES (?,?,?)\\", (data[\\"id\\"], data[\\"name\\"], data[\\"age\\"])) # Commit the changes conn.commit() # Close the connection conn.close()"},{"prompt":"Develop an AI chatbot in Python that can recognize a customer’s intent This chatbot should recognize any intent with the keyword 'discount'.","completion":"import nltk from nltk.corpus import stopwords from nltk.tokenize import word_tokenize class Chatbot: def __init__(self): self.query_words = set(['discount']) self.stop_words = set(stopwords.words('english')) def detect_query(self, sentence): words = word_tokenize(sentence) query_words = [word for word in words if word in self.query_words and word not in self.stop_words] detected_words = \\",\\".join(query_words) return detected_words"},{"prompt":"Create a sorting algorithm in Python to sort a given array in ascending order. [9, 8, 7, 6, 5, 4, 3, 2, 1]","completion":"def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) print(quicksort([9, 8, 7, 6, 5, 4, 3, 2, 1]))"},{"prompt":"Create a Python program to calculate the sum of the numbers in a given list up to a given position in the list. [1,3,5,4,7], Position = 3","completion":"def sum_list_position(list, position): sum = 0 for i in range(position+1): sum += list[i] return sum list = [1,3,5,4,7] position = 3 print(sum_list_position(list,position)) # prints 9"},{"prompt":"Write a Python program to sort a list of dictionaries by a given key. list_of_dicts = [ {'name': 'John', 'age': 25}, {'name': 'Adam', 'age': 30}, {'name': 'Sarah', 'age': 28} ] sort_by_key = 'age'","completion":"def sort_dicts_by_key(list_of_dicts, key): return sorted(list_of_dicts, key=lambda k: k[key]) sorted_dicts = sort_dicts_by_key(list_of_dicts, sort_by_key) # Output: [ {'name': 'John', 'age': 25}, {'name': 'Sarah', 'age': 28}, {'name': 'Adam', 'age': 30} ]"},{"prompt":"Create a python program to create a dictionary with key as student name and its value as their grade in a class.","completion":"student_grades = { \\"Adam\\": \\"A\\", \\"Amy\\": \\"B\\", \\"Aaron\\": \\"A\\", \\"Bella\\": \\"C\\" }"},{"prompt":"Can you write a Python script to perform a Linear Search on a list of numbers? [1, 2, 3, 4, 5] 3","completion":"def linear_search(number_list, search_number): for index, num in enumerate(number_list): if num == search_number: return index return -1 number_list = [1, 2, 3, 4, 5] search_number = 3 result = linear_search(number_list, search_number) if result != -1: print(\\"Number is present at index\\", result) else: print(\\"Number is not present in the list\\")"},{"prompt":"Create an objectoriented Python program to calculate the area of a triangle given the lengths of its three sides. Not applicable","completion":"class Triangle: def __init__(self, a, b, c): self.a = a self.b = b self.c = c def area(self): # Heron's Formula s = (self.a + self.b + self.c) / 2 return (s*(s-self.a)*(s-self.b)*(s-self.c)) ** 0.5 triangle = Triangle(3, 4, 5) print(triangle.area()) # Output: 6.0"},{"prompt":"Create a Python program to find the sum of all the values in a dictionary d = {'a': 10, 'b': 20, 'c':30}","completion":"def sum_values(d): sum = 0 for value in d.values(): sum += value return sum total = sum_values(d) print(total) # 60"},{"prompt":"Design a Python program that parses the data from a webpage and displays the top 5 words on the page.","completion":"import requests from bs4 import BeautifulSoup from collections import Counter #request to get the html response = requests.get('http://example.com/') # parse the html soup = BeautifulSoup(response.text, 'html.parser') # retrieve the text from the page text = soup.get_text() # get the word count words = text.split() word_count = Counter(words) # get the top 5 words top_words = word_count.most_common(5) # print the words for word, count in top_words: print(f'{word}: {count}')"},{"prompt":"Create a function to convert Fahrenheit temperatures to Celsius in Python.","completion":"def fahrenheit_to_celsius(fahrenheit): celsius = (fahrenheit - 32) * (5/9) return celsius if __name__ == \\"__main__\\": fahrenheit = 32 celsius = fahrenheit_to_celsius(fahrenheit) print(\\"Fahrenheit to Celsius: {} degrees F = {} degrees C\\".format(fahrenheit, celsius))"},{"prompt":"mplement an algorithm in Python to detect an outlier from a data set. 25, 28, 32, 36, 39, 45, 45","completion":"#import numpy, pandas import numpy as np import pandas as pd # load dataset data = [25, 28, 32, 36, 39, 45, 45] # calculate interquartile range q25, q75 = np.percentile(data, 25), np.percentile(data, 75) iqr = q75 - q25 # calculate upper outlier cutoff upper_cutoff = q75 + (iqr * 1.5) # calculate lower outlier cutoff lower_cutoff = q25 - (iqr * 1.5) # Filter values between lower and upper cutoff outlier = [] for i in data: if i > upper_cutoff or i < lower_cutoff: outlier.append(i) # print outlier print('Outlier value: ', outlier)"},{"prompt":"Generate code for a decision tree with entropy metric to classify the species of mushrooms. No Inpu","completion":"import numpy as np from sklearn.tree import DecisionTreeClassifier # Load the dataset X = np.array([[...],[...], ....]) y = np.array(['A', 'B', 'C', ...]) # Create a decision tree model model = DecisionTreeClassifier(criterion=\\"entropy\\") # Fit the model using the data model.fit(X, y) # Generate the prediction code from sklearn.externals.six import StringIO from IPython.display import Image from sklearn.tree import export_graphviz import pydotplus dot_data = StringIO() export_graphviz(model, out_file=dot_data, filled=True, rounded=True, special_characters=True) graph = pydotplus.graph_from_dot_data(dot_data.getvalue()) Image(graph.create_png())"},{"prompt":"Write a Python program to normalize a 3x3 matrix. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"\\"\\"\\" Write a Python program to normalize a 3x3 matrix \\"\\"\\" # Function to normalize a 3x3 matrix def normalize_matrix(mat): norm_matrix= [] sum_elements = 0 for row in mat: for element in row: sum_elements += element for row in mat: norm_row = [] for element in row: norm_row.append(element/sum_elements) norm_matrix.append(norm_row) return norm_matrix # main if __name__ == \\"__main__\\": # Given matrix mat = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] norm_matrix = normalize_matrix(mat) print(\\"Normalized matrix:\\") print(norm_matrix)"},{"prompt":"Generate a Python dictionary that stores objects with unique values. ['alec', 'bob', 'sara', 'john', 'elon']","completion":"unique_dict = { 'alec' : 'alec', 'bob' : 'bob', 'sara' : 'sara', 'john' : 'john', 'elon' : 'elon' }"},{"prompt":"Write a function to return the five longest words from an input list. words = [Python, programming, language, artificial, intelligence, machine, learning]","completion":"\\"\\"\\" Write a function to return the five longest words from an input list \\"\\"\\" def five_longest_words(words): words.sort(key=len, reverse=True) return words[:5] if __name__ == '__main__': words = [\\"Python\\", \\"programming\\", \\"language\\", \\"artificial\\", \\"intelligence\\", \\"machine\\", \\"learning\\"] print(five_longest_words(words))"},{"prompt":"Develop a machine learning model with Python to predict stock prices of a given company. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Load data data = pd.read_csv('company_stock_data.csv') # Create and separate training and test set X = data.drop(['Price'],axis=1) y = data['Price'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101) # Train model linear_regression = LinearRegression() linear_regression.fit(X_train, y_train) # Evaluate model accuracy = linear_regression.score(X_test, y_test) print(\\"Model accuracy is:\\", accuracy)"},{"prompt":"Write a Python program to count the number of occurrences of each word in a sentence. The quick brown fox jumps over the lazy dog","completion":"sentence = 'The quick brown fox jumps over the lazy dog' words = sentence.split(' ') word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 for k,v in word_count.items(): print(k , ':' , v)"},{"prompt":"Create a function in Python that calculates the roots of a quadratic equation?","completion":"\\"\\"\\" Function to calculate the roots of a quadratic equation \\"\\"\\" def quadratic_roots(a, b, c): # calculate the discriminant discriminant = (b**2) - (4*a*c) # calculate the two roots root1 = (-b + discriminant**0.5) / (2*a) root2 = (-b - discriminant**0.5) / (2*a) return (root1,root2) if __name__ == '__main__': roots = quadratic_roots(1, 4, 4) print('Roots are: {} and {}'.format(*roots))"},{"prompt":"Using Python, construct a program to calculates the average of three numbers (input provided). 4, 9, 10","completion":"num1 = 4 num2 = 9 num3 = 10 total = num1 + num2 + num3 average = total / 3 print(\\"Average =\\", average) # Output: Average = 7.66"},{"prompt":"Create a Python code generator for drawing a 3D cube using Pyglet.","completion":"import pyglet #cube window window = pyglet.window.Window() origin_x = window.width/2 origin_y = window.height/2 #cube sides width = 400 height = 400 depth = 400 #vertices x1,y1,z1 = origin_x - width/2, origin_y - height/2, 0 x2,y2,z2 = origin_x + width/2, origin_y - height/2, 0 x3,y3,z3 = origin_x - width/2, origin_y + height/2, 0 x4,y4,z4 = origin_x + width/2, origin_y + height/2, 0 x5,y5,z5 = origin_x - width/2, origin_y - height/2, depth x6,y6,z6 = origin_x + width/2, origin_y - height/2, depth x7,y7,z7 = origin_x - width/2, origin_y + height/2, depth x8,y8,z8 = origin_x + width/2, origin_y + height/2, depth # defining the vertices vertices = [x1,y1,z1, x2,y2,z2, x3,y3,z3, x4,y4,z4, x5,y5,z5, x6,y6,z6, x7,y7,z7, x8,y8,z8] #drawing the cube polygon=pyglet.graphics.vertex_list(36, ('v3f/static',vertices) ) #clear the window @window.event def on_draw(): window.clear() polygon.draw(pyglet.gl.GL_QUADS) pyglet.app.run()"},{"prompt":"mplement a function in Python to find the longest common subsequence of two given strings. String 1: abcdaf String 2: acbcf","completion":"def longest_common_subsequence(s1, s2): m = len(s1) n = len(s2) dp = [[0 for i in range(n+1)] for i in range(m+1)] for i in range(m): for j in range(n): if s1[i] == s2[j]: dp[i+1][j+1] = dp[i][j] + 1 else: dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1]) return dp[m][n]"},{"prompt":"Save Levels: 1. Select the building levels to save. 2. Apply filtering beforehand to skip nonlevel elements. 3. Run the script. 4. View dependant properties such as endpoint locations, level heads, and leaders will be saved for reuse. 5. Nonlevel elements will be skipped with dialog. 6. The saved levels will be stored in a file named LevelPlacement in the temporary directory. 7. Tested Revit API: 2020. 8. This script is part of PyRevitPlus: Extensions for PyRevit. 9. For more information, visit github.com/ejsejs or contact @ejsejs.","completion":"\\"\\"\\" Save Levels Save the view dependant properties - endpoint locations, level heads and leaders of the selected building levels for re-use Non-level elements will be skipped with dialog, so it's advisable to apply filtering beforehead TESTED REVIT API: 2020 @ejs-ejs This script is part of PyRevitPlus: Extensions for PyRevit github.com/ejs-ejs | @ejs-ejs -------------------------------------------------------- RevitPythonWrapper: revitpythonwrapper.readthedocs.io pyRevit: github.com/eirannejad/pyRevit \\"\\"\\" import os import pickle from tempfile import gettempdir from collections import namedtuple import rpw from rpw import doc, uidoc, DB, UI Point = namedtuple('Point', ['X', 'Y','Z']) Axis = namedtuple('Axis', ['Name', 'Start', 'End','StartBubble', 'EndBubble', 'StartBubbleVisible', 'EndBubbleVisible']) tempfile = os.path.join(gettempdir(), 'LevelPlacement') cView = doc.ActiveView if not(cView.ViewType == DB.ViewType.Section or cView == DB.ViewType.Elevation): UI.TaskDialog.Show('pyRevitPlus', 'View type '{}' not supported'.format(cView.ViewType)) else: experimental = True UI.TaskDialog.Show('pyRevitPlus', 'Support for '{}' view type is experimental!'.format(cView.ViewType)) selection = rpw.ui.Selection() #if len(selection) <> 1: # UI.TaskDialog.Show('pyRevitPlus', 'Select a single grid line!') # exit(0); n=0 LevelLines = dict() for cLevel in selection: el = cLevel.unwrap() if isinstance(el, DB.Level): curves=el.GetCurvesInView(DB.DatumExtentType.ViewSpecific, cView) if len(curves) <> 1: UI.TaskDialog.Show('pyRevitPlus', 'The level line is defind by {} curves, unable to proceed', len(curves)) else: cLevelLine = {'Name':'', 'Start': Point(0,0,0), 'End': Point(0,0,0), 'StartBubble': False, 'StartBubbleVisible': False, 'EndBubble': False, 'EndBubbleVisible': False} cCurve = curves[0] leader0 = el.GetLeader(DB.DatumEnds.End0, cView) if leader0: tmp = leader0.Elbow cLevelLine['Leader0Elbow'] = Point(tmp.X, tmp.Y,tmp.Z) tmp = leader0.End cLevelLine['Leader0End'] = Point(tmp.X, tmp.Y,tmp.Z) tmp = leader0.Anchor cLevelLine['Leader0Anchor'] = Point(tmp.X, tmp.Y,tmp.Z) leader1 = el.GetLeader(DB.DatumEnds.End1, cView) if leader1: tmp = leader1.Elbow cLevelLine['Leader1Elbow'] = Point(tmp.X, tmp.Y,tmp.Z) tmp = leader1.End cLevelLine['Leader1End'] = Point(tmp.X, tmp.Y,tmp.Z) tmp = leader1.Anchor cLevelLine['Leader1Anchor'] = Point(tmp.X, tmp.Y,tmp.Z) cLevelLine['Name'] = el.Name tmp = cCurve.GetEndPoint(0) cLevelLine['Start'] = Point(tmp.X, tmp.Y,tmp.Z) tmp = cCurve.GetEndPoint(1) cLevelLine['End'] = Point(tmp.X, tmp.Y,tmp.Z) if el.HasBubbleInView(DB.DatumEnds.End0, cView): cLevelLine['StartBubble']=True if el.HasBubbleInView(DB.DatumEnds.End1, cView): cLevelLine['EndBubble']=True if el.IsBubbleVisibleInView(DB.DatumEnds.End0, cView): cLevelLine['StartBubbleVisible']=True if el.IsBubbleVisibleInView(DB.DatumEnds.End1, cView): cLevelLine['EndBubbleVisible']=True #if isinstance(cCurve, DB.Arc): # tmp = cCurve.Center # cLevelLine['Center'] = Point(tmp.X, tmp.Y,tmp.Z) LevelLines[cLevelLine['Name']] = cLevelLine n += 1 else: #if isinstance(el, DB.MultiSegmentGrid): # UI.TaskDialog.Show('pyRevitPlus', 'Skipping yet unsupported Multi-Segment grid '{}''.format(el.Name)) #else: UI.TaskDialog.Show('pyRevitPlus', 'Skipping non- level element '{}''.format(el.Name)) if n<>1: msg = 'Saved {} level placements to {}'.format(n,tempfile) else: msg = 'Saved level '{}' placement to {}'.format(cLevelLine['Name'],tempfile) if n>0: with open(tempfile, 'wb') as fp: pickle.dump(LevelLines, fp) # close(fp) UI.TaskDialog.Show('pyRevitPlus', msg) else: UI.TaskDialog.Show('pyRevitPlus', 'Nothing to save')"},{"prompt":"Using the given dictionary, write a program in Python to find the most frequent word. sample_dict = {'electron':10, 'atom':3, 'chemistry':2, 'quantum':15}","completion":"def most_frequent(sample_dict): key = max(sample_dict, key=sample_dict.get) return key print(most_frequent(sample_dict)) # Outputs: \\"quantum\\""},{"prompt":"Write a Python program to create a program that computes the area of a triangle given three sides. side1 = 3 side2 = 5 side3 = 4","completion":"def area_triangle(side1, side2, side3): # calculate the semi-perimeter s = (side1 + side2 + side3) / 2 # calculate the area area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5 return area"},{"prompt":"Find the frequency of elements in a given list in Python. List: [1, 1, 2, 3, 3, 3, 4, 4, 5]","completion":"from collections import Counter given_list = [1, 1, 2, 3, 3, 3, 4, 4, 5] my_dict = Counter(given_list) print(my_dict) # output: Counter({3: 3, 4: 2, 1: 2, 2: 1, 5: 1})"},{"prompt":"Create a class in Python that represents an employee object with three attributes employee ID, name and salary. Not applicable","completion":"class Employee: def __init__(self, employee_id, name, salary): self.employee_id = employee_id self.name = name self.salary = salary def __repr__(self): return 'Employee({}, {}, {})'.format(self.employee_id, self.name, self.salary)"},{"prompt":"Can you write a Python program to search a list of numbers and return the index positions of matches? list = [1, 5, 7, 8, 10] number = 8","completion":"def search(lst, number): for i, n in enumerate(lst): if n == number: return i return -1 result = search(lst, number) print(result)"},{"prompt":"Create an AI assistant that can answer questions related to programming.","completion":"import nltk from nltk.stem.wordnet import WordNetLemmatizer from sklearn.feature_extraction.text import TfidfVectorizer #List of questions and answers qa_pairs = { \\"What is a function in Python?\\": \\"In Python, a function is a block of code that can be reused multiple times with different input parameters to perform a certain task.\\", \\"What is a variable?\\": \\"A variable is a name for a location in memory where a value can be stored\\", \\"What is a loop?\\": \\"A loop is a programming construct that allows a set of instructions to be repeated or iterated until a certain condition is met\\" } #Create a lemmatizer lemmatizer = WordNetLemmatizer() #Create and train a tf-idf vectorizer vectorizer = TfidfVectorizer(tokenizer=lambda doc: doc, lowercase=False) #Create a matrix of tokens X = vectorizer.fit_transform(qa_pairs.keys()) #Create a function to answer questions def answer_question(question): #Tokenize the question question_tokens = nltk.word_tokenize(question) #Lemmatize the tokens question_tokens = [lemmatizer.lemmatize(token, pos='v') for token in question_tokens] #Transform the question query_vector = vectorizer.transform([question_tokens]) #Calculate the cosine similarity of the query vector and the matrix of tokens cosine_similarities = X.dot(query_vector.T).T #Return the answer with the highest similarity return qa_pairs[qa_pairs.keys()[cosine_similarities.argsort().item()[-1]]] #Test the model print(answer_question(\\"What is a loop in programming?\\")) # Output: A loop is a programming construct that allows a set of instructions to be repeated or iterated until a certain condition is met"},{"prompt":"Categorize a given list of Wikipedia articles into their respective categories using a Python library. List of articles; Article 1: 'Advanced Dungeons & Dragons' Article 2: 'The Legend of Zelda' Article 3: 'Mario Kart'","completion":"import wikipedia articles = ['Advanced Dungeons & Dragons', 'The Legend of Zelda', 'Mario Kart'] for article in articles: page = wikipedia.page(title=article) print(article, page.categories) # Output: # Advanced Dungeons & Dragons ['Books about games', 'Dungeons & Dragons', 'Role-playing game books'] # The Legend of Zelda ['1986 video games', 'Action-adventure games', 'High fantasy video games', 'Nintendo franchises', 'The Legend of Zelda'] # Mario Kart ['1992 video games', 'Kart racing video games', 'Mario Kart', 'Nintendo franchises', 'Racing video games', 'Video games developed in Japan']"},{"prompt":"Turn the Python dictionary below into a data table. d = { 'name': 'John', 'age': 24, 'gender': 'Male', 'hobby': 'Football' }","completion":"Name | Age | Gender | Hobby -----|-----|--------|------- John | 24 | Male | Football"},{"prompt":"w can you implement a breadthfirst search algorithm in Python?","completion":"# Python program to implement breadth-first search graph = { \\"A\\": [\\"B\\", \\"C\\"], \\"B\\": [\\"A\\", \\"D\\", \\"E\\"], \\"C\\": [\\"A\\", \\"F\\"], \\"D\\": [\\"B\\"], \\"E\\": [\\"B\\", \\"F\\"], \\"F\\": [\\"C\\", \\"E\\"] } visited = set() def bfs(graph, vertex): queue = [] queue.append(vertex) visited.add(vertex) while queue: node = queue.pop(0) print(node) for neighbor in graph[node]: if neighbor not in visited: visited.add(neighbor) queue.append(neighbor) vertex = \\"A\\" bfs(graph, vertex)"},{"prompt":"Develop a program using Python to replace all the nonalphanumeric characters in a given string with an asterisk ('*')? Hello* World_!,","completion":"import re def replaceNonAlphanum(s): pattern = r\\"[^a-zA-Z0-9]\\" return re.sub(pattern, \\"*\\", s) s = \\"Hello* World_!\\" print(replaceNonAlphanum(s)) // Output: Hello** World***"},{"prompt":"mplement the popular depthfirst search (DFS) algorithm with Python. graph = { 'A' : ['B','C'], 'B' : ['D', 'E'], 'C' : ['F'], 'D' : [], 'E' : ['F'], 'F' : [] }","completion":"def dfs(graph, start): visited, stack = set(), [start] while stack: vertex = stack.pop() if vertex not in visited: visited.add(vertex) stack.extend(graph[vertex] - visited) return visited"},{"prompt":"Generate a linkshortening web API in Python. The API should accept a request with a URL and return a URL pointing to a new service endpoint that can be used to reshorten the passed URL. URL: https://www.example.com/verylongurl","completion":"from flask import Flask, request, jsonify import json app = Flask(__name__) @app.route('/shorten', methods=['POST']) def shorten(): response = {'url': request.json[\\"url\\"]} response['short_url'] = 'http://example.com/' + create_short_url() return jsonify(response), 201 def create_short_url(): # Code to generate and store a unique short URL return 'abcd123' if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a function to convert a string to a list using Python. text = This is a sentence.","completion":"def string_to_list(text): lst = text.split() return lst text = \\"This is a sentence.\\" print(string_to_list(text))"},{"prompt":"Create classes and objects in python to represent a shape and its properties.","completion":"class Shape: def __init__(self, type, area): self.type = type self.area = area def get_type(self): return self.type def get_area(self): return self.area def set_area(self, area): self.area = area shape = Shape('Square', 10) print(shape.get_type()) #outputs Square print(shape.get_area()) #outputs 10"},{"prompt":"Develop a Python program to classify a list of numbers from 0 to 3 according to the following criteria A list of numbers: [1, 2, 0, 1, 3, 2]","completion":"def classify(nums): # Dictionary to store the classification result = {} result['zero'] = [] result['one'] = [] result['two'] = [] result['three'] = [] for num in nums: if num == 0: result['zero'].append(num) elif num == 1: result['one'].append(num) elif num == 2: result['two'].append(num) else: result['three'].append(num) return result nums = [1, 2, 0, 1, 3, 2] print(classify(nums)) # Output: {'zero': [0], 'one': [1, 1], 'two': [2, 2], 'three': [3]}"},{"prompt":"Create a Python function that takes a string and outputs the count of the number of uppercase letters in the string. ‘Hello World’","completion":"def countUppercase(myStr): uppercaseCount = 0 for l in myStr: if l.isupper(): uppercaseCount+=1 return uppercaseCount print(countUppercase('Hello World'))"},{"prompt":"Design a Python algorithm to detect the presence of a target word in a text.","completion":"# This is a python program to detect the presence of a target word in a text def detect_word(target, text): return target in text.split() # Example target = 'apple' text = 'I like apples, they are sweet and juicy.' if detect_word(target, text): print('Target word found in the text.') else: print('Target word not found in the text.')"},{"prompt":"Generate a code to create a scatterplot using the Seaborn library in Python.","completion":"\\"\\"\\" Generate a code to create a scatterplot using the Seaborn library in Python \\"\\"\\" import pandas as pd import seaborn as sns #load the sample datasets data1 = pd.read_csv('sample_data1.csv') data2 = pd.read_csv('sample_data2.csv') # Create a Scatterplot Using Seaborn sns.relplot(x=\\"data1_x\\", y=\\"data1_y\\", data=data1); sns.relplot(x=\\"data2_x\\", y=\\"data2_y\\", data=data2);"},{"prompt":"Find the most common words in a document using Python. The quick brown fox jumps over the lazy dog.","completion":"from collections import Counter text = \\"The quick brown fox jumps over the lazy dog.\\" words = text.split() word_count = Counter(words) # print the most common words print(word_count.most_common(3)) # Output: [('the', 2), ('quick', 1), ('brown', 1)]"},{"prompt":"Generate a web scraper in Python to scrape out 10 latest tweets from the page of a Twitter profile.","completion":"import tweepy import pandas as pd # Authentication credentials consumer_key = 'XXXXXXXXXXXXXXXXXXXXX' consumer_secret = 'XXXXXXXXXXXXXXXXXXXXX' access_token = 'XXXXXXXXXXXXXXXXXXXXX' access_token_secret = 'XXXXXXXXXXXXXXXXXXXXX' # Authenticating the access auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) # Fetching tweets tweets = api.user_timeline('username') # Parsing the tweets def parse_tweets(tweets): # Creating a list to store the parsed tweets parsed_tweets = [] # appending parsed tweets to the list for tweet in tweets[:10]: # Fetching tweets and # printing the fetched tweets parsed_tweets.append({'created_at': tweet.created_at, 'text': tweet.text}) # Returning the quotes return parsed_tweets # Printing the parsed tweets tweets_list = parse_tweets(tweets) print(tweets_list)"},{"prompt":"Write a function in Python that returns the maximum element in the given list. [1, 2, 3, 4]","completion":"def get_max_elem(arr): max_elem = arr[0] for elem in arr: if elem > max_elem: max_elem = elem return max_elem arr = [1, -2, 3, 4] max_elem = get_max_elem(arr) print(max_elem) # Output: 4"},{"prompt":"Write a Python program to classify the given data using logistic regression. ./data.csv x1, x2, y 1, 2, 0 2, 3, 0 4, 5, 1 5, 4, 1","completion":"import pandas as pd from sklearn.linear_model import LogisticRegression # load the data data = pd.read_csv('data.csv') # create the training and test set X = data[['x1', 'x2']] y = data['y'] # train the model model = LogisticRegression() model.fit(X, y) # make predictions preds = model.predict(X) # check accuracy accuracy = model.score(X, y) print('accuracy', accuracy) # output: accuracy 1.0"},{"prompt":"Generate a python program to generate a json response based on following specification The response should contain the following keys: name email age","completion":"import json data = { 'name': 'John Doe', 'email': 'john@example.com', 'age': 32 } json_data = json.dumps(data) print(json_data)"},{"prompt":"Write a data preprocessing script in Python Pandas for a given dataset. The dataset has the following attributes: ID Name Gender Age State Country Hobby","completion":"import pandas as pd # Read in dataset df = pd.read_csv('data.csv') # Drop records with missing values df.dropna(inplace=True) # Convert Gender, Age, State, Country, Hobby to categorical values df['Gender'] = df.Gender.astype(\\"category\\") df['Age'] = df.Age.astype(\\"category\\") df['State'] = df.State.astype(\\"category\\") df['Country'] = df.Country.astype(\\"category\\") df['Hobby'] = df.Hobby.astype(\\"category\\") # One-hot encode categorical values df = pd.get_dummies(df, columns=['Gender', 'Age', 'State', 'Country', 'Hobby']) # Convert ID to a string df['ID'] = df.ID.astype('str') # Output dataset df.to_csv('processed_data.csv', index=False)"},{"prompt":"Build a web scraping script using Python to retrieve data from a webpage.","completion":"import requests from bs4 import BeautifulSoup url = \\"http://example.com\\" response = requests.get(url) soup = BeautifulSoup(response.text, \\"html.parser\\") # scrape data from website"},{"prompt":"Optimize a Python program to reverse the elements of a list. my_list = [1, 2, 3, 4, 5]","completion":"def reverse_list(l): return [ele for ele in reversed(l)] my_list = [1, 2, 3, 4, 5] print(reverse_list(my_list))"},{"prompt":"Generate a python program to modify all the characters in a string to lowercase string = HELLO WORLD","completion":"def to_lowercase(string): lowercase_string = \\"\\" for char in string: lowercase_string += char.lower() return lowercase_string if __name__ == '__main__': string = \\"HELLO WORLD\\" print(to_lowercase(string))"},{"prompt":"Create a Python program to construct a binary search tree and display the ascending order of the nodes. Not applicable","completion":"# Binary Tree class Node: def __init__(self,data): self.data=data self.left=None self.right=None # Insert node in a binary tree def insert(node,data): if node is None: return Node(data) else: if data<=node.data: node.left=insert(node.left,data) else: node.right=insert(node.right,data) return node # Display tree in ascending order def inOrder(node): if node is not None: inOrder(node.left) print(node.data) inOrder(node.right) # Driver code root=None root=insert(root,42) insert(root,13) insert(root,24) insert(root,5) insert(root,76) insert(root,90) inOrder(root)"},{"prompt":"Create a program in Python which takes an input string, and sorts it alphabetically Fortnite","completion":"def sort_string(string): return ''.join(sorted(string)) string = \\"Fortnite\\" print(sort_string(string))"},{"prompt":"Write a Python function to calculate the maximum value of two numbers given by the user. x = 24 y = 63","completion":"def maximum_numbers(x, y): if x > y: return x else: return y print(maximum_numbers(x, y))"},{"prompt":"Create a graphical decision tree in Python that classifies iris flower data. iris dataset as a csv file","completion":"import pandas as pd from sklearn.tree import DecisionTreeClassifier from sklearn.tree import export_graphviz from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score # Read the csv file and parse the data df = pd.read_csv('iris.csv') x = df.drop('species', axis=1).values y = df['species'].values # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1) # Train the Decision Tree model = DecisionTreeClassifier(criterion='entropy', max_depth=3) model.fit(X_train, y_train) # Make predictions and evaluate the accuracy y_pred = model.predict(X_test) score = accuracy_score(y_test, y_pred) # Visualize the decision tree export_graphviz(model, out_file='iris_tree.dot', feature_names=['sepal length', 'sepal width', 'petal length', 'petal width'], class_names=['setosa', 'versicolor', 'virginica'], filled=True)"},{"prompt":"Generate an API end point using Python and Flask that will retrieve data from a given database and return it in a JSON format. Table Name Users Schema user_id (int) , user_name (string) , user_email (string)","completion":"from flask import Blueprint, jsonify user_endpoint = Blueprint('user', __name__) @user_endpoint.route('/users', methods=['GET']) def get_users(): users_data = [] query = 'SELECT user_id, user_name, user_email FROM Users' db_cursor.execute(query) users = db_cursor.fetchall() for user in users: user_data = { 'user_id': user[0], 'user_name': user[1], 'user_email': user[2] } users_data.append(user_data) return jsonify(users_data)"},{"prompt":"Write a python program to calculate the median of four numbers 3, 5, 10, 2","completion":"def calculate_median(nums): nums.sort() if len(nums) % 2 == 0: mid1 = len(nums) // 2 mid2 = mid1 - 1 return (nums[mid1] + nums[mid2]) / 2 else: return nums[len(nums) // 2] nums = [3, 5, 10, 2] print(calculate_median(nums))"},{"prompt":"Write a Python program to replace a particular word in a sentence with XXX. Sentence: It's a beautiful day Word to be replaced: beautiful","completion":"sentence = \\"It's a beautiful day\\" word = \\"beautiful\\" result = sentence.replace (word, \\"XXX\\") print(result)"},{"prompt":"Code a generalized function in Python that takes a string as input and returns the first nonrepeating character.","completion":"def first_non_repeating_char(string): for c in string: if string.count(c) == 1: return c return -1"},{"prompt":"Develop a Python program to sort a given list of strings by length","completion":"def sort_by_length(array): return sorted(array, key=len)"},{"prompt":"Create a Python script which takes a list of numbers and finds the maximum value. [1, 4, 6, 2, 5, 10]","completion":"# define a function def maxValue(list_of_nums): # assign the max as the first item in the list maximum = list_of_nums[0] # loop through the list for num in list_of_nums: # update the max value if its larger than the current maximum if num > maximum: maximum = num # return the final maximum return maximum # example: list_of_nums = [1, 4, 6, 2, -5, 10] max_value = maxValue(list_of_nums) print(max_value)"},{"prompt":"Generate a valid python program to convert a given string to its title case. hello world","completion":"def to_title_case(string): words = string.split() result = [] for word in words: result.append(word.title()) return ' '.join(result) title = to_title_case(\\"hello world\\") print(title)"},{"prompt":"mplement a sorting algorithm in Python that takes in a list of integers and returns a sorted version. [3, 5, 18, 6, 1, 20]","completion":"def sort_list(lst): for i in range(len(lst)): min_idx = i for j in range(i+1, len(lst)): if lst[min_idx] > lst[j]: min_idx = j lst[i], lst[min_idx] = lst[min_idx], lst[i] return lst print(sort_list([3, 5, 18, 6, 1, 20]))"},{"prompt":"Create an automation script using Python Selenium to navigate to a web page, click a link, and take a screenshot of the page. Input: URL: https://www.example.com","completion":"from selenium import webdriver from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC # initialise the driver driver = webdriver.Chrome() # go to the given URL driver.get(\\"https://www.example.com\\") # wait for the page to load wait = WebDriverWait(driver, 10) wait.until(EC.visibility_of_element_located(driver.find_element_by_xpath('//a[@href=\\"link\\"]'))) # click the given link link = driver.find_element_by_xpath('//a[@href=\\"link\\"]') link.click() # wait for the new page to load wait.until(EC.visibility_of_element_located(driver.find_element_by_tag_name('body'))) # take a screenshot of the current page driver.save_screenshot(\\"example.png\\") # close the driver driver.quit()"},{"prompt":"Create a Python program to update a user record in a database. Table name: user","completion":"import sqlite3 # create the connection to the Database con = sqlite3.connect('mydatabase.db') # get the user data from the database with con: cur = con.cursor() sql = 'SELECT * FROM users WHERE user_id=?' cur.execute(sql, ['12345']) user = cur.fetchone() # update the user data user_name = 'John Smith' user_age = 32 user_type = 'standard' # update the data in the database sql = 'UPDATE users SET name=?, age=?, type=? WHERE user_id=?' con.execute(sql, [user_name, user_age, user_type, '12345']) # commit the changes con.commit()"},{"prompt":"Write a Python function to take a list of words and return a dictionary of word counts.","completion":"def word_counts(words): counts = {} for word in words: if word in counts: counts[word] += 1 else: counts[word] = 1 return counts"},{"prompt":"Create a Python program to predict the type of fruit based on its color. Red","completion":"import numpy as np from sklearn import datasets from sklearn.tree import DecisionTreeClassifier # Load the dataset fruits = datasets.load_iris() # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(fruits.data, fruits.target, test_size=0.3, random_state=1) # Train the model with the Decision Tree Algorithm model = DecisionTreeClassifier() model.fit(X_train, y_train) # Make predictions with the model predicted_fruits = model.predict([[1, 0, 0.5, 1]]) if predicted_fruits == [1]: print('The fruit is likely to be an apple') elif predicted_fruits == [2]: print('The fruit is likely to be an orange') else: print('The fruit is likely to be a banana')"},{"prompt":"Develop a Python program that calculates the maximum and minimum of a given list. nums = [2, 3, 5, 10, 12]","completion":"def get_min_max(nums): min_value = min(nums) max_value = max(nums) return (min_value, max_value)"},{"prompt":"Write a Python program to calculate the multiplication of two matrices. Matrix 1: [[1,2], [3,4]] Matrix 2: [[5,6], [7,8]]","completion":"def matrix_multiply(matrix1, matrix2): row1 = len(matrix1) col1 = len(matrix1[0]) row2 = len(matrix2) col2 = len(matrix2[0]) # Check matrix dimensions if col1 != row2: return -1 # Create output matrix result = [[0 for i in range(col2)] for j in range(row1)] # Multiply the two matrices for i in range(row1): for j in range(col2): for k in range(row2): result[i][j] += matrix1[i][k] * matrix2[k][j] return result"},{"prompt":"Construct a function in Python to print the sum of two numbers.","completion":"def print_sum(a, b): \\"\\"\\"Print the sum of two numbers.\\"\\"\\" print(a + b)"},{"prompt":"Write a Python program to generate customer profiles from a large data set. The dataset contains 1000 customer records with fields such as age, gender, location, product purchase, etc.","completion":"import numpy as np import pandas as pd # Read the data set dataset = pd.read_csv('customer-data.csv') # Determine the unique features in the data features = np.unique(np.concatenate([dataset[column].value_counts().keys() for column in dataset.columns])) # Create the customer profile from the data customer_profile = dict() for f in features: # Find the frequency of feature across the dataset freq = np.sum(dataset == f) # Calculate the probability of the feature prob = freq / dataset.shape[0] # Store the results in customer_profile if prob >= 0.5: customer_profile[f] = 'High' elif prob < 0.5 and prob > 0.2: customer_profile[f] = 'Medium' else: customer_profile[f] = 'Low' print(customer_profile)"},{"prompt":"Write a Python program to extract all words from a sentence and print them. The quick brown fox","completion":"sentence = \\"The quick brown fox\\" words = sentence.split(\\" \\") for word in words: print(word) # Output # The # quick # brown # fox"},{"prompt":"Create an AI assistant in Python that can tell jokes. Not applicable","completion":"import random jokes = [ 'Why did the chicken cross the playground? To get to the other slide!', 'Why did the monkey fall out of the tree? Because it was dead!', 'Why did the dinosaur go to the dentist? Because he had a toothache!' ] def tell_joke(): joke = random.choice(jokes) print(joke) tell_joke()"},{"prompt":"Create a Python program that can turn a regular text phrase into a hex encoded form. Hello World","completion":"def text_to_hex(text): hex_encoded = \\"\\" for i in text: hex_encoded += ((hex(ord(i)))[2:]).zfill(2) return hex_encoded print(text_to_hex(\\"Hello World\\"))"},{"prompt":"Generate a Python dictionary from two arrays, such that the first array serves as keys and the second array serves as values. keys = ['name', 'age', 'gender'] values = ['John', 24, 'male']","completion":"my_dict = { 'name': 'John', 'age': 24, 'gender': 'male' }"},{"prompt":"Write a Python program to reduce the given array into a single element. arr = [1, 2, 3, 4]","completion":"def reduce_arr(arr): result = 0 for i in arr: result += i return result reduce_arr(arr)"},{"prompt":"Create a program in Python that takes an input string and an integer n, and generates all permutations of the string with length n. ABCD, 2","completion":"def permutateString(inputStr, n): if n == 0: return [] elif len(inputStr) == 1: return [inputStr] else: result = [] for i in range(len(inputStr)): firstChar = inputStr[i] remainingChars = inputStr[:i] + inputStr[i+1:] for permutation in permutateString(remainingChars, n-1): result.append([firstChar] + permutation) return result inputStr = \\"ABCD\\" n = 2 permutations = permutateString(inputStr, n) for permutation in permutations: print(''.join(permutation))"},{"prompt":"Edit the following Python program to count the occurrence of the word “apple” in a given sentence. sentence = I have an apple, and the apple is delicious.","completion":"sentence = \\"I have an apple, and the apple is delicious.\\" word = \\"apple\\" count = 0 for word in sentence.split(): if(word == \\"apple\\"): count = count + 1 print(\\"The no. of occurrences of the word 'apple' is:\\", count)"},{"prompt":"Design a web crawler that can crawl URLs from a particular website.","completion":"from html.parser import HTMLParser from urllib.request import urlopen from urllib import parse class LinkParser(HTMLParser): def handle_starttag(self, tag, attrs): if tag == 'a': for (key, value) in attrs: if key == 'href': # We are grabbing the new URL. We are also adding the # base URL to it. For example: # www.netinstructions.com is the base and # somepage.html is the new URL (a relative URL) # # We combine a relative URL with the base URL to create # an absolute URL like: # www.netinstructions.com/somepage.html newUrl = parse.urljoin(self.baseUrl, value) # And add it to our collection of links: self.links = self.links + [newUrl] # This is a new function that we are creating to get marked up # text (with tags like <p> and <a>) def handle_data(self, data): self.data = self.data + data def getLinks(self, url): self.links = [] self.baseUrl = url response = urlopen(url) htmlBytes = response.read() # Note that feed() handles Strings well, but not bytes # (A change from Python 2.x to Python 3.x) htmlString = htmlBytes.decode(\\"utf-8\\") self.feed(htmlString) return htmlString, self.links # Make a new crawler crawler = LinkParser() # And get all the links from the site data, links = crawler.getLinks(\\"http://www.website.com\\")"},{"prompt":"Create a Spark program in Python that generates a new dataframe from an existing dataframe by removing duplicates Not applicable","completion":"from pyspark.sql import functions as F def removeDuplicates(df): df = df.dropDuplicates() df = df.orderBy(F.desc(\\"date\\")) return df"},{"prompt":"Write a Python code to classify a movie review as positive or negative using Natural Language Processing. TEXT = This movie was an amazing experience. I would recommend it to everyone.","completion":"import nltk nltk.download('stopwords') from nltk.corpus import stopwords from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB # Clean the data. stop_words = set(stopwords.words('english')) word_tokens = nltk.word_tokenize(TEXT) filtered_sentence = [w for w in word_tokens if not w in stop_words] sentence = \\" \\".join(filtered_sentence) # Create the tf-idf vector vectorizer = TfidfVectorizer() vectorizer.fit([sentence]) X = vectorizer.transform([sentence]) # Create and train the model nb = MultinomialNB() nb.fit(X, [1]) # Predict the sentiment of the sentence prob = nb.predict_proba(X)[0] if prob[0] > 0.5: sentiment = \\"Negative\\" else: sentiment = \\"Positive\\" print(f\\"The sentiment of the sentence is {sentiment}.\\")"},{"prompt":"Generate a Python script to print all the prime numbers in a given range. Range = 2 to 20","completion":"for n in range(2, 21): if n > 1: for i in range(2, n//2 + 2): if (n % i) == 0: break else: print(n)"},{"prompt":"Write a Python script to display the result of a mathematical expression. (3 + 4) * 5","completion":"# code to display the result of a mathematical expression expr = '(3 + 4) * 5' # Evaluate the expression result = eval(expr) # Print the result print(\\"Result of the expression: \\" + str(result))"},{"prompt":"Find the index of a given element from a list in Python [1,2,3,4]","completion":"def index_of(arr, ele): for i in range(len(arr)): if arr[i] == ele: return i return -1"},{"prompt":"Edit a Python program to output the maximum value def find_max(lst): max = lst[0] for i in lst: if i > max: max =","completion":"def find_max(lst): max = lst[0] for i in lst: if i > max: max = i return max"},{"prompt":"Create a function in Python which takes in two numbers and calculates the sum","completion":"def sumTwoNumbers(a, b): return a + b"},{"prompt":"Create a class that describes a robot in Python.","completion":"class Robot: \\"\\"\\"This class describes a robot\\"\\"\\" def __init__(self, name, characteristics): self.name = name self.characteristics = characteristics def move(self): return \\"Robot is moving.\\" def speak(self): return \\"Robot is speaking.\\""},{"prompt":"Write a function in Python to remove all occurrences of a specific character from a string. string = computer science remove_char = c","completion":"def remove_char_from_string(string, remove_char): new_string = \\"\\" for char in string: if char != remove_char: new_string += char return new_string if __name__ == '__main__': string = \\"computer science\\" remove_char = \\"c\\" print(remove_char_from_string(string, remove_char))"},{"prompt":"Create a machine learning program in Python for detecting fraudulent credit card transactions, given a dataset of transactions. The dataset contains 200 transactions with the following fields: Credit card number Time of transaction Merchant ID Amount Locatio","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler, MinMaxScaler from sklearn.svm import SVC from sklearn.metrics import accuracy_score, confusion_matrix # Read the dataset data = pd.read_csv('data.csv') # Split the dataset X = data.drop(['label'], axis=1) y = data['label'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0) # Feature scaling sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test) # Train the model model = SVC(kernel='linear', probability=True) model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Evaluate the model print(f'Accuracy: {accuracy_score(y_test, y_pred)}') print(f'Confusion Matrix:n {confusion_matrix(y_test, y_pred)}')"},{"prompt":"Create a numerical model of a 3D object in Python.","completion":"import numpy as np class Object3D: def __init__(self): # define the object points self.vertices = np.array([(0., 0., 0.), (1., 0., 0.), (1., 1., 0.), (0., 1., 0.), (0., 0., 1.), (1., 0., 1.), (1., 1., 1.), (0., 1., 1.)]) # define the faces (defined by indices of the points) self.faces = np.array([(0, 1, 2, 3), (4, 5, 6, 7), (0, 1, 5, 4), (2, 3, 7, 6)]) # define the object colors self.colors = np.array([(1, 0, 0), (0, 1, 0), (0, 0, 1), (1, 1, 0), (1, 0, 1), (0, 1, 1)]) # define the object edges self.edges = np.array([(0, 1), (1, 2), (2, 3), (3, 0), (4, 5), (5, 6), (6, 7), (7, 4), (0, 4), (1, 5), (2, 6), (3, 7)])"},{"prompt":"Create a Python program that uses an SQL database to store user preferences. Not applicable","completion":"import sqlite3 conn = sqlite3.connect('user_preferences.db') c = conn.cursor() # Create table c.execute('''CREATE TABLE user_preferences ( user_id INTEGER PRIMARY KEY, preference_name TEXT NOT NULL, preference_value TEXT )''') # Save (commit) the changes conn.commit() # Close the connection conn.close() # Add user preferences to the database def addUserPreferences(user_id, preference_name, preference_value): conn = sqlite3.connect('user_preferences.db') c = conn.cursor() c.execute(\\"INSERT INTO user_preferences(user_id, preference_name, preference_value) VALUES (?,?,?)\\", (user_id, preference_name, preference_value)) conn.commit() conn.close() # Get user preferences from the database def getUserPreferences(user_id): conn = sqlite3.connect('user_preferences.db') c = conn.cursor() c.execute(\\"SELECT * FROM user_preferences WHERE user_id=?\\", (user_id)) user_preferences = c.fetchall() conn.commit() conn.close() return user_preferences"},{"prompt":"Develop a web service using Python Flask to handle POST requests. Not applicable","completion":"from flask import Flask, request app = Flask(__name__) @app.route('/api', methods=['POST']) def api(): if (request.method == 'POST'): # All code for handling POST requests return 'Handling POST requests' else: return 'Method Not Allowed' if __name__=='__main__': app.run(debug=True)"},{"prompt":"Write a Python program to determine whether or not a given string is a palindrome. racecar","completion":"def isPalindrome(s): # remove whitespaces s = ''.join(s.split()) # reverse string rev = s[::-1] # compare if rev == s: return True return False if isPalindrome(\\"racecar\\"): print('String is a palindrome') else: print('String is not a palindrome')"},{"prompt":"Write a Python program to combine two nested dictionaries into one. dict1 = {'x': 10, 'y': 20} dict2 = {'a': 5, 'b': 10}","completion":"combined_dict = {**dict1, **dict2}"},{"prompt":"Write a command line utility script in Python that takes a list of contacts in CSV format and stores it in a database. name, email Tom, tom@example.com Alice, alice@example.com Bob, bob@example.com","completion":"import csv import sqlite3 def main(csv_file): conn = sqlite3.connect('contacts.db') c = conn.cursor() c.execute(\\"CREATE TABLE contacts (name TEXT, email TEXT)\\") with open(csv_file, 'r') as f: reader = csv.DictReader(f) for row in reader: c.execute(\\"INSERT INTO contacts VALUES (:name, :email)\\", row) conn.commit() c.close() if __name__ == '__main__': main('input.csv')"},{"prompt":"Create a Python script for implementing a linear search in an array of integers.","completion":"def linear_search(arr, key): n = len(arr) for i in range(0, n): if arr[i] == key: return i return -1"},{"prompt":"Create an AIdriven object detection application using TensorFlow and Python. Not applicable","completion":"#imports import os import cv2 import numpy as np import tensorflow as tf import matplotlib.pyplot as plt #read the image image_path = \\"image.jpg\\" img = cv2.imread(image_path) #Load the model model = tf.saved_model.load(\\"model\\") #Process the image img_dim = (224, 224) img = cv2.resize(img, img_dim) #Predict and output the result prediction = model.predict(np.expand_dims(img, 0)) classes = [\\"cat\\", \\"dog\\", \\"bird\\"] print(\\"prediction = {}\\".format(classes[prediction.argmax()])"},{"prompt":"Create a function in Python that takes two strings as arguments and returns the first string repeated as many times as specified by the second argument. Abstrac","completion":"def repeat_string (string, repeat): \\"\\"\\"Return the supplied string repeated as many times as specified.\\"\\"\\" repeated_string = string * repeat return repeated_string print(repeat_string(\\"Abstract\\", 3)) # Output: AbstractAbstractAbstract"},{"prompt":"Create a Python function that takes a string as input and returns a dictionary that counts the frequency of every character. hello","completion":"def char_freq(s): freq = dict() for i in s: if i in freq: freq[i] += 1 else: freq[i] = 1 return freq string = 'hello' result = char_freq(string) print(result) # {'h': 1, 'e': 1, 'l': 2, 'o': 1}"},{"prompt":"Create a Machine Learning model in Python to predict wine quality from attributes such as pH, Chlorides, Free sulfur dioxide, Alcohol etc. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.ensemble import RandomForestRegressor # Read in the data df = pd.read_csv('winequality.csv') # Pick features and target X = df.drop('quality', axis=1).values y = df['quality'].values # Split into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Scale the data scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Create and train our model model = RandomForestRegressor() model.fit(X_train, y_train) # Make predictions predictions = model.predict(X_test) # Measure accuracy from sklearn.metrics import mean_squared_error error = mean_squared_error(y_test, predictions) print('Mean squared error: ', error)"},{"prompt":"Create a script to list the content of a given directory in Linux. Path: /usr","completion":"#!/usr/bin/env python import os path = \\"/usr\\" for root, dirs, files in os.walk(path): for file in files: print(os.path.join(root, file))"},{"prompt":"Define a Python list containing the numbers from 0 to 10.","completion":"numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"},{"prompt":"Write a python code to merge two sorted linked lists into one.","completion":"class Node: def __init__(self, value): self.data = value self.next = None def merge_sorted_lists(head_a, head_b): # Create a new linked list. new_list = Node(None) tail = new_list current_a = head_a current_b = head_b while current_a is not None or current_b is not None: if current_a is None: tail.next = current_b current_b = current_b.next elif current_b is None: tail.next = current_a current_a = current_a.next elif current_a.data <= current_b.data: tail.next = current_a current_a = current_a.next else: tail.next = current_b current_b = current_b.next tail = tail.next return new_list.next"},{"prompt":"Modify the above Python Flask application to accept form input and create a new task. Not applicable","completion":"from flask import Flask, request, redirect, render_template from flask_sqlalchemy import SQLAlchemy app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class Task(db.Model): id = db.Column(db.Integer, primary_key=True) description = db.Column(db.String(120), unique=True) db.create_all() @app.route('/tasks', methods=['GET']) def get_tasks(): tasks = Task.query.all() return {'tasks': [task.description for task in tasks]} @app.route('/tasks/int:id', methods=['PUT']) def update_task(id): task = Task.query.get(id) task.description = request.json['description'] db.session.commit() return {'message': 'Task updated'} @app.route('/tasks/int:id', methods=['DELETE']) def delete_task(id): Task.query.filter_by(id=id).delete() db.session.commit() return {'message': 'Task deleted'} @app.route('/', methods=['GET', 'POST']) def create_task(): if request.method == 'POST': task = Task(description=request.form['description']) db.session.add(task) db.session.commit() return redirect('/') return render_template('index.html') if name == 'main': app.run(debug=True)"},{"prompt":"Develop a Python program which will take a string and print out the total number of characters in it.","completion":"def num_chars(string): char_count = 0 for i in string: char_count += 1 print(\\"The number of characters in the string is\\", char_count)"},{"prompt":"Given a list of strings, write a Python program to search for a string and return its index. myList = [a, b, c, d, e]","completion":"def find_string(search_string, myList): for index, s in enumerate(myList): if s == search_string: return index"},{"prompt":"Convert the following JSON string to a valid Python dictionary. '{name: John, age: 32, city: New York}'","completion":"data = json.loads('{\\"name\\": \\"John\\", \\"age\\": 32, \\"city\\": \\"New York\\"}')"},{"prompt":"Create a Python script to remove redundant characters in a given string. text = teeestttingggg","completion":"def remove_redundant(text): \\"\\"\\"Remove redundant characters from a given string\\"\\"\\" result = \\"\\" # Iterate over the string for c in text: # Add the character to the result if it is not already present if c not in result: result+=c return result # Output print(remove_redundant(text))"},{"prompt":"Create a function in Python that takes a list of strings and returns only the strings with length of 5. array = [Hello, Hi, Hola, Bye, Goodbye]","completion":"def five_length_strings(arr): return [string for string in arr if len(string) == 5] output = five_length_strings([\\"Hello\\", \\"Hi\\", \\"Hola\\", \\"Bye\\", \\"Goodbye\\"]) print(output) # Output: ['Hello', 'Hola', 'Bye']"},{"prompt":"Create a Python function that takes two arguments: a list of numbers and an integer k. The function should return a list of all pairs of numbers in the given list whose sum is equal to k. list = [1, 2, 3, 4, 5], k = 5","completion":"def get_pairs(list, k): pairs = [] for i in range(len(list)): for j in range(i+1, len(list)): if list[i] + list[j] == k: pairs.append( [list[i], list[j]] ) return pairs print(get_pairs([1, 2, 3, 4, 5], 5)) # Output: [[1, 4], [2, 3]]"},{"prompt":"Create a module for generating random strings in Python. Not applicable","completion":"import random import string def generate_random_string(length): letters = string.ascii_letters return ''.join(random.choice(letters) for i in range(length))"},{"prompt":"Create a function to pad a given string on both sides with the given padding character until the required length is reached. text = 'Python' padding = '*' length = 10","completion":"def pad_str(text, padding, length): \\"\\"\\" Pad the given string on both sides with the given padding character until the required length is reached. \\"\\"\\" # Calculate the number of padding characters to add num_padding = length - len(text) if num_padding < 0: return text left_padding = num_padding // 2 right_padding = num_padding - left_padding # Pad the string on both sides padded_str = padding * left_padding + text + padding * right_padding return padded_str if __name__ == '__main__': text = 'Python' padding = '*' length = 10 result = pad_str(text, padding, length) print(result) # **Python**"},{"prompt":"Using the Python language, build a function which takes a list of integers as an argument and returns the sum of those numbers.","completion":"def sum_list(numbers): summed_value = 0 for num in numbers: summed_value += num return summed_value"},{"prompt":"Construct a function in Python to add two numbers passed as arguments. 3,7","completion":"def addNumbers(a, b): return a + b x = 3 y = 7 result = addNumbers(x, y) print(result)"},{"prompt":"Create a Python program that will take a positive number from the user and print its prime factors. 9","completion":"# Get a number from user and store it in a variable num = int(input(\\"Enter a positive number: \\")) # Initialise a list to store prime factors factors = [] # We store the number in the variable i and update # the number whenever a prime factor is found i = num # If the number is odd, add 2 to the list of # prime factors if num % 2 == 1: factors.append(2) # 2 is the only even prime number for i in range(3, int(num**0.5) + 1, 2): # If the number is divisible by i, it is # a prime factor while num % i == 0: factors.append(i) # Update number after finding prime factor num //= i # If the input number was greater than 2 if num > 2: factors.append(num) # Print the prime factors print(\\"The prime factors of\\", num, \\"are:\\") for f in factors: print(f)"},{"prompt":"Develop a Python script to retrieve all distinct characters of a given string, without taking the order into account. Hello world","completion":"def remove_duplicate_chars(string): # Use a set to store values, as it only stores distinct values unique_chars = set() for char in string: # Add the character to the set if it does not already exist if char not in unique_chars: unique_chars.add(char) return unique_chars string = \\"Hello world\\" print(remove_duplicate_chars(string))"},{"prompt":"Write a web scraper in Python to extract information from a table on a website. Website URL: https://www.example.com/ Table: List of Cat Breed","completion":"import requests import lxml.html as lh url = 'https://www.example.com/' #Create a handle, page, to handle the contents of the website page = requests.get(url) #Store the contents of the website under doc doc = lh.fromstring(page.content) #Parse data that are stored between <tr>..</tr> of HTML tr_elements = doc.xpath('//tr') #Create empty list col=[] i=0 #For each row, store each first element (header) and an empty list for t in tr_elements[0]: i+=1 name=t.text_content() print('%d:\\"%s\\"'%(i,name)) col.append((name,[])) #Since out first row is the header, data is stored on the second row onwards for j in range(1,len(tr_elements)): #T is our j'th row T=tr_elements[j] #If row is not of size 10, the //tr data is not from our table if len(T)!=3: break #i is the index of our column i=0 #Iterate through each element of the row for t in T.iterchildren(): data=t.text_content() #Check if row is empty if i>0: #Convert any numerical value to integers try: data=int(data) except: pass #Append the data to the empty list of the i'th column col[i][1].append(data) #Increment i for the next column i+=1 # Create a list of Cat Breeds cat_breeds = col[1][1]"},{"prompt":"Write a generator function in Python to generate unique integer numbers in a given range. min value = 10, max value = 20","completion":"def unique_integers_generator(start, end): i = start used = set() while i <= end: if i not in used: used.add(i) yield i i += 1 for i in unique_integers_generator(10, 20): print(i)"},{"prompt":"Create a program to find the smallest number in a given list using a for loop in Python. Example list: [12, 4, 16, 15]","completion":"def find_smallest_number(lst): smallest = lst[0] for number in lst: if number < smallest: smallest = number return smallest print(find_smallest_number([12, 4, 16, 15])) # Output: 4"},{"prompt":"Create a Python script that accesses a website's HTML.","completion":"# Import the requests library import requests # Get the website's content r = requests.get('https://www.example.com/') # Get the webpage's HTML html = r.text # Print the HTML print(html)"},{"prompt":"Write a function in Python to compute the mean of a list of numbers. [1, 3, 4, 8, 5]","completion":"def compute_mean(nums): sum = 0 for num in nums: sum += num return sum/len(nums) a = [1, 3, 4, 8, 5] print(\\"Mean =\\", compute_mean(a)) # Output: Mean = 4.4"},{"prompt":"Use the following data and develop a random forest classifier in Python to predict the species type. [5, 2, 4, 1, 3] irissetosa [7, 3, 5, 1, 2] irisversicolor [9, 5, 4, 2, 3] irisvirginic","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier data = [[5,2,4,1,3], [7,3,5,1,2], [9,5,4,2,3]] labels = ['iris-setosa', 'iris-versicolor', 'iris-virginica'] df = pd.DataFrame(data, columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'class']) X = df.iloc[:, :4] y = df['class'] X_train, X_test, y_train, y_test = train_test_split( X, y, train_size=0.8, test_size=0.2, random_state=0 ) clf = RandomForestClassifier(n_estimators=100, random_state=0, max_depth=2) clf.fit(X_train, y_train) print(\\"Accuracy of Random Forest classifier on training set:{:.2f}\\".format(clf.score(X_test, y_test)))"},{"prompt":"Build a Python script to terminate all running processes.","completion":"import psutil # terminate all running processes for proc in psutil.process_iter(): proc.terminate()"},{"prompt":"mplement an algorithm in Python which can sort an array of numbers in ascending order.","completion":"def insertion_sort(arr): #Iterationg through the array for i in range(1, len(arr)): key = arr[i] j = i-1 while j >= 0 and arr[j] > key: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr"},{"prompt":"Write a Python program that takes a string and a number as input, and returns the string repeated the given number of times. String: xyz Number: 3","completion":"def repeatString(string, num): return string * num result = repeatString(\\"xyz\\", 3) print(result)"},{"prompt":"Write python program to find the maximum of 3 numbers and display the result","completion":"def max_3(n1, n2, n3): max = n1 if n2 > max: max = n2 if n3 > max: max = n3 return max # Example print(max_3(1, 2, 3)) # Output: 3"},{"prompt":"Create a class called sid with a state parameter for PrefixSID. The class should be a container and should be autogenerated by the PythonClass plugin for PYANG from YANG module openconfignetworkinstance. The class should be based on the path /networkinstances/networkinstance/protocols/protocol/isis/levels/level/linkstatedatabase/lsp/tlvs/tlv/extendedipv4reachability/prefixes/prefix/subTLVs/subTLVs/prefixsid/sid. Each member element of the container should be represented as a class variable with a specific YANG type. The Prefix SegmentID list should be an IGPPrefix Segment attached to an IGP prefix. An IGPPrefix Segment should be global (unless explicitly advertised otherwise) within the SR/IGP domain.","completion":"# -*- coding: utf-8 -*- from operator import attrgetter from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType from pyangbind.lib.yangtypes import RestrictedClassType from pyangbind.lib.yangtypes import TypedListType from pyangbind.lib.yangtypes import YANGBool from pyangbind.lib.yangtypes import YANGListType from pyangbind.lib.yangtypes import YANGDynClass from pyangbind.lib.yangtypes import ReferenceType from pyangbind.lib.base import PybindBase from collections import OrderedDict from decimal import Decimal from bitarray import bitarray import six # PY3 support of some PY2 keywords (needs improved) if six.PY3: import builtins as __builtin__ long = int elif six.PY2: import __builtin__ from . import state class sid(PybindBase): \\"\\"\\" This class was auto-generated by the PythonClass plugin for PYANG from YANG module openconfig-network-instance - based on the path /network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subTLVs/subTLVs/prefix-sid/sid. Each member element of the container is represented as a class variable - with a specific YANG type. YANG Description: Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised otherwise) within the SR/IGP domain. \\"\\"\\" __slots__ = (\\"_path_helper\\", \\"_extmethods\\", \\"__state\\") _yang_name = \\"sid\\" _pybind_generated_by = \\"container\\" def __init__(self, *args, **kwargs): self._path_helper = False self._extmethods = False self.__state = YANGDynClass( base=state.state, is_container=\\"container\\", yang_name=\\"state\\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace=\\"http://openconfig.net/yang/network-instance\\", defining_module=\\"openconfig-network-instance\\", yang_type=\\"container\\", is_config=False, ) load = kwargs.pop(\\"load\\", None) if args: if len(args) > 1: raise TypeError(\\"cannot create a YANG container with >1 argument\\") all_attr = True for e in self._pyangbind_elements: if not hasattr(args[0], e): all_attr = False break if not all_attr: raise ValueError(\\"Supplied object did not have the correct attributes\\") for e in self._pyangbind_elements: nobj = getattr(args[0], e) if nobj._changed() is False: continue setmethod = getattr(self, \\"_set_%s\\" % e) if load is None: setmethod(getattr(args[0], e)) else: setmethod(getattr(args[0], e), load=load) def _path(self): if hasattr(self, \\"_parent\\"): return self._parent._path() + [self._yang_name] else: return [ \\"network-instances\\", \\"network-instance\\", \\"protocols\\", \\"protocol\\", \\"isis\\", \\"levels\\", \\"level\\", \\"link-state-database\\", \\"lsp\\", \\"tlvs\\", \\"tlv\\", \\"extended-ipv4-reachability\\", \\"prefixes\\", \\"prefix\\", \\"subTLVs\\", \\"subTLVs\\", \\"prefix-sid\\", \\"sid\\", ] def _get_state(self): \\"\\"\\" Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container) YANG Description: State parameters for Prefix-SID. \\"\\"\\" return self.__state def _set_state(self, v, load=False): \\"\\"\\" Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container) If this variable is read-only (config: false) in the source YANG file, then _set_state is considered as a private method. Backends looking to populate this variable should do so via calling thisObj._set_state() directly. YANG Description: State parameters for Prefix-SID. \\"\\"\\" if hasattr(v, \\"_utype\\"): v = v._utype(v) try: t = YANGDynClass( v, base=state.state, is_container=\\"container\\", yang_name=\\"state\\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace=\\"http://openconfig.net/yang/network-instance\\", defining_module=\\"openconfig-network-instance\\", yang_type=\\"container\\", is_config=False, ) except (TypeError, ValueError): raise ValueError( { \\"error-string\\": \\"\\"\\"state must be of a type compatible with container\\"\\"\\", \\"defined-type\\": \\"container\\", \\"generated-type\\": \\"\\"\\"YANGDynClass(base=state.state, is_container='container', yang_name=\\"state\\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)\\"\\"\\", } ) self.__state = t if hasattr(self, \\"_set\\"): self._set() def _unset_state(self): self.__state = YANGDynClass( base=state.state, is_container=\\"container\\", yang_name=\\"state\\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace=\\"http://openconfig.net/yang/network-instance\\", defining_module=\\"openconfig-network-instance\\", yang_type=\\"container\\", is_config=False, ) state = __builtin__.property(_get_state) _pyangbind_elements = OrderedDict([(\\"state\\", state)]) from . import state class sid(PybindBase): \\"\\"\\" This class was auto-generated by the PythonClass plugin for PYANG from YANG module openconfig-network-instance-l2 - based on the path /network-instances/network-instance/protocols/protocol/isis/levels/level/link-state-database/lsp/tlvs/tlv/extended-ipv4-reachability/prefixes/prefix/subTLVs/subTLVs/prefix-sid/sid. Each member element of the container is represented as a class variable - with a specific YANG type. YANG Description: Prefix Segment-ID list. IGP-Prefix Segment is an IGP segment attached to an IGP prefix. An IGP-Prefix Segment is global (unless explicitly advertised otherwise) within the SR/IGP domain. \\"\\"\\" __slots__ = (\\"_path_helper\\", \\"_extmethods\\", \\"__state\\") _yang_name = \\"sid\\" _pybind_generated_by = \\"container\\" def __init__(self, *args, **kwargs): self._path_helper = False self._extmethods = False self.__state = YANGDynClass( base=state.state, is_container=\\"container\\", yang_name=\\"state\\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace=\\"http://openconfig.net/yang/network-instance\\", defining_module=\\"openconfig-network-instance\\", yang_type=\\"container\\", is_config=False, ) load = kwargs.pop(\\"load\\", None) if args: if len(args) > 1: raise TypeError(\\"cannot create a YANG container with >1 argument\\") all_attr = True for e in self._pyangbind_elements: if not hasattr(args[0], e): all_attr = False break if not all_attr: raise ValueError(\\"Supplied object did not have the correct attributes\\") for e in self._pyangbind_elements: nobj = getattr(args[0], e) if nobj._changed() is False: continue setmethod = getattr(self, \\"_set_%s\\" % e) if load is None: setmethod(getattr(args[0], e)) else: setmethod(getattr(args[0], e), load=load) def _path(self): if hasattr(self, \\"_parent\\"): return self._parent._path() + [self._yang_name] else: return [ \\"network-instances\\", \\"network-instance\\", \\"protocols\\", \\"protocol\\", \\"isis\\", \\"levels\\", \\"level\\", \\"link-state-database\\", \\"lsp\\", \\"tlvs\\", \\"tlv\\", \\"extended-ipv4-reachability\\", \\"prefixes\\", \\"prefix\\", \\"subTLVs\\", \\"subTLVs\\", \\"prefix-sid\\", \\"sid\\", ] def _get_state(self): \\"\\"\\" Getter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container) YANG Description: State parameters for Prefix-SID. \\"\\"\\" return self.__state def _set_state(self, v, load=False): \\"\\"\\" Setter method for state, mapped from YANG variable /network_instances/network_instance/protocols/protocol/isis/levels/level/link_state_database/lsp/tlvs/tlv/extended_ipv4_reachability/prefixes/prefix/subTLVs/subTLVs/prefix_sid/sid/state (container) If this variable is read-only (config: false) in the source YANG file, then _set_state is considered as a private method. Backends looking to populate this variable should do so via calling thisObj._set_state() directly. YANG Description: State parameters for Prefix-SID. \\"\\"\\" if hasattr(v, \\"_utype\\"): v = v._utype(v) try: t = YANGDynClass( v, base=state.state, is_container=\\"container\\", yang_name=\\"state\\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace=\\"http://openconfig.net/yang/network-instance\\", defining_module=\\"openconfig-network-instance\\", yang_type=\\"container\\", is_config=False, ) except (TypeError, ValueError): raise ValueError( { \\"error-string\\": \\"\\"\\"state must be of a type compatible with container\\"\\"\\", \\"defined-type\\": \\"container\\", \\"generated-type\\": \\"\\"\\"YANGDynClass(base=state.state, is_container='container', yang_name=\\"state\\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace='http://openconfig.net/yang/network-instance', defining_module='openconfig-network-instance', yang_type='container', is_config=False)\\"\\"\\", } ) self.__state = t if hasattr(self, \\"_set\\"): self._set() def _unset_state(self): self.__state = YANGDynClass( base=state.state, is_container=\\"container\\", yang_name=\\"state\\", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions=None, namespace=\\"http://openconfig.net/yang/network-instance\\", defining_module=\\"openconfig-network-instance\\", yang_type=\\"container\\", is_config=False, ) state = __builtin__.property(_get_state) _pyangbind_elements = OrderedDict([(\\"state\\", state)])"},{"prompt":"Develop an algorithm in Python to optimize a given set of integers. nums = [2, 4, 6, 10, 12]","completion":"def optimize_ints(nums): left = 0 right = len(nums) - 1 while left < right: min_num = min(nums[left], nums[right]) nums[right] = nums[left] = min_num + nums[left] - nums[right] left += 1 right -= 1 return nums nums = [2, 4, 6, 10, 12] print(optimize_ints(nums))"},{"prompt":"Create a utility in Python to generate a PDF of a webpage. The utility should accept a URL as input and generate a PDF of the webpage in the same directory. https://www.example.com","completion":"import pdfkit def generate_pdf(url): filename = url.rsplit('/', 1)[-1] + '.pdf' pdfkit.from_url(url, filename) if __name__ == '__main__': url = input('Enter a URL: ') generate_pdf(url)"},{"prompt":"Develop a recursive algorithm in Python for generating permutations of a given set of elements. Not applicable","completion":"def permutations(s): if len(s) == 0: return [] if len(s) == 1: return [s] l = [] # empty list that will store current permutation # Iterate the input(s) and calculate the permutation for i in range(len(s)): m = s[i] rem = s[:i] + s[i+1:] for p in permutations(rem): l.append([m] + p) return l"},{"prompt":"Create a method to compute the factorial of an input integer using python","completion":"def factorial(n): #base case if n == 0: return 1 # recursive case return n * factorial(n-1) # Driver code num = 7 print(\\"The factorial of\\", num, \\"is\\",factorial(num))"},{"prompt":"Generate a Python script to print the numbers from 1 to 10 in reverse order. Not applicable","completion":"for i in range(10,0,-1): print(i)"},{"prompt":"Write a Python function to replace all occurrences of a given substring with another substring. Hello World, Hello","completion":"def replace_substring(string, old_substring, new_substring): return string.replace(old_substring, new_substring) result = replace_substring(\\"Hello World, Hello\\", \\"Hello\\", \\"Hi\\") print(result)"},{"prompt":"Generate a Python code snippet to convert a string to a list, where each word is an item in the list. String: This is a test string.","completion":"string = \\"This is a test string\\" list = string.split(\\" \\") print(list) # Output: ['This', 'is', 'a', 'test', 'string']"},{"prompt":"Produce a python program for the following task: Given a 2D matrix, find all the paths from the top left corner to the bottom right corner.","completion":"def find_paths(grid): # base case: if the grid is empty if not grid or not grid[0]: return [] # number of rows rows = len(grid) # number of columns cols = len(grid[0]) # initialize the result list paths = [] # function to recursively generate all the paths def generate_paths(row, col, path): # if the row and col indices are out of bounds if row < 0 or col < 0 or row >= rows or col >= cols: return # if the current position is a wall if grid[row][col] == '#': return # add the current position to the path path.append(grid[row][col]) # check if the current position is the bottom right corner if row == rows-1 and col == cols-1: paths.append(path[:]) return # recursively generate paths from the four neighbors generate_paths(row+1, col, path) generate_paths(row-1, col, path) generate_paths(row, col+1, path) generate_paths(row, col-1, path) # remove the current position from the path path.pop() # start generating paths from the top left corner generate_paths(0, 0, []) return paths"},{"prompt":"Create a text tokenizer using regular expression in Python.","completion":"import re def tokenizeText(text): tokens = re.findall(r'w+', text) return tokens"},{"prompt":"Write a python program that takes a dictionary as input and returns a list of its values. data = { key1: value1, key2: value2, key3: value3 }","completion":"def get_values(data): \\"\\"\\" Gets the values from a dictionary. Args: data (dict): The dictionary from which to get the values Returns: values (list): A list of the values from the dictionary \\"\\"\\" values = [] for value in data.values(): values.append(value) return values if __name__ == \\"__main__\\": data = { \\"key1\\": \\"value1\\", \\"key2\\": \\"value2\\", \\"key3\\": \\"value3\\" } print(get_values(data))"},{"prompt":"Create a Python function that takes in a list of values and a target value, and finds the closest value in the list to the target value. list_values = [5, 2, 2, 4, 7, 9, 11] target_value = 5","completion":"def find_closest_value(list_values, target_value): closest_value = None min_diff = float('inf') for value in list_values: diff = abs(target_value - value) if diff < min_diff: min_diff = diff closest_value = value return closest_value print(find_closest_value(list_values, target_value)) # Output: 4"},{"prompt":"Compose a Python program that adds two complex numbers. 3 + 5i and 4 + 7","completion":"#Define a method to add two complex numbers def add_complex_numbers(c1, c2): real_sum = c1.real + c2.real img_sum = c1.imag + c2.imag return complex(real_sum, img_sum) #Take user input c1_real = int(input('Enter the real part of first complex number: ')) c1_img = int(input('Enter the imaginary part of first complex number: ')) c2_real = int(input('Enter the real part of second complex number: ')) c2_img = int(input('Enter the imaginary part of second complex number: ')) #Define complex numbers c1 = complex(c1_real, c1_img) c2 = complex(c2_real, c2_img) #Call the method to add complex numbers sum_of_complex_numbers = add_complex_numbers(c1, c2) #Print the sum print('Sum of complex numbers: ', sum_of_complex_numbers)"},{"prompt":"Modify this given Python code to handle inputs of any size def sum_digits(num): total = 0 while num > 0: total += num % 10 num //= 10 return total","completion":"def sum_digits(num): total = 0 while num != 0: total += num % 10 num //= 10 return total"},{"prompt":"To use this code, create an implementation of the XMLRPC API and pass it to the start function along with an IP address, port number, and a boolean indicating whether to daemonize the server. The server will listen on the specified IP address and port number, and will serve requests forever. The implementation should define methods for the XMLRPC API, and should raise exceptions of the BackendError or Vdi_does_not_exist classes when appropriate. The code includes helper functions for constructing SMAPI return types, typechecking arguments, and marshalling results.","completion":"#!/usr/bin/env python import os, sys, time, socket, traceback log_f = os.fdopen(os.dup(sys.stdout.fileno()), \\"aw\\") pid = None def reopenlog(log_file): global log_f if log_f: log_f.close() if log_file: log_f = open(log_file, \\"aw\\") else: log_f = os.fdopen(os.dup(sys.stdout.fileno()), \\"aw\\") def log(txt): global log_f, pid if not pid: pid = os.getpid() t = time.strftime(\\"%Y%m%dT%H:%M:%SZ\\", time.gmtime()) print >>log_f, \\"%s [%d] %s\\" % (t, pid, txt) log_f.flush() # Functions to construct SMAPI return types # unit = [ \\"Success\\", \\"Unit\\" ] # Throw this to return an SR_BACKEND_FAILURE to the caller class BackendError(Exception): def __init__(self, code, params): self.code = code self.params = params def __str__(self): return \\"BackendError(%s, %s)\\" % (self.code, \\", \\".join(self.params)) class Vdi_does_not_exist(Exception): def __init__(self, vdi): self.vdi = vdi def __str__(self): return \\"Vdi_does_not_exist(%s)\\" % self.vdi def vdi(vdi_info): # return ['Success', ['Vdi', {'vdi': location, 'virtual_size': str(virtual_size) }]] return ['Success', ['Vdi', vdi_info]] def vdis(vis): return ['Success', ['Vdis', vis]] def params(params): return ['Success', ['Params', params ]] def value(result): return { \\"Status\\": \\"Success\\", \\"Value\\": result } def backend_error(code, params): return [ \\"Failure\\", [ \\"Backend_error\\", code, params ] ] def internal_error(txt): return [ \\"Failure\\", \\"Internal_error\\", txt ] def vdi_does_not_exist(): return [ \\"Failure\\", \\"Vdi_does_not_exist\\" ] # Type-checking helper functions vdi_info_types = { \\"vdi\\": type(\\"\\"), \\"name_label\\": type(\\"\\"), \\"name_description\\": type(\\"\\"), \\"ty\\": type(\\"\\"), \\"metadata_of_pool\\": type(\\"\\"), \\"is_a_snapshot\\": type(True), \\"snapshot_time\\": type(\\"\\"), \\"snapshot_of\\": type(\\"\\"), \\"read_only\\": type(True), \\"cbt_enabled\\": type(True), \\"virtual_size\\": type(\\"\\"), \\"physical_utilisation\\": type(\\"\\") } def make_vdi_info(v): global vdi_info_types for k in vdi_info_types.keys(): t = vdi_info_types[k] if t == type(\\"\\"): v[k] = str(v[k]) elif t == type(True): v[k] = str(v[k]).lower() == \\"true\\" else: raise (BackendError(\\"make_vdi_info unknown type\\", [ str(t) ])) return v def vdi_info(v): global vdi_info_types for k in vdi_info_types.keys(): if k not in v: raise (BackendError(\\"vdi_info missing key\\", [ k, repr(v) ])) t = vdi_info_types[k] if type(v[k]) <> t: raise (BackendError(\\"vdi_info key has wrong type\\", [ k, str(t), str(type(v[k])) ])) return v def expect_none(x): if x <> None: raise (BackendError(\\"type error\\", [ \\"None\\", repr(x) ])) def expect_long(x): if type(x) <> type(0L): raise (BackendError(\\"type error\\", [ \\"long int\\", repr(x) ])) def expect_string(x): if type(x) <> type(\\"\\"): raise (BackendError(\\"type error\\", [ \\"string\\", repr(x) ])) # Well-known feature flags understood by xapi feature_sr_probe = \\"SR_PROBE\\" feature_sr_update = \\"SR_UPDATE\\" feature_sr_supports_local_caching = \\"SR_SUPPORTS_LOCAL_CACHING\\" feature_vdi_create = \\"VDI_CREATE\\" feature_vdi_destroy = \\"VDI_DESTROY\\" feature_vdi_attach = \\"VDI_ATTACH\\" feature_vdi_detach = \\"VDI_DETACH\\" feature_vdi_resize = \\"VDI_RESIZE\\" feature_vdi_resize_online = \\"VDI_RESIZE_ONLINE\\" feature_vdi_clone = \\"VDI_CLONE\\" feature_vdi_snapshot = \\"VDI_SNAPSHOT\\" feature_vdi_activate = \\"VDI_ACTIVATE\\" feature_vdi_deactivate = \\"VDI_DEACTIVATE\\" feature_vdi_update = \\"VDI_UPDATE\\" feature_vdi_introduce = \\"VDI_INTRODUCE\\" feature_vdi_generate_config = \\"VDI_GENERATE_CONFIG\\" feature_vdi_reset_on_boot = \\"VDI_RESET_ON_BOOT\\" # Unmarshals arguments and marshals results (including exceptions) class Marshall: def __init__(self, x): self.x = x def query(self, args): result = self.x.query() return value(result) def sr_attach(self, args): result = self.x.sr_attach(args[\\"task\\"], args[\\"sr\\"], args[\\"device_config\\"]) expect_none(result) return value(unit) def sr_detach(self, args): result = self.x.sr_detach(args[\\"task\\"], args[\\"sr\\"]) expect_none(result) return value(unit) def sr_destroy(self, args): result = self.x.sr_destroy(args[\\"task\\"], args[\\"sr\\"]) expect_none(result) return value(unit) def sr_scan(self, args): vis = self.x.sr_scan(args[\\"task\\"], args[\\"sr\\"]) result = map(lambda vi: vdi_info(vi), vis) return value(vdis(result)) def vdi_create(self, args): vi = self.x.vdi_create(args[\\"task\\"], args[\\"sr\\"], vdi_info(args[\\"vdi_info\\"]), args[\\"params\\"]) return value(vdi(vdi_info(vi))) def vdi_destroy(self, args): result = self.x.vdi_destroy(args[\\"task\\"], args[\\"sr\\"], args[\\"vdi\\"]) expect_none(result) return value(unit) def vdi_attach(self, args): result = self.x.vdi_attach(args[\\"task\\"], args[\\"dp\\"], args[\\"sr\\"], args[\\"vdi\\"], args[\\"read_write\\"]) expect_string(result) return value(params(result)) def vdi_activate(self, args): result = self.x.vdi_activate(args[\\"task\\"], args[\\"dp\\"], args[\\"sr\\"], args[\\"vdi\\"]) expect_none(result) return value(unit) def vdi_deactivate(self, args): result = self.x.vdi_deactivate(args[\\"task\\"], args[\\"dp\\"], args[\\"sr\\"], args[\\"vdi\\"]) expect_none(result) return value(unit) def vdi_detach(self, args): result = self.x.vdi_detach(args[\\"task\\"], args[\\"dp\\"], args[\\"sr\\"], args[\\"vdi\\"]) expect_none(result) return value(unit) def _dispatch(self, method, params): try: log(\\"method = %s params = %s\\" % (method, repr(params))) args = params[0] if method == \\"query\\": return self.query(args) elif method == \\"SR.attach\\": return self.sr_attach(args) elif method == \\"SR.detach\\": return self.sr_detach(args) elif method == \\"SR.scan\\": return self.sr_scan(args) elif method == \\"VDI.create\\": return self.vdi_create(args) elif method == \\"VDI.destroy\\": return self.vdi_destroy(args) elif method == \\"VDI.attach\\": return self.vdi_attach(args) elif method == \\"VDI.activate\\": return self.vdi_activate(args) elif method == \\"VDI.deactivate\\": return self.vdi_deactivate(args) elif method == \\"VDI.detach\\": return self.vdi_detach(args) except BackendError, e: log(\\"caught %s\\" % e) traceback.print_exc() return value(backend_error(e.code, e.params)) except Vdi_does_not_exist, e: log(\\"caught %s\\" %e) return value(vdi_does_not_exist()) except Exception, e: log(\\"caught %s\\" % e) traceback.print_exc() return value(internal_error(str(e))) # Helper function to daemonise def daemonize(): def fork(): try: if os.fork() > 0: # parent sys.exit(0) except Exception, e: print >>sys.stderr, \\"fork() failed: %s\\" % e traceback.print_exc() raise fork() os.umask(0) os.chdir(\\"/\\") os.setsid() fork() devnull = open(\\"/dev/null\\", \\"r\\") os.dup2(devnull.fileno(), sys.stdin.fileno()) devnull = open(\\"/dev/null\\", \\"aw\\") os.dup2(devnull.fileno(), sys.stdout.fileno()) os.dup2(devnull.fileno(), sys.stderr.fileno()) from SimpleXMLRPCServer import SimpleXMLRPCServer, SimpleXMLRPCRequestHandler # Server XMLRPC from any HTTP POST path # class RequestHandler(SimpleXMLRPCRequestHandler): rpc_paths = [] # SimpleXMLRPCServer with SO_REUSEADDR class Server(SimpleXMLRPCServer): def __init__(self, ip, port): SimpleXMLRPCServer.__init__(self, (ip, port), requestHandler=RequestHandler) def server_bind(self): self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) SimpleXMLRPCServer.server_bind(self) # This is a hack to patch slow socket.getfqdn calls that # BaseHTTPServer (and its subclasses) make. # See: http://bugs.python.org/issue6085 # See: http://www.answermysearches.com/xmlrpc-server-slow-in-python-how-to-fix/2140/ import BaseHTTPServer def _bare_address_string(self): host, port = self.client_address[:2] return '%s' % host BaseHTTPServer.BaseHTTPRequestHandler.address_string = _bare_address_string # Given an implementation, serve requests forever # def start(impl, ip, port, daemon): if daemon: log(\\"daemonising\\") daemonize() log(\\"will listen on %s:%d\\" % (ip, port)) server = Server(ip, port) log(\\"server registered on %s:%d\\" % (ip, port)) server.register_introspection_functions() # for debugging server.register_instance(Marshall(impl)) log(\\"serving requests forever\\") server.serve_forever()"},{"prompt":"Convert this Java code sample to Python. public int sumOfArray(int[] array) { int sum = 0; for (int i = 0; i < array.length; i++) { sum += array[i]; } return sum; }","completion":"def sum_of_array(array): sum = 0 for i in range(len(array)): sum += array[i] return sum"},{"prompt":"mplement a Python program to calculate the average of every two numbers in a given array. [1, 3, 5, 7, 9]","completion":"def average_every_two_numbers(arr): result = [] for i in range(0, len(arr), 2): if i+1 < len(arr): result.append( (arr[i] + arr[i+1])/2.0) else: result.append(arr[i]) return result print(average_every_two_numbers([1, 3, 5, 7, 9]))"},{"prompt":"Optimize a Python function to compute the maximum value in a list of integers. list = [1, 3, 2, 5, 6, 4]","completion":"def get_max(list): # Initialize the maximum max_v = list[0] # Compute the maximum for i in range(1, len(list)): if list[i] > max_v: max_v = list[i] # Return the maximum return max_v"},{"prompt":"Write a Python code to calculate the sum of prime numbers between 1 and n. n = 20","completion":"n = 20 def calculate_sum_of_primes(n): result = 0 if n >= 2: primes = [2] for i in range(3, n + 1, 2): for j in primes: if i % j == 0: break else: primes.append(i) result = sum(primes) return result print(calculate_sum_of_primes(n))"},{"prompt":"Rewrite the following Python code to make it run at least 30% faster. def binary_search(arr, x): left = 0 right = len(arr) 1 while left <= right: mid = (left + right)//2 if arr[mid] == x: return mid elif arr[mid] < x: left = mid + 1 else: right = mid 1 return 1","completion":"def binary_search(arr, x): left = 0 right = len(arr) - 1 while left <= right: mid = left + (right - left)//2 if arr[mid] == x: return mid elif arr[mid] < x: left = mid + 1 else: right = mid - 1 return -1"},{"prompt":"Write a socket program in Python to send and receive data.","completion":"import socket HOST = '127.0.0.1' # The server's hostname or IP address PORT = 65432 # The port used by the server with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((HOST, PORT)) s.sendall(b'Hello, world') data = s.recv(1024) print('Received', repr(data))"},{"prompt":"Write a python program to remove duplicates from an unsorted linked list.","completion":"class LinkedListNode: def __init__(self, data): self.data = data self.next = None def remove_duplicates(node): if node is None: return node seen_data = {node.data: True} curr_node = node.next prev_node = node while curr_node is not None: if curr_node.data in seen_data: # remove the node prev_node.next = curr_node.next curr_node = prev_node.next else: seen_data[curr_node.data] = True curr_node = curr_node.next prev_node = prev_node.next return node"},{"prompt":"Write a python program that takes a list of numbers as input and prints out the sum of the two numbers that are closest to zero. nots = [1, 5, 3, 0 7]","completion":"# Take the list of numbers nots = [1, 5, -3, 0, -7] # Sort the list nots.sort() # Set up variables to store the two closest values closest1 = 0 closest2 = 0 # Iterate through the list for val in nots: # Check if the absolute value of the current number # is closest to zero if abs(val) < abs(closest1): closest2 = closest1 closest1 = val # Print the sum of the two closest values print(closest1 + closest2)"},{"prompt":"Generate a Python program to convert a given binary string into its equivalent decimal number. Binary String: 1101","completion":"# Convert the given binary string to an integer number binary_string = \\"1101\\" decimal_number = int(binary_string, 2) # Print the result print(decimal_number) # 13"},{"prompt":"Create a Python function that sorts a list of strings in descending order of length. ['Math', 'English', 'Computer Science', 'Physics']","completion":"def sort_by_length_descending(list_of_strings): list_of_strings.sort(key=len, reverse=True) return list_of_strings result = sort_by_length_descending(['Math', 'English', 'Computer Science', 'Physics']) print(result)"},{"prompt":"Write a Python code to perform a crossvalidation on a KNN classifier","completion":"import numpy as np from sklearn.model_selection import KFold # Define the 5 fold cross-validation kfold = KFold(n_splits=5, shuffle=True, random_state=1) # Generate the k-folds splits = kfold.split(X) for train_idx, val_idx in splits: # Generate training and validation sets X_train, y_train = X[train_idx], y[train_idx] X_val, y_val = X[val_idx], y[val_idx] # Initialize the model model = KNeighborsClassifier() # Fit the model on the training set model.fit(X_train, y_train) # Score the model on the validation set score = model.score(X_val, y_val)"},{"prompt":"Given the following data, adjust the Python code so that it outputs a JSON representation of the data. data = [ { id: 5, name: John }, { id: 7, name: Jack }, { id: 9, name: James } ]","completion":"import json data = [ { \\"id\\": 5, \\"name\\": \\"John\\" }, { \\"id\\": 7, \\"name\\": \\"Jack\\" }, { \\"id\\": 9, \\"name\\": \\"James\\" } ] data_json = json.dumps(data, indent=4) print(data_json)"},{"prompt":"Create a Python function named 'get_date' that returns the current date and time upon invocation.","completion":"def get_date(): from datetime import datetime return datetime.now()"},{"prompt":"To download bioformats, run the script and pass 'download_bioformats' as an argument. The downloaded file will be saved as 'bioformats_package.jar' in the same directory as the script.","completion":"# PyDIP 3.0, Python bindings for DIPlib 3.0 # This file contains functionality to download bioformats # # (c)2020, Wouter Caarls # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. import sys, os, urllib.request def progress(blocks, bs, size): barsize = 52 pct = blocks*bs / float(size) bardone = int(pct*barsize) print('[{0}{1}] {2: >3}%'.format('=' * bardone, '.'*(barsize-bardone), int(pct*100)), end='r', flush=True) if __name__ == '__main__': if 'download_bioformats' in sys.argv: url = 'https://downloads.openmicroscopy.org/bio-formats/6.5.0/artifacts/bioformats_package.jar' filename = os.path.join(os.path.dirname(__file__), 'bioformats_package.jar') print('Retrieving', url) urllib.request.urlretrieve(url, filename, progress) print()"},{"prompt":"Generate a Python script to run a batch job every weekend that sends an email notification if the balance of a given account is lower than a specified amount. Account Number: 123456 Notification Threshold : 1000","completion":"import smtplib import csv ACCOUNT_NUMBER = 123456 NOTIFICATION_THRESHOLD = 1000 RECIPIENT_EMAIL = \\"myemail@example.com\\" SENDER_EMAIL = \\"noreply@example.com\\" SMTP_SERVER_HOST = \\"smtp.example.com\\" SMTP_SERVER_PORT = 587 def check_account_balance(account_number, notification_threshold): # Load the CSV file with account information with open(\\"data.csv\\") as csv_file: reader = csv.reader(csv_file) for row in reader: if row[0] == str(account_number): if float(row[3]) < notification_threshold: return True return False def send_notification(recipient_email): # Create the message message = f\\"Subject: Balance Check AlertnnYour account balance is below {NOTIFICATION_THRESHOLD} dollars!\\" # Connect to the SMTP server with smtplib.SMTP(SMTP_SERVER_HOST, SMTP_SERVER_PORT) as server: # Send the message server.sendmail(SENDER_EMAIL, recipient_email, message) print(\\"Notification sent.\\") if __name__ == \\"__main__\\": # Check the account balance if check_account_balance(ACCOUNT_NUMBER, NOTIFICATION_THRESHOLD): # Send the notification send_notification(RECIPIENT_EMAIL) else: print(\\"Account balance is not below the notification threshold.\\")"},{"prompt":"Create a Python dictionary and a list that contain information about the following three employees. Include name, age, and salary. John Smith, 30, 5000 Jane Doe, 28, 8000 Jack Black, 25, 3000","completion":"employees = { 'John Smith': { 'age': 30, 'salary': 5000 }, 'Jane Doe': { 'age': 28, 'salary': 8000 }, 'Jack Black': { 'age': 25, 'salary': 3000 } } employees_list = [ {'name': 'John Smith', 'age': 30, 'salary': 5000}, {'name': 'Jane Doe', 'age': 28, 'salary': 8000}, {'name': 'Jack Black', 'age': 25, 'salary': 3000} ]"},{"prompt":"Edit the following code to apply the insert sorting algorithm in Python. def insertion_sort(list): p","completion":"def insertion_sort(list): for i in range(1, len(list)): key = list[i] j = i - 1 while j >= 0 and list[j] > key: list[j + 1] = list[j] j = j - 1 list[j + 1] = key"},{"prompt":"Construct a Python program to find all substrings of a given string String : Pytho","completion":"def get_all_substrings(input_string): length = len(input_string) return [input_string[i:j+1] for i in range(length) for j in range(i,length)] output = get_all_substrings('Python') print(output)"},{"prompt":"Generate a script to setup environment variables that can be used by all of your programs.","completion":"#!/bin/bash # set up your environment variables # ------------------------------- # Defining environment variables # my_name export my_name=\\"John Doe\\" # my_age export my_age=\\"32\\" # my_code_editor export my_code_editor=\\"vim\\" # my_python_version export my_python_version=\\"3.7\\" # my_favourite_language export my_favourite_language=\\"java\\" # my_git_username export my_git_username=\\"johndoe123\\" # my_github_url export my_github_url=\\"https://github.com/johndoe123\\""},{"prompt":"Create a Python script to generate 10 random hexadecimal numbers.","completion":"import random def generate_hex_numbers(n): hex_numbers = [format(random.randint(0, 16**8 - 1), 'x') for _ in range(n)] return hex_numbers print(generate_hex_numbers(10))"},{"prompt":"Create a python function to parse a characterseparated string Parse a string Harry,30,England using comma as separator","completion":"def parse_str(str, separator): strList = str.split(separator) return strList"},{"prompt":"Translate the following algebraic expression into a Python program: 𝑧=(𝑥+𝑦)2+2𝑥−3𝑦 Not applicable","completion":"x = int(input('Enter the value of x: ')) y = int(input('Enter the value of y: ')) z = (x + y)**2 + (2 * x) - (3 * y) print(\\"The value of z is:\\", z)"},{"prompt":"Develop a Python program to evaluate a given polynomial given a value of the independent variable. polynomial = 4x^3 + 7x + 2 x = 6","completion":"def evaluate_polynomial(polynomial, x): terms = polynomial.split(\\"+\\") result = 0 for term in terms: factor, exponent = term.split(\\"x^\\") result += int(factor)*(x**int(exponent)) return result polynomial = \\"4x^3 + 7x + 2\\" x = 6 print(evaluate_polynomial(polynomial, x))"},{"prompt":"Write a Python script to print the maximum number from a list.","completion":"def find_max(list): max_num = list[0] for i in list: if i > max_num: max_num = i return max_num"},{"prompt":"Generate a program in Python to find the longest common prefix of a given set of strings. [programming, prog, prompt]","completion":"def longestCommonPrefix(input_array): if len(input_array) == 0: return \\"\\" if len(input_array) == 1: return input_array[0] # sort the array input_array.sort() # take first and last element from the # sorted array and find the common prefix # among them endString = input_array[0] startString = input_array[len(input_array)-1] # initialize i for loop i = 0 resultString = \\"\\" while i < len(endString) and i < len(startString): if endString[i] != startString[i]: break resultString = resultString + endString[i] i = i+1 return resultString input_array = [\\"programming\\", \\"prog\\", \\"prompt\\"] print(\\"The longest common prefix is:\\", longestCommonPrefix(input_array))"},{"prompt":"Write a python program that takes a list of strings, checks if any of them are palindromes, and returns 'True' if at least one of them is a palindrome. ['abc', 'bob', 'kayak']","completion":"def is_palindrome(strings): for string in strings: reversed_string = string[::-1] if string == reversed_string: return True return False strings = ['abc', 'bob', 'kayak'] out = is_palindrome(strings) print(out)"},{"prompt":"Given a list of words, write a python function that returns a list of words with the length of the longest word. [one, two, three, four, five, six]","completion":"def get_longest_words(words): max_length = 0 longest_words = [] for word in words: if len(word) > max_length: max_length = len(word) longest_words.clear() longest_words.append(word) elif len(word) == max_length: longest_words.append(word) return longest_words result = get_longest_words([\\"one\\", \\"two\\", \\"three\\", \\"four\\", \\"five\\", \\"six\\"]) print(result)"},{"prompt":"Create a Python program that takes a number n and prints out the Fibonacci sequence from 0 to n.","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b def printFibonacci(n): for i in range(n+1): print(Fibonacci(i),end=\\" \\")"},{"prompt":"Generate a function in Python that adds two numbers together. Not applicable","completion":"def add_numbers(a, b): \\"\\"\\" This function takes two numbers as arguments and returns their sum. \\"\\"\\" return a + b"},{"prompt":"Create a Python script that outputs a random integer between 1 and 10.","completion":"import random random_int = random.randint(1, 10) print(random_int)"},{"prompt":"Reverse the elements of a given array in Python. arr = [1, 4, 6, 8, 5]","completion":"def reverse_array(arr): n = len(arr) for i in range(n // 2): arr[i], arr[n - i - 1] = arr[n - i - 1], arr[i] return arr"},{"prompt":"This code provides classes and functions for working with JSONstyle data in Python. To use it, import the necessary classes and functions and create instances of them as needed. The DotDict and DotList classes allow for attribute and index access using dot notation, while the DictModifier class allows for sparse overriding of dictionary values. The dict_merge function merges two dictionaries nondestructively, and the named_any and for_name functions allow for importing and using Python objects by name. The code includes a main block with example usage of the DotDict and DotList classes.","completion":"#!/usr/bin/env python __author__ = 'Adam R. Smith' __license__ = 'Apache 2.0' import collections class DotNotationGetItem(object): \\"\\"\\" Drive the behavior for DotList and DotDict lookups by dot notation, JSON-style. \\"\\"\\" def _convert(self, val): \\"\\"\\" Convert the type if necessary and return if a conversion happened. \\"\\"\\" if isinstance(val, dict) and not isinstance(val, DotDict): return DotDict(val), True elif isinstance(val, list) and not isinstance(val, DotList): return DotList(val), True return val, False def __getitem__(self, key): val = super(DotNotationGetItem, self).__getitem__(key) val, converted = self._convert(val) if converted: self[key] = val return val class DotList(DotNotationGetItem, list): \\"\\"\\" Partner class for DotDict; see that for docs. Both are needed to fully support JSON/YAML blocks. \\"\\"\\" #def DotListIterator(list.) def __iter__(self): \\"\\"\\" Monkey-patch the \\"next\\" iterator method to return modified versions. This will be slow. \\"\\"\\" #it = super(DotList, self).__iter__() #it_next = getattr(it, 'next') #setattr(it, 'next', lambda: it_next(it)) #return it for val in super(DotList, self).__iter__(): val, converted = self._convert(val) yield val class DotDict(DotNotationGetItem, dict): \\"\\"\\" Subclass of dict that will recursively look up attributes with dot notation. This is primarily for working with JSON-style data in a cleaner way like javascript. Note that this will instantiate a number of child DotDicts when you first access attributes; do not use in performance-critical parts of your code. \\"\\"\\" def __getattr__(self, key): \\"\\"\\" Make attempts to lookup by nonexistent attributes also attempt key lookups. \\"\\"\\" try: val = self.__getitem__(key) except KeyError: raise AttributeError(key) return val def copy(self): return DotDict(dict.copy(self)) @classmethod def fromkeys(cls, seq, value=None): return DotDict(dict.fromkeys(seq, value)) class DictModifier(DotDict): \\"\\"\\" Subclass of DotDict that allows the sparse overriding of dict values. \\"\\"\\" def __init__(self, base, data=None): # base should be a DotDict, raise TypeError exception if not if not isinstance(base, DotDict): raise TypeError(\\"Base must be of type DotDict\\") self.base = base if data is not None: self.update(data) def __getattr__(self, key): try: return DotDict.__getattr__(self, key) except AttributeError, ae: # Delegate to base return getattr(self.base, key) def __getitem__(self, key): try: return DotDict.__getitem__(self, key) except KeyError, ke: # Delegate to base return getattr(self.base, key) # dict_merge from: http://appdelegateinc.com/blog/2011/01/12/merge-deeply-nested-dicts-in-python/ def quacks_like_dict(object): \\"\\"\\"Check if object is dict-like\\"\\"\\" return isinstance(object, collections.Mapping) def dict_merge(a, b): \\"\\"\\"Merge two deep dicts non-destructively Uses a stack to avoid maximum recursion depth exceptions >>> a = {'a': 1, 'b': {1: 1, 2: 2}, 'd': 6} >>> b = {'c': 3, 'b': {2: 7}, 'd': {'z': [1, 2, 3]}} >>> c = merge(a, b) >>> from pprint import pprint; pprint(c) {'a': 1, 'b': {1: 1, 2: 7}, 'c': 3, 'd': {'z': [1, 2, 3]}} \\"\\"\\" assert quacks_like_dict(a), quacks_like_dict(b) dst = a.copy() stack = [(dst, b)] while stack: current_dst, current_src = stack.pop() for key in current_src: if key not in current_dst: current_dst[key] = current_src[key] else: if quacks_like_dict(current_src[key]) and quacks_like_dict(current_dst[key]) : stack.append((current_dst[key], current_src[key])) else: current_dst[key] = current_src[key] return dst def named_any(name): \\"\\"\\" Retrieve a Python object by its fully qualified name from the global Python module namespace. The first part of the name, that describes a module, will be discovered and imported. Each subsequent part of the name is treated as the name of an attribute of the object specified by all of the name which came before it. @param name: The name of the object to return. @return: the Python object identified by 'name'. \\"\\"\\" assert name, 'Empty module name' names = name.split('.') topLevelPackage = None moduleNames = names[:] while not topLevelPackage: if moduleNames: trialname = '.'.join(moduleNames) try: topLevelPackage = __import__(trialname) except Exception, ex: moduleNames.pop() else: if len(names) == 1: raise Exception(\\"No module named %r\\" % (name,)) else: raise Exception('%r does not name an object' % (name,)) obj = topLevelPackage for n in names[1:]: obj = getattr(obj, n) return obj def for_name(modpath, classname): ''' Returns a class of \\"classname\\" from module \\"modname\\". ''' module = __import__(modpath, fromlist=[classname]) classobj = getattr(module, classname) return classobj() if __name__ == '__main__': dd = DotDict({'a':{'b':{'c':1, 'd':2}}}) print dd.a.b.c, dd.a.b.d print dd.a.b #print dd.foo print dict.fromkeys(('a','b','c'), 'foo') print DotDict.fromkeys(('a','b','c'), 'foo').a dl = DotList([1, {'a':{'b':{'c':1, 'd':2}}}]) print dl[1].a.b.c"},{"prompt":"Create a function in Python to check whether an input character is a digit or not.","completion":"def is_digit(x): return x.isdigit()"},{"prompt":"Create a neural network model in Python to classify text as positive or negative","completion":"\\"\\"\\" Create a neural network model in Python to classify text as positive or negative \\"\\"\\" import numpy as np import tensorflow as tf # Define the model model = tf.keras.models.Sequential([ # The input layer with shape of vocab size used for one-hot encoding tf.keras.layers.Input(shape=(vocab_size)), # Add a layer of Dropout for regularized learning tf.keras.layers.Dropout(rate=0.2), # The hidden layers tf.keras.layers.Dense(units=64, activation='relu'), tf.keras.layers.Dense(units=1, activation='sigmoid') ]) # Compile the model model.compile( optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'] ) # Fit on the training data model.fit(X_train, y_train, epochs=5, batch_size=32)"},{"prompt":"Generate Python code to print the following output.","completion":"for i in range(1, 6): for j in range(i): print(\\"*\\", end=\\"\\") print()"},{"prompt":"Evaluate the accuracy of a machine learning model. A classification model trained on a dataset of 10000 images.","completion":"Create a python script to evaluate the performance of the classification model. The script should measure the accuracy of the model by measuring the accuracy score on a held-out test set. The test should compare the model's predictions to the true labels for the image samples."},{"prompt":"Write a regex to identify all the words starting with 't' and ending with 'e' in a given string. str1=this is a python program","completion":"import re def identify_words(str1): regex = \\"w*tw*eb\\" words = re.findall(regex, str1) return words print(identify_words(\\"this is a python program\\"))"},{"prompt":"Explain how the fast Fourier transform algorithm works in Python.","completion":"The Fast Fourier Transform (FFT) is an efficient algorithm used to compute the discrete Fourier transform (DFT). The algorithm works by decomposing a signal into its real and imaginary components and then applying a simple vector algorithm to compute the imaginary and real components simultaneously. In Python, the FFT algorithm can be implemented by using Numpy's fft function. In order to compute the FFT, the signal must first be broken into overlapping blocks and the DFT of each block must be computed separately. The blocks are then stitched together to form the final FFT result. The algorithm has several advantages, such as its ability to reduce the number of computations necessary to compute the DFT, as well as its parallelizability, meaning it can be efficiently executed on multiple CPUs."},{"prompt":"Write a Python program to filter a list of sentences based on a given list of keywords. Sentences: [This is an example sentence., The quick brown fox jumped over the lazy dog., A computer can be a powerful tool.] Keywords: [example, computer, power]","completion":"sentences = [\\"This is an example sentence.\\", \\"The quick brown fox jumped over the lazy dog.\\", \\"A computer can be a powerful tool.\\"] keywords = [\\"example\\", \\"computer\\", \\"power\\"] filtered_sentences = [] for sentence in sentences: words = sentence.split() for word in words: if word in keywords: filtered_sentences.append(sentence) break print(filtered_sentences) # Output: [\\"This is an example sentence.\\", \\"A computer can be a powerful tool.\\"]"},{"prompt":"Create a basic REST API in Python using Flask that responds to a GET request with a list of strings. Not applicable","completion":"from flask import Flask, request, jsonify app = Flask(name) @app.route('/request', methods=['GET']) def getRequest(): myList = ['string1', 'string2', 'string3'] return jsonify(myList) if name == 'main': app.run(debug=True)"},{"prompt":"Optimize a Python function that calculates the Euclidean distance between two points. def euclidean_distance(p1, p2): '''Calculate the Euclidean distance between two points''' dist = 0 for i in range(len(p1)): dist += (p1[i] p2[i])**2 return dist**(0.5)","completion":"def euclidean_distance(p1, p2): '''Calculate the Euclidean distance between two points''' delta = tuple(px - py for px, py in zip(p1, p2)) return sum(map(lambda x: x ** 2, delta)) ** 0.5"},{"prompt":"Write a Python function to sort list of tuples using custom sorting algorithm. Your sorting algorithm should use last tuple element to sort a given list of tuples in ascending or descending order. [(1, 11, 4), (2, 3, 5), (3, 2, 1), (4, 15, 9)]","completion":"def sort_list_of_tuples(list_of_tuples, key, reverse=False): '''This function sorts a list of tuples based on the specified key in ascending or descending order Parameters: list_of_tuples (list): list of tuples key: the index of the tuple that should be used to sort reverse (bool): flag to decide sorting order, False for ascending, True for descending Returns: list: A sorted list of tuples ''' # sort using specified key sorted_list = sorted(list_of_tuples, key=lambda x: x[key], reverse=reverse) return sorted_list list_of_tuples = [(1, 11, 4), (2, 3, 5), (3, 2, 1), (4, 15, 9)] key = 2 # Sort in ascending order sorted_list_asc = sort_list_of_tuples(list_of_tuples, key, reverse=False) # Sort in descending order sorted_list_desc = sort_list_of_tuples(list_of_tuples, key, reverse=True) print(\\"Sorted list in ascending order:\\", sorted_list_asc) print(\\"Sorted list in descending order:\\", sorted_list_desc)"},{"prompt":"Create a Python script that takes two integers as input and prints out their greatest common divisor. 30, 54","completion":"def gcd(a, b): if b == 0: return a else: return gcd(b, a % b) if __name__ == \\"__main__\\": a = int(input(\\"Enter first integer: \\")) b = int(input(\\"Enter second integer: \\")) result = gcd(a, b) print(\\"The GCD of {} and {} is: {}\\".format(a, b, result))"},{"prompt":"Suggest a Python solution to convert a number in base2 to a string.","completion":"def bin_to_string(bin_num): bin_string = bin(bin_num)[2:] return bin_string"},{"prompt":"Rewrite the given Python code to use list comprehension. arr = [3, 1, 2, 5, 4] new_arr = [] for element in arr: if element % 2 == 0: new_arr.append(element)","completion":"arr = [3, 1, 2, 5, 4] new_arr = [element for element in arr if element % 2 == 0]"},{"prompt":"Generate a Python script to create a dictionary containing the names of each president of the United States and the number of terms he/she served.","completion":"presidents = { \\"George Washington\\": 1, \\"John Adams\\": 1, \\"Thomas Jefferson\\": 2, \\"James Madison\\": 2, \\"James Monroe\\": 2, \\"John Quincy Adams\\": 1, \\"Andrew Jackson\\": 2, \\"Martin Van Buren\\": 1, \\"William Henry Harrison\\": 1, \\"John Tyler\\": 1, \\"James K. Polk\\": 1, \\"Zachary Taylor\\": 1, \\"Millard Fillmore\\": 1, \\"Franklin Pierce\\": 1, \\"James Buchanan\\": 1, \\"Abraham Lincoln\\": 2, \\"Andrew Johnson\\": 1, \\"Ulysses S. Grant\\": 2, \\"Rutherford B. Hayes\\": 1, \\"James A. Garfield\\": 1, \\"Chester A. Arthur\\": 1, \\"Grover Cleveland\\": 2, \\"Benjamin Harrison\\": 1, \\"William McKinley\\": 2, \\"Theodore Roosevelt\\": 2, \\"William Howard Taft\\": 1, \\"Woodrow Wilson\\": 2, \\"Warren G. Harding\\": 1, \\"Calvin Coolidge\\": 2, \\"Herbert Hoover\\": 1, \\"Franklin D. Roosevelt\\": 4, \\"Harry S. Truman\\": 2, \\"Dwight D. Eisenhower\\": 2, \\"John F. Kennedy\\": 1, \\"Lyndon B. Johnson\\": 1, \\"Richard Nixon\\": 2, \\"Gerald Ford\\": 1, \\"Jimmy Carter\\": 1, \\"Ronald Reagan\\": 2, \\"George H. W. Bush\\": 1, \\"Bill Clinton\\": 2, \\"George W. Bush\\": 2, \\"Barack Obama\\": 2, \\"Donald Trump\\": 1 }"},{"prompt":"Create an automated program to check if an employee works more than 8 hours a day with Python. Dataframe of employee working hours: Name | Hours | John | 8 Nick | 10 Samantha | 7","completion":"import pandas as pd # Read the employee working hours dataset df = pd.read_csv(\\"working_hours_data.csv\\") # Define a function to check if an employee is working more than 8 hours def check_hours(hours): if hours > 8: return True else: return False # Add a new column that stores the results of the check df['More than 8 hours?'] = df['Hours'].apply(check_hours) # Print the updated dataframe print(df)"},{"prompt":"Create a Python program to calculate the electric bill for a customer based on kilowatt hour of electricity used. x = 500","completion":"def calculate_electric_bill(kw_usage): rate = 0.15 bill = kw_usage * rate return bill x = 500 bill = calculate_electric_bill(x) print(\\"Your bill is:\\", str(bill))"},{"prompt":"Create a function in Python that takes a value and inserts it into an already sorted list. [1, 5, 8], 6","completion":"# Python def insertInSortedList(sorted_list, value): left = 0 right = len(sorted_list) - 1 while left <= right: mid = left + (right - left) // 2 if value < sorted_list[mid]: right = mid - 1 else: left = mid + 1 sorted_list.insert(left, value) return sorted_list"},{"prompt":"Write a code to do sentiment analysis on a given sentence in Python. I love spending time with my family","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sid = SentimentIntensityAnalyzer() given_sentence = \\"I love spending time with my family\\" scores = sid.polarity_scores(given_sentence) for key in scores: print('{0}: {1}, '.format(key, scores[key]), end='') print() if scores['compound'] >= 0.05: print(\\"Positive Sentiment\\") elif scores['compound'] <= -0.05: print(\\"Negative Sentiment\\") else: print(\\"Neutral Sentiment\\")"},{"prompt":"Create a Python function to replace all the vowels in a string with 'x'.","completion":"def replace_vowels(s): vowels = ['a', 'e', 'i', 'o', 'u'] for char in s: if char in vowels: s = s.replace(char, 'x') return s"},{"prompt":"Create a Python function to calculate the Fibonacci sequence with a given number as the input. 6","completion":"def fibonacci_sequence(num): a = 0 b = 1 if num < 0: print(\\"Incorrect input\\") elif num == 0: return a elif num == 1: return b else: for i in range(2,num): c = a + b a = b b = c return b print(fibonacci_sequence(num))"},{"prompt":"This code defines a Python class called PcaPlotVector that inherits from BaseCClass and has several methods for accessing and manipulating data. To use this code, import the necessary modules from ert.cwrap, ert.enkf, and ert.util. Then, create an instance of the PcaPlotVector class with the required arguments: an integer component, a Matrix object for the principal component matrix, and a Matrix object for the observation principal component matrix. The resulting object can be used to access the data stored in the matrices, including the size, individual values, observation value, and singular value. When finished using the object, call the free() method to release the memory allocated for it.","completion":"from ert.cwrap import BaseCClass, CWrapper from ert.enkf import ENKF_LIB from ert.util import Matrix class PcaPlotVector(BaseCClass): def __init__(self, component, principal_component_matrix, observation_principal_component_matrix): assert isinstance(component, int) assert isinstance(principal_component_matrix, Matrix) assert isinstance(observation_principal_component_matrix, Matrix) c_pointer = PcaPlotVector.cNamespace().alloc(component, principal_component_matrix, observation_principal_component_matrix) super(PcaPlotVector, self).__init__(c_pointer) def __len__(self): \\"\\"\\" @rtype: int \\"\\"\\" return PcaPlotVector.cNamespace().size(self) def __getitem__(self, index): \\"\\"\\" @type index: int @rtype: float \\"\\"\\" assert isinstance(index, int) return PcaPlotVector.cNamespace().get(self, index) def __iter__(self): cur = 0 while cur < len(self): yield self[cur] cur += 1 def getObservation(self): \\"\\"\\" @rtype: float \\"\\"\\" return PcaPlotVector.cNamespace().get_obs(self) def getSingularValue(self): \\"\\"\\" @rtype: float \\"\\"\\" return PcaPlotVector.cNamespace().get_singular_value(self) def free(self): PcaPlotVector.cNamespace().free(self) cwrapper = CWrapper(ENKF_LIB) cwrapper.registerType(\\"pca_plot_vector\\", PcaPlotVector) cwrapper.registerType(\\"pca_plot_vector_obj\\", PcaPlotVector.createPythonObject) cwrapper.registerType(\\"pca_plot_vector_ref\\", PcaPlotVector.createCReference) PcaPlotVector.cNamespace().alloc = cwrapper.prototype(\\"c_void_p pca_plot_vector_alloc(int, matrix, matrix)\\") PcaPlotVector.cNamespace().free = cwrapper.prototype(\\"void pca_plot_vector_free(pca_plot_vector)\\") PcaPlotVector.cNamespace().size = cwrapper.prototype(\\"int pca_plot_vector_get_size(pca_plot_vector)\\") PcaPlotVector.cNamespace().get = cwrapper.prototype(\\"double pca_plot_vector_iget_sim_value(pca_plot_vector, int)\\") PcaPlotVector.cNamespace().get_obs = cwrapper.prototype(\\"double pca_plot_vector_get_obs_value(pca_plot_vector)\\") PcaPlotVector.cNamespace().get_singular_value = cwrapper.prototype(\\"double pca_plot_vector_get_singular_value(pca_plot_vector)\\")"},{"prompt":"Develop a Python program that takes a string as an argument and prints out the most commonly occurring letter in the string.","completion":"from collections import Counter def most_common_letter(string): \\"\\"\\"Function to find the most common letters in the string\\"\\"\\" words = string.split() cnt = Counter() for word in words: for letter in word: cnt[letter] += 1 most_occur = cnt.most_common(1)[0] return most_occur[0] # Driver code string = \\"this is a sample sentence\\" print(most_common_letter(string))"},{"prompt":"Optimize a Python algorithm that computes the maximum value in a given array. list = [23, 45, 67, 89, 13, 99, 19, 20]","completion":"def max_value(list): max_val = list[0] for val in list[1:]: if val > max_val: max_val = val return max_val list = [23, 45, 67, 89, 13, 99, 19, 20] print(max_value(list)) # 99"},{"prompt":"Develop a program in Python to subtract two given integers. int1=5 int2=3","completion":"# Program to subtract two integers int1 = -5 int2 = 3 # Subtract subtract = int1 - int2 print(\\" Difference of two given integers is :\\", subtract)"},{"prompt":"Create a webscraping program to get all aspects from a given website. https://en.wikipedia.org/wiki/Python_(programming_language)","completion":"import requests from bs4 import BeautifulSoup URL = \\"https://en.wikipedia.org/wiki/Python_(programming_language)\\" r = requests.get(URL) soup = BeautifulSoup(r.content, 'html5lib') title = soup.title print(\\"Title is: \\", title.string) h1 = soup.h1 print(\\"h1 tag is: \\", h1.string) links = soup.findAll(\\"a\\") for link in links: print(\\"Link: \\", link.get(\\"href\\"))"},{"prompt":"Create a function in Python that builds an object with the following properties.","completion":"def build_object(): obj = { \\"firstName\\": \\"John\\", \\"lastName\\": \\"Smith\\", \\"age\\": 40, \\"address\\": { \\"street\\": \\"123 Main Street\\", \\"city\\": \\"San Francisco\\", \\"state\\": \\"CA\\", \\"zipCode\\": \\"94105\\" } } return obj obj = build_object() print(obj)"},{"prompt":"Write a python program to extract the title of a given website https://www.wikipedia.org","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.wikipedia.org' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') title = soup.find('title').text print(title) # Output: Wikipedia"},{"prompt":"Create a script in Python to classify a given array of integers into even and odd numbers. [1, 2, 3, 4, 5]","completion":"def classify(arr): even = [] odd = [] for x in arr: if x % 2 == 0: even.append(x) else: odd.append(x) return even, odd even, odd = classify([1, 2, 3, 4, 5]) print(\\"Even numbers: \\", even) print(\\"Odd numbers: \\", odd)"},{"prompt":"Create a list comprehension in Python that takes a list of numbers and squares each number in the list. [1, 2, 3, 4, 5]","completion":"[x**2 for x in [1, 2, 3, 4, 5]]"},{"prompt":"Create a Python script to return the average of the given list of numbers. [10, 15, 20, 25]","completion":"def average(numbers): total = 0 for num in numbers: total += num return total / len(numbers) average([10, 15, 20, 25])"},{"prompt":"Create a machine learning model in Python to detect malicious URLs. Not applicable","completion":"import tensorflow as tf from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Conv1D, LSTM, Dense # Create the model model = Sequential() # Add layers model.add(Conv1D(128, 5, activation='relu', input_shape=(20, 1))) model.add(LSTM(128)) model.add(Dense(1, activation='sigmoid')) # Compile the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"},{"prompt":"Model sentiment analysis task as a machine learning problem.","completion":"Create a Python program that can classify movie reviews or other texts as either positive or negative sentiment. The program should utilize a machine learning model, such as a recurrent neural network with a word-embedding layer, or a logistic regression with a bag-of-words vectorizer to classify the text. The model should be trained on a labeled dataset and be tested for accuracy on a held-out test set."},{"prompt":"Create a program in Python to detect outlier points within an array of data. A numpy array of numerical data \`[6.2, 11.9, 5.7, 7.3, 2.5, 8.4, 14.0, 9.2, 7.4, 11.6]\`","completion":"import numpy as np def detect_outlier(data): # Calculate the median and the inter-quartile range q75, q25 = np.percentile(data, [75 ,25]) iqr = q75 - q25 # Calculate the upper and lower bound lower_bound = q25 - (iqr * 1.5) upper_bound = q75 + (iqr * 1.5) # Calculate outlier points outlier_points = [] for element in data: if element < lower_bound or element > upper_bound: outlier_points.append(element) return outlier_points # Input array data = np.array([-6.2, 11.9, 5.7, 7.3, 2.5, 8.4, 14.0, 9.2, 7.4, 11.6]) # Call function outliers = detect_outlier(data) # Print outliers print(outliers) # Output: # [-6.2, 14.0]"},{"prompt":"Utilize the Python inbuilt module to print the calendar for the given month. Month: 5 Year: 2021","completion":"# import the module import calendar # print the calendar print(calendar.month(2021, 5))"},{"prompt":"Develop a program in Python that reverses a given string. Hello World!","completion":"def reverse_string(string): reversed_string = string[::-1] return reversed_string reversed_string = reverse_string(\\"Hello World!\\") print(reversed_string)"},{"prompt":"Create a Python lambda expression that takes one argument, word, and converts all uppercase letters in the given word to lowercase. Word: CHANGE","completion":"change = lambda word: word.lower() print(change(\\"CHANGE\\"))"},{"prompt":"Design a Python program that takes a list of numbers and prints out the number with the highest value. [1, 2, 300, 4, 5]","completion":"def find_max(nums): max_num = nums[0] for num in nums: if num > max_num: max_num = num return max_num nums = [1, 2, 300, 4, 5] print(find_max(nums)) # 300"},{"prompt":"Create a Python program that takes in a string and returns a string with the characters in reversed order. String: Hello World","completion":"def reverse(str): return str[::-1]"},{"prompt":"Edit an existing Python script to search for and delete duplicated words in a string. my_string = 'this this string contains contains duplicate duplicate words words'","completion":"my_string = 'this string contains duplicate words' my_string = my_string.split() res = [] for i in my_string: if i not in res: res.append(i) my_string = ' '.join(res) print(my_string)"},{"prompt":"Create a Python program to classify documents using a Bag of Words model. Not applicable","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB #read data df = pd.read_csv('data.csv') X_train, y_train = df.text, df.label #build bag-of-words vectorizer = CountVectorizer() X_train_vectorized = vectorizer.fit_transform(X_train) # Train the model model = MultinomialNB() model.fit(X_train_vectorized, y_train) #test the model sample_text = \\"This is an example document for testing Bag of Words model\\" sample_vectorized = vectorizer.transform([sample_text]) prediction = model.predict(sample_vectorized) print(\\"Prediction:\\",prediction[0])"},{"prompt":"Develop a Python program to detect if an entered number is even or odd. The entered number is 344","completion":"even_or_odd = int(input(\\"Please enter a number: \\")) if even_or_odd % 2 == 0: print(\\"The number is Even.\\") else: print(\\"The number is Odd.\\")"},{"prompt":"Write Python code to maximize this objective function. def obj_func(x): return x**2 4*x + 3","completion":"def maximize_obj_func(x): return 2*x - 4 x_opt = maximize_obj_func(x) opt_val = obj_func(x_opt) print(\\"Optimum value of objective function: \\", opt_val)"},{"prompt":"Create an algorithm to detect duplicate objects in an array.","completion":"# Python program to detect duplicate objects in an array def detectDuplicates(arr): seen = set() for item in arr: if item in seen: return True else: seen.add(item) return False"},{"prompt":"Generate a function in Python to delete a key from a dictionary. dictionary = {'a':1,'b':2,'c':3} key = 'b'","completion":"def delete_key(dictionary, key): if key in dictionary: del dictionary[key] else: print('Error! Key not found') delete_key(dictionary, key) print(dictionary)"},{"prompt":"Write a Python program that takes a date in the format YYYYMMDD and returns a string with the day of the week for that date.","completion":"from datetime import datetime def day_of_week(date): # convert string to date object date_obj = datetime.strptime(date, \\"%Y-%m-%d\\") # retrieve weekday day = date_obj.strftime(\\"%A\\") return day"},{"prompt":"Write a Python program to generate a random password. The password must contain at least 8 characters including upper and lower case letters, numbers, and symbols. Not applicable","completion":"import random import string def generate_password(): password_length = 8 password = ''.join(random.choice( string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation) for _ in range(password_length)) return password print(generate_password())"},{"prompt":"Create a generator function using Python to generate random numbers from 1 to 10.","completion":"import random def random_number_generator(): return random.randint(1, 10) for _ in range (10): print(random_number_generator())"},{"prompt":"Create a program to concatenate two strings in Python. string1 = Hello string2 = World","completion":"string1 = \\"Hello\\" string2 = \\"World\\" concatenatedString = string1 + string2 print(concatenatedString) # \\"HelloWorld\\""},{"prompt":"Construct a python code to convert a number in base 10 to binary No input.","completion":"def convert_base10_to_binary(num): binary_num = [] while (num > 0): binary_num.append(num % 2) num //= 2 binary_num.reverse() return binary_num"},{"prompt":"Create a function in Python to calculate the area of a triangle using its three sides. Side One: 3 Side Two: 4 Side Three: 5","completion":"def triangleArea(a, b, c): # Calculate the semi-perimeter of the triangle s = (a + b + c) / 2 # Calculate the area using Heron's formula area = (s*(s - a)*(s - b)*(s - c))**0.5 return area triangleArea(3,4,5) # 6.0"},{"prompt":"Generate a function in Python to convert a given integer to its binary representation. 17","completion":"def convertToBinary(n): if n > 1: convertToBinary(n//2) print(n % 2,end = '') # driver code num = 17 convertToBinary(num)"},{"prompt":"Create an algorithm in Python which prints out the number of even numbers in an array. [1, 2, 3, 4, 5, 6, 7, 8]","completion":"def count_even(arr): evenNumbers=0 for x in arr: if x % 2 == 0: evenNumbers += 1 return evenNumbers print(count_even([1, 2, 3, 4, 5, 6, 7, 8]))"},{"prompt":"Create an algorithm in Python that takes an array of strings and sorts them in alphabetical order. ['Jan', 'June', 'Raju', 'April']","completion":"def alphabeticalSort(arr): arr.sort() return arr result = alphabeticalSort(['Jan', 'June', 'Raju', 'April']) print(result)"},{"prompt":"Predict the output of the following Python program. my_list = [1,2,3,4,5] x = 0 for i in my_list: x += i print(x)","completion":"15"},{"prompt":"Construct a machine learning model in Python to classify cancer tumor imaging data into benign or malignant.","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.svm import SVC # Load the data data = pd.read_csv('cancer_data.csv') # Define features and targets X = data.drop('diagnosis', axis=1).values y = data.diagnosis.values # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Standardize the data scaler = StandardScaler() X_train_scaled = scaler.fit_transform(X_train) X_test_scaled = scaler.transform(X_test) # Create and train the SVM model svc = SVC() svc.fit(X_train_scaled, y_train) # Evaluate the model accuracy = svc.score(X_test_scaled, y_test) print(\\"The model accuracy is {}%\\".format(round(accuracy * 100, 2)))"},{"prompt":"Write a Python program to create an encryption algorithm for a given string. This is a secret string","completion":"def encodeString(s): encodedString = \\"\\" for c in s: encodedChar = chr(ord(c) + 1) encodedString += encodedChar return encodedString def decodeString(s): decodedString = \\"\\" for c in s: decodedChar = chr(ord(c) - 1) decodedString += decodedChar return decodedString encodeString = encodeString(\\"This is a secret string\\") print(encodeString) decodeString = decodeString(encodeString) print(decodeString)"},{"prompt":"Create a Python program to convert a given list of strings to float values str_list = ['45', '87.5', '90.9', '24']","completion":"def convertStringToFloat(str_list): floats = [] for s in str_list: floats.append(float(s)) return floats convertStringToFloat(str_list) // Returns [45.0, 87.5, 90.9, 24.0]"},{"prompt":"Write a Python program to detect and remove the first vowel from a given string. string = this is a test string","completion":"def removeVowel(string): # define a set of vowels vowels = {'a', 'e', 'i', 'o', 'u'} # loop through each character of the string for i in range(len(string)): # check if the character is a vowel if string[i] in vowels: # return the modified string return string[:i] + string[i + 1:] return string string = \\"this is a test string\\" print(removeVowel(string)) # Output: thrs is a test strng"},{"prompt":"Create a Python program to prompt the user for a number (x) and then print the list of its factors in increasing order. Not applicable","completion":"x = int(input(\\"Enter a number: \\")) # Initialize list factors = [] # Find the factors for i in range(1, x + 1): if x % i == 0: factors.append(i) # Sort factors factors.sort() # Print the factors print(\\"The factors of\\", x, \\"are:\\") for factor in factors: print(factor)"},{"prompt":"Write a function in Python to return the median of a list of given elements. list_values = [5, 1, 4, 9, 2]","completion":"def getMedian(list_values): # sort the list list_values.sort() # get the length of the list list_len = len(list_values) # check if list is even or odd if list_len % 2 == 0: # if even, get the two middle elements # and calculate the average idx = int((list_len / 2) - 1) median = (list_values[idx] + list_values[idx + 1]) / 2 else: # if odd, get the middle element idx = int(list_len / 2) median = list_values[idx] return median"},{"prompt":"Given a list of strings, write a Python code snippet to print all strings that begin with a letter 'a'. [apple, banana, orange, avocado]","completion":"for item in [\\"apple\\", \\"banana\\", \\"orange\\", \\"avocado\\"]: if item.startswith('a'): print(item) # Output: apple avocado"},{"prompt":"Create a Python program to find the most frequently occuring element [1, 4, 2, 3, 4, 1, 2, 3, 2, 3]","completion":"def most_frequent_element(input_list): count_dict = { 'element': None, 'count': 0 } for item in input_list: if input_list.count(item) > count_dict['count']: count_dict['element'] = item count_dict['count'] = input_list.count(item) return count_dict input_list = [1, 4, 2, 3, 4, 1, 2, 3, 2, 3] result = most_frequent_element(input_list) print(result)"},{"prompt":"The given code contains several functions for reconciling gene trees to a species tree. To reconcile a gene tree to a MULtree, use the mulRecon function. This function takes in a MULtree and a dictionary of gene trees, and returns the minimum score and the corresponding mapping for each gene tree. To collapse groups in the gene trees before reconciling, use the collapseGroups function. This function takes in the MULtree, a dictionary of gene trees, and some other parameters, and returns a dictionary of collapsed groups for each gene tree. Finally, the reconLCA function is the main algorithmic function for LCA reconciliation mapping. It takes in a gene tree, a species tree, and some other parameters, and returns the minimum score and the corresponding mapping.","completion":"#!/usr/bin/python # # The main algorithmic functions for MUL-reconciliation mapping. # Gregg Thomas # Fall 2015, Combo algorithm implemented Spring 2016 # import os, itertools, recontree as RT, mul_tree as MT, reconcore as RC, gene_tree as GT, global_vars as globs import pickle # def reconLCA(lca_ginfo, sinfo, lca_maps, retmap=False): # The LCA reconciliation mapping algorithm. internal_nodes = RT.sortNodes(lca_ginfo); # Sort the internal nodes for a post order traversal. score = 0; if retmap: dups, losses = {}, {}; for g in lca_ginfo: dups[g], losses[g] = 0, 0; for g in internal_nodes: g = \\"<\\" + str(g) + \\">\\"; d1, d2 = RT.getDesc(g, lca_ginfo); is_dup = 0; g_clade = RT.getClade(g, lca_ginfo); clade_maps = []; for g_tip in g_clade: clade_maps.append(lca_maps[g_tip][0]); # Get the species in the clade of the current node. Then get all # the possible maps from those species. lca_maps[g].append(RT.LCA(clade_maps,sinfo)[0]); if lca_maps[g][0] == lca_maps[d1][0] or lca_maps[g][0] == lca_maps[d2][0]: if retmap: dups[g] += 1; score += 1; is_dup = 1; #Now, if the map of g is identical to one of its descendants, it is a duplication node. cur_depth = len(RT.nodeDepth(lca_maps[g][0],sinfo)) if lca_ginfo[g][2] == 'root': if retmap: losses[g] += cur_depth; score += cur_depth; # The number of losses at the root of the gene tree is equal to the depth of its map. d1_depth = len(RT.nodeDepth(lca_maps[d1][0],sinfo)); d1_loss = (d1_depth - cur_depth - 1) + is_dup; score += d1_loss if retmap: losses[d1] += d1_loss; d2_depth = len(RT.nodeDepth(lca_maps[d2][0],sinfo)) d2_loss = (d2_depth - cur_depth - 1) + is_dup; score += d2_loss; if retmap: losses[d2] += d2_loss; # Counting losses for each of the descendents of the current node. if retmap: return lca_maps, dups, losses; return score; # Return the total number of duplication nodes. # def getSis(gs_node, check_node, check_clade, gs_dict): # Gets the hybrid and copy sister species. d1, d2 = RT.getDesc(gs_node, gs_dict); if d1 == check_node: sis_node = d2; elif d2 == check_node: sis_node = d1; sis_clade = RT.getClade(sis_node, gs_dict); if any(c in check_clade for c in sis_clade): return []; else: return sis_clade; # def collapseGroups(mul_input, gene_trees_filtered_cg, spec_type_cg, v, pickle_dir, nmt): # The collapseGroups function goes through all gene tree-MUL-tree combos to collapse the groups. mul_num, mul_tree = mul_input; if v == 1: print(\\"# \\" + RC.getDateTime() + \\" --> Collapsing groups for MUL-tree # \\" + str(mul_num) + \\" / \\" + str(nmt)); if mul_num == 0: return mul_num, []; gt_groups = {}; mt, minfo, hybrid_clade, hybrid_node, copy_node = mul_tree[0], mul_tree[1], mul_tree[2], mul_tree[3], mul_tree[4]; for gene_num in gene_trees_filtered_cg: gene_tree = gene_trees_filtered_cg[gene_num]; if len(gene_tree) == 1: continue; # If the gene tree was previously filtered, the list will only contain the filter message and it should be skipped here. gt,ginfo = gene_tree; internal_nodes = RT.sortNodes(ginfo); # Sort the internal nodes for a post order traversal. singles, groups = {}, {}; for g in ginfo: if ginfo[g][2] == 'tip': if g[g.rfind(\\"_\\")+1:] in hybrid_clade: cur_anc = ginfo[g][1]; anc_clade = RT.getClade(cur_anc, ginfo); anc_clade.remove(g); singles[g] = anc_clade; # First, all hybrid species nodes in the gene tree are added to the singles list. GETS SINGLETONS for g in internal_nodes: g = \\"<\\" + str(g) + \\">\\"; # Next, for any non-tip node, we find out if the species that define it can be grouped d1, d2 = RT.getDesc(g, ginfo); d1_clade = RT.getClade(d1, ginfo); d1_spec_clade = [spec[spec.rfind(\\"_\\")+1:] for spec in d1_clade]; d2_clade = RT.getClade(d2,ginfo); d2_spec_clade = [spec[spec.rfind(\\"_\\")+1:] for spec in d2_clade]; # The clades for the descendants of both nodes are retrieved, and their corresponding # species are stored. if all(s in hybrid_clade for s in d1_spec_clade) and all(s in hybrid_clade for s in d2_spec_clade): # If the descendants from both nodes are all hybrid clade species, then we may be able to group them. if not any(s in d2_spec_clade for s in d1_spec_clade): # However, only if there is not more than one copy of a species among the clades can they be grouped. cur_clade = RT.getClade(g, ginfo); cur_anc = ginfo[g][1]; anc_clade = RT.getClade(cur_anc, ginfo); anc_clade = [spec for spec in anc_clade if spec not in cur_clade]; cur_nodes = RT.getCladeNode(g, ginfo); for node in cur_nodes: if node in groups: del groups[node]; groups[g] = [cur_clade, anc_clade]; CHECKS GROUPINGS for group in groups: for g in groups[group][0]: if g in singles: del singles[g]; # Removes any singles that are in a group. final_groups = []; for node in groups: final_groups.append(groups[node]); for single in singles: final_groups.append([[single], singles[single]]); # Restructures the final groups and adds singles. sisters = {}; if spec_type_cg == 's': mul_hybrid_node = [n for n in minfo if set(RT.getClade(n, minfo)) == set(hybrid_clade)][0]; copy_clade = [c + \\"*\\" for c in hybrid_clade]; mul_copy_node = [n for n in minfo if set(RT.getClade(n, minfo)) == set(copy_clade)][0]; # The copy clade is defined. elif spec_type_cg == 'm': copy_clade = RT.getClade(copy_node, minfo); mul_hybrid_node = hybrid_node; mul_copy_node = copy_node; hybrid_anc = minfo[mul_hybrid_node][1]; copy_anc = minfo[mul_copy_node][1]; sisters[''] = getSis(hybrid_anc, mul_hybrid_node, copy_clade, minfo); sisters['*'] = getSis(copy_anc, mul_copy_node, hybrid_clade, minfo); # These lines get any sister species from the hybrid and copy clades in the MUL-tree and that # clade's corresponding map. If there are no sisters, it stores an empty list. groups, fixed_groups = [], []; for group in final_groups: group_sis = [spec[spec.rfind(\\"_\\")+1:] for spec in group[1]]; if group_sis == []: groups.append(group[0]); continue; if all(spec in sisters[''] for spec in group_sis): fixed_groups.append([group[0],'']); elif all(spec in sisters['*'] for spec in group_sis): fixed_groups.append([group[0],'*']); else: groups.append(group[0]); # This checks the sister species of all the groups for the gene tree. If all the sister species # of a group are also in the sister species of the hybrid or copy clade in the MUL-tree, then we # can fix the mapping of that node. FINDS FIXED SISTER GROUPS gt_groups[gene_num] = [groups, fixed_groups]; # Adding the groups and fixed groups to the current gt_groups. groupoutfile = os.path.join(pickle_dir, str(mul_num) + \\"_groups.pickle\\"); pickle.dump(gt_groups, open(groupoutfile, \\"wb\\")); del groups, fixed_groups, final_groups, gene_trees_filtered_cg, gt_groups; # def mulRecon(mul_input, gene_trees, v, pickle_dir, nmt, retmap=False): # The basis of the MUL-reconciliation algorithm is that there are now nodes that # have more than one possible map. We try all combinations of mappings for these # nodes and find which combination(s) results in the most parsimonious mutation score # (# duplication + # losses). # # A few prelminary steps are taken to ensure the quickest mapping groups: # 1. Identify whether the hybrid or copy clade in the MUL-tree have sister groups. If so, we can use # them to fix similar nodes in the gene tree. # 2. Find nodes that contain only one or zero copies of the hybrid node species and species from one # of the sister groups. Fix the mappings of these nodes. # 3. Any other nodes that contain only one or zero copies of the hybrid node species can be grouped # and should be mapped consistently, though we will still have to try both maps. # 4. Remaining single hybrid nodes must be tried with both maps. # # Once these steps are done (in the collapseGroups function), a list of node groups is obtained, for # which we generate every combination of map and try to reconcile to the MUL-tree. A score is obtained # for each combination and the minimum score is kept as the correct map. mul_num, mul_tree = mul_input #main_output, det_output, min_num, min_score, min_maps, multiple_maps = {}, [], '', 9999999, {}, 0; # mulpicklefile = os.path.join(pickle_dir, str(mul_num) + \\"_tree.pickle\\"); # mul_tree = pickle.load(open(mulpicklefile, \\"rb\\")); if v == 1: print(\\"# \\" + RC.getDateTime() + \\" --> Reconciling to MUL-tree # \\" + str(mul_num) + \\" / \\" + str(nmt)); min_maps = {}; total_score = 0; if mul_num != 0: groupfilename = os.path.join(pickle_dir, str(mul_num) + \\"_groups.pickle\\"); cur_groups = pickle.load(open(groupfilename, \\"rb\\")); for gene_num, gene_tree in gene_trees.items(): gt, ginfo = gene_tree; gene_score = 99999; min_maps[gene_num] = []; if mul_num == 0: sinfo = mul_tree[1]; init_maps = {}; for g in ginfo: if ginfo[g][2] == 'tip': speclabel = g[g.rfind(\\"_\\")+1:]; init_maps[g] = [speclabel]; else: init_maps[g] = []; # Initialize the maps. if retmap: maps, node_dups, node_loss = reconLCA(ginfo, sinfo, init_maps, retmap); num_dups = sum(node_dups.values()); num_loss = sum(node_loss.values()); gene_score = num_dups + num_loss; min_maps[gene_num].append([gene_score, num_dups, num_loss, maps, node_dups, node_loss]); else: gene_score = reconLCA(ginfo, sinfo, init_maps); total_score += gene_score; # Some counting. else: mt, minfo, hybrid_clade, hybrid_node, copy_node, = mul_tree[0], mul_tree[1], mul_tree[2], mul_tree[3], mul_tree[4]; # Aggregate variables for the current GENE tree. gt_groups, gt_fixed = cur_groups[gene_num][0], cur_groups[gene_num][1]; num_groups = len(gt_groups); # Retrieve gene tree info and collapsed groups for this gene tree-MUL-tree combo for combo in itertools.product(['','*'], repeat=num_groups): # We get all combinations of mappings for each node group. This is the time constraining step. group_map = []; for i in range(len(combo)): for node in gt_groups[i]: group_map.append(node + combo[i]); # This builds the current map for each group. for fixed in gt_fixed: for node in fixed[0]: group_map.append(node + fixed[1]); # This adds the fixed maps onto the current combination of group mappings. # Now we do LCA mapping for the current combination of maps for the hybrid clade species. maps = {}; for g in ginfo: if ginfo[g][2] == 'tip': speclabel = g[g.rfind(\\"_\\")+1:]; if g in group_map: maps[g] = [speclabel]; # If the node is in a hybrid clade, use the map in the current combination. elif g + \\"*\\" in group_map: maps[g] = [speclabel + \\"*\\"]; else: maps[g] = [speclabel]; # Otherwise, the map is just the species label. else: maps[g] = []; # And if the node is not a tip, the map is empty. if retmap: maps, node_dups, node_loss = reconLCA(ginfo, minfo, maps, retmap); num_dups = sum(node_dups.values()); num_loss = sum(node_loss.values()); cur_score = num_dups + num_loss; if cur_score <= gene_score: if cur_score < gene_score: gene_score = cur_score; min_maps[gene_num] = []; min_maps[gene_num].append([gene_score, num_dups, num_loss, maps, node_dups, node_loss]) else: cur_score = reconLCA(ginfo, minfo, maps); if cur_score < gene_score: gene_score = cur_score; # Once the current maps have been initialized, we can simply call the normal LCA mapping algorithm End mapping of one gene tree. total_score += gene_score; End mapping all gene trees. if retmap: return min_maps; else: return mul_num, total_score; # # # A couple ways to get the map combos: # combo_ind = list(itertools.product(['','*'], repeat=len(node_ind))); # if v == -2: # print \\"num combos\\", len(combo_ind); # combos = list(itertools.product(['','*'], repeat=len(node_ind))); # Old loading: # if v == 0 and numiters > 100: # numbars, donepercent = RC.loadingBar(itercount, numiters, donepercent, numbars); # itercount = itercount + 1; # # Only the loading bar displays when the program is running if -v is set to 0."},{"prompt":"Create a Python program to generate random strings using a given character set. Character Set: 'abc' String Length: 5","completion":"import random def generate_random_string(length, char_set): random_string = '' for _ in range(length): random_string += random.choice(char_set) return random_string char_set = 'abc' length = 5 print(generate_random_string(length, char_set))"},{"prompt":"Write a Python program to generate a random string containing lowercase and uppercase letters with a length of 8 characters.","completion":"import random def generate_string(length): letters = string.ascii_letters return ''.join(random.choice(letters) for i in range(length)) print(generate_string(8))"},{"prompt":"Write a python script to generate a random 10 questions mathematics test. Not applicable","completion":"import random # list of operations used for generating questions OPERATIONS = ['+', '-', '*', '/'] # function to generate a random number between 1 and 10 def generate_number(): return random.randint(1, 10) # function to generate a random two-operand mathematics question def generate_question(): num1 = generate_number() num2 = generate_number() op = random.choice(OPERATIONS) quest = f'{num1} {op} {num2} = ' return quest # function to generate 10 random mathematics questions def generate_test(): questions = [] for _ in range(10): questions.append(generate_question()) return questions # generating a 10 questions mathematics test test = generate_test() for question in test: print(question)"},{"prompt":"Convert a Bubble Sort algorithm in C++ to Python.","completion":"def bubble_sort(nums): n = len(nums) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater than the next element if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j]"},{"prompt":"Design a Python class that can store employee records, including name, job title, and salary.","completion":"class Employee: def __init__(self, name, job_title, salary): self.name = name self.job_title = job_title self.salary = salary def get_name(self): return self.name def get_job_title(self): return self.job_title def get_salary(self): return self.salary"},{"prompt":"Generate an array with all the prime numbers from 1 to 500 using python.","completion":"def generate_primes(n): prime_list = [] for n in range(1, n + 1): for i in range(2,n): if n % i == 0: break else: prime_list.append(n) return prime_list prime_list = generate_primes(500)"},{"prompt":"Create a Python program that can generate a wide variety of random passwords. Not applicable","completion":"import random import string # password length length = int(input(\\"Enter password length: \\")) # alphabets & numbers alphaNum = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' # generate password password = \\"\\".join([random.choice(alphaNum) for _ in range(length)]) print(\\"Password: \\", password)"},{"prompt":"Generate an algorithm in Python to detect whether an input is an anagram of a given string. input = 'cat'","completion":"\\"\\"\\" Generate an algorithm in Python to detect whether an input is an anagram of a given string. \\"\\"\\" def is_anagram(input_string, original_string): # Sort both the strings input_string = sorted(input_string) original_string = sorted(original_string) # Compare each character for i in range(len(input_string)): if input_string[i] != original_string[i]: return False return True if __name__ == '__main__': input_string = 'cat' original_string = 'tac' print(is_anagram(input_string, original_string))"},{"prompt":"Write a Python script to generate a list of all possible 2D Point objects with coordinates between 1 and 10.","completion":"points = [] for x in range(1, 11): for y in range(1, 11): points.append([x, y]) print(points)"},{"prompt":"Compose a Python program to find all occurrences of the specified substring in given string string = 'Python exercises, PHP exercises, C# exercises' substring = 'exercises'","completion":"def find_all_occurrences(string, substring): i=-1 indices = [] while True: i = string.find(substring, i + 1) if i == -1: break indices.append(i) return indices string = 'Python exercises, PHP exercises, C# exercises' substring = 'exercises' print(find_all_occurrences(string, substring))"},{"prompt":"Create a variable in Python to store the length of a list. example_list = [1, 2, 3, 4]","completion":"list_length = len(example_list)"},{"prompt":"Generate a Python program to print all odd numbers from an array of integers. [3, 5, 7, 10, 15]","completion":"def printOddNumbers(array): for number in array: if number % 2 != 0: print(number) array = [3, 5, 7, 10, 15] printOddNumbers(array)"},{"prompt":"Describe the given Python code snippet. def count_ones(n): count = 0 while n > 0: if n & 1 == 1: count += 1 n = n >> 1 return cou","completion":"The given code snippet defines a function called 'count_ones' which takes a single integer argument 'n'. It then initializes a count variable which is used to keep track of the number of ones in binary representation of the given argument. It then executes a loop which runs until all bits of the argument are processed in binary representation. It uses bitwise & operation on the argument with 1 and then compares the result with 1 to recognize whether the bit is 1 or 0. If it is 1, it increments the count by 1, and if it is 0, it does nothing. Finally, it shifts the argument to the right by 1 bit before looping back and processes the next bit."},{"prompt":"Create a game in Python using the PyGame library.","completion":"import pygame pygame.init() screen = pygame.display.set_mode((800,600)) pygame.display.set_caption(\\"My Game\\") run = True while run: for event in pygame.event.get(): if event.type == pygame.QUIT: run = False pygame.display.update()"},{"prompt":"Edit the following Python code to print Hello World in a loop 10 times. for i in range(5): print(Hello World)","completion":"for i in range(10): print(\\"Hello World\\")"},{"prompt":"Create a web crawler in Python that can crawl a website and extract all the internal and external links. Home page URL","completion":"import requests from bs4 import BeautifulSoup queue, visited = [], [] def crawl(url): # Queue and skip if already in queue or visited if url not in queue or url not in visited: queue.append(url) # Remove the first element from queue url = queue.pop(0) # Do not re-visit the already visited links if url in visited: continue # Get data from the URL r = requests.get(url) # Parse the HTML soup = BeautifulSoup(r.text, 'html.parser') # Find and append all links on the page for link in soup.find_all('a', href=True): queue.append(link.get('href')) # Append the URL to visited visited.append(url) # Call the function recursively for link in queue: crawl(link) print(visited)"},{"prompt":"Given two numbers, find the greatest common divisor using Euclidean algorithm. Number1: 54 Number2: 24","completion":"# Python code to find GCD of two numbers # using Euclidean algorithm # Function to return gcd of a and b def gcd(a,b): # Everything divides 0 if (a == 0 or b == 0): return 0; # base case if (a == b): return a # a is greater if (a > b): return gcd(a-b, b) return gcd(a, b-a) a = 54 b = 24 # printing the gcd print('GCD of %d and %d is ' %(a, b), gcd(a,b))"},{"prompt":"Add an input prompt in a Python program that asks for your name and prints it back.","completion":"name = input(\\"What is your name? \\") print(\\"Your name is: \\" + name)"},{"prompt":"Generate a python function to convert an array to a dictionary ['a', 1, 'b', 2, 'c', 3]","completion":"def array_to_dict(lst): output = {} for i in range(0, len(lst), 2): output[lst[i]] = lst[i+1] return output # main program my_list = ['a', 1, 'b', 2, 'c', 3] result = array_to_dict(my_list) print(result)"},{"prompt":"Edit the following Python code to find all records in the table where the age is greater than 18. data = cursor.execute(fSELECT * FROM users WHERE age > {age})","completion":"data = cursor.execute(f\\"SELECT * FROM users WHERE age > 18\\")"},{"prompt":"Create a simple game in Python with two players.","completion":"import random import time def get_player_name(): return input(\\"What is your name? \\") def get_player_choice(): choice = input(\\"nRock, Paper or Scissors (R/P/S)? \\").upper() if choice not in [\\"R\\", \\"P\\", \\"S\\"]: print(\\"nNot an valid answer. try again\\") get_player_choice() return choice def main(): # get player info player_1_name = get_player_name() player_2_name = get_player_name() print(f\\"nWelcome {player_1_name} and {player_2_name}! Let's play Rock, Paper, Scissors!!\\") time.sleep(3) # get player options player_1_choice = get_player_choice() player_2_choice = get_player_choice() # operation print(f\\"n{player_1_name} puts {player_1_choice}.\\") print(f\\"n{player_2_name} puts {player_2_choice}\\") time.sleep(3) print(\\"nShoot!\\") time.sleep(2) print(\\"nNow let's see!\\") time.sleep(3) if player_1_choice == player_2_choice: print(\\"nIt's a tie!\\") elif player_1_choice == 'R' and player_2_choice == 'S': print(f\\"n{player_1_name} wins!\\") elif player_1_choice == 'S' and player_2_choice == 'R': print(f\\"n{player_2_name} wins!\\") elif player_1_choice == 'P' and player_2_choice == 'R': print(f\\"n{player_1_name} wins!\\") elif player_1_choice == 'R' and player_2_choice == 'P': print(f\\"n{player_2_name} wins!\\") else: print(f\\"n{player_2_name} wins!\\") if __name__ == \\"__main__\\": main()"},{"prompt":"Develop an algorithm in Python for reversing words in a string, making sure to avoid memory errors. Not applicable","completion":"def reverse_words(s): # Split the string into an array words = s.split() # Reverse words array words.reverse() # Join the reversed words array to # create the reversed string return \\" \\".join(words)"},{"prompt":"Write a Python program to pull data from a MySQL database and visualize it. Database name: my_db Table name: my_table Description: my_table consists of six columns: id (int, primary key), name (VARCHAR(255)), occupation (VARCHAR(255)), age (int), salary (float), and dob (date).","completion":"import mysql.connector import pandas as pd import matplotlib.pyplot as plt # Connect to database mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"username\\", password=\\"password\\", database=\\"my_db\\" ) # Create cursor mycursor = mydb.cursor() # Pull data from table sql = \\"SELECT * from my_table\\" mycursor.execute(sql) myresult = mycursor.fetchall() # Convert into DataFrame df = pd.DataFrame(myresult,columns=['id','name','occupation','age','salary','dob']) # Visualize plt.scatter(df['age'], df['salary']) plt.xlabel('Age') plt.ylabel('Salary') plt.title('Age VS Salary') plt.show()"},{"prompt":"Which python library can be used to access the Twitter API?","completion":"The most popular Python library to access the Twitter API is the \\"tweepy\\" library. It provides a convenient way to access the Twitter API and provides features such as searching, streaming, and user authentication."},{"prompt":"Design a Python program to find if a given number is Armstrong or not. A number is Armstrong if it is equal to the sum of its digits raised to the power of the number of digits.","completion":"def isArmstrong(num): # To store the sum of the power of each digit sum_digits = 0 # Find the number of digits digits = len(str(num)) # Go through each digit temp = num while temp > 0: digit = temp % 10 # Raise it to the power of the number of digits sum_digits += digit ** digits temp //= 10 # Check if sum of the digits raised to the power is # equal to the original number return num == sum_digits"},{"prompt":"Write a python program that takes in 2 parameters, a list and a number, and returns a dictionary with the words in the list and the number of characters in each word as its value. ['the', 'cat', 'in', 'the', 'hat']","completion":"my_list = ['the', 'cat', 'in', 'the', 'hat'] def get_word_length_dict(my_list): my_dict = {} for word in my_list: my_dict[word] = len(word) return my_dict print(get_word_length_dict(my_list))"},{"prompt":"Create an AI anomaly detection tool in Python","completion":"import numpy as np import matplotlib.pyplot as plt from sklearn.covariance import EllipticEnvelope def outlier_detection(x): '''Detect outliers using EllipticEnvelope''' clf = EllipticEnvelope(contamination=0.45) # Set contamination param clf.fit(x) # Fit algorithm pred = clf.predict(x) # Predict labels outliers = x[pred == -1] # outliers return outliers"},{"prompt":"Write a Python program that randomly generates a list of 10 numbers in a range from 0 to 100. Not applicable","completion":"import random number_list = [random.randint(0, 100) for n in range(10)] print(number_list)"},{"prompt":"Create a function called divide_numbers() in Python to divide two numbers and return the result.","completion":"def divide_numbers(a, b): return a / b"},{"prompt":"Create a python function to take two integers input and calculate the sum of both integers. int1 = 7 int2 = 3","completion":"def add(int1,int2): sum = int1 + int2 return sum"},{"prompt":"Write a Python program that takes a list of strings as input and prints out all the strings in sorted order.","completion":"def sort_list_of_strings(list_of_strings): list_of_strings.sort() for string in list_of_strings: print(string)"},{"prompt":"Convert the following C++ code to Python. int foo(int a, int b, int c) { int result = a + b + c; return result; }","completion":"def foo(a, b, c): result = a + b + c return result"},{"prompt":"Using Python, create a command line program to print out the frequency of a given string in a given text. text = 'This is an example string.' string = 'example'","completion":"def countSubstring(text, string): count = 0 for i in range(len(text)): if text[i:i+len(string)] == string: count += 1 return count print(countSubstring(text, string))"},{"prompt":"Create a program in Python that takes in 3 parameters and sends an email with the parameters. param1 = Hello param2 = Welcome param3 = to the world of programming","completion":"import smtplib #set up the SMTP server s=smtplib.SMTP(host='your_host_address_here',port=your_port_here) s.starttls() s.login(user='your_username_here',password='your_password_here') #message to be sent message = \\"Subject: Greetingsnn\\"+param1+\\"n\\"+param2+\\"n\\"+param3 #sending the mail s.sendmail(user='your_username_here',recipients=your_recipients_mail_id_here,message=message) #terminating the session s.quit()"},{"prompt":"Generate a code in python using the tkinter library to create a graphical user interface for a program.","completion":"# Importing essential libraries from tkinter import * # Create the root window root = Tk() # Defining the title of the window root.title(\\"GUI created using Tkinter\\") # Defining the size of the window root.geometry(\\"500x500\\") # Create the widgets label_1 = Label(root, text = \\"My First Program needs GUI\\") # Position the widgets label_1.pack() # Run the program root.mainloop()"},{"prompt":"Create a Python program to generate a list from two given lists using a list comprehension. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"list1 = [1, 2, 3] list2 = [4, 5, 6] result = [x + y for x in list1 for y in list2] print(result)"},{"prompt":"Create a Python program to print all the unique words in a book. The program should take the name of the book as an input and then extract the words from the text and print only the unique words. Sample book text: The sky was the color of a brilliant blue. The sun shone down on the ground as happy birds chirped in the trees.","completion":"import string def get_unique_words(book_text): words = book_text.split() # remove punctuations words = [word.strip(string.punctuation) for word in words] # remove empty strings words = [word for word in words if word != ''] # get unique words unique_words = set(words) # print unique words for word in unique_words: print(word) book_text = 'The sky was the color of a brilliant blue. The sun shone down on the ground as happy birds chirped in the trees.' get_unique_words(book_text) # Output The shone trees birds ground of color blue as was brilliant sun happy chirped in sky"},{"prompt":"Create a string formatting function in Python that takes a first name, last name, and age as parameters. firstName John lastName Doe age 35","completion":"def format_name(firstName, lastName, age): return f'{lastName}, {firstName} is {age} years old.' # Usage example print(format_name('John', 'Doe', 35)) # Output: Doe, John is 35 years old."},{"prompt":"Produce a problem solving algorithm in Python to find the number of possible anagrams of a given word.","completion":"def anagrams_count(word): if len(word) <= 1: return 1 else: c = word[0] rem_let = word[1:] ret = anagrams_count(rem_let) for i in range(len(rem_let)): if c == rem_let[i]: continue rem_let_i = rem_let[:i] + rem_let[i+1:] ret += anagrams_count(rem_let_i) return ret"},{"prompt":"Create a machine learning model in Python for predicting house prices. This model should use data from a dataset that includes features such as number of bedrooms, square footage, and location. Not applicable","completion":"import pandas as pd import numpy as np from sklearn import linear_model from sklearn.model_selection import train_test_split # Load the house price data data = pd.read_csv('house_prices_data.csv') # Separate features and labels X = data.iloc[:,0:3].values y = data.iloc[:,3].values # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Create the model model = linear_model.LinearRegression() model.fit(X_train, y_train) # Use the model to make predictions predictions = model.predict(X_test) # Calculate the accuracy of the predictions score = model.score(X_test, y_test) print(score)"},{"prompt":"Write a Python program that parses an XML document and presents the data as an interactive web page. The program should generate HTML from the data in the XML document, and present it in a browser. <?xml version=1.0 encoding=utf8?> <data> <people> <person> <name>John Doe</name> <age>30</age> </person> <person> <name>Jane Smith</name> <age>25</age> </person> </people> </data>","completion":"import webbrowser from bs4 import BeautifulSoup xml_doc = \\"<xml><people><person><name>John Doe</name><age>30</age></person><person><name>Jane Smith</name><age>25</age></person></people></xml>\\" soup = BeautifulSoup(xml_doc, 'xml') html = \\"\\"\\" <html> <head> <title>People</title> </head> <body> <h1>People</h1> <table> <thead> <tr> <th>Name</th> <th>Age</th> </tr> </thead> <tbody> \\"\\"\\" for person in soup.find_all('person'): name = person.find('name').text age = person.find('age').text html += f\\" <tr><td>{name}</td><td>{age}</td></tr>\\" html += \\"\\"\\" </tbody> </table> </body> </html> \\"\\"\\" with open('file.html', 'w') as f: f.write(html) webbrowser.open('file.html')"},{"prompt":"Write a Python script that classifies text using a given model.","completion":"import nltk from nltk.tokenize import word_tokenize from sklearn.externals import joblib text = 'This is some example text' # Tokenize the text tokens = word_tokenize(text) # Load the saved model model = joblib.load('model.pkl') # Generate the preditions predictions = model.predict(tokens) # Print the predictions for prediction in predictions: print (prediction)"},{"prompt":"Write a Python code to perform string operations","completion":"def string_operations(str1): # Capitalize the string str1 = str1.upper() # Reverse the string str1 = str1[::-1] # Split the string in words words = str1.split() # Concatenating string str_concat = ' '.join(words) # Replace string str_replace = str_concat.replace(\\"E\\", \\"*\\") # Sort the words in alphabetical order words = str_replace.split() words = sorted(words) str_sorted = ' '.join(words) return str_sorted"},{"prompt":"Can you write a function in Python to find the maximum number from a given list? List of Numbers: [9, 4, 2, 7, 5]","completion":"def find_max(lst): max_val = lst[0] for num in lst: if num > max_val: max_val = num return max_val list_of_numbers = [9, 4, 2, 7, 5] print(find_max(list_of_numbers))"},{"prompt":"Can you write a code snippet to flatten a 2D array in Python? [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def flatten_2d_array(arr): flattened_arr = [] for row in arr: for item in row: flattened_arr.append(item) return flattened_arr arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] flattened_arr = flatten_2d_array(arr) print(flattened_arr)"},{"prompt":"Create a Python script to capture a range of numbers (as multiples of 100). Start = 20 and End = 400","completion":"# Python code to capture a range of numbers # Multiples of 100 start = 20 end = 400 # printing multiples of 100 in the given range for num in range(start, end + 1): # checking if the current number is multiple of 100 if num % 100 == 0: print(num, end=\\" \\")"},{"prompt":"Create a Python function that takes two numbers and returns the Greatest Common Divisor (GCD) of the two numbers. 14, 18","completion":"def gcd(x, y): while y != 0: x, y = y, x % y return x"},{"prompt":"Write a Python program to sort a list according to user's desired order. sortList = [4, 2, 6, 3, 5]","completion":"def sort_list(lst, order): sorted_list = sorted(lst, reverse = order) return sorted_list"},{"prompt":"Create a Python module to evaluate expressions.","completion":"def evaluate(expression): \\"\\"\\"Evaluates the given expression\\"\\"\\" try: return eval(expression) except TypeError: raise ValueError(\\"The expression must be a valid Python expression\\")"},{"prompt":"Create a web service in Python which accepts a URL as input and prints the HTML of the page. url = www.example.com","completion":"import requests def get_html(url): response = requests.get(url) if response.status_code == 200: return response.text else: return None html = get_html(\\"www.example.com\\") if html: print(html)"},{"prompt":"Construct a Python program that takes a number as an input and prints all its divisors. num = 48","completion":"def find_divisors(num): divisors = [] for i in range(2,num+1): if num % i == 0: divisors.append(i) return divisors num = 48 divisors = find_divisors(num) print(\\"The divisors of {} are: {}\\".format(num, divisors))"},{"prompt":"Construct a program that parses a given string for all of its numbers and returns them as a list in Python. String : This string contains two numbers: 12 and 78","completion":"def get_numbers_list_from_string(string): numbers_list = [] # Split the string by space words = string.split(' ') for i in range(0, len(words)): # Take each word separately # And strip off any punctuations # That might be there # Strip() returns a copy of the string # With both leading and trailing characters removed word = words[i].strip() if(word.isnumeric()): numbers_list.append(int(word)) return numbers_list string = \\"This string contains two numbers: 12 and 78\\" numbers_list = get_numbers_list_from_string(string) print(\\"Numbers list: \\", numbers_list)"},{"prompt":"Write a Python program to generate all pairs of numbers whose sum is equal to a given number.","completion":"def generate_pairs(n): lst = [] for i in range(n+1): for j in range(i+1,n+1): if i + j == n: lst.append((i,j)) return lst"},{"prompt":"Write Python code to generate a report of the total price of the items stored in a list? items = [('Milk', 1.99), ('Eggs', 3.40), ('Cereal', 4.75)]","completion":"total_price = 0 for item in items: total_price += item[1] print(\\"The total price of the items is {:.2f}\\".format(total_price))"},{"prompt":"Create a Python script to log the amount of time spent in a web browser.","completion":"import time import os log_path = 'time_spent.log' def log_time(time): if not os.path.exists(log_path): with open(log_path, 'w') as f: f.write('Time spent in browser lognn') with open(log_path, 'a') as f: f.write('Time spent in browser at {} : {} n'.format(get_date(), time)) def get_date(): return time.strftime('%Y-%m-%d %H:%M:%S', time.localtime()) try: start_time = time.time() while True: time.sleep(30) current_time = time.time() log_time(current_time - start_time) start_time = current_time except KeyboardInterrupt: print('Stopped logging browser time')"},{"prompt":"mplement a function in Python to check if an element is in a given array.","completion":"def element_in_array(arr, el): for item in arr: if item == el: return True return False"},{"prompt":"Create a machine learning algorithm in Python that takes a set of data points and classifies them into two distinct classes. Examples [[1,2], [2,3], [1,4], [0,0]]","completion":"import numpy as np from sklearn.svm import LinearSVC X = np.array([[1, 2], [-2, 3], [-1, -4], [0, 0]]) # y = [1, -1, -1, 0] y = np.array([1, -1, -1, 0]) clf = LinearSVC() clf.fit(X, y) # Predict the class of the points [[3, -1], [-2, 0]] predictions = clf.predict([[3, -1], [-2, 0]]) # Output -> [1, -1]"},{"prompt":"Write a Python module to interact with a thirdparty API. URL endpoints for the API: https://example.com (GET) and https://example.com/:id (GET, PUT, POST, DELETE).","completion":"import requests def get(url): '''Function to make a GET request to the API''' response = requests.get(url) return response def put(url,data): '''Function to make a PUT request to the API''' response = requests.put(url,data) return response def post(url, data): '''Function to make a POST request to the API''' response = requests.post(url,data) return response def delete(url): '''Function to make a DELETE request to the API''' response = requests.delete(url) return response"},{"prompt":"Create a loop in Python that prints every 5th number between 1 and 100.","completion":"for value in range(1,101,5): print(value)"},{"prompt":"Generate a Fibonacci sequence using a recursive function in Python.","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(9))"},{"prompt":"Create a Python script to read CSV data and store the data in a Pandas DataFrame.","completion":"import pandas as pd # Read CSV data data = pd.read_csv(\\"data.csv\\") # Store data to DataFrame df = pd.DataFrame(data)"},{"prompt":"Create a Python class named CHeartBeat that inherits from CBaseCommand and has a method named Run. The class should import the BaseCommand and SBDB modules and have a class variable named command_id with a value of 0x00000002. The Run method should check if the instance is authorized, run the CBaseCommand's Run method, send a response, and update the active time in the SBDB module using threads.deferToThread based on the role and client ID or superbox ID of the protocol instance. If the instance is not authorized, it should send an unauthorized response.","completion":"''' Created on 2013-8-12 @author: E525649 ''' from BaseCommand import CBaseCommand from twisted.internet import threads import BaseCommand from DB import SBDB class CHeartBeat(CBaseCommand): ''' classdocs ''' command_id=0x00000002 def __init__(self,data=None,protocol=None): ''' Constructor ''' CBaseCommand.__init__(self, data, protocol) def Run(self): with self.protocol.lockCmd: if self.Authorized(): CBaseCommand.Run(self) self.SendResp() if self.protocol.role==BaseCommand.PV_ROLE_HUMAN: threads.deferToThread(SBDB.UpdateActiveTime,self.protocol.role,self.protocol.client_id,id(self.protocol.transport)) elif self.protocol.role==BaseCommand.PV_ROLE_SUPERBOX: threads.deferToThread(SBDB.UpdateActiveTime,self.protocol.role,self.protocol.superbox_id,id(self.protocol.transport)) else: self.SendUnauthorizedResp()"},{"prompt":"Given a large JSON string, write a Python program to find a value associated with a given key. JSON String: {key1: value1, key2: {key3: value2, key4: [1,2,3]}, key5: 5} Given Key: key4","completion":"import json # given JSON string my_json_str = '{\\"key1\\": \\"value1\\", \\"key2\\": {\\"key3\\": \\"value2\\", \\"key4\\": [1,2,3]}, \\"key5\\": 5}' # parse the json string parsed_data = json.loads(my_json_str) # get the value associated with key4 value = parsed_data[\\"key2\\"][\\"key4\\"] print(value) # Output: [1,2,3]"},{"prompt":"Create an algorithm to automate sorting of a list of integers in descending order in Python.","completion":"def bubbleSort(list): for num in range(len(list)-1,0,-1): for i in range(num): if list[i] < list[i+1]: temp = list[i] list[i] = list[i+1] list[i+1] = temp list = [54,26,93,17,77,31,44,55,20] bubbleSort(list) print(\\"Sorted list:\\") for i in range(len(list)): print(list[i],end=\\" \\")"},{"prompt":"Develop an AI assistant in Python that answers the questions in the given dataset. Not applicable","completion":"import random dataset = { 'What is your name?': 'My name is AI Assistant', 'What can you do?': 'I can answer questions, perform tasks, and help you with general tasks.', 'How can you help me?': 'I can help you with a variety of tasks. Just let me know what you need.' } def ai_assistant(question): if question in dataset: return dataset[question] else: return random.choice(list(dataset.values())) print(ai_assistant('What can you do?')) # outputs: I can answer questions, perform tasks, and help you with general tasks."},{"prompt":"Write a Python program to encrypt a sentence using substitution cipher. Hello, world!","completion":"def encrypt(text): encrypted_text = \\"\\" for letter in text: if letter.isalpha(): encrypted_text += chr(ord(letter) + 2) else: encrypted_text += letter return encrypted_text text = \\"Hello, world!\\" encrypted_text = encrypt(text) print(encrypted_text)"},{"prompt":"Write a function to find all the possible subset sums of a given array. arr = [1,2,3]","completion":"# Python program to find all possible subset sums def find_subset_sums(arr): sums = set() for i in range(2**len(arr)): csum = 0 for j in range(len(arr)): if i & (1<<j): csum += arr[j] sums.add(csum) return sums"},{"prompt":"Write a python script to sort the given array [10, 15, 7, 8, 12]","completion":"arr = [10, 15, 7, 8, 12] arr.sort() print(arr)"},{"prompt":"Construct a Python program to sort an array in descending order. arr = [4, 5, 2, 6, 1, 3]","completion":"def descending_sort(arr): for i in range(len(arr)): for j in range(0, len(arr)-i-1): if arr[j] < arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr arr = [4, 5, 2, 6, 1, 3] descending_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i])"},{"prompt":"Write a Python script to print out all the leap years from 2001 to 2025.","completion":"for year in range(2001,2026): # leap year condition if((year%4 == 0 and year%100 != 0) or year%400 == 0): print(year, end=' ')"},{"prompt":"Write a Python program to find the maximum number in a list of numbers. [1, 9, 5, 18, 21, 2]","completion":"def find_max(nums): max_num = nums[0] for x in nums: if x > max_num: max_num = x return max_num print(find_max([1,9,5,18,21,2]))"},{"prompt":"Generate a correct python algorithm to delete a given element from list.","completion":"def delete_element(numbers, element): result = [] for x in numbers: if x != element: result.append(x) return result"},{"prompt":"Write a Python program to count the number of characters in a string. String = Hello World","completion":"String = \\"Hello World\\" def count_characters(str): return len(str) print(\\"Number of characters in the string:\\", count_characters(String))"},{"prompt":"Create a class in Python that represents a student with two instance variables and a constructor to assign values to those variables.","completion":"class Student: def __init__(self, name, grade): self.name = name self.grade = grade def getGrade(self): return self.grade"},{"prompt":"Debug the Python code. def gen_all_triplets(n): triplets = [] for i in range(1, n): for j in range(i+1, n): for k in range(j+1, k): triplets.append([i, j, k]) return triple","completion":"def gen_all_triplets(n): triplets = [] for i in range(1, n): for j in range(i+1, n): for k in range(j+1, n): triplets.append([i, j, k]) return triplets"},{"prompt":"Design a Python program that computes the reverse of a given string. Hello","completion":"def reverseString(s): return s[::-1] s = \\"Hello\\" print(reverseString(s))"},{"prompt":"Create a Python program to generate a 4x4 matrix with each element equal to the sum of elements in corresponding row and column. Not applicable","completion":"def generate_matrix(): matrix = [[0 for _ in range(4)] for _ in range(4)] for i in range(4): for j in range(4): matrix[i][j] = i + j return matrix print(generate_matrix()) # Output: [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]"},{"prompt":"Optimize an existing Python code snippet to print all even numbers between 1 and 10. num = 1 while num<=10: print(num) num+=1","completion":"num = 0 while num<=10: if num % 2 == 0: print(num) num+=1"},{"prompt":"Create a machine learning model using Python and ScikitLearn that can classify emails as either spam or ham. CSV file containing features extracted from Spam and Ham emails.","completion":"Machine learning model using Python and Scikit-Learn that can classify emails as either spam or ham."},{"prompt":"Create a Python program to print out all the combination of a given set of numbers. [1, 2, 3]","completion":"def combinations(arr): res = [] for i in range(len(arr)): for j in range(i + 1, len(arr)): res.append([arr[i], arr[j]]) return res print(combinations([1, 2, 3]))"},{"prompt":"Using the random module of Python, create a program that prints 10 random numbers between 1 and 100.","completion":"import random for i in range(10): x = random.randint(1, 100) print(x)"},{"prompt":"Create a Python program to generate a random list of length 10 involving integers between 0 and 10.","completion":"import random random_list = [random.randint(0, 10) for _ in range(10)] print(random_list)"},{"prompt":"Generate a Python program to merge two arrays into one.","completion":"def merge(lst1, lst2): merged_list = lst1 + lst2 return merged_list"},{"prompt":"Create a Python script for creating an Excel spreadsheet with 2 sheets, one with a list of expenses and another one with a chart showing the total expenses. Not applicable","completion":"import openpyxl def createSpreadsheet(name): # Create an Excel workbook workbook = openpyxl.Workbook() # Set up the first sheet with the list of expenses expenseSheet = workbook.active expenseSheet.title = 'Expenses' expenseSheet.cell(row=1, column=1).value = 'Item' expenseSheet.cell(row=1, column=2).value = 'Amount' # Set up the second sheet with the chart of expenses chartSheet = workbook.create_sheet('Chart') chartSheet.add_data(expenseSheet['A2':'B4'], from_rows=True, titles_from_data=True) chartSheet.add_chart(openpyxl.chart.BarChart(), 'C1') # Save the workbook workbook.save(name + '.xlsx')"},{"prompt":"Write a function in Python to mask parts of a string using the provided masking character. data_string = This is a demo string mask_char = '#'","completion":"def mask_parts_of_string(data_string, mask_char): output_string = \\"\\" for char in data_string: if char != ' ': output_string += mask_char else: output_string += char return output_string data_string = \\"This is a demo string\\" mask_char = '#' result = mask_parts_of_string(data_string, mask_char) print(result) # Outputs"},{"prompt":"Edit this Python code to scale the inputs before applying a regression model. X = np.array([[1,2],[2,1],[3,4],[6,7]]) y = np.array([1.1,2.2,3.3,4.4]) model = LinearRegression().fit(X, y)","completion":"X = preprocessing.scale(np.array([[1,2],[2,1],[3,4],[6,7]])) y = np.array([1.1,2.2,3.3,4.4]) model = LinearRegression().fit(X, y)"},{"prompt":"Translate the following into Python: Create a loop that prints out the following pattern: 1 3 5 7 9 11","completion":"for num in range(1, 12, 2): print(num, end=\\" \\")"},{"prompt":"Use Python's Keras API to construct a machine learning model that classifies movie reviews as either positive or negative Not applicable","completion":"import numpy as np import tensorflow as tf import keras from keras.preprocessing import sequence from keras.models import Sequential from keras.layers import Dense, Embedding from keras.layers import LSTM x_train, y_train = get_data() x_test, y_test = get_data() max_len = 150 # limit review to 150 words x_train = sequence.pad_sequences(x_train, maxlen=max_len) model = Sequential() model.add(Embedding(vocab_size, 32, input_length=max_len)) model.add(LSTM(100)) model.add(Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=3, batch_size=64)"},{"prompt":"Design an algorithm in Python to find a missing number from a given range of numbers. [2, 3, 4, 6, 7]","completion":"def find_missing_num(arr): n = len(arr) sum_of_num = (n + 1)*(arr[0] + arr[n-1])/2 sum_of_arr = sum(arr) return sum_of_num - sum_of_arr"},{"prompt":"Create a function to parse a JSON string and return a Python dictionary. '{name: John, age: 32}'","completion":"import json def parseJSON(json_string): return json.loads(json_string) dictionary = parseJSON('{\\"name\\": \\"John\\", \\"age\\": 32}')"},{"prompt":"Write a Python script to display the highest and lowest average score of a Class. Class_scores = { Alan: [45, 55, 60], Beth :[75, 84, 91], Carla: [87, 91, 97], Dave: [67, 86, 82] }","completion":"Class_scores = { \\"Alan\\": [45, 55, 60], \\"Beth\\" :[75, 84, 91], \\"Carla\\": [87, 91, 97], \\"Dave\\": [67, 86, 82] } def highest_lowest_averages(scores): highest_avg = 0 lowest_avg = float(\\"inf\\") highest_student = None lowest_student = None for student, scores in scores.items(): avg = sum(scores)/len(scores) if avg > highest_avg: highest_avg = avg highest_student = student if avg < lowest_avg: lowest_avg = avg lowest_student = student return highest_student, highest_avg, lowest_student, lowest_avg highest_student, highest_avg, lowest_student, lowest_avg = highest_lowest_averages(Class_scores) print(\\"The highest average score in the class is held by {} with a score of {}.\\".format(highest_student, highest_avg)) print(\\"The lowest average score in the class is held by {} with a score of {}.\\".format(lowest_student, lowest_avg))"},{"prompt":"Develop a Python program to print the secondlargest element of an array. arr = [10, 3, 5, 22, 4]","completion":"def second_largest(arr): largest = float(\\"-inf\\") second_largest = float(\\"-inf\\") for i in arr: if i > largest: second_largest = largest largest = i elif i > second_largest and i != largest: second_largest = i return second_largest arr = [10, 3, 5, 22, 4] print(second_largest(arr))"},{"prompt":"Create a Python script that parses the contents of a website and stores the data in a SQLite database. Example website URL: https://example.com/","completion":"import sqlite3 import requests from bs4 import BeautifulSoup # create sqlite3 DB conn = sqlite3.connect('example.db') cur = conn.cursor() cur.execute('CREATE TABLE IF NOT EXISTS ExampleTable (title TEXT, url TEXT)') # get website page contents url = 'https://example.com/' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') # parse data links = soup.find_all('a') for link in links: title = link.string url = link['href'] # insert data into DB cur.execute('INSERT INTO ExampleTable VALUES (?, ?)', (title, url)) conn.commit() conn.close() print('Data successfully stored in example.db')"},{"prompt":"Create a Python program to generate a random username. The username should consist of two random words joined with an underscore. Not applicable","completion":"import random words = ['cat', 'dog', 'mouse', 'elephant', 'tiger', 'lion', 'giraffe', 'hippo', 'monkey', 'zebra'] username = random.choice(words) + '_' + random.choice(words) print('Username: ' + username)"},{"prompt":"Optimize a Python function to get the smallest execution time possible. def func(a, b, c): return a + b + c","completion":"def func(a, b, c): return a*b + a*c + b*c # Use an optimized expression for lowest execution time"},{"prompt":"To set up the Mission Pinball Framework (mpf), create a setup.py file with the given code and run it. The setup.py file includes dependencies and entry points for console scripts.","completion":"\\"\\"\\"Mission Pinball Framework (mpf) setup.py.\\"\\"\\" import re from setuptools import setup # http://stackoverflow.com/questions/458550/standard-way-to-embed-version-into-python-package VERSIONFILE = \\"mpf/_version.py\\" VERSION_STRING_LONG = open(VERSIONFILE, \\"rt\\").read() VSRE = r\\"^__version__ = ['\\"]([^'\\"]*)['\\"]\\" _MO = re.search(VSRE, VERSION_STRING_LONG, re.M) if _MO: VERSION_STRING = _MO.group(1) else: raise RuntimeError(\\"Unable to find version string in %s.\\" % (VERSIONFILE,)) pin2dmd_requires = [ 'pyusb==1.1.0' ] linux_i2c_requires = [ 'smbus2_asyncio==0.0.5' ] rpi_requires = [ 'apigpio-mpf==0.0.3' ] cli_requires = [ 'prompt_toolkit==3.0.8', 'asciimatics==1.12.0', 'terminaltables==3.1.0', ] osc_requires = [ 'python-osc==1.7.4' ] irc_requires = [ 'irc==19.0.1' ] vpe_requires = [ 'grpcio_tools==1.34.0', 'grpcio==1.34.0', 'protobuf==3.14.0', ] crash_reporter_requires = [ 'requests==2.22.0' ] all_requires = (pin2dmd_requires + cli_requires + linux_i2c_requires + rpi_requires + osc_requires + irc_requires + vpe_requires + crash_reporter_requires) setup( name='mpf', version=VERSION_STRING, description='Mission Pinball Framework', long_description='''Let's build a pinball machine! The Mission Pinball Framework (MPF) is an open source, cross-platform, Python-based software framework for powering real pinball machines. MPF is written in Python. It can run on Windows, OS X, and Linux with the same code and configurations. MPF interacts with real, physical pinball machines via modern pinball controller hardware such as a Multimorphic P-ROC or P3-ROC, a FAST Pinball controller, or Open Pinball Project hardware controllers. You can use MPF to power your own custom-built machine or to update the software in existing Williams, Bally, Stern, or Data East machines. MPF is a work-in-progress that is not yet complete, though we're actively developing it and checking in several commits a week. It's MIT licensed, actively developed by fun people, and supported by a vibrant, pinball-loving community.''', url='https://missionpinball.org', author='The Mission Pinball Framework Team', author_email='brian@missionpinball.org', license='MIT', classifiers=[ 'Development Status :: 3 - Alpha', 'Intended Audience :: Developers', 'License :: OSI Approved :: MIT License', 'Programming Language :: Python :: 3.6', 'Programming Language :: Python :: 3.7', 'Programming Language :: Python :: 3.8', 'Programming Language :: Python :: 3.9', 'Natural Language :: English', 'Operating System :: MacOS :: MacOS X', 'Operating System :: Microsoft :: Windows', 'Operating System :: POSIX :: Linux', 'Topic :: Artistic Software', 'Topic :: Games/Entertainment :: Arcade' ], keywords='pinball', include_package_data=True, package_data={'': ['*.yaml', '*.png', '*.so', '*.pyd', '*.ogg', '*.wav']}, # MANIFEST.in picks up the rest packages=['mpf'], zip_safe=False, install_requires=['ruamel.yaml==0.15.100', 'pyserial==3.5', 'pyserial-asyncio==0.4;platform_system==\\"Windows\\"', 'pyserial-asyncio==0.5;platform_system!=\\"Windows\\"', 'sortedcontainers==2.3.0', 'psutil==5.7.3', ], extras_require={ 'all': all_requires, 'pin2dmd': pin2dmd_requires, 'linux_i2c': linux_i2c_requires, 'rpi': rpi_requires, 'cli': cli_requires, 'osc': osc_requires, 'irc': irc_requires, 'vpe': vpe_requires, 'crash_reporter': crash_reporter_requires, }, tests_require=[], test_suite=\\"mpf.tests\\", entry_points={ 'console_scripts': [ 'mpf = mpf.commands:run_from_command_line', ] } )"},{"prompt":"Create an algorithm in Python to identify the missing number in a sequence of integers. [1,2,4,5]","completion":"def missing_number(arr): n = len(arr) total = (n+1)*(n+2)/2 for i in range(n): total -= arr[i] return total arr = [1,2,4,5] print(\\"The missing number is\\",int(missing_number(arr)))"},{"prompt":"Can you develop a Tic Tak Toe game in Python?","completion":"#tic-tac-toe game #define the board board = [\\"-\\", \\"-\\", \\"-\\", \\"-\\", \\"-\\", \\"-\\", \\"-\\", \\"-\\", \\"-\\"] #display the board def display_board(): print(\\" \\"+ board[0] + \\" | \\" + board[1] + \\" | \\" + board[2]) print(\\" \\"+ board[3] + \\" | \\" + board[4] + \\" | \\" + board[5]) print(\\" \\"+ board[6] + \\" | \\" + board[7] + \\" | \\" + board[8]) #define function to update the board def update_board(position, player): board[position] = player #Function to check if the board is full def full_board_check(): for i in range(0, 9): if board[i] == \\"-\\": return False return True #Function to check if the one of the players has won def win_check(player): return( (board[0] == player and board[1] == player and board[2] == player) or (board[3] == player and board[4] == player and board[5] == player) or (board[6] == player and board[7] == player and board[8] == player) or (board[0] == player and board[3] == player and board[6] == player) or (board[1] == player and board[4] == player and board[7] == player) or (board[2] == player and board[5] == player and board[8] == player) or (board[0] == player and board[4] == player and board[8] == player) or (board[2] == player and board[4] == player and board[6] == player) ) #Function to determine player def determin_player(): if turn%2 == 0: return 'X' else: return 'O' #Function to handle current player turn def handle_player_turn(player): selection = int(input('Player '+ player +': Choose a position from 0 - 8: ')) valid = False while not valid: while selection not in range(0,9): selection = int(input('Choose a position from 0-8: ')) if board[selection] == '-': valid = True else: selection = int(input('Choose a valid position from 0 - 8: ')) update_board(selection,player) display_board() #Function to start the game def start_game(): print('Welcome to Tic Tac Toe') display_board() if full_board_check(): return global turn turn = 0 while not full_board_check(): player = determin_player() handle_player_turn(player) if win_check(player): print('Congratulations ' + player + ': You have won!') break turn+=1 if not win_check(player): print('Its a tie') start_game()"},{"prompt":"mplement a function in Python to find the prime numbers between 1 and a given max value","completion":"def find_primes_less_than(max_value): primes=[] for num in range(2, max_value + 1): is_prime = True for i in range(2, num): if (num % i == 0): is_prime = False if is_prime: primes.append(num) return primes"},{"prompt":"Create a neural network to analyse the sentiment of a tweet in Python","completion":"import numpy as np import pandas as pd import tensorflow as tf from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences # Load the data df = pd.read_csv('path/to/data') # Tokenize the data tokenizer = Tokenizer(num_words = 5000, oov_token = \\"<OOV>\\") tokenizer.fit_on_texts(df['text']) X = tokenizer.texts_to_sequences(df['text']) X = pad_sequences(X, padding = \\"post\\") # Set up the classification task y = pd.get_dummies(df['sentiment']).values # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1) # Build the model model = tf.keras.Sequential([ tf.keras.layers.Embedding(input_dim = 5000, output_dim = 16), tf.keras.layers.GlobalAveragePooling1D(), tf.keras.layers.Dense(24, activation = 'relu'), tf.keras.layers.Dense(2, activation = 'softmax') ]) model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy']) model.fit(X_train, y_train, epochs = 15, validation_data = (X_test, y_test), verbose = 2)"},{"prompt":"Write a Python program to sum all the items in a list. list = [1,2,3,4,5]","completion":"def sum_list_items(list): sum = 0 for item in list: sum += item return sum print(sum_list_items(list))"},{"prompt":"Create a Python program that calculates the total cost of a shopping cart with the given items and quantity. Item 1, quantity: 2, price: 3.00 Item 2, quantity: 5, price: 1.50","completion":"# Input values items = [ ['Item 1', 2, 3.00], ['Item 2', 5, 1.50] ] # Calculate total cost total_cost = 0 for item in items: cost = item[1] * item[2] total_cost += cost # Print cost print('Total cost: ' + str(total_cost))"},{"prompt":"Create a web crawler in Python to count the number of occurrences for a given keyword on a website. Input URL: https://en.wikipedia.org/wiki/Python_(programming_language) Short Code: Pytho","completion":"import requests from bs4 import BeautifulSoup # Get the html from the given url r = requests.get('https://en.wikipedia.org/wiki/Python_(programming_language)') soup = BeautifulSoup(r.text, 'html.parser') # Count the number of occurrences of the given keyword counter = 0 for text in soup.find_all(text=True): if 'Python' in text: counter += 1 print('The keyword \\"Python\\" appears {} times on this page.'.format(counter))"},{"prompt":"Create a function in Python that takes two strings and combines the characters of each string keeping the order of the characters. foo bar","completion":"def combine(s1, s2): result = \\"\\" for i in range(max(len(s1), len(s2))): if i < len(s1): result += s1[i] if i < len(s2): result += s2[i] return result"},{"prompt":"Create a function in Python to generate a random matrix of size (m, n).","completion":"import numpy as np def generateRandomMatrix(m, n): return np.random.randn(m, n)"},{"prompt":"Create a python — django application that allows user to register and login.","completion":"#!/usr/bin/env python3 import os from django.contrib.auth.hashers import make_password from django.http import HttpResponse from django.shortcuts import render # Create your views here. def register(request): if request.method == 'POST': user_name = request.POST['username'] password = request.POST['password'] confirm_password = request.POST['confirm_password'] if password != confirm_password: return HttpResponse('Passwords do not match') users = User.objects.all() if user_name in users: return HttpResponse('Username already taken') # Store hashed password password = make_password(password) user = User.objects.create(username=user_name, password=password) user.save() return render(request, 'user_login.html') else: return render(request, 'user_registration.html')"},{"prompt":"Write a Python script to create a dictionary with each values doubled. dictionary = {1:'a', 2:'b', 3:'c'}","completion":"dictionary = {1:'a', 2:'b', 3:'c'} doubled = {} for key, value in dictionary.items(): doubled[key] = value * 2 print(doubled) # {1: 'aa', 2: 'bb', 3: 'cc'}"},{"prompt":"Generate a secure random password in Python.","completion":"import string import random def secure_password(length): password_characters = string.ascii_letters + string.punctuation + string.digits password = \\"\\".join(random.choice(password_characters) for i in range(length)) return password secure_pw = secure_password(20) print(\\"Secure Password:\\", secure_pw)"},{"prompt":"Run the given code on Python 3 and generate the output. print(Hello World!)","completion":"Hello World!"},{"prompt":"Write a Python program to generate the Fibonacci sequence up to a given number and store it in a list. int num = 10","completion":"def generateFibonacciSequence(num): a = 0 b = 1 fib = [] for i in range(num): fib.append(a) c = a + b a = b b = c return fib num = 10 print(generateFibonacciSequence(num))"},{"prompt":"Build an algorithm in Python to concatenate two binary strings. str1 = 10101 str2 = 101","completion":"def concatTwoBinStrings(str1, str2): str = \\"\\" for i in (str1 + str2): if i == '0': str += '0' else: str += '1' return str str1 = \\"10101\\" str2 = \\"101\\" print(concatTwoBinStrings(str1, str2))"},{"prompt":"Analyze the following selection sort algorithm in Python and rewrite it in JavaScript. def selection_sort(arr): for i in range(len(arr)): minimum = i for j in range(i+1, len(arr)): if arr[minimum] > arr[j]: minimum = j arr[i], arr[minimum] = arr[minimum], arr[i]","completion":"function selectionSort(arr) { for (let i = 0; i < arr.length; i++) { let minimum = i; for (let j = i+1; j < arr.length; j++) { if (arr[minimum] > arr[j]) { minimum = j; } } let temp = arr[i]; arr[i] = arr[minimum]; arr[minimum] = temp; } return arr; }"},{"prompt":"Create a Python script that connects to a PostgreSQL database. The script should create a table, insert a row with some data, and retrieve the data. Table name: users Columns: id (int, primary key) username (varchar) password (varchar)","completion":"import psycopg2 conn = psycopg2.connect(host=\\"localhost\\", database=\\"testdb\\", user=\\"postgres\\", password=\\"<your password>\\") cur = conn.cursor() # Create table cur.execute(\\"CREATE TABLE users(id int PRIMARY KEY, username varchar, password varchar)\\") # Insert a record cur.execute(\\"INSERT INTO users VALUES(1, 'user1', 'password1')\\") # Retrieve data cur.execute(\\"SELECT * FROM users\\") rows = cur.fetchall() for row in rows: print(\\"ID =\\", row[0]) print(\\"Username =\\", row[1]) print(\\"Password =\\", row[2]) cur.close() conn.close()"},{"prompt":"Write a Python program to validate a given IP address.","completion":"def is_valid_ip(ip): ip = ip.split('.') if len(ip) != 4: return False for i in ip: if not i.isdigit(): return False i = int(i) if i < 0 or i > 255: return False return True"},{"prompt":"Write a Python program to classify revenue data and output the classification result. ['Revenue', '0', '1000', '2000', '3000']","completion":"def classify_revenue(revenue): result = [] for n in revenue: if n == 'Revenue': result.append('Classification') elif n < 0: result.append('Loss') elif n >= 0 and n < 1000: result.append('Low') elif n >= 1000 and n < 2000: result.append('Medium') elif n >= 2000 and n <= 3000: result.append('High') else: result.append('Error') return result revenue = ['Revenue', '0', '-1000', '2000', '3000'] result = classify_revenue(revenue) print(result) # Output: ['Classification', 'Low', 'Loss', 'High', 'High']"},{"prompt":"Generate Python code to identify the longest common substring between two strings. Two strings: abcdaf and zbcdf","completion":"def longest_common_substring(s1, s2): n1, n2 = len(s1), len(s2) lcs_matrix = [[0]*(n2 + 1) for _ in range(n1 + 1)] longest_length, end_of_longest = 0, 0 for i in range(1, n1 + 1): for j in range(1, n2 + 1): if s1[i-1] == s2[j-1]: lcs_matrix[i][j] = lcs_matrix[i-1][j-1] + 1 if lcs_matrix[i][j] > longest_length: longest_length = lcs_matrix[i][j] end_of_longest = i else: lcs_matrix[i][j] = 0 return s1[end_of_longest-longest_length:end_of_longest]"},{"prompt":"Suggest a completion for processing a web form using Python. import requests # Get form's (POST) data data = { name: John Doe, email: john.doe@example.com, message: Hello }","completion":"import requests # Get form's (POST) data data = { \\"name\\": \\"John Doe\\", \\"email\\": \\"john.doe@example.com\\", \\"message\\": \\"Hello\\" } # Send POST request r = requests.post(\\"http://www.example.com/submit-form.php\\", params=data) # Get web form's response print(r.text)"},{"prompt":"Create a program in Python that computes the area of a circle using Radius.","completion":"def get_area(radius): return math.pi*(radius**2)"},{"prompt":"Write a Python class that can be used to store information about a given patient, including their name and condition.","completion":"class Patient: def __init__(self, name, condition): self.name = name self.condition = condition def get_name(self): return self.name def get_condition(self): return self.condition"},{"prompt":"Create a linear regression model in Python using scikitlearn. Not applicable","completion":"import numpy as np from sklearn import linear_model # Initialize the features and target X = np.array([[1.1, 1.5], [1.3, 1.9], [1.5, 2.3], [1.7, 2.7], [1.9, 3.1]]) y = np.array([2.5, 3.2, 4.0, 4.7, 5.4]) # Create the model model = linear_model.LinearRegression() # Fit the model model.fit(X, y) # Check the model print(model.intercept_) print(model.coef_)"},{"prompt":"Convert a Python program to handle multiple input threads simultaneously. def function(x): time.sleep(1) return x * x for i in range(5): x = int(input()) result = function(x) print(result)","completion":"import threading import time def function(x): time.sleep(1) return x * x def worker(x, i): result = function(x) print(\\"Result of\\", i, \\"is\\", result) # main i = 0 while i < 5: t = threading.Thread(target=worker, args=(int(input()), i)) print(\\"Started thread\\", i) t.start() i += 1"},{"prompt":"Create a basic Command Line program in Python that takes two parameters and prints the result of their multiplication. Not applicable","completion":"import sys # Take two inputs from command line first, second = int(sys.argv[1]), int(sys.argv[2]) # Display the result of multiplication print(f\\"Result of {first} * {second} is: {first * second}\\")"},{"prompt":"Create a list comprehension in Python for printing all the numbers divisible by 4.","completion":"divisible_by_four = [num for num in range(1000) if num % 4 == 0]"},{"prompt":"Create a Python dictionary of students' names and their corresponding grades in a course. John 98; Jennifer 95; Noah 87; Frank 92;","completion":"students_dict = { \\"John\\": 98, \\"Jennifer\\": 95, \\"Noah\\": 87, \\"Frank\\": 92 }"},{"prompt":"Create a Python script to automate the deployment of a web application to a Kubernetes cluster. Not applicable","completion":"import subprocess def deploy_application(app_name, manifest_file): # Run 'kubectl' command to deploy the application result = subprocess.run( ['kubectl', 'apply', '-f', manifest_file], stdout=subprocess.PIPE ) # Check the return code if result.returncode == 0: print(f'Application {app_name} deployed successfully') else: print(f'Error deploying application {app_name}: {result.stderr}')"},{"prompt":"Generate a program in Python to get the index of a particular word in a given sentence sentence=Python is a programming language.; word=language","completion":"def index_of_word(sentence, word): words = sentence.split() for index, value in enumerate(words): if value == word: return index return -1 sentence = \\"Python is a programming language.\\" word = \\"language\\" print(index_of_word(sentence, word))"},{"prompt":"Create an algorithm in Python to search a given string for the longest consecutive substring of the same character. String = aaaaaaabbbccdddee","completion":"def longestConsecutive(string): max_consecutive = \\"\\" current_consecutive = \\"\\" for char in string: if current_consecutive == \\"\\" or current_consecutive[-1] == char: current_consecutive += char else: if len(current_consecutive) > len(max_consecutive): max_consecutive = current_consecutive current_consecutive = char if len(current_consecutive) > len(max_consecutive): max_consecutive = current_consecutive return max_consecutive string = \\"aaaaaaabbbccdddee\\" print(longestConsecutive(string))"},{"prompt":"Transform a given string to uppercase. string = Python Programming","completion":"def to_upper(string): return string.upper() string = \\"Python Programming\\" print(to_upper(string))"},{"prompt":"Edit the following code snippet in Python to remove the duplicates from a list. my_list = [1,2,2,3,4,5,5,5]","completion":"my_list = list(dict.fromkeys(my_list))"},{"prompt":"Create a Python program to check if a given string can be formed from a given set of words. String: justdoit Set of words: [just, do, it]","completion":"def word_set(string, words): words_set = set(words) string_set = set(string) if string_set.issubset(words_set): return True else: return False word_set(\\"justdoit\\", [\\"just\\", \\"do\\", \\"it\\"])"},{"prompt":"Create a Python script that prints the top three words from a given sentence. sentence= This is a really long sentence with many words.","completion":"import collections sentence = \\"This is a really long sentence with many words.\\" # Split the given sentence into a list of words words = sentence.split(\\" \\") # Count the occurrence of each word word_freq = collections.Counter(words) # Print out the top three words for word, count in word_freq.most_common(3): print(f'{word}: {count}')"},{"prompt":"Write an efficient algorithm in Python to find the minumum number of iterations to reach a certain number. Start with number 5 and the end goal is number 10","completion":"def min_num_iterations(start, end): num_iterations = 0 while start < end: start += 1 num_iterations += 1 return num_iterations print(min_num_iterations(5, 10)) # Output: 5"},{"prompt":"Compute the sum of a list of numbers using a for loop in Python. [1, 2, 3, 4]","completion":"total = 0 nums = [1, 2, 3, 4] for num in nums: total += num print(total)"},{"prompt":"Write a Python function that takes a string and reverses it.","completion":"def reverse_string(string): return string[::-1]"},{"prompt":"Develop a program in Python to compute the maximum contiguous subarray sum. [3, 2, 5, 1, 6, 3, 2]","completion":"def maxSubArraySum(arr): max_so_far = arr[0] curr_max = arr[0] for i in range(1, len(arr)): curr_max = max(arr[i], curr_max + arr[i]) max_so_far = max(max_so_far, curr_max) return max_so_far"},{"prompt":"Write Python code to check if a string is composed of only unique characters.","completion":"def are_all_characters_unique(string): return len(set(string)) == len(string) # Driver code print(are_all_characters_unique(\\"Hello\\")) # Output: false print(are_all_characters_unique(\\"abcdef\\")) # Output: true"},{"prompt":"Define a function in Python to check if a number is even.","completion":"def is_even(num): if num % 2 == 0: return True else: return False"},{"prompt":"Use the NumPy library to generate an array of random integers from 1 to 10 in Python. Not applicable","completion":"import numpy as np np.random.randint(1, 11, size=10) # Output: array([7, 4, 9, 9, 2, 2, 4, 7, 1, 5])"},{"prompt":"Write a Python program to extract the Last Name from a given full name. full_name = John Snow","completion":"last_name = full_name.split()[1] print(last_name)"},{"prompt":"Write an algorithm in Python to (given a list of numbers) find two numbers that add up to the given sum. [1,9,7,2,8, 3, 4], 10","completion":"# Return the pair of numbers that add up to the given sum def two_num_sum(arr, sum): # Store all elements in a set seen = set() # For each element in the array for num in arr: # Calculate the target needed to achieve the sum target = sum - num # if target number exists in the set, return the pair if target in seen: return [num, target] # Add current number to the set seen.add(num) # Tests assert two_num_sum([1,9,7,2,8, 3, 4], 10) == [7,3] assert two_num_sum([4,5,6,7,2,3], 16) == [4, 12] assert two_num_sum([18,21,5], 6) == None"},{"prompt":"Create a trigonometric function using Python that produces a sinusoidal wave.","completion":"def sinusoidal_wave(x): return np.sin(2*np.pi*x)"},{"prompt":"Write a Python script that generates a histogram given a list of numbers. [1,2,3,4,5,4,3,2,1]","completion":"import matplotlib.pyplot as plt # x-axis values x = [1,2,3,4,5,4,3,2,1] # Y-axis values y = [1,2,3,4,5,4,3,2,1] # Function to plot the histogram plt.hist(x, y, histtype = 'bar', rwidth = 0.8) # Deifne labels and titles plt.xlabel('x') plt.ylabel('y') plt.title('Histogram') # Function to show the plot plt.show()"},{"prompt":"Create a program in JavaScript to reverse a sentence. I love coding in Python","completion":"let sentence = \\"I love coding in Python\\"; let reversed = sentence.split(\\"\\").reverse().join(\\"\\"); console.log(reversed);"},{"prompt":"Generate an appropriate Python program to calculate the future value of an investment with the given principal, rate of interest and years. Principal: 10000 Rate of interest: 10 Years: 5","completion":"# Calculate the Future Value of an Investment def future_value(principal, rate, years): # Calculate the total amount total_amount = principal * (1+(rate/100))**years # return the future value return round(total_amount,2) # Testing print(future_value(10000,10,5))"},{"prompt":"Create a Python program to calculate the area of different shapes by taking the corresponding input from the user.","completion":"\\"\\"\\" Calculate the area of different shapes \\"\\"\\" def calculate_area(): # Loop until the user chooses to exit while True: print(\\"Choose your shape:\\") print(\\"1. Rectangle\\") print(\\"2. Square\\") print(\\"3. Triangle\\") print(\\"4. Circle\\") print(\\"5. Exit\\") # Get the choice from the user choice = int(input(\\"Enter your choice: \\")) if choice == 1: length = float(input(\\"Enter the length: \\")) breadth = float(input(\\"Enter the breadth: \\")) area = length * breadth print(\\"Area of the rectangle is:\\", area) elif choice == 2: side = float(input(\\"Enter the side: \\")) area = side * side print(\\"Area of the square is:\\", area) elif choice == 3: base = float(input(\\"Enter the base: \\")) height = float(input(\\"Enter the height: \\")) area = 0.5 * base * height print(\\"Area of the triangle is:\\", area) elif choice == 4: radius = float(input(\\"Enter the radius: \\")) area = 3.14 * radius * radius print(\\"Area of the circle is:\\", area) elif choice == 5: break else: print(\\"Invalid input!\\") if __name__ == '__main__': calculate_area()"},{"prompt":"Create a Python program to remove all the duplicates in the given list list = [2, 10, 20, 30, 10, 20, 40]","completion":"def remove_duplicates(list): temp_list = [] for i in list: if i not in temp_list: temp_list.append(i) return temp_list remove_duplicates(list) # output: [2, 10, 20, 30, 40]"},{"prompt":"Create a web crawler in Python that is able to scrape data from webpages. The crawler should be able to crawl multiple pages and extract specific data from the HTML source code. Not applicable","completion":"import requests from lxml import html def crawl(url): page = requests.get(url) tree = html.fromstring(page.content) # Extract the data from the HTML source code data = tree.xpath('xpath expression') # Return the data return data # Crawl multiple URLs urls = [url1, url2, ...] for url in urls: data = crawl(url) print(data)"},{"prompt":"Design and implement a Bubble Sort algorithm for sorting an array of numbers in Python. [64, 34, 25, 12, 22, 11, 90]","completion":"def bubble_sort(l): for i in range(len(l)): for j in range(0, len(l)-i-1): if l[j] > l[j+1]: l[j], l[j+1] = l[j+1], l[j] # Test code l = [64, 34, 25, 12, 22, 11, 90] bubble_sort(l) print(l)"},{"prompt":"Develop a python script to retrieve data from a MySQL database","completion":"import mysql.connector conn = mysql.connector.connect(host=\\"localhost\\", port=\\"3306\\", database=\\"myDB\\", user=\\"root\\", password=\\"mypassword\\") cursor = conn.cursor() cursor.execute(\\"SELECT * from myTable\\") data = cursor.fetchall() conn.close()"},{"prompt":"Write a code to implement linear search algorithm in a Python list.","completion":"def linear_search(list, target): \\"\\"\\" This function will implement linear search algorithm in a Python list and return the index of the target value or -1 if the target value is not found. \\"\\"\\" for index, element in enumerate(list): if element == target: return index return -1 if __name__ == '__main__': list = [1, 3, 5, 7, 9] target = 7 print(linear_search(list, target))"},{"prompt":"Edit the existing code to create a permutation generator in Python. def permutation(list, s): if list == 1: return s else: return [ y + x for y in permutation(1, s) for x in permutation(list 1, s) ]","completion":"def permutation(lst, s): if len(lst) == 1: return s else: perm_list = [] for y in permutation(lst[:-1], s): # recursive call for x in lst: if x not in y: # check if element is already in permutation perm_list.append(y+x) return perm_list"},{"prompt":"Write a type hinting program in Python for a templating extension for a web application. Not applicable","completion":"import typehints @typehints.with_hints def template(data): # Retreive the data greeting = data[\\"greeting\\"] message = data[\\"message\\"] name = data[\\"name\\"] # Construct the greeting greeting = f\\"{greeting}, {name}!\\" # Construct the final message message = f\\"{greeting} {message}\\" # Return the message return message @typehints.hints( data=dict( greeting=str, message=str, name=str ) ) def template_hinted(data): pass # Implement your templating extension"},{"prompt":"Generate a 3D matrix of random values in Python","completion":"import numpy as np matrix = np.random.rand(3,3,3)"},{"prompt":"Using a machine learning library of your choice, write a program in Python to detect the sentiment of a sentence. Not applicable","completion":"import nltk nltk.download('vader_lexicon') from nltk.sentiment.vader import SentimentIntensityAnalyzer sentences = [ \\"This is a great movie!\\", \\"This movie was terrible.\\" ] analyzer = SentimentIntensityAnalyzer() for sentence in sentences: scores = analyzer.polarity_scores(sentence) print(\\"{:-<40} {}\\".format(sentence, str(scores)))"},{"prompt":"Write a Pub/Sub program in Python for a simple chatroom application. Not applicable","completion":"import zmq import sys import threading # define constants HOST = \\"127.0.0.1\\" PORT = 6680 context = zmq.Context() # Socket 1 pub = context.socket(zmq.PUB) pub.bind(\\"tcp://%s:%s\\" % (HOST, PORT)) # Socket 2 sub = context.socket(zmq.SUB) sub.connect(\\"tcp://%s:%s\\" % (HOST, PORT)) sub.setsockopt_string(zmq.SUBSCRIBE, '') # Function to receive message from subscriber def get_message(): while True: message = sub.recv() print(message.decode('utf-8')) # Start thread thread = threading.Thread(target=get_message) thread.start() # Send messages while True: message = input('Say something: ') pub.send_string(str(message))"},{"prompt":"Construct a Python program that read a csv dataset, that contains rows of keyword, location and value and rank them based on the highest value. [keyword, location, value] [apple, Washington, 400] [banana, California, 800] [cherry, Texas, 300]","completion":"import csv # Initialize the list of records data = [['apple', 'Washington', 400], ['banana', 'California', 800], ['cherry', 'Texas', 300]] # Sort the CSV data according to value data.sort(key=lambda x: x[2], reverse=True) # Print the sorted data for row in data: print(row) # Output ['banana', 'California', 800] ['apple', 'Washington', 400] ['cherry', 'Texas', 300]"},{"prompt":"Write a FOR loop to create a Pascal Triangle of size N in Python. N = 5","completion":"def pascal_triangle(n): trow = [1] y = [0] for x in range(max(n,0)): print(trow) trow=[l+r for l,r in zip(trow+y, y+trow)] # Driver program to test the above function n = 5 pascal_triangle(n)"},{"prompt":"Construct a linked list data structure in Python","completion":"class Node: def __init__(self, data): self.data = data self.next = None # Linked List class contains a Node object class LinkedList: def __init__(self): self.head = None def push(self, data): # Allocate the Node & Put in the data new_node = Node(data) # Make next of new Node as head new_node.next = self.head # Move the head to point to new Node self.head = new_node # Utility function to print the linked LinkedList def printList(self): temp = self.head while(temp): print(temp.data, end=\\" \\") temp = temp.next"},{"prompt":"Generate a python program to remove duplicate values in a given list. myList = [1, 2, 3, 2, 4, 5, 5]","completion":"def remove_duplicates(myList): unique_list = [] for item in myList: if item not in unique_list: unique_list.append(item) return unique_list result = remove_duplicates(myList) print(result)"},{"prompt":"Design a python method that takes in two numbers and returns their first common divisor.","completion":"def gcd(a, b): if a == 0: return b return gcd(b % a, a)"},{"prompt":"Optimize a Python program that reads a list of numbers and finds the largest and smallest number in the list. [1, 2, 9, 4, 7, 0]","completion":"my_list = [1, -2, 9, 4, -7, 0] # Initialize variables largest_number = my_list[0] smallest_number = my_list[0] # Loop through list for number in my_list: # Update variables if number > largest_number: largest_number = number if number < smallest_number: smallest_number = number print(\\"Largest number:\\", largest_number) print(\\"Smallest number:\\", smallest_number)"},{"prompt":"Write a function in Python to remove a specific character from a string. string = Hello World character = 'l'","completion":"def remove_character(string, character): return string.replace(character, '') print(remove_character(string, character))"},{"prompt":"Write a Python script to print out all prime numbers in a given list. [4, 15, 22, 50, 119]","completion":"import math def is_prime(n): for i in range(2, int(math.sqrt(n))+1): if n % i == 0: return False return True input_list = [4, 15, 22, 50, 119] for num in input_list: if is_prime(num): print(num) # Output: # 4 # 15 # 50 # 119"},{"prompt":"Generate a correct python script to identify the output of a given expression. expression: (4 + 2) * 3","completion":"a = (4 + 2) * 3 print(a)"},{"prompt":"Write an ML classifier in Python for a multiclass classification problem with 3 classes. Training data: 900 observations, 13 feature","completion":"import numpy as np from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LogisticRegression import warnings warnings.filterwarnings(\\"ignore\\") # Load the data X = np.load(\\"data.npy\\") y = np.load(\\"target.npy\\") # Pre-process the data scaler = StandardScaler() X_scaled = scaler.fit_transform(X) # Create a logistic regression model for multiclass classification lr_model = LogisticRegression(multi_class='ovr', solver='lbfgs', max_iter=500) # Train the model lr_model.fit(X_scaled, y)"},{"prompt":"Create a function in Python that prints the statistics of a given numeric array.","completion":"def print_statistics(arr): min_val = min(arr) max_val = max(arr) mean_val = sum(arr)/len(arr) std_val = np.std(arr) print(\\"Min: \\" + str(min_val)) print(\\"Max: \\" + str(max_val)) print(\\"Mean: \\" + str(mean_val)) print(\\"Standard Deviation: \\" + str(std_val))"},{"prompt":"Build a Python script that takes an array of numbers as input and prints the maximum element. [1,4,7,3]","completion":"def find_max(arr): max_value = -float('inf') for num in arr: if num > max_value: max_value = num return max_value arr = [1,4,7,3] result = find_max(arr) print(result)"},{"prompt":"Design an algorithm in Python that returns true if a given string is a palindrome.","completion":"def is_palindrome(s): # Reverse the string rev = ''.join(reversed(s)) # Check if the string is equal to its reverse if (s == rev): return true return false"},{"prompt":"Create an algorithm in Python that takes a string as input and returns a list of words from that string. Hello World","completion":"def string_to_words(s): return s.split(' ') words = string_to_words('Hello World') print(words)"},{"prompt":"Create a web scraper in Python that extracts the title, author, and publish date of all articles on the New York Times website. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Get the webpage r = requests.get('https://www.nytimes.com/') # Create a BeautifulSoup object soup = BeautifulSoup(r.text, 'html.parser') # Extract all articles articles = soup.find_all('div', class_='css-6p6lnl') # Create a list to store all article data article_data = [] # Loop through each article and extract data for article in articles: # Title title = article.find('h2').text # Author author = article.find('span', class_='css-1pfq5u').text # Publish date publish_date = article.find('time').text # Store data in the list article_data.append({ 'title': title, 'author': author, 'publish_date': publish_date }) print(article_data)"},{"prompt":"Write a Python program to sort a list of tuples according to its second parameter in ascending order. list = [(yellow, 28), (blue, 30), (black, 25), (pink, 45)]","completion":"def sort_tuples(list): \\"\\"\\"Function to sort tuples according to their second parameter\\"\\"\\" list.sort(key = lambda x : x[1]) return list #Example: print(sort_tuples(list))"},{"prompt":"Create a Python script that takes two string variables as inputs and prints out the shorter of the two. a = Hello world b = Goodbye world","completion":"if len(a) < len(b): print(a) else: print(b)"},{"prompt":"Create a function that returns multiple values in Python. No input needed.","completion":"def multiple_values(): x = 2 y = 7 z = \\"Hello\\" return x, y, z x, y, z = multiple_values() print(x, y, z) # 2 7 Hello"},{"prompt":"Generate a recursive function in Python to compute the Fibonacci series","completion":"def Fib_recursive(n): if n <= 1: return n else: return Fib_recursive(n - 1) + Fib_recursive(n - 2)"},{"prompt":"Compose a python list comprehension that derive the squares of the integers from 0 to 9","completion":"result = [x**2 for x in range(10)]"},{"prompt":"Generate a Python program to flatten a given nested list. nested_list = [[1,2,[3]],4]","completion":"def flatten(lst): #Empty list to add the flatten items flat_list = [] #Loop through the list items for item in lst: #If the item is a list, then call the flatten function recursively if type(item) is list: flat_list.extend(flatten(item)) # Else append the item to the list else: flat_list.append(item) #Return the list return flat_list # Sample nested_list = [[1,2,[3]],4] flat_list = flatten(nested_list) print (flat_list) # Output: [1, 2, 3, 4]"},{"prompt":"Create a program in Python to encrypt words using the Ceasar Cipher. Write a function that takes a word and rotates the characters by a specified number of places. Input word: hello Number of places: 2","completion":"def caesar_cipher(word, places): encrypted_word = \\"\\" for ch in word: ascii_code = ord(ch) ascii_code += places encrypted_word += chr(ascii_code) return encrypted_word message = \\"hello\\" encrypted_message = caesar_cipher(message, 2) print(encrypted_message) # Outputs: \\"jgnnq\\""},{"prompt":"Generate a python function that takes a list of strings and returns the string concatenation of them. [Hello, World, How, are, you]","completion":"def concatenateString(list): result = \\"\\" for item in list: result += item return result print(concatenateString([\\"Hello\\", \\"World\\", \\"How\\", \\"are\\", \\"you\\"]))"},{"prompt":"Write a deep learning network in Python that takes as input a twodimensional array of floats and predicts a category for it. Example array: [[0.9, 0.1], [0.8, 0.2], [0.7, 0.3]]","completion":"import tensorflow as tf # Model definition model = tf.keras.Sequential([ tf.keras.layers.Flatten(input_shape=(2,)), tf.keras.layers.Dense(16, activation='relu'), tf.keras.layers.Dense(1, activation='sigmoid') ]) # Compile the model model.compile( optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'] ) # Train the model model.fit(data, labels, epochs=10)"},{"prompt":"Generate a python code to calculate the sum of two numbers given. a = 10 b = 20","completion":"def calculate_sum(a, b): \\"\\"\\"Calculate the sum of two numbers given. Parameters ---------- a : int The first argument. b : int The second argument. Returns ------- int The sum of the two numbers given. \\"\\"\\" sum = a + b return sum"},{"prompt":"Design a Python program to find all the palindromes in a given list of words. [apple, eye, ball, abba]","completion":"mylist = [\\"apple\\", \\"eye\\", \\"ball\\", \\"abba\\"] palindromes = [word for word in mylist if word == word[::-1]] print(palindromes)"},{"prompt":"Develop an AIbased system in Python to classify an incoming request.","completion":"from sklearn import svm # Create the model model = svm.SVC() # Fit and predict the model model.fit(X, y) predictions = model.predict(X)"},{"prompt":"Construct a minisearch engine in Python using regular expressions. Not applicable","completion":"import re # Input text text = \\"This is my text and I am looking for a search term\\" # Search term search_term = \\"search\\" # Use regular expression to find search term pattern = re.compile(search_term) result = pattern.findall(text) # Print result print(result)"},{"prompt":"Write a Python script that takes a list of numbers as an input and outputs their average. [3, 5, 7, 9, 12]","completion":"def average(arr): return sum(arr) / len(arr) mylist = [3, 5, 7, 9, 12] print(\\"Average of mylist is:\\", average(mylist))"},{"prompt":"Create a function in Python for calculating Factorial of a number (n!).","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Create a Python class to manage a checking account.","completion":"class CheckingAccount: def __init__(self, balance): self.balance = balance def deposit(self, amount): self.balance += amount return self.balance def withdraw(self, amount): if self.balance - amount < 0: raise Exception(\\"Insufficient funds\\") self.balance -= amount return self.balance"},{"prompt":"Construct a deep neural network in Python to perform sentiment analysis on a collection of movie reviews.","completion":"import tensorflow as tf from tensorflow.keras.layers import Embedding, Dense, Dropout, LSTM from tensorflow.keras.models import Sequential #Create the network model = Sequential() #Add embedding layer model.add(Embedding(1000, 64)) #Add two LSTM layers model.add(LSTM(32, return_sequences = True)) model.add(LSTM(32)) #Add two dense layers model.add(Dense(64, activation='relu')) model.add(Dense(1, activation='sigmoid')) #Compile model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"},{"prompt":"Design an algorithm in Python to find the largest number in a list. [2, 5, 8, 10, 21]","completion":"def largest_num_in_list(arr): largest_num = 0 for num in arr: if num > largest_num: largest_num = num return largest_num if __name__ == '__main__': print(largest_num_in_list([2, 5, 8, 10, 21])) # 21"},{"prompt":"Design a Python class to construct a family tree. No input.","completion":"class FamilyTreeNode: def __init__(self, name, parent=None): self.name = name self.parent = parent self.children = [] def add_child(self, child): child.parent = self self.children.append(child) def get_siblings(self): siblings = [] if self.parent is not None: for child in self.parent.children: if not self.name == child.name: siblings.append(child.name) return siblings"},{"prompt":"Convert a given list into a list of tuples using Python. list = [1, 2, 3, 4, 5]","completion":"def listToTuple(list): tupleList = [] for element in list: tupleList.append((element,)) return tupleList print(listToTuple(list))"},{"prompt":"Write a python program to flatten a list of lists","completion":"def flatten(lst): flattened = [] for elem in lst: if isinstance(elem, list): flattened += flatten(elem) else: flattened.append(elem) return flattened if __name__ == '__main__': lst = [[1,2,3], [4,5], [6]] print(flatten(lst))"},{"prompt":"Create a Python script to generate a dictionary that includes numerical data from a given list. list1 = [1, 2, 3, 4, 5]","completion":"def generate_dict(list1): my_dict = {} for item in list1: my_dict[item] = item ** 2 return my_dict"},{"prompt":"Create a basic Python script that takes a user's input and calculates the sum of all digits in the input. Not applicable","completion":"# sum of all digits def sum_of_digits(number): total = 0 while number > 0: digit = number % 10 total += digit number = number // 10 return total # get user input number = int(input(\\"Enter a number: \\")) # calculate the sum result = sum_of_digits(number) # print the result print(\\"Sum of all digits:\\", result)"},{"prompt":"Code a Python program to calculate the permutation of a given string. String = ABC","completion":"def permutations(string): if len(string) == 0: return [] if len(string) == 1: return [string] perm_list = [] for c in string: for perm in permutations(string.replace(c, '')): perm_list.append(c + perm) return perm_list string = \\"ABC\\" print(permutations(string))"},{"prompt":"Generate an optimized code in Python to search an array and find the most frequent number. array = [3, 4, 6, 3, 2, 8, 6, 7, 3]","completion":"from collections import Counter def find_most_frequent(array): c = Counter(array) return c.most_common(1)[0][0] array = [3, 4, 6, 3, 2, 8, 6, 7, 3] print(find_most_frequent(array)) # 3"},{"prompt":"Develop a logic in Python to encode a sentence into pig latin.","completion":"def latin_encode(string): encoded_string = \\"\\" for word in string.split(): if word[0] not in \\"aeiou\\": word = word[1:]+word[0] word+=\\"ay\\" encoded_string += word+\\" \\" return encoded_string"},{"prompt":"Write a code in Python to check whether an input string ends with ing or not.","completion":"def endswith_ing(input_string): return input_string.endswith('ing') if __name__ == '__main__': my_string = \\"Greeting\\" is_ending_with_ing = endswith_ing(my_string) print(\\"Does the string end with 'ing'? -> \\" + str(is_ending_with_ing))"},{"prompt":"Create a python program that optimizes a given set of equations. x + 2y = 6 2x + y = 5","completion":"def optimize(eq_1, eq_2): # define variables and values x, y = 0, 0 x1, y1, c1 = eq_1 x2, y2, c2 = eq_2 # solve equations delta = (x1*y2) - (x2*y1) delta_x = (c1*y2) - (c2*y1) delta_y = (x1*c2) - (x2*c1) if delta == 0: return \\"No solution\\" x = delta_x / delta y = delta_y / delta return x, y solution = optimize((1, 2, 5), (2, 1, 6)) print(solution)"},{"prompt":"Create a Python program to automatically send an email when there is an exception in the code. Not applicable","completion":"import smtplib import logging def send_email(): sender_email = \\"my@mail.com\\" receiver_email = \\"your@mail.com\\" message = \\"\\"\\" Subject: Exception Alert There has been an exception in the code.\\"\\"\\" with smtplib.SMTP('smtp.gmail.com', 587) as server: server.ehlo() server.starttls() server.login(sender_email, 'SENDER_EMAIL_PASSWORD') server.sendmail(sender_email, receiver_email, message) logging.basicConfig(filename=\\"logfile.log\\", level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s') try: raise Exception except Exception: logging.error(\\"Error occurred\\", exc_info=True) send_email()"},{"prompt":"Create a class called <Person> in Python with three properties <name>, <age> and <height>.","completion":"class Person: def __init__(self, name, age, height): self.name = name self.age = age self.height = height"},{"prompt":"Create a program in Python to remove the duplicates from a given array. [1, 2, 5, 7, 1, 8, 5, 9, 8]","completion":"def remove_duplicates(arr): res = [] for i in arr: if i not in res: res.append(i) return res"},{"prompt":"Create a Python program to validate a username with the following criteria: the username must contain at least 8 characters, must start with a letter, and can contain digits and underscores. Not applicable","completion":"import re def is_valid_username(username): regex = r\\"^[a-zA-Z][a-zA-Z0-9_]{7,}\\" return re.match(regex, username) print(is_valid_username(\\"abcdefgh\\")) # Output: True print(is_valid_username(\\"1abcdefgh\\")) # Output: False"},{"prompt":"Generate a neural network in Python to solve a regression problem.","completion":"import numpy as np import keras from keras.models import Sequential from keras.layers import Dense #Defines the model model = Sequential() model.add(Dense(32, input_dim=5, activation='relu')) model.add(Dense(64, activation='relu')) model.add(Dense(1)) #Compiles the model model.compile(optimizer='rmsprop', loss='mean_squared_error', metrics=['mse']) #Fits the model to the training data model.fit(X_train, y_train, batch_size=32, epochs=10, verbose=1)"},{"prompt":"Write a function in Python to compare two given strings characterwise and return the position of the first difference. String1: String String2: String","completion":"def compare_strings_charwise(s1, s2): for i in range(min(len(s1), len(s2))): if s1[i] != s2[i]: return i return -1"},{"prompt":"Suggest a change to the following loop to make it more Pythonic. numbers = [1, 2, 3, 4, 5] for i in range(len(numbers)): print(numbers[i])","completion":"numbers = [1, 2, 3, 4, 5] for number in numbers: print(number)"},{"prompt":"mplement a validator in Python that checks the format of user input for a given field and throws an error if it is not valid. Not applicable","completion":"def validate(data, field, regex): # makes sure data is not empty if not data: raise ValueError('Data is required.') # makes sure data contains field if not field in data: raise ValueError('Field ' + field + ' is required.') # check format of data import re if not re.match(regex, data[field]): raise ValueError('Field ' + field + ' is not valid.')"},{"prompt":"Develop an algorithm in Python that takes an array of integers as input and creates a new array with the integers sorted in ascending order.","completion":"def sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [64, 34, 25, 12, 22, 11, 90] sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Create a Python program to separate an array into two parts based on a given predicate. myList = [1, 2, 3, 4, 5, 6, 7] predicate = lambda x : x<5","completion":"def separate_array(myList, predicate): leftList, rightList = [], [] for item in myList: if(predicate(item)): leftList.append(item) else: rightList.append(item) return leftList, rightList myList = [1, 2, 3, 4, 5, 6, 7] predicate = lambda x : x<5 leftList, rightList = separate_array(myList, predicate) print(\\"Left List is:\\") print(leftList) print(\\"Right List is:\\") print(rightList)"},{"prompt":"Write a Python program to display the all even elements from a given list. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def display_even_elements(list): \\"\\"\\"Function to display all the even elements from a given list\\"\\"\\" # List to store the even elements even_list = [] # Iterate through each element in the list for elem in list: # If even, append it to the list if elem % 2 == 0: even_list.append(elem) # Return the list return even_list # Given list list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Print the result print(display_even_elements(list))"},{"prompt":"Create a web API in Python to get records from a database table. Name of the database table: employee","completion":"from flask import Flask, request, jsonify import sqlite3 app = Flask(name) @app.route('/api/v1/employees', methods=['GET']) def get_employees(): conn = sqlite3.connect('employees.db') cur = conn.cursor() data = cur.execute('SELECT * from employee').fetchall() conn.close() return jsonify(data) if name == 'main': app.run(debug=True)"},{"prompt":"Create a Python script to generate all the combinations of a given list of integers. [1, 2, 3]","completion":"def generate_combinations(input_list): import itertools comb_list = [] # Get all possible combinations of the list for subset in itertools.combinations(input_list, len(input_list)): comb_list.append(subset) return comb_list"},{"prompt":"mplement an algorithm to call a web service using Python.","completion":"import requests def call_web_service(url): # send a GET request response = requests.get(url) # check for HTTP codes other than 200 if response.status_code != 200: raise Exception('Failed to get data:', response.status_code) # return the data return response.json()"},{"prompt":"Generate an optimized Python data structure for sorting a large list of numbers. [32, 66, 1, 4, 88, 29]","completion":"def optimized_sort(numbers): # Create a heap heap = [] # Insert each element into the heap for num in numbers: heapq.heappush(heap, num) # Pop elements from the heap and append to result list sorted_nums = [] while heap: sorted_nums.append(heapq.heappop(heap)) return sorted_nums"},{"prompt":"Please generate a Python script that calculates the mean of a given array of numbers. [4, 9, 3, 5]","completion":"def calculateMean(array): # sum up all elements in the array mean = 0 for i in range(len(array)): mean += array[i] # calculate the mean by dividing the sum by number of elements mean /= len(array) return mean array = [4, 9, 3, 5] mean = calculateMean(array) print(mean)"},{"prompt":"Modify the Python code below to reverse the string input. string = “hello world”","completion":"string = “hello world” # Reverse the string rev_string = \\"\\" for char in string: rev_string = char + rev_string # Print the reversed string print(rev_string)"},{"prompt":"Write a Python program to return the difference between the largest and smallest elements in a given list of integers. [10, 4, 2, 5, 7]","completion":"def diff(nums): return max(nums) - min(nums) print(diff([10, 4, 2, 5, 7])) # 8"},{"prompt":"Write a Python program to convert a given string to list of words Hello world","completion":"def convert_to_list(s): return s.split() string = 'Hello world' result = convert_to_list(string) print(result)"},{"prompt":"With the input, create a Python program which takes in a sentence and returns the word which appears most frequent. I am a programmer, so I program every day","completion":"def most_frequent_word(sentence): \\"\\"\\"Return the word which appears most frequent in a sentence.\\"\\"\\" words = {} for word in sentence.split(): if word in words: words[word] += 1 else: words[word] = 1 return max(words, key=words.get)"},{"prompt":"Create a Python script to define a set that contains the names of the days of the week.","completion":"# Create a set containing the names of the days of the week days_of_the_week = set([\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"]) # Print the set print(days_of_the_week)"},{"prompt":"Create a Python script to generate a classifier trained on a kmeans algorithm for a given dataset. [1.5 2.6 3.2], [4.3 5.2 6.2], [1.2 0.2 4.3]","completion":"import numpy as np from sklearn.cluster import KMeans import matplotlib.pyplot as plt # Build a dataset data = np.array([[1.5,2.6,3.2], [4.3,5.2,6.2], [-1.2,0.2,4.3]]) # Create and train the model print(\\"Building model...\\") model = KMeans(n_clusters=4) model.fit(data) # Make predictions predictions = model.predict(data) # Visualize the results plt.scatter(data[:,0], data[:,1], c=predictions, cmap='viridis') plt.xlabel(\\"Feature 1\\") plt.ylabel(\\"Feature 2\\") plt.show()"},{"prompt":"Create a Python script to find all subsets of a given set.","completion":"def all_subsets(s): subsets = [] for i in range(2**len(s)): bitmask = bin(i)[2:] subset = [] for j in range(len(s)): if bitmask[j] == \\"1\\": subset.append(s[j]) subsets.append(subset) return subsets"},{"prompt":"Create a class object in Python which takes in two numbers and finds the sum and product.","completion":"class Numbers(object): def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def find_sum(self): return self.num1 + self.num2 def find_product(self): return self.num1 * self.num2 #creating an object num_object = Numbers(22, 10) #finding sum sum_result = num_object.find_sum() #finding product product_result = num_object.find_product()"},{"prompt":"Create a Python program to print an encrypted message using a given cipher key. message = hellohello cipher_key = 3","completion":"#Input message = \\"hellohello\\" cipher_key = 3 #Solution alphabet = \\"abcdefghijklmnopqrstuvwxyz\\"; cipher = alphabet[cipher_key:] + alphabet[:cipher_key] encoded_message = \\"\\" for char in message: encoded_message += cipher[alphabet.find(char)] print(encoded_message) # khoorkhoor"},{"prompt":"Write Python code to implement this logic: if the number is even, then double the value; otherwise, subtract 1 from the value.","completion":"def modify_number(number): if number % 2 == 0: return number * 2 else: return number - 1"},{"prompt":"Write a Python function that returns the sum of two integers.","completion":"def sum_integers(num1, num2): return num1 + num2"},{"prompt":"Write a Python program that categorizes a product as red, green or blue. red: tomatoes green: apples blue: chocolate","completion":"def product_category(product): products = {\\"tomatoes\\": \\"red\\", \\"apples\\": \\"green\\", \\"chocolates\\": \\"blue\\"} if product in products: return products[product] else: return \\"Invalid product\\""},{"prompt":"Create a Python script to scrape the HTML of a website and extract information from it. url = 'http://www.example.com'","completion":"import requests from bs4 import BeautifulSoup # Fetch page page = requests.get(url) # Parse HTML into BeautifulSoup object soup = BeautifulSoup(page.text, 'html.parser') # Extract required data title = soup.title.string description = soup.find(attrs={'name': 'description'}).get('content') # Print out the data print('Title:', title) print('Description:', description)"},{"prompt":"Design a class in python with methods to perform addition, subtraction, multiplication, and division. Not applicable","completion":"class MathOperation: def __init__(self): self.val1 = None self.val2 = None def set_values(self, val1, val2): self.val1 = val1 self.val2 = val2 def add(self): return self.val1 + self.val2 def subtract(self): return self.val1 - self.val2 def multiply(self): return self.val1 * self.val2 def divide(self): return self.val1 / self.val2"},{"prompt":"Create a library in Python with modules for creating, displaying, and restoring geometric shapes such as a square, circle, and triangle. Not applicable","completion":"# shapes_lib.py class Shape: \\"\\"\\"Base class for creating shapes.\\"\\"\\" def __init__(self, sides, *args): self.sides = sides class Circle(Shape): \\"\\"\\"A circle with a fixed radius.\\"\\"\\" def __init__(self, radius): super().__init__(1) self.radius = radius def area(self): return 3.14 * (self.radius ** 2) class Triangle(Shape): \\"\\"\\"A triangle with sides of varying lengths.\\"\\"\\" def __init__(self, side1, side2, side3): super().__init__(3) self.side1 = side1 self.side2 = side2 self.side3 = side3 def area(self): s = (self.side1 + self.side2 + self.side3) / 2 return (s * (s - self.side1) * (s - self.side2) * (s - self.side3)) ** 0.5 class Square(Shape): \\"\\"\\"A square with four equal sides.\\"\\"\\" def __init__(self, side): super().__init__(4) self.side = side def area(self): return self.side**2 def restore_shape(shape_data): shape_type = shape_data['type'] if shape_type == 'circle': return Circle(shape_data['radius']) elif shape_type == 'triangle': return Triangle(shape_data['side1'], shape_data['side2'], shape_data['side3']) elif shape_type == 'square': return Square(shape_data['side'])"},{"prompt":"Create a Python function to classify whether a given sentence is spam or not. Sentence: Claim your free gift by clicking the link below!","completion":"def is_spam(sentence): spam_words = [\\"free\\", \\"gift\\", \\"click\\", \\"link\\"] words = sentence.split(' ') for word in words: word = word.lower() if word in spam_words: return True return False"},{"prompt":"Create a singly linked list in python","completion":"class Node: def __init__(self, data, next=None): self.data = data self.next = next class LinkedList: def __init__(self, head=None): self.head = head def append(self, data): new_node = Node(data) if self.head is None: self.head = new_node return node = self.head while node.next is not None: node = node.next node.next = new_node"},{"prompt":"Use Python to create a website with a title and a form.","completion":"from flask import Flask, render_template, request app = Flask(__name__) @app.route('/') def homepage(): return render_template('index.html', title='My Website') @app.route('/form', methods=['GET', 'POST']) def form(): if request.method == 'POST': email = request.form.get('email') return \\"Your email address is {}\\".format(email) else: return render_template('form.html', title='Form') if __name__ == '__main__': app.run()"},{"prompt":"Create a Python program for solving a 9x9 Sudoku puzzle and print the complete puzzle to the console.","completion":"def solve_sudoku(matrix): # find empty spaces empty_spaces = find_empty_spaces(matrix) if not empty_spaces: #No empty spaces return True else: row, col = empty_spaces # choose valid entries for i in range(1,10): # entry validate if is_validated(matrix, i, (row, col)): matrix[row][col] = i if solve_sudoku(matrix): # jump out of function return True matrix[row][col] = 0 return False def find_empty_spaces(matrix): for i in range(9): for j in range(9): if matrix[i][j] == 0: return i, j # row, col return None def is_validated(matrix, number, position): # check row for i in range(9): if matrix[position[0]][i] == number and position[1] != i: return False # check column for i in range(9): if matrix[i][position[1]] == number and position[0] != i: return False # check 3x3 box box_x = position[1] // 3 box_y = position[0] // 3 for i in range(box_y * 3, box_y * 3 + 3): for j in range(box_x * 3, box_x * 3 + 3): if matrix[i][j] == number and (i,j) != position: return False return True # Solve Sudoku solved = solve_sudoku(matrix) if solved: print('Sudoku solved!') for i in range(9): for j in range(9): print(matrix[i][j], end=\\" \\") print() else: print('No solution')"},{"prompt":"Create a Python program to search a string and print the index of all instances of a specific character. string = abcdefghi character = d","completion":"def search_character(string, character): indices = [] for i in range(len(string)): if string[i] == character: indices.append(i) return indices print(search_character(string, character)) # [3]"},{"prompt":"Optimize the following Python code for counting the number of words in an input string. s = This is a sample string","completion":"# Count number of words in a string def count_words(s): # remove unnecessary characters s = s.replace(',', '').replace('.', '') # split string into list of words words = s.split(' ') # return the length of the list (number of words) return len(words) s = \\"This is a sample string\\" words_count = count_words(s) print(words_count)"},{"prompt":"Create a program to print out the pyramid pattern in Python. rows = 5","completion":"for i in range(rows): for j in range(i): print(\\"#\\", end=\\"\\") print()"},{"prompt":"Create a Python function that checks if a given string consists of all unique characters.","completion":"def isUnique(s): # Create a list that contains all characters chars = [] # Iterate through the string for char in s: # Check if the character is already in the list if char in chars: return False # Add character to the list chars.append(char) # Return True when the loop is finished return True"},{"prompt":"Create a web application that will store and display a user's contacts.","completion":"We can create a web application for storing and displaying a user's contacts. We can use HTML, CSS, and JavaScript for creating the front-end of the application. Then, we can use Python to create the backend of the application. We can also use a database like MongoDB to store the user's contacts."},{"prompt":"Create a clustering algorithm in Python to identify distinct patterns in a large dataset. Not applicable","completion":"import numpy as np from sklearn.cluster import KMeans from sklearn.metrics import silhouette_score # Load the dataset X = np.load('data/X.npy') # Initialize KMeans kmeans = KMeans(n_clusters=5, random_state=42) # Fit the model kmeans.fit(X) # Get the labels labels = kmeans.labels_ # Calculate the silhouette score silhouette_score = silhouette_score(X, labels) print('Silhouette Score: {:.4f}'.format(silhouette_score))"},{"prompt":"dentify the type of an expression in Python. x = Apple","completion":"The expression x is of type string."},{"prompt":"Write a Python function to check whether a year is leap year or not.","completion":"def is_leap_year(year): if (year % 4 == 0): if (year % 100 == 0): if (year % 400 == 0): return True else: return False else: return True else: return False year = int(input(\\"Enter a year: \\")) if is_leap_year(year): print(year, \\"is a leap year\\") else: print(year, \\"is not a leap year\\")"},{"prompt":"Write a function in Python to merge two sorted arrays. arr1 = [1, 4, 7, 8] arr2 = [3, 5, 9]","completion":"def merge_arrays(arr1, arr2): merged_array = arr1 + arr2 return sorted(merged_array) merged_array = merge_arrays(arr1, arr2) print(merged_array)"},{"prompt":"Create a Python function for organizing a list of strings into two separate lists, one for words containing two or more vowels and one for words containing one vowel or no vowels. [apple, computer, banana, water, enzyme, cake]","completion":"def list_organizer(list_of_strings): words_2_vowels = [] words_1_vowel_or_none = [] vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] for word in list_of_strings: count = 0 for char in word: if char in vowels: count += 1 if count >= 2: words_2_vowels.append(word) else: words_1_vowel_or_none.append(word) return (words_2_vowels, words_1_vowel_or_none)"},{"prompt":"Create a Python script to print the sum of all numbers divisible by 3 or 7 in a list. [1, 2, 3, 4, 5, 6, 7, 8, 9 ,10, 11, 12, 13, 14]","completion":"nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14] total = 0 for num in nums: if (num % 3 == 0) or (num % 7 == 0): total += num print(total) # Output: 42"},{"prompt":"Design a Python function which takes in a list of integers as an input and returns a tuple containing the number of positive and negative entries in the list. [3, 1, 5, 2, 8]","completion":"def countPosAndNeg(lst): positive = 0 negative = 0 for num in lst: if num >= 0: positive += 1 else: negative += 1 return (positive, negative)"},{"prompt":"Create a Python program to determine if a list is monotonically increasing. list = [1, 3, 4, 5, 9, 10]","completion":"def check_monotonic(list): is_monotonic = True for i in range(len(list)-1): if(list[i] > list[i+1]): is_monotonic = False return is_monotonic list = [1, 3, 4, 5, 9, 10] print(check_monotonic(list)) # Output: True"},{"prompt":"Write an objectoriented program in Python to create a calculator.","completion":"class Calculator: def __init__(self): pass def add(self, num1, num2): return num1 + num2 def subtract(self, num1, num2): return num1 - num2 def multiply(self, num1, num2): return num1 * num2 def divide(self, num1, num2): return num1 / num2"},{"prompt":"Use objectoriented programming principles in Python to create a class to represent a User profile.","completion":"class UserProfile(): def __init__(self, name, email, address, phone_number): self.name = name self.email = email self.address = address self.phone_number = phone_number def get_name(self): return self.name def get_email(self): return self.email def get_address(self): return self.address def get_phone_number(self): return self.phone_number"},{"prompt":"Design a Python class that creates a linked list.","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, data): new_node = Node(data) if self.head is None: self.head = new_node else: current = self.head while current.next is not None: current = current.next current.next = new_node"},{"prompt":"Create a Python script that takes a string as an input and outputs a list of words that all contain at least one vowel. Hello my name is John","completion":"['Hello', 'name', 'John']"},{"prompt":"Create a python program to encrypt a message using RSA encryption.","completion":"from Crypto.PublicKey import RSA def encrypt(message): #Generate public and private keys key = RSA.generate(1024) public_key = key.publickey() #Encrypt the message with the public key encrypted_message = public_key.encrypt(message, 32) return encrypted_message"},{"prompt":"Produce code to print out the multiplication table of a given number in Python. Number: 5","completion":"# Program to print the multiplication table num = 5 # Iterate from 1 to 10 for i in range(1,11): print(f'{num} X {i} = {num * i}')"},{"prompt":"Optimize a function in Python which takes a list and returns the sum of all its elements. [1, 2, 3]","completion":"def sum_list_elements(lst): sum = 0 for item in lst: sum += item return sum print(sum_list_elements([1, 2, 3]))"},{"prompt":"Create a Python program that combines two lists and returns a single list that contains a combination of elements from both. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"def combine_lists(list1, list2): return list1 + list2 list1 = [1, 2, 3] list2 = [4, 5, 6] print(combine_lists(list1, list2)) # [1, 2, 3, 4, 5, 6]"},{"prompt":"Write a function in Python which takes a string as input and returns its reversed version. Input string: Hello World","completion":"def reverse_string(string): # Create an empty string rev_str = \\"\\" # Iterate over characters of the given string for char in string: # Prepend the character to the beginning of rev_str rev_str = char + rev_str return rev_str # Driver code string = \\"Hello World\\" print(reverse_string(string)) # Output: dlroW olleH"},{"prompt":"Draft a code to find the most frequent character from a string. Python Program","completion":"def most_frequent_char(data): # Create a dictionary of characters frequency data_dict = {} for char in data: if char not in data_dict: data_dict[char] = 0 data_dict[char] += 1 # Find the character with highest frequency max_freq = 0 max_freq_char = None for char, freq in data_dict.items(): if freq > max_freq: max_freq = freq max_freq_char = char return max_freq_char most_frequent_char(\\"Python Program\\") # Output: 'p'"},{"prompt":"Generate code to deserialize JSON into Python objects data_json = '{name:John Doe,age:18,hobbies:[reading,swimming,gaming],contact:{email:johndoe@example.com,mobile:+1900000000}}'","completion":"import json data = json.loads(data_json) # Output: data = { \\"name\\": \\"John Doe\\", \\"age\\": 18, \\"hobbies\\": [\\"reading\\", \\"swimming\\", \\"gaming\\"], \\"contact\\": { \\"email\\": \\"johndoe@example.com\\", \\"mobile\\": \\"+1900000000\\" } }"},{"prompt":"Write a Python program that takes in a string and converts it to an integer.","completion":"def convert_string_to_int(string): x = 0 for i in string: x = x*10 + ord(i) - ord('0') return x"},{"prompt":"Create a function in Python to print a number pyramid given a height. 3","completion":"def pyramid(h): for i in range(0, h): for j in range(0, h-i-1): print(end=\\" \\") for j in range(0, i+1): print(\\"* \\", end=\\"\\") print(\\"r\\") pyramid(3)"},{"prompt":"Build an API endpoint in Python with Flask that takes in a marked up English sentence and returns the core subject and verb phrase. He went to the store","completion":"from flask import Flask, request import spacy nlp = spacy.load(\\"en_core_web_sm\\") app = Flask(__name__) @app.route(\\"/subject-verb-extraction\\", methods = [\\"POST\\"]) def extract_subject_verb(): if request.method == \\"POST\\": data = request.json sentence = data[\\"sentence\\"]e doc = nlp(sentence) subtokens = [token.text for token in doc if (token.dep_ == \\"nsubj\\" or token.dep_ == \\"ROOT\\")] verb_pattern = \\" \\".join(subtokens) return verb_pattern if __name__ == \\"__main__\\": app.run()"},{"prompt":"Create a textbased game using Python.","completion":"# Game setup name = input(\\"What is your name? \\") print(\\"Welcome, \\" + name + \\"!\\") # Main loop while True: # Get player input command = input(\\"What would you like to do? \\") # Execute command if command == \\"go north\\": print(\\"You head north.\\") elif command == \\"go east\\": print(\\"You head east.\\") elif command == \\"go south\\": print(\\"You head south.\\") elif command == \\"go west\\": print(\\"You head west.\\") elif command == \\"quit\\": print(\\"Goodbye, \\" + name + \\"!\\") break else: print(\\"Sorry, I don't understand.\\")"},{"prompt":"Create an application with a GUI interface using Python for displaying the weather conditions for a chosen city. Not applicable","completion":"import tkinter as tk import requests # Create the window and set its title window = tk.Tk() window.title(\\"Weather App\\") # Create a label for entering the city name city_label = tk.Label(text=\\"City\\") city_label.grid(column=0, row=0) # Create a textbox for entering the city name city_text = tk.StringVar() city_entry = tk.Entry(textvariable=city_text) city_entry.grid(column=1, row=0) # Create a function for fetching and displaying the weather def show_weather(): city = city_text.get() # Fetch the weather from API module api_key = \\"API KEY\\" url = f\\"http://api.openweathermap.org/data/2.5/weather?q={city}&units=imperial&appid={api_key}\\" response = requests.get(url) weather = response.json() # Display the weather in the label label.configure(text=weather) # Create a button for fetching the weather button = tk.Button(text=\\"Show Weather\\", command=show_weather) button.grid(column=1, row=1) # Create a label for displaying the weather label = tk.Label(text=\\"\\") label.grid(column=0, row=1, columnspan=2) # Start the window window.mainloop()"},{"prompt":"Try applying Hangman game using Python.","completion":"import random import string def choose_word(): # Choose random secret word words = [\\"potato\\", \\"banana\\", \\"apple\\", \\"pear\\"] return random.choice(words) def guess_input(): # User input for guessing letter = input(\\"Guess a letter or word: \\").lower() return letter def check_guess(letter, secret_word, guesses): # Check if letter is in the secret word result = { \\"letter\\": letter, \\"is_in_word\\": letter in secret_word, \\"guesses\\": guesses, } return result def update_round_state(secret_word, current_round, result): # Update the round state letter = result.get(\\"letter\\") guesses = result.get(\\"guesses\\") if result.get(\\"is_in_word\\") == False: guesses -= 1 current_round.set(\\"guesses\\", guesses) else: for index, char in enumerate(secret_word): if letter == char: current_round.set(\\"hidden_word\\", char, index) def end_game(guesses): if guesses == 0: return False else: return True # Choose secret word and set guessed word length secret_word = choose_word() hidden_word = [\\"_\\" for i in range(len(secret_word))] # Initialize variables for the round guesses = 6 round_state = { \\"secret_word\\": secret_word, \\"hidden_word\\": hidden_word, \\"guesses\\": guesses, } # Main loop for the game while end_game(round_state.get(\\"guesses\\")) == True: # Print current round info print(\\"Secret word: {}\\".format(round_state.get(\\"hidden_word\\"))) print(\\"Guesses left: {}\\".format(round_state.get(\\"guesses\\"))) # Get and check user input letter = guess_input() result = check_guess(letter, round_state.get(\\"secret_word\\"), round_state.get(\\"guesses\\")) # Update round state update_round_state( round_state.get(\\"secret_word\\"), round_state, result ) # Check if the game needs to end if \\"_\\" not in round_state.get(\\"hidden_word\\"): print(\\"Congratulations! You won the game!\\") break if end_game(round_state.get(\\"guesses\\")) == False: print(\\"Oh no, you have run out of guesses. The secret word is \\"{}\\"\\".format(secret_word))"},{"prompt":"Create a POST API endpoint for an ecommerce application in Python that allows customers to order items from the website. { customer_id: 123456789, items: [ { item_id: AB1236, quantity: 5 }, { item_id: CD7890, quantity: 3 } ] }","completion":"import flask from flask import request @app.route('/order', methods=['POST']) def order(): data = request.get_json() customer_id = data['customer_id'] items = data['items'] # Process order return flask.jsonify({'message': 'Order processed'}))"},{"prompt":"Write a function in Python which takes an array of strings and returns a new array containing only the strings with length greater than 3.","completion":"def filter_by_length(strings): return [s for s in strings if len(s) > 3]"},{"prompt":"Create a Python program to display the prime numbers between 1 and 100.","completion":"for num in range(2,101): for i in range(2,num): if (num % i) == 0: break else: print(num)"},{"prompt":"Create a program to find the Mean, Median and Mode of an array of numbers in Python.","completion":"def mean(numbers): return sum(numbers) / len(numbers) def median(numbers): numbers.sort() middle_index = int(len(numbers)/2) if len(numbers) % 2 == 0: return (numbers[middle_index] + numbers[middle_index-1])/2 else: return numbers[middle_index] def mode(numbers): max_freq = 0 modes = [] for num in set(numbers): count = numbers.count(num) if count > max_freq: modes.clear() modes.append(num) max_freq = count elif count == max_freq and num not in modes: modes.append(num) return modes"},{"prompt":"Create a Python program to generate an array of all possible unique combinations of 3 elements from a given array. [1, 2, 3, 4]","completion":"def combinations(arr): sol = [] for i in range(len(arr)): for j in range(len(arr)): for k in range(len(arr)): if i != j and j != k and k != i: sol.append([arr[i], arr[j], arr[k]]) return sol print(combinations([1, 2, 3, 4])) # Outputs [[1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4]]"},{"prompt":"Develop a Python program that prints the maximum and minimum numbers from a given list. [1, 3, 7, 4, 9, 0]","completion":"list_num = [1, 3, 7, 4, 9, 0] min_num = min(list_num) max_num = max(list_num) print('Minimum is:', min_num) print('Maximum is:', max_num)"},{"prompt":"Create a Python class for managing a list of contacts. The class should have methods for adding a contact, deleting a contact, and listing all contacts. Not applicable","completion":"class ContactManager: def __init__(self): self.contact_list = [] def add_contact(self, contact): self.contact_list.append(contact) def delete_contact(self, contact): self.contact_list.remove(contact) def list_contacts(self): for contact in self.contact_list: print(contact)"},{"prompt":"Create a function in Python to produce a list of all combinations of given elements from two different lists. list_1 = [1, 2 , 3] list_2 = [4, 5]","completion":"def get_combos(list1, list2): combo_list = [] for i in list1: for j in list2: combo_list.append([i, j]) return combo_list list1 = [1, 2, 3] list2 = [4, 5] combos = get_combos(list1, list2) print(combos) # Output: [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]"},{"prompt":"Write a Python program to compare two dictionaries to check if they are equal. d1 = {'a':1, 'b':2, 'c':3} d2 = {'a':1, 'b':2, 'c':4}","completion":"def compare_dicts(dict1, dict2): if dict1 == dict2: return True return False result = compare_dicts(d1, d2) print(result)"},{"prompt":"Develop a linear regression model in Python which takes an array of numbers as input and returns the slope and intercept of the best fit line. x = [2, 3, 5, 6, 9, 11] y = [3, 4, 8, 10, 14, 16]","completion":"import numpy as np x_mean = np.mean(x) y_mean = np.mean(y) n = len(x) #Using the formula to calculate the slope slope = (sum([xi*yi for xi,yi in zip(x,y)]) - n*x_mean*y_mean)/(sum([xi**2 for xi in x]) - n * x_mean * x_mean) #using the formula to calculate the intercept intercept = y_mean - slope * x_mean print(\\"slope: \\",slope,\\" intercept:\\",intercept)"},{"prompt":"Create a Python program to identify words of length k in a given string. String: This is a program to identify words of length 3 Length: 3","completion":"def find_words_of_length_k(sentence, k): words = sentence.split(' ') words_of_length_k = [] for word in words: if len(word) == k: words_of_length_k.append(word) return words_of_length_k sentence = \\"This is a program to identify words of length 3\\" k = 3 print(find_words_of_length_k(sentence, k))"},{"prompt":"Create a program in Python to implement linear search.","completion":"def linear_search(data, target): for i in range(len(data)): if data[i] == target: return i return -1"},{"prompt":"Given a string, write a Python function to lowercase all vowels. String = 'Hello World'","completion":"def lower_vowels(str): vowels = \\"aeiouAEIOU\\" new_str = \\"\\" for c in str: if c in vowels: new_str += c.lower() else: new_str += c return new_str"},{"prompt":"Build a recommmendation system in Python that will recommend books to a given user based on their past reads. The user has previously read Alice in Wonderland, To Kill a Mockingbird, and Dracula.","completion":"import numpy as np import pandas as pd from sklearn.neighbors import NearestNeighbors # Read in data data = pd.read_csv('data.csv') # Make recommendations X = data.iloc[:, 2:].values nbrs = NearestNeighbors(n_neighbors=3).fit(X) # Test on 3 books test_books = ['Alice in Wonderland', 'To Kill a Mockingbird', 'Dracula'] # Find the similar books test_book_index = [data[data['title'] == book_name].index[0] for book_name in test_books] # Get distances and indices of the similar books distances, indices = nbrs.kneighbors([X[test_book_index]]) # Display the recommended books print('Recommendations for: {0}'.format(test_books)) for title, idx in zip(data.iloc[indices[0][1:]]['title'], indices[0][1:]): print('{0}: {1}, with a distance of {2}'.format( title, data.iloc[idx]['author'], distances[0][1:] ))"},{"prompt":"Create a program in Python for finding the maximum in a list of numbers. [2, 3, 4, 9, 5]","completion":"def find_max(lst): # Initialize maximum element max = lst[0] # Traverse list element # from second and compare # every element with current max for i in range(1, len(lst)): if lst[i] > max: max = lst[i] return max max_num = find_max([2, 3, 4, 9, 5]) print(\\"The maximum number in the list is:\\",max_num)"},{"prompt":"Design a function in Python which takes a string and returns the string with the last word capitalized. mystring = This is a simple string","completion":"def capitalize_last_word(mystring): words = mystring.split() words[-1] = words[-1].capitalize() return ' '.join(words) result = capitalize_last_word(mystring) print(result)"},{"prompt":"Design a Python program to determine if one string is a substring of another. Hello, Hello World","completion":"def isSubstring(str1, str2): if len(str1) > len(str2): return False for i in range(len(str2)): if (str2[i: i+len(str1)] == str1): return True return False str1 = \\"Hello\\" str2 = \\"Hello World\\" print(isSubstring(str1, str2))"},{"prompt":"Write a Python program to take two numbers as input and find the greatest common divisor. 36 and 18","completion":"def gcd(a, b): if a == 0: return b while b != 0: if a > b: a = a - b else: b = b - a return a # Test print(gcd(36, 18)) # Output: 18"},{"prompt":"Given a list of integers with no duplicates, write a python program to determine if all elements in the list are perfect squares.","completion":"def is_perfect_square(lst): for num in lst: if (int(num ** 0.5)) ** 2 != num: return False return True"},{"prompt":"Design a Python program to sort a list of dictionaries by a given field. [ { name: A, age: 25, salary: 100 }, { name: B, age: 35, salary: 200 }, { name: C, age: 15, salary: 50 }, ]","completion":"def sort_dicts_by_field(dict_list, field): sorted_list = sorted(dict_list, key=lambda k: k[field]) return sorted_list"},{"prompt":"Generate a Python code snippet to sum all numbers from a list of integers. [2, 7, 8, 4, 5]","completion":"sum = 0 for num in [2, 7, 8, 4, 5]: sum += num print(sum)"},{"prompt":"Write a Python program to get the maximum and minimum value in a dictionary. data = {'John': 24, 'Adam': 45, 'Kate': 12}","completion":"data = {'John': 24, 'Adam': 45, 'Kate': 12} def get_max_min(data): \\"\\"\\"This function will return the maximum and minimum value of a given dictionary\\"\\"\\" max_value = max(data.values()) min_value = min(data.values()) return max_value, min_value if __name__ == '__main__': data = {'John': 24, 'Adam': 45, 'Kate': 12} max_value, min_value = get_max_min(data) print('Max Value: {}, Min Value: {}'.format(max_value, min_value))"},{"prompt":"Optimize a Python function to reverse a string quickly by using slice notation.","completion":"def reverse_string(string): \\"\\"\\" Takes a string and returns it reversed quickly with Python slice notation. \\"\\"\\" return string[::-1]"},{"prompt":"Design a Python function that takes a string and returns its length.","completion":"def find_string_length(string): length = 0 for char in string: length += 1 return length result = find_string_length('Hello World!') print(result)"},{"prompt":"Create a function in Python to add two numbers.","completion":"def adder(a, b): return a + b"},{"prompt":"Create a regex pattern in Python to check if a given string contains only lowercase letters.","completion":"import re def check_lowercase(text): pattern = r\\"^[a-z]*\\" if re.fullmatch(pattern, text): return True else: return False"},{"prompt":"Create a function in Python that takes as input an array of numbers and a target number and returns true if the target number can be obtained by adding elements in the array. Array: [4, 8, 15, 16, 23, 42] Target number: 50","completion":"def canSumToTarget(array, target): if target == 0: return True n = len(array) # dp[i][j] stores if number j can be # represented by a subset of array[0..i-1] dp = [[False for j in range(target + 1)] for i in range(n + 1)] # Initialize base case in dp array for i in range(n + 1): dp[i][0] = True for i in range(1, n + 1): for j in range(1, target + 1): if j >= array[i-1]: dp[i][j] = dp[i - 1][j] or dp[i - 1][j - array[i-1]] else: dp[i][j] = dp[i - 1][j] return dp[n][target] # Driver Code array = [4, 8, 15, 16, 23, 42] target = 50 if canSumToTarget(array, target): print('Target number can be obtained by adding elements in the array.') else: print('Target number cannot be obtained by adding elements in the array.')"},{"prompt":"Create a loop in Python that sums to a given number.","completion":"target_sum = 10 current_sum = 0 i = 0 while current_sum < target_sum: current_sum = current_sum + i i = i + 1 print(i - 1)"},{"prompt":"Develop an algorithm in Python to create a Fibonacci sequence up to the nth number. n=10","completion":"def fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return fibonacci(n-1)+fibonacci(n-2) print(\\"Fibonacci series up to\\",n,\\":\\") for i in range(1,n+1): print(fibonacci(i))"},{"prompt":"Create a Python script that prints out the Fibonacci sequence of a given number. A value n = 6","completion":"def fibonacci_sequence(n): a, b = 0, 1 for i in range(n): print(a) a, b = b, a+b fibonacci_sequence(6) # Output: # 0 # 1 # 1 # 2 # 3 # 5"},{"prompt":"Compose a Python method to print the flat list from a given 2D list. Input: test_list = [[5, [6, 13]], [4], [4, [6, 7]]]","completion":"def flat_list(lst): flat_lst = [] for sublist in lst: if type(sublist) == int: flat_lst.append(sublist) else: for ele in sublist: flat_lst.append(ele) return flat_lst result = flat_list(test_list) print(\\"The flattened list is:\\", result)"},{"prompt":"This code is an implementation of an image printing program based on haftoning. To use it, first import the necessary libraries: sys, numpy, scipy, matplotlib.pyplot, and DFT from Proj0401. Then define the following functions: en_padding, de_padding, shift, sqdistance, lowpass_mask, and highpass_mask. Finally, call the main function to run the program. The main function reads in an image file, applies padding and shifting, performs a DFT, applies highpass filtering with different cutoff frequencies, and saves the resulting images.","completion":"#!/bin/python # *-* encoding=utf-8 *-* ''' Image Priting Program Based on Haftoning ''' import sys import numpy, scipy from scipy import ndimage from scipy import misc import scipy.fftpack as fftpack import matplotlib.pyplot as plt sys.path.append('../Proj04-01') from DFT import DFT_2D, IDFT_2D def en_padding(img): M, N = img.shape P, Q = 2 * M, 2 * N _img = numpy.zeros(P*Q).reshape((P, Q)) for x in range(M): for y in range(N): _img[x][y] = img[x][y] return _img def de_padding(img): P, Q = img.shape M, N = P/2, Q/2 _img = numpy.zeros(M*N).reshape((M, N)) for x in range(M): for y in range(N): _img[x][y] = img[x][y] return _img def shift(img): M, N = img.shape _img = img.copy() for x in range(M): for y in range(N): _img[x][y] = img[x][y] * numpy.power(-1.0, (x+y)) return _img def sqdistance(p1, p2): return ((p1[0]-p2[0])*(p1[0]-p2[0])) + ((p1[1]-p2[1])*(p1[1]-p2[1])) def lowpass_mask(P, Q, cuf_off_frequency): center = (P/2.0, Q/2.0) mask = numpy.zeros(P * Q).reshape(P, Q) for u in range(P): for v in range(Q): mask[u][v] = numpy.exp(-1*sqdistance(center, (u, v)) / (2*(cuf_off_frequency*cuf_off_frequency))) return mask def highpass_mask(P, Q, cuf_off_frequency): return 1.0 - lowpass_mask(P, Q, cuf_off_frequency) # center = (P/2.0, Q/2.0) # mask = numpy.zeros(P * Q).reshape(P, Q) # for u in range(P): # for v in range(Q): # mask[u][v] = 1.0-numpy.exp(-1*sqdistance(center, (u, v)) / (2*(cuf_off_frequency*cuf_off_frequency))) # return mask def main(): img_file = 'Fig0441(a)(characters_test_pattern).tif' img = misc.imread(img_file) padding_img = en_padding(img) padding_img = shift(padding_img) dft_img = DFT_2D(padding_img) for cut_off_frequency in [30, 60, 160]: print cut_off_frequency hp_mask = highpass_mask(dft_img.shape[0], dft_img.shape[1], cut_off_frequency) misc.imsave('%s_hpmask_%d.tif' % (img_file, cut_off_frequency), 255 * hp_mask) hp_img = numpy.multiply(dft_img, hp_mask) misc.imsave('%s_fft_%d.tif' % (img_file, cut_off_frequency), numpy.log(1+numpy.abs(hp_img))) hp_idtft_img = shift(IDFT_2D(hp_img).real) hp_idtft_img = de_padding(hp_idtft_img) print hp_idtft_img.shape misc.imsave('%s_hp_%d.tif' % (img_file, cut_off_frequency), hp_idtft_img) if __name__ == '__main__': main()"},{"prompt":"Develop a python program to classify articles related to sports into two categories: basketball and football. Not applicable","completion":"import nltk from nltk.tokenize import word_tokenize from nltk.corpus import stopwords from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn import metrics # Read training data f1 = open(\\"basketball_train.txt\\", \\"r\\") basket_data = f1.readlines() f2 = open(\\"football_train.txt\\", \\"r\\") football_data = f2.readlines() # Get features from the data def get_features(data): words = [] for line in data: tokens = word_tokenize(line) for word in tokens: if word not in stopwords.words(\\"english\\"): words.append(word.lower()) return words # Get the frequency of words def bag_of_words(data): vectorizer = CountVectorizer() sparce_matrix = vectorizer.fit_transform(data) return sparce_matrix # Get training data basket_features = get_features(basket_data) football_features = get_features(football_data) # Create feature matrix basket_feature_matrix = bag_of_words(basket_features) football_feature_matrix = bag_of_words(football_features) # Create a Naive Bayes classifier NB_classifier = MultinomialNB() # Combine feature matrices X_train = (basket_feature_matrix.toarray() + football_feature_matrix.toarray()) # Create labels ones = [1] * len(basket_features) zeros = [0] * len(football_features) y_train = ones + zeros # Train Naive Bayes classifier NB_classifier.fit(X_train, y_train) # Read test data f3 = open(\\"test.txt\\", \\"r\\") test_data = f3.readlines() # Create test features and feature matrix test_features = get_features(test_data) test_feature_matrix = bag_of_words(test_features) # Predict the test data predictions = NB_classifier.predict(test_feature_matrix.toarray()) # Get the accuracy print(\\"Accuracy: \\", metrics.accuracy_score(y_train, predictions))"},{"prompt":"Create a function in Python which takes two strings (s1 and s2) and returns the longest common subsequence. s1 = 'dynamic' s2 = 'programming'","completion":"def lcs(s1,s2): m = len(s1) n = len(s2) # Create a matrix to store results of subproblems matrix = [[0]*(n+1) for i in range(m+1)] # Fill in the entries of the matrix for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: matrix[i][j] = 0 elif s1[i-1] == s2[j-1]: matrix[i][j] = matrix[i-1][j-1] + 1 else: matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) # Return the maximum length return matrix[m][n] # Driver program s1 = \\"dynamic\\" s2 = \\"programming\\" lcs = lcs(s1, s2) print(\\"The length of LCS is\\", lcs)"},{"prompt":"Create a WebScraper in Python that extracts the titles and links from a given URL. The web page https://www.example.com","completion":"from bs4 import BeautifulSoup import requests url = 'https://www.example.com' r = requests.get(url) soup = BeautifulSoup(r.content, 'html.parser') # Extract titles and links titles = [] links = [] for link in soup.find_all('a'): titles.append(link.get('title')) links.append(link.get('href')) print(titles, links)"},{"prompt":"Design a simple web application in Python and Flask that allows users to manage their contacts. Not applicable","completion":"from flask import Flask, request, render_template app = Flask(__name__) @app.route('/') def index(): return render_template('index.html') @app.route('/contacts', methods=['POST']) def contacts(): action = request.form.get('action') if action == 'add': # Add contact logic goes here elif action == 'delete': # Delete contact logic goes here elif action == 'update': # Update contact logic goes here return render_template('contacts.html') if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Develop a Python program to filter out duplicate words in a given string. This is a test string with some duplicate words.","completion":"def filter_duplicate_words(original_string): words = original_string.split(\\" \\") filtered_words = [] for word in words: if word not in filtered_words: filtered_words.append(word) return ' '.join(filtered_words)"},{"prompt":"Develop a program in Python to sort a list of integer numbers. [1, 7, 5, 9, 3]","completion":"def sort_list(list): sorted_list = sorted(list) return sorted_list list = [1, 7, 5, 9 , 3] print(sort_list(list)) # will print [1, 3, 5, 7, 9]"},{"prompt":"Create a Python script that reads an integer, n, from the user and prints out the value of n factorial. 8","completion":"# Get input from the user n = int(input(\\"Enter a number: \\")) # Calculate the factorial of the number factorial = 1 while n > 1: factorial *= n n -= 1 # Print out the result print(\\"The factorial of the given number is:\\", factorial)"},{"prompt":"Write a python code to add two given numbers using recursive function.","completion":"def add_recursively(num1, num2): if num2 == 0: return num1 else: return add_recursively(num1 ^num2, (num1 & num2) << 1)"},{"prompt":"Create a Python program to find the sum of all elements in the following twodimensional list. [[1,2], [3,4]]","completion":"def sum_list(list_two_dim): sum = 0 for row in list_two_dim: sum += sum(row) return sum"},{"prompt":"Create a Ruby program to implement lexicographical sorting. [ruby, go, java, python]","completion":"def lexicographical_sort(arr) arr.sort_by { |word| word.downcase } end sorted_arr = lexicographical_sort([\\"ruby\\", \\"go\\", \\"java\\", \\"python\\"]) puts sorted_arr"},{"prompt":"mplement a function in Python that takes a list of strings and returns a new list of strings containing all words that start with an uppercase letter. list = [Apple, banana, Pineapple, Grapes]","completion":"def upper_words(list): result = [] for word in list: if word[0].isupper(): result.append(word) return result"},{"prompt":"Create a Python program to generate a 3x3 random pattern of circles and squares. Not applicable","completion":"import numpy as np import random # Generates a random pattern of circles and squares def generatePattern(): pattern = np.zeros((3,3)) for i in range(9): pattern[i//3, i%3] = random.choice([0, 1]) return pattern pattern = generatePattern() print(pattern)"},{"prompt":"Rewrite the following program to use Python's filter function program numbers = [12, 15, 20, 9, 5] filtered = [] for number in numbers: if number > 10: filtered.append(number) print(filtered)","completion":"numbers = [12, 15, 20, 9, 5] filtered = list(filter(lambda x: x > 10, numbers)) print(filtered)"},{"prompt":"Create a Machine Learning model in Python to classify the following dataset. The dataset contains 100 samples with 10 features each.","completion":"from sklearn.neighbors import KNeighborsClassifier # Create the KNN classifier knn = KNeighborsClassifier(n_neighbors = 3) # Fit the classifier to the data knn.fit(X, y) # Predict the labels for the test set y_pred = knn.predict(X_test)"},{"prompt":"Create a Python program to find the two smallest integers in an array and print the output. [5, 7, 12, 3, 8]","completion":"def findSmallestInteger(arr): smallest = float('inf') second_smallest = float('inf') for num in arr: if num < smallest: second_smallest = smallest smallest = num if num < second_smallest and num > smallest: second_smallest = num return (smallest, second_smallest)"},{"prompt":"Develop a Python script for calculating the Fibonacci numbers for a given input. 8","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(8))"},{"prompt":"Write a Python program to join two given lists. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"def join_lists(list1, list2): return list1 + list2 list1 = [1, 2, 3] list2 = [4, 5, 6] joined_list = join_lists(list1, list2) print(joined_list)"},{"prompt":"Design a data structure in Python to handle the following case. Keep track of different subjects and their corresponding grades for each student.","completion":"class Student: def __init__(self, student_id): self.student_id = student_id self.grades = {} def set_grade(self, subject, grade): self.grades[subject] = grade def get_grade(self, subject): return self.grades[subject] def get_average_grade(self): total = sum(self.grades.values()) subjects = len(self.grades) return total / subjects"},{"prompt":"Write a function in Python to calculate the mean, median, and mode of a given numeric array. [1, 2, 3, 4, 5, 6, 7, 8]","completion":"def calculate_mean_median_mode(arr): #calculate mean mean = sum(arr) / len(arr) #calculate median arr.sort() mid = len(arr) // 2 if len(arr) % 2 == 0: median = (arr[mid] + arr[mid + 1]) / 2 else: median = arr[mid + 1] #calculate mode frequencies = {} for i in arr: if i in frequencies: frequencies[i] += 1 else: frequencies[i] = 1 mode = max(frequencies, key=frequencies.get) return mean, median, mode"},{"prompt":"Design a Python program to predict output given input Given two numbers x and y, predict the division output given x/y.","completion":"def predict_divison_output(x, y): return x / y"},{"prompt":"Python, parse the following XML document and extract the book title and author. <book> <title>Title1</title> <author>Author1</author> </book>","completion":"# import the necessary libraries import xml.etree.ElementTree as ET # Parse the XML document root = ET.fromstring(xml_doc) for book in root: if book.tag == 'title': title = book.text elif book.tag == 'author': author = book.text print(f\\"Book Title: {title}, Author: {author}\\")"},{"prompt":"Detect the data type of a given string in Python. String: Hello World!","completion":"str type"},{"prompt":"write a python program to split an array of numbers into two halves for sorting. [4, 6, 2, 7, 9]","completion":"\\"\\"\\"Split an array of numbers into two halves\\"\\"\\" def split_array(arr): # Find the middle point mid = len(arr) // 2 # Split the array into two halves left_half = arr[:mid] right_half = arr[mid:] return left_half, right_half if __name__ == '__main__': arr = [4, 6, 2, 7, 9] left_half, right_half = split_array(arr) print(\\"Left Half:\\", left_half) print(\\"Right Half:\\", right_half)"},{"prompt":"Design a python class to store fruit and its quantity in a grocery store. Banana 200 Orange 300 Grapes 500","completion":"class FruitGrocery: def __init__(self): self.items = { 'Banana': 200, 'Orange': 300, 'Grapes': 500 } def get_item_quantity(self, item): return self.items.get(item)"},{"prompt":"Can you create a Python function to interpolate a given string? Hello {{name}}","completion":"def interpolate(str): return str.format(name=\\"world\\") input_str = \\"Hello {{name}}\\" print(interpolate(input_str)) // Output: \\"Hello world\\""},{"prompt":"Classify the following sentence, “The car is a Ford Mustang”, by building a classification model using Python.","completion":"import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.svm import SVC # Read the data data = [[\\"The car is a Ford Mustang\\", \\"Ford Mustang\\"]] df = pd.DataFrame(data, columns=['sentence', 'class']) # Vectorizing the sentence vectorizer = TfidfVectorizer() X = vectorizer.fit_transform(df['sentence']) # Training the classifier classifier = SVC() classifier.fit(X, df['class'])"},{"prompt":"Develop Python code to check if a given number is plaindrome. 1454","completion":"def is_plaindrome(num): original_num = num reversed_num = 0 while num > 0: remainder = num % 10 reversed_num = (reversed_num * 10) + remainder num //= 10 return reversed_num == original_num num = 1454 if is_plaindrome(num): print(num, \\"is a plaindrome\\") else: print(num, \\"is not a plaindrome\\")"},{"prompt":"Classify the following statement as true or false. The following statement is a valid Python statement my_list = [1, 2, 3]","completion":"true"},{"prompt":"Write a Python function to generate a random password with a length between 8 and 16 characters, containing at least one lowercase letter, one uppercase letter and one number.","completion":"import string import random def generate_password(): # create the characters list characters = string.ascii_lowercase + string.ascii_uppercase + string.digits password_length = random.randint(8,16) # generate a random password password = '' for i in range(password_length): # add one of the characters to the password password += random.choice(characters) return password if __name__ == \\"__main__\\": print(generate_password())"},{"prompt":"Generate a script in Python that can parse a given web page and extract its content.","completion":"import requests from bs4 import BeautifulSoup def parse_web_page(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') body_text = soup.findAll('p') data = [] for item in body_text: text = item.text data.append(text) return data"},{"prompt":"Design a neural network in Python for object detection.","completion":"import torch import torch.nn as nn class ObjectDetectionNetwork(nn.Module): def __init__(self): super(ObjectDetectionNetwork, self).__init__() # Layer 1 self.layer1 = nn.Conv2d(3, 32, 3, padding=1) self.bn1 = nn.BatchNorm2d(32) self.relu1 = nn.ReLU() # Layer 2 self.layer2 = nn.Conv2d(32, 64, 3, padding=1) self.bn2 = nn.BatchNorm2d(64) self.relu2 = nn.ReLU() # Layer 3 self.layer3 = nn.Conv2d(64, 128, 3, padding=1) self.bn3 = nn.BatchNorm2d(128) self.relu3 = nn.ReLU() # Layer 4 self.layer4 = nn.Conv2d(128, 256, 3, padding=1) self.bn4 = nn.BatchNorm2d(256) self.relu4 = nn.ReLU() # Layer 5 self.layer5 = nn.Conv2d(256, 512, 3, padding=1) self.bn5 = nn.BatchNorm2d(512) self.relu5 = nn.ReLU() # Max pooling layer self.maxpool = nn.MaxPool2d(2, 2) # Fully connected layer self.fc1 = nn.Linear(512, 4) # Forward pass def forward(self, x): # Layer 1 x = self.layer1(x) x = self.bn1(x) x = self.relu1(x) # Layer 2 x = self.layer2(x) x = self.bn2(x) x = self.relu2(x) # Layer 3 x = self.layer3(x) x = self.bn3(x) x = self.relu3(x) # Layer 4 x = self.layer4(x) x = self.bn4(x) x = self.relu4(x) # Layer 5 x = self.layer5(x) x = self.bn5(x) x = self.relu5(x) # Max pooling x = self.maxpool(x) # Reshape x = x.view(-1, 512) # Fully connected layer x = self.fc1(x) return x"},{"prompt":"Create a REST API in Python for a basic todo list. The API should be able to return a list of todos, create a new todo, delete an existing todo, and update an existing todo. Not applicable","completion":"from flask import Flask, request, jsonify app = Flask(__name__) todos = [] @app.route('/todos', methods=['GET','POST']) def list_todos(): if request.method == 'GET': return jsonify({'todos': todos}) if request.method == 'POST': todo = {'task': request.json['task']} todos.append(todo) return jsonify({'todo': todo}) @app.route('/todos/<int:index>', methods=['DELETE', 'PUT']) def delete_todo(index): if request.method == 'DELETE': todos.pop(index) return jsonify({'result': True}) if request.method == 'PUT': todos[index] = {'task': request.json['task']} return jsonify({'todo': todos[index]}) if __name__ == '__main__': app.run()"},{"prompt":"Generate a python program to sort a collection of data given in the form of a 2dimensional array. [[1, 2],[2, 6], [3, 4], [4, 5]]","completion":"def sortArray(arr): arr.sort(key = lambda x: x[1]) return arr # Driver Code arr = [[1, 2],[2, 6], [3, 4], [4, 5]] print (sortArray(arr))"},{"prompt":"Write a python class for a bank account holder with following parameters: name, card number, PIN, and balance.","completion":"class BankAccountHolder: def __init__(self, name, card_number, pin, balance): self.name = name self.card_number = card_number self.pin = pin self.balance = balance def get_name(self): return self.name def get_card_number(self): return self.card_number def get_pin(self): return self.pin def get_balance(self): return self.balance def set_balance(self, balance): self.balance = balance"},{"prompt":"Create a Machine Learning model in Python to predict the values of a function given a set of test inputpoints. input_values = [(5.2, 2.3), (3.1, 4.9), (2.4, 0.3), (2.4, 3.2)]","completion":"import numpy as np import matplotlib.pyplot as plt # List of input points input_values = [(-5.2, 2.3), (3.1, 4.9), (2.4, 0.3), (-2.4, -3.2)] # Create x and y matrix from input x = [v[0] for v in input_values] y = [v[1] for v in input_values] # Create the training data array X = np.array(x).reshape(-1, 1) Y = np.array(y) # Create the model, train, and predict from sklearn.linear_model import LinearRegression model = LinearRegression().fit(X, Y) Y_pred = model.predict(X) # Plot the data and the model plt.scatter(X, Y) plt.plot(X, Y_pred, color='red') plt.show()"},{"prompt":"Write a Python function to convert Fahrenheit temperatures to Celcius.","completion":"def fahrenheit_to_celcius(fahrenheit): celcius = (fahrenheit - 32) * (5/9) return celcius"},{"prompt":"Given a list of strings, write a Python program to group the strings based on the characters used in them.","completion":"def group_by_characters(strings): groups = {} # Iterate over strings for string in strings: # Add string to existing group if character is seen for char in string: if char in groups: groups[char].append(string) # Else create new group else: groups[char] = [string] return groups"},{"prompt":"Build a simple robot control program using Python. The program should have a list of commands (for example, go forward, turn left, turn right, etc.) and use an input from a mouse to move the robot according to the command that was selected. Command list: go forward, turn left, turn right, stop, look up","completion":"import pyautogui # The list of commands COMMANDS = { 'go forward': pyautogui.moveRel(0, 10), 'turn left': pyautogui.moveRel(-10, 0), 'turn right': pyautogui.moveRel(10, 0), 'stop': pyautogui.press('esc'), 'look up': pyautogui.moveRel(0, -10) } while True: command = input('Please enter a command: ') if command in COMMANDS: COMMANDS[command] else: print('Invalid command.')"},{"prompt":"Write a Python program to implement a simple menubased application. The application should include options such as inputting, editing, and deleting data. Not applicable","completion":"import pickle def main(): # Read data from file try: with open('data.pickle', 'rb') as f: data = pickle.load(f) except: data = {} while True: # Print menu print('1. Add') print('2. Edit') print('3. Delete') print('4. Quit') # Get input choice = input('Enter your choice: ') # Process input if choice == '1': add(data) elif choice == '2': edit(data) elif choice == '3': delete(data) elif choice == '4': with open('data.pickle', 'wb') as f: pickle.dump(data, f) break else: print('Invalid option') # Add a new entry def add(data): key = input('Enter key: ') value = input('Enter value: ') data[key] = value # Edit an existing entry def edit(data): key = input('Enter key: ') if key in data: value = input('Enter new value: ') data[key] = value else: print('Key not found') # Delete an entry def delete(data): key = input('Enter key: ') if key in data: del data[key] else: print('Key not found') if __name__ == '__main__': main()"},{"prompt":"Generate Python code to format a given string as a Float number with 2 decimal places.","completion":"def format_string(string): return '{:.2f}'.format(float(string)) // Usage: string = '3.14159' formatted_string = format_string(string) print(formatted_string) // prints 3.14"},{"prompt":"Optimize the Python program below for making the code more efficient. def sum_list(list): result = 0 for i in list: result += i return resul","completion":"def sum_list(list): return sum(list)"},{"prompt":"mplement a function in Python that takes a nested list as an input, and flattens the list into a single list. [[1,2,3],[4,5,6],[7,8,9]]","completion":"def flatten_list(list): flattened_list = [] for sublist in list: for item in sublist: flattened_list.append(item) return flattened_list print(flatten_list([[1,2,3],[4,5,6],[7,8,9]])) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]"},{"prompt":"Create a Python program to search for a record in a given database and print out the corresponding record. Database name: records Search key: 'John Doe' Column names in database: name, age","completion":"import sqlite3 # Connect to database conn = sqlite3.connect('records.db') c = conn.cursor() # Search for the record c.execute('''SELECT name, age FROM records WHERE name=?''', ('John Doe',)) # Print the record for record in c.fetchall(): name, age = record print(f'Name: {name} | Age: {age}') # Close the connection conn.close()"},{"prompt":"Python, generate a program that takes in a userdefined list and produces a new list with all the duplicates removed.","completion":"def remove_duplicates(my_list): my_list = list(dict.fromkeys(my_list)) return my_list"},{"prompt":"This code is a Python program that sends packets using a CC430 transmitter. To use it, run the program with the appropriate arguments for the port, radio address, destination address, and serial number. The program will then initialize the transmitter and send packets containing data retrieved from the Hacker News API. The program will continue to send packets until interrupted by the user.","completion":"#!/usr/bin/python # python ~/workspace/level_basestation/pre-cog/examples/simple_trx.py --port 12345 --radio-addr 85 --dest-addr 86 --args serial=E8R10Z2B1 # python ~/workspace/level_basestation/pre-cog/examples/simple_trx.py --port 12346 --radio-addr 86 --dest-addr 85 --args serial=E4R11Y0B1 from gnuradio import gr from gnuradio import uhd from gnuradio import digital from gnuradio import blks2 from gnuradio.gr import firdes import gnuradio.gr.gr_threading as _threading from gnuradio import level from gnuradio import extras from math import pi from gruel import pmt import urllib2, time, json class test_transmit(gr.top_block): def __init__(self): gr.top_block.__init__(self, \\"CC430 Transmitter\\") self.sent_pkts = 0 # 5555 5555 2c6e fd00 0071 da0b e2 self.packet = chr(0x55)*4 # preamble self.packet += chr(0x2c) + chr(0x6e) # sync self.packet += chr(0xfc) # length self.packet += chr(0x00) + chr(0x00) + chr(0x00) # payload self.packet += chr(0x71) + chr(0xda) + chr(0x0b) + chr(0xe2) # CRC (currently incorrect) # Variables self.samp_rate = samp_rate = 125e3 self.f_center = f_center = 868e6 self.bandwidth = bandwidth = 200e3 self.gain = gain = 5 self.msgq = msgq = gr.msg_queue() # Blocks self.uhd_sink = uhd.usrp_sink( device_addr=\\"\\", stream_args=uhd.stream_args( cpu_format=\\"fc32\\", channels=range(1), ), ) self.uhd_sink.set_samp_rate(samp_rate) self.uhd_sink.set_center_freq(f_center, 0) self.uhd_sink.set_gain(gain, 0) self.uhd_sink.set_bandwidth(bandwidth, 0) self.msg_src = gr.message_source(1, msgq) self.msk = level.msk_mod_bc( samples_per_symbol=2, bt=0.3 ) # Connections self.connect(self.msg_src, self.msk, self.uhd_sink) def send_pkt(self, payload): msg = gr.message_from_string(str(payload)) self.msgq.insert_tail(msg) def get_top_hn(self): try: f_page = urllib2.urlopen(\\"http://api.ihackernews.com/page\\").read() except urllib2.HTTPError: return \\"HN returned server error: 0\\" fj = json.loads(f_page) title = fj['items'][0]['title'] score = fj['items'][0]['points'] return str(title) + \\":\\" + str(score) def form_packet(self, payload): length = len(payload) self.packet = chr(0x55)*4 # preamble self.packet += chr(0xd3) + chr(0x91) # sync self.packet += chr(length) # length self.packet += str(payload) self.packet += chr(0x71) + chr(0xda) + chr(0x0b) + chr(0xe2) # CRC (currently incorrect) def main_loop(self): while True: payload = self.get_top_hn() print payload self.packet = self.form_packet(payload) self.send_pkt(self.packet) self.sent_pkts += 1 try: time.sleep(5) except KeyboardInterrupt: print \\"nnSent Packets:\\", self.sent_pkts, \\"n\\" break if __name__ == '__main__': tx = test_transmit() r = gr.enable_realtime_scheduling() tx.start() tx.main_loop()"},{"prompt":"Given two integers, write a Python function to compare them. Integer1: 6 Integer2: 4","completion":"def compare_ints(num1, num2): if num1 > num2: return \\"Integer1 is greater than Integer2\\" elif num1 < num2: return \\"Integer1 is lesser than Integer2\\" else: return \\"The integers are equal\\" result = compare_ints(6, 4) print(result)"},{"prompt":"Generate a password of length 10, containing at least one uppercase letter and one special character, using a Python program.","completion":"import string import random def generate_password(): password_characters = string.ascii_lowercase + string.ascii_uppercase + string.punctuation return ''.join(random.choice(password_characters) for i in range(10)) print(generate_password())"},{"prompt":"GPTmodel, create a Python program for shuffeling the elements of an array.","completion":"import random def shuffle(arr): for i in range(len(arr)): j = random.randint(0, len(arr)-1) arr[i], arr[j] = arr[j], arr[i] return arr"},{"prompt":"Generate an algorithm in Python to convert the given temperature from Fahrenheit to Celsius. Fahrenheit= 32","completion":"def Fahrenheit_to_Celsius(Fahrenheit): Celsius = (Fahrenheit - 32) * 5/9 return Celsius Fahrenheit = 32 Celsius = Fahrenheit_to_Celsius(Fahrenheit) print(\\"Celsius:\\",Celsius)"},{"prompt":"Design a code in Python to count the number of unique elements in a list. numbers_list = [1, 2, 2, 5, 6, 6]","completion":"def count_unique_elements(numbers_list): seen = set() count = 0 for number in numbers_list: if number not in seen: seen.add(number) count+=1 return count"},{"prompt":"Write a Python program to search a database and generate a report based on the results. The database contains information on employee records including name, salary, and department.","completion":"import sqlite3 # Connect Database conn = sqlite3.connect('employee_records.db') # Create Cursor cursor = conn.cursor() # Query Database cursor.execute(\\"SELECT name, salary, department FROM employees\\") rows = cursor.fetchall() # Generate Report for row in rows: name = row[0] salary = row[1] department = row[2] print(f'{name} earns {salary} in {department}') # Close Connection conn.close()"},{"prompt":"What is the output of the following Python code? def foo(x): if x > 5: return 1 elif x < 0: return 1 else: return 0 foo(3)","completion":"0"},{"prompt":"Construct a Python program to find a missing number in an array of n distinct numbers. [1, 3, 8, 5, 6]","completion":"def find_missing_num(arr): n = len(arr)+1 sum_of_n = int(n*(n+1)/2) sum_of_arr = 0 for i in arr: sum_of_arr += i return sum_of_n - sum_of_arr"},{"prompt":"Analyze the following code in Python and write an improved version of it. def countOccurrences(string, x): count = 0 for i in range(len(string)): if string[i] == x: count += 1 return cou","completion":"def countOccurrences(string, x): count = 0 for i in range(len(string)): if string[i] == x: count += 1 return count def countOccurrences2(string, x): found = False count = 0 for i in range(len(string)): if string[i] == x and not found: count += 1 found = True else: found = False return count"},{"prompt":"Create a List of all the alphabet letters in Python.","completion":"alphabet = [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\", \\"h\\", \\"i\\", \\"j\\", \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", \\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\", \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\", \\"z\\"]"},{"prompt":"Create a Python class that allows you to store complex numbers in a vector. 1 2i","completion":"class ComplexVector: def __init__(self, complex_num): # split the complex number into its components self.real = float(complex_num.split(\\" \\")[0]) self.imag = float(complex_num.split(\\" \\")[2].replace(\\"i\\", \\"\\")) # print the vector in a readable format def __str__(self): return f\\"{self.real} + {self.imag}i\\" # create the vector from a complex number vec = ComplexVector(\\"1 - 2i\\") print(vec) # prints \\"1.0 + -2.0i\\""},{"prompt":"Generate a Python program to find groups of numbers that are divisible by a given number (n).","completion":"def find_groups(n): groups = [] for i in range(2, n): group = [] for j in range(1, n): if i * j % n == 0: group.append(i * j) if group: groups.append(group) return groups"},{"prompt":"Give an algorithm and implement it in Python to sort the following array [9, 8, 2, 4, 5, 7, 0]","completion":"def sortArray(arr): n = len(arr) for i in range(n): min_idx = i for j in range(i+1, n): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr sortArray([9, 8, 2, 4, 5, 7, 0])"},{"prompt":"Write a Python function to calculate the tax on a given price.","completion":"def calculate_tax(price): tax_rate = 0.135 return price * tax_rate"},{"prompt":"Write a Python program to display a calendar showing the current month. Not applicable","completion":"import calendar from datetime import date today = date.today() cal = calendar.month(today.year, today.month) print(cal)"},{"prompt":"Write a code in Python that fills a twodimensional list of given sizes with increasing numbers starting from 1.","completion":"def fill_2d_list(x, y): new_list = [[i+j for i in range(x)] for j in range(0, x*y, x) ] return new_list fill_2d_list(3, 5) # Output: # [[1, 2, 3], # [4, 5, 6], # [7, 8, 9], # [10, 11, 12], # [13, 14, 15]]"},{"prompt":"Write a Python program to find the number of times each character in an array occurs. Given an array = ['a', 'b', 'c', 'a', 'c', 'b', 'd', 'd']","completion":"from collections import Counter s = ['a', 'b', 'c', 'a', 'c', 'b', 'd', 'd'] counts = Counter(s) for c, count in counts.items(): print(f'{c}: {count} times')"},{"prompt":"Write a code in Python to find the minimum value in a Binary Search Tree. The following is the given BST: 10 / 5 14 / / 1 7 11 20","completion":"class Node: def __init__(self, key): self.left = None self.right = None self.val = key # Function to find the minimum value in a given BST def minValue(node): current = node # loop down to find the leftmost leaf while(current.left is not None): current = current.left return current.val"},{"prompt":"Create an algorithm in Python that computes the sum of an array [10, 20, 30, 40]","completion":"def array_sum(arr): sum = 0 for num in arr: sum += num return sum print(array_sum([10, 20, 30, 40])) # Output: 100"},{"prompt":"Using Python, create a class with a static method to generate a Fibonnaci sequence up to a given limit.","completion":"class Fibonacci: @staticmethod def generateFibonacci(limit): result = [] first = 0 second =1 while first <=limit: result.append(first) temp=first + second first=second second=temp return result"},{"prompt":"Develop a python code to generate artificial data with the provided descriptors. Number of rows: 100 Number of columns: 10 Attribute types: float, int, string","completion":"import random def generate_fake_data(row_count, column_count, data_types): data = [] for i in range(row_count): row_data = [] for dt in data_types: if dt == 'float': row_data.append(random.uniform(0,1)) elif dt == 'int': row_data.append(random.randint(0,10)) elif dt == 'string': row_data.append(''.join(random.choices('abcdefghijklmnopqrstuvwxyz', k=random.randint(2, 8)))) data.append(row_data) return data # Generate fake data with the provided descriptors fake_data = generate_fake_data(100, 10, ['int', 'float', 'string'])"},{"prompt":"Write a Python function to find the maximum product of three integers from a given list. [10, 6, 7, 8, 2]","completion":"def max_product_three(numbers): numbers.sort() return max( numbers[0] * numbers[1] * numbers[-1], numbers[-1] * numbers[-2] * numbers[-3] )"},{"prompt":"Generate a list of prime numbers in Python between 20 and 50","completion":"nums = range(20, 51) primes = [] # loop through each number for num in nums: is_prime = True # assume the number is prime unless proven otherwise # loop through each number that is less than the target number for i in range(2, num): # if the target number is divisible by any number, then it is not a prime number if (num % i == 0): is_prime = False break # if the number is prime, then add it to the list of primes if is_prime: primes.append(num) # print the list of prime numbers print(primes) # [23, 29, 31, 37, 41, 43, 47]"},{"prompt":"Create a Python class that holds a list of student objects","completion":"class StudentList: def __init__(self): self.students = [] def add_student(self, student): self.students.append(student) def remove_student(self, student): self.students.remove(student)"},{"prompt":"Develop a code to sort a list of numbers in increasing order in Python. [8, 15, 2, 18, 10]","completion":"def sort_list(input_list): # Traverse through all array elements for i in range(len(input_list)): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, len(input_list)): if input_list[min_idx] > input_list[j]: min_idx = j # Swap the found minimum element with # the first element input_list[i], input_list[min_idx] = input_list[min_idx], input_list[i] return input_list # Driver code to test above if __name__ == '__main__': input_list = [8, 15, 2, 18, 10] print(\\"Input list:\\", input_list) print(\\"Sorted list:\\", sort_list(input_list))"},{"prompt":"Create a function in Python to remove all duplicates from a given list. Example of a list containing duplicate","completion":"def remove_duplicates(lst): new_list = [] for item in lst: if item not in new_list: new_list.append(item) return new_list"},{"prompt":"mplement an API endpoint in Python that takes a list of records as input, calculates the average of the records, and returns the result. [ { id: 1, value: 3 }, { id: 2, value: 5 }, { id: 3, value: 10 } ]","completion":"from flask import Flask, request app = Flask(name) @app.route('/average', methods=['POST']) def get_average(): records = request.json total = 0 for record in records: total += record['value'] avg = total / len(records) return {'average': avg} if name == 'main': app.run(debug=True)"},{"prompt":"Generate a Python class for a Book with properties such as title, author, year, and genre. Not applicable","completion":"class Book: def __init__(self, title, author, year, genre): self.title = title self.author = author self.year = year self.genre = genre def getTitle(self): return self.title def getAuthor(self): return self.author def getYear(self): return self.year def getGenre(self): return self.genre"},{"prompt":"Write a Python program to classify a set of input data as either True or False. [1, 2, 3, 4, 5]","completion":"def classify(data): if min(data) < 0: return False elif max(data) > 1: return False else: return True"},{"prompt":"We have a json object containing a list of words. Create a program in Python that returns all the words that are longer than 7 characters. { words: [ abide, absolve, catastrophe, accelerate, capable] }","completion":"import json def findLongWords(words): result = [] for word in words: if len(word) > 7: result.append(word) return result data = json.loads(input_data) words = data[\\"words\\"] print(findLongWords(words)) // [\\"catastrophe\\", \\"accelerate\\"]"},{"prompt":"Suggest an web scraping algorithm for the following website. https://www.example.com/","completion":"A useful strategy for web scraping this site would be to use the Python library requests to make HTTP requests and BeautifulSoup to parse the HTML content. First, you should make an HTTP request to the website, then you should use BeautifulSoup to find the specific elements you are interested in and extract the data."},{"prompt":"Generate a valid SQL query in Python that can find all entries from a given table.","completion":"sql_query = 'SELECT * FROM table_name'"},{"prompt":"Create a Python program to remove all the elements in a given array, which are divisible by a certain number. [23, 45, 12, 35, 29], 3","completion":"# Enter the Array arr = [23, 45, 12, 35, 29] # Enter the Number num = 3 # Print the New Array new_arr = [x for x in arr if x % num != 0] # Print the Result print(new_arr)"},{"prompt":"Build a regular expression in Python to validate a UK postcode.","completion":"import re pattern = r'[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][ABD-HJLNP-UW-Z]{2}' def validate_postcode(postcode): return re.match(pattern, postcode) != None"},{"prompt":"Create a Python program that removes duplicate elements from a list. [1,2,3,4,4,2,7,8,8,1]","completion":"def remove_duplicates(nums): # A list for storing final output new_list = [] # Looping over the elements for num in nums: # If num is not in new_list, then add it if num not in new_list: new_list.append(num) return new_list # Main code input_list = [1,2,3,4,4,2,7,8,8,1] print(remove_duplicates(input_list))"},{"prompt":"Develop an algorithm in Python for finding the maximum index of an array's subarray. arr = [2, 3, 4, 5, 7, 9, 11]","completion":"def findMaxIndex(arr): \\"\\"\\"This function finds the maximum index of an array's sub-array.\\"\\"\\" maxIndex = 0 currentMax = 0 for i in range(1, len(arr)): if arr[i] > arr[currentMax]: maxIndex = i currentMax = i return maxIndex arr = [2, 3, 4, 5, 7, 9, 11] maxIndex = findMaxIndex(arr) print(maxIndex) # Output: 5"},{"prompt":"Write a python program to print the items in the following dictionary dictionary = { fruit: apple, animal: dog }","completion":"for key,val in dictionary.items(): print(f\\"{key}: {val}\\")"},{"prompt":"Optimize a code snippet in Python that sorts the given array. arr = [5, 4, 3, 2, 1]","completion":"# optimized code snippet to sort the given array arr = [5, 4, 3, 2, 1] arr.sort() print(arr) # arr is now sorted in ascending order as [1, 2, 3, 4, 5]"},{"prompt":"Design a Python program that takes two integers as input and finds the greatest common divisor of them. 12, 18","completion":"def find_gcd(a, b): if a == 0: return b if b == 0: return a if a > b: a, b = b, a while a != 0: b, a = a, b%a return b print(find_gcd(12, 18))"},{"prompt":"Create an objectoriented calculator program with Python.","completion":"class Calculator: def add(self, a, b): return a + b def subtract(self, a, b): return a - b def multiply(self, a, b): return a * b def divide(self, a, b): return a / b calc = Calculator() # Example operations num1 = 10 num2 = 2 add_result = calc.add(num1, num2) subtract_result = calc.subtract(num1, num2) multiply_result = calc.multiply(num1, num2) divide_result = calc.divide(num1, num2) print(add_result, subtract_result, multiply_result, divide_result)"},{"prompt":"Construct a Python program to take a list of numbers as input and print out the largest number in the list. [5, 10, 2, 9, 6]","completion":"def largestNumber(list): max = list[0] for num in list: if num > max: max = num return max list = [5, 10, 2, 9, 6] print(largestNumber(list)) # Output: 10"},{"prompt":"Generate code in Python to produce a random string of length 10 which contains the characters a, e, i, o, and u.","completion":"import random def get_random_string(length=10): vowels = ['a', 'e', 'i', 'o', 'u'] return \\"\\".join(random.choices(vowels, k=length))"},{"prompt":"Write a Python script to find the maximum and the minimum value in a given list.","completion":"def find_max_min(lst): max_val = max(lst) min_val = min(lst) return max_val, min_val"},{"prompt":"Add a feature to the Python program that can enable automatic refreshing of the webpages every five minutes. Not applicable","completion":"import http.server import threading import time class MyHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): # Build file path url_tokens = self.path.split(\\"/\\") file_path = \\".\\" for token in url_tokens: if token != '': file_path += \\"/\\"+token # Set content type self.send_response(200) if file_path.endswith(\\".html\\"): self.send_header(\\"Content-type\\", \\"text/html\\") elif file_path.endswith(\\".css\\"): self.send_header(\\"Content-type\\", \\"text/css\\") else: self.send_header(\\"Content-type\\", \\"text/plain\\") self.end_headers() # Read and send back file content f = open(file_path, \\"rb\\") content = f.read() self.wfile.write(content) f.close() # Reload file every 5 minutes def reload_files(): while True: threading.Timer(300.0, reload_files).start() print(\\"Reloaded pages\\") # Run server PORT = 8080 server_address = (\\"\\", PORT) server = http.server.HTTPServer(server_address, MyHandler) # Start the refreshing timer Thread(target=reload_files).start() server.serve_forever()"},{"prompt":"Create an efficient Python function to find the longest common substring between two strings. String1 = hello world, String2 = hola world","completion":"def longest_common_substring (str1, str2): # maxstr is the longest common substring maxstr = \\"\\" # calculate the length of both strings len1 = len(str1) len2 = len(str2) # reversed loop to iterate throught both strings for i in range(len1,0,-1): for j in range(len2,0,-1): # find the longest matching string if (str1[len1-i:] == str2[len2-j:j+i]): if (len(maxstr) < i): maxstr = str1[len1-i:] break return maxstr # Test code print(longest_common_substring(\\"hello world\\", \\"hola world\\")) # Output # lo world"},{"prompt":"Design an algorithm in Python that computes the minimum number of coins that needs to be used for making change in a given denomination. An array of coins [1, 2, 5, 10] and a total amount of 19","completion":"def minimumNumberOfCoins(coins, amount): # Initialize the table for all amounts table = [0] * (amount + 1) table[0] = 0 for i in range(1, amount+1): table[i] = float(\\"inf\\") for j in range(len(coins)): sub_res = 0 if i >= coins[j]: sub_res = table[i - coins[j]] if (sub_res != float(\\"inf\\") and sub_res + 1 < table[i]): table[i] = sub_res + 1 return table[amount] if __name__ == \\"__main__\\": Coins = [1, 2, 5, 10] Amount = 19 print(\\"Minimum Coins Required:\\",minimumNumberOfCoins(Coins, Amount))"},{"prompt":"Generate a random password using Python that contains at least one special character, an uppercase letter, and a number. Length of the password: 12","completion":"import random import string def generate_password(): # Generate a random string of 12 characters password = ''.join(random.choices(string.ascii_uppercase + string.digits + string.punctuation, k=12)) # Return the password return password # Call the function password = generate_password() # Print the password print(password)"},{"prompt":"Use Python to check whether a given string is a palindrome (e.g. abccba is a palindrome). abcb","completion":"def isPalindrome(string): if string == string[::-1]: # Check if string is the same backwards return True else: return False isPalindrome('abcba') # Output: True"},{"prompt":"Design a web application in Django that uses a SQLite database to store information","completion":"# Create a Django project django-admin startproject myproject # Create an app called 'infoapp' python manage.py startapp infoapp # Configure settings.py to connect to a SQLite database, and add 'infoapp' to INSTALLED_APPS # Create models in infoapp/models.py # create tests in infoapp/tests.py # Migrate models python manage.py makemigrations python manage.py migrate # Create views and routes in infoapp/views.py # Run the web application python manage.py runserver"},{"prompt":"Create a kmeans clustering algorithm in Python that can group a set of data into k clusters. Not applicable","completion":"import numpy as np def k_means(data, k): centroids = np.random.uniform(low=np.min(data), high=np.max(data), size=(k, data.shape[1])) distances = np.zeros(shape=(data.shape[0], k)) cluster_labels = np.zeros(shape=data.shape[0]) while True: # Calculate distances between data points and centroids for i in range(k): distances[:, i] = np.linalg.norm(data - centroids[i], axis=1) # Assign clusters cluster_labels = np.argmin(distances, axis=1) # Compute new centroids new_centroids = np.zeros(shape=centroids.shape) for i in range(k): new_centroids[i] = np.mean(data[cluster_labels == i], axis=0) # Check for convergence if np.allclose(centroids, new_centroids): break # Update centroids for next iteration centroids = new_centroids return centroids, cluster_labels"},{"prompt":"Construct a python program to find the maximum element in a list using divide and conquer approach.","completion":"def max_list_div_conq(lst): if len(lst) == 1: return lst[0] mid = len(lst)//2 left_max = max_list_div_conq(lst[:mid]) right_max = max_list_div_conq(lst[mid:]) return max(left_max, right_max)"},{"prompt":"Write an algorithm to optimize a given program's runtime. def function(x): for i in range(len(x)): x[i] *= 2","completion":"def function(x): new_x = [] for i in range(len(x)): new_x.append(x[i] * 2) return new_x The modified algorithm reduces the program's runtime from O(n) to O(1) since the new version operates only on a single data structure, instead of the original two. This results in improved performance, since only the output array needs to be processed. The modified algorithm also utilizes the inherent properties of Python's list data structure more efficiently. Therefore, the time complexity and resulting runtime of the algorithm is significantly improved."},{"prompt":"Write a code to compare two complex numbers in Python. z1 = 2+3j z2 = 23j","completion":"def compare_complex_numbers(z1, z2): if z1.real == z2.real and z1.imag == z2.imag: return 'z1 and z2 are equal' else: return 'z1 and z2 are not equal'"},{"prompt":"Convert plain text to HTML with color coding and hyperlinking of URLs.","completion":"#!/usr/bin/env python from __future__ import with_statement import re import cgi colorcodes = {'bold':{True:'033[1m',False:'033[22m'}, 'cyan':{True:'033[1;36m',False:'033[0;0m'}, #'#8E4429':{True:'033[1;33m',False:'033[0;0m'}, '#8E4429':{True:'033[0;33m',False:'033[0;0m'}, #'#8E4429':{True:'033[33m',False:'033[0;0m'}, '#0000B0':{True:'033[1;34m',False:'033[0;0m'}, '#B63A11':{True:'033[1;31m',False:'033[0;0m'}, 'magenta':{True:'033[1;35m',False:'033[0;0m'}, #'green':{True:'033[1;32m',False:'033[0;0m'}, 'green':{True:'033[0;32m',False:'033[0;0m'}, #'green':{True:'033[32m',False:'033[0;0m'}, 'underline':{True:'033[1;4m',False:'033[0;0m'}} def recolor(color, text): regexp = \\"(?:%s)(.*?)(?:%s)\\" % (colorcodes[color][True], colorcodes[color][False]) regexp = regexp.replace('[', r'[') return re.sub(regexp, r'''<span style=\\"color: %s\\">1</span>''' % color, text) def resinglecolor(color, text, intxt): regexp = \\"(?:033[1;32m%s)(.*?)\\" % intxt return re.sub(regexp, r'<span style=\\"color: green\\">%s1</span>'% intxt, text) def removestdcolor(text): regexp = \\"(?:033[0;0m)(.*?)\\" return re.sub(regexp, r'', text) def bold(text): regexp = \\"(?:%s)(.*?)(?:%s)\\" % (colorcodes['bold'][True], colorcodes['bold'][False]) regexp = regexp.replace('[', r'[') return re.sub(regexp, r'<span style=\\"font-weight:bold\\">1</span>', text) def underline(text): regexp = \\"(?:%s)(.*?)(?:%s)\\" % (colorcodes['underline'][True], colorcodes['underline'][False]) regexp = regexp.replace('[', r'[') return re.sub(regexp, r'<span style=\\"text-decoration: underline\\">1</span>', text) def removebells(text): return text.replace('07', '') def removebackspaces(text): backspace_or_eol = r'(.010)|(033[K)' n = 1 while n > 0: text, n = re.subn(backspace_or_eol, '', text, 1) return text template = ''' <html> <head> </head> <body> %s </body> </html> ''' re_string = re.compile(r'(?P<htmlchars>[<&>])|(?P<space>^[ t]+)|(?P<lineend>rn|r|n)|(?P<protocal>(^|s|[)((http|ftp)://.*?))(s||])', re.S|re.M|re.I) def plaintext2html(text, tabstop=4): def do_sub(m): c = m.groupdict() if c['htmlchars']: return cgi.escape(c['htmlchars']) if c['lineend']: return '<br>' elif c['space']: t = m.group().replace('t', '&nbsp;'*tabstop) t = t.replace(' ', '&nbsp;') return t elif c['space'] == 't': return ' '*tabstop; else: url = m.group('protocal') #print url if url.startswith('['): prefix = '[' suffix = ']' url = url[1:] else: prefix = '' suffix = '' last = m.groups()[-1] if last in ['n', 'r', 'rn']: last = '<br>' return '%s<a href=%s>%s</a>%s' % (prefix, url, url, suffix) result = re.sub(re_string, do_sub, text) result = result.replace(' ', '&nbsp;') result = result.replace('t', '&nbsp;'*tabstop) result = recolor('cyan', result) result = recolor('#8E4429', result) result = recolor('#0000B0', result) result = recolor('#B63A11', result) result = recolor('magenta', result) result = recolor('green', result) result = resinglecolor('green', result, 'Source') result = resinglecolor('green', result, 'Output') result = bold(result) result = underline(result) result = removebells(result) result = removebackspaces(result) result = removestdcolor(result) return template % result if __name__ == '__main__': import sys with open(sys.argv[-1]) as f: text = f.read() print plaintext2html(text)"},{"prompt":"Design an algorithm in Python to determine if a given number is a prime.","completion":"def is_prime(num): if num <= 1: return False for i in range(2, num): if num % i == 0: return False return True"},{"prompt":"Using some common sorting algorithms, create a Python program to sort the given array of numbers arr = [4, 6, 8, 1, 3, 9]","completion":"def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i] j = i - 1 while j >= 0 and key < arr[j]: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = key return arr insertion_sort(arr)"},{"prompt":"Generate a Python program to solve the following problem: given an array of integers, find the number of pairs of integers whose sum is equal to zero. [5, 4, 2, 0, 2, 5]","completion":"def pairs_sum_to_zero(array): pairs = [] for i in range(len(array)): for j in range(i+1, len(array)): if array[i] + array[j] == 0: pairs.append([array[i], array[j]]) return len(pairs)"},{"prompt":"Given a list of elements, write a program to shuffle the elements in Python. myList = [1, 2, 3, 4, 5, 6]","completion":"import random def shuffle_list(myList): shuffledList = random.sample(myList, len(myList)) return shuffledList shuffledList = shuffle_list(myList) print(\\"Shuffled List :\\", shuffledList) # Output: Shuffled List : [2, 6, 4, 5, 3, 1]"},{"prompt":"Generate a Python class to represent a Person object with the attributes of 'firstName', 'lastName', and 'age'.","completion":"class Person: def __init__(self, firstName, lastName, age): self.firstName = firstName self.lastName = lastName self.age = age"},{"prompt":"Create an algorithm in Python to generate an array of 20 random numbers between 1 and 100.","completion":"import random def generate_array(): my_array = [] for i in range(20): my_array.append(random.randint(1,100)) return my_array"},{"prompt":"Write a web scraper in Python that can extract the text content from a block of HTML. <div> <h1>This is an example block of HTML</h1> <ul> <li>This is the first item</li> <li>This is the second item</li> </ul> </div>","completion":"import requests from bs4 import BeautifulSoup html = '<div> <h1>This is an example block of HTML</h1> <ul> <li>This is the first item</li> <li>This is the second item</li> </ul> </div>' soup = BeautifulSoup(html, 'html.parser') for item in soup.find_all('li'): print(item.text) # Output # This is the first item # This is the second item"},{"prompt":"Create a Python program that extrapolates the most frequent word from a given text. Text = This is an example of a text with some words","completion":"from collections import Counter def most_frequent_word(string): split_string = string.split(\\" \\") counter = Counter(split_string) return counter.most_common(1)[0][0] print(most_frequent_word(\\"This is an example of a text with some words\\"))"},{"prompt":"Design a Python program which takes two arrays of strings as input and sorts them alphabetically. ['zebra', 'apple', 'carrot'], ['banana', 'elephant', 'cat']","completion":"def sort_str_arr(arr1, arr2): arr1.sort() arr2.sort() return arr1 + arr2 arr1 = [\\"zebra\\", \\"apple\\", \\"carrot\\"] arr2 = [\\"banana\\", \\"elephant\\", \\"cat\\"] sorted_arrs = sort_str_arr(arr1, arr2) print(sorted_arrs) # ['apple', 'banana', 'carrot', 'cat', 'elephant', 'zebra']"},{"prompt":"Write a Python script that takes as input two strings and returns a boolean indicating if the two strings are equal when accounting for case sensitivity. String 1: Hello String 2: hello","completion":"def case_insensitive_compare(str1, str2): return str1.lower() == str2.lower() string1 = \\"Hello\\" string2 = \\"hello\\" print(case_insensitive_compare(string1, string2)) # Output True"},{"prompt":"Generate a facial recognition classifier model with high performance and accuracy using Python and scikitlearn. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.svm import SVC from sklearn.metrics import classification_report, confusion_matrix # load data data = pd.read_csv('<PATH TO DATA>') # Split data into features and labels X = data.drop(columns=['label']) y = data['label'] # split data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20) # Scale the data scaler = StandardScaler() scaler.fit(X_train) X_train = scaler.transform(X_train) X_test = scaler.transform(X_test) # Create and train the model model = SVC(C=1.0, kernel='poly', degree=5, gamma='auto') model.fit(X_train, y_train) # Make predictions and evaluate y_pred = model.predict(X_test) print(confusion_matrix(y_test, y_pred)) print(classification_report(y_test, y_pred))"},{"prompt":"Write a Python program to filter out strings longer than 15 characters from a list of strings. strings = ['good', 'very good', 'excellent', 'awesome', 'extremely awesome']","completion":"new_list = [] for string in strings: if len(string) <= 15: new_list.append(string) print(new_list) # prints ['good', 'very good', 'excellent', 'awesome']"},{"prompt":"Create a Python function that takes two arrays of numbers and calculates their dot product. [2, 4, 6], [3, 4, 5]","completion":"def dot_product(list1, list2): result = 0 for i in range(len(list1)): result += list1[i] * list2[i] return result list1 = [2,4,6] list2 = [3,4,5] dot = dot_product(list1, list2) print('Dot product of two lists =', dot) # Dot product of two lists = 46"},{"prompt":"Generate a Python program to create a dictionary from two given lists. list1 = [apple, banana, orange] list2 = [fruit, fruit, fruit]","completion":"list1 = [\\"apple\\", \\"banana\\", \\"orange\\"] list2 = [\\"fruit\\", \\"fruit\\", \\"fruit\\"] dictionary = dict(zip(list1, list2)) print(dictionary)"},{"prompt":"Create a Python script to convert a given list of integers to a new list of strings. [1, 2, 3]","completion":"def to_string_list(lst): return [str(x) for x in lst] int_list = [1, 2, 3] string_list = to_string_list(int_list) print(string_list) Output ['1', '2', '3']"},{"prompt":"Python, write a function that takes a string as input and reverses it. Hello World!","completion":"def reverseString(text): return text[::-1] result = reverseString(\\"Hello World!\\") print(result)"},{"prompt":"Create a program to search for a substring in a string and return the starting position of the substring. String: Python is powerful & fun Substring: pow","completion":"string = \\"Python is powerful & fun\\" substring = \\"pow\\" start_pos = string.find(substring) if start_pos == -1: print(\\"substring not found\\") else: print(\\"substring found at position:\\", start_pos)"},{"prompt":"Write a function in Python to print the Fibonacci series up to the nth term.","completion":"def Fibonacci(n): first, second = 0, 1 for _ in range(n): print(first) first, second = second, first + second"},{"prompt":"Create a web API in Python to search for a given product in the given dataset. import pandas as pd data = [['Apple','Fruit','3.99'], ['Tomato','Vegetable','1.99'], ['Shampoo','Household','2.99']] df = pd.DataFrame(data,columns=['Name','Category','Price'])","completion":"import pandas as pd from flask import Flask, request from flask_restful import Resource, Api data = [['Apple','Fruit','3.99'], ['Tomato','Vegetable','1.99'], ['Shampoo','Household','2.99']] df = pd.DataFrame(data,columns=['Name','Category','Price']) app = Flask(__name__) api = Api(app) class Search(Resource): def get(self): product = request.args.get('product') result = df.loc[df['Name'] == product] return {'result': result.to_dict('records')} api.add_resource(Search, '/search') if __name__ == '__main__': app.run(debug=True, host='0.0.0.0')"},{"prompt":"Using the Python library Keras, create a MultiLayer Perceptron model to predict the price of an article of clothing. Not applicable","completion":"import numpy as np import pandas as pd from keras.models import Sequential from keras.layers import Dense # Read the dataset df = pd.read_csv('clothing.csv') # Split the dataset into features and labels X = df.iloc[:,:-1] y = df.iloc[:,-1] # Create the model model = Sequential() model.add(Dense(64, activation='relu', input_shape=(X.shape[1],))) model.add(Dense(64, activation='relu')) model.add(Dense(1)) # Compile the model model.compile(optimizer='adam', loss='mse', metrics=['mae']) # Train the model model.fit(X, y, epochs=100, batch_size=32, validation_split=0.2, verbose=0)"},{"prompt":"Create a Python program to find and remove the longest string from a given list of strings. list_strings = [string1, string2, string3, longeststring]","completion":"def remove_longest_string(list_strings): longest_string = \\"\\" for string in list_strings: if len(string) > len(longest_string): longest_string = string list_strings.remove(longest_string) return list_strings print(remove_longest_string(list_strings))"},{"prompt":"Write a Python program to evaluate a simple expression and print the output. 7*6+20","completion":"def evaluate_expression(exp): return eval(exp) expression = \\"7*6+20\\" output = evaluate_expression(expression) print(output)"},{"prompt":"Develop a Python program that prints an alphabetically sorted list of unique words from a given sentence. This sentence contains a handful of words","completion":"sentence = \\"This sentence contains a handful of words\\" word_list = sentence.split() unique_words = set(word_list) sorted_words = sorted(unique_words) print(sorted_words) # Output: ['This', 'a', 'contains', 'handful', 'of', 'sentence', 'words']"},{"prompt":"What can be changed in the following Python code to improve its readability? def findMax(list): x=list[0] for i in list: if i>x: x=i return x","completion":"def findMax(list): # initialize the maximum variable to the first element of the list. maximum = list[0] # iterate through the list and compare each element to the current maximum element. for element in list: if element > maximum: maximum = element # return the maximum element. return maximum"},{"prompt":"Design an efficient algorithm to sort a list of integers in Python. [4, 2, 7, 1, 3, 8]","completion":"def sort_integers(arr): n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr unsorted_list = [4, 2, 7, 1, 3, 8] print(sort_integers(unsorted_list)) # Output: [1,2,3,4,7,8]"},{"prompt":"Write a python program that will take a given string and return a new string that is the same as the given one, except that all letters are reversed. Hello World!","completion":"def reverseString(string): string = \\"\\".join(reversed(string)) return string if __name__ == \\"__main__\\": string = \\"Hello World!\\" print(reverseString(string)) # Output: \\"!dlroW olleH\\""},{"prompt":"Create a program in Python to play a simple guessing game.","completion":"import random # randomly number = random.randint(1, 20) print(\\"I am thinking of a number between 1 and"},{"prompt":"Create a Python program to check if a given date is valid or not. The date to be checked is 2019/02/29.","completion":"from datetime import datetime date_string = '2019/02/29' try: date = datetime.strptime(date_string, '%Y/%m/%d') if date.year % 4 == 0 and date.month == 2 and date.day == 29: print('Valid Date') else: print('Invalid Date') except ValueError: print('Invalid Date')"},{"prompt":"Create an algorithm to optimize a given travel route such that the total cost is minimized. A map containing 6 cities connected by roads of varying lengths and distances, with the cost of travelling on each road.","completion":"# Python implementation of Prim's Algorithm for MST import sys # Number of vertices in the graph def primsMST(graph, n): key = [sys.maxsize] * n parent = [None] * n key[0] = 0 mstSet = [False] * n parent[0] = -1 for count in range(n): u = minKey(key, mstSet) mstSet[u] = True for v in range(n): if graph[u][v] > 0 and mstSet[v] == False and key[v] > graph[u][v]: key[v] = graph[u][v] parent[v] = u total_cost = 0 # print the constructed MST for i in range(1, n): total_cost += graph[parent[i]][i] print(\\"% d - % d: % d\\" % (parent[i], i, graph[parent[i]][i])) print(\\"Total cost of the optimized route: % d\\" %(total_cost)) def minKey(key, mstSet): min = sys.maxsize for v in range(len(key)): if key[v] < min and mstSet[v] == False: min = key[v] min_index = v return min_index # Driver code if __name__ == '__main__': graph = [[0, 2, 0, 6, 0], [2, 0, 3, 8, 5], [0, 3, 0, 0, 7], [6, 8, 0, 0, 9], [0, 5, 7, 9, 0]] n = len(graph) primsMST(graph, n)"},{"prompt":"Write a Python program to implement a sorting algorithm (your choice). num_list = [5,2,1,9,7,8]","completion":"def sorting_algorithm(num_list): for i in range(len(num_list)): for j in range(i + 1, len(num_list)): if num_list[i] > num_list[j]: num_list[i], num_list[j] = num_list[j], num_list[i] return num_list"},{"prompt":"Build a web API in Python to fetch a stock quote from the internet.","completion":"# imports import requests import json # API endpoint url = 'https://financialmodelingprep.com/api/v3/stock/quote/{ticker}?apikey={apikey}' # API request function def get_quote(ticker): api_key = '<Your API Key Here>' response = requests.get(url.format(ticker=ticker, apikey=api_key)) if response.status_code == 200: return json.loads(response.content.decode('utf-8')) else: return None"},{"prompt":"Create a Python program to tokenize a sentence and calculate the frequency of each word in the sentence. The quick brown fox jumps over the lazy dog","completion":"import nltk sentence = \\"The quick brown fox jumps over the lazy dog\\" words = nltk.word_tokenize(sentence) word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 print(word_freq)"},{"prompt":"Generate a function in Python that prints an argument specified by the user.","completion":"def print_user_value(x): print(x)"},{"prompt":"Make a Python program to get the factors of a number","completion":"def get_factors(n): factors = [1] for i in range(2, n + 1): if (n % i == 0): factors.append(i) return factors"},{"prompt":"Design a function to print a diamond pattern in python.","completion":"def draw_diamond(stars): for i in range(stars): # loop to print spaces for j in range(stars - i - 1): print(end=\\" \\") # loop to print stars for j in range(i + 1): print(\\"*\\", end=\\" \\") # new line after printing each row print() # loop to print rows of stars for bottom side of pattern for i in range(stars - 1, 0, -1): # loop to print spaces for j in range(stars - i - 1): print(end=\\" \\") # loop to print stars for j in range(i): print(\\"*\\", end=\\" \\") # new line after printing each row print()"},{"prompt":"Construct an algorithm in Golang to capitalize all the letters in a given string string = python","completion":"package main import ( \\"strings\\" ) func capitalize(string string) string { return strings.ToUpper(string) } func main() { string := \\"python\\" fmt.Println(capitalize(string)) }"},{"prompt":"mplement a Python function for finding the difference between two lists. list1 = [1, 2, 3, 4] list2 = [2, 3, 4, 5]","completion":"def difference(list1, list2): difference_set = set(list1) - set(list2) return list(difference_set) list1 = [1, 2, 3, 4] list2 = [2, 3, 4, 5] difference = difference(list1, list2) print(difference) # Output: # [1]"},{"prompt":"Can you suggest a code snippet that fetches the last element from a list in Python?","completion":"my_list = [3, 5, 7, 9, 2] last_element = my_list[-1] print('Last element in the list is %d' % (last_element))"},{"prompt":"Create a Python program to optimize a given function using the NelderMead method. def f(x): return x[0]**2 + 4*x[1]**2 [3, 2]","completion":"from scipy.optimize import minimize def f(x): return x[0]**2 + 4*x[1]**2 res = minimize(f, [3, -2], method='nelder-mead') print(res.x)"},{"prompt":"Develop a Python program to generate a valid ISBN13 number.","completion":"def get_ISBN(): #Make a list of random integers digits = [random.randint(0, 9) for _ in range(12)] #Calculate the checksum sum_ = 0 for index, digit in enumerate(digits): weight = 1 if (index % 2 == 0) else 3 sum_ += digit * weight #Calculate the checksum digit checksum = 10 - (sum_ % 10) # Append the checksum digit to the ISBN isbn = ''.join(map(str, digits)) + str(checksum) return isbn"},{"prompt":"This code tests the FisherSnedecor distribution by generating a realization and a sample, and computing various properties such as PDF, CDF, mean, standard deviation, skewness, kurtosis, covariance, and parameters. To use this code, import the necessary libraries and instantiate a FisherSnedecor distribution object with desired parameters. Then, call the desired methods on the distribution object to compute the desired properties.","completion":"#! /usr/bin/env python from __future__ import print_function from openturns import * from cmath import * TESTPREAMBLE() RandomGenerator.SetSeed(0) try: # Instanciate one distribution object distribution = FisherSnedecor(5.5, 10.5) print(\\"Distribution \\", repr(distribution)) print(\\"Distribution \\", distribution) # Is this distribution elliptical ? print(\\"Elliptical = \\", distribution.isElliptical()) # Is this distribution continuous ? print(\\"Continuous = \\", distribution.isContinuous()) # Test for realization of distribution oneRealization = distribution.getRealization() print(\\"oneRealization=\\", repr(oneRealization)) # Test for sampling size = 10000 oneSample = distribution.getSample(size) print(\\"oneSample first=\\", repr( oneSample[0]), \\" last=\\", repr(oneSample[size - 1])) print(\\"mean=\\", repr(oneSample.computeMean())) print(\\"covariance=\\", repr(oneSample.computeCovariance())) size = 100 for i in range(2): msg = '' if FittingTest.Kolmogorov(distribution.getSample(size), distribution).getBinaryQualityMeasure(): msg = \\"accepted\\" else: msg = \\"rejected\\" print( \\"Kolmogorov test for the generator, sample size=\\", size, \\" is\\", msg) size *= 10 # Define a point point = NumericalPoint(distribution.getDimension(), 1.0) print(\\"Point= \\", repr(point)) # Show PDF and CDF of point eps = 1e-5 # derivative of PDF with regards its arguments DDF = distribution.computeDDF(point) # print \\"ddf =\\" , repr(DDF) # by the finite difference technique # print \\"ddf (FD)=\\" ,repr(NumericalPoint(1, (distribution.computePDF( # point + NumericalPoint(1, eps) ) - distribution.computePDF( point + # NumericalPoint(1, -eps) )) / (2.0 * eps))) # PDF value LPDF = distribution.computeLogPDF(point) print(\\"log pdf=%.6f\\" % LPDF) PDF = distribution.computePDF(point) print(\\"pdf =%.6f\\" % PDF) # by the finite difference technique from CDF print(\\"pdf (FD)=%.6f\\" % ((distribution.computeCDF(point + NumericalPoint(1, eps)) - distribution.computeCDF(point + NumericalPoint(1, -eps))) / (2.0 * eps))) # derivative of the PDF with regards the parameters of the distribution CDF = distribution.computeCDF(point) print(\\"cdf=%.6f\\" % CDF) CCDF = distribution.computeComplementaryCDF(point) print(\\"ccdf=%.6f\\" % CCDF) CF = distribution.computeCharacteristicFunction(point[0]) print(\\"characteristic function=(%.6f+%.6fj)\\" % (CF.real, CF.imag)) PDFgr = distribution.computePDFGradient( point ) # print \\"pdf gradient =\\" , repr(PDFgr) # by the finite difference technique PDFgrFD = NumericalPoint(2) PDFgrFD[0] = (FisherSnedecor(distribution.getLambda() + eps, distribution.getGamma()).computePDF(point) - FisherSnedecor(distribution.getLambda() - eps, distribution.getGamma()).computePDF(point)) / (2.0 * eps) PDFgrFD[1] = (FisherSnedecor(distribution.getLambda(), distribution.getGamma() + eps).computePDF(point) - FisherSnedecor(distribution.getLambda(), distribution.getGamma() - eps).computePDF(point)) / (2.0 * eps) # print \\"pdf gradient (FD)=\\" , repr(PDFgrFD) # derivative of the PDF with regards the parameters of the distribution CDFgr = distribution.computeCDFGradient( point ) # print \\"cdf gradient =\\" , repr(CDFgr) CDFgrFD = NumericalPoint(2) CDFgrFD[0] = (FisherSnedecor(distribution.getLambda() + eps, distribution.getGamma()).computeCDF(point) - FisherSnedecor(distribution.getLambda() - eps, distribution.getGamma()).computeCDF(point)) / (2.0 * eps) CDFgrFD[1] = (FisherSnedecor(distribution.getLambda(), distribution.getGamma() + eps).computeCDF(point) - FisherSnedecor(distribution.getLambda(), distribution.getGamma() - eps).computeCDF(point)) / (2.0 * eps) # print \\"cdf gradient (FD)=\\", repr(CDFgrFD) # quantile quantile = distribution.computeQuantile(0.95) print(\\"quantile=\\", repr(quantile)) print(\\"cdf(quantile)=%.6f\\" % distribution.computeCDF(quantile)) mean = distribution.getMean() print(\\"mean=\\", repr(mean)) standardDeviation = distribution.getStandardDeviation() print(\\"standard deviation=\\", repr(standardDeviation)) skewness = distribution.getSkewness() print(\\"skewness=\\", repr(skewness)) kurtosis = distribution.getKurtosis() print(\\"kurtosis=\\", repr(kurtosis)) covariance = distribution.getCovariance() print(\\"covariance=\\", repr(covariance)) parameters = distribution.getParametersCollection() print(\\"parameters=\\", repr(parameters)) for i in range(6): print(\\"standard moment n=\\", i, \\" value=\\", distribution.getStandardMoment(i)) print(\\"Standard representative=\\", distribution.getStandardRepresentative()) except: import sys print(\\"t_FisherSnedecor_std.py\\", sys.exc_info()[0], sys.exc_info()[1])"},{"prompt":"Create a Python function that takes in a list of numbers and returns the first occurrence of a prime number. [2, 4, 6, 8]","completion":"def findPrime(nums): for num in nums: if isPrime(num): return num def isPrime(num): if num <= 1: return False for i in range(2, num): if (num % i == 0): return False return True"},{"prompt":"Write a Python code snippet to reverse the order of words in a sentence. Sentence: Hello, World!","completion":"def reverseWords(sentence): words = sentence.split() words.reverse() newSentence = ' '.join(words) print(newSentence) reverseWords(\\"Hello, World!\\")"},{"prompt":"Create a Python function to compute the nth Fibonacci number of a provided number n. n = 5","completion":"def fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return fibonacci(n-1)+fibonacci(n-2) print(fibonacci(5)) # Outputs 3"},{"prompt":"Find the most expensive item from the given list using Python. [{'item': 'rice', 'price': 22.20}, {'item': 'bread', 'price': 15.00}, {'item': 'milk', 'price': 18.60}, {'item': 'butter', 'price': 34.40}]","completion":"most_expensive_item = max(list_of_items, key=lambda x: x['price'])"},{"prompt":"Create a function in Python to return the maximum value in a given array. The given array is [4, 5, 9, 1, 0, 5, 7]","completion":"def findMaxValue(arr): max_value = None for element in arr: if max_value == None or element > max_value: max_value = element return max_value"},{"prompt":"Create a basic web scraping application in Python that extracts news headlines from a news source. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'http;//example.com/news' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') headlines = soup.find_all('h2') for headline in headlines: print(headline.text)"},{"prompt":"Develop a python program to quantify the number of appearances of each character in a given string.","completion":"def char_count(str1): dict = {} for n in str1: keys = dict.keys() if n in keys: dict[n] += 1 else: dict[n] = 1 return dict"},{"prompt":"Create a machine learning algorithm in Python to predict whether a given statement is positive or negative. sentence= This is a great day for a walk","completion":"import nltk from nltk.classify import NaiveBayesClassifier # Corpus of Train Data train_data = [(\\"This is a great day for a walk.\\", 'positive'), (\\"Today's forecast looks horrible\\", 'negative'), (\\"The weather is so beautiful.\\", 'positive')] # Tokenize words words_list = [word_tokenize(sent[0]) for sent in train_data] # Build a list of words all_words = [] for word_list in words_list: for word in word_list: all_words.append(word.lower()) # Get the Frequency Distribution of the words all_words_unique = nltk.FreqDist(all_words) # Move the features to the word list word_features = list(all_words_unique.keys()) # Function to extract features def extract_features(sentence): tokenize_words = word_tokenize(sentence) features = {} for word in word_features: features[word] = (word in tokens) return features # Train the model training_set = nltk.classify.apply_features(extract_features, train_data) classifier = NaiveBayesClassifier.train(training_set) # Predictions sentence = \\"This is a great day for a walk.\\" pred = classifier.classify(extract_features(sentence)) print (pred)"},{"prompt":"Optimize a Python function for computing Fibonacci numbers. def fib(n): if n == 0 or n == 1: return n else: return fib(n1) + fib(n2)","completion":"def fibonacci(n): if n <= 1: return n else: fibonacci_num=[0,1] #creating a fibonacci list i=2 while i<=n: fibonacci_num.append(fibonacci_num[i-1]+fibonacci_num[i-2]) i+=1 return fibonacci_num[n]"},{"prompt":"Design an algorithm to find the missing number from an array of numbers using Python. [9, 5, 4, 6, 8, 7, 1, 2]","completion":"def find_misssing_number(arr): # Get length of array arr_length = len(arr) # Find the sum of array elements sum_of_elements = sum(arr) # Find the expected sum expected_sum = (arr_length+1)*((arr_length+1)+1)//2 # Return difference return expected_sum - sum_of_elements # Test arr = [9, 5, 4, 6, 8, 7, 1, 2] # Find missing number missing_number = find_misssing_number(arr) # Print the missing number print(f'Missing number : {missing_number}')"},{"prompt":"Create a web scraper in Python that scrapes the website example.com and prints out the content of all the h1 tags. Not applicable","completion":"import requests from bs4 import BeautifulSoup response = requests.get('https://example.com/') soup = BeautifulSoup(response.text, 'html.parser') for h1 in soup.find_all('h1'): print(h1.text)"},{"prompt":"Develop an application using Python that takes user inputs like name, age, and gender, and stores them in an Excel spreadsheet. Not applicable","completion":"# Solution # First, let's import necessary libraries import pandas as pd import openpyxl as op # Then, let's define a dictionary with user inputs user_inputs = { 'name': 'John Smith', 'age': 28 'gender': 'Male' } # Next, we need to create a Pandas DataFrame with the data df = pd.DataFrame([user_inputs]) # Finally, we can write the data to an Excel spreadsheet writer = pd.ExcelWriter('user_details.xlsx', engine='openpyxl') df.to_excel(writer, sheet_name='Sheet1', index=False) writer.save()"},{"prompt":"Design a chatbot in Python that can respond to certain questions.","completion":"class Chatbot: def __init__(self): self.response_dict = {} self.default_response = \\"\\" def add_response(self, user_input, bot_response): self.response_dict[user_input] = bot_response def set_default_response(self, default_response): self.default_response = default_response def response(self, user_input): if user_input in self.response_dict: return self.response_dict[user_input] else: return self.default_response"},{"prompt":"Optimize this Python code to make it more efficient. def count_numbers(lst): count = 0 for i in range(len(lst)): if lst[i].isdigit(): count += 1 return cou","completion":"def count_numbers(lst): count = sum(map(str.isdigit, lst)) return count"},{"prompt":"Create a program to print the multiplication table for a given number in Python.","completion":"\\"\\"\\" Create a program to print the multiplication table for a given number in Python \\"\\"\\" def multiplication_table(n): for i in range(1, 11): print(n, 'x', i, '=', n*i) if __name__==\\"__main__\\": multiplication_table(5)"},{"prompt":"Create a Python list comprehension to generate all squares of even numbers under 100.","completion":"[i**2 for i in range(2, 101, 2)]"},{"prompt":"Write a function in Python that converts a given datetime string into a specified timestamp format. String datetime: 20200502 15:30:00 Timestamp format: %Y/%m/%d %H:%M:%S","completion":"import datetime def convert_datetime_to_timestamp(date_time, timestamp_format): return datetime.strptime(date_time, \\"%Y-%m-%d %H:%M:%S\\").strftime(timestamp_format)"},{"prompt":"Create a python package to analyze log data from a web server. The package should parse log entries and identify the top 10 most visited URLs on a daily basis. sample.log [20200603 00:12:30] 192.168.0.1 GET /images/index.jpg 200 [20200603 00:15:20] 192.168.0.2 GET /css/style.css 200 [20200603 00:20:17] 192.168.0.2 GET /js/app.js 200 [20200604 00:14:40] 192.168.0.1 GET /images/index.jpg 200 [20200604 00:17:30] 192.168.0.2 GET /css/style.css 200 [20200604 00:22:17] 192.168.0.2 GET /js/app.js 200","completion":"import re from collections import Counter def read_logs(log_file): log_entries = [] with open(log_file) as f: lines = f.readlines() for line in lines: log_entry = line.strip().split(' ') log_entries.append(log_entry) return log_entries def find_top_urls(log_file, day): log_entries = read_logs(log_file) urls = [log[2] for log in log_entries if log[0].startswith(day)] counter_urls = Counter(urls) return counter_urls.most_common(10) if __name__ == \\"__main__\\": top_urls = find_top_urls('sample.log', '2020-06-04') print(top_urls)"},{"prompt":"Write a Python program that implements linear regression using the least squares method. Not applicable","completion":"import numpy as np # define the least squares function def least_squares(x, y): x_mean = np.mean(x) y_mean = np.mean(y) num = np.sum((x - x_mean)*(y - y_mean)) denom = np.sum((x - x_mean)**2) m = num / denom b = y_mean - (m * x_mean) return m, b # define some sample data x = np.array([1, 2, 3, 4, 5, 6]) y = np.array([3, 4, 5, 6, 7, 8]) # get the linear regression line coefficients m, b = least_squares(x, y) # calculate the linear regression line reg_line = m * x + b # print out the linear regression line print('y = %sx + %s' % (round(m,2), round(b,2)))"},{"prompt":"Write a Python program to classify a given email message as spam or not. Subject: Get Rich Quick! From: Julia Body: Eager to earn large sums of money quickly? We have the solution for you. Make money faster than you ever imagined.","completion":"from sklearn.naive_bayes import GaussianNB # Define the features as an array of words features = ['get', 'rich', 'quick', 'large', 'sums', 'money', 'faster', 'imagined'] # Labels where 1 = spam, 0 = not spam labels = [1, 0] # Create an instance of the GaussianNB classifier classifier = GaussianNB() # Fit the data to the model classifier.fit(features, labels) # Test with a given email message email = 'Get Rich Quick!' # Create an array for the features of the email message features = [word for word in email.lower().split() if word in features] # Predict the label of the email message prediction = classifier.predict([features]) # Print the result print('The email message is {0}'.format('spam' if prediction[0] == 1 else 'not spam'))"},{"prompt":"Using Python, implement a method for sorting a list using a Quicksort algorithm? list = [3, 2, 5, 6, 8, 4, 1]","completion":"def quicksort(array): if len(array) < 2: # base case, arrays with 0 or 1 element are already sorted return array else: # recursive case pivot = array[0] # sub-array of all the elements less than the pivot less = [i for i in array[1:] if i <= pivot] # sub-array of all the elements greater than the pivot greater = [i for i in array[1:] if i > pivot] return quicksort(less) + [pivot] + quicksort(greater) print(quicksort(list))"},{"prompt":"This code matches the words in a hypothesis file to the corresponding words in a reference file. To use it, call the function \`match_ref_hyp()\` with two arguments: a list of references of type \`STM_Line\` and a list of hypotheses of type \`CTM_Line\`. The function will return a list of type \`STM_Line\` where each word in the input hypothesis is matched (in time) with a corresponding entry in the input reference file. If a word doesn't match any line in the input reference file, it is given a new entry with speaker unmatched (since the input hypothesis doesn't specify speaker). Currently, only stm for reference and ctm for hypothesis files are supported. The midpoint of a ctm word is used to determine its time, and it is assigned to the first stm segment it's within.","completion":"#!/usr/bin/env python # # File: match_ref_hyp.py # Author: Adam Janin # Feb 23, 2017 # # Given a reference file and a hypothesis file, figure out which parts # of the hypotheses match which part of the reference. Output the # hypotheses file as stm, where the non-text lines are taken # from the matching lines of the reference (except where there's # no matching references, where the non-text will be \\"unmatched\\"). # # Currently, only stm for reference and ctm for hypthosis files are # supported. The algorithm currently mimics sclite; the midpoint of a # ctm word is used to determine its time, and it is assigned to the # first stm segment it's within. # # This code can be used either as a stand-alone program, or it can # be imported. See function match_ref_hyp() # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); you # may not use this file except in compliance with the License. The # License may be found in the file LICENSE at the top level of the # repository / directory tree. # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or # implied. See the License for the specific language governing # permissions and limitations under the License. from __future__ import print_function from six.moves import input import six import argparse from bisect import bisect from collections import defaultdict import logging from operator import methodcaller import sys import utils VERSION = 0.1 class Global: '''Stores globals. There should be no instances of Global.''' # Command line arguments args = None # Two times that are less than this are considered identical. epstime = 0.005 # end class Global def main(argv): parse_arguments(argv[1:]) setup_logging() instm = utils.read_stm(Global.args.ref) # List of STM_Line inctm = utils.read_ctm(Global.args.inhyp) # List of CTM_Line outhyp = match_ref_hyp(instm, inctm) # List of STM_Line for line in outhyp: Global.args.outhyp.write(str(line)) Global.args.outhyp.write('n') # end main() def match_ref_hyp(instm, inctm): \\"\\"\\"Given a list of references of type STM_Line and a list of hypotheses of type CTM_Line, return a list of type STM_Line where each word in the input ctm is matched (in time) with a corresponding entry in the input stm file. If a word doesn't match any line in the input stm, it is given a new entry with speaker \\"unmatched\\" (since the input ctm doesn't specify speaker).\\"\\"\\" outhyps = [] # Go through the ctms, storing each file/channel in a separately # sorted list. # Map of e.g. 'sw_4390 A' -> list of CTM_Line sorted by midtime sorted_ctms = defaultdict(list) # Map of e.g. 'sw_4390 A' -> list of booleans, False if the ctm hasn't been assigned # to an stm line, True otherwise. assigned = {} # The midtimes of sorted_ctms in the same order. sorted_ctm_midtimes = {} # Store the ctms by file/channel for ctm in inctm: sorted_ctms['%s %s'%(ctm.file, ctm.channel)].append(ctm) # Sort them by midtime. for key in sorted_ctms: ctmlist = sorted_ctms[key] ctmlist.sort(key=methodcaller('midtime')) sorted_ctm_midtimes[key] = [x.midtime() for x in ctmlist] assigned[key] = [False]*len(ctmlist) for ref in instm: outwords = [] filechannel = '%s %s'%(ref.file, ref.channel) if filechannel not in sorted_ctm_midtimes: continue cur_ctm_midtimes = sorted_ctm_midtimes[filechannel] cur_ctms = sorted_ctms[filechannel] for ii in range(bisect(cur_ctm_midtimes, ref.starttime), len(cur_ctm_midtimes)): hyptime = cur_ctm_midtimes[ii] hyp = cur_ctms[ii] if hyptime < ref.starttime or hyptime > ref.endtime: break else: if assigned[filechannel][ii]: # If it's only barely assigned to this segment, don't report the error. if abs(hyptime - ref.starttime) > Global.epstime and abs(hyptime - ref.endtime) > Global.epstime: logging.warning(\\"Warning: Found hypothesis that matches more than one stm line. This indicates that the stm contains overlapping segments. The ctm word has been assigned to the first segment. The ctm entry was:n%snThe second stm entry was:n%sn\\"%(hyp, ref)) else: assigned[filechannel][ii] = True outwords.append(hyp.word) # Make a copy of the corresponding ref line, and replace the words. outhyp = utils.STM_Line(str(ref)) outhyp.words = ' '.join(outwords) outhyps.append(outhyp) # Now find any ctms that were not assigned to an stm. outwords = [] for filechannel in sorted_ctms: for ii in range(len(sorted_ctms[filechannel])): if not assigned[filechannel][ii]: hyp = sorted_ctms[filechannel][ii] outhyp = utils.STM_Line() outhyp.file = hyp.file outhyp.channel = hyp.channel outhyp.speaker = 'unassigned' outhyp.starttime = hyp.starttime outhyp.endtime = hyp.starttime + hyp.duration outhyp.label = '<>' outhyp.words = hyp.word outhyps.append(outhyp) return outhyps # end match_ref_hyp() def parse_arguments(strs): parser = argparse.ArgumentParser(description='Given input references in stm format and input hypothesis in ctm format, generate a hypothesis file in stm format. Each hypothisis line is generated by picking any words from the same file/channel whose midpoint intersects the corresponding reference line. Any hypothesis words that do not match a reference line are added at the end of the hypothesis file. Version %s.'%(VERSION)) parser.add_argument('-loglevel', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'], default='WARNING', help='Logging level (default %(default)s)') parser.add_argument('-version', '--version', action='version', version=str(VERSION)) parser.add_argument('-ref', help='Input reference file in stm format', type=argparse.FileType('r'), required=True) parser.add_argument('-inhyp', help='Input hypothesis file in ctm format', type=argparse.FileType('r'), required=True) parser.add_argument('-outhyp', help='Output hypothesis file in stm format', type=argparse.FileType('w'), required=True) Global.args = parser.parse_args(strs) # end parse_arguments() def setup_logging(): numeric_level = getattr(logging, Global.args.loglevel, None) if not isinstance(numeric_level, int): raise ValueError('Invalid log level: %s' % Global.args.loglevel) logging.basicConfig(level=numeric_level, format=\\"%(module)s:%(levelname)s: %(message)s\\") # end setup_logging() if __name__ == \\"__main__\\": main(sys.argv)"},{"prompt":"Write a Python program to format a given string with a coefficient of over 66%. s = Hello World","completion":"def format_string(s): return s.upper() if (s.count(\\" \\")+1) / len(s) > 0.66 else s s = \\"Hello World\\" print(format_string(s)) # Output: HELLO WORLD"},{"prompt":"Create a for loop in Python that prints the output of a multiplication table for numbers from 1 to 10.","completion":"for i in range(1, 11): for j in range(1, 11): print(i * j, end='t') print()"},{"prompt":"Rewrite the following Python code in Node.js: EvenNumbers = [2, 4, 6, 8] sum = 0 for item in EvenNumbers: sum += item print(sum)","completion":"let evenNumbers = [2, 4, 6, 8]; let sum = 0; for (let item of evenNumbers) { sum += item; } console.log(sum);"},{"prompt":"Edit the following Python code to improve its speed. def find_missing_numbers(arr): n = len(arr) complete_sum = n*(n+1)/2 arr_sum = sum(arr) return complete_sum arr_sum print(find_missing_numbers([1,2,3,4,5,7,8,9]))","completion":"def find_missing_numbers(arr): complete_sum = (arr[-1]*(arr[-1]+1))//2 arr_sum = 0 for i in arr: arr_sum += i return complete_sum - arr_sum print(find_missing_numbers([1,2,3,4,5,7,8,9]))"},{"prompt":"Develop a Python algorithm to find the maximum element in a given array. [1, 4, 6, 7, 3]","completion":"def find_max_element(arr): maxElement = arr[0] for val in arr: if val > maxElement: maxElement = val return maxElement"},{"prompt":"Create a Python function that takes an integer argument and prints the prime factors of that number. num = 30","completion":"def find_prime_factors(num): factors = [] i = 2 while i * i <= num: if num % i: i += 1 else: num //= i factors.append(i) if num > 1: factors.append(num) print(factors) find_prime_factors(num)"},{"prompt":"Write a Python program to create a list of dictionaries from a given list of dictionary keys and a list of dictionary values. keys: [1, 2, 3] values: [a, b, c]","completion":"keys = [1,2,3] values = [\\"a\\",\\"b\\",\\"c\\"] list_of_dict = [dict(zip(keys, values)) for i in range(len(keys))] print(list_of_dict) # Output: [{1: 'a', 2: 'b', 3: 'c'}]"},{"prompt":"Create a function in Python to print Pascal's Triangle of a given number of rows. 6","completion":"def pascal_triangle(n): triangle = [] for i in range(n): row = [1] * (i+1) triangle.append(row) for j in range(1,i): row[j] = triangle[i-1][j-1] + triangle[i-1][j] for row in triangle: print(row) pascal_triangle(6) # Output: [1] # [1, 1] # [1, 2, 1] # [1, 3, 3, 1] # [1, 4, 6, 4, 1] # [1, 5, 10, 10, 5, 1]"},{"prompt":"Write a Python script to generate a random password with a given length. The password should contain letters, digits and special characters. Length: 10","completion":"import random import string #function to generate a random password def generate_password(length): #generate a random string chars = string.ascii_letters + string.digits + string.punctuation #combine random letters, digits and special characters passwd = ''.join(random.choice(chars) for i in range(length)) return passwd #example length = 10 password = generate_password(length) #output print(password) # Output: O;3Rm,@3H"},{"prompt":"Categorize the following Github repositories: Repo A: Languages: Python, JavaScript, HTML. Repo B: Languages: Java, JavaScript, CSS.","completion":"Repo A: Python, JavaScript, HTML Repo B: Java, JavaScript, CSS"},{"prompt":"Generate code in Python to print out the common elements of two sorted lists in linear time.","completion":"def find_common_elements(list1, list2): common_elements = [] i = 0 j = 0 while i < len(list1) and j < len(list2): if list1[i] == list2[j]: common_elements.append(list1[i]) i += 1 j += 1 elif list1[i] > list2[j]: j += 1 else: i += 1 return common_elements"},{"prompt":"Rewrite the current function using Python 3.x code instead of Python 2.7. def sum(a, b): return a + b","completion":"def sum(a, b): return a + b"},{"prompt":"Write a Python program to select all the Sundays of a specified year. year = 2020","completion":"import datetime def select_all_sundays(year): sunday_list = [] for n in range(1,13): sundays = [d for d in [datetime.date(year, n, d) for d in range(1, 32)] if d.weekday() == 6] sunday_list.extend(sundays) return sunday_list if __name__ == '__main__': year = 2020 sunday_list = select_all_sundays(year) print(sunday_list)"},{"prompt":"Write a Python program to determine if a given list of words are anagrams or not. words = [cat, tac, tca]","completion":"def is_anagram(words): anagram = True for i in range(len(words)): for j in range(i + 1, len(words)): if len(words[i]) != len(words[j]): anagram = False break else: if sorted(words[i]) != sorted(words[j]): anagram = False break return anagram result = is_anagram(words) print(result) # True"},{"prompt":"Write a Python class to convert a roman numeral to an integer.","completion":"class Roman_int(): def __init__(self, Roman_num): self.roman_numeral = Roman_num @staticmethod def get_value(char): if(char == 'I'): return 1 elif(char == 'V'): return 5 elif(char == 'X'): return 10 elif(char == 'L'): return 50 elif(char == 'C'): return 100 elif(char == 'D'): return 500 elif(char == 'M'): return 1000 def get_integer(self): num = 0 for i in range(len(self.roman_numeral)): s1 = Roman_int.get_value(self.roman_numeral[i]) if (i+1 < len(self.roman_numeral)): s2 = Roman_int.get_value(self.roman_numeral[i+1]) if s1 >= s2: num = num + s1 else: num = num + s2 - s1 return num"},{"prompt":"Once you have generated a list of strings, write a Python program to print the same in reverse order. L2= [This, is, another, list, of, strings]","completion":"def reverse_list(L2): L2.reverse() return L2"},{"prompt":"Write a python script to print the prime numbers between 1 to 100.","completion":"def prime_numbers(start, end): for number in range(start, end + 1): # if the number is divisible by any of the numbers from 2 to one less than the number itself, then it is not prime. if number > 1: for i in range(2, number): if (number % i) == 0: break else: print(number) # To print all prime numbers from 1 to 100 prime_numbers(1, 100)"},{"prompt":"Write a Python program that takes a list of integers and returns a list of their squares. [1, 2, 3, 4]","completion":"def square_list(l): return [i**2 for i in l] print(square_list([1, 2, 3, 4])) # Output: [1, 4, 9, 16]"},{"prompt":"Design a Python class to represent a fourplayer chess game.","completion":"class ChessGame: \\"\\"\\" Represent a four-player chess game. \\"\\"\\" def __init__(self): \\"\\"\\"Initialize the board with pieces and their starting positions. \\"\\"\\" self.white_players = {\\"king\\": (7, 0), \\"queen\\": (7, 3), \\"bishop\\": (7, 2), \\"knight\\": (7, 1), \\"pawn\\": (6, 0)} self.black_players = {\\"king\\": (0, 0), \\"queen\\": (0, 3), \\"bishop\\": (0, 2), \\"knight\\": (0, 1), \\"pawn\\": (1, 0)}"},{"prompt":"Generate a random 4digit number using Python. Not applicable","completion":"import random random.randint(1000, 9999)"},{"prompt":"What code will create a directory in Python?","completion":"import os os.mkdir(\\"directory_name\\")"},{"prompt":"Create an optimization algorithm in Python to find the minimum value of a function. Input function: f(x,y) = x^2 + y^2 Range of X: [2,2] Range of Y: [3,3]","completion":"import numpy as np def optimize(func, x_range, y_range): x = np.linspace(*x_range, num=100) y = np.linspace(*y_range, num=100) minVal = np.inf for xVal in x: for yVal in y: fVal = func(xVal, yVal) if fVal < minVal: minVal = fVal minXVal = xVal minYVal = yVal print(\\"The minimum value is \\" + str(minVal) + \\" at x=\\" + str(minXVal) + \\" and y=\\" + str(minYVal)) func = lambda x,y: x*x + y*y optimize(func, (-2,2), (-3,3)) # Output: The minimum value is 0.0 at x=0.0 and y=0.0"},{"prompt":"Write a Python program to optimize a given function using gradient descent.","completion":"import numpy as np def optimize(f, lr, num_iterations): x = 0.0 for i in range(num_iterations): grad = numerical_diff(f, x) x -= lr * grad return x def numerical_diff(f, x): h = 1e-4#0.0001 return (f(x+h) - f(x-h)) / (2*h)"},{"prompt":"Create a Python program that extracts the nth element from a nested array. nested array: [[1,2,3], [4,5,6], [7,8,9]] nth index: 5","completion":"def extract_nth_element(arr, n): nth_element = arr[n // len(arr[0])][n % len(arr[0])] return nth_element arr = [[1,2,3], [4,5,6], [7,8,9]] n = 5 print(extract_nth_element(arr, n)) # Output: 6"},{"prompt":"mplement the CohenSutherland clipping algorithm in Python.","completion":"def cohen_sutherland_clipping(x1, y1, x2, y2, box): code_p1 = get_code(x1, y1, box) code_p2 = get_code(x2, y2, box) accept = False while (True): if (code_p1 == 0 and code_p2 == 0): accept = True break elif (code_p1 & code_p2 != 0): break else: x, y = get_intersection(x1, y1, x2, y2, box, code_p1) if (code_p1 == 0): x2 = x y2 = y code_p2 = get_code(x2, y2, box) else: x1 = x y1 = y code_p1 = get_code(x1, y1, box) if (accept): return (x1, y1, x2, y2) else: return False"},{"prompt":"Write a python program to print out all possible permutations of a sequence of numbers. [1, 2, 3]","completion":"def permutations(nums): '''Function to print out all possible permutations of a sequence of numbers.''' if len(nums) == 0: return [] if len(nums) == 1: return [nums] permutations = [] for i in range(len(nums)): current_num = nums[i] remaining_nums = nums[:i] + nums[i+1:] sub_permutations = permutations(remaining_nums) for sub_permutation in sub_permutations: permutations.append([current_num] + sub_permutation) return permutations"},{"prompt":"Write an optimization function for finding the minimum of a twodimensional scalar field in Python. a scalar field represented as a 2D array (e.g. [[2, 1], [4, 3]] where value at position [i][j] is 2i + j)","completion":"def findMin(scalarField): minVal = float('inf') minInd = (-1, -1) for i in range(len(scalarField)): for j in range(len(scalarField[i])): val = scalarField[i][j] if val < minVal: minVal = val minInd = (i, j) return minInd"},{"prompt":"Design a Python 3 program that takes as input from the user two commaseparated lists of integers and then finds the union of the two lists. list1 = [1,2,3,4], list2 = [6,5,4,3]","completion":"list1 = [1,2,3,4] list2 = [6,5,4,3] def findUnion(list1, list2): unionList = list1 for item in list2: if item not in unionList: unionList.append(item) return unionList union = findUnion(list1, list2) print(union) # prints [1, 2, 3, 4, 6, 5]"},{"prompt":"Create a web scraper in Python to retrieve the title and body text of all blogposts in a given website. https://www.example.com","completion":"import requests from bs4 import BeautifulSoup def get_blog_posts(url): # make a GET request to fetch the raw HTML content html_content = requests.get(url).text # parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # retrieve all the post elements posts = soup.find_all('div', class_='post') # extract the title, text and tags from the post elements blog_posts = [] for post in posts: title = post.find('h2', class_='post-title') text = post.find('div', class_='post-body') tags = post.find('ul', class_='post-tags') blog_posts.append({ 'title': title.text, 'text': text.text, 'tags': tags.text }) return blog_posts url = \\"https://www.example.com\\" blog_posts = get_blog_posts(url) print(\\"Blog Posts: \\", blog_posts)"},{"prompt":"Write a Python function to find two numbers in an array with the largest sum. [3, 10, 3, 2, 5]","completion":"def max_sum(arr): max_val = float('-inf') for i in range(len(arr)): for j in range(i + 1, len(arr)): max_val = max(max_val, arr[i] + arr[j]) return max_val result = max_sum([3, 10, -3, -2, 5]) print(result)"},{"prompt":"Given a neural network, write a Python program to add dropout regularization to the network. A 3layer neural network","completion":"# import packages import numpy as np import matplotlib.pyplot as plt from keras.layers import Dense, Dropout from keras.models import Sequential # create the model model = Sequential() # First hidden layer takes input and applies dropout model.add(Dense(units = 32, input_dim = 8, activation = 'relu')) model.add(Dropout(0.2)) #Second hidden layer takes input and applies dropout model.add(Dense(units = 16, activation = 'relu')) model.add(Dropout(0.2)) # Third hidden layer takes input and applies dropout model.add(Dense(units = 8, activation = 'relu')) model.add(Dropout(0.2)) # Output layer model.add(Dense(units = 4, activation = 'softmax')) # Compile the model model.compile(optimizer = 'adam', loss = 'categorical_crossentropy') # Summary of the layers model.summary()"},{"prompt":"Create a class in Python to store data on employees in a company.","completion":"class Employee: def __init__(self, name, age, salary, job_title): self.name = name self.age = age self.salary = salary self.job_title = job_title self.bonus = 0 def get_full_name(self): return self.name def get_age(self): return self.age def get_salary(self): return self.salary def get_job_title(self): return self.job_title def set_bonus(self, bonus): self.bonus = bonus"},{"prompt":"Create a neural network architecture in Python for predicting the values of a time series dataset.","completion":"model = Sequential() model.add(LSTM(50, activation='relu', input_shape=(n_timesteps, n_features))) model.add(Dense(100, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(n_outputs)) model.add(Activation('linear')) model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy']) # fit network model.fit(X_train, y_train, epochs=50, batch_size=72, verbose=2)"},{"prompt":"Generate a function in Python that finds the most frequent element in a list.","completion":"def most_frequent(lst): counter = 0 num = lst[0] for i in lst: curr_frequency = lst.count(i) if(curr_frequency> counter): counter = curr_frequency num = i return num"},{"prompt":"Create a Python script to extract the temperature from a JSON object. { location: Berlin, weather: { temperature: 17.6 } }","completion":"import json json_string = ''' { \\"location\\": \\"Berlin\\", \\"weather\\": { \\"temperature\\": 17.6 } } ''' data = json.loads(json_string) temperature = data[\\"weather\\"][\\"temperature\\"] print(temperature) => 17.6"},{"prompt":"Edit the following Python code to remove duplicate values in the given array. arr = [1, 2, 4, 2, 5, 4]","completion":"arr = [1, 2, 4, 5] unique_arr = [] for element in arr: if element not in unique_arr: unique_arr.append(element) print(unique_arr) # [1, 2, 4, 5]"},{"prompt":"Create a Monte Carlo simulation in Python to estimate the value of Pi. Not applicable","completion":"import random import math def monte_carlo_pi(n): inside = 0 for i in range(n): x = random.random() y = random.random() if (x*x + y*y) <= 1: inside += 1 pi = (inside/n)*4 return pi # Test with 10000 simulations n = 10000 result = monte_carlo_pi(n) print(f\\"Pi is approximately {result} with {n} trials.\\")"},{"prompt":"This code handles duplications in a given localizable file. To use it, run the script with the path to the localizable file as the first argument, and optionally specify a log file path with the log_path flag. The script will omit duplicate keys and document the omission, then write the updated file back to disk.","completion":"#!/usr/bin/env python from localization_utils import * import argparse def parse_args(): \\"\\"\\" Parses the arguments given in the command line Returns: args: The configured arguments will be attributes of the returned object. \\"\\"\\" parser = argparse.ArgumentParser(description='Omits duplications in a given localizable file.') parser.add_argument(\\"localizable_file\\", help=\\"The file that requires duplication handling.\\") parser.add_argument(\\"--log_path\\", default=\\"\\", help=\\"The log file path\\") return parser.parse_args() def handle_duplications(file_path): \\"\\"\\" Omits the duplications in the strings files. Keys that appear more than once, will be joined to one appearance and the omit will be documented. Args: file_path (str): The path to the strings file. \\"\\"\\" logging.info('Handling duplications for \\"%s\\"', file_path) f = open_strings_file(file_path, \\"r+\\") comment_key_value_tuples = extract_comment_key_value_tuples_from_file(f) file_elements = [] keys_to_objects = {} duplicates_found = [] for comments, key, value in comment_key_value_tuples: if key in keys_to_objects: keys_to_objects[key].add_comments(comments) duplicates_found.append(key) else: loc_obj = LocalizationEntry(comments, key, value) keys_to_objects[key] = loc_obj file_elements.append(loc_obj) # Sort by key file_elements = sorted(file_elements, key=lambda x: x.key) f.seek(0) for element in file_elements: f.write(unicode(element)) f.write(u\\"n\\") f.truncate() f.close() logging.info(\\"Omitted %d duplicates (%s)\\" % (len(duplicates_found), \\",\\".join(duplicates_found))) logging.info('Finished handling duplications for \\"%s\\"', file_path) # The main method for simple command line run. if __name__ == \\"__main__\\": args = parse_args() setup_logging(args) handle_duplications(args.localizable_file)"},{"prompt":"Create a basic chatbot using TensorFlow and Python that can answer some basic questions about a particular company. Company: Apple","completion":"def answer_question(question, company): if company == 'Apple': if question == 'What is Apple's mission statement?': return \\"Apple's mission statement is 'to make the world's best products that enrich people's lives and empower them to do more.\\" elif question == 'How many stores does Apple have?': return 'Apple currently has 511 stores in 25 countries across the globe.'"},{"prompt":"Generate a Python program to reverse the digits of an integer. n = 123","completion":"def reverse_int(n): rev = 0 while n > 0: rem = n % 10 rev = rev * 10 + rem n = n // 10 return rev n = 123 print(reverse_int(n))"},{"prompt":"Write a Python function to convert a list of multiple integers into a single integer. my_list = [1, 2, 3, 4]","completion":"def convert_list_to_integer(my_list): result = 0 multiplier = 1 for i in range(len(my_list)-1, -1, -1): result += my_list[i]*multiplier multiplier *= 10 return result print(convert_list_to_integer(my_list))"},{"prompt":"Convert a given list of numbers into a Python dictionary using a for loop. list_of_nums = [1, 2, 3, 4, 5]","completion":"list_of_nums = [1, 2, 3, 4, 5] dictionary = {} for num in list_of_nums: dictionary[num] = num print(dictionary) # Output {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}"},{"prompt":"Write a Python script that counts the number of characters in a string.","completion":"def count_characters(my_string): count = 0 for char in my_string: count += 1 return count"},{"prompt":"Suggest a way to randomize the order of the following list using Python. array = [1, 2, 3, 4, 5, 6]","completion":"import random array = [1, 2, 3, 4, 5, 6] random.shuffle(array) # shuffle list in-place using a random permutation"},{"prompt":"Develop a Python function to calculate the area of an irregular polygon with three sides.","completion":"def calculate_area(s1, s2, s3): # calculate the perimeter p = s1 + s2 + s3 # calculate the semi-perimeter sp = p / 2 # calculate the area area = math.sqrt(sp * (sp - s1) * (sp - s2) * (sp - s3)) return area"},{"prompt":"Generate a Python class for an address book program. The class should contain methods for adding a new person's name, phone number and email, and editing an existing contact. Not applicable","completion":"class AddressBook: def __init__(self): self.people = {} def add_person(self, name): self.people[name] = { 'phone': None, 'email': None } def edit_person(self, name, phone=None, email=None): person = self.people[name] if phone: person['phone'] = phone if email: person['email'] = email"},{"prompt":"Create an openended RNN generation program that can generate a novel from a given set of sentences. The program should be built in Python using the Keras or Tensorflow library. Snow was steadily falling, blanketing the ground in white. A gentle wind was blowing in from the nearby mountains. The sky was a foggy grey, with no sign of the sun.","completion":"import tensorflow as tf import numpy as np from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences # Input sentences sentences = [ \\"Snow was steadily falling, blanketing the ground in white.\\", \\"A gentle wind was blowing in from the nearby mountains.\\", \\"The sky was a foggy grey, with no sign of the sun.\\" ] # Tokenize the sentences tokenizer = Tokenizer(filters='!\\"#%&()*+.,-/:;<=>?@[]^_\`{|}~tn') tokenizer.fit_on_texts(sentences) # Generate token sequences input_seq = tokenizer.texts_to_sequences(sentences) # Set the maxlen so the generated token sequences are equal in size maxlen = max([len(x) for x in input_seq]) input_seq = pad_sequences(input_seq, maxlen=maxlen, padding='post') # Set the batch size to be as big as the input sequences batch_size = len(input_seq) # Create a tensor input inputs = tf.keras.Input(shape=(maxlen,)) # Create the RNN model x = tf.keras.layers.Embedding( input_dim=len(tokenizer.word_index) + 1, output_dim=128, )(inputs) x = tf.keras.layers.LSTM(128)(x) x = tf.keras.layers.Dense(128, activation='relu')(x) x = tf.keras.layers.Dense(len(tokenizer.word_index) + 1, activation='softmax')(x) # Create the Model model = tf.keras.Model(inputs=inputs, outputs=x) model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy']) # Train the model model.fit(input_seq, epochs=30, batch_size=batch_size) # Generate a novel seed_text = \\"The\\" next_words = 100 for _ in range(next_words): token_list = tokenizer.texts_to_sequences([seed_text])[0] token_list = pad_sequences([token_list], maxlen=maxlen, padding='post') predicted = np.argmax(model.predict(token_list), axis=-1) output_word = \\"\\" for word, index in tokenizer.word_index.items(): if index == predicted: output_word = word break seed_text += \\" \\" + output_word print(seed_text)"},{"prompt":"Generate a random password of 8 characters in Python.","completion":"\\"\\"\\" Generate a random password of 8 characters in Python \\"\\"\\" # Import necessary modules import random import string # Create an empty string password = \\"\\" # Define a function to generate a random password def random_password(length = 8): # A list of characters chars = string.ascii_lowercase + string.digits + string.ascii_uppercase # Iterate over length to fill the password string for i in range(length): # Choose a random character out of the list char = random.choice(chars) # Append the chosen character to the password global password password += char return password # Call the password generator password = random_password() # Print the password print(password)"},{"prompt":"Create a function in Python that takes as input a list of strings and returns a dictionary of all the unique words and their frequency The list of strings is [hello, world, hello, goodbye]","completion":"def get_freq_dict(strings): words = set() freq_dict = {} for string in strings: words.update(string.split(' ')) for word in words: freq_dict[word] = strings.count(word) return freq_dict strings = [\\"hello\\", \\"world\\", \\"hello\\", \\"goodbye\\"] freq_dict = get_freq_dict(strings) print(freq_dict) # prints {'hello': 2, 'world': 1, 'goodbye': 1}"},{"prompt":"Generate a function in Python that takes a string and counts the number of capitalized letters. ViVaViVaViVa","completion":"def countCapitalized(str): count = 0 for i in range(len(str)): if str[i].isupper(): count += 1 return count print(countCapitalized(\\"ViVaViVaViVa\\"))"},{"prompt":"Create a Python script to remove all punctuation from a string. String: A text containing punctuation marks.","completion":"import string # Define the input string inp_str = \\"A text containing punctuation marks.\\" # Remove all punctuation out_str = inp_str.translate(str.maketrans('', '', string.punctuation)) print(out_str) # Output: A text containing punctuation marks"},{"prompt":"Write a Python program to determine if a given number can be expressed as a sum of two or more consecutive integers. 19","completion":"def consecutive_sum(n): if (n < 3): return False # start from 2 and try to find two consecutive numbers # by subtracting from n current_num = 2 # iterate until either we find two consecutive # numbers with the given sum or we reach the middle # of the sum while (current_num * 2 < n): # sum up to n sub_sum = n for i in range(current_num): sub_sum = sub_sum - i # check if the sub_sum is divisible by the current_num if (sub_sum % current_num == 0): # we found our two consecutive numbers return True current_num = current_num + 1 return False result = consecutive_sum(19) print(result)"},{"prompt":"Create a Python program to implement linear search to find a specified item in an array. Array = [1, 2, 3, 4, 5], search_number = 4","completion":"def linear_search(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1 arr = [1, 2, 3, 4, 5] search_number = 4 result = linear_search(arr, search_number) if result == -1: print(\\"Number not found in the array\\") else: print(\\"Number found at index:\\", result)"},{"prompt":"Create a list comprehension in Python to extract the last two elements of a given list.","completion":"last_two_elements = [x[-2:] for x in lst]"},{"prompt":"Generate a correct python statement to add two given numbers. num1 = 10 num2 = 20","completion":"sum = num1 + num2"},{"prompt":"Convert the following function written in Python to Java. def add_two_numbers(a, b): return a + b","completion":"public int add_two_numbers(int a, int b){ return a + b; }"},{"prompt":"Design an API in Python that stores a list of books in a database. The API should be capable of retrieving the list, inserting a new book, deleting a book, and updating a book's data. Not applicable","completion":"import sqlite3 class LibraryAPI: def __init__(self): self.db_conn = sqlite3.connect('library.db') self.db_cursor = self.db_conn.cursor() def get_books(self): book_list = [] self.db_cursor.execute('SELECT * FROM books') books = self.db_cursor.fetchall() for book in books: book_dict = {} book_dict['id'] = book[0] book_dict['title'] = book[1] book_dict['author'] = book[2] book_dict['publisher'] = book[3] book_list.append(book_dict) return book_list def insert_book(self, title, author, publisher): self.db_cursor.execute('INSERT INTO books(title, author, publisher) VALUES(?, ?, ?)', (title, author, publisher)) self.db_conn.commit() def delete_book(self, id): self.db_cursor.execute('DELETE from books WHERE id = ?', (id,)) self.db_conn.commit() def update_book(self, id, title, author, publisher): self.db_cursor.execute('UPDATE books SET title=?, author=?, publisher=? WHERE id = ?', (title, author, publisher, id)) self.db_conn.commit()"},{"prompt":"Write a Python program to convert a given string to all uppercase letters.","completion":"def convert_string_to_uppercase(string): return string.upper()"},{"prompt":"Create a python program that counts the words in a list of sentences. sentences = ['This is a sentence', 'This is another sentence', 'And yet another sentence.']","completion":"def count_words(sentences): count = 0 for sentence in sentences: words = sentence.split() count += len(words) return count"},{"prompt":"Create a CRUD REST API with Python using Flask and SQLAlchemy for a simple contact list model which contains fields for name, phone number, address, email, etc. Not applicable","completion":"from flask import request, jsonify, Flask from flask_sqlalchemy import SQLAlchemy import uuid app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) # Model class Contact(db.Model): id = db.Column(db.String, primary_key=True) name = db.Column(db.String(80)) phone = db.Column(db.String(20)) address = db.Column(db.String(120)) email = db.Column(db.String(120)) def __init__(self, name, phone, address, email): self.id = str(uuid.uuid4()) self.name = name self.phone = phone self.address = address self.email = email # Routes @app.route('/contacts', methods=[\\"GET\\"]) def get_contacts(): contacts = Contact.query.all() return jsonify([contact.serialize() for contact in contacts]) @app.route('/contacts/<string:id>', methods=[\\"GET\\"]) def get_contact(id): contact = Contact.query.get(id) if contact == None: return jsonify({'error': 'contact not found'}), 404 else: return jsonify(contact.serialize()) @app.route('/contacts', methods=[\\"POST\\"]) def create_contact(): data = request.get_json() contact = Contact(**data) db.session.add(contact) db.session.commit() return jsonify(contact.serialize()), 201 @app.route('/contacts/<string:id>', methods=[\\"PUT\\"]) def update_contact(id): contact = Contact.query.get(id) if contact == None: return jsonify({'error': 'contact not found'}), 404 data = request.get_json() contact.name = data.get('name', contact.name) contact.phone = data.get('phone', contact.phone) contact.address = data.get('address', contact.address) contact.email = data.get('email', contact.email) db.session.commit() return jsonify(contact.serialize()) @app.route('/contacts/<string:id>', methods=[\\"DELETE\\"]) def delete_contact(id): contact = Contact.query.get(id) if contact == None: return jsonify({'error': 'contact not found'}), 404 db.session.delete(contact) db.session.commit() return jsonify({'message': 'contact deleted'}) # Helper methods def serialize_contact(contact): return { 'id': contact.id, 'name': contact.name, 'phone': contact.phone, 'address': contact.address, 'email': contact.email } # Driver if __name__ == \\"__main__\\": app.run(debug=True)"},{"prompt":"Write a Python script to generate 10 random numbers between 1 and 15.","completion":"import random for i in range(10): print(random.randint(1, 15))"},{"prompt":"Create a script to build a chatbot in Python.","completion":"\\"\\"\\" Create a chatbot in Python \\"\\"\\" import re # All conversation patterns patterns = { 'hello': 'hi there', 'how are you': 'I am doing great', 'goodbye': 'goodbye for now', 'what can you do': 'I can provide answers to basic questions related to programming' } # Build a chatbot def chatbot(user_input): #parse user input user_input = user_input.lower() #Initialize return response = '' #Find matches in patterns for pattern in patterns: if re.search(pattern, user_input): response = '{}'.format(patterns[pattern]) return response #Test chatbot if __name__ == '__main__': input_str = input('You: ') print('Chatbot: {}'.format(chatbot(input_str)))"},{"prompt":"Develop a chatbot with natural language understanding capabilities using Python and Dialogflow. Not applicable","completion":"import dialogflow # Define the project ID and session ID PROJECT_ID = '<my project id>' SESSION_ID = '<my session id> # Initialize the Dialogflow session session_client = dialogflow.SessionsClient() session = session_client.session_path(PROJECT_ID, SESSION_ID) # Get the input from the user input_message = input('Your message: ') # Define the query query_input = dialogflow.types.QueryInput(text=dialogflow.types.TextInput(text=input_message)) # Send the query to Dialogflow response = session_client.detect_intent(session=session, query_input=query_input) # Get the the response from Dialogflow print('Bot: ' + response.query_result.fulfillment_text)"},{"prompt":"Write a Python code to sort a 5x5 numpy matrix from the lowest to highest values. np.array([[8, 2, 6, 7, 4], [7, 9, 5, 4, 6], [2, 3, 7, 1, 4], [5, 8, 4, 9, 6], [4, 7, 8, 2, 1]])","completion":"import numpy as np # The given array arr = np.array([[8, 2, 6, 7, 4], [7, 9, 5, 4, 6], [2, 3, 7, 1, 4], [5, 8, 4, 9, 6], [4, 7, 8, 2, 1]]) # Sort the array in ascending order sorted_arr = arr.reshape(arr.shape[0] * arr.shape[1]).argsort() # new added line # Get the sorted array sorted_arr = arr.reshape(arr.shape[0] * arr.shape[1])[sorted_arr].reshape(arr.shape[0], arr.shape[1]) print(sorted_arr)"},{"prompt":"Reverse a string in Python without using any builtin string functions","completion":"def reverse_string(input_string): output_string = \\"\\" for char in input_string: output_string = char + output_string return output_string"},{"prompt":"Write a python function to format a string according to provided parameters. Input string: Hello World UpperCase Letters: True LowerCase Letters: False","completion":"def formatString(s, upperCaseLetters, lowerCaseLetters): newStr = \\"\\" if upperCaseLetters: newStr = s.upper() elif lowerCaseLetters: newStr = s.lower() return newStr print(formatString(\\"Hello World\\", True, False)) # Output: \\"HELLO WORLD\\""},{"prompt":"Design a program in Python to produce a list of all prime numbers up to a given number.","completion":"def find_all_primes(n): \\"\\"\\"Finds all prime numbers up to a given number n.\\"\\"\\" primes = [] for num in range(2, n+1): for i in range(2, num): if (num % i) == 0: break else: primes.append(num) return primes"},{"prompt":"Write a Python script that displays a message in the console when a certain web page changes its content. https://example.com/","completion":"# import the required libraries import requests import time # enter the website url url = \\"https://example.com/\\" # make the initial request to get the initial html content initial_content = requests.get(url).text # loop for ever while True: # every 5 seconds, make a new request time.sleep(5) # make the new request current_content = requests.get(url).text # compare the new content with the initial content if current_content != initial_content: # update the initial content initial_content = current_content # print the message print(\\"The content of the page has changed\\")"},{"prompt":"Write a Python script to write another program that performs the given task. Write a program that calculates the factorial of a number.","completion":"def create_factorial_program(): program = 'def factorial(n):n' program += ' if n < 0:n' program += ' return Nonen' program += ' elif n == 0:n' program += ' return 1n' program += ' else:n' program += ' return n * factorial(n - 1)' return program"},{"prompt":"Determine the maximum of two values in Python without using the max function. x = 7 y = 3","completion":"# Determine the maximum of two values in Python # without using the max function x = 7 y = 3 # if x is greater than y, # then x is the max if x > y: max_value = x # if y is greater than x, # then y is the max else: max_value = y print(max_value)"},{"prompt":"Compute with a Python program which elements of an array can be used as the divisor of other elements in the array. [18, 30, 42, 45, 24]","completion":"arr = [18, 30, 42, 45, 24] for i in range(len(arr)): for j in range(i+1, len(arr)): if arr[i] != 0 and arr[j] % arr[i] == 0: print(str(arr[i]) + ' divides ' + str(arr[j]))"},{"prompt":"Create a class in Python that can find the longest increasing subsequence from a given array. Array = [10, 22, 9, 33, 21, 50, 41, 60]","completion":"class LIS(): def LIS(self, arr): n = len(arr) sub = [1 for i in range(n)] for i in range (1 , n): for j in range(0 , i): if arr[i] > arr[j] and sub[i] < sub[j] + 1 : sub[i] = sub[j]+1 maximum = 0 for i in range(n): maximum = max(maximum , sub[i]) return maximum arr = [10, 22, 9, 33, 21, 50, 41, 60] lis = LIS() print (\\"Length of lis is\\", lis.LIS(arr))"},{"prompt":"Create a Python program that takes a string of words and returns the reverse order of words. Hello World","completion":"def reverse_words(words): words_list = words.split(' ') reversed_list = words_list[::-1] reversed_words = ' '.join(reversed_list) return reversed_words input_string = 'Hello World' result = reverse_words(input_string) print(result)"},{"prompt":"Compose a program in Python to convert every word of a given string to uppercase letters. sentence = the quick brown fox jumps over the lazy dog","completion":"def to_uppercase(sentence): words = sentence.split(' ') new_sentence = [] for word in words: new_sentence.append(word.upper()) return ' '.join(new_sentence) if __name__ == '__main__': print(to_uppercase(sentence))"},{"prompt":"Edit the following Python code such that the function produces output in the format <Name> said: '<Message>'. def generate_message(name, message): print(name + ' said: ' + message)","completion":"def generate_message(name, message): print(name + ' said: ' + \\"'\\" + message + \\"'\\")"},{"prompt":"Create a function to remove duplicates from an array with Python. arr = [1,2,2,3,4,4,5]","completion":"def remove_duplicates(arr): result = [] seen = set() for item in arr: if item not in seen: seen.add(item) result.append(item) return result"},{"prompt":"Create a program in Python that takes a string as input and returns the longest word found in the string. The quick brown fox jumps over the lazy dog","completion":"def find_longest_word(string): words = string.split(\\" \\") longest_word = ' ' for cur_word in words: if len(cur_word) > len(longest_word): longest_word = cur_word return longest_word # Driver Code string = \\"The quick brown fox jumps over the lazy dog\\" longest_word = find_longest_word(string) print(f\\"The longest word from given string is: {longest_word}\\")"},{"prompt":"Create a Python program to take a list of names and sort them alphabetically. ['Adam', 'David', 'Mark', 'John', 'Sam']","completion":"def sort_names_alphabetically(names): names.sort() print(names) names = ['Adam', 'David', 'Mark', 'John', 'Sam'] sort_names_alphabetically(names) # Output: # ['Adam', 'David', 'John', 'Mark', 'Sam']"},{"prompt":"Design an algorithm in Python that calculates the sum of all numbers in an array. numbers = [2, 4, 6, 8]","completion":"def sum_array(arr): total = 0 for item in arr: total += item return total print(sum_array([2, 4, 6, 8])) # Output: 20"},{"prompt":"Write a Python program to generate a random 5letter string. Not applicable","completion":"import string import random def random_string(): # using choice() to generate a # random character from a string letters = string.ascii_lowercase output = \\"\\" # generating a string of 5 characters for i in range(5): output += random.choice(letters) return output print(random_string())"},{"prompt":"Create a commandline program in Python which takes in three commandline arguments. The program should add the three arguments and print the result in the console. 1 6 3","completion":"import sys if __name__ == '__main__': args = sys.argv[1:] if len(args) != 3: print('Error: Not enough arguments provided') else: result = int(args[0]) + int(args[1]) + int(args[2]) print('Result: ' + str(result))"},{"prompt":"Set environment variables for the web application, including debug level, user privileges, limits for mapping and correlation, daily download limit, temporary data lifespan, and various URLs. Also set file paths for various directories and define constants for the website name and port address.","completion":"#' # Environment Variables - public # #Debug Level #1 for debug, mod python will reload import each time DEBUG = 1 #USER privilege USERDICT = {'guest':1,'user':2, 'admin':3, 'root':4} #minimum number of informative strains KMININFORMATIVE = 5 #maximum number of traits for interval mapping MULTIPLEMAPPINGLIMIT = 11 #maximum number of traits for correlation MAXCORR = 100 #Daily download limit from one IP DAILYMAXIMUM = 1000 #maximum LRS value MAXLRS = 460.0 #temporary data life span MAXLIFE = 86400 #MINIMUM Database public value PUBLICTHRESH = 0 #NBCI address NCBI_LOCUSID = \\"http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=gene&cmd=Retrieve&dopt=Graphics&list_uids=%s\\" UCSC_REFSEQ = \\"http://genome.cse.ucsc.edu/cgi-bin/hgGene?db=%s&hgg_gene=%s&hgg_chrom=chr%s&hgg_start=%s&hgg_end=%s\\" GENBANK_ID = \\"http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Nucleotide&cmd=search&doptcmdl=DocSum&term=%s\\" OMIM_ID = \\"http://www.ncbi.nlm.nih.gov/omim/%s\\" UNIGEN_ID = \\"http://www.ncbi.nlm.nih.gov/UniGene/clust.cgi?ORG=%s&CID=%s\\"; HOMOLOGENE_ID = \\"http://www.ncbi.nlm.nih.gov/sites/entrez?Db=homologene&Cmd=DetailsSearch&Term=%s\\" PUBMEDLINK_URL = \\"http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?cmd=Retrieve&db=PubMed&list_uids=%s&dopt=Abstract\\" UCSC_POS = \\"http://genome.ucsc.edu/cgi-bin/hgTracks?clade=mammal&org=%s&db=%s&position=chr%s:%s-%s&pix=800&Submit=submit\\" UCSC_BLAT = 'http://genome.ucsc.edu/cgi-bin/hgBlat?org=%s&db=%s&type=0&sort=0&output=0&userSeq=%s' UTHSC_BLAT = 'http://ucscbrowser.genenetwork.org/cgi-bin/hgBlat?org=%s&db=%s&type=0&sort=0&output=0&userSeq=%s' UCSC_GENOME = \\"http://genome.ucsc.edu/cgi-bin/hgTracks?db=%s&position=chr%s:%d-%d&hgt.customText=http://web2qtl.utmem.edu:88/snp/chr%s\\" ENSEMBLE_BLAT = 'http://www.ensembl.org/Mus_musculus/featureview?type=AffyProbe&id=%s' DBSNP = 'http://www.ncbi.nlm.nih.gov/SNP/snp_ref.cgi?type=rs&rs=%s' UCSC_RUDI_TRACK_URL = \\" http://genome.cse.ucsc.edu/cgi-bin/hgTracks?org=%s&db=%s&hgt.customText=http://gbic.biol.rug.nl/~ralberts/tracks/%s/%s\\" GENOMEBROWSER_URL=\\"http://ucscbrowser.genenetwork.org/cgi-bin/hgTracks?clade=mammal&org=Mouse&db=mm9&position=%s&hgt.suggest=&pix=800&Submit=submit\\" ENSEMBLETRANSCRIPT_URL=\\"http://useast.ensembl.org/Mus_musculus/Lucene/Details?species=Mus_musculus;idx=Transcript;end=1;q=%s\\" GNROOT = \\"/home/zas1024/gene/\\" # Will remove this and dependent items later SECUREDIR = GNROOT + 'secure/' COMMON_LIB = GNROOT + 'support/admin' HTMLPATH = GNROOT + 'genotype_files/' PYLMM_PATH = '/home/zas1024/plink_gemma/' SNP_PATH = '/home/zas1024/snps/' IMGDIR = GNROOT + '/wqflask/wqflask/images/' IMAGESPATH = HTMLPATH + 'images/' UPLOADPATH = IMAGESPATH + 'upload/' TMPDIR = '/home/zas1024/tmp/' # Will remove this and dependent items later GENODIR = HTMLPATH + 'genotypes/' NEWGENODIR = HTMLPATH + 'new_genotypes/' GENO_ARCHIVE_DIR = GENODIR + 'archive/' TEXTDIR = HTMLPATH + 'ProbeSetFreeze_DataMatrix/' CMDLINEDIR = HTMLPATH + 'webqtl/cmdLine/' ChangableHtmlPath = GNROOT + 'web/' SITENAME = 'GN' PORTADDR = \\"http://50.16.251.170\\" BASEHREF = '<base href=\\"http://50.16.251.170/\\">' INFOPAGEHREF = '/dbdoc/%s.html' GLOSSARYFILE = \\"/glossary.html\\" CGIDIR = '/webqtl/' #XZ: The variable name 'CGIDIR' should be changed to 'PYTHONDIR' SCRIPTFILE = 'main.py' REFRESHSTR = '<meta http-equiv=\\"refresh\\" content=\\"5;url=%s' + SCRIPTFILE +'?sid=%s\\">' REFRESHDIR = '%s' + SCRIPTFILE +'?sid=%s'"},{"prompt":"Design a program in Python to display a seating arrangement in a theater. The program should take as input the number of rows and number of seats in each row. 4, 10","completion":"def printSeatingPlan(rows, seats): print \\"Seating Plan\\" print \\"------------\\" for row in range(1, rows+1): line = \\"\\" print(\\"Row \\"+ str(row) +\\" :\\",end=\\" \\") for seat in range(1, seats+1): if seat < 10: line += str(row) + \\"0\\" + str(seat) + \\" \\" else: line += str(row) + \\"\\" + str(seat) + \\" \\" print(line) #Calling Function printSeatingPlan(4, 10)"},{"prompt":"Produce a single Python statement that multiplies the values of the variables x, y, and z, and stores the result in the variable result. x = 5, y = 10, z = 20","completion":"result = x * y * z"},{"prompt":"Optimize the following Python function that returns the sum of all the elements in a given list.","completion":"def sum_list(numbers): total = 0 for number in numbers: total += number return total"},{"prompt":"Create a web scraper in Python to crawl a website and collect data about a particular topic. The URL of the website to be crawled.","completion":"import requests import bs4 web_url = '<input URL>' # Insert URL here def scrape(url): response = requests.get(url) soup = bs4.BeautifulSoup(response.text, 'lxml') output = [] # Scrape the web page to get the required data ... return output if __name__ == '__main__': print(scrape(web_url))"},{"prompt":"Come up with an optimal algorithm in Python to sort an array of integers. [3, 8, 10, 1, 7, 4]","completion":"def sort_array(arr): # Bubble Sort Algorithm n = len(arr) for i in range(n-1): for j in range(n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr # Example Usage input_array = [3,8,10,1,7,4] print(sort_array(input_array)) # Output: [1, 3, 4, 7, 8, 10]"},{"prompt":"Create a program in Python that takes two strings as input from the user and returns True if a substring is found within the first string or False otherwise. Not applicable","completion":"first_string = input('Enter the main string: ') second_string = input('Enter the substring: ') if second_string in first_string: print(True) else: print(False)"},{"prompt":"Create a Python script to generate an animated GIF. The GIF should display 5 frames, with an increasing value of a ‘tick’ numbers in each frame.","completion":"import imageio # Create a list of images images = [] for i in range(5): # Create a blank image image = Image.new('RGB', (400, 400)) draw = ImageDraw.Draw(image) draw.text((200, 200), str(i)) # Add the image20 image to the list images.append(image) # Generate the gif imageio.mimsave('animated.gif', images)"},{"prompt":"Write a Python program to detect the largest word in a sentence. The program should take a string as input and return the largest word found in it. This sentence has seven words.","completion":"def find_largest_word(sentence): splits = sentence.split(' ') largest_word = \\"\\" for word in splits: if len(word) > len(largest_word): largest_word = word return largest_word print(find_largest_word(\\"This sentence has seven words.\\")) # Output: \\"sentence\\""},{"prompt":"Construct an algorithm to solve the Towers of Hanoi problem using three stacks in Python.","completion":"def hanoi(n,src,dst,tmp): if n > 0: # Move n - 1 disks from source to temp hanoi(n - 1, src, tmp, dst) # Move nth disk from source to destination dst.append(src.pop()) # Move n - 1 disks from temp to destination hanoi(n - 1, tmp, dst, src)"},{"prompt":"Create a Python program to remove repeating numbers from an array. [2, 3, 3, 4, 5, 4]","completion":"def removeRepeats(arr): result = [] seen = set() for num in arr: if num not in seen: result.append(num) seen.add(num) return result res = removeRepeats([2, 3, 3, 4, 5, 4]) print(res)"},{"prompt":"Create an API endpoint with Python and Flask that allows users to add posts to a blog. Not applicable","completion":"from flask import Flask, request, jsonify app = Flask(__name__) # Create a post @app.route('/post', methods=['POST']) def create_post(): data = request.get_json() post = { 'title': data['title'], 'content': data['content'], 'author': data['author'], } # store post in database return jsonify(post) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Using Python, write a program that takes a list of strings as input and returns a dictionary where the keys are the strings and the values are the lengths of the strings. ['apple', 'banana', 'orange']","completion":"def length_dict(strings): length_dict = {} for string in strings: length_dict[string] = len(string) return length_dict print(length_dict(['apple', 'banana', 'orange'])) # {'apple': 5, 'banana': 6, 'orange': 6}"},{"prompt":"Given a Python dictionary, convert it into a list of tuples. test_dict = {‘A’: 1, ‘B’: 2, ‘C’: 3}","completion":"list(test_dict.items())"},{"prompt":"Write a conditional statement in Python that checks if two lists have the same items. list1 = [9,8,7] list2 = [7,8,9]","completion":"list1 = [9,8,7] list2 = [7,8,9] if list1 == list2: print(\\"The lists have the same items.\\") else: print(\\"The lists do not have the same items.\\")"},{"prompt":"Write a Python program to generate an array of least common multiple of all the numbers from 1 to 10.","completion":"import collections def least_common_multiples(num): lcm_arr = [] for i in range(1, num + 1): lcm_arr.append(i) lcm_result = collections.Counter(lcm_arr).most_common()[-1][0] return lcm_result"},{"prompt":"Create a text parser in Python that converts a given string into an integer. 47","completion":"def parse_int(string): return int(string) result = parse_int(\\"47\\") print(result) # Result: 47"},{"prompt":"Write a Python program to find the longest substring in a given string and print the substring and its length. string = This is the longest substring of this given string","completion":"# Find the longest substring in a given string def longest_substring(string): substring = \\"\\" longest = 0 start = 0 # Iterate through the string and find the longest substring for i in range(len(string)): char = string[i] if char not in substring: substring += char else: if len(substring) > longest: longest = len(substring) longest_substring = substring substring = string[start:i] start = i substring += char # Check for the last substring if len(substring) > longest: longest = len(substring) longest_substring = substring print (\\"The longest substring is {} and its length is {}.\\".format(longest_substring, longest)) # Driver code string = \\"This is the longest substring of this given string\\" longest_substring(string)"},{"prompt":"Create an algorithm in Python that prints out all permutations of a given set of numbers.","completion":"def permutation(nums): if len(nums) == 1: return [nums] perm_list = [] for i in range(len(nums)): m = nums[i] remLst = nums[:i] + nums[i+1:] for p in permutation(remLst): perm_list.append([m] + p) return perm_list"},{"prompt":"The code provided is a Python script that can be used to interact with the APNOS Policy Optimizer integration. To use the script, you need to create an instance of the \`Client\` class and pass in the required parameters. Once you have an instance of the \`Client\` class, you can call the various methods to interact with the APNOS Policy Optimizer integration. To use the script, you need to perform the following steps: 1. Import the \`hash","completion":"import hashlib from CommonServerPython import * class Client: \\"\\"\\" Client to use in the APN-OS Policy Optimizer integration. \\"\\"\\" def __init__(self, url: str, username: str, password: str, vsys: str, device_group: str, verify: bool, tid: int): # The TID is used to track individual commands send to the firewall/Panorama during a PHP session, and # is also used to generate the security token (Data String) that is used to validate each command. # Setting tid as a global variable with an arbitrary value of 50 self.session_metadata: Dict[str, Any] = {'panorama': url, 'base_url': url, 'username': username, 'password': password, 'tid': tid} if device_group and vsys: raise DemistoException( 'Cannot configure both vsys and Device group. Set vsys for firewall, set Device group for Panorama.') if not device_group and not vsys: raise DemistoException('Set vsys for firewall or Device group for Panorama.') self.machine = vsys if vsys else device_group self.verify = verify handle_proxy() # Use Session() in order to maintain cookies for persisting the login PHP session cookie self.session = requests.Session() def session_post(self, url: str, json_cmd: dict) -> dict: response = self.session.post(url=url, json=json_cmd, verify=self.verify) json_response = json.loads(response.text) if 'type' in json_response and json_response['type'] == 'exception': if 'message' in json_response: raise Exception(f'Operation to PAN-OS failed. with: {str(json_response[\\"message\\"])}') raise Exception(f'Operation to PAN-OS failed. with: {str(json_response)}') return json_response def login(self) -> str: # This is the data sent to Panorama from the Login screen to complete the login and get a PHPSESSID cookie login_data = { 'prot': 'https:', 'server': self.session_metadata['panorama'], 'authType': 'init', 'challengeCookie': '', 'user': self.session_metadata['username'], 'passwd': self.session_metadata['password'], 'challengePwd': '', 'ok': 'Log In' } try: # Use a POST command to login to Panorama and create an initial session self.session.post(url=f'{self.session_metadata[\\"base_url\\"]}/php/login.php?', data=login_data, verify=self.verify) # Use a GET command to the base URL to get the ServerToken which looks like this: # window.Pan.st.st.st539091 = \\"8PR8ML4A67PUMD3NU00L3G67M4958B996F61Q97T\\" response = self.session.post(url=f'{self.session_metadata[\\"base_url\\"]}/', verify=self.verify) except Exception as err: raise Exception(f'Failed to login. Please double-check the credentials and the server URL. {str(err)}') # Use RegEx to parse the ServerToken string from the JavaScript variable match = re.search(r'(?:window.Pan.st.st.st[0-9]+s=s\\")(w+)(?:\\")', response.text) # The JavaScript calls the ServerToken a \\"cookie\\" so we will use that variable name # The \\"data\\" field is the MD5 calculation of \\"cookie\\" + \\"TID\\" if not match: raise Exception('Failed to login. Please double-check the credentials and the server URL.') return match.group(1) def logout(self): self.session.post(url=f'{self.session_metadata[\\"base_url\\"]}/php/logout.php?', verify=False) def token_generator(self) -> str: \\"\\"\\" The PHP Security Token (Data String) is generated with the TID (counter) and a special session \\"cookie\\" :return: hash token \\"\\"\\" data_code = f'{self.session_metadata[\\"cookie\\"]}{str(self.session_metadata[\\"tid\\"])}' data_hash = hashlib.md5(data_code.encode()) # Use the hashlib library function to calculate the MD5 data_string = data_hash.hexdigest() # Convert the hash to a proper hex string return data_string def get_policy_optimizer_statistics(self) -> dict: self.session_metadata['tid'] += 1 # Increment TID json_cmd = { \\"action\\": \\"PanDirect\\", \\"method\\": \\"run\\", \\"data\\": [ self.token_generator(), \\"PoliciesDirect.getRuleCountInRuleUsage\\", [{\\"type\\": \\"security\\", \\"position\\": \\"main\\", \\"vsysName\\": self.machine}] ], \\"type\\": \\"rpc\\", \\"tid\\": self.session_metadata['tid'] } return self.session_post( url=f'{self.session_metadata[\\"base_url\\"]}/php/utils/router.php/PoliciesDirect.getRuleCountInRuleUsage', json_cmd=json_cmd) def policy_optimizer_no_apps(self) -> dict: self.session_metadata['tid'] += 1 # Increment TID json_cmd = { \\"action\\": \\"PanDirect\\", \\"method\\": \\"run\\", \\"data\\": [ self.token_generator(), \\"PoliciesDirect.getPoliciesByUsage\\", [ { \\"type\\": \\"security\\", \\"position\\": \\"main\\", \\"vsysName\\": self.machine, \\"isCmsSelected\\": False, \\"isMultiVsys\\": False, \\"showGrouped\\": False, \\"usageAttributes\\": { \\"timeframeTag\\": \\"30\\", \\"application/member\\": \\"any\\", \\"apps-seen-count\\": \\"geq '1'\\", \\"action\\": \\"allow\\" }, \\"pageContext\\": \\"app_usage\\", \\"field\\": \\".bytes\\", \\"direction\\": \\"DESC\\" } ] ], \\"type\\": \\"rpc\\", \\"tid\\": self.session_metadata['tid']} return self.session_post( url=f'{self.session_metadata[\\"base_url\\"]}/php/utils/router.php/PoliciesDirect.getPoliciesByUsage', json_cmd=json_cmd) def policy_optimizer_get_unused_apps(self) -> dict: self.session_metadata['tid'] += 1 # Increment TID json_cmd = { \\"action\\": \\"PanDirect\\", \\"method\\": \\"run\\", \\"data\\": [ self.token_generator(), \\"PoliciesDirect.getPoliciesByUsage\\", [ { \\"type\\": \\"security\\", \\"position\\": \\"main\\", \\"vsysName\\": self.machine, \\"serialNumber\\": \\"\\", \\"isCmsSelected\\": False, \\"isMultiVsys\\": False, \\"showGrouped\\": False, \\"usageAttributes\\": { \\"timeframeTag\\": \\"30\\", \\"application/member\\": \\"unused\\", \\"action\\": \\"allow\\" }, \\"pageContext\\": \\"app_usage\\", \\"field\\": \\".bytes\\", \\"direction\\": \\"DESC\\" } ] ], \\"type\\": \\"rpc\\", \\"tid\\": self.session_metadata['tid']} return self.session_post( url=f'{self.session_metadata[\\"base_url\\"]}/php/utils/router.php/PoliciesDirect.getPoliciesByUsage', json_cmd=json_cmd) def policy_optimizer_get_rules(self, timeframe: str, usage: str, exclude: bool) -> dict: self.session_metadata['tid'] += 1 # Increment TID json_cmd = { \\"action\\": \\"PanDirect\\", \\"method\\": \\"run\\", \\"data\\": [ self.token_generator(), \\"PoliciesDirect.getPoliciesByUsage\\", [ { \\"type\\": \\"security\\", \\"position\\": \\"main\\", \\"vsysName\\": self.machine, \\"isCmsSelected\\": False, \\"isMultiVsys\\": False, \\"showGrouped\\": False, \\"usageAttributes\\": { \\"timeframe\\": timeframe, \\"usage\\": usage, \\"exclude\\": exclude, \\"exclude-reset-text\\": \\"90\\" }, \\"pageContext\\": \\"rule_usage\\" } ] ], \\"type\\": \\"rpc\\", \\"tid\\": self.session_metadata['tid']} return self.session_post( url=f'{self.session_metadata[\\"base_url\\"]}/php/utils/router.php/PoliciesDirect.getPoliciesByUsage', json_cmd=json_cmd) def policy_optimizer_app_and_usage(self, rule_uuid: str) -> dict: self.session_metadata['tid'] += 1 # Increment TID json_cmd = {\\"action\\": \\"PanDirect\\", \\"method\\": \\"run\\", \\"data\\": [ self.token_generator(), \\"PoliciesDirect.getAppDetails\\", [ { \\"type\\": \\"security\\", \\"vsysName\\": self.machine, \\"position\\": \\"main\\", \\"ruleUuidList\\": [rule_uuid], \\"summary\\": \\"no\\", \\"resultfields\\": \\"<member>apps-seen</member>\\" \\"<member>last-app-seen-since-count\\" \\"</member><member>days-no-new-app-count</member>\\", \\"appsSeenTimeframe\\": \\"any\\", \\"trafficTimeframe\\": 30 } ] ], \\"type\\": \\"rpc\\", \\"tid\\": self.session_metadata['tid']} return self.session_post( url=f'{self.session_metadata[\\"base_url\\"]}/php/utils/router.php/PoliciesDirect.getAppDetails', json_cmd=json_cmd) def policy_optimizer_get_dag(self, dag: str) -> dict: self.session_metadata['tid'] += 1 # Increment TID json_cmd = { \\"action\\": \\"PanDirect\\", \\"method\\": \\"execute\\", \\"data\\": [ self.token_generator(), \\"AddressGroup.showDynamicAddressGroup\\", { \\"id\\": dag, \\"vsysName\\": self.machine } ], \\"type\\": \\"rpc\\", \\"tid\\": self.session_metadata['tid']} return self.session_post( url=f'{self.session_metadata[\\"base_url\\"]}/php/utils/router.php/AddressGroup.showDynamicAddressGroup', json_cmd=json_cmd) def get_policy_optimizer_statistics_command(client: Client) -> CommandResults: \\"\\"\\" Gets the Policy Optimizer Statistics as seen from the User Interface \\"\\"\\" outputs_stats = {} raw_response = client.get_policy_optimizer_statistics() stats = raw_response['result'] if '@status' in stats and stats['@status'] == 'error': raise Exception(f'Operation Failed with: {str(stats)}') stats = stats['result'] # we need to spin the keys and values and put them into dict so they'll look better in the context for i in stats['entry']: outputs_stats[i['@name']] = i['text'] return CommandResults( outputs_prefix='PanOS.PolicyOptimizer.Stats', outputs=outputs_stats, readable_output=tableToMarkdown(name='Policy Optimizer Statistics:', t=stats['entry'], removeNull=True), raw_response=raw_response ) def policy_optimizer_no_apps_command(client: Client) -> CommandResults: \\"\\"\\" Gets the Policy Optimizer Statistics as seen from the User Interface \\"\\"\\" raw_response = client.policy_optimizer_no_apps() stats = raw_response['result'] if '@status' in stats and stats['@status'] == 'error': raise Exception(f'Operation Failed with: {str(stats)}') stats = stats['result'] if '@count' in stats and stats['@count'] == '0': return CommandResults(readable_output='No Rules without apps were found.', raw_response=raw_response) rules_no_apps = stats['entry'] if not isinstance(rules_no_apps, list): rules_no_apps = rules_no_apps[0] headers = ['@name', '@uuid', 'action', 'description', 'source', 'destination'] return CommandResults( outputs_prefix='PanOS.PolicyOptimizer.NoApps', outputs_key_field='@uuid', outputs=rules_no_apps, readable_output=tableToMarkdown(name='Policy Optimizer No App Specified:', t=rules_no_apps, headers=headers, removeNull=True), raw_response=raw_response ) def policy_optimizer_get_unused_apps_command(client: Client) -> CommandResults: \\"\\"\\" Gets the Policy Optimizer Statistics as seen from the User Interface \\"\\"\\" raw_response = client.policy_optimizer_get_unused_apps() stats = raw_response['result'] if '@status' in stats and stats['@status'] == 'error': raise Exception(f'Operation Failed with: {str(stats)}') stats = stats['result'] if '@count' in stats and stats['@count'] == '0': return CommandResults(readable_output='No Rules with unused apps were found.', raw_response=raw_response) return CommandResults( outputs_prefix='PanOS.PolicyOptimizer.UnusedApps', outputs_key_field='Stats', outputs=stats, readable_output=tableToMarkdown(name='Policy Optimizer Unused Apps:', t=stats['entry'], removeNull=True), raw_response=raw_response ) def policy_optimizer_get_rules_command(client: Client, args: dict) -> CommandResults: \\"\\"\\" Gets the unused rules Statistics as seen from the User Interface \\"\\"\\" timeframe = str(args.get('timeframe')) usage = str(args.get('usage')) exclude = argToBoolean(args.get('exclude')) raw_response = client.policy_optimizer_get_rules(timeframe, usage, exclude) stats = raw_response['result'] if '@status' in stats and stats['@status'] == 'error': raise Exception(f'Operation Failed with: {str(stats)}') stats = stats['result'] if '@count' in stats and stats['@count'] == '0': return CommandResults(readable_output=f'No {usage} rules where found.', raw_response=raw_response) rules = stats['entry'] if not isinstance(rules, list): rules = rules[0] headers = ['@name', '@uuid', 'action', 'description', 'source', 'destination'] return CommandResults( outputs_prefix=f'PanOS.PolicyOptimizer.{usage}Rules', outputs_key_field='@uuid', outputs=rules, readable_output=tableToMarkdown(name=f'PolicyOptimizer {usage}Rules:', t=rules, headers=headers, removeNull=True), raw_response=raw_response ) def policy_optimizer_app_and_usage_command(client: Client, args: dict) -> CommandResults: \\"\\"\\" Gets the Policy Optimizer Statistics as seen from the User Interface \\"\\"\\" rule_uuid = str(args.get('rule_uuid')) raw_response = client.policy_optimizer_app_and_usage(rule_uuid) stats = raw_response['result'] if '@status' in stats and stats['@status'] == 'error': raise Exception(f'Operation Failed with: {str(stats)}') stats = stats['result'] if '@count' in stats and stats['@count'] == '0': return CommandResults(readable_output=f'Rule with UUID:{rule_uuid} does not use apps.', raw_response=raw_response) rule_stats = stats['rules']['entry'][0] return CommandResults( outputs_prefix='PanOS.PolicyOptimizer.AppsAndUsage', outputs_key_field='@uuid', outputs=rule_stats, readable_output=tableToMarkdown(name='Policy Optimizer Apps and Usage:', t=rule_stats, removeNull=True), raw_response=raw_response ) def policy_optimizer_get_dag_command(client: Client, args: dict) -> CommandResults: \\"\\"\\" Gets the DAG \\"\\"\\" dag = str(args.get('dag')) raw_response = client.policy_optimizer_get_dag(dag) result = raw_response['result'] if '@status' in result and result['@status'] == 'error': raise Exception(f'Operation Failed with: {str(result)}') try: result = result['result']['dyn-addr-grp']['entry'][0]['member-list']['entry'] except KeyError: raise Exception(f'Dynamic Address Group: {dag} was not found.') return CommandResults( outputs_prefix='PanOS.PolicyOptimizer.DAG', outputs_key_field='Stats', outputs=result, readable_output=tableToMarkdown(name='Policy Optimizer Dynamic Address Group:', t=result, removeNull=True), raw_response=raw_response ) def main(): command = demisto.command() params = demisto.params() args = demisto.args() demisto.debug(f'Command being called is: {command}') client: Client = None # type: ignore try: client = Client(url=params.get('server_url'), username=params['credentials']['identifier'], password=params['credentials']['password'], vsys=params.get('vsys'), device_group=params.get('device_group'), verify=not params.get('insecure'), tid=50) client.session_metadata['cookie'] = client.login() # Login to PAN-OS and return the GUI cookie value if command == 'test-module': return_results('ok') # if login was successful, instance configuration is ok. elif command == 'pan-os-po-get-stats': return_results(get_policy_optimizer_statistics_command(client)) elif command == 'pan-os-po-no-apps': return_results(policy_optimizer_no_apps_command(client)) elif command == 'pan-os-po-unused-apps': return_results(policy_optimizer_get_unused_apps_command(client)) elif command == 'pan-os-po-get-rules': return_results(policy_optimizer_get_rules_command(client, args)) elif command == 'pan-os-po-app-and-usage': return_results(policy_optimizer_app_and_usage_command(client, args)) elif command == 'pan-os-get-dag': return_results(policy_optimizer_get_dag_command(client, args)) else: raise NotImplementedError(f'Command {command} was not implemented.') except Exception as err: return_error(f'{str(err)}.n Trace:{traceback.format_exc()}') finally: try: client.logout() # Logout of PAN-OS except Exception as err: return_error(f'{str(err)}.n Trace:{traceback.format_exc()}') if __name__ in (\\"__builtin__\\", \\"builtins\\", '__main__'): main()"},{"prompt":"Write a Python script to compare two lists of numbers and return their common elements. list1 = [1, 2, 3, 4, 5] list2 = [3, 4, 5, 6, 7]","completion":"def common_elements(list1, list2): # Create lists to store the results common_elements = [] # Loop through each list for element1 in list1: for element2 in list2: # Check if the elements match if element1 == element2: common_elements.append(element1) # Return the list of common elements return common_elements list1 = [1,2,3,4,5] list2 = [3,4,5,6,7] # Call the common_elements function print(common_elements(list1, list2))"},{"prompt":"Sort this list of numbers in ascending order using Python. [3, 1, 6, 9, 10, 5]","completion":"list = [3, 1, 6, 9, 10, 5] list.sort() print(list) # prints [1, 3, 5, 6, 9, 10]"},{"prompt":"Write a python script that reads a sentence from console and returns the number of vowels in the sentence. Sentence: Hi! My name is Joh","completion":"\\"\\"\\" Read a sentence from console and return the number of vowels \\"\\"\\" def count_vowels(sentence): vowels = set('aeiouAEIOU') count = 0 for letter in sentence: if letter in vowels: count += 1 return count if __name__ == \\"__main__\\": sentence = input('Sentence: ') print(count_vowels(sentence)) # => 5"},{"prompt":"dentify the type of object a Python expression will evaluate to. expression = 8 + 5","completion":"Integer."},{"prompt":"Construct a Python program to perform sentiment analysis on an input string and output the sentiment score. Example sentence: I had a great day yesterday","completion":"import nltk sentence = \\"I had a great day yesterday\\" words = nltk.word_tokenize(sentence) text = nltk.Text(words) polarity_score = text.polarity_scores() print(polarity_score)"},{"prompt":"Develop a classification model in Python to predict the color of a flower when existing data is used.","completion":"from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import accuracy_score # Load the dataset iris = load_iris() # Split data into training and test sets X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.2, random_state=0) # Fit the decision tree model to the training data clf = DecisionTreeClassifier(random_state=0).fit(X_train, y_train) # Make predictions on the test data y_pred = clf.predict(X_test) # Calculate accuracy acc = accuracy_score(y_test, y_pred) print(acc)"},{"prompt":"Construct a Regex expression in Python for matching two words in a sentence.","completion":"import re pattern = re.compile(r\\"b(word1)s(word2)b\\")"},{"prompt":"Write a Python program to implement a basic stack data structure with push, pop, and peek operations. Not applicable","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] my_stack = Stack() my_stack.push(1) my_stack.push(2) my_stack.push(3) print(my_stack.peek()) # 3 print(my_stack.pop()) # 3 print(my_stack.pop()) # 2"},{"prompt":"Using the list and additional libraries, write a python program to calculate the sum of all elements in the list. list = [2, 3, 5, 8, 9]","completion":"#Importing the libraries import numpy as np #Defining the list list = [2, 3, 5, 8, 9] #Calculating the sum sum = np.sum(list) #Printing the result print(sum)"},{"prompt":"Write a python program to classify emails into categories (Junk/Not Junk). Email Content: Subject: Take advantage of this limited time offer! You can get 50% off on all products. Hurry up and order now!","completion":"import re # Define categories categories = [\\"Junk\\", \\"Not Junk\\"] # Define regex for junk email junk_pattern = re.compile(r\\"(limited time|offer|order now)\\", re.IGNORECASE) # Check if email content matches the pattern match = junk_pattern.search(email_content) # Classify email if match: print(\\"Email is: Junk\\") else: print(\\"Email is: Not Junk\\")"},{"prompt":"Generate a Python code to find the power of a number. base = 2 exponent = 4","completion":"# Calculate power of a number def power(base, exponent): # Initialize result result = 1 # Multiply result with base # until exponent becomes 0 while exponent != 0: result *= base exponent -= 1 # Return result return result # Print the power print(power(base, exponent))"},{"prompt":"Optimize a Python code snippet to make it run faster. import random def generate_numbers(n): numbers = [] for _ in range(n): numbers.append(random.randint(1, 1000)) return number","completion":"import random def generate_numbers(n): numbers = [random.randint(1, 1000) for _ in range(n)] return numbers"},{"prompt":"Write a code in Python to display the mean and standard deviation of a list of numbers [3,3,3,3,3]","completion":"#importing the statistics module import statistics # declaring a list MyList = [3,3,3,3,3] # using mean() to calculate mean of list elements Mean = statistics.mean(MyList) # using stdev() to calculate standard deviation of list elements Standard_Deviation = statistics.stdev(MyList) # printing mean print(\\"Mean of List Elements is :\\", Mean) # printing standard deviation print(\\"Standard Deviation of List Elements is :\\", Standard_Deviation)"},{"prompt":"Develop a Python program that parses a given HTML page. <html> <head> <title>Example web page</title> </head> <body> <h1>Hello world</h1> <div> <p>This is an example web page</p> </div> </body> </html>","completion":"from bs4 import BeautifulSoup html_page = ''' <html> <head> <title>Example web page</title> </head> <body> <h1>Hello world</h1> <div> <p>This is an example web page</p> </div> </body> </html> ''' soup = BeautifulSoup(html_page, 'html.parser') print(soup.title.string) for tag in soup.find_all('div'): print(tag.p.string)"},{"prompt":"Optimize a given Python function to make it more efficient. def my_function(n): sum = 1 for i in range(n): for j in range(n): sum *= j return sum","completion":"def my_function(n): sum = 1 for j in range(1, n+1): sum *= j return sum"},{"prompt":"Create a Python script which receives an array of integers and returns an array which contains only the prime numbers from the input array. [2, 3, 4, 5, 6, 7, 8, 9]","completion":"def get_primes(arr): prime_numbers = [] for i in arr: if is_prime(i): prime_numbers.append(i) return prime_numbers def is_prime(num): if num == 1: return False elif num == 2: return True else: for i in range(2,num): if num % i == 0: return False return True arr = [2, 3, 4, 5, 6, 7, 8, 9] print(get_primes(arr))"},{"prompt":"Convert the following Python code to the equivalent R code. for i in range (0, 5): print (i)","completion":"for(i in 0:5) { print(i) }"},{"prompt":"Develop an optimization problem in Python using the SciPy library to minimize the cost of a linear programming problem. Objective function c = [6, 4], Constraints A_ub = [[1,1],[1,3]], b_ub = [4, 6]","completion":"from scipy.optimize import minimize # Define objective function def f(x): return 6*x[0] + 4*x[1] # Define constraints A = [[1,1],[-1,3]] b = [4, 6] # Create optimization problem opt = minimize(f, [0, 0], constraints={'type': 'ineq', 'fun': lambda x: b - np.dot(A, x)}) # Print the minimized cost print(opt.fun)"},{"prompt":"Generate a class in Python to represent a Person with the following attributes: name, age, gender.","completion":"class Person: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def get_name(self): return self.name def get_age(self): return self.age def get_gender(self): return self.gender"},{"prompt":"Create a Python program to generate a report of top 10 customers who have spent the most in a store. A csv file containing the customer id and the amount spe","completion":"import csv # Read the csv file with open('customer_data.csv', 'r') as f: reader = csv.DictReader(f) # Create a dictionary to store the customer data customer_data = {} # Iterate over the rows for row in reader: # Get the customer id and amount spent customer_id = row['customer_id'] amount_spent = float(row['amount_spent']) # Add the customer data to the dictionary if customer_id in customer_data: customer_data[customer_id] += amount_spent else: customer_data[customer_id] = amount_spent # Sort the customers by amount spent customers_sorted = sorted( customer_data, key=lambda customer_id: customer_data[customer_id], reverse=True) # Print out the top 10 customers for customer_id in customers_sorted[:10]: print(f\\"Customer {customer_id} spent {customer_data[customer_id]}\\")"},{"prompt":"Create a Python program to search through a provided list of words and replace any occurrences of a particular letter with a hyphen. words = [apple, banana, grape, pear] letter = a","completion":"def replaceLetter(words, letter): new_words = [] for word in words: new_word = word.replace(letter, \\"-\\") new_words.append(new_word) return new_words words = [\\"apple\\", \\"banana\\", \\"grape\\", \\"pear\\"] letter = \\"a\\" result = replaceLetter(words, letter) print(result) #['-pple', 'b-n-n-', 'gr-pe', 'pe-r']"},{"prompt":"Write a Python script for splitting a given string into a list of words. my_sentence = This is my sentence","completion":"sentence_words = my_sentence.split(\\" \\") print(sentence_words)"},{"prompt":"Construct a sorting algorithm in Python to sort a given list of numbers in nondecreasing order. [10, 5, 9, 1, 40]","completion":"def sort_list(nums): \\"\\"\\" This function uses a simple selection sort algorithm to sort the given list of numbers \\"\\"\\" # Iterate through the unsorted list for i in range(len(nums)): # Find the minimum element min_idx = i for j in range(i+1, len(nums)): if nums[min_idx] > nums[j]: min_idx = j # Swap the elements nums[i], nums[min_idx] = nums[min_idx], nums[i]"},{"prompt":"Write a function in Python to generate an N by N matrix, filled with random integers between 0 and 9 N = 5","completion":"import random def generate_matrix(N): matrix = [] for i in range(N): row = [] for j in range(N): row.append(random.randint(0, 9)) matrix.append(row) return matrix"},{"prompt":"Design a small container application in Python which asks to enter numbers and find the sum.","completion":"def container_application(): print(\\"Welcome to the container application!\\") print(\\"Enter the numbers separated by a space:\\") nums = input().split() sum = 0 for num in nums: sum += int(num) print(\\"The sum of the numbers is:\\", sum) container_application()"},{"prompt":"Build a Python script that makes automated requests to an online dictionary API and prints out the definition of a given word. word: Ambitious","completion":"import requests import json word = \\"Ambitious\\" url = f\\"https://www.dictionaryapi.com/api/v3/references/collegiate/json/{word}?key=YOUR-API-KEY\\" response = requests.get(url) word_data = json.loads(response.text) if 'shortdef' in word_data[0]: definition = word_data[0]['shortdef'][0] print(f\\"{word}: {definition}\\") else: print(\\"No definition\\")"},{"prompt":"Create a program to convert a text document to an HTML webpage using Python. Text document with contents This is a sample document.","completion":"from bs4 import BeautifulSoup # Read and parse the document with open('sample.txt', 'r') as file: content = file.read() # Create the HTML soup = BeautifulSoup(content, 'html.parser') html_content = soup.prettify() # Write to the file with open('sample.html', 'w') as file: file.write(html_content)"},{"prompt":"Write a function in Python to generate a random letter from the English alphabet.","completion":"import random def generate_random_letter(): letters = 'abcdefghijklmnopqrstuvwxyz' letter = random.choice(letters) return letter"},{"prompt":"Write a function in Python that takes a list and prints out all the elements in the list. list1 = [1, 2, 3, 4, 5]","completion":"def printList(list1): for x in list1: print(x) printList(list1)"},{"prompt":"Modify the Python program to encrypt a given string with a given cipher key. Hello World!","completion":"def encrypt(plaintext, key): ciphertext = \\"\\" for i in range(len(plaintext)): char = plaintext[i] if char.isalpha(): char_code = ord(char) cipher_code = char_code ^ key cipher_char = chr(cipher_code) ciphertext += cipher_char return ciphertext message = \\"Hello World!\\" key = 10 encrypted_message = encrypt(message, key) print(encrypted_message) # ^RPf#_sWr#G"},{"prompt":"Construct a Python function to find the largest and smallest number in a list. [5, 2, 7, 9]","completion":"def find_min_max(nums): max_num, min_num = nums[0], nums[0] for num in nums: if num > max_num: max_num = num if num < min_num: min_num = num return min_num, max_num nums = [5, 2, 7, 9] min_num, max_num = find_min_max(nums) print(\\"Max num:\\",max_num) print(\\"Min num:\\",min_num)"},{"prompt":"Create a MongoDB collection using Python that stores the details of an online store's inventory. The collection must include fields for product name, quantity, and price. Not applicable","completion":"from pymongo import MongoClient client = MongoClient('localhost', 27017) db = client.inventory_db collection = db.inventory inventory = [ { \\"product_name\\": \\"Apple\\", \\"quantity\\": 10, \\"price\\": 3.99 }, { \\"product_name\\": \\"Banana\\", \\"quantity\\": 20, \\"price\\": 2.99 }, { \\"product_name\\": \\"Cucumber\\", \\"quantity\\": 15, \\"price\\": 4.99 } ] collection.insert_many(inventory)"},{"prompt":"Analyze a given python code and debug it. def calculate_sum(numbers : Arrar[int]): sum = 0 for i in numbers: sum = i return sum nums = [3, 7, 10] print(The sum is, calculate_sum(nums))","completion":"def calculate_sum(numbers: Array[int]): sum = 0 for i in numbers: sum += i return sum nums = [3, 7, 10] print(\\"The sum is\\", calculate_sum(nums))"},{"prompt":"Generate a Python program to check if three given numbers are in the range 10 and 20 inclusive or not.","completion":"def is_in_range(num1, num2, num3): # Using not operator , NOT return ((10 <= num1 <= 20) and (10 <= num2 <= 20) and (10 <= num3 <= 20))"},{"prompt":"Create a Python script to evaluate an expression given as a string. Expression string: 2 * (3 + 1)","completion":"# input expression as a string expr = \\"2 * (3 + 1)\\" # Evaluate the expression using eval() result = eval(expr) # print the result print(\\"Result:\\", result)"},{"prompt":"Create a web application using Python and Django that displays a searchable list of all books in a given book catalog. Not applicable","completion":"from django.db import models class Book(models.Model): title = models.CharField(max_length=255) author = models.CharField(max_length=255) ISBN = models.CharField(max_length=13) publication_date = models.DateField() description = models.TextField() def __str__(self): return self.title # views.py from django.shortcuts import render from .models import Book def book_list(request): books = Book.objects.all() query = request.GET.get('q') if query: books = books.filter( Q(title__icontains=query) | Q(author__icontains=query) ).distinct() return render(request, 'books_list.html', { 'books': books }) # books_list.html <h1>Book Catalog</h1> <form action=\\"\\" method=\\"GET\\"> <input type=\\"text\\" name=\\"q\\" placeholder=\\"Search...\\"> <input type=\\"submit\\" value=\\"Search\\"> </form> <ul> {% for book in books %} <li> {{ book.title }} by {{ book.author}} </li> {% endfor %} </ul>"},{"prompt":"Develop a Python function to count number of digits in a number. 8594","completion":"def count_digits(number): count = 0 while (number > 0): number = number // 10 count = count + 1 return count num = 8594 print(\\"Number of digits : \\", count_digits(num))"},{"prompt":"Create a python code that takes in a sentence and returns a list containing the length of each word. sentence = Hello I am a sentence","completion":"sentence_lengths = [len(word) for word in sentence.split()]"},{"prompt":"Write a python program to calculate the absolute differences between corresponding elements of two arrays of the same size. arr1 = [1, 4, 5] arr2 = [3, 2, 1]","completion":"def calc_diff(arr1, arr2): # Initialize difference array diff = [] # Iterate through arrays for i in range(len(arr1)): # Calculate the difference between two elements diff.append(abs(arr1[i] - arr2[i])) return diff"},{"prompt":"Create a Python program that takes an email message as input and prints the sender's email address. Email Message: From: John Doe <john.doe@example.com> To: Jane Doe <jane.doe@example.com> Subject: Example Email","completion":"import re email_message = \\"\\"\\" From: \\"John Doe\\" <john.doe@example.com> To: \\"Jane Doe\\" <jane.doe@example.com> Subject: Example Email \\"\\"\\" sender_email = re.findall(r'From: .+?<(.+?)>', email_message) print('Sender's email address:', sender_email[0])"},{"prompt":"Python, write a code to classify emails according to their content using Naive Bayes classifier.","completion":"import nltk from nltk.corpus import reuters from sklearn.naive_bayes import MultinomialNB # Preparing data train_docs_ids = reuters.fileids(categories='train') train_docs = [reuters.raw(doc_id) for doc_id in train_docs_ids] train_labels = [reuters.categories(doc_id) for doc_id in train_docs_ids] # Training the Naive Bayes classifier nb_classifier = MultinomialNB().fit(train_docs, train_labels) # Classifying emails email_docs = [\\"This is an email about sports.\\", \\"This is an email about politics.\\"] email_labels = nb_classifier.predict(email_docs) for email_doc, email_label in zip(email_docs, email_labels): print(\\"'{}' is labelled as '{}'.\\".format(email_doc, email_label))"},{"prompt":"Write a Python program to calculate the average of three integers. num1 = 10 num2 = 15 num3 = 20","completion":"def avg_three_nums(num1, num2, num3): return (num1 + num2 + num3) / 3"},{"prompt":"Generate an HTML table using Python that displays the following data: name, age, city. Name: John, Age: 20, City: New York Name: Jane, Age: 25, City: San Francisco","completion":"<html> <head> </head> <body> <table> <tr> <th>Name</th> <th>Age</th> <th>City</th> </tr> <tr> <td>John</td> <td>20</td> <td>New York</td> </tr> <tr> <td>Jane</td> <td>25</td> <td>San Francisco</td> </tr> </table> </body> </html>"},{"prompt":"Create a program in Python to solve the Tower of Hanoi problem. 3 disc","completion":"def moveTower(height,fromPole, toPole, withPole): if height >= 1: moveTower(height-1,fromPole,withPole,toPole) moveDisk(fromPole,toPole) moveTower(height-1,withPole,toPole,fromPole) def moveDisk(fp,tp): print(\\"Moving disk from\\",fp,\\"to\\",tp) moveTower(3,\\"A\\",\\"B\\",\\"C\\")"},{"prompt":"Create a Python program which takes in two numbers and prints out the first number divided by the second number. 3, 5","completion":"def divide(a,b): return a/b result = divide(3,5) print(result)"},{"prompt":"Create a Python program to sort a list of dictionaries by a value of one of the dictionary's keys. # List of dictionaries data = [ {'name': 'Brian', 'age': 32}, {'name': 'Anna', 'age': 25}, {'name': 'John', 'age': 28} ] key = 'age'","completion":"# function to sort a list of dictionaries by a value of one of the dictionary's keys def SortDictByKey(data, key): return sorted(data, key=lambda i: i[key]) # List of dictionaries data = [ {'name': 'Brian', 'age': 32}, {'name': 'Anna', 'age': 25}, {'name': 'John', 'age': 28} ] key = 'age' # Print the sorted output print(\\"Sorted list of dictionaries is : \\", SortDictByKey(data, key))"},{"prompt":"Optimize the following Python code to make it more concise and easier to understand. def concat_items(items): result = for item in items: result = result + item return resul","completion":"def concat_items(items): # Use join() to join the elements in the given list with an empty string return \\"\\".join(items)"},{"prompt":"Create a basic Python program to produce a chart in the form of a turtle. The chart should contain a title, yaxis, xaxis, and labels. Not applicable","completion":"import turtle def chart(): data = [100, 120, 95, 70, 60] # Draw the chart turtle.forward(100) turtle.backward(200) turtle.forward(100) turtle.right(90) turtle.forward(200) turtle.right(90) turtle.forward(100) for x in range(len(data)): turtle.right(90) turtle.forward(data[x]) turtle.write(data[x]) turtle.forward(15) turtle.left(90) turtle.forward(40) # Write the title and axes labels turtle.penup() turtle.goto(-100, -20) turtle.pendown() turtle.write(\\"Chart Title\\") turtle.penup() turtle.goto(-220, -230) turtle.pendown() turtle.write(\\"Y-Axis\\") turtle.penup() turtle.goto(0, -230) turtle.pendown() turtle.write(\\"X-Axis\\") chart() turtle.done()"},{"prompt":"This code estimates the partition function using the WISH algorithm and CPLEX for optimization. To use it, run python WISH.py h for help. The code takes in a graphical model (in UAI format) and a folder where logs are stored as input arguments. Optional arguments include accuracy alpha, failure probability delta, and timeout for each optimization instance (in seconds). The code then reads the factor graph from the input file and calculates the number of variables and factors. It then runs a loop to estimate the partition function for each level and sample number using the WH_cplex function. The output is stored in the specified output folder. Finally, the process_logs_cplex_LB and process_logs_cplex_UB functions are called to process the logs and estimate the lower and upper bounds of the partition function.","completion":"#---------------------------------------------------------------------------------------- # Copyright, 2013: # # Stefano Ermon - Cornell University , ermonste@cs.cornell.edu # Ashish Sabharwal - IBM Watson Research Center , ashish.sabharwal@us.ibm.com #---------------------------------------------------------------------------------------- import sys import math import random import os import argparse from WISHLogProcess import process_logs from WISHLogProcess import process_logs_cplex_LB from WISHLogProcess import process_logs_cplex_UB # version number __version__ = '1.0' # # Usage Information: # run \\"python WISH.py -h\\" for help # parser = argparse.ArgumentParser(description='Estimate the partition function using the WISH algorithm and CPLEX for the optimization.') parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__) parser.add_argument(\\"infile\\", help=\\"Graphical model (in UAI format)\\") parser.add_argument(\\"outfolder\\", help=\\"Folder where logs are stored\\") parser.add_argument('-alpha', '--alpha', type=float, help=\\"Accuracy alpha\\", default=1.0) parser.add_argument('-delta', '--delta', type=float, help=\\"Failure probability delta\\", default=0.1) parser.add_argument('-timeout', '--timeout', type=int, help=\\"Timeout for each optimization instance (seconds)\\", default=10) args = parser.parse_args() print \\"Reading factor graph from \\" + args.infile inputfile = open(args.infile, \\"r\\") fileName, fileExtension = os.path.splitext(args.infile) ind = 0 origNbrFactor = 0 origNbrVar = 0 for l in inputfile: if not l.strip()=='': ind = ind +1 if ind==2: origNbrVar=int(l) elif ind==3: l = l.rstrip(\\"n\\") elif ind==4: add xor cpt tabe origNbrFactor = int(l) elif ind>5: break print \\"Model with \\" + str(origNbrVar) + \\"variables and \\"+str(origNbrFactor) +\\" factors\\" depth = origNbrVar T = 7 #int(math.ceil(math.log(origNbrVar)*math.log(1.0/args.delta)/args.alpha)) print \\"Using \\" + str(T) +\\" samples per level\\" os.system(\\"mkdir \\"+args.outfolder) for i in range(0,depth+1): main for loop if i==0: sampnum=1 else: sampnum=T for t in range(1,sampnum+1): main for loop outfilenamelog = \\"%s.xor%d.loglen%d.%d.ILOGLUE.uai.LOG\\" % (os.path.basename(fileName) , i , 0 , t) cmdline = (\\"timeout %d ./WH_cplex -paritylevel 1 -number %d -seed 10 %s > %s\\") % (args.timeout , i , args.infile , args.outfolder +\\"/\\"+ outfilenamelog) os.system(cmdline) Parallel execution: assign this job to a separate core (a system dependent script is needed here) we provide an example based on Torque/PBS: os.system(\\"qsub -v basedir=\\"+basedir+\\",file=\\"+infile+\\",level=\\"+str(i)+\\",len=\\"+str(0)+\\",outdir=\\"+outdir+\\",sample=\\"+str(t)+\\",timeout=900s\\"+\\" LaunchIloglue.sh\\") process_logs_cplex_LB(args.outfolder) process_logs_cplex_UB(args.outfolder)"},{"prompt":"Create a web scraper in Python to extract the product name, price, and availability from an online store website.","completion":"\\"\\"\\" A web scraper to extract the product name, price, and availability from an online store website \\"\\"\\" import requests from bs4 import BeautifulSoup def scrape_products(url): # Get the html content of the website response = requests.get(url) # Parse the html content soup = BeautifulSoup(response.text, 'html.parser') # Get the products using the appropriate css class products = soup.find_all(class_='product') # Initialize an empty list for storing the product details product_list = [] # Iterate over the products for product in products: product_details = {} # Get the product name product_details['name'] = product.find('h3').text # Get the product price product_details['price'] = product.find(class_='price').text # Get the availability product_details['availability'] = product.find(class_='stock').text # Add the product details to the list product_list.append(product_details) return product_list if __name__ == '__main__': print(scrape_products('https://www.example.com'))"},{"prompt":"Create a basic chatbot in Python using the Chatterbot library. The chatbot should converse with the user and should be able to respond based on inputs. Not applicable","completion":"from chatterbot import ChatBot from chatterbot.trainers import ListTrainer bot = ChatBot('ChatBot') conversation = ['Hello', 'Hi there!', 'How are you?', 'I am good', 'That is good to hear', 'Thank you'] trainer = ListTrainer(bot) trainer.train(conversation) # Get a response to an input statement response = bot.get_response('What is your name?') # Print the response print(response)"},{"prompt":"Create a webscraper with Python Selenium that scrapes user reviews from Yelp. URL of the Yelp page","completion":"# import libraries from selenium import webdriver from selenium.webdriver.chrome.options import Options import time # set options options = Options() options.headless = True # initialize driver driver = webdriver.Chrome( executable_path='/usr/bin/chromedriver', options=options ) # navigate to the page driver.get(URL) # get the user reviews reviews = [] reviews_elems = driver.find_elements_by_css_selector(\\"div.lemon--div.__event-section__.bsf-l-25vx4._207b2a_Zbd7F\\") for i in reviews_elems: reviews.append(i.find_element_by_css_selector('p').text) # close the driver driver.close() # print the reviews for r in reviews: print(r)"},{"prompt":"Build a REST API with Python and Flask. The API should include the following endpoints: POST /users, GET /users/{userId}, GET /users/{userId}/posts, POST /posts Not applicable","completion":"# Importing libraries import flask from flask import Flask, request, jsonify # Creating the application instance app = Flask(__name__) # A list to store users data temporarily users = [] @app.route('/users', methods=['POST']) def add_user(): data = request.get_json() users.append(data) return jsonify({'message': 'User added successfully'}) @app.route('/users/<userId>', methods=['GET']) def get_user(userId): user = [user for user in users if user['userId'] == userId] if len(user) == 0: return jsonify({'message': 'No user found'}) return jsonify({'user': user[0]}) @app.route('/users/<userId>/posts', methods=['GET']) def get_user_posts(userId): posts = [post for post in posts if post['userId'] == userId] return jsonify({'posts': posts}) @app.route('/posts', methods=['POST']) def add_post(): data = request.get_json() posts.append(data) return jsonify({'message': 'Post added successfully'}) # Driver code if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python code snippet to generate two random numbers and display the larger one.","completion":"import random rand1 = random.randint(1, 100) rand2 = random.randint(1, 100) if rand1 > rand2: print(rand1) else: Print(rand2)"},{"prompt":"Design a Python code to extract the characters from from a given string in reverse order. string = hello","completion":"def reverseCharacters (string): reverseStr = \\"\\" for i in range(len(string)-1, -1, -1): reverseStr += string[i] return reverseStr"},{"prompt":"Create a Python program to perform a search on a given array using binary search algorithm. Search term: 5 Array: [1,2,3,4,5,6,7,8,9,10]","completion":"def binarySearch(arr, l, r, x): while l <= r: mid = l + (r - l)//2 if arr[mid] == x: return mid elif arr[mid] < x: l = mid + 1 else: r = mid - 1 return -1 if __name__ == \\"__main__\\": arr = [1,2,3,4,5,6,7,8,9,10] x = 5 result = binarySearch(arr, 0, len(arr)-1, x) if result != -1: print(\\"Element is present at index\\", str(result)) else: print(\\"Element is not present in the array\\")"},{"prompt":"Write a Python program to display the powers of 2 up to the given power. 8","completion":"# This code will display the powers of 2 up to a given power # Get the input power = 8 # Calculate the powers of 2 for i in range(power+1): print(2**i, end=' ') # Print a newline print(\\"\\")"},{"prompt":"Develop a Python script to measure the speed of different sorting algorithms.","completion":"\\"\\"\\" Develop a Python script to measure the speed of different sorting algorithms \\"\\"\\" import timeit import random def select_sort(seq): for i in range(len(seq)): min_idx = i for j in range(i+1, len(seq)): if seq[min_idx] > seq[j]: min_idx = j seq[i], seq[min_idx] = seq[min_idx], seq[i] def bubble_sort(seq): size = len(seq) - 1 while size != 0: for i in range(size): if seq[i] > seq[i+1]: seq[i], seq[i+1] = seq[i+1], seq[i] size -= 1 if __name__ == '__main__': start = timeit.default_timer() seq = [random.randint(1, 100) for _ in range(10)] select_sort(seq) stop = timeit.default_timer() time_select = stop - start print('Time for selection sort: ', time_select) start = timeit.default_timer() seq = [random.randint(1, 100) for _ in range(10)] bubble_sort(seq) stop = timeit.default_timer() time_bubble = stop - start print('Time for bubble sort: ', time_bubble)"},{"prompt":"Design a classification model in Python that can predict the probability of a customer churning. data = [[1, 20, 0], [1, 24, 0], [0, 30, 1], [1, 35, 0], [1, 32, 0]]","completion":"import numpy as np from sklearn.linear_model import LogisticRegression X = np.array([[1, 20, 0], [1, 24, 0], [0, 30, 1], [1, 35, 0], [1, 32, 0]]) y = np.array([0, 0, 1, 0, 0]) model = LogisticRegression() model.fit(X, y) prediction = model.predict_proba([[1, 33, 0]])"},{"prompt":"mplement a function to run a series of unit tests in Python. Not applicable","completion":"def run_tests(tests): \\"\\"\\"Takes in a list of tests and runs each one in turn, printing out the results. \\"\\"\\" # Keep track of which tests have passed or failed. passed = 0 failed = 0 # Run each test. for test in tests: print(\\"Running test: \\" + test.name) try: test.run() print(\\"Test passed!\\") passed += 1 except AssertionError as e: print(\\"Test failed:\\") print(\\"t\\" + str(e)) failed += 1 # Print out a summary of the results. print(\\"nTest Summary:\\") print(str(passed) + \\" tests passed\\") print(str(failed) + \\" tests failed\\")"},{"prompt":"Create a Python class to represent an Employee. The Employee class should have the following attributes: name, salary, and department name.","completion":"class Employee: def __init__(self, name, salary, department): self.name = name self.salary = salary self.department = department emp = Employee(\\"John\\", 10000, \\"Accounting\\") print(emp.name) # Output: John"},{"prompt":"Create a Python script to send daily reminder emails to a list of users. User list: [john@example.com, joe@example.com, rob@example.com]","completion":"import smtplib # list of email addresses Recipients = [\\"john@example.com\\", \\"joe@example.com\\", \\"rob@example.com\\"] # set up the SMTP server s = smtplib.SMTP(host='smtp.example.com', port=587) s.starttls() s.login(\\"username\\", \\"password\\") # For each email address\\" for recipient in Recipients: # setup the message message = \\"This is a daily reminder.\\" # send the message s.sendmail(\\"sender@example.com\\", recipient, message) # Terminate the SMTP session and close the connection s.quit()"},{"prompt":"Write a python code to implement a minheap.","completion":"class MinHeap: def __init__(self): self.heap= [] def parent(self, i): return int((i - 1) / 2) def insertKey(self, k): self.heap.append(k) i = len(self.heap)-1 self.fix_up(i) def fix_up(self, i): while i != 0 and self.heap[self.parent(i)] > self.heap[i]: self.heap[i], self.heap[self.parent(i)] = self.heap[self.parent(i)], self.heap[i] i = self.parent(i) def extractMin(self): if len(self.heap) == 0: return -1 min_elem = self.heap[0] if len(self.heap) > 1: self.heap[0] = self.heap.pop() self.fix_down(0) else: self.heap.pop() return min_elem def fix_down(self, i): left = 2*i + 1 right = 2*i + 2 min_i = i if left < len(self.heap) and self.heap[min_i] > self.heap[left]: min_i = left if right < len(self.heap) and self.heap[min_i] > self.heap[right]: min_i = right if min_i != i: self.heap[min_i], self.heap[i] = self.heap[i], self.heap[min_i] self.fix_down(min_i)"},{"prompt":"Construct a Python program that computes the maximum of a given list of numbers. [5, 6, 7, 2, 3]","completion":"def max_number(num_list): max = num_list[0] for num in num_list: if num > max: max = num return max print(max_number([5, 6, 7, -2, 3]))"},{"prompt":"Design a Python program for implementing Bubble Sort.","completion":"def bubbleSort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr arr = [64, 34, 25, 12, 22, 11, 90] bubbleSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Create a Python program to compare two given lists and return the common elements. listOne = [1, 3, 10, 15, 20] listTwo = [2, 3, 11, 15, 20]","completion":"def commonElements(listOne, listTwo): commonList = [] for element in listOne: if element in listTwo: commonList.append(element) return commonList print(commonElements(listOne, listTwo))"},{"prompt":"Generate a program using Python which collects environmental data from a list of cities and organizes it in a table. Cities: New York, Los Angeles, San Francisco, Chicago","completion":"\\"\\"\\" Generate a program using Python which collects environmental data from a list of cities and organizes it in a table. \\"\\"\\" import requests # API key for openweathermap KEY = '123456789' def get_weather_data(cities): weather_data = [] for city in cities: url = 'http://api.openweathermap.org/data/2.5/weather?q=' + city +'&APPID='+KEY response = requests.get(url) data = response.json() city_data = { 'name': city, 'temperature': data['main']['temp'], 'humidity': data['main']['humidity'], 'wind speed': data['wind']['speed'] } weather_data.append(city_data) return weather_data if __name__ == '__main__': cities = ['New York', 'Los Angeles', 'San Francisco', 'Chicago'] data = get_weather_data(cities) for city_data in data: print('Name:', city_data['name']) print('Temperature:', city_data['temperature']) print('Humidity:', city_data['humidity']) print('Wind speed:', city_data['wind speed'], 'n')"},{"prompt":"Write a Python program to match a given pattern in a given string. String: ABCDDEFG Pattern: AB*EFG","completion":"import re string = \\"ABCDDEFG\\" pattern = \\"AB*EFG\\" match = re.search(pattern, string) if match: print(\\"Pattern found!\\") else: print(\\"Pattern not found!\\")"},{"prompt":"Write a Python code to rotate a given array by 90 degrees. arr = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ]","completion":"def rotate_90(arr): # Get the size of the array row = len(arr[0]) col = len(arr) # Create an array to store the result result = [] # Perform rotation for i in range(row): result.append([]) for j in range(col-1, -1, -1): # reversed range result[i].append(arr[j][i]) return result if __name__ == \\"__main__\\": arr = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ] print(rotate_90(arr)) \\"\\"\\" [[13, 9, 5, 1], [14, 10, 6, 2], [15, 11, 7, 3], [16, 12, 8, 4]] \\"\\"\\""},{"prompt":"Develop a Python class to represent an employee with name, position and salary. The employee is named 'John', he is a software engineer and he earns 6000 per month.","completion":"class Employee: def __init__(self, name, position, salary): self.name = name self.position = position self.salary = salary john = Employee('John', 'Software Engineer', 6000)"},{"prompt":"Come up with a solution for the following Kaggle problem https://www.kaggle.com/c/housepricesadvancedregressiontechnique","completion":"The solution involves using the Scikit-Learn library in Python to construct a regression model using the features provided in the House Prices Advanced Regression Techniques dataset. This model can then identify patterns in the data which will be used to predict the price of houses. Data pre-processing and feature engineering can also be employed to increase the accuracy of the model."},{"prompt":"Make necessary changes to the given code to make it compatible with Python 3 # Python 2 print Hello World!","completion":"# Python 3 print(\\"Hello World!\\")"},{"prompt":"Create a basic program in Python that takes in two numbers and calculates the product. int a = 5; int b = 10;","completion":"def product(a, b): return a * b print(product(5, 10))"},{"prompt":"Create a python function that takes in two arguments x and y, and will print out the multiplication result after adding 1 to x.","completion":"def multiply_add_one(x, y): print(x + 1 * y)"},{"prompt":"Create a tree from an array of numbers in Python. arr = [13, 5, 6, 17, 23, 4]","completion":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None def createTree(arr): root = Node(arr[0]) for i in arr[1:]: current_node = root while True: if i <= current_node.data: if current_node.left is None: current_node.left = Node(i) break else: current_node = current_node.left elif i > current_node.data: if current_node.right is None: current_node.right = Node(i) break else: current_node = current_node.right return root"},{"prompt":"Write Python code that rearranges a given list in alternating ascending and descending order. [3, 5, 4, 16, 9]","completion":"def arrange_list(input_list): # sort the list input_list.sort() # initialize the output list output_list = [] # loop over elements in the input list for i in range(0, len(input_list)): if i % 2 == 0: output_list.append(input_list[i]) else: output_list.append(input_list[len(input_list) - 1 - i]) # return output list return output_list if __name__ == '__main__': input_list = [3, 5, 4, 16, 9] print(arrange_list(input_list)) # [3, 16, 5, 4, 9]"},{"prompt":"Create a Python function to return the maximum number of valid parentheses in a given expression. expression = ((()))()","completion":"def max_valid_parenthesis(expression): max_value = 0 # Keep a count of left parentheses count = 0 for char in expression: if char == '(': count += 1 max_value = max(max_value, count) else: count -= 1 return max_value"},{"prompt":"Design a Python class for a simple calculator with functions for addition, subtraction, multiplication and division.","completion":"class Calculator: # Constructor def __init__(self): self.value = 0 # Add to the value def add(self, val): self.value += val # Subtract from the value def subtract(self, val): self.value -= val # Multiply the value def multiply(self, val): self.value *= val # Divide the value def divide(self, val): self.value /= val # Print the value def show_value(self): print(\\"Value =\\", self.value)"},{"prompt":"Construct a Python program to print all the numbers between 0 and a given number n that are divisible by 3.","completion":"def print_divisible_by_three(n): for num in range(n+1): if num % 3 == 0: print(num, end=\\" \\") print_divisible_by_three(10)"},{"prompt":"Write a Python program to predict the age of a person based on the amount of education in years they have had. educationYears = 15","completion":"#import libraries import pandas as pd import numpy as np #create dataframe data = {'educationYears': [15]} df = pd.DataFrame(data) #create label encoder from sklearn.preprocessing import LabelEncoder le = LabelEncoder() #fit data to model from sklearn.linear_model import LogisticRegression le.fit(df['educationYears']) X = df['educationYears'].values X = le.transform(X) X = X.reshape(-1, 1) #predict age model = LogisticRegression() model.fit(X, y) y_pred = model.predict([[15]]) #print result print(\\"Age:\\", y_pred)"},{"prompt":"Create a function in Python that takes two strings as arguments and returns a concatenated string. String1: Hello String2: World","completion":"def concat_strings(first_str, second_str): return first_str + second_str print(concat_strings(\\"Hello \\", \\"World\\")) # prints \\"Hello World\\""},{"prompt":"Create a Python class to represent a student's grade information.","completion":"class GradeInfo: def __init__(self, name, grade): self.name = name self.grade = grade def get_name(self): return self.name def get_grade(self): return self.grade"},{"prompt":"Generate a syntax to input random numbers into a python program N = 10","completion":"import random # Generates N random numbers numbers = [random.randint(0, N) for i in range(N)]"},{"prompt":"Design a Python program to optimize a cost function.","completion":"import numpy as np def optimize(func, n, method=\\"gradient_descent\\", iter_num=100, step_size=0.01): \\"\\"\\" Input: Cost function, dimension of the variable, optimization method, number of iterations, step size Output: Optimal variable \\"\\"\\" # define our variable x = np.zeros(n, dtype=float) if method == \\"gradient_descent\\": for i in range(iter_num): # calculate the gradient grad = np.gradient(func, x) # update x by taking a step in the opposite direction of the gradient x -= step_size * grad elif method == \\"newton_method\\": for i in range(iter_num): # calculate the gradient grad = np.gradient(func, x) # calculate the hessian hessian = np.gradient(grad, x) # update x by taking a step in the opposite direction of the gradient and divided by the hessian x -= np.linalg.inv(hessian) .dot(grad) return x"},{"prompt":"Write a Python function which takes a list of words and counts the number of vowels. The list of words is [hello, world]","completion":"def count_vowels(words): vowels = \\"aeiou\\" count = 0 for word in words: for char in word: if char in vowels: count += 1 return count"},{"prompt":"To use PyTransit for exoplanet transit modelling in Python, import the necessary modules and functions, including Path, Table, njit, prange, atleast_2d, zeros, log, concatenate, pi, transpose, sum, compress, ones, UFloat, ufloat, LegendreBaseline, and OCLTTVLPF. Then, define a TESSCLTTVLPF object with the required parameters, including name, dfile, zero_epoch, period, nsamples, trdur, bldur, nlegendre, ctx, and queue. Finally, use the created object to create a population of parameters and calculate the flux model and likelihood.","completion":"# PyTransit: fast and easy exoplanet transit modelling in Python. # Copyright (C) 2010-2019 Hannu Parviainen # # This program is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program. If not, see <https://www.gnu.org/licenses/>. from pathlib import Path from astropy.table import Table from numba import njit, prange from numpy import atleast_2d, zeros, log, concatenate, pi, transpose, sum, compress, ones from uncertainties import UFloat, ufloat from .oclttvlpf import OCLTTVLPF from ..utils.keplerlc import KeplerLC from .baselines.legendrebaseline import LegendreBaseline @njit(parallel=True, cache=False, fastmath=True) def lnlike_normal_v(o, m, e): m = atleast_2d(m) npv = m.shape[0] npt = o.size lnl = zeros(npv) for i in prange(npv): lnl[i] = -npt*log(e[i, 0]) - 0.5*log(2*pi) - 0.5*sum(((o-m[i, :])/e[i ,0])**2) return lnl class TESSCLTTVLPF(LegendreBaseline, OCLTTVLPF): def __init__(self, name: str, dfile: Path, zero_epoch: float, period: float, nsamples: int = 10, trdur: float = 0.125, bldur: float = 0.3, nlegendre: int = 2, ctx = None, queue = None): zero_epoch = zero_epoch if isinstance(zero_epoch, UFloat) else ufloat(zero_epoch, 1e-5) period = period if isinstance(period, UFloat) else ufloat(period, 1e-7) tb = Table.read(dfile) self.bjdrefi = tb.meta['BJDREFI'] zero_epoch = zero_epoch - self.bjdrefi df = tb.to_pandas().dropna(subset=['TIME', 'SAP_FLUX', 'PDCSAP_FLUX']) self.lc = lc = KeplerLC(df.TIME.values, df.SAP_FLUX.values, zeros(df.shape[0]), zero_epoch.n, period.n, trdur, bldur) LegendreBaseline.__init__(self, nlegendre) OCLTTVLPF.__init__(self, name, zero_epoch, period, ['TESS'], times=lc.time_per_transit, fluxes=lc.normalized_flux_per_transit, pbids=zeros(lc.nt, 'int'), nsamples=nsamples, exptimes=[0.00139], cl_ctx=ctx, cl_queue=queue) self.lnlikelihood = self.lnlikelihood_nb def create_pv_population(self, npop=50): pvp = self.ps.sample_from_prior(npop) return pvp def flux_model(self, pvp): tmodel = transpose(self.transit_model(pvp, copy=True)).copy() return tmodel * self.baseline(pvp) def lnlikelihood_nb(self, pvp): fmodel = self.flux_model(pvp).astype('d') err = 10**atleast_2d(pvp)[:, self._sl_err] return lnlike_normal_v(self.ofluxa, fmodel, err)"},{"prompt":"Create a predictive analysis machine learning model in Python using a dataset provided that can predict the sale price of a home. Dataset containing 10 columns and 40000 records.","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Load the dataset data = pd.read_csv('data.csv') # Create feature and target array X = data.drop('sale_price', axis=1).values y = data['sale_price'].values # Split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Build and train the model model = LinearRegression() model.fit(X_train, y_train) # Evaluate the model score = model.score(X_test, y_test) print(\\"Model Score:\\", score)"},{"prompt":"Write a Python program to generate a list containing all the linear combinations of \`x\` and \`y\`, where \`x\` and \`y\` are given as input. x = [1, 2, 3] y = [4, 5, 6]","completion":"x = [1, 2, 3] y = [4, 5, 6] combinations = [[i, j] for i in x for j in y] print(combinations)"},{"prompt":"Edit a python program to print the square of a number input by the user. num = input(Enter a number: )","completion":"num = input(\\"Enter a number: \\") num = int(num) print(\\"The square of the number is:\\", num**2)"},{"prompt":"Use Python to create an encryption program that swaps out one character with another character.","completion":"def encrypt(message): chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' encrypted = '' for char in message: if char in chars: char_index = chars.find(char) new_char_index = (char_index + 13) % 26 encrypted += chars[new_char_index] else: encrypted += char return encrypted # test print(encrypt('HELLO'))"},{"prompt":"Write an algorithm in Python for searching through a large collection of text documents and printing out the documents containing a specified keyword. collection = [this is document one, document two is about animals, here is another document, the final document] keyword = document","completion":"def search(collection, keyword): found = [] for document in collection: if keyword in document: found.append(document) return found results = search(collection, keyword) for result in results: print(result)"},{"prompt":"The given code is a Python class named FileSystem that provides an interface for file system operations. To use this class, create an instance of it and call its methods. The methods include abspath, realpath, path_to_module, expanduser, basename, chdir, copyfile, dirname, exists, dirs_under, files_under, getcwd, glob, isabs, isfile, getsize, isdir, join, listdir, mkdtemp, maybe_make_directory, move, mtime, normpath, open_binary_tempfile, open_binary_file_for_reading, read_binary_file, write_binary_file, open_text_file_for_reading, open_text_file_for_writing, open_stdin, read_text_file, write_text_file, sha1, relpath, remove, rmtree, copytree, split, splitext, and compare.","completion":"# Copyright (C) 2010 Google Inc. All rights reserved. # # Redistribution and use in source and binary forms, with or without # modification, are permitted provided that the following conditions are # met: # # * Redistributions of source code must retain the above copyright # notice, this list of conditions and the following disclaimer. # * Redistributions in binary form must reproduce the above # copyright notice, this list of conditions and the following disclaimer # in the documentation and/or other materials provided with the # distribution. # * Neither the name of Google Inc. nor the names of its # contributors may be used to endorse or promote products derived from # this software without specific prior written permission. # # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS # \\"AS IS\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR # A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT # OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, # SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT # LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, # DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY # THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \\"\\"\\"Wrapper object for the file system / source tree.\\"\\"\\" import codecs import errno import exceptions import filecmp import glob import hashlib import os import shutil import sys import tempfile import time class FileSystem(object): \\"\\"\\"FileSystem interface for webkitpy. Unless otherwise noted, all paths are allowed to be either absolute or relative.\\"\\"\\" sep = os.sep pardir = os.pardir def abspath(self, path): # FIXME: This gross hack is needed while we transition from Cygwin to native Windows, because we # have some mixing of file conventions from different tools: if sys.platform == 'cygwin': path = os.path.normpath(path) path_components = path.split(os.sep) if path_components and len(path_components[0]) == 2 and path_components[0][1] == ':': path_components[0] = path_components[0][0] path = os.path.join('/', 'cygdrive', *path_components) return os.path.abspath(path) def realpath(self, path): return os.path.realpath(path) def path_to_module(self, module_name): \\"\\"\\"A wrapper for all calls to __file__ to allow easy unit testing.\\"\\"\\" # FIXME: This is the only use of sys in this file. It's possible this function should move elsewhere. return sys.modules[module_name].__file__ # __file__ is always an absolute path. def expanduser(self, path): return os.path.expanduser(path) def basename(self, path): return os.path.basename(path) def chdir(self, path): return os.chdir(path) def copyfile(self, source, destination): shutil.copyfile(source, destination) def dirname(self, path): return os.path.dirname(path) def exists(self, path): return os.path.exists(path) def dirs_under(self, path, dir_filter=None): \\"\\"\\"Return the list of all directories under the given path in topdown order. Args: dir_filter: if not None, the filter will be invoked with the filesystem object and the path of each dirfound. The dir is included in the result if the callback returns True. \\"\\"\\" def filter_all(fs, dirpath): return True dir_filter = dir_filter or filter_all dirs = [] for (dirpath, dirnames, filenames) in os.walk(path): if dir_filter(self, dirpath): dirs.append(dirpath) return dirs def files_under(self, path, dirs_to_skip=[], file_filter=None): \\"\\"\\"Return the list of all files under the given path in topdown order. Args: dirs_to_skip: a list of directories to skip over during the traversal (e.g., .svn, resources, etc.) file_filter: if not None, the filter will be invoked with the filesystem object and the dirname and basename of each file found. The file is included in the result if the callback returns True. \\"\\"\\" def filter_all(fs, dirpath, basename): return True file_filter = file_filter or filter_all files = [] if self.isfile(path): if file_filter(self, self.dirname(path), self.basename(path)): files.append(path) return files if self.basename(path) in dirs_to_skip: return [] for (dirpath, dirnames, filenames) in os.walk(path): for d in dirs_to_skip: if d in dirnames: dirnames.remove(d) for filename in filenames: if file_filter(self, dirpath, filename): files.append(self.join(dirpath, filename)) return files def getcwd(self): return os.getcwd() def glob(self, path): return glob.glob(path) def isabs(self, path): return os.path.isabs(path) def isfile(self, path): return os.path.isfile(path) def getsize(self, path): return os.path.getsize(path) def isdir(self, path): return os.path.isdir(path) def join(self, *comps): return os.path.join(*comps) def listdir(self, path): return os.listdir(path) def mkdtemp(self, **kwargs): \\"\\"\\"Create and return a uniquely named directory. This is like tempfile.mkdtemp, but if used in a with statement the directory will self-delete at the end of the block (if the directory is empty; non-empty directories raise errors). The directory can be safely deleted inside the block as well, if so desired. Note that the object returned is not a string and does not support all of the string methods. If you need a string, coerce the object to a string and go from there. \\"\\"\\" class TemporaryDirectory(object): def __init__(self, **kwargs): self._kwargs = kwargs self._directory_path = tempfile.mkdtemp(**self._kwargs) def __str__(self): return self._directory_path def __enter__(self): return self._directory_path def __exit__(self, type, value, traceback): # Only self-delete if necessary. # FIXME: Should we delete non-empty directories? if os.path.exists(self._directory_path): os.rmdir(self._directory_path) return TemporaryDirectory(**kwargs) def maybe_make_directory(self, *path): \\"\\"\\"Create the specified directory if it doesn't already exist.\\"\\"\\" try: os.makedirs(self.join(*path)) except OSError, e: if e.errno != errno.EEXIST: raise def move(self, source, destination): shutil.move(source, destination) def mtime(self, path): return os.stat(path).st_mtime def normpath(self, path): return os.path.normpath(path) def open_binary_tempfile(self, suffix): \\"\\"\\"Create, open, and return a binary temp file. Returns a tuple of the file and the name.\\"\\"\\" temp_fd, temp_name = tempfile.mkstemp(suffix) f = os.fdopen(temp_fd, 'wb') return f, temp_name def open_binary_file_for_reading(self, path): return codecs.open(path, 'rb') def read_binary_file(self, path): \\"\\"\\"Return the contents of the file at the given path as a byte string.\\"\\"\\" with file(path, 'rb') as f: return f.read() def write_binary_file(self, path, contents): with file(path, 'wb') as f: f.write(contents) def open_text_file_for_reading(self, path, errors='strict'): # Note: There appears to be an issue with the returned file objects # not being seekable. See http://stackoverflow.com/questions/1510188/can-seek-and-tell-work-with-utf-8-encoded-documents-in-python . return codecs.open(path, 'r', 'utf8', errors) def open_text_file_for_writing(self, path): return codecs.open(path, 'w', 'utf8') def open_stdin(self): return codecs.StreamReaderWriter(sys.stdin, codecs.getreader('utf8'), codecs.getwriter('utf8'), 'replace') def read_text_file(self, path): \\"\\"\\"Return the contents of the file at the given path as a Unicode string. The file is read assuming it is a UTF-8 encoded file with no BOM.\\"\\"\\" with codecs.open(path, 'r', 'utf8') as f: return f.read() def write_text_file(self, path, contents): \\"\\"\\"Write the contents to the file at the given location. The file is written encoded as UTF-8 with no BOM.\\"\\"\\" with codecs.open(path, 'w', 'utf-8') as f: f.write(contents.decode('utf-8') if type(contents) == str else contents) def sha1(self, path): contents = self.read_binary_file(path) return hashlib.sha1(contents).hexdigest() def relpath(self, path, start='.'): return os.path.relpath(path, start) class _WindowsError(exceptions.OSError): \\"\\"\\"Fake exception for Linux and Mac.\\"\\"\\" pass def remove(self, path, osremove=os.remove): \\"\\"\\"On Windows, if a process was recently killed and it held on to a file, the OS will hold on to the file for a short while. This makes attempts to delete the file fail. To work around that, this method will retry for a few seconds until Windows is done with the file.\\"\\"\\" try: exceptions.WindowsError except AttributeError: exceptions.WindowsError = FileSystem._WindowsError retry_timeout_sec = 3.0 sleep_interval = 0.1 while True: try: osremove(path) return True except exceptions.WindowsError, e: time.sleep(sleep_interval) retry_timeout_sec -= sleep_interval if retry_timeout_sec < 0: raise e def rmtree(self, path): \\"\\"\\"Delete the directory rooted at path, whether empty or not.\\"\\"\\" shutil.rmtree(path, ignore_errors=True) def copytree(self, source, destination): shutil.copytree(source, destination) def split(self, path): \\"\\"\\"Return (dirname, basename + '.' + ext)\\"\\"\\" return os.path.split(path) def splitext(self, path): \\"\\"\\"Return (dirname + os.sep + basename, '.' + ext)\\"\\"\\" return os.path.splitext(path) def compare(self, path1, path2): return filecmp.cmp(path1, path2)"},{"prompt":"Create a Python script that defines a state machine with three states: RANDOMIZE, FOO_0, and FOO_1. RANDOMIZE state should randomly transition to either FOO_0, FOO_1, or FOO_2 state. FOO_0 and FOO_1 states should have a callback function that randomly sets the outcome to either foo_0, foo_1, or foo_2. The state machine should have a final_outcome.","completion":"#!/usr/bin/env python import smach import random class RandomOutcomeState(smach.State): def __init__(self, input_keys = ['outcome'], output_keys = ['outcome'], callbacks = {}, outcomes=['succeeded']): smach.State.__init__(self, input_keys=input_keys, output_keys=output_keys, outcomes=outcomes) self._cbs = [] if callbacks: for cb in sorted(callbacks): if cb in globals(): self._cbs.append(globals()[cb]) elif cb in locals(): self._cbs.append(locals()[cb]) elif cb in dir(self): self._cbs.append(getattr(self, cb)) self._cb_input_keys = [] self._cb_output_keys = [] self._cb_outcomes = [] for cb in self._cbs: if cb and smach.has_smach_interface(cb): self._cb_input_keys.append(cb.get_registered_input_keys()) self._cb_output_keys.append(cb.get_registered_output_keys()) self._cb_outcomes.append(cb.get_registered_outcomes()) self.register_input_keys(self._cb_input_keys[-1]) self.register_output_keys(self._cb_output_keys[-1]) self.register_outcomes(self._cb_outcomes[-1]) def execute(self, userdata): # Call callbacks for (cb, ik, ok) in zip(self._cbs, self._cb_input_keys, self._cb_output_keys): # Call callback with limited userdata try: cb_outcome = cb(self, smach.Remapper(userdata,ik,ok,{})) except: cb_outcome = cb(smach.Remapper(userdata,ik,ok,{})) return userdata.outcome class CallbacksState(smach.State): def __init__(self, input_keys=[], output_keys=[], callbacks=[]): smach.State.__init__(self, input_keys=input_keys, output_keys=output_keys, outcomes=['succeeded']) self._cbs = [] if callbacks: for cb in sorted(callbacks): if cb in globals(): self._cbs.append(globals()[cb]) elif cb in locals(): self._cbs.append(locals()[cb]) elif cb in dir(self): self._cbs.append(getattr(self, cb)) self._cb_input_keys = [] self._cb_output_keys = [] self._cb_outcomes = [] for cb in self._cbs: if cb and smach.has_smach_interface(cb): self._cb_input_keys.append(cb.get_registered_input_keys()) self._cb_output_keys.append(cb.get_registered_output_keys()) self._cb_outcomes.append(cb.get_registered_outcomes()) self.register_input_keys(self._cb_input_keys[-1]) self.register_output_keys(self._cb_output_keys[-1]) self.register_outcomes(self._cb_outcomes[-1]) def execute(self, userdata): # Call callbacks for (cb, ik, ok) in zip(self._cbs, self._cb_input_keys, self._cb_output_keys): # Call callback with limited userdata try: cb_outcome = cb(self, smach.Remapper(userdata,ik,ok,{})) except: cb_outcome = cb(smach.Remapper(userdata,ik,ok,{})) return 'succeeded' @smach.cb_interface(input_keys=[], output_keys=['outcome'], outcomes=['foo_0', 'foo_1', 'foo_2']) def outcome_randomize_lambda_cb(self, userdata): lambda_cb = lambda ud: random.choice(list(self._outcomes)) userdata.outcome = lambda_cb(userdata) return 'succeeded' RandomOutcomeState.outcome_randomize_lambda_cb = outcome_randomize_lambda_cb @smach.cb_interface(input_keys=[], output_keys=['outcome'], outcomes=[]) def outcome_foo_0_lambda_cb(self, userdata): lambda_cb = lambda ud: random.choice(list(self._outcomes)) userdata.outcome = lambda_cb(userdata) return 'succeeded' CallbacksState.outcome_foo_0_lambda_cb = outcome_foo_0_lambda_cb @smach.cb_interface(input_keys=[], output_keys=['outcome'], outcomes=[]) def outcome_foo_1_lambda_cb(self, userdata): lambda_cb = lambda ud: random.choice(list(self._outcomes)) userdata.outcome = lambda_cb(userdata) return 'succeeded' CallbacksState.outcome_foo_1_lambda_cb = outcome_foo_1_lambda_cb @smach.cb_interface(input_keys=[], output_keys=['outcome'], outcomes=[]) def outcome_foo_2_lambda_cb(self, userdata): lambda_cb = lambda ud: random.choice(list(self._outcomes)) userdata.outcome = lambda_cb(userdata) return 'succeeded' CallbacksState.outcome_foo_2_lambda_cb = outcome_foo_2_lambda_cb def main(): sm = smach.StateMachine(outcomes=['final_outcome']) with sm: smach.StateMachine.add('RANDOMIZE', RandomOutcomeState(callbacks = ['outcome_randomize_lambda_cb'], outcomes=['foo_0', 'foo_1', 'foo_2']), transitions={'foo_0':'FOO_0', 'foo_1':'FOO_1', 'foo_2':'FOO_2'}) smach.StateMachine.add('FOO_0', CallbacksState(callbacks = ['outcome_foo_0_lambda_cb']), transitions={'succeeded':'RANDOMIZE'}) smach.StateMachine.add('FOO_1', CallbacksState(callbacks = ['outcome_foo_1_lambda_cb']), transitions={'succeeded':'RANDOMIZE'}) smach.StateMachine.add('FOO_2', CallbacksState(callbacks = ['outcome_foo_2_lambda_cb']), transitions={'succeeded':'final_outcome'}) outcome = sm.execute() if __name__ == '__main__': main()"},{"prompt":"Generate a Python script that will extract all URLs from the given text. The websites I like to visit are https://www.google.com and https://www.facebook.com","completion":"import re text = \\"The websites I like to visit are https://www.google.com and https://www.facebook.com\\" url_list = re.findall(r'(https?://S+)', text) print(url_list)"},{"prompt":"Write a Python program to sort a list according to a given order of letters. ['c','d','a','b'], order=['a', 'b', 'c', 'd']","completion":"def sort_by_order(l, order): return sorted(l, key = lambda x : order.index(x))"},{"prompt":"Create a function to optimize a given python code using the Numba library. def calculate_pi(): c = 0.0 for k in range(1000): for j in range(1000): c += k ** 2 + j ** 3 return c","completion":"import numba @numba.jit def calculate_pi(): c = 0.0 for k in range(1000): for j in range(1000): c += k ** -2 + j ** -3 return c"},{"prompt":"Generate a python script for creating a list containing the first 20 square numbers","completion":"sq_list = [] n = 1 while len(sq_list) <= 19: sq_list.append(n*n) n += 1 print(sq_list)"},{"prompt":"Write a Python function to calculate the total cost of an item given its base price and additional cost. Base price: 30 Additional cost: 10","completion":"def calculate_total_cost(base_price, additional_cost): return base_price + additional_cost"},{"prompt":"Optimize a simple Python program for finding the sum of two numbers. The program should take two numbers as an input and return the sum as an output. 15 and 7","completion":"def add_numbers(num1, num2): ''' Function to add two numbers ''' return num1 + num2 # Driver code print(add_numbers(15, 7))"},{"prompt":"Write a Python program to read in two numbers from the user, and print out their multiplication result.","completion":"def multiply_numbers(): num1 = float(input(\\"Enter first number: \\")) num2 = float(input(\\"Enter second number: \\")) result = num1 * num2 print(\\"The result is \\" + str(result)) multiply_numbers()"},{"prompt":"Design a python program which takes a two strings and finds out if they are anagrams.","completion":"def is_anagram(str1, str2): if len(str1) != len(str2): return False hashmap = {} for letter in str1: if letter in hashmap: hashmap[letter] += 1 else: hashmap[letter] = 1 for letter in str2: if letter not in hashmap or hashmap[letter] == 0: return False else: hashmap[letter] -= 1 for key in hashmap: if hashmap[key] != 0: return False return True"},{"prompt":"Write a Python program to store and search for contacts in an address book. { John Doe: { phone: 12345677, address: 742 Evergreen Terrace }, Jane Doe: { phone: 98765432, address: 567 Yellowjacket Lane }, Sam Smith: { phone: 13245678, address: 1222 Liberty Street } }","completion":"address_book = { 'John Doe': { 'phone': '12345677', 'address': '742 Evergreen Terrace' }, 'Jane Doe': { 'phone': '98765432', 'address': '567 Yellowjacket Lane' }, 'Sam Smith': { 'phone': '13245678', 'address': '1222 Liberty Street' } } def search_contact(name): if name in address_book: return address_book[name] else: return 'Contact not found.' if __name__ == '__main__': print(search_contact('John Doe')) # should return {'phone': '12345677', 'address': '742 Evergreen Terrace'}"},{"prompt":"Generate a list of letters in lowercase using Python.","completion":"import string print(list(string.ascii_lowercase))"},{"prompt":"Generate a Python program to generate a list comprehension of a given set or range. words = [tea, eat, apple]","completion":"result = [i[::-1] for i in words]"},{"prompt":"Create a REST API in Python using the Flask framework that allows a user to view all registered users, add new users, update a user's information, and delete a user. Not applicable","completion":"from flask import Flask, request, jsonify from flask_sqlalchemy import SQLAlchemy app = Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/db.sqlite' db = SQLAlchemy(app) class User(db.Model): id = db.Column(db.Integer, primary_key=True) first_name = db.Column(db.String(120)) last_name = db.Column(db.String(120)) db.create_all() @app.route('/users', methods=['GET']) def get_users(): users = User.query.all() return jsonify([user.serialize() for user in users]) @app.route('/users', methods=['POST']) def add_user(): user = User(first_name=request.json['first_name'], last_name=request.json['last_name']) db.session.add(user) db.session.commit() return user.serialize() @app.route('/users/int:id', methods=['PUT']) def update_user(id): user = User.query.get(id) user.first_name = request.json['first_name'] user.last_name = request.json['last_name'] db.session.commit() return user.serialize() @app.route('/users/int:id', methods=['DELETE']) def delete_user(id): User.query.filter_by(id=id).delete() db.session.commit() return {'message': 'User deleted'} if name == 'main': app.run(debug=True)"},{"prompt":"Create a Python program to print out the largest palindrome number from a list of numbers. Example list of numbers [4, 12, 25, 98, 9989]","completion":"def is_palindrome(n): return str(n) == str(n)[::-1] def largest_palindrome(nums): largest = 0 for n in nums: if is_palindrome(n): largest = max(n, largest) return largest nums = [4, 12, 25, 98, 9989] largest = largest_palindrome(nums) print(f'Largest palindrome from the list is {largest}')"},{"prompt":"Create a program in Python to optimize an equation using the gradient descent algorithm.","completion":"import numpy as np def optimize(f, x_init, lr, n_iter): # initialize x = x_init # gradient descent algorithm for i in range(n_iter): # calculate gradient grad = np.gradient(f(x)) # update x with learning rate x -= lr * grad return x"},{"prompt":"Write a Python program to sort a list of strings alphabetically using the Bubble Sort algorithm. unsorted_list = [cobra, rhinoceros, armadillo, aardvark]","completion":"def bubble_sort(lst): for i in range(len(lst)-1): for j in range(len(lst)-1): if lst[j] > lst[j+1]: lst[j], lst[j+1] = lst[j+1], lst[j] return lst unsorted_list = [\\"cobra\\", \\"rhinoceros\\", \\"armadillo\\", \\"aardvark\\"] sorted_list = bubble_sort(unsorted_list) print(sorted_list)"},{"prompt":"This code is a stress test for an ordering system. To run the stress test, run the main function with the following arguments: host, port, processes, threads, and num. The stress test will create multiple processes and threads to simulate multiple users making orders. The progress function will print the orders per second during the test. The report function will print the results of the test, including the success rate, time per request and order, and orders per second. The load_users and load_foods functions load the users and foods from a database. The Query class handles the HTTP requests to the ordering system, including logging in, getting the list of foods, creating a cart, adding food to the cart, and making an order. The job function runs a single order for a user. The thread function runs multiple jobs in a thread pool. The work function creates multiple threads and processes to run the stress test. The get_value and get_range functions get values from Redis. The safe_div function divides two numbers safely. The get_avg function gets the average of a list of numbers. The main function parses the arguments and runs the stress test.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- from __future__ import print_function import argparse import collections import contextlib import functools import itertools import json import math import os import random import signal import time import redis import pymysql try: import httplib except ImportError: import http.client as httplib try: import urllib.parse as urllib except ImportError: import urllib from multiprocessing.pool import Pool, ThreadPool from multiprocessing import Process KEY_PREFIX = \\"stress_test:make_order\\" USER_KEY = \\"{}:user\\".format(KEY_PREFIX) SUCCESS_KEY = \\"{}:success\\".format(KEY_PREFIX) FAILURE_KEY = \\"{}:failure\\".format(KEY_PREFIX) ORDER_RESP_TIME_KEY = \\"{}:order_resp_time\\".format(KEY_PREFIX) REQ_RESP_TIME_KEY = \\"{}:req_resp_time\\".format(KEY_PREFIX) REQUEST_SUCCESS_KEY = \\"{}:request_success\\".format(KEY_PREFIX) REQUEST_FAILURE_KEY = \\"{}:request_failure\\".format(KEY_PREFIX) REQ_FINISH_TIME_KEY = \\"{}:req_finish_time\\".format(KEY_PREFIX) ORDER_FINISH_TIME_KEY = \\"{}:order_finish_time\\".format(KEY_PREFIX) redis_store = redis.Redis() users, foods = {}, [] @contextlib.contextmanager def db_query(): db = pymysql.connect(host=os.getenv(\\"DB_HOST\\", \\"localhost\\"), port=int(os.getenv(\\"DB_PORT\\", 3306)), user=os.getenv(\\"DB_USER\\", \\"root\\"), passwd=os.getenv(\\"DB_PASS\\", \\"toor\\"), db=os.getenv(\\"DB_NAME\\", \\"eleme\\")) try: yield db finally: db.close() def load_users(): global users with db_query() as db: cur = db.cursor() # load users cur.execute(\\"SELECT id, name, password FROM user\\") for i, name, pw in cur.fetchall(): users[i] = {\\"username\\": name, \\"password\\": pw} redis_store.sadd(USER_KEY, *users.keys()) return users def load_foods(): global foods with db_query() as db: cur = db.cursor() cur.execute(\\"SELECT id, stock, price FROM food\\") for i, stock, price in cur.fetchall(): foods.append({\\"id\\": i, \\"stock\\": stock}) return foods def safe_loads(data): try: return json.loads(data) except: return data class QueryException(Exception): def __init__(self, code, message): self.code = code self.message = message def __str__(self): return \\"{} {}\\".format(self.code, self.message) class Query(object): __slots__ = [\\"access_token\\", \\"user_id\\", \\"cart_id\\", \\"client\\"] def __init__(self, host, port): self.client = httplib.HTTPConnection(host, port, timeout=3) self.access_token = None self.user_id = None self.cart_id = None def request(self, method, url, headers=None, data=None): data = data or {} headers = headers or {} headers[\\"Content-Type\\"] = \\"application/json\\" start = time.time() status = None try: self.client.request(method, url, body=json.dumps(data), headers=headers) response = self.client.getresponse() status = response.status data = response.read().decode(\\"utf-8\\") self.client.close() return {\\"status\\": status, \\"data\\": safe_loads(data)} finally: now = time.time() elapsed = now - start with redis_store.pipeline() as p: if status in (200, 204): p.incr(REQUEST_SUCCESS_KEY) p.lpush(REQ_FINISH_TIME_KEY, now) else: p.incr(REQUEST_FAILURE_KEY) p.lpush(REQ_RESP_TIME_KEY, elapsed) p.execute() def url(self, path): assert self.access_token params = {\\"access_token\\": self.access_token} qs = urllib.urlencode(params) return \\"{}?{}\\".format(path, qs) if qs else path def _do_login(self, username, password): data = { \\"username\\": username, \\"password\\": password } response = self.request(\\"POST\\", \\"/login\\", data=data) if response[\\"status\\"] == 200: self.access_token = response[\\"data\\"][\\"access_token\\"] return True return False def login(self): user_id = redis_store.spop(USER_KEY) if not user_id: return False self.user_id = int(user_id) user = users[self.user_id] return self._do_login(user[\\"username\\"], user[\\"password\\"]) def get_foods(self): res = self.request(\\"GET\\", self.url(\\"/foods\\")) return res[\\"status\\"] == 200 def get_orders(self): res = self.request(\\"GET\\", self.url(\\"/orders\\")) return res[\\"status\\"] == 200 def create_cart(self): response = self.request(\\"POST\\", self.url(\\"/carts\\")) try: self.cart_id = response[\\"data\\"].get(\\"cart_id\\") except: return False return response[\\"status\\"] == 200 def cart_add_food(self): food = random.choice(foods) data = {\\"food_id\\": food[\\"id\\"], \\"count\\": 1} path = \\"/carts/{}\\".format(self.cart_id) res = self.request(\\"PATCH\\", self.url(path), data=data) return res[\\"status\\"] == 204 def make_order(self): chain = [self.login, self.get_foods, self.create_cart, self.cart_add_food, self.cart_add_food] for action in chain: if not action(): return False data = {\\"cart_id\\": self.cart_id} res = self.request(\\"POST\\", self.url(\\"/orders\\"), data=data) return res[\\"status\\"] == 200 def job(host, port): q = Query(host, port) start = time.time() try: ok = q.make_order() except: ok = False end = time.time() elapsed = end - start with redis_store.pipeline() as p: if ok: p.incr(SUCCESS_KEY) p.lpush(ORDER_FINISH_TIME_KEY, end) else: p.incr(FAILURE_KEY) p.lpush(ORDER_RESP_TIME_KEY, elapsed) p.execute() def progress(): try: prev = 0 while True: time.sleep(1) cur = get_value(SUCCESS_KEY) msg = \\"Orders Per Second: {:4d}/s\\".format(cur - prev) print(msg, end='') print('r' * len(msg), end='') prev = cur except KeyboardInterrupt: pass finally: print('n') def thread(host, port, threads, num): pool = ThreadPool(threads) for _ in range(num): pool.apply_async(job, (host, port)) time.sleep(0.001) pool.close() pool.join() def divide(n, m): \\"\\"\\"Divide integer n to m chunks \\"\\"\\" avg = int(n / m) remain = n - m * avg data = list(itertools.repeat(avg, m)) for i in range(len(data)): if not remain: break data[i] += 1 remain -= 1 return data def work(host, port, processes, threads, times): pool = Pool(processes, lambda: signal.signal(signal.SIGINT, signal.SIG_IGN)) p = Process(target=progress) p.daemon = True start = time.time() try: for chunk in divide(times, processes): pool.apply_async(thread, (host, port, threads, chunk)) p.start() pool.close() pool.join() p.terminate() p.join() except KeyboardInterrupt: pool.terminate() p.terminate() p.join() pool.join() return time.time() - start def get_value(key): v = redis_store.get(key) return 0 if v is None else int(v) def get_range(key): v = redis_store.lrange(key, 0, -1) return [float(i) for i in v] def safe_div(a, b): return a / b if b else 0 def get_avg(l): return safe_div(sum(l), float(len(l))) def report(processes, threads, total_time, total_order): success = get_value(SUCCESS_KEY) failure = get_value(FAILURE_KEY) req_success = get_value(REQUEST_SUCCESS_KEY) req_failure = get_value(REQUEST_FAILURE_KEY) req_resp_time = get_range(REQ_RESP_TIME_KEY) order_resp_time = get_range(ORDER_RESP_TIME_KEY) req_finish_time = get_range(REQ_FINISH_TIME_KEY) order_finish_time = get_range(ORDER_FINISH_TIME_KEY) assert len(order_resp_time) == success + failure assert len(req_resp_time) == req_success + req_failure req_avg = safe_div(sum(req_resp_time), float(req_success)) order_avg = safe_div(sum(order_resp_time), success) req_sec = collections.Counter(int(t) for t in req_finish_time) order_sec = collections.Counter(int(t) for t in order_finish_time) # remove the highest and lowest score stats_req_sec = sorted(req_sec.values())[1:-1] max_req_sec = int(get_avg(stats_req_sec[-5:])) min_req_sec = int(get_avg(stats_req_sec[:5])) mean_req_sec = int(get_avg(stats_req_sec)) # remove the highest and lowest score stats_order_sec = sorted(order_sec.values())[1:-1] max_order_sec = int(get_avg(stats_order_sec[-5:])) min_order_sec = int(get_avg(stats_order_sec[:5])) mean_order_sec = int(get_avg(stats_order_sec)) p = functools.partial(print, sep='') p(\\"Score: \\", max_order_sec) p(\\"Correct Rate: \\", round(success / total_order * 100, 2), \\"%\\") p(\\"nStats\\") p(\\"Concurrent Level: \\", processes, \\" x \\", threads) p(\\"Time taken for tests: \\", round(total_time * 1000, 2), \\"ms\\") p(\\"Complete requests: \\", req_success) p(\\"Failed requests: \\", req_failure) p(\\"Complete orders: \\", success) p(\\"Failed orders: \\", failure) p(\\"Time per request: \\", round(req_avg * 1000, 2), \\"ms\\", \\" (mean)\\") p(\\"Time per order: \\", round(order_avg * 1000, 2), \\"ms\\", \\" (mean)\\") p(\\"Request per second: \\", max_req_sec, \\" (max) \\", min_req_sec, \\" (min) \\", mean_req_sec, \\" (mean)\\") # noqa p(\\"Order per second: \\", max_order_sec, \\" (max) \\", min_order_sec, \\" (min) \\", mean_order_sec, \\" (mean)\\") # noqa p(\\"nPercentage of orders made within a certain time (ms)\\") order_resp_time = sorted(set(order_resp_time)) if order_resp_time else [0] l = len(order_resp_time) for e in (0.5, 0.75, 0.8, 0.9, 0.95, 0.98, 1): idx = int(l * e) idx = 0 if idx == 0 else idx - 1 p(\\" {:>4.0%} \\".format(e), int(math.ceil(order_resp_time[idx] * 1000))) def main(): parser = argparse.ArgumentParser() parser.add_argument(\\"-H\\", \\"--host\\", default=\\"localhost\\", help=\\"server host name\\") parser.add_argument(\\"-p\\", \\"--port\\", default=8080, type=int, help=\\"server port\\") parser.add_argument(\\"-c\\", \\"--processes\\", default=2, type=int, help=\\"processes\\") parser.add_argument(\\"-t\\", \\"--threads\\", default=4, type=int, help=\\"threads\\") parser.add_argument(\\"-n\\", \\"--num\\", default=10000, type=int, help=\\"requests\\") args = parser.parse_args() redis_store.delete( USER_KEY, SUCCESS_KEY, FAILURE_KEY, ORDER_RESP_TIME_KEY, REQ_RESP_TIME_KEY, REQUEST_SUCCESS_KEY, REQUEST_FAILURE_KEY, REQ_FINISH_TIME_KEY, ORDER_FINISH_TIME_KEY) load_users() load_foods() total_time = work( args.host, args.port, args.processes, args.threads, args.num) report(args.processes, args.threads, total_time, float(args.num)) if __name__ == \\"__main__\\": main()"},{"prompt":"Write a python script to generate a frequency distribution table from a given list of numbers. list_of_numbers = [2, 3, 5, 5, 6, 7, 8, 8, 9]","completion":"import collections def generate_frequency_distribution(num_list): freq_dict = collections.Counter(num_list) freq_dist_table = [] for val, freq in freq_dict.items(): freq_dist_table.append([val, freq]) return freq_dist_table print(generate_frequency_distribution(list_of_numbers)) # Output: # [[2, 1], [3, 1], [5, 2], [6, 1], [7, 1], [8, 2], [9, 1]]"},{"prompt":"Write a webscraping Python script to extract the daily weather forecast from a local newspaper's website. Not applicable","completion":"import requests import lxml.html # Fetch page url = 'http://www.example.com/weather' page = requests.get(url) # Parse page html = lxml.html.fromstring(page.content) # Extract data forecast_elements = html.xpath('//div[@id=\\"dailyForecast\\"]//tr') forecasts = [ { 'day': el.xpath('.//th[@scope=\\"row\\"]/text()')[0], 'high_temp': el.xpath('./td[1]/text()')[0], 'low_temp': el.xpath('./td[2]/text()')[0], 'weather': el.xpath('./td[3]/text()')[0], } for el in forecast_elements ] # Print results print(forecasts)"},{"prompt":"Build a machine learning model in Python to predict the price of a house using its size as the independent variable.","completion":"import pandas as pd from sklearn.linear_model import LinearRegression data = pd.read_csv('house_price-data.csv') X = data[['size']] y = data['price'] model = LinearRegression() model.fit(X, y)"},{"prompt":"Create a function to lexicographically compare two strings in Python.","completion":"def stringCompare(str1, str2): if str1 < str2: return -1 elif str1 > str2: return 1 else: return 0 str1 = \\"Hello\\" str2 = \\"World\\" result = stringCompare(str1, str2) if result == -1: print (\\"str1 is less than str2\\") elif result == 1: print (\\"str2 is less than str1\\") else: print (\\"str1 is equal to str2\\")"},{"prompt":"Write code in python to calculate the sum of every nth element of an array. array = [4, 5, 2, 9, 8, 6, 2, 3, 7, 1] n = 3","completion":"\\"\\"\\" Write code in python to calculate the sum of every nth element of an array. \\"\\"\\" # Function to calculate the sum of every nth element of an array. def sum_nth(array, n): # Initialize the result result = 0 # Iterate to increment the result i = 0 while i < len(array): result += array[i] i += n return result if __name__ == '__main__': array = [4, 5, 2, 9, 8, 6, 2, 3, 7, 1] n = 3 print(sum_nth(array, n)) # 18"},{"prompt":"Create a Python program to find all numbers in a range that are palindromes and have more than two digits. The range: [100, 500]","completion":"def palindromeInRange(start, end): for num in range(start, end + 1): rev = 0 n = num while num > 0: r = num % 10 rev = (rev * 10) + r num = num // 10 if rev == n and num > 10: print(n, end=\\" \\") start = 100 end = 500 palindromeInRange(start, end) Output: 101 111 121 131 141 151 161 171 181 191 202 212 222 232 242 252 262 272 282 292 303 313 323 333 343 353 363 373 383 393 404 414 424 434 444 454 464 474 484 494"},{"prompt":"Modify the following Python program to check whether a given string is a palindrome","completion":"def is_palindrome(str): str = str.replace(\\" \\", \\"\\") return str == str[::-1] while True: input_str = input(\\"Enter a string: \\") result = is_palindrome(input_str) if result: print(\\"{} is a palindrome\\".format(input_str)) else: print(\\"{} is not a palindrome\\".format(input_str)) ans = input(\\"Do you want to enter more strings (y/n)?\\") if ans == 'n': break"},{"prompt":"Create a robot using Python and the MyRobotLab library that performs a specific task. Task: Move the robot's arm to a point at (x = 10, y = 20)","completion":"from org.myrobotlab.service import Arduino from org.myrobotlab.service import Servo # Create serial connection to Arduino arduino = Arduino(\\"Arduino1\\", \\"COM6\\") # COM6 is the serial port # Connect servos to arduino baseServo = Servo(arduino, \\"baseServo\\") armServo = Servo(arduino, \\"armServo\\") # Move servos baseServo.moveTo(90) armServo.moveTo(180) # Move to a specific point baseServo.moveTo(10) armServo.moveTo(20)"},{"prompt":"Write a Python script to calculate the factorial of an integer. 6","completion":"def factorial(n): if n == 0: return 1 return n * factorial(n-1) num = 6 print(\\"Factorial of\\", num, \\"is\\", factorial(num))"},{"prompt":"Write code in Python to calculate the mean for a given list of numbers. [4, 17, 12, 78, 43, 13, 94, 77]","completion":"import numpy as np # given list of numbers list = [4, 17, 12, 78, 43, 13, 94, 77] # calculating mean mean = np.mean(list) # printing mean print(\\"Mean:\\", mean)"},{"prompt":"Calculate the greater of two numbers using Python. 5, 7","completion":"if (5 > 7): greater = 5 else: greater = 7 print(\\"The greater number is: \\", greater)"},{"prompt":"Write a Python script for sorting an array of numbers. [4, 2, 3, 5, 1]","completion":"arr = [4, 2, 3, 5, 1] arr.sort() print(arr)"},{"prompt":"Create a function in Python to calculate the total of all the characters in a given input string. string: 'Hello World!'","completion":"def char_total(string): total = 0 for char in string: total += ord(char) return total print(char_total('Hello World!')) # Output: 1116"},{"prompt":"Given input strings s1 and s2, write a python code that finds the longest common substring of s1 and s2? s1 = ABABC s2 = BABCA","completion":"def lcs(s1, s2): dp = [[0 for i in range(len(s2)+1)]for i in range(len(s1)+1)] res = \\"\\" maxLength = 0 for i in range(len(s1)+1): for j in range(len(s2)+1): if i == 0 or j == 0: dp[i][j] = 0 elif s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 if dp[i][j] > maxLength: res = s1[i-dp[i][j]:i] maxLength = len(res) else: dp[i][j] = 0 return res s1 = \\"ABABC\\" s2 = \\"BABCA\\" lcs_res = lcs(s1, s2) print(\\"Longest Common Substring:\\", lcs_res)"},{"prompt":"What would be the optimal package organization for a given python application? App Name: MyApp","completion":"''' Organize the package structure of MyApp ''' # Create the base package myapp_package = \\"myapp\\" # Create the sub modules sub_modules = [ \\"utils\\", \\"controllers\\", \\"models\\", \\"views\\", ] # Create the individual packages package_structure = [ myapp_package, *[myapp_package + \\".{}\\".format(module) for module in sub_modules], ] # Create the init files for pkg in package_structure: with open(pkg + \\"/__init__.py\\", \\"w\\") as f: pass"},{"prompt":"Generate a Python dictionary from a given list of strings. [Apple, Banana, Carrot]","completion":"# Create a dictionary from a list my_dict = {key: value for key, value in enumerate([\\"Apple\\", \\"Banana\\", \\"Carrot\\"])} # Print dictionary print(my_dict)"},{"prompt":"Write a Python program to modify a given dataset for a specific task. Dataset: { name: John, age: 20, height: 180 } Task: Filter the person's records if they are over the age of 18.","completion":"def modify_data(dataset, task): modified_data = [] if task == \\"filter age >18\\": for d in dataset: if d['age'] > 18: modified_data.append(d) return modified_data"},{"prompt":"Python, create an algorithm to find the k most frequent strings in a given list. list = [Cat, Dog, Bird, Bird, Bird, Fish]","completion":"from collections import Counter list = [\\"Cat\\", \\"Dog\\", \\"Bird\\", \\"Bird\\", \\"Bird\\", \\"Fish\\"] count = Counter(list) k = 3 mostFrequent = count.most_common(k) print(mostFrequent) # Output: [('Bird', 3), ('Cat', 1), ('Dog', 1)]"},{"prompt":"Develop a Python program that encrypts a given string using 'Caeser Cipher' string = 'Hello World'","completion":"def caesarCipherEncryptor(string, key): newLetters = [] newKey = key % 26 for letter in string: newLetters.append(getNewLetter(letter, newKey)) return ''.join(newLetters) def getNewLetter(letter, key): newLetterCode = ord(letter) + key return chr(newLetterCode) if newLetterCode <= 122 else chr(96 + newLetterCode % 122)"},{"prompt":"Write a Python function that takes a date as input and prints out the weekday for that date.","completion":"import datetime def get_weekday(date): day = datetime.datetime.strptime(date, \\"%Y-%m-%d\\").weekday() weekdays = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] return weekdays[day] result = get_weekday('2020-01-01') print(result)"},{"prompt":"Generate a Python class for a Person object with attributes for name, age, height, and weight. Not applicable","completion":"class Person: def __init__(self, name, age, height, weight): self.name = name self.age = age self.height = height self.weight = weight def get_info(self): return f'Name: {self.name}, Age: {self.age}, Height: {self.height}, Weight: {self.weight}'"},{"prompt":"Design a Random Forest classifier for commercial lending in Python.","completion":"from sklearn.ensemble import RandomForestClassifier # Create a random forest classifier clf = RandomForestClassifier(max_depth=5, random_state=0, n_estimators=100) # Train the classifier clf.fit(X_train, y_train) # Predict new values y_pred = clf.predict(X_test)"},{"prompt":"Use Python to build a model to predict the stock prices of a publicly traded company. Not applicable","completion":"# Importing the libraries import numpy as np import matplotlib.pyplot as plt import pandas as pd # Importing the dataset dataset = pd.read_csv('stock_prices.csv') # Preprocessing the data # Convert the date column to datetime dataset['date'] = pd.to_datetime(dataset['date']) # Select the feature columns and target column X = dataset.iloc[:, 1:-1].values y = dataset.iloc[:, -1].values # Splitting the dataset into the Training set and Test set from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # Fitting the model to the Training set # Importing the regressor from sklearn.svm import SVR # Create regressor object regressor = SVR(kernel='rbf') # Fit the regressor to the training dataset regressor.fit(X_train, y_train) # Predicting the Test set results y_pred = regressor.predict(X_test) # Calculate the RMSE (Root Mean Squared Error) from sklearn.metrics import mean_squared_error rmse = (mean_squared_error(y_test, y_pred)**0.5) # Print the RMSE print('Root Mean Squared Error =', rmse)"},{"prompt":"Optimize a Python program for calculating the sum of the first N numbers. n = 20","completion":"def get_sum(n): return (n*(n+1)) // 2 n = 20 sum_of_num = get_sum(n) print(\\"Sum of first\\", n, \\"numbers is\\", sum_of_num)"},{"prompt":"Write a Python class for Matrix which supports addition and multiplication of two matrix objects.","completion":"class Matrix(object): def __init__(self, m, n, data=0): self.m = m self.n = n self.data = data def __repr__(self): return \\"Matrix({}, {}, {})\\".format(self.m, self.n, self.data) def add(self, other): if not isinstance(other, Matrix) or (self.m != other.m) or (self.n != other.n): raise ValueError(\\"Incompatible shapes for addition\\") dataList = [[0] * self.n for size in range(self.m)] for x in range(self.m): for y in range(self.n): dataList[x][y] = self.data[x][y] + other.data[x][y] return Matrix(self.m, self.n, dataList) def mul(self, other): if not isinstance(other, Matrix) or (self.m != other.n): raise ValueError(\\"Incompatible shapes for multiplication\\") dataList = [[0] * other.n for size in range(self.m)] for x in range(self.m): for y in range(other.n): dataList[x][y] = sum(self.data[x][i] * other.data[i][y] for i in range(self.n)) return Matrix(self.m, other.n, dataList)"},{"prompt":"Write a function in Python which takes two parameters, a string and a single character, and returns a count of occurrence of the single character in the string. String = The quick brown fox Character = q","completion":"def countOccurrence(string, char): count = 0 for c in string: if c == char: count += 1 return count String = \\"The quick brown fox\\" Character = \\"q\\" count = countOccurrence(String, Character) print(count)"},{"prompt":"Create a Python class to represent a college student and its attributes.","completion":"class CollegeStudent: def __init__(self, name, age, major): self.name = name self.age = age self.major = major def get_name(self): return self.name def get_age(self): return self.age def get_major(self): return self.major"},{"prompt":"Write a Python function to pass a number as a parameter and generate a table of the given size. Number: 3","completion":"def generate_table(n): # Generates a table with n columns and rows for i in range(1, n+1): for j in range(1, n+1): print(i * j, end=\\"t\\") print() generate_table(3)"},{"prompt":"Design a python program to extract URLs from a website. url = 'http://example.com'","completion":"from bs4 import BeautifulSoup import requests page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') links = soup.select('a[href]') for link in links: print(link['href'])"},{"prompt":"This code is a Python class that defines a YoupornCom object, which is a plugin for a program called pyload. To use this plugin, create an instance of the YoupornCom class and call its process() method, passing in a pyfile object. The process() method will download the file specified by the pyfile object from Youporn.com if it exists. If the file does not exist, the method will call the offline() method. The YoupornCom class also has several helper methods, including download_html(), get_file_url(), get_file_name(), and file_exists().","completion":"# -*- coding: utf-8 -*- import re from module.plugins.Hoster import Hoster class YoupornCom(Hoster): __name__ = \\"YoupornCom\\" __type__ = \\"hoster\\" __pattern__ = r'http://(?:www.)?youporn.com/watch/.+' __version__ = \\"0.2\\" __description__ = \\"\\"\\"Youporn.com hoster plugin\\"\\"\\" __author_name__ = \\"willnix\\" __author_mail__ = \\"willnix@pyload.org\\" def process(self, pyfile): self.pyfile = pyfile if not self.file_exists(): self.offline() pyfile.name = self.get_file_name() self.download(self.get_file_url()) def download_html(self): url = self.pyfile.url self.html = self.load(url, post={\\"user_choice\\": \\"Enter\\"}, cookies=False) def get_file_url(self): \\"\\"\\" returns the absolute downloadable filepath \\"\\"\\" if not self.html: self.download_html() return re.search(r'(http://download.youporn.com/download/d+?save=1)\\">', self.html).group(1) def get_file_name(self): if not self.html: self.download_html() file_name_pattern = r\\"<title>(.*) - Free Porn Videos - YouPorn</title>\\" return re.search(file_name_pattern, self.html).group(1).replace(\\"&amp;\\", \\"&\\").replace(\\"/\\", \\"\\") + '.flv' def file_exists(self): \\"\\"\\" returns True or False \\"\\"\\" if not self.html: self.download_html() if re.search(r\\"(.*invalid video_id.*)\\", self.html) is not None: return False else: return True"},{"prompt":"Create a new Python module to validate input data against some desired conditions.","completion":"def check_validity(data): try: # Validation logic goes here return True except Exception as e: return False"},{"prompt":"Optimize the following code written in Python such that its time complexity becomes linear. def sum(arr): total = 0 for i in range(len(arr)): for j in range(i+1, len(arr)): total += arr[i] * arr[j] return total","completion":"def sum(arr): total = 0 for i in range(len(arr)): total += arr[i] * (sum(arr[i+1:]) - arr[i]) return total"},{"prompt":"Create a web application in Python to display current weather information for a given city. Paris, France","completion":"# import libraries import requests, json # api-endpoint url = \\"http://api.openweathermap.org/data/2.5/weather?q={city}&units=metric&APPID="},{"prompt":"The given code is a Python script that prompts the user for input to create a module description file. To use this script, run it in a terminal or command prompt. The script will ask for various information about the module, such as its name, version, description, author, repository URL, and license. It will also ask if the module is an executable and create necessary folders. Once all the information is provided, the script will write the module description file.","completion":"# Copyright 2014 ARM Limited # # Licensed under the Apache License, Version 2.0 # See LICENSE file for details. # standard library modules, , , from __future__ import print_function import os import logging import re # Component, , represents an installed component, internal from .lib import component # version, , represent versions and specifications, internal from .lib import version # validate, , validate various things, internal from .lib import validate Known_Licenses = { 'isc': 'https://spdx.org/licenses/ISC', 'apache-2.0': 'https://spdx.org/licenses/Apache-2.0', 'mit': 'https://spdx.org/licenses/MIT', 'bsd-3-clause': 'https://spdx.org/licenses/BSD-3-Clause' } Git_Repo_RE = re.compile(\\"^(git[+a-zA-Z-]*:.*|.*.git|.*git@.*github.com.*)\\") HG_Repo_RE = re.compile(\\"^(hg[+a-zA-Z-]*:.*|.*.hg)\\") SVN_Repo_RE = re.compile(\\"^svn[+a-zA-Z-]*:.*\\") def getUserInput(question, default=None, type_class=str): # python 2 + 3 compatibility try: global input input = raw_input except NameError: pass while True: default_descr = '' if default is not None: default_descr = ' <%s> ' % str(default) value = input(question + default_descr) if default is not None and not value: if type_class: return type_class(default) else: return default try: typed_value = type_class(value) break except: print('\\"%s\\" isn't a valid \\"%s\\" value' % (value, type_class.__name__)) return typed_value def yesNo(string): if string.strip().lower() in ('yes', 'y'): return True elif string.strip().lower() in ('no', 'n'): return False else: raise ValueError() yesNo.__name__ = \\"Yes/No\\" def repoObject(string): string = string.strip() if not string: return None elif Git_Repo_RE.match(string): repo_type = 'git' url = Git_Repo_RE.match(string).group(0) elif HG_Repo_RE.match(string): repo_type = 'hg' url = HG_Repo_RE.match(string).group(0) elif SVN_Repo_RE.match(string): repo_type = 'svn' url = SVN_Repo_RE.match(string).group(0) else: raise ValueError() return {'type':repo_type, 'url':url} def listOfWords(string): if isinstance(string, list): return string else: return list(filter(bool, re.split(\\",|s\\", string))) def addOptions(parser): pass def execCommand(args, following_args): cwd = os.getcwd() c = component.Component(cwd) if c: logging.info('The current directory already a contains a module: existing description will be modified') elif os.path.isfile(c.getDescriptionFile()): logging.error('A module description exists but could not be loaded:') logging.error(c.error) return 1 default_name = c.getName() if not default_name: default_name = validate.componentNameCoerced(os.path.split(cwd)[1]) c.setName(getUserInput(\\"Enter the module name:\\", default_name)) c.setVersion(getUserInput(\\"Enter the initial version:\\", str(c.getVersion() or \\"0.0.0\\"), version.Version)) def current(x): return c.description[x] if x in c.description else None c.description['description'] = getUserInput(\\"Short description: \\", current('description')) c.description['keywords'] = getUserInput(\\"Keywords: \\", ' '.join(current('keywords') or []), listOfWords) c.description['author'] = getUserInput(\\"Author: \\", current('author')) current_repo_url = current('repository') if isinstance(current_repo_url, dict): current_repo_url = current_repo_url['url'] new_repo_url = getUserInput(\\"Repository url: \\", current_repo_url, repoObject) if new_repo_url: c.description['repository'] = new_repo_url c.description['homepage'] = getUserInput(\\"Homepage: \\", current('homepage')) if not current('licenses') or current('license'): license = getUserInput('What is the license for this project (Apache-2.0, ISC, MIT etc.)? ', 'Apache-2.0') license_url = None if license.lower().strip() in Known_Licenses: license_url = Known_Licenses[license.lower().strip()] c.description['licenses'] = [{'type':license, 'url':license_url}] else: c.description['license'] = license c.description['dependencies'] = current('dependencies') or {} c.description['targetDependencies'] = current('targetDependencies') or {} isexe = getUserInput(\\"Is this module an executable?\\", \\"no\\", yesNo) if isexe: c.description['bin'] = './source' # Create folders while initing folders_to_create = [\\"./source\\", \\"./test\\", \\"./\\" + c.getName()] for folder_name in folders_to_create: if not os.path.exists(folder_name): os.mkdir(folder_name) c.writeDescription()"},{"prompt":"Develop a program in Python to find the largest number divisible by 3 from a given list. The list of numbers is [8, 5, 12, 15, 9].","completion":"def divisibleByThree(lst): result = 0 for num in lst: if (num % 3 == 0) and (num >= result): result = num return result lst = [8, 5, 12, 15, 9] print(divisibleByThree(lst)) # Output: 15"},{"prompt":"Design a Python program to remove duplicate characters from a given string.","completion":"def remove_duplicate_characters(string): new_string = '' new_string_set = set() for character in string: if character not in new_string_set: new_string += character new_string_set.add(character) return new_string"},{"prompt":"Generate a Python script that takes a number and returns a list of its factors.","completion":"def factors_list(n): # Create an empty list for factors factors = [] # Loop over all factors for i in range(1, n + 1): if n % i == 0: factors.append(i) return factors"},{"prompt":"Create a Python class with properties 'name' and 'age' which takes a parameter 'name' and sets it to the name property.","completion":"class Person: def __init__(self, name): self.name = name self.age = None"},{"prompt":"Create a line chart representing the given data in Python. x = [1, 2, 3, 4, 5] y = [2, 4, 6, 8, 10]","completion":"import matplotlib.pyplot as plt x = [1, 2, 3, 4, 5] y = [2, 4, 6, 8, 10] plt.plot(x, y) plt.title('Line Chart') plt.xlabel('X-Axis') plt.ylabel('Y-Axis') plt.show()"},{"prompt":"Create a function in Python that prints each element of a list one by one. list1 = [1,2,3,4,5]","completion":"def print_list(list1): for element in list1: print(element) list1 = [1,2,3,4,5] print_list(list1)"},{"prompt":"Create a program in Python to predict the sentiment of a phrase using a provided pretrained model. model_path = mymodel.model phrase = This is a great day","completion":"import numpy as np from keras.models import load_model # Load the model model = load_model(model_path) # Encode the phrase phrase_encoded = np.array([phrase]) # Make the prediction prediction = model.predict(phrase_encoded) # Print the result print(\\"The sentiment of the phrase is: {}\\".format(prediction))"},{"prompt":"Convert the following pseudo code into a Python Program. INPUT n OUTPUT Even OR Odd IF n is divisible by 2 OUTPUT Even ELSE OUTPUT Odd","completion":"n = int(input(\\"Enter a number: \\")) if n%2 == 0: print(\\"Even\\") else: print(\\"Odd\\")"},{"prompt":"Design a basic ticket reservation system using Python dictionaries.","completion":"# Create a dictionary to store ticket information tickets = {} # Function to book ticket def book_ticket(name, ticket_type, ticket_price): # Check if the ticket exists if ticket_type in tickets: tickets[ticket_type]['availability'] -= 1 tickets[ticket_type]['ticket_holders'].append(name) else: tickets[ticket_type] = { 'availability': 10 - 1, 'price': ticket_price, 'ticket_holders': [name] } # Function to cancel ticket def cancel_ticket(name, ticket_type): if ticket_type in tickets: tickets[ticket_type]['availability'] += 1 tickets[ticket_type]['ticket_holders'].remove(name)"},{"prompt":"Create a Python program to sort the list of colors in alphabetical order. [red, green, blue]","completion":"colors = [\\"red\\", \\"green\\", \\"blue\\"] #sorting in ascending order desc_colors = sorted(colors) print(\\"Colors in alphabetical order:\\", desc_colors)"},{"prompt":"Create a linear regression model in Python to predict the price of a taxi ride given the distance and time for the ride. distance: 10 miles time: 30 minute","completion":"import numpy as np import sklearn from sklearn.linear_model import LinearRegression # Create model model = LinearRegression() # Train model data = np.array([[10, 30], [20, 40], [30, 50], [40, 60], [50, 70]]) X = data[:, 0].reshape(-1, 1) y = data[:, 1].reshape(-1, 1) model.fit(X, y) # Predict price of taxi ride distance = 10 time = 30 price = model.predict([[distance, time]])[0][0] print(f'The predicted price of a {distance} miles, {time} minutes taxi ride is {price:.2f}')"},{"prompt":"Write a Python script to sort dictionaries as per the value. {a: 10, b: 3, c: 4, d: 1, e: 5}","completion":"dictionary = {\\"a\\": 10, \\"b\\": 3, \\"c\\": 4, \\"d\\": 1, \\"e\\": 5} sorted_dict = dict(sorted(dictionary.items(), key=lambda x: x[1],reverse = False)) print(\\"Sorting Dictionary as per the Value: \\") print(\\"The Original Dictionary : \\",dictionary) print(\\"The Sorted Dictionary : \\",sorted_dict)"},{"prompt":"Write a Python algorithm for determining if a string has all unique characters. abcde","completion":"# Algorithm for determining if a string has all unique characters # 1. Initialize an empty set s = set() # 2. Iterate through characters of the string for character in string: # 3. Check if character is in the set if character in set: # 4. Return False if character is in the set return False else: # 5. Add character to set if it is not in the set s.add(character) # 6. Return True return True"},{"prompt":"Generate a Python source code that calculates a student's grade average from the input data. [ {name: Alice, grades: [90, 92, 78]}, {name: Bob, grades: [86, 92, 82]} ]","completion":"# define a function to calculate average def get_average(grades): average = 0 for grade in grades: average += grade return average / len(grades) # get data from input students = [ {\\"name\\": \\"Alice\\", \\"grades\\": [90, 92, 78]}, {\\"name\\": \\"Bob\\", \\"grades\\": [86, 92, 82]} ] # calculate and print average for each student for student in students: name = student['name'] grades = student['grades'] average = get_average(grades) print(\\"{}'s average grade is {:.2f}\\".format(name, average))"},{"prompt":"Can you create a Python program that converts binary numbers to decimal numbers? binary_number = 1010","completion":"def binary_to_decimal(binary_number): decimal_number = 0 for digit in binary_number: decimal_number = decimal_number*2 + int(digit) return decimal_number binary_number = \\"1010\\" print(binary_to_decimal(binary_number)) # 10"},{"prompt":"Generate a function to create a Python dictionary from two lists. list_a = [1,2,3] list_b = ['apple','banana','mango']","completion":"def create_dict(a, b): dictionary = {} for i in range(len(a)): dictionary[a[i]] = b[i] return dictionary"},{"prompt":"Design a graphical user interface application in Python to display today's date in the format DD/MM/YYYY.","completion":"import datetime import tkinter root=tkinter.Tk() root.title(\\"Date\\") # gets current date today = datetime.datetime.now() # formats date date_string = today.strftime(\\"%d/%m/%Y\\") # creates label with date current_date_label=tkinter.Label(root, text=date_string, fg=\\"blue\\") # pack/add label to app current_date_label.pack() # run application root.mainloop()"},{"prompt":"Transform the JSON string below into a Python dictionary. {name: John, age: 30, city: New York}","completion":"import json data = '{\\"name\\": \\"John\\", \\"age\\": 30, \\"city\\": \\"New York\\"}' my_dict = json.loads(data)"},{"prompt":"Create a chatbot using Python which can respond to a user's query.","completion":"import random def chatbot_response(user_response): bot_response = '' if user_response == 'hello': bot_response = random.choice(['Hello!', 'Hi.', 'Hey there!']) elif user_response == 'how are you?': bot_response = 'I am doing well. How about you?' elif user_response == 'bye': bot_response = 'Bye! It was nice talking to you.' return bot_response # Main Program user_response = input(\\"User: \\") while user_response != 'bye': print(\\"Chatbot: \\" + chatbot_response(user_response)) user_response = input(\\"User: \\") if user_response == 'bye': print(\\"Chatbot: \\" + chatbot_response(user_response))"},{"prompt":"Can you design a Hyperparameter Optimization framework in Python that uses an evolutionary search strategy?","completion":"import numpy as np def generate_individual(parameter_bounds): # Generate a random individual within the given bounds individual = [] for i in range(len(parameter_bounds)): lower_bound, upper_bound = parameter_bounds[i] individual.append(np.random.uniform(lower_bound, upper_bound)) return individual def evaluate_individual(individual): # Evaluate the fitness of the individual score = 0 # Calculate the score, some function of parameters return score def generate_population(parameter_bounds, population_size): # Generate a population of random individuals population = [] for _ in range(population_size): population.append(generate_individual(parameter_bounds)) return population def mutation_operator(individual, mutate_prob): # Perform mutation on a single individual mutated_individual = individual for i in range(len(individual)): if np.random.rand() < mutate_prob: lower_bound, upper_bound = parameter_bounds[i] mutated_individual[i] = np.random.uniform(lower_bound, upper_bound) return mutated_individual def crossover_operator(parent_A, parent_B): # Perform crossover on a pair of parents # Uniformly select parameters from the two parents child_A = [0] * len(parent_A) child_B = [0] * len(parent_B) for i in range(len(parent_A)): if np.random.rand() < 0.5: child_A[i], child_B[i] = parent_A[i], parent_B[i] else: child_A[i], child_B[i] = parent_B[i], parent_A[i] return child_A, child_B def evolutionary_search(parameter_bounds, population_size, num_iterations, mutate_prob): # Initialize a population population = generate_population(parameter_bounds, population_size) # Iterate through the generations best_score = 0 best_individual = population[0] for _ in range(num_iterations): scores = [] for individual in population: scores.append(evaluate_individual(individual)) # Select the individuals for the mating pool sorted_indices = np.argsort(-np.array(scores)) population = np.array(population)[sorted_indices] best_score = scores[sorted_indices[0]] best_individual = population[0] # Replace the worst performers with mutants or crossovers new_population = [population[0]] population_index = 0 while len(new_population) < population_size: if np.random.rand() < 0.5: # Mutation mutant = mutation_operator(population[population_index], mutate_prob) new_population.append(mutant) else: # Crossover parent_A_index, parent_B_index = np.random.choice(population_size-1, 2, replace=False) child_A, child_B = crossover_operator(population[parent_A_index], population[parent_B_index]) new_population.append(child_A) new_population.append(child_B) population_index += 1 population = new_population return best_individual, best_score"},{"prompt":"Create a Python function to delete all data stored in a Python dictionary","completion":"def clear_dictionary(d): keys = list(d.keys()) for key in keys: del d[key]"},{"prompt":"This code is a DNS server that listens for queries and responds based on predefined rules. To use it, run the run function with input and output file objects. The input file should contain lines representing DNS queries in the format cmdtqnametqclasstqtypetidtremoteiptlocaliptednssubnetaddress. The output file will contain the server's responses in the format DATAtqnametqclasstqtypetttltidtdata. The server's behavior is controlled by defining match functions with specific conditions and return values. These functions should be decorated with the match decorator and added to the matches list. The server also defines several helper functions for constructing DNS responses and logging.","completion":"#!/usr/bin/env python from sys import exit, stdin, stderr, argv, stdout from inspect import stack from config import * import os import csv CONT=0 FINAL=1 default_ttl=60 loglevel=3 class istr(str): def __eq__(self, text): return str.__eq__(self.lower(), text.lower()) class qname(istr): def __new__(cls, value, *args, **kwargs): return istr.__new__(cls, value) def _domain_parts(self,request): return map(lambda x: istr(x), filter(lambda x: x!='', self.split('.'))) def _domain_parts_len(self,request): return len(domain_parts(request)) def _tld(self, count=2): return istr('.'.join(self.domain_parts[-count:])) def __init__(self, value, minlen=None, maxlen=None): self.domain_parts=self._domain_parts(value) self.domain_parts_count=len(self.domain_parts) self.tld=self._tld() def host_part(self, substring): try: if self.lower().index(substring+'.')==0: return True except ValueError: return False return False def is_subdomain(string, substring): try: return (string.lower().rindex('.'+substring)+len(substring)+1 == len(string)) except ValueError: return False return False def logd(level=loglevel, message=None, kwargs={}): if level>=loglevel: print(\\"LOGt%s(): %s\\" % (stack()[1][3],'; '.join([message,', '.join(map(lambda (k,v): \\"%s='%s'\\" % (k,v), kwargs.iteritems()))]))) def log(level=loglevel, message=None, **kwargs): if level>=loglevel: print( \\"LOGt%s(): %s\\" % ( stack()[1][3], '; '.join( [ message, ', '.join( map(lambda (k,v): \\"%s='%s'\\" % (k,v), kwargs.iteritems()) ) ] ) ) ) def MX(priority=0, data=None, ttl=default_ttl): if data: return { 'qtype': 'MX', 'data':\\"%st%s\\" % (priority, data), 'ttl': ttl } else: return {} def LOG(msg): pass def A(data=None, ttl=default_ttl): if data: return { 'qtype': 'A', 'data': data, 'ttl': ttl } else: return {} def match_domain(name, domain): if name[-len(domain):] == domain or name[-len(domain)-1:] == '.'+domain: return True return False matches=[] def match(host=None, fqdn=None, domain=None, dns_class=None, type=None, remote_ip=None, local_ip=None, cache=True): params=locals() def wrapper(f): matches.append([f, params]) return wrapper def represent(response): return \\"t\\".join([ 'DATA', response['qname'], response['qclass'], response['qtype'], str(response['ttl']), response['id'], response['data'] ]) def route(request): retval=[] if request['qname'] in skip_zones: retval.append(\\"LOGtqname '%s' is in skipped zones list, skipping\\" % request['qname']) return retval for f, conditions in matches: if (conditions['fqdn'] is None or conditions['fqdn'] == request['qname']) and (conditions['domain'] is None or match_domain(request['qname'], conditions['domain'])) and (conditions['type'] is None or conditions['type'] == request['qtype'] or request['qtype'] == 'ANY') and (conditions['dns_class'] is None or conditions['dns_class'] == request['qclass']) and (conditions['remote_ip'] is None or conditions['remote_ip'] == request['remote-ip']) and (conditions['local_ip'] is None or conditions['local_ip'] == request['local-ip']): returned=f(request) if returned: if returned[1]: if type(returned[1]) is list: for item in returned[1]: retval.append( represent( dict(request.items() + item.items()) ) ) else: retval.append( represent( dict(request.items() + returned[1].items()) ) ) if returned[0] == FINAL: break return retval def run(f_in=stdin, f_out=stdout): line = f_in.readline().strip() if not line.startswith('HELO'): print >>f_out, 'FAIL' f_out.flush() f_in.readline() else: print >>f_out, \\"OKtapp firing up\\" f_out.flush() while True: line = f_in.readline().strip() if not line: break #request = line.split('t') request = dict( zip( ['cmd','qname','qclass','qtype','id','remote-ip','local-ip','edns-subnet-address'], line.split('t') ) ) request['qname']=qname(request['qname']) #request['id']=1 #logd(3, 'Processing request', request) if request['cmd'] == 'Q': if request['qname'] != '': datas=route(request) if datas: print >>f_out, \\"n\\".join(datas) #print >>f_out, \\"LOGt\\"+\\"nLOGt\\".join(datas) print >>f_out, \\"END\\" f_out.flush() elif request['cmd'] == 'PING': print >>f_out, \\"LOGtPONG\\" f_out.flush() continue elif request['cmd'] == 'HELO': print >>f_out, \\"OKtrunning\\" f_out.flush() continue elif request['cmd'] == 'AXFR': print >>f_out, \\"END\\" f_out.flush() continue else: print >>f_out, \\"LOGtUnprocessed\\" def acme_b64encode(acme_challenge): return acme_challenge.replace('_','_u').replace('-','_h') def acme_b64decode(acme_challenge): return acme_challenge.replace('_h','-').replace('_u','_')"},{"prompt":"Write a Python program to implement Linear Search for an array of numbers arr = [2, 3, 5, 7, 11] n = 11","completion":"def LinearSearch(arr, n): for i in range(len(arr)): if arr[i] == n: return i return -1 index = LinearSearch(arr, n) print(index)"},{"prompt":"mplement a Python program to recursively reverse a string. String: Pytho","completion":"def reverse(string): if len(string) == 0: return string else: return reverse(string[1:]) + string[0] # Driver code string = \\"Python\\" print (reverse(string))"},{"prompt":"Modify the following code to make it more Pythonic. list1 = [1, 2, 3, 4] list2 = [5, 6, 7, 8] result = [] for i in range(len(list1)): result.append(list1[i] * list2[i])","completion":"list1 = [1, 2, 3, 4] list2 = [5, 6, 7, 8] result = [x * y for x, y in zip(list1, list2)]"},{"prompt":"Optimize this Python program for better efficiency. def add_two_lists(l1, l2): res = [] for i in range(len(l1)): res.append(l1[i] + l2[i]) return re","completion":"def add_two_lists(l1, l2): return [x + y for x, y in zip(l1, l2)]"},{"prompt":"Generate a python code to fit a regression line","completion":"import numpy as np from sklearn.linear_model import LinearRegression def line_fit(x, y): x = np.array(x).reshape((-1, 1)) y = np.array(y).reshape((-1, 1)) reg = LinearRegression().fit(x, y) return reg.coef_[0][0], reg.intercept_[0]"},{"prompt":"Create a Python program to capture the data from a web page. https://www.example.com/","completion":"import requests import lxml.html as lh url = 'https://www.example.com/' page = requests.get(url) doc = lh.fromstring(page.content) # parse and extract data from webpage data = doc.xpath('//p/text()')"},{"prompt":"Write a Python program to sort a list in ascending order with respect to a particular key. lst = [{‘name’:’joe’, ‘score’:90}, {‘name’:’bob’, ‘score’:50}, {‘name’:’alice’, ‘score’:80}] key = 'score'","completion":"sorted_lst = sorted(lst, key=lambda x: x[key])"},{"prompt":"Port a Python code snippet to Java. def add(a, b): return a + b","completion":"public class Add { public static int add(int a, int b) { return a + b; } }"},{"prompt":"Generate a list of integers in Python with no duplicates.","completion":"def generate_unique_list(n): res = [] for i in range(n): res.append(random.randint(1, n)) # ensure no duplicates occur while len(res) != len(set(res)): res.pop() res.append(random.randint(1, n)) return res"},{"prompt":"Write a Python program to convert a given string to an encrypted version of the string. Hello, World!","completion":"import hashlib def encrypt_string(text): result = hashlib.sha256(text.encode()).hexdigest() return result encrypted_string = encrypt_string(\\"Hello, World!\\") print(encrypted_string)"},{"prompt":"Find the most common letter in a string and write a Python program to count its occurrences. abbabbccabbc","completion":"from collections import Counter def findMostCommonLetter(s): letters = Counter(s) most_common = letters.most_common(1) return most_common[0][0] def countOccurences(s, c): cnt = 0 for letter in s: if letter == c: cnt += 1 return cnt most_common = findMostCommonLetter(\\"abbabbccabbc\\") occ = countOccurences(\\"abbabbccabbc\\", most_common) print(\\"Most common letter: \\" + most_common) print(\\"Occurrences: \\" + str(occ))"},{"prompt":"Create a class called GoalTime that inherits from the Goal class. The class should have an __init__ method that takes in three arguments: maximise (a boolean that defaults to True), current_val (an integer that defaults to 0), and target_val (an integer that defaults to 0). The class should also have a check_for_success method that returns True if current_val is less than or equal to target_val when maximise is False, or if current_val is greater than or equal to target_val when maximise is True. Additionally, the class should have a run_plan method that takes in a strategy dictionary and prints TODO running strategy : followed by the name of the strategy. Finally, the class should have a find_best_plan method that loops through the strategy list and calls the run_plan method for each strategy.","completion":"#!/usr/bin/python3 # -*- coding: utf-8 -*- # cls_goal_time.py from aikif.lib.cls_goal import Goal class GoalTime(Goal): \\"\\"\\" goals around time - eg maximise use of object / minimize time of task \\"\\"\\" def __init__(self, maximise=True, current_val=0, target_val=0): \\"\\"\\" set maximise = True for class to find maximum time (usage) or set to False to minimise the amount of time (eg reduce task time) \\"\\"\\" self.current_val = current_val self.target_val = target_val self.maximise = maximise self.strategy = [ {'name':'Travel_walk', 'speed':1, 'max_km_day':30, 'dest_flexibility':100, 'money_cost':0, 'environ_cost':0}, {'name':'Travel_bike', 'speed':5, 'max_km_day':200, 'dest_flexibility':50, 'money_cost':0, 'environ_cost':0}, {'name':'Travel_car', 'speed':60, 'max_km_day':1500, 'dest_flexibility':30, 'money_cost':50, 'environ_cost':50}, {'name':'Travel_bus', 'speed':60, 'max_km_day':1500, 'dest_flexibility':20, 'money_cost':10, 'environ_cost':15} ] def check_for_success(self): if self.maximise: if self.current_val > self.target_val: return False else: return True else: if self.current_val <= self.target_val: return False else: return True def run_plan(self, strategy): \\"\\"\\" executes a plan by running the passed strategy and then updates the local results \\"\\"\\" print (\\"TODO running strategy : \\" + strategy['name'] ) def find_best_plan(self): \\"\\"\\" try each strategy with different amounts \\"\\"\\" for strat in self.strategy: self.run_plan(strat)"},{"prompt":"Design a sorting algorithm in Python which uses the quick sort algorithm. An array of integer","completion":"def quick_sort(array): # base case if len(array) < 2: return array # select pivot pivot = array[-1] # split array left = [i for i in array[:-1] if i <= pivot] right = [i for i in array[:-1] if i > pivot] # call quick sort on left and right subarrays return quick_sort(left) + [pivot] + quick_sort(right) # Driver code arr = [7, 3, 8, 4, 10, 1] # Array after sorting print(quick_sort(arr))"},{"prompt":"Write a Python program to optimize a given set of equations using gradient descent. Equations:[(x**2) + 2x + 5, (2x**2) + 4x + 1] Function: Minimize f(x)= x**2 + 2x + 5 + 2x**2 + 4x + 1","completion":"import numpy as np # define the function def f(x): return x**2 + 2*x + 5 + 2*x**2 + 4*x + 1 # define the gradient def grad_f(x): return 2*x + 2 + 4*x + 4 # define the learning rate (eta) eta = 0.01 # define the number of times we need to loop n_iterations = 15 # define the initial value for x x = 0 # loop and print for i in range(n_iterations): x_next = x - eta * grad_f(x) x = x_next print(x, f(x))"},{"prompt":"Write a Python program to visualize a given dataset in a 2D scatterplot. x_data = {1,2,3,4,5,6,7,8,9,10} y_data = {3,4,7,8,10,12,14,16,18,19}","completion":"import matplotlib.pyplot as plt def visualize_data(x_data, y_data): plt.scatter(x_data, y_data) plt.xlabel('x data') plt.ylabel('y data') plt.title('2D Scatterplot') plt.show()"},{"prompt":"Design a python program that stores data associated to each user as a dictionary.","completion":"users = {} def addUser(name, details): users[name] = details def getUser(name): return users[name] # Add new user addUser('John', {'age': 25, 'email': 'john@example.com'}) # Get user details user_details = getUser('John') print('Age: ', user_details['age']) print('Email: ', user_details['email'])"},{"prompt":"Create a Python function to calculate the sum of two numbers given as inputs. 5, 6","completion":"def calculateSum(a, b): return a + b sum = calculateSum(5, 6) print(sum)"},{"prompt":"Generate a Python program to calculate the sum from 0 to 10. Not applicable","completion":"def calculate_sum(n): sum_total = 0 for i in range(n+1): sum_total += i return sum_total print(calculate_sum(10)) # Output: 55"},{"prompt":"Develop an algorithm in Python for solving the knapsack problem using dynamic programming.","completion":"# A utility function that returns # maximum of two integers def max(a, b): return a if (a > b) else b # Returns the maximum value that # can be put in a knapsack of capacity W def knapSack(W, wt, val, n): # Base Case if n == 0 or W == 0 : return 0 # If weight of the nth item is more # than Knapsack of capacity W, then # this item cannot be included in the optimal solution if (wt[n-1] > W): return knapSack(W, wt, val, n-1) # return the maximum of two cases: # (1) nth item included # (2) not included else: return max(val[n-1] + knapSack(W-wt[n-1], wt, val, n-1), knapSack(W, wt, val, n-1))"},{"prompt":"Write a Python program to generate a dictionary that holds the count of each character present in a given string. Programming","completion":"def char_count(str): result = {} for char in str: if char in result: result[char] += 1 else: result[char] = 1 return result result = char_count(\\"Programming\\") print(result)"},{"prompt":"Write a code snippet in Python to split a string by its whitespaces. string = This is a sample string","completion":"string = \\"This is a sample string\\" str_list = string.split() print(str_list)"},{"prompt":"Optimize a selection sort algorithm to sort numbers in ascending order using Python. [3, 42, 1, 9, 20]","completion":"def selection_sort(array): for i in range(len(array)): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, len(array)): if array[min_idx] > array[j]: min_idx = j # Swap the found minimum element with # the first element array[i], array[min_idx] = array[min_idx], array[i] # Driver code to test above arr = [3, 42, 1, 9, 20] selection_sort(arr) print(\\"Sorted Array: \\", end=\\"n\\") print(arr)"},{"prompt":"Generate a python program to apply bubble sort to an array","completion":"def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j]"},{"prompt":"mplement a Heap data structure in Python.","completion":"class Heap: '''A Heap is a specialized tree-based data structure.''' # Constructor to initialize a Heap def __init__(self): self.heap_array = [] def get_parent_index(self, index): return (index - 1)//2 def get_left_child_index(self, index): return (2*index) + 1 def get_right_child_index(self, index): return (2*index) + 2 def has_parent(self, index): if self.get_parent_index(index) >= 0: return True else: return False def has_left_child(self, index): if self.get_left_child_index(index) <= len(self.heap_array) - 1: return True else: return False def has_right_child(self, index): if self.get_right_child_index(index) <= len(self.heap_array) - 1: return True else: return False def get_parent(self, index): return self.heap_array[self.get_parent_index(index)] def get_left_child(self, index): return self.heap_array[self.get_left_child_index(index)] def get_right_child(self, index): return self.heap_array[self.get_right_child_index(index)] def insert(self, element): self.heap_array.append(element) self.sift_up() def sift_up(self): index = len(self.heap_array) - 1 while self.has_parent(index) and self.heap_array[index] > self.get_parent(index): self.heap_array[index], self.heap_array[self.get_parent_index(index)] = self.heap_array[self.get_parent_index(index)], self.heap_array[index] index = self.get_parent_index(index) def delete(self, index): last_element = self.heap_array[len(self.heap_array) - 1] self.heap_array[index] = last_element self.sift_down(index) def sift_down(self, index): while self.has_left_child(index): min_index = self.get_left_child_index(index) if self.has_right_child(index) and self.get_right_child(index) > self.get_left_child(index): min_index = self.get_right_child_index(index) if self.heap_array[index] > self.heap_array[min_index]: break self.heap_array[index], self.heap_array[min_index] = self.heap_array[min_index], self.heap_array[index] index = min_index"},{"prompt":"Create a class in Python containing attributes, methods and constructors","completion":"class MyClass: def __init__(self, attr1, attr2): self.attr1 = attr1 self.attr2 = attr2 def my_method(self): # Do something pass"},{"prompt":"Write a Python program to sort a dictionary based on its values. Dictionary: {'Apple':1, 'Strawberry':4, 'Banana':3, 'Grapes':2}","completion":"my_dict = {'Apple':1, 'Strawberry':4, 'Banana':3, 'Grapes':2} sorted_dict = {k: v for k, v in sorted(my_dict.items(), key=lambda item: item[1])} print(sorted_dict) # Output: {'Apple': 1, 'Grapes': 2, 'Banana': 3, 'Strawberry': 4}"},{"prompt":"Develop a Python program to print the digits of a given integer in reverse order. 123","completion":"\\"\\"\\" Python script to print the digits of a given integer in reverse order \\"\\"\\" num = int(input('Enter an integer: ')) # Initializing the variable to hold the reversed digits reverse = 0 while (num > 0): # Extracting the last digit remainder = num % 10 # Multiplying the reverse variable by 10 and adding the remainder reverse = (reverse * 10) + remainder # Removing the last digit of the original number num = num // 10 # printing the reversed digits print(reverse)"},{"prompt":"Write a proper openended text classification model in Python.","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import BernoulliNB # preprocess and load the data data = pd.read_csv('Dataset.csv') X = data['text'] y = data['label'] vectorizer = CountVectorizer(binary= True) X = vectorizer.fit_transform(X) # Split the data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size= 0.3) # Train the model model = BernoulliNB() model.fit(X_train, y_train) # Evaluate the model accuracy = model.score(X_test, y_test) print('Accuracy:', accuracy)"},{"prompt":"Fill the given syntax tree to generate a valid python code def initial_value = 0","completion":"def initial_value(): return 0"},{"prompt":"Create a Python script that scrapes a Wikipedia page for bodyweight exercises and generates markdown files for each exercise, variant, and muscle group. The generated files should be saved in the appropriate directories and include metadata such as title, description, and tags. The script should also replace certain words in the exercise names for consistency.","completion":"#!/usr/bin/env python # coding: utf-8 import os import re import requests from datetime import datetime from bs4 import BeautifulSoup from logya.core import Logya from logya.path import slugify, target_file from logya.writer import encode_content, write logya = Logya() logya.init_env() url = 'https://en.wikipedia.org/wiki/Bodyweight_exercise' html = requests.get(url).text soup = BeautifulSoup(html, 'lxml') replacements = { 'bams': 'bam', 'bodybuilders': 'bodybuilder', 'boots': 'boot', 'chairs': 'chair', 'climbers': 'climber', 'crosses': 'cross', 'curls': 'curl', 'darlings': 'darling', 'dips': 'dip', 'dogs': 'dog', 'extensions': 'extension', 'humpers': 'humper', 'ins': 'in', 'kicks': 'kick', 'knives': 'knife', 'lifts': 'lift', 'little piggies': '3 little pigs', 'lunges': 'lunge', 'maybes': 'maybe', 'mikes': 'mike', 'mornings': 'morning', 'offs': 'off', 'plunges': 'plunge', 'push exercises': 'push', 'raises': 'raise', 'rotations': 'rotation', 'scissors': 'scissor', 'spidermans': 'spiderman', 'supermans': 'superman', 'swimmers': 'swimmer', 'squats': 'squat', 'ups': 'up' } resources = ' Resourcesnn* [Wikipedia: Bodyweight exercise]({})'.format(url) def canonical_name(name): name = name.strip().lower() if name.startswith('full body'): return '' for source, target in replacements.items(): name = re.sub(r'b{}b'.format(source), target, name) return name.title() def clean_text(text): return text.replace('[citation needed]', '').strip() # Only interested in TOC numbers 4 to 8. tocnumbers = range(4, 9) toc1_items = soup.find(id='toc').find_all(class_='toclevel-1') groups = [i for i in toc1_items if int(i.find('a').find(class_='tocnumber').text) in tocnumbers] assert len(groups) == len(tocnumbers) # Assemble exercise documents for group in groups: group_name = group.find('a').find(class_='toctext').text.strip() for item in group.find('ul').find_all('a'): href = item.attrs['href'] heading = soup.find(id=href.lstrip('#')).parent name = canonical_name(item.find(class_='toctext').text) groups = [canonical_name(group_name)] body = [] variants = [] muscles = [] for sibling in heading.find_next_siblings(): if sibling.name == 'p': body.append(clean_text(sibling.text)) elif sibling.name == 'dl': dth = sibling.find('dt').text.strip().lower() if dth == 'common variants': variants = list(filter(None, [canonical_name(i.text) for i in sibling.find_all('dd') if i.text != 'none'])) elif dth == 'muscle groups': muscles = list(filter(None, [canonical_name(i.text) for i in sibling.find_all('dd')])) elif sibling.name == 'h3': break if body: body.append(resources) doc = { 'created': datetime.now(), 'description': body[0].split('. ')[0] + '.', 'groups': groups, 'muscles': muscles, 'template': 'exercise.html', 'title': name, 'variants': variants } # Files shall be saved as md files, so calling write_content directly # is not possible as it would save as html. filename = target_file(logya.dir_content, '/exercise/{}.md'.format(slugify(name))) if not os.path.exists(filename): write(filename, encode_content(doc, 'nn'.join(body))) # Create stub files for variants for variant in variants: filename = target_file(logya.dir_content, '/exercise/{}.md'.format(slugify(variant))) if not os.path.exists(filename): ex_variants = list(set(variants).union(set([name])).difference(set([variant]))) doc = { 'created': datetime.now(), 'description': '', 'groups': groups, 'muscles': muscles, 'template': 'exercise.html', 'title': variant, 'variants': ex_variants } write(filename, encode_content(doc, '')) # Create stub files for muscles for muscle in muscles: filename = target_file(logya.dir_content, '/muscle/{}.md'.format(slugify(muscle))) if not os.path.exists(filename): doc = { 'created': datetime.now(), 'description': '', 'template': 'muscle.html', 'title': muscle } write(filename, encode_content(doc, ''))"},{"prompt":"Write Python code to find the most common element in a given array. [8, 5, 5, 9, 8, 6, 5]","completion":"def findCommonElement(arr): frequency = {} for i in arr: if i not in frequency: frequency[i] = 1 else: frequency[i] += 1 maxCount = 0 maxCountElement = None for key, value in frequency.items(): if value > maxCount: maxCount = value maxCountElement = key return maxCountElement arr = [8, 5, 5, 9, 8, 6, 5] result = findCommonElement(arr) print(result) # Output: 5"},{"prompt":"Create a Python dictionary with the given list of keys and values. keys: [chair, table, sofa] values: [4, 2, 5]","completion":"dict = { 'chair': 4, 'table': 2, 'sofa': 5 }"},{"prompt":"Create a Python program to compare two strings and determine which one is longer.","completion":"def compare_string_length(str1, str2): if len(str1) > len(str2): return str1 else: return str2"},{"prompt":"Code an algorithm in Python to solve the following: Find the two largest numbers in a set of numbers.","completion":"def findLargest(nums): largest1 = float('-inf') largest2 = float('-inf') for num in nums: if num > largest2: if num > largest1: largest2 = largest1 largest1 = num else: largest2 = num return largest1, largest2 findLargest([1, 5, 2, 9, 6, 8]) // 9,8"},{"prompt":"Design a system in Python to classify different types of programming languages. language = Java","completion":"def classify_languages(language): language_list = [\\"Python\\", \\"Java\\", \\"C\\", \\"C++\\", \\"JavaScript\\"] language_type = { \\"Python\\": \\"High-level programming language\\", \\"Java\\": \\"High-level programming language\\", \\"C\\": \\"Low-level language\\", \\"C++\\": \\"High-level language\\", \\"JavaScript\\": \\"High-level language\\" } if language in language_list: return language_type[language] else: return \\"Unknown language\\""},{"prompt":"Generate a Python program to reverse the order of every letter in a sentence. Not applicable","completion":"def reverseLetterOrder(string): reversed = '' for char in string: reversed = char + reversed return reversed print(reverseLetterOrder('The quick brown fox jumps over the lazy dog')) # returns \\"god yzal eht revo spmuj xof nworb kciuq ehT\\""},{"prompt":"Create a webscraping function in Python to extract the text content from any website. Not applicable","completion":"import requests from bs4 import BeautifulSoup def scrape_text(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') texts = soup.find_all(text=True) return ' '.join(texts) scraped_text = scrape_text('https://example.com') print(scraped_text)"},{"prompt":"Design a program in Python that uses a dictionary to count the number of words in a given string.","completion":"def count_words(string): words = {} for word in string.split(): if word in words: words[word] += 1 else: words[word] = 1 return words"},{"prompt":"Create a machine learning model in Python that can classify a sentence as part of a conversation or not. Input: [ 'Hi, how are you?', 'This is the latest news.' ]","completion":"def classify_sentence(sentence): # Pre-process the sentence tokens = tokenize_sentence(sentence) # Embed the sentence embedding = embed_tokens(tokens) # Use a ML model to classify prediction = ml_model.predict(embedding) # Return label if prediction == 0: return 'conversation' else: return 'not conversation'"},{"prompt":"Write a Python program to find the sum of all numbers in a nested list","completion":"def sum_nested_list(lst): total = 0 for i in lst: if isinstance(i,list): total += sum_nested_list(i) else: total += i return total"},{"prompt":"Can you write a Python code to print numbers from 1 to 10?","completion":"for num in range(1, 11): print(num)"},{"prompt":"Develop a Python program to implement an LRU cache in a system. Not applicable","completion":"# Hash table class class Hash: def __init__(self, capacity): self.capacity = capacity self.data = {} # returns true if there is a # key present in the hash def contains(self, key): return key in self.data # returns the value of a # given key in the hash def get(self, key): return self.data.get(key, -1) # inserts the given key value # pair in the hash def set(self, key, value): if len(self.data) >= self.capacity: self.removeLRU() self.data[key] = value # removes the least recently # used entry from the hash def removeLRU(self): minkey = None for key in self.data: if minkey is None: minkey = key elif self.data[key] < self.data[minkey]: minkey = key self.data.pop(minkey) # LRU Cache class class LRUCache: # initializes class def __init__(self, capacity): self.capacity = capacity self.hash = Hash(capacity) self.timestamp = 0 # Given a key, returns value # from cache if key is present # else returns -1 def get(self, key): if self.hash.contains(key): value = self.hash.get(key) self.timestamp += 1 self.hash.set(key, (self.timestamp, value)) return value return -1 # sets the key value pair in the cache def set(self, key, value): if self.capacity == 0: return self.timestamp += 1 self.hash.set(key, (self.timestamp, value))"},{"prompt":"Calculate the square root of 68 using Python.","completion":"import math # Calculate the square root of 68 sqrt_num = math.sqrt(68) # Print the result print(\\"The square root of 68 is:\\", sqrt_num)"},{"prompt":"Write a Python function to add two given numbers stored in two dictionaries with the same keys. nums1 = {'a': 2, 'b': 4} nums2 = {'a': 5, 'b': 8}","completion":"def add_dict_nums(nums1, nums2): result = dict() for key in nums1.keys(): result[key] = nums1[key] + nums2[key] return result print(add_dict_nums(nums1, nums2))"},{"prompt":"Create a Python program to parse an XML document and output a JSON. <books> <book title=Harry Potter author=J.K. Rowling /> <book title=Pride and Prejudice author=Jane Austen /> </books>","completion":"import json import xml.etree.ElementTree as ET root = ET.fromstring('<books><book title=\\"Harry Potter\\" author=\\"J.K. Rowling\\" /><book title=\\"Pride and Prejudice\\" author=\\"Jane Austen\\" /></books>') data = [] for book in root: data.append({ 'title': book.attrib['title'], 'author': book.attrib['author'], }) json_data = json.dumps(data) print(json_data) # Output: [ {\\"title\\": \\"Harry Potter\\", \\"author\\": \\"J.K. Rowling\\"}, {\\"title\\": \\"Pride and Prejudice\\", \\"author\\": \\"Jane Austen\\"} ]"},{"prompt":"Create a web crawler in Python that takes a given URL and prints out a list of links. https://www.example.com","completion":"from bs4 import BeautifulSoup import requests url = 'https://www.example.com' response = requests.get(url) soup = BeautifulSoup(response.text, 'lxml') for link in soup.find_all('a'): print(link.get('href'))"},{"prompt":"Create code to generate a Fibonacci sequence in Python.","completion":"def Fibonacci(n): a, b = 0, 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for _ in range(2,n): c = a + b a = b b = c return b"},{"prompt":"Write a Python program that takes two sets of strings and creates a list of strings that are present in both.","completion":"def find_common(set_a, set_b): return [item for item in set_a if item in set_b]"},{"prompt":"Create a Python program to generate random numbers within a given interval.","completion":"import random # Function to generate random numbers def random_number(start, end): return random.randint(start, end) # Driver code start = 1 end = 10 print(random_number(start, end))"},{"prompt":"Generate a random 6 character string in Python","completion":"import string import random characters = string.ascii_lowercase + string.digits + string.ascii_uppercase password = \\"\\".join(random.choice(characters) for x in range(6)) print(password)"},{"prompt":"Write Python code to print the fibonnaci sequence up to the given number. Input: 10","completion":"\\"\\"\\" Print the Fibonacci sequence up to the given number \\"\\"\\" def fibonacci(n): # Base case if n == 0 or n == 1: return n # Recursive case return fibonacci(n-1) + fibonacci(n-2) # Print the Fibonacci sequence up to the given number n = 10 for i in range(n + 1): print(fibonacci(i))"},{"prompt":"Create an expression parser in Python to evaluate basic mathematical expressions.","completion":"# Assume input is a valid mathematical expression with no syntax errors def expression_parser(expression): tokens = expression.split() stack = [] for token in tokens: if token == '+' or token == '*' or token == '/': a = stack.pop() b = stack.pop() if token == '+': c = b + a elif token == '*': c = b * a else: c = b / a stack.append(c) else: stack.append(int(token)) return stack.pop()"},{"prompt":"mplement a sorting algorithm in Python to sort an array of integers.","completion":"def sort_array(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j]"},{"prompt":"Write a Python script to generate a random linear sequence.","completion":"import random # generate the sequence sequence_length = 10 sequence = [] for i in range(sequence_length): sequence.append(random.randint(1, 10)) print(sequence)"},{"prompt":"Create a Python program to find the largest number in a given list. [3, 6, 4, 8, 1]","completion":"def largestNumber(list): max_num = 0 for i in list: if i > max_num: max_num = i return max_num list = [3, 6, 4, 8, 1] largestNumber = largestNumber(list) print(\\"Largest element in the list is: \\", largestNumber);"},{"prompt":"Create a web scraper in Python using BeautifulSoup that extracts information about all the movies on IMDb in a specified year. Year: 2020","completion":"import requests from bs4 import BeautifulSoup def get_movie_info(year): url = f'https://www.imdb.com/search/title/?title_type=feature&release_date={year}-01-01,{year}-12-31' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') movie_containers = soup.find_all('div', class_ = 'lister-item mode-advanced') movie_list = [] for container in movie_containers: movie_data = {} movie_data['title'] = container.h3.a.text movie_data['year'] = container.h3.find('span', class_ = 'lister-item-year').text movie_data['genre'] = container.p.find('span', class_ = 'genre').text.strip() movie_data['rating'] = float(container.strong.text) movie_list.append(movie_data) return movie_list # Usage example movies = get_movie_info(2020) print(movies)"},{"prompt":"Generate a python program to create a Pandas DataFrame using the following input data. Input: data = {'Country':[United States, France, China], 'Population': [330, 67, 13]}","completion":"import pandas as pd # Create the data frame data_frame = pd.DataFrame(data) # Print the data frame print(data_frame)"},{"prompt":"Design a Python application that takes a spell checker as input and outputs the corrected version of the text. Spell Checker Input: The qick brown fox jumps over the layy dog","completion":"import requests spell_checker_input = \\"The qick brown fox jumps over the layy dog\\" url = 'https://api.cognitive.microsoft.com/bing/v7.0/spellcheck?mode=proof&mkt=en-US' headers = { 'Ocp-Apim-Subscription-Key': YOUR_API_KEY } params = { 'text': spell_checker_input } response = requests.post(url, headers=headers, params=params) result = response.json() corrected_version = result['flaggedTokens'][0]['suggestions'][0]['suggestion'] print(f\\"Corrected version is: {corrected_version}\\")"},{"prompt":"Edit this python code to make the output print in descending order (from highest to lowest). my_list = [10,2,5,1,20] for x in my_list: print(x)","completion":"my_list = [10,2,5,1,20] for x in my_list: print(x) for x in sorted(my_list, reverse=True): print(x)"},{"prompt":"Construct a machine learning algorithm in Python to predict the temperature for a certain location based on input data such as historical temperature at that location and time of year. Data on Nairobi’s historical temperatures In Fahrenheit: [79.6, 92.1, 81.1, 80.2, 86.3, 89.2, 80.4, 88.5, 91.3, 76.2, 83.3]","completion":"import pandas as pd # Read data data = pd.DataFrame({ 'Temperature': [79.6, 92.1, 81.1, 80.2, 86.3, 89.2, 80.4, 88.5, 91.3, 76.2, 83.3] }) # Plot data data.plot() # Initialize and train the model from sklearn.linear_model import LinearRegression X = data.index.values.reshape(-1, 1) y = data.Temperature model = LinearRegression().fit(X, y) # Make a prediction predicted_temperature = model.predict([[12]]) # Predict temperature at the 12th index print(f'Predicted temperature: {predicted_temperature[0]}')"},{"prompt":"Write a python program to create a list containing the first 6 powers of 3.","completion":"powers_list = [] for i in range(0,6): powers_list.append(3**i) print(powers_list)"},{"prompt":"Write a python program to find the sum of squares of all numbers in a set Set: {1, 2, 3}","completion":"def sum_squares(s): total = 0 for x in s: total += x * x return total"},{"prompt":"Generate a Python class with the following variables. name, job, age","completion":"class Person: def __init__(self, name, job, age): self.name = name self.job = job self.age = age"},{"prompt":"dentify the language used to write the following program: def hello_world(): print(Hello World!)","completion":"Python."},{"prompt":"Generate a Python program to calculate the average of a list of numbers","completion":"def list_average(numbers): total = sum(numbers) length = len(numbers) return total/length"},{"prompt":"Develop an algorithm in Python to find the number of unique paths between two points on a 2dimensional grid m = 4 n = 3","completion":"def numPaths(m, n): #Create an array to store the results of subproblems paths = [[0] * n for _ in range(m)] #Fill the base cases for i in range(m): paths[i][0] = 1 for j in range(n): paths[0][j] = 1 #Calculate the number of unique paths for i in range(1, m): for j in range(1, n): paths[i][j] = paths[i - 1][j] + paths[i][j - 1] #return the final result return paths[m - 1][n - 1]"},{"prompt":"Endeavour to create a python function that takes an array of numbers and returns the highest number in the array. [2,5,1,6,3]","completion":"def find_largest_number(nums): highest_num = nums[0] for i in nums: if i>highest_num: highest_num = i return highest_num"},{"prompt":"Code an optimization problem using Python that finds the maximum of a function with two optimization variables and a given constraint. f(x, y) = 3x + 2y Constraint: x + y ≤ 10","completion":"from scipy.optimize import minimize def f(x): return 3*x[0] + 2*x[1] def con(x): return x[0] + x[1] - 10 cons = ({'type': 'ineq', 'fun': con}) result = minimize(f, [0, 0], method='SLSQP', constraints=cons) x = result.x print('Solution:', x) print('Maximum value:', result.value)"},{"prompt":"Write a Python program to set the difference between two sets. Set1 = {1, 2, 3, 4, 5} Set2 = {3, 4, 5, 6, 7}","completion":"def set_difference(Set1, Set2): return set(Set1) - set(Set2) result = set_difference({1, 2, 3, 4, 5}, {3, 4, 5, 6, 7}) print(result)"},{"prompt":"What is a Python script to list the full path of all directories in a directory?","completion":"import os path = \\".\\" for dirName, subdirList, fileList in os.walk(path): print(os.path.abspath(dirName))"},{"prompt":"Create a program for unsupervised learning in Python.","completion":"#!/usr/bin/env python from sklearn import cluster # define model k_means = cluster.KMeans(n_clusters=4) # fit and predict k_means.fit(X) predictions = k_means.predict(X)"},{"prompt":"Generate a Python script which prints out the first 10 perfect squares.","completion":"for i in range(10): print(\\"Perfect square at position\\", i+1, \\"is\\", (i+1)*(i+1))"},{"prompt":"Construct a Python class for playing 'Rock, Paper, Scissors'.","completion":"class Game: def __init__(self): pass def play_game(self, player_choice): # list of possible choices choices = [\\"rock\\", \\"paper\\", \\"scissors\\"] # randomly choose one from the list computer_choice = choices[random.randint(0, 2)] # compare choice # rock beats scissors if computer_choice == choices[0] and player_choice == choices[2]: print(\\"Computer chose rock. You lose.\\") elif computer_choice == choices[2] and player_choice == choices[0]: print(\\"Computer chose scissors. You win.\\") # paper beats rock elif computer_choice == choices[1] and player_choice == choices[0]: print(\\"Computer chose paper. You lose.\\") elif computer_choice == choices[0] and player_choice == choices[1]: print(\\"Computer chose rock. You win.\\") # scissors beats paper elif computer_choice == choices[2] and player_choice == choices[1]: print(\\"Computer chose scissors. You lose.\\") elif computer_choice == choices[1] and player_choice == choices[2]: print(\\"Computer chose paper. You win.\\") # draw elif computer_choice == player_choice: print(\\"Computer chose the same thing. Draw.\\")"},{"prompt":"Write a Python class to implement a stack.","completion":"class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, data): self.items.append(data) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"prompt":"Write a Python program to implement an encoderdecoder architecture for sentiment analysis. Not applicable","completion":"import numpy as np import keras from keras.layers import Input, LSTM, Dense from keras.models import Model inputs = Input(shape=(1000,)) encoded = LSTM(128)(inputs) dense1 = Dense(16, activation='relu')(encoded) dense2 = Dense(1, activation='sigmoid')(dense1) encoder_decoder_model = Model(inputs, dense2) encoder_decoder_model.compile(optimizer='adam', loss='binary_crossentropy') # Fit the model X_train = np.load('X_train.npy') y_train = np.load('y_train.npy') encoder_decoder_model.fit(X_train, y_train, batch_size=128, epochs=30) # Evaluate the model X_test = np.load('X_test.npy') y_test = np.load('y_test.npy') loss, accuracy = encoder_decoder_model.evaluate(X_test, y_test) print('Test accuracy:', accuracy)"},{"prompt":"Create a web scraping tool in Python that extracts the titles of articles on a particular website. The tool should also take a keyword as an input and only return titles that contain that keyword. Keyword: 'Data Science'","completion":"#import necessary libraries import requests from bs4 import BeautifulSoup #define main function to scrape titles def ScrapeTitles(keyword): #specify the url url = 'http://www.example.com/articley-page/' #query the website and return the html to the variable page page = requests.get(url) #parse the html using beautiful soup and store in variable \`soup\` soup = BeautifulSoup(page.content, 'html.parser') #find all article titles with \`h2\` tag titles = soup.find_all('h2') #initialize empty list to store titles result = [] #loop through all titles and check the keyword for title in titles: if keyword in title.text.lower(): result.append(title.text) return result #sample call to scrape titles titles = ScrapeTitles('data science') for title in titles: print(title)"},{"prompt":"This code contains functions for running Bowtie and Bowtie2 alignment tools on singleend and pairedend reads. To use these functions, import the argparse, subprocess, sys, re, and os modules. Then, call the paired_bowtie or single_bowtie functions with the appropriate arguments to align reads using Bowtie. Alternatively, call the paired_bowtie2 or single_bowtie2 functions with the appropriate arguments to align reads using Bowtie2. The output SAM files will be written to the specified output directory.","completion":"#!/usr/bin/python # 20 Oct 2014 # Patrick Lombard, Centre for Stem Stem Research # Core Bioinformatics Group # University of Cambridge # All right reserved. import argparse import subprocess import sys, re, os def paired_bowtie(fastq1, fastq2, name, index, outdir): sam1 = outdir + \\"/\\" + \\"tmp.sam\\" sam1_o = open(sam1, \\"wb\\") report = outdir+'/'+name+'_report.txt' report1_o = open(report, \\"wb\\") uniq = \\"bowtie -m 2 -v 1 --best --strata --seed 0 --sam {0} -1 {1} -2 {2}\\".format(index, fastq1, fastq2) p = subprocess.Popen(uniq.split(), stdout = sam1_o, stderr=report1_o) p.communicate() sam2 = outdir+\\"/\\"+name+\\".sam\\" grep_paired_unique(sam1, sam2) os.remove(sam1) def single_bowtie(fastq, name, index, outdir): sam1 = outdir + \\"/\\" + \\"tmp.sam\\" sam1_o = open(sam1, \\"wb\\") report = outdir+'/'+name+'_report.txt' report1_o = open(report, \\"wb\\") uniq = \\"bowtie -m 2 -v 1 --best --strata --seed 0 --sam {0} {1}\\".format(index, fastq) p = subprocess.Popen(uniq.split(), stdout = sam1_o, stderr=report1_o) p.communicate() sam2 = outdir+\\"/\\"+name+\\".sam\\" grep_single_unique(sam1, sam2) os.remove(sam1) def grep_paired_unique(samfile, outfile): output= open(outfile, \\"w\\") with open(samfile) as f: for line in f: line = line.rstrip() word = line.split(\\"t\\") if line.startswith(\\"@\\"): output.write(\\"{}n\\".format(line)), continue if len(word) > 12: m = re.match(\\"XS:i:\\", word[12]) if not m: if int(word[1]) == 147 or int(word[1]) == 83 or int(word[1]) == 99 or int(word[1]) == 163 or int(word[1]) == 81 or int(word[1]) == 97 or int(word[1]) == 145 or int(word[1]) == 161: output.write(\\"{}n\\".format(line)), def grep_single_unique(samfile, outfile): output= open(outfile, \\"w\\") with open(samfile) as f: for line in f: line = line.rstrip() word = line.split(\\"t\\") if line.startswith(\\"@\\"): output.write(\\"{}n\\".format(line)), continue if len(word) > 12: m = re.match(\\"XS:i:\\", word[12]) if not m: if int(word[1]) == 0 or int(word[1]) == 16: output.write(\\"{}n\\".format(line)), def paired_bowtie2(fastq1, fastq2, name, index, outdir, threads): report = outdir+'/'+name+'_report.txt' report1_o = open(report, \\"wb\\") uniq = \\"bowtie2 -p {4} -k 2 -N 1 --mm --no-mixed --no-discordant -x {0} -1 {1} -2 {2} -S {3}/tmp.sam\\".format(index, fastq1, fastq2, outdir, threads) p = subprocess.Popen(uniq.split(), stderr=report1_o) p.communicate() grep_paired_unique(outdir+\\"/tmp.sam\\", outdir+'/'+name+'.sam') os.remove(outdir+\\"/tmp.sam\\") def single_bowtie2(fastq, name, index, outdir, threads): report = outdir+'/'+name+'_report.txt' report1_o = open(report, \\"wb\\") uniq = \\"bowtie2 -p {3} -k 2 -N 1 --mm -x {0} -U {1} -S {2}/tmp.sam\\".format(index, fastq, outdir, threads) p = subprocess.Popen(uniq.split(), stderr=report1_o) p.communicate() grep_single_unique(outdir+\\"/tmp.sam\\", outdir+'/'+name+'.sam') os.remove(outdir+\\"/tmp.sam\\")"},{"prompt":"A number is said to be abundant if its proper divisors sum to more than the number itself. Create a python program to identify if a given number is abundant or not. 21","completion":"def is_abundant(num): divisor_sum = 0 for i in range(1, int(num/2)+1): if num % i == 0: divisor_sum += i return divisor_sum > num num = 21 if is_abundant(num): print(f\\"{num} is abundant\\") else: print(f\\"{num} is not abundant\\")"},{"prompt":"Write a function in Python that takes two lists of integers as arguments and returns the elements that are present in both lists. list1 = [2, 3, 4, 5] list2 = [3, 5, 6, 7]","completion":"def intersection(list1, list2): result = [] for element in list1: if element in list2: result.append(element) return result intersection(list1, list2) // Output: [3, 5]"},{"prompt":"Rewrite the following code snippet to use the generator in Python. def squares_up_to_n(n): results = [] for i in range(n): results.append(i**2) return resul","completion":"def squares_up_to_n(n): for i in range(n): yield i**2"},{"prompt":"Design a stack in Python to hold strings.","completion":"class Stack: def __init__(self): self.stack = [] def isEmpty(self): return len(self.stack) == 0 def push(self, item): self.stack.append(item) def pop(self): if (self.isEmpty()): return \\"Stack is empty\\" return self.stack.pop() def peek(self): if (self.isEmpty()): return \\"Stack is empty\\" return self.stack[-1] def size(self): return len(self.stack)"},{"prompt":"Write a Python script that takes the list of integers in input and writes the numbers in a square pattern.","completion":"# function to print the square pattern def printSquarePattern(n): # create a container to hold the data mat = [[0 for x in range(n)] for y in range(n)] # counter for the list of integers index = 0 # traverse the matrix for i in range(0, n // 2 + 1): for j in range(i, n - i): mat[i][j] = index index = index + 1 for j in range(i + 1, n - i): mat[j][n - i - 1] = index index = index + 1 for j in range(n - i - 2, i, -1): mat[n - i - 1][j] = index index = index + 1 for j in range(n - i - 2, i, -1): mat[j][i] = index index = index + 1 # print the pattern for i in range(0, n): for j in range(0, n): print(mat[i][j], end=\\" \\") print() # Driver code n = 4 printSquarePattern(n)"},{"prompt":"Write a Python method to find the area of a triangle using Heron's formula. The sides of the triangle are 6, 8 and 10","completion":"import math def heron(a, b, c): s = (a + b + c) / 2 area = math.sqrt(s * (s - a) * (s - b) * (s - c)) return area print('The area of the triangle is ', heron(6, 8, 10))"},{"prompt":"Debug this Python function to find and correct any errors. def sumN(num): response = 0 for i in range(1, num + 1): response *= i return response","completion":"def sumN(num): response = 0 for i in range(1, num + 1): response += i return response"},{"prompt":"Write a Python program to remove all occurrences of a specific number in a given list. list = [2, 3, 4, 2, 5, 2, 6, 2, 7]","completion":"def remove_num(myList, num): return [x for x in myList if x != num] removed_list = remove_num(list, 2) print(removed_list)"},{"prompt":"mplement a custom iterator in Python for a given data structure. Tree data structure","completion":"class TreeIterator: def __init__(self, root): self.root = root self.stack = [] self.current = None def __iter__(self): return self def __next__(self): # Case 1: there is a left-subtree if self.current is None: if self.root is not None: self.stack.append(self.root) self.current = self.root.left else: # Tree is empty raise StopIteration # Case 2: there is a right-subtree elif self.current.right is not None: self.stack.append(self.current.right) self.current = self.current.right.left # Case 3: there is no right-subtree and no left-subtree elif self.stack: self.current = self.stack.pop() else: # It's the end of the traversal self.current = None raise StopIteration return self.current.value"},{"prompt":"Automatically analyze and optimize the given Python code snippet. def factorial(n): if n == 1: return 1 else: return n*factorial(n1)","completion":"def factorial(n): return 1 if n in (0, 1) else n * factorial(n - 1)"},{"prompt":"Develop an algorithm using Python that determines if a number is a prime number or not. 12","completion":"def is_prime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True"},{"prompt":"Generate a python program to extract all the words from a given string and store them in a list.","completion":"def extract_words_from_string(s): return s.split(' ')"},{"prompt":"Write a Python function to identify the longest word in a given list of strings.","completion":"def longest_word(word_list): longest_word = word_list[0] for word in word_list: if len(word) > len(longest_word): longest_word = word return longest_word"},{"prompt":"Edit the given Python code to format the output as a table using tabulate. fruits = [apple, orange, pineapple, melon] for fruit in fruits: print(fruit)","completion":"import tabulate fruits = [\\"apple\\", \\"orange\\", \\"pineapple\\", \\"melon\\"] table = [(fruit,) for fruit in fruits] print(tabulate.tabulate(table, headers=[\\"Fruits\\"])) # Output: # Fruits # apple # orange # pineapple # melon"},{"prompt":"Create a program in Python which implements an AI agent playing the game RockPaperScissors. Not applicable","completion":"import random # Function to get the computer's decision def computer_decision(): choices = ['rock', 'paper', 'scissors'] decision = random.choice(choices) return decision # Function to compare the user's and computer's decisions def compare_decisions(user_decision, computer_decision): if user_decision == computer_decision: print(\\"It's a tie!\\") elif (user_decision == 'rock' and computer_decision == 'scissors') or (user_decision == 'paper' and computer_decision == 'rock') or (user_decision == 'scissors' and computer_decision == 'paper'): print(\\"You win!\\") else: print(\\"The computer wins!\\") # Function to get the user's decision def user_decision(): choices = ['rock', 'paper', 'scissors'] user_decision = input('Enter your decision: ').lower() if user_decision in choices: return user_decision else: print('Invalid choice! Please enter either rock, paper or scissors.') user_decision() # Main program loop while True: user_decision1 = user_decision() computer_decision1 = computer_decision() compare_decisions(user_decision1, computer_decision1)"},{"prompt":"Create a search algorithm in Python that will search an array of strings for a given target string.","completion":"def search(target, array): for item in array: if target == item: return True return False"},{"prompt":"Edit the existing code to use a python approach to convert the temperature from celsius to fahrenheit. Temperature in Celsius: 24","completion":"def celsius_to_fahrenheit(celsius): return (celsius * 9 / 5 + 32) temperature_in_fahrenheit = celsius_to_fahrenheit(24) print(temperature_in_fahrenheit)"},{"prompt":"Create a program in Python to delete all duplicates from a given list. list = [1, 2, 3, 1, 3, 4]","completion":"def remove_duplicates(list): new_list = [] for e in list: if e not in new_list: new_list.append(e) return new_list list = [1, 2, 3, 1, 3, 4] list = remove_duplicates(list) print(list)"},{"prompt":"Build a Hash Table in Python to store keyvalue pairs.","completion":"class HashTable: def __init__(self): self.table = {} def put(self, key, value): self.table[key] = value def get(self, key): return self.table.get(key)"},{"prompt":"Create a Python program to read numbers from stdin and produce a histogram, showing the frequency of the numbers in each 10 buckets. 15 7 3 29 4","completion":"import sys # Define buckets buckets = [0]*10 # Read line-by-line for line in sys.stdin: # Read as integer value = int(line) # Find the bucket bucket = max(int(value/10), 0) buckets[bucket] += 1 # Output result for i, count in enumerate(buckets): print('{}-{}: {}'.format(i*10, i*10+9, count))"},{"prompt":"To generate reST documentation for Sphinx from Evennia source code, follow these steps: 1. Install etinenned's sphinx autopackage script to a folder named autogen in the same directory as this script using the command hg clone https://bitbucket.org/etienned/sphinxautopackagescript autogen. 2. Create a directory tree code/ containing one directory for every package in the PACKAGE dictionary below. 3. Set EVENNIA_DIR to point to an Evennia root dir. 4. Run this script. 5. A new folder sphinx/source/code will be created with the reST sources. 6. To make a link to the code from the doc front page, edit docs/sphinx/sources/index.rst to reference code/modules. Note that this may not work properly at the moment.","completion":"#! /usr/bin/python # # Auto-generate reST documentation for Sphinx from Evennia source # code. # # Uses etinenned's sphinx autopackage script. Install it to folder # \\"autogen\\" in this same directory: # # hg clone https://bitbucket.org/etienned/sphinx-autopackage-script autogen # # Create a directory tree \\"code/\\" containing one directory for every # package in the PACKAGE dictionary below. Make sure EVENNIA_DIR # points to an Evennia root dir. Then just run this script. A new # folder sphinx/source/code will be created with the reST sources. # # Note - this is not working very well at the moment, not all sources # seems to be properly detected and you get lots of errors when # compiling. To nevertheless make a link to the code from the doc # front page, edit docs/sphinx/sources/index.rst to reference # code/modules. # import os, subprocess, shutil EVENNIA_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))) SPHINX_DIR = os.path.join(os.path.join(EVENNIA_DIR, \\"docs\\"), \\"sphinx\\") SPHINX_SRC_DIR = os.path.join(SPHINX_DIR, \\"source\\") SPHINX_CODE_DIR = os.path.join(SPHINX_SRC_DIR, \\"code\\") CONVERT_DIR = os.path.join(SPHINX_DIR, 'src2rest') AUTOGEN_EXE = os.path.join(CONVERT_DIR, os.path.join(\\"autogen\\", \\"generate_modules.py\\")) def src2rest(): \\"\\"\\" Run import \\"\\"\\" try: shutil.rmtree(SPHINX_CODE_DIR) print \\"Emptied old %s.\\" % SPHINX_CODE_DIR except OSError: pass os.mkdir(SPHINX_CODE_DIR) inpath = EVENNIA_DIR outpath = SPHINX_CODE_DIR excludes = [r\\".*/migrations/.*\\", r\\"evennia.py\\", r\\"manage.py\\", r\\"runner.py\\", r\\"server.py\\", r\\"portal.py\\"] subprocess.call([\\"python\\", AUTOGEN_EXE, \\"-n\\", \\"Evennia\\", \\"-d\\", outpath, \\"-s\\", \\"rst\\", \\"-f\\", inpath] + excludes) if __name__ == '__main__': try: src2rest() except Exception, e: print e print \\"Make sure to read the header of this file so that it's properly set up.\\""},{"prompt":"Write a Python script to generate random passwords with a desired length.","completion":"import random import string def generate_random_password(length): alphanumeric = string.ascii_letters + string.digits password = \\"\\".join(random.choice(alphanumeric) for i in range(length)) return password pwd = generate_random_password(10) print(pwd)"},{"prompt":"Edit the Python code to store the maximum value of a list in a variable called max_value list_values = [21, 15, 11, 17, 12, 29]","completion":"list_values = [21, 15, 11, 17, 12, 29] max_value = max(list_values)"},{"prompt":"Generate a Python function that finds the top k most frequent words in a given list of words. words = [apple, orange, apple, banana, apple, grape]","completion":"def find_top_k_frequent_words(words, k): \\"\\"\\" Finds the top k most frequent words in a given list of words :param words: A list of words :type words: list :param k: The number of words to return :type k: int :return: A list of top k most frequent words :rtype: list \\"\\"\\" frequencies = {} for word in words: if word in frequencies: frequencies[word] += 1 else: frequencies[word] = 1 frequent_words = sorted(frequencies.items(), key=lambda item: item[1], reverse=True) return [word[0] for word in frequent_words[:k]]"},{"prompt":"Create a program in Python to generate 10 random integers.","completion":"import random for _ in range(10): print(random.randint(0,100))"},{"prompt":"Design a code in Python that takes in two strings and checks if one is a permutation of the other. string1 = hello, string2 = loleh","completion":"def is_permutation(str1, str2): # If lengths of strings are not same, then they cannot be permutations if len(str1) != len(str2): return False # Create a count array and initialize all values as 0 count_arr = [0] * 256 # For each character in input strings, increment count in # the corresponding count array for i in range(len(str1)): count_arr[ord(str1[i])] += 1 # Decrement count for every character in second string for i in range(len(str2)): count_arr[ord(str2[i])] -= 1 # Check if all counts become 0 for i in range(256): if count_arr[i]: return False return True"},{"prompt":"Write a Python program that replaces all the occurrences of the letter ‘a’ with ‘’ in a given string. text = 'show me the money'","completion":"def replace_letter(text): result = '' for letter in text: if letter == 'a': result += '' else: result += letter return result text = 'show me the money' print(replace_letter(text))"},{"prompt":"Create a Python script to sample a dataset with 1000 records. The dataset consists of the columns temperature, humidity and weather. The script should produce a pandas dataframe containing 100 randomly picked records from the dataset. Sample dataset of 1000 records. | Temperature | Humidity | Weather | | | | | | 27 | 30 | Cloudy | | 28 | 33 | Partly Cloudy | | 24 | 33 | Raining | | 20 | 44 | Sunny | | 25 | 48 | Cloudy | | .... | ... | ... |","completion":"import pandas as pd #Load the input dataset as a pandas dataframe df = pd.read_csv(\\"input_data.csv\\") #Randomly sample 100 records from the dataset df_sampled = df.sample(n=100) #Print the resulting dataframe print(df_sampled)"},{"prompt":"Create a Python program to check whether two strings are anagrams (contain the same characters with the same frequency). s1 = cat, s2 = act","completion":"def isAnagram(s1, s2): # Convert strings to dictionaries s1_dict = {} for c1 in s1: s1_dict[c1] = s1_dict.get(c1, 0) + 1 s2_dict = {} for c2 in s2: s2_dict[c2] = s2_dict.get(c2, 0) + 1 # Compare dictionaries if (s1_dict == s2_dict): return True else: return False s1 = \\"cat\\" s2 = \\"act\\" if (isAnagram(s1, s2)): print(\\"Strings are anagrams\\") else: print(\\"Strings are not anagrams\\")"},{"prompt":"Design an efficient algorithm in Python for sorting a list of numbers. [3, 5, 7, 4, 2, 1]","completion":"def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"prompt":"Create a UI class with methods for handling input, window destruction, and exposing. Initialize the UI class with a thread lock, shared memory object, and semaphore object. Connect the UI class to a message handler and socket. Add watch functions for input and hang up events. Create a GTK window with a title, size, and position. Set the window to be app paintable and use RGBA colormap. Connect the window to the expose and destroy events. Create a pixbuf object with a specified width and height. Call the main method of the UI class.","completion":"#!/usr/bin/python import sys import os import tempfile import gobject import gtk import socket import shm import threading import time import struct import cairo import array import cPickle as pickle import message import config #gtk.gdk.threads_init() def olog(str): olog_nonl(str + \\"n\\") def olog_nonl(str): sys.stderr.write(\\"O: \\" + str) sys.stderr.flush() class UI: shm_obj = None sem_obj = None cr = None pixbuf = None rectangle = None def redraw(self) : print \\"redraw-----\\" if self.sem_obj != None: self.thread_lock.acquire() try : try : self.sem_obj.P() try : shm_obj = self.shm_obj size = struct.unpack_from(\\"i\\", shm_obj.read(4,4*0))[0] x = struct.unpack_from(\\"i\\", shm_obj.read(4,4*1))[0] y = struct.unpack_from(\\"i\\", shm_obj.read(4,4*2))[0] width = struct.unpack_from(\\"i\\", shm_obj.read(4,4*3))[0] height = struct.unpack_from(\\"i\\", shm_obj.read(4,4*4))[0] pixbufloader = gtk.gdk.PixbufLoader() pixbufloader.write(shm_obj.read(size,4*5)) pixbufloader.close() pixbuf = pixbufloader.get_pixbuf() # shm_obj = self.shm_obj # size = struct.unpack_from(\\"i\\", shm_obj.read(4,4*0))[0] # x = struct.unpack_from(\\"i\\", shm_obj.read(4,4*1))[0] # y = struct.unpack_from(\\"i\\", shm_obj.read(4,4*2))[0] # width = struct.unpack_from(\\"i\\", shm_obj.read(4,4*3))[0] # height = struct.unpack_from(\\"i\\", shm_obj.read(4,4*4))[0] # pixels = pickle.loads(shm_obj.read(size,4*5)) # pixbuf = gtk.gdk.pixbuf_new_from_array(pixels, gtk.gdk.COLORSPACE_RGB,8) finally : self.sem_obj.V() pass #print pixbuf.get_width() #print pixbuf.get_height() #print x #print y pixbuf.copy_area(0, 0, pixbuf.get_width(), pixbuf.get_height(), self.pixbuf, x, y) self.rectangle = (x,y,width,height) self.win.queue_draw_area(x,y, pixbuf.get_width(), pixbuf.get_height()) except TypeError: olog(\\"unexpected error:\\" + str(sys.exc_info()[0])) pass except : olog(\\"unexpected general error:\\" + str(sys.exc_info()[0])) pass finally: self.thread_lock.release() pass def window_destroyed(self, widget, data=None): #olog(\\"window is destroyed\\") gtk.main_quit() def expose(self, widget, event): # Load Cairo drawing context. self.thread_lock.acquire() try : if self.pixbuf <> None : area = event.area #olog(\\"x,y,width,height = %d %d %d %d\\" % (area.x, area.y, area.width, area.height)) self.pixbuf.render_to_drawable(self.win.window, gtk.gdk.GC(self.win.window), area.x, area.y, area.x, area.y, area.width, area.height) # if self.rectangle <> None: # cr = widget.window.cairo_create() # cr.set_line_width(1) # cr.set_source_rgb(255, 0, 0) # cr.rectangle(self.rectangle[0], self.rectangle[1], self.rectangle[2], self.rectangle[3]) # cr.stroke() finally: self.thread_lock.release() def handle_input(self, source, condition): #olog(\\"handle_input:\\") m = self.message_handler.recv() if m[0] == message.RenderCompleted : # load a new shared memory #olog(\\"display msg is received\\") shmid = int(m[1]) if self.shm_obj <> None: if self.shm_obj.shmid == shmid : self.redraw() else: self.thread_lock.acquire() try : self.shm_obj.detach() self.shm_obj = shm.memory(shmid) self.sem_obj = shm.semaphore(shm.getsemid(shmid)) self.shm_obj.attach() finally: self.thread_lock.release() else : self.thread_lock.acquire() try : self.shm_obj = shm.memory(shmid) self.sem_obj = shm.semaphore(shm.getsemid(shmid)) self.shm_obj.attach() finally: self.thread_lock.release() else : sys.stderr.write('invalid event typen') sys.exit(1) gobject.io_add_watch(self.soc.fileno(), gobject.IO_IN, self.handle_input) return False def handle_hup(self, source, condition): gtk.main_quit() return False def main(self): self.thread_lock = threading.Lock() self.shm_obj = None self.sem_obj = None self.message_handler = message.MessageHandler() self.soc = self.message_handler.KCHAN # socket.fromfd(int(sys.argv[1]), msg.FAMILY, msg.TYPE) gobject.io_add_watch(self.soc.fileno(), gobject.IO_IN, self.handle_input) gobject.io_add_watch(self.soc.fileno(), gobject.IO_HUP, self.handle_hup) window = gtk.Window() #gtk.WINDOW_TOPLEVEL) window.set_decorated(False) window.set_app_paintable(True) screen = window.get_screen() rgba = screen.get_rgba_colormap() window.set_colormap(rgba) window.set_title(\\"Quark Web Browser Output\\") vsize = config.ydimension window.set_default_size(1100, vsize - 200) #window.set_keep_above(True) window.set_decorated(False) window.connect(\\"destroy\\", self.window_destroyed) window.connect('expose-event', self.expose) #window.move(100,300) window.move(63,143) self.win = window window.show_all() (x,y,width,height,depth) = self.win.window.get_geometry() #width = 4000 #height = 4000 #self.pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height) self.pixbuf = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, width, height) gtk.main() def curr_tab(self): return self.tabs[self.curr] UI().main()"},{"prompt":"Create a Python program to calculate the square root of a given number without using the builtin square root function. x = 16","completion":"import math x = 16 def sqrt(x): sqrt_val = 0 # Start from the left most digit in x while sqrt_val * sqrt_val <= x: # if sqrt_val is equal to x, # return it if (sqrt_val * sqrt_val == x): return sqrt_val # else continue the loop sqrt_val = sqrt_val + 1 return sqrt_val - 1 # Driver Function x = 16 print(\\"Square root of x is\\", sqrt(x))"},{"prompt":"This code is a scraper for querying NeuroMorpho.Org from Python. To use it, call the functions \`cell_types()\`, \`species()\`, or \`regions()\` to get a list of all cell types, species, or regions, respectively. To get the matching cell names for a given type, use \`cell_names()\`. To get the metadata for a given cell name, use \`metadata()\`. To get the morphology for a given cell name, use \`morphology()\`. An optional \`format\` keyword argument allows selecting between the original and the standardized versions. To download a morphology file, use \`download()\`.","completion":"\\"\\"\\" Scraper for querying NeuroMorpho.Org from Python. For more on NeuroMorpho.Org, see: Ascoli GA, Donohue DE, Halavi M. (2007) NeuroMorpho.Org: a central resource for neuronal morphologies.J Neurosci., 27(35):9247-51 Run this file as a stand-alone script for a demo. The demo queries NeuroMorpho.Org in general, and provides extra information about the cell mb100318-a which is associated with the publication: Bagnall, M. W., Hull, C., Bushong, E. A., Ellisman, M. H., & Scanziani, M. (2011). Multiple clusters of release sites formed by individual thalamic afferents onto cortical interneurons ensure reliable transmission. Neuron, 71(1), 180-194. As a web-scraper, this module may break if the website structure changes, but it was known to work as of April 2, 2016. To get a list of all cell types, species, or regions, call cell_types(), species(), or regions(), respectively. Given a type from one of these lists, get the matching cell names via cell_names. e.g. cell_names('blowfly') To get the metadata for a given cell name, use metadata. e.g. metadata('mb100318-a') To get the morphology for a given cell name, use morphology. e.g. morphology('mb100318-a') An optional format keyword argument allows selecting between the original and the standardized versions. \\"\\"\\" import urllib2 import re import json import base64 _cache = {} def _read_neuromorpho_table(bywhat): \\"\\"\\"Helper function, reads data from NeuroMorpho.Org, stores in cache.\\"\\"\\" html = urllib2.urlopen('http://neuromorpho.org/by%s.jsp' % bywhat).read() result = [m.strip() for m in re.findall(\\"maketable('(.*?)')\\", html)] _cache[bywhat] = set(result) return result def cell_types(): \\"\\"\\"Return a list of all cell types.\\"\\"\\" return _read_neuromorpho_table('cell') def species(): \\"\\"\\"Return a list of all species.\\"\\"\\" return _read_neuromorpho_table('species') def regions(): \\"\\"\\"Return a list of all the brain regions.\\"\\"\\" return _read_neuromorpho_table('region') def cell_names(category): \\"\\"\\"Return a list of all the names of cells of a given cell type, species, or region. Examples: cell_names('Aspiny') cell_names('blowfly') cell_names('amygdala') \\"\\"\\" # figure out if category is a cell type, species, or region # check the cached sets first for bywhat, items in _cache.iteritems(): if category in items: return _get_data_for_by(bywhat, category) # no luck: try all three options for bywhat in ['cell', 'region', 'species']: result = _get_data_for_by(bywhat, category) if result: return result return [] def _get_data_for_by(bywhat, category): \\"\\"\\"Helper function for cell_names.\\"\\"\\" query_code = bywhat if bywhat != 'cell' else 'class' html = urllib2.urlopen('http://neuromorpho.org/getdataforby%s.jsp?%s=%s' % (bywhat, query_code, category.replace(' ', '%20'))).read() return [m for m in re.findall(\\"neuron_name=(.*?)'\\", html)] def metadata(neuron_name): \\"\\"\\"Return a dict of the metadata for the specified neuron. Example: metadata('mb100318-a') \\"\\"\\" html = urllib2.urlopen('http://neuromorpho.org/neuron_info.jsp?neuron_name=%s' % neuron_name).read() # remove non-breaking spaces html = html.replace('&nbsp;', ' ') # remove units html = html.replace('&#956;m<sup>2</sup>', ' ') html = html.replace('&#956;m', ' ') html = html.replace('&deg;', ' ') html = html.replace('<b>x</b>', ' ') html = html.replace('<sup>3</sup>', '') html2 = html.replace('n', '') keys = [i[1][:-3].strip() for i in re.findall('<td align=\\"right\\" width=\\"50%\\"(.*?)>(.*?)</td>', html2)] values = [i[1].strip() for i in re.findall('<td align=\\"left\\"(.*?)>(.*?)</td>', html2)[2:]] return dict(zip(keys, values)) def morphology(neuron_name, format='swc'): \\"\\"\\"Return the morphology associated with a given name. Format options: swc -- always \\"stanadardized\\" file format (default) original -- original Example: morphology('mb100318-a', format='swc') morphology('mb100318-a', format='original') \\"\\"\\" url_paths_from_format = {'swc': 'CNG%20Version', 'original': 'Source-Version'} assert(format in url_paths_from_format) # locate the path to the downloads html = urllib2.urlopen('http://neuromorpho.org/neuron_info.jsp?neuron_name=%s' % neuron_name).read() if format == 'swc': url = re.findall(\\"<a href=dableFiles/(.*?)>Morphology File (Standardized\\", html)[0] else: url = re.findall(\\"<a href=dableFiles/(.*?)>Morphology File (Original\\", html)[0] return urllib2.urlopen('http://NeuroMorpho.org/dableFiles/%s' % url).read() def download(neuron_name, filename=None): format = 'swc' if filename is not None and len(filename.split('.'))==0: filename = base64.urlsafe_b64encode(filename+'.'+format) if filename is None: filename = base64.urlsafe_b64encode(neuron_name+'.'+format) with open(filename, 'w') as f: f.write(morphology(neuron_name, format=format)) if __name__ == '__main__': print 'Demo of reading data from NeuroMorpho.Org' print for string, fn in zip(['cell types', 'brain regions', 'species'], [cell_types, regions, species]): print 'All %s:' % string print ', '.join(fn()) print for category in ['amygdala', 'blowfly', 'Aspiny']: print 'All %s:' % category print ', '.join(cell_names(category)) print print 'Metadata for mb100318-a:' print json.dumps(metadata('mb100318-a'), indent=4) print print 'Morphology (standardized) for mb100318-a (first 10 lines):' print 'n'.join(morphology('mb100318-a', format='standardized').split('n')[:10])"},{"prompt":"Create a Python code to generate HTML output from a given text input. This is a sample text to be converted to html output.","completion":"def generate_html(text): html_string = \\"\\" for line in text.splitlines(): html_string += \\"<p align=\\"justify\\">{}</p>n\\".format(line) return html_string"},{"prompt":"mplement crossvalidation in a Machine Learning model using Python's ScikitLearn module. Not applicable","completion":"import numpy as np from sklearn.model_selection import KFold # Define model and data model = Model() X = data # 10-fold cross-validation kf = KFold(n_splits=10) scores = [] # Iterate through group and train model for train_index, test_index in kf.split(X): X_train, X_test = X[train_index], X[test_index] model.fit(X_train) scores.append(model.score(X_test)) # Calculate average score across all folds avg_score = np.mean(scores) print(f'Average Score: {avg_score}')"},{"prompt":"Write a Python program to design a game of tictactoe. N/","completion":"# Create Tic-Tac-Toe game # Initialize board board = ['-' for x in range(9)] # Function to choose marker def chose_marker(): marker = '' while marker != 'X' and marker != 'O': marker = input('Player 1 - Do you want to be X or O? ').upper() if marker == 'X': return ('X', 'O') else: return ('O', 'X') # Function to display board def display_board(): print(' | |') print(' ' + board[0] + ' | ' + board[1] + ' | ' + board[2]) print(' | |') print('-----------') print(' | |') print(' ' + board[3] + ' | ' + board[4] + ' | ' + board[5]) print(' | |') print('-----------') print(' | |') print(' ' + board[6] + ' | ' + board[7] + ' | ' + board[8]) print(' | |') # Function to check if the game is won def win_check(mark): return ((board[0] == mark and board[1] == mark and board[2] == mark) or (board[3] == mark and board[4] == mark and board[5] == mark) or (board[6] == mark and board[7] == mark and board[8] == mark) or (board[0] == mark and board[3] == mark and board[6] == mark) or (board[1] == mark and board[4] == mark and board[7] == mark) or (board[2] == mark and board[5] == mark and board[8] == mark) or (board[0] == mark and board[4] == mark and board[8] == mark) or (board[2] == mark and board[4] == mark and board[6] == mark)) # Function to check if board is full def is_board_full(): if '-' in board: return False else: return True # Function to take player inputs def take_input(mark): position = 0 while position not in range(1,10) or board[position-1] != '-': position = int(input('Choose your position (1-9): ')) board[position-1] = mark # Main function def play_game(): print('Welcome to tic-tac-toe!') # initialize the board and player markers board_init() player_marker, bot_marker = choose_marker() turn = 'Player 1' over = False while not over: if turn == 'Player 1': # Display board display_board() # Take player 1 input take_input(player_marker) # Check if player won if win_check(player_marker): display_board() print('Congratulations! You won!') over = True else: if is_board_full(): display_board() print('The game is a draw!') break else: turn = 'Player 2' else: # Take player 2 input take_input(bot_marker) # Check if bot won if win_check(bot_marker): display_board() print('Player 2 has won!') over = True else: if is_board_full(): display_board() print('The game is a draw!') break else: turn = 'Player 1' #Main function play_game()"},{"prompt":"Develop a Python program to output the most common elements in a given collection collection = [1, 4, 5, 3, 4, 6, 5, 3, 4]","completion":"from collections import Counter def most_common (collection): data = Counter(collection) return data.most_common(1)[0] collection = [1, 4, 5, 3, 4, 6, 5, 3, 4] assert most_common(collection) == (4, 3) print (\\"Most Common element is: \\",most_common(collection))"},{"prompt":"Develop a python program that sorts a given list of words in lexicographic order. [apple, bike, dog, cat]","completion":"# Sort a list of words in lexicographic order words = [\\"apple\\", \\"bike\\", \\"dog\\", \\"cat\\"] # Sort the list words.sort() # Print the list print(words) # Output: # ['apple', 'bike', 'cat', 'dog']"},{"prompt":"Generate a python program to calculate the square root of a number","completion":"def sqrt_calc(num): return num**0.5"},{"prompt":"Write a Python program to find the list of words that are longer than given length word_list = [Red, Green, Blue, Yellow, Orange] length = 5","completion":"# Create a list to store the result long_words_list = [] # Iterate the list to find words longer than the given length for word in word_list: if len(word) > length: long_words_list.append(word) # Print the result print(long_words_list)"},{"prompt":"Write a Python program to calculate the area of a triangle given 3 sides. side1=5, side2=8, side3=7","completion":"def area(side1, side2, side3): # calculate the semi-perimeter s = (side1 + side2 + side3)/2 # calculate the area area = (s*(s-side1)*(s-side2)*(s-side3)) ** 0.5 return area"},{"prompt":"You are given a JSON object. Parse it into a Python object.","completion":"import json # sample json json_object = { \\"name\\": \\"John Doe\\", \\"age\\": 25, \\"hobbies\\": [\\"sports\\", \\"gaming\\", \\"reading\\"] } # parse to Python object python_object = json.loads(json.dumps(json_object)) print(python_object)"},{"prompt":"Write an algorithm for linear search in Python. List: [1, 3, 8, 10, 15, 20, 25] Number to search: 15","completion":"def linear_search(list, n): i = 0 while i < len(list): if list[i] == n: return i i = i+1 return -1 list = [1, 3, 8, 10, 15, 20, 25] n = 15 index = linear_search(list, n) print(\\"Number found at index:\\", index)"},{"prompt":"Write a Python program to calculate the total cost of an item given its unit price and number of units. Total Quantity: 10 Unit Price in Dollar: 4.50","completion":"\\"\\"\\" Calculate total cost of an item given its unit price and number of units \\"\\"\\" # Function to calculate total cost def calculate_total_cost(total_quantity, unit_price): total_cost = total_quantity * unit_price return total_cost # main if __name__ == \\"__main__\\": # Given quantity total_quantity = 10 # Given price unit_price = 4.50 total_cost = calculate_total_cost(total_quantity, unit_price) print(\\"Total cost: \\", total_cost)"},{"prompt":"Write a python program to generate random passwords. The passwords should include letters, numbers, and symbols. Not applicable","completion":"import random import string def generate_password(): char_list = list(string.ascii_letters + string.digits + string.punctuation) random.shuffle(char_list) return ''.join(char_list[:20]) print(generate_password())"},{"prompt":"Write a Python program that uses a recurrent neural network to determine positive or negative sentiment from text data. Not applicable","completion":"import tensorflow as tf from tensorflow.keras.layers import Input, Embedding, LSTM, Dense from tensorflow.keras.models import Sequential def create_model(): model = Sequential() model.add(Embedding(input_dim=vocab_size, output_dim=50, input_length=1000)) model.add(LSTM(50, return_sequences=True)) model.add(LSTM(50)) model.add(Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) return model model = create_model() model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))"},{"prompt":"Create an algorithm in Python for optimizing a portfolio given the historical values of different stocks.","completion":"import numpy as np from scipy.optimize import minimize # the objective function to minimize # the parameters are weights (w_1, w_2, w_3) def objective_function(weights): '''The objective function to minimize.''' return np.sum(weights**2) # the constraint that must be satisfied # the parameters are weights (w_1, w_2, w_3) def constraint(weights): '''The constraint to be satisfied''' return np.sum(weights) - 1.0 # define constraints cons1 = {'type':'eq', 'fun': constraint} # initialize weights weights = np.array([0.0, 0.0, 0.0]) # optimize weights solution = minimize(objective_function, weights, constraints=cons1, method='SLSQP', options={'disp':True}) # final solution print(solution.x)"},{"prompt":"mplement a neural network in Python for text classification. Not applicable","completion":"from keras.models import Sequential from keras.layers import Dense, Embedding, LSTM from keras.layers import Flatten from keras.datasets import imdb # set hyperparameters vocabulary_size = 5000 embedding_dim = 64 maxlen = 200 num_words = 5000 # preprocess data (x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=num_words) x_train = preprocessing.sequence.pad_sequences(x_train, maxlen=maxlen) x_test = preprocessing.sequence.pad_sequences(x_test, maxlen=maxlen) # define model architecture model = Sequential() model.add(Embedding(vocabulary_size, embedding_dim, input_length=maxlen)) model.add(LSTM(64)) model.add(Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # train model model.fit(x_train, y_train, epochs=3, batch_size=64, validation_data=(x_test, y_test)) # evaluate model score = model.evaluate(x_test, y_test, verbose=1) print(\\"Test Loss:\\", score[0]) print(\\"Test Accuracy:\\", score[1])"},{"prompt":"Generate a Python script to download the source code of a given web page. url = https://www.example.com","completion":"import urllib.request def download_webpage_source(url): '''This function will download the source code of a given web page''' response = urllib.request.urlopen(url) data = response.read() text = data.decode('utf-8') return text"},{"prompt":"Write a code to extract data from a web page using python requests.","completion":"\\"\\"\\" Extract data from a web page using python requests \\"\\"\\" import requests # Define the url url = 'https://example.com' # Get the data from the url response = requests.get(url) # Extract the data data = response.text # or response.json() for JSON data # Print the data print(data)"},{"prompt":"Write a Python program to sort a list using Selection Sort. [3, 8, 5, 4, 1, 9, 6]","completion":"# Selection Sort in Python def selectionSort(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] # Test program arr = [3, 8, 5, 4, 1, 9, 6] selectionSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i])"},{"prompt":"Write a Python script to print all prime numbers between two numbers, a and b (where a<b). a = 11 b = 20","completion":"for num in range(a, b+1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num)"},{"prompt":"Develop a Python function that takes two strings as input and returns the longer string. 'cat', 'dog'","completion":"def longer_string(string1, string2): if len(string1) > len(string2): return string1 else: return string2"},{"prompt":"Make a program in Python that ensures that two dates provided by the user are within one year of each other. date1 = 10022020 date2 = 11022021","completion":"from datetime import datetime date1 = datetime.strptime(date1, \\"%d-%m-%Y\\") date2 = datetime.strptime(date2, \\"%d-%m-%Y\\") def within_year (date1, date2): if abs((date2 - date1).days) <= 365: return True else: return False if within_year(date1, date2): print(\\"The two dates are within one year of each other.\\") else: print(\\"The two dates are not within one year of each other.\\")"},{"prompt":"Write a Python program to get the size of an object in bytes","completion":"import sys def get_object_size(obj): #Return the size of the object in bytes return sys.getsizeof(obj)"},{"prompt":"Create a Python script to flatten a given JSON object. data = { a: 1, b: { c: 2, d: 3 } }","completion":"import json def flatten(data): flattened_data = {} def flatten_helper(item, key): if type(item) is dict: for k, v in item.items(): flatten_helper(v,f\\"{key}.{k}\\") elif type(item) is list: for idx,val in enumerate(item): flatten_helper(val,f\\"{key}[{idx}]\\") else: flattened_data[key] = item flatten_helper(data, \\"\\") return flattened_data data = { \\"a\\": 1, \\"b\\": { \\"c\\": 2, \\"d\\": 3 } } result = flatten(data) print(json.dumps(result, indent=2)) # Output: # { # \\"a\\": 1, # \\"b.c\\": 2, # \\"b.d\\": 3 # }"},{"prompt":"Write a function to sort the given list of tuples in Python according to the second element of the tuple. tuple_list = [(1, 10), (2, 7), (3, 5), (4, 8)]","completion":"def sort_by_second_elem(tuple_list): return sorted(tuple_list, key=lambda x: x[1])"},{"prompt":"Create a python code to convert a string of commaseparated numbers into list. numbers = '1,2,3,4,5,6'","completion":"numbers = '1,2,3,4,5,6' numbers_list = [int(x) for x in numbers.split(',')] print(numbers_list) # [1, 2, 3, 4, 5, 6]"},{"prompt":"Write a Python program that performs basic text classification. The program should take a string as input and classify it into three categories: positive, neutral, and negative. The new iPhone has a great design.","completion":"#import required libraries import nltk from nltk.tokenize import word_tokenize #assign input string sample_input = \\"The new iPhone has a great design.\\" #tokenize the input string tokens = word_tokenize(sample_input) #create and train Naive Bayes classifier classifier = nltk.NaiveBayesClassifier.train([ ({'words': ['The', 'new', 'iPhone', 'has', 'a', 'great', 'design']}, 'positive'), ({'words': ['The', 'old', 'phone', 'has', 'a', 'horrible', 'design']}, 'negative'), ({'words': ['The', 'new', 'tablet', 'is', 'amazing', 'build']}, 'positive') ]) #input to be classified input_words = set(tokens) #classify the input classification = classifier.classify({'words':input_words}) print(\\"The input is classified as: {}\\".format(classification))"},{"prompt":"Write a Python program to convert a given time in 24hour format to 12hour format. 13:00","completion":"def convert24To12(time24): # Get the first two elements representing hours hrs = int(time24[0:2]) # Find the string for AM / PM ampm = ' AM' if hrs >= 12: ampm = ' PM' hrs -= 12 # Convert to string and append AM/PM return str(hrs) + time24[2:] + ampm # Driver Code time1 = '09:35:00' time2 = '13:35:00' print(convert24To12(time1)) print(convert24To12(time2))"},{"prompt":"Generate a Python script that prints the numbers from 1 to 10.","completion":"# Print numbers 1 to 10 for num in range(1, 11): print(num)"},{"prompt":"Create a program that can generate a random Swiss Internex Bank Account Number in Python","completion":"import random def generate_account_number(): # Generate a random Account number account_number = '00' nums = [str(random.randint(0, 9)) for _ in range(7)] account_number += \\"\\".join(nums) checksum = get_checksum(account_number) account_number += str(checksum) return account_number def get_checksum(account_number): n = 0 for i, num in enumerate(account_number): n += int(num) * (i % 6 + 2) checksum = 11 - (n % 11) if checksum == 10: return 0 elif checksum == 11: return 5 else: return checksum"},{"prompt":"Create a web scraper in Python to extract data from a given website. https://www.example.com/","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/' response = requests.get(url) #get the response html_data = response.text # get the data in text soup = BeautifulSoup(html_data, 'html.parser') #parse the data for item in soup.find_all('div', {'class': 'post-content'}): #find all elements with the class 'post-content' and loop through them content = item.get_text() #get the text content print(content) #print the content"},{"prompt":"Create a Python program to remove punctuations from the given sentence He loves to eat Italian; pizza, pasta, and gelato","completion":"import string def remove_punctuations(sentence): translator = str.maketrans('', '', string.punctuation) return sentence.translate(translator) print(remove_punctuations(\\"He loves to eat Italian; pizza, pasta, and gelato\\"))"},{"prompt":"Create a Python program that prints the numbers from 1 to 100, except when the number is divisible by 3, print Fizz and when the number is divisible by 5, print Buzz and when the number is divisible by both, print FizzBuzz.","completion":"for i in range(1, 101): if i%3 == 0 and i%5 == 0: print(\\"FizzBuzz\\") elif i%3 == 0: print(\\"Fizz\\") elif i%5 == 0: print(\\"Buzz\\") else: print(i)"},{"prompt":"Generate a function in Python to calculate the future value of an investment.","completion":"def calculate_future_value(principal, interest_rate, num_years): return principal * (1 + interest_rate)**num_years"},{"prompt":"Classify numbers into odd and even using Python. list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"odd_list = [] even_list = [] for x in list: if x % 2 == 0: even_list.append(x) else: odd_list.append(x) print(\\"Odd numbers: \\", odd_list) print(\\"Even numbers: \\", even_list)"},{"prompt":"Convert the given JSON data into Python dictionary. {name: John, age: 30, hobby: running}","completion":"import json data = '{\\"name\\": \\"John\\", \\"age\\": 30, \\"hobby\\": \\"running\\"}' dict_data = json.loads(data) print(dict_data)"},{"prompt":"Create a python program to select the item with the highest frequency in the list. list = [5, 2, 8, 7, 2, 2, 4]","completion":"def frequency_selector(list): # Create an empty dictionary for counts counts = {} # Iterate the list and store values in the dictionary for l in list: if l in counts: counts[l] += 1 else: counts[l] = 1 # Find the highest frequency max = 0 item = None for l in counts: if counts[l] > max: max = counts[l] item = l return item list = [5, 2, 8, 7, 2, 2, 4] print(frequency_selector(list))"},{"prompt":"Create a function in Python that takes a string as input and converts all the vowels to capital letters. str = This is a sample string","completion":"def convert_to_upper(str): res = \\"\\" for ch in str: if ch in \\"aeiou\\": res += ch.upper() else: res += ch return res input = \\"This is a sample string\\" output = convert_to_upper(input) print(\\"Converted string: \\"+ output)"},{"prompt":"Gadgetize the following Python function to accept any number of inputs def sum_two(input1, input2): return input1 + input2","completion":"def sum(*args): total = 0 for arg in args: total += arg return total"},{"prompt":"Create a Python function that takes a list and an integer as inputs and returns a new list with every item in the original list multiplied by the integer. list = [3, 2, 1] integer = 5","completion":"def multiply_list(lst, i): return [j * i for j in lst] result = multiply_list(list, integer) print(result) # [15, 10, 5]"},{"prompt":"Create a Python program that takes in a string and output a list of its characters sorted in descending order based on the number of occurences. Not applicable","completion":"def sort_char_occurrences(string): freq_dict = {} for char in string: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 sorted_frequency = {k: v for k, v in sorted(freq_dict.items(), key=lambda item: item[1], reverse=True)} sorted_characters = list(sorted_frequency.keys()) return sorted_characters"},{"prompt":"Find the average of the numbers 10 and 15 in a python program.","completion":"def average(x, y): return (x + y) / 2 result = average(10, 15) print(result)"},{"prompt":"Design a function in Python to test if the given number is a prime or not. N = 13","completion":"def is_prime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True is_prime(13) # True"},{"prompt":"Generate a hashmap in Python to store the given data. Name: Alice, Age: 30, Gender: Female Name: Bob, Age: 20, Gender: Male","completion":"dict = {} dict['Alice'] = {'Age': 30, 'Gender': 'Female'} dict['Bob'] = {'Age': 20, 'Gender': 'Male'}"},{"prompt":"Create a Python program that outputs a dictionary containing the names of the months as keys and the number of days they contain as values. Not applicable","completion":"month_days = { \\"January\\": 31, \\"February\\": 28, \\"March\\": 31, \\"April\\": 30, \\"May\\": 31, \\"June\\": 30, \\"July\\": 31, \\"August\\": 31, \\"September\\": 30, \\"October\\": 31, \\"November\\": 30, \\"December\\": 31 } print(month_days)"},{"prompt":"Create a python program to find the power of a number without using the builtin functions. 2, 5","completion":"def power_of(x, n): result = 1 for i in range(n): result = result * x return result power = power_of(2, 5) print(power)"},{"prompt":"Design an API endpoint in Python which obtains current weather information based on a user's location.","completion":"@app.route('/weather', methods=['GET']) def get_weather(): lat = request.args.get('latitude') lon = request.args.get('longitude') if lat is None or lon is None: abort(400) else: try: data = requests.get('http://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + lon) return data.json() except requests.exceptions.ConnectionError: abort(500)"},{"prompt":"Write a function in Python that takes in two numbers and finds the greatest common divisor of them.","completion":"def gcd(a, b): if b == 0: return a return gcd(b, a % b) a = 10 b = 25 print (\\"GCD of\\", a, \\"and\\", b, \\"=\\", gcd(a, b))"},{"prompt":"Create a Python class that takes a string and reverses it.","completion":"class ReverseString: def __init__(self, s): self.s = s def reverse(self): return self.s[::-1] my_string = ReverseString('Hello World!') print(my_string.reverse())"},{"prompt":"Generate a Python function to generate a bar chart of a DataFrame containing two columns of data. Not applicable","completion":"import matplotlib.pyplot as plt def generate_bar_chart(df): x = df.columns[0] y = df.columns[1] df.plot.bar(x,y) plt.show()"},{"prompt":"Generate a Python program which creates an acronym for a given sentence.","completion":"def create_acronym(sentence): acronym = '' words = sentence.split(' ') for word in words: acronym += word[0].upper() return acronym"},{"prompt":"Generate a Python script to compute the Levenshtein Distance between two strings. hello, hi","completion":"def levenshtein_distance(s, t): m = len(s) n = len(t) dp = [[0 for i in range(n + 1)] for j in range(m + 1)] for i in range(m + 1): for j in range(n + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif s[i-1] == t[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i][j-1], dp[i-1][j], dp[i-1][j-1]) return dp[m][n] result = levenshtein_distance('hello', 'hi') print(result)"},{"prompt":"Write an efficient Python program to find the models of cars with the highest average price. car_data = [ {'model': 'ford taurus', 'price': 12000}, {'model': 'honda civic', 'price': 13500}, {'model': 'bmw m3', 'price': 65000}, {'model': 'chevy blazer', 'price': 8000} ]","completion":"# Initialize a max_price variable and set it to 0 max_price = 0 # Iterate through the list of car data for car in car_data: # Retrieve the car's model and price model = car['model'] price = car['price'] # If the current car's price is greater than the current max_price if price > max_price: # Set the max_price to the current car's price max_price = price # Set a variable for the model with the highest price max_price_model = model # Print the model with the highest average price print(f'The model with the highest average price is the {max_price_model} at {max_price}.')"},{"prompt":"Can you modify the given Python program to fetch the top 5 elements in the list? sequence = [2, 8, 6, 4, 1, 9, 5]","completion":"sequence = [2, 8, 6, 4, 1, 9, 5] top_5 = sorted(sequence)[-5:] print(top_5)"},{"prompt":"Create an algorithm in Python to detect an Anagram. a = 'listen' b = 'silent'","completion":"def isAnagram(a, b): a = a.lower() b = b.lower() # remove spaces and sort letter a_sorted = ''.join(sorted(a.replace(' ', ''))) b_sorted = ''.join(sorted(b.replace(' ', ''))) # check if they are equal if a_sorted == b_sorted: return True return False a = 'listen' b = 'silent' print(isAnagram(a, b)) # Output: True"},{"prompt":"Create a Python program that calculates the mean, median, and mode for the given numbers. [1, 2, 3, 4, 5, 6, 7]","completion":"def mean(arr): total = 0 for num in arr: total += num return total / len(arr) def median(arr): arr.sort() if len(arr) % 2 != 0: median_index = int(len(arr) / 2) return arr[median_index] else: lower_index = int(len(arr) / 2) - 1 upper_index = int(len(arr) / 2) return (arr[lower_index] + arr[upper_index]) / 2 def mode(arr): counts = {} for num in arr: if num in counts: counts[num] += 1 else: counts[num] = 1 max_frequency = 0 max_value = None for num, frequency in counts.items(): if frequency > max_frequency: max_frequency = frequency max_value = num return max_value nums = [1, 2, 3, 4, 5, 6, 7] mean = mean(nums) median = median(nums) mode = mode(nums) print(f'Mean: {mean}, Median: {median}, Mode: {mode}')"},{"prompt":"Create a Python regex pattern to match words containing certain characters. Characters: abc","completion":"pattern = re.compile(r'b[abc]+w*b')"},{"prompt":"Write a python program to generate Fibonacci series up to a given number. n = 10","completion":"\\"\\"\\" Write a python program to generate Fibonacci series up to a given number \\"\\"\\" # Function to generate fibonacci series def generate_fibonacci(n): # Initialize a list fibonacci_list = [0,1] # Generate the fibonacci series up to n for i in range(2,n): fibonacci_list.append(fibonacci_list[i-1] + fibonacci_list[i-2]) # Print the result print(fibonacci_list) # Driver code if __name__ == '__main__': n = 10 generate_fibonacci(n) # Output: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"prompt":"Develop a python program automate the process of generating a list of random numbers between 1 to 100.","completion":"import random def generate_random_nums(n,min_val,max_val): output = [] for i in range(n): output.append(random.randint(min_val,max_val)) return output if __name__ == '__main__': n = 10 min_val = 1 max_val = 100 print(generate_random_nums(n,min_val,max_val))"},{"prompt":"Write a Python program to detect the most frequently occurring element in a given array. array = [1, 3, 1, 4, 5, 3, 4, 3]","completion":"from collections import Counter def most_frequent_element(array): return Counter(array).most_common(1)[0][0] # Driver code print(most_frequent_element([1, 3, 1, 4, 5, 3, 4, 3]))"},{"prompt":"Design a neural network using latent Dirichlet Allocation (LDA) No Inpu","completion":"import numpy as np import tensorflow as tf from tensorflow.contrib.factorization.python.ops import lda def create_lda_network(num_topics, num_documents, num_words): \\"\\"\\" Function to design a neural network using LDA. Args: num_topics (int): Desired number of topics num_documents (int): Desired number of documents num_words (int): Desired number of words Returns: A tensorflow graph node representing the trained LDA network. \\"\\"\\" # Define Dirichlet priors to use for the LDA prior = 0.1 * np.ones([num_topics], dtype=np.float32) # Initialize the LDA with the given input parameters lda_model = lda.LDA(num_topics, num_documents, num_words, prior=prior, name='lda_model' ) # Create a placeholder for the documents x = tf.placeholder(alice_documents) # Create and train the LDA network with the given placeholder lda_topics = lda_model(x) return lda_topics"},{"prompt":"Generate a program that translates a program written in one language to another language The following code is written in Javascript: function doubleValue(num) { return num * 2; }","completion":"def doubleValue(num): return num * 2 # Javascript to Python def doubleValue(num): return num * 2"},{"prompt":"Create a Python program that merges two lists, removing any duplicates. list_a = [1, 2, 3, 4, 5] list_b = [2, 3, 4, 6]","completion":"def merge_lists(list_a, list_b): merged_list = [] for ele in list_a: if ele not in merged_list: merged_list.append(ele) for ele in list_b: if ele not in merged_list: merged_list.append(ele) return merged_list"},{"prompt":"Write an algorithm in Python to search for a particular item in a sorted list. A sorted list lst = [1, 3, 6, 7, 11, 15]","completion":"def binary_search(lst, x): # initializing low and high index values lowIdx = 0 highIdx = len(lst)-1 # loop until low index is not greater than high index while lowIdx <= highIdx: # calculate mid index midIdx = (lowIdx + highIdx)//2 # compare midIdx value with x if lst[midIdx] == x: return midIdx # if x is less than midIdx value elif lst[midIdx] > x: highIdx = midIdx - 1 # if x is greater than midIdx value else: lowIdx = midIdx + 1 # if x is not present then return -1 return -1"},{"prompt":"Generate a python script to calculate the standard deviation of a given data set. data_set = [2,4,4,4,5,5,7,9]","completion":"import statistics data_set = [2,4,4,4,5,5,7,9] print(round(statistics.stdev(data_set),2))"},{"prompt":"Build a deep learning model in Python to classify the sentiment of different movie reviews. Dataset: The IMDB dataset which contains 25000 positive and 25000 negative reviews.","completion":"import tensorflow as tf tf.compat.v1.enable_eager_execution() # Load training data train_data = tf.keras.datasets.imdb.load_data('imdb.npz', num_words=10000) train_data[0] # Preprocess data train_x = tf.keras.preprocessing.sequence.pad_sequences(train_data[0], maxlen=500) train_y = train_data[1] model = tf.keras.Sequential([ tf.keras.layers.Embedding(10000, 64), tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)), tf.keras.layers.Dense(64, activation='relu'), tf.keras.layers.Dense(1, activation='sigmoid') ]) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(train_x, train_y, epochs=10)"},{"prompt":"Provide a Python function that takes a phrase as input and converts all words in the phrase to title case. a sample phrase","completion":"def title_case(phrase): words = phrase.split() result = [] for word in words: result.append(word[0].upper() + word[1:].lower()) return ' '.join(result)"},{"prompt":"Generate a script in Python to run a linear regression model using scikitlearn. [7 5 3 9 8 4] [7 3 4 6]","completion":"import numpy as np from sklearn.linear_model import LinearRegression x = np.array([[7,5,3,9,8,4]]).T y = np.array([7,3,4,6]) model = LinearRegression() model.fit(x, y) preds = model.predict(x) print(f\\"R-squared score: {model.score(x,y)}\\") print(f\\"Coefficients: {model.coef_}\\") print(f\\"Predictions: {preds}\\")"},{"prompt":"Come up with a correct function to calculate the length of a linked list in Python","completion":"# Python Program to Calculate the Length of a Linked List class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def lengthLinkedList(self): curr = self.head length = 0 while curr != None: length += 1 curr = curr.next return length if __name__ == '__main__': llist = LinkedList() llist.head = Node(1) second = Node(2) third = Node(3) llist.head.next = second second.next = third print(\\"Length of Linked List: \\" + str(llist.lengthLinkedList()))"},{"prompt":"Write a Python program to print out the current date and time in the form Friday, July 24th, 2020, at 4:00pm. Not Applicable","completion":"from datetime import datetime now = datetime.now() print(\\"Today's date is\\", now.strftime(\\"%A, %B %dth, %Y, at %I:%M%p\\"))"},{"prompt":"Write a Python function that takes two lists as input and returns true if all the elements in List 1 are available in List 2. list1 = [21, 54, 8, 54] list2 = [21, 24, 8, 16]","completion":"def check_if_all_in_list_2(list1, list2): for item in list1: if item not in list2: return False return True"},{"prompt":"Create a python script for Creating a car class with attributes like color and engine type.","completion":"class Car: def __init__(self, color, engine_type): self.color = color self.engine_type = engine_type def get_color(self): print(\\"Car's Color: \\", self.color) def get_engine_type(self): print(\\"Car's Engine Type: \\", self.engine_type)"},{"prompt":"Write a Python program to create a timeline that shows the date ranges for the given list of events. Events: Job A: 15 Jan 1 Feb Job B: 4 May 30 Jun Job C: 9 Jul 4 Aug","completion":"timeline = { \\"Job A\\": {\\"start\\": datetime.datetime(2020,1,15), \\"end\\": datetime.datetime(2020,2,1) }, \\"Job B\\": {\\"start\\": datetime.datetime(2020,5,4), \\"end\\": datetime.datetime(2020,6,30) }, \\"Job C\\": {\\"start\\": datetime.datetime(2020,7,9), \\"end\\": datetime.datetime(2020,8,4) } }"},{"prompt":"Create a function to invert a matrix in Python","completion":"def invert_matrix(matrix): return matrix.T # transpose matrix"},{"prompt":"Write a Python program to represent the following data structure: { 'Fruits':[ 'Apple', 'Banana', 'Orange' ], 'Vegetables':[ 'Carrot', 'Cucumber', 'Potato' ] } Not applicable","completion":"data = { 'Fruits':[ 'Apple', 'Banana', 'Orange' ], 'Vegetables':[ 'Carrot', 'Cucumber', 'Potato' ] } print(data)"},{"prompt":"The code calculates density maps for nutrient budget terms from NEMOERSEM output. To use the code, you need to provide the base directory with model files as an argument. The code imports pandas, netCDF4, xarray, numpy, os, matplotlib.pyplot, Basemap, and argparse. The code then defines the base directory and model paths. You can modify the model paths to include more files. The code also defines the variables to be plotted. You can modify the variables to be plotted. Finally, the code defines the main function, which takes an optional 'argv' argument. To run the code, call the main function.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- \\"\\"\\" budget_term_densities Calculates density maps for nutrient budget terms from NEMO-ERSEM output. NERC-DEFRA SSB-BlueC projects Created on Tue Jan 24 09:18:52 2017 @author: TAMS00 \\"\\"\\" #import pandas as pd import netCDF4 import xarray as xr import numpy as np import os import matplotlib.pyplot as plt from mpl_toolkits.basemap import Basemap, cm import argparse if (('Windows' in os.environ['OSTYPE']) and (os.environ['COMPUTERNAME']=='PC4447')): base='c:/Users/tams00/Documents/nerc_ssb/c_fluxes/AMM7-HINDCAST-v0-erosion' else: base='/nerc/n01/n01/momme/AMM7-HINDCAST-v0-erosion' modelpaths=[os.path.join(base+'/1981/01/','amm7_1d_19810101_19810131_grid_T.nc')]#, #os.path.join(base+'/1981/02/','amm7_1d_19810201_19810228_grid_T.nc')] #os.path.join(base+'/1981/01/','restart_trc.nc'), #modelvars=[['Y4_fdetrc_result']] #modelvars=[['net_PelBen_POC_result','G3_c_pb_flux','nav_lon','nav_lat'], #['fabm_st2DnQ1_c','fabm_st2DnQ6_c','fabm_st2DnQ7_c','fabm_st2DnQ17_c','fabm_st2DnH1_c','fabm_st2DnH2_c','fabm_st2DnY2_c','fabm_st2DnY3_c','fabm_st2DnY4_c','fabm_st2DnG3_c'], #['fabm_st2DnQ1_c','fabm_st2DnQ6_c','fabm_st2DnQ7_c','fabm_st2DnQ17_c','fabm_st2DnH1_c','fabm_st2DnH2_c','fabm_st2DnY2_c','fabm_st2DnY3_c','fabm_st2DnY4_c','fabm_st2DnG3_c']] par_3d=['TRNO3_c','TRNP1_c','TRNP2_c','TRNP3_c','TRNP4_c','TRNB1_c','TRNZ4_c','TRNZ5_c','TRNZ6_c','TRNR4_c','TRNR6_c','TRNR8_c','TRNR1_c','TRNR2_c','TRNR3_c','TRNL2_c'] par_2d=['fabm_st2DnQ1_c','fabm_st2DnQ6_c','fabm_st2DnQ7_c','fabm_st2DnQ17_c','fabm_st2DnH1_c','fabm_st2DnH2_c','fabm_st2DnY2_c','fabm_st2DnY3_c','fabm_st2DnY4_c','fabm_st2DnG3_c'] adv_3d=['XAD_O3_c_e3t'] modelvars=adv_3d # main() to take an optional 'argv' argument, which allows us to call it from the interactive Python prompt: def main(argv=None): parser = argparse.ArgumentParser() parser.add_argument('--basedir',nargs=1,help='base directory with model files') args = parser.parse_args() print(args) try: base = args.basedir else: base = base # Naughty datasets might require decode_cf=False # Here it just needed decode_times=False print('********************') print(modelpaths[0]) #data = xr.open_dataset(modelpaths[0],decode_times=False) modelout = xr.open_mfdataset(modelpaths) #,decode_times=False) #print(modelout) for modelvar in modelvars: vardf=modelout[modelvar] print(vardf) # print attributes for at in vardf.attrs: print(at+':tt',end=' ') print(vardf.attrs[at]) timeavg=vardf.mean('time_counter') timeavg.plot() if __name__ == \\"__main__\\": main()"},{"prompt":"Create a loop in Python that prints the numbers from 5 to 10 in sequence.","completion":"for i in range(5, 11): print(i)"},{"prompt":"Using the input dictionary as a guide, implement a Python function to print out the list of values for each key. my_dict = {Alice: 25, Bob: 21, Eve: 45}","completion":"def print_values(dict_in): for key,value in dict_in.items(): print(key, \\":\\", value) print_values(my_dict)"},{"prompt":"Create a python script to visualize the distribution of values in a numpy array numpy array [1, 2, 3, 4, 5, 6]","completion":"import matplotlib.pyplot as plt import numpy as np arr = np.array([1,2,3,4,5,6]) plt.hist(arr) plt.title(\\"Distribution of values in the given array\\") plt.show()"},{"prompt":"Create a basic webscrapper program in Python that downloads the entire HTML of a given website. https://example.com","completion":"import requests response = requests.get(\\"https://example.com\\") html = response.text"},{"prompt":"Create a machine learning model in Python to predict a customer’s churn status given their customer ID and purchase history. Customer ID: C123456 Purchase History: [“Pizza”, “Burger”, “Ice Cream”]","completion":"# Importing the libraries import numpy as np import matplotlib.pyplot as plt import pandas as pd # Importing the dataset dataset = pd.read_csv('Churn_Modelling.csv') X = dataset.iloc[:, 3:13].values y = dataset.iloc[:, 13].values # Encoding categorical data from sklearn.preprocessing import LabelEncoder, OneHotEncoder labelencoder_X_2 = LabelEncoder() X[:, 2] = labelencoder_X_2.fit_transform(X[:, 2]) onehotencoder = OneHotEncoder(categorical_features = [2]) X = onehotencoder.fit_transform(X).toarray() X = X[:, 1:] # To remove dummy var trap # Splitting the dataset into the Training set and Test set from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0) # Fitting XGBoost to the Training set from xgboost import XGBClassifier classifier = XGBClassifier() classifier.fit(X_train, y_train) # Predicting a new customer's churn status customerID = 'C123456' new_customer = [customerID, X_train[0, 1], X_train[0, 2], X_train[0, 3], X_train[0, 4], X_train[0, 5], X_train[0, 6], X_train[0, 7], X_train[0, 8], X_train[0, 9], X_train[0, 10], X_train[0, 11]] new_customer = np.array(new_customer).reshape((1,-1)) new_customer[:, 2] = labelencoder_X_2.transform(new_customer[:, 2]) new_customer = onehotencoder.transform(new_customer).toarray() new_customer = new_customer[:, 1:] # To remove dummy var trap y_pred = classifier.predict(new_customer) if y_pred == 0: print('The customer with ID {} will not churn.'.format(customerID)) else: print('The customer with ID {} will churn.'.format(customerID))"},{"prompt":"Create a Python script that uses a SQL server database to store contact information. The database should include a table for contacts, with fields for first name, last name, email address, and phone number. Not applicable","completion":"import sqlite3 conn = sqlite3.connect('contacts.db') c = conn.cursor() # Create a table c.execute(\\"\\"\\"CREATE TABLE contacts ( first_name text, last_name text, email_address text, phone_number text )\\"\\"\\") # Insert a row of Data c.execute(\\"INSERT INTO contacts VALUES ('John', 'Doe', 'johndoe@example.com', '12345')\\") # Commit changes and close connection conn.commit() conn.close()"},{"prompt":"Create a program in Python to find out how many times a particular word appears in a given string. string = Python is an interpreted, highlevel, generalpurpose programming language. word = programming","completion":"def countWord(string, word): string = string.lower().split() count = 0 for i in range(0, len(string)): if (string[i] == word): count += 1 return count string = \\"Python is an interpreted, high-level, general-purpose programming language.\\" word = \\"programming\\" print(countWord(string, word))"},{"prompt":"Develop a program to convert an infix to postfix expression. A+B*C","completion":"#!/usr/bin/env python # utility function to check if a character is a valid infix operator def isOperator(c): if (c == '+' or c == '*' or c == '/' or c == '-' or c == '^'): return True else: return False # Function to convert infix to postfix expression def infixToPostfix(exp): # Iterate through expression for i in range(len(exp)): # If the character is an operator, # pop two elements from the stack if (isOperator(exp[i])): op2 = exp[i-1] op1 = exp[i-2] # Concatenate the two characters exp = exp[:i-2] + op1 + op2 + exp[i:] # Remove the two characters exp = exp[:i-1] + exp[i+1:] # Reduce the length of expression i = i-2 # The result is the last character of # the expression after whole process return exp[-1] # Driver Code exp = \\"A+B*C\\" # Convert infix to postfix print (infixToPostfix(exp))"},{"prompt":"Create a python script to create an NxN matrix with the values in the range 0 to NxN1","completion":"def generate_matrix(N): matrix = [] for i in range(N): row = [] for j in range(N): row.append(i * N + j) matrix.append(row) return matrix"},{"prompt":"Create a class in Python to represent a rectangle with length and width as instance variables.","completion":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width"},{"prompt":"Create a python program to group the list of numbers into 3 separate lists according to their ranges. list = [3, 5, 9, 12, 15, 18, 21]","completion":"#Defining the list list = [3, 5, 9, 12, 15, 18, 21] #Grouping the list list_1 = [element for element in list if element <= 10] list_2 = [element for element in list if element > 10 and element <= 17] list_3 = [element for element in list if element > 17 and element <= 24] #Printing the result print(\\"List 1: \\", list_1) print(\\"List 2: \\", list_2) print(\\"List 3: \\", list_3)"},{"prompt":"Create a Python script to scrape the text from a Wikipedia article and find the most frequent words in the text. The URL of the Wikipedia article.","completion":"import requests import collections import re from bs4 import BeautifulSoup # specify the URL of the Wikipedia article url = 'https://en.wikipedia.org/wiki/Genetic_algorithm' # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # take out the script and style portions of the HTML for script in soup([\\"script\\", \\"style\\"]): script.extract() # get text text = soup.get_text() # break the text down into individual words words = re.findall(r'w+',text) # Count the words word_count = collections.Counter(words) # get the most common words most_common_words = word_count.most_common(20) print(most_common_words)"},{"prompt":"This code defines several functions and tests for a machine learning algorithm. To use it, first append the necessary module paths by calling the \`append_module_path()\` function. Then, you can run the tests by calling \`test_H()\`, \`test_norm_2_1()\`, and \`test_Q()\`. To print the results of the algorithm, call \`print_W(W)\` with the desired output. Finally, you can run the algorithm on your own data by calling \`run_accuracy(fun, XL_train,YL_train,XU_train,YU_train, sel_num=5, output_file_name=feature_order)\`, where \`fun\` is the function you want to run, \`XL_train\`, \`YL_train\`, \`XU_train\`, and \`YU_train\` are your training data, \`sel_num\` is the number of features to select, and \`output_file_name\` is the name of the file to output the selected features to. The function will return the selected feature order, the time it took to run, and the accuracy of the algorithm.","completion":"#!usr/bin/python # -*- coding:utf-8 -*- import pandas as pd import numpy as np import scipy as sp import os import random import time import sys def append_module_path(): import sys paths = [ \\"../gen_data\\", \\"../evaluate\\", \\"../read_data\\" ] for path in paths: if path not in sys.path: sys.path.append(path) append_module_path() import gen_data import evaluate import read_data def test_H(): \\"\\"\\" expected array([[ 0.66666667, -0.33333333, -0.33333333], [-0.33333333, 0.66666667, -0.33333333], [-0.33333333, -0.33333333, 0.66666667]]) \\"\\"\\" return compute_H(3) def test_norm_2_1(): \\"\\"\\" expected 4.2426406871192857 \\"\\"\\" W = np.array([[1,1],[2,2]]) return norm_2_1(W) def test_Q(): \\"\\"\\" (np.sqrt(2) + np.sqrt(8)) / [np.sqrt(2), np.sqrt(8)] expected [[ 3. , 0. ], [ 0. , 1.5]] \\"\\"\\" W = np.array([[1,1],[2,2]]) return compute_Q(W) def print_W(W): with open(\\"W.txt\\", \\"a+\\") as f: for w in W: print(w, file=f) print(\\"n========================n\\", file=f) def run_accuracy(fun, XL_train,YL_train,XU_train,YU_train, sel_num=5, output_file_name=\\"feature_order\\"): XL, YL, XU, YU = XL_train.copy(), YL_train.copy(), XU_train.copy(), YU_train.copy() if fun.__name__.lower() == \\"lsfs\\": YL = read_data.label_n1_to_nc(YL) YU = read_data.label_n1_to_nc(YU) feature_order, time_dual = fun(XL, YL, XU, output_file_name=output_file_name) X,Y = evaluate.select_data(XL_train, YL_train, XU_train, YU_train, feature_order, sel_num=sel_num) a = evaluate.run_acc(X,Y) print(\\"accuracy\\", \\":\\", a) return feature_order, time_dual, a"},{"prompt":"Find and fix a bug in this piece of Python code def sum_list(list_of_numbers): # calculates the sum of a list of numbers result = 0 for number in list_of_numbers: result += number return resul","completion":"def sum_list(list_of_numbers): # calculates the sum of a list of numbers result = 0 for number in list_of_numbers: result += number return int(result) # convert to an integer before returning the result"},{"prompt":"Construct a program in Python 3 for getting the first two busiest airports in the USA","completion":"import pandas as pd airports = pd.read_csv('/path/to/airports/csv/file.csv') top_airports = airports.sort_values('Total_Arrivals', ascending=False).head(2) print(top_airports)"},{"prompt":"Write a python program to encrypt a string using the Caesar cipher. plain_text = 'Lorem ipsum dolor sit amet'","completion":"def caesar_encrypt(plain_text, shift): cipher = '' for char in plain_text: if char == ' ': cipher = cipher + char elif char.isupper(): cipher = cipher + chr((ord(char) + shift - 65) % 26 + 65) else: cipher = cipher + chr((ord(char) + shift - 97) % 26 + 97) return cipher result = caesar_encrypt(plain_text, 3) print(result)"},{"prompt":"Given a list of tuples, write a Python function to sort the list according to the second item in each tuple.","completion":"def sort_by_second_item(lst): return sorted(lst, key=lambda x:x[1])"},{"prompt":"Develop a Python algorithm that takes a list of integers as an input and output a list of pairs of numbers in the list that add up to a given number. [2, 5, 3, 8, 11], Target = 9","completion":"def sum_to_target(lst, target): result = [] for i in range(len(lst)): for j in range(i+1, len(lst)): if lst[i] + lst[j] == target: result.append((lst[i], lst[j])) return result lst = [2, 5, 3, 8, 11] target = 9 print(sum_to_target(lst, target)) # [(2, 7), (3, 6), (5, 4)]"},{"prompt":"Construct a python program to separate even and odd numbers from an array. [1, 2, 3, 4, 5, 6]","completion":"def separate_even_odd(arr): even = [] odd = [] for num in arr: if num % 2 == 0: even.append(num) else: odd.append(num) return even, odd even, odd = separate_even_odd([1, 2, 3, 4, 5, 6]) print('Even numbers:', even) print('Odd numbers:', odd)"},{"prompt":"Analyze the given data, decide the approach and write a Python program to predict whether a given SMS is a spam or not. Sample Data: [ { text: FREE for 1st week! No1 Nokia tone 4 ur mob every week just text NOKIA to 87077 Try4 Free 3xT/Stop, label: spam }, { text: WINNER!! As a valued network customer you have been selected to receivea £900 prize reward. To claim call 09061774519., label: spam }, { text: Closing on Tuesday for half term break., label: ham } ]","completion":"import numpy as np import pandas as pd import matplotlib.pyplot as plt import string from nltk.corpus import stopwords from nltk.stem import WordNetLemmatizer from nltk.tokenize import word_tokenize from sklearn.feature_extraction.text import CountVectorizer from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB data = [ { \\"text\\": \\"FREE for 1st week! No1 Nokia tone 4 ur mob every week just text NOKIA to 87077 Try4 Free 3xT/Stop\\", \\"label\\": \\"spam\\" }, { \\"text\\": \\"WINNER!! As a valued network customer you have been selected to receivea £900 prize reward. To claim call 09061774519.\\", \\"label\\": \\"spam\\" }, { \\"text\\": \\"Closing on Tuesday for half term break.\\", \\"label\\": \\"ham\\" } ] # Preprocessing lemmatizer = WordNetLemmatizer() def preprocess_text(text): # Remove punctuation clean_text = [char for char in text if char not in string.punctuation] # Get the word tokens clean_text = ''.join(clean_text) word_tokens = word_tokenize(clean_text) # Removing Stopwords filtered_words = [word for word in word_tokens if word not in stopwords.words('english')] # Lemmatizing lemmatized_words = [lemmatizer.lemmatize(word) for word in filtered_words] clean_sent = ' '.join(lemmatized_words) return clean_sent # Feature engineering tf_transform = TfidfVectorizer(stop_words = 'english', preprocessor = preprocess_text) X = tf_transform.fit_transform(df['text']) y = df['label'] # Model training X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) model = MultinomialNB() model.fit(X_train, y_train) # Model evaluation prediction = model.predict(X_test) print('Accuracy: %0.2f ' % (model.score(X_test, y_test) * 100))"},{"prompt":"Generate a MonteCarlo simulation program in Python to estimate the value of Pi.","completion":"import random # Function to generate random points def generate_random_point(): x = random.uniform(-1, 1) y = random.uniform(-1, 1) return (x, y) # Function to calculate Pi def calculate_pi(num_samples): # Number of points inside the circle num_inside = 0 for i in range(num_samples): # Generate a random point point = generate_random_point() # Check if the point is inside the circle if (point[0]**2 + point[1]**2 <= 1): num_inside += 1 # Calculate pi return 4*num_inside/num_samples"},{"prompt":"Write a Python program for sentiment analysis.","completion":"import nltk import numpy as np from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_analyzer(text): sid = SentimentIntensityAnalyzer() score = sid.polarity_scores(text) return score # Example test sentiment_analyzer('This is a good day!') # {'neg': 0.0, 'neu': 0.508, 'pos': 0.492, 'compound': 0.4404}"},{"prompt":"Create a Python program to sort a given array in increasing and decreasing order. Array: [3, 5, 8, 9, 0, 4, 1]","completion":"def sort_array(arr): asc_arr = arr.copy() asc_arr.sort() dsc_arr = arr.copy() dsc_arr.sort(reverse=True) return asc_arr, dsc_arr asc_arr, dsc_arr = sort_array([3, 5, 8, 9, 0, 4, 1]) print(\\"Sorted in ascending order:\\", asc_arr) print(\\"Sorted in descending order:\\", dsc_arr)"},{"prompt":"Can you write an Python program to find the sum of two given numbers?","completion":"def sum_integers(a, b): return a + b # Driver Program a = 4 b = 5 print(\\"Sum of {} and {} is: {}\\".format(a, b, sum_integers(a, b)))"},{"prompt":"Create a Python program that takes two strings as input and creates a new string with the characters in the second string that are not present in the first string. 'jello','hello'","completion":"def difference(string1, string2): new_string = '' for char in string2: if char not in string1: new_string += char return new_string string1 = 'jello' string2 = 'hello' print(difference(string1, string2)) # Output: 'e'"},{"prompt":"Create a custom context class in Python that stores shared data between functions. Not applicable","completion":"class Context: def __init__(self): self.data = {} def set(self, key, value): self.data[key] = value def get(self, key): return self.data.get(key) def clear(self): self.data = {} context = Context() def foo(): context.set('name', 'John') def bar(): print(context.get('name')) foo() bar() # prints 'John'"},{"prompt":"Write a Python program to optimize an array of numbers so that the sum of elements is maximum and all the elements are greater than 0. [1,2,3,4,5]","completion":"import numpy as np # Get the input array arr = [1,-2,3,4,-5] # Optimize the array so that the sum of elements is maximized # and all the elements are greater than 0 new_arr = np.max(arr,0) # Print the optimized array print(\\"Optimized Array : \\",*new_arr)"},{"prompt":"Develop a Python script to search for a specific element in a given list. arr = [2, 3, 4, 5, 6, 7] x = 5","completion":"def search_element(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1"},{"prompt":"Generate a program in Python to extract all numbers from a given string string = The 3 monkeys had 2 apples","completion":"import re def extract_numbers(string): numbers = re.findall('d+', string) return numbers string = \\"The 3 monkeys had 2 apples\\" print(extract_numbers(string))"},{"prompt":"Create a Python script that connects to a MySQL database. The script should query the database for the list of available tables and print them out. Not applicable","completion":"import pymysql # Connect to the database conn = pymysql.connect(host='localhost', user='username', password='password', db='my_database') # Create a cursor cursor = conn.cursor() # Execute the query cursor.execute('SHOW TABLES') # Fetch and print out the list of tables tables = cursor.fetchall() for table in tables: print(table) # Close the connection conn.close()"},{"prompt":"Write a code to detect if a given text contains the word python. This post is about programming in python.","completion":"def contains_python(text): return \\"python\\" in text"},{"prompt":"Generate a response for an HTTP request using Python.","completion":"import http.server class RequestHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): self.send_response(200) self.send_header('Content-type','text/html') self.end_headers() self.wfile.write(b'<html><body><h1>Hello World!</h1></body></html>') if __name__ == '__main__': server = http.server.HTTPServer(('localhost', 8080), RequestHandler) print('Starting server, use <Ctrl-C> to stop') server.serve_forever()"},{"prompt":"Python, create a function to check if a given number is prime, and then print out all prime numbers between 0 and that number. Number : 25","completion":"def is_prime(number): if number <= 1: return False for i in range(2, number): if number % i == 0: return False return True def print_primes(upper_limit): for i in range(2, upper_limit+1): if is_prime(i): print(i) print_primes(25)"},{"prompt":"Compile the following Python code using Python 3. print(Hello, World!)","completion":"python3 hello.py # output: Hello, World!"},{"prompt":"Develop a Python program to ask a user to input 10 numbers in an array and then calculate the product of the numbers in the array. Not applicable","completion":"def arrayProduct(): # Create an empty array arr = [] # Ask the user to input 10 numbers print(\\"Enter 10 numbers: \\") for i in range(10): arr.append(int(input())) product = 1 # calculate the product of all the # elements of the array for i in range(10): product = product * arr[i] # Print the product of the array print(\\"Product of the array elements is: \\", product) # Driver code arrayProduct()"},{"prompt":"Produce a Python program to detect anagrams from a list of words. words = [canoe, fez, act, cat]","completion":"#!/usr/bin/python # Function to detect anagrams def detect_anagrams(words): # Iterate over the list of words for i in range(len(words)-1): # Create a list to store anagrams anagrams = [words[i]] # Iterate over the rest of the words for j in range(i + 1, len(words)): # Check if two words are anagrams if sorted(words[i]) == sorted(words[j]): anagrams.append(words[j]) # Check if anagrams were found if len(anagrams) > 1: print(\\"The anagrams are: \\" + str(anagrams)) # Input words words = [\\"canoe\\", \\"fez\\", \\"act\\", \\"cat\\"] # Call the function detect_anagrams(words) \\"\\"\\" The anagrams are: ['canoe', 'act'] The anagrams are: ['cat'] \\"\\"\\""},{"prompt":"Write a codesnippet in Python to generate 5 random integers between 1 and 10.","completion":"import random rand_nums = [random.randint(1,10) for x in range(5)] print(rand_nums)"},{"prompt":"Write a function in Python to compute the nth Fibonacci number. 8","completion":"def fibonacciNum(n): if n <= 1: return n else: return (fibonacciNum(n-1) + fibonacciNum(n-2)) n = 8 result = fibonacciNum(n) print(result)"},{"prompt":"Create a web application in Python using the Flask framework that allows users to search a database using keywords. Not applicable","completion":"from flask import Flask, request, render_template import sqlite3 app = Flask(name) @app.route('/', methods=['GET']) def main(): return render_template('main.html') @app.route('/search', methods=['POST']) def search(): conn = sqlite3.connect('database.db') c = conn.cursor() keyword = request.form.get('keyword') c.execute('SELECT * FROM table WHERE field LIKE \\"%{}%\\"'.format(keyword)) results = c.fetchall() return render_template('search.html', results=results) if name == 'main': app.run(debug=True)"},{"prompt":"EDIT this Python function to print the number of characters in its argument. def print_length(text): print(Length of text is + text.length())","completion":"def print_length(text): print(\\"Length of text is \\" + str(len(text)))"},{"prompt":"Create a Python program to calculate the sum of all odd numbers between 1 and a given number.","completion":"def calculate_sum_of_odd_numbers(max_number): sum_of_odd_numbers = 0 for num in range(1, max_number + 1): if num % 2 != 0: sum_of_odd_numbers += num return sum_of_odd_numbers print(calculate_sum_of_odd_numbers(15))"},{"prompt":"Create a for loop in Python to iterate through a given list of numbers and find the sum. [11, 12 , 15, 20, 56]","completion":"nums = [11, 12, 15, 20, 56] total = 0 for num in nums: total += num print(total) # 110"},{"prompt":"Optimize an existing Python program to reduce its running time. def find_sum(n): final_sum = 0 for i in range(n+1): final_sum += i return final_sum print(find_sum(10))","completion":"def find_sum(n): return n * (n + 1) // 2 print(find_sum(10))"},{"prompt":"Create a function in Python to multiply two matrices. ([[1,2,3], [4,5,6]], [[7,8], [9,10], [11, 12]])","completion":"def multiply_matrices(m1, m2): result = [] for row_index, row in enumerate(m1): new_row = [] for col_index in range(len(m2[0])): sum_result = 0 for row2_index, row2 in enumerate(m2): sum_result += row[row2_index] * row2[col_index] new_row.append(sum_result) result.append(new_row) return result"},{"prompt":"Write a Python program to sort the elements of an input array using Merge sort. Array: [7, 3, 5, 8, 2, 9, 1, 4]","completion":"def merge_sort(arr): if len(arr) > 1: mid = len(arr)//2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i+= 1 else: arr[k] = R[j] j+= 1 k+= 1 while i < len(L): arr[k] = L[i] i+= 1 k+= 1 while j < len(R): arr[k] = R[j] j+= 1 k+= 1 # main program arr = [7, 3, 5, 8, 2, 9, 1, 4] merge_sort(arr) print(arr)"},{"prompt":"Construct a Python program to read in a sequence of numbers, find the largest number and its position in the sequence. [3, 2, 5, 1, 9]","completion":"sequence = [3, 2, 5, 1, 9] # finding the largest number max_num = max(sequence) # finding the index of the largest number in the sequence index = sequence.index(max_num) print(\\"The largest number in the sequence is:\\", max_num) print(\\"The position of the largest number in the sequence is:\\", index)"},{"prompt":"Optimize the following Python program as much as possible def func(string): list_out = [] for s in string: list_out.append(s.upper()) return list_out list_out = func(hello)","completion":"def func(string): return [s.upper() for s in string] list_out = func(\\"hello\\")"},{"prompt":"Generate an equation in Python that works with given input. x = 5","completion":"y = x**2 + 7*x + 3"},{"prompt":"Write a Python program to convert a given string to one of its equivalent shell script command string = copy file1.txt file2.txt","completion":"def string_to_shell_command(string): split_string = string.split() command_name = split_string[0] input_args = split_string[1:] command_args = '' for arg in input_args: command_args += f'\\"{arg}\\"' + ' ' return f'{command_name} {command_args}'"},{"prompt":"Compare and contrast Java and Python.","completion":"Java and Python are two of the most popular programming languages in the world. Java is a statically-typed, object-oriented language, while Python is a dynamically-typed, interpreted language. Java programs tend to be faster than Python programs as it runs directly on the hardware platform and sacrifices flexibility for speed. Python is easier to learn and has a larger number of libraries, making it more versatile and simpler to write programs. However, due to the lack of performance optimization, Python is less efficient than Java."},{"prompt":"Design a REST API in Python for connecting a remote database, and fetching One user’s all records from the database. Database Username: John Database Password: 12345","completion":"import requests # Connect the remote database url = \\"http://{database_url}/connect\\" data = { 'username': 'John', 'password': '12345' } response = requests.post(url, data=data) # Get user data url = \\"http://{database_url}/user/data\\" response = requests.get(url) # Print user data print(response.json())"},{"prompt":"Create an HTTP server in Python that responds to \`GET\` requests with a ‘Hello World’ message. Not applicable","completion":"from http.server import HTTPServer, BaseHTTPRequestHandler class HelloWorldHandler(BaseHTTPRequestHandler): def do_GET(self): self.send_response(200) self.end_headers() self.wfile.write(b'Hello World!') server = HTTPServer(('', 8080), HelloWorldHandler) server.serve_forever()"},{"prompt":"Using Python, design an algorithm that takes a string as an input and reverses it. Hello World!","completion":"def reverseString(str): s = \\"\\" for i in str: s = i + s return s print(reverseString('Hello World!')) # Output: !dlroW olleH"},{"prompt":"Design a program in python to find all three digit Armstrong numbers in the range of 0 to 999.","completion":"def find_armstrong_numbers(): armstrong_nums = [] for num in range (0, 1000): digits_sum = 0 temp = num while temp > 0: digit = temp % 10 digits_sum += digit ** 3 temp //= 10 if num == digits_sum: armstrong_nums.append(num) return armstrong_nums"},{"prompt":"Write a script in Python that takes a URL and a list of words as input and then searches the page content for any of the given words. URL: https://www.example.com Word List: [cat, dog, bird]","completion":"import requests url = 'https://www.example.com' word_list = ['cat', 'dog', 'bird'] r = requests.get(url).text for word in word_list: if word in r: print('Word \\"{}\\" found on the given URL'.format(word)) else: print('Word \\"{}\\" not found the given URL'.format(word))"},{"prompt":"Create a program in any language that reads numbers from the keyboard until it reads a negative number and then prints the sum of the numbers that have been read.","completion":"Python solution: num = int(input('Enter a number: ')) sum = 0 while num >= 0: sum += num num = int(input('Enter a number: ')) print('The sum is', sum)"},{"prompt":"Write a Python program to classify items into two categories 'fruit' and 'vegetable'. ['apple', 'carrot', 'tomato', 'cherry']","completion":"# Define set of labels: labels = ['fruit', 'vegetable'] # Read the input data input_data = ['apple', 'carrot', 'tomato', 'cherry'] # Define function to classify the items def classify(data): result = [] for item in data: if item in ['apple', 'cherry']: result.append('fruit') else: result.append('vegetable') return result # Call the function to classify classified_data = classify(input_data) # Print the results for item, label in zip(input_data,classified_data): print(f'{item} is classified as {label}')"},{"prompt":"Create a python program to find all combinations of a given list that add up to a given target number. [1, 2, 3, 4] 5","completion":"def combinationSum(nums, target): result = [] def dfs(cur, index, nums, target, result): \\"\\"\\" cur: current combination of numbers index: start index nums: given array target: given target number \\"\\"\\" if target == 0: result.append(cur[:]) return for i in range(index, len(nums)): if nums[i] <= target: cur.append(nums[i]) dfs(cur, i, nums, target-nums[i], result) del cur[-1] dfs([], 0, nums, target, result) return result"},{"prompt":"Write a Python function that returns the secondlargest number from an input list of integers.","completion":"def second_largest_num(numbers): largest_num = max(numbers) second_largest = 0 for num in numbers: if (num > second_largest and num < largest_num): second_largest = num return second_largest result = second_largest_num([2, 1, 4, 5]) print(result)"},{"prompt":"Generate an algorithm using Python for computing the sum of all numbers up to a given number.","completion":"def sum_up_to_number(number): sum_number = 0 for num in range(1,number+1): sum_number += num return sum_number"},{"prompt":"Create an AI chatbot in Python using DialogFlow. The chatbot should be able to answer basic questions related to the company's products and services. Not applicable","completion":"from dialogflow_v2.SessionClient import SessionClient from dialogflow_v2.Objects import QueryInput, TextInput session_client = SessionClient.SessionClient() #create a session def get_response(query): inputs = QueryInput(text=TextInput(text=query, language_code='en-US')) query_result = session_client.detect_intent(session_id=\\"1\\", query_input=inputs) return query_result.query_result.fulfillment_text"},{"prompt":"Create a Python program to generate the nth item in the Fibonacci sequence. 5","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Code n = 5 print(Fibonacci(n))"},{"prompt":"Write a class in Python to implement a stack. The class should have methods to push and pop elements and check the size of the stack. Not applicable","completion":"class Stack: def __init__(self): self.stack = [] def push(self, element): self.stack.append(element) def pop(self): if self.stack: return self.stack.pop() else: return None def size(self): return len(self.stack)"},{"prompt":"Design an algorithm in Python for linear search on an array of integers.","completion":"def linearSearch(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1"},{"prompt":"mplement a python program to check if a number is powerful. A powerful number is one who has a power of 2 as any of its prime divisors. number = 18","completion":"def is_power(number): flag = False if number > 2: for i in range(2, number // 2 + 1): while number % i == 0: if number % (i ** 2) == 0: flag = True number = number / i return flag print(is_power(18))"},{"prompt":"Create a Python program for converting Celsius to Fahrenheit.","completion":"def celsiusToFahrenheit(celsius): return (9/5)*celsius + 32"},{"prompt":"Create a Python program that simulates a dice roll by randomly selecting a number between 1 and 6.","completion":"import random # Simulate a dice roll by randomly selecting a number between 1 and 6 die_roll = random.randint(1, 6) print(\\"You rolled a\\", die_roll)"},{"prompt":"This code is a Python script that connects to a server and sends a command. To use it, you need to provide the script with the server address and the command to execute as commandline arguments. The script will read the server configuration from a configuration file, and if it fails to do so, it will use default values. To run the script, use the following command: python agenteservidor.py <direccion> <comando>. Make sure to replace <direccion> with the server address and <comando> with the command to execute.","completion":"#!/usr/bin/env python # ------------------------------ # importacion # ------------------------------ import socket, sys, time, ConfigParser def poner_mensaje( tipo , mensaje ): # ----------------------------- # Colocar mensajes con formato # y marca de tiempo # ----------------------------- print time.strftime('%Y-%m-%d-%X') + \\" \\" + tipo + \\": \\" + mensaje def activar_configuracion(): # ------------------------------ # Variables del servidor desde # un archivo de configuracion # ------------------------------ configuracion = \\"./configuracion/agente-servidor.cfg\\" global direccion global puerto global clave try: cfg = ConfigParser.ConfigParser() cfg.read([configuracion]) puerto = int(cfg.get('servidor','puerto')) clave = cfg.get('servidor','clave') clientes = cfg.get('servidor','clientes') except: poner_mensaje( 'ERROR' , \\"No se pudo leer el archivo de configuracion \\" + configuracion ) poner_mensaje( 'AVISO' , \\"Se tomaran los valores por omision: 6470 root\\" ) puerto = 6470 clave = 'root' if __name__ == \\"__main__\\": activar_configuracion() # ------------------------------ # parametros a utilizar # ------------------------------ if( len(sys.argv) == 3 ): continuar = True direccion = sys.argv[1] comando = sys.argv[2] agente = socket.socket( socket.AF_INET, socket.SOCK_STREAM ) try: agente.connect( ( direccion, puerto ) ) except: poner_mensaje ( 'ERROR' , \\"No se pudo establecer la conexion en la direccion: \\"+ direccion +\\" con el puerto: \\" + str(puerto) ) continuar = False if ( continuar == True ): data, server = agente.recvfrom( 100 ) poner_mensaje ( 'MENSAJE' , data ) agente.send( clave ) data, server = agente.recvfrom( 100 ) poner_mensaje ( 'MENSAJE' , data ) agente.send( comando ) data, server = agente.recvfrom( 100 ) poner_mensaje ( 'MENSAJE' , data ) agente.close() else: print \\"--------------------------------------------------------------\\" print \\" Tiene que mandar cuatro parametros\\" print \\" agente-servidor.py <direccion> <comando>\\" print \\"--------------------------------------------------------------\\""},{"prompt":"Create a Python program to generate a Fibonacci sequence using recursion.","completion":"def Fibonacci_Sequence(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci_Sequence(n-1)+Fibonacci_Sequence(n-2) print(Fibonacci_Sequence(10))"},{"prompt":"Generate a Python Lambda function for responding to a specific Alexa Intent. The intent should request for the weather conditions for a given city name, and should return the current temperature, humidity, and wind speed as a reponse. City Name: Los Angele","completion":"import json import requests def lambda_handler(event, context): # Get the city name from the event city_name = event['request']['intent']['slots']['city']['value'] # Make an API call for weather data response = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid=<your_app_id_here>') response_json = response.json() # Get temperature, humidity, and wind speed temp = response_json['main']['temp'] humidity = response_json['main']['humidity'] wind_speed = response_json['wind']['speed'] # Create the response response = { 'version': '1.0', 'response': { 'outputSpeech': { 'type': 'PlainText', 'text': f'The temperature is {temp}, the humidity is {humidity}, and the wind speed is {wind_speed} in {city_name}.' } } } return response"},{"prompt":"Write a Python function that computes the average of 3 numbers. 1, 2, 3","completion":"def average(a, b, c): return (a + b + c) / 3.0 print(average(1,2,3)) # Output: 2.0"},{"prompt":"Create a program in Python that implements a greedy knapsack solution for a given set of items with weights and values. Item Weight: [5, 4, 3, 2] Item Value: [20, 10, 12, 4] Knapsack capacity: 6","completion":"def knapsack(weights, values, capacity): if len(weights) == 0 or len(values) == 0 or capacity == 0: return 0 v = [0 for _ in range(len(weights))] for i in range(len(weights)): if weights[i] <= capacity: v[i] = values[i] for i in range(len(weights)): for c in range(capacity, weights[i] - 1, -1): v[i] = max(v[i], values[i] + v[c - weights[i]]) return v[capacity] weights = [5, 4, 3, 2] values = [20, 10, 12, 4] capacity = 6 print(knapsack(weights, values, capacity)) # Prints 24"},{"prompt":"Design a Python function which takes two strings as inputs and returns whether they are permutations of each other. string1 = abc string2 = cba","completion":"def is_permutation(string1, string2): if len(string1) != len(string2): return False char_map = {} for char in string1: char_map[char] = char_map.get(char, 0) + 1 for char in string2: if char_map.get(char, 0) == 0: return False char_map[char] -= 1 return True string1 = \\"abc\\" string2 = \\"cba\\" print(is_permutation(string1, string2)) # Output: True"},{"prompt":"Generate a python program to remove vowels from a string of words.","completion":"def remove_vowels(word_string): vowels = ('a', 'e', 'i', 'o', 'u') word_string = word_string.lower() for x in word_string: if x in vowels: word_string = word_string.replace(x,\\"\\") print(word_string)"},{"prompt":"Create a program to detect a palindrome string in Python. original_string = radar","completion":"# Function to check if a string is a palindrome def is_palindrome(original_string): reversed_string = original_string[::-1] if original_string == reversed_string: return True else: return False # Print result print(is_palindrome(original_string))"},{"prompt":"Can you implement a knearest neighbor model using Python?","completion":"Yes, it is possible to implement a k-nearest neighbor model using Python. The SciKit-Learn library and other effective libraries such as PyKNN, KNeighbors-Classifier, and NearestNeighbors provide various functions and modules for users to implement a k-nearest neighbor model in Python."},{"prompt":"Create a web API in Python Flask to get the sum of the numbers provided in a query string. Not applicable","completion":"from flask import Flask, request app = Flask(__name__) @app.route(\\"/sum\\", methods=['GET']) def get_sum(): numbers = request.args.getlist('numbers') result = sum([int(num) for num in numbers]) return str(result) if __name__ == \\"__main__\\": app.run()"},{"prompt":"Write a Python program that uses while loop to print the numbers from 1 to 10.","completion":"i = 1 while i <= 10: print(i) i += 1"},{"prompt":"This code is a Python class for handling requests to an object storage service. To use this code, import the necessary modules and create an instance of the UtakaBucket class, passing in the request object. Then call the handleRequest method to process the request and return the appropriate response. The handleRequest method determines the appropriate operation to perform based on the HTTP method and subresources in the request URL. The class includes methods for handling GET, PUT, POST, DELETE, and COPY requests, as well as methods for handling ACL and logging operations. The class also includes methods for constructing and parsing XML responses and access control policies.","completion":"#Copyright 2009 Humanitarian International Services Group # #Licensed under the Apache License, Version 2.0 (the \\"License\\"); #you may not use this file except in compliance with the License. #You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # #Unless required by applicable law or agreed to in writing, software #distributed under the License is distributed on an \\"AS IS\\" BASIS, #WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #See the License for the specific language governing permissions and #limitations under the License. from mod_python import apache import xml.dom.minidom import utaka.src.core.BucketWithACPAndLog as Bucket import utaka.src.accessControl.BucketACP as BucketACP import utaka.src.accessControl.AcpXml as AcpXml import utaka.src.exceptions.MethodNotAllowedException as MethodNotAllowedException import utaka.src.exceptions.BadRequestException as BadRequestException class UtakaBucket: def __init__(self, utakaReq): self.utakaReq = utakaReq def handleRequest(self): if 'torrent' in self.utakaReq.subresources: raise BadRequestException.RequestTorrentOfBucketErrorException() if 'acl' in self.utakaReq.subresources: if self.utakaReq.req.method == 'GET': operation = self.__getAclOperation elif self.utakaReq.req.method == 'PUT': operation = self.__putAclOperation else: raise MethodNotAllowedException.ACLMethodNotAllowedException(self.utakaReq.req.method) elif 'logging' in self.utakaReq.subresources: if self.utakaReq.req.method == 'GET': operation = self.__getLoggingOperation elif self.utakaReq.req.method == 'PUT': raise MethodNotAllowedException.BucketLogginStatusMethodException else: raise MethodNotAllowedException.LoggingStatusMethodNotAllowedException(self.utakaReq.req.method) elif self.utakaReq.req.method == 'GET': operation = self.__getOperation elif self.utakaReq.req.method == 'PUT': operation = self.__putOperation elif self.utakaReq.req.method == 'DELETE': operation = self.__deleteOperation elif self.utakaReq.req.method == 'POST': operation = self.__postOperation elif self.utakaReq.req.method == 'COPY': operation = self.__copyOperation else: raise MethodNotAllowedException.BucketMethodNotAllowedException(self.utakaReq.req.method) return operation() def __copyOperation(self): pass def __postOperation(self): pass def __deleteOperation(self): result = Bucket.destroyBucket(bucket=self.utakaReq.bucket, user=self.utakaReq.user) self.utakaReq.req.status = 204 def __putOperation(self): cannedACL = self.utakaReq.customHeaderTable.get('acl', 'private') acp = {} acp['owner'] = {'userid':self.utakaReq.user} acl = [{'grantee':{'userid':self.utakaReq.user}, 'permission':'FULL_CONTROL'}] if cannedACL == 'public-read': acl.append({'grantee':{'userid':1}, 'permission':'read'}) elif cannedACL == 'public-read-write': acl.append({'grantee':{'userid':1}, 'permission':'read'}) acl.append({'grantee':{'userid':1}, 'permission':'write'}) elif cannedACL == 'authenticated-read': acl.append({'grantee':{'userid':2}, 'permission':'read'}) elif cannedACL != 'private': '''throw error''' acp['acl'] = acl result = Bucket.setBucket(bucket = self.utakaReq.bucket, user = self.utakaReq.user, accessControlPolicy = acp) def __getOperation(self): getBucketParams = {'name':self.utakaReq.bucket} for param in 'prefix', 'marker', 'max-keys', 'delimiter': if param in self.utakaReq.subresources: getBucketParams[param] = self.utakaReq.subresources[param][0] if 'max-keys' not in getBucketParams: getBucketParams['max-keys'] = 1000 res = Bucket.getBucket(bucket = self.utakaReq.bucket, user = self.utakaReq.user, prefix = getBucketParams.get('prefix'), marker = getBucketParams.get('marker'), maxKeys = getBucketParams.get('max-keys'), delimiter = getBucketParams.get('delimiter')) getBucketParams['isTruncated'] = str(res[2]) self.utakaReq.req.content_type = 'application/xml' self.utakaReq.write(self.__getXMLResponse(getBucketParams, res[0], res[1])) def __putLoggingOperation(self): pass def __getLoggingOperation(self): Bucket.getBucketLogStatus(user=self.utakaReq.user, bucket=self.utakaReq.bucket) def __putAclOperation(self): #READ BODY acp = AcpXml.fromXML(self.utakaReq.req.read()) Bucket.setBucketACP(user=self.utakaReq.user, bucket=self.utakaReq.bucket, accessControlPolicy=acp) pass def __getAclOperation(self): bucket_acp = Bucket.getBucketACP(bucket=self.utakaReq.bucket, user=self.utakaReq.user) if len(bucket_acp) == 0: '''bucket not found, throw error''' else: self.utakaReq.req.content_type = 'applicaton/xml' self.utakaReq.write(AcpXml.toXML(bucket_acp)) def __getXMLResponse(self, bucketDictionary, contentDictionaryList, commonPrefixesList): doc = xml.dom.minidom.Document() listBucketEl = doc.createElement(\\"ListBucketResult\\") listBucketEl.setAttribute('xmlns', 'http://s3.amazonaws.com/doc/2006-03-01/') nameEl = doc.createElement(\\"Name\\") nameEl.appendChild(doc.createTextNode(bucketDictionary.get('name'))) listBucketEl.appendChild(nameEl) prefixEl = doc.createElement(\\"Prefix\\") prefixEl.appendChild(doc.createTextNode(bucketDictionary.get('prefix', ''))) listBucketEl.appendChild(prefixEl) markerEl = doc.createElement(\\"Marker\\") markerEl.appendChild(doc.createTextNode(bucketDictionary.get('marker', ''))) listBucketEl.appendChild(markerEl) maxkeysEl = doc.createElement(\\"MaxKeys\\") maxkeysEl.appendChild(doc.createTextNode(str(bucketDictionary.get('max-keys', '')))) listBucketEl.appendChild(maxkeysEl) truncatedEl= doc.createElement(\\"IsTruncated\\") truncatedEl.appendChild(doc.createTextNode(bucketDictionary.get('isTruncated', ''))) listBucketEl.appendChild(truncatedEl) for val in contentDictionaryList: contentsEl = doc.createElement(\\"Contents\\") keyEl = doc.createElement(\\"Key\\") keyEl.appendChild(doc.createTextNode(val['key'])) contentsEl.appendChild(keyEl) lastModifiedEl = doc.createElement(\\"LastModified\\") lastModifiedEl.appendChild(doc.createTextNode(val['lastModified'])) contentsEl.appendChild(lastModifiedEl) eTagEl = doc.createElement(\\"ETag\\") eTagEl.appendChild(doc.createTextNode(val['eTag'])) contentsEl.appendChild(eTagEl) sizeEl = doc.createElement(\\"Size\\") sizeEl.appendChild(doc.createTextNode(str(val['size']))) contentsEl.appendChild(sizeEl) storageClassEl = doc.createElement(\\"StorageClass\\") storageClassEl.appendChild(doc.createTextNode(\\"STANDARD\\")) contentsEl.appendChild(storageClassEl) ownerEl = doc.createElement(\\"Owner\\") ownerIdEl = doc.createElement(\\"ID\\") ownerIdEl.appendChild(doc.createTextNode(str(val['owner']['id']))) ownerNameEl = doc.createElement(\\"DisplayName\\") ownerNameEl.appendChild(doc.createTextNode(val['owner']['name'])) ownerEl.appendChild(ownerIdEl) ownerEl.appendChild(ownerNameEl) contentsEl.appendChild(ownerEl) listBucketEl.appendChild(contentsEl) if commonPrefixesList: commonPrefixesEl = doc.createElement(\\"CommonPrefixes\\") for val in commonPrefixesList: commonPrefixEl = doc.createElement(\\"Prefix\\") commonPrefixEl.appendChild(doc.createTextNode(val)) commonPrefixesEl.appendChild(commonPrefixEl) listBucketEl.appendChild(commonPrefixesEl) doc.appendChild(listBucketEl) return doc.toxml('utf-8')"},{"prompt":"Write a Python program to optimize a given array of integers such that each element is greater than or equal to the previous element in the array. [7, 2, 5, 8, 4, 0]","completion":"def optimize_array(array): optimized_array = [] prev = -float(\\"inf\\") for n in array: if(n>=prev): optimized_array.append(n) prev = n return optimized_array array = [7, 2, 5, 8, 4, 0] print(optimize_array(array)) # Output: [7, 5, 8, 4]"},{"prompt":"Create a Python function that takes an array of numbers and returns true if the array is sorted in increasing order, and false otherwise","completion":"def is_sorted(array): for i in range(len(array)-1): if array[i] > array[i+1]: return False return True"},{"prompt":"Create a python script to read a JSON object and print out its values. { name: Adam, age: 24, city: New York }","completion":"import json data = json.loads('{ \\"name\\": \\"Adam\\", \\"age\\": 24, \\"city\\": \\"New York\\" }') print(\\"Name: \\", data['name']) print(\\"Age: \\", data['age']) print(\\"City: \\", data['city'])"},{"prompt":"The code is a Python script that parses metadata.csv files in a given SIPPath. To use the script, import the necessary modules and call the function \`parseMetadata(SIPPath)\` with the path to the SIP as an argument. The function returns a dictionary of metadata, where the keys are filenames and the values are ordered dictionaries of metadata values. The script can be run from the command line by passing the path to the SIP as an argument.","completion":"#!/usr/bin/env python2 # # This file is part of Archivematica. # # Copyright 2010-2012 Artefactual Systems Inc. <http://artefactual.com> # # Archivematica is free software: you can redistribute it and/or modify # it under the terms of the GNU Affero General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # Archivematica is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with Archivematica. If not, see <http://www.gnu.org/licenses/>. # @package Archivematica # @subpackage archivematicaClientScript # @author Joseph Perry <joseph@artefactual.com> # @version svn: Id #/src/dashboard/src/main/models.py import collections import csv import os import sys import traceback # archivematicaCommon import archivematicaFunctions from custom_handlers import get_script_logger from sharedVariablesAcrossModules import sharedVariablesAcrossModules def parseMetadata(SIPPath): \\"\\"\\" Parse all metadata.csv files in SIPPath. Looking for metadata.csvs in metadata/ and objects/metadata/transfers/<transfer name>/metadata/ See parseMetadataCSV for details on parsing. :param SIPPath: Path to the SIP :return: {<filename>: OrderedDict(key: [values]) } \\"\\"\\" all_metadata = {} metadata_csvs = archivematicaFunctions.find_metadata_files(SIPPath, 'metadata.csv') for metadataCSVFilePath in metadata_csvs: try: csv_metadata = parseMetadataCSV(metadataCSVFilePath) except Exception: print >>sys.stderr, \\"error parsing: \\", metadataCSVFilePath traceback.print_exc(file=sys.stderr) sharedVariablesAcrossModules.globalErrorCount += 1 continue # Provide warning if this file already has differing metadata # Not using all_metadata.update(csv_metadata) because of that for entry, values in csv_metadata.iteritems(): if entry in all_metadata and all_metadata[entry] != values: print >> sys.stderr, 'Metadata for', entry, 'being updated. Old:', all_metadata[entry], 'New:', values existing = all_metadata.get(entry, collections.OrderedDict()) existing.update(values) all_metadata[entry] = existing return all_metadata def parseMetadataCSV(metadataCSVFilePath): \\"\\"\\" Parses the metadata.csv into a dict with entries for each file. Each file's entry is an OrderedDict containing the column header and a list of values for each column. Example CSV: Filename,dc.title,dc.type,dc.type,Other metadata objects/foo.jpg,Foo,Photograph,Still Image,Taken on a sunny day objects/bar/,Bar,Photograph,Still Image,All taken on a rainy day Produces: { 'objects/foo.jpg': OrderedDict(dc.title=[Foo], dc.type=[Photograph, Still Image], Other metadata=[Taken on a sunny day]) 'objects/bar': OrderedDict(dc.title=[Bar], dc.date=[Photograph, Still Image], Other metadata=[All taken on a rainy day]) } :param metadataCSVFilePath: Path to the metadata CSV to parse :return: {<filename>: OrderedDict(<metadata name>: [<metadata value>]) } \\"\\"\\" metadata = {} # use universal newline mode to support unusual newlines, like r with open(metadataCSVFilePath, 'rbU') as f: reader = csv.reader(f) # Parse first row as header header = reader.next() # Strip filename column, strip whitespace from header values header = [h.strip() for h in header[1:]] # Parse data for row in reader: if not row: continue entry_name = row[0] if entry_name.endswith(\\"/\\"): entry_name = entry_name[:-1] # Strip file/dir name from values row = row[1:] values = archivematicaFunctions.OrderedListsDict(zip(header, row)) if entry_name in metadata and metadata[entry_name] != values: print >> sys.stderr, 'Metadata for', entry_name, 'being overwritten. Old:', metadata[entry_name], 'New:', values metadata[entry_name] = values return collections.OrderedDict(metadata) # Return a normal OrderedDict if __name__ == '__main__': logger = get_script_logger(\\"archivematica.mcp.client.createMETSMetadataCSV\\") parseMetadata(sys.argv[1])"},{"prompt":"Write a Python program to print the day of week for a specific date. Date: 21 October 2020","completion":"import datetime date_str = \\"21 October 2020\\" date = datetime.datetime.strptime(date_str, \\"%d %B %Y\\") print(date.strftime(\\"%A\\"))"},{"prompt":"Create an algorithm in Python to find the smallest common multiple of two numbers. 9, 12","completion":"def smallestCommonMultiple(n1, n2): n1_factors = set(getFactors(n1)); n2_factors = set(getFactors(n2)); # Get the union of the two sets, # then find the product of the union set scm = 1; for factor in n1_factors.union(n2_factors): scm *= factor; return scm; # A method to return the factors of a number def getFactors(n): factors = []; for i in range(2, n+1): if n % i == 0: factors.append(i); n //= i; return factors; # Testing print(smallestCommonMultiple(9, 12)) # Outputs 36"},{"prompt":"Create a class in Python that will represent a tree. The class should include methods for adding and removing nodes. Not applicable","completion":"class Tree: def __init__(self, data=None): self.data = data self.children = [] def add_child(self, obj): self.children.append(obj) def remove_child(self, obj): self.children.remove(obj) root = Tree('root') node1 = Tree('node1') node2 = Tree('node2') root.add_child(node1) root.add_child(node2)"},{"prompt":"Develop a python program to find the maximum depth of a binary tree.","completion":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None def maxDepth(node): if node is None: return 0 else: leftDepth = maxDepth(node.left) rightDepth = maxDepth(node.right) if leftDepth > rightDepth: return leftDepth+1 else: return rightDepth+1 if __name__ == '__main__': root = Node(1) root.left = Node(2) root.right = Node(3) root.left.left = Node(4) print(maxDepth(root))"},{"prompt":"Create a Python program that takes in a list of numbers and outputs the sum of itself and all its previous numbers (including the number itself). [2, 3, 4, 5, 6]","completion":"def sum_of_all(nums): sum = 0 for i in range(len(nums)): sum += sum(nums[:i+1]) return sum #Test print(sum_of_all([2, 3, 4, 5, 6])) # Output: 20"},{"prompt":"The given code is a Python script that defines a function called scenario and a function called check. The scenario function takes a list of wallets as input and performs a series of actions using the testlib library. The check function takes a state_engine object as input and checks if certain conditions are met. To use this code, import the necessary libraries and call the scenario and check functions as needed.","completion":"#!/usr/bin/env python2 # -*- coding: utf-8 -*- \\"\\"\\" Blockstack ~~~~~ copyright: (c) 2014-2015 by Halfmoon Labs, Inc. copyright: (c) 2016 by Blockstack.org This file is part of Blockstack Blockstack is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. Blockstack is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with Blockstack. If not, see <http://www.gnu.org/licenses/>. \\"\\"\\" import testlib import json import virtualchain wallets = [ testlib.Wallet( \\"5JesPiN68qt44Hc2nT8qmyZ1JDwHebfoh9KQ52Lazb1m1LaKNj9\\", 100000000000 ), testlib.Wallet( \\"5KHqsiU9qa77frZb6hQy9ocV7Sus9RWJcQGYYBJJBb2Efj1o77e\\", 100000000000 ), testlib.Wallet( \\"5Kg5kJbQHvk1B64rJniEmgbD83FpZpbw2RjdAZEzTefs9ihN3Bz\\", 100000000000 ), testlib.Wallet( \\"5JuVsoS9NauksSkqEjbUZxWwgGDQbMwPsEfoRBSpLpgDX1RtLX7\\", 100000000000 ), testlib.Wallet( \\"5KEpiSRr1BrT8vRD7LKGCEmudokTh1iMHbiThMQpLdwBwhDJB1T\\", 100000000000 ) ] consensus = \\"17ac43c1d8549c3181b200f1bf97eb7d\\" def scenario( wallets, **kw ): testlib.blockstack_namespace_preorder( \\"test\\", wallets[1].addr, wallets[0].privkey ) testlib.next_block( **kw ) testlib.blockstack_namespace_reveal( \\"test\\", wallets[1].addr, 52595, 250, 4, [6,5,4,3,2,1,0,0,0,0,0,0,0,0,0,0], 10, 10, wallets[0].privkey ) testlib.next_block( **kw ) resp = testlib.blockstack_name_import( \\"foo.test\\", wallets[2].addr, \\"11\\" * 20, wallets[1].privkey ) if 'error' in resp: print json.dumps(resp, indent=4 ) testlib.next_block( **kw ) resp = testlib.blockstack_name_import( \\"foo.test\\", wallets[3].addr, \\"22\\" * 20, wallets[1].privkey ) if 'error' in resp: print json.dumps(resp, indent=4 ) testlib.next_block( **kw ) resp = testlib.blockstack_name_import( \\"foo.test\\", wallets[4].addr, \\"44\\" * 20, wallets[1].privkey ) resp = testlib.blockstack_name_import( \\"foo.test\\", wallets[4].addr, \\"55\\" * 20, wallets[1].privkey ) resp = testlib.blockstack_name_import( \\"foo.test\\", wallets[4].addr, \\"33\\" * 20, wallets[1].privkey ) if 'error' in resp: print json.dumps(resp, indent=4 ) testlib.next_block( **kw ) testlib.blockstack_namespace_ready( \\"test\\", wallets[1].privkey ) testlib.next_block( **kw ) def check( state_engine ): # not revealed, but ready ns = state_engine.get_namespace_reveal( \\"test\\" ) if ns is not None: return False ns = state_engine.get_namespace( \\"test\\" ) if ns is None: return False if ns['namespace_id'] != 'test': return False # each name must exist foo = state_engine.get_name( \\"foo.test\\" ) if foo is None: return False if foo['value_hash'] != \\"33\\" * 20: return False if foo['address'] != wallets[4].addr or foo['sender'] != virtualchain.make_payment_script(wallets[4].addr): return False return True"},{"prompt":"Design a program which encrypts a given string replacing all the vowels with the corresponding successive vowel. word = python","completion":"def encrypt_string(word): vowels = ('a', 'e', 'i', 'o', 'u') encrypted_word = \\"\\" for ch in word: if ch in vowels: if ch == \\"u\\": encrypted_word += \\"a\\" else: encrypted_word += chr(ord(ch) + 1) else: encrypted_word += ch return encrypted_word word = \\"python\\" print(encrypt_string(word)) # Output: # 'pythun'"},{"prompt":"Design a class in Python to implement a doublylinked list.","completion":"class Node: def __init__(self, data): self.data = data self.prev = None self.next = None class DLinkedList: def __init__(self): self.head = None self.tail = None def add(self, data): node = Node(data) if self.head is None: self.head = node else: self.tail.next = node node.prev = self.tail self.tail = node def delete(self, node): if node.prev is not None: node.prev.next = node.next else: self.head = node.next if node.next is not None: node.next.prev = node.prev else: self.tail = node.prev"},{"prompt":"Generate a stack trace for the following Python program import traceback def foo(x, y): return x/y try: foo(10, 0) except: traceback.print_exc()","completion":"Traceback (most recent call last): File \\"code.py\\", line 6, in <module> foo(10, 0) File \\"code.py\\", line 3, in foo return x/y ZeroDivisionError: division by zero"},{"prompt":"Write an algorithm in Python to calculate the nth prime number. Not applicable","completion":"def nth_prime(n): primes = [2] num = 3 while len(primes) < n: isPrime = True for prime in primes: if num % prime == 0: isPrime = False break if isPrime: primes.append(num) num += 2 return primes[n-1] #Example print(nth_prime(100))"},{"prompt":"Can you write a Python program to extract the list of email addresses from a given webpage?","completion":"import re import requests def extract_email_addresses(url): r = requests.get(url) emails = re.findall(r\\"[a-z0-9.-+_]+@[a-z0-9.-+_]+.[a-z]+\\", r.text) return emails email_list = extract_email_addresses('https://example.org') for email in email_list: print(email)"},{"prompt":"Write a Python function to classify a given string based on the following conditions: A) If the length of the string is less than 3, “Short” B) If the string only contains alphabets, “Alphabet” C) If the string only contains numbers, “Numeral” string = ab1","completion":"def classify_string(string): if len(string) < 3: return \\"Short\\" elif string.isalpha(): return \\"Alphabet\\" elif string.isnumeric(): return \\"Numeral\\""},{"prompt":"Generate a Python function that takes as input a UTF8 encoded string and returns a string where the characters in odd positions of the original string are repeated. string = ‘HelloWorld’","completion":"def repeat_char(s): result = '' for i,c in enumerate(s): if i % 2 == 0: result += c else: result += c*2 return result print(repeat_char('HelloWorld')) # Output: HeellooWorrlld"},{"prompt":"Write a python program to split a list into two halves data = [1, 2, 3, 4, 5]","completion":"def split_list(data): # Calculate the length of data length = len(data) # calculate the midpoint of the list midpoint = length//2 # split the data into two halves first_half = data[:midpoint] second_half = data[midpoint:] return first_half, second_half split_list([1, 2, 3, 4, 5]) # Returns ([1, 2], [3, 4, 5])"},{"prompt":"Generate a Python program to classify a given list of numbers using try and except block. list_of_numbers = [16, 5, 9, 21, 17]","completion":"def classify_numbers(list_of_numbers): for number in list_of_numbers: try: if number % 3 == 0: print('Number {} is divisible by 3'.format(number)) except ZeroDivisionError: print('Number {} cannot be divided by 3: division by zero bug'.format(number))"},{"prompt":"Develop a Python program that takes a list of numbers as an input and outputs the numbers in the list sorted in ascending order. [5, 3, 7, 2, 4, 9, 1]","completion":"def sortAscending(list): list.sort() return list # Driver Code list = [5, 3, 7, 2, 4, 9, 1] print(sortAscending(list)) # Output: [1, 2, 3, 4, 5, 7, 9]"},{"prompt":"Write a web scraper using Python to collect a table of results from a specific web page. Make sure the code is userfriendly, meaning it is easy for a user to change the query and the results returned. URL: http://example.com","completion":"import requests from lxml import html url = \\"http://example.com\\" r = requests.get(url) tree = html.fromstring(r.content) # Scrape table with results table = tree.xpath('//table[@id=\\"results-table\\"]')[0] # Access table entries rows = table.xpath('.//tr') for row in rows: cells = row.xpath('.//td') for cell in cells: print(cell.text_content())"},{"prompt":"Write a Python program to sort a list of lists of integers by the first element of the sublists. The list should be sorted in ascending order. [[2, 4, 6], [1, 9, 8], [3, 7, 5]]","completion":"def sortList(lst): lst.sort(key = lambda x: x[0]) return lst result = sortList([[2, 4, 6], [1, 9, 8], [3, 7, 5]]) print(result)"},{"prompt":"Design a python program to find the longest substring in a string with no repeating characters.","completion":"def longest_substring(string): # Keep track of the longest substring longest_substring = \\"\\" start_index = 0 # Iterate over each letter in the string for current_index in range(len(string)): # Check if the current letter has occurred before in the substring if string[current_index] in string[start_index:current_index]: # If so, the previous substring is no longer valid start_index = current_index # Check if the current substring is longer than the longest longest_substring = max(longest_substring, string[start_index:current_index+1], key=len) return longest_substring"},{"prompt":"Create a simple Python class that captures the number of clicks a user makes on a given button.","completion":"class ClickCounter: def __init__(self): self.click_count = 0 def record_click(self): self.click_count += 1 def get_click_count(self): return self.click_count"},{"prompt":"Generate a class for a Fibonacci series in Python","completion":"class FibonacciSeries: '''This class will generate a Fibonacci series''' def __init__(self, length): self.length = length self.series = [] def generate_series(self): '''Generates a Fibonacci series of a given length''' a = 0 b = 1 while len(self.series) < self.length: c = a + b self.series.append(c) a, b = b, c # Parallel Assignment if __name__ == '__main__': fibonacci_series = FibonacciSeries(10) fibonacci_series.generate_series() print(fibonacci_series.series) # Output: [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]"},{"prompt":"Design a Python program to print all keywords in a given paragraph. The best way to learn a programming language is to practice coding.","completion":"text = \\"The best way to learn a programming language is to practice coding.\\" words = text.split() keywords = [\\"for\\", \\"if\\", \\"while\\", \\"in\\", \\"range\\", \\"def\\", \\"import\\", \\"from\\", \\"as\\", \\"return\\"] for word in words: if word in keywords: print(word)"},{"prompt":"Create a Python script that can search, sort, and filter an array of strings. list = [apple,orange,banana,grapes,Mango]","completion":"list = [\\"apple\\",\\"orange\\",\\"banana\\",\\"grapes\\",\\"Mango\\"] # function to search elements in given array def searchElement(arr, val): for i in range(len(arr)): if arr[i] == val: return i return -1 # function to sort array in ascending order def sortArray(arr): n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] # function to filter even elements def filterElement(arr): for i in range(len(arr)): if(arr[i] % 2 == 0): arr.remove(arr[i]) # Driver Code val = 'grapes' index = searchElement(list, val) if index != -1: print(\\"%s is present at index %d\\" %(val, index)) else: print(\\"%s is not present\\" %val) print(\\"Unsorted array:\\", list) sortArray(list) print(\\"Sorted array:\\", list) filterElement(list) print(\\"Filtered array:\\", list)"},{"prompt":"Construct an algorithm in Python to find the length of the longest contiguous subarray of an array with equal number of 0's and 1's. arr = [1, 0, 0, 1, 0, 1, 1, 0]","completion":"def find_longest_subarray_length(arr): s = 0 e = 0 max_length = 0 while e < len(arr): if arr[e] == 1: e += 1 else: num_ones = e - s num_zeros = 1 while e < len(arr) and arr[e] == 0: num_zeros += 1 e += 1 if num_ones == num_zeros: max_length = max(max_length, (num_ones + num_zeros)) s = e return max_length"},{"prompt":"Create a basic bot in Python that can respond to various queries. Not applicable","completion":"import re bot_greeting = \\"Hello! I am a bot. I'm here to help you.\\" bot_unknown = \\"I'm sorry, I don't understand. Please ask me something else.\\" def respond(message): if \\"hi\\" in message.lower(): return bot_greeting elif \\"how are you\\" in message.lower(): return \\"I'm doing well, thanks for asking!\\" elif \\"what can you do\\" in message.lower(): return \\"I can answer questions about myself, like who created me or what language I'm written in.\\" elif re.search(\\"[Aa]re you .*\\", message): return \\"I'm just a bot, so I don't have feelings.\\" else: return bot_unknown"},{"prompt":"Create a core library in Python which can be used to create a web application.","completion":"import flask app = flask.Flask(__name__) # Create routes and functions for the web application @app.route('/') def index(): return 'This is the main page of the web application!'"},{"prompt":"Write a Python program that uses a while loop to calculate a Fibonacci sequence up to the given upper limit. Upper limit: 10","completion":"upper_limit = 10 fibonacci_sequence = [0, 1] a = 0 b = 1 while b <= upper_limit: c = a + b a = b b = c fibonacci_sequence.append(b) print(fibonacci_sequence) # Output: [0, 1, 1, 2, 3, 5, 8, 13]"},{"prompt":"This code is an entry point for a CLI tool. It defines a main function that takes commandline arguments using the argparse module. The function parses the arguments and performs some meaningful action based on the arguments. To use this code, define a CLI tool and call the main function with appropriate arguments.","completion":"#!/usr/bin/env python3 # # Copyright {{ cookiecutter.author_name }}, {{ cookiecutter.initial_year_to_release }} # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. \\"\\"\\" {{ cookiecutter.package_name }}.cli ----------------------------------- Entry for the \`{{ cookiecutter.package_name }}\` CLI. \\"\\"\\" import sys import argparse from {{ cookiecutter.package_name }} import __version__ from {{ cookiecutter.package_name }}.utils.environment import python_version from {{ cookiecutter.package_name }}.api.greetings import Greetings from {{ cookiecutter.package_name }}.api.greetings import howdy_greeting def main(argv=sys.argv): parser = argparse.ArgumentParser() parser.add_argument( \\"-V, --version\\", help=\\"show the version and exit\\", action=\\"version\\", version=\\"%(prog)s: version {version} (Python {pyversion})\\".format(version=__version__, pyversion=python_version())) parser.add_argument( \\"-c, --cowboy\\", help=\\"cowboy greeting\\", action=\\"store_true\\", dest=\\"iscowboy\\", default=False) args = parser.parse_args() # Do some meaningful ... if args.iscowboy: print(howdy_greeting()) else: greetings = Greetings() print(greetings) return 0"},{"prompt":"Develop a Python script that prints the unique words in a string, along with their respective counts. The quick brown fox jumped over the lazy dog.","completion":"from collections import Counter string = \\"The quick brown fox jumped over the lazy dog.\\" words = string.split() word_counts = Counter(words) unique_words = set(words) for word in unique_words: print(f\\"{word:15} {word_counts[word]:3}\\")"},{"prompt":"Edit the following Python code to give the output as [400, 125, 10,1]. val = [1, 10, 125, 400] res = [] for v in val: res.append(v)","completion":"val = [1, 10, 125, 400] res = [] for v in reversed(val): res.append(v) print(res) # Output: [400, 125, 10,1]"},{"prompt":"Create a Python program that prints the Roman numerals representation for any given number. Not applicable","completion":"def Roman(number): roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'} result = '' for num in roman.keys(): while number >= num: result += roman[num] number -= num print (result) number = int(input('Enter a number: ')) Roman(number)"},{"prompt":"Create a Python function to optimize an objective function using gradient descent.","completion":"def gradient_descent(objective_function, gradients, learning_rate, initial_parameters): parameters = initial_parameters while True: # Step 1: Calculate Gradient grads = gradients(parameters) # Step 2: Update parameters parameters -= learning_rate * grads # Step 3: Check stopping criteria if np.allclose(grads, 0): break return parameters"},{"prompt":"Develop a Python program to check if a given number is a power of two. Number = 16","completion":"def is_power_of_two(x): while x % 2 == 0 and x > 1: x = x / 2 return x == 1 num = 16 print(is_power_of_two(num))"},{"prompt":"Create a basic optimization program in Python to find the maximum profit generated by a portfolio. Number of stocks: 3 Initial investment: 1000 Daily stock prices: day 1: [200, 150, 250] day 2: [300, 250, 250] day 3: [250, 200, 220]","completion":"#importing libraries import pulp #creating array stocks = [\\"a\\", \\"b\\", \\"c\\"] #creating problem prob = pulp.LpProblem(\\"Maximise Profit\\", pulp.LpMaximize) #creating variables x = pulp.LpVariable.dicts(\\"number of stocks\\", stocks, lowBound=0) #creating objective function prob += pulp.lpSum([200*x[\\"a\\"], 150*x[\\"b\\"], 250*x[\\"c\\"]]), \\"Maximizing Profit\\" #constraints prob += x[\\"a\\"] + x[\\"b\\"] + x[\\"c\\"] <= 4, \\"Total Cost\\" prob += x[\\"a\\"] * 300 + x[\\"b\\"] * 250 + x[\\"c\\"] * 250 <= 1000, \\"Investment Cost\\" #solving problem prob.solve() #printing results for stock in stocks: print(\\"Number of\\", stock, \\"stocks bought:\\", pulp.value(x[stock])) #printing total profit print(\\"Total Profit:\\", pulp.value(prob.objective))"},{"prompt":"Generate code to apply a KMeans clustering algorithm on a given dataset using Scikit learn in Python. iris.csv ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species'] [4.7, 3.2, 1.3, 0.2, 'setosa'] [4.6, 3.1, 1.5, 0.2, 'setosa'] [5.4, 3.9, 1.7, 0.4, 'setosa']","completion":"import pandas as pd from sklearn.cluster import KMeans # load and prepare the data data = pd.read_csv('iris.csv') X = data.iloc[:, :-1].values # apply K-Means clustering kmeans = KMeans(n_clusters = 3, init = 'k-means++', random_state=0) pred_y = kmeans.fit_predict(X) # visualise the clusters plt.scatter(X[pred_y == 0, 0], X[pred_y == 0, 1], s = 100, c = 'red', label = 'Iris-setosa') plt.scatter(X[pred_y == 1, 0], X[pred_y == 1, 1], s = 100, c = 'blue', label = 'Iris-versicolor') plt.scatter(X[pred_y == 2, 0], X[pred_y == 2, 1], s = 100, c = 'green', label = 'Iris-virginica') # plot centroids plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s = 200, c = 'yellow', label = 'Centroids') plt.legend() plt.show()"},{"prompt":"Write a python code snippet to identify a word is a palindrome or not. word: radar","completion":"# Python code to identify word is palindrome or not word = 'radar' # Reversing a word rev_word = word[::-1] # checking if the word is equal to its reverse if (word == rev_word): print(\\"The word is a palindrome.\\") else: print(\\"The word is not a palindrome.\\")"},{"prompt":"Create a web application using Python and Flask which takes an animal name as input and displays a short description about the animal. Lio","completion":"from flask import Flask, render_template, request app = Flask(__name__) @app.route('/', methods=['GET', 'POST']) def index(): if request.method == 'POST': animal = request.form['animal']; if animal == 'Lion': description = 'The lion is a large mammal of the family Felidae. It is a formidable and famous predator of the African savanna. It has a majestic presence and strength.' else: description = 'No description available.' return render_template(\\"index.html\\", description=description) return render_template(\\"index.html\\") if __name__ == \\"__main__\\": app.run() # index.html content <h1>Animal Description</h1> <form method=\\"post\\"> <p>Enter the Animal name: <input type=\\"text\\" name=\\"animal\\" /></p> <input type=\\"submit\\" value=\\"Submit\\" /> </form> <p>{{ description }}</p>"},{"prompt":"Generate a Python class to represent Course objects with fields such as course title, description and rating.","completion":"class Course: def __init__(self, title, description, rating): self.title = title self.description = description self.rating = rating def get_title(self): return self.title def get_description(self): return self.description def get_rating(self): return self.rating"},{"prompt":"Write a Python function that normalizes a given string. The function should remove all the special characters from the string and convert it to all lowercase. Hello,! W0rld.","completion":"def normalize_string(text): text = text.lower() text = ''.join(ch for ch in text if ch.isalnum() or ch == ' ') return text"},{"prompt":"Rewrite the given Python code to use list comprehension. numbers = [1, 2, 3, 4, 5] new_numbers = [] for n in numbers: new_numbers.append(n * 2)","completion":"numbers = [1, 2, 3, 4, 5] new_numbers = [n * 2 for n in numbers]"},{"prompt":"Create a Python program to retrieve real time data from a web API.","completion":"import requests # Make a get request to get the latest position of the International Space Station response = requests.get(\\"http://api.open-notify.org/iss-now.json\\") # Print the status code of the response print(response.status_code)"},{"prompt":"Develop a program in Python for printing an asterisk triangle consisting of n rows. 5","completion":"def asterisk_triangle(n): for i in range(n): for j in range(i+1): print('*', end=\\" \\") print() n = 5 asterisk_triangle(n)"},{"prompt":"Normalize a string in Python.","completion":"def normalize(string): return string.lower().strip()"},{"prompt":"Find any bugs in the following Python function. def calculate_tax(item_cost, tax_rate): return item_cost * (1 + tax_rate)","completion":"The function is correct but the parameter names could be more descriptive. For example, 'item_cost' could be 'price' and 'tax_rate' could be 'tax_percentage'. Another bug is that the function does not round the result to the nearest hundredth. This could cause the result to be slightly inaccurate. To fix this, add a call to the 'round()' function. def calculate_tax(price, tax_percentage): return round(price * (1 + tax_percentage), 2)"},{"prompt":"Design a program using Python to scrape data from a website. The target website is https://www.amazon.com/.","completion":"import requests from bs4 import BeautifulSoup URL = 'https://www.amazon.com/' page = requests.get(URL) soup = BeautifulSoup(page.content, 'html.parser') #find all products products = soup.find_all('span', class_ = 'a-size-medium a-color-base a-text-normal') # iterate through products for product in products: # find product title, price, etc. title = product.find('span', class_ = 'a-size-medium a-color-base a-text-normal') price = product.find('span', class_ = 'a-price-whole') print(title.text) print(price.text)"},{"prompt":"mprove the performance of the following code using Python's inbuilt functions. s = 'Google' count = 0 for i in range(len(s)): if s[i] == 'o': count+=1","completion":"s = 'Google' # improved code # use of built-in functions to count the number of occurrences of 'o' in a string count = s.count('o') print('Number of occurrences of \\"o\\": {}'.format(count))"},{"prompt":"mplement a function for displaying integers from 1 to 10, using Python.","completion":"def print_numbers(): for i in range(1, 11): print(i) print_numbers()"},{"prompt":"Create a python class to store the data of a student","completion":"class Student: def __init__(self, name, age, gender, major, gpa): self.name = name self.age = age self.gender = gender self.major = major self.gpa = gpa def print_student_info(self): print(\\"Name: {}\\".format(self.name)) print(\\"Age: {}\\".format(self.age)) print(\\"Gender: {}\\".format(self.gender)) print(\\"Major: {}\\".format(self.major)) print(\\"GPA: {}\\".format(self.gpa))"},{"prompt":"Develop a Python program which takes two numbers in input and prints the sum of them.","completion":"def add(num1, num2): sum = num1 + num2 print(sum) # Driver code num1 = int(input(\\"Enter num1: \\")) num2 = int(input(\\"Enter num2: \\")) add(num1, num2)"},{"prompt":"Create a class to represent a door in a Python program.","completion":"class Door: #Initializing a door with default values def __init__(self, is_open=False, color=\\"brown\\", material=\\"wood\\"): self.is_open = is_open self.color = color self.material = material #Function to open door def open_door(self): self.is_open = True #Function to close door def close_door(self): self.is_open = False"},{"prompt":"Can you write a Python program to construct a binary tree from given inorder and postorder traversals? inorder = [4, 8, 2, 5, 1, 6, 3, 7] postorder = [8, 4, 5,2, 6, 7, 3, 1]","completion":"class Node: def __init__(self, key): self.key = key self.left = None self.right = None def buildTree(inorder, postorder, inStrt, inEnd): if (inStrt > inEnd): return None node = Node(postorder[buildTree.postIndex]) buildTree.postIndex -= 1 if inStrt == inEnd: return node else: inIndex = search(inorder, inStrt, inEnd, node.key) node.right = buildTree(inorder, postorder, inIndex + 1, inEnd) node.left = buildTree(inorder, postorder, inStrt, inIndex - 1) return node def search(arr, start, end, value): for i in range(start, end + 1): if arr[i] == value: return i def printInorder(node): if node is None: return printInorder(node.left) print(node.key, end=\\" \\") printInorder(node.right) inStrt = 0 inEnd = len(inorder) - 1 buildTree.postIndex = len(postorder) - 1 root = buildTree(inorder, postorder, inStrt, inEnd) print(\\"Inorder traversal of the constructed tree: \\") printInorder(root)"},{"prompt":"mplement a bubble sorting algorithm in Python.","completion":"def bubbleSort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j]"},{"prompt":"Write a python program to calculate the sum of the divisors of a number n = 15","completion":"def sum_divisors(n): '''Returns the sum of all divisors of the given number.''' if n <= 1: return 0 #assume n is a positive integer sum_divisors = 1 for i in range(2, int(n/2)+1): if n % i == 0: sum_divisors += i return sum_divisors"},{"prompt":"Write a Python program that performs linear regression. The program should generate a prediction given an input and a list of parameters. Input: 5 Parameters: [0.5, 1.2, 3.1]","completion":"import numpy as np def predict(x, params): x = np.array(x) params = np.array(params) y = 0 for i in range(params.shape[0]): y += params[i] * x ** i return y x = 5 params = [0.5, 1.2, 3.1] y = predict(x, params) print(y) # Output: 35.4"},{"prompt":"Create a python program for the following task: given a set of values, output the count of the mode of the set.","completion":"def get_mode_count(list_of_values): count_dict = dict() max_count = 0 for value in list_of_values: if value in count_dict: count_dict[value] += 1 else: count_dict[value] = 1 max_count = max(max_count, count_dict[value]) mode_count = 0 for key in count_dict: if count_dict[key] == max_count: mode_count += 1 return mode_count"},{"prompt":"Design an algorithm in Python to find the most frequent words in a given string. The the quick brown fox quickjumps over the lazy dog","completion":"#Function to find most frequent words def most_frequent_words(sentence): #Split the sentence into words using the split method word_list = sentence.split() #Create a dictionary to count the number of occurrences of each word word_dict = dict() for word in word_list: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 #Find the most frequent word max_occurrences = max(word_dict.values()) most_frequent_words = [key for key, value in word_dict.items() if value == max_occurrences] return most_frequent_words #Call the function print(most_frequent_words(\\"The the quick brown fox quickjumps over the lazy dog\\"))"},{"prompt":"Create a GUI in Python using Tkinter that can register user input and display a respective result.","completion":"import tkinter as tk root = tk.Tk() def calculate_result(): result = input_field.get() output_label.config(text=result) input_field = tk.Entry(root) input_field.pack() submit_button = tk.Button(root, text=\\"Calculate\\", command = calculate_result) submit_button.pack() output_label = tk.Label(root, text=\\"Result...\\") output_label.pack() root.mainloop()"},{"prompt":"Create a Python script to extract all emails from a given list of web urls. urls: [http://example.com, http://example.org]","completion":"import re import requests urls = [\\"http://example.com\\", \\"http://example.org\\"] for url in urls: r = requests.get(url) emails = re.findall(r'[w.-]+@[w.-]+', r.text) print(emails)"},{"prompt":"Create a Python script to find the most common word in a string. Today is a beautiful day","completion":"# Split the string into words words = \\"Today is a beautiful day\\".split() # Initialize a dictionary count = {} # Iterate over each word in the list for word in words: # If the word is already in the dictionary, increment its frequency if word in count: count[word] += 1 # Else, set its frequency to 1 else: count[word] = 1 # Get the most frequently occurring element in the list max_value = max(count.values()) max_key = max(count, key=count.get) print(max_key, \\"is the most frequent word\\")"},{"prompt":"Optimize this code to calculate the sum of squares of all numbers from 1 to 10 in Python. total = 0 for i in range(1, 11): total += i *","completion":"total = sum(i**2 for i in range(1, 11))"},{"prompt":"Write a Python program to load the sklearn package.","completion":"import sklearn"},{"prompt":"Write an API endpoint for a basic user authentication system in Python. It should accept a username and password, validate them, and return a token if the user is valid. username: john password: pass123","completion":"import jwt @app.route('/auth', methods=['POST']) def auth(): username = request.form.get('username') password = request.form.get('password') # authenticate the user here token = jwt.encode({'username': username}, app.config['SECRET_KEY']) return token"},{"prompt":"Develop a Python program to find the maximum sum of a subarray of size K. arr = [100, 200, 300, 400] K = 2","completion":"def maximum_sum_subarray(arr, K): max_sum = 0 window_sum = 0 # Compute the window sum for i in range(K): window_sum += arr[i] # Replace max_sum if current window sum is greater max_sum = max(window_sum, max_sum) # Slide the window for i in range(K, len(arr)): window_sum += arr[i] - arr[i - K] # Replace max_sum if current window sum is greater max_sum = max(window_sum, max_sum) return max_sum"},{"prompt":"Write a Python program that determines whether the given string is a palindrome. String: racecar","completion":"def is_palindrome(string): if len(string) <= 1: return True else: letter_1 = string[0] letter_2 = string[-1] if letter_1 != letter_2: return False else: new_word = string[1:-1] return is_palindrome(new_word)"},{"prompt":"Write a Python class to create objects that represent a movie and its properties.","completion":"class Movie: def __init__(self, title, description, rating): self.title = title self.description = description self.rating = rating def print_info(self): print('Title: {}'.format(self.title)) print('Description: {}'.format(self.description)) print('Rating: {}'.format(self.rating))"},{"prompt":"This code connects to the Pocket API, retrieves a user's unread articles, and saves them to a JSON file. To use this code, you will need to replace the POCKET_CONSUMER_KEY and REDIRECT_URI variables with your own values. You will also need to install the Pocket Python library and the Django web framework. Once you have done this, you can run the code and it will prompt you to authorize the app with your Pocket account. After you have authorized the app, it will retrieve your unread articles and save them to a JSON file.","completion":"import os import sys import requests import time from pocket import Pocket import webbrowser import collections import json sys.dont_write_bytecode = True os.environ.setdefault(\\"DJANGO_SETTINGS_MODULE\\", \\"trex.settings\\") import django django.setup() from restapi.models import * from random import randint # POCKET_CONSUMER_KEY = '67853-fa80baf944f56fd495dab319' #Desktop POCKET_CONSUMER_KEY = '67853-17e07228b29f7c44ef6d2784' # Web REDIRECT_URI = 'http://localhost:8000/home/about' ''' # connecting to pocket API; pocket_api stores the http response pocket_api = requests.post('https://getpocket.com/v3/oauth/request', data={'consumer_key': POCKET_CONSUMER_KEY, 'redirect_uri': 'http://localhost:8000/home/about'}) print pocket_api.status_code # if 200, it means all ok. print pocket_api.headers # prints in JSON format print pocket_api.text code = pocket_api.text.split('=')[1] print code os.system('chrome \\"https://getpocket.com/auth/authorize?request_token={}&redirect_uri={}\\"'.format(code, 'http://localhost:8000/home/about')) time.sleep(5) print '--------------------------------------------' pocket_auth = requests.post('https://getpocket.com/v3/oauth/authorize', data={'consumer_key': POCKET_CONSUMER_KEY, 'code': code}) print pocket_auth.status_code print pocket_auth.text pocket_access_token = pocket_auth.text.split('=')[1].split('&')[0] print '--------------------------------------------' request_token = Pocket.get_request_token(consumer_key=POCKET_CONSUMER_KEY, redirect_uri=REDIRECT_URI) print 1 # URL to redirect user to, to authorize your app auth_url = Pocket.get_auth_url(code=request_token, redirect_uri=REDIRECT_URI) print 2 # os.system('chrome \\"{}\\"'.format(auth_url)) print auth_url webbrowser.open_new_tab(auth_url) user_credentials = Pocket.get_credentials(consumer_key=POCKET_CONSUMER_KEY, code=request_token) time.sleep(3) print 3 access_token = user_credentials['access_token'] print 4 pocket_instance = Pocket(POCKET_CONSUMER_KEY, access_token) pocket_get = open('pocket_get.txt', 'w') def recursive_keys(d, depth=0): for key in d: if isinstance(d[key], collections.Mapping): print ' ' * depth + key pocket_get.write(' ' * depth + key + 'n') recursive_keys(d[key], depth + 1) else: print ' ' * depth + key + ' ->' + unicode(d[key]) pocket_get.write(' ' * depth + key + ' ->' + unicode(d[key]) + 'n') d = pocket_instance.get()[0]['list'] for key in d: print d[key]['resolved_title'], d[key]['given_url'] # open('test.txt', 'w').write(str(pocket_instance.get())) print '--------------------------------' #access_token = 'd8830338-65cd-ef39-64db-ec5b99' #pocket_instance = Pocket(POCKET_CONSUMER_KEY, access_token) #sample = pocket_instance.get(detailType='complete')[0] ''' with open('../result.json', 'r') as fp: pocket_request = json.load(fp) pocket_posts = pocket_request['list'] def pretty(d, indent=0): for key, value in d.iteritems(): print ' ' * indent + unicode(key) if isinstance(value, dict): pretty(value, indent + 1) else: print ' ' * (indent + 1) + unicode(value) data = {'posts': {}} for post in pocket_posts: data['posts'][post] = {} data['posts'][post]['name'] = pocket_posts[post]['given_title'] data['posts'][post]['embed_link'] = pocket_posts[post]['resolved_url'] if 'tags' in pocket_posts[post]: data['posts'][post]['tags'] = [tag for tag in pocket_posts[post]['tags']] else: data['posts'][post]['tags'] = [] print pocket_posts[pocket_posts.keys()[0]] # print [tag for tag in pocket_posts[post]] ''' tags = [] for post in pocket_posts: #print post if 'tags' in pocket_posts[post]: tags.append(pocket_posts[post]['tags']) print tags pocket_api = requests.post('https://getpocket.com/v3/get', data={'consumer_key': POCKET_CONSUMER_KEY, 'access_token': access_token, 'count': 30, 'state': 'unread', 'detailType': 'complete', }) # print pocket_api.headers print pocket_api.text e = json.loads(requests.post('https://getpocket.com/v3/get', data={'consumer_key': POCKET_CONSUMER_KEY, 'access_token': access_token, 'count': 30, 'state': 'unread', }).text)['list'] d = json.loads(pocket_api.text)['list'] for key in d: print set(d[key].keys()).difference(set(e[key].keys())) e = [key] # print d # recursive_keys(pocket_instance.get()[0]) '''"},{"prompt":"Using a dictionary, write a Python statement to remove all duplicate keys in a given dictionary my_dict = { apple: 5, pear: 10, apple: 8 }","completion":"# use set to remove duplicate keys my_dict = dict(set(my_dict.items()))"},{"prompt":"Develop a Python script to generate a set of random numbers within a given range.","completion":"import random start = int(input(\\"Enter start range: \\")) end = int(input(\\"Enter end range: \\")) numbers = int(input(\\"Enter the amount of numbers: \\")) result = random.sample(range(start, end), numbers) print(\\"Randomly generated numbers:\\", result)"},{"prompt":"Create a Python program that prints the most frequent item in a given list. [6, 5, 8, 3, 6, 5, 8, 6]","completion":"from collections import Counter def most_frequent(items): c = Counter(items) return c.most_common(1)[0][0] items = [6, 5, 8, 3, 6, 5, 8, 6] result = most_frequent(items) print(result)"},{"prompt":"Write a Python program that generates a random password of length 10.","completion":"import random import string def generate_password(): length = 10 char_set = string.ascii_letters + string.digits + string.punctuation rand_pwd = ''.join(random.choice(char_set) for i in range(length)) return rand_pwd if __name__ == '__main__': print(generate_password())"},{"prompt":"Design an algorithm in Python that takes two input arrays and returns true if they have the same elements. arr1 = [1, 6, 7, 8] arr2 = [7, 1, 8, 6]","completion":"def is_same_elements(arr1, arr2): return set(arr1) == set(arr2) is_same_elements(arr1, arr2) # return True"},{"prompt":"Create a Python function for padding a string with a given character upto a specific length.","completion":"def pad_string(string, character, length): padded_string = string while len(padded_string) < length: padded_string = character + padded_string return padded_string"},{"prompt":"Use the provided Python code to create a function to mimic the functionality of a calculator # initialize a variable to store the total total = 0","completion":"def add(num): \\"\\"\\"Add the number to the total Args: num (float or int): The number to add Returns: int: The updated total \\"\\"\\" global total total += num return total def subtract(num): \\"\\"\\"Subtract the number from the total Args: num (float or int): The number to subtract Returns: int: The updated total \\"\\"\\" global total total -= num return total def multiply(num): \\"\\"\\"Multiply the total by the given number Args: num (float or int): The number to multiply by Returns: int: The updated total \\"\\"\\" global total total *= num return total def divide(num): \\"\\"\\"Divide the total by the given number Args: num (float or int): The number to divide by Returns: int: The updated total \\"\\"\\" global total total /= num return total"},{"prompt":"Develop a Django web application presenting a CV.","completion":"import django # Setting up a django project django.setup() # Providing the project name and the path to working directory django-admin startproject <project_name> <working_directory_path> # Running the project server python manage.py runserver # Creating and adding data models from django.db import models class CV(models.Model): name = models.CharField(max_length=256) age = models.IntegerField() education = models.TextField() experience = models.TextField() skills = models.TextField() # Migrating the models python manage.py makemigrations python manage.py migrate # Creating a superuser for the admin panel python manage.py createsuperuser # Adding admin view for the CV from django.contrib import admin from .models import CV # Registering the CV model to the admin panel admin.site.register(CV) # Creating the CV view and template from django.shortcuts import render from django.template import loader def cv(request): cvs = CV.objects.all() template = loader.get_template('cv.html') context = { 'cvs': cvs, } return HttpResponse(template.render(context, request))"},{"prompt":"Design a class in Python that models a customer with the following properties Attributes: name, email, phone_number, address.","completion":"class Customer: def __init__(self,name, email, phone_number, address): self.name = name self.email = email self.phone_number = phone_number self.address = address"},{"prompt":"Write a script in Python to evaluate an expression with multiple operators. expression = 2 + 3 5 * 4 + 7 / 6","completion":"# Initialize the expression expression = \\"2 + 3 - 5 * 4 + 7 / 6\\" # Evaluate the expression result = eval(expression) # Print the result print(\\"Result of the expression:\\", result)"},{"prompt":"mplement a basic sorting algorithm for an array of strings in Python. ['banana', 'apple', 'orange']","completion":"def sort_array(arr): for i in range(len(arr)): for j in range(i+1, len(arr)): if arr[j] < arr[i]: arr[i], arr[j] = arr[j], arr[i] return arr"},{"prompt":"Create a method to generate a random integer between 0 and 10 (inclusive) in Python.","completion":"import random def random_int(): return random.randint(0, 10)"},{"prompt":"Classify the following statement as true or false: Python does not allow for recursion. Not applicable","completion":"False. Python does allow for recursion. Recursion is a technique for iteratively performing a task using a function that calls itself. It is an important technique used in programming for solving complex problems. Recursion can help reduce the amount of code needed to solve a problem, making it easier to read and maintain. Furthermore, it can often times provide more efficient solutions than code that does not use recursion."},{"prompt":"Write a Python program to call a given API with an input parameter and store the result in a variable. API URL: https://example.org/api?name=test","completion":"import requests url = 'https://example.org/api?name=test' response = requests.get(url) data = response.json() result = data['result']"},{"prompt":"Write a Python program to determine if one number is a multiple of another. num1: 32 num2: 8","completion":"def is_multiple(num1, num2): if (num1 % num2 == 0): print(f'{num1} is a multiple of {num2}') else: print(f'{num1} is not a multiple of {num2}') is_multiple(32, 8) Output: 32 is a multiple of 8"},{"prompt":"Create a Python program to group words of the same length together words = ['hello', 'world', 'word', 'whale', 'panda']","completion":"def group_words(words): # Function to group words of the same length together groups = {} for word in words: length = len(word) if length not in groups: groups[length] = [] groups[length].append(word) return groups"},{"prompt":"Create a Python script to remove specific items from a given list of strings. strings = [apple, orange, banana, grape] words_to_remove = [apple, grape]","completion":"strings = [\\"apple\\", \\"orange\\", \\"banana\\", \\"grape\\"] words_to_remove = [\\"apple\\", \\"grape\\"] # Using list comprehension filtered_list = [word for word in strings if word not in words_to_remove] # Output print(filtered_list) # Output ['orange', 'banana']"},{"prompt":"Create a Python program which will sort the given array of numbers [9, 5, 1, 10]","completion":"def sortArray(arr): arr.sort() return arr # Driver code arr = [9, 5, 1, 10] print(sortArray(arr)) # Output: [1, 5, 9, 10]"},{"prompt":"mplement a Python Visualization Library that plots 2D data points. Not applicable","completion":"import matplotlib.pyplot as plt def plot_2d_data(data): x = [p[0] for p in data] y = [p[1] for p in data] plt.scatter(x, y) plt.title('2D Data Points') plt.show() #Testing the visualization data_points = [(1, 2), (3, 4), (5, 6), (7, 8)] plot_2d_data(data_points)"},{"prompt":"Create a distributed system with two applications in Python one for generating fake data and the other for analyzing the data. Not applicable","completion":"# Application 1: Generating Fake Data import random import time random.seed(time.time()) while True: x = random.randint(1, 100) y = random.randint(1, 100) z = random.randint(1, 100) print('{},{},{}'.format(x, y, z)) time.sleep(1) # Application 2: Analyzing Data import socket TCP_IP = '127.0.0.1' TCP_PORT = 5005 BUFFER_SIZE = 1024 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((TCP_IP, TCP_PORT)) s.listen(1) conn, addr = s.accept() while True: data = conn.recv(BUFFER_SIZE) if not data: break x, y, z = [int(val) for val in data.decode().split(',')] print('Received values: {}, {} and {}'.format(x, y, z)) conn.close()"},{"prompt":"Create a basic machine learning classification model in Python using ScikitLearn. The model should classify a set of 7 numerical values (columns) into two classes. A training dataset containing 4 records of the columns [a, b, c, d, e, f, g] and the corresponding labels [0, 0, 1, 1].","completion":"import numpy as np from sklearn import tree #the training data X = np.array([[a, b, c, d, e, f, g], [a, b, c, d, e, f, g], [a, b, c, d, e, f, g], [a, b, c, d, e, f, g]]) y = np.array([0, 0, 1, 1]) #create and train the decision tree clf = tree.DecisionTreeClassifier() clf = clf.fit(X, y)"},{"prompt":"Write a Python Program to take multiple inputs and prints the highest among them. 14, 16, 2","completion":"values = [14, 16, 2] highest = values[0] for i in values: if highest < i: highest = i print(\\"The highest value is: \\", highest)"},{"prompt":"Generate a program in Python that takes in a list of words as an input parameter and returns a dictionary with the word count for each word. words = [cat, dog, bird, cat, dog, ant]","completion":"words = [\\"cat\\", \\"dog\\", \\"bird\\", \\"cat\\", \\"dog\\", \\"ant\\"] # Create an empty dictionary to store the counts wordCounts = {} # Iterate over the words list for word in words: # Check if the word is already in the dictionary if word in wordCounts: # Increment the count for the word wordCounts[word] += 1 else: # Create a new entry with count 1 wordCounts[word] = 1 # Print out the dictionary print(wordCounts)"},{"prompt":"Create a Python program to search through a given dictionary and output the values of given keys. Input dictionary = {'name': 'John', 'age': 30, 'height': 170} Input keys = ['name','age']","completion":"def search_dictionary(dictionary, keys): output = [] for key in keys: output.append(dictionary[key]) return output"},{"prompt":"Generate a Python program to calculate the hypotenuse of a right triangle.","completion":"import math def hypotenuse(a, b): return math.sqrt(a**2 + b**2) print(hypotenuse(3, 4))"},{"prompt":"Create a Python program to display the current date in MM/DD/YYYY format. Not applicable","completion":"from datetime import datetime date = datetime.today() date_formatted = date.strftime('%m/%d/%Y') print(date_formatted)"},{"prompt":"Given a list of directions, create a Python program to find the maximum cumulative sum of the list. [3, 8, 2, 10, 6]","completion":"def max_sum(arr): max_sum = 0 sum = 0 for num in arr: sum += num max_sum = max(max_sum, sum) return max_sum max_sum([3, 8, -2, 10, -6]) # 17"},{"prompt":"Write a Python code to generate a dictionary which contains elements of type string as keys and lists of integers as their values. Elements = [A, B, C, “D”] Numbers =[1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"elements = [\\"A\\", \\"B\\", \\"C\\", “D”] numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] mydict = dict() for i in range(len(elements)): # iterate through elements mydict[elements[i]] = numbers[i:i+3] # assign each element the next three numbers print(mydict) # {'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9], 'D': [7, 8, 9]}"},{"prompt":"Write a Python program to generate a list comprising 5 random integers between 1 to 30, with no duplicates.","completion":"import random def generate_random_list(): random_list = [] while len(random_list) < 5: new_number = random.randint(1, 30) if new_number not in random_list: random_list.append(new_number) return random_list"},{"prompt":"Create a Python function that takes two arrays as input and returns a new array containing the elements of both inputs. array1 = [1, 2, 3] array2 = [4, 5, 6]","completion":"def merge_arrays(array1, array2): merged_array = array1 + array2 return merged_array array1 = [1, 2, 3] array2 = [4, 5, 6] merged_array = merge_arrays(array1, array2) print(merged_array)"},{"prompt":"Create a classification model using random forests in Python. No input.","completion":"def random_forest_classifier(X, y): \\"\\"\\" Create a classification model using random forests. Parameters: X(array-like): Training data. y(array-like): Target values. Returns: object: The trained random forest classifier. \\"\\"\\" # create the random forest classifier rfc = RandomForestClassifier(random_state=42) # fit the classifier to the dataset rfc.fit(X, y) return rfc"},{"prompt":"Design an algorithm in Python to get the largest number in a list. [2, 5, 3, 7]","completion":"def getMax(list): max = 0 for num in list: if num > max: max = num return max list = [2, 5, 3, 7] print(getMax(list))"},{"prompt":"Create a utility function to convert mathematical expressions to postfix notation in Python. expression = ( a + b ) × c − ( d / e )","completion":"\\"\\"\\" Create a utility function to convert mathematical expressions to postfix notation in Python \\"\\"\\" def to_postfix(expression): operations = { '+': 1, '-': 1, '*': 2, '/': 2, '^': 3 } output = [] stack = [] tokens = expression.split(' ') for token in tokens: if token in operations: while stack and operations[stack[-1]] >= operations[token]: output.append(stack.pop()) stack.append(token) elif token == '(': stack.append(token) elif token == ')': while stack[-1] != '(': output.append(stack.pop()) stack.pop() else: output.append(token) while stack: output.append(stack.pop()) return output if __name__==\\"__main__\\": print(to_postfix(\\"( a + b ) × c − ( d / e )\\"))"},{"prompt":"Edit this Python program to print the student grade based on the given inputs. # Given k number of student student_score = [90, 85, 75, 60, 95, 50, 89]","completion":"# Given k number of student student_score = [90, 85, 75, 60, 95, 50, 89] for score in student_score: if score > 90: print(\\"The student has an A grade\\") elif score > 80 and score <= 90: print(\\"The student has a B grade\\") elif score > 70 and score <= 80: print(\\"The student has a C grade\\") elif score > 60 and score <= 70: print(\\"The student has a D grade\\") else: print(\\"The student has an F grade\\")"},{"prompt":"Create a web scraper in Python for collecting data from a website and storing it in a MongoDB database. Not applicable","completion":"import requests from bs4 import BeautifulSoup import pymongo client = pymongo.MongoClient(\\"mongodb://localhost:27017/\\") db = client[\\"mydatabase\\"] col = db[\\"data\\"] def get_data(url): html = requests.get(url).text soup = BeautifulSoup(html, 'html.parser') name = soup.find('h1').text price = soup.find('span', class_=\\"price\\").text col.insert_one({'name': name, 'price': price}) get_data(\\"https://example.com\\")"},{"prompt":"Develop a Python code to parse an XML string. xml_string = <node><child>text</child></node>","completion":"import xml.etree.ElementTree as ET def parse_xml(xml_string): root = ET.fromstring(xml_string) for node in root: print(f'Node: {node.tag}: {node.text}') if __name__ == '__main__': xml_string = \\"<node><child>text</child></node>\\" parse_xml(xml_string) # prints Node: child: text"},{"prompt":"Generate a python program to help a user create a custom greframe to quickly generate a simple partofspeech tagged dataset.","completion":"import spacy def generate_grammar_based_dataset(sentences): nlp = spacy.load('en_core_web_sm') dataset = [] for sentence in sentences: doc = nlp(sentence) grammarTaggedSentence = [(token.text, token.pos_) for token in doc] dataset.append(grammarTaggedSentence) return dataset"},{"prompt":"Create a Python function to sort a list of strings lexicographically, where strings are of varying lengths. string_list = [abcd, def, fh, ac, a]","completion":"def lexicographic_sort(string_list): # Sort by length string_list.sort(key=len) # Second, sort by alphabetical order string_list.sort() return string_list string_list = [\\"abcd\\", \\"def\\", \\"fh\\", \\"ac\\", \\"a\\"] print(lexicographic_sort(string_list)) # [\\"a\\", \\"ac\\", \\"def\\", \\"fh\\", \\"abcd\\"]"},{"prompt":"Design an algorithm in Python to check if a number is divisible by three.","completion":"def is_divisible_by_three(num): if num % 3 == 0: return True return False"},{"prompt":"w would you write a code to flatten a given nested list in Python? nested_list = [1, [2, [3, 4], 5], 6]","completion":"def flatten_list(nested_list): flattened_list = [] for item in nested_list: if type(item) == list: flattened_list.extend(flatten_list (item)) else: flattened_list.append(item) return flattened_list"},{"prompt":"Write a python code to create a dictionary that has the first 10 prime numbers as the keys and their squares as the values.","completion":"primes_dict = {} for i in range(2, 11): is_prime = True for j in range(2, i): if i % j == 0: is_prime = False break if is_prime: primes_dict[i] = i**2 print (primes_dict)"},{"prompt":"Create a program in Python that takes a website URL as input and returns the number of HTML tags in the page. URL: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup def count_tags(url): r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') count = len(soup.find_all()) return count"},{"prompt":"Generate a Python program to search an item in a given sorted list.","completion":"def binary_search(numbers, n): start = 0 end = len(numbers) - 1 while start <= end: mid = (start + end) // 2 if numbers[mid] == n: return mid elif numbers[mid] < n: start = mid + 1 else: end = mid - 1 return -1"},{"prompt":"Develop a Python program to generate a random password based on a given set of rules. Minimum length: 8 characters Include lowercase characters: true Include uppercase characters: true Include digits: true Include special characters: true","completion":"import string import random def generate_password(): min_length = 8 allchar = string.ascii_letters + string.digits + string.punctuation password = \\"\\".join(random.choice(allchar) for x in range(min_length)) return password password = generate_password() print(password) // eXyCvJ121"},{"prompt":"Write a Python script to convert a given temperature from Fahrenheit to Celsius.","completion":"def fahrenheit_to_celsius(fahrenheit): return (fahrenheit - 32) * 5/9"},{"prompt":"You need to evaluate a given Python program to identify lines of code which are unnecessary by using natural language processing. def compare_numbers(num1, num2): if (num1 > num2): print(Number 1 is greater than Number 2) elif (num1 == num2): print(Number 1 is equal to Number 2) elif (num1 < num2): print(Number 1 is less than Number 2)","completion":"def compare_numbers(num1, num2): if (num1 > num2): print(\\"Number 1 is greater than Number 2\\") elif (num1 == num2): print(\\"Number 1 is equal to Number 2\\") else: print(\\"Number 1 is less than Number 2\\")"},{"prompt":"Generate an array of Nth Fibonacci sequence using Python. N = 10","completion":"def generate_fibonacci_sequence(N): ''' This program takes in an integer N and returns the first N elements of the Fibonacci sequence ''' fibonacci_sequence = [] if N < 1: return fibonacci_sequence elif N == 1: fibonacci_sequence = [1] return fibonacci_sequence else: fibonacci_sequence = [1,1] for i in range(2,N): fibonacci_sequence.append(fibonacci_sequence[i-2]+fibonacci_sequence[i-1]) return fibonacci_sequence print(generate_fibonacci_sequence(10)) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]"},{"prompt":"Write a Python script to organize a given list of data of students alphabetically. student_list = [John, Amy, Robert, Lisa, Samantha]","completion":"def sort_alphabetically(students): return sorted(students)"},{"prompt":"Develop a web crawler in Python that is able to scrape through different webpages.","completion":"from bs4 import BeautifulSoup import requests def crawler(url): source_code = requests.get(url).text soup = BeautifulSoup(source_code, 'html.parser') for link in soup.find_all('a'): href = link.get('href') print(href) crawler(href)"},{"prompt":"Create a function in Python to print out the names of the weekdays.","completion":"def week_days(): week_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] for day in week_days: print(day) week_days()"},{"prompt":"Generate a list of five import statements for three different Python libraries.","completion":"import numpy as np import pandas as pd import matplotlib.pyplot as plt import scipy.stats as st import scikit-learn as sklearn"},{"prompt":"Create a class in Python that can be used to store the details of an employee.","completion":"class Employee: def __init__(self, name, age , department): self.name = name self.age = age self.department = department def display(self): print(\\"Name:\\", self.name) print(\\"Age:\\", self.gender) print(\\"Department:\\", self.department)"},{"prompt":"Propose an algorithm to decrease execution time of a Python program by 20%.","completion":"One of the best ways to decrease the execution time of a Python program is to use the following technique. 1. Utilize the built-in functions instead of writing your own code. 2. Eliminate loops that can be avoided by using the built-in functions. 3. Utilize data structures and algorithms to optimize the program. 4. Utilize asynchronous programming to reduce the execution time. 5. Look into alternative libraries that provide better performance. 6. Profile the code to identify inefficient parts and optimize them. 7. Utilize caching and memoization techniques to speed up the computation. 8. Reduce the latency of IO operations. 9. Optimize network and database queries. 10. Utilize multiprocessing or multithreading to fully utilize the available resources."},{"prompt":"Create a program in Python that takes in a text document and counts the number of times a specific word is used in it. Text: This is a test sentence. This sentence is used for testing. Word: test","completion":"text = \\"This is a test sentence. This sentence is used for testing.\\" word = \\"test\\" def count_words(text, word): words = text.split() count = 0 for w in words: if w == word: count += 1 return count print(count_words(text, word)) #2"},{"prompt":"Debug existing Python code to update a field in a table. Context: Table: records Columns: id, name, value # Incorrect Python code cur.execure('UPDATE records SET value = ? WHERE name = ?', (value, name))","completion":"cur.execute('UPDATE records SET value = ? WHERE name = ?', (value, name)) conn.commit() # Added statement to commit changes to the database."},{"prompt":"Create a script in Python to generate a random alphanumeric string with a length of 10.","completion":"import random import string def random_str(): return ''.join(random.choices(string.ascii_letters + string.digits, k=10)) print(random_str())"},{"prompt":"Write a Python program to simulate a random walk and calculate the position of the walker after N steps.","completion":"import random def random_walk(n_steps): x = 0 y = 0 for _ in range(n_steps): direction = random.choice([-1, 1]) x += direction * random.randint(1, 10) y += direction * random.randint(1, 10) return x, y"},{"prompt":"Create a Python program which prints Hello, World!","completion":"print(\\"Hello, World!\\")"},{"prompt":"Write a function in Python that takes two lists of strings as input, and returns a list of all strings that are common to both lists. list_1 = ['John', 'Paul', 'George', 'Ringo'] list_2 = ['Ringo', 'George', 'Pete', 'John']","completion":"def common_words(list_1, list_2): result = [word for word in list_1 if word in list_2] return result # sample usage common_words(list_1, list_2) # would return ['John', 'George', 'Ringo']"},{"prompt":"Design a Python program that asks for a string, then creates a new string that is the reverse of the original, and then prints the new string. Not applicable","completion":"value = input(\\"Please enter a string:\\") print(\\"The reversed value is:\\", value[::-1])"},{"prompt":"Create an algorithm in Python to show all the prime numbers from 0 to 1000.","completion":"def is_prime(num): if num <= 1: return False for i in range(2,num): if num % i == 0: return False return True for num in range(0,1001): if is_prime(num): print(num)"},{"prompt":"Create a Python script to find the two longest consecutive common substrings in two strings. String 1: Hawaii String 2: Alask","completion":"def longest_common_substring(string1, string2): # Create a 2D array to save all substrings substring_length = [[0 for _ in range(len(string1)+1)] for _ in range(len(string2)+1)] # Save the length of longest substring longest_length = 0 # Iterate over the string and save the length of common substrings for row in range(1, len(string2)+1): for col in range(1, len(string1)+1): if string2[row-1] == string1[col-1]: substring_length[row][col] = substring_length[row-1][col-1] + 1 if substring_length[row][col] > longest_length: longest_length = substring_length[row][col] return longest_length string1 = 'Hawaii' string2 = 'Alaska' longest_length = longest_common_substring(string1, string2) print('The longest consecutive common substring has length %d.' % (longest_length))"},{"prompt":"Optimize the given code in Python. def fibonacci(num): a = 0 b = 1 for i in range(0, num): temp = a a = b b = temp + b return","completion":"def fibonacci(num): a, b = 0, 1 for _ in range(num): a, b = b, a + b return a"},{"prompt":"Code a Python program to concatenate two lists. [1, 2, 3] and [4, 5, 6]","completion":"list1 = [1, 2, 3] list2 = [4, 5, 6] # using + list3 = list1 + list2 # printing list3 print(list3) # using extend() list1.extend(list2) # printing list1 print(list1)"},{"prompt":"Write a Python function to get all possible unique subsets from a set of distinct integers.","completion":"def get_unique_subsets(integers): subsets = [] for subset in itertools.chain.from_iterable(itertools.combinations(integers, r) for r in range(len(integers) + 1)): subsets.append(list(subset)) return list(set(map(tuple, subsets)))"},{"prompt":"Automate the following task to be completed on Python Determine if a given number is prime or no","completion":"def is_prime(num): if num <= 1: return False for i in range(2, num): if num % i == 0: return False return True"},{"prompt":"Design an algorithm in Python to check if two given strings are anagrams.","completion":"def is_anagram(str1, str2): # Get lengths of both strings n1 = len(str1) n2 = len(str2) # If Lengths are different, they can't be anagrams if n1 != n2: return False # Sort both the strings str1 = sorted(str1) str2 = sorted(str2) # Compare sorted strings for i in range(0, n1): if str1[i] != str2[i]: return False return True"},{"prompt":"Generate a Python program to find all numbers between 2000 and 2500 (inclusive) that are divisible by 7 and not divisible by 5. Not applicable","completion":"# List comprehension approach res = [i for i in range(2000, 2501) if i % 7 == 0 and i % 5 != 0] # Iterative approach res = [] for i in range(2000, 2501): if (i % 7 == 0) and (i % 5 != 0): res.append(i) # Print the result print(\\"nNumbers divisible by 7 and not divisible by 5 are\\", res)"},{"prompt":"Create a program in Python that takes 5 numbers input from the user and prints out their median. 3, 4, 7, 6, 8","completion":"nums = [] ans = 0 for _ in range(5): nums.append(int(input())) nums.sort() if len(nums) % 2 == 0: ans = (nums[len(nums)//2] + nums[len(nums)//2-1]) / 2 else: ans = nums[len(nums) // 2] print(\\"Median of the given numbers is: \\" + str(ans))"},{"prompt":"Generate a Python code snippet to search for a specific value in a 2D list and return its index. Value to search for: hello 2D List: [[12, goodbye, 21], [hello, 67, 55]]","completion":"def search_2d(value, lst): for i, row in enumerate(lst): if value in row: return (i, row.index(value)) print(search_2d(\\"hello\\", [[12, \\"goodbye\\", 21], [\\"hello\\", 67, 55]])) # Output: (1, 0)"},{"prompt":"Create a function to print the last character of a given string in Python.","completion":"def print_last_char(input_string): print(input_string[-1])"},{"prompt":"Write a Python program to check whether a number is divisible by a given divisor. Number: 15 Divisor: 3","completion":"def is_divisible(num, divisor): return num % divisor == 0 num = int(input(\\"Number: \\")) divisor = int(input(\\"Divisor: \\")) print(\\"Number is divisible by the divisor :\\", is_divisible(num, divisor))"},{"prompt":"Create a function in Python that removes duplicates from a list of items. [1, 2, 3, 2, 4, 1]","completion":"def remove_duplicates(items): no_duplicates = [] for item in items: if item not in no_duplicates: no_duplicates.append(item) return no_duplicates items = [1, 2, 3, 2, 4, 1] result = remove_duplicates(items) print(result) # [1, 2, 3, 4]"},{"prompt":"Write a Python program to print the 3 most common elements of a given list. Input = [2, 5, 3, 7, 8, 5, 10, 19, 20]","completion":"from collections import Counter Input = [2, 5, 3, 7, 8, 5, 10, 19, 20] Counter = Counter(Input) most_occur = Counter.most_common(3) for i in most_occur: print(i[0], \\":\\", i[1])"},{"prompt":"Create a Python class to implement a multiplication table","completion":"class MultiplicationTable: def __init__(self, limit): self.limit = limit def create_table(self): for i in range(1, self.limit+1): for j in range(1, self.limit+1): print(i*j, sep= 't', end='') print()"},{"prompt":"Write an algorithm in Python to search an item in a given sorted array of integers. arr = [2, 3, 4, 5, 6, 7, 8] item = 6","completion":"def binarySearch(arr, item): low = 0 high = len(arr) - 1 while low <= high: mid = (low + high) // 2 guess = arr[mid] if guess == item: return mid if guess > item: high = mid - 1 else: low = mid + 1 return None arr = [2, 3, 4, 5, 6, 7, 8] item = 6 result = binarySearch(arr, item) if (result != None): print('Item found at index: ', result) else: print('Item not found in array')"},{"prompt":"Generate a correct Python program to calculate the linear regression line of a dataset x_data: [1, 2, 3, 4, 5] y_data: [2, 4, 5, 4, 5]","completion":"import numpy as np def linear_reg(x_data, y_data): x_mean = np.mean(x_data) y_mean = np.mean(y_data) numerator = 0 denominator = 0 for i in range(len(x_data)): numerator += (x_data[i] - x_mean) * (y_data[i] - y_mean) denominator += (x_data[i] - x_mean) ** 2 slope = numerator/denominator intercept = y_mean - (slope * x_mean) return slope, intercept"},{"prompt":"Create a Python script to interpolate missing data points from a Pandas dataframe. import pandas as pd df = pd.DataFrame({ 'x': [0,1,3,4,5], 'y': [1,2,4,8,16] })","completion":"import pandas as pd import numpy as np df = pd.DataFrame({ 'x': [0,1,3,4,5], 'y': [1,2,4,8,16] }) # interpolate the missing data new_x = np.linspace(0, 5, 6) df = df.set_index('x').reindex(new_x).interpolate().reset_index() print(df)"},{"prompt":"Develop a web scraper in Python to extract data from a web page.","completion":"import requests from bs4 import BeautifulSoup url = 'example.com' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') data = [] for item in soup.find_all('div', attrs={'class': 'data_item'}): data.append(item.text) print(data)"},{"prompt":"Create a system using Python for predicting the success of a movie based on its features. The system should take input from an API that returns features like budget, cast, crew, and release date, and output a classification label indicating whether the movie will be successful or not. budget: 50m cast: Brad Pitt, Angelina Jolie crew: David Fincher release date: October 10th","completion":"import pandas as pd from sklearn import preprocessing from sklearn.ensemble import RandomForestClassifier # Load data from API budget = 50m cast = ['Brad Pitt', 'Angelina Jolie'] crew = ['David Fincher'] release_date = 'October 10th' # Preprocess data data = { 'budget': budget, 'cast': ','.join(cast), 'crew': ','.join(crew), 'release_date': release_date } df = pd.DataFrame.from_dict([data]) le1 = preprocessing.LabelEncoder().fit(df['cast']) le2 = preprocessing.LabelEncoder().fit(df['crew']) df['cast'] = le1.transform(df['cast']) df['crew'] = le2.transform(df['crew']) # Create and fit the model model = RandomForestClassifier() y = model.fit(df[['budget', 'cast', 'crew', 'release_date']], df['success']) # Make predictions pred = model.predict([[budget, le1.transform(cast), le2.transform(crew), release_date]]) print(pred)"},{"prompt":"Find the maximum number in the following list using a Python program. [8, 5, 1, 7, 2]","completion":"def find_max(my_list): max_num = my_list[0] for num in my_list: if num > max_num: max_num = num return max_num my_list = [8, 5, -1, 7, 2] print(find_max(my_list))"},{"prompt":"Create a python program to read two strings of different lengths and find the longest common substring between them. String 1: “Hello, World String 2: “Hi World”","completion":"def longest_common_substring(str1, str2): lcs = \\"\\" for i in range(len(str1)): for j in range(len(str2)): if str1[i] == str2[j]: tmp = str1[i] k = i + 1 l = j + 1 while k < len(str1) and l < len(str2) and str1[k] == str2[l]: tmp += str1[k] k += 1 l += 1 if len(tmp) > len(lcs): lcs = tmp return lcs"},{"prompt":"Create a login system in Python to verify users' credentials from a MySQL database.","completion":"import mysql.connector # create a connection to the MySQL Database mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"user\\", passwd=\\"password\\", database=\\"database_name\\" ) # create a function to verify the user def login_user(username, password): # create SQL query query = \\"SELECT * FROM users WHERE username = %s AND password = %s\\" # initialize cursor cur = mydb.cursor() # execute query cur.execute(query, (username, password)) # extract row from the database row = cur.fetchone() # if the username and password does not match if row == None: return False # if the username and password match else: return True"},{"prompt":"Create a Python library to identify whether a movie or a series belongs to the genre of action, romance or comedy. genre_list = [Action, Romance, Comedy] sample_movie=The Dark Knight","completion":"def identify_movie_genre(movie, genre_list): movie_genre = None for genre in genre_list: search_terms = genre.lower().split() if all(term in movie.lower() for term in search_terms): movie_genre = genre break return movie_genre print(identify_movie_genre(sample_movie, genre_list)) # Output: 'Action'"},{"prompt":"Generate all permutations of a given list of numbers with Python. [1, 2, 3]","completion":"import itertools list_nums = [1, 2, 3] perms = itertools.permutations(list_nums) for perm in perms: print(perm)"},{"prompt":"Create a script in Python that reads an integer from the user and counts from one to that number.","completion":"user_num = int(input(\\"Enter an integer: \\")) for i in range(1, user_num+1): print(i)"},{"prompt":"Create a Python script to preprocess a given corpus and vectorize it for usage as features in a machine learning problem.","completion":"import numpy as np from sklearn.feature_extraction.text import CountVectorizer def vectorize_corpus(corpus): # Initialize the CountVectorizer vectorizer = CountVectorizer() # Fit the corpus X = vectorizer.fit_transform(corpus) # Convert the sparse matrix to numpy array X = X.toarray() # Return the vectorized corpus and the corresponding feature names return X, vectorizer.get_feature_names()"},{"prompt":"Solve the given Roman numerals equation using your preferred programming language. Equation: MMVII MDCCLIV","completion":"Python: romans = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000} def solve_roman(eq): result = 0 for char in eq: result += romans[char] return result print(solve_roman(\\"MMVII\\" - \\"MDCCLIV\\")) Output: 823"},{"prompt":"Generate a python program that takes two strings as input and outputs the longest common substring. string1 = Hello World! string2 = Big Hello!","completion":"def longest_common_substring(s1, s2): s1_length = len(s1) s2_length = len(s2) matrix = [[0] * (s2_length + 1) for _ in range(s1_length + 1)] longest, x_longest = 0, 0 for x in range(1, s1_length + 1): for y in range(1, s2_length + 1): if s1[x - 1] == s2[y - 1]: matrix[x][y] = matrix[x - 1][y - 1] + 1 if matrix[x][y] > longest: longest = matrix[x][y] x_longest = x else: matrix[x][y] = 0 return s1[x_longest - longest: x_longest] longest_common_substring(string1, string2) # output: 'Hello'"},{"prompt":"Update the python program by including a function that finds the shortest word in a list. my_list = [hello, world, this, is, a, test]","completion":"def find_shortest(input_list): shortest = input_list[0] for word in input_list: if len(word) < len(shortest): shortest = word return shortest shortest_word = find_shortest(my_list) print(shortest_word)"},{"prompt":"Optimize a Python program to reverse an array in place. [1, 2, 3, 4]","completion":"def reverse_in_place(arr): low = 0 high = len(arr) - 1 while low < high: arr[low], arr[high] = arr[high], arr[low] low += 1 high -= 1 return arr arr = [1, 2, 3, 4] print(reverse_in_place(arr))"},{"prompt":"Reorder the elements of an array in ascending order using Python. [5, 3, 6, 1, 7]","completion":"def sort_ascending(arr): for i in range(len(arr)): for j in range(i+1, len(arr)): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i] return arr arr = [5, 3, 6, 1, 7] arr = sort_ascending(arr) print(arr)"},{"prompt":"Create a web scraper in Python to parse the HTML source code of a web page and extract data from a specific section. Website URL: http://example.org/ HTML section to extract data from: <div class=maincontent>...</div>","completion":"import requests from bs4 import BeautifulSoup url = 'http://example.org/' r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') data = soup.find('div', {'class': 'main-content'}) # data is now a BeautifulSoup object containing the HTML of the <div class=\\"main-content\\"> element"},{"prompt":"Develop a code generator in Python that creates HTML code for a website. The website should have a basic twocolumn layout with a header and footer.","completion":"<!DOCTYPE html> <html> <head> <title>Basic Website</title> </head> <body> <header> <h1>My Website</h1> </header> <div class=\\"main-content\\"> <div class=\\"left-column\\"> Left column content </div> <div class=\\"right-column\\"> Right column content </div> </div> <footer> Copyright 2020 </footer> </body> </html>"},{"prompt":"Translate a given program written in Python to Java. def calculate_mean(numbers): total = 0 for i in numbers: total = total + i mean = total / len(numbers) return me","completion":"public static double calculateMean(int[] numbers) { int total = 0; for (int i : numbers) { total += i; } double mean = total / numbers.length; return mean; }"},{"prompt":"Write a Python script to iteratively apply a function to all the elements in a list. list = [1, 2, 3, 4]","completion":"\\"\\"\\" Write a Python script to iteratively apply a function to all the elements in a list. \\"\\"\\" def applyFunc(list_data, func): result = [] for item in list_data: result.append(func(item)) return result list_data = [1, 2, 3, 4] def square(x): return x**2 squares = applyFunc(list_data, square) print(squares)"},{"prompt":"Develop a Python script to scrape a website for name and phone number.","completion":"import requests from bs4 import BeautifulSoup def scrape(url): \\"\\"\\"scrapes a website for name and phone number\\"\\"\\" response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') data = {} names = soup.find_all('h2', attrs={'class': 'name'}) phones = soup.find_all('span', attrs={'class': 'phone'}) for name, phone in zip(names, phones): data[name.text] = phone.text return data if __name__ == '__main__': url = \\"http://www.example.com\\" data = scrape(url) print(data)"},{"prompt":"Edit the following python code to ensure that it is free from exceptions. def div(x, y): return x / y","completion":"def div(x, y): if y == 0: raise ValueError(\\"Cannot divide by 0\\") return x / y"},{"prompt":"Create a dictionary in Python to store information about the different elements in the Periodic Table.","completion":"elements_dict = {} elements_dict[\\"Hydrogen\\"] = { \\"symbol\\": \\"H\\", \\"atomic_number\\": 1, \\"atomic_mass\\": 1.008, \\"group\\": 1, \\"period\\": 1 } elements_dict[\\"Helium\\"] = { \\"symbol\\": \\"He\\", \\"atomic_number\\": 2, \\"atomic_mass\\": 4.003, \\"group\\": 18, \\"period\\": 1 } #Repeat for other elements."},{"prompt":"Analyze the following data and build a linear regression model in Python. x = [1, 2, 3, 4, 5, 6, 7] y = [2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]","completion":"import numpy as np x = np.array([1,2,3,4,5,6,7]) y = np.array([2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5]) m = ((np.mean(x)*np.mean(y)) - np.mean(x*y))/((np.mean(x)**2) - np.mean(x**2)) c = np.mean(y) - (m*np.mean(x)) print(\\"slope =\\", m) print(\\"intercept =\\", c)"},{"prompt":"Create an algorithm in Python to find the median value in a given list of numbers.","completion":"def find_median(numbers): numbers.sort() length = len(numbers) if length % 2 == 0: median = (numbers[int((length/2)-1)] + numbers[int(length/2)])/2 else: median = numbers[int((length-1) / 2)] return median"},{"prompt":"Develop an algorithm to find the shortest path between two points in a given grid","completion":"# Python program to find the shortest path between # a given source cell to a destination cell. # Rows and columns in given grid must be # numbered such that (0,0) can # be most top left cell. # Utility function to find the # shortest path between # a given source cell to a destination cell. def find_shortest_path(grid,m,n): # Create a queue for/ BFS and # mark source cell as visited queue = [] # Mark the source cell as visited # and enqueue the source node queue.append([0, 0]) visited = set((0, 0)) # While queue is not empty while queue: # pop front node from queue and # process it i, j = queue.pop(0) # if destination is reached, # stop the loop if i == n - 1 and j == n - 1: break # check for all 4 possible movements # from current cell for x, y in [[-1, 0], [0, -1], [1, 0], [0, 1]]: # if current cell is valid, has path # and not visited yet if 0 <= x + i < m and 0 <= y + j < n and grid[x + i][y + j] and (x + i, y + j) not in visited: # add the cell to queue queue.append([x + i, y + j]) # mark cell as visited visited.add((x + i, y + j)) return visited # Driver Code # given two-dimensional array with 1s as blocked # cells and 0s as cells through which # we can move grid = [[1, 0, 0], [1, 1, 0], [1, 1, 1]] if find_shortest_path(grid, 3, 3): print('Yes') else: print('No')"},{"prompt":"Enhance the output of a Python program that prints the Fibonacci sequence in a reverse order. Only include numbers that are divisible by 3. Not applicable","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b # Driver Program nterms = 20 # check if the number of terms is valid if nterms <= 0: print(\\"Please enter a positive integer\\") else: print(\\"Fibonacci sequence:\\") for i in range(nterms, 0, -1): if Fibonacci(i) % 3 == 0: print(Fibonacci(i))"},{"prompt":"Write a Python function to calculate the sum of two numbers using recursion. x = 5 y = 7","completion":"def recursive_sum(x, y): if x == 0: return y else: return recursive_sum(x - 1, y + 1) print(recursive_sum(x, y)) # 12"},{"prompt":"Create a shell script that runs a Python program and prints out the results. python program.py example input","completion":"#!/bin/bash python program.py \\"example input\\" output=(python program.py \\"example input\\") echo output"},{"prompt":"Develop a method in Python that takes a string as an input and outputs the number of vowels in the string. string = Hello World","completion":"def vowel_count(string): count = 0 vowels = 'aeiou' for char in string.lower(): if char in vowels: count += 1 return count print(vowel_count(\\"Hello World\\"))"},{"prompt":"Write a Python code to implement a linear search algorithm in a list of integers.","completion":"def linear_search(list, x): for item in list: if item == x: return True return False list = [10,20,30,40,50] x = 20 if linear_search(list, x): print(\\"Element is present in the list\\") else: print(\\"Element is not present in the list\\")"},{"prompt":"Develop a Python function that can detect loops in a given linked list. Linked List: head > 1 > 2 > 3 > 4 > 5","completion":"def detectLoop(head): slow_p = head fast_p = head while(slow_p and fast_p and fast_p.next): slow_p = slow_p.next fast_p = fast_p.next.next if slow_p == fast_p: return True return False"},{"prompt":"Generate a decision tree based on the given data set. University Dataset Features: GPA [04] Test Score [0100] Class size [Small, Medium, Large]","completion":"from sklearn import tree import pandas as pd # Data set # 0 = Rejected, 1 = Accepted data = {'GPA': [3.8, 3.9, 3.5, 2.8, 3.0], 'Test Score': [85, 95, 70, 25, 72], 'Class Size': ['Small', 'Small', 'Medium', 'Large', 'Large'], 'Decision': [1, 1, 0, 1, 0]} # Create a dataframe df = pd.DataFrame(data) # Define Features features = ['GPA', 'Test Score', 'Class Size'] # Define Target X = df[features] y = df['Decision'] # Create a decision tree model = tree.DecisionTreeClassifier() model.fit(X, y) # Visualize the decision tree from sklearn.externals.six import StringIO from IPython.display import Image import pydotplus dot_data = StringIO() tree.export_graphviz(model, out_file=dot_data, feature_names=features, class_names=['Rejected', 'Accepted'], filled=True, rounded=True, special_characters=True) graph = pydotplus.graph_from_dot_data(dot_data.getvalue()) Image(graph.create_png())"},{"prompt":"Write a Python class to detect and block malicious requests.","completion":"class RequestChecker(): def __init__(self): pass def check_request(self, request): # Your code to check the request is_malicious = False # If a malicious request is found, set it to True if is_malicious: print('Malicious request detected!') else: print('Request is clean.') return is_malicious request_checker = RequestChecker() request_checker.check_request(request)"},{"prompt":"Create a class in Python that allows for a linked list of strings.","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def append(self, new_data): new_node = Node(new_data) if self.head == None: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node"},{"prompt":"Create a Python program that takes a string as input and returns the longest word in it. This is an example sentence.","completion":"def find_longest_word(sentence): words = sentence.split() longest_word = words[0] for word in words: if len(word) > len(longest_word): longest_word = word return longest_word sentence = \\"This is an example sentence.\\" longest_word = find_longest_word(sentence) print(longest_word)"},{"prompt":"Edit the Python program below to add an if condition to determine if an input number is odd or even. def odd_or_even(number): # your code here","completion":"def odd_or_even(number): # your code here if number % 2 == 0: return \\"even\\" else: return \\"odd\\""},{"prompt":"Write a Python program to calculate a new matrix after the multiplication by a scalar value. Matrix: [ [3,6,2], [9,2,3], [4,8,6] ] Scalar: 3","completion":"def scalar_multiply(matrix, scalar): result = [[0,0,0], [0,0,0], [0,0,0]] # iterate through rows for i in range(len(matrix)): # iterate through columns for j in range(len(matrix[0])): result[i][j] = matrix[i][j] * scalar return result # 3x3 matrix matrix = [[3,6,2], [9,2,3], [4,8,6]] # scalar value scalar = 3 # result matrix result = scalar_multiply(matrix, scalar) # print the result for r in result: print(r)"},{"prompt":"Develop a Python function to select the odd numbers from a given list. [2, 3, 4, 5, 6, 7, 8, 9]","completion":"def selectOddNumbers(arr): oddNumbers = [] for num in arr: if num % 2 == 1: oddNumbers.append(num) return oddNumbers arr = [2, 3, 4, 5, 6, 7, 8, 9] result = selectOddNumbers(arr) print(result)"},{"prompt":"Write a Python program to convert all units of temperature in a tuple from Celsius to Fahrenheit. temperature = (36.5, 37, 37.5, 37.8)","completion":"def celsius_to_fahrenheit(c): return (c * 9/5) + 32 temp_in_Fahrenheit = tuple(map(celsius_to_fahrenheit, temperature)) print(temp_in_Fahrenheit) # Output: (97.7, 98.6, 99.5, 100.04)"},{"prompt":"Build a Python program that finds the smallest number divisible by all the numbers in a given list numbers in the list : 2, 4, 8","completion":"def smallest_multiple(arr): min_num = min(arr) multiple = min_num while True: for x in arr: if multiple % x != 0: break else: return multiple multiple += min_num"},{"prompt":"Create a web scraper with Python and Beautiful Soup to scrape data from a single webpage. URL: http://example.com/page","completion":"import requests from bs4 import BeautifulSoup url = 'http://example.com/page' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') results = soup.find_all('div', {'class': 'result'}) for result in results: title = result.find('h2').text description = result.find('p').text print(title, description)"},{"prompt":"Write a function to loop through a two dimensional array and count the number of occurrences of each element in Python? arr = [['a', 'a', 'b', 'c', 'c'], ['c', 'b', 'a', 'a', 'b']]","completion":"def count_occurrences(arr): # Initialize a new dictionary count_dict = {} # Iterate through all the elements of arr for row in arr: for ele in row: # If element exists in the dictionary if ele in count_dict.keys(): count_dict[ele] += 1 else: count_dict[ele] = 1 return count_dict arr = [['a', 'a', 'b', 'c', 'c'], ['c', 'b', 'a', 'a', 'b']] print(count_occurrences(arr)) # prints {'a': 4, 'b': 3, 'c': 3}"},{"prompt":"Generate a Python program to print the numbers 1 to 100, but only print fizz for multiples of 3, buzz for multiples of 5, and fizzbuzz for multiples of both 3 and 5. Not applicable","completion":"for i in range(1,101): if i % 3 == 0 and i % 5 == 0: print(\\"fizzbuzz\\") elif i % 3 == 0: print(\\"fizz\\") elif i % 5 == 0: print(\\"buzz\\") else: print(i)"},{"prompt":"Design a function in Python which encrypts a message using Caesar encryption algorithm. message = 'Python is a programming language.'","completion":"def caesar_encrypt(message, key): encrypted_message = \\"\\" # traverse message for i in range(len(message)): char = message[i] # Encrypt uppercase characters if (char.isupper()): encrypted_message += chr((ord(char) + key - 65) % 26 + 65) # Encrypt lowercase characters else: encrypted_message += chr((ord(char) + key - 97) % 26 + 97) return encrypted_message # Driver code message = 'Python is a programming language.' key = 3 print(\\"Encrypted Message is: \\" + caesar_encrypt(message, key))"},{"prompt":"Write a Python script to generate a random string of 12 characters, containing both alphanumeric characters and special symbols. Not applicable","completion":"import random import string def generate_random_string(): char_set = string.ascii_letters + string.digits + '!@#%^&*()' characters = [random.choice(char_set) for _ in range(12)] random_string = ''.join(characters) return random_string rand_str = generate_random_string() print(rand_str)"},{"prompt":"Create a Python script to sort a list of integers from lowest to highest. [3, 5, 1, 7, 4, 2]","completion":"def sort_list(list): # loop through the list for i in range(len(list)): # find the smallest number in the list lowest = min(list[i:]) # find its index lowest_index = list.index(lowest) # swap the numbers list[i], list[lowest_index] = list[lowest_index], list[i] # return the sorted list return list print(sort_list([3, 5, 1, 7, 4, 2]))"},{"prompt":"Create a Python program to select high temperature days based on a given dataset. Link to Dataset: http://web.engr.oregonstate.edu/~mjb/weather_data/index.html","completion":"import pandas as pd # Load data df = pd.read_csv('Oregon_OregonState_97_02.csv', sep=',', index_col=0) # Select days with high temperature high_temp_days = df.query('T_MAX > 25') # Display results print(high_temp_days)"},{"prompt":"Create a Python class which stores in a dictionary the ISBN and title of books.","completion":"class Book: def __init__(self): self.books = {} def add_book(self, isbn, title): self.books[isbn] = title def get_book(self, isbn): if isbn in self.books: return self.books[isbn] else: return None"},{"prompt":"Can you write Python code to replace all the vowels with '*' in a string? Hello, World!","completion":"def replaceVowels(string): vowels = [\\"a\\",\\"e\\",\\"i\\",\\"o\\",\\"u\\", \\"A\\", \\"E\\", \\"I\\", \\"O\\", \\"U\\"] newstr = \\"\\" for char in string: if char in vowels: newstr += \\"*\\" else: newstr += char return newstr print(replaceVowels(\\"Hello, World!\\")) # H*ll*, W*rld!"},{"prompt":"Write a Python program that finds all numbers in a given string and prints their sum? 15 apples, 4 bananas and 6 oranges","completion":"import re def find_numbers(s): numbers = re.findall('d+', s) ints = list(map(int, numbers)) return sum(ints) s = \\"15 apples, 4 bananas and 6 oranges\\" print(find_numbers(s)) # output: 25"},{"prompt":"Produce a python script to calculate the root mean square error (RMSE) of two given datasets.","completion":"import numpy as np def RMSE(predictions, targets): \\"\\"\\" Calculate the root mean square error of two given datasets. \\"\\"\\" mse = np.mean((predictions - targets)**2) return np.sqrt(mse) #Input data y_true = [1,2,3] y_pred = [2,2,2] rmse = RMSE(y_pred,y_true) print(\\"The RMSE is: \\", rmse)"},{"prompt":"Create a Python program to rearrange the elements of an array in the maximum possible order arr = [1,2,3]","completion":"arr = [1,2,3] def rearrange(arr): i = 1 while i < len(arr): key = arr[i] j = i - 1 while j >= 0 and arr[j] < key: arr[j+1] = arr[j] j -= 1 arr[j+1] = key i += 1 return arr"},{"prompt":"Create a Python function to evaluate a given expression using the PYEXPR language. expr = 2 + 3 * 4 8","completion":"def evaluateExpression(expr): result = 0 expr = expr.replace(' ', '') tokens = expr.split('+') for token in tokens: terms = token.split('-') for term in terms: factors = term.split('*') for factor in factors: result += int(factor) if term.startswith('-'): result *= -1 if token.startswith('+'): result += sum(terms) else: result -= sum(terms) return result print(evaluateExpression(expr)) # 8"},{"prompt":"Write a Python function that takes a string as input and counts the number of occurrences of each character in that string. String: 'python'","completion":"def count_characters(string): counts = {} for s in string: counts[s] = counts.get(s, 0) + 1 return counts result = count_characters('python') print(result)"},{"prompt":"Generate a Python program to generate random passwords of length n. Length: 8","completion":"import string import random def random_password(length): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits random_password = ''.join(random.choice(chars) for i in range(length)) return random_password length = 8 print(random_password(length))"},{"prompt":"Consult the documentation and write python code to create a thread that prints Hello World.","completion":"import threading def print_message(): print(\\"Hello World\\") # create thread object thread_obj = threading.Thread(target=print_message) # start thread thread_obj.start()"},{"prompt":"Generate a valid python class that captures person information Name, Age, Gender, Nationality","completion":"class Person: def __init__(self, name, age, gender, nationality): self.name = name self.age = age self.gender = gender self.nationality = nationality def __str__(self): return 'Name: {}nAge: {}nGender: {}nNationality: {}'.format( self.name, self.age, self.gender, self.nationality)"},{"prompt":"Create a program in Python that calculates permutations of a given list. [1,2,3]","completion":"def permutations(items): if len(items) == 0: return [[]] permutations_list = [] for i in range(len(items)): items_copy = items.copy() item = items_copy.pop(i) permutations_partial = permutations(items_copy) for j in range(len(permutations_partial)): permutations_partial[j] = [item] + permutations_partial[j] permutations_list.extend(permutations_partial) return permutations_list if __name__ == '__main__': items = [1,2,3] permutations_list = permutations(items) print(permutations_list)"},{"prompt":"Write a python script that normalizes the given text. The cat and rat chAsEd eAch other","completion":"import re def normalize_text(text): return re.sub(r'[^ws]','',text.lower()) text = \\"The cat and rat chAsEd eAch other\\" print(normalize_text(text)) # Output: the cat and rat chased each other"},{"prompt":"Design a class called Coach in Python that has two attributes: a name and a team.","completion":"class Coach: def __init__(self, name, team): self.name = name self.team = team def __str__(self): return f\\"The coach of {self.team} is {self.name}.\\""},{"prompt":"Write a python program to find the top 5 most expensive items in the given list of products. [{id:1, name:iPad, price:500}, {id:2, name:Headphones, price:200}, {id:3, name:Laptop, price:1000}, {id:4, name:iPhone, price:700}, {id:5, name:TV, price:800}]","completion":"import operator products = [{\\"id\\":1,\\"name\\":\\"iPad\\",\\"price\\":500},{\\"id\\":2,\\"name\\":\\"Headphones\\",\\"price\\":200},{\\"id\\":3,\\"name\\":\\"Laptop\\",\\"price\\":1000},{\\"id\\":4,\\"name\\":\\"iPhone\\",\\"price\\":700},{\\"id\\":5,\\"name\\":\\"TV\\",\\"price\\":800}] sorted_products = sorted(products, key=operator.itemgetter('price'), reverse=True) top_5_expensive_items = sorted_products[:5] for item in top_5_expensive_items: print(\\"The most expensive item is \\" + item['name'] + \\" with a price of \\" + str(item['price']) + \\".\\")"},{"prompt":"Given a sentence, write a Python program to count the number of words and average length of words. This is an example sentence.","completion":"def word_count_average_len(sentence): words = sentence.split() sum_length = 0 for word in words: sum_length += len(word) return len(words), sum_length/len(words)"},{"prompt":"Create a function in Python to parse a JSON string. The function should accept a string and return a list of dictionaries with the parsed JSON data. \`\`\` json_string = ''' [ { name: John Doe, age: 23 }, { name: Jane Doe, age: 25 } ] ''' \`\`\`","completion":"import json def parse_json(json_string): # convert json string to list of dictionaries json_list = json.loads(json_string) # loop through the list of dictionaries parsed_data = [] for item in json_list: parsed_data.append({ 'name': item['name'], 'age': item['age'] }) return parsed_data parsed_data = parse_json(json_string) print(parsed_data) # prints [{'name': 'John Doe', 'age': 23}, {'name': 'Jane Doe', 'age': 25}]"},{"prompt":"Develop a Python program to generate all possible strings of length 'n' using characters from a given array. characters = [A, B, C] length = 3","completion":"def generate_strings(characters, length): if length == 0: return [\\"\\"] result = [] for char in characters: for string in generate_strings(characters, length-1): result.append(char + string) return result strings = generate_strings([\\"A\\", \\"B\\", \\"C\\"], 3) print(\\"Strings:\\", strings)"},{"prompt":"mprove the following small python program to make a valid babynames list. babynames = ['bob', 'alice', 'billy']","completion":"babynames = ['Bob', 'Alice', 'Billy']"},{"prompt":"Create a class in Python to represent a 2D point on a Cartesian plane.","completion":"class Point2D: def __init__(self, x, y): self.x = x self.y = y def get_distance(self, other): dx = self.x - other.x dy = self.y - other.y return (dx ** 2 + dy ** 2) ** 0.5"},{"prompt":"Create a program in Python that will fill a list with 5 random integers between 15 and 15.","completion":"import random def createRandomList(): result = [] for i in range(5): result.append(random.randint(-15, 15)) return result print(createRandomList())"},{"prompt":"Write a Python program to print a frequency table for the given data. data = [2, 4, 7, 1, 6, 4, 7, 2, 6, 3]","completion":"from collections import Counter data = [2, 4, 7, 1, 6, 4, 7, 2, 6, 3] counts = Counter(data) for item, count in counts.items(): print(f'{item} : {count}') # Output # 2 : 2 # 4 : 2 # 7 : 2 # 1 : 1 # 6 : 2 # 3 : 1"},{"prompt":"Create a machine learning script in Python that trains a binary classification model on a dataset with two classes.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # Read in data data = pd.read_csv(\\"data.csv\\") # Split into train and test X = data.drop(\\"target_column\\", axis=1) y = data[\\"target_column\\"] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train a binary classification model model = LogisticRegression() model.fit(X_train, y_train) # Evaluate model y_pred = model.predict(X_test) accuracy = (y_pred == y_test).mean() print(\\"Model accuracy:\\", accuracy)"},{"prompt":"mplement a Python function to encode a URL.","completion":"def encode_url(url): return urllib.parse.quote_plus(url)"},{"prompt":"Create a Python program to encrypt a given string using ROT13 string encoding. str = Hello World!","completion":"import string def rot13(str): rot13 = str.maketrans( \\"ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz\\", \\"NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm\\") return str.translate(rot13) print(rot13(str))"},{"prompt":"mplement a function in Python that takes two derivatives of a polynomial and returns the greatest common multiple. >f'(x) = x^3 + 3x + 2; g'(x) = x^5 + x^3 24","completion":"def gcd(f, g): # We use Euclid's algorithm to find the GCD if (g == 0): return f return gcd(g, f % g) def greatestCommonMultiple(f, g): # Find the GCD of two polynomial derivatives x = gcd(f, g) # Find the least common multiple using the GCD lcm = int(f * g)/ int(x) return lcm # derivatives of f(x) and g(x) f_prime = 'x^3 + 3x + 2' g_prime = 'x^5 + x^3 - 24' # Calling the function print(greatestCommonMultiple(f_prime, g_prime))"},{"prompt":"Create a webscraper in Python to extract product details from an eCommerce website. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Target page url = 'https://example.com/products.html' # Get page content page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') # Scrape product details items = soup.find_all(class_='item') for item in items: # Title title = item.find(class_='title').get_text() # Price price = item.find(class_='price').get_text() # Description description = item.find(class_='description').get_text() # Image URL image_url = item.find('img', src=True)['src'] # Print details print(title) print(price) print(description) print(image_url) print('n')"},{"prompt":"Create a Python function that takes a number as input and returns the Fibonacci number at the same position in the sequence. 3","completion":"def fibonacciNum(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b fibonacciNum(3)"},{"prompt":"Create a python program to implement the NewtonRaphson method","completion":"def newton_raphson(f, df, x_0, eps): delta = df(x_0) while delta > eps: x_0 = x_0 - f(x_0)/delta delta = df(x_0) return x_0"},{"prompt":"Develop an AI algorithm that will suggest new code changes for a given Python program to make it memory efficient. Not applicable","completion":"def suggest_changes(code): # analyze code and identify potential memory-wasteful instructions instructions = analyze_code(code) # suggest possible changes to reduce memory usage and find the best solution best_solution = search_solution(instructions) # apply the changes to the code result_code = apply_changes(code, best_solution) return result_code def analyze_code(code): instructions = [] # parse the code and identify memory-wasteful instructions, such as # large objects, frequent object creation, etc. return instructions def search_solution(instructions): # use a search algorithm to find the best changes to make best_solution = find_best_solution(instructions) return best_solution def apply_changes(code, best_solution): # apply the best changes to the code result_code = code for change in best_solution: result_code = change(result_code) return result_code"},{"prompt":"Construct a Python function to filter out all the words from a list that contains the letter a. ['dog', 'cat', 'ant', 'tree', 'apple']","completion":"def filter_words_with_a(words): return [word for word in words if \\"a\\" in word]"},{"prompt":"Optimize a Python script to sort an array in ascending order. list_of_numbers = [7, 4, 5, 2, 9, 6]","completion":"# Function to sort a list of numbers # using an optimized version of Bubble Sort def optimizedBubbleSort(list_of_numbers): n = len(list_of_numbers) # Traverse through all array elements for i in range(n): swapped = False # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if list_of_numbers[j] > list_of_numbers[j+1] : list_of_numbers[j], list_of_numbers[j+1] = list_of_numbers[j+1], list_of_numbers[j] swapped = True # IF no two elements were swapped # by inner loop, then break if swapped == False: break # Driver code list_of_numbers = [7, 4, 5, 2, 9, 6] optimizedBubbleSort(list_of_numbers) print(\\"Sorted list of elements:\\") print(list_of_numbers)"},{"prompt":"Create a database using SQL and a programming language of your choice (e.g. Python, Java, etc.) that stores user information such as name, age, gender, and a unique user ID. Not applicable","completion":"// Python example import sqlite3 # create a database connection conn = sqlite3.connect('user_info.db') # create the table cursor = conn.cursor() cursor.execute(\\"\\"\\"CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT NOT NULL, age INTEGER, gender TEXT, unique_user_id TEXT UNIQUE)\\"\\"\\") # insert some data cursor.execute(\\"\\"\\"INSERT INTO users (name, age, gender, unique_user_id) VALUES (?, ?, ?, ?)\\"\\"\\", ('James', 20, 'M', 'j1m2e3s4')) # commit changes conn.commit() # close the connection conn.close()"},{"prompt":"Can you write a Python script to search an input string for a specific character and return its position in the string? string = Python search_char = 'y'","completion":"pos = string.find(search_char) # 2"},{"prompt":"Create a Python program to generate a list of random integers with the size 5","completion":"import random def generate_random_int_list(n): return [random.randint(0,10) for i in range(n)]"},{"prompt":"Design a Python program to solve a given sudoku board.","completion":"def solve(board): # find empty cell for row in range(len(board)): for col in range(len(board[0])): if board[row][col] == 0: for num in range(1, 10): # If a number is valid for the current cell if isValid(board, row, col, num): # Assign the number board[row][col] = num # Recursively check all of the other cells if solve(board): e return True # If there is no solution for the current cell, reset the number board[row][col] = 0 # No valid number was found. return False # When all cells have been checked and there is no empty cell left return True"},{"prompt":"Design a REST API endpoint in Python that retrieves customer data given the customer id. Not applicable","completion":"from flask import Flask, jsonify, request app = Flask(name) @app.route('/api/customers/<int:id>', method=['GET']) def get_customer(id): # your code here customer = Customer.query.filter_by(id=id).first() if customer: return jsonify({ 'id': customer.id, 'name': customer.name, 'email': customer.email, 'address': customer.address }) else: return jsonify({'error': 'customer not found'}), 404 if name == 'main': app.run(debug=True)"},{"prompt":"This code sets up a mock HTTP server with various endpoints. To use it, run the script and access the endpoints at the specified addresses. The server supports HTTP and HTTPS, and includes endpoints for testing various scenarios such as delays, redirects, and dropped connections. The server can be used for testing HTTP clients and other applications that interact with web servers.","completion":"import json import os import random import sys from subprocess import Popen, PIPE from urllib.parse import urlencode from OpenSSL import SSL from twisted.web.server import Site, NOT_DONE_YET from twisted.web.resource import Resource from twisted.web.static import File from twisted.web.test.test_webclient import PayloadResource from twisted.web.server import GzipEncoderFactory from twisted.web.resource import EncodingResourceWrapper from twisted.web.util import redirectTo from twisted.internet import reactor, ssl from twisted.internet.task import deferLater from scrapy.utils.python import to_bytes, to_unicode from scrapy.utils.ssl import SSL_OP_NO_TLSv1_3 def getarg(request, name, default=None, type=None): if name in request.args: value = request.args[name][0] if type is not None: value = type(value) return value else: return default class LeafResource(Resource): isLeaf = True def deferRequest(self, request, delay, f, *a, **kw): def _cancelrequest(_): # silence CancelledError d.addErrback(lambda _: None) d.cancel() d = deferLater(reactor, delay, f, *a, **kw) request.notifyFinish().addErrback(_cancelrequest) return d class Follow(LeafResource): def render(self, request): total = getarg(request, b\\"total\\", 100, type=int) show = getarg(request, b\\"show\\", 1, type=int) order = getarg(request, b\\"order\\", b\\"desc\\") maxlatency = getarg(request, b\\"maxlatency\\", 0, type=float) n = getarg(request, b\\"n\\", total, type=int) if order == b\\"rand\\": nlist = [random.randint(1, total) for _ in range(show)] else: # order == \\"desc\\" nlist = range(n, max(n - show, 0), -1) lag = random.random() * maxlatency self.deferRequest(request, lag, self.renderRequest, request, nlist) return NOT_DONE_YET def renderRequest(self, request, nlist): s = \\"\\"\\"<html> <head></head> <body>\\"\\"\\" args = request.args.copy() for nl in nlist: args[b\\"n\\"] = [to_bytes(str(nl))] argstr = urlencode(args, doseq=True) s += \\"<a href='/follow?%s'>follow %d</a><br>\\" % (argstr, nl) s += \\"\\"\\"</body>\\"\\"\\" request.write(to_bytes(s)) request.finish() class Delay(LeafResource): def render_GET(self, request): n = getarg(request, b\\"n\\", 1, type=float) b = getarg(request, b\\"b\\", 1, type=int) if b: # send headers now and delay body request.write('') self.deferRequest(request, n, self._delayedRender, request, n) return NOT_DONE_YET def _delayedRender(self, request, n): request.write(to_bytes(\\"Response delayed for %0.3f secondsn\\" % n)) request.finish() class Status(LeafResource): def render_GET(self, request): n = getarg(request, b\\"n\\", 200, type=int) request.setResponseCode(n) return b\\"\\" class Raw(LeafResource): def render_GET(self, request): request.startedWriting = 1 self.deferRequest(request, 0, self._delayedRender, request) return NOT_DONE_YET render_POST = render_GET def _delayedRender(self, request): raw = getarg(request, b'raw', b'HTTP 1.1 200 OKn') request.startedWriting = 1 request.write(raw) request.channel.transport.loseConnection() request.finish() class Echo(LeafResource): def render_GET(self, request): output = { 'headers': dict( (to_unicode(k), [to_unicode(v) for v in vs]) for k, vs in request.requestHeaders.getAllRawHeaders()), 'body': to_unicode(request.content.read()), } return to_bytes(json.dumps(output)) render_POST = render_GET class RedirectTo(LeafResource): def render(self, request): goto = getarg(request, b'goto', b'/') # we force the body content, otherwise Twisted redirectTo() # returns HTML with <meta http-equiv=\\"refresh\\" redirectTo(goto, request) return b'redirecting...' class Partial(LeafResource): def render_GET(self, request): request.setHeader(b\\"Content-Length\\", b\\"1024\\") self.deferRequest(request, 0, self._delayedRender, request) return NOT_DONE_YET def _delayedRender(self, request): request.write(b\\"partial contentn\\") request.finish() class Drop(Partial): def _delayedRender(self, request): abort = getarg(request, b\\"abort\\", 0, type=int) request.write(b\\"this connection will be droppedn\\") tr = request.channel.transport try: if abort and hasattr(tr, 'abortConnection'): tr.abortConnection() else: tr.loseConnection() finally: request.finish() class ArbitraryLengthPayloadResource(LeafResource): def render(self, request): return request.content.read() class Root(Resource): def __init__(self): Resource.__init__(self) self.putChild(b\\"status\\", Status()) self.putChild(b\\"follow\\", Follow()) self.putChild(b\\"delay\\", Delay()) self.putChild(b\\"partial\\", Partial()) self.putChild(b\\"drop\\", Drop()) self.putChild(b\\"raw\\", Raw()) self.putChild(b\\"echo\\", Echo()) self.putChild(b\\"payload\\", PayloadResource()) self.putChild(b\\"xpayload\\", EncodingResourceWrapper(PayloadResource(), [GzipEncoderFactory()])) self.putChild(b\\"alpayload\\", ArbitraryLengthPayloadResource()) try: from tests import tests_datadir self.putChild(b\\"files\\", File(os.path.join(tests_datadir, 'test_site/files/'))) except Exception: pass self.putChild(b\\"redirect-to\\", RedirectTo()) def getChild(self, name, request): return self def render(self, request): return b'Scrapy mock HTTP servern' class MockServer(): def __enter__(self): from scrapy.utils.test import get_testenv self.proc = Popen([sys.executable, '-u', '-m', 'tests.mockserver'], stdout=PIPE, env=get_testenv()) http_address = self.proc.stdout.readline().strip().decode('ascii') https_address = self.proc.stdout.readline().strip().decode('ascii') self.http_address = http_address self.https_address = https_address return self def __exit__(self, exc_type, exc_value, traceback): self.proc.kill() self.proc.communicate() def url(self, path, is_secure=False): host = self.http_address.replace('0.0.0.0', '127.0.0.1') if is_secure: host = self.https_address return host + path def ssl_context_factory(keyfile='keys/localhost.key', certfile='keys/localhost.crt', cipher_string=None): factory = ssl.DefaultOpenSSLContextFactory( os.path.join(os.path.dirname(__file__), keyfile), os.path.join(os.path.dirname(__file__), certfile), ) if cipher_string: ctx = factory.getContext() # disabling TLS1.2+ because it unconditionally enables some strong ciphers ctx.set_options(SSL.OP_CIPHER_SERVER_PREFERENCE | SSL.OP_NO_TLSv1_2 | SSL_OP_NO_TLSv1_3) ctx.set_cipher_list(to_bytes(cipher_string)) return factory if __name__ == \\"__main__\\": root = Root() factory = Site(root) httpPort = reactor.listenTCP(0, factory) contextFactory = ssl_context_factory() httpsPort = reactor.listenSSL(0, factory, contextFactory) def print_listening(): httpHost = httpPort.getHost() httpsHost = httpsPort.getHost() httpAddress = 'http://%s:%d' % (httpHost.host, httpHost.port) httpsAddress = 'https://%s:%d' % (httpsHost.host, httpsHost.port) print(httpAddress) print(httpsAddress) reactor.callWhenRunning(print_listening) reactor.run()"},{"prompt":"Write a Python program that takes a list of numbers as input and returns a list of all numbers in the original list which are divisible by 7. [14, 21, 49, 28, 35, 56, 16]","completion":"def divisible_by_seven(numbers): return [number for number in numbers if number % 7 == 0] numbers = [14, 21, 49, 28, 35, 56, 16] print(divisible_by_seven(numbers)) # Output [14, 21, 28, 56]"},{"prompt":"Develop a system in Python for generating a monthly report on the most popular webpages.","completion":"import requests from collections import Counter def generate_report(url): # make request to the given URL response = requests.get(url) if response.status_code == 200: # parse the data data = response.json() # count the occurrences of each URL counter = Counter() for entry in data: counter[entry['url']] += 1 # get the most popular websites most_popular = counter.most_common(10) # generate the report report = \\"MONTHLY REPORTn\\" for url, count in most_popular: report += \\"{}: {} viewsn\\".format(url, count) print(report) generate_report(\\"url\\")"},{"prompt":"Modify the following Python code to select and print out the negative elements from an array. [3,4,1,6,9,10,2,8,4]","completion":"my_list = [3,4,1,-6,9,10,-2,-8,-4] def select_negative_elements(my_list): negative_elements = [] for x in my_list: if x < 0: negative_elements.append(x) return negative_elements print(select_negative_elements(my_list))"},{"prompt":"Generate a Python decorator to remember the result of expensive computations.","completion":"def memodecorator(func): cache = {} def decorated_func(*args): if args in cache: return cache[args] result = func(*args) cache[args] = result return result return decorated_func"},{"prompt":"Write a Python program to check if a provided string is valid JSON. <noinput>","completion":"def is_valid_json(s): valid = True try: json.loads(s) except ValueError: valid = False return valid"},{"prompt":"Write a function in Python to search a given 2D list for a given item and return its row and column index if it exists. list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] item = 8","completion":"def search2Dlist(list, item): row_index = None col_index = None for row in range(len(list)): for col in range(len(list[row])): if list[row][col] == item: row_index = row col_index = col if (row_index == None) and (col_index == None): return None else: return row_index, col_index # Output: (1, 2) (index of item 8 in the 2D list)"},{"prompt":"Create a Python program for a count the number of occurrences of each letter in a given string.","completion":"def count_occurrences(string): strings = list(string) dict = dict() for letter in strings: if (letter in dict): dict[letter] += 1 else: dict[letter] = 1 return dict my_string = 'Hello World!' letter_occurrences = count_occurrences(my_string) print(letter_occurrences)"},{"prompt":"Generate a random string of 8 characters using Python.","completion":"import random length = 8 string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' rand_str = ''.join(random.sample(string,length)) print(rand_str)"},{"prompt":"Generate a complete Python script that prints out the prime numbers between two provided numbers. lowerBound = 20 upperBound = 32","completion":"# code to print out prime numbers between two provided numbers def is_prime(num): if num < 2: return False for i in range(2, num): if num%i == 0: return False return True lowerBound = 20 upperBound = 32 for i in range(lowerBound, upperBound + 1): if is_prime(i): print(i)"},{"prompt":"Write a Python program to create a data visualization for a given dataset. The dataset contains information about the number of students enrolled in various courses.","completion":"import matplotlib.pyplot as plt def create_visualizations(data): x = [x[0] for x in data] y = [x[1] for x in data] plt.plot(x, y, 'bo') plt.xlabel('Courses') plt.ylabel('Students') plt.title('Number of Students Enrolled in Courses') plt.show()"},{"prompt":"Generate a classification tree from the given dataset. x1 x2 x3 Y 0 0 0 0 1 1 1 1 1 0 0 0 0 1 1 1","completion":"# Python program to generate a classification tree # from a given dataset # Importing the required library import pandas as pd # Creating a dataframe df = pd.DataFrame({'X1': [0, 1, 1, 0], 'X2': [0, 1, 0, 1], 'X3': [0, 1, 0, 1], 'Y': [0, 1, 0, 1]}) # Traversing all columns except 'Y' for col in df.columns[:-1]: # Select 1st row from df first_row = df[col][0] # Creating a temporary dataframe df_temp = df[[col, 'Y']] # Grouping the dataframe based on the 1st row if first_row == 0: df_grouped = df_temp.groupby([col]).sum().reset_index() else: df_grouped = df_temp.groupby([col]).count().reset_index() # Check condition on grouped dataframe condition = (df_grouped['Y'] == 0).all() # Traverse through grouped dataframe if condition: print(col + ' - 0') else: print(col + ' - 1')"},{"prompt":"What is the output of this Python code? a = 3 b = 1 print(a+b)","completion":"4"},{"prompt":"Build a python program to search for an element in a matrix A matrix of size 3x4 and search for the element 6","completion":"def searchMatrix(mat, ele): row = len(mat) col = len(mat[0]) # Traverse the matrix i = 0 j = col - 1 while i < row and j >= 0: if mat[i][j] == ele: return True if mat[i][j] > ele: j -= 1 else: i += 1 return False # Driver Code mat = [[1, 3, 5, 7], [2, 4, 6, 8], [3, 7, 10, 11]] # Search for the elements 7, 1, 6 and 4 print(searchMatrix(mat, 7)) print(searchMatrix(mat, 1)) print(searchMatrix(mat, 6)) print(searchMatrix(mat, 4))"},{"prompt":"mplement a function in Python to print all the uppercase letters from a given string. String: Hello World","completion":"def print_uppercase(s): for c in s: if c.isupper(): print(c) print_uppercase(\\"Hello World\\") # Output: # H # W"},{"prompt":"Build a Python script for searching a given element in an array. [3, 10, 7, 12], element to search: 7","completion":"def searchElement(arr, x): for i in range (len(arr)): if arr[i] == x: return i return -1 arr = [3, 10, 7, 12] x = 7 index = searchElement(arr, x) if index != -1: print(\\"Element\\", x, \\"found at index\\", index ) else: print(\\"Element not found\\")"},{"prompt":"Design a function in Python that takes a decimal number and returns its binary equivalent.","completion":"def dec_to_bin(number): # Convert decimal to binary binary = bin(number) # Remove prefix \\"0b\\" binary = binary[2:] # Return binary return binary decimal = 10 binary = dec_to_bin(decimal) print(binary)"},{"prompt":"Write a python program to check if a given string contains all alphabetic characters. String: Hello World!","completion":"def is_alpha(word): if word.isalpha(): return True else: return False"},{"prompt":"Create a program in Python to determine all possible combinations of words from an array. words = [cat, dog, pizza, coffee]","completion":"import itertools words = [\\"cat\\", \\"dog\\", \\"pizza\\", \\"coffee\\"] combinations = list(itertools.combinations(words, 2)) for i in range(len(combinations)): print(combinations[i])"},{"prompt":"Write a Python script to download the source code of a website. URL: example.com","completion":"import requests # send the request response = requests.get(\\"http://example.com\\") # get the source code of the website data = response.text # write the source code into a file with open('example_source.txt', 'w') as file: file.write(data)"},{"prompt":"mplement a function in Python that takes a 2D Numpy array and returns a dictionary whose keys are the unique values in the array, and the values are the number of occurrences for each of the unique values. arr = [[1,2,3], [2,3,4], [2,1,3]]","completion":"import numpy as np def count_occurrences(arr): result = {} for value in np.unique(arr): result[value] = np.sum(arr == value) return result arr = [[1,2,3], [2,3,4], [2,1,3]] print(count_occurrences(arr))"},{"prompt":"Generate a list of prime numbers between 1 and 20 using a while loop in Python. Not applicable","completion":"n = 20 # prime number is greater than 1 if n > 1: # create an empty list prime_numbers = [] # 2 is the smallest prime number i = 2 while i < n: # check if the number is divisible by any number # less than it for j in range(2,i): # if yes, then it's not a prime number if i % j == 0: break else: # append the prime number to the list prime_numbers.append(i) i += 1 # print the list of prime numbers print(prime_numbers) # Output: [2, 3, 5, 7, 11, 13, 17, 19]"},{"prompt":"Create a Python script to parse a dictionary using a list comprehension and create a new dictionary with the keys and values swapped. {'a':1, 'b':2, 'c':3}","completion":"{v:k for k, v in d.items()}"},{"prompt":"Modify the given Python code to optimize efficiency. def calculate_sum(nums): total = 0 for n in nums: total += n return total","completion":"def calculate_sum(nums): return sum(nums)"},{"prompt":"Create a Python program to analyze and classify text documents into different categories.","completion":"import nltk from sklearn import datasets from sklearn.feature_extraction.text import CountVectorizer from sklearn.feature_extraction.text import TfidfTransformer from sklearn.naive_bayes import MultinomialNB #Load the data categories = ['science', 'arts', 'politics'] documents = datasets.load_files(\\"./documents\\", categories=categories, encoding=\\"utf-8\\") #Preprocess the data vectorizer = CountVectorizer(stop_words='english',lowercase=True) X = vectorizer.fit_transform(documents.data) tfidf_transformer = TfidfTransformer() X_tfidf = tfidf_transformer.fit_transform(X) #Build the model clf = MultinomialNB().fit(X_tfidf, documents.target) #Classify documents text = \\"This document is about the science of climate change.\\" X = vectorizer.transform([text]) X_tfidf = tfidf_transformer.transform(X) prediction = clf.predict(X_tfidf) print \\"This document is classified as:\\", documents.target_names[prediction[0]]"},{"prompt":"Create a python program that computes the sum of all the prime numbers lower than a given number","completion":"def sum_prime_numbers(n): if n <= 1: return 0 prime_sum = 0 for i in range(2, n): is_prime = True for j in range(2, i): if i % j == 0: is_prime = False break if is_prime: prime_sum += i return prime_sum"},{"prompt":"mplement a linked list in Python.","completion":"class Node: def __init__(self, data): self.data = data self.next = None # Linked List class class LinkedList: def __init__(self): self.head = None # Inserts a new node at the beginning def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node # Prints the linked list. def print_list(self): temp = self.head while temp: print(temp.data) temp = temp.next llist = LinkedList() llist.push(1) llist.push(2) llist.push(3) llist.push(4) llist.print_list() # 4 3 2 1"},{"prompt":"Write a Python program to generate a HTML table with a list of employees. Employee list: John, Kate, Mark","completion":"employee_list = [\\"John\\", \\"Kate\\", \\"Mark\\"] html = \\"<table>n<tr>\\"; for employee in employee_list: html += \\"<td>\\"+employee+\\"</td>n\\"; html += \\"</tr>n</table>\\" print(html)"},{"prompt":"Create a Python web application using the Flask framework that returns the sum of two numbers.","completion":"from flask import Flask, request app = Flask(__name__) @app.route('/get_sum', methods=['GET']) def get_sum(): num1 = request.args.get('num1', type=int) num2 = request.args.get('num2', type=int) sum = num1 + num2 return str(sum) if __name__ == \\"__main__\\": app.run(debug=True)"},{"prompt":"Refactor the following code to use the most Pythonic approach: \`\`\` for i in range(0, list_items_len): if list_items[i] == target_item: index = i break \`\`\` list_items = ['a', 'b', 'c', 'd', 'e'] target_item = 'c'","completion":"list_items = ['a', 'b', 'c', 'd', 'e'] target_item = 'c' index = list_items.index(target_item) if target_item in list_items else None"},{"prompt":"Create a Python program to convert a given string in a sentence case. THIS IS A STRING.","completion":"CaseString = \\"THIS IS A STRING.\\" def sentence_case(CaseString): return CaseString.capitalize() print(sentence_case(CaseString))"},{"prompt":"Given a list of strings, write a python program to find the longest common prefix string that appears in all words str_list = ['class', 'classes', 'classical']","completion":"def longestCommonPrefix(str_list): longest_common_prefix = \\"\\" if len(str_list) == 0: return longest_common_prefix for i in range(min([len(s) for s in str_list])): curr_char = str_list[0][i] for s in str_list: if s[i] != curr_char: return longest_common_prefix longest_common_prefix += curr_char return longest_common_prefix str_list = ['class', 'classes', 'classical'] longest_common_prefix = longestCommonPrefix(str_list) print(\\"The longest common prefix of the list is: \\" + longest_common_prefix)"},{"prompt":"Generate a python function that takes a string and outputs the most frequently used letter in it. Hello World!","completion":"def most_frequent_letter(string): frequency = {} for letter in string: if letter.isalpha() and letter != ' ': if letter in frequency: frequency[letter] += 1 else: frequency[letter] = 1 highest_frequency = 0 most_used_letter = '' for letter, freq in frequency.items(): if freq > highest_frequency: highest_frequency = freq most_used_letter = letter return (most_used_letter, highest_frequency) if __name__ == '__main__': print(most_frequent_letter('Hello World!'))"},{"prompt":"Write a Python program that finds the smallest number in a given array with an algorithm that has an optimal time complexity. array = [3, 8, 2, 5, 4, 1, 9]","completion":"def find_smallest_number(array): smallest = array[0] for element in array: if element < smallest: smallest = element return smallest"},{"prompt":"Design a solution in Python to categorize a list of animals. animals = [dog,cat,fish,frog,bird]","completion":"def categorize_animals(animals): animals_dict = {\\"mammals\\": [], \\"birds\\": [], \\"reptiles\\": [], \\"fish\\": []} for animal in animals: if animal == \\"dog\\" or animal == \\"cat\\": animals_dict[\\"mammals\\"].append(animal) elif animal == \\"bird\\": animals_dict[\\"birds\\"].append(animal) elif animal == \\"fish\\": animals_dict[\\"fish\\"].append(animal) else: animals_dict[\\"reptiles\\"].append(animal) return animals_dict animals = [\\"dog\\",\\"cat\\",\\"fish\\",\\"frog\\",\\"bird\\"] print(categorize_animals(animals))"},{"prompt":"Write a code in Python to show a histogram distribution of data. [2, 3, 5, 6, 7, 8, 9, 10]","completion":"import matplotlib.pyplot as plt # example data data = [2, 3, 5, 6, 7, 8, 9, 10] # create histogram plt.hist(data) # show plot plt.show()"},{"prompt":"Write a Python program to print the numbers from 1 to 10 using a 'for' loop","completion":"for i in range(1, 11): print(i)"},{"prompt":"Write a Python program that can generate all permutations of a given list. list_a = [1, 2, 3]","completion":"def generate_permutations(list_a): import itertools return list(itertools.permutations(list_a)) generate_permutations(list_a)"},{"prompt":"Create a program in Python that has a list of 5 different computer languages and prints out each one in a separate line. Not applicable","completion":"languages = [\\"Python\\", \\"C++\\", \\"Java\\", \\"Javascript\\", \\"Ruby\\"] for language in languages: print(language)"},{"prompt":"Write a Python program to sort a list of tuples by increasing order of the second item of each tuple.","completion":"def sort_list(list_of_tuples): list_of_tuples.sort(key = lambda x: x[1]) return list_of_tuples"},{"prompt":"Create a basic machine learning classification model in Python SciKit Learn to distinguish between two sets of data. We have two sets of data–one is a set of images of cars and the other is a set of images of noncars.","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score # Load the data data1 = pd.read_csv('car_images.csv') data2 = pd.read_csv('noncar_images.csv') # create labels data1['label'] = 1 data2['label'] = 0 # merge two datasets data = data1.append(data2, ignore_index=True) #Split the data x = data.drop('label', axis=1) y = data['label'] x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state=42) # Create and Train the Classifier model = RandomForestClassifier(n_estimators= 100, max_depth = 3, random_state=42) model.fit(x_train, y_train) # Predict predictions = model.predict(x_test) # Evaluate the model accuracy = accuracy_score(y_test, predictions) print('Accuracy of the model: ', accuracy)"},{"prompt":"Create a binary classification model in Python for a dataset that has two classes Not applicable","completion":"# Import necessary libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns # Read in the dataset df = pd.read_csv('data.csv') # Split the data into training and test sets X = df.drop('target_class', axis=1) y = df.target_class X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Build the classification model clf = LogisticRegression() clf.fit(X_train, y_train) # Make predictions on the test set y_pred = clf.predict(X_test) # Evaluate the model accuracy = accuracy_score(y_test, y_pred) print('Accuracy: %.2f' % accuracy)"},{"prompt":"Write a function in python which creates a list containing the squares of all numbers between 1 and 100","completion":"def create_squares_list(): squares_list = [] for i in range(1, 101): squares_list.append(i**2) return squares_list"},{"prompt":"Generate a Python function which takes two strings as arguments and returns the number of letters they have in common. String 1: apple String 2: orange","completion":"def number_of_common_letters(s1, s2): common_letters = 0 for c in s1: if c in s2: common_letters += 1 return common_letters"},{"prompt":"Write a Python script for creating a typesafe data model based on a given JSON object. {name: Bob, age: 42, likes: [Sports, Coding]}","completion":"class DataModel: def __init__(self, name: str, age: int, likes: List[str]): self.name = name self.age = age self.likes = likes data = DataModel(name=\\"Bob\\", age=42, likes=[\\"Sports\\", \\"Coding\\"])"},{"prompt":"Generate a Python script to automatically download content from Twitter for a given hashtag. The script should be able to process the content and collect information about the hashtag. Not applicable","completion":"import requests import json # This is the query we will use to search tweets query = '#example' # This is the base url for the search base_url = 'https://api.twitter.com/1.1/search/tweets.json' # Construct the parameters params = { 'q': query, 'result_type': 'recent', 'count': 100 } # Make the request response = requests.get(url=base_url, params=params) # Get the response data data = response.json() # Create new dictionary to store results results = {} # Iterate through each of the tweets for tweet in data['statuses']: # Get the text of the tweet text = tweet['text'] # Get the user who tweeted user = tweet['user']['screen_name'] # Get the number of retweets retweets = tweet['retweet_count'] # Get the number of likes it received likes = tweet['favorite_count'] # Store the tweet data in our results dictionary results[text] = { 'user': user, 'retweets': retweets, 'likes': likes} # Print out the results print(json.dumps(results, indent=4))"},{"prompt":"Find the longest substring in the given input using Python. abcabcbb","completion":"def longest_substring(s): # create set seen_characters = set() # initialize variables max_length = i = 0 # loop through string while i < len(s): # if character is not in seen_characters if s[i] not in seen_characters: # increment max_length and update seen_characters seen_characters.add(s[i]) max_length = max(max_length, len(seen_characters)) i += 1 else: # remove first character from seen_characters seen_characters.remove(s[i-max_length]) # return max_length return max_length string = 'abcabcbb' result = longest_substring(string) print(result)"},{"prompt":"Generate a random password in Python with length of 8 characters with at least one lowercase, uppercase, number and special character.","completion":"import random import string def generatePassword(length): password_characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(password_characters) for i in range(length)) lowercase = [a for a in password if a.islower()] uppercase = [b for b in password if b.isupper()] number = [c for c in password if c.isdigit()] special_character = [d for d in password if not d.isalnum()] if len(lowercase) == 0 or len(uppercase) == 0 or len(number) == 0 or len(special_character) == 0 : return generatePassword(length) else: return password print(generatePassword(8))"},{"prompt":"Develop a function to classify a given set of text samples into two categories in Python.","completion":"def classify(samples): vectorizer = TfidfVectorizer(stop_words='english') documents = vectorizer.fit_transform(samples) classifier = SVC(C=1.0, kernel='linear', gamma='auto') classifier.fit(documents) classes = classifier.predict(documents) return classes"},{"prompt":"Construct a for loop in Python to iterate over a given list and print the elements. my_list = [1, 2, 3, 4, 5]","completion":"for i in my_list: print(i)"},{"prompt":"Generate a Python program which will convert the given binary number into its equivalent decimal number","completion":"def binary_to_decimal(binary): decimal = 0 binary = binary[::-1] for i, num in enumerate(binary): if num == '1': decimal += pow(2, i) return decimal"},{"prompt":"Python, write a program to find and count the occurrences of all alphabets in the given string. String: The Quick Brown Fox Jumps Over the Lazy Dog","completion":"from collections import Counter def count_alphabets(str): return Counter(str.lower()) my_str = \\"The Quick Brown Fox Jumps Over the Lazy Dog\\" alphabet_count = count_alphabets(my_str) print(alphabet_count)"},{"prompt":"Create a Python program that takes an array of integers and prints all pairs of elements that sum to a given value. array = [2, 3, 4, 5, 7, 10] sum = 5","completion":"def twoSum(array,sum): # Set up an empty answer list answerList = [] #Loop over all elements in the array for element in array: #Subtract the element from the given sum temp = sum - element # Check if the complement exists in the array if temp in array: answerList.append((temp,element)) return answerList # Driver code array = [2, 3, 4, 5, 7, 10] sum = 5 print(twoSum(array,sum))"},{"prompt":"Create an AI model in Python to classify whether a given text is in English or not. Not applicable","completion":"import pandas as pd from sklearn import preprocessing from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Load the datasets df_en = pd.read_csv('english.csv') df_non_en = pd.read_csv('non_english.csv') # Encode labels le = preprocessing.LabelEncoder() le.fit(['en', 'non_en']) y_en = le.transform(df_en['language']) y_non_en = le.transform(df_non_en['language']) # Vectorize text vectorizer = CountVectorizer() X_en = vectorizer.fit_transform(df_en.text) X_non_en = vectorizer.fit_transform(df_non_en.text) # Split the data into train/test sets X_train, X_test, y_train, y_test = train_test_split( X_en.toarray() + X_non_en.toarray(), y_en.tolist() + y_non_en.tolist(), test_size=0.25, random_state=0, ) # Train the model clf = MultinomialNB().fit(X_train, y_train) # Evaluate the model predicted = clf.predict(X_test) print(\\"Classification report: %s\\" % (metrics.classification_report(y_test, predicted)))"},{"prompt":"Build a web scraper in Python to extract data from a given website.","completion":"import requests from bs4 import BeautifulSoup # Define a function to fetch the webpage and extract data def data_extraction(url): # Fetch the webpage and parse it page = requests.get(url) page_parse = BeautifulSoup(page.content, 'html.parser') # Extract data data = page_parse.find_all('div', class_='data-item') return data # Provide the URL of the website url = 'https://example.com' # Fetch the webpage and extract data data = data_extraction(url)"},{"prompt":"Create a Machine Learning model in Python that takes data points from a spreadsheet and classifies them as either a positive or a negative result. The spreadsheet contains the following columns: City, Temperature, Hours of Sunlight, Amount of Rain. The data points are for the cities of New York, Tokyo, and London.","completion":"# Import necessary libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.svm import SVC # Read data data = pd.read_csv(\\"data.csv\\") # Split data into features and labels X = data.loc[:, data.columns != 'Result'] y = data['Result'] # Split data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1) # Standardize data sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test) # Create model svc = SVC(kernel='linear', C=1) # Train model svc.fit(X_train, y_train) # Make prediction y_pred = svc.predict(X_test)"},{"prompt":"Generate a program in Python count the number of words in a given sentence.","completion":"def count_words(sentence): words = sentence.split(' ') return len(words)"},{"prompt":"Generate a function in Python that takes a list of integers and returns a boolean indicating whether or not there are any duplicates in the input list. [1, 2, 3, 1]","completion":"def contains_duplicates(list): seen = set() for element in list: if element in seen: return True seen.add(element) return False"},{"prompt":"Develop a Python program to check if a triangle is valid or not. Length of sides: 3, 4, 5","completion":"# A function to check if the triangle is valid def valid_triangle(side1, side2, side3): # Check the sum of any two sides should be # greater than the third one. a = side1 + side2 b = side1 + side3 c = side2 + side3 if (a > side3) and (b > side2) and (c > side1): return True else: return False # Driver Code side1 = 3 side2 = 4 side3 = 5 if valid_triangle(side1, side2, side3): print(\\"The triangle is valid\\") else: print(\\"The triangle is not valid\\")"},{"prompt":"Generate a clickable GUI for a Python application. Python functio","completion":"# Imports from tkinter import * # Create window root = Tk() # Define functions def func1(): pass def func2(): pass # Add elements to GUI btn1 = Button(root, text=\\"Function 1\\", command=func1) btn2 = Button(root, text=\\"Function 2\\", command=func2) btn1.pack() btn2.pack() # Run the window root.mainloop()"},{"prompt":"This code is a Python script that can be used to connect to a language agent and execute a script. To use this script, you need to provide the address of the language agent and the path to the script you want to execute as command line arguments. You can also provide some optional arguments to control the behavior of the script, such as the timeouts for connecting to the agent and executing the script, and the verbosity level. To run the script, simply call the main() function.","completion":"# # Copyright 2009 Eigenlabs Ltd. http://www.eigenlabs.com # # This file is part of EigenD. # # EigenD is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # EigenD is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with EigenD. If not, see <http://www.gnu.org/licenses/>. # from pisession import session from pi import index,async,timeout,proxy,resource import optparse import sys import piw import picross import traceback class Connector(proxy.AtomProxy,async.Deferred): monitor = set() def __init__(self,address): async.Deferred.__init__(self) proxy.AtomProxy.__init__(self) self.__anchor = piw.canchor() self.__anchor.set_client(self) self.__anchor.set_address_str(address) def close_client(self): proxy.AtomProxy.close_client(self) def cancel(self): self.__anchor.set_address_str('') self.__anchor.set_client(None) self.__anchor=None def node_ready(self): self.succeeded() class RpcAdapter(async.DeferredDecoder): def decode(self): if self.deferred.status() is False: return async.Coroutine.failure(self.deferred.args()[0]) return self.deferred.args()[0] def coroutine(lang,script,ctimeout=3000,rtimeout=3000,verbose=True): connector = Connector(lang) timer = timeout.Timeout(connector,ctimeout,False,'cant connect to language agent') yield timer if not timer.status(): yield async.Coroutine.failure(*timer.args()) return if verbose: print 'connected to',lang,connector.status() for line in script_reader(script): rpc = connector.invoke_rpc('exec',line,time=rtimeout) yield rpc if not rpc.status(): print line,'failed:',rpc.args()[0] return if verbose: print line,'ok' def script_reader(fp): for line in fp: line = line.strip() if not line or line.startswith('#'): continue yield line def open_script(name): if name == '-': return sys.stdin try: return resource.file_open(name,\\"r\\") except: return None def main(): parser = optparse.OptionParser(usage=sys.argv[0]+' [options] agent script') parser.add_option('--quiet',action='store_true',dest='quiet',default=False,help='quiet') parser.add_option('--ctimeout',action='store',type='int',dest='ctimeout',default=5000,help='con timeout (5000 ms)') parser.add_option('--rtimeout',action='store',type='int',dest='rtimeout',default=300000,help='rpc timeout (300000 ms)') parser.add_option('--verbose',action='store_true',dest='verbose',default=False,help='verbose') (opts,args) = parser.parse_args(sys.argv) if len(args) != 3: parser.error('wrong number of arguments') lang = args[1] script = args[2] fp = open_script(script) if fp is None: parser.error('cant open %s' % script) def handler(ei): traceback.print_exception(*ei) return async.Coroutine.failure('internal error') def failed(msg): if opts.verbose: print 'script failed:',msg picross.exit(-1) def succeeded(): if opts.verbose: print 'script finished' picross.exit(0) def startup(dummy): result = async.Coroutine(coroutine(lang,fp,opts.ctimeout,opts.rtimeout,opts.verbose),handler) result.setErrback(failed).setCallback(succeeded) return result picross.pic_set_interrupt() session.run_session(startup,clock=False)"},{"prompt":"Write a Python program to generate a table of HTML with data from the specified dictionary. { 'name': 'James', 'age': 25, 'city': 'New York' }","completion":"html_str = \\"\\" html_str += \\"<table>n\\" html_str += \\"<tr><th>Name</th><th>Age</th><th>City</th></tr>n\\" data = { 'name': 'James', 'age': 25, 'city': 'New York' } html_str += \\"<tr><td>{}</td><td>{}</td><td>{}</td></tr>n\\".format(data['name'], data['age'], data['city']) html_str += \\"</table>n\\" print(html_str)"},{"prompt":"Write a Python program to normalize a matrix by subtracting the mean of each row from each value. [[ 10, 11, 17, 16, 14], [ 2, 6, 3, 5, 0], [ 17, 20, 9, 18, 21]]","completion":"import numpy as np arr = np.array([[ 10, 11, 17, 16, 14], [ 2, 6, 3, 5, 0], [ 17, 20, 9, 18, 21]]) arr_mean = np.mean(arr, axis=1) arr_normalized = arr - arr_mean[:,np.newaxis] print(arr_normalized) # Output: # [[ 3.4 3.4 9.8 9.8 7.8] # [-1.6 0.4 -3.6 -2.6 -4.6] # [ 5.4 8.4 -1.6 6.4 9.4]]"},{"prompt":"Perform set theory operations using Python. A = {1, 2, 3} B = {2, 3, 4}","completion":"A = {1, 2, 3} B = {2, 3, 4} # Union of Sets C = A.union(B) print(C) # Intersection of Sets C = A.intersection(B) print(C) # Difference of Sets C = A.difference(B) print(C)"},{"prompt":"Write a python code to normalize a matrix (normalize all elements in the matrix). [[3, 2, 5], [1, 7, 4], [2, 3, 2]]","completion":"def normalize_matrix(matrix): output = [] m,n = len(matrix), len(matrix[0]) min_el, max_el = float(\\"inf\\"), float(\\"-inf\\") for i in range(m): for j in range(n): min_el = min(matrix[i][j], min_el) max_el = max(matrix[i][j], max_el) for i in range(m): output.append([]) for j in range(n): output[i].append((matrix[i][j]-min_el)/(max_el-min_el)) return output"},{"prompt":"Write a Python program to recommend movies according to user preferences. Not applicable","completion":"import pandas as pd #read the data movies = pd.read_csv('movies.csv') ratings = pd.read_csv('ratings.csv') #calculate the mean rating for each movie mean_movie_rating = ratings.groupby('movie_id', as_index=False).mean() #merge the two dataframes movies_with_rating = movies.merge(mean_movie_rating, on='movie_id') #sort by rating movies_with_rating.sort_values(by='rating', ascending=False, inplace=True) #recommend movies recommendations = movies_with_rating[movies_with_rating.rating >= 4] print(recommendations)"},{"prompt":"Develop a web resource monitor in Python that records the amount of data transferred from a given web resource.","completion":"import requests def monitor_web_resource(url): response = requests.get(url) total_data = 0 while response.status_code == 200: total_data += len(response.content) response = requests.get(url) return total_data total_data = monitor_web_resource(\\"http://example.com\\")"},{"prompt":"Write a Python function to check if a given number is an Armstrong number or not. An Armstrong number is a number whose sum of cubes of its digits is equal to the number itself.","completion":"def is_armstrong(n): num_list = list(map(int, str(n))) _sum = 0 for num in num_list: _sum += num ** 3 return n == _sum"},{"prompt":"Create a Python Django web application that generates a ztree for a given user. The ztree should display a hierarchical structure of projects, services, hosts, and other relevant information. The ztree should be accessible only to authenticated users. The ztree should be generated using the given code.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- # ============================================================================= # FileName: api.py # Desc: 2015-15/4/16:下午5:54 # Author: 苦咖啡 # Email: voilet@qq.com # HomePage: http://blog.kukafei520.net # History: # ============================================================================= from django.shortcuts import render_to_response, HttpResponseRedirect, HttpResponse from django.template import RequestContext from django.contrib.auth.decorators import login_required import commands, json, yaml from assets.models import Project from mysite.settings import auth_key from assets.models import Host, IDC import hashlib, time from django.views.decorators.csrf import csrf_exempt from django.shortcuts import redirect # 登录 from users.models import CustomUser from assets.models import project_swan from assets.ztree.service import ztree_tag from django.shortcuts import get_object_or_404 from assets.models import Host, IDC, Service, Line, Project, HostRecord from cmdb_auth.models import AuthNode # songxs add @login_required def ztree_project(request): line_list = Line.objects.filter() business = Project.objects.filter(line__isnull=False) no_business = Project.objects.filter(line__isnull=True) ztree_data = ztree_tag(request.user.username) return render_to_response('default/default.html', locals(), context_instance=RequestContext(request)) @login_required def ztree_business(request): \\"\\"\\" 树请求验证 :param request: :return: \\"\\"\\" business_name = request.GET.get(\\"uuid\\", False) get_token = str(request.GET.get(\\"token\\", False)) ztree_data = ztree_tag(request.user.username) try: sum_token = str(hashlib.sha1(request.user.username + auth_key + business_name + time.strftime('%Y-%m-%d', time.localtime(time.time()))).hexdigest()) except TypeError: sum_token = False if request.GET.get(\\"options\\") == \\"host\\": uuid = request.GET.get('uuid', '') ip = request.GET.get('ip', '') if uuid: host = get_object_or_404(Host, uuid=uuid) elif ip: host = get_object_or_404(Host, eth1=ip) host_record = HostRecord.objects.filter(host=host).order_by('-time') user_audit = AuthNode.objects.filter(node=host) audit_count = user_audit.count() return render_to_response('ztree/host_detail.html', locals(), context_instance=RequestContext(request)) content_status = True idle = request.GET.get(\\"idle\\", False) if get_token != sum_token: content_status = False return render_to_response('ztree/ztree_service.html', locals(), context_instance=RequestContext(request)) if business_name != u\\"未分类\\": try: bus_data = Project.objects.get(uuid=request.GET.get(\\"uuid\\")) if not idle: server_list = Host.objects.filter(business=bus_data, idle=True).order_by(\\"create_time\\") else: server_list = Host.objects.filter(business=bus_data, idle=False).order_by(\\"create_time\\") except: pass else: bus_data = u'未分类' idc_data = IDC.objects.filter(type=1) if not idle: server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=True).order_by(\\"create_time\\") else: server_list = Host.objects.filter(business__isnull=True, idc=idc_data, idle=False).order_by(\\"create_time\\") if request.GET.get(\\"options\\") == \\"swan_push\\": s = Ztree_class(business_name, request.user.first_name) rst = s.swan() rst_data = rst.get(\\"swan_name\\") status = len(rst_data) return render_to_response('ztree/swan.html', locals(), context_instance=RequestContext(request)) if request.GET.get(\\"options\\") == \\"doc\\": data = Project.objects.get(pk=business_name) # return render_to_response('ztree/swan.html', locals(), context_instance=RequestContext(request)) return render_to_response('markdown/index.html', locals(), context_instance=RequestContext(request)) if request.GET.get(\\"options\\") == \\"highstate\\": project = Project.objects.get(uuid=business_name) host_list = Host.objects.filter(business=project) return render_to_response('ztree/highstate.html', locals(), context_instance=RequestContext(request)) if request.GET.get(\\"options\\") == \\"monitor\\": return render_to_response('ztree/zabbix_count.html', locals(), context_instance=RequestContext(request)) if request.GET.get(\\"options\\") == \\"salt\\": return render_to_response('ztree/saltstack.html', locals(), context_instance=RequestContext(request)) if request.GET.get(\\"options\\") == \\"project\\": ip_list = [] server_list = {} line_name = Line.objects.get(pk=business_name) business_data = Project.objects.filter(line=business_name) for i in business_data: node = Host.objects.filter(business=i, idle=True) for k in node: if k.eth1 not in ip_list: ip_list.append(k.eth1) server_list[str(k.uuid)] = k.eth1 count = len(ip_list) return render_to_response('ztree/project.html', locals(), context_instance=RequestContext(request)) if request.GET.get(\\"options\\") == \\"types\\": get_env = request.GET.get(\\"name\\") business_data = Project.objects.filter(pk=business_name) server_list = Host.objects.filter(business=business_data, env=get_env).order_by(\\"-create_time\\") count = server_list.count() return render_to_response('ztree/ztree.html', locals(), context_instance=RequestContext(request)) if request.GET.get(\\"options\\") == \\"service\\": s = [] bus_data = Project.objects.get(uuid=business_name) server_list = Host.objects.filter(business=bus_data, idle=True).order_by(\\"create_time\\") for i in server_list: t = i.service.all() for b in t: if b not in s: s.append(b) tag = request.GET.get(\\"tgt\\", False) if tag: service_all = Service.objects.get(name=tag) server_list = Host.objects.filter(service=service_all, business=bus_data) return render_to_response('ztree/ztree_service.html', locals(), context_instance=RequestContext(request)) count = server_list.count() return render_to_response('ztree/ztree.html', locals(), context_instance=RequestContext(request)) @login_required def CdnCache(request): \\"\\"\\" 树请求验证 :param request: :return: \\"\\"\\" service = request.GET.get(\\"services\\") get_token = str(request.GET.get(\\"token\\")) uuid = str(request.GET.get(\\"uuid\\")) sum_token = str(hashlib.sha1(request.user.username + auth_key + service + time.strftime('%Y-%m-%d', time.localtime( time.time()))).hexdigest()) content_status = True if get_token != sum_token: content_status = False idc_data = IDC.objects.get(uuid=uuid) service_all = Service.objects.get(name=service) server_list = Host.objects.filter(idc=idc_data, service=service_all) business_name = idc_data.name service_tag = service return render_to_response('ztree/service.html', locals(), context_instance=RequestContext(request)) @login_required def CdnIdc(request): \\"\\"\\" 树请求验证 :param request: :return: \\"\\"\\" get_token = str(request.GET.get(\\"token\\")) uuid = str(request.GET.get(\\"uuid\\")) idc_data = IDC.objects.get(uuid=uuid) sum_token = str(hashlib.sha1(request.user.username + auth_key + idc_data.name + time.strftime('%Y-%m-%d', time.localtime( time.time()))).hexdigest()) content_status = True if get_token != sum_token: content_status = False server_list = Host.objects.filter(idc=idc_data) business_name = idc_data.name return render_to_response('ztree/idc.html', locals(), context_instance=RequestContext(request)) class Ztree_class(object): \\"\\"\\" ztree 类 \\"\\"\\" def __init__(self, project_name, user): self.project_name = project_name self.user = user def monitor(self): return True def swan(self): rst_data = {} user_info = CustomUser.objects.get(first_name=self.user) myform_rst = Project.objects.get(uuid=self.project_name) rst = project_swan.objects.filter(project_name_id=myform_rst.uuid) \\"\\"\\" 所有当前项目发布名称放到一个list中 \\"\\"\\" swan_name_list = [i.swan_name for i in rst] swan_push = user_info.project_swan_set.all() user = CustomUser.objects.get(first_name=self.user) if user.is_superuser: for i in rst: rst_data[str(i.uuid)] = i.swan_name else: swan_push = user_info.project_swan_set.all() for i in swan_push: if i.swan_name in swan_name_list: rst_data[str(i.uuid)] = i.swan_name host_list = myform_rst.host_set.all() content = {\\"swan_name\\": rst_data, \\"host\\": host_list} return content def highstate(self): project = Project.objects.get(service_name=self.project_name) # server_list = project.host_set host_list = Host.objects.filter(business=project) return True @csrf_exempt def ZtreeIndex(request): \\"\\"\\" :param request: :return: \\"\\"\\" if request.method == 'POST': otherParam = request.POST.get(\\"otherParam\\") status = request.POST.get(\\"status\\") line_id = request.POST.get(\\"line_id\\") try: name = request.POST.get(\\"name\\") id = request.POST.get(\\"id\\") except: name = False if not name: ztree = ztree_tag(request.user.username) return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4)) elif int(status[0]) == 1: ztree = [] return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4)) else: ztree = [] bus_data = Project.objects.get(service_name=name) server_list = Host.objects.filter(business=bus_data).order_by(\\"create_time\\") s = [] for i in server_list: t = i.service.all().values() for b in t: if b not in s: s.append(b) tree_id = 0 for i in s: tree_id += 1 token = hashlib.sha1(request.user.username + auth_key + i.get(\\"name\\") + time.strftime('%Y-%m-%d', time.localtime( time.time()))).hexdigest() ztree.append({\\"id\\": tree_id, \\"status\\": 3, \\"line_id\\": line_id, \\"name\\": i.get(\\"name\\"), \\"token\\": token, \\"t\\": i.get(\\"name\\"), \\"business\\": bus_data.service_name}) return HttpResponse(json.dumps(ztree, ensure_ascii=False, indent=4)) content = {\\"status\\": 403, \\"message\\": \\"auth error\\"} return HttpResponse(json.dumps(content, ensure_ascii=False, indent=4))"},{"prompt":"Create a web scraping algorithm using Python to extract all the links from a webpage.","completion":"import requests from bs4 import BeautifulSoup def get_links(url): req = requests.get(url) if req.status_code == 200: soup = BeautifulSoup(req.content, 'lxml') links = [] for link in soup.find_all('a', href=True): links.append(link.get('href')) return links"},{"prompt":"Write a Python script to generate 10 random numbers between 0 and 1 and store them in a list. Not applicable","completion":"import random random_list = [] for i in range(10): random_list.append(random.random()) print(random_list) Output: [0.32233077981905054, 0.08449088355109318, 0.26706425230031013, 0.276595698659202, 0.5024115881862439, 0.7038010994199326, 0.4978053082374824, 0.954865052905624, 0.0981980238128365, 0.9497282414948095]"},{"prompt":"Generate an optimized Insertion Sort algorithm in Python. List = [7, 4, 8, 3, 6, 2, 5, 9, 1]","completion":"def insertion_sort(arr): # loop through the array for i in range(1, len(arr)): # store current value as a key key = arr[i] # compare the key with the sorted sub-array j = i-1 while j >= 0 and key < arr[j]: # move the sorted elements arr[j+1] = arr[j] j -= 1 # insert the key arr[j+1] = key return arr # input List = [7, 4, 8, 3, 6, 2, 5, 9, 1] # output [1, 2, 3, 4, 5, 6, 7, 8, 9]"},{"prompt":"Create a Python web crawler to collect data from web page.","completion":"import requests import bs4 def web_crawler(url): # make request to the specified url and retrieve the response response = requests.get(url) # since this page is regular HTML page, we need to use the html parser soup = bs4.BeautifulSoup(response.text, 'html.parser') # extract the data from the parsed web page results = soup.select(\\"body\\") # return collected data return results"},{"prompt":"Generate a python program to print the ordered combination of the elements of the given list. [1, 2, 3]","completion":"def ordered_combination(arr): result = [] # Generate all permutations using library function permutations = itertools.permutations(arr, len(arr)) # Append each permutation in a list for permutation in permutations: result.append(list(permutation)) # Return the list of ordered combinations return result"},{"prompt":"Design an algorithm to detect fraud using Python.","completion":"def fraud_detection(transactions): fraud_transactions = [] for transaction in transactions: # Get the amount of the transaction amount = transaction['amount'] # Check if the amount is greater than the user's typical spending pattern if amount > user_spending_threshold(transaction['user_id']): # Check if this is an unusual merchant for this user if is_unusual_merchant(transaction['user_id'], transaction['merchant_id']): # Flag the transaction as suspicious fraud_transactions.append(transaction) # Return the list of suspicious transactions return fraud_transactions def user_spending_threshold(user_id): # Code to get the user's typical spending pattern ... return threshold def is_unusual_merchant(user_id, merchant_id): # Code to check if the merchant is unusual for this user ... return is_unusual"},{"prompt":"Generate a code snippet to calculate the average of an array of numbers in Python. Not applicable","completion":"def average(numbers): return sum(numbers) / len(numbers)"},{"prompt":"Create a python program that takes two numbers and calculates the exponent of the first number raised to the power of the second number. base: 2 exponent: 3","completion":"# This program takes two numbers and calculates the # exponent of the first number raised to the power of the second number def calculateExponent(base, exponent): return base**exponent base = 2 exponent = 3 result = calculateExponent(base, exponent) print(\\"The result is:\\", result) # The result is: 8"},{"prompt":"Create a GPUaccelerated algorithm in Python that performs matrix multiplication. Not applicable","completion":"import torch def matrix_multiplication(A, B): device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') A = torch.tensor(A).to(device) B = torch.tensor(B).to(device) return torch.matmul(A, B).cpu().numpy()"},{"prompt":"Generate a classifier to determine if a movie is appropriate for kids using Scikitlearn in Python.","completion":"import pandas as pd import numpy as np from sklearn.preprocessing import LabelEncoder from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier # Load data data = pd.read_csv(\\"movie_data.csv\\") # Create feature and target sets X = data.drop(['Suitable for Kids'], axis=1) y = data['Suitable for Kids'] # Encode target labels le = LabelEncoder() y = le.fit_transform(y) # Split into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0) # Build decision tree classifier classifier = DecisionTreeClassifier(random_state = 0).fit(X_train, y_train) # Print accuracy print(\\"Decision tree classifier accuracy on train set: {:.2f}\\".format(classifier.score(X_train, y_train))) print(\\"Decision tree classifier accuracy on test set: {:.2f}\\".format(classifier.score(X_test, y_test)))"},{"prompt":"Use Dijkstra's algorithm to find the shortest path from a given vertex to another. Graph = { 'A': {'B': 4, 'C': 2}, 'B': {'A': 4, 'D': 5}, 'C': {'A': 2, 'D': 8, 'G': 10}, 'D': {'B': 5, 'C': 8, 'E': 2}, 'E': {'D': 2, 'F': 3}, 'F': {'E': 3, 'G': 7}, 'G': {'C': 10, 'F': 7} } Starting Vertex: A Destination Vertex : G","completion":"# Python program to find shortest path # using Dijkstra's Algorithm import math #function to find the shortest path def dijkstra(graph, src, dest, V): # dist[i] will hold the shortest distance from src to i dist = [math.inf] * V # sptSet[i] will true if vertex i is # included / in shortest path tree or # shortest distance from src to i is finalized sptSet = [False] * V # Initialize all distances as INFINITE and # stpSet[] as false dist[src] = 0 # Find shortest path for all vertices for _ in range(V): u = minDistance(dist, sptSet) sptSet[u] = True # update dist value of adjacent vertices # of the picked vertex. for v in range(V): if graph[u][v] and sptSet[v] == False and dist[v] > dist[u] + graph[u][v]: dist[v] = dist[u] + graph[u][v] # print the constructed distance array print(\\"Vertex distance from Source\\") for node in range(V): print(node, 't', dist[node]) # Get the shortest path from src to dest path = getPath(dist, dest, src) return path def getPath(dist, dest, src): path = [dest] while dest != src: for i in range(V): if dist[dest] - dist[i] == graph[i][dest]: path.append(i) dest = i path.reverse() return path def minDistance(dist, sptSet): min = math.inf for v in range(V): if dist[v] < min and sptSet[v] == False: min = dist[v] min_index = v return min_index V = 7 # Print the shortest path print(\\"Shortest Path: {}\\".format(dijkstra(Graph, 0, 6, V)))"},{"prompt":"Develop a chatbot in Python using Natural Language Processing and Machine Learning. Not applicable","completion":"# Import libraries import nltk from nltk.stem.lancaster import LancasterStemmer stemmer = LancasterStemmer() # Import datasets import json with open('data.json') as json_data: data = json.load(json_data) # Pre-process words = [] labels = [] docs_x = [] docs_y = [] for intent in data[\\"intents\\"]: for pattern in intent[\\"patterns\\"]: wrds = nltk.word_tokenize(pattern) words.extend(wrds) docs_x.append(wrds) docs_y.append(intent[\\"tag\\"]) if intent[\\"tag\\"] not in labels: labels.append(intent[\\"tag\\"]) # Stem and remove duplicates words = [stemmer.stem(w.lower()) for w in words if w != \\"?\\"] words = sorted(list(set(words))) # Create bag-of-words training = [] output = [] out_empty = [0 for _ in range(len(labels))] for x, doc in enumerate(docs_x): bag = [] wrds = [stemmer.stem(w) for w in doc] for w in words: if w in wrds: bag.append(1) else: bag.append(0) output_row = out_empty[:] output_row[labels.index(docs_y[x])] = 1 training.append(bag) output.append(output_row) # Train import numpy as np training = np.array(training) output = np.array(output) # Create model from keras.models import Sequential from keras.layers import Dense, Activation model = Sequential() model.add(Dense(128, input_shape=(len(training[0]),), activation='relu')) model.add(Dense(64, activation='relu')) model.add(Dense(len(output[0]), activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(training, output, epochs=1000, batch_size=8, verbose=1) # Save the model import pickle pickle.dump(model, open(\\"model.pkl\\", \\"wb\\"))"},{"prompt":"Write a Python program which will sort a given list of numbers in descending order without changing their relative positions. [3.14, 4.34, 8.3, 1.6]","completion":"\\"\\"\\" Write a Python program which will sort a given list of numbers in descending order without changing their relative positions. \\"\\"\\" def sort_descending(lst): lst_sorted = sorted(lst, reverse=True) res = [] for i, val in enumerate(lst): res.append(lst_sorted[i]) return res if __name__ == '__main__': lst = [3.14, 4.34, 8.3, 1.6] sorted_lst = sort_descending(lst) print(sorted_lst)"},{"prompt":"Complete this Python code to to generate a random password using a given length. length = 10","completion":"import string import random def generate_password(length): password_characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(password_characters) for i in range(length)) return password print(generate_password(length))"},{"prompt":"Create a Python script the uses a library like NumPy or Pandas to calculate the mean, median, and mode of a list of 20 numbers. [38, 45, 42, 43, 37, 41, 53, 90, 55, 72, 85, 56, 68, 54, 43, 42, 39, 70, 62, 68]","completion":"import numpy as np input_data = np.array([38, 45, 42, 43, 37, 41, 53, 90, 55, 72, 85, 56, 68, 54, 43, 42, 39, 70, 62, 68]) mean = np.mean(input_data) median = np.median(input_data) mode = np.bincount(input_data).argmax() print(\\"Mean:\\", mean) print(\\"Median:\\", median) print(\\"Mode:\\", mode)"},{"prompt":"Design a Python program to remove all the elements from a list that are not a prime number. [1, 2, 3, 4, 5, 6, 7, 8]","completion":"def remove_non_primes(my_list): result = [] for num in my_list: prime = True for i in range(2, num): if num % i == 0: prime = False break if prime: result.append(num) return result result = remove_non_primes([1, 2, 3, 4, 5, 6, 7, 8]) print(result)"},{"prompt":"Create a Python script to check a given URL and see if it is active or not.","completion":"import requests def check_url(url): try: response = requests.get(url) if response.status_code == 200: return True else: return False except: return False"},{"prompt":"Write a Python program to remove unnecessary punctuation marks from a string.","completion":"#Function to remove all punctuations from a string def remove_punctuations(text): for punctuation in '!\\"#%&'()*+,-./:;<=>?@[]^_\`{|}~': text = text.replace(punctuation, '') return text #input string str = \\"It's a pleasure to meet you!!!\\" #calling the function result = remove_punctuations(str) #printing the result print(result)"},{"prompt":"Transform the following Python code to achieve the same result with better performance def classify_number_bigger_5(number): result = [] for n in number: if n > 5: result.append(1) else: result.append(0) return resul","completion":"def classify_number_bigger_5(number): return [1 if n > 5 else 0 for n in number]"},{"prompt":"edit the given Python program to delete an elements at a given position def delete(list,N): first_part = list[:N] last_part = list[N+1:] list = first_part + last_part return l","completion":"def delete(list,N): first_part = list[:N] last_part = list[N+1:] list = first_part + last_part return list list1 = [1,2,3,4,5] N = int(input('Enter the index of the element to be deleted: ')) list1 = delete(list1,N) print(list1)"},{"prompt":"Convert the given code from C++ to a Python program int data[5] == { 20, 15, 8, 44, 67}; for (i=0; i<5; i++){ if (data[i] % 2 == 0){ cout << data[i] << endl; } }","completion":"data = [20, 15, 8, 44, 67] for i in data: if i%2 == 0: print (i)"},{"prompt":"Construct a python program to capture a user’s input and print the input back out to the console.","completion":"# Accepting user input name = input(\\"Please enter your name: \\") # Printing out the user input print(\\"Hello, \\", name, \\"!\\")"},{"prompt":"Write a Python program to implement a genetic algorithm for solving a problem. Problem: Find the maximum value of the function: f(x1,x2) = 3x1 + 2x2 Subject to the constraints: x1 <= 4 x2 ≤ 8 x1 + x2 ≤ 12","completion":"\\"\\"\\" Write a Python program to implement a genetic algorithm for solving a problem \\"\\"\\" import random import numpy as np # Function to generate a random population def generate_population(fitness_function, num_population=50): population = [] for i in range(num_population): population.append([random.randint(0, 8) for i in range(2)]) population = np.array(population) fitness_values = fitness_function(population) return population, fitness_values # Function to find maximum value def find_max_value(inputs): # Fitness function def fitness_function(inputs): return -3*inputs[0] + 2*inputs[1] # End condition def end_condition(fitness_values): max_val = np.max(fitness_values) if max_val >= 0: return True else: return False # Genetic algorithm def genetic_algorithm(): population, fitness_values = generate_population(fitness_function) while not end_condition(fitness_values): population, fitness_values = generate_population(fitness_function) new_population = [x.astype(int).tolist() for x in population] max_value = np.max(fitness_values) max_value_solution = new_population[np.argmax(fitness_values)] return max_value, max_value_solution # Main max_value, max_value_solution = genetic_algorithm() print(\\"Max Value:\\", max_value) print(\\"Max Value Solution:\\", max_value_solution) if __name__ == \\"__main__\\": inputs = [] find_max_value(inputs)"},{"prompt":"Create a program in Python to count the number of time a particular character appears in a given string. Input string: Hello, World! Character: l","completion":"def count_char_in_string(string, char): count = 0 for i in range(len(string)): if string[i] == char: count += 1 return count string = \\"Hello, World!\\" char = \\"l\\" count = count_char_in_string(string, char) print(\\"The number of times\\", char, \\"appears in the string is:\\", count)"},{"prompt":"Create a Python program to sort a list of strings according to the length of the strings in ascending order. ['Python', 'JS', 'C++', 'Java', 'PHP']","completion":"# Function to sort the list according to string length def sort_string_list(string_list): return sorted(string_list, key=len) if __name__ == '__main__': string_list = ['Python', 'JS', 'C++', 'Java', 'PHP'] sorted_string_list = sort_string_list(string_list) print(sorted_string_list)"},{"prompt":"Write a python code to obtain a dictionary of country codes and their corresponding median income.","completion":"import requests import json def get_median_income(): url = \\"https://data.worldbank.org/indicator/SI.POV.NAHC?locations=1W\\" response = requests.get(url) data = json.loads(response.text) income_data = data['data'][0] income_dict = dict() for entry in income_data: income_dict[entry[0]] = entry[3] return income_dict if __name__ == '__main__': print(get_median_income())"},{"prompt":"Create a basic web scraper using Python to retrieve the content of a web page. URL: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.example.com\\" page = requests.get(url) soup = BeautifulSoup(page.text, 'html.parser') content = soup.find_all('p') print(content)"},{"prompt":"Construct an algorithm using Python that sorts a given array using Merge Sort. [8, 4, 6, 7, 5]","completion":"def mergeSort(arr): # base case if len(arr) > 1: mid = len(arr) // 2 #Finding the mid of the array L = arr[:mid] # Dividing the array elements R = arr[mid:] # into 2 halves mergeSort(L) # Sorting the first half mergeSort(R) # Sorting the second half # iterators for L and R subarrays i = j = k = 0 # Copy data to temp arrays L[] and R[] while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i+=1 else: arr[k] = R[j] j+=1 k+=1 # Checking if any element was left while i < len(L): arr[k] = L[i] i+=1 k+=1 while j < len(R): arr[k] = R[j] j+=1 k+=1 # Code to print the list print(\\"Sorted array:\\") print(arr)"},{"prompt":"Create a program in Python to calculate the root mean square error (RMSE) between the two given datasets. Y Component: [1, 2, 3, 4, 5] Predicted Components: [1.1, 2.2, 2.9, 4.1, 4.8]","completion":"import numpy as np def rmse(predictions, targets): differences = predictions - targets differences_squared = differences ** 2 mean_of_differences_squared = np.mean(differences_squared) rmse_val = np.sqrt(mean_of_differences_squared) return rmse_val y = np.array([1, 2, 3, 4, 5]) predicted = np.array([1.1, 2.2, 2.9, 4.1, 4.8]) rmse = rmse(y, predicted) print(rmse)"},{"prompt":"Create a python script to sort an array of words such that all words beginning with the same letter are grouped together words = [apple, blueberry, cat, ant, dog, banana]","completion":"words = [\\"apple\\", \\"ant\\", \\"banana\\", \\"blueberry\\", \\"cat\\", \\"dog\\"] # sorting logic def sort_words(words): sorted_words = [] # group words with same first letter current_letter = words[0][0] temp = [] for word in words: if word[0] == current_letter: temp.append(word) else: sorted_words.extend(sorted(temp)) temp = [word] current_letter = word[0] sorted_words.extend(sorted(temp)) return sorted_words words = [\\"apple\\", \\"blueberry\\", \\"cat\\", \\"ant\\", \\"dog\\", \\"banana\\"] print(sort_words(words))"},{"prompt":"This code is a test for the GIRepository module. To run the test, execute the script. The test checks various aspects of the module, such as argument info, base info, object info, interface info, struct info, enum info, union info, type info, field info, property info, callable info, method info, vfunc info, flags double registration error, enum double registration error, introspected argument info, and more. The test should pass without any errors or failures.","completion":"# -*- Mode: Python; py-indent-offset: 4 -*- # vim: tabstop=4 shiftwidth=4 expandtab # # Copyright (C) 2013 Simon Feltman <sfeltman@gnome.org> # # test_repository.py: Test for the GIRepository module # # This library is free software; you can redistribute it and/or # modify it under the terms of the GNU Lesser General Public # License as published by the Free Software Foundation; either # version 2.1 of the License, or (at your option) any later version. # # This library is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU # Lesser General Public License for more details. # # You should have received a copy of the GNU Lesser General Public # License along with this library; if not, write to the Free Software # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 # USA import unittest import collections import gi._gi as GIRepository from gi.module import repository as repo from gi.repository import GObject from gi.repository import GLib from gi.repository import GIMarshallingTests from gi.repository import GIRepository as IntrospectedRepository try: import cairo cairo has_cairo = True except ImportError: has_cairo = False def find_child_info(info, getter_name, name): getter = getattr(info, getter_name) for child in getter(): if child.get_name() == name: return child else: raise ValueError('child info %s not found' % name) class Test(unittest.TestCase): def setUp(self): repo.require('GObject') repo.require('GIMarshallingTests') def test_arg_info(self): func_info = repo.find_by_name('GIMarshallingTests', 'array_fixed_out_struct') args = func_info.get_arguments() self.assertTrue(len(args), 1) arg = args[0] self.assertEqual(arg.get_container(), func_info) self.assertEqual(arg.get_direction(), GIRepository.Direction.OUT) self.assertEqual(arg.get_name(), 'structs') self.assertEqual(arg.get_namespace(), 'GIMarshallingTests') self.assertFalse(arg.is_caller_allocates()) self.assertFalse(arg.is_optional()) self.assertFalse(arg.is_return_value()) self.assertFalse(arg.may_be_null()) self.assertEqual(arg.get_destroy(), -1) self.assertEqual(arg.get_ownership_transfer(), GIRepository.Transfer.NOTHING) self.assertEqual(arg.get_scope(), GIRepository.ScopeType.INVALID) self.assertEqual(arg.get_type().get_tag(), GIRepository.TypeTag.ARRAY) def test_base_info(self): info = repo.find_by_name('GIMarshallingTests', 'Object') self.assertEqual(info.__name__, 'Object') self.assertEqual(info.get_name(), 'Object') self.assertEqual(info.__module__, 'gi.repository.GIMarshallingTests') self.assertEqual(info.get_name_unescaped(), 'Object') self.assertEqual(info.get_namespace(), 'GIMarshallingTests') self.assertEqual(info.get_container(), None) info2 = repo.find_by_name('GIMarshallingTests', 'Object') self.assertFalse(info is info2) self.assertEqual(info, info2) self.assertTrue(info.equal(info2)) def test_object_info(self): info = repo.find_by_name('GIMarshallingTests', 'Object') self.assertEqual(info.get_parent(), repo.find_by_name('GObject', 'Object')) self.assertTrue(isinstance(info.get_methods(), collections.Iterable)) self.assertTrue(isinstance(info.get_fields(), collections.Iterable)) self.assertTrue(isinstance(info.get_interfaces(), collections.Iterable)) self.assertTrue(isinstance(info.get_constants(), collections.Iterable)) self.assertTrue(isinstance(info.get_vfuncs(), collections.Iterable)) self.assertTrue(isinstance(info.get_properties(), collections.Iterable)) self.assertFalse(info.get_abstract()) self.assertEqual(info.get_class_struct(), repo.find_by_name('GIMarshallingTests', 'ObjectClass')) self.assertEqual(info.get_type_name(), 'GIMarshallingTestsObject') self.assertEqual(info.get_type_init(), 'gi_marshalling_tests_object_get_type') self.assertFalse(info.get_fundamental()) self.assertEqual(info.get_parent(), repo.find_by_name('GObject', 'Object')) def test_registered_type_info(self): info = repo.find_by_name('GIMarshallingTests', 'Object') # Call these from the class because GIObjectInfo overrides them self.assertEqual(GIRepository.RegisteredTypeInfo.get_g_type(info), GObject.type_from_name('GIMarshallingTestsObject')) self.assertEqual(GIRepository.RegisteredTypeInfo.get_type_name(info), 'GIMarshallingTestsObject') self.assertEqual(GIRepository.RegisteredTypeInfo.get_type_init(info), 'gi_marshalling_tests_object_get_type') @unittest.skipUnless(has_cairo, 'Regress needs cairo') def test_fundamental_object_info(self): repo.require('Regress') info = repo.find_by_name('Regress', 'TestFundamentalObject') self.assertTrue(info.get_abstract()) self.assertTrue(info.get_fundamental()) self.assertEqual(info.get_ref_function(), 'regress_test_fundamental_object_ref') self.assertEqual(info.get_unref_function(), 'regress_test_fundamental_object_unref') self.assertEqual(info.get_get_value_function(), 'regress_test_value_get_fundamental_object') self.assertEqual(info.get_set_value_function(), 'regress_test_value_set_fundamental_object') def test_interface_info(self): info = repo.find_by_name('GIMarshallingTests', 'Interface') self.assertTrue(isinstance(info.get_methods(), collections.Iterable)) self.assertTrue(isinstance(info.get_vfuncs(), collections.Iterable)) self.assertTrue(isinstance(info.get_constants(), collections.Iterable)) self.assertTrue(isinstance(info.get_prerequisites(), collections.Iterable)) self.assertTrue(isinstance(info.get_properties(), collections.Iterable)) self.assertTrue(isinstance(info.get_signals(), collections.Iterable)) method = info.find_method('test_int8_in') vfunc = info.find_vfunc('test_int8_in') self.assertEqual(method.get_name(), 'test_int8_in') self.assertEqual(vfunc.get_invoker(), method) self.assertEqual(method.get_vfunc(), vfunc) iface = info.get_iface_struct() self.assertEqual(iface, repo.find_by_name('GIMarshallingTests', 'InterfaceIface')) def test_struct_info(self): info = repo.find_by_name('GIMarshallingTests', 'InterfaceIface') self.assertTrue(isinstance(info, GIRepository.StructInfo)) self.assertTrue(isinstance(info.get_fields(), collections.Iterable)) self.assertTrue(isinstance(info.get_methods(), collections.Iterable)) self.assertTrue(isinstance(info.get_size(), int)) self.assertTrue(isinstance(info.get_alignment(), int)) self.assertTrue(info.is_gtype_struct()) self.assertFalse(info.is_foreign()) def test_enum_info(self): info = repo.find_by_name('GIMarshallingTests', 'Enum') self.assertTrue(isinstance(info, GIRepository.EnumInfo)) self.assertTrue(isinstance(info.get_values(), collections.Iterable)) self.assertTrue(isinstance(info.get_methods(), collections.Iterable)) self.assertFalse(info.is_flags()) self.assertTrue(info.get_storage_type() > 0) # might be platform dependent def test_union_info(self): info = repo.find_by_name('GIMarshallingTests', 'Union') self.assertTrue(isinstance(info, GIRepository.UnionInfo)) self.assertTrue(isinstance(info.get_fields(), collections.Iterable)) self.assertTrue(isinstance(info.get_methods(), collections.Iterable)) def test_type_info(self): func_info = repo.find_by_name('GIMarshallingTests', 'array_fixed_out_struct') arg_info, = func_info.get_arguments() type_info = arg_info.get_type() self.assertTrue(type_info.is_pointer()) self.assertEqual(type_info.get_tag(), GIRepository.TypeTag.ARRAY) self.assertEqual(type_info.get_tag_as_string(), 'array') self.assertEqual(type_info.get_param_type(0).get_tag(), GIRepository.TypeTag.INTERFACE) self.assertEqual(type_info.get_param_type(0).get_interface(), repo.find_by_name('GIMarshallingTests', 'SimpleStruct')) self.assertEqual(type_info.get_interface(), None) self.assertEqual(type_info.get_array_length(), -1) self.assertEqual(type_info.get_array_fixed_size(), 2) self.assertFalse(type_info.is_zero_terminated()) self.assertEqual(type_info.get_array_type(), GIRepository.ArrayType.C) def test_field_info(self): info = repo.find_by_name('GIMarshallingTests', 'InterfaceIface') field = find_child_info(info, 'get_fields', 'test_int8_in') self.assertEqual(field.get_name(), 'test_int8_in') self.assertTrue(field.get_flags() & GIRepository.FieldInfoFlags.IS_READABLE) self.assertFalse(field.get_flags() & GIRepository.FieldInfoFlags.IS_WRITABLE) self.assertEqual(field.get_type().get_tag(), GIRepository.TypeTag.INTERFACE) # don't test actual values because that might fail with architecture differences self.assertTrue(isinstance(field.get_size(), int)) self.assertTrue(isinstance(field.get_offset(), int)) def test_property_info(self): info = repo.find_by_name('GIMarshallingTests', 'PropertiesObject') prop = find_child_info(info, 'get_properties', 'some-object') flags = GObject.ParamFlags.READABLE | GObject.ParamFlags.WRITABLE | GObject.ParamFlags.CONSTRUCT self.assertEqual(prop.get_flags(), flags) self.assertEqual(prop.get_type().get_tag(), GIRepository.TypeTag.INTERFACE) self.assertEqual(prop.get_type().get_interface(), repo.find_by_name('GObject', 'Object')) self.assertEqual(prop.get_ownership_transfer(), GIRepository.Transfer.NOTHING) def test_callable_info(self): func_info = repo.find_by_name('GIMarshallingTests', 'array_fixed_out_struct') self.assertTrue(hasattr(func_info, 'invoke')) self.assertTrue(isinstance(func_info.get_arguments(), collections.Iterable)) self.assertEqual(func_info.get_caller_owns(), GIRepository.Transfer.NOTHING) self.assertFalse(func_info.may_return_null()) self.assertEqual(func_info.get_return_type().get_tag(), GIRepository.TypeTag.VOID) self.assertRaises(AttributeError, func_info.get_return_attribute, '_not_an_attr') @unittest.expectedFailure # https://bugzilla.gnome.org/show_bug.cgi?id=709462 @unittest.skipUnless(has_cairo, 'Regress needs cairo') def test_signal_info(self): repo.require('Regress') info = repo.find_by_name('Regress', 'TestObj') sig_info = find_child_info(info, 'get_signals', 'test') sig_flags = GObject.SignalFlags.RUN_LAST | GObject.SignalFlags.NO_RECURSE | GObject.SignalFlags.NO_HOOKS self.assertTrue(sig_info is not None) self.assertTrue(isinstance(sig_info, GIRepository.CallableInfo)) self.assertTrue(isinstance(sig_info, GIRepository.SignalInfo)) self.assertEqual(sig_info.get_name(), 'test') self.assertEqual(sig_info.get_class_closure(), None) self.assertFalse(sig_info.true_stops_emit()) self.assertEqual(sig_info.get_flags(), sig_flags) @unittest.expectedFailure # https://bugzilla.gnome.org/show_bug.cgi?id=709462 @unittest.skipUnless(has_cairo, 'Regress needs cairo') def test_notify_signal_info_with_obj(self): repo.require('Regress') info = repo.find_by_name('Regress', 'TestObj') sig_info = find_child_info(info, 'get_signals', 'sig-with-array-prop') sig_flags = GObject.SignalFlags.RUN_LAST self.assertTrue(sig_info is not None) self.assertTrue(isinstance(sig_info, GIRepository.CallableInfo)) self.assertTrue(isinstance(sig_info, GIRepository.SignalInfo)) self.assertEqual(sig_info.get_name(), 'sig-with-array-prop') self.assertEqual(sig_info.get_class_closure(), None) self.assertFalse(sig_info.true_stops_emit()) self.assertEqual(sig_info.get_flags(), sig_flags) def test_object_constructor(self): info = repo.find_by_name('GIMarshallingTests', 'Object') method = find_child_info(info, 'get_methods', 'new') self.assertTrue(isinstance(method, GIRepository.CallableInfo)) self.assertTrue(isinstance(method, GIRepository.FunctionInfo)) self.assertTrue(method in info.get_methods()) self.assertEqual(method.get_name(), 'new') self.assertFalse(method.is_method()) self.assertTrue(method.is_constructor()) self.assertEqual(method.get_symbol(), 'gi_marshalling_tests_object_new') flags = method.get_flags() self.assertFalse(flags & GIRepository.FunctionInfoFlags.IS_METHOD) self.assertTrue(flags & GIRepository.FunctionInfoFlags.IS_CONSTRUCTOR) self.assertFalse(flags & GIRepository.FunctionInfoFlags.IS_GETTER) self.assertFalse(flags & GIRepository.FunctionInfoFlags.IS_SETTER) self.assertFalse(flags & GIRepository.FunctionInfoFlags.WRAPS_VFUNC) self.assertFalse(flags & GIRepository.FunctionInfoFlags.THROWS) def test_method_info(self): info = repo.find_by_name('GIMarshallingTests', 'Object') method = find_child_info(info, 'get_methods', 'vfunc_return_value_only') self.assertTrue(isinstance(method, GIRepository.CallableInfo)) self.assertTrue(isinstance(method, GIRepository.FunctionInfo)) self.assertTrue(method in info.get_methods()) self.assertEqual(method.get_name(), 'vfunc_return_value_only') self.assertFalse(method.is_constructor()) self.assertEqual(method.get_symbol(), 'gi_marshalling_tests_object_vfunc_return_value_only') self.assertTrue(method.is_method()) flags = method.get_flags() self.assertTrue(flags & GIRepository.FunctionInfoFlags.IS_METHOD) self.assertFalse(flags & GIRepository.FunctionInfoFlags.IS_CONSTRUCTOR) self.assertFalse(flags & GIRepository.FunctionInfoFlags.IS_GETTER) self.assertFalse(flags & GIRepository.FunctionInfoFlags.IS_SETTER) self.assertFalse(flags & GIRepository.FunctionInfoFlags.WRAPS_VFUNC) self.assertFalse(flags & GIRepository.FunctionInfoFlags.THROWS) def test_vfunc_info(self): info = repo.find_by_name('GIMarshallingTests', 'Object') invoker = find_child_info(info, 'get_methods', 'vfunc_return_value_only') vfunc = find_child_info(info, 'get_vfuncs', 'vfunc_return_value_only') self.assertTrue(isinstance(vfunc, GIRepository.CallableInfo)) self.assertTrue(isinstance(vfunc, GIRepository.VFuncInfo)) self.assertEqual(vfunc.get_name(), 'vfunc_return_value_only') self.assertEqual(vfunc.get_invoker(), invoker) self.assertEqual(invoker, info.find_method('vfunc_return_value_only')) self.assertEqual(vfunc.get_flags(), 0) self.assertEqual(vfunc.get_offset(), 0xFFFF) # unknown offset self.assertEqual(vfunc.get_signal(), None) def test_flags_double_registration_error(self): # a warning is printed for double registration and pygobject will # also raise a RuntimeError. GIMarshallingTests.NoTypeFlags # cause flags registration info = repo.find_by_name('GIMarshallingTests', 'NoTypeFlags') old_mask = GLib.log_set_always_fatal(GLib.LogLevelFlags.LEVEL_ERROR) try: self.assertRaises(RuntimeError, GIRepository.flags_register_new_gtype_and_add, info) finally: GLib.log_set_always_fatal(old_mask) def test_enum_double_registration_error(self): # a warning is printed for double registration and pygobject will # also raise a RuntimeError. GIMarshallingTests.Enum # cause enum registration info = repo.find_by_name('GIMarshallingTests', 'Enum') old_mask = GLib.log_set_always_fatal(GLib.LogLevelFlags.LEVEL_ERROR) try: self.assertRaises(RuntimeError, GIRepository.enum_register_new_gtype_and_add, info) finally: GLib.log_set_always_fatal(old_mask) def test_enums(self): self.assertTrue(hasattr(GIRepository, 'Direction')) self.assertTrue(hasattr(GIRepository, 'Transfer')) self.assertTrue(hasattr(GIRepository, 'ArrayType')) self.assertTrue(hasattr(GIRepository, 'ScopeType')) self.assertTrue(hasattr(GIRepository, 'VFuncInfoFlags')) self.assertTrue(hasattr(GIRepository, 'FieldInfoFlags')) self.assertTrue(hasattr(GIRepository, 'FunctionInfoFlags')) self.assertTrue(hasattr(GIRepository, 'TypeTag')) self.assertTrue(hasattr(GIRepository, 'InfoType')) def test_introspected_argument_info(self): self.assertTrue(isinstance(IntrospectedRepository.Argument.__info__, GIRepository.UnionInfo)) arg = IntrospectedRepository.Argument() self.assertTrue(isinstance(arg.__info__, GIRepository.UnionInfo)) old_info = IntrospectedRepository.Argument.__info__ IntrospectedRepository.Argument.__info__ = 'not an info' self.assertRaises(TypeError, IntrospectedRepository.Argument) IntrospectedRepository.Argument.__info__ = old_info if __name__ == '__main__': unittest.main()"},{"prompt":"Create a function in Python to sort the elements of a list in ascending order. [9, 3, 5, 4, 7, 6]","completion":"def sort_asc(lst): lst.sort() return lst"},{"prompt":"Write a Python program that takes two strings as input and returns a list of all the words that appear in both strings. string1 = This is a string of text string2 = This text is also a string","completion":"string1 = \\"This is a string of text\\" string2 = \\"This text is also a string\\" def find_words_in_both(s1, s2): list1 = s1.split() list2 = s2.split() result = [] for word1 in list1: for word2 in list2: if word1 == word2: result.append(word1) return result print(find_words_in_both(string1, string2))"},{"prompt":"Construct a Python program to determine the sum of all positive integers between 1 and N that are divisible by 3 N = 15","completion":"\\"\\"\\" Construct a Python program to determine the sum of all positive integers between 1 and N that are divisible by 3 def sum_div_3(N): total = 0 for i in range(1, N+1): if i % 3 == 0: total += i return total print(sum_div_3(15)) \\"\\"\\""},{"prompt":"Modify this Python code to insert the number 5 into a list at the 5th position. data = [1, 2, 3, 4]","completion":"data = [1, 2, 3, 4] # insert element '5' at 5th position data.insert(4, 5) print(\\"Modified list:\\") print(data)"},{"prompt":"Design a program in Python to print the first 8 elements in the Fibonacci series.","completion":"def FibonacciSeries(n): # Taking 1st two fibonacci nubers as 0 and 1 Fibonacci = [0, 1] # Adding previous two numbers in the series # and storing it while len(Fibonacci) < n: Fibonacci.append(sum(Fibonacci[-2:])) return Fibonacci[:n] # Driver code n = 8 Fibonacci = FibonacciSeries(n) print(Fibonacci)"},{"prompt":"Write a machine learning program in Python to classify products as bad, good, or great based on their price and reviews. A training dataset that contains the price and reviews of products.","completion":"import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LogisticRegression from sklearn.pipeline import make_pipeline from sklearn.metrics import confusion_matrix # Load the dataset df = pd.read_csv('data.csv') # Extract features (X) and labels (y) X = df[['price', 'reviews']] y = df['rating'].apply(lambda x: 0 if x == 'bad' else 1 if x == 'good' else 2) # Split into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=23) # Create a pipeline pipeline = make_pipeline(StandardScaler(), LogisticRegression(multi_class='ovr')) # Train the model pipeline.fit(X_train, y_train) # Test the model y_pred = pipeline.predict(X_test) print(confusion_matrix(y_test, y_pred))"},{"prompt":"Take a Python program written in procedural style and convert it to functional style. def sort_list(arr): for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: tmp = arr[i] arr[i] = arr[j] arr[j] = tmp","completion":"def sort_list(arr): sorted_arr = sorted(arr) return sorted_arr"},{"prompt":"Write a single line of python code that prints Hello, World!.","completion":"print(\\"Hello, World!\\")"},{"prompt":"Edit the following Python class such that it can accept a variable number of parameters. class Person: def __init__(self, name, age, weight): self.name = name self.age = age self.weight = weigh","completion":"class Person: def __init__(self, *args): self.name = args[0] self.age = args[1] self.weight = args[2]"},{"prompt":"Convert the following JSON to a python dictionary. { name: John, age: 30, hobbies: [ soccer, playing guitar ] }","completion":"\\"\\"\\" Convert the following JSON to a python dictionary. \\"\\"\\" import json json_data = { \\"name\\": \\"John\\", \\"age\\": 30, \\"hobbies\\": [ \\"soccer\\", \\"playing guitar\\" ] } python_dict = json.loads(json.dumps(json_data)) print(python_dict)"},{"prompt":"Write a loop in Python to print the words hello world 3 times.","completion":"for i in range(3): print(\\"Hello World\\")"},{"prompt":"Create a vectorized implementation in Python to solve the given problem. def add(a, b): c = [] for i in range(len(a)): c.append(a[i] + b[i]) return c","completion":"import numpy as np def add_vector(a, b): return np.add(a,b)"},{"prompt":"Develop a Python script to find the element that appears most often in a given list. mylist = [2, 3, 4, 5, 2, 3, 2, 5, 6, 7]","completion":"from collections import Counter mylist = [2, 3, 4, 5, 2, 3, 2, 5, 6, 7] freq = Counter(mylist) most_common_element = freq.most_common(1)[0][0] print(\\"The most common element is %d\\" %most_common_element)"},{"prompt":"Create a Python script that uses a for loop to display the items from a list. [apple, orange, banana]","completion":"# Create a list list = ['apple', 'orange', 'banana'] # Loop over the list for item in list: print(item)"},{"prompt":"Generate a Python program to return the sum of abs(x1 x2) for each pair in an array.","completion":"def sum_diff_pair(arr): total = 0 for i in range(len(arr)-1): for j in range(i+1, len(arr)): total += abs(arr[i]-arr[j]) return total"},{"prompt":"Develop an algorithm in Python to print an array in reverse order. [1, 2, 3, 4, 5]","completion":"def reverse_array(arr): return arr[::-1] arr = [1, 2, 3, 4, 5] print(reverse_array(arr))"},{"prompt":"Create a script in Python that automatically generates an emial address for a given name. Name: John Doe","completion":"import random def generate_email(name): name_words = name.split() first_name = name_words[0] last_name = name_words[1] random_numbers = str(random.randint(1,99)) email = first_name + last_name + random_numbers + \\"@example.com\\" return email print(generate_email(\\"John Doe\\"))"},{"prompt":"Provide an approach to compare two strings in Python.","completion":"def compare_strings(str1, str2): if len(str1) != len(str2): return False else: for i in range(len(str1)): if str1[i] != str2[i]: return False return True"},{"prompt":"Create a Python program to generate all the permutations of a string using backtracking. ABC","completion":"def permute(s, l, r): if l == r: print(''.join(s)) else: for i in range(l, r+1): s[l], s[i] = s[i], s[l] permute(s, l + 1, r) s[l], s[i] = s[i], s[l] def generate_all_permutations(s): n = len(s) permute(list(s), 0, n-1) s = 'ABC' generate_all_permutations(s)"},{"prompt":"Generate a python script to get the 10 most recent posts from Twitter given an userid userid: Elon Musk","completion":"\\"\\"\\" Get the 10 most recent posts from Twitter given an userid \\"\\"\\" import tweepy consumer_key = \\"<your consumer key>\\" consumer_secret = \\"<your consumer secret>\\" access_token = \\"<your access token>\\" access_token_secret = \\"<your access token secret>\\" # Set up authentication auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) # Create an API connection api = tweepy.API(auth) # Get 10 latest tweets from the user public_tweets = api.user_timeline(screen_name=\\"Elon Musk\\", count=10) for tweet in public_tweets: print(tweet.text)"},{"prompt":"Create a class in Python with a single attribute named name.","completion":"class MyClass: def __init__(self): self.name = None"},{"prompt":"Create a Python program to calculate the compound interest of an investment. principal = 1000 interestRate = 5 period = 10","completion":"# Compound interest def compute_CI(principal, interestRate, period): # compound interest formula ci = principal * (pow((1 + interestRate/100), period)) return ci # Taking inputs from user principal = 1000 interestRate = 5 period = 10 # Calculate compound interest ci = compute_CI(principal, interestRate, period) # Print the resultant value of compound interest print(\\"Compound interest is\\", ci) # Output: Compound interest is 1628.9"},{"prompt":"Develop a web scraping program using Python to extract the names and contact information of 10 randomly selected people from a popular website. Not applicable","completion":"import requests import random from bs4 import BeautifulSoup #specify website url website_url = 'https://www.example.com/people' #scraping function def scrape_contacts(): #load website html = requests.get(website_url).text #parse html soup = BeautifulSoup(html, 'html.parser') contacts = [] #extract contact information for contact in soup.find_all('div', {'class': 'contact'}): name = contact.find('h3').text email = contact.find('p', {'class': 'email'}).text phone = contact.find('p', {'class': 'phone'}).text contacts.append({'name': name, 'email': email, 'phone': phone}) #randomly select 10 contacts return random.sample(contacts, 10) scraped_contacts = scrape_contacts()"},{"prompt":"mplement a function in Python that takes a list of string and sorts them alphabetically. [apple, banana, mango, pear]","completion":"def sortStrings(wordsList): sorted_list = sorted(wordsList) return sorted_list wordsList = [\\"apple\\", \\"banana\\", \\"mango\\", \\"pear\\"] sorted_words = sortStrings(wordsList) print(sorted_words)"},{"prompt":"Use the given data structure to create a python class. data = { name: John Doe, age: 30, city: London }","completion":"class Person: def __init__(self, data): self.name = data['name'] self.age = data['age'] self.city = data['city']"},{"prompt":"Using the provided data, generate a linear regression model using Python. x | y 1 | 1 2 | 2 3 | 4 4 | 8 5 | 16","completion":"import numpy as np def generate_model(data): x = np.array([data[0], data[1], data[2], data[3], data[4]]) y = np.array([data[5], data[6], data[7], data[8], data[9]]) A = np.vstack([x, np.ones(len(x))]).T m, c = np.linalg.lstsq(A, y)[0] return m, c x = [1, 2, 3, 4, 5] y = [1, 2, 4, 8, 16] m, c = generate_model((x, y)) print(\\"m = {}, c = {}\\".format(m, c))"},{"prompt":"Generate a list of prime numbers from 1 to N in Python.","completion":"def generate_primes(n): primes = [] for num in range(2, n+1): prime = True for i in range(2, num): if (num % i) == 0: prime = False if prime: primes.append(num) return primes"},{"prompt":"Generate a program in Python which takes an input array and outputs the unique elements in the array. [1, 2, 5, 2, 6, 6, 1]","completion":"def uniqueValues(arr): uniqueVal = [] for i in arr: if i not in uniqueVal: uniqueVal.append(i) return uniqueVal arr = [1, 2, 5, 2, 6, 6, 1] uniqueVal = uniqueValues(arr) print(uniqueVal)"},{"prompt":"Create a Python program that takes two strings as input and outputs a single concatenated string. Hello , world!","completion":"def concat_strings(a, b): return a + b result = concat_strings(\\"Hello \\", \\"world!\\") print(result)"},{"prompt":"Create a Python web scraper that will fetch the news headlines from a given website. Not applicable","completion":"import requests from bs4 import BeautifulSoup URL = \\"http://example.com/\\" r = requests.get(URL) soup = BeautifulSoup(r.content, 'html5lib') headlines = soup.find_all('h2') for headline in headlines: print(headline.text)"},{"prompt":"Optimize an existing Python program to calculate the Fibonacci sequence. Example of existing Python Program def fibonacci(n): if n <= 1: return n else: return(fibonacci(n 1) + fibonacci(n 2))","completion":"# Fibonacci sequence def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2, n): c = a + b a = b b = c return b"},{"prompt":"Create a Python program to print out the nth row of Pascal's Triangle","completion":"def nth_row_pascal(n): row = [1] for k in range(max(n,0)): row.append(row[k] * (n-k) // (k+1)) return row"},{"prompt":"Optimize a given Python program for speed, memory usage and readability. def factorial(n): f =1 for i in range(2,n+1): f *=i return f","completion":"def factorial(n): result = 1 for i in range(2, n+1): result *= i return result"},{"prompt":"Create a Python program to calculate the distance between two points given their x and y coordinates. x1 = 0 y1 = 0 x2 = 10 y2 = 10","completion":"def calculateDistance(x1, y1, x2, y2): distance = ((x2 - x1)**2 + (y2 - y1)**2)**(1/2) return distance # main x1 = 0 y1 = 0 x2 = 10 y2 = 10 dist = calculateDistance(x1, y1, x2, y2) print(\\"Distance between the two points is\\", dist)"},{"prompt":"Return a Python generator expression that prints all even numbers from 1 to 10 except 7.","completion":"evens = (x for x in range(1, 11) if x % 2 == 0 and x != 7) for x in evens: print(x)"},{"prompt":"Create an async function in Python to fetch data from a JSON endpoint. Not applicable","completion":"import aiohttp import asyncio async def fetch_data(url): async with aiohttp.ClientSession() as session: async with session.get(url) as response: data = await response.json() return data async def main(): data = await fetch_data('http://example.com/data.json') print(data) asyncio.run(main())"},{"prompt":"Write a python program to classify a text into one of three categories: positive, negative, or neutral. The airport experience was not bad at all.","completion":"import nltk # load in the text and tokenize it text = \\"The airport experience was not bad at all.\\" tokens = nltk.word_tokenize(text) # define the category labels labels = ['positive', 'negative', 'neutral'] # define a function to predict the sentiment def classify_sentiment(tokens): # TODO: write code to classify the sentiment # … return predicted_label # use the function to predict the sentiment predicted_label = classify_sentiment(tokens) print(f\\"The sentiment of the text is {predicted_label}.\\")"},{"prompt":"Rewrite the javascript code with python code. // This program prints the values 1 to 10 for (var i = 1; i <= 10; i++) { console.log(The number is + i); }","completion":"# This function prints the values 1 to 10 def print_numbers(): for i in range(1,11): print(\\"The number is \\" + str(i)) print_numbers()"},{"prompt":"Design an algorithm in Python using OOP techniques that takes a list of integers as input and outputs the maximum value from the list. [1, 4, 8, 6, 2, 5]","completion":"class MaxValueAlgorithm: def __init__(self, lst): self.lst = lst def get_max_value(self): max_value = self.lst[0] for num in self.lst: if(num > max_value): max_value = num return max_value # Testing the algorithm lst = [1, 4, 8, 6, -2, 5] algo = MaxValueAlgorithm(lst) m = algo.get_max_value() print(\\"Max value in the list is:\\", m)"},{"prompt":"Generate a class hierarchy for an automobile system in Python. Not applicable","completion":"class Automobile: def __init__(self): pass class Car(Automobile): def __init__(self, make, model, color): self.make = make self.model = model self.color = color class Truck(Automobile): def __init__(self, make, model, cargo_capacity): self.make = make self.model = model self.cargo_capacity = cargo_capacity class SUV(Car, Truck): def __init__(self, make, model, color, cargo_capacity): super().__init__(make, model, color) self.cargo_capacity = cargo_capacity"},{"prompt":"Write a python program that takes in two strings, s1 and s2, and returns a Boolean based on if s1 is a substring of s2. s1 = 'foo' s2 = 'foobar'","completion":"def is_substring(s1, s2): return s1 in s2 substring = is_substring('foo', 'foobar') print(substring) # Output: True"},{"prompt":"Construct a Python program to find the difference between the maximum and minimum values in a given array of integers. [1, 8, 4, 5, 9]","completion":"def diffMaxMin(arr): maxVal = arr[0] minVal = arr[0] for num in arr: if num > maxVal: maxVal = num elif num < minVal: minVal = num return maxVal - minVal arr = [1, 8, 4, 5, 9] result = diffMaxMin(arr) print(result)"},{"prompt":"Generate a function in Python that takes an unsorted list of integers, and sorts it using a bubble sort algorithm. [9, 4, 5, 1, 0]","completion":"def bubble_sort(list): for i in range(len(list)-1): for j in range(len(list)-i-1): if list[j] > list[j+1]: temp = list[j] list[j] = list[j+1] list[j+1] = temp return list print(bubble_sort([9, 4, 5, 1, 0])) // [0, 1, 4, 5, 9]"},{"prompt":"Write a Python class that models a grocery shop with a list of items and the stock count of each. apples 5, bananas 10, oranges 3","completion":"class GroceryShop: def __init__(self): self.items = {} def add_item(self, item, stock): self.items[item] = stock def get_stock(self, item): return self.items.get(item, None) grocery_shop = GroceryShop() grocery_shop.add_item('apples', 5) grocery_shop.add_item('bananas', 10) grocery_shop.add_item('oranges', 3) stock = grocery_shop.get_stock('apples') print(stock)"},{"prompt":"Given a list of integers, write a Python program to count the number of 0s in the list.","completion":"def count_zeros(list): count = 0 for num in list: if num == 0: count += 1 return count"},{"prompt":"Create a Python program that takes a list of numbers, sorts them in descending order, calculates the average of the numbers, and prints the result. [3, 7, 9, 4, 5]","completion":"# Calculating average of [3, 7, 9, 4, 5] sorted_nums = sorted([3, 7, 9, 4, 5], reverse=True) sum_nums = sum(sorted_nums) # Calculating average average = sum_nums/len(sorted_nums) # Printing the average print('The average of the list is: ', average)"},{"prompt":"Rewrite the following code in Python. let x = 5; let y = 10; let z = x + y;","completion":"x = 5 y = 10 z = x + y"},{"prompt":"Create and implement a function in Python to solve the quadratic equation ax^2 + bx + c. 1, 5, 6","completion":"def quadratic_eq(a, b, c): d = (b**2) - (4*a*c) if d > 0: x1 = (-b + (d**(1/2)))/(2*a) x2 = (-b - (d**(1/2)))/(2*a) print(\\"Two distinct real roots exist. x1 = \\", x1, \\" x2 = \\", x2) elif d == 0: x1 = (-b + (d**(1/2)))/(2*a) x2 = x1 print(\\"Two equal and real roots exist. x1 = x2 = \\", x1) else: x1 = (-b/(2*a)) + ((d/(2*a))**0.5) x2 = (-b/(2*a)) - ((d/(2*a))**0.5) print(\\"Two complex and different roots exist x1 = \\", x1, \\" and x2 = \\", x2) quadratic_eq(1, -5, 6)"},{"prompt":"Write a Python function that finds the maximum element in an array. [3, 4, 6, 5, 9, 1, 2]","completion":"def find_max(nums): max_val = nums[0] for num in nums: if num > max_val: max_val = num return max_val nums = [3, 4, 6, 5, 9, 1, 2] max_val = find_max(nums) print(max_val)"},{"prompt":"Write a Python program to classify a given list of numbers into three groups based on their range. [1, 2, 5, 9, 20]","completion":"def classify_list(list): result = {\\"low\\": [], \\"mid\\": [], \\"high\\": []} for num in list: if num < 4: result[\\"low\\"].append(num) elif num < 10: result[\\"mid\\"].append(num) else: result[\\"high\\"].append(num) return result"},{"prompt":"Create a function in Python that uses a set of rules to classify text as positive or negative. Not applicable","completion":"import re def classify_text(text): # Positive words positive_words = ['good', 'great', 'nice', 'love', 'happy', 'fun'] # Negative words negative_words = ['bad', 'horrible', 'hate', 'sad'] # Remove all punctuations text = re.sub(r'[^ws]','',text) # Split the text into words words = text.split() # Count the number of positive and negative words positive_count = 0 negative_count = 0 for word in words: if word in positive_words: positive_count += 1 if word in negative_words: negative_count += 1 # Classify the text if positive_count > negative_count: return \\"Positive\\" elif positive_count < negative_count: return \\"Negative\\" else: return \\"Neutral\\""},{"prompt":"Develop a code in Python to get the day name for any given date using the standard libraries.","completion":"import datetime def get_day_name(date): day_name = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%A') return day_name if __name__ == '__main__': date = '2021-04-19' print(get_day_name(date))"},{"prompt":"Write a Python program to define a class Employee and add methods to get salary, change name and change salary.","completion":"class Employee: def __init__(self, name, salary): self.name = name self.salary = salary def get_salary(self): return self.salary def change_name(self, name): self.name = name def change_salary(self, salary): self.salary = salary"},{"prompt":"Write a Python program to format a given string with a desired length. string = GPT3 length = 10","completion":"def format_string(string, length): format_string = string.ljust(length) return format_string string = \\"GPT-3\\" length = 10 result = format_string(string, length) print(result) # -> GPT-3 (9 spaces added after GPT-3)"},{"prompt":"Translate the following code written in Python to Java. x = 3 y = 5 print(x + y)","completion":"public class XPlusY { // add two numbers static int add(int x, int y) { return x + y; } // Driver method public static void main(String[] args) { int x = 3; int y = 5; System.out.println(\\"Sum of the two numbers is \\" + add(x, y)); } }"},{"prompt":"Develop a program that alters and returns a given string. string: Python is fun!","completion":"\\"\\"\\" Develop a program that alters and returns a given string \\"\\"\\" def alter_string(string): # alter the original string string_altered = string.replace(\\"!\\", \\"?\\") return string_altered if __name__ == '__main__': string = \\"Python is fun!\\" print(alter_string(string))"},{"prompt":"Create a function to calculate the sum of two values in Python. < noinput >","completion":"def add_two_numbers(x, y): sum = x + y return sum"},{"prompt":"Construct a tryexcept block with Python that captures errors from invalid user input.","completion":"try: user_input = int(input(\\"Please enter an integer: \\")) except ValueError: print(\\"That's not an integer!\\")"},{"prompt":"Generate an API in Python that can return data from a SQLite database. Not applicable","completion":"import sqlite3 from flask import Flask, request # Create the application app = Flask(__name__) # Create a Connection to the Database conn = sqlite3.connect('mydatabase.db') # Create a Cursor object to perform queries cursor = conn.cursor() @app.route('/data', methods=['GET']) def get_data(): # Execute the query query = request.args.get('query') cursor.execute(query) data = cursor.fetchall() # Return the data as JSON return {'data': data} if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Develop an algorithm in Python to identify the longest word in a sentence. This is an example sentence with several words in it.","completion":"def find_longest_word(sentence): words = sentence.split() longest_word = '' max_len = 0 for word in words: if len(word) > max_len: max_len = len(word) longest_word = word return longest_word sentence = 'This is an example sentence with several words in it.' longest_word = find_longest_word(sentence) print('The longest word is', longest_word)"},{"prompt":"Generate random strings of fixed length in Python.","completion":"import random import string def generate_random_string(length): return ''.join(random.choices(string.ascii_letters + string.digits,k=length)) generate_random_string(8); //Output: 'K5h5get6'"},{"prompt":"Create a Python program to sort a dictionary in order of the values.","completion":"# using lambda function to sort the dictionary sorted_by_value = sorted(dictionary.items(), key = lambda kv: kv[1]) # printing the dictionary sorted by value print(sorted_by_value)"},{"prompt":"Design a recursive function in Python that prints the nth Fibonacci number.","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2)"},{"prompt":"Write a Bash script for automating the process of deploying a Django app to an AWS EC2 instance. Not applicable","completion":"#!/bin/bash # SSH to EC2 instance ssh -i <KeyPair>.pem ubuntu@<EC2_Public_IP> # Update the packages installed sudo apt-get update # Install docker sudo apt-get install docker.io docker-compose # Clone the source code git clone <Git_Repo_URL> app # Build docker image cd app docker-compose up -d --build # Migrate database docker-compose run web python manage.py migrate # Run the Django server docker-compose run web python manage.py runserver 0.0.0.0:8000"},{"prompt":"Write a Python program to generate a random password. The password should contain at least 8 characters, a lowercase letter, an uppercase letter, a digit, and a special character. Not applicable","completion":"import string import random def generate_password(): passwords = [] characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation for i in range(8): passwords.append(random.choice(characters)) return ''.join(passwords) print(generate_password()) # Output: #o4&2+-P"},{"prompt":"Create a Python function to filter a dictionary that contains strings only. {'name': 'John', 'age': 20, 'likes': ['apple', 'banana']}","completion":"def filterStringDict(input): result = {} for key, value in input.items(): # Check if value is a string if isinstance(value, str): # Add to result result[key] = value return result"},{"prompt":"Write a function in Python to remove vowels from a given sentence. The quick brown fox jumps over the lazy dog.","completion":"def remove_vowels(sentence): # create an empty list new_sentence = [] #iterate through the given sentence for i in sentence: # checks if the character is a vowel if i.lower() not in \\"aeiou\\": new_sentence.append(i) # joins the list of characters to form string return ''.join(new_sentence) # test print(remove_vowels(\\"The quick brown fox jumps over the lazy dog.\\")) # expected output: Th qckbrwn fx jmps vr th lzy dg."},{"prompt":"Write a Python program to find the largest common substring between two strings. 'killerbees','python'","completion":"def largest_common_substring(string1, string2): substring = \\"\\" len1, len2 = len(string1), len(string2) for i in range(len1): match = \\"\\" for j in range(len2): if (i + j < len1 and string1[i + j] == string2[j]): match += string2[j] else: if (len(match) > len(substring)): substring = match match = \\"\\" return substring string1 = \\"killerbees\\" string2 = \\"python\\" print(largest_common_substring(string1,string2)) # Output: 'll'"},{"prompt":"Write a Python program that takes two numbers and prints their multiplication table.","completion":"def multiplicationTable(a, b): for i in range(1, b+1): print(\\"{} x {} = {}\\".format(a, i, a * i)) multiplicationTable(9, 10) #prints a multiplication table for 9 and 10"},{"prompt":"Python, create a loop that takes a user input and appends it to a list until the user types stop.","completion":"my_list = [] while True: user_input = input('Type something: ') if user_input == 'stop': break my_list.append(user_input) print(my_list)"},{"prompt":"Create a Python algorithm to check if a given word exists in a dictionary. dictionary: {hello: greeting, car: vehicle} word: hello","completion":"# Function to test if a word exists in a dictionary def wordExists(dictionary, word): for key, value in dictionary.items(): if key == word: return True return False # Main function dictionary = {\\"hello\\": \\"greeting\\", \\"car\\": \\"vehicle\\"} word = \\"hello\\" print(wordExists(dictionary, word))"},{"prompt":"Develop a Python program to find the distance between two points on the xaxis. Point 1: 3 Point 2: 4","completion":"# Calculate distance between two points def findDistance(x1, x2): return abs(x2 - x1) x1 = -3 x2 = 4 distance = findDistance(x1, x2) print(\\"Distance:\\", distance)"},{"prompt":"Write a python program that prints a greeting for each name in the given list names = ['John', 'Mary', 'James']","completion":"for name in names: print('Hello ' + name + '!')"},{"prompt":"Create a Python script to download all tweets from a given Twitter username and analyze them for the top 5 most used words. Twitter username: @realDonaldTrump","completion":"import tweepy import json import pandas as pd import matplotlib.pyplot as plt from collections import Counter # Authentication credentials consumer_key = 'xxxxxxxxxxxxxxxxxx' consumer_secret = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxx' access_token = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' access_token_secret = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' # Setting up authentication auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) # Setting up API access api = tweepy.API(auth) # Array to store all tweets tweets = [] # Downloading tweets from the given username public_tweets = api.user_timeline(screen_name = 'realDonaldTrump') for tweet in public_tweets: tweets.append(tweet.text) # Cleaning the text words = \\" \\".join(tweets).lower().split() # Counting the words counts = Counter(words) # Plotting the top 5 most used words plt.bar(range(5), list(counts.values())[:5], align='center', width=0.7) plt.xticks(range(5), list(counts.keys())[:5], rotation=90, fontsize=12) plt.title(\\"Top 5 Most Used Words in @realDonaldTrump's Tweets\\") plt.xlabel('Words') plt.ylabel('Frequency') plt.show()"},{"prompt":"Create an optimized data structure in Python to store information about a person's profile. profile = { name: Kiran, age: 25, location: Australia, hobbies: [ Travelling, Swimming ] }","completion":"class Profile(object): def __init__(self, name, age, location, hobbies): self.name = name self.age = age self.location = location self.hobbies = hobbies profile = Profile(\\"Kiran\\", 25, \\"Australia\\", [\\"Travelling\\", \\"Swimming\\"])"},{"prompt":"Create a web service in Flask using Python that takes an input value and returns a random number within a given range. lower limit: 10; upper limit: 20","completion":"import random from flask import Flask, request app = Flask(__name__) @app.route('/random_number', methods=['POST']) def random_number(): data = request.get_json() lower_limit = data.get('lower_limit') upper_limit = data.get('upper_limit') random_num = int(random.random() * (upper_limit - lower_limit)) + lower_limit return str(random_num) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python program that generates a crossword puzzle with random words","completion":"\\"\\"\\" Create a Python program that generates a crossword puzzle with random words \\"\\"\\" import string import random def generate_crossword(): # Generate a 10x10 2D array puzzle = [['_' for i in range(10)] for j in range(10)] characters = string.ascii_uppercase + string.ascii_lowercase # Populate the array with random letters for i in range(10): for j in range(10): puzzle[i][j] = random.choice(characters) # Check the random letters and replace them with words where possible # Return the puzzle return puzzle if __name__ == '__main__': generate_crossword()"},{"prompt":"Convert the following Matlab code into Python. a = 0:10:100; b = zeros(101,1); for i=1:101 b(i) = 5*i end","completion":"import numpy as np a = np.arange(0, 101, 10) b = np.zeros(101) for i in range(1, 101): b[i] = 5 * i"},{"prompt":"Train a model using ScikitLearn in Python to detect if a tweet contains hate speech. The input dataset contains 800 tweets.","completion":"import nltk from nltk.tokenize import word_tokenize import sklearn # load data tweets = [<input dataset>] labels = [<ground truth labels>] # create training and test datasets X_train, X_test, y_train, y_test = train_test_split(tweets, labels, test_size=0.25, random_state=42) # prepare datasets for vectorization word_counter = Counter(word for tweet in X_train for word in word_tokenize(tweet[1])) # vectorize the datasets using word count vectorizer = TfidfVectorizer(max_features=1000, stop_words='english', max_df=0.5, min_df=2, tokenizer=word_tokenize).fit(X_train) X_train_vec = vectorizer.transform(X_train) X_test_vec = vectorizer.transform(X_test) # fit the classifier using the vectorized train dataset clf = SGDClassifier().fit(X_train_vec, y_train) # predict the test dataset y_pred = clf.predict(X_test_vec)"},{"prompt":"Create a function in Python to convert a given time from 12hour clock format to 24hour clock format. 3:45pm","completion":"def time_conversion(time): # Get hour and convert it to 24-hour format hour = int(time[:2]) if time[-2:] == \\"PM\\": hour += 12 # Get minutes min = time[-5:-3] return str(hour) + \\":\\" + min # Test print(time_conversion(\\"3:45pm\\")) # 15:45"},{"prompt":"Translate the following pseudocode to Python: IF x IS GREATER THAN 0 PRINT x is positive ELSE PRINT x is not positive","completion":"if x > 0: print(\\"x is positive\\") else: print(\\"x is not positive\\")"},{"prompt":"Design a Python program to convert all the characters of a string to upper case. This is a sample sentence.","completion":"def to_upper(s): return s.upper() result = to_upper(\\"This is a sample sentence.\\") print(result)"},{"prompt":"Create a basic Python application that prints out the prime numbers between 0 and 1000. Not applicable","completion":"primes = [] for num in range(2, 1001): for i in range(2, num): if (num % i) == 0: break else: primes.append(num) print(primes)"},{"prompt":"Write a function in Python to return the indices of all occurrences of a given item in a list. list = [1,2,3,4,5,1,2,3,4,5] item = 3","completion":"def find_all_occurrence_indices(list, item): result = [] for index, number in enumerate(list): if number == item: result.append(index) return result"},{"prompt":"Develop a program to find the maximum sum subarray of size k in an array in Python. [1, 2, 3, 4, 5], 3","completion":"def max_sum_subarray(arr, k): maxSum = float(\\"-inf\\") windowSum = 0 windowStart = 0 for windowEnd in range(len(arr)): windowSum += arr[windowEnd] if windowEnd >= k - 1: maxSum = max(maxSum, windowSum) windowSum -= arr[windowStart] windowStart += 1 return maxSum arr = [1, 2, 3, 4, 5] k = 3 max_sum = max_sum_subarray(arr, k) print(\\"Maximum Sum: \\" + str(max_sum))"},{"prompt":"Develop a Python program that enables a user to select two numbers and add them together.","completion":"# define add() function def add(num1, num2): # Adding both the parameters and return them sum = num1 + num2 return sum # Give the two numbers the user wants to add num1 = float(input(\\"Enter first number: \\")) num2 = float(input(\\"Enter second number: \\")) # Add and print the result print(\\"The sum of {} and {} is {}\\".format(num1, num2, add(num1, num2)))"},{"prompt":"Write a Python script to evaluate an expression given as a string.","completion":"def eval_expression(string): return eval(string)"},{"prompt":"Create a Python program that classifies a given item using the Naive Bayes algorithm. Item: An iPhone Category 1: Mobile Devices Category 2: Computers Category 3: Appliances","completion":"from sklearn.naive_bayes import GaussianNB # define input and categories input = 'An iPhone' categories = ['Mobile Devices', 'Computers', 'Appliances'] # create a classifier clf = GaussianNB() # train the classifier clf.fit(X, y) # predict the category category = clf.predict([[input]])[0] # print the result print('The given item is classified as: ', category)"},{"prompt":"Write a Python class to represent a 2Dimensional point.","completion":"class Point: def __init__(self, x, y): self.x = x self.y = y def get_point(self): return (self.x, self.y)"},{"prompt":"To load npy xy, plot and save, run the main() function in the given code. The code will generate a plot of domain averaged rainfall for land, sea, and total, with data from different experiments and TRMM. The plot will be saved in the directory '/nfs/a90/eepdw/Figures/EMBRACE/Diurnal/'.","completion":"\\"\\"\\" Load npy xy, plot and save \\"\\"\\" import os, sys import matplotlib matplotlib.use('Agg') # Must be before importing matplotlib.pyplot or pylab! import matplotlib.pyplot as plt import matplotlib.cm as mpl_cm from matplotlib import rc from matplotlib.font_manager import FontProperties from matplotlib import rcParams from matplotlib import cm rc('text', usetex=True) rcParams['text.usetex']=True rcParams['text.latex.unicode']=True rc('font', family = 'serif', serif = 'cmr10') import numpy as np from datetime import timedelta import datetime import imp import re from textwrap import wrap model_name_convert_legend = imp.load_source('util', '/nfs/see-fs-01_users/eepdw/python_scripts/modules/model_name_convert_legend.py') #unrotate = imp.load_source('util', '/home/pwille/python_scripts/modules/unrotate_pole.py') # # Things to change top_dir='/nfs/a90/eepdw/Data/Rain_Land_Sea_Diurnal' pp_file = 'avg.5216' lon_max = 71 lon_min = 67 lat_max= 28 lat_min=20 trmm_dir = '/nfs/a90/eepdw/Data/Observations/Satellite/TRMM/Diurnal/' trmm_file = \\"trmm_diurnal_average_lat_%s_%s_lon_%s_%s_bit_above_western_ghats.npz\\" % (lat_min,lat_max, lon_min, lon_max) # # Make own time x-axis d = matplotlib.dates.drange(datetime.datetime(2011, 8, 21, 6,30), datetime.datetime(2011, 8, 22, 6, 30), timedelta(hours=1)) formatter = matplotlib.dates.DateFormatter('%H:%M') def main(): #experiment_ids = ['djznw', 'djzny', 'djznq', 'djzns', 'dkjxq', 'dklyu', 'dkmbq', 'dklwu', 'dklzq', 'dkbhu', 'djznu', 'dkhgu' ] # All 12 experiment_ids_p = ['djznw', 'djzny', 'djznq', 'dklzq', 'dkmbq', 'dkjxq' ] # Most of Params experiment_ids_e = ['dklwu', 'dklyu', 'djzns', 'dkbhu', 'djznu', 'dkhgu'] # Most of Explicit #experiment_ids = ['djzny', 'djznq', 'djzns', 'djznw', 'dkjxq', 'dklyu', 'dkmbq', 'dklwu', 'dklzq' ] #plt.ion() NUM_COLOURS = 15 cmap=cm.get_cmap(cm.Set1, NUM_COLOURS) #cgen = (cmap(1.*i/NUM_COLORS) for i in range(NUM_COLORS)) for ls in ['land','sea', 'total']: fig = plt.figure(figsize=(12,6)) ax = fig.add_subplot(111) legendEntries=[] legendtext=[] plot_trmm = np.load('%s%s_%s' % (trmm_dir, ls, trmm_file)) dates_trmm=[] p=[] for dp in plot_trmm['hour']: print dp if ((int(dp)<23) & (int(dp)>=6)): dates_trmm.append(datetime.datetime(2011, 8, 21, int(dp), 0)) p.append(plot_trmm['mean'][plot_trmm['hour']==dp]) if ((int(dp)>=0) & (int(dp)<=6)): dates_trmm.append(datetime.datetime(2011, 8, 22, int(dp), 0)) p.append(plot_trmm['mean'][plot_trmm['hour']==dp]) #print dates_trmm a = np.argsort(dates_trmm,axis=0) d_trmm = np.array(dates_trmm)[a] pl = (np.array(p)[a]) #pl=np.sort(pl,axis=1) l, = plt.plot_date(d_trmm, pl, label='TRMM', linewidth=2, linestyle='-', marker='', markersize=2, fmt='', color='#262626') legendEntries.append(l) legendtext.append('TRMM') l0=plt.legend(legendEntries, legendtext,title='', frameon=False, prop={'size':8}, loc=9, bbox_to_anchor=(0.21, 0,1, 1)) # Change the legend label colors to almost black texts = l0.texts for t in texts: t.set_color('#262626') legendEntries=[] legendtext=[] for c, experiment_id in enumerate(experiment_ids_p): expmin1 = experiment_id[:-1] if (experiment_id=='djznw'): print experiment_id colour = cmap(1.*1/NUM_COLOURS) linewidth=0.2 linestylez='--' if (experiment_id=='djzny'): print experiment_id colour = cmap(1.*3/NUM_COLOURS) linewidth=0.5 linestylez='--' if ((experiment_id=='djznq') or (experiment_id=='dkjxq')): print experiment_id colour = cmap(1.*5/NUM_COLOURS) linewidth=0.8 if (experiment_id=='djznq'): linestylez='--' if (experiment_id=='dkjxq'): linestylez=':' if ((experiment_id=='dklzq') or (experiment_id=='dklwu')): print experiment_id colour = cmap(1.*7/NUM_COLOURS) linewidth=1 if (experiment_id=='dklzq'): linestylez='--' if (experiment_id=='dklwu'): linestylez='-' if ((experiment_id=='dklyu') or (experiment_id=='dkmbq')): print experiment_id colour = cmap(1.*9/NUM_COLOURS) linewidth=1.3 if (experiment_id=='dkmbq'): linestylez='--' if (experiment_id=='dklyu'): linestylez='-' if (experiment_id=='djzns'): print experiment_id colour = cmap(1.*11/NUM_COLOURS) linewidth=1.6 linestylez='-' if ((experiment_id=='dkbhu')or (experiment_id=='dkhgu')): print experiment_id colour = cmap(1.*13/NUM_COLOURS) linewidth=1.9 if (experiment_id=='dkbhu'): linestylez='-' if (experiment_id=='dkhgu'): linestylez=':' if (experiment_id=='djznu'): print experiment_id colour = cmap(1.*15/NUM_COLOURS) linewidth=2. linestylez='-' try: plotnp = np.load('%s/%s/%s/%s_%s_rainfall_diurnal_np_domain_constrain_lat_%s-%s_lon-%s-%s.npy' % (top_dir, expmin1, experiment_id, pp_file, ls, lat_min, lat_max, lon_min, lon_max)) l, = plt.plot_date(d, plotnp[0]*3600, label='%s' % (model_name_convert_legend.main(experiment_id)), linewidth=linewidth, linestyle=linestylez, marker='', markersize=2, fmt='', color=colour) legendEntries.append(l) legendtext.append('%s' % (model_name_convert_legend.main(experiment_id))) except Exception, e: print e pass l1=plt.legend(legendEntries, legendtext, title='Parametrised', loc=9, frameon=False, prop={'size':8}, bbox_to_anchor=(0, 0,1, 1)) # Change the legend label colors to almost black texts = l1.texts for t in texts: t.set_color('#262626') legendEntries=[] legendtext=[] c1=0 for c, experiment_id in enumerate(experiment_ids_e): if (experiment_id=='djznw'): print experiment_id colour = cmap(1.*1/NUM_COLOURS) linewidth=0.2 linestylez='--' if (experiment_id=='djzny'): print experiment_id colour = cmap(1.*3/NUM_COLOURS) linewidth=0.5 linestylez='--' if ((experiment_id=='djznq') or (experiment_id=='dkjxq')): print experiment_id colour = cmap(1.*5/NUM_COLOURS) linewidth=0.8 if (experiment_id=='djznq'): linestylez='--' if (experiment_id=='dkjxq'): linestylez=':' if ((experiment_id=='dklzq') or (experiment_id=='dklwu')): print experiment_id colour = cmap(1.*7/NUM_COLOURS) linewidth=1 if (experiment_id=='dklzq'): linestylez='--' if (experiment_id=='dklwu'): linestylez='-' if ((experiment_id=='dklyu') or (experiment_id=='dkmbq')): print experiment_id colour = cmap(1.*9/NUM_COLOURS) linewidth=1.3 if (experiment_id=='dkmbq'): linestylez='--' if (experiment_id=='dklyu'): linestylez='-' if (experiment_id=='djzns'): print experiment_id colour = cmap(1.*11/NUM_COLOURS) linewidth=1.6 linestylez='-' if ((experiment_id=='dkbhu')or (experiment_id=='dkhgu')): print experiment_id colour = cmap(1.*13/NUM_COLOURS) linewidth=1.9 if (experiment_id=='dkbhu'): linestylez='-' if (experiment_id=='dkhgu'): linestylez=':' if (experiment_id=='djznu'): print experiment_id colour = cmap(1.*15/NUM_COLOURS) linewidth=2. linestylez='-' expmin1 = experiment_id[:-1] try: plotnp = np.load('%s/%s/%s/%s_%s_rainfall_diurnal_np_domain_constrain_lat_%s-%s_lon-%s-%s.npy' % (top_dir, expmin1, experiment_id, pp_file, ls, lat_min, lat_max, lon_min, lon_max)) l, = plt.plot_date(d, plotnp[0]*3600, label='%s' % (model_name_convert_legend.main(experiment_id)), linewidth=linewidth, linestyle=linestylez, marker='', markersize=2, fmt='', color=colour) legendEntries.append(l) legendtext.append('%s' % (model_name_convert_legend.main(experiment_id))) except Exception, e: print e pass l2=plt.legend(legendEntries, legendtext, title='Explicit', loc=9, frameon=False, bbox_to_anchor=(0.11, 0,1, 1), prop={'size':8}) plt.gca().add_artist(l1) plt.gca().add_artist(l0) plt.gca().xaxis.set_major_formatter(formatter) # Change the legend label colors to almost black texts = l2.texts for t in texts: t.set_color('#262626') plt.xlabel('Time (UTC)') plt.ylabel('mm/h') title=\\"Domain Averaged Rainfall - %s\\" % ls t=re.sub('(.{68} )', '1n', str(title), 0, re.DOTALL) t = re.sub(r'[(']', ' ', t) t = re.sub(r'[',)]', ' ', t) pp_filenodot= pp_file.replace(\\".\\", \\"\\") # Bit of formatting # Set colour of axis lines spines_to_keep = ['bottom', 'left'] for spine in spines_to_keep: ax.spines[spine].set_linewidth(0.5) ax.spines[spine].set_color('#262626') # Remove top and right axes lines (\\"spines\\") spines_to_remove = ['top', 'right'] for spine in spines_to_remove: ax.spines[spine].set_visible(False) # Get rid of ticks. The position of the numbers is informative enough of # the position of the value. ax.xaxis.set_ticks_position('none') ax.yaxis.set_ticks_position('none') # Change the labels to the off-black ax.xaxis.label.set_color('#262626') ax.yaxis.label.set_color('#262626') if not os.path.exists('/nfs/a90/eepdw/Figures/EMBRACE/Diurnal/'): os.makedirs('/nfs/a90/eepdw/Figures/EMBRACE/Diurnal/') plt.savefig('/nfs/a90/eepdw/Figures/EMBRACE/Diurnal/%s_%s_latlon_bit_above_western_ghats_notitle.png' % (pp_filenodot, ls), format='png', bbox_inches='tight') plt.title('n'.join(wrap('%s' % (t.title()), 1000,replace_whitespace=False)), fontsize=16, color='#262626') #plt.show() plt.savefig('/nfs/a90/eepdw/Figures/EMBRACE/Diurnal/%s_%s_latlon_bit_above_western_ghats.png' % (pp_filenodot, ls), format='png', bbox_inches='tight') plt.close() if __name__ == '__main__': main()"},{"prompt":"Optimize this program in Python to find the highest peak in a given array. def find_highest_peak(arr): highest_peak = 0 for i in range(len(arr)): if i == 0: highest_peak = arr[i] else: if arr[i] > highest_peak: highest_peak = arr[i] return highest_peak","completion":"def find_highest_peak(arr): highest_peak = arr[0] for i in range(1, len(arr)): highest_peak = max(highest_peak, arr[i]) return highest_peak"},{"prompt":"Write a python program to validate internet URLs. Not applicable","completion":"import re def is_valid_url(url): regex = re.compile( r'^(?:http|ftp)s?://' # http:// or https:// r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?.)+(?:[A-Z]{2,6}.?|[A-Z0-9-]{2,}.?)|' # domain... r'localhost|' # localhost... r'd{1,3}.d{1,3}.d{1,3}.d{1,3})' # ...or ip r'(?::d+)?' # optional port r'(?:/?|[/?]S+)', re.IGNORECASE) return url is not None and regex.search(url) print(is_valid_url('https://www.google.com')) # Output: True"},{"prompt":"Create a class in Python that has five methods:","completion":"class MyClass: def __init__(self): pass def method1(self): pass def method2(self): pass def method3(self): pass def method4(self): pass def method5(self): pass"},{"prompt":"Write a Python program that takes two strings and returns their combined length. word1 = ‘Hello’ word2 = ‘world’","completion":"def combine_string_lengths(word1, word2): return len(word1) + len(word2)"},{"prompt":"Edit the following code to fix any errors. # Python code to print the Fibonacci series limit = int(input(Enter limit : )) a = 0 b = 1 while(limit): print(a, end='t') a = b b += b limit = 1","completion":"# Python code to print the Fibonacci series limit = int(input(\\"Enter limit : \\")) a = 0 b = 1 while(limit): print(a, end='t') a, b = b, a + b limit -= 1"},{"prompt":"Trace the recursive Fibonacci algorithm in Python and test its execution time for different values of n. num = 10","completion":"import time def fib(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return fib(n-1)+fib(n-2) start = time.time() num = 10 print(fib(num)) print(\\"Time taken:\\", time.time()-start)"},{"prompt":"Edit the following code to make it compatible with python 3 syntax def divide(x,y): return x/float(y)","completion":"def divide(x, y): return x / y"},{"prompt":"Create a natural language processing understanding system in Python to interpret user input in the form of natural language. Not applicable","completion":"import numpy as np import re # tokenize user input def tokenize(sentence): return re.findall('[dw]+', sentence.lower()) # create a dictionary to hold the words and their respective vectors word2vec = {} # add words and vectors to the dictionary word2vec['hello'] = np.array([1,2,3,4]) word2vec['world'] = np.array([2,3,4,5]) # create a function to get the word vector corresponding to the user input def word_vector(sentence): words = tokenize(sentence) # if the word is in our dictionary, return the corresponding vector if words in word2vec: return word2vec[words] # otherwise, return a vector of zeroes else: return np.zeros((1, len(word2vec[words]))) # create a function to parse a user's input def parse_user_input(sentence): words = tokenize(sentence) # get the corresponding vector for each word in the sentence vectors = [word_vector(word) for word in words] # return an average of all the vectors return np.mean(vectors, axis=0)"},{"prompt":"Leverage a Naive Bayes classifier from the scikitlearn library (Python) to build a spam filter.","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB # Load data df = pd.read_csv('spam_dataset.csv') # Clean data X = df.iloc[:, 0].values y = df.iloc[:, 1].values # Extract features vectorizer = CountVectorizer() X = vectorizer.fit_transform(X) # Split data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Build classifier model = MultinomialNB() model.fit(X_train, y_train) # Evaluate model performance test_score = model.score(X_test, y_test) print('Test accuracy:', test_score)"},{"prompt":"Create a vector of 10 random numbers in Python.","completion":"import numpy as np random_vector = np.random.random(10) print(\\"Random Vector of size 10: n\\", random_vector)"},{"prompt":"Given a list of [x,y] coordinates, write a Python program to check whether the two points are on a straight line or not. points = [[3,3], [2,2], [1,1]]","completion":"def line_checker(points): is_straight = True ref_x, ref_y = points[0] for i in range(1, len(points)): x, y = points[i] if (ref_y - y) * (ref_x - x) != 0: is_straight = False break return is_straight points = [[3,3], [2,2], [1,1]] print(line_checker(points))"},{"prompt":"Generate a number guessing game in Python.","completion":"import random # Generate a random number between 1 and 10 answer = random.randint(1, 10) # Ask the user to guess the number guess = int(input(\\"Guess a number between 1 and 10: \\")) # Loop until the user guesses correctly while guess != answer: if guess < answer: print(\\"Too low!\\") else: print(\\"Too high!\\") guess = int(input(\\"Guess again: \\")) # Congratulate the user print(\\"You got it! The answer is \\" + str(answer))"},{"prompt":"Develop a webcrawler in Python to scan a given website and store all the hyperlinks into a database. Website URL: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup import sqlite3 # connect to database conn = sqlite3.connect('links.db') cursor = conn.cursor() # create table cursor.execute(\\"CREATE TABLE IF NOT EXISTS urls (url TEXT)\\") # get website content response = requests.get(\\"https://www.example.com\\") soup = BeautifulSoup(response.content,'html.parser') # parse out the hyperlinks for link in soup.find_all('a'): if link.get('href'): # get absolute URLs if link.get('href')[0] == '/': url = 'https://www.example.com' + link.get('href') else: url = link.get('href') # insert into database cursor.execute(\\"INSERT INTO urls VALUES (?)\\",(url,)) conn.commit() conn.close()"},{"prompt":"Write a Python program to list all months of the current year.","completion":"months = [\\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\"] for month in months: print(month)"},{"prompt":"Generate a python script to print a multiplication table for an integer number, given as an argument.","completion":"import sys def print_multiplication_table(n): for row in range(1, n+1): for column in range(1, n+1): print(f\\"{row*column:4d}\\", end=\\"\\") print() if __name__ == \\"__main__\\": if len(sys.argv) != 2: print (\\"Please provide a number\\") sys.exit(1) else: try: number = int(sys.argv[1]) print_multiplication_table(number) except ValueError: print (\\"Please provide a valid number\\") sys.exit(1)"},{"prompt":"Generate code to print each element of a list of strings in Python. [apple, banana, cherry]","completion":"for item in [\\"apple\\", \\"banana\\", \\"cherry\\"]: print(item)"},{"prompt":"Design a class in Python to calculate the area of a circle.","completion":"class Circle : def __init__(self, r): self.radius = r def area(self): return self.radius**2*3.14 #Example circle = Circle(2) circle.area() # Output: 12.56"},{"prompt":"Generate a Python program to retrieve the Nth smallest element from a given list.","completion":"def nth_smallest(numbers, n): numbers.sort() return numbers[n-1]"},{"prompt":"Generate an appropriate script in Python for converting minutes to hours, rounding off the result to the nearest integer.","completion":"def minutes_to_hours(minutes): hours = minutes//60 return int(round(hours))"},{"prompt":"Write a python program for performing linear regression.","completion":"#import the modules import matplotlib.pyplot as plt import numpy as np #set the independent and dependent variables x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12]) #calculate the mean x_mean = np.mean(x) y_mean = np.mean(y) # Calculate the b1 and b0 numerator = 0 denominator = 0 for i in range(len(x)): numerator += (x[i] - x_mean)*(y[i] - y_mean) denominator += (x[i] - x_mean)**2 b1 = numerator / denominator b0 = y_mean - (b1 * x_mean) # Print the coefficients print(\\"b1 =\\", b1) print(\\"b0 =\\", b0) # Plotting Values and Regression Line max_x = np.max(x) + 100 min_x = np.min(x) - 100 # Calculating line values x and y x1 = np.linspace(min_x, max_x, 1000) y1 = b0 + b1 * x1 # Ploting Line plt.plot(x1, y1, color='#00ff00', label='Linear Regression') # Ploting Scatter Points plt.scatter(x, y, color='#ff0000', label='Scatter Plot') # Add title plt.title(\\"Linear Regression\\") # Show the plot plt.show()"},{"prompt":"Write a python function to print out the first 10 numbers from Fibonacci sequence.","completion":"def print_fibonacci_sequence(n): fibonacci_sequence = [0, 1] for i in range(2, n): fibonacci_sequence.append(fibonacci_sequence[i-1] + fibonacci_sequence[i-2]) return fibonacci_sequence[:n] print(print_fibonacci_sequence(10)) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"prompt":"Using Python, detect if the given string is a palindrome or not. madam","completion":"def isPalindrome(s): s = s.lower() return s == s[::-1] string_input = \\"madam\\" palindrome_status = isPalindrome(string_input) if palindrome_status: print(\\"The given string is a Palindrome\\") else: print(\\"The given string is not a Palindrome\\")"},{"prompt":"Design a Python script to classify movie reviews as positive or negative. Text of a review: This movie was fantastic! It was funny, interesting, and definitely worth watching.","completion":"import re import nltk from nltk.corpus import stopwords from nltk.tokenize import word_tokenize stop_words = stopwords.words(\\"english\\") # remove punctuations test_review = re.sub(r\\"W\\", \\" \\", test_review) # tokenize the sentence review_tokens = word_tokenize(test_review) # remove stopwords review_words = [word for word in review_tokens if not word in stop_words] # classify if len(review_words) > 0: pos_words = 0 for word in review_words: if word in pos_words: pos_words += 1 # if more than half of the words are positive then label it as positive if pos_words / len(review_words) > 0.5: print(\\"Positive\\") else: print(\\"Negative\\") else: print(\\"Neutral\\")"},{"prompt":"Develop a function in Python that takes a list of numbers as an argument and returns the difference between the maximum and minimum value. [3, 4, 7, 8, 12]","completion":"def maxMinDifference(arr): return max(arr)-min(arr) result = maxMinDifference([3, 4, 7, 8, 12]) print(result)"},{"prompt":"mplement an Optimization algorithm (e.g. genetic algorithm) in Python to solve the function y=(x2+1)2. Not applicable","completion":"import numpy as np def objective_function(x): # Objective function return np.square(x**2 + 1) def genetic_algorithm(pop_size, mutation_rate, num_iters): # Create the initial population population = np.random.uniform(-5, 5, (pop_size, 2)) # Evaluate the objective function on the population population_fitness = [objective_function(x) for x in population] # Loop over number of iterations for _ in range(num_iters): # Selection step selection = np.random.choice(np.arange(pop_size), size=int(pop_size/2), replace=False, p=population_fitness/np.sum(population_fitness)) new_population = population[selection] # Crossover step crossover_points = np.random.randint(0, 2, size=new_population.shape) crossover_mask = np.array(crossover_points == 0, dtype=int) new_population[:, 0] = crossover_mask * new_population[:, 0] + (1 - crossover_mask) * new_population[:, 1] new_population[:, 1] = crossover_mask * new_population[:, 1] + (1 - crossover_mask) * new_population[:, 0] # Mutation step mutation_mask = np.random.random(new_population.shape) > mutation_rate mutation_mask = np.array(mutation_mask, dtype=int) mutation_offset = np.random.uniform(-1, 1, new_population.shape) new_population = mutation_mask * new_population + (1 - mutation_mask) * mutation_offset # Evaluate the objective function on the new population population_fitness = [objective_function(x) for x in new_population] # Return the best solution return population[np.argmax(population_fitness)]"},{"prompt":"Create a Python program that returns the index of an integer in a sorted array. Given a sorted array arr[] = {1, 2, 3, 5, 6, 8, 9}, and an integer x = 8","completion":"def binarySearch(arr, x): l = 0 r = len(arr)-1 while l <= r: mid = l + (r - l)//2 if arr[mid] == x: return mid elif arr[mid] < x: l = mid + 1 else: r = mid - 1 return -1"},{"prompt":"Create a Python program to generate a random password at least eight characters long.","completion":"import string import random def gen_password(length): all_chars = string.ascii_letters + string.digits + string.punctuation generated_password = ''.join(random.choice(all_chars) for _ in range(length)) return generated_password if __name__ == '__main__': password = gen_password(8) print(password)"},{"prompt":"Optimize a given code in Python for higher efficiency. def power(base, exponent): answer = 1 for _ in range(exponent): answer *= base return answer","completion":"def power(base, exponent): answer = 1 while exponent > 0: if exponent & 1: answer *= base base *= base exponent >>= 1 return answer"},{"prompt":"Create a function in Python to compare two strings and return true if the strings only differ by one character. s1 = 'apple' s2 = 'acple'","completion":"def compare_strings(s1, s2): mismatch_count = 0 for i in range(len(s1)): if s1[i] != s2[i]: if mismatch_count > 0: return False mismatch_count += 1 return mismatch_count == 1 compare_strings('apple', 'acple')"},{"prompt":"Create a Python script for a calculator that can add, subtract, multiply and divide two numbers.","completion":"def calculator(num1, num2, op): if op == \\"+\\": return num1 + num2 elif op == \\"-\\": return num1 - num2 elif op == \\"*\\": return num1 * num2 elif op == \\"/\\": return num1 / num2 else: raise Exception(\\"Invalid operator\\")"},{"prompt":"mplement a doubly linked list in Python.","completion":"class Node(object): def __init__(self, value, prev, next): self.value = value self.prev = prev self.next = next class LinkedList(object): def __init__(self): self.head = None self.tail = None self.length = 0 def append(self, value): node = Node(value, None, None) if self.head is None: self.head = node self.tail = node else: self.tail.next = node node.prev = self.tail self.tail = node self.length += 1 def prepend(self, value): node = Node(value, None, None) if self.head is None: self.head = node self.tail = node else: node.next = self.head self.head.prev = node self.head = node self.length += 1 def get_at_index(self, index): if index < 0 or index > self.length - 1: return None else: current_node = self.head for _ in range(index): current_node = current_node.next return current_node.value def remove_at_index(self, index): if index < 0 or index > self.length - 1: return None else: current_node = self.head for _ in range(index): current_node = current_node.next current_node.prev.next = current_node.next current_node.next.prev = current_node.prev self.length -= 1"},{"prompt":"mplement a function in Python to find the length of a given string without using the len() builtin function. Hello World!","completion":"def getStringLength(my_string): # Initialize counter count = 0 for s in my_string: count+= 1 return count"},{"prompt":"Develop a function in Python to swap the first and last elements of a given input list. list = [1, 2, 3, 4, 5]","completion":"def swap(list): # swapping first and last elements temp = list[0] list[0] = list[-1] list[-1] = temp list = [1, 2, 3, 4, 5] swap(list) print(list)"},{"prompt":"Design a machine learning model with Scikitlearn in Python to classify articles as either political or nonpolitical. Not applicable","completion":"from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # load the data data = # Load your articles here labels = # Load the corresponding labels here # vectorize the data vectorizer = CountVectorizer() features = vectorizer.fit_transform(data) # build the model model = MultinomialNB() model.fit(features, labels)"},{"prompt":"Write a Python program to solve the traveling salesman problem for a given list of cities with a specified starting node. Starting Node: A Cities: A, B, C, D, E","completion":"import networkx as nx # Create a graph G = nx.Graph() G.add_nodes_from(['A', 'B', 'C', 'D', 'E']) # Get all possible paths from starting node all_paths = nx.all_simple_paths(G, source=\\"A\\", target=None) # Compute the shortest path shortest_path = nx.shortest_path(G, source=\\"A\\", target=None) # Display the result for p in shortest_path: print(\\"->\\".join(p)) # Output A->B->C->D->E->A"},{"prompt":"Can you show how to perform regular expression matching in Python with a given string and pattern? String s = Hello World Pattern p = W.*d","completion":"import re s = \\"Hello World\\" p = \\"W.*d\\" m = re.match(p, s) if m is not None: print(\\"Match found!\\") print(\\"Position: \\" + str(m.start()) + \\",\\" + str(m.end())) print(\\"Matched string: \\" + m.group()) else: print(\\"No match found!\\")"},{"prompt":"Write a function in Python that takes two arguments, an array of numbers, and an integer, and returns the maximum product of two numbers in the array that are less than the given integer. arr = [12, 4, 6, 8, 5] num = 10","completion":"def max_product(arr, num): product = 0 for i in range(0, len(arr) - 1): for j in range(i+1, len(arr)): if arr[i] * arr[j] < num and arr[i] * arr[j] > product: product = arr[i] * arr[j] return product print(max_product(arr, num))"},{"prompt":"Create a data structure in Python to store and retrieve the first 10 prime numbers.","completion":"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # Create a dictionary where the prime numbers is the key prime_dict = {prime:True for prime in primes} # Retrieving the prime numbers def get_prime_numbers(): return [prime for prime in prime_dict.keys()] # Storing the prime numbers def set_prime_numbers(primes): prime_dict = {prime:True for prime in primes}"},{"prompt":"Refactor the following Python code to make use of list comprehensions. result = [] for x in range(10): for y in range(10): result.append(x * y)","completion":"result = [x * y for x in range(10) for y in range(10)]"},{"prompt":"Write a python program to calculate the sum of the given numbers and return the result. [1, 2, 3, 4, 5]","completion":"def sum_numbers(arr): result = 0 for num in arr: result += num return result"},{"prompt":"Rewrite a JavaScript code to an equivalent Python code. function isOddNumber(num) { if (num % 2 !== 0) { return true; } }","completion":"def is_odd_number(num): if num % 2 != 0: return True else: return False"},{"prompt":"Write a Python program that takes a string as input and returns a new string with all vowels removed. hello","completion":"# Function to remove vowels def removeVowels(str): vowels = ('a', 'e', 'i', 'o', 'u') for x in str.lower(): if x in vowels: str = str.replace(x,\\"\\") print(str) # Driver program str = \\"Hello\\" removeVowels(str) # Output: Hll"},{"prompt":"Craft a Python function to convert a given string to an integer","completion":"def string_to_int(string): result = 0 for char in string: result = result*10 + (ord(char) - ord('0')) return result"},{"prompt":"Develop a program in Python that sums up all the numbers of a list. [1, 2, 3, 4, 5]","completion":"# define the list my_list = [1, 2, 3, 4, 5] # compute the total total = 0 for num in my_list: total += num # print the result print(\\"The sum of all numbers in the list is: \\" + str(total))"},{"prompt":"Create a program in Python that takes an array and finds the minimum value stored in it. [34, 48, 19, 61, 3]","completion":"arr = [34, 48, 19, 61, 3] # Finds the minimum element print (\\"The minimum element is \\" + str(min(arr)))"},{"prompt":"Refactor a Python program that gets user input, checks if it is a valid input, and provides feedback depending on the validity. def get_input(): user_input = raw_input(Please enter a number between 1 and 10: ) return user_input def main(): user_input = get_input() if __name__ == '__main__': main()","completion":"def get_input(): while True: try: user_input = int(input(\\"Please enter a number between 1 and 10: \\")) if 1 <= user_input <= 10: return user_input else: print(\\"Error: Input must be between 1 and 10. Please try again.\\") except ValueError: print(\\"Error: Input must be a number. Please try again.\\") def main(): user_input = get_input() if __name__ == '__main__': main()"},{"prompt":"Develop a script in Python to check if a number is divisible by 9 or not.","completion":"def isDivisibleBy9(num): # Base case if(num == 0 or num == 9): return True if(num < 9): return False # Recursive case return isDivisibleBy9(sum(map(int,str(num)))) if __name__ == '__main__': num = int(input('Enter a number: ')) if isDivisibleBy9(num): print('Yes, {} is divisible by 9.'.format(num)) else: print('No, {} is not divisible by 9.'.format(num))"},{"prompt":"Create a program in Python which generates a digital ticket for a ticket reservation system. Not applicable","completion":"import uuid # Generate a random ticket ID ticket_id = uuid.uuid4() # Print the ticket ID print(\\"Your ticket ID is:\\", ticket_id)"},{"prompt":"Create a class to represent a stack data structure in Python.","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def is_empty(self): return self.items == []"},{"prompt":"Prepare a training dataset for a Machine Learning model using Python. Not applicable","completion":"import pandas as pd # Read in the data df = pd.read_csv('data.csv') # Preprocess the data df = preprocessData(df) # Split the data into training and test train_X, test_X, train_y, test_y = train_test_split(df.drop('X',axis=1), df['X'], test_size=0.2) # Save the training and test data to files train_X.to_csv('train_X.csv', index=False) test_X.to_csv('test_X.csv', index=False) train_y.to_csv('train_y.csv', index=False) test_y.to_csv('test_y.csv', index=False)"},{"prompt":"Create a Python program to optimize a given function for a given interval. func = lambda x: x**2 4.5*x + 5 interval = [3.5, 4.5]","completion":"import scipy.optimize # Execute optimization mini = scipy.optimize.minimize_scalar(func = func, bounds = interval) # Print optimal value x_opt print('{0:5.5f}'.format(mini.x))"},{"prompt":"Write a Python code that generates an array of 20 random integers between 1 and 10.","completion":"import random random_numbers = [random.randint(1, 10) for i in range(20)]"},{"prompt":"mplement a web scraping script in Python to extract information from webpages. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'http://example.com' page = requests.get(url) soup = BeautifulSoup(page.text, 'html.parser') # Extract the data from the html data = soup.find_all('div') # Do something with the extracted data for d in data: print(d)"},{"prompt":"You need to implement a neural network using python to predict whether a given tumor is cancerous or not.","completion":"import keras from keras.models import Sequential from keras.layers import Dense, Activation data_dim = 30 num_classes = 2 model = Sequential() model.add(Dense(32, activation='relu', input_dim=data_dim)) model.add(Dense(1, activation='sigmoid')) model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy']) model.fit(x_train, y_train, epochs=10, batch_size=32)"},{"prompt":"Create a function in Python that takes a list of numbers as input and returns a list with the negative numbers from the given list. Not applicable","completion":"def get_negative_numbers(numbers): return [num for num in numbers if num < 0]"},{"prompt":"Create a program using Python to classify the type of company an advertising company can be. The advertising company can be classified into the following types: Automotive, Food & Beverage, Finance, Technology, and Others.","completion":"def classify_company(company): if company in [\\"AUTOMOTIVE\\", \\"FOOD & BEVERAGE\\", \\"FINANCE\\", \\"TECHNOLOGY\\"]: return company else: return \\"OTHER\\""},{"prompt":"Design a node class to represent a single node in a linked list in Python","completion":"class Node: def __init__(self, data): self.data = data self.next = None"},{"prompt":"Create a Python program that takes two string as input and produces a new string as output. The output string is the concatenation of the two inputs with all the vowels removed. string1 = 'Hello World!' string2 = 'This is a test.'","completion":"def remove_vowels(string1, string2): res = '' vowels = 'aeiouAEIOU' for char in string1 + string2: if char not in vowels: res += char return res print(remove_vowels(string1, string2))"},{"prompt":"Write a python program to calculate the sum of consecutive numbers starting from 0 to a given number. Number = 10","completion":"#Calculate sum of consecutive numbers starting at 0 #Get input num = 10 #Calculate and print result sumNum = sum(range(0, num+1)) print(\\"The sum of consecutive numbers from 0 to 10 is :\\", sumNum)"},{"prompt":"Generate a Python code to print the frequencies of the characters of a given string. Hello World!","completion":"freq={} for ch in \\"Hello World!\\": if ch in freq: freq[ch] +=1 else: freq[ch] = 1 for key, value in freq.items(): print(\\"{}:{}\\".format(key,value))"},{"prompt":"Generate a code in Python to check whether a number is a perfect square or not","completion":"def is_perfect_square(num): if num < 0: return False x = num // 2 seen = {x} while x * x != num: x = (x + (num // x)) // 2 if x in seen: return False seen.add(x) return True"},{"prompt":"mplement a python program to perform document classification.","completion":"import numpy as np from sklearn.datasets import fetch_20newsgroups from sklearn.feature_extraction.text import CountVectorizer from sklearn.feature_extraction.text import TfidfTransformer from sklearn.naive_bayes import MultinomialNB newsgroups_train = fetch_20newsgroups(subset='train', shuffle=True) # Create bag of words count_vect = CountVectorizer() X_train_counts = count_vect.fit_transform(newsgroups_train.data) # Creating vectors tfidf_transformer = TfidfTransformer() X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts) # Create classifier clf = MultinomialNB().fit(X_train_tfidf, newsgroups_train.target) # Get input document to classify docs_new = ['God is love', 'OpenGL on the GPU is fast'] X_new_counts = count_vect.transform(docs_new) X_new_tfidf = tfidf_transformer.transform(X_new_counts) # Predicted categories for input document print(clf.predict(X_new_tfidf))"},{"prompt":"Construct a code to eliminate all negative numbers from a list using Python. [1, 9, 3, 4, 8]","completion":"def remove_negatives(nums): new_list = [num for num in nums if num > 0] return new_list my_list = [-1, 9, -3, 4, -8] filtered_list = remove_negatives(my_list) print(filtered_list) #[9, 4]"},{"prompt":"Create a function in Python that takes a string as an input and reverses each word of the string.","completion":"def reverse_words(string): words = string.split(\\" \\") output_string = \\"\\" for word in words: output_string += word[::-1] + \\" \\" return output_string.strip()"},{"prompt":"Create an API endpoint in Python to delete a record from a MongoDB database.","completion":"@app.route('/delete-record', methods=['DELETE']) def delete_record(): db = client.your_database # specify the correct database collection = db.your_collection # specify the correct collection # get the required ID from the request id = request.args.get('id') # perform the deletion result = collection.delete_one({'_id': ObjectId(id)}) if result.deleted_count == 0: # return an error if the record was not found return {'message': 'Record not found'}, 404 else: return {'message': 'Record deleted'}, 200"},{"prompt":"Create a function in Python to search a list for a given item. list = [1, 2, 3, 4, 5, 6] item = 4","completion":"def search_list(lst, item): for i in range(len(lst)): if lst[i] == item: return i return -1 idx = search_list(list, item) if idx == -1: print(\\"Item not found\\") else: print(\\"Item found at index\\", idx)"},{"prompt":"Write an implementation for a DepthFirst Search algorithm in Python. Not applicable","completion":"def DFS(graph, start, visited=None): if visited is None: visited = set() visited.add(start) for next in graph[start] - visited: DFS(graph, next, visited) return visited graph = {'A': set(['B', 'C']), 'B': set(['A', 'D', 'E']), 'C': set(['A', 'F']), 'D': set(['B']), 'E': set(['B', 'F']), 'F': set(['C', 'E'])} DFS(graph, 'A') # returns {'E', 'D', 'F', 'A', 'C', 'B'}"},{"prompt":"Build a Python program to find the maximum element in a list of numbers. [4, 9, 10, 11, 12]","completion":"def maxNum(numsList): maxNum = numsList[0] for num in numsList: if num > maxNum: maxNum = num return maxNum numList = [4, 9, 10, 11, 12] print(\\"The maximum number in the list is:\\", maxNum(numList))"},{"prompt":"Create a Python program to count the occurrence of a specific word in a string. The quick brown fox","completion":"def count_occurences(string, word): count = 0 words = string.split(' ') for w in words: if w == word: count += 1 return count string = 'The quick brown fox' word = 'The' occurrences = count_occurences(string, word) print('\\"The\\" occurs', occurrences , 'times in the string.')"},{"prompt":"Design a program that sorts a given array of numbers.","completion":"# Python program for implementation of Bubble Sort def bubbleSort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j]"},{"prompt":"Compose a python function to find the longest common subsequence of two given strings String 1 = abcefg String 2 = adgf","completion":"def LongestCommonSubsequence(string1, string2): n = len(string1) m = len(string2) dp = [[None]*(m+1) for i in range(n+1)] for i in range(n+1): for j in range(m+1): if i == 0 or j == 0 : dp[i][j] = 0 elif string1[i-1] == string2[j-1]: dp[i][j] = dp[i-1][j-1]+1 else: dp[i][j] = max(dp[i-1][j] , dp[i][j-1]) return dp[n][m]"},{"prompt":"Write a Python loop that prints out a list of random numbers between 0 and 100. Number of random numbers: 5","completion":"import random random_numbers = [] for i in range(5): number = random.randint(0,100) random_numbers.append(number) print(random_numbers)"},{"prompt":"Generate a python code to read id, name and salary for n employees 4","completion":"n = int(input('Enter the number of employees: ')) # Initializing dictionaries Employee_ID = {} Employee_Name = {} Employee_Salary = {} # Looping to get details of each employee for i in range (1, n+1): print('For employee ', i) Employee_ID[i] = int(input('Enter your ID: ' )) Employee_Name[i] = input('Enter your name: ')) Employee_Salary[i] = int(input('Enter your salary: ')) print('The Employee records are: ') # printing data for i in range(1, n+1): print('Employee ID:', Employee_ID[i], 'Employee Name:', Employee_Name[i], 'Employee Salary:', Employee_Salary[i])"},{"prompt":"Generate a Python algorithm to check if a given word is a palindrome. madam","completion":"def isPalindrome(word): left, right = 0, len(word) - 1 while right >= left: if not word[left] == word[right]: return False left += 1 right -= 1 return True"},{"prompt":"Generate a Python program to find the longest increasing subsequence in a given list of numbers","completion":"def find_longest_increasing_subsequence(array): n = len(array) Length = [1] * n SequenceArray = [None] * n for index1 in range(n): for index2 in range(index1): if array[index2] < array[index1] and Length[index2] >= Length[index1]: Length[index1] = Length[index2] + 1 SequenceArray[index1] = index2 maxIndex = Length.index(max(Length)) SubsequenceArray = [array[maxIndex]] while SequenceArray[maxIndex] is not None: maxIndex = SequenceArray[maxIndex] SubsequenceArray.append(array[maxIndex]) SubsequenceArray.reverse() return SubsequenceArray"},{"prompt":"mplement a function in Python that checks for palindrome strings. Not applicable","completion":"def isPalindrome(text): text = text.lower() return text == text[::-1] # Testing print(isPalindrome(\\"Mom\\")) # Should return True print(isPalindrome(\\"Apple\\")) # Should return False"},{"prompt":"Create a Python function that takes in a list of numbers, evaluates every 3rd number in the list and returns the total. [3, 8, 7, 4, 9, 2, 1, 6]","completion":"def evaluate_list(nums_list): # set counter to 0 counter = 0 # set total as 0 total = 0 # iterate through list for num in nums_list: # check if counter divides by 3 if counter%3 == 0: # add number to total total += num # increment counter counter += 1 #return total return total nums_list = [3, 8, 7, 4, 9, 2, 1, 6] result = evaluate_list(nums_list) print(result) # Output: 14"},{"prompt":"Create a Python program to generate a random password of 8 characters including uppercase, lowercase, numeric digits, and special characters. Not applicable","completion":"import random import string def generate_password(): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + '#@' random.shuffle(list(chars)) return ''.join(random.sample(chars, 8)) print(generate_password()) #nH3@r4y6"},{"prompt":"Create a program in Python to detect the language of the given text. Text: Bonjour tout le monde!","completion":"import nltk from nltk.classify import AffinityPropagation from sklearn.feature_extraction.text import TfidfVectorizer text = \\"Bonjour tout le monde!\\" vectorizer = TfidfVectorizer(min_df = 1, analyzer = nltk.word_tokenize) X = vectorizer.fit_transform([text]) clf = AffinityPropagation() clf.fit(X) labels = clf.labels_ language = clf.cluster_centers_indices_[labels[0]] print(vectorizer.get_feature_names()[language])"},{"prompt":"Create a python program to print the total number of vowels in a given string string = This is a sample string","completion":"def count_vowels(string): count = 0 for character in string: if character in 'aeiouAEIOU': count += 1 return count"},{"prompt":"Write a class in Python that implements a Stack using a list to store the items. Not applicable","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def is_empty(self): return self.items == []"},{"prompt":"Write a function to check if a year is a leap year using Python.","completion":"def isLeapYear(year): \\"\\"\\" Returns True if year is a leap year and False othwerwise. \\"\\"\\" if (year % 400 == 0): return True elif (year % 100 == 0): return False elif (year % 4 == 0): return True else: return False"},{"prompt":"Write a Python program to generate a bar chart with labels using matplotlib from a given list of numbers. list = [1, 2, 3, 4, 5]","completion":"import matplotlib.pyplot as plt list = [1, 2, 3, 4, 5] plt.bar(range(len(list)), list) plt.xlabel('Index') plt.ylabel('Value') plt.title('My Bar Chart') plt.show()"},{"prompt":"Generate a program in Python to generate a list with numbers from 1 to 20 in random order.","completion":"import random def randomListGenerator(): randomList = [] for i in range(1, 21): randomNumber = random.randint(1,20) while randomNumber in randomList: randomNumber = random.randint(1,20) else: randomList.append(randomNumber) return randomList print(randomListGenerator())"},{"prompt":"Write a python program to calculate the mean of a list of numbers and display the mean using print statement. [2, 6, 9, 8, 4, 5]","completion":"list = [2, 6, 9, 8, 4, 5] sum = 0 for num in list: sum += num # calculate mean mean = sum / len(list) # print mean print(\\"Mean:\\", mean) # Output Mean: 5.8"},{"prompt":"Create a command line utility in Python that takes as input a search query and outputs a list of relevant webpages for the query. Search query: What is code generation?","completion":"import requests query = input('Search query: ') url = 'https://www.google.com/search?q=' + query r = requests.get(url) if r.status_code == 200: print('Search results:') for item in r.json()['items']: print(item['title'] + ' - ' + item['url']) else: print('An error occurred!')"},{"prompt":"Create a Python program to calculate the mean, median, and mode from a list of numbers. [1, 2, 3, 4, 5]","completion":"# calculate the mean def mean(nums): return sum(nums) / len(nums) # calculate the median def median(nums): nums.sort() if len(nums) % 2 == 0: return (nums[len(nums)//2-1] + nums[len(nums)//2]) / 2 else: return nums[len(nums)//2] # calculate the mode def mode(nums): nums.sort() max_count = 1 mode = nums[0] current_count = 1 for i in range(1, len(nums)): if nums[i] == nums[i-1]: current_count += 1 if current_count > max_count: max_count = current_count mode = nums[i] else: current_count = 1 return mode # test read nums = [1, 2, 3, 4, 5] print(\\"Mean = \\", mean(nums)) print(\\"Median = \\", median(nums)) print(\\"Mode = \\", mode(nums))"},{"prompt":"Construct a correct python program to evaluate the expression y = (1/x) + x^2. x = 5","completion":"x = 5 def evaluate_expression(x): y = (1 / x) + (x ** 2) return y"},{"prompt":"Write a Python list comprehension to extract the individual digits of a given number. num = 5112","completion":"[int(d) for d in str(num)]"},{"prompt":"Transform the following code written in Java to code written in Python. public static int largest(int[] array) { int largest = array[0]; for (int i = 1; i < array.length; i++) { if (array[i] > largest) { largest = array[i]; } } return largest; }","completion":"def largest(array): largest = array[0] for i in range(1, len(array)): if array[i] > largest: largest = array[i] return largest"},{"prompt":"Create a program in Python to print the following pattern n = 5","completion":"def print_pattern(n): for i in range(1, n+1): for j in range(1, i+1): print(j, end=\\"\\") print(\\"\\") print_pattern(5)"},{"prompt":"Create a Python program to calculate the maximum number of items a person can buy with a given budget. budget = 1000 item_list = [('itemA', 10), ('itemB', 20), ('itemC', 30)]","completion":"def max_items_with_budget(budget, item_list): # create a dictionary for the items and the corresponding item cost item_dict = dict(item_list) # check the budget if budget < min(item_dict.values()): return 0 # initialize the maximum number of items max_item = 0 for item, cost in item_dict.items(): num_items = budget // cost if num_items > max_item: max_item = num_items return max_item if __name__ == '__main__': budget = 1000 item_list = [('itemA', 10), ('itemB', 20), ('itemC', 30)] print(max_items_with_budget(budget, item_list))"},{"prompt":"Generate a list of prime numbers in Python list comprehension format within 1000.","completion":"primes_list = [num for num in range(2, 1000) if all(num % i != 0 for i in range(2, num))]"},{"prompt":"Create a Python script to transform a number into its equivalent binary format.","completion":"def to_binary(num): # convert to a binary number if num > 1: to_binary(num // 2) print(num % 2,end = '')"},{"prompt":"Generate a Python program to generate random numbers between 1 and 10.","completion":"import random number = random.randint(1, 10) print (number)"},{"prompt":"Optimize the following code using functional programming in Python. def add_odds(list): odd_list = [] for num in list: if num % 2 == 1: odd_list.append(num) return odd_l","completion":"def add_odds(list): odd_list = filter(lambda num: num%2==1, list) return list(odd_list)"},{"prompt":"Develop a python program to calculate the maximum product of two numbers greater than 0 in a given numerical array. array = [6, 3, 10, 0, 2]","completion":"def maxProduct(arr): n = len(arr) max_prod = 0 for i in range(0, n): for j in range(i + 1, n): if arr[i] > 0 and arr[j] > 0: max_prod = max(max_prod, arr[i] * arr[j]) return max_prod # Input array = [6, -3, -10, 0, 2] # Output result = maxProduct(array) print(result)"},{"prompt":"Can you provide a Python code snippet to detect the collinear points given N points in an array? points = [[1,1],[2,1],[3,0],[4,1],[5,0]]","completion":"# Check if point p3 lies on the line joining p1 and p2 def checkCollinearity(p1, p2, p3): x1 = p1[0] y1 = p1[1] x2 = p2[0] y2 = p2[1] x3 = p3[0] y3 = p3[1] # Calculating position of the point wrt the line joining the other two points. position = ((y2 - y1) * (x3 - x1)) - ((y3 - y1) * (x2 - x1)) # Checking if collinear. If position is 0 then points are collinear. if (position == 0): return True else: return False # Counting collinear point pairs collinear_pairs = 0 for i in range(len(points)): for j in range(i+1, len(points)): for k in range(j+1, len(points)): p1 = points[i] p2 = points[j] p3 = points[k] # Checking condition if checkCollinearity(p1, p2, p3): collinear_pairs = collinear_pairs + 1 print(\\"Collinear Pairs = \\", collinear_pairs)"},{"prompt":"Write a Python program to find the longest increasing subsequence of a given sequence. sequence : [10, 4, 11, 5, 7, 8, 6, 22, 20]","completion":"def lis(sequence): lis = [1 for _ in range(len(sequence))] for i in range (1 , len(sequence)): for j in range(0 , i): if sequence[i] > sequence[j] and lis[i]< lis[j] + 1 : lis[i] = lis[j]+1 maximum = 0 for i in range(len(sequence)): maximum = max(maximum , lis[i]) return maximum"},{"prompt":"Write a python program to sort a given list of tuples based on its first element in increasing order. [(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')]","completion":"def sortTuplesByFirstElement(lst): lst.sort(key = lambda x: x[0]) return lst sortedList = sortTuplesByFirstElement([(3, 'ape'), (1, 'cat'), (4, 'dog'), (2, 'bee')]) print(sortedList)"},{"prompt":"Write a Python program to take a list of words as input and print all of the words with at least 4 letters. ['apple', 'cat', 'elephant', 'banana', 'dog']","completion":"words = ['apple', 'cat', 'elephant', 'banana', 'dog'] filtered_words = [] for word in words: if len(word) >= 4: filtered_words.append(word) print(filtered_words)"},{"prompt":"Generate a dynamic temperature conversion program with user input in Python.","completion":"\\"\\"\\" A dynamic temperature conversion program with user input in Python. \\"\\"\\" def convert_temperature(): # Prompt user for temperature to convert. temp = int(input('Enter temperature to convert: ')) # Prompt for unit to convert from and to. unit_from = input('Enter unit to convert from (Celsius or Fahrenheit): ') unit_to = input('Enter unit to convert to (Celsius or Fahrenheit): ') # Convert the temperature to specified unit. if unit_from == 'Celsius' and unit_to == 'Fahrenheit': converted_temp = (temp * 9/5) + 32 elif unit_from == 'Fahrenheit' and unit_to == 'Celsius': converted_temp = (temp - 32) * 5/9 else: converted_temp = temp # Display the result. print('The converted temperature is {} {}.'.format(converted_temp, unit_to)) if __name__ == '__main__': convert_temperature()"},{"prompt":"Create a Python program that encrypts a user's data using AES encryption. Not applicable","completion":"from Crypto.Cipher import AES key = b'Sixteen byte key' def encrypt(message): cipher = AES.new(key, AES.MODE_EAX) ciphertext, tag = cipher.encrypt_and_digest(message) return (cipher.nonce, tag, ciphertext) def decrypt(ciphertext): cipher = AES.new(key, AES.MODE_EAX, nonce=nonce) plaintext = cipher.decrypt(ciphertext) try: cipher.verify(tag) print(\\"The message is authentic: \\", plaintext) except ValueError: print(\\"Key incorrect or message corrupted\\")"},{"prompt":"Generate a subroutine in Python to convert a string date of the format DD/MM/YYYY to the Unix timestamp type. String date: 25/12/2021","completion":"import datetime def convert_to_unix_time_stamp(date): date_object = datetime.datetime.strptime(date, \\"%d/%m/%Y\\") return date_object.timestamp()"},{"prompt":"Create a Python program to classify inputs into one of three classes. [2, 10, 11, 4, 1]","completion":"def classify_inputs(lst): result = [] for num in lst: if num <= 0: result.append('negative') elif num > 0 and num <= 10: result.append('non-negative') else: result.append('positive') return result print(classify_inputs([-2, 10, 11, 4, -1]))"},{"prompt":"Optimize a given Python program to calculate the Fibonacci series. Not applicable","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: a = [0] * (n+1) a[0] = 0 a[1] = 1 for i in range(2, n+1): a[i] = a[i-1] + a[i-2] return a[n]"},{"prompt":"Create a neural network in Python to identify the digits from 0 to 9.","completion":"import tensorflow as tf import keras # Create a model model = keras.Sequential([ keras.layers.Conv2D(32, (3, 3), input_shape=(28, 28, 1)), keras.layers.MaxPooling2D((2, 2)), keras.layers.Flatten(), keras.layers.Dense(128, activation=\\"relu\\"), keras.layers.Dense(10, activation=\\"softmax\\") ]) # Compile the model model.compile(optimizer=\\"sgd\\", loss=\\"sparse_categorical_crossentropy\\", metrics=[\\"accuracy\\"])"},{"prompt":"Write a Python program to simulate a dice game.","completion":"import random def roll_dice(): # generate random number from 1 to 6 dice = random.randint(1, 6) return dice # take input from the user roll_again = \\"yes\\" while roll_again == \\"yes\\" or roll_again == \\"y\\": print(\\"Rolling the dices...\\") print(\\"The values are....\\") # get two random values dice1 = roll_dice() dice2 = roll_dice() print(dice1) print(dice2) roll_again = input(\\"Roll the dices again?[y/n]\\")"},{"prompt":"Create a website with a Javascript frontend and a Python backend. The website should have an API for displaying a list of products and product details. [ { name: Laptop, category: Electronics, price: 499.99 }, { name: Headphones, category: Electronics, price: 59.99 }, { name: Yoga Mat, category: Sports, price: 39.99 } ]","completion":"// Server const express = require('express'); const app = express(); let products = [ { name: 'Laptop', category: 'Electronics', price: 499.99 }, { name: 'Headphone', category: 'Electronics', price: 59.99 }, { name: 'Yoga Mat', category: 'Sports', price: 39.99 } ]; app.get('/products', (req, res) => { res.send(products); }); app.get('/products/:name', (req, res) => { let product = products.find(product => product.name === req.params.name); if (product) { res.send(product); } else { res.send({message: 'Product not found'}); } }); app.listen(3000, () => console.log('Server started')); // Client let productList; fetch('/products') .then(response => response.json()) .then(data => { productList = data; renderProductList(); }); function renderProductList() { let productListElement = document.getElementById('product-list'); for (let product of productList) { let li = document.createElement('li'); li.innerHTML = \`<b>{product.name}</b> ({product.category}): {product.price}\`; productListElement.appendChild(li); } }"},{"prompt":"Design a function in Python to convert a Celsius temperature to a Fahrenheit temperature. 32","completion":"def convert_celsius_to_fahrenheit(celsius): fahrenheit = celsius * 9/5 + 32 return fahrenheit celsius = 32 fahrenheit = convert_celsius_to_fahrenheit(celsius) print('{} degree Celsius is {} degree Fahrenheit.'.format(celsius, fahrenheit))"},{"prompt":"Convert the given string to all capital letters using an algorithm and Python.","completion":"def convert_to_upper(string): \\"\\"\\"Function to convert the given string to all capital letters using an algorithm. 'Input should be a string.\\"\\"\\" result = '' for char in string: result += chr(ord(char) - 32) return result print(convert_to_upper('Hello world!'))"},{"prompt":"Create a python program to generate a random password that contains at least 16 characters with a combination of numbers, upper and lowercase letters and symbols Not applicable","completion":"import random import string # generates 16 random characters def generate_random_password(): random_length = 16 characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(characters) for x in range (random_length)) # generate and print the password password = generate_random_password() print(password)"},{"prompt":"Create a program in Python to check for duplicate words in a given sentence. sentence = I am going to the store to buy food","completion":"sentence = \\"I am going to the store to buy food\\" words = sentence.split(' ') #Table to keep track of duplicates table = [] for word in words: if word in table: print(\\"Duplicate word found: \\"+word) else: table.append(word)"},{"prompt":"Create a Python function to encode an input string using the Caesar Cipher Not applicable","completion":"def caesar_cipher(input_string, shift): alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' output_string = '' for char in input_string: if char in alphabet: char_index = alphabet.find(char) new_char_index = char_index + shift output_string += alphabet[new_char_index % len(alphabet)] else: output_string += char return output_string"},{"prompt":"Generate a Python program to convert a list of strings to a list of integers. ['1', '3', '2', '6']","completion":"def str_to_int(lst): int_lst = [] for i in lst: int_lst.append(int(i)) return int_lst"},{"prompt":"Develop a Python program to optimize a function using a Genetic Algorithm. Function to optimize: 3*x^2 + 2*x + 4","completion":"# import the essential libraries import numpy as np from deap import algorithms from deap import base from deap import creator from deap import tools # define the problem def fitness_function(individual): return sum(individual[0]**2 + 5*individual[1]**2, 3*individual[2]**2 + 2*individual[3] + 4, axis=1) # define the individual toolbox = base.Toolbox() creator.create(\\"FitnessMax\\", base.Fitness, weights=(1.0,)) creator.create(\\"Individual\\", list, fitness=creator.FitnessMax) toolbox.register(\\"attribute\\", np.random.randint, 2, 4) toolbox.register(\\"individual\\", tools.initRepeat, creator.Individual, toolbox.attribute, 4) # define the optimizer toolbox.register(\\"select\\", tools.selTournament, tournsize=3) toolbox.register(\\"mutate\\", tools.mutUniformInt, low=2, up=4, indpb=0.2) toolbox.register(\\"mate\\", tools.cxUniform, indpb=0.5) toolbox.register(\\"evaluate\\", fitness_function) # run the optimizer stats = tools.Statistics(lambda ind: ind.fitness.values) stats.register(\\"avg\\", np.mean) stats.register(\\"std\\", np.std) stats.register(\\"min\\", np.min) stats.register(\\"max\\", np.max) pop = toolbox.population(n=40) result = algorithms.eaSimple(pop, toolbox, 0.5, 0.2, 100, stats=stats)"},{"prompt":"Create a python program to print out the top 10 coins listed on CoinMarketCap.","completion":"import requests url = \\"https://api.coinmarketcap.com/v2/ticker/\\" response = requests.get(url) data = response.json() print(data['data'][0]['name'], data['data'][0]['quotes']['USD']['price']) for i in range(1, 10): print(data['data'][i]['name'], data['data'][i]['quotes']['USD']['price'])"},{"prompt":"Generate a Python program to group data by age and then find the average age of each group. A list of 100 employee records with columns name, age, and salary.","completion":"employees = [record1, record2, ...] groups = {} for record in employees: age = record[\\"age\\"] if age in groups: groups[age].append(record) else: groups[age] = [record] for age, records in groups.items(): avg_age = sum([r[\\"age\\"] for r in records]) / len(records) print(f\\"The avg age of group of age {age} is {avg_age}\\")"},{"prompt":"Optimize a Python program that counts the number of words in a given sentence. 'This is a test sentence.'","completion":"def count_words(sentence): # split the sentence on whitespace words = sentence.split() # return the length of the resulting list return len(words) sentence = 'This is a test sentence.' # count the number of words num_words = count_words(sentence) print('Number of words:', num_words)"},{"prompt":"Write a Python program to create and print a list of the first 10 prime numbers.","completion":"import math def is_prime(n): if n <= 1: return False for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0: return False return True list_of_primes = [] for i in range(2, 11): if is_prime(i): list_of_primes.append(i) print(list_of_primes)"},{"prompt":"Develop a function in Python to convert an integer in base 10 to a string representing the number in binary. x = 42","completion":"def int_to_binary(x): #initializing a variable to store the binary equivalent bin_str = '' #looping until the value of x is 0 while x > 0: # calculated the remainder remainder = x % 2 #updating x x >>= 1 #adding the remainder to the string bin_str += str(remainder) #reversing the string bin_str = bin_str[::-1] # return the binary string return bin_str"},{"prompt":"Create a function in Python to count the number of each letter in the sentence Hello world, this is GPT!","completion":"def countLetters(sentence): counts = dict() for c in sentence: if c in counts: counts[c] += 1 else: counts[c] = 1 return counts"},{"prompt":"Create a Lambda function in Python to return the maximum of three numbers.","completion":"max_func = lambda a, b, c : max(a,b,c) print(max_func(3, 12, 7))"},{"prompt":"Create a function in Python that takes two strings as input. The first string should be a sentence and the second should be a word. The function should return the number of times the given word appears in the given sentence. sentence = This is an example sentence word = example","completion":"def countWordOccurrences(sentence, word): count = 0 sentenceArray = sentence.split(' ') for s in sentenceArray: if s == word: count += 1 return count sentence = \\"This is an example sentence\\" word = \\"example\\" count = countWordOccurrences(sentence, word) print(count)"},{"prompt":"Write a short python script to get the average of numbers stored in the list. [1, 2, 3, 4, 5]","completion":"# Compute the average of the numbers numbers = [1, 2, 3, 4, 5] total = 0 for number in numbers: total += number # Divide the total by the number of elements in the list average = total / len(numbers) # Print the average print(average)"},{"prompt":"Code a Python class for evaluating a decision tree model.","completion":"class DecisionTreeEvaluator(): \\"\\"\\" Decision Tree model evaluation implementation. \\"\\"\\" def __init__(self): self.model = model def evaluate(self, X_test, y_test): \\"\\"\\" Evaluates the given decision tree model on the given test data. Parameters ---------- X_test : array-like, shape = [n_samples, n_features] Test samples. y_test : array-like, shape = [n_samples] True labels for X_test. Returns ------- accuracy : float The accuracy of the decision tree model. \\"\\"\\" y_pred = self.model.predict(X_test) accuracy = accuracy_score(y_test, y_pred) return accuracy"},{"prompt":"Write Python code to join two tables using a left join. Table A id name 1 AAA 2 BBB 3 CCC Table B id age 1 20 2 30 5 50","completion":"SELECT a.id, a.name, b.age FROM TableA a LEFT JOIN TableB b ON a.id = b.id;"},{"prompt":"Create a Python script to count and delete the duplicates from a given array of numbers.","completion":"def count_delete_duplicates(arr): seen = set() unique = [] count = 0 for x in arr: if x not in seen: seen.add(x) unique.append(x) else: count += 1 return count, unique"},{"prompt":"eate a Python function to repopulate a missing array element based on its neighbours. arr = [10, 20, null, 40]","completion":"def repopulate_missing(arr): # Iterate the array for i in range(len(arr)): #Check if element is None if arr[i] is None: # Get neighbouring elements before = arr[i - 1] if i > 0 else 0 after = arr[i + 1] if i < len(arr) - 1 else 0 # Repopulate the element arr[i] = (before + after) // 2 return arr"},{"prompt":"Generate a Python program that takes in two lists and returns the intersection of the two. list1=[1,2,3] list2=[2,3,4]","completion":"def get_intersection(list1, list2): intersection = [] for element in list1: if element in list2: intersection.append(element) return intersection"},{"prompt":"Categorize each code snippet into the appropriate programming language. Code snippet 1: def add(a, b): return a + b Code Snippet 2: int add (int a, int b) { return a + b; }","completion":"Code snippet 1: Python Code snippet 2: C/C++"},{"prompt":"Create a program in Python that stores a grocery list and is able to display it, add items, and delete items. Not applicable","completion":"grocery_list = [] def display_list(list): print('nGrocery List:') for item in list: print(item) def add_item(list): item = input(\\"What would you like to add? \\") list.append(item) print('{} was added to the grocery list.'.format(item)) def delete_item(list): item = input(\\"What would you like to delete? \\") try: list.remove(item) print('{} was removed from the grocery list.'.format(item)) except: print(\\"{} was not in the grocery list.\\".format(item)) while True: action = input(\\"What would you like to do? [display/add/delete]\\") if action == \\"display\\": display_list(grocery_list) elif action == \\"add\\": add_item(grocery_list) elif action == \\"delete\\": delete_item(grocery_list) else: print(\\"I didn't understand what you mean.\\")"},{"prompt":"Create a Python script that takes in an array with numbers and returns an array with all the even numbers in the original array. [1, 2, 3, 4, 5, 6, 7, 8]","completion":"def even_numbers(numbers): # Initialize an empty array to store the even numbers even_numbers_array = [] # Iterate through the numbers array for number in numbers: # Check if the number is even if number % 2 == 0: # If the number is even, add it to the even_numbers_array even_numbers_array.append(number) # Return the even_numbers_array return even_numbers_array # Test it numbers = [1, 2, 3, 4, 5, 6, 7, 8] print(even_numbers(numbers)) # Should return [2, 4, 6, 8]"},{"prompt":"Create an API wrapper in Python for the following API https://example.com/api/users/list","completion":"import requests # API wrapper for the given API def api_wrapper(url): # get the API response response = requests.get(url) # check the response status if(response.status_code == 200): # return json data return response.json() else: return None"},{"prompt":"Generate a python program to alphabetically sort the following list. [Paul, John, George, Ringo]","completion":"my_list = [\\"Paul\\", \\"John\\", \\"George\\", \\"Ringo\\"] my_list.sort() print(my_list)"},{"prompt":"Generate a Python script that stores the numbers 0 to 10 in an array.","completion":"# creating an empty array array = [] # loop for iterating over for i in range(11): array.append(i) # print the array print(array)"},{"prompt":"Create a Python class to store the properties and methods for a calculator.","completion":"class Calculator(): def __init__(self): self.current_sum = 0 def add(self, value): self.current_sum = self.current_sum + value def subtract(self, value): self.current_sum = self.current_sum - value def get_total(self): return self.current_sum"},{"prompt":"Create a Python script to display a table of values given a range of x and y coordinates. x range: 0 to 50 y range: 0 to 10","completion":"import pandas as pd import numpy as np x = np.arange(0, 50, 1) y = np.arange(0, 10, 1) xytable = [] for xi in x: for yi in y: xytable.append([xi, yi, xi*yi]) table = pd.DataFrame(xytable, columns=['X', 'Y', 'Product']) print(table)"},{"prompt":"Write a Python program to find the maximum of two numbers provided by the user. x = 5; y = 8;","completion":"x = int(input(\\"Enter the first number: \\")) y = int(input(\\"Enter the second number: \\")) maximum = x if x > y else y print(\\"The maximum of two numbers is\\", maximum)"},{"prompt":"Build a web scraper using Python using the requests and BeautifulSoup libraries to scrape a given website for all of the titles on the company’s homepage. website：https://www.example.com","completion":"import requests from bs4 import BeautifulSoup # Make a GET request to fetch the raw HTML content html_content = requests.get('https://www.example.com/').text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Print all titles titles = soup.find_all('title') for title in titles: print(title.text)"},{"prompt":"Develop a Python program that takes a dataframe containing student names and scores and creates a new column with the student's grade based on their scores. Name Score John 90 Mary 80 Chris 95","completion":"import pandas as pd # create a dataframe df = pd.DataFrame({ 'Name': ['John', 'Mary', 'Chris'], 'Score': [90, 80, 95], }) # function to calculate the grade def calculate_grade(score): if score >= 90: return 'A' elif score >= 80: return 'B' else: return 'C' # apply the function to the dataframe df['Grade'] = df['Score'].apply(calculate_grade) print(df)"},{"prompt":"Create a basic chatbot in Python that can converse using a predefined set of rules Not applicable","completion":"import re class Chatbot: def __init__(self): # Initialize the list of predefined responses self.responses = { 'hello': 'Hi there!', 'how are you?': 'I am doing well. How about you?', 'goodbye': 'Goodbye, have a nice day!' } def respond(self, input): # Extract the intent from the input intent = self.extract_intent(input) # Check if the intent is in the predefined responses response = self.responses.get(intent, None) # Return the response if there is a match, otherwise return None return response def extract_intent(self, input): # Match the input using regular expressions match_intent = re.match('[A-Za-z]+', input) # Extract the intent if there is a match, otherwise return None if match_intent: return match_intent.group() else: return None"},{"prompt":"Train a machine learning model in Python that can predict the price of a stock based on historical prices. Not applicable","completion":"# Import libraries import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression # Get the data data_frame = pd.read_csv('stock_prices.csv') # Split the data into features and labels X = data_frame['historical_price'].values.reshape(-1,1) y = data_frame['price'].values # Train the model regressor = LinearRegression().fit(X, y) # Predict the price pred_y = regressor.predict(X) # Plot the predictions plt.xlabel(\\"Historical Price\\") plt.ylabel(\\"Actual and Predicted Price\\") plt.plot(X, y, 'g--', label='Actual Price', linewidth=5) plt.plot(X, pred_y, 'r-', label='Predicted Price', linewidth=4) plt.legend() plt.show()"},{"prompt":"Create a python script to concatenate two given strings. string1 = Hello string2 = World!","completion":"def concatenateStrings(string1, string2): return string1 + string2"},{"prompt":"Write a Python program to classify a given set of integers depending on the parity of the remainder when they are divided by 2. [1, 8, 4, 120]","completion":"def classifyIntegersByOddEven(arr): evens = [] odds = [] for num in arr: if num % 2 == 0: evens.append(num) else: odds.append(num) return evens, odds evens, odds = classifyIntegersByOddEven([1, 8, 4, 120]) print('Evens: ', evens) print('Odds: ', odds)"},{"prompt":"Write a Python program to convert a unix timestamp to UTC time. 1594842400","completion":"import time timestamp = 1594842400 utc_time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(timestamp)) print(utc_time) # Output: 2020-07-17 02:00:00"},{"prompt":"Create a function in Python to group data by a column and apply aggregate functions on each group. df = pd.DataFrame({A: [foo, foo, foo, foo, foo,bar, bar, bar, bar], B: [one, one, one, two, two,one, one, two, two], C: [1, 2, 3, 4, 5, 6, 7, 8, 9], D: [2, 3, 4, 5, 6, 7, 6, 8, 9]})","completion":"group_by_column = df.groupby(\\"B\\").agg({'C': 'sum', 'D': 'mean'})"},{"prompt":"Python, find the index of a character in a given string. string = Hello World character = 'l'","completion":"string = \\"Hello World\\" character = 'l' index = string.index(character) print(index)"},{"prompt":"Offer a suggestion for increasing the performance of the following Python Script def function(arg): for i in range(len(arg)): print(i)","completion":"def function(arg): for i in arg: print(i)"},{"prompt":"Create a python code snippet to count the frequencies of words in a given string string = This is a test string","completion":"def countFrequencies(string): words = string.split() freq_dict = {} for word in words: if word not in freq_dict: freq_dict[word] = 1 else: freq_dict[word] += 1 return freq_dict # example result = countFrequencies(\\"This is a test string\\")"},{"prompt":"Develop a Python code which can search for a name in a list and return the position of the name in the list. [John, Richard, Paul, Ringo]","completion":"def search(name_list, name): for i in range(len(name_list)): if name_list[i] == name: return i return -1"},{"prompt":"Generate a Python program that identifies all the words with more than five characters in a given list. words = [red, green, blue, yellow, orange]","completion":"def more_than_five_characters(words): result = [] for word in words: if len(word) > 5: result.append(word) return result words = [\\"red\\", \\"green\\", \\"blue\\", \\"yellow\\", \\"orange\\"] print(more_than_five_characters(words))"},{"prompt":"Create a Matrix of size 3X3 filled with random numbers in Python","completion":"import numpy as np matrix = np.random.rand(3,3) print(matrix) # Output [[0.88549813 0.66875685 0.3422321 ] [0.26914325 0.86840147 0.14631629] [0.97593031 0.79918964 0.28827702]]"},{"prompt":"Write a Python function to create a list containing the squares of numbers up to n.","completion":"def squares(n): return [x*x for x in range(1,n+1)] print(squares(10))"},{"prompt":"Develop an automated selfcheckout system in Python. A list of items to be purchased, along with their price","completion":"#Define item list items = [('apple', 1.59),('banana', 0.99),('bread', 3.02),('soup', 1.79)] #Initialize total amount total_amount = 0 #Loop through each item and add its price to the total for item in items: total_amount += item[1] print(item[0] + ' added to total amount.') #Add tax to the total tax_rate = 0.055 total_amount += (tax_rate * total_amount) #Print the final total print('Total amount due: ' + str(total_amount))"},{"prompt":"Write a Python program to find the maximum of a given array. arr = [10, 9, 11, 12, 5]","completion":"def find_max(arr): max = arr[0] for i in arr: if i > max: max = i return max # Driver Code arr = [10, 9, 11, 12, 5] maximum = find_max(arr) print(\\"Maximum element is:\\", maximum)"},{"prompt":"Create a Python program that fetches the user's current time and sets a reminder after 30 minutes.","completion":"import time def set_reminder_in_minutes(minutes): \\"\\"\\" Fetches the user's current time and sets a reminder after the given minutes \\"\\"\\" current_time = time.time() reminder_time = current_time + minutes * 60 # Set the reminder # ... if __name__ == \\"__main__\\": set_reminder_in_minutes(30)"},{"prompt":"Generate a Python algorithm to find the two elements that are closet to each other in a given array. [3, 5, 8, 7, 1, 12]","completion":"import sys def find_closest_pair(arr): # Variables min_distance = sys.maxsize closest_pair = [-1, -1] # Iterate through the array for i in range(len(arr)): # Get second number for j in range(i + 1, len(arr)): # Calculate the distance between the two values distance = abs(arr[i] - arr[j]) # Check if it is the minimum distance if distance < min_distance: min_distance = distance closest_pair[0] = arr[i] closest_pair[1] = arr[j] return closest_pair # example arr = [3, 5, 8, 7, 1, 12] closest_pair = find_closest_pair(arr) print('Closest pair:', closest_pair) # Output is [1, 3]"},{"prompt":"Write a Python function that takes in two lists and returns a new list containing the elements of both input lists. list_a = [1,2,3] list_b = [4,5,6]","completion":"def merge_lists(list_a, list_b): \\"\\"\\" Function to merge two lists Input: list_a: list of integers list_b: list of integers Output: new_list: list of integers \\"\\"\\" new_list = [] for a in list_a: new_list.append(a) for b in list_b: new_list.append(b) return new_list list_a = [1,2,3] list_b = [4,5,6] merged_list = merge_lists(list_a, list_b) print(merged_list) # Output: # [1, 2, 3, 4, 5, 6]"},{"prompt":"Create a function in Python to concatenate two strings and return the concatenated string.","completion":"def concatenate_strings(str1, str2): return str1 + str2"},{"prompt":"Sort a python dictionary by value. d = {1: 'a', 3: 'b', 2: 'c'}","completion":"def sort_dict_by_value(d): # Convert the dictionary into a list of tuples d_list = [(key, value) for key, value in d.items()] # Sort the list by the second element of the tuple sorted_d = sorted(d_list, key=lambda x: x[1]) # Convert the list of tuples back into a dictionary sorted_dict = dict(sorted_d) return sorted_dict if __name__ == \\"__main__\\": d = {1: 'a', 3: 'b', 2: 'c'} print(sort_dict_by_value(d))"},{"prompt":"Write an algorithm in Python to find the number of inversions in an array.","completion":"def countInversions(arr): # To store counts of inversions count = 0 # Iterating from first element for i in range(len(arr)): # To find number of elements smaller than arr[i] # which are on right side of arr[i] for j in range(i + 1, len(arr)): if arr[i] > arr[j]: count += 1 return count"},{"prompt":"Write a Python program that takes a URL and downloads the HTML page as a string. url = https://www.example.com","completion":"import requests def get_html_page(url): response = requests.get(url) return response.text"},{"prompt":"Create a genetic algorithm in Python to optimize parameters for a Simulated Annealing algorithm.","completion":"\\"\\"\\" Creating a Genetic Algorithm Using Python to Optimize Parameters of a Simulated Annealing Algorithm \\"\\"\\" import numpy as np import random # Define the parameters to be optimized params = [10, 20, 30, 40, 50] # Define the objective function def objective_function(parameters): x = parameters[0] y = parameters[1] z = parameters[2] w = parameters[3] p = parameters[4] return x*y + x*z - y*z + w*p # Define the fitness function def fitness_function(parameters): return objective_function(parameters) # Define the simulated annealing algorithm def simulated_annealing(init_params): # Initialize parameters current_params = init_params current_fitness = fitness_function(init_params) best_params = current_params.copy() best_fitness = current_fitness # Step 1: Calculate the temperature temperature = 1 # Step 2: Set the number of iterations iterations = 1000 # Step 3: Main loop while temperature > 0 and iterations > 0: # Select a candidate solution candidate_solution = np.random.randint(-10, 10, size=len(init_params)) candidate_params = current_params + candidate_solution # Calculate the fitness of the candidate solution candidate_fitness = fitness_function(candidate_params) # Calculate the probability of acceptance probability_of_acceptance = np.exp(-abs(candidate_fitness - current_fitness) / temperature) # Select whether we accept or reject the candidate solution if random.uniform(0,1) <= probability_of_acceptance: current_params = candidate_params current_fitness = candidate_fitness print('Accepted new solution with fitness value: ', candidate_fitness) # Update the best solution if current_fitness > best_fitness: best_fitness = current_fitness best_params = current_params.copy() # Update the temperature temperature -= .001 # Decrease the number of iterations iterations -= 1 # Return the best solution return best_params # Initialize parameters init_params = np.random.randint(-10, 10, size=len(params)) # Run the genetic algorithm best_params = simulated_annealing(init_params) # Print the best solution print('The optimized parameters are: ', best_params)"},{"prompt":"Complete the following web scraper using Python to scrape the text from this paragraph. Paragraph: “Software engineering is the application of engineering to the design, development, implementation, testing, and maintenance of software in a systematic method.”","completion":"import requests from bs4 import BeautifulSoup # Make a GET request to fetch the raw HTML content html_content = requests.get('https://en.wikipedia.org/wiki/Software_engineering') # Parse the html content soup = BeautifulSoup(html_content.text, \\"lxml\\") # Fetch the specific content paragraph = soup.find_all('p')[1].text # Scrap the text from the paragraph text = paragraph.split('.')[0].split(' ') text = ' '.join(text) print(text) # Output: Software engineering is the application of engineering to the design, development, implementation, testing, and maintenance of software in a systematic method"},{"prompt":"Optimize the given Python program and reduce its time complexity. def find_duplicates(arr): duplicates = [] for index, value in enumerate(arr): if value in arr[index + 1:]: duplicates.append(value) return duplicate","completion":"def find_duplicates(arr): seen = set() duplicates = [] for value in arr: if value in seen: duplicates.append(value) else: seen.add(value) return duplicates"},{"prompt":"Write a Python program to measure the similarity between two strings using Jaccard index. String1: Apple String2: Orange","completion":"def jaccard_index(str1, str2): set1 = set(str1.split()) set2 = set(str2.split()) return float(len(set1 & set2)) / len(set1 | set2) str1 = input(\\"String1: \\") str2 = input(\\"String2: \\") print(\\"Jaccard Index: \\", jaccard_index(str1, str2))"},{"prompt":"You are given a Python program that prints random numbers. Improve the program to print a random number between 0 and 10. import random for i in range(5): print(random.randint(0, 50))","completion":"import random for i in range(5): print(random.randint(0, 10))"},{"prompt":"Optimize a Python function to calculate the square of a number for maximum performance. Not applicable","completion":"def square(x): return x * x # Using the exponentiation operator def square_op(x): return x ** 2 # Using bit-shift operator def square_shift(x): return x << 1 # Using multiplication def square_mul(x): return (x + x) * x # Using pow() built-in def square_builtin(x): return pow(x, 2)"},{"prompt":"Given a stream of data, write a Python program to classify the data into two categories.","completion":"def classify(data): # Initialize categories categories = [0, 1] threshold = 0.5 # Make predictions using a classifier predictions = classifier.predict(data) # Classify the data based on the predictions classified_data = [categories[int(pred > threshold)] for pred in predictions] return classified_data"},{"prompt":"Design an algorithm in Python to generate the Fibonacci series until n.","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input Given\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"prompt":"Generate a Python program that implements the KMeans algorithm for clustering. Input: Points = [{x: 6, y: 7}, {x: 5, y: 4}, {x: 8, y: 2}, {x: 9, y: 3}, {x: 3, y: 5}, ] K = 2","completion":"from math import sqrt def euclidean_distance(p1, p2): '''Calculates the euclidean distance between two points''' x_sq = (p1[0] - p2[0]) ** 2 y_sq = (p1[1] - p2[1]) ** 2 return sqrt(x_sq + y_sq) def assign_cluster(points, centroids): '''Assign points to clusters and return the assigned clusters''' clusters = [] for point in points: distances = [euclidean_distance(point, centroid) for centroid in centroids] min_dist_index = distances.index(min(distances)) clusters.append(min_dist_index) return clusters def calculate_centroid(points, clusters): '''Calculate the new centroids for each cluster''' num_clusters = len(set(clusters)) new_centroids = [] for i in range(num_clusters): x_sum, y_sum = 0, 0 cluster_points = [points[j] for j, cl in enumerate(clusters) if cl == i] for point in cluster_points: x_sum += point[0] y_sum += point[1] new_centroid = (x_sum / len(cluster_points), y_sum / len(cluster_points)) new_centroids.append(new_centroid) return new_centroids def k_means_clustering(points, k): \\"\\"\\"Perform the K-means clustering algorithm\\"\\"\\" # Initialize the centroids by randomly selecting points from the data set centroids = [points[i] for i in range(k)] # Iterate until the clusters converge while True: clusters = assign_cluster(points, centroids) # If the clusters do not change, the algorithm has converged if clusters == assign_cluster(points, centroids): break # Calculate the new centroids centroids = calculate_centroid(points, clusters) return clusters # Test the algorithm points = [{x: 6, y: 7}, {x: 5, y: 4}, {x: 8, y: 2}, {x: 9, y: 3}, {x: 3, y: 5}, ] cluster_assignments = k_means_clustering(points, k=2)"},{"prompt":"Create a function in Python that takes a list as an input and returns a list containing the same elements, but with all duplicates removed. list = [1, 2, 3, 1, 4, 2, 5]","completion":"def remove_duplicates(list): result = [] for element in list: if element not in result: result.append(element) return result print(remove_duplicates(list)) # Will return [1, 2, 3, 4, 5]"},{"prompt":"Build a list comprehension in Python to print numbers divisible by 3 and not divisible by 7 in the range of 30 to 50 Range: 30 to 50","completion":"divisible_by_3_or_7 = [n for n in range(30,51) if n % 3 == 0 and n % 7 != 0] print(divisible_by_3_or_7) # output: [30, 33, 36, 39, 42, 45, 48]"},{"prompt":"Create a Python dictionary comprehension to remove all odd numbers from the provided list. [1, 2, 3, 4, 5]","completion":"even_dict = {k: v for k, v in enumerate([1, 2, 3, 4, 5]) if v % 2 == 0}"},{"prompt":"Create a Kivy Python application that displays a 30x30 board with a randomly generated maze. Not applicable","completion":"import kivy kivy.require('1.9.0') from kivy.app import App from kivy.uix.widget import Widget from kivy.uix.button import Button from kivy.uix.gridlayout import GridLayout from random import randint # Create a 30x30 board class Grid(GridLayout): def __init__(self, **kwargs): super().__init__(**kwargs) self.cols = 30 self.rows = 30 self.buttonList = self.makeMaze() # Randomly generate maze def makeMaze(self): buttonList = [] for row in range(30): for col in range(30): # randomly create walls value = randint(0, 1) # create a button btn = Button(text=str(value)) # add button to the list buttonList.append(btn) # add button to the grid self.add_widget(btn) # return the list return buttonList # Main class class MazeApp(App): def build(self): return Grid() # Run the application if __name__== '__main__': MazeApp().run()"},{"prompt":"Design a Python script that converts Miles/hour to Kilometers/hour. Speed in Miles/hour: 60","completion":"def mph_to_kph(speed): kph = speed * 1.609 return kph"},{"prompt":"Create a class in Python for a game character with attributes for health, strength, and defense. Not applicable","completion":"class GameCharacter: def __init__(self, health, strength, defense): self.health = health self.strength = strength self.defense = defense def take_damage(self, damage): self.health -= damage def get_status(self): return f'Health: {self.health}, Strength: {self.strength}, Defense: {self.defense}'"},{"prompt":"Write a Python program to format a given date from one format to another. start_date = 352020 end_date = 552020","completion":"from datetime import date def format_date(date_str, start_format, end_format): date_obj = date.strptime(date_str, start_format) return date_obj.strftime(end_format)"},{"prompt":"Edit the following Python code to include a try/except block to catch any ValueError errors that occur. def check_input(val): if type(val) != str: return False else: return True","completion":"def check_input(val): try: if type(val) != str: return False else: return True except ValueError: print('Input is not a string!')"},{"prompt":"Create a gRPC server in Python that implements a HelloWorld API with a single method 'GreetUser'. The method should take in a user name as an argument and return a Hello UserName response. Not applicable","completion":"import grpc import hello_world_pb2 import hello_world_pb2_grpc class HelloWorldServicer(hello_world_pb2_grpc.HelloWorldServicer): def GreetUser(self, request, context): return hello_world_pb2.GreetUserResponse(message=f'Hello {request.name}') server = grpc.server(futures.ThreadPoolExecutor(max_workers=10)) hello_world_pb2_grpc.add_HelloWorldServicer_to_server(HelloWorldServicer(), server) server.add_insecure_port('[::]:50051') server.start()"},{"prompt":"What if these letters are all scrambled? Can you write a Python program to permute them all? letters = [a, b, c, d]","completion":"def permute_letters(letters): if len(letters) == 0: return [] if len(letters) == 1: return [letters] permuted_letters = [] for letter in letters: remaining_letters = [letter2 for letter2 in letters if letter2 != letter] permutations = permute_letters(remaining_letters) for permutation in permutations: permuted_letters.append([letter] + permutation) return permuted_letters"},{"prompt":"edit an existing Python program so that it prints Hello, World! print('Goodbye, World!')","completion":"print('Hello, World!')"},{"prompt":"Create a Python program to calculate a Fibonacci sequence up to a given number. The program should be capable of handling large numbers, so the last number should not exceed the limit of the data types used (int, long, or float). 100","completion":"def fibonacci_sequence(n): # Initialize first two values of the sequence a, b = 0, 1 # Calculate values until the desired sequence length while a < n: # Print the current value print(a) # Calculate new values a, b = b, a+b # Execute the function fibonacci_sequence(100)"},{"prompt":"Create a web server in Java that implements a basic search feature. The server should accept a query parameter and return a JSON response with the list of results matching the query. Query Parameter: programming","completion":"// Imports here public class SearchServer { public static void main(String[] args) throws IOException { // Server initialization here HttpServer server = HttpServer.create(new InetSocketAddress(8000), 0); server.createContext(\\"/search\\", exchange -> { String query = exchange.getRequestURI().getQuery(); // Search logic here List<String> results = getResultsMatchingQuery(query); String resp = new Gson().toJson(results); exchange.sendResponseHeaders(200, resp.length()); exchange.getResponseBody().write(resp.getBytes()); exchange.close(); }); server.start(); } private static List<String> getResultsMatchingQuery(String query) { // Search logic here List<String> results = new ArrayList<>(); if (query.equals(\\"programming\\")) { results.add(\\"Java programming\\"); results.add(\\"Python programming\\"); results.add(\\"C++ programming\\"); } return results; } }"},{"prompt":"Create a sorting algorithm in Python to organize a given array of numbers. Array of numbers: [3, 5, 4, 1, 6]","completion":"def bubbleSort(nums): for i in range(len(nums)-1): for j in range(0, len(nums)-i-1): if nums[j] > nums[j+1] : nums[j], nums[j+1] = nums[j+1], nums[j] return nums arr = [3, 5, 4, 1, 6] print (bubbleSort(arr))"},{"prompt":"Generate a program in Python that takes two sorted lists as input and merges them list1 = [2, 5, 7] list2 = [3, 4, 6]","completion":"def merge_sorted_lists(list1, list2): merged_list = [] while len(list1) > 0 and len(list2) > 0: if list1[0] < list2[0]: merged_list.append(list1[0]) list1.pop(0) else: merged_list.append(list2[0]) list2.pop(0) if len(list1) > 0: merged_list += list1 else: merged_list += list2 return merged_list merged_list = merge_sorted_lists(list1, list2) print(merged_list)"},{"prompt":"Create a class called Player in Python, which contains a name, health, and gold attributes.","completion":"class Player: def __init__(self, name, health, gold): self.name = name self.health = health self.gold = gold"},{"prompt":"Write a Python program that parses HTML and prints the content of each element on separate lines. <html> <body> <h1>Hello World!</h1> <div> <p>This is a paragraph.</p> <ul> <li>Item 1</li> <li>Item 2</li> </ul> </div> </body> </html>","completion":"from bs4 import BeautifulSoup html_doc = \\"\\"\\" <html> <body> <h1>Hello World!</h1> <div> <p>This is a paragraph.</p> <ul> <li>Item 1</li> <li>Item 2</li> </ul> </div> </body> </html> \\"\\"\\" soup = BeautifulSoup(html_doc, 'html.parser') for elem in soup.find_all(): print(elem.text) # Output: # Hello World! # This is a paragraph. # Item 1 # Item 2"},{"prompt":"Construct a program in Python that implements Binary Search to find a number in an array. arr = [2, 3, 4, 10, 40]","completion":"# Function to perform binary search in an array def binarySearch(arr, x): low = 0 high = len(arr) - 1 while low <= high: mid = (high + low) // 2 # Check if x is present at mid if arr[mid] < x: low = mid + 1 # If x is greater, ignore left half elif arr[mid] > x: high = mid - 1 # If x is smaller, ignore right half else: return mid # If we reach here, then the element was not present return -1 # Driver Code arr = [2, 3, 4, 10, 40] x = 10 # Function call result = binarySearch(arr, x) if result != -1: print (\\"Element is present at index\\", str(result)) else: print (\\"Element is not present in array\\")"},{"prompt":"Develop a Python script to find the optimal number of clusters for a given dataset.","completion":"import numpy as np import matplotlib.pyplot as plt def optimal_k(X): distortions = [] inertias = [] mapping1 = {} mapping2 = {} K = range(1,10) for k in K: #Building and fitting the model kmeanModel = KMeans(n_clusters=k).fit(X) kmeanModel.fit(X) distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_, 'euclidean'),axis=1)) / X.shape[0]) inertias.append(kmeanModel.inertia_) #Visualize plt.plot(K, distortions, 'bx-') plt.xlabel('Values of K') plt.ylabel('Distortion') plt.title('The Elbow Method using Distortion') plt.show() plt.plot(K, inertias, 'bx-') plt.xlabel('Values of K') plt.ylabel('Inertia') plt.title('The Elbow Method using Inertia') plt.show() optimal_k(X)"},{"prompt":"Given a string, write a python program to count the number of words in the string. This is a test string","completion":"def count_words(string): words = string.split(\\" \\") num_words = len(words) return num_words result = count_words(\\"This is a test string\\") print(\\"Number of words:\\", result)"},{"prompt":"Use Python to optimize a function f(x, y) so that it attains its maximum for any given set of x and y. f(x,y) = 3x^2 + 2xy + 5y^2","completion":"from scipy.optimize import fmin def f(x, y): return 3*x**2 + 2*x*y + 5*y**2 x, y = fmin(f, 0, 0) print(f'The maximum of f(x,y) is {f(x, y)} at (x, y) = ({x:0.5f}, {y:0.5f})')"},{"prompt":"Edit the given Python program to return the absolute value of a given number def absolute_value(x): if x < 0: return x","completion":"def absolute_value(x): if x < 0: return -x else: return x"},{"prompt":"Write a python program to round a float value to the next decimal place.","completion":"def round_up(value): \\"\\"\\"Rounds up a number to the next decimal.\\"\\"\\" return int(value * 10) / 10"},{"prompt":"Create an algorithm in Python to convert a string to upper and lower case letters alternately.","completion":"def alternatingCase(s): result = \\"\\" for i in range(len(s)): if i % 2 == 0: result = result + s[i].upper() else: result = result + s[i].lower() return result s = \\"Hello World\\" print(alternatingCase(s))"},{"prompt":"Write a python script that displays the greatest common divisor (GCD) of two positive integers? 12, 24","completion":"def gcd(a, b): if a == 0 : return b return gcd(b % a, a) a = 12 b = 24 gcd = gcd(a, b) print(gcd)"},{"prompt":"Edit the following python code such that it can take a list of elements and return the distinct elements in the list def unique_elements(lst): elements = [] for num in lst: if num not in elements: elements.append(num) return eleme","completion":"def unique_elements(lst): elements = [] for num in lst: if num not in elements: elements.append(num) return list(set(elements))"},{"prompt":"Create a Python script that calculates the area of a triangle by taking the base and height as user input. base = 10, height = 14","completion":"base = float(input('Enter the base:')) height = float(input('Enter the height:')) def areaOfTriangle(base, height): return 0.5 * base * height print(areaOfTriangle(base, height))"},{"prompt":"Create a Python program that counts the occurrence of a specific character in a list ['a', 'b', 'c', 'd', 'e', 'f', 'g'], 'f'","completion":"def count_char(my_list, char): count = 0 for i in my_list: if i == char: count += 1 return count"},{"prompt":"Create an optimization algorithm in Python for maximizing the profit from a given list of items. The algorithm should take an array of objects with price and profit as properties and return a list of items that result in the maximum profit. List of items: [ {price: 10, profit: 20}, {price: 4, profit: 10}, {price: 3, profit: 5} ]","completion":"def max_profit_items(items): max_profit = 0 max_index = -1 for i in range(len(items)): curr_price = items[i]['price'] curr_profit = items[i]['profit'] if curr_price * curr_profit > max_profit: max_profit = curr_price * curr_profit max_index = i return max_index list_of_items = [ {'price': 10, 'profit': 20}, {'price': 4, 'profit': 10}, {'price': 3, 'profit': 5} ] max_index = max_profit_items(list_of_items) print(\\"The item at index \\" + str(max_index) + \\" has the maximum profit.\\")"},{"prompt":"Create a function in Python that takes in a list of integers and prints out the largest multiple of 3. List: [3, 15, 4, 6, 5]","completion":"def largestMultipleOf3(list): list.sort() running_sum = 0 for i in range(len(list)): running_sum += list[i] if running_sum % 3 == 0: return running_sum return largestMultipleOf3(list[:-1]) list = [3, 15, 4, 6, 5] print(largestMultipleOf3(list)) // 15"},{"prompt":"Write a Python program to find all possible subsets of a given set. s = {1,2,3}","completion":"def find_subsets(s): subsets = [] for i in range(len(s)+1): for subset in itertools.combinations(s, i): subsets.append(subset) return subsets s = {1,2,3} result = find_subsets(s) print(result)"},{"prompt":"Parse Python documentation files and store the information in a MongoDB database. The code reads the documentation files from the directory ../raw_data/python3/docs.python.org, parses them using BeautifulSoup, and stores the information in the python3 database in a reference collection and an index collection. The reference collection stores the information for each reference item, and the index collection stores the information for each subitem of each reference item, with a relevance score based on the position of the subitem in the name of the reference item. The code also includes several functions to check the correctness of the parsing, such as checking that certain reference items and subitems are present and have the correct information.","completion":"#!/usr/bin/python3 from pymongo import MongoClient import os import os.path import re import bs4 import itertools from bs4 import BeautifulSoup import utils class ReferenceItem: def __init__(self): self.name = \\"\\" self.module = \\"\\" self.usage = \\"\\" self.short = \\"\\" self.full = \\"\\" self.fullest = \\"\\" self.href = \\"\\" self.copyright = \\"\\" self.subitems = [] def __str__(self): return (\\"name: \\" + self.name + \\"n\\" + \\"href: \\" + self.href + \\"n\\" + \\"module: \\" + str(self.module) + \\"n\\" + \\"usage: \\" + str(self.usage) + \\"n\\" + \\"short: \\" + self.short + \\"nn\\" #+ \\"full: \\" + self.full + \\"nn\\" #+ \\"fullest: \\" + self.fullest + \\"nn\\" + \\"subitems: \\" + str(self.subitems) + \\"copyright: \\" + self.copyright) def to_dict(self): return {\\"name\\" : self.name, \\"href\\": self.href, \\"module\\" : self.module, \\"usage\\" : self.usage, \\"short\\" : self.short, \\"full\\" : self.full, \\"fullest\\" : self.fullest, \\"subitems\\" : self.subitems, \\"copyright\\": self.copyright} def hasclass(tag, classes): for cl in tag.get(\\"class\\", []): if cl in classes: return True return False def create_ref(refs, name, module, base_href): if not name in refs: refs[name] = ReferenceItem() refs[name].name = name if module: refs[name].module = \\"import \\" + module refs[name].href = base_href + \\"#\\" + name refs[name].copyright = \\"ⓒ Python developers, \\" + refs[name].href parent = \\".\\".join(name.split(\\".\\")[:-1]) if parent != \\"\\" and parent[0] == \\"@\\": parent = parent[1:] if not parent in refs: refs[parent] = ReferenceItem() subitem = (name, \\"\\") if not subitem in refs[parent].subitems: refs[parent].subitems.append(subitem) def can_be_short(text): #print(\\"Testing string \`\\" + text + \\"\`\\") if re.match(\\"New in version\\", text): return False if re.match(\\"Source code:\\", text): return False return True def next_tag(tag): while not tag.next_sibling and tag.parent: tag = tag.parent if tag.next_sibling: return tag.next_sibling else: return None def parse_file(filename, refs): base_href = \\"https://docs.python.org/\\" + filename[2:] soup = BeautifulSoup(open(filename), 'lxml') module_a = soup.h1.a if not \\"headerlink\\" in module_a.get(\\"class\\"): module = module_a.string else: module = None #print(\\"found module\\", module) currentName = module if currentName: create_ref(refs, currentName, module, base_href) tag = soup.h1.next_sibling while tag is not None: #print(\\"Tag: \`\\", tag, \\"\`\\") if isinstance(tag, bs4.element.Comment): tag = tag.next_element continue if isinstance(tag, bs4.element.NavigableString): text = tag.strip() if text != \\"\\" and currentName: if refs[currentName].short == \\"\\": if can_be_short(text): refs[currentName].short = text refs[currentName].full += text tag = tag.next_element continue #if currentName: # print(currentName, tag.name, \\"\`\\"+refs[currentName].full+\\"\`\\", \\"nn\\") if hasclass(tag, [\\"sphinxsidebar\\"]): break elif hasclass(tag, [\\"section\\", \\"seealso\\"]): currentName = None tag = tag.next_element elif hasclass(tag, ['class', 'classmethod', 'method', 'function', 'data', 'exception', 'attribute', 'staticmethod', 'cmdoption']): currentName = tag.dt.get('id') usage = \\"\\".join(tag.dt.strings).strip() if currentName and usage[0] == \\"@\\": currentName = \\"@\\" + currentName if currentName: create_ref(refs, currentName, module, base_href) refs[currentName].usage = usage[:-1].strip() tag = tag.dd.next_element elif tag.name in ('p', 'pre', 'code', 'li', 'dt', 'dd', 'tr', 'td', 'th'): if (tag.name == 'p' and len(tag.contents) == 1 and isinstance(tag.contents[0], bs4.element.Tag) and tag.contents[0].name==\\"strong\\"): currentName = None if currentName: if refs[currentName].short == \\"\\": text = \\"\\".join(tag.strings) if can_be_short(text): refs[currentName].short = \\"\\".join(str(x) for x in tag.contents) refs[currentName].full += str(tag) tag = next_tag(tag) if not tag: break else: tag = tag.next_element return refs def insert_ref(ref, reference, index): result = reference.insert_one(ref.to_dict()) #print(\\"insert: \\", ref.to_dict()) names = [ref.name] for name in names: split_name = name.strip('@ ').split(\\".\\") if len(split_name) > 3: print(split_name,\\" --- \\", ref.name) for i in range(len(split_name)): perm = [x.lower() for x in split_name[i:]] subname = \\" \\".join(sorted(perm)) doc = { \\"reference_id\\" : result.inserted_id, \\"name\\" : subname, \\"relevance\\" : 1-i/len(split_name), \\"full_name\\" : ref.name } #print(\\"index: \\", doc) index.insert_one(doc) def process_file(filename, refs): print(\\"n-----------n\\" + filename) print(\\".\\", end=\\"\\", flush=True) parse_file(filename, refs) def finalize(refs): for ref_name, ref in refs.items(): if ref.name == \\"\\": ref.name = ref_name new_subitems = [] for item in ref.subitems: new_subitems.append((item[0], utils.first_sentence(refs[item[0]].short))) ref.subitems = new_subitems os.chdir(\\"../raw_data/python3/docs.python.org\\") client = MongoClient() client.drop_database(\\"python3\\") db = client.python3 reference = db.reference index = db.index index.create_index(\\"name\\") refs = {} for directory, subdirs, files in os.walk(\\".\\"): for f in files: process_file(os.path.join(directory, f), refs) #process_file(\\"3/library/itertools.html\\", refs) #process_file(\\"3/library/re.html\\", refs) #process_file(\\"3/library/json.html\\", refs) #process_file(\\"3/library/pprint.html\\", refs) #process_file(\\"3/library/unittest.html\\", refs) #process_file(\\"3/library/ctypes.html\\", refs) finalize(refs) #print(refs['datetime.datetime'].subitems) for ref in refs.values(): if ref.name != \\"\\": #print(ref) #print(\\"n\\") insert_ref(ref, reference, index) #------- Testing def assert_starts_with(text, start): if not text.startswith(start): print(\\"Text \`\\" + text + \\"\` does not start with \`\\" + start + \\"\`\\") raise AssertionError() def assert_ends_with(text, start): if not text.endswith(start): print(\\"Text \`\\" + text + \\"\` does not end with \`\\" + start + \\"\`\\") raise AssertionError() def find_subitem(ref, subitem): found = None for item in ref.subitems: if item[0] == subitem: assert not found found = item return found def check_urllib_parse(): assert_starts_with(refs[\\"urllib.parse\\"].short, \\"This module\\") item = find_subitem(refs[\\"urllib\\"], \\"urllib.parse\\") assert_starts_with(item[1], \\"This module\\") assert_ends_with(item[1], \\"“base URL.”\\") def check_unittest_mock(): assert_starts_with(refs[\\"unittest.mock\\"].short, '<a class=\\"reference internal\\"') item = find_subitem(refs[\\"unittest\\"], \\"unittest.mock\\") assert_starts_with(item[1], '<a class=\\"reference internal\\"') def check_urllib(): assert_ends_with(refs[\\"urllib\\"].full, \\"files</li>\\") def check_re(): assert len(refs[\\"re\\"].subitems) > 0 assert \\"re.match\\" in refs assert refs[\\"re\\"].subitems[0][0] == \\"re.compile\\" assert_ends_with(refs[\\"re\\"].subitems[0][1], \\"described below.\\") assert len(refs[\\"re\\"].subitems[0][1].strip()) > 0 def check_unittest(): assert_ends_with(refs[\\"unittest\\"].full, \\"executing the tests.</dd>\\") def check_unittest_skip(): assert \\"@unittest.skip\\" in refs assert find_subitem(refs[\\"unittest\\"], \\"@unittest.skip\\") def check_utcnow(): assert \\"datetime.datetime.utcnow\\" in refs assert find_subitem(refs[\\"datetime.datetime\\"], \\"datetime.datetime.utcnow\\") def check_pprint(): assert \\"pprint.pprint\\" in refs assert_ends_with(refs[\\"pprint.pprint\\"].full, \\"</pre>\\") def check_itertools(): assert_ends_with(refs['itertools'].full, 'vector2))</span></code>.</p>') def check_ctypes(): assert \\"ctypes.Array._length_\\" in refs assert find_subitem(refs[\\"ctypes.Array\\"], \\"ctypes.Array._length_\\") def check_paragraph_signs(): found = False for ref in refs: if \\"¶\\" in refs[ref].full: print(\\"¶ found in \\", ref) found = True assert not found check_paragraph_signs() check_ctypes() check_itertools() check_re() check_pprint() check_utcnow() check_urllib_parse() check_unittest_mock() check_urllib() check_unittest() check_unittest_skip()"},{"prompt":"Can you write a python program to detect whether the given sentence contains a palindrome or not? Sentence: Anna went to vote in the election.","completion":"sentence = \\"Anna went to vote in the election.\\" def is_palindrome(sentence): clean_sentence = sentence.replace(' ', '').lower() reversed_sentence = clean_sentence[::-1] return clean_sentence == reversed_sentence print is_palindrome(sentence)"},{"prompt":"Create a Python program to determine whether a given number is prime or not. Number: 47","completion":"def is_prime(num): if num > 1: for i in range(2,int(num**0.5)+1): if (num % i) == 0: return False else: return False return True num = 47 if (is_prime(num)): print(num,\\"is a prime number\\") else: print(num,\\"is not a prime number\\")"},{"prompt":"Write a Python program to find a pair of elements (from an array) whose sum is an exact number. [2, 4, 6, 9], 8","completion":"def sum_pair(array, target_sum): res_pair = [] # Sort the array array.sort() # Set the left and right pointers l, r = 0, len(array) - 1 while l != r: if array[l] + array[r] == target_sum: res_pair.append((array[l], array[r])) l += 1 r -= 1 # If sum is smaller than target sum, increase left elif array[l] + array[r] < target_sum: l += 1 # If sum is greater than target sum, decrease right else: r -= 1 return res_pair print(sum_pair([2, 4, 6, 9], 8))"},{"prompt":"Design a class in Python to Implement Linked List using Doubly Linked List.","completion":"class Node: def __init__(self, data): self.data = data self.next = None self.prev = None class DoublyLinkedList: def __init__(self): self.head = None def push(self, new_data): new_node = Node(new_data) new_node.next = self.head if self.head is not None: self.head.prev = new_node self.head = new_node def insertAfter(self, prev_node, new_data): if prev_node is None: print \\"the given previous node must inLinked List.\\" return new_node = Node(new_data) new_node.next = prev_node.next prev_node.next = new_node new_node.prev = prev_node if new_node.next is not None: new_node.next.prev = new_node"},{"prompt":"Create a Bloom filter in Python to store a list of common words.","completion":"from pybloom_live import BloomFilter # Common words to store in bloom filter words = [\\"the\\", \\"be\\", \\"and\\", \\"of\\", \\"a\\", \\"in\\", \\"to\\", \\"have\\", \\"to\\", \\"it\\", \\"I\\", \\"that\\", \\"for\\", \\"you\\", \\"he\\", \\"with\\", \\"on\\", \\"do\\", \\"say\\", \\"this\\", \\"they\\", \\"is\\", \\"an\\", \\"at\\", \\"but\\", \\"we\\", \\"his\\", \\"from\\", \\"that\\", \\"not\\", \\"by\\", \\"she\\", \\"or\\", \\"as\\", \\"what\\", \\"go\\", \\"their\\", \\"can\\", \\"who\\", \\"get\\", \\"if\\", \\"would\\", \\"her\\", \\"all\\", \\"my\\", \\"make\\", \\"about\\", \\"know\\"] # Create a bloom filter with a capacity of 100 words and 0.1% error rate bf = BloomFilter(100, 0.1) # Add the words to the bloom filter for word in words: bf.add(word) # Check if some words are in the list or not print(\\"the\\" in bf) print(\\"the \\" in bf) print(\\"hello\\" in bf)"},{"prompt":"Write a Python program for creating a histogram from a given dataset. Dataset contains values from 0 to 10 and their respective count or frequency.","completion":"import matplotlib.pyplot as plt data = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] frequency = [10, 8, 12, 6, 15, 7, 5, 2, 6, 9, 3] plt.hist(data, weights=frequency) plt.title(\\"Histogram\\") plt.xlabel(\\"Values\\") plt.ylabel(\\"Frequency\\") plt.show()"},{"prompt":"Create a Python function that takes a 2D array as an input and returns the sum of all the elements in the array. [[1,2,3],[4,5,6]]","completion":"def array_sum(arr): sum = 0 for i in range(len(arr)): for j in range(len(arr[i])): sum += arr[i][j] return sum array_sum([[1,2,3],[4,5,6]])"},{"prompt":"Given a function to calculate the distance between two points, how would you write a Python program to compute the closest pair of points from a set? Set of 7 points: [ (2.2, 12.5), (8.7, 8.6), (1.1, 10.1), (2.2, 4.2), (7.3, 5.4), (3.4, 2.2), (0.4, 9.1) ]","completion":"def findClosestPoints(points): # initialize the distance closest_distance = float('inf') closest_points = None for i, point1 in enumerate(points): for j, point2 in enumerate(points): if i != j: distance = calculateDistance(points[i], points[j]) if distance < closest_distance: closest_distance = distance closest_points = [points[i], points[j]] return closest_points # calculate the Euclidean distance between two points def calculateDistance(point1, point2): x1, y1 = point1 x2, y2 = point2 return math.sqrt((x2 - x1)**2 + (y2 - y1)**2) if __name__ == '__main__': points = [ (-2.2, 12.5), (-8.7, 8.6), (1.1, 10.1), (2.2, 4.2), (-7.3, 5.4), (-3.4, 2.2), (0.4, 9.1) ] closest_points = findClosestPoints(points) print(\\"Closest points: {}\\".format(closest_points)) Output: Closest points: [(-2.2, 12.5), (-3.4, 2.2)]"},{"prompt":"Create a Python class that represents a bank account and implements basic operations like deposit, withdraw, and transfer.","completion":"class BankAccount: def __init__(self, owner, balance = 0): self.owner = owner self.balance = balance def deposit(self, amount): self.balance += amount print(f'Deposit accepted! Total balance: {self.balance}') def withdraw(self, amount): if self.balance >= amount: self.balance -= amount print(f'Withdrawal accepted! Total balance: {self.balance}') else: print(f'Insufficient funds!') def transfer(self, other, amount): if self.balance >= amount: self.balance -= amount other.balance += amount print(f'Transfer accepted! Total balance: {self.balance}') else: print(f'Insufficient funds!')"},{"prompt":"Create a Python class for a Matrix with overloaded operators for addition and multiplication.","completion":"class Matrix: def __init__(self, matrix): self.matrix = matrix def __add__(self, other): if len(self.matrix) != len(other.matrix): raise ValueError(\\"The matrixes must have the same size!\\") result = [[0 for x in range(len(self.matrix[0]))] for y in range(len(self.matrix))] for i in range(len(self.matrix)): for j in range(len(self.matrix[i])): result[i][j] = self.matrix[i][j] + other.matrix[i][j] return result def __mul__(self, other): if len(self.matrix[0]) != len(other.matrix): raise ValueError(\\"The matrixes' columns of the first matrix must match the rows of the second matrix!\\") result = [[0 for x in range(len(other.matrix[0]))] for y in range(len(self.matrix))] for i in range(len(self.matrix)): for j in range(len(other.matrix[0])): for k in range(len(other.matrix)): result[i][j] += self.matrix[i][k] * other.matrix[k][j] return result"},{"prompt":"Write a function in Python to find out the longest word in a string","completion":"def longestWord(str): words = str.split() max_len = 0 for word in words: if len(word) > max_len: max_len = len(word) for word in words: if len(word) == max_len: return word"},{"prompt":"Edit the following Python code such that it will print an array containing the seven days of the week. days = [Monday, Thuesday, Wednesday, Thrusday, Friday] for day in days: print(day)","completion":"days = [\\"Monday\\", \\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\", \\"Saturday\\", \\"Sunday\\"] for day in days: print(day)"},{"prompt":"Write a imperative command to print the first two characters of the given string 'Python'.","completion":"print('Python'[:2])"},{"prompt":"Create a simple minigame using Python and Pygame. The game should allow the player to move an avatar around and score points by touching objects. Not applicable","completion":"import pygame # Initialize the game engine pygame.init() # Define the colors black = ( 0, 0, 0) white = ( 255, 255, 255) # Set the height and width of the screen size = [700, 500] screen = pygame.display.set_mode(size) # Set the title of the window pygame.display.set_caption(\\"My Game\\") # Create an empty array object_list = [] # Loop until the user clicks the close button done = False # Used to manage how fast the screen updates clock = pygame.time.Clock() # -------- Main Program Loop ----------- while done == False: # ALL EVENT PROCESSING SHOULD GO BELOW THIS COMMENT for event in pygame.event.get(): if event.type == pygame.QUIT: done = True # ALL EVENT PROCESSING SHOULD GO ABOVE THIS COMMENT # ALL GAME LOGIC SHOULD GO BELOW THIS COMMENT # Move the objects in object_list for item in object_list: item.x += item.x_speed item.y += item.y_speed # Player Input pressed = pygame.key.get_pressed() if pressed[pygame.K_UP]: player.y_speed = -3 if pressed[pygame.K_DOWN]: player.y_speed = 3 # Check for collisions between the player and objects for item in object_list: if abs(player.x - item.x) < 20 and abs(player.y - item.y) < 20: object_list.remove(item) player.score += 1 # ALL GAME LOGIC SHOULD GO ABOVE THIS COMMENT # ALL CODE TO DRAW SHOULD GO BELOW THIS COMMENT # Clear the screen screen.fill(white) # Draw the objects in object_list for item in object_list: pygame.draw.rect(screen, (255, 0, 0), [item.x, item.y, 10, 10]) # Draw the player onto the screen pygame.draw.rect(screen, (0, 0, 255), [player.x, player.y, 10, 10]) # ALL CODE TO DRAW SHOULD GO ABOVE THIS COMMENT # Go ahead and update the screen with what we've drawn pygame.display.flip() # Limit frames per second clock.tick(60) # Be IDLE friendly pygame.quit()"},{"prompt":"Create a neural network in Python that generates the output Hello World when the input is Hello.","completion":"import numpy as np from keras.models import Sequential from keras.layers import Dense, Activation model = Sequential() model.add(Dense(3, input_shape=(1,))) model.add(Activation('relu')) model.add(Dense(1)) model.add(Activation('softmax')) model.compile(optimizer='adam', loss='mean_squared_error') X = np.array([[0, 0, 5], [1, 0, 5], [0, 1, 5], [0, 0, 6]]) y = np.array([[1], [0], [0], [0]]) model.fit(X, y, epochs=1000) inp = np.array([[0, 0, 5]]) out = model.predict(inp) print(out)"},{"prompt":"Build an HTTP API endpoint in Python using Flask that allows a user to add two numbers and returns the sum of the two numbers. Not applicable","completion":"from flask import Flask, request app = Flask(__name__) @app.route('/add', methods=['POST']) def add(): num1 = request.json['num1'] num2 = request.json['num2'] sum = num1 + num2 return {'sum': sum} if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python script to fetch the weather data for a given location. Not applicable","completion":"import requests import json # Set the API location URL url = \\"http://api.openweathermap.org/data/2.5/weather?q=<location>\\" # Main function def get_weather(url): # Send the GET request to the API r = requests.get(url) # Convert the response to JSON format data = json.loads(r.text) # Extract only the relevant data main = data[\\"main\\"] temp = main[\\"temp\\"] temp_min = main[\\"temp_min\\"] temp_max = main[\\"temp_max\\"] # Return the data return temp, temp_min, temp_max # Print the data temp, temp_min, temp_max = get_weather(url) print(\\"Current temperature: {}nMin temperature: {}nMax temperature: {}\\".format(temp, temp_min, temp_max))"},{"prompt":"Write a function in Python that prints the Fibonacci numbers","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver function print(Fibonacci(9))"},{"prompt":"Write a Python program to implement 5fold crossvalidation using scikitlearn.","completion":"import numpy as np from sklearn.model_selection import KFold # Create a dataset X = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]]) y = np.array([1, 2, 3, 4, 5, 6]) # Create the Cross-Validation object kf = KFold(n_splits=5) # Iterate through the folds for train_index, test_index in kf.split(X): print(\\"Train Index: \\", train_index, \\"n\\") print(\\"Test Index: \\", test_index) X_train, X_test = X[train_index], X[test_index] y_train, y_test = y[train_index], y[test_index]"},{"prompt":"Create an object detection model using OpenCV and Python that identifies and labels the breed of a given dog. Example Dog Breed Images Labradoodle (image link) Golden Retriever (image link)","completion":"import cv2 import numpy as np #Load the model model = cv2.dnn.readNetFromCaffe(\\"detector.prototxt\\", \\"detector.caffemodel\\") # Read the image img = cv2.imread('Labradoodle.jpg') # Create a blob from the image blob = cv2.dnn.blobFromImage(img, 1, (300, 300), (103.93, 116.77, 123.68)) # Pass the blob through the model model.setInput(blob) prediction = model.forward() # Get the class label with highest probability i = np.argmax(prediction[0]) # Get the breed name corresponding to the highest probability breed = classes[i] # Label the image with the breed name cv2.putText(img, breed, (10, 30), cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 0)) # Show the image cv2.imshow('img', img) cv2.waitKey(0)"},{"prompt":"Write a Python program to filter a list of strings and only return strings with two or more words. my_list = [hello, world, how, are, you, I am fine]","completion":"my_list = [\\"hello world\\", \\"how are you\\", \\"I am fine\\"] filtered_list = [i for i in my_list if len(i.split())>1] print(filtered_list) # Output: ['hello world', 'how are you', 'I am fine']"},{"prompt":"Generate an algorithm in Python to remove an element from a given array at a given index.","completion":"def remove(arr, index): # If the array is empty or index is not in array range if len(arr) == 0 or index >= len(arr): return arr # Remove the element from the array tempArr = arr[:index] + arr[index+1:] return tempArr"},{"prompt":"Using a Python dictionary implement a function to reverse a string.","completion":"def reverseString(s): # define a dictionary revDict = {} # Iterate through the characters in the string for i in range(len(s)): # store the character as the key and its index as the associated value revDict[s[i]] = i # sort the dictionary by the values revDict = sorted(revDict.items(), key = lambda kv:(kv[1], kv[0])) # Join the elements to form a reversed string reversedString = \\"\\".join(item[0] for item in revDict) return reversedString"},{"prompt":"The given code is a Python script for setting up a rescue mode in Anaconda. To use it, import the necessary modules and call the \`doRescue\` function with the appropriate parameters. The function will attempt to find and mount an existing Linux installation and provide a shell for making changes. If the installation cannot be found, it will simply provide a shell. The function also handles turning on swap and SELinux, setting library paths, and creating a \`/etc/fstab\` file in the ramdisk.","completion":"# # rescue.py - anaconda rescue mode setup # # Copyright (C) 2001, 2002, 2003, 2004 Red Hat, Inc. All rights reserved. # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program. If not, see <http://www.gnu.org/licenses/>. # # Author(s): Mike Fulbright <msf@redhat.com> # Jeremy Katz <katzj@redhat.com> # import sys import os from pyanaconda import iutil import shutil import time import re import subprocess from snack import ButtonChoiceWindow, ListboxChoiceWindow,SnackScreen from pyanaconda.constants import ANACONDA_CLEANUP from pyanaconda.constants_text import TEXT_OK_BUTTON, TEXT_NO_BUTTON, TEXT_YES_BUTTON from pyanaconda.text import WaitWindow, OkCancelWindow, ProgressWindow, PassphraseEntryWindow from pyanaconda.flags import flags from pyanaconda.installinterfacebase import InstallInterfaceBase from pyanaconda.i18n import _ from blivet import mountExistingSystem from blivet.errors import StorageError, DirtyFSError from blivet.devices import LUKSDevice from pykickstart.constants import KS_REBOOT, KS_SHUTDOWN import meh.ui.text import logging log = logging.getLogger(\\"anaconda\\") class RescueInterface(InstallInterfaceBase): def waitWindow(self, title, text): return WaitWindow(self.screen, title, text) def progressWindow(self, title, text, total, updpct = 0.05, pulse = False): return ProgressWindow(self.screen, title, text, total, updpct, pulse) def detailedMessageWindow(self, title, text, longText=None, ty=\\"ok\\", default=None, custom_icon=None, custom_buttons=None, expanded=False): return self.messageWindow(title, text, ty, default, custom_icon, custom_buttons) def messageWindow(self, title, text, ty = \\"ok\\", default = None, custom_icon=None, custom_buttons=None): if custom_buttons is None: custom_buttons = [] if ty == \\"ok\\": ButtonChoiceWindow(self.screen, title, text, buttons=[TEXT_OK_BUTTON]) elif ty == \\"yesno\\": if default and default == \\"no\\": btnlist = [TEXT_NO_BUTTON, TEXT_YES_BUTTON] else: btnlist = [TEXT_YES_BUTTON, TEXT_NO_BUTTON] rc = ButtonChoiceWindow(self.screen, title, text, buttons=btnlist) if rc == \\"yes\\": return 1 else: return 0 elif ty == \\"custom\\": tmpbut = [] for but in custom_buttons: tmpbut.append(but.replace(\\"_\\",\\"\\")) rc = ButtonChoiceWindow(self.screen, title, text, width=60, buttons=tmpbut) idx = 0 for b in tmpbut: if b.lower() == rc: return idx idx = idx + 1 return 0 else: return OkCancelWindow(self.screen, title, text) def passphraseEntryWindow(self, device): w = PassphraseEntryWindow(self.screen, device) passphrase = w.run() w.pop() return passphrase @property def meh_interface(self): return self._meh_interface @property def tty_num(self): return 1 def shutdown (self): self.screen.finish() def suspend(self): pass def resume(self): pass def __init__(self): InstallInterfaceBase.__init__(self) self.screen = SnackScreen() self._meh_interface = meh.ui.text.TextIntf() def makeFStab(instPath = \\"\\"): if os.access(\\"/proc/mounts\\", os.R_OK): f = open(\\"/proc/mounts\\", \\"r\\") buf = f.read() f.close() else: buf = \\"\\" try: f = open(instPath + \\"/etc/fstab\\", \\"a\\") if buf: f.write(buf) f.close() except IOError as e: log.info(\\"failed to write /etc/fstab: %s\\", e) # make sure they have a resolv.conf in the chroot def makeResolvConf(instPath): if flags.imageInstall: return if not os.access(\\"/etc/resolv.conf\\", os.R_OK): return if os.access(\\"%s/etc/resolv.conf\\" %(instPath,), os.R_OK): f = open(\\"%s/etc/resolv.conf\\" %(instPath,), \\"r\\") buf = f.read() f.close() else: buf = \\"\\" # already have a nameserver line, don't worry about it if buf.find(\\"nameserver\\") != -1: return f = open(\\"/etc/resolv.conf\\", \\"r\\") buf = f.read() f.close() # no nameserver, we can't do much about it if buf.find(\\"nameserver\\") == -1: return shutil.copyfile(\\"%s/etc/resolv.conf\\" %(instPath,), \\"%s/etc/resolv.conf.bak\\" %(instPath,)) f = open(\\"%s/etc/resolv.conf\\" %(instPath,), \\"w+\\") f.write(buf) f.close() def runShell(screen = None, msg=\\"\\"): if screen: screen.suspend() print if msg: print (msg) if flags.imageInstall: print(_(\\"Run %s to unmount the system when you are finished.\\") % ANACONDA_CLEANUP) else: print(_(\\"When finished please exit from the shell and your \\" \\"system will reboot.\\")) print proc = None if os.path.exists(\\"/usr/bin/firstaidkit-qs\\"): proc = subprocess.Popen([\\"/usr/bin/firstaidkit-qs\\"]) proc.wait() if proc is None or proc.returncode!=0: if os.path.exists(\\"/bin/bash\\"): iutil.execConsole() else: print(_(\\"Unable to find /bin/sh to execute! Not starting shell\\")) time.sleep(5) if screen: screen.finish() def _exception_handler_wrapper(orig_except_handler, screen, *args): \\"\\"\\" Helper function that wraps the exception handler with snack shutdown. :param orig_except_handler: original exception handler that should be run after the wrapping changes are done :type orig_except_handler: exception handler as can be set as sys.excepthook :param screen: snack screen that should be shut down before further actions :type screen: snack screen \\"\\"\\" screen.finish() return orig_except_handler(*args) def _unlock_devices(intf, storage): try_passphrase = None for device in storage.devices: if device.format.type == \\"luks\\": skip = False unlocked = False while not (skip or unlocked): if try_passphrase is None: passphrase = intf.passphraseEntryWindow(device.name) else: passphrase = try_passphrase if passphrase is None: # canceled skip = True else: device.format.passphrase = passphrase try: device.setup() device.format.setup() luks_dev = LUKSDevice(device.format.mapName, parents=[device], exists=True) storage.devicetree._addDevice(luks_dev) storage.devicetree.populate() unlocked = True # try to use the same passhprase for other devices try_passphrase = passphrase except StorageError as serr: log.error(\\"Failed to unlock %s: %s\\", device.name, serr) device.teardown(recursive=True) device.format.passphrase = None try_passphrase = None def doRescue(intf, rescue_mount, ksdata): import blivet # XXX: hook the exception handler wrapper that turns off snack first orig_hook = sys.excepthook sys.excepthook = lambda ty, val, tb: _exception_handler_wrapper(orig_hook, intf.screen, ty, val, tb) for f in [ \\"services\\", \\"protocols\\", \\"group\\", \\"joe\\", \\"man.config\\", \\"nsswitch.conf\\", \\"selinux\\", \\"mke2fs.conf\\" ]: try: os.symlink('/mnt/runtime/etc/' + f, '/etc/' + f) except OSError: pass # Early shell access with no disk access attempts if not rescue_mount: # the %post should be responsible for mounting all needed file systems # NOTE: 1st script must be bash or simple python as nothing else might be available in the rescue image if flags.automatedInstall and ksdata.scripts: from pyanaconda.kickstart import runPostScripts runPostScripts(ksdata.scripts) else: runShell() sys.exit(0) if flags.automatedInstall: readOnly = ksdata.rescue.romount else: # prompt to see if we should try and find root filesystem and mount # everything in /etc/fstab on that root while True: rc = ButtonChoiceWindow(intf.screen, _(\\"Rescue\\"), _(\\"The rescue environment will now attempt to find your \\" \\"Linux installation and mount it under the directory \\" \\"%s. You can then make any changes required to your \\" \\"system. If you want to proceed with this step choose \\" \\"'Continue'. You can also choose to mount your file systems \\" \\"read-only instead of read-write by choosing 'Read-Only'. \\" \\"nn\\" \\"If for some reason this process fails you can choose 'Skip' \\" \\"and this step will be skipped and you will go directly to a \\" \\"command shell.nn\\") % (iutil.getSysroot(),), [_(\\"Continue\\"), _(\\"Read-Only\\"), _(\\"Skip\\")] ) if rc == _(\\"Skip\\").lower(): runShell(intf.screen) sys.exit(0) else: readOnly = rc == _(\\"Read-Only\\").lower() break sto = blivet.Blivet(ksdata=ksdata) blivet.storageInitialize(sto, ksdata, []) _unlock_devices(intf, sto) roots = blivet.findExistingInstallations(sto.devicetree) if not roots: root = None elif len(roots) == 1: root = roots[0] else: height = min (len (roots), 12) if height == 12: scroll = 1 else: scroll = 0 lst = [] for root in roots: lst.append(\\"%s\\" % root.name) (button, choice) = ListboxChoiceWindow(intf.screen, _(\\"System to Rescue\\"), _(\\"Which device holds the root partition \\" \\"of your installation?\\"), lst, [ _(\\"OK\\"), _(\\"Exit\\") ], width = 30, scroll = scroll, height = height, help = \\"multipleroot\\") if button == _(\\"Exit\\").lower(): root = None else: root = roots[choice] rootmounted = False if root: try: if not flags.imageInstall: msg = _(\\"The system will reboot automatically when you exit \\" \\"from the shell.\\") else: msg = _(\\"Run %s to unmount the system \\" \\"when you are finished.\\") % ANACONDA_CLEANUP try: mountExistingSystem(sto.fsset, root.device, allowDirty = True, readOnly = readOnly) except DirtyFSError: if flags.automatedInstall: log.error(\\"System had dirty file systems which you chose not to mount\\") else: ButtonChoiceWindow(intf.screen, _(\\"Rescue\\"), _(\\"Your system had dirty file systems which you chose not \\" \\"to mount. Press return to get a shell from which \\" \\"you can fsck and mount your partitions. %s\\") % msg, [_(\\"OK\\")], width = 50) rootmounted = False else: if flags.automatedInstall: log.info(\\"System has been mounted under: %s\\", iutil.getSysroot()) else: ButtonChoiceWindow(intf.screen, _(\\"Rescue\\"), _(\\"Your system has been mounted under %(rootPath)s.nn\\" \\"Press <return> to get a shell. If you would like to \\" \\"make your system the root environment, run the command:nn\\" \\"tchroot %(rootPath)snn%(msg)s\\") % {'rootPath': iutil.getSysroot(), 'msg': msg}, [_(\\"OK\\")] ) rootmounted = True # now turn on swap if not readOnly: try: sto.turnOnSwap() except StorageError: log.error(\\"Error enabling swap\\") # and selinux too if flags.selinux: # we have to catch the possible exception # because we support read-only mounting try: fd = open(\\"%s/.autorelabel\\" % iutil.getSysroot(), \\"w+\\") fd.close() except IOError: log.warning(\\"cannot touch /.autorelabel\\") # set a library path to use mounted fs libdirs = os.environ.get(\\"LD_LIBRARY_PATH\\", \\"\\").split(\\":\\") mounted = map(lambda dir: \\"/mnt/sysimage%s\\" % dir, libdirs) os.environ[\\"LD_LIBRARY_PATH\\"] = \\":\\".join(libdirs + mounted) # find groff data dir gversion = None try: glst = os.listdir(\\"/mnt/sysimage/usr/share/groff\\") except OSError: pass else: # find a directory which is a numeral, its where # data files are for gdir in glst: if re.match(r'd[.d]+d', gdir): gversion = gdir break if gversion is not None: gpath = \\"/mnt/sysimage/usr/share/groff/\\"+gversion os.environ[\\"GROFF_FONT_PATH\\"] = gpath + '/font' os.environ[\\"GROFF_TMAC_PATH\\"] = \\"%s:/mnt/sysimage/usr/share/groff/site-tmac\\" % (gpath + '/tmac',) # do we have bash? try: if os.access(\\"/usr/bin/bash\\", os.R_OK): os.symlink (\\"/usr/bin/bash\\", \\"/bin/bash\\") except OSError: pass except (ValueError, LookupError, SyntaxError, NameError): raise except Exception as e: # pylint: disable=W0703 log.error(\\"doRescue caught exception: %s\\", e) if flags.automatedInstall: log.error(\\"An error occurred trying to mount some or all of your system\\") else: if not flags.imageInstall: msg = _(\\"The system will reboot automatically when you \\" \\"exit from the shell.\\") else: msg = _(\\"Run %s to unmount the system \\" \\"when you are finished.\\") % ANACONDA_CLEANUP ButtonChoiceWindow(intf.screen, _(\\"Rescue\\"), _(\\"An error occurred trying to mount some or all of your \\" \\"system. Some of it may be mounted under %s.nn\\" \\"Press <return> to get a shell.\\") % iutil.getSysroot() + msg, [_(\\"OK\\")] ) else: if flags.automatedInstall and ksdata.reboot.action in [KS_REBOOT, KS_SHUTDOWN]: log.info(\\"No Linux partitions found\\") intf.screen.finish() print(_(\\"You don't have any Linux partitions. Rebooting.n\\")) sys.exit(0) else: if not flags.imageInstall: msg = _(\\" The system will reboot automatically when you exit \\" \\"from the shell.\\") else: msg = \\"\\" ButtonChoiceWindow(intf.screen, _(\\"Rescue Mode\\"), _(\\"You don't have any Linux partitions. Press \\" \\"return to get a shell.%s\\") % msg, [ _(\\"OK\\") ], width = 50) msgStr = \\"\\" if rootmounted and not readOnly: sto.makeMtab() try: makeResolvConf(iutil.getSysroot()) except (OSError, IOError) as e: log.error(\\"error making a resolv.conf: %s\\", e) msgStr = _(\\"Your system is mounted under the %s directory.\\") % iutil.getSysroot() ButtonChoiceWindow(intf.screen, _(\\"Rescue\\"), msgStr, [_(\\"OK\\")] ) # we do not need ncurses anymore, shut them down intf.shutdown() #create /etc/fstab in ramdisk, so it is easier to work with RO mounted filesystems makeFStab() # run %post if we've mounted everything if rootmounted and not readOnly and flags.automatedInstall: from pyanaconda.kickstart import runPostScripts runPostScripts(ksdata.scripts) # start shell if reboot wasn't requested if not flags.automatedInstall or not ksdata.reboot.action in [KS_REBOOT, KS_SHUTDOWN]: runShell(msg=msgStr) sys.exit(0)"},{"prompt":"Develop a Python function to calculate the tax of each item price = 100 tax_rate = 0.15","completion":"# Function to calculate tax def calculate_tax(price, tax_rate): # Calculate the tax tax = price * tax_rate # Return the tax return tax # Demonstration price = 100 tax_rate = 0.15 tax = calculate_tax(price, tax_rate) print(\\"Tax of the item:\\", tax)"},{"prompt":"Develop a webscraper using Python that can extract text from websites.","completion":"import requests from bs4 import BeautifulSoup url = \\"https://example.com\\" page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') text = soup.get_text() print(text)"},{"prompt":"Write a Python script to get the sum of two numbers and check the correctness of the result. two_number = [4, 7]","completion":"# Get the numbers two_numbers = [4, 7] # Compute the sum result = two_numbers[0] + two_numbers[1] # Check the correctness of the result if result != 11: print(\\"The result is wrong!\\") else: print(\\"The result is correct!\\")"},{"prompt":"Design a Python script to rank a set of given numbers. [3, 8, 2, 9, 5]","completion":"def rank(nums): sortedNums = sorted(nums, reverse = True) for i in range(len(sortedNums)): if sortedNums[i] == nums[i]: print (i + 1, end = \\" \\") # Driver code nums = [3, 8, 2, 9, 5] rank(nums)"},{"prompt":"This code updates JIRA release notes when deploying to an environment. It requires the environment variables JIRA_API_USER_PASSWORD and JIRA_API_USER_NAME to be set, and flags for version and instance to be provided. To use this code, set the required environment variables and provide the necessary flags for version and comment when running the script.","completion":"#!/usr/bin/env python \\"\\"\\"Updates JIRA release notes when deploying to an environment. This requires the JIRA_API_USER_PASSWORD and JIRA_API_USER_NAME environment variables to be set, and flags for version and instance to be provided. \\"\\"\\" import logging import os import sys import jira from rdr_service.main_util import configure_logging, get_parser _JIRA_INSTANCE_URL = \\"https://precisionmedicineinitiative.atlassian.net/\\" # Release tickets are moved from our usual project, DA, to the PD project # for change approval, so for stable/prod releases look for tickets there. _JIRA_PROJECT_ID = \\"PD\\" def _connect_to_jira(jira_username, jira_password): return jira.JIRA(_JIRA_INSTANCE_URL, basic_auth=(jira_username, jira_password)) def main(args): jira_username = os.getenv(\\"JIRA_API_USER_NAME\\") jira_password = os.getenv(\\"JIRA_API_USER_PASSWORD\\") if not jira_username or not jira_password: logging.error(\\"JIRA_API_USER_NAME and JIRA_API_USER_PASSWORD variables must be set. Exiting.\\") sys.exit(-1) jira_connection = _connect_to_jira(jira_username, jira_password) summary = \\"Release tracker for %s\\" % args.version issues = jira_connection.search_issues( 'project = \\"%s\\" AND summary ~ \\"%s\\" ORDER BY created DESC' % (_JIRA_PROJECT_ID, summary) ) if issues: if len(issues) > 1: logging.warning( \\"Found multiple release tracker matches, using newest. %s\\", \\", \\".join(\\"[%s] %s\\" % (issue.key, issue.fields().summary) for issue in issues), ) issue = issues[0] jira_connection.add_comment(issue, args.comment) logging.info(\\"Updated issue %s\\", issue.key) sys.exit(0) else: logging.error(\\"No issue found with summary %r in project %r; exiting.\\", summary, _JIRA_PROJECT_ID) sys.exit(-1) if __name__ == \\"__main__\\": configure_logging() parser = get_parser() parser.add_argument(\\"--version\\", help=\\"The version of the app being deployed (e.g. v0-1-rc21\\", required=True) parser.add_argument(\\"--comment\\", type=str, help=\\"The comment to add to the issue\\", required=True) main(parser.parse_args())"},{"prompt":"Write a Python program to parse a JSON object. data = { name: John Doe, age: 45, city: New York }","completion":"import json data = { \\"name\\": \\"John Doe\\", \\"age\\": 45, \\"city\\": \\"New York\\" } data_parsed = json.loads(json.dumps(data)) name = data_parsed['name'] age = data_parsed['age'] city = data_parsed['city']"},{"prompt":"Module a Python program that takes two numbers and computes the sum of their squares. 3, 4","completion":"def squared_sum(a, b): \\"\\"\\" Computes the sum of the squares of two given numbers \\"\\"\\" return a**2 + b**2 if __name__ == '__main__': a = 3 b = 4 result = squared_sum(a, b) print('The sum of {} and {} squares is: {}'.format(a, b, result))"},{"prompt":"Create a Python program to print the Fibonacci sequence.","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b # Driver Program print(Fibonacci(9))"},{"prompt":"Create a web scraper in Python that scrapes the given URL and searches for “data science” and prints out the number of its occurrences. www.example.com","completion":"import requests from bs4 import BeautifulSoup # URL to be scraped url = 'www.example.com' # Scrape the URL and retrieve HTML r = requests.get(url) html_doc = r.text # Parse the HTML soup = BeautifulSoup(html_doc) # Search for the occurrence of \\"data science\\" keyword = 'data science' keyword_count = soup.find_all(string=keyword).__len__() # Print out the total number of their occurrences print(\\"The keyword \\" + keyword + \\" occurs \\" + str(keyword_count) + \\" times.\\")"},{"prompt":"Optimize the performance of a given Python script.","completion":"import time def optimize_performance(function): start_time = time.time() function end_time = time.time() execution_time = end_time - start_time print(\\"Function took\\", execution_time, \\"seconds to execute.\\") # perform optimizations optimized_function = function start_time = time.time() optimized_function end_time = time.time() execution_time = end_time-start_time print(\\"Optimized Function took\\", execution_time, \\"seconds to execute\\")"},{"prompt":"Create a function in Python to generate an alphabetically sorted list of unique words from a given string. Not applicable","completion":"def sort_words(str): words = str.split(' ') words = set(words) words = list(words) words.sort() return words"},{"prompt":"Create a Python script to encode a given message using the Caesar cipher. Message: Hello World Shift: 5","completion":"def caesar_cipher(message, shift): encrypted_message = \\"\\" for char in message: charIndex = ord(char) encryptedIndex = charIndex + shift if encryptedIndex <= 255: encrypted_message += chr(encryptedIndex) else: encrypted_message += chr(encryptedIndex - 255) return encrypted_message print(caesar_cipher(\\"Hello World\\", 5)) # prints Mjqqt Btwqi"},{"prompt":"Can you create a function in Python to find the area of a triangle given the three sides? 3, 4, 5","completion":"def area_triangle(a, b, c): s = (a + b + c)/2 area = math.sqrt(s*(s-a)*(s-b)*(s-c)) return area area = area_triangle(3, 4, 5) print(\\"The area of the triangle is: {}\\".format(area))"},{"prompt":"Create a Python program that solves the Knapsack Problem. Weights: [2, 3, 4, 5] Values: [50, 60, 70, 80] Capacity: 5","completion":"# Function to get the maximum value (given weights and values) def knapsack(weights, values, capacity): if len(weights) == 0 or capacity == 0: return 0 n = len(weights) # create a matrix (items)x(capacity) filled with 0 memo = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)] # loop through the items for i in range(1, n + 1): # loop through the capacities for j in range(1, capacity + 1): if j - weights[i - 1] < 0: # if the current capacity cannot fit in the item's weight # copy the value from the cell above memo[i][j] = memo[i - 1][j] else: # the maximum of either selecting the item or not memo[i][j] = max(memo[i - 1][j], memo[i - 1][j - weights[i - 1]] + values[i - 1]) return memo[n][capacity] if __name__ == '__main__': weights = [2, 3, 4, 5] values = [50, 60, 70, 80] capacity = 5 knapsack_val = knapsack(weights, values, capacity) print(knapsack_val)"},{"prompt":"You need to optimize a Python program for faster performance. def sort_number(arr): for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: temp = arr[i] arr[i] = arr[j] arr[j] = temp","completion":"def sort_number(arr): arr.sort()"},{"prompt":"Generate a list of 100 scientific names of animals using Python. Not applicable","completion":"import random wildlife_names = ['Gorilla', 'Tiger', 'Elephant', 'Zebra', 'Lion', 'Crocodile', 'Lemur', 'Hippopotamus', 'Giraffe', 'Rhinoceros', 'Jaguar', 'Gazelle', 'Cheetah', 'Hyena', 'Snake', 'Wildebeest', 'Kangaroo', 'Aardvark', 'Tapir', 'Badger', 'Wild Boar', 'Beaver', 'Vole', 'Weasel', 'Marten', 'Pangolin', 'Mongoose', 'Gibbon', 'Orangutan', 'Baboon', 'Chimpanzee', 'Gorilla', 'Tiger', 'Elephant', 'Zebra', 'Lion', 'Crocodile', 'Lemur', 'Hippopotamus', 'Giraffe', 'Rhinoceros', 'Jaguar', 'Gazelle', 'Cheetah', 'Hyena', 'Snake', 'Wildebeest', 'Kangaroo', 'Aardvark', 'Tapir', 'Badger', 'Wild Boar', 'Beaver', 'Vole', 'Weasel', 'Marten', 'Pangolin', 'Mongoose', 'Gibbon', 'Orangutan', 'Baboon', 'Chimpanzee', 'Wolf', 'Fox', 'Hare', 'Squirrel', 'Badger', 'Raccoon', 'Skunk', 'Mink', 'Otter', 'Mongoose', 'Wildcat', 'Fisher', ' Antarctic Fur Seal', 'Hooded Seal', 'Walrus', 'Polar Bear', 'Hawk', 'Owl', 'Eagle', 'Falcon', 'Vulture', 'Heron', 'Bald Eagle', 'Snowy Owl', 'Goose', 'Swallow', 'Flamingo', 'Arctic Tern', 'Ostrich', 'Emu', 'Pelican', 'Common Buzzard', 'Hen Harrier', 'Kestrel', 'Peregrine Falcon', 'Pheasant', 'Partridge', 'Quail', 'Sparrow', 'Pigeon', 'Starling', 'Cuckoo', 'Woodpecker', 'Crow', 'Raven', 'Magpie', 'Jay', 'Albatross', 'Seagull', 'Parrot'] names = [] for i in range(100): name = random.choice(wildlife_names) names.append(name) print(names)"},{"prompt":"Write a function in Python to check if a given array of numbers is in ascending order. [3, 5, 7, 9, 16, 19]","completion":"def isSorted(arr): for i in range(len(arr) - 1): if arr[i] > arr[i+1]: return False return True print(isSorted([3, 5, 7, 9, 16, 19]))"},{"prompt":"Generate a code in Python to find the index of the smallest element in a given list of numbers. [4, 2, 5, 12, 7]","completion":"def index_min(arr): min_index = 0 for i in range(1,len(arr)): if arr[i] < arr[min_index]: min_index = i return min_index"},{"prompt":"Debug and fix the following Python program that calculates a list of square roots. nums = [1, 4, 9, 16] for num in nums: print(num ** 0.5","completion":"nums = [1, 4, 9, 16] for num in nums: print(num ** 0.5)"},{"prompt":"Create an algorithm in Python that replaces substrings in a given string hello world, world, Earth","completion":"# Define function def replace_substring(string, substring, replacement): return string.replace(substring, replacement) # Call function print(replace_substring(\\"hello world\\", \\"world\\", \\"Earth\\")) # Output hello Earth"},{"prompt":"Using Python, generate a random 6digit number and check if it is a palindrome.","completion":"import random def check_palindrome(num): \\"\\"\\"Function to check if a number is a palindrome. \\"\\"\\" num_str = str(num) rev_str = num_str[::-1] if num_str == rev_str: return True else: return False # Generate a random 6-digit number num = random.randint(100000, 999999) # Check if it is a palindrome if check_palindrome(num): print(f\\"The number {num} is a palindrome\\") else: print(f\\"The number {num} is not a palindrome\\")"},{"prompt":"Write a code in Python to fetch data from a web API and store it in a database.","completion":"import requests import sqlite3 # fetch data from api and store in list url = 'http://api.example.com/resources' response = requests.get(url) data = response.json() # initiate database connection conn = sqlite3.connect('database.db') c = conn.cursor() # create table in database c.execute(\\"CREATE TABLE IF NOT EXISTS resources (id INTEGER, title TEXT);\\") # insert data into database for entry in data: c.execute(\\"INSERT INTO resources VALUES (?, ?)\\", (entry['id'], entry['title'])) # commit changes and close connection conn.commit() conn.close()"},{"prompt":"Create a Python program that takes a string containing only alphanumeric characters and returns a string with all the vowels removed. alphanumeric_string=AaBbCc0d1e2f3g4h5i6j7k8l9m","completion":"def remove_vowels(alphanumeric_string): '''This function takes a string containing only alphanumeric characters and returns a string with all the vowels removed.''' vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'] s = \\"\\" for char in alphanumeric_string: if char not in vowels: s += char return s alphanumeric_string=\\"AaBbCc0d1e2f3g4h5i6j7k8l9m\\" print(remove_vowels(alphanumeric_string))"},{"prompt":"Generate two for loops that would execute concurrently in Python.","completion":"for i in range(0, n): for j in range(i + 1, n): # Do some processing"},{"prompt":"Write a Python function to sort this dictionary by its keys in descending order. { 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five' }","completion":"def sort_dictionary_keys(d): return {k: d[k] for k in sorted(d, reverse=True)}"},{"prompt":"Generate a Python script that outputs the first ten perfect squares from 1 to 100.","completion":"for i in range(1, 11): print(str(i**2))"},{"prompt":"Create a program in Python to multiply all numbers in a list by a given number and return the result as a new list. multiply [2, 4, 6] by 2","completion":"def multiplyListByNumber(list, number): return [element*number for element in list]"},{"prompt":"Generate a class in Python for representing customers in a banking application. It should include attributes for customer name, account number, and account balance. Not applicable","completion":"class Customer: def __init__(self, name, account_number, balance): self.name = name self.account_number = account_number self.balance = balance def get_balance(self): return self.balance def deposit(self, amount): self.balance += amount def withdrawal(self, amount): self.balance -= amount"},{"prompt":"Create a Python class to implement linked list add, delete, and print functionalities.","completion":"class Node: def __init__(self, dataval=None): self.dataval = dataval self.nextval = None class SLinkedList: def __init__(self): self.headval = None # Function to add node def addNode(self, dataval): NewNode = Node(dataval) if self.headval is None: self.headval = NewNode return laste = self.headval while(laste.nextval): laste = laste.nextval laste.nextval=NewNode # Function to print the linked list def listprint(self): printval = self.headval while printval is not None: print (printval.dataval), printval = printval.nextval # Function to delete a node def DeleteNode(self, dataval): deletenode = self.headval if deletenode.dataval == dataval: self.headval = deletenode.nextval deletenode = None return prevnode = None while deletenode.dataval != dataval: prevnode = deletenode deletenode = deletenode.nextval prevnode.nextval = deletenode.nextval deletenode = None"},{"prompt":"Generate a program in Python that takes a number as input and prints if the number is a perfect square or not. 25","completion":"import math # Function to check if the given number # is a perfect square or not def issquare(number): # Finding the square root sqrt = int(math.sqrt(number)) # Comparing square of the square root # with the given number if sqrt * sqrt == number: return True else: return False # Driver Code # Checks if 12 is a perfect square if(issquare(25)): print(\\"Yes\\") else: print(\\"No\\")"},{"prompt":"Write a python function that takes two lists of numbers and returns the intersection between them. list1 = [1, 2, 3, 4, 5] list2 = [3, 4, 5, 6, 7]","completion":"def intersection(list1, list2): result = [] set1 = set(list1) set2 = set(list2) for item in set1 & set2: result.append(item) return result list1 = [1,2,3,4,5] list2 = [3,4,5,6,7] result = intersection(list1, list2) print(result) # prints [3, 4, 5]"},{"prompt":"Generate a Python program which takes in two strings as input and checks if the two strings are anagrams of each other and returns the result.","completion":"def is_anagram(str1, str2): # Get the count of characters in str1. character_counts = [0] * 256 for i in str1: character_counts[ord(i)] += 1 # Decrease count for each character of str2. for i in str2: character_counts[ord(i)] -= 1 # Check if all counts are 0 for count in character_counts: if count != 0: return False return True"},{"prompt":"Design a trading strategy using Python to maximize profits while minimizing risks.","completion":"def trading_strategy(portfolio): \\"\\"\\" Function to design a trading strategy using Python to maximize profits while minimizing risks Arguments: portfolio -- current portfolio of the trader Returns: new_portfolio -- new and improved portfolio \\"\\"\\" # Initialize the new and improved portfolio new_portfolio = portfolio.copy() # Loop through all the stocks in the portfolio for stock in portfolio: # Calculate the current price of the stock price = get_price(stock) # Calculate the risk of buying the stock risk = get_risk(stock) # Calculate the expected return of buying the stock return_expected = get_expected_return(stock, price) # Calculate the risk/reward ratio risk_reward = return_expected/risk # If the risk/reward ratio is greater than 1, # then buy the stock if risk_reward > 1: # Calculate the amount to buy amount = calculate_amount_to_buy(portfolio, price, risk) coy # Buy the stock new_portfolio = buy_stock(new_portfolio, stock, amount) # Else, sell the stock else: # Sell the stock new_portfolio = sell_stock(new_portfolio, stock) # return the new and improved portfolio return new_portfolio"},{"prompt":"Using python, modify the code provided below to add the items in the list. list = [1,2,3,4] sum = 0","completion":"list = [1,2,3,4] sum = 0 for item in list: sum += item print(sum)"},{"prompt":"Write a Python program to format a specified string to limit the number of characters to 6. str = Python is a great programming language!","completion":"new_str = \\"Python\\".ljust(6, \\"...\\") print(new_str) #Python..."},{"prompt":"Create a python program that takes a list of numbers and returns the sum of all the numbers in the list. [1, 2, 3, 4, 5]","completion":"def sum_list(list_of_numbers): total = 0 for num in list_of_numbers: total += num return total # Main nums = [1, 2, 3, 4, 5] total_sum = sum_list(nums) print('Sum of list elements: ', total_sum)"},{"prompt":"Design a program in Python that converts a text string to a titlecase. str = Hello World","completion":"def to_titlecase(str): new_str = \\"\\" for word in str.split(): new_str += word.capitalize() + \\" \\" return new_str.strip() print(to_titlecase(\\"Hello World\\"))"},{"prompt":"Generate a Python program to search for a specific string in a list. lst = [hello, world, this, is, a, test] str = test","completion":"def search_string(lst, str): for item in lst: if item == str: return True return False lst = [\\"hello\\", \\"world\\", \\"this\\", \\"is\\", \\"a\\", \\"test\\"] str = \\"test\\" print(search_string(lst, str))"},{"prompt":"Create a python program that evaluates whether a given expression is valid or not. expression = 2 * (3 + 4)","completion":"def evaluate_expression(expression): \\"\\"\\" Evaluates whether a given expression is valid or not. :param expression: The expression to evaluate :type expression: str :return: True if expression is valid, False otherwise :rtype: bool \\"\\"\\" try: eval(expression) return True except: return False"},{"prompt":"Generate a shell script that can start a web server. The script should take a single argument, the name of the directory where the web server should be started. app_dir: path/to/application/dir","completion":"#!/bin/bash if [ -z \\"1\\" ]; then echo \\"Usage: 0 [dir]\\" exit 1 fi DIR=\\"\\"1\\"\\" if [ ! -d \\"DIR\\" ]; then echo \\"Error: Directory \\"DIR\\" does not exist\\" exit 1 fi cd \\"DIR\\" python -m SimpleHTTPServer 8080"},{"prompt":"Create a Python application for managing bookings for a hotel room. The application should include models for Room (with fields for number, size, and bed type) and Booking (with fields for start date, end date, and guest name). Not applicable","completion":"class Room(models.Model): number = models.IntegerField() size = models.IntegerField() bed_type = models.CharField(max_length=20) class Booking(models.Model): start_date = models.DateField() end_date = models.DateField() guest_name = models.CharField(max_length=50) room = models.ForeignKey(Room, on_delete=models.CASCADE) # In your migration file: class CreateRoomsAndBookings < ActiveRecord::Migration[5.2] def change create_table :rooms do |t| t.integer :number t.integer :size t.string :bed_type t.timestamps end create_table :bookings do |t| t.date :start_date t.date :end_date t.string :guest_name t.references :room, foreign_key: true t.timestamps end end end"},{"prompt":"Design a program to validate a user's phone number in Python.","completion":"import re def is_valid_phone_number(phone_number): pattern = re.compile(\\"^[0-9]{3}-[0-9]{3}-[0-9]{4}\\") match = pattern.match(phone_number) return bool(match)"},{"prompt":"Write a function in Python which takes a number as a parameter and returns the factorial. 5","completion":"def factorial(num): if num == 0 or num == 1: return 1 else: return num * factorial(num - 1) print(factorial(5))"},{"prompt":"Create a python function to filter all the positive numbers from a list with both negative and postive numbers. list = [1, 2, 3, 4, 5, 6]","completion":"# Define a function def filter_positive(list): # Instantiate an empty list positive_nums = [] # Loop through the list for n in list: # If element is positive if n > 0: # Append it to the list positive_nums.append(n) # Return the list of positives return positive_nums # Pass the list to the above function filtered_list = filter_positive(list)"},{"prompt":"Generate an optimized python code for finding the maximum element in a list of numbers.","completion":"def find_max(l): max_elmt = l[0] for x in l: if x > max_elmt: max_elmt = x return max_elmt"},{"prompt":"Write a python program that calculates the driving distance between two locations given their latitudes and longitudes. Location 1: [48.8606, 2.33619] Location 2: [48.8644, 2.32883]","completion":"import math def distance_between_locations(lat1, long1, lat2, long2): degrees_to_radians = math.pi/180.0 # phi = 90 - latitude phi1 = (90.0 - lat1)*degrees_to_radians phi2 = (90.0 - lat2)*degrees_to_radians # theta = longitude theta1 = long1*degrees_to_radians theta2 = long2*degrees_to_radians cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + math.cos(phi1)*math.cos(phi2)) # arccos, distance in radians arc = math.acos( cos ) # Earth's radius (km) earth_radius Km = 6371 # Distance in km distance = arc * earth_radius return distance # Calculate distance between two locations dist = distance_between_locations(48.8606, 2.33619, 48.8644, 2.32883) print(\\"Distance Between Locations is: \\" + str(dist) + \\" Km\\")"},{"prompt":"Design a function in Python that takes a positive integer and finds its prime factors.","completion":"def prime_factors(num): factors = [] n = 2 while n * n <= num: if num % n == 0: factors.append(n) num //= n else: n += 1 if num > 1: factors.append(num) return factors"},{"prompt":"Using a while loop, write a Python program to reverse a given sentence. Hello there my friend","completion":"# Initialize an empty string revString = \\"\\" # Set 'idx' to point to the end of the string idx = len(sent) - 1 # Iterate in reverse through the string while idx >= 0: # Append each individual character to the result string revString += sent[idx] # Decrement the index idx -= 1 # Output the reversed result print(revString)"},{"prompt":"Create a function in Python that will generate a random number between 1 and 10.","completion":"import random def random_number(): return random.randint(1,10)"},{"prompt":"Generate a Python class that models a User object with fields for email, password, user type, and address. Not applicable","completion":"class User: def __init__(self, email, password, user_type, address): self.email = email self.password = password self.user_type = user_type self.address = address def get_email(self): return self.email def get_password(self): return self.password def get_user_type(self): return self.user_type def get_address(self): return self.address # Test u = User('user@example.com', 'pw', 'admin', '123 Main Street') print(u.get_email()) # user@example.com"},{"prompt":"Write a Python script to extract the top trending topics from a given Twitter page.","completion":"import tweepy auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET) auth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET) api = tweepy.API(auth) # get trending topics for given twitter page def getTrendingTopics(username): topics = [] tweets = api.user_timeline(screen_name=username, count=100) for tweet in tweets: for hashtag in tweet.entities.get('hashtags'): topics.append(hashtag['text']) return sorted(set(topics)) username = input('Enter twitter username: ') trendingTopics = getTrendingTopics(username) print(trendingTopics)"},{"prompt":"Build a Python program that includes a function to add two given numbers.","completion":"\\"\\"\\" Build a Python program that includes a function to add two given numbers. \\"\\"\\" def add(a, b): return a + b if __name__ == '__main__': result = add(2, 3) print(f'The sum of 2 and 3 is {result}')"},{"prompt":"Produce a program using Python that visualizes the given function. f(x, y) = x + y","completion":"import matplotlib.pyplot as plt import numpy as np x = np.arange(-4.0, 4.0, 0.1) y = np.arange(-4.0, 4.0, 0.1) X, Y = np.meshgrid(x, y) def f(x, y): return x + y Z = f(X, Y) fig = plt.figure() plt.contourf(X, Y, Z) plt.xlabel('x') plt.ylabel('y') plt.title('f(x,y) = x + y') plt.show()"},{"prompt":"Design a Python program to decipher text encoded with a Caesar Cipher.","completion":"def decipher_caesar(text, shift): lower_alphabet = 'abcdefghijklmnopqrstuvwxyz' upper_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' deciphered_text = '' for i in range(len(text)): if text[i] in lower_alphabet: index = (lower_alphabet.index(text[i]) - shift) % 26 deciphered_text += lower_alphabet[index] elif text[i] in upper_alphabet: index = (upper_alphabet.index(text[i]) - shift) % 26 deciphered_text += upper_alphabet[index] else: deciphered_text += text[i] return deciphered_text"},{"prompt":"Design a Python function that takes a string as a parameter and returns a string with extra spaces in between each character. my_string = Hello World","completion":"def add_spaces(string): new_string = \\"\\" for char in string: new_string += char + \\" \\" return new_string my_string = add_spaces(\\"Hello World\\") print(my_string) # H e l l o W o r l d"},{"prompt":"Design a Python program to edit a given text string Apple is a great fruit","completion":"def edit_string(text): text = text.replace(\\"Apple\\", \\"Orange\\") return text text = \\"Apple is a great fruit\\" print(edit_string(text)) # Output: Orange is a great fruit"},{"prompt":"Classify the following items using a supervised machine learning algorithm in Python [3, 5, 7, 1, 0]","completion":"import numpy as np from sklearn import svm # Input data to classify X = np.array([[3, 5, 7, 1, 0]]) # Label data, either 0 or 1 y = np.array([0]) # Create a SVC classifier clf = svm.SVC(gamma=0.001, C=100.) # Train the model, using the training sets clf.fit(X, y) print('Prediction:', clf.predict(X)) Output: Prediction: [0]"},{"prompt":"Develop a text classification algorithm in Python using NLP techniques. Not applicable","completion":"#import the necessary libraries import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.ensemble import RandomForestClassifier #load the data and split it into train and test sets df = pd.read_csv('data.csv') train_data = df[:int(df.shape[0]*0.7)] test_data = df[int(df.shape[0]*0.7):] #instantiate the CountVectorizer vectorizer = CountVectorizer(stop_words='english', max_features=1000) #fit and transform the training data train_vectors = vectorizer.fit_transform(train_data['text'], train_data['label']) #transform the test data test_vectors = vectorizer.transform(test_data['text']) #instantiate the RandomForestClassifier classifier = RandomForestClassifier(n_estimators=10) #fit the model to the training data classifier.fit(train_vectors, train_data['label']) #predict the class labels for the test data predictions = classifier.predict(test_vectors) #calculate and output the accuracy score score = classifier.score(test_vectors, test_data['label']) print(\\"The accuracy score is: {:.2f}\\".format(score))"},{"prompt":"Write a Python program to read and display user input until 'q' is entered.","completion":"while True: user_input = input(\\"Please enter your input, or 'q' to quit: \\") if user_input == 'q': break print(user_input)"},{"prompt":"Create a function in Python to print the first n numbers of the Fibonacci series. 6","completion":"def Fibonacci(n): a = 0 b = 1 if n<0: print(\\"Incorrect input\\") elif n==0: print(a) elif n==1: print(b) else: print(a) print(b) for i in range(2,n): c = a + b a = b b = c print(b)"},{"prompt":"Write a python program to classify the given text into one of the given labels. Text: The cat is sleeping in the sofa. Labels: [“Animal”, “Furniture”]","completion":"import nltk # Create a tokenizer tokenizer = nltk.tokenize.RegexpTokenizer(r'w+') # Tokenize the text tokens = tokenizer.tokenize(text) # Create a list of potential labels labels = [\\"Animal\\", \\"Furniture\\"] # Create a list of words used to assign labels # This can be customized depending on the task assignment_words = { \\"Animal\\": [\\"cat\\"], \\"Furniture\\": [\\"sofa\\"] } # Use the assignment words to assign a label label = None for word in tokens: for key, value in assignment_words.items(): if word in value: label = key break # Print the label if label is not None: print(\\"Label:\\", label) else: print(\\"Could not assign label.\\")"},{"prompt":"Optimize a Python script that prints the nth Fibonacci number n = 10","completion":"# Function to calculate nth Fibonacci number def Fibonacci(n): # Declare and initiate first two numbers f1 = 0 f2 = 1 if n < 0: print(\\"Incorrect input\\") return elif n == 0: return f1 elif n == 1: return f2 else: # Use for loop iterate till nth number for i in range(2, n): next = f1 + f2 f1 = f2 f2 = next return f2 # Driver program to test above function print(Fibonacci(10))"},{"prompt":"Devise a python program to generate permutations of an array.","completion":"def generate_permutations(nums): result = [] perms_help(nums, 0, len(nums)-1, result) return result def perms_help(nums, l, r, result): if l == r: result.append(\\"\\".join(nums)) else: for i in range(l, r + 1): # swap character nums[l], nums[i] = nums[i], nums[l] # recur perms_help(nums, l + 1, r, result) # backtrack nums[l], nums[i] = nums[i], nums[l]"},{"prompt":"Write a Python program to read a given string and sort it alphabetically. Hello, World!","completion":"def sort_alphabetically(input_string): chars = list(input_string) chars.sort() print(\\"\\".join(chars)) sort_alphabetically(\\"Hello, World!\\")"},{"prompt":"Generate a program to merge two sorted linked lists in Python.","completion":"def merge(list1, list2): if list1 is None: return list2 if list2 is None: return list1 if list1.data < list2.data: list1.next = merge(list1.next, list2) return list1 else: list2.next = merge(list1, list2.next) return list2"},{"prompt":"Design a python program that takes in input from the command line and populates a dictionary with the data.","completion":"import sys data_dict = {} # Parse command line args for i in range(len(sys.argv)): if i == 0: continue args = sys.argv[i].split(\\":\\") key = args[0] value = args[1] data_dict[key] = value print(data_dict)"},{"prompt":"Create a function that takes a key and value as 1 pair to add to a Python dictionary. key: age, value: 23","completion":"def add_key_value_pair(dict, key, value): dict[key] = value return dict my_dict = {} my_dict = add_key_value_pair(my_dict, 'age', 23) print(my_dict)"},{"prompt":"Write a Python program to simulate rolling two dice and determine the odd/even result.","completion":"import random def roll_dice(): roll1 = random.randint(1, 6) roll2 = random.randint(1, 6) roll_sum = roll1 + roll2 print(f\\"You rolled {roll1} and {roll2}. The total is {roll_sum}, which is {'even' if roll_sum % 2 == 0 else 'odd'}.\\") roll_dice()"},{"prompt":"Create a data structure in Python to store the information of employees in a company. Not applicable","completion":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary class Company: def __init__(self, name): self.name = name self.employees = [] def add_employee(self, employee): self.employees.append(employee) employee1 = Employee('John Doe', 30, 25000) employee2 = Employee('Jane Doe', 28, 30000) company = Company('ACME Inc.') company.add_employee(employee1) company.add_employee(employee2)"},{"prompt":"Create and configure a basic web server using Python's http.server.","completion":"import http.server PORT = 8000 Handler = http.server.SimpleHTTPRequestHandler httpd = http.server.HTTPServer((\\"\\", PORT), Handler) print(\\"serving at port\\", PORT) httpd.serve_forever()"},{"prompt":"Write a Python function to split a given string in two parts which are separated by a space.","completion":"def split_string(string): parts = string.split(' ') return parts[0], parts[1]"},{"prompt":"Create a Python script to generate a global unique identifier (GUID). Not applicable","completion":"import uuid # generate a GUID guid = str(uuid.uuid4()) # print the GUID print(guid) // Output: 3c112f3d-3c68-4b4c-a85d-672622be9f25"},{"prompt":"Generate an algorithm in Python to classify an email as spam or not spam. This email is from the spamming company.","completion":"def classify_email(email): spam_words = ['spam', 'scam', 'unsubscribe', 'refund', 'free', 'win'] # Check if email contains any words that indicate a spam email for word in spam_words: if word in email: return 'spam' # If no words were found, return 'not spam' return 'not spam'"},{"prompt":"Create a program using Python to generate a histogram given a list of numbers. numbers = [2, 5, 2, 8, 3, 9, 4, 10]","completion":"# importing matplotlib module import matplotlib.pyplot as plt # list of numbers numbers = [2, 5, 2, 8, 3, 9, 4, 10] # draw histogram plt.hist(numbers, bins = [0, 2, 4, 6, 8, 10]) # x label, y label and title plt.xlabel('Numbers'); plt.ylabel('Frequency'); plt.title('Histogram for Numbers') # display histogram plt.show()"},{"prompt":"Create a web scraper in Python using Scrapy for an ecommerce web page. The scraper should extract product information, including title, price, and product URL. Not applicable","completion":"import scrapy class ProductSpider(scrapy.Spider): name = 'products' start_urls = ['https://example.com/products'] def parse(self, response): for product in response.xpath('//div[@class=\\"product\\"]'): yield { 'title': product.xpath('.//span[@class=\\"title\\"]/text()).extract_first(), 'price': product.xpath('.//span[@class=\\"price\\"]/text()).extract_first(), 'url': product.xpath('.//a/@href').extract_first() }"},{"prompt":"Write a Python program to search a list of strings for a given string. list = [dog, cat, bird] target = bird","completion":"list = [\\"dog\\", \\"cat\\", \\"bird\\"] target = \\"bird\\" for element in list: if element == target: print(\\"Target string found: {}\\".format(target)) break"},{"prompt":"Create a program in Python to select the data from a list of items.","completion":"def select_data(my_list): result = [] for item in my_list: if item['selected']: result.append(item) return result"},{"prompt":"Read the following data structure and generate a Python program to sort the list by name alphabetically. student_list = [{name: John, age: 20}, {name: Emily, age: 18}, {name: James, age: 21}]","completion":"sorted_list = sorted(student_list, key=lambda k: k[\\"name\\"]) for student in sorted_list: print(student[\\"name\\"])"},{"prompt":"Create a program in Python for predicting the price of a given stock. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression df = pd.read_csv(\\"stock_data.csv\\") X = np.array(df.drop(['price'], 1)) y = np.array(df['price']) X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2) model = LinearRegression() model.fit(X_train, y_train) accuracy = model.score(X_test, y_test) print(\\"Predicting Stock Prices with Linear Regression\\") print(\\"Accuracy:\\", accuracy)"},{"prompt":"Provide a python program that computes the maximum value from a given set of values values = [13, 33, 45, 3, 5, 17, 19, 21]","completion":"# Create a list for our values values = [13, 33, 45, 3, 5, 17, 19, 21] # Initialize maximum value max_val = 0 # Iterate over the list for val in values: # Compare with current maximum value if val > max_val: # Update maximum value max_val = val # Print the maximum value print(\\"Maximum value:\\", max_val)"},{"prompt":"Write a Python program to group a given list of integers into sublists of given size. list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], size = 3","completion":"def group_list(mylist, n): newlist = [] # create a list of indices for sublists indices = list(range(0, len(mylist), n)) # create sublists too for start in indices: end = start + n newlist.append(mylist[start:end]) return newlist # Driver code list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] size = 3 print(group_list(list, size)) # [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]"},{"prompt":"Generate a Python program to find the maximum value in a list of numbers. [23, 12, 48, 61]","completion":"def find_max(list_of_numbers): max_val = max(list_of_numbers) return max_val list_nums = [23, 12, 48, 61] max_val = find_max(list_nums) print(max_val)"},{"prompt":"Create a python function that takes in a string, and returns the string with the first letter of each word capitalized. string = hello there people","completion":"def capitalize_string(string): words = string.split(' ') capitalized_words = [] for word in words: capitalized_words.append(word.capitalize()) return ' '.join(capitalized_words)"},{"prompt":"Design a Python program to find the maximum of two numbers. a = 25 b = 10","completion":"def maximum(a, b): if a > b: maxVal = a elif b > a: maxVal = b else: maxVal = a return maxVal maxVal = maximum(a, b) print(\\"The maximum of two numbers is\\", maxVal)"},{"prompt":"Create a Python class to store data about books.","completion":"class Book: def __init__(self, title, author, publisher, year): self.title = title self.author = author self.publisher = publisher self.year = year def __str__(self): return f\\"{self.title} was written by {self.author} and published by {self.publisher} in {self.year}.\\""},{"prompt":"Write a Python script for multiplying all items in a list.","completion":"def multiply_list(items): result = 1 for i in items: result *= i return result"},{"prompt":"Construct an artificial neural network in Python for solving a classification problem. This network should contain three layers. Description of the classification task","completion":"import numpy as np import tensorflow as tf # Input feature set X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]) # Output class labels y = np.array([[0], [1], [1], [0]]) # Define model layers model = tf.keras.Sequential([ tf.keras.layers.Dense(2, input_dim=2, activation='relu'), tf.keras.layers.Dense(4, activation='relu'), tf.keras.layers.Dense(1, activation='sigmoid') ]) # Compile model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Fit model model.fit(X, y, epochs=1000, verbose=0) # Evaluate model accuracy = model.evaluate(X, y)[1] print('Accuracy: %.2f' % (accuracy*100))"},{"prompt":"Write a Python program to generate a unique set of random numbers from an existing list of numbers. [1, 2, 3, 4, 5, 6, 7]","completion":"import random numbers = [1, 2, 3, 4, 5, 6, 7] random_numbers = set() while len(random_numbers) < 4: random_numbers.add(random.choice(numbers)) print(random_numbers)"},{"prompt":"Generate a Python program to randomly fill the elements of an NxN matrix with a number 1","completion":"from random import randint def fill_matrix(n): matrix = [[0 for y in range(n)] for x in range(n)] for i in range(n): for j in range(n): matrix[i][j] = randint(1,9) return matrix"},{"prompt":"Write a Python program to create all possible strings by using 'a', 'e', 'i', 'o', 'u'. The length of the string should be at least two characters.","completion":"import itertools vowels = ['a', 'e', 'i', 'o', 'u'] for s in itertools.combinations_with_replacement(vowels, 2): print(''.join(s))"},{"prompt":"mplement a polynomial regression machine learning model in Python. The model should output weights for each feature as well as the coefficients for the polynomial. Not applicable","completion":"import numpy as np from sklearn.linear_model import LinearRegression # Create the polynomial features def generate_polynomial_features(X, degree=2): poly_features = [] for i in range(degree): poly_features.append(np.power(X, i+1)) poly_features = np.array(poly_features).T return poly_features # Create the regression model def polynomial_regression(X, y, degree=2): # Create the polynomial features poly_features = generate_polynomial_features(X, degree=degree) # Create and fit the model model = LinearRegression() model.fit(poly_features, y) # Return the model parameters return { \\"weights\\": model.coef_, \\"intercept\\": model.intercept_, }"},{"prompt":"Write a function in Python to detect duplicate elements in an array. [3, 5, 6, 7, 3, 5]","completion":"def find_duplicates(arr): seen = set() duplicates = [] for x in arr: if x in seen: duplicates.append(x) else: seen.add(x) return duplicates print(find_duplicates([3, 5, 6, 7, 3, 5]))"},{"prompt":"Write Python code to simulate a deck of cards.","completion":"import itertools # Create a list of all possible card values card_values = [str(i) for i in range(2,11)] card_values.extend(['Jack', 'Queen', 'King', 'Ace']) # Create a list of all possible suits suits = ['Hearts', 'Diamonds', 'Spades', 'Clubs'] # Create a list of all possible cards cards = list(itertools.product(card_values, suits)) #Simulate a deck of cards deck = [] for card in cards: deck.append(card[0] + \\" of \\" + card[1]) print(\\"Deck of cards: \\", deck)"},{"prompt":"Write a Python program to group a list of numbers based on their modulo with a given number. list_numbers = [2, 6, 8, 10, 3, 7] num = 3","completion":"def group_modulo(list_numbers, num): result = {i:[] for i in range(num)} for number in list_numbers: result[number % num].append(number) return result result = group_modulo(list_numbers, num) print(result)"},{"prompt":"Devise a Python function to calculate Fibonacci series up to n numbers. 10","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(10))"},{"prompt":"Create a Python program that converts an integer to a Roman numeral. 8","completion":"def int_to_roman(num): num_map = { 1: 'I', 5: 'V', 10: 'X', 50: 'L', 100: 'C', 500: 'D', 1000: 'M' } roman = '' if num in num_map: roman = num_map[num] else: if num < 4: roman = 'I'*num elif num < 9: roman = 'I' + 'V'*(num-5) elif num < 40: roman = 'X' + 'I'*(num-10) elif num < 50: roman = 'XL' + 'I'*(num-40) elif num < 90: roman = 'L' + 'X'*(num-50) elif num < 100: roman = 'XC' + 'X'*(num-90) elif num < 400: roman = 'C' + 'X'*(num-100) elif num < 500: roman = 'CD' + 'C'*(num-400) elif num < 900: roman = 'D' + 'C'*(num-500) elif num < 1000: roman = 'CM' + 'C'*(num-900) elif num > 1000: roman = 'M' + 'M'*(num-1000) return roman print(int_to_roman(8))"},{"prompt":"Build an algorithm in Python to identify if a given number is a perfect square. 25","completion":"import math def is_perfect_square(num): sqrt = int(math.sqrt(num)) return sqrt * sqrt == num result = is_perfect_square(25) print(result)"},{"prompt":"Create a Python function to generate a list of numbers between given two numbers start = 10 end = 20","completion":"def numbers_between(start, end): return [x for x in range(start, end + 1)]"},{"prompt":"Create a Python program that reads an integer and prints whether it is even or odd. 7","completion":"# Read the integer num = int(input()) # Print whether the number is even or odd if num % 2 == 0: print(\\"The number is even.\\") else: print(\\"The number is odd.\\")"},{"prompt":"Design a Python program to print a triangle pyramid pattern.","completion":"for i in range(0, 5): for j in range(0, i+1): print(\\"* \\",end=\\"\\") print(\\"r\\")"},{"prompt":"Optimize the algorithm written in Python below to make it faster and more efficient. import random def function(nums): result = set() for i in range(len(nums)2): for j in range(i+1,len(nums)): for k in range(j+1,len(nums)): if (nums[j]nums[i] == nums[i] nums[k]): result.add((nums[i],nums[j],nums[k])) return len(result) nums = [random.randint(1, 10) for x in range(20)]","completion":"import itertools import random def function(nums): results = set() for i,j,k in itertools.combinations(nums, 3): if j-i == i-k: results.add((i,j,k)) return len(results) nums = [random.randint(1, 10) for x in range(20)]"},{"prompt":"Write a function in Python that takes a list of words as an argument and outputs a string of comma separated words. words = ['cat', 'dog', 'bird']","completion":"def listToString(words): return ', '.join(words)"},{"prompt":"Create a Python class that implements an iterator. The iterator should return the square of whole numbers starting at 0. Not applicable.","completion":"class SqrIterator: def __init__(self): self.n = 0 def __iter__(self): return self def __next__(self): result = self.n ** 2 self.n += 1 return result"},{"prompt":"Write a Python program to edit the given JSON string using the given selection criteria. JSON String: { “name”: “Alice”, “role”: “programmer”, “department”: “engineering” } Selection Criteria: Change the department of the given JSON string.","completion":"import json json_str = '{ \\"name\\": \\"Alice\\", \\"role\\": \\"programmer\\", \\"department\\": \\"engineering\\" }' data = json.loads(json_str) data[\\"department\\"] = \\"marketing\\" json_str = json.dumps(data) print(json_str)"},{"prompt":"Write a Python program to return a list that contains all the elements of a given list except the given element x. [3, 5, 9, 8], x = 5","completion":"def removeElement(list, x): new_list = [] for item in list: if item != x: new_list.append(item) return new_list"},{"prompt":"Write a Python program to generate a random number between 1 and 10.","completion":"import random random_num = random.randint(1, 10) print(random_num)"},{"prompt":"Build an AIpowered text summarizer in Python using natural language processing techniques.","completion":"import nltk import re from nltk.corpus import stopwords from nltk.tokenize import sent_tokenize, word_tokenize from nltk.stem import PorterStemmer # create a function to preprocess the text def preprocess(text): # tokenize the given text word_tokens = word_tokenize(text) # remove stopwords filtered_words = [w for w in word_tokens if not w in stopwords.words('english')] # create a Porter Stemmer object ps = PorterStemmer() # stem the remaining words stemmed_words = [ps.stem(w) for w in filtered_words] # return preprocessed words return stemmed_words # create a function to generate a summary def summarize(text): # preprocess the given text words = preprocess(text) # compute the frequency of each word word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 # find the most frequent words most_freq_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[:3] # retrieve the sentences containing those words sentences = sent_tokenize(text) most_freq_words_sentences = [] for sentence in sentences: for word, freq in most_freq_words: if word in sentence.lower(): most_freq_words_sentences.append(sentence) # create the summary summary = ' '.join(most_freq_words_sentences) # return the summary return summary"},{"prompt":"Write a function that takes in two strings, compares them, and returns the longer string. String 1: Python String 2: C++","completion":"def compareLongestString(str1, str2): if len(str1) > len(str2): longestString = str1 elif len(str2) > len(str1): longestString = str2 else: longestString = \\"Strings have the same length\\" return longestString print(compareLongestString(\\"Python\\", \\"C++\\"))"},{"prompt":"Create a Python class with a method to sum two numbers.","completion":"class Sum: def add_two_numbers(self, x, y): return x + y"},{"prompt":"Create a python program optimize a function with two variables such that it returns the maximum value","completion":"import numpy as np def optimize_function(f, x_range, y_range): \\"\\"\\" Optimizes a given function using brute force search over the specified range Parameters: f (func): Function to be optimized x_range (tuple): Range of x over which to search for optimal values y_range (tuple): Range of y over which to search for optimal values Returns: tuple: Optimal x and y values \\"\\"\\" max_val = float(\\"-inf\\") optimal_x = 0 optimal_y = 0 for x in np.arange(*x_range): for y in np.arange(*y_range): val = f(x, y) if val > max_val: optimal_x, optimal_y = x, y max_val = val return (optimal_x, optimal_y) if __name__ == '__main__': def f(x, y): return x**2 + y**2 optimal_x, optimal_y = optimize_function(f, (-5, 5), (-5, 5)) print(optimal_x, optimal_y)"},{"prompt":"Model a logistic regression algorithm using Python to predict a binary target: true or false. [[0,0], [0,1], [1,0], [1,1]], [1,1,0,1]","completion":"import numpy as np X = np.array([[0,0], [0,1], [1,0], [1,1]]) y = np.array([1,1,0,1]) from sklearn.linear_model import LogisticRegression clf = LogisticRegression(random_state=0).fit(X, y) print(\\"Prediction:\\", clf.predict([[2,2]]))"},{"prompt":"Design a Python procedure to remove vowels from a string.","completion":"def removeVowels(inputString): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] outputString = \\"\\" for char in inputString: if char not in vowels: outputString += char return outputString"},{"prompt":"Write a Python program to do the following: Create a function that takes two numbers as arguments and returns their product.","completion":"def product(x, y): return x * y"},{"prompt":"Write a Python program to enter two integers as arguments and calculate the sum of them. Two integer","completion":"def calculate_sum(num1, num2): sum = num1 + num2 return sum num1 = int(input('Enter first number: ')) num2 = int(input('Enter second number: ')) result = calculate_sum(num1, num2) print('The sum of the two numbers is:', result)"},{"prompt":"Create a python program to generate a maze with the given width and height. width=5, height=5","completion":"# Generate a maze with the given width and height from random import randint def generate_maze(width, height): # Create the grid of the maze maze_grid = [[0 for x in range(width)] for y in range(height)] # Generate walls and paths for row in range(height): for column in range(width): if row == 0 and column == 0: maze_grid[row][column] = 0 elif row == 0 or column == 0: maze_grid[row][column] = 0 if randint(0, 1) else 1 elif row == width-1 or column == height-1: maze_grid[row][column] = 0 else: maze_grid[row][column] = randint(0, 2) return maze_grid # Generate a maze of 5x5 maze = generate_maze(5,5) for row in maze: print(row)"},{"prompt":"mplement a function in Python to remove all instances of an item from a list. [1, 2, 1, 3, 4, 1], 1","completion":"def remove_item(list, item): while item in list: list.remove(item) return list result = remove_item([1, 2, 1, 3, 4, 1], 1) print(result)"},{"prompt":"Generate a Python function that takes a list and a number as input and assigns the number to each item in the list. [2, 3, 4, 5], 7","completion":"def assign_value(lst, num): for i in range(len(lst)): lst[i] = num return lst print(assign_value([2, 3, 4, 5], 7)) # Output: [7, 7, 7, 7]"},{"prompt":"Generate a Python dictionary which records country names and their respective capitals.","completion":"country_capitals = {'USA': 'Washington DC', 'Canada': 'Ottawa', 'Germany': 'Berlin', 'France': 'Paris', 'UK': 'London', 'India': 'New Delhi' }"},{"prompt":"Create a WHILE loop in Python to print the numbers starting from 5 to 1.","completion":"i = 5 while i > 0: print (i) i -= 1"},{"prompt":"Write a Python script to concatenate two strings.","completion":"def concatenate(word1, word2): return word1 + word2"},{"prompt":"Using a language of your choice, create a script that takes a number as an input n and finds the nth Prime number. 5","completion":"# Python3 program to find nth prime number import math def isPrime(n): # Corner cases if (n <= 1): return False if (n <= 3): return True # This is checked so that we can skip # middle five numbers in below loop if (n % 2 == 0 or n % 3 == 0): return False i = 5 while(i * i <= n) : if (n % i == 0 or n % (i + 2) == 0) : return False i = i + 6 return True # Function to find nth prime number def nthPrime(n) : prime = [2] num = 3 while(len(prime) < n): if (isPrime(num)): prime.append(num) num += 2 return prime[-1] # Driver program if __name__ == \\"__main__\\": n = 5 print(\\"Nth Prime Number is\\", nthPrime(n)) # This code is contributed by mits"},{"prompt":"Write a Python script to generate a dictionary that contains (i, i*i) such that i is an integer from 1 to n (both included). 3","completion":"n = 3 my_dict = {} for i in range(1, n+1): my_dict[i] = i * i print(my_dict)"},{"prompt":"Generate a Python program to classify text sentiment. The program should take two strings as inputs: a sentence and a class label. It should return the predicted sentiment class (positive or negative). Sentence: I like this place. Class Label: positive","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def classify_sentiment(sentence, class_label): \\"\\"\\" Classifies sentiment based on a given sentence and class label Args: sentence (str): The sentence to classify sentiment for class_label (str): The class label to use as a reference Returns: str: The predicted sentiment class (positive/negative) \\"\\"\\" sid = SentimentIntensityAnalyzer() sentiment = sid.polarity_scores(sentence)['compound'] if sentiment >= 0.05: return \\"positive\\" else: return \\"negative\\" classify_sentiment(\\"I like this place.\\", \\"positive\\") # returns \\"positive\\""},{"prompt":"Create a Python program to normalize a given list of strings by removing leading and trailing whitespace, and converting all letters to lowercase. [ HELLO , WorLD , HeLlo, DELL]","completion":"list_of_strings = [\\" HELLO \\", \\" WorLD \\", \\"HeLlo\\", \\"DELL\\"] normalized_strings = [s.strip().lower() for s in list_of_strings]"},{"prompt":"Develop a function to calculate the GCD of two given numbers in Python.","completion":"def gcd(a, b): if (b == 0): return a return gcd(b, a % b)"},{"prompt":"Given two lists A and B, write a python program to find the intersection of those two lists. A = [1, 5, 10, 15, 20] B = [3, 4, 5, 6, 15]","completion":"def intersection(A,B): result = [] for element in A: if element in B: result.append(element) return result"},{"prompt":"Create a Python function to normalize a list of strings by converting each string to lowercase and stripping any leading and trailing whitespaces. [' this ', 'Is A TEST', 'WoRd']","completion":"def normalize(words): \\"\\"\\"Normalizes a list of strings by converting each to lowercase and stripping any leading or trailing whitespaces.\\"\\"\\" return [word.lower().strip() for word in words]"},{"prompt":"Add a function to this Python program to maximize the accuracy of the output def classify_numbers(numbers): if len(numbers) == 0: return 0 total = 0 for n in numbers: total += n if total / len(numbers) > 5: return 1 else: return 0","completion":"def classify_numbers(numbers): if len(numbers) == 0: return 0 total = 0 for n in numbers: total += n if total / len(numbers) > 5: return 1 else: return 0 def check_input(numbers): for n in numbers: if not isinstance(n, int): raise ValueError(\\"Input must be a list of integers.\\")"},{"prompt":"Write a Python program to search an element in a list using linear search.","completion":"def linear_search(lst, x): for i in range(len(lst)): if lst[i] == x: return i return -1"},{"prompt":"Design a visualization using Dash in Python that displays hospitality data. This visualization should include an interactive 3D line chart that shows the trend in data input by the user. Not applicable","completion":"import dash import dash_cytoscape as cyto import plotly.graph_objects as go app = dash.Dash(__name__) # create 3D line chart using Plotly x_values = [0,0.2,0.4,0.6,0.8,1] # just example values y_values = [0,0.5,1,2,1.5,3] # just example values z_values = [0,1,2,3,4,4] # just example values trace1 = go.Scatter3d(x = x_values, y = y_values, z = z_values, mode = 'lines', line = dict( color = 'red', width = 5 ) ) layout= go.Layout(scene=dict(aspectmode='cube')) # create Dash Cytoscape component cyto_comp = cyto.Cytoscape( id='dash-cyto', elements=[], stylesheet=[], layout={'name': 'preset'} ) # display elements app.layout = dash.Div([ dash.Div([ trace1 ], style={'width': '50%'}), cyto_comp ]) if __name__ == '__main__': app.run_server(debug=True)"},{"prompt":"Create a class in Python to represent a complex number leveraging operator overloading in Python.","completion":"class ComplexNumber: \\"\\"\\"Represent a complex number.\\"\\"\\" def __init__(self, real, imaginary): self.real = real self.imaginary = imaginary def __add__(self, other): return ComplexNumber(self.real + other.real, self.imaginary + other.imaginary) def __mul__(self, other): return ComplexNumber(self.real*other.real - self.imaginary*other.imaginary, self.real*other.imaginary + self.imaginary*other.real)"},{"prompt":"Write an algorithm to optimize an implementation of an algorithm given in Python. # naive implementation code def insertionSort(arr): n = len(arr) for i in range(1, n): key = arr[i] j = i1 while j >=0 and key < arr[j] : arr[j+1] = arr[j] j = 1 arr[j+1] = key","completion":"def insertionSort(arr): n = len(arr) for i in range(1, n): key = arr[i] j = binarySearch(arr, key, 0, i - 1) for k in range(i-1, j-1, -1): arr[k+1] = arr[k] arr[j] = key def binarySearch(arr, key, start, end): if (end - start == 1): if (key < arr[start]): return start else: return end if (end == start): return start mid = start + (end - start) // 2 if (key < arr[mid]): return binarySearch(arr, key, start, mid) else: return binarySearch(arr, key, mid, end)"},{"prompt":"Create a Data Science program in Python that takes a set of numeric data and categorizes them into groups based on similarity. data = [1,2,3,4,5]","completion":"import numpy as np def classify_data(data): clusters = {} data = np.array(data) mean = np.mean(data) for x in data: if x < mean: if 'low' in clusters: clusters['low'].append(x) else: clusters['low'] = [x] else: if 'high' in clusters: clusters['high'].append(x) else: clusters['high'] = [x] return clusters clusters = classify_data(data) print(clusters)"},{"prompt":"Write a Python program to implement the Naive Bayes algorithm.","completion":"# Importing the libraries import numpy as np import matplotlib.pyplot as plt import pandas as pd # Importing the dataset dataset = pd.read_csv('Social_Network_Ads.csv') X = dataset.iloc[:, [2, 3]].values y = dataset.iloc[:, 4].values # Splitting the dataset into the Training set and Test set from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0) # Feature Scaling from sklearn.preprocessing import StandardScaler sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test) # Fitting Naive Bayes to the Training set from sklearn.naive_bayes import GaussianNB classifier = GaussianNB() classifier.fit(X_train, y_train) # Predicting the Test set results y_pred = classifier.predict(X_test) # Making the Confusion Matrix from sklearn.metrics import confusion_matrix cm = confusion_matrix(y_test, y_pred) # Visualising the Training set results from matplotlib.colors import ListedColormap X_set, y_set = X_train, y_train X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01), np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01)) plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75, cmap = ListedColormap(('red', 'green'))) plt.xlim(X1.min(), X1.max()) plt.ylim(X2.min(), X2.max()) for i, j in enumerate(np.unique(y_set)): plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j) plt.title('Naive Bayes (Training set)') plt.xlabel('Age') plt.ylabel('Estimated Salary') plt.legend() plt.show()"},{"prompt":"Please construct a function in Python that constructs and returns a dictionary containing all unique characters in a given string. Example String: missisippi","completion":"def unique_characters(string): unique_chars = {} for char in string: if char in unique_chars: continue else: unique_chars[char] = True return unique_chars result = unique_characters('missisippi') print(result) # Output: {'m': True, 'i': True, 's': True, 'p': True}"},{"prompt":"Develop a Python class with private attributes, a public method to get the private attributes, and a public method to change the private attributes.","completion":"class MyClass: def __init__(self): self.__private_attr = 0 def get_private_attr(self): return self.__private_attr def set_private_attr(self, value): self.__private_attr = value"},{"prompt":"Write a Python program to classify a given sentence based on its sentiment. Input sentence: I hate Mondays.","completion":"from textblob import TextBlob input_sentence = \\"I hate Mondays\\" sentiment = TextBlob(input_sentence).sentiment.polarity if sentiment > 0: print(\\"The sentiment is 'positive'\\") elif sentiment == 0: print(\\"The sentiment is 'neutral'\\") else: print(\\"The sentiment is 'negative'\\")"},{"prompt":"Optimize a Python program to check for prime numbers def isPrime(n): for i in range(2, n): if n % i == 0: return False return True num = 23 if isPrime(num): print(Number is prime) else: print(Number is not prime)","completion":"def isPrime(n): if n <= 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True num = 23 if isPrime(num): print(\\"Number is prime\\") else: print(\\"Number is not prime\\")"},{"prompt":"Develop a Neural Network model in Python that predicts stock prices for a given company Not applicable","completion":"#import the necessary packages import numpy as np import pandas as pd import tensorflow as tf #read in the training dataset df = pd.read_csv('data.csv') #initializing the training data X = df['Open'] y = df['Close'] #creating and tuning the model model = tf.keras.Sequential() model.add(tf.keras.layers.Dense(64, activation='relu', input_dim=1)) model.add(tf.keras.layers.Dense(64, activation='relu')) model.add(tf.keras.layers.Dense(1)) model.compile(optimizer='adam', loss='mse', metrics=['mae']) model.fit(X, y, epochs=100) #evaluating the model test_X = np.linspace(0, 1, 10) test_y = model.predict(test_X) #plotting results plt.plot(test_X, test_y, 'r') plt.title('Stock Price Prediciton') plt.xlabel('Open Price') plt.ylabel('Predicted Close Price') plt.show()"},{"prompt":"Develop a python program to find the maximum element in a dictionary sampleDict = {'A': 12, 'B': 17, 'C': 3}","completion":"def findMax(sampleDict): max_value = 0 max_key = '' for key, value in sampleDict.items(): if value > max_value: max_value = value max_key = key return max_key, max_value # Driver's code sampleDict = {'A': 12, 'B': 17, 'C': 3} max_key, max_value = findMax(sampleDict) print(\\"The maximum element in the dictionary is :\\", max_key, max_value)"},{"prompt":"Create a Python program to remove all punctuations from a given sentence. sentence = This is, a sentence with punctuations!","completion":"import string def remove_punctuations(sentence): punctuations = '''!()-[]{};:'\\",<>./?@#%^&*_~''' sentence_no_punctuations = \\"\\" for char in sentence: if char not in punctuations: sentence_no_punctuations = sentence_no_punctuations + char return sentence_no_punctuations sentence = \\"This is, a sentence with punctuations!\\" print(remove_punctuations(sentence)) # prints This is a sentence with punctuations"},{"prompt":"Create a Python program to generate a report summarizing the results of different machine learning algorithms. The results obtained from running 5 different Machine Learning algorithms on a dataset: Logistic Regression, Linear Regression, KNearest Neighbors, Decision Trees, and Support Vector Machines.","completion":"import pandas as pd # Load the results for each algorithm lr = pd.read_csv('logistic_regression.csv') linreg = pd.read_csv('linear_regression.csv') knn = pd.read_csv('knn.csv') dtree = pd.read_csv('dtree.csv') svm = pd.read_csv('svm.csv') # Create a summary dataframe data = { 'Algorithm': ['Logistic Regression', 'Linear Regression', 'K-Nearest Neighbors', 'Decision Trees', 'Support Vector Machines'], 'Accuracy': [lr['Accuracy'].mean(), linreg['Accuracy'].mean(), knn['Accuracy'].mean(), dtree['Accuracy'].mean(), svm['Accuracy'].mean()], 'F1-Score': [lr['F1-Score'].mean(), linreg['F1-Score'].mean(), knn['F1-Score'].mean(), dtree['F1-Score'].mean(), svm['F1-Score'].mean()] } summary = pd.DataFrame(data) print(summary)"},{"prompt":"Can you provide a Python program to produce the following output?","completion":"def print_sequence(): for i in range(1, 7): for j in range (1, i+1): print(j, end=\\"\\") print() print_sequence()"},{"prompt":"Create a class in Python and define a method that multiplies two numbers.","completion":"class Multiplier: def multiply(self, num1, num2): return num1 * num2 m = Multiplier() print(m.multiply(2, 3))"},{"prompt":"Write a Python function to print the first n rows of Pascal's triangle. 5","completion":"def pascal_triangle(rows): triangle = [[1]] for i in range(rows - 1): last_row = triangle[-1] new_row = [1] for j in range(len(last_row) - 1): new_row.append(last_row[j] + last_row[j+1]) new_row.append(1) triangle.append(new_row) for row in triangle: print(row) pascal_triangle(5)"},{"prompt":"Write a Python program to generate a list of squares of values from 1 to a given input number.","completion":"def generate_squares(n): res = [] for i in range(1, n+1): res.append(i**2) return res res = generate_squares(n)"},{"prompt":"Create a basic chatbot in Python to respond to user queries Not applicable","completion":"import re def chatbot_response(user_input): user_input = user_input.lower() # Check for Greeting if re.search(\\"hello|hi|sup\\", user_input): return \\"Hey there!\\" elif re.search(\\"bye\\", user_input): return \\"Goodbye\\" elif re.search(\\"what's your name\\", user_input): return \\"My name is ChatBot\\" else: return \\"I don't understand\\""},{"prompt":"Write a Python program to search a given string for any repeated characters. AAAAB","completion":"def find_repeat_characters(string): repeat_characters = set() for char in string: if string.count(char) > 1 and char not in repeat_characters: repeat_characters.add(char) return repeat_characters string = 'AAAAB' print(find_repeat_characters(string)) # {'A'}"},{"prompt":"Write a Python script to detect duplicate data in two columns in an Excel spreadsheet. Sheet name: Customers Columns: Name and Address","completion":"import xlrd # Give the location of the file loc = (\\"Customers.xlsx\\") # To open Workbook wb = xlrd.open_workbook(loc) sheet = wb.sheet_by_name(\\"Customers\\") # Extracting Column information name and address name_data = sheet.col_values(0) adress_data = sheet.col_values(1) #printing Column data print(\\"Name Data\\") print(name_data) print(\\"Address Data\\") print(adress_data) #Finding Duplicate Values duplicate_name = [] for n in range(len(name_data)): for i in range(n+1, len(name_data)): if(name_data[n] == name_data[i]): duplicate_name.append(name_data[n]) duplicate_adress = [] for a in range(len(adress_data)): for b in range(a+1, len(adress_data)): if(adress_data[a] == adress_data[b]): duplicate_adress.append(adress_data[a]) print(\\"Duplicate Name data\\") print(duplicate_name) print(\\"Duplicate Adress data\\") print(duplicate_adress)"},{"prompt":"Create a Natural Language Processing Assistant in python which can identify topics from a given dialogue and respond appropriately. Dialogue: Hi, my name is John. I am interested in learning more about machine learning.","completion":"import nltk from nltk.stem import WordNetLemmatizer # initialize lemmatizer lemmatizer = WordNetLemmatizer() # tokenize dialogue words = nltk.word_tokenize(dialogue) # use pos_tagging to identify the topics tagged_words = nltk.pos_tag(words) # lemmatize words lemmatized_words = [lemmatizer.lemmatize(word) for word in words] # extract topics topics = [word for word in lemmatized_words if word[1] in ['NN', 'NNS']] # respond appropriately response = 'hello John, it's nice to meet you. So you're interested in learning more about ' + ', '.join(topics) + '?'"},{"prompt":"Create a webcrawler application in Python. Not applicable","completion":"import urllib.request import re from bs4 import BeautifulSoup # Set seed URL seed_url = \\"https://www.example.com\\" # Parse page def parse(url): html = urllib.request.urlopen(url).read().decode('utf-8') soup = BeautifulSoup(html, 'lxml') urls = [a['href'] for a in soup.find_all('a', href=True) if a['href'].startswith('http') and not re.search('example', a['href'])] return urls # Crawl def crawl(seed_url): visited = [] queue = [seed_url] while queue: url = queue.pop() visited.append(url) links = parse(url) for link in links: if link not in visited and link not in queue: queue.append(link) print(\\"Visited: {}\\".format(url)) crawl(seed_url)"},{"prompt":"Can you suggest a Python class to store and validate data?","completion":"class DataStorage: def __init__(self, data): self.data = data self._validate_data() def _validate_data(self): \\"\\"\\"Validates the data stored in the DataStorage object.\\"\\"\\" for key, value in self.data.items(): if not isinstance(value, str): raise TypeError('All data must be strings')"},{"prompt":"Design a decision tree classifier in Python to distinguish between apples and oranges.","completion":"#importing libraries from sklearn import tree import numpy as np # preparing the data # features features = [[140,1],[130,1],[150,0],[170,0]] # target target = ['apple','apple','orange','orange'] # training the classifier clf = tree.DecisionTreeClassifier() clf = clf.fit(features, target) # testing the classifier test_sample = [160,0] test_sample = np.array(test_sample).reshape(1,2) prediction = clf.predict(test_sample) print(prediction)"},{"prompt":"Optimize the Python code below so that it takes less resources and runs faster. n = 50000 obj = [] for i in range(n): obj.append(i)","completion":"n = 50000 obj = list(range(n))"},{"prompt":"Create a Python application for predicting house prices using the Boston Housing dataset. Specifically, the application should train a linear regression model and predict the median house prices given the number of rooms and other attributes as inputs. [ {'number_of_rooms': 1, 'zoned_land_usage': 2, 'accessibility_to_highways': 1, 'house_age': 50, 'population_density': 6.5}, {'number_of_rooms': 8, 'zoned_land_usage': 4, 'accessibility_to_highways': 3, 'house_age': 60, 'population_density': 4.0}, {'number_of_rooms': 3, 'zoned_land_usage': 4, 'accessibility_to_highways': 4, 'house_age': 65, 'population_density': 11.3} ]","completion":"import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.datasets import load_boston data = load_boston() x = data[\\"data\\"] y = data[\\"target\\"] lr = LinearRegression() lr.fit(x, y) input_data = [[1, 2, 1, 50, 6.5], [8, 4, 3, 60, 4.0], [3, 4, 4, 65, 11.3]] predictions = lr.predict(input_data) print(predictions)"},{"prompt":"Create a program in Python to generate a table of multiplication up to 12 x 12.","completion":"def multiplication_table(): for i in range(1, 13): for j in range(1, 13): print(\\"{:>2}\\".format(str(i*j)), end=' ') print() multiplication_table()"},{"prompt":"Demonstrate how tog concatenate two strings in Python.","completion":"a = \\"Hello\\" b = \\"World!\\" c = a + b print(c)"},{"prompt":"Create a Python program to convert a given string to an integer by removing all nonnumeric characters. 29A3B8746","completion":"def remove_non_numeric(str): res = \\"\\" for c in str: if c.isnumeric(): res += c return int(res) s = \\"29A3B8746\\" integer = remove_non_numeric(s) print(integer) // 2938746"},{"prompt":"Code a binary search algorithm in Python.","completion":"def binary_search(array, target): lower = 0 upper = len(array) while lower < upper: x = lower + (upper - lower) // 2 val = array[x] if target == val: return x elif target > val: if lower == x: break lower = x elif target < val: upper = x return -1"},{"prompt":"Generate a python code to find the longest nonrepeating substring in the given string. b","completion":"def longest_non_repeating_substring(string): longest_substring = \\"\\" substring = \\"\\" for char in string: if char not in substring: substring += char else: if len(substring) > len(longest_substring): longest_substring = substring substring = char # check if the last substring is the longest one if len(substring) > len(longest_substring): longest_substring = substring return longest_substring"},{"prompt":"mplement a solutions for the Tower of Hanoi problem using Python. int n = 4","completion":"def hanoi(n, source, aux, dest): if n == 1: print('Move disk 1 from {0} to {1}'.format(source, dest)) else: hanoi(n-1, source, dest, aux) print('Move disk {0} from {1} to {2}'.format(n, source, dest)) hanoi(n-1, aux, source, dest) # Driver program n = 4 hanoi(n, 'a', 'b', 'c')"},{"prompt":"Assume a dataset X that contains columns with features and labels. Write a python script to process the dataset for preprocessing steps for machine learning model training.","completion":"#import dataset import pandas as pd #define data X = pd.DataFrame() #perform data normalization X = (X-X.mean())/X.std() #one-hot encode the labels X = pd.get_dummies(X, columns=['label']) #split dataset into train and test x_train, x_test, y_train, y_test = train_test_split(X.drop(labels = 'label',axis = 1), X['label'], test_size = 0.2) #transform the train and test data scaler = StandardScaler() x_train = scaler.fit_transform(x_train) x_test = scaler.transform(x_test)"},{"prompt":"Design and write a Python program to calculate the sum of the first n natural numbers.","completion":"def sum_naturals(n): total = 0 for num in range(n + 1): total += num return total"},{"prompt":"This code generates connector models using CadQuery. To run the script, ensure that freecad (v1.5 and v1.6 have been tested) and cadquery FreeCAD plugin (v0.3.0 and v0.2.0 have been tested) are installed. To generate VRML/STEP files, use the export_conn_jst_xh script of the parent directory. The script generates models for the 4UCON 17809 series connectors. To generate a specific part, set the part_to_build variable to the desired part key. The generate_part function generates the pins, body, and contacts for the specified part key. The pins, body, and contacts can be displayed using the show function.","completion":"#!/usr/bin/env python3 # -*- coding: utf-8 -*- # # CadQuery script to generate connector models requirements freecad (v1.5 and v1.6 have been tested) cadquery FreeCAD plugin (v0.3.0 and v0.2.0 have been tested) https://github.com/jmwright/cadquery-freecad-module This script can be run from within the cadquery module of freecad. To generate VRML/ STEP files for, use export_conn_jst_xh script of the parent directory. #* This is a cadquery script for the generation of MCAD Models. * #* * #* Copyright (c) 2016 * #* Rene Poeschl https://github.com/poeschlr * #* All trademarks within this guide belong to their legitimate owners. * #* * #* This program is free software; you can redistribute it and/or modify * #* it under the terms of the GNU General Public License (GPL) * #* as published by the Free Software Foundation; either version 2 of * #* the License, or (at your option) any later version. * #* for detail see the LICENCE text file. * #* * #* This program is distributed in the hope that it will be useful, * #* but WITHOUT ANY WARRANTY; without even the implied warranty of * #* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * #* GNU Library General Public License for more details. * #* * #* You should have received a copy of the GNU Library General Public * #* License along with this program; if not, write to the Free Software * #* Foundation, Inc., * #* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA * #* * #* The models generated with this script add the following exception: * #* As a special exception, if you create a design which uses this symbol, * #* and embed this symbol or unaltered portions of this symbol into the * #* design, this symbol does not by itself cause the resulting design to * #* be covered by the GNU General Public License. This exception does not * #* however invalidate any other reasons why the design itself might be * #* covered by the GNU General Public License. If you modify this symbol, * #* you may extend this exception to your version of the symbol, but you * #* are not obligated to do so. If you do not wish to do so, delete this * #* exception statement from your version. * #**************************************************************************** __title__ = \\"model description for 4UCON 17809 series connectors\\" __author__ = \\"hackscribble\\" __Comment__ = 'model description for 4UCON 17809 series connectors using cadquery' ___ver___ = \\"0.3 18/06/2020\\" import cadquery as cq from Helpers import show from collections import namedtuple import FreeCAD from conn_4ucon_17809_params import * from ribbon import Ribbon def generate_straight_pin(params, pin_1_side): foot_height = seriesParams.foot_height pin_width=seriesParams.pin_width pin_depth=seriesParams.pin_depth pin_height=seriesParams.pin_height pin_inside_distance=seriesParams.pin_inside_distance pin_thickness = seriesParams.pin_thickness chamfer_long = seriesParams.pin_chamfer_long chamfer_short = seriesParams.pin_chamfer_short sign = 1 if pin_1_side else -1 pin=cq.Workplane(\\"YZ\\").workplane(offset=-pin_width/2.0) .moveTo(0, foot_height) .line(sign*pin_thickness/2,0) .line(sign*1.27,-foot_height) .line(0, -2.54) .line(sign*-pin_thickness,0) .line(0, 2.54) .line(sign*-1.27, foot_height) .line(0,1) .close() .extrude(pin_width).edges(\\"|X\\").fillet(0.07) return pin def generate_2_pin_group(params, pin_1_side): pin_pitch=params.pin_pitch pin_y_pitch=params.pin_y_pitch num_pins=params.num_pins pin_a = generate_straight_pin(params, pin_1_side).translate((0, -pin_y_pitch/2, 0)) pin_b = pin_a.translate((0, -2 * pin_y_pitch, 0)) pin_group = pin_a.union(pin_b) return pin_group def generate_pins(params): pin_pitch=params.pin_pitch num_pins=params.num_pins pins = generate_2_pin_group(params, pin_1_side=True) for i in range(1, num_pins // 2): pins = pins.union(generate_2_pin_group(params, i % 2 == 0).translate((i*pin_pitch,0,0))) return pins def generate_2_contact_group(params): pin_y_pitch=params.pin_y_pitch foot_height = seriesParams.foot_height pin_thickness = seriesParams.pin_thickness pin_width=seriesParams.pin_width y_offset = -(2*pin_y_pitch) c_list = [ ('start', {'position': (pin_y_pitch, foot_height), 'direction': 90.0, 'width':pin_thickness}), ('line', {'length': 4.5}), ('arc', {'radius': 0.2, 'angle': 35.0}), ('line', {'length': 3}), ('arc', {'radius': 2.0, 'angle': -70.0}), ('line', {'length': 2}), ('arc', {'radius': 0.2, 'angle': 35.0}), ('line', {'length': 2.8}), ] ribbon = Ribbon(cq.Workplane(\\"YZ\\").workplane(offset=-pin_width/2.0), c_list) contact1 = ribbon.drawRibbon().extrude(pin_width) contact2 = contact1.mirror(\\"XZ\\") contact1 = contact1.union(contact2).translate((0,-3*pin_y_pitch/2.0,0)) return contact1 def generate_contacts(params): num_pins=params.num_pins pin_pitch=params.pin_pitch pair = generate_2_contact_group(params) contacts = pair for i in range(0, num_pins // 2): contacts = contacts.union(pair.translate((i*pin_pitch,0,0))) return contacts def generate_body(params, calc_dim): pin_inside_distance = seriesParams.pin_inside_distance pin_width = seriesParams.pin_width num_pins = params.num_pins pin_pitch = params.pin_pitch pin_y_pitch=params.pin_y_pitch body_length = calc_dim.length body_width = seriesParams.body_width body_height = seriesParams.body_height body_fillet_radius = seriesParams.body_fillet_radius marker_x_inside = seriesParams.marker_x_inside marker_y_inside = seriesParams.marker_y_inside marker_size = seriesParams.marker_size marker_depth = seriesParams.marker_depth foot_height = seriesParams.foot_height foot_width = seriesParams.foot_width foot_length = seriesParams.foot_length foot_inside_distance = seriesParams.foot_inside_distance slot_length = calc_dim.slot_length slot_outside_pin = seriesParams.slot_outside_pin slot_width = seriesParams.slot_width slot_depth = seriesParams.slot_depth slot_chamfer = seriesParams.slot_chamfer hole_width = seriesParams.hole_width hole_length = seriesParams.hole_length hole_offset = seriesParams.hole_offset hole_depth = seriesParams.hole_depth top_void_depth = seriesParams.top_void_depth top_void_width = seriesParams.top_void_width bottom_void_width = calc_dim.bottom_void_width recess_depth = seriesParams.recess_depth recess_large_width = seriesParams.recess_large_width recess_small_width = seriesParams.recess_small_width recess_height = seriesParams.recess_height x_offset = (((num_pins // 2) - 1)*pin_pitch)/2.0 y_offset = -(1.5*pin_y_pitch) # body body = cq.Workplane(\\"XY\\").workplane(offset=foot_height).moveTo(x_offset, y_offset) .rect(body_length, body_width).extrude(body_height) .edges(\\"|Z\\").fillet(body_fillet_radius).edges(\\">Z\\").fillet(body_fillet_radius) # pin 1 marker body = body.faces(\\">Z\\").workplane().moveTo(-(body_length/2)+marker_x_inside, (body_width/2)-marker_y_inside) .line(-marker_size,-marker_size/2).line(0, marker_size).close().cutBlind(-marker_depth) # foot foot = cq.Workplane(\\"YZ\\").workplane(offset=(body_length/2)-foot_inside_distance) .moveTo(y_offset - foot_length/2, 0) .line(foot_length*0.2,0) .line(0,foot_height/2) .line(foot_length*0.6,0) .line(0,-foot_height/2) .line(foot_length*0.2,0) .line(0,foot_height) .line(-foot_length,0) .close() .extrude(-foot_width) foot_mirror = foot.mirror(\\"YZ\\") foot = foot.union(foot_mirror).translate((x_offset, 0, 0)) body = body.union(foot) # slot body = body.faces(\\">Z\\").workplane().rect(slot_length, slot_width).cutBlind(-slot_depth) chamfer = cq.Workplane(\\"XY\\").workplane(offset=foot_height+body_height).moveTo(x_offset, y_offset) .rect(slot_length+2*slot_chamfer, slot_width+2*slot_chamfer) .workplane(offset=-slot_chamfer).rect(slot_length, slot_width) .loft(combine=True) body = body.cut(chamfer) # contact holes body = body.faces(\\">Z\\").workplane().center(0, hole_offset) .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, hole_length) .center(0, -2*hole_offset) .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, hole_length) .cutBlind(-2) # internal void body = body.faces(\\">Z\\").workplane(offset=-hole_depth) .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, top_void_width) .cutBlind(-(top_void_depth-hole_depth)) body = body.faces(\\">Z\\").workplane(offset=-top_void_depth) .rarray(pin_pitch, 1, (num_pins//2), 1).rect(hole_width, bottom_void_width) .cutBlind(-(body_height-top_void_depth)) # body end recesses body = body.faces(\\">Z\\").workplane().center(body_length/2.0-recess_depth/2.0, 0) .rect(recess_depth, recess_small_width).cutBlind(-recess_height) recess = cq.Workplane(\\"XY\\").workplane(offset=foot_height+body_height).center(x_offset-body_length/2.0+recess_depth/2.0, y_offset) .rect(recess_depth, recess_large_width).extrude(-recess_height).edges(\\">X\\").edges(\\"|Z\\").fillet(0.3) body = body.cut(recess) return body def generate_part(part_key): params = all_params[part_key] calc_dim = dimensions(params) pins = generate_pins(params) body = generate_body(params, calc_dim) contacts = generate_contacts(params) return (pins, body, contacts) # opened from within freecad if \\"module\\" in __name__: part_to_build = 'ucon_17809_02x10_1.27mm' FreeCAD.Console.PrintMessage(\\"Started from CadQuery: building \\" + part_to_build + \\"n\\") (pins, body, contacts) = generate_part(part_to_build) show(pins) show(body) show(contacts)"},{"prompt":"To install TALib, run the following commands: 1. Install numpy: \`pip install numpy\` 2. Install TALib: \`pip install TALib\`","completion":"#!/usr/bin/env python import sys import os import warnings from distutils.dist import Distribution display_option_names = Distribution.display_option_names + ['help', 'help-commands'] query_only = any('--' + opt in sys.argv for opt in display_option_names) or len(sys.argv) < 2 or sys.argv[1] == 'egg_info' # Use setuptools for querying the package, normal builds use distutils if query_only: try: from setuptools import setup except ImportError: from distutils.core import setup else: from distutils.core import setup from distutils.extension import Extension lib_talib_name = 'ta_lib' # the underlying C library's name platform_supported = False for prefix in ['darwin', 'linux', 'bsd', 'sunos']: if prefix in sys.platform: platform_supported = True include_dirs = [ '/usr/include', '/usr/local/include', '/opt/include', '/opt/local/include', ] if 'TA_INCLUDE_PATH' in os.environ: include_dirs.append(os.environ['TA_INCLUDE_PATH']) lib_talib_dirs = [ '/usr/lib', '/usr/local/lib', '/usr/lib64', '/usr/local/lib64', '/opt/lib', '/opt/local/lib', ] if 'TA_LIBRARY_PATH' in os.environ: lib_talib_dirs.append(os.environ['TA_LIBRARY_PATH']) break if sys.platform == \\"win32\\": platform_supported = True lib_talib_name = 'ta_libc_cdr' include_dirs = [r\\"c:ta-libcinclude\\"] lib_talib_dirs = [r\\"c:ta-libclib\\"] if not platform_supported: raise NotImplementedError(sys.platform) # Do not require numpy or cython for just querying the package if not query_only: import numpy include_dirs.insert(0, numpy.get_include()) try: from Cython.Distutils import build_ext has_cython = True except ImportError: has_cython = False for lib_talib_dir in lib_talib_dirs: try: files = os.listdir(lib_talib_dir) if any(lib_talib_name in f for f in files): break except OSError: pass else: warnings.warn('Cannot find ta-lib library, installation may fail.') cmdclass = {} if has_cython: cmdclass['build_ext'] = build_ext ext_modules = [ Extension( 'talib._ta_lib', ['talib/_ta_lib.pyx' if has_cython else 'talib/_ta_lib.c'], include_dirs=include_dirs, library_dirs=lib_talib_dirs, libraries=[lib_talib_name] ) ] setup( name = 'TA-Lib', version = '0.4.10', description = 'Python wrapper for TA-Lib', author = 'John Benediktsson', author_email = 'mrjbq7@gmail.com', url = 'http://github.com/mrjbq7/ta-lib', download_url = 'https://github.com/mrjbq7/ta-lib/releases', classifiers = [ \\"License :: OSI Approved :: BSD License\\", \\"Development Status :: 4 - Beta\\", \\"Operating System :: Unix\\", \\"Operating System :: POSIX\\", \\"Operating System :: MacOS :: MacOS X\\", \\"Operating System :: Microsoft :: Windows\\", \\"Programming Language :: Python\\", \\"Programming Language :: Python :: 2.7\\", \\"Programming Language :: Python :: 3.3\\", \\"Programming Language :: Python :: 3.4\\", \\"Programming Language :: Python :: 3.5\\", \\"Programming Language :: Cython\\", \\"Topic :: Office/Business :: Financial\\", \\"Topic :: Scientific/Engineering :: Mathematics\\", \\"Intended Audience :: Developers\\", \\"Intended Audience :: Science/Research\\", \\"Intended Audience :: Financial and Insurance Industry\\", ], packages = ['talib'], ext_modules = ext_modules, cmdclass = cmdclass, requires = ['numpy'], )"},{"prompt":"Generate a Python script to automatically determine the outcome of a rockpaperscissors game. Not applicable","completion":"import random choices = {'Rock':0, 'Paper':1, 'Scissors':2} def determine_outcome(player1, player2): player1_choice = choices[player1] player2_choice = choices[player2] if (player1_choice - player2_choice) % 3 == 1: return player1 else: return player2 def main(): player1 = input('Enter player 1's choice: ') player2 = input('Enter player 2's choice: ') outcome = determine_outcome(player1, player2) print(f'Player {outcome} wins!') if __name__ == '__main__': main()"},{"prompt":"Build a class in Python that will generate a random number between 1 and 1000.","completion":"import random class RandomNumberGenerator: def generate(self): return random.randint(1, 1000)"},{"prompt":"Create a Python program to add two numbers.","completion":"def add_numbers(a,b): return a + b"},{"prompt":"Generate a Python program to print the Fibonacci series up to nth term. The n value is 6.","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b print(Fibonacci(6))"},{"prompt":"Develop a function to search for a character into a given string and return its index if present. String: Python Character: y","completion":"#function to search for a character def search_char(str, char): idx = -1 for i in range(len(str)): if str[i] == char: idx = i break return idx #call the function str = 'Python' char = 'y' index = search_char(str, char) #print the result if index != -1: print('Character found at index:', index) else: print('Character not found')"},{"prompt":"Optimize this given Python code using list comprehension. word_list = ['hello', 'world', 'good', 'morning'] for i in range(len(word_list)): word_list[i] = word_list[i].upper()","completion":"word_list = ['hello', 'world', 'good', 'morning'] word_list = [word.upper() for word in word_list]"},{"prompt":"Create a simple web page using HTML and CSS to display a list of the top 5 most popular programming languages. Not applicable","completion":"<!DOCTYPE html> <html> <head> <title>Top 5 Programming Languages</title> <style> ul { list-style: none; font-family: sans-serif; font-size: 20px; } li { padding-top: 10px; } </style> </head> <body> <h1>Top 5 Programming Languages</h1> <ul> <li>JavaScript</li> <li>Python</li> <li>Java</li> <li>C#</li> <li>C++</li> </ul> </body> </html>"},{"prompt":"Develop a Python script to generate a Fibonacci series","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"prompt":"Write a Python program to classify the following sentence as either positive or negative. This is an horrible movie","completion":"def classify(sentence): if \\"horrible\\" in sentence: return \\"negative\\" else: return \\"positive\\" sentiment = classify(\\"This is an horrible movie\\") print(sentiment)"},{"prompt":"Design an algorithm in Python to shuffle a standard deck of 52 playing cards. Not applicable","completion":"import random # Function to shuffle a deck of cards def shuffle_cards(cards): # Shuffle the deck random.shuffle(cards) return cards # Driver code if __name__ == '__main__': # Standard deck of 52 playing cards cards = [ 'Ace of Spades', 'Two of Spades', 'Three of Spades', 'Four of Spades', 'Five of Spades', 'Six of Spades', 'Seven of Spades', 'Eight of Spades', 'Nine of Spades', 'Ten of Spades', 'Jack of Spades', 'Queen of Spades', 'King of Spades', 'Ace of Diamonds', 'Two of Diamonds', 'Three of Diamonds', 'Four of Diamonds', 'Five of Diamonds', 'Six of Diamonds', 'Seven of Diamonds', 'Eight of Diamonds', 'Nine of Diamonds', 'Ten of Diamonds', 'Jack of Diamonds', 'Queen of Diamonds', 'King of Diamonds', 'Ace of Clubs', 'Two of Clubs', 'Three of Clubs', 'Four of Clubs', 'Five of Clubs', 'Six of Clubs', 'Seven of Clubs', 'Eight of Clubs', 'Nine of Clubs', 'Ten of Clubs', 'Jack of Clubs', 'Queen of Clubs', 'King of Clubs', 'Ace of Hearts', 'Two of Hearts', 'Three of Hearts', 'Four of Hearts', 'Five of Hearts', 'Six of Hearts', 'Seven of Hearts', 'Eight of Hearts', 'Nine of Hearts', 'Ten of Hearts', 'Jack of Hearts', 'Queen of Hearts', 'King of Hearts' ] # Shuffle Cards result = shuffle_cards(cards) print(\\"Shuffled deck of cards:\\") print(result)"},{"prompt":"Write a code in Python that converts a given string of numbers separated by commas into a list of integers. 1, 2, 3, 4, 5","completion":"def convert_strings_to_list(input_str): # split the input string on ',' input_str_list = input_str.split(',') # create an empty list output_list = [] # loop through each element in the list for i in input_str_list: # convert the element in list to a integer and append it to the output list output_list.append(int(i)) # return the output list return output_list if __name__ == '__main__': list_str = \\"1, 2, 3, 4, 5\\" output_list = convert_strings_to_list(list_str) print(output_list)"},{"prompt":"Write a Python program to filter a list by a given criteria. list = [1,4,5,6,7,14,15] criteria = x > 5","completion":"def filter_list(mylist, criteria): result = [] for item in mylist: if eval(criteria): result.append(item) return result list = [1,4,5,6,7,14,15] criteria = \\"x > 5\\" filtered_list = filter_list(list, criteria) print(filtered_list) # [6, 7, 14, 15]"},{"prompt":"Write a class definition in Python for a custom object called “Employee”, which has two data members: “name”, a String, and “salary”, an integer.","completion":"class Employee: def __init__(self, name, salary): self.name = name self.salary = salary # Driver Code e1 = Employee(\\"John\\", 15000) e2 = Employee(\\"Mary\\", 12000) print(e1.name) print(e1.salary)"},{"prompt":"Generate a program in Python that takes in a list of integers and prints out the second largest element. [1, 2, 3, 4, 5, 6]","completion":"def secondLargest(lst): if (len(lst)< 2): return largest = max(lst[0], lst[1]) second_largest = min(lst[0], lst[1]) for i in range(2, len(lst)): if (largest < lst[i]): second_largest = largest largest = lst[i] else: if (second_largest < lst[i]): second_largest = lst[i] return second_largest # Driver Code lst = [1, 2, 3, 4, 5, 6] ans = secondLargest(lst) if (ans): print(\\"Second Largest Element is :\\", ans) else: print(\\"No Second Largest Element\\")"},{"prompt":"Develop a Python script to perform sentiment analysis on a given text. I'm feeling really great today","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer text = \\"I'm feeling really great today\\" sid = SentimentIntensityAnalyzer() ss = sid.polarity_scores(text) print(ss['compound']) # Prints 0.6249, which is positive sentiment."},{"prompt":"Generate a Python function to convert a given sentence into a list of words. Convert This is a sentence","completion":"def split_sentence(sentence): return sentence.split(\\" \\") sentence = \\"This is a sentence\\" words = split_sentence(sentence) print(words)"},{"prompt":"Create a Python function, that when called with a string argument, will return all of the possible substrings of that string. Not applicable","completion":"def all_substrings(string): sub_strings = [] for i in range(len(string)): for j in range(i+1, len(string)+1): sub_strings.append(string[i:j]) return sub_strings"},{"prompt":"Convert the data model to a Markdown file by running the provided Python script. The resulting Markdown file will contain tables listing all metrics and sources that can be used with Qualitytime, as well as the supported combinations of metrics and sources with their corresponding parameters and configurations.","completion":"\\"\\"\\"Script to convert the data model in a Markdown file.\\"\\"\\" import json import pathlib import re import sys TYPE_DESCRIPTION = dict( url=\\"URL\\", string=\\"String\\", multiple_choice=\\"Multiple choice\\", password=\\"Password\\", integer=\\"Integer\\", date=\\"Date\\", single_choice=\\"Single choice\\", multiple_choice_with_addition=\\"Multiple choice with addition\\", ) def html_escape(text: str) -> str: \\"\\"\\"Escape < and >.\\"\\"\\" return text.replace(\\"<\\", \\"&lt;\\").replace(\\">\\", \\"&gt;\\") def get_data_model(): \\"\\"\\"Return the data model.\\"\\"\\" module_dir = pathlib.Path(__file__).resolve().parent server_src_path = module_dir.parent.parent / \\"components\\" / \\"server\\" / \\"src\\" sys.path.insert(0, str(server_src_path)) from data_model import DATA_MODEL_JSON # pylint: disable=import-error,import-outside-toplevel return json.loads(DATA_MODEL_JSON) def markdown_link(url: str, anchor: str = None) -> str: \\"\\"\\"Return a Markdown link.\\"\\"\\" anchor = anchor or url return f\\"[{anchor}]({url})\\" def markdown_table_row(*cells: str) -> str: \\"\\"\\"Return a Markdown table row.\\"\\"\\" return f\\"| {' | '.join([html_escape(cell) for cell in cells])} |n\\" def markdown_table_header(*column_headers: str) -> str: \\"\\"\\"Return a Markdown table header.\\"\\"\\" headers = markdown_table_row(*column_headers) separator = markdown_table_row(*[\\":\\" + \\"-\\" * (len(column_header) - 1) for column_header in column_headers]) return \\"n\\" + headers + separator def markdown_header(header: str, level: int = 1) -> str: \\"\\"\\"Return a Markdown header.\\"\\"\\" return (\\"n\\" if level > 1 else \\"\\") + \\"#\\" * level + f\\" {header}n\\" def metrics_table(data_model, universal_sources: list[str]) -> str: \\"\\"\\"Return the metrics as Markdown table.\\"\\"\\" markdown = markdown_table_header(\\"Name\\", \\"Description\\", \\"Default target\\", \\"Scale(s)\\", \\"Default tags\\", \\"Sources¹\\") for metric in sorted(data_model[\\"metrics\\"].values(), key=lambda item: str(item[\\"name\\"])): direction = {\\"<\\": \\"≦\\", \\">\\": \\"≧\\"}[metric[\\"direction\\"]] unit = \\"% of the \\" + metric[\\"unit\\"] if metric[\\"default_scale\\"] == \\"percentage\\" else \\" \\" + metric[\\"unit\\"] target = f\\"{direction} {metric['target']}{unit}\\" if len(metric[\\"scales\\"]) == 1: scales = metric[\\"default_scale\\"] else: scales = \\", \\".join( [ f\\"{scale} (default)\\" if scale == metric[\\"default_scale\\"] else scale for scale in sorted(metric[\\"scales\\"]) ] ) tags = \\", \\".join(metric[\\"tags\\"]) sources = [] for source in metric[\\"sources\\"]: if source not in universal_sources: source_name = data_model[\\"sources\\"][source][\\"name\\"] sources.append(f\\"[{source_name}]({metric_source_slug(data_model, metric, source)})\\") markdown += markdown_table_row( metric[\\"name\\"], metric[\\"description\\"], target, scales, tags, \\", \\".join(sorted(sources)) ) markdown += \\"n\\" return markdown def sources_table(data_model, universal_sources: list[str]) -> str: \\"\\"\\"Return the sources as Markdown table.\\"\\"\\" markdown = markdown_table_header(\\"Name\\", \\"Description\\", \\"Metrics\\") for source_key, source in sorted(data_model[\\"sources\\"].items(), key=lambda item: str(item[1][\\"name\\"])): source_name = f\\"[{source['name']}]({source['url']})\\" if \\"url\\" in source else source[\\"name\\"] if source_key in universal_sources: metrics = \\"¹\\" else: metrics = \\", \\".join( [ f\\"[{metric['name']}]({metric_source_slug(data_model, metric, source_key)})\\" for metric in data_model[\\"metrics\\"].values() if source_key in metric[\\"sources\\"] ] ) markdown += markdown_table_row(source_name, source[\\"description\\"], metrics) markdown += \\"n\\" return markdown def metric_source_slug(data_model, metric, source) -> str: \\"\\"\\"Return a slug for the metric source combination.\\"\\"\\" source_name = data_model[\\"sources\\"][source][\\"name\\"] return f\\"#{metric['name']} from {source_name}\\".lower().replace(\\" \\", \\"-\\") def metric_source_table(data_model, metric_key, source_key) -> str: \\"\\"\\"Return the metric source combination as Markdown table.\\"\\"\\" markdown = markdown_table_header(\\"Parameter\\", \\"Type\\", \\"Values\\", \\"Default value\\", \\"Mandatory\\", \\"Help\\") for parameter in sorted( data_model[\\"sources\\"][source_key][\\"parameters\\"].values(), key=lambda parameter: str(parameter[\\"name\\"]) ): if metric_key in parameter[\\"metrics\\"]: name = parameter[\\"name\\"] parameter_type = TYPE_DESCRIPTION[parameter[\\"type\\"]] default_value = parameter[\\"default_value\\"] if isinstance(default_value, list): if not default_value and parameter[\\"type\\"] in (\\"single_choice\\", \\"multiple_choice\\"): default_value = f\\"_all {parameter['short_name']}_\\" else: default_value = \\", \\".join(default_value) if parameter[\\"type\\"] in (\\"single_choice\\", \\"multiple_choice\\"): values = \\", \\".join(sorted(parameter[\\"values\\"])) else: values = \\"\\" mandatory = \\"Yes\\" if parameter[\\"mandatory\\"] else \\"No\\" help_url = markdown_link(parameter[\\"help_url\\"]) if \\"help_url\\" in parameter else parameter.get(\\"help\\", \\"\\") markdown += markdown_table_row(name, parameter_type, values, default_value, mandatory, help_url) markdown += \\"n\\" return markdown def metric_source_configuration_table(data_model, metric_key, source_key) -> str: \\"\\"\\"Return the metric source combination's configuration as Markdown table.\\"\\"\\" configurations = data_model[\\"sources\\"][source_key].get(\\"configuration\\", {}).values() relevant_configurations = [config for config in configurations if metric_key in config[\\"metrics\\"]] if not relevant_configurations: return \\"\\" markdown = markdown_table_header(\\"Configuration\\", \\"Value\\") for configuration in sorted(relevant_configurations, key=lambda config: str(config[\\"name\\"])): name = configuration[\\"name\\"] values = \\", \\".join(sorted(configuration[\\"value\\"], key=lambda value: value.lower())) markdown += markdown_table_row(name, values) markdown += \\"n\\" return markdown def data_model_as_table(data_model) -> str: \\"\\"\\"Return the data model as Markdown table.\\"\\"\\" markdown = markdown_header(\\"Quality-time metrics and sources\\") markdown += ( \\"nThis document lists all [metrics](#metrics) that *Quality-time* can measure and all \\" \\"[sources](#sources) that *Quality-time* can use to measure the metrics. For each \\" \\"[supported combination of metric and source](#supported-metric-source-combinations), it lists the \\" \\"parameters that can be used to configure the source.n\\" ) markdown += markdown_header(\\"Metrics\\", 2) markdown += metrics_table(data_model, universal_sources := [\\"manual_number\\"]) markdown += markdown_header(\\"Sources\\", 2) markdown += sources_table(data_model, universal_sources) markdown += \\"¹) All metrics with the count or percentage scale can be measured using the 'Manual number' source.n\\" markdown += markdown_header(\\"Supported metric-source combinations\\", 2) for metric_key, metric in data_model[\\"metrics\\"].items(): for source_key in metric[\\"sources\\"]: if source_key not in universal_sources: markdown += markdown_header(f\\"{metric['name']} from {data_model['sources'][source_key]['name']}\\", 3) markdown += metric_source_table(data_model, metric_key, source_key) markdown += metric_source_configuration_table(data_model, metric_key, source_key) markdown = re.sub(r\\"n{3,}\\", \\"nn\\", markdown) # Replace multiple consecutive empty lines with one empty line return re.sub(r\\"nn\\", \\"n\\", markdown) # Remove final empty line if __name__ == \\"__main__\\": data_model_md_path = pathlib.Path(__file__).resolve().parent.parent / \\"METRICS_AND_SOURCES.md\\" with data_model_md_path.open(\\"w\\") as data_model_md: data_model_md.write(data_model_as_table(get_data_model()))"},{"prompt":"Write a Python function to insert an element in a given list after a given index. list = [1, 2, 3, 4, 5] index = 2 element = 6","completion":"def insert_element(list, index, element): list.insert(index + 1, element) return list"},{"prompt":"Generate a Python code to take in a list and split it into two halves.","completion":"def split_list(list): size = len(list) split_index = size//2 # Floor value return list[:split_index], list[split_index:] list = [1,2,3,4,5,6,7] first_half, second_half = split_list(list) print(first_half) print(second_half)"},{"prompt":"Design a Python program to compute the sum of the digits of a number. 123","completion":"def sum_of_digits(n): r = 0 while (n > 0): r += n % 10 n //= 10 return r print(sum_of_digits(123)) # 6"},{"prompt":"Create a class in Python that makes a connection to an active database, and closes the connection when the class is deleted.","completion":"class DatabaseConnection: def __init__(self): self.conn = psycopg2.connect(host=\\"localhost\\", database=\\"mydb\\") def __del__(self): self.conn.close()"},{"prompt":"Write a basic web scraper in Python using the requests and BeautifulSoup libraries to extract the titles of articles from a given URL. https://en.wikipedia.org/wiki/Python_(programming_language)","completion":"import requests from bs4 import BeautifulSoup url = 'https://en.wikipedia.org/wiki/Python_(programming_language)' r = requests.get(url) soup = BeautifulSoup(r.content, 'html.parser') articles = soup.find_all('h1', class_='firstHeading') for article in articles: print(article.text)"},{"prompt":"Create a Python class to represent a rectangle.","completion":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def get_area(self): return self.length * self.width"},{"prompt":"Create a function in Python to return the length of the longest word in a list of words. words = [cat, longestword, dog, night]","completion":"def findLongestWordLength(words): longest_length = 0 for word in words: if len(word) > longest_length: longest_length = len(word) return longest_length longest_word_length = findLongestWordLength([\\"cat\\", \\"longestword\\", \\"dog\\", \\"night\\"]) print(longest_word_length)"},{"prompt":"Using the provided inputs, write a python code that calculates the sum of all the elements in the list. my_list = [1,2,3,4,5,6]","completion":"def calculate_sum(my_list): \\"\\"\\" Calculate the sum of all the elements in the list. \\"\\"\\" sum = 0 for elem in my_list: sum += elem return sum my_list = [1,2,3,4,5,6] total_sum = calculate_sum(my_list) print(\\"The sum of all elements in the list is: %d\\" %total_sum)"},{"prompt":"Generate a correct python program to store a dictionary of customer information The dictionary should store customer name, phone number and addre","completion":"customer_dict = {} def store_customer_info(name, phone_number, address): customer_dict[name] = { 'phone_number': phone_number, 'address': address } if __name__ == '__main__': store_customer_info('John Doe', '1234567890', 'New York')"},{"prompt":"mplement a Fourier Transform algorithm in Python. Not applicable","completion":"import numpy as np def fourierTransform(signal): N = signal.shape[0] W = np.exp(2j * np.pi * np.arange(N) / N) fourier = np.dot(signal, W) return fourier"},{"prompt":"Create a Python function to convert a given temperature in Fahrenheit to Celsius. Not applicable","completion":"def fahrenheit_to_celsius(temp_fahr): temp_celsius = (temp_fahr - 32.0) * (5.0/9.0) return temp_celsius # example temp_fahr = 98 temp_celsius = fahrenheit_to_celsius(temp_fahr) print(\\"{0}°F is equal to {1}°C\\".format(temp_fahr,temp_celsius))"},{"prompt":"Construct a Python program to get the first 100 prime numbers Not applicable","completion":"def get_prime_numbers(n): prime_numbers = [] for num in range(2, n+1): for i in range(2, num): if num % i == 0: break else: prime_numbers.append(num) return prime_numbers print(get_prime_numbers(100))"},{"prompt":"Optimize the following python code to search for a substring in a given string. String = “GeeksforGeeks”, Substring = “for”","completion":"def containsSubstring(str, sub): for i in range(len(str)-len(sub)+1): j = 0 while j < len(sub) and sub[j] == str[i+j]: j += 1 if j == len(sub): return True return False"},{"prompt":"Generate code that implements a Fibonacci sequence generator in Python. Not applicable","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range (2,n): c = a + b a = b b = c return b # Test the code fibonacci(9) # Output: 34"},{"prompt":"Provide a Python program to print out a Pascal triangle","completion":"\\"\\"\\" A function to print out a Pascal triangle \\"\\"\\" def pascal_triangle(n): # Initialize the row row = [1] # Calculate each successive row y = [0] for x in range(max(n, 0)): print(row) # Compute the next row row = [sum(i) for i in zip(row + y, y + row)] # Copy the row y = row[:] if __name__ == '__main__': n = 5 pascal_triangle(n)"},{"prompt":"Write a Python program for creating a simple web crawler. The crawler should start from a given URL and scrape all links from the page and its subpages. URL: https://en.wikipedia.org/wiki/Web_crawling","completion":"import requests from bs4 import BeautifulSoup def crawler(url): html_page = requests.get(url) plain_text = html_page.text soup = BeautifulSoup(plain_text, 'html.parser') for link in soup.findAll('a'): href = link.get('href') subpage_links.append(href) if href is not None and \\"http\\" in href: crawler(href) starting_url = \\"https://en.wikipedia.org/wiki/Web_crawling\\" subpage_links = [] crawler(starting_url)"},{"prompt":"Generate a class with objects and methods in Python to store customer data. No Inpu","completion":"\\"\\"\\" Generate a class with objects and methods in Python to store customer data \\"\\"\\" class Customer(): ''' This class stores customer information ''' def __init__(self, name, address, phone): self.name = name self.address = address self.phone = phone def get_name(self): ''' This method returns customer name ''' return self.name def get_address(self): ''' This method returns customer address ''' return self.address def get_phone(self): ''' This method returns customer phone number ''' return self.phone def set_name(self, name): ''' This method sets customer name ''' self.name = name def set_address(self, address): ''' This method sets customer address ''' self.address = address def set_phone(self, phone): ''' This method sets customer phone number ''' self.phone = phone"},{"prompt":"Create a basic text editor using Python.","completion":"import tkinter from tkinter import * # create the root window root = Tk() # title for the root window root.title('Text Editor') # create text box text = Text(root) text.pack() # create scroll bar scroll_bar = Scrollbar(root) # attach the scroll bar to the text box scroll_bar.pack(side='right', fill='y') # configure text box with the scrollbar text.config(yscrollcommand=scroll_bar.set) scroll_bar.config(command=text.yview) # main loop root.mainloop()"},{"prompt":"Using OOP principles, create a Python class vehicle that has 3 attributes: make, year, model class Vehicle: def __init__(self, make, model, year): self.make = make self.model= model self.year = year","completion":"class Vehicle(): def __init__(self, make, model, year): self.make = make self.model = model self.year = year def get_make(self): return self.make def get_model(self): return self.model def get_year(self): return self.year"},{"prompt":"Create a function to replace all instances of a string in another string. Input string I love Python programming language and replace all the 'Python' with 'JavaScript'","completion":"def replace_string(old, new, s): return s.replace(old, new) input_string = \\"I love Python programming language\\" new_string = replace_string(\\"Python\\", \\"JavaScript\\", input_string) print(new_string) # Output: I love JavaScript programming language"},{"prompt":"Create a Python function to clean and normalize text strings. The text string to be normalized is This i a teXt!!!!!","completion":"import re def clean_text(text): # Lowercase text text = text.lower() # Remove special characters text = re.sub(r'[^ws]','', text) # Remove extra whitespaces text = re.sub(r's+',' ', text) return text # Sample Usage text = 'This i a teXt!!!!!' clean_text(text) # Output: 'this is a text '"},{"prompt":"Create a Python program to convert a Celsius temperature to Fahrenheit","completion":"def celsius_to_fahrenheit(celsius): fahrenheit = celsius * 9/5 + 32 return fahrenheit"},{"prompt":"Develop a python program to create an XML document.","completion":"from xml.etree.ElementTree import Element, SubElement, tostring def create_xml_document(): root = Element('root') child1 = SubElement(root, 'child1') child2 = SubElement(root, 'child2') return tostring(root).decode()"},{"prompt":"Create a function in Python that evaluates a given expression and returns the result. The function must be able to handle basic operations (e.g. +, , /, *) and arbitrary number of input values. Not applicable","completion":"def arithmetic_eval(expression): return eval(expression) # Example arithmetic_eval('2 + 3 * 5') # Output: 17"},{"prompt":"Write a Python function to convert a given floating point number to binary. 19.66","completion":"def decimal_to_binary(f_num): b_str = \\"\\" int_num = int(f_num) f_num = f_num - int_num while int_num > 0: b_str = str(int_num % 2) + b_str int_num //= 2 b_str = \\"1.\\" + b_str while f_num > 0: f_num *= 2 int_num = int(f_num) if int_num == 1: b_str += \\"1\\" else: b_str += \\"0\\" f_num = f_num - int_num return b_str"},{"prompt":"Create a Python program to identify anagrams in a given list of strings. [ab,ba,dog,god]","completion":"def anagrams(words): anagram_list = [] for word1 in words: for word2 in words: if word1 != word2 and sorted(word1) == sorted(word2): anagram_list.append([word1,word2]) return anagram_list list_of_words = [\\"ab\\",\\"ba\\",\\"dog\\",\\"god\\"] print(anagrams(list_of_words))"},{"prompt":"Generate minimum test cases for a Python program to check if a given integer is positive or not.","completion":"import unittest # Define the class class TestInteger(unittest.TestCase): def test_integer_positive(self): self.assertEqual(is_positive(5), True) def test_integer_zero(self): self.assertEqual(is_positive(0), False) def test_integer_negative(self): self.assertEqual(is_positive(-5), False) if __name__ == '__main__': unittest.main()"},{"prompt":"Design a REST API that allows users to search for courses by topic, language, and price range. Not applicable","completion":"import flask from flask import jsonify, request #creating a Flask app app = flask.Flask(__name__) #creating an array of courses courses = [ { \\"id\\":1, \\"topic\\":\\"Web Development\\", \\"language\\":\\"Python\\",\\"price\\":50}, { \\"id\\":2, \\"topic\\":\\"AI & ML\\", \\"language\\":\\"R\\",\\"price\\":150}, { \\"id\\":3, \\"topic\\":\\"Data Science\\", \\"language\\":\\"Python\\",\\"price\\":100}, { \\"id\\":4, \\"topic\\":\\"Machine Learning\\", \\"language\\":\\"Python\\",\\"price\\":200} ] #creating a search API @app.route(\\"/search/\\", methods=[\\"GET\\"]) def search(): #returning all courses if request.args: data = [] topic = request.args.get('topic') language = request.args.get('language') price_range = request.args.get('price') for course in courses: if topic == course['topic'] and language == course['language'] and (int(price_range) >= int(course['price'])): data.append(course) return jsonify({\\"data\\": data}) else: return jsonify({\\"data\\": courses}) #running the API if __name__ == \\"__main__\\": app.run()"},{"prompt":"Design an algorithm in Python that can identify duplicate items in a given array of integers. [1, 2, 3, 4, 5, 1, 5]","completion":"# a function to find duplicate elements def find_duplicate(arr): # save the elements in a set elements = set() # loop through the array for a in arr: # check if the element is already in the set if a in elements: # if yes, then it is a duplicate return a # if not, then add it to the set else: elements.add(a) # if we get here, then there are no duplicates return None # define the array arr = [1, 2, 3, 4, 5, 1, 5] # get the duplicate element duplicate = find_duplicate(arr) print('Duplicate element:', duplicate)"},{"prompt":"Create a Python program that generates an HTML page that shows a bar chart for the given data. data = {'red': 10, 'orange': 12, 'yellow': 8}","completion":"import matplotlib.pyplot as plt data = {'red': 10, 'orange': 12, 'yellow': 8} fig, ax = plt.subplots() ax.bar(list(data.keys()), list(data.values())) plt.savefig('bar_chart.png') print(f\\"\\"\\" <!DOCTYPE html> <html> <head> <title>Bar Chart</title> </head> <body> <h1>Bar Chart</h1> <img src='bar_chart.png' /> </body> </html> \\"\\"\\")"},{"prompt":"Design a class in Python to represent a bank account. The class should include a constructor to create bank accounts, methods to deposit and withdraw money, and a toString() method to display the account balance.","completion":"class BankAccount: def __init__(self, balance): self.balance = balance def deposit(self, amount): self.balance += amount return self.balance def withdraw(self, amount): self.balance -= amount return self.balance def __str__(self): return \\"Current balance is \\" + str(self.balance)"},{"prompt":"Develop a Python Program for the following task: Given an array of integers, count the number of subarrays where all elements are odd","completion":"def count_odd_subarrays(nums): count = 0 for i in range(len(nums)): for j in range(i, len(nums)): is_all_odd = True for k in range(i, j + 1): if nums[k] % 2 == 0: is_all_odd = False break if is_all_odd: count += 1 return count"},{"prompt":"Create a web application with Python Flask that allows users to store bookmarks. The application should contain routing for creating, reading, updating, and deleting bookmarks. Not applicable","completion":"import flask app = flask.Flask(__name__) @app.route('/bookmarks', methods=['GET', 'POST']) def bookmarks(): if request.method == 'POST': # Create a bookmark pass elif request.method == 'GET': # Read the bookmarks pass @app.route('/bookmarks/<int:id>', methods=['GET', 'PUT', 'DELETE']) def bookmark(id): if request.method == 'PUT': # Update specified bookmark pass elif request.method == 'DELETE': # Delete specified bookmark pass elif request.method == 'GET': # Read specific bookmark pass if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python function to grade a multiple choice exam based on a given Answer key and a student's answers. Answer Key : [A, B, D, C, D] Student's Answers: [A, A, C, B, D]","completion":"def grade_exam(answer_key, student_answers): score = 0 for i in range(len(answer_key)): if answer_key[i] == student_answers[i]: score += 1 return score / len(answer_key) * 100 answer_key = ['A', 'B', 'D', 'C', 'D'] student_answers = ['A', 'A', 'C', 'B', 'D'] print(\\"Student's exam grade:\\", grade_exam(answer_key, student_answers))"},{"prompt":"Sort the list in the following python code using the bubble sort algorithm. arr = [1, 10, 5, 4, 8]","completion":"def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] bubble_sort(arr)"},{"prompt":"Construct a Python program to find the maximum of three numbers. 3, 4, 5","completion":"def find_max(a, b, c): max_num = a if b > max_num: max_num = b if c > max_num: max_num = c return max_num"},{"prompt":"Edit the python code to add tryexcept blocks for any potential error. def function(num1, num2): result = num1/num2; return result;","completion":"def function(num1, num2): try: result = num1/num2; return result; except ZeroDivisionError: print(\\"Division by 0 not allowed\\")"},{"prompt":"Write a Python program to print even numbers from 0 to the number provided N = 30","completion":"def print_even_numbers(N): for x in range(0, N+1): if x%2 == 0: print(x)"},{"prompt":"Write a Python program for creating email address based on input domain name and username. username=johndoe domain=example.com","completion":"def generate_email_address(username, domain): return f\\"{username}@{domain}\\" username = input(\\"Enter username:\\") domain = input(\\"Enter domain:\\") email_address = generate_email_address(username, domain) print(\\"Generated email address:\\", email_address)"},{"prompt":"Create an algorithm to remove all occurrences of a word from an input string str = This is a sample string with words to remove word = to","completion":"# Python 3 program to remove all occurrences # of a word from an input string # Function to remove all occurrences of a word # from an input string def remove_word(str, word): # split the string by spaces in a lst = str.split() # new list lst2 = [] # traverse in the list for c in lst: if c != word: lst2.append(c) # join the words of list return(\\" \\".join(lst2)) # Driver code str = \\"This is a sample string with words to remove\\" word = \\"to\\" # Function call result = remove_word(str,word) print(result)"},{"prompt":"Develop a Python program to convert an integer from one binary representation to another. 15","completion":"def decimal_to_binary(n): return bin(n).replace(\\"0b\\", \\"\\") def binary_to_decimal(n): return int(n,2) input_decimal = 15 finding_binary = decimal_to_binary(input_decimal) result = binary_to_decimal(finding_binary) print(result)"},{"prompt":"Build an API endpoint with Python Flask to serve static machine learning (ML) models. Not applicable","completion":"from flask import Flask, request, jsonify import pickle app = Flask(__name__) @app.route('/api/models', methods=['GET']) def get_models(): \\"\\"\\" API endpoint to get static machine learning models. The endpoint should accept a model name as a parameter and return the corresponding model as a response. \\"\\"\\" model_name = request.args.get('model_name') with open(f'models/{model_name}.pkl', 'rb') as f: model = pickle.load(f) return jsonify({'model_name': model_name, 'model': model}) if __name__ == '__main__': app.run()"},{"prompt":"Write a for loop to iterate over the given list in Python. list = [3,7,11,13]","completion":"for x in list: print(x)"},{"prompt":"Take a given Python program and refactor it using method chaining and higher order functions. def divisible_by_three_and_five(number): if number % 3 == 0 and number % 5 == 0: return True else: return False","completion":"def divisible_by_three_and_five(number): return (number % 3 == 0 and number % 5 == 0)"},{"prompt":"Write a Python program to simulate a chatbot that can answer simple questions about coding","completion":"\\"\\"\\" Program to simulate a chatbot that can answer simple questions about coding \\"\\"\\" import random def chatbot(): # list of predefined responses for a given question responses = { \\"what is coding\\" : [\\"Coding is the process of creating instructions using a programming language to tell a computer what to do.\\", \\"Coding is the process of writing a set of instructions that can be executed by a computer or a machine.\\"], \\"what are the benefits of coding\\" : [\\"Coding helps develop problem-solving skills, promotes analytical thinking, encourages creativity, and develops various digital literacy skills.\\", \\"Coding can help develop logic, develop math skills, and create a more well-rounded perspective in life.\\"], \\"how long does it take to learn coding\\": [\\"The amount of time it takes to learn coding depends on the individual and their experience level. Generally speaking, it can take anywhere from a few weeks to several years to become a proficient coder.\\"] } print(\\"Hello, I am your coding chatbot. How can I help you?\\") while True: user_input = input() if user_input in responses: response = random.choice(responses[user_input]) print(response) else: print(\\"I'm sorry, I don't understand your question. Please try asking me in a different way.\\") if __name__ == \\"__main__\\": chatbot()"},{"prompt":"Create a function that implements a linear search algorithm in Python. x = 20 arr = [10, 8, 6, 4 2, 20]","completion":"def linearSearch(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1"},{"prompt":"Develop a Python program that finds the maximum value in a given array. [1, 2, 7, 4, 5]","completion":"def findMax(arr): max = arr[0] for i in range(1, len(arr)): if max < arr[i]: max = arr[i] return max max_num = findMax([1,2,7,4,5]) print(max_num)"},{"prompt":"Create an automated text summarization system using Python. The system should take in a large article and create a shorter version of the article that contains all the important details. A long article about a current political issue","completion":"import nltk import re import heapq from sumy.parsers.plaintext import PlaintextParser from sumy.nlp.tokenizers import Tokenizer from sumy.summarizers.lex_rank import LexRankSummarizer # Read the article article_text = open('article.txt').read() # Tokenize the text tokenizer = Tokenizer('english') tokenized_article = tokenizer.to_sentences(article_text) # Create a PlaintextParser object parser = PlaintextParser.from_string(article_text, tokenizer) # Create LexRank object summarizer = LexRankSummarizer() # Summarize the article summary = summarizer(parser.document, 3) # Output the summary for sentence in summary: print(sentence)"},{"prompt":"Write a web scraper in Python using the BeautifulSoup library that scrapes the Wikipedia page for a given person and outputs the biographical information in JSON format. https://en.wikipedia.org/wiki/Bill_Gate","completion":"import requests from bs4 import BeautifulSoup import json url = 'https://en.wikipedia.org/wiki/Bill_Gates' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') data = { 'name': 'Bill Gates', 'birth': soup.find_all('span', {'class': 'bday'})[0].text, 'birth_location': soup.find_all('div', {'class': 'birthplace'})[0].text, 'education': soup.find_all('span', {'class': 'education-degrees'})[0].text, 'alma_mater': soup.find_all('span', {'class': 'org'})[0].text } with open('bill_gates_data.json', 'w') as outfile: json.dump(data, outfile)"},{"prompt":"Write a Python program to access the data from a web API and sort it in descending order. Not applicable","completion":"import requests import json import operator url = 'http://example.url/data.json' response = requests.get(url) data = json.loads(response.text) sorted_data = sorted(data.items(), key=operator.itemgetter(1), reverse=True) print(sorted_data)"},{"prompt":"Generate a Python script to create a list of numbers between a given range. start = 5, end = 10","completion":"def generate_list(start, end): result = [] for num in range(start, end+1): result.append(num) return result list = generate_list(5, 10) print(list) # Output: [5, 6, 7, 8, 9, 10]"},{"prompt":"Create a class in Python to represent a complex number with methods to add, subtract, multiply and divide complex numbers. Not applicable","completion":"class Complex: def __init__(self, real, imaginary): self.real = real self.imaginary = imaginary def add(self, other): return Complex(self.real + other.real, self.imaginary + other.imaginary) def subtract(self, other): return Complex(self.real - other.real, self.imaginary - other.imaginary) def multiply(self, other): real = self.real * other.real - self.imaginary * other.imaginary imaginary = self.real * other.imaginary + self.imaginary * other.real return Complex(real, imaginary) def divide(self, other): real = (self.real * other.real + self.imaginary * other.imaginary) / (other.real ** 2 + other.imaginary ** 2) imaginary = (self.imaginary * other.real - self.real * other.imaginary) / (other.real ** 2 + other.imaginary ** 2) return Complex(real, imaginary)"},{"prompt":"This code creates archives compatible with ESP32S* ROM DFU implementation. To use it, run the script with the write command and provide the following arguments: o/outputfile: the filename for storing the output DFU image (required) pid: the hexadecimal product identifier (required) json: an optional file for loading a flash_files dictionary with <address> <file> items partsize: the partition size for larger files (default is 512KB) files: a list of <address> <file> pairs to be added to the DFU image. The files are split up into smaller partitions of size partsize to avoid timingout during erasing large regions.","completion":"#!/usr/bin/env python # # Copyright 2020-2021 Espressif Systems (Shanghai) CO LTD # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # This program creates archives compatible with ESP32-S* ROM DFU implementation. # # The archives are in CPIO format. Each file which needs to be flashed is added to the archive # as a separate file. In addition to that, a special index file, 'dfuinfo0.dat', is created. # This file must be the first one in the archive. It contains binary structures describing each # subsequent file (for example, where the file needs to be flashed/loaded). from __future__ import print_function, unicode_literals import argparse import hashlib import json import os import struct import zlib from collections import namedtuple from functools import partial from future.utils import iteritems try: import typing except ImportError: # Only used for type annotations pass try: from itertools import izip as zip # type: ignore except ImportError: # Python 3 pass # CPIO (\\"new ASCII\\") format related things CPIO_MAGIC = b'070701' CPIO_STRUCT = b'=6s' + b'8s' * 13 CPIOHeader = namedtuple( 'CPIOHeader', [ 'magic', 'ino', 'mode', 'uid', 'gid', 'nlink', 'mtime', 'filesize', 'devmajor', 'devminor', 'rdevmajor', 'rdevminor', 'namesize', 'check', ], ) CPIO_TRAILER = 'TRAILER!!!' def make_cpio_header( filename_len, file_len, is_trailer=False ): # type: (int, int, bool) -> CPIOHeader \\"\\"\\" Returns CPIOHeader for the given file name and file size \\"\\"\\" def as_hex(val): # type: (int) -> bytes return '{:08x}'.format(val).encode('ascii') hex_0 = as_hex(0) mode = hex_0 if is_trailer else as_hex(0o0100644) nlink = as_hex(1) if is_trailer else hex_0 return CPIOHeader( magic=CPIO_MAGIC, ino=hex_0, mode=mode, uid=hex_0, gid=hex_0, nlink=nlink, mtime=hex_0, filesize=as_hex(file_len), devmajor=hex_0, devminor=hex_0, rdevmajor=hex_0, rdevminor=hex_0, namesize=as_hex(filename_len), check=hex_0, ) # DFU format related things # Structure of one entry in dfuinfo0.dat DFUINFO_STRUCT = b'<I I 64s 16s' DFUInfo = namedtuple('DFUInfo', ['address', 'flags', 'name', 'md5']) DFUINFO_FILE = 'dfuinfo0.dat' # Structure which gets added at the end of the entire DFU file DFUSUFFIX_STRUCT = b'<H H H H 3s B' DFUSuffix = namedtuple( 'DFUSuffix', ['bcd_device', 'pid', 'vid', 'bcd_dfu', 'sig', 'len'] ) ESPRESSIF_VID = 12346 # This CRC32 gets added after DFUSUFFIX_STRUCT DFUCRC_STRUCT = b'<I' def dfu_crc(data, crc=0): # type: (bytes, int) -> int \\"\\"\\" Calculate CRC32/JAMCRC of data, with an optional initial value \\"\\"\\" uint32_max = 0xFFFFFFFF return uint32_max - (zlib.crc32(data, crc) & uint32_max) def pad_bytes(b, multiple, padding=b'x00'): # type: (bytes, int, bytes) -> bytes \\"\\"\\" Pad 'b' to a length divisible by 'multiple' \\"\\"\\" padded_len = (len(b) + multiple - 1) // multiple * multiple return b + padding * (padded_len - len(b)) class EspDfuWriter(object): def __init__(self, dest_file, pid, part_size): # type: (typing.BinaryIO, int, int) -> None self.dest = dest_file self.pid = pid self.part_size = part_size self.entries = [] # type: typing.List[bytes] self.index = [] # type: typing.List[DFUInfo] def add_file(self, flash_addr, path): # type: (int, str) -> None \\"\\"\\" Add file to be written into flash at given address Files are split up into chunks in order avoid timing-out during erasing large regions. Instead of adding \\"app.bin\\" at flash_addr it will add: 1. app.bin at flash_addr # sizeof(app.bin) == self.part_size 2. app.bin.1 at flash_addr + self.part_size 3. app.bin.2 at flash_addr + 2 * self.part_size ... \\"\\"\\" f_name = os.path.basename(path) with open(path, 'rb') as f: for i, chunk in enumerate(iter(partial(f.read, self.part_size), b'')): n = f_name if i == 0 else '.'.join([f_name, str(i)]) self._add_cpio_flash_entry(n, flash_addr, chunk) flash_addr += len(chunk) def finish(self): # type: () -> None \\"\\"\\" Write DFU file \\"\\"\\" # Prepare and add dfuinfo0.dat file dfuinfo = b''.join([struct.pack(DFUINFO_STRUCT, *item) for item in self.index]) self._add_cpio_entry(DFUINFO_FILE, dfuinfo, first=True) # Add CPIO archive trailer self._add_cpio_entry(CPIO_TRAILER, b'', trailer=True) # Combine all the entries and pad the file out_data = b''.join(self.entries) cpio_block_size = 10240 out_data = pad_bytes(out_data, cpio_block_size) # Add DFU suffix and CRC dfu_suffix = DFUSuffix(0xFFFF, self.pid, ESPRESSIF_VID, 0x0100, b'UFD', 16) out_data += struct.pack(DFUSUFFIX_STRUCT, *dfu_suffix) out_data += struct.pack(DFUCRC_STRUCT, dfu_crc(out_data)) # Finally write the entire binary self.dest.write(out_data) def _add_cpio_flash_entry( self, filename, flash_addr, data ): # type: (str, int, bytes) -> None md5 = hashlib.md5() md5.update(data) self.index.append( DFUInfo( address=flash_addr, flags=0, name=filename.encode('utf-8'), md5=md5.digest(), ) ) self._add_cpio_entry(filename, data) def _add_cpio_entry( self, filename, data, first=False, trailer=False ): # type: (str, bytes, bool, bool) -> None filename_b = filename.encode('utf-8') + b'x00' cpio_header = make_cpio_header(len(filename_b), len(data), is_trailer=trailer) entry = pad_bytes( struct.pack(CPIO_STRUCT, *cpio_header) + filename_b, 4 ) + pad_bytes(data, 4) if not first: self.entries.append(entry) else: self.entries.insert(0, entry) def action_write(args): # type: (typing.Mapping[str, typing.Any]) -> None writer = EspDfuWriter(args['output_file'], args['pid'], args['part_size']) for addr, f in args['files']: print('Adding {} at {:#x}'.format(f, addr)) writer.add_file(addr, f) writer.finish() print('\\"{}\\" has been written. You may proceed with DFU flashing.'.format(args['output_file'].name)) if args['part_size'] % (4 * 1024) != 0: print('WARNING: Partition size of DFU is not multiple of 4k (4096). You might get unexpected behavior.') def main(): # type: () -> None parser = argparse.ArgumentParser() # Provision to add \\"info\\" command subparsers = parser.add_subparsers(dest='command') write_parser = subparsers.add_parser('write') write_parser.add_argument('-o', '--output-file', help='Filename for storing the output DFU image', required=True, type=argparse.FileType('wb')) write_parser.add_argument('--pid', required=True, type=lambda h: int(h, 16), help='Hexa-decimal product indentificator') write_parser.add_argument('--json', help='Optional file for loading \\"flash_files\\" dictionary with <address> <file> items') write_parser.add_argument('--part-size', default=os.environ.get('ESP_DFU_PART_SIZE', 512 * 1024), type=lambda x: int(x, 0), help='Larger files are split-up into smaller partitions of this size') write_parser.add_argument('files', metavar='<address> <file>', help='Add <file> at <address>', nargs='*') args = parser.parse_args() def check_file(file_name): # type: (str) -> str if not os.path.isfile(file_name): raise RuntimeError('{} is not a regular file!'.format(file_name)) return file_name files = [] if args.files: files += [(int(addr, 0), check_file(f_name)) for addr, f_name in zip(args.files[::2], args.files[1::2])] if args.json: json_dir = os.path.dirname(os.path.abspath(args.json)) def process_json_file(path): # type: (str) -> str ''' The input path is relative to json_dir. This function makes it relative to the current working directory. ''' return check_file(os.path.relpath(os.path.join(json_dir, path), start=os.curdir)) with open(args.json) as f: files += [(int(addr, 0), process_json_file(f_name)) for addr, f_name in iteritems(json.load(f)['flash_files'])] files = sorted([(addr, f_name.decode('utf-8') if isinstance(f_name, type(b'')) else f_name) for addr, f_name in iteritems(dict(files))], key=lambda x: x[0]) # remove possible duplicates and sort based on the address cmd_args = {'output_file': args.output_file, 'files': files, 'pid': args.pid, 'part_size': args.part_size, } {'write': action_write }[args.command](cmd_args) if __name__ == '__main__': main()"},{"prompt":"Create a sentiment analysis program in Python which takes a given sentence as an input and outputs its sentiment label. Not applicable","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentence = 'This movie was great!' sid = SentimentIntensityAnalyzer() sentiment_scores = sid.polarity_scores(sentence) if sentiment_scores['compound'] > 0: print('Positive') elif sentiment_scores['compound'] == 0: print('Neutral') else: print('Negative')"},{"prompt":"Establish a distributed system with Python using RabbitMQ to send and receive messages. Not applicable","completion":"#sending_messages.py import pika connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost')) channel = connection.channel() channel.queue_declare(queue='hello') channel.basic_publish(exchange='', routing_key='hello', body='Hello World!') connection.close() #receiving_messages.py import pika connection = pika.BlockingConnection(pika.ConnectionParameters(host='localhost')) channel = connection.channel() channel.queue_declare(queue='hello') def callback(ch, method, properties, body): print(\\" [x] Received %s\\" % body) channel.basic_consume(queue='hello', auto_ack=True, on_message_callback=callback) channel.start_consuming()"},{"prompt":"Build an AIpowered feature engineering pipeline in Python that takes in a dataset, selects features, and generates a list of features for a given classification task. Dataset : The dataset contains 4 columns Age, Gender, Income and Education.","completion":"import numpy as np import pandas as pd import scipy from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.ensemble import ExtraTreesClassifier # Load the data data = pd.read_csv('data.csv') # Separate out the target column X = data.drop('target', axis=1) y = data['target'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Fit an Extra Trees Classifier to the training data clf = ExtraTreesClassifier() clf.fit(X_train, y_train) # Generate a list of features sorted by feature importance feature_list = list(zip(clf.feature_importances_, X_train.columns)) sorted_features = sorted(feature_list, key=lambda x: x[0], reverse=True) # Print the list of features sorted by importance for feature in sorted_features: print(feature)"},{"prompt":"Write a python script to compute the average value in an array. values = [2,4,6,8,10]","completion":"# Funciton to compute the average value in an array def computeAverage(values): # Initialize sum sum = 0 # Iterate through values for value in values: sum+=value # Compute average average = sum / len(values) # Return average return average # Call function computeAverage(values); // Returns 6.0"},{"prompt":"Create an application in Python using Flask that displays two buttons—one to increment a counter, and one to reset it. Not applicable","completion":"from flask import Flask, render_template app = Flask(__name__) @app.route('/') def index(): counter = 0 return render_template('index.html', counter=counter) @app.route('/increment') def increment(): counter = request.args['counter'] + 1 return render_template('index.html', counter=counter) @app.route('/reset') def reset(): counter = 0 return render_template('index.html', counter=counter) if __name__ == '__main__': app.run(debug=True) # index.html <!DOCTYPE html> <html> <head> <title>Counter App</title> </head> <body> <h1>Counter: {{ counter }}</h1> <a href=\\"/increment?counter={{ counter }}\\">Increment</a> <a href=\\"/reset\\">Reset</a> </body> </html>"},{"prompt":"Generate an HTML page using web scraping.","completion":"One approach to generating an HTML page using web scraping is to use the BeautifulSoup library. BeautifulSoup is a Python library that can be used to parse HTML documents. After parsing the document, the parsed elements can be extracted and a new HTML page can be generated. The new HTML page can contain the same elements as the original page, or the elements can be formatted to create a new page with a different format."},{"prompt":"Write a Python program to take a string as input and to create an object that contains all unique characters in the string as keys and the number of occurrences of the character as values. string = This is a string","completion":"def char_freq(string): freq_dict = {} for char in string: if char in freq_dict: freq_dict[char] += 1 else: freq_dict[char] = 1 return freq_dict"},{"prompt":"Create a sorting algorithm in Python that sorts a random list of integers in ascending order. [45, 33, 38, 10, 49]","completion":"def sort(lst): for i in range(len(lst)): min_index = i for j in range(i+1, len(lst)): if lst[min_index] > lst[j]: min_index = j lst[i], lst[min_index] = lst[min_index], lst[i] list = [45, 33, 38, 10, 49] sort(list) print(list)"},{"prompt":"Design a Python program that prints out the reverse of a given string. String = Hello World","completion":"def reverse_string(String): rev_str = \\"\\" for i in String: rev_str = i + rev_str return rev_str print(reverse_string(\\"Hello World\\"))"},{"prompt":"Can you design an algorithm in Python that takes a string and returns all its possible permutations?","completion":"def permutations(string): # base case if len(string) <= 1: return set([string]) # recursive case else: perms = permutations(string[1:]) char = string[0] result = set() for perm in perms: for i in range(len(perm)+1): result.add(perm[:i] + char + perm[i:]) return result print(permutations(\\"ABC\\"))"},{"prompt":"Solve this system of equations using Python: 3x + y 9z = 15 x + 10y + 5z = 55 2x + 5y z = 0","completion":"a = np.array([[3, 1, -9], [1, 10, 5], [2, 5, -1]]) b = np.array([15, 55, 0]) x = np.linalg.solve(a, b) print(x) # Output #[2. 4. 8.]"},{"prompt":"Design an algorithm in Python to solve the Tower of Hanoi problem.","completion":"def tower_of_hanoi(num_disks, start_rod, end_rod, aux_rod): if num_disks == 1: print(\\"Move disk 1 from rod\\", start_rod, \\"to rod\\", end_rod) return tower_of_hanoi(num_disks - 1, start_rod, aux_rod, end_rod) print(\\"Move disk\\", num_disks, \\"from rod\\", start_rod, \\"to rod\\", end_rod) tower_of_hanoi(num_disks - 1, aux_rod, end_rod, start_rod) n = 3 tower_of_hanoi(n, 'A', 'C', 'B')"},{"prompt":"Write a Python program to print all the numbers from 1 to n (inclusive), where n is a given number. n = 20","completion":"for i in range(1, n+1): print(i)"},{"prompt":"Write a Python program to convert a given list of strings to integers. If a string is not a number, then that string should be dropped from the list. ['1', '2', '3', 'four', '5']","completion":"def convert_to_ints(lst): result = [] for i in lst: try: result.append(int(i)) except: pass return result result = convert_to_ints(['1', '2', '3', 'four', '5']) print(result)"},{"prompt":"Write a Python code to create an object to store the details of a student such as name, age, and grade.","completion":"class Student: def __init__(self, name, age, grade): self.name = name self.age = age self.grade = grade def get_name(self): return self.name def get_age(self): return self.age def get_grade(self): return self.grade"},{"prompt":"Create a Python program that takes a sentence as an input and replaces all the blank spaces with hyphens. The quick brown fox","completion":"def replace_spaces(str): return str.replace(\\" \\", \\"-\\") print(replace_spaces(\\"The quick brown fox\\")) # Result: The-quick-brown-fox"},{"prompt":"Build a generator in Python that returns a JSON string of the current time","completion":"def time_json_string(): t = datetime.utcnow().isoformat() return json.dumps({\\"currentTime\\": t })"},{"prompt":"Create a Python script that takes a string as input and converts it to morse code","completion":"\\"\\"\\" Create a Python script that takes a string as input and converts it to morse code \\"\\"\\" #Define a dictionary with characters as keys and morse code as values MORSE_CODE_DICT = { 'A':'.-', 'B':'-...', 'C':'-.-.', 'D':'-..', 'E':'.', 'F':'..-.', 'G':'--.', 'H':'....', 'I':'..', 'J':'.---', 'K':'-.-', 'L':'.-..', 'M':'--', 'N':'-.', 'O':'---', 'P':'.--.', 'Q':'--.-', 'R':'.-.', 'S':'...', 'T':'-', 'U':'..-', 'V':'...-', 'W':'.--', 'X':'-..-', 'Y':'-.--', 'Z':'--..', '1':'.----', '2':'..---', '3':'...--', '4':'....-', '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', '0':'-----', ', ':'--..--', '.':'.-.-.-', '?':'..--..', '/':'-..-.', '-':'-....-', '(':'-.--.', ')':'-.--.-' } #Main function that takes a string as input and returns morse code def text_to_morse(text): # Convert all characters to upper case text = text.upper() #Split the string into individual character chars = list(text) #Initialize the output to empty string output = '' #Iterate over each character for char in chars: #If character is a space, just add a space if char == ' ': output += ' ' #For all other characters, get the corresponding morse code from the dictionary and add it to output else: output += MORSE_CODE_DICT[char] + ' ' return output if __name__== '__main__': #Take input string from user user_input = input('Enter string: ') #Convert text to morse code output = text_to_morse(user_input) #Print the output print(output)"},{"prompt":"Create a class in Python that implements both the Comparator and Iterable interfaces.","completion":"class SortedList(object): def __init__(self, data): self.data = data self.data.sort() # Sort the data when initializing def __iter__(self): for item in self.data: yield item def __lt__(self, other): return self.data < other"},{"prompt":"Create a Python function to split a sentence into words.","completion":"def split_into_words(sentence): \\"\\"\\"This function splits a sentence into words.\\"\\"\\" # Split the sentence into words words = sentence.split(' ') # Return the list of words return words"},{"prompt":"Generate pseudorandom numbers in Python.","completion":"# Generate pseudo-random numbers in Python import random # Generate a pseudo-random number between 0 and 1 num = random.random() print(\\"Pseudo-random number between 0 and 1: \\", num) # Generate pseudo-random numbers from a discrete set num = random.choice([1, 2, 3, 4, 5]) print(\\"Pseudo-random number from a discrete set: \\", num)"},{"prompt":"Write a Python program that inputs two numbers and prints out their GCD (greatest common divisor). Two numbers: 90, 28","completion":"a = 90 b = 28 while(b > 0): temp = b b = a % b a = temp print (\\"The GCD is\\",a)"},{"prompt":"Generate a code to implement a binary search algorithm in python and search for a particular element in a sorted list. X = [1,2,3,4,5,6,7,8,9] target = 6","completion":"def binary_search(X, target): # Set the lower limit lower = 0 # Set the upper limit upper = len(X) - 1 # Check if list contains 1 element if upper == 0 and X[0]==target: return 0 while lower <= upper : # Calculate the mid point mid = ( lower + upper ) // 2 # Break if element is found if X[mid] == target : return mid # If element is smaller than mid, then it must lie in the lower half elif X[mid] > target: upper = mid -1 # Else the element can only lie in the upper half else : lower = mid + 1 if __name__ == '__main__': X = [1,2,3,4,5,6,7,8,9] target = 6 print(binary_search(X, target))"},{"prompt":"Write a Python program to detect cycles in a type of linked list.","completion":"def detect_cycles(head): slow_p = head fast_p = head while slow_p and fast_p and fast_p.next: slow_p = slow_p.next fast_p = fast_p.next.next if slow_p == fast_p: return True return False"},{"prompt":"Design a python program that reverses the input sentence Sentence = This is a sentence","completion":"def reverse_sentence(sentence): words = sentence.split(\\" \\") words = list(reversed(words)) return \\" \\".join(words) reverse_sentence(\\"This is a sentence\\") # returns \\"sentence a is This\\""},{"prompt":"Write a code to optimize a given knapsack problem using dynamic programming in Python.","completion":"def knapsack(weights, values, max_weight): # Create a matrix to store results of subproblems mat = [[0 for i in range(max_weight + 1)] for i in range(len(weights) + 1)] # Fill mat[][] in bottom up manner for i in range(len(weights) + 1): for w in range(max_weight + 1): if i == 0 or w == 0: mat[i][w] = 0 elif weights[i-1] <= w: mat[i][w] = max(values[i-1] + mat[i-1][w-weights[i-1]], mat[i-1][w]) else: mat[i][w] = mat[i-1][w] # Find the maximum value max_value = mat[len(weights)][max_weight] return max_value"},{"prompt":"Write a Python program to create a Caesar cipher.","completion":"def encrypt(plain_text, shift): cipher_text = \\"\\" for char in plain_text: if char.isalpha(): char_code = ord(char) char_code += shift if char.isupper(): if char_code > ord('Z'): char_code -= 26 elif char_code < ord('A'): char_code += 26 elif char.islower(): if char_code > ord('z'): char_code -= 26 elif char_code < ord('a'): char_code += 26 cipher_text += chr(char_code) else: cipher_text += char return cipher_text"},{"prompt":"Create a function for sorting an array of integers using Merge Sort in Python. [8, 4, 6, 1]","completion":"def mergeSort(arr): if len(arr) > 1: mid = len(arr) // 2 L = arr[:mid] R = arr[mid:] mergeSort(L) mergeSort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i+= 1 else: arr[k] = R[j] j+= 1 k+= 1 while i < len(L): arr[k] = L[i] i+= 1 k+= 1 while j < len(R): arr[k] = R[j] j+= 1 k+= 1 arr = [8, 4, 6, 1] mergeSort(arr) print(arr)"},{"prompt":"Construct a Python function to remove all instances of an element from a given list of integers. [2,2,3,4,5], 2","completion":"def remove_element(nums, x): return [y for y in nums if y != x]"},{"prompt":"Generate a Python script for replacing a substring in a given string. String = Hello World Substring = Hello Replacement Substring = Goodbye","completion":"new_str = str.replace(\\"Hello\\",\\"Goodbye\\") print(new_str)"},{"prompt":"Create a Python function to find the longest word in a given sentence.","completion":"def longest_word(sentence): words = sentence.split() longest_word = \\"\\" for word in words: if len(word) > len(longest_word): longest_word = word return longest_word"},{"prompt":"Develop a Python program to generate a random sequence of alphabets.","completion":"import random def generate_sequence(): sequence = \\"\\" for _ in range(20): char = chr(random.randint(97, 122)) sequence += char return sequence output = generate_sequence() print(output)"},{"prompt":"Write a Python program to find the list of words that are longer than n from a given list of words. word_list = [cat, dog, dragon, fish, tiger] n = 4","completion":"def get_long_words(word_list, n): return [w for w in word_list if len(w) > n] long_words = get_long_words(word_list, n) print(long_words)"},{"prompt":"Generate a 20 x 20 matrix of zeros in Python.","completion":"import numpy as np matrix = np.zeros((20,20)) print(matrix)"},{"prompt":"Create a function in Python that takes two lists and returns a new list with elements from both lists in the same order that appear in the longest list. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"def combine_list(list1, list2): if len(list1) > len(list2): longest_list = list1 shortest_list = list2 else: longest_list = list2 shortest_list = list1 combined_list = [] i = 0 for el in longest_list: combined_list.append(el) if i < len(shortest_list): combined_list.append(shortest_list[i]) i += 1 return combined_list list1 = [1, -2, 3] list2 = [4, 5, -6] combine_list(list1, list2) # [1, 4, -2, 5, 3, -6]"},{"prompt":"Using existing Python code, design a classifier to differentiate between two similar types of programming languages. Java and C++","completion":"import pandas as pd # Load data data = pd.read_csv('programming_languages.csv') # Separate input and output data X = data.drop('language', axis=1).values y = data['language'].values # Train model from sklearn.ensemble import RandomForestClassifier model = RandomForestClassifier(n_estimators=100, max_depth=4) model.fit(X, y) # Generate predictions predictions = model.predict(X) # Print predictions print(predictions)"},{"prompt":"Generate a neural network in Python to classify handwritten digits.","completion":"import keras from keras.datasets import mnist from keras.models import Sequential from keras.layers import Dense,Activation,Dropout,Flatten #load dataset (x_train,y_train),(x_test,y_test) = mnist.load_data() #reshape data x_train = x_train.reshape(60000,784) x_test = x_test.reshape(10000,784) #normalize data x_train = x_train.astype('float32') x_test = x_test.astype('float32') x_train/= 255 x_test/= 255 #convert labels to one-hot vectors y_train = keras.utils.to_categorical(y_train,10) y_test = keras.utils.to_categorical(y_test, 10) #Create model model = Sequential() #Add layers model.add(Dense(64, input_shape=(784,))) model.add(Activation('relu')) model.add(Dropout(0.2)) model.add(Dense(64)) model.add(Activation('relu')) model.add(Dropout(0.2)) model.add(Dense(10)) model.add(Activation('softmax')) #compile model model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"},{"prompt":"Write a query in Python to count the total number of times a value appears in a specific column of a table. Table: mytable Column: mycolumn Value: myvalue","completion":"SELECT COUNT(mycolumn) FROM mytable WHERE mycolumn = 'myvalue'"},{"prompt":"Create a script in Python to print the squares of all numbers in the given list. [1, 2, 3, 4, 5]","completion":"for n in [1, 2, 3, 4, 5]: print(n**2)"},{"prompt":"Find all possible substrings in a given string. my_string = Python","completion":"def find_substrings(string): substrings = [] length = len(string) for i in range(length): for j in range(i + 1, length + 1): substrings.append(string[i: j]) return substrings substrings = find_substrings(my_string) print (substrings) # ['P', 'Py', 'Pyth', 'Pytho', 'Python', 'y', 'yt', 'yth', 'ythe', 'yhon', 't', 'th', 'tho', 'thon', 'h', 'ho', 'hon', 'o', 'on', 'n']"},{"prompt":"Create a K means clustering algorithm in Python.","completion":"import numpy as np from sklearn.cluster import KMeans def KMeansCluster(features, clusters): kmeans = KMeans(n_clusters=clusters, random_state=0).fit(features) return kmeans.labels_ if __name__ == \\"__main__\\": features = np.array([[ 1.8 ,2.4],[ 3.2, 1.3], [ 1.1 , 8.2], [ 8.2, 1.2]]) clusters = 2 print(KMeansCluster(features, clusters))"},{"prompt":"Generate a Python program to solve cube root of the input number. 25","completion":"def cube_root(x): res = 0 while (res*res*res < abs(x)): res += 1 if (res*res*res != abs(x)): print(\\"Not a perfect cube\\") else: if (x < 0): res = -res print(\\"Cube root of \\" + str(x) + \\" is \\" + str(res)) cube_root(25)"},{"prompt":"Rewrite a given Python program to be more efficient. my_list = [1,2,3,4,5,6] count = 0 for number in my_list: count += number print(count)","completion":"my_list = [1,2,3,4,5,6] # Use the sum() function to get the sum of a given list count = sum(my_list) print(count)"},{"prompt":"Generate a python script to return the longest word in a given sentence. This is a sentence with multiple words.","completion":"def longestWord(sentence): words = sentence.split(' ') longest = '' for word in words: if len(word) > len(longest): longest = word return longest"},{"prompt":"Using the input field provided, write a Python program that creates a class and its attributes that represent a car. class Car: brand = Toyota model = Corolla year = 1998 color = Blue","completion":"class Car: def __init__(self, brand, model, year, color): self.brand = brand self.model = model self.year = year self.color = color def description(self): return \\"This car is a {} {}, made in {}, and its color is {}\\".format( self.brand, self.model, self.year, self.color )"},{"prompt":"Create a Python script to extract emails from a given string. Alice lives at alice@example.com and Bob lives at bob@example.com.","completion":"import re input_str = \\"Alice lives at alice@example.com and Bob lives at bob@example.com.\\" # use regular expression to extract emails pattern = r'[w.-]+@[w.-]+' emails = re.findall(pattern, input_str) print(emails) # ['alice@example.com', 'bob@example.com']"},{"prompt":"Write a Python program to keep track of an array of prices, and output the maximum and minimum price in the array. [20, 40, 60, 5]","completion":"prices = [20, 40, 60, 5] max_price = max(prices) min_price = min(prices) print('Max price is: ' + str(max_price)) print('Min price is: ' + str(min_price))"},{"prompt":"Create a GUI program in Python that takes three inputs and displays an output.","completion":"import tkinter # create a GUI window window = tkinter.Tk() # set the background colour of GUI window window.configure(background=\\"light green\\") # set the title of GUI window window.title(\\"Calculator\\") # set the configuration of GUI window window.geometry(\\"270x150\\") # create a label label_num1 = tkinter.Label(window, text=\\"Input #1\\", bg=\\"light green\\") label_num1.grid(row=1, column=0) # create a label label_num2 = tkinter.Label(window, text=\\"Input #2\\", bg=\\"light green\\") label_num2.grid(row=2, column=0) # create a label label_num3 = tkinter.Label(window, text=\\"Input #3\\", bg=\\"light green\\") label_num3.grid(row=3, column=0) # create a text entry box num1 = tkinter.Entry(window) num1.grid(row=1, column=1) # create a text entry box num2 = tkinter.Entry(window) num2.grid(row=2, column=1) # create a text entry box num3 = tkinter.Entry(window) num3.grid(row=3, column=1) # create a Submit Button and place into the root window btn_result = tkinter.Button(window, text=\\"Submit\\", fg=\\"Black\\", bg=\\"light blue\\", command=MyFun) btn_result.grid(row=4, column=1) # create a exit button btn_exit = tkinter.Button(window, text=\\"Exit\\", fg=\\"Black\\", bg=\\"light blue\\", command=exit) btn_exit.grid(row=4, column=2) # Function MyFun() def MyFun(): a = int(num1.get()) b = int(num2.get()) c = int(num3.get()) result = a+b+c label_result = tkinter.Label(window, text=\\"Sum: \\"+str(result), fg=\\"Black\\", bg=\\"light green\\") label_result.grid(row=5, column=1) # start the GUI window.mainloop()"},{"prompt":"Create an algorithm in Python for removing all duplicates from an array. arr = [1, 2, 4, 4, 1, 5, 2]","completion":"def removeDuplicates(arr): res = [] seen = set() for e in arr: if e not in seen: res.append(e) seen.add(e) return res print(removeDuplicates([1, 2, 4, 4, 1, 5, 2]))"},{"prompt":"Write a Python program to display all prime numbers between a given range.","completion":"def prime_range(n): result = [] for i in range(2, n): flag = 0 for j in range(2, i): if (i % j) == 0: flag = 1 break if (flag == 0): result.append(i) return result result = prime_range(20) print(result)"},{"prompt":"Generate a machine learning model in Python to predict the likelihood of a loan default. Data table with features such as credit score, loan amount, loan term and repayment history","completion":"import pandas as pd from sklearn.linear_model import LogisticRegression from sklearn.model_selection import train_test_split # Read data loan_data = pd.read_csv(‘loan_data.csv’) # Extract features features = loan_data.drop(['default'], axis=1) # Extract labels labels = loan_data['default'] # Split main data into training and test sets X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42) # Create logistic regression model model = LogisticRegression() # Train model model.fit(X_train, y_train) # Evaluate model score = model.score(X_test, y_test) print('Model score:', score)"},{"prompt":"Construct a program in Python to sort all the elements in an array using the insertion sort algorithm. [2, 11, 9, 5, 8]","completion":"def insertion_sort(arr): # Traverse through 1 to len(arr) for i in range(1, len(arr)): key = arr[i] # Move elements of arr[0..i-1], that are # greater than key, to one position ahead # of their current position j = i-1 while j >=0 and key < arr[j] : arr[j+1] = arr[j] j -= 1 arr[j+1] = key # Driver code to test above arr = [2, 11, 9, 5, 8] insertion_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i])"},{"prompt":"Edit this python code to remove all even numbers from a given list. my_list = [1,2,3,4,5,6,7,8,9,10]","completion":"\\"\\"\\" Edit this python code to remove all even numbers from a given list. \\"\\"\\" my_list = [1,2,3,4,5,6,7,8,9,10] # Use a list comprehension to remove even numbers my_list = [i for i in my_list if i % 2 != 0] print(my_list) # [1, 3, 5, 7, 9]"},{"prompt":"Write a Python program to calculate the sum of two given integers, if the two values are equal then return the triple of their sum. 2, 2","completion":"def calculate_sum(a, b): if a == b: return (a + b) * 3 else: return a + b a = 2 b = 2 result = calculate_sum(a, b) print(result)"},{"prompt":"mplement a program in Python that takes a string as an input and prints out the length of the longest word in the string. string = The quick brown fox jumps over the lazy dog","completion":"def longest_word(string): words = string.split(\\" \\") max_length = 0 longest_word = \\"\\" for word in words: if(len(word) > max_length): max_length = len(word) longest_word = word print(\\"Longest word is {} with length {}\\".format(longest_word,max_length))"},{"prompt":"Construct a Python program that converts minutes into years and days.","completion":"def minutesToYears(minutes): years = int(minutes / 525600) days = int((minutes % 525600) / 1440) return years, days minutes = 4000000 print(\\"{} minutes is equivalent to {} years and {} days.\\" .format(minutes, *minutesToYears(minutes)))"},{"prompt":"Create a Python script to encrypt and decrypt a string. string = Hello, world! key = 7","completion":"def encrypt_string(string, key): \\"\\"\\" Encrypts a string using a key. Args: string: the string to be encrypted. key: the key to use for encryption. Returns: encrypted_string: the encrypted string. \\"\\"\\" encrypted_string = \\"\\" for char in string: encrypted_string += chr(((ord(char) + key) % 128)) return encrypted_string def decrypt_string(string, key): \\"\\"\\" Decrypts a string using a key. Args: string: the string to be decrypted. key: the key to use for decryption. Returns: decrypted_string: the decrypted string. \\"\\"\\" decrypted_string = \\"\\" for char in string: decrypted_string += chr(((ord(char) - key) % 128)) return decrypted_string string = \\"Hello, world!\\" key = 7 encrypted_string = encrypt_string(string, key) print(encrypted_string) decrypted_string = decrypt_string(encrypted_string, key) print(decrypted_string)"},{"prompt":"Convert the given string from Upper Camel Case notation to lower snake case notation in Python. UpperCamelCase","completion":"lower_snake_case = ''.join(w.lower() for w in UpperCamelCase.split()).replace('', '_')[1:]"},{"prompt":"Write a python program that generates a random password with a length of 16 containing only letters and numbers. Not applicable","completion":"import string import random def generate_password(): password_length = 16 chars = string.ascii_letters + string.digits password = ''.join(random.choice(chars) for _ in range(password_length)) return password print(generate_password())"},{"prompt":"Generate a python program to take in 3 user inputs","completion":"a = input(\\"Enter the first input: \\") b = input(\\"Enter the second input: \\") c = input(\\"Enter the third input: \\")"},{"prompt":"Explain the purpose of a list in Python","completion":"A list in Python is a data structure used to store a collection of elements, each of which may be a different data type. They are like arrays in other languages, but offer different and more powerful features, such as the ability to have uneven lengths and different data types in the same list. Lists are mutable, meaning that elements can be added, removed or changed after creation. They also support various operations such as indexing, slicing, in-place list modification, as well as various methods for searching and sorting."},{"prompt":"Create a Python program for encrypting a given string using the XOR technique. String: Hello world!","completion":"def xor_crypt_string(data, key='my_secret_key'): l = len(key) return bytearray(( (data[i] ^ ord(key[i % l])) for i in range(0,len(data)) )) encrypted_data = xor_crypt_string(bytearray('Hello world!', 'utf-8')) print(encrypted_data)"},{"prompt":"Write a Python program to extract all the text from a web page.","completion":"import requests from bs4 import BeautifulSoup url = 'http://www.example.com' res = requests.get(url) soup = BeautifulSoup(res.text, 'lxml') text = soup.get_text() print(text)"},{"prompt":"Design a class in Python that computes the frequency of every word in a text document. Text: This is a test text. Write a piece of code to find the frequency of each word in this text","completion":"\\"\\"\\" Design a class to compute the frequency of every word in a text document \\"\\"\\" class TextAnalyzer: def __init__ (self, text): self.text = text self.tokens = text.split() self.frequency_dict = {} def count_words(self): for token in self.tokens: if token in self.frequency_dict: self.frequency_dict[token] += 1 else: self.frequency_dict[token] = 1 return self.frequency_dict if __name__== \\"__main__\\": text = \\"This is a test text. Write a piece of code to find the frequency of each word in this text\\" text_analyzer = TextAnalyzer(text) word_frequency = text_analyzer.count_words() print(word_frequency)"},{"prompt":"Create a Python function that takes a string and a pattern, and returns the number of times the pattern appears in the string. string = hello hello world pattern = hello","completion":"def countSubstring(string, sub_string): count = 0 for i in range(0, len(string)-len(sub_string)+1): if (string[i:i+len(sub_string)] == sub_string): count+=1 return count print(countSubstring(string, pattern))"},{"prompt":"Design a function to print the Pascal's triangle in Python. rows = 6","completion":"def print_pascal_triangle(rows): \\"\\"\\"Print the Pascal's triangle.\\"\\"\\" for line in range(1, rows + 1): # Print the leading spaces for _ in range(rows - line): print(end=\\" \\") # Print the numbers in the current row for i in range(line): print(binomial_coefficient(line-1, i), end=\\" \\") # Go to the new line print() def binomial_coefficient(n, k): \\"\\"\\"Calculate the binomial coefficient of n, k\\"\\"\\" result = 1 for i in range(1, k + 1): result = result * (n - i + 1) / i return result # Output print_pascal_triangle(rows)"},{"prompt":"Create a python code to check if all characters are unique in a given string string = 'abcdefeb'","completion":"def is_unique(string): chars = set() for char in string: if char in chars: return False else: chars.add(char) return True print(is_unique(string))"},{"prompt":"Suggest a python program that implements a stack data structure.","completion":"class Stack(object): def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def is_empty(self): return len(self.items) == 0"}]`),N={name:"App",components:{PoemCard:E},data(){return{searchQuery:"",visibleCount:4,poemsData:I,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.prompt&&e.prompt.toLowerCase().includes(i)||e.completion&&e.completion.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},D={class:"search-container"},j={class:"card-container"},R={key:0,class:"empty-state"},A=["disabled"],L={key:0},F={key:1};function z(i,e,l,u,a,o){const f=_("PoemCard");return r(),n("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",D,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),g(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=s=>a.searchQuery=s),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(r(),n("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=s=>a.searchQuery="")}," ✕ ")):p("",!0)]),t("div",j,[(r(!0),n(b,null,w(o.displayedPoems,(s,h)=>(r(),v(f,{key:h,poem:s},null,8,["poem"]))),128)),o.displayedPoems.length===0?(r(),n("div",R,' No results found for "'+m(a.searchQuery)+'". ',1)):p("",!0)]),o.hasMorePoems?(r(),n("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...s)=>o.loadMore&&o.loadMore(...s))},[a.isLoading?(r(),n("span",F,"Loading...")):(r(),n("span",L,"See more"))],8,A)):p("",!0)])}const O=c(N,[["render",z],["__scopeId","data-v-1c66bd2c"]]),W=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/4.md","filePath":"quotes/4.md"}'),M={name:"quotes/4.md"},B=Object.assign(M,{setup(i){return(e,l)=>(r(),n("div",null,[x(O)]))}});export{W as __pageData,B as default};
