import{_ as c,o as r,c as n,a as t,m as d,t as m,C as _,M as g,U as y,f as p,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},P={class:"poem-container"},T={class:"review"},C={class:"review-title"},S={class:"review-content"};function q(i,e,l,u,a,o){return r(),n("div",P,[t("div",T,[t("div",C,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),d(m(l.poem.prompt),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",S,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),d(m(l.poem.completion),1)])])])}const N=c(k,[["render",q],["__scopeId","data-v-80707829"]]),j=JSON.parse(`[{"prompt":"This code provides functions to send Google Cloud Messaging (GCM) notifications. To use it, import the necessary functions and call gcm_send_message() or gcm_send_bulk_message() with the appropriate parameters. Make sure to set the GCM_API_KEY in the PUSH_NOTIFICATIONS_SETTINGS dictionary before sending messages through GCM. Documentation is available on the Android Developer website.","completion":"\\"\\"\\" Google Cloud Messaging Previously known as C2DM Documentation is available on the Android Developer website: https://developer.android.com/google/gcm/index.html \\"\\"\\" import json try: from urllib.request import Request, urlopen from urllib.parse import urlencode except ImportError: # Python 2 support from urllib2 import Request, urlopen from urllib import urlencode from django.core.exceptions import ImproperlyConfigured from . import NotificationError from .settings import PUSH_NOTIFICATIONS_SETTINGS as SETTINGS class GCMError(NotificationError): pass def _chunks(l, n): \\"\\"\\" Yield successive chunks from list a l with a minimum size a n \\"\\"\\" for i in range(0, len(l), n): yield l[i:i + n] def _gcm_send(data, content_type): key = SETTINGS.get(\\"GCM_API_KEY\\") if not key: raise ImproperlyConfigured('You need to set PUSH_NOTIFICATIONS_SETTINGS[\\"GCM_API_KEY\\"] to send messages through GCM.') headers = { \\"Content-Type\\": content_type, \\"Authorization\\": \\"key=%s\\" % (key), \\"Content-Length\\": str(len(data)), } request = Request(SETTINGS[\\"GCM_POST_URL\\"], data, headers) return urlopen(request).read() def _gcm_send_plain(registration_id, data, collapse_key=None, delay_while_idle=False, time_to_live=0): \\"\\"\\" Sends a GCM notification to a single registration_id. This will send the notification as form data. If sending multiple notifications, it is more efficient to use gcm_send_bulk_message() with a list of registration_ids \\"\\"\\" values = {\\"registration_id\\": registration_id} if collapse_key: values[\\"collapse_key\\"] = collapse_key if delay_while_idle: values[\\"delay_while_idle\\"] = int(delay_while_idle) if time_to_live: values[\\"time_to_live\\"] = time_to_live for k, v in data.items(): values[\\"data.%s\\" % (k)] = v.encode(\\"utf-8\\") data = urlencode(sorted(values.items())).encode(\\"utf-8\\") # sorted items for tests result = _gcm_send(data, \\"application/x-www-form-urlencoded;charset=UTF-8\\") if result.startswith(\\"Error=\\"): raise GCMError(result) return result def _gcm_send_json(registration_ids, data, collapse_key=None, delay_while_idle=False, time_to_live=0): \\"\\"\\" Sends a GCM notification to one or more registration_ids. The registration_ids needs to be a list. This will send the notification as json data. \\"\\"\\" values = {\\"registration_ids\\": registration_ids} if data is not None: values[\\"data\\"] = data if collapse_key: values[\\"collapse_key\\"] = collapse_key if delay_while_idle: values[\\"delay_while_idle\\"] = delay_while_idle if time_to_live: values[\\"time_to_live\\"] = time_to_live data = json.dumps(values, separators=(\\",\\", \\":\\"), sort_keys=True).encode(\\"utf-8\\") # keys sorted for tests result = json.loads(_gcm_send(data, \\"application/json\\")) if result[\\"failure\\"]: raise GCMError(result) return result def gcm_send_message(registration_id, data, collapse_key=None, delay_while_idle=False, time_to_live=0): \\"\\"\\" Sends a GCM notification to a single registration_id. This will send the notification as form data if possible, otherwise it will fall back to json data. If sending multiple notifications, it is more efficient to use gcm_send_bulk_message() with a list of registration_ids \\"\\"\\" args = data, collapse_key, delay_while_idle, time_to_live try: _gcm_send_plain(registration_id, *args) except AttributeError: _gcm_send_json([registration_id], *args) def gcm_send_bulk_message(registration_ids, data, collapse_key=None, delay_while_idle=False, time_to_live=0): \\"\\"\\" Sends a GCM notification to one or more registration_ids. The registration_ids needs to be a list. This will send the notification as json data. \\"\\"\\" args = data, collapse_key, delay_while_idle, time_to_live # GCM only allows up to 1000 reg ids per bulk message # https://developer.android.com/google/gcm/gcm.html#request max_recipients = SETTINGS.get(\\"GCM_MAX_RECIPIENTS\\") if len(registration_ids) > max_recipients: ret = [] for chunk in _chunks(registration_ids, max_recipients): ret.append(_gcm_send_json(chunk, *args)) return ret return _gcm_send_json(registration_ids, *args)"},{"prompt":"Write a Python program to sort a given list of numbers and return the sorted list list_of_numbers = [2, 3, 5, 8, 1, 4]","completion":"list_of_numbers = [2, 3, 5, 8, 1, 4] def sort_list(list_of_numbers): list_of_numbers.sort() return list_of_numbers sorted_list = sort_list(list_of_numbers) print(sorted_list)"},{"prompt":"Create a Python script to convert a given string into uppercase and lowercase. String: Hello, World!","completion":"# Python program to convert string into # uppercase and lowercase # Function to convert the string # into uppercase and lowercase def string_case(str): upper_case = str.upper() # convert into uppercase lower_case = str.lower() # convert into lowercase print(\\"Original String: \\", str) print(\\"Uppercase String: \\", upper_case) print(\\"Lowercase String: \\", lower_case) str = 'Hello, World!' string_case(str)"},{"prompt":"Using the specified input, write a Python program that prints the numbers from 1 to 10 in order.","completion":"for i in range(1,11): print(i)"},{"prompt":"Write a Python function to display the current time, formatted such that it will read It is currently 11:15am.","completion":"import time def display_time(): time_string = time.strftime('%I:%M%p', time.localtime()) return f'It is currently {time_string}'"},{"prompt":"Write a Python function which takes a number as a parameter and check the number is prime or not.","completion":"def is_prime(num): if num > 1: for i in range(2, num): if (num % i) == 0: return False return True else: return False"},{"prompt":"Create a machine learning model in Python that takes in a data set containing features of handwritten digits and can accurately predict the digit represented by any new data. Regular written digit data set such as MNIST","completion":"from keras.models import Sequential from keras.layers import Dense, Conv2D, Flatten # Create the model model = Sequential() model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1))) model.add(Flatten()) model.add(Dense(10, activation='softmax')) # Compile the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) # Fit the model model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10) # Evaluate the model score = model.evaluate(X_test, y_test, verbose=0) print('Test loss:', score[0]) print('Test accuracy:', score[1]))"},{"prompt":"Create a Python program for generating a calendar of events from a set of dates. Dates: May 15, June 22, July 8","completion":"# Import the necessary libraries import calendar from datetime import datetime # Define a function for generating the calendar of events def generate_calendar(dates): # Create the calendar c = calendar.TextCalendar() # Format the dates in datetime objects dt_dates = [datetime.strptime(date, '%B %d') for date in dates] # Generate the output for date in sorted(dt_dates): month_str = date.strftime('%B') day_str = date.strftime('%d') print(month_str + ' ' + day_str + ' - Event') # Test dates = ['May 15', 'June 22', 'July 8'] generate_calendar(dates)"},{"prompt":"Construct a code that identifies the sum of elements of an array in Python. [4, 6, 8, 2]","completion":"def sum_elements(arr): summ = 0 for i in arr: summ += i return summ summ = sum_elements([4, 6, 8, 2]) print(summ)"},{"prompt":"This code checks if a file exists inside a swift container. To use it, you need to import the necessary libraries and define the CloudAgent class. You also need to define the required configuration parameters, including the region, container, date, and name of the file to check. Once you have defined these parameters, you can run the agent function, which will log whether the file exists or not and send an email if the file is missing.","completion":"#!/usr/bin/env python # Copyright 2013 Hewlett-Packard Development Company, L.P. # All Rights Reserved. # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # Only required for more convenient local development. import sys, os sys.path.append(os.path.dirname(os.path.realpath(__file__))+'/lib') from cloudagents import CloudAgent from keystoneclient.v2_0 import client import novaclient import swiftclient from time import mktime import datetime import parsedatetime.parsedatetime as pdt ca = CloudAgent() ca.required_config = { \\"name\\": \\"File Existence Checker\\", \\"version\\": \\"0.2.0\\", \\"author\\": \\"Jeff Kramer\\", \\"url\\": \\"http://www.hpcloud.com/\\", \\"help\\": \\"\\"\\"This script checks to see if a file exists inside of a swift container. It also has functions to allow for searching for files named on relative dates, daily backups for instance.\\"\\"\\", \\"config\\": [{ \\"name\\": \\"region\\", \\"regexp\\": \\"^.{1,50}\\", \\"title\\": \\"Region\\", \\"description\\": \\"Short name for the object storage endpoint region to search. IE: region-a.geo-1\\", \\"type\\": \\"string\\", \\"required\\": True, \\"resource\\": \\"openstack.object-store.endpoints.region\\" },{ \\"name\\": \\"container\\", \\"regexp\\": \\"^.{1,50}\\", \\"title\\": \\"Container\\", \\"description\\": \\"Name of the container to search for the file.\\", \\"type\\": \\"string\\", \\"required\\": True, \\"resource\\": \\"openstack.object-store.[region].containers\\" },{ \\"name\\": \\"date\\", \\"regexp\\": \\"^.{1,250}\\", \\"title\\": \\"Date Adjustment\\", \\"description\\": \\"Date adjustment. Enables time substitution in object name. IE: 'yesterday'. Dates are compared in UTC.\\", \\"type\\": \\"string\\", \\"required\\": False, },{ \\"name\\": \\"name\\", \\"regexp\\": \\"^.{1,250}\\", \\"title\\": \\"Name\\", \\"description\\": \\"Object name to check for in the container. If a date adjustment is set, python datetime time substution is enabled. IE: 'backups/%Y-%m-%d.zip'\\", \\"type\\": \\"string\\", \\"required\\": True }, ] } def agent(): ca.log(\\"Starting!\\") keystone = client.Client(token=ca.creds['token'], tenant_id=ca.creds['tenantId'], auth_url=ca.creds['identity_url']) object_store_catalog = keystone.service_catalog.get_endpoints()['object-store'] region_endpoints = None for endpoints in object_store_catalog: if endpoints['region'] == ca.conf['region']: region_endpoints = endpoints if not region_endpoints: ca.log_fail(\\"Failing, region not found in endpoint list.\\") exit() if ca.conf.get('date'): p = pdt.Calendar() result = p.parse(ca.conf['date']) dt = datetime.datetime.fromtimestamp(mktime(result[0])) path = dt.strftime(ca.conf['name']) else: path = ca.conf['name'] try: headers = swiftclient.head_object(region_endpoints['publicURL'],ca.creds['token'], ca.conf['container'],path) if headers['content-length'] >= 0: ca.log(\\"File exists!\\") except swiftclient.client.ClientException, e: ca.log(\\"File doesn't exist!\\") ca.email(\\"File missing: \\"+ca.conf['container']+\\"/\\"+path,''' The container '%s' appears to be missing the file '%s'. ''' % (ca.conf['container'], path)) ca.run(agent)"},{"prompt":"Create a Python class called Student that contains attributes for a students name and grade.","completion":"class Student: def __init__(self, name, grade): self.name = name self.grade = grade"},{"prompt":"porate a Machine Learning algorithm into an existing Python Django application. The ML algorithm should be used to classify text input from the user. A pickled version of a pretrained scikitlearn classifier, clf: import pickle clf = pickle.load(open(classifier.pkl, rb))","completion":"# models.py import pickle class ClassificationModel(models.Model): clf = pickle.load(open(\\"classifier.pkl\\", \\"rb\\")) # views.py @app.route('/classify', methods=['POST']) def classify_text(): classification_model = ClassificationModel.objects.get(id=1) prediction = classification_model.clf.predict(request.data['text']) return {'prediction': prediction}"},{"prompt":"Write a Python function to check if a number between 0 and 1000 is prime or not.","completion":"def is_prime(num): #Make sure the number is greater than or equal to 2 if num < 2: return False # Check whether the number is divisible by any other number for i in range(2, num): if num % i == 0: return False # If it is not divisible by any number, it is a prime number return True"},{"prompt":"Create a Twitter bot using Python which collects tweets with specific hashtag and puts them in a database. Not applicable","completion":"import tweepy import sqlite3 # Authentication # (Replace these credentials with your own) consumer_key = '...' consumer_secret = '...' access_token = '...' access_token_secret = '...' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) # Create a database connection conn = sqlite3.connect('tweets.db') # Create cursor c = conn.cursor() # Create table c.execute(\\"CREATE TABLE IF NOT EXISTS tweets (id INTEGER, text TEXT, created_at DATETIME)\\") # Search for tweets with a specific hashtag # (Replace this hashtag with your own) hashtag = '#python' for tweet in tweepy.Cursor(api.search, hashtag).items(100): # Insert row into table c.execute(\\"INSERT INTO tweets VALUES (?, ?, ?)\\", (tweet.id, tweet.text, tweet.created_at)) # Commit the changes conn.commit() # Close the connection conn.close()"},{"prompt":"Design a python script to convert a list of strings to a dictionary my_list = [Apple, Banana, Cherry]","completion":"my_list = [\\"Apple\\", \\"Banana\\", \\"Cherry\\"] def list_to_dict(lst): dictionary = dict(zip(lst, range(len(lst)))) return dictionary dictionary = list_to_dict(my_list) print(dictionary)"},{"prompt":"Given a String abcd write a Python program to generate all the possible subsequence of it. string = abcd","completion":"# define the substring array substrings = [] # loop through the length of the string for i in range(len(string)): # create a loop to start with character 0 and end at character i for j in range(i + 1): # add all subsequences to the substring array substrings.append(string[j:i + 1]) # print the list of all possible subsequences print(substrings)"},{"prompt":"Write a Python program to calculate the distance between two points (given the latitude and longitude of each point). lat1 = 52.2296756 long1 = 21.0122287 lat2 = 52.406374 long2 = 16.9251681","completion":"import math def distance(lat1, long1, lat2, long2): # convert latitude and longitude to # spherical coordinates in radians. degrees_to_radians = math.pi/180.0 # phi = 90 - latitude phi1 = (90.0 - lat1)*degrees_to_radians phi2 = (90.0 - lat2)*degrees_to_radians # theta = longitude theta1 = long1*degrees_to_radians theta2 = long2*degrees_to_radians # Compute spherical distance from spherical coordinates. # For two locations in spherical coordinates # (1, theta, phi) and (1, theta, phi) # cosine( arc length ) = # sin phi sin phi' cos(theta-theta') + cos phi cos phi' # distance = rho * arc length cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) + math.cos(phi1)*math.cos(phi2)) arc = math.acos( cos ) # Remember to multiply arc by the radius of the earth # in your favorite set of units to get length. return arc*6373 distance(lat1, long1, lat2, long2)"},{"prompt":"Generate a Python function to check if a string contains a substring.","completion":"def containsSubstring(string, substring): \\"\\"\\" Returns True if the string contains the substring, False otherwise \\"\\"\\" return substring in string"},{"prompt":"Design an algorithm in Python that takes a string as input and returns a compressed version of the string. aaabbccccc","completion":"def stringCompress(s): result = \\"\\" counter = 1 for i in range(len(s)-1): if s[i] == s[i+1]: counter+=1 else: result += s[i] + str(counter) counter = 1 result += s[i] + str(counter) return result print(stringCompress('aaabbccccca'))"},{"prompt":"Create a python program that simulates a natural language processing (NLP) task using the spacy library.","completion":"import spacy nlp = spacy.load(\\"en_core_web_sm\\") text = \\"Natural language processing (NLP) is a subfield of computer science, information engineering, and artificial intelligence concerned with the interactions between computers and human (natural) languages, in particular how to program computers to process and analyze large amounts of natural language data.\\" # Process the text doc = nlp(text) # Extract named entities for ent in doc.ents: print(ent.text, ent.label_)"},{"prompt":"Create a Python script to find the maximum and minimum values for each sublist in a list [[8, 4], [6, 2, 3], [1, 9, 7]]","completion":"def findMinMax(list): min_list = [] max_list = [] for sublist in list: min_list.append(min(sublist)) max_list.append(max(sublist)) return min_list, max_list list = [[8, 4], [6, 2, 3], [1, 9, 7]] min_list, max_list = findMinMax(list) print(\\"The min values of given sublist :\\", min_list) print(\\"The max values of given sublist :\\", max_list) # Output # The min values of given sublist : [4, 2, 1] #The max values of given sublist : [8, 6, 9]"},{"prompt":"Create a web application using Node.js that displays a random word from a provided list each time the page is loaded. [Hello, World, Coding, JavaScript, Python]","completion":"const express = require('express'); const app = express(); const words = [\\"Hello\\", \\"World\\", \\"Coding\\", \\"JavaScript\\", \\"Python\\"]; app.get('/', (req, res) => { // Get a randomword from the array const randomWord = words[Math.floor(Math.random()*words.length)]; // Send the random word as response res.send(randomWord); }); PORT = 8080; app.listen(PORT, () => console.log(\`Server listening on port {PORT}\`));"},{"prompt":"Consider the following python code. Write a code to modify this such that it generates the output shown. def get_year_from_date(date): year = date.split('')[0] return int(year)","completion":"def get_year_from_date(date): \\"\\"\\" This function takes a string date in the form of a yyyy-mm-dd and returns the year as an integer \\"\\"\\" year = date.split('-')[0] return int(year)"},{"prompt":"Generate code in Python to identify the type of an input number. Number: 100","completion":"if(type(100) == int): print(\\"It is an integer\\") elif(type(100) == float): print(\\"It is a float\\")"},{"prompt":"Create a function in Python that will convert a given string of text into its equivalent URLsafe slug format. This is a sample string","completion":"def url_slug(text): '''Takes text and converts it to url-safe slug format. Args: text (str): Text to be converted to slug Returns: str: slugified text ''' text = text.lower() text = re.sub(r's+', '-', text) text = re.sub(r'[^w-]', '', text) return text"},{"prompt":"Optimize the python code that finds the sum of the elements in a given array. def sum(arr): s = 0 for i in range(len(arr)): s += arr[i] return","completion":"def sum(arr): s = 0 for number in arr: s += number return s"},{"prompt":"Write a Python script to calculate the sum of all the element of a given list. my_list = [3, 5, 6, 7]","completion":"def my_function(my_list): #code return sum(my_list)"},{"prompt":"Write an algorithm in Python to find anagrams in an array of strings. List : ['cinema', 'iceman', 'dog', 'odg', 'god', 'listen', 'silent']","completion":"def get_anagrams(list1): anagrams_list = [] for words in list1: for check_words in list1: if(sorted(words)== sorted(check_words) and words != check_words): anagrams_list.append([words, check_words]) return anagrams_list list1 = ['cinema', 'iceman', 'dog', 'odg', 'god', 'listen', 'silent'] print(get_anagrams(list1))"},{"prompt":"Create a scoring system for a trivia game in Python. The system should take two inputs the correct answer and user response and return a single score value. correct_answer = '5' user_response = 'five'","completion":"def score_trivia(correct, user): correct = correct.lower() user = user.lower() max_score = 10 score = 0 if correct == user: score = max_score elif user in correct or correct in user: score = max_score * 0.8 return score"},{"prompt":"Analyse the sentiment of the given sentence using python. Sentence: I am so excited that I was chosen for the job.","completion":"from textblob import TextBlob # Get the sentiment of the sentence sentence = 'I am so excited that I was chosen for the job.' blob = TextBlob(sentence) sentiment = blob.sentiment print('Polarity:', sentiment.polarity) # Output: Polarity: 0.8"},{"prompt":"Write a Python program to access a MySQL database using MySQL Connector. A MySQL database with one table, students, with columns name (varchar) and grade (integer).","completion":"import mysql.connector # Create connection mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"user\\", passwd=\\"password\\", database=\\"mydatabase\\" ) # Create cursor mycursor = mydb.cursor() # Execute query sql = \\"SELECT * FROM students\\" mycursor.execute(sql) # Fetch all results from cursor object myresult = mycursor.fetchall() # Print result for row in myresult: print(row)"},{"prompt":"Generate a Machine Learning model in Python for sentiment analysis on a rhetorical question. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.feature_extraction.text import TfidfVectorizer # Load the dataset data = pd.read_csv('data.csv') # Split the dataset into training and test sets X = data['rhetorical_questions'] y = data['category'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Create a TF-IDF vectorizer vectorizer = TfidfVectorizer() X_train = vectorizer.fit_transform(X_train) X_test = vectorizer.transform(X_test) # Build and fit the model model = LogisticRegression() model.fit(X_train, y_train) # Make predictions and evaluate performance score = model.score(X_test, y_test)"},{"prompt":"Write a Python function to shift every element in a given array by k. [1, 2, 3, 4, 5]","completion":"def shift(arr, k): for i in range(len(arr)): arr[i] = arr[i] + k return arr arr = [1, 2, 3, 4, 5] shift(arr, 10) print(arr)"},{"prompt":"Create a script in Python to generate a random password of length 10 characters, consisting of numbers, uppercase letters, and symbols. Not applicable","completion":"import string import random def generate_password(): characters = string.ascii_letters + string.digits + string.punctuation password = '' for _ in range(10): password += random.choice(characters) return password print(generate_password())"},{"prompt":"Create a python script to find the palindromic substring with the longest length from a given string. Example String: forgeeksskeegfor","completion":"def longestPalSubstr(string): maxLength = 1 start = 0 length = len(string) low = 0 high = 0 for i in range(1, length): low = i - 1 high = i while low >= 0 and high < length and string[low] == string[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 low = i - 1 high = i + 1 while low >= 0 and high < length and string[low] == string[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 print(\\"Longest palindrome substring is:\\", string[start:start + maxLength]) return maxLength # Driver Program string = \\"forgeeksskeegfor\\" print(\\"Length is: \\" + str(longestPalSubstr(string)))"},{"prompt":"Generate a program to generate a random string of length 5 using the Python library 'random'","completion":"import random def random_string(length): chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' random_string = '' for i in range(length): random_string += random.choice(chars) return random_string print(random_string(5))"},{"prompt":"Create a Python program to take two numbers as user input and print the result of subtracting the smaller from the larger. Not applicable","completion":"x = int(input(\\"Enter the first number: \\")) y = int(input(\\"Enter the second number: \\")) if x > y: result = x-y else: result = y-x print(\\"The result of the operation is:\\", result)"},{"prompt":"Create a Python script that takes in a userspecified temperature in Fahrenheit and prints out the corresponding temperature in Celsius. Not applicable","completion":"def fahrenheit_to_celsius(temp_f): return (temp_f - 32) * 5 / 9 temp_f = float(input('Enter temperature in Fahrenheit:')) temp_c = fahrenheit_to_celsius(temp_f) print(f'{temp_f}F = {temp_c}C')"},{"prompt":"Create a supervised Machine Learning regression model in Python to predict the price of a car (continuous variable) based on four features (odometer, age, make, and model). Not applicable","completion":"import pandas as pd from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Read the dataset dataset = pd.read_csv('dataset.csv') # Define features and labels X = dataset.iloc[:, :4] y = dataset.iloc[:, -1] # Split the dataset into training set and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2) # Normalize the data scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Create and train the model model = LinearRegression() model.fit(X_train, y_train) # Test the model accuracy = model.score(X_test, y_test) print('Accuracy: ', accuracy)"},{"prompt":"Create a search algorithm in Python that takes two inputs 'word' and 'text' and returns true if the word is present in the text. word = code text = Today I wrote some code in Python","completion":"def search(word, text): words = text.split() for w in words: if w == word: return True return False"},{"prompt":"Generate Python code for handling HTTP requests in Flask. Not applicable","completion":"from flask import Flask app = Flask(__name__) @app.route('/', methods=['GET', 'POST']) def handle_request(): if request.method == 'POST': # Handles post request elif request.method == 'GET': # Handles get request if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Design a program in Python to detect if a given number is a perfect square?","completion":"# function to check if # given number is perfect square def isPerfectSquare(n): if n < 0: return False # Base case if n == 1: return True i = 1 x = n // 2 while x >= i: if (x == i) and (n % x == 0): return True x -= 1 return False"},{"prompt":"Generate a python script to convert a string to a list of singlecharacter strings in the same order. 'GPT'","completion":"def string_to_list(s): l = [] for c in s: l.append(c) return l l = string_to_list('GPT') print(l)"},{"prompt":"Optimize the following code in Python. def largest_elements(arr): max_vals = [] while len(arr) > 0: max_value = 0 for item in arr: if item > max_value: max_value = item max_vals.append(max_value) i = 0 while i < len(arr): if arr[i] == max_value: arr.remove(arr[i]) i = 1 i += 1 return max_val","completion":"def largest_elements(arr): max_vals = [] while arr: max_value = max(arr) max_vals.append(max_value) while max_value in arr: arr.remove(max_value) return max_vals"},{"prompt":"Create a python code to check if an integer is a power of two 16","completion":"def isPowerOfTwo(number): return (number > 0) and ((number & (number - 1)) == 0) print(isPowerOfTwo(16))"},{"prompt":"Create a Python program to generate 10 unique and random integers.","completion":"import random def generate_random_ints(): random_ints = [] for _ in range(10): random_int = random.randint(1, 1000) while random_int in random_ints: random_int = random.randint(1, 1000) random_ints.append(random_int) return random_ints"},{"prompt":"Create a basic chatbot in Python that can respond to simple statements and questions about the weather. Not applicable","completion":"import random # Create a dictionary of responses responses = { 'hi': \\"Hello! How can I help you?\\", 'is it raining': 'Yes, it is raining.', 'will it rain': 'It might rain, but I cannot predict the weather.' } # Create a function to generate a response def respond(message): if message in responses: return responses[message] else: return 'I'm sorry, I don't understand.' # Generate a response for a random message message = random.choice(list(responses.keys())) response = respond(message) print(response) # Output: Yes, it is raining."},{"prompt":"Create a program to identify and count the number of words in a string using Python. Not applicable","completion":"# Create function to count the words def word_count(string): # split the string into words words = string.split(' ') # create a dictionary to store the word and its count word_count_dict = {} # add word to the dictionary and increase the count if it already exists for word in words: if word in word_count_dict: word_count_dict[word] += 1 else: word_count_dict[word] = 1 # return the dictionary return word_count_dict # test the code string =\\"This is a test string to test the word count program\\" print(word_count(string))"},{"prompt":"Create a Python program which calculates the sum of the two given numbers. 10, 20","completion":"sum = 0 a = 10 b = 20 sum = a + b print(\\"The sum of\\", a, \\"and\\", b, \\"is\\", sum)"},{"prompt":"Develop an algorithm in Python to find all the prime numbers from a given list. [12, 23, 7, 8, 10, 15]","completion":"def isPrime(num): if num < 2: return False for i in range(2,num): if num % i == 0: return False return True num_list = [12, 23, 7, 8, 10, 15] prime_numbers = [] for n in num_list: if isPrime(n): prime_numbers.append(n) print(prime_numbers) #[23, 7]"},{"prompt":"This code runs a series of tests on a device connected to a serial port. To use it, you need to provide the device name and baud rate as arguments. The code will then run a series of tests, printing the output of each test to the console. If a test fails, the code will print an error message and move on to the next test. To use this code, simply call the main() function.","completion":"#! /usr/bin/python import serial, time import subprocess from subprocess import call, Popen from argparse import ArgumentParser import re def do_test(port, baudrate, test_name): databits = serial.EIGHTBITS stopbits = serial.STOPBITS_ONE parity = serial.PARITY_NONE ser = serial.Serial(port, baudrate, databits, parity, stopbits, timeout=10) ser.write('nn') finished = 0 success = False timeout = 10 # 10 seconds timeout_start = time.time() while finished == 0: serial_line = ser.readline() print(serial_line.replace('n','')) if \\"nsh>\\" in serial_line: finished = 1 if time.time() > timeout_start + timeout: print(\\"Error, timeout\\") finished = 1 break # run test ser.write('tests ' + test_name + 'n') time.sleep(0.05) finished = 0 timeout = 300 # 5 minutes timeout_start = time.time() timeout_newline = time.time() while finished == 0: serial_line = ser.readline() print(serial_line.replace('n','')) if test_name + \\" PASSED\\" in serial_line: finished = 1 success = True elif test_name + \\" FAILED\\" in serial_line: finished = 1 success = False if time.time() > timeout_start + timeout: print(\\"Error, timeout\\") print(test_name + \\" FAILED\\") finished = 1 success = False break # newline every 30 seconds if still running if time.time() - timeout_newline > 30: ser.write('n') timeout_newline = time.time() ser.close() return success def main(): parser = ArgumentParser(description=__doc__) parser.add_argument('--device', \\"-d\\", nargs='?', default = None, help='') parser.add_argument(\\"--baudrate\\", \\"-b\\", dest=\\"baudrate\\", type=int, help=\\"Mavlink port baud rate (default=57600)\\", default=57600) args = parser.parse_args() do_test(args.device, args.baudrate, \\"autodeclination\\") do_test(args.device, args.baudrate, \\"bezier\\") do_test(args.device, args.baudrate, \\"bson\\") do_test(args.device, args.baudrate, \\"commander\\") do_test(args.device, args.baudrate, \\"controllib\\") do_test(args.device, args.baudrate, \\"conv\\") do_test(args.device, args.baudrate, \\"ctlmath\\") #do_test(args.device, args.baudrate, \\"dataman\\") do_test(args.device, args.baudrate, \\"float\\") do_test(args.device, args.baudrate, \\"hrt\\") do_test(args.device, args.baudrate, \\"int\\") do_test(args.device, args.baudrate, \\"IntrusiveQueue\\") do_test(args.device, args.baudrate, \\"List\\") do_test(args.device, args.baudrate, \\"mathlib\\") do_test(args.device, args.baudrate, \\"matrix\\") do_test(args.device, args.baudrate, \\"microbench_hrt\\") do_test(args.device, args.baudrate, \\"microbench_math\\") do_test(args.device, args.baudrate, \\"microbench_matrix\\") do_test(args.device, args.baudrate, \\"microbench_uorb\\") #do_test(args.device, args.baudrate, \\"mixer\\") do_test(args.device, args.baudrate, \\"param\\") do_test(args.device, args.baudrate, \\"parameters\\") do_test(args.device, args.baudrate, \\"perf\\") do_test(args.device, args.baudrate, \\"search_min\\") do_test(args.device, args.baudrate, \\"sleep\\") do_test(args.device, args.baudrate, \\"smoothz\\") do_test(args.device, args.baudrate, \\"time\\") do_test(args.device, args.baudrate, \\"uorb\\") do_test(args.device, args.baudrate, \\"versioning\\") if __name__ == \\"__main__\\": main()"},{"prompt":"Design an algorithm in Python that sorts a list in descending order. List = [3, 4, 1, 2]","completion":"def sort_list(List): for i in range(len(List)-1, 0, -1): for j in range(i): if List[j] < List[j+1]: List[j], List[j+1] = List[j+1], List[j] return List List = [3, 4, 1, 2] sorted_list = sort_list(List) print(sorted_list) # [4, 3, 2, 1]"},{"prompt":"Develop a function in Python to normalize a string.","completion":"import string def normalize_string(string): normalized_string = string.lower().strip().translate(str.maketrans('', '', string.punctuation)) return normalized_string"},{"prompt":"Create a linear regression prediction program in Python to predict the future value of a given stock.","completion":"# Import libraries from sklearn import linear_model import numpy as np import pandas as pd # Reading Data data = pd.read_csv(\\"data.csv\\") X = data['Num_Days'].values.reshape(-1,1) y = data['Price'].values # Fitting Simple Linear Regression to the dataset regressor = linear_model.LinearRegression() regressor.fit(X, y) # Predicting the future stock price # Put the number of days in the future you want to predict the price for X_pred = np.array(int(input(\\"Days in Future:\\"))).reshape(-1,1) prediction = regressor.predict(X_pred) # Output print(prediction[0])"},{"prompt":"Create a Python program that implements a bubble sort algorithm. A given list of numbers, for example, [4,7,2,9,1].","completion":"def bubble_sort(list): for x in range(len(list)-1, 0, -1): for y in range(x): if list[y] > list[y+1]: list[y], list[y+1] = list[y+1], list[y] return list list = [4,7,2,9,1] print(bubble_sort(list)) 12. Instruction: Generate a Rust program to calculate the mean of relevant values in a list. 12. Input: A given list of integers, for example, [2,4,6,8,10]. 12. Output: fn main() { let nums = vec![2, 4, 6, 8, 10]; // given list let mut sum = 0; for num in &nums { sum += num; } let mean = sum / nums.len() as f32; println!(\\"The mean of the list is {}\\", mean); }"},{"prompt":"Write a python program that takes a single argument and returns the first 10 characters of the argument string. Not applicable","completion":"# Get the first 10 characters of a string def get_first_10_chars(string): return string[0:10] str = 'Hello, world!' print(get_first_10_chars(str))"},{"prompt":"Find the shortest path between two nodes using the A* algorithm with Python.","completion":"def astar(start, goal): # open list for all nodes to consider open_list = [] # closed list for already visited nodes closed_list = [] # initializing start values current_node = start current_node.g = 0 current_node.h = 0 # heuristic = 0 # adding start node to open list open_list.append(start) # loop until goal node is found while len(open_list) != 0: # get lowest h value (f = g + h) current_node = get_lowest_h_node(open_list) if current_node == goal: # found the shortest path and reconstruct the path to generate path generate_path(current_node) break open_list.remove(current_node) closed_list.append(current_node) # generate children children = generate_children(current_node) # update node values for child in children: if child in closed_list: continue child.g = current_node.g + h child.h = get_heuristic_value(child, goal) child.parent_node = current_node open_list.append(child) return open_list"},{"prompt":"This code is a Python script for a component guide in the GEAR software. To use it, redistribute or modify it under the terms of the GNU Lesser General Public License. The script defines a class called Guide that inherits from ComponentGuide and contains methods for adding objects, parameters, and layout to the component guide. To use the guide, instantiate an object of the Guide class and call its methods to add objects, parameters, and layout. The script also defines a postInit method for setting up the guide's pick and save transforms and a addLogic method for adding logic to the guide's layout.","completion":"''' This file is part of GEAR. GEAR is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this program. If not, see <http://www.gnu.org/licenses/lgpl.html>. Author: Jeremie Passerin geerem@hotmail.com Url: http://gear.jeremiepasserin.com Date: 2010 / 11 / 15 ''' @package gear.xsi.rig.component.chain_01.guide # @author Jeremie Passerin # # GLOBAL # gear from gear.xsi import c from gear.xsi.rig.component.guide import ComponentGuide # guide info AUTHOR = \\"Jeremie Passerin\\" URL = \\"http://www.jeremiepasserin.com\\" EMAIL = \\"geerem@hotmail.com\\" VERSION = [1,0,1] TYPE = \\"chain_01\\" NAME = \\"chain\\" DESCRIPTION = \\"Simple ik/fk chain\\" # CLASS class Guide(ComponentGuide): compType = TYPE compName = NAME description = DESCRIPTION author = AUTHOR url = URL email = EMAIL version = VERSION compatible = [\\"tail_01\\", \\"chain_cns_01\\"] # ===================================================== # @param self def postInit(self): self.pick_transform = [\\"root\\", \\"#_loc\\"] self.save_transform = [\\"root\\", \\"#_loc\\"] self.save_blade = [\\"blade\\"] self.addMinMax(\\"#_loc\\", 1, -1) # ===================================================== Add more object to the object definition list. # @param self def addObjects(self): self.root = self.addRoot() self.locs = self.addLocMulti(\\"#_loc\\", self.root) self.blade = self.addBlade(\\"blade\\", self.root, self.locs[0]) centers = [self.root] centers.extend(self.locs) self.dispcrv = self.addDispCurve(\\"crv\\", centers) # ===================================================== Add more parameter to the parameter definition list. # @param self def addParameters(self): self.pType = self.addParam(\\"type\\", c.siInt4, 0, 0, None) self.pBlend = self.addParam(\\"blend\\", c.siInt4, 0, 0, 1) self.pNeutralPose = self.addParam(\\"neutralpose\\", c.siBool, False) # ===================================================== Add layout for new parameters. # @param self def addLayout(self): # -------------------------------------------------- # Items typeItems = [\\"fk only\\", 0, \\"ik only\\", 1, \\"ik / fk\\", 2] blendItems = [\\"fk\\", 0, \\"ik\\", 1] # -------------------------------------------------- # Layout tab = self.layout.addTab(\\"Options\\") group = tab.addGroup(\\"Kinematic\\") group.addEnumControl(self.pType.scriptName, typeItems, \\"Type\\", c.siControlCombo) item = group.addItem(self.pNeutralPose.scriptName, \\"Set Neutral Pose on FK Controlers\\") item.addCondition(\\"PPG.\\"+self.pType.scriptName+\\".Value != 1\\") item = group.addEnumControl(self.pBlend.scriptName, blendItems, \\"Default blend\\", c.siControlCombo) item.addCondition(\\"PPG.\\"+self.pType.scriptName+\\".Value == 2\\") # ===================================================== Add logic for new layout. # @param self def addLogic(self): self.logic.addOnChangedRefresh(self.pType.scriptName)"},{"prompt":"Propose a solution that optimizes the following python program. for i in range(1000): for j in range(1000): arr[i][j] += 5","completion":"import numpy as np arr = np.array(arr) # Convert to a numpy array arr += 5 # add 5 to the array"},{"prompt":"Write a Python program to compute the sum of the first 10 odd numbers.","completion":"total = 0 for number in range(1, 21, 2): total += number print(f\\"Sum of the first 10 odd numbers is {total}\\")"},{"prompt":"Generate a Python program that calculates standard deviation of a set of numbers. [20, 25, 30, 35, 40]","completion":"def std_dev(data_set): mean = sum(data_set) / len(data_set) total_sum = 0 for i in data_set: total_sum += (i - mean) ** 2 variance = total_sum / len(data_set) std_dev = variance ** (1/2) return std_dev data_set = [20, 25, 30, 35, 40] print(\\"Standard Deviation: \\" + str(std_dev(data_set)))"},{"prompt":"Write a Python code to print the Fibonacci series between those two numbers. Start: 1 End: 10","completion":"def fibonacci_series(start, end): series_list = [] for n in range(0, end): if (start <= n): series_list.append(n) n1, n2 = 0, 1 for i in range(2,end): nth = n1 + n2 n1 = n2 n2 = nth if (start <= nth): series_list.append(nth) return series_list start = int(input(\\"Start: \\")) end = int(input(\\"End: \\")) print(\\"Fibonacci Series:\\",fibonacci_series(start, end))"},{"prompt":"Create a data structure in Python to calculate the most popular item over time. The items are python dictionaries in the form [{'name': 'item_a', 'count': 10}, {'name': 'item_b', 'count': 5}, {'name': 'item_c', 'count': 1}]","completion":"from collections import defaultdict def most_popular_item(data): counts = defaultdict(int) for item in data: name = item['name'] counts[name] += item['count'] m = counts.get(max(counts, key=counts.get)) print(\\"The most popular item is \\" + m + \\" with a count of \\" + str(counts[m]))"},{"prompt":"mplement an algorithm in Python to convert a binary tree to a linked list.","completion":"def binary_tree_to_linked_list(root): if root is None: return None linked_list_head, linked_list_tail = None, None queue = [root] while queue: node = queue.pop(0) #If linked_list_head element is None, insert node to it if linked_list_head is None: linked_list_head = node; linked_list_tail = node # Insert all the child nodes to the queue if node.left: queue.append(node.left) if node.right: queue.append(node.right) # Link the node with the previous # node created in linked list if linked_list_tail: linked_list_tail.next = node linked_list_tail = node return linked_list_head"},{"prompt":"mplement a KNN Algorithm in Python to classify iris datapoints into three categories.","completion":"# import relevant libraries import numpy as np from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier # load the data iris = load_iris() X = iris.data y = iris.target # Split the data X_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0) # Initialize the model knn_model = KNeighborsClassifier(n_neighbors=3) # Fit the model to train data knn_model.fit(X_train, y_train) # Score the model on test data knn_model.score(X_test, y_test) # Output a prediction knn_model.predict([[3, 5, 4, 2]]) # Output: [1] (This is Iris-versicolor)"},{"prompt":"Create a Python program to generate random passwords. The password should have a length of 8 characters and include a combination of upper and lowercase letters, numbers, and symbols. Not applicable","completion":"import string import random def generatePassword(): encoded_chars = string.ascii_letters + string.digits + string.punctuation password = random.choice(string.ascii_lowercase) password += random.choice(string.ascii_uppercase) password += random.choice(string.digits) password += random.choice(string.punctuation) for i in range(4): password += random.choice(encoded_chars) password = ''.join(random.sample(password, len(password))) return password print(generatePassword())"},{"prompt":"Given a string, write a Python program to remove all leading and trailing whitespace characters. text = This is a text string","completion":"text = text.strip()"},{"prompt":"Develop a function in Python to convert a given number from one base to another num= 610 from_base=7 to_base=10","completion":"def convert_base(num, from_base, to_base): if isinstance(num, str): n = int(num, from_base) else: n = int(num) alphabet = \\"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" if n < to_base: return alphabet[n] else: return convert_base(n // to_base, from_base, to_base) + alphabet[int(n % to_base)] num = 610 from_base = 7 to_base = 10 print(convert_base(num, from_base, to_base))"},{"prompt":"Design a program in Python that calculates the area of a triangle given the three side lengths.","completion":"def area_triangle(a, b, c): # calculate the semi-perimeter s = (a + b + c)/2 # calculate the area Area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 return Area"},{"prompt":"mplement a program in Python to get the sum of all even numbers in a list of integers. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def sum_of_even_numbers(lst): sum = 0 for i in lst: if i%2 == 0: sum = sum + i return sum print(sum_of_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"},{"prompt":"Write an algorithm in Python to find the minimum number of coins required to get a desired amount of money. [1, 2, 5], 11","completion":"def min_coins(coins, amount): # Sort the coins in descending order coins.sort(reverse = True) # Initialize the array to store the number of coins needed result = [] # Iterate through all the coins and calculate the number of coins needed to fulfill the amount for i in coins: while amount >= i: amount -= i result.append(i) # Return the number of coins needed print(len(result)) coins = [1, 2, 5] amount = 11 min_coins(coins, amount)"},{"prompt":"Create a function to perform list sorting using Python. list = [4, 5, 2, 1, 3]","completion":"def sortList(list): list.sort() return list sortedList = sortList([4, 5, 2, 1, 3]) print(sortedList)"},{"prompt":"Create a Python program to find the smallest positive number that is divisible by all of the numbers from 1 to 10. Not applicable","completion":"def smallest_multiple(n): lcm = 1 for i in range(1, n + 1): lcm = lcm * i // gcd(lcm, i) return lcm def gcd(x, y): while(y): x, y = y, x % y return x def main(): print(smallest_multiple(10)) if __name__ == \\"__main__\\": main()"},{"prompt":"Design a program in Python to identify and delete the duplicate elements from a given list of numbers. [1, 2, 4, 2, 3, 4, 5]","completion":"def deleteDuplicateElements(arr): uniqueList = [] for elem in arr: if elem not in uniqueList: uniqueList.append(elem) return uniqueList result = deleteDuplicateElements([1, 2, 4, 2, 3, 4, 5]) print(result)"},{"prompt":"Use a given class to deserialize a JSON response into a Python dictionary. import json from some_library import Deserializer class MyDeserializer(Deserializer): pass response = '{data: abc}'","completion":"class MyDeserializer(Deserializer): def deserialize(self, response): return json.loads(response) deserializer = MyDeserializer() deserialized_data = deserializer.deserialize(response) print(deserialized_data)"},{"prompt":"Build an AI chatbot using Python and DialogFlow. The chatbot should be able to answer customer inquiries related to orders, shipping, and returns. Not applicable","completion":"# import libraries import os import dialogflow # instantiate dialogflow import dialogflow_v2 as dialogflow os.environ[\\"GOOGLE_APPLICATION_CREDENTIALS\\"] = \\"path/to/credentials.json\\" # define the session session_client = dialogflow.SessionsClient() session = session_client.session_path('test-project', \\"unique-session-id\\") # define the request and response request = dialogflow.types.TextInput(text=\\"What is your return policy?\\", language_code=\\"en\\") response = session_client.detect_intent(session=session, query_input=request) # print results print('Query text: {}'.format(response.query_result.query_text)) print('Detected intent: {} (confidence: {})n'.format( response.query_result.intent.display_name, response.query_result.intent_detection_confidence)) print('Fulfillment text: {}n'.format(response.query_result.fulfillment_text))"},{"prompt":"To use this code, first import the necessary modules: bpy, Menu, Panel, and FloatProperty from bpy.props. Then, append the system's python path to the script directory. Next, define the function initSceneProperties with properties for the scene, such as PosX, PosY, MinX, MaxX, MinY, MaxY, GridP, SelectString, and SaveString. After defining the function, call it with the context scene as an argument. Finally, define several classes for different panels and buttons, such as InputFile_Tools, MapOrigin_Tools, MapSize_Tools, GridSize_Tools, and Generate_Tools. Each class has a draw method that creates the necessary UI elements, and several button classes have execute methods that perform specific actions, such as loading a file, saving a file, setting the map origin, setting the map size, setting the grid size, and generating the map. Register the module with bpy.utils.register_module(__name__) to make it available in Blender.","completion":"import bpy from bpy.types import Menu, Panel from bpy.props import * import os import sys import subprocess import ast script_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) sys.path.append(script_dir) # Get system's python path proc = subprocess.Popen('python3 -c \\"import sys; print(sys.path)\\"', stdout=subprocess.PIPE, shell=True) out, err = proc.communicate() paths = ast.literal_eval(out.decode(\\"utf-8\\")) sys.path += (paths) import blendit.SimulationData as Sim import pickle as pic def initSceneProperties(scn): bpy.types.Scene.PosX = FloatProperty( name=\\"X\\", description=\\"position of the origin\\") scn['PosX'] = 0 bpy.types.Scene.PosY = FloatProperty( name=\\"Y\\", description=\\"position of the origin\\") scn['PosY'] = 0 bpy.types.Scene.MinX = FloatProperty( name=\\"Min\\", description=\\"Bound of the map\\") scn['MinX'] = -float(\\"inf\\") bpy.types.Scene.MaxX = FloatProperty( name=\\"Max\\", description=\\"Bound of the map\\") scn['MaxX'] = float(\\"inf\\") bpy.types.Scene.MinY = FloatProperty( name=\\"Max\\", description=\\"Bound of the map\\") scn['MinY'] = -float(\\"inf\\") bpy.types.Scene.MaxY = FloatProperty( name=\\"Max\\", description=\\"Bound of the map\\") scn['MaxY'] = float(\\"inf\\") bpy.types.Scene.GridP = FloatProperty( name=\\"P\\", description=\\"Grid precision\\", subtype='PERCENTAGE', default=100, min=0, max=100) scn['GridP'] = 100 bpy.types.Scene.SelectString = StringProperty( name=\\"Input\\", description=\\"Enter an input file\\", subtype='FILE_PATH') scn['SelectString'] = \\"filename.py\\" bpy.types.Scene.SaveString = StringProperty( name=\\"Output\\", description=\\"Enter an output file\\", subtype='FILE_PATH') scn['SaveString'] = \\"filename.py\\" return initSceneProperties(bpy.context.scene) # # # class MapButtonsPanel(Panel): # bl_category = 'Map' # bl_space_type = 'VIEW_3D' # bl_region_type = 'TOOLS' # # def draw(self, context): # layout = self.layout # scn = context.scene class InputFile_Tools(Panel): bl_label = \\"Input File\\" bl_category = \\"Map\\" bl_space_type = \\"VIEW_3D\\" bl_region_type = \\"TOOLS\\" def draw(self, context): layout = self.layout scn = context.scene layout.prop(scn, 'SelectString') layout.operator(\\"env.select\\") layout.prop(scn, 'SaveString') layout.operator(\\"env.save\\") class MapOrigin_Tools(Panel): bl_label = \\"Map Origin\\" bl_category = \\"Map\\" bl_space_type = \\"VIEW_3D\\" bl_region_type = \\"TOOLS\\" # COMPAT_ENGINES = {'BLENDER_RENDER'} def draw(self, context): layout = self.layout scn = context.scene layout.label(text=\\"Origin Position:\\") row = layout.row(align=True) row.alignment = 'EXPAND' row.prop(scn, 'PosX') row.prop(scn, 'PosY') layout.operator(\\"env.origin\\") layout.operator(\\"env.set\\") class MapSize_Tools(Panel): bl_label = \\"Map Bounds\\" bl_category = \\"Map\\" bl_space_type = \\"VIEW_3D\\" bl_region_type = \\"TOOLS\\" def draw(self, context): layout = self.layout scn = context.scene layout.label(text=\\"X bounds:\\") row = layout.row(align=True) row.alignment = 'EXPAND' row.prop(scn, 'MinX', text=\\"Min\\") row.prop(scn, 'MaxX', text=\\"Max\\") layout.label(text=\\"Y bounds:\\") row = layout.row(align=True) row.alignment = 'EXPAND' row.prop(scn, 'MinY', text=\\"Min\\") row.prop(scn, 'MaxY', text=\\"Max\\") layout.operator(\\"env.size\\") class GridSize_Tools (Panel): bl_label = \\"Grid Size\\" bl_category = \\"Map\\" bl_space_type = \\"VIEW_3D\\" bl_region_type = \\"TOOLS\\" def draw(self, context): layout = self.layout scn = context.scene layout.prop(scn, 'GridP') layout.operator(\\"env.grid\\") class Generate_Tools (Panel): bl_label = \\"Generate Map\\" bl_category = \\"Map\\" bl_space_type = \\"VIEW_3D\\" bl_region_type = \\"TOOLS\\" def draw(self, context): layout = self.layout scn = context.scene layout.operator(\\"env.generate\\") class MapSelectButton(bpy.types.Operator): bl_idname = \\"env.select\\" bl_label = \\"Set input as configuration\\" def execute(self, context): scn = bpy.context.scene view = bpy.context.space_data ic = open(SelectString, \\"rb\\") Sim.graph = pic.load(ic) ic.close() return{'FINISHED'} class MapSaveButton(bpy.types.Operator): bl_idname = \\"env.save\\" bl_label = \\"Save configuration\\" def execute(self, context): scn = bpy.context.scene view = bpy.context.space_data oc = open(SaveString, \\"wb\\") pic.dump(Sim.graph, oc) oc.close() return{'FINISHED'} class MapOriginCursorButton(bpy.types.Operator): bl_idname = \\"env.origin\\" bl_label = \\"From cursor\\" def execute(self, context): scn = bpy.context.scene view = bpy.context.space_data Pcursor = view.cursor_location bpy.context.scene.PosX = Pcursor[0] bpy.context.scene.PosY = Pcursor[1] scn.cursor_location = (scn.PosX, scn.PosY, 0) return{'FINISHED'} class MapOriginButton(bpy.types.Operator): bl_idname = \\"env.set\\" bl_label = \\"Set map origin\\" def execute(self, context): scn = bpy.context.scene view = bpy.context.space_data Sim.OriginX = PosX Sim.OriginY = PosY return{'FINISHED'} class MapSizeButton(bpy.types.Operator): bl_idname = \\"env.size\\" bl_label = \\"Set map size\\" def execute(self, context): scn = bpy.context.scene Sim.MinX = MinX Sim.MaxX = MaxX Sim.MinY = MinY Sim.MaxY = MaxY return{'FINISHED'} class MapGridButton(bpy.types.Operator): bl_idname = \\"env.grid\\" bl_label = \\"Set Grid size\\" def execute(self, context): scn = bpy.context.scene coefficient = 5 - (GridP / 20) Sim.Grid = Sim.MinGrid * (10 ** coefficient) return{'FINISHED'} class MapGenerationButton(bpy.types.Operator): bl_idname = \\"env.generate\\" bl_label = \\"Generate\\" def execute(self, context): scn = bpy.context.scene Sim.renew_graph() return{'FINISHED'} bpy.utils.register_module(__name__)"},{"prompt":"Debug the following Python code and make it functional (read the instructions for the code). def factorial(n): if n == 0: return 1 else: return n * factorial(n 1) factorial(5)","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n - 1) # call the method print(factorial(5))"},{"prompt":"Create a function to reverse a string in Python. Hello","completion":"def reverse_string(string): result = \\"\\" for i in range(len(string) - 1, -1, -1): result += string[i] return result reverse_string(\\"hello\\")"},{"prompt":"Design a class for random password generation in Python.","completion":"import random class RandomPasswordGenerator: def __init__(self, length=10): self.length = length self.password_chars = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890!@#%^\\" def generate_password(self): password = \\"\\" for _ in range(self.length): index = random.randint(0, len(self.password_chars) - 1 ) password += self.password_chars[index] return password"},{"prompt":"Create a Python class named Student that stores the name, age, and grades of a student.","completion":"class Student: def __init__(self, name, age, grades): self.name = name self.age = age self.grades = grades def get_grade_average(self): total = 0 for grade in self.grades: total += grade return total/len(self.grades)"},{"prompt":"Construct a python program to generate permutations of a given list. Given list: [1, 2, 3]","completion":"def permutation(lst): # If lst is empty then there are no permutations if len(lst) == 0: return [] # If there is only one element in lst then, only one permuatation is possible if len(lst) == 1: return [lst] # Find the permutations for lst if there are more than 1 characters l = [] # empty list that will store current permutation # Iterate the input(lst) and calculate the permutation for i in range(len(lst)): m = lst[i] # Extract lst[i] or m from the list. remLst is # remaining list remLst = lst[:i] + lst[i+1:] # Generating all permutations where m is first element for p in permutation(remLst): l.append([m] + p) return l data = list('123') for p in permutation(data): print (p) # Output: # [1, 2, 3] # [1, 3, 2] # [2, 1, 3] # [2, 3, 1] # [3, 1, 2] # [3, 2, 1]"},{"prompt":"Write an efficient sorting algorithm in Python that will sort a list of numbers. [5, 3, 1, 4, 7, 2, 6]","completion":"def sort(nums): for i in range(len(nums)): min_index = i for j in range(i + 1, len(nums)): if nums[min_index] > nums[j]: min_index = j nums[i], nums[min_index] = nums[min_index], nums[i] return nums print(sort([5, 3, 1, 4, 7, 2, 6]))"},{"prompt":"Can you give an example of a decision tree written in Python?","completion":"import pandas as pd from sklearn import tree # Data data = {'c1': ['x','x','x','x','y','y','y','y'],'c2': ['g','g','d','d','g','g','d','d'],'c3': ['l','h','h','l','h','l','l','h'], 'target': ['0','0','0','0','1','1','1','1']} inputs = pd.DataFrame(data = data) # Training the decision tree dtree = tree.DecisionTreeClassifier(criterion = 'entropy') dtree.fit(X = inputs[['c1','c2','c3']], y = inputs['target']) # Visualizing the Decision Tree tree.plot_tree(dtree)"},{"prompt":"Create a Python program to compare two strings and print the number of characters that are not common to both strings. String A: Hello String B: World","completion":"Number of non-common characters: 7 #Program: def compare(string_a, string_b): count=0 for i in string_a: if i not in string_b: count+=1 for j in string_b: if j not in string_a: count+=1 print(f\\"Number of non-common characters: {count}\\") string_a=input(\\"String A: \\") string_b=input(\\"String B: \\") compare(string_a,string_b)"},{"prompt":"Using the NumPy library in Python, calculate the mean of the following array. array = [2, 4, 7, 8, 9]","completion":"import numpy as np arr = np.array([2, 4, 7, 8, 9]) mean = np.mean(arr) print(mean) # 6.2"},{"prompt":"Compare tasmin, tas, tasmax in a timeseries of GeoTiff files. The code includes functions to rasterize, sort files, and calculate the mean of the full domain. The code is set up to compare downscaled climate data to old climate data for the historical period. The output is a plot of the mean temperature or precipitation for the specified time period. The output is saved as a PNG file.","completion":"# # # # # compare tasmin, tas, tasmax in a timeseries of GeoTiff files # # # # def transform_from_latlon( lat, lon ): ''' simple way to make an affine transform from lats and lons coords ''' from affine import Affine lat = np.asarray( lat ) lon = np.asarray(lon) trans = Affine.translation(lon[0], lat[0]) scale = Affine.scale(lon[1] - lon[0], lat[1] - lat[0]) return trans * scale def rasterize( shapes, coords, latitude='latitude', longitude='longitude', fill=None, **kwargs ): ''' Rasterize a list of (geometry, fill_value) tuples onto the given xarray coordinates. This only works for 1d latitude and longitude arrays. ''' from rasterio import features if fill == None: fill = np.nan transform = transform_from_latlon( coords[ latitude ], coords[ longitude ] ) out_shape = ( len( coords[ latitude ] ), len( coords[ longitude ] ) ) raster = features.rasterize(shapes, out_shape=out_shape, fill=fill, transform=transform, dtype=float, **kwargs) spatial_coords = {latitude: coords[latitude], longitude: coords[longitude]} return xr.DataArray(raster, coords=spatial_coords, dims=(latitude, longitude)) def sort_files( files, split_on='_', elem_month=-2, elem_year=-1 ): ''' sort a list of files properly using the month and year parsed from the filename. This is useful with SNAP data since the standard is to name files like '<prefix>_MM_YYYY.tif'. If sorted using base Pythons sort/sorted functions, things will be sorted by the first char of the month, which makes thing go 1, 11, ... which sucks for timeseries this sorts it properly following SNAP standards as the default settings. ARGUMENTS: ---------- files = [list] list of \`str\` pathnames to be sorted by month and year. usually from glob.glob. split_on = [str] \`str\` character to split the filename on. default:'_', SNAP standard. elem_month = [int] slice element from resultant split filename list. Follows Python slicing syntax. default:-2. For SNAP standard. elem_year = [int] slice element from resultant split filename list. Follows Python slicing syntax. default:-1. For SNAP standard. RETURNS: -------- sorted \`list\` by month and year ascending. ''' import pandas as pd months = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_month]) for fn in files ] years = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_year]) for fn in files ] df = pd.DataFrame( {'fn':files, 'month':months, 'year':years} ) df_sorted = df.sort_values( ['year', 'month' ] ) return df_sorted.fn.tolist() def only_years( files, begin=1901, end=2100, split_on='_', elem_year=-1 ): ''' return new list of filenames where they are truncated to begin:end ARGUMENTS: ---------- files = [list] list of \`str\` pathnames to be sorted by month and year. usually from glob.glob. begin = [int] four digit integer year of the begin time default:1901 end = [int] four digit integer year of the end time default:2100 split_on = [str] \`str\` character to split the filename on. default:'_', SNAP standard. elem_year = [int] slice element from resultant split filename list. Follows Python slicing syntax. default:-1. For SNAP standard. RETURNS: -------- sliced \`list\` to begin and end year. ''' import pandas as pd years = [ int(os.path.basename( fn ).split('.')[0].split( split_on )[elem_year]) for fn in files ] df = pd.DataFrame( { 'fn':files, 'year':years } ) df_slice = df[ (df.year >= begin ) & (df.year <= end ) ] return df_slice.fn.tolist() def masked_mean( fn, bounds=None ): ''' get mean of the full domain since the data are already clipped mostly used for processing lots of files in parallel.''' import numpy as np import rasterio with rasterio.open( fn ) as rst: if bounds: window = rst.window( *bounds ) else: window = rst.window( *rst.bounds ) mask = (rst.read_masks( 1 ) == 0) arr = np.ma.masked_array( rst.read( 1, window=window ), mask=mask ) return np.mean( arr ) if __name__ == '__main__': import os, glob import geopandas as gpd import numpy as np import xarray as xr import matplotlib matplotlib.use( 'agg' ) from matplotlib import pyplot as plt from pathos.mp_map import mp_map import pandas as pd import geopandas as gpd # args / set working dir base_dir = '/workspace/Shared/Tech_Projects/EPSCoR_Southcentral/project_data' os.chdir( base_dir ) # scenarios = ['rcp60', 'rcp85'] scenarios = ['historical'] shp_fn = '/workspace/Shared/Tech_Projects/EPSCoR_Southcentral/project_data/SCTC_studyarea/Kenai_StudyArea.shp' shp = gpd.read_file( shp_fn ) bounds = shp.bounds # models = ['5ModelAvg','CRU_TS323','GFDL-CM3','GISS-E2-R','IPSL-CM5A-LR','MRI-CGCM3','NCAR-CCSM4'] # models = ['GFDL-CM3','GISS-E2-R','IPSL-CM5A-LR','MRI-CGCM3','NCAR-CCSM4'] models = ['ts323'] variables_list = [['pr']]# ['tasmax', 'tas', 'tasmin']]#, # models = ['CRU_TS323'] # begin_end_groups = [[2016,2016],[2010,2020],[2095, 2100]] begin_end_groups = [[1916, 1916],[1950, 1960],[1995, 2000]] for scenario in scenarios: for variables in variables_list: for m in models: for begin, end in begin_end_groups: # not fully wired-up yet if m == 'ts323': old_dir = '/Data/Base_Data/Climate/AK_CAN_2km/historical/CRU/CRU_TS32' # begin = 1950 # end = 1965 else: if scenario == 'historical': old_dir = '/Data/Base_Data/Climate/AK_CAN_2km/historical/AR5_CMIP5_models' # begin = 1950 # end = 1965 else: old_dir = '/Data/Base_Data/Climate/AK_CAN_2km/projected/AR5_CMIP5_models' # begin = 2095 # end = 2100 figsize = (16,9) out = {} for v in variables: path = os.path.join( base_dir,'downscaled', m, scenario, v ) print( path ) files = glob.glob( os.path.join( path, '*.tif' ) ) files = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) ) out[ v ] = mp_map( masked_mean, files, nproc=4 ) if v == 'tas' or v == 'pr': if m == 'ts323': path = os.path.join( old_dir, v ) print( path ) else: path = os.path.join( old_dir, scenario, m, v ) files = glob.glob( os.path.join( path, '*.tif' ) ) files = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) ) out[ v+'_old' ] = mp_map( masked_mean, files, nproc=4 ) # nofix path = os.path.join( base_dir,'downscaled_pr_nofix', m, scenario, v ) print( path ) files = glob.glob( os.path.join( path, '*.tif' ) ) files = sort_files( only_years( files, begin=begin, end=end, split_on='_', elem_year=-1 ) ) out[ v+'_nofix' ] = mp_map( masked_mean, files, nproc=4 ) plot_df = pd.DataFrame( out ) plot_df.index = pd.date_range( start=str(begin), end=str(end+1), freq='M' ) # sort the columns for output plotting cleanliness: if 'tas' in variables: col_list = ['tasmax', 'tas_old', 'tas', 'tasmin'] elif 'pr' in variables: col_list = ['pr', 'pr_old', 'pr_nofix'] plot_df = plot_df[ col_list ] # get em in the order for plotting if v == 'pr': plot_df = plot_df.round()[['pr','pr_old']] # now plot the dataframe if begin == end: title = 'EPSCoR SC AOI Temp Metrics {} {} {}'.format( m, scenario, begin ) else: title = 'EPSCoR SC AOI Temp Metrics {} {} {} - {}'.format( m, scenario, begin, end ) if 'tas' in variables: colors = ['red', 'black', 'blue', 'red' ] else: colors = [ 'blue', 'black', 'darkred' ] ax = plot_df.plot( kind='line', title=title, figsize=figsize, color=colors ) output_dir = os.path.join( base_dir, 'compare_downscaling_versions_PR_no_fix' ) if not os.path.exists( output_dir ): os.makedirs( output_dir ) # now plot the dataframe out_metric_fn = 'temps' if 'pr' in variables: out_metric_fn = 'prec' if begin == end: output_filename = os.path.join( output_dir,'mean_{}_epscor_sc_{}_{}_{}.png'.format( out_metric_fn, m, scenario, begin ) ) else: output_filename = os.path.join( output_dir,'mean_{}_epscor_sc_{}_{}_{}_{}.png'.format( out_metric_fn, m, scenario, begin, end ) ) plt.savefig( output_filename, dpi=400 ) plt.close() # # # PRISM TEST VERSION DIFFERENCES # # # # # # # # import rasterio # import numpy as np # import os, glob, itertools # base_path = '/workspace/Shared/Tech_Projects/EPSCoR_Southcentral/project_data/prism/raw_prism' # variables = [ 'tmax', 'tmin' ] # for variable in variables: # ak_olds = sorted( glob.glob( os.path.join( base_path, 'prism_raw_older', 'ak', variable, '*.asc' ) ) ) # ak_news = sorted( glob.glob( os.path.join( base_path, 'prism_raw_2016', 'ak', variable, '*.asc' ) ) ) # olds = np.array([ rasterio.open( i ).read( 1 ) for i in ak_olds if '_14' not in i ]) # news = np.array([ rasterio.open( i ).read( 1 ) *.10 for i in ak_news if '_14' not in i ]) # out = olds - news # out[ (olds == -9999.0) | (news == -9999.0) ] = 0 # uniques = np.unique( out ) # uniques[ uniques > 0.01 ]"},{"prompt":"Create a data preprocessing pipeline in Python using the ScikitLearn library. The dataset contains data about the health of a group of patients with 9 attributes: age, gender, height, weight, heart rate, blood pressure, cholesterol, glycemic index, and BMI.","completion":"import numpy as np import pandas as pd from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split # Load the dataset data = pd.read_csv('dataset.csv') # Separate the features and target X = data.drop(['target'], axis=1) y = data['target'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42) # Standardizing the data scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test)"},{"prompt":"Write a Python program to classify the following data into classes. Student 1: {Name: Peter, Age: 34, Marks: 69} Student 2: {Name:Alice, Age: 20, Marks: 89}","completion":"def classify_data(students): for student in students: if student['Marks'] < 70: student['Class'] = 'Average' elif student['Marks'] >= 70 and student['Marks'] < 90: student['Class'] = 'Good' elif student['Marks'] >= 90: student['Class'] = 'Excellent'"},{"prompt":"Create a Python code to filter out any numbers which is divisible by 3 or 5 in a list. [1,2,3,4,5,6,7,8,9,10,11,12]","completion":"def filter_list(lst): \\"\\"\\" This function takes in a list and filters out any numbers which is divisible by 3 or 5. Parameters: lst (list): the list Returns: list: the list with divisible by 3 and 5 filtered out \\"\\"\\" result = [] for num in lst: if num % 3 != 0 and num % 5 != 0: result.append(num) return result"},{"prompt":"Write a Python program to print out the first 10 numbers in the Fibonacci sequence starting from 0. Not applicable","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b n = 10 print(Fibonacci(n))"},{"prompt":"Train a random forest model in Python with the scikitlearn library to predict the landing of flights in airports.","completion":"# Import libraries from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split # Load data data = # your data # Process data X = data[['dep_delay', 'arr_delay']] y = data['arrival_airport'] # Train-test split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train model model = RandomForestClassifier(n_estimators=100, random_state=42, max_depth=5) model.fit(X_train, y_train) # Test model score = model.score(X_test, y_test) print(\\"Accuracy: {:.2f}%\\".format(score*100))"},{"prompt":"Write a correct Python program to extract all words from a given sentence which have 4 or more characters. my_sentence = This is an example sentence","completion":"def words_with_four_or_more_characters(my_sentence): words = my_sentence.split(\\" \\") four_plus_words = [] for word in words: if len(word) >= 4: four_plus_words.append(word) return four_plus_words"},{"prompt":"Write a Python program to sort a given list in ascending order without using builtin functions. [3, 7, 4, 1, 9]","completion":"def sort_list(lst): for i in range(0, len(lst)): for j in range(i+1, len(lst)): if lst[i] > lst[j]: lst[i], lst[j] = lst[j], lst[i] return lst print(sort_list([3, 7, 4, 1, 9])) # prints [1, 3, 4, 7, 9]"},{"prompt":"Write a function in Python to find the closest number to a given number in an unsorted array. [3, 5, 8, 11, 12], 4","completion":"def closest_number(arr, number): diff = [] for i in arr: diff.append(abs(i-number)) closestNumberIndex = 0 minDiff = diff[closestNumberIndex] for i in range(len(diff)): if diff[i] < minDiff: closestNumberIndex = i minDiff = diff[i] return arr[closestNumberIndex] arr = [3, 5, 8, 11, 12] number = 4 ans = closest_number(arr, number) print(ans)"},{"prompt":"Write a Python program to convert the ages listed in the input into their equivalent years. Input: Ages: 14 months 2 years 4 weeks 6 day","completion":"ages = [\\"14 months\\", \\"2 years\\", \\"4 weeks\\", \\"6 days\\"] def convert_age(ages): converted_ages = [] for age in ages: age_split = age.split(\\" \\") if age_split[1] == \\"months\\": converted_age = int(age_split[0]) / 12 elif age_split[1] == \\"years\\": converted_age = int(age_split[0]) elif age_split[1] == \\"weeks\\": converted_age = int(age_split[0]) / 52 elif age_split[1] == \\"days\\": converted_age = int(age_split[0]) / 365 converted_ages.append(converted_age) return converted_ages converted_ages = convert_age(ages) print(converted_ages)"},{"prompt":"Create a Python script that uses a library of your choice to parse a HTML table into a list of objects. <table> <tr> <th>Name</th> <th>Age</th> <th>Location</th> </tr> <tr> <td>Jane Doe</td> <td>22</td> <td>Paris</td> </tr> <tr> <td>John Smith</td> <td>25</td> <td>London</td> </tr> </table>","completion":"import bs4 from bs4 import BeautifulSoup html = '''<table> <tr> <th>Name</th> <th>Age</th> <th>Location</th> </tr> <tr> <td>Jane Doe</td> <td>22</td> <td>Paris</td> </tr> <tr> <td>John Smith</td> <td>25</td> <td>London</td> </tr> </table>''' soup = BeautifulSoup(html, 'html.parser') table = soup.find('table') th = table.find_all('th') headers = [i.text for i in th] data = [] for tr in table.find_all('tr'): tds = tr.find_all('td') row = [i.text for i in tds] if row: data.append(dict(zip(headers, row))) print(data)"},{"prompt":"Build a graphical user interface (GUI) in Python with a button widget to increase the number displayed in a label","completion":"import tkinter def increase_count(): global count count += 1 counter_label.config(text=str(count)) # Create the main window root = tkinter.Tk() root.geometry(\\"300x200\\") # Create a label to show the count count = 0 counter_label = tkinter.Label(root, text=str(count)) counter_label.pack() # Create a button to increase the count increase_button = tkinter.Button(root, text=\\"Increase Count\\", command=increase_count) increase_button.pack() # Run the main loop root.mainloop()"},{"prompt":"Write a Python program to filter out the numbers from a list that are divisible by a given number. list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] divisible_by = 3","completion":"numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] divisible_by = 3 result = [num for num in numbers if num % divisible_by != 0] print(result) # [1, 2, 4, 5, 7, 8, 10]"},{"prompt":"Given an array of numbers, write a program to remove the duplicates from the array. [1, 2, 2, 3, 4, 4, 5]","completion":"def remove_duplicates(arr): return list(set(arr)) # using built-in python set()"},{"prompt":"Write a python program for sentiment analysis on movie reviews. No inpu","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentiment_analyzer = SentimentIntensityAnalyzer() def detect_sentiment(review): scores = sentiment_analyzer.polarity_scores(review) if scores['compound'] > 0.05: return \\"positive\\" elif scores['compound'] < -0.05: return \\"negative\\" else: return \\"neutral\\" reviews = [\\"This is a great movie!\\", \\"This movie is terrible\\"] for review in reviews: print(detect_sentiment(review))"},{"prompt":"Create a Python script to validate a JSON string. {name:John,age:30}","completion":"import json def validate_json_string(s): try: json_obj = json.loads(s) return True except json.JSONDecodeError: return False"},{"prompt":"Write an algorithm in Python to detect the reversal of a linked list 1 > 2 > 3 > 4 > 3 > 2 > 1","completion":"class Node: def __init__(self, data): self.data = data self.next = None def check_reverse(head): slow = head fast = head while fast is not None and fast.next is not None: slow = slow.next fast = fast.next.next node = None while slow is not None: n = slow.next slow.next = node node = slow slow = n while head is not None and node is not None: if head.data != node.data: return False head = head.next node = node.next return True"},{"prompt":"Create a Text Processing program in Python to analyze a large document and find the most frequently used words. Not applicable","completion":"from collections import Counter def analyze_document(document): # Split the document into a list of words words = document.split() # Count the frequencies of each word in the document frequencies = Counter(words) # Get a list of the words with the highest frequency highest_frequency = frequencies.most_common() # Print out the result print('The most frequently used words in the document are: ') for word, frequency in highest_frequency: print(word, frequency)"},{"prompt":"Create a function in Python for reversing a linked list.","completion":"# Node class class Node: # Function to initialise the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class class LinkedList: # Function to initialize head def __init__(self): self.head = None # Function to reverse the linked list def reverse(self): prev = None current = self.head while(current is not None): next = current.next current.next = prev prev = current current = next self.head = prev"},{"prompt":"Create a Python GUI to generate a simple report.","completion":"import tkinter as tk # Create main window window = tk.Tk() window.title(\\"Report Generator\\") # Create widgets label1 = tk.Label(window, text=\\"Enter data:\\") text_input = tk.Text(window, height=3, width=30) button1 = tk.Button(window, text=\\"Create Report\\", command=generate_report) # Place widgets label1.pack() text_input.pack() button1.pack() # Function to generate report def generate_report(): # Fetch user input input = text_input.get(\\"1.0\\", \\"end-1c\\") # Create report ... # Process input to create report # Display report report_label = tk.Label(window, text=report) report_label.pack() # Start GUI window.mainloop()"},{"prompt":"Generate a for loop to iterate over a list of numbers and write the output using python. [1, 2, 3, 4, 5]","completion":"for num in [1, 2, 3, 4, 5]: print(num)"},{"prompt":"Design a class in Python that contains a method to find the intersection of two sorted integer arrays with no duplicates.","completion":"class ArrayIntersection(): def __init__(self, arr1, arr2): self.arr1 = arr1 self.arr2 = arr2 def intersection(self): intersection = [] i, j = 0, 0 while i < len(self.arr1) and j < len(self.arr2): if self.arr1[i] == self.arr2[j]: intersection.append(self.arr1[i]) i += 1 j += 1 elif self.arr1[i] < self.arr2[j]: i += 1 else: j += 1 return intersection if __name__ == '__main__': arr1 = [1, 2, 3, 4, 5] arr2 = [3, 5, 6] intersection = ArrayIntersection(arr1, arr2) print(intersection.intersection())"},{"prompt":"Edit this Python program to print a concatenated string of two given strings with a space between them? Hello and World","completion":"string1 = \\"Hello\\" string2 = \\"World\\" # Concatenate two strings concatenated_string = string1 + \\" \\" + string2 # Print the result print(concatenated_string)"},{"prompt":"Create a function to extract the first key of a given dictionary in Python.","completion":"def get_first_key(d): if d: return next(iter(d)) return None"},{"prompt":"Generate a Python class that implements a queue data structure.","completion":"class Queue: def __init__(self): self.queue = [] def enqueue(self, item): self.queue.append(item) def dequeue(self): if len(self.queue) > 0: return self.queue.pop(0) else: return None def peek(self): if len(self.queue) > 0: return self.queue[0] else: return None"},{"prompt":"Create a Python Program to perform a linear search on given data and print the index of the found element. data = [7, 4, 3, 11, 9]","completion":"def linear_search(data, target): for i in range(len(data)): if (data[i] == target): return i return -1 data = [7, 4, 3, 11, 9] target = 11 index = linear_search(data, target) if index != -1: print(\\"Element\\", target, \\"is present at index\\", index) else: print(\\"Element is not present in the given array\\")"},{"prompt":"Formulate an algorithm to evaluate a given sudoku board in Python. board = [[3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]","completion":"def evaluate_suduku(board): rows = len(board) cols = len(board[0]) # Check rows for row in board: if not all_unique(row): return False # Check columns for i in range(cols): column = [row[i] for row in board] if not all_unique(column): return False # Check 3x3 boxes for i in range(0,rows-2,3): for j in range(0,cols-2,3): box = [] for row in board[i:i+3]: for num in row[j:j+3]: box.append(num) if not all_unique(box): return False return True # Helper Function to check uniqueness def all_unique(lst): seen = set() return not any(i in seen or seen.add(i) for i in lst)"},{"prompt":"mplement a method in Python to round off any given number to the nearest integer. 5.66","completion":"def roundNum(num): if (num - int(num)) >= 0.5: return int(num) + 1 else: return int(num) num = 5.66 roundedNum = roundNum(num) print(roundedNum)"},{"prompt":"Write a Python program to reverse a string without using reversed() function.","completion":"def reverse_string(input_string): # Initialize a new_string new_string = \\"\\" # Traverse in the string starting from the end for i in range(len(input_string)-1,-1,-1): # Append each character to the new_string new_string = new_string + input_string[i] # Return the reversed_string return new_string"},{"prompt":"Design an algorithm in Python which takes an array as an input and sorts them in ascending order using selection sort. [76, 25, 16, 15, 88]","completion":"def selection_sort(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] arr = [76, 25, 16, 15, 88] selection_sort(arr) print(\\"Sorted array:\\", arr) # [15, 16, 25, 76, 88]"},{"prompt":"Devise a function in Python that will find the number of characters in a string.","completion":"def find_length(string): return len(string) print(find_length(\\"Hello World!\\")) # Output: 12"},{"prompt":"Replace the given SQL query with a Python program to calculate the sum of all the column values. SELECT SUM(column) FROM table;","completion":"import pandas as pd data = pd.read_sql query = \\"SELECT * FROM table\\" df = pd.read_sql(query, conn) sum_column = df['column'].sum() print(sum_column)"},{"prompt":"Generate an efficient Python program to reverse a string. Hello","completion":"def reverseString(inputString): reversedString = \\"\\" for i in inputString: reversedString = i + reversedString return reversedString print(reverseString(\\"Hello\\"))"},{"prompt":"Transform this JSON into a Python Dictionary. {name: John, age: 28, location: New York}","completion":"import json # Load the JSON data into a Python Dictionary data = json.loads('{\\"name\\": \\"John\\", \\"age\\": 28, \\"location\\": \\"New York\\"}')"},{"prompt":"Use a machine learning algorithm to classify emails into two categories: junk and nonjunk using Python.","completion":"from sklearn.naive_bayes import MultinomialNB # Load training data X_train = ... y_train = ... # Create classifier clf = MultinomialNB() # Train the classifier clf.fit(X_train, y_train) # Make predictions y_predicted = clf.predict(X_test)"},{"prompt":"Generate a valid Python program to create an alphabetically sorted list of all the words in a sentence. This is a great day","completion":"def sortSentence(sentence): words = sentence.split(\\" \\") words.sort() return words result = sortSentence(\\"This is a great day\\") print(result)"},{"prompt":"Create a Python program to split a given string into a list of strings by reducing all consecutive whitespaces to a single whitespace. 'This is a long string of words.'","completion":"def split_consec_spaces(s): words = [] word = '' for c in s: if c.isspace(): if word: words.append(word) word = '' else: word+=c if word: words.append(word) return words s = 'This is a long string of words.' words = split_consec_spaces(s) print(words) # Output: ['This', 'is', 'a', 'long', 'string', 'of', 'words.']"},{"prompt":"Create a python program that prints all the prime numbers between the two numbers provided in the command line.","completion":"import sys # Find prime numbers between two numbers k = int(sys.argv[1]) n = int(sys.argv[2]) print(\\"List of prime numbers between\\", k, \\"and\\", n, \\"are:\\") for num in range(k, n + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num)"},{"prompt":"Write a code in Python to optimize this objective function. Objective function: x + y^2 + z^3","completion":"import scipy.optimize def objective(variables): x,y,z = variables return x + y*y + z*z*z x0 = [0,0,0] # Initial guess of variables # Perform the optimization res = scipy.optimize.minimize( objective, x0, method='nelder-mead', options={'xtol': 1e-8, 'disp': True} ) # Print resultant variables print(res.x) # Print minimal value print(res.fun)"},{"prompt":"This code extracts new miRNAs from a report and can generate a JSON dump. To use it, create a Python script and import the necessary modules (argparse, json, os, and date). Define the function extract_new_mirnas_from_report with the input report_tsv and an optional argument type with a default value of new. This function reads the report file, checks if the candidate miRNA is a new family, skips families requiring review, and adds the new miRNAs to a dictionary. Define the function extract_rfam_family_accessions with the input report_file. This function reads the report file, checks if the overlap is less than or equal to 100.0, and adds the miRNA accessions to a dictionary. Define the function parse_arguments with no input. This function creates an ArgumentParser object and adds the necessary arguments. In the main block, parse the arguments using the ArgumentParser object and call the appropriate function based on the arguments. If the createdump argument is provided, generate a JSON dump with the appropriate filename.","completion":"import argparse import json import os from datetime import date # ------------------------------------------------------------------------------- def extract_new_mirnas_from_report(report_tsv, type='new'): \\"\\"\\" \\"\\"\\" new_mirnas = {} fp = open(report_tsv, 'r') count = 0 for line in fp: line = line.strip().split('t') # check if candidate mirna is a new family if line[6].lower() == \\"new family\\": # skip families requiring review if line[1] != '?' and line[1] != '' and line[2] != \\"1_SEED\\": if line[0] not in new_mirnas: print line new_mirnas[line[0]] = line[1] elif line[6].lower() == 'done': count += 1 fp.close() return new_mirnas # ------------------------------------------------------------------------------- def extract_rfam_family_accessions(report_file): fp = open(report_file, 'r') accession_map = {} for line in fp: line = line.strip().split('t') overlap = float(line[4]) if overlap <= 100.0: # converts to upper to ensure labels match the constant if line[6].strip().upper() == \\"UPDATE SEED\\": rfam_acc = line[3].strip() rfam_acc_list = [] if rfam_acc.find(',') == -1: rfam_acc_list = rfam_acc.split(',') else: rfam_acc_list = [rfam_acc] threshold = 0.0 if line[1] != '': threshold = float(line[1]) # trim any whitespace characters mirbase_id = line[0].strip() accession_map[mirbase_id] = {\\"rfam_acc\\": rfam_acc_list, \\"threshold\\": threshold, \\"overlap\\": float(line[4])} fp.close() return accession_map # ------------------------------------------------------------------------------- def parse_arguments(): \\"\\"\\" \\"\\"\\" parser = argparse.ArgumentParser() parser.add_argument(\\"--report\\", help=\\"miRNA report in .tsv format\\", action=\\"store\\") parser.add_argument(\\"--dest-dir\\", help=\\"Desctination directory\\", action=\\"store\\", default=os.getcwd()) parser.add_argument(\\"--old-rfam\\", help=\\"Fetches old Rfam miRNA accessions to be updated\\", action=\\"store_true\\", default=False) parser.add_argument(\\"--create-dump\\", help=\\"Generates a JSON (.json) dump in destination directory\\", action=\\"store_true\\", default=False) return parser # ------------------------------------------------------------------------------- if __name__ == '__main__': parser = parse_arguments() args = parser.parse_args() accessions = None if not args.old_rfam: new_mirnas = extract_new_mirnas_from_report(args.report, type='new') accessions = new_mirnas else: accessions = extract_rfam_family_accessions(args.report) if args.create_dump: filename = \\"new_mirnas_\\" if args.old_rfam: filename = \\"mirna_families_to_update_\\" fp_out = open(os.path.join(args.dest_dir, filename + str(date.today()) + \\".json\\"), 'w') json.dump(accessions, fp_out) fp_out.close()"},{"prompt":"Create a python function named 'square' that squares a given number. Not applicable","completion":"def square(x): return x * x"},{"prompt":"Create a function in Python that takes a string input and converts it to Pig Latin.","completion":"def to_pig_latin(sentence): result = \\"\\" words = sentence.split() for word in words: # Check if the word starts with a vowel if word[0] in \\"aeiou\\": result += word + \\"way \\" # If not, move the first letter to the end and add 'ay' else: result += word[1:] + word[0] + \\"ay \\" return result print(to_pig_latin(\\"This is a sentence\\"))"},{"prompt":"Design and implement a class in Python to simulate a 2D board game. This board game should involve dice rolling, tokens (pieces), and rules of the game. Not applicable","completion":"class BoardGame: def __init__(self, numPlayers): self.numPlayers = numPlayers self.dice = [] self.tokens = {} def rollDice(self): for i in range(self.numPlayers): self.dice[i] = random.randint(1, 6) def moveToken(self, numMoves): for i in range(self.numPlayers): self.tokens[i] += numMoves def checkForWin(self): # Implement rules of the game # check if a player has reached the end and return true # if a player has won, false otherwise pass"},{"prompt":"Create an algorithm in Python which checks if a given number is a prime number. Not applicable","completion":"def is_prime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True"},{"prompt":"Write a Python script for fetching the weather forecast from OpenWeatherMap API and print it to console","completion":"import requests # API URL url = \\"http://api.openweathermap.org/data/2.5/weather?\\" # API Key api_key = \\"Your_API_KEY\\" # City name city_name = \\"Dataak\\" # parameters params = { 'appid': api_key, 'q': city_name, 'units': 'metric' } # GET request response = requests.get(url, params=params) # Printing response data = response.json() # Parsing data temp = data['main']['temp'] wind_speed = data['wind']['speed'] # Printing output print('Temperature : {} degree celcius'.format(temp)) print('Wind Speed : {} m/s'.format(wind_speed))"},{"prompt":"Write a Python program to classify a given set of features as convex or nonconvex. [(1,0), (2,3), (3,1), (4,3)]","completion":"def classify_features(features): #number of edges edges = len(features) polygon_corners = 0 convex_count = 0 non_convex_count = 0 # iterate through the list to check if the polygon is convex or non-convex for i in range(edges): polygon_corners += 1 next_i = i+1 if next_i >= edges: next_i = 0 # use the vector cross product to calculate the angle between the two given points x1 = features[i][0] y1 = features[i][1] x2 = features[next_i][0] y2 = features[next_i][1] angle = (x2-x1)*(y2-y1) # if angle is positive, the polygon formed is considered convex if angle > 0: convex_count += 1 # else, the polygon is considered non-convex else: non_convex_count += 1 # check the results if convex_count == polygon_corners: return \\"convex\\" elif non_convex_count == polygon_corners: return \\"non-convex\\" # the polygon formed is neither convex nor non-convex else: return \\"neither convex nor non-convex\\" print(classify_features([(1,0), (2,3), (3,1), (4,3)])) # prints \\"non-convex\\""},{"prompt":"Create a Python program to compare two lists and return the common elements between them. [1, 2, 3, 4], [2, 3, 4, 5]","completion":"def compare_lists(list1, list2): common_elements = [] for element in list1: if element in list2: common_elements.append(element) return common_elements list1 = [1, 2, 3, 4] list2 = [2, 3, 4, 5] print(compare_lists(list1, list2))"},{"prompt":"Write a Python program to find the longest substring with only two distinct characters in a given string. String: abbaba","completion":"def substring_2chars(s): maxlen = 0 currlen = 0 prev_char = '' curr_char = '' for c in s: if c != prev_char and curr_char == '': curr_char = c currlen += 1 elif c != prev_char and c != curr_char: maxlen = max(maxlen, currlen) currlen = 1 prev_char = curr_char curr_char = c else: currlen += 1 prev_char = curr_char maxlen = max(maxlen, currlen) return maxlen"},{"prompt":"Create a Python class for a particle whose properties include mass, velocity and temperature.","completion":"class Particle(): def __init__(self, mass, velocity, temperature): self.mass = mass self.velocity = velocity self.temperature = temperature"},{"prompt":"Write a code to generate a random string of length 5 using Python.","completion":"import random def generate_rand_string(num_chars): \\"\\"\\"Generates a random string of a given length using ASCII characters\\"\\"\\" char_list = [] for i in range(num_chars): char_list.append(chr(random.randrange(32,127))) return \\"\\".join(char_list) if __name__ == \\"__main__\\": rand_str = generate_rand_string(5) print(rand_str)"},{"prompt":"Create a Python program to track and record the frequency of each word from a given list of words. ['Good', 'Outlook', 'Good', 'Luck', 'Bad', 'Outlook', 'Good']","completion":"words = ['Good', 'Outlook', 'Good', 'Luck', 'Bad', 'Outlook', 'Good'] freq = {} for word in words: if word in freq: freq[word] += 1 else: freq[word] = 1 print(freq)"},{"prompt":"Write a Python program to calculate the Root Mean Square Error (RMSE) error value for a given prediction. y_predicted = [1, 2, 3] y_actual = [2, 3, 4]","completion":"from sklearn.metrics import mean_squared_error def calculate_rmse(y_predicted, y_actual): error = mean_squared_error(y_predicted, y_actual) rmse = error**0.5 return rmse y_predicted = [1, 2, 3] y_actual = [2, 3, 4] rmse = calculate_rmse(y_predicted, y_actual) print(rmse) # Output: 1.0"},{"prompt":"Perform text classification using a Neural Network in Python. Data set of 5000 articles, each article containing a title and text.","completion":"# Imports import tensorflow as tf from tensorflow import keras import numpy as np # Load the data data = np.load('data.npz') titles = data['title'] texts = data['text'] # Labels labels = data['labels'] # Create the model model = keras.Sequential() model.add(keras.layers.Input(shape=(titles.shape[1],))) model.add(keras.layers.Embedding(256, 32)) model.add(keras.layers.GRU(64)) model.add(keras.layers.Dense(64, activation='relu')) model.add(keras.layers.Dense(labels.shape[1], activation='sigmoid')) # Compile the model model.compile(optimizer='adam', loss='binary_crossentropy') # Train the model model.fit(x=[titles, texts], y=labels)"},{"prompt":"Create a function in Python that takes an ID and returns a list of all the numbers in its range. ID = 5","completion":"def get_numbers(id): nums = [] for i in range(id + 1): nums.append(i) return nums numbers = get_numbers(5) print(numbers)"},{"prompt":"Find the largest palindrome made from the product of two 3digit numbers. Use the given code to define the functions L_comp, L_mutiple, and L_plaindrome. Then call the L_plaindrome function with an argument of 3 to get the result.","completion":"#!/usr/bin/python -Wall # -*- coding: utf-8 -*- \\"\\"\\" <div id=\\"content\\"> <div style=\\"text-align:center;\\" class=\\"print\\"><img src=\\"images/print_page_logo.png\\" alt=\\"projecteuler.net\\" style=\\"border:none;\\" /></div> <h2>Largest palindrome product</h2><div id=\\"problem_info\\" class=\\"info\\"><h3>Problem 4</h3><span>Published on Friday, 16th November 2001, 06:00 pm; Solved by 254694; Difficulty rating: 5%</span></div> <div class=\\"problem_content\\" role=\\"problem\\"> <p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 * 99.</p> <p>Find the largest palindrome made from the product of two 3-digit numbers.</p> </div><br /> <br /></div> \\"\\"\\" # 999 * 999 = 998001 # 998 comp 100 def L_comp(n, s): if (n == 2) : if (s[0] == s[3] and s[1] == s[2]) : return True else : return False elif (n == 3) : if (s[0] == s[5] and s[1] == s[4] and s[2] == s[3]) : return True else : return False def L_mutiple(n, max_num): max_range = max_num -1 min_range = max_num /2 for i in range(max_range, min_range, -1): for j in range(max_range, min_range, -1): ret = i * j s = \\"%d\\" % (ret) result = L_comp(n, s) if (result): return ret return -1 def L_plaindrome(n): if (n != 2 and n != 3): print \\"invalid input\\" return -1 max_num = 1 for i in range (0, n): max_num *= 10 return L_mutiple(n, max_num) print L_plaindrome(3)"},{"prompt":"Edit the following Python function by adding two functions that it does not currently contain. def printMenu(): print(1. Print the restaurant's name.) print(2. Print the restaurant's address.) print(3. Print the list of menu items.)","completion":"def printMenu(): print(\\"1. Print the restaurant's name.\\") print(\\"2. Print the restaurant's address.\\") print(\\"3. Print the list of menu items.\\") print(\\"4. Print the restaurant's reviews.\\") print(\\"5. Print the restaurant's ratings.\\") def printName(name): print(\\"The restaurant's name is \\" + name) def printAddress(street, city, state, zip_code): print(\\"The restaurant's address is \\" + street + \\", \\" + city + \\", \\" + state + \\" \\" + zip_code)"},{"prompt":"Build a classifier in Python using a scikitlearn that can predict a person's gender based on the data of the height, weight, and age.","completion":"import pandas as pd from sklearn import preprocessing from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier # Read the data data = pd.read_csv(\\"data.csv\\") # Encode gender as 0s and 1s gender_encoder = preprocessing.LabelEncoder() data[\\"Gender\\"] = gender_encoder.fit_transform(data[\\"Gender\\"]) # Split the data into features (X) and labels (y) X = data[[\\"Height\\", \\"Weight\\", \\"Age\\"]] y = data[\\"Gender\\"] # Split data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Create a random forest classifier clf = RandomForestClassifier() clf.fit(X_train, y_train) # Evaluate accuracy accuracy = clf.score(X_test, y_test) print(\\"Accuracy:\\", accuracy)"},{"prompt":"Create a Python program that takes a list of numbers and a target number as input, and returns all pairs of integers whose sum is equal to the target number [8, 3, 10, 5], 13","completion":"def two_sum(arr, target): result = [] for i in range(len(arr)): for j in range(i+1, len(arr)): if (arr[i] + arr[j] == target): result.append((arr[i], arr[j])) return result result = two_sum([8, 3, 10, 5], 13) print(result)"},{"prompt":"dentify the bug in this Python code. def average(nums): if not nums: return 0 else: total = 0 for n in nums: total += n return total/len(nums)","completion":"The bug in this code is that the indentation is incorrect in the else clause, resulting in the total variable not being declared before being used after the for loop. The correct code should be as follows: def average(nums): if not nums: return 0 else: total = 0 for n in nums: total += n return total/len(nums)"},{"prompt":"Generate a python list of all prime numbers between m and n. m = 10, n = 20","completion":"def prime_range(m, n): primes = [] for num in range(m, n+1): for i in range(2, num): if (num % i) == 0: break else: primes.append(num) return primes prime_range(10, 20) # [11, 13, 17, 19]"},{"prompt":"Write a Python script to classify a given article into one of the following categories: 'Politics', 'Technology', 'Social'. The company announced a range of new innovative technologies to help combat climate change.","completion":"from sklearn.naive_bayes import MultinomialNB from sklearn.feature_extraction.text import CountVectorizer article = \\"The company announced a range of new innovative technologies to help combat climate change.\\" text = [article] cv = CountVectorizer() X = cv.fit_transform(text) clf = MultinomialNB() clf.fit(X, ['Technology']) print(clf.predict(X))"},{"prompt":"Write a Python script to predict the expected values given some input data. Input data: X1 = [1, 2, 3, 4, 5] Y1 = [5, 7, 4, 8, 3] X2 = [1, 4, 9, 16, 25] Y2 = [6, 8, 10, 12, 15]","completion":"#Linear regression import numpy as np from sklearn.linear_model import LinearRegression x1 = np.array(X1).reshape(-1,1) y1 = np.array(Y1).reshape(-1,1) x2 = np.array(X2).reshape(-1,1) y2 = np.array(Y2).reshape(-1,1) model1 = LinearRegression().fit(x1,y1) model2 = LinearRegression().fit(x2,y2) predictions1 = model1.predict(x1) predictions2 = model2.predict(x2) print (\\"Predicted values: \\") print (predictions1) print (predictions2)"},{"prompt":"Reverse a given string using python. Hello World","completion":"def reverse_string(my_str): rev_str = \\"\\" for i in my_str: rev_str = i + rev_str return rev_str my_str = 'Hello World' reverse_string(my_str)"},{"prompt":"Python, generate a script to find the length of a given list. Input List: [1, 3, 5, 7, 9]","completion":"def lengthList(arr): length = 0 for i in arr: length += 1 return length print(lengthList([1, 3, 5, 7, 9])) # Outputs: 5"},{"prompt":"Generate a function in Python to sort a list of numbers from highest to lowest using a heap algorithm.","completion":"def heap_sort(nums): n = len(nums) for i in range(n // 2 - 1, -1, -1): heapify(nums, n, i) for i in range(n - 1, 0, -1): nums[i], nums[0] = nums[0], nums[i] heapify(nums, i, 0) return nums def heapify(nums, n, i): largest = i l = 2 * i + 1 r = 2 * i + 2 if l < n and nums[i] < nums[l]: largest = l if r < n and nums[largest] < nums[r]: largest = r if largest != i: nums[i], nums[largest] = nums[largest], nums[i] heapify(nums, n, largest)"},{"prompt":"Generate a linear regression model in Python that predicts the target variable (Y) based on two input variables (X1 and X2). Not applicable","completion":"import pandas as pd from sklearn.linear_model import LinearRegression # Load data data = pd.read_csv('data.csv') # Split to features and target X = data[['X1', 'X2']] Y = data['Y'] # Create the model model = LinearRegression() model.fit(X, Y) # Print the coefficients print('Intercept:', model.intercept_) print('Coefficients:', model.coef_)"},{"prompt":"Write a Python script to calculate the circumference of a circle when the radius of the circle is given. 4","completion":"def calc_circle_circumference(radius): circumference = 2 * 3.14 * radius return circumference circle_circumference = calc_circle_circumference(4) print(circle_circumference)"},{"prompt":"Write a Python program to get all the information associated with an IPv4 address. IPv4 address = 8.8.8.8","completion":"import socket ip = \\"8.8.8.8\\" address_info = socket.getaddrinfo(ip, None) for info in address_info: print(\\"IP version :\\", info[0]) print(\\"IP address as string:\\", info[4][0]) print(\\"IP address as tuple:\\", info[4]) print(\\"IP protocol:\\", info[6])"},{"prompt":"Design an algorithm in Python to check if an integer is a power of two. Number: 16","completion":"def isPowerOfTwo(n): if(n == 0): return False while(n != 1): if(n % 2 != 0): return False n = n // 2 return True # The following call will return True isPowerOfTwo(16)"},{"prompt":"Suggest a Python program to compute the sum of pairs of elements in a given array [2, 4, 5, 10]","completion":"def sum_pairs(input_list): output_list = [] for i in range(len(input_list)-1): sum = input_list[i] + input_list[i+1] output_list.append(sum) return output_list input_list = [2, 4, 5, 10] result = sum_pairs(input_list) print(result)"},{"prompt":"Create a python program to calculate the average of three numbers.","completion":"def average(a,b,c): return (a + b + c) / 3"},{"prompt":"Create a function in Python to normalize a vector. vector = [1, 5, 2, 8, 9, 4]","completion":"def normalize(vector): norm = np.linalg.norm(vector) normalized = [] for i in vector: normalized.append(i/norm) return normalized vector = [1, 5, 2, 8, 9, 4] normalized_vector = normalize(vector) print(normalized_vector) # [0.10938925979875006, 0.5469462984987499, 0.21877851959750005, 0.8750559279949998, 1.0000000000000002, 0.43693269989949995]"},{"prompt":"Write a Python program to generate a table of random numbers. The program should accept the number of rows and columns as user input and should generate a table of random numbers and display it. Number of Rows: 5 Number of Columns: 10","completion":"import random num_rows = 5 num_cols = 10 # Initialize the matrix matrix = [[0 for col in range(num_cols)] for row in range(num_rows)] # Generate random values for row in range(num_rows): for col in range(num_cols): matrix[row][col] = random.randint(0, 100) # Display the matrix for row in matrix: print(row)"},{"prompt":"Write a function in Python that takes a list as an argument and returns a new list with unique items. list = [1, 2, 3, 2, 4, 1]","completion":"def unique_items(input_list): # blank list to store elements output_list = [] # checking for the not repeated elements for i in input_list: if i not in output_list: output_list.append(i) return output_list # execute output_list = unique_items(list) print(\\"the list with unique item is \\", output_list)"},{"prompt":"Write a function in python using Numpy to perform linear interpolation on a given dataset. you only have the following given dataset x=[1,2,3] y=[2,4,6]","completion":"import numpy as np def linear_interpolation(x, y): '''Linear interpolation on given dataset.''' points = list(zip(x, y)) x_new, y_new = zip(*[(x_i, np.interp(x_i, x, y)) for x_i in np.arange(1,max(x))]) points_new = list(zip(x_new, y_new)) return points + points_new x=[1,2,3] y=[2,4,6] print(linear_interpolation(x, y))"},{"prompt":"Write a Python program to set up a Kubernetes cluster on a cloud provider. Not applicable","completion":"import os #Define cluster parameters provider = \\"AWS\\" num_nodes = 4 #Store credentials in environment variables os.environ[\\"CLUSTER_PROVIDER\\"] = provider os.environ[\\"NODE_COUNT\\"] = num_nodes #Create the cluster os.system(\\"k3sup init --provider {CLUSTER_PROVIDER} --nodes {NODE_COUNT}\\") #Set up the Kubernetes cluster os.system(\\"k3sup join --ip ami-.... --user ubuntu --context local --ssh-keypath ~/.ssh/id_rsa\\") #Verify the cluster is up and running os.system(\\"kubectl cluster-info\\")"},{"prompt":"Create a Python function that takes an array as input and returns a dictionary with each element as the key and its frequency as the value. [1, 1, 2, 3]","completion":"def getElementFrequency(arr): frequency = {} for item in arr: if item in frequency: frequency[item] += 1 else: frequency[item] = 1 return frequency print(getElementFrequency([1, 1, 2, 3]))"},{"prompt":"Create a Python program to calculate the number of times a word appears in a given sentence. sentence = Hello World word = Hello","completion":"count = sentence.count(word) print(count)"},{"prompt":"Create a machine learning model in Python to classify sensor readings as anomalous or not. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression data = pd.read_csv('sensor_data.csv') # Separate features and labels X = np.array(data.drop(['label'],1)) y = np.array(data['label']) # Split dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Create the model model = LogisticRegression() model.fit(X_train, y_train) accuracy = model.score(X_test, y_test) print('Model accuracy is:', accuracy) # Save the model import pickle pickle.dump(model, open('model.pkl','wb'))"},{"prompt":"Optimize a given Python code segment to run it faster. a = 10 b = 0 while a > 0: b += 1 a = 1","completion":"a = 10 b = 0 while a > 0: b += a a //= 2"},{"prompt":"Write an algorithm in Python that checks whether a given number is a prime number or not.","completion":"def isPrime(num): if num < 2: return False if num ==2: return True for i in range(2, num): if num % i == 0: return False return True"},{"prompt":"Create a program in Python 3 that prints out the numbers from 1 to 10 in order with a onesecond delay between each number. Not applicable","completion":"import time for i in range(1, 11): print(i) time.sleep(1) # delay for one second"},{"prompt":"Create a program to check if a given array has at least two elements in Python.","completion":"def has_two_elements(arr): return len(arr) >= 2"},{"prompt":"Create a function in Python 3 which takes two arguments and prints their sum. a = 5 b = 6","completion":"def add(a, b): print('Sum =', a + b) add(5, 6)"},{"prompt":"Write a Python program to query all 10,000 rows in the provided SQL table. Table Example with 10,000 row","completion":"import sqlite3 # connect to SQL database db = sqlite3.connect('example.db') # create cursor cur = db.cursor() # execute query cur.execute('SELECT * FROM \\"example\\"') # fetch all rows rows = cur.fetchall() # display all rows for row in rows: print row"},{"prompt":"Create a Python script that will take an array of numbers and generate the maximum possible combination using those numbers. [4, 2, 8, 12]","completion":"def generatemaxcombo(arr): max_combo = [] value = 1 for x in arr: value = value * x max_combo.append(value) return max_combo arr = [4, 2, 8, 12] max_combo = generatemaxcombo(arr) print(\\"The maximum combination of {} is: {}\\".format(arr, max_combo))"},{"prompt":"Write a recursive function in Python to calculate the Fibonacci sequence for an input value N.","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2)"},{"prompt":"Create a web scraper in Python to get the price of a given product from an ecommerce website.","completion":"import requests from bs4 import BeautifulSoup # Request page URL = 'https://example.com/product' page = requests.get(URL) # Parse page soup = BeautifulSoup(page.content, 'html.parser') # Extract the price price = soup.find(\\"span\\", class_=\\"price\\").get_text() print(\\"Price of the product is: \\",price)"},{"prompt":"Convert this python code to java code. i = 0 while i < 5: print(i) i+=1","completion":"int i = 0; while (i < 5) { System.out.println(i); i++; }"},{"prompt":"Write a Python program to generate a report of sales by product from a given database. An example database of orders is provided with several entries, each containing Id, date, product, quantity, and price.","completion":"import pandas as pd import sqlite3 conn = sqlite3.connect('example_db.db') df = pd.read_sql('SELECT * FROM orders', conn) sales_report = df.groupby('product')['quantity', 'price'].sum().reset_index() sales_report['total_sales'] = sales_report['quantity'] * sales_report['price'] print(sales_report) # Output: # product quantity price total_sales # 0 Product1 3 100 300 # 1 Product2 4 150 600"},{"prompt":"Generate a Python program that takes in two dates and prints the gap between them in number of days.","completion":"from datetime import datetime def days_gap(date1, date2): d1 = datetime.strptime(date1,\\"%m/%d/%Y\\") d2 = datetime.strptime(date2,\\"%m/%d/%Y\\") day_gap = abs((d2 - d1).days) return day_gap"},{"prompt":"Design an API in Python to return employee details from a given ID.","completion":"def get_employee(employee_id): conn = sqlite3.connect('database.db') cursor = conn.cursor() query = \\"SELECT * FROM employee WHERE id=?\\" result = cursor.execute(query, (employee_id,)) row = result.fetchone() if row: employee = { 'name': row[1], 'age': row[2], 'designation': row[3] } return employee else: return None"},{"prompt":"Create a Python class for a hospital patient.","completion":"class Patient: def __init__(self,name, age, medical_history): self.name = name self.age = age self.medical_history = medical_history def get_name(self): return self.name def get_age(self): return self.age def get_history(self): return self.medical_history"},{"prompt":"Generate a Python function to generate prime numbers in a given range of numbers.","completion":"def generate_primes(start, end): # A list to store prime numbers primes = [] # Iterate from start to end and # check if number is prime or not for num in range(start, end + 1): isPrime = True for i in range(2, num): if (num % i == 0): isPrime = False if isPrime: primes.append(num) return primes"},{"prompt":"Write a function in Python to generate a list of integers from 0 to 10,000, inclusive. Not applicable","completion":"def generate_list(): my_list = [] for i in range(0, 10001): my_list.append(i) return my_list"},{"prompt":"Write a python program to generate a new list of numbers based on existing list which increase sequence by 5 [10, 20, 30, 40]","completion":"def generate_numbers(list): new_list = [] for number in list: new_list.append(number + 5) return new_list"},{"prompt":"Code a program in Python to convert a text into its corresponding binary representation. Text: Hello World!","completion":"def bin_from_text(text): bin_text = \\"\\" for char in text: bin_text += bin(ord(char)).lstrip(\\"0b\\") + \\" \\" return bin_text"},{"prompt":"Use the given code to extract date information from sentences. The code includes helper functions to normalize annotations, split sentences, tag parts of speech, find key verbs, and extract date information using DBpedia. To use the code, call the main function with appropriate arguments.","completion":"from subprocess import * import re import treetaggerwrapper import sparqlQuerypy from bs4 import BeautifulSoup CONSTANTKEYVERBS=\\"die, died, death, born, birth, sworn in\\" #Set of words that if present in the sentence, then don't discard the sentence, we are interested. tagger = treetaggerwrapper.TreeTagger(TAGLANG = 'en', TAGDIR = '/home/vedu29/python/Gsoc/treetagger') def jarWrapper(*args): # The helper function to use the jar file. process = Popen(['java', '-jar']+list(args), stdout=PIPE, stderr=PIPE) ret=[] while process.poll() is None: line = process.stdout.readline() if line != '' and line.endswith('n'): ret.append(line[:-1]) stdout, stderr = process.communicate() ret += stdout.split('n') if stderr != '': ret += stderr.split('n') ret.remove('') return ret def returnProperty(word): #helper function to map the verb to a property. This will be small considering the number of date properties in DBpedia. if word in ['death', 'die']: return 'http://dbpedia.org/ontology/deathDate' if word in ['birth', 'born', 'bear']: return 'http://dbpedia.org/ontology/birthDate' def normalizeAnnotations(sentence): # helper function to remove the references annotation, that appear as square brackets at the end of the sentence. return re.sub(r'[[0-9]*]', ' ', sentence) def sentenceSplitter(sentence): # helper regular function to correctly find end of sentences. return re.split(r'(?<!w.w.)(?<![A-Z][a-z].)(?<=.|?)s', sentence) def normaliseResult(result): normRes=[] for sentence in result: sent=normalizeAnnotations(sentence) normRes += sentenceSplitter(sent) return normRes def findAndGenericAnnotateTime(sentence): #Replacing heidelTime tagged Timex tags to a generic 'TIME' so that treeTagger can work its magic without hiccups. return re.sub('<TIMEX3((?!<TIMEX3).)*</TIMEX3>', 'TIME', sentence) def treetag(sentence, encoding = None): # TreeTagger helper function. if encoding != None: return treetaggerwrapper.make_tags(tagger.tag_text(unicode(sentence, \\"utf-8\\"))) else: return treetaggerwrapper.make_tags(tagger.tag_text(sentence)) def returnKeyverbs(): #formats the key verbs above. return '|'.join(verb for verb in CONSTANTKEYVERBS.split(', ')) def findSubVerbsTime(tagsentence): # The main helper function that figures out the subject in the sentence and finds the correct core verbs marked by an '*' pos=[] pos2=[] seenSubject=False seenVerb=False lastfew=0 for i, tags in enumerate(tagsentence): if tags.pos=='NP' or tags.pos=='PP': pos += [tags.word] seenSubject=True lastfew+=1 if re.match(u'V..|V.', tags.pos) != None and seenSubject: if not seenVerb: subject = pos[-lastfew:] pos2 += [[subject]] if re.match(u'VB.', tags.pos) != None: pos2[-1] += [tags.word] else: pos2[-1] += [tags.word+'*'] seenVerb=True if re.match(u'V..|V.', tags.pos) == None and seenVerb: seenVerb=False seenSubject=False lastfew=0 return pos2 def lemmatizeMainVerb(item): for verb in item[1:]: if '*' in verb: return treetag(verb)[0].lemma def listTimes(sentence): # uses beautiful soup to get the date information. soup = BeautifulSoup(sentence, 'html.parser') return soup.find_all('timex3') def main(args): result = jarWrapper(*args) for sentence in normaliseResult(result): sent=findAndGenericAnnotateTime(sentence) m = re.match(r\\"(?P<first_part>.*) (?P<predicate>%s) (?P<second_part>.*)\\"%(returnKeyverbs()), sent) #scans the sentences for this pattern. if m!=None: left=treetag(m.group('first_part'), \\"utf-8\\") middle=treetag(m.group('predicate'), \\"utf-8\\") right=treetag(m.group('second_part'), \\"utf-8\\") tagsentence = left + middle + right if 'TIME' in m.group('first_part') or 'TIME' in m.group('second_part'): #Skip sentence if not date details. subVerbTime = findSubVerbsTime(tagsentence) for item in subVerbTime: subject=\\" \\".join(thing for thing in item[0]) if subject.lower() in ['he','she', 'it']: subject=previousSubject annotate = sparqlQuerypy.findAnnotation(subject) annotatedSubject = annotate[0]['s']['value'] previousSubject = subject #heuristic that subject of this pronoun is in deed the previous subject, (not well thought through!) verbLemma=lemmatizeMainVerb(item) if verbLemma != None: prop=returnProperty(verbLemma) timexList = listTimes(sentence) i=0 while timexList[i]['type']not in [\\"DATE\\",\\"TIME\\"]: i+=1 time= timexList[i]['value'] date= sparqlQuerypy.findDate(annotatedSubject, prop) if len(date) != 0: date= date[0]['z']['value'] print '- - - - - - - - - - - - - - - - n n' print sentence print ' ' print 'The subject is:', subject print 'The annotated subject is:', annotatedSubject print 'The property is:', prop print 'Date according to dbpedia:', date print 'Date mined from the text:', time print 'n n' if __name__=='__main__': args = ['de.unihd.dbs.heideltime.standalone.jar', 'input'] result = jarWrapper(*args) tagger = treetaggerwrapper.TreeTagger(TAGLANG = 'en', TAGDIR = '/home/vedu29/python/Gsoc/treetagger') main(args)"},{"prompt":"Design a Python script to access a REST API. \`https://example.com/api/v1/data\`","completion":"import requests url = 'https://example.com/api/v1/data' response = requests.get(url) data = response.json() # process the data here # ..."},{"prompt":"Create a program in Python that takes a website URL as input, scrapes all the links on the page, and prints out the URLs of the links on the page. Sample URL: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.example.com\\" resp = requests.get(url) soup = BeautifulSoup(resp.text, 'html.parser') links = soup.find_all('a', href=True) for link in links: print(link['href'])"},{"prompt":"Create a Python class to represent a book with a title, author and ISBN.","completion":"class Book: def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn"},{"prompt":"Create a python program to group similar items together in a list. list = [dog, cat, cat, fox, dog, elephant]","completion":"def group_similar_items(list): grouped_items = {} for item in list: if item in grouped_items: grouped_items[item] += 1 else: grouped_items[item] = 1 print(grouped_items) group_similar_items([\\"dog\\", \\"cat\\", \\"cat\\", \\"fox\\", \\"dog\\", \\"elephant\\"]) # Output: {'dog': 2, 'cat': 2, 'fox': 1, 'elephant': 1}"},{"prompt":"Write a Python program to predict whether a customer is likely to churn or not. [ {'id':1, 'age':25, 'gender':'Male', 'priority':'High'}, {'id':2, 'age':28, 'gender':'Male', 'priority':'Low'}, {'id':3, 'age':35, 'gender':'Female', 'priority':'High'}, {'id':4, 'age':18, 'gender':'Female', 'priority':'Low'}, {'id':5, 'age':45, 'gender':'Male', 'priority':'Low'}, {'id':6, 'age':27, 'gender':'Female', 'priority':'High'}, ]","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.tree import DecisionTreeClassifier # Load the data data = [ {'id':1, 'age':25, 'gender':'Male', 'priority':'High'}, {'id':2, 'age':28, 'gender':'Male', 'priority':'Low'}, {'id':3, 'age':35, 'gender':'Female', 'priority':'High'}, {'id':4, 'age':18, 'gender':'Female', 'priority':'Low'}, {'id':5, 'age':45, 'gender':'Male', 'priority':'Low'}, {'id':6, 'age':27, 'gender':'Female', 'priority':'High'}, ] # Convert data into a pandas DataFrame df = pd.DataFrame(data) # Create target variable df['churn'] = [0, 0, 0, 1, 1, 0] # Convert categorical variables to dummy variables df_dummy = pd.get_dummies(df, columns = ['gender', 'priority'], drop_first = True) # Split the data into train and test X = df_dummy.drop(['id', 'churn'], axis = 1) y = df_dummy['churn'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # Feature scaling sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test) # Create the model clf = DecisionTreeClassifier() clf.fit(X_train, y_train) # Make predictions y_pred = clf.predict(X_test) # Evaluate the model y_prob = clf.predict_proba(X_test)[:, 1] print(\\"Accuracy:\\", clf.score(X_test, y_test))"},{"prompt":"Create a function in Python to perform a linear search on a list of numbers. def linear_search(numbers, x)","completion":"def linear_search(numbers, x): \\"\\"\\"This function will perform a linear search on a list of numbers and return the index of the number if it is present in the list.\\"\\"\\" for i in range(len(numbers)): if numbers[i] == x: return i # if the number is not found return -1"},{"prompt":"Create a program in Python to classify emails as spam, ham or uncertain. email_list = ['Hi, this is an offer email', 'Welcome to our company', 'You will get discount']","completion":"def classify_email(email_list): spam_count = 0 ham_count = 0 uncertain_count = 0 for email in email_list: if 'offer' in email or 'discount' in email: spam_count += 1 elif 'welcome' in email or 'company' in email: ham_count += 1 else: uncertain_count += 1 return {'spam': spam_count, 'ham': ham_count, 'uncertain': uncertain_count}"},{"prompt":"Create an AWS Lambda function in Python to return an appropiate response to a given question. Question: What is the capital of France?","completion":"import json def lambda_handler(event, context): question = event[\\"queryStringParameters\\"][\\"question\\"] if question == \\"What is the capital of France?\\": response = { \\"statusCode\\": 200, \\"body\\": json.dumps({\\"answer\\": \\"Paris\\"}) } else: response = { \\"statusCode\\": 200, \\"body\\": json.dumps({\\"answer\\": \\"Sorry, I don't know the answer to that.\\"}) } return response"},{"prompt":"Edit the following Python program to compute the square root of a given number. def square_root(number): return number * number","completion":"def square_root(number): return number ** 0.5"},{"prompt":"Create a Python class for bank accounts to support the following operations: deposit, withdrawal, and transfer money. The class should also support methods for viewing account balance. Not applicable","completion":"class BankAccount: def __init__(self, name, balance): self.name = name self.balance = balance def deposit(self, amount): self.balance += amount def withdraw(self, amount): if self.balance < amount: raise ValueError('Insufficient funds') self.balance -= amount def view_balance(self): return self.balance def transfer_money(self, other_account, amount): self.withdraw(amount) other_account.deposit(amount)"},{"prompt":"Develop a machine learning model in Python to predict the survival rate of a passenger in the Titanic dataset. Not applicable","completion":"import pandas as pd import matplotlib.pyplot as plt from matplotlib import style from sklearn import preprocessing from sklearn.model_selection import cross_validate, train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score style.use(\\"seaborn-whitegrid\\") # Load the dataset df = pd.read_csv(\\"dataset.csv\\") # Preprocess the data le = preprocessing.LabelEncoder() df['Sex'] = le.fit_transform(df['Sex']) # Feature selection X = df[['Pclass','Sex','Age','SibSp','Parch','Fare']] y = df['Survived'] # Split into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) # Create the model model = LogisticRegression() model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print('Accuracy: ', accuracy)"},{"prompt":"Write a Python code to search for an input keyword in the given string and replace it with another keyword. str = Hello, world search_substring = world replace_substring = Earth","completion":"str = \\"Hello, world\\" search_substring = \\"world\\" replace_substring = \\"Earth\\" def replace_substring(str, search_substring, replace_substring): if search_substring in str: str = str.replace(search_substring, replace_substring) return str print(replace_substring(str, search_substring, replace_substring))"},{"prompt":"Create a Python function to calculate the sum of all numbers in a nested list. nested_list = [[1,2], [3,4], [6,7]]","completion":"def calculate_sum(nested_list): sum = 0 for item in nested_list: for num in item: sum += num return sum nested_list = [[1,2], [3,4], [6,7]] print(calculate_sum(nested_list))"},{"prompt":"Given a large text, write a Python script to find common phrases. In the morning, the sun rises in the east and sets in the west. In the evening, the stars come out and shine in the night sky. The moon rises in the east and sets in the west.","completion":"import re # input string string = \\"In the morning, the sun rises in the east and sets in the west. In the evening, the stars come out and shine in the night sky. The moon rises in the east and sets in the west.\\" words = string.split(\\" \\") # set that contains the frequnt phrases phrases = set() # loop over the words in the string for index, word in enumerate(words): # loop over the words ahead of the current word for ahead in range(index+1, min(index+4, len(words))): # check if the phrase exists in the string if \\" \\".join(words[index:ahead+1]) in string: # add the phrase to the set phrases.add(\\" \\".join(words[index:ahead+1])) # print the phrases print(phrases)"},{"prompt":"Create an algorithm in Python to generate random strings of a given length.","completion":"import random def generate_random_string(length): # Generate a random string of given length letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' return ''.join(random.choice(letters) for i in range(length))"},{"prompt":"Create a python program to implement random forest algorithm.","completion":"import numpy as np from sklearn.ensemble import RandomForestClassifier #data X = np.array([[1,2,3], [1,2,3], [4,5,6], [4,5,6]]) y = np.array([1,1,2,2]) #Create a Random Forest Classifier clf = RandomForestClassifier(max_depth=2, random_state=0) #Training the model clf.fit(X,y)"},{"prompt":"Create a REST API endpoint in Python that returns the user with the highest score.","completion":"@app.route(\\"/get_top_user\\", methods=[\\"GET\\"]) def get_top_user(): user_list = Users.query.order_by(desc(Users.score)).first() return jsonify(user_list.serialize())"},{"prompt":"Develop a Python program that takes in a singledimensional array as a parameter, and returns the number of subsets with size 3 or greater. arr = [1, 2, 3, 4, 5]","completion":"def find_subsets(arr): count = 0 for i in range(len(arr)): for j in range(i+1, len(arr)): for k in range(j+1, len(arr)): count += 1 return count"},{"prompt":"Create a class in Python that defines an item in an inventory system.","completion":"class Item: def __init__(self, name, description, price): self.name = name self.description = description self.price = price def print_info(self): print(\\"Name:\\", self.name) print(\\"Description:\\", self.description) print(\\"Price:\\", self.price)"},{"prompt":"Generate a program in Python to optimize a given set of linear equations.","completion":"def optimize_linear_equations(equations): num_variables = len(equations[0]) - 1 system_of_equations = [0] * (num_variables + 1) for equation in equations: for i, coefficient in enumerate(equation): system_of_equations[i] += coefficient solution = [0] * num_variables # solve the linear equations using Gaussian elimination for i in range(num_variables): divisor = system_of_equations[i][i] for j in range(i, num_variables + 1): system_of_equations[i][j] /= divisor for j in range(i + 1, num_variables): multiplier = system_of_equations[j][i] for k in range(i, num_variables + 1): system_of_equations[j][k] -= multiplier * system_of_equations[i][k] for i in range(num_variables - 1, -1, -1): solution[i] = system_of_equations[i][num_variables] for j in range(num_variables - 1, i, -1): solution[i] -= system_of_equations[i][j] * solution[j] return solution"},{"prompt":"Generate all the permutations of a string using Python. str = abc","completion":"def permutations(str): if len(str) <= 1: return [str] perms = [] for i in range(len(str)): rest_strings = str[:i] + str[i+1:] for perm in permutations(rest_strings): perms.append(str[i:i+1] + perm) return perms str = \\"abc\\" perms = permutations(str) print(perms) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']"},{"prompt":"Build a web service that performs sentiment analysis in Python. The web service should accept a sentence as input and return an integer value from 0 to 5 to indicate the sentiment of the given sentence. Sentence: This movie was terrible!","completion":"import flask import requests import json from textblob import TextBlob app = flask.Flask(__name__) @app.route('/sentiment', methods=['POST']) def sentiment_analysis(): data = flask.request.get_json() text = str(data['sentence']) # Retrieve sentiment score sentiment = TextBlob(text).sentiment.polarity # Map sentiment score to 0-5 scale sentiment_mapped = round(5 * sentiment) # Return the sentiment score return flask.jsonify({'sentiment': sentiment_mapped}) if __name__ == '__main__': app.run()"},{"prompt":"Construct a Python class that determines the area and circumference of a circle.","completion":"class Circle: def __init__(self, radius): self.radius = radius def area(self): return 3.14 * (self.radius ** 2) def circumference(self): return 2 * 3.14 * self.radius circle1 = Circle(7) print(\\"Area of circle1:\\", circle1.area()) print(\\"Circumference of circle1:\\", circle1.circumference())"},{"prompt":"Design an algorithm in Python to rearrange the elements in an array such that no two elements appear next to each other whose absolute difference is equal to 1. [1, 4, 5, 2, 9, 0]","completion":"def modifiedArrangement(arr): arr.sort() result = [] for i in range(len(arr)) : result.append((arr[i]+1) - 1) result.append(arr[i]) return result arr = [1, 4, 5, 2, 9, 0] # modified Arrangement result = modifiedArrangement(arr) # Print the result print(\\"Modified arrangement : \\" + str(result))"},{"prompt":"Create a program that can find the top five most common words in the input. Python is a powerful generalpurpose programming language.","completion":"import collections import re # clean and preprocess text words = re.sub('W+', ' ', input_text).split() # find most common words word_counter = collections.Counter(words) # print top five most common words print(word_counter.most_common(5)) # Output: [('a', 1), ('Python', 1), ('is', 1), ('powerful', 1), ('general', 1)]"},{"prompt":"Create a for loop in Python that prints the numbers 1 to 10.","completion":"for i in range(1, 11): print(i)"},{"prompt":"Given a list and an integer, write a Python function to return a sublist of the list with the given integer. [1, 2, 3, 4, 5, 6, 7], 2","completion":"def get_sublist(lst, n): return [lst[i:i+n] for i in range(0,len(lst),n)]"},{"prompt":"mplement a Python program that takes a positive integer as its input and returns its factorial. 3","completion":"def factorial(n): if n < 0: raise ValueError(\\"Input must be a positive integer\\") if n == 0: return 1 res = 1 for i in range(2,n+1): res *= i return res"},{"prompt":"Construct a code in Python to reverse a given list. [Apple, Banana, Cherry]","completion":"myList = [\\"Apple\\", \\"Banana\\", \\"Cherry\\"] def reverse(myList): myList.reverse() return myList print(reverse(myList)) # [\\"Cherry\\", \\"Banana\\", \\"Apple\\"]"},{"prompt":"Create a Python program for text summarization. The program should take in input text and output a shorter version of the original text that captures the main ideas. This course gives an overview of natural language processing and how it can be used to analyze text. It will introduce some of the most common techniques like partofspeech tagging, syntactic parsing, and named entity recognition. These techniques can be used to extract important information from text, classify documents, and generate summary documents.","completion":"import nltk from nltk.tokenize import sent_tokenize,word_tokenize initial_text = \\"This course gives an overview of natural language processing and how it can be used to analyze text. It will introduce some of the most common techniques like part-of-speech tagging, syntactic parsing, and named entity recognition. These techniques can be used to extract important information from text, classify documents, and generate summary documents.\\" words = nltk.word_tokenize(initial_text) sentences = nltk.sent_tokenize(initial_text) word_freq = {} for word in words: if (word in word_freq): word_freq[word] += 1 else: word_freq[word] = 1 most_frequent_words = sorted(word_freq, key=word_freq.get, reverse=True)[:5] summary = [] for sentence in sentences: if (any(word in sentence for word in most_frequent_words)): summary.append(sentence) summary = \\" \\".join(summary) print(summary) Printed output: This course gives an overview of natural language processing and how it can be used to analyze text. It will introduce some of the most common techniques like part-of-speech tagging, syntactic parsing, and named entity recognition. These techniques can be used to extract important information from text, classify documents, and generate summary documents."},{"prompt":"Create a python function to calculate the BMI of a person given the person's weight and height in 'Metric' unit. weight = 80 (kg) height = 180 (cm)","completion":"def calculateBMI(weight, height): # convert height from cm to m height = height/100 # calculate BMI BMI = weight / (height*height) return BMI if __name__ == '__main__': weight = 80 # in kg height = 180 # in cm BMI = calculateBMI(weight, height) print(f'The BMI of the person is {BMI}')"},{"prompt":"mprove the performance of the given Python program by using optimized algorithms. def compute_factorial(n): if n == 0: return 1 else: return n * compute_factorial(n1) print(compute_factorial(5))","completion":"def compute_factorial(n): if n == 0: return 1 else: return n * compute_factorial(n-1) def compute_factorial_optimized(n): result = 1 for i in range(2, n + 1): result *= i return result print(compute_factorial_optimized(5))"},{"prompt":"Create a Python class to represent a bank account.","completion":"class BankAccount: def __init__(self, owner, balance): self.owner = owner self.balance = balance def deposit (self, amount): self.balance += amount return self.balance def withdraw (self, amount): self.balance -= amount return self.balance"},{"prompt":"Create a Python script to generate random passwords. The script should take one parameter, an integer representing the length of the password, and should return a random string of the specified length. Length: 8","completion":"import string import random def generate_password(length): password = '' for i in range(length): password += random.choice(string.ascii_letters + string.digits) return password print(generate_password(8))"},{"prompt":"Create a Python class that simulates a bank account. The class should have methods for depositing and withdrawing money, and for displaying the account balance. Not applicable","completion":"class BankAccount: def __init__(self): self.balance = 0 def deposit(self, amount): self.balance += amount def withdraw(self, amount): self.balance -= amount def show_balance(self): print(\\"Your balance is %.2f\\" % self.balance)"},{"prompt":"Develop a Python program that prints out the nth Fibonacci number.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b print(fibonacci(n))"},{"prompt":"Generate a python function To calculate the greatest common divisor of two integers.","completion":"def gcd(a, b): if a == 0 : return b return gcd(b % a, a)"},{"prompt":"Create a Python script that will take a list of strings as input and output the unique words from the list. [This,is,a,list,of,strings,this,list,contains,duplicate,words]","completion":"#!/usr/bin/env python # Input list of strings input_strings = [\\"This\\",\\"is\\",\\"a\\",\\"list\\",\\"of\\",\\"strings\\",\\"this\\",\\"list\\",\\"contains\\",\\"duplicate\\",\\"words\\"] # Create empty list for unique words output_words = [] # Loop through each string for current_string in input_strings: # Split strings into separate words current_words = current_string.split(\\" \\") # Loop through each word for current_word in current_words: # If word is not already in the output list, add it if current_word not in output_words: output_words.append(current_word) # Print out list of unique words print(output_words)"},{"prompt":"Write a Python program to implement the Levenshtein Distance algorithm.","completion":"def levenshtein_distance(s1, s2): n = len(s1) m = len(s2) dp = [[0] * (m + 1) for _ in range(n + 1)] for i in range(1, n + 1): dp[i][0] = i for j in range(1, m + 1): dp[0][j] = j for i in range(1, n + 1): for j in range(1, m + 1): cost = 0 if s1[i - 1] == s2[j - 1] else 1 dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + cost) return dp[-1][-1]"},{"prompt":"Generate an optimized Python program that sorts a list of integers using bubble sort. [3, 5, 1, 4, 7]","completion":"def bubble_sort(nums): n = len(nums) for i in range(n): swaped = False for j in range(0, n-i-1): if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] swaped = True if swaped == False: break # Driver code nums = [3, 5, 1, 4, 7] bubble_sort(nums) print(nums)"},{"prompt":"Provide a Python program to generate the number of days in a given year.","completion":"def days_in_year(year): if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0): return 366 else: return 365"},{"prompt":"Write a Python script to simulate the behavior of a vending machine.","completion":"class VendingMachine: def __init__(self): self.items = [] self.balance = 0 def insert_coin(self, amount): self.balance += amount def add_item(self, item): self.items.append(item) def remove_item(self, item): self.items.remove(item) def purchase_item(self, item): if self.balance >= item.price: self.items.remove(item) self.balance -= item.price def return_change(self): change = self.balance self.balance = 0 return change"},{"prompt":"Create a Python program to maximize the value of an expression. The expression consists of 3 integers and should be maximized by adding, subtracting, multiplying and/or dividing the integers. [10, 5, 3]","completion":"def maxValue(nums): maxValue = -1 operators = ['+', '-', '*', '/'] for i in range(4): if operators[i] == '+': maxValue = max(maxValue, nums[0] + nums[1] + nums[2]) elif operators[i] == '-': maxValue = max(maxValue, nums[0] - nums[1] - nums[2]) elif operators[i] == '*': maxValue = max(maxValue, nums[0] * nums[1] * nums[2]) else: maxValue = max(maxValue, nums[0] / nums[1] / nums[2]) return maxValue print(maxValue([10, 5, 3])) #Output: 15.0"},{"prompt":"Create a payment processing system written in Python using the Stripe API. Not applicable","completion":"import stripe def make_payment(token, amount): stripe.api_key = \\"sk_test_xxx\\" charge = stripe.Charge.create( amount=amount, currency=\\"usd\\", source=token, description=\\"example charge\\" ) return charge token = \\"tok_xxx\\" amount = 500 charge = make_payment(token, amount) print(charge)"},{"prompt":"Write a Python program that will count the words in a sentence or piece of text. Hello World. This is a sentence.","completion":"sentence = \\"Hello World. This is a sentence.\\" words = sentence.split() word_count = len(words) print(f\\"The sentence has {word_count} words.\\")"},{"prompt":"Generate a program in Python which implements a linked list","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def printList(self): temp = self.head while (temp): print (temp.data) temp = temp.next def insertAtBeginning(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node def insertAtEnd(self, new_data): if self.head is None: self.head = Node(new_data) return last = self.head while(last.next): last = last.next last.next = Node(new_data) def insertAfter(self, prev_node, new_data): if prev_node is None: print(\\"Previous node should be in the linked list.\\") return new_node = Node(new_data) new_node.next = prev_node.next prev_node.next = new_node def deleteNode(self, data): temp = self.head if (temp == None): return if (temp.data == data): self.head = temp.next temp = None return while (temp != None): if temp.data == data: break prev = temp temp = temp.next if (temp == None): return prev.next = temp.next temp = None llist = LinkedList() llist.insertAtBeginning(2) llist.insertAtEnd(3) llist.insertAtBeginning(1) llist.insertAfter(llist.head.next, 4) llist.printList() llist.deleteNode(2) print(\\"Updated list:\\") llist.printList()"},{"prompt":"Create a Python function that takes in two numbers and returns the greater one.","completion":"def get_greater_number(x, y): if x > y: return x else: return y x = 7 y = 10 greater_number = get_greater_number(x, y) print(greater_number) # 10"},{"prompt":"Create a Python program to edit a given string and insert a given word into the middle of the string. String = 'I am a programmer'; Word = 'software'","completion":"def insert_word(string, word): mid_index = len(string)//2 start_string = string[:mid_index] end_string = string[mid_index:] new_string = start_string+word+end_string return new_string string = 'I am a programmer' word = 'software' print(insert_word(string, word))"},{"prompt":"Develop a Python program to determine the average length of words in a sentence. This is a sample sentence with 8 words.","completion":"def average_length(sentence): words = sentence.split() char_count = 0 for word in words: char_count += len(word) average_length = char_count / len(words) return average_length average_length(\\"This is a sample sentence with 8 words.\\") # output: 3.5"},{"prompt":"Create a program to compute the average price for each type of goods in a Python dictonary. goods = { 'apple':{'price': 3.99, 'quantity':3}, 'banana':{'price': 4.50, 'quantity':2}, 'pear':{'price': 6.00, 'quantity':5}, }","completion":"def compute_average_price(goods): result = {k: v['price'] * v['quantity'] / v['quantity'] for k, v in goods.items()} return result goods = { 'apple':{'price': 3.99, 'quantity':3}, 'banana':{'price': 4.50, 'quantity':2}, 'pear':{'price': 6.00, 'quantity':5}, } average_price = compute_average_price(goods) print(\\"Result:\\",average_price)"},{"prompt":"Write a Python program to analyze the text of a document and to identify the text's sentiment. Not applicable","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer # create an instance of the sentiment analyzer sid = SentimentIntensityAnalyzer() # analysis function def sentiment_analysis(doc): # tokenize the document doc_tokens = nltk.word_tokenize(doc) # generate sentiment analysis scores scores = sid.polarity_scores(doc) # get the sentiment sentiment = scores['compound'] if sentiment >= 0.05: sentiment = 'positive' elif sentiment <= -0.05: sentiment = 'negative' else: sentiment = 'neutral' # print the sentiment print(\\"The document is {}\\".format(sentiment)) text = \\"This is a positive sentiment statement\\" sentiment_analysis(text)"},{"prompt":"w would you modify a program to generate random numbers without replication in Python?","completion":"import random def generate_random_numbers(length): numbers = [] while len(numbers) < length: num = random.randint(0, length) if num not in numbers: numbers.append(num) return numbers random_numbers = generate_random_numbers(10)"},{"prompt":"Create a script in any language to pass two arrays of different lengths and return a new array that is a combination of the two. array1 = [1, 2, 3, 4], array2 = [5, 6]","completion":"# Python def combine_arrays(arr1, arr2): combined_arr = [x for x in arr1] for i in arr2: combined_arr.append(i) return combined_arr # JavaScript function combineArrays(arr1, arr2) { let combinedArr = [...arr1]; for (let i of arr2) { combinedArr.push(i); } return combinedArr; }"},{"prompt":"Write a Python program to find the greatest common divisor of two numbers. a = 24 b = 60","completion":"def gcd(a, b): # base case if a == 0 : return b return gcd(b % a, a) a = 24 b = 60 print (\\"GCD of\\", a , \\"and\\", b ,\\"is\\", gcd(a, b)) # GCD of 24 and 60 is 12"},{"prompt":"Create a Python program to classify text into positive and negative sentiment. Not applicable","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer text = 'That movie was so great' # Create a SentimentIntensityAnalyzer object. sid_obj = SentimentIntensityAnalyzer() # polarity_scores method of SentimentIntensityAnalyzer # oject gives a sentiment dictionary. # which contains pos, neg, neu, and compound scores. sentiment_dict = sid_obj.polarity_scores(text) print(sentiment_dict) if sentiment_dict['compound'] >= 0.05 : print(\\"Positive\\") elif sentiment_dict['compound'] <= - 0.05 : print(\\"Negative\\") else : print(\\"Neutral\\")"},{"prompt":"Optimize a given piece of Python code so that it runs faster without compromising on the integrity of the output. def get_elements(numbers_list): result = [] for x in range(len(numbers_list)): if x % 2 == 0: result.append(numbers_list[x]) return resul","completion":"def get_elements(numbers_list): result = [] for x in range(0, len(numbers_list), 2): result.append(numbers_list[x]) return result"},{"prompt":"Create an automated speech recognition algorithm on Python.","completion":"import speech_recognition as sr # create an instance of the speech recognition engine r = sr.Recognizer() # obtain an audio source with sr.Microphone() as source: # capture input audio audio = r.listen(source) # recognize the speech input try: text = r.recognize_google(audio) print(text) except Exception as e: print(e)"},{"prompt":"Create a function in Python that multiplies two numbers without using the ‘*’ operator. x = 4 y = 5","completion":"def multiply_without_operator(x, y): # Handle cases when either of the numbers is 0 if x == 0 or y == 0: return 0 # Initialize a result variable to 0 res = 0 # Loop through y number of times and add x to res for i in range(abs(y)): res += abs(x) # Handle negative inputs if x < 0 and y < 0: return res elif x < 0 or y < 0: return -res # Case when both inputs are positive else: return res"},{"prompt":"Write a Python script to scrape a website and store the results in a MySQL database. The website to scrape is www.example.com","completion":"import mysql.connector import requests from bs4 import BeautifulSoup # Connect to MySQL database mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"root\\", passwd=\\"\\", database=\\"scrape\\" ) mycursor = mydb.cursor() # Get the website content r = requests.get('https://www.example.com') # Parse the website content soup = BeautifulSoup(r.text, 'html.parser') # Scrape the data for tag in soup.find_all('p'): data = tag.get_text() # Insert the data to the database mycursor.execute('INSERT INTO data VALUES (%s)', (data,)) mydb.commit()"},{"prompt":"Create a Python program that wraps a function with a given input sequence and prints out the output of the function. def my_function(x): return x * x sequence = [1, 2, 3, 4, 5]","completion":"def wrapped(f, seq): for x in seq: print(f(x)) def my_function(x): return x * x sequence = [1, 2, 3, 4, 5] wrapped(my_function, sequence) # Output: 1 4 9 16 25"},{"prompt":"Create a Python function to generated permutations of a given list of numbers. [1, 2, 3]","completion":"def permutations(arr): if len(arr) == 0: return [] if len(arr) == 1: return [arr] l = [] for i in range(len(arr)): m = arr[i] remL = arr[:i] + arr[i+1:] for p in permutations(remL): l.append([m] + p) return l permutations([1, 2, 3])"},{"prompt":"Generate a function in Python to filter a given list and keep only the numeric items in the list. input_list = [4, 2, 1, 15.6, 'p', 'y', 5.8]","completion":"def filter_numeric(input_list): num_list = [] for item in input_list: if type(item) == int or type(item) == float: num_list.append(item) return num_list input_list = [4, 2, 1, 15.6, 'p', 'y', 5.8] print(filter_numeric(input_list)) #Output: [4, 2, 1, 15.6, 5.8]"},{"prompt":"Write a Python program to print the tree structure of a given list of numbers. The numbers form a tree structure, with each number representing a node. Each node is connected to its previous and next number with an arrow. [1, 2, 5, 3, 4]","completion":"1 2 5 3 4 def print_tree(numbers): node_space = max([len(str(num)) for num in numbers]) + 2 for i, num in enumerate(numbers): if i == 0: left_space = 0 else: left_space = (2 * (len(numbers[:i]) - 1) + 1) * node_space + 1 right_space = (2 * (len(numbers[i+1:]) - 1) + 1) * node_space - 1 print(' ' * left_space + '↓' + str(num) + '→' + ' ' * right_space)"},{"prompt":"Propose a solution to fetch an online catalog of products and display them in a tabular format using Python. Catalog consisting of 1000 produc","completion":"import requests import pandas as pd # Set the request URL url = \\"http://example.com/products\\" # Send the request and retrieve the data data = requests.get(url).json() # Convert the data into a pandas DataFrame df = pd.DataFrame(data) # Print the resulting table print(df)"},{"prompt":"Write a Python function to convert an array of strings to a dictionary. [John, James, Bubby, Mary]","completion":"def string_to_dict(strings): return {string: len(string) for string in strings}"},{"prompt":"Create a web scraper in Python using BeautifulSoup. The web scraper should take a website URL as input and parse the data from the HTML page to extract text. Website URL: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') text = soup.find_all(text=True) for t in text: if (t.parent.name not in ['style', 'script', 'head', 'title', 'meta', '[document]']): print(t)"},{"prompt":"Create a stack data structure in Python.","completion":"class Stack: def __init__(self): self.stack = [] # Add to the top of stack def push(self, data): self.stack.append(data) # Remove from the top of stack def pop(self): if self.stack: return self.stack.pop() # Peek top element def peek(self): return self.stack[-1] # Check if stack is empty def is_empty(self): return not bool(self.stack)"},{"prompt":"Create a program in Python to calculate the sum of the digits in a number using recursion. number = 1234","completion":"def sum_of_digits(number): if len(str(number)) == 1: return number else: return number % 10 + sum_of_digits(number // 10) # example sum_of_digits(1234) # returns 10"},{"prompt":"Generate a function in Python that takes in an array and returns an array of the same length with each element multiplied by 2. [1, 2, 3, 4, 5]","completion":"def double_array(arr): return [element * 2 for element in arr]"},{"prompt":"Develop a function in Python that takes a list of integers, computes the cumulative sum, and prints the result. [1, 2, 3, 4, 5]","completion":"def cumulative_sum(lst): sum = 0 for i in lst: sum += i print(sum) cumulative_sum([1, 2, 3, 4, 5])"},{"prompt":"To import initial candidate data, run the \`handle\` function in the \`Command\` class. This function reads CSV files containing candidate data for specific elections and creates \`PopItPerson\` objects for each candidate. The CSV files should be located in the \`data\` directory and have the following format: \`listedescandidatsauxelectionslegislativeslisteprovincialeanptic.csv\` for the \`prv2015\` election \`listedescandidatsauxelectionslegislativesanptic.csv\` for the \`nat2015\` election The function uses the \`get_post_data\` function to get the post data for each candidate and the \`get_existing_popit_person\` function to check if a person with the given ID already exists in the PopIt database. If the person does not exist, a new \`PopItPerson\` object is created and saved to the database using the \`save_to_popit\` method. The function also uses the \`get_party_data\` function to get the party data for each candidate and the \`create_popit_api_object\` function to create an API object for interacting with the PopIt API. If any party names in the CSV files do not match the party names in the \`PARTY_DATA\` dictionary, the function will print a list of unmatched party names at the end.","completion":"# -*- coding: utf-8 -*- import dateutil.parser import csv from os.path import dirname, join import re import string import codecs import requests from django.core.management.base import BaseCommand from candidates.utils import strip_accents from candidates.views.version_data import get_change_metadata from elections.models import Election UNKNOWN_PARTY_ID = 'unknown' USER_AGENT = ( 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 ' '(KHTML, like Gecko) Ubuntu Chromium/38.0.2125.111 ' 'Chrome/38.0.2125.111Safari/537.36' ) def get_post_data(api, election_id, province): from candidates.cache import get_post_cached from candidates.election_specific import AREA_DATA, AREA_POST_DATA ynr_election_data = Election.objects.get_by_slug(election_id) area_key = (ynr_election_data.area_types.first().name, ynr_election_data.area_generation) areas_by_name = AREA_DATA.areas_by_name[area_key] if province != 'Burkina Faso': province = strip_accents(province).upper() area = areas_by_name[province] post_id = AREA_POST_DATA.get_post_id( election_id, area['type'], area['id'] ) post_data = get_post_cached(api, post_id)['result'] return ynr_election_data, post_data def get_existing_popit_person(vi_person_id): from candidates.models import PopItPerson from candidates.popit import get_search_url # See if this person already exists by searching for the # ID they were imported with: query_format = 'identifiers.identifier:\\"{id}\\" AND ' + 'identifiers.scheme:\\"{scheme}\\"' search_url = get_search_url( 'persons', query_format.format( id=vi_person_id, scheme='import-id' ), embed='membership.organization' ) results = requests.get(search_url).json() total = results['total'] if total > 1: message = \\"Multiple matches for CI ID {0}\\" raise Exception(message.format(vi_person_id)) if total == 0: return None # Otherwise there was exactly one result: return PopItPerson.create_from_dict(results['result'][0]) def get_party_data(party_name): from candidates.popit import get_search_url # See if this person already exists by searching for the # ID they were imported with: party_name = party_name.replace('/', '') party_name = party_name.decode('utf-8') query_format = 'name:\\"{name}\\"' search_url = get_search_url( 'organizations', query_format.format( name=party_name ) ) print party_name results = requests.get(search_url).json() print results total = results['total'] if total > 1: message = \\"Multiple matches for party {0}\\" raise Exception(message.format(party_name)) if total == 0: return None # Otherwise there was exactly one result: return results['result'][0] \\"\\"\\" These functions taken from the csv docs - https://docs.python.org/2/library/csv.html#examples\\"\\"\\" def unicode_csv_reader(unicode_csv_data, dialect=csv.excel, **kwargs): # csv.py doesn't do Unicode; encode temporarily as UTF-8: csv_reader = csv.reader(utf_8_encoder(unicode_csv_data), dialect=dialect, **kwargs) for row in csv_reader: # decode UTF-8 back to Unicode, cell by cell: yield [unicode(cell, 'utf-8') for cell in row] def utf_8_encoder(unicode_csv_data): for line in unicode_csv_data: yield line.encode('utf-8') class Command(BaseCommand): help = \\"Import inital candidate data\\" def handle(self, username=None, **options): from slumber.exceptions import HttpClientError from candidates.election_specific import PARTY_DATA, shorten_post_label from candidates.models import PopItPerson from candidates.popit import create_popit_api_object election_data = { 'prv-2015': 'listedescandidatsauxelectionslegislativeslisteprovincialeanptic.csv', 'nat-2015': 'listedescandidatsauxelectionslegislativesanptic.csv' } field_map = { 'prv-2015': { 'region': 1, 'party': 4, 'list_order': 5, 'first_name': 7, 'last_name': 6, 'gender': 8, 'birth_date': 9, 'party_short': 3 }, 'nat-2015': { 'region': 0, 'party': 2, 'list_order': 3, 'first_name': 5, 'last_name': 4, 'gender': 6, 'birth_date': 7, 'party_short': 2 } } api = create_popit_api_object() party_id_missing = {} party_name_to_id = {} for party_id, party_name in PARTY_DATA.party_id_to_name.items(): party_name_to_id[party_name] = party_id for election_id, filename in election_data.items(): csv_filename = join( dirname(__file__), '..', '..', 'data', filename ) fields = field_map[election_id] with codecs.open(csv_filename, 'r', encoding='windows-1252') as f: initial = True for candidate in unicode_csv_reader(f): # skip header line if initial: initial = False continue region = candidate[fields['region']] party = candidate[fields['party']] party_list_order = candidate[fields['list_order']] first_name = string.capwords(candidate[fields['first_name']]) last_name = string.capwords(candidate[fields['last_name']]) gender = candidate[fields['gender']] birth_date = None if candidate[fields['birth_date']] is not None: birth_date = str(dateutil.parser.parse( candidate[fields['birth_date']], dayfirst=True ).date()) name = first_name + ' ' + last_name id = '-'.join([ re.sub('[^w]*', '', re.sub(r' ', '-', strip_accents(name.lower()))), re.sub('[^w]*', '', candidate[fields['party_short']].lower()), birth_date ]) # national candidate if region == 'PAYS': region = 'Burkina Faso' election_data, post_data = get_post_data( api, election_id, region ) # debug # tmp = '%s %s %s (%s) - %s (%s)' % ( id, first_name, last_name, party, region, post_data['label'] ) # print tmp person = get_existing_popit_person(id) if person: # print \\"Found an existing person:\\", person.get_absolute_url() pass else: print \\"No existing person, creating a new one:\\", name person = PopItPerson() person.set_identifier('import-id', id) person.family_name = last_name person.given_name = first_name person.name = name person.gender = gender if birth_date: person.birth_date = str(birth_date) else: person.birth_date = None standing_in_election = { 'post_id': post_data['id'], 'name': shorten_post_label(post_data['label']), 'party_list_position': party_list_order, } if 'area' in post_data: standing_in_election['mapit_url'] = post_data['area']['identifier'] person.standing_in = { election_data.slug: standing_in_election } change_metadata = get_change_metadata( None, 'Imported candidate from CSV', ) party_comp = re.sub(' +', ' ', party) party_id = UNKNOWN_PARTY_ID if party_comp in party_name_to_id.keys(): party_id = party_name_to_id[party_comp] party = party_comp else: party_id = party_name_to_id['Unknown Party'] party = 'Unknown Party' if party_id == UNKNOWN_PARTY_ID and party_comp not in party_id_missing.keys(): party_id_missing[party_comp] = 1 person.party_memberships = { election_data.slug: { 'id': party_id, 'name': party, 'imported_name': party_comp } } person.record_version(change_metadata) try: person.save_to_popit(api) except HttpClientError as hce: print \\"Got an HttpClientError:\\", hce.content raise if len(party_id_missing) > 0: print \\"Unmatched party names:\\" for name in party_id_missing.keys(): print name"},{"prompt":"Develop a python script for converting an infix expression to postfix notation.","completion":"def infix_to_postfix(infix_expr): prec = {} prec[\\"*\\"] = 3 prec[\\"/\\"] = 3 prec[\\"+\\"] = 2 prec[\\"-\\"] = 2 prec[\\"(\\"] = 1 opStack = [] postfixList = [] tokenList = infix_expr.split() for token in tokenList: if token in \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" or token in \\"0123456789\\": postfixList.append(token) elif token == '(': opStack.append(token) elif token == ')': topToken = opStack.pop() while topToken != '(': postfixList.append(topToken) topToken = opStack.pop() else: while (len(opStack) != 0) and (prec[opStack[-1]] >= prec[token]): postfixList.append(opStack.pop()) opStack.append(token) while len(opStack) != 0: postfixList.append(opStack.pop()) return \\" \\".join(postfixList)"},{"prompt":"Design a function in Python to calculate the average of two numbers.","completion":"def mean(a, b): return (a + b)/2"},{"prompt":"Convert a given Python function to a JavaScript function. def factorial(n): if n == 1: return 1 else: return n * factorial(n1)","completion":"function factorial(n) { if (n == 1) { return 1; } else { return n * factorial(n-1); } }"},{"prompt":"Write a Python code snippet to calculate the sum of the first 100 prime numbers.","completion":"def is_prime(num): for i in range(2, num): if num % i == 0: return False return True prime_sum = 0 count = 0 num = 2 while count < 100: if is_prime(num): prime_sum += num count += 1 num += 1 print(prime_sum)"},{"prompt":"Optimize a given Python program that searches for all prime numbers from 2 to n. def find_all_primes(n): primes = [] for i in range(2,n+1): is_prime = True for j in range(2,i): if i % j == 0: is_prime = False break if is_prime: primes.append(i) return prime","completion":"def find_all_primes(n): primes = [] for i in range(2,n+1): if all(i % j != 0 for j in range(2, i)): primes.append(i) return primes //Time Complexity: // Worst Case: O(n2), // Best Case: O(nlog n), // Average Case: O(nlog n)."},{"prompt":"Write a Python snippet to print the difference between the largest and smallest values in a given array. [1,2,3,4,5]","completion":"def diff_max_min(numbers): return max(numbers) - min(numbers) if __name__ == '__main__': nums = [1,2,3,4,5] diff = diff_max_min(nums) print(diff)"},{"prompt":"Write a Python program to generate a random password of length 10, consisting of letters, numbers, and special characters. Not applicable","completion":"import string, random def gen_password(): chars = string.ascii_letters + string.digits + '!@#%^&*' return ''.join(random.choice(chars) for _ in range(10)) print(\\"Random Password :\\",gen_password()) \`\`"},{"prompt":"Generate a sequence of instructions to debug a Python Program.","completion":"1. Check your syntax − Check if there is any syntax error in your program. 2. Check for runtime errors − Check if the program can be compiled without errors. 3. Check the logic − Check if your program follows the intended logic and produces desired output. 4. Add logging and debugging statements − Use print statements or logging functions for trace debugging and test the program execution. 5. Use a debugger − A debugger allows you to step through the execution of a program and inspect the values of variables at each step."},{"prompt":"Write a Python function that takes in a set of numbers and returns their median","completion":"def median(nums): nums.sort() length = len(nums) is_even = length % 2 == 0 if is_even: mid = length // 2 return (nums[mid] + nums[mid-1]) / 2 else: return nums[length//2]"},{"prompt":"Find and remove the unnecessary code in the following Python code snippet. def get_data(url): data = [] # create an empty list response = requests.get(url) if response.status_code == 200: for item in response.json(): data.append(item)# add to the l","completion":"def get_data(url): data = [] response = requests.get(url) if response.status_code == 200: data = response.json()"},{"prompt":"Write a Python algorithm to generate the combinations of n distinct objects taken from an array. arr = [1, 2, 3], n = 2","completion":"import itertools arr = [1, 2, 3] n = 2 result = list(itertools.combinations(arr, n)) print(result)"},{"prompt":"Build a Python program which creates a directory, switches to it and creates two child directories within it.","completion":"import os # Create the root directory os.mkdir(\\"root\\") # Switch to the root directory os.chdir(\\"root\\") # Create two child directories os.mkdir(\\"child_dir_1\\") os.mkdir(\\"child_dir_2\\")"},{"prompt":"Write a Python function for converting an array of strings into a list of integers Array of strings: [1, 2, 3, 4]","completion":"def convert_strings_to_int(arr): return list(map(int, arr)) list_of_integers = convert_strings_to_int([\\"1\\", \\"2\\", \\"3\\", \\"4\\"]) # [1, 2, 3, 4]"},{"prompt":"Create an algorithm in Python to implement insertion sort.","completion":"def insertionSort(array): for i in range(1, len(array)): key = array[i] j = i-1 while j >=0 and key < array[j] : array[j+1] = array[j] j -= 1 array[j+1] = key array = [12, 11, 13, 5, 6] insertionSort(array) print(array)"},{"prompt":"Generate a class in Python to represent a bank account, which contains a function for depositing funds and a function for withdrawing funds.","completion":"class BankAccount(): def __init__(self, starting_balance=0): self.balance = starting_balance def deposit(self, amount): self.balance += amount return self.balance def withdraw(self, amount): if amount > self.balance: raise ValueError('Insufficient funds') self.balance -= amount return self.balance my_account = BankAccount(1000) print('Account balance: ', my_account.balance) my_account.deposit(500) my_account.withdraw(250) print('Account balance: ', my_account.balance)"},{"prompt":"Write a Python program to find the sum of the three given numbers where the three numbers are given as input. 4 5 6","completion":"# Function to calculate the sum # of three numbers def SumOfThree (x, y, z): sum = x + y + z return sum # Print the sum print(\\"Sum of 3 numbers is: \\", SumOfThree(4, 5, 6))"},{"prompt":"Design a data structure in python to store customer details with fast insert and search operations.","completion":"class CustomerData: def __init__(self): self.customers = {} def insert(self, name, customer_details): self.customers[name] = customer_details def search(self, name): return self.customers.get(name)"},{"prompt":"Write a function in Python to generate a random number between two given numbers.","completion":"import random def random_between_nums(num1, num2): return random.randint(num1, num2)"},{"prompt":"Write a Python script to display a digital clock in the terminal.","completion":"import time def display_digital_clock(): \\"\\"\\" function to display a digital clock in terminal \\"\\"\\" while True: current_time = time.strftime(\\"%H:%M:%S\\", time.localtime()) print(current_time, end='r') time.sleep(1) display_digital_clock()"},{"prompt":"Create an objectoriented Python program for a bank account with a balance, owner name, and methods for withdrawing, depositing and showing balance. Not applicable","completion":"class BankAccount: def __init__(self, owner, balance=0.0): self.owner = owner self.balance = balance def deposit(self, amount): self.balance += amount return self.balance def withdraw(self, amount): if amount > self.balance: return 'Insufficient funds' self.balance -= amount return self.balance def show_balance(self): print(f'Your balance is {self.balance}') account = BankAccount('John Doe', 100.0) account.show_balance() # Your balance is 100.0 account.deposit(50.0) # 150.0 account.withdraw(75.0) # 75.0"},{"prompt":"Create a text editor in Python.","completion":"import tkinter as tk root = tk.Tk() text_editor = tk.Text(root) # create and add scrollbar scrollbar = tk.Scrollbar(root) scrollbar.pack(side=tk.RIGHT, fill=tk.Y) text_editor.config(yscrollcommand=scrollbar.set) scrollbar.config(command=text_editor.yview) # add functions to widgets text_editor.pack(fill=tk.BOTH, expand=True) # create a menu and add commands menu_bar = tk.Menu(root) # add menu bars root.config(menu=menu_bar) def quit(): root.destroy() # set menu bar items file_menu= tk.Menu(menu_bar, tearoff=0) file_menu.add_command(label=\\"Open\\", command=lambda: open_file()) file_menu.add_command(label=\\"Save\\", command=lambda: save_file()) file_menu.add_command(label=\\"Quit\\", command=lambda: quit()) # add menu drop downs menu_bar.add_cascade(label=\\"File\\", menu=file_menu) # create a file open dialog def open_file(): file = tk.filedialog.askopenfile(mode=\\"r\\") if file != None: contents = file.read() text_editor.insert('1.0', contents) # create a file save dialog def save_file(): file = tk.filedialog.asksaveasfile(mode=\\"w\\") if file != None: data = text_editor.get('1.0', tk.END) file.write(data) root.mainloop()"},{"prompt":"Build an Artificial Neural Network in Python using Keras. Not applicable","completion":"import numpy as np from keras.models import Sequential from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D # Building a neural network model model = Sequential() model.add(Dense(32, activation='relu', input_shape=(784,))) model.add(Dense(64, activation='relu')) model.add(Dense(64, activation='relu')) model.add(Dense(10, activation='softmax')) # Compiling the model model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) # Fit the model model.fit (x_train, y_train, epochs=5, batch_size=32) # Evaluate the model model.evaluate(x_test, y_test)"},{"prompt":"Using the input as a guide, modify the following Python code to add a new feature of sorting the dictionary by value. names_and_points = { Dave: 20, John: 40, Rachel: 55 }","completion":"from operator import itemgetter names_and_points = { \\"Dave\\": 20, \\"John\\": 40, \\"Rachel\\": 55 } sorted_dict = sorted(names_and_points.items(), key=itemgetter(1)) print(sorted_dict)"},{"prompt":"Write a Python script to find all common elements between two sets. [1, 2, 3, 4], [3, 4, 5, 6]","completion":"def find_common_elements(set1, set2): common_elements = [] for item in set1: if item in set2 and item not in common_elements: common_elements.append(item) return common_elements"},{"prompt":"Create a Python program that pulls data from a GitHub repository and prints it to the console. Not applicable","completion":"import requests # Get the GitHub user data from the repo url = 'https://api.github.com/repos/user/example-repo/contents/data.json' r = requests.get(url) data = r.json() # Print data to console for d in data: print(d)"},{"prompt":"Generate a random number between 1 and 10 using Python.","completion":"import random # Generate a random number between 1 and 10 random_number = random.randint(1, 10) print(random_number)"},{"prompt":"Generate a Python program to find all pythagorean triplets up to a given limit. limit = 20","completion":"def pythagorean_triplets(limit): for a in range(1, limit): for b in range(a, limit): for c in range(b, limit): if (a**2 + b**2) == c**2: yield [a, b, c] limit = 20 triplets = pythagorean_triplets(limit) for triplet in triplets: print(triplet)"},{"prompt":"Write a Python program to optimize a given expression using the Branch and Bound Technique. Expression: Z = 30x + 40y subject to 2x + y = 1 2x + 3y = 4 x + y >= 3 x >= 0, y >= 0","completion":"import pulp # Define the problem model = pulp.LpProblem('Branch and Bound', pulp.LpMinimize) # Define the decision variables x = pulp.LpVariable('x', lowBound=0, cat='Continuous') y = pulp.LpVariable('y', lowBound=0, cat='Continuous') # Define the objective function model += 30*x + 40*y # Define the constraints model += (2*x + y == 1) model += (2*x + 3*y == 4) model += (x + y >= 3) # Solve the problem status = model.solve() # Print the results print(pulp.LpStatus[status]) print('Optimal Value: {}'.format(pulp.value(model.objective))) print('Optimal x: {}'.format(pulp.value(x))) print('Optimal y: {}'.format(pulp.value(y)))"},{"prompt":"Create a Python program that takes a string and replaces all spaces with underscores. Hello World","completion":"def replace_spaces(string): return string.replace(' ', '_') string = 'Hello World' print(replace_spaces(string))"},{"prompt":"Generate code to print the multiplication tables from 1 to 10 in Python. Not applicable","completion":"for i in range(1, 11): for j in range(1, 11): print(i*j, end='t') print()"},{"prompt":"Generate a function to send emails using Python. The parameters of the function should be the recipient address, the subject of the email, and the body of the email. recipient_address = 'example@example.com' subject = 'Hello World' body = 'This is a test email'","completion":"def send_email(recipient_address, subject, body): import smtplib from email.message import EmailMessage message = EmailMessage() message['From'] = 'example@example.com' message['To'] = recipient_address message['Subject'] = subject message.set_content(body) with smtplib.SMTP('smtp.gmail.com', 587) as smtp: smtp.ehlo() smtp.starttls() smtp.login('example@example.com', 'yourpassword') smtp.send_message(message)"},{"prompt":"Extract the 2nd and 3rd element from a given list in Python. list = [1, 2, 3, 4, 5]","completion":"new_list = list[1:3]"},{"prompt":"Generate a program in python that searches for an element in the given list and returns its index. mylist = [1, 4, 5, 8, 9] element = 5","completion":"def search_list(mylist, element): for i in range(len(mylist)): if mylist[i] == element: return i return -1 mylist = [1, 4, 5, 8, 9] element = 5 index = search_list(mylist, element) if index == -1: print(\\"Element not found.\\") else: print(\\"Element found at index:\\", index)"},{"prompt":"Write a function in Python to perform standard normalization of a given data. Data: [35,45,55,65,75]","completion":"def normalize(data): \\"\\"\\"Performs standard normalization of a given data\\"\\"\\" mean = sum(data)/len(data) std_dev = (sum([(x-mean)**2 for x in data])/len(data)) ** 0.5 return [(x-mean)/std_dev for x in data] data = [35,45,55,65,75] print(normalize(data)) # output: [-1.0, -0.5, 0.0, 0.5, 1.0]"},{"prompt":"Give a Python program to extract a given number of random items from a given list. list = [1, 2, 3, 4, 5, 6]","completion":"import random def extract_random_items(lst, num): q = random.sample(lst, num) return q"},{"prompt":"Create a Python script to find the first ten perfect squares.","completion":"nums = [x*x for x in range(1,11)] print(\\"The first 10 perfect squares are: \\", nums)"},{"prompt":"Create a Python program to group word frequencies from a given text. Text: The quick brown fox jumps over the lazy dog","completion":"text = \\"The quick brown fox jumps over the lazy dog\\" words = text.split(\\" \\") word_freq = {} for w in words: if w in word_freq: word_freq[w] += 1 else: word_freq[w] = 1 print(word_freq) # Output: {'The': 1, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'the': 1, 'lazy': 1, 'dog': 1}"},{"prompt":"Generate a function in Python that takes two parameters and returns their product.","completion":"def multiply(a, b): \\"\\"\\"Computes the product of two numbers.\\"\\"\\" return a * b"},{"prompt":"Generate a set of Python functions to parse a string into a list of words and a list of numbers. The string will contain a mix of words and numbers separated by commas. apple,10,cats,20","completion":"def parse_string(string): words = [] numbers = [] for item in string.split(','): try: numbers.append(int(item)) except ValueError: words.append(item) return words, numbers words, numbers = parse_string('apple,10,cats,20') print(words) # ['apple', 'cats'] print(numbers) # [10, 20]"},{"prompt":"Rewrite this JavaScript code in Python. let arr = [1, 2, 3, 4, 5] arr.forEach(function(element) { console.log(element * 2) });","completion":"arr = [1, 2, 3, 4, 5] for element in arr: print(element * 2)"},{"prompt":"Write a Python script to measure execution time of a given operation. Not applicable","completion":"import time def measure_time(): start = time.time() # Your code here... end = time.time() return end - start execution_time = measure_time() print(\\"Time taken:\\", execution_time, \\"seconds\\")"},{"prompt":"Modify the following Python code to print the sum of the elements in a given list (without using the sum() function). my_list = [1, 5, 4, 3, 10]","completion":"my_list = [1, 5, 4, -3, 10] total = 0 for num in my_list: total += num print(total) # prints 17"},{"prompt":"Construct a function in Python to remove all the vowels from a given sentence.","completion":"def remove_vowels(phrase): vowels = ['a','e','i','o','u'] return ''.join([c for c in phrase if c not in vowels])"},{"prompt":"Create a web scraper in Python that allows users to search for books with specific titles and authors. The scraper must return the book's title, author, and ISBN. Not applicable","completion":"import requests from bs4 import BeautifulSoup def get_book_details(title, author): url = f'http://example.com/search?title={title}&author={author}' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') book_details = soup.find('div', {'class': 'book-details'}) title = book_details.find('div', {'class': 'title'}).get_text() author = book_details.find('div', {'class': 'author'}).get_text() isbn = book_details.find('div', {'class': 'isbn'}).get_text() return title, author, isbn title, author, isbn = get_book_details('The Cat in the Hat', 'Dr. Seuss') print(f'Title: {title}nAuthor: {author}nISBN: {isbn}')"},{"prompt":"Create a function in Python to calculate the sum of squares of all numbers up to a given value n. n = 10","completion":"def sumOfSquares(n): sum = 0 for i in range(n + 1): sum += (i ** 2) return sum print(sumOfSquares(10))"},{"prompt":"Rewrite the following code to use list comprehension in Python. big_list = [] for value in list: if value % 2 == 0: big_list.append(value)","completion":"big_list = [value for value in list if value % 2 == 0]"},{"prompt":"Write a Python program to scrape the top 5 trending tweets from Twitter. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://twitter.com/trends' r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') trending_tweets = soup.find_all('a', {'class': 'trend-details'}) for tweet in trending_tweets[:5]: print(tweet.text)"},{"prompt":"Write a Python program to parse a web page and extract text from its HTML tags. <html> <head> <title>Example Web Page</title> </head> <body> <h1>This is an example web page</h1> <p>Welcome to our web page!</p> </body> </html>","completion":"from bs4 import BeautifulSoup def parse_web_html(html): soup = BeautifulSoup(html, 'html.parser') text = soup.get_text() return text"},{"prompt":"Create a Python program to convert Celsius temperatures to Fahrenheit temperatures. tempCelsius = 15","completion":"def celsius_to_fahrenheit(tempCelsius): \\"\\"\\"Convert temperature from Celsius to Fahrenheit. Args: tempCelsius (int): Temperature in Celsius Returns: float: Temperature in Fahrenheit \\"\\"\\" return (tempCelsius * 1.8) + 32 tempCelsius = 15 tempFahrenheit = celsius_to_fahrenheit(tempCelsius) print(f\\"{tempCelsius}°C = {tempFahrenheit}°F\\")"},{"prompt":"Write a code in Python to print the following string: Welcome to the amazing world of programming!","completion":"print(\\"Welcome to the amazing world of programming!\\")"},{"prompt":"Translate the following pseudocode to Python language. // set n to the number of array elements // find max value of array max_val = array[1] for i = 2 to n if (array[i] > max_val) max_val = array[i]","completion":"def find_max_val(array): n = len(array) max_val = array[0] for i in range(1, n): if array[i] > max_val: max_val = array[i] return max_val if __name__ == '__main__': array = [1, 2, 3, 4, 5] print(find_max_val(array))"},{"prompt":"Create a basic Python script that takes a user input, filters out any characters that are not letters or numbers, and prints the input after filtering. This input contains special characters!","completion":"import re input_string = \\"This input contains \\" special characters!\\" filtered_string = re.sub(r'[^a-zA-Z0-9]', '', input_string) print(filtered_string) # Output: Thisinputcontainsspecialcharacters"},{"prompt":"Design a Python program to find the area and perimeter of a circle. r = 4","completion":"def area_perimeter_circle(radius): \\"\\"\\"Function to return the area and perimeter of a circle\\"\\"\\" area = 3.14 * (radius ** 2) perimeter = 2 * 3.14 * radius return area, perimeter # Driver code radius = 4 area, perimeter = area_perimeter_circle(radius) print(f'Area of the circle is {area} and Perimeter of the circle is {perimeter}')"},{"prompt":"Write a Python program to identify the longest common sequence of two given strings. ABAZA, BAZAC","completion":"def find_longest_common_sequence(string1, string2): m = len(string1) n = len(string2) # Create a matrix to store results of subproblems dp = [[0] * (n+1) for i in range(m+1)] max_length = 0 # Fill d[][] in bottom up manner for i in range(m): for j in range(n): # If A[i] == B[j], include the character # and take diagonal path if string1[i] == string2[j]: dp[i+1][j+1] = dp[i][j] + 1 max_length = max(max_length, dp[i+1][j+1]) # If not same, take max from 3 adjacent cells else: dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1], dp[i][j]) return max_length string1 = \\"ABAZA\\" string2 = \\"BAZAC\\" print(\\"Length of Longest Common Sequence:\\", find_longest_common_sequence(string1, string2))"},{"prompt":"Write a python script to compute the mean of a list of integers. X = [2,4,6,8,10]","completion":"def find_mean(X): # Compute the sum of all the elements in the list sum_x = 0 for x in X: sum_x += x # Compute the mean mean = sum_x / len(X) return mean if __name__ == '__main__': X = [2,4,6,8,10] print(find_mean(X))"},{"prompt":"Create a list of strings in Python based on the following conditions: Input array: [Apple, Orange, Pear, Watermelon] Condition: Return a list of strings that contains elements in the input array that start with P.","completion":"[”Pear”, ”Watermelon”]"},{"prompt":"Write a python script to generate the following polynomial equations x + 4","completion":"def construct_polynomial(input_str): parts = input_str.split(\\"+\\") coefficients = [] for part in parts: try: coefficient = int(part) except: coefficient = 1 coefficients.append(coefficient) def polynomial(x): output = 0 for i, coeff in enumerate(coefficients): output += coeff * x**i return output return polynomial"},{"prompt":"Create a Python function which returns the greatest common divisor of two integers. 18, 48","completion":"def greatest_common_divisor(a, b): # Ensure that a is greater than b if a < b: a, b = b, a # Calculate the GCD of a and b while b != 0: # Get the remainder rem = a % b # Set a to b a = b # Set b to the remainder b = rem # Return the greatest common divisor return a print(greatest_common_divisor(18, 48))"},{"prompt":"Extend the python code below to print hello world 5 times. for i in range(3): print(hello)","completion":"for i in range(5): print(\\"hello world\\")"},{"prompt":"Write a Python program that takes a string input representing an arithmetic expression and calculates the result. (20 * 8) + (2 * 4)","completion":"def evaluate(expression): try: return eval(expression) except SyntaxError: print('Invalid expression.') print(evaluate(\\"(20 * 8) + (2 * 4)\\")) Output: 164.0"},{"prompt":"Write a Python program to classify a given set of text data into positive and negative classes using a Naïve Bayes classifier.","completion":"# Import the libraries from textblob import TextBlob from sklearn.naive_bayes import GaussianNB # Prepare the training data train = [('It is a great day.', 'pos'), ('I am feeling quite good.', 'pos'), ('The weather is terrible.', 'neg'), ('My day has been horrible.', 'neg')] # Create feature and labels X = [ TextBlob(text).words for text, label in train ] y = [label for text, label in train ] # Train the classifier clf = GaussianNB() clf.fit(X, y) # Predict the class of new data print(clf.predict([\\"I am having a bad day\\"]))"},{"prompt":"Suggest a function to remove elements of an array that are greater than a given limit [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"# Python program to remove elements of an array that are greater than a given limit def remove_above_limit(arr, limit): new_arr = [x for x in arr if x <= limit] return new_arr"},{"prompt":"Create a Python program to ask a user for the number of students in the class and generate an array of empty strings of that length. Number of students: 10","completion":"students = [\\"\\"] * 10"},{"prompt":"Create a function in Python that takes two arguments and finds their Longest Common Subsequence. Strings A = ABCBDAB Strings B = BDCABA","completion":"def LCS(A, B): # Initialize the 2D matrix m = len(A) n = len(B) L = [[0 for x in range(n+1)] for x in range(m+1)] # Set the boolean values for the base cases for i in range(0,m+1): for j in range(0,n+1): if i == 0 or j == 0 : L[i][j] = 0 # Dynamic Programming Approach for populating the matrix for i in range(1, m+1): for j in range(1, n+1): if A[i-1] == B[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j] , L[i][j-1]) # Return the LCS return L[m][n]"},{"prompt":"This code provides a CLI parser module that is responsible for parsing command models defined in cliCommands.yaml and providing functions for validation of userinput, invoking execution handle for CLI commands or macro expansions, and determining possible arg match for command autocompletion based on context. To use the module, instantiate the CLIUtil class and call its methods, such as get_match() to get a list of possible matches for a given command context, and validate_command_and_execute() to validate and execute a full command context. The module also includes methods for printing the command graph and results.","completion":"#------------------------------------------------------------------------------ # cli_parser.py #------------------------------------------------------------------------------ ''' @author : rgiyer Date : October 20th, 2014 This module is responsible for parsing command model defined in cliCommands.yaml and providing functions for: - Validation of user-input - invoking execution handle for CLI commands or macro expansions - determine possible arg match for command auto-completion based on context ''' # Standard Python libraries import os import re import inspect import subprocess # Packages required for openclos import yaml # openclos classes import util # cli related classes from cli_handle_impl import CLIImplementor #------------------------------------------------------------------------------ #------------------------------------------------------------------------------ class CLICommand: def __init__ ( self, cmd_access, cmd_handle, cmd_macro, cmd_desc ): self.cmd_access = cmd_access self.cmd_handle = cmd_handle self.cmd_macro = cmd_macro self.cmd_desc = cmd_desc # end class CLICommand #------------------------------------------------------------------------------ #------------------------------------------------------------------------------ class CLIUtil: def __init__ ( self ): commandConfFile = os.path.join ( util.configLocation, 'cliCommands.yaml' ) self.yaml_file_stream = open ( commandConfFile, 'r' ) raw_graph = yaml.load ( self.yaml_file_stream ) self.cmd_graph = {} self.indentation = 8 self.dump_cmd ( raw_graph ) self.yaml_file_stream.close () #------------------------------------------------------------------------------ def get_implementor_handle ( self, class_instance, handle_name ): handles = inspect.getmembers ( class_instance, predicate = inspect.ismethod ) for function_tuple in handles: if ( handle_name == function_tuple [ 0 ] ): return function_tuple [ 1 ] # no match found return 0 #------------------------------------------------------------------------------ # Parse through the dictionary iteratively: def dump_cmd ( self, cmds, cmd_root=\\"\\", cmd_access=\\"READ\\", cmd_handle=\\"\\", cmd_macro=\\"\\", cmd_desc=\\"\\" ): for cmd in cmds: if ( cmd_root == \\"\\" ): cmd_compound = cmd else: cmd_compound = cmd_root + \\"_\\" + cmd cmd_data = cmds [ cmd ] # Get command access if cmd_data.has_key ( \\"Access\\" ): cmd_access = cmd_data [ \\"Access\\" ] # Get command handler if cmd_data.has_key ( \\"Handle\\" ): cmd_handle = cmd_data [ \\"Handle\\" ] elif ( cmd_handle != \\"\\" ): cmd_handle = \\"\\" # Get command macro if cmd_data.has_key ( \\"Macro\\" ): cmd_macro = cmd_data [ \\"Macro\\" ] elif ( cmd_macro != \\"\\" ): cmd_macro = \\"\\" # Get command description if cmd_data.has_key ( \\"Desc\\" ): cmd_desc = cmd_data [ \\"Desc\\" ] elif ( cmd_desc != \\"\\" ): cmd_desc = \\"\\" # Parse the arguments if cmd_data.has_key ( \\"Args\\" ): cmd_args = cmd_data [ \\"Args\\" ] self.dump_cmd ( cmd_args, cmd_compound, cmd_access, cmd_handle, cmd_macro, cmd_desc ) if cmd_data.has_key ( \\"Handle\\" ): self.cmd_graph [ cmd_compound ] = CLICommand ( cmd_access, cmd_handle, cmd_macro, cmd_desc ) if ( len ( cmd_compound ) > self.indentation ): self.indentation = len ( cmd_compound ) #------------------------------------------------------------------------------ def normalize_command ( self, cmd ): return cmd.replace ( \\" \\", \\"_\\" ) #------------------------------------------------------------------------------ def get_indentation ( self, cmd ): return ( self.indentation + 8 - len ( cmd ) ) #------------------------------------------------------------------------------ def suffix_macro_to_cmd ( self, macro_list, cmd ): ret_cmd = [] for macro in macro_list: ret_cmd.append ( self.normalize_command ( cmd + \\"_\\" + macro ) ) return ret_cmd #------------------------------------------------------------------------------ def get_macro_list ( self, class_instance, macro_txt, add_help=None ): fn_macro = self.get_implementor_handle ( class_instance, macro_txt ) return fn_macro ( add_help ) #------------------------------------------------------------------------------ def include_macro ( self, macro_list, ret_list ): for item in macro_list: ret_list.append ( item ) #------------------------------------------------------------------------------ def string_has_enter ( self, string ): if ( re.search ( \\"<enter>\\", string ) != None ): return 1 else: return 0 #------------------------------------------------------------------------------ def add_enter_instruction ( self, result_list ): if ( len ( result_list ) ): string = result_list [ 0 ] if ( self.string_has_enter ( string ) == 1 ): return 0 result_list.insert ( 0, \\" <enter>\\" + \\" \\" * self.get_indentation ( \\"<enter\\" ) + \\"Execute the current command\\" ) #------------------------------------------------------------------------------ def match_macro ( self, macro_list, needle, ret_list ): for haystack in macro_list: if ( len ( needle ) == len ( haystack ) ): if ( re.match ( needle, haystack ) != None ): self.add_enter_instruction ( ret_list ) elif ( len ( needle ) < len ( haystack ) ): if ( re.match ( needle, haystack ) != None ): ret_list.append ( haystack ) else: print \\"\\" #------------------------------------------------------------------------------ def option_exists ( self, consider_option, ret_list ): for option in ret_list: if ( re.match ( option, consider_option ) != None ): return 1 return 0 #------------------------------------------------------------------------------ def complete_command ( self, part_cmd, full_cmd, end_index, cmd_helper, ret_list ): unmatched_string = full_cmd [ end_index: ] # This is an adjustment for \\"<space>\\" before tab / ? keypress if ( part_cmd [ -1 ] == \\"_\\" ): part_cmd = part_cmd [ 0:-1 ] unmatched_string = \\"_\\" + unmatched_string if ( unmatched_string [ 0 ] == \\"_\\" ): # attach possible matches possible_option = unmatched_string.replace ( \\"_\\", \\" \\" ) + ( \\" \\" * self.get_indentation ( full_cmd ) ) possible_option = possible_option + \\"<\\" + cmd_helper.cmd_desc + \\">\\" ret_list.append ( possible_option ) else: # Get part of the command from part_cmd match_object = re.search ( \\"_\\", part_cmd ) while ( match_object != None ): part_cmd = part_cmd [ match_object.end (): ] match_object = re.search ( \\"_\\", part_cmd ) # Get rest of the command from unmatched_string match_object = re.search ( \\"_\\", unmatched_string ) if ( match_object != None ): unmatched_string = unmatched_string [ :(match_object.end()-1)] complete_word = part_cmd + unmatched_string if ( self.option_exists ( complete_word, ret_list ) == 0 ): ret_list.append ( complete_word ) return ret_list #------------------------------------------------------------------------------ def get_all_cmds ( self ): ret_list = [] for cmd in self.cmd_graph: cmd_str = cmd.replace ( \\"_\\", \\" \\" ) cmd_str = cmd_str + ( \\" \\" * self.get_indentation ( cmd ) ) + \\"<\\" + self.cmd_graph [ cmd ].cmd_desc + \\">\\" ret_list.append ( cmd_str ) return ret_list #------------------------------------------------------------------------------ # Lot of reference here to needle and haystack, needle being the current # command context of the CLI, and haystack being the command model dict # created during CLIUtil instantiation #------------------------------------------------------------------------------ def get_match ( self, cmd ): if ( len ( cmd ) == 0 or re.search ( \\"[a-z|A-Z|0-9]\\", cmd ) == None ): return self.get_all_cmds () # chomp input string if ( cmd [ -1 ] == \\" \\" ): cmd = cmd [ 0:-1 ] needle = self.normalize_command ( cmd ) ret_list = [] for haystack in self.cmd_graph: len_haystack = len ( haystack ) len_needle = len ( needle ) cmd_helper = self.cmd_graph [ haystack ] # Case 1: Full command is provided, without macro expansion if ( len_needle == len_haystack ): # check if we have a match if ( re.match ( needle, haystack ) != None ): if ( cmd_helper.cmd_macro != \\"\\" ): self.include_macro ( self.get_macro_list ( CLIImplementor (), cmd_helper.cmd_macro, \\"add help\\" ), ret_list ) else: self.add_enter_instruction ( ret_list ) # Case 2: Full command is provided with macro expansion elif ( len_needle > len_haystack ): match_object = re.match ( haystack, needle ) if ( match_object != None ): # Match exists - so get the macro cmd_macro = needle [ match_object.end (): ] if ( cmd_macro [ 0 ] == \\"_\\" and len ( cmd_macro ) > 1 ): cmd_macro = cmd_macro [ 1: ] if ( cmd_helper.cmd_macro != \\"\\" ): cmd_macro_list = self.get_macro_list ( CLIImplementor(), cmd_helper.cmd_macro ) self.match_macro ( cmd_macro_list, cmd_macro, ret_list ) # Case 3: Part command is provided elif ( len_needle < len_haystack ): match_object = re.match ( needle, haystack ) if ( match_object != None ): # Match exists - get rest of the command balance_cmd = haystack [ match_object.end (): ] self.complete_command ( needle, haystack, match_object.end (), self.cmd_graph [ haystack ], ret_list ) return ret_list #------------------------------------------------------------------------------ def chomp ( self, token ): match_object = re.search ( \\"[a-z|A-Z|0-9]\\", token ) if ( match_object != None ): token = token [ ( match_object.end () - 1): ] token = token [ ::-1 ] match_object = re.search ( \\"[a-z|A-Z|0-9]\\", token ) if ( match_object != None ): token = token [ ( match_object.end () - 1): ] token = token [ ::-1 ] return token #------------------------------------------------------------------------------ def validate_command_and_execute ( self, full_cmd_context ): # We will do the validation again in case this function is called # outside the CLI context best_cmd_match = \\"\\" best_cmd_args = \\"\\" best_cmd_handle = None for command in self.cmd_graph: match_object = re.match ( command, self.normalize_command ( full_cmd_context ) ) if ( match_object != None ): # Okay - we found a match. Get macros if included command_args = \\"\\" # TODO - different impl here for multiple args support if ( len ( full_cmd_context ) > len ( command ) ): command_args = self.chomp ( full_cmd_context [ match_object.end (): ] ) if ( len ( best_cmd_match ) < len ( command ) ): best_cmd_match = command best_cmd_args = command_args best_cmd_handle = self.get_implementor_handle ( CLIImplementor (), self.cmd_graph [ command ].cmd_handle ) if ( best_cmd_handle != 0 ): return best_cmd_handle ( best_cmd_args ) else: print self.cmd_graph [ best_cmd_match ].cmd_handle + \\" not implemented\\" #------------------------------------------------------------------------------ def print_results ( self, result_list ): for result in result_list: print \\"t\\" + result #------------------------------------------------------------------------------ def print_command_graph ( self, cmd_dict ): for keys in cmd_dict: print keys + \\"=>\\" cmd = cmd_dict [ keys ] if ( cmd.cmd_desc != \\"\\" ): print \\" \\" + cmd.cmd_desc print \\" \\" + cmd.cmd_access if ( cmd.cmd_macro != \\"\\" ): fn_macro = self.get_implementor_handle ( CLIImplementor (), cmd.cmd_macro ) if ( fn_macro != 0 ): print fn_macro () else: print \\" Macro not implemented\\" if ( cmd.cmd_handle != \\"\\" ): fn_handle = self.get_implementor_handle ( CLIImplementor (), cmd.cmd_handle ) if ( fn_handle != 0 ): fn_handle () else: print \\" Handler not implemented\\" # end class CLIUtil #------------------------------------------------------------------------------ #------------------------------------------------------------------------------ #------------------------------------------------------------------------------ # MAIN #------------------------------------------------------------------------------ cli_util = CLIUtil () match_options = [ \\"create cabling\\", # \\"create cabling-plan\\", # \\"create cabling-\\", # \\"create cabling\\", # \\"create cabling-plan pod\\", # \\"create cabling-plan pod pod_2\\", # \\"create\\", # \\"create dev\\", # \\"create device-config\\", # \\"create device-config p\\", # \\"create device-config pod\\", # \\"create device-config pod pod_1\\", # \\"run\\", # \\"update password\\", # \\"run r\\", # \\"run RE\\", # \\"create cab\\", \\"create pods\\", \\"create pods from\\", \\"create pods from-file\\", \\"\\" ] if __name__ == '__main__': for match in match_options: print \\"Matching results for \\" + match + \\" is:\\" cli_util.print_results ( cli_util.get_match ( match ) ) print \\"------------------------------------------------------\\""},{"prompt":"Write a python program to check if two given strings are anagrams. Anagrams are two strings which contain the same set of characters. s1 = cat, s2 = tac","completion":"def is_anagram(s1, s2): s1 = s1.lower() s2 = s2.lower() if len(s1) != len(s2): return False s1_dict = {} for char in s1: if char not in s1_dict: s1_dict[char] = 1 else: s1_dict[char] += 1 for char in s2: if char not in s1_dict: return False else: s1_dict[char] -= 1 if s1_dict[char] < 0: return False return True"},{"prompt":"Given a list of integers, write a Python program to find the largest and second largest numbers in the list. [10, 20, 5, 45, 25]","completion":"def find_largest_and_second_largest(nums): max1 = float('-inf') max2 = float('-inf') for n in nums: if n > max1: max2 = max1 max1 = n elif n > max2 and n != max1: max2 = n return max1, max2"},{"prompt":"mplement a Python script to identify the sentiment of a given text. Not applicable","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_score(text): ss = SentimentIntensityAnalyzer() scores = ss.polarity_scores(text) return scores text = 'This is an amazing movie!' score = sentiment_score(text) print('Positive score: ', score['pos']) print('Negative score: ', score['neg']) print('Neutral score: ', score['neu']) print('Compound score: ', score['compound'])"},{"prompt":"For an existing Python program, write a function to sort a given list of numbers in ascending order. [4, 3, 2, 5, 1]","completion":"def sort_list(numbers): numbers.sort() return numbers print(sort_list([4, 3, 2, 5, 1]))"},{"prompt":"Generate a Python program to fetch and analyze the performance of a list of URLs. list_urls = [https://www.google.com, https://www.yahoo.com]","completion":"import requests #Initialize variables list_urls = [\\"https://www.google.com\\", \\"https://www.yahoo.com\\"] #Loop through the list of URLs for url in list_urls: #Fetch the URL r = requests.get(url) #Output a status code print(url+\\" returned: \\"+str(r.status_code)) #Output the time in milliseconds it took to connect to the server and get the response print(\\"Time elapsed: \\"+str(r.elapsed.total_seconds()*1000)+\\"ms\\")"},{"prompt":"Write a Python program to send an email to a group of people.","completion":"# Imports import smtplib # Define the email addresses recipients = ['person1@mail.com', 'person2@mail.com', 'person3@mail.com'] # Connect to SMTP server with smtplib.SMTP('smtp.mail.com', 587) as server: # Start TLS server.starttls() # Login server.login('your_email_address', 'your_password') # Construct the message message = ''' Subject: Your Subject Here Message body here ''' # Send mail server.sendmail('your_email_address', recipients, message)"},{"prompt":"Design a web application using python and Flask to save user data submitted via a form.","completion":"from flask import Flask from flask import render_template from flask import request @app.route('/') def form(): return render_template('form.html') @app.route('/', methods=['POST'] def save_data(): name = request.form['name'] age = request.form['age'] # Save user data to database return render_template('success.html')"},{"prompt":"Write an AIbased program in Python that can analyze a text and produce a sentiment score for the text. 'This product is a great example of quality craftsmanship and excellent engineering.'","completion":"from textblob import TextBlob text = 'This product is a great example of quality craftsmanship and excellent engineering.' blob = TextBlob(text) sentiment_score = blob.sentiment.polarity if sentiment_score > 0: print('Positive sentiment') elif sentiment_score < 0: print('Negative sentiment') else: print('Neutral sentiment')"},{"prompt":"Create a python program to find the shortest distance between two words in a given string. Python is an easy language.","completion":"def min_distance_words(s, w1, w2): list_str = s.split(\\" \\") index1 = -1 index2 = -1 min_dist = float(\\"inf\\") for i in range(len(list_str)): if list_str[i] == w1: index1 = i if index2 != -1: min_dist = min(min_dist, abs(index1 - index2)) elif list_str[i] == w2: index2 = i if index1 != -1: min_dist = min(min_dist, abs(index1 - index2)) if min_dist == float(\\"inf\\"): return -1 else: return min_dist"},{"prompt":"Create a Python function to identify if a number is divisible by 7. 42","completion":"def is_divisible_by_7(number): return number % 7 == 0 result = is_divisible_by_7(42) print(result) # True"},{"prompt":"Write a Python program to group a list of items according to a given criteria. list = [ { 'name': 'item1', 'type': 'A' }, { 'name': 'item2', 'type': 'B' }, { 'name': 'item3', 'type': 'A' }, { 'name': 'item4', 'type': 'A' }, { 'name': 'item5', 'type': 'B' } ]","completion":"from collections import defaultdict def groupByType(list): res = defaultdict(list) for item in list: res[item['type']].append(item['name']) return res list = [ { 'name': 'item1', 'type': 'A' }, { 'name': 'item2', 'type': 'B' }, { 'name': 'item3', 'type': 'A' }, { 'name': 'item4', 'type': 'A' }, { 'name': 'item5', 'type': 'B' } ] res = groupByType(list) print(dict(res)) # output: # {'A': ['item1', 'item3', 'item4'], 'B': ['item2', 'item5']}"},{"prompt":"Write a Python program to detect if an array contains any duplicate elements. [3, 5, 8, 1, 2, 3]","completion":"def check_duplicates(arr): seen = set() for element in arr: if element in seen: return True else: seen.add(element) return False arr = [3, 5, 8, 1, 2, 3] result = check_duplicates(arr) print(result)"},{"prompt":"Write a function in Python that takes two strings s1 and s2 and returns s2 repeated s1 times. s1 = '3'; s2 = 'hello'","completion":"def repeat(s1, s2): n = int(s1) return s2 * n print(repeat('3','hello')) # Output: hellohellohello"},{"prompt":"Create a Python script to fetch news articles from a news API. Not applicable","completion":"import requests url = 'http://newsapi.org/v2/top-headlines?country=us&apiKey=YOUR_API_KEY' response = requests.get(url) data = response.json() for article in data['articles']: print(article['title']) // Output: Headline 1, Headline 2, Headline 3, etc."},{"prompt":"Write a short Python program which takes a sentence as input and prints the frequency of each letter in that sentence. I love programming","completion":"def letter_frequency(sentence): # Count the frequency of each letter letter_freq = {} for char in sentence: if char in letter_freq: letter_freq[char] += 1 else: letter_freq[char] = 1 # Print the result for char, freq in letter_freq.items(): print(f\\"{char}: {freq}\\") if __name__ == \\"__main__\\": sentence = input(\\"Enter a sentence: \\") letter_frequency( sentence )"},{"prompt":"Using the input provided, write a Python program to find the longest pattern in the given string. string = abccbaabcabccba","completion":"def find_longest_pattern(string): \\"\\"\\"Function to find the longest pattern in the given string\\"\\"\\" longest_pattern = \\"\\" for i in range(len(string)): for j in range(i+1, len(string)+1): pattern = string[i:j] if pattern == pattern[::-1]: longest_pattern = max(pattern, longest_pattern, key=len) return longest_pattern"},{"prompt":"Generate a code snippet to insert a keyvalue pair into a given dictionary. dict = {'I': 1, 'love': 2, 'coding': 3} key = 'Python' value = 10","completion":"dict['Python'] = 10"},{"prompt":"Write a function to remove all elements from a Python list that are divisible by a given number. mylist = [7, 8, 15, 21, 24] num = 3","completion":"def remove_divisible(lst, n): new_list = [] for item in lst: if item % n != 0: new_list.append(item) return new_list mylist = [7, 8, 15, 21, 24] num = 3 print(remove_divisible(mylist, num)) # [7, 8, 21]"},{"prompt":"What is the shortest way to sort a list of integers in descending order in Python?","completion":"# using the sorted function with key parameter list_of_ints = [8, 0, 7, 4, 5, 6, 9] sorted_list_ints = sorted(list_of_ints, key=lambda num: -num) print(sorted_list_ints) #[9, 8, 7, 6, 5, 4, 0]"},{"prompt":"Write a Python program to join two given lists with a specific separator. list_1 = [Hello, World] list_2 = [Python, Programming] separator = ,","completion":"list_1 = [\\"Hello\\", \\"World\\"] list_2 = [\\"Python\\", \\"Programming\\"] separator = \\",\\" result = separator.join(list_1 + list_2) print(result)"},{"prompt":"Create an algorithm in Python to search for an element in a sorted array. arr[] = {2, 3, 5, 6, 8, 11, 14, 18}","completion":"def binary_search(arr, low, high, x): if high >= low: mid = (low + high) // 2 if arr[mid] == x: return mid elif arr[mid] > x: return binary_search(arr, low, mid - 1, x) else: return binary_search(arr, mid + 1, high, x) else: return -1 arr = [2, 3, 5, 6, 8, 11, 14, 18] x = 11 res = binary_search(arr, 0, len(arr)-1, x) if res != -1: print(\\"Element is present at index\\", str(res)) else: print(\\"Element is not present in array\\")"},{"prompt":"Develop an AI program that can take a simple command such as Please turn on the lights and then execute that command automatically. Not applicable","completion":"import speech_recognition as sr from os import system def listen_command(): r = sr.Recognizer() with sr.Microphone() as source: print(\\"Listening...\\") audio = r.listen(source) try: command = r.recognize_google(audio) print(\\"I heard: \\" + command) return command except sr.UnknownValueError: print(\\"I could not understand audio\\") listen_command() if listen_command() == ‘Please turn on the lights’: system(\\"/usr/bin/python3 /home/pi/script.py\\")"},{"prompt":"Can you develop a function in Python to check if two given strings are isomorphic?","completion":"def isIsomorphic(s1, s2): # Create a dictionary to map character from one string to another map_dict = {} if len(s1) != len(s2): return False for i in range(len(s1)): if s1[i] not in map_dict: # Check if the mapped character already occurs in target string if s2[i] in map_dict.values(): return False # Store the mapping map_dict[s1[i]] = s2[i] elif map_dict[s1[i]] != s2[i]: return False return True"},{"prompt":"Write a Python program to replace all the occurrences of one character with another in a given string. String: Hello World! Character to replace: l Character to replace with: t","completion":"def replace_char(string, char_rep, char_rep_with): new_string = string.replace(char_rep, char_rep_with) return new_string result = replace_char('Hello World!', 'l', 't') print(result)"},{"prompt":"Write a Python program to print out the most common words in a given text.","completion":"import collections def most_common_words(text): words = text.split() counts = collections.Counter(words) return counts.most_common(10)"},{"prompt":"Design a class and set of functions in Python that reports the age of an individual based on an input date of birth. 27/12/1989","completion":"class Age(): def __init__(self, date_of_birth): self.date_of_birth = date_of_birth def age(self): from datetime import datetime today = datetime.now().date() return (today.year - self.date_of_birth.year - ((today.month, today.day) < (self.date_of_birth.month, self.date_of_birth.day))) dob = Age(datetime.strptime('27/12/1989','%d/%m/%Y')) print(dob.age())"},{"prompt":"Write a Python program to query a provided API and return the result in JSON format. The API URL: https://example.com/ap","completion":"import requests url = 'https://example.com/api' response = requests.get(url) if response.status_code == 200: data = response.json() print(data) else: print('Error:', response.status_code)"},{"prompt":"Develop a linear regression model in Python to predict the closing price of stock X.","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Read in data data = pd.read_csv('[path/to/file]') # Split into features and target X = np.array(data[['feature1', 'feature2', ... , 'featureN']]) y = np.array(data['target']) # Create linear regression object model = LinearRegression() # Train the model model.fit(X, y) # Make prediction prediction = model.predict(X)"},{"prompt":"What is the output of the following Python code? nums = [1, 2, 3, 4, 5] sorted_nums = sorted(nums)","completion":"The output of the code is [1, 2, 3, 4, 5], which is the sorted version of the list nums."},{"prompt":"Generate code in Python to sum all the values of a dictionary. dictionary = { 'a': 1, 'b': 2, 'c': 3 }","completion":"def sum_dict(dict): sum = 0 for key in dict: sum += dict[key] return sum dictionary = { 'a': 1, 'b': 2, 'c': 3 } print(sum_dict(dictionary)) # 6"},{"prompt":"Modify the given Python code to improve its performance. def find_sum(n): total = 0 for i in range(n+1): total += i return total","completion":"def find_sum(n): # base case if n == 0: return 0 # recursive case else: return n + find_sum(n-1)"},{"prompt":"Create a Python program that compares two strings and returns true if the first one is longer than the second","completion":"def compare_strings(string1, string2): if len(string1) > len(string2): return True else: return False"},{"prompt":"Create a Python program to generate text from a given grammar.","completion":"import random #Function to generate text def generate_text(grammar_rules, start): if start not in grammar_rules: return start expansions = grammar_rules[start] #List of possible expansions expanded = random.choice(expansions) #Pick a random one finals = [generate_text(grammar_rules, x) for x in expanded.split()] output = \\" \\".join([str(x) for x in finals]) return output"},{"prompt":"Create a basic memory game using Python as the programming language.","completion":"import random #create cards list cards = [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\", \\"F\\", \\"G\\", \\"H\\"]*2 #shuffle cards random.shuffle(cards) #create a shuffled cards instance cards_hand = set(cards) #while loop while len(cards_hand) > 0: #my hand my_hand = set(random.sample(cards_hand, 2)) #computer hand comp_hand = set(random.sample(cards_hand, 2)) #check if my hand and computer had matched if my_hand == comp_hand: print(f\\"congratulation!!! you matched the cards..\\") else: #break break #remove all cards from hand cards_hand -= my_hand cards_hand -= comp_hand #if the loop run out if len(cards_hand) == 0: #print the result print(\\"you won the game\\") else: print(\\"you lost the game\\")"},{"prompt":"We have a list of names and scores as shown below. Write a Python program to print out a list of names and their corresponding average scores list = [['Bob', 43, 54, 66], ['James', 53, 45, 42], ['Grace', 43, 44, 59], ['Martin', 42, 42, 51]]","completion":"def getAverageScores(list): output = [] for item in list: name = item[0] scores = item[1:] average_score = sum(scores) / len(scores) output.append([name, average_score]) return output list = [['Bob', 43, 54, 66], ['James', 53, 45, 42], ['Grace', 43, 44, 59], ['Martin', 42, 42, 51]] averageScores = getAverageScores(list) print(\\"Name: Average Score\\") for item in averageScores: print(\\"{}: {:.2f}\\".format(item[0], item[1]))"},{"prompt":"Create a simple search engine in Python that takes a sentence as an input and returns relevant documents.","completion":"#import the necessary libraries import math from collections import Counter #function to calculate the inverse document frequency def inverse_document_frequency(term, documents): num_documents_containing_term = 0 for document in documents: if term in document: num_documents_containing_term += 1 return math.log(float(len(documents)) / num_documents_containing_term) #function to calculate the tf*idf score def tf_idf_score(term, document, documents): tf = float(document.count(term)) / sum(document.count(word) for word in document) idf = inverse_document_frequency(term, documents) return tf * idf #function to find the relevant documents def search(query, documents): query_terms = query.split(' ') scores = {document_index: 0 for document_index in range(len(documents))} for term in query_terms: for document_index, document in enumerate(documents): scores[document_index] += tf_idf_score(term, document, documents) return scores #test data documents = [\\"this is a sentence\\", \\"this is another sentence\\", \\"this sentence is irrelevant\\"] #search for a sentence query = \\"this sentence\\" result = search(query, documents) #print the relevent documents print(result) # {0: 0.6931471805599453, 1: 0.6931471805599453, 2: 0.0}"},{"prompt":"Can you build an algorithm in Python that determines if a number is odd or even?","completion":"def is_odd(number): if number % 2 == 0: return False else: return True"},{"prompt":"Write a Python program to find the nth term of Fibonacci Series.","completion":"def nth_term_fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"prompt":"Utilizing the provided data, generate a fully working K nearest neighbor classifier in Python. Training Data: [(3.6, 4.6, 1), (4.7, 5.1, 0), (6.8, 7.2, 1), (5.5, 6.5, 1), (7.1, 8.2, 0)] Test Data: [(2.2, 3.2, ?), (8.2, 9.2, ?)]","completion":"import numpy as np from sklearn.neighbors import KNeighborsClassifier # training data X = np.array([[3.6, 4.6], [4.7, 5.1], [6.8, 7.2], [5.5, 6.5], [7.1, 8.2]]) y = np.array([1, 0, 1, 1, 0]) # test data X_test = np.array([[2.2, 3.2], [8.2, 9.2]]) # K=3 knn_classifier = KNeighborsClassifier(3) knn_classifier.fit(X, y) y_test = knn_classifier.predict(X_test) print(y_test) # will output [1, 0]"},{"prompt":"Create a Python script to parse the JSON data from a URL https://jsonplaceholder.typicode.com/todos/1","completion":"import requests # Make a get request to get the JSON data r = requests.get('https://jsonplaceholder.typicode.com/todos/1') # Parse the JSON data data = r.json() # Extract the data todo_id = data['id'] todo_text = data['title'] todo_completed = data['completed'] # Print the data print('Todo ID: ', todo_id) print('Todo Text: ', todo_text) print('Todo Completion Status: ', todo_completed)"},{"prompt":"Sum up all the elements of a given list in Python. my_list = [10,20,30,40]","completion":"my_list = [10,20,30,40] total = 0 for num in my_list: total += num print(\\"The sum of all elements in the list is: \\" + str(total))"},{"prompt":"Write a Python program to convert a given list of strings into a dictionary where each string is a key and its index in the list is its corresponding value.","completion":"def list_to_dict(lst): return {x:i for i,x in enumerate(lst)}"},{"prompt":"Create a new Python script that will print out the following statement: Hello, World!","completion":"print(\\"Hello, World!\\")"},{"prompt":"Create a class in Python that can access a list of numbers and performs average, median and mode operations.","completion":"class StatisticOperation(): def __init__(self, data): self.__data = data def get_average(self): total = 0.0 for elem in self.__data: total += elem return total / len(self.__data) def get_median(self): self.__data.sort() return self.__data[len(self.__data) // 2] def get_mode(self): data_map = {} best_mode = self.__data[0] mode_max_count = 0 for elem in self.__data: if elem in data_map: data_map[elem] += 1 if data_map[elem] > mode_max_count: mode_max_count = data_map[elem] best_mode = elem else: data_map[elem] = 1 return best_mode"},{"prompt":"Suggest a code improvement for the following python code to ensure that all input is valid. def get_user_info(username): query = 'SELECT * FROM users WHERE username = {}'.format(username) result = Database.execute_query(query) return resul","completion":"def get_user_info(username): query = 'SELECT * FROM users WHERE username = %s' result = Database.execute_query(query, (username,)) return result"},{"prompt":"Write a python function that takes in two positive integer numbers and generate a random number between them. min_range = 3 max_range = 7","completion":"import random def generate_random_number(min_range, max_range): return random.randint(min_range, max_range) min_range = 3 max_range = 7 random_number = generate_random_number(min_range, max_range) print(random_number)"},{"prompt":"Please generate a Python program to predict whether an email is spam or not based on a given set of features and labels. features = [0.24, 0.34, 0.37] label = spam","completion":"# Import libraries import pandas as pd from sklearn.svm import SVC # Set up data data = pd.DataFrame({ 'features': [0.24, 0.34, 0.37], 'label': ['spam'] }) # Separate data into training and testing X_train = data.drop('label', axis=1) y_train = data.label # Train the model model = SVC() model.fit(X_train, y_train) # Make predictions predictions = model.predict(X_train) # Print accuracy print(accuracy_score(y_train, predictions))"},{"prompt":"Compute the sum of the first 100 natural numbers using a function in Python.","completion":"def sum_numbers(n): \\"\\"\\" Computes the sum of the first \`n\` natural numbers \\"\\"\\" s = 0 for i in range(n): s += i+1 return s print(sum_numbers(100))"},{"prompt":"Write a Python program to classify a given dataset using naive bayes machine learning algorithm. # Input predictor variables X = [['Periodic', 'yes', 'no'], ['Routine', 'yes', 'yes'], ['Topical', 'no', 'no'], ['Topical', 'no', 'yes']] # Output target variables Y = ['severe', 'mild', 'mild', 'severe']","completion":"from sklearn.naive_bayes import GaussianNB gnb = GaussianNB() x_train = np.array(X) y_train = np.array(Y) gnb.fit(x_train,y_train) # predict new data x_new = [['Periodic', 'no', 'yes']] prediction = gnb.predict(x_new) print (\\"Predicted Value:\\", prediction[0])"},{"prompt":"Create a python class to encapsulate stacks.","completion":"class Stack: def __init__(self): # Create an empty stack self.stack = [] def push(self, item): # Push an item onto the top of the stack self.stack.append(item) def pop(self): # Pop an item off the top of the stack return self.stack.pop() def peek(self): # Get the top item off the stack return self.stack[-1] def is_empty(self): # Return true if the stack is empty return not self.stack def get_size(self): # Return the size of the stack return len(self.stack)"},{"prompt":"Write a Python code snippet to generate a random number in the range of 1 to 10, inclusive.","completion":"import random random_number = random.randint(1, 10) print(f\\"Random number between 1 and 10: {random_number}\\")"},{"prompt":"Using an AI library in Python (e.g. Scikitlearn), implement a neural network for a classification problem. Not applicable","completion":"import numpy as np from sklearn.neural_network import MLPClassifier X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]]) y = np.array([0, 1, 1, 0]) clf = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5, 2), random_state=1) clf.fit(X, y) predictions = clf.predict(X)"},{"prompt":"Can you generate a Python loop to print out each item in a given list?","completion":"myList = [\\"item1\\", \\"item2\\", \\"item3\\"] for item in myList: print(item)"},{"prompt":"Generate Python code to find the smallest and largest numbers from a list of numbers. [2, 5, 3, 8, 10, 11, 9]","completion":"# Finding smallest number list_of_nums = [2, 5, 3, 8, 10, 11, 9] smallest_num = min(list_of_nums) print('The smallest number is:', smallest_num) # Finding largest number list_of_nums = [2, 5, 3, 8, 10, 11, 9] largest_num = max(list_of_nums) print('The largest number is:', largest_num)"},{"prompt":"Generate a Python function that takes in a number as a parameter and finds its Fibonacci number. 5","completion":"def fibonacci(n): a, b = 0, 1 for i in range(n): a, b = b, a + b return a fibonacci_number = fibonacci(5) print(fibonacci_number)"},{"prompt":"Define 2 functions, one called prod() and the other called total(), using Python. prod() should return the product of two numbers, while total() should take a list of numbers as an argument and return the sum of all the numbers in the list. Not applicable","completion":"def prod(a, b): return a*b def total(mylist): sum = 0 for num in mylist: sum += num return sum"},{"prompt":"Create a python program to implement a binary search algorithm","completion":"def binary_search(arr, x): # Set the initial midpoint start = 0 end = len(arr) - 1 mid = 0 while (start<=end): mid = (start + end) // 2 # Check if x is present at mid if arr[mid] < x: start = mid + 1 # If x is greater, ignore left half elif arr[mid] > x: end = mid - 1 # If x is present at mid else: return mid # If we reach here, then the element # was not present return -1"},{"prompt":"Design a Python Program to convert a given DNA sequence into its RNA equivalent. DNA = ATCGATCG","completion":"def convert_to_rna(DNA): rna = \\"\\" # iterate through each character for char in DNA: # check character if char == \\"A\\": rna += \\"U\\" elif char == \\"T\\": rna += \\"A\\" elif char == \\"C\\": rna += \\"G\\" elif char == \\"G\\": rna += \\"C\\" return rna"},{"prompt":"Write a script in Python which takes a twodimensional array as input and finds the smallest number in the array. array = [[2,3,4], [5,6,7], [1,2,0]]","completion":"def find_smallest(array): smallest_item = array[0][0] for row in array: for item in row: if item < smallest_item: smallest_item = item return smallest_item"},{"prompt":"Create a Python class named 'Circle' that include two methods, init() and area().","completion":"class Circle: def __init__(self, radius): self.radius = radius def area(self): return 3.14 * (self.radius**2)"},{"prompt":"Generate a code snippet in Python to split a given string into substrings based on a specific delimiter. 1, 2, 3, 4","completion":"str = \\"1, 2, 3, 4\\" list = str.split(', ') print(list) # Output is ['1', '2', '3', '4']"},{"prompt":"Generate a python function that checks if the number is a valid decimal or not.","completion":"def is_valid_decimal(n): try: float(n) return True except ValueError: return False"},{"prompt":"Create a Python program to capture and store user input until the user enters quit.","completion":"userInput = input('Enter your input (or \\"quit\\" to stop): ') responses = [] while userInput != 'quit': responses.append(userInput) userInput = input('Enter your input (or \\"quit\\" to stop): ') print(responses)"},{"prompt":"Use Python to run a webscraping program and store the results in a MongoDB database. Not applicable","completion":"import requests from bs4 import BeautifulSoup import pymongo # connect to MongoDB client = pymongo.MongoClient(\\"mongodb://localhost:27017/\\") db = client[\\"my_database\\"] collection = db[\\"scraped_data\\"] # make a GET request to the website page = requests.get(\\"https://example.com/\\") # parse content of the request with BeautifulSoup soup = BeautifulSoup(page.content, 'html.parser') # store scraped data in MongoDB records = soup.find_all('div', class_= \\"example\\") for record in records: data = { 'title': record.find('h2').text, 'description': record.find('p').text } collection.insert_one(data)"},{"prompt":"What would be the best way to convert a given array to a LinkedList using Python? Array: [22, 7, 34, 15]","completion":"# Definition for singly-linked list. class ListNode: def __init__(self, val=0, next=None): self.val = val self.next = next # arrayToList() function def arrayToList(arr): # Create a reference to root root = None # Create a reference to prev node prev = None # Iterate through the given array for x in arr: # Allocate a new node in heap curr = ListNode(x) # Linked the prev node # to the current node. if prev != None: prev.next = curr # If root is None, # assign it as curr node. if root == None: root = curr # Store the current node # as prev node for next # iteration prev = curr # Return the root node of # linked list. return root # Sample array arr = [22, 7, 34, 15] # Root node reference root = arrayToList(arr) # Print the converted Linked List list_print(root)"},{"prompt":"Design a program in Python that accepts a string as input and checks whether or not it is palindrome. madam","completion":"def isPalindrome(str): for i in range(0, int(len(str)/2)): if str[i] != str[len(str)-i-1]: return False return True inputStr = 'madam' if (isPalindrome(inputStr)): print(\\"Yes\\") else: print(\\"No\\")"},{"prompt":"Write a Python script to clean a dataset containing phone numbers in different formats (e.g. (123) 4567890, 1234567890). Example phone numbers in a dataset: (800) 5551234 (032)5369222 5417664455","completion":"import re def clean_phone_number(phone_number): #remove special characters phone_number = re.sub(r'[^d]', '', phone_number) #check length if len(phone_number) != 10: return None #parse number area_code = phone_number[:3] exchange = phone_number[3:6] last_4 = phone_number[6:] return f'({area_code}) {exchange}-{last_4}' phone_numbers = ['(800) 555-1234','(032)536-9222', '541-766-4455'] formatted_numbers = [] #clean the phone numbers for number in phone_numbers: formatted_number = clean_phone_number(number) if formatted_number is not None: formatted_numbers.append(formatted_number) print(formatted_numbers) #output: ['(800) 555-1234', '(032) 536-9222', '(541) 766-4455']"},{"prompt":"Given a list of strings, write a python program to count the frequencies of each of the strings and return a list of tuples containing the string and its frequency. strings = ['apple', 'banana', 'apple', 'orange']","completion":"def count_frequencies(strings): frequencies = {} for string in strings: if string in frequencies: frequencies[string] += 1 else: frequencies[string] = 1 return [(string, frequency) for string, frequency in frequencies.items()]"},{"prompt":"Edit the following code to make it faster by taking advantage of multiple threads in python. import time def do_something(seconds): print(Sleeping for {} seconds.format(seconds)) time.sleep(seconds) start = time.perf_counter() do_something(1) do_something(1) do_something(1) do_something(1) finish = time.perf_counter() print(f'Finished in {round(finishstart, 2)} second(s)')","completion":"import time import threading def do_something(seconds): print(\\"Sleeping for {} seconds\\".format(seconds)) time.sleep(seconds) start = time.perf_counter() t1 = threading.Thread(target=do_something, args=[1]) t2 = threading.Thread(target=do_something, args=[1]) t3 = threading.Thread(target=do_something, args=[1]) t4 = threading.Thread(target=do_something, args=[1]) t1.start() t2.start() t3.start() t4.start() t1.join() t2.join() t3.join() t4.join() finish = time.perf_counter() print(f'Finished in {round(finish-start, 2)} second(s)')"},{"prompt":"Generate a Python program to print the numbers from 1 to 10 using a for loop.","completion":"for num in range(1, 11): print(num)"},{"prompt":"Generate a python code snippet to reverse a given list.","completion":"def reverse_list(list): return list[::-1]"},{"prompt":"Automate the process of building a Python program that takes in the names of two people as input, and outputs the age difference between them. John Doe, Jane Doe","completion":"# Program to compute age difference between two persons # Input name1 = input('Enter name of first person: ') name2 = input('Enter name of second person: ') # Compute age difference ages = { 'John Doe': 35, 'Jane Doe': 27 } diff = abs(ages[name1] - ages[name2]) # Output print(f'The age difference between {name1} and {name2} is {diff}.')"},{"prompt":"Write a python program that calculates the average age of a group of people. names = ['Bob', 'Jack', 'John', 'David'] ages = [12, 27, 45, 16]","completion":"def calculate_average_age(names, ages): result = 0 for i in range(len(names)): result += ages[i] return round(result / len(names), 2) names = ['Bob', 'Jack', 'John', 'David'] ages = [12, 27, 45, 16] print(calculate_average_age(names, ages))"},{"prompt":"Create a python script to categorize a given text into three categories: positive, negative and neutral.","completion":"import re def categorize_text(text): \\"\\"\\"Categorizes the given text into positive, negative or neutral.\\"\\"\\" text = text.lower() if re.search(r\\"b(happy|glad|fun)b\\", text): return \\"positive\\" elif re.search(r\\"b(sad|angry|fearful)b\\", text): return \\"negative\\" else: return \\"neutral\\""},{"prompt":"Build a web scraping function in Python Scrapy that retrieves data from a given web page. URL of a web page","completion":"import scrapy class DataSpider(scrapy.Spider): name = 'DataSpider' start_urls = [url] def parse(self, response): data = response.css('body').getall() yield { 'data': data }"},{"prompt":"Create a program in Python that reads a string from standard input and prints the frequency of each letter in the input. Hello World!","completion":"from collections import Counter def frequency(string): count = Counter() for letter in string: count[letter] += 1 return count if __name__ == \\"__main__\\": input_string = input(\\"Enter the string: \\") count = frequency(input_string) print(count)"},{"prompt":"Develop a function in Python to accept a positive integer as input and print its reverse.","completion":"def reverse_integer(number): reversed_number = 0 while number > 0: remainder = number % 10 reversed_number *= 10 reversed_number += remainder number //= 10 return reversed_number number = 12345 print(\\"Reversed Number:\\", reverse_integer(number))"},{"prompt":"Create a program in Python to to compute the sum of all the numbers present in a given string. string = 'The sum of 5 and 9 is 14'","completion":"def sum_of_numbers_in_string(string): number_list = [] for word in string.split(' '): if word.isdigit(): number_list.append(int(word)) return sum(number_list)"},{"prompt":"Create a TimeTracker class that extends Thread. Initialize the class with _stat, _categories, _activities, and _configuration parameters. The class has a run method that tracks user activities. If the learning mode is active, only append an activity. If the last activity is the same, just actualize the end time. If it's a new activity, actualize the lastActivity and append the new activity. The class has a stop method that stops the tracking system. The class has a getCorrectCategory method that finds out the category where the activity belongs to. If the activity isn't in any category, set the category to 'OTHER'. If the activity is in exactly one category, set the category to that category's name. If the activity is in more than one category, ask the user where the activity belongs to. The class has an askUser method that creates a notification and asks the user where the activity belongs to. The class has a getUserAnswer method that processes the user's answer and delegates the result.","completion":"#!/usr/bin/env python2.7 #-*- coding: UTF-8 -*- from category import Category from gi.repository import Wnck, Gdk, Gtk, GObject, Notify, GLib from activityrecord import ActivityRecord from threading import Thread, Event from time import sleep, time import copy class TimeTracker(Thread): \\"\\"\\"Core module of this project. It's running in separated thread to not block GUI.\\"\\"\\" stopthread = Event() track = Event() mode = Event() def __init__(self, _stat, _categories, _activities, _configuration): Thread.__init__(self) self.categories = _categories self.activities = _activities self.stat = _stat self.lastActivity = ActivityRecord() self.screen = Wnck.Screen.get_default() self.n = Notify.Notification() self.tmpName = '' if _configuration.getValue('state'): self.track.set() else: self.track.clear() if _configuration.getValue('mode'): self.mode.set() else: self.mode.clear() def run(self): \\"\\"\\"Start tracking user activities\\"\\"\\" while not self.stopthread.isSet(): sleep(1) \\"\\"\\"Skip tracking if it's disabled\\"\\"\\" if not self.track.isSet(): continue Gdk.threads_enter() GObject.idle_add(self.screen.force_update) active_window = self.screen.get_active_window() \\"\\"\\"Skip if there is no active window\\"\\"\\" if active_window == None: Gdk.threads_leave() continue appName = active_window.get_application().get_name() appPid = active_window.get_application().get_pid() \\"\\"\\"If the learning mode is activive, only append an activity\\"\\"\\" if self.mode.isSet(): self.activities.addActivity(appName) Gdk.threads_leave() continue if self.lastActivity.getActivity().getPid() == appPid: \\"\\"\\"Still the same activity, just actualize the end time\\"\\"\\" self.lastActivity.setEndTime(time()) else: \\"\\"\\"New activity, actualize the lastActivity and append the new activity\\"\\"\\" if self.lastActivity.getActivity().getPid() != 0: tmp = copy.deepcopy(self.lastActivity) self.stat.appendActivityRecord(tmp) self.activities.addActivity(tmp.getActivity().getName()) print \\"DBG: Zmena aktivity! Ulozena aktivita %s (%s)\\" % (tmp.getActivity().getName(), tmp.getCategory()) self.lastActivity.getActivity().setName(appName) self.lastActivity.getActivity().setPid(appPid) self.lastActivity.setCategory('OTHER') self.getCorrectCategory() self.lastActivity.setStartTime(time()) self.lastActivity.setEndTime(time()) Gdk.threads_leave() if self.track.isSet() and not self.mode.isSet(): tmp = copy.deepcopy(self.lastActivity) self.stat.appendActivityRecord(tmp) print \\"DBG: Ulozena aktivita %s (%s)\\" % (tmp.getActivity().getName(), tmp.getCategory()) \\"\\"\\"Store all records to file to make them persistent\\"\\"\\" self.stat.storeRecords() self.activities.storeActivities() def stop(self): \\"\\"\\"Stop the tracking system, uses id stored in initialization\\"\\"\\" self.stopthread.set() def getCorrectCategory(self, _activity = None): \\"\\"\\"Find out category where the activity belongs to\\"\\"\\" if _activity == None: _activity = self.lastActivity.getActivity() activityCategories = self.categories.getContainingCategories(_activity) if len(activityCategories) == 0: \\"\\"\\"The activity isn't in any category\\"\\"\\" self.lastActivity.setCategory('OTHER') elif len(activityCategories) == 1: \\"\\"\\"The activity is in exactly one category\\"\\"\\" self.lastActivity.setCategory(activityCategories[0].name) else: \\"\\"\\"The activity is in more than one category. The Waktu needs to ask user.\\"\\"\\" lastOccurrence = self.stat.getLastOccurrence(_activity.getName()) if lastOccurrence == None or (time() - lastOccurrence.getEndTime()) > 600 : # 10 minutes is the default time to remember users choice self.askUser(_activity, activityCategories) else: self.lastActivity.setCategory(lastOccurrence.getCategory()) def askUser(self, _activity, _categories): \\"\\"\\"Creates a notification and asks a user where the activity belongs to\\"\\"\\" if not Notify.is_initted(): Notify.init('Waktu') self.n.clear_hints() self.n.clear_actions() self.n.set_property('summary','Kam patří aktivita %s?' % _activity.getName()) self.n.set_property('body', 'Zdá se, že tuto aktivitu máte zvolenou ve více kategoriích. Zvolte, prosím, níže jednu, do které spadá tato aktivita práve teď.') self.n.set_property('icon_name','dialog-question') self.n.set_urgency(Notify.Urgency.NORMAL) self.n.set_timeout(Notify.EXPIRES_NEVER) self.n.set_hint(\\"resident\\", GLib.Variant('b',True)) for cat in _categories: self.n.add_action(cat.name, cat.name, self.getUserAnswer, _activity, None) self.n.add_action(\\"OTHER\\", \\"Jinam\\", self.getUserAnswer, _activity, None) self.n.show() def getUserAnswer(self, n, _action, _data): \\"\\"\\"Process user answer and delegate result\\"\\"\\" n.close() if self.lastActivity.getActivity().getName() == _data.getName(): \\"\\"\\"The focused app is still the same\\"\\"\\" self.lastActivity.setCategory(_action) else: \\"\\"\\"There is another activity, need to find it backwards\\"\\"\\" self.stat.getLastOccurrence(_data.getName()).setCategory(_action)"},{"prompt":"Play a game of TicTacToe in Python.","completion":"# Define a 3x3 board board = [['_','_','_'], ['_','_','_'], ['_','_','_']] # Function to display the board def print_board(board): for i in range(3): for j in range(3): print(board[i][j] + \\" \\", end=\\"\\") print() # Define a player A, who plays a piece 'X' at location (0,0) board[0][0] = 'X' # Print the board print_board(board)"},{"prompt":"Write a Python function to calculate the average grade for a given list of student grades. [90, 99, 75, 72, 85]","completion":"def average_grade(grades): total = 0 for grade in grades: total += grade return total / len(grades) >>> average_grade([90, 99, 75, 72, 85]) 84.2"},{"prompt":"Optimize the following Python code to minimize memory consumption and maximize speed. def setup_list(): my_list = [] for i in range(10000): my_list.append([0] * 10000) return my_l","completion":"def setup_list(): my_list = [[0] * 10000 for _ in range(10000)] return my_list"},{"prompt":"Construct a Python program to classify the data given. Classify the following data points into two categories: red and green [1, 2, 3, 4, 5, 6, 7]","completion":"def classify_data(data_points): classified_data = [] for point in data_points: if point % 2 == 0: classified_data.append('green') else: classified_data.append('red') return classified_data"},{"prompt":"Write an optimization algorithm in Python to maximize the profit of a company given a set of constraints. Maximize Profit Subject to: 1.Product A: 5 < x1 ≤ 10 2.Product B: 0 < x2 ≤ 5 3.Product C: 0 < x3 ≤ 15 Profit=10x1 +25x2 +20x3","completion":"from pulp import * # Define problem model = LpProblem(\\"Maximize Profit\\", LpMaximize) # Define Decision Variables x1 = LpVariable(\\"x1\\", 5, 10) x2 = LpVariable(\\"x2\\", 0, 5) x3 = LpVariable(\\"x3\\", 0, 15) # Objective function model += 10 * x1 + 25 * x2 + 20 * x3 # Constraints model += x1 + x2 <= 10 model += x2 + x3 <= 15 # Solve model model.solve() # Output results print(\\"Solution:\\") for variable in model.variables(): print(\\"{} = {}\\".format(variable.name, variable.varValue))"},{"prompt":"Write a python program that prints the number of days in a month.","completion":"# Function to calculate number of days in a month def num_days_in_month(month, year): # List of all months months = [\\"January\\", \\"February\\", \\"March\\", \\"April\\", \\"May\\", \\"June\\", \\"July\\", \\"August\\", \\"September\\", \\"October\\", \\"November\\", \\"December\\"] # List of all number of days in a month num_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] # Check if the year is a leap year if (year % 400 == 0) or ((year % 4 == 0) and (year % 100 != 0)): num_of_days[1] = 29 # Return the number of days return num_of_days[months.index(month)] # Driver Code month = \\"May\\" year = 2020 print(\\"Number of days in {} {} are {}\\".format(month, year, num_days_in_month(month, year))) # Output: # Number of days in May 2020 are 31"},{"prompt":"Build a Python script for replacing punctuation with spaces.","completion":"def remove_punctuation(s): punctuation = \\"\\"\\"!\\"#%&'()*+, -./:;<=>?@[]^_\`{|}~\\"\\"\\" s_no_punct = \\"\\" for ch in s: if ch not in punctuation: s_no_punct += ch else: s_no_punct += \\" \\" return s_no_punct s = \\"Hello, world!\\" s_no_punct = remove_punctuation(s) print(s_no_punct) # Output: \\"Hello world \\""},{"prompt":"Create a Python code to simulate a flip of a coin.","completion":"import random rand_num = random.randint(0,1) if rand_num == 0: print(\\"Heads\\") else: print(\\"Tails\\")"},{"prompt":"Build a python program to classify sentiment of a given sentence. I am feeling really good today!","completion":"import nltk def classify_sentiment(sentence): # Tokenize the sentence tokens = nltk.word_tokenize(sentence) # Tag the tokens tagged_tokens = nltk.pos_tag(tokens) # Define our sentiment classifier sentiment_classifier = nltk.NaiveBayesClassifier.train([('positive', 'Positive'), ('negative', 'Negative'), ('neutral', 'Neutral')]) # Classify the sentiment of the sentence sentiment = sentiment_classifier.classify(dict(tagged_tokens)) return sentiment sentence = 'I am feeling really good today!' classified_sentiment = classify_sentiment(sentence) print(\\"The sentiment of the sentence '{}' is: {}\\".format(sentence, classified_sentiment))"},{"prompt":"Create an AWS Lambda function in Python to process a JSON webhook request and store the data into an Amazon S3 bucket. { data: example data }","completion":"import json import boto3 def lambda_handler(event, context): # parse the payload data = json.loads(event) # store to Amazon S3 s3 = boto3.client('s3') s3.put_object( Bucket='my-bucket', Key='data.json', Body=json.dumps(data) ) # return a response return { 'statusCode': 200, 'body': json.dumps('Data stored successfully') }"},{"prompt":"magine a customer service application that is required to send customer feedback emails 5 days after customer services are opened. Which language / framework would you use to develop this application?","completion":"I would use a framework such as Python with the Django web framework as it is a powerful and easy to use web framework that has an excellent ecosystem of tools, libraries and functionalities. I would also use a library such as Celery which is a Python library for scheduling tasks and background jobs. This library allows you to schedule the emails to be sent at a specific point in time and this is the perfect use case."},{"prompt":"Write a web scraper in Python for extracting the text of all articles linked on a given URL. URL: https://en.wikipedia.org/wiki/Machine_learning","completion":"import requests from bs4 import BeautifulSoup # Retrieve the webpage url = 'https://en.wikipedia.org/wiki/Machine_learning' response = requests.get(url) # Parse the page soup = BeautifulSoup(response.text, 'html.parser') # Get the links links = soup.find_all('a') # Get the text of all articles for link in links: article_url = link.get('href') if article_url.startswith('/wiki/'): article_response = requests.get('https://en.wikipedia.org' + article_url) article_soup = BeautifulSoup(article_response.text, 'html.parser') print(article_soup.find('div', id='mw-content-text').text)"},{"prompt":"mplement a Naive Bayes algorithm in Python to classify comments into spam and nonspam categories. Not applicable","completion":"# Import Libraries import numpy as np # Build dictionary containing necessary data words = { 'come': ['spam', 'ham'], 'free': ['spam', 'ham'], 'money': ['spam', 'ham'], 'here': ['spam', 'ham'], 'win': ['spam', 'ham'], 'now': ['spam', 'ham'], 'urgent': ['spam', 'ham'], 'discount': ['spam', 'ham'], 'buy': ['spam', 'ham'], 'promo': ['spam', 'ham'], } # Number of Spam and non-Spam words spam_words = 0 ham_words = 0 #Calculate number of words in each class for key in words.keys(): if 'spam' in words[key]: spam_words += 1 if 'ham' in words[key]: ham_words += 1 # Probabilities of each class P_spam = spam_words / (spam_words + ham_words) P_ham = ham_words / (spam_words + ham_words) # Probability of each word in each class words_spam_prob = [0] * len(words) words_ham_prob = [0] * len(words) i=0 for key in words.keys(): if 'spam' in words[key]: words_spam_prob[i] = words[key].count('spam') / spam_words if 'ham' in words[key]: words_ham_prob[i] = words[key].count('ham') / ham_words i += 1 # Function to classify spam and non-spam def classify(comment): # Split comment into words words_in_comment = comment.split() # Calculate probability of comment being spam p_spam_comment = np.log(P_spam) p_ham_comment = np.log(P_ham) # Iterate through words in comment and calculate probability of comment being each class for word in words_in_comment: if word in words: p_spam_comment += np.log(words_spam_prob[list(words.keys()).index(word)]) p_ham_comment += np.log(words_ham_prob[list(words.keys()).index(word)]) # Determine and return class of comment if p_spam_comment > p_ham_comment: return 'spam' else: return 'ham'"},{"prompt":"Create a Python program to detect cycles in a given array. array = [2, 4, 5, 1, 7, 1, 5]","completion":"def is_cycle_detected(array): # create a set to store visited indices visited = set() for i, num in enumerate(array): # check if num has been visited if i in visited or num not in visited: return False # mark the index as visited visited.add(i) return True"},{"prompt":"Create a Python program to find all combinations of three numbers that add up to a given sum. targetSum = 7","completion":"def threeNumSum(arr, targetSum): combinations = [] for i in range(len(arr)): for j in range(i+1, len(arr)): for k in range(j+1, len(arr)): if arr[i] + arr[j] + arr[k] == targetSum: combination = [arr[i], arr[j], arr[k]] combinations.append(combination) return combinations arr = [2, 3, 4, 5, 6] targetSum = 7 print(threeNumSum(arr, targetSum))"},{"prompt":"Write Python code to create a JSON object from a given list. data = [1, 2, 3, 4, 5]","completion":"import json data = [1, 2, 3, 4, 5] data_json = json.dumps(data) print(data_json)"},{"prompt":"Using a provided datasets, write a Python program to create a predictive model using a Random Forest algorithm. Dataset: This is a csv file containing 1000 records of patient information such as age, gender, smoking status, and blood pressure.","completion":"import pandas as pd from sklearn.ensemble import RandomForestRegressor from sklearn.model_selection import train_test_split # read the data from the dataset df = pd.read_csv('patient-data.csv') # create the features and labels X = df[['age', 'gender', 'smoker', 'bloodPressure']] y = df['target'] # split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # train the Random Forest model model = RandomForestRegressor(n_estimators=100, max_depth=3) model.fit(X_train, y_train) # score the model on the test set score = model.score(X_test, y_test) print('Model Score: %.3f' % score)"},{"prompt":"Explain the builtin sorting function of the Python language.","completion":"The built-in sorting function of Python is called \\"sorted()\\". The sorted() function takes an iterable object as an argument and returns a sorted list. By default, it sorts the elements of the iterable object in ascending order. However, it also provides an optional argument for specifying the desired sorting order (e.g. descending order) as well as different sorting algorithms (e.g. insertion sort, selection sort, bubble sort). Additionally, it can be used to sort both numbers and strings."},{"prompt":"Create a Python program to generate a new dictionary from an existing dictionary given a set of keypair values. dct = { name: John, age: 20, species: Human } desired_pairs = {name: Alex, species: AI}","completion":"dct = { \\"name\\": \\"John\\", \\"age\\": 20, \\"species\\": \\"Human\\" } desired_pairs = {\\"name\\": \\"Alex\\", \\"species\\": \\"AI\\"} # Generate the new dictionary new_dct = {**dct, **desired_pairs} print(new_dct) # Output: {'name': 'Alex', 'age': 20, 'species': 'AI'}"},{"prompt":"Generate a python script which calculates the average of ten numbers stored in a list. [4, 6, 8, 10, 11, 12, 22, 34, 36, 37]","completion":"my_list = [4, 6, 8, 10, 11, 12, 22, 34, 36, 37] # calculate sum of the list numbers sum_numbers = sum(my_list) # length of the list length = len(my_list) # average of the list average = sum_numbers/length # print the result print(average)"},{"prompt":"Create a program in Python to compute and print the factorial of a given number. Number: 5","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) num = 5 print(\\"The factorial of\\", num, \\"is\\", factorial(num))"},{"prompt":"Design a function in Python to check if a string starts with a certain substring.","completion":"def starts_with(string, substring): if string[:len(substring)] == substring: return True else: return False"},{"prompt":"Create a loop in Python to print the following sentence 5 times. I love coding!","completion":"for i in range(5): print(\\"I love coding!\\")"},{"prompt":"Create a class in Python that implements the Comparable interface.","completion":"class Comparable: def __init__(self, value): self.value = value def compareTo(self, b): if self.value > b.value: return 1 elif self.value < b.value: return -1 else: return 0"},{"prompt":"Compose a program in Python to generate a list of prime numbers in the range of 250.","completion":"def generate_prime_list(max_num): prime_list = [] for number in range(2, max_num + 1): for divider in range(2, number): if number % divider == 0: break else: prime_list.append(number) return prime_list prime_list = generate_prime_list(50) print(prime_list)"},{"prompt":"Optimize the following Python program that shows the odd numbers in a given range for i in range(1, 20): if i % 2 != 0: print(i)","completion":"for i in range(1, 20, 2): print(i)"},{"prompt":"Write a web scraper in Python to retrieve data about a list of products and prices from an online store. List of 10 produc","completion":"import requests from bs4 import BeautifulSoup products = ['Product 1', 'Product 2', 'Product 3', 'Product 4', 'Product 5', 'Product 6', 'Product 7', 'Product 8', 'Product 9', 'Product 10'] for product in products: url = f'http://www.example.com/{product}' response = requests.get(url) html = response.content soup = BeautifulSoup(html, 'html.parser') # retrieve product and price title_element = soup.find('h1', {'class': 'title'}) title = title_element.text price_element = soup.find('span', {'class': 'price'}) price = price_element.text print(title + ' - ' + price)"},{"prompt":"Create a basic HTTP endpoint in Python that returns multiple parameters as a dictionary.","completion":"@app.route('/multiple_params', methods=['GET']) def multiple_params(): name = request.args.get('name') age = request.args.get('age') city = request.args.get('city') response = { 'name': name, 'age' : age, 'city': city } return jsonify(response)"},{"prompt":"Create an objectoriented Python program to represent a simple calendar. The program should include the following classes: Calendar, Event, and Date. Not applicable","completion":"class Calendar: def __init__(self): self.events = [] def add_event(self, event): self.events.append(event) def get_events(self, date): return [event for event in self.events if event.date == date] class Event: def __init__(self, date, title, description): self.date = date self.title = title self.description = description def __str__(self): return f'{self.title} on {self.date}' class Date: def __init__(self, year, month, day): self.year = year self.month = month self.day = day def __str__(self): return f'{self.month}/{self.day}/{self.year}'"},{"prompt":"Design a logistic regression model in Python to predict the class of a given point. X = [0.3, 0.7, 0.8] y = [0, 1, 0]","completion":"from sklearn.linear_model import LogisticRegression model = LogisticRegression() model.fit(X, y) def predict_class(X): pred = model.predict([X]) return pred"},{"prompt":"Write a function in Python to compute the sum of the given list of numbers. [1, 24, 47, 98, 22, 45]","completion":"def sum_list(nums): sum = 0 for n in nums: sum += n return sum result = sum_list([1, 24, 47, 98, 22, 45]) print(\\"Sum of the list is\\", result)"},{"prompt":"Create a Python program to sort the elements of a list in descending order (largest value first). numbers = [1, 7, 25, 8, 14]","completion":"numbers = [1, 7, 25, 8, 14] # Sort the list in descending order numbers.sort(reverse=True) # Print the sorted list print(numbers) # Output [25, 14, 8, 7, 1]"},{"prompt":"Create a generic bubble sort function in Python.","completion":"def bubbleSort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j]"},{"prompt":"Design an AIpowered app that can assist users with programming queries. The app should be able to search for answers to programmingrelated questions from a database of questions/answers and provide relevant results to the user. Not applicable","completion":"import re from collections import defaultdict # define the main function, which handles user input def main(): # prompt the user for input search_query = input(\\"Please enter your programming query: \\") # split the query into words query_words = search_query.split(' ') # save the words in a list query_words_list = [] # remove stopwords for word in query_words: if word not in stopwords: query_words_list.append(word) # select a database of questions and answers database = questions_and_answers # create an empty set for storing results result = set() # loop over the words to find related questions for word in query_words_list: if word in database.keys(): result = result | database[word] #display final results print(\\"Questions related to your query: \\") for result in result: print(result) # store the questions and answers database questions_and_answers = defaultdict(set) # initialise the questions_and_answers database questions_and_answers['Python'] = { 'What is Python?', 'What are the advantages of using Python?' } questions_and_answers['Arrays'] = { 'How do you create an empty array in Python?', 'What is an array in programming?' } # store the stopwords stopwords = { 'a', 'an', 'the', } # call the main function if __name__== \\"__main__\\": main()"},{"prompt":"Write a Python program to scrape the HTML content of a website and extract all links. Website URL: http://example.com","completion":"import requests from bs4 import BeautifulSoup url = 'http://example.com' r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') links = [link.get('href') for link in soup.find_all('a')] print(links)"},{"prompt":"Translate the following code from Python to JavaScript def calculate_area(width, height): return width * heigh","completion":"function calculateArea(width, height) { return width * height; }"},{"prompt":"Design a class in Python that can be used to show the status of an order and print out the details in the console.","completion":"class OrderStatus: def __init__(self, status): self.status = status def show_status(self): print(f\\"Order Status: {self.status}\\")"},{"prompt":"Create an algorithm using Python that finds the maximum and minimum in a list of numbers. [9,6,7,11,14,5]","completion":"def find_max_min(mylist): max_num = mylist[0] min_num = mylist[0] for num in mylist: if num > max_num: max_num = num if num < min_num: min_num = num return [min_num, max_num] list1 = [9,6,7,11,14,5] print(find_max_min(list1)) #[5, 14]"},{"prompt":"Create an algorithm in Python to find the square root of a positive number?? num = 16","completion":"def calculate_square_root(num): # Taking a square root of number return num ** 0.5 # Driver Code num = 16 print(calculate_square_root(num)) # Output 4.0"},{"prompt":"Develop a python program to print allPrime Numbers between 1 and 50.","completion":"# Function to check prime or not def isPrime(n): result = True # check if number is divisible from 2 to n-1 or not for i in range(2, n): if n%i == 0: result = False break return result # printing prime numbers between 1 to 50 for n in range(1, 51): if isPrime(n): print(n)"},{"prompt":"We have a list of student records with the following format: name, age and marks. Write a Python program to sort the records in descending order based on marks. records = [ [Bob, 30, 80.50], [James, 32, 65.78], [Cameron, 27, 97.89], [Grace, 24, 76.67] ]","completion":"def sortRecords(records): sortedRecords = sorted(records, key = lambda x: x[2], reverse=True) return sortedRecords records = [ [\\"Bob\\", 30, 80.50], [\\"James\\", 32, 65.78], [\\"Cameron\\", 27, 97.89], [\\"Grace\\", 24, 76.67] ] sortedRecords = sortRecords(records) print(\\"Sorted records: \\", sortedRecords)"},{"prompt":"Create a function in Python to find all unique combinations of numbers from a given list. [1, 2, 3, 4]","completion":"def find_unique_combos(lst): combos = [] for i in range(len(lst)): for j in range(i+1, len(lst)+1): combos.append(lst[i:j]) return list(set(tuple(x) for x in combos)) print(find_unique_combos([1,2,3,4]))"},{"prompt":"Create a Python script to filter a dataset of customer reviews. The script should take a dataframe of customer reviews (with columns for customer, product, rating, and review content) as input, and should output a subset of reviews that have a rating of 4 or more stars. import pandas as pd df = pd.DataFrame( {'customer': ['John', 'Kate', 'Sarah', 'Daniel', 'Edward', 'Angela', 'Steve', 'Michael'], 'product': ['Widget', 'Widget', 'Widget', 'Widget', 'Phone', 'Phone', 'Phone', 'Phone'], 'rating': [5, 4, 3, 4, 5, 3, 3, 5], 'content': ['Loved this product', 'I was satisfied', 'Not great', 'Generally liked it', 'Didn't like it', 'Terrible', 'It was okay', 'Loved it!'] })","completion":"filtered_df = df[df['rating'] >= 4] filtered_df customer product rating content 0 John Widget 5 Loved this product 1 Kate Widget 4 I was satisfied 3 Daniel Widget 4 Generally liked it 4 Edward Phone 5 Didn't like it 7 Michael Phone 5 Loved it!"},{"prompt":"Generate a python program to substitute username with an input's username. The user named username will receive a special price.","completion":"def substitute_username(input): output = input.replace(\\"username\\", input.username) return output"},{"prompt":"Write a Python script that takes a paragraph as input and prints the unique words in it. This is a sample paragraph.","completion":"paragraph = \\"This is a sample paragraph.\\" # split the string into words words = paragraph.split() # sort the words alphabetically words.sort() # remove duplicates unique_words = [] for word in words: if word not in unique_words: unique_words.append(word) # print the unique words print(\\", \\".join(unique_words))"},{"prompt":"Write a Python program to calculate the area of a circle when a user inputs its radius. Radius = 10","completion":"def calculate_area_circle(radius): pi = 3.14 area = pi * (radius * radius) return area # Output print(\\"Area of circle is: \\", calculate_area_circle(10))"},{"prompt":"Create a Python script for cleaning up text and removing nonalphabetic characters. This text contains some nonalphabetic characters, like %.","completion":"import re text = \\"This text contains some non-alphabetic characters, like “%.”\\" clean_text = re.sub(r'[^a-zA-Z ]', '', text) print(clean_text) # Output: This text contains some alphabetic characters"},{"prompt":"Develop an ML model in Python to detect anomalies in a time series dataset.","completion":"import pandas as pd import numpy as np from sklearn.ensemble import IsolationForest # Load the data data = pd.read_csv(\\"data.csv\\") # Create training and test sets x_train, x_test = train_test_split(data, test_size=0.2) # Train the Isolation Forest isolation_forest = IsolationForest(random_state=0).fit(x_train) # Make predictions preds = isolation_forest.predict(x_test) # Detect and mark anomalies anomalies_index = np.where(preds == -1)[0]"},{"prompt":"Design a Python class to represent a TicTacToe game board.","completion":"class TicTacToe: def __init__(self): self.board = [['-' for x in range (3)] for y in range(3)] def print_board(self): for row in range(3): print(' | '.join(self.board[row])) def make_move(self, x,y, mark): self.board[x][y] = mark"},{"prompt":"Design a function in Python that takes a string, replaces all occurrences of the word dog with cat and returns the modified string. I love my dog","completion":"def replace_word(string): modified_string = string.replace(\\"dog\\", \\"cat\\") return modified_string result = replace_word(\\"I love my dog\\") print(result)"},{"prompt":"Develop a python program for the following task Write a function to calculate the sum of the first n natural numbers.","completion":"def sum_n(n): result = (n * (n+1)) / 2 return result n = 10 sum = sum_n(n) print(sum)"},{"prompt":"Optimize an existing Python script to run as efficiently as possible. def spam(divideBy): return 42 / divideBy print(spam(2)) print(spam(12)) print(spam(0))","completion":"def spam(divideBy): try: return 42 / divideBy except ZeroDivisionError: print('Error: Invalid argument.') print(spam(2)) print(spam(12)) print(spam(0))"},{"prompt":"Design a REST API in Python that allows users to get and post data on a table. Not applicable","completion":"from flask import Flask from flask_restful import Resource, Api app = Flask(__name__) api = Api(app) class TableData(Resource): def get(self): # Get data from table return {'data': 'formatted data'} def post(self): # Post data to table return {'message': 'Data posted successfully'} api.add_resource(TableData, '/table') if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Design a Python code solution to reverse a string with a given input. string = Hello world!","completion":"def reverse_string(string): return string[::-1] string = \\"Hello world!\\" print(reverse_string(string))"},{"prompt":"Write a Python program to display a list of all the prime numbers between a given range. Not applicable","completion":"def prime_nums_in_range(start, end): prime_list = [] for num in range(start, end + 1): if num > 1: # check for cases greater than 1 for i in range(2, num): if (num % i) == 0: break else: prime_list.append(num) return prime_list start = 2 end = 20 print(prime_nums_in_range(start, end)) # Output: [2, 3, 5, 7, 11, 13, 17, 19]"},{"prompt":"Write a web scraping program using Python to extract the full transcript of the school's website. url = https://myuniversity.edu/transcripts/cs123","completion":"# imports import requests from bs4 import BeautifulSoup # define variables url = \\"https://myuniversity.edu/transcripts/cs-123\\" # fetch the content from url page = requests.get(url) # parse html soup = BeautifulSoup(page.text, 'html.parser') # find the transcript data transcript_data = soup.find('div', attrs={'class': 'transcript'}) # extract the text full_transcript = transcript_data.text # print the transcript print(full_transcript)"},{"prompt":"Create a Python script that servers a realtime notifications to subscribed users. Not applicable","completion":"import time import websocket # Server script to send realtime notifications to subscribed users # Connect to websocket host ws = websocket.WebSocket() ws.connect(\\"ws://localhost:8888/\\") # handle incoming messages while True: msg = ws.recv() print(f\\"Notification to users: {msg}\\") # broadcast the message to subscribed users ws.send(msg) # wait for 5 seconds time.sleep(5)"},{"prompt":"Create a code that would prompt the user for a given number and print out the Python equivalent of the given number. number = 10","completion":"def user_number(number): number_py = '{}'.format(number) print(\\"The Python equivalent of {} is {}\\".format(number, number_py))"},{"prompt":"Design a Python program to implement the Bubble Sort algorithm. [1, 8, 4, 6, 2, 5]","completion":"def bubble_sort(arr): for i in range(len(arr) - 1): for j in range(len(arr) - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr result = bubble_sort([1, 8, 4, 6, 2, 5]) print(result)"},{"prompt":"Create an AI chatbot that uses natural language processing in Python. Not applicable","completion":"#import libraries from chatterbot import ChatBot from chatterbot.trainers import ChatterBotCorpusTrainer from chatterbot.trainers import ListTrainer # Create a new chatbot named Charlie chatbot = ChatBot('Charlie') # Create a new trainer for the chatbot trainer = ChatterBotCorpusTrainer(chatbot) # Train the chatbot based on the english corpus trainer.train(\\"chatterbot.corpus.english\\") # Train based on english greetings corpus trainer.train(\\"chatterbot.corpus.english.greetings\\") # Train based on the english conversations corpus trainer.train(\\"chatterbot.corpus.english.conversations\\") # Get a response to an input statement response = chatbot.get_response(\\"Hello, how are you today?\\") print(response)"},{"prompt":"Translate this JavaScript code to Python. function sum(nums) { let result = 0 for(let i = 0; i < nums.length; i++) { result += nums[i] } return result }","completion":"def sum(nums): result = 0 for i in range(len(nums)): result += nums[i] return result"},{"prompt":"Generate a program that searches if an element exists in a given array arr = [1, 2, 3, 4, 5]","completion":"# Python 3 program to check if an element # exists in the given array # function to check if an element exists in the array def search(arr, item): for element in arr: if element == item: return True return False # Driver code arr = [1, 2, 3, 4, 5] # Function Call item = 5 if search(arr,item): print(\\"Element is present\\") else: print(\\"Element is not present\\")"},{"prompt":"Edit an existing Python program to add an intelligent chatbot feature. # Chatbot program for customer service def chatbot(): print(Welcome to our customer service chatbot! How may I help you today?) pass chatbot()","completion":"# Chatbot program for customer service import random greetings = [\\"Hi, how may I help you?\\", \\"Hi there, how can I help you today?\\", \\"Hi, how can I be of assistance?\\"] def chatbot(): print(\\"Welcome to our customer service chatbot! How may I help you today?\\") while True: userInput = input() if userInput.lower() == \\"quit\\": break else: message = random.choice(greetings) print(message) chatbot()"},{"prompt":"Can you create an optimization algorithm in Python to find the best combination of elements from two lists? list1 = [1, 2, 3, 4]; list2 = [5, 6, 7, 8];","completion":"def optimize(list1, list2): best_combination = (0, 0) best_value = -float('inf') for x in list1: for y in list2: value = x + y if value > best_value: best_value = value best_combination = (x, y) return best_combination list1 = [1, 2, 3, 4] list2 = [5, 6, 7, 8] best_combination = optimize(list1, list2) print(best_combination)"},{"prompt":"Develop a Python program that calculates the median of an array of numbers.","completion":"def median(numbers): numbers.sort() if len(numbers) % 2 == 0: return (numbers[len(numbers)//2] + numbers[(len(numbers)//2)-1]) / 2.0 else: return numbers[len(numbers)//2]"},{"prompt":"Create a function in Python that prints the first n Fibonacci numbers. 6","completion":"def fibonacci(n): fib_list = [0, 1] for i in range(2, n): fib_list.append(fib_list[i-2] + fib_list[i-1]) return fib_list[:n] fibonacci_list = fibonacci(6) print(fibonacci_list)"},{"prompt":"Create a program in Python to solve the following optimization problem. Maximize: 6x+7y+5z+2w Subject to the following constraints: • x+y+z+w <= 20 • x+2y+3z+4w >= 40 • x,y,z,w >= 0 Not applicable","completion":"# Import PuLP modeler functions from pulp import * # Create the 'prob' variable to contain the problem data prob = LpProblem(\\"Problem\\", LpMaximize) # Create problem Variables x = LpVariable(\\"x\\", lowBound=0) y = LpVariable(\\"y\\", lowBound=0) z = LpVariable(\\"z\\", lowBound=0) w = LpVariable(\\"w\\", lowBound=0) # Objective Function prob += 6 * x + 7 * y + 5 * z + 2 * w # Constraints prob += x + y + z + w <= 20 prob += x + 2 * y + 3 * z + 4 * w >= 40 # Solve the problem status = prob.solve() # Print the status of the solution print(\\"Status:\\", LpStatus[status]) # Print the value of the variables at the optimum for variable in prob.variables(): print(variable.name, \\"=\\", variable.varValue) # Print the value of the objective print(\\"Total Cost of Ingredients per can = \\", value(prob.objective))"},{"prompt":"Write code in Python using PyTorch to predict the outcome of a binary classification problem. Not applicable","completion":"import torch import torch.nn as nn # input data X = torch.tensor([[0.5, 0.4], [0.7, 0.2], [0.3, 0.1], [0.6, 0.9]]) y = torch.tensor([0, 1, 0, 1]) # define the model model = nn.Sequential( nn.Linear(2, 1), nn.Sigmoid()) # define the loss function and the optimization algorithm criterion = nn.BCELoss() optimizer = torch.optim.SGD(model.parameters(), lr=0.1) # train the model epochs = 100 for epoch in range(epochs): outputs = model(X) # calculate the loss loss = criterion(outputs, y) # backprop and perform Adam optimisation optimizer.zero_grad() loss.backward() optimizer.step() # make predictions pred = model(X).detach().round() print(pred)"},{"prompt":"This code defines a class called ChefConf that has methods to load and validate data, as well as getters and setters for various fields. To use this class, create an instance of it and call its methods as needed. Make sure to provide the necessary data to the load_data method before calling validate.","completion":"# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*- # This file is part of Guadalinex # # This software is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This software is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this package; if not, write to the Free Software # Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA __author__ = \\"Antonio Hernández <ahernandez@emergya.com>\\" __copyright__ = \\"Copyright (C) 2011, Junta de Andalucía <devmaster@guadalinex.org>\\" __license__ = \\"GPL-2\\" import firstboot.validation as validation class ChefConf(): def __init__(self): self._data = {} self._data['chef_server_uri'] = '' self._data['chef_validation'] = '' self._data['chef_link'] = False self._data['chef_link_existing'] = False def load_data(self, conf): msg = 'ServerConf: Key \\"%s\\" not found in the configuration file.' try: self.set_url(conf['chef_server_uri']) except KeyError as e: print msg % ('chef_server_uri',) try: self.set_pem(conf['chef_validation']) except KeyError as e: print msg % ('chef_validation',) try: self.set_chef_link(conf['chef_link']) except KeyError as e: print msg % ('chef_link',) def validate(self): valid = validation.is_url(self._data['chef_server_uri']) and self._data['chef_validation'] != '' and self._data['chef_link'] != None and self._data['chef_link_existing'] != None return valid def get_url(self): return self._data['chef_server_uri'].encode('utf-8') def set_url(self, url): self._data['chef_server_uri'] = url return self def get_pem(self): return self._data['chef_validation'].encode('utf-8') def set_pem(self, pem): self._data['chef_validation'] = pem return self # --- Next fields are not present in the JSON file but are # setted on runtime by Firstboot --- def set_chef_link_existing(self, link_existing): self._data['chef_link_existing'] = link_existing return self def get_chef_link_existing(self): return self._data['chef_link_existing'] def set_chef_link(self, chef_link): self._data['chef_link'] = chef_link return self def get_chef_link(self): return self._data['chef_link'] def get_node_name(self): if not 'node_name' in self._data: self._data['node_name'] = '' return self._data['node_name'].encode('utf-8') def set_node_name(self, node_name): self._data['node_name'] = node_name return self def get_admin_name(self): if not 'chef_admin_name' in self._data: self._data['chef_admin_name'] = '' return self._data['chef_admin_name'].encode('utf-8') def set_admin_name(self, admin_name): self._data['chef_admin_name'] = admin_name return self"},{"prompt":"the following Python list, remove an item with the index of 3 and then add a new item to the list with a value of 99. my_list = [1, 4, 5, 7, 8]","completion":"my_list = [1, 4, 5, 8] my_list.append(99)"},{"prompt":"Convert the following Python program to a JavaScript program. def factorial(n): if n == 0: return 1 else: return n * factorial(n1)","completion":"function factorial(n) { if (n === 0) { return 1; } else { return n * factorial(n - 1); } }"},{"prompt":"Write a function in Python that returns the longest word from a list. [Hello, how, are, you]","completion":"def longest_word(word_list): longest = word_list[0] for word in word_list[1:]: if len(word) > len(longest): longest = word return longest words = [\\"Hello\\", \\"how\\", \\"are\\", \\"you\\"] longest_word = longest_word(words) print(longest_word)"},{"prompt":"Design a Python program that sorts the elements in the array from largest to smallest. [3, 8, 5, 2, 6, 4]","completion":"def selection_sort(arr): # Iterate through the array for pos in range(len(arr)): # Find the index of the maximum number max_pos = pos for i in range(pos + 1, len(arr)): if arr[i] > arr[max_pos]: max_pos = i # Swap the numbers temp = arr[pos] arr[pos] = arr[max_pos] arr[max_pos] = temp return arr # Test arr = [3, 8, 5, 2, 6, 4] sorted_arr = selection_sort(arr) print(sorted_arr)"},{"prompt":"Create a Python program for finding the second highest number in a list. [1, 2, 3, 4, 5]","completion":"def findSecondHighest(lst): max = float(\\"-inf\\") sec_max = float(\\"-inf\\") for num in lst: if (num > max): sec_max = max max = num elif (num > sec_max): sec_max = num return sec_max print(findSecondHighest([1, 2, 3, 4, 5]))"},{"prompt":"To safely execute code in a sandbox, call the method safely_exec with the python code to be executed, the Django request object, and an already opened database connection. The method will set up a separate subprocess to execute the code securely and return a tuple containing the result and the time taken to calculate the result.","completion":"# coding=utf-8 \\"\\"\\" Pinyto cloud - A secure cloud database for your personal data Copyright (C) 2105 Johannes Merkert <jonny@pinyto.de> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. \\"\\"\\" import time from multiprocessing import Process, Queue from multiprocessing.queues import Empty from api_prototype.seccomp_process import SecureHost def sandbox(code, request, real_db, queue): \\"\\"\\" This function gets executed in a separate subprocess which does not share the memory with the main Django process. This is done a) for security reasons to minimize the risk that code inside of the sandbox is able to do anything harmful and b) for cleanly measuring the execution time for the code because the user may have to pay for it. :param code: The python code which should be executed in the sandbox :type code: str :param request: Django's request object :type request: HttpRequest :param real_db: The database connection :type real_db: service.database.CollectionWrapper :param queue: Queue for communicating with the main process :type queue: multiprocessing.Queue :return: nothing (the queue is used for returning the results) \\"\\"\\" start_time = time.clock() secure_host = SecureHost() secure_host.start_child() try: result = secure_host.execute(code, request, real_db) finally: secure_host.kill_child() end_time = time.clock() queue.put((result, end_time - start_time)) def safely_exec(code, request, db): \\"\\"\\" If you want to execute something in the sandbox, call this method. It will setup a process and execute the code there with seccomp. The passed database connections will used to access the users collection. :param code: The python code which should be executed in the sandbox :type code: str :param request: Django's request object which is passed into the sandbox process :type request: HttpRequest :param db: The already opened database connection :type db: service.database.CollectionWrapper :return: A tuple containing the result and the time needed to calculate the result. :rtype: (dict, timedelta) \\"\\"\\" start_time = time.clock() queue = Queue(1) sandbox_process = Process(target=sandbox, args=(code, request, db, queue)) sandbox_process.start() result = \\"\\" child_time = 0 wait_for_data = True termination = False while wait_for_data and not termination: try: result, child_time = queue.get(True, 0.001) wait_for_data = False except Empty: wait_for_data = True if not sandbox_process.is_alive(): termination = True result = {'error': \\"The code could not be executed because it tried to do something illegal.\\"} sandbox_process.join() end_time = time.clock() return result, end_time - start_time + child_time"},{"prompt":"Create a program in Python for encrypting a string using Caesar’s Cipher. String: Hello","completion":"def caesarCipherEncryptor(string, key): newLetters = [] newKey = key % 26 for letter in string: newLetters.append(getEncryptedLetter(letter, newKey)) return \\"\\".join(newLetters) def getEncryptedLetter(letter, key): newLetterCode = ord(letter) + key return chr(newLetterCode) if newLetterCode <= 122 else chr(96 + newLetterCode % 122) string = \\"hello\\" key = 2 encryptedString = caesarCipherEncryptor(string, key) print(encryptedString) //Output: jgnnq"},{"prompt":"Create a Python program for implementing a linear search algorithm. [4, 6, 5, 2, 9]","completion":"def linearSearch(arr, key): for idx, num in enumerate(arr): if num == key: return idx return -1"},{"prompt":"Design a program in Python to generate a random password.","completion":"import random, string def genRandomPassword(): length = 8 random_password= ''.join([random.choice(string.ascii_letters + string.digits + string.punctuation) for n in range(length)]) return random_password password = genRandomPassword() print(password)"},{"prompt":"Write a Python program to automate adding products to an ecommerce website's database. Products: Name: iPhone 11 Pro Price: 949 Name: AirPods Pro Price: 249","completion":"import sqlite3 # Establish the connection conn = sqlite3.connect(\\"ecommerce_database.db\\") c = conn.cursor() # Create the table c.execute('''CREATE TABLE IF NOT EXISTS products ( name TEXT, price INTEGER )''') # Insert data into table products = [ (\\"iPhone 11 Pro\\", 949), (\\"AirPods Pro\\", 249) ] c.executemany('INSERT INTO products VALUES (?, ?)', products) # Commit changes conn.commit() # Close the connection conn.close()"},{"prompt":"Create a class in Python that takes two arguments a 'name' and 'age' and returns a greeting.","completion":"class Greeting: def __init__(self, name, age): self.name = name self.age = age def get_greeting(self): return f\\"Hello, my name is {self.name} and I am {self.age} years old.\\""},{"prompt":"Visualize a dataset containing the number of ecommerce orders per day for a month in the form of a line chart using matplotlib and python. Orders per day: 10, 20, 30, 5, 10, 15, 25, 10, 20, 15, 5, 10","completion":"import matplotlib.pyplot as plt # x axis values x = [1,2,3,4,5,6,7,8,9,10,11,12] # corresponding y axis values y = [10, 20, 30, 5, 10, 15, 25, 10, 20, 15, 5, 10] # plotting the points plt.plot(x, y) # naming the x axis plt.xlabel('Day of Month') # naming the y axis plt.ylabel('Number of orders') # giving a title to my graph plt.title('Number of orders per day in a month') # function to show the plot plt.show()"},{"prompt":"Can you design a mathematical function using Python which takes a n x n matrix as input and returns the determinant of the matrix? [[1, 0, 1], [1, 1, 0], [0, 1, 1]]","completion":"def determinantMatrix(matrix): if len(matrix) == 2: return (matrix[0][0] * matrix[1][1]) - (matrix[0][1] * matrix[1][0]) else: det = 0 for i in range(len(matrix)): temp = [[row[a] for a in range(len(matrix)) if a != i] for row in matrix[1:]] det += ((-1) ** i) * matrix[0][i] * determinantMatrix(temp) return det matrix = [[1, 0, 1], [1, 1, 0], [0, 1, 1]] print(\\"The determinant of the matrix is:\\", determinantMatrix(matrix))"},{"prompt":"Write a Python program to find all palindromic words in a given list. words = [word, racecar, level, pop, mom, nursesrun]","completion":"def palindrome_words(words): \\"\\"\\"This function takes in a list of words and returns a list of palindromic words\\"\\"\\" palindrome_words = [] for word in words: if word == word[::-1]: palindrome_words.append(word) return palindrome_words"},{"prompt":"Create a Python program to parse an XML document.","completion":"import xml.etree.ElementTree as ET tree = ET.parse('data.xml') root = tree.getroot() # print all items for item in root.findall('.//item'): print(item.attrib)"},{"prompt":"Write an algorithm in Python to find a solution to the Tower of Hanoi game. 3 disc","completion":"def hanoi_solver(n, start, temp, end): if n == 1: print(f'Move disc 1 from {start} to {end}') else: hanoi_solver(n-1, start, end, temp) print(f'Move disc {n} from {start} to {end}') hanoi_solver(n-1, temp, start, end) # Solve the Tower of Hanoi with 3 discs hanoi_solver(3, 'A', 'B', 'C')"},{"prompt":"Transform the following data frame in Python. df = [ {'name': 'Bob', 'age': 25}, {'name': 'Mary', 'age': 18}, {'name': 'John', 'age': 32}, ]","completion":"import pandas as pd df = pd.DataFrame(df) #Transform the dataframe df['age_group'] = [ \\"under 20\\" if a < 20 else \\"20-35\\" if a < 35 else \\"over 35\\" for a in df['age']]"},{"prompt":"Write a function in Python that takes two lists of integers and returns a single merged list with unique elements sorted in ascending order. list1 = [1, 2, 3, 4] list2 = [2, 4, 5, 6]","completion":"def merge_unique_sorted_lists(list1, list2): merged_list = list1+list2 unique_list = list(set(merged_list)) unique_list.sort() return unique_list"},{"prompt":"Create a simple calculator in Python to perform the four basic arithmetic operations: addition, subtraction, multiplication, and division.","completion":"def add(x, y): return x + y def subtract(x, y): return x - y def multiply(x, y): return x * y def divide(x, y): return x / y # Take input from the user print(\\"Select operation.\\") print(\\"1. Add\\") print(\\"2. Subtract\\") print(\\"3. Multiply\\") print(\\"4. Divide\\") choice = input(\\"Enter choice(1/2/3/4): \\") num1 = float(input(\\"Enter first number: \\")) num2 = float(input(\\"Enter second number: \\")) if choice == '1': print(num1, \\"+\\", num2, \\"=\\", add(num1, num2)) elif choice == '2': print(num1, \\"-\\", num2, \\"=\\", subtract(num1, num2)) elif choice == '3': print(num1, \\"*\\", num2, \\"=\\", multiply(num1, num2)) elif choice == '4': print(num1, \\"/\\", num2, \\"=\\", divide(num1, num2)) else: print(\\"Invalid input\\")"},{"prompt":"Edit the given Python program by discarding the repeated words in a sentence. sentence = The cow jumped over the moon","completion":"sentence = \\"The cow jumped over moon\\" # convert sentence into lowercase sentence = sentence.lower() # split sentence into words words = sentence.split(' ') # create a list to store words with unique occurrence unique_words = [] # Iterate over each word in words for word in words: # Check if word not in unique_words list if word not in unique_words: # Append the word to unique words list unique_words.append(word) # Join all the words to form a string updated_sentence = ' '.join(unique_words) # print the updated sentence print(updated_sentence)"},{"prompt":"Create a Python program that given an array of strings, returns an array with all the strings that have a length of more than 10 characters. [ example, string, webapp, happiness, testcase, application ]","completion":"def getLongStrings(arr): return [s for s in arr if len(s) > 10] long_strings = getLongStrings([\\"example\\", \\"string\\", \\"webapp\\", \\"happiness\\", \\"testcase\\", \\"application\\"]) print(long_strings)"},{"prompt":"Write a Python program that will calculate the correlation between two different datasets. Dataset 1:[1,2,3,4,5] Dataset 2:[2,4,6,8,10]","completion":"import numpy as np data1 = [1,2,3,4,5] data2 = [2,4,6,8,10] correlation = np.corrcoef(data1, data2)[0][1] print(correlation) # Output 0.98198050606"},{"prompt":"Use a regular expression to find all emails in a given string in Python. myString = my name is Joe and my email is joe@example.com","completion":"import re pattern = \\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\" result = re.findall(pattern, myString) print(result) # Output will be [\\"joe@example.com\\"]"},{"prompt":"Write a Python program to convert a list of numbers into a string. [2, 3, 10]","completion":"def list_to_str(lst): result = \\",\\".join(map(str, lst)) return result result = list_to_str([2, 3, 10]) print(result)"},{"prompt":"Compose a python script to create a bar chart. [4,6,3,7,2]","completion":"import matplotlib.pyplot as plt # x-axis values x = [4, 6, 3, 7, 2] # Y-axis values y = [0, 2, 3, 4, 5] # Function to plot the bar plt.bar(x, y) # Naming the x-axis plt.xlabel('x - axis') # Naming the y-axis plt.ylabel('y - axis') # Writing a title to the graph plt.title('Bar Chart') # Show the plot plt.show()"},{"prompt":"Write a Python script to generate a password using random characters and numbers.","completion":"import random import string def generate_password(): password = ''.join(random.choices(string.ascii_letters + string.digits, k=8)) return password print(generate_password())"},{"prompt":"Generate a Python script to detect duplicate characters in a given string.","completion":"def detect_duplicate_characters(string): chars = set() for char in string: if char in chars: return True chars.add(char) return False"},{"prompt":"mplement a greedy algorithm in Python to calculate the minimum number of coins needed to make a certain amount of money. Amount = 29","completion":"def minCoins(coins, n, amount): result= [0 for i in range(amount + 1)] # Initializing all the result values to sys.maxint for i in range(1,amount + 1): result[i] = float(\\"Inf\\") # Storing the minimum coin array value for a given amount for i in range(1,amount + 1): for coin in coins: if coin <=i: sub_res = result[i - coin] if sub_res != float(\\"Inf\\") and sub_res + 1 < result[i]: result[i] = sub_res + 1 return result[amount] coins = [1, 5, 10, 25] n = len(coins) amount = 29 print(minCoins(coins, n, amount))"},{"prompt":"Create an API endpoint in a Python Flask application to retrieve employee data. Not applicable","completion":"@app.route('/employees', methods=['GET']) def get_employees(): employees = Employee.query.all() return {'employees': [{'id': emp.id, 'name': emp.name, 'age': emp.age} for emp in employees]}"},{"prompt":"Create a python program to read an integer from the keyboard and print a message saying whether the number is even or odd?","completion":"def read_int_even_odd(): number = int(input(\\"Enter an integer: \\")) if number % 2 == 0: print(\\"The number is even\\") else: print(\\"The number is odd\\") read_int_even_odd()"},{"prompt":"Create a Python program that searches a list of words for a given pattern. words = [cat, dog, mouse, camel] pattern = ca*","completion":"pattern = \\"ca*\\" found_words = [] for word in words: if fnmatch.fnmatch(word, pattern): found_words.append(word) print(found_words) # Output: [\\"cat\\", \\"camel\\"]"},{"prompt":"Generate a class in Python that implements a linked list.","completion":"class Node: def __init__(self, data=None, next_node=None): self.data = data self.next_node = next_node def get_data(self): return self.data def get_next(self): return self.next_node def set_next(self, new_next): self.next_node = new_next class SinglyLinkedList: def __init__(self, head=None): self.head = head def insert(self, data): new_node = Node(data) new_node.set_next(self.head) self.head = new_node def get_size(self): size = 0 current = self.head while current: size += 1 current = current.get_next() return size def print_list(self): current = self.head while current: print(current.data) current = current.get_next()"},{"prompt":"w would you design a Python program to filter out string elements from a given array of string elements? lst = [apple, zoo, banana, apple, foo, zoo]","completion":"def filter_out_strings(lst): new_lst = [] for item in lst: if item not in new_lst: new_lst.append(item) return new_lst filtered_list = filter_out_strings(lst) print(filtered_list) # Output -> ['apple', 'zoo', 'banana', 'foo']"},{"prompt":"Create a Python program that classifies articles based on sentiment. This article is bad","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentences = [\\"This article is bad\\"] sid = SentimentIntensityAnalyzer() for sentence in sentences: print(sentence) ss = sid.polarity_scores(sentence) print(ss) if ss['compound'] >= 0.05: print(\\"Positive\\") elif -0.05 < ss['compound'] < 0.05: print(\\"Neutral\\") else: print(\\"Negative\\")"},{"prompt":"Generate a generic sorting algorithm in Python.","completion":"def sort(data): \\"\\"\\"Generic sorting algorithm.\\"\\"\\" if len(data) == 0: return [] else: pivot = data[0] less = [i for i in data[1:] if i <= pivot] greater = [i for i in data[1:] if i > pivot] return sort(less) + [pivot] + sort(greater)"},{"prompt":"Write a Python program to filter out values from a given list based on a certain condition. [7, 6, 5, 4, 3], condition: x > 5","completion":"def filter_values(lst, condition): filtered_list = [] for x in lst: if eval(condition): filtered_list.append(x) return filtered_list"},{"prompt":"Generate a program in Python that takes as input an array of numbers and returns the sum of all numbers in the array. [2, 3, 4]","completion":"def sum_elements(nums): \\"\\"\\"Given an array of number, return the sum of all elements in the array \\"\\"\\" result = 0 for num in nums: result += num return result print(sum_elements([2,3,4]))"},{"prompt":"Create a Node.js script for returning the longest string in an array. [javascript, ruby, python, java]","completion":"const arr = [\\"javascript\\", \\"ruby\\", \\"python\\", \\"java\\"]; const longestString = (arr) => { let longest = arr[0]; for (let i = 1; i < arr.length; i++) { if (arr[i].length > longest.length) { longest = arr[i]; } } return longest; }; const longestStr = longestString(arr); console.log(longestStr); // Output: \\"javascript\\""},{"prompt":"Generate a python program that takes in two input numbers and prints the factorial of the larger number.","completion":"# This program takes in two numbers and prints the factorial of the larger number def factorial(num): if num == 0: return 1 else: return num * factorial(num - 1) num1 = int(input(\\"Enter the first number: \\")) num2 = int(input(\\"Enter the second number: \\")) if num1 > num2: result = factorial(num1) else: result = factorial(num2) print(\\"The result is\\", result)"},{"prompt":"Rewrite the following Python class as an JavaScript class with equivalent functions: class Person: def __init__(self, name): self.name = name def greet(self): print(fHello, my name is {self.name}) Not applicable","completion":"class Person { constructor(name) { this.name = name; } greet() { console.log(\`Hello, my name is {this.name}\`); } }"},{"prompt":"To download external components (nonPython), use the following code. It downloads additional (nonPython) files needed by the project. \`\`\` import requests import zipfile import os import shutil import sys sys.path.append(./lib) def download_file(url): local_filename = url.split('/')[1] r = requests.get(url, stream=True) with open(local_filename, 'wb') as f: for chunk in r.iter_content(chunk_size=1024): if chunk: f.write(chunk) f.flush() return local_filename def unzip_file(file_in, file_out): with open(file_in, 'rb') as fh: z = zipfile.ZipFile(fh) for name in z.namelist(): outpath = file_out z.extract(name, outpath) print Collecting assets (jquery, skeletoncss) if True: shutil.rmtree(app/static/assets/jquery, True) shutil.os.mkdir(app/static/assets/jquery) shutil.os.mkdir(app/static/assets/jquery/js) download_file(http://code.jquery.com/jquery1.11.3.min.js) shutil.move(jquery1.11.3.min.js, app/static/assets/jquery/js/jquery1.11.3.min.js) if True: shutil.rmtree(app/static/assets/bootstrap, True) download_file(https://github.com/twbs/bootstrap/releases/download/v3.3.4/bootstrap3.3.4dist.zip) unzip_file(bootstrap3.3.4dist.zip, .) os.remove(bootstrap3.3.4dist.zip) shutil.move(bootstrap3.3.4dist, app/static/assets/bootstrap) print Completed \`\`\`","completion":"\\"\\"\\" Download external components (non-Python) \\"\\"\\" import requests import zipfile \\"\\"\\" Download additional (non-Python) files needed by the project \\"\\"\\" import os import shutil import sys sys.path.append(\\"./lib\\") # http://stackoverflow.com/questions/16694907/how-to-download-large-file-in-python-with-requests-py def download_file(url): \\"\\"\\"Download a file\\"\\"\\" local_filename = url.split('/')[-1] # NOTE the stream=True parameter r = requests.get(url, stream=True) with open(local_filename, 'wb') as f: for chunk in r.iter_content(chunk_size=1024): if chunk: # filter out keep-alive new chunks f.write(chunk) f.flush() return local_filename # http://stackoverflow.com/questions/9431918/extracting-zip-file-contents-to-specific-directory-in-python-2-7 def unzip_file(file_in, file_out): \\"\\"\\"Unzip a file\\"\\"\\" with open(file_in, 'rb') as fh: z = zipfile.ZipFile(fh) for name in z.namelist(): outpath = file_out z.extract(name, outpath) print \\"Collecting assets (jquery, skeleton-css)\\" if True: shutil.rmtree(\\"app/static/assets/jquery\\", True) shutil.os.mkdir(\\"app/static/assets/jquery\\") shutil.os.mkdir(\\"app/static/assets/jquery/js\\") download_file(\\"http://code.jquery.com/jquery-1.11.3.min.js\\") shutil.move(\\"jquery-1.11.3.min.js\\", \\"app/static/assets/jquery/js/jquery-1.11.3.min.js\\") if True: shutil.rmtree(\\"app/static/assets/bootstrap\\", True) download_file(\\"https://github.com/twbs/bootstrap/releases/download/v3.3.4/bootstrap-3.3.4-dist.zip\\") unzip_file(\\"bootstrap-3.3.4-dist.zip\\", \\".\\") os.remove(\\"bootstrap-3.3.4-dist.zip\\") shutil.move(\\"bootstrap-3.3.4-dist\\", \\"app/static/assets/bootstrap\\") print \\"Completed\\""},{"prompt":"Develop a Python script to rank an array of integers in ascending order.","completion":"def sort_array(array): for i in range(len(array)): min_val = min(array[i:]) min_index = array.index(min_val) array[i], array[min_index] = array[min_index], array[i] return array array = [3, 5, 1, 9, 6, 4] res = sort_array(array) print(res)"},{"prompt":"Create a function in Python to convert integer inputs to their binary representation.","completion":"def int_to_binary(n): \\"\\"\\" Returns the binary representation of an integer. \\"\\"\\" return \\"{0:b}\\".format(n)"},{"prompt":"Write a function in Python that takes a list of strings and returns a dictionary of counts for each string. list_of_strings = [apple, banana, apple, orange, kiwi]","completion":"def count_list_items(list_of_strings): counts = {} for item in list_of_strings: if item not in counts: counts[item] = 1 else: counts[item] += 1 return counts print(count_list_items(list_of_strings)) # Output: {\\"apple\\": 2, \\"banana\\": 1, \\"orange\\": 1, \\"kiwi\\": 1}"},{"prompt":"Use Python to generate a script to calculate the sum of natural n numbers n = 6","completion":"n = 6 sum = 0 for i in range(1, n+1): sum = sum + i print(\\"The sum is\\", sum)"},{"prompt":"Write an algorithm in Python to sort an array of integers using selection sort.","completion":"def selection_sort(array): for i in range(len(array)): # Find the minimum element in remaining unsorted array min_idx = i for j in range(i+1, len(array)): if array[min_idx] > array[j]: min_idx = j # Swap the found minimum element with the first element array[i], array[min_idx] = array[min_idx], array[i] return array"},{"prompt":"Create a Python class for a Binary Tree, with methods for adding and removing nodes, traversing and searching the tree. Not applicable","completion":"class Node: def __init__(self, data): self.data = data # Assign data self.left = None # Initialize left child self.right = None # Initialize right child class BinaryTree: def __init__(self): self.root = None def add_node(self, data): return Node(data) def add_left(self, root, data): root.left = self.add_node(data) return root.left def add_right(self, root, data): root.right = self.add_node(data) return root.right def traverse(self, root): if root is not None: self.traverse(root.left) print(root.data, end=\\" \\") self.traverse(root.right) def search(self, root, data): if root is None: return False if root.data == data: return True else: return self.search(root.left, data) or self.search(root.right, data)"},{"prompt":"Construct a basic GUI calculator in Python.","completion":"import tkinter as tk window = tk.Tk() window.title(\\"Calculator\\") window.geometry(\\"400x220\\") window.resizable(0, 0) def num(n): o.insert(\\"end\\", n) def res(): x = o.get() try: res = eval(x) o.delete(0, \\"end\\") o.insert(\\"end\\", res) except Exception as e: o.delete(0, \\"end\\") o.insert(\\"end\\", \\"Error\\") def clear(): o.delete(0, \\"end\\") o = tk.Entry(font=\\"Arial 15 bold\\", width=20, bd=5, bg=\\"steelblue\\") o.grid(row=0, columnspan=15) b1 = tk.Button(text=\\"1\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=1: num(x)).grid(row=1, column=0) b2 = tk.Button(text=\\"2\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=2: num(x)).grid(row=1, column=1) b3 = tk.Button(text=\\"3\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=3: num(x)).grid(row=1, column=2) b4 = tk.Button(text=\\"4\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=4: num(x)).grid(row=2, column=0) b5 = tk.Button(text=\\"5\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=5: num(x)).grid(row=2, column=1) b6 = tk.Button(text=\\"6\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=6: num(x)).grid(row=2, column=2) b7 = tk.Button(text=\\"7\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=7: num(x)).grid(row=3, column=0) b8 = tk.Button(text=\\"8\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=8: num(x)).grid(row=3, column=1) b9 = tk.Button(text=\\"9\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=9: num(x)).grid(row=3, column=2) b0 = tk.Button(text=\\"0\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=0: num(x)).grid(row=4, column=1) add = tk.Button(text=\\"+\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=\\"+\\": num(x)).grid(row=1, column=3) sub = tk.Button(text=\\"-\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=\\"-\\": num(x)).grid(row=2, column=3) mul = tk.Button(text=\\"*\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=\\"*\\": num(x)).grid(row=3, column=3) div = tk.Button(text=\\"/\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=lambda x=\\"/\\": num(x)).grid(row=4, column=3) eql = tk.Button(text=\\"=\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=res).grid(row=4, column=2) c = tk.Button(text=\\"C\\", font=\\"Arial 10 bold\\", width=10, bg=\\"white\\", command=clear).grid(row=4, column=0) window.mainloop()"},{"prompt":"Write a function in Python that takes a list of words and returns a list of numbers corresponding to the length of each word.","completion":"def get_word_lengths(words): # initialize empty list lengths = [] # iterate over the list of words for word in words: # append the length of each word to lengths lengths.append(len(word)) # return the list of lengths return lengths"},{"prompt":"Write a user profile generator in Python.","completion":"import random # User profile class class UserProfile: def __init__(self): self.name = None self.age = None self.location = None self.interests = None # Generate random user profile def generate_profile(): profile = UserProfile() profile.name = generate_name() profile.age = generate_age() profile.location = generate_location() profile.interests = generate_interests() return profile # Generate random name def generate_name(): ... # Generate random age def generate_age(): ... # Generate random location def generate_location(): ... # Generate random interests def generate_interests(): ..."},{"prompt":"Write a Python program that takes a list of strings as an input and returns a dictionary containing the count of each string in the list. ['a', 'b', 'c', 'a', 'b']","completion":"def count_strings(lst): result = {} for item in lst: if item in result: result[item] += 1 else: result[item] = 1 return result list_of_strings = ['a', 'b', 'c', 'a', 'b'] result = count_strings(list_of_strings) print(result)"},{"prompt":"Can you build a Python program which calculates the sum of digits of an inputted number?","completion":"def sumDigits(num): sum = 0 while(num): sum += num % 10 num = num//10 return sum # main function num = 12345 print(\\"Sum of digits of specified number is: \\", sumDigits(num))"},{"prompt":"Provide a solution using Python to capitalize the first letter of each word in a given phrase. the quick brown fox","completion":"def capitalize(phrase): words = phrase.split(\\" \\") capitalized_words = [word.capitalize() for word in words] capitalized_phrase = \\" \\".join(capitalized_words) return capitalized_phrase capitalized_phrase = capitalize(\\"the quick brown fox\\") print(capitalized_phrase)"},{"prompt":"Generate a Python program which takes a sentence as input and prints out the most frequent words. The quick brown fox jumps over the lazy dog","completion":"from collections import Counter def most_frequent_words(sentence): # split the sentence into words words = sentence.split(\\" \\") # count the frequency of each word word_count = Counter(words) # find the most frequent words most_frequent_words = word_count.most_common(1) # print the words along with their frequency print(\\"The most frequent words in the sentence are:\\") for word, count in most_frequent_words: print(\\"'{}': {}\\".format(word, count)) most_frequent_words(\\"The quick brown fox jumps over the lazy dog\\")"},{"prompt":"Generate a list of prime numbers from 0 to 100 in Python.","completion":"def generate_prime_numbers(start, end): prime_numbers = [] for num in range(start, end + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: prime_numbers.append(num) return prime_numbers print(generate_prime_numbers(0, 100))"},{"prompt":"Create a Python program to compare two strings and generate a string with all characters that are present in both strings. first_string = hello second_string = world","completion":"def compare_strings(first_string, second_string): string_list = set(list(first_string)) & set(list(second_string)) common_string = ''.join(string_list) return common_string print(compare_strings(\\"hello\\", \\"world\\"))"},{"prompt":"Use Python to calculate and print the sum of values in an array. [1,2,3,4,5]","completion":"arr = [1,2,3,4,5] sum = 0 for i in arr: sum+=i print(sum) # Output # 15"},{"prompt":"Design a Python program to convert minutes to hours and minutes. Total minutes = 150","completion":"def convert_minutes(minutes): hours = minutes // 60 remaining_minutes = minutes % 60 return hours, remaining_minutes hours, minutes = convert_minutes(150) print(hours, minutes)"},{"prompt":"Read the following data structure and create an equivalent dictionary in Python. height: 150cm age: 20 name: Joh","completion":"data = { 'height': '150cm', 'age': 20, 'name': 'John' }"},{"prompt":"After writing a python class, edit it so that it becomes serializable. class Person: def __init__(self, name, age): self.name = name self.age = age","completion":"import json class Person: def __init__(self, name, age): self.name = name self.age = age def to_json(self): return { \\"name\\": self.name, \\"age\\": self.age } @staticmethod def from_json(data): return Person(data[\\"name\\"], data[\\"age\\"])"},{"prompt":"Compose a python program to find the sum of the digits of a given number.","completion":"def sum_of_digits(num): sum = 0 while(num > 0): d = num % 10 num = num // 10 sum += d return sum"},{"prompt":"Design a data structure in Python that can store a set of numbers and provide the median of the set.","completion":"from bisect import insort class MedianFinder: def __init__(self): self.nums = [] def add(self, num): \\"\\"\\" Add an element to the data structure. \\"\\"\\" insort(self.nums,num) def median(self): \\"\\"\\" Compute the median element of the data structure. \\"\\"\\" length = len(self.nums) mid = (length - 1) // 2 # if length is even return avg of two mid elements if length % 2 == 0: return (self.nums[mid] + self.nums[mid + 1]) / 2 # if length is odd return mid element else: return self.nums[mid]"},{"prompt":"Create an SQL query to find all articles with the word python in the title. Not applicable","completion":"SELECT * FROM articles WHERE title LIKE '%Python%';"},{"prompt":"Design a Python program to count how many words appear in a given sentence. Sentence: I am writing this code to practice","completion":"def word_count(sentence): count = 0 words = sentence.split() for word in words: count += 1 return count sentence = \\"I am writing this code to practice\\" count = word_count(sentence) print(\\"Number of words present inGiven sentence:\\") print(count)"},{"prompt":"Rewrite the following Python program using recursion. def fib(n): if n == 1 or n == 0: return n return fib(n1) + fib(n2) print(fib(5))","completion":"def fib(n): if n == 0: return 0 elif n == 1: return 1 else: return fib(n-1) + fib(n-2) print(fib(5))"},{"prompt":"Create an algorithm to find the minimum number of coins required to make a given amount in python. amount = 12","completion":"def minimum_coins_needed(amount): denominations = [1, 2, 5, 10] result = [0 for _ in range(amount+1)] # Compute the result for amount = 0 result[0] = 0 # Iterate over all amount from 1 to desired for i in range(1, amount+1): # Initialize an inner loop to maximum value (amount) temp_min = float('Inf') for j in range(0, len(denominations)): # Check if coins are less than amount if denominations[j] <= i: temp_min = min(temp_min, result[i-denominations[j]]) # Store the final result in amount's index result[i] = temp_min + 1 return result[amount]"},{"prompt":"Create a web scraping application in Python that downloads the source code of a website given its URL. https://www.example.com/","completion":"import urllib.request url = \\"https://www.example.com/\\" response = urllib.request.urlopen(url) webContent = response.read() f = open(\\"example.html\\", \\"w\\") f.write(webContent.decode('utf-8')) f.close()"},{"prompt":"Create a natural language processing program in Python that can generate features for a given text. Example text: This is a sample text about natural language processing.","completion":"from sklearn.feature_extraction.text import CountVectorizer # Define the text text = [\\"This is a sample text about natural language processing.\\"] # Create a CountVectorizer to generate feature vectors vectorizer = CountVectorizer() # Generate feature vectors features = vectorizer.fit_transform(text) # Print the feature vector print(features.toarray())"},{"prompt":"Using Python, create an algorithm for solving a multiarmed bandit problem with an epsilongreedy policy. An array of size 4 containing the reward values of each action: [0.1, 0.2, 0.3, 0.4]","completion":"import random class EpsilonGreedy: def __init__(self, epsilon=0.1): self.epsilon = epsilon self.actions = [] def choose_action(self, rewards): if random.random() < self.epsilon: action = random.randrange(len(rewards)) else: action = rewards.index(max(rewards)) self.actions.append(action) return action # Create the agent epsilon_greedy = EpsilonGreedy() # Test the agent rewards = [0.1, 0.2, 0.3, 0.4] action = epsilon_greedy.choose_action(rewards) print('Chosen action:', action)"},{"prompt":"Design a function in Python to classify an input into positive or negative. number = 3","completion":"def classify_number(number): if number > 0: return 'positive' else: return 'negative' result = classify_number(number) print(result)"},{"prompt":"Write a function in Python that accepts a list of numbers and returns the highest and lowest values in the list. numbers = [2, 18, 9, 22, 10, 17, 24]","completion":"def max_min(numbers): '''returns a tuple containing highest and lowest values in a given list''' return (max(numbers), min(numbers))"},{"prompt":"Debug the following python code to make the code run properly x = Hello World if x == Hello World: print('Yes')","completion":"x = \\"Hello World\\" if x == \\"Hello World\\": print('Yes')"},{"prompt":"Develop a Python function to calculate the maximum, minimum and average of a given list. numbers = [3, 4, 5, 6]","completion":"def calculate_stats(numbers): maximum = max(numbers) minimum = min(numbers) average = sum(numbers)/len(numbers) return (maximum, minimum, average)"},{"prompt":"Create a prediction model in Python that predicts the stock price of Apple.","completion":"import numpy as np from sklearn.linear_model import LinearRegression # Load the data data = np.genfromtxt('apple_stock.csv', delimiter=',') X = data[:, :-1] # features y = data[:, -1] # target # Create the regression model model = LinearRegression() model.fit(X, y) # Make predictions predictions = model.predict(X)"},{"prompt":"Write a Python program to transform an input array of length 5 into a matrix of 3x3. [1, 2, 3, 4, 5]","completion":"def transform_to_matrix(lst): matrix = [[lst[0], lst[1], lst[2]], [lst[3], lst[4], 0], [0, 0, 0]] return matrix"},{"prompt":"Write a Python program to generate a random array of integers of length N with values between 1 and M (inclusive). N = 10 M = 100","completion":"import random N = 10 M = 100 random_array = [random.randint(1, M) for _ in range(N)] print(random_array) # Output: [3, 82, 83, 32, 45, 44, 6, 67, 25, 29]"},{"prompt":"Design a Python algorithm that takes a list of numbers and returns a list of all the pairs of numbers whose sum is equal to a specified number. [1, 2, 3, 4, 5], 4","completion":"def find_pairs_with_sum(nums, target): result = [] seen = set() for num in nums: if (target - num) in seen: result.append([num, target-num]) seen.add(num) return result nums = [1,2,3,4,5] target = 4 result = find_pairs_with_sum(nums, target) print(result)"},{"prompt":"Design and write a Python code for finding out the longest common substring in two given strings. String1: apple pie String2: maple syrup","completion":"def LongestCommonSubstring(str1, str2): m = len(str1) n = len(str2) table = [[0 for x in range(n+1)] for x in range(m+1)] length = 0 row = 0 col = 0 for i in range(1, m + 1): for j in range(1, n + 1): if (str1[i-1] == str2[j-1]): table[i][j] = table[i-1][j-1]+1 if (table[i][j] > length): length = table[i][j] row = i col = j else: table[i][j] = 0 result = \\"\\" for k in range(row - length + 1, row + 1): result = result + str1[k-1] print(result) # Executing the function String1 = \\"apple pie\\" String2 = \\"maple syrup\\" LongestCommonSubstring(String1, String2)"},{"prompt":"Create a script in Python to apply Principal Component Analysis (PCA) on a given dataset. dataset = [[1,2,3],[4,5,6],[7,8,9]]","completion":"from sklearn.decomposition import PCA # define a 3x3 matrix matrix_data = dataset pca = PCA(n_components=2) # transform 3x3 matrix into 2x2 matrix transformed_data = pca.fit_transform(matrix_data) print(transformed_data)"},{"prompt":"Write a Python program to present a web UI to the user.","completion":"from flask import Flask, render_template # Create app app = Flask(__name__) # Homepage @app.route('/') def homepage(): return render_template('homepage.html') # Run app if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Compose a Python program to change all \`a\` characters to \`A\` in a string.","completion":"def change_a_to_A(s): return s.replace('a','A')"},{"prompt":"Create a function in Python that implements quicksort. The function should take in a list (of integers) and return a sorted list. [2, 5, 7, 1, 6, 3, 9, 0, 4, 8]","completion":"def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) print(quicksort([2, 5, 7, 1, 6, 3, 9, 0, 4, 8]))"},{"prompt":"Create a Python script to scrape a website for its URL, title, and meta description. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com' #send a request to the website req = requests.get(url) soup = BeautifulSoup(req.content, 'html.parser') #get the url print(url) #get the title title = soup.title.string print(title) #get the meta description meta = soup.find('meta', attrs={'name':'description'}) description = meta['content'] print(description)"},{"prompt":"Write an algorithm for merging two sorted lists of integers into one sorted list in Python. list1 = [1, 3, 5, 8] list2 = [2, 4, 6, 7]","completion":"def merge(list1, list2): # create an empty list to store the result mergedList = [] # set two index pointers i = 0 j = 0 while (i < len(list1) and j < len(list2)): if (list1[i] < list2[j]): mergedList.append(list1[i]) i += 1 else: mergedList.append(list2[j]) j += 1 # check for remaining elements while (i < len(list1)): mergedList.append(list1[i]) i += 1 while (j < len(list2)): mergedList.append(list2[j]) j += 1 return mergedList # Driver code list1 = [1, 3, 5, 8] list2 = [2, 4, 6, 7] # function call mergedList = merge(list1, list2) # print result print(mergedList)"},{"prompt":"Explain how to segment a sentence into words with Python.","completion":"The easiest way to segment a sentence into words with Python is to use the split() method of the str class. This takes a string as an argument, which is the sentence you want to segment, and returns a list of each word in the sentence. For example: sentence = \\"This is a sentence.\\" words = sentence.split() print(words) # Output: [\\"This\\", \\"is\\", \\"a\\", \\"sentence.\\"]"},{"prompt":"Edit a Python program to create a dictionary where the key is a string and the values is a list of strings.","completion":"my_dict = dict() # ... existing program here # Create a dictionary of strings my_dict['item1'] = ['one','two','three'] my_dict['item2'] = ['four','five','six']"},{"prompt":"Generate a python program that takes a string and an integer as input and outputs a string repeated the given integer number of times. (GPT Model, 3)","completion":"def repeat(string, n): return string * n"},{"prompt":"Write a Python script to search through a list of strings and find if any of the strings contain a substring. list = [who, “are”, “you”, “looking”, “for”] substring = you","completion":"def search_for_substring(list, substring): for item in list: if substring in item: return True return False result = search_for_substring(list, substring) print(result) # True"},{"prompt":"Write a Python program that can accept an arbitrary number of parameters and print them all out together.","completion":"def print_params(*args): print(args)"},{"prompt":"Generate a class in Python that will check for prime number given as an input.","completion":"class PrimeNumberChecker: def __init__(self): pass def is_prime(self, n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"prompt":"Suggest a data structure to store a set of student scores in order to sort them quickly by student name.","completion":"A dictionary would be the ideal data structure for this situation. The student names could be used as keys, and the scores can be stored as values. Using Python, the scores can then be sorted by the student names using the built-in sorted() function."},{"prompt":"Create a Dockerfile to build a container with python, flask, and gunicorn. Not applicable","completion":"FROM python:3.7 RUN mkdir /usr/src/app WORKDIR /usr/src/app COPY requirements.txt ./ RUN pip install --no-cache-dir -r requirements.txt EXPOSE 5000 COPY . . CMD [\\"gunicorn\\", \\"--workers\\", \\"3\\", \\"-eventlet\\", \\"--bind\\", \\":5000\\", \\"wsgi:app\\"]"},{"prompt":"Design a python program to delete a specified index element from a given list. [2, 3, 5, 8]","completion":"# Defining a function to delete an element from the list def delete_element(List, index): # List is passed by reference and it won't work without passing reference del List[index] # Printing the list aftter the deletion print(\\"The new list: \\", List) # Driver code List = [2, 3, 5, 8] index = int(input(\\"Enter the index of the element to be deleted: \\")) # Function calling delete_element(List, index)"},{"prompt":"Write a Python code to serialize a nested dictionary.","completion":"import json def serialize_dict(input_dict): return json.dumps(input_dict)"},{"prompt":"mplement a fibonacci sequence in Python.","completion":"def fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b return b"},{"prompt":"dentify the best syntax to use in Python to add two numbers.","completion":"# Python syntax to add two numbers result = number_1 + number_2"},{"prompt":"Create a function in Python that takes in two strings and outputs a Boolean based on if they are anagrams of each other. str1 = anagram str2 = gnaarm","completion":"def is_anagram(str1, str2): if (len(str1) != len(str2)): return False else: str1_dict = {} for char in str1: if char not in str1_dict: str1_dict[char] = 1 else: str1_dict[char] += 1 for char in str2: if char not in str1_dict: return False else: str1_dict[char] -= 1 for val in str1_dict.values(): if val != 0: return False return True"},{"prompt":"Optimize the following Python code def sum_of_list(list): sum=0 for x in list: sum=sum+x return sum","completion":"def sum_of_list(list): return sum(list)"},{"prompt":"Construct a for loop in Python to generate a list containing the numbers from 0 to 9.","completion":"my_list = [] for i in range(10): my_list.append(i) print(my_list) // Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"},{"prompt":"Generate a Python code for a web scraper to extract the current Bitcoin price from a website. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com/' r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') bitcoin_price = soup.find('span', {'class': 'btc-price'}).text print(f'The current Bitcoin price is {bitcoin_price}')"},{"prompt":"Using the range function, write a Python program to find the sum of all numbers in a given range. range(3,7)","completion":"def sum_in_range(n1, n2): return sum(range(n1, n2+1)) print(sum_in_range(3, 7)) # Outputs: # 25"},{"prompt":"Create a Python program to reverse a string in place. Hello World!","completion":"def reverse_string_in_space(s): temp_list = list(s) start = 0 end = len(temp_list) - 1 while start < end: temp_list[start], temp_list[end] = temp_list[end], temp_list[start] start += 1 end -= 1 s = \\"\\".join(temp_list) return s s = \\"Hello World!\\" print(reverse_string_in_space(s))"},{"prompt":"mplement a KNN classifier in Python.","completion":"import pandas as pd import numpy as np from sklearn.neighbors import KNeighborsClassifier #Load the data df = pd.read_csv('dataset.csv') #Split the labels and independent variables x = df.iloc[:,:-1].values y = df.iloc[:,-1].values # Fit KNN algorithm on the dataset knn = KNeighborsClassifier(n_neighbors=5, metric='euclidean') knn.fit(x,y)"},{"prompt":"Design a Python class named Animal that has three instance variables: species, color and age.","completion":"class Animal: def __init__(self, species, color, age): self.species = species self.color = color self.age = age"},{"prompt":"Write an OpenAI Gym environment in Python to identify Left and Right directions for a robot navigating in a 5x5 grid. Not applicable","completion":"import gym from gym import spaces import numpy as np class LeftRightEnv(gym.Env): def __init__(self): self.action_space = spaces.Discrete(2) self.observation_space = spaces.Box(low=0, high=4, shape=(2,)) self.state = np.array([0, 0]) def step(self, action): info = {} done = False reward = 0 if action == 0: new_position = np.array([self.state[0], self.state[1] - 1]) elif action == 1: new_position = np.array([self.state[0], self.state[1] + 1]) else: raise ValueError('Invalid action: {}'.format(action)) self.state = new_position done = self.state[0] == 4 and self.state[1] == 3 if done: reward = 1 # Reward for reaching the goal return self.state, reward, done, info def reset(self): self.state = np.array([0, 0]) return self.state def render(self, mode='human', close=False): pass"},{"prompt":"Design a class in Python for representing a student enrollment at a school given the student's name, age, and the school they are enrolled in.","completion":"class StudentEnrollment: def __init__(self, name, age, school): self.name = name self.age = age self.school = school # Example student1 = StudentEnrollment(\\"John Doe\\", 10, \\"ABC School\\")"},{"prompt":"Create a bot that can identify keywords in natural language queries and respond with appropriate answers. query: When will the next Star Wars movie be released?","completion":"# Python code # define keywords keywords = { 'star wars': ['release date', 'when released'], 'next': ['when', 'release date', 'when released'], 'movie': ['what', 'when', 'release date', 'when released'] } # define answers answers = { 'star wars': 'The next Star Wars movie is scheduled to be released on December 16, 2022.', 'next': 'The next Star Wars movie is scheduled to be released on December 16, 2022.', 'movie': 'The next movie in the Star Wars franchise is scheduled to be released on December 16, 2022.' } # code to identify the query def identify_query(query): words = query.lower().split(' ') for word in words: if word in keywords: return keywords[word] return [] # code to respond to the query def respond(query): for keyword in identify_query(query): if keyword in answers: return answers[keyword] # Main query = input('Ask me anything about Star Wars movies: ') answer = respond(query) if answer: print(answer) else: print('Sorry, I do not understand your query.')"},{"prompt":"Create a Python script that downloads the first 5 pages of content from Wikipedia for a given search query. Search query: Machine learning","completion":"import requests from bs4 import BeautifulSoup query = 'Machine learning' pages = 5 for i in range(1, pages+1): url = f'https://en.wikipedia.org/wiki/{query}' headers = {'User-Agent': 'Mozilla/5.0'} page = requests.get(url, headers=headers) soup = BeautifulSoup(page.content, 'html.parser') print(soup.title.string) print(soup.find(id='mw-content-text'))"},{"prompt":"Write a Python program to print “Hello, World!” five times.","completion":"for _ in range(5): print(\\"Hello, World!\\")"},{"prompt":"Generate a function in Python to search for a substring in a given string. This function should be case and pattern insensitive. Not applicable","completion":"def match_text(text, search_string): \\"\\"\\"Returns all occurrences of substring in the given string with case and pattern insensitivity. Args: text (str): A string. search_string (str): The substring for which to search. Returns: A list of all occurrences in the given string. \\"\\"\\" matches = [] # Construct a case and pattern insensitive regex expression search_string = re.compile(search_string, re.IGNORECASE) # Search the string and add the matches to a list for match in search_string.finditer(text): matches.append(match.group(0)) return matches"},{"prompt":"Write a Python program to generate a sorted list of unique numbers from 0 to 9 in random order. Not applicable","completion":"import random # generating a list of unique numbers from 0 to 9 in random order random_numbers = random.sample(range(0, 10), 10) # sort list of numbers random_numbers.sort() # print sorted list of random numbers print(random_numbers) # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"},{"prompt":"Create a python function to make bulk API calls efficiently and push the result data to a cloud storage. [ ‘https://somesite.com/api/1’, ‘https://somesite.com/api/2’, ‘https://somesite.com/api/3’, ]","completion":"import requests from google.cloud import storage def bulk_api_calls(api_list): result_data = [] for url in api_list: response = requests.get(url) result_data.append(response.json()) # uploading to the cloud storage storage_client = storage.Client() bucket = storage_client.bucket('my-bucket') blob = bucket.blob('api_result_data.json') blob.upload_from_string(str(result_data)) return result_data"},{"prompt":"Write a python program to classify a Web page into one of three categories: Business/Industry, Arts/Entertainment, or Education.","completion":"def webpage_classification(url): ''' This function takes a URL as input and returns one of three categories: Business/Industry, Arts/Entertainment, or Education. ''' # get the content of the webpage response = requests.get(url) content = BeautifulSoup(response.content, 'html.parser') # define some keywords lists business_words = ['business', 'industry', 'markets', 'investment'] entertainment_words = ['entertainment', 'music', 'art', 'movies'] education_words = ['university', 'school', 'college', 'education'] # loop through the keywords in each category and check if any of them are present in the content for word in business_words: if word in content: return 'Business/Industry' for word in entertainment_words: if word in content: return 'Arts/Entertainment' for word in education_words: if word in content: return 'Education' # if none of the words matched, return None return None"},{"prompt":"Create an algorithm in Python to find the smallest number in an unsorted list [12, 5, 9, 8, 10]","completion":"def find_smallest(list): smallest = list[0] for num in list: if num < smallest: smallest = num return smallest result = find_smallest([12, 5, 9, 8, 10]) print(result)"},{"prompt":"Create a class in Python for a 2D vector with the basic vector operations addition, subtraction, dot product and cross product.","completion":"class Vector2D: \\"\\"\\"Represents a 2D vector with the basic vector operations- addition, subtraction, dot product, and cross product.\\"\\"\\" def __init__(self, x, y): self.x = x self.y = y def __add__(self, other): \\"\\"\\"Adds two vectors.\\"\\"\\" x = self.x + other.x y = self.y + other.y return Vector2D(x, y) def __sub__(self, other): \\"\\"\\"Subtracts two vectors.\\"\\"\\" x = self.x - other.x y = self.y - other.y return Vector2D(x, y) def dot(self, other): \\"\\"\\"Returns the dot product of two vectors.\\"\\"\\" return self.x * other.x + self.y * other.y def cross(self, other): \\"\\"\\"Returns the cross product of two vectors.\\"\\"\\" return self.x * other.y - self.y * other.x"},{"prompt":"Optimize a Python script to find the maximum value of a series of numbers. lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def find_max(lst): max_value = None for number in lst: if max_value is None or number > max_value: max_value = number return max_value # Main lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] max_value = find_max(lst) print('The maximum value of the list is {}'.format(max_value))"},{"prompt":"Write code to generate a set of random numbers between 0 and 10 in Python. Number of values in the set: 5","completion":"import random values = random.sample(range(11), 5) print(values) // [5, 9, 3, 4, 1]"},{"prompt":"Design a recommender system in Python that suggests similar items to a given item based on its attributes. A list of book objects with id, author, title, publisher, and reviews properties.","completion":"def get_recommendations(books): recommendations = [] for book in books: # Mapping books to a vector for comparison vector_book = [book['author'], book['title'], book['publisher']] # Iterating through the list of books to check similarities for other_book in books: # Mapping other books in the list books to a vector for comparison other_vector_book = [other_book['author'], other_book['title'], other_book['publisher']] # Check similarity if other_vector_book != vector_book and evaluate_similarity(vector_book, other_vector_book): recommendations.append(other_book['id']) return recommendations def evaluate_similarity(vector_book1, vector_book2): # Perform algorithm for checking the similarity of two books # e.g. Pearson correlation return True # or False"},{"prompt":"Generate a Python program to perform a linear search of an array.","completion":"def linear_search(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1"},{"prompt":"Generate code for a simple calculator app in Python.","completion":"import sys # Simple python calculator # Function to add two numbers def add(num1, num2): return num1 + num2 # Function to subtract two numbers def subtract(num1, num2): return num1 - num2 # Function to multiply two numbers def multiply(num1, num2): return num1 * num2 # Function to divide two numbers def divide(num1, num2): return num1 / num2 # Get user input while True: num1 = float(input(\\"Enter first number: \\")) num2 = float(input(\\"Enter second number: \\")) task = input(\\"What do you want to do (add/subtract/multiply/divide): \\") # Perform task if task == \\"add\\": output = add(num1, num2) elif task == \\"subtract\\": output = subtract(num1, num2) elif task == \\"multiply\\": output = multiply(num1, num2) elif task == \\"divide\\": output = divide(num1, num2) else: output = \\"Invalid input\\" # Print output print(f\\"Result: {output}\\") command = input(\\"Do you wish to continue? (y/n): \\") if command == \\"y\\": continue else: sys.exit()"},{"prompt":"Create a Python program to find the sum of all the even elements in a given list.","completion":"def sum_even_elements(list): sum = 0 for item in list: if item % 2 == 0: sum += item return sum"},{"prompt":"Create a python program that calculates and prints the average of the three given numbers. 4, 5, 6","completion":"def avg(x, y, z): total = x + y + z return total / 3 x = 4 y = 5 z = 6 average = avg(x, y, z) print('Average of the three numbers is:', average)"},{"prompt":"Create a Recurrent Neural Network Model in Python that can predict the value of a stock index. The input data should include historical prices of a stock index over the past 5 years, with daily updates.","completion":"import pandas as pd import numpy as np import tensorflow as tf # Load the data df = pd.read_csv(\\"stock_data.csv\\") # Prepare the data, normalize it and prepare labels data = df.values X_data = data[:,:-1] Y_data = data[:,-1] # rescale data X_data = X_data/np.amax(X_data) Y_data = Y_data/100. # dataset size and number of timesteps training_sample_cnt = X_data.shape[0] time_steps = X_data.shape[1] # initialize weights, recurrent cell and output layer weights = init_weights() recurrent_cell = init_recurrent_cell() output_layer = init_output_layer() # reshape the data for RNN X_tensor = tf.reshape(X_data, [-1, time_steps]) # Split the data X_tensor = tf.split(X_tensor, training_sample_cnt, 0) # Create RNN rnn_output, states = rnn(recurrent_cell, X_tensor, weights, time_steps) # Get output rnn_output = tf.reshape(rnn_output, [-1, time_steps]) Y_predict = output_layer(rnn_output) # Create loss loss = tf.losses.mean_squared_error(Y_data, Y_predict) # Optimize optimizer = tf.train.GradientDescentOptimizer(0.01).minimize(loss)"},{"prompt":"Create a Python program to detect duplicate words in a given string. Not applicable","completion":"def findDuplicates(text): words = text.split(' ') duplicate_words_list = [] for i in range(len(words)): for j in range(i+1, len(words)): if words[i] == words[j]: duplicate_words_list.append(words[i]) return duplicate_words_list print(findDuplicates('Hello my name is John I live in Virginia')) # Output: ['my', 'is', 'in']"},{"prompt":"Create a python program to calculate the value of 'x' in the equation y = 4x + 7. y = 17","completion":"y = 17 x = (y - 7) / 4 print(\\"x =\\", x)"},{"prompt":"Create a basic Machine Learning model to predict whether a customer is likely to buy a product or not using ScikitLearn in Python. Not applicable","completion":"import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # Load the data X = np.load(\\"features.npy\\") y = np.load(\\"labels.npy\\") # Split the data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and train the model model = LogisticRegression() model.fit(X_train, y_train) # Test the model on the test data accuracy = model.score(X_test, y_test) print('Accuracy:', accuracy)"},{"prompt":"Create a reinforcement learning model in Python for continuous control of a lunar landing spacecraft using neural networks. Not applicable","completion":"import gym import tensorflow as tf # Create a Lunar Lander environment env = gym.make('LunarLander-v2') # Initialize state and action dimensions state_dim = env.observation_space.shape[0] action_dim = env.action_space.n # Create a neural network model model = tf.keras.Sequential() model.add(tf.keras.layers.Dense(128, input_dim=state_dim, activation='relu')) model.add(tf.keras.layers.Dense(64, activation='relu')) model.add(tf.keras.layers.Dense(action_dim)) # Initialize an Agent for the environment agent = Agent(env, model) # Train the agent agent.train()"},{"prompt":"Write a Python program to solve a quadratic equation given the coefficients a, b, c?","completion":"import math def solve_quadratic(a, b, c): # calculate discriminant d = (b**2) - (4*a*c) # find two solutions sol1 = (-b-math.sqrt(d))/(2*a) sol2 = (-b+math.sqrt(d))/(2*a) return sol1, sol2"},{"prompt":"Create a web scraper in Python that can extract articles from a website given its URL. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Define the function to scrape articles from a website def scrape_articles(url): # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Return articles return soup.find_all(\\"article\\") # Example articles = scrape_articles('https://example.com/news')"},{"prompt":"Generate a Python program to convert a given binary string to its equivalent decimal value. 1110","completion":"def binary_to_decimal(n): num = n dec_value = 0 base = 1 temp = num while temp > 0: last_digit = temp % 10 temp = temp // 10 dec_value += last_digit * base base = base * 2 return dec_value"},{"prompt":"Write a Python program to optimize this linear equation. x + y = 5","completion":"# function to solve equation def solve(eqn): x, y = sympy.symbols('x y') return sympy.solve((eqn, ), (x, y)) # equation eqn = x + y - 5 # solve equation result = solve(eqn) x_sol = result[x] y_sol = result[y] print(\\"x =\\", x_sol) print(\\"y =\\", y_sol)"},{"prompt":"Write a python program to create a class that converts from Celsius to Fahrenheit.","completion":"class Celsius_to_Fahrenheit: def __init__(self, celsius): self.celsius = celsius def to_fahrenheit(self): return (self.celsius * 9 / 5) + 32"},{"prompt":"Generate a python program to print out the following pattern of stars","completion":"for i in range(1, 6): for j in range(i): print (\\"* \\", end=\\"\\") print(\\"n\\") for i in reversed(range(1, 5)): for j in range(i): print (\\"* \\", end=\\"\\") print(\\"n\\")"},{"prompt":"Generate a python program to sort a given linked list using the quicksort algorithm","completion":"def sort_linked_list(head): if not head or head.next is None: return head mid = get_middle(head) mid_next = mid.next l1 = sort_linked_list(head) l2 = sort_linked_list(mid_next) return merge(l1, l2) def merge(l1, l2): if l1 is None: return l2 if l2 is None: return l1 if l1.val < l2.val: l1.next = merge(l1.next, l2) return l1 else: l2.next = merge(l1, l2.next) return l2 def get_middle(head): if not head: return head slow = head fast = head while fast.next and fast.next.next: slow = slow.next fast = fast.next.next return slow"},{"prompt":"Write a machine learning model in Python to predict the classification of the given email. Email subject: Holiday alert Email body: Hi everyone, we have planned a holiday on 15th August.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.naive_bayes import MultinomialNB # read in the data df = pd.read_csv('data.csv') # split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(df['email_text'], df['class'], test_size=0.2) # create the TF-IDF vectorizer and fit it to our training data vectorizer = TfidfVectorizer() X_train = vectorizer.fit_transform(X_train) # create and train the model model = MultinomialNB() model.fit(X_train,y_train) # predict the classification of the given email email_text = \\"Holiday alert. Hi everyone, we have planned a holiday on 15th August.\\" email_text_transform = vectorizer.transform([email_text]) prediction = model.predict(email_text_transform) print(\\"The predicted classification of the email is: {}\\".format(prediction[0]))"},{"prompt":"Generate a Pythonbased web service that can access a NoSQL database like MongoDB. Not applicable","completion":"# Import necessary libraries import flask from flask import request, jsonify from flask_pymongo import PyMongo # Create the Flask app app = Flask(__name__) # Connect to the MongoDB instance mongo = PyMongo(app) # Create the route for accessing the NoSQL database @app.route('/getData', methods=['GET']) def get_data(): # Query the database data = mongo.db.yourDatabase.find({}) # Create an empty list and store the results in a list output = [] for q in data: output.append({ 'id': q['id'], 'name': q['name'], 'age': q['age'] }) # Return the results as a JSON Object return jsonify({'result': output})"},{"prompt":"Write a Python program to convert a list to a tuple [1,2,3]","completion":"def list_to_tuple(list): return tuple(list)"},{"prompt":"Write a Python program to format a specified string to limit the number of characters to 6. string = abcdefghijklmnopqrstuvwxyz","completion":"def limit_string(string): \\"\\"\\"Format the specified string to limit the number of characters to 6.\\"\\"\\" return string[:6]"},{"prompt":"Write a python function to generate the power set for a given set. A = {1, 2, 3}","completion":"def powerset(A): result = [] for i in range(len(A)+1): for subset in itertools.combinations(A,i): result.append(subset) return result A = {1, 2, 3} print(powerset(A)) #Output: #[(), (1, ), (2, ), (3, ), (1, 2), (1, 3), (2, 3), (1, 2, 3)]"},{"prompt":"Write a Python program to delete vowels from a given string. 'My name is John'","completion":"def removeVowels(string): vowels = ('a', 'e', 'i', 'o', 'u') new_string = '' for char in string: if char not in vowels: new_string += char return new_string string = 'My name is John' removeVowelString = removeVowels(string) print(removeVowelString)"},{"prompt":"Create a basic chatbot in Python that can answer basic questions. Not applicable","completion":"#import statements import nltk import string import random #Define basic greetings greetings = ['hi', 'hey', 'hello', 'hi there'] #Define basic farewells farewells = ['bye', 'goodbye', 'see you later'] #Define a minimum threshold for match recognition min_threshold = 0.6 #Define corpus corpus = { 'Hi': ['Hello', 'Hey'], 'What is your name?': ['My name is Simbot', 'I am Simbot'], 'How are you?': ['I am good', 'I am doing great'] } #Define a function to tokenize a given sentence def tokenize_sentence(sentence): return nltk.word_tokenize(sentence.lower().translate(str.maketrans('', '', string.punctuation))) #Define a function to calculate match score between tokenized sentence and corpus def calculate_match_score(tokenized_text, corpus_key): normalized_match_score = 0 for token in tokenized_text: if token in corpus_key: normalized_match_score += 1/len(tokenized_text) return normalized_match_score #Define a function to find closest matched sentence from corpus def find_closest_matched_sentence(sentence): tokenized_sentence = tokenize_sentence(sentence) match_score = 0 corpus_key = '' corpus_response = '' for key in corpus.keys(): value = corpus[key] tokenized_key = tokenize_sentence(key) score = calculate_match_score(tokenized_sentence, tokenized_key) if score > match_score and score >= min_threshold: match_score = score corpus_key = key corpus_response = random.choice(value) return corpus_response #Define a function to generate response def generate_response(user_input): user_input = user_input.lower() if user_input in greetings: return 'Hi, how can I help you today?' elif user_input in farewells: return 'Goodbye, have a nice day!' else: return find_closest_matched_sentence(user_input) #Get user input user_input = input('Enter your message: ') #Generate response response = generate_response(user_input) #Print response print(response)"},{"prompt":"Write a Python code to print the items in a dictionary in the order of their occurrence in the dictionary. d = {1 : 'Red', 2 : 'Green', 3 : 'Blue'}","completion":"for key, value in d.items(): print(key, value)"},{"prompt":"Create a Python program that converts a list of numbers into a dictionary, where the key is the number and the value is the corresponding difference between two immediate numbers in the list. [1, 2, 4, 7, 11]","completion":"def diff_in_list(input_list): \\"\\"\\"This function takes a list of integers and returns a dictionary with the input number as key and the difference between two immediate numbers as value.\\"\\"\\" output_dict = {} # Iterate over the list and create a dictionary with the # input number as key and the difference between # two immediate numbers as value for i in range(len(input_list) - 1): output_dict[input_list[i]] = input_list[i + 1] - input_list[i] return output_dict # Sample Input input_list = [1, 2, 4, 7, 11] # Print the output print(diff_in_list(input_list))"},{"prompt":"Program a basic Poker game simulator in Python. Not applicable","completion":"import random # suits of a deck of cards (♣, ♠, ♥, ♦) suits = [\\"clubs\\", \\"spades\\", \\"hearts\\", \\"diamonds\\"] # values of a deck of cards (Ace, 2-10, Jack, Queen, King) values = [\\"ace\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"10\\", \\"jack\\", \\"queen\\", \\"king\\"] # deck of cards deck = [value + \\" of \\" + suit for value in values for suit in suits] # shuffling the deck random.shuffle(deck) # dealing the cards player_hand = [] dealer_hand = [] player_hand.append(deck[0]) dealer_hand.append(deck[1]) player_hand.append(deck[2]) dealer_hand.append(deck[3]) # calculating the points of the player's and of the dealer's hand player_points = 0 dealer_points = 0 for card in player_hand: if card[0] == \\"a\\": player_points += 11 elif card[0] == \\"j\\" or card[0] == \\"q\\" or card[0] == \\"k\\": player_points += 10 else: player_points += int(card[0]) for card in dealer_hand: if card[0] == \\"a\\": dealer_points += 11 elif card[0] == \\"j\\" or card[0] == \\"q\\" or card[0] == \\"k\\": dealer_points += 10 else: dealer_points += int(card[0]) # making decision if player_points > dealer_points: print(\\"Player wins!\\") elif dealer_points > player_points: print(\\"Dealer wins!\\") else: print(\\"Draw!\\")"},{"prompt":"Write a Python program to edit the following code in such a way that the output is increased is increased by one. def add_two_numbers(a, b): c = a + b d = a b total = c + d print(total)","completion":"def add_two_numbers(a, b): c = a + b d = a - b total = c + d + 1 print(total)"},{"prompt":"Construct a parser in Python to identify the parts of speech in a given sentence. This is a great day.","completion":"import spacy nlp = spacy.load('en_core_web_sm') # Define the sentence to be parsed sentence = 'This is a great day.' # Create a Doc object doc = nlp(sentence) # Print the parts of speech for token in doc: print(token.text, token.pos_) # Output: # This DET # is VERB # a DET # great ADJ # day NOUN # . PUNCT"},{"prompt":"Write a Python program to search through a list of dictionaries for a specific keyvalue pair, and return the corresponding value. L = [{'id': 1, 'name': 'John'}, {'id': 2, 'name': 'Alice'}, {'id': 3, 'name': 'Bob'}]","completion":"def search(lst, key, value): for dict in lst: if dict[key] == value: return dict[value] return None #search for name with id 2 search(L, 'id', 2) #outputs 'Alice'"},{"prompt":"Train a machine learning model in Python to predict the COVID19 fatalities in a given region.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LinearRegression # Load data data = pd.read_csv('data.csv') # Split data into features and targets X = data.drop(['Fatalities'], axis=1).values y = data['Fatalities'].values # Split data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42) # Normalize data scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Train machine learning model model = LinearRegression() model.fit(X_train, y_train) # Predict fatalities in given region predictions = model.predict(X_test)"},{"prompt":"Generate a python script which sorts a series of numbers from lowest to highest. 7, 2, 5, 1, 3","completion":"unsorted_list = [7, 2, 5, 1, 3] def bubblesort(unsorted_list): length = len(unsorted_list) for i in range(length): for j in range(length - i - 1): if unsorted_list[j] > unsorted_list[j + 1]: unsorted_list[j], unsorted_list[j + 1] = unsorted_list[j + 1], unsorted_list[j] return unsorted_list print(bubblesort(unsorted_list))"},{"prompt":"Create a random number generator in Python.","completion":"import random def generate_random_number(): # Generate a random number between 0 and 1 return random.random()"},{"prompt":"Write a Python program to print the numbers from 1 to 10 in ascending order, separated by a space.","completion":"for i in range(1, 11): print(i, end = ' ')"},{"prompt":"Create a Python code that generates a combination of elements from a given array. arr = [a, b, c, d], n = 2","completion":"def combinations(arr, n): for i in range(len(arr)): for j in range(i + 1, len(arr)): print(arr[i], arr[j]) combinations(arr, n)"},{"prompt":"Create a python program to implement an algorithm to find the square root of a given number","completion":"def sqrt(x): result = x eps = 0.000001 while abs(result*result - x) > eps: result = (result + x/result) / 2 return result"},{"prompt":"Create a Python program to zip two lists of same size into one dictionary. list1 = [1,2,3] list2 = [4,5,6]","completion":"list1 = [1,2,3] list2 = [4,5,6] zip_dict = dict(zip(list1, list2)) print(zip_dict) # {1: 4, 2: 5, 3: 6}"},{"prompt":"Develop a linear search algorithm in Python to find an element in an array. [1, 5, 8, 10], 8","completion":"def linearSearch(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1 # Driver Code arr = [1, 5, 8, 10] x = 8 # Function call result = linearSearch(arr, x) if(result == -1): print(\\"Element is not present in the array\\") else: print(\\"Element is present at index\\", result)"},{"prompt":"Find the first 5 prime numbers using python.","completion":"prime_nums = [2, 3, 5, 7, 11] print(\\"The first 5 prime numbers are: \\", prime_nums)"},{"prompt":"Write a Python code that prints out all the even numbers between 2 and 100.","completion":"for i in range(2, 101): if i % 2 == 0: print(i)"},{"prompt":"Reverse a Python list without using any inbuilt functions list_ = [1, 2, 3, 4]","completion":"def reverse_list_without_function(list_): result = [] for i in range(len(list_)-1,-1,-1): result.append(list_[i]) return result list_ = [1,2,3,4] print(reverse_list_without_function(list_)) # => [4, 3, 2, 1]"},{"prompt":"Design a function for ordering a pizza in Python and use it to order a pizza with 3 toppings. Toppings: Pepperoni, Mushroom, Olive","completion":"def orderPizza(toppings): print(\\"Ordering a pizza with the following toppings:\\") for topping in toppings: print(topping) print(\\"Thank you!\\") orderPizza([\\"Pepperoni\\", \\"Mushroom\\", \\"Olives\\"])"},{"prompt":"Write a Python script to generate a report in JSON format that summarizes the user data in a database. User table id: int name: varchar(50) gender: enum('male', 'female') age:","completion":"import json import mysql.connector # Connect to the database mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"user\\", passwd=\\"password\\", database=\\"db_name\\" ) # Get data from the user table mycursor = mydb.cursor() mycursor.execute(\\"SELECT * FROM user\\") results = mycursor.fetchall() # Generate a summary report report = {} report['report_name'] = 'User data summary' report['summary'] = [{'Total': len(results), 'Male': 0, 'Female': 0, 'Average Age': 0}] total_ages = 0 for result in results: if result[2] == 'male': report['summary'][0]['Male'] += 1 else: report['summary'][0]['Female'] += 1 total_ages += result[3] if len(results) > 0: report['summary'][0]['Average Age'] = round(total_ages/len(results), 2) # Output the report print(json.dumps(report, indent=2))"},{"prompt":"Create a function in Python which will return the maximum and minimum elements from a given list of numbers. [3, 4, 7, 1, 9]","completion":"def max_min(lst): return max(lst), min(lst)"},{"prompt":"Create a Python code to decode an URL. http://www.example.com/?param1=hello&param2=world","completion":"import urllib.parse def decode_url(url): parsed_url = urllib.parse.urlparse(url) return urllib.parse.parse_qs(parsed_url.query) decode_url(\\"http://www.example.com/?param1=hello&param2=world\\")"},{"prompt":"Build a basic calculator in Python to support addition, subtraction, multiplication, and division.","completion":"def calculator(operation, num1, num2): if operation == 'add': return num1+num2 elif operation == 'subtract': return num1-num2 elif operation == 'multiply': return num1*num2 elif operation == 'divide': return num1//num2 else: print(\\"Invalid operation\\") return"},{"prompt":"Design a program in Python which takes in a string and encypts it using Caesar Cipher. Hello world, key 5","completion":"def encrypt(text, key): encrypted_text = \\"\\" for i in range(len(text)): char = text[i] if (char.isupper()): encrypted_text += chr((ord(char) + key - 65) % 26 + 65) else: encrypted_text += chr((ord(char) + key - 97) % 26 + 97) return encrypted_text text = \\"Hello World\\" key = 5 print(\\"Encrypted Text: \\", encrypt(text, key))"},{"prompt":"Generate a crypto wallet address using Python.","completion":"from web3 import Web3 from web3.personal import Personal # Create a Web3 instance to use w3 = Web3(Web3.EthereumTesterProvider()) # Create a Personal instance to use personal = Personal(w3) # Generate a new wallet address address = personal.newAccount('my_wallet_password') print(address) # Output: 0x..."},{"prompt":"Given the following Python function, use optimization techniques to reduce the running time of the function. def functionA(n): s = 0 for i in range(n): for j in range(i+1): s += j return","completion":"def functionA_opt(n): s = 0 s = n*(n+1)*(n+2) // 6 return s"},{"prompt":"mplement a program in Python to find the average of an array of length n. Input: [2, 4, 6, 8, 10]","completion":"def findAverage(arr): # Initialize sum sum = 0 # Iterate over the array to calculate sum for n in arr: sum += n # Calculate the average and return return sum/len(arr) # Driver code arr = [2, 4, 6, 8, 10] print(findAverage(arr))"},{"prompt":"Given a JSON document, write a Python code to query for all records with a price value greater than 5. { id: 0001, type: donut, name: Cake, price: 5.99 }, { id: 0002, type: donut, name: Chocolate, price: 3.99 }","completion":"import json def query_price(data): # Load data from string records = json.loads(data) # Query for all records with a price value greater than 5. return [record for record in records if record['price'] > 5]"},{"prompt":"Design a program in Python to find all words present in a string.","completion":"def find_words(s): words = [] word = [] for char in s: if char.isalpha(): word.append(char) else: if word: words.append(\\"\\".join(word)) word = [] if word: words.append(\\"\\".join(word)) return words if __name__ == '__main__': print(find_words(\\"This is a sample string\\"))"},{"prompt":"mplement a method in Python that takes an integer n and returns the nth Fibonacci number. Not applicable","completion":"def fibonacci(n): if n==0: return 0 elif n==1: return 1 else: return fibonacci(n-1)+fibonacci(n-2)"},{"prompt":"Write a Python program to automate web form filling.","completion":"from selenium import webdriver browser = webdriver.Chrome() # navigate to website browser.get(\\"website_url\\") # fill form name_field = browser.find_element_by_id(\\"name\\") name_field.send_keys(\\"John Doe\\") email_field = browser.find_element_by_id(\\"email\\") email_field.send_keys(\\"example@domain.com\\") age_field = browser.find_element_by_id(\\"age\\") age_field.send_keys(\\"25\\") # submit form submit_button = browser.find_element_by_id(\\"submit\\") submit_button.click()"},{"prompt":"Write a Python program to find the three numbers from an array whose sum is closest to an given number arr = [59, 40, 20, 90] num = 70","completion":"def find_closest_sum(arr, num): arr.sort() final_sum = None closest_sum = None prev_diff = float(\\"inf\\") for i in range(len(arr)): for j in range(i+1, len(arr)): for k in range(j+1, len(arr)): sum = arr[i] + arr[j] + arr[k] diff = abs(num - sum) if diff < prev_diff: prev_diff = diff closest_sum = sum return closest_sum print(find_closest_sum(arr, num))"},{"prompt":"Create a program in Python that takes in a list of strings and returns the longest common substring between all the strings. [hello, hi, hell]","completion":"def longest_common_substring(strs): substr = strs[0] for s in strs[1:]: i = 0 while i < min(len(substr), len(s)) and substr[i] == s[i]: i += 1 substr = substr[:i] return substr print(longest_common_substring([\\"hello\\", \\"hi\\", \\"hell\\"])) # Prints \\"hell\\""},{"prompt":"What is the best way to query a MySQL database in Python?","completion":"The best way to query a MySQL database in Python is by using the MySQL Connector/Python library. It is an official Oracle-supported driver that allows you to easily connect with MySQL databases and execute queries. It provides a Python Database API that complies with the Python Database API Specification v2.0. The library also has support for prepared statements, transactions, and more."},{"prompt":"Write a Python script that allows users to play the classic game, RockPaperScissors. Not applicable","completion":"import random # Display the game introduction print(\\"This is a game of Rock-Paper-Scissors!\\") # Assign different values to each of the options options = { 'rock': 0, 'paper': 1, 'scissors': 2 } # Get user inputs user_choice = input(\\"nWhat is your choice? Rock (r), Paper (p), or Scissors (s): \\").lower() # Check if user input is valid if user_choice not in options: print(\\"Not a valid choice. Try again!\\") else: computer_choice = random.choice(list(options)) print(f\\"Computer chose {computer_choice}\\") # Comparing user and computer choices if user_choice == computer_choice: print(\\"It's a tie!\\") elif user_choice == 'rock': if computer_choice == 'paper': print(\\"Computer won!\\") else: print(\\"User won!\\") elif user_choice == 'paper': if computer_choice == 'rock': print(\\"User won!\\") else: print(\\"Computer won!\\") elif user_choice == 'scissors': if computer_choice == 'rock': print(\\"Computer won!\\") else: print(\\"User won!\\")"},{"prompt":"Build a python class that takes two parameters and returns the sum of the two numbers.","completion":"class Summation: def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def get_sum(self): return self.num1 + self.num2 total = Summation(5, 10).get_sum() print(total)"},{"prompt":"Create a python program to calculate the sum of two numbers and show the result in the console. 12, 7","completion":"# Calculate the sum of two numbers num1 = 12 num2 = 7 sum = num1 + num2 # Print the result print('The sum of two numbers is ', sum)"},{"prompt":"Write a Python program to search a given string for the first occurrence of a given substring. string = The quick brown fox, substring = fox","completion":"string = \\"The quick brown fox\\" substring = \\"fox\\" def find_substring(string, substring): index = string.find(substring) if index == -1: print(\\"Substring not found!\\") else: print(\\"Substring found at index:\\", index) find_substring(string, substring)"},{"prompt":"Create a function in Python to sort a dictionary by value and return the result as a list. my_dict = {'A': 1, 'B': 2, 'C': 3}","completion":"def sort_dictionary_by_value(my_dict): sorted_list = sorted(my_dict.items(), key=lambda x: x[1]) return sorted_list my_dict = {'A': 1, 'B': 2, 'C': 3} print(sort_dictionary_by_value(my_dict))"},{"prompt":"Generate a code to convert a given name to its uppercase version. joh","completion":"\\"\\"\\" Python program to convert a name to uppercase \\"\\"\\" def to_uppercase(name): return name.upper() name = \\"john\\" print(to_uppercase(name))"},{"prompt":"Generate a Python program which takes two lists and returns a list which contain only the items which are shared between the two lists [1, 2, 3], [3, 4, 5]","completion":"def find_intersection(list1, list2): intersection = [] for item1 in list1: for item2 in list2: if item1 == item2: intersection.append(item1) return intersection list1 = [1, 2, 3] list2 = [3, 4, 5] result = find_intersection(list1, list2) print(result)"},{"prompt":"Create a Python program that, given an input integer, will print out a dictionary with the numbers from 1 to the input value and their squares. number = 15","completion":"def create_dict_squares(number): squares_dict = {} for i in range(1, number + 1): squares_dict[i] = i**2 return squares_dict"},{"prompt":"Design a function in Python to sort a list of numbers in increasing order using a recursive insertion sort algorithm. [3, 7, 4, 9, 5, 2, 6, 1]","completion":"def recursiveInsertionSort(arr): for i in range(1, len(arr)): currElem = arr[i] j = i - 1 while j >= 0 and arr[j] > currElem: arr[j + 1] = arr[j] j -= 1 arr[j + 1] = currElem return arr"},{"prompt":"Modify the Python program to calculate the sum of an array so that it finds the largest number in the array. array = [1, 2, 3, 4, 5]","completion":"def array_sum(arr): largest = 0 for num in arr: largest = max(largest, num) return largest print(array_sum([1, 2, 3, 4, 5]))"},{"prompt":"mplement a binary search algorithm in Python.","completion":"def binarySearch(nums, target): if len(nums) == 0: return -1 left = 0 right = len(nums) - 1 while left <= right: mid = (left + right) // 2 if nums[mid] == target: return mid elif nums[mid] < target: left = mid + 1 else: right = mid - 1 return -1"},{"prompt":"Suggest a Python code to print the following text in the output: This is a example sentence.","completion":"print(\\"This is an example sentence\\")"},{"prompt":"Create a Python function which takes an integer and returns True or False depending on whether it is a prime number or not respectively. Not applicable","completion":"def is_prime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True"},{"prompt":"Develop a Python script that prints out the numbers from 0 to 9 in descending order?","completion":"for n in reversed(range(0,10)): print(n)"},{"prompt":"Design an algorithm in Python and write a function to reverse an array. [1,2,3,4]","completion":"def reverse_array(arr): start = 0 end = len(arr) - 1 while(start < end): arr[start], arr[end] = arr[end], arr[start] start += 1 end -= 1 return arr"},{"prompt":"Create a basic web scraper in Python using the requests library and the Beautiful Soup library. The web scraper should take a URL as an argument and print the text content of the page. Url: https://example.com","completion":"import requests from bs4 import BeautifulSoup # Define the URL url = 'https://example.com' # Make a request response = requests.get(url) # Parse the HTML soup = BeautifulSoup(response.text, 'html.parser') # Print the text contents print(soup.text)"},{"prompt":"Write a Python program to create a dictionary from two given lists. The lists should be of equal length and the values in the dictionary should be the elements of the lists at the same index. list_1 = [1,2,3] list_2 = [A,B,C]","completion":"list_1 = [1,2,3] list_2 = [\\"A\\",\\"B\\",\\"C\\"] # define a function to create the dictionary def create_dict(l1,l2): # dictionary variable dict={} # loop through both the lists for i in range(len(l1)): # add the values to the dictionary dict[l1[i]]=l2[i] # return the dictionary return dict # get the dictionary by calling the function dict_1_2=create_dict(list_1,list_2) # print the output print(dict_1_2) # Output: {1: 'A', 2: 'B', 3: 'C'}"},{"prompt":"Write an algorithm in Python that takes a list of elements and determines if the list is sorted or not. [4, 3, 1, 2, 5]","completion":"def is_sorted(lst): # base case: if the list is empty then it is sorted if not lst: return True # compare the first two element if lst[0] > lst[1]: return False # recursively call the function with the remaining elements in the list return is_sorted(lst[1:])"},{"prompt":"Finish a Python program to select all employees with a salary greater than 10,000. SELECT *","completion":"SELECT * FROM employees WHERE salary > 10000"},{"prompt":"Create a program in Python to access the Yelp API, search for a particular restaurant, and return the name, address, and rating of the top 5 matching restaurants. Not applicable","completion":"import requests import json YELP_API_KEY = '<YOUR API KEY>' # Get restaurant results from Yelp API def search_restaurants(location, term): url = 'https://api.yelp.com/v3/businesses/search' headers = { 'Authorization': 'Bearer {}'.format(YELP_API_KEY) } payload = { 'location': location, 'term': term } response = requests.get(url, headers=headers, params=payload) json_response = response.json() return json_response # Get top 5 restaurants def get_top_restaurants(json_response): businesses = json_response['businesses'] top_restaurants = [businesses[i] for i in range(5)] return top_restaurants # Print out the data def print_restaurant_data(top_restaurants): for restaurant in top_restaurants: print('Name: ', restaurant['name']) print('Address: ', restaurant['location']['address1']) print('Rating: ', restaurant['rating']) print('n') def main(): location = input('Enter a location: ') term = input('Enter a search term: ') json_response = search_restaurants(location, term) top_restaurants = get_top_restaurants(json_response) print_restaurant_data(top_restaurants) if __name__ == '__main__': main()"},{"prompt":"Generate a Python method to format a given string in the desired manner. I am learning python","completion":"def format_string(string): return string.lower().title()"},{"prompt":"Create a PythonFlask application for managing a library book catalog. The application should have routes for listing books, adding new books, and deleting books. Not applicable","completion":"# Import Flask and other necessary libraries from flask import Flask, render_template, request, jsonify # Create a Flask app app = Flask(__name__) # Create a books list in memory books = [ { 'name': 'Python Crash Course', 'author': 'Eric Matthes', 'read': False }, { 'name': 'Fluent Python', 'author': 'Luciano Ramalho', 'read': False } ] # Create app routes @app.route('/') def index(): return render_template('index.html') @app.route('/books', methods=['GET', 'POST']) def all_books(): if request.method == 'GET': return jsonify({'books': books}) elif request.method == 'POST': new_book = {'name': request.form.get('name'), 'author': request.form.get('author'), 'read': False} books.append(new_book) return jsonify({'books': books}) @app.route('/books/<int:index>', methods=['PUT', 'DELETE']) def single_book(index): if request.method == 'PUT': book = books[index] book['name'] = request.form.get('name') book['author'] = request.form.get('author') return jsonify({'book': book}) elif request.method == 'DELETE': books.pop(index) return jsonify({'books': books})"},{"prompt":"Develop a Python code to generate the nth number in the Fibonacci series. n = 8","completion":"\\"\\"\\" Develop a Python code to generate the nth number in the Fibonacci series. \\"\\"\\" def generate_fibonacci(n): if n == 1 or n == 2: return 1 else: a = 1 b = 1 for i in range(2, n): a, b = b, a + b return b if __name__ == '__main__': n = 8 print(generate_fibonacci(n))"},{"prompt":"Given a list of numbers, write a Python program to find the frequency of each number in the list. my_list = [1, 2, 3, 4, 1, 2, 3]","completion":"from collections import Counter def find_frequency(list): return Counter(list) my_list = [1, 2, 3, 4, 1, 2, 3] freq = find_frequency(my_list) print(freq)"},{"prompt":"Edit the code to make it in a Python program to check if a number is divisible by 5 and 11. def isDivisible(num): if num % 5 == 0: print(Number is divisible by 5) if num % 11 == 0: print(Number is divisible by 11)","completion":"def isDivisible(num): if num % 5 == 0 and num % 11 == 0: print(\\"Number is divisible by 5 and 11\\") else: print(\\"Number is not divisible by 5 and 11\\")"},{"prompt":"Develop a function in Python for performing sentiment analysis of a given text. A given text.","completion":"Develop a function in Python to analyze the sentiment in a given text. Utilize natural language processing (NLP) techniques such as tokenization and parts of speech tagging, then leverage a pre-trained sentiment classifier to determine the sentiment in the given text."},{"prompt":"Create a RESTful API in Python for a blog. The API should include endpoints for creating new blog posts, getting a list of blog posts, and getting a single blog post by its ID. Not applicable","completion":"from flask import Flask, request, jsonify app = Flask(__name__) posts = [] # Store posts in memory # Create a post @app.route('/posts', methods=['POST']) def create_post(): data = request.get_json() post = { 'id': len(posts)+1, 'title': data['title'], 'content': data['content'] } posts.append(post) return jsonify(post) # Get all posts @app.route('/posts', methods=['GET']) def get_posts(): return jsonify(posts) # Get single post @app.route('/posts/<int:id>', methods=['GET']) def get_post(id): return jsonify(posts[id-1]) app.run(debug=True)"},{"prompt":"Create a function in Python to determine the length of the longest common subsequence of two strings. string1: abcdef string2: abcef","completion":"def longest_subsequence(s1, s2): n = len(s1) m = len(s2) LCS = [[0 for k in range(m+1)]for l in range(n+1)] for i in range(n+1): for j in range(m+1): if i == 0 or j == 0: LCS[i][j] = 0 elif s1[i-1] == s2[j-1]: LCS[i][j] = LCS[i-1][j-1]+1 else: LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1]) return LCS[n][m]"},{"prompt":"Write a function in Python to get the number of occurrences of a particular character in a given sentence. sentence = Hello world! character = 'l'","completion":"def count_occurrences(sentence, character): return sentence.count(character)"},{"prompt":"Edit the following Python code to calculate the average of an array of numbers. arr = [3, 4, 5] sum = 0 for i in arr: sum = sum + i print(sum)","completion":"arr = [3, 4, 5] sum = 0 for i in arr: sum = sum + i average = sum / len(arr) print(average)"},{"prompt":"Generate a Python code to construct a tree data structure using the given incidence list. [('A', 'B'), ('A', 'C'), ('B', 'D'), ('B', 'E'), ('C', 'F'), ('C', 'G')]","completion":"def create_tree(incidence_list): \\"\\"\\" Generates a tree from the given incidence list. @param incidence_list: List @return: tuple \\"\\"\\" tree = {} for item in incidence_list: parent, child = item if parent in tree: tree[parent].append(child) else: tree[parent] = [child] return tree"},{"prompt":"Write a Python program to print out the Fibonacci sequence, up to the 100th number in the sequence. Not applicable","completion":"def fibonacci(n): a, b = 0, 1 while a < n: print(a, end=' ') a, b = b, a + b print() fibonacci(100)"},{"prompt":"Design an algorithm to solve the Towers of Hanoi puzzle with ndisks using Python.","completion":"def move_towers(n, source, target, middle): if n == 1: print('move disk from {} to {}'.format(source, target)) else: move_towers(n - 1, source, middle, target) move_towers(1, source, target, middle) move_towers(n - 1, middle, target, source)"},{"prompt":"Given a set X, suggest a Python program to calculate the median of X","completion":"def median(X): sorted_X = sorted(X) mid_index = (len(sorted_X) - 1) // 2 if len(sorted_X) % 2 == 0: return (sorted_X[mid_index] + sorted_X[mid_index + 1]) / 2 else: return sorted_X[mid_index]"},{"prompt":"Write a Python function to sum up elements in a given array. [1, 2, 3, 4, 5]","completion":"def sum_array(arr): result = 0 for item in arr: result += item return result"},{"prompt":"Create a web scraper using Python and Beautiful Soup that collects data from a certain web page and stores it into a database. Not applicable","completion":"import requests from bs4 import BeautifulSoup import sqlite3 # Connect to the database conn = sqlite3.connect('data.db') # Scrape the webpage r = requests.get(\\"http://example.com\\") soup = BeautifulSoup(r.content, 'html.parser') # Extract the necessary data data = [] for tag in soup.find_all('div'): data.append(tag.text) # Insert the data into the database with conn: c = conn.cursor() c.execute(\\"CREATE TABLE IF NOT EXISTS example_data (data TEXT)\\") c.executemany(\\"INSERT INTO example_data VALUES (?)\\", data) # Close connection conn.close()"},{"prompt":"Design a Fibonacci sequence calculator in Python. Not applicable","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) # Main Program n = int(input(\\"Enter number of terms: \\")) for i in range(n): print(fibonacci(i), end=\\" \\")"},{"prompt":"Create a python program to print the sum of two linked lists. First list: (1>2>3) Second list: (3>2>1)","completion":"def sum_linked_lists(l1, l2): # Initialize current node to dummy head of resulting list curr = dummy_head = Node(0) # Initialize carry to 0 carry = 0 # Iterate till both list exists while l1 or l2: # Calculate the value of next digit in resultant list # The next digit is sum of following things # (i) Carry # (ii) Next digit of first list (if there is a next digit) # (iii) Next digit of second list (if there is a next digit) x = l1.val if l1 else 0 y = l2.val if l2 else 0 s = carry + x + y # update carry for next calculation carry = s // 10 # update sum (s) if it is greater than 10 # we use modulus operator to get the second digit s = s % 10 # Create a new node with sum as data curr.next = Node(s) # Move pointers to next nodes if l1 is not None: l1 = l1.next if l2 is not None: l2 = l2.next curr = curr.next # if some carry is still there, add a new node to result list if carry > 0: curr.next = Node(carry) # return the dummy_head node return dummy_head.next"},{"prompt":"Create a Python function for reversing a string. string = hello world!","completion":"def reverse_string(string): string = string[::-1] return string result = reverse_string(string) print(result) # output -> \\"!dlrow olleh\\""},{"prompt":"Create a Python script to calculate all possible paths from (0,0,0) to (5,5,5).","completion":"def calculate_paths(x, y, z): if x == 5 and y == 5 and z == 5: return 1 total_paths = 0 if x < 5: total_paths += calculate_paths(x + 1, y, z) if y < 5: total_paths += calculate_paths(x, y + 1, z) if z < 5: total_paths += calculate_paths(x, y, z + 1) return total_paths"},{"prompt":"Generate a Python program to convert all characters to lowercase","completion":"def convert_to_lowercase(string): return string.lower()"},{"prompt":"Create a machine learning classifier in Python that can predict the sentiment of a given text. Text for training data: Positive: I had a great time with my friends last night. Negative: My car broke down and I had to walk home in the rain. Neutral: I went to the store to buy some groceries.","completion":"import re import nltk import numpy as np import pandas as pd import matplotlib.pyplot as plt from nltk.metrics import scores from sklearn.model_selection import train_test_split # Load the data df = pd.read_csv('data.csv') # Preprocessing df['text'] = df['text'].apply(lambda x: re.sub(r'W', ' ', str(x).lower())) df['text'] = df['text'].apply(lambda x: re.sub(r's+', ' ', x)) # Feature extraction X = df['text'].values y = df['label'].values # Split the data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Vectorize the data from sklearn.feature_extraction.text import TfidfVectorizer vectorizer = TfidfVectorizer(max_features=5000) X_train = vectorizer.fit_transform(X_train) X_test = vectorizer.transform(X_test) # Model training from sklearn.svm import LinearSVC classifier = LinearSVC() classifier.fit(X_train, y_train) # Model evaluation y_pred = classifier.predict(X_test) print(\\"Accuracy score:\\", scores.accuracy(y_test, y_pred))"},{"prompt":"Create a random number generator in Python that generates a number between 1 and 100.","completion":"import random def random_number(): return random.randint(1,100) # Testing print(random_number())"},{"prompt":"Create a Python script to print out all the numbers in a given range that are divisible by a given number. lower = 1 upper = 50 divisible = 5","completion":"def printDivisible(lower, upper, divisible): for i in range(lower, upper + 1): if i % divisible == 0: print(i) printDivisible(lower, upper, divisible)"},{"prompt":"mplement a Python code to calculate the Levenshtein distance between two words.","completion":"def levenshtein_distance(word1, word2): m = len(word1) n = len(word2) distance = [[0 for x in range(n+1)] for x in range(m+1)] for i in range(1, m+1): distance[i][0] = i for j in range(1, n+1): distance[0][j] = j for i in range(1, m + 1): for j in range(1, n + 1): if word1[i-1] == word2[j-1]: cost = 0 else: cost = 1 distance[i][j] = min(distance[i-1][j] + 1, distance[i][j-1] + 1, distance[i-1][j-1] + cost) return distance[m][n]"},{"prompt":"Write a python program to check if a given array A is a subset of another array B A = [4, 6, 8] B = [1, 4, 6, 8, 9, 10]","completion":"def is_subset(A, B): # Iterate through A for elem in A: # Check if the element is in B if elem not in B: # If not, return False return False # If we reach here, all the elements of A # were present in B, so return True return True"},{"prompt":"Rewrite this Java program in Python3. public class HelloWorld { public static void main(String args[]) { System.out.println(Hello, World!); } }","completion":"print(\\"Hello, World!\\")"},{"prompt":"Using the provided data, generate a Python program to determine the average of all numbers in the list. list_numbers = [22.2, 33, 44.4, 55.5, 66.6]","completion":"def find_average(list_numbers): # Calculate the sum of all elements in the list list_sum = 0 for i in range(len(list_numbers)): list_sum += list_numbers[i] # Calculate the average list_average = list_sum / len(list_numbers) # Return the average return list_average # Call the function list_average = find_average(list_numbers)"},{"prompt":"Generate a Python program to generate a random number within a given range.","completion":"def random_num(start, end): return random.randint(start, end)"},{"prompt":"Develop a Python program that takes an array of integers and returns the largest element. [2, 4, 8, 9, 10]","completion":"def find_max(arr): max_val = arr[0] for num in arr: if num > max_val: max_val = num return max_val print(find_max([2, 4, 8, 9, 10]))"},{"prompt":"Generate code to solve a Fibonacci sequence using recursion in Python.","completion":"def fibonacci(n): if n <= 1: return n else: return(fibonacci(n-1) + fibonacci(n-2)) # Print the first 10 numbers in the sequence for i in range(10): print(fibonacci(i))"},{"prompt":"Write a Python code snippet to split a given text into sentences.","completion":"import nltk from nltk.tokenize import sent_tokenize def split_into_sentences(text): sentences = sent_tokenize(text) return sentences"},{"prompt":"Generate a correct python program to calculate the mean of a list","completion":"def mean(numbers): total = 0 for num in numbers: total += num return total / len(numbers)"},{"prompt":"Create a python program to visualize the temperature forecast over a 7day period. Temperature data for the next 7 days. Day 1 – 15°C Day 2 – 12°C Day 3 – 16°C Day 4 – 8°C Day 5 – 13°C Day 6 – 20°C Day 7 – 18°C","completion":"import matplotlib.pyplot as plt # Input data x = [1, 2, 3, 4, 5, 6, 7] y = [15, 12, 16, 8, 13, 20, 18] # Plotting a graph plt.plot(x, y) # Labeling x and y axes plt.xlabel('Day') plt.ylabel('Temperature') # Title of the graph plt.title('Temperature Forecast') # Function to show the plot plt.show()"},{"prompt":"Generate a Python class to store data about a person's name, age and address.","completion":"class Person: def __init__(self, name, age, address): self.name = name self.age = age self.address = address"},{"prompt":"Create a function in Python to print out all of the stuff in a given dictionary. Not applicable","completion":"def print_dict(dict): for key in dict: print(key,\\":\\", dict[key])"},{"prompt":"Create a class in Python to model a Point and its methods.","completion":"class Point: def __init__(self, x, y): self.x = x self.y = y def move(self, dx, dy): self.x += dx self.y += dy def distance(self, other_point): return ((self.x - other_point.x)**2 + (self.y - other_point.y)**2)**0.5 #example p1 = Point(2,3) p2 = Point(5,7) print(p1.distance(p2))"},{"prompt":"Generate a Python program to print each letter in a word on a separate line.","completion":"def print_letters(word): for letter in word: print(letter)"},{"prompt":"Write a function in Python that parses a given string and extracts the numbers from it.","completion":"def extract_numbers(string): numbers = [] for char in string: if char.isdigit(): numbers.append(int(char)) return numbers"},{"prompt":"Create a web scraper using Python to extract the title and price from an ecommerce website. An example page from an ecommerce website.","completion":"import requests from bs4 import BeautifulSoup url = 'example.com' # Send GET request r = requests.get(url) # Parse HTML soup = BeautifulSoup(r.content, 'html.parser') # Get item title title = soup.find('h1', {'class': 'title'}).text.strip() # Get item price price = soup.find('span', {'class': 'price'}).get_text().strip() print(title) print(price)"},{"prompt":"Develop a Python script to identify duplicate characters in a string.","completion":"def find_duplicates(text): n = len(text) duplicates = [] for i in range(n): for j in range(i+1, n): if text[i] == text[j]: duplicates.append(text[i]) return duplicates"},{"prompt":"Can you provide a Python code for linear search on a given list of numbers? [4,3,1,7,9,6]","completion":"def linearSearch(list, num): for i in range(len(list)): if list[i] == num: return i return -1 list = [4,3,1,7,9,6] num = 9 print(linearSearch(list, num))"},{"prompt":"Create a Python program to find the number of days between two dates. date1 = 20201001 date2 = 20201031","completion":"from datetime import datetime def get_days_diff(date1, date2): d1 = datetime.strptime(date1, \\"%Y-%m-%d\\") d2 = datetime.strptime(date2, \\"%Y-%m-%d\\") return abs((d2 - d1).days)"},{"prompt":"Create a Python program to extract the first three characters of a string. string = programming","completion":"result = string[:3] print(result) #pro"},{"prompt":"Create a program in Python for rotating a matrix. [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]","completion":"def rotate_matrix(matrix): # Create an empty list to store the rotated matrix rotated = [] # Iterate through the columns of the matrix for i in range(len(matrix[0])): # Create a new list to store the row row = [] # Iterate through the rows of the matrix for j in range(len(matrix)): # Add each element to the row row.append(matrix[j][i]) # Add the row to the rotated matrix rotated.append(row) return rotated matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] rotated = rotate_matrix(matrix)"},{"prompt":"Create a function in Python to find the greatest common divisor of two given numbers. 7 8","completion":"def get_gcd(num1, num2): for i in range(max(num1, num2), 0, -1): if num1 % i == 0 and num2 % i == 0: return i result = get_gcd(7, 8) print(result) # Output: 1"},{"prompt":"Create a Python dictionary representing the following data: A points to 4 B points to 6 C points to 10","completion":"d = { \\"A\\": 4, \\"B\\": 6, \\"C\\": 10 }"},{"prompt":"Create variables in Python to store the number of cats and dogs in a household.","completion":"num_cats = 0 num_dogs = 0"},{"prompt":"Generate a Python program to convert a string of text into a list where each word is lowercased and each punctuation character is removed. Not applicable","completion":"def textToList(string): words = [] for char in string: if char.isalpha(): words[-1] += char else: words.append('') words = [word.lower() for word in words if word] return words print(textToList('Hi there, how are you?')) # returns ['hi', 'there', 'how', 'are', 'you']"},{"prompt":"Write a Python program to join all elements in a list into a string separated by a given separator. [Hello, World!], separator =","completion":"def join_list_with_separator(list, separator): joined_string = separator.join(list) return joined_string"},{"prompt":"Write a Python script that takes in two strings and finds the longest common subsequence. ACBA, ABAC","completion":"def find_lcs(str1, str2): # create a matrix to store solutions to subproblems dp = [[0 for j in range(len(str2) + 1)] for i in range(len(str1) + 1)] # fill the lookup table in bottom-up manner for i in range(1, len(str1) + 1): for j in range(1, len(str2) + 1): if str1[i-1] == str2[j-1]: dp[i][j] = 1 + dp[i-1][j-1] else: dp[i][j] = max(dp[i][j-1], dp[i-1][j]) # find the longest common sub sequence i, j = len(str1), len(str2) lcs = \\"\\" while i > 0 and j > 0: if str1[i-1] == str2[j-1]: lcs += str1[i-1] i-=1 j-=1 elif dp[i][j-1] > dp[i-1][j]: j-=1 else: i-=1 # Reverse the lcs string return lcs[::-1] str1 = \\"ACBA\\" str2 = \\"ABAC\\" print(find_lcs(str1, str2)) # Output: ACBA"},{"prompt":"Build an Access Control List (ACL) system for a Python web application. The system should be able to modify user access rights through user profiles. user1 = {name: 'Tom', access_rights: ['read', 'write']} user2 = {name: 'Sara', access_rights: ['read', 'edit']}","completion":"class AccessControlList(): def __init__(self): self.access_rules = {} def add_user(self, user): self.access_rules[user.name] = user.access_rights def remove_user(self, user): del self.access_rules[user.name] def update_user_rights(self, user, new_access_rights): self.access_rules[user.name] = new_access_rights def get_user_rights(self, user): return self.access_rules[user.name] acl = AccessControlList() # add users ACL.add_user(user1) ACL.add_user(user2) # update access rights new_access_rights = ['read', 'write', 'edit'] ACL.update_user_rights(user1, new_access_rights) # get access rights user1_access_rights = ACL.get_user_rights(user1) user2_access_rights = ACL.get_user_rights(user2)"},{"prompt":"Construct a function in Python to calculate the area of a triangle with three sides side1: 3 side2: 4 side3: 5","completion":"def triangleArea(side1, side2, side3): s = (side1 + side2 + side3) / 2 area = (s * (s - side1) * (s - side2) * (s - side3)) ** 0.5 return area"},{"prompt":"Edit the following code snippet in Python to make it more efficient. i = 1 while i <= 10: print(i) i += 1","completion":"for i in range(1, 11): print(i)"},{"prompt":"Create a function in python that takes in two dictionaries as argument and returns a list of keys that are in both dictionaries. Dictionary 1: { Name: John, Age: 31, Fav_Color: Green } Dictionary 2: { Name: Martin, Age: 30, Fav_Book: Harry Potter }","completion":"def intersect(dict1, dict2): keys1 = set(dict1.keys()) keys2 = set(dict2.keys()) common_keys = keys1 & keys2 return list(common_keys) dict1 = { \\"Name\\": \\"John\\", \\"Age\\": \\"31\\", \\"Fav_Color\\": \\"Green\\" } dict2 = { \\"Name\\": \\"Martin\\", \\"Age\\": \\"30\\", \\"Fav_Book\\": \\"Harry Potter\\" } common_keys = intersect(dict1, dict2) print(common_keys)"},{"prompt":"Build a Python program that sorts a list of numbers from highest to lowest. [28, 5, 17, 10, 43]","completion":"def sort_numbers(numbers): numbers.sort(reverse=True) return numbers numbers = [28, 5, 17, 10, 43] sorted_numbers = sort_numbers(numbers) print(sorted_numbers)"},{"prompt":"Provide a design for a spellchecker program written in Python. N/","completion":"# Create a dictionary to store the words and their frequencies dictionary = {} # Read the input text document with open('input.txt', 'r') as f: text = f.read() # Split the text into words words = text.split() # Calculate the word frequencies for word in words: # Update the frequency if the word already exists if word in dictionary: dictionary[word] += 1 # Add the word if it doesn't exist else: dictionary[word] = 1 # Spell-check the words misspelled_words = set() for word in words: # Check for the existence of the word in the dictionary if word not in dictionary: misspelled_words.add(word) # Print out the set of misspelled words print(\\"Misspelled words: \\", misspelled_words)"},{"prompt":"Design a Python program that analyses the sentiment of a given text. I love programming","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer text = \\"I love programming\\" sid = SentimentIntensityAnalyzer() scores = sid.polarity_scores(text) if scores['compound'] > 0.0: print(\\"Positive sentiment\\") elif scores['compound'] == 0.0: print(\\"Neutral sentiment\\") else: print(\\"Negative sentiment\\") # Output: Positive sentiment"},{"prompt":"Generate code to asynchronously execute multiple tasks in Python.","completion":"from concurrent.futures import ThreadPoolExecutor def asynchronous_tasks(tasks): # initialize a thread pool executor pool_executor = ThreadPoolExecutor(max_workers=4) # submit tasks to the executor futures = [pool_executor.submit(task) for task in tasks] # wait for the tasks to finish for future in futures: print(future.result())"},{"prompt":"Create a textbased Python game that can be played from the terminal. The game should have a userfriendly interface, consisting of menus, text prompts and user input. Not applicable","completion":"import random def start_game(): print('Welcome to Text-based Game!') print('You have been dropped into a dangerous dungeon. Your objective is to find the exit door and reach the next level.') print() def explore_dungeon(): print('You find yourself in a dark and mysterious dungeon.') room_descriptions = ['You find a dark and cramped room.', 'You enter a large and well lit chamber.', 'You enter a room with a small river running through it.'] description = random.choice(room_descriptions) print(description) def get_user_command(): command = input('What would you like to do? ') return command if __name__ == '__main__': start_game() explore_dungeon() running = True while running: command = get_user_command() if command.lower() == 'exit': running = False else: print('I don't understand.') print('Goodbye!')"},{"prompt":"Write a Python program that takes a list of numbers and checks if a given number is present in the list. Given list: [12, 45, 37, 13, 4] Given number: 4","completion":"list = [12, 45, 37, 13, 4] x = 4 if x in list: print(\\"Given number is present in the list\\") else: print(\\"Given number is not present in the list\\")"},{"prompt":"Create a program that makes an HTTP request using Python and parses the response. Request URL: https://www.example.com/userdata?query=example","completion":"import requests # make HTTP request r = requests.get(\\"https://www.example.com/userdata?query=example\\") if r.status_code == 200: # parse response data = r.json() # do something with the data # ..."},{"prompt":"Write a Python script to sort a given list in descending order. [5, 3, 2, 1, 4]","completion":"def sort_desc(lst): return sorted(lst, reverse=True)"},{"prompt":"Design a logic in Python to check if two numbers are divisible by each other. 15, 30","completion":"def isDivisible(a, b): return a % b == 0"},{"prompt":"Design a Python program to record data from a given list of dictionaries. [{'name':'John', 'age':25, 'team':'A'}, {'name':'Mark', 'age':30, 'team':'B'}]","completion":"data = [ {'name': 'John', 'age': 25, 'team': 'A'}, {'name': 'Mark', 'age': 30, 'team': 'B'} ] records = [] for item in data: record = {} for key, value in item.items(): record[key] = value records.append(record) print(records)"},{"prompt":"Create a script in Python to determine whether a word is a palindrome or not.","completion":"def is_palindrome(word): # get length of the word n = len(word) # loop from left and right for i in range(n//2): if word[i] != word[n - i - 1]: return False return True"},{"prompt":"Write a Python script that takes in the arguments x and y and prints the result of p + q. p = 5 q = 7","completion":"def calculate_sum(x, y): \\"\\"\\" Takes in the arguments x and y and prints the result of p + q. Args: x: first argument. y: second argument. Returns: result: the sum of the two arguments. \\"\\"\\" result = x + y return result p = 5 q = 7 result = calculate_sum(p, q) print(result)"},{"prompt":"Analyze the given python code and suggest any possible optimizations. n = int(input()) arr = [int(x) for x in input().split()] x = int(input()) for i in range(n): if arr[i] > x: print(arr[i])","completion":"n = int(input()) arr = [int(x) for x in input().split()] x = int(input()) j = 0 for i in range(n): if arr[i] > x: print(arr[i]) j = i break for i in range(j+1, n): if arr[i] > x and arr[i] < arr[j]: print(arr[i]) j = i"},{"prompt":"Create a Python program that generates a factorial for a given number n.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Create a HTML page that displays a bar chart of the most popular programming languages. JavaScript, Python, C++, Java, Go, C","completion":"<!DOCTYPE html> <html> <head> <title>Popular Programming Languages</title> <script src=\\"https://d3js.org/d3.v5.min.js\\"><\/script> </head> <body> <h1>Popular Programming Languages</h1> <div id=\\"graph\\"></div> <script> const data = [ { language: 'JavaScript', count: 25 }, { language: 'Python', count: 18 }, { language: 'C++', count: 13 }, { language: 'Java', count: 9 }, { language: 'Go', count: 7 }, { language: 'C', count: 6 } ]; const w = 500; const h = 500; const padding = 20; const svg = d3.select(\\"#graph\\") .append(\\"svg\\") .attr(\\"width\\", w) .attr(\\"height\\", h); const xScale = d3.scaleBand() .domain(data.map(d => d.language)) .range([padding, w - padding]); const yScale = d3.scaleLinear() .domain([0, d3.max(data, d => d.count)]) .range([h - padding, padding]); const chart = svg.selectAll(\\"rect\\") .data(data) .enter() .append(\\"rect\\") .attr(\\"x\\", d => xScale(d.language)) .attr(\\"y\\", d => yScale(d.count)) .attr(\\"width\\", xScale.bandwidth()) .attr(\\"height\\", d => h - yScale(d.count) - padding) .attr(\\"fill\\", \\"teal\\"); const xAxis = d3.axisBottom(xScale); svg.append(\\"g\\") .attr(\\"transform\\", \`translate(0, {h - padding})\`) .call(xAxis); const yAxis = d3.axisLeft(yScale); svg.append(\\"g\\") .attr(\\"transform\\", \`translate({padding}, 0)\`) .call(yAxis); <\/script> </body> </html>"},{"prompt":"Write a Python function to remove duplicate characters from a string. InputString=tree traversal","completion":"def remove_duplicate_characters(string): result = \\"\\" for i in range(len(string)): if string[i] not in result: result += string[i] return result print(remove_duplicate_characters(\\"tree traversal\\"))"},{"prompt":"Given a sentence and a word, extract the POS tag of the word using nltk library in Python. Sentence: He is enjoying the warm weather Word: enjoying","completion":"import nltk sentence = \\"He is enjoying the warm weather\\" word = \\"enjoying\\" tokens = nltk.word_tokenize(sentence) tagged = nltk.pos_tag(tokens) for (token, tag) in tagged: if token == word: print(\\"POS Tag of the word:\\", tag)"},{"prompt":"Create a class in Python which will represent a shopping cart.","completion":"class ShoppingCart(): def __init__(self): self.items = [] def add_item(self, item): self.items.append(item) def remove_item(self, item): if item in self.items: self.items.remove(item)"},{"prompt":"Create a program in Python that evaluates a given expression and displays the result in decimal. 3 + 4 * 5 + 9","completion":"def evaluate_expression(expression): \\"\\"\\" Function to evaluate an arithmetic expression and return the result \\"\\"\\" # define an operator precedence dictionary op_precedence = {'+': 1, '-': 1, '*': 2, '/': 2} # break the expression into tokens expression_tokens = expression.split(' ') # Initialize a stack expression_stack = [] # loop through each token for token in expression_tokens: # push numbers onto the stack if token.isdigit(): expression_stack.append(int(token)) # if the token is an operator elif token in op_precedence: # pop two numbers off of the stack num2 = expression_stack.pop() num1 = expression_stack.pop() # perform the operation if token == '+': result = num1 + num2 elif token == '-': result = num1 - num2 elif token == '*': result = num1 * num2 elif token == '/': result = num1 / num2 # push the result onto the stack expression_stack.append(result) # return the result of the Expression return expression_stack[0] if __name__ == '__main__': expression = '3 + 4 * 5 + 9' print(evaluate_expression(expression))"},{"prompt":"Design a Python program to solve the longest palindromic substring problem. babdfeffe","completion":"def longestPalindromeSubstring(str): currLength = 1 maxLength = 1 start = 0 len = len(str) for i in range(1, len): # even length palindromes low = i - 1 high = i while (low >= 0 and high < len and str[low] == str[high]): if (high - low + 1 > currLength): start = low currLength = high - low + 1 low -= 1 high += 1 # odd length palindromes low = i - 1 high = i + 1 while (low >= 0 and high < len and str[low] == str[high]): if (high - low + 1 > currLength): start = low currLength = high - low + 1 low -= 1 high += 1 if (currLength > maxLength): maxLength = currLength print(\\"Longest palindrome substring is:\\") print(str[start:start + maxLength]) return maxLength"},{"prompt":"Write a Python program to identify the longest palindrome substrings in a string. String: abbacc","completion":"def get_longest_palindrome_substrings(s): n = len(s) dp = [[ False for _ in range(n)] for _ in range(n)] start, maxLen = 0, 0 for i in range(n): dp[i][i] = True for i in range(n-1): j = i + 1 if s[i] == s[j]: dp[i][j] = True start = i maxLen = 2 for k in range(3, n+1): for i in range(n-k+1): j = i + k - 1 if dp[i+1][j-1] and s[i] == s[j]: dp[i][j] = True if k > maxLen: maxLen = k start = i return s[start : start+maxLen] print(get_longest_palindrome_substrings('abbacca'))"},{"prompt":"Compute the mean value of an array of integers using Python. [1, 2, 3, 4, 5]","completion":"def calculate_mean(values): total_sum = 0 for num in values: total_sum += num return total_sum / len(values) values = [1, 2, 3, 4, 5] mean = calculate_mean(values) print(\\"Mean Value:\\", mean)"},{"prompt":"For a given list of numbers, generate a python code that finds the largest number in the list. [7, 5, 2, 9, 1]","completion":"def find_max(arr): max_number = 0 for i in arr: if i > max_number: max_number = i return max_number"},{"prompt":"Create a Python function to calculate the maximum subarray sum. [2, 5, 4, 2, 7, 1]","completion":"def max_subarray_sum(arr): # Keep track of the current sum and the maximum sum current_sum = 0 max_sum = float('-inf') # Iterate over the array and update the current/max sum for num in arr: current_sum += num max_sum = max(max_sum, current_sum) current_sum = max(current_sum, 0) return max_sum if __name__ == '__main__': arr = [2, -5, 4, -2, 7, -1] result = max_subarray_sum(arr) print(result)"},{"prompt":"Write a code snippet in Python to calculate the average of the following list of numbers: [1, 7, 8, 4, 9]. Not applicable","completion":"numbers = [1, 7, 8, 4, 9] average = sum(numbers) / len(numbers) print(average) # 5.6"},{"prompt":"Generate a class in Python that takes three parameters: name, age, and gender.","completion":"class Person: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def display_person(self): print(\\"Name: \\" + self.name + \\"nAge: \\" + str(self.age) + \\"nGender: \\" + self.gender) person = Person(\\"John\\", 28, \\"Male\\") person.display_person()"},{"prompt":"Generate a Python class to represent a deck of cards in a card game.","completion":"class Deck: #constructor def __init__(self): self.cards = [] #function to create a deck of playing cards def create_deck(self): suits = [\\"C\\", \\"S\\", \\"H\\", \\"D\\"] ranks = [\\"2\\", \\"3\\", \\"4\\", \\"5\\", \\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"10\\", \\"J\\", \\"Q\\", \\"K\\", \\"A\\"] for suit in suits: for rank in ranks: card = (rank, suit) self.cards.append(card) #function to draw a card from the deck def draw_card(self): if self.cards: return self.cards.pop() else: return None"},{"prompt":"Create a class in Python to model a circle.","completion":"class Circle: def __init__(self, radius): self.radius = radius def area(self): return 3.14 * self.radius**2 def circumference(self): return 2 * 3.14 * self.radius"},{"prompt":"Compute the nearest prime number less than the given number using a python program. 173","completion":"def nearest_prime(num): if num <= 2: return -1 for i in range(num-1,2,-1): for j in range(2,i): if i % j == 0: break else: return i print(nearest_prime(173))"},{"prompt":"Create a model in Python using scikitlearn that takes a dataset of usergenerated feedback and predicts the sentiment (positive or negative). Not applicable","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB #load dataset df = pd.read_csv('data.csv') #Vectorize the data cv = CountVectorizer(stop_words='english', max_features=1000) X = cv.fit_transform(df['text']).toarray() y = df['sentiment'] #Split the dataset into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #Train the model model = MultinomialNB() model.fit(X_train, y_train) #Evaluate the model score = model.score(X_test, y_test) print(f'Model Accuracy: {score*100}%')"},{"prompt":"Develop an algorithm in Python that finds the minimum number of coins required to make a given amount. 8","completion":"def minCoins(amount): # Initializing the list of coins with the given amount coins = [1, 2, 5] num_coins = [999999999] * (amount+1) num_coins[0] = 0 for i in range(1, amount+1): for j in coins: if j <= i: sub_res = num_coins[i-j] if sub_res + 1 < num_coins[i]: num_coins[i] = sub_res + 1 return num_coins[amount] print(minCoins(8))"},{"prompt":"Automate this manual process using Python scripting. Every day, we manually check the prices of products listed on a specific website.","completion":"import requests import pandas as pd import json url = 'https://www.example.com/' response = requests.get(url) products = json.loads(response.content) price_df = pd.DataFrame(columns=['Product', 'Price']) for product in products: product_name = product['name'] product_price = product['price'] price_df = price_df.append({'Product': product_name, 'Price': product_price}, ignore_index=True) price_df.to_csv('product_price.csv', index=False)"},{"prompt":"Design an algorithm in Python to generate the nth number in the Fibonacci sequence. Not applicable","completion":"def fibonacci(n): if n==0: return 0 elif n==1: return 1 else: return fibonacci(n-2) + fibonacci(n-1)"},{"prompt":"This code provides a module for changing alphabet letter cases. To use it, you need to define the input and output file paths, and optionally set a switch for processing all vowels or consonants. You can also specify a list of characters to process. To run the code, call the function \`process_files(args)\` with the parsed arguments.","completion":"# # A module capable of changing alphabet letter cases. # # It uses very generic Python functionality to ensure # backward compatibility. # # # The programme processes a set of characters by default # If no character is entered for processing, the programme # simply exists. This can be turned off by setting 'a' to 1 # (for all vowels) or 2 (for all consonants). # # # import os; import sys; import re; import string; from re import sub; # #! Get parsed arguments # def get_parsed_args(): # Pre-allocate parser = \\"\\"; args = \\"\\"; if sys.version_info < (2,7): from optparse import OptionParser parser = OptionParser(); parser.add_option(\\"-i\\", \\"--input_path\\", type=str, help=\\"Input file path with extension\\"); parser.add_option(\\"-o\\", \\"--output_path\\", type=str, help=\\"Output file path with extension\\"); parser.add_option(\\"-a\\", \\"--all_chars\\", type=int, help=\\"Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2\\", default=0); parser.add_option(\\"-c\\", \\"--c\\", type=str, help=\\"Characters to process (comma-separated list, no whitespace)\\", default=\\"\\"); else: from argparse import ArgumentParser parser = ArgumentParser(); parser.add_argument(\\"-i\\", \\"--input_path\\", type=str, help=\\"Input file path with extension\\"); parser.add_argument(\\"-o\\", \\"--output_path\\", type=str, help=\\"Output file path with extension\\"); parser.add_argument(\\"-a\\", \\"--all_chars\\", type=int, help=\\"Switch a type of characters (all vowels or cons.), disable=0, vowel=1, cons=2\\", default=0); parser.add_argument(\\"-c\\", \\"--c\\", type=str, help=\\"Characters to process (comma-separated list, no whitespace)\\", default=\\"\\"); args = parser.parse_args(); args = vars(args); print(option) print(args) print(type(option)) print(option.c) print(option.all_chars) print(option.input_path) print(option.output_path) # Safety assertions assert (args['all_chars'] >= 0 and args['all_chars'] <= 2), \\"Invalid value! programme exiting!n type python switchLetterCase.py -h for information on arguments\\" # If nothing to process, programme will exit if (args['all_chars'] == 0) and ((args['c'] == \\"\\") or (args['c'] == \\" \\") or args['all_chars'] is None or all([x is ',' for x in args['c']])): print(\\".....Nothing to process, programme exiting.nn\\"); sys.exit(0); return args; # #! Main processor function # def process_files(args): try: # Get handlers f1 = open(args['input_path'], 'r') f2 = open(args['output_path'], 'w'); # Initial setup line_to_write = \\"\\" if (args['all_chars'] == 0): # process characters in the list gg = \\"\\".join(args['c']) for line in f1: g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line]; line_to_write = \\"\\".join(g); f2.write(line_to_write); elif (args['all_chars'] == 1): # process vowels only vowels = sub('[^aeiou]+','',string.ascii_lowercase) for line in f1: g = [y.upper() if y in vowels else y.lower() if y.upper() in vowels else y for y in line]; line_to_write = \\"\\".join(g); f2.write(line_to_write); elif (args['all_chars'] == 0): # process consonants in the list consonants = sub('[aeiou]+','',string.ascii_lowercase) for line in f1: g = [y.upper() if y in gg else y.lower() if y.upper() in gg else y for y in line]; line_to_write = \\"\\".join(g); f2.write(line_to_write); # Print some INFO print(\\"All characters toggled! Terminating programme......nn\\"); f1.close(); f2.close(); except (Exception, BaseException, IOError, ValueError, WindowsError) as e: print(e); finally: del f1, f2"},{"prompt":"mplement a simple HTTP server using Python.","completion":"from http.server import BaseHTTPRequestHandler, HTTPServer # HTTPRequestHandler class class HTTPServer_RequestHandler(BaseHTTPRequestHandler): # GET def do_GET(self): # Send response status code self.send_response(200) # Send headers self.send_header('Content-type','text/html') self.end_headers() # Send message back to client message = \\"Hello world!\\" # Write content as utf-8 data self.wfile.write(bytes(message, \\"utf8\\")) return def run(): print('starting server...') # Server settings # Choose port 8080, for port 80 server_address = ('127.0.0.1', 8080) httpd = HTTPServer(server_address, HTTPServer_RequestHandler) print('running server...') httpd.serve_forever() run()"},{"prompt":"Create a Python script to detect when a song has ended. Sample song length in seconds: 300","completion":"import time # Define a song length song_length = 300 # Start the progress bar progress_bar = 0 for x in range(0, song_length): # Update the progress bar progress_bar += 1 # Sleep a second time.sleep(1) print(\\"Progress Bar: {}%\\".format(progress_bar/song_length * 100)) # Song has ended print(\\"Song Ended!\\")"},{"prompt":"Create a basic Machine Learning model in Python to predict the probability of clickthroughs for an ad based on user data. Not applicable","completion":"#load Libraries import pandas as pd from sklearn.model_selection import train_test_split #load Data data = pd.read_csv('user_data.csv') #split Data X = data[['age', 'gender', 'interest']] y = data['click'] x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2) #train Model from sklearn.linear_model import LogisticRegression model = LogisticRegression() model.fit(x_train, y_train) #evaluate Model from sklearn.metrics import accuracy_score y_pred = model.predict(x_test) print('Accuracy: ', accuracy_score(y_test, y_pred))"},{"prompt":"Generate a python program to find and print the count of each vowel present in the given string.","completion":"vowels = \\"aeiou\\" input_string = input(\\"Input string: \\") vowel_count = {} for char in input_string: if char in vowels: if char in vowel_count: vowel_count[char] += 1 else: vowel_count[char] = 1 print (vowel_count)"},{"prompt":"Create a Python function which adds the given list of numbers and returns the sum. list_of_nums = [1, 2, 3, 4, 5]","completion":"def add_nums(list_of_nums): sum = 0 for num in list_of_nums: sum += num return sum sum_of_nums = add_nums(list_of_nums) print(sum_of_nums) # 15"},{"prompt":"Create a Python program to find the square root of a number without using the square root function. 25","completion":"# A function to calculate the Square Root of a number using # the babylonian method def sqrt(n): # We are using n itself as initial approximation # This can definitely be improved x = n y = 1 # e decides the accuracy level e = 0.000001 while(x - y > e): x = (x + y)/2 y = n/x return x # Driver Program num = 25 print(sqrt(num))"},{"prompt":"Construct a program in Python for generating a frequencysorted list of words from a given text. text = “This is a sample text for generating a frequencysorted list of words.”","completion":"def frequencySort(text): # create a dictionary to store words and its frequencies word_freq = {} # split the given text in to words words = text.split() # count the frequency of each word for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 # sort the words based on the frequency sorted_words_freq = sorted(word_freq.items(), key=lambda kv: kv[1], reverse=True) sorted_words = [tup[0] for tup in sorted_words_freq] # return the list of frequency-sorted words return sorted_words text = \\"This is a sample text for generating a frequency-sorted list of words.\\" result = frequencySort(text) print(result)"},{"prompt":"Generate a Python script to calculate the sum of elements in the following input array. Input Array: [1, 4, 8, 10, 12]","completion":"def SumArray(arr): result = 0 for num in arr: result += num return result print(SumArray([1, 4, 8, 10, 12])) # Outputs: 35"},{"prompt":"Create a program to detect a palindrome in a given sentence using Python. Not applicable","completion":"import re def hasPalindrome(sentence): words = sentence.split(' ') for word in words: if word == word[::-1]: return True return False def isPalindrome(sentence): sentence = re.sub('W+', '', sentence.lower()) return sentence == sentence[::-1] if __name__ == '__main__': sentence = 'A man, a plan, a canal, Panama' print(hasPalindrome(sentence)) # Outputs True print(isPalindrome(sentence)) # Outputs True"},{"prompt":"Create an algorithm for solving the knapsack problem in Python. A set of items with weights {5, 7, 3, 9} and values {10, 5, 8, 9}. The capacity of the knapsack is 16.","completion":"def knapsack(items, capacity): n = len(items) dp = [[0 for _ in range(capacity+1)] for _ in range(n+1)] for i in range(1, n+1): for j in range(capacity+1): if items[i-1][1] <= j: dp[i][j] = max(items[i-1][0] + dp[i-1][j-items[i-1][1]], dp[i-1][j]) else: dp[i][j] = dp[i-1][j] return dp[n][capacity] # Sample run # The items are (10, 5), (5, 7), (8, 3), (9, 9) # The capacity of the knapsack is 16 items = [(10, 5), (5, 7), (8, 3), (9, 9)] capacity = 16 print(knapsack(items, capacity)) # Outputs: 21"},{"prompt":"mplement a heuristic algorithm in Python to solve a maze. Input Maze: X X X X X X S X X X X X E X X","completion":"def solve_maze(maze, start_pos, end_pos): # Initialize an empty path path = [] # Create a visited array to mark # the positions that are visited visited_positions = set() # Insert the start position into # the stack stack = [start_pos] # Loop until the stack is empty while stack: # Pop a position from the stack position = stack.pop() # If this is the end position # then return the path if position == end_pos: path.append(position) return path # Mark the visited position visited_positions.add(position) # Fetch all the adjacent positions # that are not yet visited adjacent_positions = get_adjacent_positions(maze, position) unvisited_adjacent_positions = [pos for pos in adjacent_positions if pos not in visited_positions] # Push the unvisited adjacent # position into the stack stack.extend(unvisited_adjacent_positions) # Push the current position # into the path path.append(position) return None"},{"prompt":"Create a web scraper using Python and BeautifulSoup to extract the prices of a product from an online store https://example.com/product/123","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com/product/123' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') price_block = soup.find('div', class_='price') prices = [float(price.text) for price in price_block.find_all('span')] print(f\\"Prices for {url} are {prices}\\")"},{"prompt":"Create a python function that takes in a string and reverse any words that contain a certain character. String: Hello World!Abc Character:","completion":"def string_reverse(string, character): new_string = [] for word in string.split(' '): if character in word: new_string.append(word[::-1]) else: new_string.append(word) return ' '.join(new_string) string_reverse(\\"Hello World!-Abc\\", \\"-\\") # Output: \\"Hello dlroW!-cbA\\""},{"prompt":"Edit a python method to assign a grade based on a given exam marks. def assign_grade(marks): if marks >= 90: return 'A' elif marks >=80 and marks < 90: return 'B'","completion":"def assign_grade(marks): if marks >= 90: return 'A' elif marks >= 80 and marks < 90: return 'B' elif marks >= 70 and marks < 80: return 'C' elif marks >= 60 and marks < 70: return 'D' else: return 'F'"},{"prompt":"dentify the programming language embedded in the following code snippet x = 0 for i in range(1,5): if i == 3: break x += i print(x)","completion":"Python"},{"prompt":"Define a python class to represent an employee with the following attributes: name, age and salary.","completion":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary"},{"prompt":"Create a class in Python to implement a doublylinked list.","completion":"class DoublyLinkedListNode: def __init__(self, data): self.data = data self.prev = None self.next = None class DoublyLinkedList: def __init__(self): self.head = None def append(self, data): if self.head is None: new_node = DoublyLinkedListNode(data) new_node.prev = None self.head = new_node else: new_node = DoublyLinkedListNode(data) cur = self.head while cur.next: cur = cur.next cur.next = new_node new_node.prev = cur new_node.next = None"},{"prompt":"Write a Python program to create a numeric pyramid of size n, with each number from 1 to n in a row and the subsequent rows containing numbers from n1 to 1. 4","completion":"n = 4 # Function to create numeric pyramid def numeric_pyramid(n): # Outer loop to handle the number of rows (n in this case) for i in range(0, n): # Inner loop to handle the columns # numbers change according to outer loop (i) for j in range(i+1, n): print(j, end=\\" \\") # decrement in the same inner loop for j in range(n-i, 0, -1): print(j, end=\\" \\") # new line for each row print() # Driver Code numeric_pyramid(n)"},{"prompt":"Make a Python program that finds the sum of the series from 0 to 50.","completion":"sum = 0 for i in range(0,51): sum += i print(\\"The sum of the series is:\\", sum)"},{"prompt":"Create a Python program for finding all combinations of numbers that equal a given target number. target = 10","completion":"def find_combos(target): combos = [] for i in range(int(target/2)+1): # increments of two to avoid duplicate results for j in range(i, int(target/2)+1, 2): if i+j == target: combos.append((i,j)) return combos combos = find_combos(10) print(combos)"},{"prompt":"Write a Python program to solve the following mathematical equation. Equation: 2x^2 x = 1","completion":"def solve_equation(equation): x = float(x) solution = (2*x**2 - x + 1) return solution"},{"prompt":"Create a Python algorithm that implements the Bubble Sort method.","completion":"# Python program for implementation of Bubble Sort def bubble_sort(list): # Traverse through all array elements for i in range(len(list)): # Last i elements are already in place for j in range(0, len(list)-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if list[j] > list[j+1] : list[j], list[j+1] = list[j+1], list[j] return list # Main Program list = [30, 10, 15, 5, 25] sorted_list = bubble_sort(list) print(\\"Sorted list: \\", sorted_list)"},{"prompt":"Write a Python program to print out the first n numbers of the Fibonacci sequence.","completion":"def fibonacci_sequence(n): if n == 0: return [] elif n == 1: return [0] elif n == 2: return [0, 1] else: fib_numbers = [0, 1] for i in range(2, n): fib_numbers.append(fib_numbers[i-2] + fib_numbers[i-1]) return fib_numbers"},{"prompt":"Create a Python function to convert Pascal Case string to hyphenseparated string. Pascal Case String: HelloWorld","completion":"def convert_pascal_to_hyphen(string): output_string = \\"\\" for char in string: if char.isupper(): output_string += \\"-\\"+char.lower() else: output_string += char return output_string[1:] convert_pascal_to_hyphen(\\"HelloWorld\\")"},{"prompt":"Create a Python program to count the number of occurrences of a certain element in a list. [1, 2, 1, 2, 5, 2, 1]","completion":"def count_occurrences(lst, element): count = 0 for item in lst: if item == element: count += 1 return count result = count_occurrences([1, 2, 1, 2, 5, 2, 1], 2) print(result)"},{"prompt":"Create an algorithm in Python that reads and stores the following data into a dictionary. John,31;Alice,27;Bob,40","completion":"input_data = \\"John,31;Alice,27;Bob,40\\" data_dict = {} temp = input_data.split(\\";\\") for i in temp: data = i.split(\\",\\") data_dict[data[0]] = data[1] print(data_dict)"},{"prompt":"Create a web application in Python using Django for a hypothetical online store. The application should allow customers to browse items, add items to their cart, enter customer information, and confirm an order. Not applicable","completion":"import os # os.environ['DJANGO_SETTINGS_MODULE'] = 'online_store.settings' import django django.setup() import logging from django.conf import settings from django.urls import include, path from django.contrib import admin from online_store.apps.products import urls as products_urls from online_store.apps.cart import urls as cart_urls from online_store.apps.customers import urls as customer_urls urlpatterns = [ path('', include('online_store.apps.products.urls'), name='index'), path('products/', include(products_urls)), path('cart/', include(cart_urls)), path('customers/', include(customer_urls)), path('admin/', admin.site.urls), ] handler404 = 'online_store.views.handler404' handler500 = 'online_store.views.handler500' if settings.DEBUG: import debug_toolbar urlpatterns += [ path('__debug__/', include(debug_toolbar.urls)), ]"},{"prompt":"Create a class for a basic Stack data structure in Python. This stack should be able to push and pop elements, as well as get the size of the stack. Not applicable","completion":"class Stack: def __init__(self): self.stack = [] def push(self, item): self.stack.append(item) def pop(self): return self.stack.pop() def get_size(self): return len(self.stack)"},{"prompt":"Create a Python web scraper for extracting data from TripAdvisor. The scraper should scrape reviews and ratings for all restaurants and hotels within 5 miles of a given geolocation. Location coordinates (43.626074, 79.491644)","completion":"import requests from bs4 import BeautifulSoup coords = (43.626074, -79.491644) url = 'https://www.tripadvisor.com/Search?geo={},{}&q=restaurants+and+hotels&distance=5mi'.format(*coords) response = requests.get(url).text soup = BeautifulSoup(response, 'html.parser') rating_nodes = soup.find_all('span', class_='ui_bubble_rating') review_nodes = soup.find_all('div', class_='review-container') reviews = [] for rating_node, review_node in zip(rating_nodes, review_nodes): rating = int(float(rating_node.attrs['class'][1][7:])) text = review_node.find('span', class_='noQuotes').text reviews.append((rating, text)) print(reviews)"},{"prompt":"Write a Python code to find the smallest prime number greater than a given number. 10","completion":"def smallest_prime_number_greater_than(n): for i in range(n+1, n+100): if is_prime(i): return i def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True print(smallest_prime_number_greater_than(10))"},{"prompt":"This code defines a Python class called Plugin that can be used to send push notifications using the Pushover service. To use this class, you need to provide a user key and an API key, as well as a list of devices to send notifications to (if desired), a message title, and a Mako template file (if desired). To send a notification, call the send_results method of the Plugin instance with the source of the notification (e.g. the name of the torrent), and a dictionary of results (e.g. the files that were downloaded). The notification will be sent to all devices specified in the constructor.","completion":"\\"\\"\\" Emonoda -- A set of tools to organize and manage your torrents Copyright (C) 2015 Devaev Maxim <mdevaev@gmail.com> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. \\"\\"\\" import urllib.parse from typing import List from typing import Dict from typing import Any from ...optconf import Option from ...optconf import SecretOption from ...optconf.converters import as_string_list from ...optconf.converters import as_path_or_empty from . import STATUSES from . import ResultsType from . import WithWeb from . import WithStatuses from . import templated # ===== class Plugin(WithWeb, WithStatuses): PLUGIN_NAMES = [\\"pushover\\"] def __init__( # pylint: disable=super-init-not-called self, user_key: str, api_key: str, devices: List[str], title: str, template: str, **kwargs: Any, ) -> None: self._init_bases(**kwargs) self._init_opener() self.__user_key = user_key self.__api_key = api_key self.__devices = devices self.__title = title self.__template_path = template @classmethod def get_options(cls) -> Dict[str, Option]: return cls._get_merged_options({ \\"user_key\\": SecretOption(default=\\"CHANGE_ME\\", help=\\"User key\\"), \\"api_key\\": SecretOption(default=\\"CHANGE_ME\\", help=\\"API/Application key\\"), \\"devices\\": Option(default=[], type=as_string_list, help=\\"Devices list (empty for all)\\"), \\"title\\": Option(default=\\"Emonoda ({source})\\", help=\\"Message title\\"), \\"template\\": Option(default=\\"\\", type=as_path_or_empty, help=\\"Mako template file name\\"), }) def send_results(self, source: str, results: ResultsType) -> None: for status in self._statuses: for (file_name, result) in results[status].items(): post = { \\"token\\": self.__api_key, \\"user\\": self.__user_key, \\"html\\": \\"1\\", \\"title\\": self.__title.format(source=source), \\"message\\": templated( name=(self.__template_path if self.__template_path else \\"pushover.{source}.mako\\").format(source=source), built_in=(not self.__template_path), source=source, file_name=file_name, status=status, status_msg=STATUSES[status], result=result, ), } if self.__devices: post[\\"device\\"] = \\",\\".join(self.__devices) self._read_url( url=\\"https://api.pushover.net/1/messages.json\\", data=urllib.parse.urlencode(post).encode(\\"utf-8\\"), )"},{"prompt":"mplement a Python method that given a string, it finds the longest palindromic substring and prints it. str = forgeeksskeeg","completion":"def longestPalindrome(str): maxLength = 1 start = 0 length = len(str) low = 0 high = 0 for i in range(1, length): low = i - 1 high = i while low >= 0 and high < length and str[low] == str[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 low = i - 1 high = i + 1 while low >= 0 and high < length and str[low] == str[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 print(\\"Longest Palindrome : \\", str[start:start + maxLength]) longestPalindrome(\\"forgeeksskeeg\\")"},{"prompt":"Optimize a function with three inputs using a particle swarm optimization (PSO) algorithm written in Python.","completion":"# import necessary libraries from pyswarms.single.global_best import GlobalBestPSO from sklearn.base import BaseEstimator class PSOOptimizer(BaseEstimator): def __init__(self, n_particles=10, dimensions=3, options=None): self.n_particles = n_particles self.dimensions = dimensions self.options = options def optimize(self, obj_func, iters, lb, ub): # Set-up optimizer optimizer = GlobalBestPSO(n_particles=self.n_particles, dimensions=self.dimensions, options=self.options) # Perform optimization cost, pos = optimizer.optimize(obj_func, iters, lb, ub) # Return optimized parameters return cost, pos"},{"prompt":"Write a short python program to sort a list of words in lowercase alphabetical order","completion":"def sort_words(word_list): word_list.sort(key = lambda x : x.lower()) return word_list"},{"prompt":"Convert the following Python List into a Dictionary. lst = [[1, 2], [3, 4], [5, 6]]","completion":"dict_data = { lst[i][0] : lst[i][1] for i in range(len(lst)) } print(dict_data)"},{"prompt":"Write a Python function to input a list of integers and a number and output the number of times that number appears in the list. [1, 2, 3, 4, 5, 2, 6], 2","completion":"def count_occurrences(numbers, n): count = 0 for num in numbers: if num == n: count += 1 return count"},{"prompt":"Create a machine learning model in Python to predict housing prices given a dataset.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Read in dataset data = pd.read_csv('housing_data.csv') # Split data into features and targets X = data.drop('HousingPrice', axis=1) y = data['HousingPrice'] # Split data into training and testing datasets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Initialize linear regression model model = LinearRegression() # Fit model to training data model.fit(X_train, y_train) # Make prediction on testing data y_pred = model.predict(X_test)"},{"prompt":"For the given Python code, generate 10 test cases with inputs and the corresponding expected output. def compute_total(price, quantity): return price * quantity","completion":"Input 1: price = 2.99 quantity = 10 Expected ouput: 29.90 Input 2: price = 8.99 quantity = 1 Expected output: 8.99 Input 3: price = 0.99 quantity = 3 Expected output: 2.97 Input 4: price = 3.50 quantity = 5 Expected output: 17.50 Input 5: price = 4.50 quantity = 10 Expected output: 45.00 Input 6: price = 5.00 quantity = 20 Expected output: 100.00 Input 7: price = 9.75 quantity = 15 Expected output: 146.25 Input 8: price = 7.50 quantity = 13 Expected output: 97.50 Input 9: price = 3.00 quantity = 4 Expected output: 12.00 Input 10: price = 10.00 quantity = 7 Expected output: 70.00"},{"prompt":"Write a Python code to handle this data loading task. Problem: Load a CSV file that contains data from multiple sources and store it in a DataFrame.","completion":"import pandas as pd def load_data(csv_file): '''This function will load the CSV file and store the data in a DataFrame''' data = pd.read_csv(csv_file, sep=',', encoding='utf-8') return pd.DataFrame(data)"},{"prompt":"Build a program in Python that takes in a CSV and a value, and returns only the rows that have that value. 5","completion":"\\"\\"\\" return only the rows that have that value from a csv \\"\\"\\" import csv def get_rows(filename, value): rows = [] with open(filename, newline='') as csvfile: reader = csv.reader(csvfile) for row in reader: if int(row[0]) == value: rows.append(row) return rows if __name__ == '__main__': filename = 'test.csv' value = 5 print(get_rows(filename, value))"},{"prompt":"Design a Python class for encoding an arbitrary binary tree.","completion":"class TreeNode: def __init__(self, value, left=None, right=None): self.value = value self.left = left self.right = right class TreeEncoder: def encode(self, root): if root is None: return \\"None\\" else: left_tree = self.encode(root.left) right_tree = self.encode(root.right) return str(root.value) + \\"(\\" + left_tree + \\", \\" + right_tree + \\")\\""},{"prompt":"Write a Python function to generate all permutations of a given list. [1,2,3]","completion":"def permutations(input_list): if len(input_list) == 0: yield [] else: for i in range(len(input_list)): first_el = [input_list[i]] remainder_list = input_list[:i] + input_list[i+1:] for perm in permutations(remainder_list): yield first_el + perm"},{"prompt":"Create a Python script to reverse a given string. 'Hello World'","completion":"def reverse_string(string): return string[::-1] result = reverse_string('Hello World') print(result)"},{"prompt":"Develop a Raspberry Pi program in Python to continuously measure humidity and temperature and displays it on an LCD display.","completion":"import Adafruit_DHT import RPi.GPIO as GPIO from Adafruit_CharLCD import Adafruit_CharLCD # set up GPIO GPIO.setmode(GPIO.BOARD) #connect the sensor sensor = Adafruit_DHT.DHT11 #temporarily use this pin for the sensor pin = 27 #set up the LCD lcd = Adafruit_CharLCD(rs=26, en=19, d4=13, d5=6, d6=5, d7=11, cols=16, lines=2) #function to measure the humidity and temp def measure_humidity_and_temp(): humidity, temperature = Adafruit_DHT.read_retry(sensor, pin) if humidity is not None and temperature is not None: lcd.clear() lcd.message('Temp={0:0.1f} Humidity={1:0.1f}'.format(temperature, humidity)) else: lcd.message('Failed to get reading.') #run the program continuously while True: measure_humidity_and_temp()"},{"prompt":"Write a function to find the maximum value in a normal list in Python","completion":"def max_value_index(array): current_index = 0 max_value = array[0] for i in range(1, len(array)): if array[i] > max_value: max_value = array[i] current_index = i return current_index"},{"prompt":"Write a Python program to print out a histogram for a list of numbers. numbers = [1,2,3,4,5,3,2,1,3,2,5,6,7,5,4]","completion":"numbers = [1, 2, 3, 4, 5, 3, 2, 1, 3, 2, 5, 6, 7, 5, 4] for i in numbers: print('*' * i) # Output should be # * # ** # *** # **** # ***** # *** # ** # * # *** # ** # ***** # ****** # ******* # ***** # ****"},{"prompt":"Create a machine learning model in Python that predicts the amount of weekly sales of a store. Weekly sales Data of the store (20192020).","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt # load dataset df = pd.read_csv('sales_data.csv') # features and target values X = df.drop(['Weekly_Sales'], axis = 1) y = df.Weekly_Sales # split into train and test from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # train the model from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X_train, y_train) # predict values y_pred = regressor.predict(X_test) # model evaluation from sklearn.metrics import mean_squared_error, r2_score rmse = np.sqrt(mean_squared_error(y_test, y_pred)) r2 = r2_score(y_test, y_pred) # print results print(\\"Root Mean Squared Error: {}\\".format(rmse)) print(\\"R2 Score: {}\\".format(r2))"},{"prompt":"Create a class in Python that inherits from the given base class, and implements the given interface. BaseClass: Animal Interface: eat(food)","completion":"class Animal: def __init__(self, name): self.name = name class Cat(Animal): def eat(self, food): print(\\"{} is eating {}!\\".format(self.name, food))"},{"prompt":"Design a Python class to represent a Binary Search Tree.","completion":"class BinarySearchTree: ''' A binary search tree is a Tree Data Structure in which each node has at most two children which are referred to as the left child and the right child. ''' #defining a constructor to initialize the root node of a BST def __init__(self, value): self.value = value self.left = None self.right = None #method to insert a node at its correct position in BST def insert(self, value): #compare the new element with the root node if self.value > value: #if the new element is smaller than root node, #it has to be inserted in left subtree if self.left is None: self.left = BinarySearchTree(value) else: self.left.insert(value) else: #if the new element is greater than root node, #it has to be inserted in right subtree if self.right is None: self.right = BinarySearchTree(value) else: self.right.insert(value) #method to search an element in the tree def search(self, value): if self.value == value: return True #search in left subtree if value < self.value: if self.left is None: return False return self.left.search(value) #search in right subtree if value > self.value: if self.right is None: return False return self.right.search(value)"},{"prompt":"Write a method in Python to check whether two strings are an anagram of each other. string1 = abcde; string2 = edcba;","completion":"def isAnagram(string1, string2): s1 = sorted(string1) s2 = sorted(string2) return s1 == s2"},{"prompt":"Create a python program that prints out the powers of two.","completion":"# Print out the powers of two from 2^0 to 2^10 for i in range(11): print(2**i)"},{"prompt":"Generate a data structure in python to represent a Queue.","completion":"class Queue(): def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def enqueue(self, item): self.items.insert(0, item) def dequeue(self): return self.items.pop() def size(self): return len(self.items)"},{"prompt":"Write a python program to print the following pattern. n = 5","completion":"def pattern(n): # Outer loop for i in range(0, n): # Inner loop to handle number of columns # values changing according to outer loop for j in range(0, i+1): # Printing stars print(\\"* \\",end=\\"\\") # Ending line after each row print(\\"r\\") # Driver Code pattern(5)"},{"prompt":"Create a function in Python that takes in a number, n, and prints out the nth term of the Fibonacci sequence. n = 10","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b print(fibonacci(10))"},{"prompt":"Write a Python script to check how many words with length 5 are in the given string The quick brown fox jumped over the lazy dog.","completion":"def count_words_length(string): count = 0 words = string.split(\\" \\") for word in words: if len(word) == 5: count += 1 return count string = \\"The quick brown fox jumped over the lazy dog.\\" print(count_words_length(string))"},{"prompt":"Generate a code to optimize the following program for better performance in Python. random_list = [] for i in range(0, 10): random_list.append(random.randint(0, 10)) unique_list = [] for i in random_list: if i not in unique_list: unique_list.append(i)","completion":"import random random_list = [random.randint(0, 10) for _ in range(10)] unique_list = list(set(random_list))"},{"prompt":"Write a Python function that takes a list of strings and checks if all the strings have the same length.","completion":"def check_strings_lengths(string_list): string_length = len(string_list[0]) for string in string_list: if len(string) != string_length: return False return True"},{"prompt":"mplement a machine learning model in Python for predicting the price of a house given some features. X = [[3, 1200, 8], [4, 1800, 8], [5, 1100, 9]] Y = [150000, 175000, 180000]","completion":"from sklearn.linear_model import LinearRegression X = [[3, 1200, 8], [4, 1800, 8], [5, 1100, 9]] Y = [150000, 175000, 180000] model = LinearRegression() model.fit(X, Y) prediction = model.predict([[7, 2000, 10]]) print(prediction)"},{"prompt":"Create a basic Python program that includes a function to find the greatest common divisor (GCD) of two numbers. int num1 = 21; int num2 = 15","completion":"def gcd(x, y): while(y): x, y = y, x % y return x # Driver code num1 = 21 num2 = 15 print(\\"The GCD is\\", gcd(num1, num2))"},{"prompt":"Come up with an algorithm in Python that takes two strings as input and checks whether one string is a rotation of another. ABACD, CDABA","completion":"def is_rotation(s1, s2): if len(s1) != len(s2): return False s1s1 = s1 + s1 if s2 in s1s1: return True return False print(is_rotation(\\"ABACD\\", \\"CDABA\\"))"},{"prompt":"Generate a Python program to find the nth Fibonacci number. 5","completion":"def fibonacci(n): # base condition if n == 0 or n == 1: return n # calculate Fibonacci number for n return fibonacci(n-1) + fibonacci(n-2) # test print(fibonacci(5)) Output: 5"},{"prompt":"Generate code for a Python class called Basket, which should inherit from a List class and have the following methods: add_item(), remove_item(), and get_total(). Not applicable","completion":"class Basket(list): def __init__(self): super().__init__() def add_item(self, item): self.append(item) def remove_item(self, item): self.remove(item) def get_total(self): total = 0 for item in self: total += item.price return total"},{"prompt":"Create an optimizer in Python to maximize the output of a given function.","completion":"import numpy as np def optimize(func, initial_params): params = initial_params best_params = None best_score = -np.inf while True: # Update current parameters params = update(params) # Calculate score score = func(params) # Check if improved result if score > best_score: best_params = params best_score = score # If result does not improve, exit loop else: break return best_params"},{"prompt":"Write a Python program that prints all prime numbers between two given numbers. 2, 20","completion":"for num in range(2, 20): if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num)"},{"prompt":"Develop a function in Python to generate a random list of numbers with no duplicates.","completion":"import random def random_list(size): output = [] while len(output) < size: n = random.randint(1,100) if n not in output: output.append(n) return output print(random_list(10))"},{"prompt":"Create a REST API using the Flask framework in Python to create, read, update and delete records from a database. Not applicable","completion":"from flask import Flask, request from flask_restful import Resource, Api from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) # Connect to the database app.config['SQLALCHEMY_DATABASE_URI'] = 'YOUR DB URI' db = SQLAlchemy(app) # Create a model class for table row class TableRow(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(50), nullable=False) description = db.Column(db.String(50), nullable=False) # Create a REST API using Flask-RESTful api = Api(app) # Create the API's endpoints class CreateRecord(Resource): def post(self): # Get the request body json_data = request.get_json() # Create a new record new_record = TableRow(name=json_data['name'], description=json_data['description']) db.session.add(new_record) db.session.commit() return {'status': 'success'}, 201 class ReadRecord(Resource): def get(self, id): # Get a record by id record = TableRow.query.filter_by(id=id).first() # Check if record exists if record: return {'name': record.name, 'description': record.description}, 200 return {'status': 'not found'}, 404 class UpdateRecord(Resource): def put(self, id): # Get the record record = TableRow.query.filter_by(id=id).first() # Check if record exists if record: # Get the request body json_data = request.get_json() # Update the record record.name = json_data['name'] record.description = json_data['description'] db.session.commit() return {'status': 'success'}, 200 return {'status': 'not found'}, 404 class DeleteRecord(Resource): def delete(self, id): # Get the record record = TableRow.query.filter_by(id=id).first() # Check if record exists if record: # Delete the record db.session.delete(record) db.session.commit() return {'status': 'success'}, 200 return {'status': 'not found'}, 404 # Add the API's endpoints to the API api.add_resource(CreateRecord, '/create') api.add_resource(ReadRecord, '/read/<int:id>') api.add_resource(UpdateRecord, '/update/<int:id>') api.add_resource(DeleteRecord, '/delete/<int:id>') if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python program to find all the strings in a list of strings that start with a given character. [apple, banana, kiwi, melon], a","completion":"def get_strings_with_prefix(strings, letter): result = [] for string in strings: if string.startswith(letter): result.append(string) return result data = [\\"apple\\", \\"banana\\", \\"kiwi\\", \\"melon\\"] result = get_strings_with_prefix(data, \\"a\\") print(result)"},{"prompt":"Create a Python script to generate all combinations of two integers in a list.","completion":"def generate_combinations(list1): result = [] for x in range(len(list1)): for y in range(x + 1, len(list1)): result.append((list1[x], list1[y])) return result"},{"prompt":"Write a Python program to find a maximumlength subarray that contains an equal number of 0s and 1s. [1, 0, 1, 0, 0, 1, 1, 0]","completion":"def findMaxSubArray(arr): n = len(arr) # Initialize result max_len = 0 ending_index = -1 # Initialize sum of elements curr_sum = 0 # Initialize start start = 0 # Traverse through the given array for i in range(0, n): # Add current element to sum curr_sum += arr[i] # To handle sum=0 at last index if (curr_sum == 0): max_len = i + 1 ending_index = i # If this sum is seen before, then update the max_len # if required curr_sum_arr = [] for j in range(start, i): curr_sum_arr[j] = curr_sum - arr[j] if (curr_sum_arr[j] == 0): max_len = max(max_len, i - j + 1) ending_index = i # Update start if (curr_sum == 0): start = i + 1 # Print the subarray for i in range(ending_index - max_len + 1, ending_index + 1): print(arr[i]) return max_len arr = [1,0,1,0,0,1,1,0] print(arr) print(findMaxSubArray(arr))"},{"prompt":"Write a function in Python that takes two arguments—a string and a positive integer n—and returns a list of size n containing the string repeated n times. string = Hello n = 4","completion":"def repeat_string(string, n): return [string]*n # example print(repeat_string(\\"Hello\\", 4)) # Output: ['Hello', 'Hello', 'Hello', 'Hello']"},{"prompt":"mplement a function in Python that returns the sum of Pythagorean triplets up to the given number n.","completion":"def pythagorean_triplet_sum(n): result = 0 for c in range(1, n + 1): for b in range(1, c): for a in range(1, b): if a**2 + b**2 == c**2: result += a + b + c return result"},{"prompt":"Develop a Python script for creating a dictionary with all the occurrences of the words in a sentence. John and Mary went to the school","completion":"sentence = \\"John and Mary went to the school\\" words = sentence.split() word_dict = {} for word in words: if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 print(word_dict)"},{"prompt":"Write a Python function to convert days to years.","completion":"def days_to_years(days): years = days / 365 return years"},{"prompt":"Create a for loop to output the numbers from 0 to 9 in Python.","completion":"for i in range(10): print(i)"},{"prompt":"Create a lambda expression in Python that takes two arguments and returns their product.","completion":"product = lambda x, y: x * y"},{"prompt":"Generate a python program that normalizes all measurements in a given dataset.","completion":"import pandas as pd def normalize_measurements(data): '''This function normalizes the given dataset.''' normalized_data = data.copy() for col in normalized_data.columns: min_val = normalized_data[col].min() max_val = normalized_data[col].max() normalized_data[col] = (normalized_data[col] - min_val) / (max_val - min_val) return normalized_data if __name__ == \\"__main__\\": # Read the csv file df = pd.read_csv('data.csv') # Normalize the data normalized_df = normalize_measurements(df) # Save the normalized data normalized_df.to_csv('normalized_data.csv', index=False)"},{"prompt":"Create a stack data structure in Python.","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if self.items: return self.items.pop() else: return None def peek(self): if self.items: return self.items[-1] else: return None def size(self): return len(self.items)"},{"prompt":"Develop a machine learning classifier in Python to determine the sentiment of a piece of text in boolean terms (positive or negative). Example sentence: This movie was terrible","completion":"import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression # example sentence sentence = \\"This movie was terrible\\" # tokenize the sentence vectorizer = CountVectorizer(lowercase=True, tokenizer=str.split) X = vectorizer.fit_transform([sentence]) # create the model clf = LogisticRegression() # train the model on positive and negative sentiment data samples = [\\"This movie was great!\\", \\"Horrible film, do not watch!\\"] labels = [1, 0] clf.fit(vectorizer.fit_transform(samples), labels) # make a prediction prediction = clf.predict(X)[0] if prediction == 1: print(\\"Positive sentiment\\") else: print(\\"Negative sentiment\\")"},{"prompt":"Design and write a Python program to generate a random strong password with at least 5 of the following characters: uppercase letters, lower case letters, numbers, and symbols.","completion":"\\"\\"\\" Generate a random strong password with at least 5 of the following characters: upper-case letters, lower case letters, numbers, and symbols \\"\\"\\" import random import string def generate_password(): characters = list(string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation) num_chars = 5 password = random.choices(characters, k=num_chars) password = ''.join(password) return password if __name__ == '__main__': print(generate_password())"},{"prompt":"Develop a Python program to display the Fibonacci sequence up to nth term. 10","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b # Driver Program print(fibonacci(10))"},{"prompt":"Create a Python script to merge all the elements in a given list of lists. [[1, 2, 3], [4, 5], [6]]","completion":"def merge_lists(l): result = [] for sublist in l: for item in sublist: result.append(item) return result print(merge_lists([[1, 2, 3], [4, 5], [6]]))"},{"prompt":"Suggest an optimization technique to reduce the run time of this Python program. Python Program: def time_function(n): a = [] for i in range(n): a.append(i) return","completion":"def time_function(n): a = [i for i in range(n)] return a This will reduce the run time of the program as it eliminates the need for iterating over the range and appending to the list. Using list comprehension is faster and more memory efficient than regular looping."},{"prompt":"Generate a unique ID in Python for a given string. string = Hello World!","completion":"import uuid unique_id = uuid.uuid3(uuid.NAMESPACE_DNS, string)"},{"prompt":"Create a Python script to remove the item 'Apple' from the given array. [Banana, Orange, Apple]","completion":"def remove(arr): result = [] for item in arr: if item != \\"Apple\\": result.append(item) return result print(remove([\\"Banana\\", \\"Orange\\", \\"Apple\\"])) # Output: [\\"Banana\\", \\"Orange\\"]"},{"prompt":"Create a python program which appends a new item to a given list. list_data = [1, 3, 5] new_item = 7","completion":"def append_to_list (list_data, new_item): list_data.append(new_item) return list_data"},{"prompt":"Design a function in Python which takes a list of numbers as the input, and returns the maximum element of the list. [1, 5, 3, 9, 0, 4, 2]","completion":"def max_list_element(list): max_list_element = None for element in list: if max_list_element is None or max_list_element < element: max_list_element = element return max_list_element"},{"prompt":"Design a genetic algorithm in Python to find the optimal configuration of a neural network. Number of layers : 3 Neurons per layer : [8, 16, 32] Optimizer : Adam","completion":"# Import modules import random import numpy as np import tensorflow as tf # Configure the neural network NUM_LAYERS = 3 NEURONS_PER_LAYER = np.array([8, 16, 32]) OPTIMIZER = tf.keras.optimizers.Adam() # Create a neural network model = tf.keras.Sequential() # Add layers for l in range(NUM_LAYERS): model.add(tf.keras.layers.Dense(units=NEURONS_PER_LAYER[l], activation=\\"relu\\")) # Output layer model.add(tf.keras.layers.Dense(units=1)) # Compile the model model.compile(optimizer=OPTIMIZER, loss=\\"binary_crossentropy\\", metrics=[\\"accuracy\\"]) # The fitness function def calculate_fitness(genome): # Configure the model model.set_weights(genome) # Compute the fitness (e.g. accuracy) loss, accuracy = model.evaluate(x_test, y_test) return accuracy # Genetic algorithm POPULATION_SIZE = 50 # number of individuals in a population NUM_GENERATIONS = 20 # number of generations # Create the initial population population = [np.random.randn(model.count_params()) for _ in range(POPULATION_SIZE)] # Run the genetic algorithm for generation in range(NUM_GENERATIONS): # Calculate the fitness of each individual fitnesses = [calculate_fitness(genome) for genome in population] # Find the best individual best_index = np.argmax(fitnesses) best_individual = population[best_index] # Print the best fitness print(\\"Best fitness in generation {}: {:.2f}\\".format(generation, fitnesses[best_index])) # Create the next generation new_population = [] for genome in population: # Perform crossover if random.uniform(0,1) < 0.7: new_genome = best_individual + np.random.randn(*genome.shape) * 0.1 else: new_genome = genome # Mutate if random.uniform(0,1) < 0.1: new_genome *= np.random.randint(0,2, size=new_genome.shape) # Add to the next generation new_population.append(new_genome) # Make the new population the current population population = new_population"},{"prompt":"Construct a class in Python to represent a 2D vector and contains methods to perform basic operations.","completion":"class Vector: def __init__(self, x, y): self.x = x self.y = y def length(self): return (self.x**2 + self.y**2)**(1/2) def add(self, other): return Vector(self.x + other.x, self.y + other.y) def subtract(self, other): return Vector(self.x - other.x, self.y - other.y)"},{"prompt":"Write a Python program that retrieves the weather data from a given city. City=Tokyo","completion":"import requests # Fill in your OpenWeatherMap API Key api_key = \\"xxxxxxxxxxxxxxxxxxxxx\\" # Base URL for OpenWeatherMap API base_url = \\"http://api.openweathermap.org/data/2.5/weather?\\" # City for which we want to retrieve weather data city = \\"Tokyo\\" # Complete URL used to retrieve weather data url = base_url + \\"appid=\\" + api_key + \\"&q=\\" + city # Retrieve response in json format response = requests.get(url) # Parse the response and retrieve data # Store the weather data in a variable weather_data = response.json()"},{"prompt":"Generate Python code to sort a sequence of numbers [5,1,9,2,6,3]","completion":"def sort_sequence(lst): for i in range(len(lst)-1,0,-1): for j in range(i): if lst[j]>lst[j+1]: temp = lst[j] lst[j] = lst[j+1] lst[j+1] = temp return lst sort_sequence([5,1,9,2,6,3])"},{"prompt":"Explain the data structure of a binary tree in Python.","completion":"A binary tree is a data structure consisting of nodes where each node can have at most two children. Each node contains a value, which can be any data type, along with a left and right pointer which points to the left and right child respectively. The root node is the topmost node in the tree and does not have any parent. Each node in the binary tree has a unique path from the root node to it and each node has a level associated with it. 7. Instruction: Create an HTML table to display the following data with three columns: Name, Country, and Age. 7. Input: Noam Israel 24 John US 25 David France 22 7. Output: <table> <tr> <th>Name</th> <th>Country</th> <th>Age</th> </tr> <tr> <td>Noam</td> <td>Israel</td> <td>24</td> </tr> <tr> <td>John</td> <td>US</td> <td>25</td> </tr> <tr> <td>David</td> <td>France</td> <td>22</td> </tr> </table>"},{"prompt":"Modify the following Python code to print the length of a given string. string = Hello World! def print_length(string): print(string)","completion":"string = \\"Hello World!\\" def print_length(string): print(len(string))"},{"prompt":"Design a Python program which takes in a textbased menu from a restaurant, organizes it into sections, and prints out the menu in a neat format. Burgers: Cheeseburger 7 Hamburger 6 Drinks: Soda 1 Water 1 Wings: Mild 10 Hot 12 Desserts: Ice Cream 4","completion":"menu = { 'Burgers': { 'Cheeseburger': 7, 'Hamburger': 6 }, 'Drinks': { 'Soda': 1, 'Water': 1 }, 'Wings': { 'Mild': 10, 'Hot': 12 }, 'Desserts': { 'Ice Cream': 4 } } for section, items in menu.items(): print(section) for item, price in items.items(): print(f'{item} - {price}') print()"},{"prompt":"Load a dataset in CSV format into a Python pandas DataFrame. # dataset.csv ColA, ColB, ColC 1, 2, 3 4, 5, 6 7, 8, 9","completion":"import pandas as pd data = pd.read_csv('dataset.csv')"},{"prompt":"Describe the steps to run a python program from the command line.","completion":"1. Open Command Prompt in Windows or Terminal in macOS. 2. Navigate to the directory containing the Python file. 3. Type the command: python <filename> 4. Press enter. This will execute the Python file."},{"prompt":"Create a Python function that takes the average of the three numbers given as parameters.","completion":"def average(a, b, c): return (a+b+c)/3"},{"prompt":"mplement a gradient descent optimizer in Python.","completion":"def gradient_descent_optimizer(X, y, theta, alpha, num_iterations): m = len(y) for i in range(num_iterations): h = np.dot(X,theta) loss = h-y grad = np.dot(X.T,loss)/m theta = theta - alpha*grad return theta"},{"prompt":"Create a machine learning model in Python that predicts the species of a flower using data about the sepal length and width. Not applicable","completion":"import pandas as pd from sklearn.cluster import KMeans dataset = pd.read_csv('data.csv') X = dataset[['sepal_length', 'sepal_width']] kmeans = KMeans(n_clusters=3, random_state=0).fit(X) predictions = kmeans.predict(X) dataset['species'] = predictions print(dataset)"},{"prompt":"This code is a Python program for blocking unwanted calls from your home phone. To use it, import the necessary modules and create an instance of the OnlineCheckTellowsDE class. Then, call the supported_country_codes() method to get a list of supported country codes. To handle a phone number, call the handle_number() method with the phone number as an argument. The method will map the number to the correct URL and return a result indicating whether the number is spam or not. To run the program, execute the main function. The program accepts a commandline argument spamscore to set the score limit to mark a call as spam.","completion":"#!/usr/bin/env python3 # callblocker - blocking unwanted calls from your home phone # Copyright (C) 2015-2020 Patrick Ammann <pammann@gmx.net> # # This program is free software; you can redistribute it and/or # modify it under the terms of the GNU General Public License # as published by the Free Software Foundation; either version 3 # of the License, or (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. # import sys from online_base import OnlineBase class OnlineCheckTellowsDE(OnlineBase): def supported_country_codes(self): return [\\"+1\\", \\"+33\\", \\"+44\\", \\"+61\\", \\"+64\\"] def handle_number(self, args, number): # map number to correct URL if args.number.startswith(\\"+1\\"): # USA, Canada site = \\"www.phonespamfilter.com\\" number = number[2:] elif args.number.startswith(\\"+33\\"): # France site = \\"www.phonespamfilter.fr\\" number = number[3:] elif args.number.startswith(\\"+44\\"): # United Kingdom site = \\"www.phonespamfilter.co.uk\\" number = number[3:] elif args.number.startswith(\\"+61\\"): # Australia site = \\"au.phonespamfilter.com\\" number = number[3:] elif args.number.startswith(\\"+64\\"): # New Zealand site = \\"www.phonespamfilter.co.nz\\" number = number[3:] else: self.log.error(\\"number '%s' is not supported '%s'\\" % (args.number, self.supported_country_codes())) sys.exit(-1) url = \\"http://%s/check.php?phone=%s\\" % (site, number) content = self.http_get(url) self.log.debug(content) score = int(content) spam = False if score < args.spamscore else True return self.onlinecheck_2_result(spam, score) # # main # if __name__ == \\"__main__\\": m = OnlineCheckTellowsDE() parser = m.get_parser(\\"Online check via phonespamfilter.com\\") parser.add_argument(\\"--spamscore\\", help=\\"score limit to mark as spam [0..100]\\", default=50) args = parser.parse_args() m.run(args)"},{"prompt":"Generate a python program to print the first n elements of a given list.","completion":"def print_n_elements(n, list): for i in range(n): print(list[i])"},{"prompt":"Generate a program in Python to find the day of the week for any given date.","completion":"# Getting date from user date_string = input('Enter date in (dd/mm/yyyy) format: ') # Split date using '/' as delimeter date_list = date_string.split('/') # Convert date to list of integers date_list = [int(x) for x in date_list] # Calculate day of week weekday = datetime.date(date_list[2], date_list[1], date_list[0]).weekday() # Print day of week print('Day of the week: ', calendar.day_name[weekday])"},{"prompt":"Edit a given Python program to optimize the performance. The program should recursively solve a string sequence problem given a string input. # A recursive function that checks whether # all characters of a given string are # same or not def allCharsSame(str): # If length of string is 0, return true if len(str) == 0: return True # Take the first character of string firstChar = str[0] # Traverse all the remaining characters # in the array for char in str: # If first character mismatches, # return false if char != firstChar: return False # If all characters are same, # return true return True # Driver program if __name__ == __main__: stringToCheck = input(Enter a string: ) if allCharsSame(stringToCheck): print(All characters same) else: print(Not all characters same)","completion":"# A recursive function that checks whether # all characters of a given string are # same or not def allCharsSame(str): # If length of string is 0, return true if len(str) == 0: return True # Use a hash set to store the characters # seen so far chars = set() # Take the first character of string chars.add(str[0]) # Traverse all the remaining characters # in the array for char in str: # If first character mismatches, # return false if char not in chars: return False # If all characters are same, # return true return True # Driver program if __name__ == \\"__main__\\": stringToCheck = input(\\"Enter a string: \\") if allCharsSame(stringToCheck): print(\\"All characters same\\") else: print(\\"Not all characters same\\")"},{"prompt":"Generate a solution to the Tower of Hanoi problem by writing a Python program.","completion":"def hanoi(n, source, auxiliary, target): if n > 0: hanoi(n - 1, source, target, auxiliary) target.append(source.pop()) hanoi(n - 1, auxiliary, source, target)"},{"prompt":"Create a translation model in python which takes a sentence as input and returns its translation in Khmer. Hello world","completion":"import googletrans from googletrans import Translator def translate_sentence(sentence): translator = Translator() translated_sentence = translator.translate(sentence, dest='km') return translated_sentence.text result = translate_sentence(\\"Hello world\\") print(result)"},{"prompt":"Construct a decision tree in Python to classify handwritten digits. Not applicable","completion":"import matplotlib.pyplot as plt import numpy as np from sklearn.datasets import load_digits from sklearn import tree # Loading the dataset digits = load_digits() # creating the decision tree classifier clf = tree.DecisionTreeClassifier() # training the decision tree classifier clf.fit(digits.data, digits.target) # predicting the classes of a test set predicted_classes = clf.predict(digits.data) #plotting the graph plt.plot(digits.data[0].reshape((8,8))) plt.show() # printing predicted and actual classes print(\\"Predicted label:\\", predicted_classes[0]) print(\\"Actual label:\\", digits.target[0])"},{"prompt":"This code reads handwritten character images from a directory of .gnt files, converts them to PNG format, and saves them to an output directory. To use this code, run the script with two arguments: the path to the .gnt file and the path to the output directory. The output directory will be created if it does not already exist.","completion":"#!/usr/bin/env python3 import os import sys import numpy as np from .tagcode import tagcode_to_unicode def samples_from_gnt(f): header_size = 10 # read samples from f until no bytes remaining while True: header = np.fromfile(f, dtype='uint8', count=header_size) if not header.size: break sample_size = header[0] + (header[1]<<8) + (header[2]<<16) + (header[3]<<24) tagcode = header[5] + (header[4]<<8) width = header[6] + (header[7]<<8) height = header[8] + (header[9]<<8) assert header_size + width*height == sample_size bitmap = np.fromfile(f, dtype='uint8', count=width*height).reshape((height, width)) yield bitmap, tagcode def read_gnt_in_directory(gnt_dirpath): for file_name in os.listdir(gnt_dirpath): if file_name.endswith('.gnt'): file_path = os.path.join(gnt_dirpath, file_name) with open(file_path, 'rb') as f: for bitmap, tagcode in samples_from_gnt(f): yield bitmap, tagcode def main(): import png if len(sys.argv) != 3: print(\\"usage: {} gntfile outputdir\\".format(sys.argv[0])) _, gntfile, outputdir = sys.argv try: os.makedirs(outputdir) except FileExistsError: pass with open(gntfile) as f: for i, (bitmap, tagcode) in enumerate(samples_from_gnt(f)): character = tagcode_to_unicode(tagcode) png.from_array(bitmap, 'L').save(os.path.join(outputdir, '{} {}.png'.format(character, i))) if __name__ == \\"__main__\\": main()"},{"prompt":"Optimize a Python function that takes two strings and counts the number of times the first string occurs in the second string.","completion":"def count_occurences(s1, s2): count = 0 for i in range(len(s2) - len(s1) + 1): if s2[i:i + len(s1)] == s1: count += 1 return count if __name__ == '__main__': s1 = 'aa' s2 = 'aaaaaa' count = count_occurences(s1, s2) print(count)"},{"prompt":"Compile a Python script that prints out the squares of elements from 1 to a given number.","completion":"def print_squares(N): for x in range(1, N+1): print(x*x)"},{"prompt":"You need to optimize a given Python system so it can run faster on a target machine.","completion":"def optimize_system(system): # Analyze system to evaluate current performance analyze_system(system) # Research for faster replacement alternatives replacements = research_replacements(system) # Implement the replacements implement_replacements(system, replacements) # Evaluate the optimized system analyze_system(system)"},{"prompt":"Correct the syntax errors in this piece of Python code. def greet(name): print(Hello name)","completion":"def greet(name): print(\\"Hello\\", name)"},{"prompt":"Create a data structure to store and print all the codes for the top 10 programming languages. C, C++, Python, Java, C#, JavaScript, PHP, Rust, Swift, Go","completion":"codes = { 'C': 'c', 'C++': 'cpp', 'Python': 'py', 'Java': 'java', 'C#': 'cs', 'JavaScript': 'js', 'PHP': 'php', 'Rust': 'rs', 'Swift': 'swift', 'Go': 'go' } for key, value in codes.items(): print('{}: {}'.format(key, value))"},{"prompt":"Write a Python program to count the number of occurrences of each word in a given string.","completion":"def count_words(string): lst = string.split() count_dict = {i: lst.count(i) for i in lst} return count_dict string = \\"Writing is one of the most difficult activities in the world\\" word_count = count_words(string) print(word_count)"},{"prompt":"Write a Python program to generate a random color in RGB format.","completion":"import random def random_rgb(): r = random.randint(0,255) g = random.randint(0,255) b = random.randint(0,255) return (r, g, b)"},{"prompt":"Rewrite the following code to use Python's inbuilt sorting functions. def bubbleSort(arr): n = len(arr) for i in range(n): for j in range(0, ni1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j]","completion":"def bubbleSort(arr): arr.sort() return arr"},{"prompt":"Generate a correct Python program to filter out elements of a list using lambda list = [1,2,3,4,5]","completion":"list = [1,2,3,4,5] result = list(filter(lambda x : x % 2 == 0 , list)) print(result)"},{"prompt":"Write a Python program to display the most commonly occurring item in a list. list_items = [1, 7, 3, 8, 2, 9, 3, 5, 5, 8, 7, 3]","completion":"from collections import Counter list_items = [1, 7, 3, 8, 2, 9, 3, 5, 5, 8, 7, 3] counter = Counter(list_items) most_common_item = counter.most_common()[0][0] print(f'The most commonly occuring item in the list is {most_common_item}.')"},{"prompt":"w would you implement the bubble sort algorithm in Python?","completion":"def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code arr = [3, 5, 2, 7, 4] bubble_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Write a python method to identify whether the given string is a palindrome. String: racecar","completion":"def is_palindrome(s): s = s.lower() return s == s[::-1] print(is_palindrome(\\"racecar\\")) # True"},{"prompt":"Generate a random sequence of 5 numbers in a range of 0 to 10 using Python.","completion":"import random random_sequence = [] for _ in range(5): random_sequence.append(random.randrange(0, 11)) print(random_sequence)"},{"prompt":"Generate a Python program to automatically remove spam comments from a blog. A set of blog comme","completion":"import re # Define the regular expression for finding spam comments spam_regex = re.compile(r'(free|discount)', re.IGNORECASE) # Read in the comments with open('comments.txt', 'r') as f: comments = f.readlines() # Check each comment for spam for comment in comments: if re.search(spam_regex, comment): print('SPAM comment removed: ', comment) else: print('Valid comment: ', comment)"},{"prompt":"Create a program in Python that takes an array of objects as input, sorts them based on a given key, and prints the result. [{name: John, age: 26}, {name: Alice, age: 30}, {name: Bob, age: 22}]","completion":"def sortObjectArray(arr, key): # Sort the object array using selection # sort strategy for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx][key] > arr[j][key] : min_idx = j # Swap the object arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr Input = [{name: \\"John\\", age: 26}, {name: \\"Alice\\", age: 30}, {name: \\"Bob\\", age: 22}] key = 'age' Output = [{\\"name\\": \\"Bob\\", \\"age\\": 22}, {\\"name\\": \\"John\\", \\"age\\": 26}, {\\"name\\": \\"Alice\\", \\"age\\": 30}]"},{"prompt":"Create a web scraper using Python's Beautiful Soup library to extract the most uptodate stock prices from the Wall Street Journal webpage. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.wsj.com/market-data/stocks\\" response = requests.get(url) soup = BeautifulSoup(response.text, \\"lxml\\") stock_data = {} tables = soup.find_all('table', {'class': 'data-tables'}) # loop through tables on the page for table in tables: # get column headings col_heads = table.find('thead') col_names = [th.text for th in col_heads.find_all('th')] # get stock data table_body = table.find('tbody') rows = table_body.find_all('tr') data = [] for row in rows: cols = row.find_all('td') cols = [ele.text.strip() for ele in cols] data.append([ele for ele in cols if ele]) stock_data[name] = data print(stock_data)"},{"prompt":"Write a function in Python that takes an integer as an argument and returns the first 5 numbers in the Fibonacci sequence starting from the given integer. An integer 15","completion":"def fibonacci(n): a = 0 b = 1 fib = [a] for i in range(1, n): c = a + b a = b b = c fib.append(a) return fib[:5] # Return the first 5 numbers in the sequence print(fibonacci(15)) # [0,1,1,2,3]"},{"prompt":"Construct a Python script to process a given json dataset.","completion":"import json def process_json(data): result = {} for key, value in data.items(): if type(value) == dict: result[key] = process_json(value) else: result[key] = value return result"},{"prompt":"Create a Python program to build a chatbot with a userspecified name. Not applicable","completion":"# Create an instance of the Chatbot class class Chatbot: def __init__(self, name): self.name = name self.conversations = [] # Input a message and get a response from the bot def get_response(self, message): response = \\"I don't understand what you're saying.\\" if message in self.conversations: response = self.conversations[message] return response # Create the bot name = input(\\"What should I call you? \\") chatbot = Chatbot(name) print(\\"Nice to meet you, \\" + name + \\"!\\") loop = True while loop: message = input(\\"You: \\") response = chatbot.get_response(message) print(name + \\": \\" + response) if message == \\"bye\\": loop = False print(\\"Goodbye!\\")"},{"prompt":"Develop an algorithm in Python to find longest increasing contiguous subarray of a given array. [2, 6, 4, 8, 10]","completion":"def find_longest_increasing_subarray(arr): n = len(arr) # Initialize overall max max_len = 1 # Initialize starting point of current subarray start_index = 0 # Initialize ending point of current subarray end_index = 0 # Initialize current max curr_max = 1 # Traverse array elements for i in range(1, n): # If element is greater than previous one if arr[i] > arr[i - 1]: curr_max += 1 # Else Reset current max and # starting point of current subarray else: if curr_max > max_len: max_len = curr_max start_index = i - curr_max end_index = i - 1 curr_max = 1 # Compare the last maximum length with # overall maximum length if curr_max > max_len: max_len = curr_max start_index = n - curr_max end_index = n - 1 # Print starting and ending index of longest # increasing contiguous subarray print(\\"Longest increasing contiguous \\" + \\"subarray is [\\", arr[start_index], \\"..\\", arr[end_index], \\"] of length\\", max_len) # Driver code arr = [2, 6, 4, 8, 10] find_longest_increasing_subarray(arr)"},{"prompt":"Explain Python's Decorator pattern.","completion":"Python's Decorator pattern is a design pattern which is used to add extra functionality in an existing object without having to alter its structure. It provides a flexible alternative to subclassing for extending functionality. A decorator is a callable object that takes another function as argument (the decorated function). The decorator may perform some processing with the decorated function, and then return it or replace it with another function or callable object. Decorators are usually used as a way to modify functions that you want to keep their original functionality, but add in some extra behavior at the same time. Decorators can also be used to add functionality to classes or to add data to an instance of a class."},{"prompt":"Create a python program to encode a given text using a Huffman coding algorithm","completion":"# Class to store a node of huffman tree class Node(): def __init__(self, char, f, left, right): self.char = char self.f = f self.left = left self.right = right # Function to encode text using huffman tree def HuffmanEncode(text): # Create a frequency map of characters freq = dict() for char in text: if char in freq: freq[char] += 1 else: freq[char] = 1 # Create a Huffman tree nodes = [] for char, f in freq.items(): nodes.append(Node(char, f, None, None)) # Iteratively construct the Huffman tree while len(nodes) > 1: # Sort nodes by frequency nodes.sort(key = lambda x: x.f) # Merge first two nodes new_node = Node(None, nodes[0].f + nodes[1].f, nodes[0], nodes[1]) nodes = nodes[2:] nodes.append(new_node) # Huffman encoding code = dict() encode(nodes[0], \\"\\", code) # Return the encoded string encoded_string = \\"\\" for char in text: encoded_string += code[char] return encoded_string"},{"prompt":"Find the number 10 in a string using a Python regular expression. String: This string contains the number 10 in it","completion":"re.search(\\"10\\", \\"This string contains the number 10 in it\\")"},{"prompt":"Generate a Python class that prints a nested list according to given specifications. [1,2,[3,4],[5,[6,7,8]]]","completion":"class PrintNestedList: def __init__(self, nested_list): self.nested_list = nested_list def print_list(self, nested_list, level = 0): for elem in nested_list: if isinstance(elem, list): self.print_list(elem, level + 1) else: print(' '*level + str(elem)) def __str__(self): self.print_list(self.nested_list) return '' my_list = PrintNestedList([1,2,[3,4],[5,[6,7,8]]]) print(my_list)"},{"prompt":"Create a data visualization in Python using Matplotlib. Not applicable","completion":"import matplotlib.pyplot as plt x_values = [1, 2, 3, 4, 5] y_values = [1, 8, 27, 64, 125] # Plot x and y values plt.plot(x_values, y_values) # Give the plot a title plt.title(\\"Plot of x*x\\") # Label the x and y axes plt.xlabel('x') plt.ylabel('x*x') # Show the plot plt.show()"},{"prompt":"Create a function in Python that takes a string and an integer as parameters and returns a string with the first 'n' characters replaced with 'x'. string = Hello World; n = 5","completion":"def censor_string(string, n): # Get the length of the string length = len(string) # Check if length is less than 'n' if length < n: return string elif length == n: return \\"x\\" * length # Replace the first 'n' characters with 'x' else: return \\"x\\" * n + string[n:] # Driver code string = \\"Hello World\\" n = 5 result = censor_string(string, n) print(result) # \\"xxxxx World\\""},{"prompt":"Create a function which takes two strings as arguments, concatenates the two strings, and capitalizes the result. str1 = 'python' str2 = 'programming'","completion":"def concat_and_capitalize(str1, str2): result = str1 + str2 return result.capitalize() str1 = 'python' str2 = 'programming' print(concat_and_capitalize(str1, str2))"},{"prompt":"Create a Python script to generate a random password with a length of 8 characters that includes both uppercase and lowercase letters.","completion":"import string import random length = 8 alphabet = string.ascii_letters + string.digits password = ''.join(random.choice(alphabet) for i in range(length)) print(\\"Generated password:\\", password)"},{"prompt":"Create an AI program in Python that predicts the temperature on a given day. csv file with the following data: day; temperature 1; 25 2; 28 3; 29 4; 24 5; 26 6; 25 7; 27 8; 29 9; 28 10; 28","completion":"import pandas as pd import numpy as np # read the csv file data = pd.read_csv('temperature_data.csv') # define feature and target variables X = data['day'].values.reshape(-1,1) y = data['temperature'].values # train the model from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(X, y) # make prediction x_pred = 11 prediction = model.predict(np.array([x_pred]).reshape(-1,1)) print(\\"The predicted temperature for day {} is: {}\\".format(x_pred, prediction[0]))"},{"prompt":"Create a Python dictionary to associate months with their respective number of days.","completion":"months_and_days = { 'January': 31, 'February': 28, 'March': 31, 'April': 30, 'May': 31, 'June': 30, 'July': 31, 'August': 31, 'September': 30, 'October': 31, 'November': 30, 'December': 31 }"},{"prompt":"Create unit tests for a Python function that adds two numbers. Not applicable","completion":"import unittest def add_two_numbers(a, b): return a + b class TestAddTwoNumbers(unittest.TestCase): def test_add_two_numbers_positive(self): result = add_two_numbers(1, 2) self.assertEqual(result, 3) def test_add_two_numbers_negative(self): result = add_two_numbers(-1, -2) self.assertEqual(result, -3) if __name__ == '__main__': unittest.main()"},{"prompt":"Create a Python function that takes in a list of words and check if every word in the list is a palindrome. [abcd, anna, mom, live]","completion":"def is_all_palindrome(words): for word in words: if word == word[::-1]: continue else: return False return True words = [\\"abcd\\", \\"anna\\", \\"mom\\", \\"live\\"] print(is_all_palindrome(words))"},{"prompt":"Convert the following Regular Expression matching code to a Regular Expression replacement code in Python. re_match = w+@w+.w+","completion":"import re re_match = \\"w+@w+.w+\\" re_replace = \\"<valid email>\\" print(re.sub(re_match, re_replace, \\"my_email@example.com\\"))"},{"prompt":"Design a python class for a shopping cart. No inpu","completion":"class ShoppingCart: def __init__(self): self.items = [] def add_item(self, item): self.items.append(item) def remove_item(self, item): if item in self.items: self.items.remove(item) def get_total_amount(self): total_amount = 0 for item in self.items: total_amount += item.price return total_amount"},{"prompt":"Create a program in Python to find the maximum value from a dictionary. my_dict = {'data1':100,'data2':54,'data3':247}","completion":"# Get the maximum value in the dictionary max_value = max(my_dict.values()) # Print the maximum value print (max_value)"},{"prompt":"Create a program in Python to add the elements of two given lists. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"list1 = [1, 2, 3] list2 = [4, 5, 6] def addLists(list1, list2): result = [] for i in range(0, len(list1)): result.append(list1[i] + list2[i]) return result print(addLists(list1, list2))"},{"prompt":"Develop a functional web spider in Python that can crawl the web and collect articles from a given topic related to technology. Not applicable","completion":"import requests from bs4 import BeautifulSoup def web_spider(max_pages): page = 1 while page <= max_pages: # Make request to target page source_code = requests.get('http://example.com/tech/page' + str(page)) plain_text = source_code.text soup = BeautifulSoup(plain_text, 'html.parser') # Get data from html page for link in soup.find_all('a', {'class': 'articles-list-item__title'}): href = link.get('href') title = link.string # print the link, title, page number print(href) print(title) # increment the page number page += 1 # Main function if __name__ == '__main__': web_spider(2)"},{"prompt":"Generate a function in Python to calculate the total price of an online order. The function should take an array of items and item prices as input and return the total price as output. Input array of items: [Tshirt,Jeans,Shoes], item prices: [30,45,100]","completion":"def calculate_total_price(items, prices): total = 0 for i in range(len(items)): total += prices[i] return total total = calculate_total_price([\\"T-shirt\\",\\"Jeans\\",\\"Shoes\\"], [30,45,100]) print(\\"The total price is:\\", total)"},{"prompt":"Write a python program to print the Fibonacci series upto n terms. 6","completion":"def fibonacci_series(n): if n==0: return 0 elif n==1: return 1 else: return fibonacci_series(n-1) + fibonacci_series(n-2) for i in range(6): print(fibonacci_series(i), end=', ')"},{"prompt":"Create a bash script that runs an application on startup. Application Command: python3 my_app.py","completion":"#!/bin/bash sudo echo \\"@python3 my_app.py\\" >> /etc/rc.local sudo chmod +x /etc/rc.local"},{"prompt":"Modify this Python program to compute the sum of all elements in a multidimensional array. multi_dim_array = [[1,2], [3,4], [15,16]]","completion":"def sum_multi_dim_array(multi_dim_array): # init sum to 0 sum = 0 # iterate over rows for row in multi_dim_array: # iterate over columns for num in row: # add number to sum sum += num return sum"},{"prompt":"Modify an existing python script to count the number of words in a given sentence. sentence = One two three four five","completion":"def count_words(sentence): words = sentence.split(' ') return len(words) sentence = \\"One two three four five\\" word_count = count_words(sentence) print(\\"The number of words in the sentence is: \\", word_count)"},{"prompt":"Generate a python code for a basic calculator","completion":"def calculate(a, b, op): if op == '+': return a + b elif op == '-': return a - b elif op == '*': return a * b elif op == '/': return a / b else: return \\"Operation not supported.\\""},{"prompt":"Design an algorithm in Python that takes a list of integers and returns a new list of integers such that the difference between every two adjacent elements in the new list is greater than 3. [1, 2, 4, 5, 8, 14, 15]","completion":"def solution(list): result = [] for i in list: if len(result) == 0: result.append(i) elif i - result[-1] > 3: result.append(i) return result list = [1, 2, 4, 5, 8, 14, 15] print(solution(list)) # Result: [1, 4, 8, 14]"},{"prompt":"Convert the following Python code into C++. def greet(name): print(Hello, + name)","completion":"#include <iostream> void greet(std::string name) { std::cout << \\"Hello, \\" << name << std::endl; }"},{"prompt":"Write a Python function to return the greatest common divisor among two numbers. num1 = 30, num2 = 45","completion":"def gcd(num1, num2): if(num2 == 0): return num1 return gcd(num2, num1%num2)"},{"prompt":"This code performs library screening result analysis using the pycas package. To use it, run the script with the required arguments: input data file path, control experiment labels, treatment experiment labels, method to be used in the analysis, whether to consider barcodes, and the result output directory. The input data file should have columns named gene, guide, and barcode. The control and treatment experiment labels should be separated by space and have the same length. The method should be either sunbird or mw. The result will be saved in a csv file named pycas_analysis_sunbird.csv in the specified output directory or the current work directory if not specified.","completion":"#! /bin/env python3 __all__ = ['pycaspattern'] # ------------------ # Libraries # ------------------ import argparse import os import sys sys.path.append('/gpfs/user/liuzh/Code/crispr') import pandas as pd from pycas.analysis import Screening from pycas.utils.decorator import helpstring from pycas.utils.decorator import AppendHelp # ------------------ # Functions # ------------------ def pycasanalysis(filename, ctrl_label, exp_label, method, hasbarcode, out_dir): file_type = 'csv' if filename.split('.')[-1] == 'txt': sep = 't' file_type = 'txt' elif filename.split('.')[-1] == 'csv': sep = ',' file_type = 'csv' else: raise ValueError('Input data file should be txt or csv') if file_type == 'csv': data = pd.read_csv(filename, header=0) else: data = pd.read_table(filename, header=0, sep='t') for x in ['gene', 'guide', 'barcode']: if x not in data.columns: raise ValueError('Input data file should contain column named as: ' + x) if len(ctrl_label) != len(exp_label): raise ValueError('Input control labels and treatment labels should be of the same length.') if out_dir != '' and not os.path.exists(out_dir): os.mkdir(out_dir) if method not in ['sunbird', 'mw']: raise ValueError('The test method should be in: sunbird mw.') analysis = Screening(data, ctrl_label, exp_label, hasbarcode=hasbarcode) if method == 'sunbird': analysis.sunbird(10) analysis.test['sunbird'].to_csv( os.path.join(out_dir, 'pycas_analysis_sunbird.csv') ) else: pass # ------------------ # Main # ------------------ if __name__ == '__main__': parser = argparse.ArgumentParser( prog='pycasanalysis', description='Analysis the library screening result.' ) parser.add_argument( '-i', '--input', required=True, help='Input data file path, with columns: gene, guide <, barcode>, [labels]. (column names should be in the csv file).' ) parser.add_argument( '-c', '--control-label', nargs='+', help='Control experiment labels, separeted by space.' ) parser.add_argument( '-t', '--treat-label', nargs='+', help='Treatment experiment labels, separeted by space.' ) parser.add_argument( '-m', '--method', default='sunbird', help='Method to be used in the analysis: sunbird, mw.' ) parser.add_argument( '--has-barcode', action='store_true', help='Input data should be tested consider barcodes.' ) parser.add_argument( '--out-dir', default='', help='Result output directory，default is current work directory.' ) args = parser.parse_args() def analysis(**args): pycasanalysis( filename=args['input'], ctrl_label=args['control_label'], exp_label=args['treat_label'], method=args['method'], hasbarcode=args['has_barcode'], out_dir=args['out_dir'] ) analysis(**vars(args)) # ------------------ # EOF # ------------------"},{"prompt":"Create a HTML page to explain why a particular programming language is the best choice.","completion":"<html> <head> <title>Why Choose Python programming language?</title> <style> body { background-color: #eeeeee; } </style> </head> <body> <h1>Why Choose Python programming language?</h1> <p> Python is a highly popular programming language that is used for many tasks, from web development to data science. It is versatile, user-friendly and easy to learn. The language has an extensive library of modules for different tasks, which make it great for developing complex applications quickly. Its syntax is simple and concise and it is great for rapid prototyping. Its strong support for object oriented programming makes it a great choice for developers who want to develop robust and divided applications. </p> </body> </html>"},{"prompt":"Create a Python program that prints the numbers from 1 to 100 and prints Fizz if the number is divisible by 3 and Buzz if the number is divisible by 5 and FizzBuzz if the number is divisible by both 3 and 5.","completion":"for i in range(1, 101): if i % 15 == 0: print(\\"FizzBuzz\\") elif i % 3 == 0: print(\\"Fizz\\") elif i % 5 == 0: print(\\"Buzz\\") else: print(i)"},{"prompt":"develop a python code to calculate the area of a circle.","completion":"def area_of_circle(radius): return 3.14 * (radius ** 2) if __name__ == '__main__': radius = 5 print(area_of_circle(radius)) # 78.5"},{"prompt":"Create a class to generate an HTML table using Python.","completion":"\\"\\"\\" Create a class to generate an HTML table using Python. \\"\\"\\" class HtmlTable: def __init__(self, table_headers, table_data): self.table_headers = table_headers self.table_data = table_data def generate_html_table(self): html = \\"<table>n\\" html += self.generate_headers() html += self.generate_rows() html += \\"</table>\\" return html def generate_headers(self): html = \\"<tr>\\" for header in self.table_headers: html += \\"<th>{}</th>\\".format(header) html += \\"</tr>\\" return html def generate_rows(self): html = \\"\\" for row in self.table_data: html += \\"<tr>\\" for col in row: html += \\"<td>{}</td>\\".format(col) html += \\"</tr>n\\" return html"},{"prompt":"Create a Completion function in Python that takes a string and returns a list of strings that match the input string. string = “th”","completion":"def completion(string): results = [] words = [\\"the\\", \\"that\\", \\"this\\", \\"those\\", \\"thing\\", \\"think\\", \\"thought\\"] for word in words: if len(word) > 2 and word.startswith(string): results.append(word) return results print(completion(\\"th\\")) # Output: [\\"those\\", \\"think\\", \\"thought\\"]"},{"prompt":"Rewrite the following Java program in Python. public class HelloWorld { public static void main(String[] args) { System.out.println(Hello World); } }","completion":"def main(): print(\\"Hello World\\") if __name__ == \\"__main__\\": main()"},{"prompt":"Construct a python program that randomly swaps two elements within a list of numbers. [1, 2, 3, 4, 5]","completion":"import random # input list data_list = [1, 2, 3, 4, 5] # choose two random indices i, j = random.sample(range(len(data_list)), 2) # store the values before swapping a = data_list[i] b = data_list[j] # swap two elements in a list data_list[i] = b data_list[j] = a # print the list after swapping print(data_list)"},{"prompt":"Write Python code to implement the selection sort algorithm. No input.","completion":"def selectionSort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, n): if arr[min_idx] > arr[j]: min_idx = j # Swap the found minimum element with # the first element arr[i], arr[min_idx] = arr[min_idx], arr[i]"},{"prompt":"Write an example of a recursive function in Python. Not applicable","completion":"def factorial(n): if (n == 0): return 1 else: return n * factorial(n-1) print(factorial(5)) # Should print 120"},{"prompt":"Generate a random list of numbers between 1 and 10 of a given length in Python. length = 5","completion":"import random def generateRandomList(length): random_list = [] for _ in range(length): random_list.append(random.randint(1, 10)) return random_list if __name__ == '__main__': print(generateRandomList(5))"},{"prompt":"Create a program in Python that will add two numbers entered by the user.","completion":"def add_two_numbers(): num1 = int(input(\\"Please enter a number: \\")) num2 = int(input(\\"Please enter a another number: \\")) return num1 + num2"},{"prompt":"Create a function in Python to convert a binary string to a decimal number.","completion":"def binary_to_decimal(binary): decimal = 0 for digit in binary: decimal = decimal*2 + int(digit) return decimal"},{"prompt":"Generate a Python program to reverse the digits of a given number. 9786","completion":"def reverse_number(num): rev = 0 while num > 0: reminder = num%10 rev = (rev*10)+reminder num = num//10 return rev"},{"prompt":"Develop a program in Python to detect the outliers of a given dataset. Not applicable","completion":"import numpy as np # Load dataset data = np.genfromtxt(\\"data.csv\\", delimiter=\\",\\") # Calculate interquartile range Q1 = np.percentile(data, 25) Q3 = np.percentile(data, 75) # Interquartile range IQR = Q3 - Q1 # Remove outliers outliers = (data < (Q1 - 1.5 * IQR)) | (data > (Q3 + 1.5 * IQR)) # Print outliers print(data[outliers])"},{"prompt":"mplement a sorting algorithm in Python that sorts a list of strings in descending order of length. arr = [Apple, Banana, Cat, Elephant]","completion":"def sort_by_length(arr): for i in range(len(arr)): for j in range(i + 1, len(arr)): if len(arr[i]) < len(arr[j]): arr[i], arr[j] = arr[j], arr[i] return arr print(sort_by_length(arr))"},{"prompt":"Write a Python program to generate a report of the total number of customers for a given year. customers_data = [{'name': 'Alice', 'year': '2019'}, {'name': 'Bob', 'year': '2019'}, {'name': 'Chris', 'year': '2019'}, {'name': 'David', 'year': '2018'}, {'name': 'Erica', 'year': '2020'}, {'name': 'Frank', 'year': '2020'}]","completion":"# creating an empty dictionary where we will store the total customers for each year customers_by_year = {} for customer in customers_data: # Get the year from the customer data year = customer['year'] # Get the current total customers for the year num_customers = customers_by_year.get(year, 0) # Increase the total customers by one num_customers += 1 # Update the dictionary with the new customer count customers_by_year[year] = num_customers print(f'Total number of customers in 2019: {customers_by_year[\\"2019\\"]}') print(f'Total number of customers in 2020: {customers_by_year[\\"2020\\"]}') print(f'Total number of customers in 2018: {customers_by_year[\\"2018\\"]}')"},{"prompt":"Build a linear regression model in Python to predict the price of a house based on the number of bedrooms.","completion":"import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression # data points bedrooms = np.array([1,2,3,4,5,6,7,8,9,10]) price = np.array([100000,200000,300000,400000,500000,600000,700000,800000,900000,1000000]) # reshaping the data bedrooms = bedrooms.reshape(-1,1) price = price.reshape(-1,1) # Train the Linear Regression model model = LinearRegression() model.fit(bedrooms, price) # Plotting the regression line line = model.coef_*bedrooms + model.intercept_ # Plotting the test data plt.scatter(bedrooms, price) plt.plot(bedrooms, line); plt.title('Price vs. Number of Bedrooms') plt.xlabel('No. of bedrooms') plt.ylabel('Price') plt.show();"},{"prompt":"Generate a Python program to sort a given list of integers in descending order. [6, 4, 7, 2, 1, 3]","completion":"def descending_order_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] < arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] arr = [6, 4, 7, 2, 1, 3] descending_order_sort(arr) print(arr)"},{"prompt":"Create a Python function that takes a dictionary as an argument, and returns the value with maximum frequency in that dictionary. dic = {1: 'a', 2: 'b', 3: 'b', 4: 'c'}","completion":"def max_freq_val(dic): max_freq = 0 max_val = None for val in dic.values(): if dic.values().count(val) > max_freq: max_freq = dic.values().count(val) max_val = val return max_val max_val = max_freq_val(dic) print(max_val)"},{"prompt":"Create a function in Python that takes a twodimensional array (list of lists in Python) and prints out a spiral of the array's values. [[1,2,3],[4,5,6],[7,8,9]]","completion":"def spiralPrint(arr): rows = len(arr) columns = len(arr[0]) x = 0 y = 0 while (x < rows and y < columns): # Print the first row from the remaining rows for i in range(y,columns): print(arr[x][i],end=\\" \\") x += 1 # Print the last column from the remaining columns for i in range(x,rows): print(arr[i][columns-1],end=\\" \\") columns -= 1 # Print the last row from the remaining rows if (x < rows): for i in range(columns-1, (y-1), -1): print(arr[rows-1][i],end=\\" \\") rows -= 1 # Print the first column from the remaining columns if (y < columns): for i in range(rows-1, x-1, -1): print(arr[i][y],end=\\" \\") y += 1 # Test code arr = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]] spiralPrint(arr)"},{"prompt":"Write a Python program that allows a user to enter a number and prints out the sum of the digits of the number. 1234","completion":"num = int(input(\\"Enter a number: \\")) # find sum of its digits sum = 0 while num > 0: digit = num % 10 sum += digit num //= 10 # print the result print(\\"Sum of digits of the number:\\", sum)"},{"prompt":"Generate a Python program that normalizes a given array by subtracting the mean.","completion":"def normalize(arr): mean = sum(arr) / len(arr) normalized_arr = [x - mean for x in arr] return normalized_arr"},{"prompt":"Write a Python program to display all prime numbers less than a specified number.","completion":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def find_prime_numbers(n): primes = [] for i in range(2, n + 1): if is_prime(i): primes.append(i) return primes"},{"prompt":"Create a Python program that prints out the Fibonacci series up to n. n = 5","completion":"# Returns the nth Fibonacci number def Fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return Fibonacci(n-1) + Fibonacci(n-2) # Prints the Fibonacci series n = 5 for i in range(n+1): print(Fibonacci(i))"},{"prompt":"Suggest a completion for the following Python code to sort a given list of dictionaries by a given key. my_list = [{'name': 'Bob', 'age': 20}, {'name': 'Alice', 'age': 10}]","completion":"def sort_dicts(my_list, key): return sorted(my_list, key=lambda x: x[key]) # Main if __name__ == \\"__main__\\": my_list = [{'name': 'Bob', 'age': 20}, {'name': 'Alice', 'age': 10}] key = 'age' print(sort_dicts(my_list, key)) # [{'name': 'Alice', 'age': 10}, {'name': 'Bob', 'age': 20}]"},{"prompt":"Construct a code in python to access specific data from a given JSON string. { name: John, age: 30, cars: { car1: Ford, car2: BMW, car3: Fiat } }","completion":"# Importing the required library import json # Loading json string into a Python object data = json.loads('{\\"name\\": \\"John\\",\\"age\\": 30,\\"cars\\": {\\"car1\\": \\"Ford\\",\\"car2\\": \\"BMW\\",\\"car3\\": \\"Fiat\\"}}') # Extracting the required fields name = data['name'] age = data['age'] car2 = data['cars']['car2'] # Printing the retrieved data print(\\"Name:\\", name) print(\\"Age:\\", age) print(\\"Car 2:\\", car2)"},{"prompt":"Convert the following pseudocode into Python code. x = x + 1","completion":"x += 1"},{"prompt":"Create a class in Python that can be used to model and store data about a person.","completion":"class Person: def __init__(self, name, age, gender, height, weight): self.name = name self.age = age self.gender = gender self.height = height self.weight = weight def get_name(self): return self.name def get_age(self): return self.age def get_gender(self): return self.gender def get_height(self): return self.height def get_weight(self): return self.weight"},{"prompt":"Research and write a report on the current state of the Python programming language.","completion":"Python is an interpreted, high-level programming language developed by Dutch programmer Guido Van Rossum in 1991. It has a comprehensive and large standard library, and a very easy-to-learn and widely used syntax. Python is commonly used in many areas of scientific computing and is widely used in web and software development, artificial intelligence, machine learning, and data science. Python is highly regarded for its readability and broad applicability, and is the most popular language for learning Computer Science due to its flexible and expanding libraries. It supports object-oriented, procedural, and functional programming. Python, like most languages, can be used to create sophisticated applications, graphs and data visualizations, create web development, debug existing projects, and many other interesting tasks. It is a beginner-friendly language and the official support is well organized and up-to-date, making it truly an ideal choice for beginners. The experience and effort involved in learning Python can easily be produced in other computer-related related fields, making Python increasingly attractive and adopted."},{"prompt":"Write a Python program for converting a decimal number into its corresponding binary string. 56","completion":"def decimal_to_binary(n): binary_string = \\"\\" while n > 0: binary_string += str(n % 2) n //= 2 return binary_string[::-1] # Example result = decimal_to_binary(5) print(result) # Output 101"},{"prompt":"Write a Python program to generate a random password of length 10, containing at least one lowercase letter, one uppercase letter, and one number. Not applicable","completion":"import random import string def generate_password(length): password = '' for i in range(length): # add random lowercase character password += random.choice(string.ascii_lowercase) # add random uppercase character password += random.choice(string.ascii_uppercase) # add random digit character password += random.choice(string.digits) # generate the remaining characters for i in range(length-3): password += random.choice(string.ascii_letters + string.digits) password_list = list(password) random.shuffle(password_list) password = ''.join(password_list) return password print(generate_password(10))"},{"prompt":"w can you make the given Python code more efficient? def calculate_sum(numbers): sum_val = 0 for num in numbers: sum_val += num return sum_val","completion":"def calculate_sum(numbers): return sum(numbers)"},{"prompt":"Write an algorithm in Python to merge two sorted arrays into one. Input data will be two unsorted arrays of integers.","completion":"def merge_arrays(arr1, arr2): combined_arr = [] i, j = 0, 0 while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: combined_arr.append(arr1[i]) i += 1 else: combined_arr.append(arr2[j]) j += 1 combined_arr.extend(arr1[i:]) combined_arr.extend(arr2[j:]) return combined_arr"},{"prompt":"Produce a Python program that calculates the average of a list of numbers. [1,2,3,4,5,6]","completion":"def average(numbers): total = 0 for num in numbers: total += num return total/len(numbers) nums = [1,2,3,4,5,6] print(\\"Average of the list of numbers is:\\", average(nums))"},{"prompt":"Optimize the following linear regression code in Python to minimize execution time. import numpy as np def linearRegression(x_values,y_values): x = np.array(x_values) y = np.array(y_values) A = np.vstack([x, np.ones(len(x))]).T m, c = np.linalg.lstsq(A, y, rcond=None)[0] return m, c","completion":"import numpy as np def linearRegression(x_values, y_values): x = np.array(x_values, dtype=np.float64) y = np.array(y_values, dtype=np.float64) A = np.vstack([x, np.ones(len(x))]).T m, c = np.linalg.lstsq(A, y, rcond=None)[0] return m, c"},{"prompt":"Create a function in Python that takes a list of strings as an argument and returns a new list with only the strings that have a length greater than 5. [Apple, Banana, Orange, Kiwi]","completion":"\\"\\"\\" Create a function in Python that takes a list of strings as an argument and returns a new list with only the strings that have a length greater than 5. \\"\\"\\" def get_long_strings(str_list): long_str_list = [] for s in str_list: if len(s) > 5: long_str_list.append(s) return long_str_list if __name__ == '__main__': str_list = [\\"Apple\\", \\"Banana\\", \\"Orange\\", \\"Kiwi\\"] print(get_long_strings(str_list)) # [\\"Banana\\", \\"Orange\\"]"},{"prompt":"Can you provide a Python script to find the most frequent element in an array? [1, 1, 2, 3, 2, 4, 4]","completion":"from collections import Counter def most_frequent(arr): cnt = Counter(arr) return cnt.most_common(1)[0][0] arr = [1, 1, 2, 3, 2, 4, 4] most_frequent_elem = most_frequent(arr) print(most_frequent_elem)"},{"prompt":"Create a program to fetch data from Wikipedia using Python.","completion":"import wikipedia def get_wikipedia_data(query): #Get the summary from wikipedia summary = wikipedia.summary(query) #Extract the content from the summary content = wikipedia.page(query).content #Return the content and summary return content, summary"},{"prompt":"Generate a Python function that sorts a list of numbers using the bubble sort algorithm [8,2,11,9,20,7]","completion":"def bubbleSort(list): n = len(list) for i in range(n): for j in range(0, n-i-1): if list[j] > list[j+1] : list[j], list[j+1] = list[j+1], list[j] return list print(bubbleSort([8,2,11,9,20,7]))"},{"prompt":"Create a class in Python which calculates simple interest. Not applicable","completion":"class SimpleInterest: def __init__(self, principal, rate, time): self.principal = principal self.rate = rate self.time = time def calculate(self): return self.principal * (1 + self.rate * self.time) si = SimpleInterest(20000, 0.10, 2) print('Simple Interest =', si.calculate())"},{"prompt":"Write a Python program to print the following pattern in each row.","completion":"for i in range(1, 5): for j in range(1, i+1): print(i, end=\\" \\") print()"},{"prompt":"Generate a Python class called Student with instance variables 'name' and 'grade'.","completion":"class Student: def __init__(self, name, grade): self.name = name self.grade = grade def display(self): print(\\"Name:\\", self.name, \\"Grade:\\", self.grade)"},{"prompt":"Execute the following SQL query in a Python environment and return the result. SELECT * FROM Orders WHERE OrderDate > '20181231'","completion":"import sqlite3 conn = sqlite3.connect('Order.db') c = conn.cursor() c.execute(\\"SELECT * FROM Orders WHERE OrderDate > '2018-12-31'\\") result = c.fetchall() print(result)"},{"prompt":"Create a Python script that sends a GET request to a specified URL and prints out the response. Not applicable","completion":"import requests url = 'http://example.com/' r = requests.get(url) print('Status code:', r.status_code) print('Response text: ', r.text)"},{"prompt":"Design a Python program to switch the order of two given integers.","completion":"def switch_order(a, b): c = a a = b b = c return a, b"},{"prompt":"Generate a code in Python to measure the loading time of a website.","completion":"import time import urllib.request def loadUrl(url): start = time.time() response = urllib.request.urlopen(url) end = time.time() total_time = end - start print(total_time) url = input(\\"Enter website url: \\") loadUrl(url)"},{"prompt":"Write a regular expression in Python to match valid IP addresses.","completion":"import re ip_regex = re.compile(r'^d{1,3}.d{1,3}.d{1,3}.d{1,3}')"},{"prompt":"Edit this Python code to be more efficient. def find_min(items): min = items[0] for item in items: if item < min: min = item return m","completion":"def find_min(items): min = float('inf') for item in items: if item < min: min = item return min"},{"prompt":"Design a function to traverse a binary tree in a breadthfirst manner.","completion":"# A Python program to print # level order traversal of tree def breadth_first_traversal(root): if root is None: return queue = [] queue.append(root) while(len(queue) > 0): print (queue[0].val,end=' ') node = queue.pop(0) if node.left is not None: queue.append(node.left) if node.right is not None: queue.append(node.right)"},{"prompt":"Create an array of numbers using python, only using the number 0","completion":"# Create an array of 10 zeros arr = [0 for i in range(10)] # Create an array of 20 zeros arr = [0 for i in range(20)] # Create a 3x3 array of zeros arr = [[0 for i in range(3)] for j in range(3)] # Create a 5x5 array of zeros arr = [[0 for i in range(5)] for j in range(5)]"},{"prompt":"Generate a predictive model using machine learning techniques in Python that can predict the outcome of a future stock price given its historical data.","completion":"import pandas as pd import numpy as np from sklearn.svm import SVR from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error # Load the data df = pd.read_csv('stock_data.csv') # Get the features and labels X = df.drop(['Close Price'], axis=1).values y = df['Close Price'].values # Split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101) # Train the model regressor = LinearRegression() regressor.fit(X_train, y_train) # Make predictions with the model y_pred = regressor.predict(X_test) # Calculate the accuracy accuracy = mean_squared_error(y_test, y_pred) print(accuracy)"},{"prompt":"Write a Python program to optimize a cost function using gradient descent. Cost Function: f(x) = x^2 10x + 25","completion":"import numpy as np def cost_function(x): \\"\\"\\" Cost function to be optimized \\"\\"\\" return np.square(x) - 10*x + 25 def gradient_descent(x, lr): \\"\\"\\" Gradient descent optimization to minimize cost function \\"\\"\\" d_x = 2*x - 10 # Derivative of cost function x -= lr * d_x # Update x value return x if __name__ == '__main__': x = 5 # Initial value lr = 0.2 # Learning rate # Gradient descent loop for _ in range(10): x = gradient_descent(x, lr) cost = cost_function(x) print(\\"Optimized x = {}, cost = {}\\".format(x, cost))"},{"prompt":"Generate a code to generate the Fibonacci sequence until the nth number using the Python programming language 5","completion":"def fibonacci(n): if n < 0: raise ValueError(\\"Invalid input\\") elif n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) fibonacci_sequence = [fibonacci(i) for i in range(5)] print(fibonacci_sequence)"},{"prompt":"Edit the following Python code to make the program run without any errors. s = input(Please enter a string: ) print(The reverse of the string is: s[::1]","completion":"s = input(\\"Please enter a string: \\") print(\\"The reverse of the string is: \\" + s[::-1])"},{"prompt":"Write a Python program to check if the input is an armstrong number or not.","completion":"# Python program to check Armstrong numbers # Function to check armstrong numbers def isArmstrong(n): # Initialize sum sum = 0 # Find the sum of the cube of each digit temp = n while temp > 0: digit = temp % 10 sum += digit ** 3 temp //= 10 # Return True if n is equal to the sum if n == sum: return True else: return False # Driver program n = int(input(\\"Input a number to check if it is an Armstrong number: \\")) if isArmstrong(n): print(\\"Yes\\") else: print(\\"No\\")"},{"prompt":"Write a code snippet in Python to print the current month.","completion":"import calendar # get the current month current_month = calendar.month_name[calendar.datetime.now().month] print('Current Month is %s' %current_month)"},{"prompt":"Compare two JSON objects and check if they are equal.","completion":"import json def json_compare(json1, json2): # convert both the JSON objects to Python dictionary json1_dict = json.loads(json1) json2_dict = json.loads(json2) # check if the keys are equal if (json1_dict.keys() == json2_dict.keys()): # if keys are equal, check if the values are equal for key in json1_dict.keys(): if (json1_dict[key] != json2_dict[key]): return False return True else: return False"},{"prompt":"Create a class in Python to store user information with the given attributes. Attributes username, email, profile_picture","completion":"class UserInformation: def __init__(self, username, email, profile_picture): self.username = username self.email = email self.profile_picture = profile_picture"},{"prompt":"Develop a web scraping algorithm in Python to extract product reviews from an online store.","completion":"import requests import json from bs4 import BeautifulSoup #make an HTTP request to the web page r = requests.get('https://www.example.com/products') #parse the response soup = BeautifulSoup(r.content, 'html.parser') #select relevant elements review_elements = soup.select('.review .card-body') # extract the reviews reviews = [e.text for e in review_elements] #store reviews in JSON format data = { 'Product name': 'Example product', 'reviews': reviews } with open('reviews.json', 'w') as outfile: json.dump(data, outfile)"},{"prompt":"Create a Python program to create a dictionary with three items and add a fourth item.","completion":"# create a dictionary my_dict = {\\"fruit\\": \\"apple\\", \\"color\\": \\"red\\", \\"size\\": \\"medium\\"} # add a fourth item my_dict[\\"shape\\"] = \\"round\\" print(my_dict)"},{"prompt":"Write code to generate a multidimensional array containing two lists of strings in Python. Two lists of strings List 1: [apple, banana, carrot] List 2: [french fries, rice, salad]","completion":"arr = [[\\"apple\\", \\"french fries\\"], [\\"banana\\", \\"rice\\"], [\\"carrot\\", \\"salad\\"]]"},{"prompt":"Create a Python module to abstract basic database operations (CRUD). Not applicable","completion":"import sqlite3 class Database: def __init__(self, db_name): self.connection = sqlite3.connect(db_name) self.cursor = self.connection.cursor() def create(self, values): self.cursor.execute('INSERT INTO records VALUES (?, ?)', values) self.connection.commit() def read(self): self.cursor.execute('SELECT * FROM records') return self.cursor.fetchall() def update(self, values): self.cursor.execute('UPDATE records SET name = ? WHERE id = ?', values) self.connection.commit() def delete(self, id): self.cursor.execute('DELETE FROM records WHERE id = ?', (id,)) self.connection.commit()"},{"prompt":"Create a Python program to check if a list is sorted in ascending order. listA = [1, 5, 9, 10]","completion":"def isListAscending(listA): return all(listA[i] <= listA[i+1] for i in range(len(listA)-1)) # Driver code listA = [1, 5, 9, 10] # listA = [10, 9, 5, 1] # Print result print(isListAscending(listA))"},{"prompt":"Develop a Python script to scrape and store data from a specified website.","completion":"\\"\\"\\" Develop a python script to scrape and store data from a specified website. \\"\\"\\" import requests from bs4 import BeautifulSoup import pandas as pd # specify website URL url = '<website url>' # get page content page = requests.get(url).text # parse the page for data soup = BeautifulSoup(page, 'html.parser') # find data element in page data_elements = soup.find_all('<data>') # extract data from element and store in a list data_list = [] for elem in data_elements: data_list.append(elem.text) # create dataframe with data and store in csv file df = pd.DataFrame(data_list) df.to_csv('data.csv')"},{"prompt":"Create a python program to sort numbers from a list from lowest to highest [3,1,8,5,2]","completion":"\\"\\"\\" Sort numbers from a list from lowest to highest \\"\\"\\" def sort_list(nums): for i in range(len(nums)): min_index = i for j in range(i+1, len(nums)): if nums[min_index] > nums[j]: min_index = j nums[i], nums[min_index] = nums[min_index], nums[i] return nums if __name__ == '__main__': nums = [3,1,8,5,2] print(sort_list(nums))"},{"prompt":"Create a Python function that takes two lists and returns a list of all elements in common between them. list1 = [1, 2, 3, 4, 5] list2 = [2, 4, 6, 8]","completion":"def find_common_elements(list1, list2): common_elements = [] for i in list1: if i in list2: common_elements.append(i) return common_elements"},{"prompt":"Create a python program to randomly select a survivor from a given list of names names = [Alex, Bob, Charlotte, John, Mike]","completion":"import random names = [\\"Alex\\", \\"Bob\\", \\"Charlotte\\", \\"John\\", \\"Mike\\"] def randomly_select_survivor(names): survivor = random.choice(names) print(f\\"The randomly selected survivor is: {survivor}\\") randomly_select_survivor(names)"},{"prompt":"Create a function in Python that takes a string and returns a new string with the characters in reverse order. Hello World!","completion":"def reverse_string(input_str): reversed_str = \\"\\" for i in range(len(input_str)-1,-1,-1): reversed_str += input_str[i] return reversed_str print (reverse_string(\\"Hello World!\\"))"},{"prompt":"Generate a Python program to give an output as true if the given string contains at least two distinct characters AbcdABC","completion":"def containsTwoDistinctChars(string): distinctChars = set() for char in string: distinctChars.add(char) return len(distinctChars) >= 2 print(containsTwoDistinctChars(\\"AbcdABC\\"))"},{"prompt":"Create a REST API in Python and Flask that uses a relational database to store user data. Not applicable","completion":"from flask import Flask, jsonify, request import sqlite3 app = Flask(__name__) @app.route('/user', methods=['POST', 'GET']) def user(): # Connect to the database conn = sqlite3.connect('example.db') # Create a cursor object c = conn.cursor() if request.method == 'POST': # Get the data from the request data = request.json.get('data') # Insert the data into the database c.execute(\\"INSERT INTO users (data) VALUES (?)\\", [data]) # Commit the changes to the database conn.commit() # Get the user data from the database c.execute(\\"SELECT * FROM users WHERE id=last_insert_rowid()\\") # Fetch the first row row = c.fetchone() # Close the connection conn.close() # Return the user data as JSON return jsonify({'data': row[0]}) if request.method == 'GET': # Get the user data from the database c.execute(\\"SELECT * FROM users\\") # Fetch all the rows rows = c.fetchall() # Close the connection conn.close() # Return the user data as JSON return jsonify([{'data': row[0]} for row in rows]) if __name__ == '__main__': app.run()"},{"prompt":"Generate a Python script that takes in a list of numbers, rearranges them in ascending order, and prints out the result. [3, 2, 5, 7, 1, 4]","completion":"def sort_list(nums): # Sort list in ascending order nums.sort() # Print out the sorted list for num in nums: print(num) # Test the function nums = [3, 2, 5, 7, 1, 4] sort_list(nums)"},{"prompt":"Write a code to create a web server using Flask framework in Python.","completion":"from flask import Flask app = Flask(__name__) @app.route('/') def home(): return 'Welcome!' if __name__ == '__main__': app.run()"},{"prompt":"Write an app in any language that takes two integers as input and returns the greatest common divisor of the two numbers. 24, 18","completion":"JavaScript: function gcd(a, b) { if (b === 0) return a; return gcd(b, a % b); } console.log(gcd(24,18)) // 6 Python: def gcd(a, b): if(b == 0): return a else: return gcd(b, a%b) print(gcd(24,18)) # 6"},{"prompt":"Write an algorithm in Python that finds the maximum of three numbers. Not applicable","completion":"def find_max(a, b, c): if a > b and a > c: max_num = a elif b > a and b > c: max_num = b else: max_num = c return max_num max_number = find_max(7, 5, 9) print(\\"The maximum of three numbers is:\\", max_number)"},{"prompt":"Suggest a program to convert Celsius to Fahrenheit and vice versa using Python.","completion":"def celsius_to_fahrenheit(celsius): return celsius * 9 / 5 + 32 def fahrenheit_to_celsius(fahrenheit): return (fahrenheit - 32) * 5 / 9"},{"prompt":"Create a Python program to store prices for grocery items in a dictionary and write a function to calculate the total cost of the items. groceries = {'apple': 3.99, 'banana': 2.99, 'milk': 5.99, 'bread': 3.50}","completion":"groceries = {'apple': 3.99, 'banana': 2.99, 'milk': 5.99, 'bread': 3.50} def total_cost(groceries): total = 0.0 for key in groceries: total += groceries[key] return total total_cost = total_cost(groceries) print(f'The total cost of all groceries is {total_cost}.')"},{"prompt":"Create a basic implementation of a linked list using Python.","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node def print_list(self): temp = self.head while (temp): print (temp.data) temp = temp.next # Driver code llist = LinkedList() llist.push(1) llist.push(3) llist.push(11) llist.push(5) llist.push(9) llist.print_list()"},{"prompt":"Create a python function that takes a string as an argument and substitues each letter with its corresponding number in the alphabet. Input String = “Data Science”","completion":"def letterToNumber(input_string): result_string = \\"\\" for letter in input_string: result_string += str(ord(letter)-64) return result_string input_string = \\"Data Science\\" substituted_string = letterToNumber(input_string) print(\\"Substituted string : \\",substituted_string)"},{"prompt":"This code defines models for campaigns and coupons in a Shuup ecommerce platform. To use the code, create a new Django app and add this code to the models.py file. Then, run migrations to create the necessary database tables. The models include CatalogCampaign, BasketCampaign, Coupon, and CouponUsage. CatalogCampaign and BasketCampaign are subclasses of Campaign, which is an abstract base class. CatalogCampaign represents a campaign that applies to a set of products, while BasketCampaign represents a campaign that applies to the entire basket. Coupon represents a discount code that can be applied to a basket. CouponUsage represents the usage of a coupon in an order. The models have various fields and methods for managing campaigns and coupons, including checking if a campaign or coupon is available, attaching a coupon to a campaign, and checking if a coupon can be used by a customer. The models also include logging functionality through the use of the define_log_model function.","completion":"# This file is part of Shuup. # # Copyright (c) 2012-2017, Shoop Commerce Ltd. All rights reserved. # # This source code is licensed under the OSL-3.0 license found in the # LICENSE file in the root directory of this source tree. import random import string from django.conf import settings from django.core.exceptions import ValidationError from django.db import models from django.db.models import Q from django.utils.encoding import force_text, python_2_unicode_compatible from django.utils.timezone import now from django.utils.translation import ugettext_lazy as _ from enumfields import Enum from parler.models import TranslatableModel, TranslatedFields from shuup.campaigns.consts import ( CAMPAIGNS_CACHE_NAMESPACE, CATALOG_FILTER_CACHE_NAMESPACE, CONTEXT_CONDITION_CACHE_NAMESPACE ) from shuup.campaigns.models.basket_conditions import ( CategoryProductsBasketCondition, ProductsInBasketCondition ) from shuup.campaigns.utils.campaigns import get_product_ids_and_quantities from shuup.campaigns.utils.matcher import get_matching_for_product from shuup.core import cache from shuup.core.fields import InternalIdentifierField from shuup.core.models import Category, Order, Shop from shuup.core.utils import context_cache from shuup.utils.analog import define_log_model from shuup.utils.properties import MoneyPropped class CampaignType(Enum): CATALOG = 1 BASKET = 2 class CampaignQueryset(models.QuerySet): def available(self, shop=None): query = Q( Q(active=True) & (Q(start_datetime__isnull=True) | Q(start_datetime__lte=now())) & (Q(end_datetime__isnull=True) | Q(end_datetime__gte=now())) ) if shop: query &= Q(shop=shop) return self.filter(query) class Campaign(MoneyPropped, TranslatableModel): admin_url_suffix = None shop = models.ForeignKey(Shop, verbose_name=_(\\"shop\\"), help_text=_(\\"The shop where the campaign is active.\\")) name = models.CharField(max_length=120, verbose_name=_(\\"name\\"), help_text=_(\\"The name for this campaign.\\")) # translations in subclass identifier = InternalIdentifierField(unique=True) active = models.BooleanField(default=False, verbose_name=_(\\"active\\"), help_text=_( \\"Check this if the campaign is currently active. Please also set a start and end date.\\" )) start_datetime = models.DateTimeField(null=True, blank=True, verbose_name=_(\\"start date and time\\"), help_text=_( \\"The date and time the campaign starts. This is only applicable if the campaign is marked as active.\\" )) end_datetime = models.DateTimeField(null=True, blank=True, verbose_name=_(\\"end date and time\\"), help_text=_( \\"The date and time the campaign ends. This is only applicable if the campaign is marked as active.\\" )) created_by = models.ForeignKey( settings.AUTH_USER_MODEL, blank=True, null=True, related_name=\\"+\\", on_delete=models.SET_NULL, verbose_name=_(\\"created by\\")) modified_by = models.ForeignKey( settings.AUTH_USER_MODEL, blank=True, null=True, related_name=\\"+\\", on_delete=models.SET_NULL, verbose_name=_(\\"modified by\\")) created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(\\"created on\\")) modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(\\"modified on\\")) objects = CampaignQueryset.as_manager() class Meta: abstract = True verbose_name = _('Campaign') verbose_name_plural = _('Campaigns') def save(self, *args, **kwargs): super(Campaign, self).save(*args, **kwargs) cache.bump_version(CAMPAIGNS_CACHE_NAMESPACE) cache.bump_version(CONTEXT_CONDITION_CACHE_NAMESPACE) cache.bump_version(CATALOG_FILTER_CACHE_NAMESPACE) def is_available(self): if not self.active: # move to manager? return False if self.start_datetime and self.end_datetime: if self.start_datetime <= now() <= self.end_datetime: return True return False elif self.start_datetime and not self.end_datetime: if self.start_datetime > now(): return False elif not self.start_datetime and self.end_datetime: if self.end_datetime < now(): return False return True @property def type(self): return CampaignType.BASKET if isinstance(self, BasketCampaign) else CampaignType.CATALOG class CatalogCampaign(Campaign): _queryset = None admin_url_suffix = \\"catalog_campaign\\" conditions = models.ManyToManyField('ContextCondition', blank=True, related_name='campaign') filters = models.ManyToManyField('CatalogFilter', blank=True, related_name='campaign') translations = TranslatedFields(public_name=models.CharField(max_length=120, blank=True, help_text=_( \\"The campaign name to show in the store front.\\" ))) def __str__(self): return force_text(_(\\"Catalog Campaign: %(name)s\\" % dict(name=self.name))) def save(self, *args, **kwargs): super(CatalogCampaign, self).save(*args, **kwargs) self.filters.update(active=self.active) for f in self.filters.all(): for matching_product in f.get_matching_shop_products(): context_cache.bump_cache_for_shop_product(matching_product) self.conditions.update(active=self.active) def rules_match(self, context, shop_product, matching_catalog_filters, matching_context_conditions): if not self.is_available(): return False # If rule has filters, all of them has to match for filter_pk in self.filters.values_list(\\"pk\\", flat=True): if filter_pk not in matching_catalog_filters: return False # All filters match so let's check that also all the conditions match for condition_pk in self.conditions.values_list(\\"pk\\", flat=True): if condition_pk not in matching_context_conditions: return False return True @classmethod def get_for_product(cls, shop_product): matching_filters = get_matching_for_product(shop_product, provide_category=\\"campaign_catalog_filter\\") matching_conditions = get_matching_for_product(shop_product, provide_category=\\"campaign_context_condition\\") query_filter = Q(Q(filters__in=matching_filters) | Q(conditions__in=matching_conditions)) return cls.objects.available(shop=shop_product.shop).filter(query_filter).distinct() @classmethod def get_matching(cls, context, shop_product): prod_ctx_cache_elements = dict( customer=context.customer.pk or 0, shop=context.shop.pk, product_id=shop_product.pk) namespace = CAMPAIGNS_CACHE_NAMESPACE key = \\"%s:%s\\" % (namespace, hash(frozenset(prod_ctx_cache_elements.items()))) cached_matching = cache.get(key, None) if cached_matching is not None: return cached_matching from shuup.campaigns.models.matching import get_matching_context_conditions, get_matching_catalog_filters matching_context_conditions = get_matching_context_conditions(context) matching_catalog_filters = get_matching_catalog_filters(shop_product) if not (matching_context_conditions or matching_catalog_filters): return [] # Get all possible campaign id's for matching context_conditions campaigns_based_on_conditions = set( cls.objects.filter( active=True, shop=context.shop, conditions__id__in=matching_context_conditions ).values_list(\\"pk\\", flat=True) ) campaigns_based_on_catalog_filters = set() if hasattr(cls, \\"filters\\"): # Get all possible campaigns for matching catalog_filters campaigns_based_on_catalog_filters = set( cls.objects.filter( active=True, shop=context.shop, filters__id__in=matching_catalog_filters ).values_list(\\"pk\\", flat=True) ) all_possible_campaigns_ids = (campaigns_based_on_conditions | campaigns_based_on_catalog_filters) matching = [] for campaign in cls.objects.filter(id__in=all_possible_campaigns_ids): if campaign.rules_match(context, shop_product, matching_catalog_filters, matching_context_conditions): matching.append(campaign) cache.set(key, matching, timeout=None) return matching class BasketCampaign(Campaign): admin_url_suffix = \\"basket_campaign\\" basket_line_text = models.CharField( max_length=120, verbose_name=_(\\"basket line text\\"), help_text=_(\\"This text will be shown in basket.\\")) conditions = models.ManyToManyField('BasketCondition', blank=True, related_name='campaign') coupon = models.OneToOneField('Coupon', null=True, blank=True, related_name='campaign', verbose_name=_(\\"coupon\\")) translations = TranslatedFields( public_name=models.CharField(max_length=120, verbose_name=_(\\"public name\\"), help_text=_( \\"The campaign name to show in the store front.\\" )) ) def __str__(self): return force_text(_(\\"Basket Campaign: %(name)s\\" % dict(name=self.name))) def save(self, *args, **kwargs): if self.coupon: code_count_for_shop = BasketCampaign.objects.filter( active=True, shop_id=self.shop.id, coupon__code=self.coupon.code) if not self.id and code_count_for_shop.exists(): raise ValidationError(_(\\"Can not have multiple active campaigns with same code.\\")) if self.id and code_count_for_shop.exclude(coupon_id=self.coupon.id).exists(): raise ValidationError(_(\\"Can not have multiple active campaigns with same code.\\")) super(BasketCampaign, self).save(*args, **kwargs) self.conditions.update(active=self.active) @classmethod def get_for_product(cls, shop_product): matching_conditions = get_matching_for_product( shop_product, provide_category=\\"campaign_basket_condition\\") matching_effects = get_matching_for_product( shop_product, provide_category=\\"campaign_basket_discount_effect_form\\") matching_line_effects = get_matching_for_product( shop_product, provide_category=\\"campaign_basket_line_effect_form\\") effects_q = Q(Q(line_effects__id__in=matching_line_effects) | Q(discount_effects__id__in=matching_effects)) matching_q = Q(Q(conditions__in=matching_conditions) | effects_q) return cls.objects.available(shop=shop_product.shop).filter(matching_q).distinct() @classmethod def get_matching(cls, basket, lines): matching = [] exclude_condition_ids = set() product_id_to_qty = get_product_ids_and_quantities(basket) # Get ProductsInBasketCondition's that can't match with the basket products_in_basket_conditions_to_check = set( ProductsInBasketCondition.objects.filter( products__id__in=product_id_to_qty.keys() ).values_list(\\"id\\", flat=True) ) exclude_condition_ids |= set( ProductsInBasketCondition.objects.exclude( id__in=products_in_basket_conditions_to_check ).values_list(\\"id\\", flat=True) ) # Get CategoryProductsBasketCondition's that can't match with the basket categories = set(Category.objects.filter( shop_products__product_id__in=product_id_to_qty.keys()).values_list(\\"id\\", flat=True)) category_products_in_basket_to_check = set( CategoryProductsBasketCondition.objects.filter(categories__in=categories).values_list(\\"id\\", flat=True) ) exclude_condition_ids |= set( CategoryProductsBasketCondition.objects.exclude( id__in=category_products_in_basket_to_check ).values_list(\\"id\\", flat=True) ) queryset = cls.objects.filter(active=True, shop=basket.shop) if exclude_condition_ids: queryset = queryset.exclude(conditions__id__in=exclude_condition_ids) for campaign in queryset.prefetch_related(\\"conditions\\"): if campaign.rules_match(basket, lines): matching.append(campaign) return matching def rules_match(self, basket, lines): \\"\\"\\" Check if basket rules match. They will not match if 1) The campaign is not active 2) The campaign has attached coupon which doesn't match or is not active 3) Any of the attached rules doesn't match \\"\\"\\" if not self.is_available(): return False if self.coupon and not (self.coupon.active and self.coupon.code.upper() in [c.upper() for c in basket.codes]): return False for rule in self.conditions.all(): if not rule.matches(basket, lines): return False return True class CouponUsage(models.Model): coupon = models.ForeignKey('Coupon', related_name='usages') order = models.ForeignKey(Order, related_name='coupon_usages') created_by = models.ForeignKey( settings.AUTH_USER_MODEL, blank=True, null=True, related_name=\\"+\\", on_delete=models.SET_NULL, verbose_name=_(\\"created by\\")) modified_by = models.ForeignKey( settings.AUTH_USER_MODEL, blank=True, null=True, related_name=\\"+\\", on_delete=models.SET_NULL, verbose_name=_(\\"modified by\\")) created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(\\"created on\\")) modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(\\"modified on\\")) @classmethod def add_usage(cls, order, coupon): return cls.objects.create(order=order, coupon=coupon) @python_2_unicode_compatible class Coupon(models.Model): admin_url_suffix = \\"coupon\\" name_field = \\"code\\" # TODO: Document me search_fields = [\\"code\\"] # used by Select2Multiple to know which fields use to search by code = models.CharField(max_length=12) usage_limit_customer = models.PositiveIntegerField( blank=True, null=True, verbose_name=_(\\"usage limit per customer\\"), help_text=_(\\"Limit the amount of usages per a single customer.\\")) usage_limit = models.PositiveIntegerField( blank=True, null=True, verbose_name=_(\\"usage limit\\"), help_text=_(\\"Set the absolute limit of usages for this coupon. \\" \\"If the limit is zero (0) coupon cannot be used.\\")) active = models.BooleanField(default=False, verbose_name=_(\\"is active\\")) created_by = models.ForeignKey( settings.AUTH_USER_MODEL, blank=True, null=True, related_name=\\"+\\", on_delete=models.SET_NULL, verbose_name=_(\\"created by\\")) modified_by = models.ForeignKey( settings.AUTH_USER_MODEL, blank=True, null=True, related_name=\\"+\\", on_delete=models.SET_NULL, verbose_name=_(\\"modified by\\")) created_on = models.DateTimeField(auto_now_add=True, editable=False, verbose_name=_(\\"created on\\")) modified_on = models.DateTimeField(auto_now=True, editable=False, verbose_name=_(\\"modified on\\")) def save(self, **kwargs): campaign = BasketCampaign.objects.filter(active=True, coupon_id=self.id).first() if campaign and BasketCampaign.objects.filter( active=True, shop_id=campaign.shop.id, coupon__code=self.code).exclude(id=campaign.id).exists(): raise ValidationError(_(\\"Can not have multiple active campaigns with same code.\\")) return super(Coupon, self).save(**kwargs) @classmethod def generate_code(cls, length=6): if length > 12: length = 12 return ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(length)) @property def exhausted(self): val = bool(self.usage_limit and self.usages.count() >= self.usage_limit) return val @property def attached(self): return BasketCampaign.objects.filter(coupon=self).exists() def attach_to_campaign(self, campaign): if not self.attached: self.campaign = campaign @classmethod def is_usable(cls, code, customer): try: code = cls.objects.get(code__iexact=code, active=True) return code.can_use_code(customer) except cls.DoesNotExist: return False def can_use_code(self, customer): \\"\\"\\" Check if customer can use the code :param customer: :type customer: \`Contact\` or None :rtype: True|False \\"\\"\\" if not self.active: return False if not self.attached: return False if self.usage_limit_customer: if not customer or customer.is_anonymous: return False if (self.usages.filter(order__customer=customer, coupon=self).count() >= self.usage_limit_customer): return False return not self.exhausted def use(self, order): return CouponUsage.add_usage(order=order, coupon=self) def increase_customer_usage_limit_by(self, amount): if self.usage_limit_customer: new_limit = self.usage_limit_customer + amount else: new_limit = self.usages.count() + amount self.usage_limit_customer = new_limit def increase_usage_limit_by(self, amount): self.usage_limit = self.usage_limit + amount if self.usage_limit else (self.usages.count() + amount) def has_been_used(self, usage_count=1): \\"\\"\\" See if code is used the times given \\"\\"\\" return CouponUsage.objects.filter(coupon=self).count() >= usage_count def __str__(self): return self.code CatalogCampaignLogEntry = define_log_model(CatalogCampaign) BasketCampaignLogEntry = define_log_model(BasketCampaign) CouponLogEntry = define_log_model(Coupon) CouponUsageLogEntry = define_log_model(CouponUsage)"},{"prompt":"Create a Python function to return the elements of two lists as a dictionary. list_one = [1, 2, 3] list_two = ['a', 'b', 'c']","completion":"list_one = [1, 2, 3] list_two = ['a', 'b', 'c'] def list_to_dict(list_one, list_two): if len(list_one) != len(list_two): return None d = {} for i in range(len(list_one)): d[list_one[i]] = list_two[i] return d dictionary = list_to_dict(list_one, list_two) print(dictionary)"},{"prompt":"Complete the Python code to generate a list of the odd numbers in the range 1 to 25.","completion":"odd_nums_list = [] for number in range(1, 26): if number % 2 != 0: odd_nums_list.append(number) print(odd_nums_list) # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]"},{"prompt":"Create a linked list structure in Python to store employee records in ascending order based on salary.","completion":"class Node: def __init__(self, emp_name, salary): self.emp_name = emp_name self.salary = salary self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, node): if self.head is None: self.head = node else: cur = self.head prev = cur while cur is not None: if node.salary < cur.salary: if prev == cur: node.next = self.head self.head = node else: prev.next = node node.next = cur break else: prev = cur cur = cur.next else: prev.next = node"},{"prompt":"Generate an HTML table using Python. It should have 5 columns (name, age, country, profession and favourite food) and 10 rows with random data. Not applicable","completion":"<html> <head> <title> HTML Table </title> <style type=\\"text/css\\"> table, th, td { border: 1px solid black; } </style> </head> <body> <table> <tr> <th>Name</th> <th>Age</th> <th>Country</th> <th>Profession</th> <th>Favorite Food</th> </tr> <tr> <td>John</td> <td>30</td> <td>USA</td> <td>Software Engineer</td> <td>Pizza</td> </tr> <tr> <td>James</td> <td>25</td> <td>Australia</td> <td>Data Scientist</td> <td>Pancakes</td> </tr> <tr> <td>Jessica</td> <td>28</td> <td>Canada</td> <td>Software Developer</td> <td>Sushi</td> </tr> <tr> <td>Tina</td> <td>32</td> <td>France</td> <td>Web Developer</td> <td>Tacos</td> </tr> <tr> <td>David</td> <td>20</td> <td>Brazil</td> <td>App Developer</td> <td>Spaghetti</td> </tr> <tr> <td>Bob</td> <td>27</td> <td>Japan</td> <td>Full Stack Developer</td> <td>Ramen</td> </tr> <tr> <td>Caroline</td> <td>29</td> <td>Germany</td> <td>Game Developer</td> <td>Ice Cream</td> </tr> <tr> <td>Karen</td> <td>22</td> <td>India</td> <td>User Interface/Experience Designer</td> <td>Chocolate</td> </tr> <tr> <td>Edward</td> <td>33</td> <td>Singapore</td> <td>Software Architect</td> <td>Burgers</td> </tr> <tr> <td>Steven</td> <td>26</td> <td>China</td> <td>Software Tester</td> <td>Sandwiches</td> </tr> </table> </body> </html>"},{"prompt":"Design a recursive function in Python that calculates the Fibonacci sequence to the nth number. n = 10","completion":"def fib(n): if n == 0: return 0 elif n == 1: return 1 else: return fib(n-1) + fib(n-2) num = 10 print(\\"The Fibonacci sequence to the \\" + str(num) +\\"th number is:\\") for i in range(num): print(fib(i))"},{"prompt":"Create a Python code to check if a single integer is a prime number int number = 11","completion":"def is_prime(number): if number <= 1: return False for i in range(2, number): if number % i == 0: return False return True"},{"prompt":"Create a basic Python script that converts all strings in a given dictionary to uppercase. {name: John, age: 45, location: San Francisco}","completion":"d = {\\"name\\": \\"John\\", \\"age\\": 45, \\"location\\": \\"San Francisco\\"} for key in d: d[key] = str(d[key]).upper() print(d) # Output: {\\"name\\": \\"JOHN\\", \\"age\\": 45, \\"location\\": \\"SAN FRANCISCO\\"}"},{"prompt":"Create a Python program that converts a given Fahrenheit temperature into Celsius. 98.6","completion":"def fahrenheit_to_celsius(f): celsius = (f - 32.0) * (5.0/9.0) return celsius fahrenheit = 98.6 celsius = fahrenheit_to_celsius(fahrenheit) print(\\"The temperature in celsius is: \\", celsius)"},{"prompt":"Given a list of strings, write a Python program to find the string which has the maximum length list1 = ['cat', 'primate', 'monkey']","completion":"def max_length(list1): return max(list1, key=len) list1 = ['cat', 'primate', 'monkey'] print(\\"String with maximum length is : \\", max_length(list1))"},{"prompt":"Develop a GUI program in [insert language] that visualizes a dataset including average temperature over a period of time. A CSV file containing average temperature values for a period of two months.","completion":"// Python import tkinter as tk from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg from matplotlib.figure import Figure import pandas as pd # Create the window window = tk.Tk() # Read the dataset data = pd.read_csv('data.csv') # Create the canvas fig = Figure(figsize=(5, 5)) subplot = fig.add_subplot(111) subplot.plot(data['Date'], data['Average Temperature']) canvas = FigureCanvasTkAgg(fig, master=window) canvas.draw() # Place the canvas in the window canvas.get_tk_widget().grid(row=0, column=0) # Enter the application window.mainloop()"},{"prompt":"Write a web scraper in Python for the following website. https://en.wikipedia.org/wiki/List_of_countries_by_populatio","completion":"import requests from bs4 import BeautifulSoup url = \\"https://en.wikipedia.org/wiki/List_of_countries_by_population\\" r = requests.get(url) soup = BeautifulSoup(r.content, 'html.parser') table = soup.find_all('table', {'class':'wikitable sortable'})[0] data = [] for row in table.find_all('tr'): data.append([cell.text for cell in row.find_all(['th','td'])])"},{"prompt":"Create an AI system using Python to find the similarity between two documents. Document 1: The cat is an adorable pet. Document 2: Dogs are loyal animals.","completion":"# Use the module 'gensim' for creating the AI system import gensim # Create a corpus from the two documents corpus = [ ‘The cat is an adorable pet.’, ‘Dogs are loyal animals.’ ] # Create a Document Term Matrix (DTM) using the documents dct = gensim.corpora.Dictionary(corpus) # Get a list of terms from the Dictionary dct.token2id # Create a Document Term Matrix (DTM) dtm = [dct.doc2bow(doc) for doc in corpus] # Create a model and fit it to the DTM lsi = gensim.models.lsimodel.LsiModel(dtm, id2word=dct, num_topics=2) #Compute Similarity index = gensim.similarities.MatrixSimilarity(lsi[dtm]) list(enumerate(index)) # Results [(0, 0.99999994), (1, 0.017074753)]"},{"prompt":"Compile this Python code into an executable. def greeting(): print(Hello, World!) greeting()","completion":"import py_compile py_compile.compile('sample.py', cfile='sample.pyc')"},{"prompt":"Build a commandline tool in Python 3 that will print a table of Prime Numbers up to a specified number (argument). Max number: 100","completion":"#!/usr/bin/env python3 import sys maximum = int(sys.argv[1]) print('Prime numbers up to {}:'.format(maximum)) print('----------------------------') for num in range(2, maximum+1): prime = True for i in range(2, num): if num % i == 0: prime = False break if prime: print(num, end=' ')"},{"prompt":"Generate a python program to implement a Caesar cipher text = Hello World! key = 3","completion":"def caesar_cipher(text, key): # Create an empty output string output = \\"\\" # Iterate over the text for char in text: # Check if the character is a letter if char.isalpha(): # Shift the character according to the key shifted = chr(ord(char) + key) # Check if the shifted character is still a letter if shifted.isalpha(): output += shifted else: # Wrap the character if it goes beyond the alphabet range output += chr(ord(char) - (26 - key)) else: # Do not shift non-alphabet characters output += char # Return the output string return output"},{"prompt":"Create a Python script to apply a log transformation to every element of a NumPy array. [0.1, 0.4, 0.9, 2.2]","completion":"import numpy as np arr = np.array([0.1, 0.4, 0.9, 2.2]) # Applying log transformation arr = np.log(arr) print('After applying log transformation to every element of the array:') print(arr)"},{"prompt":"Create another version of a python program which multiplies two numbers without using the multiplication operator. Number 1: 8, Number 2: 9","completion":"def multiply_2_numbers(x, y): product = 0 for i in range(y): product += x return product"},{"prompt":"Given a list of integers, write a code in Python to find a sublist whose sum is divisible by 7. list = <5,1,2,10,20, 4, 7, 8>","completion":"def find_sublist_divisible_by_7(list): for i in range(len(list)): sum_so_far = 0 for j in range(i, len(list)): sum_so_far += list[j] if sum_so_far % 7 == 0: return list[i:j+1] return None"},{"prompt":"This code builds VoltDB kits for Linux and Mac OSX. To build the kits, run the script with the following arguments: the commit, tag, or branch for the VoltDB repository, the commit, tag, or branch for the Pro repository, and the commit, tag, or branch for the RabbitMQ repository. Optionally, use the \`nomac\` flag to skip building the Mac OSX kit and the \`nocommunity\` flag to skip building the community kit. The script will create a release directory and copy the necessary files to it, including the trial license, SHA256 checksum, and Maven jars. Finally, the script will create a candidate symlink and backup the release directory.","completion":"#!/usr/bin/env python import argparse, datetime, getpass, os, sys, shutil, traceback from fabric.api import run, cd, local, get, settings, lcd, put from fabric_ssh_config import getSSHInfoForHost from fabric.context_managers import shell_env from fabric.utils import abort #Login as user test, but build in a directory by real username username = 'test' builddir = \\"/tmp/\\" + getpass.getuser() + \\"Kits/buildtemp\\" version = \\"UNKNOWN\\" nativelibdir = \\"/nativelibs/obj\\" # ~test/libs/... usually defaultlicensedays = 70 #default trial license length # CHECKOUT CODE INTO A TEMP DIR def checkoutCode(voltdbGit, proGit, rbmqExportGit, gitloc): global buildir # clean out the existing dir run(\\"rm -rf \\" + builddir) # make the build dir again run(\\"mkdir -p \\" + builddir) # change to it with cd(builddir): # do the checkouts, collect checkout errors on both community & # pro repos so user gets status on both checkouts message = \\"\\" run(\\"git clone -q %s/voltdb.git\\" % gitloc) result = run(\\"cd voltdb; git checkout %s\\" % voltdbGit, warn_only=True) if result.failed: message = \\"VoltDB checkout failed. Missing branch %s.\\" % rbmqExportGit run(\\"git clone -q %s/pro.git\\" % gitloc) result = run(\\"cd pro; git checkout %s\\" % proGit, warn_only=True) if result.failed: message += \\"nPro checkout failed. Missing branch %s.\\" % rbmqExportGit #rabbitmq isn't mirrored internally, so don't use gitloc run(\\"git clone -q git@github.com:VoltDB/export-rabbitmq.git\\") result = run(\\"cd export-rabbitmq; git checkout %s\\" % rbmqExportGit, warn_only=True) # Probably ok to use master for export-rabbitmq. if result.failed: print \\"nExport-rabbitmg branch %s checkout failed. Defaulting to master.\\" % rbmqExportGit if len(message) > 0: abort(message) return run(\\"cat voltdb/version.txt\\").strip() # MAKE A RELEASE DIR def makeReleaseDir(releaseDir): # handle the case where a release dir exists for this version if os.path.exists(releaseDir): shutil.rmtree(releaseDir) # create a release dir os.makedirs(releaseDir) print \\"Created dir: \\" + releaseDir # BUILD THE COMMUNITY VERSION def buildCommunity(): if build_mac: packageMacLib=\\"true\\" else: packageMacLib=\\"false\\" with cd(builddir + \\"/voltdb\\"): run(\\"pwd\\") run(\\"git status\\") run(\\"git describe --dirty\\") run(\\"ant -Djmemcheck=NO_MEMCHECK -Dkitbuild=%s %s clean default dist\\" % (packageMacLib, build_args)) # BUILD THE ENTERPRISE VERSION def buildEnterprise(): if build_mac: packageMacLib=\\"true\\" else: packageMacLib=\\"false\\" with cd(builddir + \\"/pro\\"): run(\\"pwd\\") run(\\"git status\\") run(\\"git describe --dirty\\") run(\\"VOLTCORE=../voltdb ant -f mmt.xml -Djmemcheck=NO_MEMCHECK -Dallowreplication=true -DallowDrActiveActive=true -Dlicensedays=%d -Dkitbuild=%s %s clean dist.pro\\" % (defaultlicensedays, packageMacLib, build_args)) # BUILD THE PRO VERSION # def packagePro(version): print \\"Making license\\" makeTrialLicense(days=defaultlicensedays, dr_and_xdcr=False, nodes=3) print \\"Repacking pro kit\\" with cd(builddir + \\"/pro/obj/pro\\"): run(\\"mkdir pro_kit_staging\\") with cd(builddir + \\"/pro/obj/pro/pro_kit_staging\\"): run(\\"tar xf ../voltdb-ent-%s.tar.gz\\" % version) run(\\"mv voltdb-ent-%s voltdb-pro-%s\\" % (version, version)) run(\\"cp %s/pro/trial_*.xml voltdb-pro-%s/voltdb/license.xml\\" % (builddir, version)) run(\\"tar cvfz ../voltdb-pro-%s.tar.gz voltdb-pro-%s\\" % (version, version)) # BUILD THE RABBITMQ EXPORT CONNECTOR #Build rabbit MQ Exporter def buildRabbitMQExport(version, dist_type): # Paths to the final kit for unpacking/repacking with rmq export paths = { 'community': builddir + \\"/voltdb/obj/release\\", 'ent' : builddir + \\"/pro/obj/pro/\\" } # Untar with cd(paths[dist_type]): run (\\"pwd\\") run (\\"mkdir -p restage\\") run (\\"tar xf voltdb-%s-%s.tar.gz -C restage\\" % (dist_type, version)) run (\\"rm -f voltdb-%s-%s.tar.gz\\" % (dist_type, version)) # Build RabbitMQ export jar and put it into the untarred kit with cd(builddir + \\"/export-rabbitmq\\"): run(\\"pwd\\") run(\\"git status\\") run(\\"git describe --dirty\\", warn_only=True) run(\\"VOLTDIST=%s/restage/voltdb-%s-%s ant\\" % (paths[dist_type], dist_type, version)) # Retar with cd(paths[dist_type]): run(\\"pwd\\") run(\\"tar -C restage -czf voltdb-%s-%s.tar.gz voltdb-%s-%s\\" % (dist_type, version, dist_type, version)) run (\\"rm -Rf restage\\") # MAKE AN ENTERPRISE TRIAL LICENSE # Must be called after buildEnterprise has been done def makeTrialLicense(days=30, dr_and_xdcr=\\"true\\", nodes=12): with cd(builddir + \\"/pro/tools\\"): run(\\"./make_trial_licenses.pl -t %d -H %d -W %s\\" % (days, nodes, dr_and_xdcr )) # MAKE A SHA256 checksum def makeSHA256SUM(version, type): with cd(builddir + \\"/pro/obj/pro\\"): kitname=\\"voltdb-\\" + type + \\"-\\" + version run(\\"sha256sum -b %s.tar.gz > %s.SHA256SUM\\" % (kitname, kitname)) # MAKE AN JAR FILES NEEDED TO PUSH TO MAVEN def makeMavenJars(): with cd(builddir + \\"/voltdb\\"): run(\\"VOLTCORE=../voltdb ant -f build-client.xml maven-jars\\") # COPY FILES def copyFilesToReleaseDir(releaseDir, version, type=None): print \\"Copying files to releaseDir\\" if type: typeString=\\"-\\" + type else: typeString=\\"\\" get(\\"%s/pro/obj/pro/voltdb%s-%s.tar.gz\\" % (builddir, typeString, version), \\"%s/voltdb%s-%s.tar.gz\\" % (releaseDir, typeString, version)) get(\\"%s/pro/obj/pro/voltdb%s-%s.SHA256SUM\\" % (builddir, typeString, version), \\"%s/voltdb%s-%s.SHA256SUM\\" % (releaseDir, typeString, version)) def copyCommunityFilesToReleaseDir(releaseDir, version, operatingsys): get(\\"%s/voltdb/obj/release/voltdb-community-%s.tar.gz\\" % (builddir, version), \\"%s/voltdb-community-%s.tar.gz\\" % (releaseDir, version)) # add stripped symbols if operatingsys == \\"LINUX\\": os.makedirs(releaseDir + \\"/other\\") get(\\"%s/voltdb/obj/release/voltdb-%s.sym\\" % (builddir, version), \\"%s/other/%s-voltdb-voltkv-%s.sym\\" % (releaseDir, operatingsys, version)) def copyTrialLicenseToReleaseDir(releaseDir): get(\\"%s/pro/trial_*.xml\\" % (builddir), \\"%s/license.xml\\" % (releaseDir)) def copyMavenJarsToReleaseDir(releaseDir, version): #The .jars and upload file must be in a directory called voltdb - it is the projectname mavenProjectDir = releaseDir + \\"/mavenjars/voltdb\\" if not os.path.exists(mavenProjectDir): os.makedirs(mavenProjectDir) #Get the voltdbclient-n.n.jar from the recently built community build get(\\"%s/voltdb/obj/release/dist-client-java/voltdb/voltdbclient-%s.jar\\" % (builddir, version), \\"%s/voltdbclient-%s.jar\\" % (mavenProjectDir, version)) #Get the upload.gradle file get(\\"%s/voltdb/tools/kit_tools/upload.gradle\\" % (builddir), \\"%s/upload.gradle\\" % (mavenProjectDir)) #Get the src and javadoc .jar files get(\\"%s/voltdb/obj/release/voltdbclient-%s-javadoc.jar\\" % (builddir, version), \\"%s/voltdbclient-%s-javadoc.jar\\" % (mavenProjectDir, version)) get(\\"%s/voltdb/obj/release/voltdbclient-%s-sources.jar\\" % (builddir, version), \\"%s/voltdbclient-%s-sources.jar\\" % (mavenProjectDir, version)) # CREATE CANDIDATE SYMLINKS def createCandidateSysmlink(releaseDir): candidateDir = os.getenv('HOME') + \\"/releases/candidate\\"; local(\\"rm -rf \\" + candidateDir) local(\\"ln -s %s %s\\" % (releaseDir, candidateDir)) # BACKUP RELEASE DIR def backupReleaseDir(releaseDir,archiveDir,version): if not os.path.exists(archiveDir): os.makedirs(archiveDir) # make a backup with the timstamp of the build timestamp = datetime.datetime.now().strftime(\\"%y%m%d-%H%M%S\\") local(\\"tar -czf %s/%s-%s.tgz %s\\" % (archiveDir, version, timestamp, releaseDir)) # REMOVE NATIVE LIBS FROM SHARED DIRECTORY def rmNativeLibs(): # local(\\"ls -l ~\\" + username + nativelibdir) local(\\"rm -rf ~\\" + username + nativelibdir) # GET THE GIT TAGS OR SHAS TO BUILD FROM parser = argparse.ArgumentParser(description = \\"Create a full kit. With no args, will do build of master\\") parser.add_argument('voltdb_sha', nargs=\\"?\\", default=\\"master\\", help=\\"voltdb repository commit, tag or branch\\" ) parser.add_argument('pro_sha', nargs=\\"?\\", default=\\"master\\", help=\\"pro repository commit, tag or branch\\" ) parser.add_argument('rabbitmq_sha', nargs=\\"?\\", default=\\"master\\", help=\\"rabbitmq repository commit, tag or branch\\" ) parser.add_argument('-g','--gitloc', default=\\"git@github.com:VoltDB\\", help=\\"Repository location. For example: /home/github-mirror\\") parser.add_argument('--nomac', action='store_true', help=\\"Don't build Mac OSX\\") parser.add_argument('--nocommunity', action='store_true', help=\\"Don't build community\\") args = parser.parse_args() proTreeish = args.pro_sha voltdbTreeish = args.voltdb_sha rbmqExportTreeish = args.rabbitmq_sha print args build_community = not args.nocommunity build_mac = not args.nomac #If anything is missing we're going to dump this in oneoffs dir. build_all = build_community and build_mac if voltdbTreeish != proTreeish or not build_all: oneOff = True else: oneOff = False rmNativeLibs() try: build_args = os.environ['VOLTDB_BUILD_ARGS'] except: build_args=\\"\\" print \\"Building with pro: %s and voltdb: %s\\" % (proTreeish, voltdbTreeish) build_errors=False versionCentos = \\"unknown\\" versionMac = \\"unknown\\" releaseDir = \\"unknown\\" # get ssh config [key_filename, hostname] CentosSSHInfo = getSSHInfoForHost(\\"volt15a\\") MacSSHInfo = getSSHInfoForHost(\\"voltmini\\") UbuntuSSHInfo = getSSHInfoForHost(\\"volt12d\\") # build community kit on the mini so that .so can be picked up for unified kit if build_mac or build_community: try: with settings(user=username,host_string=MacSSHInfo[1],disable_known_hosts=True,key_filename=MacSSHInfo[0]): versionMac = checkoutCode(voltdbTreeish, proTreeish, rbmqExportTreeish, args.gitloc) buildCommunity() except Exception as e: print traceback.format_exc() print \\"Could not build MAC kit. Exception: \\" + str(e) + \\", Type: \\" + str(type(e)) build_errors=True # build kits on 15f try: with settings(user=username,host_string=CentosSSHInfo[1],disable_known_hosts=True,key_filename=CentosSSHInfo[0]): versionCentos = checkoutCode(voltdbTreeish, proTreeish, rbmqExportTreeish, args.gitloc) if build_mac: assert versionCentos == versionMac if oneOff: releaseDir = \\"%s/releases/one-offs/%s-%s-%s\\" % (os.getenv('HOME'), versionCentos, voltdbTreeish, proTreeish) else: releaseDir = os.getenv('HOME') + \\"/releases/\\" + voltdbTreeish makeReleaseDir(releaseDir) print \\"VERSION: \\" + versionCentos if build_community: buildCommunity() buildRabbitMQExport(versionCentos, \\"community\\") copyCommunityFilesToReleaseDir(releaseDir, versionCentos, \\"LINUX\\") buildEnterprise() buildRabbitMQExport(versionCentos, \\"ent\\") makeSHA256SUM(versionCentos,\\"ent\\") copyFilesToReleaseDir(releaseDir, versionCentos, \\"ent\\") packagePro(versionCentos) makeSHA256SUM(versionCentos,\\"pro\\") copyFilesToReleaseDir(releaseDir, versionCentos, \\"pro\\") makeTrialLicense() copyTrialLicenseToReleaseDir(releaseDir) makeMavenJars() copyMavenJarsToReleaseDir(releaseDir, versionCentos) except Exception as e: print traceback.format_exc() print \\"Could not build LINUX kit. Exception: \\" + str(e) + \\", Type: \\" + str(type(e)) build_errors=True rmNativeLibs() # cleanup imported native libs so not picked up unexpectedly by other builds exit (build_errors) #archiveDir = os.path.join(os.getenv('HOME'), \\"releases\\", \\"archive\\", voltdbTreeish, versionCentos) #backupReleaseDir(releaseDir, archiveDir, versionCentos)"},{"prompt":"Python, create a function that takes an list of numbers and returns the list with any duplicate values removed. [1,2,3,3,2,1,4,5]","completion":"def remove_duplicates(list_num): return list(dict.fromkeys(list_num)) list_num = [1,2,3,3,2,1,4,5] list_num = remove_duplicates(list_num) print(list_num) // [1, 2, 3, 4, 5]"},{"prompt":"Write a Python program to perform a series of transformations on a given list. [1,2,3,4,5,6,7] Transformations: Multiply each element by 2, select only odd elements, subtract 3 from each remaining element.","completion":"def transformations(arr): result = [x*2 for x in arr if x%2 != 0] result = [x-3 for x in result] return result"},{"prompt":"Create a confidencebased voting system in Python. The input is a list of 5 different classifiers with numeric predictions: [classifier1: 0.6, classifier2: 0.3, classifier3: 0.2, classifier4: 0.9, classifier5: 0.1]","completion":"def confidence_voting(predictions): classifier_sum = 0 total_confidence = 0 for classifier, prediction in predictions.items(): classifier_sum += prediction total_confidence += (classifier_sum * prediction) return total_confidence/classifier_sum"},{"prompt":"Create a function in Python that accepts 3 numbers and finds the largest of the 3. num1 = 2 num2 = 5 num3 = 1","completion":"def get_max(num1, num2, num3): \\"\\"\\" Finds the largest number among three provided numbers \\"\\"\\" max_num = num1 if num2 > max_num: max_num = num2 if num3 > max_num: max_num = num3 return max_num num1 = 2 num2 = 5 num3 = -1 maximum = get_max(num1, num2, num3) print(maximum) # 5"},{"prompt":"Build an API endpoint in Python with Flask to return the current date and time.","completion":"from flask import Flask import datetime app = Flask(__name__) @app.route('/date_time') def get_date_time(): return datetime.datetime.now() if __name__ == '__main__': app.run()"},{"prompt":"Develop a Python program to check if a number is divisible by 3.","completion":"def is_divisible_by_3(num): if num % 3 == 0: return True return False"},{"prompt":"Create a Python program to extract Summary statistics for a data set. a dataset containing several features and numeric value","completion":"import pandas as pd import numpy as np csv_file = 'data.csv' # Read CSV file df = pd.read_csv(csv_file) # Calculate summary statistics count = df.count() mean = df.mean() std = df.std() min = df.min() max = df.max() quantiles = df.quantile([0.25, 0.5, 0.75]) # Print out summary statistics print('Count: ', count) print('Mean: ', mean) print('Standard Deviation: ', std) print('Minimum: ', min) print('Maximum: ', max) print('Quantiles: ', quantiles)"},{"prompt":"Write a Python script to fetch the sale price of a product from an online store. Website = www.productstore.com ProductID = 12345","completion":"import requests url = f'https://www.productstore.com/ProductID={ProductID}&format=json' resp = requests.get(url) data = resp.json() sales_price = data['salesPrice'] print('The sale price of the product is {}'.format(sales_price))"},{"prompt":"Create a program to solve the traveling salesman problem in python. Not applicable","completion":"import random # Representing the problem # The algorithm is applied to this graph = { 'A': ['B', 'C', 'D'], 'B': ['A', 'C', 'E'], 'C': ['A', 'B', 'D', 'E'], 'D': ['A', 'C'], 'E': ['B', 'C'] } def findBestRoute(graph): # randomly select starting node currentNode = random.choice(list(graph.keys())) # the shortest route needs at least # length = number of nodes in the graph bestRoute = [currentNode] min_length = len(graph) # Loop until length is same as min_length while len(bestRoute) < min_length: # Find neighbors of the current node nbrs = graph[currentNode] # Find a neighbor # with minimum distance nextNode = None minDist = float('Inf') # Check for each neighbor for node in nbrs: if node not in bestRoute: dist = 0 for i in range(len(bestRoute)-1): dist += graph[bestRoute[i]][node] if dist < minDist : minDist = dist nextNode = node # Append the neighbor to bestRoute bestRoute.append(nextNode) currentNode = nextNode return bestRoute # Driver program print(findBestRoute(graph))"},{"prompt":"Create a Python flask application that acts as a REST API for a simple ToDo List. The API should support creating, getting, updating, and deleting tasks from the list. Not applicable","completion":"from flask import Flask, jsonify, request import sqlite3 app = Flask(__name__) conn = sqlite3.connect('data.db') # create the database c = conn.cursor() c.execute(''' CREATE TABLE IF NOT EXISTS tasks ( id integer PRIMARY KEY, title text NOT NULL, done boolean NOT NULL ) ''') conn.commit() # Create a task @app.route('/tasks', methods=['POST']) def create_task(): data = request.get_json() c = conn.cursor() c.execute('INSERT INTO tasks (title, done) VALUES (?,?)', (data['title'], False)) conn.commit() c.execute('SELECT * FROM tasks WHERE id=?', (c.lastrowid,)) new_task = c.fetchone() return jsonify({'task': new_task}), 201 # Get all tasks @app.route('/tasks', methods=['GET']) def get_tasks(): c = conn.cursor() c.execute('SELECT * FROM tasks') all_tasks = c.fetchall() return jsonify({'tasks': all_tasks}), 200 # Update a task @app.route('/tasks/<int:task_id>', methods=['PUT']) def update_task(task_id): data = request.get_json() c = conn.cursor() c.execute('UPDATE tasks SET title=?, done=? WHERE id=?', (data['title'], data['done'], task_id)) conn.commit() c.execute('SELECT * FROM tasks WHERE id=?', (task_id,)) updated_task = c.fetchone() return jsonify({'task': updated_task}), 200 # Delete a task @app.route('/tasks/<int:task_id>', methods=['DELETE']) def delete_task(task_id): c = conn.cursor() c.execute('DELETE FROM tasks WHERE id=?', (task_id,)) conn.commit() return '', 204 if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python script that takes two strings as an input and returns the longest common subsequence of those two strings. ABCD BCE","completion":"def longestCommonSubsequence(str1, str2): # find the length of the strings m = len(str1) n = len(str2) # declaring the array for storing the dp values L = [[None]*(n+1) for i in range(m+1)] \\"\\"\\"Following steps build L[m+1][n+1] in bottom up fashion Note: L[i][j] contains length of LCS of str1[0..i-1] and str2[0..j-1]\\"\\"\\" for i in range(m+1): for j in range(n+1): if i == 0 or j == 0 : L[i][j] = 0 elif str1[i-1] == str2[j-1]: L[i][j] = L[i-1][j-1]+1 else: L[i][j] = max(L[i-1][j] , L[i][j-1]) counter = L[m-1][n-1] # Create lcs and return it lcs = [\\"\\"] * (counter+1) lcs[counter] = \\"\\" # Start from the right-most-bottom-most corner and # one by one store characters in lcs[] i = m-1 j = n-1 while i > 0 and j > 0: # If current character in X[] and Y are same, then # current character is part of LCS if str1[i-1] == str2[j-1]: lcs[counter-1] = str1[i-1] i-=1 j-=1 counter-=1 # If not same, then find the larger of two and # go in the direction of larger value elif L[i-1][j] > L[i][j-1]: i-=1 else: j-=1 return ''.join(lcs) # Driver Code str1 = \\"ABCD\\" str2 = \\"BCEA\\" print(longestCommonSubsequence(str1, str2))"},{"prompt":"Write a Python function to calculate the compound interest given the principal amount, rate, and number of years. principal = 1000, rate = 0.03, time = 5","completion":"def compound_interest(principal, rate, time): return principal * (1 + rate)**time result = compound_interest(1000, 0.03, 5) print(result)"},{"prompt":"Generate a Python script to randomly select k elements from a list. An array with 6 values: [11, 22, 7, 12, 3, 8] and k=3","completion":"import random # Initialize the array array = [11, 22, 7, 12, 3, 8] k = 3 # Randomly select k elements from array selected = random.sample(array, k) # Output the result print(f'Randomly selected {k} elements: {selected}')"},{"prompt":"Read a given timeseries dataset in Python and build a forecast model to predict future values.","completion":"import pandas as pd from sklearn.linear_model import LinearRegression # Load data df = pd.read_csv('data.csv') # Split data into train and test sets X_train = df.loc[:2000, ['time']].values y_train = df.loc[:2000, ['value']].values X_test = df.loc[2000:, ['time']].values y_test = df.loc[2000:, ['value']].values # Train model model = LinearRegression() model.fit(X_train, y_train) # Predict values predictions = model.predict(X_test)"},{"prompt":"Create a forloop in Python and use it to find the sum of a list of integers. [1, 4, 9, 16, 25]","completion":"total = 0 for num in [1, 4, 9, 16, 25]: total += num print(total)"},{"prompt":"Develop a simple Python program to read a text document and output the number of words in it.","completion":"# Read file with open('text_document.txt', 'r') as file: data = file.read() # Calculate number of words word_count = len(data.split()) # Output print(f\\"Number of words: {word_count}\\")"},{"prompt":"Optimize the python program created in task 4 to make it more efficient.","completion":"import csv # initialize dict to store categories category_totals = {} # open and process the csv file with open('sales.csv', 'r') as csv_file: # create a csv reader object csv_reader = csv.reader(csv_file) # skip the headers next(csv_reader) # iterate over each row for row in csv_reader: # pre-calculate product of quantity and price sales_total += int(row[0]) * int(row[1]) # record the category totals if row[2] in category_totals.keys(): category_totals[row[2]] += int(row[1]) else: category_totals[row[2]] = int(row[1]) # print the results print(\\"Total sales:\\", sales_total) print(\\"Category totals:\\") for key in category_totals.keys(): print(key, \\":\\", category_totals[key])"},{"prompt":"Compute the output of this Python program. def countdown(n): if n <= 0: print(Blast off!) else: print(n) countdown(n1) countdown(3)","completion":"3 2 1 Blast off!"},{"prompt":"Create a code snippet in Java to parse a commaseparated string into a list of strings. Ruby,Python,JavaScript","completion":"String str = \\"Ruby,Python,JavaScript\\"; List<String> list = Arrays.asList(str.split(\\",\\")); // Output // [Ruby,Python,JavaScript]"},{"prompt":"Construct a algorithm in Python to find the solution of linear equation. 2x + 3y = 5 5x 4y = 7","completion":"# import necessary modules import numpy as np # define coefficient and constants a = np.array([[2, 3], [5, -4]]) b = np.array([5, 7]) # solve linear equations ans = np.linalg.solve(a, b) # print the solutions print(ans[0], ans[1])"},{"prompt":"Given a data set of Twitter messages, write a Python code to get the most frequent words used in the messages. Data Set of Twitter Messages: Excited for the new year! #happynewyear Christmas time is here! #christmastime Wishing everyone a merry Christmas! #merrychristmas Coding is so much fun!","completion":"import re from collections import Counter # Sample data set data_set = [\\"Excited for the new year! #happynewyear\\", \\"Christmas time is here! #christmastime\\", \\"Wishing everyone a merry Christmas! #merrychristmas\\", \\"Coding is so much fun!\\"] # Remove special characters def remove_special_characters(messages): return [re.sub(\\"[^A-zs]\\", \\"\\", message) for message in messages] # Get a list of all words def get_words_from_list(messages): return [words.split(\\" \\") for message in messages for words in message] # Calculate the frequency of the words def get_frequency_from_words(words): return Counter(words) words = get_words_from_list(remove_special_characters(data_set)) frequency = get_frequency_from_words(words) # print the most frequent words print(\\"Most frequent words: \\", frequency.most_common(3)) # Output # Most frequent words: [('a', 2), ('for', 1), ('the', 1)]"},{"prompt":"Format the given string with line breaks and indentations to make it a valid Python code. for i in range(10) print(i)","completion":"for i in range(10): print(i)"},{"prompt":"Write a Python program to sort the list using the bubble sort algorithm unsorted_list = [5, 4, 3, 2, 1]","completion":"def bubble_sort(arr): n = len(arr) for i in range(n - 1): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] # Driver code to test above numbers = [5, 4, 3, 2, 1] bubble_sort(numbers)"},{"prompt":"mplement a function in Python which takes two strings as input and prints the longest common subsequence. s1 = aggtab s2 = gxtxayb","completion":"def findLongestCommonSubsequence(s1, s2): # Initialize L[][] L = [[0 for x in range(len(s2)+1)] for x in range(len(s1)+1)] # Traverse the strings for i in range(len(s1)+1): for j in range(len(s2)+1): # If strings have matching characters if i == 0 or j == 0 : L[i][j] = 0 elif s1[i-1] == s2[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) print(\\"Length of Longest Common Subsequence is \\", L[len(s1)][len(s2)])"},{"prompt":"Generate a program in Python that takes two strings and returns a list containing the combined string. (Hello , World!)","completion":"def combine_strings(str1, str2): return [str1 + str2] combined_string = combine_strings(\\"Hello \\", \\"World!\\") print(combined_string) # [\\"Hello World!\\"]"},{"prompt":"Develop a Python program to find and print the first nonrepeating character from a given string. Hello, world!","completion":"def non_repeating_character(string): for c in string: if string.count(c) == 1: return c return 'No result' print(non_repeating_character('Hello, world!'))"},{"prompt":"Create a python program to generate a report of the ten most viewed videos on YouTube this week.","completion":"import json import requests def get_top_ten_videos(): \\"\\"\\" Returns the top ten viewed videos on YouTube as a report. \\"\\"\\" # Get the data of the top ten viewed videos on YouTube using the API response = requests.get(\\"https://www.googleapis.com/youtube/v3/videos?part=snippet%2C+statistics&chart=mostPopular&maxResults=10&key=api-key\\") data = json.loads(response.text) # Create string with Youtube video info report = \\"Top 10 most viewed YouTube videos this week:n\\" for item in data['items']: # extract video data title = item['snippet']['title'] views = item['statistics']['viewCount'] report += '- ' + title + \\": \\" + views + \\" viewsn\\" return report if __name__ == '__main__': print(get_top_ten_videos())"},{"prompt":"Create a Python code to solve the given optimization problem: Minimize: f(x,y) = (x 1)2 + (2y 3)2 Subject to: x + 2y = 6","completion":"\\"\\"\\" Solve an optimization problem with one constraint \\"\\"\\" import scipy.optimize as opt def minimize_func(x): return (x[0]-1)**2 + (2*x[1]-3)**2 def constraint_func(x, sign=1): return sign * (x[0] + (2*x[1])-6) def solve_optimization(): # define constraints constraints = ( {'type': 'eq', 'fun': constraint_func}, ) # set initial values to (0,0) x0 = (0,0) # use BFGS algorithm for optimization solution = opt.minimize(minimize_func, x0, method='SLSQP', constraints=constraints) return solution if __name__ == \\"__main__\\": solution = solve_optimization() print(solution.x) # => [3. 2.]"},{"prompt":"Generate a Random Forest classifier in Python Not applicable","completion":"import numpy as np from sklearn.ensemble import RandomForestClassifier # Create a Random Forest Classifier clf = RandomForestClassifier(n_estimators=100) # Train the model using the training sets clf.fit(X_train, y_train) # Predict the response for test dataset y_pred = clf.predict(X_test)"},{"prompt":"Create a basic sentiment analysis model using Python and Scikitlearn. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # Load data data = pd.read_csv('sentiment.csv') X = data.text.values y = data.target.values # Split data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Vectorize the data vectorizer = CountVectorizer(max_features=5000) X_train_vectorized = vectorizer.fit_transform(X_train) # Create the model model = LogisticRegression() model.fit(X_train_vectorized, y_train) # Evaluate the model scores = model.score(vectorizer.transform(X_test), y_test) print('Accuracy:', scores)"},{"prompt":"Create a Python program to calculate the average score of students in a classroom. [72, 84, 85, 90]","completion":"# List of student scores scores = [72, 84, 85, 90] # Calculating the average score total = 0 for score in scores: total += score average = total / len(scores) print(\\"The average score in the class is {:.2f}\\".format(average)) # Output: # The average score in the class is 82.50"},{"prompt":"Write a Python program to find the maximum and minimum value of a given array. [2, 15, 4, 8, 11]","completion":"def min_max(data): min_val = min(data) max_val = max(data) return min_val, max_val min_val, max_val = min_max([-2, 15, 4, 8, 11]) print('Minimum Value: ', min_val) print('Maximum Value: ', max_val)"},{"prompt":"Generate a python program to sort a list according to its second element","completion":"def sort_list(lst): lst.sort(key = lambda x: x[1]) return lst"},{"prompt":"Edit an existing Python code to add logging using the logging module. import os def print_message(): message = Hello, world! print(message) if __name__ == __main__: print_message()","completion":"import logging import os logging.basicConfig(filename=os.path.join(os.path.dirname(__file__), 'logs.log'), level=logging.INFO) def print_message(): message = \\"Hello, world!\\" logging.info(f'printing message: {message}') print(message) if __name__ == \\"__main__\\": logging.info('Starting script!') print_message()"},{"prompt":"Write a python program that takes a list of strings and returns a sorted copy of the list. l1 = ['cat', 'dog', 'bird', 'elephant'","completion":"def sort_list(l): l.sort() return l sorted_list = sort_list(['cat', 'dog', 'bird', 'elephant']) print(sorted_list) # Output: ['bird', 'cat', 'dog', 'elephant']"},{"prompt":"Create a function in Python to migrate data from a SQL database to a NoSQL database.","completion":"def migrate_data(src_db, dest_db): \\"\\"\\" This function will migrate data from a SQL database to a NoSQL database \\"\\"\\" # Connect to the source SQL database connection = src_db.connect() # Iterate through each table in the source database for table_name in src_db.get_table_names(): # Retrieve the table data table_data = src_db.execute(\\"SELECT * From \\" + table_name) # Insert the data into the destination NoSQL database dest_db.write(table_name, table_data) # Close the connection connection.close()"},{"prompt":"Write a Python program to generate the Fibonacci sequence for n numbers.","completion":"def generateFibonacci(n): # Taking 1st two fibonacci nubers as 0 and 1 FibArray = [0, 1] while len(FibArray) < n: next_fib_num = FibArray[-1] + FibArray[-2] FibArray.append(next_fib_num) return FibArray # Driver Code result = generateFibonacci(10) print(result)"},{"prompt":"mplement a K Nearest Neighbors algorithm in Python.","completion":"import numpy as np from math import sqrt import warnings from collections import Counter def k_nearest_neighbors(data, predict, k=3): if len(data) >= k: warnings.warn('K is set to a value less than total voting groups!') distances =[] for group in data: for features in data[group]: euclidean_distance = np.linalg.norm(np.array(features) - np.array(predict)) distances.append([euclidean_distance, group]) votes = [i[1] for i in sorted(distances)[:k]] vote_result = Counter(votes).most_common(1)[0][0] confidence = Counter(votes).most_common(1)[0][1] / k return vote_result, confidence"},{"prompt":"Create a basic React.js application with a simple search bar that can display search results from a preset list of words. Not applicable","completion":"import React, { useState } from 'react'; const App = () => { const [inputValue, setInputValue] = useState(''); const [results, setResults] = useState([]); const handleChange = e => { const value = e.target.value; setInputValue(value); const newResults = words.filter(word => word.toLowerCase().includes(value.toLowerCase()) ); setResults(newResults); }; const words = ['react', 'javascript', 'node', 'python', 'java']; return ( <div className='App'> <input value={inputValue} onChange={handleChange} /> <ul> {results.map((result, index) => ( <li key={index}>{result}</li> ))} </ul> </div> ); }; export default App;"},{"prompt":"Create a Python script that takes in strings of text and returns a dictionary of word frequencies for each document.","completion":"def word_freq_dicts(texts): freq_dicts = [] for text in texts: # Initialize dictionary for document freq_dict = dict() # Count word frequency for word in text.split(): if word in freq_dict: freq_dict[word] += 1 else: freq_dict[word] = 1 # Append to list of dictionaries freq_dicts.append(freq_dict) return freq_dicts"},{"prompt":"Write a Python script to print the frequency of occurrence of characters in a given string. text = Hello World","completion":"def char_frequency(text): chars = {} for c in text: if c not in chars: chars[c] = 0 chars[c] += 1 return chars print(char_frequency(text))"},{"prompt":"Design a Python program to find the first prime number greater than a userspecified number. 15","completion":"def find_prime_number(n): number = n + 1 while True: counter = 0 for i in range(2, number): if number % i == 0: counter = 1 if counter == 0: break number += 1 return number num = int(input(\\"Enter a number:\\")) prime = find_prime_number(num) print(prime)"},{"prompt":"Create an algorithm in Python that takes a 2D array of Boolean values as an argument, and computes the number of connected islands on the grid. grid = [ [True, False, False], [False, True, False], [False, False, True ] ]","completion":"def countIslands(grid): n = len(grid) if n == 0: return 0 m = len(grid[0]) count = 0 for i in range(n): for j in range(m): if grid[i][j] == True: DFS(grid,i,j) count += 1 return count def DFS(grid,i,j): if i<0 or j<0 or i>=len(grid) or j>=len(grid[0]) or grid[i][j]==False: return grid[i][j]= False DFS[grid,i+1,j] DFS[grid,i,j+1] DFS[grid,i-1,j] DFS[grid,i,j-1]"},{"prompt":"Create an AI chatbot in Python to respond to simple natural language questions about the weather. Not Applicable","completion":"#create a simple AI chatbot in Python def chatbot(): print(\\"Hello, my name is Weather Bot. I can help you with questions about the weather!\\") while True: query = input(\\"You: \\") query = query.lower() # exit the loop is the user enters \\"quit\\" if query == \\"quit\\": break # responses to certain queries if \\"what is the temperature\\" in query: print(\\"The current temperature is 65 degrees Fahrenheit.\\") if \\"what will the weather be tomorrow\\" in query: print(\\"Tomorrow's forecast is sunny with a high of 75 degrees Fahrenheit.\\") # call the function chatbot()"},{"prompt":"Write a Python function to generate a random string of length 10.","completion":"import random import string def generate_string(): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits random_string = ''.join(random.choice(chars) for i in range(10)) return random_string # Example test random_string = generate_string() print(random_string) # 5BZFz5S2Sd"},{"prompt":"Write a Python program to generate a chess move given a set of rules. Current Board State: r NB kb ppp ..p. P P Rules: 1. The chess piece can move in a straight line up to the maximum number of squares the piece is allowed to move. 2. If an opposing piece is encountered, the piece cannot move beyond the opposing piece. 3. The chess piece cannot move to a square occupied by one of its players pieces.","completion":"def generate_chess_move(board_state, rules): for row_index, row in enumerate(board_state): for col_index, col in enumerate(row): if col == 'KB': # Generate all possible moves for Knight knight_moves = generate_knight_moves(board_state, row_index, col_index) # Apply rules to each of the moves and get the valid moves valid_moves = apply_rules(board_state, rules, knight_moves) # Return one of the valid moves return valid_moves[0] def generate_knight_moves(board_state, row_index, col_index): # generate all the possible knight moves def apply_rules(board_state, rules, moves): # filter out the moves that reach the rules return valid_moves"},{"prompt":"Generate a Python program to filter a given list of names based on user search input. Names: [Taylor, Hilton, John, Jack, Justin] User search input: J","completion":"names = [\\"Taylor\\", \\"Hilton\\", \\"John\\", \\"Jack\\", \\"Justin\\"] search_input = input(\\"Enter a name to search: \\") filtered_names = [] for name in names: if search_input in name: filtered_names.append(name) print(filtered_names)"},{"prompt":"Produce a python program that calculates the prime factors of a given positive integer.","completion":"def prime_factors(num): \\"\\"\\"Returns the prime factors of a given positive integer. Args: num (int): Positive integer. Returns: list: List of prime factors. \\"\\"\\" factors = [] d = 2 while num > 1: while num % d == 0: factors.append(d) num /= d d += 1 return factors"},{"prompt":"Create a Python class for a Social Networking user that has properties such as name, age, interests.","completion":"class SocialNetworkUser: def __init__(self, name, age, interests): self.name = name self.age = age self.interests = interests def get_name(self): return self.name def set_name(self, name): self.name = name def get_age(self): return self.age def set_age(self, age): self.age = age def get_interests(self): return self.interests def set_interests(self, interests): self.interests = interests"},{"prompt":"Create a python program that can generate a random character string with a specific length length of the string = 8","completion":"import random # Define characters which can be used in the string characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#%^&*()' # Generate random string with specific length def random_string(length): random_string = '' for _ in range(length): random_string += random.choice(characters) return random_string # Test string_length = 8 random_string = random_string(string_length) print('Random string of length ' + str(string_length) + ': ' + random_string)"},{"prompt":"Develop a Python algorithm that identifies defective products in a supermarket. A list of product id, quantity and price [ [“A”, 10, 5], [“B”, 7, 12], [“C”, 3, 15], [“D”, 2, 20] ]","completion":"def check_products(products): # Create a dictionary to store the number of defective products defective_products = {} for id, quantity, price in products: # Calculate the cost of each product cost = quantity * price # Condition to identify a defective product if cost < (price * 0.70): defective_products[id] = [quantity, price, cost] return defective_products"},{"prompt":"Create a program in Python that will find all the prime factors of a number 120","completion":"def prime_factors(n): factors = [] i = 2 while n > 1: while n % i == 0: factors.append(i) n /= i i += 1 return factors"},{"prompt":"Design a function in Python to return the length of the longest common subsequence in two given strings. abcde, ace","completion":"def longestCommonSubsequence(s1, s2): m = len(s1) n = len(s2) LCSuff = [[0 for k in range(n+1)] for l in range(m+1)] result = 0 for i in range(m + 1): for j in range(n + 1): if (i == 0 or j == 0): LCSuff[i][j] = 0 elif s1[i-1] == s2[j-1]: LCSuff[i][j] = LCSuff[i-1][j-1] + 1 result = max(result, LCSuff[i][j]) else: LCSuff[i][j] = 0 return result result = longestCommonSubsequence(\\"abcde\\", \\"ace\\") print(result)"},{"prompt":"Generate a Python program that translates a sentence into pig latin Hello world","completion":"def pig_latin(sentence): words = sentence.split(' ') result = \\"\\" for word in words: result += word[1:] + word[0] + \\"ay\\" + \\" \\" return result print(pig_latin(\\"Hello world\\"))"},{"prompt":"Create a python script to compare two lists of strings and print the difference between them. list1 = [Car, Plane, Train] list2 = [Car, Bus, Train]","completion":"def compare_list(list1, list2): diff = [] for word1 in list1: if word1 not in list2: diff.append(word1) for word2 in list2: if word2 not in list1: diff.append(word2) return diff list1 = [\\"Car\\", \\"Plane\\", \\"Train\\"] list2 = [\\"Car\\", \\"Bus\\", \\"Train\\"] difference = compare_list(list1, list2) print(difference)"},{"prompt":"Create a python program to extract the name and phone number from a given string. John Doe: (+1) 5556658877","completion":"# Extract the name and phone number from a given string def extract_name_phone(input_string): name_phone_dict = {} data = input_string.split(': ') name_phone_dict['name'] = data[0] name_phone_dict['phone'] = data[1] return name_phone_dict result = extract_name_phone(\\"John Doe: (+1) 555-665-8877\\") print(result)"},{"prompt":"Create a function in Python to find the smallest positive number which is not present in a given unsorted array. [3, 1, 2, 6, 0, 2, 1]","completion":"def smallestMissingPositiveNumber(arr): s = set() for i in arr: s.add(i) for i in range(1, len(arr) + 1): if i not in s: return i return len(arr)+1 arr = [3, 1, 2, 6, 0, -2, -1] missing = smallestMissingPositiveNumber(arr) print(missing) # 4"},{"prompt":"Generate a python program to find and list all numbers between 0 and 1000 that are divisible by 7.","completion":"def find_divisible(n): result = [] for i in range(1, n+1): if i % 7 == 0: result.append(i) return result"},{"prompt":"Create a linear regression model in Python to predict the number of visits to a particular website.","completion":"import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression # input data X = np.array([[1, 1], [2, 2], [3, 3], [4, 4]]) y = np.array([5, 10, 15, 20]) # create and fit the model model = LinearRegression() model.fit(X, y) # make a prediction y_pred = model.predict([[5, 5]]) print(round(y_pred[0], 2))"},{"prompt":"Write a python program that takes in two integers and prints the largest number. Num1 = 10 Num2 = 8","completion":"num1 = 10 num2 = 8 if num1 > num2: print(num1) else: print(num2)"},{"prompt":"Write a Python program to divide a given string into pairs such that each pairs has 2 characters. abcd","completion":"def split_into_pairs(inputString): resultList = [] counter = 0 while counter < len(inputString): resultList.append(inputString[counter:counter + 2]) counter += 2 return resultList pairs = split_into_pairs(\\"abcd\\") print(pairs)"},{"prompt":"Write a python program to clean the text by removing extra spaces, punctuations and other special characters. Hello World!!!","completion":"def remove_special_characters(text): cleaned_text = '' for char in text: if char.isalnum(): cleaned_text = cleaned_text + char return cleaned_text print(remove_special_characters('Hello World!!!')) # Output = HelloWorld"},{"prompt":"Port a Python function that takes a natural language query string and returns a set of search results into JavaScript. def simple_search(query): results = [] for item in my_data_set: if query in item['data']: results.append(item) return results query = find me a car","completion":"const simpleSearch = (query) => { let results = []; for (let item of myDataSet) { if (item.data.includes(query)) { results.push(item); } } return results; }; let query = \\"find me a car\\"; let results = simpleSearch(query);"},{"prompt":"Build an artificial neural network in Python to predict the price of a house","completion":"import numpy as np from tensorflow.keras import models, layers #create basic model def create_model(): model = models.Sequential() model.add(layers.Dense(128, activation = 'relu', input_dim = 18)) model.add(layers.Dense(64, activation = 'relu')) model.add(layers.Dense(32, activation = 'relu')) model.add(layers.Dense(1)) model.compile(optimizer = 'rmsprop', loss = 'mse', metrics=['mae']) return model #train model model = create_model() model.fit(X_train, y_train, epochs = 100, batch_size = 32)"},{"prompt":"Edit the given Python code to calculate the Fibonacci sequence up to the 15th number. def fibonacci(n): if n <= 1: return n else: return(fibonacci(n1) + fibonacci(n2))","completion":"def fibonacci(n): if n<= 0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return(fibonacci(n-1) + fibonacci(n-2)) # Function calls fibonacci(15)"},{"prompt":"Generate a random integer within a range of 1 to 10 using Python.","completion":"import random random_number = random.randint(1, 10) print(random_number)"},{"prompt":"Construct a python program which prints the reverse of the given string","completion":"def reverse_string(s): string = \\"\\" for i in s: string = i + string return string"},{"prompt":"Design a python program that would generate a random password","completion":"import random def generatePassword(): charSet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#%&*' password = '' for x in range(8): password += random.choice(charSet) return password"},{"prompt":"Write a Python program that divides two integers and prevents divide by zero error.","completion":"def divide(num1, num2): try: result = num1 / num2 print(\\"Result is {}\\".format(result)) except: print(\\"Divide by zero error!\\")"},{"prompt":"Create a machine learning model using Python ScikitLearn to predict rolling bearing failure. The dataset contains information about bearing vibration and temperature.","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score # Load the data data = pd.read_csv('bearing_dataset.csv') # create labels data['label'] = data['failure'].apply(lambda x: 1 if x == 'failure' else 0) # Split the data x = data.drop('label', axis=1) y = data['label'] x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state=42) # Create and Train the Classifier model = RandomForestClassifier(n_estimators= 100, max_depth = 3, random_state=42) model.fit(x_train, y_train) # Predict predictions = model.predict(x_test) # Evaluate the model accuracy = accuracy_score(y_test, predictions) print('Accuracy of the model: ', accuracy)"},{"prompt":"Generate a Python code which calls a function to print the following array? [1,3,7,9,10]","completion":"arr = [1,3,7,9,10] def print_array(arr): '''This function prints the elements of an array''' for ele in arr: print(ele) print_array(arr)"},{"prompt":"Create a program in python that encrypts a string using Caesar Cipher.","completion":"\\"\\"\\" Create a program in python that encrypts a string using the Caesar Cipher. \\"\\"\\" def encrypt(string, shift): cipher = '' for char in string: if char == ' ': cipher = cipher + char elif char.isupper(): cipher = cipher + chr((ord(char) + shift - 65) % 26 + 65) else: cipher = cipher + chr((ord(char) + shift - 97) % 26 + 97) return cipher"},{"prompt":"Modify the following Python code to calculate the average of values in the given dictionary, for specific key. grades_dict = { 'student1':[1, 2, 3], 'student2':[4, 5, 6], 'student3':[7, 8, 9], } values_key = 'student3'","completion":"grades_dict = { 'student1':[1, 2, 3], 'student2':[4, 5, 6], 'student3':[7, 8, 9], } values_key = 'student3' def calculate_avg_from_dict(dict, key): total_sum = 0 values = dict[key] for value in values: total_sum += value return total_sum/len(values)"},{"prompt":"Create a function in Python to identify whether an input number is a prime or not. 12","completion":"def is_prime(n): # Corner cases if (n <= 1): return False if (n <= 3): return True # This is checked so that we can skip # middle five numbers in below loop if (n % 2 == 0 or n % 3 == 0): return False i = 5 while(i * i <= n): if (n % i == 0 or n % (i + 2) == 0): return False i = i + 6 return True"},{"prompt":"Create a Python script to generate a histogram from an input dataset. [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"import numpy as np import matplotlib.pyplot as plt data = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]) # histogram the data plt.hist(data) # labels plt.xlabel('Value') plt.ylabel('Frequency') plt.show()"},{"prompt":"Write a function in Python to convert a Roman numeral string to an integer. roman_string = 'XVII'","completion":"def convert_roman_to_int(roman_string): symbols = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } result = 0 max_num = 0 for char in roman_string[::-1]: curr_num = symbols[char] if curr_num >= max_num: result += curr_num else: result -= curr_num max_num = max(max_num, curr_num) return result roman_int = convert_roman_to_int(roman_string) print(roman_int) # prints 17"},{"prompt":"Create a Python module that sorts an array of numbers and returns their median. array = [3, 4, 1, 6, 8]","completion":"import math def sort_array(array): array.sort(key=None, reverse=False) return array def get_median(array): sorted_array = sort_array(array) len_array = len(sorted_array) mid = len_array//2 if len_array % 2 == 0: median = math.ceil((sorted_array[mid] + sorted_array[mid-1])/2.0) else: median = sorted_array[mid] return median array = [3, 4, 1, 6, 8] print(get_median(array))"},{"prompt":"Develop an AI chatbot program in Python.","completion":"import re import random # Define AI responses responses = { \\"Hi\\": [\\"Hello there!\\", \\"Howdy!\\", \\"Hi 👋\\"], \\"How are you\\": [\\"I'm doing great!\\", \\"Doing well!\\", \\"Never better 🤩\\"], \\"Bye\\": [\\"Goodbye!\\", \\"See you later!\\", \\"Bye bye\\"] } # AI function def chatbot(user_query): response = \\"Sorry, I don't understand 🤔\\" # Removing punctuation signs user_query = re.sub('[^a-zA-Z]', ' ', user_query) # tokenize user_query & convert to lowercase user_query = user_query.lower().split() for word in user_query: if word in responses: response = random.choice(responses[word]) return response"},{"prompt":"Create a program to sort a list of numbers in Python. The program should perform an efficient sorting algorithm like Quick Sort or Merge Sort, and return the sorted list. [1,4,5,2,8,6]","completion":"def quicksort(array): if len(array) < 2: return array else: pivot = array[0] less = [i for i in array[1:] if i <= pivot] greater = [i for i in array[1:] if i > pivot] return quicksort(less) + [pivot] + quicksort(greater) array = [1, 4, 5, 2, 8, 6] result = quicksort(array) print(result)"},{"prompt":"Devise a Python code to make a pyramid of stars.","completion":"def stars(n): for i in range(1, n + 1): for j in range(1, i + 1): print(\\"* \\", end=\\"\\") print()"},{"prompt":"Create a Python program to compare two given strings and returns the number of mismatched letters. string1 = abcdefg string2 = accfghe","completion":"def compare_strings(string1, string2): mismatched = 0 for i in range(min(len(string1), len(string2))): if string1[i] != string2[i]: mismatched += 1 return mismatched string1 = \\"abcdefg\\" string2 = \\"accfghe\\" compared = compare_strings(string1, string2) print(\\"Number of mismatched letters:\\", compared)"},{"prompt":"Create a hash function in Python that takes a string as input, and returns a fixed size integer output.","completion":"def calculate_hash(s): hash_value = 0 for c in s: hash_value = (hash_value * 7 + ord(c)) % 8 return hash_value"},{"prompt":"Write a Python function to find the longest common string within two sentences. I love programming, I love solving puzzles","completion":"def longest_common_string(str1, str2): max_str = \\"\\" m = len(str1) n = len(str2) for i in range(m): for j in range(n): current_str = \\"\\" k = 0 while i + k < m and j + k < n and str1[i+k] == str2[j+k]: current_str += str1[i+k] k += 1 if len(current_str) > len(max_str): max_str = current_str return max_str print(longest_common_string(\\"I love programming\\",\\"I love solving puzzles\\"))"},{"prompt":"Design a program using the Python language to calculate the average cost of a given list of items. [2.15, 3.35, 6.25, 8.25]","completion":"def calculate_average(items): sum = 0 for item in items: sum += item return sum / len(items) items = [2.15, 3.35, 6.25, 8.25] average = calculate_average(items) print(\\"Average cost: \\" + str(round(average, 2)))"},{"prompt":"Generate a program to process natural language data using Python. The data contains reviews about movies.","completion":"import nltk from nltk.tokenize import word_tokenize # create a function to pre-process natural language data def process_data(data): # tokenize the data tokens = word_tokenize(data) # initialize the stopwords list stopwords = list(nltk.corpus.stopwords.words(\\"english\\")) # create a new list for storing the filtered data filtered_data = [] # go through each word for word in tokens: # check if word is not in the stopwords list if word not in stopwords: filtered_data.append(word) # return the filtered list return filtered_data # example data data = \\"This movie had an amazing plot and great cinematography.\\" # print the processed data print(process_data(data))"},{"prompt":"Generate a Python program to compute the sum of the numbers in an array, after mapping each element to its square. myList = [2, 3, 4, 5, 6]","completion":"def sum_of_squares(myList): result = 0 for num in myList: result += num**2 return result total = sum_of_squares(myList) print(\\"Sum of Squares:\\", total)"},{"prompt":"Create a Python program that takes a string and returns a new string with the first letter of each word capitalized. my name is john","completion":"def capitalize_words(string): words = string.split(' ') capitalized_words = [word.capitalize() for word in words] return ' '.join(capitalized_words)"},{"prompt":"Generate a python program to parse and extract information from the following input input = [{'animals': ['dog', 'cat', 'horse'], 'instruments': ['violin', 'guitar']}, {'food': ['banana', 'apple', 'celery'], 'objects': ['chair', 'table']}]","completion":"def parse(input): output = [] for d in input: for key, value in d.items(): output.append({key: value}) return output"},{"prompt":"Create a Python program to find the top 10 most frequently used words in a given text. text = Hello there, this is a test. I'm testing this text to see which words are used the most.","completion":"import re # Read the text file with open('text.txt') as f: text = f.readlines() # Create a list of tuples where the first element is the word # and the second is the frequency word_frequency = [] # Count frequency of each word for line in text: for word in line.split(): word = re.sub(r'[^ws]', '', word) if word: word_frequency.append((word, word_frequency.count(word) + 1)) # Store the top 10 most frequent words top_10_words = [] # Sort the frequency in descending order word_frequency.sort(key=lambda x: x[1], reverse=True) for i in range(10): top_10_words.append(word_frequency[i][0]) print('The top 10 most frequent words are:', top_10_words) #--> The top 10 most frequent words are: ['this', 'is', 'a', 'test', 'Hello', 'there', 'I'm', 'to', 'see', 'which']"},{"prompt":"Can you write a Python program to find all prime numbers between two given numbers? n1 = 20, n2 = 50","completion":"def checkPrime(num): if (num == 1): return False for i in range(2, num): if (num % i == 0): return False return True n1 = 20 n2 = 50 for num in range(n1, n2 + 1): if (checkPrime(num)): print(num)"},{"prompt":"Develop a linear regression model in Python to predict housing prices.","completion":"import numpy as np from sklearn.linear_model import LinearRegression # Create feature and target vector X=np.array([num_bedrooms, size_sqft, num_bathrooms, age]).T y=np.array([price]).T # Create and train the model model = LinearRegression().fit(X, y) # Output the result print('Coefficients:', model.coef_) print('Intercept:', model.intercept_)"},{"prompt":"Configure the following python code to work the mathematical expression. def calculate(x, y, operator)","completion":"def calculate(x, y, operator): if operator == '+': return x + y elif operator == '-': return x - y elif operator == '*': return x * y elif operator == '/': return x / y"},{"prompt":"mprove the design of the following Python code. def count_vowels(string): vowel_count = 0 for letter in string: if letter in aeiou: vowel_count += 1 return vowel_cou","completion":"def count_vowels(string): vowel_count = 0 vowels = 'aeiou' for letter in string: if letter in vowels: vowel_count += 1 return vowel_count"},{"prompt":"Write an algorithm in Python to merge two sorted lists into one. list1 = [2, 3, 5, 7] list2 = [4, 6, 8, 10]","completion":"def mergeSortedLists(list1, list2): merged_list = [] while len(list1) and len(list2): if list1[0] < list2[0]: merged_list.append(list1.pop(0)) else: merged_list.append(list2.pop(0)) if len(list1): merged_list += list1 if len(list2): merged_list += list2 return merged_list list1 = [2, 3, 5, 7] list2 = [4, 6, 8, 10] print(mergeSortedLists(list1, list2))"},{"prompt":"Construct a python program which will receive a string and output the same string in reverse. string = Hello World!","completion":"def reverse_string(string): return string[::-1]"},{"prompt":"Come up with a Python program to generate a Fibonacci sequence till n steps n = 8","completion":"def fibonacci(n): numbers = [] a = 0 b = 1 while len(numbers) <= n: c = a + b numbers.append(c) a = b b = c return numbers if __name__ == '__main__': print(fibonacci(8))"},{"prompt":"Write a Python program to list the factors of a given integer. Number= 24","completion":"# Python program to list the factors of a given number # Function to print the factors of a given number def print_factors(x): print(\\"The factors of\\",x,\\"are:\\") for i in range(1, x + 1): if x % i == 0: print(i) # Change this value for a different result. num = 24 # uncomment the following line to take input from the user #num = int(input(\\"Enter a number: \\")) print_factors(num)"},{"prompt":"Create a Python program to fetch customer records from a database.","completion":"import mysql.connector conn = mysql.connector.connect( host=\\"localhost\\", user=\\"root\\", passwd=\\"\\", database=\\"yourdatabase\\" ) cursor = conn.cursor() query = \\"SELECT * FROM customers\\" cursor.execute(query) rows = cursor.fetchall() for row in rows: customer_id, customer_name, customer_address = row print(f\\"ID: {customer_id}, Name: {customer_name}, Address: {customer_address}\\") cursor.close() conn.close()"},{"prompt":"Generate a Python code which takes a list of strings as input and return a string which contain the first letter of each string concatenated. [Hello, World, This, Is, A, Test]","completion":"def first_letter_concat(l): '''This function takes a list of strings as input and return a string which contain the first letter of each string concatenated.''' result = '' for s in l: result += s[0] return result"},{"prompt":"Create a web service (REST API) in Python to get the student information from the database.","completion":"import flask from flask import request, jsonify app = flask.Flask(__name__) @app.route('/students', methods=['GET']) def get_students(): # get the information from the database data = [{'id':1, 'name':'John Doe'}, {'id':2, 'name':'Jane Doe'}] return jsonify(data) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Generate a program for optimizing a set of query parameters using Python and gradient descent. Parameters x1, x2, x3 Learning Rate (alpha): 0.1","completion":"\\"\\"\\" Optimize a set of query parameters using gradient descent \\"\\"\\" import numpy as np # Initialize parameters x1 = 0 x2 = 0 x3 = 0 # Learning rate alpha = 0.1 # Calculate the partial derivatives of a function with respect to each parameter def get_gradient(x1, x2, x3): partial_derivative_x1 = x1 + x3 partial_derivative_x2 = -1 * (x1 * x2) + x3 partial_derivative_x3 = x2 * x2 + x2 * x3 + x1 return (partial_derivative_x1, partial_derivative_x2, partial_derivative_x3) # Calculate updated parameters def update_parameters(x1, x2, x3, grads, alpha): x1_delta = alpha * grads[0] x2_delta = alpha * grads[1] x3_delta = alpha * grads[2] x1 = x1 - x1_delta x2 = x2 - x2_delta x3 = x3 - x3_delta return (x1, x2, x3) # Optimize parameters using gradient descent def optimizer(x1, x2, x3, alpha): # Calculate gradients grads = get_gradient(x1, x2, x3) # Update parameters x1, x2, x3 = update_parameters(x1, x2, x3, grads, alpha) return (x1, x2, x3) if __name__ == \\"__main__\\": x1, x2, x3 = optimizer(x1, x2, x3, alpha) print(\\"Optimized parameters:\\") print(\\"x1 =\\", x1) print(\\"x2 =\\", x2) print(\\"x3 =\\", x3)"},{"prompt":"Design a Python function to compute the factorial of a given number.","completion":"def factorial(n): if n < 1: return 1 else: return n * factorial(n - 1)"},{"prompt":"Write a Python script to read data from an API and store into an SQLite database. Not applicable","completion":"import requests import sqlite3 # Connect to the database conn = sqlite3.connect('test.db') cursor = conn.cursor() # Get the data from the API data = requests.get('http://example.com/api/data').json() # Insert the data into the table for info in data: cursor.execute('INSERT INTO table_name (column1, column2, column3) VALUES (?,?,?)', (info['field1'], info['field2'], info['field3']) conn.commit()"},{"prompt":"Write a generic Python data structure to hold last N elements.","completion":"class LastNElements: def __init__(self, n): self.n = n self.elements = [] def push(self, element): if len(self.elements) < self.n: self.elements.append(element) else: # Shift the elements to the left for i in range(len(self.elements)-1): self.elements[i] = self.elements[i+1] self.elements[-1] = element def get_elements(self): return self.elements"},{"prompt":"Generate a Python program to implement basic authentication. No input.","completion":"import base64 def basic_auth(username, password): user_pass = username + ':' + password encoded_user_pass = base64.b64encode(user_pass.encode('UTF-8')) return \\"Basic \\" + encoded_user_pass.decode('UTF-8') # Example usage user = 'my_username' pass = 'my_password' auth_header = basic_auth(user, pass)"},{"prompt":"Using the comments as a guide, fix the given python code. num_list = [2, 7, 4, 10, 5] # TODO: replace the line below total = 0 for num in num_list: total += num print(total)","completion":"num_list = [2, 7, 4, 10, 5] # Replace the line below total = 0 for num in num_list: total += num print(total)"},{"prompt":"Develop an algorithm in Python to remove duplicates from a list.","completion":"# remove_duplicates function takes a list as a parameter # and returns a list with all the duplicates removed def remove_duplicates(input_list): # Create an empty list to store the result result = [] # Iterate through the given list for element in input_list: # Check if the element is already in the result list # and if not, add it to the result if element not in result: result.append(element) # Return the result return result"},{"prompt":"Create an animation in Python that displays an expanding circle across the screen.","completion":"import turtle def drawCircle(x, y, r): turtle.penup() turtle.goto(x, y) turtle.pendown() turtle.circle(r) for r in range(20, 100, 10): drawCircle(0, 0, r) turtle.done()"},{"prompt":"Using Python, generate a random 8 character alphanumeric string.","completion":"import random import string def generate_random_string(): letters_and_digits = string.ascii_letters + string.digits return ''.join((random.choice(letters_and_digits) for i in range(8))) random_string = generate_random_string() print(random_string)"},{"prompt":"Design a RESTAPI in Python using Flask that displays the current date and time when a GET request is sent. Not applicable","completion":"from flask import Flask, jsonify from datetime import datetime app = Flask(__name__) @app.route('/time', methods=['GET']) def time(): time = { 'time': datetime.now() } return jsonify(time) if __name__ == '__main__': app.run()"},{"prompt":"Compose a Python function to retrieve all documents from a Firebase Realtime Database collection. A Firebase project URL and collection name","completion":"def get_all_docs(project_url, collection_name): # project_url and collection name # Your Firebase Config firebaseConfig = { \\"apiKey\\": \\"apiKey\\", \\"authDomain\\": \\"projectId.firebaseapp.com\\", \\"databaseURL\\": project_url, \\"storageBucket\\": \\"<your-storage-bucket>\\", } # Initialize Firebase firebase = pyrebase.initialize_app(firebaseConfig) # Get a reference to the database db = firebase.database() # Get the documents in the specified collection docs = db.child(collection_name).get() return docs.val()"},{"prompt":"Develop a Python class that reads and stores a list of integers. [1, 2, 3, 4, 5]","completion":"class ListOfInts: def __init__(self, numbers): self.numbers = numbers def get_list(self): return self.numbers"},{"prompt":"Write a Python program to generate a table of all possible combinations for a given set of symbols. ['A', 'B', 'C']","completion":"def print_combinations(symbols): for idx in range(1 << len(symbols)): combination = [symbol for symbol, flag in zip(symbols, bin(idx)[2:]) if flag == \\"1\\"] print(combination) symbols = ['A', 'B', 'C'] print_combinations(symbols)"},{"prompt":"Create a python program that takes a list of strings as input and returns a dictionary with string as key and its length as value. list_of_strings = [Apple, Fruit, Banana]","completion":"def list_to_dict(list_of_strings): new_dict = dict() for string in list_of_strings: string_length = len(string) new_dict[string] = string_length return new_dict list_of_strings = [\\"Apple\\", \\"Fruit\\", \\"Banana\\"] string_lengths = list_to_dict(list_of_strings) print(string_lengths) # {'Apple': 5, 'Fruit': 5, 'Banana': 6}"},{"prompt":"Create a Python program to generate random passwords of fixed length that contain random combinations of numbers, symbols, and uppercase and lowercase letters. Not applicable","completion":"import string import random # length of the generated password length = 8 # generate the random password alphabet = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(alphabet) for i in range(length)) # output the password print(password)"},{"prompt":"Generate Python code for making a GraphQL API query. query { user(id: 2) { name age address { street city } } }","completion":"import requests url = 'http://localhost:4000' query = \\"\\"\\" query { user(id: 2) { name age address { street city } } } \\"\\"\\" response = requests.post(url, json={'query': query}) data = response.json() print(data)"},{"prompt":"Generate a Python program to implement the following sorting algorithm Bubble Sor","completion":"def bubble_sort(arr): n = len(arr) for i in range(n - 1): for j in range(i + 1, n): if arr[j] < arr[i]: arr[i], arr[j] = arr[j], arr[i] return arr"},{"prompt":"Create a web crawler written in Python that scrapes hotel reviews from an online travel website. Not applicable","completion":"import requests from bs4 import BeautifulSoup def scraper(url): response = requests.get(url) html = response.content soup = BeautifulSoup(html, 'lxml') reviews_container = soup.find_all('div', class_='review_container') reviews = [] for review in reviews_container: rating = review.find('span', attrs={'class': 'rating'}).text description = review.find('p', class_='review_description').text reviews.append((rating, description)) return reviews url = 'https://www.example.com/hotels/reviews' reviews = scraper(url)"},{"prompt":"Create a program in Python, which takes two parameters: a list of integers and a number X, and returns true if there are two numbers in the list, such that their sum is equal to X. list = [1, 3, 7, 4, 5] X = 12","completion":"def two_sum(lst, x): for i in range(len(lst)): for j in range(i+1, len(lst)): if lst[i] + lst[j] == x: return True return False list = [1, 3, 7, 4, 5] X = 12 two_sum(list, X) # True"},{"prompt":"Generate a function in Python which takes two values and returns the largest one. 38, 64","completion":"def max_of_two_values(val1, val2): if val1 > val2: return val1 else: return val2 # Function call with two arguments largest_one = max_of_two_values(38, 64) # Print the largest number print('The largest one is:', largest_one)"},{"prompt":"Write a core Python script that prints the following output.","completion":"for i in range(1,11): for j in range(1, 11): print(f'{i} * {j} = {i*j}') print()"},{"prompt":"Construct a code in Python that counts the number of words present in an input string. string = This is a sample string","completion":"def count_words(input_string): # split the string into words words = input_string.split() # count the words words_count = len(words) return words_count # input string input_string = \\"This is a sample string\\" # print the number of words present in the input string print(\\"Number of words present in the input string = %d\\" % count_words(input_string))"},{"prompt":"Design an algorithm in Python to solve the Fibonacci numbers problem. Not applicable","completion":"def fib(n): # Base cases if n <= 0: return 0 elif n == 1: return 1 # Recursive case else: return fib(n-1) + fib(n-2) # Generating Fibonacci numbers for i in range(11): print(fib(i))"},{"prompt":"Create a algorithm in Python to convert any given number to binary form.","completion":"def toBinary(n): if (n > 1): toBinary(n//2) print(n%2,end = '') # Driver Code num = 8 toBinary(num)"},{"prompt":"Create a function in python to print a string in reverse.","completion":"def reverse_string(string): string = string[::-1] return string print(reverse_string('hello'))"},{"prompt":"Create a Python program that takes a 3word string and prints individual words in the same order on separate lines. Hooray! Great!","completion":"sentence = \\"Hooray! Great!\\" words = sentence.split(' ') for word in words: print(word)"},{"prompt":"Write a function to shallow copy a python dictionary object.","completion":"def shallow_copy_dict(original_dict): copies_dict = {} for key, value in original_dict.items(): copies_dict[key] = value return copies_dict"},{"prompt":"Design a class in Python to generate a stack with a set of operations.","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): self.items.pop() def peek(self): return self.items[-1] def is_empty(self): return self.items == [] def size(self): return len(self.items)"},{"prompt":"Create Python code to manipulate a given list of strings so that each string contains only the first letter from the original string. arr = [apple, banana, coconut]","completion":"def shorten_string(arr): \\"\\"\\" Manipulate a list of strings so that each string contains only the first letter from the original string. \\"\\"\\" result = [] for word in arr: result.append(word[0]) return result # Call the function arr = [\\"apple\\", \\"banana\\", \\"coconut\\"] result = shorten_string(arr) print(result)"},{"prompt":"Create a program in Python that takes two integer values and finds the greatest common divisor (GCD). Integer values: 18 and 54","completion":"# function to find the GCD of two numbers using Euclidean algorithm def gcd(a, b): if b == 0: return a return gcd(b, a % b) # take input from the user a = 18 b = 54 # find GCD gcd = gcd(a,b) # display result print(\\"The GCD of {} and {} is {}\\".format(a, b, gcd))"},{"prompt":"Create an Azure Function to send an email notification when a new item is added to an Azure Cosmos DB database. Not applicable","completion":"import logging import json import datetime import azure.functions as func from azure.cosmosdb.table.tableservice import TableService def main(cosmosEvent: func.EventGridEvent): logging.info('Python EventGrid trigger processed an event: %s', cosmosEvent.get_json()) # Retrieve the information about the new item body = cosmosEvent.get_json() row_key = body[\\"data\\"][\\"newValue\\"][\\"RowKey\\"] partition_key = body[\\"data\\"][\\"newValue\\"][\\"PartitionKey\\"] # Connect to Azure Table Storage table_service = TableService(connection_string=\\"<YOUR_AZURE_STORAGE_CS>\\") # Retrieve and send the new item item = table_service.get_entity(\\"<YOUR_TABLE_NAME>\\", partition_key, row_key) item_json = json.dumps(item, indent=2) # Send the email send_email(item_json) def send_email(item_json): # Connect to SendGrid API client = SendGridAPIClient(api_key=\\"<YOUR_SENDGRID_API_KEY>\\") # Construct the email message message = Mail( from_email=Email(\\"<YOUR_EMAIL>\\"), subject=\\"New item added to the table!\\", to_email=Email(\\"<RECEIVER_EMAIL>\\"), content=Content(\\"text/plain\\", item_json) ) # Send it response = client.send(message)"},{"prompt":"Create a Python program to generate an ISO8601compliant string from a given date Date: 20200715","completion":"from datetime import datetime date_str = '2020-07-15' date = datetime.strptime(date_str, '%Y-%m-%d') iso8601_str = date.isoformat() print(iso8601_str) # Output: 2020-07-15T00:00:00"},{"prompt":"Write a Python function to convert a list of characters to their corresponding ASCII codes. [‘a’, ‘b’, ‘c’, ‘d’]","completion":"def to_ascii(arr): res = [] for c in arr: res.append(ord(c)) return res print(to_ascii(['a', 'b', 'c', 'd']))"},{"prompt":"Write a Python function to generate the concatenation of two inputs strings. string1 = Hello string2 = World!","completion":"def concatenate_string(string1, string2): return string1 + string2 string1 = \\"Hello \\" string2 = \\"World!\\" concatenated_string = concatenate_string(string1, string2) print(concatenated_string)"},{"prompt":"Design an AI system in Python to classify articles into 5 different classes. The input dataset contains 3000 articles.","completion":"import nltk from nltk.tokenize import word_tokenize import sklearn # load data articles = [<input dataset>] labels = [<ground truth classes>] # create training and test datasets X_train, X_test, y_train, y_test = train_test_split(articles, labels, test_size=0.25, random_state=42) # prepare datasets for vectorization word_counter = Counter(word for article in X_train for word in word_tokenize(article[1])) # vectorize the datasets using word count vectorizer = TfidfVectorizer(max_features=1000, stop_words='english', max_df=0.5, min_df=2, tokenizer=word_tokenize).fit(X_train) X_train_vec = vectorizer.transform(X_train) X_test_vec = vectorizer.transform(X_test) # fit the classifier using the vectorized train dataset clf = SGDClassifier().fit(X_train_vec, y_train) # predict the test dataset y_pred = clf.predict(X_test_vec)"},{"prompt":"Construct a Python program that takes a string as input and creates a new string with the first character of each word in the given string This is a sample string","completion":"def first_letter_string(input_str): output_str = \\"\\" for w in input_str.split(): output_str += w[0] return output_str input_str = \\"This is a sample string\\" print(first_letter_string(input_str))"},{"prompt":"Design a program in Python that deletes every third character from a given string.","completion":"def delete_third_characters(str): str_mod = \\"\\" for i in range(0, len(str)): if (i+1) % 3 != 0: str_mod += str[i] return str_mod"},{"prompt":"Generate a Python program to train a model to predict the number of accidents that happened in a city given the population size and budget of the city. City A: Population=100,000; Budget=3,000,000","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression dataset = pd.DataFrame({ 'Population':[100000], 'Budget':[3000000], 'Accidents':[:] }) X = dataset.iloc[:, :-1].values y = dataset.iloc[:, -1].values X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) regressor = LinearRegression() regressor.fit(X_train, y_train) y_pred = regressor.predict(X_test) accuracy = regressor.score(X_test, y_test) print(accuracy)"},{"prompt":"Translate this code from Python to Java. # Python def find_max(nums): max_num = nums[0] for num in nums: if num > max_num: max_num = num return max_num","completion":"// Java public static int findMax(int[] nums) { int maxNum = nums[0]; for (int num : nums) { if (num > maxNum) { maxNum = num; } } return maxNum; }"},{"prompt":"Develop an API call in Python to fech data from a website. Link to website: www.example.com","completion":"import requests URL = \\"www.example.com\\" # defining a params dict for the parameters to be sent to the API PARAMS = { } # sending get request and saving the response as response object r = requests.get(url = URL, params = PARAMS) # extracting data in json format data = r.json() print(data)"},{"prompt":"Write a Python code to check if the given number is prime. Number = 23","completion":"def is_prime(n): if n <= 1: return False for i in range(2, n//2 + 1): if n % i == 0: return False return True if is_prime(23): print('The given number is prime') else: print('The given number is not prime')"},{"prompt":"Create a Python class with two instance methods: one for calculating the area of a circle, and one for calculating the circumference.","completion":"class Circle: def __init__(self, radius): self.radius = radius def area(self): return 3.14 * self.radius * self.radius def circumference(self): return 3.14 * (2 * self.radius)"},{"prompt":"Given a list of numbers, create a program to find the maximum number using Python. numbers = [1,2,3,4,5,6]","completion":"def find_max(numbers): maximum = numbers[0] for num in numbers: if num > maximum: maximum = num return maximum if __name__ == \\"__main__\\": numbers = [1,2,3,4,5,6] print(find_max(numbers))"},{"prompt":"Write a Python program to display numbers of characters occurrence in a string. String : Hello World","completion":"s = \\"Hello World\\" # Create an empty dictionary to store the count of characters charCount = {} # Iterate over each character of the string for c in s: # Get the count of characters, # if the character is not present, set it to 0 count = charCount.get(c, 0) # Increment the count of characters charCount[c] = count + 1 # Print the character count print(charCount)"},{"prompt":"Design and code an entrylevel language interpreter in Python.","completion":"class Interpreter: def __init__(self): self.opeartors = { '+': self.add, '-': self.sub, '/': self.div, '*': self.mul, } def parse(self, text): expressions = text.split(' ') return expressions def evaluate(self, expressions): operator = self.opeartors.get(expressions[1]) if not operator: raise Exception('Invalid operator') return operator(expressions[0], expressions[2]) def add(self, a, b): return int(a) + int(b) def sub(self, a, b): return int(a) - int(b) def div(self, a, b): return int(a) / int(b) def mul(self, a, b): return int(a) * int(b)"},{"prompt":"Generate a Python program that prints out the pattern / / .","completion":"for x in range(3): print(' /' * x + ' ')"},{"prompt":"Write a Python program to calculate the cost of sending a message through a messaging service Message size: 172 bytes Price per message: 0.0003 USD","completion":"\\"\\"\\" Calculate the cost of sending a message through a messaging service \\"\\"\\" # Message size size = 172 # bytes # Price per message price_per_message = 0.0003 # USD # Calculate cost cost = size * price_per_message print(\\"The cost of sending a message is {:.3f} USD\\".format(cost))"},{"prompt":"Create a web crawling program using Python","completion":"import requests from bs4 import BeautifulSoup # Function to crawl a given website def web_crawl(url): # Get the content from the given URL page = requests.get(url) # Create a bs4 object with the content soup = BeautifulSoup(page.content, 'html.parser') # Find all links on the page links = soup.find_all(\\"a\\") # Iterate over all links for link in links: # Get the URL from the link link_url = link.get(\\"href\\") # Check if the URL is valid if link_url is not None and link_url != \\"#\\": #parse the URL to crawl further web_crawl(link_url) # Driver code if __name__ == \\"__main__\\": # Crawl the given website web_crawl(\\"https://www.example.com\\")"},{"prompt":"Modify the following Python code to reverse the order of the elements in an array arr = [1, 2, 3, 4, 5]","completion":"arr = arr[::-1] # Reverses the order of elements in the array."},{"prompt":"Convert the following Ruby code snippet to Python name = Jared puts Hello #{name}","completion":"name = \\"Jared\\" print(f\\"Hello {name}\\")"},{"prompt":"Generate a Python class that overides the default methods of a list.","completion":"class MyList(list): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) def append(self, element): super().append(element) print('Element {} is added to the list'.format(element)) def insert(self, index, element): super().insert(index, element) print('Element {} is inserted at index {}'.format(element, index)) def pop(self, index=-1): element = super().pop(index) print('Element {} is removed from the list'.format(element)) return element"},{"prompt":"Design a python program to analyze a text document. A novel by Leo Tolstoy War and Peace.","completion":"# Read in the War and Peace text file with open('war_and_peace.txt', 'r') as f: text = f.read() # Tokenize the text words = text.lower().split() # Count the words word_freq = {} for word in words: if word not in word_freq: word_freq[word] = 0 word_freq[word] += 1 # Print out the most frequent words sorted_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True) print(\\"Most frequent words:\\") for word, count in sorted_words[:20]: print('{} : {}'.format(word, count))"},{"prompt":"Create a class in Python that optimizes its fit by using the L1 regularization method.","completion":"import numpy as np class L1Model: def __init__(self): self.coef_ = None def fit(self, X, y): n, m = X.shape w = np.random.randn(m) lr = 10e-5 for t in range(1000): p = np.dot(X, w) grad = 2 * np.dot(X.T, p - y) + lr * np.sign(w) w = w - lr * grad self.coef_ = w"},{"prompt":"Write a Python program to delete all occurrences of a given number from a list lst=[2,2,3,5,7,2,9]","completion":"def remove_all(num, lst): result = [] for i in range(len(lst)): if lst[i] != num: result.append(lst[i]) return result"},{"prompt":"Write a python program to filter a list of numbers by removing duplicate items. A list of numbers: [1,2,3,4,5,2,3]","completion":"# Create an empty set result = set() nums = [1,2,3,4,5,2,3] # Iterate over the list for num in nums: # Add each item to the set if it is not already present if num not in result: result.add(num) # Print the resulting list print(list(result)) #[1, 2, 3, 4, 5]"},{"prompt":"Create a Python program to remove all whitespace from a given string. Hello World","completion":"string = \\"Hello World \\" no_space_string = string.replace(' ', '') print(no_space_string)"},{"prompt":"Create a Python program that calculates the factorial of a number. n=5","completion":"def factorial(n): if n == 0: return 1 return n*factorial(n-1) fact = factorial(5) print('Factorial of 5 is ' + str(fact))"},{"prompt":"The given code contains several test functions for various Pipenv functionalities. Each test function tests a specific aspect of Pipenv, such as environment variable expansion, source management, virtual environment creation, and package installation. To run these tests, you can use a testing framework such as pytest and execute the test functions. The tests cover a range of scenarios, such as installing packages from multiple sources, maintaining file line endings, and running Pipenv in a virtual environment. The tests ensure that Pipenv functions correctly and that the expected behavior is maintained across different scenarios.","completion":"# -*- coding=utf-8 -*- from __future__ import absolute_import, print_function import io import os import tarfile import pytest from pipenv.patched import pipfile from pipenv.project import Project from pipenv.utils import temp_environ from pipenv.vendor.vistir.path import is_in_path, normalize_path from pipenv.vendor.delegator import run as delegator_run @pytest.mark.project @pytest.mark.sources @pytest.mark.environ def test_pipfile_envvar_expansion(PipenvInstance): with PipenvInstance(chdir=True) as p: with temp_environ(): with open(p.pipfile_path, 'w') as f: f.write(\\"\\"\\" [[source]] url = 'https://{TEST_HOST}/simple' verify_ssl = false name = \\"pypi\\" [packages] pytz = \\"*\\" \\"\\"\\".strip()) os.environ['TEST_HOST'] = 'localhost:5000' project = Project() assert project.sources[0]['url'] == 'https://localhost:5000/simple' assert 'localhost:5000' not in str(pipfile.load(p.pipfile_path)) @pytest.mark.project @pytest.mark.sources @pytest.mark.parametrize('lock_first', [True, False]) def test_get_source(PipenvInstance, lock_first): with PipenvInstance(chdir=True) as p: with open(p.pipfile_path, 'w') as f: contents = \\"\\"\\" [[source]] url = \\"{0}\\" verify_ssl = false name = \\"testindex\\" [[source]] url = \\"https://pypi.org/simple\\" verify_ssl = \\"true\\" name = \\"pypi\\" [packages] pytz = \\"*\\" six = {{version = \\"*\\", index = \\"pypi\\"}} [dev-packages] \\"\\"\\".format(os.environ['PIPENV_TEST_INDEX']).strip() f.write(contents) if lock_first: # force source to be cached c = p.pipenv('lock') assert c.return_code == 0 project = Project() sources = [ ['pypi', 'https://pypi.org/simple'], ['testindex', os.environ.get('PIPENV_TEST_INDEX')] ] for src in sources: name, url = src source = [s for s in project.pipfile_sources if s.get('name') == name] assert source source = source[0] assert source['name'] == name assert source['url'] == url assert sorted(source.items()) == sorted(project.get_source(name=name).items()) assert sorted(source.items()) == sorted(project.get_source(url=url).items()) assert sorted(source.items()) == sorted(project.find_source(name).items()) assert sorted(source.items()) == sorted(project.find_source(url).items()) @pytest.mark.install @pytest.mark.project @pytest.mark.parametrize('newlines', [u'n', u'rn']) def test_maintain_file_line_endings(PipenvInstance, newlines): with PipenvInstance(chdir=True) as p: # Initial pipfile + lockfile generation c = p.pipenv('install pytz') assert c.return_code == 0 # Rewrite each file with parameterized newlines for fn in [p.pipfile_path, p.lockfile_path]: with io.open(fn) as f: contents = f.read() written_newlines = f.newlines assert written_newlines == u'n', '{0!r} != {1!r} for {2}'.format( written_newlines, u'n', fn, ) # message because of https://github.com/pytest-dev/pytest/issues/3443 with io.open(fn, 'w', newline=newlines) as f: f.write(contents) # Run pipenv install to programatically rewrite c = p.pipenv('install chardet') assert c.return_code == 0 # Make sure we kept the right newlines for fn in [p.pipfile_path, p.lockfile_path]: with io.open(fn) as f: f.read() # Consumes the content to detect newlines. actual_newlines = f.newlines assert actual_newlines == newlines, '{0!r} != {1!r} for {2}'.format( actual_newlines, newlines, fn, ) # message because of https://github.com/pytest-dev/pytest/issues/3443 @pytest.mark.project @pytest.mark.sources @pytest.mark.needs_internet def test_many_indexes(PipenvInstance): with PipenvInstance(chdir=True) as p: with open(p.pipfile_path, 'w') as f: contents = \\"\\"\\" [[source]] url = \\"{0}\\" verify_ssl = false name = \\"testindex\\" [[source]] url = \\"https://pypi.org/simple\\" verify_ssl = \\"true\\" name = \\"pypi\\" [[source]] url = \\"https://pypi.python.org/simple\\" verify_ssl = \\"true\\" name = \\"legacy\\" [packages] pytz = \\"*\\" six = {{version = \\"*\\", index = \\"pypi\\"}} [dev-packages] \\"\\"\\".format(os.environ['PIPENV_TEST_INDEX']).strip() f.write(contents) c = p.pipenv('install') assert c.return_code == 0 @pytest.mark.install @pytest.mark.project def test_include_editable_packages(PipenvInstance, testsroot, pathlib_tmpdir): file_name = \\"tablib-0.12.1.tar.gz\\" package = pathlib_tmpdir.joinpath(\\"tablib-0.12.1\\") source_path = os.path.abspath(os.path.join(testsroot, \\"pypi\\", \\"tablib\\", file_name)) with PipenvInstance(chdir=True) as p: with tarfile.open(source_path, \\"r:gz\\") as tarinfo: tarinfo.extractall(path=str(pathlib_tmpdir)) c = p.pipenv('install -e {0}'.format(package.as_posix())) assert c.return_code == 0 project = Project() assert \\"tablib\\" in [ package.project_name for package in project.environment.get_installed_packages() ] @pytest.mark.project @pytest.mark.virtualenv def test_run_in_virtualenv_with_global_context(PipenvInstance, virtualenv): with PipenvInstance(chdir=True, venv_root=virtualenv.as_posix(), ignore_virtualenvs=False, venv_in_project=False) as p: c = delegator_run( \\"pipenv run pip freeze\\", cwd=os.path.abspath(p.path), env=os.environ.copy() ) assert c.return_code == 0, (c.out, c.err) assert 'Creating a virtualenv' not in c.err, c.err project = Project() assert project.virtualenv_location == virtualenv.as_posix(), ( project.virtualenv_location, virtualenv.as_posix() ) c = delegator_run( \\"pipenv run pip install -i {} click\\".format(p.index_url), cwd=os.path.abspath(p.path), env=os.environ.copy() ) assert c.return_code == 0, (c.out, c.err) assert \\"Courtesy Notice\\" in c.err, (c.out, c.err) c = delegator_run( \\"pipenv install -i {} six\\".format(p.index_url), cwd=os.path.abspath(p.path), env=os.environ.copy() ) assert c.return_code == 0, (c.out, c.err) c = delegator_run( 'pipenv run python -c \\"import click;print(click.__file__)\\"', cwd=os.path.abspath(p.path), env=os.environ.copy() ) assert c.return_code == 0, (c.out, c.err) assert is_in_path(c.out.strip(), str(virtualenv)), (c.out.strip(), str(virtualenv)) c = delegator_run( \\"pipenv clean --dry-run\\", cwd=os.path.abspath(p.path), env=os.environ.copy() ) assert c.return_code == 0, (c.out, c.err) assert \\"click\\" in c.out, c.out @pytest.mark.project @pytest.mark.virtualenv def test_run_in_virtualenv(PipenvInstance): with PipenvInstance(chdir=True) as p: c = p.pipenv('run pip freeze') assert c.return_code == 0 assert 'Creating a virtualenv' in c.err project = Project() c = p.pipenv(\\"run pip install click\\") assert c.return_code == 0 c = p.pipenv(\\"install six\\") assert c.return_code == 0 c = p.pipenv('run python -c \\"import click;print(click.__file__)\\"') assert c.return_code == 0 assert normalize_path(c.out.strip()).startswith( normalize_path(str(project.virtualenv_location)) ) c = p.pipenv(\\"clean --dry-run\\") assert c.return_code == 0 assert \\"click\\" in c.out @pytest.mark.project @pytest.mark.sources def test_no_sources_in_pipfile(PipenvInstance): with PipenvInstance(chdir=True) as p: with open(p.pipfile_path, 'w') as f: contents = \\"\\"\\" [packages] pytest = \\"*\\" \\"\\"\\".format(os.environ['PIPENV_TEST_INDEX']).strip() f.write(contents) c = p.pipenv('install --skip-lock') assert c.return_code == 0"},{"prompt":"Write a Python function for computing the cosine similarity between two lists of text documents. Two lists of text documents, i.e. [document1, document2, document3] and [document4, document5, document6]","completion":"def cosine_similarity(list1, list2): from sklearn.feature_extraction.text import CountVectorizer from sklearn.metrics.pairwise import cosine_similarity corpus = list1 + list2 vectorizer = CountVectorizer() vector = vectorizer.fit_transform(corpus) cosine_similarity = cosine_similarity(vector[:len(list1)], vector[len(list1):]) return cosine_similarity"},{"prompt":"Write a Python code for converting a given sentence into pig latin. The quick brown fox","completion":"def convert_string_to_pig_latin(sentence): words = sentence.split() pig_latin_words = [] for word in words: if word[0] in 'aeiou': pig_word = word + 'way' else: pig_word = word[1:] + word[0] + 'ay' pig_latin_words.append(pig_word) return ' '.join(pig_latin_words)"},{"prompt":"Create a RESTful API using Python Django for a book library. The API should allow users to manipulate and list books, authors, and reviews. Not applicable","completion":"from django.conf import settings from django.contrib.auth.models import User from django.db import models class Book(models.Model): title = models.CharField(max_length=255) description = models.TextField() author = models.ForeignKey(User, on_delete=models.CASCADE) class Author(models.Model): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) class Review(models.Model): text = models.TextField() book = models.ForeignKey(Book, on_delete=models.CASCADE) author = models.ForeignKey(User, on_delete=models.CASCADE)"},{"prompt":"Write a Python program that takes an input string and reverses all of its words. hello world","completion":"world hello"},{"prompt":"Create a Python script to find the most common letter in a given string. string = This is a test string","completion":"def find_most_common_letter(string): # Create a dictionary to count the frequency of characters char_frequency = {} for char in string: if char in char_frequency: char_frequency[char] += 1 else: char_frequency[char] = 1 # Find the most common letter most_common_char = '' max_count = 0 for key, val in char_frequency.items(): if val > max_count: max_count = val most_common_char = key return most_common_char string = \\"This is a test string\\" print(find_most_common_letter(string)) # Output: 's'"},{"prompt":"Write a Python program that uses the Beautiful Soup library to scrape a list of product names and prices from an ecommerce website. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = \\"https://example.com/products\\" # make the http request r = requests.get(url) # parse the http response soup = BeautifulSoup(r.text, 'html.parser') # find all products products = soup.find_all('div', {'class': 'product'}) # loop through the products and print information for product in products: name = product.find('h3').text price = product.find('div',{'class': 'price'}).text print(name, price)"},{"prompt":"Create a chatbot in Python that uses a Natural Language Understanding (NLU) engine to identify the user’s intent. Not applicable","completion":"from rasa_nlu.model import Interpreter import json interpreter = Interpreter.load('./models/default/model_20191206-151744') # Define a function to ask the chatbot and get a response def chatbot_query(query): response = interpreter.parse(query) intent_name = response['intent']['name'] # Create custom response based on intent if intent_name == 'greet': response = 'Hello, how can I help you?' elif intent_name == 'goodbye': response = 'Goodbye and have a nice day!' else: response = 'I am sorry, I don't know what you mean.' return response # Get response from chatbot query = input('You: ') response = chatbot_query(query) print('Chatbot: ' + response)"},{"prompt":"Generate a function in Python that takes in a string and returns the longest consecutive letter sequence in the string.","completion":"def longest_consecutive_letters(s): longest_seq = \\"\\" current_seq = \\"\\" for i in range(len(s)): if i == 0: current_seq = current_seq + s[i] else: if s[i] == s[i-1]: current_seq = current_seq + s[i] else: longest_seq = max(longest_seq, current_seq, key=len) current_seq = s[i] longest_seq = max(longest_seq, current_seq, key=len) return longest_seq"},{"prompt":"Design a Python program to find the largest subarray with 0 sum. [15, 30, 10, 40, 20, 9]","completion":"def largest_subarray_sum(arr): # Create an empty dictionary sum_map = {} sum_value = 0 max_len = 0 # Traverse through the array and store the cumulative # sum values in the dictionary for i in range(0,len(arr)): sum_value += arr[i] if (sum_value == 0): max_len = i + 1 if sum_value in sum_map: max_len = max(max_len, i - sum_map[sum_value]) else: #Else put this sum in dictionary sum_map[sum_value] = i return max_len"},{"prompt":"Write a Python program which accepts the user's first and last name and print them in reverse order with a space between them.","completion":"def reverse_name_order(first_name, last_name): print(last_name + \\" \\" + first_name) first_name = input(\\"Enter your first name: \\") last_name = input(\\"Enter your last name: \\") reverse_name_order(first_name, last_name)"},{"prompt":"Think of a data structure and implement it using Python.","completion":"class Queue: def __init__(self): self.queue = [] def enqueue(self, element): self.queue.append(element) def dequeue(self): return self.queue.pop(0)"},{"prompt":"Generate a single line of code to add a new item to an existing list in Python.","completion":"existing_list.append(new_item)"},{"prompt":"Create a Python script to perform sentiment analysis on a given piece of text. Use the TextBlob package to detect the sentiment of the text and print out the sentiment score. Text: The movie was great! I really enjoyed watching it.","completion":"import textblob text = \\"The movie was great! I really enjoyed watching it.\\" blob = textblob.TextBlob(text) sentiment = blob.sentiment print(\\"Sentiment score:\\", sentiment.polarity)"},{"prompt":"Design a function in Python to generate Fibonacci numbers from 1 to a given range. 10","completion":"def fibonacci(x): fib_numbers = [1,1] for i in range(2,x): fib_numbers.append(fib_numbers[i-1] + fib_numbers[i-2]) return fib_numbers"},{"prompt":"Generate a list of prime numbers up to a given number using a Python program. number = 50","completion":"def prime_numbers (number): prime_list = [] for num in range(2, number + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: prime_list.append(num) return prime_list number = 50 print(prime_numbers(number))"},{"prompt":"Write a Python program to sort the given list of lists by their third elements. my_list = [[1, 2, 5], [3, 4, 1], [7, 8, 9]]","completion":"def sort_by_third_elements(list_of_lists): return sorted(list_of_lists, key=lambda x: x[2]) my_list = [[1, 2, 5], [3, 4, 1], [7, 8, 9]] print(sort_by_third_elements(my_list)) # Output: [[3, 4, 1], [1, 2, 5], [7, 8, 9]]"},{"prompt":"Create an Alexa skill that displays the current weather in Riyadh. Not applicable","completion":"import boto3 # create an Alexa skill using Python SDK def handler(event, context): # get the current weather in Riyadh weather = get_weather(\\"Riyadh\\") # craft the speech response speech_response = f\\"The current weather in Riyadh is {weather}\\" # return the response return { \\"version\\": \\"1.0\\", \\"response\\": { \\"outputSpeech\\": { \\"type\\": \\"PlainText\\", \\"text\\": speech_response, }, }, } # function to get current weather from a given city using AWS def get_weather(city): client = boto3.client('weather') response = client.get_weather(City=city) return response['Weather']"},{"prompt":"Create a Python program to print out the given string in all uppercase. This is a test string","completion":"string = \\"This is a test string\\" print(string.upper())"},{"prompt":"Write a Python program to load the COVID19 data from Github repository. Not applicable","completion":"import requests import csv import os # Get the latest COVID-19 data from Github repository url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/04-01-20"},{"prompt":"Write a script in Python that takes an array of numbers as parameter and returns the minimum and maximum values. array=[4, 6, 3, 2, 8, 10]","completion":"def min_max(array): min = array[0] max = array[0] for value in array: if value < min: min = value elif value > max: max = value return min, max array=[4, 6, 3, 2, 8, 10] min, max = min_max(array) print(\\"Minimum: \\", min) print(\\"Maximum: \\", max)"},{"prompt":"Develop a program in Python that implements Binary Search tree.","completion":"class Node: def __init__(self, key): self.key = key self.left = None self.right = None def insert(root, key): if root is None: return Node(key) if root.key < key: root.right = insert(root.right, key) else: root.left = insert(root.left, key) return root"},{"prompt":"Write a Python program to generate all possible permutations of a given set of elements. [1, 2, 3]","completion":"def permutations(elements): if len(elements) <=1: yield elements else: for perm in permutations(elements[1:]): for i in range(len(elements)): yield perm[:i] + elements[0:1] + perm[i:] result = list(permutations([1, 2, 3])) print(result)"},{"prompt":"Write a Python function to calculate the number of possible permutations for a given input array. [2, 1, 3]","completion":"from math import factorial def calculate_permutations(arr): n = len(arr) return factorial(n) result = calculate_permutations([2, 1, 3]) print(result)"},{"prompt":"Generate a function in Python that takes a list of strings as an argument and then returns an output list that consists of the strings. Each item in the output list should be in the same order as in the argument list, but with all the vowels replaced by an underscore character '_'. list = ['hello', 'world', 'goodbye']","completion":"def replace_vowels(words): output_list = [] for word in words: modified_word = '' for char in word: if char.lower() in ['a', 'e', 'i', 'o', 'u']: modified_word += '_' else: modified_word += char output_list.append(modified_word) return output_list replace_vowels(list) # returns ['h_ll_', 'w_rld', 'g__.dby_']"},{"prompt":"mplement a starter Kmeans clustering algorithm in Python.","completion":"import numpy as np def kmeans(X, k, tol = 0.001, max_iter = 300): m = X.shape[0] # number of training examples n = X.shape[1] # number of features initialize the centroids centroids = np.zeros((k, n)) randomly select k data points as centroids for i in range(k): centroids[i] = X[np.random.choice(m),:] initialize the cluster index cluster_index = np.zeros(m) pre_cluster_index = np.zeros(m) for it in range(max_iter): calculate the distance with each centroids for i in range(m): min_distance = float('inf') for j in range(k): d = np.sum((X[i]-centroids[j])**2) if d < min_distance: min_distance = d cluster_index[i] = j check converging or not if np.array_equal(pre_cluster_index, cluster_index): break pre_cluster_index = cluster_index move the centroid to the average of points in the cluster for i in range(k): points_in_cluster =X[cluster_index == i] centroids[i] = np.mean(points_in_cluster, axis=0) return centroids, cluster_index"},{"prompt":"Create a function in Python that takes a string as an input and replaced all characters in the string with the corresponding index position in the string. Not applicable","completion":"def indices_replace(string): string_indices = '' for index, value in enumerate(string): string_indices += str(index) return string_indices"},{"prompt":"Arrange the given Python code in the correct order so that it prints the square of the numbers from 0 to 10. print(n) for n in range(11) n = n *","completion":"for n in range(11): n = n * n print(n)"},{"prompt":"Create a basic RNN model using Keras in Python that can generate text. Not applicable","completion":"import keras from keras.preprocessing.text import Tokenizer from keras.preprocessing.sequence import pad_sequences from keras.layers import Embedding, LSTM, Dense, Dropout from keras.models import Sequential #Data loading and preprocessing text = open('text_file.txt').read() tokenizer = Tokenizer() tokenizer.fit_on_texts([text]) encoded = tokenizer.texts_to_sequences([text])[0] # Generating sequences sequence_length = 15 sequences = list() for i in range(sequence_length, len(encoded)): seq = encoded[i-sequence_length:i] line = ' '.join(map(str, seq)) sequences.append(line) # Generate model model = Sequential() model.add(Embedding(20000, 128, input_length=sequence_length)) model.add(LSTM(256)) model.add(Dense(500, activation='relu')) model.add(Dense(20000, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) # Train the model model.fit(sequences, encoded, epochs=50, verbose=2)"},{"prompt":"Write a Python program that given two strings, s1 and s2, returns the length of the smallest substring in s1 that contains all of the characters in s2. s1 = abcdefghi s2 = cgh","completion":"def min_substring_length(s1, s2): last_seen = {c: -1 for c in s2} min_length = len(s1) + 1 left, right = 0, 0 while right < len(s1): c = s1[right] if c in s2: last_seen[c] = right # record the last seen position of c # if all characters in s2 is found if all(v>=left for v in last_seen.values()): min_length = min(min_length, right - left + 1) # update min length # move left pointer of the window left = min(last_seen.values()) + 1 right += 1 return min_length print(min_substring_length(s1, s2)) # Output: 3"},{"prompt":"dentify and explain a memory leak in the following Python code. def getData(): data = [] while True: val = input(Enter a value: ) if val == done: break data.append(val) return d","completion":"The code in question contains a memory leak due to an infinite loop. Inside the loop, a new value is continuously added to the list ‘data’ without ever being removed. This will result in the list growing without bounds, resulting in the memory associated with the list being allocated indefinitely but never freed. To fix this memory leak, the list should be cleared or removed after each iteration of the loop. This can be done by simply setting the list to an empty list or by simply deleting the list."},{"prompt":"This code compares CheckM estimates. To use it, run the script with three arguments: the path to a file indicating genomes that failed QC, the path to a file with alternative CheckM estimates, and the path to an output file. The script will read in the two input files, compare the estimates, and output the results to the specified output file.","completion":"#!/usr/bin/env python # # # # This program is free software: you can redistribute it and/or modify # # it under the terms of the GNU General Public License as published by # # the Free Software Foundation, either version 3 of the License, or # # (at your option) any later version. # # # # This program is distributed in the hope that it will be useful, # # but WITHOUT ANY WARRANTY; without even the implied warranty of # # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # # GNU General Public License for more details. # # # # You should have received a copy of the GNU General Public License # # along with this program. If not, see <http://www.gnu.org/licenses/>. # # # # __prog_name__ = 'checkm_compare.py' __prog_desc__ = 'compare CheckM estimates' __author__ = 'Donovan Parks' __copyright__ = 'Copyright 2018' __credits__ = ['Donovan Parks'] __license__ = 'GPL3' __version__ = '0.0.1' __maintainer__ = 'Donovan Parks' __email__ = 'donovan.parks@gmail.com' __status__ = 'Development' import os import sys import argparse import tempfile import ntpath import shutil class Compare(object): \\"\\"\\"Compare CheckM estimates.\\"\\"\\" def __init__(self): \\"\\"\\"Initialization.\\"\\"\\" pass def run(self, qc_failed_file, checkm_qa_files, output_file): \\"\\"\\"compare CheckM estimates.\\"\\"\\" orig_estimates = {} with open(qc_failed_file) as f: header = f.readline().strip().split('t') acc_index = header.index('Accession') comp_index = header.index('Completeness (%)') cont_index = header.index('Contamination (%)') for line in f: line_split = line.strip().split('t') gid = line_split[acc_index] comp = float(line_split[comp_index]) cont = float(line_split[cont_index]) orig_estimates[gid] = (comp, cont) new_estimates = {} with open(checkm_qa_files) as f: header = f.readline().strip().split('t') comp_index = header.index('Completeness') cont_index = header.index('Contamination') for line in f: line_split = line.strip().split('t') gid = line_split[0].replace('_ncbi_proteins', '') comp = float(line_split[comp_index]) cont = float(line_split[cont_index]) new_estimates[gid] = (comp, cont) fout = open(output_file, 'w') fout.write('AccessiontOriginal completenesstNew completenesstOriginal contaminationtNew contaminationn') for gid in new_estimates: orig_comp, orig_cont = orig_estimates[gid] new_comp, new_cont = new_estimates[gid] orig_quality = orig_comp - 5*orig_cont if orig_quality >= 50: continue new_quality = new_comp - 5*new_cont if new_quality < 50: continue if (new_comp - orig_comp > 5 or new_cont - orig_cont < -1): print(gid, orig_comp, new_comp, orig_cont, new_cont) fout.write('%st%.2ft%.2ft%.2ft%.2fn' % (gid, orig_comp, new_comp, orig_cont, new_cont)) fout.close() if __name__ == '__main__': print(__prog_name__ + ' v' + __version__ + ': ' + __prog_desc__) print(' by ' + __author__ + ' (' + __email__ + ')' + 'n') parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter) parser.add_argument('qc_failed_file', help='file indicating genomes that failed QC') parser.add_argument('checkm_qa_files', help='file with alternative CheckM estimates') parser.add_argument('output_file', help='output directory') args = parser.parse_args() try: p = Compare() p.run(args.qc_failed_file, args.checkm_qa_files, args.output_file) except SystemExit: print(\\"nControlled exit resulting from an unrecoverable error or warning.\\") except: print(\\"nUnexpected error:\\", sys.exc_info()[0]) raise"},{"prompt":"Write a Python function that takes in a list of elements and removes all the duplicate elements. [1, 2, 2, 3, 3, 3]","completion":"def remove_duplicates(nums): new_list = [] for num in nums: if num not in new_list: new_list.append(num) return new_list result = remove_duplicates([1, 2, 2, 3, 3, 3]) print(result)"},{"prompt":"Generate a Python script to solve a given system of linear equations. 2x + 3y = 1 5x + 6y = 2","completion":"import numpy as np # vector of coefficients a = np.array([[2,3], [5,6]]) # constants vector b = np.array([1, -2]) # printing augmented matrix print (\\"Augmented matrix:\\") for i in range(2): l1 = np.concatenate((a[i], [b[i]])) print (l1) # Calculating inverse of coefficient matrix inverse_a = np.linalg.inv(a) # Calculating value of variables x = np.dot(inverse_a, b) # printing required solution print (\\"Solution:\\") print (\\"x = {}\\".format(x[0])) print (\\"y = {}\\".format(x[1]))"},{"prompt":"Code a Python program to classify elements in a provided array into two categories, odd and even. [1, 2, 3, 4, 5, 6]","completion":"def classify_elements(arr): odd = [] even = [] for x in arr: if x % 2 == 0: even.append(x) else: odd.append(x) return (odd, even) elements = [1, 2, 3, 4, 5, 6] result = classify_elements(elements) print(\\"Odd Elements:\\") print(result[0]) print(\\"Even Elements:\\") print(result[1])"},{"prompt":"Suggest a Python generator for all possible combinations of r elements in a list.","completion":"def combination_generator(lst, r): # Initialize empty list combinations = [] # Create a loop to pick every element for i in range(len(lst)): # Create a loop to create permutations # of the picked elements for j in combinations: s = j[:] s.append(lst[i]) if len(s) == r: combinations.append(s) elif len(s) < r: combinations.append(s) for k in range(i+1, len(lst)): s = s[:] s.append(lst[k]) if len(s) == r: combinations.append(s) return combinations"},{"prompt":"Write a python program to evaluate the Euclidean distance between two lists of numbers list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"def euclidean_distance(list1, list2): dist = 0.0 for i in range(len(list1)): dist += (list1[i] - list2[i]) ** 2 return (dist ** 0.5) list1 = [1, 2, 3] list2 = [4, 5, 6] print(\\"Euclidean distance between lists:\\") print(euclidean_distance(list1, list2))"},{"prompt":"Write a query to perform a sentiment analysis using Natural Language Processing in SQL Table containing tweets with three columns Tweet ID, tweet body and sentiment score.","completion":"SELECT TweetID, TweetText, sentimentScore FROM TweetTable WHERE sentimentScore = FN_SentimentAnalysis(TweetText); FN_SentimentAnalysis(input VARCHAR) AS BEGIN DECLARE @Result int; EXEC sp_execute_external_script @language = N'python', @script = N'import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer nltk.download(\\"vader_lexicon\\") sid = SentimentIntensityAnalyzer() output_data_1 = sid.polarity_scores(InputDataSet.inputvalue)[\\"compound\\"]', @input_data_1 = N'SELECT @Input as inputvalue', @params = N'@Result INT OUTPUT', @Result = @Result OUTPUT; RETURN @Result; END;"},{"prompt":"Suggest a Python library to monitor the performance of this system A distributed system that processes large amounts of data on multiple node","completion":"The Python library 'celery' can be used to monitor the performance of a distributed system. It provides scalability and concurrency capabilities to handle large amounts of data by distributing tasks across multiple nodes. It also offers task monitoring and management through custom metrics and performance logs."},{"prompt":"Create a class in Python which implements a linked list data structure.","completion":"# Node class class Node: def __init__(self, data): self.data = data self.next = None # LinkedList class class LinkedList: def __init__(self): self.head = None def is_empty(self): return self.head == None def add(self, data): node = Node(data) node.next = self.head self.head = node def remove(self): if self.is_empty(): return None data = self.head.data self.head = self.head.next return data"},{"prompt":"This code is a Python module that defines a class called GoogledriveCom which is a hoster plugin for the website drive.google.com. To use this plugin, import the module and create an instance of the GoogledriveCom class. The instance has a method called handleFree which takes a pyfile argument and returns a download link. The module also defines a function called getInfo which creates an instance of the GoogledriveCom class and returns information about the plugin.","completion":"# -*- coding: utf-8 -* # # Test links: # https://drive.google.com/file/d/0B6RNTe4ygItBQm15RnJiTmMyckU/view?pli=1 import re import urlparse from module.plugins.internal.SimpleHoster import SimpleHoster, create_getInfo from module.utils import html_unescape class GoogledriveCom(SimpleHoster): __name__ = \\"GoogledriveCom\\" __type__ = \\"hoster\\" __version__ = \\"0.12\\" __pattern__ = r'https?://(?:www.)?(drive|docs).google.com/(file/d/w+|uc?.*id=)' __config__ = [(\\"use_premium\\", \\"bool\\", \\"Use premium account if available\\", True)] __description__ = \\"\\"\\"Drive.google.com hoster plugin\\"\\"\\" __license__ = \\"GPLv3\\" __authors__ = [(\\"zapp-brannigan\\", \\"fuerst.reinje@web.de\\")] DISPOSITION = False #: Remove in 0.4.10 NAME_PATTERN = r'(?:<title>|class=\\"uc-name-size\\".*>)(?P<N>.+?)(?: - Google Drive</title>|</a> ()' OFFLINE_PATTERN = r'align=\\"center\\"><p class=\\"errorMessage\\"' LINK_FREE_PATTERN = r'\\"([^\\"]+uc?.*?)\\"' def setup(self): self.multiDL = True self.resumeDownload = True self.chunkLimit = 1 def handleFree(self, pyfile): for _i in xrange(2): m = re.search(self.LINK_FREE_PATTERN, self.html) if m is None: self.error(_(\\"Free download link not found\\")) else: link = html_unescape(m.group(1).decode('unicode-escape')) if not urlparse.urlparse(link).scheme: link = urlparse.urljoin(\\"https://docs.google.com/\\", link) direct_link = self.directLink(link, False) if not direct_link: self.html = self.load(link, decode=True) else: self.link = direct_link break getInfo = create_getInfo(GoogledriveCom)"},{"prompt":"Given a subset of Wikipedia articles about programming languages, write a Prolog program that returns a list of articles that contain at least one link to another article. Wikipedia articles about Java, JavaScript, Python, C++, C#","completion":"articles([\\"Java\\", \\"JavaScript\\", \\"Python\\", \\"C++\\", \\"C#\\"]). links(Article_A, Article_B) :- articles([Article_A, Article_B]), Article_A = Article_B. %% Returns a list of articles that contain at least one link. linked_articles(T) :- articles(A), findall(X, links(X, _), T)."},{"prompt":"mplement a program to delete an element from the given array. [1, 2, 3, 4, 5]","completion":"# Python program to delete an element from a given array arr = [1, 2, 3, 4, 5] # function to delete an element from the array def deleteElem(arr, n): # Used in conjunction with remove # to only delete one element x = 0 # Iterate the array and search for # the element to be deleted for i in range (0, n): if arr[i] == x: break # If element found, delete the # element using pop() if i < n: arr.pop(i) # Print the array after deletion for i in range(0, n-1): print(arr[i], end=\\" \\") # Driver program deleteElem(arr, 5)"},{"prompt":"Generate a Python program to search an array of strings and return the string that contains a given substring. array = [apple, banana, pear, kiwi] query = ana","completion":"def searchArray(array, query): results = [] for string in array: if query in string: results.append(string) return results array = [\\"apple\\", \\"banana\\", \\"pear\\", \\"kiwi\\"] query = \\"ana\\" print(searchArray(array, query))"},{"prompt":"Write a Python function to generate a multiplication table for a given number. Number: 9","completion":"def generate_table(num): # print the table heading print(\\"MULTIPLICATION TABLE FOR {}\\".format(num)) # generate the table for i in range(1, 11): print(\\"{} x {} = {}\\".format(num, i, num*i)) # generate table for 9 generate_table(9)"},{"prompt":"Write a Python program to clean a text corpus, transforming it into a bag of words. The cat in the hat.","completion":"corpus = \\"the cat in the hat\\" words = corpus.lower().split() bag_of_words = set(words) print(bag_of_words) # Output: {'the', 'in', 'cat', 'hat'}"},{"prompt":"Write a Python program to generate the prime numbers between n and m, where n and m are entered as input. 5, 14","completion":"def generate_primes(m, n): for i in range(m, n + 1): is_prime = True for j in range(2, i): if i % j == 0: is_prime = False if is_prime: print(i) m = int(input(\\"Enter the start range: \\")) n = int(input(\\"Enter the end range: \\")) print(\\"Prime numbers between {} and {} are: \\".format(m, n)) generate_primes(m, n)"},{"prompt":"Build a web crawler in Python.","completion":"import requests from bs4 import BeautifulSoup def web_crawler(url): page=requests.get(url) soup=BeautifulSoup(page.content, 'html.parser') for link in soup.findAll('a'): print(link.get('href'))"},{"prompt":"Develop an algorithm in Python that finds the minimum element from a given array. [14, 7, 25, 16]","completion":"def findMin(arr): # Initialize minimum element as first # element of array min = arr[0] # Loop through the array and get # the current element for i in range(len(arr)): if arr[i] < min: min = arr[i] return min arr = [14, 7, 25, 16] print(findMin(arr))"},{"prompt":"Create an algorithm in Python to analyze a given list of numbers and identify patterns, if any. [7,8,10,15,20,25,30,31]","completion":"def find_pattern(lst): pattern_list = [] for i in range(len(lst) - 1): diff = abs(lst[i] - lst[i + 1]) pattern_list.append(diff) # Check for increasing pattern increasing = True for j in range(len(pattern_list) - 1): if pattern_list[j] > pattern_list[j + 1]: increasing = False # Check for constant pattern constant = True for k in range(len(pattern_list) - 1): if pattern_list[k] != pattern_list[k + 1]: constant = False # Check for repeating pattern repeating = True for l in range(len(pattern_list) - 2): if pattern_list[l] != pattern_list[l + 2]: repeating = False if increasing: return \\"Increasing\\" elif constant: return \\"Constant\\" elif repeating: return \\"Repeating\\" else: return None lst = [7,8,10,15,20,25,30,31] print(find_pattern(lst))"},{"prompt":"Can you build a decision tree classifier using Python? Example: Feature = ['Outlook', 'Temperature', 'Humidity', 'Wind'] Label = ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No'] Data = [['Rain', 'Hot', 'High', 'Weak'], ['Rain', 'Hot', 'High', 'Strong'], ['Overcast', 'Hot', 'High', 'Weak'], ['Sunny', 'Mild', 'High', 'Weak'], ['Sunny', 'Cool', 'Normal', 'Weak'], ['Sunny', 'Cool', 'Normal', 'Strong'], ['Overcast', 'Cool', 'Normal', 'Strong'], ['Rain', 'Mild', 'High', 'Weak'], ['Rain', 'Cool', 'Normal', 'Weak'], ['Sunny', 'Mild', 'Normal', 'Weak'], ['Rain', 'Mild', 'Normal', 'Weak'], ['Sunny', 'Mild', 'High', 'Strong'], ['Overcast', 'Mild', 'High', 'Strong'], ['Overcast', 'Hot', 'Normal', 'Weak']]","completion":"import pandas as pd from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import train_test_split from sklearn import metrics feature_names = ['Outlook', 'Temperature', 'Humidity', 'Wind'] label = ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No'] data = [['Rain', 'Hot', 'High', 'Weak'], ['Rain', 'Hot', 'High', 'Strong'], ['Overcast', 'Hot', 'High', 'Weak'], ['Sunny', 'Mild', 'High', 'Weak'], ['Sunny', 'Cool', 'Normal', 'Weak'], ['Sunny', 'Cool', 'Normal', 'Strong'], ['Overcast', 'Cool', 'Normal', 'Strong'], ['Rain', 'Mild', 'High', 'Weak'], ['Rain', 'Cool', 'Normal', 'Weak'], ['Sunny', 'Mild', 'Normal', 'Weak'], ['Rain', 'Mild', 'Normal', 'Weak'], ['Sunny', 'Mild', 'High', 'Strong'], ['Overcast', 'Mild', 'High', 'Strong'], ['Overcast', 'Hot', 'Normal', 'Weak']] df = pd.DataFrame(data, columns = feature_names) x_train, x_test, y_train, y_test = train_test_split(df,label,test_size=0.3,random_state=1) clf = DecisionTreeClassifier() clf = clf.fit(x_train, y_train) prediction = clf.predict(x_test) print(\\"Accuracy:\\", metrics.accuracy_score(y_test, prediction))"},{"prompt":"Write a fucntion in Python to implement binary search. Not applicable","completion":"def binary_search(list, item): low = 0 high = len(list) - 1 while low <= high: mid = (low + high) // 2 guess = list[mid] if guess == item: return mid if guess > item: high = mid - 1 else: low = mid + 1 return None"},{"prompt":"Generate a correct Python program to copy a list. list_x = [1,2,3,4]","completion":"def copy_list(list_x): list_y = list_x [:] return list_y"},{"prompt":"Develop an efficient Python program to find the longest common subsequence from two given strings. String1 = ACDFSCD String2 = ACBCD","completion":"def LongestCommonSubsequence(X, Y, m, n): if m == 0 or n == 0: return 0; elif X[m-1] == Y[n-1]: return 1 + LongestCommonSubsequence(X, Y, m-1, n-1); else: return max(LongestCommonSubsequence(X, Y, m, n-1), LongestCommonSubsequence(X, Y, m-1, n)); # Driver Code X = \\"ACDFSCD\\" Y = \\"ACBCD\\" m = len(X) n = len(Y) print(LongestCommonSubsequence(X, Y, m, n))"},{"prompt":"Create a command line calculator in Python to perform basic arithmetic operations. Not applicable","completion":"import sys def add(x, y): return x + y def substract(x, y): return x - y def multiply(x, y): return x * y def divide(x, y): return x / y # input from command line input_str = sys.argv operation = input_str[1] num1 = int(input_str[2]) num2 = int(input_str[3]) if operation == 'add': print(add(num1, num2)) elif operation == 'substract': print(substract(num1, num2)) elif operation == 'multiply': print(multiply(num1, num2)) elif operation == 'divide': print(divide(num1, num2)) else: print('Invalid Operation')"},{"prompt":"mplement a basic algorithm in Python for encrypting a string. Not applicable","completion":"def encrypt(message): encrypted_message = \\"\\" for character in message: # increment the character number to get its encrypted form encrypted_message += chr(ord(character) + 2) return encrypted_message if __name__ == \\"__main__\\": message = \\"Hello World\\" encrypted_message = encrypt(message) print(encrypted_message) output: Jgnnq Yqtnf"},{"prompt":"Generate a random full name with Python. Not applicable","completion":"import random # List of first names first_names = ['John', 'Jane', 'Jack', 'Jill', 'Joe', 'Jenny'] # List of lastnames last_names = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis'] # Generate a random full name random_first_name = random.choice(first_names) random_last_name = random.choice(last_names) random_full_name = random_first_name + ' ' + random_last_name print(random_full_name) # Jane Smith"},{"prompt":"Create a menubased interface in Python to interact with the user.","completion":"import os def print_menu(): os.system('clear') print('') print(' ========== MENU ========== ') print('=================================') print('1. Enter Customer Data') print('2. Update Customer Data') print('3. Delete Customer Data') print('4. Exit') print('') def get_input(): choice = int(input('Enter your choice [1-4] : ')) return choice if __name__ == '__main__': # Initialize menu print_menu() # Get user input choice = get_input() # Run User Choice if choice == 1: print('Option 1 Selected!') elif choice == 2: print('Option 2 Selected!') elif choice == 3: print('Option 3 Selected!') elif choice == 4: print('Exiting...') else: print('Invalid Choice!')"},{"prompt":"Design a system in Python that can recognize speech and generate text. Sample audio file containing speech","completion":"Imports: import speech_recognition as sr # Define audio file audio_file = \\"sample_audio.wav\\" # Create a recognition instance recognizer = sr.Recognizer() # Load audio file with sr.AudioFile(audio_file) as source: audio_data = recognizer.record(source) # Recognize speech recognized_text = recognizer.recognize_google(audio_data) # Print result print(recognized_text)"},{"prompt":"Use a Python program to print out the first five odd numbers.","completion":"for num in range(1,11): if num % 2 != 0: print(num)"},{"prompt":"Write a Python script that implements a logistic regression classifier for a twoclass dataset. No inpu","completion":"import numpy as np class LogisticRegression: def __init__(self, X, y): self.X = X self.y = y self.w = np.random.randn(X.shape[1]+1) def sigmoid(self, z): return 1 / (1 + np.exp(-z)) def fit(self, epochs): for _ in range(epochs): z = np.dot(self.X, self.w[1:]) + self.w[0] h = self.sigmoid(z) gradient = np.dot(self.X.T, (h - self.y)) self.w[1:] += gradient bias = np.sum(h - self.y) self.w[0] += bias def predict(self, X): z = np.dot(X, self.w[1:]) + self.w[0] h = self.sigmoid(z) return h >= 0.5"},{"prompt":"Create a Python script that updates a MongoDB collection with a set of documents. [ { _id: 1, title: Task 1 }, { _id: 2, title: Task 2 } ]","completion":"import pymongo # connect to MongoDB client = pymongo.MongoClient('localhost', 27017) db = client['my_database'] collection = db['my_collection'] # create a list of documents documents = [ { \\"_id\\": 1, \\"title\\": \\"Task 1\\" }, { \\"_id\\": 2, \\"title\\": \\"Task 2\\" } ] # update the collection result = collection.insert_many(documents)"},{"prompt":"Create a function in Python to extract words from a sentence.","completion":"def extract_words(sentence): return sentence.split()"},{"prompt":"Python, write a function to create a dictionary using the given two lists. keys = [name, age, number] values = [John, 32, 258]","completion":"def create_dict(keys, values): return {key: val for key, val in zip(keys, values)}"},{"prompt":"To retrieve realtime air pollution data for a specific location in Korea, follow these steps: 1. Obtain a service key from data.go.kr. 2. Open the mdust_pusan.py file in Python. 3. Change the location variable in the misaemunji function to the desired location (e.g. '경기'). 4. Run the script using the command python mdust_pusan.py. 5. The script will output the realtime air pollution data for the specified location and station in the console.","completion":"# -*- coding: utf-8 -*- # Author : https://github.com/kmlee408 # https://github.com/jeonghoonkang ''' 부산 URL= http://openapi.airkorea.or.kr/openapi/services/rest/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty?serviceKey=fCRWi0DoCfoCPMHyDwai3trva10y4qb8mh9aysoHzvLKDWw6Q2bWOsvuM4%2BsRdvE4dPiKqBFD7vj7%2FM2noCe2g%3D%3D&ver=1.3&pageSize=10&pageNo=1&sidoName=%EB%B6%80%EC%82%B0&startPage=1&numOfRows=100 실행 방법= python mdust_pusan.py (지역을 바꾸고 싶으면 misaemunji 함수 안에 location = '경기' 와 같은 식으로 변경) (측정 가능 지역: 서울, 부산, 대구, 인천, 광주, 대전, 울산, 경기, 강원, 충북, 충남, 전북, 전남, 경북, 경남, 제주, 세종) ''' import requests from urllib import urlencode, quote_plus from bs4 import BeautifulSoup import pandas as pd import keytxt # 서비스키는 data.go.kr 에서 받아야 함 # https://www.data.go.kr/dataset/15000581/openapi.do?mypageFlag=Y service_key = keytxt.key def misaemunji(service_key, location=None, spot=None): #location으로 가능한 것: 서울, 부산, 대구, 인천, 광주, 대전, 울산, 경기, 강원, 충북, 충남, 전북, 전남, 경북, 경남, 제주, 세종 #시도별 실시간 측정 조회 api URL ='http://openapi.airkorea.or.kr/openapi/services/rest/ArpltnInforInqireSvc/getCtprvnRltmMesureDnsty?serviceKey=' # URL 인자 설정 및 인코딩 queryParams = '&' + urlencode({quote_plus('numOfRows') : '100', # 최대로 설정 quote_plus('pageSize'): '10', quote_plus('pageNo') : '1', quote_plus('startPage') :'1', quote_plus('sidoName') : location, quote_plus('ver') : '1.3' }) if location == None : exit ('you shoud write location such like 부산') r = requests.get(URL+service_key+queryParams) html = r.text soup = BeautifulSoup(html, 'html.parser') #parsing info_ = soup.select('item') misae_station = {} for info__ in info_: datetime_ = info__.datatime.text list_ = [str(info__.pm10value.text),str(info__.pm25value.text)] # list 미세먼지 측정값 2가지 misae_station[info__.stationname.text.encode('utf-8')] =list_ # misae_station 은 기상대 이름별로 pm2.5, pm10 데이터를 담고 있음 #dataframe 생성 index_list = ['미세먼지10','초미세먼지2.5'] df = pd.DataFrame(misae_station, index = index_list) if spot != None : if spot in misae_station: ''' print('측정시간 : ' + str(datetime_)), 2018-11-08 20:00 print('측정지역 : ') print(location) print(spot) print('(단위 : ㎍/㎥)') print misae_station[spot][1] ''' return (str(datetime_), str(spot), 'pm2.5', misae_station[spot][1] ) def get_public_mise(loc='서울', station='강남구'): kangnam = misaemunji(service_key, location=loc, spot=station) return kangnam if __name__ == '__main__': kangnam = misaemunji(service_key, location='서울', spot='강남구') #location으로 가능한 것: 서울, 부산, 대구, 인천, 광주, 대전, 울산, 경기, 강원, 충북, 충남, 전북, 전남, 경북, 경남, 제주, 세종 print kangnam"},{"prompt":"Design an algorithm using Python to detect whether two given strings are anagrams or not. s1=listen s2=silent","completion":"def is_anagram(s1, s2): # Strip the strings of white space and convert to lower case s1 = s1.replace(\\" \\", \\"\\").lower() s2 = s2.replace(\\" \\", \\"\\").lower() if len(s1) != len(s2): return False # Count the number of each character in the string count = {} for char in s1: if char not in count: count[char] = 1 else: count[char] += 1 # Check if the characters present in s2 too for char in s2: if char not in count: return False if count[char] == 0: return False count[char] -= 1 return True s1=\\"listen\\" s2=\\"silent\\" print(is_anagram(s1, s2))"},{"prompt":"Create a Python script that runs a Monte Carlo simulation to generate a set of random points. <no input>","completion":"import random def monte_carlo_simulation(n): points = [] for _ in range(n): x = random.uniform(-1, 1) y = random.uniform(-1, 1) points.append((x, y)) return points result = monte_carlo_simulation(50) print(result)"},{"prompt":"Write a Python program to generate an HTML page that displays a table of all the posts in a given WordPress blog. Not applicable","completion":"import requests # Get the blog post data as JSON from the WordPress API posts = requests.get('https://example.wordpress.com/wp-json/wp/v2/posts') posts = posts.json() # Generate the HTML page with the table html = '<html><head><title>Posts</title></head><body><table>n' html += '<tr><th>Title</th><th>Date</th></tr>n' for post in posts: html += '<tr><td>' + post['title']['rendered'] html += '</td><td>' + post['date'] + '</td></tr>n' html += '</table></body></html>' # Write the HTML file f = open('posts.html', 'w') f.write(html) f.close()"},{"prompt":"Write a python program to convert degree Celsius to Fahrenheit. c = 22","completion":"def convert_celsius_to_fahrenheit(c): f = (c * (9/5)) + 32 return f f = convert_celsius_to_fahrenheit(c) print('{} degree Celsius = {} degree Fahrenheit'.format(c, f))"},{"prompt":"Create an object in Python that includes data from a list comprehension. my_list = [1, 2, 3, 4, 5]","completion":"my_object = {x:x for x in my_list} print(my_object)"},{"prompt":"Use a GPT model to generate a Python function for calculating the area of a triangle. Not applicable","completion":"def area_of_triangle(base, height): return 0.5 * base * height # Calculate the area of triangle a = area_of_triangle(5, 4) print('The area of the triangle is: ', a)"},{"prompt":"Create a function in Python that prints out all prime numbers between 1 and a given number.","completion":"def print_primes(n): for num in range(2, n + 1): isPrime = True for i in range(2, num): if (num % i == 0): isPrime = False if isPrime: print(num)"},{"prompt":"Write a function for reversing a string in Python.","completion":"def reverse_string(s): return s[::-1] if __name__ == '__main__': s = 'Hello World!' print(reverse_string(s))"},{"prompt":"Generate a Python code to take user input and store it in a list. Not applicable","completion":"user_input = [] while True: user_in = input(\\"Please enter your input: \\") user_input.append(user_in) print(user_input)"},{"prompt":"Create a Python program to list all the integers between a given range input. Start: 3 End:10","completion":"def list_integers(start, end): integers_list=[] while (start <= end): integers_list.append(start) start = start + 1 return integers_list print(\\"The list of integers in the given range is:\\") result = list_integers(3,10) print(result)"},{"prompt":"Design a web scraper using Python to scrape data from a given ecommerce website.","completion":"import requests from bs4 import BeautifulSoup # Scrape webpage with requests website_url = <url of the webpage> r = requests.get(website_url) # Parse webpage using BeautifulSoup soup = BeautifulSoup(r.content, 'html.parser') # Find specific elements with tags, ids, classes etc data = soup.find_all(<element tag/id/class>) # Store scraped data <store data in a list/dictionary>"},{"prompt":"Create a custom script to detect and install all MetaToolKit dependencies on Ubuntu. Use the given code as a reference. The script should check for Python essentials and required packages such as numpy, sympy, xlrd, xlwt, matplotlib, PyQt4, Bio, nose, docx, libsbml, cbmpy, java, perl, and blastall. It should also check for optional/recommended packages such as git, cython, libxml2dev, libxsltdev, ipython, ipythonnotebook, pythonsuds, and pythonflask. The script should generate a bash script that can be run to install the dependencies. The bash script should prompt the user for confirmation before installing the dependencies.","completion":"# Detect all MetaToolKit depencies on Ubuntu and create a custom script to install them. # Tested on Ubuntu 14.04, 16.04 # Author Brett G. Olivier (bgoli@users.sourceforge.net) # (C) All rights reserved, Brett G. Olivier, Amsterdam 2016. import os, subprocess, itertools, stat UBUNTU = CONDA = False try: print(os.sys.argv) arg = os.sys.argv[1] except: arg = 'UBUNTU' if arg == 'UBUNTU': UBUNTU = True elif arg == 'CONDA': CONDA = True else: print('nPlease call script with CONDA as argument for Anaconda install script, defaulting to UBUNTU') UBUNTU = True res = {'Required' : {}, 'Optional' : {} } # First lets check for some Python essentials reqcnt = itertools.count(1,1) optcnt = itertools.count(1,1) # this should just be there for any sane python build environment if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install build-essential g++ gfortran python python-dev' if CONDA: pass #res['Required'][reqcnt.next()] = 'conda update -y conda # if this is the only required package ignore it' try: import pip except ImportError: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install python-pip' try: import numpy except ImportError: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install python-numpy' try: import sympy except ImportError: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install python-sympy' try: import xlrd except ImportError: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install python-xlrd' try: import xlwt except ImportError: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install python-xlwt' try: import matplotlib except ImportError: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install python-matplotlib' try: import PyQt4 except ImportError: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install python-qt4' elif CONDA: res['Required'][reqcnt.next()] = 'conda install -y pyqt=4.11.4' try: import Bio except ImportError: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install python-biopython' elif CONDA: res['Required'][reqcnt.next()] = 'conda install -y biopython' try: import nose except ImportError: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install python-nose' try: import docx except ImportError: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -EH pip install docx' elif CONDA: res['Required'][reqcnt.next()] = 'pip install docx' try: import libsbml if libsbml.LIBSBML_VERSION < 51201: print('nPlease update to the latest version of libSBML.n') raise ImportError except ImportError: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install libxml2 libxml2-dev libxslt-dev zlib1g zlib1g-dev bzip2 libbz2-dev' res['Required'][reqcnt.next()] = 'sudo -EH pip install --upgrade python-libsbml' elif CONDA: res['Required'][reqcnt.next()] = 'conda install -c SBMLTeam -y python-libsbml' try: import cbmpy except: if UBUNTU: res['Required'][reqcnt.next()] = 'sudo -EH pip install --upgrade cbmpy' res['Required'][reqcnt.next()] = 'sudo python -c \\"import cbmpy\\"' if CONDA: res['Required'][reqcnt.next()] = 'pip install cbmpy' res['Required'][reqcnt.next()] = 'python -c \\"import cbmpy\\"' try: out = subprocess.call(['java', '-version']) except (OSError): if UBUNTU or CONDA: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install default-jre' try: out = subprocess.call(['perl', '-v']) except (OSError): if UBUNTU or CONDA: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install perl' p_script = \\"\\"\\" my rc = 0; rc = eval { require XML::Parser; XML::Parser->import(); 1; }; if (rc){ exit 0 } else { exit 1 } \\"\\"\\" try: PF = file('_test.pl', 'w') PF.write(p_script) PF.close() out = int(subprocess.call(['perl', '_test.pl'])) if out: raise OSError except (OSError): if UBUNTU or CONDA: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install libxml-parser-perl' try: out = subprocess.call(['blastall']) except (OSError): if UBUNTU or CONDA: res['Required'][reqcnt.next()] = 'sudo -E apt-get -y install blast2' # Optional/recommended # https://github.com/bgoli/cbmpy-glpk if UBUNTU: res['Optional'][optcnt.next()] = 'sudo apt-get -y install git cython libxml2-dev libxslt-dev' try: import IPython except ImportError: if UBUNTU: res['Optional'][optcnt.next()] = 'sudo -E apt-get -y install ipython ipython-notebook' try: import suds except ImportError: if UBUNTU: res['Optional'][optcnt.next()] = 'sudo -E apt-get -y install python-suds' elif CONDA: res['Optional'][optcnt.next()] = 'pip install suds' try: import flask except ImportError: if UBUNTU: res['Optional'][optcnt.next()] = 'sudo -E apt-get -y install python-flask' if UBUNTU or CONDA: bash_script=\\"\\"\\" while true; do read -p \\"Do you wish to install *{}* MetaToolkit dependencies? [y/n]: \\" yn case yn in [Yy]* ) echo \\"Installing ...\\"; break;; [Nn]* ) exit;; * ) echo \\"Please enter y/n.\\";; esac done \\"\\"\\" bash_script=\\"\\"\\" # {} \\"\\"\\" output = '#!/bin/shnn' output += '#MetaToolkit: Ubuntu system requirements checkn' output += '#=============================================nn' REQUIRE_USER_INPUT = False for r in res: if len(res[r]) > 0: if REQUIRE_USER_INPUT: output += bash_script.format(r) output += '#{}n#{}nn'.format(r, '-'*len(r)) resk = list(res[r]) resk.sort() for k in resk: if k != None: output += '{}n'.format(res[r][k]) output += 'n' output += 'exitnn' fname = 'metatoolkit_install_dependencies.sh' F = file(fname, 'w') F.write(output) F.close() os.chmod(fname, stat.S_IRWXU) print('') print(output) print('nnInstall script (shown above) saved as file: {}nplease examine it carefully and run. Alternatively install individual dependencies manually').format(fname)"},{"prompt":"Construct a Python program to capture the mouse position.","completion":"import pyautogui def get_mouse_pos(): x, y = pyautogui.position() return (x, y)"},{"prompt":"Generate a Python code snippet to find the maximum element in an array.","completion":"def find_max(arr): max = arr[0] for i in range(1, len(arr)): if arr[i] > max: max = arr[i] return max"},{"prompt":"Construct a web scraper in Python to extract address data from a list of websites.","completion":"import requests from bs4 import BeautifulSoup # List of websites urls = [ \\"example1.com\\", \\"example2.com\\", \\"example3.com\\" ] # Database to store the information data = [] # Loop over each website for url in urls: page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') # Get the first address address_div = soup.find('div', class_='address') # Extract the address for line in address_div.findAll('rer'): address = line.string # Add the address to the database data.append(address) # Return the database return data"},{"prompt":"Design an algorithm in Python to check whether two binary trees are the same or not. Not applicable","completion":"def is_same_tree(p, q): if not p and not q: return True if not p or not q: return False if p.val != q.val: return False return is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)"},{"prompt":"Using the provided input, write a Python program to calculate the sum of the digits of a given number. number = 123","completion":"def sum_of_digits(number): result = 0 while number > 0: result += number % 10 number = number // 10 return result if __name__ == '__main__': number = 123 print(sum_of_digits(number))"},{"prompt":"Write a Python function to check whether a number is in the given range. number: 4, range: [2, 4]","completion":"def is_in_range(num, a, b): if num >= a and num <= b: return True else: return False result = is_in_range(4, 2, 4) print(result)"},{"prompt":"Optimise the Python program to reduce the time complexity for finding the maximum element in an array. [5, 10, 15, 20]","completion":"def findMax(arr): max = arr[0] curr_max = arr[0] for i in arr[1:]: curr_max = max = max if max > i else i return curr_max print(findMax([5, 10, 15, 20]))"},{"prompt":"Create a function to invert the keys and values of a dictionary in Python. { apple: 3, banana: 4, carrot: 2 }","completion":"def invert_dictionary(input_dict): output_dict = {} for key, value in input_dict.items(): output_dict[value] = key return output_dict inverted_dict = invert_dictionary({ \\"apple\\": 3, \\"banana\\": 4, \\"carrot\\": 2 }) print(inverted_dict) # {3: 'apple', 4: 'banana', 2: 'carrot'}"},{"prompt":"Construct a python program to print out the number of distinct elements in a string. hello world!","completion":"def count_unique(s): seen = set() count = 0 for character in s: if character not in seen: seen.add(character) count += 1 return count print(count_unique(\\"hello world!\\"))"},{"prompt":"Create a Bash script to run a Python program in the background.","completion":"#!/bin/bash # Run a Python Program in Background # Store the current directory CURRENT_DIR=(pwd) # Execute the python script python CURRENT_DIR/<your_python_script>.py &"},{"prompt":"Design a Python script to print the first 10 even numbers.","completion":"for num in range(0, 20, 2): if num < 10: print(num, end=' ') # Output: 0 2 4 6 8"},{"prompt":"Generate a Python program to calculate the Gross Domestic Product (GDP) of a country. Not applicable","completion":"def calculate_GDP(consumption, investment, government_spending, export, import_): gdp = consumption + investment + government_spending + (export - import_) return gdp consumption = 100 investment = 50 government_spending = 25 export = 20 import_ = 10 print(f\\"The GDP of the country is {calculate_GDP(consumption, investment, government_spending, export, import_)}.\\")"},{"prompt":"Design a Python script to print out the names and ages of people in a given list. [{name: John, age: 30}, {name: Mary, age: 25}, {name: Greg, age: 28}]","completion":"def print_names_and_ages(people): for person in people: print(\\"Name: {}nAge: {}\\".format(person['name'], person['age']))"},{"prompt":"Edit the following Python code to print out Hello World 5 times. print(Hello World)","completion":"for i in range(5): print(\\"Hello World\\")"},{"prompt":"Create a Python script which inputs a sentence and performs POS tagging and letter count for the text using NLTK library. This is an example sentence.","completion":"import nltk sentence = 'This is an example sentence.' words = nltk.word_tokenize(sentence) tagged_words = nltk.pos_tag(words) letter_count = 0 for word in words: letter_count += len(word) print('POS Tags: ', tagged_words) print('Letter Count: ', letter_count)"},{"prompt":"Write a Python program to generate a random permutation of a given sequence. sequence = [1, 2, 3]","completion":"from random import shuffle sequence = [1, 2, 3] shuffle(sequence) print(sequence)"},{"prompt":"Generate a Bash script that runs a Python program. The Python program should receive a string as input, print its size, and then sort the string in alphabetical order. Sample string: Hello, world","completion":"#!/bin/bash # Script to run Python program input_string=\\"Hello, world\\" python <<END input_string=\\"input_string\\" print(\\"Input string:\\", input_string) print(\\"Size of string:\\", len(input_string)) print(\\"Sorted string:\\", ''.join(sorted(input_string))) END"},{"prompt":"Create a module for generating unique tokens in Python. The module should provide a function that takes a length parameter (number of characters) and returns a unique token. length = 15","completion":"import hashlib import string import random def generate_token(length): token_chars = string.ascii_letters + string.digits token = ''.join(random.choice(token_chars) for _ in range(length)) return hashlib.sha256(token.encode('utf-8')).hexdigest() length = 15 token = generate_token(length) print(token) # Output: 830af667b1a5cb6405df21f2d54d46a2"},{"prompt":"Write a Python program to create a 8x8 matrix and fill it with a checkerboard pattern.","completion":"\\"\\"\\" Write a Python program to create a 8x8 matrix and fill it with a checkerboard pattern. \\"\\"\\" # Create a matrix matrix = [[0 for x in range(8)] for y in range(8)] # Fill the matrix with the checkerboard pattern for row in range(8): for col in range(8): if (row + col) % 2 == 0: matrix[row][col] = 0 else: matrix[row][col] = 1 # Output the matrix for row in matrix: print(row)"},{"prompt":"Create a GUI application using Tkinter in Python to calculate the area of a circle with a given radius.","completion":"import tkinter as tk root = tk.Tk() def calculate(): radius = float(entry_radius.get()) area = radius * radius * 3.14 output.config(text=\\"Area = \\" + str(area)) frame = tk.Frame(root) frame.pack() label_radius = tk.Label(frame, text=\\"Radius\\") label_radius.pack(side=tk.LEFT) entry_radius = tk.Entry(frame) entry_radius.pack(side=tk.LEFT) button = tk.Button(frame, text=\\"Calculate\\", command=calculate) button.pack(side=tk.LEFT) output = tk.Label(frame) output.pack(side=tk.BOTTOM) root.mainloop()"},{"prompt":"Create a Python class called 'Person' that contains a name, age, and a method get_age()","completion":"\\"\\"\\" Create a Python class called 'Person' that contains a name, age, and a method get_age() \\"\\"\\" class Person: def __init__(self, name, age): self.name = name self.age = age def get_age(self): return self.age if __name__ == '__main__': p = Person('John', 30) print(p.get_age())"},{"prompt":"Write a Python program to generate a random set of numbers, with each number ranging from 1 to 10","completion":"import random def generate_random_numbers(): results = [] for i in range(10): results.append(random.randint(1, 10)) return results if __name__ == \\"__main__\\": print(generate_random_numbers())"},{"prompt":"Generate a REST API in Python that can retrieve the latest tweets for a given hashtag. Not applicable","completion":"import tweepy import json from flask import Flask,request #Authenticating with Twitter API consumer_key = 'consumer_key' consumer_secret = 'consumer_secret' access_token = 'access_token' access_token_secret = 'access_token_secret' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) #Creating the app app = Flask(name) #Routes @app.route('/tweets') def get_tweets(): hashtag = request.args.get('hashtag') tweets = api.search(q=hashtag, count=100, result_type='recent') return json.dumps([tweet.text for tweet in tweets]) if name == 'main': app.run(debug=True)"},{"prompt":"Generate a code in Python to extract the capital letters from a given string. Hello World!","completion":"def extract_capitals(string): capitals = \\"\\" for character in string: if character.isupper(): capitals += character return capitals # Main program input_string = \\"Hello World!\\" capitals = extract_capitals(input_string) print(capitals)"},{"prompt":"Create a program that uses Django and Python to display a list of books.","completion":"# imports import os import django # set up Django os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings' django.setup() # set up model from myapp.models import book # query database books = book.objects.all() # print books for book in books: print(book.title + ' - ' + book.author)"},{"prompt":"Write a Python program to classify a given data set using a trained model.","completion":"def classify_data(data, model): predictions = model.predict(data) return predictions"},{"prompt":"Write a Python program to produce a string summary of a given text that is no longer than 140 characters. Sample Text: This is a sample text. It contains a few sentences for you to summarize.","completion":"import gensim # Get the sample text text = \\"This is a sample text. It contains a few sentences for you to summarize.\\" # Create a summarization model model = gensim.summarization.summarizer.Summarizer() # Generate the summary summary = model.summarize(text, word_count=140) # Print the summary print(summary) # Output: This is a sample text. It contains a few sentences to summarize. #140characters. #summarymaking. #savewords."},{"prompt":"Construct a code to filter a string for only numerical characters in Python. 4x4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s","completion":"def filter_string(string): filtered_string = '' for c in string: if c.isdigit(): filtered_string += c return filtered_string print(filter_string(\\"4x4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s4s\\"))"},{"prompt":"Can you build an algorithm using Python which shuffles the elements of a list?","completion":"import random def shuffle(list_data): # Loop through the indices of the list for i in range(len(list_data)-1, 0, -1): # Generate a random index random_index = random.randint(0, i) # Swap the elements temp = list_data[i] list_data[i] = list_data[random_index] list_data[random_index] = temp # Return the shuffled list return list_data"},{"prompt":"Create an API endpoint in Python that takes a text string as input and outputs a JSON response with the text reversed. Hello world","completion":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/reverse', methods=['POST']) def reverse(): data = request.get_json() text = data['text'] reversed_text = text[::-1] return jsonify({'reversed_text': reversed_text}) if __name__ == '__main__': app.run()"},{"prompt":"Construct a Python script for finding the second smallest element in a given list.","completion":"def secondSmallestElement(lst): min1 = min(lst[0], lst[1]); min2 = max(lst[0], lst[1]); for i in range(2, len(lst)): if lst[i] < min1: min2 = min1; min1 = lst[i]; return min2;"},{"prompt":"Write a Python program to generate random numbers in a specified range. Range: 0 to 1000","completion":"import random # Generates a random integer between 0 and 1000 x = random.randint(0,1000) print(x)"},{"prompt":"put a text string, and build a function in Python to count the number of vowels in the string. The quick brown fox jumps over the lazy dog","completion":"def countVowels(sentence): vowels = 'aeiouAEIOU' count = 0 for ch in sentence: if ch in vowels: count += 1 return count result = countVowels('The quick brown fox jumps over the lazy dog') print(result)"},{"prompt":"Develop a program to implement a personalised mailing system based on user preferences. user preference","completion":"# python program to implement a personalized mailing system def personalizedMailingSystem(user_preferences): # user preferences is a dictionary # containing the user's preferences # get user's name name = user_preferences[\\"name\\"] # get user's email address email = user_preferences[\\"email\\"] # get user's topic interests topics = user_preferences[\\"topics\\"] # generate personalized emails for the user for topic in topics: message = \\"Hi \\" + name + \\",nnWe hope you're doing well. We wanted to let you know that we've just released new content about \\" + topic + \\". We think you'd be interested in taking a look!nnThanks,nThe mail team n\\" print(\\"Sending email to \\" + email + \\" about \\" + topic) send_email(email, message) # example usage user_preferences = { \\"name\\": \\"John\\", \\"email\\": \\"john@example.com\\", \\"topics\\": [\\"AI\\", \\"Machine Learning\\", \\"Robotics\\"] } personalizedMailingSystem(user_preferences)"},{"prompt":"Create a Python program to parse a list of JSON objects and output a CSV based on the contents of each object [ { name: John, age: 20, country: US }, { name: Jane, age: 25, country: UK }, { name: Jack, age: 30, country: AUS } ]","completion":"import json import csv data = ... # your json data with open('data.csv', 'w') as csvfile: writer = csv.writer(csvfile) writer.writerow(['Name', 'Age', 'Country']) for json_obj in data: name = json_obj['name'] age = json_obj['age'] country = json_obj['country'] writer.writerow([name, age, country])"},{"prompt":"Create a Python function that takes two strings and checks if the second string is a substring of the first. string1 = Hello world! string2 = world","completion":"def check_substring(string1, string2): if string2 in string1: return True else: return False # example result = check_substring(\\"Hello world!\\", \\"world\\") print(result)"},{"prompt":"Create a python command line interface to search a given array. Six colors: red, orange, yellow, green, blue, purple","completion":"def search_colors(): colors = [\\"red\\", \\"orange\\", \\"yellow\\", \\"green\\", \\"blue\\", \\"purple\\"] query = input(\\"What color would you like to search for? \\") if query in colors: print(\\"The color exists in the list.\\") else: print(\\"The color does not exist in the list.\\")"},{"prompt":"Create a set of Python functions to manipulate strings: one to reverse a string and one to capitalize a string.","completion":"def reverseString(s): return s[::-1] def capitalizeString(s): return s.capitalize()"},{"prompt":"Write an algorithm in Python to sort a given list of strings in alphabetical order. [‘cat’, ‘dog’, ‘apple’, ‘zebra’]","completion":"def sort_string_list(strings): strings.sort() return strings my_list = ['cat', 'dog', 'apple', 'zebra'] print(sort_string_list(my_list))"},{"prompt":"Develop a Python script to extract the minimum of two numbers. Two numbers: 2 and 5","completion":"def min(num1, num2): if num1 < num2: return num1 else: return num2 print(min(2, 5))"},{"prompt":"Design a class in Python representing a bank account.","completion":"class BankAccount: def __init__(self, username, balance): self.username = username self.balance = balance def show_balance(self): print(f\\"Balance of {self.username}'s account is {self.balance}\\") def deposit(self, amount): if amount > 0: self.balance += amount print(f\\"{amount} was added to the balance. Current balance is {self.balance}\\") else: print(\\"Cannot deposit negative value\\") def withdraw(self, amount): if amount > 0: if amount <= self.balance: self.balance -= amount print(f\\"{amount} was withdrawn from the balance. Current balance is {self.balance}\\") else: print(\\"Cannot withdraw more than current balance\\") else: print(\\"Cannot withdraw negative value\\")"},{"prompt":"Use a genetic algorithm to optimize a simple OOP program written in Python with two classes, Student and Teacher. import random class Teacher: def __init__(self): self.rating = random.random() class Student: def __init__(self): self.gpa = random.random() teacher = Teacher() student = Student()","completion":"import random import numpy as np from deap import base from deap import creator from deap import tools # Create a new type with a fitness attribute creator.create(\\"FitnessMax\\", base.Fitness, weights=(1.0,)) # Provide a new type, inheriting from the list type creator.create(\\"Individual\\", list, fitness=creator.FitnessMax) # Create the toolbox toolbox = base.Toolbox() # Fill the toolbox with the attribute toolbox.register(\\"attr_float\\", random.random) # Create the structure with two classes, Student and Teacher def createStructure(student_attributes, teacher_attributes): structure = [] for i in range(len(student_attributes)): structure.append(student_attributes[i]) for i in range(len(teacher_attributes)): structure.append(teacher_attributes[i]) return structure # Create the individual toolbox.register(\\"individual\\", tools.initIterate, creator.Individual, toolbox.attr_float) # Set the evaluation function def evaluateIndividual(individual): student_attributes = [] teacher_attributes = [] for i in range(len(individual)): if i < len(individual)/2: student_attributes.append(individual[i]) else: teacher_attributes.append(individual[i]) student_score = 0 teacher_score = 0 for attr in student_attributes: student_score += attr for attr in teacher_attributes: teacher_score += attr return student_score, teacher_score # Create the population toolbox.register(\\"population\\", tools.initRepeat, list, toolbox.individual) # Create the genetic operators toolbox.register(\\"mate\\", tools.cxTwoPoint) toolbox.register(\\"mutate\\", tools.mutGaussian, mu=0.0, sigma=1.0, indpb=0.2) toolbox.register(\\"select\\", tools.selTournament, tournsize=3) # Apply the evolutionary algorithm def main(): student_attr = [toolbox.attr_float() for i in range(2)] teacher_attr = [toolbox.attr_float() for i in range(2)] structure = createStructure(student_attr, teacher_attr) pop = toolbox.population(n=50) CXPB, MUTPB, NGEN = 0.5, 0.2, 40 fitnesses = list(map(toolbox.evaluate, pop)) for ind, fit in zip(pop, fitnesses): ind.fitness.values = fit for g in range(NGEN): offspring = toolbox.select(pop, len(pop)) offspring = list(map(toolbox.clone, offspring)) for child1, child2 in zip(offspring[::2], offspring[1::2]): if random.random() < CXPB: toolbox.mate(child1, child2) del child1.fitness.values del child2.fitness.values for mutant in offspring: if random.random() < MUTPB: toolbox.mutate(mutant) del mutant.fitness.values invalid_ind = [ind for ind in offspring if not ind.fitness.valid] fitnesses = map(toolbox.evaluate, invalid_ind) for ind, fit in zip(invalid_ind, fitnesses): ind.fitness.values = fit pop[:] = offspring best_ind = tools.selBest(pop, 1)[0] print(f\\"Best individual is {best_ind}, Fitness: {best_ind.fitness.values}\\") if __name__ == \\"__main__\\": main()"},{"prompt":"dle the following errors in a python program Type Error, Key Error and Value Error.","completion":"try: # Code that might raise an error except TypeError: # Code to handle type errors except KeyError: # Code to handle key errors except ValueError: # Code to handle value errors"},{"prompt":"Analyze the given Python program and comment on what it does in simple words. def helloWorld(name): if name == 'John': print('Hello John!') else: print('Hello, stranger!') helloWorld('John')","completion":"This program is a function that displays a greeting specific to a person. If the name passed to the function is 'John', it will print 'Hello John!'; otherwise it will print 'Hello, stranger!' In the given example, it prints 'Hello John!' since 'John' is passed to the function."},{"prompt":"Modify a Python script to log a message in the event of an error.","completion":"import logging try: # Run code except Exception as e: logging.error(\\"An error occurred: {}\\".format(e))"},{"prompt":"Generate a Python code to optimize a deep learning model using the Adam optimization algorithm.","completion":"# import libraries import keras from keras.models import Sequential from keras.layers import Dense # create model model = Sequential() model.add(Dense(10, input_dim=1, activation='relu')) model.add(Dense(12, activation='relu')) model.add(Dense(1, activation='sigmoid')) # compile model model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) # fit the model model.fit(x, y, epochs=100, batch_size=32)"},{"prompt":"Write a Python program to read in a data set, and output the mean of the set and the range (highest lowest) of the set. [2, 3, 6, 12, 21, 41]","completion":"#this program reads in a data set, and outputs the mean of the set # and the range (highest - lowest) of the set. #function to get the mean of given data set def mean(input_list): total = 0 for i in input_list: total += i return total/len(input_list) #function to get the range (highest - lowest) of the given data set def range(input_list): return max(input_list)-min(input_list) #initialize an array input_list = [2, 3, 6, 12, 21, 41] #get the mean mean = mean(input_list) #get the range the_range = range(input_list) #print the output print(\\"The mean of given array is\\",mean) print(\\"The range (highest - lowest) of given array is\\",the_range)"},{"prompt":"Write a Python program to sort a list of words in ascending order based on their length. words = [I, am, all, ears]","completion":"words = [\\"I\\", \\"am\\", \\"all\\", \\"ears\\"] #sort the words by length words.sort(key = len) #print the sorted words for word in words: print(word) # Output I am all ears"},{"prompt":"Design a python class for a geometric shape of your choice and add methods for computing perimeter and area.","completion":"class Triangle: def __init__(self, a, b, c): self.a = a self.b = b self.c = c def perimeter(self): return self.a + self.b + self.c def area(self): s = self.perimeter()/2 area = (s*(s-self.a)*(s-self.b)*(s-self.c)) ** 0.5 return area # Driver code side1 = 3 side2 = 4 side3 = 5 # Creating object of the class t = Triangle(side1, side2, side3) print(\\"Perimeter is:\\", t.perimeter()) print(\\"Area is:\\",t.area())"},{"prompt":"Come up with a python program to join two strings x and y, and then print the resulting combined string. x = Hello; y = World","completion":"x = \\"Hello\\" y = \\"World\\" result = x + y print(result)"},{"prompt":"Develop a genetic algorithm in Python to solve the shortest path problem. Not applicable","completion":"import numpy as np class GeneticAlgo: def __init__(self, start_state, end_state, max_mutation, population_size): \\"\\"\\" Initializes the Genetic Algorithm Args: start_state (tuple): Start state of the algorithm end_state (tuple): End state of the algorithm max_mutation (int): Maximum number of mutations population_size (int): Maximum size of the population \\"\\"\\" self.start_state = start_state self.end_state = end_state self.max_mutation = max_mutation self.population_size = population_size # Store the starting state. Done to reset it after each generation self.start_state_copy = start_state # Create a population with random state members self.population = self._generate_random_population() def _generate_random_population(self): \\"\\"\\" Generates a random population Returns: population: List containing tuples of random states \\"\\"\\" population = [] for _ in range(self.population_size): # Copy the starting state and then shuffle it current_state = list(self.start_state_copy) np.random.shuffle(current_state) # Append this random state to the list population.append(tuple(current_state)) return population def _calculate_fitness(self, state): \\"\\"\\" Calculates the fitness of the given state Fitness is calculated by comparing the state with the end_state. The more different the two are, the lower is the fitness Args: state (tuple): Tuple containing the elements of the state Returns: fitness (int): Fitness of the given state \\"\\"\\" fitness = 0 for index, element in enumerate(state): if element == self.end_state[index]: fitness += 1 return fitness def _convert_population_to_fitness(self): \\"\\"\\" Converts the population and returns a list of tuples containing each state's fitness \\"\\"\\" # Empty list to store each state's fitness population_fitness = [] # Loop through each state in the population for state in self.population: # Find the fitness of the given state fitness = self._calculate_fitness(state) # Add the state's fitness to the list population_fitness.append((state, fitness)) return population_fitness def _do_mutation(self, state): \\"\\"\\" Does the mutation process Mutation consists of swapping two elements in the state Args: state (tuple): Tuple containing the elements of the state Returns: mutated_state (tuple): Tuple containing the elements of the mutated state \\"\\"\\" # Make a copy of the state mutated_state = list(state) # Get two random indices and swap those elements swap_indices = np.random.choice(len(mutated_state), size=2, replace=False) mutated_state[swap_indices[0]], mutated_state[swap_indices[1]] = ( mutated_state[swap_indices[1]], mutated_state[swap_indices[0]], ) # Return the mutated state as a tuple return tuple(mutated_state) def solve(self): \\"\\"\\" Solves the shortest path problem using the Genetic Algorithm \\"\\"\\" # Find out the best solution from the current population population_fitness = self._convert_population_to_fitness() current_best_fitness = max([fitness for _, fitness in population_fitness]) # While the solution is still not found while current_best_fitness < len(self.end_state): # Create a list to store the new population new_population = [] # Generate the new population for _ in range(self.population_size): # Select two parents randomly parent_1, parent_2 = np.random.choice( self.population, size=2, replace=False ) # Create child by combining features of the two selected parents child = [] for p1, p2 in zip(parent_1, parent_2): # Flip a coin (biased in this case to favour the end_state) coin_toss = np.random.choice([0, 1], p=[0.5, 0.5]) # If heads (with a probability of 0.5) select the corresponding element from the end_state if coin_toss == 0: child.append(self.end_state[p1]) # Else select it from the parent else: child.append(p2) # Mutate the child for _ in range(self.max_mutation): child = self._do_mutation(child) # Append the child to the list new_population.append(tuple(child)) # Overwrite the existing population with the new population self.population = new_population[:] # Find out the best solution from the new population population_fitness = self._convert_population_to_fitness() current_best_fitness = max([fitness for _, fitness in population_fitness]) # Return the best solution return max(population_fitness, key=lambda x: x[1])"},{"prompt":"Create a web crawler in Python to crawl a website for links. Not applicable","completion":"import requests from bs4 import BeautifulSoup # get the HTML from the URL response = requests.get('https://example.com') html = response.text # create the BS4 object and get all the <a> elements bsobj = BeautifulSoup(html, 'html.parser') links = bsobj.find_all('a') # print all the links for link in links: if link.has_attr('href'): print(link['href'])"},{"prompt":"Write a Python script for preprocessing a CSV dataset. This script should remove any irrelevant columns, scale selected numerical features, apply one hot encoding to categorical features, and split the data into a training and test set. path_to_csv = 'dataset.csv'","completion":"import pandas as pd # Load data data = pd.read_csv(path_to_csv) # Remove irrelevant columns data.drop(['irrelevant_column1', 'irrelevant_column2'], axis=1, inplace=True) # Scale numerical features from sklearn.preprocessing import MinMaxScaler scaler = MinMaxScaler() data[['numerical_feature1', 'numerical_feature2']] = scaler.fit_transform(data[['numerical_feature1', 'numerical_feature2']]) # One Hot Encoding data = pd.get_dummies(data, columns=['categorical_feature1', 'categorical_feature2']) # Split data into training and test sets X = data.drop['target'] y = data['target'] from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"},{"prompt":"Develop a Python code to print a string in reverse order. Hello, World!","completion":"str = \\"Hello, World!\\" # loop to iterate through string for i in range(len(str)-1, -1, -1): print(str[i],end=\\"\\") print()"},{"prompt":"w would you check if a string ends with a given substring in Python? Input String = Test string Substring = string","completion":"if InputString.endswith(Substring): print('The input string ends with the given substring.') else: print('The input string does not end with the given substring.')"},{"prompt":"Create a Python function to edit a given string by changing the order of some of its characters. string: hello world","completion":"def edit_string(string): characters = list(string) np.random.shuffle(characters) edited_string = \\"\\".join(characters) return edited_string"},{"prompt":"Create a Python script using the BeautifulSoup library that crawls and prints a list of all the links from a website. A website URL","completion":"import requests from bs4 import BeautifulSoup def extract_links(url): html = requests.get(url).content soup = BeautifulSoup(html) links = [] for link in soup.find_all(\\"a\\"): try: if link[\\"href\\"].startswith(\\"http\\"): links.append(link[\\"href\\"]) except KeyError: pass return links url = \\"<input>\\" links = extract_links(url) for link in links: print(link)"},{"prompt":"Create a basic web scraper in Python. The scraper should take a website URL as an input and extract all hyperlinks from it. Not applicable","completion":"# import libraries import requests from bs4 import BeautifulSoup # define the scrape_page function def scrape_page(url): # make the request response = requests.get(url) # parse the response using BeautifulSoup soup = BeautifulSoup(response.text, 'html.parser') # an empty list to store the hyperlinks links = [] # loop through all the anchor tags for link in soup.find_all('a'): # get the URL from the href attribute href = link.get('href') # add the URL to the list of links links.append(href) # return the list of links return links # call the function with a given URL url = 'https://example.com' links = scrape_page(url) print(links)"},{"prompt":"Write a Python program to webscrape the most popular movies from IMDB.","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.imdb.com/chart/moviemeter' # Make a request to the url r = requests.get(url) # Parse the content of the request with BeautifulSoup soup = BeautifulSoup(r.text, 'html.parser') # Get all the movies listed movies = soup.find_all('td', class_='titleColumn') # Loop over each movie for movie in movies: # Get the movie title title = movie.a.text # Get the release year year = movie.span.text[1:-1] # Print the title and year print(title + ' ('+year + ')')"},{"prompt":"Create a Python program to find all the combinations of three numbers in a given array which sum up to a certain value X. [2,3,4,5], X = 9","completion":"def findCombinations(arr, target): result = [] for i in range(len(arr)-2): for j in range(i + 1, len(arr)-1): for k in range(j + 1, len(arr)): if arr[i] + arr[j] + arr[k] == target: temp = [] temp.append(arr[i]) temp.append(arr[j]) temp.append(arr[k]) result.append(temp) return result # Driver Code arr = [2, 3, 4, 5] X = 9 print(findCombinations(arr, X))"},{"prompt":"Create an API endpoint for a Python Flask application that takes a string as an input and returns the frequency of all the words that appear in the given string. String: Hello world, hello again world!","completion":"from flask import Flask, request from collections import Counter app = Flask(name) @app.route('/word-frequency', methods=['POST']) def word_frequency(): string = request.json['string'] counts = Counter(string.split()) return {'frequency': counts} if name == 'main': app.run(debug=True)"},{"prompt":"Create a python program for encrypting and decrypting strings","completion":"import random def encrypt(string): \\"\\"\\"Encrypts a given string using a random 2D matrix\\"\\"\\" # Generate random 2D matrix matrix = [[random.randint(0, 9) for x in range(len(string))] for y in range(len(string))] encrypted_str = \\"\\" # Encrypt the string for col in range(len(string)): for row in range(len(string)): encrypted_str += str(matrix[row][col] ^ ord(string[row])) return encrypted_str def decrypt(string): \\"\\"\\"Decrypts a given encrypted string\\"\\"\\" encrypted_str = \\"\\" matrix_size = int(len(string) ** 0.5) encrypted_str = \\"\\" # Generate a 2D matrix from the encrypted string matrix = [] for row in range(matrix_size): matrix.append([]) for col in range(matrix_size): matrix[row].append(int(string[col + (row * matrix_size): col + (row * matrix_size) + 1])) # Decrypt the string for col in range(matrix_size): for row in range(matrix_size): encrypted_str += chr(matrix[row][col] ^ matrix[row][0]) return encrypted_str"},{"prompt":"Write a Python function that takes two dimensional array and transposes it. [[1,2,3],[4,5,6]]","completion":"def transpose_matrix(matrix): transposed_matrix = [] for i in range(len(matrix[0])): row = [] for j in range(len(matrix)): row.append(matrix[j][i]) transposed_matrix.append(row) return transposed_matrix my_matrix =[[1,2,3],[4,5,6]] transposed_matrix = transpose_matrix(my_matrix) print(transposed_matrix)"},{"prompt":"mplement a TensorFlow model in Python to generate the sentiment score of a short review document. Example review document: The food was great and the atmosphere was friendly.","completion":"import tensorflow as tf from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences review = \\"The food was great and the atmosphere was friendly.\\" tokenizer = Tokenizer() tokenizer.fit_on_texts([review]) encoded_review = tokenizer.texts_to_sequences([review])[0] padded_review = pad_sequences([encoded_review], maxlen=6, padding='post') model = tf.keras.models.Sequential([ tf.keras.layers.Embedding( input_dim=len(tokenizer.word_index) + 1, output_dim=16, input_length=6 ), tf.keras.layers.Flatten(), tf.keras.layers.Dense(units=1, activation='sigmoid') ]) model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) score = model.predict(padded_review).round(2)[0][0] # 0.87"},{"prompt":"Create a Python program that will take a list of integers and output the sum, average, largest value, and smallest value of the list. [2, 4, 0, 5, 10]","completion":"list_input = [-2, -4, 0, 5, 10] list_sum = sum(list_input) print(\\"Sum: \\" + str(list_sum)) list_average = sum(list_input) / len(list_input) print(\\"Average: \\" + str(list_average)) list_max = max(list_input) print(\\"Largest value: \\" + str(list_max)) list_min = min(list_input) print(\\"Smallest value: \\" + str(list_min))"},{"prompt":"Use an existing Python function to find the longest string in the following array. arr = [cat, dog, elephant, squirrel, moose","completion":"max(arr, key=len) # returns \\"elephant\\""},{"prompt":"Write a Python function to find the GCD of two numbers.","completion":"def gcd(a, b): if a == 0: return b return gcd(b % a, a)"},{"prompt":"Create a Python script that takes in a list of numbers and calculates the sum, mean, and median. [1, 2, 3, 4, 5]","completion":"my_list = [1, 2, 3, 4, 5] sum_list = sum(my_list) mean_list = sum_list / len(my_list) my_list.sort() middle_index = int(len(my_list) / 2) if len(my_list) % 2 == 0: median_list = (my_list[middle_index] + my_list[middle_index - 1]) / 2 else: median_list = my_list[middle_index+1] print('sum', sum_list) print('mean', mean_list) print('median', median_list)"},{"prompt":"Create a program in any programming language that takes two input arguments and prints the larger number.","completion":"# Python program def main(num1, num2): if num1 > num2: print(num1) else: print(num2) if __name__ == \\"__main__\\": num1 = int(input()) num2 = int(input()) main(num1, num2)"},{"prompt":"Create a text classification system with Python and ScikitLearn that classifies a given text as either positive or negative. Not applicable","completion":"# Import libraries from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression # Input corpus corpus = [ 'This is a positive text', 'This is a negative text', 'This is another positive text', 'This is another negative text', ] labels = [1, 0, 1, 0] # Convert corpus into vectors vectorizer = CountVectorizer() X = vectorizer.fit_transform(corpus) # Train classifier classifier = LogisticRegression() classifier.fit(X, labels) # Classify new text text = 'This is a text to classify' X = vectorizer.transform([text]) prediction = classifier.predict(X) if prediction[0] == 1: print('Classified as Positive') else: print('Classified as Negative')"},{"prompt":"Create a Python program to check if an integer is divisible by 5 Integer : 10","completion":"def is_divisible_by_5(number): if (number % 5 == 0): return True else: return False number = 10 is_divisible_by_5(number)"},{"prompt":"Write a Python program to check given temperature is between two numbers. temperature = 23 low_limit = 20 high_limit = 30","completion":"if (temperature >= low_limit and temperature <= high_limit): print(\\"Temperature is in range\\") else: print(\\"Temperature is out of range\\")"},{"prompt":"Write a Python code to filter block sites in a proxy server.","completion":"def block_sites(proxy_url): # Create a request instance req = urllib.request.Request(proxy_url) # Download page data with urllib.request.urlopen(req) as response: page_data = response.read() # Parse page data page_soup = BeautifulSoup(page_data, \\"html.parser\\") # Extract block-list items block_list = page_soup.find_all('ul', {'class': 'block-list'}) # Filter out sites on the block list filtered_sites = [site.text.strip() for site in block_list] return filtered_sites"},{"prompt":"mplement class inheritance in Python","completion":"class Vehicle: def __init__(self, name, wheels): self.name = name self.wheels = wheels class Car(Vehicle): def __init__(self, name, wheels, engine): super().__init__(name, wheels) self.engine = engine"},{"prompt":"Generate a Python program to detect outliers in a dataset using the interquartile range (IQR) method. A dataset with 10 columns and 200 rows.","completion":"# importing required libraries import pandas as pd # read csv file into a dataframe and check column types df = pd.read_csv('dataset.csv') # get quartiles Q1 = df.quantile(0.25) Q3 = df.quantile(0.75) IQR = Q3 - Q1 # remove outliers df_no_outliers = df[~((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).any(axis=1)] # get the count of outliers outliers_count = df.shape[0] - df_no_outliers.shape[0] # prints the count of outliers print(\\"Count of outliers:\\", outliers_count)"},{"prompt":"Create a Python application to allow users to input a string and calculate the length of the string.","completion":"user_input = input(\\"Enter a string: \\") length = len(user_input) print(\\"The length of the string is: \\", length)"},{"prompt":"Optimize the following code snippet for accessing an element in a Python list. my_list = [1, 2, 3, 4, 5]","completion":"my_list = [1, 2, 3, 4, 5] if len(my_list) > 0: element = my_list[0] else: element = None"},{"prompt":"Create a code to parse a web page and check whether or not a particular keyword appears in the page. keyword = python","completion":"import requests def check_if_keyword_exists(url, keyword): response = requests.get(url) if keyword in response.text: return True return False keyword = \\"python\\" print(check_if_keyword_exists(\\"https://en.wikipedia.org/wiki/Python_(programming_language)\\", keyword)) # Output: True"},{"prompt":"Rewrite the following Python code snippet to use list comprehension: items = [] for item in range(10): items.append(item) Not applicable","completion":"items = [item for item in range(10)]"},{"prompt":"Create a Python program to determine if a given string is a palindrome and if so, print it. String = racecar","completion":"# Function to check if a string is a palindrome def isPalindrome(s): # Reverse the string rev_s = s[::-1] # Check if the string is the same as its reverse if (s == rev_s): return True return False # Driver code s = 'racecar' # Check if the given word is a palindrome if (isPalindrome(s)): print(s)"},{"prompt":"Rewrite a Python program from imperative to functional style. def find_even_numbers(numbers): even_numbers = [] for num in numbers: if num % 2 == 0: even_numbers.append(num) return even_number","completion":"def find_even_numbers(numbers): even_numbers = filter(lambda num: num % 2 == 0, numbers) return list(even_numbers)"},{"prompt":"mplement a GPU optimization technique in Python that improves the speed of a program.","completion":"import pycuda.autoinit import pycuda.driver as driver from pycuda.compiler import SourceModule import numpy mod = SourceModule(\\"\\"\\" __global__ void gpu_accelerate(float *a) { int idx = threadIdx.x + blockIdx.x * blockDim.x; a[idx] = a[idx] + 5; } \\"\\"\\") gpu_accelerate = mod.get_function(\\"gpu_accelerate\\") data = numpy.arange(128).astype(numpy.float32) gpu_accelerate(driver.In(data), block=(4,4,1), grid=(2,2))"},{"prompt":"Generate code to read data from an Excel spreadsheet.","completion":"Generate code to read data from an Excel spreadsheet using Python's xlrd library. The code should read in the spreadsheet, open the first sheet, and then iterate over each row, reading the data and storing it in a data structure, such as a list. The code should also handle any errors that may arise."},{"prompt":"Create a project using Python with automated testing. The project should include tests that verify the correct functionality of the code. Not applicable","completion":"# import the necessary libraries import unittest # The function to be tested def add(a,b): return a+b # Create the test class class TestAdd(unittest.TestCase): def test_add(self): # Test that add works correctly self.assertEqual(add(2,3), 5) self.assertEqual(add(4,5), 9) if __name__ == '__main__': unittest.main()"},{"prompt":"Generate a code snippet to print a pattern of stars in Python. rows = 5","completion":"# Use two for loops to print pattern for i in range(0, rows): for j in range(0, i + 1): print(\\"* \\", end=\\"\\") print(\\"r\\")"},{"prompt":"Generate a python program that takes an array as input and prints its elements in reverse order","completion":"def reverse_array(lst): for i in reversed(lst): print(i)"},{"prompt":"Create a web scraper in Python that scrapes reviews from the website https://example.com. It should extract the review text, rating, and date from each review. Not applicable","completion":"import requests from bs4 import BeautifulSoup URL = \\"https://example.com/reviews\\" response = requests.get(URL) soup = BeautifulSoup(response.text, 'html.parser') reviews = soup.find_all('div', class_='review') for review in reviews: review_text = review.find('p', class_='review_text').text rating = review.find('span', class_='rating').text date = review.find('span', class_='date').text print(review_text, rating, date)"},{"prompt":"Create a Python program to calculate the sum of the digits for a number that is provided as input. num = 1234","completion":"# Function to find the sum of digits def sum_digits(num): # Variable to store the sum of digits sum = 0 while num > 0: digit = num % 10 sum = sum + digit num = num // 10 return sum num = 1234 sum = sum_digits(num) print(\\"Sum of digits of %d is %d\\" % (num, sum)) # Output: Sum of digits of 1234 is 10"},{"prompt":"Write a Python program that parses a single URL from a given string. https://www.example.com/index.php?p=1&q=2","completion":"import re def parse_url(url): regex = r\\"^(https?://[^/]+)(.*)\\" match = re.search(regex, url) return match.group(1), match.group(2) url, query = parse_url(\\"https://www.example.com/index.php?p=1&q=2\\") print(\\"URL:\\", url) print(\\"Query:\\", query)"},{"prompt":"Edit the following Python code to calculate the sum of all the elements in a twodimensional array. arr = [[1,2,3], [4,5,6], [7,8,9]]","completion":"arr = [[1,2,3], [4,5,6], [7,8,9]] sum = 0 for row in arr: for col in row: sum = sum + col print(\\"Sum:\\", sum)"},{"prompt":"The given code is a Python script that performs various natural language processing tasks on Twitter data. To use this script, you need to import the required libraries such as json, sklearn, nltk, wordcloud, matplotlib, and db. Then, you can define the DATASET_PATH variable to point to the location of the Twitter data file. The calc_frequencies function calculates the frequency of words in a list of words. The get_word_clouds function generates a word cloud for each user in a list of tweets. The save_wordcloud_image function saves a word cloud image to a file. The load_example_data function loads example Twitter data. The get_corpus_of_most_active_users function returns a corpus of tweets from the most active users. Finally, the main function calls the get_word_clouds function and saves the resulting word clouds to a database.","completion":"import json from sklearn.feature_extraction.text import TfidfVectorizer import nltk from nltk.corpus import stopwords from wordcloud import WordCloud import matplotlib.pyplot as plt import db import os DATASET_PATH = os.environ['HOME'] + '/nltk_data/corpora/twitter_samples/tweets.20150430-223406.json' def calc_frequencies(words, words_n=50, lang='german'): words = [word for word in words if len(word) > 1] words = [word for word in words if not word.isnumeric()] words = [word.lower() for word in words] # words = [word for word in words if word not in all_stopwords] # Stemming words seems to make matters worse, disabled # stemmer = nltk.stem.snowball.SnowballStemmer(lang) # words = [stemmer.stem(word) for word in words] fdist = nltk.FreqDist(words) return fdist.most_common(words_n) def get_word_clouds(tweets, users, words_n=50, lang='english'): default_stopwords = set(nltk.corpus.stopwords.words(lang)) stopwords_file = '../data/stopwords.txt' custom_stopwords = set(open(stopwords_file, 'r').read().splitlines()) all_stopwords = default_stopwords | custom_stopwords vectorizer = TfidfVectorizer(max_df=0.5, min_df=2, stop_words=list(all_stopwords)) X = vectorizer.fit_transform(tweets) terms = vectorizer.get_feature_names() word_cloud_per_person = {} for doc in range(len(tweets)): feature_index = X[doc, :].nonzero()[1] tfidf_scores = zip(feature_index, [X[doc, x] for x in feature_index]) doc_terms = [] for word, score in [(terms[i], score) for (i, score) in tfidf_scores]: doc_terms.append((word, score)) important_terms = [(word, score) for word, score in sorted(doc_terms, key=lambda x: x[1], reverse=True)][:words_n] word_cloud_per_person[users[doc]] = important_terms return word_cloud_per_person def save_wordcloud_image(frequencies, filename): wordcloud = WordCloud(width=1024, height=786, min_font_size=1).fit_words(frequencies) fig = plt.figure() fig.set_figwidth(12) fig.set_figheight(16) plt.imshow(wordcloud) plt.axis(\\"off\\") plt.savefig(filename, facecolor='k', bbox_inches='tight') print('imaged created') def load_example_data(): tweets = [] with open(DATASET_PATH) as f: for line in f: tweets.append(json.loads(line)['text']) return tweets def get_corpus_of_most_active_users(n_users=5): tweets = [] texts = [] with open(DATASET_PATH) as f: for line in f: tweets.append(json.loads(line)['user']['screen_name']) texts.append((json.loads(line)['user']['screen_name'], json.loads(line)['text'])) users = nltk.FreqDist(tweets).most_common(n_users) dict = {} for user, tweet in texts: if user in dict: dict[user] = \\" \\".join([dict[user],tweet]) else: dict[user] = tweet corpus = [dict[name] for name, _ in users] user_names = [name for name, _ in users] return corpus, user_names if __name__ == \\"__main__\\": corpus, users = get_corpus_of_most_active_users() word_cloud_per_person = get_word_clouds(corpus, users, words_n=100, lang='english') for user in users: topic_frequencies = word_cloud_per_person[user] print user print topic_frequencies db.save_word_frequencies('test_user_seb', dict(topic_frequencies)) exit() # save_wordcloud_image(dict(topic_frequencies), 'plots/word_clouds/' + user + '.png') # This is an example how to save a word_cloud in the database # user_in_db = 'malechanissen' # db.save_word_frequencies(user_in_db, {'w3':10, 'w4':20}) # db.save_word_frequencies(user_in_db, dict(topic_frequencies)) # db.save_word_frequencies('test_user_seb', {'w3':10, 'w4':20})"},{"prompt":"Design a program to optimize a set of constraints in Python.","completion":"# Assume input is of the form: # { # \\"constraint1\\": [[x1, y1, z1], [a1, b1, c1]], # \\"constraint2\\": [[x2, y2, z2], [a2, b2, c2]], # ... # } def optimize_constraints(data): # Initialize optimization problem problem = Problem(\\"Optimization problem\\") # Add variables to problem for key, value in data.items(): for i in range(len(value)): var = problem.add_variable(\\"{}_{}\\".format(key, i), type=float) # Add constraints problem.add_constraint(var == value[i], name=\\"Constraint_{}_{}\\".format(key, i)) # Solve problem problem.solve() # Return optimized constraints solution = {} for key, value in data.items(): solution[key] = [problem.get_value(\\"{}_{}\\".format(key, i)) for i in range(len(value))] return solution"},{"prompt":"Write a Python program to calculate the amount of time for an action to be completed given a set of parameters. speed = 100; distance = 1000;","completion":"def calculate_time(speed, distance): time = distance / speed return time print(calculate_time(100, 1000)) # Output: 10.0"},{"prompt":"Write a Python program that takes a string as input and returns a list of words. The quick brown fox jumps over the lazy dog","completion":"def get_words(input_str): return input_str.split() result = get_words(\\"The quick brown fox jumps over the lazy dog\\") print(result)"},{"prompt":"Write a Python code to normalize a list of numbers. list_numbers = [1, 4, 4, 5, 7]","completion":"\\"\\"\\" Normalize a list of numbers using Python \\"\\"\\" def normalize_list(list_numbers): max_val = max(list_numbers) normalized = [n/max_val for n in list_numbers] return normalized if __name__ == '__main__': list_numbers = [1, 4, 4, 5, 7] print(normalize_list(list_numbers))"},{"prompt":"Design a selection sort algorithm in Python.","completion":"def selection_sort(arr): for i in range(len(arr)): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j # Swap the found minimum element with # the first element arr[i], arr[min_idx] = arr[min_idx], arr[i]"},{"prompt":"Generate a python program for searching for a value in an array. Array: [0, 1, 2, 3, 4, 5] Value: 3","completion":"def search_value(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1"},{"prompt":"Modify a program in Python to reverse a linkedlist with a recursive algorithm in constant space. Linkedlist: 1 2 3 4","completion":"# Node class class Node: # Constructor to initialize the node object def __init__(self, data): self.data = data self.next = None # Linked List class contains a Node object class LinkedList: # Function to initialize head def __init__(self): self.head = None # A recursive function to reverse linked list def reverseUtil(self, curr, prev): # If last node mark it head if curr.next is None : self.head = curr # Update next to prev node curr.next = prev return # Save curr.next node for recursive call next = curr.next # And update next curr.next = prev self.reverseUtil(next, curr) # This function mainly calls reverseUtil() # with previous as None def reverse(self): if self.head is None: return self.reverseUtil(self.head, None) # Create a list llist = LinkedList() # Create first node llist.head = Node(1) # Create second node second = Node(2) # Create third node third = Node(3) # Create fourth node fourth = Node(4) # Now combine the four nodes llist.head.next = second; # Link first node with second second.next = third; # Link second node with the third node third.next = fourth; # Link third node with the fourth node # Reverse the LinkedList llist.reverse()"},{"prompt":"Create a function in Python that rounds a number to two decimal places.","completion":"def round_to_two_decimals(number): return round(number, 2)"},{"prompt":"Write a Python program to sort a given list of numbers using QuickSort. [3, 8, 6, 10, 11, 4]","completion":"def quickSort(arr): if len(arr) <= 1: return arr else: pivot = arr[0] lessThanPivot = [number for number in arr[1:] if number <= pivot] moreThanPivot = [number for number in arr[1:] if number > pivot] return quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot) arr = [3, 8, 6, 10, 11, 4] print(quickSort(arr))"},{"prompt":"Write an Apriori algorithm in Python for mining frequent item sets. Not applicable","completion":"import itertools def apriori(dataset, min_support=0.5, verbose=False): # Get all unique items item_set = set([item for sublist in dataset for item in sublist]) # Generate the initial frequent item sets freq_set = frequent_item_sets(dataset, item_set, min_support, verbose) # Use the initial sets to generate more if verbose: print(f'Frequent Item Sets: {freq_set}') final_item_sets = freq_set.copy() k = 2 while len(freq_set) > 0: if verbose: print(f'nGenerating item sets of size {k}') k_item_sets = generate_k_item_sets(freq_set, k) freq_set = frequent_item_sets(dataset, k_item_sets, min_support, verbose) final_item_sets.update(freq_set) k += 1 return final_item_sets def generate_k_item_sets(item_sets, k): return set([i.union(j) for i in item_sets for j in item_sets if len(i.union(j)) == k]) def frequent_item_sets(dataset, item_sets, min_support, verbose): support_counts = {} for item_set in item_sets: for transaction in dataset: if item_set.issubset(transaction): try: support_counts[item_set] += 1 except KeyError: support_counts[item_set] = 1 n = len(dataset) freq_set = set([item_set for item_set in support_counts if (support_counts[item_set] / n) >= min_support]) if verbose: for item_set in support_counts: print(f'{item_set}: {support_counts[item_set]}') return freq_set # Test the apriori algorithm dataset = [['A', 'B', 'C', 'D'], ['B', 'C', 'E'], ['A', 'B', 'C', 'E'], ['B', 'D', 'E'], ['A', 'B', 'C', 'D']] frequent_item_sets = apriori(dataset, 0.5, verbose=True) print(f'nFrequent Item Sets: {frequent_item_sets}')"},{"prompt":"Create a Python module that takes a list of numbers, calculates the mean, and returns it. [1, 7, 11, 13]","completion":"def calculate_mean(numbers): total_sum = 0 for num in numbers: total_sum += num mean = total_sum / len(numbers) return mean list_of_numbers = [1, 7, 11, 13] mean = calculate_mean(list_of_numbers) print(mean) # 7.5"},{"prompt":"Write a Python program to compute the square of a given number. 5","completion":"def square(num): return num ** 2"},{"prompt":"Create a class in Python that implements the Queue data structure.","completion":"class Queue: def __init__(self): self.queue = [] def enqueue(self, data): self.queue.append(data) def dequeue(self): if len(self.queue) == 0: print(\\"Queue empty\\") else: element = self.queue[0] del self.queue[0] return element def peek(self): return self.queue[0] def size(self): return len(self.queue)"},{"prompt":"Generate a Python program to merge two sorted list and create a new sorted list list_a = [1, 3, 5, 7] list_b = [2, 4, 6, 8]","completion":"list_a = [1, 3, 5, 7] list_b = [2, 4, 6, 8] def merge_sorted_lists(list_a, list_b): merged_list = [] i = 0 j = 0 while i < len(list_a) and j < len(list_b): if list_a[i] < list_b[j]: merged_list.append(list_a[i]) i+=1 else: merged_list.append(list_b[j]) j+=1 while i < len(list_a): merged_list.append(list_a[i]) i+=1 while j < len(list_b): merged_list.append(list_b[j]) j+=1 return merged_list"},{"prompt":"Write a Python script to consume a web API and create a visualization. Example web API https://jsonplaceholder.typicode.com/todo","completion":"import requests import matplotlib.pyplot as plt # Make a GET request to the API. response = requests.get('https://jsonplaceholder.typicode.com/todos') # Create an empty dictionary to store userID's and the number of their completed todos. completed_todos_by_user = {} # Loop through the response data to count completed todos for each userID. for todo in response.json(): if (todo['completed']): try: completed_todos_by_user[todo['userId']] += 1 except KeyError: completed_todos_by_user[todo['userId']] = 1 # Create a list of x values (userID's) and a list of y values (total completed todos). x_values = list(completed_todos_by_user.keys()) y_values = list(completed_todos_by_user.values()) # Create a bar chart to demonstrate the data. plt.bar(x_values, y_values) plt.title('Completed Todos by User') plt.xlabel('UserID') plt.ylabel('Completed Todos') plt.show()"},{"prompt":"Write a Python program to create a tree structure in JSON for given input data. {name: root, children: [{name: a, children: [{name: b, children: []}]}]}","completion":"import json data = { 'name': 'root', 'children': [ { 'name': 'a', 'children': [ { 'name': 'b', 'children': [] } ] } ] } json_string = json.dumps(data, indent=4) print(json_string) # output { \\"name\\": \\"root\\", \\"children\\": [ { \\"name\\": \\"a\\", \\"children\\": [ { \\"name\\": \\"b\\", \\"children\\": [] } ] } ] }"},{"prompt":"Create a Python class to classify emails with machine learning.","completion":"class EmailClassifier: # Initialize the vectorizer and classifier def __init__(self): self.vectorizer = TfidfVectorizer(stop_words=\\"english\\") self.classifier = MultinomialNB() # Fit the emails to the vectorizer def fit(self, emails, labels): self.vectorizer.fit(emails) self.classifier.fit(self.vectorize(emails), labels) # Transform the emails to a vectorized form def vectorize(self, emails): return self.vectorizer.transform(emails) # Predict the labels for the emails def predict(self, emails): return self.classifier.predict(self.vectorize(emails))"},{"prompt":"mplement a supervised learning algorithm in Python using ScikitLearn. A dataset of 100 examples and 3 feature","completion":"from sklearn.svm import SVC from sklearn.model_selection import train_test_split import numpy as np # Load the dataset X, y = np.load('dataset.npy') # Split data into train and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y) # Initialize the model model = SVC(kernel='linear') # Fit the model on the training data model.fit(X_train, y_train) # Make predictions on the test set y_pred = model.predict(X_test) # Evaluate the model print(f'Test Accuracy: {model.score(X_test, y_test)}')"},{"prompt":"Design an API in Python that takes two parameters: a list of strings and a string. The API should return the number of times the string is seen in the list. List of Strings: [this, is, a, word] String: a","completion":"def find_string_count(string_list, target_string): count = 0 for item in string_list: if item == target_string: count += 1 return count list_of_strings = [\\"this\\", \\"is\\", \\"a\\", \\"word\\"] target_string = \\"a\\" result = find_string_count(list_of_strings, target_string) print('Number of occurrences of', target_string, 'in list is', result)"},{"prompt":"Write a Python program to convert a given string to all uppercase. hello World","completion":"def to_uppercase(string): return string.upper() print(to_uppercase(\\"hello World\\")) # Outputs: # HELLO WORLD"},{"prompt":"Design a regression model using a random forest in Python. Not applicable","completion":"from sklearn.ensemble import RandomForestRegressor # Initialize the model model = RandomForestRegressor(n_estimators=100) # Fit the model to the data model.fit(X_train, y_train) # Evaluate the model score = model.score(X_test, y_test) print(\\"Score: \\", score)"},{"prompt":"Write an algorithm in Python to generate a random nonrepeating integer array of size N 10","completion":"import random def random_array(N): result = [] for i in range(N): # Stores the number in result after checking for its presence. data = random.randint(1, 100) if data not in result: result.append(data) return result # Driver Code N = 10 res = random_array(N) print(res)"},{"prompt":"Build a machine learning model to diagnose coronary heart disease using Python.","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score #Load the data dataset = pd.read_csv('<file_name>.csv') X = dataset.iloc[:, 0:10].values y = dataset.iloc[:, 10:].values #Split the data X_train, X_test, y_train, y_test = train_test_split(X, y,random_state = 0,test_size = 0.25) #Train and test the model classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0) classifier.fit(X_train, y_train) y_pred = classifier.predict(X_test) #Evaluate the model print(\\"Accuracy:\\", accuracy_score(y_test, y_pred))"},{"prompt":"write a python program for its purpose Compute the factorial of a given number","completion":"\\"\\"\\" Compute the factorial of a given number \\"\\"\\" def factorial(n): if n == 1: return 1 else: return n * factorial(n-1) if __name__ == '__main__': num = int(input()) print(factorial(num))"},{"prompt":"Write a Python function to check if a given list of numbers is sorted in ascending order or not. list_numbers = [5, 8, 9, 11, 1]","completion":"def is_sorted_asc(list_numbers): for i in range(len(list_numbers) - 1): if list_numbers[i] > list_numbers[i + 1]: return False return True result = is_sorted_asc(list_numbers) print(result) # False"},{"prompt":"Write a Python program to print out the count of vowels, consonants and digits in an input string. This is an example string including digits123.","completion":"Vowels: 10 Consonants: 12 Digits: 3"},{"prompt":"Create a function in Python that takes a dictionary and a string as an argument and checks if the key is present in the given dictionary. dict = { Name:John, Age:25 } String = Name","completion":"def checkKeyExists(dictionary, key): return key in dictionary.keys() dict = { \\"Name\\":\\"John\\", \\"Age\\":25 } String = \\"Name\\" print(checkKeyExists(dict, String))"},{"prompt":"Develop a Python function that will compute the Fibonacci sequence up to n.","completion":"def fibonacci(n): a, b = 0, 1 for i in range(0, n): a, b = b, a + b return a"},{"prompt":"Using the library Requests, write a Python code to download a webpage.","completion":"import requests def download_webpage(url): ''' Function to download a webpage using Requests library ''' response = requests.get(url) #response.raise_for_status() return response.text url = 'http://example.com' webpage = download_webpage(url) print(webpage)"},{"prompt":"Code a Python function that combines two given dictionaries and returns the merged dictionary. dict1 = {'a': 'apple', 'b': 'banna'}, dict2 = {'c': 'cat', 'd': 'dog'}","completion":"def combine_dicts(dict1, dict2): '''Combines two dictionaries into a single dictionary''' dict3 = dict1.copy() dict3.update(dict2) return dict3 dict1 = {'a': 'apple', 'b': 'banna'} dict2 = {'c': 'cat', 'd': 'dog'} combined_dict = combine_dicts(dict1, dict2) print(combined_dict) # output: {'a': 'apple', 'b': 'banna', 'c': 'cat', 'd': 'dog'}"},{"prompt":"Create a search algorithm in Python for solving a maze. Maze Data: 0000 0010 1110 0100","completion":"# Define a function to find the paths from a given start point to end point def maze_search(maze, start_point, end_point): # Get the size of the maze row_count = len(maze) col_count = len(maze[0]) # Reject invalid start and end_points if start_point[0] < 0 or start_point[0] >= row_count or start_point[1] < 0 or start_point[1] >= col_count: return 'Invalid start point' if end_point[0] < 0 or end_point[0] >= row_count or end_point[1] < 0 or end_point[1] >= col_count: return 'Invalid end point' # Setup the stack for depth first search stack = [start_point] visited = set() while stack: # Take the last point from the stack and check if it is the end_point current_point = stack[-1] if current_point == end_point: break # Check surrounding points possible_points = [(current_point[0]+1, current_point[1]), (current_point[0]-1, current_point[1]), (current_point[0], current_point[1]+1), (current_point[0], current_point[1]-1)] for point in possible_points: x, y = point # Check if the point is within the maze and is not a wall if 0 <= x < row_count and 0 <= y < col_count and maze[x][y] != '1' and point not in visited: stack.append(point) visited.add(point) break # Remove the current_point from the stack if there are no possible points else: stack.pop() # Return the path if the end_point is found if stack[-1] == end_point: return stack return 'End point is unreachable' # Solve the maze maze = [['0', '0', '0', '0'], ['0', '0', '1', '0'], ['1', '1', '1', '0'], ['0', '1', '0', '0']] start_point = (0, 0) end_point = (3, 2) path = maze_search(maze, start_point, end_point) print(path)"},{"prompt":"Create a function in Python to find the prime numbers up to a given integer n. 8","completion":"def primes_up_to(n): primes = [] for i in range(2, n + 1): for j in range(2, i): if i % j == 0: break else: primes.append(i) break return primes print(primes_up_to(8)) # [2, 3, 5, 7]"},{"prompt":"mplement a linked list in Python.","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def prepend(self, data): new_node = Node(data) new_node.next = self.head self.head = new_node def append(self, data): new_node = Node(data) if self.head is None: self.head = new_node return last_node = self.head while last_node.next: last_node = last_node.next last_node.next = new_node"},{"prompt":"Create a program in Python that outputs the kth smallest element in a given list of numbers. list = [15, 28, 12, 7, 9] k = 4","completion":"list = [15, 28, 12, 7, 9] # List of numbers k = 4 # kth smallest element sorted_list = sorted(list) # sorting the list of numbers print(\\"The {}th smallest element is {}\\".format(k, sorted_list[k-1])) # print the kth smallest element in the sorted_list using the index (k-1)"},{"prompt":"Write a python program to retrieve the larger element between two numbers","completion":"def max(num1, num2): if num1 > num2: return num1 else: return num2"},{"prompt":"Create a Python program to find out the prime numbers in a given range. lower =100 upper =1000","completion":"def is_prime_number(n): for i in range(2,n): if (n % i == 0): return False return True # Find all prime numbers in a given range lower = 100 upper = 1000 for num in range(lower, upper + 1): if is_prime_number(num): print(num)"},{"prompt":"Generate a python program to find the longest common subsequence.","completion":"def find_longest_common_subsequence(s1, s2): # Create a two dimensional array arr = [[0 for i in range(len(s2) + 1)] for j in range(len(s1) + 1)] # Iterate over the strings for i in range(1, len(s1) + 1): for j in range(1, len(s2) + 1): # if the characters are same, update the # value at current index by adding 1 to # value at the diagonal left if s1[i - 1] == s2[j - 1]: arr[i][j] = arr[i - 1][j - 1] + 1 else: # If not same, take the maximum # value of the cell to the left # and cell above arr[i][j] = max(arr[i - 1][j], arr[i][j - 1]) # return the last element of the # table which is our result return arr[len(s1)][len(s2)]"},{"prompt":"Generate a python script for encrypting a text with Caesar cipher.","completion":"def caesar_cipher(text, key): encrypted_text = '' for c in text: if c.isalpha(): encrypted_text += chr(ord(c) + key) else: encrypted_text += c return encrypted_text"},{"prompt":"Create a bash script which runs a Python program called “script.py” and prints out its output. Not applicable","completion":"#!/bin/bash python script.py echo ?"},{"prompt":"Write a Python program to create a JSON object for a student's marks database. The database should contain the student's name, id, subject name and the marks obtained. Student Name: John Id: 105 Subject: Science Marks: 90","completion":"student_data = [ { 'name': 'John', 'id': 105, 'subjects': { 'Science': 90 } } ]"},{"prompt":"Create a program in Python that takes a sentence and converts it into Pig Latin.","completion":"# Function to convert English sentence to Pig Latin def pig_latin(sentence): # Separate the sentence into words words = sentence.split(' ') # Convert each word into Pig Latin pig_latin_words = [] for word in words: pig_latin_words.append(convert(word)) # Return the sentence with words converted to Pig Latin return ' '.join(pig_latin_words) # Function to convert English word to Pig Latin def convert(word): # IF the word contains just one letter then return the same if len(word) == 1: return word # If word is a vocal then just add \\"way\\" at the end elif word[0] in 'aeiou': return word + \\"way\\" # If word begins with a consonant then move the consonant to the end and add \\"ay\\" else: return word[1:] + word[0] + \\"ay\\""},{"prompt":"The given code defines a function called make_tile that creates a 3D model of a tile with specified dimensions, brick type, size, and level of detail using the Blender Python API. The function takes in several keyword arguments including dimensions, brick_type, brick_size, circle_verts, type, detail, and bme, and returns a BMesh object representing the tile. To use this function, call it with the desired arguments and store the returned BMesh object.","completion":"# Copyright (C) 2020 Christopher Gearhart # chris@bblanimation.com # http://bblanimation.com/ # # This program is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program. If not, see <http://www.gnu.org/licenses/>. # System imports import bpy import bmesh import math import numpy as np # Blender imports from mathutils import Vector # Module imports from .generator_utils import * def make_tile(dimensions:dict, brick_type:str, brick_size:list, circle_verts:int=None, type:str=None, detail:str=\\"LOW\\", bme:bmesh=None): \\"\\"\\" create inverted slope brick with bmesh Keyword Arguments: dimensions -- dictionary containing brick dimensions brick_type -- cm.brick_type brick_size -- size of brick (e.g. standard 2x4 -> [2, 4, 3]) circle_verts -- number of vertices per circle of cylinders type -- type of tile in ('TILE', 'TILE_GRILL') detail -- level of brick detail (options: ('FLAT', 'LOW', 'HIGH')) bme -- bmesh object in which to create verts \\"\\"\\" # create new bmesh object bme = bmesh.new() if not bme else bme # get halfScale d = Vector((dimensions[\\"half_width\\"], dimensions[\\"half_width\\"], dimensions[\\"half_height\\"])) d.z = d.z * (brick_size[2] if flat_brick_type(brick_type) else 1) # get scalar for d in positive xyz directions scalar = Vector((brick_size[0] * 2 - 1, brick_size[1] * 2 - 1, 1)) d_scaled = vec_mult(d, scalar) # get thickness of brick from inside to outside thick_xy = dimensions[\\"thickness\\"] - (dimensions[\\"tick_depth\\"] if \\"High\\" in detail and min(brick_size) != 1 else 0) thick = Vector((thick_xy, thick_xy, dimensions[\\"thickness\\"])) # create cube if \\"GRILL\\" in type: coord1 = -d coord1.z += dimensions[\\"slit_height\\"] coord2 = d_scaled coord2.z = coord1.z v1, v4, v3, v2 = make_rectangle(coord1, coord2, face=False, bme=bme)[1] else: sides = [1, 1 if detail == \\"FLAT\\" else 0, 1, 1, 1, 1] coord1 = -d coord1.z += dimensions[\\"slit_height\\"] coord2 = d_scaled v1, v2, v3, v4, v5, v6, v7, v8 = make_cube(coord1, coord2, sides, bme=bme)[1] # make verts for slit slit_depth = Vector([dimensions[\\"slit_depth\\"]]*2) coord1 = -d coord1.xy += slit_depth coord2 = Vector((d_scaled.x, d_scaled.y, -d.z + dimensions[\\"slit_height\\"])) coord2.xy -= slit_depth v9, v10, v11, v12, v13, v14, v15, v16 = make_cube(coord1, coord2, [0, 1 if detail == \\"FLAT\\" and \\"GRILL\\" not in type else 0, 1, 1, 1, 1], bme=bme)[1] # connect slit to outer cube bme.faces.new((v14, v4, v1, v13)) bme.faces.new((v15, v3, v4, v14)) bme.faces.new((v16, v2, v3, v15)) bme.faces.new((v13, v1, v2, v16)) # add details if \\"GRILL\\" in type: if brick_size[0] < brick_size[1]: add_grill_details(dimensions, brick_size, thick, scalar, d, v4, v1, v2, v3, v9, v10, v11, v12, bme) else: add_grill_details(dimensions, brick_size, thick, scalar, d, v1, v2, v3, v4, v9, v10, v11, v12, bme) elif detail != \\"FLAT\\": # making verts for hollow portion coord1 = -d + Vector((thick.x, thick.y, 0)) coord2 = vec_mult(d, scalar) - thick v17, v18, v19, v20, v21, v22, v23, v24 = make_cube(coord1, coord2, [1, 0, 1, 1, 1, 1], flip_normals=True, bme=bme)[1] # connect hollow portion to verts for slit bme.faces.new((v18, v17, v9, v10)) bme.faces.new((v19, v18, v10, v11)) bme.faces.new((v20, v19, v11, v12)) bme.faces.new((v17, v20, v12, v9)) # add supports if max(brick_size[:2]) > 2: add_supports(dimensions, dimensions[\\"height\\"], brick_size, brick_type, circle_verts, type, detail, d, scalar, thick, bme) return bme"},{"prompt":"Create a Python web scraper that takes a web page URL as input and retrieves all the headlines from the page. https://www.nytimes.com/","completion":"import requests from bs4 import BeautifulSoup # URL of the page to be scraped url = \\"https://www.nytimes.com/\\" # Fetching the webpage r = requests.get(url) # Extracting all the headlines from the page soup = BeautifulSoup(r.content, 'html.parser') headlines = soup.find_all('h2') # Extracting the text from all the headlines headlines_text = [] for headline in headlines: headlines_text.append(headline.get_text()) # Printing the extracted headlines print(headlines_text)"},{"prompt":"Write a Python program to print a given dictionary where the keys are numbers between 1 and 3 and the values are a list from 1 to the number key.","completion":"d = {1: [1], 2: [1,2], 3: [1,2,3]} for k,v in d.items(): print(k,v)"},{"prompt":"Given a Python list containing a set of numbers and strings, create a new list with only the integers. mylist = ['a', 1, 3, 2.5, 'b']","completion":"mylist = [item for item in mylist if isinstance(item, int)]"},{"prompt":"Write a Python function to check if a string contains only numbers.","completion":"def checkNum(s): flag = True for i in s: if i.isdigit() == False: flag = False break return flag"},{"prompt":"Create a Python program which takes a series of integers as input and returns the largest. ins = [1, 5, 8, 3]","completion":"def get_max(ins): return max(ins)"},{"prompt":"Construct a Python program that creates a web server running on port 80.","completion":"import http.server import socketserver # web server running on port 80 PORT = 80 Handler = http.server.SimpleHTTPRequestHandler with socketserver.TCPServer((\\"\\", PORT), Handler) as httpd: print(\\"serving at port\\", PORT) httpd.serve_forever()"},{"prompt":"Create a dashboard to visualize a multidimensional dataset in Python. Not applicable","completion":"import dash import dash_core_components as dcc import dash_html_components as html import plotly.graph_objs as go import pandas as pd df = pd.read_csv('data/my_dataset.csv') app = dash.Dash() app.layout = html.Div([ html.H1('My Dashboard'), dcc.Graph(id='my-graph', figure={ 'data': [ go.Scatter3d( x=df['x'], y=df['y'], z=df['z'], mode='markers', marker={ 'size': 5, 'opacity': 0.8 } ) ], 'layout': go.Layout( scene={ 'xaxis': {'title': 'X'}, 'yaxis': {'title': 'Y'}, 'zaxis': {'title': 'Z'} } ) } ) ]) if __name__ == '__main__': app.run_server()"},{"prompt":"Write a Python program to Create a class called Vector with two methods to add and subtract vectors. Not applicable","completion":"class Vector: def __init__(self, x, y): self.x = x self.y = y def __add__(self, other): return Vector(self.x + other.x, self.y + other.y) def __sub__(self, other): return Vector(self.x - other.x, self.y - other.y) v1 = Vector(2, 4) v2 = Vector(4, 6) v3 = v1 + v2 print(v3.x, v3.y) # 6, 10 v4 = v1 - v2 print(v4.x, v4.y) # -2, -2"},{"prompt":"Rearchitect a Python Class to accept a JSON object. Class: class Person: def __init__(self, first_name, last_name): self.first_name = first_name self.last_name = last_name def __str__(self): return self.first_name + ' ' + self.last_name","completion":"import json class Person: def __init__(self, json_object): self.first_name = json_object[\\"first_name\\"] self.last_name = json_object[\\"last_name\\"] def __str__(self): return self.first_name + ' ' + self.last_name json_object = json.loads('{\\"first_name\\": \\"John\\", \\"last_name\\": \\"Smith\\"}') person = Person(json_object) print(person)"},{"prompt":"Write a Python code snippet to search for a given number in the given array. arr = [5, 8, 2, 10, 48, 41], number = 8","completion":"def search(arr, number): for i in range(len(arr)): if arr[i] == number: return True return False arr = [5, 8, 2, 10, 48, 41] number = 8 if search(arr, number): print(\\"Number found\\") else: print(\\"Number not found\\")"},{"prompt":"Create a python code to migrate databases between different server instances.","completion":"import os import subprocess def migrate_database(host1, username1, password1, host2, username2, password2): command_str = \\"mysqldump -h '{host1}' -u '{username1}' -p{password1} | mysql -h '{host2}' -u '{username2}' -p{password2}\\" os.system(command_str.format(host1 = host1, username1 = username1, password1 = password1, host2 = host2, username2 = username2, password2 = password2))"},{"prompt":"Create a linked list data structure in Python. Not applicable","completion":"# Node class class Node: def __init__(self, data): self.data = data self.next = None # LinkedList class class LinkedList: def __init__(self): self.head = None # Insert at the beginning of the list def insert_at_beginning(self, data): new_node = Node(data) new_node.next = self.head self.head = new_node # Insert at the end of the list def insert_at_end(self, data): new_node = Node(data) # If linked list is empty if self.head is None: self.head = new_node return # Otherwise iterate to the last node last = self.head while (last.next): last = last.next # Change the next of the last node last.next = new_node 13. Instruction: Develop a sorting algorithm to sort a list of words in alphabetical order. 13. Input: Not applicable 13. Output: # Function to sort the list of words def sort_words(words): # Split the words into letters letters = [list(word) for word in words] # Loop through the list of letters for i in range(len(letters) - 1): # Set min_idx to the current index min_idx = i # Check the rest of the list for j in range(i + 1, len(letters)): # Determine if the current letter comes before the letter in min_idx if letters[j] < letters[min_idx]: # Update the minimum index min_idx = j # Swap the minimums letters[i], letters[min_idx] = letters[min_idx], letters[i] # Re-combine the letters and join the words sorted_words = [] for word in letters: sorted_words.append(\\"\\".join(word)) return sorted_words"},{"prompt":"Generate a correct python program to return the second biggest element in a given list. [1, 5, 9, 4, 16, 11]","completion":"def second_biggest(lst): max1 = 0 max2 = 0 for num in lst: if num > max1: max1 = num elif num > max2: max2 = num return max2 second_largest_num = second_biggest([1, 5, 9, 4, 16, 11]) print(second_largest_num)"},{"prompt":"Create a Python program to calculate the total number of words and characters in a list of strings. [Hello,world!]","completion":"\\"\\"\\" Calculate the total number of words and characters in a list of strings \\"\\"\\" def count_words_and_characters(strings): total_words = 0 total_characters = 0 for string in strings: words = string.split() total_words += len(words) for word in words: total_characters += len(word) return total_words, total_characters if __name__ == '__main__': strings = [\\"Hello\\",\\"world!\\"] num_words, num_characters = count_words_and_characters(strings) print(f\\"Total number of words: {num_words}\\") print(f\\"Total number of characters: {num_characters}\\")"},{"prompt":"Create a password strength calculator in Python that takes a given password and returns a score between 0 and 10 indicating how strong the password is. Not applicable","completion":"def password_strength(password): strength = 0 # check length of the password if len(password) >= 8: strength += 2 elif len(password) >= 4: strength += 1 # check lowercase characters if any(c.islower() for c in password): strength += 2 # check uppercase characters if any(c.isupper() for c in password): strength += 2 # check for numbers if any(c.isdigit() for c in password): strength += 2 # check for special characters if any(not c.isalnum() for c in password): strength += 2 # calculate strength score score = strength * 10 / 10 return int(score) # Output: 9"},{"prompt":"Create a machine learning program in Python to classify the sentiment of a movie review. The program should accept text input and output a sentiment score between 0 and 1, with 0 being a negative sentiment and 1 being a positive sentiment. Not applicable","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer,TfidfTransformer from sklearn.pipeline import Pipeline from sklearn.linear_model import LogisticRegression train_df = pd.read_csv('movie_reviews.csv') X_train = train_df['review'] y_train = train_df['sentiment'] pipeline = Pipeline([ ('vectorizer', CountVectorizer()), ('tfidf', TfidfTransformer()), ('classifier', LogisticRegression()) ]) pipeline.fit(X_train, y_train) def sentiment(text): prediction = pipeline.predict_proba([text])[0][1] return prediction sentiment('I loved the movie!')"},{"prompt":"The code generates a GDS file for a wafer mask. To use it, call the GenerateCell() function with the desired parameters. The function takes in the following parameters: chipX, chipY, leftKerf, rightKerf, topKerf, botKerf, narray_X, narray_Y, mask_width, wafer_offset_x, wafer_offset_y, and wafer_radius. The function extracts an existing die mask top cell from a GDS file, creates a top reticle cell, adds cells to the top cell, fills the kerf with resist, creates a wafer top cell, and views the resulting cell. Finally, it writes the wafer mask GDS file.","completion":"#!/usr/bin/python import os import numpy import gdspy ld_mask_edge = {'layer': 300, 'datatype': 0} ld_kerf = {'layer': 200, 'datatype': 0} ld_acfmask = {'layer': 100, 'datatype': 0} ld_topmetal= {'layer': 81, 'datatype': 0} ld_po= {'layer': 27, 'datatype': 1} def GenerateCell(chipX = 14100., chipY=16210.,leftKerf=85.,rightKerf=15.,topKerf=465.,botKerf=15.,narray_X=13,narray_Y=11,mask_width=254000.,wafer_offset_x=-570.0,wafer_offset_y=2595.0,wafer_radius=100000) : #Extract existing die mask top cell from GDS gdsii = gdspy.current_library.read_gds(infile='Timepix3_top_ACF_Nometal.GDS',layers=ld_acfmask) die = gdspy.current_library.extract(\\"Timepix3_top\\") die_ref = gdspy.CellReference(die,origin=(leftKerf,botKerf)) #Create top reticle cell pixel_cell = gdspy.Cell(\\"Reticle_top\\") # Create a kerf layer for visualization kerfWidth = leftKerf+rightKerf+chipX kerfHeight = topKerf+botKerf+chipY Kerf = gdspy.Rectangle((0,0), (kerfWidth, kerfHeight),**ld_kerf) # Add cells to the top cell pixel_cell.add(Kerf) pixel_cell.add(die_ref.get_polygonsets()) pixel_cell.add(die_ref.get_paths()) #Fill the Kerf with Resist pixel_cell.add(gdspy.Rectangle((0,0), (leftKerf, kerfHeight),**ld_acfmask)) pixel_cell.add(gdspy.Rectangle((0,0), (kerfWidth, botKerf),**ld_acfmask)) pixel_cell.add(gdspy.Rectangle((0,kerfHeight), (kerfWidth, kerfHeight-topKerf),**ld_acfmask)) pixel_cell.add(gdspy.Rectangle((kerfWidth-rightKerf,0), (kerfWidth, kerfHeight-topKerf),**ld_acfmask)) wafer_cell = gdspy.Cell('Wafer_Top') mask_edge = gdspy.Rectangle((-mask_width/2,-mask_width/2), (mask_width/2., mask_width/2.),**ld_mask_edge) array_origin_x = -narray_X*(leftKerf+rightKerf+chipX)/2. + wafer_offset_x array_origin_y = -narray_Y*(botKerf+topKerf+chipY)/2. + wafer_offset_y wafer_edge = gdspy.Path(1,(wafer_radius,0)) wafer_edge.arc(wafer_radius,0,360,layer=400) wafer_cell.add(wafer_edge) print kerfWidth,kerfHeight wafer_cell.add(gdspy.CellArray(pixel_cell,narray_X,narray_Y,spacing=(kerfWidth,kerfHeight),origin=(array_origin_x,array_origin_y))) wafer_cell.add(mask_edge) # View the resulting cell gdspy.LayoutViewer(cells=[wafer_cell],depth=1) gdspy.write_gds(\\"wafer_mask.gds\\",cells=[wafer_cell,pixel_cell]) if __name__ == '__main__': GenerateCell()"},{"prompt":"Generate a Python program to visualize multiple dimensions of data with matplotlib. Not applicable.","completion":"import matplotlib.pyplot as plt x = [0, 1, 2, 3, 4, 5, 6, 7] y = [0, 1, 4, 9, 16, 25, 36, 49] plt.plot(x, y) plt.xlabel('X Axis') plt.ylabel('Y Axis') plt.title('Plot of X and Y') plt.show()"},{"prompt":"Create a simple Python script that prints out verses from the poem Twinkle Twinkle Little Star.","completion":"#print the verses print(\\"Twinkle, twinkle, little star,\\") print(\\"How I wonder what you are!\\") print(\\"Up above the world so high,\\") print(\\"Like a diamond in the sky.\\") print(\\"Twinkle, twinkle, little star,\\") print(\\"How I wonder what you are!\\")"},{"prompt":"Refactor a Python function to use list comprehension. def square_list(nums): squares = [] # Iterate over the given list for num in nums: # Append the value of num squared to the new list squares.append(num ** 2) return square","completion":"def square_list(nums): return [num ** 2 for num in nums]"},{"prompt":"Write a Python program to replace all empty strings in a given list with NULL. data = [A, , B, , C, ]","completion":"data = [\\"A\\", \\"NULL\\", \\"B\\", \\"NULL\\", \\"C\\", \\"NULL\\"] new_data = [] for i in data: if i == \\"\\": new_data.append(\\"NULL\\") else: new_data.append(i) print(new_data)"},{"prompt":"Generate a Python program to find the value of two positions in an array that have the greatest difference. A list of integers [7, 1, 3, 8, 25]","completion":"def max_difference(arr): # Initialize max_difference to a negative value max_difference = -float(\\"inf\\") for i in range(len(arr)): for j in range(i+1, len(arr)): diff = abs(arr[i] - arr[j]) if diff > max_difference: max_difference = diff return max_difference result = max_difference([7, 1, 3, 8, 25]) print(result)"},{"prompt":"Optimize the existing Python script to improve the performance. import timeit def find_value(l): for v in l: if v >= 0: return v return 1 print(timeit.timeit('find_value([5, 0, 4, 1, 3])', number=10000))","completion":"import timeit def find_value(l): for v in l: if v >= 0: # Early exit once value is found return v return -1 print(timeit.timeit('find_value([-5, 0, 4, -1, 3])', number=10000))"},{"prompt":"Write a Python script to list a directory's contents.","completion":"import os def list_directory_contents(directory_path): contents = os.listdir(directory_path) return contents directory = \\"your_directory_path\\" contents = list_directory_contents(directory) print(contents)"},{"prompt":"Create an endpoint for a Python Flask application which returns JSON data for HTTP GET requests. Not applicable","completion":"@app.route('/data', methods=['GET']) def get_data(): data = { 'key1': 'value1', 'key2': 'value2', 'key3': 'value3' } return jsonify(data)"},{"prompt":"This code creates a migration that adds a selforganized host to the database and updates the administrator of events that were selforganized to be selforganized. To use this code, create a migration file and include the operations to alter the Event model's url field, add a selforganized host, and update the administrator of selforganized events. Then run the migration.","completion":"# -*- coding: utf-8 -*- from __future__ import unicode_literals import re import django from django.db import models, migrations from django.db.models import Q def add_self_organized_host(apps, schema_editor): \\"\\"\\"Make new host: self-organized.\\"\\"\\" Host = apps.get_model('workshops', 'Host') Host.objects.create(domain='self-organized', fullname='self-organized', country='W3') def update_administrator_to_self_organized(apps, schema_editor): \\"\\"\\"Find all events that were self-organized and set administrator for them to be \\"self-organized\\".\\"\\"\\" Host = apps.get_model('workshops', 'Host') self_org = Host.objects.get(fullname='self-organized') Event = apps.get_model('workshops', 'Event') Event.objects.filter(administrator__isnull=True) .filter( Q(invoice_status='na-self-org') | Q(notes__contains='self-organized') | Q(notes__contains='self organized') ) .update(administrator=self_org) class Migration(migrations.Migration): dependencies = [ ('workshops', '0053_merge'), ] operations = [ # some missing migration, totally healthy (changes only validators for the field) migrations.AlterField( model_name='event', name='url', field=models.CharField(validators=[django.core.validators.RegexValidator(re.compile('https?://github.com/(?P<name>[^/]+)/(?P<repo>[^/]+)/?', 32), inverse_match=True)], unique=True, max_length=100, help_text='Setting this and startdate \\"publishes\\" the event.<br />Use link to the event's website.', blank=True, null=True), ), migrations.RunPython(add_self_organized_host), migrations.RunPython(update_administrator_to_self_organized), ]"},{"prompt":"Write a python program that takes two words and returns the length of their longest common substring. s1 = 'people' s2 = 'talent'","completion":"def longest_common_substring(s1, s2): max_length = 0 for i in range(len(s1)): for j in range(len(s2)): common_length = 0 while s1[i + common_length] == s2[j + common_length]: common_length += 1 if common_length > max_length: max_length = common_length return max_length s1 = 'people' s2 = 'talent' longest_common_substring_length = longest_common_substring(s1, s2) print(longest_common_substring_length) # Output: 3"},{"prompt":"Generate a random string of 8 alphanumeric characters using a Python program. Not applicable","completion":"import random import string def generate_random_string(size=8): return ''.join(random.choices(string.ascii_uppercase + string.digits, k=size)) random_string = generate_random_string() print(random_string) # Output: '6L6Y4M4V'"},{"prompt":"Produce a Python program which parses a given html string and extracts all text from it. HTML String: <p>This is a <strong>html</strong> string.</p>","completion":"def get_text_from_html(html_str): soup = BeautifulSoup(html_str, 'html.parser') all_text = soup.find_all(text=True) return ' '.join(all_text)"},{"prompt":"This code is a Python class named Keep2ShareCc that extends the Account class. It has methods to load account information and login to the Keep2Share.cc website. To use this code, create an instance of the Keep2ShareCc class and call its methods.","completion":"# -*- coding: utf-8 -*- import re import time from pyload.plugin.Account import Account class Keep2ShareCc(Account): __name = \\"Keep2ShareCc\\" __type = \\"account\\" __version = \\"0.05\\" __description = \\"\\"\\"Keep2Share.cc account plugin\\"\\"\\" __license = \\"GPLv3\\" __authors = [(\\"aeronaut\\", \\"aeronaut@pianoguy.de\\"), (\\"Walter Purcaro\\", \\"vuolter@gmail.com\\")] VALID_UNTIL_PATTERN = r'Premium expires:s*<b>(.+?)<' TRAFFIC_LEFT_PATTERN = r'Available traffic (today):s*<b><a href=\\"/user/statistic.html\\">(.+?)<' LOGIN_FAIL_PATTERN = r'Please fix the following input errors' def loadAccountInfo(self, user, req): validuntil = None trafficleft = -1 premium = False html = req.load(\\"http://keep2share.cc/site/profile.html\\", decode=True) m = re.search(self.VALID_UNTIL_PATTERN, html) if m: expiredate = m.group(1).strip() self.logDebug(\\"Expire date: \\" + expiredate) if expiredate == \\"LifeTime\\": premium = True validuntil = -1 else: try: validuntil = time.mktime(time.strptime(expiredate, \\"%Y.%m.%d\\")) except Exception, e: self.logError(e) else: premium = validuntil > time.mktime(time.gmtime()) m = re.search(self.TRAFFIC_LEFT_PATTERN, html) if m: try: trafficleft = self.parseTraffic(m.group(1)) except Exception, e: self.logError(e) return {'validuntil': validuntil, 'trafficleft': trafficleft, 'premium': premium} def login(self, user, data, req): req.cj.setCookie(\\"keep2share.cc\\", \\"lang\\", \\"en\\") html = req.load(\\"http://keep2share.cc/login.html\\", post={'LoginForm[username]' : user, 'LoginForm[password]' : data['password'], 'LoginForm[rememberMe]': 1, 'yt0' : \\"\\"}, decode=True) if re.search(self.LOGIN_FAIL_PATTERN, html): self.wrongPassword()"},{"prompt":"Write a Python program to find all the roots of a given quadratic equation. a = 2, b = 5, c = 3","completion":"def quadratic_roots(a, b, c): # Calculate the discriminant discriminant = (b**2) - (4*a*c) # Compute the root root1 = (-b + discriminant**0.5)/(2*a) root2 = (-b - discriminant**0.5)/(2*a) # Print the roots print(\\"The roots are {0} and {1}\\".format(root1, root2)) quadratic_roots(2, 5, -3)"},{"prompt":"Construct a for loop in Python to print the characters in a string. Hello World","completion":"for char in \\"Hello World\\": print(char)"},{"prompt":"Design an algorithm in Python that takes a list of strings and returns the list of strings in decreasing order of length. [Hello, World, This, is, a, test]","completion":"def order_by_length(input_list): return sorted(input_list, key=len, reverse=True) input_list = [\\"Hello\\", \\"World\\", \\"This\\", \\"is\\", \\"a\\", \\"test\\"] print(order_by_length(input_list))"},{"prompt":"Design a neural network in Python using Keras to detect handwriting digits. Not applicable","completion":"import keras from keras.models import Sequential from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D model = Sequential() # convolutional layers model.add(Conv2D(filters=32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1))) model.add(MaxPooling2D(pool_size=(2, 2))) model.add(Conv2D(filters=64, kernel_size=(3, 3), activation='relu')) model.add(MaxPooling2D(pool_size=(2, 2))) # fully connected layers model.add(Flatten()) model.add(Dense(128, activation='relu')) model.add(Dense(10, activation='softmax')) # compile model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"},{"prompt":"Construct a Python program to check for an array's index resolving to two different element. Array = ['a', 'b', 'a', 'c', 'a']","completion":"def find_multi_element_index(arr): \\"\\"\\" Returns index of the first element in the array which resolves to multiple different element \\"\\"\\" seen = set() for i in range(len(arr)): elem = arr[i] if elem in seen: return i else: seen.add(elem) return None arr = ['a', 'b', 'a', 'c', 'a'] ind = find_multi_element_index(arr) print('Found multiple elements for index', ind)"},{"prompt":"Build an AIbased personal assistant using Python. Not applicable","completion":"import sys import signal import time import random import speech_recognition as sr def signal_handler(signal, frame): sys.exit(0) signal.signal(signal.SIGINT, signal_handler) # Setup the recognizer rec = sr.Recognizer() mic = sr.Microphone() # Some useful commands commands = { 'time': lambda : print(time.strftime('%H:%M:%S')), 'date': lambda : print(time.strftime('%d/%m/%Y')), 'greeting': lambda : print(\\"Hello, how can I help you?\\"), 'random': lambda : print(random.randint(1, 100)) } def listen(): while True: with mic as source: audio = rec.listen(source) try: text = rec.recognize_google(audio) # Call the corresponding command commands[text]() except: print(\\"Sorry, I didn't understand that\\") listen()"},{"prompt":"Generate Python code to generate a histogram from a given data set. data = [1, 3, 5, 3, 2, 6, 8, 1, 2]","completion":"import matplotlib.pyplot as plt def generate_histogram(data): plt.hist(data) plt.xlabel(\\"Data\\") plt.ylabel(\\"Frequency\\") plt.title(\\"Histogram of Data\\") plt.show() generate_histogram(data)"},{"prompt":"Create a reinforcement learning algorithm in Python that plays the game Tic Tac Toe. The algorithm should evaluate the board state, choose a move, and learn from its mistakes over time. Not applicable","completion":"import numpy as np #Numpy array of the board board = np.zeros((3, 3)) #List to keep track of all the moves made moves_made = [] #Available actions actions = ['up', 'down', 'left', 'right'] #Target reward target = 100 # Learning rate rate = 0.2 # Discount factor gamma = 0.7 # Maximum Episodes max_episodes = 10000 #This function will evaluate the board and choose the best move def choose_action(state): if np.random.uniform(0, 1) < rate: action = np.random.choice(actions) else: values = [] # Evaluate all possible moves for a in actions: values.append(evaluate_board(state, a)) # Choose the action with the maximum value action = values.index(max(values)) return action #This function evaluates the board state for a given action def evaluate_board(state, action): next_state = make_move(state, action) reward = check_win(next_state) value = reward + gamma * get_values_actions(next_state) return value #This function makes a move on the board def make_move(state, action): next_state = np.copy(state) if action == 'up': if np.any(next_state[0] == 0): next_state[0][np.argwhere(next_state[0] == 0)] = 1 elif action == 'down': if np.any(next_state[2] == 0): next_state[2][np.argwhere(next_state[2] == 0)] = 1 elif action == 'left': for row in next_state: if 0 in row: row[np.argwhere(row == 0)] = 1 break elif action == 'right': for row in reversed(next_state): if 0 in row: row[np.argwhere(row == 0)] = 1 break return next_state #This function checks the board to see if there is a winner def check_win(next_state): win = False for row in next_state: if np.all(row == 1): win = True for col in range(3): if np.all(next_state[:,col] == 1): win = True diag1 = np.array(next_state[0][0] == next_state[1][1] == next_state[2][2] == 1) diag2 = np.array(next_state[0][2] == next_state[1][1] == next_state[2][0] == 1) if np.any(diag1): win = True elif np.any(diag2): win = True return win #This function gets the values of each action for a given board def get_values_actions(state): current_val = 0 for move in moves_made: current_val += evaluate_board(state, move) return current_val #Game Loop for i in range(max_episodes): state = board print('Episode:', i) done = False while not done: action = choose_action(state) moves_made.append(action) state = make_move(state, action) done = check_win(state) if done: reward = target print('Reward:', reward) break;"},{"prompt":"Develop a function to convert a string to an integer in Python.","completion":"def str_to_int(input_str): num = 0 for char in input_str: num = num * 10 + ord(char) - ord('0') return num"},{"prompt":"Design a function in Python that takes a list of integers and returns the difference between the maximum and the minimum values. data = [1, 5, 2, 3, 7, 9]","completion":"def getDifference(data): min_value = min(data) max_value = max(data) return max_value - min_value difference = getDifference(data) print(difference) # 8"},{"prompt":"Generate a controller in Python Flask that returns a list of data stored in a database. Example Database table: Table name: users | id | name | email | |||| | 1 | John | john@example.com | | 2 | Kate | kate@example.com | | 3 | Bob | bob@example.com |","completion":"from flask import Flask, jsonify import sqlalchemy as sql app = Flask(__name__) engine = sql.create_engine(\\"sqlite:///my_database.db\\") @app.route('/users') def list_users(): conn = engine.connect() query = \\"SELECT id, name, email FROM users\\" result = conn.execute(query) users = [dict(row.items()) for row in result] return jsonify(users) if __name__ == '__main__': app.run()"},{"prompt":"Could you create a function in Python for reaching an element in a given list with a specific index? [2, 3, 5, 7, 11], index = 3","completion":"def get_element(lst, index): return lst[index]"},{"prompt":"Design a Python class to represent a matrix and its basic operations","completion":"class Matrix: def __init__(self, data): self.data = data def __repr__(self): return str(self.data) def shape(self): \\"\\"\\" Shape of matrix \\"\\"\\" return (len(self.data), len(self.data[0])) def add_scalar(self, scalar): \\"\\"\\" Scalar addition \\"\\"\\" return [[v + scalar for v in row] for row in self.data] def add_matrix(self, other): \\"\\"\\" Matrix addition \\"\\"\\" return [[v1 + v2 for (v1, v2) in zip(row1, row2)] for (row1, row2) in zip(self.data, other.data)] def subtract_scalar(self, scalar): \\"\\"\\" Scalar subtraction \\"\\"\\" return [[v - scalar for v in row] for row in self.data] def subtract_matrix(self, other): \\"\\"\\" Matrix subtraction \\"\\"\\" return [[v1 - v2 for (v1, v2) in zip(row1, row2)] for (row1, row2) in zip(self.data, other.data)] def multiply_scalar(self, scalar): \\"\\"\\" Scalar multiplication \\"\\"\\" return [[v*scalar for v in row] for row in self.data] def transpose(self): \\"\\"\\" Matrix transposition \\"\\"\\" return [list(v) for v in list(zip(*self.data))]"},{"prompt":"Write a Python program to process a list of numbers and print out the maximum and minimum values. [4, 19, 3, 27, 9, 5]","completion":"numbers = [4, 19, -3, 27, -9, 5] max_num = max(numbers) min_num = min(numbers) print(\\"The maximum number in the list is {}\\".format(max_num)) print(\\"The minimum number in the list is {}\\".format(min_num))"},{"prompt":"Edit this Python function such that it takes an optional parameter x. def add_two_numbers(a, b): return a + b","completion":"def add_two_numbers(a, b, x=0): return a + b + x"},{"prompt":"Create a class in Python that provides methods to add, subtract, multiply and divide two integers.","completion":"class Calc: def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def add(self): return self.num1 + self.num2 def sub(self): return self.num1 - self.num2 def mul(self): return self.num1 * self.num2 def div(self): return self.num1 / self.num2 calc = Calc(4, 5) print(calc.add()) print(calc.sub()) print(calc.mul()) print(calc.div())"},{"prompt":"Create a function in Python to check if a string contains a palindrome. The function should be able to identify if a given string contains a palindrome of at least 4 characters in length. Not applicable","completion":"def is_palindrome(string): rev_str = string[::-1] for i in range(len(string) - 3): surr_str = string[i:i+4] if rev_str[i:i+4] == surr_str: return True return False"},{"prompt":"Set up conditions for a forloop for iterating over a dictionary in Python. dict = {Apple: 10, Orange: 20, Banana: 30}","completion":"keys = dict.keys() for i in keys: value = dict[i] print(i, \\":\\", value)"},{"prompt":"Create a Python program to calculate the average cost of a meal for a given restaurant. Menu: Burger, Fries, Soda 6.50; Pizza, Salad, Soda 10.00.","completion":"# Calculate average cost of a meal # List of meals. Each meal is represented as a tuple (name, cost) meals = [('Burger', 6.50), ('Fries', 2.50), ('Soda', 1.00), ('Pizza', 8.00), ('Salad', 3.00), ('Soda', 1.00)] # Calculate the total cost of all meals total_cost = sum(cost for _, cost in meals) # Calculate the average cost of a meal average_cost = total_cost / len(meals) print('Average cost of a meal: ' + str(average_cost)) # Output: Average cost of a meal: 5.083333333333334"},{"prompt":"Write a Python code to compute the greatest common divisor of two numbers.","completion":"def gcd(x, y): while(y): x, y = y, x % y return x a = int(input(\\"Enter the first number: \\")) b = int(input(\\"Enter the second number: \\")) print(gcd(a, b))"},{"prompt":"Develop a Python program to remove duplicate characters in a given string. Hello World","completion":"def remove_duplicate(my_string): char_seen = [] for character in my_string: if character not in char_seen: char_seen.append(character) return ''.join(char_seen) print(remove_duplicate(\\"Hello World\\")) #Helo Wrld"},{"prompt":"Devise a Python program to output the multiples of 7 up to a given number.","completion":"def multiplesOf7(number): for i in range(1,number+1): if(i % 7 == 0): print(i, end =\\" \\")"},{"prompt":"Write a Python program to scrape data from a website and store it in a database. The program should use the Requests library and should be composed of multiple functions. Website URL: https://www.example.com","completion":"import requests import sqlite3 conn = sqlite3.connect('example.sqlite') cur = conn.cursor() def scrape_data(): r = requests.get('https://www.example.com/') # do something with the response def store_data(data): sql = 'INSERT INTO table_name (column_1, column_2, column_3) VALUES (?, ?, ?)' cur.execute(sql, data) cur.commit() if __name__ == '__main__': scrape_data() store_data(data)"},{"prompt":"Write a Python program to capitalize the first letter of each word in a sentence.","completion":"# Capitalize the first letter of each word in a sentence sentence = \\"python is a popular programming language\\" # split the sentence into words words = sentence.split(\\" \\") # capitalize the first letter of each word words = [word.capitalize() for word in words] # join the edited words sentence = \\" \\".join(words) print(sentence) # Output: Python Is A Popular Programming Language"},{"prompt":"Create a query in Python to retrieve all records from the 'Users' table where 'active' is true. Not applicable","completion":"# Assuming you have a variable named 'conn' pointing to the database connection result = conn.execute( \\"SELECT * FROM Users WHERE active = true\\" ) for row in result: # Do something with the retrieved record # ..."},{"prompt":"Create a python script that takes in a string and prints the string reversed","completion":"def reverse_str(str): return str[::-1] # Example print(reverse_str(\\"Hello World!\\")) # Prints !dlroW olleH"},{"prompt":"Create a neural network model in Python to classify movie reviews into positive and negative categories. [ {'text': 'I absolutely loved this film!', 'label': 'Positive'}, {'text': 'It was a terrible movie', 'label': 'Negative'} ]","completion":"import tensorflow as tf #Create model model = tf.keras.Sequential() model.add(tf.keras.layers.Embedding(input_dim=1000, output_dim=32)) model.add(tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64))) model.add(tf.keras.layers.Dense(64, activation='relu')) model.add(tf.keras.layers.Dense(1, activation='sigmoid')) #Compile model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'],) #Train model model.fit(x_train, y_train, epochs=10, batch_size=128)"},{"prompt":"Write a Python program that displays the current status of a given stock quote. The stock symbol is AAPL","completion":"import requests AAPL_url = \\"https://api.iextrading.com/1.0/stock/AAPL/quote?filter=symbol,latestPrice,latestSource,latestTime\\" res = requests.get(AAPL_url) data = res.json() print(\\"Symbol: \\" + data['symbol']) print(\\"Price: \\" + str(data['latestPrice'])) print(\\"Source: \\" + data['latestSource']) print(\\"Time: \\" + data['latestTime'])"},{"prompt":"Generate a Python program to generate a random password that contains 8 characters including at least one number, one letter and one special character.","completion":"import string import random def generate_password(): letters_and_digits = string.ascii_letters + string.digits special_chars = \\"!@#%^&*\\" chars = letters_and_digits + special_chars password = random.choice(string.ascii_lowercase) password += random.choice(string.ascii_uppercase) password += random.choice(string.digits) password += random.choice(special_chars) for i in range(4): password += random.choice(chars) password_list = list(password) random.SystemRandom().shuffle(password_list) password = ''.join(password_list) return password result = generate_password() print(result)"},{"prompt":"Write a Python function to calculate the average of two given numbers.","completion":"def average(a, b): return (a+b)/2 print(average(4, 8))"},{"prompt":"Compare a given set of strings and sort them in descending order using Python. ['Python', 'Java', 'C++', 'C']","completion":"strings = ['Python', 'Java', 'C++', 'C'] strings.sort(reverse=True) print(strings) # ['Python', 'Java', 'C++', 'C']"},{"prompt":"Create a dynamic web page using Python, displaying data from a PostgreSQL database. Not applicable","completion":"import psycopg2 from flask import Flask, render_template app = Flask(__name__) # Connect to the PostgreSQL database conn = psycopg2.connect(host=\\"localhost\\", database=\\"postgres\\", user=\\"postgres\\", password=\\"password\\") cursor = conn.cursor() # Execute a query to select all rows from the table cursor.execute('SELECT * FROM table_name') results = cursor.fetchall() @app.route('/') def index(): return render_template('index.html', results=results) if __name__ == '__main__': app.run()"},{"prompt":"Create a Python script that scrapes an online store and stores the results in an SQL database. URL of the Website","completion":"import requests import sqlite3 import json # Connect to SQL database conn = sqlite3.connect(\\"results.db\\") # Scrape online store url = <placeholder url> data = requests.get(url).json() # Store scraped data in SQL database c = conn.cursor() for item in data: c.execute(\\"INSERT INTO online_store VALUES (?, ?, ?)\\", [item[\\"title\\"], item[\\"price\\"], item[\\"quantity\\"]]) conn.commit()"},{"prompt":"Write Python code tomultiply two matrices. A = [[1, 2], [3, 4]] B = [[5, 6], [7, 8]]","completion":"def multiply_matrices(A, B): if len(A[0]) != len(B): return \\"Matrices can't be multiplied!\\" # create a matrix of zeros multiplied_matrix = [[0 for row in range(len(B[0]))] for col in range(len(A))] # iterate through rows of first matrix for i in range(len(A)): # iterate through columns of second matrix for j in range(len(B[0])): # iterate through rows of second matrix for k in range(len(B)): multiplied_matrix[i][j] += A[i][k] * B[k][j] return multiplied_matrix"},{"prompt":"Create a Python program that can print out a sentence in reverse using recursion.","completion":"def reverse_sentence(sentence): # base condition for recursion if len(sentence) == 0: return \\"\\" # calling reverse_sentence recursively return reverse_sentence(sentence[1:]) + sentence[0] # driver code sentence = \\"Geeks For Geeks\\" print(reverse_sentence(sentence)) # Output: skeeG roF skeeG"},{"prompt":"Construct a class in Python to represent a point in Cartesian coordinates.","completion":"class Point: def __init__(self, x, y): self.x = x self.y = y def distance_from_origin(self): return (self.x ** 2 + self.y ** 2) ** 0.5 p = Point(3, 4) print(p.distance_from_origin())"},{"prompt":"Rewrite and optimize the following provided code using modern Python library functions. count = 0 i = 0 while i < len(words): if words[i] == 'the': count = count + 1 i = i + 1","completion":"count = 0 for word in words: if word == 'the': count += 1"},{"prompt":"Write code using Python to generate a random password of given length. Length: 8","completion":"import string import random def generate_password(length): chars=string.ascii_uppercase + string.ascii_lowercase + string.digits return ''.join(random.choice(chars) for i in range(length)) print(generate_password(8))"},{"prompt":"Create a system for monitoring vehicle usage in Python. The system should run periodic diagnostics and generate a report showing vehicle data like fuel consumption, performance and wear levels. Not applicable","completion":"import time import logging import sched import vehicle_data # module for reading vehicle data # configure logging logging.basicConfig(level=logging.INFO) # define the scheduler scheduler = sched.scheduler(time.time, time.sleep) # define diagnostics job def job_diagnostics(vehicle_id): # reading and processing vehicle data data = vehicle_data.read(vehicle_id) performance = data['performance'] fuel_consumption = data['fuel_consumption'] wear_level = data['wear_level'] # logging diagnostics logging.info(f'Vehicle {vehicle_id} diagnostics report: performance={performance} fuel_consumption={fuel_consumption} wear_level={wear_level}.') # define setup for periodic jobs def setup_job(job, vehicle_id, interval): scheduler.enter(interval, 1, job, argument=(vehicle_id,)) # setup diagnostics job for a vehicle setup_job(job_diagnostics, vehicle_id, interval=3600) # start the scheduler scheduler.run()"},{"prompt":"Code a function in Python that takes an array as input and returns an array with the elements in reverse order.","completion":"def reverse_array(arr): return arr[::-1]"},{"prompt":"Write a Python program to generate random passwords of six characters long and include lowercase letters, uppercase letters, and numbers. Not applicable","completion":"import string import random def generate_password(): password_characters = string.ascii_letters + string.digits password = ''.join(random.choice(password_characters) for i in range(6)) return password print(generate_password())"},{"prompt":"Classify the following as a Python class def add(a, b): return a + b","completion":"This is not a Python class. It is a Python function."},{"prompt":"Generate an array of random integers between 1020 with a length of 50 using Python.","completion":"import random random_array = random.sample(range(10,20), 50) print(random_array)"},{"prompt":"Create a Python application that receives user input, manipulates the data, and generates output. John is 10 years old","completion":"user_input = input(\\"What is your name and age: \\") name, age = user_input.split() print(f\\"Hi {name}, you are {int(age)+1} years old\\") # Output: Hi John, you are 11 years old"},{"prompt":"Create a function in Python to find the maximum value in a list. List of values: [13, 25, 37, 49, 61]","completion":"def find_max(list): max_value = list[0] for value in list: if value > max_value: max_value = value return max_value"},{"prompt":"Create a python script to print a word 100 times.","completion":"for i in range(100): print(\\"Word\\")"},{"prompt":"Write a Python program to scrape the text from a web page and remove all the html tags. <p>This is a sample web page.<br>This text has <b>some</b> <i>html</i> tags.</p>","completion":"import re text = \\"<p>This is a sample web page.<br>This text has <b>some</b> <i>html</i> tags.</p>\\" cleaned_text = re.sub(r'<.*?>', '', text) print(cleaned_text) # Output: This is a sample web page.This text has some html tags."},{"prompt":"Create an algorithm in Python to find the largest element in an unsorted list of numbers. [10, 5, 20, 8, 9, 12]","completion":"def find_large_element(lst): largest_number = lst[0] for i in range(1, len(lst)): if lst[i] > largest_number: largest_number = lst[i] return largest_number my_list = [10, 5, 20, 8, 9, 12] print(find_large_element(my_list)) # 20"},{"prompt":"Write a Python program to create an array of N zeros. N = 5","completion":"import numpy def create_zeros_array(N): return numpy.zeros(N) result = create_zeros_array(N) print(result)"},{"prompt":"Create a data model in Python using classes to represent a book. The class should include at least three fields: book title, author, and number of pages. Not applicable","completion":"class Book: def __init__(self, title, author, num_pages): self.title = title self.author = author self.num_pages = num_pages def __repr__(self): return f\\"Book: {self.title}, by {self.author} ({self.num_pages} pages)\\" book = Book(\\"The Great Gatsby\\", \\"F. Scott Fitzgerald\\", 180) # Book: The Great Gatsby, by F. Scott Fitzgerald (180 pages)"},{"prompt":"Write a Python program to find out the root of a given quadratic equation. 1x^2 + 4x + 4","completion":"\\"\\"\\" Find out the roots of given quadratic equation \\"\\"\\" from math import sqrt def quadratic_roots(a, b, c): # calculate the discriminant D = b**2 - 4*a*c # calculate the two roots if D == 0: return (-b+sqrt(D)) // (2*a) else: x1 = (-b + sqrt(D)) // (2*a) x2 = (-b - sqrt(D)) // (2*a) return (x1, x2) if __name__ == '__main__': a = 1 b = 4 c = 4 print(\\"Roots of the quadratic equation:\\", quadratic_roots(a, b, c))"},{"prompt":"Develop a BFS algorithm in Python.","completion":"def BFS(graph, start): visited = set() queue = [start] while queue: vertex = queue.pop(0) if vertex not in visited: visited.add(vertex) queue.extend(graph[vertex] - visited) return visited"},{"prompt":"Develop a Python program that merges two dictionaries together. dict1 = { 'a': 1, 'b': 2, 'c': 3 } dict2 = { 'd': 4, 'e': 5, 'f': 6 }","completion":"def mergeDictionaries(dict1, dict2): res_dict = {**dict1,**dict2} return res_dict dict1 = { 'a': 1, 'b': 2, 'c': 3 } dict2 = { 'd': 4, 'e': 5, 'f': 6 } print(mergeDictionaries(dict1, dict2)) # {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}"},{"prompt":"Write a Python program that takes a word as input and prints out the word in pig latin.","completion":"def pig_latin(word): if len(word) > 0 and word.isalpha(): first_letter = word[0] pig_word = word[1:] + first_letter + \\"ay\\" else: pig_word = \\"Please enter a valid word!\\" return pig_word result = pig_latin(\\"word\\") print(result)"},{"prompt":"Create a support vector machine (SVM) in Python that can classify different types of flowers based on four attributes: sepal length, sepal width, petal length, and petal width. Not applicable","completion":"import numpy as np from sklearn import datasets from sklearn import svm # load the data iris = datasets.load_iris() X = iris.data y = iris.target # split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # create the SVM model model = svm.SVC(kernel='linear') model.fit(X_train, y_train) # predict the labels for test set predictions = model.predict(X_test) # check the accuracy of the model accuracy = model.score(X_test, y_test) print(\\"Accuracy:\\", accuracy)"},{"prompt":"Modify the following line of code in Python to generate a list of odd numbers in the range [1,n]. [i for i in range (1, 10)]","completion":"[i for i in range (1, 10) if i % 2 != 0]"},{"prompt":"mplement a Binary Search Tree (BST) in Python. The BST should have methods for insertion, search and traversal. Not applicable","completion":"class Node: def __init__(self, data): self.left = None self.right = None self.data = data class BST: def __init__(self): self.root = None def insert(self, data): if self.root == None: self.root = Node(data) else: self._insert(data, self.root) def _insert(self, data, curr_node): if data < curr_node.data: if curr_node.left == None: curr_node.left = Node(data) else: self._insert(data, curr_node.left) elif data > curr_node.data: if curr_node.right == None: curr_node.right = Node(data) else: self._insert(data, curr_node.right) else: print(\\"Value already present in tree\\") def search(self, data): if self.root != None: return self._search(data, self.root) else: return False def _search(self, data, curr_node): if data == curr_node.data: return True elif data < curr_node.data and curr_node.left != None: return self._search(data, curr_node.left) elif data > curr_node.data and curr_node.right != None: return self._search(data, curr_node.right) def traverse(self): if self.root != None: self._traverse(self.root) def _traverse(self, curr_node): if curr_node.left != None: self._traverse(curr_node.left) print(curr_node.data) if curr_node.right != None: self._traverse(curr_node.right)"},{"prompt":"Generate code to serialize a Python data dictionary into a JSON object data = { name: John Doe, age: 18, hobbies: [reading, swimming, gaming], contact: { email: johndoe@example.com, mobile: +1900000000 } }","completion":"import json data_json = json.dumps(data) # Output: {\\"name\\":\\"John Doe\\",\\"age\\":18,\\"hobbies\\":[\\"reading\\",\\"swimming\\",\\"gaming\\"],\\"contact\\":{\\"email\\":\\"johndoe@example.com\\",\\"mobile\\":\\"+1900000000\\"}}"},{"prompt":"Generate a Python program for extending a list with strings. The program should take a string as input and create a new list containing the string and all the strings from the input list. inputList = [Hello, World] newString = Hi","completion":"inputList = [\\"Hello\\", \\"World\\"] newString = \\"Hi\\" outputList = [] for string in inputList: outputList.append(string) outputList.append(newString) print(outputList)"},{"prompt":"Create a Python program to generate a random password of length n. 10","completion":"import random def generate_password(length): characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#%^&*(){}[]?/' password = '' for c in range(length): password += random.choice(characters) return password length = 10 password = generate_password(length) print(password)"},{"prompt":"Output a string of length 10 containing characters from 'AZaz' in random order using Python.","completion":"import string from random import choice ''.join(choice(string.ascii_letters) for _ in range(10))"},{"prompt":"Create a Python program to make a web request to www.google.com and print the response body.","completion":"import requests response = requests.get('https://www.google.com') print(response.text)"},{"prompt":"Given the following array of strings, write a Python code snippet to remove all punctuation marks. ['hello!', 'hey,', 'where, are, you?', 'I am here']","completion":"strings = ['hello!', 'hey,', 'where, are, you?', 'I am here'] strings = [s.replace(\\",\\", \\"\\").replace(\\"?\\", \\"\\").replace(\\"!\\", \\"\\") for s in strings] print(strings)"},{"prompt":"Create a REST API call in Python that sends a GET request and displays the response. https://reqres.in/api/user","completion":"import requests # Send GET request r = requests.get('https://reqres.in/api/users') # Get response if r.status_code == 200: print(r.text)"},{"prompt":"Develop a Python program to perform this operation. Find the sum of the digits of an integer. Input: 323","completion":"def sum_digits(n): sum = 0 while n > 0: sum += n % 10 n = n // 10 return sum result = sum_digits(323) print(result)"},{"prompt":"Produce a regular expression pattern in Python that validates emails. Not applicable","completion":"import re def validate_email(email): email_regex = r'^[w.-]+@[w.-]+.w{2,4}' return re.match(email_regex, email) != None"},{"prompt":"Write a Python function to find all prime numbers between a given lower and upper bound. Lower bound = 20, Upper bound = 50","completion":"def prime_numbers(lower_bound, upper_bound): primes = [] for num in range(lower_bound, upper_bound + 1): if all(num % i != 0 for i in range(2, num)): primes.append(num) return primes prime_numbers(20, 50) # returns [23, 29, 31, 37, 41, 43, 47]"},{"prompt":"Let's write a loop in Python to take the average of two numbers Numbers: [45, 65]","completion":"x = [45, 65] total = 0 for i in range(len(x)): total += x[i] average = total / len(x) print(\\"Average of the numbers is:\\", average)"},{"prompt":"Write a Python program to build a deep learning model to categorize text into different classes.","completion":"def deep_learning_model(X, y): model = Sequential() model.add(Embedding(MAX_NB_WORDS, EMBEDDING_DIM, input_length=X.shape[1])) model.add(SpatialDropout1D(0.2)) model.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2)) model.add(Dense(13, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) return model"},{"prompt":"Write a Python program to partition a list into sublists of given size. list_a = [1, 2, 3, 4, 5, 6, 7, 8] size = 3","completion":"def partition_list(list_a, size): return [list_a[i * size:(i + 1) * size] for i in range((len(list_a) + size - 1) // size )] partition_list(list_a, size)"},{"prompt":"Create a Python program to find out if a string contains any characters from another given string. String 1: Hello String 2: eo","completion":"def contains_chars(str1, str2): if any([c in str1 for c in str2]): return True return False string1 = \\"Hello\\" string2 = \\"eo\\" print(contains_chars(string1, string2)) // Outputs: True"},{"prompt":"Generate a deep learning model in Python for classifying whether a given text is spam or not. Not applicable","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from keras.models import Sequential from keras import layers #importing the dataset df = pd.read_csv('spam.csv', encoding='latin-1') df.head() #cleaning the data msg = df.v2 corpus = msg.apply(lambda row: row.lower()) #splitting dataset into train and test sets X_train, X_test, y_train, y_test = train_test_split(corpus, msg, test_size=0.2, random_state=0) #vectorizing the data vectorizer = CountVectorizer() X_train = vectorizer.fit_transform(X_train) #generating the model model = Sequential() model.add(layers.Dense(10, input_shape=(X_train.shape[1],), activation='relu')) model.add(layers.Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.summary() #training the model history = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test), batch_size=128, verbose=2)"},{"prompt":"Design a class in python that calculates the area and perimeter of a rectangle.","completion":"class Rectangle: def __init__(self, width, length): self.width = width self.length = length def get_area(self): return self.length * self.width def get_perimeter(self): return 2*(self.length + self.width)"},{"prompt":"Design an algorithm to compute the GCD of 2 numbers in Python. 4, 12","completion":"def gcd(a, b): if a == 0: return b return gcd(b % a, a) if __name__ == '__main__': a = 4 b = 12 result = gcd(a, b) print (\\"GCD of 4 and 12 is \\" + str(result))"},{"prompt":"Create a machine learning model in Python that predicts the price of a house. The model should use a linear regression algorithm and the input data should include square footage, number of bedrooms, and number of bathrooms. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.linear_model import LinearRegression #read the dataset data = pd.read_csv('house_data.csv') #split features and target X = data.iloc[:, :-1].values y = data.iloc[:, 3].values #initialize the linear regression model model = LinearRegression() # fit the model with the data model.fit(X, y) #make predictions on the test set predicted_price = model.predict([[square_footage, num_bedrooms, num_bathrooms]]) print('The expected price for the house is: ',predicted_price)"},{"prompt":"Develop a function in Python to generate a random number between 1 and 10. Not applicable","completion":"import random # Function to generate a random number between 1 and 10 def random_num(): number = random.randint(1, 10) return number # Driver code num = random_num() print(\\"Random number between 1 and 10 is: \\", num)"},{"prompt":"Create a python program to build a dictionary with city names as its keys and location/population information as its values. Key: Dallas Value: Texas, USA, Population: 1.3 millio","completion":"def build_city_info_dictionary(city, location, population): city_info_dict = dict() city_info_dict[city] = (location, population) return city_info_dict city = 'Dallas' location = 'Texas, USA' population = '1.3 million' city_info_dict = build_city_info_dictionary(city, location, population) print(city_info_dict) # {'Dallas': ('Texas, USA', '1.3 million')}"},{"prompt":"eate a function in Python that takes an array of integers and returns a string of the array in reverse order. [1, 3, 5, 7]","completion":"def reverse_list(arr): rev_arr = [] for i in range(len(arr)-1,-1,-1): rev_arr.append(arr[i]) return ''.join(map(str,rev_arr)) arr = [1, 3, 5, 7] output_string = reverse_list(arr) print(output_string)"},{"prompt":"Create a Python program that determines the largest prime factor of a given number.","completion":"def max_prime_factor(n): # Initialize the maximum prime factor # variable with the lowest one maxPrime = -1 # Print the number of 2s that divide n while n % 2 == 0: maxPrime = 2 n >>= 1 # equivalent to n /= 2 # n must be odd at this point, # thus skip the even numbers and # iterate only for odd integers for i in range(3, int(math.sqrt(n)) + 1, 2): while n % i == 0: maxPrime = i n = n / i # This condition is to handle the # case when n is a prime number # greater than 2 if n > 2: maxPrime = n return int(maxPrime)"},{"prompt":"Create a Python function to check if a given number is abundant or not. An abundant number is a number which is less than the sum of its proper divisors. number = 24","completion":"def is_abundant(number): sum = 0 for i in range(1, number): if number % i == 0: sum += i return sum > number"},{"prompt":"Create a class in Python for representing a movie with fields for title, release year, and rating. Not applicable","completion":"class Movie: def __init__(self, title, release_year, rating): self.title = title self.release_year = release_year self.rating = rating # Test movie = Movie(\\"The Godfather\\", 1972, 9.2) print(movie.title) # The Godfather"},{"prompt":"Write Python code to create a program that, given a string s and an integer k, finds all the substrings of s with length less than or equal to k. s = abcdefg and k = 2","completion":"def find_all_substrings(s, k): substrings = [] for start_idx in range(len(s)): if start_idx + k > len(s): break for end_idx in range(start_idx+k, len(s)+1): substrings.append(s[start_idx:end_idx]) return substrings s = \\"abcdefg\\" k = 2 print(find_all_substrings(s, k))"},{"prompt":"Program a Python function to calculate the average of a list of integers. [1, 3, 5, 3, 7, 1]","completion":"def avg_list(lst): sum_lst = 0 for i in range(len(lst)): sum_lst = sum_lst + lst[i] return sum_lst/len(lst) print(avg_list([1, 3, 5, 3, 7, 1]))"},{"prompt":"Write a Python program to filter a list and sort it in descending order by length. a = [apple, ball, cat, dog, elephant, frog, giraffe]","completion":"a.sort(key=len, reverse=True) # Output: ['elephant', 'giraffe', 'ball', 'apple', 'dog', 'cat', 'frog']"},{"prompt":"Rewrite the following code in Python to print a 5x5 matrix of random integers between 0 and 4. Not applicable","completion":"import numpy as np x = np.random.randint(0,5,(5,5)) print(x)"},{"prompt":"Given a text string, write a program in Python which will remove any two consecutive duplicate words from the string. text: The the quick brown fox fox jumps over the lazy dog dog","completion":"text = \\"The quick brown fox jumps over the lazy dog\\" def remove_duplicate_words(text): words = [] for word in text.split(): if not words or word != words[-1]: words.append(word) return \\" \\".join(words) text = \\"The the quick brown fox fox jumps over the lazy dog dog\\" text = remove_duplicate_words(text) print(text)"},{"prompt":"Generate a code that will print out all substrings of a given string. pytho","completion":"def substrings(s): sub_str_list = [] for i in range(len(s)): for j in range(i + 1, len(s)+1): sub_str = s[i:j] sub_str_list.append(sub_str) return sub_str_list result = substrings(\\"python\\") print(result)"},{"prompt":"mplement a function in Python that takes a string as a parameter and capitalizes the first letter of each word in the string. The quick brown fox","completion":"def capitalize(input_string): if len(input_string) == 0: return '' else: words = input_string.split() capitalized_words = [word.capitalize() for word in words] return ' '.join(capitalized_words) print(capitalize('The quick brown fox'))"},{"prompt":"Construct a Python program to find the index of a given item in a list [a, b, c], b","completion":"def index_of_item(list_of_items, item): for i in range(len(list_of_items)): if list_of_items[i] == item: return i list_of_items = [\\"a\\", \\"b\\", \\"c\\"] result = index_of_item(list_of_items, \\"b\\") print(result)"},{"prompt":"mplement a solution that uses threading in Python to reverse a given string. The given string is Hello World.","completion":"import threading string = 'Hello World' def reverse_string(string, direction): if direction == 'left': string = string[::-1] elif direction == 'right': string = string[::1] print(string) t1 = threading.Thread(target=reverse_string, args=(string, 'left')) t2 = threading.Thread(target=reverse_string, args=(string, 'right')) t1.start() t2.start() t1.join() t2.join()"},{"prompt":"Create a GUI application in Python that displays a greeting message when opened. Not applicable","completion":"import tkinter as tk root = tk.Tk() # Create greeting label greeting = tk.Label(text='Hello World!') greeting.pack() tk.mainloop()"},{"prompt":"Write a Python program to organize the words of a sentence into alphabetical order. Hello to the world of programming","completion":"sorted_words = sorted(input_string.split(), key=str.lower) print('Sorted words are:') for word in sorted_words: print(word)"},{"prompt":"Create a text analysis library in Python that utilizes a Transformer model to tokenize words and labels the sentiment of each token text = This was a great experience.","completion":"# Import the required packages import nltk from transformers import * # Load the pretrained model model = BertTokenizer.from_pretrained('bert-base-cased') # Tokenize the input text input_ids = model.encode(text) # Construct the text analysis library text_analysis = { 'tokens': model.convert_ids_to_tokens(input_ids), 'sentiments': model.polarity_scores(input_ids) } # Print the library print(text_analysis)"},{"prompt":"Generate a program to find the longest palindromic substring in given string in Python. forgeeksskeegfor","completion":"def longestPalSubstr(string): maxLength = 1 start = 0 length = len(string) low = 0 high = 0 # One by one consider every character as center point of even and length palindromes for i in range(1, length): # Find the longest even length palindrome with center points as i-1 and i. low = i - 1 high = i while low >= 0 and high < length and string[low] == string[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 # Find the longest odd length palindrome with center point as i low = i - 1 high = i + 1 while low >= 0 and high < length and string[low] == string[high]: if high - low + 1 > maxLength: start = low maxLength = high - low + 1 low -= 1 high += 1 print(\\"Longest palindrome substring is:\\", end = \\"\\") print(string[start:start + maxLength]) string = \\"forgeeksskeegfor\\" longestPalSubstr(string)"},{"prompt":"Create a Python program to generate a Fibonacci number sequence. Length of the sequence = 10","completion":"def generate_Fibonacci_sequence(length): # Initialize the sequence fib_sequence = [0, 1] # Generate the sequence for i in range(2, length): fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2]) # Return the sequence return fib_sequence print(generate_Fibonacci_sequence(10))"},{"prompt":"Optimize a Python program for calculating the Fibonacci sequence for large inputs. The program should be optimized for runtime. Not applicable","completion":"def fibonacci(num): # Initialize first two Fibonacci Numbers a = 0 b = 1 # Initialize result result = 0 if num == 0: return a elif num == 1: return b else: for i in range(2, num + 1): # Sum numbers result = a + b # Initialize a and b a = b b = result return result # Using memoization def fibonacci_memoize(num, memo): # Check if the entry is in the array if memo[num] is not None: return memo[num] # Summize numbers if entry is not in array if num <= 1: result = num else: result = fibonacci_memoize(num - 1, memo) + fibonacci_memoize(num - 2, memo) # Save result in array memo[num] = result return result #Main function def main(): num = int(input(\\"Enter number: \\")) #result without memorization result_1 = fibonacci(num) print(f\\"Result without memoization: {result_1}\\") # Intialize a memoization array memo = [None] * (num + 1) #result with memorization result_2 = fibonacci_memoize(num, memo) print(f\\"Result with memoization: {result_2}\\") if __name__ == \\"__main__\\": main()"},{"prompt":"Create a function in Python to extract all number from a comma separated string.","completion":"def extract_numbers(s): return [int(el) for el in s.split(',') if el.lstrip('-').isnumeric()]"},{"prompt":"Write Python code to classify a lead email. The email content: Hello, I am interested in getting more information about your product.","completion":"# Detect the intent of the email intent = \\"lead\\" # Label the email label = \\"Lead\\""},{"prompt":"Design an algorithm using Python to classify nouns as either animals or vehicles. Not applicable","completion":"import nltk from nltk.corpus import wordnet # Define the list of animal words animal_words = ['dog', 'cat', 'mouse', 'bird', 'fish', 'lion', 'tiger'] # Define the list of vehicle words vehicle_words = ['car', 'truck', 'bike', 'bus', 'train', 'boat'] # Define a function to classify nouns def classify(noun): # Find the synsets (synonyms) of the given noun synsets = wordnet.synsets(noun) # Get the first synset synset = synsets[0] # Get the lemmas (words in the synset) lemmas = synset.lemma_names() # Check if the lemmas in the synset are in the animal or vehicle word list if any([word in lemmas for word in animal_words]): return 'Animal' elif any([word in lemmas for word in vehicle_words]): return 'Vehicle' else: return 'Unknown' # Define a noun to classify noun = 'elephant' # Classify the noun classification = classify(noun) # Print the classification print(classification)"},{"prompt":"Create a for loop in python to loop through a list of numbers. [1, 5, 8]","completion":"for num in [1, 5, 8]: print(num)"},{"prompt":"Create an algorithm in Python that compares two lists of strings and returns only the strings that are found in both lists. list_one=[apple, banana, carrot, kiwi] list_two=[kiwi, cucumber, grape, apple]","completion":"def compare_lists(list_one, list_two): \\"\\"\\"Compare two lists of strings and return a list containing strings found in both.\\"\\"\\" result_list = [] for elem in list_one: if elem in list_two: result_list.append(elem) return result_list list_one = [\\"apple\\", \\"banana\\", \\"carrot\\", \\"kiwi\\"] list_two = [\\"kiwi\\", \\"cucumber\\", \\"grape\\", \\"apple\\"] print(compare_lists(list_one, list_two)) # Output: [\\"apple\\", \\"kiwi\\"]"},{"prompt":"Design a program in Python to accept a string from the user, remove all vowels from the string, and capitalize each character. I like ice cream","completion":"# Function to remove all vowels def removeVowels(string): vowels = ('a', 'e', 'i', 'o', 'u') for x in string.lower(): if x in vowels: string = string.replace(x, \\"\\") return string # Get input from user input_string = input(\\"Enter a string: \\") # Remove all vowels and capitalize output_string = removeVowels(input_string).upper() # Print the result print(output_string)"},{"prompt":"Optimize a Python program that calculates the sum of the numbers up to a given integer. integer = 5 def calculateSum(n): sum = 0 for i in range(n+1): sum = sum + i return sum print(calculateSum(integer))","completion":"def calculateSum(n): return (n * (n+1))//2 print(calculateSum(integer))"},{"prompt":"Write a Python program that takes two numbers, a and b, and prints the sum of those numbers, (a + b).","completion":"def add_numbers(a, b): print(a + b) add_numbers(3, 2)"},{"prompt":"Create a function in Python which takes in two strings and concatenates them into one. Hello, and World!","completion":"def concat_string(str1, str2): return str1 + str2"},{"prompt":"Develop a machine learning algorithm in Python that can classify an email as either spam or ham.","completion":"from sklearn.naive_bayes import MultinomialNB from sklearn.feature_extraction.text import CountVectorizer from sklearn.metrics import accuracy_score # Load the data X_train = [...] y_train = [...] X_test = [...] y_test = [...] # Create the count vectorizer vectorizer = CountVectorizer() X_train_vectors = vectorizer.fit_transform(X_train) X_test_vectors = vectorizer.transform(X_test) # Create the Multinomial Naive Bayes classifier clf = MultinomialNB() clf.fit(X_train_vectors, y_train) # Make predictions predictions = clf.predict(X_test_vectors) # Print accuracy print(accuracy_score(y_test, predictions))"},{"prompt":"Modify the following Python function to ensure that the two strings are converted to lowercase before comparison. def compare_strings(str1, str2): return str1 == str2","completion":"def compare_strings(str1, str2): str1 = str1.lower() str2 = str2.lower() return str1 == str2"},{"prompt":"Create a Python script to generate a random 12digit long phone number","completion":"import random def generate_phone_number(): return '{}{}{}'.format( random.randint(0, 9), random.randint(0, 9), ''.join( map( str, [random.randint(0, 9) for i in range(0, 9)]) ) ) print(generate_phone_number())"},{"prompt":"Create a Python function that takes a list of names as input and returns a list of numbers representing the length of the names. names=[Alice, John, Steve]","completion":"def nameLengths(names): lengths = [] for name in names: lengths.append(len(name)) return lengths # Example nameLengths([\\"Alice\\", \\"John\\", \\"Steve\\"]) # [5, 4, 5]"},{"prompt":"Create a Python script that will create a dictionary that contains the character count of the given string. Python","completion":"from collections import Counter str = \\"Python\\" # character count # using collections.Counter() res = Counter(str) # printing result print(\\"Count of all characters in GeeksforGeeks is :n \\" + str(res))"},{"prompt":"Create a Python program which takes a given list of temperatures (in Celsius) and converts them to Fahrenheit. [21, 12, 4]","completion":"def c2f(c): return (c * 9 / 5) + 32 celsius = [21, 12, -4] fahrenheit = [] for temp in celsius: fahrenheit.append(c2f(temp)) print(fahrenheit) # Output: [69.8, 53.6, 24.8]"},{"prompt":"Generate a Python program to generate a random permutation of the integers in a given list","completion":"from random import shuffle def random_permutation(lst): shuffle(lst) return lst"},{"prompt":"Optimize a Python script for web scraping. The original Python script is given below: import requests import bs4 url = 'https://example.com' r = requests.get(url) soup = bs4.BeautifulSoup(r.text, 'html.parser') links = soup.find_all('a') for link in links: print(link.get('href'))","completion":"import requests import bs4 from lxml import html url = 'https://example.com' headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'} r = requests.get(url, headers=headers) tree = html.fromstring(r.content) links = tree.xpath('//a/@href') for link in links: print(link)"},{"prompt":"Write a Python program to perform a merge sort on given numbers.","completion":"def merge_sort(nums): if len(nums) > 1: mid_index = len(nums) // 2 left_half = nums[:mid_index] right_half = nums[mid_index:] merge_sort(left_half) merge_sort(right_half) i = j = k = 0 while i < len(left_half) and j < len(right_half): if left_half[i] < right_half[j]: nums[k] = left_half[i] i += 1 else: nums[k] = right_half[j] j += 1 k += 1 while i < len(left_half): nums[k] = left_half[i] i += 1 k += 1 while j < len(right_half): nums[k] = right_half[j] j += 1 k += 1"},{"prompt":"Create a GPT3 model that can generate code snippets for Python programs. Not applicable","completion":"The GPT-3 model should take in code snippets with given instructions, and generate code snippets in Python based on those instructions. It should be able to generate code for various programming tasks, from simple to complex, such as data cleaning, data manipulation, custom functions, feature engineering, testing, and object-oriented programming. The model should also be able to recognize patterns and apply them to new code snippets."},{"prompt":"Create a Python code snippet to convert a given JSON string into a Python dictionary. '{name: John, age: 30, city: New York}'","completion":"import json json_string = '{\\"name\\": \\"John\\", \\"age\\": 30, \\"city\\": \\"New York\\"}' python_dict = json.loads(json_string) print(python_dict)"},{"prompt":"Create an AWS Lambda function that takes an email address and sends a welcome email to that address. Use the AWS Python SDK for creating the Lambda function. Example email: sample@email.com","completion":"import boto3 import json def lambda_handler(event, context): # Create an SES client ses = boto3.client('ses') # Get the email address from the input email = event['email'] # Construct the email response = ses.send_email( Destination={ 'ToAddresses': [ email ] }, Message={ 'Body': { 'Text': { 'Charset': 'UTF-8', 'Data': 'Welcome! Thank you for signing up with us.' } }, 'Subject': { 'Charset': 'UTF-8', 'Data': 'Welcome!' } }, Source='noreply@example.com' ) # Return the message ID return { 'message': 'Email sent successfully.', 'messageId': response['MessageId'] }"},{"prompt":"mplement a Python script to flatten a list of lists. list_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9]]","completion":"def flatten_list(list_of_lists): flattened = [] for sub_list in list_of_lists: for item in sub_list: flattened.append(item) return flattened"},{"prompt":"Create a web scraper in Python that takes a URL as input and scrapes the page for information about the product that the page is selling. It should return the product name, price, and description as output. URL: https://www.example.com/exampleproduc","completion":"#imports import requests from bs4 import BeautifulSoup #setup url = 'https://www.example.com/example-product' page = requests.get(url) #scraping soup = BeautifulSoup(page.content, 'html.parser') name = soup.h1.string price = soup.find('span', class_='example-price').string description = soup.find('div', class_='example-description').string #output print(name) print(price) print(description)"},{"prompt":"Generate a code in Python that converts a string to a valid Python identifier. String to convert: helloworld","completion":"import re def convert_to_identifier(input_string): # Replace all non-alphanumeric characters output_string = re.sub(r'W+', '', input_string) # If the first character is non-alphabetic, prepend an underscore if not output_string[0].isalpha(): output_string = \\"_\\" + output_string return output_string identifier = convert_to_identifier(\\"hello-world\\") print(identifier)"},{"prompt":"mplement an algorithm in Python that finds the most frequently occuring element in a list. [3, 5, 4, 3, 2, 1, 4, 3, 4]","completion":"def most_frequent(list): count = 0 element = None for i in list: curr_element = i curr_count = list.count(i) if curr_count > count: element = curr_element count = curr_count return element, count most_frequent_element, frequency = most_frequent([3, 5, 4, 3, 2, 1, 4, 3, 4]) print(most_frequent_element) # Output: 4"},{"prompt":"Generate a python statement to print a descriptive message about a given string. string = Hello World!","completion":"print(f\\"Given string is {string}, and its length is {len(string)}\\")"},{"prompt":"The code creates required directories and moves files to a specific directory. To use this code, provide a target directory as an argument and call the function restructureMaildirDirectory on the target directory.","completion":"#!/usr/bin/python -OO # This file is part of Archivematica. # # Copyright 2010-2013 Artefactual Systems Inc. <http://artefactual.com> # # Archivematica is free software: you can redistribute it and/or modify # it under the terms of the GNU Affero General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # Archivematica is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with Archivematica. If not, see <http://www.gnu.org/licenses/>. # @package Archivematica # @subpackage archivematicaClientScript # @author Joseph Perry <joseph@artefactual.com> import os import sys import shutil requiredDirectories = [\\"logs\\", \\"logs/fileMeta\\", \\"metadata\\", \\"metadata/submissionDocumentation\\", \\"objects\\", \\"objects/Maildir\\"] optionalFiles = \\"processingMCP.xml\\" def restructureMaildirDirectory(unitPath): for dir in requiredDirectories: dirPath = os.path.join(unitPath, dir) if not os.path.isdir(dirPath): os.mkdir(dirPath) print \\"creating: \\", dir for item in os.listdir(unitPath): dst = os.path.join(unitPath, \\"objects\\", \\"Maildir\\") + \\"/.\\" itemPath = os.path.join(unitPath, item) if os.path.isdir(itemPath) and item not in requiredDirectories: shutil.move(itemPath, dst) print \\"moving directory to objects/Maildir: \\", item elif os.path.isfile(itemPath) and item not in optionalFiles: shutil.move(itemPath, dst) print \\"moving file to objects/Maildir: \\", item if __name__ == '__main__': target = sys.argv[1] restructureMaildirDirectory(target)"},{"prompt":"Python, code to present permutations of a certain list of strings AB, CD","completion":"from itertools import permutations strings = ['AB', 'CD'] perm = permutations(strings) for string in list(perm): print(string)"},{"prompt":"Design a Python generator to return all possible permutations of a given collection. [1,2,3]","completion":"def permutations(nums): if len(nums) <=1: yield nums else: for perm in permutations(nums[1:]): for i in range(len(nums)): # nb elements[0:1] works in both string and list contexts yield perm[:i] + nums[0:1] + perm[i:] # Driver program to test above data = [1, 2, 3] for perm in list(permutations(data)): print(perm)"},{"prompt":"Design a data structure in Python to store a list of cars with associated properties like name, color, and price.","completion":"class CarData: def __init__(self): self.cars = {} def add_car(self, name, color, price): car = { \\"name\\": name, \\"color\\": color, \\"price\\": price } self.cars[name] = car def get_car(self, name): if name in self.cars: return self.cars[name] return None"},{"prompt":"Write a Python program to clean a given dataset for an AI system. Dataset: { name: John, age: 50, height: 180 cm, weight: 75 kg }","completion":"def clean_dataset(dataset): cleaned_dataset = dataset.copy() cleaned_dataset['age'] = int(dataset['age']) cleaned_dataset['height'] = float(dataset['height'].split(' cm')[0]) cleaned_dataset['weight'] = float(dataset['weight'].split(' kg')[0]) return cleaned_dataset"},{"prompt":"Generate a function in Python to compare two strings and determine whether they are anagrams.","completion":"def is_anagram(str1, str2): # space complexity O(1) count = [0] * 26 # count occurances of character in first string for i in range(len(str1)): count[ord(str1[i]) - ord('a')] += 1 # subtracting count for each character of second string for i in range(len(str2)): count[ord(str2[i]) - ord('a')] -= 1 # If both strings are anagrams, all counts should be 0 for i in range(26): if (count[i] != 0): return False return True"},{"prompt":"Create a Python program that takes a list of numbers, and finds a pair of numbers in the list whose sum equals the given number [2, 3, 4, 5], 5","completion":"def find_pair_with_sum(nums, target): seen = set() for num in nums: if target - num in seen: return [target - num, num] seen.add(num) print(find_pair_with_sum([2, 3, 4, 5], 5))"},{"prompt":"Design a Python Class for a Student and provide a constructor for creating objects of that class.","completion":"class Student: def __init__(self, firstName, lastName, age): self.firstName = firstName self.lastName = lastName self.age = age"},{"prompt":"Generate a Python program to calculate the number of days between two given dates. Start date: 5th June 2020 End date: 17th June 2020","completion":"from datetime import date start_date = date(2020, 6, 5) end_date = date(2020, 6, 17) delta = end_date - start_date print(delta.days)"},{"prompt":"Create a Python class called Car that has two instance variables, year and make.","completion":"class Car: def __init__(self, year, make): self.year = year self.make = make"},{"prompt":"Create a data structure in Python that stores customer name, address, and phone number.","completion":"customer_data = { 'Name': 'John Smith', 'Address': '123 Main Street, Anytown, CA 12345', 'Phone': '555-555-5555' }"},{"prompt":"Develop a model in Python to predict the price of a house given its size, age, and number of bedrooms.","completion":"\\"\\"\\"Develop a model in Python to predict the price of a house given its size, age, and number of bedrooms.\\"\\"\\" import numpy as np import pandas as pd from sklearn.metrics import mean_squared_error from sklearn.linear_model import LinearRegression # Load the data data = pd.read_csv('houses_data.csv') # Split the data into features and labels features = data[['size','age','num_bedrooms']] labels = data['price'] # Build the model and train it model = LinearRegression() model.fit(features,labels) # Make predictions predictions = model.predict(features) # Calculate the mean squared error print(mean_squared_error(labels, predictions))"},{"prompt":"Generate a valid Python code for checking if a given string is a palindrome or not?","completion":"def is_palindrome(string): return string == string[::-1]"},{"prompt":"Can you generate a Python program that takes a list of numbers and creates a new list with only even numbers? [1, 2, 3, 4, 5, 6, 7, 8]","completion":"def extractEvenNumbers(numbers): even_numbers = [num for num in numbers if num % 2 == 0] return even_numbers numbers = [1, 2, 3, 4, 5, 6, 7, 8] even_numbers = extractEvenNumbers(numbers) print(even_numbers)"},{"prompt":"Combine multiple lists using Python and preserve duplicates. list1 = [1, 2, 3] list2 = [2, 3, 4]","completion":"combined_list = list1 + list2 # preserves duplicates print(list(set(combined_list)))"},{"prompt":"w can you write a function in Python to pivot a data frame with 2 columns? Data frame: A B 1 a b 2 c d","completion":"import pandas as pd def pivot_dataframe(df): df_pivot = df.pivot(index = 'A', columns ='B') return df_pivot df = pd.DataFrame({'A':{1:'a',2:'c'}, 'B':{1:'b',2:'d'} }) print(pivot_dataframe(df)) # Output B A b d a c"},{"prompt":"Write a Python program to sort a dictionary by values. d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}","completion":"sorted_d = dict(sorted(d.items(), key=lambda x: x[1])) print(sorted_d) # Output: {0: 0, 2: 1, 1: 2, 4: 3, 3: 4}"},{"prompt":"Design a class in Python that finds the highest number in a given array of integers. [3, 5, 1, 8, 11, 12]","completion":"class HighestNumberFinder: def __init__(self, array): self.array = array def find_highest_number(self): highest_number = self.array[0] for number in self.array: if (number > highest_number): highest_number = number return highest_number"},{"prompt":"Write a Python program that uses a template engine to generate HTML web page. The program should define a template for a simple website and generate the webpage from that template. Not applicable","completion":"from string import Template mytemplate = Template('<html><body><title>title</title><h1>heading</h1>content</body></html>') data = { 'title':'My Website', 'heading':'Hello World!', 'content': 'This is my website!' } html = mytemplate.substitute(data) print(html)"},{"prompt":"Make a program in Python","completion":"# print hello world print(\\"Hello World!\\")"},{"prompt":"Create a function in Python that takes two strings as an input and returns their concatenation. str1 = Hello str2 = World","completion":"def concat_string(str1, str2): return str1 + str2 result = concat_string(str1, str2) print(result)"},{"prompt":"Create a website to monitor stock prices with a Python web scraper. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/stock-prices' source = requests.get(url).text soup = BeautifulSoup(source, 'html.parser') stocks = soup.find_all('div', class_='stock-price') for stock in stocks: # Extract stock name name = stock.find('h2').text # Extract stock price price = stock.find('span').text # Print stock name and price print(f'{name}: {price}')"},{"prompt":"Write a Python program to predict a value for a given input. Input data: [5.1, 3.3, 1.7, 0.5]","completion":"from sklearn import datasets from sklearn.linear_model import LinearRegression # load the diabetes datasets diabetes = datasets.load_diabetes() # fit a linear regression model to the data model = LinearRegression() model.fit(diabetes.data, diabetes.target) # make prediction value = model.predict([[5.1, 3.3, 1.7, 0.5]]) print(value)"},{"prompt":"Write a Python program to reformat a string using a given dictionary. Hello {name}, it's {time} to go,{'name':'John', 'time':'2pm'}","completion":"def reformat_string(string, mapping): for k, v in mapping.items(): string = string.replace('{' + k + '}', v) return string if __name__ == \\"__main__\\": string = \\"Hello {name}, it's {time} to go\\" mapping = {\\"name\\": \\"John\\", \\"time\\": \\"2pm\\"} print(reformat_string(string, mapping)) # Output: Hello John, it's 2pm to go"},{"prompt":"Generate Python code to get a list of the top 20 Reddit posts from a given subreddit.","completion":"import requests import json # Get the response from reddit url = \\"https://www.reddit.com/r/dataisbeautiful/top/.json\\" headers = {\\"User-Agent\\": \\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\\"} response = requests.get(url, headers=headers, allow_redirects=False) data = json.loads(response.text) # Get the list of the top 20 posts post_list = data['data']['children'] top_20_posts = [post['data']['title'] for post in post_list[:20]] print(top_20_posts)"},{"prompt":"Generate a code for a Python program that removes all instances of a given character from a string. 'Hello World!', 'o'","completion":"def remove_letter(word, letter): new_word = '' for char in word: if char != letter: new_word += char return new_word print(remove_letter('Hello World!', 'o'))"},{"prompt":"Write a Python program which Replaces all occurrences of a given substring in a string","completion":"def replace_substring(string, substring, replacement): res = \\"\\" for i in range(len(string)): if string[i:i+len(substring)] == substring: res += replacement i += len(substring) else: res += string[i] return res"},{"prompt":"Create a command line application in Python which takes a list of numbers and returns whether the list is sorted. [1, 4, 5, 6, 7, 9]","completion":"import sys def is_sorted(nums): for i in range(len(nums) - 1): if nums[i] > nums[i + 1]: return False return True nums = [int(x) for x in sys.argv[1:]] if is_sorted(nums): print('The list is sorted') else: print('The list is not sorted')"},{"prompt":"Write a Python program to remove a specified item from a dictionary. sample_dict = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5}","completion":"def remove_from_dict(d, key): if key in d: del d[key] return d result = remove_from_dict(sample_dict, 'three') print(result)"},{"prompt":"Create a method in Python that returns the result for the factorial of a given number. 5","completion":"def factorial(n): if n == 0: return 1 else: return n*factorial(n-1) x = 5 result = factorial(x) print(result) # Output: 120"},{"prompt":"This is a Python code for creating user registration form with additional fields. To use this code, import the necessary modules and create a UserForm, UserProfileForm, and UserRegistrationForm classes. The UserRegistrationForm class extends the UserCreationForm class and adds email2, timezone2, and skype fields. The clean_email2 method checks if the email already exists in the database and raises a validation error if it does. The save method saves the user's email, timezone, and skype fields to the UserProfile model.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- # Copyright (C) 2011 Adriano Monteiro Marques # # Author: Amit Pal <amix.pal@gmail.com> # # This program is free software: you can redistribute it and/or modify # it under the terms of the GNU Affero General Public License as # published by the Free Software Foundation, either version 3 of the # License, or (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU Affero General Public License for more details. # # You should have received a copy of the GNU Affero General Public License # along with this program. If not, see <http://www.gnu.org/licenses/>. from django import forms from django.contrib.auth.forms import UserCreationForm from django.contrib.auth.forms import AdminPasswordChangeForm from django.contrib.auth.models import User from django.utils.translation import ugettext as _ from datetime import datetime import pytz from pytz import timezone import pdb from netadmin.users.models import UserProfile class UserForm(forms.ModelForm): class Meta: model = User fields = ('first_name', 'last_name', 'email') class UserProfileForm(forms.ModelForm): class Meta: model = UserProfile fields = ('is_public', 'in_search') class UserRegistrationForm(UserCreationForm): email2 = forms.EmailField(label=_(\\"E-mail\\")) timezone2 = forms.ChoiceField(choices=[(x, x) for x in pytz.common_timezones], label = _(\\"TimeZone\\")) skype = forms.CharField(max_length=20) def clean_email2(self): email2 = self.cleaned_data['email2'] try: user = User.objects.get(email=email2) except User.DoesNotExist: return email2 raise forms.ValidationError(_(\\"Account with this e-mail address already exists.\\")) def save(self, commit=True): user = super(UserRegistrationForm, self).save(commit=False) user.email = self.cleaned_data[\\"email2\\"] user.is_active = False if commit: user.save() user_profile = user.get_profile() user_profile.timezone = self.cleaned_data[\\"timezone2\\"] user_profile.skype = self.cleaned_data[\\"skype\\"] user_profile.save() return user"},{"prompt":"Generate a machine learning model in Python to predict prices from the provided dataset.","completion":"# Load data import pandas as pd df = pd.read_csv('data.csv') # Extract features and target X = df.drop('price', axis=1).values y = df['price'].values # Split into train and test from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train machine learning model from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X_train, y_train) # Generate predictions y_pred = regressor.predict(X_test)"},{"prompt":"Generate a function in Python which takes two parameters and determines the greatest common divisor between the two numbers.","completion":"def find_gcd(a, b): if a == 0: return b if b == 0: return a if a == b: return a if a > b: return find_gcd(a-b, b) return find_gcd(a, b-a)"},{"prompt":"Create a graphql query in python to retrieve all the books stored in a database. Not applicable","completion":"def books_query(): books_query = ''' query { books { id title author published_date } } ''' return books_query"},{"prompt":"Design a class in Python to store the customer information.","completion":"class Customer: def __init__(self, customer_id, customer_name, customer_address): self.customer_id= customer_id self.customer_name = customer_name self.customer_address = customer_address"},{"prompt":"Generate a Python class to handle an employee's details and facilitate their salary calculation.","completion":"class Employee: def __init__(self, name, rate_per_hour, hours_worked): self.name = name self.rate_per_hour = rate_per_hour self.hours_worked = hours_worked def calculate_salary(self): return self.rate_per_hour * self.hours_worked"},{"prompt":"Develop a solution in Python for finding the closest two points from a given list of points.","completion":"def distance(p1, p2): return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)**0.5 def closest_pair(points): min_dist = float('inf') closest_pair = None for i, p1 in enumerate(points): for j, p2 in enumerate(points[i+1:]): d = distance(p1, p2) if d < min_dist: min_dist = d closest_pair = p1, p2 return closest_pair"},{"prompt":"Compose a code in Python to check if a list contains any duplicate elements. [1, 2, 3, 4, 5]","completion":"def has_duplicates(arr): seen = set() for elem in arr: if elem in seen: return True else: seen.add(elem) return False test_arr = [1, 2, 3, 4, 5] result = has_duplicates(test_arr) print(result)"},{"prompt":"Write a Python function to round a float to 2 decimal places.","completion":"def round_to_two_decimal_places(n): return round(n, 2)"},{"prompt":"Create an HTML page with a search form. When the form is submitted, it should query a Python API and display the results on the same page. Not applicable","completion":"<html> <body> <h1>Search Example</h1> <form action=\\"process_form.py\\" method=\\"post\\"> <input type=\\"text\\" name=\\"query\\" placeholder=\\"Search...\\"> <input type=\\"submit\\" value=\\"Search\\"> </form> <div> {{results}} </div> </body> </html> process_form.py import requests import json query = request.form.get('query') response = requests.get(f'https://example.com/query?q={query}') results = json.loads(response.content) return render_template('index.html', results=results)"},{"prompt":"Generate a stack class in python that implements the push, pop and peek methods","completion":"class Stack: def __init__(self): self.stack = [] def push(self, data): self.stack.append(data) def pop(self): if self.is_empty(): return None else: return self.stack.pop() def peek(self): return self.stack[-1] def is_empty(self): return len(self.stack) == 0"},{"prompt":"Modify the following Python code to add a try/except block to catch any errors. def add_numbers(a, b): return a + b","completion":"def add_numbers(a, b): try: sum = a + b except: print(\\"Error: Could not compute the sum of the numbers\\") return None else: return sum"},{"prompt":"Create a basic Python script that uses the requests library to get a web page and prints it out. Not applicable","completion":"# importing the requests library import requests # api-endpoint URL = \\"http://www.example.com\\" # sending get request and saving the response as response object r = requests.get(url = URL) # extracting data in json format data = r.text # printing the output print(data)"},{"prompt":"Write a Python script to calculate the prime factorization of a number. number = 225","completion":"def prime_factorization(number): i = 2 factors = [] while i * i <= number: if number % i: i += 1 else: number //= i factors.append(i) if number > 1: factors.append(number) return factors prime_factorization(number)"},{"prompt":"Write a Python program that generates several random passwords with the conditions of: passwords must be at least 8 characters, include a number, a lowercase letter, an uppercase letter, and a special character. Not applicable","completion":"import string import random def generate_password(): password_length = 8 all_chars = string.ascii_letters + string.digits + string.punctuation password_string = ''.join(random.choice(all_chars) for i in range(password_length)) return password_string def has_number(password): return any(letter.isdigit() for letter in password) def has_lowercase(password): return any(letter.islower() for letter in password) def has_uppercase(password): return any(letter.isupper() for letter in password) def has_special_char(password): return any(letter in string.punctuation for letter in password) while True: password = generate_password() if(has_number(password) and has_lowercase(password) and has_uppercase(password) and has_special_char(password)): print('Password generated:', password) break"},{"prompt":"Classify the following Python statement. print(Hello World!)","completion":"Statement Type: Print Statement."},{"prompt":"Can you provide a Python program to remove all punctuation from a given sentence? This is a sentence; with, punctuation.","completion":"import string def remove_punctuation(sentence): translator = str.maketrans('', '', string.punctuation) return sentence.translate(translator) #Test print(remove_punctuation(\\"This is a sentence; with, punctuation.\\"))"},{"prompt":"Write a Python program to convert a given list of numbers into their corresponding binary representation. [3,8,6]","completion":"def list_to_binary(nums): binary = [] for num in nums: binary.append(bin(num)) return binary result = list_to_binary([3, 8, 6]) print(result)"},{"prompt":"Write a Python program to combine two lists of dictionaries into one list. list1: [{'a','b', 'c'}, {'d' : 'e', 'f': 'g'}] list2: [{'h' : 'i', 'j': 'k'}, {'l': 'm'}]","completion":"combined = [{'a': 'b', 'c'}, {'d': 'e', 'f': 'g'}, {'h': 'i', 'j' : 'k'}, {'l': 'm'}]"},{"prompt":"Create a Python program to generate a random 5 x 5 maze using a breadthfirst search. Not applicable","completion":"import random def generate_maze(m, n): # Create an empty maze maze = [[0] * n for _ in range(m)] # Generate walls randomly for i in range(m): for j in range(n): if random.randint(0, 1) == 1: maze[i][j] = 1 # Generate the exit and entrance maze[0][0] = 0 maze[m-1][n-1] = 0 # Use a breadth-first search algorithm to traverse the maze # and find the path to the exit start = (0, 0) stack = [] stack.append(start) while stack: current = stack.pop() i, j = current if i == m-1 and j == n-1: break if i > 0 and maze[i-1][j] == 0: stack.append((i-1, j)) maze[i-1][j] = 2 if i < m-1 and maze[i+1][j] == 0: stack.append((i+1, j)) maze[i+1][j] = 2 if j > 0 and maze[i][j-1] == 0: stack.append((i, j-1)) maze[i][j-1] = 2 if j < n-1 and maze[i][j+1] == 0: stack.append((i, j+1)) maze[i][j+1] = 2 # Generate a unique representation of the maze # 1 is for walls, 0 is for paths, 2 is for visited paths for i in range(m): s = '' for j in range(n): s += str(maze[i][j]) print(s) if __name__ == '__main__': # Generate the random 5 x 5 maze generate_maze(5, 5)"},{"prompt":"mplement a stack data structure in Python.","completion":"\\"\\"\\" Implement a stack data structure in Python. \\"\\"\\" class Stack(object): def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if not self.is_empty(): return self.items.pop() def peek(self): if not self.is_empty(): return self.items[-1] def is_empty(self): return len(self.items) == 0 def size(self): return len(self.items)"},{"prompt":"Write a code in Python to remove duplicate elements from a list. [1,2,3,4,2,2,4]","completion":"def remove_duplicates(nums): new_list = [] for num in nums: if num not in new_list: new_list.append(num) return new_list print(remove_duplicates([1,2,3,4,2,2,4]))"},{"prompt":"Given a Python dictionary and a value, write a program to remove key from the dictionary having the given value. dict_inp = {'a':1, 'b':2, 'c':3, 'd':2} value = 2","completion":"def remove_key_by_value(dictionary, value): keys_to_remove = [] for key, val in dictionary.items(): if val == value: keys_to_remove.append(key) for key in keys_to_remove: del dictionary[key] return dictionary"},{"prompt":"Generate a program in Python that takes a given dictionary and finds the key with the highest value. my_dict = { 'a': 1, 'b': 5, 'c': 3 }","completion":"def highest_value(d): key, highest_val = None, -float(\\"inf\\") for k, val in d.items(): if val > highest_val: key, highest_val = k, val return key highest_key = highest_value(my_dict) print(highest_key)"},{"prompt":"Write a python program which reads a given temperature in Celcius, and converts it to Fahrenheit. Celcius = 25°","completion":"celcius = 25 fahrenheit = 77 print (\\"{0}° celcius is {1}° fahrenheit\\".format(celcius, fahrenheit))"},{"prompt":"Create a program that prints out a directory of a given folder.","completion":"# Python program to print a directory of a given folder import os # Function to get Directory Listing def directoryListing(dirname): # Create list to hold filenames filenames = os.listdir(dirname) # Print the Directory Contents print(\\"Directory contents of \\"+dirname +\\": \\") for file in filenames: print(file) # Driver Code if __name__ == '__main__': # Provide the relative path dirname = '.' # Calling Directory Listing Function directoryListing(dirname)"},{"prompt":"mplement a Python class with the name Contact. This class should contain three public properties name, email, and phone. Not applicable","completion":"class Contact: def __init__(self, name, email, phone): self.name = name self.email = email self.phone = phone"},{"prompt":"Create an algorithm in Python to print the binary representation of a given number. 23","completion":"def binary_rep(num): binary_string = \\"\\" while num>0: remainder = num%2 binary_string = str(remainder) + binary_string num = num//2 print(binary_string) binary_rep(23) # prints 10111"},{"prompt":"Write a Python script to split a string into a list based on the given delimiter. string: The,quick,brown,fox ; delimiter: ,","completion":"def split_string(string, delimiter): return string.split(delimiter)"},{"prompt":"Write a Python program to modify a given solution to meet a given set of requirements. Solution: def add_item(item_list, new_item): item_list.append(new_item) return Requirements: The function should return the index of the item that was added to the list.","completion":"def modify_solution(solution, requirements): code_lines = solution.splitlines() code_lines.pop() code_lines.append(\\"item_index = item_list.index(new_item)\\") code_lines.append(\\"return item_index\\") return \\"n\\".join(code_lines)"},{"prompt":"Create a Python module that evaluates a given expression and returns the result 2+2*2","completion":"def evaluate(expr): return eval(expr)"},{"prompt":"Create a function in Python to find the maximum and minimum of a list of numbers. [4, 8, 15, 16, 23, 42]","completion":"def find_max_min(numbers): max_num = float(\\"-inf\\") min_num = float(\\"inf\\") for num in numbers: if num > max_num: max_num = num elif num < min_num: min_num = num return (max_num, min_num)"},{"prompt":"Write a Python script for developing a simple calculator.","completion":"import operator ops = { \\"+\\": operator.add, \\"-\\": operator.sub, \\"*\\": operator.mul, \\"/\\": operator.truediv } while True: print(\\"nEnter 'q' to exit.\\") num1 = input(\\"nEnter a number: \\") if num1 == 'q': break op = input(\\"Enter an operator: \\") num2 = input(\\"Enter another number: \\") answer = ops[op](float(num1), float(num2)) print(\\"The answer is:\\", answer)"},{"prompt":"Classify the following objects using a decision tree in Python: * A basketball * A tennis ball","completion":"from sklearn.tree import DecisionTreeClassifier X = [['basketball'],[‘tennis ball']] y = ['ball', 'ball'] clf = DecisionTreeClassifier() clf.fit(X,y) prediction = clf.predict([['basketball']]) print(prediction) # Output: ['ball']"},{"prompt":"Create a Django application with two models: Post and Comment. Each Post should have a title, text, and a list of associated Comment objects. Not applicable","completion":"from django.db import models # Create your models here. class Post(models.Model): title = models.CharField(max_length=255) text = models.TextField() class Comment(models.Model): post = models.ForeignKey(Post, on_delete=models.CASCADE) text = models.TextField() # In your migrations file: from django.db import migrations, models def create_posts_and_comments(apps, schema_editor): Post = apps.get_model('app', 'Post') Comment = apps.get_model('app', 'Comment') post = Post.objects.create( title='My first post', text='Hello world!' ) Comment.objects.create( post=post, text='Nice post!' ) class Migration(migrations.Migration): dependencies = [ # other dependencies ] operations = [ migrations.CreateModel( name='Post', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('title', models.CharField(max_length=255)), ('text', models.TextField()), ], ), migrations.CreateModel( name='Comment', fields=[ ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), ('post', models.ForeignKey(on_delete=models.CASCADE, to='app.Post')), ('text', models.TextField()), ], ), migrations.RunPython(create_posts_and_comments) ]"},{"prompt":"mplement a function in Python that takes a number as an argument and returns true if the number is even, false otherwise.","completion":"def is_even(number): if (number % 2 == 0): return True else: return False"},{"prompt":"Create a Python function to generate an array of random numbers that follows a binomial distribution. n = 100 p = 0.5","completion":"import numpy as np def binomial(n, p): return np.random.binomial(n, p) dist = binomial(n, p)"},{"prompt":"Create a function in Python that takes a list as an argument and returns the list in reverse order. [1,2,3,4,5]","completion":"def reverse_list(lst): return lst[::-1]"},{"prompt":"Create a game in Python that involves a user guessing a number between 1 and 10. Not applicable","completion":"import random print(\\"Let's play a guessing game!\\") number = random.randint(1, 10) guess = 0 while guess != number: guess = int(input(\\"Guess a number between 1 and 10: \\")) if guess == number: print(\\"You got it!\\") else: print(\\"Try again.\\")"},{"prompt":"Formulate a Python code for calculating the Levenshtein distance for two strings.","completion":"def calculateLevenshteinDistance(str1, str2): n = len(str1) m = len(str2) # Create a matrix to store results dp = [[0 for x in range(m + 1)] for x in range(n + 1)] # Initialize the first row and column with the difference of lengths for i in range(n + 1): for j in range(m + 1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i # Iterate through the matrix and replace the # cells with the required edit distance for i in range(1, n + 1): for j in range(1, m + 1): if str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[n][m]"},{"prompt":"Generate a python script to sort a list of numbers.","completion":"def sort_numbers(nums): for i in range(len(nums)-1): for j in range(i+1, len(nums)): if nums[i] > nums[j]: temp = nums[i] nums[i] = nums[j] nums[j] = temp return nums"},{"prompt":"Create an algorithm in Python to check if a given string contains valid parentheses. [[{{}}]]","completion":"def isValid(s): stack = [] dict = {\\"]\\":\\"[\\", \\"}\\":\\"{\\", \\")\\":\\"(\\"} for char in s: if char in dict.values(): stack.append(char) elif char in dict.keys(): if stack == [] or dict[char] != stack.pop(): return False else: return False return stack == [] print(isValid('[[{{}}]]'))"},{"prompt":"Create a program in Python to sort a given list of words alphabetically words=[“Computer”, “Science”, “Engineering”, “Technology”]","completion":"def sort_words(words): words.sort() return words words = [\\"Computer\\", \\"Science\\", \\"Engineering\\", \\"Technology\\"] sorted_words = sort_words(words) print(sorted_words) # Output: ['Computer', 'Engineering', 'Science', 'Technology']"},{"prompt":"Write a code to send an email using Python and SMTP.","completion":"import smtplib # Creates SMTP session server = smtplib.SMTP('smtp.gmail.com', 587) # Start TLS for security server.starttls() # Authentication server.login('your_email_address', 'password') # Message to be sent message = 'This is a test email' # sending the mail server.sendmail('sender_email_address', 'receiver_email_address', message) # terminating the session server.quit()"},{"prompt":"Create a Python program that takes a list as argument and returns it in reverse order. [1, 3, 5, 6, 10]","completion":"def reverse_list(lst): return lst[::-1] lst = [1, 3, 5, 6, 10] print(reverse_list(lst))"},{"prompt":"Generate a Python code to print the largest prime factor of the given positive integer 21","completion":"def largest_prime_factor(n): # Initialize maximum prime factor max_prime = -1 # Print the number of 2s that divide n while n % 2 == 0: max_prime = 2 n /= 2 # equivalent to n = n / 2 # n must be odd at this point, # thus skip the even numbers and # iterate only for odd integers for i in range(3, int(math.sqrt(n))+1, 2): while n % i == 0: max_prime = i n = n / i # This condition is to handle the case # when n is a prime number greater than 2 if n > 2: max_prime = n return int(max_prime) # Driver code n = 21 print(largest_prime_factor(n))"},{"prompt":"Create a Python program to parse a HTML page and extract all the hyperlinks from it. let html = \`<html> <body> <a href=http://www.example.com>Link 1</a> <a href=http://www.example.org>Link 2</a> <a href=http://www.example.net>Link 3</a> </body> </html>\`","completion":"from html.parser import HTMLParser class LinkParser(HTMLParser): def handle_starttag(self, tag, attrs): if tag == 'a': for (attrs,value) in attrs: if attrs=='href': print(value) parser = LinkParser() parser.feed(html)"},{"prompt":"Translate the following Python code to JavaScript: def sum(a, b): Not applicable","completion":"function sum(a, b) { return a + b; }"},{"prompt":"Create a Python program that returns a certain number of prime numbers. 10","completion":"# function to check whether a number is prime or not def is_prime(num): for i in range(2,num): if (num % i == 0): return False else: return True # list to store prime numbers primes = [] # create a list of prime numbers for num in range(2,100): if (is_prime(num)): primes.append(num) # print the first 10 prime numbers for x in range(10): print(primes[x])"},{"prompt":"Create a class called DiskAccessControl that controls access to the disk files. The class should have an __init__ method that takes in the following parameters: invertedIndexFileName (string), fileLen (int), onMemInd (dictionary), nameDict (dictionary), and mods (dictionary). The class should have a method called getIndexLine that takes in a word (string) and returns a list containing the index data of the word requested. If the word is not in the index, it should write an empty list to the index file at the word's future position. The class should also have a method called pushIntoIndexFile that takes in fileIndexedName (string), word (string), and wordIndexTouple (tuple) and pushes the inverted list of a term into the index. The class should have a method called merge that takes in outerModifications (dictionary) and pushes the provided modifications into the instance's modifications list. The class should have a method called dumpMemory that dumps the onmemory metafiles and writes the modifications to the index.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- ''' José F. R. Fonseca See Attached License file Controls the access to the disk. Defines the class DIskAccessControl, an object to control the disk files. Multithread-writes the files ''' import ast import os import time from linecache import getline from threading import Thread ''' ONLY WRITES TO THE FILE WHEN THE CACHE OF LINES TO WRITE OVERCOMES THIS MUCH BYTES, or if it is the last batch of files to be written. ''' FILEACCESS_THRASHOLD = 1024*1024/32 ''' CLASSES ''' class DiskAccessControl(): # @IgnorePep8 ''' Control the access to the disk, being the middleware to read and write the index files ''' def __init__(self, invertedIndexFileName, fileLen=None, onMemInd=None, nameDict=None, mods=None): ''' Instantiates the class as the only reference to the index files :param invertedIndexFileName: string, name of the index file :param fileLen: int, original number of lines of the index file, when known :param onMemInd: dictionary, on-memory index that translates terms into file positions :param nameDict: dictionary, on-memory index that translates the name of each file indexed into a hash into a hash :param mods: dictionary, side-loaded modifications to be put into the index manually. ''' # loads the name of the index file self.GENERATED_INVERTED_INDEX = invertedIndexFileName # if there is a parameter fileLen, uses it. if not, counts the number # of lines in the indexFile if fileLen is None: # print \\"GETTING THE FILE # OF LINES!\\" lineNum = 0 # reads every line, and counts the number of lines in the index file @IgnorePep8 with open(self.GENERATED_INVERTED_INDEX, \\"r\\") as indFile: for lineNum, dummy in enumerate(indFile): pass self.fileLength = lineNum + 1 else: self.fileLength = fileLen # if there is a parameter onMemInd, uses it. if not, loads it from the # memory dump file metaindex if onMemInd is None: print \\"FILLING MEMORY INDEX WITH LAST SESSION'S!\\" # OnMemoryIndex: dictionary that maps WORD to HashWord # Loads the metaindex file into main memory, into onMemoryIndex attribute @IgnorePep8 with open(\\"metaIndex-\\"+self.GENERATED_INVERTED_INDEX, \\"r\\") as metaindex: # @IgnorePep8 data = metaindex.read() self.onMemoryIndex = ast.literal_eval(data) else: self.onMemoryIndex = onMemInd # if there is a parameter namesDict, uses it. if not, loads it from the # memory dump file namesDict, mapping a file name to its hash if nameDict is None: print \\"FILLING NAMES DICTIONARY WITH LAST SESSION'S!\\" # Loads the namesDict file into main memory, into namesDict attribute @IgnorePep8 with open(\\"namesDict-\\"+self.GENERATED_INVERTED_INDEX, \\"r\\") as namesDict: # @IgnorePep8 data = namesDict.read() self.namesDictionary = ast.literal_eval(data) else: self.namesDictionary = nameDict # if there is a parameter mods, uses it. if not, creates a new empty # python dictionary to retain on-memory changes to the index if mods is None: self.modifications = {} else: self.modifications = mods ''' METHODS # ''' def getIndexLine(self, word): ''' GETS a line of the index file, containing the inverted list of the word provided. If inexistent, returns an empty list :return a list containing the index data of the word requested. It may be: the inverted list on the index, the modifications done to such list in memory, or an empty list for a new term to be indexed :param word: string to retrieve the index data of it, a term ''' # if the word is on the onMemoryIndex, and thereby on the file index, if word in self.onMemoryIndex.keys(): # retrieves the hash of the word in wrd wrd = self.onMemoryIndex[word] # if that word has already been modified, its modifications will be # on main memory, and do not need to be retrieved from the disk. if wrd not in self.modifications.keys(): try: # retrieves a list of the data in the line of the index # file on disk that contains the inverted index of the # word, given its hash. The value of wrd must be # summed with 1 because there is no line 0 on files return ast.literal_eval(getline(self.GENERATED_INVERTED_INDEX, int(wrd)+1).split(\\":::\\")[1]) # @IgnorePep8 # prints-out eventual exceptions, as the hash searched in # the index file, and the data recovered from it, as a string # separated by \\"(|||)\\" rather than spaces except: print wrd, \\"(|||)\\", getline(self.GENERATED_INVERTED_INDEX, int(wrd)+1) # @IgnorePep8 else: # returns the modifications to the index line, already on memory @IgnorePep8 return self.modifications[wrd] # if the word searched is not in the index, else: # opens the index file, generates a new hash for the word to be # indexed, and writes an empty list to the index file at the # words's future position. Returns an empty list with open(self.GENERATED_INVERTED_INDEX, \\"a\\") as indFile: self.onMemoryIndex[word] = str(len(self.onMemoryIndex.keys())) # @IgnorePep8 indFile.write(self.onMemoryIndex[word]+\\":::\\"+\\"[]\\"+\\"n\\") self.fileLength += 1 return [] def pushIntoIndexFile(self, fileIndexedName, word, wordIndexTouple): ''' Pushes the preshly produced inverted list of a term into the index :param fileIndexedName: string, name of the file just indexed :param word: string, term to be pushed into the index :param wordIndexTouple: touple, containing the number of elements in the positions list, and a (integer) positions list of occurences of the term in the file indexed ''' # gets the line of the index for the term pushed indexLine = self.getIndexLine(word) # if the file pushed has already been indexed before, recovers its # hash name if fileIndexedName in self.namesDictionary.keys(): hashName = self.namesDictionary[fileIndexedName] # if not, creates a new hash for the file name, as a number else: self.namesDictionary[fileIndexedName] = hashName = str(len(self.namesDictionary.keys())) # @IgnorePep8 try: # includes the index of the new file pushed into the respective # line in the on memory inverted list of the term, avoiding # repetitions. Includes the name of the file, the number of # occurences and the positions the term indexed happens to occur. indexLine.append((hashName, wordIndexTouple[0], (list(set(wordIndexTouple[1]))), )) # @IgnorePep8 # includes the freshly produced new index for the term in the # on- memory modifications to be written on disk self.modifications[self.onMemoryIndex[word]] = indexLine # reveals an I/O error. bureaucracy except IndexError: print \\"Got an IndexError!\\"+str((word, self.onMemoryIndex[word], indexLine, )) # @IgnorePep8 def merge(self, outerModifications): ''' Pushes provided modifications (made by another thread, for example, into this instance's modifications list :param outerModifications: dictionary, mapping terms to inverted lists, are modifications to the index file imported from another instance ''' # for each key of the outer modifications dictionary, for outKey in outerModifications.keys(): if outKey in self.modifications.keys(): # if the key is on the current modifications list, joins the # contents of both lists, and sorts by the hash of the terms self.modifications[outKey].extend(outerModifications[outKey]) self.modifications[outKey] = sorted(self.modifications[outKey], key=lambda mod: int(mod[0])) # @IgnorePep8 # if the outer key is not on the current modifications list, # adds to it else: self.modifications[outKey] = outerModifications[outKey] def dumpMetafiles(self): ''' Dumps the on-memory metafiles, the dictionaries mapping terms to file positions (hashes) and file names to hashes, to disk files. ''' with open(\\"metaIndex-\\"+self.GENERATED_INVERTED_INDEX, \\"w\\") as metaindex: # @IgnorePep8 metaindex.write(str(self.onMemoryIndex)) with open(\\"namesDict-\\"+self.GENERATED_INVERTED_INDEX, \\"w\\") as namesDict: # @IgnorePep8 namesDict.write(str(self.namesDictionary)) def dumpMemory(self): ''' Dumps the metafiles and writes the modifications to the index. It is, by far, the most time-costly operation on the entire program, what was to be expected, since it involves heavy file writting and reading. ''' # Creates a new thread to write the metafiles concurrently metafileWriter = Thread(target=self.dumpMetafiles) metafileWriter.start() # string writting buffer, to be written on the file printString = \\"\\" # for each modification on memory, got in order, writes on the string # buffer, and when it gets full, writes to a temporary disk file the # results of merging the modification on each line of the index, # and the unmodified lines, ordered by the hashes of the terms modKeys = sorted([k for k in self.modifications.keys()]) with open(self.GENERATED_INVERTED_INDEX, \\"r\\") as oldIndexFile: # @IgnorePep8 with open(\\"TEMP_\\"+self.GENERATED_INVERTED_INDEX, \\"w+\\") as newIndexFile: # @IgnorePep8 for line in oldIndexFile: # reads the data in the old index file line lineNum = line.split(\\":::\\")[0] # if the modifications line is to be written in the string # writing buffer, because the read line was modified if lineNum in modKeys: # @IgnorePep8 printString += lineNum+\\":::\\"+str(self.modifications[lineNum])+\\"n\\" # @IgnorePep8 else: # if the original index line is to be written on the # file writing buffer, saves it printString += line # if the buffer is full to the threshold, writes it to # the disk file if len(printString) >= FILEACCESS_THRASHOLD: newIndexFile.write(printString) printString = \\"\\" # renames the old inverted Index to become a backup os.rename(self.GENERATED_INVERTED_INDEX, \\"Backup_\\"+str(time.time())+\\"_\\"+self.GENERATED_INVERTED_INDEX) # @IgnorePep8 # rename the new to replace the old one os.rename(\\"TEMP_\\"+self.GENERATED_INVERTED_INDEX, self.GENERATED_INVERTED_INDEX) # @IgnorePep8 # assures that the metafile writer thread is done writing metafileWriter.join()"},{"prompt":"Design a class using Python that represents a bank account with a balance.","completion":"class BankAccount: def __init__(self, balance=0.0): self.balance = balance def deposit(self, amount): self.balance += amount return self.balance def withdraw(self, amount): self.balance -= amount return self.balance"},{"prompt":"Write a Python program that takes in a string and returns the reverse of it.","completion":"def reverse_string(string): return string[::-1]"},{"prompt":"Use the given data structure to create a Python dictionary that represents a contact list. Name: John Smith Phone: 1234567890 Address: 123 Main St. City: Seattle State: W","completion":"dictionary = { \\"John Smith\\": { \\"phone\\": \\"123-456-7890\\", \\"address\\": \\"123 Main St.\\", \\"city\\": \\"Seattle\\", \\"state\\": \\"WA\\" } }"},{"prompt":"Generate a Python script to find the most frequently used word in a given text. text.tx","completion":"# import Counter and open file from collections import Counter with open('text.txt','r') as file: # split file into words words = file.read().split() # count and sort words count_words = Counter(words) sorted_count_words = count_words.most_common() # get the most frequent word most_frequent_word = sorted_count_words[0][0] number_of_occurences = sorted_count_words[0][1] # print results print('The most frequently used word is \\"{}\\" with {} occurence(s).'.format(most_frequent_word, number_of_occurences))"},{"prompt":"Create a Python program to read in a list of items and print them out in reverse order. [Apple, Pear, Banana, Orange]","completion":"my_list = [\\"Apple\\", \\"Pear\\", \\"Banana\\", \\"Orange\\"] for item in reversed(my_list): print(item)"},{"prompt":"Create a forloop in Python that prints the numbers from 0 to 10.","completion":"for i in range(11): print(i)"},{"prompt":"Define a Python function to calculate the factorial of an integer number.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Generate a Python script that takes two numbers as arguments and returns the greatest common divisor. 21 and 15","completion":"def gcd(a, b): if b == 0: return a return gcd(b, a % b) a = 21 b = 15 print(gcd(a, b))"},{"prompt":"Generate a Python dictionary to store the user preferences like language, font size and background color.","completion":"user_preferences = { 'language': 'english', 'font_size': 12, 'background_color': '#FFFFFF' }"},{"prompt":"Write a Python program to create a histogram of the data in the given array. Array: [2, 3, 5, 6, 8, 4, 2, 4, 6, 9]","completion":"import matplotlib.pyplot as plt data = [2, 3, 5, 6, 8, 4, 2, 4, 6, 9] plt.hist(data) plt.title(\\"Histogram of Data\\") plt.xlabel(\\"Data Values\\") plt.ylabel(\\"Frequency\\") plt.show()"},{"prompt":"Develop a Python program to find the longest common subsequence between two string. lmnopq abclmnopq","completion":"def lcs(X, Y): # find the length of the strings m = len(X) n = len(Y) # declaring the array for storing the dp values L = [[None]*(n+1) for i in range(m+1)] \\"\\"\\"Following steps build L[m+1][n+1] in bottom up fashion Note: L[i][j] contains length of LCS of X[0..i-1] and Y[0..j-1]\\"\\"\\" for i in range(m+1): for j in range(n+1): if i == 0 or j == 0 : L[i][j] = 0 elif X[i-1] == Y[j-1]: L[i][j] = L[i-1][j-1]+1 else: L[i][j] = max(L[i-1][j] , L[i][j-1]) # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] return L[m][n] # Driver program X = \\"lmnopq\\" Y = \\"abclmnopq\\" print(\\"Length of LCS is \\", lcs(X, Y))"},{"prompt":"Create a Python program to generate a list with unique elements from a given list.","completion":"def unique_list(lst): unique = [] for item in lst: if item not in unique: unique.append(item) return unique"},{"prompt":"Generate a code that implements a quicksort algorithm on an array array = [3, 4, 7, 1, 8, 5]","completion":"# Python code for Quick Sort def quickSort(arr): less = [] pivots = [] more = [] if len(arr) <= 1: return arr else: pivot = arr[0] for i in arr: if i < pivot: less.append(i) elif i > pivot: more.append(i) else: pivots.append(i) less = quickSort(less) more = quickSort(more) return less + pivots + more # Driver Code to test above arr = [3, 4, 7, 1, 8, 5] # Function call sorted_array = quickSort(arr) # Print the sorted array print(sorted_array)"},{"prompt":"Create a program in Python that can extract data from an HTML page. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Get the specified URL url = 'https://example.com/' response = requests.get(url) # Parse the response soup = BeautifulSoup(response.text, 'html.parser') # Extract the desired data title = soup.find('title').text body = soup.find('body').text # Print the extracted data print(title) print(body)"},{"prompt":"Generate the following output in Python Given a list [1,2,3,4,5] generate the following: [[1], [2], [3], [4], [5], [1, 2], [2, 3], [3, 4], [4, 5], [1,2, 3], [2, 3, 4], [3, 4, 5]]","completion":"def generate(lst): res = [] for i in range(1, len(lst) + 1): for j in range(len(lst) - i + 1): res.append(lst[j: j + i]) return res"},{"prompt":"Generate a Python program to output the maximum element in a given array. The array is [1, 4, 9, 3, 6, 5]","completion":"def findMax(arr): max_number = arr[0] for i in range(1, len(arr)): if arr[i] > max_number: max_number = arr[i] return max_number arr = [1, 4, 9, 3, 6, 5] max_number = findMax(arr) print(\\"The maximum element in the array is:\\", max_number)"},{"prompt":"Create a recursive function with python as the language to find the sum of all elements in a list.","completion":"def sumOfList(list): if len(list) == 1: return list[0] else: return list[0] + sumOfList(list[1:])"},{"prompt":"Could you provide an implementation of a binary search tree in Python?","completion":"class Node: def __init__(self, val): self.val = val self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def add(self, val): new_node = Node(val) if not self.root: self.root = new_node else: curr = self.root while True: if val < curr.val: if not curr.left: curr.left = new_node break curr = curr.left else: if not curr.right: curr.right = new_node break curr = curr.right return self.root def search(self, val): curr = self.root while curr: if val < curr.val: curr = curr.left elif val > curr.val: curr = curr.right else: return curr return False"},{"prompt":"Create a program in Python to strip all white spaces from a given string.","completion":"def strip_whitespace(string): return string.replace(' ', '')"},{"prompt":"Edit the following Python program to handle user input as an integer num = input(Enter an integer) print(The number is: + num)","completion":"num = int(input(\\"Enter an integer: \\")) print(\\"The number is:\\", num)"},{"prompt":"Create a Python program to implement a web scraper for obtaining the latest news headlines from CNN. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Function to web scrape news from CNN def scrape_cnn(): url = \\"https://www.cnn.com/\\" page = requests.get(url) if page.status_code != 200: return False soup = BeautifulSoup(page.content, 'html.parser') headlines = [] for headline in soup.find_all('h3', {'class': 'cd__headline'}): headlines.append(headline.get_text().strip()) return headlines # Call the function to scrape news from CNN headlines = scrape_cnn() # Print out the headlines for headline in headlines: print(headline)"},{"prompt":"Design a function in Python for encoding a message using ROT13 cipher. Plaintext: attack at dawn Key: 13","completion":"import string def rot13_encode(plaintext, key): ciphertext = \\"\\" for char in plaintext: if char in string.ascii_lowercase: ciphertext += chr((ord(char) - key - 97) % 26 + 97) elif char in string.ascii_uppercase: ciphertext += chr((ord(char) - key - 65) % 26 + 65) else: ciphertext += char return ciphertext print(rot13_encode(\\"attack at dawn\\", 13))"},{"prompt":"Write a Python program to optimize an equation of the form ax3 + bx2 + cx + d = 0, where a,b,c and d are given constants and x is a variable. a = 1, b = 10, c = 32, d = 30","completion":"def optimize_equation(a, b, c, d): # calculate the discriminant discriminant = b**2 - 4*a*c x1 = (2*c)/(-b + (discriminant**0.5)) x2 = (-b - (discriminant**0.5))/(2*a) # return the optimized values return (x1, x2)"},{"prompt":"Generate a Python function that takes a number less than 1000 and returns it written in words. 213","completion":"def num2words(number): ones = [\\"\\", \\"one \\",\\"two \\", \\"three \\", \\"four \\", \\"five \\", \\"six \\", \\"seven \\", \\"eight \\", \\"nine \\", \\"ten \\", \\"eleven \\", \\"twelve \\", \\"thirteen \\", \\"fourteen \\", \\"fifteen \\", \\"sixteen \\", \\"seventeen \\", \\"eighteen \\", \\"nineteen \\"] tens = [\\"\\", \\"\\", \\"twenty \\", \\"thirty \\", \\"forty \\", \\"fifty \\", \\"sixty \\", \\"seventy \\", \\"eighty \\", \\"ninety \\"] if(number == 0): return \\"zero\\" if(number < 0): return \\"minus \\" + num2words(-1 * number) if((number/1000) > 0): return num2words(number/1000) + \\"thousand \\" + num2words(number%1000) if((number / 100) > 0): return num2words(number/100) + \\"hundred \\" + num2words(number%100) if((number/10) > 1): return tens[int(number//10)] + num2words(number % 10) else: return ones[int(number)] print(num2words(213))"},{"prompt":"Create a function in Python that takes 2 lists and returns their intersection. list1 = [1, 4 , 6, 10] list2 = [2, 10, 8, 6]","completion":"def intersection(list1, list2): intersection_elements = set(list1) & set(list2) return list(intersection_elements) intersection_list = intersection(list1, list2) print(intersection_list)"},{"prompt":"Given a Python dictionary structure, construct a program that returns the key with the highest numerical value d = {hello:1, goodbye:2, test:3}","completion":"d = {hello:1, goodbye:2, test:3} max_key = None max_value = 0 for key, value in d.items(): if value > max_value: max_key = key max_value = value print(max_key)"},{"prompt":"Optimize the following Python code for calculating the area of a triangle to improve the performance. def triangle_area(side_a, side_b, side_c): p = (side_a + side_b + side_c) / 2 return (p * (p side_a) * (p side_b) * (p side_c)) ** 0.5","completion":"def triangle_area(side_a, side_b, side_c): \\"\\"\\"Calculates the area of a triangle using Heron's formula. Args: side_a (float): The length of the first side. side_b (float): The length of the second side. side_c (float): The length of the third side. Returns: float: The calculated area of the triangle. \\"\\"\\" # Compute the semi-perimeter s = (side_a + side_b + side_c) / 2 # Calculate the area using the given sides return (s * (s - side_a) * (s - side_b) * (s - side_c)) ** 0.5"},{"prompt":"Use this Python code to encode an OSM file into a binary format. To use this code, call the BinaryOsm class and use the encode method, passing in the filename of the OSM file to be encoded and the desired output filename. The resulting binary file will be written to the specified output file. Note that this code is licensed under the GNU General Public License.","completion":"#!/usr/bin/python #---------------------------------------------------------------- # #------------------------------------------------------ # Usage: # #------------------------------------------------------ # Copyright 2007, Oliver White # # This program is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program. If not, see <http://www.gnu.org/licenses/>. #------------------------------------------------------ import sys import os from xml.sax import make_parser, handler import xml from struct import * class BinaryOsm(handler.ContentHandler): def __init__(self): pass def encode(self, filename, output): self.nextKID = 3 self.nextVID = 1 self.tags = {} self.values = {} if(not os.path.exists(filename)): print \\"No such data file %s\\" % filename return try: self.out = open(output, \\"wb\\") parser = make_parser() parser.setContentHandler(self) parser.parse(filename) self.out.write(\\"X\\") self.out.close() except xml.sax._exceptions.SAXParseException: print \\"Error loading %s\\" % filename def startElement(self, name, attrs): \\"\\"\\"Handle XML elements\\"\\"\\" if(name =='node'): self.meta = { 'id':int(attrs.get('id')), 'lon':float(attrs.get('lat')), 'lat':float(attrs.get('lon')) } self.tags = {} elif(name == 'way'): self.meta = {'id':int(attrs.get('id'))} self.tags = {} self.waynodes = [] elif(name == 'relation'): self.tags = {} elif name == 'nd': \\"\\"\\"Nodes within a way -- add them to a list\\"\\"\\" self.waynodes.append(int(attrs.get('ref'))) elif name == 'tag': \\"\\"\\"Tags - store them in a hash\\"\\"\\" k,v = (attrs.get('k'), attrs.get('v')) if not k in ('created_by'): self.tags[k] = v def endElement(self, name): \\"\\"\\"Handle ways in the OSM data\\"\\"\\" writeTags = False if(name =='node'): data = 'N' + pack(\\"L\\", self.meta['id']) + self.encodeLL(self.meta['lat'], self.meta['lon']) self.out.write(data) writeTags = True elif(name == 'way'): data = 'W' + pack(\\"L\\", self.meta['id']) self.out.write(data) self.out.write(pack('H', len(self.waynodes))) for n in self.waynodes: self.out.write(pack('L', n)) writeTags = True if(writeTags): n = len(self.tags.keys()) if(n > 255): # TODO: print \\"Error: more than 255 tags on an item\\" return self.out.write(pack('B', n)) for k,v in self.tags.items(): self.encodeTag(k, False, k) volatile = k in ('name','ref','ncn_ref','note','notes','description','ele','time','url','website','postal_code','image','source_ref','source:ref','source:name','source_ref:name',\\"FIXME\\",\\"fixme\\",\\"place_numbers\\") self.encodeTag(v,volatile,k) def encodeTag(self,text,volatile,key): text = text.encode('utf8') if(not volatile): try: ID = self.values[text] self.out.write(pack('H', ID)) except KeyError: if(self.nextKID >= 65535): # TODO print \\"Error: too many stored tags!\\" sys.exit() print \\"%d: %s %s\\" % (self.nextKID, key,text) self.values[text] = self.nextKID self.out.write(pack('HHB', 1, self.nextKID, len(text))) self.out.write(text) self.nextKID = self.nextKID + 1 else: self.out.write(pack('HB', 0, len(text))) self.out.write(text) #print \\"Storing simple %s\\" % (text) def encodeLL(self,lat,lon): pLat = (lat + 90.0) / 180.0 pLon = (lon + 180.0) / 360.0 iLat = self.encodeP(pLat) iLon = self.encodeP(pLon) return(pack(\\"II\\", iLat, iLon)) def encodeP(self,p): i = int(p * 4294967296.0) return(i) # Parse the supplied OSM file if __name__ == \\"__main__\\": print \\"Loading data...\\" Binary = BinaryOsm() Binary.encode(sys.argv[1], sys.argv[2])"},{"prompt":"Write a Python program to remove a specified item from an array. arr = [1,2,3,4]","completion":"def remove_item(arr, item): return [i for i in arr if i != item] arr = [1,2,3,4] new_arr = remove_item(arr, 3) print(new_arr)"},{"prompt":"Write an algorithm in Python to find the maximum element of a given array. [2, 7, 1, 6, 5]","completion":"def find_max_element(arr): max = arr[0] for i in range(1, len(arr)): # compare current max with the next array element if arr[i] > max: max = arr[i] return max arr = [2, 7, 1, 6, 5] max_element = find_max_element(arr) print(\\"Max element in the array:\\", max_element)"},{"prompt":"Create a Python script that simulates an 8sided dice roll.","completion":"import random def roll_dice(): dice = random.randint(1, 8) return dice dice = roll_dice() print(f\\"You rolled a {dice}\\")"},{"prompt":"Python, generate a 3 layer feedforward neural network for a binary classification problem.","completion":"# import necessary libraries import numpy as np from keras.layers import Dense from keras.models import Sequential # define model model = Sequential() # first layer model.add(Dense(16, activation='relu', input_dim=2)) # second layer model.add(Dense(8, activation='relu')) # output layer model.add(Dense(1, activation='sigmoid')) # compile the model model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])"},{"prompt":"Write a Python program that calculates the largest prime factor of a given number. 60","completion":"def is_prime(num): for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True def largest_prime_factor(n): for i in range(2, n + 1): if n % i == 0 and is_prime(i): lpf = i return lpf print(largest_prime_factor(60)) # Output: 5"},{"prompt":"Create a function in Python to implement a divide and conquer algorithm for finding the maximum element in a list. [2, 3, 4, 5, 9, 1]","completion":"def max_element(arr): \\"\\"\\" This function uses divide and conquer algorithm to find the maximum element in a list \\"\\"\\" # Base case if len(arr) == 0: return None if len(arr) == 1: return arr[0] # Get the middle index of the array mid_idx = len(arr) // 2 # Divide and Conquer left_max = max_element(arr[:mid_idx]) right_max = max_element(arr[mid_idx:]) # Find the Maximum if left_max > right_max: return left_max else: return right_max"},{"prompt":"Write a Python program that takes an array containing n elements and generates the power set. n = 3","completion":"import itertools def powerset(lst): powerset = [] for n in range(len(lst) + 1): for subset in itertools.combinations(lst, n): powerset.append(subset) return powerset arr = [1, 2, 3] print(powerset(arr))"},{"prompt":"Generate a Python function to find the sum of the digits in a given number. Not applicable","completion":"def sum_of_digits(n): result = 0 while (n > 0): result += n % 10; n //= 10; return result"},{"prompt":"Create a program in Python that takes in a sentence from the user, and reverse the sentence.","completion":"def reverseSentence(sentence): words = sentence.split(' ') newWords = [word[::-1] for word in words] newSentence = ' '.join(newWords) return newSentence sentence = input(\\"Enter a sentence: \\") print(reverseSentence(sentence))"},{"prompt":"Create a Python function to create a dictionary from a given list of tuples with the first elements of each tuple as the key. tuples = [(a, b), (c, d), (e, f)]","completion":"def create_dict(tuples): dictionary = {} for item in tuples: dictionary[item[0]] = item[1] return dictionary tuples = [(\\"a\\", \\"b\\"), (\\"c\\", \\"d\\"), (\\"e\\", \\"f\\")] print(create_dict(tuples)) # Output {'a': 'b', 'c': 'd', 'e': 'f'}"},{"prompt":"Generate a REST endpoint with Python Flask to accept an employee ID and return employee information. Not applicable","completion":"from flask import Flask, jsonify, request app = Flask(__name__) employees = [ {'id': 1, 'name': 'John Doe', 'age': 30}, {'id': 2, 'name': 'Jane Doe', 'age': 25} ] @app.route('/employees/<int:employee_id>', methods=['GET']) def get_employee(employee_id): employee = [employee for employee in employees if employee['id'] == employee_id] if len(employee) == 0: return jsonify({'message': 'Employee not found'}) return jsonify({'employee': employee[0]}) app.run(port=5000)"},{"prompt":"Write a Python code which randomly generates a hopscotch board of given size. size = 7","completion":"import random def generate_hopscotch_board(size): board = [] for row in range(size): board.append([]) for col in range(size): board[row].append(random.randint(1,6)) return board # Generate a hopscotch board print(generate_hopscotch_board(size))"},{"prompt":"Write a Python program to replace all the white spaces in a given string with the '*' character. str = “This is a sample string”","completion":"str = 'This is a sample string' new_str = str.replace(' ', '*') print(new_str) // This*is*a*sample*string"},{"prompt":"Automate an online registration process with Python. A sample registration form that asks for first name, last name, email address, and phone number.","completion":"import requests # input form_data = { 'firstname': 'Jane', 'lastname': 'Doe', 'email': 'janedoe@example.com', 'phone': '123-456-7890' } # process url = 'https://example.com/register' response = requests.post(url, data=form_data) # output if response.status_code == 200: print('Registration was successful!')"},{"prompt":"Create a Python script for grouping animals into species based on their fur colors and pattern. animals = [ { 'name': 'dog', 'fur': 'pale yellow' }, { 'name': 'cat', 'fur': 'grey' }, { 'name': 'rabbit', 'fur': 'white with black spots' }, { 'name': 'giraffe', 'fur': 'pale yellow with brown spots' } ]","completion":"results = {} for animal in animals: name = animal[\\"name\\"] fur = animal[\\"fur\\"] # Group animals with a pale yellow fur. if fur == \\"pale yellow\\": if \\"pale yellow\\" not in results: results[\\"pale yellow\\"] = [] results[\\"pale yellow\\"].append(name) # Group animals with grey fur. elif fur == \\"grey\\": if \\"grey\\" not in results: results[\\"grey\\"] = [] results[\\"grey\\"].append(name) # Group animals with white fur and black spots. elif fur == \\"white with black spots\\": if \\"white with black spots\\" not in results: results[\\"white with black spots\\"] = [] results[\\"white with black spots\\"].append(name) # Group animals with pale yellow and brown spots. elif fur == \\"pale yellow with brown spots\\": if \\"pale yellow with brown spots\\" not in results: results[\\"pale yellow with brown spots\\"] = [] results[\\"pale yellow with brown spots\\"].append(name) print(results)"},{"prompt":"Write a script in Python that encrypts a given string.","completion":"def encrypt(string): encrypted_string = \\"\\" for i in range(len(string)): char = string[i] encrypted_string += chr(ord(char)+2) return encrypted_string"},{"prompt":"Python, write a program that checks whether a number is within a given range. number=5, lower bound 25, upper bound 50","completion":"def check_in_range(number, lower_bound, upper_bound): if (number >= lower_bound and number <= upper_bound): return True else: return False number = 5 lower_bound = 25 upper_bound = 50 in_range = check_in_range(number, lower_bound, upper_bound) if in_range: print(\\"Number is in given range.\\") else: print(\\"Number is not in given range.\\")"},{"prompt":"Generate a program in Python that takes a given list as input and reverses it my_list = [3, 7, 2, 4]","completion":"def reverse_list(my_list): rev_list = [] for val in reversed(my_list): rev_list.append(val) return rev_list reversed_list = reverse_list(my_list) print(reversed_list)"},{"prompt":"Create a Python program to check if a string ends with a given substring. s = 'Hello World', substring = 'ld'","completion":"def endswith(s, substring): return s.endswith(substring) s = 'Hello World' substring = 'ld' print(endswith(s, substring)) # prints True"},{"prompt":"Create a code in Python to generate a random 8digit alphanumeric string.","completion":"import random import string length = 8 random_str = ''.join(random.choices(string.ascii_letters + string.digits, k = length)) print(random_str)"},{"prompt":"Create a new Python class for managing a Chatbot. The class should have methods for checking for greetings, getting user input, and responding to user input. Not applicable","completion":"class Chatbot: def __init__(self): self.greeting_keywords = ('hi', 'hello', 'hey', 'hola') def check_for_greeting(self, sentence): for word in sentence.words: if word.lower() in self.greeting_keywords: return True def get_user_input(self): user_input = input('You: ') return user_input def respond(self, user_input): print('Chatbot: ', end='') if self.check_for_greeting(user_input): print('Hi there!')"},{"prompt":"Write a code in Python for computing the edit distance between two strings.","completion":"def edit_distance(str1, str2): m = len(str1) n = len(str2) dp = [[ 0 for x in range(n+1)] for x in range(m+1)] for i in range(m+1): for j in range(n+1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) return dp[m][n]"},{"prompt":"Create a command line application using Python to calculate the Gini Index given a dataset. data = [[12,10,8],[8,7,6]]","completion":"import numpy as np def gini_index(data): data = np.array(data) n_instances = data.shape[0] sum_rows = data.sum(axis=1) squares_sum_rows = np.square(sum_rows) squared_sum_all = np.square(data).sum() numerator = n_instances * squared_sum_all - np.sum(squares_sum_rows) denominator = n_instances * sum_rows.sum() return 1 - numerator/denominator data = [[12,10,8],[8,7,6]] print(\\"Gini index:\\", gini_index(data))"},{"prompt":"Develop a Python program for searching within a large text document. A text document containing over 1000 word","completion":"def search_document(doc, keyword): # ensure that keyword is case insensitive keyword = keyword.casefold() # open the document with open(doc, 'r') as f: # read the document line by line for line in f.readlines(): # lowercase the line line = line.casefold() # if the keyword is found in the line if keyword in line: # print the line print(line) # an example document doc = \\"the_odyssey.txt\\" keyword = \\"odyssey\\" search_document(doc, keyword)"},{"prompt":"Create a python code snippet to create a function for predicting the most likely outcome of a classification task. Not applicable","completion":"def predict(X_test): predictions = [] for test_sample in X_test: predictions.append(most_likely_outcome(test_sample)) return predictions def most_likely_outcome(test_sample): probabilities = model.predict_proba(test_sample) max_prob = 0.0 index = -1 for i in range(len(probabilities)): if probabilities[i] > max_prob: max_prob = probabilities[i] index = i return index"},{"prompt":"Compute the median of a sequence of numbers in Python. Sequence: [3, 2, 4, 7, 10, 12, 11, 4, 8]","completion":"import statistics sequence = [3, -2, 4, 7, 10, 12, 11, -4, 8] median = statistics.median(sequence) print(median) # Output: 7"},{"prompt":"Generate a Python script for analyzing a given dataset. The script should output the number of rows and columns, the data type of each column, the average of all numeric columns, and the count of unique values present in the dataset. Input Titanic Dataset PassengerId, Survived, Pclass, Name, Sex, Age, SibSp, Parch, Ticket, Fare, Cabin, Embarked 1,0,3,Braund, Mr. Owen Harris,male,22,1,0,A/5 21171,7.25,,S 2,1,1,Cumings, Mrs. John Bradley (Florence Briggs Thayer),female,38,1,0,PC 17599,71.2833,C85,C 3,1,3,Heikkinen, Miss. Laina,female,26,0,0,STON/O2. 3101282,7.925,,S 4,1,1,Futrelle, Mr. Jacques Heath,male,35,1,0,113803,53.1,C123,S Output: Number of rows: 4 Number of columns: 12 Data type of columns: ['int', 'int', 'int', 'string', 'string', 'float', 'int', 'int', 'string', 'float', 'string', 'string'] Average of all numeric columns: 28.425 Unique values count: {'PassengerId': 4, 'Survived': 2, 'Pclass': 3, 'Name': 4, 'Sex': 2, 'Age': 4, 'SibSp': 3, 'Parch': 3, 'Ticket': 4, 'Fare': 3, 'Cabin': 3, 'Embarked': 3}","completion":"import pandas as pd # Read the dataset df = pd.read_csv('dataset.csv') # Get the number of rows and columns num_rows, num_cols = df.shape print('Number of rows: {}'.format(num_rows)) print('Number of columns: {}'.format(num_cols)) # Get the data type of each column data_types = df.dtypes.tolist() print('Data type of columns: {}'.format(data_types)) # Calculate the average of all numeric columns numeric_columns = df.select_dtypes(include=['int64', 'float64']).columns.tolist() avg = df[numeric_columns].mean().round(2) print('Average of all numeric columns: {}'.format(avg)) # Count the unique values for each column unique_values_count = {} for col in df.columns: unique_values_count[col] = len(df[col].unique()) print('Unique values count: {}'.format(unique_values_count))"},{"prompt":"Change the code provided in the input so that it is compatible with Python version 3. print Hello World","completion":"print(\\"Hello World\\")"},{"prompt":"Design and develop a CRUD API in Python to store user data in a relational database. The API should include endpoints for creating a new user, updating a user, deleting a user, and listing all users. Not applicable","completion":"from flask import Flask from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) # configure the database app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) # create User model class User(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(50), nullable=False) db.create_all() # create API endpoints @app.route('/users', methods=['POST']) def create_user(): user = User(name=request.json['name']) db.session.add(user) db.session.commit() return {'id': user.id} @app.route('/users/int:id', methods=['PUT']) def update_user(id): user = User.query.get(id) user.name = request.json['name'] db.session.commit() return {'message': 'User updated'} @app.route('/users/int:id', methods=['DELETE']) def delete_user(id): User.query.filter_by(id=id).delete() db.session.commit() return {'message': 'User deleted'} @app.route('/users', methods=['GET']) def list_users(): users = User.query.all() return {'users': [user.name for user in users]} if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python code to replace all the given elements of a list with the given value. list1 = [1, 3, 5, 7, 9] value = 0","completion":"def replace_list_with_value(list1, value): list1[:] = [value] * len(list1) return list1 result = replace_list_with_value(list1, value) print(result)"},{"prompt":"Write a Python class to convert an integer to its Roman numeral equivalent.","completion":"class Solution: def int_to_Roman(self, num): val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num"},{"prompt":"Design a Python program to calculate Fibonacci sequence for n number of terms, with n given by user.","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) n = int(input(\\"Enter number of terms for Fibonacci sequence: \\")) print(\\"Fibonacci sequence:\\") for i in range(n): print(fibonacci(i))"},{"prompt":"Suggest an implementation for the following class declaration in Python. class Profile","completion":"class Profile: def __init__(self, first_name, last_name, occupation): self.first_name = first_name self.last_name = last_name self.occupation = occupation def full_name(self): return self.first_name + \\" \\" + self.last_name"},{"prompt":"Build a Naive Bayes classifier machine learning model in Python to predict if given review is positive or negative This hotel has great customer service.","completion":"# Import necessary packages for ML import numpy as np from sklearn.naive_bayes import GaussianNB # Create feature and target arrays X = np.array([[1, 0, 1], [1, 1, 0], [0, 0, 1], [0, 1, 1]]) y = np.array([1, 1, 0, 0]) # Create a Gaussian NB model model = GaussianNB() model.fit(X, y) # Make a prediction prediction = model.predict([[1, 0, 0]]) if prediction == 1: print('This review is positive.') else: print('This review is negative.') # Output: This review is positive."},{"prompt":"Write Python code to remove all duplicates from a given list [1,2,3,4,4,4,5]","completion":"def remove_duplicates(input_list): output_list = [] for i in input_list: if i not in output_list: output_list.append(i) return output_list result = remove_duplicates([1, 2, 3, 4, 4, 4, 5]) print(result)"},{"prompt":"Create a python program that predicts the price of a cryptocurrency. The program should be developed using machine learning. Historic daily crypto price data extracted from Ethereum and Bitcoin.","completion":"import pandas as pd import numpy as np from sklearn.ensemble import RandomForestRegressor from sklearn.metrics import mean_squared_error # Load the data data = pd.read_csv('crypto_data.csv') # Create feature and target X = data.drop('Price', axis=1) y = data.Price # Split the data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model = RandomForestRegressor() model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Evaluate accuracy score = mean_squared_error(y_test, y_pred) # Print the accuracy print(f'Accuracy: {score}')"},{"prompt":"Create a Python script to classify book titles as either fiction or nonfiction.","completion":"import nltk def classify_book(title): # Tokenize the words in the title tokens = nltk.word_tokenize(title) # Create the tagger pos_tag = nltk.pos_tag(tokens) # Check for words that are commonly used in fiction titles fiction_words = [\\"Novel\\", \\"Novella\\", \\"Mystery\\", \\"Fantasy\\", \\"Adventure\\", \\"Thriller\\", \\"Paranormal\\", \\"Romance\\"] has_fiction_word = any([word in fiction_words for word in tokens]) if has_fiction_word: return 'Fiction' else: return 'Non-Fiction'"},{"prompt":"Create an interactive CLI tool with Python that takes in student names and adds them to a list. Not applicable","completion":"import sys # init an empty list students = [] # ask for user input while True: student_name = input('Please enter a student name: ') if student_name.strip() == '': break students.append(student_name.strip()) print('The following students have been added to the list:') for student in students: print(student) sys.exit()"},{"prompt":"Write a python script to fetch and display news articles from a RSS feed.","completion":"import feedparser def get_rss_news(url): d = feedparser.parse(url) articles = [] for entry in d['entries']: articles.append({'title': entry.title, 'summary': entry.summary}) return articles news = get_rss_news('https://www.nytimes.com/svc/collections/v1/publish/www.nytimes.com/section/world/rss.xml') for article in news: print(article['title']) print(article['summary'])"},{"prompt":"Generate a random 6digit number using Python No inpu","completion":"import random def generate_random_number(): random_number = random.randint(100000, 999999) return random_number generatedNumber = generate_random_number() print(generatedNumber)"},{"prompt":"Generate a Python script to delete every second word in a string.","completion":"def delete_every_second_word(input): words = input.split() output = \\"\\" for i, word in enumerate(words): if i % 2 == 0: output += word + \\" \\" return output.strip()"},{"prompt":"Write a script in python to crawl a web page","completion":"import requests url = 'http://www.example.com' response = requests.get(url) if response.status_code == 200: html_contents = response.content # Parse the html_contents and store the data"},{"prompt":"Write a Python program to find the smallest number using the given array of numbers. [13, 45, 7, 23]","completion":"def smallest_number(arr): min_number = arr[0] for num in arr[1:]: if num < min_number: min_number = num return min_number"},{"prompt":"Write a Python program to create a web crawler that stores the URL and content of each page it visits. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com' # send an HTTP GET request for the URL r = requests.get(url) # parse the content of the request with BeautifulSoup soup = BeautifulSoup(r.content, 'html.parser') # extract all links from the webpage links = soup.find_all(\\"a\\") # store URLs and content in variables visited = set() for link in links: url = link.get('href') visited.add(url) r = requests.get(url) content = r.content # store content in database # ... print(visited)"},{"prompt":"Write a Python program to sort a list of tuples by the second element in the tuple. tuples = [(Alice, 15),(Bob, 10),(Robot,25)]","completion":"def sort_tuples_by_second_element(tuples): return sorted(tuples, key=lambda tup: tup[1])"},{"prompt":"Create a Python program that given a list of words, prints out their frequencies. [hello, world, hello, foo, bar, hello]","completion":"words = [\\"hello\\", \\"world\\", \\"hello\\", \\"foo\\", \\"bar\\", \\"hello\\"] # create an empty dictionary to store the results freq = {} # loop through each word in the list for word in words: if word in freq: # if word existed update its count freq[word] += 1 else: # if word doesn’t exist, set the count to 1 freq[word] = 1 # print the result print(freq)"},{"prompt":"Generate a Python program to convert a given temperature from Fahrenheit to Celsius. 68","completion":"def fahrenheitToCelsius(fahrenheit): celsius = (fahrenheit - 32) * 5 / 9 return celsius fahrenheit_value = 68 celsius_value = fahrenheitToCelsius(fahrenheit_value) print(\\"{0} Fahrenheit is equal to {1} Celsius\\".format(fahrenheit_value, celsius_value))"},{"prompt":"Edit a Python program to sort an array of size n with m different types of numbers in ascending order. arr = [2, 1, 1, 3, 6, 4, 5, 5]","completion":"# Sort an array with m different types of elements def sort_array(arr): # Get the number of different types of elements m = len(set(arr)) n = len(arr) # Create an output array of size n output = [0] * (n) # Store count of individual numbers in # count array count = [0] * (m) for i in range(0, n): count[arr[i]] += 1 # finding cummulative count for i in range(1, m): count[i] += count[i - 1] # Inserting values in sorted array for i in range(n - 1, -1, -1): output[count[arr[i]] - 1] = arr[i] count[arr[i]] -= 1 return output # Driver Code arr = [2, 1, 1, 3, 6, 4, 5, 5] sorted_arr = sort_array(arr) # Printing the sorted array print(*sorted_arr)"},{"prompt":"Create an Elasticsearch algorithm to search for documents based on specific criteria. Search for documents containing the term 'Python' in the body field.","completion":"GET products/_search { \\"query\\": { \\"term\\": { \\"body\\": \\"Python\\" } } }"},{"prompt":"Create a recursive function in Python to print the sum of the natural numbers up to the given number. limit = 5","completion":"def sum_natural_numbers(limit): if limit < 2: return limit else: return limit + sum_natural_numbers(limit-1) #print the sum print(sum_natural_numbers(limit))"},{"prompt":"Create a Python program which reads a list of numbers and stores them in an array. [1, 2, 3, 4, 5]","completion":"my_list = [1, 2, 3, 4, 5] my_array = [] for number in my_list: my_array.append(number) print(my_array)"},{"prompt":"Create a Python class that represents a 2D vector and can perform vector operations. <no input>","completion":"class Vector2D: def __init__(self, x = 0, y = 0): self.x = x self.y = y # Adds two vectors def __add__(self, other): x = self.x + other.x y = self.y + other.y return Vector2D(x, y) # Subtracts two vectors def __sub__(self, other): x = self.x - other.x y = self.y - other.y return Vector2D(x, y) # Multiplies a vector by a scalar def __mul__(self, other): x = self.x * other y = self.y * other return Vector2D(x, y) # Divides a vector by a scalar def __truediv__(self, other): x = self.x / other y = self.y / other return Vector2D(x, y)"},{"prompt":"Write a Python program to compare two dictionaries. dict1 = { 'key1': 'value1', 'key2': 'value2', 'key3': 'value3', } dict2 = { 'key1': 'value1', 'key2': 'value4', 'key4': 'value5', }","completion":"def compare_dictionaries(dict1, dict2): result = {} for key in dict1: if (key in dict2): if (dict1[key] == dict2[key]): result[key] = \\"Same Value\\" else: result[key] = \\"Different Value\\" else: result[key] = \\"dict2 doesn't contains this keys\\" for key in dict2: if (key not in dict1): result[key] = \\"dict1 doesn't have this key\\" return result"},{"prompt":"Write a Python program to take a list of integers and sort them in ascending order using insertion sort. [4, 3, 7, 2, 1]","completion":"def insertion_sort(arr): for index in range(1,len(arr)): key = arr[index] j = index-1 while j >=0 and key < arr[j]: arr[j+1] = arr[j] j -= 1 arr[j+1] = key arr = [4, 3, 7, 2, 1] insertion_sort(arr) print(arr) # Output: [1, 2, 3, 4, 7]"},{"prompt":"This code sends data to a USB device and waits for a reply, then displays it. To use it, run the script with the device and data to send as arguments. The device argument should be in the form of either /dev/ttyUSB0 or COM1. The data can be in the form of either 0xhexcodes or string. If the first data argument is icarus, the script will send 2 known block payloads for an icarus device and show the expected and actual answers if it's a working V3 icarus. After any command is sent, it waits up to 30 seconds for a reply.","completion":"#!/usr/bin/env python # Copyright 2012-2013 Xiangfu # Copyright 2012-2013 Andrew Smith # Copyright 2013 Luke Dashjr # # This program is free software; you can redistribute it and/or modify it under # the terms of the GNU General Public License as published by the Free Software # Foundation; either version 3 of the License, or (at your option) any later # version. See COPYING for more details. # Linux usage: ./usbtest.py /dev/ttyUSB0 0xhexcodes|string|icarus # OR python usbtest.py /dev/ttyUSB0 0xhexcodes|string|icarus # # Windows usage: ./usbtest.py COM1 0xhexcodes|string|icarus # # sends the data sepcified to the USB device and waits # for a reply then displays it # # the data can be: # 0xhexcodes: e.g. 0x68656c6c6f20776f726c640a # would send \\"hello worldn\\" # # string: e.g. sendsometext # # icarus: sends 2 known block payloads for an icarus device # and shows the expected and actual answers if it's # a working V3 icarus import sys import serial import binascii if len(sys.argv) < 2: sys.stderr.write(\\"Usage: \\" + sys.argv[0] + \\" device strings...n\\") sys.stderr.write(\\" where device is either like /dev/ttyUSB0 or COM1n\\") sys.stderr.write(\\" and strings are either '0xXXXX' or 'text'n\\") sys.stderr.write(\\" if the first string is 'icarus' the rest are ignoredn\\") sys.stderr.write(\\" and 2 valid icarus test payloads are sent with results displayedn\\") sys.stderr.write(\\"nAfter any command is sent it waits up to 30 seconds for a replyn\\"); sys.exit(\\"Aborting\\") # Open with a 10 second timeout - just to be sure ser = serial.Serial(sys.argv[1], 115200, serial.EIGHTBITS, serial.PARITY_NONE, serial.STOPBITS_ONE, 10, False, False, 5) if sys.argv[2] == \\"icarus\\": # This show how Icarus use the block and midstate data # This will produce nonce 063c5e01 block = \\"0000000120c8222d0497a7ab44a1a2c7bf39de941c9970b1dc7cdc400000079700000000e88aabe1f353238c668d8a4df9318e614c10c474f8cdf8bc5f6397b946c33d7c4e7242c31a098ea500000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000080020000\\" midstate = \\"33c5bf5751ec7f7e056443b5aee3800331432c83f404d9de38b94ecbf907b92d\\" rdata2 = binascii.a2b_hex(block.encode('ascii'))[95:63:-1] rmid = binascii.a2b_hex(midstate.encode('ascii'))[::-1] payload = rmid + rdata2 print(\\"Push payload to icarus: \\" + binascii.hexlify(payload).decode('ascii')) ser.write(payload) b=ser.read(4) print(\\"Result:(should be: 063c5e01): \\" + binascii.hexlify(b).decode('ascii')) # Just another test payload2 = \\"ce92099c5a80bb81c52990d5c0924c625fd25a535640607d5a4bdf8174e2c8d500000000000000000000000080000000000000000b290c1a42313b4f21b5bcb8\\" print(\\"Push payload to icarus: \\" + payload2) ser.write(binascii.a2b_hex(payload2.encode('ascii'))) b=ser.read(4) print(\\"Result:(should be: 8e0b31c5): \\" + binascii.hexlify(b).decode('ascii')) else: data = b\\"\\" for arg in sys.argv[2::]: if arg[0:2:] == '0x': data += binascii.a2b_hex(arg[2::].encode('ascii')) else: data += arg.encode('latin-1') print(\\"Sending: 0x\\" + binascii.hexlify(data).decode('ascii')) ser.write(data) # If you're expecting more than one linefeed terminated reply, # you'll only see the first one # AND with no linefeed, this will wait the 10 seconds before returning print(\\"Waiting up to 10 seconds ...\\") b=ser.readline() print(\\"Result: hex 0x\\" + binascii.hexlify(b).decode('ascii')) print(\\"Result: asc %s\\" % (repr(b),)) ser.close()"},{"prompt":"Create a function in Python which takes a user input and sorts it in ascending order. 9,5,4,7","completion":"def my_function(values): sorted_values = sorted(values) return sorted_values if __name__ == \\"__main__\\": values = [int(value) for value in input().split(',')] print(my_function(values))"},{"prompt":"Create a binary tree in Python.","completion":"class TreeNode: def __init__(self, val): self.val = val self.left = None self.right = None def add_child(self, val): if self.val: if val < self.val: if self.left is None: self.left = TreeNode(val) else: self.left.add_child(val) elif val > self.val: if self.right is None: self.right = TreeNode(val) else: self.right.add_child(val) else: self.val = val"},{"prompt":"Create a program in Python which takes a string and finds the number of each English vowels. sentence = 'Hello World'","completion":"def count_vowels(sentence): vowels = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0} for char in sentence.lower(): if char in vowels: vowels[char] += 1 return vowels sentence = 'Hello World' print(count_vowels(sentence)) # Output = {'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0}"},{"prompt":"Create a python program for predicting user ratings for a movie on the IMDB database. Features: director_name, num_critic_for_reviews, duration, gross, IMDB rating for movie 'Grey Island': 3.6","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Read IMDB data data_df = pd.read_csv('imdb_data.csv') # Create input data X = data_df[['director_name', 'num_critic_for_reviews', 'duration', 'gross']] y = data_df['imdb_score'] # Split data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Train model regressor = LinearRegression() regressor.fit(X_train, y_train) # Predict rating for movie 'Grey Island' grey_island_X = [['Grey Island', 2, 101, 1607800]] print(regressor.predict(grey_island_X)) # Output: [3.6]"},{"prompt":"Create a basic Python script that takes the string input from the command line and prints it back. Not applicable","completion":"import sys # Get the string string = sys.argv[1] print(string)"},{"prompt":"Modify the existing Python code to generate a Fibonacci series. def generate_fibonacci_series(n): print(0) current = 0 next = 1 for i in range(0, n1): current, next = next, current + next print(next)","completion":"def generate_fibonacci_series(n): print(\\"0\\") current = 0 next = 1 for i in range(0, n): print(current) temp = current current = next next = temp + next"},{"prompt":"Modify the given Python program to sort a list of words in alphabetical order. words = ['cat', 'dog', 'bird', 'fish']","completion":"words = ['cat', 'dog', 'bird', 'fish'] sorted_words = sorted(words) print(sorted_words)"},{"prompt":"Design a function in Python that takes a positive integer and returns the sum of its digits.","completion":"def sum_digits(n): num_str = str(n) total = 0 for digit in num_str: total += int(digit) return total"},{"prompt":"Create a python program to send an email using smtplib.","completion":"import smtplib def send_email(): # Enter your email details here email_address = 'myemail@example.com' email_password = 'my_password' to_address = 'recipient@example.com' # Create a smtplib server server = smtplib.SMTP('smtp.gmail.com',587) server.ehlo() server.starttls() server.login(email_address, email_password) # Create the message message = \\"\\"\\" Subject: Test Email This is a test email. \\"\\"\\" # Send the email server.sendmail(email_address, to_address, message) server.quit() if __name__ == '__main__': send_email()"},{"prompt":"mplement a genetic algorithm in Python that finds a solution to a given mathematical expression. find x in equation x^2 3x 10 = 0","completion":"import random # target equation expression = lambda x: x**2 - 3*x - 10 # population size of 40 solutions popSize = 40 # starting range xRange = (-10, 10) # mutation rate mRate = 0.01 # generate randomly the population population = [random.uniform(*xRange) for _ in range(popSize)] # fitness function def fitness(expression, population): # loop through population and calculate fitness for i in range(len(population)): x = population[i] population[i] = (x, expression(x)) # sort by fitness population = [i[1] for i in sorted(population, key=lambda x : x[1])] return population # initialize best score ever bestScore = float('inf') # genetic algorithm while True: # calculate fitness scores scores = fitness(expression, population) # get the best score of this population if scores[0] < bestScore: bestScore = scores[0] bestSolution = population[0] # print the best solution and score print(\\"Best solution : {}n Best score: {}\\".format(bestSolution, bestScore)) # generate a new population newPopulation = [] # add the best performing solutions from previous gen newPopulation.extend(population[:5]) # loop through the population size while len(newPopulation)<popSize: # randomly select 2 parents parent1 = random.choice(population[:10]) parent2 = random.choice(population[:10]) # generate a child by crossover of parents child = (parent1 + parent2)/2 # randomly mutate the child if random.random() < mRate: child += random.random() * 5 # add the child to the new population newPopulation.append(child) # set the new population population = newPopulation"},{"prompt":"Modify the following Python code such that a thread is started from within the function. def doSomething(): # Do something","completion":"import threading def doSomething(): #Do something t = threading.Thread(target=functionName) t.start()"},{"prompt":"Write a Python function to generate a list of all prime numbers to a given maximum max = 100","completion":"def generate_primes(max): primes_list = [2] for i in range(3, max + 1): curr = True for p in primes_list: if i % p == 0: curr = False if curr: primes_list.append(i) return primes_list"},{"prompt":"Write a Python program to edit an array of strings to filter out all the strings that do not contain the given substring. array = [stack, overflow, coding, challenge] substring = stack","completion":"# Filtering out the strings that don't contain the substring filtered_array = [s for s in array if substring in s] print(filtered_array)"},{"prompt":"Write a Python program that checks for duplicates in the input list and replaces the duplicates with the occurrence count of the element. [1, 2, 3, 2, 1, 3]","completion":"def check_duplicates_replace(list): # keep track of counts of elements element_count = {} # traverse list for element in list: if element in element_count: element_count[element] += 1 else: element_count[element] = 1 # replace duplicates with count for i in range(len(list)): if list[i] in element_count: list[i] = element_count[list[i]] element_count[list[i]] -= 1 return list # Main program list = [1, 2, 3, 2, 1, 3] result = check_duplicates_replace(list) print(result)"},{"prompt":"Create a python function for encrypting information that takes a string and a key. String = This is a secret message Key = 12345678","completion":"import secrets def encrypt(string, key): cipher = '' for i in range(len(string)): cipher += chr(ord(string[i]) + ord(key[i % len(key)])) return cipher encrypt(\\"This is a secret message\\", \\"12345678\\") # prints \\"x18x01x15x05x1ax12x1bx1fx1fx1ex10x04x1fx1fx19x0fx02x03x07x08\\""},{"prompt":"Can you generate a program to convert a given string to a list of characters in Python","completion":"def string_to_list(string): char_list = [] for char in string: char_list.append(char) return char_list"},{"prompt":"Edit the following code snippet to print out Hello World instead of Hello Python print(Hello Python)","completion":"print(\\"Hello World\\")"},{"prompt":"Build a Python program to predict movie genres from their titles. The Ring","completion":"import sklearn_crfsuite from sklearn_crfsuite import CRF import string import re # Preprocessing for Movie Title def preprocess_text(title): title = title.lower() titles = title.split() table = str.maketrans('', '', string.punctuation) titles = [word.translate(table) for word in titles] titles = [word for word in titles if re.search('[a-zA-Z]', word)] return titles # Movie Title Tags def get_labels(word): labels = [] pattern = r'^[A-Z]' if re.search(pattern, word): labels.append('title') else: labels.append('other') return labels # Word Features def word2feature(sentence, word_key): word = sentence[word_key] features = { 'word': word, 'length': len(word), 'starts_with_upper': int(word[0].isupper()) } return features # Features Extraction def sent2features(sentence): return [word2feature(sentence, key) for key in range(len(sentence))] # Labels Extraction def sent2labels(sentence): return [get_labels(key) for key in sentence] # Training the CRF Model def train_crf_model(sentences, labels): X = [sent2features(s) for s in sentences] y = [sent2labels(s) for l in labels] crf = CRF(algorithm='lbfgs', c1=0.1, c2=0.1, max_iterations=100, all_possible_transitions=True) crf.fit(X, y) return crf # Predicting the Genre def predict_genre(title, crf): preprocessed_title = preprocess_text(title) test_feats = sent2features(preprocessed_title) predictions = crf.predict([test_feats]) genre = \\"\\" for i in range(len(predictions[0])): if predictions[0][i] == 'title': genre += preprocessed_title[i] + \\" \\" return genre.strip() # Main movie_title = \\"The Ring\\" sentences = [[word for word in preprocess_text(movie_title)]] labels = [[]] crf = train_crf_model(sentences, labels) result = predict_genre(movie_title, crf) print(result)"},{"prompt":"Develop an algorithm in Python to cluster a given set of documents. Set of documents (in text format)","completion":"import numpy as np from sklearn.cluster import KMeans from sklearn.feature_extraction.text import TfidfVectorizer # Convert documents to tf-idf matrix vectorizer = TfidfVectorizer(stop_words=\\"english\\") documents = [doc1, doc2, ...] matrix = vectorizer.fit_transform(documents) # K-means Clustering kmeans = KMeans(n_clusters=2, random_state=0).fit(matrix) labels = kmeans.labels_ # Cluster documents clusters = {} for i in range(len(documents)): label = labels[i] if label not in clusters: clusters[label] = [] clusters[label].append(documents[i])"},{"prompt":"Write a Python script that calculates the mean, median and mode of 15 input numbers. [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]","completion":"# List of numbers numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] # Calculate mean mean = sum(numbers) / len(numbers) # Calculate median median = sorted(numbers)[len(numbers) // 2] # Calculate mode modes = [] max_freq = 0 freqs = {} for number in numbers: if number not in freqs: freqs[number] = 0 freqs[number] += 1 if freqs[number] > max_freq: max_freq = freqs[number] modes = [number] elif freqs[number] == max_freq: modes.append(number) # Print results print(\\"Mean:\\", mean) print(\\"Median:\\", median) print(\\"Mode(s):\\", modes)"},{"prompt":"Write a Python program to parse an XML document. <?xml version=1.0 encoding= UTF8?> <note> <to>John Doe</to> <from>Jane Doe</from> <heading>Greeting</heading> <body>Hello World!</body> </note>","completion":"\\"\\"\\" Parse an XML document \\"\\"\\" import xml.etree.ElementTree as ET # Parse the XML file root = ET.parse('note.xml').getroot() # Print out the XML elements for item in root: print(f\\"{item.tag}: {item.text}\\")"},{"prompt":"Create a Python web interface to facilitate text analysis of a given set of documents. library used: NLTK","completion":"import nltk import math # Load the given set of documents docs = [...] # Tokenize documents tokens = [nltk.word_tokenize(doc) for doc in docs] # Create list of all tokens all_tokens = [token for doc in tokens for token in doc] # Calculate IDF (Inverse Document Frequency) for each token idf_scores = {token: math.log(len(docs) / len(all_tokens.count(token))) for token in all_tokens} # Create Web Interface from flask import Flask from flask import render_template app = Flask(__name__) @app.route('/') def index(): return render_template('index.html', len=len(docs), tokens=tokens, idf_scores=idf_scores) if __name__ == \\"__main__\\": app.run()"},{"prompt":"Write a Python script to scrape the text content from all reviews on a web page example.com/review","completion":"\\"\\"\\" Scrape the text content from all reviews on a web page \\"\\"\\" import requests from bs4 import BeautifulSoup def fetch_reviews(url): html = requests.get(url).text soup = BeautifulSoup(html, 'lxml') reviews = soup.find_all('div', class_='review') for review in reviews: text = review.find('p').string author = review.find('h4').string print(text, author) if __name__ == '__main__': fetch_reviews('example.com/reviews')"},{"prompt":"Create a Python application to simulate a dice game.","completion":"# Create a Python application to simulate a dice game import random # Remind the player of the rules print(\\"You are playing a dice game. Roll the dice to determine who will go firstn\\") # Set number of players, configuring the game num_players = int(input(\\"Enter the number of players: \\")) player_list = [] first_player = 0 # Loop for each individual players for player in range(1, num_players + 1): # Simulate rolling a dice roll = 0 roll = random.randint(1, 6) # Player name print(\\"Player \\" + str(player)) name = input(\\"Enter your name: \\") # Append name and roll value to the list player_list.append((name, roll)) print(\\"You have rolled: {0}n\\".format(roll)) # Get the player with the highest roll max_roll = 0 for player in player_list: # Store the highest value of the roll if player[1] > max_roll: first_player = player max_roll = player[1] # Announce the winner print(\\"{0} is the first player with the roll of {1}\\".format(first_player[0], first_player[1]))"},{"prompt":"Create a function to find the first letter of an array of words and return the longest word ['Hello', 'world', 'Python']","completion":"\\"\\"\\" Find the first letter of an array of words and return the longest word \\"\\"\\" def find_first_letter_longest_word(words): longest = '' first_letter = words[0][0] for word in words: if word[0] == first_letter and len(word) > len(longest): longest = word return longest if __name__ == '__main__': words = ['Hello', 'world', 'Python'] print(find_first_letter_longest_word(words))"},{"prompt":"Create a class in Python to represent a patient in a hospital. The class should store name, age, medical history, current prescriptions, and allergies. Not applicable","completion":"class Patient: def __init__(self, name, age, medical_history, prescriptions, allergies): self.name = name self.age = age self.medical_history = medical_history self.prescriptions = prescriptions self.allergies = allergies def getName(self): return self.name def getAge(self): return self.age def getMedicalHistory(self): return self.medical_history def getPrescriptions(self): return self.prescriptions def getAllergies(self): return self.allergies"},{"prompt":"Develop an algorithm to find the largest palindrome in a given string using Python. Not applicable","completion":"def find_largest_palindrome(string): palindrome = '' for i in range(len(string)): for j in range(i + 1, len(string)): substring = string[i:j + 1] if substring == substring[::-1] and len(substring) > len(palindrome): palindrome = substring return palindrome"},{"prompt":"Create an alternate version of a given program that produces the same output. import math myString = Python Rocks! numRounds = math.ceil(len(myString) / 2) for i in range(1, numRounds+1): print(myString[0:i])","completion":"import math myString = \\"Python Rocks!\\" numRounds = math.floor(len(myString) / 2) for i in reversed(range(1, numRounds+1)): print(myString[i-1::-1] + myString[i::])"},{"prompt":"Using Python, design a function which takes the input string and checks for an anagram. string1 = star , string2 = rats","completion":"def is_anagram(str1,str2): # remove all white space str1 = str1.replace(' ','') str2 = str2.replace(' ','') # check if length of strings are equal if len(str1) != len(str2): return False # create a dictionary to store the frequency of each letter freq_dict = {} # calculate of each letter in the first string to the dictionary for letter in str1: if letter in freq_dict: freq_dict[letter] += 1 else: freq_dict[letter] = 1 # check if the frequency of each letter in the second string is in the dictionary for letter in str2: if letter not in freq_dict: return False else: freq_dict[letter] -= 1 # check if each letter in the dictionary has a frequency of zero for letter in freq_dict: if freq_dict[letter] != 0: return False return True string1 = \\"star\\" string2 = \\"rats\\" print(is_anagram(string1, string2)) # Output : True"},{"prompt":"Create a script to scrape a web page and extract data in Python","completion":"# Python program to scrape a web page and extract data import requests from bs4 import BeautifulSoup # fetch the web page r = requests.get('http://example.com') # parse the web page soup = BeautifulSoup(r.text, 'html.parser') # scrape the data from the page data = soup.find_all('h2', { 'class': 'title' }) # print the extracted data for item in data: print(item.text)"},{"prompt":"You need to write a Python program to print the Fibonacci series.","completion":"def fibonacci_series(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2, n+1): c = a + b a = b b = c return b for n in range(0, 10): print(fibonacci_series(n))"},{"prompt":"Create a python function to normalize a given matrix. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def norm(mat): result = [[0 for row in range(len(mat[0]))] for col in range(len(mat))] for i in range(0, len(mat)): for j in range(0, len(mat[0])): result[i][j] = mat[i][j] / sum(mat[i]) return result print(norm([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))"},{"prompt":"Create a method to verify if the following number is prime in Python: 7","completion":"def is_prime(n): if (n <= 1): return False for i in range(2, n): if (n % i == 0): return False return True n = 7 if is_prime(n): print(\\"The number {} is prime.\\".format(n)) else: print(\\"The number {} is not prime.\\".format(n))"},{"prompt":"Generate a Python script to convert a given address into its equivalent latitude and longitude coordinates. Tokyo Tower, Tokyo","completion":"import requests import json def get_lat_long_from_address(address): \\"\\"\\" Converting a given address into its equivalent latitude and longitude coordinates. \\"\\"\\" try: url = 'https://maps.googleapis.com/maps/api/geocode/json?address=%s' % address response = requests.get(url).json() geography = response['results'][0]['geometry'] latitude = geography['location']['lat'] longitude = geography['location']['lng'] return latitude, longitude except: return None lat, lng = get_lat_long_from_address(\\"Tokyo Tower, Tokyo\\") print(\\"Latitude: %.06f t Longitude: %.06f\\" % (lat, lng))"},{"prompt":"Create a Python function which takes in an array of objects, each object contains a 'name' field and 'age' field. Write the code to sort the objects in the array by age in descending order. [ {name: 'John', age: 45}, {name: 'Joe', age: 23}, {name: 'Mike', age: 18} ]","completion":"def sort_by_age(arr): return sorted(arr, key=lambda obj: obj['age'], reverse=True) arr = [ {name: 'John', age: 45}, {name: 'Joe', age: 23}, {name: 'Mike', age: 18} ] result = sort_by_age(arr) print(result)"},{"prompt":"This code is a script to filter out isoforms from peptide files in FASTA ENSEMBL or NCBI format. It can also add an easier to read species label to each sequence within the file. To use this script, you need to specify the input file, input file type, and output file. For ENSEMBL files, use the following command: python isoform_filter.py i [input_fasta_file] t ens l [species_label] o [output_filename]. For NCBI files, use the following command: python isoform_filter.py i [input_fasta_file] t ncbi g [toplevel_gff_file] l [species_label] o [output_filename]. To just do the relabeling, set f 0. You shouldn't need a gff file for the NCBI file in this case. For NCBI relabeling, the gene ID is also moved to the front of the title line.","completion":"#!/usr/bin/python #Script to filter out isoforms from peptide files in FASTA ENSEMBL or NCBI format. This #script can also add an easier to read species label to each sequence within the file. # #Sample ENSEMBL usage: python isoform_filter.py -i [input_fasta_file] -t ens -l [species_label] -o [output_filename] # #Sample NCBI usage: python isoform_filter.py -i [input_fasta_file] -t ncbi -g [toplevel_gff_file] -l [species_label] -o [output_filename] # #To just do the relabeling, set -f 0. You shouldn't need a gff file for the NCBI file in #this case. For NCBI relabeling, the gene ID is also moved to the front of the title line. # #Written by: Gregg Thomas, Summer 2014 # #NCBI filter command kindly provided by the folks at NCBI. # import sys, re, os, argparse sys.path.append(os.path.dirname(os.path.realpath(__file__)) + \\"/corelib/\\") import core #Function definitions. def optParse(): #This function handles the command line options. parser = argparse.ArgumentParser() parser.add_argument(\\"-i\\", dest=\\"input_file\\", help=\\"An input file containing peptides from a species in FASTA format\\"); parser.add_argument(\\"-t\\", dest=\\"file_type\\", help=\\"Currently supported file types are ENSEMBL and NCBI peptide files. Enter as 'ens' or 'ncbi' here. Note: If file type is NCBI you will also need to specify the top level gff file with -g\\") parser.add_argument(\\"-g\\", dest=\\"gff_file\\", help=\\"If file type is NCBI, the top level gff file is also needed and should be specified here.\\"); parser.add_argument(\\"-l\\", dest=\\"spec_label\\", help=\\"A species label to add to the gene ID of each sequence.\\", default=\\"\\"); parser.add_argument(\\"-o\\", dest=\\"output_file\\", help=\\"The desired name of the output file. If none is specified the default is [input_filename]_isofiltered.fa or [input_filename]_isofiltered_relabel.fa\\"); args = parser.parse_args(); if None in [args.input_file, args.file_type, args.output_file]: sys.exit(core.errorOut(1, \\"An input file (-i), input file type (-t), and an output file (-o) must all be specified\\")); if args.file_type not in ['ens', 'ncbi']: sys.exit(core.errorOut(2, \\"File type (-t) must be one of either 'ens' (Ensembl) or 'ncbi'\\")); if args.file_type == \\"ens\\" and args.gff_file != None: sys.exit(core.errorOut(3, \\"A gff file (-g) should not be specified with file type ens\\")); if args.file_type == \\"ncbi\\" and args.gff_file == None: sys.exit(core.errorOut(4, \\"A gff file (-g) must be specified with file type ncbi\\")); return args.input_file, args.file_type, args.gff_file, args.spec_label, args.output_file; def ensFilter(inseqs, spec_label, outfilename): print \\"Indexing\\", len(inseqs), \\"sequences to be filtered.\\"; print \\"Parsing identifiers...\\"; for title in inseqs: geneid = title[title.index(\\"gene:\\") + 5:title.index(\\"gene:\\") + 23]; if geneid in identDict: identDict[geneid].append((title, inseqs[title])); else: identDict[geneid] = []; identDict[geneid].append((title, inseqs[title])); sys.stderr.write('b'); print \\"Filtering and writing sequences...\\"; numbars, donepercent, i = 0,[],0; for key in identDict: numbars, donepercent = core.loadingBar(i, len(identDict), donepercent, numbars); if len(identDict[key]) == 1: long_title, long_seq = identDict[key][0]; else: titlelist = []; seqlist = []; for tup in identDict[key]: cur_itle, cur_seq = tup; titlelist.append(cur_itle); seqlist.append(cur_seq); long_seq = max(seqlist, key=len) long_title = titlelist[seqlist.index(long_seq)]; new_title = \\">\\" + spec_label + \\"_\\" + long_title[1:]; core.writeSeq(outfilename, long_seq, new_title); i += 1; pstring = \\"100.0% complete.\\"; sys.stderr.write('b' * len(pstring) + pstring); print \\"nDone!\\"; print i, \\"sequences written.\\"; print len(inseqs) - i, \\"sequences filtered.\\"; def ncbiFilter(inseqs, gff_file, spec_label, outfilename): numbars, donepercent, i = 0, [], 0; print \\"Obtaining longest isoforms from .gff file...\\"; cmd = \\"zcat \\" + gff_file + \\" | awk 'BEGIN{FS=\\" \\";OFS=\\"|\\"}3==\\"CDS\\"{if(4<5){print 5-4+1,9}else{print 4-5+1,9}}' | grep \\"[NX]P[_]\\" | sed 's/([0-9]*).*GeneID:([0-9]*).*([NX]P[_][0-9]*.[0-9]*).*/1|2|3/' | awk 'BEGIN{FS=\\"|\\";OFS=\\"t\\";gene=\\"\\";acc=\\"\\";len=0}{if(acc!=3){print gene,acc,len/3-1;gene=2;acc=3;len=1}else{len=len+1}}END{print gene,acc,len/3-1}' | sort -k1,1n -k3,3nr -k2,2 | awk 'BEGIN{FS=\\" \\";OFS=\\" \\";gene=\\"\\";acc=\\"\\";len=0}{if(gene!=1){print 1,2,3};gene=1;acc=2;len=3}' > ncbi_isoform_filter_tmp11567.txt\\" os.system(cmd); tmpFile = open(\\"ncbi_isoform_filter_tmp11567.txt\\", \\"r\\"); tmpLines = tmpFile.readlines(); tmpFile.close(); os.system(\\"rm ncbi_isoform_filter_tmp11567.txt\\"); longest_isos = []; for each in tmpLines: longest_isos.append(each.split(\\"t\\")[1]); longest_isos = filter(None, longest_isos); print \\"Writing longest isoforms to output file...\\"; count = 0; for title in inseqs: numbars, donepercent = core.loadingBar(i, len(inseqs), donepercent, numbars); i += 1; found = 0; for gid in longest_isos: if gid in title: gid = title[title.index(\\"P_\\")-1:title.index(\\"|\\",title.index(\\"P_\\"))] new_title = \\">\\" + spec_label + \\"_\\" + gid + \\" |\\" + title[1:title.index(\\"P_\\")-1] + title[title.index(\\"|\\",title.index(\\"P_\\"))+1:]; core.writeSeq(outfilename, inseqs[title], new_title); count += 1; break; pstring = \\"100.0% complete.\\"; sys.stderr.write('b' * len(pstring) + pstring); print \\"nDone!\\"; print count, \\"sequences written.\\"; print len(inseqs) - count, \\"sequences filtered.\\"; #Main Block infilename, in_type, gff_file, label, outfilename = optParse(); pad = 50; print \\"=======================================================================\\"; print \\"ttt\\" + core.getDateTime(); print core.spacedOut(\\"Filtering isoforms from:\\", pad), infilename; if in_type == \\"ens\\": print core.spacedOut(\\"File type:\\", pad), \\"Ensembl\\"; if in_type == \\"ncbi\\": print core.spacedOut(\\"File type:\\", pad), \\"NCBI\\"; print core.spacedOut(\\"Using GFF file:\\", pad), gff_file; if in_type == \\"crow\\": print core.spacedOut(\\"File type:\\", pad), \\"Crow\\"; if label != \\"\\": print core.spacedOut(\\"Adding label to beginning of FASTA headers:\\", pad), label; print core.spacedOut(\\"Writing output to:\\", pad), outfilename; core.filePrep(outfilename); print \\"--------------------------\\"; identDict = {}; ins, skip_flag = core.fastaReader(infilename); if in_type == \\"ens\\": ensFilter(ins, label, outfilename); elif in_type == \\"ncbi\\": ncbiFilter(ins, gff_file, label, outfilename); print \\"=======================================================================\\"; DEFUNCT FILTER FOR THE CROW FILES # elif in_type == \\"crow\\": # crowFilter(ins, label, outfilename); # def crowFilter(inSeqs, filterflag, speclabel, outFilename): # rotator = 0; # numbars = 0; # donepercent = []; # i = 0; # if filterflag == 1: # print \\"Indexing\\", len(inSeqs), \\"sequences to be filtered.\\"; # print \\"Parsing identifiers...\\"; # for each in inSeqs: # rotator = core.loadingRotator(i, rotator, 100) # curTitle, curSeq = core.getFastafromInd(inFilename, each[0], each[1], each[2], each[3]); # if \\"gene=\\" not in curTitle: # print curTitle; # continue; # geneid = curTitle[curTitle.index(\\"gene=\\") + 5:].strip(); # if geneid in identDict: # identDict[geneid].append(each); # else: # identDict[geneid] = []; # identDict[geneid].append(each); # i = i + 1; # sys.stderr.write('b'); # print \\"Filtering and writing sequences...\\"; # i = 0; # count = 0; # for key in identDict: # numbars, donepercent = core.loadingBar(i, len(identDict), donepercent, numbars); # if len(identDict[key]) == 1: # curTitle, curSeq = core.getFastafromInd(inFilename, identDict[key][0][0], identDict[key][0][1], identDict[key][0][2], identDict[key][0][3]); # if speclabel != \\"\\": # newTitle = \\">\\" + speclabel + \\"_\\" + curTitle[1:]; # core.writeSeq(outFilename, curSeq, newTitle); # else: # core.writeSeq(outFilename, curSeq, curTitle); # count = count + 1; # else: # titlelist = []; # seqlist = []; # for inds in identDict[key]: # aTitle, aSeq = core.getFastafromInd(inFilename, inds[0], inds[1], inds[2], inds[3]); # titlelist.append(aTitle); # seqlist.append(aSeq); # longseq = max(seqlist, key=len) # for inds in identDict[key]: # aTitle, aSeq = core.getFastafromInd(inFilename, inds[0], inds[1], inds[2], inds[3]); # if aSeq == longseq: # curTitle, curSeq = core.getFastafromInd(inFilename, inds[0], inds[1], inds[2], inds[3]); # if speclabel != \\"\\": # newTitle = \\">\\" + speclabel + \\"_\\" + curTitle[1:]; # core.writeSeq(outFilename, curSeq, newTitle); # else: # core.writeSeq(outFilename, curSeq, curTitle); # count = count + 1; # break; # i = i + 1; # pstring = \\"100.0% complete.\\"; # sys.stderr.write('b' * len(pstring) + pstring); # print \\"nDone!\\"; # print count, \\"out of\\", len(identDict), \\"identifiers written.\\"; # print len(inSeqs) - count, \\"sequences filtered.\\"; # else: # print \\"Relabeling...\\"; # for seq in inSeqs: # numbars, donepercent = core.loadingBar(i, len(inSeqs), donepercent, numbars); # i = i + 1; # curTitle, curSeq = core.getFastafromInd(inFilename, seq[0], seq[1], seq[2], seq[3]); # newTitle = \\">\\" + speclabel + \\"_\\" + curTitle[1:]; # core.writeSeq(outFilename, curSeq, newTitle); # pstring = \\"100.0% complete.\\"; # sys.stderr.write('b' * len(pstring) + pstring); # print \\"nDone!\\";"},{"prompt":"Create a Python program to retrieve and print the most recent tweet of a given user. twitter_handle = realDonaldTrump","completion":"import tweepy consumer_key = \\"YOUR KEY HERE\\" consumer_secret = \\"YOUR SECRET HERE\\" access_token = \\"YOUR TOKEN HERE\\" access_token_secret = \\"YOUR SECRET HERE\\" auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) user = api.get_user(twitter_handle) tweets = api.user_timeline(id=user.id, count=1) print(\\"The most recent tweet from @\\" + twitter_handle + \\" is:\\") print(tweets[0].text)"},{"prompt":"Construct a program in Python to filter a list of stocks by price stocks = [{‘ticker’:’AAPL’,‘price’: 233.5}, {‘ticker’:’MSFT’,‘price’: 115.8}, {‘ticker’:’GOOGL’, ‘price’: 1234.5}] , price_limit = 100","completion":"stocks = [{‘ticker’:’AAPL’,‘price’: 233.5}, {‘ticker’:’MSFT’,‘price’: 115.8}, {‘ticker’:’GOOGL’, ‘price’: 1234.5}] price_limit = 100 filtered_stocks = [stock for stock in stocks if stock[\\"price\\"] > price_limit] print(filtered_stocks)"},{"prompt":"Generate a Python program to add two matrices and store the result in a third matrix. A = [[1, 2], [3, 4]] B = [[5, 6], [7, 8]]","completion":"def matrix_addition(A, B): no_rows = len(A) no_columns = len(A[0]) C = [[0 for i in range(no_columns)] for j in range(no_rows)] for i in range(no_rows): for j in range(no_columns): C[i][j] = A[i][j] + B[i][j] return C A = [[1, 2], [3, 4]] B = [[5, 6], [7, 8]] result = matrix_addition(A, B) for row in result: print(row)"},{"prompt":"Write a function in Python to detect if a given string contains any special characters such as # & ! etc.","completion":"def special_characters_check(string): special_characters = ['@','#','','%','^','&','*','(',')','+',':',';','?','/'] for character in string: if character in special_characters: return \\"Yes, the string contains a special character.\\" return \\"No, the string does not contain a special character.\\""},{"prompt":"Can you create a Python script to find the maximum element in the given array using divide and conquer algorithm? arr = [3, 5, 7, 9, 1, 20]","completion":"def findMaxElement(arr, low, high): if (high == low): return arr[low] else: mid = (low + high) // 2 max_left = findMaxElement(arr, low, mid) max_right = findMaxElement(arr, mid + 1, high) return max(max_left, max_right) print(findMaxElement(arr, 0, len(arr)-1)) # 20"},{"prompt":"Design a Python program to find the longest sequence of consecutive integers in a list.","completion":"def longest_sequence(arr): longest_sequence = [] current_sequence = [] current_num = None for num in sorted(arr): if current_num is None or num == current_num + 1: current_sequence.append(num) current_num = num else: if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]): longest_sequence = current_sequence current_sequence = [num] current_num = num if len(current_sequence) > len(longest_sequence) or (len(current_sequence) == len(longest_sequence) and current_sequence[0] < longest_sequence[0]): longest_sequence = current_sequence return longest_sequence"},{"prompt":"Create a Python script that connects to a MySQL database and executes an SQL query to output the most expensive products from the database. Database table structure: id (int) name (varchar) price (float)","completion":"import pymysql # Connect to MySQL database conn = pymysql.connect( host='host', user='user', password='password', db='dbname' ) # Create cursor cur = conn.cursor() # Execute query query = 'SELECT name, price FROM products ORDER BY price DESC' cur.execute(query) # Fetch the most expensive products most_expensive_products = cur.fetchall() # Print results for product in most_expensive_products: print(f'Product: {product[0]}, Price: {product[1]}') # Close connection cur.close() conn.close()"},{"prompt":"Generate a list of all prime numbers below 100 with Python.","completion":"def getPrimes(n): primes = [] for num in range(2, n + 1): for idx in range(2, num): if num % idx == 0: break else: primes.append(num) return primes print(getPrimes(100))"},{"prompt":"Write a Python program to convert a timestamp (in seconds) to a date format (ddmmyyyy). timestamp: 1591123259","completion":"import datetime # Function to convert the timestamp def getDateTime(timestamp): return datetime.datetime.fromtimestamp(timestamp).strftime(\\"%d-%m-%Y\\") # Driver program timestamp = 1591123259 print(getDateTime(timestamp)) # Output: 17-06-2020"},{"prompt":"Create a web crawler in Python that visits pages from a given list of URLs and extracts hyperlinks contained in each page URL1: https://www.example1.com URL2: https://www.example2.com","completion":"import requests from bs4 import BeautifulSoup # The list of URLs urls = [ 'https://www.example1.com', 'https://www.example2.com' ] # Iterate through each URL for url in urls: # Connect to the URL response = requests.get(url) # Parse HTML and save to BeautifulSoup object¶ soup = BeautifulSoup(response.text, 'html.parser') # Extract all the hyperlinks links = soup.find_all('a') # Print out the link for link in links: print(link['href'])"},{"prompt":"Create a function in Python that takes in an array of integers and returns the odd numbers from that array. [1, 2, 3, 4, 5]","completion":"def get_odd_numbers(arr): # Create an empty list to store the odd numbers odd_numbers = [] # Iterate through and check for odd numbers for num in arr: if num % 2 != 0: odd_numbers.append(num) return odd_numbers arr = [1, 2, 3, 4, 5] odd_numbers = get_odd_numbers(arr) print('Odd numbers: ', odd_numbers)"},{"prompt":"Write python code to calculate distance between two points with latitude, longitude Point A: (51.509865, 0.118092) Point B: (40.730610, 73.935242)","completion":"\\"\\"\\" Calculating the distance between two points with latitude and longitude \\"\\"\\" import math def calc_dist(x1,y1,x2,y2): \\"\\"\\" Calculates the distance between two points given their latitude and longitude. Input: x1, y1 - the latitude and longitude of the first point x2, y2 - the latitude and longitude of the second point Output: distance - the distance between the two points \\"\\"\\" # convert the latitude and longitude to radians x1, y1, x2, y2 = map(math.radians, [x1, y1, x2, y2]) # calculate the great circle distance dlon = y2-y1 dlat = x2-x1 a = math.sin(dlat/2)**2 + math.cos(x1) * math.cos(x2)* math.sin(dlon/2)**2 c = 2 * math.asin(math.sqrt(a)) r = 6371 # radius of Earth in kilometers return c * r # the coordinates of point A and point B x1 = 51.509865 y1 = -0.118092 x2 = 40.730610 y2 = -73.935242 # calculate the distance between the two points dist = calc_dist(x1, y1, x2, y2) print(\\"The distance between two points is \\" + str(dist) + \\" kilometers\\")"},{"prompt":"Program a neural network in Python to predict house prices based on features such as location, size, and number of bedrooms. Data: Location: London Size: 2500 sq. ft Number of Bedrooms: 4","completion":"import numpy as np import tensorflow as tf import pandas as pd # Define the model model = tf.keras.Sequential() model.add(tf.keras.layers.Dense(64, input_dim=3, activation='relu')) model.add(tf.keras.layers.Dense(32, activation='relu')) model.add(tf.keras.layers.Dense(1)) # Compile the model model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mse']) # Create training data location = [['London', 2500, 4]] df = pd.DataFrame(location, columns=['Location', 'Size', 'Bedrooms']) features = df.drop('Location', axis=1).values target = df['Location'].values # Fit the model model.fit(features, target, epochs=10) # Make a prediction prediction = model.predict([[2500, 4]]) # Print the result print(\\"The predicted house price in London is: {}\\".format(prediction[0][0]))"},{"prompt":"Create a pipeline for sentiment analysis in Python, taking the text data as input and evaluating it as positive, negative, or neutral. Not applicable","completion":"import pandas as pd import nltk import numpy as np from nltk.tokenize import word_tokenize from nltk.classify import NaiveBayesClassifier from nltk.corpus import movie_reviews,stopwords # List of stopwords to be removed stop_words = set(stopwords.words('english')) # Preprocessing for the training data def process_data(doc): words=word_tokenize(doc) words=[ :.lower for w in words if w not in stop_words] words=[w for w in words if len(w) > 3] return words # Initializes the bag of words def init_bag_words(): bag_words=[] for w1 in movie_reviews.words(): bag_words.append(w1.lower()) for w2 in stop_words: bag_words.remove(w2) # Remove stopwords return bag_words # Builds the feature set for the model def build_feature_set(bag_words,pos,neg): train_dataset=[] for (rev,label) in pos+neg: f_set=np.zeros(len(bag_words)) rev_words=set(process_data(rev)) for w in rev_words: if (w in bag_words): f_set[bag_words.index(w)] = 1 train_dataset.append([f_set,label]) return train_dataset # Fit the Naive Bayes Model def fit_model(train_dataset): clf = NaiveBayesClassifier.train(train_dataset) return clf # loads the dataset pos_files = movie_reviews.fileids('pos') neg_files = movie_reviews.fileids('neg') pos_rev = [movie_reviews.raw(f) for f in pos_files] neg_rev = [movie_reviews.raw(f) for f in neg_files] # Initializes the model bag_words = init_bag_words() train_dataset = build_feature_set(bag_words,pos_rev,neg_rev) clf = fit_model(train_dataset) # Test data text=\\"This was a great movie with amazing direction.\\" test_data=np.zeros(len(bag_words)) words=process_data(text) for w in words: if (w in bag_words): test_data[bag_words.index(w)] = 1 # Predict sentiment pred = clf.classify(test_data) print(\\"The sentiment for the given text is: \\", pred)"},{"prompt":"Write a Python program to compare the results of two sorting algorithms. Algorithms: QuickSort, MergeSort Array: [3, 8, 1, 9, 5, 2]","completion":"def quicksort(arr): if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right) def mergesort(arr): if len(arr) > 1: mid = len(arr) // 2 # Finding the mid of the array L = arr[:mid] # Dividing the array elements R = arr[mid:] # into 2 halves left_arr = mergesort(L) # Sorting the first right_arr = mergesort(R) # half arr =[] while len(left_arr) > 0 and len(right_arr) > 0: if left_arr[0] < right_arr[0]: arr.append(left_arr[0]) left_arr.pop(0) else: arr.append(right_arr[0]) right_arr.pop(0) # Checking if any element was left for i in left_arr: arr.append(i) for i in right_arr: arr.append(i) return arr # Test array arr = [3, 8, 1, 9, 5, 2] # Sorted array using QuickSort print(\\"Sorted array using QuickSort:\\", quicksort(arr)) # Sorted array using MergeSort print(\\"Sorted array using MergeSort:\\", mergesort(arr)) Output: Sorted array using QuickSort: [1, 2, 3, 5, 8, 9] Sorted array using MergeSort: [1, 2, 3, 5, 8, 9]"},{"prompt":"Suggest a code to create a series of Fibonacci numbers in Python.","completion":"# Function to generate Fibonacci series def Fibonacci(n): if n<0: print(\\"Incorrect Input\\") # First two numbers of the series elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(9)) # Output: 21"},{"prompt":"Combine the two Python lists into a single list. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"combined_list = list1 + list2 print(combined_list)"},{"prompt":"Create a program in Python that takes an input string and removes all duplicate characters. let str = abracadabra","completion":"def removeDuplicates(str): s = \\"\\" for i in range(len(str)): if str[i] not in s: s += str[i] return s str = \\"abracadabra\\" print(\\"The output string is:\\", removeDuplicates(str))"},{"prompt":"Create a Python script to download a zip archive from a URL and extract it in the current directory. https://example.com/myzip.zip","completion":"import requests import shutil import zipfile url = 'https://example.com/myzip.zip' response = requests.get(url, stream=True) with open('myzip.zip', 'wb') as f: shutil.copyfileobj(response.raw, f) with zipfile.ZipFile('myzip.zip', 'r') as f: f.extractall()"},{"prompt":"Write a Python function to display the first and last elements of a list.","completion":"def display_first_last_elements(lst): print(\\"First element of the list:\\", lst[0]) print(\\"Last element of the list:\\", lst[-1])"},{"prompt":"Write a python function to convert a telephone number into its numerical representation, e.g., turning a 4digit telephone number into “2468” or “4444”. Telephone Number: 2002","completion":"def numerical_representation(phone): phone_number = \\"\\" for digit in phone: if digit == '0': phone_number += \\"0\\" elif digit == '1': phone_number += \\"1\\" elif digit == '2': phone_number += \\"2-4-6-8\\" elif digit == '3': phone_number += \\"3-5-9-7\\" elif digit == '4': phone_number += \\"4-4-4-4\\" elif digit == '5': phone_number += \\"5-5-2-6\\" elif digit == '6': phone_number += \\"6-6-8-4\\" elif digit == '7': phone_number += \\"7-9-3-1\\" elif digit == '8': phone_number += \\"8-8-6-2\\" elif digit == '9': phone_number += \\"9-7-1-3\\" return phone_number numerical_representation('2002') # '2-4-6-8'"},{"prompt":"Create a Python web scraper that extracts the title, author, and content of articles from a website. The URL of a sample website to scrap is: https://example.com/article","completion":"import requests import bs4 url = 'https://example.com/articles' # Fetch the page response = requests.get(url) html_soup = bs4.BeautifulSoup(response.text, 'html.parser') # Extract list of articles from the page articles = html_soup.find_all('article') # Iterate over the articles for article in articles: # Extract the title, author, and content title = article.find('h2').text author = article.find('p', {'class': 'author'}).text content = article.find('p', {'class': 'content'}).text # Print out the extracted values print(\\"Title:\\", title) print(\\"Author:\\", author) print(\\"Content:\\", content)"},{"prompt":"Write an algorithm in Python that takes an input of positive integers and for each element in the list multiplies it by 2 if it is even and divide it by 3 if it is odd. [2, 3, 4, 6, 8, 10]","completion":"def multiplyOddDivideEven(lst): new_list = [] for element in lst: if element % 2 == 0: new_list.append(element / 3) else: new_list.append(element * 2) return new_list print(multiplyOddDivideEven([2, 3, 4, 6, 8, 10])) # prints [1.0, 6, 2.0, 4.0, 4.0, 5.0]"},{"prompt":"Create a SequentialGUID class that generates a new GUID based on the current timestamp and random bytes. The NewGUID method takes an optional parameter to specify the format of the GUID (as a string or binary) and the position of the timestamp (at the beginning or end of the GUID). The class requires Python 2.6+ with bytearray support.","completion":"SequentialGUID import os import datetime import sys from binascii import unhexlify, hexlify import uuid class SequentialGUID: SEQUENTIAL_GUID_AS_STRING = 0 SEQUENTIAL_GUID_AS_BINARY = 1 SEQUENTIAL_GUID_AT_END = 2 def __init__(self): pass @staticmethod def NewGUID(guid_type = SEQUENTIAL_GUID_AS_STRING): # What type of machine are we runing on? endian = sys.byteorder # will be 'little' or 'big' # Need some random info rand_bytes = bytearray() rand_bytes += os.urandom(10) #Get 10 random bytes # Get the current timestamp in miliseconds - makes this sequential ts = long((datetime.datetime.utcnow() - datetime.datetime(1970, 1, 1)).total_seconds() * 1000) tsbytes = bytearray() # NOTE: we don't pass endian into long_to_bytes tsbytes += long_to_bytes(ts) # Convert long to byte array while (len(tsbytes) < 8): # Make sure to padd some 0s on the front so it is 64 bits tsbytes.insert(0, 0) # Python will most likely make it a byte array guid_bytes = bytearray(16) # 16 bytes is 128 bit # Combine the random and timestamp bytes into a GUID if(guid_type != SequentialGUID.SEQUENTIAL_GUID_AT_END): guid_bytes[0] = tsbytes[2] # Copy timestamp into guid guid_bytes[1] = tsbytes[3] guid_bytes[2] = tsbytes[4] guid_bytes[3] = tsbytes[5] guid_bytes[4] = tsbytes[6] guid_bytes[5] = tsbytes[7] guid_bytes[6] = rand_bytes[0] # Copy rand bytes into guid guid_bytes[7] = rand_bytes[1] guid_bytes[8] = rand_bytes[2] guid_bytes[9] = rand_bytes[3] guid_bytes[10] = rand_bytes[4] guid_bytes[11] = rand_bytes[5] guid_bytes[12] = rand_bytes[6] guid_bytes[13] = rand_bytes[7] guid_bytes[14] = rand_bytes[8] guid_bytes[15] = rand_bytes[9] if (guid_type == SequentialGUID.SEQUENTIAL_GUID_AS_STRING and endian == \\"little\\" and 1!=1): TODO: This is mucking things up for some reason hence the 1!=1 # Need to swap stuff around if this is going to be string on little endian machines b = guid_bytes[0:4] # First data chunk (4 items) b.reverse() guid_bytes[0] = b[0] guid_bytes[1] = b[1] guid_bytes[2] = b[2] guid_bytes[3] = b[3] b = guid_bytes[4:6] # 2nd data chunk (2 items) b.reverse() guid_bytes[4] = b[0] guid_bytes[5] = b[1] pass pass else: # Same as above, but different order - timestamp at end not beginning guid_bytes[10] = tsbytes[2] # Copy timestamp into guid guid_bytes[11] = tsbytes[3] guid_bytes[12] = tsbytes[4] guid_bytes[13] = tsbytes[5] guid_bytes[14] = tsbytes[6] guid_bytes[15] = tsbytes[7] guid_bytes[0] = rand_bytes[0] # Copy rand bytes into guid guid_bytes[1] = rand_bytes[1] guid_bytes[2] = rand_bytes[2] guid_bytes[3] = rand_bytes[3] guid_bytes[4] = rand_bytes[4] guid_bytes[5] = rand_bytes[5] guid_bytes[6] = rand_bytes[6] guid_bytes[7] = rand_bytes[7] guid_bytes[8] = rand_bytes[8] guid_bytes[9] = rand_bytes[9] pass # Create the guid and return it guid = uuid.UUID(hex=hexlify(guid_bytes)) return guid def long_to_bytes (val, endianness='big'): \\"\\"\\" Pulled from http://stackoverflow.com/questions/8730927/convert-python-long-int-to-fixed-size-byte-array Use :ref:\`string formatting\` and :func:\`~binascii.unhexlify\` to convert \`\`val\`\`, a :func:\`long\`, to a byte :func:\`str\`. :param long val: The value to pack :param str endianness: The endianness of the result. \`\`'big'\`\` for big-endian, \`\`'little'\`\` for little-endian. If you want byte- and word-ordering to differ, you're on your own. Using :ref:\`string formatting\` lets us use Python's C innards. \\"\\"\\" # one (1) hex digit per four (4) bits width = val.bit_length() # unhexlify wants an even multiple of eight (8) bits, but we don't # want more digits than we need (hence the ternary-ish 'or') width += 8 - ((width % 8) or 8) # format width specifier: four (4) bits per hex digit fmt = '%%0%dx' % (width // 4) # prepend zero (0) to the width, to zero-pad the output s = unhexlify(fmt % val) if endianness == 'little': # see http://stackoverflow.com/a/931095/309233 s = s[::-1] return s # Usage # guid = SequentialGUID.NewSequentialGUID(SequentialGUID.SEQUENTIAL_GUID_AS_STRING) # Use String for most dbs, and At End for MSSQL if you use their GUID field type # REQUIRES: Python 2.6+ with bytearray support End SequentailGUID"},{"prompt":"Rewrite the following JavaScript function to Python. The function takes two parameters and returns their product. function multiply(x, y) { return x * y; } Not applicable","completion":"def multiply(x, y): return x * y;"},{"prompt":"Create a python function to find out if an item exists in a given list.","completion":"def is_item_in_list(item, my_list): '''This function checks if an item exists in a given list and returns a boolean value. Parameters ---------- item: The item to be checked. my_list: The list in which the item is to be checked. Returns -------- boolean: True if the item is present in the list, and False if it is not. ''' return item in my_list"},{"prompt":"Create a REST API in Python using the Flask library that returns the description and price of an item given its id as a parameter. Not applicable","completion":"from flask import Flask import json app = Flask(__name__) items = [ {'id': 1, 'description': 'A book', 'price': 10.99}, {'id': 2, 'description': 'A pencil', 'price': 0.99}, {'id': 3, 'description': 'A cup', 'price': 5} ] @app.route('/items/<int:item_id>') def get_item(item_id): item = [item for item in items if item['id'] == item_id] if item: return json.dumps(item[0]) else: return 'Item not found', 404 if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a python program to check if a given number is an Armstrong number or not.","completion":"def is_armstrong_number(num): digits_sum = 0 num_string = str(num) for digit in num_string: digits_sum += int(digit)**len(num_string) return digits_sum == num"},{"prompt":"Create a python library to generate a bar chart from a given set of data points. Data points: [5, 8, 9, 10, 12]","completion":"import matplotlib.pyplot as plt # Data points data = [5, 8, 9, 10, 12] # Create bar chart plt.bar(range(len(data)), data) # Show bar chart plt.show()"},{"prompt":"Generate keywords from the text How to build a machine learning model in Python. How to build a machine learning model in Pytho","completion":"\\"keywords\\": [\\"machine learning model\\", \\"build machine learning model\\", \\"Python\\", \\"machine learning\\", \\"machine learning Python\\", \\"model building machine learning\\", \\"build model Python\\"]"},{"prompt":"Build a machine learning model in Python to predict whether a customer should be contacted or not. The data given consists of the columns; age, salary, bank balance, purchased product and response.","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Read the dataset data = pd.read_csv('data.csv') # Separate the features and targets X = data.iloc[:, 0:4] # independent variables y = data.iloc[:, 4] # target variable # Create an instance of a linear regression model model = LinearRegression() # Fit model to training data model.fit(X, y) # Make predictions predictions = model.predict(X) # Determine whether a customer should be contacted or not contacted = np.where(predictions > 0.5, \\"Yes\\", \\"No\\") print(contacted)"},{"prompt":"Write a Python script with two arguments, a minimum value and a maximum value, to generate a randomly selected number between them.","completion":"import random def generate_random_number(min_value, max_value): return random.randint(min_value, max_value)"},{"prompt":"Generate a Python script that computes the area of an ellipse given its semimajor axis and semiminor axis as inputs. Semimajor axis = 5 Semiminor axis = 3","completion":"import math # Semi-Major Axis a = 5 # Semi-Minor Axis b = 3 # Calculate the area of an ellipse area = math.pi * a * b print(\\"The area of the ellipse is\\", area)"},{"prompt":"Create a class in Python that defines two methods","completion":"class MyClass: def FirstMethod(self): pass def SecondMethod(self): pass"},{"prompt":"Create a ML model to predict housing prices using Python and scikitlearn. Not applicable","completion":"# Import libraries import numpy as np import pandas as pd from sklearn.ensemble import RandomForestRegressor from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error, r2_score from sklearn.preprocessing import StandardScaler, LabelEncoder # Read data df = pd.read_csv('housing.csv') # Pre-process data X = df.drop('price', axis=1) numeric_features = X.select_dtypes(include=[np.number]) numeric_features = numeric_features.fillna(-999) scaler = StandardScaler() scaled_data = scaler.fit_transform(numeric_features) X[numeric_features.columns] = scaled_data # Encode categorical features categorical_features = X.select_dtypes(include=['object']) encoder = LabelEncoder() categorical_features = categorical_features.apply(encoder.fit_transform) X[categorical_features.columns] = categorical_features # Split data y = df.price X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42) # Build and train model regressor = RandomForestRegressor(n_estimators=100, random_state=0) regressor.fit(X_train, y_train) # Make predictions y_pred = regressor.predict(X_test) # Assess performance rmse = np.sqrt(mean_squared_error(y_test, y_pred)) r2 = r2_score(y_test, y_pred) print('Root Mean Squared Error: ', rmse) print('R2 score: ', r2)"},{"prompt":"Write a Python function to determine if a string contains any punctuation characters","completion":"def contains_punctuation(string): for character in string: if character in string.punctuation: return True return False result = contains_punctuation('Hello world!') print(result)"},{"prompt":"Write a Python code snippet to generate a random string of 10 characters.","completion":"import string import random def random_string(): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(10)) my_string = random_string() print(my_string)"},{"prompt":"Write a Python program to compare two strings and print the number of times the second string appears in the first string. The quick brown fox jumps over the lazy dog, fox","completion":"def count_word_occurrence(str1, str2): count = 0 for word in str1.split(): if word == str2: count += 1 return count occurrence = count_word_occurrence(\\"The quick brown fox jumps over the lazy dog\\", \\"fox\\") print(occurrence)"},{"prompt":"Generate a python program to normalize a list of values in the range 0 and 1 [1, 0, 1, 2]","completion":"def normalize_list(input_list): min_val = min(input_list) max_val = max(input_list) output_list = [] for value in input_list: normalized_value = (value - min_val) / (max_val - min_val) output_list.append(normalized_value) return output_list"},{"prompt":"Generate a Python program to calculate the average of the the numbers 1k.","completion":"def average(k): sum = 0 for i in range(1, k+1): sum += i return sum / k"},{"prompt":"Create a Python program to remove all characters from a given string except for letters and whitespaces Hello % World","completion":"def remove_non_letter_characters(s): return \\"\\".join(e for e in s if e.isalpha() or e == \\" \\") s = 'Hello % World' print(remove_non_letter_characters(s))"},{"prompt":"Rewrite the following Python code that takes a list of strings and capitalizes each word, in the same Python syntax but more optimized code. words = ['these', 'are', 'some', 'words']","completion":"words = ['these', 'are', 'some', 'words'] words = [word.capitalize() for word in words]"},{"prompt":"Compose a function to find the maximum value in an array in Python. [1, 4, 2]","completion":"def find_max_value(arr): max_value = arr[0] for i in range(1, len(arr)): if arr[i] > max_value: max_value = arr[i] return max_value array = [1,4,2] res = find_max_value(array) print (res)"},{"prompt":"Transform the following code to be in Python 3 syntax. x = input(Enter a number: )","completion":"x = input(\\"Enter a number: \\") x = int(x)"},{"prompt":"Create a class in Python to represent a die with 6 faces.","completion":"class Die: def __init__(self): self.faces = [1, 2, 3, 4, 5, 6] def roll(self): return random.choice(self.faces)"},{"prompt":"Develop a deep learning model in Python using Keras to perform digit classification. MNIST dataset (Contains 70,000 images of handwritten digits 10 classes, 09 with 7,000 images per class).","completion":"import numpy as np import matplotlib.pyplot as plt from keras.datasets import mnist from keras.models import Sequential from keras.layers import Dense from keras.utils import to_categorical # load the MNIST dataset (X_train, y_train), (X_test, y_test) = mnist.load_data() # flatten 28*28 images to a 784 vector for each image num_pixels = X_train.shape[1] * X_train.shape[2] X_train = X_train.reshape(X_train.shape[0], num_pixels).astype('float32') X_test = X_test.reshape(X_test.shape[0], num_pixels).astype('float32') # normalize inputs from 0-255 to 0-1 X_train = X_train / 255 X_test = X_test / 255 # one hot encode outputs y_train = to_categorical(y_train) y_test = to_categorical(y_test) num_classes = y_test.shape[1] # define the keras model def classification_model(): # create model model = Sequential() model.add(Dense(num_pixels, activation='relu', input_shape=(num_pixels,))) model.add(Dense(100, activation='relu')) model.add(Dense(num_classes, activation='softmax')) # compile model model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) return model # build the model model = classification_model() # fit the model model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=10, verbose=2) # evaluate the model scores = model.evaluate(X_test, y_test, verbose=0) print('Accuracy: {}% n Error: {}'.format(scores[1], 1 - scores[1]))"},{"prompt":"Create a Python program which takes a list of numbers and a number k and returns whether any two numbers from the list add up to k. list: [10,15,3,7] k: 17","completion":"def twoNumberSum(list, k): seen = set() for num in list: if k-num in seen: return [num, k-num] else: seen.add(num) return []"},{"prompt":"Write a Python program to parse a URL and extract its components. The program should take a URL and output the scheme, host, path, and query parameters as a JSON object. https://www.example.com/foo/bar?param1=value1&param2=value2","completion":"import urlparse url_input = 'https://www.example.com/foo/bar?param1=value1&param2=value2' url_components = urlparse.urlparse(url_input) url_components_dict = { 'scheme': url_components.scheme, 'host': url_components.netloc, 'path': url_components.path, 'query': url_components.query } print(url_components_dict) # outputs { 'scheme': 'https', 'host': 'www.example.com', 'path': '/foo/bar', 'query': 'param1=value1&param2=value2' }"},{"prompt":"Write a Python program to create a neural network model that can classify handwritten digits (09) with at least 95% accuracy. Not applicable","completion":"import keras from keras.models import Sequential from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D from keras.utils import to_categorical # Loading the data from keras.datasets import mnist (X_train, y_train), (X_test, y_test) = mnist.load_data() # Making sure the data is in the correct shape X_train = X_train.reshape(60000,28,28,1) X_test = X_test.reshape(10000,28,28,1) # Preprocessing the data X_train = X_train.astype('float32') X_test = X_test.astype('float32') X_train /= 255 X_test /= 255 # Prepare the labels for the model y_train = to_categorical(y_train, 10) y_test = to_categorical(y_test, 10) # Creating the neural network model = Sequential() model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1))) model.add(MaxPooling2D(pool_size=(2, 2))) model.add(Flatten()) model.add(Dense(128, activation='relu')) model.add(Dropout(0.25)) model.add(Dense(10, activation='softmax')) # Compiling the model model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) # Training the model model.fit(X_train, y_train, batch_size=128, epochs=10, verbose=1, validation_data=(X_test, y_test)) # Evaluating the model score = model.evaluate(X_test, y_test, verbose=0)"},{"prompt":"Create a Web API in Python to serve the latest stock prices. Not applicable","completion":"import json import requests from flask import Flask, request app = Flask(name) @app.route('/get_latest_stock_prices') def get_latest_stock_prices(): stock_info = requests.get('http://finance.yahoo.com/d/quotes.csv?s=MSFT+AAPL+GOOGL+AMZN&f=nsl1op') stock_list = stock_info.text.splitlines() stock_prices = {} for stock in stock_list: stock_data = stock.split(',') stock_prices[stock_data[0]] = { 'name': stock_data[1], 'price': stock_data[2], 'open': stock_data[3], 'percent_change': stock_data[4] } return json.dumps(stock_prices) if name == 'main': app.run(debug=True)"},{"prompt":"Design a compiler to identify the language and the keywords used in a given source code. Source code: for i in range(10): print(i) Language: Pytho","completion":"def isPython(code): keywords = ['for', 'in', 'range', 'print'] # check for each keyword for keyword in keywords: if keyword not in code: return False return True code = ''' for i in range(10): print(i) ''' print(isPython(code)) # Output: True"},{"prompt":"Construct a python program to approximate the probability of an event happening","completion":"import random def approximate_probability(event, iterations): num_occurences = 0 for i in range(iterations): if event(): num_occurences += 1 return num_occurences / iterations"},{"prompt":"Construct a regular expression in Python to find all the occurrences of words that start with the letter A and end with a number.","completion":"regex = r\\"bAw*db\\""},{"prompt":"Construct a Python script to generate permutations of a given string.","completion":"def generate_permutations(string): # if string is of length 0 or 1 if len(string) == 0 or len(string) == 1: return [string] res = list() # traverse the string for i in range(len(string)): # remove the character at that index char = string[i] remaining_string = string[:i] + string[i+1:] # recursive call for generating permutations of string for p in generate_permutations(remaining_string): res.append(char + p) # return the generated permutations return res"},{"prompt":"Convert the following python program into Java. def read_data(): with open('sample.txt', 'r') as fp: for line in fp.readlines(): print(line)","completion":"import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException; public class ReadData { public static void main(String[] args) throws IOException { String line; BufferedReader reader = new BufferedReader(new FileReader(\\"sample.txt\\")); while((line = reader.readLine()) != null) { System.out.println(line); } reader.close(); } }"},{"prompt":"Generating natural language from a database in Python, db= { Name: John, Age: 30, Occupation: Engineer }","completion":"def generateNaturalLanguage(db): sentence = \\"The person is \\" sentence += db[\\"Name\\"] + \\", \\" sentence += \\"who is \\" + str(db[\\"Age\\"]) + \\" years old, \\" sentence += \\"and works as a \\" + db[\\"Occupation\\"] + \\".\\" return sentence"},{"prompt":"Make a function in Python which takes a string of any length, reverses it, and then returns the reversed string. String to be reversed","completion":"def reverse_string(string): reversed_string = \\"\\" for char in string: reversed_string = char + reversed_string return reversed_string"},{"prompt":"Write a Python program to traverse a given array from the end and replace each odd number with the product of the previous and next neighbors. [1, 3, 5, 7, 9, 11, 13]","completion":"def neighbor_product(arr): # loop through array elements in reverse order for i in range(len(arr)-1, 0, -1): # check if element is odd if arr[i] % 2 == 1: # replace element with product of the previous and next neighbors arr[i] = arr[i-1] * arr[i+1] return arr arr = [1, 3, 5, 7, 9, 11, 13] updated_arr = neighbor_product(arr) print(updated_arr)"},{"prompt":"Create a Mnist dataset in Python using Keras. Not applicable","completion":"import keras from keras import datasets (train_images, train_labels), (test_images, test_labels) = datasets.mnist.load_data() train_images = train_images.reshape((60000, 28, 28, 1)) train_images = train_images.astype('float32') / 255 test_images = test_images.reshape((10000, 28, 28, 1)) test_images = test_images.astype('float32') / 255 train_labels = keras.utils.to_categorical(train_labels) test_labels = keras.utils.to_categorical(test_labels)"},{"prompt":"Convert a list of numbers into strings using Python. [5, 10, 15]","completion":"# Create an empty list of strings number_strings = [] # Loops through the list of numbers for n in [5, 10, 15]: # Appends a string version of the number to the list number_strings.append(str(n)) print(number_strings) # ['5', '10', '15']"},{"prompt":"Write a Python program to get a randomly generated board configuration given a board size.","completion":"import random def get_board_config(size): board = [[0 for _ in range(size)] for _ in range(size)] for i in range(size): for j in range(size): board[i][j] = random.randint(0, 1) return board"},{"prompt":"Write a Python program that takes a single integer as input and prints out the table of its multiplication.","completion":"def print_table(n): for i in range(1, 11): print('{0} x {1} = {2}'.format(n ,i , n*i)) print_table(4)"},{"prompt":"Create a Python program to generate N random numbers between 0 and 1 N = 5","completion":"import random def gen_random_numbers(n): rand_nums = [] for i in range(n): rand_nums.append(random.uniform(0.0, 1.0)) return rand_nums rand_nums = gen_random_numbers(N) print(rand_nums)"},{"prompt":"Write a Python program to sort a dictionary by key.","completion":"def sort_dict_by_key(d): \\"\\"\\"Sort a dictionary by key.\\"\\"\\" return {k: d[k] for k in sorted(d)}"},{"prompt":"Create a Python program that takes in a list of strings and returns a dictionary with the count of each word. list_of_strings = ['My', 'name', 'is', 'John', 'Doe', 'My', 'name', 'is', 'John']","completion":"def count_words(list_of_strings): count_dict = dict() for word in list_of_strings: if word in count_dict: count_dict[word] += 1 else: count_dict[word] = 1 return count_dict list_of_strings = ['My', 'name', 'is', 'John', 'Doe', 'My', 'name', 'is', 'John'] result = count_words(list_of_strings) print(result)"},{"prompt":"Edit a Python program to modify a numpy array into a pandas Dataframe. Numpy Array","completion":"import numpy as np import pandas as pd # Load the data data = np.load('data.npy') # Create the pandas DataFrame df = pd.DataFrame(data)"},{"prompt":"Write a Python program to detect whether a given string is an anagram or not. Not applicable","completion":"# Function to check anagram def isAnagram(s1, s2): # Get lengths of both strings n1 = len(s1) n2 = len(s2) if n1 != n2: return False # Create two count arrays and initialize all values as 0 count1 = [0] * 26 count2 = [0] * 26 # For each character in input strings, # increment count in the corresponding count array for i in range(n1): count1[ord(s1[i]) - ord('a')] += 1 count2[ord(s2[i]) - ord('a')] += 1 # Compare count arrays for i in range(26): if count1[i] != count2[i]: return False return True"},{"prompt":"Design a function in Python that takes a list and removes the duplicates from it. list = [1, 2, 3, 4, 3, 2]","completion":"def remove_duplicates(my_list): my_list = list(dict.fromkeys(my_list)) return my_list list = [1, 2, 3, 4, 3, 2] unique_list = remove_duplicates(list) print(unique_list) # [1, 2, 3, 4]"},{"prompt":"Write a recursive Python function to generate a Fibonacci sequence given a lower and upper limit.","completion":"def generate_fibonacci_sequence(low, up): \\"\\"\\" Generate a Fibonacci sequence Args: low (int): lower limit up (int): upper limit Returns: list: list with Fibonacci sequence \\"\\"\\" if low == up: return [low] else: fib_list = generate_fibonacci_sequence(low, up - 1) fib_list.append(fib_list[-1] + fib_list[-2]) return fib_list"},{"prompt":"Design a function in Python to return the number of possible paths from the topleft to the bottomright in an mxn matrix. mxn = 3x3","completion":"\\"\\"\\" Function in Python to return the number of possible paths from the top-left to the bottom-right in an mxn matrix \\"\\"\\" def num_of_paths(m, n): # Create a 2D table to store results of subproblems count = [[0 for x in range(m)] for x in range(n)] # Count of paths to reach any cell in first column is 1 for i in range(m): count[i][0] = 1; # Count of paths to reach any cell in first column is 1 for j in range(n): count[0][j] = 1; # Calculate count of paths for other cells in bottom-up manner using # the recursive solution for i in range(1, m): for j in range(n): # By uncommenting the last part the code calculatest he total # possible paths if the diagonal Movements are allowed count[i][j] = count[i-1][j] + count[i][j-1] #+ count[i-1][j-1]; return count[m-1][n-1]; # Driver code m = 3 n = 3 print(num_of_paths(m, n))"},{"prompt":"Write a function in Python which takes two strings as inputs and returns the longest common proper substring. str1 = abbcde and str2 = aede","completion":"def longest_common_proper_substring(str1, str2): max_len = 0 longest_substring = \\"\\" for i in range(len(str1)): length = 0 substring = \\"\\" if str1[i] in str2: length += 1 substring += str1[i] for j in range(i+1, len(str1)): if str1[j] in str2 and str1[j] == str1[j - length]: length += 1 substring += str1[j] else: break if length > max_len: max_len = length longest_substring = substring return longest_substring str1 = \\"abbcde\\" str2 = \\"aede\\" print(longest_common_proper_substring(str1, str2))"},{"prompt":"Create a program in Python to check if a given list is a subsequence of another given list [1,2,3,4], [1,2,5,6,7,3,4]","completion":"def is_subsequence(sub_list, main_list): i, j = 0, 0 n1, n2 = len(sub_list), len(main_list) while i < n1 and j < n2: if sub_list[i] == main_list[j]: i += 1 j += 1 return i == n1"},{"prompt":"Create a Python program to split a given string into two parts according to a given character. Str = applebananaorange Char =","completion":"def split_string(s, char): new_list = s.split(char) return new_list result = split_string(\\"apple-banana-orange\\", \\"-\\") print(result)"},{"prompt":"Generate a Python program that adds all numbers from 1 to a given number n.","completion":"def sum_numbers(n): total = 0 for i in range(1, n+1): total += i return total"},{"prompt":"Construct a Python program to detect pattern Given an array of numbers, detect all the consecutive numbers in the array.","completion":"def detect_pattern(arr): consec_nums = [] for i in range(1, len(arr)): if arr[i] == arr[i-1] + 1: # if consecutive numbers are detected # add the number to the list consec_nums.append(arr[i - 1]) consec_nums.append(arr[i]) return consec_nums"},{"prompt":"Write a Python program to optimize the following code def find_basket_combinations(items, basket_limit): list_of_combinations = [] if len(items) == 0: return 0 for item in items: if sum(item) < basket_limit: list_of_combinations.append(item) return list_of_combinatio","completion":"def find_basket_combinations(items, basket_limit): list_of_combinations = [] if len(items) == 0: return list_of_combinations items.sort() start_ind = 0 backtrack(start_ind, items, basket_limit, list_of_combinations, []) return list_of_combinations def backtrack(start_ind, items, basket_limit, list_of_combinations, curr_comb): if sum(curr_comb) > basket_limit: return if sum(curr_comb) <= basket_limit: list_of_combinations.append(curr_comb.copy()) for i in range(start_ind, len(items)): curr_comb.append(items[i]) backtrack(i+1, items, basket_limit, list_of_combinations, curr_comb) curr_comb.pop()"},{"prompt":"Generate a Python program to search for a given word in a text string. text = the quick brown fox jumps over the lazy dog word = fox","completion":"def searchWord(text, word): return word in text text = \\"the quick brown fox jumps over the lazy dog\\" word = \\"fox\\" if searchWord(text, word): print(\\"The word is found in the text string.\\") else: print(\\"The word is not found in the text string.\\")"},{"prompt":"Create a class definition in Python called 'Student' that contains member variables for name, age, and GPA.","completion":"class Student: def __init__(self, name, age, gpa): self.name = name self.age = age self.gpa = gpa"},{"prompt":"Develop a Python function that takes a list of numbers and returns the minimum value. [10, 5, 20, 20, 30]","completion":"def findMinValue(numlist): minVal = numlist[0] for i in numlist: if i < minVal: minVal = i return minVal numlist = [10, 5, 20, -20, 30] print(findMinValue(numlist))"},{"prompt":"Convert the below pseudocode into valid Python code. x = 0 while x<10: x = x + 2 if x==4: continue print(x)","completion":"x = 0 while x < 10: x = x + 2 if x == 4: continue print(x)"},{"prompt":"Write a Python function that takes a dictionary as input and returns a list of values sorted in ascending order. mydict = {'x':4, 'y':2, 'z':1}","completion":"def sort_dict_values(d): # create a list of values from the dictionary values = list(d.values()) # sort the list values.sort() return values result = sort_dict_values(mydict) print(result)"},{"prompt":"Design a Python script to automatically fetch and store new tweets from a given Twitter handle.","completion":"import tweepy # Authentication auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) # Initializing the API api = tweepy.API(auth) #Fetching tweets from the given Twitter handle tweets = api.user_timeline(screen_name='<Twitter handle>', count=200, include_rts=False, tweet_mode=\\"extended\\") # Storing the tweets in a list tweet_list = [] for tweet in tweets: tweet_list.append(tweet.full_text) # Saving the tweet list as a file with open('data.txt', 'w') as f: for item in tweet_list: f.write(\\"%sn\\" % item)"},{"prompt":"Create a Python program to generate a sentence from a given set of words. [The,quick,brown,fox,jumped,over,the,lazy,dog]","completion":"def generateSentence(words): sentence = '' for word in words: sentence += word + ' ' sentence += '.' return sentence sentence = generateSentence([\\"The\\",\\"quick\\",\\"brown\\",\\"fox\\",\\"jumped\\",\\"over\\",\\"the\\",\\"lazy\\",\\"dog\\"]) print(sentence)"},{"prompt":"Create a Python program that uses the Twitter API to search for tweets that contain a given keyword and compute the average sentiment score of each tweet. query = Python","completion":"import tweepy from textblob import TextBlob consumer_key = 'your_consumer_key' consumer_secret = 'your_consumer_secret' access_token = 'your_access_token' access_token_secret = 'your_access_token_secret' # authentication of consumer key and secret auth = tweepy.OAuthHandler(consumer_key, consumer_secret) # set access token and secret auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) # search for tweets public_tweets = api.search(query) sentiment_score_list = [] # loop through search results for tweet in public_tweets: analysis = TextBlob(tweet.text) sentiment_score_list.append(analysis.sentiment.polarity) # calculate average sentiment score average_sentiment_score = sum(sentiment_score_list) / len(sentiment_score_list) print(f\\"Average sentiment score: {average_sentiment_score}\\")"},{"prompt":"Write a Python program to compare two given dictionaries and find common elements.","completion":"def compare_dictionaries(dict1, dict2): common_elements = [] for key1 in dict1: if key1 in dict2: common_elements.append(key1) return common_elements"},{"prompt":"Generate python code which prints all the prime numbers in the range of 1100","completion":"def print_primes(): for number in range(2, 101): prime = True for i in range(2,number): if (number % i == 0): prime = False if prime: print(number, end=' ') print_primes()"},{"prompt":"Create a highlevel algorithm in Python that takes in two integers and returns the maximum value of the two Not applicable","completion":"def max_value(x, y): if x > y: return x else: return y"},{"prompt":"Generate a Python function to return the index of a given item in a list. lst = [1, 2, 3, 4];","completion":"def findIndex(lst, item): for i, v in enumerate(lst): if v == item: return i return -1 findIndex(lst, 4) // 3"},{"prompt":"Create a Python program to visualize the data from a given dataset using Matplotlib. The given dataset includes the following columns: 'Movie Title', 'Gross Sales', 'Production Budget', 'Release Year'.","completion":"import matplotlib.pyplot as plt import pandas as pd # Read the dataset data = pd.read_csv('data.csv') # Plot the data plt.scatter(data['Release Year'], data['Gross Sales']) plt.xlabel('Release Year', fontsize=14) plt.ylabel('Gross Sales', fontsize=14) plt.scatter(data['Production Budget'], data['Gross Sales']) plt.xlabel('Production Budget', fontsize=14) plt.ylabel('Gross Sales', fontsize=14) plt.title('Gross Sales over Years/Budgets', fontsize=14) plt.show()"},{"prompt":"Create a Python plugin that stops players from spectating and quickly joining the 'free' team to avoid strafe time. The plugin should have three hooks: player_disconnect, team_switch_attempt, and team_switch. The player_disconnect hook should set a 15second delay for the player to join after disconnecting. The team_switch_attempt hook should stop the player from joining if the spec delay is true. The team_switch hook should set a delay on joining when the player joins spectator and stop the player from joining if they try to join the 'free' team before the 15second delay is up. Use the minqlx.delay decorator to allow the player to join after 15.1 seconds.","completion":"# This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. \\"\\"\\" Stops people spectating then quickly joining the 'free' team. This is to stop people firing a rocket, then spectating and joining then using the knockback from the rocket which would count as a strafe time. \\"\\"\\" import minqlx class spec_delay(minqlx.Plugin): def __init__(self): super().__init__() self.add_hook(\\"player_disconnect\\", self.handle_player_disconnect) self.add_hook(\\"team_switch_attempt\\", self.handle_team_switch_attempt) self.add_hook(\\"team_switch\\", self.handle_team_switch) self.spec_delays = set() def handle_player_disconnect(self, player, reason): \\"\\"\\"Sets spec delay when a player disconnects.\\"\\"\\" self.spec_delays.add(player.steam_id) self.allow_join(player) def handle_team_switch_attempt(self, player, old_team, new_team): \\"\\"\\"Stops the player joining if spec delay is true.\\"\\"\\" if new_team != \\"spectator\\" and old_team == \\"spectator\\" and player.steam_id in self.spec_delays: player.tell(\\"^6You must wait 15 seconds before joining after spectating\\") return minqlx.RET_STOP_EVENT def handle_team_switch(self, player, old_team, new_team): \\"\\"\\"Sets a delay on joining when the player joins spectator\\"\\"\\" if new_team == \\"spectator\\" and old_team == \\"free\\": # Set spec delay self.spec_delays.add(player.steam_id) self.allow_join(player) # This is only needed to stop team s; team f elif new_team == \\"free\\" and old_team == \\"spectator\\" and player.steam_id in self.spec_delays: player.tell(\\"^6You must wait 15 seconds before joining after spectating\\") return minqlx.RET_STOP_EVENT @minqlx.delay(15.1) def allow_join(self, player): \\"\\"\\"Allows the player to join after 15.1 seconds.\\"\\"\\" try: self.spec_delays.remove(player.steam_id) player.center_print(\\"^6You can join now\\") except KeyError: return except AttributeError: return"},{"prompt":"Create an AI chatbot in Python using Dialogflow which returns a web search result when a user asks How do I fix my broken window?. Not applicable","completion":"import dialogflow import json import requests # Define the Dialogflow intent def detect_intent_from_text(text, language_code, project_id, session_id): session_client = dialogflow.SessionsClient() session = session_client.session_path(project_id, session_id) text_input = dialogflow.types.TextInput(text=text, language_code=language_code) query_input = dialogflow.types.QueryInput(text=text_input) response = session_client.detect_intent(session=session, query_input=query_input) return response.query_result # Define web search logic def search_web(query): URL = \\"https://www.google.com/search\\" PARAMS = {'q': query} response = requests.get(url=URL, params=PARAMS) result = response.text return result # Define the main function def main(): # Setup Dialogflow parameters language_code = 'en-US' project_id = 'dialogflowproject-ghyvgx' session_id = 'test' # Pass user query to Dialogflow text = 'How do I fix my broken window?' response = detect_intent_from_text(text, language_code, project_id, session_id) intent = response.intent.display_name parameters = response.parameters # If intent is web search, search the web if intent == 'web search': query = parameters.get('query') result = search_web(query) print(result) # Call the main function if __name__ == '__main__': main()"},{"prompt":"Develop a python program to convert pounds to kilograms. 1 pound","completion":"weight_pounds = 1 weight_kilograms = weight_pounds/2.2 print(\\"Weight in kilograms is:\\", weight_kilograms)"},{"prompt":"Generate a for loop in Python to iterate over a range of numbers from 0 to 10.","completion":"for i in range(0,11): print(i)"},{"prompt":"Write a Python class to simulate a game of tictactoe.","completion":"class TicTacToe: board = [] def __init__(self): self.board = [[' ' for x in range(3)] for y in range(3)] def display_board(self): for row in self.board: print('|'.join(row)) def make_move(self, player, row, col): if self.board[row][col] == ' ': self.board[row][col] = player else: print \\"This cell is occupied!\\" def check_win(self): for row in self.board: if row[0] == row[1] == row[2] != ' ': return row[0] if self.board[0][0] == self.board[1][1] == self.board[2][2] != ' ': return self.board[0][0] if self.board[0][2] == self.board[1][1] == self.board[2][0] != ' ': return self.board[0][2] for col in range(3): if self.board[0][col] == self.board[1][col] == self.board[2][col] != ' ': return self.board[0][col] return ' '"},{"prompt":"Generate code to programmatically generate the Fibonacci Sequence in Python. Not applicable","completion":"def fibonacci(n): a, b = 0, 1 for i in range(n): a, b = b, a + b return a for i in range(10): print(fibonacci(i))"},{"prompt":"Author a Python program to check if a number is a palindrome. 1991","completion":"def isPalindrome(num): numStr = str(num) for i in range(0, len(numStr)//2): if numStr[i] != numStr[len(numStr)-i-1]: return False return True print(isPalindrome(1991)) # Output: True"},{"prompt":"Write a Python program to count and print the occurrences of a character in a string.","completion":"def count_char(string, char): count = 0 for i in string: if(i == char): count = count + 1 return count"},{"prompt":"Create a Python program to construct a bar chart to represent the population of each country in a given list. List of countries and population: { China: 143804000, India: 1351300000, United States: 332500000 }","completion":"import matplotlib.pyplot as plt # data country = [\\"China\\", \\"India\\", \\"United States\\"] population = [143804000, 1351300000, 332500000] # create bar chart plt.bar(country, population) # label the graph plt.title(\\"Population Bar Chart\\") plt.xlabel(\\"Country\\") plt.ylabel(\\"Population\\") # display the plot plt.show()"},{"prompt":"Write a Python function to calculate the difference between two given dates.","completion":"def date_diff(date1, date2): date1_stamp = time.mktime(datetime.strptime(date1, \\"%d/%m/%Y\\").timetuple()) date2_stamp = time.mktime(datetime.strptime(date2, \\"%d/%m/%Y\\").timetuple()) difference = abs(date1_stamp - date2_stamp) return int(difference/(24*60*60))"},{"prompt":"Write a code snippet in Python to print Pascal’s triangle for a given value of n. 4","completion":"def printPascalTriangle(n) : for line in range(1, n + 1) : C = 1 for i in range(1, line + 1) : print(C, end = \\"\\") C = int(C * (line - i) / i); print(\\"\\") n = 4 printPascalTriangle(n)"},{"prompt":"Create a machine learning model in Python to predict the stock price of a company given its historical data. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.preprocessing import MinMaxScaler from keras.models import Sequential from keras.layers import LSTM, Dense # Load and prepare data data = pd.read_csv('stock-data.csv') close = data['close'].values # Normalize data scaler = MinMaxScaler(feature_range=(0, 1)) close = close.reshape(-1, 1) close = scaler.fit_transform(close) # Convert data into shape for model input X = [] y = [] for i in range(60, close.shape[0]): X.append(close[i-60:i]) y.append(close[i]) X = np.array(X) y = np.array(y) # Create model model = Sequential() model.add(LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1))) model.add(LSTM(50, return_sequences=False)) model.add(Dense(25)) model.add(Dense(1)) model.compile(loss='mean_squared_error', optimizer='adam') # Train model model.fit(X, y, batch_size=1, epochs=1) # Predicts stock price x_test = close[-60:] x_test = x_test.reshape(-1, 1) x_test = scaler.transform(x_test) x_test = np.array(x_test) x_test_predict = np.array([x_test]) price = model.predict(x_test_predict)"},{"prompt":"Generate a python program that builds a trie data structure from a given set of strings. strings = [abc, abcd, abb, abbc]","completion":"class TrieNode: def __init__(self): self.children = dict() self.is_end_of_word = False def build_trie(strings): root_node = TrieNode() for string in strings: node = root_node for ch in string: if not node.children.__contains__(ch): node.children[ch] = TrieNode() node = node.children[ch] node.is_end_of_word = True return root_node"},{"prompt":"Create a web scraping program using Selenium and Python which finds the prices of real estate properties in a given location. location = San Francisco, CA","completion":"import os from selenium import webdriver # Create a web driver driver = webdriver.Chrome() # Navigate to the real estate website search page driver.get(\\"https://example.com/real-estate-search/\\") # Search for properties in San Francisco search_box_element = driver.find_element_by_xpath(\\"//input[@name='location']\\") search_box_element.send_keys(location) search_button_element = driver.find_element_by_xpath(\\"//input[@type='button' and @value='Search']\\") search_button_element.click() # Iterate over the list of properties and extract the prices products = driver.find_elements_by_css_selector(\\".listing-price\\") for product in products: price = product.text print(price) # Close the web driver driver.quit()"},{"prompt":"Suggest a Python program which takes a string as an input and prints the length of the string.","completion":"def string_length(string): print(len(string))"},{"prompt":"mplement a Tensorflow 2.0 model in Python to classify MNIST handwritten digits. Not applicable","completion":"import tensorflow as tf from tensorflow.keras.datasets import mnist from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense, Dropout, Flatten # Load MNIST dataset (x_train, y_train), (x_test, y_test) = mnist.load_data() # Preprocess input data x_train = x_train.reshape(60000, 784) x_test = x_test.reshape(10000, 784) x_train = x_train.astype('float32') x_test = x_test.astype('float32') x_train /= 255 x_test /= 255 # Create model model = Sequential() model.add(Dense(256, activation='relu', input_shape=(784,))) model.add(Dropout(0.2)) model.add(Dense(128, activation='relu')) model.add(Dropout(0.2)) model.add(Dense(10, activation='softmax')) # Compile and fit the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) model.fit(x_train, y_train, batch_size=128, epochs=5, verbose=1, validation_data=(x_test, y_test))"},{"prompt":"Use Python to generate a random grade based on a given number of points.","completion":"def generate_grade(points): if points >= 90: return \\"A\\" elif points >= 80: return \\"B\\" elif points >= 70: return \\"C\\" elif points >= 60: return \\"D\\" else: return \\"F\\""},{"prompt":"Use this code to retrieve all pages that use the Infobox Rugbyman template in French Wikipedia. The code uses the MySQLdb, pywikibot, sys, re, and mwparserfromhell libraries. First, import the necessary libraries. Then, define the site as the French Wikipedia. After that, create a function to parse the text of a given page. Next, generate a list of all pages that use the Infobox Rugbyman template. Finally, for each page in the list, parse the text, filter the templates, and retrieve the values of the saison and club parameters.","completion":"# -*- coding: utf-8 -*- #!/usr/bin/python import MySQLdb import pywikibot import sys import re import mwparserfromhell from pywikibot import pagegenerators ''' Ce script va récupérer toutes les pages qui utilisent le template \\"Infobox Rugbyman\\" ''' site = pywikibot.Site(\\"fr\\", \\"wikipedia\\") def parse(title): page = pywikibot.Page(site, title) text = page.get() return mwparserfromhell.parse(text) liste = pagegenerators.ReferringPageGenerator(pywikibot.Page(site, u\\"Modèle:Infobox Rugbyman\\"), onlyTemplateInclusion=True) for page in liste: print str(page.title().encode(\\"utf-8\\")) sys.exit() parsedText = parse(\\"Mathieu Bourret\\") templates = parsedText.filter_templates() for tpl in templates: if tpl.name.upper().strip() == \\"INFOBOX RUGBYMAN\\": print \\">>%s<<\\" % tpl.name.strip().encode(\\"utf-8\\") saisons = re.split(\\"<br ?/>\\", str(tpl.get(\\"saison\\").value)) clubs = re.split(\\"<br ?/>\\", str(tpl.get(\\"club\\").value)) print clubs print \\"%s - %s\\" % (len(clubs), len(saisons)) # pywikibot.extract_templates_and_params"},{"prompt":"Generate Python code to search through a given list of integers and return the closest match to the given number. [1, 5, 9, 10, 12, 15], search_term = 11","completion":"def closest_match(numbers, search_term): closest_match = None min_diff = float('inf') for number in numbers: diff = abs(number - search_term) if diff < min_diff: min_diff = diff closest_match = number return closest_match"},{"prompt":"Generate a program in Python to classify a series of numbers into even or odd. [4, 7, 9, 11, 12]","completion":"def classify_numbers(nums): for num in nums: if (num % 2) == 0: print(str(num) + \\" is even\\") else: print(str(num) + \\" is odd\\") nums = [4, 7, 9, 11, 12] classify_numbers(nums) # Output: # 4 is even # 7 is odd # 9 is odd # 11 is odd # 12 is even"},{"prompt":"Design a function in Python to generate a Fibonacci sequence.","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(9))"},{"prompt":"Create a python program which takes a list and returns the elements which appear twice. input_list = [1, 2, 3, 7, 8, 2, 4, 7]","completion":"def find_duplicates(input_list): seen = set() duplicates = [] for i in input_list: if i not in seen: seen.add(i) else: duplicates.append(i) return duplicates"},{"prompt":"Design a data structure in Python to store a sequence of integers that supports deleting the median of the sequence in O(n) time.","completion":"class MedianSequence: def __init__(self): self.nums = [] def __len__(self): return len(self.nums) def add(self, num): self.nums.append(num) self.nums.sort() def remove_median(self): mid = len(self.nums) // 2 self.nums.pop(mid)"},{"prompt":"Write a Python program to get the largest number from a list. nums = [1, 3, 5, 7, 2, 4, 6, 8]","completion":"def get_largest_number(nums): return max(nums)"},{"prompt":"Create a Python library to implement a common algorithm.","completion":"import math def algorithm(input1, input2): # Algorithm logic here return output"},{"prompt":"Write the following into python code for i = 1 to 10 print(i)","completion":"for i in range(1,11): print(i)"},{"prompt":"Create a Python program to check if a given list is sorted in ascending order. [7, 4, 8, 3, 10]","completion":"def is_sorted_ascending(numbers): for i in range(len(numbers) - 1): if numbers[i] > numbers[i+1]: return False return True"},{"prompt":"Create a function in Python that takes two parameters, an array and an integer, and returns a new array with all of the elements of the array multiplied by the integer. array = [1, 2, 3] int = 4","completion":"def multiply_by_int(array, int): new_array = [] for elem in array: new_array.append(elem * int) return new_array"},{"prompt":"Create a Python program that takes a string input from the user, sorts all the letters of the string in alphabetical order, and prints the new sorted string. Not applicable","completion":"def sort_string(): # get the string from the user string = input('Enter a string: ') # convert the string to a list and sort sorted_string = sorted(list(string)) # print the sorted string print(''.join(sorted_string)) sort_string()"},{"prompt":"Create a Python function to find the area of a circle with the given radius. radius: 3.5","completion":"def area_circle (radius): return 3.14159 * (radius ** 2) # Test print(area_circle(3.5)) # prints 38.48685"},{"prompt":"Create a Python program that takes an expression as input and evaluates it. 4 + 7","completion":"def calculate(expr): return eval(expr) result = calculate(\\"4 + 7\\") print(result)"},{"prompt":"Create a function in Python to find all elements in a list that are negative, and print them. list = [3, 0, 5, 9, 8]","completion":"def find_negatives(l): negative_numbers = [] for num in l: if num < 0: negative_numbers.append(num) print(negative_numbers) find_negatives(list) # prints [-3, -9]"},{"prompt":"Write a function in Python to calculate the Gini coefficient of a dataset. Dataset: [1, 1, 1, 2, 3, 4, 4, 5, 6]","completion":"def gini(data): data_sorted = sorted(data) size = len(data_sorted) cummulative_sum = 0 max_sum=sum(data_sorted) gini_coefficient=0.0 for i in range(size): cummulative_sum += data_sorted[i] gini_coefficient+=(2*cummulative_sum-max_sum-data_sorted[i])/max_sum return gini_coefficient/(size - 1) data = [1,1,1,2,3,4,4,5,6] print(gini(data)) # Output: 0.3"},{"prompt":"Can you implement a function in Python that takes a list of two numbers as input and returns the sum of the two numbers? [5, 10]","completion":"def add(nums): return nums[0] + nums[1] print(add([5, 10])) #Prints 15"},{"prompt":"Using the comment as a guide, replace all the variables with their corresponding values in the given Python code. a = 10 b = 25 # TODO: Replace the variables with their values result = a + b","completion":"# TODO: Replace the variables with their values result = 10 + 25"},{"prompt":"Create a Python program that takes two strings as parameters and prints out all of the common letters in the two strings. String 1: Hello String 2: World","completion":"def printCommonChars(str1, str2): commonChars = '' for char in str1: if char in str2: commonChars += char print(commonChars) printCommonChars('Hello','World')"},{"prompt":"mplement a function in Python to calculate the standard deviation of a list","completion":"def std_dev(array): import math mean = sum(array)/len(array) sum_of_squared_differences = 0 for element in array: sum_of_squared_differences += (element-mean)**2 return math.sqrt(sum_of_squared_differences/len(array))"},{"prompt":"Write a Python program to generate a simple random password consisting of lower case letters, upper case letters and numbers. Not applicable","completion":"import string import random def generate_password(length): # Create all strings lowercase_letters = string.ascii_lowercase uppercase_letters = string.ascii_uppercase numbers = string.digits # Empty string to store password password = '' # Generate random singles strings and add to password for i in range(length): random_lowercase = random.choice(lowercase_letters) random_uppercase = random.choice(uppercase_letters) random_number = random.choice(numbers) password += random_lowercase + random_uppercase + random_number # Shuffle the password password_list = list(password) random.shuffle(password_list) password = ''.join(password_list) return password password_length = 8 password = generate_password(password_length) print(password)"},{"prompt":"Create a program that defines a Python class named 'Car' with the following attributes: name, brand, color, max_speed, and is_running.","completion":"class Car: def __init__(self, name, brand, color, max_speed): self.name = name self.brand = brand self.color = color self.max_speed = max_speed self.is_running = False def start(self): self.is_running = True def stop(self): self.is_running = False"},{"prompt":"Construct a neural network in Python for predicting the outcome of a given football match. Data set of past 10 football matches.","completion":"import tensorflow as tf # Building data set features = tf.placeholder(tf.float32, [None, 10]) labels = tf.placeholder(tf.int32, [None]) # Building a neural network def build_model(features): # An input layer input_layer = tf.layers.dense(features, 16, activation=tf.nn.relu) # Two hidden layers dense_layer_2 = tf.layers.dense(input_layer, 8, activation=tf.nn.relu) dense_layer_3 = tf.layers.dense(input_layer, 8, activation=tf.nn.relu) # An output layer output_layer = tf.layers.dense(dense_layer_3, 2) return output_layer predictions = build_model(features) # Define the loss function loss = tf.reduce_mean(tf.nn.sparse_softmax_cross_entropy_with_logits(labels=labels, logits=predictions)) # Training the model train_op = tf.train.AdagradOptimizer(learning_rate=0.3).minimize(loss)"},{"prompt":"Write a Python script to fetch the top 10 Google search results from a given query query = cats","completion":"import requests from bs4 import BeautifulSoup query = \\"cats\\" # perform the search using the query url = f\\"https://www.google.com/search?q={query}\\" page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') # extract the top 10 results results = soup.find_all('div', {'class': 'ZINbbc'}, limit=10) for result in results: print(result.find('div', {'class': 'BNeawe'}).text)"},{"prompt":"Create a genealogy program called Gramps using GTK+/GNOME. The program is licensed under the GNU General Public License. The program allows users to create family trees and view them on a map. The map displays all events with a latitude and longitude associated with them. The program also allows users to edit families, persons, and events. The program has a menu bar, toolbar, and specific entry in the navigation menu. The program has a sidebar and bottom bar that display the Family Filter gramplet.","completion":"# -*- python -*- # -*- coding: utf-8 -*- # # Gramps - a GTK+/GNOME based genealogy program # # Copyright (C) 2011-2016 Serge Noiraud # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. # \\"\\"\\" Geography for one family \\"\\"\\" #------------------------------------------------------------------------- # # Python modules # #------------------------------------------------------------------------- import operator from gi.repository import Gdk KEY_TAB = Gdk.KEY_Tab from gi.repository import Gtk #------------------------------------------------------------------------- # # set up logging # #------------------------------------------------------------------------- import logging _LOG = logging.getLogger(\\"GeoGraphy.geofamily\\") #------------------------------------------------------------------------- # # Gramps Modules # #------------------------------------------------------------------------- from gramps.gen.const import GRAMPS_LOCALE as glocale _ = glocale.translation.gettext from gramps.gen.lib import EventRoleType, EventType from gramps.gen.config import config from gramps.gen.datehandler import displayer from gramps.gen.display.name import displayer as _nd from gramps.gen.display.place import displayer as _pd from gramps.gen.utils.place import conv_lat_lon from gramps.gui.views.bookmarks import FamilyBookmarks from gramps.plugins.lib.maps.geography import GeoGraphyView #------------------------------------------------------------------------- # # Constants # #------------------------------------------------------------------------- _UI_DEF = ''' <ui> <menubar name=\\"MenuBar\\"> <menu action=\\"GoMenu\\"> <placeholder name=\\"CommonGo\\"> <menuitem action=\\"Back\\"/> <menuitem action=\\"Forward\\"/> <separator/> </placeholder> </menu> <menu action=\\"EditMenu\\"> <placeholder name=\\"CommonEdit\\"> <menuitem action=\\"PrintView\\"/> </placeholder> </menu> <menu action=\\"BookMenu\\"> <placeholder name=\\"AddEditBook\\"> <menuitem action=\\"AddBook\\"/> <menuitem action=\\"EditBook\\"/> </placeholder> </menu> </menubar> <toolbar name=\\"ToolBar\\"> <placeholder name=\\"CommonNavigation\\"> <toolitem action=\\"Back\\"/> <toolitem action=\\"Forward\\"/> </placeholder> <placeholder name=\\"CommonEdit\\"> <toolitem action=\\"PrintView\\"/> </placeholder> </toolbar> </ui> ''' # pylint: disable=no-member # pylint: disable=unused-variable # pylint: disable=unused-argument #------------------------------------------------------------------------- # # GeoView # #------------------------------------------------------------------------- class GeoFamily(GeoGraphyView): \\"\\"\\" The view used to render family map. \\"\\"\\" def __init__(self, pdata, dbstate, uistate, nav_group=0): GeoGraphyView.__init__(self, _('Family places map'), pdata, dbstate, uistate, FamilyBookmarks, nav_group) self.dbstate = dbstate self.uistate = uistate self.place_list = [] self.place_without_coordinates = [] self.minlat = self.maxlat = self.minlon = self.maxlon = 0.0 self.minyear = 9999 self.maxyear = 0 self.nbplaces = 0 self.nbmarkers = 0 self.sort = [] self.additional_uis.append(self.additional_ui()) self.no_show_places_in_status_bar = False self.cal = None def get_title(self): \\"\\"\\" Used to set the titlebar in the configuration window. \\"\\"\\" return _('GeoFamily') def get_stock(self): \\"\\"\\" Returns the name of the stock icon to use for the display. This assumes that this icon has already been registered as a stock icon. \\"\\"\\" return 'geo-show-family' def get_viewtype_stock(self): \\"\\"\\"Type of view in category \\"\\"\\" return 'geo-show-family' def additional_ui(self): \\"\\"\\" Specifies the UIManager XML code that defines the menus and buttons associated with the interface. \\"\\"\\" return _UI_DEF def navigation_type(self): \\"\\"\\" Indicates the navigation type. Navigation type can be the string name of any of the primary objects. \\"\\"\\" return 'Family' def goto_handle(self, handle=None): \\"\\"\\" Rebuild the tree with the given person handle as the root. \\"\\"\\" self.build_tree() def build_tree(self): \\"\\"\\" This is called by the parent class when the view becomes visible. Since all handling of visibility is now in rebuild_trees, see that for more information. \\"\\"\\" if not self.dbstate.is_open(): return if self.uistate.get_active('Family'): self._createmap(self.uistate.get_active('Family')) else: self._createmap(self.uistate.get_active('Person')) def _createpersonmarkers(self, dbstate, person, comment, fam_id): \\"\\"\\" Create all markers for the specified person. \\"\\"\\" self.cal = config.get('preferences.calendar-format-report') latitude = longitude = \\"\\" if person: # For each event, if we have a place, set a marker. for event_ref in person.get_event_ref_list(): if not event_ref: continue role = event_ref.get_role() event = dbstate.db.get_event_from_handle(event_ref.ref) eyear = event.get_date_object().to_calendar(self.cal).get_year() place_handle = event.get_place_handle() if place_handle: place = dbstate.db.get_place_from_handle(place_handle) if place: longitude = place.get_longitude() latitude = place.get_latitude() latitude, longitude = conv_lat_lon(latitude, longitude, \\"D.D8\\") descr = _pd.display(dbstate.db, place) evt = EventType(event.get_type()) descr1 = _(\\"%(eventtype)s : %(name)s\\") % { 'eventtype': evt, 'name': _nd.display(person)} # place.get_longitude and place.get_latitude return # one string. We have coordinates when the two values # contains non null string. if longitude and latitude: if not self._present_in_places_list(2, str(descr1 + descr + str(evt))): self._append_to_places_list(descr, str(descr1 + descr + str(evt)), _nd.display(person), latitude, longitude, role, eyear, event.get_type(), person.gramps_id, place.gramps_id, event.gramps_id, fam_id ) else: self._append_to_places_without_coord( place.gramps_id, descr) family_list = person.get_family_handle_list() for family_hdl in family_list: family = self.dbstate.db.get_family_from_handle(family_hdl) if family is not None: for event_ref in family.get_event_ref_list(): if event_ref: event = dbstate.db.get_event_from_handle( event_ref.ref) role = event_ref.get_role() if event.get_place_handle(): place_handle = event.get_place_handle() if place_handle: place = dbstate.db.get_place_from_handle( place_handle) if place: longitude = place.get_longitude() latitude = place.get_latitude() (latitude, longitude) = conv_lat_lon(latitude, longitude, \\"D.D8\\") descr = _pd.display(dbstate.db, place) evt = EventType(event.get_type()) (father_name, mother_name) = self._get_father_and_mother_name(event) descr1 = \\"%s : %s - \\" % (evt, father_name) descr1 = \\"%s%s\\" % (descr1, mother_name) eyear = event.get_date_object().to_calendar(self.cal).get_year() if longitude and latitude: if not self._present_in_places_list( 2, str(descr1 + descr + str(evt))): self._append_to_places_list( descr, str(descr1 + descr + str(evt)), _nd.display(person), latitude, longitude, role, eyear, event.get_type(), person.gramps_id, place.gramps_id, event.gramps_id, family.gramps_id ) else: self._append_to_places_without_coord(place.gramps_id, descr) def family_label(self, family): \\"\\"\\" Create the family label depending on existence of the father and mother \\"\\"\\" if family is None: return \\"Unknown\\" father = mother = None hdl = family.get_father_handle() if hdl: father = self.dbstate.db.get_person_from_handle(hdl) hdl = family.get_mother_handle() if hdl: mother = self.dbstate.db.get_person_from_handle(hdl) if father and mother: label = _(\\"%(gramps_id)s : %(father)s and %(mother)s\\") % { 'father' : _nd.display(father), 'mother' : _nd.display(mother), 'gramps_id' : family.gramps_id, } elif father: label = \\"%(gramps_id)s : %(father)s\\" % { 'father' : _nd.display(father), 'gramps_id' : family.gramps_id, } elif mother: label = \\"%(gramps_id)s : %(mother)s\\" % { 'mother' : _nd.display(mother), 'gramps_id' : family.gramps_id, } else: # No translation for bare gramps_id label = \\"%(gramps_id)s :\\" % { 'gramps_id' : family.gramps_id, } return label def _createmap_for_one_family(self, family): \\"\\"\\" Create all markers for one family : all event's places with a lat/lon. \\"\\"\\" dbstate = self.dbstate self.message_layer.add_message( _(\\"Family places for %s\\") % self.family_label(family)) person = None if family: person = dbstate.db.get_person_from_handle( family.get_father_handle()) else: return family_id = family.gramps_id if person is None: # family without father ? handle = family.get_mother_handle() if handle: person = dbstate.db.get_person_from_handle(handle) if person is None: handle = self.uistate.get_active('Person') if handle: person = dbstate.db.get_person_from_handle(handle) if person is not None: family_list = person.get_family_handle_list() if len(family_list) > 0: fhandle = family_list[0] # first is primary fam = dbstate.db.get_family_from_handle(fhandle) father = mother = None handle = fam.get_father_handle() if handle: father = dbstate.db.get_person_from_handle(handle) if father: comment = _(\\"Father : %(id)s : %(name)s\\") % { 'id': father.gramps_id, 'name': _nd.display(father)} self._createpersonmarkers(dbstate, father, comment, family_id) handle = fam.get_mother_handle() if handle: mother = dbstate.db.get_person_from_handle(handle) if mother: comment = _(\\"Mother : %(id)s : %(name)s\\") % { 'id': mother.gramps_id, 'name': _nd.display(mother)} self._createpersonmarkers(dbstate, mother, comment, family_id) index = 0 child_ref_list = fam.get_child_ref_list() if child_ref_list: for child_ref in child_ref_list: child = dbstate.db.get_person_from_handle(child_ref.ref) if child: index += 1 comment = _(\\"Child : %(id)s - %(index)d \\" \\": %(name)s\\") % { 'id' : child.gramps_id, 'index' : index, 'name' : _nd.display(child) } self._createpersonmarkers(dbstate, child, comment, family_id) else: comment = _(\\"Person : %(id)s %(name)s has no family.\\") % { 'id' : person.gramps_id, 'name' : _nd.display(person) } self._createpersonmarkers(dbstate, person, comment, family_id) def _createmap(self, handle): \\"\\"\\" Create all markers for each people's event in the database which has a lat/lon. \\"\\"\\" if not handle: return self.place_list = [] self.place_without_coordinates = [] self.places_found = [] self.nbplaces = 0 self.nbmarkers = 0 self.minlat = self.maxlat = self.minlon = self.maxlon = 0.0 self.minyear = 9999 self.maxyear = 0 self.message_layer.clear_messages() if self.dbstate.db.has_family_handle(handle): family = self.dbstate.db.get_family_from_handle(handle) self._createmap_for_one_family(family) else: person = self.dbstate.db.get_person_from_handle(handle) if not person: return family_list = person.get_family_handle_list() for family_hdl in family_list: family = self.dbstate.db.get_family_from_handle(family_hdl) if family is not None: self._createmap_for_one_family(family) self.sort = sorted(self.place_list, key=operator.itemgetter(3, 4, 6) ) self._create_markers() def add_event_bubble_message(self, event, lat, lon, mark, menu): \\"\\"\\" Add an item to the popup menu. \\"\\"\\" self.itemoption = Gtk.Menu() itemoption = self.itemoption itemoption.show() menu.set_submenu(itemoption) modify = Gtk.MenuItem(label=_(\\"Edit Family\\")) modify.show() modify.connect(\\"activate\\", self.edit_family, event, lat, lon, mark) itemoption.append(modify) modify = Gtk.MenuItem(label=_(\\"Edit Person\\")) modify.show() modify.connect(\\"activate\\", self.edit_person, event, lat, lon, mark) itemoption.append(modify) modify = Gtk.MenuItem(label=_(\\"Edit Event\\")) modify.show() modify.connect(\\"activate\\", self.edit_event, event, lat, lon, mark) itemoption.append(modify) center = Gtk.MenuItem(label=_(\\"Center on this place\\")) center.show() center.connect(\\"activate\\", self.center_here, event, lat, lon, mark) itemoption.append(center) def bubble_message(self, event, lat, lon, marks): \\"\\"\\" Add the popup menu. \\"\\"\\" self.menu = Gtk.Menu() menu = self.menu menu.set_title(\\"family\\") message = \\"\\" oldplace = \\"\\" prevmark = None for mark in marks: if message != \\"\\": add_item = Gtk.MenuItem(label=message) add_item.show() menu.append(add_item) self.add_event_bubble_message(event, lat, lon, prevmark, add_item) if mark[0] != oldplace: message = \\"%s :\\" % mark[0] self.add_place_bubble_message(event, lat, lon, marks, menu, message, mark) oldplace = mark[0] evt = self.dbstate.db.get_event_from_gramps_id(mark[10]) # format the date as described in preferences. date = displayer.display(evt.get_date_object()) if date == \\"\\": date = _(\\"Unknown\\") if mark[5] == EventRoleType.PRIMARY: message = \\"(%s) %s : %s\\" % (date, mark[7], mark[1]) elif mark[5] == EventRoleType.FAMILY: evt = self.dbstate.db.get_event_from_gramps_id(mark[10]) (father_name, mother_name) = self._get_father_and_mother_name(evt) message = \\"(%s) %s : %s - %s\\" % (date, mark[7], father_name, mother_name) else: evt = self.dbstate.db.get_event_from_gramps_id(mark[10]) descr = evt.get_description() if descr == \\"\\": descr = _('No description') message = \\"(%s) %s => %s\\" % (date, mark[5], descr) prevmark = mark add_item = Gtk.MenuItem(label=message) add_item.show() menu.append(add_item) self.add_event_bubble_message(event, lat, lon, prevmark, add_item) menu.popup(None, None, None, None, event.button, event.time) return 1 def add_specific_menu(self, menu, event, lat, lon): \\"\\"\\" Add specific entry to the navigation menu. \\"\\"\\" return def get_default_gramplets(self): \\"\\"\\" Define the default gramplets for the sidebar and bottombar. \\"\\"\\" return ((\\"Family Filter\\",), ())"},{"prompt":"Compose a Python program for finding the median value of an unsorted array. [4, 5, 6, 7, 8, 1, 2]","completion":"def median(arr): # Sort the array arr.sort() # Calculate length n = len(arr) # Check if n is even if n % 2 == 0: median1 = arr[n // 2] median2 = arr[n // 2 - 1] median = (median1 + median2) / 2 else: median = arr[n // 2] return median arr = [4, 5, 6, 7, 8, 1, 2] result = median(arr) print(result) # 4.5"},{"prompt":"Generate a CPython code for reversing a given list of numbers. [1,2,3,4]","completion":"def reverse_list(nums): return nums[::-1]"},{"prompt":"Create a Python script to log the current date and time in the console.","completion":"import datetime now = datetime.datetime.now() print ('Current date and time: ', now)"},{"prompt":"Create a neural network for natural language processing (NLP) in Python. Not applicable","completion":"import numpy as np import keras from keras.datasets import reuters from keras.models import Sequential from keras.layers import Dense, Dropout, Activation from keras.preprocessing.text import Tokenizer # Set the number of words per document num_words = 1000 # Load data (x_train, y_train), (x_test, y_test) = reuters.load_data(num_words=num_words, test_split=0.2) # Vectorize input data tokenizer = Tokenizer(num_words=num_words) x_train = tokenizer.sequences_to_matrix(x_train, mode='binary') x_test = tokenizer.sequences_to_matrix(x_test, mode='binary') # One-hot encoding for labels y_train = keras.utils.to_categorical(y_train, 46) y_test = keras.utils.to_categorical(y_test, 46) # Build the model model = Sequential() model.add(Dense(512, input_shape=(num_words,))) model.add(Activation('relu')) model.add(Dropout(0.5)) model.add(Dense(46)) model.add(Activation('softmax')) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) # Train the model model.fit(x_train, y_train, batch_size=32, epochs=10, verbose=1, validation_data=(x_test, y_test)) # Evaluate the model score = model.evaluate(x_test, y_test, batch_size=32, verbose=1) print('Test score:', score[0]) print('Test accuracy:', score[1])"},{"prompt":"Create a Python script which takes two numbers as arguments and returns the maximum of the two numbers. Number1: 8 Number2: 4","completion":"def maxNumber(num1, num2): if num1 > num2: return num1 else: return num2 if __name__ == '__main__': num1 = 8 num2 = 4 print(maxNumber(num1, num2))"},{"prompt":"Develop a python program to calculate the sum of all the odd numbers in a given range. 2 to 10","completion":"def oddSumInRange(start, end): sum = 0 for i in range(start, end+1): if i % 2 != 0: sum += i return sum result = oddSumInRange(2, 10) print(result)"},{"prompt":"Write a Python script that counts the characters of a given string. Hello World","completion":"string = 'Hello world' count = len(string) print(\\"Length of the string is\\", count)"},{"prompt":"Write a function in Python to perform a selection sort on an unsorted array. [4, 6, 1, 3, 8, 2]","completion":"def selection_sort(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr const result = selection_sort([4, 6, 1, 3, 8, 2]); console.log(result);"},{"prompt":"Write a Python function to convert USD to Euro and print the new value to the console. Input amount: 12.5 USD","completion":"def usd_to_euro(amount): euro = amount * 0.9 print(amount, \\"USD is equal to\\", euro, \\"Euros.\\") usd_to_euro(12.5)"},{"prompt":"Design a REST API in Python with Flask to create, retrieve and delete an item. Not applicable","completion":"from flask import Flask, request, jsonify app = Flask(__name__) items = [] @app.route('/items', methods=['POST']) def create_item(): data = request.get_json() item = {'name': data['name'], 'price': data['price']} items.append(item) return jsonify(item) @app.route('/items/<string:name>') def get_item(name): item = next(filter(lambda x: x['name'] == name, items), None) return jsonify(item) @app.route('/items/<string:name>', methods=['DELETE']) def delete_item(name): global items items = list(filter(lambda x: x['name'] != name, items)) return jsonify({'message': 'Item deleted'})"},{"prompt":"Write a Python script that takes in two lists of length n and outputs a set of combinations of the two lists such that the resulting list is of length n^2. list1 = [1,2,3] list2 = [4,5,6]","completion":"combinations = [] for i in range(len(list1)): for j in range(len(list2)): combinations.append((list1[i], list2[j])) print(combinations) # Output: [(1,4), (1,5), (1,6), (2,4), (2,5), (2,6), (3,4), (3,5), (3,6)]"},{"prompt":"Write a Python program to classify a given animal according to its features An animal with four legs, a curved tail and feather","completion":"def classify_animal(features): if \\"four legs\\" in features and \\"curved tail\\" in features: if \\"feathers\\" in features: return \\"bird\\" else: return \\"mammal\\" else: return \\"unknown\\" features = \\"An animal with four legs, a curved tail and feathers\\" print(classify_animal(features)) # bird"},{"prompt":"Write a Python function to find all possible permutations of a given list of items. [1, 2, 3]","completion":"def find_permutations(items): permutations = [] if not items: return permutations if len(items) == 1: permutations.append(items) return permutations for i in range(len(items)): item = items[i] remaining_items = items[:i] + items[i+1:] for permutation in find_permutations(remaining_items): permutations.append([item] + permutation) return permutations # example print(find_permutations([1, 2, 3])) # [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"},{"prompt":"Create an optimization algorithm written in Python which takes a list of tuples as input and returns the pair with the smallest value. [(2, 3), (4, 1), (6, 4), (5, 8)]","completion":"def smallest_pair(lst): return min(lst, key = lambda x: x[1]) lst = [(2, 3), (4, 1), (6, 4), (5, 8)] print(smallest_pair(lst)) # Output: (4, 1)"},{"prompt":"Apply a filter in Python that removes any stop words from a text text: This is a test to see how the filter works","completion":"from nltk.corpus import stopwords from nltk.tokenize import word_tokenize def filter_stop_words(text): word_tokens = word_tokenize(text) filtered_text = [w for w in word_tokens if not w in stopwords.words('english')] return ' '.join(filtered_text)"},{"prompt":"Generate a class in Python with the given properties and methods. Class Name: Student Properties: Name String Age Integer Methods: getInfo() Returns a string with student's name and age","completion":"class Student: def __init__(self, name, age): self.name = name self.age = age def getInfo(self): return \\"Name: {}, Age: {}\\".format(self.name, self.age)"},{"prompt":"Write a Python program to convert an array of strings to an array of floats. arr = [1.2, 2.3, 3.4, 4.5]","completion":"def string_to_float(arr): return [float(x) for x in arr]"},{"prompt":"Write a Python program to find the first nonrepeated letter in a string. apple","completion":"def first_non_repeating_letter(str): for char in str: if str.lower().count(char.lower()) == 1: return char return '' # main str = \\"apple\\" print(\\"First non-repeating letter:\\", first_non_repeating_letter(str))"},{"prompt":"This code contains tests for the Merge step of PyRate. To run the tests, use the \`test_file_creation\` function. The function checks if color maps and merged files are created for different output types and raises an assertion error if any of the files are not found.","completion":"# coding: utf-8 # This Python module is part of the PyRate software package. # # Copyright 2020 Geoscience Australia # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. \\"\\"\\" This Python module contains tests for the Merge step of PyRate. \\"\\"\\" import os from subprocess import check_call import itertools import pytest from pathlib import Path from pyrate.merge import create_png_and_kml_from_tif from pyrate.core import config as cf from pyrate.merge import _merge_stack, _merge_linrate from pyrate.configuration import Configuration, write_config_file from tests.common import manipulate_test_conf @pytest.fixture def create_merge_output(tempdir, gamma_conf): tdir = Path(tempdir()) params = manipulate_test_conf(gamma_conf, tdir) output_conf_file = tdir.joinpath('conf.cfg') output_conf = tdir.joinpath(output_conf_file) write_config_file(params=params, output_conf_file=output_conf) check_call(f\\"pyrate conv2tif -f {output_conf}\\", shell=True) check_call(f\\"pyrate prepifg -f {output_conf}\\", shell=True) check_call(f\\"pyrate correct -f {output_conf}\\", shell=True) check_call(f\\"pyrate timeseries -f {output_conf}\\", shell=True) check_call(f\\"pyrate stack -f {output_conf}\\", shell=True) params = Configuration(output_conf).__dict__ _merge_stack(params) _merge_linrate(params) return params @pytest.mark.slow def test_file_creation(create_merge_output): params = create_merge_output # check if color map is created for ot in ['stack_rate', 'stack_error', 'linear_rate', 'linear_error', 'linear_rsquared']: create_png_and_kml_from_tif(params[cf.OUT_DIR], output_type=ot) output_color_map_path = os.path.join(params[cf.OUT_DIR], f\\"colourmap_{ot}.txt\\") assert Path(output_color_map_path).exists(), \\"Output color map file not found at: \\" + output_color_map_path # check if merged files are created for _type, ot in itertools.product(['stack_rate', 'stack_error', 'linear_rate', 'linear_error', 'linear_rsquared'], ['.tif', '.png', '.kml']): output_image_path = os.path.join(params[cf.OUT_DIR], _type + ot) print(f\\"checking {output_image_path}\\") assert Path(output_image_path).exists(), f\\"Output {ot} file not found at {output_image_path}\\""},{"prompt":"Write a code that calculates the Euclidean distance between two given points.","completion":"# Python def euclidean_distance(point1, point2): x1, y1 = point1 x2, y2 = point2 return ((x2-x1)**2 + (y2-y1)**2)**0.5 # JavaScript function euclideanDistance(point1, point2) { let [x1, y1] = point1; let [x2, y2] = point2; return Math.sqrt((x2 - x1)**2 + (y2 - y1)**2); }"},{"prompt":"Express the following task using Python code: Calculate the area of a triangle, given the base and height. base = 10 height = 8","completion":"def triangle_area(base, height): return 0.5 * base * height"},{"prompt":"Create a neural network model in Python to classify a large data set with five distinct classes.","completion":"# import libraries import tensorflow as tf from tensorflow.keras import models from tensorflow.keras import layers # define the model model = models.Sequential() model.add(layers.Dense(units=64, activation='relu', input_dim=5)) model.add(layers.Dense(units=32, activation='relu')) model.add(layers.Dense(units=16, activation='relu')) model.add(layers.Dense(units=5, activation='softmax')) # compile and fit the model model.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=['accuracy']) model.fit(X_train, y_train, epochs=50, batch_size=32)"},{"prompt":"Write a Python program to optimize a given function. The program should take a given function and an optimization method (e.g. gradient descent) as input and find its global minimum. f(x) = x3 + 4x2 10 Method to be used: Gradient Desce","completion":"#import required libraries import numpy as np #define function to be optimized def f(x): return x**3 + 4*x**2 - 10 #define grad (derivative of f(x)) def gradf(x): return 3*x**2 + 8*x #defing optimization parameters x0 = 3 #initial x learning_rate = 0.1 #learning rate max_iterations = 100 # max number of iterations #Optimizing for i in range(max_iterations): x = x0 - learning_rate * gradf(x0) # x = x0 - lr * grad(f(x0)) if (abs(f(x) - f(x0))<0.001): #check for convergence break x0 = x #update #output print('Optimized value of x is:', x)"},{"prompt":"Convert this code from Java to Python. public static void main(String[] args) { int i; for (i = 0; i < 5; i++) { System.out.println(Hello world!); } }","completion":"for i in range(5): print(\\"Hello world!\\")"},{"prompt":"Create a python program to calculate the grade based on a given score. 80","completion":"score = 80 if score >= 90: grade = 'A' elif score >= 80: grade = 'B' elif score >= 70: grade = 'C' elif score >= 60: grade = 'D' else: grade = 'F' print(grade)"},{"prompt":"Calculate the area of a rectangle in Python. length = 5 width = 10","completion":"area = length * width print(area)"},{"prompt":"Create a REST API with Python and Flask for managing a movie database. This API should include endpoints to create a new movie record, retrieve a movie record, update a movie record, and delete a movie record. Not applicable","completion":"from flask import Flask from flask_restful import Api, Resource, reqparse app = Flask(__name__) api = Api(app) movies = {} class Movie(Resource): def get(self, name): return movies[name] def post(self, name): parser = reqparse.RequestParser() parser.add_argument('year') parser.add_argument('rating') args = parser.parse_args() movies[name] = {'year': args['year'], 'rating': args['rating']} return movies[name], 201 def delete(self, name): del movies[name] return '', 204 def put(self, name): parser = reqparse.RequestParser() parser.add_argument('year') parser.add_argument('rating') args = parser.parse_args() movies[name] = {'year': args['year'], 'rating': args['rating']} return movies[name], 201 api.add_resource(Movie, '/movie/<string:name>') app.run(debug=True)"},{"prompt":"Write a Python method that takes a list of strings as an argument and returns a list of the words which are the same length as the longest word in the list. my_list = [apple, kiwi, banana, mango]","completion":"def same_length(words): longest = max([len(word) for word in words]) longest_words = [word for word in words if len(word) == longest] return longest_words print(same_length(my_list)) # Output: [\\"apple\\", \\"banana\\", \\"mango\\"]"},{"prompt":"Using Python's ScikitLearn library, create a prediction model to predict the price of a house given its location and features. The dataset consists of records of 3 bedroom houses in the city of Orlando, FL with features such as built year, square footage, lot size, neighborhood, etc.","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split # Load data data = pd.read_csv('orlando_housing.csv') # Create training and test sets X = data[['built_year','sqft','lotsize','neighborhood']] y = data['price'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and fit the model model = LinearRegression() model.fit(X_train, y_train) # Calculate accuracy of the model accuracy = model.score(X_test, y_test) # Make predictions predictions = model.predict(X_test)"},{"prompt":"Create a program to parse a JSON object into a Python dictionary.","completion":"import json def parse_json(json_obj): json_dict = json.loads(json_obj) return json_dict"},{"prompt":"You are given a list containing integers. Generate a Python program to find the median of that list. list = [5, 3, 8, 1, 9, 2]","completion":"def find_median(list): list = sorted(list) mid = len(list) // 2 if len(list) % 2 == 0: return (list[mid] + list[mid - 1]) / 2 else: return list[mid] find_median(list)"},{"prompt":"Write a python program that finds a maximum subarray from a given list of integers. numbers=[2,1,3,4,1,2,1,5,4]","completion":"def max_subarray(numbers): max_so_far = max_ending_here = numbers[0] for i in range(1,len(numbers)): max_ending_here = max(numbers[i], max_ending_here + numbers[i]) max_so_far = max(max_so_far, max_ending_here) return max_so_far"},{"prompt":"Create a class in Python for representing a Vector2 (a point in a 2D plane). The class should include attributes for x and y coordinates, as well as methods for computing the Euclidean distance and the dot product between two Vector2 objects. Not applicable","completion":"class Vector2: def __init__(self, x, y): self.x = x self.y = y def euclidean_distance(self, other): return ((self.x - other.x)**2 + (self.y - other.y)**2)**0.5 def dot_product(self, other): return self.x*other.x + self.y*other.y"},{"prompt":"Create a function to return the second largest element in a python list.","completion":"def second_largest_elem(lst): lst.sort() return lst[-2]"},{"prompt":"Create a Python class that implements a basic calculator with the operations (+, , *, /).","completion":"class Calculator: def __init__(self): pass def add(self, number1, number2): return number1 + number2 def subtract(self, number1, number2): return number1 - number2 def multiply(self, number1, number2): return number1 * number2 def divide(self, number1, number2): return number1 / number2"},{"prompt":"Create a Python code to use sentiment analysis to find and display words in a sentence that have a negative sentiment score. sentence = I hate the weather today","completion":"import nltk import nltk.sentiment.util def find_negative_words(sentence): tokens = nltk.word_tokenize(sentence) words = nltk.sentiment.util.mark_negation(tokens) for word in words: if nltk.sentiment.util.demo_liu_hu_lexicon([word], plot=False) < 0: print(word) find_negative_words(sentence)"},{"prompt":"Write a Python program to generate a random password with length x. x = 8","completion":"import string import random def generate_password(length): characters = string.ascii_letters + string.digits password = \\"\\" for i in range(length): password += random.choice(characters) return password result = generate_password(8) print(result)"},{"prompt":"Write a Python program to create a random password of length 10 with at least one uppercase letter, one lowercase letter, one digit and one special symbol.","completion":"import string import random length = 10 uppercase_letters = list(string.ascii_uppercase) lowercase_letters = list(string.ascii_lowercase) digits = list(string.digits) special_characters = list(string.punctuation) all_chars = uppercase_letters + lowercase_letters + digits + special_characters random_password = random.sample(all_chars, length) print(''.join(random_password))"},{"prompt":"Using the given data, write a Python function to calculate the median of the numbers. data = [2, 5, 8, 11, 14, 17, 20]","completion":"def calculate_median(data): data.sort() if len(data) % 2 == 0: first_num = data[int(len(data) / 2) - 1] second_num = data[int(len(data) / 2)] median = (first_num + second_num) / 2 else: median = data[int((len(data) - 1) / 2)] return median result = calculate_median(data) print(result)"},{"prompt":"Write a Python program to identify numbers from a commaseparated string. mystring = 1,2,3,4,5,6,7,8,9","completion":"mystring = \\"1,2,3,4,5,6,7,8,9\\" numbers = mystring.split(\\",\\") for num in numbers: print(int(num))"},{"prompt":"Create a Python program that prints the words and their frequencies in a string. This is a simple sentence containing multiple words.","completion":"# Calculating frequency of each word in the given string string = 'This is a simple sentence containing multiple words.' # Splitting the string into words words = string.split() # Initializing a dictionary count = {} # Mapping every word with its frequency in counts for word in words: count[word] = count.get(word, 0) + 1 # Printing the frequency each word for word, frequency in count.items(): print(f'{word}: {frequency}') Output: This: 1 is: 1 a: 1 simple: 1 sentence: 1 containing: 1 multiple: 1 words: 1"},{"prompt":"Write a Python script for computing the average of an arbitrary list of numbers.","completion":"def avg(nums): return sum(nums) / len(nums) nums = [1, 5, 8, 10] print(avg(nums))"},{"prompt":"Create a script in Python to print out the 5 most frequent words in a given input string. input=Python is a great programming language","completion":"from collections import Counter input = \\"Python is a great programming language\\" words = input.split() counts = Counter(words) for word, count in counts.most_common(5): print(word, count)"},{"prompt":"Generate a python function to calculate the volume of a rectangular prism.","completion":"def calculate_volume_rectangular_prism(length, width, height): return length * width * height;"},{"prompt":"Write a Python program to check how many times a given element occurs in a list. List: [1, 2, 3, 2, 4, 2, 1] Element: 2","completion":"def count_element_occurrence(lst, target): count = 0 for element in lst: if element == target: count += 1 return count"},{"prompt":"Generate a prediction model, in Python code, to identify whether a given sentence is positive or negative. sentences = [I am good, It's terrible, What a wonderful day!]","completion":"def predict_sentiment(sentences): tokenizer = Tokenizer() tokenizer.fit_on_texts(sentences) x_train = tokenizer.texts_to_matrix(sentences) model = Sequential() model.add(Dense(32, input_shape=(x_train.shape[1],), activation=\\"relu\\")) model.add(Dense(32, activation=\\"relu\\")) model.add(Dense(1, activation=\\"sigmoid\\")) model.compile(loss=\\"binary_crossentropy\\", optimizer=\\"rmsprop\\", metrics=[\\"accuracy\\"]) model.fit(x_train, [1, 0, 1], epochs=10, batch_size=32) predictions = model.predict([x_train[0],x_train[1],x_train[2]]) print(predictions) if predictions[0] > 0.5: print(\\"The sentence 'I am good' is positive\\") else: print(\\"The sentence 'I am good' is negative\\") if predictions[1] > 0.5: print(\\"The sentence 'It's terrible' is positive\\") else: print(\\"The sentence 'It's terrible' is negative\\") if predictions[2] > 0.5: print(\\"The sentence 'What a wonderful day!' is positive\\") else: print(\\"The sentence 'What a wonderful day!' is negative\\")"},{"prompt":"You need to edit an existing Python program. The program to accept and print a sentence. str1 = Hello World","completion":"str1 = \\"Hello World\\" print(str1)"},{"prompt":"Create a function in Python to extract the substring from the given string between the two key words, \`\`start\`\` and \`\`end\`\` string = This is a test string and the key words are start and end start = start end = end","completion":"def extract_substring(string, start, end): '''This function will extract the substring between two given key words''' if start in string and end in string: start_index = string.find(start) + len(start) end_index = string.find(end) extracted_string = string[start_index:end_index] return extracted_string"},{"prompt":"This code is a Python program demonstrating the use of a Gaussian classifier. The program takes in various arguments such as training file, testing file, class to test/train on, method, etc. and performs KNN classification, LSE classification, or Gaussian classification based on the specified method. To run the program, execute the main() function.","completion":"#!/usr/bin/env python import numpy as np from numpy import linalg as la import matplotlib.pyplot as plt import argparse import os import pdb from scipy import spatial import time import operator ''' Python Program demonstrating the use of a gaussian classifier. ''' #KNNCLassifier returns a tuple of the K closest feature vectors def KNNSearch(k, features, test_data): test_data_classification = [] for test_index, test_element in enumerate(test_data): if test_element == []: continue neighborDistance = [] for feature_index,feature in enumerate(features): try: distance = la.norm(feature-test_element) except ValueError: pdb.set_trace() neighborDistance.append([distance, feature_index]) neighborDistance = sorted(neighborDistance, key=lambda row: row[0], reverse=True) #pdb.set_trace() test_data_classification.append(np.matrix(neighborDistance[0:k][1])) pdb.set_trace() return test_data_classification def KNNSearchFast(k, features, test_data): t0 = time.time() tree = spatial.KDTree(features) t1 = time.time() result = tree.query(test_data, k) t2 = time.time() print \\"Build time: %f, query time: %f\\" % (t1-t0, t2-t1) return result def KNNClassify(train_classification, test_neighbors): test_classification = [] for sample in test_neighbors[1]: votes = [0 for x in xrange(10)] try: for neighbor in sample: sample_class = int(train_classification[neighbor]) votes[sample_class] += 1 except TypeError: #catch the case where K=1 sample_class = int(train_classification[sample]) votes[sample_class] = 1 classification = max(enumerate(votes), key=operator.itemgetter(1))[0] test_classification.append(classification) return test_classification def LSESearch(features,classification, test_data): features = np.matrix(features) classification = np.matrix(classification).T test_data = np.matrix(test_data) filter = la.inv(features.T * features) * features.T * classification test_data_classification = [] classification = (test_data * filter) classification[classification < 0] = -1 classification[classification >=0] = 1 return classification def ParseData(raw_data, class1, class2): raw_data = raw_data.rstrip('n') raw_data_list = raw_data.split('n') data_list = list() for raw_data_point in raw_data_list: raw_data_point = raw_data_point.rstrip() point = raw_data_point.split(' ') data_list.append([float(x) for x in point]) data_list.pop() data_list_np = np.array(data_list) mask = (data_list_np[:,0] == class1) + (data_list_np[:,0] == class2) data_list_np = data_list_np[mask] return data_list_np def GaussianBuild(features, classification, classa, classb): pdb.set_trace() classaFeaturesMask = (classification == classa) classbFeaturesMask = (classification == classb) aFeatures = np.array(features)[classaFeaturesMask].T bFeatures = np.array(features)[classbFeaturesMask].T print 'Of ',features.shape,'Elements, ',aFeatures.shape,' are of class A, ',bFeatures.shape,' are of class B' aCovMat = np.cov(aFeatures) aMeanMat = np.mean(aFeatures,1) bCovMat = np.cov(bFeatures) bMeanMat = np.mean(bFeatures,1) return [aCovMat,aMeanMat,bCovMat,bMeanMat] def ComputeGaussianProbability(covMat, meanMat, sample): meanMat = np.matrix(meanMat).T sample = sample.T #sample = meanMat nonInvertible = True eyeScale = 0.0 while nonInvertible: nonInvertible = False try: covMatInverse = la.inv(covMat + np.eye(covMat.shape[0])*eyeScale) except la.linalg.LinAlgError: nonInvertible = True eyeScale = eyeScale + 0.0001 if eyeScale > 0.002: print 'Set lambda to ',eyeScale,' to make covMat invertible' probability = 1.0/(np.sqrt(la.norm(2*np.pi*covMat))) probability *= np.exp(-0.5*(sample-meanMat).T*covMatInverse*(sample-meanMat)) return probability def GaussianClassify(aCovMat, aMeanMat, bCovMat, bMeanMat, test_data): #for each sample, compute the probability of it belonging to each class for sample in test_data: #pdb.set_trace() probability_a = ComputeGaussianProbability(aCovMat, aMeanMat, sample) probability_b = ComputeGaussianProbability(bCovMat, bMeanMat, sample) print 'Sample P(A)=',probability_a,'Sample P(B)=',probability_b def main(): parser = argparse.ArgumentParser(description='Process input') parser.add_argument('-t', '--training_file', type=str, help='submit data to train against') parser.add_argument('-f', '--testing_file', type=str, help='submit data to test the trained model against') parser.add_argument('-s', '--save_model', type=str, help='save out trained model') parser.add_argument('-r', '--read_model', type=str, help='read in trained model') parser.add_argument('-k', '--k_neighbors', type=int, help='number of neighbors to find') parser.add_argument('-a', '--classa', type=int, help='class to test/train on') parser.add_argument('-b', '--classb', type=int, help='class to test/train on') parser.add_argument('-m', '--method', type=int, help='0=KNN,1=LSE,2=Gauss') args = parser.parse_args() # Check if Arguments allow execution if (not args.training_file) and (not args.read_model): print \\"Error: No training Data or model present!\\" return -1 if args.training_file and args.read_model: print \\"Error: cannot read model and traing data at the same time!\\" return -1 if args.training_file: # trainagainst training file if not os.path.isfile(args.training_file): print \\"Error: Training file doesn't exist!\\" return -1 # train with open(args.training_file) as file: # read file contents raw_data = file.read() # parse data data = ParseData(raw_data, args.classa, args.classb) # train on data classification = data[:,0] features = np.matrix(data[:,1:]) if args.testing_file: with open(args.testing_file) as test_file: raw_test_data = test_file.read() test_data = ParseData(raw_test_data, args.classa, args.classb) test_data_truth = test_data[:,0] test_data = np.matrix(test_data[:,1:]) if args.method == 0: #Do KNN classification nearest_neighbors = KNNSearchFast(args.k_neighbors, features, test_data) print \\"Num training samples: %d, num test samples: %d\\" % (len(classification), len(test_data_truth)) classification = KNNClassify(classification, nearest_neighbors) #Compute the error rate errors = test_data_truth - classification misclassification_a = errors[errors == args.classa - args.classb] misclassification_b = errors[errors == args.classb - args.classa] mask = errors != 0 num_errors = sum(mask) print \\"Error rate: %f%%\\" % (float(num_errors)/len(test_data_truth)*100) print \\"Percentage of %d's misclassified: %f\\" % (args.classa, float(misclassification_a.size)/test_data_truth[test_data_truth == args.classa].size*100) print \\"Percentage of %d's misclassified: %f\\" % (args.classb, float(misclassification_b.size)/test_data_truth[test_data_truth == args.classb].size*100) if args.method == 1: #Do LSE classification #make classification binary classification[classification == args.classa] = -1 classification[classification == args.classb] = 1 #Perform the classficiation on the test data test_data_classification = LSESearch(features, classification, test_data) test_data_truth[test_data_truth == args.classa] = -1 test_data_truth[test_data_truth == args.classb] = 1 #Compute the error rate errors = test_data_classification.T - np.matrix(test_data_truth) misclassification_a = errors[errors == 2] misclassification_b = errors[errors == -2] num_errors = np.sum(np.absolute(errors)) print \\"Num training samples: %d, num test samples: %d\\" % (len(classification), len(test_data_truth)) print \\"Error rate: %f%%\\" % (float(num_errors)/len(test_data_truth)*100) print \\"Percentage of %d's misclassified: %f\\" % (args.classa, float(misclassification_a.size)/test_data_truth[test_data_truth == -1].size*100) print \\"Percentage of %d's misclassified: %f\\" % (args.classb, float(misclassification_b.size)/test_data_truth[test_data_truth == 1].size*100) if args.method == 2: #build the gaussian model [aCovMat, aMeanMat, bCovMat, bMeanMat] = GaussianBuild(features, classification, args.classa, args.classb) GaussianClassify(aCovMat, aMeanMat, bCovMat, bMeanMat, features) if __name__ == '__main__': main()"},{"prompt":"Create a Python program for predicting the stock prices of a company for a given date range. Not applicable","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns from sklearn.linear_model import LinearRegression from sklearn.svm import SVR from sklearn.model_selection import train_test_split # Load the stock data from the CSV file df = pd.read_csv('stock_price_data.csv') # Split data into train and test sets X_train, X_test, y_train, y_test = train_test_split(df[['Date','Open']], df['Close'], test_size=0.20, random_state=0) # Fit a linear regression model to the training data model = LinearRegression() model.fit(X_train, y_train) # Use the trained model to predict the stock prices for the given date range predictions = model.predict(X_test) # Visualize the predictions plt.scatter(X_test['Date'], y_test, color='red', label='Actual Stock Prices') plt.plot(X_test['Date'], predictions, color='blue', label='Predicted Stock Prices') # Show the plot plt.xlabel('Date') plt.ylabel('Stock Price') plt.title('Predicted vs Actual Stock Prices') plt.legend() plt.show()"},{"prompt":"Restructure the following code so that it can be written using a for loop in Python. i = 1 while i < 5: print(i) i += 1","completion":"for i in range(1, 5): print(i)"},{"prompt":"Create a bubble sort algorithm in Python.","completion":"def bubble_sort(nums): # Repeat until the array is sorted sorted_array = False while not sorted_array: sorted_array = True for i in range(len(nums) - 1): if nums[i] > nums[i + 1]: # If the next element is greater, swap them nums[i], nums[i + 1] = nums[i + 1], nums[i] sorted_array = False # Return the sorted array return nums"},{"prompt":"Edit the following Python program to optimize its speed. # This program to calculate sum of first n numbers def sumN(n): sum=0 for i in range(1,n+1): sum=sum+i return sum print(sumN(100))","completion":"# This program to calculate sum of first n numbers def sumN(n): sum = n * (n + 1) // 2 return sum print(sumN(100))"},{"prompt":"Develop a function to convert kilometers to miles in Python.","completion":"def kms_to_miles(kms): miles = kms / 1.609 return miles"},{"prompt":"Write an algorithm in Python for finding the smallest positive integer which cannot be represented as sum of any subset of a given array. array: [1, 2, 3, 4]","completion":"def minimum_sum_required(arr): s = 1 # Initialize the required result # Traverse the given array for i in range(len(arr)): # If the current number is larger than the required one # increment the required result if arr[i] <= s: s += arr[i] # After the entire array is traversed # return the required result return s"},{"prompt":"Design a Python algorithm to merge two sorted lists.","completion":"def merge_two_lists(list1, list2): merged_list = [] while list1 and list2: if list1[0] < list2[0]: merged_list.append(list1.pop(0)) else: merged_list.append(list2.pop(0)) merged_list.extend(list1 or list2) return merged_list"},{"prompt":"Generate a Python program to remove all elements of given list present in other list. list1 = [1, 2, 3, 4, 5, 6], list2 = [2, 4, 6]","completion":"def remove_from_list(list1, list2): for i in list2: list1.remove(i) return list1 list1 = [1, 2, 3, 4, 5, 6] list2 = [2, 4, 6] print(remove_from_list(list1, list2))"},{"prompt":"Create a Python program to generate a random password that is 8 characters in length and includes a combination of letters, numbers, and special characters. Not applicable","completion":"import random import string def generate_password(): password_length = 8 password_chars = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(password_chars) for _ in range(password_length)) return password password = generate_password() print(password)"},{"prompt":"dentify the language being used in the following code snippet. x = 5 y = 6 z = x + y","completion":"Python"},{"prompt":"Generate code to optimize a matrix multiplication in Python. A 3x3 matrix","completion":"# import numpy import numpy as np # Declare matrix A and B A = np. array([[2, 3, 5], [5, 7, 2], [4, 2, 6]]) B = np.array([[6, 2, 1], [3, 4, 5], [5, 3, 7]]) # use numpy for matrix multiplication C = np.dot(A, B) # Vectorization D = np.zeros((3,3)) for i in range(3): for j in range(3): for k in range(3): D[i,j] += A[i,k] * B[k,j] # Compare matrix multiplication results if np.array_equal(C, D): print(\\"Matrix optimzation is successful\\") else: print(\\"Matrix optimization failed\\")"},{"prompt":"Write a Python program that creates a new database and a new table in it.","completion":"import mysql.connector # Create a database connection connection = mysql.connector.connect( host=\\"localhost\\", user=\\"root\\", passwd=\\"\\" ) # Create a new database cursor = connection.cursor() cursor.execute(\\"CREATE DATABASE mydatabase\\") # Create a new table in the database cursor.execute(\\"USE mydatabase\\") cursor.execute(\\"CREATE TABLE mytable (id INT, name VARCHAR(255), age INT)\\")"},{"prompt":"Design a Python program to remove a specified element from a list. 4, [1, 2, 3, 4, 5]","completion":"def remove_element(list, element): return [ el for el in list if el != element] list = [1, 2, 3, 4, 5] list = remove_element(list, 4) print(list)"},{"prompt":"Generate a unique 32bit number in Python.","completion":"import uuid unique_number = uuid.uuid4().int print(unique_number)"},{"prompt":"Create a Python script to reverse each word in a sentence. Sentence = This is a test","completion":"# Create a empty list to store the reversed sentences reversed_sentences = [] # Get the list of words from the given sentence words = sentence.split(' ') # Reverse each word for word in words: reversed_word = word[::-1] reversed_sentences.append(reversed_word) # Print the reversed sentence reversed_sentence = ' '.join(reversed_sentences) print(reversed_sentence) # Output: sihT si a tset"},{"prompt":"Create a Python application for controlling an LED light strip. The application should have functions for changing the color and brightness of the lights. Not applicable","completion":"from gpiozero import LED light_strip = LED(17) def set_light_color(red, green, blue): \\"\\"\\" Sets the color of the LED light strip. Args: red (int): The red channel of the color. green (int): The green channel of the color. blue (int): The blue channel of the color. \\"\\"\\" light_strip.colors = (red, green, blue) def set_light_brightness(brightness): \\"\\"\\" Sets the brightness of the LED light strip. Args: brightness (int): The brightness value (0 - 1). \\"\\"\\" light_strip.brightness = brightness set_light_color(255, 128, 0) set_light_brightness(0.5)"},{"prompt":"Write a Python program to create a dictionary containing the given list of numbers and their squares as values. [1,2,3,4,5]","completion":"my_list = [1,2,3,4,5] squares_dictionary = {} for x in my_list: squares_dictionary[x] = x**2 print(squares_dictionary)"},{"prompt":"Translate the following Python code into Java. def multi_sum(nums): This function returns the sum of elements in a list result = 0 for num in nums: result += num return resul","completion":"public static int multi_sum(int[] nums) { int result = 0; for (int num : nums) { result += num; } return result; }"},{"prompt":"Create a function in Python that will take an array of integers and return the minimum value. [3, 9, 0, 7, 88]","completion":"def find_min(arr): min = arr[0] for num in arr: if num < min: min = num return min # Test arr = [3, 9, 0, 7, 88] min_val = find_min(arr) print(\\"Minimum value is:\\", min_val) # Output: Minimum value is: 0"},{"prompt":"Construct a natural language processing model in Python which can classify the sentiment of a movie review as positive or negative. Review examples: Positive: I really enjoyed this movie. It was a great story and the acting was superb! Negative: This movie was terrible! The story was boring and the acting was terrible.","completion":"import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression # Prepare input and output data reviews = ['I really enjoyed this movie. It was a great story and the acting was superb!', 'This movie was terrible! The story was boring and the acting was terrible.'] labels = np.array([1, 0]) # Vectorize input data vectorizer = CountVectorizer() features = vectorizer.fit_transform(reviews) # Create and train a logistic regression model model = LogisticRegression() model.fit(features, labels) # Make a prediction using the trained model prediction = model.predict(vectorizer.transform(['The movie was amazing!'])) print(f'Predicted sentiment: {prediction[0]}')"},{"prompt":"Create a python program to find the index of the first occurrence of an item in the given list. item = 10 arr = [1, 10, 10, 20, 30]","completion":"def findFirstOccurance(item, arr): # Iterating over each item for i in range(len(arr)): if (arr[i] == item): return i return -1 # Driver Code item = 10 arr = [1, 10, 10, 20, 30] position = findFirstOccurance(item, arr) if(position > 0): print(\\"Item found at \\", position) else: print(\\"Item not found\\")"},{"prompt":"Generate code to calculate the factorial of a given number using Python","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Create a Python program to find all the common elements between two given lists in a single line of code. List1 = [1, 2, 3, 4, 5] List2 = [5, 6, 7, 8, 9]","completion":"common_list = [element for element in List1 if element in List2]"},{"prompt":"Develop a program in Python that partitions a given list into two parts, such that the sum of the two parts are equal. [1,2,3,4,5]","completion":"def partition(nums): \\"\\"\\" Partitions the given list into two parts such that the sum of the two parts are equal. @param nums: List @return: List \\"\\"\\" total = sum(nums) curr_sum = 0 left_list = [] right_list = [] for num in nums: if curr_sum <= total/2: left_list.append(num) curr_sum += num else: right_list.append(num) return (left_list, right_list)"},{"prompt":"Generate a program in Python that takes a two dimensional array matrix of size MxN and writes each row in reverse order. [[1,2,3], [4,5,6]]","completion":"def reverse_row(mat): # write each row in reversed order result = [] # traverse over the rows for i in range(len(mat)): res = [] # add each element in the row for j in range(len(mat[i]) - 1, -1, -1): res.append(mat[i][j]) result.append(res) return result # Driver code mat = [[1, 2, 3], [4, 5, 6]] print(reverse_row(mat))"},{"prompt":"Create a Python program to find all numbers in a given list that are evenly divisible by 4. [1, 8, 10, 15, 20, 25]","completion":"def find_divisible_by_4(num_list): result_list = [] for i in num_list: if i % 4 == 0: result_list.append(i) return result_list print(find_divisible_by_4([1, 8, 10, 15, 20, 25]))"},{"prompt":"Write a Python algorithm to print out all prime numbers between 2 and a given number.","completion":"def print_prime_numbers(n): primes = [] for i in range(2, n + 1): prime = True for j in range(2, i): if i % j == 0: prime = False break if prime: primes.append(i) return primes if __name__ == '__main__': result = print_prime_numbers(20) print(result)"},{"prompt":"Edit the Python code given to detect errors. def add(x, y): z = x / y return z","completion":"def add(x, y): # assert y is not zero assert y != 0, \\" y must not be zero!\\" z = x + y return z"},{"prompt":"Find the maximum number in an array of integers using a Python program. [12, 5, 23, 1, 11]","completion":"def max_number(array): max = array[0] for num in array: if num > max: max = num return max maximum = max_number([12, 5, 23, 1, 11]) print(maximum) # prints: 23"},{"prompt":"Write a python program to determine if a string is a palindrome.","completion":"def is_palindrome(s): return s == s[::-1]"},{"prompt":"Design a program in Python that prints the even numbers from 0 to 100.","completion":"for i in range(0, 101): if (i % 2 == 0): print(i)"},{"prompt":"Generate Python code to filter a given list of numbers such that only the odd numbers are removed. [1, 2, 3, 4, 5]","completion":"def filter_odd(list): return [num for num in list if num % 2 == 0]"},{"prompt":"Develop a Python code to compute the maximum of 3 numbers number1 = 33 number2 = 12 number3 = 19","completion":"def maximum_of_three(number1,number2,number3): max_value = number1 if number2 > max_value: max_value = number2 if number3 > max_value: max_value = number3 return max_value"},{"prompt":"Create a web scraper in Python using the BeautifulSoup library. The scraper should be able to extract data from a given website in HTML format. The website URL is https://www.example.com.","completion":"import requests from bs4 import BeautifulSoup # Make a GET request to fetch the raw HTML content html_content = requests.get('https://www.example.com').text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Scrape the data data = soup.find_all(...) # Extract the data for item in data: # Extract item properties item_text = item.text item_attrs = item.attrs # ..."},{"prompt":"Create a python function which takes a list as an argument and returns the largest number in the list. numbers = [20, 9, 5, 10]","completion":"def largest_number(numbers): largest = numbers[0] for num in numbers: if num > largest: largest = num return largest largest = largest_number(numbers) print('The largest number in the list is: ', largest)"},{"prompt":"Create a search engine using Python.","completion":"def search(query): results = [] for document in documents: if query in document: results.append(document) return results"},{"prompt":"Write a Python program to construct a parser to detect an input has errors or not. Input Code: # include <stdio.h> void main() { printf(Hello World) }","completion":"def detect_errors(input_code): error_tokens = [\\"!\\", \\"@\\", \\"#\\", \\"\\"] counter = 0 for line in input_code.splitlines(): tokens = line.strip().split() if any(x in tokens for x in error_tokens): counter += 1 if counter > 0: return True else: return False"},{"prompt":"Generate a Python script for setting up a basic web server for hosting static content. Not applicable","completion":"#!/usr/bin/env python import http.server # Set the port number port_number = 8080 # Create the HTTP server server_address = ('', port_number) httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler) print('Server started on port {}'.format(str(port_number))) # Run the HTTP server httpd.serve_forever()"},{"prompt":"Design a sorting algorithm in Python that will sort a given array of numbers in ascending order. [5, 9, 4, 2, 6]","completion":"def sort(nums): for i in range(len(nums)): min_ind = i for j in range(i+1, len(nums)): if nums[j] < nums[min_ind]: min_ind = j nums[i], nums[min_ind] = nums[min_ind], nums[i] return nums"},{"prompt":"Create a program in Python that rotates an array right by one place arr = [1,2,3,4,5]","completion":"def rotateArrayRight(arr): temp = arr[len(arr) - 1] for i in range(len(arr)-1, 0, -1): arr[i] = arr[i-1] arr[0] = temp return arr arr = [1, 2, 3, 4, 5] print(rotateArrayRight(arr))"},{"prompt":"Suggest an edit to the following Python program to improve its time complexity. my_list = [1, 2, 3, 4, 5, 6] for i in range(len(my_list)1): for j in range(1, len(my_list)): if my_list[i] < my_list[j]: temp = my_list[i] my_list[i] = my_list[j] my_list[j] = temp","completion":"my_list.sort(reverse=True)"},{"prompt":"Generate a prime number generator in Python.","completion":"def is_prime_number(n): # An integer is prime if it is greater than 1 if n > 1: for i in range(2, n): if (n % i) == 0: return False else: return True def generate_prime_numbers(n): prime_nums = [] for num in range(2, n + 1): if is_prime_number(num): prime_nums.append(num) return prime_nums n = 10 print(\\"Prime numbers between 2 and\\", n, \\":\\", generate_prime_numbers(n))"},{"prompt":"Generate a code to create a class in python that stores the name and age of a person.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age def __str__(self): return f\\"Name: {self.name}nAge: {self.age}\\""},{"prompt":"Create a python script to print the following output with the help of list and dictionary. { Name: Harry, Age: 23, Country: India }","completion":"name = { \\"Harry\\" } age = { 23 } country = { \\"India\\" } data_list = [name, age, country] for item in data_list: print(item)"},{"prompt":"Develop a machine learning model in Python using support vector machines (SVM) to detect sentiment in movie reviews. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.svm import SVC # Read the data data = pd.read_csv('data.csv') # Split into train and test data X_train = data.iloc[:1000, :].review y_train = data.iloc[:1000, :].sentiment X_test = data.iloc[1000:, :].review y_test = data.iloc[1000:, :].sentiment # Vectorize the text from sklearn.feature_extraction.text import TfidfVectorizer vectorizer = TfidfVectorizer() X_train = vectorizer.fit_transform(X_train).toarray() X_test = vectorizer.transform(X_test).toarray() # Train the SVC model svc = SVC(kernel='linear', C=1.0, random_state=0) svc.fit(X_train, y_train) # Evaluate the model from sklearn.metrics import accuracy_score y_pred = svc.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print('Accuracy: %.2f' % accuracy)"},{"prompt":"Write a Python program to calculate the total sales revenue for a list of item prices and quantities. item_prices = [1.99, 3.00, 2.50] item_quantities = [5, 10, 8]","completion":"# Calculate total sales item_prices = [1.99, 3.00, 2.50] item_quantities = [5, 10, 8] total_sales = 0 for price, quantity in zip(item_prices, item_quantities): total_sales += price * quantity print(total_sales)"},{"prompt":"Design an algorithm in Python to traverse a 2D array topdown and leftright and output its contents as a single array. [[1,2,3], [4,5,6], [7,8,9]]","completion":"def traverse2DArray(arr): output = [] for i in range(len(arr)): for j in range(len(arr[0])): output.append(arr[i][j]) return output print(traverse2DArray([[1,2,3], [4,5,6], [7,8,9]])) # [1,2,3,4,5,6,7,8,9]"},{"prompt":"Write a Python program to find the longest string in a list of strings. [Hello, Hi, What's up, Hey, Good morning]","completion":"longest_string = \\"\\" for string in string_list: if len(string) > len(longest_string): longest_string = string print(longest_string)"},{"prompt":"Python, parse a JSON string and return the value associated with a particular key JSON String: { key1: value1, key2: value2 } Key: key2","completion":"import json # Create a json object from the string json_obj = json.loads('{\\"key1\\": \\"value1\\", \\"key2\\": \\"value2\\"}') #get the value for a particular key value = json_obj[\\"key2\\"]"},{"prompt":"Generate a random password in Python using at least eight characters including numbers and both uppercase and lowercase letters.","completion":"import random def generate_password(): chars = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890@#%^&*\\" length = 8 password = \\"\\" for i in range(length): password += random.choice(chars) return password print(generate_password())"},{"prompt":"Create a class in Python with all five common inheritance options (parent class, subclasses, multiple inheritance, abstract class, etc).","completion":"class Parent: # Constructor def __init__(self): self.value = 'parent' def parent_method(self): # Parent method here return self.value class ChildOne(Parent): # Constructor def __init__(self): Parent.__init__(self) self.value = 'child one' class ChildTwo(Parent): # Constructor def __init__(self): Parent.__init__(self) self.value = 'child two' # Multiple Inheritance class Other(ChildOne, ChildTwo): # Constructor def __init__(self): ChildOne.__init__(self) ChildTwo.__init__(self) self.value = 'other' # Abstract Class class AbstractParent: # Constructor def __init__(self): self._value = 'abstract' # Abstract Methods def calculate(self, x, y): pass def abstract_method(self): pass"},{"prompt":"Generate a python function to convert a student's grade from a 0 to 100 scale to the corresponding letter grade according to the following grade scale. 90","completion":"def grade_converter(score): if score >= 90: return 'A' elif score >= 80: return 'B' elif score >= 70: return 'C' elif score >= 60: return 'D' else: return 'F'"},{"prompt":"Code a Factorial function in Python.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) print(factorial(5))"},{"prompt":"Create a TopicItem object with the given parameters: logger, seuid, first_message, and parent. The TopicItem represents a specific topic which contains many connections and has attributes like the number of sent messages. It has methods to get the child at a specific position, get the number of children, get all children, get the latest data, get detailed data, get plotable items, get short data, and get time items. It also has a timer that aggregates the topic every TOPIC_AGGREGATION_FREQUENCY nsecs and pushes the updated data to self.__calculated_data.","completion":"from rospy.rostime import Time import rospy from python_qt_binding.QtCore import QTranslator from abstract_item import AbstractItem from helper_functions import prepare_number_for_representation, UPDATE_FREQUENCY, TOPIC_AGGREGATION_FREQUENCY, ROUND_DIGITS, MAXIMUM_OFFLINE_TIME from arni_core.helper import SEUID, SEUID_DELIMITER from node_item import NodeItem from rospy.timer import Timer from rospy.impl.tcpros_service import ServiceProxy from rospy.rostime import Duration from rospy.rostime import Time from connection_item import ConnectionItem import re class TopicItem(AbstractItem): \\"\\"\\" A TopicItem represents a specific topic which contains many connections and has attributes like the number of sent messages. \\"\\"\\" def __init__(self, logger, seuid, first_message, parent=None): \\"\\"\\"Initializes the TopicItem. :param seuid: the seuid of the item :type seuid: str :param logger: a logger where to log when special events occur :type logger: ModelLogger :param parent: the parent-item :type parent: AbstractItem \\"\\"\\" AbstractItem.__init__(self, logger, seuid, parent) self.__parent = parent self._type = \\"topic\\" self.add_keys=[\\"dropped_msgs\\", \\"traffic\\", \\"bandwidth\\", \\"frequency\\"] self.avg_keys=[\\"period_mean\\", \\"period_stddev\\", \\"stamp_age_mean\\", \\"stamp_age_stddev\\"] self.max_keys=[\\"period_max\\", \\"stamp_age_max\\"] self._attributes = [] self._attributes.extend([\\"dropped_msgs\\", \\"traffic\\", \\"period_mean\\", \\"period_stddev\\", \\"period_max\\", \\"stamp_age_mean\\", \\"stamp_age_stddev\\", \\"stamp_age_max\\", \\"bandwidth\\", \\"frequency\\"]) for item in self._attributes: self._add_data_list(item) self.__calculated_data = {} for key in self._attributes: self.__calculated_data[key] = [] self.__calculated_data[\\"window_stop\\"] = [] self.__calculated_data[\\"window_start\\"] = [] for item in self._attributes: self._rated_attributes.append(item + \\".actual_value\\") self._rated_attributes.append(item + \\".expected_value\\") self._rated_attributes.append(item + \\".state\\") for item in self._rated_attributes: self._add_rated_data_list(item) self._logger.log(\\"info\\", Time.now(), seuid, \\"Created a new TopicItem\\") self.__timer = Timer(Duration(nsecs=TOPIC_AGGREGATION_FREQUENCY), self.__aggregate_topic_data) self.tree_items = [] self.__aggregation_window = rospy.get_param(\\"~aggregation_window\\", 5) # def _updateTimer(self, event): # \\"\\"\\" # Updates the timer to the last changed status. If it # :return: # \\"\\"\\" # self.alive = False # # TODO this can be very expensive - is there a better way? # for item in self.tree_items: # for child in item.get_childs(): # if child.alive: # self.alive = True # break # # if not self.alive: # self.set_state(\\"offline\\") def get_child(self, row, parent=None): \\"\\"\\" Returns the child at the position row. :param row: the index of the row :type row: int :param parent: the model parent at the given index (not global / logical parent) :type parent: NodeItem :returns: the child at the position row :rtype: AbstractItem \\"\\"\\" if not isinstance(parent, NodeItem): print(type(parent)) raise UserWarning return self.__get_local_childs(parent)[row] def __get_local_childs(self, parent=None): \\"\\"\\" Returns all childs of the topic item at the given position in the gui. :param parent: the model parent at the given index (not global / logical parent) :type parent: NodeItem :param sub_activated: Defines if subscriber shall be shown too. :returns: the child at the position row :rtype: AbstractItem \\"\\"\\" childs = [] if parent is not None: # a specific parent has been chosen - we have to use it to display the correct connection items # use the seuid to determine the node and compare this to the parts in the connections item (child of this # item. seuid = parent.get_seuid() seuid_helper = SEUID() seuid_helper.identifier = seuid seuid_helper.set_fields() node = seuid_helper.node for child in self.get_childs(): child_seuid = child.get_seuid() seuid_helper.identifier = child_seuid seuid_helper.set_fields() node_comp = seuid_helper.publisher # do the check on the publisher if node == node_comp: # match. childs.append(child) continue return childs else: return self._child_items def row(self, parent=None): \\"\\"\\" Returns the index of the Item. :returns: the index of the Item :rtype: int \\"\\"\\" if parent: return parent.get_childs().index(self) elif self.__parent: return self.__parent.get_childs().index(self) def child_count(self, parent=None): \\"\\"\\" Returns the number of children from the AbstractItem. :returns: number of childs :rtype: int \\"\\"\\" return len(self.__get_local_childs(parent)) def get_childs(self, parent=None): \\"\\"\\" Returns a list with all children. WARNING: This is the same method as in AbstractItem (superclass) to warn you using this function in the gui context. Topic item shows only some connections depending on the parent node. This is *not* implemented for this function. :returns: list of children :rtype: list \\"\\"\\" if parent is not None: return self.__get_local_childs(parent) return self._child_items def get_items_younger_than(self, time, *args): \\"\\"\\" Used to overwrite the standard implementation in AbstractItem. This method provides the data from the calculated data and *not* from the raw input. This is especially wanted when plotting :param time: :param args: :return: \\"\\"\\" self._data_lock.acquire() return_values = {} if args: for key in args: return_values[key] = None if \\"window_stop\\" not in args: return_values[\\"window_stop\\"] = None else: for key in self.__calculated_data: return_values[key] = None breakpoint = 0 list_of_time = self.__calculated_data[\\"window_stop\\"] length = len(list_of_time) if length is not 0: if list_of_time[0] >= time: for key in return_values: try: return_values[key] = self.__calculated_data[key][:] except KeyError: print(\\"Accessed key was: \\" + key + \\". Available keys are: \\") print(self.__calculated_data) raise else: for i in range(length - 1, -1, -1): if list_of_time[i] < time: breakpoint = i + 1 for key in return_values: if key in self.__calculated_data: return_values[key] = self.__calculated_data[key][breakpoint:length] else: raise IndexError(\\"IndexError! length of the list %s, accessed index %s. length of data\\" \\" at given point %s, key is %s\\", length, i, len(self.__calculated_data[key]), key) break self._data_lock.release() return return_values def get_raw_items_younger_than(self, time, *args): \\"\\"\\" Returns all entries that are younger than time either in all keys of self._data or if args not empty in all key corresponding to args. Warning: Method assumes data is sorted by time if this is not true will return too few or too much data. :param time: the lower bound in seconds :type time: rospy.Time :param args: the keys to the dict :type args: str :returns: dict of lists :rtype: dict :raises KeyError: if an element in args cannot be found in any of the dictionaries (data vs rated data) \\"\\"\\" return_values = {} if args: for key in args: return_values[key] = None if \\"window_stop\\" not in args: return_values[\\"window_stop\\"] = None else: for key in self._data: return_values[key] = None breakpoint = 0 list_of_time = self._data[\\"window_stop\\"] length = len(list_of_time) if length is not 0: if list_of_time[0] >= time: for key in return_values: try: return_values[key] = self._data[key][:] except KeyError: print(\\"Accessed key was: \\" + key + \\". Available keys are: \\") print(self._data) raise else: for i in range(length - 1, -1, -1): if list_of_time[i] < time: breakpoint = i + 1 for key in return_values: if key in self._data: return_values[key] = self._data[key][breakpoint:length] else: raise IndexError(\\"IndexError! length of the list %s, accessed index %s. length of data\\" \\" at given point %s, key is %s\\", length, i, len(self._data[key]), key) break return return_values def __aggregate_topic_data(self, event): \\"\\"\\" Aggregates the topic every TOPIC_AGGREGATION_FREQUENCY nsecs and pushes the updated data to self.__calculated_data. :param event: containing information when this method was called - not used but needed for the interface \\"\\"\\" aggregated_data = {} for key in self._attributes: aggregated_data[key] = 0 for key in self.__calculated_data.keys(): self.__calculated_data[key].append(0) child_count = 0 for connection in self.get_childs(): # !assuming all childs are connection items! values = connection.aggregate_data(self.__aggregation_window) # average over N seconds if values: for key in self.add_keys: aggregated_data[key] += values[key] for key in self.max_keys: if values[key] > aggregated_data[key]: aggregated_data[key] = values[key] for key in self.avg_keys: aggregated_data[key] += values[key] child_count += 1 for key in self.avg_keys: if child_count == 0: aggregated_data[key] = 0 else: aggregated_data[key] /= child_count self._data_lock.acquire() for key in self._attributes: self.__calculated_data[key][-1] = aggregated_data[key] self.__calculated_data[\\"window_start\\"][-1] = Time.now() self.__calculated_data[\\"window_stop\\"][-1] = Time.now() - (Duration(secs=1) if int(Duration(secs=1).to_sec()) <= int(Time.now().to_sec()) else Time(0)) self._data_lock.release() def execute_action(self, action): \\"\\"\\" Not senseful, Topics cannot execute actions. :param action: action to be executed :type action: RemoteAction \\"\\"\\" pass def get_detailed_data(self): \\"\\"\\" Returns the detailed data of the HostItem. :returns: detailed data :rtype: str \\"\\"\\" data_dict = self.get_latest_data() for key in self.__calculated_data: if self.__calculated_data[key]: data_dict[key] = self.__calculated_data[key][-1] else: data_dict[key] = self.tr(\\"Currently no value available\\") data_dict[\\"state\\"] = self.get_state() content = \\"<p class=\\"detailed_data\\">\\" content += self.get_erroneous_entries() content += \\"Rounded to a second:<br>\\" if \\"frequency\\" in self._attributes: content += self.tr(\\"frequency\\") + \\": \\" + prepare_number_for_representation(data_dict[\\"frequency\\"]) + \\" \\" + self.tr(\\"frequency_unit\\") + \\" <br>\\" content += self.tr(\\"bandwidth\\") + \\": \\" + prepare_number_for_representation(data_dict[\\"bandwidth\\"]) + \\" \\" + self.tr(\\"bandwidth_unit\\") + \\" <br>\\" content += self.tr(\\"dropped_msgs\\") + \\": \\" + prepare_number_for_representation(data_dict[\\"dropped_msgs\\"]) + \\" \\" + self.tr(\\"dropped_msgs_unit\\") + \\" <br>\\" content += self.tr(\\"period_max\\") + \\": \\" + prepare_number_for_representation(data_dict[\\"period_max\\"]) + \\" \\" + self.tr(\\"period_max_unit\\") + \\" <br>\\" content += self.tr(\\"stamp_age_max\\") + \\": \\" + prepare_number_for_representation(data_dict[\\"stamp_age_max\\"]) + \\" \\" + self.tr(\\"stamp_age_max_unit\\") + \\" <br>\\" content += \\"</p>\\" return content def get_plotable_items(self): \\"\\"\\" Returns items for the plot. :returns: str[] \\"\\"\\" if \\"frequency\\" in self.__calculated_data: return [\\"dropped_msgs\\",\\"stamp_age_max\\", \\"period_max\\", \\"bandwidth\\", \\"frequency\\"] else: return [\\"dropped_msgs\\", \\"traffic\\", \\"stamp_age_max\\", \\"period_max\\", \\"bandwidth\\"] def get_short_data(self): \\"\\"\\" Returns a shortend version of the item data. :returns: data of the item :rtype: str \\"\\"\\" data_dict = {} for key in self.__calculated_data: if self.__calculated_data[key]: data_dict[key] = self.__calculated_data[key][-1] else: data_dict[key] = self.tr(\\"Currently no value available\\") data_dict[\\"window_stop\\"] = Time(0) data_dict[\\"window_start\\"] = Time(0) data_dict[\\"state\\"] = self.get_state() try: if data_dict[\\"window_stop\\"] == Time(0): return \\"No data yet\\" elif (Time.now() - data_dict[\\"window_stop\\"]) > Duration(MAXIMUM_OFFLINE_TIME): # last entry was more than MAXIMUM_OFFLINE_TIME ago, it could be offline! return \\"No data since \\" + prepare_number_for_representation(Time.now() - data_dict[\\"window_stop\\"]) + \\" seconds\\" except: print(data_dict[\\"window_stop\\"]) raise UserWarning content = \\"\\" if data_dict[\\"state\\"] is \\"error\\": content += self.get_erroneous_entries_for_log() else: content += self.tr(\\"frequency\\") + \\": \\" + prepare_number_for_representation( data_dict[\\"frequency\\"]) + \\" \\" + self.tr(\\"frequency_unit\\") + \\" - \\" content += self.tr(\\"bandwidth\\") + \\": \\" + prepare_number_for_representation(data_dict[\\"bandwidth\\"]) + \\" \\" + self.tr(\\"bandwidth_unit\\") + \\" - \\" content += self.tr(\\"dropped_msgs\\") + \\": \\" + prepare_number_for_representation(data_dict[\\"dropped_msgs\\"]) + \\" \\" + self.tr(\\"dropped_msgs_unit\\") return content def can_execute_actions(self): \\"\\"\\" This item cannot execute actions, so it returns False :return: False \\"\\"\\" return False def get_list_items(self): return [] def get_time_items(self): return [\\"stamp_age_mean\\", \\"stamp_age_max\\"]"},{"prompt":"Create python code to print the first n numbers of the Fibonacci sequence n = 10","completion":"def print_fibonacci_sequence(n): # Initialize the first two numbers of the sequence num1 = 0 num2 = 1 # Use a for loop to print the the sequence in the right order for i in range(n): print(num1, end=' ') num3 = num1 + num2 num1 = num2 num2 = num3 # Test print_fibonacci_sequence(10)"},{"prompt":"Edit the given Python code to add a feature which will print the squares of given numbers. def printNumbers(a, b): for i in range(a, b + 1): print(i, end = )","completion":"def printNumbers(a, b): for i in range(a, b + 1): print(i, end = \\" \\") print(\\"n\\") for i in range(a, b + 1): print(i*i, end = \\" \\")"},{"prompt":"Write a python program to create a frequency table for the following list. [1, 8, 9, 11, 2, 10, 1, 5, 6, 8]","completion":"from collections import Counter data = [1, 8, 9, 11, 2, 10, 1, 5, 6, 8] counter = Counter(data) # print the frequency table print('Frequency Table:') for item in counter.most_common(): print(item)"},{"prompt":"Create a program in Python that classifies French text using a pretrained model. Not applicable","completion":"import torch from transformers import BertTokenizer, BertForMaskedLM tokenizer = BertTokenizer.from_pretrained('bert-base-french-cased') model = BertForMaskedLM.from_pretrained('bert-base-french-cased') text = \\"J'aime aller au cin_ma.\\" input_ids = tokenizer.encode(text, return_tensors='pt') prediction = model(input_ids)[0] predicted_index = torch.argmax(prediction[0, tokenizer.mask_token_id]).item() predicted_token = tokenizer.convert_ids_to_tokens([predicted_index])[0] print(f\\"The word 'cin_ma' is {predicted_token}\\")"},{"prompt":"Create a Python code to optimize the solution for this specific problem. You have n people who needs to go through an elevator. Each person can only carry a maximum of 4 items at any time.","completion":"def optimal_elevator(n): \\"\\"\\" This function takes in the number of people and returns a list of maximum items each person can carry. Parameters: n (int): the number of people Returns: list: list of maximum items each person can carry \\"\\"\\" # Check if input is valid if n <= 0: return 0 # Create a list for results result = [] items = 0 # First person carries 4 items first_person = 4 # Calculate the remaining items remaining_items = n - 1 # Calculate the maximum items each person can carry while remaining_items > 0: if remaining_items > 4: items = first_person remaining_items = remaining_items - 4 else: items = remaining_items + first_person remaining_items = 0 result.append(items) return result"},{"prompt":"Create a Python program to detect whether a given number is even or odd.","completion":"def detect_even_or_odd(num): if num % 2 == 0: print(num, \\"is Even\\") else: print(num, \\"is Odd\\") if __name__ == \\"__main__\\": num = int(input(\\"Enter a number: \\")) detect_even_or_odd(num)"},{"prompt":"Create a python loop to reduce a list of data points to their averages. [1, 2, 3, 4]","completion":"def averageList(arr): '''This function takes in an array and returns the average of all elements''' # initialize sum s = 0 # traverse the array for i in arr: s += i # calculate average avg = s / len(arr) # return the average return avg # Test arr = [1, 2, 3, 4] print(averageList(arr)) # Output 2.5"},{"prompt":"Create a Python script to filter out all numbers divisible by 3 in a list. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]","completion":"# Initialize list n = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] # Function def filter_divisible_by_3(n): return [num for num in n if num % 3 != 0] # Output print(filter_divisible_by_3(n)) # Output: [1, 2, 4, 5, 7, 8, 10, 11, 13]"},{"prompt":"This code defines classes for displaying media widgets such as images, videos, and audios. To use these classes, import the necessary modules and create an instance of the desired widget. The \`value\` attribute of the widget accepts a byte string of the raw media data you want to display. You can also create a widget from a local file or a URL using the provided methods. The \`format\` attribute specifies the format of the media data, and other attributes such as \`width\`, \`height\`, \`autoplay\`, \`loop\`, and \`controls\` can be used to customize the widget's behavior.","completion":"# Copyright (c) Jupyter Development Team. # Distributed under the terms of the Modified BSD License. import mimetypes from .widget_core import CoreWidget from .domwidget import DOMWidget from .valuewidget import ValueWidget from .widget import register from traitlets import Unicode, CUnicode, Bool from .trait_types import CByteMemoryView @register class _Media(DOMWidget, ValueWidget, CoreWidget): \\"\\"\\"Base class for Image, Audio and Video widgets. The \`value\` of this widget accepts a byte string. The byte string is the raw data that you want the browser to display. If you pass \`\\"url\\"\` to the \`\\"format\\"\` trait, \`value\` will be interpreted as a URL as bytes encoded in UTF-8. \\"\\"\\" # Define the custom state properties to sync with the front-end value = CByteMemoryView(help=\\"The media data as a memory view of bytes.\\").tag(sync=True) @classmethod def _from_file(cls, tag, filename, **kwargs): \\"\\"\\" Create an :class:\`Media\` from a local file. Parameters ---------- filename: str The location of a file to read into the value from disk. **kwargs: The keyword arguments for \`Media\` Returns an \`Media\` with the value set from the filename. \\"\\"\\" value = cls._load_file_value(filename) if 'format' not in kwargs: format = cls._guess_format(tag, filename) if format is not None: kwargs['format'] = format return cls(value=value, **kwargs) @classmethod def from_url(cls, url, **kwargs): \\"\\"\\" Create an :class:\`Media\` from a URL. :code:\`Media.from_url(url)\` is equivalent to: .. code-block: python med = Media(value=url, format='url') But both unicode and bytes arguments are allowed for \`\`url\`\`. Parameters ---------- url: [str, bytes] The location of a URL to load. \\"\\"\\" if isinstance(url, str): # If str, it needs to be encoded to bytes url = url.encode('utf-8') return cls(value=url, format='url', **kwargs) def set_value_from_file(self, filename): \\"\\"\\" Convenience method for reading a file into \`value\`. Parameters ---------- filename: str The location of a file to read into value from disk. \\"\\"\\" value = self._load_file_value(filename) self.value = value @classmethod def _load_file_value(cls, filename): if getattr(filename, 'read', None) is not None: return filename.read() else: with open(filename, 'rb') as f: return f.read() @classmethod def _guess_format(cls, tag, filename): # file objects may have a .name parameter name = getattr(filename, 'name', None) name = name or filename try: mtype, _ = mimetypes.guess_type(name) if not mtype.startswith('{}/'.format(tag)): return None return mtype[len('{}/'.format(tag)):] except Exception: return None def _get_repr(self, cls): # Truncate the value in the repr, since it will # typically be very, very large. class_name = self.__class__.__name__ # Return value first like a ValueWidget signature = [] sig_value = 'value={!r}'.format(self.value[:40].tobytes()) if self.value.nbytes > 40: sig_value = sig_value[:-1]+\\"...\\"+sig_value[-1] signature.append(sig_value) for key in super(cls, self)._repr_keys(): if key == 'value': continue value = str(getattr(self, key)) signature.append('{}={!r}'.format(key, value)) signature = ', '.join(signature) return '{}({})'.format(class_name, signature) @register class Image(_Media): \\"\\"\\"Displays an image as a widget. The \`value\` of this widget accepts a byte string. The byte string is the raw image data that you want the browser to display. You can explicitly define the format of the byte string using the \`format\` trait (which defaults to \\"png\\"). If you pass \`\\"url\\"\` to the \`\\"format\\"\` trait, \`value\` will be interpreted as a URL as bytes encoded in UTF-8. \\"\\"\\" _view_name = Unicode('ImageView').tag(sync=True) _model_name = Unicode('ImageModel').tag(sync=True) # Define the custom state properties to sync with the front-end format = Unicode('png', help=\\"The format of the image.\\").tag(sync=True) width = CUnicode(help=\\"Width of the image in pixels. Use layout.width \\" \\"for styling the widget.\\").tag(sync=True) height = CUnicode(help=\\"Height of the image in pixels. Use layout.height \\" \\"for styling the widget.\\").tag(sync=True) def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) @classmethod def from_file(cls, filename, **kwargs): return cls._from_file('image', filename, **kwargs) def __repr__(self): return self._get_repr(Image) @register class Video(_Media): \\"\\"\\"Displays a video as a widget. The \`value\` of this widget accepts a byte string. The byte string is the raw video data that you want the browser to display. You can explicitly define the format of the byte string using the \`format\` trait (which defaults to \\"mp4\\"). If you pass \`\\"url\\"\` to the \`\\"format\\"\` trait, \`value\` will be interpreted as a URL as bytes encoded in UTF-8. \\"\\"\\" _view_name = Unicode('VideoView').tag(sync=True) _model_name = Unicode('VideoModel').tag(sync=True) # Define the custom state properties to sync with the front-end format = Unicode('mp4', help=\\"The format of the video.\\").tag(sync=True) width = CUnicode(help=\\"Width of the video in pixels.\\").tag(sync=True) height = CUnicode(help=\\"Height of the video in pixels.\\").tag(sync=True) autoplay = Bool(True, help=\\"When true, the video starts when it's displayed\\").tag(sync=True) loop = Bool(True, help=\\"When true, the video will start from the beginning after finishing\\").tag(sync=True) controls = Bool(True, help=\\"Specifies that video controls should be displayed (such as a play/pause button etc)\\").tag(sync=True) @classmethod def from_file(cls, filename, **kwargs): return cls._from_file('video', filename, **kwargs) def __repr__(self): return self._get_repr(Video) @register class Audio(_Media): \\"\\"\\"Displays a audio as a widget. The \`value\` of this widget accepts a byte string. The byte string is the raw audio data that you want the browser to display. You can explicitly define the format of the byte string using the \`format\` trait (which defaults to \\"mp3\\"). If you pass \`\\"url\\"\` to the \`\\"format\\"\` trait, \`value\` will be interpreted as a URL as bytes encoded in UTF-8. \\"\\"\\" _view_name = Unicode('AudioView').tag(sync=True) _model_name = Unicode('AudioModel').tag(sync=True) # Define the custom state properties to sync with the front-end format = Unicode('mp3', help=\\"The format of the audio.\\").tag(sync=True) autoplay = Bool(True, help=\\"When true, the audio starts when it's displayed\\").tag(sync=True) loop = Bool(True, help=\\"When true, the audio will start from the beginning after finishing\\").tag(sync=True) controls = Bool(True, help=\\"Specifies that audio controls should be displayed (such as a play/pause button etc)\\").tag(sync=True) @classmethod def from_file(cls, filename, **kwargs): return cls._from_file('audio', filename, **kwargs) def __repr__(self): return self._get_repr(Audio)"},{"prompt":"w would you improve the following Python code to make it more efficient? def calculate_square(numbers): square_list = [] for number in numbers: square_list.append(number * number) return square_l","completion":"def calculate_square(numbers): return [number * number for number in numbers]"},{"prompt":"Develop a python program to feature scale an input array [1,2,3,4,5]","completion":"# feature scaling function def feature_scale(arr): min_arr = min(arr) max_arr = max(arr) y = (arr-min_arr)+1 scaled = y/(max_arr-min_arr) return scaled # example usage arr = [1,2,3,4,5] scaled_arr = feature_scale(arr) print(scaled_arr) # Output: [0. 0.2 0.4 0.6 0.8]"},{"prompt":"Translate this RegEx pattern into a Python script for extracting the keyvalue pairs from a string. String: myname=Linda&email=linda@example.com&age=30","completion":"import re pattern = r'myname=(?P<name>.+?)&email=(?P<email>.+?)&age=(?P<age>.+)' string = 'myname=Linda&email=linda@example.com&age=30' # Extract values match = re.search(pattern, string) name = match.group('name') email = match.group('email') age = match.group('age') # Print results print('Name:', name) print('Email:', email) print('Age:', age)"},{"prompt":"Create a Base64 encoder/decoder function in Python. Not applicable","completion":"import base64 def encode(string): encoded = base64.b64encode(string.encode()) return encoded.decode('utf-8') def decode(encoded_string): decoded = base64.b64decode(encoded_string.encode()) return decoded.decode('utf-8') if __name__ == \\"__main__\\": original_string = \\"Hello World!\\" encoded_string = encode(original_string) decoded_string = decode(encoded_string) print(f'Original string: {original_string} Encoded string: {encoded_string} Decoded string: {decoded_string} ')"},{"prompt":"Write a python code that sorts the values of the given list. [52, 34, 12, 33, 16]","completion":"unsorted_list = [52, 34, 12, 33, 16] sorted_list = sorted(unsorted_list) print(sorted_list) # prints [12, 16, 33, 34, 52]"},{"prompt":"Create a function in Python to get the sum of two given integers.","completion":"def add_ints(a, b): return a + b"},{"prompt":"Generate a Python program to check if any element of a given list is palindrome or not. list1 = [12, 121, 3]","completion":"list1 = [12, 121, 3] # Iterate through the list for element in list1: # Convert the element to a string element = str(element) # Check if the element is a palindrome if element == element[::-1]: print(element + \\" is a palindrome\\") else: print(element + \\" is not a palindrome\\")"},{"prompt":"mplement a search algorithm in Python that takes a list and a query as input and returns all matching elements. list = [1, 2, 3, 4, 5, 6] query = 4","completion":"def search(list, query): results = [] for item in list: if item == query: results.append(item) return results list = [1, 2, 3, 4, 5, 6] query = 4 result = search(list, query) print(result)"},{"prompt":"Build a sentiment analysis system in Python. The system should take an input text and return its positivity, negativity, or neutral score. Not applicable","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_analysis(text): # split the sentences sentences = nltk.sent_tokenize(text) # create a sentiment analyzer object sid = SentimentIntensityAnalyzer() sentiment_scores = [] for sentence in sentences: # get the sentiment scores for the sentence ss = sid.polarity_scores(sentence) sentiment_scores.append(ss) # get overall sentiment of the text compound_score = 0 for score in sentiment_scores: compound_score += score['compound'] if compound_score >= 0.05: return f\\"The sentiment score of the text is Positive with {compound_score}.\\" elif compound_score <= -0.05: return f\\"The sentiment score of the text is Negative with {compound_score}.\\" else: return f\\"The sentiment score of the text is Neutral with {compound_score}.\\""},{"prompt":"Fluently and completely document a quick sort algorithm in Python.","completion":"def quick_sort(arr): \\"\\"\\" Quick sort is a sorting algorithm that uses the divide-and-conquer approach to sort a given array. Parameters ---------- arr: List[int] list of integers to be sorted Returns ------- List[int] sorted list of integers \\"\\"\\" if arr is None or len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left_arr, right_arr = [], [] for i in range(len(arr)): if arr[i] < pivot: left_arr.append(arr[i]) elif arr[i] > pivot: right_arr.append(arr[i]) return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)"},{"prompt":"Generate Python code to calculate the sum of the elements in a given list. [1, 4, 8, 10]","completion":"list = [1,4,8,10] def calculate_sum(list): sum = 0 for number in list: sum += number return sum sum = calculate_sum(list) print(sum) # Output: 23"},{"prompt":"Create a Python function that takes two strings and count the total number of characters made from the two strings combined. firstStr = Hello secondStr = World","completion":"def countChars(firstStr, secondStr): combinedStr = firstStr + secondStr return len(combinedStr)"},{"prompt":"Write a python program that reads in the following input and then prints it out in the same order: { num1: 4, num2: 3, num3: 2, num4: 1 }","completion":"import json data = { \\"num1\\": \\"4\\", \\"num2\\": \\"3\\", \\"num3\\": \\"2\\", \\"num4\\": \\"1\\" } for key, value in data.items(): print(key, value)"},{"prompt":"Write an algorithm in Python that takes a string of characters and prints out the frequency of each character. Hello, world!","completion":"\\"\\"\\" Write an algorithm in Python that takes a string of characters and prints out the frequency of each character. \\"\\"\\" def count_frequency(text): freq = {} for c in text: if c in freq: freq[c] += 1 else: freq[c] = 1 for key,value in freq.items(): print(key + ': ' + str(value)) if __name__ == '__main__': text = \\"Hello, world!\\" count_frequency(text)"},{"prompt":"Write a Python function that takes in two parameters of type list and returns the sum of all the elements in the two lists. list1 = [1, 2, 3, 4] list2 = [5, 6, 7, 8]","completion":"def list_sum(list1, list2): # initialize sum with 0 total_sum = 0 # iterate over each element in list1 for num in list1: # add to sum total_sum += num # iterate over each element in list2 for num in list2: # add to sum total_sum += num return total_sum"},{"prompt":"Formulate a script in Python that takes as input an array of integers, and returns the highest number in the array. [1, 2, 5, 3, 7, 4]","completion":"def highest_number(arr): ''' Function to get the highest number in an array of integers Parameters arr: list of integers Returns highest number in the array ''' highest_num = arr[0] for num in arr: if num > highest_num: highest_num = num return highest_num"},{"prompt":"Write a code in Python that takes a given string and removes all spaces from the string. Hello World","completion":"def remove_spaces(str): new_str = \\"\\" # loop through each character in the string for letter in str: if letter != \\" \\": new_str = new_str + letter return new_str # main program str = \\"Hello World\\" new_str = remove_spaces(str) #print the new string print(\\"String without spaces:\\", new_str)"},{"prompt":"Write a Python script that reads in a userdefined data set and prints the top5 highest values contained in the data set. [100.0, 74.0, 56.2, 45.5, 27.8, 21.0, 8.2, 4.1]","completion":"data = [100.0, 74.0, 56.2, 45.5, 27.8, 21.0, 8.2, 4.1] def get_top_five_values(data): sorted_data = sorted(data, reverse=True) top_five_values = sorted_data[:5] return top_five_values top_five_values = get_top_five_values(data) print(top_five_values)"},{"prompt":"Create a Python script that takes an input string and reverses its letters. Hello Python!","completion":"def reverse_string(string): result = [] for i in string: result.insert(0,i) return ''.join(result) if __name__ == \\"__main__\\": string = \\"Hello Python!\\" print(reverse_string(string)) # Output: !nohtyP olleH"},{"prompt":"Write a Python code to generate the Fibonacci sequence up to nth number. 7","completion":"def fibonacciSequence(n): fibSequence = [] a, b = 0, 1 while b < n: fibSequence.append(b) a, b = b, a + b return fibSequence n = 7 print(fibonacciSequence(n)) // [1, 1, 2, 3, 5]"},{"prompt":"Write a Python program to create a dictionary with keys=(numbers 110) and values=(numbers squared). Not applicable","completion":"d = {} # Let us add 10 key-value pairs to dictionary for i in range(1,11): d[i] = i ** 2 # Print the dictionary items print(d.items())"},{"prompt":"Describe the advantages of using programming languages such as Python and JavaScript.","completion":"Python and JavaScript are both powerful, dynamic programming languages that offer a wide range of features and benefits. Python is well-liked for its readability and constructs that make it easier to learn and code, while JavaScript excels at interactive web-building and is flexible enough to be adapted to a variety of applications. Together, they offer developers a wide range of options for creating apps and websites. Python offers an easy, high-level language with a strong emphasis on readability & decrease in development time, while JavaScript is great for building interactive websites and applications. Lastly, both languages have an active community, supportive tools, and a large number of libraries available."},{"prompt":"mplement a singlethreaded web server using Python which can handle a maximum of 10 concurrent requests.","completion":"import socket # socket object serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # ensures that multiple instances # of the application cannot bind # to the same port serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) # IP address and port of server IP_address = socket.gethostname() Port = 12345 # binds IP and port serversocket.bind((IP_address, Port)) # specifies number of connections # the server can handle simultaneous serversocket.listen(10) while True: # establishes connection clientsocket, address = serversocket.accept() # prints the address of the # client making the connection print(\\"Connection from \\" + str(address)) # generates response message = \\"The server grants your request.rn\\" # send an answer to the client clientsocket.send(message.encode('ascii')) # closes the connection clientsocket.close()"},{"prompt":"Create a function in python to calculate the distance between two points in 3D space. (x1,y1,z1) = (8, 4, 1) (x2,y2,z2) = (5, 8, 2)","completion":"def calculateDistance(x1,y1,z1,x2,y2,z2): dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2) return dist print(calculateDistance(8,-4,1,5,8,-2))"},{"prompt":"Create a python script that outputs the following string My favorite color is blue.","completion":"print('My favorite color is blue.')"},{"prompt":"Design an algorithm in Python which will traverse a linked list and select all elements that are greater than 10.","completion":"# Linked List Node class Node: # Constructor to initialise the node object def __init__(self, data): self.data = data self.next = None # Linked List class contains a Node object class LinkedList: # Function to initialize head def __init__(self): self.head = None # Traverses linked list and prints its elements def traverse(self): # Set current to head node current = self.head while current is not None: # If the data of a node is greater # than 10 if current.data > 10: # Print the data of the node print(current.data) # Go to next node current = current.next"},{"prompt":"Design a SVM classifier in Python to classify the given dataset for sentiment analysis. dataset = [ {'text': 'I love this product', 'sentiment': 'positive'}, {'text': 'I hate this product', 'sentiment': 'negative'}, {'text': 'This product is awful', 'sentiment': 'negative'}, {'text': 'This product is great', 'sentiment': 'positive'} ]","completion":"import pandas as pd from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.svm import SVC df = pd.DataFrame(dataset) X = df['text'] y = df['sentiment'] # Create the vectorizer vectorizer = TfidfVectorizer() # Fit and transform the vectorizer to X X_vect = vectorizer.fit_transform(X) # Initialize the SVM classifier clf = SVC() # Fit the SVM classifier to the data clf.fit(X_vect, y)"},{"prompt":"Generate a class in Python to retrieve data from a SQLite database. The database contains pricing information for products in the following format: | Name | Price | ||| | Apple | 0.99 | | Bananas| 2.50 | | Cookies| 1.80 |","completion":"class ProductTableRetriever: def __init__(self, database_connection): self.connection = database_connection def get_prices(self): cursor = self.connection.execute(\\"SELECT name, price FROM products\\") return {product[0]: product[1] for product in cursor}"},{"prompt":"Write a Python program that calculates the mean of ten numbers.","completion":"def mean(numbers): total = 0 for num in numbers: total += num return total / len(numbers) ten_numbers = [15,18,14,21,12,21,19,6,17,18] mean = mean(ten_numbers) print(\\"Mean of ten numbers:\\", mean)"},{"prompt":"Develop a Python program that embeds a sentence using a pretrained Word2Vec model? word embeddings are very useful","completion":"import gensim # Load the pre-trained Word2Vec model model = gensim.models.KeyedVectors.load_word2vec_format('GoogleNews-vectors-negative300.bin', binary=True) sentence = 'word embeddings are very useful' words = sentence.split() # Embed each word in sentence embed = [] for word in words: word_embedding = model[word] embed.append(word_embedding) print(embed)"},{"prompt":"Create a basic Python script that uses the Natural Language Toolkit (NLTK) to classify a given sentence as sentiment positive, negative, or neutral. This product is mediocre.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentences = [\\"This product is mediocre.\\"] sid = SentimentIntensityAnalyzer() for sentence in sentences: print(sentence) ss = sid.polarity_scores(sentence) sentiment_type = \\"\\" if ss['compound'] >= 0.5: sentiment_type = \\"positive\\" elif ss['compound'] <= -0.5: sentiment_type = \\"negative\\" else: sentiment_type = \\"neutral\\" print('Sentiment type:', sentiment_type) # Output: # Sentiment type: neutral"},{"prompt":"Create a Python script to combine two dictionaries into one. dict1 = {'Name': 'John', 'Age': 30, 'Country': 'Mexico'} dict2 = {'Animal': 'Pig', 'Color': 'Pink'}","completion":"def combine_dict(dict1, dict2): combined_dict = dict1.copy() combined_dict.update(dict2) return combined_dict"},{"prompt":"Create a python program to return the element most frequently occurring in a list?","completion":"def most_frequent(lst): count = 0 max_element = 0 for element in lst: curr_count = lst.count(element) if curr_count > count: count = curr_count max_element = element return max_element"},{"prompt":"Create a python function that takes a list of integers as input and returns the list with the numbers sorted in descending order. [5, 4, 3, 2, 1]","completion":"def sortList(nums): # sort the list in descending order nums.sort(reverse = True) # return the sorted list return nums # driver code list = [5, 4, 3, 2, 1] print(sortList(list))"},{"prompt":"Write a function to reverse the elements of a given array in Python. [1, 2, 3, 4, 5]","completion":"def reverse_array(arr): \\"\\"\\"This function reverses the elements of a given array of numbers Parameters: arr (list): The list of numbers to reverse. Returns: The reversed array \\"\\"\\" return arr[::-1]"},{"prompt":"Write a Python program that creates a list with 10 random numbers between 1 and 10.","completion":"import random def random_list(): random_list = [] for _ in range(10): num = random.randint(1, 10) random_list.append(num) return random_list list = random_list() print(list)"},{"prompt":"Write a 50 lines of code snippet in Python that implements linear search algorithm. A list of integers: [1, 4, 3, 2, 5]","completion":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 # Test array arr = [1, 4, 3, 2, 5] target = 3 # Function call result = linear_search(arr, target) if result != -1: print (\\"Element is present at index\\", result) else: print (\\"Element is not present in array\\")"},{"prompt":"Write a Python program to multiply two matrices of three by three. matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] matrix2 = [[10, 11, 12], [13, 14, 15], [16, 17, 18]]","completion":"def matrix_mul3x3(matrix1, matrix2): result = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] for i in range(len(matrix1)): for j in range(len(matrix2[0])): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] matrix2 = [[10, 11, 12], [13, 14, 15], [16, 17, 18]] result = matrix_mul3x3(matrix1, matrix2) for r in result: print(r)"},{"prompt":"Create a Python script that performs sentiment analysis over a given sentence. Sentence: I love the way you smile.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentence = \\"I love the way you smile.\\" # Initialize sentiment Analyzer sia = SentimentIntensityAnalyzer() # Assign sentiment scores sentiment_scores = sia.polarity_scores(sentence) # Print overall sentiment analysis print(\\"The overall sentiment of the sentence is: \\", sentiment_scores['compound'])"},{"prompt":"Write a Python program to generate a 5x5 matrix filled with zeros.","completion":"def generate_matrix(): matrix = [] for _ in range(5): row = [0] * 5 matrix.append(row) return matrix if __name__ == '__main__': matrix = generate_matrix() print(matrix)"},{"prompt":"mplement a solution for an online reservation system in Python. The system should allow for users to register and make reservations for products. Sample product list: [ { id: 1, name: 'Sofa', price: 499.99 }, { id: 2, name: 'Table', price: 149.99 }, { id: 3, name: 'Chair', price: 79.99 } ]","completion":"import sqlite3 conn = sqlite3.connect('reservation_system.db') conn.execute(''' CREATE TABLE IF NOT EXISTS products ( product_id INTEGER PRIMARY KEY, product_name VARCHAR(20) NOT NULL, price DECIMAL NOT NULL )''') conn.execute(\\"INSERT INTO products VALUES(1, 'Sofa', 499.99)\\") conn.execute(\\"INSERT INTO products VALUES(2, 'Table', 149.99)\\") conn.execute(\\"INSERT INTO products VALUES(3, 'Chair', 79.99)\\") conn.execute(''' CREATE TABLE IF NOT EXISTS reservations ( reservation_id INTEGER PRIMARY KEY, product_id INTEGER NOT NULL, user_name VARCHAR(20) NOT NULL, reservation_date DATETIME NOT NULL )''') def register_user(username): conn.execute(\\"INSERT into users (username) VALUES (?)\\", (username,)) def make_reservation(product_id, username, date): conn.execute(\\"INSERT into reservations (product_id, user_name, reservation_date) VALUES (?, ?, ?)\\", (product_id, username, date)) conn.commit() conn.close()"},{"prompt":"Create an algorithm in Python for calculating the standard deviation of a given set of numbers. Numbers: 3, 7, 12, 22, 35","completion":"import numpy as np def calculate_std_dev(nums): n = len(nums) std_dev = np.std(nums, axis=0) return std_dev nums = [3, 7, 12, 22, 35] print(\\"Standard Deviation: {:.3f}\\".format(calculate_std_dev(nums))) # Output: Standard Deviation: 11.106"},{"prompt":"Create a Python program that will take a list of numbers and identify if any of the numbers are multiples of three. numbers = [2, 7, 8, 15, 24]","completion":"for number in numbers: if number % 3 == 0: print(f'{number} is a multiple of 3') else: print(f'{number} is not a multiple of 3') # Output: # 2 is not a multiple of 3 # 7 is not a multiple of 3 # 8 is not a multiple of 3 # 15 is a multiple of 3 # 24 is a multiple of 3"},{"prompt":"Write a Python program to create a flag made up of stars (*). flagSize = 5","completion":"# Generate a flag made up of * flagString = \\"\\" for i in range(flagSize): flagString += \\"*\\" print(flagString)"},{"prompt":"Create a program in Python to parse a string and replace all vowels with the letter “X”.","completion":"def replace_vowels(string): vowels = ('a', 'e', 'i', 'o', 'u') for x in string.lower(): if x in vowels: string = string.replace(x, \\"X\\") # Print string without vowels print(string) # Driver program if __name__ == \\"__main__\\": string = \\"Hello, world!\\" replace_vowels(string)"},{"prompt":"Create a Python program to render a grid of numbers and letters. Not applicable","completion":"def print_grid(rows, columns): for i in range(rows): for j in range(columns): print(chr(i*j+65), end=' ') print('n') print_grid(5,5) #Output: A B C D E A C E G I A F K P U A I P W E A N U E N"},{"prompt":"Create a Python program to clean a string by removing all punctuation and special characters this&is#somesampletext","completion":"# function to remove punctuations and special characters def clean_string(str): # remove all punctuation no_punc = ''.join(c for c in str if c not in '!@#%^&*()_+-={}[]:\\"|;<>,./?') # remove all special characters final_string = ''.join(c for c in no_punc if ord(c) >= 32 and ord(c) <= 126) return final_string # sample input input_str = \\"this&is#somesampletext\\" # call the function to remove punctuations and special characters clean_str = clean_string(input_str) # print the clean string print(clean_str) Output: thisissomesampletext"},{"prompt":"Design a class in Python that stores student information.","completion":"class Student: def __init__(self, name, age, class_name, grade): self.name = name self.age = age self.class_name = class_name self.grade = grade def get_name(self): return self.name def get_age(self): return self.age def get_class_name(self): return self.class_name def get_grade(self): return self.grade"},{"prompt":"Create a Python program that takes two strings as input and prints the text which is the result of a mix of the words from the strings. today, tomorrow","completion":"def mix_words(word1, word2): # Create an empty result string result = \\"\\" # Iterate through each letter in each word for i in range(max(len(word1), len(word2))): # Check if the letter exists in both words if i < len(word1): result += word1[i] if i < len(word2): result += word2[i] return result"},{"prompt":"Write a function in Python that takes a list of numbers and returns the sum of the list items that are greater than the given value. nums = [1, 4, 5, 10, 12] value = 6","completion":"def findSum(nums, value): total = 0 for num in nums: if num > value: total += num return total nums = [1, 4, 5, 10, 12] value = 6 res = findSum(nums, value) print(res)"},{"prompt":"Create a Python code to implement truncated bubble sort and find out the number of swaps needed to sort the list. [7, 3, 5, 9]","completion":"def truncatedBubbleSort(arr): n = len(arr) # outer loop will run n-2 times for i in range(0, n - 2): swapped = False # inner loop will run n-i-1 times for j in range(0, n - i - 1): # Swap if element found greater # than the next element if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] swapped = True # If no two elements were swapped # by inner loop, then break if swapped == False: break return arr, i arr = [7, 3, 5, 9] res, swaps = truncatedBubbleSort(arr) print(res) print(\\"Number of swaps needed: \\" + str(swaps))"},{"prompt":"Create a function in Python to perform linear regression looking for the best correlation for a set of data. x = [1, 2, 4, 3, 5] y = [1, 3, 3, 2, 5]","completion":"import numpy as np def linear_regression(x, y): x_mean = np.mean(x) y_mean = np.mean(y) num = 0 den = 0 for i in range(len(x)): num += (x[i] - x_mean)*(y[i] - y_mean) den += (x[i] - x_mean)**2 m = num / den c = y_mean - m*x_mean return m, c"},{"prompt":"Create a Python web application using Flask that takes a single string input from a text box and returns the reverse of that string. Not applicable","completion":"from flask import Flask, render_template, request app = Flask(__name__) @app.route('/', methods = ['POST', 'GET']) def index(): if request.method == 'POST': user_input = request.form.get('user_input') output = user_input[::-1] return render_template('index.html', output=output) return render_template('index.html') if __name__ == '__main__': app.run(debug = True) Index.html: <form method=\\"POST\\"> <input type=\\"text\\" name=\\"user_input\\"> <input type=\\"submit\\" value=\\"Reverse String\\"> </form> {{ output }}"},{"prompt":"Build an abbreviation dictionary in Python.","completion":"abbreviations = { 'AD': 'advertisement', 'ASAP': 'as soon as possible', 'ATM': 'automated teller machine', 'AV': 'audio-visual', 'CEO': 'chief executive officer' # Add more abbreviations and meanings }"},{"prompt":"You need to generate a function in Python that takes a word and prints out the number of vowels in that word.","completion":"def count_vowels(word): vowels = 'aeiou' count = 0 for char in word: if char in vowels: count += 1 return count"},{"prompt":"Make a textbased adventure game in Python","completion":"# Game resources # Rooms, items, NPCs # Global Variables player_location = 'room1' player_items = [] # Functions def process_input(): input_string = input(\\"What do you want to do? \\") if input_string == 'go north': if player_location == 'room1': player_location = 'room2' elif player_location == 'room2': player_location = 'room3' else: print('You can't go that way') elif input_string == 'go south': if player_location == 'room2': player_location = 'room1' elif player_location == 'room3': player_location = 'room2' else: print('You can't go that way') print('You are in ' + player_location) # Game Loop while True: process_input()"},{"prompt":"Using Python, create a function that takes as input a list of numbers and returns the median of the list.","completion":"def median(nums): sorted_nums = sorted(nums) length = len(nums) if length % 2 == 0: return (sorted_nums[length//2] + sorted_nums[length//2 - 1]) / 2 else: return sorted_nums[length//2]"},{"prompt":"Optimize a given Python code snippet for faster performance. def function1(list1): i = 0 max_sum = 0 while i < len(list1): for j in range(i, len(list1)): max_sum = max(max_sum, sum(list1[i:j+1])) i += 1 return max_sum","completion":"def function1(list1): max_sum = 0 for i in range(len(list1)): sublist_sum = 0 for j in range(i, len(list1)): sublist_sum += list1[j] max_sum = max(max_sum, sublist_sum) return max_sum"},{"prompt":"Create a Python class that defines a circle with a radius.","completion":"class Circle: def __init__(self, radius): self.radius = radius def get_area(self): return 3.14 * (self.radius ** 2) def get_circumference(self): return 2 * 3.14 * self.radius"},{"prompt":"Write a Python program to compare two unordered lists to see if they are equal. list1 = [3, 4, 5] list2 = [4, 5, 3]","completion":"def compare_lists(list1, list2): if len(list1) != len(list2): return False if sorted(list1) == sorted(list2): return True return False"},{"prompt":"Create a Python program that looks through a list of colors and returns those colors that are dark. ['Red', 'Orange', 'Green', 'Purple', 'Black', 'White']","completion":"def find_dark_colors(colors): dark_colors = [] for color in colors: if color == 'Black' or color == 'Purple': dark_colors.append(color) return dark_colors result = find_dark_colors(['Red', 'Orange', 'Green', 'Purple', 'Black', 'White']) print(result)"},{"prompt":"Create a Python program to print out the output as shown. A list of numbers [1, 2, 3, 4, 5].","completion":"list = [1, 2, 3, 4, 5] print(\\"The list is: \\") for i in list: print(i, end=\\" \\")"},{"prompt":"Write a Python program to find the most common words in a given list of texts. [ This is a test., This is another test., This is a different test. ]","completion":"import collections texts = [ \\"This is a test.\\", \\"This is another test.\\", \\"This is a different test.\\" ] # split the text into words words = [] for text in texts: words.extend(text.split()) # count the frequencies of each word word_freq = collections.Counter(words) # get the most common words most_common_words = word_freq.most_common(3) for word, count in most_common_words: print('{}: {}'.format(word, count)) #Output: #This: 3 #is: 3 #a: 2"},{"prompt":"Create a shell script to automate the process of installing a local development environment. Not applicable","completion":"#!/bin/bash # OS check if [ (uname) == 'Darwin' ]; then echo \\"Mac OS detected\\" elif [ (uname) == 'Linux' ]; then echo \\"Linux OS detected\\" fi # install homebrew /bin/bash -c \\"(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\\" # install git brew install git # install node brew install node # install nvm curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash # install yarn brew install yarn # install postgres brew install postgres # create local postgres database createdb your_dbname # install python brew install python # start postgres server pg_ctl -D /usr/local/var/postgres start"},{"prompt":"Create an algorithm in python to sort the given dataset in ascending order. arr = [15, 12, 0, 14, 23, 2]","completion":"arr = [15, -12, 0, 14, 23, -2] def insertion_sort(arr): for i in range(1, len(arr)): key = arr[i] j = i-1 while j>=0 and key<arr[j]: arr[j+1] = arr[j] j -= 1 arr[j+1] = key return arr print(insertion_sort(arr))"},{"prompt":"Create a Python program to select all the words that contain at least four vowels from a list of words. [algorithm, machine, programming, beast]","completion":"def find_words_with_four_vowels(words): vowels = \\"aeiou\\" result = [] for word in words: count = 0 for letter in word: if letter in vowels: count += 1 if count >= 4: result.append(word) return result words = [\\"algorithm\\", \\"machine\\", \\"programming\\", \\"beast\\"] result = find_words_with_four_vowels(words) print(result)"},{"prompt":"Generate a Python program that takes in a list of strings and prints out the string which has the maximum length. String List: [Hello, World, Avengers, Captain America]","completion":"def maxStringLength(stringList): maxLength = 0 maxString = \\"\\" for s in stringList: if len(s) > maxLength: maxLength = len(s) maxString = s return maxString stringList = [\\"Hello\\", \\"World\\", \\"Avengers\\", \\"Captain America\\"] result = maxStringLength(stringList) print(result)"},{"prompt":"Generate a python program to encode a given string into the Base64 representation.","completion":"import base64 def encode_string(string): # Encode the bytes of the given string encoded_bytes = base64.b64encode(string.encode(\\"utf-8\\")) # Get the string representation of the encoded bytes encoded_string = str(encoded_bytes, \\"utf-8\\") return encoded_string"},{"prompt":"Generate a function in Python that takes a list of numbers and returns the average value of all the numbers. Not applicable","completion":"def average(numbers): sum = 0 for number in numbers: sum += number return sum / len(numbers)"},{"prompt":"Write a Python script to parse an HTML page and find all the links. <html> <a href=https://www.example.com>Example Link</a> <a href=http://www.example.org>Another Link</a> </html>","completion":"import re from bs4 import BeautifulSoup html = ''' <html> <a href=\\"https://www.example.com\\">Example Link</a> <a href=\\"http://www.example.org\\">Another Link</a> </html> ''' soup = BeautifulSoup(html, 'html.parser') links = soup.find_all('a', href=re.compile('.*')) for link in links: print(link['href']) # Output: # https://www.example.com # http://www.example.org"},{"prompt":"Design an algorithm and write a code in Python that can analyze the given dataset. A dataset comprising of two columns and 10 rows. Column 1 has 10 integer values and Column 2 has 8 strings values.","completion":"#Import library import pandas as pd #Read data data = pd.read_csv('dataset.csv') #Get data from columns column1 = data['col1'] column2 = data['col2'] #Get the stats of column 1 column1_mean = column1.mean() column1_std = column1.std() #Analyize column 2 column2_unique_values = set(column2) #Print results print('The mean of column1 is', column1_mean) print('The standard deviation of column1 is', column2_std) print('The unique values of column2 are', column2_unique_values)"},{"prompt":"Generate Python code to implement linear search in a given list.","completion":"def linear_search(list, item): \\"\\"\\" Implement linear search in a given list. list: the list to be searched item: the item to be searched for \\"\\"\\" for i in range(len(list)): if list[i] == item: return i return -1"},{"prompt":"Write a Python function to sort an array of numbers in descending order [3, 7, 1, 5]","completion":"def sortDescending(arr): arr.sort(reverse=True) return arr array = [3, 7, 1, 5] sortedArray = sortDescending(array)"},{"prompt":"Create a Python script to format a string into a list string = Hello, World, I am here","completion":"string = \\"Hello, World, I am here\\" list = string.split(\\", \\") print(list) # Output ['Hello', 'World', 'I am here']"},{"prompt":"Write a python program to generate all possible strings by combining the characters of two given strings. str1 = abc str2 = xyz","completion":"def combine_strings(str1, str2): result = [] for i in range(len(str1)): for j in range(len(str2)): result.append(str1[i] + str2[j]) return result"},{"prompt":"Create a program in python that can predict the Bitcoin price next week","completion":"import pandas as pd from sklearn.linear_model import LinearRegression # Read the data data = pd.read_csv(\\"bitcoin.csv\\") # Separate features and labels X = data.loc[:, data.columns != 'Close'] y = data['Close'] # Train the linear regression model model = LinearRegression().fit(X, y) # Predict the bitcoin price next week prediction = model.predict(X)"},{"prompt":"Jupyter notebook, create a customized menu for quick access to all necessary resources, such as loading data, processing text, or visualizing data. Not applicable","completion":"from IPython.utils.traitlets import class CustomMenu(IPython.config.configurable.Configurable): \\"\\"\\"A customizable menu container \\"\\"\\" def __init__(self): super(CustomMenu, self).__init__(config=None) self._buttons = [] def add_button(self, label, action): \\"\\"\\"Add a new button to the menu \\"\\"\\" self._buttons.append((label,action)) def _render_menu(self): \\"\\"\\"Renders the button \\"\\"\\" html = [] for label, action in self._buttons: html.append('<a href=\\"javascript:{}\\">{}</a>'.format(action,label)) return '&nbsp;'.join(html) def _ipython_display_(self): \\"\\"\\"Renders the menubar \\"\\"\\" display(IPython.core.display.HTML(self._render_menu()))"},{"prompt":"Rewrite this C++ program into a Python program #include<iostream> using namespace std; int main(){ int a = 10; int b = 20; cout<<sum is << a+b; return 0; }","completion":"a = 10 b = 20 print(\\"sum is\\", a+b)"},{"prompt":"Write a python code to extract the year from a string. string = This movie was released in 1980","completion":"import re string = \\"This movie was released in 1980\\" # search for substring of 4 digits result = re.search(r'd{4}', string) # print the year if result: print(result.group())"},{"prompt":"Write a Python program to find the origin of all numbers between a given range of 1 to 1000. Between 1 and 1000","completion":"def find_origin(lower, upper): for i in range(lower, upper+1): num = i origin = \\"\\" # check if the number is a multiple of 3 if num % 3 == 0: origin += \\"Fizz\\" # check if the number is a multiple of 5 if num % 5 == 0: origin += \\"Buzz\\" # if number is not a multiple of 3 or 5, leave origin empty if origin == \\"\\": origin = num print(origin) find_origin(1, 1000)"},{"prompt":"Design a chatbot using Python and the Natural Language Processing library spaCy.","completion":"import spacy # Load the spacy language model nlp = spacy.load('en') # Create the chatbot's response function def chatbot_response(sentence): # Parse the user's input using the spacy nlp object doc = nlp(sentence) # Iterate over the parsed words for word in doc: # Check for an adjective if word.pos_ == 'ADJ': return 'That sounds interesting!' # If no adjective is found, the chatbot has nothing to reply return 'I see.'"},{"prompt":"Using the scipy library, create a Python program that fits a polynomial of degree two to a given set of data. A set of data points consisting of xcoordinate and ycoordinate values.","completion":"import numpy as np from scipy.optimize import curve_fit # Define the x-coordinate values xData = np.arange(-5, 5, 0.1) # Define the y-coordinate values yData = 3*xData**2 + 2*xData + 3 # Define the polynomial function def func(x, a, b, c): return a*x**2 + b*x + c # Fit the polynomial params, params_covariance = curve_fit(func, xData, yData) # Extract parameters from the params array a = params[0] b = params[1] c = params[2] print('Fitted polynomial: {0:.2f}x^2 + {1:.2f}x + {2:.2f}'.format(a, b, c)) Output: Fitted polynomial: 3.00x^2 + 2.00x + 3.00"},{"prompt":"Generate a coref resolution system for a given string using Python. John went to the store. He bought an apple.","completion":"import spacy from spacy.tokens import Span nlp = spacy.load('en_core_web_sm') doc = nlp(\\"John went to the store. He bought an apple.\\") # Find all coreferences that have not been resolved references = set() for token in doc: if token._.in_coref: references.add(token._.coref_cluster) new_clusters = [] for cluster in references: # Get the span for the given cluster span = Span(doc, cluster.main.start, cluster.main.end, label=cluster.main.label) # Add all antecedents to the span for antecedent in cluster.ants: span = span._.set_antecedent(antecedent) new_clusters.append(span) # Overwrite the doc's coref attribute with the newly created clusters doc._.coref_clusters = new_clusters print([(ent.text, ent._.ancestor.text) for ent in doc.ents]) # Output: [('John', 'He'), ('the store', 'He')]"},{"prompt":"Propose a solution to build an AI assistant that can format and justify paragraphs using Python. Paragraph with improper formatting","completion":"# Install library for formatting and justifying paragraphs pip install justify # Function for formatting and justifying paragraphs def format_and_justify_paragraphs(paragraph): from justify import Justify formatted_text = Justify(paragraph, width=90).format() return formatted_text # Example paragraph = \\"Paragraph with improper formatting\\"; formatted_text = format_and_justify_paragraphs(paragraph) print(formatted_text)"},{"prompt":"Convert the following python code into a Java program (15 lines or less). def fact(n): if n < 0: return 0 if n == 0: return 1 return n * fact(n 1)","completion":"public class Factorial { public static int fact(int n) { if (n < 0) { return 0; } if (n == 0) { return 1; } return n * fact(n - 1); } }"},{"prompt":"Write a Python script to compare two lists of numbers. The output should be the elements in the first list that are not in the second list. listA = [1, 2, 3, 4, 5] listB = [2, 4, 6, 8, 10]","completion":"listC = [x for x in listA if x not in listB] print(listC) # prints [1, 3, 5]"},{"prompt":"Generate a function in Python which checks whether a number is even or odd.","completion":"def is_even_odd(num): if num % 2 == 0: return \\"Even\\" else: return \\"Odd\\""},{"prompt":"Construct a program to sort a given list in Python. list = [3, 7, 1, 4, 5]","completion":"def sort_list(list): for i in range(len(list)-1): for j in range(0, len(list)-i-1): if list[j] > list[j+1] : list[j], list[j+1] = list[j+1], list[j] list = [3, 7, 1, 4, 5] sort_list(list) print(list)"},{"prompt":"Write a Python program to print the numbers of a specified list after removing even numbers from it. [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"def remove_even_numbers(numbers): odd_numbers = [] for number in numbers: if number % 2 != 0: odd_numbers.append(number) return odd_numbers numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9] odd_numbers = remove_even_numbers(numbers) print(odd_numbers)"},{"prompt":"Generate a python script to make HTTP request.","completion":"import requests url = 'https://www.example.com/' response = requests.get(url) if response.status_code == 200: print('Success!') else: print('An error has occurred.')"},{"prompt":"Create a Python program to display a user's profile. The program should take a JSON object as an input and should output the user's name, age and email address. { name:John Smith, age:32, email:john.smith@example.com }","completion":"import json profile_data = { \\"name\\":\\"John Smith\\", \\"age\\":32, \\"email\\":\\"john.smith@example.com\\" } data = json.loads(profile_data) print(\\"Name: {}\\".format(data[\\"name\\"])) print(\\"Age: {}\\".format(data[\\"age\\"])) print(\\"Email: {}\\".format(data[\\"email\\"])) # Output: # Name: John Smith # Age: 32 # Email: john.smith@example.com"},{"prompt":"Write a script in Python to extract the title of a webpage from its HTML code. html = <title>This is page title</title>","completion":"soup = BeautifulSoup(html, 'html.parser') title = soup.find('title').text print(title)"},{"prompt":"Write a Python script to find the factorial of any given number.","completion":"def factorial(num): result = 1 if num > 1: for i in range(2,num+1): result *= i return result"},{"prompt":"Generate a list of prime numbers from 1 to 100 in Python.","completion":"# Initialize a list primes = [] for x in range(2, 101): prime = True for y in range(2, x): if x % y == 0: prime = False break if prime: primes.append(x) print(primes) # Output: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"},{"prompt":"Model a simple linear regression in Python using the Boston housing data. Boston house features: RM – average number of rooms per dwelling LSTAT – % lower status of the population PTRATIO – pupilteacher ratio by tow","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt # Read Boston housing data in boston_df = pd.read_csv( 'https://raw.githubusercontent.com/PacktWorkshops/The-Data-Science-Workshop/master/Chapter02/Dataset/boston_house_prices.csv' ) # Visualize data plt.style.use('ggplot') plt.scatter(boston_df.RM, boston_df.MEDV, color='black') plt.xlabel('Average number of rooms per dwelling (RM)') plt.ylabel('Median Value of Homes in 1000s (MEDV)') plt.title(\\"Modeling Simple Linear Regression in Boston Housing Data\\") # Calculate regression line X = boston_df[['RM']] y = boston_df['MEDV'] model = LinearRegression() model.fit(X, y) # Calculate predicted value predicted_MEDV = model.predict(X) # Plot regression line plt.plot(boston_df.RM, predicted_MEDV, color='blue', linewidth=2) plt.show()"},{"prompt":"Create a Python program to calculate the surface area of a triangle with sides of length 3, 4, and 5.","completion":"import math def area(a, b, c): s = (a + b + c) / 2 return (s*(s-a)*(s-b)*(s-c)) ** 0.5 a = 3 b = 4 c = 5 print('Surface Area of triangle is: {:.2f}'.format(area(a, b, c)))"},{"prompt":"Create a Python script to append a list to another list. List: [1, 2, 3]","completion":"def append_list(list_to_append, list_to_add): return list_to_append + list_to_add"},{"prompt":"Generate a Python program that iterates through a given list of numbers and prints the doubled values. list_nums = [4, 6, 2, 8]","completion":"def double_list(list_nums): for num in list_nums: print(num * 2) list_nums = [4, 6, 2, 8] double_list(list_nums)"},{"prompt":"Create an algorithm in Python to find the largest rectangular area in a histogram. heights = [2, 7, 9, 4, 1]","completion":"def maxArea(heights): max_area = 0 left = 0 right = len(heights) - 1 while left < right: h = min(heights[left], heights[right]) max_area = max(max_area, h * (right - left)) if heights[left] < heights[right]: left += 1 else: right -= 1 return max_area print(maxArea(heights)) # 8"},{"prompt":"Design an algorithm in Python that can sort a given array using the Bubble Sort technique. [5, 4, 3, 7, 1]","completion":"def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] arr = [5, 4, 3, 7, 1] bubble_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Create a Python program that calculates the total cost of goods based on their prices and quantity. Prices: [3, 5, 2, 1], Quantities: [2, 4, 3, 5]","completion":"def calculate_costs(prices, quantities): total = 0 for price, quantity in zip(prices, quantities): total += price * quantity return total prices = [3, 5, 2, 1] quantities = [2, 4, 3, 5] print(calculate_costs(prices, quantities))"},{"prompt":"Create a forloop in Python to print out all the characters in the string “Hello World!” Not applicable","completion":"myString = \\"Hello World!\\" for x in myString: print(x)"},{"prompt":"Generate a Python script to scrape a product page from an ecommerce website. URL: https://www.example.com/products/biggreenh","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/products/big-green-hat' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') product_title = soup.find('div', class_='product-title').text.strip() product_price = soup.find('span', class_='price').text.strip() product_description = soup.find('div', class_='product-description').text.strip() print('Product Title: ' + product_title) print('Product Price: ' + product_price) print('Product Description: ' + product_description)"},{"prompt":"Write a Python program to print the given list after removing even numbers from it. [3, 5, 7, 4, 8, 10]","completion":"list_odd = [] for num in [3, 5, 7, 4, 8, 10]: if num %2 != 0: list_odd.append(num) print(list_odd)"},{"prompt":"Create an automation script using Python and Selenium that does the following: navigate to a website, log in using an existing username and password, navigate to a settings page, and update an existing user profile photo. Username: user@example.com Password: 1234 New profile photo (image file): noinpu","completion":"from selenium import webdriver import time driver = webdriver.Chrome() # Navigate to website driver.get('http://example.com/') # Log in with existing username and password login_username = driver.find_element_by_name('username') login_username.send_keys('user@example.com') login_password = driver.find_element_by_name('password') login_password.send_keys('1234') login_btn = driver.find_element_by_class_name('login-btn') login_btn.click() # Navigate to settings page settings_btn = driver.find_element_by_id('settings-btn') settings_btn.click() # Update existing user profile photo photo_upload_btn = driver.find_element_by_class_name('upload-btn') photo_upload_btn.send_keys('/path/to/photo.jpg') save_btn = driver.find_element_by_class_name('save-btn') save_btn.click() time.sleep(2) driver.close()"},{"prompt":"Modify an existing Python program that implements a genetic algorithm for parameter optimization to add a new parameter. Not applicable","completion":"import random import numpy as np class GeneticAlgorithm: def __init__(self, desired_param1, desired_param2, desired_param3, desired_param4): self.desired_param1 = float(desired_param1) self.desired_param2 = float(desired_param2) self.desired_param3 = float(desired_param3) self.desired_param4 = float(desired_param4) def create_population(self, n, min_val, max_val): population = [] for _ in range(n): individuum = [] for _ in range(4): individuum.append(random.uniform(min_val, max_val)) individuum.append(self.calculate_fitness(individuum)) population.append(individuum) return np.array(population) def calculate_fitness(self, individual): return sum([abs(individual[i] - self.desired_param[i]) for i in range(4)]) ga = GeneticAlgorithm(1, 2, 3, 4) population = ga.create_population(n=20, min_val=-10, max_val=10) # Add a new parameter def new_calculate_fitness(self, individual): return sum([abs(individual[i] - self.desired_param[i]) + abs(individual[4] - self.desired_param[4]) for i in range(5)]) ga.calculate_fitness = new_calculate_fitness new_population = ga.create_population(n=20, min_val=-10, max_val=10)"},{"prompt":"Use Python to solve the following equation: y = x^2 x + 1","completion":"def solve_equation(x): return x**2 - x + 1"},{"prompt":"Create a python program that checks if a given array is sorted in ascending order array = [1, 5, 3, 9, 4]","completion":"def check_sorted(array): return all(array[i] <= array[i+1] for i in range(len(array)-1))"},{"prompt":"Construct an algorithm in Python to sort an array of integer in ascending order using the insertion sort method.","completion":"def insertion_sort(arr): for i in range(len(arr)): cursor = arr[i] pos = i while pos > 0 and arr[pos - 1] > cursor: # Swap the number down the list arr[pos] = arr[pos - 1] pos = pos - 1 # Break and do the final swap arr[pos] = cursor return arr"},{"prompt":"Develop a reinforcement learning solution in Python to balance a pole on a cart using OpenAI Gym. The environment consists of a 4 dimensional state space and 2 dimensional action space.","completion":"import gym import numpy as np # Initialize the environment env = gym.make('CartPole-v0') # Initialize the Q-Learning neural network num_states = env.observation_space.shape[0] num_actions = env.action_space.n Q = np.zeros([num_states, num_actions]) # Set training hyperparameters num_episodes = 500 discount_rate = 0.95 alpha = 0.1 # Train the neural network for i in range(num_episodes): # Reset the environment s = env.reset() total_reward = 0 # Iterate until episode is over done = False while not done: # Choose an action a = np.argmax(Q[s, :] + np.random.randn(1, env.action_space.n) * (1./(i+1))) # Get the reward and new state s1, reward, done, _ = env.step(a) # Update the Q-table Q[s, a] = Q[s, a] + alpha * (reward + discount_rate * np.max(Q[s1, :]) - Q[s, a]) total_reward += reward s = s1 # Print training progress print(\\"Episodes: {}/{}. Score: {}\\".format(i+1, num_episodes, total_reward))"},{"prompt":"Create a basic Machine Learning model in Python that uses regression to predict a house's sale price given some input features. Not applicable","completion":"import pandas as pd import numpy as np import sklearn from sklearn.model_selection import train_test_split from sklearn.metrics import mean_squared_error # Read dataset housing = pd.read_csv('housing.csv') # Define X and y X = housing.drop('SalePrice', axis=1) y = housing.SalePrice # Split into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Fit regression model reg = sklearn.linear_model.LinearRegression().fit(X_train, y_train) # Make predictions y_pred = reg.predict(X_test) # Calculate and print RMSE rmse = np.sqrt(mean_squared_error(y_test, y_pred)) print(rmse)"},{"prompt":"Create a Python program to translate a text from English to Spanish using Google Translate API.","completion":"import requests import json # API key API_KEY = \\"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\\" # API URL url = 'https://translation.googleapis.com/language/translate/v2?key=' + API_KEY # Text text = \\"Good morning!\\" # Language pair (English to Spanish) langpair = 'en|es' # Form data data = {'q': text, 'target': langpair} # Make HTTP request response = requests.post(url, data) # Parse JSON and get the translated text response_json = response.json() translation = response_json['data']['translations'][0]['translatedText'] # Print translation print(translation) # Morning!"},{"prompt":"Generate a python program to replace all occurrences of a pattern with a specified replacement. text = It was the best of times, it was the worst of times. pattern = times replacement = days","completion":"def replace_pattern(text, pattern, replacement): words = text.split() new_words = [] for word in words: if word == pattern: new_words.append(replacement) else: new_words.append(word) return \\" \\".join(new_words) # Call the function replace_pattern(text, pattern, replacement) # \\"It was the best of days, it was the worst of days.\\""},{"prompt":"Using Python, create an algorithm to count the number of vowels in a given string. String: Hello, World!","completion":"def countVowels(string): string = string.lower() count = 0 vowels = 'aeiou' for char in string: if char in vowels: count += 1 return count string = 'Hello, World!' vowelCount = countVowels(string) print(\\"Number of vowels is:\\", vowelCount)"},{"prompt":"Rewrite the following python code so that it can be run as a script. def my_function(): print(Hello, World!) if __name__ == '__main__': my_function()","completion":"def my_function(): print(\\"Hello, World!\\") if __name__ == '__main__': my_function() if __name__ == '__main__': my_function()"},{"prompt":"Create a program in Python to grade an essay. The student’s essay should be graded on a scale of 010, with 10 being the highest score.","completion":"def grade_essay(essay): score = 0 # Score based on content # Score based on grammar # Score based on spelling # Score based on punctuation # Score based on style # Final score should be in range of 0-10 if score < 0: score = 0 elif score > 10: score = 10 return score"},{"prompt":"Write a Python script that receives a string from the command line and prints out the string in reverse order. This is my string.","completion":"import sys input_string = sys.argv[1] print(input_string[::-1])"},{"prompt":"Create a Python program that shuffles the elements of an array. arr = [A, B, C, D]","completion":"import random def shuffleArray(arr): n = len(arr) for i in range(n-1, 0, -1): j = random.randint(0, i) arr[i], arr[j] = arr[j], arr[i] return arr arr = [\\"A\\", \\"B\\", \\"C\\", \\"D\\"] shuffleArray(arr) print(arr)"},{"prompt":"Create a Python class for a student which contains attributes for name, age, and gender, and methods for getting the student details and calculating the average age of all students. Not Applicable","completion":"class Student: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def get_details(self): print('Name:', self.name) print('Age:', self.age) print('Gender:', self.gender) @staticmethod def get_avg_age(students): total_age = 0 for student in students: total_age += student.age return total_age / len(students)"},{"prompt":"Develop a distributed system in Python that processes the execution of multiple commands in parallel. The system should be able to take the output of each command execution and store it in a database. Not applicable","completion":"import subprocess import threading import sqlite3 # Function responsible for executing commands def run_command(command_string): process = subprocess.Popen(command_string, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) stdout, stderr = process.communicate() return stdout,stderr # Function to store output of a command in a database def store_output(command_string,stdout, stderr): conn = sqlite3.connect('command.db') cursor = conn.cursor() try: cursor.execute(\\"INSERT INTO commands_output VALUES (?,?,?)\\" (command_string, stdout, stderr)) conn.commit() except: conn.rollback() conn.close() # Threading function for executing commands def thread_function(command): stdout, stderr = run_command(command) store_output(command,stdout, stderr) # Main function def main(): command_list = ['date','ls','find'] threads =[] for command in command_list: thread = threading.Thread(target= thread_function, args = (command,)) threads.append(thread) for x in threads: x.start() for x in threads: x.join() if __name__ == \\"__main__\\": main()"},{"prompt":"Create a Python function to convert a million seconds to days.","completion":"def million_seconds_to_days(seconds): return seconds/(60*60*24)"},{"prompt":"Generate a python program to simulate a simple dice game between two players. Player1: Alice Player2: Bob","completion":"import random # initialise the scores Alice_score = 0 Bob_score = 0 while (Alice_score < 10 and Bob_score < 10): # generate dice numbers for both players Alice_val = random.randint(1,6) Bob_val = random.randint(1,6) # check if Alice wins if Alice_val > Bob_val: Alice_score += 1 # check if Bob wins if Bob_val > Alice_val: Bob_score += 1 # print scores after the round print(\\"Alice: {0}, Bob: {1}\\".format(Alice_score, Bob_score)) if Alice_score == 10: print(\\"Alice wins!\\") elif Bob_score == 10: print(\\"Bob wins!\\")"},{"prompt":"Create a Python script that fills in the missing data with median values. [1, None, 4, 5, None, 10]","completion":"import numpy as np def fillWithMedian(data): data = np.array(data) median_val = np.nanmedian(data) data[np.isnan(data)] = median_val return data data = [1, None, 4, 5, None, 10] print(fillWithMedian(data))"},{"prompt":"Create a calculator program using Python.","completion":"def calculator(num1, num2, op): if op == '+': return num1 + num2 elif op == '-': return num1 - num2 elif op == '*': return num1 * num2 elif op == '/': return num1 / num2 else: return None"},{"prompt":"Create a linear regression model in Python, to predict housing prices based on the given features. Num Rooms: 5 Bathrooms: 1 Square Footage: 1500 Area: rural","completion":"import numpy as np import pandas as pd # Read the data data = pd.read_csv('data.csv') # Create the feature matrix X = data[['num_rooms', 'bathrooms', 'square_footage', 'area']] # Create the outcomes vector y = data['price'] # Fit the model from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(X, y) # Make predictions predicted_price = model.predict([[5, 1, 1500, 'rural']]) print(\\"Predicted price: {:,.2f}\\".format(predicted_price[0]))"},{"prompt":"Write a Python program to calculate the median of three given numbers. list_numbers = [3, 9, 11]","completion":"def get_median(list_numbers): # sort the list list_numbers.sort() # get the length of list length = len(list_numbers) # check for even or odd if length % 2 == 0: # get average of middle two number # when list is even median = (list_numbers[int(length / 2) - 1] + list_numbers[int(length / 2)]) / 2 else: # get the middle number # when list is odd median = list_numbers[int(length / 2)] return median list_numbers = [3, 9, 11] median = get_median(list_numbers) print(\\"The median of the given numbers is :\\", median)"},{"prompt":"Create a Python program to evaluate an arithmetic expression given as input. expression = 1 + 2 * 4","completion":"def evaluate(expression): expression = expression.replace(\\" \\", \\"\\") tokens = list(expression) a = tokens.pop(0) while len(tokens) > 0: op = tokens.pop(0) b = tokens.pop(0) if op == '+': a = int(a) + int(b) elif op == '-': a = int(a) - int(b) elif op == '*': a = int(a) * int(b) elif op == '/': a = int(a) / int(b) else: return False return a result = evaluate(expression) print(result)"},{"prompt":"Write a Python program to calculate the total amount of taxes to be paid by a customer for an online purchase. The input should include the cost of the item and the tax rate. Item cost: 700, Tax rate: 10%","completion":"def calculate_total_tax(cost, rate): \\"\\"\\"Calculate the total amount of taxes to be paid\\"\\"\\" tax = cost * rate/100 total = cost + tax return total total_amount = calculate_total_tax(700, 10) print(f\\"The total amount, including taxes, is {total_amount}\\") # 770"},{"prompt":"Given a list of words and a target word, can you generate a python code to find the minimum edit distance between the target word and all of the words in the list? list_of_words = [cat, hat, bed, kyoto, criminal, locket, lowest] target_word = copper","completion":"def minEditDistance(list_of_words, target_word): minDistance = float(\\"inf\\") for word in list_of_words: editDistance = 0 for i in range(min(len(word), len(target_word))): if word[i] != target_word[i]: editDistance += 1 editDistance += abs(len(word) - len(target_word)) if editDistance < minDistance: minDistance = editDistance return minDistance list_of_words = [\\"cat\\", \\"hat\\", \\"bed\\", \\"kyoto\\", \\"criminal\\", \\"locket\\", \\"lowest\\"] target_word = \\"copper\\" minDistance = minEditDistance(list_of_words, target_word) print(\\"Minimum Edit Distance: \\", minDistance)"},{"prompt":"Generate a Python program to find the longest common prefix string amongst an array of strings [coder, codger, coding, coffee]","completion":"def longestCommonPrefix(strs): if len(strs) == 0: return \\"\\" common_prefix = strs[0] for i in range(1, len(strs)): j = 0 match = False # compare the current string # with the previous string while j < len(common_prefix) and j < len(strs[i]): if common_prefix[j] != strs[i][j]: break j += 1 match = True # terminate if no match found if match: common_prefix = common_prefix[:j] else: return \\"\\" return common_prefix # Driver Code if __name__ == '__main__': arr = [\\"coder\\", \\"codger\\", \\"coding\\", \\"coffee\\"] print(longestCommonPrefix(arr))"},{"prompt":"Write a function in Python that encodes a string using a simple algorithm. Text string: Hello","completion":"def encodeString (text): encoded_string = '' for char in text: encoded_char = ord(char) + 3 encoded_string += chr(encoded_char) return encoded_string encodeString(\\"Hello\\") # khoor"},{"prompt":"Write a Python script to process the string This is a sample string. The script should remove all the duplicate consecutive words, without changing the order of words.","completion":"new_string = [] prev_word = '' for word in \\"This is a sample string\\".split(): if word != prev_word: new_string.append(word) prev_word = word print(' '.join(new_string))"},{"prompt":"Generate a Python class that represents a Rectangle and a Square. Not applicable","completion":"class Rectangle: def __init__(self, width, height): self.width = width self.height = height def get_area(self): return self.width * self.height class Square(Rectangle): def __init__(self, side_length): self.width = side_length self.height = side_length"},{"prompt":"Write a python program to generate the Cartesian product of a given list lst = [1, 2, 3]","completion":"def cartesian_product(lst): \\"\\"\\"Generate the Cartesian product of a given list Args: lst (list): list of elements Returns: list: the Cartesian product of the input list \\"\\"\\" res = [[i] for i in lst] for j in range(len(lst)): temp = [] for k in lst: for element in res[j]: temp.append(element + [k]) res.append(temp) return res[len(lst)]"},{"prompt":"Create an algorithm in Python to convert a binary number to its decimal equivalent. 1010101","completion":"def binaryToDecimal(binary): binary = str(binary) length = len(binary) decimal = 0 j = 0 for i in range(length-1, -1, -1): decimal += (2**j)*int(binary[i]) j += 1 return decimal binary_number = 1010101 decimal_number = binaryToDecimal(binary_number) print(decimal_number) # Output: 85"},{"prompt":"Create a python script to input a CSV and output an HTML report. Person,Age John,25 Bob,30 Jasmine,20","completion":"import csv #open csv with open('file.csv', 'r') as csv_file: csv_reader = csv.reader(csv_file) #write html with open('report.html', 'w') as html_file: html_file.write('<html><body><h1>People Report</h1>') html_file.write('<table>') #write table for person in csv_reader: html_file.write('<tr><td>' + person[0] + '</td><td>' + person[1] + '</td></tr>') html_file.write('</table></body></html>')"},{"prompt":"Develop a Python function to calculate the mean of an array of numbers. data = [1, 4, 6]","completion":"# Python Function to calculate mean def calculateMean(data): sum = 0 # calculating sum for e in data: sum += e # calculating mean mean = sum / len(data) return mean # Driver code data = [1, 4, 6] mean = calculateMean(data) print(\\"Mean of given data is:\\", mean)"},{"prompt":"dle exceptions in Python program while fetching data from a web API and display a message. Not applicable","completion":"import urllib.request import json try: response = urllib.request.urlopen('http://example.com/api') data = json.loads(response.read().decode('utf-8')) except urllib.request.HTTPError as e: print(\\"Error: \\", e.code) except urllib.request.URLError as e: print(\\"Error: \\", e.reason) except: print(\\"An unknown error occurred\\")"},{"prompt":"Develop a Python algorithm to generate a Fibonacci sequence.","completion":"def generateFibonacciSequence(length): sequence = [1, 1] for i in range(2, length): sequence.append( sequence[i-1] + sequence[i-2] ) return sequence print(generateFibonacciSequence(10))"},{"prompt":"Create a Python script that generates a random password. Not applicable","completion":"import random import string def generate_password(): characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(characters) for _ in range(15)) return password print(generate_password())"},{"prompt":"Write a python code to extract the phone number and email address from a provided string txt =John Smith5551234, john.s@example.com","completion":"import re txt =\\"John Smith-555-1234, john.s@example.com\\" # Phone Number phone = re.findall(r'd{3}-d{4}', txt)[0] print(\\"Phone Number =\\", phone) # Email Address email = re.findall(r'S+@S+', txt)[0] print(\\"Email Address =\\", email)"},{"prompt":"Write a python program to print out the sum of numbers up to an inputted number.","completion":"def sum_up(n): sum = 0 for i in range(n + 1): sum += i return sum num = int(input(\\"Enter a number: \\")) print(\\"Sum of numbers up to\\", num, \\"is\\", sum_up(num))"},{"prompt":"Generate a Python function that takes two strings as arguments and returns a sorted version of the strings.","completion":"def sort_strings(str1, str2): str1 = sorted(str1) str2 = sorted(str2) return str1, str2"},{"prompt":"Generate a Python program that prints out the highest prime factor for each integer between 1 and 10. Not applicable","completion":"def prime_factor(n): i = 2 while i * i <= n: if n % i: i += 1 else: n //= i return n for num in range(1, 11): factor = prime_factor(num) print(f\\"The highest prime factor of {num} is {factor}\\")"},{"prompt":"Write a Python program to input a list of integers and remove any duplicate values. my_list = [1, 3, 3, 5, 6, 6, 9]","completion":"def remove_duplicates(my_list): unique_list = [] for i in my_list: if i not in unique_list: unique_list.append(i) return unique_list"},{"prompt":"Construct a Python program that implements a game of RockPaperScissors.","completion":"import random # define the possible inputs possible_inputs = ['rock', 'paper', 'scissors'] # print intro message print('Welcome to Rock, Paper, Scissors!') # get input from user user_input = input('Choose Rock, Paper, or Scissors: ').lower() # check the input if user_input not in possible_inputs: print('Error: Invalid input. Please choose either Rock, Paper, or Scissors.') exit() # generate computer's input computer_input = random.choice(possible_inputs) # print results print('You chose {} and the computer chose {}.'.format(user_input, computer_input)) # determine winner if user_input == computer_input: print('It's a tie!') elif (user_input == 'rock' and computer_input == 'scissors') or (user_input == 'paper' and computer_input == 'rock') or (user_input == 'scissors' and computer_input == 'paper'): print('You win!') else: print('You lose!')"},{"prompt":"Can you implement a Python algorithm that takes two strings as input, and determines the edit distance between them? str1: kitten, str2: sitting","completion":"def editDistance(str1, str2): m = len(str1) n = len(str2) dp = [[0 for x in range(n+1)] for x in range(m+1)] for i in range(m+1): for j in range(n+1): if i == 0: dp[i][j] = j elif j == 0: dp[i][j] = i elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] else: dp[i][j] = 1 + min(dp[i][j-1], # Insert dp[i-1][j], # Remove dp[i-1][j-1]) # Replace return dp[m][n]"},{"prompt":"Write a Python program to replace all the vowels in a string with '#'.","completion":"def replace_vowels(input_string): output_string = \\"\\" vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'] for char in input_string: if char in vowels: output_string += '#' else: output_string += char return output_string input_string = \\"Hello, I am a string.\\" output_string = replace_vowels(input_string) print(output_string)"},{"prompt":"Create a Python program that outputs the sum of all the elements in a given array. [3, 5, 6]","completion":"def sum_of_array(arr): result = 0 for x in arr: result += x return result sum = sum_of_array([3, 5, 6]) print(sum)"},{"prompt":"Write a Python program to print out the restults of a list of functions functions = [max, min, sum] list = [1,2,3,4,5]","completion":"def print_results(functions, list): for func in functions: print(func.__name__ + \\": \\" + str(func(list))) print_results(functions, list)"},{"prompt":"Create a sentiment analysis web application, using Python.' Not applicable","completion":"import flask from flask import request, jsonify from textblob import TextBlob #Initialize the Flask App app = flask.Flask(__name__) app.config[\\"DEBUG\\"] = True #Create a route for the web application @app.route('/', methods=['GET']) def home(): return '<h1> Sentiment Analysis Web Application </h1>' #Create a route for the API @app.route('/api/v1/sentiment', methods=['GET']) def sentiment(): #Get the text text = request.args.get('text') if text is None: return jsonify({'error': 'no text received'}) #Create a TextBlob from the text sentiment = TextBlob(text).sentiment #Return the sentiment as JSON return jsonify({'polarity': sentiment.polarity, 'subjectivity': sentiment.subjectivity}) app.run()"},{"prompt":"Generate a random password using Python.","completion":"import random password_characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#%^&*().,?0123456789' def generate_password(length): return ''.join(random.choices(password_characters, k=length)) print(generate_password(10))"},{"prompt":"Create a Python program to convert imperial length units to metric length units. 5 inche","completion":"\\"\\"\\" Imperial to Metric conversion program. \\"\\"\\" def inches_to_cm(inches): return inches * 2.54 if __name__ == '__main__': print(inches_to_cm(5))"},{"prompt":"Write a Python program to convert a list of numbers into a single number by subtracting the sum of all numbers in the list from the first element. list1 = [5, 3, 2, 1]","completion":"def list_to_number(list1): result = list1[0] for i in range(1, len(list1)): result -= list1[i] return result"},{"prompt":"Create a python class that stores a name and address.","completion":"class Person: def __init__(self, name, address): self.name = name self.address = address def get_name(self): return self.name def get_address(self): return self.address def set_name(self, name): self.name = name def set_address(self, address): self.address = address"},{"prompt":"Create a Python program to calculate the area of a circle, given the radius.","completion":"import math def area_circumference(radius): area = math.pi * radius ** 2 return area"},{"prompt":"Generate a python algorithm to predict the stock price for the given company. Company: Tesl","completion":"def predict_price(company): # Call an appropriate API company_data = request_api(company) # Use an appropriate ML algorithm model = build_model(company_data) # Get the prediction prediction = model.predict() return prediction"},{"prompt":"Once given an input string, write an algorithm in Python to find the largest palindrome in the string. This is an example","completion":"def longest_palindrome(string): longest_palindrome = \\"\\" for i in range(len(string) - 1): for j in range(i+1, len(string)): substring = string[i:j+1] if substring == substring[::-1] and len(substring) > len(longest_palindrome): longest_palindrome = substring return longest_palindrome print(longest_palindrome(\\"This is an example\\")) # prints \\"a racecar a\\""},{"prompt":"Develop a dynamic programming approach to solve the 0/1 knapsack problem.","completion":"# A Dynamic Programming based Python Program for 0-1 Knapsack problem # Returns the maximum value that can be put in a knapsack of capacity W def knapsack(W, wt, val, n): # Base Case if n == 0 or W == 0 : return 0 # If weight of the nth item is more than Knapsack of capacity W, then # this item cannot be included in the optimal solution if (wt[n-1] > W): return knapsack(W, wt, val, n-1) # Return the maximum of two cases: # (1) nth item included # (2) not included else: return max(val[n-1] + knapsack(W-wt[n-1], wt, val, n-1), knapsack(W, wt, val, n-1))"},{"prompt":"Create a Python program to group elements of a list based on their length. ['cat', 'dog', 'apple']","completion":"def groupByLength(arr): result = {} for word in arr: if len(word) in result: result[len(word)].append(word) else: result[len(word)] = [word] return result groupedByLength = groupByLength(['cat', 'dog', 'apple']) print(groupedByLength)"},{"prompt":"Using Python, make a program which will generate a random password of a given length. 7","completion":"import string import random def get_password(length): alphabet = string.ascii_letters + string.digits password = ''.join(random.choice(alphabet) for i in range(length)) print (password) get_password(7)"},{"prompt":"Generate an algorithm for printing all combinations of a given text. text = Hello","completion":"# Python program to print # all combinations of # given length def combinations(text, length): # Get all possible characters Alphabet = list(text) # Create a temp array temp = [0] * length # Print all combinations for i in range(length): for j in range(len(Alphabet)): temp[i] = Alphabet[j] print(temp) # Driver Code if __name__ == \\"__main__\\": combinations(\\"Hello\\", 3)"},{"prompt":"Generate a program in Python to count the number of times a substring appears in a string? str=The quick brown fox jumps over the lazy dog., substr=the","completion":"def countSubstrings(str, subStr): lengthSubStr = len(subStr) count = 0 for i in range(len(str)): if str[i:i+lengthSubStr] == subStr: count += 1 return count str = \\"The quick brown fox jumps over the lazy dog.\\" substr = \\"the\\" print(countSubstrings(str, substr))"},{"prompt":"Create a Python script that generate prime numbers up to a given number.","completion":"def primeNumberGenerator(n): prime = [True for _ in range(n+1)] prime[0] = False prime[1] = False for p in range(2, n+1): if prime[p] == True: for i in range(2*p, n+1, p): prime[i] = False prime_nums = [] for i in range(n+1): if prime[i] == True: prime_nums.append(i) return prime_nums prime_nums = primeNumberGenerator(100); console.log(prime_nums);"},{"prompt":"Create a Python class to represent a 2D Point that contains an xcoordinate and ycoordinate. Not applicable","completion":"class Point: def __init__(self, x, y): self.x = x self.y = y def get_x(self): return self.x def get_y(self): return self.y"},{"prompt":"Create an optimization algorithm to minimize a cost function.","completion":"# Python code to implement # the Gradient Descent algorithm def gradientDescent(x, y, learning_rate, max_iterations): m_curr = b_curr = 0 n = len(x) cost_previous = 0 cost_present = 0 iteration = 0 while iteration < max_iterations: y_predicted = m_curr * x + b_curr cost_present = (1/n) * sum([val**2 for val in (y-y_predicted)]) md = -(2/n)*sum(x*(y-y_predicted)) bd = -(2/n)*sum(y-y_predicted) m_curr = m_curr - learning_rate * md b_curr = b_curr - learning_rate * bd iteration = iteration + 1 cost_previous = cost_present return m_curr, b_curr, cost_previous"},{"prompt":"Write a Python student management system to allow teachers to add, update and delete students.","completion":"class Student: def __init__(self, name, age, gender, course, contact_details): self.name = name self.age = age self.gender = gender self.course = course self.contact_details = contact_details self.email, self.phone = self.contact_details.split(\\"-\\") def add_student(self): # add the student details to database pass def update_student(self): # update the student details in database pass def delete_student(self): # delete the student entry from database pass"},{"prompt":"Write a Python program to generate a list containing all permutations of the characters of a given string. string = 'ABC'","completion":"from itertools import permutations def generate_permutations(string): return list(permutations(string)) string = 'ABC' print(generate_permutations(string)) # Output: [('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]"},{"prompt":"Write a Python function to generate the Fibonacci series till nth term.","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b result = Fibonacci(7) print(result)"},{"prompt":"Create a Python module that provides a way to add two numbers and a way to subtract two numbers.","completion":"def add(x, y): return x + y def subtract(x, y): return x - y"},{"prompt":"Write a Python program to search for a given number in a sorted list using binary search [1, 2, 4, 8, 16, 32]","completion":"def binary_search(lst, num): start = 0 end = len(lst) - 1 while start <= end: mid = (start + end)//2 if lst[mid] == num: return mid elif lst[mid] > num: end = mid - 1 else: start = mid + 1 return -1"},{"prompt":"Write a python function to reverse the words in a given sentence. sentence = hello world how are you","completion":"def reverseWords(sentence): words = sentence.split(' ') words = words[::-1] return ' '.join(words) print(reverseWords(sentence))"},{"prompt":"Create a Python dictionary to store the number of occurrences of each character of the given string. String = “abracadabra”","completion":"str_dict = {i:list(str).count(i) for i in set(str)}"},{"prompt":"Using an HTTP library in Python (e.g. Requests), make a POST request and send a JSON payload to a web service. const url = 'https://example.com/api/submit'; const data = { message: 'Hello!', name: 'John' };","completion":"import requests url = 'https://example.com/api/submit' data = {'message': 'Hello!', 'name': 'John' } r = requests.post(url, json=data) print(r.text)"},{"prompt":"Create a Python script that sends an email notification when the server is under heavy load.","completion":"import smtplib # Functions for getting the server load def get_load_average(): with open('/proc/loadavg', 'r') as f: return float(f.readline().split()[0]) # Variable to store the upper threshold for server loading MAX_LOAD = 0.8 # Get the current load current_load = get_load_average() if current_load > MAX_LOAD: # Create SMTP object server = smtplib.SMTP('smtp.example.com', 587) server.starttls() receiver = 'admin@example.com' message = 'Server is under heavy load: ' + str(current_load) server.sendmail('monitor@example.com', receiver, message) server.quit()"},{"prompt":"Build a Python program to decrypt a given secret code.","completion":"def decrypt(code): # create a shift list shift_list = [1, 3, 5, 7, 9, 11] # empty list to store decoded message decoded_message = '' # iterate over characters in the secret code for char in code: # store character's ASCII value in a variable char_ascii_value = ord(char) # shift list index for correct decryption shift_index = 0 # loop until incorrect shift index while char_ascii_value // len(shift_list) > 0: char_ascii_value -= len(shift_list) shift_index += 1 # decryption decrypted_char_ascii_value = char_ascii_value - shift_list[shift_index] # add decrypted character to the decoded message decoded_message += chr(decrypted_char_ascii_value) # return decoded message return decoded_message secret_code = '§ ¢ °°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°' print(decrypt(secret_code))"},{"prompt":"Create an algorithm in Python to find the sum of the first n prime numbers n = 10","completion":"def sum_of_primes(n): if n < 2: return 0 primes = [2] num = 3 while len(primes) < n: is_prime = True for p in primes: if num % p == 0: is_prime = False break if is_prime: primes.append(num) num += 2 return sum(primes) print(sum_of_primes(10))"},{"prompt":"Generate a classifier in Python using the Random Forest algorithm. Features: Weight, Size Label: Type","completion":"from sklearn.ensemble import RandomForestClassifier X = [[Weight, Size]] y = [Type] model = RandomForestClassifier(random_state=0) model.fit(X, y)"},{"prompt":"Given two unsorted lists, create a Python program to identify the common elements between them. list1 = [5, 3, 2, 6, 8, 9] list2 = [4, 2, 1, 6, 7]","completion":"def common_elements(list1, list2): return [element for element in list1 if element in list2] common_elements(list1, list2) # Output: [2, 6]"},{"prompt":"Write a Python program to generate a SQL query for selecting rows that contain a given value in a given column. Column name: age Value: 25","completion":"SELECT * FROM table_name WHERE age=25;"},{"prompt":"Create a function in Python to calculate the area of a triangle given its base and height.","completion":"def triangle_area(base, height): return (base * height) / 2"},{"prompt":"Create a function in Python that prints all prime numbers from 1 to 100.","completion":"def print_primes(): for num in range(1, 101): for i in range(2, num): if (num % i) == 0: break else: print(num) print_primes()"},{"prompt":"Construct an algorithm in Python to find the top three numbers in a list. [10, 8, 3, 11, 7, 14, 13]","completion":"def top_three(lst): sorted_lst = sorted(lst, reverse=True) return sorted_lst[:3] print(top_three([10, 8, 3, 11, 7, 14, 13]))"},{"prompt":"Write a Python script to parse and extract a list of names from a provided sentence. Joe, Mary, and Jake","completion":"names = [] sentence = \\"Joe, Mary, and Jake\\" words = sentence.split() for word in words: if word.endswith(','): names.append(word[:-1]) elif word.startswith('and'): names.append(word[4:]) else: names.append(word) print(names) # Output: ['Joe', 'Mary', 'Jake']"},{"prompt":"Build a classifier to predict if a flower is a lily or a rose using Python. The input dataset consists of 6 attributes: color, petal length, petal width, sepal length, sepal width, and species.","completion":"class FlowerClassifier: def __init__(self): self.features = [\\"color\\",\\"petal length\\", \\"petal width\\", \\"sepal length\\", \\"sepal width\\"] self.labels = [\\"lily\\", \\"rose\\"] def fit(self, X, y): self.model = SVC( gamma='auto') X_train = X[self.features] y_train = y self.model.fit(X_train, y_train) def predict(self, X): X_test = X[self.features] prediction = self.model.predict(X_test) return prediction"},{"prompt":"Write an algorithm in Python that prints all the combinations of a given string. str = abc","completion":"def printAllCombinations(str): l = list(str) n = len(l) i = 0 while (i < n): for j in range(i,n): t = l[i] l[i] = l[j] l[j] = t for x in l: print (x, end = \\"\\") print(\\"\\") i += 1 # Driver Code if __name__ == \\"__main__\\": str = \\"abc\\" printAllCombinations(str)"},{"prompt":"Develop a function to calculate the area of a circle using Python. None","completion":"def circle_area(radius): \\"\\"\\" This function will calculate the area of a circle using the radius provided. \\"\\"\\" return math.pi * radius**2"},{"prompt":"Write a Python script to solve a partial differential equation.","completion":"import numpy as np import scipy.special from scipy.integrate import ode def pde_solve(u0, t0, t1, dt): # Define the right-hand side def f(t, u, args): dudt = args*u return dudt # Create the solver solver = ode(f).set_integrator('dopri5', method='adams') solver.set_initial_value(u0, t0).set_f_params(args) # Solve the equation t = t0 u = u0 while solver.successful() and solver.t < t1: u = solver.integrate(solver.t + dt) t = solver.t return u"},{"prompt":"Generate code for rounding a given number to the nearest integer in Python. Number: 2.6","completion":"def round_nearest_int(num): return round(num) result = round_nearest_int(2.6) print(result)"},{"prompt":"Develop a Python program that determines if two strings passed as arguments are anagrams. string 1 = silent string 2 = listen","completion":"def is_anagram(str1, str2): str1_char_count = {} str2_char_count = {} for c in str1: if c in str1_char_count: str1_char_count[c] += 1 else: str1_char_count[c] = 1 for c in str2: if c in str2_char_count: str2_char_count[c] += 1 else: str2_char_count[c] = 1 return str1_char_count == str2_char_count string1 = \\"silent\\" string2 = \\"listen\\" print(is_anagram(string1, string2)) # should log True"},{"prompt":"Create a python program to find the fibonacci series up to nth number. 8","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 fib = [0, 1] for i in range(2, n + 1): fib.append(fib[i - 1] + fib[i - 2]) return fib[-1] result = fibonacci(8) print(result) # 13"},{"prompt":"Create a Python program to track the progress of a task over time. The program should take in a task name, start date, and end date. It should calculate the number of days remaining until the task is due and print the current task progress. Task = Build a mobile application Start Date = 1/1/2020 End Date = 1/31/2020","completion":"from datetime import date, timedelta task_name = \\"Build a mobile application\\" start_date = date(2020, 1, 1) end_date = date(2020, 1, 31) days_remaining = (end_date - date.today()).days progress = (days_remaining / (end_date - start_date).days) * 100 print(f'Progress on {task_name} is {progress:.2f}%')"},{"prompt":"Generate code to build a face detection API in Python using OpenCV. Not applicable","completion":"import cv2 def detect_face(image_path): cascPath = './haarcascade_frontalface_default.xml' faceCascade = cv2.CascadeClassifier(cascPath) img = cv2.imread(image_path) gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) faces = faceCascade.detectMultiScale( gray, scaleFactor=1.2, minNeighbors=5 ) for (x, y, w, h) in faces: cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2) cv2.imshow(\\"Faces found\\", img) cv2.waitKey(0)"},{"prompt":"Create a Python program to encode a given string using the the SHA256 encryption algorithm.","completion":"import hashlib def encode_string_sha256(string): return hashlib.sha256(string.encode('utf-8')).hexdigest()"},{"prompt":"Create a Python program to scrape a website automatically. The program should be able to take any url and crawl it to extract all the content and store it in a structured format like CSV or JSON. https://example.com","completion":"import requests from bs4 import BeautifulSoup import json url = 'https://example.com' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') data = [] for item in soup.find_all('div', {'class': 'item'}): title = item.find('h3').text.strip() description = item.find('p').text.strip() url = item.find('a')['href'] data.append({ 'title': title, 'description': description, 'url': url }) with open('data.json','w') as f: json.dump(data, f, indent=4)"},{"prompt":"Create a Python program to calculate the maximum sum of numbers in an array while avoiding an index. [3,2,5,1,6], forbidden index = 2","completion":"def max_sum(arr, forbidden_idx): max_sum = 0 # Calculate the max sum without the forbidden index for i in range(len(arr)): if i == forbidden_idx: continue max_sum += arr[i] # Calculate the max sum with the forbidden index for i in range(len(arr)): if i == forbidden_idx: continue new_sum = max_sum - arr[i] + arr[forbidden_idx] if new_sum > max_sum: max_sum = new_sum return max_sum # Test code max_sum([3,2,5,1,6], 2) # Output: 12"},{"prompt":"Create a Python program to prompt the user for a number and print out the corresponding Fibonacci sequence. Not applicable","completion":"def Fibonacci(n): fibonacci_list = [0,1] for i in range(2,n): next = fibonacci_list[i-1] + fibonacci_list[i-2] fibonacci_list.append(next) return fibonacci_list[n-1] num = int(input('Input a number: ')) print(\\"The corresponding Fibonacci sequence is: \\", Fibonacci(num))"},{"prompt":"Write a web scraper in Python that collects job postings from an online job search website. Not applicable","completion":"import requests from bs4 import BeautifulSoup def scraper(url): response = requests.get(url) html = response.content soup = BeautifulSoup(html, 'lxml') job_links = soup.find_all('h2', class_='job-title') jobs = [] for job_link in job_links: job_url = job_link.find('a')['href'] job_title = job_link.find('a').text job_id = job_url[job_url.rfind('/') + 1:] job = { 'title': job_title, 'url': job_url, 'id': job_id } jobs.append(job) return jobs url = 'https://www.example.com/jobs' jobs = scraper(url)"},{"prompt":"Write a function in Python to return the kth smallest element in the given array. arr = [7, 10, 4, 3, 20, 15] k=3","completion":"def find_kth_smallest(arr, k): \\"\\"\\" This function finds the kth smallest element in an array. :param arr: array of integers :param k: integer :return: kth smallest element \\"\\"\\" sorted_arr = sorted(arr) return sorted_arr[k-1]"},{"prompt":"Generate a python program to parse a string and extract the number of vowels. Input string: “Hello World!","completion":"def count_vowels(s): vowels = [\\"a\\", \\"e\\", \\"i\\" , \\"o\\", \\"u\\"] count = 0 for character in s.lower(): if character in vowels: count += 1 print(\\"Number of vowels :\\", count)"},{"prompt":"Create an application in Python that takes a list of numbers as input and returns a list with each number multiplied by 2 [1,2,3,4,5]","completion":"def times_two(list): \\"\\"\\" Takes a list of numbers and returns a list with each number multiplied by 2 Parameters: list (list): The list of numbers Returns: result (list): The list with each number multiplied by 2 \\"\\"\\" result = [] for num in list: result.append(num * 2) return result print(times_two([1,2,3,4,5])) // [2,4,6,8,10]"},{"prompt":"Write a Python script for displaying the current time in 12hour format.","completion":"import datetime current_time = datetime.datetime.now() print('Current Time in 12-hour format :', current_time.strftime(\\"%I:%M %p\\"))"},{"prompt":"Create a Python REST API endpoint that accepts a POST request with data in JSON format and prints the data on the console. Not applicable","completion":"from flask import Flask, request app = Flask(name) @app.route('/api', methods=['POST']) def post_data(): data = request.get_json() print(data) return 'Data printed in console' if name == 'main': app.run(debug=True)"},{"prompt":"Using the Python language, complete a binary search algorithm to search for a target item in a given list. target = 4 list = [1,2,3,4,5,6,7]","completion":"# Binary Search def binary_search(list, target): low = 0 high = len(list) - 1 while low <= high: mid = (low + high) // 2 if list[mid] == target: return mid elif list[mid] > target: high = mid - 1 else: low = mid + 1 return -1 # Test array list = [1,2,3,4,5,6,7] target = 4 # Function Call result = binary_search(list, target) if result != -1: print(\\"Element is present at index\\", str(result)) else: print(\\"Element is not present in array\\")"},{"prompt":"Create a Python program to reverse the character order in a given string.","completion":"def reverse_string(s): reversed_string = ''.join(reversed(s)) return reversed_string string = 'Hello World!' reversed_string = reverse_string(string) print(reversed_string)"},{"prompt":"Generate a Python class for a basic ToDo list app. The class should have four methods – print, add, edit and delete. Not applicable","completion":"class ToDoList: def __init__(self): self.tasks = [] def print(self): for i in range(len(self.tasks)): print(f'{i+1}. {self.tasks[i]}') def add(self, task): self.tasks.append(task) def edit(self, index, new_task): self.tasks[index] = new_task def delete(self, index): del self.tasks[index]"},{"prompt":"Write a Python program to create a program to compare two lists of numbers. list_a = [1, 2, 3] list_b = [2, 3, 4]","completion":"def compare_lists(list_a, list_b): a_not_in_b = [] b_not_in_a = [] for a in list_a: if a not in list_b: a_not_in_b.append(a) for b in list_b: if b not in list_a: b_not_in_a.append(b) return a_not_in_b, b_not_in_a"},{"prompt":"Construct a Python script that deletes all the characters in a given string except for the vowels. Hello World!","completion":"# Get the input string string = \\"Hello World!\\" # Modify the string vowels = \\"aeiou\\" new_string = \\"\\" for char in string: if char in vowels: new_string += char # Print the string print(new_string) # prints \\"eoo\\""},{"prompt":"Generate Python code to evaluate a mathematical expression containing parentheses, addition and subtraction operations and numbers from 09. 2(83)","completion":"def evaluate_expr(expr): # Reverse the expression expr = expr[::-1] # Stack to store integer values. values = [] # Stack to store operators. ops = [] # Traverse the given expression. i = 0 while i < len(expr): # Current character is a whitespace, skip it. if expr[i] == ' ': i += 1 continue # Current character is an opening # brace, push it to 'ops' elif expr[i] == '(': ops.append(expr[i]) # Current character is a number, push # it to stack for numbers. elif expr[i].isdigit(): val = 0 # There may be more than one # digits in number. while (i < len(expr) and expr[i].isdigit()): val = (val * 10) + int(expr[i]) i += 1 values.append(val) # Closing brace encountered, solve # entire brace. elif expr[i] == ')': while (not ops[-1] == '('): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(str(eval(val1 + op + val2))) # pop opening bracket. ops.pop() # Current character is an operator. else: # While top of 'ops' has same or # greater precedence to current # token, which is an operator. # Apply operator on top of 'ops' # to top two elements in values stack. while(len(ops) != 0 and not ops[-1] == '(' and not isHigherPrecedence(ops[-1], expr[i])): val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(str(eval(val1 + op + val2))) # Push current token to 'ops'. ops.append(expr[i]); i += 1 # Entire expression has been parsed at this # point, apply remaining ops to remaining # values. while len(ops) != 0: val2 = values.pop() val1 = values.pop() op = ops.pop() values.append(str(eval(val1 + op + val2))) # Top of 'values' contains result, return it. return values[-1] def isHigherPrecedence(op1, op2): if (op1 == '+' or op1 == '-') and (op2 == '*' or op2 == '/'): return False else: return True if __name__ == \\"__main__\\": expr = \\"2-(8-3)\\" print(evaluate_expr(expr))"},{"prompt":"Create a basic Python program that takes a sentence with multiple words as input and generates a list of tuples with the word and its frequency. sentence = 'the the quick brown fox jumps over the lazy dog'","completion":"sentence_list = sentence.split(' ') res = [] for word in sentence_list: res.append((word, sentence_list.count(word))) # remove duplicates res = set(res) print(list(res)) # [(‘lazy’, 1), (‘dog’, 1), (‘brown’, 1), (‘jumps’, 1), (‘quick’, 1), (‘the’, 2), (‘over’, 1), (‘fox’, 1)]"},{"prompt":"Write a Python program to check whether a given year is a leap year or not. Year: 2020","completion":"\\"\\"\\" Write a Python program to check whether a given year is a leap year or not \\"\\"\\" # Function to check leap year def is_leap_year(year): leap = False # Write condition for the leap year if year % 4 == 0: if year % 100 == 0: if year % 400 == 0: leap = True else: leap = False else: leap = True return leap # main if __name__ == \\"__main__\\": year = 2020 leap = is_leap_year(year) if leap: print(year, \\" is a leap year\\") else: print(year, \\" is not a leap year\\")"},{"prompt":"Compose a method in Python to separate a given string using a delimiter.","completion":"def split_str(string, delimeter): return string.split(delimeter)"},{"prompt":"Create a Python program that takes input from the user and prints out the reversed string.","completion":"user_input = input('Enter a string: ') rev_string = user_input[::-1] print(f\\"The reversed string is: {rev_string}\\")"},{"prompt":"Design a Python program to detect the sentiment (i.e. positive, negative, or neutral) of a given sentence. The food was great and the service was excellent.","completion":"def sentiment_analysis(sentence): \\"\\"\\"Detects the sentiment of a given sentence. Args: sentence (string): The sentence to analyze. Returns: str: The sentiment of the given sentence (positive, neutral, or negative). \\"\\"\\" # Lib imports import textblob blob = textblob.TextBlob(sentence) sentiment = blob.sentiment.polarity if sentiment < 0.0: return 'Negative' elif sentiment == 0.0: return 'Neutral' else: return 'Positive' sentiment = sentiment_analysis('The food was great and the service was excellent.') print(sentiment) # Positive"},{"prompt":"Create a program in Python that takes a positive integer of arbitrary size and checks if it is a prime number.","completion":"def is_prime(num): if num > 1: for i in range(2, num): if (num % i) == 0: return False else: return False return True"},{"prompt":"Design a program in python to generate a random string consisting of only lowercase az characters.","completion":"import random import string def generate_random_string(): return ''.join(random.choices(string.ascii_lowercase, k=10)) print(generate_random_string())"},{"prompt":"Write a Python function to find the maximum profit when given a list of stock prices per day. stock_prices = [7, 1, 5, 3, 6, 4]","completion":"def max_profit(stock_prices): max_profit = 0 for i in range(len(stock_prices) - 1): for j in range(i + 1, len(stock_prices)): if stock_prices[j] - stock_prices[i] > max_profit: max_profit = stock_prices[j] - stock_prices[i] return max_profit if __name__ == \\"__main__\\": stock_prices = [7, 1, 5, 3, 6, 4] result = max_profit(stock_prices) print(result)"},{"prompt":"Create a Python program that generates a histogram from a list of integers.","completion":"import matplotlib.pyplot as plt def plot_histogram(data): plt.hist(data) plt.title(\\"Histogram\\") plt.xlabel(\\"Values\\") plt.ylabel(\\"Frequency\\") plt.show() if __name__ == \\"__main__\\": data = [1, 2, 5, 7, 9, 4, 5, 9, 10, 12] plot_histogram(data)"},{"prompt":"Create a function in Python to replace all spaces in a given string with an underscore. The quick brown fox","completion":"def replace_space(string): return string.replace(\\" \\", \\"_\\") replace_space(\\"The quick brown fox\\") # Outputs: The_quick_brown_fox"},{"prompt":"Create a Python program to display a Pandas dataframe sorted by its index in descending order.","completion":"import pandas as pd # Create a dataframe dataframe = pd.DataFrame(data={'Value': [1, 2, 3, 4, 5]}, index=[5, 4, 3, 2, 1]) # Print the dataframe sorted by its index in descending order print(dataframe.sort_index(ascending=False))"},{"prompt":"Create a function in Python that takes a list of strings and replaces each string with its length. [apple, banana, mango]","completion":"def length_strings(string_list): new_list = [] for string in string_list: new_list.append(len(string)) return new_list print(length_strings([\\"apple\\", \\"banana\\", \\"mango\\"])) # [5, 6, 5]"},{"prompt":"Given a string, write a Python program to remove all punctuation from the string. The quick brown fox jumps over the lazy dog.","completion":"import string def remove_punctuation(text): return text.translate(str.maketrans('', '', string.punctuation)) print(remove_punctuation(\\"The quick brown fox jumps over the lazy dog.\\")) # output: The quick brown fox jumps over the lazy dog"},{"prompt":"Create a lists of objects using Python based on a provided list of identifiers. Identifiers: ['a', 'b', 'c']","completion":"objects = [ {'name': 'a', 'value': None}, {'name': 'b', 'value': None}, {'name': 'c', 'value': None} ]"},{"prompt":"Design a stack class in Python with methods to push and pop data.","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def isEmpty(self): return self.items == []"},{"prompt":"Create a Python script for sorting a list of integers. The list should be sorted with the selection sort algorithm. [5, 7, 2, 9, 3]","completion":"def selection_sort(arr): n = len(arr) for i in range(n): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, n): if arr[min_idx] > arr[j]: min_idx = j # Swap the found minimum element with # the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] # Driver code to test above arr = [5, 7, -2, 9, 3] selection_sort(arr) print (\\"Sorted array\\") for i in range(len(arr)): print(\\"%d\\" %arr[i])"},{"prompt":"Write a Python function that takes a string and an integer as an argument and returns a string containing the string repeated the specified number of times. Hello!, 3","completion":"def repeat_string(string, num_times): return string*num_times result = repeat_string(\\"Hello!\\", 3) print(result)"},{"prompt":"Explain the concept of lists and dictionaries in Python.","completion":"Lists in Python are sequences of different data types that are ordered and mutable. They allow us to store multiple items in a single variable. Dictionaries are unordered sets of key-value pairs that are used for storing data. Keys must be unique and of immutable data type whereas values may not be. Dictionaries are used for mapping purposes and can be used for more powerful data access."},{"prompt":"Create Python code for a basic Hangman game. Not applicable","completion":"import random def hangman(word): guesses = 0 guessed_letters = \\"\\" chances = 5 while chances > 0: chance = True for letter in word: if letter in guessed_letters: print(letter, end=' ') else: print('_', end=' ') chance = False if chance: print('You won!') break guess_letter = input('Guess a letter: ') guessed_letters += guess_letter if guess_letter not in word: chances -= 1 print('Incorrect. You have {} chances left.'.format(chances)) if chances == 0: print('You lost! nThe word is {}.'.format(word)) # Words words = ['cat', 'mouse', 'lion', 'dog'] word = random.choice(words) hangman(word)"},{"prompt":"Create a Python function that returns the index of the nth occurrence of a substring in a given string. (Hello World, l, 3)","completion":"def find_nth_occurrence(string, substring, n): index = -1 while n > 0: n -= 1 index = string.find(substring, index+1) if index == -1: return None else: return index if __name__ == \\"__main__\\": result = find_nth_occurrence(\\"Hello World\\", \\"l\\", 3) print(result)"},{"prompt":"Develop a Python program to compact a given list of integers by removing its duplicate elements. [1, 1, 2, 2, 3, 4, 4, 5]","completion":"def compact_list(array): return list(set(array))"},{"prompt":"Create a Python function to remove duplicates from the given list. [1, 2, 3, 2, 3]","completion":"def remove_duplicates(list): new_list = [] for item in list: if item not in new_list: new_list.append(item) return new_list"},{"prompt":"Create a Python program to detect if the number is prime or not","completion":"def is_prime(number): if number <= 1: return False for i in range(2, number): if number % i == 0: return False return True"},{"prompt":"Using Python, create a function called \`print_list\` that prints out the elements of a list. L = [1, 2, 3, 4, 5]","completion":"def print_list(L): for item in L: print(item) L = [1,2,3,4,5] print_list(L)"},{"prompt":"Create an implementation of K Nearest Neighbors algorithm in Python. Not applicable","completion":"import math def euclidean_distance(point1, point2): ''' Calculates the euclidean distance between two points ''' distance = 0 for i in range(len(point1)): distance += (point1[i] - point2[i])**2 return math.sqrt(distance) def knn(x_train, y_train, x_test, k): ''' Performs K nearest Neighbors algorithm on the given data ''' distances = [] targets = [] for i in range(len(x_train)): dist = euclidean_distance(x_test, x_train[i]) distances.append([dist, i]) distances = sorted(distances) for i in range(k): targets.append(y_train[distances[i][1]]) return targets # Getting predictions for a test case predictions = knn(x_train, y_train, x_test, k)"},{"prompt":"Develop an algorithm in Python for predicting the motion of a particle. Not applicable","completion":"import numpy as np def predict_motion(pos, vel, acc, dt): # predict position pos_pred = pos + vel * dt + 0.5 * acc * dt ** 2 #predict velocity vel_pred = vel + acc * dt return pos_pred, vel_pred # test code pos = np.array([0.0, 0.0]) vel = np.array([1.0, 1.0]) acc = np.array([1.0, 0.0]) dt = 0.1 pos_pred, vel_pred = predict_motion(pos, vel, acc, dt) print(pos_pred, vel_pred)"},{"prompt":"Modify the given Python function to print out the reversed list first and then find the sum of the numbers. def reverse_list(numbers): return numbers[::1]","completion":"def reverse_list(numbers): reversed_list = numbers[::-1] print(reversed_list) return sum(reversed_list)"},{"prompt":"Generate a program for sending an automated message when the user enters a password. The message is: Welcome to our site","completion":"# import the python library for sending the automated message import smtplib # initiate the server parameters server = smtplib.SMTP('smtp.example.com', 587) server.starttls() server.login('username', 'password') # set the message to be sent message = 'Welcome to our site' # ask the user to enter a password pass_input = input('Please enter your password: ') # if the password is correct, send the automated message if (pass_input == '<correct-password>'): server.sendmail('from_email@example.com', 'to_email@example.com', message) server.quit()"},{"prompt":"Create a function in Python that takes a list of strings and checks if any of the strings are palindromes. [civic, apple, racecar]","completion":"def check_palindrome(string_list): for string in string_list: if string == string[::-1]: return True return False result = check_palindrome([\\"civic\\", \\"apple\\", \\"racecar\\"]) print(result)"},{"prompt":"Write a Python program to optimize a set of points in a 3dimensional plane. points = [[10, 12, 13], [1, 8, 9], [3, 5, 7]]","completion":"import scipy.optimize as opt def objective(x): return sum([x[i]**2 for i in range(len(x))]) def constraint1(x): return 16 - x[0]**2 - x[1]**2 - x[2]**2 cons = [{'type': 'ineq','fun': constraint1}] x = [0, 0, 0] solution = opt.minimize(objective, x, constraints=cons) print(solution)"},{"prompt":"Create a Python function to strip a given string of its whitespace.","completion":"def strip_whitespace(string): return string.replace(\\" \\", \\"\\") print(strip_whitespace('Hello World')) # HelloWorld"},{"prompt":"Create a class in Python for creating a currency converter that can convert between any currencies. Not applicable","completion":"import requests class CurrencyConverter: def __init__(self, source_currency, target_currency, amount): self.source_currency = source_currency self.target_currency = target_currency self.amount = amount def convert(self): \\"\\"\\" This method returns the converted amount \\"\\"\\" url = f\\"https://api.exchangeratesapi.io/latest?base={self.source_currency}&symbols={self.target_currency}\\" response = requests.get(url) data = response.json() rate = data[\\"rates\\"][self.target_currency] return rate * self.amount # Usage sample converter = CurrencyConverter(\\"USD\\", \\"EUR\\", 100) print(converter.convert())"},{"prompt":"Design a linear regression algorithm in Python to fit a set of data. X = [1,2,3,4,5], Y = [1,4,9,16,25]","completion":"import numpy as np X = np.array([1,2,3,4,5]) Y = np.array([1,4,9,16,25]) # calculate coefficients def coefficients(x,y): # number of observations/points n = np.size(x) # mean of x and y vector m_x, m_y = np.mean(x), np.mean(y) # calculating cross-deviation and deviation about x SS_xy = np.sum(y*x) - n*m_y*m_x SS_xx = np.sum(x*x) - n*m_x*m_x # calculating regression coefficients b_1 = SS_xy / SS_xx b_0 = m_y - b_1*m_x return(b_0, b_1) # function to plot regression line def regression_line(x, y, b): # plotting the actual points as scatter plot plt.scatter(x, y, color = \\"m\\", marker = \\"o\\", s = 30) # predicted response vector y_pred = b[0] + b[1]*x # plotting the regression line plt.plot(x, y_pred, color = \\"g\\") # putting labels plt.xlabel('x') plt.ylabel('y') # function to show plot plt.show() # coefficients b = coefficients(X,Y) print(\\"Coefficients:nb_0 = {} nb_1 = {}\\".format(b[0],b[1])) # plotting regression line regression_line(X,Y,b)"},{"prompt":"Generate a Python program to optimize a particular problem Find the maximum number of nonoverlapping intervals from a given set of intervals.","completion":"def optimize_intervals(intervals): intervals.sort(key=lambda x: x[1]) # sorts intervals by their end time optimized = [] current_end = 0 for start, end in intervals: if start >= current_end: optimized.append([start, end]) current_end = end return optimized intervals = [[1,3], [2,4], [5,7], [6,8]] print(optimize_intervals(intervals))"},{"prompt":"Write a Python program to generate a HTML table according to given data. data = [['Name', 'Age'], ['John', 20], ['Jane', 30], ['Tom', 40]]","completion":"def generate_table(data): table = '<table>' for row in data: table += '<tr>' for cell in row: table += '<td>{}</td>'.format(cell) table += '</tr>' table += '</table>' return table print(generate_table(data)) # Output <table><tr><td>Name</td><td>Age</td></tr><tr><td>John</td><td>20</td></tr><tr><td>Jane</td><td>30</td></tr><tr><td>Tom</td><td>40</td></tr></table>"},{"prompt":"Using basic Python, create a Fibonacci sequence.","completion":"def get_fibonacci_sequence(n): series = [0,1] while len(series) < n: series.append(sum(series[-2:])) return series print(get_fibonacci_sequence(10))"},{"prompt":"Generate Python code that collects all the even numbers from a given list of numbers. [1, 2, 3, 4, 5, 6, 7, 8]","completion":"def collect_even_numbers(nums): even_nums = [] for num in nums: if num % 2 == 0: even_nums.append(num) return even_nums"},{"prompt":"Write a Python program to create a new list which contains the elements of a given list after removing duplicates.","completion":"def remove_duplicates(list): resultant_list = [] for item in list: if item not in resultant_list: resultant_list.append(item) return resultant_list"},{"prompt":"Find the maximum of three numbers using a Python program. 5, 11, 6","completion":"def findMaxNum(a, b, c): maxNum = a if b > maxNum: maxNum = b if c > maxNum: maxNum = c return maxNum maxNum = findMaxNum(5, 11, 6) print(maxNum)"},{"prompt":"Design a class to represent a car in Python.","completion":"class Car: def __init__(self, make, model, year): self.make = make self.model = model self.year = year self.speed = 0 def accelerate(self): self.speed += 10 def brake(self): self.speed -= 10 def get_speed(self): return self.speed"},{"prompt":"Create a Python script to generate a random password of length 8. The password should include at least one uppercase character, one lowercase character, one digits, and one special character. Not applicable","completion":"import random import string def generate_password(length): # Generate a random password # that contains at least one uppercase character, one lowercase character, one digit, and one special character # Generate a random string of uppercase and lowercase characters s = \\"\\".join(random.sample(string.ascii_letters, length)) # Generate a single random digit d = random.choice(string.digits) # Generate a single random special character p = random.choice(string.punctuation) # Generate the final password password = s + d + p return password if __name__ == '__main__': password = generate_password(8) print(password)"},{"prompt":"Generate Python code to calculate the largest number that is divisible by both 8 and 6.","completion":"def find_largest_divisible_number(m, n): num = 0 while True: num += max(m, n) if num % m == 0 and num % n == 0: return num print(find_largest_divisible_number(8, 6))"},{"prompt":"Write a Python script to implement the quick sort algorithm on a list. [5, 4, 2, 1, 3]","completion":"def quick_sort(array): if len(array) < 2: return array pivot = array[0] less = [i for i in array[1:] if i <= pivot] greater = [i for i in array[1:] if i > pivot] return quick_sort(less) + [pivot] + quick_sort(greater)"},{"prompt":"Parse the following JSON string into a Python dictionary. {name:John,age:30,city:New York}","completion":"import json data = '{\\"name\\":\\"John\\",\\"age\\":30,\\"city\\":\\"New York\\"}' parsed_data = json.loads(data) print(parsed_data) # {'name': 'John', 'age': 30, 'city': 'New York'}"},{"prompt":"Create a python function which sorts an array of integers into ascending order. [3, 7, 8, 1, 5, 4]","completion":"def sort_int_asc(arr): arr.sort() return arr print(sort_int_asc([3, 7, 8, 1, 5, 4]))"},{"prompt":"Generate an algorithm in Python that can take in a list of integers and sort them in ascending order. Example list: [4, 9, 1, 6, 5]","completion":"def sort_ascending(nums): n = len(nums) for i in range(n): for j in range(0, n-i-1): if nums[j] > nums[j+1] : nums[j], nums[j+1] = nums[j+1], nums[j] return nums"},{"prompt":"Write a Python script to find all the divisible numbers in a given range (1 to n), where n is a positive integer provided by the user.","completion":"def find_divisible_numbers(n): divisibles = [] for i in range(1, n+1): if i % 3 == 0: divisibles.append(i) return divisibles find_divisible_numbers(20)"},{"prompt":"Write a function in Python to convert a string of hexadecimal characters to their corresponding ASCII value.","completion":"def hexToASCII(hexStr): num = int(hexStr, 16) return chr(num)"},{"prompt":"Create a Python program that implements the FisherYates algorithm to generate a random permutation of numbers from 0 to n1. n = 10","completion":"# Fisher-Yates algorithm to generate a random permutation of numbers from 0 to n-1 # Time Complexity: O(n) import random def fisher_yates(n): # Create an array to hold the permutation perm = [x for x in range(0, n)] # Start from the last element and swap and decrease # index by one for i in range(n-1, 0, -1): # Pick a random index from 0 to i j = random.randint(0, i) # Swap the random element with current element temp = perm[i] perm[i] = perm[j] perm[j] = temp return perm # Sample call print(fisher_yates(10)) # Output: [4, 2, 0, 8, 5, 6, 9, 3, 1, 7]"},{"prompt":"Create a python script to split a string into its word components. String: Hello,World!","completion":"def split_words(s): words = s.split(\\" \\") return words s = \\"Hello,World!\\" words = split_words(s) print(words)"},{"prompt":"Create an algorithm in Python to determine if the given array contains two elements with the given sum. arr = [3, 6, 7, 8, 10] sum = 16","completion":"def twoSum(arr, sum): for i in range(len(arr) - 1): for j in range(i+1, len(arr)): if arr[i] + arr[j] == sum: return True return False print(twoSum(arr, sum)) # Output: True"},{"prompt":"Write a Python program for predicting which students will take a certain course in the upcoming semester. Student Profiles: [{'GPA': 3.4, 'Major': 'Computer Science', 'Interests': ['Web Development', 'Data Science']}, {'GPA': 3.7, 'Major': 'Business', 'Interests': ['Marketing', 'Entrepreneurship']}, {'GPA': 2.9, 'Major': 'Biology', 'Interests': ['Genetics', 'Neuroscience']}]","completion":"#import packages import pandas as pd from sklearn.linear_model import LogisticRegression #load student profile data student_profile_list = [{'GPA': 3.4, 'Major': 'Computer Science', 'Interests': ['Web Development', 'Data Science']}, {'GPA': 3.7, 'Major': 'Business', 'Interests': ['Marketing', 'Entrepreneurship']}, {'GPA': 2.9, 'Major': 'Biology', 'Interests': ['Genetics', 'Neuroscience']}] #create dataframes for student profile data = pd.DataFrame(student_profile_list) #preprocess the data to use in logistic regression dummies = pd.get_dummies(data['Major']) data = data.drop(['Major'], axis = 1) data = pd.concat([data, dummies], axis = 1) #instantiate the logistic regression logreg = LogisticRegression(random_state = 0) #fit the model logreg.fit(data[['GPA', 'Computer Science', 'Business', 'Biology']], data['Interests']) #predict whether a student will take a course #Input student profile student_profile = {'GPA': 3.0, 'Major': 'Biology'} student_profile = pd.DataFrame([student_profile]) dummies = pd.get_dummies(student_profile['Major']) student_profile = student_profile.drop(['Major'], axis = 1) student_profile = pd.concat([student_profile, dummies], axis = 1) prediction = logreg.predict(student_profile[['GPA', 'Computer Science', 'Business', 'Biology']]) #Print the prediction print(f'The student is likely to take a course related to {prediction[0]}')"},{"prompt":"Come up with a function in Python that takes two integers as arguments and returns the sum.","completion":"def add_two_int(a, b): return a + b"},{"prompt":"Create a Python program to automatically optimize the settings for a given predictive model. A machine learning predictive model","completion":"import pyswarms as ps def optimize(model, X, y): # Configure hyperparameters options = {'c1': 0.5, 'c2': 0.3, 'w': 0.9} # Compute the hyperparameters optimizer = ps.single.LocalBestPSO(n_particles=10, dimensions=X.shape[1], options=options) # Perform the search cost, pos = optimizer.optimize(model, X, y) # Create and return the optimized model hyperparameters = {'bias': pos[0], 'weights': pos[1:]} optimized_model = model(**hyperparameters) return optimized_model"},{"prompt":"Write a Python program to convert the input array of strings into a dictionary with keys as the string and the values as the index of the string in the array. ['foo', 'bar', 'baz', 'qux']","completion":"my_dict = dict(zip(['foo', 'bar', 'baz', 'qux'], range(len(['foo', 'bar', 'baz', 'qux'])))) print(my_dict) # {'foo': 0, 'bar': 1, 'baz': 2, 'qux': 3}"},{"prompt":"Create a basic web scraper in Python that takes a URL as input and returns the text content of that URL. https://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') text = soup.get_text() print(text)"},{"prompt":"Create a function in Python that takes two strings as parameters and returns the string that has the longest length. string1=Python string2=Programming","completion":"def longest_string(string1, string2): if len(string1) > len(string2): return string1 else: return string2 string1=\\"Python\\" string2=\\"Programming\\" print(longest_string(string1, string2))"},{"prompt":"Write a Python program for encrypting a given string using Caesar cipher. The string is Hello World, and the shift used is 4.","completion":"def encryption(message, shift): cipher = '' # traverse message for char in message: # Encrypt uppercase characters if (char.isupper()): cipher += chr((ord(char) + shift - 65) % 26 + 65) # Encrypt lowercase characters else: cipher += chr((ord(char) + shift - 97) % 26 + 97) return cipher # Driver code message = 'Hello World' shift = 4 print(\\"Encrypted Message: \\", encryption(message, shift))"},{"prompt":"Create a function to normalize a given string using Python. Hello, World!","completion":"def normalize_string(s): return s.lower().strip()"},{"prompt":"Train an XGBoost model in Python to predict the price of a car. A dataset containing features such as number of miles, year, make and model, etc.","completion":"import xgboost as xgb import numpy as np # Read the data data = np.genfromtxt('car-data.csv', delimiter=',', skip_header=0) X, y = data[:,:-1], data[:,-1] # Split the data into train and test sets X_train, X_test, y_train, y_ test = train_test_split(X, y, test_size=0.2, random_state=0) # train the XGBoost model model = xgb.XGBRegressor().fit(X_train, y_train) # make predictions predicted = model.predict(X_test) # evaluate model accuracy = mean_squared_error(y_test, predicted)"},{"prompt":"Design an algorithm in Python to compute the shortest path between two nodes in a network.","completion":"def shortest_path(graph, start, end): # keep track of all visited nodes explored = [] # keep track of nodes to be checked queue = [[start]] # return path if start is goal if start == end: return \\"That was easy! Start = goal\\" # keeps looping until all possible paths have been checked while queue: # pop the first path from the queue path = queue.pop(0) # get the last node from the path node = path[-1] if node not in explored: neighbours = graph[node] # go through all neighbour nodes, construct a new path and # push it into the queue for neighbour in neighbours: new_path = list(path) new_path.append(neighbour) queue.append(new_path) # return path if neighbour is goal if neighbour == end: return new_path # mark node as explored explored.append(node) # in case there's no path between the two nodes return \\"So sorry, but a connecting path doesn't exist :(\\""},{"prompt":"Write a python program, taking a string input from the user, to reverse all the words in it. Not applicable","completion":"user_input = input('Please enter a string: ') words = user_input.split(' ') reverse_words = [word[::-1] for word in words] print(' '.join(reverse_words))"},{"prompt":"Generate a Python function to print the Fibonacci series up to a given number.","completion":"def print_fibonacci(num): a = 0 b = 1 print(a, end =' ') print(b, end =' ') for i in range(2,num): c = a + b a = b b = c print(c, end =' ')"},{"prompt":"Write a Python program to encode and decode a given text using Base64 algorithm. Text to encode: Hello World","completion":"import base64 # Function to encode def encode(text): encoded_text = base64.b64encode(text.encode('utf-8')) return encoded_text # Function to decode def decode(text): decoded_text = base64.b64decode(text).decode('utf-8') return decoded_text # Main function def main(): text = \\"Hello World!\\" encoded_text = encode(text) print(encoded_text) decoded_text = decode(encoded_text) print(decoded_text) if __name__ == '__main__': main()"},{"prompt":"Create a Python class to compare two strings and generate a report of common characters and the number of times each were seen. sample_string_1 = this is a test sample_string_2 = try this example","completion":"class StringCompare: def __init__(self, string1, string2): self.string1 = string1 self.string2 = string2 def compare_strings(self): report = {} for char in self.string1: if char in self.string2: if char in report: report[char] += 1 else: report[char] = 1 return report"},{"prompt":"Develop a document summarization algorithm in Python that can read a long text and summarize it into a shorter version.","completion":"from nltk import sent_tokenize def summarize(text, limit=5): # Splitting the text into sentences sentences = sent_tokenize(text) # Generating word frequency table word_frequencies = {} for sentence in sentences: words = sentence.split() for word in words: if word not in word_frequencies.keys(): word_frequencies[word] = 1 else: word_frequencies[word] += 1 # Generating word scores word_scores = {} for word in word_frequencies.keys(): score = 1 / word_frequencies[word] word_scores[word] = score # Generating sentence scores sentence_scores = {} for sentence in sentences: sentence_wordcount = len(sentence.split()) sentence_wordscore = 0 for word in sentence.split(): if word in word_scores.keys(): sentence_wordscore += word_scores[word] sentence_score = sentence_wordscore / sentence_wordcount sentence_scores[sentence] = sentence_score # Generating summary summary = '' sorted_sentences = sorted(sentence_scores.items(), key=lambda x: x[1], reverse=True) for s in sorted_sentences[:limit]: summary += f'{s[0]}n' return summary"},{"prompt":"Generate a Python function which finds all prime numbers between two given numbers. lower boundary: 0 upper boundary: 15","completion":"def find_prime_numbers(lower, upper): result = [] # check all numbers from lower boundary to upper boundary for num in range(lower, upper + 1): # check if the number is prime if is_prime(num): result.append(num) return result def is_prime(num): for i in range(2, num): if (num % i == 0): return False return True print(find_prime_numbers(0, 15)) # Output: [2, 3, 5, 7, 11, 13]"},{"prompt":"Design a program in Python for computing the average height of a group of people. [1.78, 1.90, 1.75, 1.82]","completion":"def average_height(lst): total = 0 for height in lst: total += height return total / len(lst) result = average_height([1.78, 1.90, 1.75, 1.82]) print(result)"},{"prompt":"Generate a python program to convert numbers in between 1 to 10 to their respective word form.","completion":"# Dictionary of numbers and words DAYS = { 1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six', 7:'seven', 8:'eight', 9:'nine', 10:'ten', } def num_to_str(num): if num in DAYS: return DAYS[num] else: return \\"invalid number\\" if __name__ == '__main__': num = 5 print(num_to_str(num))"},{"prompt":"Generate a code snippet in Python to reverse the order of a list. Not applicable","completion":"list = [10, 20, 30, 40, 50] # reversing the list list.reverse() # printing the reversed list print (\\"The reversed list is : \\" + str(list))"},{"prompt":"Given a quicksort implementation in Python, improve or edit the code to increase the speed of the sorting algorithm. def quick_sort(array): if len(array) < 2: # base case, arrays with 0 or 1 element are already sorted return array else: pivot = array[0] # subarray of all the elements less than the pivot less = [i for i in array[1:] if i <= pivot] # subarray of all the elements greater than the pivot greater = [i for i in array[1:] if i > pivot] return quick_sort(less) + [pivot] + quick_sort(greater)","completion":"def quick_sort(array): if len(array) < 2: # base case, arrays with 0 or 1 element are already \\"sorted\\" return array else: pivot = array[0] # sub-array of all the elements less than the pivot less = [i for i in array[1:] if i <= pivot] # sub-array of all the elements greater than the pivot greater = [i for i in array[1:] if i > pivot] # Inserting new code to divide and conquer if (len(less) > 1 and len(greater) > 1): return quick_sort(less[:len(less) // 2]) + quick_sort(less[len(less) // 2:]) + [pivot] + quick_sort(greater[:len(greater) // 2]) + quick_sort(greater[len(greater) // 2:]) else: return quick_sort(less) + [pivot] + quick_sort(greater)"},{"prompt":"Create a neural network model using Keras in Python for sentiment analysis. The model should be able to classify the sentiment of a movie review as either positive or negative. Not applicable","completion":"import tensorflow as tf from tensorflow import keras # Define model model = tf.keras.Sequential([ tf.keras.layers.Embedding(vocab_size, embedding_dim, input_length=max_length), tf.keras.layers.GlobalAveragePooling1D(), tf.keras.layers.Dense(24, activation='relu'), tf.keras.layers.Dense(1, activation='sigmoid') ]) # Compile Model model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy']) # Train the model model.fit(training_padded, training_labels, epochs=num_epochs, validation_data=(testing_padded, testing_labels)) # Make predictions sentiment = model.predict(testing_padded)"},{"prompt":"Write a Python function to insert a list of elements into a given list according to the given index. list = [1, 2, 3] index = 1 elements = [4,5]","completion":"def insert_list(list, index, elements): return (list[0:index] + elements + list[index:])"},{"prompt":"Write a Python program to remove consecutive sequences of duplicates from the given list list = [0, 0, 0, 1, 2, 0, 2, 0]","completion":"def remove_duplicates(list): new_list = [] previous_item = None for item in list: if item != previous_item: new_list.append(item) previous_item = item return new_list new_list = remove_duplicates(list) print(new_list)"},{"prompt":"Generate a Python function to check if a number is prime or not.","completion":"def is_prime(num): if num <= 1: return False for i in range(2,num): if num % i == 0: return False return True"},{"prompt":"Write a Python program to generate a HTML table with 3 columns and 5 rows, filled with random numbers.","completion":"import random def generate_html_table(): html_table = \\"<table>n\\" for i in range(5): html_table += \\" <tr>n\\" for j in range(3): html_table += \\" <td>{}</td>n\\".format(random.randint(1, 100)) html_table += \\" </tr>n\\" html_table += \\"</table>\\" return html_table print(generate_html_table())"},{"prompt":"Develop a Python program to sort a given array using Quicksort [1, 5, 7, 0, 3]","completion":"def partition(arr, low, high): i = (low-1) pivot = arr[high] for j in range(low, high): if arr[j] < pivot: i += 1 arr[i],arr[j] = arr[j],arr[i] arr[i+1],arr[high] = arr[high],arr[i+1] return i+1 def quick_sort(arr, low, high): if low < high: pi = partition(arr, low, high) quick_sort(arr, low, pi-1) quick_sort(arr, pi+1, high) result = quick_sort([1, 5, 7, 0, 3], 0, 4) print(result)"},{"prompt":"Write a Python code to decode a JSON string. { name: John, age: 30, is_married: False }","completion":"import json json_string = '{\\"name\\": \\"John\\", \\"age\\": 30, \\"is_married\\": false}' data = json.loads(json_string) name = data['name'] age = data['age'] is_married = data['is_married'] print('Name: ', name) print('Age: ', age) print('Is Married: ', is_married)"},{"prompt":"Create a Python script that takes a printing of system processes as input and displays the top 5 processes taking the most memory. top PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1 root 20 0 759236 9740 8116 S 0.0 0.0 0:00.68 init [truncated for brevity] 885 dnsmasq 20 0 97128 8108 5556 S 0.0 0.1 0:00.37 dnsmasq 886 dbusdaem 20 0 12744 1420 1204 S 0.0 0.0 0:00.02 dbusdaemon 887 NetworkMa 20 0 71965 3164 2152 S 0.0 0.1 0:00.08 NetworkManager 888 avahidaem 20 0 12088 1332 1072 S 0.0 0.0 0:00.00 avahidaemon 889 avahidaem 20 0 12084 1332 1072 S 0.0 0.0 0:00.00 avahidaemo","completion":"import re import operator input_string = \\"\\"\\"top PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND 1 root 20 0 759236 9740 8116 S 0.0 0.0 0:00.68 init [truncated for brevity] 885 dnsmasq 20 0 97128 8108 5556 S 0.0 0.1 0:00.37 dnsmasq 886 dbus-daem 20 0 12744 1420 1204 S 0.0 0.0 0:00.02 dbus-daemon 887 NetworkMa 20 0 71965 3164 2152 S 0.0 0.1 0:00.08 NetworkManager 888 avahi-daem 20 0 12088 1332 1072 S 0.0 0.0 0:00.00 avahi-daemon 889 avahi-daem 20 0 12084 1332 1072 S 0.0 0.0 0:00.00 avahi-daemon\\"\\"\\" # Find all of the entries processes = re.findall(r'(.*?)s+(.*?)s+(.*?)s+(.*?)s+(.*?)s+(.*?)s+(.*?)s+(.*?)s+(.*?)s+(.*?)s+(.*?)s+(.*?)s+', input_string) # Create a list of tuples for each process process_list = [(process[4],process[5], process[0], process[11]) for process in processes] # Sort the list based on memory sorted_list = sorted(process_list,key=operator.itemgetter(1), reverse=True) # List the top 5 processes print(\\"Top 5 processes taking the most memory:\\") for i in range(5): print(sorted_list[i][2], sorted_list[i][3], \\"-\\", str(sorted_list[i][1])+\\"KB\\") # Output: # Top 5 processes taking the most memory: # init init - 9740KB # dnsmasq dnsmasq - 8108KB # NetworkManager NetworkManager - 3164KB # avahi-daemon avahi-daemon - 1332KB # avahi-daemon avahi-daemon - 1332KB"},{"prompt":"Create a Python script to resolve a given web address.","completion":"import socket def resolve_domain(domain): try: addr = socket.gethostbyname(domain) # Resolve the address by DNS return addr except socket.gaierror: # Raise when the domain name not found return None"},{"prompt":"Generate a function for converting JSON data to a Python object.","completion":"\\"\\"\\" Generate a function for converting JSON data to a Python object \\"\\"\\" import json def json_to_object(json_data): return json.loads(json_data)"},{"prompt":"Construct a decision tree algorithm in Python to classify credit card transactions. The dataset consists of 5 numerical features and one categorical target variable.","completion":"from sklearn.tree import DecisionTreeClassifier import numpy as np X = np.array([features]) y = np.array([target]) clf_dt = DecisionTreeClassifier() clf_dt.fit(X,y) # Predict class labels preds = clf_dt.predict(X)"},{"prompt":"Develop a class to perform linear regression in Python.","completion":"class LinearRegression: def __init__(self, X, y): self.X = X self.y = y def fit(self): x_mean = self.X.mean() y_mean = self.y.mean() n = len(self.X) m = ( ( ( self.X * self.y).sum() - n*x_mean*y_mean ) ) /( ( ( self.X*self.X ).sum() - n*x_mean*x_mean )) c = y_mean - m*x_mean return m, c def predict(self, m, c, X): y_pred = m*X + c return y_pred"},{"prompt":"Generate a Python program which takes in a string and returns each of its characters in reverse order. Hello","completion":"def reverse_string(string): reversed_string = \\"\\" for i in range(len(string) - 1, -1 , -1): reversed_string += string[i] return reversed_string result = reverse_string('Hello') print(result)"},{"prompt":"Write a Python program to generate a virtual assistant for processing natural language queries. Not applicable","completion":"import sys import speech_recognition import time from gtts import gTTS from playsound import playsound import webbrowser import os import random def reg_and_speak(query): query = query.lower() # recognize speech using Google Speech Recognition try: # for testing purposes, we're just using the default API key # to use another API key, use \`r.recognize_google(audio, key=\\"GOOGLE_SPEECH_RECOGNITION_API_KEY\\")\` # instead of \`r.recognize_google(audio)\` text = r.recognize_google(audio) print(text) except: speech = \\"I could not understand it\\" speak(speech) sys.exit() def speak(speech): tts = gTTS(text=speech, lang='en', slow=False) # save the file tts.save(\\"speech.mp3\\") # play the mp3 playsound.playsound(\\"speech.mp3\\", True) os.remove('speech.mp3') while True: print('listening...') speech_recognition.Microphone(device_index=1) r.adjust_for_ambient_noise(source) audio = r.listen(source) reg_and_speak(audio)"},{"prompt":"Develop a program in Python to calculate the sum of the following series: 1 + 1/2 + 1/3 + ... + 1/","completion":"def SumOfSeries(n): seriesSum = 0 for num in range(1, n+1): seriesSum += 1/num return round(seriesSum, 2) # Driver code n = 5 print(\\"Sum of the series up to number:\\", n, \\"is\\", SumOfSeries(n))"},{"prompt":"Create an algorithm in Python that categorizes a text document into one of three categories positive, negative, or neutral. Text document = This is an exciting opportunity that I am looking forward to","completion":"def determine_sentiment(text): score = 0 for word in text.split(\\" \\"): if word in positive_words: score += 1 elif word in negative_words: score -= 1 if score > 0: return \\"positive\\" elif score < 0: return \\"negative\\" else: return \\"neutral\\" # Test document test_document = \\"This is an exciting opportunity that I am looking forward to\\" # Determine sentiment sentiment = determine_sentiment(test_document) print(\\"Sentiment:\\", sentiment) # Output: Sentiment: positive"},{"prompt":"mplement a stack data structure in Python.","completion":"class Stack(): def __init__(self): self.items = [] def push(self, data): self.items.append(data) def pop(self): return self.items.pop() def is_empty(self): return self.items == []"},{"prompt":"Can you create a python program that returns the index of an item in a given array of numbers? arr = [1,2,3,4,5,6] item = 5","completion":"def getIndex(arr, item): for i in range(len(arr)): if arr[i] == item: return i return -1 arr = [1,2,3,4,5,6] item = 5 index = getIndex(arr, item) print('Index of', item, 'is', index) # index is 4"},{"prompt":"Generate a table of numbers up to 10 in list format using Python.","completion":"mylist = [1,2,3,4,5,6,7,8,9,10]"},{"prompt":"Create an AR Python script to detect and classify objects in a given scene. Scene: a room with a several chairs, tables, and other objects.","completion":"import numpy as np import cv2 # load the model net = cv2.dnn.readNetFromCaffe('model.prototxt', 'weights.caffemodel') # read the image image = cv2.imread('image.jpg') # create a blob from the image and feed it into the model blob = cv2.dnn.blobFromImage(image, 1/255, (224, 224), (0, 0, 0), swapRB=True, crop=False) net.setInput(blob) # make predictions and get the class labels preds = net.forward() class_labels = ['chair', 'table', 'etc...'] # loop through and draw bounding boxes for each detected object for index, pred in enumerate(preds.reshape(-1, preds.shape[-1])): class_id = np.argmax(pred) confidence = pred[class_id] if confidence > 0.5: x1, y1, x2, y2 = (dims[index] * 0.5).astype(\\"int\\") cv2.rectangle(image, (x1, y1), (x2, y2), (0, 255, 0), 1) cv2.putText(image, class_labels[class_id], (x1 + 5, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2) # display the image cv2.imshow('image', image)"},{"prompt":"Create a scalable program in Python using functions to add two numbers. 7, 9","completion":"def add(x, y): return x + y # Driver code num1 = 7 num2 = 9 print(\\"Sum of {0} and {1} is {2}\\" .format(num1, num2, add(num1, num2)))"},{"prompt":"Code a Python program that can take an array of integers as input and sort them in ascending order. [5, 3, 7, 2, 9]","completion":"def sort_ascending(array): for i in range(len(array)): min_idx = i for j in range(i+1, len(array)): if array[min_idx] > array[j]: min_idx = j array[i], array[min_idx] = array[min_idx], array[i] return array arr = [5,3,7,2,9] result = sort_ascending(arr) print(\\"Array sorted in ascending order is:\\") for i in result: print(i, end=\\" \\")"},{"prompt":"Create a python program to sort a given array in increasing order. [21, 3, 14, 15, 5, 21]","completion":"def insertion_sort(arr): for key in range(1,len(arr)): j=key while j>0 and arr[j-1] > arr[j]: arr[j-1],arr[j]=arr[j],arr[j-1] j-=1 return arr print(insertion_sort([21, 3, 14, 15, 5, 21]))"},{"prompt":"Produce a python code to implement a classic stack having push, pop, and peep operations None","completion":"class Stack: def __init__(self): self.stack = [] def push(self, data): self.stack.append(data) def pop(self): if len(self.stack) == 0: return -1 return self.stack.pop() def peek(self): if len(self.stack) == 0: return -1 return self.stack[-1]"},{"prompt":"Write a Python program to implement a simple game of rock paper scissors. The program should include a function to randomly generate a move for the computer and another function to calculate the winner. Not applicable","completion":"import random def generate_computer_move(): moves = ['rock', 'paper', 'scissors'] return random.choice(moves) def calculate_winner(player_move, computer_move): if player_move == computer_move: return 'draw' elif player_move == 'rock' and computer_move == 'scissors': return 'player' elif player_move == 'paper' and computer_move == 'rock': return 'player' elif player_move == 'scissors' and computer_move == 'paper': return 'player' else: return 'computer'"},{"prompt":"Rearrange this python code to make it shorter. a = 0 b = 1 for i in range(10): a, b = b, a + b","completion":"a, b = 0, 1 for _ in range(10): a, b = b, a + b"},{"prompt":"mplement a function in Python that generates a random password with a minimum length of 10 characters. No inpu","completion":"import random import string def generate_random_password(n=10): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits return ''.join(random.choice(chars) for _ in range(n))"},{"prompt":"Develop an AI agent in Python that can play a game of tictactoe with a user. Not applicable","completion":"from random import randint class TicTacToeAgent: board = [[0,0,0], [0,0,0], [0,0,0]] def __init__(self): self.turn = 1 def checkpattern(self): for i in range(3): if self.board[i][0]==self.board[i][1] and self.board[i][1]==self.board[i][2] and self.board[i][0]!=0: return True for j in range(3): if self.board[0][j]==self.board[1][j] and self.board[1][j]==self.board[2][j] and self.board[0][j]!=0: return True if self.board[0][0]==self.board[1][1] and self.board[1][1]==self.board[2][2] and self.board[0][0]!=0: return True if self.board[2][0]==self.board[1][1] and self.board[1][1]==self.board[0][2] and self.board[2][0]!=0: return True return False def turn(self,x,y): self.board[x][y] = self.turn self.turn = -self.turn def play(self): flag = 1 while flag ==1: #user move i=int(input(\\"input row: \\")) j=int(input(\\"input col: \\")) self.turn(i,j) if self.checkpattern(): print(\\"user won\\") flag = 0 else: #AI move i = randint(0,2) j = randint(0,2) self.turn(i,j) if self.checkpattern(): print(\\"computer won\\") flag = 0"},{"prompt":"Optimize this piece of code in Python to minimize the runtime complexity. def find_pair(arr, target): for i in range(len(arr)): for j in range(len(arr)): if arr[i] + arr[j] == target: return True return False","completion":"def find_pair(arr, target): myset = set() for x in range(len(arr)): if target-arr[x] in myset: return True myset.add(arr[x]) return False"},{"prompt":"Modify the following Python code to detect and remove punctuation from a given string. my_string = 'Hello, world!'","completion":"my_string = 'Hello, world!' punctuation = '!,.' for char in my_string: if char in punctuation: my_string = my_string.replace(char, \\"\\") print(my_string) # Output: Hello world"},{"prompt":"Create a code in Python to determine if a given year is a leap year or not year = 2020","completion":"def is_leap_year(year): # If a year is divisible by 4 and not divisible by 100, # it is a leap year. # If a year is divisible by 4, 100 and 400, # it is also a leap year if year % 4 == 0 and year % 100 != 0: return True elif year % 4 == 0 and year % 100 == 0 and year % 400 == 0: return True else: return False # Testing print(is_leap_year(2020))"},{"prompt":"Create a Python program to generate the powers of two up to a given number. 8","completion":"def powersOfTwo(n): powers = [] for i in range(n + 1): powers.append(2**i) return powers n = 8 print(powersOfTwo(n))"},{"prompt":"Write a Python program that takes in a sentence and returns the words within the given sentence in reverse order. sentence = Hello world!","completion":"def reverse_words(sentence): words = sentence.split(\\" \\") reversed_words = words[::-1] return \\" \\".join(reversed_words) print(reverse_words(\\"Hello world!\\")) # Output: world! Hello"},{"prompt":"Generate a python program that can predict the approximate square root of a given number.","completion":"def sqrt(x): root = x epsilon = 0.0001 while abs(x - root * root) > epsilon: root = (x/root + root)/2 return root"},{"prompt":"Estimate the bonus given to employees based on labels such as excellent, good, average and poor using a supervised learning algorithm in Python. excellent:1000, good: 700, average: 500, poor: 200","completion":"# Import libraries import numpy as np from sklearn.svm import SVR from sklearn.model_selection import GridSearchCV # Define data X = np.array([[1000], [700], [500], [200]]) y = np.array([1, 0.75, 0.5, 0.25]) # Define model model = SVR(kernel='rbf', gamma='scale') # Define hyperparameters params = {'C' : [0.1, 1, 10, 100], 'epsilon': [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]} # Grid search for best hyperparameters model_cv = GridSearchCV(model, param_grid=params, cv=3, scoring='neg_mean_squared_error') # Fit the model model_cv.fit(X, y) # Best hyperparameters print(\\"Best hyperparameters:\\", model_cv.best_params_) # Best score print(\\"Best score:\\", model_cv.best_score_)"},{"prompt":"Create a Python program to generate a random IP address.","completion":"import random def generateRandomIP(): ip = \\".\\".join(str(random.randint(0,255)) for i in range(4)) return ip ip_address = generateRandomIP() print(\\"Random IP address:\\", ip_address)"},{"prompt":"Create a simple API in Python to register and log in users Not applicable","completion":"import flask from flask import request, jsonify from flask_sqlalchemy import SQLAlchemy app = flask.Flask(name) app.config[\\"SQLALCHEMY_DATABASE_URI\\"] = \\"sqlite:///users.sqlite3\\" db = SQLAlchemy(app) class User(db.Model): id = db.Column(db.Integer, primary_key=True) username = db.Column(db.String(50), unique=True, nullable=False) password = db.Column(db.String(80), unique=True, nullable=False) db.create_all() @app.route('/users/register', methods=['POST']) def register(): user_data = request.get_json() username = user_data['username'] password = user_data['password'] new_user = User(username=username, password=password) db.session.add(new_user) db.session.commit() return jsonify({\\"message\\": f\\"User {username} was successfully created!\\"}), 201 @app.route('/users/login', methods=['POST']) def login(): user_data = request.get_json() username = user_data['username'] password = user_data['password'] user = User.query.filter_by(username=username, password=password).first() if user: return jsonify({\\"message\\": f\\"User {username} is successfully logged in!\\"}), 200 return jsonify({\\"message\\": \\"Invalid credentials\\"}), 401 if name == 'main': app.run(debug=True)"},{"prompt":"Optimize a python program that prints out all the even numbers in a list using list comprehension. numbers = [1,2,3,4,5,6,7,8,9,10]","completion":"even_numbers = [x for x in numbers if x % 2 == 0] print(even_numbers)"},{"prompt":"Given a Python dictionary, write a function to invert the keys and values of the dictionary. my_dict = {'A':1, 'B':2, 'C':3}","completion":"def invert_dict(dictionary): inverted_dict = {} for key, value in dictionary.items(): inverted_dict[value] = key return inverted_dict inverted_dict = invert_dict(my_dict) print(inverted_dict)"},{"prompt":"Write a python code to generate a unique URL using a randomly generated string.","completion":"import random import string def generate_random_string(num_chars): # Generate a random string of length num_chars chars = string.ascii_uppercase + string.ascii_lowercase + string.digits random_string = \\"\\" for i in range(num_chars): random_string += random.choice(chars) return random_string def generate_unique_url(base_url): random_string = generate_random_string(8) unique_url = base_url + random_string return unique_url if __name__ == '__main__': output = generate_unique_url('www.example.com/') print(output)"},{"prompt":"Create a python function to calculate the most frequent element from a given list. arr = [3, 4, 6, 7, 3, 6, 8, 7, 6]","completion":"def most_frequent_element(arr): frequencies = {} max_frequency = 0 element = None for item in arr: if item in frequencies: frequencies[item] += 1 else: frequencies[item] = 1 if frequencies[item] > max_frequency: max_frequency = frequencies[item] element = item return element if __name__ == '__main__': arr = [3, 4, 6, 7, 3, 6, 8, 7, 6] print(most_frequent_element(arr))"},{"prompt":"Write a Python program to combine two dictionaries by adding values for common keys. d1 = {'a' : 100, 'b' : 200, 'c' : 300} d2 = {'a' : 300, 'b' : 200, 'd' : 400}","completion":"def combine_dicts(d1, d2): new_dict = {} for item in d1: if item in d2: new_dict[item] = d1[item] + d2[item] else: new_dict[item] = d1[item] for item in d2: if item in d1: new_dict[item] = d1[item] + d2[item] else: new_dict[item] = d2[item] return new_dict d1 = {'a' : 100, 'b' : 200, 'c' : 300} d2 = {'a' : 300, 'b' : 200, 'd' : 400} print(combine_dicts(d1, d2)) # {'a': 400, 'b': 400, 'c': 300, 'd': 400}"},{"prompt":"Generate a random 5letter word using a code for a Python program.","completion":"import random alphabet = 'abcdefghijklmnopqrstuvwxyz' def generate_random_word(): word = '' for i in range(5): word += random.choice(alphabet) return word print(generate_random_word())"},{"prompt":"Construct a program to automate the task of sending email","completion":"import smtplib # Sender email address and password sender_email = \\"example@gmail.com\\" password = \\"your_password\\" # Receiver email address rec_email = \\"example@gmail.com\\" # Message to send message = \\"This is a message from Python\\" # Email subject subject = \\"Automated Email from Python\\" # Email body body = \\"Subject: {}nn{}\\".format(subject, message) # Initialize the server server = smtplib.SMTP(\\"smtp.gmail.com\\", 587) server.starttls() # Login with sender email and password server.login(sender_email, password) # Send the email server.sendmail(sender_email, rec_email, body) # Quit the server server.quit()"},{"prompt":"Create a block of code for a Python program to generate a multiplication table for a given number. num = 6","completion":"# Create a multiplication table for a given number num = 6 # Loop to generate the table for i in range(1, 11): print(f'{num} x {i} = {num * i}')"},{"prompt":"Modify this Python program to sort a given list of numbers. numbers = [2, 3, 4, 5, 1]","completion":"numbers.sort() print(numbers) # prints [1, 2, 3, 4, 5]"},{"prompt":"Build a Python program to validate a given password against a given set of criteria. password = Aa#123 criteria = at least 8 characters, one uppercase letter, one lowercase letter, one number, and one special character","completion":"def validate_password(password, criteria): isValid = True criteriaList = criteria.split() # Split criteria into list # Check length if len(password) < 8: isValid = False # Check for uppercase if not any(c.isupper() for c in password): isValid = False # Check for lowercase if not any(c.is lower() for c in password): isValid = False # Check for number if not any(c.isdigit() for c in password): isValid = False # Check for special character specialCharacters = set(\\"!@#%^&*()_+=-/?.,><':;|][}{\`~\\") if not any(c in specialCharacters for c in password): isValid = False return isValid"},{"prompt":"dentify a type of all the variables in the Python expression below. n = 15.7","completion":"The variable n is a float."},{"prompt":"Optimize the following Python program to ensure performance def find_first_occurrence(arr, x): for item in arr: if item == x: return arr.index(item)","completion":"def find_first_occurrence(arr, x): for i in range(len(arr)): if arr[i] == x: return i"},{"prompt":"Develop a program in Python for counting the occurrences of a given character in a string. String: abcdefg Character:","completion":"def countOccurences(str, char): count = 0 for ch in str: if ch == char: count += 1 return count print(countOccurences('abcdefg', 'a'))"},{"prompt":"Code a GUI application in Python that takes user input and displays a response.","completion":"import tkinter as tk def user_input(): entered_text = input_field.get() output.configure(text= \\"You entered: \\" + entered_text) # basic window window = tk.Tk() window.title(\\"My GUI Application\\") # title of the window window.geometry(\\"250x250\\") # size of the window # adding a label label = tk.Label(window, text=\\"Enter your input:\\") label.pack() # adding a text box input_field = tk.Entry(window) input_field.pack() # button to submit data submit_button = tk.Button(window, text=\\"Submit\\", command=user_input) submit_button.pack() # output field output = tk.Label(window, text=\\"Output Here\\") output.pack() window.mainloop()"},{"prompt":"Create a command line tool for generating a random strong password. Not applicable","completion":"#!/usr/bin/env python import string import random length = int(input(\\"Enter the desired password length: \\")) characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(characters) for i in range(length)) print(f\\"Generated password: {password}\\")"},{"prompt":"Write a Python program to preprocess and clean a given dataset. The dataset has been collected from an online survey by a company about the customer satisfaction. The dataset contains 500 rows and 7 columns about age, job type, region, gender, salary, satisfaction and feedback from the survey.","completion":"import pandas as pd # loading dataset data = pd.read_csv('data.csv') # preprocessing age column data['age'] = data['age'].apply(lambda x: int(x)) # preprocessing job type data['job type'].replace({ 'manager': 1, 'clerk': 2, 'data analyst': 3 }, inplace=True) # preprocessing region data['region'].replace({ 'east': 1, 'west': 2, 'south': 3, 'north': 4 }, inplace=True) # preprocessing gender data['gender'].replace({ 'male': 1, 'female': 0 }, inplace=True) # preprocessing salary data['salary'].replace({ 'low': 1, 'medium': 2, 'high': 3 }, inplace=True) # preprocessing satisfaction data['satisfaction'].replace({ 'no': 0, 'yes': 1 }, inplace=True) # preprocessing feedback data['feedback'] = data['feedback'].str.lower() # drop NA values data.dropna(inplace=True)"},{"prompt":"Write a web scraper in Python which retrieves all comments made by users in a particular subreddit. Not applicable","completion":"# import necessary libraries import requests from bs4 import BeautifulSoup # specify URL URL = \\"https://www.reddit.com/r/askreddit/\\" # send GET request req = requests.get(URL) # parse HTML soup = BeautifulSoup(req.content, 'html.parser') # identify all comments comments = soup.find_all('div', attrs = {\\"class\\": \\"usertext-body\\"}) # store comments in a list comments_list = [] # extract and append comment contents to the list for comment in comments: comments_list.append(comment.text.strip()) # print the list of comments print(comments_list)"},{"prompt":"Create a function in Python to validate the syntax of the given code. code: def myFunc(param1, param2): statement1 statement2","completion":"def validate_syntax(code): try: compile(code, '<string>', 'exec') return True except SyntaxError: return False"},{"prompt":"Create a Python program to classify a given email message as either unwanted or legitimate.","completion":"import re from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB def clean_text(text): text = re.sub('[^A-Za-z0-9]+', ' ', text) text = text.lower() return text def train_test_split(data): total_values = len(data) test_percent = 0.2 train_values = int(total_values - (test_percent * total_values)) return data[0: train_values], data[train_values+1: total_values] def create_model(data): # data cleaning for i in range(len(data)): data[i][0] = clean_text(data[i][0]) x_train, x_test = train_test_split(data) # feature extraction and model training cv = CountVectorizer() x_train_vec = cv.fit_transform(x_train[:, 0]) x_test_vec = cv.transform(x_test[:, 0]) clf = MultinomialNB() clf.fit(x_train_vec, x_train[:, 1]) # model testing score = clf.score(x_test_vec, x_test[:, 1]) return clf, score # Driver Code data = [['this is an unwanted message', 0],['this is a legitimate message', 1]] model, score = create_model(data) print(\\"Model Accuracy:\\", score)"},{"prompt":"Develop a Python program to create a function to convert temperatures from Celsius to Fahrenheit. Not applicable","completion":"def convert_celsius(celsius): # Convert celsius to Fahrenheit fahrenheit = celsius * 9/5 + 32 # Return fahrenheit value return fahrenheit # Test celsius = 32 print(convert_celsius(celsius))"},{"prompt":"Create an automated web scraper in Python that will collect data from a website and store the data in a MySQL database. Not applicable","completion":"import requests import mysql.connector # Connect to MySQL database db = mysql.connector.connect( host=\\"localhost\\", user=\\"yourusername\\", passwd=\\"yourpassword\\", database=\\"yourdatabase\\" ) mycursor = db.cursor() # Make the request to the website r = requests.get('http://example.com') # Parse the response content = r.content html_content = BeautifulSoup(content, 'html.parser') table = html_content.find('table') # Store data in database for row in table.find_all('tr'): cols = row.find_all('td') sql = \\"INSERT INTO tablename (column1, column2, column3) VALUES (%s, %s, %s)\\" val = (cols[0].text, cols[1].text, cols[2].text) mycursor.execute(sql, val) db.commit()"},{"prompt":"Write a Python program to detect outofrange values in a given column of a data set. column = Salary dataset = { John: {Salary: 75000, Age: 30}, Sam: {Salary: 90000, Age: 45}, Jill: {Salary: 120000, Age: 25}, Thomas: {Salary: 80000, Age: 40} }","completion":"for row in dataset.values(): salary = row['Salary'] if salary < 40000 or salary > 100000: print(\\"Out-of-range value: {}\\".format(salary))"},{"prompt":"Develop a method in Python for removing all duplicate elements from an array. [1, 3, 5, 4, 6, 3, 5, 4]","completion":"def removeDuplicates(arr): newArr = [] for i in arr: if i not in newArr: newArr.append(i) return newArr arr = [1, 3, 5, 4, 6, 3, 5, 4] result = removeDuplicates(arr) print(result)"},{"prompt":"Design an algorithm in Python for sorting a given array of numbers in descending order. An array of integers [3, 5, 7, 2, 4, 1]","completion":"def bubble_sort(arr): length = len(arr) for i in range(length - 1, 0, -1): for j in range(0, i): if arr[j] < arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] return arr a = [3, 5, 7, 2, 4, 1] print(bubble_sort(a)) # [7, 5, 4, 3, 2, 1]"},{"prompt":"Generate a program in any language to remove the duplicates from an array.","completion":"#Python def remove_duplicates(arr): new_arr = [] for i in arr: if i not in new_arr: new_arr.append(i) return new_arr arr = [1, 2, 3, 1, 4, 2, 3] print(\\"The array without duplicates is:\\", remove_duplicates(arr))"},{"prompt":"Suggest an efficient algorithm for sorting an array of integers in Python. [1, 5, 3, 8, 4, 2]","completion":"def sort_array(array): for i in range(len(array)): lowest = i for j in range(i + 1, len(array)): if array[lowest] > array[j]: lowest = j array[i], array[lowest] = array[lowest], array[i] return array result = sort_array([1, 5, 3, 8, 4, 2]) print(result)"},{"prompt":"Create a Python program that takes an array of numbers and returns the index of the first number that is the duplicate of an earlier encountered number. [5, 7, 9, 3, 1, 3]","completion":"def find_first_duplicate(arr): seen = dict() for i, n in enumerate(arr): if n in seen: return i else: seen[n] = True return -1 arr = [5, 7, 9, 3, 1, 3] print(find_first_duplicate(arr)) # Output: 4"},{"prompt":"Load a dataset of credit card transactions in a Python program.","completion":"import pandas as pd df = pd.read_csv(\\"credit_card_transactions.csv\\")"},{"prompt":"Create a Python function that takes a list of strings as input and returns a dictionary of words with their frequency counts. words = [apple, orange, apple, orange, pear]","completion":"def word_count(words): counter = {} for word in words: if word not in counter: counter[word] = 0 counter[word] += 1 return counter words = [\\"apple\\", \\"orange\\", \\"apple\\", \\"orange\\", \\"pear\\"] word_count(words) \\"\\"\\" {'apple': 2, 'orange': 2, 'pear': 1} \\"\\"\\""},{"prompt":"Create a Python script that preprocesses a dataset by performing data imputation, normalization, and scaling. Not applicable","completion":"# Import libraries import numpy as np import pandas as pd # Read in the dataset data = pd.read_csv('dataset.csv') # Impute missing values data.fillna(data.mean(), inplace=True) # Normalize data data_norm = (data - data.min())/(data.max() - data.min()) # Scale data from sklearn.preprocessing import StandardScaler scaler = StandardScaler() data_scale = scaler.fit_transform(data_norm) # Output the result print(\\"Data Preprocessing complete! n\\", data_scale)"},{"prompt":"Create a web scraper in Python to extract all the titles and descriptions from the website https://example.com. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') titles = soup.find_all('h2') descriptions = soup.find_all('p') for title in titles: print(title.text) for description in descriptions: print(description.text)"},{"prompt":"mplement a Python program to encrypt a given message with a given key. message = Hello, World! key = abc","completion":"def encrypt_message(message, key): encrypted_message = \\"\\" for i in range(len(message)): x = (ord(message[i]) + ord(key[i % len(key)])) % 26 x += ord('A') encrypted_message += chr(x) return encrypted_message"},{"prompt":"Convert the following C code that takes a list and adds each number to the list to Python. int arr[] = {1, 2, 3, 4}; int result = 0; for (int i = 0; i < sizeof(arr) / sizeof(arr[0]); i++){ result += arr[i]; }","completion":"arr = [1, 2, 3, 4] result = 0 for i in range(len(arr)): result += arr[i]"},{"prompt":"Develop a program in Python to find the GCD of two numbers. a = 30, b = 15","completion":"def gcd(a, b): if a == 0 : return b return gcd(b % a, a) # Driver program print(gcd(30,15))"},{"prompt":"Build an objectoriented Python program that allows a user to do basic operations such as creating objects, manipulating them, and deleting them.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age def getInfo(self): return (self.name, self.age) # Create an object p1 = Person(\\"John\\", 36) print(p1.getInfo()) # Modifying object properties p1.age = 40 print(p1.getInfo()) # Deleting Object Properties del p1.age print(p1.getInfo()) # Deleting Objects del p1"},{"prompt":"Find the maximum value of a 10 element array in Python. array = [1, 7, 3, 4, 5, 9, 8, 0, 2, 6]","completion":"# Max value in array def max_val(array): max_val = array[0] for num in array[1:]: if num > max_val: max_val = num return max_val"},{"prompt":"Create a logistic regression model in Python to detect spam emails. Not applicable","completion":"# Importing the libraries import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression # Importing the dataset dataset = pd.read_csv('spam_emails.csv') # Preprocessing corpus = dataset.iloc[:, 0].values # Create the DV y = dataset.iloc[:, -1].values # Create the bag of words model cv = CountVectorizer(max_features=2500) X = cv.fit_transform(corpus).toarray() # Fitting Logistic Regression to the Training set classifier = LogisticRegression() classifier.fit(X, y)"},{"prompt":"Create a textbased user interface using Python.","completion":"options=[\\"Create\\",\\"Update\\",\\"Delete\\",\\"Retrieve\\",\\"Quit\\"] def createUI(): while True: for i in range(len(options)): print(str(i+1)+\\" \\"+options[i]) try: inputValue=int(input('Make your selection:')) if inputValue in range(1,len(options)+1): break else: print('Please select a valid option!') except: print('Please select a valid option!') return inputValue print(createUI())"},{"prompt":"Create a scoring system in Python that will output a score between 0 and 10 for a given text based on key words retrieved from a lexicon. A lexicon containing the words ‘happy’, ‘sad’, 'angry'.","completion":"import re def score_sentiment(text, lexicon): # Convert text to lowercase text = text.lower() # Create a score score = 0 for word in re.findall(r\\"w+\\", text): if word in lexicon: score += lexicon[word] score = float(score) / len(text) # Convert score to 0-10 score = score * 10 # Return score return round(score, 2) if __name__ == \\"__main__\\": lexicon = { 'happy': 1, 'sad': -1, 'angry': -3 } text = 'I am feeling happy' score = score_sentiment(text, lexicon) print ('Score:', score)"},{"prompt":"Using Python, write a program to find the most common element among a list of numbers [4, 8, 9, 4, 6, 4, 8]","completion":"def most_frequent(list): return max(set(list), key = list.count) list = [4, 8, 9, 4, 6, 4, 8] print(most_frequent(list))"},{"prompt":"mplement a Tree class to represent trees in Python.","completion":"class Tree: def __init__(self): self.children = [] self.data = None def add_child(self, child): self.children.append(child) def get_data(self): return self.data def set_data(self, data): self.data = data"},{"prompt":"Create a Python function to check if two strings are anagrams of each other or not. An anagram is a String that contains the same characters as another String but in a different order","completion":"def is_anagram(str1, str2): list_str1 = list(str1) list_str1.sort() list_str2 = list(str2) list_str2.sort() return (list_str1 == list_str2)"},{"prompt":"Write a Python program that takes in a list and outputs the sum of the elements in the list. [1, 2, 3, 4, 5]","completion":"sum = 0 for x in [1,2,3,4,5]: sum += x print(sum)"},{"prompt":"Design an algorithm in python to solve the Towers of Hanoi puzzle. Number of discs: 3","completion":"def hanoi(discs, start, temp, end): if discs > 0: hanoi(discs - 1, start, end, temp) end.append(start.pop()) hanoi(discs - 1, temp, start, end)"},{"prompt":"Write a Python program to sort a dictionary by its keys. d = {name: John, age: 24, class: Engineering}","completion":"d = {\\"name\\": \\"John\\", \\"age\\": 24, \\"class\\": \\"Engineering\\"} sorted_d = sorted(d.items(), key=lambda x: x[0]) print(sorted_d)"},{"prompt":"Write a Python program to remove the nth index character from a nonempty string. text = Python n = 0","completion":"def remove_nth_index(text, n): return text[:n] + text[n + 1:]"},{"prompt":"Create a Python program that computes the square root of a number without using the math library. 25","completion":"def sqrt(x): guess = x i = 0 while guess * guess != x and i < 20: guess = (guess + x / guess) / 2.0 i += 1 return guess print(sqrt(25))"},{"prompt":"Design a Python program to classify an email as spam or not. No inpu","completion":"import nltk import re def classify_email(email): email_words = re.findall(\\"[a-zA-Z0-9]+\\", email) frequency = nltk.FreqDist(email_words) common_words = frequency.most_common(30) spam_words = [\\"buy\\", \\"free\\", \\"unlimited\\", \\"cash\\", \\"click\\", \\"amazing\\"] is_spam = False for word in common_words: if word in spam_words: is_spam = True if is_spam: print(\\"This email is classified as SPAM.\\") else: print(\\"This email is classified as NOT SPAM.\\")"},{"prompt":"Optimize a Python program to calculate the volume of a cube. def volume_of_cube(edge_length): return edge_length * edge_length * edge_length print(volume_of_cube(3))","completion":"def volume_of_cube(edge_length): return edge_length ** 3 print(volume_of_cube(3))"},{"prompt":"Write a Python function that takes a list and returns the number of elements that are divisible by 3. list = [4, 6, 8, 9, 10]","completion":"def number_divisible_by_3(list): count = 0 for item in list: if item % 3 == 0: count += 1 return count result = number_divisible_by_3(list) print(result)"},{"prompt":"Create a machine learning classifier in Python using scikitlearn to predict whether or not an email is spam. Not applicable","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Load the data df = pd.read_csv('data.csv') # Split the data X_train, X_test, y_train, y_test = train_test_split(df['message'], df['label'], test_size=0.2) # Vectorize the data vec = CountVectorizer() X_train_count = vec.fit_transform(X_train.values) X_test_count = vec.transform(X_test.values) # Train the model clf = MultinomialNB() clf.fit(X_train_count, y_train) # Test the model score = clf.score(X_test_count, y_test) print(score)"},{"prompt":"Create a scheduling algorithm in Python that takes a list of tasks as an input and returns the optimal schedule. tasks = [ { 'start': 1, 'end': 3, 'task': 'Task 1' }, { 'start': 2, 'end': 4, 'task': 'Task 2' }, { 'start': 5, 'end': 8, 'task': 'Task 3' }, { 'start': 6, 'end': 10, 'task': 'Task 4' } ]","completion":"def schedule(tasks): # sort tasks by start time tasks.sort(key=lambda x: x['start']) # track current time time = 0 # results list results = [] while len(tasks) > 0: # find the next task that can be completed next_task = None for task in tasks: if task['start'] >= time: next_task = task break # if no task can be completed, break out of the loop if next_task == None: break # remove the task from the list tasks.remove(next_task) # add the task to the results and update the time results.append(next_task) time = next_task['end'] return results print(schedule(tasks))"},{"prompt":"Can you design an algorithm in Python for finding the largest element in a list? [2, 4, 9, 1, 8]","completion":"def max_element(lst): max_element = lst[0] for element in lst: if element > max_element: max_element = element return max_element"},{"prompt":"Create a Python file and copy the given code. The code includes functions to convert an image filename to a hash, render a response, and redirect to a URL based on a given object or a 'next' GET parameter in the request.","completion":"import os.path import hashlib from django.shortcuts import render_to_response from django.template.context import RequestContext from django.http import HttpResponseRedirect def get_image_path(instance, filename): \\"\\"\\" Converts an image filename to a hash. \\"\\"\\" name = hashlib.md5(\\"%s\\" % instance.id).hexdigest() ext = os.path.splitext(filename) return os.path.join(\\"%s/%s\\" % (instance._meta.app_label, instance._meta.module_name), '%s%s' % (name, ext[1])) def render(request, *args, **kwargs): \\"\\"\\" Simple wrapper for render_to_response. \\"\\"\\" kwargs['context_instance'] = RequestContext(request) return render_to_response(*args, **kwargs) def redirect(request, obj=None): \\"\\"\\" Simple wrapper for HttpResponseRedirect that checks the request for a 'next' GET parameter then falls back to a given object or url string. \\"\\"\\" next = request.GET.get('next', None) redirect_url = '/' if next: redirect_url = next elif isinstance(obj, str): redirect_url = obj elif obj and hasattr(obj, 'get_absolute_url'): redirect_url = obj.get_absolute_url() return HttpResponseRedirect(redirect_url)"},{"prompt":"Write a Python program to extract all the links from a web page.","completion":"from bs4 import BeautifulSoup import requests url = 'https://www.example.com' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') links = [] for link in soup.find_all('a'): links.append(link.get('href')) print(links)"},{"prompt":"Generate a Python program that uses a recursive function to reverse a given string combining with loops and conditionals. thequickbrownfox","completion":"def reverseString(s): if len(s) == 0: return s else: return reverseString(s[1:]) + s[0] # Driver code s = \\"thequickbrownfox\\" print (\\"The original string is : \\",end=\\"\\") print (s) print (\\"The reversed string(using recursion) is : \\",end=\\"\\") print (reverseString(s))"},{"prompt":"Write a Python program to find the most frequent item in a given list of data. data = [0,0,1,1,2,3,3,3,3,3,0,0]","completion":"max_count = 0 max_element = None for element in data: count = data.count(element) if count > max_count: max_element = element max_count = count print(max_element)"},{"prompt":"Create a Python script for optimizing data sets using fuzzy cmeans clustering. 5 1.3 2.3 1.1 2.2 3.2 1.7 3.1 4.1 2.9 4.2 5.1 3.7 5.3 6.2 4.2","completion":"from sklearn.cluster import FuzzyCMeans import numpy as np # Input data data = np.array([[1.3, 2.3, 1.1], [2.2, 3.2, 1.7], [3.1, 4.1, 2.9], [4.2, 5.1, 3.7], [5.3, 6.2, 4.2]]) # Fuzzy C-Means Clustering # Set the number of clusters nclusters = 3 # Create the Fuzzy C-Means clustering object fcm = FuzzyCMeans(n_clusters=nclusters) # Train the model using the data fcm.fit(data) # Get the optimized cluster centers and membership values cluster_centers = fcm.cluster_centers_ memberships = fcm.u # Print the cluster centers print('Optimized Cluster Centers: ') print(cluster_centers) # Print the cluster memberships print('Optimized Membership Values: ') print(memberships)"},{"prompt":"Rewrite this C++ loop in Python: for(int i=0; i<10; i++) { cout << i; }","completion":"for i in range(10): print(i)"},{"prompt":"Write a Python script to generate a list of random numbers with specified length.","completion":"import random length = 5 rand_nums = [random.randint(0,100) for i in range(length)] print(rand_nums)"},{"prompt":"mprove the following Python script to load the data in the absence or presence of the header. import pandas as pd data = pd.read_csv('mydata.csv')","completion":"import pandas as pd #Variable to indicate presence of Header has_header = False #Read CSV data = pd.read_csv('mydata.csv',header=None) #Check for presence of Header if data.iloc[0,0] != 'Column1': has_header = True #Read again with header if has_header: data = pd.read_csv('mydata.csv')"},{"prompt":"Design a Python class for representing a binary search tree.","completion":"class TreeNode: def __init__(self,data): self.data = data self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def insert(self,data): node = TreeNode(data) if self.root is None: self.root = node else: current = self.root while True: if data < current.data: if current.left: current = current.left else: current.left = node break elif data > current.data: if current.right: current = current.right else: current.right = node break else: break"},{"prompt":"Suggest some improvements to the following Python program. def is_prime(x): if x > 1: i = 2 while i < x: if (x % i) == 0: return False i+= 1 return True","completion":"def is_prime(x): if x < 2: return False elif x == 2: return True elif x % 2 == 0: return False else: for i in range(2, x): if x % i == 0: return False return True"},{"prompt":"Design a function in Python to get the largest number in an array of numbers. [2, 11, 15, 9, 5]","completion":"def get_largest_number(arr): largest = arr[0] for num in arr: if num > largest: largest = num return largest largest_num = get_largest_number([2, 11, 15, 9, 5]) print(largest_num)"},{"prompt":"Write a function in Python that finds the longest consecutive sequence in a given array. array = [2, 5, 1, 4, 3, 5, 7, 6]","completion":"def find_longest_sequence(arr): max_length = 0 start_index = 0 # find first non-matching element while start_index < len(arr) - 1 and arr[start_index] + 1 == arr[start_index + 1]: start_index += 1 # compare subsequent elements for i in range(start_index + 1, len(arr)): prev = arr[i-1] curr = arr[i] # count length of consecutive sequence if prev + 1 == curr: length = i - start_index + 1 # update max length if length > max_length: max_length = length else: # current sequence ended, reset start_index = i return max_length"},{"prompt":"Find the most frequent element in an array in Python. [1, 3, 3, 3, 5, 4, 4, 6]","completion":"from collections import Counter def most_frequent(arr): c = Counter(arr) return c.most_common(1)[0][0] arr = [1, 3, 3, 3, 5, 4, 4, 6] print(most_frequent(arr)) # Output: 3"},{"prompt":"Write a Python program that takes in an email address, checks it is valid and then prints the domain. email = test@example.com","completion":"import re def validate_email(email): regex = '^[a-z0-9]+[._]?[a-z0-9]+[@]w+[.]w{2,3}' if(re.search(regex,email)): domain = email.split('@')[1] print(\\"Domain name:\\", domain) else: print(\\"Invalid Email\\") email = \\"test@example.com\\" validate_email(email)"},{"prompt":"Build a function in Python to output a list of the first n Fibonacci numbers.","completion":"def Fibonacci(n): # Taking 1st two Fibonacci numbers as 0 and 1 FibArray = [0, 1] for i in range(2, n): FibArray.append(FibArray[i-2] + FibArray[i-1]) return FibArray[:n] print(Fibonacci(7)) # [0, 1, 1, 2, 3, 5, 8]"},{"prompt":"Can you develop a Python class to calculate the cross entropy loss between two probability distributions?","completion":"import numpy as np class CrossEntropy: def __init__(self): pass def loss(self, p, q): return - np.sum(p * np.log(q))"},{"prompt":"Write a Python script that takes two string inputs, a first name and a last name and returns the full name. John Smith","completion":"def get_full_name(first, last): full_name = f\\"{first} {last}\\" return full_name name = get_full_name(\\"John\\", \\"Smith\\") print(name)"},{"prompt":"Suggest a way to shuffle a python list of integers my_list = [1,2,3,4,5]","completion":"import random def shuffle_list(lst): random.shuffle(lst) return lst my_list = [1,2,3,4,5] shuffled_list = shuffle_list(my_list) print(shuffled_list)"},{"prompt":"Create a web scraper using Python to scrape the title of all articles on a given website and store them in a list. URL: http://example.com/articles","completion":"import requests from bs4 import BeautifulSoup url = \\"http://example.com/articles\\" r = requests.get(url) html = r.text soup = BeautifulSoup(html, \\"html.parser\\") titles = [] for art in soup.find_all(\\"h2\\"): titles.append(art.get_text()) print(titles)"},{"prompt":"Write a Python program to find all possible anagrams from a given set of words. words = [eat, tea, tan, ate, nat, bat]","completion":"from itertools import permutations def possible_anagrams(words): anagrams = set() for word in words: perm_words = [''.join(perm) for perm in permutations(word)] for perm_word in perm_words: if perm_word in words: anagrams.add(perm_word) return anagrams possible_anagrams(words)"},{"prompt":"Rewrite the following python code to be more concise while still producing the same output. for i in range(10): for j in range(10): print()","completion":"for i in range(10): print(\\"------------n\\"*10)"},{"prompt":"Write a python script that takes a list of strings as input and reverse the order of each sentence. sentences = [Hello world!, I am learning Python!, How are you?]","completion":"sentences = [\\"Hello world!\\", \\"I am learning Python!\\", \\"How are you?\\"] reversed_sentences = [sentence[::-1] for sentence in sentences] print(reversed_sentences) # Output: [\\"!dlrow olleH\\", \\"!nohtyP gninrael m'I\\", \\"?uoy era woH\\"]"},{"prompt":"Write a Python function which extracts zip codes from a provided string. My address is 123 Main St, ZIP 12345","completion":"import re def extract_zip_codes(string): zip_codes = re.findall(\\"(?<=ZIP )d+\\", string) return zip_codes print(extract_zip_codes(\\"My address is 123 Main St, ZIP 12345\\"))"},{"prompt":"Write a Python program to generate a list of even numbers between two given numbers. Start value = 2 End value = 20","completion":"def generate_list(start, end): result = [] for i in range(start, end+1): if i%2 == 0: result.append(i) return result print(generate_list(2, 20))"},{"prompt":"Generate a program in Python to count the occurrence of an element in a given list","completion":"def count_element(list, element): count = 0 for i in list: if i == element: count += 1 return count"},{"prompt":"Write a python program to convert a string to int and float. Not applicable","completion":"# define a string string = \\"12345\\" # convert string to int integer = int(string) # convert string to float floating = float(string) # print results print(\\"String: \\", string) print(\\"Integer: \\", integer) print(\\"Float: \\", floating) # Output # String: 12345 # Integer: 12345 # Float: 12345.0"},{"prompt":"Write a Python code that takes a string as input and removes all punctuation and nonalphabetic characters. string = This!, &is. %string# 1","completion":"def remove_non_alphabetic(string): new_string = \\"\\" for char in string: if char.isalpha(): new_string += char return new_string print(remove_non_alphabetic(string)) # prints Thisisstring"},{"prompt":"Create a Python program to remove the given item from a list. [1, 2, 3, 4], 2","completion":"def remove_item(lst, item): while item in lst: lst.remove(item) return lst result = remove_item([1, 2, 3, 4], 2) print(result)"},{"prompt":"Design a web API with Python that allows users to get, post, and delete posts from a blog. Not applicable","completion":"from flask import Flask from flask_restful import Api, Resource, reqparse app = Flask(__name__) api = Api(app) class Post(Resource): parser = reqparse.RequestParser() parser.add_argument('title', type=str, required=True, help=\\"This field cannot be left blank!\\") parser.add_argument('content', type=str, required=True, help=\\"This field cannot be left blank!\\") def get(self,id): return {'post': None}, 404 def post(self,id): return {'message': 'post created successfully'}, 201 def delete(self,id): return {'message': 'post deleted successfully'}, 200 api.add_resource(Post, '/post/<int:id>') if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python script to print out the multiplication table for the given number. 4","completion":"def printMultTable(n): for i in range(1, 11): print(n, 'x', i, '=', n*i) printMultTable(4)"},{"prompt":"Make a Python program to find the second smallest element in an array of numbers. [4, 5, 6, 7, 1, 2, 4]","completion":"def secondSmallest(arr): arr_size = len(arr) if arr_size < 2: print \\"Invalid Input\\" return # If there are more than two elements, # find the second smallest first, second = 9999999, 9999999 for i in range(0, arr_size): # If current element is smaller than first # then update both first and second if arr[i] < first: second = first first = arr[i] # If arr[i] is in between first and # second then update second elif (arr[i] < second and arr[i] != first): second = arr[i] if second == 9999999: print \\"No second smallest element\\" else: print'The second Smallest element is', second arr = [4, 5, 6, 7, 1, 2, 4] secondSmallest(arr)"},{"prompt":"Create a Python program to scale the values of an array by adding a scalar value and then dividing each element of the new array by a scalar value. [1,2,3], scalar:2","completion":"def scaleArray(arr, s1, s2): scaledArr = [] for x in arr: scaledArr.append((x + s1) / s2) return scaledArr arr = [1,2,3] scaledArr = scaleArray(arr, 2, 2) print(scaledArr)"},{"prompt":"Design an algorithm in Python to optimize a given set of objects for a given goal. Objects: A, B, C, D Goal: Maximize value","completion":"def optimize(objects, goal): max_value = -float(\\"inf\\") best_config = None for config in generate_configs(objects): value = evaluate_config(config) if value > max_value: max_value = value best_config = config return best_config def generate_configs(objects): # Generate all possible combinations of the objects def evaluate_config(config): # Evaluate the value of the configuration for the given goal"},{"prompt":"mplement a Bayesian classifier in Python to identify whether a given tweet is positive or negative. I am feeling great today!","completion":"import re import nltk from sklearn.naive_bayes import MultinomialNB # Define a function to pre-process the tweet def pre_process_tweet(tweet): # tokenization tokens = nltk.word_tokenize(tweet.lower()) # stopwords removal stopwords = nltk.corpus.stopwords.words('english') tokens = [token for token in tokens if token not in stopwords] # stemming stemmer = nltk.stem.PorterStemmer() tokens = [stemmer.stem(token) for token in tokens] # remove punctuations punctuations = '!?#\`%^&*()_-+={}[]:;'\\"|<>,/' tokens = [token for token in tokens if token not in punctuations] # return the cleaned tweet return tokens # Define the training data X_train = [\\"I am feeling great today!\\", \\"I am feeling sad today.\\", \\"Today was an incredible day!\\", \\"Today was an awful day!\\"] y_train = [1, 0, 1, 0] # Pre-process the training data X_train_cleaned = [pre_process_tweet(tweet) for tweet in X_train] # Create the corpus corpus = [] for tweet in X_train_cleaned: for word in tweet: corpus.append(word) # Calculate the frequency of the words in the corpus freq = nltk.FreqDist(corpus) X_train_cleaned_vector = [] for tweet in X_train_cleaned: vector = [] for word in freq.keys(): if word in tweet: vector.append(1) else: vector.append(0) X_train_cleaned_vector.append(vector) # Train the Bayes classifier classifier = MultinomialNB().fit(X_train_cleaned_vector, y_train) # Pre-process the given tweet tweet = \\"I am feeling great today!\\" tweet_cleaned = pre_process_tweet(tweet) # Vectorize the tweet vector = [] for word in freq.keys(): if word in tweet_cleaned: vector.append(1) else: vector.append(0) # Predict if the tweet is positive or negative pred = classifier.predict([vector])[0] if pred == 1: print(\\"The tweet is positive!\\") else: print(\\"The tweet is negative!\\")"},{"prompt":"Develop a recursive program in Python to traverse a given binary tree inorder.","completion":"class Node: # Constructor to create a new binary node def __init__(self, data): self.data = data self.left = None self.right = None def inorder(root): if root: # First recur on left child inorder(root.left) # then print the data of node print(root.data) # now recur on right child inorder(root.right) # Driver program to test the above function root = Node(1) root.left = Node(2) root.right = Node(3) root.left.left = Node(4) root.left.right = Node(5) inorder(root)"},{"prompt":"Write a Python function to calculate the probability of an event occurring. p = 0.8","completion":"def probability(p): return p print(f\\"The probability of the event occurring is {probability(p)}\\")"},{"prompt":"Create a function in Python to print the top five characters from the provided string in descending order of frequency. aaabbbcccccc","completion":"def top_five_characters(string): char_freq = {} for char in string: if char in char_freq: char_freq[char] += 1 else: char_freq[char] = 1 # Sort the Characters in descending order of frequency sorted_freq = sorted(char_freq, key=char_freq.get, reverse=True)[:5] return sorted_freq print(top_five_characters('aaabbbcccccc'))"},{"prompt":"Create a python script to print the following patterns in the output","completion":"def print_pattern(n): k = 0 for i in range(1, n+1): # logic to print pattern for j in range(i, n+1): print(\\"* \\", end=\\"\\") k = 0 for j in range(1, i*2): if k == 0: print(i, end=\\"\\") k += 1 else: print(\\"\\", end=\\"\\") print() if __name__ == '__main__': print_pattern(4)"},{"prompt":"Create a Python script to print the multiples of 4 up to 200.","completion":"for i in range(0, 201, 4): print(i)"},{"prompt":"This code generates correct horse battery staple passwords on Unix. To use it, run the script with the desired options. The available options are: c n: count n words in password (Default: 5) m N: max length of words to use (Default: 8) n n: min length of words to use (Default: 4) s s: word separator to use (Default: ) p /path/to/words: Add this file to look for words in. If none specified, file(s) used are determined automatically. v: verbose print of more common password entropies for comparison h: print help.","completion":"#!/usr/bin/env python # # The MIT License (MIT) # # Copyright (c) 2014-2021 David Goh <david@goh.id.au> # # Permission is hereby granted, free of charge, to any person obtaining a copy # of this software and associated documentation files (the \\"Software\\"), to deal # in the Software without restriction, including without limitation the rights # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell # copies of the Software, and to permit persons to whom the Software is # furnished to do so, subject to the following conditions: # # The above copyright notice and this permission notice shall be included in all # copies or substantial portions of the Software. # # THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE # SOFTWARE. # # # Python script to generate correct horse battery staple passwords on Unix # http://xkcd.com/936/ from random import SystemRandom import getopt import itertools import math import os import os.path import string import sys COPYRIGHT = \\"Copyright (c) 2014 David Goh <david@goh.id.au>\\" AUTHOR = \\"David Goh <david@goh.id.au> - https://goh.id.au/~david/\\" SOURCE = \\"GIT: https://github.com/thorfi/pass-words-py\\" LICENSE = \\"MIT License - https://github.com/thorfi/pass-words-py/blob/master/LICENSE\\" DEFAULT_MAX_WORD_LEN = 8 DEFAULT_MIN_WORD_LEN = 4 DEFAULT_WORD_COUNT = 5 DEFAULT_WORD_SEPARATOR = \\" \\" WORDS_SUB_PATHS = ( \\"share/dict/words\\", \\"dict/words\\", \\"share/words\\", \\"words\\", ) DEFAULT_WORDS_PATHS = set() for p in os.environ[\\"PATH\\"].split(\\":\\"): p = os.path.dirname(p.rstrip(os.path.sep)) for w in WORDS_SUB_PATHS: w_path = os.path.join(p, w) if os.path.isfile(w_path): DEFAULT_WORDS_PATHS.add(w_path) def usage_exit(msg=None): \\"\\"\\"Exit with a potential error message.\\"\\"\\" exitcode = 0 f = sys.stderr if msg else sys.stdout if msg is not None: print(\\"Error:\\", msg, file=f) exitcode = 1 print(\\"Usage:\\", sys.argv[0], \\"[...]\\", file=f) print( \\"\\"\\" Python script that generates correct horse battery staple passwords from Unix dictionaries See https://xkcd.com/936/ -c n: count n words in password (Default: {}) -m N: max length of words to use (Default: {}) -n n: min length of words to use (Default: {}) -s s: word separator to use (Default: {!r}) -p /path/to/words: Add this file to look for words in. If none specified, file(s) used: {} -v: verbose print of more common password entropies for comparison -h: print this help \\"\\"\\".format( DEFAULT_WORD_COUNT, DEFAULT_MAX_WORD_LEN, DEFAULT_MIN_WORD_LEN, DEFAULT_WORD_SEPARATOR, \\":\\".join(DEFAULT_WORDS_PATHS), ), file=f, ) sys.exit(exitcode) def main(): words_paths = [] word_count = DEFAULT_WORD_COUNT max_word_len = DEFAULT_MAX_WORD_LEN min_word_len = DEFAULT_MIN_WORD_LEN word_separator = DEFAULT_WORD_SEPARATOR verbose = False try: opts, remainder_args = getopt.getopt( sys.argv[1:], \\"p:c:m:n:s:vh\\", [ \\"path=\\", \\"count=\\", \\"max=\\", \\"min=\\", \\"sep=\\", \\"verbose\\", \\"help\\", ], ) except getopt.GetoptError as exc: usage_exit(str(exc)) assert False for o, a in opts: if o in (\\"-c\\", \\"--count\\"): try: word_count = int(a) except ValueError as exc: usage_exit(f\\"--count={a!r} {str(exc)}\\") elif o in (\\"-m\\", \\"--max\\"): try: max_word_len = int(a) except ValueError as exc: usage_exit(f\\"--max={a!r} {str(exc)}\\") elif o in (\\"-n\\", \\"--min\\"): try: min_word_len = int(a) except ValueError as exc: usage_exit(f\\"--min={a!r} {str(exc)}\\") elif o in (\\"-p\\", \\"--path\\"): if not os.path.isfile(a): usage_exit(f\\"--path={a!r} is not a file\\") words_paths.append(a) elif o in (\\"-s\\", \\"--sep\\"): word_separator = a elif o in (\\"-v\\", \\"--verbose\\"): verbose = True elif o in (\\"-h\\", \\"--help\\"): usage_exit() else: usage_exit(f\\"unknown option {o} {a!r}\\") if max_word_len < min_word_len: usage_exit(f\\"--max={max_word_len} < --min={min_word_len}\\") min_word_len = DEFAULT_MIN_WORD_LEN entropies = [] if verbose: desc_texts = ( (\\"ASCII lowercase letters\\", string.ascii_lowercase), (\\"ASCII letters\\", string.ascii_letters), (\\"ASCII letters or digits\\", string.ascii_letters + string.digits), (\\"ASCII printable non whitespace\\", \\"\\".join(string.printable.split())), ) counts = (8, 10, 16, 20) for (desc, text), n in itertools.product(desc_texts, counts): len_text = len(text) choices = len_text ** n choices_desc = f\\"{n:2d}*[{len_text:d} {desc}]\\" entropies.append((choices, choices_desc)) if not words_paths: words_paths = list(DEFAULT_WORDS_PATHS) words = set() for wp in words_paths: with open(wp) as wf: for line in (line.strip().lower() for line in wf): if min_word_len < len(line) < max_word_len: words.add(line) def count_choices(len_w, w_count): if w_count == 1: return len_w assert w_count > 1 return len_w * count_choices(len_w - 1, w_count - 1) len_words = len(words) choices = count_choices(len_words, word_count) choices_desc = ( f\\"{word_count:2d}*[{len_words:d} words ({min_word_len:d}-{max_word_len:d} letters) from {':'.join(words_paths)}]\\" ) entropies.append((choices, choices_desc)) if len(entropies) > 1: print(\\"Bit Entropy comparisons\\") entropies.sort() for n, d in entropies: print(f\\"{math.log(n, 2):5.1f} bits - {d}\\") random = SystemRandom() words = random.sample(list(words), word_count) for word in words: print(word) print(word_separator.join(words)) if __name__ == \\"__main__\\": main()"},{"prompt":"Write a Python program to find all prime numbers less than a given number.","completion":"def find_primes(n): primes = [] for i in range(2, n+1): is_prime = True for j in range(2, i): if i % j == 0: is_prime = False break if is_prime: primes.append(i) return primes print(find_primes(10)) # prints [2, 3, 5, 7]"},{"prompt":"Write a Python program to print out the ASCII table.","completion":"def print_ascii_table(): for i in range(32, 127): print(f\\"Character:{chr(i)}, ASCII Number:{i}\\")"},{"prompt":"Create a function in Python to convert a list of strings to a single long string ['Hello', 'World', '!']","completion":"def list_to_string(list_str): long_str = '' for i in list_str: long_str += i return long_str list_str = ['Hello', 'World', '!'] string = list_to_string(list_str) print(string) # prints 'HelloWorld!'"},{"prompt":"Write a Python script to find the second highest number in a list of numbers. [12, 2, 6, 8, 19, 15]","completion":"list_nums = [12, 2, 6, 8, 19, 15] # sorting the list in ascending order list_nums.sort() # printing the second last element print(\\"Second highest number is:\\", list_nums[-2])"},{"prompt":"Write a Python code that prints Hello World if the user inputs Y and Goodbye if they input N.","completion":"user_input = input('Input Y or N: ') if user_input == 'Y': print('Hello World') elif user_input == 'N': print('Goodbye')"},{"prompt":"Create a Python function that sorts a list of strings alphabetically [‘apple’,’orange’,’pear’]","completion":"def sort_strings(list_of_strings): sorted_list = sorted(list_of_strings, key=lambda str: str.lower()) return sorted_list result = sort_strings(['apple', 'orange', 'pear']) print(result)"},{"prompt":"Create a program in Python that uses a for loop to output the division of two numbers. Number 1: 5 Number 2: 3","completion":"for i in range(2): print(5/3)"},{"prompt":"Write a python script that extracts data from a JSON object and stores it in a new array. { name: John Doe, age: 30, occupation: programmer }","completion":"data = [{ \\"name\\": \\"John Doe\\", \\"age\\": 30, \\"occupation\\": \\"programmer\\" }] arr = [] for item in data: arr.append(item) print(arr)"},{"prompt":"Design a function in Python to convert the temperature from Celsius to Fahrenheit.","completion":"def celsiusToFahrenheit(celsius): fahrenheit = celsius * 9/5 + 32 return fahrenheit"},{"prompt":"Develop a Python function to check if a given string contains a palindrome. moon","completion":"def is_palindrome(s): return s == s[::-1] print(is_palindrome(\\"moon\\"))"},{"prompt":"Create a python program to print the Fibonacci sequence for the first ten numbers.","completion":"def fibonacciSequence(n): a = 0 b = 1 sequence = [a, b] for _ in range(2, n): c = a + b a = b b = c sequence.append(c) return sequence print(fibonacciSequence(10)) # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"prompt":"Create a Python algorithm that returns the length of the longest increasing subsequence in an array. [10, 9, 2, 5, 3, 7, 101, 18]","completion":"def LongestIncreasingSubsequence(arr): N = len(arr) lis = [1]*N for i in range (1 , N): for j in range(0 , i): if arr[i] > arr[j] and lis[i]< lis[j] + 1 : lis[i] = lis[j]+1 maximum = 0 for i in range(N): maximum = max(maximum , lis[i]) return maximum arr = [10, 9, 2, 5, 3, 7, 101, 18] print(\\"Length of Longest Increasing Subsequence is\\", LongestIncreasingSubsequence(arr))"},{"prompt":"Change the following Python code to a generator. def fibonacci(n): if n < 0: return; result = [] prev = 0 current = 1 result.append(prev) result.append(current) while(n 2): temp = current current += prev prev = temp result.append(current) n = n 1 return resul","completion":"def fibonacci(n): prev, current = 0, 1 while(n): yield prev prev, current = current, prev + current n = n - 1 # Driver Code result = list(fibonacci(10)) print(result) # prints [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"},{"prompt":"Create a python function that finds the median value of a list of integers, where the length of the list is greater than two.","completion":"def find_median(lst): lst.sort() if len(lst) % 2 != 0: return lst[len(lst)//2] return (lst[len(lst)//2] + lst[len(lst)//2 - 1]) / 2.0"},{"prompt":"Design a Python algorithm to parse a list of strings and prints the longest string's length. listOfString= [I, am, so, happy]","completion":"listStrings= [\\"I\\", \\"am\\", \\"so\\", \\"happy\\"] longestStringLen = 0 for string in listStrings: if (len(string) > longestStringLen): longestStringLen = len(string) print(longestStringLen)"},{"prompt":"Create a basic HTML page for a portfolio website. The page should include sections for About Me, Skills, Experience, and Projects. Not applicable","completion":"<!DOCTYPE html> <html> <head> <title>My Portfolio</title> </head> <body> <h1>My Portfolio</h1> <h2>About Me</h2> <p> Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. </p> <h2>Skills</h2> <ul> <li>HTML</li> <li>CSS</li> <li>JavaScript</li> <li>Python</li> </ul> <h2>Experience</h2> <ul> <li>Company 1 (Jan. 2017 - Present) <ul> <li>Position 1</li> </ul> </li> <li>Company 2 (Jan. 2012 - Dec. 2016) </li> </ul> <h2>Projects</h2> <ul> <li>Project 1</li> <li>Project 2</li> <li>Project 3</li> </ul> </body> </html>"},{"prompt":"Using Python, generate a program for solving linear equations. x + 2y = 8 3x – 4y = 2","completion":"def solution(coefficients): # get the coefficients of the equations a = coefficients[0][0] b = coefficients[0][1] c = coefficients[0][2] d = coefficients[1][0] e = coefficients[1][1] f = coefficients[1][2] # solve for x and y y = (a*f - c*d)/(a*e - b*d) x = (c*e - b*f)/(a*e - b*d) # return the solutions return x, y # example solution([[1, 2, 8], [3, -4, -2]])"},{"prompt":"Edit an existing Python program to calculate the area of a circle. import math def area(radius): return math.pi * radius ** 2","completion":"import math def area(radius): area = math.pi * radius ** 2 return area"},{"prompt":"Construct a convolutional neural network from scratch in Python to classify MNIST digits.","completion":"import torch import torch.nn as nn import torch.nn.functional as F class MnistNet(nn.Module): def __init__(self): super(MnistNet, self).__init__() self.conv1 = nn.Conv2d(1, 10, kernel_size=5) self.conv2 = nn.Conv2d(10, 20, kernel_size=5) self.conv2_drop = nn.Dropout2d() self.fc1 = nn.Linear(320, 50) self.fc2 = nn.Linear(50, 10) def forward(self, x): x = F.relu(F.max_pool2d(self.conv1(x), 2)) x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2)) x = x.view(-1, 320) x = F.relu(self.fc1(x)) x = F.dropout(x, training=self.training) x = self.fc2(x) return F.log_softmax(x)"},{"prompt":"Create a Python script to calculate the running sum of an array. [1, 2, 3, 4, 5]","completion":"# Create a function to compute running sum def running_sum(lst): running_sum = 0 running_lst = [] for num in lst: running_sum += num running_lst.append(running_sum) return running_lst # Test array test = [1, 2, 3, 4, 5] # Print the result print(running_sum(test))"},{"prompt":"Convert the given JSON data into python dictionary. {key: value}","completion":"import json json_data = '{\\"key\\": \\"value\\"}' pydict = json.loads(json_data) print (\\"Python dictionary:\\", pydict)"},{"prompt":"Create a JSON object for an employee. The employee should have a unique ID, name, email address, date of birth, and list of skills. Not applicable","completion":"{ \\"id\\": 1, \\"name\\": \\"John Smith\\", \\"email\\": \\"john@example.com\\", \\"dob\\": \\"1996-02-28\\", \\"skills\\": [ \\"JavaScript\\", \\"HTML\\", \\"CSS\\", \\"Python\\" ] }"},{"prompt":"Beginning with a Python list of two names, edit the list code to include a third name. names = [John, Mary]","completion":"names = [\\"John\\", \\"Mary\\", \\"Lucas\\"]"},{"prompt":"Convert the following statement into a function in Python. If a given number is divisible by 4 and greater than 1000, print TRUE","completion":"def count_divisible_by_four(num): \\"\\"\\"Prints \\"True\\" if the given number is divisible by 4 and greater than 1000\\"\\"\\" if num >= 1000 and num % 4 == 0: print(\\"TRUE\\")"},{"prompt":"Create a Python script that checks whether a given string is a palindrome. malayalam","completion":"def isPalindrome(str): # Run loop from 0 to len/2 for i in range(0, len(str)//2): if str[i] != str[len(str)-i-1]: return False return True # main myStr = \\"malayalam\\" ans = isPalindrome(myStr) if ans: print(\\"The given string is a palindrome\\") else: print(\\"The given string isn't a palindrome\\")"},{"prompt":"Create a post request in Python using the requests library to roll a die on a website. Not applicable","completion":"import requests url = 'http://roll-dice-game.com/roll' payload = { 'number-of-dice': 1 } r = requests.post(url, data=payload) print(r.text) # Output: The dice rolled a 3!"},{"prompt":"Create an algorithm in Python to count the number of unique elements in a list. [1, 2, 3, 1, 2]","completion":"def countUnique(arr): # create a lookup to keep track of elements lookup = set() # loop over list to add elements to set for elem in arr: if elem not in lookup: lookup.add(elem) # return the length of the lookup set return len(lookup) # test program arr = [1, 2, 3, 1, 2] print(countUnique(arr))"},{"prompt":"Use Python to modify the list below by swapping the first and last elements. [3, 6, 8, 5, 4]","completion":"[4, 6, 8, 5, 3]"},{"prompt":"Write a Python code to print a dictionary where the keys are numbers between 1 and 15 (both included) and the values are square of keys.","completion":"my_dict ={} for num in range(1, 16): my_dict[num] = num*num print(my_dict)"},{"prompt":"Can you provide a piece of code in Python to split a string on a certain delimiter? string = Hello,how,are,you","completion":"my_list = string.split(\\",\\")"},{"prompt":"Write a Python program that randomly generates a response from a predetermined list when a button is pressed. Not applicable","completion":"import random responses = [\\"Hello!\\", \\"How are you?\\", \\"Good to meet you!\\", \\"Nice to see you!\\"] def get_random_response(): return random.choice(responses) while True: input(\\"Press any key to generate a response... \\") print(get_random_response())"},{"prompt":"Create a python program to simulate the rolling of three sixsided dice and print out the results.","completion":"import random # Function to simulate rolling 3 dice def roll_dice(): d1 = random.randint(1, 6) d2 = random.randint(1, 6) d3 = random.randint(1, 6) print(d1, d2, d3) # Roll the dice 3 times for roll in range(3): roll_dice()"},{"prompt":"Create a python code to generate a dictionary of char counts for a given string. input_string = Hello World!","completion":"def char_count_dict(input_string): char_dict = {} for char in input_string: if char in char_dict: char_dict[char] += 1 else: char_dict[char] = 1 return char_dict print(char_count_dict(input_string))"},{"prompt":"mplement the Naive Bayes classifier in Python to solve a multiclass classification problem.","completion":"import numpy as np from sklearn.naive_bayes import GaussianNB # declare data X = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4]]) Y = np.array([0, 1, 2, 3, 4]) # create Gaussian Naive Bayes model object and train it with the data clf = GaussianNB() clf.fit(X, Y) # predict the outcome predicted_label = clf.predict([[2, 0]]) print(predicted_label)"},{"prompt":"Create a Python program to print the number of days in a month. Not applicable","completion":"def num_of_days(month): if month == \\"January\\" or month == \\"March\\" or month == \\"May\\" or month == \\"July\\" or month == \\"August\\" or month == \\"October\\" or month == \\"December\\": return \\"31 days\\" elif month == \\"April\\" or month == \\"June\\" or month == \\"September\\" or month == \\"November\\": return \\"30 days\\" elif month == \\"February\\": return \\"28 or 29 days\\" else: return \\"Invalid input\\" month = \\"January\\" print(num_of_days(month))"},{"prompt":"Write a PYTHON program to find the profit or loss after selling a product. cost_price = 10 selling_price = 15","completion":"def find_profit(cost_price, selling_price): profit = selling_price - cost_price return profit"},{"prompt":"Write a Python program to print the first 10 positive integers in reverse order.","completion":"for i in range(10, 0, -1): print(i)"},{"prompt":"Create a Python program to find the most frequent words in a given text. The program should return the top 10 words with their associated frequencies. specific text = This is a test. We are testing the frequency of certain words in this sentence","completion":"import collections text = \\"This is a test. We are testing the frequency of certain words in this sentence\\" # Split string into list of words words = text.split() # Create dictionary to store frequency of words word_freq = {} # Loop through words to create dictionary for word in words: if word not in word_freq.keys(): word_freq[word] = 1 else: word_freq[word] += 1 # Sort dictionary by frequency in descending order words_sorted = sorted(word_freq.items(), key=lambda x: x[1], reverse=True) # Print the top 10 most frequent words print(\\"Most frequent words and their frequencies:\\") for word, freq in words_sorted[:10]: print(word, freq)"},{"prompt":"Create a Python Django web application for a catalog, that includes a page with a list of the catalog items and a page to add/edit entries. Not applicable","completion":"# models.py from django.db import models class Item(models.Model): name = models.CharField(max_length=50) description = models.TextField() price = models.FloatField() # urls.py from django.urls import path from catalog import views urlpatterns = [ path('list', views.item_list, name='item_list'), path('add-edit', views.add_edit_item, name='add_edit_item'), ] # views.py from django.shortcuts import render from catalog.models import Item def item_list(request): items = Item.objects.all() context = {'items': items} return render(request, 'catalog/item_list.html', context) def add_edit_item(request): return render(request, 'catalog/add_edit_item.html', {})"},{"prompt":"Generate a unit test suite for a Python console application. A logfile containing several test case","completion":"import unittest import logging logging.basicConfig(level=logging.DEBUG) class TestApp(unittest.TestCase): def test_positive(self): \\"\\"\\"Test a logfile containing apositive outcome.\\"\\"\\" with open('test1.log', 'r') as f: log = f.read() self.assertTrue('Passed' in log) def test_negative(self): \\"\\"\\"Test a logfile containing a negative outcome.\\"\\"\\" with open('test2.log', 'r') as f: log = f.read() self.assertFalse('Failed' in log) if __name__ == '__main__': unittest.main()"},{"prompt":"Write a Python program to print the elements of a list from the last to the first. _list = [1,2,3,4,5]","completion":"_list = [1,2,3,4,5] # Iterate through the list in reverse order for i in range(len(_list) - 1, -1, -1): print(_list[i]) # Output: # 5 # 4 # 3 # 2 # 1"},{"prompt":"Create a Python game using loops and conditions, in which a user has to guess a secret word. word = secret","completion":"secret_word = \\"secret\\" guessed_word = \\"\\" guess_limit = 3 while guess_limit > 0: failed = 0 for char in secret_word: if char in guessed_word: print(char, end = \\" \\") else: print(\\"_\\", end = \\" \\") failed += 1 if failed == 0: print(\\"You Win!\\") break print(\\"n\\") guess = input(\\"Guess a character: \\") guessed_word = guessed_word + guess guess_limit -= 1 if guess_limit == 0: print(\\"You Lose!\\")"},{"prompt":"Create a library in Python to visualize the given data set. Dataset: Age Height Weigh","completion":"# Imports import matplotlib.pyplot as plt # Dataset data = <dataframe containing data> # Plotting the data plt.scatter(data['Age'], data['Height'], marker='.') plt.xlabel('Age') plt.ylabel('Height') plt.title('Age vs Height') plt.show() plt.bar(data['Weight'], data['Height'], align='center', alpha=0.5) plt.xlabel('Weight') plt.ylabel('Height') plt.title('Weight vs Height') plt.show()"},{"prompt":"Design a hash table in Python that can store a given keyvalue pair. Key: apple; Value: red","completion":"class HashTable: def __init__(self): self.table = {} def put(self, key, value): self.table[key] = value def get(self, key): return self.table[key] # example hash_table = HashTable() hash_table.put('apple', 'red') hash_table.get('apple') # returns 'red'"},{"prompt":"Write a python program to iterate over two lists and print only the common items. list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8]","completion":"list1 = [1, 2, 3, 4, 5] list2 = [4, 5, 6, 7, 8] for i in list1: if i in list2: print(i)"},{"prompt":"Develop a Python program to implement the FizzBuzz task.","completion":"def fizzbuzz(n): for num in range(1, n+1): if num % 3 == 0 and num % 5 == 0: print(\\"FizzBuzz\\") elif num % 3 == 0: print(\\"Fizz\\") elif num % 5 == 0: print(\\"Buzz\\") else: print(num)"},{"prompt":"Write a Python program to display a histogram of the frequencies of words in a given sentence. Sentence: My name is John","completion":"import matplotlib.pyplot as plt # Data to plot labels = 'My', 'name', 'is', 'John' sizes = [1, 1, 1, 1] # Plot plt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=90) plt.axis('equal') plt.show()"},{"prompt":"Create a function in Python that will take an array of integers and find the two numbers with the largest sum. [1, 3, 5, 7, 9]","completion":"def findMaxSum(input): num1 = -float('inf') num2 = -float('inf') for num in input: if num > num1: num2 = num1 num1 = num elif num > num2: num2 = num return num1 + num2"},{"prompt":"Develop an algorithm in Python for sorting the given array in increasing order [5, 4, 3, 2, 1]","completion":"def bubbleSort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [5, 4, 3, 2, 1] bubbleSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Write a Python script to parse a JSON object.","completion":"import json json_data = '{\\"name\\":\\"John\\", \\"age\\":30, \\"city\\":\\"New York\\"}' obj = json.loads(json_data) print(\\"Name:\\", obj[\\"name\\"]) print(\\"Age:\\", obj[\\"age\\"]) print(\\"City:\\", obj[\\"city\\"])"},{"prompt":"Create a REST API endpoint in Python to handle a POST request and make updates to a database. Not applicable","completion":"from flask import Flask import mysql.connector # create the app and connect to the database app = Flask(__name__) conn = mysql.connector.connect( host=\\"localhost\\", user=\\"db_user\\", passwd=\\"password\\", database=\\"my_db\\" ) # handle POST request @app.route(\\"/my_endpoint\\", methods=[\\"POST\\"]) def handle_post_request(): # get the data from the request data = request.get_json() # connect to the database cursor = conn.cursor() # write data to database query = \\"INSERT INTO my_table (field1, field2) VALUES (%s, %s)\\" cursor.execute(query, (data[\\"field1\\"], data[\\"field2\\"])) conn.commit() return \\"Success!\\""},{"prompt":"Create a function in Python to return the index of the largest value in given array. arr = [3, 8, 4, 5, 9]","completion":"def max_index(arr): max_value = arr[0] max_index = 0 for i in range(1, len(arr)): if arr[i] > max_value: max_index = i max_value = arr[i] return max_index"},{"prompt":"Write a Python program that takes two lists and performs a comparison between them. list1 = [1, 2, 3] list2 = [2, 3, 4]","completion":"def compare_lists(lst1, lst2): lst1 = set(lst1) lst2 = set(lst2) same = lst1.intersection(lst2) diff1 = lst1.difference(lst2) diff2 = lst2.difference(lst1) return same, diff1, diff2 result = compare_lists([1,2,3], [2,3,4]) print(result)"},{"prompt":"Write a Python program to generate HTML code which produces a table with 10 rows and 4 columns and applies a gradient background to the table cells. Not applicable","completion":"# Python code # start HTML tag html = '<html>n' # start table html += '<table style=\\"background: linear-gradient(90deg, #feedba, #fffd, #abdefa, #247ba0);\\">n' # loop for 10 rows for i in range(10): # start table row html += ' <tr>n' # loop for 4 columns for j in range(4): # add table cell with index html += f' <td>{i+1},{j+1}</td>n' # end table row html += ' </tr>n' # end table html += '</table>n' # end HTML tag html += '</html>' # print output print(html)"},{"prompt":"Create a Python script that includes the following functions: mean_accuracy(groundtruth, predictions): calculates the mean accuracy between the groundtruth and predictions using the confusion matrix from sklearn.metrics. ensure_dir(address): checks if the directory at the given address exists, and creates it if it doesn't. draw_bbox(img, bbox, color=100, width=2): draws a rectangle with the given color and width around the bounding box (bbox) on the given image (img). get_rect(img, rect_info): returns the rectangular region of the image (img) defined by the coordinates (xmin, xmax, ymin, ymax) in rect_info. get_rect_from_bbox(img, bbox): returns the rectangular region of the image (img) defined by the bounding box (bbox). l2_feat_norm(feat): normalizes the feature vector (feat) using L2 normalization.","completion":"import numpy import sklearn.metrics import os import cv2 import numpy as np def mean_accuracy(groundtruth, predictions): groundtruth_cm = sklearn.metrics.confusion_matrix(groundtruth, groundtruth).astype(numpy.float32) predictions_cm = sklearn.metrics.confusion_matrix(predictions, groundtruth).astype(numpy.float32) return numpy.mean(numpy.diag(predictions_cm) / numpy.diag(groundtruth_cm)) def ensure_dir(address): if not os.path.exists(address): os.makedirs(address) def draw_bbox(img, bbox, color=100, width=2): try: bx, by, bw, bh = int(bbox[0]), int(bbox[1]), int(bbox[2]), int(bbox[3]) except: bx, by, bw, bh = bbox new_img = img.copy() cv2.rectangle(new_img, (bx, by), (bx+bw, by+bh), color, width) return new_img def get_rect(img, rect_info): xmin, xmax, ymin, ymax = rect_info return img[xmin:xmax, ymin:ymax] def get_rect_from_bbox(img, bbox): by, bx, bw, bh = int(bbox[0]), int(bbox[1]), int(bbox[2]), int(bbox[3]) return img[bx:bx+bh, by:by+bw] def l2_feat_norm(feat): row_norms = np.linalg.norm(feat, axis=1) new_feat = feat / row_norms[:, np.newaxis] return new_feat"},{"prompt":"The given code is a Python program that reads a log file, extracts puzzle URLs from it, and downloads the corresponding images. To use this program, you need to provide a log file as a commandline argument. Optionally, you can also provide a destination directory to save the downloaded images. Here are the steps to use this program: 1. Open a terminal or command prompt. 2. Navigate to the directory where the Python program is saved. 3. Run the program with the following command: python logpuzzle.py [todir dir] logfile Replace logfile with the path to the log file you want to process. Replace dir with the path to the directory where you want to save the images (optional). 4. Wait for the program to finish. It will download the puzzle images and save them to the specified directory (or the current directory if no directory is specified). 5. If you provided a destination directory, open it to view the downloaded images and an index.html file that displays them. 6. If you did not provide a destination directory, the program will print the URLs of the puzzle images to the console. You can copy and paste these URLs into a web browser to view the images.","completion":"#!/usr/bin/python # Copyright 2010 Google Inc. # Licensed under the Apache License, Version 2.0 # http://www.apache.org/licenses/LICENSE-2.0 # Google's Python Class # http://code.google.com/edu/languages/google-python-class/ import os import re import sys from urllib.request import urlretrieve from pathlib import Path \\"\\"\\"Logpuzzle exercise Given an apache logfile, find the puzzle urls and download the images. Here's what a puzzle url looks like: 10.254.254.28 - - [06/Aug/2007:00:13:48 -0700] \\"GET /~foo/puzzle-bar-aaab.jpg HTTP/1.0\\" 302 528 \\"-\\" \\"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6\\" \\"\\"\\" def read_urls(filename): \\"\\"\\"Returns a list of the puzzle urls from the given log file, extracting the hostname from the filename itself. Screens out duplicate urls and returns the urls sorted into increasing order.\\"\\"\\" hostname = 'http://' + filename with open(filename) as file: log = file.read() images_list = re.findall('S*/images/puzzleS*', log) images = sorted(set(images_list)) return [hostname + image for image in images] def download_images(img_urls, dest_dir): \\"\\"\\"Given the urls already in the correct order, downloads each image into the given directory. Gives the images local filenames img0, img1, and so on. Creates an index.html in the directory with an img tag to show each local image file. Creates the directory if necessary. \\"\\"\\" path = Path(dest_dir) if not path.exists(): path.mkdir() for i, img_url in enumerate(img_urls): img_filename = 'img%03d.jpg' % i urlretrieve(img_url, '%s/%s' % (dest_dir, img_filename)) with open('%s/index.html' % dest_dir, 'a') as file: file.write('<img src=\\"%s\\" />n' % img_filename) def main(): args = sys.argv[1:] if not args: print('usage: [--todir dir] logfile ') sys.exit(1) todir = '' if args[0] == '--todir': todir = args[1] del args[0:2] img_urls = read_urls(args[0]) if todir: download_images(img_urls, todir) else: print('n'.join(img_urls)) if __name__ == '__main__': main()"},{"prompt":"Design a program in Python to take two numbers as input and return their product. num1 = 5 num2 = 7","completion":"def multiply(num1, num2): product = num1 * num2 return product num1 = 5 num2 = 7 product = multiply(num1, num2) print('Product of', num1, 'and', num2, 'is', product) # prints 'Product of 5 and 7 is 35'"},{"prompt":"Generate a valid Python program for sorting a given array. [3, 7, 5, 1, 9, 8, 2]","completion":"def selectionSort(arr): for i in range(len(arr)): # Find the minimum element in remaining # unsorted array min_index = i for j in range(i+1, len(arr)): if arr[min_index] > arr[j]: min_index = j # Swap the found minimum element with the first element arr[i], arr[min_index] = arr[min_index], arr[i] # test arr = [3, 7, 5, 1, 9, 8, 2] selectionSort(arr) print (\\"Sorted array:\\") for i in range(len(arr)): print(arr[i]),"},{"prompt":"Create a function in Python to count the number of vowels in a sentence. This is a sample sentence","completion":"def countVowels(sentence): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] vowel_count = 0 for char in sentence.lower(): if char in vowels: vowel_count += 1 return vowel_count sentence = \\"This is a sample sentence\\" vowel_count = countVowels(sentence) print(f\\"Number of vowels in the sentence = {vowel_count}\\")"},{"prompt":"Create a loop to print out the following pattern in Python.","completion":"for i in range(1, 6): print(\\"*\\" * i) for j in range(1, i+1): print(j, end=\\"\\") print()"},{"prompt":"Write a Python script to find the area of a triangle when three sides are given. a = 3 b = 4 c = 5","completion":"# calculate the semi-perimeter s = ( a + b + c ) / 2 # calculate the area area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 print('The area of the triangle is %0.2f' %area) // Output: The area of the triangle is 6.00"},{"prompt":"Train a machine learning model in Python to predict whether a website will convert given a set of features. Features: Cookie size, Browser, Device, Country","completion":"# import necessary libraries import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # read data into pandas dataframe data = pd.read_csv(\\"data.csv\\") # separate the features and labels X = data.drop(\\"label\\", axis=1) y = data[\\"label\\"] # split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42) # create the model model = LogisticRegression() # fit the model model.fit(X_train, y_train) # predict using the model y_pred = model.predict(X_test) # score the model score = model.score(X_test, y_test)"},{"prompt":"Can you generate a sytax tree of a given Python statement? statement = x = 5;","completion":"Syntax Tree: Assign(targets=[Name(id='x', ctx=Store())], value=Num(n=5))"},{"prompt":"Write a Python program to implement a stack using two queues","completion":"class Stack: def __init__(self): self.queue1 = [] self.queue2 = [] def push(self,data): self.queue1.append(data) def pop(self): if len(self.queue1) == 0: return None while len(self.queue1) > 1: temp = self.queue1.pop(0) self.queue2.append(temp) elem = self.queue1.pop(0) self.queue1, self.queue2 = self.queue2, self.queue1 return elem"},{"prompt":"Write a Python program to remove an item from a dictionary based on its key.","completion":"def remove_from_dict(dictionary, key): if key in dictionary.keys(): del dictionary[key]"},{"prompt":"Create a program in Python which seeks for a number in a given list. [2, 5, 7, 8, 11, 13] seek: 8","completion":"list = [2, 5, 7, 8, 11, 13] seek = 8 if seek in list: print(\\"Found!\\") else: print(\\"Not Found\\")"},{"prompt":"Generate a Python program that computes the Euclidean distance between two points in a twodimensional space. Point A x: 3, y: 5 Point B x: 7, y: 6","completion":"import math # Define the two points pointA = (3, 5) pointB = (7, 6) # Calculate the Euclidean distance distance = math.sqrt( (pointB[0] - pointA[0])**2 + (pointB[1] - pointA[1])**2 ) print(\\"The Euclidean distance between the two points is:\\", distance)"},{"prompt":"Build a web service in Python that performs sentiment analysis on a passed string using the TextBlob library. The web service should return a JSON object containing the sentiment score between 1 and 1. Not applicable","completion":"from flask import Flask, request, jsonify from textblob import TextBlob app = Flask(__name__) @app.route('/sentiment/analyze', methods=['POST']) def sentiment(): request_data = request.get_json() sentence = request_data['sentence'] blob = TextBlob(sentence) sentiment = blob.sentiment.polarity response_object = { 'sentiment': sentiment } return jsonify(response_object) if __name__ == '__main__': app.run()"},{"prompt":"Create a basic scoring engine in Python that takes two numbers and returns the higher of the two. 5, 6","completion":"def higher_number(num1, num2): if num1 > num2: return num1 else: return num2 print(higher_number(5, 6)) # 6"},{"prompt":"Create a binary search algorithm in Python","completion":"def binary_search(item, lst): start = 0 end = len(lst) - 1 while start <= end: mid = (start + end) // 2 if lst[mid] == item: return mid elif lst[mid] < item: start = mid + 1 else: end = mid - 1 return -1"},{"prompt":"Create a python program to print all two dimensional subarrays in a given twodimensional array two_dimensional_array = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"for i in range(len(two_dimensional_array)): for j in range(i+1): for k in range(len(two_dimensional_array[i])): print(two_dimensional_array[j][k], end=\\" \\") print()"},{"prompt":"Compose a python program which takes a list of strings as an argument and returns the most common string. l1 = ['a', 'b', 'a', 'c', 'a', 'b']","completion":"def most_common_string(l): freq = {} for s in l: if s in freq: freq[s] += 1 else: freq[s] = 1 max_freq = 0 most_common = None for k, v in freq.items(): if v > max_freq: most_common = k max_freq = v return most_common l1 = ['a', 'b', 'a', 'c', 'a', 'b'] most_common = most_common_string(l1) print(most_common) # Output: a"},{"prompt":"Write a Python program to send an email with the subject Welcome to our website!.","completion":"import smtplib # Options server = 'smtp.gmail.com' port = 587 password = 'my-password' # Sending Email senderEmail = 'sender@gmail.com' recieverEmail = 'reciever@gmail.com' subject = 'Welcome to our website!' body = 'Thank you for visiting our website!' message = f'Subject: {subject}nn{body}' # Connecting to SMTP server server = smtplib.SMTP(server, port) server.starttls() server.login(senderEmail, password) # Sending the email server.sendmail(senderEmail, recieverEmail, message)"},{"prompt":"Create a Python class to process credit card payments.","completion":"class CreditCardProcessor: def __init__(self): self.cards = {} self.payments = {} def add_card(self, card_number, card_holder_name): self.cards[card_number] = card_holder_name def process_payment(self, card_number, amount): if card_number not in self.cards: raise ValueError(f'{card_number} is not a valid card number.') if amount < 0: raise ValueError('Payment cannot be negative.') self.payments[card_number] = amount print(f'Payment of {amount} processed for {self.cards[card_number]}') def get_total_payments(self): return sum(self.payments.values())"},{"prompt":"Write a Python program to print out the factorial of a number. 7","completion":"def factorial(x): factorial = 1 while x > 1: factorial = factorial * x x = x - 1 return factorial number = 7 result = factorial(number) print(result)"},{"prompt":"Construct a method in Python that reverses a given string","completion":"def reverse(s): if len(s) == 0: return s else: return reverse(s[1:]) + s[0]"},{"prompt":"Write a Python program which takes the length and width of a rectangle as input and returns its perimeter. length = 10, width = 5","completion":"def get_perimeter(length, width): return 2 * (length + width) perimeter = get_perimeter(10, 5) print(perimeter)"},{"prompt":"Create a Django project which is a REST API for a todo list app.","completion":"# Create a Django project django-admin startproject todo_api # Run migrations python manage.py migrate # Create an app python manage.py startapp todolist # Modify project's settings.py INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'todolist', ] # Create models from django.db import models class ToDoList(models.Model): task = models.TextField() created_at = models.DateTimeField(auto_now_add=True) # Generate the migrations python manage.py makemigrations # Apply the migrations python manage.py migrate # Register the models to admin page from django.contrib import admin from todolist.models import ToDoList admin.site.register(ToDoList) # Create views from django.http import HttpResponse from django.shortcuts import render from todolist.models import ToDoList def index(request): todolists = ToDoList.objects.all() content = { 'todolists': todolists, } return render(request, 'index.html', content) # Create URLs from django.urls import path from todolist import views urlpatterns = [ path('admin/', admin.site.urls), path('', views.index, name='index'), ] # Create a Serializer from rest_framework import serializers from todolist.models import ToDoList class ToDoListSerializer(serializers.ModelSerializer): class Meta: model = ToDoList fields = '__all__' # Create a ViewSet from rest_framework import viewsets from todolist.models import ToDoList from todolist.serializers import ToDoListSerializer class ToDoListViewSet(viewsets.ModelViewSet): queryset = ToDoList.objects.all() serializer_class = ToDoListSerializer # Register the viewset to the router from rest_framework import routers from todolist import views router = routers.DefaultRouter() router.register('todolists', views.ToDoListViewSet, base_name='todolist') # Add routes to the internationalization from django.urls import include, path urlpatterns += [ path('api/', include(router.urls)) ]"},{"prompt":"Write a Python program to create a list of powers of x for any given x. x = 2","completion":"def power_list(x): return [x**i for i in range(16)]"},{"prompt":"Generate a sorting algorithm in Python to order a list of words alphabetically. Not applicable","completion":"def sort_words(words): for i in range(len(words)-1): min_index = i for j in range(i + 1, len(words)): if words[min_index] > words[j]: min_index = j words[i], words[min_index] = words[min_index], words[i] return words"},{"prompt":"mplement an algorithm for spelling correction in Python. Not applicable","completion":"import re def spell_correction(word): # Remove punctuation word = re.sub(r'[^ws]', '', word) # Separate words using whitespace word_list = word.split() # Create a set to store the dictionary words dict_words = set() # Open the words.txt dictionary with open('words.txt', 'r') as file: # Read each line and add to the dictionary for line in file: dict_words.add(line.rstrip('n')) # Create a correction list corrections = [] # Iterate over the word list for word in word_list: # If word is in the dictionary, add to correction list if word in dict_words: corrections.append(word) # Otherwise, search for a correction else: # Connect character to the ones before and after for pos in range(1,len(word)): # Store prefix and suffix prefix = word[:pos] suffix = word[pos+1:] # Store possible correction correction = prefix + word[pos] + suffix # Check if the correction is in the dictionary if correction in dict_words: corrections.append(correction) break # Return the corrected words return ' '.join(corrections)"},{"prompt":"Write a Python program to create a Fibonacci sequence with the start of 0 and 1, up to max number n.","completion":"def fibonacci(n): a,b = 0,1 fib_list = [] while a < n: fib_list.append(a) a,b = b,a+b return fib_list fib_sequence = fibonacci(20) print(fib_sequence)"},{"prompt":"Create a command line calculator using Python","completion":"import sys def calculator(): while True: try: expression = input('> ') result = eval(expression) print(result) except (SyntaxError, NameError): pass except (KeyboardInterrupt, EOFError): print('nBye!') sys.exit() if __name__ == '__main__': calculator()"},{"prompt":"Create a shell script to automate the installation of Python and the essential Python packages. Not applicable","completion":"#!/bin/bash # Install essential Python packages sudo apt-get -y update sudo apt-get -y install build-essential checkinstall sudo apt-get -y install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev # Download and install Python version=\\"3.8.5\\" file=\\"Python-version.tgz\\" url=\\"https://www.python.org/ftp/python/version/file\\" wget url sudo tar xzf file cd \\"Python-version\\" sudo ./configure sudo make install # Install packages pip install virtualenv pip install numpy pip install pandas pip install matplotlib pip install scikit-learn pip install tensorflow"},{"prompt":"Generate a Python program to solve the below dynamic programming problem: Given a set of integers and a target sum, find a subset whose sum is equal to this target sum.","completion":"def subset_sum(nums, s): n = len(nums) dp_table = [ [False] * (s + 1) for _ in range(n + 1)] # initialize top row as true for i in range(s+1): dp_table[0][i] = True # fill up the dp_table using bottom-up approach for i in range(1, n+1): for j in range(1, s+1): # if current element is greater than sum s if nums[i-1] > j: dp_table[i][j] = dp_table[i-1][j] # else, we can include the element or not include the element else: dp_table[i][j] = dp_table[i-1][j] or dp_table[i-1][j-nums[i-1]] # return true is sum s is reachable return dp_table[n][s]"},{"prompt":"Create a python program to test if a given string is a palindrome str = level","completion":"def is_palindrome(str): for i in range(len(str) // 2): if str[i] != str[-i - 1]: return False return True # Test result = is_palindrome(\\"level\\") print(result) # Output: True"},{"prompt":"Create a program in Python to determine the frequency of each letter in a given sentence.","completion":"sentence = \\"hello world\\" freq = {} for i in sentence: if i in freq: freq[i] += 1 else: freq[i] = 1 # Print frequencies for key in freq.keys(): print (key, ':', freq[key])"},{"prompt":"Create a Python class for a Car with the attributes 'color', 'make', 'model', and 'price'.","completion":"class Car: def __init__(self, color, make, model, price): self.color = color self.make = make self.model = model self.price = price"},{"prompt":"Create a Python program to calculate the grade for a student. Maths = 85 English = 70 Science = 90","completion":"Maths = 85 English = 70 Science = 90 # Calculate the average average = (Maths + English + Science) / 3 # Check the grade if average >= 80: grade = 'A' elif average >= 70: grade = 'B' elif average >= 60: grade = 'C' elif average >= 50: grade = 'D' else: grade = 'F' # Print the grade print(grade)"},{"prompt":"Can you create a Python program to return true if a given string is a valid IP address and false otherwise?","completion":"import re def is_valid_ip(ip): regex_pattern = r\\"^d{1,3}.d{1,3}.d{1,3}.d{1,3}\\" if re.match(regex_pattern, ip): return True else: return False"},{"prompt":"Create a Python program to generate a random day of the week.","completion":"import random def random_day(): days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'] return random.choice(days)"},{"prompt":"mplement a stack class in Python.","completion":"class Stack: def __init__(self): self.stack = [] def push(self, x): self.stack.append(x) def pop(self): if self.stack == []: raise IndexError(\\"pop from an empty stack\\") else: return self.stack.pop() def is_empty(self): return self.stack == []"},{"prompt":"mplement a Python program to create a dictionary containing teams and their wins. ['A's': 56, 'B's': 24, 'C's': 32, 'D's': 27]","completion":"teams_wins = { 'A's': 56, 'B's': 24, 'C's': 32, 'D's': 27 }"},{"prompt":"Write a python function to check if a given number is a perfect number or not (a perfect number is a number that is equal to the sum of its divisors except itself).","completion":"def is_perfect_number(num): divs = [] for i in range(1,num): if num % i == 0: divs.append(i) if num == sum(divs): return True else: return False"},{"prompt":"Develop a script in Python to print out all the combinations of a given list of numbers. [1,2,3,4]","completion":"import itertools lst = [1,2,3,4] # Get all possible combinations of the list result = list(itertools.combinations(lst, 2)) # Print the combinations for combination in result: print(combination)"},{"prompt":"Create a SQLite table in Python to store information about books in a library. The table should include fields for title, author, year of publication, and number of copies. Not applicable","completion":"import sqlite3 # connect to the database conn = sqlite3.connect('library.db') c = conn.cursor() #create table c.execute(\\"CREATE TABLE books (title TEXT, author TEXT, year INT, copies INT)\\") # save the changes conn.commit() # close the database connection conn.close()"},{"prompt":"Generate a Markov Chain model in Python which can produce text with a specific given style based on a sample text. Sample text: This is an example of a text with a specific style.","completion":"import random def generate_markov_chain(text): words = text.split() markov_dict = {} for i in range(len(words) - 1): if words[i] in markov_dict: markov_dict[words[i]].append(words[i + 1]) else: markov_dict[words[i]] = [words[i + 1]] return markov_dict def generate_text(markov_dict, length=50): current_word = random.choice(list(markov_dict.keys())) text = [current_word] for i in range(length): if current_word in markov_dict: current_word = random.choice(markov_dict[current_word]) text.append(current_word) else: current_word = random.choice(list(markov_dict.keys())) text.append(current_word) return ' '.join(text) sample_text = \\"This is an example of a text with a specific style.\\" markov_dict = generate_markov_chain(sample_text) generated_text = generate_text(markov_dict) print(generated_text)"},{"prompt":"Edit the following Python program to find the maximum number in a given list of numbers. numbers = [25, 12, 15, 32, 7]","completion":"numbers = [25, 12, 15, 32, 7] # initialize maximum number max = numbers[0] # loop through list for num in numbers: # compare each number to find the max if num > max: max = num # print maximum number print(max)"}]`),A={name:"App",components:{PoemCard:N},data(){return{searchQuery:"",visibleCount:4,poemsData:j,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.prompt&&e.prompt.toLowerCase().includes(i)||e.completion&&e.completion.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},I={class:"search-container"},E={class:"card-container"},D={key:0,class:"empty-state"},L=["disabled"],z={key:0},F={key:1};function R(i,e,l,u,a,o){const f=_("PoemCard");return r(),n("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",I,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),g(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=s=>a.searchQuery=s),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(r(),n("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=s=>a.searchQuery="")}," ✕ ")):p("",!0)]),t("div",E,[(r(!0),n(b,null,w(o.displayedPoems,(s,h)=>(r(),v(f,{key:h,poem:s},null,8,["poem"]))),128)),o.displayedPoems.length===0?(r(),n("div",D,' No results found for "'+m(a.searchQuery)+'". ',1)):p("",!0)]),o.hasMorePoems?(r(),n("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...s)=>o.loadMore&&o.loadMore(...s))},[a.isLoading?(r(),n("span",F,"Loading...")):(r(),n("span",z,"See more"))],8,L)):p("",!0)])}const M=c(A,[["render",R],["__scopeId","data-v-0aac6275"]]),O=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"library/2.md","filePath":"library/2.md"}'),G={name:"library/2.md"},B=Object.assign(G,{setup(i){return(e,l)=>(r(),n("div",null,[x(M)]))}});export{O as __pageData,B as default};
