import{_ as c,o as r,c as n,a as t,m as d,t as m,C as _,M as g,U as y,f as p,F as b,p as w,e as v,q as x}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},P={class:"poem-container"},T={class:"review"},C={class:"review-title"},S={class:"review-content"};function N(i,e,l,u,a,o){return r(),n("div",P,[t("div",T,[t("div",C,[e[0]||(e[0]=t("span",{class:"icon"},"question:",-1)),d(m(l.poem.prompt),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",S,[e[1]||(e[1]=t("span",{class:"icon"},"answer:",-1)),d(m(l.poem.completion),1)])])])}const E=c(k,[["render",N],["__scopeId","data-v-fbcbf211"]]),A=JSON.parse(`[{"prompt":"Modify a basic Python algorithm to increase the speed of the program. list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def faster_sum(arr): total = 0 # looping over the array and adding the elements # to the variable total for i in range(0, len(arr)): total += arr[i] return total list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # using the faster_sum() function result = faster_sum(list_of_numbers) print(result)"},{"prompt":"Write a python program to generate a random 8character alphanumeric password.","completion":"import string import random def generate_password(): chars = string.ascii_uppercase + string.ascii_lowercase + string.digits size = 8 return ''.join(random.choice(chars) for x in range(size,15)) password = generate_password() print(\\"The generated random 8-character alphanumeric password is: \\" + password)"},{"prompt":"Create an ML algorithm in Python to identify fraudulent transactions in a dataset. Not applicable","completion":"# import the necessary libraries import pandas as pd import numpy as np from sklearn.ensemble import IsolationForest from sklearn.model_selection import train_test_split # Read the dataset data = pd.read_csv('dataset.csv') # Split the dataset into train and test datasets x_train, x_test, y_train, y_test = train_test_split(data.iloc[:,:-1], data.iloc[:,-1], test_size=0.2) # Create the isolation forest model model = IsolationForest() model = model.fit(x_train, y_train) # Make predictions y_pred = model.predict(x_test) # Evaluate the model performance from sklearn.metrics import accuracy_score print('Accuracy:', accuracy_score(y_test, y_pred))"},{"prompt":"Create a python script to sum two numbers in the command line","completion":"import sys def main(): if len(sys.argv) < 3: print('Error: not enough arguments') return try: num1 = int(sys.argv[1]) num2 = int(sys.argv[2]) except ValueError: print('Error: arguments should be numbers') return print(num1 + num2) if __name__ == '__main__': main()"},{"prompt":"Develop a Python program to generate a random password of length 8 that consists of letters and numbers.","completion":"import random import string def generate_password(): chars = string.ascii_letters + string.digits size = 8 return ''.join(random.choice(chars) for x in range(size)) print(generate_password())"},{"prompt":"Develop a machine learning model in Python that takes as input a set of numbers and classifies them into two categories. [1, 2, 3, 4, 5]","completion":"# import required libraries import numpy as np from sklearn import preprocessing from sklearn.neighbors import KNeighborsClassifier # define the training data and labels data = np.array([1, 2, 3, 4, 5]).reshape(-1, 1) labels = np.array([0, 0, 1, 1, 1]) # preprocess the data scaled_data = preprocessing.scale(data) # define and train the model model = KNeighborsClassifier(n_neighbors=3).fit(scaled_data, labels)"},{"prompt":"Create a Python program to read in a list of numbers and output a list that contains, for every even number, the list of odd numbers that sum up to it. inputList = [4, 6, 10, 8]","completion":"def sumOfOdds(inputList): result = [] for num in inputList: if (num % 2 == 0): for i in range(1, num): if (i % 2 != 0): if (num == i + (num - i)): result.append([i, num - i]) return result # Driver code inputList = [4, 6, 10, 8] print(sumOfOdds(inputList))"},{"prompt":"Write a Python script to classify emails as spam or not.","completion":"#import packages import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import accuracy_score # Load the data from the 'spam' emails dataset emails_data = pd.read_csv(\\"emails.csv\\") # Split the data into features and labels X = emails_data.drop(\\"label\\", axis=1) y = emails_data[\\"label\\"] # Split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=0 ) # Create the Multinomial Naive Bayes model mnb = MultinomialNB() # Train the model mnb.fit(X_train, y_train) # Make predictions predictions = mnb.predict(X_test) # Evaluate the accuracy of the model print(\\"Accuracy:\\", accuracy_score(y_test, predictions))"},{"prompt":"Design a program in Python to sort a list of tuples based on the value the tuples contain. tuples = [('a', 4), ('c', 2), ('b', 3)]","completion":"def sort_tuples(tuples): return sorted(tuples, key=lambda x: x[1]) sorted_tuples = sort_tuples(tuples) print(sorted_tuples) # Outputs [('c', 2), ('b', 3), ('a', 4)]"},{"prompt":"mplement a Genetic Algorithm in Python to find the optimum solution from a given set of solutions. The given set of 10 solutions is: [1, 3, 8, 10, 15, 25, 30, 34, 43, 48]","completion":"import random def fitness(solution): # calculate the fitness for each solution return solution def generate_population(population_size, solution_length): # generate the initial populatoin of random solutions return population def selection(population): # select the best solutions from the population return selection def crossover(parent1, parent2): # generate a crossover between parents return crossover def mutation(solution): # randomly mutate individual solutions return solution def genetic_algorithm(population_size, solution_length): # generate initial population population = generate_population(population_size, solution_length) # get best solution in initial population best_solution = max(population, key=fitness) # run loop until termination criteria is met while termination_criteria_not_met: # select best solutions selection = selection(population) # create a new population new_population = [] while len(new_population) < population_size: # select parents parent1 = random.choice(selection) parent2 = random.choice(selection) # create a crossover child = crossover(parent1, parent2) # mutate the child child = mutation(child) # add to new population new_population.append(child) # set population to the new population population = new_population # get the best solution in the current population best_solution = max(population, key=fitness) # return the best solution found return best_solution population_size = 10 solution_length = 10 solutions = [1, 3, 8, 10, 15, 25, 30, 34, 43, 48] best_solution = genetic_algorithm(population_size, solution_length) print(f'The optimum solution is {best_solution}')"},{"prompt":"Design a python program to implement a Greedy algorithm A set of jobs: {A: (3, 10), B: (4, 15), C: (2, 5)}","completion":"def greedy(jobs): jobs.sort(key=lambda x: x[1]/x[0], reverse=True) result = [] time = 0 for j in jobs: time += j[0] result.append((j[0], j[1], time)) return result jobs = [(3, 10), (4, 15), (2, 5)] print(greedy(jobs))"},{"prompt":"Convert the following code from C to Python. int sum(int *arr, int n) { int s = 0; int i; for(i = 0; i < n; i++) s += arr[i] ; return s; }","completion":"def sum(arr, n): s = 0 for i in range(n): s += arr[i] return s"},{"prompt":"Create a Python function that takes a list of numbers and returns the sum of the odd numbers in the list. [1, 2, 3, 4, 5]","completion":"def sumOdds(nums): total = 0 for num in nums: if num % 2 != 0: total += num return total nums = [1,2,3,4,5] sum_odds = sumOdds(nums) print(sum_odds) #output: 9"},{"prompt":"Create a Python function to print out all the prime numbers between two integers. start = 10, end = 25","completion":"def print_primes(start, end): for n in range(start, end + 1): if is_prime(n): print(n) def is_prime(n): if n <= 1: return False elif n <= 3: return True elif (n % 2 == 0) or (n % 3 == 0): return False i = 5 while i ** 2 <= n: if (n % i == 0) or (n % (i + 2) == 0): return False i += 6 return True print_primes(10, 25)"},{"prompt":"Create a program in Python 3 which prints out a multiplication table of a given number. Number: 9","completion":"def create_multiplication_table(n): for i in range(1,11): print(f'{n} * {i} = {n * i}') create_multiplication_table(9) # Outputs: # 9 * 1 = 9 # 9 * 2 = 18 # 9 * 3 = 27 # 9 * 4 = 36 # 9 * 5 = 45 # 9 * 6 = 54 # 9 * 7 = 63 # 9 * 8 = 72 # 9 * 9 = 81 # 9 * 10 = 90"},{"prompt":"Compute the Fibonacci sequence in Python, storing each value in a list.","completion":"def fibonacci(num): fib_list = [0, 1] if num == 1: return fib_list[:1] elif num == 2: return fib_list else: for i in range(2, num): fib_list.append(fib_list[i-1] + fib_list[i-2]) return fib_list print(fibonacci(7))"},{"prompt":"Create a Python program to store information of a student like name, age and marks in three different variables and print the stored values.","completion":"name = \\"John\\" age = 15 marks = 90 print(\\"Name: \\", name) print(\\"Age: \\", age) print(\\"Marks: \\", marks)"},{"prompt":"Generate a random 4 character long string in Python. Not applicable","completion":"import random def random_string(string_length=4): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(string_length)) random_string()"},{"prompt":"Compute the time complexity of the following Python code snippet: int find_max(arr): max = 0 for i in range(len(arr)): for j in range(len(arr)): if arr[i] + arr[j] > max: max = arr[i] + arr[j] return max Not applicable","completion":"The time complexity of this code snippet is O(nÂ²). The outer loop runs \\"n\\" times and the inner loop also runs \\"n\\" times resulting in a complexity of O(nÂ²)."},{"prompt":"Create a Python program to perform classification based on some given data. data = [['men', 'sports', 1], ['women', 'foods', 0], ['men', 'foods', 1], ['women', 'sports', 0]]","completion":"# Function to calculate mean of two classes def calculate_means(dataset): class_0_total = 0 class_1_total = 0 for data_point in dataset: if data_point[2] == 0: class_0_total += 1 else: class_1_total += 1 class_0_mean = class_0_total / len(dataset) class_1_mean = class_1_total / len(dataset) return [class_0_mean, class_1_mean] # Function to classify a new point def classify(data_point, means): if data_point[2] <= means[0]: print(\\"Class 0\\") else: print(\\"Class 1\\") # Main data = [['men', 'sports', 1], ['women', 'foods', 0], ['men', 'foods', 1], ['women', 'sports', 0]] means = calculate_means(data) new_data = ['men', 'sports', 0.5] classify(new_data, means)"},{"prompt":"Create a function in Python that takes a number and prints the odd numbers in the range [0, n).","completion":"def printOddNumbers(n): \\"Prints the odd numbers in the range [0, n).\\" for i in range(n): if i % 2 != 0: print(i) #Example printOddNumbers(10)"},{"prompt":"Generate a class for representing a 2D point in Python.","completion":"class Point2D: def __init__(self, x, y): self.x = x self.y = y def distance(self, other): return ((self.x - other.x)**2 + (self.y - other.y)**2)**0.5 # usage example p1 = Point2D(1, 1) p2 = Point2D(5, 5) print(p1.distance(p2)) # 4.242640687119285"},{"prompt":"Create a Python class called 'Rectangle' with a constructor that takes two arguments: length and width.","completion":"class Rectangle: def __init__(self, length, width): self.length = length self.width = width def area(self): return self.length * self.width"},{"prompt":"Design an algorithm in Python to find the maximum value in a binary tree. Not applicable","completion":"def max_in_tree(node): if node is None: return -float('inf') left_max = max_in_tree(node.left) right_max = max_in_tree(node.right) return max(node.value, left_max, right_max)"},{"prompt":"The given code is a Python script that cleans up old images from a Google Container Registry. To use it, follow these steps: 1. Install Python and the required dependencies (aiogoogle, aiohttp, and hailtop.aiogoogle). 2. Save the code to a file named cleanup_gcr.py. 3. Open a terminal or command prompt and navigate to the directory containing the file. 4. Run the script with the command python cleanup_gcr.py [project], where [project] is the name of your Google Cloud project. The script will connect to your Container Registry, list all images, and delete any images that are more than 7 days old or have no associated tags. It will keep the 10 most recent images for each repository. The script will run asynchronously, using up to 8 parallel threads to speed up the cleanup process. The progress of the cleanup will be logged to the console.","completion":"import sys import time import logging import asyncio import aiohttp import hailtop.aiogoogle as aiogoogle log = logging.getLogger(__name__) class AsyncIOExecutor: def __init__(self, parallelism): self._semaphore = asyncio.Semaphore(parallelism) async def _run(self, fut, aw): async with self._semaphore: try: fut.set_result(await aw) except asyncio.CancelledError: # pylint: disable=try-except-raise raise except Exception as e: # pylint: disable=broad-except fut.set_exception(e) def submit(self, aw): fut = asyncio.Future() asyncio.ensure_future(self._run(fut, aw)) return fut async def gather(self, aws): futs = [self.submit(aw) for aw in aws] return [await fut for fut in futs] class CleanupImages: def __init__(self, client): self._executor = AsyncIOExecutor(8) self._client = client async def cleanup_digest(self, image, digest, tags): log.info(f'cleaning up digest {image}@{digest}') await self._executor.gather([ self._client.delete(f'/{image}/manifests/{tag}') for tag in tags]) await self._executor.submit(self._client.delete(f'/{image}/manifests/{digest}')) log.info(f'cleaned up digest {image}@{digest}') async def cleanup_image(self, image): log.info(f'cleaning up image {image}') log.info(f'listing tags for {image}') result = await self._executor.submit(self._client.get(f'/{image}/tags/list')) manifests = result['manifest'] manifests = [(digest, int(data['timeUploadedMs']) / 1000, data['tag']) for digest, data in manifests.items()] log.info(f'got {len(manifests)} manifests for {image}') # sort is ascending, oldest first manifests = sorted(manifests, key=lambda x: x[1]) # keep the most recent 10 manifests = manifests[:-10] now = time.time() await asyncio.gather(*[ self.cleanup_digest(image, digest, tags) for digest, time_uploaded, tags in manifests if (now - time_uploaded) >= (7 * 24 * 60 * 60) or len(tags) == 0]) log.info(f'cleaned up image {image}') async def run(self): images = await self._executor.submit(self._client.get('/tags/list')) await asyncio.gather(*[ self.cleanup_image(image) for image in images['child'] ]) async def main(): logging.basicConfig(level=logging.INFO) if len(sys.argv) != 2: raise ValueError('usage: cleanup_gcr <project>') project = sys.argv[1] async with aiogoogle.ContainerClient( project=project, timeout=aiohttp.ClientTimeout(total=60)) as client: cleanup_images = CleanupImages(client) await cleanup_images.run() asyncio.run(main())"},{"prompt":"Generate a stack class in Python","completion":"class Stack(object): def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"prompt":"This code defines a class called Attr that represents an attribute of an HTML element. To use it, create an instance of the class and pass in the document, parent element, and attribute name as arguments. The attribute value can be accessed and modified using the value property. Other properties and methods are available for working with the attribute and its parent element.","completion":"#!/usr/bin/env python import bs4 as BeautifulSoup from .Node import Node class Attr(Node): _value = \\"\\" def __init__(self, doc, parent, attr): self.doc = doc self.parent = parent self.attr = attr self.tag = BeautifulSoup.Tag(parser = self.doc, name = 'attr') Node.__init__(self, doc) self._specified = False self._value = self.getValue() def __repr__(self): return \\"<Attr object %s%s at 0x%08X>\\" % (\\"%s.\\" % self.parent.tagName if self.parent else \\"\\", self.attr, id(self)) def __eq__(self, other): return hasattr(other, \\"parent\\") and self.parent == other.parent and hasattr(other, \\"attr\\") and self.attr == other.attr @property def nodeType(self): return Node.ATTRIBUTE_NODE @property def nodeName(self): return self.attr def getNodeValue(self): return self.getValue() def setNodeValue(self, value): return self.setValue(value) nodeValue = property(getNodeValue, setNodeValue) @property def childNodes(self): from .NodeList import NodeList return NodeList(self.parent.doc, []) @property def parentNode(self): return self.parent # Introduced in DOM Level 2 @property def ownerElement(self): if self.parent: if self.parent.nodeType == Node.ELEMENT_NODE: return self.parent return None @property def ownerDocument(self): return self.parent.doc @property def name(self): return self.attr @property def specified(self): if self.ownerElement is None: return True return self._specified def getValue(self): if self.parent: if self.parent.tag.has_attr(self.attr): self._specified = True return self.parent.tag[self.attr] return self._value def setValue(self, value): self._value = value if self.parent: self._specified = True self.parent.tag[self.attr] = value value = property(getValue, setValue)"},{"prompt":"Construct a Python program that creates the following string: 999,888,777,666,555.","completion":"# This program creates the string \\"999,888,777,666,555\\". # create a list of numbers list = [999, 888, 777, 666, 555] # join the values in the list output = \\",\\".join([str(item) for item in list]) # print the output print(output) # Outputs: 999,888,777,666,555"},{"prompt":"Create a Python module that implements a simple Stack. The module should have functions for push, pop, peek, size, and empty operations. Not applicable","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items) def empty(self): return self.size() == 0"},{"prompt":"Create a language detection system using Python and NLTK. Not applicable","completion":"import nltk def detect_language(text): tokens = nltk.word_tokenize(text) tagged = nltk.pos_tag(tokens) language_probabilities = {} for i in range(0, len(tagged)): if tagged[i][1] in language_probabilities: language_probabilities[tagged[i][1]] += 1 else: language_probabilities[tagged[i][1]] = 1 # Find most probable language language = max(language_probabilities, key=lambda key: language_probabilities[key]) return language text = 'This is a sentence in English' language = detect_language(text) print(language) # Outputs 'English'"},{"prompt":"Design a python program to calculate the sum of digits of an integer.","completion":"def sumDigits(num): # convert number into string # and convert each digit into number # using ord() and store it in list # convert number into string # and convert each digit into number # using ord() and store it in list strNum = str(num) digits = [int(x) for x in strNum] # return sum using sum() function return sum(digits) # Driver program num = 12345 print(\\"Sum of digits in num is:\\", sumDigits(num))"},{"prompt":"Construct a function in Python to calculate the factorial of any number.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) print(factorial(5))"},{"prompt":"mplement an algorithm to find the minimum number of coins required to sum up to a given amount in Python. amount = 9","completion":"def findMinCoins(coins, amount): dp = [0] * (amount + 1) dp[0] = 0 for i in range(1, amount + 1): dp[i] = float('inf') for j in range(len(coins)): if (coins[j] <= i): res = dp[i - coins[j]] if (res != float('inf') and res + 1 < dp[i]): dp[i] = res + 1 return dp[amount] print(findMinCoins([1, 4, 6], 9))"},{"prompt":"Write a Python program to generate random passwords from a list of strings. strings = [random,password,security,codes,aaa,bbb,ccc, ddd]","completion":"import random strings = [\\"random\\",\\"password\\",\\"security\\",\\"codes\\",\\"aaa\\",\\"bbb\\",\\"ccc\\", \\"ddd\\"] password = \\"\\" for i in range(len(strings)): randomIndex = random.randint(0,len(strings) -1) password += strings[randomIndex] print(\\"Generated Password:\\", password)"},{"prompt":"Create a data pipeline in Python to transform raw data into a machine learning model. Not applicable","completion":"# define the data source data_source = SomeDataSource() # define the transformer transformer = SomeTransformer() # define the model model = SomeModel() # define the data pipeline def data_pipeline(data): # pre-process data data = transformer.transform(data) # pass data to model model.fit(data) # return predictions predictions = model.predict(data) return predictions # execute the data pipeline predictions = data_pipeline(data_source.get_data())"},{"prompt":"Write a Python program that can generate random passwords of a given length and complexity. Not applicable","completion":"import random import string def generate_password(length, complexity): # minimum 8 characters if length < 8: length = 8 # maximum complexity 5 if complexity > 5: complexity = 5 char = string.ascii_letters + string.digits + string.punctuation pwd = [] while len(pwd) < length: char_rand = random.choice(char) if char_rand not in pwd: pwd.append(char_rand) random.shuffle(pwd) return ''.join(pwd[:length]) print(generate_password(20,5))"},{"prompt":"Transform the following Python code into valid JavaScript code. def fun() : a = 1 b = 2 c = a + b return c","completion":"function fun() { let a = 1; let b = 2; let c = a + b; return c; }"},{"prompt":"Write a python program to classify the sentiment of a given piece of text. The government has done a tremendous job in handling the pandemic situation.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def classify_sentiment(text): sid = SentimentIntensityAnalyzer() score = sid.polarity_scores(text) if score['compound'] >= 0.05: return 'positive' elif score['compound'] <= - 0.05: return 'negative' else: return 'neutral' sentiment = classify_sentiment(\\"The government has done a tremendous job in handling the pandemic situation.\\") print(sentiment) # Output: positive"},{"prompt":"Write a Python program to create a directory named 'myDir'.","completion":"import os if not os.path.exists('myDir'): os.mkdir('myDir')"},{"prompt":"Generate python program create a search engine","completion":"\\"\\"\\" Create a search engine using Python \\"\\"\\" import re def search(query): with open('data.txt', 'r') as f: data = f.read() results = [] for word in re.findall(r'w+', query): matches = re.findall(rf'b{word}b', data) for match in matches: if match not in results: results.append(match) return results if __name__ == '__main__': query = input('Enter a query: ') print(search(query))"},{"prompt":"Write a Python program to scrape data from a webpage https://www.example.com/data","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/data' # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Storing data in list data = [] for tr_list in soup.find_all('tr'): # store data in list data.append([td_list.text.strip() for td_list in tr_list.find_all('td')]) # printing fetched data for tr_list in data: print(tr_list)"},{"prompt":"Develop a python code to achieve the following goal A function to take a list of strings as input and generate a list of tuples, each containing string length and corresponding string.","completion":"def string_lengths(strings): lengths = [] for string in strings: lengths.append( (len(string), string) ) return lengths"},{"prompt":"Generate a Python class for a twodimensional point that represents a position on a Cartesian plane.","completion":"class Point: def __init__(self, x, y): self.x = x self.y = y # method to get x-position def get_x(self): return self.x # method to get y-position def get_y(self): return self.y # method to move point def move_point(self, dx, dy): self.x += dx self.y += dy"},{"prompt":"Create a Python program to analyze a text document and produce a summary of the document. This is a sample text document. It contains some words about some things.","completion":"import nltk from nltk.tokenize import sent_tokenize text = 'This is a sample text document. It contains some words about some things' word_frequencies = {} for word in nltk.word_tokenize(text): if word not in word_frequencies.keys(): word_frequencies[word] = 1 else: word_frequencies[word] += 1 sentences = sent_tokenize(text) sentence_scores = {} for sent in sentences: for word in nltk.word_tokenize(sent.lower()): if word in word_frequencies.keys(): if len(sent.split(' ')) < 30: if sent not in sentence_scores.keys(): sentence_scores[sent] = word_frequencies[word] else: sentence_scores[sent] += word_frequencies[word] summary = '' for k, v in sorted(sentence_scores.items(), key=lambda item: item[1], reverse=True)[:2]: summary += k + ' ' print(summary) # output: This is a sample text document. It contains some words about some things."},{"prompt":"Upload a python program on GitHub which will print the total number of vowels in a given string. String = Hello World!","completion":"import re def count_vowels(string): vowels = re.findall(r'[aeiou]', string, re.I) return len(vowels) if __name__ == '__main__': string = \\"Hello World!\\" print(\\"Number of vowels in the given string:\\", count_vowels(string))"},{"prompt":"Come up with a python program that takes a string and return a reversed version of the string. <noinput>","completion":"def reverse_string(string): return string[::-1]"},{"prompt":"Rewrite the following python program using list comprehension list = ['apple', 'banana', 'cat', 'dog', 'elephant'] new_list = [] for x in list: new_list.append(x.upper())","completion":"list = ['apple', 'banana', 'cat', 'dog', 'elephant'] new_list = [x.upper() for x in list]"},{"prompt":"Create a python program to detect if a word is an isogram.","completion":"def is_isogram(string): # empty strings are isograms if len(string) == 0: return True # convert string to lowercase string = string.lower() # create a set to store seen letters seen_letters = set() for char in string: # if char is not seen, add it to set if char not in seen_letters: seen_letters.add(char) # if char is already seen, it is not an isogram else: return False # all letters are unique, it is an isogram return True"},{"prompt":"Create a boolean filter in Python which returns true if the input is a twoletter word.","completion":"def two_letter_filter(word): if len(word) == 2: return True else: return False"},{"prompt":"Design a recursive Python function that prints the Fibonacci series from 0 to n. 7","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2) for i in range(0, n + 1): print(fibonacci(i))"},{"prompt":"Generate a Python class that uses Bubble Sort to sort a list of numbers. [4, 3, 6, 2, 8, 1, 5]","completion":"class BubbleSort: def __init__(self, arr): self.arr = arr def sort(self): for num in range(len(self.arr)-1,0,-1): for i in range(num): if self.arr[i] > self.arr[i+1]: self.arr[i], self.arr[i+1] = self.arr[i+1], self.arr[i] return self.arr arr = [4,3,6,2,8,1,5] sorted_arr = BubbleSort(arr).sort() print(sorted_arr)"},{"prompt":"Create a python program that determines whether or not a number if prime","completion":"def is_prime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True"},{"prompt":"Generate a random list of numbers in Python of size n and output their sum. n = 10","completion":"import random n = 10 lst = [random.randrange(1, 101) for _ in range(n)] sum_lst = sum(lst) print(\\"Random list: \\", lst) print(\\"Sum of the list: \\", sum_lst)"},{"prompt":"Edit the following python code such that the functions provide the stated output def func1(a): return a**2 def func2(a): return a+1","completion":"def func1(a): return a**2 def func2(a): return a**2 + 1"},{"prompt":"This code performs performance tests based on tests/highlevel/highinlow6memory.py. The data overhead is at ~6.5 ms / MB. The database upload overhead is about the same (7 ms / MB) with a flatfile backend. Database download is almost free. A structured cell auth operation is about 10 ms. Maplist macro evaluation is cheap, 5 ms per (parallel) transformation. Retranslation is about 20 ms per transformation (on top of the macro). Expression evaluation is about 10 ms + 0.5 ms / MB (of input + output) per transformation (speculative relationship!). Nonlinear scaling is observed between 100 and 1000 parallel transformations, a x4 slowdown is observed for the last three overheads above. Mixedtostr conversion is expensive, don't do it!","completion":"\\"\\"\\" Performance tests based on tests/highlevel/high-in-low6-memory.py See also auth-*py. - Data overhead is now at ~6.5 ms / MB. A lot of the data overhead comes from json.dumps. This is to build mixed cells. The rest is from get_hash. Pure Python version (with get_hash and dumps) is at 6.3 ms / MB, so the rest of the data overhead is fine! - Database upload overhead is about the same (7 ms / MB) with a flatfile backend Database download is almost free. - A structured cell auth operation is about 10 ms. - map-list macro evaluation is cheap, 5 ms per (parallel) transformation - re-translation is about 20 ms per transformation (on top of the macro) - expression evaluation is about 10 ms + 0.5 ms / MB (of input + output) per transformation (speculative relationship!) - BUT: Non-linear scaling: between 100 and 1000 parallel transformations, a x4 slowdown is observed for the last three overheads above. NOTE: Mixed-to-str conversion is expensive, don't do it! \\"\\"\\" import sys import seamless import seamless.core.execute seamless.core.execute.DIRECT_PRINT = True seamless.database_sink.connect() seamless.database_cache.connect() #seamless.set_ncores(2) #seamless.set_parallel_evaluations(5) seamless.set_ncores(8) # seamless.set_parallel_evaluations(100) # # for the big testing, 20 evaluations seamless.set_parallel_evaluations(20) # \\"\\"\\" import logging logging.basicConfig() logging.getLogger(\\"seamless\\").setLevel(logging.DEBUG) \\"\\"\\" from seamless.highlevel import Context, Cell, Macro from seamless.highlevel.library import LibraryContainer import time import cProfile cProfile.profiler = cProfile.Profile() mylib = LibraryContainer(\\"mylib\\") mylib.map_list_N = Context() def constructor(ctx, libctx, context_graph, inp, result): m = ctx.m = Macro() m.graph = context_graph m.pins.result = {\\"io\\": \\"output\\", \\"celltype\\": \\"mixed\\", \\"hash_pattern\\": {\\"!\\": \\"#\\"}} ctx.inp = Context() ctx.cs_inp = Context() inp_prefix = \\"INPUT_\\" m.inp_prefix = inp_prefix for key in inp: c = Cell() ctx.inp[key] = c c.hash_pattern = {\\"!\\": \\"#\\"} inp[key].connect(c) ctx.cs_inp[key] = Cell(\\"checksum\\") ctx.cs_inp[key] = ctx.inp[key] setattr(m, inp_prefix + key , ctx.cs_inp[key]) def map_list_N(ctx, inp_prefix, graph, **inp): #print(\\"INP\\", inp) first_k = list(inp.keys())[0] length = len(inp[first_k]) first_k = first_k[len(inp_prefix):] for k0 in inp: k = k0[len(inp_prefix):] if len(inp[k0]) != length: err = \\"all cells in inp must have the same length, but '{}' has length {} while '{}' has length {}\\" raise ValueError(err.format(k, len(inp[k0]), first_k, length)) print(\\"LENGTH\\", length) from seamless.core import Cell as CoreCell from seamless.core.unbound_context import UnboundContext pseudo_connections = [] ctx.result = cell(\\"mixed\\", hash_pattern = {\\"!\\": \\"#\\"}) ctx.sc_data = cell(\\"mixed\\", hash_pattern = {\\"!\\": \\"#\\"}) ctx.sc_buffer = cell(\\"mixed\\", hash_pattern = {\\"!\\": \\"#\\"}) ctx.sc = StructuredCell( data=ctx.sc_data, buffer=ctx.sc_buffer, inchannels=[(n,) for n in range(length)], outchannels=[()], hash_pattern = {\\"!\\": \\"#\\"} ) for n in range(length): #print(\\"MACRO\\", n+1) hc = HighLevelContext(graph) subctx = \\"subctx%d\\" % (n+1) setattr(ctx, subctx, hc) if not hasattr(hc, \\"inp\\"): raise TypeError(\\"map_list_N context must have a subcontext called 'inp'\\") hci = hc.inp if not isinstance(hci, UnboundContext): raise TypeError(\\"map_list_N context must have an attribute 'inp' that is a context, not a {}\\".format(type(hci))) for k0 in inp: k = k0[len(inp_prefix):] if not hasattr(hci, k): raise TypeError(\\"map_list_N context must have a cell called inp.'{}'\\".format(k)) if isinstance(hci[k], StructuredCell): raise TypeError(\\"map_list_N context has a cell called inp.'{}', but its celltype must be mixed, not structured\\".format(k)) if not isinstance(hci[k], CoreCell): raise TypeError(\\"map_list_N context must have an attribute inp.'{}' that is a cell, not a {}\\".format(k, type(hci[k]))) if hci[k].celltype != \\"mixed\\": raise TypeError(\\"map_list_N context has a cell called inp.'{}', but its celltype must be mixed, not {}\\".format(k, hci[k].celltype)) con = [\\"..\\" + k], [\\"ctx\\", subctx, \\"inp\\", k] pseudo_connections.append(con) cs = inp[k0][n] hci[k].set_checksum(cs) resultname = \\"result%d\\" % (n+1) setattr(ctx, resultname, cell(\\"mixed\\")) c = getattr(ctx, resultname) hc.result.connect(c) c.connect(ctx.sc.inchannels[(n,)]) con = [\\"ctx\\", subctx, \\"result\\"], [\\"..result\\"] pseudo_connections.append(con) ctx.sc.outchannels[()].connect(ctx.result) ctx._pseudo_connections = pseudo_connections print(\\"/MACRO\\") \\"\\"\\" import logging logging.basicConfig() logging.getLogger(\\"seamless\\").setLevel(logging.DEBUG) \\"\\"\\" import cProfile cProfile.profiler.enable() m.code = map_list_N ctx.result = Cell() ctx.result.hash_pattern = {\\"!\\": \\"#\\"} ctx.result = m.result result.connect_from(ctx.result) mylib.map_list_N.constructor = constructor mylib.map_list_N.params = { \\"context_graph\\": \\"context\\", \\"inp\\": { \\"type\\": \\"celldict\\", \\"io\\": \\"input\\" }, \\"result\\": { \\"type\\": \\"cell\\", \\"io\\": \\"output\\" }, } ctx = Context() ctx.adder = Context() sctx = ctx.adder sctx.inp = Context() sctx.inp.a = Cell(\\"mixed\\") sctx.inp.b = Cell(\\"mixed\\") sctx.a = Cell(\\"mixed\\") sctx.b = Cell(\\"mixed\\") sctx.a = sctx.inp.a sctx.b = sctx.inp.b def add(a,b): print(\\"ADD\\", a[:10]) return a+b sctx.add = add sctx.add.a = sctx.a sctx.add.b = sctx.b sctx.result = sctx.add sctx.result.celltype = \\"mixed\\" ctx.compute() ctx.data_a = Cell() ctx.data_a.hash_pattern = {\\"!\\": \\"#\\"} ctx.data_b = Cell() ctx.data_b.hash_pattern = {\\"!\\": \\"#\\"} ctx.compute() # Next section is 14.5 secs (if the database is filled), but can be elided to ~0.5s by setting checksum directly (if in flatfile cache). # Not having a DB at all is also 13 secs, so DB request communication (without upload) doesn't cost much. repeat = int(10e6) #repeat = int(5) #for n in range(1000): # 2x10 GB #for n in range(100): # 2x1 GB for n in range(1000): a = \\"A:%d:\\" % n + str(n%10) * repeat b = \\"B:%d:\\" % n + str(n%10) * repeat ctx.data_a[n] = a ctx.data_b[n] = b if n % 20 == 0: ctx.compute() print(n+1) ctx.compute() print(ctx.data_a.checksum) print(ctx.data_b.checksum) \\"\\"\\" ctx.data_a.set_checksum(\\"d07050610c50de8c810aa1d1e322786ed8932cf6eafa0fbe1f132b2c881af9c2\\") ctx.data_b.set_checksum(\\"374c02504f89ed0a760b03c3e1fd2258988576b919d763254709b66fc7bfb22e\\") ctx.compute() \\"\\"\\" # # For repeat=10 million, 1000 items # ctx.data_a.set_checksum(\\"fa4e6aa7e7edaa6feb036fd5e8c28ffc48575cefc332187552c5be4bf0511af8\\") # ctx.data_b.set_checksum(\\"2988c44780790e4ffceb1f97391e475f165e316f27a656957282a2998aee9d4f\\") # For repeat=10 million, 200 items # ctx.data_a.set_checksum(\\"d07050610c50de8c810aa1d1e322786ed8932cf6eafa0fbe1f132b2c881af9c2\\") # ctx.data_b.set_checksum(\\"374c02504f89ed0a760b03c3e1fd2258988576b919d763254709b66fc7bfb22e\\") # For repeat=10 million # ctx.data_a.set_checksum(\\"983730afb7ab41d524b72f1097daaf4a3c15b98943291f96e523730849cabe8c\\") # ctx.data_b.set_checksum(\\"46dabc02b59be44064a9e06dd50bc6841833578c2b6339fbc43f090cc17831fa\\") # For repeat=5 # ctx.data_a.set_checksum(\\"9b4a551a6c1c5830d6070b9c22ae1788b9743e9637be47d56103bcda019a897c\\") # ctx.data_b.set_checksum(\\"9820f1ab795db7b0d195f21966ecb071d76e9ce2fd3a90845974a3905584eb3e\\") ctx.compute() \\"\\"\\" If there is no database (100 x repeat 10e6): - 13 secs up to here (6.5 ms per MB) - 0.5 secs to evaluate the macro - 2.3 secs (2.8 - 0.5) for re-translation (23 ms per transformer) - 32 secs total time, which leaves 32 - 13 - 0.5 = 18.5 secs for transformation and expression evaluation Since 13 secs is required for calculate checksum and decoding, that means ~5.5 secs (55 ms per transformer) overhead This is a supplement of 32 ms over just re-translation If there is no database (100 x repeat 5): - 2.3 secs up to here (12 ms per auth operation) - Still 0.5 secs to evaluate the macro - Still 2.3 secs (2.8 - 0.5) for re-translation (23 ms per transformer, independent of data size!) - 6.2 secs total time, which leaves 6.2 - 2.3 - 0.5 = 3.5 secs for transformation and expression evaluation This is an overhead of 35 ms per transformer, a supplement of just 12 ms over re-translation The 20 ms reduction compared to above comes from not handling 2x10 MB of input and 20 MB of output, so that's 0.5 ms/MB. If there is no database (1000 x repeat 5): - 11.7 secs up to here (12 ms per auth operation). So scales linearly. - 6.5 secs to evaluate the macro, so scales about linearly - 98 secs (104.5 - 6.5) for re-translation, which is 4x slower than above (98 ms) - 145 secs total time, which leaves 145 - 11.7 - 6.5 = 127 secs for transformation and expression evaluation This is an overhead of 127 ms per transformer, which is 4x slower than above (127 ms). => So in principle, 90 sconds slower than might be - Some 45 secs is await-upon-connection-tasks, this could be optimized? - 12 seconds from isinstance is probably unavoidable - 9 seconds comes from validate deep structure, that may be unavoidable - 5 seconds each from taskmanager.add_task (61k tasks) and asyncio.Task.done (119 million tasks). Avoidable? => do maplist-inside-maplist If the database has not been filled: - 27.5 secs up to here If the database has been filled: - 14 secs up to here: to synthesize the data, and to verify that all is present So the raw upload is 13.5 seconds (27.5 - 14); and communication with the DB delays only 1 sec. - 1.5 secs up to here, with the above elision. With the database: - 1.5 secs to evaluate the macro (DB slows down!) - 5.5 secs for re-translation - 45.7 secs total time, which leaves 45.7 - 5.5 - 1.5 = 38.5 secs for transformation and expression evaluation Compare this to the 18.5 secs w/o database, this is a loss of 20 secs. But we have to count the download of the inputs and upload of the results. When removing the tfr entries from the database, transformations will be repeated, but no buffers will be uploaded, as the sink knows them already. This brings total time down to 32 secs, the same as no database! So all of the extra overhead is from upload, and download is almost free. (This could be hard disk caching, though) - 5.5 secs total time with pulling transformation results out of the DB. Again, download is almost free. Big test with the database (1000 x repeat 10e6): - Total time 940 secs. Data upload overhead should be ~120 secs, and Seamless data overhead should be ~140 secs. - 142 secs for re-translation + macro evaluation (142 ms / transformation), a factor 6 slowdown - 940 - 142 - 120 - 140 = ~540 secs for evaluation I.e. 540 ms per transformation. If the same slowdown applies, it would have been 90. But we would have expected 30. So a larger slowdown (fewer parallel expressions may have been a cause too) \\"\\"\\" ctx.result = Cell() ctx.result.hash_pattern = {\\"!\\": \\"#\\"} ctx.compute() ctx.include(mylib.map_list_N) ctx.inst = ctx.lib.map_list_N( context_graph = ctx.adder, inp = {\\"a\\": ctx.data_a, \\"b\\": ctx.data_b}, result = ctx.result ) ctx.compute() print(\\"Exception:\\", ctx.inst.ctx.m.exception) print(ctx.result.data) import pstats sortby = 'tottime' ps = pstats.Stats(cProfile.profiler).sort_stats(sortby) ps.print_stats(40) t0 = time.time() \\"\\"\\" print(\\"Re-set\\") graph = ctx.get_graph() ctx_dummy = Context() dummy_graph = ctx_dummy.get_graph() ctx.set_graph(dummy_graph) ctx.translate(force=True) ctx.compute() print(time.time()-t0) print(\\"Re-eval\\") ctx.set_graph(graph) \\"\\"\\" \\"\\"\\" ctx.translate(force=True) ctx.compute() print(time.time()-t0) \\"\\"\\""},{"prompt":"Generate a Python function for calculating the probability of two events occurring simultaneously.","completion":"def probability_of_two_events(probability_of_first_event, probability_of_second_event): \\"\\"\\" Calculates the probability of two independent events occurring simultaneously. Args: probability_of_first_event (float): The probability of the first event occuring. probability_of_second_event (float): The probability of the second event occuring. Returns: float: The probability of both events occurring simultaneously. \\"\\"\\" probability = probability_of_first_event * probability_of_second_event return probability"},{"prompt":"Create a Python function to remove duplicate elements from a given array. array = [1, 2, 5, 2, 1, 9]","completion":"def remove_duplicates(array): result = set() for element in array: result.add(element) return list(result) result = remove_duplicates(array) print(result)"},{"prompt":"Create a Python program to convert raw JSON data into a Pandas DataFrame. { Name: John Smith, Age: 25, Location: New York, USA }","completion":"import json import pandas as pd data = { \\"Name\\": \\"John Smith\\", \\"Age\\": 25, \\"Location\\": \\"New York, USA\\" } df = pd.DataFrame.from_dict(json.loads(json.dumps(data))) print(df) Output Name Age Location 0 John 25 New York, USA"},{"prompt":"Design an objectoriented class in Python to represent a circle.","completion":"class Circle: def __init__(self, radius): self.radius = radius def area(self): return self.radius**2 * 3.14 def circumference(self): return 2 * 3.14 * self.radius"},{"prompt":"Create an AWS Lambda function in Python to make an HTTP request using the requests library. Example URL: https://api.example.com/d","completion":"import json import requests # Handler function def handler(event, context): # Make request response = requests.get('https://api.example.com/data') # Parse response data = response.json() return { 'statusCode': 200, 'body': json.dumps(data) }"},{"prompt":"Design an AI model in Python to play the game âRockPaperScissorsâ. The opponentâs previous move","completion":"import random # Define a list of possible moves moves = [\\"rock\\", \\"paper\\", \\"scissors\\"] # Define the AI's move def ai_move(): ai_choice = random.choice(moves) return ai_choice # Define the function to determine the winner def play_round(player_move, ai_move): if player_move == ai_move: result = \\"tie\\" elif (player_move == \\"rock\\" and ai_move == \\"scissors\\") or (player_move == \\"paper\\" and ai_move == \\"rock\\") or (player_move == \\"scissors\\" and ai_move == \\"paper\\"): result = \\"player\\" else: result = \\"ai\\" return result # Define a function to check the opponent's last move def check_opponent_move(opponent_move): if opponent_move == \\"rock\\": ai_choice = \\"paper\\" elif opponent_move == \\"paper\\": ai_choice = \\"scissors\\" elif opponent_move == \\"scissors\\": ai_choice = \\"rock\\" return ai_choice # Play the game player_move = input(\\"Choose your move: \\") opponent_move = input(\\"What was your opponent's last move? \\") ai_choice = check_opponent_move(opponent_move) result = play_round(player_move, ai_choice) if result == \\"player\\": print(\\"You won!\\") elif result == \\"ai\\": print(\\"You lost!\\") else: print(\\"It's a tie!\\")"},{"prompt":"Construct a python program to demonstrate the usage of the Fibonacci numbers in a problem.","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Input number of terms in the Fibonacci sequence nterms = 10 # Check if the input number is valid if nterms <= 0: print(\\"Incorrect input\\") else: print(\\"Fibonacci sequence:\\") for i in range(nterms): print(Fibonacci(i)) # This can be used to solve the Fibonacci Sequence puzzle # The puzzle is - # Given a number n, find the nth Fibonacci number # That can be easily done using the above code"},{"prompt":"Edit a given Python code to return the maximum number in the given array. arr = [7, 8, 2, 4]","completion":"def findMax(arr): max = arr[0] for num in arr: if num > max: max = num return max print(findMax(arr))"},{"prompt":"Create a Python script for linear regression using gradient descent.","completion":"import numpy as np def gradient_descent(x, y, alpha=1e-4, tol=1e-4): n,m = x.shape weights = np.zeros(m) y_pred = np.matmul(x, weights) SSE = np.sum((y - y_pred)**2) prev_SSE = 0. weights_list=[] while np.abs(SSE - prev_SSE) > tol: prev_SSE = SSE gradient = np.matmul(x.T,(y - y_pred)) weights += alpha * gradient weights_list.append(weights) y_pred = np.matmul(x, weights) SSE = np.sum((y - y_pred)**2) return weights_list, SSE"},{"prompt":"Design an inverted index in Python for searching a collection of documents. Not applicable","completion":"import os import collections def create_inverted_index(documents): inverted_index = collections.defaultdict(list) for doc_id, document in enumerate(documents): # Go through each word in the document for word in document.split(): # Add the doc_id to the entry in the inverted_index # for this word inverted_index[word].append(doc_id) return inverted_index if __name__ == \\"__main__\\": documents = [ \\"It was the best of times, it was the worst of times\\", \\"It was the age of wisdom, it was the age of foolishness\\", \\"It was the epoch of belief, it was the epoch of incredulity\\" ] inverted_index = create_inverted_index(documents) print(inverted_index)"},{"prompt":"Create an HTML page that contains an input box and a submit button. When the submit button is pressed, the input data should be sent to a Python program. Not applicable","completion":"<!DOCTYPE html> <html> <head> <title>HTML and Python</title> <script> // Function to submit data to python program function submitData() { let myForm = document.getElementById(\\"myForm\\"); let formData = new FormData(myForm); formData.append(\\"inputData\\", document.getElementById(\\"inputData\\").value); fetch('/submit', { method: 'POST', body: formData }); } <\/script> </head> <body> <form id=\\"myForm\\" action=\\"/submit\\" method=\\"POST\\"> <input type=\\"text\\" id=\\"inputData\\"/> <input type=\\"submit\\" value=\\"Send data\\" onclick=\\"submitData()\\"> </form> </body> </html>"},{"prompt":"Create a Python script to classify text into two categories using a pretrained machine learning model. [ This article discusses climate change in Europe., This article discusses the economic impact of the coronavirus pandemic. ]","completion":"import sklearn import numpy as np # load the classifier clf = sklearn.svm.SVC() # load the pre-trained classifier with open('classifier.pkl', 'rb') as f: clf = pickle.load(f) def classify_text(texts): # compile the inputs into a single array data = np.array(texts) # predict the labels labels = clf.predict(data) return labels labels = classify_text([ \\"This article discusses climate change in Europe.\\", \\"This article discusses the economic impact of the coronavirus pandemic.\\" ]) print(labels) # -> ['Climate Change', 'Economic Impact']"},{"prompt":"Create a class Cell in Python using objectoriented programming. <no input>","completion":"class Cell: def __init__(self, row, col): self.row = row self.col = col def move_left(self): self.col -= 1 def move_right(self): self.col += 1 def move_up(self): self.row -= 1 def move_down(self): self.row += 1"},{"prompt":"Program a function in Python that takes a string and capitalizes the first letter of each word.","completion":"def capitalize_words(string): words = string.split() capitalized_words = [word.capitalize() for word in words] return ' '.join(capitalized_words)"},{"prompt":"Design a function in Python for merging two dictionaries.","completion":"def merge_dicts(dict1, dict2): dict3 = {**dict1, **dict2} return dict3"},{"prompt":"Write a Python function to compare two given strings and return a score indicating their similarity.","completion":"def compare_strings(s1, s2): m = len(s1) n = len(s2) # Create a table to store results of subproblems dp = [[0 for x in range(n + 1)] for x in range(m + 1)] # Fill d[][] in bottom up manner for i in range(m + 1): for j in range(n + 1): if i == 0 or j == 0: dp[i][j] = 0 elif s1[i - 1] == s2[j - 1]: dp[i][j] = 1 + dp[i - 1][j - 1] else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) # LCS will be last entry in the lookup table return dp[m][n]"},{"prompt":"Using the input provided, write a Python script to store the words in a dictionary and get the count of each word. words= [Hello, World, Hello , again]","completion":"word_count = {} for word in words: if word not in word_count: word_count[word] = 1 else: word_count[word] += 1 print(word_count) # output: {'Hello': 2, 'World': 1, 'again': 1}"},{"prompt":"mplement the factorial function in Python.","completion":"def factorial(n): if n == 0: return 1 return n*factorial(n-1)"},{"prompt":"Generate a program to extract the substring from a given string string = 'Python is fun' start = 7 end = 11","completion":"def extract_substring(string, start, end): substr = string[start : end] return substr string = 'Python is fun' start = 7 end = 11 print(extract_substring(string, start, end))"},{"prompt":"Write a Python program to compute the average of the numbers in the list. numbers = [1, 3, 5, 7, 9]","completion":"def compute_average(numbers): sum = 0 for num in numbers: sum += num return sum/len(numbers) numbers = [1, 3, 5, 7, 9] average = compute_average(numbers) print(\\"Average is \\" + str(average))"},{"prompt":"Create a Python script to analyse sentiment from a list of sentences and print out the results. [I am happy., I am not happy., This is great!]","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentences = [\\"I am happy.\\", \\"I am not happy.\\", \\"This is great!\\"] analyzer = SentimentIntensityAnalyzer() for sentence in sentences: scores = analyzer.polarity_scores(sentence) print(f\\"{sentence} : {scores}\\") # Output: # I am happy. : {'neg': 0.0, 'neu': 0.357, 'pos': 0.643, 'compound': 0.6249} # I am not happy. : {'neg': 0.504, 'neu': 0.496, 'pos': 0.0, 'compound': -0.5859} # This is great! : {'neg': 0.0, 'neu': 0.312, 'pos': 0.688, 'compound': 0.6249}"},{"prompt":"Generate a Python program for a clock view which will show the time in the console.","completion":"import time while True: localtime = time.localtime() result = time.strftime(\\"%I:%M:%S %p\\", localtime) print(result, end=\\"r\\") time.sleep(1)"},{"prompt":"Create a Python class that merges two sorted lists.","completion":"class MergeTwoLists(): def merge(self, left_list, right_list): \\"\\"\\"Merge two sorted lists\\"\\"\\" i = 0 j = 0 merged_list = [] while i < len(left_list) and j < len(right_list): if left_list[i] < right_list[j]: merged_list.append(left_list[i]) i += 1 else: merged_list.append(right_list[j]) j += 1 merged_list += left_list[i:] merged_list += right_list[j:] return merged_list"},{"prompt":"Develop a Python script to delete all nonalphabetic characters in a string. String with nonalphabetic characters '123hello!?","completion":"def remove_non_alpha(string): new_string = \\"\\" for char in string: if char.isalpha(): new_string += char return new_string"},{"prompt":"Write Python code to classify a set of data points as either âAâ or âBâ using Kmeans clustering. A sample set of data points: [0, 0], [5, 5], [10, 10], [15, 15], [20, 20]","completion":"from sklearn.cluster import KMeans import numpy as np #create array of data points data_points = np.array([[0, 0], [5, 5], [10, 10], [15, 15], [20, 20]]) # Build and fit model kmeans = KMeans(n_clusters=2).fit(data_points) # Predict clusters labels = kmeans.predict(data_points) # Label data points labels_mapped = lables.tolist() label_dict = dict(zip(data_points.tolist(),labels_mapped)) # Print result for data_point, label in label_dict.items(): print(\\"Data point:\\", data_point, \\", Label:\\", label)"},{"prompt":"Design a python program which accepts a number from the user and displays its prime factorization","completion":"def prime_factorization(n): # list to store prime factors prime_factors = [] # remove any factors of 2 first while n % 2 == 0: prime_factors.append(2) n = n / 2 # n must be odd at this point for i in range(3,int(math.sqrt(n))+1,2): # while i divides n , print i ad divide n while n % i== 0: prime_factors.append(int(i)) n = n / i # Condition if n is a prime # number greater than 2 if n > 2: prime_factors.append(int(n)) return prime_factors"},{"prompt":"Write a Python program to create a new string that is the reverse of the given one.","completion":"def reverse_string(string): string = string[::-1] return string # Driver code string = \\"Python Programming\\" print(reverse_string(string))"},{"prompt":"Create a script in Python to modify a given spreadsheet, changing the format of the dates to a more human readable format ( DD/MM/YYYY ). The following spreadsheet in csv format (only for demonstration purposes): name,date John,5/4/2019 Tim,20/3/2020","completion":"import csv from datetime import datetime #open CSV file for reading with open('source.csv', 'r') as file_in: #open other CSV file for writing with open('destination.csv', 'w', newline='') as file_out: reader = csv.reader(file_in) writer = csv.writer(file_out) for row in reader: if row[0] == \\"name\\": #skip the first row #write old header writer.writerow(row) else: #convert date format dt = datetime.strptime(row[1], '%m/%d/%Y').strftime('%d/%m/%Y') #write data with new format writer.writerow([row[0], dt])"},{"prompt":"Develop an algorithm in Python to separate odd and even number from a given list of integers. [2, 4, 7, 8, 11, 9]","completion":"def separate_odd_even(numbers): even = [] odd = [] for number in numbers: if number % 2 == 0: even.append(number) else: odd.append(number) return even, odd numbers = [2, 4, 7, 8, 11, 9] even, odd = separate_odd_even(numbers) print(\\"Even numbers: \\", even) print(\\"Odd numbers: \\", odd)"},{"prompt":"Write a python program to count how many times the word the appears in a given text. The quick brown fox jumps over the lazy dog","completion":"def count_the(text): count = 0 words = text.split() for word in words: if word == \\"the\\": count += 1 return count if __name__ == '__main__': text = \\"The quick brown fox jumps over the lazy dog\\" print(count_the(text))"},{"prompt":"Produce a Python program to merge two sorted lists, given two ordered lists of numbers.","completion":"def merge_sorted_lists(list1, list2): merged_list = [] #loop through each element and add to list in sorted order while list1 != [] and list2 != []: if list1[0] <= list2[0]: merged_list.append(list1[0]) list1.remove(list1[0]) else: merged_list.append(list2[0]) list2.remove(list2[0]) #if any elements left if list1 != []: merged_list.extend(list1) if list2 != []: merged_list.extend(list2) return merged_list"},{"prompt":"Generate a random number from 1 to 10 in Python and assign it to the variable 'number'.","completion":"import random number = random.randint(1, 10)"},{"prompt":"Design an algorithm in Python to solve the travelling salesman problem.","completion":"def tsp(graph, start, end): # Create an unvisited list unvisited = {vertex: None for vertex in graph} current = start unvisited[current] = current visited = dict() route = list() while True: visited[current] = current route.append(current) unvisited.pop(current, None) if current == end: break min_dist = float('inf') for neighbour in graph[current].keys(): if neighbour not in unvisited: continue dist = graph[current][neighbour] if dist < min_dist: min_dist = dist next_vertex = neighbour current = next_vertex route.append(end) return route"},{"prompt":"Write an algorithm in Python that takes a 2D matrix as input and returns the maximum sum subarray. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"def max_sum_subarray(arr): max_sum = None for i in range(len(arr)): for j in range(len(arr[i])): total_sum = 0 for y in range(i, len(arr)): for x in range(j, len(arr[y])): total_sum += arr[y][x] if max_sum is None or total_sum > max_sum: max_sum = total_sum return max_sum arr = [[1, -2, 3], [4, 5, -6], [7, 8, 9]] print(max_sum_subarray(arr)) # Output should be 19"},{"prompt":"Translate the following SQL query into Python code. SELECT Customer_Name, COUNT(Order_Id) AS Number_of_Orders FROM Orders GROUP BY Customer_Name","completion":"import pandas as pd df = pd.read_sql_query(\\"SELECT Customer_Name, COUNT(Order_Id) AS Number_of_Orders FROM Orders GROUP BY Customer_Name\\", con) result = df.to_dict('records')"},{"prompt":"Generate a python program to convert a given string of mathematical expression from infix notation to postfix notation. A + B * C","completion":"\\"\\"\\" Python program to convert a given string of mathematical expression from infix notation to postfix notation. \\"\\"\\" # Import Stack from stack import Stack # Function to convert Infix expression to Postfix def infixToPostfix(exp): # Create a stack to store operators. s = Stack() # Create a string to store postfix expression postfix = \\"\\" # Scan through the expression one character at a time. for c in exp: # If character is an operand, append it in postfix if (c.isalpha()): postfix += c # If character is an operator ( +, - or * ) elif (c == \\"+\\" or c == \\"-\\" or c == \\"*\\"): # If the stack is empty, push the operator if s.isempty(): s.push(c) # If the stack is not empty else: # pop all operators from stack # until an operator with lower precedence # is found while s.isempty() == False and precedence(c) <= precedence(s.top()): postfix = postfix + s.pop() # Push the operator onto stack s.push(c) # If character is ( or ), push it to stack elif c == \\"(\\": s.push(c) elif c == \\")\\": # pop all operators from stack # until an opening bracket is found while s.top() != \\"(\\": postfix = postfix + s.pop() # Remove the opening bracket s.pop() # append all operators to postfix while s.isempty() == False: postfix = postfix + s.pop() return postfix # Function to return precedence of operators def precedence(operator): if operator == '+' or operator == '-': return 1 if operator == '*': return 2 return 0 # Driver program to test above function exp = \\"A+B*C\\" print(infixToPostfix(exp))"},{"prompt":"mplement an algorithm in Python that ranks the top 5 most influential Bloggers in a given space. A dataset containing information on bloggers such as: name, number of followers, content, topics, etc.","completion":"import networkx as nx def rank_influential_bloggers(data): G = nx.Graph() # Create a NetworkX graph based on the given dataset # ... # Calculate the influence of each node in the graph influencer_scores = nx.pagerank(G) # Sort the influencer scores in descending order sorted_influence_scores = sorted(influencer_scores.items(), key=lambda x: x[1], reverse=True) # Get the top 5 most influential bloggers top_influencers = [tuple[0] for tuple in sorted_influence_scores[:5]] return top_influencers"},{"prompt":"Create a Python application that predicts the sentiment of a tweet. tweet = I am feeling positive about life today!","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sid = SentimentIntensityAnalyzer() def predict_sentiment(tweet): scores = sid.polarity_scores(tweet) if scores['compound'] >= 0.5: return 'Positive' elif scores['compound'] <= -0.5: return 'Negative' else: return 'Neutral' tweet = \\"I am feeling positive about life today!\\" print(predict_sentiment(tweet)) # Output: Positive"},{"prompt":"Create a Python program that finds the longest common prefix strings among an array of strings. [flower,flow,flight]","completion":"def lcp(arr): if len(arr) == 0: return \\"\\" elif len(arr) == 1: return arr[0] else: prefix = arr[0] for i in range(1, len(arr)): while arr[i].find(prefix) != 0: prefix = prefix[:-1] return prefix result = lcp([\\"flower\\",\\"flow\\",\\"flight\\"]) print(result)"},{"prompt":"Modify the following code in Python to only repeat a segment of the code while a certain user input is given. while True: print(Hello World)","completion":"# Get user input input = input('Enter \\"repeat\\" to repeat the code: ') # Execute the code while user input is \\"repeat\\" while input == 'repeat': print(\\"Hello World\\") input = input('Enter \\"repeat\\" to repeat the code: ')"},{"prompt":"Reverse a string via a Python function. String: Hello","completion":"def reverse_string(string): return string[::-1] result = reverse_string(\\"Hello\\") print(result)"},{"prompt":"Create a Python script that extracts text from a webpage and stores it in a SQLite database. The script should import the following libraries: sqlite3, urllib, re, BeautifulSoup, NavigableString, and nltk. It should download the 'punkt' package from the nltk library. The script should define a function called 'parseRes2' that takes in a BeautifulSoup object, a title, a URL, a cursor object, an author, a date, and a collection title. The function should extract text from the webpage and store it in the SQLite database. The script should define a main function that connects to the database, creates a table called 'texts', and deletes any existing entries for the author 'Johannes de Plano Carpini'. The main function should then call the 'parseRes2' function to extract text from a specific webpage and store it in the database.","completion":"import sqlite3 import urllib import re from urllib.request import urlopen from bs4 import BeautifulSoup, NavigableString import nltk nltk.download('punkt') from nltk import sent_tokenize def parseRes2(soup, title, url, cur, author, date, collectiontitle): chapter = 0 sen = \\"\\" num = 1 [e.extract() for e in soup.find_all('br')] [e.extract() for e in soup.find_all('table')] [e.extract() for e in soup.find_all('span')] [e.extract() for e in soup.find_all('a')] for x in soup.find_all(): if len(x.text) == 0: x.extract() getp = soup.find_all('p') #print(getp) i = 0 for p in getp: # make sure it's not a paragraph without the main text try: if p['class'][0].lower() in ['border', 'pagehead', 'shortborder', 'smallboarder', 'margin', 'internal_navigation']: # these are not part of the main t continue except: pass if p.b: chapter = p.b.text chapter = chapter.strip() else: sen = p.text sen = sen.strip() if sen != '': num = 0 for s in sent_tokenize(sen): sentn = s.strip() num += 1 cur.execute(\\"INSERT INTO texts VALUES (?,?,?,?,?,?,?, ?, ?, ?, ?)\\", (None, collectiontitle, title, 'Latin', author, date, chapter, num, sentn, url, 'prose')) def main(): # get proper URLs siteURL = 'http://www.thelatinlibrary.com' biggsURL = 'http://www.thelatinlibrary.com/johannes.html' biggsOPEN = urllib.request.urlopen(biggsURL) biggsSOUP = BeautifulSoup(biggsOPEN, 'html5lib') textsURL = [] title = 'Johannes de Plano Carpini' author = title collectiontitle = 'JOHANNES DE PLANO CARPINI LIBELLUS HISTORICUS IOANNIS DE PLANO CARPINI' date = '1246 A.D.' with sqlite3.connect('texts.db') as db: c = db.cursor() c.execute( 'CREATE TABLE IF NOT EXISTS texts (id INTEGER PRIMARY KEY, title TEXT, book TEXT,' ' language TEXT, author TEXT, date TEXT, chapter TEXT, verse TEXT, passage TEXT,' ' link TEXT, documentType TEXT)') c.execute(\\"DELETE FROM texts WHERE author = 'Johannes de Plano Carpini'\\") parseRes2(biggsSOUP, title, biggsURL, c, author, date, collectiontitle) if __name__ == '__main__': main()"},{"prompt":"Create a basic Python socket program to send a message back and forth between a server and a client. Not applicable","completion":"# Server: import socket s = socket.socket() host = '127.0.0.1' port = 12345 s.bind((host, port)) s.listen(5) while True: c, addr = s.accept() print('Got connection from', addr) c.send(b'Thank you for connecting!') message = c.recv(1024) print('Received:', message) c.close() # Client: import socket s = socket.socket() host = '127.0.0.1' port = 12345 s.connect((host, port)) print(s.recv(1024)) s.send(b'Hello, this is client!') s.close()"},{"prompt":"Compose a Python program to move zeros in a given list to the end. [1,0,2,3,0,4,5,0]","completion":"def move_zeroes(nums): \\"\\"\\" Moves all the zeros in a given list to the end. @param nums: List @return: List \\"\\"\\" i = 0 for num in nums: if num != 0: nums[i] = num i += 1 while i < len(nums): nums[i] = 0 i += 1 return nums"},{"prompt":"Develop a Python program to show the product of all odd number components in an array. [3,4,5,6,7]","completion":"\\"\\"\\" Python program to show the product of all odd numbers in an array \\"\\"\\" def product_of_odds(arr): product = 1 for num in arr: if num % 2 != 0: product *= num return product if __name__ == '__main__': arr = [3, 4, 5, 6, 7] print(product_of_odds(arr)) # 105"},{"prompt":"Write a Python program for generating random passwords. The program should allow the user to specify a length and should contain a mix of upper and lowercase letters, numbers, and symbols. length: 6","completion":"import string import random def generate_random_password(length): characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.sample(characters, length)) password_length = 6 password = generate_random_password(password_length) print(password)"},{"prompt":"To move the robot arm with impedance control, use the moveImpedance(k, t) function with the desired stiffness (k) and duration (t). To move the wrist, use the moveWrist(wrist_frame, tool_frame, t, max_wrench) function with the desired wrist and tool frame, duration (t), and maximum wrench constraint. To move the tool, use the moveTool(tool_frame, t) function with the desired tool frame and duration (t). The code assumes a specific robot arm prefix, so make sure to specify the correct prefix in the command line argument.","completion":"#!/usr/bin/env python # Copyright (c) 2014, Robot Control and Pattern Recognition Group, Warsaw University of Technology # All rights reserved. # # Redistribution and use in source and binary forms, with or without # modification, are permitted provided that the following conditions are met: # * Redistributions of source code must retain the above copyright # notice, this list of conditions and the following disclaimer. # * Redistributions in binary form must reproduce the above copyright # notice, this list of conditions and the following disclaimer in the # documentation and/or other materials provided with the distribution. # * Neither the name of the Warsaw University of Technology nor the # names of its contributors may be used to endorse or promote products # derived from this software without specific prior written permission. # # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\"AS IS\\" AND # ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED # WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE # DISCLAIMED. IN NO EVENT SHALL <COPYright HOLDER> BE LIABLE FOR ANY # DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES # (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; # LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND # ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS # SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. import roslib roslib.load_manifest('velma_controller') import rospy from geometry_msgs.msg import * from cartesian_trajectory_msgs.msg import * import actionlib from actionlib_msgs.msg import * import tf import tf_conversions.posemath as pm import PyKDL def moveImpedance(k, t): global action_impedance_client action_impedance_goal = CartesianImpedanceGoal() action_impedance_goal.trajectory.header.stamp = rospy.Time.now() + rospy.Duration(0.2) action_impedance_goal.trajectory.points.append(CartesianImpedanceTrajectoryPoint( rospy.Duration(t), CartesianImpedance(k,Wrench(Vector3(0.7, 0.7, 0.7),Vector3(0.7, 0.7, 0.7))))) action_impedance_client.send_goal(action_impedance_goal) def moveWrist( wrist_frame, tool_frame, t, max_wrench): global action_trajectory_client # we are moving the tool, so: T_B_Wd*T_W_T wrist_pose = pm.toMsg(wrist_frame*tool_frame) action_trajectory_goal = CartesianTrajectoryGoal() action_trajectory_goal.trajectory.header.stamp = rospy.Time.now() + rospy.Duration(0.01) action_trajectory_goal.trajectory.points.append(CartesianTrajectoryPoint( rospy.Duration(t), wrist_pose, Twist())) action_trajectory_goal.wrench_constraint = max_wrench action_trajectory_client.send_goal(action_trajectory_goal) def moveTool(tool_frame, t): global action_tool_client tool_pose = pm.toMsg(tool_frame) action_tool_goal = CartesianTrajectoryGoal() action_tool_goal.trajectory.header.stamp = rospy.Time.now() action_tool_goal.trajectory.points.append(CartesianTrajectoryPoint( rospy.Duration(t), tool_pose, Twist())) action_tool_client.send_goal(action_tool_goal) if __name__ == '__main__': a = [] for arg in sys.argv: a.append(arg) if (len(a) > 1) and ((a[1]==\\"left\\") or (\\"right\\")): prefix = a[1] else: print \\"Usage: %s prefix\\"%a[0] exit(0) rospy.init_node('impedance_riser') listener = tf.TransformListener(); action_impedance_client = actionlib.SimpleActionClient(\\"/\\" + prefix + \\"_arm/cartesian_impedance\\", CartesianImpedanceAction) action_impedance_client.wait_for_server() action_trajectory_client = actionlib.SimpleActionClient(\\"/\\" + prefix + \\"_arm/cartesian_trajectory\\", CartesianTrajectoryAction) action_trajectory_client.wait_for_server() action_tool_client = actionlib.SimpleActionClient(\\"/\\" + prefix + \\"_arm/tool_trajectory\\", CartesianTrajectoryAction) action_tool_client.wait_for_server() rospy.sleep(1.0) # save current wrist position time_now = rospy.Time.now() - rospy.Duration(1.0) listener.waitForTransform('torso_base', prefix+'_arm_7_link', time_now, rospy.Duration(4.0)) pose = listener.lookupTransform('torso_base', prefix+'_arm_7_link', time_now) T_B_W = pm.fromTf(pose) T_W_T = PyKDL.Frame() # tool transformation print \\"setting the tool to %s relative to wrist frame\\"%(T_W_T) # move both tool position and wrist position - the gripper holds its position print \\"moving wrist\\" # we assume that during the initialization there are no contact forces, so we limit the wrench moveWrist( T_B_W, T_W_T, 2.0, Wrench(Vector3(20, 20, 20), Vector3(4, 4, 4)) ) print \\"moving tool\\" moveTool( T_W_T, 2.0 ) rospy.sleep(2.0) # change the stiffness print \\"changing stiffness for door approach\\" moveImpedance(Wrench(Vector3(1200.0, 1200.0, 1200.0), Vector3(300.0, 300.0, 300.0)), 4.0) rospy.sleep(4.0)"},{"prompt":"This code is a Python class for a Zevera.com hoster plugin. To use it, import the MultiHoster module and create an instance of the ZeveraCom class. The class has methods for handling premium accounts and checking files. Use the create_getInfo function to generate information about the plugin.","completion":"# -*- coding: utf-8 -*- from module.plugins.internal.MultiHoster import MultiHoster, create_getInfo class ZeveraCom(MultiHoster): __name__ = \\"ZeveraCom\\" __type__ = \\"hoster\\" __version__ = \\"0.25\\" __pattern__ = r'http://(?:www.)?zevera.com/.+' __description__ = \\"\\"\\"Zevera.com hoster plugin\\"\\"\\" __license__ = \\"GPLv3\\" __authors__ = [(\\"zoidberg\\", \\"zoidberg@mujmail.cz\\")] def handlePremium(self): if self.account.getAPIData(self.req, cmd=\\"checklink\\", olink=self.pyfile.url) != \\"Alive\\": self.fail(_(\\"Offline or not downloadable\\")) header = self.account.getAPIData(self.req, just_header=True, cmd=\\"generatedownloaddirect\\", olink=self.pyfile.url) if not \\"location\\" in header: self.fail(_(\\"Unable to initialize download\\")) self.link = header['location'] def checkFile(self): super(ZeveraCom, self).checkFile() if self.checkDownload({\\"error\\": 'action=\\"ErrorDownload.aspx'}) is \\"error\\": self.fail(_(\\"Error response received - contact Zevera support\\")) getInfo = create_getInfo(ZeveraCom)"},{"prompt":"Construct a for loop in Python to generate the sequence [0, 1, 2, 3, 4, 5, 6, 7, 8].","completion":"for i in range(9): print(i)"},{"prompt":"Generate code for a keyvalue store using the Python dictionary.","completion":"def set_value(store, key, value): store[key] = value def get_value(store, key): return store[key] def delete_value(store, key): del store[key]"},{"prompt":"Create functions 'isPalindrome()' and 'removeDuplicates()' for a Python linked list.","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def isPalindrome(self): # your code here slow_ptr = self.head fast_ptr = self.head rev_head = None while(fast_ptr): fast_ptr = fast_ptr.next if fast_ptr: fast_ptr = fast_ptr.next prev = slow_ptr slow_ptr = slow_ptr.next prev.next = rev_head rev_head = prev fast_ptr = self.head while(rev_head): if fast_ptr.data != rev_head.data: return False fast_ptr = fast_ptr.next rev_head = rev_head.next return True def removeDuplicates(self): # your code here cur_node = self.head while cur_node: prev_node = cur_node next_node = cur_node.next while next_node: if next_node.data == cur_node.data: prev_node.next = next_node.next else: prev_node = next_node next_node = next_node.next cur_node = cur_node.next"},{"prompt":"Given a list of words, construct a python dictionary of all the words with their length as the value. words = [apple, strawberry, coffee]","completion":"word_lengths = { \\"apple\\": 5, \\"strawberry\\": 10, \\"coffee\\": 6 }"},{"prompt":"Create a regular expression pattern to match keyvalue pairs like python:Python","completion":"pattern = re.compile(r\\"^(w+):(w+)\\")"},{"prompt":"This code is a Python script for a music player. To use it, you need to run it in a Python environment. The script will look for MP3 files in the ~/Music directory and play them in random order. To control the player, use the following keys in the console: space (play/pause), left/right arrow (seek back/forward by 10 seconds), return (next song), and q (quit).","completion":"#!/usr/bin/env python # MusicPlayer, https://github.com/albertz/music-player # Copyright (c) 2012, Albert Zeyer, www.az2000.de # All rights reserved. # This code is under the 2-clause BSD license, see License.txt in the root directory of this project. import sys, os, random, fnmatch # Our parent path might contain a self-build musicplayer module. Use that one. sys.path = [os.path.abspath((os.path.dirname(__file__) or \\".\\") + \\"/..\\")] + sys.path import musicplayer print \\"Module:\\", musicplayer.__file__ # ffmpeg log levels: {0:panic, 8:fatal, 16:error, 24:warning, 32:info, 40:verbose} musicplayer.setFfmpegLogLevel(20) try: import better_exchook better_exchook.install() except ImportError: pass # doesnt matter try: import faulthandler faulthandler.enable(all_threads=True) except ImportError: print \\"note: module faulthandler not available\\" class Song: def __init__(self, fn): self.url = fn self.f = open(fn) def __eq__(self, other): return self.url == other.url def readPacket(self, bufSize): s = self.f.read(bufSize) #print \\"readPacket\\", self, bufSize, len(s) return s def seekRaw(self, offset, whence): r = self.f.seek(offset, whence) #print \\"seekRaw\\", self, offset, whence, r, self.f.tell() return self.f.tell() files = [] def getFiles(path): for f in sorted(os.listdir(path), key=lambda k: random.random()): f = os.path.join(path, f) if os.path.isdir(f): getFiles(f) # recurse if len(files) > 1000: break # break if we have enough if fnmatch.fnmatch(f, '*.mp3'): files.append(f) getFiles(os.path.expanduser(\\"~/Music\\")) random.shuffle(files) # shuffle some more files = sys.argv[1:] + files assert files, \\"give me some files or fill-up ~/Music\\" i = 0 def songs(): global i, files while True: yield Song(files[i]) i += 1 if i >= len(files): i = 0 def peekSongs(n): nexti = i + 1 if nexti >= len(files): nexti = 0 return map(Song, (files[nexti:] + files[:nexti])[:n]) player = musicplayer.createPlayer() player.outSamplerate = 48000 player.queue = songs() player.peekQueue = peekSongs player.playing = True def formatTime(t): if t is None: return \\"?\\" mins = long(t // 60) t -= mins * 60 hours = mins // 60 mins -= hours * 60 if hours: return \\"%02i:%02i:%02.0f\\" % (hours,mins,t) return \\"%02i:%02.0f\\" % (mins,t) import termios def prepareStdin(): fd = sys.stdin.fileno() if os.isatty(fd): old = termios.tcgetattr(fd) new = termios.tcgetattr(fd) new[3] = new[3] & ~termios.ICANON & ~termios.ECHO # http://www.unixguide.net/unix/programming/3.6.2.shtml new[6][termios.VMIN] = 0 new[6][termios.VTIME] = 1 termios.tcsetattr(fd, termios.TCSANOW, new) termios.tcsendbreak(fd, 0) import atexit atexit.register(lambda: termios.tcsetattr(fd, termios.TCSANOW, old)) print \\"Console control:\\" print \\" <space>: play / pause\\" print \\" <left>/<right>: seek back/forward by 10 secs\\" print \\" <return>: next song\\" print \\" <q>: quit\\" def getchar(): fd = sys.stdin.fileno() ch = os.read(fd, 7) return ch prepareStdin() while True: sys.stdout.write(\\"r033[K\\") # clear line if player.playing: sys.stdout.write(\\"playing, \\") else: sys.stdout.write(\\"paused, \\") curSong = player.curSong if curSong: url = os.path.basename(curSong.url) if len(url) > 40: url = url[:37] + \\"...\\" sys.stdout.write( url + \\" : \\" + formatTime(player.curSongPos) + \\" / \\" + formatTime(player.curSongLen)) else: sys.stdout.write(\\"no song\\") ch = getchar() if ch == \\"x1b[D\\": # left player.seekRel(-10) elif ch == \\"x1b[C\\": #right player.seekRel(10) elif ch == \\"x1b[A\\": #up pass elif ch == \\"x1b[B\\": #down pass elif ch == \\"n\\": # return player.nextSong() elif ch == \\" \\": player.playing = not player.playing elif ch == \\"q\\": print sys.exit(0) sys.stdout.flush()"},{"prompt":"Create a Python program to sort a given list of numbers within a range and return the sorted list. arr = [7, 0, 5, 6, 3, 9] start = 0 end = 9","completion":"def sort_in_range(arr, start, end): # create a count array to store the count of each number count = [0 for i in range(start, end+1)] output = [] # count the occurance of each number in the array for num in arr: count[num] += 1 # append the number to the output array for each occurance for i in range(start, end+1): for c in range(0, count[i]): output.append(i) return output"},{"prompt":"Create a tictactoe agent in Python that implements the minimax algorithm. Not applicable","completion":"class TicTacToe(object): def __init__(self): self.board = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] self.x_player = 1 self.o_player = -1 self.empty = 0 def get_available_moves(self): moves = [] for row in range(3): for col in range(3): if self.board[row][col] == self.empty: moves.append((row, col)) return moves def _evaluate(self): winner = self.get_winner() if winner == self.x_player: return +1 elif winner == self.o_player: return -1 else: return 0 def get_winner(self): for row in range(3): if self.board[row][0] == self.board[row][1] == self.board[row][2]: return self.board[row][0] for col in range(3): if self.board[0][col] == self.board[1][col] == self.board[2][col]: return self.board[0][col] if self.board[0][0] == self.board[1][1] == self.board[2][2]: return self.board[0][0] elif self.board[0][2] == self.board[1][1] == self.board[2][0]: return self.board[1][1] else: return None def make_move(self, row, col, player): self.board[row][col] = player def minimax(self, depth, player): if player == self.x_player: best = [-1, -1, -1000] else: best = [-1, -1, 1000] if depth == 0 or self.get_winner() != None: score = self._evaluate() return [-1, -1, score] for move in self.get_available_moves(): row = move[0] col = move[1] self.make_move(row, col, player) score = self.minimax(depth - 1, -player) self.make_move(row, col, self.empty) score[0] = row score[1] = col if player == self.x_player: if score[2] > best[2]: best = score else: if score[2] < best[2]: best = score return best"},{"prompt":"Write a Python program to convert a set of strings to a single dictionary. [apple, bat, cat], [red, grey, black]","completion":"my_dict = dict(zip([\\"apple\\", \\"bat\\", \\"cat\\"], [\\"red\\", \\"grey\\", \\"black\\"])) #Print the dictionary print(my_dict)"},{"prompt":"Design a program in Python that takes in a string and finds the characters that appear only once. String = This is a test","completion":"def findUniqueChars(str): result = \\"\\" for char in str: if str.count(char) == 1: result += char return result result = findUniqueChars(\\"This is a test\\") print(result)"},{"prompt":"Given a list of numbers, write a Python program to find the number which occurs the most in the list list1 = [1, 2, 3, 4, 4, 3, 3, 3]","completion":"def most_frequent(list1): return max(set(list1), key = list1.count) list1 = [1, 2, 3, 4, 4, 3, 3, 3] print(\\"Number that occurs the most in the list is : \\", most_frequent(list1))"},{"prompt":"Create a Python program that finds the prime factors of a given number.","completion":"def prime_factors(n): factors = [] divisor = 2 while n > 1: if n % divisor == 0: factors.append(divisor) n = n/divisor else: divisor += 1 return factors"},{"prompt":"Modify the following Python program to print the sum of all its elements. # Given a list list = [1, 2, 3, 4, 5]","completion":"# Given a list list = [1, 2, 3, 4, 5] # Calculate sum sum_val = 0 for num in list: sum_val += num # Print the result print(sum_val) # returns 15"},{"prompt":"Create a web scraper in Python to extract all article titles, publication dates, and authors from a given web page. URL: https://www.example.com/new","completion":"import requests from bs4 import BeautifulSoup # define url url = \\"https://www.example.com/news\\" # send GET request to the specified url page = requests.get(url) # create BeautifulSoup object for parsing soup = BeautifulSoup(page.text, 'html.parser') # extract all article titles, publication dates, and authors items = soup.find_all('article') for item in items: title = item.find('h2').text pub_date = item.find('time').text author = item.find('span').text print(title + ' | ' + pub_date + ' | ' + author)"},{"prompt":"Generate a Python class for a race car that has the attributes of engine, transmission, and color.","completion":"\\"\\"\\" Generate a Python class for a race car that has the attributes of engine, transmission, and color \\"\\"\\" class RaceCar: \\"\\"\\" A class to represent a race car with engine, transmission, and color attributes \\"\\"\\" def __init__(self, engine, transmission, color): \\"\\"\\" Initialize the race car with engine, transmission, and color attributes Parameters: engine (string): The type of engine transmission (string): The type of transmission color (string): The color of the car \\"\\"\\" self.engine = engine self.transmission = transmission self.color = color def __str__(self): \\"\\"\\" Return a string representation of the race car \\"\\"\\" return f\\"Race car with {self.engine} engine and {self.transmission} transmission; color is {self.color}\\""},{"prompt":"Create a Python program to detect palindrome words. noo","completion":"def is_palindrome(word): reversed_word = word[::-1] if reversed_word == word: return True else: return False result = is_palindrome(\\"noon\\") print(result)"},{"prompt":"Write a Python function to sort a list of tuples according to the second element of each tuple. [(4, 3), (2, 5), (0, 1)]","completion":"def sort_by_tuple_second(tuple_list): tuple_list.sort(key=lambda x: x[1]) return tuple_list"},{"prompt":"Write a Python program to detect errors in a given json string.","completion":"import json def detect_errors(json_string): try: data = json.loads(json_string) return None except Exception as e: return e"},{"prompt":"mplement a solution in Python to solve the following scheduling problem. You have a list of tasks where each task has a start time and a finish time. Determine a sequence of tasks that can be completed without overlapping. [{âstartâ:3, âendâ:7}, {âstartâ:1, âendâ:2}, {âstartâ:6, âendâ:10}, {âstartâ:8, âendâ:11}, {âstartâ:12, âendâ:15}]","completion":"def solve_scheduling(tasks): # Sort tasks by their finish time tasks.sort(key=lambda task: task[\\"end\\"]) # Initialize the solution sequence sequence = [tasks[0]] # Loop over the rest of the tasks in order for curr_task in tasks[1:]: last_task = sequence[-1] if curr_task[\\"start\\"] >= last_task[\\"end\\"]: sequence.append(curr_task) return sequence tasks = [{\\"start\\":3, \\"end\\":7}, {\\"start\\":1, \\"end\\":2}, {\\"start\\":6, \\"end\\":10}, {\\"start\\":8, \\"end\\":11}, {\\"start\\":12, \\"end\\":15}] sequence = solve_scheduling(tasks) print(\\"The sequence of tasks is:\\") for task in sequence: print(task)"},{"prompt":"Create a Python program that takes a list of integers and returns true if the list contains two distinct numbers whose product is even. [1, 2, 3, 4]","completion":"def has_even_product(numbers): for i in range(len(numbers)): for j in range(i+1, len(numbers)): if numbers[i] * numbers[j] % 2 == 0: return True return False"},{"prompt":"Create a program in Python that takes a URL as input and prints out all the links (href) that appear in the page. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'http://www.example.com' html = requests.get(url).text soup = BeautifulSoup(html, 'html.parser') for link in soup.find_all('a'): print(link.get('href'))"},{"prompt":"mplement a function in Python that prints the average of the two numbers passed as arguments. x=15 y=20","completion":"def compute_average(x, y): return (x + y) / 2 print(compute_average(x,y))"},{"prompt":"Create a Python program to parse data from an XML web service. <?xml version=1.0?> <data> <customer> <name>John Smith</name> <email>john@example.com</email> </customer> <customer> <name>Jane Doe</name> <email>jane@example.com</email> </customer> </data>","completion":"import xml.etree.ElementTree as ET data = '''<?xml version=\\"1.0\\"?> <data> <customer> <name>John Smith</name> <email>john@example.com</email> </customer> <customer> <name>Jane Doe</name> <email>jane@example.com</email> </customer> </data>''' root = ET.fromstring(data) for customer in root.findall('customer'): name = customer.find('name').text email = customer.find('email').text print(f'Name: {name}, Email: {email}') # Output # Name: John Smith, Email: john@example.com # Name: Jane Doe, Email: jane@example.com"},{"prompt":"Write a Python 3 script that reads input from stdin line by line and prints the number of occurrences of each word. The quick brown fox jumps over the lazy dog","completion":"import sys dictionary={} for line in sys.stdin: words_in_line = line.split() for word in words_in_line: word=word.lower() if word in dictionary: dictionary[word]+=1 else: dictionary[word]=1 for word in dictionary: print(word +\\":\\"+ str(dictionary[word]))"},{"prompt":"Translate the given Python program into C++ code. def say_hello(name=): if name == : print(Hello World) else: print(Hello, + name + !)","completion":"#include <iostream> #include <string> void say_hello(std::string name=\\"\\") { if (name.empty()) { std::cout << \\"Hello World\\" << std::endl; } else { std::cout << \\"Hello, \\" << name << \\"!\\" << std::endl; } } int main() { say_hello(); say_hello(\\"John\\"); return 0; }"},{"prompt":"Can you implement a sorting algorithm in Python?","completion":"def sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] arr = [64, 34, 25, 12, 22, 11, 90] sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Write a Python program to sort a list of tuples based on the second element of each tuple. [(3, 4), (2, 5), (1, 6)]","completion":"def sort_list(lst): lst.sort(key = lambda x: x[1]) return lst # Driver code lst = [(3, 4), (2, 5), (1, 6)] print(sort_list(lst)) # Output: [(3, 4), (2, 5), (1, 6)]"},{"prompt":"Write an algorithm to sort an array of integers in Python. [2,1,3,4,6,5]","completion":"def bubble_sort(nums): size = len(nums) for i in range(size): for j in range(size-1): if nums[j] > nums[j+1]: temp = nums[j] nums[j] = nums[j+1] nums[j+1] = temp return nums print(bubble_sort([2,1,3,4,6,5]))"},{"prompt":"Write a function in Python to create a list containing all even numbers between 1 and 20 (inclusive).","completion":"def even_numbers(): even_list = [] for number in range(1, 21): if number % 2 == 0: even_list.append(number) return even_list"},{"prompt":"Generate a python program to detect palindromes","completion":"def is_palindrome(word): word = word.lower() rev_word = word[::-1] if word == rev_word: return True else: return False"},{"prompt":"Construct a class in Python to represent an employee.","completion":"class Employee: def __init__(self, first_name, last_name, salary): self.first_name = first_name self.last_name = last_name self.salary = salary def get_full_name(self): return self.first_name + \\" \\" + self.last_name def get_annual_salary(self): return self.salary * 12"},{"prompt":"Design a Python program to accept two numbers from the user and swap them using a variable.","completion":"num1 = int(input(\\"Enter the first number: \\")) num2 = int(input(\\"Enter the second number: \\")) temp = num1 num1 = num2 num2 = temp print(\\"After swapping:\\") print(\\"First number:\\", num1) print(\\"Second number:\\", num2)"},{"prompt":"Write a Python program to generate a multiplication table for numbers from 2 to 5 using a for loop. Not applicable","completion":"for i in range(2, 6): for j in range(1, 11): print('{} x {} = {}'.format(i, j, i * j)) print(\\" \\")"},{"prompt":"Create a web scraper in Python using Beautiful Soup to extract data from a given URL. The URL is provided below. https://www.readersdigest.com/features/funfac","completion":"import requests from bs4 import BeautifulSoup URL = 'https://www.readersdigest.com/features/fun-facts' page = requests.get(URL) soup = BeautifulSoup(page.content, 'html.parser') results = soup.find_all('div', class_='field-item') for result in results: print(result.find('h3').text) print(result.find('p').text) print()"},{"prompt":"Optimize performance of an existing code snippet by making use of Python's list comprehensions. numbers = [1, 2, 3, 4, 5] squares = [] for n in numbers: squares.append(n*n)","completion":"numbers = [1, 2, 3, 4, 5] squares = [n*n for n in numbers]"},{"prompt":"Write a Python program to generate a combination of random characters.","completion":"import random characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' length = 8 randstring = ''.join(random.choice(characters) for i in range(length))"},{"prompt":"Design a Python algorithm to classify a given set of data into two categories. Data ={A: 1, B: 0, C: 1, D: 1, E: 0}","completion":"def classify(data): # Initialize two empty lists classA = [] classB = [] # Iterate over data for k,v in data.items(): # Populate classA and classB if v == 1: classA.append(k) else: classB.append(k) # Return the two classes return classA, classB # Input data Data = {\\"A\\": 1, \\"B\\": 0, \\"C\\": 1, \\"D\\": 1, \\"E\\": 0} # Call the classify function classA, classB = classify(Data) # Print the results print(classA) # ['A', 'C', 'D'] print(classB) # ['B', 'E']"},{"prompt":"Compose a Python function to find all the prime numbers between 1 and 100.","completion":"def find_primes(x, y): result = [] for num in range(x, y + 1): if num > 1: isPrime = True for i in range(2, num//2 + 1): if num % i == 0: isPrime = False break if isPrime: result.append(num) return result"},{"prompt":"Create a Python program that prints out a message if a given number is divisible by 7. num = 49","completion":"num = 49 if num % 7 == 0: print(\\"The number %d is divisible by 7!\\" %num)"},{"prompt":"Generate a valid Python code that will create an empty dictionary","completion":"my_dict = {}"},{"prompt":"Write a Python method which generates a Fibonacci sequence up to the nth number.","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2)"},{"prompt":"Write a Python script that uses recursion to calculate the Fibonacci sequence for a given number of terms. 6","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program n = 6 print(Fibonacci(n))"},{"prompt":"Generate a function in Python that prints out a given string five times i.e. the function has one parameter, the string to be printed out.","completion":"def print_five_times(input_string): for _ in range(5): print(input_string) print_five_times(\\"Hello World!\\")"},{"prompt":"Display a Classification banner for an Xwindows session by running the Python script classificationbanner.py. The banner displays the classification level and can be customized with various options such as foreground and background colors, font face and size, and opacity. The banner can also show the user and hostname and can be temporarily hidden by pressing the ESC key. The script can be configured with a global configuration file located at /etc/classificationbanner. To launch the banner, run the script and ensure that the DISPLAY environment variable is set.","completion":"#!/usr/bin/python # Classification Banner # # Last update was 02 July 2018 # # Script: classification-banner.py # Description: Displays a Classification for an Xwindows session # Copyright: Frank Caviggia, 2017 # Author: Frank Caviggia <fcaviggia (at) gmail.com> # Version: 1.6.6 # License: GPLv2 import sys,os,optparse,time from socket import gethostname # Check if DISPLAY variable is set try: os.environ[\\"DISPLAY\\"] import pygtk,gtk except: try: import Gtk except: print(\\"Error: DISPLAY environment variable not set.\\") sys.exit(1) # Global Configuration File CONF_FILE = \\"/etc/classification-banner\\" # Returns Username def get_user(): try: user = os.getlogin() except: user = '' pass return user # Returns Hostname def get_host(): host = gethostname() host = host.split('.')[0] return host # Classification Banner Class class Classification_Banner: \\"\\"\\"Class to create and refresh the actual banner.\\"\\"\\" def __init__(self, message=\\"UNCLASSIFIED\\", fgcolor=\\"#000000\\", bgcolor=\\"#00CC00\\", face=\\"liberation-sans\\", size=\\"small\\", weight=\\"bold\\", x=0, y=0, esc=True, opacity=0.75, sys_info=False): \\"\\"\\"Set up and display the main window Keyword arguments: message -- The classification level to display fgcolor -- Foreground color of the text to display bgcolor -- Background color of the banner the text is against face -- Font face to use for the displayed text size -- Size of font to use for text weight -- Bold or normal hres -- Horizontal Screen Resolution (int) [ requires vres ] vres -- Vertical Screen Resolution (int) [ requires hres ] opacity -- Opacity of window (float) [0 .. 1, default 0.75] \\"\\"\\" self.hres = x self.vres = y # Dynamic Resolution Scaling self.monitor = gtk.gdk.Screen() self.monitor.connect(\\"size-changed\\", self.resize) # Newer versions of pygtk have this method try: self.monitor.connect(\\"monitors-changed\\", self.resize) except: pass # Create Main Window self.window = gtk.Window() self.window.set_position(gtk.WIN_POS_CENTER) self.window.connect(\\"hide\\", self.restore) self.window.connect(\\"key-press-event\\", self.keypress) self.window.modify_bg(gtk.STATE_NORMAL, gtk.gdk.color_parse(bgcolor)) self.window.set_property('skip-taskbar-hint', True) self.window.set_property('skip-pager-hint', True) self.window.set_property('destroy-with-parent', True) self.window.stick() self.window.set_decorated(False) self.window.set_keep_above(True) self.window.set_app_paintable(True) try: self.window.set_opacity(opacity) except: pass # Set the default window size self.window.set_default_size(int(self.hres), 5) # Create Main Horizontal Box to Populate self.hbox = gtk.HBox() # Create the Center Vertical Box self.vbox_center = gtk.VBox() self.center_label = gtk.Label( \\"<span font_family='%s' weight='%s' foreground='%s' size='%s'>%s</span>\\" % (face, weight, fgcolor, size, message)) self.center_label.set_use_markup(True) self.center_label.set_justify(gtk.JUSTIFY_CENTER) self.vbox_center.pack_start(self.center_label, True, True, 0) # Create the Right-Justified Vertical Box to Populate for hostname self.vbox_right = gtk.VBox() self.host_label = gtk.Label( \\"<span font_family='%s' weight='%s' foreground='%s' size='%s'>%s</span>\\" % (face, weight, fgcolor, size, get_host())) self.host_label.set_use_markup(True) self.host_label.set_justify(gtk.JUSTIFY_RIGHT) self.host_label.set_width_chars(20) # Create the Left-Justified Vertical Box to Populate for user self.vbox_left = gtk.VBox() self.user_label = gtk.Label( \\"<span font_family='%s' weight='%s' foreground='%s' size='%s'>%s</span>\\" % (face, weight, fgcolor, size, get_user())) self.user_label.set_use_markup(True) self.user_label.set_justify(gtk.JUSTIFY_LEFT) self.user_label.set_width_chars(20) # Create the Right-Justified Vertical Box to Populate for ESC message self.vbox_esc_right = gtk.VBox() self.esc_label = gtk.Label( \\"<span font_family='liberation-sans' weight='normal' foreground='%s' size='xx-small'> (ESC to hide temporarily) </span>\\" % (fgcolor)) self.esc_label.set_use_markup(True) self.esc_label.set_justify(gtk.JUSTIFY_RIGHT) self.esc_label.set_width_chars(20) # Empty Label for formatting purposes self.vbox_empty = gtk.VBox() self.empty_label = gtk.Label( \\"<span font_family='liberation-sans' weight='normal'> </span>\\") self.empty_label.set_use_markup(True) self.empty_label.set_width_chars(20) if not esc: if not sys_info: self.hbox.pack_start(self.vbox_center, True, True, 0) else: self.vbox_right.pack_start(self.host_label, True, True, 0) self.vbox_left.pack_start(self.user_label, True, True, 0) self.hbox.pack_start(self.vbox_right, False, True, 20) self.hbox.pack_start(self.vbox_center, True, True, 0) self.hbox.pack_start(self.vbox_left, False, True, 20) else: if esc and not sys_info: self.empty_label.set_justify(gtk.JUSTIFY_LEFT) self.vbox_empty.pack_start(self.empty_label, True, True, 0) self.vbox_esc_right.pack_start(self.esc_label, True, True, 0) self.hbox.pack_start(self.vbox_esc_right, False, True, 0) self.hbox.pack_start(self.vbox_center, True, True, 0) self.hbox.pack_start(self.vbox_empty, False, True, 0) if sys_info: self.vbox_right.pack_start(self.host_label, True, True, 0) self.vbox_left.pack_start(self.user_label, True, True, 0) self.hbox.pack_start(self.vbox_right, False, True, 20) self.hbox.pack_start(self.vbox_center, True, True, 0) self.hbox.pack_start(self.vbox_left, False, True, 20) self.window.add(self.hbox) self.window.show_all() self.width, self.height = self.window.get_size() # Restore Minimized Window def restore(self, widget, data=None): self.window.deiconify() self.window.present() return True # Destroy Classification Banner Window on Resize (Display Banner Will Relaunch) def resize(self, widget, data=None): self.window.destroy() return True # Press ESC to hide window for 15 seconds def keypress(self, widget, event=None): if event.keyval == 65307: if not gtk.events_pending(): self.window.iconify() self.window.hide() time.sleep(15) self.window.show() self.window.deiconify() self.window.present() return True class Display_Banner: \\"\\"\\"Display Classification Banner Message\\"\\"\\" def __init__(self): # Dynamic Resolution Scaling self.monitor = gtk.gdk.Screen() self.monitor.connect(\\"size-changed\\", self.resize) # Newer versions of pygtk have this method try: self.monitor.connect(\\"monitors-changed\\", self.resize) except: pass # Launch Banner self.config, self.args = self.configure() self.execute(self.config) # Read Global configuration def configure(self): config = {} try: execfile(CONF_FILE, config) except: pass defaults = {} defaults[\\"message\\"] = config.get(\\"message\\", \\"UNCLASSIFIED\\") defaults[\\"fgcolor\\"] = config.get(\\"fgcolor\\", \\"#FFFFFF\\") defaults[\\"bgcolor\\"] = config.get(\\"bgcolor\\", \\"#007A33\\") defaults[\\"face\\"] = config.get(\\"face\\", \\"liberation-sans\\") defaults[\\"size\\"] = config.get(\\"size\\", \\"small\\") defaults[\\"weight\\"] = config.get(\\"weight\\", \\"bold\\") defaults[\\"show_top\\"] = config.get(\\"show_top\\", True) defaults[\\"show_bottom\\"] = config.get(\\"show_bottom\\", True) defaults[\\"hres\\"] = config.get(\\"hres\\", 0) defaults[\\"vres\\"] = config.get(\\"vres\\", 0) defaults[\\"sys_info\\"] = config.get(\\"sys_info\\", False) defaults[\\"opacity\\"] = config.get(\\"opacity\\", 0.75) defaults[\\"esc\\"] = config.get(\\"esc\\", True) defaults[\\"spanning\\"] = config.get(\\"spanning\\", False) # Use the global config to set defaults for command line options parser = optparse.OptionParser() parser.add_option(\\"-m\\", \\"--message\\", default=defaults[\\"message\\"], help=\\"Set the Classification message\\") parser.add_option(\\"-f\\", \\"--fgcolor\\", default=defaults[\\"fgcolor\\"], help=\\"Set the Foreground (text) color\\") parser.add_option(\\"-b\\", \\"--bgcolor\\", default=defaults[\\"bgcolor\\"], help=\\"Set the Background color\\") parser.add_option(\\"-x\\", \\"--hres\\", default=defaults[\\"hres\\"], type=\\"int\\", help=\\"Set the Horizontal Screen Resolution\\") parser.add_option(\\"-y\\", \\"--vres\\", default=defaults[\\"vres\\"], type=\\"int\\", help=\\"Set the Vertical Screen Resolution\\") parser.add_option(\\"-o\\", \\"--opacity\\", default=defaults[\\"opacity\\"], type=\\"float\\", dest=\\"opacity\\", help=\\"Set the window opacity for composted window managers\\") parser.add_option(\\"--face\\", default=defaults[\\"face\\"], help=\\"Font face\\") parser.add_option(\\"--size\\", default=defaults[\\"size\\"], help=\\"Font size\\") parser.add_option(\\"--weight\\", default=defaults[\\"weight\\"], help=\\"Set the Font weight\\") parser.add_option(\\"--disable-esc-msg\\", default=defaults[\\"esc\\"], dest=\\"esc\\", action=\\"store_false\\", help=\\"Disable the 'ESC to hide' message\\") parser.add_option(\\"--hide-top\\", default=defaults[\\"show_top\\"], dest=\\"show_top\\", action=\\"store_false\\", help=\\"Disable the top banner\\") parser.add_option(\\"--hide-bottom\\", default=defaults[\\"show_bottom\\"], dest=\\"show_bottom\\", action=\\"store_false\\", help=\\"Disable the bottom banner\\") parser.add_option(\\"--system-info\\", default=defaults[\\"sys_info\\"], dest=\\"sys_info\\", action=\\"store_true\\", help=\\"Show user and hostname in the top banner\\") parser.add_option(\\"--enable-spanning\\", default=defaults[\\"spanning\\"], dest=\\"spanning\\", action=\\"store_true\\", help=\\"Enable banner(s) to span across screens as a single banner\\") options, args = parser.parse_args() return options, args # Launch the Classification Banner Window(s) def execute(self, options): self.num_monitor = 0 if options.hres == 0 or options.vres == 0: # Try Xrandr to determine primary monitor resolution try: self.screen = os.popen(\\"xrandr | grep ' connected ' | awk '{ print 3 }'\\").readlines()[0] self.x = self.screen.split('x')[0] self.y = self.screen.split('x')[1].split('+')[0] except: try: self.screen = os.popen(\\"xrandr | grep ' current ' | awk '{ print 8910+0 }'\\").readlines()[0] self.x = self.screen.split('x')[0] self.y = self.screen.split('x')[1].split('+')[0] except: self.screen = os.popen(\\"xrandr | grep '^*0' | awk '{ print 234 }'\\").readlines()[0] self.x = self.screen.split('x')[0] self.y = self.screen.split('x')[1].split('+')[0] else: # Fail back to GTK method self.display = gtk.gdk.display_get_default() self.screen = self.display.get_default_screen() self.x = self.screen.get_width() self.y = self.screen.get_height() else: # Resoultion Set Staticly self.x = options.hres self.y = options.vres if not options.spanning and self.num_monitor > 1: for monitor in range(self.num_monitor): mon_geo = self.screen.get_monitor_geometry(monitor) self.x_location, self.y_location, self.x, self.y = mon_geo self.banners(options) else: self.x_location = 0 self.y_location = 0 self.banners(options) def banners(self, options): if options.show_top: top = Classification_Banner( options.message, options.fgcolor, options.bgcolor, options.face, options.size, options.weight, self.x, self.y, options.esc, options.opacity, options.sys_info) top.window.move(self.x_location, self.y_location) if options.show_bottom: bottom = Classification_Banner( options.message, options.fgcolor, options.bgcolor, options.face, options.size, options.weight, self.x, self.y, options.esc, options.opacity) bottom.window.move(self.x_location, int(bottom.vres)) # Relaunch the Classification Banner on Screen Resize def resize(self, widget, data=None): self.config, self.args = self.configure() self.execute(self.config) return True # Main Program Loop if __name__ == \\"__main__\\": run = Display_Banner() gtk.main()"},{"prompt":"Generate a function in Python to get the nth element of a given list.","completion":"def get_nth_item(lst, n): \\"\\"\\" This function returns the nth item of a given list. \\"\\"\\" return lst[n]"},{"prompt":"Write a python code to extract all the characters in a given string which occur exactly 3 times. mississippi","completion":"def get_chars_with_exact_freq(string, freq): # create a character count hashtable count = {} # loop through the characters in the given string for char in string: # if the character is present in count if char in count: # increase the count of the character count[char] += 1 else: # set the count of the character to 1 count[char] = 1 # initialize a list to store the characters that appear with given frequency chars_with_freq = [] # loop through the characters in the count for key in count: # if the count of the character is equal to given frequency if count[key] == freq: # append the character to chars_with_freq chars_with_freq.append(key) # return the list of characters return chars_with_freq result = get_chars_with_exact_freq(\\"mississippi\\", 3) print(result)"},{"prompt":"w would you define a function in Python to find the longest palindromic substring in a given string?","completion":"def longestPalindrome(s): answer = '' max_length = 0 for i in range(len(s)): for j in range(i+1, len(s)+1): curr_str = s[i:j] curr_str_rev = curr_str[::-1] if curr_str == curr_str_rev and max_length < len(curr_str): max_length = len(curr_str) answer = curr_str return answer"},{"prompt":"Estimate the total amount of time spent by a user on a website using a Python program. time_spent = [120, 60, 90, 5, 10, 45]","completion":"#Calculate total amount of time spent by a user on a website def total_time_spent(time_spent): \\"\\"\\" Calculates the total amount of time spent by a user on a website Parameters ---------- time_spent : list List of times, in seconds, spent by the user on the website Returns ------- total : float Total amount of time, in minutes, spent by the user \\"\\"\\" # Initialise total to 0 total = 0 # Loop through the list and calculate total for t in time_spent: total += t # Tranform the time from seconds to minutes total_minutes = total/60 return total_minutes #Test time_spent = [120, 60, 90, 5, 10, 45] total = total_time_spent(time_spent) print(\\"Total time spent (minutes):\\", total)"},{"prompt":"Create a python program that takes in temperature readings and prints if it is below 15 degrees or over 30 degrees.","completion":"def check_temperature(temp): if temp <= 15: print('It is below 15 degrees.') elif temp >= 30: print('It is over 30 degrees.') else: print('Temperature is normal.')"},{"prompt":"Generate a web scraper written in python, to scrape contents from an online newspaper's website. https://www.nytimes.com/","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.nytimes.com/' response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') all_articles = soup.findAll(\\"div\\", {\\"class\\": \\"css-1l4spti\\"}) for article in all_articles: title = article.find(\\"h2\\").text published_date = article.find(\\"time\\")[\\"datetime\\"] print(title) print(published_date)"},{"prompt":"Design a Python program to print out all possible permutations of a 3 character string. ABC","completion":"def permutation(str): if len(str) == 0: return [] if len(str) == 1: return [str] l = [] for i in range(len(str)): m = str[i] remLst = permutation(str[:i] + str[i+1:]) for p in remLst: l.append(m + p) return l string = 'ABC' l = permutation(string) for s in l: print(s)"},{"prompt":"Generate a python program for validating a phone number. Phone numbers should be in 10digit format (no dashes, hyphens, etc.).","completion":"def valid_phone_number(phone): phone = str(phone) return len(phone) == 10 and phone.isdigit()"},{"prompt":"Create a function in Python to sort a list of dictionaries by a particular key. Example of a list of dictionarie","completion":"def sort_list(lst, key): # Sorts a list of dictionaries return sorted(lst, key=lambda k: k[key])"},{"prompt":"Using the provided dataset, create a Python script that reads the data and compute the median of the 'age' column. data = [ {'name': 'John', 'age': 42}, {'name': 'Harry', 'age': 34}, {'name': 'Jack', 'age': 29}, {'name': 'Joe', 'age': 22}, {'name': 'James', 'age': 18}, ]","completion":"import statistics data = [ {'name': 'John', 'age': 42}, {'name': 'Harry', 'age': 34}, {'name': 'Jack', 'age': 29}, {'name': 'Joe', 'age': 22}, {'name': 'James', 'age': 18}, ] ages = [person['age'] for person in data] median_age = statistics.median(ages) print(median_age)"},{"prompt":"Create a webserver with Python which listens at port 80 and responds with a Hello World! message.","completion":"import http.server server_address = ('', 80) class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler): def do_GET(self): self.send_response(200) self.send_header('Content-type','text/html') self.end_headers() self.wfile.write(b\\"Hello World!\\") httpd = http.server.HTTPServer(server_address, MyHttpRequestHandler) httpd.serve_forever()"},{"prompt":"Given a list of RGB values, write a python function to convert it to a corresponding list of HSL values. RGB list: [[255, 200, 80], [100, 50, 20], [255, 0, 0]]","completion":"def RGB_to_HSL(RGBList): output = [] for color in RGBList: r = color[0]/255 g = color[1]/255 b = color[2]/255 c_max = max(r, g, b) c_min = min(r, g, b) delta = c_max - c_min h = 0 if delta == 0: h = 0 elif c_max == r: h = 60 * (((g - b)/delta) % 6) elif c_max == g: h = 60 * (((b - r)/delta) + 2) elif c_max == b: h = 60 * (((r - g)/delta) + 4) l = (c_max + c_min)/2 s = 0 if delta == 0: s = 0 else: s = delta/(1 - abs((2 * l) - 1)) output.append([h,s,l]) return output"},{"prompt":"Rewrite the following SQL query into Python code. SELECT * FROM table WHERE column1 = 'value1' AND column2 = 'value2'.","completion":"# define the parameters for the query column1 = 'value1' column2 = 'value2' # execute the query result = table.objects.filter(column1=column1, column2=column2)"},{"prompt":"Create a sorting algorithm in Python that uses Quick Sort. # unsorted list arr = [10, 7, 8, 9, 1, 5]","completion":"# function to perform quick sort def QuickSort(arr): # base case if len(arr) <= 1: return arr # Select pivot pivot = arr[len(arr) // 2] # partition the array left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] # recursive call return QuickSort(left) + middle + QuickSort(right) # unsorted list arr = [10, 7, 8, 9, 1, 5] # Print the sorted array print(\\"Sorted array is: \\", QuickSort(arr))"},{"prompt":"Use the following data to create a graphical representation in Python. x = [1,2,3,4,5] y = [2,4,6,8,10]","completion":"import matplotlib.pyplot as plt x = [1,2,3,4,5] y = [2,4,6,8,10] plt.plot(x,y) plt.title('Graph title') plt.xlabel('X-axis Label') plt.ylabel('Y-axis Label') plt.show()"},{"prompt":"Create a web API in Python using Django which returns the current time. Not applicable","completion":"# views.py from django.shortcuts import render import datetime # Create your views here. def show_time(request): now = datetime.datetime.now() date_time = now.strftime(\\"%d/%m/%Y, %H:%M:%S\\") context = { 'current_date_time': date_time } return render(request, 'time.html', context) # urls.py from django.urls import path from .import views urlpatterns = [ path('time/', views.show_time, name='time'), ] # time.html <p>Current date and time: <strong>{{ current_date_time }}</strong></p>"},{"prompt":"Create a python program to calculate the average of the three numbers 55, 48 and 65","completion":"def calculate_average(a, b, c): \\"\\"\\" Calculate the average of the three numbers \\"\\"\\" return (a + b + c)/3 if __name__ == '__main__': result = calculate_average(55, 48, 65) print('Average of 55, 48 and 65 is', result)"},{"prompt":"Create a Python program to join two strings together. string1 = Hello, string2 = World!","completion":"def join_strings(string1, string2): return string1 + string2"},{"prompt":"Write a Python program to check if two given strings are an anagram of each other.","completion":"def is_anagram(str1, str2): if sorted(str1) == sorted(str2): return True else: return False str1 = \\"listen\\" str2 = \\"silent\\" print(is_anagram(str1, str2))"},{"prompt":"Create a while loop in Python to print the numbers from 1 to 10.","completion":"i = 1 while i <= 10: print(i) i += 1"},{"prompt":"Write a Python script to compare two strings and print the longer string.","completion":"def get_longer_string(string1, string2): if len(string1) > len(string2): return string1 else: return string2 longer_string = get_longer_string(\\"Hello\\", \\"World\\") print(longer_string)"},{"prompt":"Create a mathematical expression solver function in Python. 2 + 2","completion":"def expression_solver(expression): '''This function solves a given mathematical expression''' return eval(expression) expression = \\"2 + 2\\" result = expression_solver(expression) print(result) # 4"},{"prompt":"Generate a python program to create a game of Rock, Paper, Scissors","completion":"\\"\\"\\" Create a game of Rock, Paper, Scissors \\"\\"\\" import random def game(): choices = [\\"Rock\\", \\"Paper\\", \\"Scissors\\"] # randomly select a choice user = random.choice(choices) # randomly select a choice computer = random.choice(choices) print(\\"User chooses: \\", user) print(\\"Computer chooses: \\", computer) if user == computer: print(\\"It is a tie\\") if user == \\"Rock\\": if computer == \\"Paper\\": print(\\"Computer wins!\\", computer, \\"covers\\", user) else: print(\\"User wins!\\", user, \\"smashes\\", computer) elif user == \\"Paper\\": if computer == \\"Scissors\\": print(\\"Computer wins!\\", computer, \\"cut\\", user) else: print(\\"User wins!\\", user, \\"covers\\", computer) if __name__ == '__main__': game()"},{"prompt":"Generate a python code to print a triangle of stars with a given number of rows.","completion":"def print_triangle(rows): \\"\\"\\" This function prints a triangle of stars with a given number of rows. Parameters: rows (int): The number of rows Returns: None \\"\\"\\" for i in range(rows): for j in range(i+1): print(\\"* \\", end=\\"\\") print('r')"},{"prompt":"Create a Python script that takes an array of integers and prints the number of positive,negative, and zero elements in the array. [1, 0, 2, 3, 4, 6]","completion":"# Defining the function def count_positive_negative_zero(arr): # Keeping track of the counts positive_count = 0 negative_count = 0 zero_count = 0 # Iterating over the array of integers for number in arr: if number > 0: positive_count += 1 elif number == 0: zero_count += 1 elif number < 0: negative_count += 1 # Printing the results print('Number of positive elements:', positive_count) print('Number of zero elements:', zero_count) print('Number of negative elements:', negative_count) # Testing the function arr = [1, 0, -2, 3, 4, -6] count_positive_negative_zero(arr) # Output # Number of positive elements: 3 # Number of zero elements: 1 # Number of negative elements: 2"},{"prompt":"Write a Python program to group a list of string elements into a dictionary of word counts. ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test']","completion":"words = ['hello', 'world', 'hello', 'world', 'this', 'is', 'a', 'test'] word_counts = {word: words.count(word) for word in words} print(word_counts) # Output: {'hello': 2, 'world': 2, 'this': 1, 'is': 1, 'a': 1, 'test': 1}"},{"prompt":"Create a Python class which can be instantiated into an object. The object should take two parameters in its construction and store them as separate instance variables.","completion":"class SampleObject: def __init__(self, param1, param2): self.param1 = param1 self.param2 = param2 obj = SampleObject(1, 2)"},{"prompt":"Write a Python program to convert strings from upper case to lower case.","completion":"def convert_lowercase(string): return string.lower()"},{"prompt":"Can you create a data type in Python to represent a student record?","completion":"class Student: def __init__(self, name, age, address, number): self.name = name self.age = age self.address = address self.number = number # Usage student = Student(\\"John Smith\\", 20, \\"123 Main St\\", 123456789)"},{"prompt":"Generate an algorithm in Python that can classify any dataset having 3 classes.","completion":"from sklearn.svm import SVC from sklearn.model_selection import train_test_split def classify_dataset(X, y): X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0) svm = SVC(kernel = 'linear', C = 0.1).fit(X_train, y_train) y_pred = svm.predict(X_test) return y_pred"},{"prompt":"Write a python program to classify the source of an error. Error message: Connection timed ou","completion":"def classify_error(message): if 'Connection timed out' in message: return 'Network' else: return 'Other'"},{"prompt":"Construct a program in Python to search for a given number in an array. array = [1, 2, 3, 4, 5] number = 3","completion":"def search(array, x): for i in range(len(array)): if array[i] == x: return i return -1"},{"prompt":"Create a web server in Python that can handle HTTP requests and provide an appropriate response like an HTML page. Not applicable","completion":"import http.server PORT = 8080 server_address = ('localhost', PORT) with http.server.HTTPServer(server_address, http.server.CGIHTTPRequestHandler) as httpd: print('Serving HTTP on port {0} ...'.format(PORT)) httpd.serve_forever()"},{"prompt":"Develop a Python code to give an alert message of the total cost of an item after adding tax. cost = 5 tax rate = 0.2","completion":"tax_rate = 0.2 cost = 5 total_cost = cost + (cost * tax_rate) print(\\"The total cost of the item after adding tax is \\" + str(total_cost)) alert(\\"The total cost of the item after adding tax is \\" + str(total_cost))"},{"prompt":"Create a Python program that can convert temperatures between celsius and fahrenheit.","completion":"def celsius_to_fahrenheit(temp): fahrenheit = temp * 9/5 + 32 return fahrenheit def fahrenheit_to_celsius(temp): celsius = (temp - 32) * 5/9 return celsius print(\\"Fahrenheit to Celsius:\\", fahrenheit_to_celsius(59)) print(\\"Celsius to Fahrenheit:\\", celsius_to_fahrenheit(15))"},{"prompt":"Create a neural network in Python capable of solving a multiple classification problem.","completion":"import tensorflow as tf # Create an input layer with two input features inputs = tf.keras.Input(shape=(2,)) # Add a dense layer with three neurons x = tf.keras.layers.Dense(3, activation='sigmoid')(inputs) # Add a dense layer with three neurons outputs = tf.keras.layers.Dense(3, activation='softmax')(x) # Create the model model = tf.keras.Model(inputs=inputs, outputs=outputs) # Compile model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"},{"prompt":"Create a function in Python to optimize the given objective function. Objective Function: 3x2 + 8x + 7","completion":"def optimize_function(x): return 3*x**2 + 8*x + 7 def objective_function(x): return optimize_function(x) def optimize(): optimal_x = 0 min_val = objective_function(optimal_x) for x in range(1, 1000): current_val = objective_function(x) if current_val < min_val: min_val = current_val optimal_x = x return optimal_x"},{"prompt":"Develop a Python program to find and print all the sublists in a given list. [1, 2, 3, 4]","completion":"def find_sublists(my_list): # Initialize result res = [[]] # Consider each element of the original list for elements in my_list: # Initialize temp temp = [] # Store current element in temp temp.append(elements) # For every element in the result, add the # current element - temp for r in res: new_r = r + temp res.append(new_r) # Print the result for r in res: print(r) # Driver code my_list = [1, 2, 3, 4] find_sublists(my_list)"},{"prompt":"Create a chatbot that can answer basic questions about programming.","completion":"import nltk import numpy as np import random import string from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import cosine_similarity def create_chatbot(): greetings = [\\"hi\\", \\"hey\\", \\"hello\\", \\"hola\\", \\"greetings\\", \\"wassup\\", \\"yo\\"] greet_response = [\\"hey there friend!\\", \\"hi there! How can I help you?\\", \\"hello! What would you like to know?\\"] question_responses = { \\"what is python?\\": \\"Python is a widely-used general-purpose, high-level programming language.\\", \\"who created python?\\": \\"Python was created in the late 1980s by Guido van Rossum, and released in 1991.\\", \\"what is java\\": \\"Java is a class-based, object-oriented programming language developed by Sun Microsystems in the 1990s.\\" } # tokenize the user's input string def tokenize(user_input): tokens = nltk.word_tokenize(user_input) return tokens # generate a response from the chatbot def response(user_input, greetings, greet_responses, question_responses): tokens = tokenize(user_input) # check if the user's input contains a greeting for token in tokens: if token.lower() in greetings: random_greeting = random.choice(greet_responses) return random_greeting # check if the user's input is contained in the question_responses dictionary for token in tokens: if token.lower() in question_responses.keys(): return question_responses[token] print(\\"Hello! I'm your friendly programming chatbot. What can I help you with?\\") exit_chat = False while(exit_chat == False): user_input = input() user_input = user_input.lower() if user_input != 'bye': if user_input == 'thanks' or user_input =='thank you': exit_chat = True print(\\"My pleasure!\\") else: if response(user_input, greetings, greet_responses, question_responses) != None: chatbot_response = response(user_input, greetings, greet_responses, question_responses) print(chatbot_response) else: print(\\"I'm sorry, I don't understand. Can you ask in a different way?\\") else: exit_chat = True print(\\"Bye! Have a nice day!\\")"},{"prompt":"Create a program in Python to calculate the length of a given string without using the len() method. string=Python","completion":"def length(string): count = 0 for char in string: count += 1 return count string=\\"Python\\" print(length(string))"},{"prompt":"Create a Python script that takes a list of numbers as input and prints out the mean and the standard deviation of the list. [5, 7, 10, 8, 6]","completion":"def mean(lst): return sum(lst) / len(lst) def std_dev(lst): avg = mean(lst) variance = 0 for num in lst: variance += (num - avg)**2 variance /= len(lst) return variance**0.5 # Driver Code lst = [5, 7, 10, 8, 6] print(\\"Mean: \\", mean(lst)) print(\\"Standard Deviation: \\", std_dev(lst))"},{"prompt":"Write a Python program to sort a given list according to specified criteria. lst = [('a', 1), ('b', 3), ('c', 2)]","completion":"def sort_list(lst): return sorted(lst, key=lambda x: x[1]) result = sort_list([('a', 1), ('b', 3), ('c', 2)]) print(result)"},{"prompt":"Write a Python script that takes a list of strings as input and returns a new list with all the duplicates eliminated. [Apple, Pear, Apple, Banana, Pear]","completion":"def remove_duplicates(input_list): unique_list = [] for item in input_list: if item not in unique_list: unique_list.append(item) return unique_list my_list = [\\"Apple\\", \\"Pear\\", \\"Apple\\", \\"Banana\\", \\"Pear\\"] print(remove_duplicates(my_list))"},{"prompt":"This code defines a Python class called DescribeNotificationItemsAction that inherits from BaseAction. To use this class, import it from the qingcloud.cli.iaas_client.actions.base module. The class has a class variable called action set to the string DescribeNotificationItems, a class variable called command set to the string describenotificationitems, and a class variable called usage set to a string that describes how to use the command. To add command line arguments to the command, call the add_ext_arguments class method and pass in a parser object. This method adds three optional arguments to the parser: notificationitems, notificationlist, and notificationitemtype. These arguments correspond to the notification_items, notification_list, and notification_item_type keys in the directive dictionary. To build a directive dictionary from the command line arguments, call the build_directive class method and pass in the parsed options object. This method returns a dictionary containing the notification_items, notification_list, and notification_item_type keys with values taken from the parsed options object.","completion":"# ========================================================================= # Copyright 2012-present Yunify, Inc. # ------------------------------------------------------------------------- # Licensed under the Apache License, Version 2.0 (the \\"License\\"); # you may not use this work except in compliance with the License. # You may obtain a copy of the License in the LICENSE file, or at: # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # ========================================================================= from qingcloud.cli.iaas_client.actions.base import BaseAction class DescribeNotificationItemsAction(BaseAction): action = 'DescribeNotificationItems' command = 'describe-notification-items' usage = '%(prog)s [-i --notification_items...] [-f <conf_file>]' @classmethod def add_ext_arguments(cls, parser): parser.add_argument('-i', '--notification-items', dest='notification_items', action='store', type=str, default=None, help='An array including IDs of notification items.') parser.add_argument('-l', '--notification-list', dest='notification_list', action='store', type=str, default=None, help='The ID of notification list.') parser.add_argument('-t', '--notification-item-type', dest='notification_item_type', action='store', type=str, default=None, help='The type of notification item, including email, phone and webhook.') @classmethod def build_directive(cls, options): directive = { \\"notification_items\\": options.notification_items, \\"notification_list\\": options.notification_list, \\"notification_item_type\\": options.notification_item_type } return directive"},{"prompt":"Write a Python program to create a GraphQL API endpoint","completion":"import graphene class Query(graphene.ObjectType): # An endpoint to fetch all books books = graphene.List(BookType) def resolve_books(self, info): return books class Mutation(graphene.ObjectType): # An endpoint to add a book add_book = graphene.Field(BookType, title=graphene.String(), author=graphene.String(), ) def mutate(self, info, title, author): book = Book(title=title, author=author) book.save() return book schema = graphene.Schema(query=Query, mutation=Mutation)"},{"prompt":"Develop a Python program to compare two dictionaries by keys. dict1 = {A:1, B:2, C:3} dict2 = {A:3, B:2, D:4}","completion":"def compare_dictionaries(dict1, dict2): dict1_keys = set(dict1.keys()) dict2_keys = set(dict2.keys()) # Get the list of keys that are in both dictionaries common_keys = dict1_keys & dict2_keys # Iterate over the list of common keys and compare the values for key in common_keys: if dict1[key] == dict2[key]: print(f\\"{key} is common and value is same\\") else: print(f\\"{key} is common but value is not same\\")"},{"prompt":"Write a Python function to take two input strings, and return the longest common substring of those strings. input_string1 = Hello world input_string2 = Hello world of coding","completion":"def longest_substring(input_string1, input_string2): # Create empty list to store all substrings substr = [] # we will find the length of strings len1 = len(input_string1) len2 = len(input_string2) # Iterate through the string for i in range(len1): tmp = \\"\\" for j in range(len2): if (i + j < len1 and input_string1[i + j] == input_string2[j]): tmp += input_string2[j] else: if (len(tmp) > len(substr)): substr = tmp tmp = \\"\\" # check for lastest substring if len(tmp) > len(substr): substr = tmp # return longest substring return substr"},{"prompt":"Create a Python script that takes in strings representing temperatures in celsius and returns the corresponding temperatures in fahrenheit.","completion":"def c_to_f(celsius): return (celsius * 9.0/5) + 32"},{"prompt":"Create a function in Python to count the occurrence of each word in a sentence. sentence = This is a sample sentence.","completion":"def word_count(sentence): words = sentence.split() word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 return word_freq word_counts = word_count(sentence) print(word_counts)"},{"prompt":"Create a Python function that takes a list of integers and returns the summation of the largest and smallest numbers. [3, 10, 6]","completion":"def sum_of_min_max(lst): \\"\\"\\" Function to take a list of integers and returns the summation of the largest and smallest numbers Arguments: lst -- list -- list of integers Output: summation -- int -- summation of the largest and smallest numbers \\"\\"\\" min_val = min(lst) max_val = max(lst) summation = min_val + max_val return summation"},{"prompt":"Describe a method to find the greatest common divisor (GCD) of two numbers in Python.","completion":"def gcd(a, b): if a == 0 : return b if b == 0 : return a if a == b: return a if a > b: return gcd(a-b, b) return gcd(a, b-a) # Driver program to test above function a = 36 b = 30 if(gcd(a, b)): print('GCD of', a, 'and', b, 'is', gcd(a, b))"},{"prompt":"Create an algorithm in Python that takes a list of strings as input, and returns a new list with all strings that have a length of at least 5 characters. The input list is ['apple', 'cat', 'banana', 'dog', 'potato']","completion":"def filter_by_length(input_list): result = [] for item in input_list: if len(item) >= 5: result.append(item) return result input_list = ['apple', 'cat', 'banana', 'dog', 'potato'] result = filter_by_length(input_list) # result = ['apple', 'banana', 'potato']"},{"prompt":"Change the following Python program such that you can pass any number of strings in the function. def print_strings(s1, s2): print(s1) print(s2)","completion":"def print_strings(*strings): for s in strings: print(s) print_strings(\\"Hello\\", \\"World\\")"},{"prompt":"Generate a predictive model using Python that can accurately determine the average temperature in a city according to previous temperature records. Temperature data for the previous 5 years.","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression data = pd.read_csv(\\"temperature_data.csv\\") X = data[[\\"Year\\", \\"Month\\", \\"Day\\"]] y = data[\\"Temperature\\"] model = LinearRegression() model.fit(X, y) #The model is now created and we can use it to make predictions"},{"prompt":"Write a Python function to find the number of pairs of integers in an array that sum up to a given number","completion":"def count_pairs(numbers, target_sum): count = 0 for i in range(len(numbers)): for j in range(i + 1, len(numbers)): if numbers[i] + numbers[j] == target_sum: count += 1 return count"},{"prompt":"Generate a class that adds two fractional numbers in a python program.","completion":"class Fraction: def __init__(self, numerator, denominator): self.numerator = numerator self.denominator = denominator def add(self, x): self.numerator = self.numerator * x.denominator + x.numerator * self.denominator self.denominator = self.denominator * x.denominator return self.numerator, self.denominator"},{"prompt":"Create a Python function that reverses every other word in a given string. This is a te","completion":"def reverseWords(sentence): words = sentence.split() reversed_sentence = [] for i in range(len(words)): if (i % 2 == 0): reversed_sentence.append(words[i]) else: reversed_sentence.append(words[i][::-1]) return \\" \\".join(reversed_sentence) print(reverseWords(\\"This is a test\\"))"},{"prompt":"Create a Python program that calculates the sum of the digits of a European Union VAT number. DE1905303456","completion":"vat_number = \\"DE1905303456\\" vat_number_without_check_digit = vat_number[:-1] sum = 0 for c in vat_number_without_check_digit: if c.isdigit(): sum += int(c) print(f'Sum of digits: {sum}')"},{"prompt":"write a python code to print the common elements in between two given sets. set1 = {1, 2, 3, 4, 5, 6, 7} set2 = {2, 4, 5, 6}","completion":"def common_elements(set1, set2): return set1 & set2 print(common_elements({1,2,3,4,5,6,7}, {2,4,5,6}))"},{"prompt":"Write a Python program to query the OpenWeatherMap API and generate temperature and wind forecasts for a given city. City: Berl","completion":"import requests # Enter the city for which the forecast is required city = 'Berlin' # OpenWeatherMap API key api_key = '<your_api_key>' # Get the json data from API using the city name url = 'http://api.openweathermap.org/data/2.5/weather?q=' + city + '&APPID=' + api_key weather_data = requests.get(url).json() # Extract the temperature and wind forecast temperature = round(weather_data['main']['temp'] - 273.15, 2) wind_speed = round(weather_data['wind']['speed'], 2) # Print the forecast print('Temperature:', temperature, 'Â°C') print(' Wind Speed:', wind_speed, 'm/s')"},{"prompt":"Convert this pseudocode into a working Python program. FOR EACH item IN the list: IF item is less than 10: PRINT less than 10 ELSE: PRINT greater than 10","completion":"list = [3, 5, 9, 15, 22] for item in list: if item < 10: print(\\"less than 10\\") else: print(\\"greater than 10\\")"},{"prompt":"Write a Python program that takes a list and prints out the items after sorting them in descending order. ['apple', 'banana', 'cherry']","completion":"fruit = ['apple', 'banana', 'cherry'] fruit.sort(reverse=True) print(fruit) # ['cherry', 'banana', 'apple']"},{"prompt":"Correct the syntax error in the below Python code. def fibonacci_sequence(max): nums = [] current, nxt = 0, 1 while current < max: current, nxt = nxt, nxt+current nums.append(current) return number","completion":"def fibonacci_sequence(max): nums = [] current, nxt = 0, 1 while current < max: current, nxt = nxt, nxt+current nums.append(current) return nums"},{"prompt":"Provided a number and a text, write a program in Python that adds the number to each of the words in the text. number = 5 text = Today is Monday","completion":"def add_num(num, text): words = text.split() result = [str(int(w) + num) for w in words] return ' '.join(result) print(add_num(5, \\"Today is Monday\\")) # Output: 10 Today is 10 Monday"},{"prompt":"Create a class in python that stores the details of a person such as name, age, and address.","completion":"class Person: def __init__(self, name, age, address): self.name = name self.age = age self.address = address"},{"prompt":"Write a Python function to sort a list of numbers in ascending order. [2,4,3,1,5]","completion":"def sort_list(list): list.sort() return list print(sort_list([2,4,3,1,5]))"},{"prompt":"Create a simple movie review classifier in Python using a machine learning algorithm. Not applicable","completion":"import pandas as pd from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Load the data data = pd.read_csv('movie_reviews.csv') # Extract the reviews and the labels reviews = data.text.tolist() labels = data.label.tolist() # Transform the reviews to a numerical feature vector cv = CountVectorizer(binary=True) X = cv.fit_transform(reviews) # Initialize the classifier mnb = MultinomialNB() # Train the classifier mnb.fit(X, labels) # Make predictions preds = mnb.predict(X) # Print the accuracy print('Accuracy:', mnb.score(X, labels))"},{"prompt":"Design a class representing a car using Python.","completion":"class Car(): def __init__(self, model, make, color, engine_power, num_wheels): self.model = model self.make = make self.color = color self.engine_power = engine_power self.num_wheels = num_wheels def start_engine(self): print(\\"Engine started.\\") def stop_engine(self): print(\\"Engine stopped.\\")"},{"prompt":"Create an algorithm in Python to sort an array of numbers. [9, 3, 5, 1, 6]","completion":"def sortArray(arr): for i in range(len(arr)): for j in range(i+1,len(arr)): if arr[i] > arr[j]: temp = arr[i] arr[i] = arr[j] arr[j] = temp return arr arr = [9, 3, 5, 1, 6] print(sortArray(arr))"},{"prompt":"Create a Python script to count the frequencies of each letter in a given string. text = Hello, World!","completion":"def count_letter_frequency(text): frequency = {} for letter in text: if letter in frequency: frequency[letter] += 1 else: frequency[letter] = 1 return frequency text = \\"Hello, World!\\" print(count_letter_frequency(text))"},{"prompt":"Write a Python program to filter out all the strings longer than 10 characters in a list of strings. my_list = [Hello, World, Welcome to the world!, Hi!]","completion":"def filter_long_strings(my_list): long_strings = [] for i in my_list: if len(i) > 10: long_strings.append(i) return long_strings"},{"prompt":"Create a Python script that finds the longest word in a given sentence. This is a sample sentence","completion":"def find_longest_word(sentence): words = sentence.split(\\" \\") longest_word = \\"\\" for word in words: if len(word) > len(longest_word): longest_word = word return longest_word result = find_longest_word(\\"This is a sample sentence\\") print(result)"},{"prompt":"Classify the following Python code snippet according to the function it implements. def square_sum(num_list): result = 0 for num in num_list: result += num * num return resul","completion":"The code implements a function for summing the squares of a list of numbers."},{"prompt":"Create a function in Python to solve this Leetcode problem. Problem: Given an array of integers arr and an integer k, find the k closest elements to a given value x in the array. If the elements close to x are greater than x, sort them in increasing order while maintaining their original order. If the elements close to x are smaller than x, sort them in decreasing order while maintaining their original order.","completion":"def kClosestValues(arr, x, k): closestPrimes = [] diff = float(\\"inf\\") for num in arr: currentDiff = abs(num - x) if currentDiff <= diff: if currentDiff < diff: closestPrimes = [] closestPrimes.append(num) diff = currentDiff if closestPrimes[0] > x: closestPrimes.sort() else: closestPrimes.sort(reverse=True) return closestPrimes[:k]"},{"prompt":"Create a custom reader to parse additional solver output from a log file context. The reader should be initialised interactively through IPET or from an interactive python shell. The constructor should have the following parameters: name (optional), regpattern (a string or regular expression pattern to detect lines from which output should be read), datakey (the data key under which the parsed datum gets stored for every problem), index (the zerobased index of the number in the specified line, only numbers count), datatype (choose 'int' or 'float'), method (how to treat multiple occurrences of this data within one problem; 'count' occurrences or parse 'first', 'last', 'sum', 'min' or 'max'). The reader should inherit from StatisticReader and have a name attribute of 'CustomReader'.","completion":"\\"\\"\\" The MIT License (MIT) Copyright (c) 2018 Zuse Institute Berlin, www.zib.de Permissions are granted as stated in the license file you have obtained with this software. If you find the library useful for your purpose, please refer to README.md for how to cite IPET. @author: Gregor Hendel \\"\\"\\" from .StatisticReader import StatisticReader import re import builtins import logging from ipet import misc from ipet.concepts.IPETNode import IpetNode logger = logging.getLogger(__name__) class CustomReader(StatisticReader): \\"\\"\\" Reader to be initialised interactively through IPET or from an interactive python shell \\"\\"\\" name = 'CustomReader' regexp = 'Custom' datakey = 'Custom' data = None METHOD_FIRST = 1 METHOD_LAST = 2 METHOD_SUM = 3 METHOD_MIN = 4 METHOD_MAX = 5 METHOD_COUNT = 6 str2method = { \\"first\\" : METHOD_FIRST, \\"last\\" : METHOD_LAST, \\"sum\\" : METHOD_SUM, \\"min\\" : METHOD_MIN, \\"max\\" : METHOD_MAX, \\"count\\" : METHOD_COUNT } requiredoptions = { \\"datatype\\" : [\\"float\\", \\"int\\"], \\"method\\" : list(str2method.keys()) } def __init__(self, name = None, regpattern = None, datakey = None, index = 0, datatype = \\"float\\", method = \\"last\\", active = True): \\"\\"\\" constructor of a custom reader to parse additional simple solver output from log file context Parameters: ----------- name : a name to distinguish this reader from the others regpattern : A string or regular expression pattern to detect lines from which output should be read datakey : The data key under which the parsed datum gets stored for every problem index : The zero-based index of the number in the specified line (only numbers count) datatype : choose 'int' or 'float' method : how to treat multiple occurrences of this data within one problem; 'count' occurrences or parse 'first', 'last', 'sum', 'min' or 'max' \\"\\"\\" IpetNode.__init__(self, active) if regpattern is None: raise ValueError(\\"Error: No 'regpattern' specified for reader with name %s\\" % str(name)) if name in [None, \\"\\"]: self.name = datakey + \\"Reader\\" self.username = False else: self.name = name self.username = True self.set_datakey(datakey) self.set_index(index) self.regpattern = regpattern self.set_regpattern(regpattern) self.method = method self.methodint = self.METHOD_LAST self.set_method(method) self.set_datatype(datatype) def getEditableAttributes(self): return ['name', 'regpattern', 'datakey', 'index', 'datatype', 'method'] + IpetNode.getEditableAttributes(self) def getRequiredOptionsByAttribute(self, attr): return self.requiredoptions.get(attr, IpetNode.getRequiredOptionsByAttribute(self, attr)) def extractStatistic(self, line): if self.regexp.search(line): logging.debug(\\"Custom Reader {} found match in line n{}\\".format(self.name, line.strip())) logging.debug(\\"Numerical expression matches: {}\\".format(\\", \\".join(misc.numericExpression.findall(line)))) previousdata = self.testrun.getCurrentProblemData(self.datakey) if self.methodint == CustomReader.METHOD_COUNT: if previousdata is None: self.addData(self.datakey, 1) else: self.addData(self.datakey, previousdata + 1) return try: data = misc.getNumberAtIndex(line, self.index) data = self.datatypemethod(data) if self.methodint == CustomReader.METHOD_FIRST: if previousdata is None: self.addData(self.datakey, data) elif self.methodint == CustomReader.METHOD_LAST: self.addData(self.datakey, data) elif self.methodint == CustomReader.METHOD_SUM: if previousdata is None: previousdata = 0 self.addData(self.datakey, data + previousdata) elif self.methodint == CustomReader.METHOD_MIN: if previousdata is None: self.addData(self.datakey, data) elif data < previousdata: self.addData(self.datakey, data) elif self.methodint == CustomReader.METHOD_MAX: if previousdata is None: self.addData(self.datakey, data) elif data > previousdata: self.addData(self.datakey, data) except: logger.warn(\\"Reader %s could not retrieve data at index %d from matching line '%s'\\", self.getName(), self.index, line) pass return None def setDataType(self, sometype): \\"\\"\\" recognizes data types (e.g., 'float' or 'int') and sets reader data type to this value \\"\\"\\" try: self.datatypemethod = getattr(builtins, sometype) self.datatype = sometype except: logger.debug(\\"Error: Could not recognize data type %s, using float\\" % sometype) self.datatypemethod = float self.datatype = 'float' def set_datatype(self, datatype): self.setDataType(datatype) def set_method(self, method): self.methodint = self.str2method.get(method, self.methodint) self.method = method def set_regpattern(self, regpattern): self.regexp = re.compile(regpattern) self.regpattern = regpattern def set_name(self, name): if name == self.getName(): return if name in [\\"\\", None]: self.name = self.datakey + \\"Reader\\" self.username = False else: self.name = name self.username = True def set_datakey(self, datakey): self.datakey = datakey if not self.username: self.name = self.datakey + \\"Reader\\" def set_index(self, index): self.index = int(index)"},{"prompt":"Write an algorithm in Python to sort a given array using Quicksort.","completion":"def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"prompt":"Sort a list of strings [Apple, Banana, Cherry] alphabetically in Python.","completion":"list = [\\"Apple\\", \\"Banana\\", \\"Cherry\\"] list.sort() print(list)"},{"prompt":"Create a machine learning model in Python that predicts the product popularity based on the customer reviews. Data set containing customer reviews and sales volume","completion":"# import libraries import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.linear_model import LogisticRegression # read data data = pd.read_csv('data.csv') # split data into features and labels X = data['customer_reviews'] y = data['Popularity'] # train_test_split X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=42) # Create Tf-idf vectorizer tf = TfidfVectorizer(stop_words='english') # Fit the vectorizer to the data tf.fit(X_train) # Transform train and test data X_train_tf = tf.transform(X_train) X_test_tf = tf.transform(X_test) # Train and fit the model log_model = LogisticRegression() log_model.fit(X_train_tf,y_train) # Predict the labels y_preds = log_model.predict(X_test_tf) # Evaluate the model accuracy = accuracy_score(y_test, y_preds) print('The model accuracy is:', accuracy)"},{"prompt":"Create a python program to wrap text at a given width.","completion":"def wrap_text(text, width): for i in range(0, len(text), width): print(text[i: width + i])"},{"prompt":"Generate a Python code to sort a list of numbers. [100, 50, 30, 10, 7]","completion":"list = [100, 50, 30, 10, 7] list.sort() print(list) # Output: [7, 10, 30, 50, 100]"},{"prompt":"Create a Python program to implement a basic calculator. The program should have functions to perform addition, subtraction, multiplication, division, and find the modulus. Not applicable","completion":"# Program to implement basic calculator operations # Addition, Subtraction, Multiplication, Division, Modulus # Function to add two numbers def add(num1, num2): return num1 + num2 # Function to subtract two numbers def subtract(num1, num2): return num1 - num2 # Function to multiply two numbers def multiply(num1, num2): return num1 * num2 # Function to divide two numbers def divide(num1, num2): return num1 / num2 # Function to find modulus of two numbers def modulus(num1, num2): return num1 % num2 # Print results print(add(10, 20)) print(subtract(20, 10)) print(multiply(20, 10)) print(divide(20, 10)) print(modulus(20, 10))"},{"prompt":"Construct a Python program that reverses an array. [1, 5, 3, 10, 4, 8]","completion":"def reverse_array(arr): low = 0 high = len(arr) - 1 while low < high: arr[low], arr[high] = arr[high], arr[low] low += 1 high -= 1 return arr"},{"prompt":"Write a Python program to print the count of all even numbers in the given list. my_list = [1, 2, 3, 4, 5, 6, 7, 8]","completion":"my_list = [1, 2, 3, 4, 5, 6, 7, 8] count = 0 for i in my_list: if i % 2 == 0: count += 1 print(count)"},{"prompt":"Develop an algorithm in Python for sorting an array.","completion":"# Python program for implementation of Bubble Sort def bubbleSort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j]"},{"prompt":"Write a Python function that takes a list of strings and returns a list of tuples containing each string and the number of characters in that string. ['foo', 'bar', 'baz']","completion":"def list_to_tuples(words): # create an empty list result = [] # create a tuple for each string for word in words: result.append((word, len(word))) return result result = list_to_tuples(['foo', 'bar', 'baz']) print(result)"},{"prompt":"Write a python program to create a list of prime numbers between a given range.","completion":"def find_prime_numbers(start, end): prime_numbers_list = [] for num in range(start, end + 1): if all(num % i != 0 for i in range(2, num)): prime_numbers_list.append(num) return prime_numbers_list"},{"prompt":"Write a Python program that generates a random string made up of five lowercase ASCII characters","completion":"import random def generate_random_string(): characters = 'abcdefghijklmnopqrstuvwxyz' random_string = '' for i in range(5): random_string += random.choice(characters) return random_string result = generate_random_string() print(result)"},{"prompt":"Optimize the following Python code by replacing redundant computations. def complex_computation(x): tmp1 = 2 * x tmp2 = x * x return tmp1 + tmp2","completion":"def complex_computation(x): return x * (2 + x)"},{"prompt":"mplement quick sort in Python.","completion":"def quicksort(arr): if len(arr) <= 1: return arr else: pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)"},{"prompt":"Given a list of strings, write a Python snippet to sort the strings in ascending order according to word length. [ Code, Python, JavaScript, Java]","completion":"strings = [\\"Code\\", \\"Python\\", \\"JavaScript\\", \\"Java\\"] # sort the list by word length strings.sort(key = lambda x: len(x)) print(strings) # Output: [\\"Code\\", \\"Java\\", \\"Python\\", \\"JavaScript\\"]"},{"prompt":"Rewrite the following Python code avoiding nested ifstatements. def check_integer(x): if x > 0: if x*x > 10: return True else: return False else: return False","completion":"def check_integer(x): if x <= 0: return False if x*x > 10: return True return False"},{"prompt":"Create an optimization problem in Python and finds the solution using a numerical solver.","completion":"from scipy.optimize import minimize def objFun(x): return (x[0] - 1)**2 + (x[1] - 4)**2 x0 = [0,0] opt = minimize(objFun, x0) print(opt) # Output is a OptimizeResult object # x: array([1., 4.])"},{"prompt":"Generate an algorithm in Python to determine the count of each occurrence of a given character in a string string: abracadabra character: 'a'","completion":"def count_characters(string, character): count = 0 for c in string: if c == character: count += 1 return count count_characters(\\"abracadabra\\", 'a') # 5"},{"prompt":"Develop a model in Python to forecast a time series.","completion":"from pylab import * from statsmodels.tsa.arima_model import ARIMA # create a dataset data = [12, 15, 8, 7, 8, 10, 13, 6, 11, 10, 13] # fit model model = ARIMA(data, order=(1, 1, 0)) model_fit = model.fit(disp=0) # print summary of fit model print(model_fit.summary()) # make prediction yhat = model_fit.predict(len(data), len(data)) print('Prediction: %f' % yhat)"},{"prompt":"Find the most frequent element in a python list? [2, 3, 3, 5, 5, 5, 7, 8, 8]","completion":"def find_most_frequent(lst): max_count = 0 most_frequent = None count_dict = {} for elem in lst: if elem not in count_dict: count_dict[elem] = 1 else: count_dict[elem] += 1 if count_dict[elem] > max_count: most_frequent = elem max_count = count_dict[elem] return most_frequent, max_count"},{"prompt":"Maxminizing a BlackBox function (Python) A Black box function: def black_box (x): return x ** 2 + 40","completion":"import scipy.optimize # define the black box function def black_box(x): return x ** 2 + 40 # set the initial parameters start = (0, 0) # minimize the black box function res = scipy.optimize.minimize(black_box, start, method=\\"L-BFGS-B\\") # print the result print(res.x) # prints [0.]"},{"prompt":"Create an autonomous car simulator using Python. Not applicable","completion":"import pygame # Define some colors BLACK = (0, 0, 0) WHITE = (255, 255, 255) # Define the class car which represents the car # It contains the car image, the starting position, the x and y movement class Car(pygame.sprite.Sprite): def __init__(self): # Call the parent class (Sprite) constructor pygame.sprite.Sprite.__init__(self) self.image = pygame.image.load(\\"car.png\\").convert() self.image.set_colorkey(BLACK) self.rect = self.image.get_rect() self.rect.x = 350 self.rect.y = 400 self.change_x = 0 self.change_y = 0 def update(self): self.rect.x += self.change_x self.rect.y += self.change_y # Initializes the game pygame.init() screen_width = 700 screen_height = 500 screen = pygame.display.set_mode([screen_width, screen_height]) #Initializes all sprites car_sprite_list = pygame.sprite.Group() car = Car() car_sprite_list.add(car) #This is the main loop of the game clock = pygame.time.Clock() done = False while not done: #Main event loop for event in pygame.event.get(): if event.type == pygame.QUIT: done = True #Update the movement of the car car_sprite_list.update() #Draw everything screen.fill(WHITE) car_sprite_list.draw(screen) pygame.display.flip() clock.tick(60) pygame.quit()"},{"prompt":"The given code generates a SimGrid platform description file for a binary tree network topology with a specified number of hosts. To use the code, run it with a commandline argument specifying the number of hosts desired. The code will generate a platform description file and a host file for the specified number of hosts.","completion":"#!/usr/bin/env python2.7 import sys import os import math # Link parameters link_latency = \\"10us\\" link_bandwidth = 10 link_bandwidth_unit = \\"Gbps\\" # Convenient math wrappers def floor(x): return int(math.floor(x)) def ceil(x): return int(math.ceil(x)) def pow2(x): return int(math.pow(2,x)) # XML generation functions def issueHead(): head = (\\"<?xml version='1.0'?>n\\" \\"<!DOCTYPE platform SYSTEM \\"http://simgrid.gforge.inria.fr/simgrid/simgrid.dtd\\">n\\" \\"<platform version=\\"4\\">nn\\") config_clause = (\\"<!-- WARNING: This <config></config> clause belown\\" \\"makes it so that NO COMPUTATION TIME is simulated. This is becausen\\" \\"in this module, for pedagogic purposes, we don't want to muddy then\\" \\"(simulation) waters with computational times. As a results, thisn\\" \\"XML platform file may not be suitable for running othern\\" \\"simulations, unless you remove the <config></config> clause.n\\" \\"-->n\\" \\"<config>n\\" \\"<prop id=\\"smpi/simulate-computation\\" value=\\"0\\"></prop>n\\" \\"<prop id=\\"smpi/running-power\\" value=\\"200000000000\\"></prop>n\\" \\"</config>nn\\") AS_head = \\"<AS id=\\"AS0\\" routing=\\"Full\\">n\\" return head + config_clause + AS_head def issueTail(): return \\"</AS>n</platform>n\\" def issueLink1(x): return \\" <link id=\\"link-\\"+str(x)+\\"\\" latency=\\"\\"+str(link_latency)+\\"\\" bandwidth=\\"\\"+str(link_bandwidth)+link_bandwidth_unit+\\"\\"/>n\\" def issueLink2(x,y): return \\" <link id=\\"link-\\"+str(x)+\\"-\\"+str(y)+\\"\\" latency=\\"\\"+str(link_latency)+\\"\\" bandwidth=\\"\\"+str(link_bandwidth)+link_bandwidth_unit+\\"\\"/>n\\" def issueLink3(x,y,bw): return \\" <link id=\\"link-\\"+str(x)+\\"-\\"+str(y)+\\"\\" latency=\\"\\"+str(link_latency)+\\"\\" bandwidth=\\"\\"+str(bw)+link_bandwidth_unit+\\"\\"/>n\\" def issueHost(index): return \\" <host id=\\"host-\\"+str(index)+\\".hawaii.edu\\" speed=\\"200Gf\\"/>n\\" def issueRouteHead(index1, index2): return \\" <route src=\\"host-\\"+str(index1)+\\".hawaii.edu\\" dst=\\"host-\\"+str(index2)+\\".hawaii.edu\\">n\\" def issueRouteTail(): return \\" </route>n\\" def issueRouteLink1(x): return \\"t<link_ctn id=\\"link-\\"+str(x)+\\"\\"/>n\\" def issueRouteLink2(x,y): return \\"t<link_ctn id=\\"link-\\"+str(x)+\\"-\\"+str(y)+\\"\\"/>n\\" # Parse command-line arguments if (len(sys.argv) != 2): print >> sys.stderr, \\"Usage:a\\"+sys.argv[0]+\\" <num hosts>n\\" print >> sys.stderr, \\" Will generate a bintree_<num hosts>.xml and hostfile_<num hosts>.txt filen\\" exit(1) num_hosts = int(sys.argv[1]) # # Generate Binary Tree XML file filename = \\"./bintree_\\"+str(num_hosts)+\\".xml\\" fh = open(filename, 'w') fh.write(issueHead()) # Create all hosts and links for i in range(0,num_hosts): fh.write(issueHost(i)) if (i*2+1 < num_hosts): fh.write(issueLink2(i,i*2+1)) if (i*2+2 < num_hosts): fh.write(issueLink2(i,i*2+2)) # Create all routes for i in range(0,num_hosts): level_i = floor(math.log(1+i,2)) for j in range(i+1,num_hosts): fh.write(issueRouteHead(j,i)) # Host j is at the same of lower level than host i level_j = floor(math.log(1+j,2)) current_host_path_j = j # Go up to the same level of that of host i for l in range(level_j,level_i,-1): parent_host = floor(float(current_host_path_j-1)/2) fh.write(issueRouteLink2(min(current_host_path_j,parent_host),max(current_host_path_j,parent_host))) current_host_path_j = parent_host # Find the common ancestor current_host_path_i = i while (current_host_path_j != current_host_path_i): fh.write(issueRouteLink2(min(current_host_path_j,floor(float(current_host_path_j-1)/2)), max(current_host_path_j,floor(float(current_host_path_j-1)/2)))) current_host_path_i = floor(float(current_host_path_i-1)/2) current_host_path_j = floor(float(current_host_path_j-1)/2) common_ancestor = current_host_path_j # Go back from i to the common ancestor current_host_path_i = i sequence = [] sequence.append(current_host_path_i) while (current_host_path_i != common_ancestor): parent_host = floor(float(current_host_path_i-1)/2) sequence.append(parent_host) current_host_path_i = parent_host # Issue links in the common ancestor -> i order sequence = sequence[::-1] for k in range(0,len(sequence)-1): fh.write(issueRouteLink2(min(sequence[k],sequence[k+1]),max(sequence[k],sequence[k+1]))) fh.write(issueRouteTail()) fh.write(issueTail()) fh.close() print >> sys.stderr, \\"BinTree XML platform description file created: \\"+filename # Generate host file filename = \\"./hostfile_\\"+str(num_hosts)+\\".txt\\" fh = open(filename, 'w') for i in range(0,num_hosts): fh.write(\\"host-\\"+str(i)+\\".hawaii.edun\\") fh.close() print >> sys.stderr, \\"Hostfile created: \\"+filename"},{"prompt":"Create a Python script to find the Fibonacci series which is a sequence of numbers where every number is the addition of the previous two numbers. n = 10","completion":"def fibonacci(n): if n == 0: return 0 if n == 1 or n == 2: return 1 fib_n_2 = 1 fib_n_1 = 1 fib_n = 0 for i in range(3, n + 1): fib_n = fib_n_1 + fib_n_2 fib_n_2 = fib_n_1 fib_n_1 = fib_n return fib_n print(fibonacci(n))"},{"prompt":"Edit the following Python program to print out the keyvalue pair of a dictionary. d = {'Name': 'John', 'Age': 30, 'City': 'New York'}","completion":"d = {'Name': 'John', 'Age': 30, 'City': 'New York'} for key, value in d.items(): print(f'{key}: {value}')"},{"prompt":"Given a list of integers, write a program in Python to determine which is the maximum number. [19,7,32,1,8,27]","completion":"# take a list list = [19,7,32,1,8,27] # initializinf max_val to INT_MIN so that # any int number would be greater that it max_val = float(\\"-inf\\") # traversing through the list for item in list: if item > max_val: max_val = item # printing the maximum value print(\\"The maximum value of the list is:\\", max_val)"},{"prompt":"Develop a Python program that calculates the average hours of sunlight in a given city during a month. Assume the city name and month are provided as user input. City Name: Tokyo Month: February","completion":"# Get user input city = input(\\"City Name: \\") month = input(\\"Month: \\") # Calculate the average hours of sunlight in a given city during a month def average_sunlight(city, month): # Your code goes here ... # Print the result print(average_sunlight(city, month))"},{"prompt":"Optimize the following Python program to run faster. def remove_duplicates(lst): s = set() for item in lst: if item in s: pass else: s.add(item) return s lst = [1, 2, 4, 2, 5, 6, 3, 3] new_list = remove_duplicates(lst) print(new_list)","completion":"def remove_duplicates(lst): return list(set(lst)) lst = [1, 2, 4, 2, 5, 6, 3, 3] new_list = remove_duplicates(lst) print(new_list)"},{"prompt":"Write a python program to detect the size of two overlapping rectangles. Rectangle A with 4 corners: (2, 6), (4, 6), (4, 2), (2, 2); Rectangle B with 4 corners: (3, 5), (6, 5), (6, 3), (3, 3)","completion":"rectA_min = (2, 6) rectA_max = (4, 2) rectB_min = (3, 5) rectB_max = (6, 3) def check_overlap(rectA, rectB): overlap_x = min(rectA_max[0], rectB_max[0]) - max(rectA_min[0], rectB_min[0]) overlap_y = min(rectA_max[1], rectB_max[1]) - max(rectA_min[1], rectB_min[1]) if overlap_x>0 and overlap_y>0: overlap_area = overlap_x * overlap_y return overlap_area else: return 0"},{"prompt":"Create a Python program to consume an API and print the data it receives. Not applicable","completion":"import requests url = 'https://jsonplaceholder.typicode.com/posts' response = requests.get(url) if response.status_code == 200: posts = response.json() for post in posts: print(post['title'])"},{"prompt":"Given a url, write a Python program to count the total number of words in all webpages associated with that url. https://www.example.com","completion":"import urllib.request from bs4 import BeautifulSoup url = 'https://www.example.com' html = urllib.request.urlopen(url).read() soup = BeautifulSoup(html, 'html.parser') total_words = 0 for link in soup.find_all('a'): new_url = link.get('href') new_html = urllib.request.urlopen(url + new_url).read() soup2 = BeautifulSoup(new_html, 'html.parser') words = soup2.get_text().split(' ') total_words += len(words) print(total_words)"},{"prompt":"Generate a Python script that can classify emails based on their content","completion":"import re def classify_email(subject, body): # Check the subject line for keywords flags = check_subject(subject) # Check the body for keywords if not flags: flags = check_body(body) # return flags return flags def check_subject(subject): flags = [] # Check for spam spam_keywords = ['***SPAM***', '***ADV***'] for keyword in spam_keywords: if re.search(keyword, subject): flags.append('SPAM') break # Check for purchases purchase_keywords = ['order', 'purchase', 'shipping', 'payment'] for keyword in purchase_keywords: if re.search(keyword, subject): flags.append('PURCHASE') break return flags def check_body(body): flags = [] # Check for offensive language offensive_words = ['crap', 'stupid', 'idiot', 'shut up'] for word in offensive_words: if re.search(word, body): flags.append('OFFENSIVE') break # Check for marketing content marketing_keywords = ['buy now', 'limited time', 'special offer', 'free'] for keyword in marketing_keywords: if re.search(keyword, body): flags.append('MARKETING') break return flags"},{"prompt":"Create a Python function which takes a list of positive integers as its argument and returns the sum of the largest and the second largest number in the list. [123, 534, 745, 321, 876]","completion":"def get_sum(nums): assert all(n >= 0 for n in nums), \\"list items must all be positive!\\" # return the sum of the two largest numbers max_num = max(nums) nums.remove(max_num) second_max_num = max(nums) return max_num + second_max_num # test my_list = [123, 534, 745, 321, 876] print(get_sum(my_list)) # will print out 1671"},{"prompt":"Add code to a Python program that will print a multiplication table of numbers from 1 to 5.","completion":"for i in range(1,6): for j in range(1,6): print(i*j,end=\\"t\\") print(\\"n\\") # Output: 1 2 3 4 5 2 4 6 8 10 3 6 9 12 15 4 8 12 16 20 5 10 15 20 25"},{"prompt":"Create a Python function called print_name that will print out the given name.","completion":"def print_name(name): print(name)"},{"prompt":"Write a python script which takes two numbers and returns the sum of the two numbers.","completion":"def addNums(num1, num2): return num1+num2"},{"prompt":"Write a python program that sorts a list of numbers in descending order. list_numbers = [8, 4, 6, 10, 3]","completion":"list_numbers = [8, 4, 6, 10, 3] list_numbers.sort(reverse=True) print(list_numbers) # Output: [10, 8, 6, 4, 3]"},{"prompt":"Create a Python function that takes two inputs, a list of integers and an integer n,and returns a new list of all the integers in the first list that are larger than n. The list: [3,4,5,6,7], n=5","completion":"def greater_than_n(nums, n): return [num for num in nums if num > n] greater_than_n([3,4,5,6,7], 5) # Returns [6,7]"},{"prompt":"Write a Python code to sort a dictionary based on the values.","completion":"def sort_dict_by_value(in_dict): \\"\\"\\" Function to sort a dictionary by it's values \\"\\"\\" return {k: v for k, v in sorted(in_dict.items(), key=lambda item: item[1])}"},{"prompt":"Design a system architecture using microservices that performs sentiment analysis on tweets. Not applicable","completion":"The system architecture will use two microservices, one service for fetching the tweet and another for performing sentiment analysis on each tweet. The first service will periodically fetch tweets from Twitter using the Twitter API and store them in a database. The second service will then read from the database and analyze the tweets using Natural Language Processing (NLP) techniques to determine the sentiment of each tweet. Finally, a web UI service will be used to display the results of the sentiment analysis. The system architecture could use any language for the microservices, but Python is recommended due to its ease of use for NLP tasks. Additionally, for the database, a NoSQL database like MongoDB is recommended due to its scalability and flexibility."},{"prompt":"Write a Python function to convert a given number into its corresponding Roman numeral. 99","completion":"def convert_to_roman(num): int_nums = [1000, 500, 100, 50, 10, 5, 1] roman_nums = ['M', 'D', 'C', 'L', 'X', 'V', 'I'] roman_value = '' i = 0 while num > 0: for _ in range(num // int_nums[i]): roman_value += roman_nums[i] num -= int_nums[i] i += 1 return roman_value print(convert_to_roman(99)) # Output: 'XCIX'"},{"prompt":"Translate the following code written in Python to Java. x = Hello World","completion":"String x = \\"Hello World\\";"},{"prompt":"Using a neural network model, design a Python script to classify flower species.","completion":"import numpy as np import pandas as pd from sklearn.preprocessing import StandardScaler from sklearn.neural_network import MLPClassifier # Read in the data data = pd.read_csv('flowers.csv') X = data.iloc[:, :-1].values y = data.iloc[:, -1].values # Scale the data scaler = StandardScaler() X = scaler.fit_transform(X) # Train the neural network clf = MLPClassifier(hidden_layer_sizes=(20, 20), max_iter=1000) clf.fit(X, y) # Test the model preds = clf.predict(X) # Evaluate the model accuracy = np.mean(preds == y) print('Model accuracy: {:.2f}%'.format(accuracy*100))"},{"prompt":"Write a Python script to determine whether a given number is even or odd without using modulo operator.","completion":"def isOdd(number): if number % 2 == 0: return False else: return True"},{"prompt":"Write a python program to generate a random letter of the alphabet.","completion":"import random # create a list of all the letters in the alphabet alphabet = [\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\", \\"f\\", \\"g\\", \\"h\\", \\"i\\", \\"j\\", \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", \\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\", \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\", \\"z\\"] # generate a random letter random_letter = random.choice(alphabet) print(random_letter)"},{"prompt":"Write a Python program to round a number to a given number of decimal places. number = 2.68 round_places = 2","completion":"number_rounded = round(number, round_places) print(number_rounded) # Output: 2.68"},{"prompt":"Design an algorithm in Python that can read a list and return the most frequent item. [1,2,3,4,4,4,5,5]","completion":"def most_frequent(list): return max(list, key=list.count) list = [1,2,3,4,4,4,5,5] print(most_frequent(list))"},{"prompt":"Write a Python program to check if it contains the specified substring. my_string = Hello World","completion":"my_string = \\"Hello World\\" if \\"World\\" in my_string: print(\\"Yes, the specified substring is found.\\") else: print(\\"No, the substring is not found.\\")"},{"prompt":"Generate a python function that takes a list of strings and returns the longest one. words = ['hello', 'world', 'this', 'is', 'a', 'test']","completion":"def longest_string(words): longest = 0 result = '' for w in words: if len(w) > longest: longest = len(w) result = w return result"},{"prompt":"Create a python program that does the following functions: given an array, remove any odd numbers and then find the sum of the remaining even numbers [1, 2, 3, 4, 5, 6, 7]","completion":"def remove_odd_numbers(input_list): new_list = [x for x in input_list if x % 2 == 0] return new_list def find_sum_of_even_numbers(input_list): new_list = remove_odd_numbers(input_list) sum = 0 for number in new_list: sum += number return sum input_list = [1, 2, 3, 4, 5, 6, 7] print('Sum of even numbers:', find_sum_of_even_numbers(input_list))"},{"prompt":"Design a program in Python that merges two sorted lists into a single sorted list. list1 = [1, 3, 5] list2 = [2, 4, 6]","completion":"def merge_lists(list1, list2): merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 merged_list.extend(list1[i:]) merged_list.extend(list2[j:]) return merged_list"},{"prompt":"Create an AI chatbot using the Rasa NLU library in Python for helping customers with their queries. A dataset of 2000 customer queries about product information.","completion":"import rasa from rasa.nlu.training_data import load_data from rasa.nlu.model import Trainer # Load data data = load_data('queries_data.json') # Create a trainer and train the model trainer = Trainer(rasa.nlu.config.load(\\"config.yml\\")) interpreter = trainer.train(data) # Use the model to predict customer queries predictions = interpreter.parse('I need a product with high durability') # Print the prediction results print(predictions)"},{"prompt":"Generate a Python program that prints out the multiplication table of 9.","completion":"for i in range(1,11): print(9, \\"x\\", i, \\"=\\", 9*i)"},{"prompt":"Create a Django application to manage a blog.","completion":"# Creating a virtual environment python -m venv env source env/bin/activate pip install Django # Create a Django project django-admin startproject Blog # Create an app cd Blog python manage.py startapp blog_app # Install dependencies # Install crispy_forms to use for styling forms pip install django-crispy-forms # Adding applications to the settings.py # Add the blog_app to the installed applications INSTALLED_APPS = [ # django dependencies 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', # third-party dependencies 'crispy_forms', # project applications 'blog_app', ] # Add template settings to the settings.py # Include the templates directory in the settings TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] # Register models and create the URL path # Create views to handle requests # Add templates for posts and pages # Configure your Django admin interface # Configure static and media files # Start the server to see the blog"},{"prompt":"Design a Python program for comparing two strings and printing Equal if the strings are equal, or Not Equal if the strings are not equal. string1 = hello string2 = world","completion":"if string1 == string2: print(\\"Equal\\") else: print(\\"Not Equal\\")"},{"prompt":"Optimize the following code to improve its runtime: \`\`\`Python for x in range(10): sum = 0 for y in range(10): sum += y print sum \`\`\` Not applicable","completion":"sum = 0 for y in range(10): sum += y print sum for x in range(10): print sum"},{"prompt":"Create a python program to find the sum of all nonnegative integers less than a given number.","completion":"def sum_non_negative_integers(n): total = 0 for i in range(n): if i > 0: total += i return total"},{"prompt":"Design a data structure in Python to store employee information (name, age, salary, etc.). Not applicable","completion":"class Employee: def __init__(self, name, age, salary): self.name = name self.age = age self.salary = salary employeeA = Employee('John Doe', 35, 5000) employeeB = Employee('Jane Smith', 28, 6000)"},{"prompt":"Develop a ML algorithm in Python to classify emails into spam and nonspam categories.","completion":"# Importing the libraries import numpy as np import re import nltk import matplotlib.pyplot as plt import pandas as pd # Importing the dataset dataset = pd.read_csv('spam.csv', encoding = \\"latin-1\\") dataset = dataset.drop(['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], 1) # Cleaning the texts import re import nltk nltk.download('stopwords') from nltk.corpus import stopwords from nltk.stem.porter import PorterStemmer # Create corpus corpus = [] for i in range(0, 5572): review = dataset['v2'][i] review = re.sub(r'W', ' ', review) review = re.sub(r'[^a-zA-Z]', ' ', review) review = review.lower() review = review.split() stemmer = PorterStemmer() review = [stemmer.stem(word) for word in review if not word in set(stopwords.words('english'))] review = ' '.join(review) corpus.append(review) # Creating the bag of words model from sklearn.feature_extraction.text import CountVectorizer cv = CountVectorizer(max_features = 2600) X = cv.fit_transform(corpus).toarray() # Output Variable y = dataset.iloc[:, 0].values # Split the dataset from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0) # Training the classifier from sklearn.naive_bayes import MultinomialNB classifier = MultinomialNB() classifier.fit(X_train, y_train) # Prediction y_pred = classifier.predict(X_test) # Confusion Matrix from sklearn.metrics import confusion_matrix cm = confusion_matrix(y_test, y_pred) print(cm)"},{"prompt":"Create a python script that takes the given string and formats the text with the correct indentation levels. String: This is a string with different lines.","completion":"def format_text(string): \\"\\"\\"Format the given string with the correct indentation levels.\\"\\"\\" lines = string.splitlines() level = 0 formated = \\"\\" for line in lines: if line.isspace(): continue formated += \\" \\" * level + line + \\"n\\" if line.endswith(\\":\\"): level += 1 elif line.startswith(\\"return\\") or line.startswith(\\"break\\"): level -= 1 return formated # Usage Example string = \\"\\"\\"This is a string with different lines.\\"\\"\\" formated = format_text(string) print(formated) # This is # a string # with different lines."},{"prompt":"Write an efficient algorithm in Python to find the second smallest number in an array. [9, 7, 4, 8, 2]","completion":"def find_second_smallest(arr): smallest = arr[0] second_smallest = None for i in range(1, len(arr)): if arr[i] < smallest: second_smallest = smallest smallest = arr[i] return second_smallest arr = [9, 7, 4, 8, 2] second_smallest = find_second_smallest(arr) print(\\"Second smallest number is:\\", second_smallest) # Output is 7"},{"prompt":"Create an API in Python using the Flask framework that can create, read, update, and delete items in a database. Not applicable","completion":"from flask import Flask, jsonify, request app = Flask(__name__) @app.route('/items', methods=['GET', 'POST']) def items(): if request.method == 'GET': # Return all items # ... elif request.method == 'POST': # Create a new item # ... @app.route('/items/<id>', methods=['GET', 'PUT', 'DELETE']) def item(id): if request.method == 'GET': # Return item with given id # ... elif request.method == 'PUT': # Update item with given id # ... elif request.method == 'DELETE': # Delete item with given id # ... if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Develop a function in Python which reverses any given string.","completion":"def reverseString(str): return str[::-1]"},{"prompt":"Create a deep learning program in Python that classifies animals into seven categories. [ { image: dog.jpg, label: dog }, { image: cat.jpg, label: cat }, { image: horse.jpg, label: horse }, { image: bird.jpg, label: bird }, { image: fish.jpg, label: fish }, { image: snake.jpg, label: snake }, { image: deer.jpg, label: deer }, { image: mouse.jpg, label: mouse } ]","completion":"import numpy as np import matplotlib.pyplot as plt import keras from keras.models import Sequential from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D from keras.preprocessing.image import ImageDataGenerator from keras.callbacks import ModelCheckpoint # Specify image dimensions img_width, img_height = 150, 150 # # Create the model model = Sequential() model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(img_width, img_height, 3))) model.add(MaxPooling2D(pool_size=(2,2))) model.add(Conv2D(64, kernel_size=(3, 3))) model.add(MaxPooling2D(pool_size=(2,2))) model.add(Flatten()) model.add(Dense(128, activation='relu')) model.add(Dense(7, activation='softmax')) # Compile the model model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(), metrics=['accuracy']) # Prepare the data train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True) test_datagen = ImageDataGenerator(rescale=1./255) train_generator = train_datagen.flow_from_directory('train', target_size=(img_width, img_height), batch_size=16, class_mode='categorical') validation_generator = test_datagen.flow_from_directory('test',target_size=(img_width, img_height), batch_size=16,class_mode='categorical') # Train the model checkpoint = ModelCheckpoint(filepath='best-model.h5',save_best_only=True,verbose=1) model.fit_generator(train_generator,steps_per_epoch=2000//16,epochs=50,validation_data=validation_generator,validation_steps=1000//16,callbacks=[checkpoint]) # Evaluate the model scores = model.evaluate_generator(validation_generator, steps=1000//16) print(\\"Accuracy = \\", scores[1]) # Make predictions y_pred = model.predict_generator(validation_generator, steps=1000//16) # Print predictions for i in range(len(y_pred)): print(\\"Prediction: \\", np.argmax(y_pred[i]), \\"Actual: \\", validation_generator.labels[i]) print(\\"Done!\\")"},{"prompt":"Generate a Python code to implement the classic Tower of Hanoi problem.","completion":"def tower_of_hanoi(n, from_rod, to_rod, aux_rod): if n == 1: print(\\"Move disk 1 from rod\\",from_rod,\\"to rod\\",to_rod) return tower_of_hanoi(n-1, from_rod, aux_rod, to_rod) print(\\"Move disk\\",n,\\"from rod\\",from_rod,\\"to rod\\",to_rod) tower_of_hanoi(n-1, aux_rod, to_rod, from_rod)"},{"prompt":"Design a Python program to find the sum of the two largest numbers in a list. [1, 3, 5, 7, 9]","completion":"def find_sum_of_largest(lst): lst.sort() return lst[-1] + lst[-2] print(find_sum_of_largest([1, 3, 5, 7, 9]))"},{"prompt":"Write an Python script to extract the year, month and day from a given date in the format dd/mm/yyyy. 27/09/2017","completion":"import datetime date_string = \\"27/09/2017\\" date_object = datetime.datetime.strptime(date_string, \\"%d/%m/%Y\\") print(\\"Year:\\", date_object.year) print(\\"Month:\\", date_object.month) print(\\"Day:\\", date_object.day)"},{"prompt":"Create a Python function that returns a nested dictionary given a list of keys and their corresponding values. keys = [key_1, key_2, key_3] values = [1, 2, 3]","completion":"def create_nested_dict(keys, values): my_dict = {} for i in range(len(keys)): my_dict[keys[i]] = values[i] return my_dict"},{"prompt":"Create a basic REST API in Python using FlaskRESTplus that takes a user_id parameter and returns a list of the user's recent posts. user_id: 123","completion":"from flask import Flask from flask_restplus import Api, Resource app = Flask(__name__) # create a Flask app api = Api(app) # initialize Flask-RESTplus # This is a dummy list of user posts. # In a real application these would # be pulled from a database. posts = [ {'user_id': 123, 'title': 'My post 1', 'content': 'Lorem ipsum dolor sit amet...'}, {'user_id': 123, 'title': 'My post 2', 'content': 'Lorem ipsum dolor sit amet...'}, {'user_id': 123, 'title': 'My post 3', 'content': 'Lorem ipsum dolor sit amet...'}, ] @api.route('/posts') class Posts(Resource): def get(self): user_id = request.args.get('user_id') posts = [post for post in posts if post['user_id'] == user_id] return posts if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python Flask application with a function for encrypting and decrypting data using AES encryption. Not applicable","completion":"from cryptography.fernet import Fernet import base64 def encrypt(message): key = Fernet.generate_key() cipher_suite = Fernet(key) cipher_text = cipher_suite.encrypt(message) cipher_text_string = str(cipher_text, 'utf-8') encoded_text = base64.b64encode(key) return cipher_text_string, encoded_text def decrypt(cipher_text_string, encoded_text): key = base64.b64decode(encoded_text) cipher_suite = Fernet(key) plain_text = cipher_suite.decrypt(cipher_text_string) return plain_text"},{"prompt":"Generate a Python program to read an integer from the user and display a rightangled triangle with the given integer as the base. Not applicable","completion":"num = int(input(\\"Enter a number: \\")) for i in range(1, num + 1): for j in range(1, i + 1): print(\\"*\\", end=\\" \\") print(\\"r\\")"},{"prompt":"Create a REST API endpoint using Python and MySQL that allows users to update data in a database. Not applicable","completion":"import mysql.connector from flask import Flask, request app = Flask(__name__) db = mysql.connector.connect( host='localhost', user='user', database='database', ) cursor = db.cursor() @app.route('/user/<int:user_id>', methods=['PUT']) def update_user(user_id): user = request.get_json() try: cursor.execute( 'UPDATE users SET name = %s, email = %s WHERE id = %s', (user['name'], user['email'], user_id) ) db.commit() return {'message': 'User updated'} except mysql.connector.Error as err: db.rollback() return {'error': err.msg}, 500 if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Define a function in Python to determine the most common word in a given string.","completion":"def most_common_word(string): # convert string to lower case string = string.lower() # split the string into words words = string.split() # create a dictionary to store words and their frequency word_freq_dict = {} # iterate through each word in words list for word in words: if word not in word_freq_dict: word_freq_dict[word] = 0 word_freq_dict[word] += 1 # sort the dictionary in descending order of frequency sorted_dict = sorted(word_freq_dict.items(), key=lambda kv: kv[1], reverse=True) # return the most frequent word return sorted_dict[0][0]"},{"prompt":"Create a Python program that takes a two dimensional array as an argument and returns the transpose of the matrix. [[1,2,3], [4,5,6], [7,8,9]]","completion":"def matrix_transpose(matrix): num_of_rows = len(matrix) num_of_cols = len(matrix[0]) transposed_matrix = [[0 for _ in range(num_of_rows)] for _ in range(num_of_cols)] for i in range(len(matrix)): for j in range(len(matrix[i])): transposed_matrix[j][i] = matrix[i][j] return transposed_matrix matrix = [[1,2,3], [4,5,6], [7,8,9]] transpose = matrix_transpose(matrix) print(transpose)"},{"prompt":"Create a Python Flask application for a simple search engine. The application should be able to return results based on a query string entered by the user. Not applicable","completion":"import flask from flask import sqlite3 app = flask.Flask(__name__) # create the database conn = sqlite3.connect('data.db') cur = conn.cursor() # create the table for your data cur.execute('''CREATE TABLE IF NOT EXISTS search (query TEXT, results TEXT)''') @app.route('/search', methods = ['GET', 'POST']) def search(): if flask.request.method == 'POST': # get the search term from the form query = flask.request.form['query'] # search the database for the query cur.execute('''SELECT results FROM search WHERE query=?''', (query,)) results = cur.fetchall() # return the results return flask.render_template('results.html', query = query, results = results) # the search form @app.route('/') def index(): return flask.render_template('search.html') if __name__ == '__main__': app.run(debug = True)"},{"prompt":"Suppose you are given a list of strings in Python. Write a function that takes the list of strings as input and prints out the first string that is longer than 10 characters. [cat, doggo, elephant, giraffe]","completion":"def find_long_string(string_list): for string in string_list: if len(string) > 10: print(string) break string_list = [\\"cat\\", \\"doggo\\", \\"elephant\\", \\"giraffe\\"] find_long_string(string_list)"},{"prompt":"Create a HTTP GET request in Python to retreive an API request.","completion":"import requests url = \\"https://example.com\\" # Send Get request to the API response = requests.get(url) # Store the response text response_text = response.text"},{"prompt":"Find the closest pair of points from a list of points in Python? points = [(1,1), (3,3), (2, 4), (3, 2), (2, 4)]","completion":"def closest_pair(points): min_distance = float('inf') n = len(points) for i in range(n-1): for j in range(i+1, n): distance = ((points[i][0] - points[j][0])**2 + (points[i][1] - points[j][1])**2)**0.5 if distance < min_distance: min_distance = distance min_pair = (points[i], points[j]) return min_distance, min_pair points = [(1,1), (3,3), (-2, 4), (-3, -2), (2, 4)] print(closest_pair(points))"},{"prompt":"Construct a Python program that takes in two numbers from the user and swap them.","completion":"def swap(x, y): x, y = y, x return x, y x = int(input(\\"Enter x: \\")) y = int(input(\\"Enter y: \\")) x, y = swap(x, y) print(\\"x:\\", x, \\"y:\\", y) #output: x: 4 y: 8"},{"prompt":"Write a Python program to extract the text from the webpage.","completion":"import requests def extract_text(url): page = requests.get(url) return page.content"},{"prompt":"Design an algorithm in Python to find the second smallest number in an array. [45, 25, 12, 34, 36]","completion":"def second_smallest_num(arr): min1 = min(arr) arr.remove(min1) min2 = min(arr) return min2 arr = [45, 25, 12, 34, 36] res = second_smallest_num(arr) print(res)"},{"prompt":"Write a python program to print the current date in ISO format","completion":"import datetime date_iso = datetime.datetime.now().isoformat() print(date_iso)"},{"prompt":"Create a program in python to find the closest pair of points in a given array of points. arr = [(2, 4), (0, 0), (1, 1), (2,2), (3, 3), (2,2), (4,4)]","completion":"import math def closestPair(arr, n): min_dist = math.inf for i in range(n): for j in range(i+1,n): dist = ((arr[i][0] - arr[j][0]) * (arr[i][0] - arr[j][0]) + (arr[i][1] - arr[j][1]) * (arr[i][1] - arr[j][1])) if (dist < min_dist): min_dist = dist return min_dist arr = [(-2, -4), (0, 0), (-1, 1), (2,2), (3, 3), (-2,2), (4,4)] n = len(arr) min_dist = closestPair(arr, n) print(\\"The shortest distance is\\", min_dist)"},{"prompt":"w would you add a new element to the beginning of a linked list in Python?","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node"},{"prompt":"Write a python class that implements a linked list data structure.","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def insert(self, data): node = Node(data) if not self.head: self.head = node else: tmp = self.head while tmp.next: tmp = tmp.next tmp.next = node"},{"prompt":"Design a class in Python 3 called Animal which will contain the following methods:","completion":"class Animal: def __init__(self, name): self.name = name def move(self): print(f\\"{self.name} is moving\\") def eat(self): print(f\\"{self.name} is eating\\") def sleep(self): print(f\\"{self.name} is sleeping\\")"},{"prompt":"Write a python script to print the nth Fibonacci number. 6","completion":"\\"\\"\\" Python script to print the nth Fibonacci number \\"\\"\\" def fibonacci(num): a, b = 0, 1 for _ in range(num): a, b = b, a+b return a num = int(input(\\"Enter a number: \\")) print(\\"The Fibonacci number at position {0} is {1}\\".format(num, fibonacci(num)))"},{"prompt":"Create a Python function that takes two lists, compare them, and return True if both lists are identical and False if they differ. list1 = [1, 2, 3] list2 = [1, 2, 3]","completion":"def compare_lists(list1, list2): if len(list1) != len(list2): return False for i in range(len(list1)): if list1[i] != list2[i]: return False return True"},{"prompt":"Construct a decision tree classifier in Python with dummy values.","completion":"class DecisionTreeClassifier: def __init__(self): self.tree = None def fit(self, X, y): # Create empty Decision Tree self.tree = {'feats': [], 'thresholds': [], 'left': None, 'right': None} # Find the best feature to split data bestFeature, bestThreshold = self.findBestSplit(X, y) # Split data into two subsets leftMask = X[:, bestFeature] < bestThreshold rightMask = ~leftMask # Add the feature and threshold to the tree self.tree['feats'].append(bestFeature) self.tree['thresholds'].append(bestThreshold) # Split data into subsets XLeft, yLeft = X[leftMask], y[leftMask] XRight, yRight = X[rightMask], y[rightMask] # Recursively build decision tree self.tree['left'] = self.fit(XLeft, yLeft) self.tree['right'] = self.fit(XRight, yRight) return self.tree def predict(self, X): pass"},{"prompt":"Design a Simple Calculator class in Python that contains methods for addition, subtraction, multiplication and division.","completion":"class Calculator: def __init__(self): # initialization code def add(self, x, y): return x + y def subtract(self, x, y): return x - y def multiply(self, x, y): return x * y def divide(self, x, y): return x / y"},{"prompt":"Create a SQLite database in Python, with one table containing the fields name, country and population. Not applicable","completion":"import sqlite3 # create a connection to the database conn = sqlite3.connect(\\"example.db\\") # create the database c = conn.cursor() c.execute(\\"create table countries (name text, country text, population int)\\") # commit changes conn.commit() # close the connection conn.close()"},{"prompt":"Create a program to generate a 3D cube using Python. Not applicable","completion":"import numpy as np import matplotlib.pyplot as plt from mpl_toolkits.mplot3d import Axes3D # Define cube a = np.array([[0, 0, 0], [1, 0, 0], [1, 1, 0], [0, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1]]) # Set up graph fig = plt.figure(figsize=(5,5)) ax = fig.add_subplot(111, projection='3d') ax.set_xlim(-1, 2) ax.set_ylim(-1, 2) ax.set_zlim(-1, 2) # Plot cube ax.scatter(a[:, 0], a[:, 1], a[:, 2]) # Connect the dots for i in range(4): ax.plot([a[i, 0], a[i+4, 0]], [a[i, 1], a[i+4, 1]], [a[i, 2], a[i+4, 2]]) for i in range(4): ax.plot([a[i, 0], a[(i+1)%4, 0]], [a[i, 1], a[(i+1)%4, 1]], [a[i, 2], a[(i+1)%4, 2]]) ax.plot([a[4, 0], a[7, 0]], [a[4, 1], a[7, 1]], [a[4, 2], a[7, 2]]) ax.plot([a[5, 0], a[6, 0]], [a[5, 1], a[6, 1]], [a[5, 2], a[6, 2]]) # Show plot plt.show()"},{"prompt":"Generate a Python program to calculate the sum of all numbers in a list and print it out. [1, 2, 3, 4, 5]","completion":"def sum_list(l): result = 0 for num in l: result += num return result list = [1, 2, 3, 4, 5] print(sum_list(list))"},{"prompt":"Write a Python program to filter a list of strings and return only the elements that contain alphanumeric characters. ['hello', 'world', '1234', '56jklm']","completion":"def filter_alphanumeric(strings_list): filtered_list = [] for string in strings_list: if any(char.isalnum() for char in string): filtered_list.append(string) return filtered_list strings_list = ['hello', 'world', '1234', '56jklm'] filtered_list = filter_alphanumeric(strings_list) print(filtered_list)"},{"prompt":"Generate a Python program to find the frequency of an element in a list. lst = [1, 2, 3, 4, 1, 2, 1]","completion":"def find_frequency(lst, element): return lst.count(element) lst = [1, 2, 3, 4, 1, 2, 1] print(find_frequency(lst, 1))"},{"prompt":"Create a function in Python to determine if a number is divisible by another number. 6, 3","completion":"def isDivisible(num1, num2): # check if num1 is divisible by num2 if (num1 % num2) == 0: return True else: return False num1 = 6 num2 = 3 result = isDivisible(num1, num2) print(result)"},{"prompt":"Write a python program to make all the characters of a string into lowercase.","completion":"def convert_to_lowercase(string): lowercase_string = \\"\\" for char in string: lowercase_string += char.lower() return lowercase_string"},{"prompt":"Write a Python class that has a method that encrypts a given string using Caesarâs Cypher. Key = 3 String = âHello Worldâ","completion":"class Encrypter: def ceaserCypherEncryptor(self, key, string): encStr = \\"\\" for ch in string: encStr += chr(ord(ch)+key) return encStr e = Encrypter() encStr = e.ceaserCypherEncryptor(3, \\"Hello World\\") print(encStr) # Output Khoor#Zruog"},{"prompt":"Write a Python program to find the maximum sum of any continous subarray. [1, 2, 3, 4, 5]","completion":"def maxSubarrySum(arr): cur_max = 0 global_max = 0 for i in arr: cur_max = max(cur_max + i, 0) global_max = max(global_max, cur_max) return global_max # test arr = [1, -2, 3, 4, -5] print(maxSubarrySum(arr)) # output: 7"},{"prompt":"Write a Python program that processes a given list and returns a new list with all its duplicate elements removed. a = [1, 1, 2, 3, 3, 5]","completion":"def remove_duplicates(a): new_list = [] for i in a: if i not in new_list: new_list.append(i) return new_list a = [1, 1, 2, 3, 3, 5] b = remove_duplicates(a) print(b) # Output: [1, 2, 3, 5]"},{"prompt":"Generate random passwords using Python.","completion":"import string import random def generate_pass(size = 8, chars=string.ascii_letters + string.digits + string.punctuation): ''' Generates a random password with given size and given characters ''' return ''.join(random.choice(chars) for _ in range(size)) # Driver code print(generate_pass())"},{"prompt":"Design a Python program to implement a search engine that searches for a specific keyword in a given set of text documents. [text documents, keyword]","completion":"def search_engine(documents, keyword): # Create an index of the documents index = create_index(documents) # Search the index for the keyword search_result = search(index, keyword) # Return the search result return search_result"},{"prompt":"Write a function in Python to sort a given list according to the second element in the sublist list = [['B', 'b'], ['A', 'a'], ['C', 'c']]","completion":"def sort_by_second_element(list): list.sort(key= lambda x : x[1]) return list list = [['B', 'b'], ['A', 'a'], ['C', 'c']] print(sort_by_second_element(list)) # [['A', 'a'], ['B', 'b'], ['C', 'c']]"},{"prompt":"Generate a code for running a for loop in Python.","completion":"for i in range(10): print(i)"},{"prompt":"Develop a Python function that takes in two lists and compares their elements List1 = [1, 5, 6, 4] List2 = [3, 7, 4, 2]","completion":"def compare_lists(list1, list2): if len(list1) != len(list2): return False for i in range(len(list1)): if list1[i] != list2[i]: return False return True"},{"prompt":"Create a Python program to remove punctuation from a block of text. Text: Wel,come to the wo,rld of 'programming'.","completion":"import string def remove_punctuation(text): return text.translate(str.maketrans(\\"\\",\\"\\", string.punctuation)) text = \\"Wel,come to the wo,rld of 'programming'.\\" print(remove_punctuation(text)) Output: Welcome to the world of programming"},{"prompt":"Generate Python code to get all unique items in a nested dictionary. dict1 = { key1: [1,2], key2: [2,3], key3: { key4: [3,4] } }","completion":"def get_all_keys(input_dict): keys = set() if isinstance(input_dict, dict): keys.update(input_dict.keys()) for v in input_dict.values(): keys.update(get_all_keys(v)) return keys dict1 = { \\"key1\\": [1,2], \\"key2\\": [2,3], \\"key3\\": { \\"key4\\": [3,4] } } unique_items = get_all_keys(dict1) print(unique_items)"},{"prompt":"Construct a URL routing program in Python using basic variables and lists.","completion":"# Define a list of routes routes = [ ('/', 'homepage'), ('/about', 'aboutpage'), ('/contact', 'contactpage') ] # Define a function to match the route and # get the name of the page def match_route(route): for url, page in routes: if url == route: return page # Test the function result = match_route('/') print(result)"},{"prompt":"Write a Python program to create a FuzzyWuzzy string matching for the given two strings. String 1: apple String 2: applee","completion":"from fuzzywuzzy import fuzz def fuzzy_match(str1, str2): return fuzz.ratio(str1, str2)"},{"prompt":"Python program to generate a tree like structure.","completion":"def generate_tree(h): # h is the height of the tree # Initialize the number of spaces per line n_spaces = h - 1 # Generate the tree structure for i in range(1, h+1): # Print h-i spaces at the beginning of each line for j in range(n_spaces): print(end=\\" \\") # Print i stars at the end of each line for j in range(i): print(\\"* \\", end=\\"\\") # Move to the next line (Print a newline character) print() # Update the number of spaces used n_spaces -= 1"},{"prompt":"Write a Python program to iterate through a list and return the index of the maximum of all the even numbers in the list. [1, 5, 8, 10, 3, 13, 21, 24]","completion":"def find_max_even_index(lst): max_even = None index = -1 for i, num in enumerate(lst): if num % 2 == 0 and (max_even is None or num > max_even): max_even = num index = i return index"},{"prompt":"Create a function in Python that takes an integer argument and returns True if the argument is an even number and False if it is an odd number.","completion":"def even_odd(n): if n % 2 == 0: return True else: return False"},{"prompt":"Can you write a Python program to print out the elements in a given list with their frequency? [1, 2, 3, 2, 4, 1, 1]","completion":"my_list = [1, 2, 3, 2, 4, 1, 1] frequency_dict = {} for num in my_list: if num in frequency_dict: frequency_dict[num] = frequency_dict[num] + 1 else: frequency_dict[num] = 1 for num, freq in frequency_dict.items(): print(\\"{} : {}\\".format(num, freq))"},{"prompt":"Edit the given Python program to optimize its code for better performance #Function to calculate the sum of the natural numbers def sumOfNaturals(n): sum = 0 for i in range(1, n+1): sum += i return sum","completion":"#Function to calculate the sum of the natural numbers def sumOfNaturals(n): #using Gauss formula if n % 2 == 0: sum = (n//2)*(n+1) else: sum = (n//2)*(n+1) + (n+1)//2 return sum"},{"prompt":"Suggest a completion for the following Python code that finds the median of a list of numbers. def median(nums): nums.sort()","completion":"def median(nums): nums.sort() if len(nums) % 2 == 0: left = len(nums) // 2 - 1 right = len(nums) // 2 return (nums[left] + nums[right]) / 2 else: middle = len(nums) // 2 return nums[middle]"},{"prompt":"Write a function in Python that takes two integers as arguments and returns the number of common divisors between the two. 350, 400","completion":"def countCommonDivisors(a,b): divisors = [] for i in range(1, min(a,b)+1): if (a % i == 0 and b % i == 0): divisors.append(i) return len(divisors) num1 = 350 num2 = 400 print (countCommonDivisors(num1, num2)) # Output: 5"},{"prompt":"Create a class in Python that manages a list of items.","completion":"class ItemList: def __init__(self): self.items = [] def add(self, item): self.items.append(item) def remove(self, item): self.items.remove(item) def print_all_items(self): for item in self.items: print(item)"},{"prompt":"Create a Python code to find the most frequent item in a list myList = [1, 2, 3, 2, 4, 2]","completion":"def most_frequent_item(myList): max_item = myList[0] max_count = 1 for i in range(1, len(myList)): count = 1 for j in range(i+1, len(myList)): if(myList[i] == myList[j]): count += 1 if(count > max_count): max_count = count max_item = myList[i] return (max_item) myList = [1, 2, 3, 2, 4, 2] print(most_frequent_item(myList))"},{"prompt":"Code a Python script to connect to a MySQL database and execute a query.","completion":"import mysql.connector # Connect to the database mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"yourusername\\", passwd=\\"yourpassword\\", database=\\"mydatabase\\" ) # Create a cursor mycursor = mydb.cursor() # Execute a query mycursor.execute(\\"SELECT * FROM customers\\") # Fetch all records records = mycursor.fetchall() # Print records for record in records: print(record)"},{"prompt":"Transform the following piece of code in C to Python. int a = 10; int b = 13; int c = a * b;","completion":"a = 10 b = 13 c = a * b"},{"prompt":"Write a python program to generate an original, random password of 8 characters which contains at least one lowercase letter, one uppercase letter, one digit and one special character.","completion":"import string import random def generate_password(length): characters = string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation password = ''.join(random.choice(characters) for _ in range(length)) if not any(char.isdigit() for char in password) or not any(char.islower() for char in password) or not any(char.isupper() for char in password) or not any(char in string.punctuation for char in password): return generate_password(length) else: return password"},{"prompt":"Build a blockchain network using Python that can record a user's name and age.","completion":"import hashlib import json # define a block in the blockchain class Block: def __init__(self, index, data, timestamp, prev_hash): self.index = index self.data = data self.timestamp = timestamp self.prev_hash = prev_hash self.hash = self.hash_it() # generates a SHA256 based on the contents of the block def hash_it(self): sha = hashlib.sha256() block_data = str(self.index) + str(self.data) + str(self.timestamp) + str(self.prev_hash) sha.update(block_data.encode()) return sha.hexdigest() # defines a blockchain class Blockchain: def __init__(self): self.chain = [] # adds a block to the blockchain def add_block(self, data): data = self.parse_data(data) index = len(self.chain) timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S') prev_hash = self.chain[-1].hash if self.chain else '0' self.chain.append(Block(index, data, timestamp, prev_hash)) # records a user's name and age in the block data def parse_data(self, data): user_data = { 'name': data['name'], 'age': data['age'] } return json.dumps(user_data)"},{"prompt":"Write a Python program to print the number of permutations of length n where each element can take a value between 0 and (n1). n = 4","completion":"def countPermutations(n): # if n is 0 or 1, return 1 as there is 1 permutation if n <= 1: return 1 # recursive calculation result = n * countPermutations(n - 1) return result countPermutations(4) # returns 24"},{"prompt":"mplement a function in Python to flatten an array of arbitrarily nested arrays of integers into a flat array of integers [[1,2,[3]],4]","completion":"def flatten_array(my_array): flattened_array=[] for element in my_array: if type(element) == int: flattened_array.append(element) else: flattened_array+=flatten_array(element) return flattened_array print(flatten_array([[1,2,[3]],4]))"},{"prompt":"mplement a decision tree learning algorithm in Python to classify a dataset.","completion":"import numpy as np class DecisionTree(): def __init__(self): self.max_depth = 3 self.tree = self._build_tree() def _build_tree(self): tree = {} tree['index'] = 0 # features index tree['thresh'] = 0. # threshold for feature tree['left'] = None # left subtree tree['right'] = None # right subtree return tree def fit(self, X, y): self._build_tree(X, y, self.tree, 0, self.max_depth) return self.tree def _build_tree(self, X, y, node, depth, max_depth): # get index of all the samples samples_index = np.arange(X.shape[0]) # node is pure or depth == max_depth if self._check_purity(y, samples_index) or depth == max_depth: self.__set_leaf_node(y, node) return # find best split feature_index, threshold = self._get_best_split(X, y, samples_index) # create two subtrees left_index, right_index = self._split(X, feature_index, threshold, samples_index) # add the returned feature index to the node node['index'] = feature_index # add the returned node threshold to the node node['thresh'] = threshold # define left and right children node['left'] = self._build_tree(X, y, {}, depth+1, max_depth) node['right'] = self._build_tree(X, y, {}, depth+1, max_depth) # build right and left subtrees self._build_tree(X, y, node['left'], depth+1, max_depth) self._build_tree(X, y, node['right'], depth+1, max_depth) def _check_purity(self, y, samples_index): # check for the purity of label unique_labels = np.unique(y[samples_index]) if len(unique_labels) == 1: return True else: return False def _get_best_split(self, X, y, samples_index): best_index = 0 best_threshold = 0 max_ig = 0 n_features = X.shape[1] # loop through all the feature and get the best split for col in range(n_features): ig, threshold = self._information_gain(X, y, col, samples_index) if ig > max_ig: max_ig = ig best_index = col best_threshold = threshold return best_index, best_threshold def _information_gain(self, X, y, col, samples_index): # function to calculate information gain total_sets = len(samples_index) classes, counts = np.unique(y[samples_index], return_counts=True) entropies = self._entropy(counts, total_sets) #sort the X sample sorted_x = np.sort(X[samples_index, col]) threshold_sets = [(sorted_x[i]+sorted_x[i+1])/2 for i in range(len(sorted_x)-1)] max_ig = 0 best_threshold = 0 for thr in threshold_sets: l_set, r_set = self._split(X, col, thr, samples_index) l_classes, l_counts = np.unique(y[l_set], return_counts=True) r_classes, r_counts = np.unique(y[r_set], return_counts=True) l_entrp = self._entropy(l_counts, len(l_set)) r_entrp = self._entropy(r_counts, len(r_set)) entrp = (len(l_set)*l_entrp + len(r_set)*r_entrp) / total_sets ig = entropies - entrp if ig > max_ig: max_ig = ig best_threshold = thr return max_ig, best_threshold def _entropy(self, counts, total_samples): # calculate the entropy entropies = np.sum([(-count/total_samples)*np.log2(count/total_samples) for count in counts]) return entropies def _split(self, X, col, thresh, samples_index): # split data left_index = np.argwhere(X[samples_index, col] < thresh).flatten() right_index = np.argwhere(X[samples_index, col] >= thresh).flatten() return left_index, right_index def __set_leaf_node(self, y, node): # get predictions node['predictions'] = np.bincount(y).argmax()"},{"prompt":"Write a Python program to retrieve and print the current stock price of the tech companies Google and Microsoft","completion":"import requests import json def get_stock_price(ticker): url = 'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol={ticker}&interval=1min&apikey=<Your_API_KEY>'.format(ticker=ticker) response = requests.get(url) data = json.loads(response.text) if data: ts = data['Time Series (1min)'] latest_data_point = list(ts.values())[0] return latest_data_point['4. close'] if __name__ == '__main__': g_price = get_stock_price('GOOGL') m_price = get_stock_price('MSFT') print(f'Google stock price: {g_price}') print(f'Microsoft stock price: {m_price}')"},{"prompt":"Write a Python program to add numbers from different columns of a multidimensional array. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","completion":"arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # Initialize result result = 0 # Iterate every element in the array for row in arr: for col in row: # Adding elements of each row result = result + col # Displaying sum print(result) # Output: 45"},{"prompt":"mplement the quick sort algorithm in Python.","completion":"def quick_sort(array): if len(array) == 0 or len(array) == 1: return array pivot = array[0] left = [] right = [] for i in range(1, len(array)): if array[i] <= pivot: left.append(array[i]) else: right.append(array[i]) left = quick_sort(left) right = quick_sort(right) return left + [pivot] + right"},{"prompt":"Edit the following Python code to sort a list of numbers in reversed order. numbers = [15, 2, 5, 12, 8]","completion":"numbers.sort(reverse=True)"},{"prompt":"Write a Python statement that Finds the maximum value among the given numbers. [10, 5, 15, 35, 20]","completion":"max_num = max([10, 5, 15, 35, 20]) print(max_num)"},{"prompt":"Modify the following program to output the 3 most frequency words. words = 'It is very important to be pythonic when writing python code.' word_dict = {} for word in words.split(): if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1","completion":"words = 'It is very important to be pythonic when writing python code.' word_dict = {} for word in words.split(): if word in word_dict: word_dict[word] += 1 else: word_dict[word] = 1 sorted_words = sorted(word_dict, key = lambda x: word_dict[x], reverse = True) print(\\"The three most frequent words are:\\") for i in range(3): print(sorted_words[i], word_dict[sorted_words[i]])"},{"prompt":"Write a Python function to extract phone numbers from a text.","completion":"import re def extract_phone_numbers(text): return re.findall(r\\"(?b[0-9]{3})?[-. ]?[0-9]{3}[-. ]?[0-9]{4}b\\", text)"},{"prompt":"Generate a REST API using Python to allow users to search through a library catalogue. The endpoint should accept a keyword and return all books that match that keyword. Not applicable","completion":"import os from flask import Flask, request from flask_restful import Resource, Api import json app = Flask(__name__) api = Api(app) class SearchBooks(Resource): def get(self): query = request.args.get('q') books = find_books(query) return {'results': books} api.add_resource(SearchBooks, '/search') if __name__ == '__main__': app.run() def find_books(term): # code for searching library here return []"},{"prompt":"Develop a python program that takes a paragraph as input and outputs a list of words in descending order of frequencies. This is a sample sentence to try out the program.","completion":"from collections import Counter def word_frequency(paragraph): words = paragraph.split() counts = Counter(words) return counts.most_common() paragraph = \\"This is a sample sentence to try out the program.\\" print(word_frequency(paragraph))"},{"prompt":"Create a function in Python that takes an array of integers and returns the median using a divide and conquer approach. Example array of integers: [1, 5, 8, 9, 11, 15, 17]","completion":"def median_divide_and_conquer(arr): if len(arr) == 0: return None elif len(arr) == 1: return arr[0] else: mid = len(arr) // 2 l_half = arr[:mid] r_half = arr[mid:] if len(l_half) % 2 == 0: median = (l_half[-1] + l_half[-2]) / 2 else: median = l_half[-1] if len(r_half) % 2 == 0: median += (r_half[0] + r_half[1]) / 2 else: median += r_half[0] return median / 2"},{"prompt":"Generate a function to print a Fibonacci series with n steps (including 0) in Python.","completion":"def printFibo(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: print(a) elif n == 1: print(a,b) else: print(a,b,end=\\" \\") for i in range(2,n): c = a + b a = b b = c print(b,end=\\" \\") printFibo(10)"},{"prompt":"Generate a python function that takes an array and returns its maximum element. [5, 25, 10, 9]","completion":"def maxElement(arr): max = arr[0] for i in arr: if i > max: max = i return max arr = [5, 25, 10, 9] out = maxElement(arr) print(out)"},{"prompt":"Design a program in Python which generates a random mathematical equation with two numbers.","completion":"import random def generateRandomEquation(): num1 = random.randint(0,9) num2 = random.randint(0,9) op = random.choice(['+','-','*','/']) equation = str(num1) + op + str(num2) return equation print(generateRandomEquation())"},{"prompt":"Generate an optimised Python program to calculate the greatest common divisor (GCD) of two positive integers. Not applicable","completion":"def gcd(x, y): if x == 0: return y return gcd(y % x, x) # Driver code a = 8 b = 4 print(\\"GCD of {0} and {1} is {2}\\".format(a, b, gcd(a, b)))"},{"prompt":"Create an algorithm in Python to generate random numbers between 1 and 10 without repetition. Number of random numbers needed is 5","completion":"import random def generate_random_numbers(n): result = random.sample(range(1, 11), n) return result random_numbers = generate_random_numbers(5) print(random_numbers) # Example output: [4, 9, 2, 6, 8]"},{"prompt":"Create a basic machine learning program in Python that uses a Support Vector Machine (SVM) to classify a given dataset. Not applicable","completion":"import pandas as pd from sklearn import datasets from sklearn import svm data = pd.read_csv('data.csv') # Load data X = data.drop('target', axis=1) y = data['target'] # Train the model clf = svm.SVC() clf.fit(X, y) # Test the model y_pred = clf.predict(X) # Evaluate accuracy accuracy = metrics.accuracy_score(y, y_pred) print('Accuracy:', accuracy)"},{"prompt":"Design a Python program that takes a list and randomizes the order of the elements in the list. [1, 2, 3, 4, 5]","completion":"import random # function to generate a random # permutation of a list def randomize(data_list): # Start from the last # element and swap one by one. for i in range(len(data_list) - 1, 0, -1): # Pick a random index # from 0 to i j = random.randint(0, i + 1) # Swap the randomly picked # element with the current data_list[i], data_list[j] = data_list[j], data_list[i] # Driver code data_list = [1, 2, 3, 4, 5] randomize(data_list) print(data_list)"},{"prompt":"Create an AI chatbot in Python that can respond to queries about a topic of your choice. Not applicable","completion":"import nltk import numpy as np import random import string # to process standard python strings from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import cosine_similarity f=open('chatbot.txt','r',errors = 'ignore') #Corpus of the raw data raw=f.read() raw=raw.lower()# converts to lowercase nltk.download('punkt') # first-time use only nltk.download('wordnet') # first-time use only sent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences word_tokens = nltk.word_tokenize(raw)# converts to list of words # Pre-processing lemmer = nltk.stem.WordNetLemmatizer() #WordNet is a semantically-oriented dictionary of English included in NLTK. def LemTokens(tokens): return [lemmer.lemmatize(token) for token in tokens] remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation) def LemNormalize(text): return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict))) # Keyword Matching GREETING_INPUTS = (\\"hello\\", \\"hi\\", \\"greetings\\", \\"sup\\", \\"what's up\\",\\"hey\\",) GREETING_RESPONSES = [\\"hi\\", \\"hey\\", \\"*nods*\\", \\"hi there\\", \\"hello\\", \\"I am glad! You are talking to me\\"] def greeting(sentence): for word in sentence.split(): if word.lower() in GREETING_INPUTS: return random.choice(GREETING_RESPONSES) # Generating response def response(user_response): robo_response='' sent_tokens.append(user_response) TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english') tfidf = TfidfVec.fit_transform(sent_tokens) vals = cosine_similarity(tfidf[-1], tfidf) idx=vals.argsort()[0][-2] flat = vals.flatten() flat.sort() req_tfidf = flat[-2] if(req_tfidf==0): robo_response=robo_response+\\"I am sorry! I don't understand you\\" return robo_response else: robo_response = robo_response+sent_tokens[idx] return robo_response flag=True print(\\"My name is Qabot. I will answer your queries about quantum computing. If you want to exit, type Bye!\\") while(flag==True): user_response = input() user_response=user_response.lower() if(user_response!='bye'): if(user_response=='thanks' or user_response=='thank you' ): flag=False print(\\"Qabot: You are welcome..\\") else: if(greeting(user_response)!=None): print(\\"Qabot: \\"+greeting(user_response)) else: print(\\"Qabot: \\",end=\\"\\") print(response(user_response)) sent_tokens.remove(user_response) else: flag=False print(\\"Qabot: Bye! take care..\\")"},{"prompt":"mplement a python code that yields the factorial of a given number.","completion":"def factorial(n): fact = 1 for i in range(1, n+1): fact = fact * i return fact"},{"prompt":"Develop a bot to assist with customer service. The bot must be able to handle basic inquiries without human intervention. Not applicable","completion":"import nltk import numpy as np import random import string # to process standard python strings import bs4 as bs import urllib.request import re from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.metrics.pairwise import cosine_similarity nltk.download('punkt') # first-time raw = open('customer_responses.txt','r',encoding='utf8').read() raw = raw.lower()# converts to lowercase sent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences word_tokens = nltk.word_tokenize(raw)# converts to list of words lemmer = nltk.stem.WordNetLemmatizer() #WordNet is a semantically-oriented dictionary of English included in NLTK. def LemTokens(tokens): return [lemmer.lemmatize(token) for token in tokens] remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation) def LemNormalize(text): return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict))) # key word matching # greeting Inputs GREETING_INPUTS = (\\"hello\\", \\"hi\\", \\"greetings\\", \\"sup\\", \\"what's up\\",\\"hey\\",) # Greeting responses back to the user GREETING_RESPONSES = [\\"hi\\", \\"hey\\", \\"*nods*\\", \\"hi there\\", \\"hello\\", \\"I am glad! You are talking to me\\"] # Generating response def greeting(sentence): # if user's input is a greeting, then return a randomly chosen greeting response for word in sentence.split(): if word.lower() in GREETING_INPUTS: return random.choice(GREETING_RESPONSES) # Generate response def response(user_response): robo_response='' sent_tokens.append(user_response) TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english') tfidf = TfidfVec.fit_transform(sent_tokens) #get the measure of similarity (similarity scores) vals = cosine_similarity(tfidf[-1], tfidf) #get the index of the most similar text/sentence to the users response idx=vals.argsort()[0][-2] #parse through one of the most similar sentence like the users response flat = vals.flatten() flat.sort() req_tfidf = flat[-2] if(req_tfidf==0): robo_response=robo_response+\\"I am sorry! I don't understand you\\" return robo_response else: robo_response = robo_response+sent_tokens[idx] return robo_response # Call the chatbot flag=True print(\\"ROBO: My name is Robo. I will answer your queries about Customer Service. If you want to exit, type Bye!\\") while(flag==True): user_response = input() user_response=user_response.lower() if(user_response!='bye'): if(user_response=='thanks' or user_response=='thank you' ): flag=False print(\\"ROBO: You are welcome..\\") else: if(greeting(user_response)!=None): print(\\"ROBO: \\"+greeting(user_response)) else: print(\\"ROBO: \\",end=\\"\\") print(response(user_response)) sent_tokens.remove(user_response) else: flag=False print(\\"ROBO: Bye! take care..\\")"},{"prompt":"Optimize a Python code snippet. The snippet takes input of a list containing integers and returns a list of all the prime numbers from that list. [2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def primes(lst): result = [] # Iterate over the given list for num in lst: # If num is greater than 1 # so it must be prime if num > 1: for j in range(2, num): if (num % j) == 0: break else: result.append(num) return result # Driver code lst = [2, 3, 4, 5, 6, 7, 8, 9, 10] print(primes(lst)) # Output: [2, 3, 5, 7]"},{"prompt":"Design a system in Python to order items based on its popularity.","completion":"def order_items_by_popularity(items): \\"\\"\\"Function to order items by their popularity.\\"\\"\\" items_dict = {} # Create a dictionary of item and its count for item in items: if item in items_dict: items_dict[item] += 1 else: items_dict[item] = 1 # Sort the items by their count in descending order sorted_items = sorted(items_dict.items(), key=lambda i: i[1], reverse=True) # Store the sorted items in a list sorted_items_list = [item[0] for item in sorted_items] return sorted_items_list"},{"prompt":"Write a Python program to create a dictionary from a given list of integers that contains elements from 1 to the given number. number = 5","completion":"def create_dict(number): dict_N = dict() for i in range(1, number+1): dict_N[i] = i return dict_N dict_N = create_dict(5) print(dict_N)"},{"prompt":"Construct a Python script to create a dictionary containing the numbers from 1 to 10 and their squares.","completion":"numbers = dict((num, num*num) for num in range(1,11)) print(numbers)"},{"prompt":"Create a web application in Python and Flask to visualize the most frequent words in a text document. Not applicable","completion":"from flask import Flask, render_template from collections import Counter app = Flask(__name__) @app.route('/') def word_count(): # read text file file = open('document.txt', 'r') text = file.read() words = text.split() # count words in the file word_count = Counter(words) # extract the ten most frequent words most_common = word_count.most_common(10) return render_template('visualize.html', most_common=most_common) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python function to convert a list of strings into a dictionary of the form {string: count}. myList = [âaâ, âaâ, âbâ, âcâ]","completion":"def list_to_dict(myList): dict = {} for val in myList: if val in dict: dict[val] += 1 else: dict[val] = 1 return dict myList = ['a', 'a', 'b', 'c'] print(list_to_dict(myList)) # Output: # {'a': 2, 'b': 1, 'c': 1}"},{"prompt":"Write a Python program to parse a given XML document and insert it into a SQL database. Not applicable","completion":"import xml.etree.ElementTree as et import mysql.connector # Connect to the MySQL database db = mysql.connector.connect( host=\\"localhost\\", user=\\"yourusername\\", passwd=\\"yourpassword\\", database=\\"mydatabase\\" ) # Parse the XML tree = et.parse('mytest.xml') root = tree.getroot() # Iterate over each element and add to database for element in root: sql = \\"INSERT INTO mytable (\\" columns = [] values = [] for child in element: columns.append(child.tag) values.append(\\"'\\"+child.text+\\"'\\") sql += \\", \\".join(columns) sql += \\") VALUES (\\" sql += \\", \\".join(values) sql += \\")\\" cursor = db.cursor() cursor.execute(sql) # Commit changes db.commit()"},{"prompt":"Write a Python program that reads a list of strings and sorts them by the number of characters in each string. ['foo', 'bar', 'baz', 'foobar', 'beer', 'wine']","completion":"list_of_strings = ['foo', 'bar', 'baz', 'foobar', 'beer', 'wine'] # sort strings by length list_of_strings.sort(key=len) # print sorted list print(list_of_strings)"},{"prompt":"Define a class Person in Python that has properties gender, age and name.","completion":"class Person: def __init__(self, gender, age, name): self.gender = gender self.age = age self.name = name"},{"prompt":"Write a basic calculator program that can take in two values and an operator.","completion":"#!/usr/bin/env python3 # This program is a basic calculator that can take in two values and an operator # The corresponding operations when the operator input is given operations = { \\"+\\": lambda x, y: x + y, \\"-\\": lambda x, y: x - y, \\"*\\": lambda x, y: x * y, \\"/\\": lambda x, y: x / y } # Take in the values and operator from the user num1 = int(input(\\"Enter the first number: \\")) operator = input(\\"Enter the operator: \\") num2 = int(input(\\"Enter the second number: \\")) # Assert that the operator is valid assert operator in operations, f\\"The given operator {operator} is not a valid operator\\" # Calculate the result result = operations[operator](num1, num2) print(f\\"Result: {num1} {operator} {num2} = {result}\\")"},{"prompt":"Edit this python code to reverse the functionâs argument order. def multiply(x,y): return x*y","completion":"def multiply(y, x): return x*y"},{"prompt":"The given code is a Python script that translates a Wikivoyage article from one language to another. The script takes the title of the article and the source and destination languages as input and generates a new article in the destination","completion":"#!/usr/bin/python # -*- coding: utf-8 -*- # transvoyage.py # Version 0.3 # # Copyright 2014 GuÃ©naÃ«l Muller <contact@inkey-art.net> # # This program is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 3 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program; if not, write to the Free Software # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, # MA 02110-1301, USA. # #TODO # - se conformer Ã  la PEP 8 # - commentaires et TODO bilingue. # - optimisations # - traduction inversÃ© amÃ©liorÃ© # - nouveau langages # - debugage de certains regex et autres import sys import os import subprocess import re import urllib import argparse # traductions des types Articles listTypeFr=('Ville','RÃ©gion continentale','RÃ©gion','Pays' ,'Quartier','ItinÃ©raire','Parc') listTypeEn=('city' ,'continent' ,'region','country','district','itinerary' ,'park') #Equivalences sections listSectionFr=[\\"Comprendre\\",\\"Aller\\" ,\\"Circuler\\" ,\\"Voir\\",\\"Faire\\",\\"Acheter\\",\\"Manger\\",\\"Boire un verre / Sortir\\",\\"Se loger\\",\\"Aux environs\\",\\"Travailler\\",\\"Apprendre\\",\\"GÃ©rer le Quotidien\\",\\"SÃ©curitÃ©\\",\\"Communiquer\\"] listSectionEn=[\\"Understand\\",\\"Get in\\",\\"Get around\\",\\"See\\" ,\\"Do\\" ,\\"Buy\\" ,\\"Eat\\" ,\\"Drink\\" ,\\"Sleep\\" ,\\"Go next\\",\\"Work\\" ,\\"Learn\\" ,\\"Cope\\" ,\\"Stay safe\\", \\"Connect\\" ] listSectionFr.extend([\\"Respecter\\",\\"Parler\\",\\"ÃlÃ©ctricitÃ©\\"]) listSectionEn.extend([\\"Respect\\",\\"Talk\\",\\"Electricity\\"]) listSectionFr.extend([\\"Se prÃ©parer\\",\\"Ãtapes\\",\\"Autres destinations\\",\\"Lire\\",\\"Douanes\\",\\"En taxi\\",\\"SantÃ©\\",\\"Monnaie\\",\\"Villes\\",\\"RÃ©gions\\",\\"Quartiers\\",\\"Bureaux d'information touristique\\"]) listSectionEn.extend([\\"Prepare\\",\\"Route\\",\\"Other destinations\\",\\"Read\\",\\"Customs\\",\\"By taxi\\",\\"Stay healthy\\",\\"Currency\\",\\"Cities\\",\\"Regions\\",\\"Districts\\",\\"Tourist office\\"]) listSectionFr.extend(['Histoire', 'Paysage', 'Flore et faune',\\"Climat\\",\\"RandonnÃ©e\\",\\"Droits d'accÃ¨s\\",\\"Droits d'accÃ¨s\\",\\"ActivitÃ©s\\",\\"MÃ©tÃ©o\\",\\"Nature\\"]) listSectionEn.extend(['History', 'Landscape', 'Flora and fauna',\\"Climate\\",\\"Hiking\\",\\"Fees/permits\\",\\"Fees/Permits\\",\\"Activities\\",\\"Weather\\",\\"Wildlife\\"]) listSectionFr.extend(['Ã pied', 'En train', 'En bus',\\"En avion\\",\\"En ferry\\",\\"En bateau\\",\\"En voiture\\",\\"En vÃ©lo\\",\\"En vÃ©lo\\",\\"En vÃ©lo\\",\\"En motoneige\\",\\"En stop\\"]) listSectionEn.extend(['By foot', 'By train', 'By bus',\\"By plane\\",\\"By ferry\\",\\"By boat\\",\\"By car\\",\\"By bicycle\\",\\"By cycle\\",\\"By bike\\",\\"By snowmobile\\",\\"By thumb\\"]) listSectionFr.extend(['Bon marchÃ©', 'Prix moyen','Prix moyen', 'Luxe','HÃ´tel','Logements','Dans la nature']) listSectionEn.extend(['Budget', 'Mid-range','Mid range', 'Splurge','Hotel','Lodging','Backcountry']) # Ãquivalence image listImageFr=[\\"[[Fichier:\\",\\"[[Fichier:\\",\\"gauche\\",\\"droite\\",\\"vignette\\",\\"vignette\\"] listImageEn=[\\"[[Image:\\",\\"[[File:\\",\\"left\\",\\"right\\",\\"thumbnail\\",\\"thumb\\"] #Equivalence Listings #titre listings listListingDebFr=[\\"Listing\\",\\"Faire\\",\\"Voir\\",\\"Acheter\\",\\"Manger\\",\\"Sortir\\",\\"Se loger\\",\\"Destination\\",\\"Aller\\",\\"Circuler\\"] listListingDebEn=[\\"listing\\",\\"do\\" ,\\"see\\",\\"buy\\",\\"eat\\",\\"drink\\",\\"sleep\\",\\"listing\\",\\"listing\\",\\"listing\\"] #paramÃ¨tres listListingFr=[\\"nom=\\",\\"adresse=\\",\\"tÃ©lÃ©phone\\",\\"latitude=\\",\\"longitude=\\",\\"email=\\",\\"direction=\\",\\"numÃ©ro gratuit=\\",\\"fax=\\",\\"prix=\\",\\"description=<!-- \\",\\"-->}}\\",\\"arrivÃ©e=\\",\\"dÃ©part=\\",\\"horaire=\\"] listListingEn=[\\"name=\\",\\"address=\\" ,\\"phone\\",\\"lat=\\",\\"long=\\",\\"email=\\",\\"directions=\\",\\"tollfree=\\",\\"fax=\\",\\"price=\\",\\"content=\\",\\"}}\\",\\"checkin=\\",\\"checkout=\\",\\"hours=\\"] #Equivalence Itineraires listItineraireFr=[\\"Jour \\",\\": De\\",\\" Ã  \\"] listItineraireEn=[\\"Day \\",\\":\\",\\" to \\"] #Equivalence Dans listDansFr=[\\"Dans\\"] listDansEn=[\\"IsPartOf\\"] #Equivalence Carte #Debut listMapDebFr=[\\"ListeRegions\\",\\"carte=\\",\\"taillecarte=\\"] listMapDebEn=[\\"Regionlist\\",\\"regionmap=\\",\\"regionmapsize=\\"] #ParamÃ¨tres listMapFr=[\\"nomregion0=\\",\\"couleurregion0=\\",\\"elementsregion0=\\",\\"descriptionregion0=\\"] listMapEn=[\\"region0name=\\",\\"region0color=\\",\\"region0items=\\",\\"region0description=\\"] # Tout les regex en string par langue de Destination RegSFr=[\\"(.*)[[(Image|Fichier):(.*)s*\\",\\"(=+)(.*)(=+)(.*)\\",\\"(.*){{(Listing|Faire|Voir|Acheter|Manger|Boire|Sortir|Se loger|Destination|Aller|Circuler)s(.*)s*\\",\\"(.*)}}[.s]*\\",\\"{{Dans|(.*)}}s*\\"] # 0 1 2 3 4 RegSFr.extend([\\"^(=+)(.*) Ã  (.*)(=+)s*\\",\\"(.*){{ListeRegions(.*)\\",\\"(.*)region([0-9]+)=(.*)\\",\\"{{Avancement|statut=(Ã©bauche|esquisse|utilisable|guide|Ã©toile)|type=0}}(.*)\\",\\"(.*){{Climat(.*)\\",\\"(.*){{ReprÃ©sentation diplomatique\\"]) # 5 6 7 8 9 10 RegSEn=[\\"(.*)[[(Image|File):(.*)s*\\", \\"(=+)(.*)(=+)(.*)\\",\\"(.*){{(listing|do|see|buy|eat|drink|sleep)s(.*)s*\\",\\"(.*)}}[.s]*\\",\\"{{IsPartOf|(.*)}}s*\\"] # 0 1 2 3 4 RegSEn.extend([\\"^(=+)(.*) to (.*)(=+)s*\\",\\"(.*){{Regionlist(.*)\\",\\"(.*)region(.*)name=(.*)\\",\\"{{(outline|usable|guide|stub|star)0}}(.*)\\",\\"(.*){{Climate(.*)\\",\\"(.*){{flag|(.*)}}(.*){{Listing(.*)\\"]) # 5 6 7 8 9 10 #Avancement avFr=\\"{{Avancement|statut=esquisse|type=0}}n\\" avEn=\\"{{outline0}}n\\" #Equivalence climat listMoisFr=[\\"jan\\",\\"fev\\",\\"mar\\",\\"avr\\",\\"mai\\",\\"jui\\",\\"jul\\",\\"aou\\",\\"sep\\",\\"oct\\",\\"nov\\",\\"dec\\"] listMoisEn=[\\"jan\\",\\"feb\\",\\"mar\\",\\"apr\\",\\"may\\",\\"jun\\",\\"jul\\",\\"aug\\",\\"sep\\",\\"oct\\",\\"nov\\",\\"dec\\"] listClimatFr=[\\"Climat\\",\\"description\\"] listClimatEn=[\\"Climate\\",\\"description\\"] for mois in listMoisFr : listClimatFr.append(\\"tmin-\\"+mois) listClimatFr.append(\\"tmax-\\"+mois) listClimatFr.append(\\"prec-\\"+mois) for mois in listMoisEn : listClimatEn.append(mois+\\"low\\") listClimatEn.append(mois+\\"high\\") listClimatEn.append(mois+\\"precip\\") # Trousse Ã  mots par langues ListFr=(listTypeFr,listSectionFr,listImageFr,listListingDebFr,listListingFr,listItineraireFr,listDansFr,listMapDebFr,listMapFr,RegSFr,avFr,listClimatFr) ListEn=(listTypeEn,listSectionEn,listImageEn,listListingDebEn,listListingEn,listItineraireEn,listDansEn,listMapDebEn,listMapEn,RegSEn,avEn,listClimatEn) # 0 1 2 3 4 5 6 7 8 9 10 11 ListingsSpecialFr={\\"Villes\\":\\"Ville\\",\\"Autres destinations\\":\\"Destinations\\",\\"Aux environs\\":\\"Destinations\\"} #lien langage/trousse ListLang ={\\"fr\\":ListFr, \\"en\\":ListEn} #Langue source et destination et contenu rÃ©cupÃ©rer src=ListEn dest=ListFr lang=\\"en\\" content=\\"\\" section=\\"\\" # Pour rÃ©cupÃ©rÃ©r le type de l'article (Ville,ItinÃ©raire,Quartier,etcâ¦) def recupTypeArticle() : typeArticle = dest[0][0] listRegex = list() for mot in src[0] : s=src[9][8].replace(\\"0\\",mot) listRegex.append(re.compile(s)) bOk=True for line in content: if (not bOk) : break for i in range (len(listRegex)) : if listRegex[i].search(line) : typeArticle=dest[0][i] bOk=False break return typeArticle #Pour crÃ©er l'entÃªte def creationEntete (typeArticle,titre) : s=\\"\\" if dest==ListFr : # Si on traduit en franÃ§ais s=\\"\\"\\"{{BanniÃ¨re page}} {{Info \\"\\"\\"+typeArticle+\\"\\"\\" | nom= | nom local= | rÃ©gion= | image= | lÃ©gende image= | riviÃ¨re= | superficie= | population= | population agglomÃ©ration= | annÃ©e population= | altitude= | latitude= | longitude= | zoom= | code postal= | indicatif= | adresse OT= | horaire OT= | tÃ©lÃ©phone OT= | numÃ©ro gratuit OT= | email OT= | facebook OT= | twitter OT= | URL OT= | URL officiel= | URL touristique= }} \\"\\"\\" return s # Pour rÃ©cupÃ©rer les images (et les traduire) def recupImage(line) : s=line for i in range (len(src[2])) : s=s.replace(src[2][i],dest[2][i]) return s #Pour rÃ©cupÃ©rer les sections et sous-sections def recupSection(line) : s=line for i in range (len(src[1])) : s=s.replace(src[1][i],dest[1][i]) return s #Pour rÃ©cupÃ©rer les listings def recupListing(line,debut) : s=line if debut : for i in range (len(src[3])) : s=s.replace(src[3][i],dest[3][i]) for i in range (len(src[4])) : s=s.replace(src[4][i],dest[4][i]) return s #Pour rÃ©cupÃ©rer les sections d'Ã©tapes def recupItineraire(line) : s=line for i in range (len(src[5])) : s=s.replace(src[5][i],dest[5][i]) return s #Pour rÃ©cupÃ©rer la catÃ©gorisation def recupDans(line) : s=line for i in range (len(src[6])) : s=s.replace(src[6][i],dest[6][i]) return s #Pour rÃ©cupÃ©rer les cartes avec rÃ©gions def recupMap(line,numMap) : s=line if numMap == 0 : for i in range (len(src[7])) : s=s.replace(src[7][i],dest[7][i]) numPrec=str(numMap-1) sNumMap=str(numMap) for i in range (len(src[8])): src[8][i]=src[8][i].replace(numPrec,sNumMap) dest[8][i]=dest[8][i].replace(numPrec,sNumMap) if numMap > 0 : for i in range (len(src[8])) : s=s.replace(src[8][i],dest[8][i]) return s def recupClimat(line) : s=line for i in range (len(src[11])): s=s.replace(src[11][i],dest[11][i]) return s #Programme en lui mÃªme parser = argparse.ArgumentParser() parser.add_argument('title',help=\\"nom de la page Ã  convertir\\" ) parser.add_argument('--src',help=\\"langage source : fr,en,â¦ par dÃ©fault fr \\") parser.add_argument('--dest',help=\\"langage destination : fr,en,â¦ par dÃ©fault en \\") parser.add_argument('-d','--debug',action='store_true' ,help=\\"mode debugage : rÃ©cupÃ©ration du fichier source en mÃªme temps que le rÃ©sultat\\") parser.add_argument('-C','--nocomment',action='store_true' ,help=\\"commentaires dÃ©sactivÃ© dans le rÃ©sultat \\") args = parser.parse_args() bAv=False # Pour savoir si la banniÃ¨re d'avancement Ã  Ã©tÃ© placÃ© result=\\"\\" # Pou stockÃ© le resultat #arguments title=args.title if args.src and args.src.lower() in ListLang.keys() : src=ListLang[args.src.lower()] lang=args.src.lower() if args.dest and args.dest.lower() in ListLang.keys() : dest=ListLang[args.dest.lower()] url=\\"https://\\"+lang+\\".wikivoyage.org/w/index.php?title=\\"+title+\\"&action=raw\\" content=urllib.urlopen(url).readlines() # on rÃ©cupÃ¨re le type de l'article et on crÃ©e l'entÃªte TypeArticle=recupTypeArticle() result +=creationEntete(TypeArticle,title) # les diffÃ©rents regex regImg =re.compile(src[9][0]) regSection =re.compile(src[9][1]) regListing =re.compile(src[9][2]) regListingEnd =re.compile(src[9][3]) regDans =re.compile(src[9][4]) regItineraire =re.compile(src[9][5]) regMap =re.compile(src[9][6]) regNomRegion =re.compile(src[9][7]) regClimat =re.compile(src[9][9]) regDiplomat =re.compile(src[9][10]) # On ouvre et on lit i=0 numMap=-1 bClimat=False bListing=False for line in content: i=i+1 if numMap>-1 : if regNomRegion.search(line) : numMap=numMap+1 result+=recupMap(line,numMap) if regListingEnd.search(line) : sNumMap=str(numMap) for i in range (len(src[8])): src[8][i]=src[8][i].replace(sNumMap,\\"0\\") dest[8][i]=dest[8][i].replace(sNumMap,\\"0\\") numMap=-1 if bClimat or regClimat.search(line): result+=recupClimat(line) bClimat=True if regListingEnd.search(line) : bClimat=False elif bListing : s=recupListing(line,False) if regListingEnd.search(line) : bListing=False if not regListingEnd.search(s) : s+=\\"}}\\" result+=s elif regDiplomat.search(line) and dest==ListFr : s=\\"* {{ReprÃ©sentation diplomatique\\" bListing=True result+=s elif regMap.search(line) : numMap=0 result+=recupMap(line,numMap) elif regItineraire.search(line) : result+=recupItineraire(line) elif regListing.search(line) : s=recupListing(line,True) if dest==ListFr and section in ListingsSpecialFr.keys() : s=s.replace('Listing',ListingsSpecialFr[section]) result+=s bListing=True elif regImg.search(line) : result+=recupImage(line) elif regSection.search(line) : s=recupSection(line) if len(s)>3 and s[2] !=\\"=\\" : section=s.replace(\\"==\\",\\"\\").replace(\\"n\\",\\"\\") result+=s elif regDans.search(line) : s=dest[10].replace(\\"0\\",TypeArticle.lower()) #avancement result+=s bAv=True result+=recupDans(line) if (not bAv) : # Si la banniÃ¨re avancement n'a toujour pas Ã©tÃ© placÃ© s=dest[10].replace(\\"0\\",TypeArticle.lower()) result+=s # On Ã©crit les fichiers title=title.replace(\\"/\\",\\"-\\") title=title.replace(\\".\\",\\"-\\") if args.nocomment is True : result=re.sub(r'<!--(.*)(.|n)(.*)-->',r'2',result) with open(\\"./\\"+title+\\".txt\\", \\"w\\") as fichier: fichier.write(result) if args.debug is True : with open(\\"./\\"+title+\\"_src.txt\\", \\"w\\") as fichier: fichier.writelines(content)"},{"prompt":"Develop a greedy algorithm to calculate the minimum number of coins required to make a given amount of change in Python. [1, 5, 10]","completion":"def coinChange(coins, amount): m = len(coins) table =[0 for k in range(amount+1)] table[0] = 0 for i in range(1, amount+1): table[i] = float('inf') for j in range(m): if (coins[j] <= i): sub_res = table[i-coins[j]] if (sub_res != float('inf') and sub_res + 1 < table[i]): table[i] = sub_res + 1 return table[amount]"},{"prompt":"Write a script in Python to filter out the strings containing the character 'x'. ['abc', 'efg', 'X', 'xyz', 'xabc']","completion":"def filter_x(list): new_list = [] # iterate through the list for i in list: if 'x' not in i: # add the string not containing x new_list.append(i) return new_list list = ['abc', 'efg', 'X', 'xyz', 'xabc'] filtered_list = filter_x(list) print(\\"The list after filtering: \\", filtered_list)"},{"prompt":"Create a QLearning algorithm in Python to play the game '2048'.","completion":"import numpy as np import random class QLearner: def __init__(self, alpha=0.2, gamma=0.9): self.alpha = alpha self.gamma = gamma self.Q = dict() def get_Q(self, state, action): \\"\\"\\" Return Q-value for a given state and action. \\"\\"\\" return self.Q.get((state, action), 0.0) def learn_Q(self, state, action, reward, next_state): \\"\\"\\" Update the Q-value for a given state, action and reward. \\"\\"\\" QValue = self.get_Q(state, action) next_QValue = max(self.get_Q(next_state, a) for a in self.get_legal_actions(next_state)) new_QValue = (1 - self.alpha) * QValue + self.alpha * (reward + self.gamma * next_QValue) self.Q[(state, action)] = new_QValue def choose_action(self, state): \\"\\"\\" Select the best action from a given state. \\"\\"\\" best_action = None max_value = -np.inf actions = self.get_legal_actions(state) for action in actions: value = self.get_Q(state, action) if value > max_value: max_value = value best_action = action return best_action def get_legal_actions(self, state): \\"\\"\\" Return legal moves for the given game state. \\"\\"\\" # Return a list of legal actions for the given state. pass def learn(self): \\"\\"\\" Update Q-value based on the results of the game. \\"\\"\\" # Implement the learning part of the assignment. pass"},{"prompt":"mplement a genetic algorithm in Python to optimize a cost function. Not applicable","completion":"import random def cost(x): # compute the cost of x def generate_population(size): # generate a population of size 'size' def mutation(x): # randomize a single gene of x def selection(population): # select two elements from the population for crossover def crossover(x1, x2): # produce two offsprings using crossover # initialize population population = generate_population(50) # repeat until convergence (or until a maximum number of iterations is reached) while True: # select two parents x1, x2 = selection(population) # produce two offsprings by crossover offspring1, offspring2 = crossover(x1, x2) # mutation offspring1 = mutation(offspring1) offspring2 = mutation(offspring2) # add offsprings to population population.append(offspring1) population.append(offspring2) # select best solution best_x = min(population, key=cost)"},{"prompt":"Create a Python program which takes in two integers and prints out the sum. Not applicable","completion":"def compute_sum(x, y): return x + y a = int(input(\\"Enter the first number: \\")) b = int(input(\\"Enter the second number: \\")) print(\\"The sum of the 2 numbers is:\\", compute_sum(a, b))"},{"prompt":"Given an array of integers, write a function in Python to search for a given number in the array. array = [1, 5, 8, 9], number = 5","completion":"def search_in_array(array, number): for element in array: if element == number: return True return False array = [1, 5, 8, 9] number = 5 result = search_in_array(array, number) if result: print(\\"Number found\\") else: print(\\"Number not found\\")"},{"prompt":"Create a Python class for a stack and its basic functions such as push, pop and peek.","completion":"class Stack: # empty list to store stack elements def __init__(self): self.stack = [] # push element to the stack def push(self, data): self.stack.append(data) # pop element from the stack def pop(self): self.stack.pop() # peek element from the stack def peek(self): return self.stack[-1]"},{"prompt":"Create two functions using Python Pandas and Numpy. The first should take a column of words in a DataFrame as input and should return a new column with all the words counted. The second function should take an array of numbers as input and should return the sum of all the numbers in the array. DataFrame column of words: [apple, banana, orange, apple, apple] Array of numbers: [1, 2, 3, 4, 5]","completion":"def word_count(column): return column.value_counts() def array_sum(numbers): return np.sum(numbers)"},{"prompt":"Create an array containing the numbers from 1 to 10 using Python","completion":"array = [1,2,3,4,5,6,7,8,9,10]"},{"prompt":"Generate a Python function that reverses a given string, and test the function with an input of Hello. Hello","completion":"def reverse(string): return string[::-1] print(reverse('Hello')) #prints \\"olleH\\""},{"prompt":"Create an AI program that can solve connect 4 in Python. Not applicable","completion":"import numpy as np class Board: def __init__(self): self.board = np.zeros((6,7), np.int8) self.win_state = ( (0, 1, 2, 3), (1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6), (7, 8, 9, 10), (8, 9, 10, 11), (9, 10, 11, 12), (10, 11, 12, 13), (14, 15, 16, 17), (15, 16, 17, 18), (16, 17, 18, 19), (17, 18, 19, 20), (21, 22, 23, 24), (22, 23, 24, 25), (23, 24, 25, 26), (0, 7, 14, 21), (7, 14, 21, 28), (14, 21, 28, 35), (1, 8, 15, 22), (8, 15, 22, 29), (15, 22, 29, 36), (2, 9, 16, 23), (9, 16, 23, 30), (16, 23, 30, 37), (3, 10, 17, 24), (10, 17, 24, 31), (17, 24, 31, 38), (4, 11, 18, 25), (11, 18, 25, 32), (18, 25, 32, 39), (5, 12, 19, 26), (12, 19, 26, 33), (19, 26, 33, 40), (6, 13, 20, 27), (13, 20, 27, 34), (20, 27, 34, 41), (3, 9, 15, 21), (4, 10, 16, 22), (10, 16, 22, 28), (11, 17, 23, 29), (17, 23, 29, 35), (12, 18, 24, 30), (18, 24, 30, 36), (13, 19, 25, 31), (19, 25, 31, 37), (5, 11, 17, 23), (6, 12, 18, 24), (12, 18, 24, 30), (13, 19, 25, 31), (19, 25, 31, 37), (20, 26, 32, 38), (26, 32, 38, 44), (27, 33, 39, 45), (33, 39, 45, 51), (34, 40, 46, 52) ) self.winner = 0 def move(self, player, column): row = board[:,column].argmax() if board[row][column] == 0: board[row][column] = player for row in self.win_state: if check_state(row) == player: self.winner = player return True return False def check_state(self, row): board_slice = self.board[row] if (board_slice == player).all(): return board_slice[0] else: return 0 def reset(self): self.board = np.zeros((6,7), np.int8) self.winner = 0"},{"prompt":"Generate a Python program to print all prime numbers between 1 and n.","completion":"def prime_numbers(n): # Create an empty list to store prime numbers prime_list = [] # Iterate over the numbers from 2 to n for num in range(2,n+1): prime = True # Iterate over the numbers from 2 to the square root of n for i in range(2, round(n**0.5)+1): # Check if num is divisible by any number if num % i == 0: prime = False if prime: prime_list.append(num) return prime_list n = int(input(\\"Enter a number: \\")) print(\\"The prime numbers between 1 and\\", n, \\"are\\", prime_numbers(n))"},{"prompt":"Create a script in Python that can sort the following list of items alphabetically. list = ['car', 'apple', 'ball', 'Boat']","completion":"def sortAlpha(list): list.sort() return list"},{"prompt":"Develop a Python program to extract the last 3 elements of a given list and append them to the beginning of the list.","completion":"def move_last_3(list): last3 = list[-3:] del list[-3:] list = last3 + list return list"},{"prompt":"Design an object oriented Python program that models a hierarchical tree structure. Not applicable","completion":"class Node: def __init__(self, data): self.data = data self.children = [] def add_child(self, node): self.children.append(node) def get_child(self, index): return self.children[index] def get_data(self): return self.data def get_children(self): return self.children root = Node(data=0) node1 = Node(data=1) node2 = Node(data=2) root.add_child(node1) root.add_child(node2) node3 = Node(data=3) node4 = Node(data=4) node1.add_child(node3) node1.add_child(node4) node5 = Node(data=5) node2.add_child(node5)"},{"prompt":"Construct a python function that takes a list of numbers and returns a list of the sum of the squares of the first n numbers. [1,2,3]","completion":"def sum_of_squares(numbers): squares_sum = [] for i in range(len(numbers)): squares_sum.append(sum([num**2 for num in numbers[:i+1]])) return squares_sum"},{"prompt":"Generate a Python program to build a decision tree from a given dataset. Age, Workclass, Fnlwgt, Education, Educationnum, Maritalstatus, Occupation, Relationship, Race, Sex, Capitalgain, Capitalloss, Hoursperweek, Nativecountry, Income 0, Stategov, 77516, Bachelors, 13, Nevermarried, Admclerical, Notinfamily, White, Male, 2174, 0, 40, UnitedStates, <=50K","completion":"import numpy as np from sklearn.tree import DecisionTreeClassifier # Input data data = np.array([ [0, 'State-gov', 77516, 'Bachelors', 13, 'Never-married', 'Adm-clerical', 'Not-in-family', 'White', 'Male', 2174, 0, 40, 'United-States', '<=50K'], [1, 'Private', 83311, 'Bachelors', 13, 'Married-civ-spouse', 'Exec-managerial', 'Husband', 'White', 'Male', 0, 0, 13, 'United-States', '<=50K'], [2, 'Private', 215646, 'HS-grad', 9, 'Divorced', 'Handlers-cleaners', 'Not-in-family', 'White', 'Male', 0, 0, 40, 'United-States', '<=50K'] ]) # Features X = data[:, :14] y = data[:, 14] # Fit decision tree clf = DecisionTreeClassifier(random_state=0, max_depth=2) clf = clf.fit(X, y)"},{"prompt":"mplement a CRUD (Create Read Update Delete) system in Python.","completion":"class CRUD: def __init__(self): self.records = [] def create(self,data): record = data self.records.append(record) def read(self): return self.records def update(self,index,data): self.records[index] = data def delete(self,index): self.records.pop(index)"},{"prompt":"Write a function in Python to sort the data in lexicographical order. [red, blue, green, purple, pink, black, white]","completion":"def sortLexicographical(data): return sorted(data, key=lambda x:x[0]) sorted_data = sortLexicographical([\\"red\\", \\"blue\\", \\"green\\", \\"purple\\", \\"pink\\", \\"black\\", \\"white\\"]) print(sorted_data)"},{"prompt":"Create a python function that can receive a list of integers and return a list of tuples with consecutive numbers. [1, 2, 3, 7, 8, 9, 10]","completion":"def get_consecutive(arr): result = [] i = 0 while i < len(arr): s = i while (i + 1 < len(arr)) and (arr[i + 1] == arr[i] + 1): i += 1 result.append((arr[s], arr[i])) i += 1 return result # Test arr = [1, 2, 3, 7, 8, 9, 10] print(get_consecutive(arr)) # Output [(1, 3), (7, 10)]"},{"prompt":"Write a python script that reads a text document and prints the 10 most frequently used words","completion":"# Read the file with open('text.txt') as f: # Get all the words from the file words = f.read().split() # Count the frequency of each word word_frequencies = {} for word in words: if word not in word_frequencies: word_frequencies[word] = 1 else: word_frequencies[word] += 1 # Sort the words based on their frequencies sorted_words = sorted(word_frequencies.items(), key = lambda wf: wf[1], reverse=True) # Print the 10 most frequently used words print('10 most frequent words: ', end = '') for i in range(10): print(sorted_words[i][0] + (\\",\\" if i != 9 else \\".\\"))"},{"prompt":"Create a Python script that takes a number and a power as parameters and calculates the result. Example input: number=2 power=3","completion":"def power(number, power): return number**power print(power(2, 3)) # Output: 8"},{"prompt":"Use this code to generate artificial load profiles to benchmark demand side management approaches. Modify the input files and device parameters as needed. The output writer can be selected by importing the appropriate module.","completion":"#!/usr/bin/python3 #Artifical load profile generator v1.1, generation of artificial load profiles to benchmark demand side management approaches #Copyright (C) 2018 Gerwin Hoogsteen #This program is free software: you can redistribute it and/or modify #it under the terms of the GNU General Public License as published by #the Free Software Foundation, either version 3 of the License, or #(at your option) any later version. #This program is distributed in the hope that it will be useful, #but WITHOUT ANY WARRANTY; without even the implied warranty of #MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the #GNU General Public License for more details. #You should have received a copy of the GNU General Public License #along with this program. If not, see <http://www.gnu.org/licenses/>. #This is an example configuration file! # Select the output writer import writer as writer #Random seed seed = 42 #input files: weather_irradiation = 'input/weather/solarirradiation_twenthe.csv' weather_timebaseDataset = 3600 #in seconds per interval #Simulation: #number of days to simulate and skipping of initial days. Simulation starts at Sunday January 1. numDays = 365 # number of days startDay = 0 # Initial day #Select the geographic location. Refer to the Astral plugin to see available locations (or give a lon+lat) # Use e.g. https://www.latlong.net/ from astral import Location location = Location() location.solar_depression = 'civil' location.latitude = 52.239095 location.longitude = 6.857018 location.timezone = 'Europe/Amsterdam' location.elevation = 0 #Select the devices in the neighbourhood #Devices #Scale overall consumption: consumptionFactor = 1.0 #consumption was a bit too high # Penetration of emerging technology in percentages # all values must be between 0-100 # These indicate what percentage of the houses has a certain device # Electric mobility, restriction that the sum <= 100 # Note, households with larger driving distances will receive EVs first penetrationEV = 13 penetrationPHEV = 32 # PV and storage, restriction that Battery <= PV # Note PV and battery size depend on the annual household consumption # This emulates the Dutch \\"nul-op-the-meter regime (net zero annual electricity usage) penetrationPV = 50 penetrationBattery = 10 #Note only houses with PV will receive a battery! # Heating systems, with restriction that the sum <= 100 penetrationHeatPump = 25 penetrationCHP = 5 # Combined heat and power penetrationInductioncooking = 25 #Device parameters: #EV capacityEV = 42000 #Wh powerEV = 7400 #W capacityPHEV = 12000 #Wh powerPHEV = 3700 #W #PV PVProductionPerYear = 220 #average kWh per m2 solar panel on annual basis PVAngleMean = 35 #degrees, 0 is horizontal to earth surface PVAngleSigma = 10 #degrees PVAzimuthMean = 180 #degrees, 0 is north, 90 is east PVAzimuthSigma = 90 #degrees PVEfficiencyMin = 15 #% of theoretical max PVEfficiencyMax = 20 #% of theoretical max #Driving distances commuteDistanceMean = 25 #km commuteDistanceSigma = 10 #km #Battery capacityBatteryLarge = 12000 #Wh capacityBatteryMedium = 5000 #Wh capacityBatterySmall = 2000 #Wh powerBatteryLarge = 3700 #W powerBatteryMedium = 3700 #W powerBatterySmall = 3700 #W #Kitchen #Consumption of devices ConsumptionOven = 2000 #W ConsumptionMicroWave = 800 #W ConsumptionStoveVentilation = 120 #W #But this is maximum, usually set lower! ConsumptionInductionStove = 2200 #W #http://homeguides.sfgate.com/many-watts-induction-stove-85380.html ConsumptionFridgeBigMin = 80 #W ConsumptionFridgeBigMax = 120 #W ConsumptionFridgeSmallMin = 50 #W ConsumptionFridgeSmallMax = 80 #W ConsumptionKettle = 2000 #W #White goods ConsumptionIron = 2000 #W ConsumptionVacuumcleaner = 1500 #W #House ConsumptionHouseVentilation = 50 #W #Household randomization #all values must be between 0-1000 familyOutingChanceMin = 10 #percentage familyOutingChanceMax = 20 #percentage personWeekdayActivityChanceMin = 20 #percentage personWeekdayActivityChanceMax = 30 #percentage personWeekendActivityChanceMin = 20 #percentage personWeekendActivityChanceMax = 30 #percentage householdList = [] #Select the types of households import households for i in range(0,1): householdList.append(households.HouseholdSingleWorker()) for i in range(0,2): householdList.append(households.HouseholdSingleRetired()) for i in range(0,1): householdList.append(households.HouseholdDualWorker(True)) for i in range(0,1): householdList.append(households.HouseholdDualWorker(False)) for i in range(0,2): householdList.append(households.HouseholdDualRetired()) for i in range(0,2): householdList.append(households.HouseholdFamilyDualWorker(True)) for i in range(0,1): householdList.append(households.HouseholdFamilyDualWorker(False))"},{"prompt":"Create a Python program to run sentiment analysis on tweets. The program should use the Twitter API to fetch tweets from a given keyword and then calculate the sentiment score (between 1 to 1) for each tweet. specific keyword = Python programming","completion":"import tweepy from textblob import TextBlob consumer_key='XXXX' consumer_secret='XXXX' access_token='XXXX' access_token_secret='XXXX' auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) api = tweepy.API(auth) public_tweets = api.search(q='Python programming') for tweet in public_tweets: print(tweet.text) analysis = TextBlob(tweet.text) print(analysis.sentiment)"},{"prompt":"Automate a process using an AI model in Python to determine if an email is spam or not.","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import confusion_matrix # Load data data = pd.read_csv('data.csv') # Separate labels and features X = data.iloc[:, :-1].values y = data.iloc[:, -1].values # Split the dataset into training and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train the model model = MultinomialNB() model.fit(X_train, y_train) # Test the model y_pred = model.predict(X_test) # Calculate accuracy accuracy = model.score(X_test, y_test) print('Model accuracy is:', round(accuracy*100, 2), '%', sep='') # Print confusion matrix cm = confusion_matrix(y_test, y_pred) print('Confusion matrix:') print(cm)"},{"prompt":"Write a python program to reverses a list while preserving the order of the elements lst = [1,2,3,4,5]","completion":"lst.reverse() print(lst) #output: [5,4,3,2,1]"},{"prompt":"Create a function named \`parse_file\` that takes a parameter named \`datafile\`. The function should read the input \`datafile\` line by line, and for the first 10 lines (not including the header) split each line on , and then for each line, create a dictionary where the key is the header title of the field, and the value is the value of that field in the row. The function should return a list of dictionaries, each data line in the file being a single list entry. Field names and values should not contain extra whitespace, like spaces or newline characters. You can use the Python string method \`strip()\` to remove the extra whitespace. The returned list should have 10 entries. Finally, write a test function named \`test\` that tests the implementation of the \`parse_file\` function.","completion":"# Your task is to read the input DATAFILE line by line, and for the first 10 lines (not including the header) # split each line on \\",\\" and then for each line, create a dictionary # where the key is the header title of the field, and the value is the value of that field in the row. # The function parse_file should return a list of dictionaries, # each data line in the file being a single list entry. # Field names and values should not contain extra whitespace, like spaces or newline characters. # You can use the Python string method strip() to remove the extra whitespace. # You have to parse only the first 10 data lines in this exercise, # so the returned list should have 10 entries! import os DATADIR = \\"\\" DATAFILE = \\"beatles-diskography.csv\\" # -*- coding: utf-8 -*- def parse_file(datafile): data = [] with open(datafile, \\"r\\") as f: cnt = 0 key_list = [] value_list = [] for line in f: #print line if cnt == 0: key_list = line.strip().split(',') else: value_list = line.strip().split(',') if cnt != 0: data_dict = {} for i in xrange(len(key_list)): data_dict[key_list[i]] = value_list[i] data.append(data_dict) cnt += 1 if cnt > 10: break return data def test(): # a simple test of your implemetation datafile = os.path.join(DATADIR, DATAFILE) d = parse_file(datafile) firstline = {'Title': 'Please Please Me', 'UK Chart Position': '1', 'Label': 'Parlophone(UK)', 'Released': '22 March 1963', 'US Chart Position': '-', 'RIAA Certification': 'Platinum', 'BPI Certification': 'Gold'} tenthline = {'Title': '', 'UK Chart Position': '1', 'Label': 'Parlophone(UK)', 'Released': '10 July 1964', 'US Chart Position': '-', 'RIAA Certification': '', 'BPI Certification': 'Gold'} assert d[0] == firstline assert d[9] == tenthline test()"},{"prompt":"Develop an algorithm in Python to find the minimum number of coins needed to make change for a given amount n = 5","completion":"def minCoinChange(n): coins = [1, 2, 5] mins = [0]+ [float('inf')]*n for c in coins: for i in range(c, n+1): mins[i] = min(mins[i], mins[i-c]+1) return mins[n] print(minCoinChange(n))"},{"prompt":"Generate a python class for a linked list.","completion":"class LinkedList: def __init__(self, value=None): self.value = value self.next = None def append(self, value): if self.value is None: self.value = value return temp = self while temp.next is not None: temp = temp.next temp.next = LinkedList(value)"},{"prompt":"Create a function in Python to delete an element from a linked list given its position.","completion":"def deleteNode(head, position): # If linked list is empty if head == None: return # Store head node temp = head # If head needs to be removed if position == 0: head = temp.next temp = None return head # Find previous node of the node to be deleted for i in range(position-1): temp = temp.next if temp is None: break # if position is more than number of nodes if temp is None: return # Node temp.next is the node to be deleted # store pointer to the next of node to be deleted next = temp.next.next # Unlink the node from linked list temp.next = None temp.next = next return head"},{"prompt":"Create a Python program to compare two strings to determine the number of characters which are different. Not applicable","completion":"def compareStrings(str1, str2): count = 0 for i in range(min(len(str1), len(str2))): if str1[i] != str2[i]: count += 1 # if the strings are different lengths, add the remaining characters from the longer string to the count if len(str1) > len(str2): count += len(str1) - len(str2) elif len(str2) > len(str1): count += len(str2) - len(str1) return count"},{"prompt":"Write a subroutine to find the length of a string in Python.","completion":"def find_string_length(string): length = 0 for c in string: length += 1 return length # example str = \\"Hello world!\\" print(find_string_length(str))"},{"prompt":"Create a Python function that takes an array of strings and finds the longest string. [Hello, world, Hi, there]","completion":"def find_longest_string(arr): longest_string = \\"\\" for s in arr: if len(s) > len(longest_string): longest_string = s return longest_string string_array = [\\"Hello\\", \\"world\\", \\"Hi\\", \\"there\\"] print(find_longest_string(string_array))"},{"prompt":"Develop a program to print all unique strings from a given array of strings [Hello, World, Hello, Python]","completion":"def unique_strings(strings): unique_strings = [] for string in strings: if string not in unique_strings: unique_strings.append(string) return unique_strings strings = [\\"Hello\\", \\"World\\", \\"Hello\\", \\"Python\\"] result = unique_strings(strings) print(result)"},{"prompt":"Write a Python program to check if a given array contains a pair of elements whose sum is equal to a given number. [2, 4, 6, 5], 8","completion":"def check_pair(arr, sum): s = set() for item in arr: target = sum - item if(target in s): return True s.add(item) return False print(check_pair([2, 4, 6, 5], 8))"},{"prompt":"Create a function in Python to compute the sum of all the natural numbers in a given range. start = 1 end = 10","completion":"def sum_natural_numbers(start, end): \\"\\"\\" Computes the sum of all natural numbers in a given range. Parameters: start (int): start of the range end (int): end of the range Returns: int: the sum of the natural numbers in the range \\"\\"\\" total = 0 for i in range(start, end+1): total += i return total"},{"prompt":"Optimize this Python code to reduce its runtime complexity. def foo(l1, l2): result = [] for i in l1: for j in l2: result.append(i + j) return resul","completion":"def foo(l1, l2): result = [i + j for i in l1 for j in l2] return result"},{"prompt":"Create a basic graphical user interface (GUI) using the Tkinter library in Python. The application should have basic widgets like Label, Entry, and Button which when clicked displays a message. Not applicable","completion":"import tkinter # Create the main window window = tkinter.Tk() # Set window title window.title('My Application') # Create a Label lbl = tkinter.Label(window, text =\\"Hello World!\\") # Set the position of Label lbl.grid(column = 0, row = 0) # Create a button btn = tkinter.Button(window, text =\\"Click Me\\") # Set the position of button btn.grid(column = 1, row = 0) # Create an event handler for button click def btn_clicked(): lbl.configure(text =\\"You clicked the button!\\") # Add event handler for button click btn.configure(command =btn_clicked) # Just to keep window open window.mainloop()"},{"prompt":"Write a Python script that finds and prints anagrams in a given text mister, buster, tired, tries, mines","completion":"from collections import defaultdict # Create dictionary to hold all anagrams anagrams = defaultdict(list) # Loop through each word for word in [\\"mister\\", \\"buster\\", \\"tired\\", \\"tries\\", \\"mines\\"]: # Sort all characters sorted_word = ''.join(sorted(word)) # Add word to anagrams list anagrams[sorted_word].append(word) # Print all anagrams for anagram in anagrams.values(): print(*anagram, sep=' ')"},{"prompt":"Write a forloop in python which prints the first 10 perfect squares.","completion":"for i in range(10): print(i*i, end = \\" \\")"},{"prompt":"Generate a 5digit pin code using a Python program.","completion":"import random def generate_pin(): # generates a 5 digit pin pin = \\"\\" for i in range(5): pin += str(random.randint(0,9)) return pin pin = generate_pin() print(\\"Generated pin is:\\", pin)"},{"prompt":"Create a Machine Learning model in Python that uses a Logistic Regression algorithm to predict the outcome of a given input. The dataset contains 4Features: Gender, Age, Married, and Salary","completion":"import pandas as pd from sklearn.model_selection import train_test_split # Read the dataset df = pd.read_csv('data.csv') # Define the features and labels X = df[['Gender', 'Age', 'Married', 'Salary']] y = df['Outcome'] # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Create the logistic regression model from sklearn.linear_model import LogisticRegression logreg = LogisticRegression() logreg.fit(X_train, y_train) # Make predictions y_pred = logreg.predict(X_test)"},{"prompt":"Generate a program to generate encryption keys from a string using Python. Not applicable","completion":"import hashlib # define the input string input_string = 'ExampleString' # generate a key key = hashlib.sha256(input_string.encode()).hexdigest() # output the key print('Encryption key:', key)"},{"prompt":"Write a function in Python to generate a histogram from a list of values. data = [18, 11, 22, 20, 44, 19, 22, 11, 20]","completion":"import matplotlib.pyplot as plt def generateHistogram(data): plt.hist(data, bins='auto') plt.title(\\"Histogram\\") plt.xlabel('Values') plt.ylabel('Number of Occurrences') plt.show() generateHistogram(data)"},{"prompt":"Optimize the following function in Python so that it runs faster: def three_times_sum(a,b,c): total = a + b total += c return total","completion":"def three_times_sum(a, b, c): return a + b + c"},{"prompt":"Generate code using a Python function to create a new dictionary object from an existing dictionary by creating a new dictionary containing only the keyvalue pairs whose keys start with a specific prefix. dict_data = { key1: value1, key2: value2, key3: value3, prefix_key1: value4, prefix_key2: value5 } prefix = prefix_","completion":"def get_dict_with_prefix(dict_data, prefix): new_dict = {} for key, value in dict_data.items(): if key.startswith(prefix): new_dict[key] = value return new_dict dict_data = { \\"key1\\": \\"value1\\", \\"key2\\": \\"value2\\", \\"key3\\": \\"value3\\", \\"prefix_key1\\": \\"value4\\", \\"prefix_key2\\": \\"value5\\" } prefix = \\"prefix_\\" new_dict = get_dict_with_prefix(dict_data, prefix) print(new_dict) # Output: {'prefix_key1': 'value4', 'prefix_key2': 'value5'}"},{"prompt":"Create a Python script to compare two sets of data and print the differences. set1 = [1, 2, 3, 4, 5] set2 = [2, 4, 6, 8, 10]","completion":"set1 = [1, 2, 3, 4, 5] set2 = [2, 4, 6, 8, 10] difference = [] for i in set1: if i not in set2: difference.append(i) print(f\\"The difference between set1 and set2 is: {difference}\\")"},{"prompt":"Create an optimized Python program to print all prime numbers in a given range. 415","completion":"def is_prime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True start = 4 end = 15 for num in range(start, end+1): if is_prime(num): print(num)"},{"prompt":"You need to write a program in Python that takes a string and replaces all the vowels in it with underscores. Hello World","completion":"def replace_vowels(str): result = \\"\\" for c in str: if c.lower() in ['a', 'e', 'i', 'o', 'u']: result += '_' else: result += c return result result = replace_vowels(\\"Hello World\\") print(result)"},{"prompt":"Convert the following for loop into a recursive function in Python. for i in range(5): print(i)","completion":"def printRange(start, end): if start == end: return print(start) printRange(start+1, end) printRange(0, 5)"},{"prompt":"Construct a program in Python that determines the largest prime factor of a number. number = 300","completion":"def find_largest_prime_factor(number): i = 2 while i < number // 2: if number % i == 0: number = number // i i = 2 else: i += 1 return number print(find_largest_prime_factor(300))"},{"prompt":"Create a HTML page which displays your favorite programming language.","completion":"<!DOCTYPE html> <html> <head> <title>My Favorite Programming Language</title> </head> <body> <h1>My favorite programming language is Python!</h1> </body> </html>"},{"prompt":"Using Python, write a program to tokenize a given string. This is a sentence","completion":"import re def tokenize(s): tokens = re.findall(r'w+|[^ws]', s, flags=re.UNICODE) return tokens print(tokenize(\\"This is a sentence\\"))"},{"prompt":"Create a program in Python using the Flask framework that displays a page with a button, and when the button is pressed, it sends a notification to the user's Google Calendar. Not applicable","completion":"from flask import Flask, render_template from googleapiclient.discovery import build app = Flask(__name__) @app.route('/') def index(): return render_template('index.html') @app.route('/notify') def notify(): # Create a Google Calendar service object. service = build('calendar', 'v3') # Create the notification. notification = { 'type': 'notification', 'title': 'Reminder', 'body': 'Don't forget to do your task!' } service.events().insert(calendarId='primary', body=notification).execute() return 'Reminder set successfully!' if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a python program to find if a number is a prime number 15","completion":"def is_prime(num): for i in range(2, num): if not num % i: return False return True num = 15 if is_prime(num): print(\\"The number is prime\\") else: print(\\"The number is not prime\\")"},{"prompt":"Write a python program to filter a list of strings and return only those which contain the given substring. [Hello, World, Hey], Substring: or","completion":"def filter_strings(lst, substring): filtered_lst = [] for string in lst: if substring in string: filtered_lst.append(string) return filtered_lst print(filter_strings([\\"Hello\\", \\"World\\", \\"Hey\\"], \\"or\\"))"},{"prompt":"Evaluate the following Python program and determine its output. arr = [20, 35, 10, 47]","completion":"[20, 35, 10, 47]"},{"prompt":"Write a Python script to scrape the current market price of a given stock and store the data into a MongoDB database. Stock Name: Twitter","completion":"\\"\\"\\" Scrape the current market price of Twitter stock and store the data into a MongoDB database \\"\\"\\" import requests from pymongo import MongoClient def get_price(stock_name): # request the data response = requests.get(f\\"https://finance.yahoo.com/quote/{stock_name}?p={stock_name}\\") # parse the response data = response.json() # get the price return data['chart']['result'][0]['meta']['regularMarketPrice'] if __name__ == \\"__main__\\": # connect to the MongoDB database client = MongoClient() db = client['stocks'] # get the stock name from user stock_name = input(\\"Stock Name: \\").upper() # get the stock price price = get_price(stock_name) # store the data into MongoDB db.stocks.insert_one({'stock':stock_name, 'price':price}) print('Data stored successfully!')"},{"prompt":"Create a Python class called Project with various properties and methods for managing a Python project. The class should have methods for adding and removing packages from the Pipfile, creating a Pipfile, and writing data out as TOML. It should also have properties for accessing information about the project, such as the project name, the location of the virtual environment, and the location of the Pipfile. Additionally, the class should have properties for accessing information about the project's dependencies, such as a list of all packages, a list of packages for piptools to","completion":"# -*- coding: utf-8 -*- import json import os import re import sys import base64 import hashlib import contoml import delegator import pipfile import toml from .utils import ( mkdir_p, convert_deps_from_pip, pep423_name, recase_file, find_requirements, is_file, is_vcs, python_version, cleanup_toml, is_installable_file, is_valid_url ) from .environments import PIPENV_MAX_DEPTH, PIPENV_VENV_IN_PROJECT from .environments import PIPENV_VIRTUALENV, PIPENV_PIPFILE if PIPENV_PIPFILE: if not os.path.isfile(PIPENV_PIPFILE): raise RuntimeError('Given PIPENV_PIPFILE is not found!') else: PIPENV_PIPFILE = os.path.abspath(PIPENV_PIPFILE) class Project(object): \\"\\"\\"docstring for Project\\"\\"\\" def __init__(self, chdir=True): super(Project, self).__init__() self._name = None self._virtualenv_location = None self._download_location = None self._proper_names_location = None self._pipfile_location = None self._requirements_location = None self._original_dir = os.path.abspath(os.curdir) # Hack to skip this during pipenv run, or -r. if ('run' not in sys.argv) and chdir: try: os.chdir(self.project_directory) except (TypeError, AttributeError): pass def path_to(self, p): \\"\\"\\"Returns the absolute path to a given relative path.\\"\\"\\" if os.path.isabs(p): return p return os.sep.join([self._original_dir, p]) def _build_package_list(self, package_section): \\"\\"\\"Returns a list of packages for pip-tools to consume.\\"\\"\\" ps = {} # TODO: Separate the logic for showing packages from the filters for supplying pip-tools for k, v in self.parsed_pipfile.get(package_section, {}).items(): # Skip editable VCS deps. if hasattr(v, 'keys'): # When a vcs url is gven without editable it only appears as a key # Eliminate any vcs, path, or url entries which are not editable # Since pip-tools can't do deep resolution on them, even setuptools-installable ones if (is_vcs(v) or is_vcs(k) or (is_installable_file(k) or is_installable_file(v)) or any((prefix in v and (os.path.isfile(v[prefix]) or is_valid_url(v[prefix]))) for prefix in ['path', 'file'])): # If they are editable, do resolve them if 'editable' not in v: continue else: ps.update({k: v}) else: ps.update({k: v}) else: # Since these entries have no attributes we know they are not editable # So we can safely exclude things that need to be editable in order to be resolved # First exclude anything that is a vcs entry either in the key or value if not (any(is_vcs(i) for i in [k, v]) or # Then exclude any installable files that are not directories # Because pip-tools can resolve setup.py for example any(is_installable_file(i) for i in [k, v]) or # Then exclude any URLs because they need to be editable also # Things that are excluded can only be 'shallow resolved' any(is_valid_url(i) for i in [k, v])): ps.update({k: v}) return ps @property def name(self): if self._name is None: self._name = self.pipfile_location.split(os.sep)[-2] return self._name @property def pipfile_exists(self): return bool(self.pipfile_location) @property def required_python_version(self): if self.pipfile_exists: required = self.parsed_pipfile.get('requires', {}).get('python_full_version') if not required: required = self.parsed_pipfile.get('requires', {}).get('python_version') if required != \\"*\\": return required @property def project_directory(self): if self.pipfile_location is not None: return os.path.abspath(os.path.join(self.pipfile_location, os.pardir)) else: return None @property def requirements_exists(self): return bool(self.requirements_location) @property def virtualenv_exists(self): # TODO: Decouple project from existence of Pipfile. if self.pipfile_exists and os.path.exists(self.virtualenv_location): if os.name == 'nt': extra = ['Scripts', 'activate.bat'] else: extra = ['bin', 'activate'] return os.path.isfile(os.sep.join([self.virtualenv_location] + extra)) return False @property def virtualenv_name(self): # Replace dangerous characters into '_'. The length of the sanitized # project name is limited as 42 because of the limit of linux kernel # # 42 = 127 - len('/home//.local/share/virtualenvs//bin/python2') - 32 - len('-HASHHASH') # # 127 : BINPRM_BUF_SIZE - 1 # 32 : Maximum length of username # # References: # https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html # http://www.tldp.org/LDP/abs/html/special-chars.html#FIELDREF # https://github.com/torvalds/linux/blob/2bfe01ef/include/uapi/linux/binfmts.h#L18 sanitized = re.sub(r'[ \`!*@\\"rnt]', '_', self.name)[0:42] # Hash the full path of the pipfile hash = hashlib.sha256(self.pipfile_location.encode()).digest()[:6] encoded_hash = base64.urlsafe_b64encode(hash).decode() # If the pipfile was located at '/home/user/MY_PROJECT/Pipfile', # the name of its virtualenv will be 'my-project-wyUfYPqE' return sanitized + '-' + encoded_hash @property def virtualenv_location(self): # if VIRTUAL_ENV is set, use that. if PIPENV_VIRTUALENV: return PIPENV_VIRTUALENV # Use cached version, if available. if self._virtualenv_location: return self._virtualenv_location # The user wants the virtualenv in the project. if not PIPENV_VENV_IN_PROJECT: c = delegator.run('pew dir \\"{0}\\"'.format(self.virtualenv_name)) loc = c.out.strip() # Default mode. else: loc = os.sep.join(self.pipfile_location.split(os.sep)[:-1] + ['.venv']) self._virtualenv_location = loc return loc @property def virtualenv_src_location(self): loc = os.sep.join([self.virtualenv_location, 'src']) mkdir_p(loc) return loc @property def download_location(self): if self._download_location is None: loc = os.sep.join([self.virtualenv_location, 'downloads']) self._download_location = loc # Create the directory, if it doesn't exist. mkdir_p(self._download_location) return self._download_location @property def proper_names_location(self): if self._proper_names_location is None: loc = os.sep.join([self.virtualenv_location, 'pipenv-proper-names.txt']) self._proper_names_location = loc # Create the database, if it doesn't exist. open(self._proper_names_location, 'a').close() return self._proper_names_location @property def proper_names(self): with open(self.proper_names_location) as f: return f.read().splitlines() def register_proper_name(self, name): \\"\\"\\"Registers a proper name to the database.\\"\\"\\" with open(self.proper_names_location, 'a') as f: f.write('{0}n'.format(name)) @property def pipfile_location(self): if PIPENV_PIPFILE: return PIPENV_PIPFILE if self._pipfile_location is None: try: loc = pipfile.Pipfile.find(max_depth=PIPENV_MAX_DEPTH) except RuntimeError: loc = None self._pipfile_location = loc return self._pipfile_location @property def requirements_location(self): if self._requirements_location is None: try: loc = find_requirements(max_depth=PIPENV_MAX_DEPTH) except RuntimeError: loc = None self._requirements_location = loc return self._requirements_location @property def parsed_pipfile(self): # Open the pipfile, read it into memory. with open(self.pipfile_location) as f: contents = f.read() # If any outline tables are present... if ('[packages.' in contents) or ('[dev-packages.' in contents): data = toml.loads(contents) # Convert all outline tables to inline tables. for section in ('packages', 'dev-packages'): for package in data.get(section, {}): # Convert things to inline tables â fancy :) if hasattr(data[section][package], 'keys'): _data = data[section][package] data[section][package] = toml._get_empty_inline_table(dict) data[section][package].update(_data) # We lose comments here, but it's for the best.) try: return contoml.loads(toml.dumps(data, preserve=True)) except RuntimeError: return toml.loads(toml.dumps(data, preserve=True)) else: # Fallback to toml parser, for large files. try: return contoml.loads(contents) except Exception: return toml.loads(contents) @property def _pipfile(self): \\"\\"\\"Pipfile divided by PyPI and external dependencies.\\"\\"\\" pfile = self.parsed_pipfile for section in ('packages', 'dev-packages'): p_section = pfile.get(section, {}) for key in list(p_section.keys()): # Normalize key name to PEP 423. norm_key = pep423_name(key) p_section[norm_key] = p_section.pop(key) return pfile @property def settings(self): \\"\\"\\"A dictionary of the settings added to the Pipfile.\\"\\"\\" return self.parsed_pipfile.get('pipenv', {}) def update_settings(self, d): settings = self.settings changed = False for new in d: if new not in settings: settings[new] = d[new] changed = True if changed: p = self.parsed_pipfile p['pipenv'] = settings # Write the changes to disk. self.write_toml(p) @property def _lockfile(self): \\"\\"\\"Pipfile.lock divided by PyPI and external dependencies.\\"\\"\\" pfile = pipfile.load(self.pipfile_location) lockfile = json.loads(pfile.lock()) for section in ('default', 'develop'): lock_section = lockfile.get(section, {}) for key in list(lock_section.keys()): norm_key = pep423_name(key) lockfile[section][norm_key] = lock_section.pop(key) return lockfile @property def lockfile_location(self): return '{0}.lock'.format(self.pipfile_location) @property def lockfile_exists(self): return os.path.isfile(self.lockfile_location) @property def lockfile_content(self): with open(self.lockfile_location) as lock: return json.load(lock) @property def vcs_packages(self): \\"\\"\\"Returns a list of VCS packages, for not pip-tools to consume.\\"\\"\\" ps = {} for k, v in self.parsed_pipfile.get('packages', {}).items(): if is_vcs(v) or is_vcs(k): ps.update({k: v}) return ps @property def vcs_dev_packages(self): \\"\\"\\"Returns a list of VCS packages, for not pip-tools to consume.\\"\\"\\" ps = {} for k, v in self.parsed_pipfile.get('dev-packages', {}).items(): if is_vcs(v) or is_vcs(k): ps.update({k: v}) return ps @property def all_packages(self): \\"\\"\\"Returns a list of all packages.\\"\\"\\" p = dict(self.parsed_pipfile.get('dev-packages', {})) p.update(self.parsed_pipfile.get('packages', {})) return p @property def packages(self): \\"\\"\\"Returns a list of packages, for pip-tools to consume.\\"\\"\\" return self._build_package_list('packages') @property def dev_packages(self): \\"\\"\\"Returns a list of dev-packages, for pip-tools to consume.\\"\\"\\" return self._build_package_list('dev-packages') def touch_pipfile(self): \\"\\"\\"Simply touches the Pipfile, for later use.\\"\\"\\" with open('Pipfile', 'a'): os.utime('Pipfile', None) @property def pipfile_is_empty(self): if not self.pipfile_exists: return True with open(self.pipfile_location, 'r') as f: if not f.read(): return True return False def create_pipfile(self, python=None): \\"\\"\\"Creates the Pipfile, filled with juicy defaults.\\"\\"\\" data = { # Default source. u'source': [ {u'url': u'https://pypi.python.org/simple', u'verify_ssl': True, 'name': 'pypi'} ], # Default packages. u'packages': {}, u'dev-packages': {}, } # Default requires. if python: data[u'requires'] = {'python_version': python_version(python)[:len('2.7')]} self.write_toml(data, 'Pipfile') def write_toml(self, data, path=None): \\"\\"\\"Writes the given data structure out as TOML.\\"\\"\\" if path is None: path = self.pipfile_location try: formatted_data = contoml.dumps(data).rstrip() except Exception: for section in ('packages', 'dev-packages'): for package in data[section]: # Convert things to inline tables â fancy :) if hasattr(data[section][package], 'keys'): _data = data[section][package] data[section][package] = toml._get_empty_inline_table(dict) data[section][package].update(_data) formatted_data = toml.dumps(data).rstrip() formatted_data = cleanup_toml(formatted_data) with open(path, 'w') as f: f.write(formatted_data) @property def sources(self): if self.lockfile_exists: meta_ = self.lockfile_content['_meta'] sources_ = meta_.get('sources') if sources_: return sources_ if 'source' in self.parsed_pipfile: return self.parsed_pipfile['source'] else: return [{u'url': u'https://pypi.python.org/simple', u'verify_ssl': True, 'name': 'pypi'}] def get_source(self, name=None, url=None): for source in self.sources: if name: if source.get('name') == name: return source elif url: if source.get('url') in url: return source def destroy_lockfile(self): \\"\\"\\"Deletes the lockfile.\\"\\"\\" try: return os.remove(self.lockfile_location) except OSError: pass def remove_package_from_pipfile(self, package_name, dev=False): # Read and append Pipfile. p = self._pipfile package_name = pep423_name(package_name) key = 'dev-packages' if dev else 'packages' if key in p and package_name in p[key]: del p[key][package_name] # Write Pipfile. self.write_toml(recase_file(p)) def add_package_to_pipfile(self, package_name, dev=False): # Read and append Pipfile. p = self._pipfile # Don't re-capitalize file URLs or VCSs. converted = convert_deps_from_pip(package_name) converted = converted[[k for k in converted.keys()][0]] if not (is_file(package_name) or is_vcs(converted) or 'path' in converted): package_name = pep423_name(package_name) key = 'dev-packages' if dev else 'packages' # Set empty group if it doesn't exist yet. if key not in p: p[key] = {} package = convert_deps_from_pip(package_name) package_name = [k for k in package.keys()][0] # Add the package to the group. p[key][package_name] = package[package_name] # Write Pipfile. self.write_toml(p) def add_index_to_pipfile(self, index): \\"\\"\\"Adds a given index to the Pipfile.\\"\\"\\" # Read and append Pipfile. p = self._pipfile source = {'url': index, 'verify_ssl': True} # Add the package to the group. if 'source' not in p: p['source'] = [source] else: p['source'].append(source) # Write Pipfile. self.write_toml(p) def recase_pipfile(self): self.write_toml(recase_file(self._pipfile))"},{"prompt":"Write a Python program to generate a script for deploying a web application. The web application contains one page with HTML, Javascript and a MySQL database.","completion":"#!/usr/bin/python import os # Install Apache Web Server os.system('sudo apt-get install apache2') # Install MySQL server os.system('sudo apt-get install mysql-server') # Create database os.system('mysql -u root -p create database mydb') # Create user os.system('mysql -u root -p grant all privileges on mydb.* to username@localhost identified by 'password'; # Copy html file html_file='index.html' os.system('cp ' + html_file + ' /var/www/html/') # Create and run CGI script cgi_file='my_cgi.py' os.system('cp ' + cgi_file + ' /usr/lib/cgi-bin/') os.system('sudo chmod 755 /usr/lib/cgi-bin/'+cgi_file) # Create connection file conn_file='my_conn.py' os.system('cp ' + conn_file + ' /usr/lib/')"},{"prompt":"mplement a REST API endpoint in Python Flask to get the number of tweets for a particular hashtag. Hashtag (string): #python","completion":"import tweepy import json import flask app = flask.Flask(__name__) CONSUMER_KEY = '<consumer key>' CONSUMER_SECRET = '<consumer secret>' ACCESS_TOKEN = '<access token>' ACCESS_TOKEN_SECRET = '<token secret>' @app.route('/tweets/string:hashtag') def get_tweets_count(hashtag): auth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET) auth.set_access_token(ACCESS_TOKEN, ACCESS_TOKEN_SECRET) api = tweepy.API(auth) tweets_count = 0 for tweet in tweepy.Cursor(api.search, q=hashtag, rpp=100).items(100): tweets_count += 1 response = {'count': tweets_count} return flask.jsonify(response) if __name__ == '__main__': app.run()"},{"prompt":"Construct a loop in Python to remove all even numbers from a list.","completion":"nums = [1, 2, 3, 4, 5, 6, 7, 8] odd_nums = [num for num in nums if num % 2 != 0] print(odd_nums)"},{"prompt":"Write a Python program to insert an element at the beginning of a given list.","completion":"def insert_at_beginning(list, element): list.insert(0, element) return list"},{"prompt":"Write a Python program to display a histogram of arbitrary data. The following list of numbers [1, 4, 6, 3, 8, 3, 7, 9, 1].","completion":"import matplotlib.pyplot as plt # arbitrary data data = [1, 4, 6, 3, 8, 3, 7, 9, 1] # create bins of values bins = [0, 2, 4, 6, 8, 10] # create the histogram plt.hist(data, bins, histtype='bar', rwidth=0.8) # label the axes plt.xlabel('Data Values') plt.ylabel('Number of Occurrences') # add title plt.title('Histogram of Data') # display the histogram plt.show()"},{"prompt":"Create a program in Python to reverse a string using a recursive algorithm. string = Hello world!","completion":"def reverse_string_recursive(string: str) -> str: if len(string) == 0: return string else: return reverse_string_recursive(string[1:]) + string[0] print(reverse_string_recursive(string)) # Output: \\"!dlrow olleH\\""},{"prompt":"Create a program to display a list of words and respective scores that are sorted in descending order scores = {cat: 5, dog: 2, elephant: 7, tiger: 3}","completion":"# Python 3 program to print the list of words and their scores # sorted in descending order of scores # function is used to sort the list of words # according to the scores in decreasing order def sort_list(list): sorted_list = sorted(list, key=lambda x: x[1], reverse = True) return sorted_list # Driver code scores = {\\"cat\\": 5, \\"dog\\": 2, \\"elephant\\": 7, \\"tiger\\": 3} # Creating a list of tuples and sorting them list = [] for word, score in scores.items(): list.append((word, score)) # Printing the modified list sorted_list = sort_list(list) for word,score in sorted_list: print(\\"Word: {0}, Score: {1}\\".format(word, score))"},{"prompt":"Generate Python code that will update the values of a list A list of integers lst = [5, 10, 10, 15, 25]. Update all values that are larger than 10 by subtracting 5.","completion":"lst = [x if x <= 10 else x - 5 for x in lst]"},{"prompt":"Write a Python script to get the nth Fibonacci number","completion":"def get_fibonacci_number(n): if n == 0: return 0 elif n == 1: return 1 else: return get_fibonacci_number(n-1) + get_fibonacci_number(n-2)"},{"prompt":"Construct an objectoriented Python program to count the number of unique words in a given sentence. sentence = Hello world. This is a sample sentence.","completion":"class CountUniqueWords: def __init__(self, sentence): self.sentence = sentence self.unique_words = [] def count_unique_words(self): words = self.sentence.split() for word in words: if word not in self.unique_words: self.unique_words.append(word) return len(self.unique_words) sentence = \\"Hello world. This is a sample sentence.\\" c = CountUniqueWords(sentence) print(c.count_unique_words())"},{"prompt":"Create a Python program to log the current time (in the given timezone) every 20 minutes. Timezone: America/Los_Angele","completion":"import time import datetime from pytz import timezone def logtime(tz): while True: currtime = datetime.datetime.now(tz) print(\\"The current time is\\", currtime.strftime(\\"%H:%M:%S\\")) time.sleep(60 * 20) logtime(timezone('America/Los_Angeles'))"},{"prompt":"Create a function in Python that prints out all the odd numbers from a given list. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def print_odd_numbers(lst): odd_nums = [] for num in lst: if num % 2 != 0: odd_nums.append(num) print(odd_nums) print_odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"},{"prompt":"Create a web scraper using Python and the requests library to scrape data from a specific website. Example website URL: https://www.example.com","completion":"import requests # Specify your website URL url = 'https://www.example.com' # Send a request to the website response = requests.get(url) # Check the status of the response if response.status_code == 200: # Parse the HTML of the response response_html = response.content # Do something with the HTML print(response_html)"},{"prompt":"Write a Python program for predicting the score of a tennis match given the probabilities of various outcomes. An array of 8 floats representing the probabilities for a player to win a point on their serve, break the opponent's serve, win a game on their serve and break the opponent's serve.","completion":"import numpy as np def predict_match_score(probabilities): p_serve_win = probabilities[0] p_opp_serve_win = probabilities[1] p_serve_game_win = probabilities[2] p_opp_serve_game_win = probabilities[3] expected_score_serve = p_serve_game_win * (4*p_serve_win + 3*p_opp_serve_win) expected_score_opp_serve = p_opp_serve_game_win*(4*p_opp_serve_win + 3*p_serve_win) total_expected_score = expected_score_serve + expected_score_opp_serve return total_expected_score probabilities = np.random.random(4) print(predict_match_score(probabilities))"},{"prompt":"Design a Python program for implementing a stack with the following methods. pop(), push(x), and is_empty().","completion":"class Stack: def __init__(self): self.items = [] def push(self, x): self.items.append(x) def pop(self): if not self.is_empty(): return self.items.pop() else: return None def is_empty(self): return len(self.items) == 0"},{"prompt":"Sort the given array in ascending order. [3, 5, 4, 1, 6]","completion":"# Bubble sort function in Python def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # Compare the adjacent elements if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Input list arr = [3, 5, 4, 1, 6] # Function call bubble_sort(arr) # Print the sorted array print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]), # Output: 1 3 4 5 6"},{"prompt":"Generate a Python program to print the first 5 prime numbers.","completion":"# Python program to print the first # 5 prime numbers # function to generate and print first # 5 prime numbers def display_first_five_primes(): print(\\"The first five prime numbers are:\\") primenums = [2] num = 3 while len(primenums) < 5: for p in primenums: if (num % p) == 0: break else: primenums.append(num) num += 1 for i in primenums: print(i) # Driver code if __name__ == '__main__': display_first_five_primes()"},{"prompt":"Write a Python function to calculate factorial using recursion.","completion":"def factorial(n): if n == 0: return 1 else: return n*factorial(n-1)"},{"prompt":"mplement a text classification model in Python using the Keras library. The model should be able to classify a sentence as expressing positive or negative sentiment. corpus = [It is a wonderful day today,the weather is extremely bad today] labels = [1, 0]","completion":"import numpy as np from keras.preprocessing.text import Tokenizer from keras.preprocessing import sequence from keras.models import Sequential from keras.layers import Dense, Embedding, LSTM corpus = [\\"It is a wonderful day today\\", \\"the weather is extremely bad today\\"] labels = np.array([1, 0]) # tokenize corpus tokenizer = Tokenizer() tokenizer.fit_on_texts(corpus) X = tokenizer.texts_to_sequences(corpus) X = sequence.pad_sequences(X, maxlen=10) # build model model = Sequential() model.add(Embedding(len(tokenizer.word_index)+1, 100, input_length=10)) model.add(LSTM(100, dropout=0.2, recurrent_dropout=0.2)) model.add(Dense(1, activation='sigmoid')) model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # train the model model.fit(X, labels, batch_size=1, epochs=20) # test the model test_sentence = \\"today the weather is horrible\\" test_tokenized = tokenizer.texts_to_sequences([test_sentence]) test_tokenized = sequence.pad_sequences(test_tokenized, maxlen=10) predict = model.predict(test_tokenized) print(predict[0])"},{"prompt":"Modify the given Python loop to also multiply the numbers by 2 at the same time. numbers = [1, 2, 3 , 4] for num in numbers: print(num)","completion":"numbers = [1, 2, 3 , 4] for num in numbers: print(num*2)"},{"prompt":"Write a script in Python to sort a dictionary by value. Input dictionary: {'name': 'John', 'age': 26, 'salary': 3000}","completion":"# Function to sort dictionary by value def sort_dict(d): # Create a list of tuples # sorted by index 1 i.e. value field l = [(k, d[k]) for k in sorted(d, key = d.get, reverse = True)] # Create a dictionary from the list # of tuples for sorted value od = OrderedDict(l) return od # Sample Dictionary d = {'name':'John', 'age':26, 'salary':3000} # Calling sort_dict function print(sort_dict(d))"},{"prompt":"Write a Python program to remove all instances of a word from a given sentence. sentence = This is a sentence with some words to be removed. word = removed","completion":"def remove_word(sentence, word): new_sentence = [] words = sentence.split() for w in words: if w != word: new_sentence.append(w) return \\" \\".join(new_sentence)"},{"prompt":"Write a function in Python to convert a given time in hours, minutes and seconds, to a total number of seconds. hours: 2 minutes: 3 seconds: 4","completion":"def time_to_seconds(hours, minutes, seconds): return (hours * 3600) + (minutes * 60) + seconds result = time_to_seconds(2, 3, 4) print(result)"},{"prompt":"Create a simple Python web server that responds to requests with a static page. The page should display the current date and time. Not applicable","completion":"import http.server import datetime port = 8888 class MyHandler(http.server.BaseHTTPRequestHandler): def do_GET(self): self.send_response(200) self.send_header('Content-type', 'text/html') self.end_headers() self.wfile.write((\\"\\"\\" <html> <head> <title>Static page</title> </head> <body> <p>The time is: {}</p> </body> </html> \\"\\"\\".format(datetime.datetime.now())).encode()) try: server = http.server.HTTPServer(('', port), MyHandler) print('Server running at localhost:{}'.format(port)) server.serve_forever() except KeyboardInterrupt: print('nServer stopped') server.socket.close()"},{"prompt":"Develop a heuristic algorithm that plays tictactoe in Python.","completion":"def tic_tac_toe_heuristic(board): # check winning condition win_conditions = ((0,1,2), (3,4,5), (6,7,8), (0,3,6), (1,4,7), (2,5,8), (0,4,8), (2,4,6)) winner = 0 for each in win_conditions: if board[each[0]] == board[each[1]] == board[each[2]] == 1: winner = 1 elif board[each[0]] == board[each[1]] == board[each[2]] == 2: winner = 2 # when the game is over if winner != 0: return winner # evaluate each position max_eval = -2 best_move = None for move in board: if move == 0: board[move] = 1 eval = minimax(board, 0, False) board[move] = 0 if eval > max_eval: max_eval = eval best_move = move return best_move def minimax(board, depth, isMaximizing): # check winning condition win_conditions = ((0,1,2), (3,4,5), (6,7,8), (0,3,6), (1,4,7), (2,5,8), (0,4,8), (2,4,6)) winner = 0 for each in win_conditions: if board[each[0]] == board[each[1]] == board[each[2]] == 1: winner = 1 elif board[each[0]] == board[each[1]] == board[each[2]] == 2: winner = 2 # when the game is over if winner != 0: return (-1)**(winner == 2)*10/depth # when there is no valid move if sum((x != 0) for x in board) == 9: return 0 if isMaximizing: best_eval = -10 for move in board: if move == 0: board[move] = 1 eval = minimax(board, depth + 1, False) board[move] = 0 best_eval = max(best_eval, eval) return best_eval else: best_eval = 10 for move in board: if move == 0: board[move] = 2 eval = minimax(board, depth + 1, True) board[move] = 0 best_eval = min(best_eval, eval) return best_eval board = [0, 0, 0, 0, 0, 0, 0, 0, 0] best_move = tic_tac_toe_heuristic(board) print(best_move)"},{"prompt":"Write a Python program to implement a greedy algorithm to solve the given scheduling problem. There are N jobs with different start and end time. Find the optimal sequence of jobs with minimum total profit. Jobs = [1, 2, 3, 4] Start = [3, 4, 1, 5] End = [6, 5, 9, 7] Profit = [2, 3, 5, 4]","completion":"#Greedy algorithm to solve scheduling problem #Optimal order order = [] #Sort jobs according to end time pro_idx = [i[0] for i in sorted(enumerate(End), key=lambda x:x[1])] #Calculate result totalProfit = 0 curr_time = 0 for i in range(len(pro_idx)): #Choose job in optimal order idx = pro_idx[i] #Check if job starts later than current time start = Start[idx] if start >= curr_time: order.append(idx + 1) curr_time = End[idx] totalProfit += Profit[idx] #Print results print(\\"Optimal order:\\", order) print(\\"Maximum profit:\\", totalProfit)"},{"prompt":"Build a GUI application in Python to take user input and display a message.","completion":"import tkinter as tk root = tk.Tk() root.title(\\"GUI Application\\") tk.Label(root, text=\\"Enter your name:\\").grid(row=0, column=0, sticky=\\"W\\") name_entry = tk.Entry(root) name_entry.grid(row=0, column=1) def on_button_click(): name = name_entry.get() tk.Label(root, text=\\"Hello \\"+name).grid(row=1, column=1) tk.Button(root, text=\\"Click Me\\", command=on_button_click).grid(row=0, column=2) root.mainloop()"},{"prompt":"Write a Python program to generate a bar chart representing the monthly sales data for a small business. month = [Jan, Feb, Mar, Apr, May, Jun]; sales = [312, 443, 235, 564, 234, 431];","completion":"import matplotlib.pyplot as plt month = [\\"Jan\\", \\"Feb\\", \\"Mar\\", \\"Apr\\", \\"May\\", \\"Jun\\"] sales = [312, 443, 235, 564, 234, 431] plt.bar(month, sales) plt.xlabel(\\"Month\\") plt.ylabel(\\"Sales\\") plt.title(\\"Monthly Sales\\") plt.show()"},{"prompt":"Code a basic genetic algorithm in Python that solves a mathematical equation. Equation: x^2 + x = 13","completion":"import random # Define the equation def calc_fitness(x): return x**2 + x - 13 # Initialize the population population = [] for _ in range(10): population.append(random.uniform(0, 10)) # Define the mutation function def mutate(x): return x + random.uniform(-1, 1) # Perform genetic algorithm while True: # Calculate the fitness of each chromosome in the population population_fitness = [calc_fitness(x) for x in population] # Check if any chromosome matches the equation if 0 in population_fitness: break # Select the fittest chromosome fittest_idx = population_fitness.index(min(population_fitness)) fittest = population[fittest_idx] # Create a new generation by mutating the fittest chromosome new_generation = [mutate(fittest) for _ in range(10)] # Replace the old population with the new one population = new_generation # Print the fittest chromosome print(f'Solution: {fittest}')"},{"prompt":"Write a function in Python to check if an element is present in an array. arr = [1, 2, 3, 5, 7] element = 4","completion":"arr = [1, 2, 3, 5, 7] element = 4 def contains(arr, element): for e in arr: if e == element: return True return False result = contains(arr, element) print(result)"},{"prompt":"Write a Python program to print out all possible sums of two digits.","completion":"def two_sum_digits(): for i in range(0, 10): for j in range(0, 10): print(i + j)"},{"prompt":"Write a Python program to format a number with a given number of decimal places. number = 123.4567 decimal_places = 3","completion":"def format_number(number, decimal_places): return f\\"{number:.{decimal_places}f}\\""},{"prompt":"Construct an objectoriented Python model for a student database.","completion":"class Student: def __init__(self, name, student_id, courses): self.name = name self.student_id = student_id self.courses = courses class Course: def __init__(self, title, course_id, credits): self.title = title self.course_id = course_id self.credits = credits class Database: def __init__(self): self.students = [] self.courses = [] def add_student(self, student): self.students.append(student) def add_course(self, course): self.courses.append(course)"},{"prompt":"Create a Python program for extracting text from an online book. web address of the book (e.g. https://www.example.com/book.html)","completion":"import requests from bs4 import BeautifulSoup # Input web address of the book url = 'https://www.example.com/book.html' # Download the page page = requests.get(url) # Parse the HTML soup = BeautifulSoup(page.content, 'html.parser') # Extract the text text = soup.find_all('p') for p in text: print(p.text)"},{"prompt":"Create an objectoriented Python program which finds the most frequently occurring words in a given text. The program should take a string as input and return a list of strings containing the words and the count of their occurrences. This is a sentence. This is another sentence. This is the last sentence.","completion":"import collections def find_frequent_words(text): words = text.split() word_counts = collections.Counter(words) # Get the most frequent words most_frequent = word_counts.most_common() return most_frequent # Example output: [('This', 3), ('is', 3), ('a', 1), ('sentence.', 3), ......]"},{"prompt":"Create a function in Python to generate a 5x5 twodimensional array with random integers between 0 and 9. Not applicable","completion":"import random def generateArray(): arr = [[0 for i in range(5)] for j in range(5)] for i in range (5): for j in range (5): arr[i][j] = random.randint(0,9) return arr print(generateArray())"},{"prompt":"This code is a Python module for a Rapidgator.net hoster plugin. To use it, import the necessary modules and classes, and then create an instance of the \`RapidgatorNet\` class. The class has methods for handling premium and free downloads, as well as handling captchas. The \`getInfo\` function is used to create an instance of the \`RapidgatorNet\` class.","completion":"# -*- coding: utf-8 -*- import pycurl import re from module.common.json_layer import json_loads from module.network.HTTPRequest import BadHeader from module.plugins.internal.AdsCaptcha import AdsCaptcha from module.plugins.internal.ReCaptcha import ReCaptcha from module.plugins.internal.SolveMedia import SolveMedia from module.plugins.internal.SimpleHoster import SimpleHoster, create_getInfo class RapidgatorNet(SimpleHoster): __name__ = \\"RapidgatorNet\\" __type__ = \\"hoster\\" __version__ = \\"0.34\\" __pattern__ = r'http://(?:www.)?(rapidgator.net|rg.to)/file/w+' __config__ = [(\\"use_premium\\", \\"bool\\", \\"Use premium account if available\\", True)] __description__ = \\"\\"\\"Rapidgator.net hoster plugin\\"\\"\\" __license__ = \\"GPLv3\\" __authors__ = [(\\"zoidberg\\", \\"zoidberg@mujmail.cz\\"), (\\"chrox\\", None), (\\"stickell\\", \\"l.stickell@yahoo.it\\"), (\\"Walter Purcaro\\", \\"vuolter@gmail.com\\")] API_URL = \\"http://rapidgator.net/api/file\\" COOKIES = [(\\"rapidgator.net\\", \\"lang\\", \\"en\\")] NAME_PATTERN = r'<title>Download file (?P<N>.*)</title>' SIZE_PATTERN = r'File size:s*<strong>(?P<S>[d.,]+) (?P<U>[w^_]+)</strong>' OFFLINE_PATTERN = r'>(File not found|Error 404)' JSVARS_PATTERN = r's+vars*(startTimerUrl|getDownloadUrl|captchaUrl|fid|secs)s*=s*'?(.*?)'?;' PREMIUM_ONLY_PATTERN = r'You can download files up to|This file can be downloaded by premium only<' ERROR_PATTERN = r'You have reached your (?:daily|hourly) downloads limit' WAIT_PATTERN = r'(Delay between downloads must be not less than|Try again in).+' LINK_FREE_PATTERN = r'return '(http://w+.rapidgator.net/.*)';' RECAPTCHA_PATTERN = r'\\"http://api.recaptcha.net/challenge?k=(.*?)\\"' ADSCAPTCHA_PATTERN = r'(http://api.adscaptcha.com/Get.aspx[^\\"']+)' SOLVEMEDIA_PATTERN = r'http://api.solvemedia.com/papi/challenge.script?k=(.*?)\\"' def setup(self): if self.account: self.sid = self.account.getAccountInfo(self.user).get('sid', None) else: self.sid = None if self.sid: self.premium = True self.resumeDownload = self.multiDL = self.premium self.chunkLimit = 1 def api_response(self, cmd): try: json = self.load('%s/%s' % (self.API_URL, cmd), get={'sid': self.sid, 'url': self.pyfile.url}, decode=True) self.logDebug(\\"API:%s\\" % cmd, json, \\"SID: %s\\" % self.sid) json = json_loads(json) status = json['response_status'] msg = json['response_details'] except BadHeader, e: self.logError(\\"API: %s\\" % cmd, e, \\"SID: %s\\" % self.sid) status = e.code msg = e if status == 200: return json['response'] elif status == 423: self.account.empty(self.user) self.retry() else: self.account.relogin(self.user) self.retry(wait_time=60) def handlePremium(self, pyfile): self.api_data = self.api_response('info') self.api_data['md5'] = self.api_data['hash'] pyfile.name = self.api_data['filename'] pyfile.size = self.api_data['size'] self.link = self.api_response('download')['url'] def handleFree(self, pyfile): jsvars = dict(re.findall(self.JSVARS_PATTERN, self.html)) self.logDebug(jsvars) self.req.http.lastURL = pyfile.url self.req.http.c.setopt(pycurl.HTTPHEADER, [\\"X-Requested-With: XMLHttpRequest\\"]) url = \\"http://rapidgator.net%s?fid=%s\\" % ( jsvars.get('startTimerUrl', '/download/AjaxStartTimer'), jsvars['fid']) jsvars.update(self.getJsonResponse(url)) self.wait(jsvars.get('secs', 45), False) url = \\"http://rapidgator.net%s?sid=%s\\" % ( jsvars.get('getDownloadUrl', '/download/AjaxGetDownload'), jsvars['sid']) jsvars.update(self.getJsonResponse(url)) self.req.http.lastURL = pyfile.url self.req.http.c.setopt(pycurl.HTTPHEADER, [\\"X-Requested-With:\\"]) url = \\"http://rapidgator.net%s\\" % jsvars.get('captchaUrl', '/download/captcha') self.html = self.load(url) for _i in xrange(5): m = re.search(self.LINK_FREE_PATTERN, self.html) if m: self.link = m.group(1) break else: captcha = self.handleCaptcha() if not captcha: self.error(_(\\"Captcha pattern not found\\")) response, challenge = captcha.challenge() self.html = self.load(url, post={'DownloadCaptchaForm[captcha]': \\"\\", 'adcopy_challenge' : challenge, 'adcopy_response' : response}) if \\"The verification code is incorrect\\" in self.html: self.invalidCaptcha() else: self.correctCaptcha() else: self.error(_(\\"Download link\\")) def handleCaptcha(self): for klass in (AdsCaptcha, ReCaptcha, SolveMedia): inst = klass(self) if inst.detect_key(): return inst def getJsonResponse(self, url): res = self.load(url, decode=True) if not res.startswith('{'): self.retry() self.logDebug(url, res) return json_loads(res) getInfo = create_getInfo(RapidgatorNet)"},{"prompt":"This code is a Python script that can be used to build, lint, and compile a JavaScript library called GraphicsJS. To use this script, run it with the appropriate command line argument. The available commands are: without params: Prepares the environment, then lints and builds everything. contrib: Prepares the build environment. deps: Builds the ./src/deps.js file, which is needed to run the library in uncompiled mode. compile: Builds the library minified js to ./out/ directory. plain: Builds the library as one file prettyprinted js to ./out/ directory. lint: Lints library sources. autofix: Tries to fix lint errors in library sources. To use this script, run it with one of the above commands as a command line argument.","completion":"#!/usr/bin/env python # coding=utf-8 import os import sys import subprocess import urllib import zipfile import platform import shlex import time import json import datetime # ======================================================================================================================= # Project paths # ======================================================================================================================= # COMPILER_VERSION = '20161024' COMPILER_VERSION = '20180204' PROJECT_PATH = os.path.abspath(os.path.dirname(__file__)) CONTRIB_PATH = os.path.join(PROJECT_PATH, 'contrib') COMPILER_PATH = os.path.join(CONTRIB_PATH, 'compiler', 'closure-compiler-v%s.jar' % COMPILER_VERSION) SRC_PATH = os.path.join(PROJECT_PATH, 'src') OUT_PATH = os.path.join(PROJECT_PATH, 'out') CLOSURE_LIBRARY_PATH = os.path.join(CONTRIB_PATH, 'closure-library') CLOSURE_SOURCE_PATH = os.path.join(CLOSURE_LIBRARY_PATH, 'closure', 'goog') CLOSURE_LINTER_WRAPPER_PATH = os.path.join(CONTRIB_PATH, 'closure-linter-wrapper') CLOSURE_BIN_PATH = os.path.join(CLOSURE_LIBRARY_PATH, 'closure', 'bin') DEPS_WRITER_PATH = os.path.join(CLOSURE_BIN_PATH, 'build', 'depswriter.py') PYTHON = 'python' # ======================================================================================================================= # Synchronize contributions. # ======================================================================================================================= def __has_closure_library(): return os.path.exists(CLOSURE_LIBRARY_PATH) def __has_closure_compiler(): return os.path.exists(COMPILER_PATH) def __has_closure_linter_wrapper(): return os.path.exists(CLOSURE_LINTER_WRAPPER_PATH) def __has_closure_linter(): has_lint = True try: subprocess.Popen(['gjslint'], shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) except StandardError: has_lint = False return has_lint def __ensure_dir_exists(path): if not os.path.exists(path): os.mkdir(path) def __need_sync_contrib(): return not __has_closure_library() or not __has_closure_compiler() or not __has_closure_linter_wrapper() or not __has_closure_linter() def __sync_contrib(): t = time.time() __ensure_dir_exists(CONTRIB_PATH) subprocess.call(['git', 'submodule', 'init']) subprocess.call(['git', 'submodule', 'update']) # Download closure compiler if not os.path.exists(COMPILER_PATH): print 'Downloading Google Closure Compiler v.' + COMPILER_VERSION try: __download_and_unzip_from_http( \\"http://dl.google.com/closure-compiler/compiler-%s.zip\\" % COMPILER_VERSION, 'compiler' ) except StandardError as e: print e print 'Failed' return False # Install closure linter if not __has_closure_linter(): if not __install_closure_linter(): return False print 'Environment ready. Time spent: {:.3f}sn'.format(time.time() - t) return True def __download_and_unzip_from_http(from_url, dir_name): z_obj_path = os.path.join(CONTRIB_PATH, dir_name + '.zip') # download zip archive from url if not os.path.exists(z_obj_path): urllib.urlretrieve( from_url, z_obj_path ) # extract zip archive target_path = os.path.join(CONTRIB_PATH, dir_name) __ensure_dir_exists(target_path) z_obj = zipfile.ZipFile(z_obj_path) z_obj.extractall(path=target_path) z_obj.close() # remove archive file os.remove(z_obj_path) return True def __install_closure_linter(): print 'Installing Google Closure Linter v.2.3.9' commands = [] if platform.system() == 'Windows' else ['sudo'] commands.append('easy_install') commands.append('https://closure-linter.googlecode.com/files/closure_linter-2.3.9.tar.gz') try: subprocess.call(commands) except StandardError: print 'Failed: you should install easy_install module for python first' return False print 'Success' return True def sync_required(func): def wrapper(): if __need_sync_contrib(): __sync_contrib() return func() return wrapper # ======================================================================================================================= # Build project # ======================================================================================================================= def __get_version(): f = open(os.path.join(PROJECT_PATH, 'package.json')); package_json = json.loads(f.read()); f.close() return package_json['version'] def __get_file_overview(): return \\"/**n * GraphicsJS is a lightweight JavaScript graphics library with an intuitive API, based on SVG/VML technology.n * Version: %s (%s)n * License: BSD 3-clausen * Copyright: AnyChart.com %s. All rights reserved.n */n\\" % (__get_version(), datetime.datetime.now().strftime(\\"%Y-%m-%d\\"), str(datetime.datetime.now().year)) def __getNotOptimizedCompilerArgs(): compilerArgs = [ '--compilation_level WHITESPACE_ONLY', '--formatting PRETTY_PRINT' ] return compilerArgs def __getOptimizedCompilerArgs(): compilerArgs = [ '--charset UTF-8', '--compilation_level ADVANCED_OPTIMIZATIONS', '--process_closure_primitives', '--language_in ECMASCRIPT3', '--language_out ECMASCRIPT3', '--hide_warnings_for \\"contrib/closure-library\\"', '--assume_function_wrapper', '--use_types_for_optimization true', '--output_wrapper \\"' + __get_file_overview() + '(function(){%output%})();\\"', '--env BROWSER', '--extra_annotation_name \\"includeDoc\\"', '--extra_annotation_name \\"illustration\\"', '--extra_annotation_name \\"illustrationDesc\\"', '--extra_annotation_name \\"ignoreDoc\\"', '--extra_annotation_name \\"propertyDoc\\"', '--extra_annotation_name \\"shortDescription\\"', '--warning_level VERBOSE', '--jscomp_warning accessControls', '--jscomp_warning ambiguousFunctionDecl', '--jscomp_warning checkDebuggerStatement', '--jscomp_warning checkEventfulObjectDisposal', '--jscomp_warning checkRegExp', '--jscomp_warning checkTypes', '--jscomp_warning checkVars', '--jscomp_warning closureDepMethodUsageChecks', '--jscomp_warning conformanceViolations', '--jscomp_warning const', '--jscomp_warning constantProperty', '--jscomp_warning deprecated', '--jscomp_warning deprecatedAnnotations', '--jscomp_warning duplicate', '--jscomp_warning duplicateMessage', '--jscomp_warning es3', '--jscomp_warning es5Strict', '--jscomp_warning externsValidation', '--jscomp_off extraRequire', '--jscomp_warning fileoverviewTags', '--jscomp_warning functionParams', '--jscomp_warning globalThis', '--jscomp_warning internetExplorerChecks', '--jscomp_warning invalidCasts', '--jscomp_warning misplacedTypeAnnotation', '--jscomp_warning missingGetCssName', '--jscomp_off missingOverride', '--jscomp_warning missingPolyfill', '--jscomp_warning missingProperties', '--jscomp_warning missingProvide', '--jscomp_warning missingRequire', '--jscomp_warning missingReturn', '--jscomp_warning msgDescriptions', '--jscomp_off newCheckTypes', '--jscomp_off newCheckTypesExtraChecks', '--jscomp_off nonStandardJsDocs', '--jscomp_off reportUnknownTypes', '--jscomp_warning suspiciousCode', '--jscomp_warning strictModuleDepCheck', '--jscomp_warning typeInvalidation', '--jscomp_warning undefinedNames', '--jscomp_warning undefinedVars', '--jscomp_warning unknownDefines', '--jscomp_off unusedLocalVariables', '--jscomp_off unusedPrivateMembers', '--jscomp_warning uselessCode', '--jscomp_off useOfGoogBase', '--jscomp_warning underscore', '--jscomp_warning visibility', '--jscomp_warning lintChecks', ] return compilerArgs def __getDefaultCompilerArgs(outputFile): result = [ 'java -jar', COMPILER_PATH, '--js=\\"%s\\"' % os.path.join(SRC_PATH, '**.js'), '--js=\\"%s\\"' % os.path.join(CLOSURE_SOURCE_PATH, '**.js'), '--define \\"goog.DEBUG=false\\"', '--js_output_file ' + outputFile, '--dependency_mode=STRICT', '--entry_point acgraphentry', '--hide_warnings_for=\\"goog\\"' ] return result @sync_required def __compileBinary(): __ensure_dir_exists(OUT_PATH) t = time.time() outputFileName = os.path.join(OUT_PATH, 'graphics.min.js') print 'Building optimized Graphics library js to ' + outputFileName commands = __getDefaultCompilerArgs(outputFileName) + __getOptimizedCompilerArgs() success = (__call_compiler(commands) == 0) res = 'Success' if success else 'Failed' print res + \\". Time spent: {:.3f}sn\\".format(time.time() - t) return success @sync_required def __compilePlain(): __ensure_dir_exists(OUT_PATH) t = time.time() outputFileName = os.path.join(OUT_PATH, 'graphics.js') print 'Building plain Graphics library js to ' + outputFileName commands = __getDefaultCompilerArgs(outputFileName) + __getNotOptimizedCompilerArgs() success = (__call_compiler(commands) == 0) res = 'Success' if success else 'Failed' print res + \\". Time spent: {:.3f}sn\\".format(time.time() - t) return success def __call_compiler(commands): commands = \\" \\".join(commands).replace('', '') commands = shlex.split(commands) # print commands p = subprocess.Popen(commands, stdout=subprocess.PIPE, stderr=subprocess.STDOUT) (output, err) = p.communicate() retcode = p.poll() if len(output) > 0: print output return retcode # ======================================================================================================================= # Build deps # ======================================================================================================================= @sync_required def __buildDepsFromCommandLine(): t = time.time() output_file = os.path.join(SRC_PATH, 'deps.js') success = (__callDepsWriter(SRC_PATH, output_file, 'whole project') == 0) res = 'Success' if success else 'Failed' print res + \\". Time spent: {:.3f}sn\\".format(time.time() - t) return success def __callDepsWriter(root, output_file, bundle_name): print 'Writing deps file to ' + output_file return subprocess.call([ PYTHON, DEPS_WRITER_PATH, '--root_with_prefix=' + root + ' ' + os.path.relpath(root, CLOSURE_SOURCE_PATH), '--output_file=' + output_file ]) # ======================================================================================================================= # Linter. # ======================================================================================================================= @sync_required def __lintFromCommandLine(): t = time.time() success = (__callLinter(SRC_PATH) == 0) res = 'Success' if success else 'Failed' print res + \\". Time spent: {:.3f}sn\\".format(time.time() - t) return success def __callLinter(root): print 'Linting ' + root + ' directory' return subprocess.call([ PYTHON, os.path.join(CLOSURE_LINTER_WRAPPER_PATH, 'gjslint.py'), '--flagfile', 'gjslint.cfg', '-r', root ]) # ======================================================================================================================= # JSDoc auto fix. # ======================================================================================================================= @sync_required def __autofixFromCommandLine(): t = time.time() success = (__callAutoFix(SRC_PATH) == 0) res = 'Success' if success else 'Failed' print res + \\". Time spent: {:.3f}sn\\".format(time.time() - t) return res def __callAutoFix(root): print 'Trying to fix ' + root + ' directory' return subprocess.call([ PYTHON, os.path.join(CLOSURE_LINTER_WRAPPER_PATH, 'fixjsstyle.py'), '--flagfile', 'gjslint.cfg', '-r', root ]) # ======================================================================================================================= # Help # ======================================================================================================================= def __printHelp(): print \\"Build script commands:n\\" \\"n\\" \\"without params Prepares the environment, than lints and builds everything.n\\" \\"n\\" \\"contrib Prepares buildin environment.n\\" \\"n\\" \\"deps Build ./src/deps.js file, needed to run the library in uncompiled mode.n\\" \\"n\\" \\"compile Builds the library minified js to ./out/ directory.n\\" \\"n\\" \\"plain Builds the library as one file pretty-printed js to ./out/ directory.n\\" \\"n\\" \\"lint Lints library sources.n\\" \\"n\\" \\"autofix Tries to fix lint errors in library sources.n\\" # ======================================================================================================================= # Main # ======================================================================================================================= def __execMainScript(): print '' args = sys.argv if len(args) == 1: success = __sync_contrib() and __lintFromCommandLine() and __buildDepsFromCommandLine() and __compilePlain() and __compileBinary() elif args[1] == 'contrib': success = __sync_contrib() elif args[1] == 'compile': success = __compileBinary() elif args[1] == 'plain': success = __compilePlain() elif args[1] == 'deps': success = __buildDepsFromCommandLine() elif args[1] == 'lint': success = __lintFromCommandLine() elif args[1] == 'autofix': success = __autofixFromCommandLine() else: __printHelp() success = True return success if __name__ == '__main__': try: success = __execMainScript() except StandardError as e: print e success = False sys.exit(0 if success else 1)"},{"prompt":"The code is a Python module for the SKiDL library. To use it, import the necessary functions and classes from the module. The module contains a class \`SkidlCfg\` for handling SKiDL configuration, a function \`get_kicad_lib_tbl_dir\` for getting the path to the global fplibtable file, and a number of global variables and functions for working with SKiDL. To prevent creation of output files, call the \`no_files\` function with the default Circuit object.","completion":"# -*- coding: utf-8 -*- # MIT license # # Copyright (C) 2016 by XESS Corp. # # Permission is hereby granted, free of charge, to any person obtaining a copy # of this software and associated documentation files (the \\"Software\\"), to deal # in the Software without restriction, including without limitation the rights # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell # copies of the Software, and to permit persons to whom the Software is # furnished to do so, subject to the following conditions: # # The above copyright notice and this permission notice shall be included in # all copies or substantial portions of the Software. # # THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN # THE SOFTWARE. from __future__ import absolute_import, division, print_function, unicode_literals import json import os from builtins import open, super from future import standard_library from . import tools # Import EDA tool-specific stuff. from .circuit import Circuit from .common import * from .defines import * from .logger import erc_logger, get_script_name, logger from .part_query import footprint_cache from .pin import Pin from .utilities import * standard_library.install_aliases() class SkidlCfg(dict): \\"\\"\\"Class for holding SKiDL configuration.\\"\\"\\" CFG_FILE_NAME = \\".skidlcfg\\" def __init__(self, *dirs): super().__init__() self.load(*dirs) def load(self, *dirs): \\"\\"\\"Load SKiDL configuration from JSON files in given dirs.\\"\\"\\" for dir in dirs: path = os.path.join(dir, self.CFG_FILE_NAME) path = os.path.expanduser(path) path = os.path.abspath(path) try: with open(path) as cfg_fp: merge_dicts(self, json.load(cfg_fp)) except (FileNotFoundError, IOError): pass def store(self, dir=\\".\\"): \\"\\"\\"Store SKiDL configuration as JSON in directory as .skidlcfg file.\\"\\"\\" path = os.path.join(dir, self.CFG_FILE_NAME) path = os.path.expanduser(path) path = os.path.abspath(path) with open(path, \\"w\\") as cfg_fp: json.dump(self, cfg_fp, indent=4) def get_kicad_lib_tbl_dir(): \\"\\"\\"Get the path to where the global fp-lib-table file is found.\\"\\"\\" paths = ( \\"HOME/.config/kicad\\", \\"~/.config/kicad\\", \\"%APPDATA%/kicad\\", \\"HOME/Library/Preferences/kicad\\", \\"~/Library/Preferences/kicad\\", ) for path in paths: path = os.path.normpath(os.path.expanduser(os.path.expandvars(path))) if os.path.lexists(path): return path return \\"\\" # # Globals that are used by everything else. # # Get SKiDL configuration. skidl_cfg = SkidlCfg(\\"/etc\\", \\"~\\", \\".\\") # If no configuration files were found, set some default lib search paths. if \\"lib_search_paths\\" not in skidl_cfg: skidl_cfg[\\"lib_search_paths\\"] = {tool: [\\".\\"] for tool in ALL_TOOLS} # Add the location of the default KiCad part libraries. try: skidl_cfg[\\"lib_search_paths\\"][KICAD].append(os.environ[\\"KICAD_SYMBOL_DIR\\"]) except KeyError: logger.warning( \\"KICAD_SYMBOL_DIR environment variable is missing, so the default KiCad symbol libraries won't be searched.\\" ) # Add the location of the default SKiDL part libraries. default_skidl_libs = os.path.join( os.path.dirname(os.path.abspath(__file__)), \\"libs\\" ) skidl_cfg[\\"lib_search_paths\\"][SKIDL].append(default_skidl_libs) # Shortcut to library search paths. lib_search_paths = skidl_cfg[\\"lib_search_paths\\"] # If no configuration files were found, set some default footprint search paths. if \\"footprint_search_paths\\" not in skidl_cfg: dir_ = get_kicad_lib_tbl_dir() skidl_cfg[\\"footprint_search_paths\\"] = {tool: [dir_] for tool in ALL_TOOLS} # Cause the footprint cache to be invalidated if the footprint search path changes. def invalidate_footprint_cache(self, k, v): footprint_cache.reset() skidl_cfg[\\"footprint_search_paths\\"] = TriggerDict(skidl_cfg[\\"footprint_search_paths\\"]) skidl_cfg[\\"footprint_search_paths\\"].trigger_funcs[KICAD] = invalidate_footprint_cache # Shortcut to footprint search paths. footprint_search_paths = skidl_cfg[\\"footprint_search_paths\\"] # Set default toolset being used with SKiDL. def set_default_tool(tool): \\"\\"\\"Set the ECAD tool that will be used by default.\\"\\"\\" skidl_cfg[\\"default_tool\\"] = tool def get_default_tool(): return skidl_cfg[\\"default_tool\\"] if \\"default_tool\\" not in skidl_cfg: set_default_tool(KICAD) # Make the various EDA tool library suffixes globally available. lib_suffixes = tools.lib_suffixes # Definitions for backup library of circuit parts. BACKUP_LIB_NAME = get_script_name() + \\"_lib\\" BACKUP_LIB_FILE_NAME = BACKUP_LIB_NAME + lib_suffixes[SKIDL] # Boolean controls whether backup lib will be searched for missing parts. QUERY_BACKUP_LIB = INITIAL_QUERY_BACKUP_LIB = True def set_query_backup_lib(val): \\"\\"\\"Set the boolean that controls searching for the backup library.\\"\\"\\" global QUERY_BACKUP_LIB QUERY_BACKUP_LIB = val def get_query_backup_lib(): return QUERY_BACKUP_LIB # Backup lib for storing parts in a Circuit. backup_lib = None def set_backup_lib(lib): \\"\\"\\"Set the backup library.\\"\\"\\" global backup_lib backup_lib = lib def get_backup_lib(): return backup_lib @norecurse def load_backup_lib(): \\"\\"\\"Load a backup library that stores the parts used in the circuit.\\"\\"\\" global backup_lib # Don't keep reloading the backup library once it's loaded. if not backup_lib: try: # The backup library is a SKiDL lib stored as a Python module. exec(open(BACKUP_LIB_FILE_NAME).read()) # Copy the backup library in the local storage to the global storage. backup_lib = locals()[BACKUP_LIB_NAME] except (FileNotFoundError, ImportError, NameError, IOError): pass return backup_lib # Create the default Circuit object that will be used unless another is explicitly created. builtins.default_circuit = Circuit() # NOCONNECT net for attaching pins that are intentionally left open. builtins.NC = default_circuit.NC # pylint: disable=undefined-variable # Create calls to functions on whichever Circuit object is the current default. ERC = default_circuit.ERC erc_assert = default_circuit.add_erc_assertion generate_netlist = default_circuit.generate_netlist generate_xml = default_circuit.generate_xml generate_schematic = default_circuit.generate_schematic generate_svg = default_circuit.generate_svg generate_graph = default_circuit.generate_graph reset = default_circuit.reset backup_parts = default_circuit.backup_parts # Define a tag for nets that convey power (e.g., VCC or GND). POWER = Pin.drives.POWER def no_files(circuit=default_circuit): \\"\\"\\"Prevent creation of output files (netlists, ERC, logs) by this Circuit object.\\"\\"\\" circuit.no_files = True erc_logger.stop_file_output() logger.stop_file_output()"},{"prompt":"Optimize a Python function for maximum performance. def reverse_string(s): return s[::1]","completion":"def reverse_string(s): start = 0 end = len(s) string=\\"\\" while end > 0: string += s[end-1] end -= 1 return string"},{"prompt":"Generate a python function to calculate the total cost of a purchase given prices and quantities. prices = [10, 20, 10] quantities = [1, 2, 3]","completion":"def calculate_total_cost(prices, quantities): total = 0 for price, quantity in zip(prices, quantities): total += price * quantity return total"},{"prompt":"Come up with a Python program to print out the sum of all the numbers from 0 to a given number.","completion":"def sum_numbers(n): total = 0 for i in range(n+1): total += i return total print(sum_numbers(20))"},{"prompt":"Using Python, create a function that returns the first 10 prime numbers. Not applicable","completion":"def find_prime_numbers(num): prime_numbers = [] for x in range(2, num): flag = True for y in prime_numbers: if x % y == 0: flag = False break if flag: prime_numbers.append(x) if len(prime_numbers) == 10 break return prime_numbers # Usage find_prime_numbers(100) # Output [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]"},{"prompt":"Take this Python Code and optimize it. def count_items(items): item_counter = {} for item in items: if item not in item_counter: item_counter[item] = 1 else: item_counter[item] += 1 return item_counter","completion":"def count_items(items): item_counter = {} for item in items: item_counter[item] = item_counter.get(item, 0) + 1 return item_counter"},{"prompt":"Create a Python program to search in a sorted array Search for the number 11 in the sorted array [1, 3, 5, 8, 11, 14, 17].","completion":"def binary_search(arr, num): # define start and end point start = 0 end = len(arr)-1 while start <= end: mid = (start + end)//2 # check if num is present at mid if arr[mid] == num: return mid # If num is greater, ignore left half elif arr[mid] < num: start = mid + 1 # If num is smaller, ignore right half else: end = mid - 1 # If we reach here, then the element was not present return -1"},{"prompt":"Create an optimization function for Theano that receives parameters and gradients and returns Theano updates. The function can perform clipping and regularization based on the provided training configuration. The function also supports different optimization methods such as SGD, AdaGrad, AdaDelta, Adam, RMSProp, and Momentum.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- import logging as loggers import numpy as np import theano import theano.tensor as T from theano.ifelse import ifelse from ..utils import FLOATX, dim_to_var, EPSILON from .util import wrap_core, multiple_l2_norm from ..conf import TrainerConfig logging = loggers.getLogger(__name__) def optimize_updates(params, gradients, config=None, shapes=None): \\"\\"\\" General optimization function for Theano. Parameters: params - parameters gradients - gradients config - training config Returns: Theano updates :type config: deepy.TrainerConfig or dict \\"\\"\\" if config and isinstance(config, dict): config = TrainerConfig(config) # Clipping if config: clip_value = config.get(\\"gradient_clipping\\", None) if clip_value: clip_constant = T.constant(clip_value, dtype=FLOATX) if config.avoid_compute_embed_norm: grad_norm = multiple_l2_norm([t[1] for t in zip(params, gradients) if not t[0].name.startswith(\\"W_embed\\")]) else: grad_norm = multiple_l2_norm(gradients) isnan = T.or_(T.isnan(grad_norm), T.isinf(grad_norm)) multiplier = ifelse(grad_norm < clip_constant, T.constant(1., dtype=FLOATX), clip_constant / (grad_norm + EPSILON)) # Clip clipped_gradients = [] for param, g in zip(params, gradients): g = multiplier * g if config.avoid_nan: g = T.switch(isnan, np.float32(0.1) * param, g) if config.gradient_tolerance: g = ifelse(grad_norm > config.gradient_tolerance, T.zeros_like(g) + EPSILON, g) clipped_gradients.append(g) gradients = clipped_gradients # Regularization if config and config.weight_l2: regularized_gradients = [] for param, grad in zip(params, gradients): grad = grad + (2 * config.weight_l2 * param) regularized_gradients.append(grad) gradients = regularized_gradients # Avoid nan but not computing the norm # This is not recommended if config and config.avoid_nan and not config.gradient_clipping: logging.info(\\"avoid NaN gradients\\") new_gradients = [] for grad in gradients: new_grad = ifelse(T.isnan(grad).any(), T.zeros_like(grad) + EPSILON, grad) new_gradients.append(new_grad) gradients = new_gradients # Find method method = \\"SGD\\" if config: method = config.get(\\"method\\", method).upper() # Get Function func = None if method in [\\"SGD\\", \\"ADAGRAD\\", \\"ADADELTA\\", \\"FINETUNING_ADAGRAD\\"]: from cores.ada_family import ada_family_core func = ada_family_core elif method == \\"ADAM\\": from cores.adam import adam_core func = adam_core elif method == \\"RMSPROP\\": from cores.rmsprop import rmsprop_core func = rmsprop_core elif method == \\"MOMENTUM\\": from cores.momentum import momentum_core func = momentum_core if not func: raise NotImplementedError(\\"method '%s' is not supported\\" % method) logging.info(\\"optimize method=%s parameters=%s\\" % (method, str(params))) free_parameters = [] return_vals = wrap_core(func, config, params, gradients) if type(return_vals) == list and type(return_vals[0]) == list: updates, free_parameters = return_vals else: updates = return_vals # No free param recording if config and not config.record_free_params: free_parameters = [] # Weight bound if config.weight_bound: logging.info(\\"apply weight bound of %.2f\\" % config.weight_bound) new_updates = [] for param, update_value in updates: bounded_value = (update_value * (T.abs_(update_value) <= config.weight_bound) + config.weight_bound * (update_value > config.weight_bound) + -config.weight_bound * (update_value < -config.weight_bound)) new_updates.append((param, bounded_value)) updates = new_updates return updates, free_parameters def optimize_function(params, config=None): \\"\\"\\" Create a optimizing function receives gradients. Parameters: params - parameters config - training configuration Returns: updating function receives gradients \\"\\"\\" gs = [dim_to_var(p.ndim) for p in params] updates, _ = optimize_updates(params, gs, config) return theano.function(gs, [], updates=updates)"},{"prompt":"Develop a Python program to list the first 10 numbers in the Fibonacci series.","completion":"a, b = 0, 1 print(\\"The first 10 numbers in Fibonacci series are:\\") while a < 10: print(a) a, b = b, a + b"},{"prompt":"Given a list of strings and a letter, write a python program that returns the strings that contain the given letter in upper case. strings = ['civic', 'legion', 'elite', 'necrop', 'dark soul'] letter = 'e'","completion":"def sort_upper(strings, letter): result = [] for string in strings: if letter in string and string.upper() == string: result.append(string) return result strings = ['civic', 'legion', 'elite', 'necrop', 'dark soul'] letter = 'e' print(sort_upper(strings, letter))"},{"prompt":"Create a Python script to remove all occurrences of duplicate elements from a given list. mylist = [1,1,2,3,4,4,5,6]","completion":"mylist = [1,1,2,3,4,4,5,6] unique_list = [] for element in mylist: if element not in unique_list: unique_list.append(element) print(unique_list)"},{"prompt":"Write a Python code snippet to display all the items stored in a list given below. list_items = ['Apple', 'Mango', 'Banana']","completion":"for item in list_items: print(item)"},{"prompt":"Create a classification decision tree using Python to predict the likelihood of a online customer buying a product. Sample Customer Data ID Age Gender Occupation Type City Member since Months on Site Purchase 1 23 Female Manager Large London 7/12/2011 36 No 2 40 Male Teacher Rural Leeds 11/2/2013 12 Yes 3 57 Female Engineer Large London 4/4/2015 3 No 4 28 Male Cook Urban Cardiff 1/3/2016 9 Yes 5 45 Female Nurse Urban Liverpool 11/11/2016 18 No","completion":"import pandas as pd from sklearn import tree data = pd.read_csv('customer_data.csv') feature_names = ['Age','Gender','Occupation','Type','City','Member since','Months on Site'] target_names = ['No','Yes'] X = data[feature_names].values y = data['Purchase'].values # Create decision tree classifier clf = tree.DecisionTreeClassifier() # Train the decision tree classifier clf = clf.fit(X, y) # Visualize the decision tree dot_data = tree.export_graphviz(clf, out_file=None, feature_names=feature_names, class_names=target_names, filled=True, rounded=True, special_characters=True) import graphviz graph = graphviz.Source(dot_data) graph"},{"prompt":"Create a function in Python to animate a Gif.","completion":"from PIL import Image from images2gif import writeGif def animateGif(images, filename, duration=0.1): frames = [] for image in images: frames.append(Image.open(image)) writeGif(filename, frames, duration=duration)"},{"prompt":"Write a python program to print the elements in a list which are not repeated more than once. [1, 2, 3, 2, 4, 2, 3]","completion":"result = [] for ele in list: if list.count(ele) == 1: result.append(ele) print(result) # Output: [1, 4]"},{"prompt":"Create a Python class called Friend with fields name, age and hobbies. Not applicable","completion":"class Friend: def __init__(self, name, age, hobbies): self.name = name self.age = age self.hobbies = hobbies def getName(self): return self.name def getAge(self): return self.age def getHobbies(self): return self.hobbies"},{"prompt":"Modify the following python script to generate outputs in reverse chronological order. timetable = [Tuesday, Wednesday, Thursday, Friday] for day in timetable: print(day)","completion":"timetable = [\\"Tuesday\\", \\"Wednesday\\", \\"Thursday\\", \\"Friday\\"] for day in reversed(timetable): print(day)"},{"prompt":"Write a python class to represent a 'Person' with the following properties. Name, Age, Gender","completion":"class Person: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def get_name(self): return self.name def get_age(self): return self.age def get_gender(self): return self.gender # Test person person = Person(\\"John\\", 30, \\"Male\\") # Print person information print(\\"Name:\\", person.get_name()) print(\\"Age:\\", person.get_age()) print(\\"Gender:\\", person.get_gender())"},{"prompt":"Create a Python class for a Stack data structure. This class should include methods for pushing, popping, and peeking elements from the stack. Not applicable","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items) def isEmpty(self): return self.items == []"},{"prompt":"Generate a random number between 0 and 9 using Python.","completion":"import random random.randint(0, 9)"},{"prompt":"Rewrite the following JavaScript stringmanipulation function in Python. function fix_string(s) { s = s.replace(/s/g, ''); s = s.toLowerCase(); s = s.split('').reverse().join(''); return s; }","completion":"def fix_string(s): s = s.replace(\\" \\", \\"\\") s = s.lower() s = \\"\\".join(reversed(s)) return s"},{"prompt":"Write a Python script that takes in a Python list and returns every other element as a sublist. [1,2,3,4,5]","completion":"def every_other_sublist(input_list): sublist = [] for i in range(len(input_list)): if i % 2 == 0: sublist.append(input_list[i]) return sublist"},{"prompt":"Generate a Python program that extracts all the words in a sentence and sorts it in descending order by length. This is a test sentence","completion":"def sort_words_by_length(sentence): words = sentence.split() words.sort(key=len, reverse=True) return words sentence = \\"This is a test sentence\\" result = sort_words_by_length(sentence) print(result)"},{"prompt":"mplement a web scraper in Python to retrieve and save all basketball scores from the NBA website.","completion":"import requests from bs4 import BeautifulSoup URL = \\"https://www.nba.com/scores\\" page = requests.get(URL) soup = BeautifulSoup(page.content, 'html.parser') results = soup.find_all('li', class_=\\"score\\") scores = [] for result in results: data=result.find_all(\\"span\\", {'class': 'scoreboardScore'}) scores.append([d.text for d in data]) with open(\\"scores.txt\\", \\"w\\") as f: for score in scores: f.write(\\" \\".join(score) + \\"n\\")"},{"prompt":"Using the input provided, make a program to sort a given array in ascending order in Python. arr = [9, 4, 7, 2, 3]","completion":"def insertionSort(arr): for i in range(1, len(arr)): key = arr[i] j = i-1 while j >=0 and key < arr[j] : arr[j+1] = arr[j] j -= 1 arr[j+1] = key arr = [9, 4, 7, 2, 3] insertionSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Create a deep learning model in Python to detect faces in photos of people. Not applicable","completion":"import cv2 from keras.models import Sequential from keras.layers import Dense, Dropout, Activation, Flatten from keras.layers import Conv2D, MaxPooling2D #Creating the model model = Sequential() #Adding the first layer model.add(Conv2D(32, (3, 3), input_shape=(64, 64, 3))) model.add(Activation('relu')) model.add(MaxPooling2D(pool_size=(2, 2))) #Adding the second layer model.add(Conv2D(32, (3, 3))) model.add(Activation('relu')) model.add(MaxPooling2D(pool_size=(2, 2))) #Adding the third layer model.add(Conv2D(64, (3, 3))) model.add(Activation('relu')) model.add(MaxPooling2D(pool_size=(2, 2))) #Flattening Layer model.add(Flatten()) model.add(Dense(128)) model.add(Activation('relu')) #Output Layer model.add(Dense(1)) model.add(Activation('sigmoid')) #Compiling the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) #Train the model model.fit_generator(training_set, steps_per_epoch=1000, epochs=25, validation_data=test_set, validation_steps=200) #Prediction def predict(path): img_array = cv2.imread(path) img_array = cv2.resize(img_array, (64, 64)) img_array = np.array(img_array).reshape(-1, 64, 64, 3) predicted_array = model.predict(img_array) if predicted_array[0][0] == 1: print('Face Detected') else: print('Face not detected')"},{"prompt":"Create a table in python using a dictionary","completion":"table = { \\"Column1\\": [1, 2, 3], \\"Column2\\": [\\"A\\", \\"B\\", \\"C\\"], \\"Column3\\": [True, False, False] }"},{"prompt":"Create a class in Python to calculate the frequency of letter occurrence given a string. string = Hello World!!","completion":"class FrequencyCounter: def __init__(self, string): self.string = string def calculate_frequency(self): frequency_dict = {} for char in self.string: if char in frequency_dict: frequency_dict[char] += 1 else: frequency_dict[char] = 1 return frequency_dict # Use frequency_counter = FrequencyCounter(string) frequency_dict = frequency_counter.calculate_frequency() print(frequency_dict)"},{"prompt":"Explain how hash tables work in Python.","completion":"Hash tables (also called hash maps) are Python data structures used to store key-value pairs. A hash table uses a hash function to compute the index of an item stored in the table, and then uses this index to store and quickly retrieve the item. The hash function takes the key and generates a value called a hash(or index). This hash is used to store the item in the corresponding position in the hash table. The item can then be quickly accessed by providing the key to the hash table."},{"prompt":"Create a Python module to classify songs from a given song dataset. The dataset contains a list of songs and each song has four features associated with it: artist, song title, lyrics, and genre. The dataset contains 800+ rows. Each row contains data in the following format: artist: Avril Lavigne, title: Complicated, lyrics: Uh huh, life's like this Uh huh, uh huh, that's the way it is Cause life's like this Uh huh, uh huh, that's the way it is Relax, take it easy Genre: Pop","completion":"import pandas as pd import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.neighbors import KNeighborsClassifier df = pd.read_csv('songs.csv') X = df[['artist', 'title', 'lyrics']] y = df['genre'].values # Vectorize Text vectorizer = CountVectorizer() X_lyrics = vectorizer.fit_transform(X['lyrics']).todense() # Fit the model knn = KNeighborsClassifier(5) knn.fit(X_lyrics, y) # Predict a genre for a new song new_song = [['artist', 'title', 'lyrics']] new_song_lyrics = vectorizer.transform(new_song) predicted_genre = knn.predict(new_song_lyrics) print(predicted_genre)"},{"prompt":"Create a class in Python named MyCalculator with a method sum that calculates the sum of two numbers.","completion":"class MyCalculator: def __init__(self): pass def sum(self, a, b): return a + b"},{"prompt":"Design a class in Python to store customer information.","completion":"class Customer: def __init__(self, name, address, contact_number): self.name = name self.address = address self.contact_number = contact_number"},{"prompt":"Convert the following pseudocode into Python code to check if a number is even or odd: if num MOD 2 == 0","completion":"def is_even(num): return num % 2 == 0"},{"prompt":"This code collects information about CVMFS probes and writes the results to SSB columns. To use, run the \`c4s()\` function.","completion":"#/bin/env python import urllib, json, datetime from xml.parsers import expat class c4s : def __init__(self): self.cvmfsBaseVersionFile = 'cvmfsVersion.txt' self.requestedVersion = '' self.myVO = 'LHCb' self.cvmfsColumnNo = 202 self.wlcgTopoColumnNo = 144 self.topoDict = {'WLCG':{}, self.myVO:{}} self.ssbTimePat = '%Y-%m-%dT%H:%M:%S' self.dontpanic = 'http://www.adluge.com/wp-content/uploads/2013/09/homer-simpson-doh.gif' self.topologyURL = 'http://lhcb-web-dirac.cern.ch/topology/lhcb_topology.xml' self.wlcgBaseUrl = 'http://wlcg-mon.cern.ch/dashboard/request.py/' self.wlcgGetUrl = self.wlcgBaseUrl+'getplotdata?columnid=%d&time=24&sites=all&batch=1' self.wlcgSiteBaseLink = 'http://lhcb-web-dirac.cern.ch/DIRAC/LHCb-Production/undefined/grid/SiteStatus/display?name=' self.ssbMetrics = ['CvmfsVersion','CvmfsRepoRevision','CvmfsMountPoint','CvmfsCondDBMountPoint', 'CvmfsProbeTime', 'CvmfsStratumOnes', 'CvmfsNumSquids', 'CvmfsProbeNoInfo', 'CvmfsProbeLink'] self.ssbData = {} for k in self.ssbMetrics : self.ssbData[k] = {} # start probe functions # # eval functions # def evalCvmfsProbeLink(self, val, site): return (val, 'green') def evalCvmfsProbeNoInfo(self, val, site) : if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey') if self.ssbData['CvmfsVersion'][site] == 'not installed' : return ('n/a (not installed)', 'grey') we = val.split(':')[0] if we == 'WARNING' : return (val, 'orange') if we == 'ERROR' : return (val, 'red') return (val, 'green') def evalCvmfsVersion(self, val, site): if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey') if val == 'nfs' : return (val, 'green') if val in ('n/a', 'not installed') : return (val, 'red') x = 2 maxDiff = range(x+1) deplV = map(lambda x: int(x), val.split('.')) reqV = map(lambda x: int(x), self.requestedVersion.split('.')) if deplV[1] == reqV[1] and deplV[0] == reqV[0] : if (reqV[2] - deplV[2]) in maxDiff : return (val, 'green') else : return (val, 'orange') else : return (val, 'red') def evalCvmfsRepoRevision(self, val, site): if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey') vers = self.ssbData['CvmfsVersion'][site] if vers in ('nfs', 'not installed') : return ('n/a (%s)'%vers, 'grey') return (val, 'green') def evalCvmfsMountPoint(self, val, site): if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey') vers = self.ssbData['CvmfsVersion'][site] if vers in ('not installed') : return ('n/a (%s)'%vers, 'grey') if val and val == '/cvmfs/lhcb.cern.ch' : return (val, 'green') else : return (val, 'orange') def evalCvmfsCondDBMountPoint(self, val, site): if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey') if self.ssbData['CvmfsVersion'][site] == 'not installed' : return ('n/a (not installed)', 'grey') if val == 'yes' : return (val, 'orange') else : return (val, 'green') def evalCvmfsProbeTime(self, val, site): if val == 'no probe' : return (val, 'red') pTime = datetime.datetime.strptime(val,self.ssbTimePat) curTime = datetime.datetime.now() delta = (curTime - pTime).seconds if delta < 21600 : return (val, 'green') elif delta < 43200 : return (val, 'orange') else : return (val, 'red') def evalCvmfsStratumOnes(self, val, site) : if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey') vers = self.ssbData['CvmfsVersion'][site] if vers in ('nfs', 'not installed') : return ('n/a (%s)'%vers, 'grey') if val : return (val, 'green') else: return ('none', 'red') def evalCvmfsNumSquids(self, val, site): if self.ssbData['CvmfsProbeTime'][site] == 'no probe' : return ('n/a (no probe)', 'grey') vers = self.ssbData['CvmfsVersion'][site] if vers in ('nfs', 'not installed') : return ('n/a (%s)'%vers, 'grey') if val : if int(val) > 1 : return (val, 'green') else : return (val, 'orange') else: return (val , 'red') # retrieval functions # def getValCvmfsProbeLink(self, site, probe, metric): self.ssbData['CvmfsProbeLink'][site]=metric['URL'] def getValCvmfsProbeNoInfo(self, site, probe, metric): val = 'none' pat = 'INFO: Mandatory tests exectuted successfully, now continuing with testing optional repositories' for line in probe : we = line.split(':')[0] if line[:len(pat)] == pat : break elif we == 'WARNING' and val.split(':')[0] != 'ERROR' : val = line elif we == 'ERROR' : val = line self.ssbData['CvmfsProbeNoInfo'][site] = val def getValCvmfsVersion(self, site, probe, metric): pat1 = 'INFO: CVMFS version installed ' pat2 = 'INFO: Mandatory mount point /cvmfs/lhcb.cern.ch is nfs mount point' pat3 = 'INFO: No cvmfs rpms found on WN, checking if this WN uses nfs mounting of CVMFS repositories' ver = 'n/a' noCVMFS = False cvmfsViaNFS = False for line in probe : if line[:len(pat1)] == pat1 : ver = line[len(pat1):] elif line[:len(pat2)] == pat2 : ver = 'nfs' cvmfsViaNFS = True elif line[:len(pat3)] == pat3 : noCVMFS = True if noCVMFS and not cvmfsViaNFS : ver = 'not installed' self.ssbData['CvmfsVersion'][site] = ver def getValCvmfsRepoRevision(self, site, probe, metric): pat = 'INFO: repository revision ' rev = 'n/a' for line in probe : if line[:len(pat)] == pat : rev = line[len(pat):] break self.ssbData['CvmfsRepoRevision'][site] = rev def getValCvmfsMountPoint(self, site, probe, metric): pat1 = 'INFO: Variable VO_LHCB_SW_DIR points to CVMFS mount point ' pat2 = 'INFO: Mandatory mount point /cvmfs/lhcb.cern.ch is nfs mount point' mp = 'n/a' for line in probe : if line[:len(pat1)] == pat1 : mp = line[len(pat1):] elif line[:len(pat2)] == pat2 : mp = '/cvmfs/lhcb.cern.ch' self.ssbData['CvmfsMountPoint'][site] = mp def getValCvmfsCondDBMountPoint(self, site, probe, metric): pat = 'INFO: repository /cvmfs/lhcb-conddb.cern.ch available' cm = 'no' for line in probe : if line[:len(pat)] == pat : cm = 'yes' self.ssbData['CvmfsCondDBMountPoint'][site] = cm def getValCvmfsProbeTime(self, site, probe, metric): self.ssbData['CvmfsProbeTime'][site] = metric['URL'].split('&')[1].split('=')[1][:-1] # self.ssbData['CvmfsProbeTime'][site] = metric['EndTime'] def getValCvmfsStratumOnes(self, site, probe, metric) : strats = [] pat = 'INFO: Servers: ' for line in probe : if line[:len(pat)] == pat : stratumL = line[len(pat):] for serv in stratumL.split() : strats.append('.'.join(serv.split('/')[2].split(':')[0].split('.')[-2:])) break self.ssbData['CvmfsStratumOnes'][site] = ' '.join(strats) def getValCvmfsNumSquids(self, site, probe, metric) : numSq = 0 pat = 'INFO: Proxies: ' for line in probe : if line[:len(pat)] == pat : numSq = len(line[len(pat):].split()) break self.ssbData['CvmfsNumSquids'][site] = numSq # end probe functions def xmlStartElement(self, name, attrs): if name == 'atp_site' : self.currWLCGSite = attrs['name'] if name == 'group' and attrs['type'] == 'LHCb_Site' : self.topoDict['WLCG'][attrs['name']] = self.currWLCGSite def bootstrap(self): # get WLCG Mon mapping VO site name <-> site ID topo = json.loads(urllib.urlopen(self.wlcgGetUrl%self.wlcgTopoColumnNo).read()) for ent in topo['csvdata'] : self.topoDict[self.myVO][ent['SiteId']] = ent['Status'] # read CVMFS base line version number f = open(self.cvmfsBaseVersionFile, 'r') self.requestedVersion = f.read() f.close() # read topology file and create mapping VO site name <-> WLCG site name topo = urllib.urlopen(self.topologyURL).read() p = expat.ParserCreate() p.StartElementHandler = self.xmlStartElement p.Parse(topo) def clearSsbData(self, site): for metric in self.ssbMetrics : self.ssbData[metric][site] = '' def collectInfo(self): info = json.loads(urllib.urlopen(self.wlcgGetUrl%self.cvmfsColumnNo).read()) for metricInf in info['csvdata'] : site = self.topoDict[self.myVO][metricInf['SiteId']] tTime = datetime.datetime.strptime(metricInf['Time'], self.ssbTimePat) dTime = self.ssbData['CvmfsProbeTime'].get(site) if ( not dTime ) or ( datetime.datetime.strptime(dTime, self.ssbTimePat) < tTime ) : if dTime : self.clearSsbData(site) tl = urllib.urlopen(self.wlcgBaseUrl+metricInf['URL']).read().split('n') for metr in self.ssbMetrics : eval('self.getVal'+metr)(site, tl, metricInf) for site in self.topoDict['WLCG'].keys() : if not self.ssbData['CvmfsProbeTime'].get(site) : for metric in self.ssbMetrics : self.ssbData[metric][site] = '' self.ssbData['CvmfsProbeTime'][site] = 'no probe' def writeSSBColumns(self): for k in self.ssbMetrics : fun = 'self.eval'+k colData = self.ssbData[k] f = open(k+'.ssb.txt', 'w') for site in colData.keys() : now = str(datetime.datetime.now()) (val, color) = eval(fun)(colData[site], site) url = self.dontpanic if self.ssbData['CvmfsProbeLink'].get(site): url = self.wlcgBaseUrl+self.ssbData['CvmfsProbeLink'][site] f.write('%st%st%st%st%sn' % (now, site, val, color, url)) f.close() def createWLCGLHCbMapping(self): f = open('WLCGSiteMapping.ssb.txt','w') for site in self.topoDict['WLCG'].keys() : now = str(datetime.datetime.now()) val = self.topoDict['WLCG'][site] color = 'white' url = self.wlcgSiteBaseLink+site f.write('%st%st%st%st%sn' % (now, site, val, color, url)) def run(self): self.bootstrap() self.collectInfo() self.writeSSBColumns() self.createWLCGLHCbMapping() if __name__ == '__main__' : c4s().run()"},{"prompt":"Create a module for a python program that sanitizes user input. This module should strip away whitespace, remove HTML tags and special characters, convert ASCII characters to Unicode characters, and convert strings to lowercase. my string = '<Strin>G &#3238; !@#%^'","completion":"import re # strip whitespace def strip_whitespace(s): return s.strip() # remove HTML tags def remove_html_tags(s): return re.sub('<[^>]*>', '', s) # remove special characters def remove_special_chars(s): return re.sub('[^ws]', '', s) # convert ASCII characters to unicode characters def convert_ascii_to_unicode(s): return s.encode('unicode-escape').decode('utf-8') # convert strings to lowercase def to_lower(s): return s.lower() # sanitize user input def sanitize_string(s): s = strip_whitespace(s) s = remove_html_tags(s) s = remove_special_chars(s) s = convert_ascii_to_unicode(s) s = to_lower(s) return s # Example my_string = '<Strin>G &#3238; !@#%^' my_string = sanitize_string(my_string) print(my_string)"},{"prompt":"Create a simple neural network using TensorFlow in Python.","completion":"import tensorflow as tf # declaring the model model = tf.keras.Sequential([ tf.keras.layers.Dense(4, activation='relu', input_shape=(2,)), tf.keras.layers.Dense(4, activation='relu'), tf.keras.layers.Dense(1, activation='sigmoid') ]) # compiling the model model.compile( optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'] )"},{"prompt":"Generate a Python program that takes in a string and replaces all vowels with underscores.","completion":"def replace_vowels(string): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] new_string = \\"\\" for letter in string: if letter.lower() in vowels: new_string += \\"_\\" else: new_string += letter return new_string result = replace_vowels(\\"Hello World\\") print(result)"},{"prompt":"Create a program in Python that shuffles and prints an array of items. ['a', 'b', 'c', 'd']","completion":"import random items = ['a', 'b', 'c', 'd'] random.shuffle(items) print(items)"},{"prompt":"Optimize the following Python program to find the given number in a list. A list = [2, 4, 9, 8, 10] Number = 8","completion":"def find_number(lst, num): for i, v in enumerate(lst): if v == num: return i return -1 list_of_numbers = [2, 4, 9, 8, 10] number_to_find = 8 # Find the given number in the list index = find_number(list_of_numbers, number_to_find) if index != -1: print(f'Number {number_to_find} found at index {index}.') else: print('Number not found.')"},{"prompt":"Create a python program to convert a date from one format to another. May 14, 2020 > 14052020","completion":"import datetime def convert_date_format(date_str, old_format, new_format): dt_obj = datetime.datetime.strptime(date_str, old_format) return dt_obj.strftime(new_format) print(convert_date_format(\\"May 14, 2020\\", \\"%b %d, %Y\\", \\" %d-%m-%Y\\"))"},{"prompt":"Given a matrix, write a Python function to transpose the matrix (swap the rows and columns of the matrix).","completion":"def transpose_matrix(matrix): m = len(matrix) n = len(matrix[0]) result = [] for j in range(n): row = [] for i in range(m): row.append(matrix[i][j]) result.append(row) return result"},{"prompt":"Write a Python program for searching a 2dimensional array for a target value. arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] target = 8","completion":"def search(arr, target): for row in arr: for element in row: if element == target: return True return False result = search(arr, target) print(result) # True"},{"prompt":"Write a python program for calculating the average of two numbers.","completion":"def average(a, b): return (a+b)/2 a = 10 b = 15 avg = average(a, b) print(avg)"},{"prompt":"Write a Python program to sort a list of dictionaries using a custom key. lst = [{'name': 'Tim', 'age': 20}, {'name': 'Bob', 'age': 10}, {'name': 'Chris', 'age': 30}]","completion":"sorted_list = sorted(lst, key = lambda x: x['name']) print(sorted_list)"},{"prompt":"Create a python script that takes in a number and tells whether it is odd or even. number:9","completion":"def evenOdd(number): if (number % 2 == 0): print(\\"Even\\") else: print(\\"Odd\\") evenOdd(number)"},{"prompt":"Build a deep learning model in Python that predicts the stock price","completion":"import numpy as np from keras.models import Sequential from keras.layers import Dense, Dropout, LSTM def create_model(input_shape): model = Sequential() model.add(LSTM(128, input_shape=input_shape)) model.add(Dropout(0.3)) model.add(Dense(1)) model.compile(loss='mse', optimizer='rmsprop') return model input_shape = (X_train.shape[1],1) model = create_model(input_shape) model.fit(X_train, y_train, batch_size=32, epochs=30)"},{"prompt":"Create a function in Python that counts the occurrence of a given character in a string.","completion":"def count_occurrence(string, character): count = 0 for c in string: if c == character: count += 1 return count"},{"prompt":"Generate a python program that implements a data structure for a binary tree.","completion":"# Python program to implement a binary tree # A class that represents an individual node in a Binary Tree class Node: def __init__(self, key): self.left = None self.right = None self.val = key # A class to represent the Binary Tree class BinaryTree: def __init__(self): self.root = None def insert(self, key): if self.root is None: self.root = Node(key) else: self._insert(self.root, key) def _insert(self, curr_node, key): if key < curr_node.val: if curr_node.left is None: curr_node.left = Node(key) else: self._insert(curr_node.left, key) elif key > curr_node.val: if curr_node.right is None: curr_node.right = Node(key) else: self._insert(curr_node.right, key) def inOrder(self): res = [] self._inOrder(self.root, res) return res def _inOrder(self, curr_node, res): if curr_node: self._inOrder(curr_node.left, res) res.append(curr_node.val) self._inOrder(curr_node.right, res) def preOrder(self): res = [] self._preOrder(self.root, res) return res def _preOrder(self, curr_node, res): if curr_node: res.append(curr_node.val) self._preOrder(curr_node.left, res) self._preOrder(curr_node.right, res) def postOrder(self): res = [] self._postOrder(self.root, res) return res def _postOrder(self, curr_node, res): if curr_node: self._preOrder(curr_node.left, res) self._preOrder(curr_node.right, res) res.append(curr_node.val)"},{"prompt":"Generate a code to find the number of 1bits in an integer","completion":"# Python Program to count the number of ones in a number. def FindOnes(num): count = 0 while (num): num = num & (num - 1) count = count + 1 return count # Driver Code num = 23 print(FindOnes(num))"},{"prompt":"Generate a Python code to calculate average temperatures from a list of temperatures. [22.5, 18.7, 30.1]","completion":"def get_average(temps): sum = 0 for temp in temps: sum += temp avg = sum / len(temps) return avg temperatures = [22.5, 18.7, 30.1] average_temp = get_average(temperatures) print(\\"Average temperature:\\", average_temp)"},{"prompt":"Classify the following Python code as a linear search, binary search, or other. def search(items, item): for i in range(len(items)): if items[i] == item: return i return 1","completion":"This is a linear search."},{"prompt":"Write a Python code to check if a given list contains all unique elements. list = [3, 1, 4, 6, 5]","completion":"def is_unique_list (numbers): return len(numbers) == len(set(numbers))"},{"prompt":"Deploy a Machine Learning model in AWS using Docker containers. Not applicable","completion":"# Building the Docker Image FROM ubuntu:18.04 # Setting up the environment RUN apt-get update -y && apt-get install -y python3-pip python3-dev RUN pip3 install -U scikit-learn # Copying the application code COPY application.py / # Running the application CMD [\\"python3\\", \\"application.py\\"] # Building the Docker Image docker build -t prediction-model . # Pushing the Docker Image to Amazon ECR (aws ecr get-login --no-include-email) docker tag prediction-model:latest <your-aws-account-id>.dkr.ecr.us-east-1.amazonaws.com/prediction-model:latest docker push <your-aws-account-id>.dkr.ecr.us-east-1.amazonaws.com/prediction-model:latest # Setting up AWS ECS # 1. Create a new ECS cluster # 2. Create a new task definition # 3. Create a new service # 4. Configure the services to use the task definition with our Docker image # 5. Deploy the task and service"},{"prompt":"Create an algorithm in Python to evaluate an algebraic expression. expression = 3*(2+7)","completion":"def evaluate_expression(expression): stack = [] expression_list = expression.split(\\" \\") operators = ['+', '-', '*', '/'] for i in expression_list: if i not in operators: stack.append(int(i)) else: val1 = stack.pop() val2 = stack.pop() if i == \\"+\\": stack.append(val2 + val1) elif i == \\"-\\": stack.append(val2 - val1) elif i == \\"*\\": stack.append(val2 * val1) else: stack.append(int(val2 / val1)) return stack.pop() print(evaluate_expression(\\"3*(2+7)\\")) # prints 27"},{"prompt":"Create a Python program to determine if a given character is an uppercase or lowercase alpha character.","completion":"def check_alpha_case(char): \\"\\"\\" Determine if a given character is an uppercase or lowercase alpha character. char: the character to be checked \\"\\"\\" if char.isalpha() and char.isupper(): return \\"uppercase\\" elif char.isalpha() and char.islower(): return \\"lowercase\\" else: return False"},{"prompt":"Create a web application usingPython and Flask that displays a simple Hello World page. Not applicable","completion":"from flask import Flask app = Flask(__name__) @app.route(\\"/\\") def hello(): return \\"Hello World!\\" if __name__ == '__main__': app.run()"},{"prompt":"Create a function in Python that takes in an integer and returns an array containing its prime factors. 38","completion":"def prime_factors(num): res = [] while num%2 == 0: num = num/2 res.append(2) for i in range(3, int(num**0.5)+1,2): while num%i == 0: num = num//i res.append(i) if num > 2 : res.append(int(num)) return res print(prime_factors(38))"},{"prompt":"Create a Python program to reverse a given stack without recursion. stack = [1, 2, 3]","completion":"def reverse_stack(stack): rev_stack = [] while(stack): rev_stack.append(stack.pop()) return rev_stack # Usage stack = [1, 2, 3] print(reverse_stack(stack)) # => [3, 2, 1]"},{"prompt":"Create a class in Python that takes two integer arguments and implements the __add__ method.","completion":"class adder: def __init__(self, x, y): self.x = x self.y = y def __add__(self): return self.x + self.y"},{"prompt":"Create a basic web scraper in Python using the BeautifulSoup library and the Requests library. Not applicable","completion":"import requests from bs4 import BeautifulSoup # URL of the site to scrape url = 'https://www.example.com' # Send the request to the URL response = requests.get(url) # Parse the html content html_soup = BeautifulSoup(response.text, 'html.parser') # Get all of the <div> elements with a class of 'content' content = html_soup.find_all('div', class_ = 'content') # Iterate over the content and print out the text for item in content: print(item.text.strip())"},{"prompt":"Write a Python program that takes a list of strings as input, sorts it alphabetically, and output the sorted list. ['apple', 'pear', 'banana', 'grape']","completion":"def sort_alphabetically(input_list): results = sorted(input_list) return results input_list = ['apple', 'pear', 'banana', 'grape'] print(sort_alphabetically(input_list)) # Output: ['apple', 'banana', 'grape', 'pear']"},{"prompt":"Write an algorithm in Python to calculate the sum of even numbers in an array between a given range. arr = [2, 4, 6, 8, 10, 11, 12, 15, 18]","completion":"def sumEvensInRange(arr, lower, upper): evens_sum = 0 for num in arr: if num >= lower and num <= upper and num % 2 == 0: evens_sum += num return evens_sum"},{"prompt":"Construct a Python program to print the armstrong numbers in a given range. An armstrong number is an integer whose sum of each digit raised to the power of length of the number is equal to the original number itself.","completion":"def is_armstrong_number(n): num_str = str(n) power = len(num_str) total = 0 for digit in num_str: total += int(digit)**power return total == int(n) def armstrong_numbers(start, end): for n in range(start, end+1): if is_armstrong_number(n): print(n)"},{"prompt":"Create a Python program to detect the occurrence of a certain word in a collection of text documents. A collection of 10 text documents from a news website and the word is coronavirus.","completion":"import os def detect_coronavirus(input_dir): # input_dir - The directory containing the text documents total_occurrences = 0 # Iterate through each file in the input_dir for file in os.listdir(input_dir): file_path = os.path.join(input_dir, file) # Read the file with open(file_path, 'r') as f: data = f.read() # Detect the occurrences of the word \\"coronavirus\\" occurrence_count = data.lower().count(\\"coronavirus\\") total_occurrences += occurrence_count return total_occurrences # Call the function occurrences = detect_coronavirus('input_dir') print(f'The word \\"coronavirus\\" has occurred {occurrences} times.')"},{"prompt":"Write a Python program that takes an integer as input and check if the number is prime or not. 45","completion":"def is_prime(n): if n < 2: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True"},{"prompt":"Create a Python Django application with custom user model. Custom fields: first_name, last_name","completion":"# settings.py AUTH_USER_MODEL = 'myapp.MyUser' # models.py from django.contrib.auth.models import AbstractUser class MyUser(AbstractUser): first_name = models.CharField(max_length=30) last_name = models.CharField(max_length=30) # forms.py from django import forms from myapp.models import MyUser class MyUserForm(forms.ModelForm): class Meta: model = MyUser fields = ('username','password','first_name','last_name') # views.py from django.shortcuts import render from myapp.forms import MyUserForm def register(request): if request.method == 'POST': form = MyUserForm(request.POST) if form.is_valid(): form.save() return HttpResponseRedirect('/') else: form = MyUserForm() return render(request, 'register.html', {'form': form})"},{"prompt":"This code is a Python script for a server. To run the server, execute the main function in the script. The server can handle multiple clients and multiple ports. The server uses TCP and UDP protocols for communication. The server can be run with multiple workers, but this feature is only available on Unix/Linux. The server supports encryption using a cipher class. The server can be configured using a configuration file.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- ''' æå¡ç«¯ ps:ææ¯åçå®local.pyåçserver.py; åç°ï¼é¤äºå¤ç¨æ·çæè·¯å¤æ­ï¼å«çä»£ç æè·¯æ¯ä¸è´çï¼é¨åæ²¡ææ³¨éï¼å¯ä»¥åå»ç¿»ç¿»local.py ''' from __future__ import absolute_import, division, print_function, with_statement import sys import os import logging import signal sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../')) from shadowsocks import utils, daemon, encrypt, eventloop, tcprelay, udprelay, asyncdns def main(): utils.check_python() # is_local=false config = utils.get_config(False) daemon.daemon_exec(config) utils.print_shadowsocks() # æ¯æå¤å®¢æ·ç«¯ if config['port_password']: if config['password']: logging.warn('warning: port_password should not be used with ' 'server_port and password. server_port and password ' 'will be ignored') else: config['port_password'] = {} server_port = config['server_port'] # è¥åç°æå¤ç¨æ·éç½®ï¼éç¨âç«¯å£->å¯ç âçæ å°æ¹å¼ã if type(server_port) == list: for a_server_port in server_port: config['port_password'][a_server_port] = config['password'] else: config['port_password'][str(server_port)] = config['password'] # Create an instance of the cipher class encrypt.try_cipher(config['password'], config['method']) tcp_servers = [] udp_servers = [] dns_resolver = asyncdns.DNSResolver() # ä¸ä¸ªæå¡å¨ç«¯å¯ä»¥æå¼å¤ä¸ªç«¯å£ # å¯¹äºæ¯ä¸ªç«¯å£ï¼é½è¦æ°å»ºä¸ä¸ªå¯¹åºçå¤çå¨ for port, password in config['port_password'].items(): a_config = config.copy() a_config['server_port'] = int(port) a_config['password'] = password logging.info(\\"starting server at %s:%d\\" % (a_config['server'], int(port))) # éä¸å å°tcpãudpåè¡¨ tcp_servers.append(tcprelay.TCPRelay(a_config, dns_resolver, False)) udp_servers.append(udprelay.UDPRelay(a_config, dns_resolver, False)) def run_server(): # æ¶å°éåºä¿¡å·çå¤çå½æ°ï¼å³é­ææsocketéæ¾èµæºã def child_handler(signum, _): logging.warn('received SIGQUIT, doing graceful shutting down..') # å³é­ææçsocketï¼ä¸å¥è¯æå®ï¼å¥½åå®³ï¼è·ªæing # map(function, sequence[, sequence, ...]) -> list # Return a list of the results of applying the function to the items of the argument sequence(s). list(map(lambda s: s.close(next_tick = True), tcp_servers + udp_servers)) # æ¶å°éåºä¿¡å·ï¼è°ç¨child_handlerè¿è¡èªæã signal.signal(getattr(signal, 'SIGQUIT', signal.SIGTERM), child_handler) # æ¶å°éåºä¿¡å·ï¼è°ç¨int_handlerè¿è¡èªæã def int_handler(signum, _): sys.exit(1) signal.signal(signal.SIGINT, int_handler) try: loop = eventloop.EventLoop() dns_resolver.add_to_loop(loop) # æææççå¬ç«¯å£æ·»å å°æ¶é´å¾ªç¯ä¸­ï¼ä¸å¥è¯æå®ï¼å¥½åå®³ï¼è·ªæing list(map(lambda s: s.add_to_loop(loop), tcp_servers + udp_servers)) loop.run() except (KeyboardInterrupt, IOError, OSError) as e: logging.error(e) if config['verbose']: import traceback traceback.print_exc() os._exit(1) # Shadowsocks supports spawning child processes like nginx. # You can use --workers to specify how many workers to use. # This argument is only supported on Unix and ssserver. # Currently UDP relay does not work well on multiple workers. # æ¯æånginxå¤è¿ç¨ï¼å¯ä»¥å¨configä¸­æå®workerçæ°éãä»å¨linuxä¸çæã # ç®åçbugï¼workerè®¾ä¸ºå¤§äº1æ¶ï¼udpè½¬åæå¯è½å·¥ä½ä¸æ­£å¸¸ if int(config['workers']) > 1: if os.name == 'posix': children = [] is_child = False for i in range(0, int(config['workers'])): r = os.fork() if r == 0: logging.info('worker started') is_child = True run_server() break else: children.append(r) if not is_child: def handler(signum, _): for pid in children: try: os.kill(pid, signum) os.waitpid(pid, 0) except OSError: # child may already exited pass sys.exit() signal.signal(signal.SIGTERM, handler) signal.signal(signal.SIGQUIT, handler) signal.signal(signal.SIGINT, handler) # master for a_tcp_server in tcp_servers: a_tcp_server.close() for a_udp_server in udp_servers: a_udp_server.close() dns_resolver.close() for child in children: os.waitpid(child, 0) else: logging.warn('worker is only available on Unix/Linux') run_server() else: run_server() if __name__ == '__main__': main()"},{"prompt":"mplement an algorithm in Python to check if a linked list is palindrome or not. nodelist: 3, 5, 6, 6, 5, 3","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node def reverseList(self): prev = None current = self.head while(current is not None): next = current.next current.next = prev prev = current current = next self.head = prev def compareLists(self, head1, head2): while(head1 and head2): if head1.data != head2.data: return 0 head1 = head1.next head2 = head2.next if (head1 and not head2) or (head2 and not head1): return 0 return 1 def checkPalindrome(self): slow_ptr = self.head fast_ptr = self.head count = 0 while(fast_ptr is not None and fast_ptr.next is not None): fast_ptr = fast_ptr.next.next slow_ptr = slow_ptr.next count+=1 second_half = self.reverseList() isPalindrome = self.compareLists(self.head, second_half) self.reverseList() if isPalindrome: return True else: return False llist = LinkedList() llist.push(3) llist.push(5) llist.push(6) llist.push(6) llist.push(5) llist.push(3) llist.checkPalindrome() # Output: True"},{"prompt":"Suggest a modification to the following python code to optimize its runtime performance def get_sum(numbers): sum = 0 for i in numbers: sum += i return sum","completion":"def get_sum(numbers): sum = 0 for i in range(len(numbers)): sum += numbers[i] return sum"},{"prompt":"Create a Python script to remove certain characters given in a set from a string. ABCDEFGHIJKLMNOPQRSTUVWXYZ set = {'A', 'C', 'D', 'E'}","completion":"string = \\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\" remove_chars = set(['A', 'C', 'D', 'E']) result = \\"\\".join(char for char in string if char not in remove_chars) print(result)"},{"prompt":"eate a loop in Python to generate the following sequence [1,2,4,8,16,32,64]","completion":"seq = [1] for i in range(1,7): seq.append(seq[-1]*2) print(seq)"},{"prompt":"Generate a Python program that takes an input of a number and checks if it is prime. 7","completion":"def is_prime(num): if num == 2: return True elif num < 2 or not all(num % i for i in range(2, num)): return False return True num = 7 result = is_prime(num) print(result)"},{"prompt":"Create a function in Python that takes a string and an integer as arguments and returns the string with the integer number of characters removed from the front of the string. Hello, World!, 5","completion":"def remove_from_front(string, num_chars): return string[num_chars:] result = remove_from_front(\\"Hello, World!\\", 5) print(result)"},{"prompt":"Construct a ML pipeline for text classification in Python Not applicable","completion":"from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.pipeline import Pipeline from sklearn.linear_model import LogisticRegression model = Pipeline([('tfidf', TfidfVectorizer()), ('clf', LogisticRegression())])"},{"prompt":"Create a Python code to delete the last element in a list. [1, 2, 2, 4, 4]","completion":"def delete_last(lst): return lst[:-1] result = delete_last([1, 2, 2, 4, 4]) print(result)"},{"prompt":"Generate a Python program to find the longest sequence of increasing numbers in a given list. data = [1, 10, 3, 11, 7, 8, 4, 2]","completion":"data = [1, 10, 3, 11, 7, 8, 4, 2] max_sequence = 0 curr_sequence = 0 prev = -1 for num in data: # Check if the current number is larger than the previous one if num > prev: curr_sequence += 1 max_sequence = max(max_sequence, curr_sequence) else: # Reset the length of the current sequence to 1 curr_sequence = 0 print(max_sequence) # Output 3"},{"prompt":"Create a Python program to check if a given number is a power of 2.","completion":"def is_power_of_two(num): if num == 0: return False while num % 2 == 0: num /= 2 return num == 1 print(is_power_of_two(32))"},{"prompt":"Develop a solution in Python to convert the Roman numeral representation of a number to its numerical equivalent. IV","completion":"def convertRoman(chars): # We will use a dictionary to reference Roman numerals roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000} int_value = 0 for i in range(len(chars)): # Loop through each Roman numeral numer = roman[chars[i]] # Get the numerical equivalent of the Roman numeral if (i+1)<len(chars) and roman[chars[i+1]] > numer: # Check if the Roman numeral is followed by a larger one int_value -= numer # If yes, subtract the value of the numeral else: int_value += numer # Else, add it return int_value chars = 'IV' print (convertRoman(chars))"},{"prompt":"Create a program in Python which takes a list of tuples as an input, and prints true if it contains two elements that sum to 10. [(2, 8), (4, 6), (7, 3)]","completion":"def checkSum(arr): for (a, b) in arr: if a + b == 10: return True return False arr = [(2, 8), (4, 6), (7, 3)] print(checkSum(arr)) # True"},{"prompt":"Design a Python algorithm to generate optimized path for a robot on a maze. A 5x5 grid with walls at different places.","completion":"def generate_path(grid): #initialize an empty list to hold the path path = [] #initialze to false visited = [[false for x in range(5)] for y in range(5)] #start from the top left corner x = 0 y = 0 while (x != 4 and y != 4): #mark the node as visited visited[x][y] = True #check if it is possible to go down if y+1<5 and visited[x][y+1] != True and grid[x][y+1] == 0 : path.append(\\"down\\") y = y+1 #check if it is possible to go right elif x+1<5 and visited[x+1][y] != True and grid[x+1][y] == 0 : path.append(\\"right\\") x = x+1 #backtrack else: if path[-1] == \\"down\\" : y = y-1 else: x = x-1 path.pop() #mark the end/destination cell as visited visited[4][4] = True #append the path to tuhe list path.append(\\"Destination Reached\\") #return the optimal path return path"},{"prompt":"Create snippets of positive or negative examples for training based on a given runData file. The function makeSnippets() takes in the runData file, a boolean value isNegative to determine if the snippets should be negative or positive, and other optional parameters such as the number of negative snippets to generate and the time in nanoseconds for the prefix and postfix of the snippets. The function returns a list of snippets.","completion":"#!/usr/bin/env python # Chris Riederer # Google, Inc # 2014-07-25 import test_detect import numpy as np import os import json import random import sys def makeNegativeSnippets(runData, number, snipPrefixTime=100000000, snipPostfixTime=500000000): return makeSnippets(runData, True, numberNegative=number, snipPrefixTime=snipPrefixTime, snipPostfixTime=snipPostfixTime) def makePositiveSnippets(runData, snipPrefixTime=100000000, snipPostfixTime=500000000): return makeSnippets(runData, False, snipPrefixTime=snipPrefixTime, snipPostfixTime=snipPostfixTime) def makeSnippets(runData, isNegative, numberNegative=None, snipPrefixTime=10000000, snipPostfixTime=100000000): \\"\\"\\"Given a runData file, makes smaller snippets of positive examples for training runData: the JSON object representation of a recording snipPrefixTime: the time, in NANOSECONDS, preceding the label time that we're putting in the snippet snipPrefixTime: the time, in NANOSECONDS, after the label time that we're putting in the snippet \\"\\"\\" data = np.array(runData[\\"magnetometer\\"]) data = data[data[:, 2:].any(1)] domain = data[:,0] if isNegative and len(runData['labels']) != 0: raise Exception(\\"Length of labels should be 0 when generating negative examples\\") elif not isNegative and len(runData['labels']) == 0: raise Exception(\\"Length of labels cannot be 0 when generating positive examples\\") elif isNegative: # generate start point for snippets, and ensure snippet is entirely in recorded data possibleStartPoints = domain[domain < domain[-1] - snipPostfixTime - snipPostfixTime] labels = [[labelTime, 1] for labelTime in random.sample(possibleStartPoints, numberNegative)] else: labels = runData['labels'] snippets = [] for index, (labelTime, label) in enumerate(labels): snippet = runData.copy() if isNegative: snippet['labels'] = [] else: snippet['labels'] = [[labelTime, label]] snippet['filename'] = \\"%s-%02d.json\\" % (runData['filename'].rsplit('.')[0], index) snippetIndices = (domain >= labelTime-snipPrefixTime) & (domain < labelTime+snipPostfixTime) snippet['magnetometer'] = list(map(list, data[snippetIndices, :])) # convert back to python list, so JSON can serialize snippets.append(snippet) return snippets def makeSnippet(runData, snipId, startTime, snipLength=600000000): data = np.array(runData[\\"magnetometer\\"]) data = data[data[:, 2:].any(1)] domain = data[:,0] snippet = runData.copy() labels = [[labelTime, label] for labelTime, label in runData['labels'] if startTime < labelTime < startTime+snipLength] snippet['labels'] = labels # todo: filename snippet['filename'] = \\"%s-hn-%02d.json\\" % (runData['filename'].rsplit('.')[0], snipId) snippetIndices = (domain >= startTime) & (domain < startTime+snipLength) snippet['magnetometer'] = list(map(list, data[snippetIndices, :])) # convert back to python list, so JSON can serialize return snippet def findHardNegatives(runData, snipLength=600000000): \\"\\"\\"Find portions of a signal that are difficult for our detector to realize are negative\\"\\"\\" # TODO: initially writing this just for negative runData files... should make it work with everything detector = test_detect.OriginalDetector() snippet = runData.copy() data = np.array(runData[\\"magnetometer\\"]) data = data[data[:, 2:].any(1)] domain = data[:,0] min_cost = float('inf') for startTime in domain[(domain < domain[-1] - snipLength)]: snippetIndices = (domain >= startTime) & (domain < startTime+snipLength) snippet['magnetometer'] = list(map(list, data[snippetIndices, :])) # convert back to python list, so JSON can serialize snippet['labels'] = [] cost = detector.evaluateCost(snippet, True) if cost < min_cost: min_cost = cost worst_snip = snippet.copy() return worst_snip def createSnippetsFromRunDataList(runDataList): runDataList = test_detect.GetRunDataFromArgs(sys.argv[1:]) for runData in runDataList: snips = createSnippetsFromPlot(runData) for snip in snips: newFilename = os.path.join('relabeled', snip['filename']) with open(newFilename, 'w') as f: print newFilename json.dump(snip, f) def createSnippetsFromPlot(runData, inputLabels=[], snipLength=600000000): \\"\\"\\"This creates a plot from runData. When the user clicks on the plot, a snippet of length snipLength nanoseconds is created and plotted. The user can repeat this process as many times as he or she likes. When the user closes the original plot, the list of the created snippets is returned. \\"\\"\\" snippets = [] def onclick(event): startTime = event.xdata print \\"Start time of snippet: %16d\\" % int(startTime) snipId = len(snippets) snip = makeSnippet(runData, snipId, startTime, snipLength=snipLength) snippets.append(snip) # add to snippets test_detect.PlotData(snip) # plot new snip test_detect.pl.show() test_detect.PlotData(runData, inputLabels=inputLabels) fig = test_detect.pl.gcf() cid = fig.canvas.mpl_connect('button_press_event', onclick) test_detect.pl.show() return snippets if __name__ == '__main__': runDataList = test_detect.GetRunDataFromArgs(sys.argv[1:]) createSnippetsFromRunDataList(runDataList) # print sum([len(runData['labels']) for runData in runDataList])"},{"prompt":"Optimize the following Python code by replacing the two for loops with one. list1 = [1,2,3] list2 = [4,5,6] for i in list1: for j in list2: print(i * j)","completion":"list1 = [1,2,3] list2 = [4,5,6] for i,j in zip(list1, list2): print(i * j)"},{"prompt":"Write a Python program to filter out all the even numbers from a list. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]","completion":"def filter_even(numbers): return [n for n in numbers if n %2 == 0]"},{"prompt":"Create a program in any programming language to display a UI widget.","completion":"//Use Python import tkinter as tk # Create the main window root = tk.Tk() # Create a label label = tk.Label(master = root, text = \\"Hello World!\\") # Put the label in the window label.pack() # Start the mainloop root.mainloop()"},{"prompt":"Design a Python program to reverse the words in a sentence. The quick brown fox","completion":"def reverse_words(sentence): words = sentence.split(\\" \\") reversed_words = reversed(words) reversed_sentence = \\" \\".join(reversed_words) return reversed_sentence result = reverse_words(\\"The quick brown fox\\") print(result)"},{"prompt":"Construct a Python class named Person which contains the instance variables name, age, and gender.","completion":"Class Person: def __init__(self,name,age,gender): self.name = name self.age = age self.gender = gender"},{"prompt":"Create a Python code generator that takes an input coding problem (for the same language) and outputs the code for it. Problem: Given a list of strings, write a Python program to count the frequency of each string.","completion":"# Set up an empty dictionary # to store the frequencies of strings string_freq = {} # Iterate the list of strings for string in list_of_strings: # If the string is already in # the dictionary, increment its frequency if string in string_freq: string_freq[string] += 1 else: # If the string is not in the # dictionary, initialise its frequency string_freq[string] = 1 # Print the frequencies of the strings for string,freq in string_freq.items(): print(string + \\": \\" + str(freq) + \\" times\\")"},{"prompt":"Create a web scraper using Python and Selenium to scrape information from IMDB website.","completion":"from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC import pandas as pd # Initialize Webdriver driver = webdriver.Firefox() # Open the IMDB website driver.get('https://www.imdb.com/chart/top?ref_=ft_250') # Wait until the elements on the web page are loaded WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.ID, \\"chart\\"))) # Parse and store the information to a pandas dataframe titles = driver.find_elements_by_class_name('titleColumn') ratings = driver.find_elements_by_class_name('ratingColumn') df = pd.DataFrame(columns = ['title', 'rating']) for title, rating in zip(titles, ratings): df = df.append({'title': title.text, 'rating':rating.text}, ignore_index=True) # Close the browser driver.close()"},{"prompt":"Build a classifier in Python using scikitlearn that identifies the type of flower (iris) provided with features such as petal length and width.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier # Load the dataset data = pd.read_csv('iris.csv') # Define X and y X = data.drop('species', axis=1) y = data['species'] # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Build the decision tree classifier classifier = DecisionTreeClassifier() classifier.fit(X_train, y_train) # Evaluate the classifier score = classifier.score(X_test, y_test) print('Classifier accuracy: ', score)"},{"prompt":"Write a Python generator to generate a range of integer numbers indefinitely.","completion":"def generate_numbers(): n = 0 while True: yield n n += 1"},{"prompt":"Create a python program to scrape a website and extract information about cities. The website contains a list of cities in a table with the following columns: City, Country, Population, Are","completion":"import requests import lxml.html as lh # Link of the website to get cities url = 'http://example.com/cities' # Create list of cities cities = [] # Get web page response = requests.get(url) # Parse the web page to get the table doc = lh.fromstring(response.content) tr_elements = doc.xpath('//tr') # Loop through each row of the table for tr in tr_elements[1:]: # Get the data from each column td = tr.xpath('td/text()') name = td[0].strip() country = td[1].strip() population = td[2].strip() area = td[3].strip() # Add a city to the list cities.append((name,country,population,area)) # Print the list of cities print(cities)"},{"prompt":"Given a URL, write a Python script to fetch and decode the HTML web page using the \`requests\` library. https://example.org/","completion":"import requests url = \\"https://example.org/\\" response = requests.get(url) if response.status_code == 200: html_page = response.content.decode('utf-8')"},{"prompt":"Use regex in a Python program to find all instances of the word the. The quick brown fox jumps over the lazy dog","completion":"import re string = 'The quick brown fox jumps over the lazy dog' # Prints matches matches = re.findall('the', string, re.IGNORECASE) print(matches)"},{"prompt":"Design a Python program to generate a random password of 8 characters, including at least one lowercase, one uppercase and two numerical characters.","completion":"import random def generate_password(): characters = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\" password_length = 8 password = \\"\\" for i in range(password_length): index = random.randint(0, len(characters) - 1) password += characters[index] if not any(char.islower() for char in password): password = password[:7] + random.choice(string.ascii_lowercase) if not any(char.isupper() for char in password): password = password[:7] + random.choice(string.ascii_uppercase) if not any(char.isdigit() for char in password): password = password[:7] + random.choice(string.digits) return password print(generate_password())"},{"prompt":"Create a function in Python that parses a string and returns a dictionary with the keyvalue pairs. string = key1=value1,key2=value2,key3=value3","completion":"def parseStringToDict(string): # Split string into key-value pairs pairs = string.split(',') # Create an empty dict for storing the key-value pairs values = {} # Iterate over the key-value pairs for pair in pairs: key, value = pair.split('=') values[key] = value # Return the dictionary return values # Example usage mapping = parseStringToDict(string) # Output: {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}"},{"prompt":"Compose an algorithm to check if two strings are an anagram in Python.","completion":"def is_anagram(s1, s2): # Remove whitespace and covert strings to lowercase s1 = s1.replace(\\" \\", \\"\\").lower() s2 = s2.replace(\\" \\", \\"\\").lower() if len(s1) != len(s2): # An anagram should have the same length return False # Create dictionaries containing characters of each string char_count1 = {} char_count2 = {} # Fill the dictionaries for char in s1: if char in char_count1: char_count1[char] += 1 else: char_count1[char] = 1 for char in s2: if char in char_count2: char_count2[char] += 1 else: char_count2[char] = 1 # If dictionaries are equal, then both string are anagrams return char_count1 == char_count2"},{"prompt":"Create an algorithm in Python to delete a node in a singly linked list, given only access to that node.","completion":"class SinglyLinkedList: def __init__(self): self.head = None class Node: def __init__(self, value, next_node=None): self.value = value self.next_node = next_node def set_value(self, value): self.value = value def get_value(self): return self.value def set_next_node(self, next_node): self.next_node = next_node def get_next_node(self): return self.next_node def delete_node(node): node.value = node.next_node.value node.next_node = node.next_node.next_node if __name__ == '__main__': a = Node(2) b = Node(3) a.set_next_node(b) delete_node(a) print(b.get_value())"},{"prompt":"Create a function in Python that takes an array of numbers and prints out its maximum value. [1, 4, 8, 9, 10]","completion":"def print_max(arr): max_val = max(arr) print(max_val) print_max([1, 4, 8, 9, 10])"},{"prompt":"Create a for loop in Python to reverse a given string. Tex","completion":"text = \\"Text\\" rev_text = \\"\\" for i in range(len(text) - 1, -1, -1): rev_text = rev_text + text[i] print(rev_text)"},{"prompt":"Generate a Python program to find the maximum subarray sum in an array. [2, 3, 4, 1, 2, 1, 5, 3]","completion":"def max_subarray_sum(arr): max_so_far = 0 max_ending_here = 0 for i in range(len(arr)): max_ending_here = max_ending_here + arr[i] if max_ending_here < 0: max_ending_here = 0 if (max_so_far < max_ending_here): max_so_far = max_ending_here return max_so_far # Driver code arr = [-2, -3, 4, -1, -2, 1, 5, -3] print(\\"Maximum subarray sum is \\", max_subarray_sum(arr)) # Output: Maximum subarray sum is 9"},{"prompt":"Write a Python program to print the numbers of a specified list after removing even numbers from it. data_list = [12, 17, 24, 29, 18, 11, 16]","completion":"def remove_even_numbers(data_list): return [x for x in data_list if x%2 != 0] print(remove_even_numbers(data_list))"},{"prompt":"Write a python program to take user input and perform sum operation.","completion":"num1=int(input(\\"Enter a number:\\")) num2=int(input(\\"Enter another number:\\")) #sum sum = num1 + num2 #print the result print('Sum of {0} and {1} is {2}'.format(num1, num2, sum))"},{"prompt":"Create a Python program for constructing a tree from a given inorder and preorder traversals. Preorder Traversal: A, B, E, K, C, F, G, D Inorder Traversal: E, B, K, A, F, C, D, G","completion":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None def construct_tree(preorder, inorder): if not preorder or not inorder: return None # first element of preorder is the root root = Node(preorder[0]) # get index of root in inorder idx = inorder.index(root.data) # left and right subtrees are constructed recursively root.left = construct_tree(preorder[1: idx + 1], inorder[0:idx]) root.right = construct_tree(preorder[idx + 1:], inorder[idx + 1:]) return root if __name__ == \\"__main__\\": preorder = [\\"A\\", \\"B\\", \\"E\\", \\"K\\", \\"C\\", \\"F\\", \\"G\\", \\"D\\"] inorder = [\\"E\\", \\"B\\", \\"K\\", \\"A\\", \\"F\\", \\"C\\", \\"D\\", \\"G\\"] root = construct_tree(preorder, inorder)"},{"prompt":"Design an algorithm to check if a given number is prime in Python. n = 19","completion":"def is_prime(n): \\"\\"\\"Check if a given number is prime.\\"\\"\\" # Corner case if n <= 1: return False # Check for divisibility for i in range(2, n): if n % i == 0: return False # Return true if it is not divisible by any number return True # Output print(is_prime(n))"},{"prompt":"Modify the Python script to store the correlation coefficients in an array.","completion":"import csv import numpy as np def read_csv(filename): data = [] with open(filename, 'r') as csvfile: csvreader = csv.reader(csvfile) for row in csvreader: data.append(row) return np.array(data).astype(float) def compute_corrcoef(data): corrcoefs = [] for i in range(data.shape[1]): for j in range(i + 1, data.shape[1]): r = np.corrcoef(data[:,i], data[:, j])[0,1] corrcoefs.append((i, j, r)) return np.array(corrcoefs)"},{"prompt":"Design a Python script to analyze a given text corpus and compute the probability of certain words occurring. Text corpus: The cat in the hat is a funny book. I really like the cat in the hat. Words: cat, h","completion":"# initialize the word probability counts word_prob_dict = {} # split the text corpus into sentences sentences = text.split('.') for word in words: word_prob_dict[word] = 0 # calculate the probability of the words appearing for sentence in sentences: for word in words: if word in sentence: word_prob_dict[word] = word_prob_dict[word] + 1 for word in words: word_prob_dict[word] = word_prob_dict[word] / len(sentences) print(word_prob_dict) # Output: {'cat': 0.5, 'hat': 0.5}"},{"prompt":"Create a program for counting the number of elements present in a userprovided array using Python. user_array = [1, 5, 15, 20]","completion":"def count_elements(array): count = 0 for item in array: count += 1 return count user_array = [1, 5, 15, 20] result = count_elements(user_array) print(result) # 4"},{"prompt":"Translate the following code from JavaScript to Python: function addTwo(num) { return num + 2; }","completion":"def add_two(num): return num + 2"},{"prompt":"Create a dictionary in Python containing the following keyvalue pairs: {name:John, age:30, occupation:teacher}","completion":"my_dict = {\\"name\\":\\"John\\", \\"age\\":30, \\"occupation\\":\\"teacher\\"}"},{"prompt":"Write a tweetbot Python script that daily acts as an alarm clock and sends tweets at a given time. Not applicable","completion":"import tweepy from datetime import datetime # Authentication auth = tweepy.OAuthHandler(\\"CONSUMER KEY\\", \\"CONSUMER SECRET\\") auth.set_access_token(\\"ACCESS TOKEN KEY\\", \\"ACCESS TOKEN SECRET\\") # Connect to the API api = tweepy.API(auth) # Set the time (in hours) for the tweet time = 17 # Tweet message message = \\"It's time to wake up!\\" # Set an infinite loop while True: # Get the current time now = datetime.now() if now.hour == time: # Tweet the message api.update_status(message) break"},{"prompt":"Create a python script to generate a list of numbers which are less than 1000 and divisible by 7.","completion":"list_of_numbers = [x for x in range(1000) if x % 7 == 0]"},{"prompt":"Generate a Python program to classify digits from 0 to 9 in a given dataset. Numbers from 0 to 9 are represented in the dataset as any number from 0 to 100.","completion":"import tensorflow as tf # Dataset contains numbers from 0 to 100 x = tf.placeholder('float', [None, 100]) # Output a one-hot encoded vector y = tf.placeholder('float') # Initialize weights and bias W = tf.Variable(tf.zeros([100, 10])) b = tf.Variable(tf.zeros([10])) # Softmax pred = tf.nn.softmax(tf.matmul(x, W) + b) # Cross entropy cost = tf.reduce_mean(-tf.reduce_sum(y * tf.log(pred), reduction_indices = 1)) # Gradient descent optimizer = tf.train.GradientDescentOptimizer(learning_rate = 0.5).minimize(cost) # Train with tf.Session() as sess: sess.run(tf.global_variables_initializer()) for epoch in range(10): _, c = sess.run([optimizer, cost], feed_dict = {x: data, y: labels}) # Label the numbers 0 to 9 correct_prediction = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1)) # Accuracy accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) print(\\"Epoch {}\\".format(epoch + 1)) print(\\"Accuracy {}\\".format(accuracy.eval({x: data, y: labels}))) # Get the weights and bias weight, bias = sess.run([W, b])"},{"prompt":"Build a collection of functions in python that can help analyze a text","completion":"def find_words(text): \\"\\"\\"Find all the words in the given text.\\"\\"\\" return text.split() def find_word_count(text): \\"\\"\\"Find the number of words in the given text.\\"\\"\\" words = find_words(text) return len(words) def find_average_word_length(text): \\"\\"\\"Find the average word length in the given text.\\"\\"\\" words = find_words(text) total_len = 0 for word in words: total_len += len(word) return total_len/len(words)"},{"prompt":"Write a Python program that classifies and prints the type of a given triangle based on the lengths of its sides. 8, 8, 12","completion":"a = 8 b = 8 c = 12 if a == b and b == c: print(\\"Equilateral triangle\\") elif a == b or b == c or a == c: print(\\"Isosceles triangle\\") else: print(\\"Scalene triangle\\")"},{"prompt":"Edit the following Python program to print all the even numbers from 0 to 10. for i in range(10): print(i)","completion":"for i in range(11): if i % 2 == 0: print(i)"},{"prompt":"Design an API in Python that can generate a random password with no less than 8 characters. Not applicable","completion":"import string import random def generate_password(): chars = string.ascii_letters + string.digits + string.punctuation length = 8 return ''.join(random.choices(chars, k=length)) # Generate password password = generate_password() print(password)"},{"prompt":"Create a code snippet in Python that sets the length of a list to 0. Not applicable","completion":"myList = [1, 2, 3, 4, 5] myList.clear() print(myList) // Output: []"},{"prompt":"Write a Python program to generate a random password consisting of lowercase alphabets, numerical digits and special characters. password length: 10","completion":"import string import random def generate_password(length): password_characters = string.ascii_lowercase + string.digits + string.punctuation password = ''.join(random.choice(password_characters) for i in range(length)) return password"},{"prompt":"Create a game of rock, paper, scissors against the computer by creating a python program that randomly chooses from the three choices.","completion":"from random import randint def rock_paper_scissors(): moves = [\\"rock\\", \\"paper\\", \\"scissors\\"] player_move = input(\\"Choose rock, paper, or scissors: \\") comp_move = moves[randint(0,2)] print(f\\"Computer's move is {comp_move}\\") if (player_move == comp_move): print(\\"It's a tie!\\") elif (player_move == \\"rock\\" and comp_move == \\"scissors\\"): print(\\"You win!\\") elif (player_move == \\"rock\\" and comp_move == \\"paper\\"): print(\\"Computer wins!\\") elif (player_move == \\"paper\\" and comp_move == \\"scissors\\"): print(\\"Computer wins!\\") elif (player_move == \\"paper\\" and comp_move == \\"rock\\"): print(\\"You win!\\") elif (player_move == \\"scissors\\" and comp_move == \\"rock\\"): print(\\"Computer wins!\\") elif (player_move == \\"scissors\\" and comp_move == \\"paper\\"): print(\\"You win!\\")"},{"prompt":"Write a Python program to convert a date string to the corresponding Unix timestamp. date_string = October 15, 2020","completion":"import time def convert_to_timestamp(date_string): return time.mktime(time.strptime(date_string, \\"%B %d, %Y\\"))"},{"prompt":"Develop a C++ code that creates a string array with 3 elements and sorts it in alphabetical order.","completion":"#include <algorithm> #include <iostream> #include <string> int main() { // String array std::string arr[] = { \\"Python\\", \\"Java\\", \\"C++\\" }; int n = sizeof(arr) / sizeof(arr[0]); // Sort the string array std::sort(arr, arr + n); // Print the sorted string array for (int i = 0; i < n; i++) std::cout << arr[i] << \\" \\"; return 0; }"},{"prompt":"Develop a Python program to calculate Fibonacci sequence.","completion":"def Fibonacci(n): F = [0]*(n+1) F[0] = 0; F[1] = 1 for i in range(2, n + 1): F[i] = F[i-1] + F[i-2] return F[n]"},{"prompt":"Write a Python program to optimize the given code to make it more operationally efficient. def add_two_numbers(a,b): c = a + b return c","completion":"def add_two_numbers(a, b): return a + b"},{"prompt":"Develop an algorithm in Python to check if an array contains a given number. array = [2, 4, 6, 8], number = 8","completion":"def checkNumber(array, number): for i in array: if i == number: return True return False checkNumber([2, 4, 6, 8], 8)"},{"prompt":"Produce a machine learning algorithm in Python that can identify digits from 09 in MNIST dataset.","completion":"from sklearn.neighbors import KNeighborsClassifier # Load the data from sklearn.datasets import fetch_openml X, y = fetch_openml('mnist_784', version=1, return_X_y=True) # Create the model and train it model = KNeighborsClassifier(n_neighbors=3) model.fit(X, y) # Test the model print(model.score(X, y))"},{"prompt":"Create a Python class for a generic linked list. The class should include methods for adding, deleting, and searching for a node in the list. Not applicable","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None def add_node(self, data): new_node = Node(data) new_node.next = self.head self.head = new_node def delete_node(self, data): curr_node = self.head prev_node = None while curr_node: if curr_node.data == data: if prev_node: prev_node.next = curr_node.next else: self.head = curr_node.next return prev_node = curr_node curr_node = curr_node.next def search_node(self, data): curr_node = self.head while curr_node: if curr_node.data == data: return curr_node curr_node = curr_node.next return None"},{"prompt":"Write a Python closure that prints the sum of two numbers when called.","completion":"def create_add_closure(): def adder(a, b): return a + b return adder add_func = create_add_closure() print(add_func(2, 3)) # Output: 5"},{"prompt":"Design an algorithm to analyze text data and identify patterns. Text data to be analyzed.","completion":"A Python implementation of the algorithm that takes the text data as input, identifies patterns in the data, and produces meaningful results."},{"prompt":"Generate Python code to automatically close a database connection after a specific duration of time","completion":"import time # Connect to the database db_conn = db_connect() # Set the duration in seconds duration = 10 # Start the timer start_time = time.time() # Check if the duration has been exceeded while (time.time() - start_time) < duration: # Continue with the database operation. # Close the database connection db_conn.close()"},{"prompt":"Design a Python function to calculate the area of a circle given its radius.","completion":"def area_of_circle(radius): return math.pi * (radius ** 2)"},{"prompt":"Generate a Python program which converts a given number of hours into minutes 20","completion":"def hours_to_minutes(hours): minutes = hours * 60 return minutes minutes = hours_to_minutes(20) print(minutes)"},{"prompt":"Create a program in Python to print all numbers divisible by 7 and not multiple of 5 between 2000 and 3200 (both included).","completion":"for num in range(2000, 3201): if (num % 7 == 0) and (num % 5 != 0): print(num)"},{"prompt":"Create a Python script for making HTTP requests to an API. The script should use the requests library for making the requests. URL of the API: http://example.com/ap","completion":"import requests api_url = 'http://example.com/api' # Make a get request response = requests.get(api_url) # Check status code if response.status_code == 200: # Get the response data as JSON data = response.json() # Do something with the data print(data) # Make a post request data = { 'name': 'John Doe' } response = requests.post(api_url, data=data) # Check status code if response.status_code == 201: # Get the reponse data as JSON data = response.json() # Do something with the data print(data)"},{"prompt":"Write an algorithm in Python to find the average value in an array of integers. [4, 10, 6, 8]","completion":"def avg(arr): # calculating length of array n = len(arr) total_sum = 0 for i in range(0, n): total_sum += arr[i] return total_sum / n # Driver code arr = [4, 10, 6, 8] assert avg(arr) == 7.0"},{"prompt":"Generate different configurations for a web application using Python. Not applicable","completion":"config = { 'templates': { 'index': 'templates/index.html', 'about': 'templates/about.html', 'contact': 'templates/contact.html' }, 'static': { 'css': 'static/css/main.css', 'js': 'static/js/main.js' }, 'credentials': { 'db_host': 'localhost', 'db_port': 3306, 'db_user': 'root', 'db_pass': '123456' } }"},{"prompt":"Create a Python program to find the sum of all divisors of an input number. No input.","completion":"def sum_divisors(num): r = 0 for i in range(1, num + 1): if num % i == 0: r += i return r num = int(input(\\"Input a number: \\")) print(\\"Sum of all divisors of input is\\", sum_divisors(num))"},{"prompt":"Generate Python code to compute the sum of items in a list. [2, 17, 3, 8]","completion":"sum = 0 for value in [2, 17, 3, 8]: sum += value print(sum)"},{"prompt":"Write a Python program to build an SQL query that creates a table based on the following fields: name (string), age (integer), and weight (float). Not applicable","completion":"sql_query = \\"\\"\\" CREATE TABLE Person ( name VARCHAR(255), age INTEGER, weight FLOAT ); \\"\\"\\" print(sql_query)"},{"prompt":"Suggest an improvement in the following python code so that it runs faster. import time def execute_slow_function(n): time.sleep(1) return n for i in range(10): execute_slow_function(i)","completion":"import time def execute_slow_function(n): time.sleep(1) return n # Create a thread pool of size 10 from multiprocessing.pool import ThreadPool pool = ThreadPool(10) # Execute the slow function in parallel in the thread pool results = pool.map(execute_slow_function, list(range(10)))"},{"prompt":"Create a random forest regressor in Python to predict house prices from square footage, number of bedrooms, and neighborhood. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestRegressor # get data df = pd.read_csv('house_prices.csv') # split the dataset into input and target variables X = df[['square_footage', 'bedrooms', 'neighborhood']] y = df['price'] # one-hot encode categorical variables X = pd.get_dummies(X) # split the dataset into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # create the regressor rf = RandomForestRegressor() # fit the model rf.fit(X_train, y_train) # make predictions y_pred = rf.predict(X_test)"},{"prompt":"mplement a Python program that takes an input string and returns the first character that appears more than once in that string. input_string = programming","completion":"def find_duplicate_char(input_string): char_count = {} for char in input_string: if char in char_count: return char else: char_count[char] = 1 return 'No duplicates found' input_string = \\"programming\\" print(find_duplicate_char(input_string)) # Output: # 'r'"},{"prompt":"Write a Python script that takes two strings s1 and s2 and prints out the longest common subsequence between them. s1 = ABCBA s2 = ABDCBA","completion":"def longest_common_subsequence(s1, s2): lengths = [[0 for j in range(len(s2)+1)] for i in range(len(s1)+1)] for i, x in enumerate(s1): for j, y in enumerate(s2): if x == y: lengths[i+1][j+1] = lengths[i][j] + 1 elif lengths[i+1][j] > lengths[i][j+1]: lengths[i+1][j+1] = lengths[i+1][j] else: lengths[i+1][j+1] = lengths[i][j+1] result = \\"\\" x, y = len(s1), len(s2) while x != 0 and y != 0: if lengths[x][y] == lengths[x-1][y]: x -= 1 elif lengths[x][y] == lengths[x][y-1]: y -= 1 else: assert s1[x-1] == s2[y-1] result = s1[x-1] + result x -= 1 y -= 1 return result"},{"prompt":"Generate a python program to generate a subset of random numbers from the given array. array = [4, 5, 2, 9, 8, 6, 2, 3, 7, 1] subset_size = 5","completion":"\\"\\"\\" Generate a python program to generate a subset of random numbers from the given array \\"\\"\\" import random # Function to generate a subset of random numbers def generate_subset(array, subset_size): # Get a list of indices indices = random.sample(range(len(array)), subset_size) # Get a list of elements from the array subset = [array[i] for i in indices] return subset if __name__ == '__main__': array = [4, 5, 2, 9, 8, 6, 2, 3, 7, 1] subset_size = 5 print(generate_subset(array, subset_size))"},{"prompt":"Create a program in Python that takes a text and tokenizes it into words. text = This is an example of tokenization","completion":"import re #Replace special characters with space text = re.sub(r'[^ws]',' ',text) #Split text tokens = text.split() print(tokens) #Output: ['This', 'is', 'an', 'example', 'of', 'tokenization']"},{"prompt":"Write a Python module to clean off noisy data by smoothing out shortrange fluctuations.","completion":"import numpy as np def smooth_data(data, window_size): window = np.ones(int(window_size))/float(window_size) return np.convolve(data, window, 'same')"},{"prompt":"Expand this function to compute the sum of a list in Python. def computeSum(L): total = 0 for x in L: total += x return total","completion":"def computeSum(L): \\"\\"\\"Computes the sum of a list Parameters ---------- L : list A list of numbers Returns ------- total : int The sum of all the numbers in the list \\"\\"\\" total = 0 for x in L: total += x return total"},{"prompt":"Given the following data, generate a Python program that sorts the data in ascending order. [5, 3, 10, 4, 1]","completion":"def sort_list(list_input): sorted_list = sorted(list_input) return sorted_list"},{"prompt":"Rank a set of URLs by their popularity using a Python program Set of URLs: [ www.example.com, www.example.net, www.example.org, www.example.io ]","completion":"import requests urls = [ 'www.example.com', 'www.example.net', 'www.example.org', 'www.example.io', ] rankings = {} for url in urls: r = requests.get(url) rankings[url] = r.status_code sorted_rankings = sorted(rankings.items(), key=lambda x: x[1], reverse=True) print(sorted_rankings) # Output: [('www.example.com', 200), ('www.example.net', 200), ('www.example.io', 200), ('www.example.org', 200)]"},{"prompt":"Build a Python module that contains a class called âFibonacciâ capable of generating a list of n Fibonacci numbers n = 5","completion":"class Fibonacci: def __init__(self, n): self.n = n self.fib = [] def generate_list(self): if self.n <= 0: print('Invalid input.') elif self.n == 1: self.fib = [0] else: self.fib = [0,1] for i in range(2,self.n): self.fib.append(self.fib[i-2] + self.fib[i-1]) return self.fib"},{"prompt":"Generate a python program to compute the cartesian product of two lists. list1 = [1,2,3] list2 = [4,5]","completion":"def cartesian_product(list1, list2): result_list = [] for i in list1: for j in list2: result_list.append([i,j]) return result_list list1 = [1,2,3] list2 = [4,5] cartesian_product_list = cartesian_product(list1, list2) print(cartesian_product_list) # [[1,4],[1,5],[2,4],[2,5],[3,4],[3,5]]"},{"prompt":"Generate a programming code with Python to count the frequency of each character in a given string. hello","completion":"def count_frequency(text): char_frequency = {} for i in text: if i in char_frequency: char_frequency[i] += 1 else: char_frequency[i] = 1 return char_frequency str1 = 'hello' res = count_frequency(str1) print (\\"Per character frequency is : n\\" + str(res))"},{"prompt":"build a class in Python that holds and manipulate a number of high scores for a game.","completion":"class HighScores: def __init__(self, num_scores): self.scores = [0] * num_scores self.curr_index = 0 # stores index of last score filled self.num_scores = num_scores def add_score(self, score): if self.curr_index < self.num_scores: self.scores[self.curr_index] = score self.curr_index += 1 else: # update the minimum score in the list min_score_index = 0 for i in range(1, self.num_scores): if self.scores[i] < self.scores[i-1]: min_score_index = i if self.scores[min_score_index] < score: self.scores[min_score_index] = score def get_scores(self): return self.scores"},{"prompt":"Write a Python script to generate a random password with at least 8 characters, containing at least one lowercase, one uppercase and one nonalphanumeric character (such as !, @, #, ).","completion":"import string import random def generate_password(): # Generate a password with at least 8 characters length = 8 # Generate the password with at least one lower, one upper and one non-alphanumeric character password = ''.join( random.choice( string.ascii_lowercase + string.ascii_uppercase + string.digits + string.punctuation ) for i in range(length) ) print(password) if __name__ == '__main__': generate_password()"},{"prompt":"Design Python code to construct a 2D classification model.","completion":"# Import libraries import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Load the data X = np.loadtxt('data.csv', delimiter=', ',skiprows=1, usecols=[0,1]) y = np.loadtxt('data.csv', delimiter=', ', skiprows=1, usecols=[2], dtype=str) # Split the data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=5) # Create and train the model model = LogisticRegression().fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Calculate accuracy accuracy = accuracy_score(y_pred, y_test) print('Model accuracy:', accuracy)"},{"prompt":"Generate a python program to convert a given Celsius temperature to Fahrenheit","completion":"def celsius_to_fahrenheit(temperature): fahrenheit = (temperature*9/5)+32 return fahrenheit"},{"prompt":"Develop a function in Python to concatenate two lists list1 = [1,2,3] list2 = [4,5,6]","completion":"def concatenateLists(list1, list2): list3 = list1 + list2 return list3"},{"prompt":"Develop a Python program for converting feet to meters.","completion":"def feet_to_meters(feet): return feet * 0.3048 feet = 10 meters = feet_to_meters(feet) print('{} feet is equal to {} meters.'.format(feet, meters))"},{"prompt":"Generate a Python program that multiplies two matrices A = [[1, 2], [3, 4]] B = [[1, 2], [2, 3]]","completion":"def multiply_matrix(A, B): n = len(A) C = [[0] * n for _ in range(n)] for i in range(n): for j in range(n): for k in range(n): C[i][j] += A[i][k] * B[k][j] return C A = [[1, 2], [3, 4]] B = [[1, 2], [2, 3]] print(multiply_matrix(A,B))"},{"prompt":"Create a Sorting Algorithm in Python that is optimized for memory usage.","completion":"# Function to implement an optimized memory sorting algorithm def memory_optimized_sort(items): # Find the length of the list n = len(items) # Initialize the sorted list to the same size sorted_items = [None] * n # Set the counter for even and odd even_count = 0 odd_count = 0 # Iterate over the items in the list for item in items: # If item is even, add it to the end of the list if item % 2 == 0: sorted_items[n - 1 - even_count] = item even_count += 1 else: # If item is odd, add it to the beginning of the list sorted_items[odd_count] = item odd_count += 1 return sorted_items"},{"prompt":"Generate a Python program that checks if all elements of a given list are the same. [1, 4, 1, 4, 1]","completion":"def check_list_elements(list_of_elements): if len(set(list_of_elements)) == 1: return True else: return False list_of_elements = [1, 4, 1, 4, 1] same_elements = check_list_elements(list_of_elements) print(same_elements)"},{"prompt":"Using a library such as Numpy, write a Python program to generate a random matrix with 500 rows and 10 columns. Not applicable","completion":"import numpy as np # Generate random matrix with 500 rows and 10 columns matrix = np.random.rand(500,10) # Print the matrix print(matrix)"},{"prompt":"Design a Python program for verifying the two strings are rotations of each other? s1 = Hello World s2 = World Hello","completion":"def check_rotation(str1, str2): if len(str1) != len(str2): return False temp = str1 + str1 return (str2 in temp) s1 = \\"Hello World\\" s2 = \\"World Hello\\" if check_rotation(s1, s2): print('These strings are rotations of each other'); else: print('These strings are not rotations of each other')"},{"prompt":"Write a function in Python to parse a JSON object. {movie: Star Wars, genre: Action}","completion":"import json def parse_json(json_string): obj = json.loads(json_string) return obj parsed_json = parse_json('{\\"movie\\": \\"Star Wars\\",\\"genre\\": \\"Action\\"}') print(parsed_json) # Outputs {'movie': 'Star Wars', 'genre': 'Action'}"},{"prompt":"Write an expression in python to check if a given number is prime number = 15","completion":"def is_prime(number): if number>1: for i in range(2,number): if number%i==0: return False else: return False return True print(is_prime(number))"},{"prompt":"Generate a python program for creating a function to take a list of strings as input and return the longest string list of strings: ['hello', 'world', 'this', 'is', 'awesome']","completion":"def find_longest_string(arr): longest = arr[0] for string in arr: if len(string) > len(longest): longest = string return longest result = find_longest_string(['hello', 'world', 'this', 'is', 'awesome']) print(result)"},{"prompt":"Write a function in Python that chooses a random element from a list. [1, 2, 3, 4, 5]","completion":"import random def randomElement(list): return random.choice(list) print(randomElement([1,2,3,4,5]))"},{"prompt":"Create a TextBlob classifier in Python which takes in a string and outputs whether the sentiment of the string is positive or negative. Not applicable","completion":"from textblob import TextBlob class SentimentClassifier: def classify(self, text): # Create TextBlob object analysis = TextBlob(text) # Set sentiment if analysis.sentiment[0]>0: return 'positive' elif analysis.sentiment[0]<0: return 'negative' else: return 'neutral'"},{"prompt":"Create a python script to sort the numbers in an array","completion":"def sort_array(arr): for i in range(0, len(arr)-1): for j in range(0, len(arr)-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] return arr"},{"prompt":"Automate the process of sending an email using Python.","completion":"import smtplib # creates SMTP session s = smtplib.SMTP('smtp.gmail.com', 587) # start TLS for security s.starttls() # Authentication s.login(\\"sender_email_id\\", \\"sender_email_id_password\\") # message to be sent message = \\"Message_you_need_to_send\\" # sending the mail s.sendmail(\\"sender_email_id\\", \\"receiver_email_id\\", message) # terminating the session s.quit() print(\\"Email sent successfully to recipient\\")"},{"prompt":"Generate a Python program which takes a list of numbers and returns only the even numbers [1, 2, 3, 4, 5, 6]","completion":"def get_even_numbers(list_of_numbers): even_nums = [] for num in list_of_numbers: if num % 2 == 0: even_nums.append(num) return even_nums list_of_nums = [1, 2, 3, 4, 5, 6] result = get_even_numbers(list_of_nums) print(result)"},{"prompt":"Develop a sorting algorithm in Python that can sort an array of integers in ascending order. [2, 3, 1, 7, 5, 4]","completion":"def sort(arr): for i in range(len(arr)): for j in range(i+1, len(arr)): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i] return arr sort([2, 3, 1, 7, 5, 4]) # Output: [1, 2, 3, 4, 5, 7]"},{"prompt":"Create an AIbased chatbot using TensorFlow and Python. The chatbot should respond to basic textbased queries like âwhat is the temperature outside? Not applicable","completion":"#importing necessary packages import tensorflow as tf import pandas as pd import numpy as np #loading and pre-processing the data data = pd.read_csv(data.csv) data = np.array(data) #building the model model = tf.keras.Sequential() model.add(tf.keras.layers.Embedding(1000, 64)) model.add(tf.keras.layers.LSTM(128, dropout=0.2, recurrent_dropout=0.2)) model.add(tf.keras.layers.Dense(1, activation='sigmoid')) #compiling the model model.compile(loss='binary_crossentropy', optimizer=tf.keras.optimizers.Adam(), metrics=['accuracy']) #training the model model.fit(data[:,1], data[:,0], batch_size=128, epochs=10, validation_split=0.1) #testing the model text = input(\\"User: \\") prediction = model.predict(np.array([text])) #responding to the user if prediction > 0.5: print(\\"Chatbot: The temperature outside is \\" + prediction + \\" degrees\\") else: print(\\"Chatbot: Sorry, I don't know.\\")"},{"prompt":"Write a Python program that takes a list of strings, and returns a list of lists of strings where each list contains strings that are similar based on LCS (Longest Common Subsequence) [eat, tea, tan, ate, nat, bat]","completion":"def find_similar_LCS_strings(strings): d = {} for i in range(len(strings)): for j in range(len(strings)): if i == j: continue else: x = strings[i] y = strings[j] m = [[0 for k in range(len(y)+1)] for l in range(len(x)+1)] # build the dynamic programming lookup table for i in range(1, len(x)+1): for j in range(1, len(y)+1): if x[i-1] == y[j-1]: m[i][j] = m[i-1][j-1] + 1 else: m[i][j] = max(m[i][j-1], m[i-1][j]) d[(x, y)] = m[len(x)][len(y)] result = [] # build the result list while d: key = max(d, key=lambda k: d[k]) x, y = key[0], key[1] del d[key] tmp = [x, y] for k in d.keys(): if x in k or y in k: if d[k] == d[key]: del d[k] if k[0] == x: tmp.append(k[1]) else: tmp.append(k[0]) result.append(tmp) final_result = [] for entry in result: if entry not in final_result: final_result.append(entry) return final_result strings = [\\"eat\\", \\"tea\\", \\"tan\\", \\"ate\\", \\"nat\\", \\"bat\\"] res = find_similar_LCS_strings(strings) print(res) # Output: [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]"},{"prompt":"Write a Python function to check if a given number is an Armstrong number or not. An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.","completion":"def is_armstrong_number(num): n = len(str(num)) sum = 0 temp = num while temp > 0: digit = temp % 10 sum += digit**n temp //= 10 return sum == num"},{"prompt":"Write a Python program that checks for a pair of prime numbers that sum up to a third prime number. 23, 59","completion":"def check_prime_pair_addition(num1, num2): \\"\\"\\"Given two numbers, check if they add up to a prime number.\\"\\"\\" if not is_prime(num1) or not is_prime(num2): return False primeSum = num1 + num2 if is_prime(primeSum): return primeSum else: return False def is_prime(num): \\"\\"\\"Check if a number is a prime number\\"\\"\\" if num <= 1: return False else: i = 2 while i * i <= num: if num % i == 0: return False i += 1 return True print(check_prime_pair_addition(23, 59))"},{"prompt":"Write an iterator class in Python which iterates over numbers from 1 to 10.","completion":"class IteratorExample: def __init__(self, start, end): self.start = start self.end = end def __iter__(self): self.num = self.start return self def __next__(self): if self.num > self.end: raise StopIteration else: current_num = self.num self.num += 1 return current_num iterator = IteratorExample(1, 10) for num in iterator: print(num)"},{"prompt":"Make a Python program that takes a list of strings as input and returns a dictionary whose keys are the strings and values are the length of the string. ['help', 'me', 'please']","completion":"def get_string_lengths(list_strings): res = {} for string in list_strings: res[string] = len(string) return res test_strings = ['help', 'me', 'please'] result = get_string_lengths(test_strings) print(result)"},{"prompt":"Create a class in Python that handles CSV data. The class should have methods for filtering the rows and calculating the average of specific columns. Not applicable","completion":"import csv class CSVProcessor: def __init__(self, path): self.csv_data = [] with open(path, 'r') as csvfile: reader = csv.reader(csvfile) for row in reader: self.csv_data.append(row) def filter_rows(self, column, value): filtered = [] for row in self.csv_data: if row[column] == value: filtered.append(row) return filtered def calculate_average(self, column): values = [float(row[column]) for row in self.csv_data] return sum(values) / len(values)"},{"prompt":"Train a machine learning model in Python using a given dataset and generate a confusion matrix. // Dataset of 1000 samples and 30 feature","completion":"from sklearn.model_selection import train_test_split from sklearn.metrics import confusion_matrix X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0) model.fit(X_train, y_train) predictions = model.predict(X_test) confusion_matrix(y_test, predictions)"},{"prompt":"Write a Python function to compute the factorial of an integer. 4","completion":"def factorial(n): if n < 0: print('Factorial does not exist for a negative number.') elif n == 0 or n == 1: return 1 else: return n * factorial(n - 1) print(factorial(4))"},{"prompt":"Create a custom function in Python to change the values of a list. [2, 3, 1, 4]","completion":"def custom_function(input_list): transformed_list = [] for value in input_list: transformed_value = value + 1 transformed_list.append(transformed_value) return transformed_list input_list = [2, 3, 1, 4] print(custom_function(input_list))"},{"prompt":"Create a Python script to generate a report of top 5 companies by total revenue. List of current companies with their respective revenue and profit informatio","completion":"import pandas as pd # Read the input data df = pd.read_csv('company_data.csv') # Select the top 5 companies by total revenue top_5 = df.sort_values(by='revenue', ascending=False).head(5) # Generate the report print(\\"Top 5 Companies by Total Revenue\\") print(\\"-------------------------------\\") for index, row in top_5.iterrows(): print(\\"Company name: {}, Total Revenue: {:.2f}, Total Profit: {:.2f}\\".format( row['name'], row['revenue'], row['profit'] ))"},{"prompt":"Create a function in Python that determines if a given number is an Armstrong number or not. 371","completion":"def isArmstrongNumber(number): num_str = str(number) result = 0 power = len(num_str) for c in num_str: result += int(c) ** power if result == number: return True else: return False if isArmstrongNumber(371): print('It is an Armstrong number.') else: print('It is not an Armstrong number.')"},{"prompt":"Write a Python program to detect duplicate numbers in a given array. arr = [10,20,15,20,30,10]","completion":"duplicate_numbers = [] for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] == arr[j]: duplicate_numbers.append(arr[i]) print(duplicate_numbers) # Output: [10, 20]"},{"prompt":"Create a web scraper in Python using the BeautifulSoup library to scrape movie titles, ratings, dates, and descriptions from a movie website. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://www.example.com/movies' response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') titles = [] ratings = [] dates = [] descriptions = [] # Get the movie titles all_titles = soup.find_all('h3', class_='title') for title in all_titles: titles.append(title.text) # Get the movie ratings all_ratings = soup.find_all('span', class_='rating') for rating in all_ratings: ratings.append(rating.text) # Get the movie dates all_dates = soup.find_all('span', class_='date') for date in all_dates: dates.append(date.text) # Get the movie descriptions all_descriptions = soup.find_all('p', class_='desc') for description in all_descriptions: descriptions.append(description.text) # Print out the collected data for i in range(len(titles)): print(f'Movie Title: {titles[i]}') print(f'Movie Rating: {ratings[i]}') print(f'Movie Date: {dates[i]}') print(f'Movie Description: {descriptions[i]}')"},{"prompt":"Create a Python script to search for a given element in a list? my_list = [1, 3, 5, 7, 8]","completion":"def find_element(my_list, x): found = False for item in my_list: if item == x: found = True break return found element = 3 print(find_element(my_list, element)) # Output True"},{"prompt":"Generate a Python class for a person object, with the name, age, and gender as fields.","completion":"class Person: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def get_name(self): return self.name def get_age(self): return self.age def get_gender(self): return self.gender"},{"prompt":"Generate a function in Python to transform a string from camelCase to snake_case. inputString = thisIsExample","completion":"def camelCaseToSnakeCase(inputString): outputString = inputString[0].lower() for i in range(1, len(inputString)): if inputString[i].isupper(): outputString += \\"_\\" outputString += inputString[i].lower() else: outputString += inputString[i] return outputString if __name__ == '__main__': inputString = \\"thisIsExample\\" print (camelCaseToSnakeCase(inputString))"},{"prompt":"Rewrite this function in Python. // original function int multiply(int x, int y) { int product = 0; while(x > 0) { if (x % 2 != 0) product += y; x >>= 1; y <<= 1; } return product; }","completion":"def multiply(x, y): product = 0 while (x > 0): if x % 2 != 0: product += y x >>= 1 y <<= 1 return product print(multiply(10, 5)) # Output: 50"},{"prompt":"Create an algorithm in Python toimplement quick sort. [8, 2, 6, 4, 5, 1]","completion":"def quick_sort(arr): if len(arr) < 2: return arr else: pivot = arr[0] less_than_pivot = [i for i in arr[1:] if i <= pivot] greater_than_pivot = [i for i in arr[1:] if i > pivot] return quick_sort(less_than_pivot) + [pivot] + quick_sort(greater_than_pivot)"},{"prompt":"Generate a Python list comprehension that returns all even numbers in a given range. start_num = 2 end_num = 10","completion":"even_nums = [num for num in range(start_num, end_num + 1) if num % 2 == 0]"},{"prompt":"Create a RESTful API in Python using Flask that can search a dataset of books by title or author. [ { title: The Catcher in the Rye, author: JD Salinger, }, { title: Lord of the Flies, author: William Golding, }, { title: 1984, author: George Orwell, } ]","completion":"from flask import Flask, request, jsonify app = Flask(__name__) books = [ { \\"title\\": \\"The Catcher in the Rye\\", \\"author\\": \\"JD Salinger\\" }, { \\"title\\": \\"Lord of the Flies\\", \\"author\\": \\"William Golding\\" }, { \\"title\\": \\"1984\\", \\"author\\": \\"George Orwell\\" } ] @app.route('/books', methods=['GET']) def get_books(): args = request.args title = args.get('title') author = args.get('author') result = [] for book in books: if title and author: if book['title'] == title and book['author'] == author: result.append(book) elif title: if book['title'] == title: result.append(book) elif author: if book['author'] == author: result.append(book) else: result.append(book) return jsonify(result) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python program that prints out the day number of the week (17) from the input date given in the format yyyymmdd.","completion":"#!/usr/bin/env python import datetime def get_day_of_week(date): day, month, year = [int(d) for d in date.split('-')] day_of_week = datetime.date(year, month, day).weekday() return day_of_week+1 print get_day_of_week(\\"2020-05-15\\") # Outputs 6 (Friday)"},{"prompt":"Write a Python program to find the length of the longest consecutive elements sequence in an array. [1, 9, 3, 10, 4, 20, 2]","completion":"def findLengthOfLCIS(A): n = len(A) if n == 0: return 0 ans = 1 prev = A[0] curr_len = 1 for i in range(1, n): if A[i] > prev: curr_len += 1 else: ans = max(ans, curr_len) curr_len = 1 prev = A[i] return max(ans, curr_len) if __name__ == '__main__': A = [1, 9, 3, 10, 4, 20, 2] print(\\"Length of LCIS is\\", findLengthOfLCIS(A))"},{"prompt":"mprove the performance of the following Python code. def find_max(a, b): max_val = a if b > a: max_val = b return max_val","completion":"def find_max(a, b): return max(a, b)"},{"prompt":"Create a Python program that computes the total time taken by two runners in a race. Time of Runner 1: 3 minutes Time of Runner 2: 4 minute","completion":"def race_time_total(time1,time2): total = time1 + time2 return total"},{"prompt":"Create a script in Python for predicting the sales for a new product using linear regression. Input values for the linear regression: ProductPrice, AdvertisementBudget Example values for the input: 90, 15","completion":"\\"\\"\\" Perform linear regression to predict the sales for a new product \\"\\"\\" import numpy as np from sklearn.linear_model import LinearRegression # Define input values product_price = 90 advertisement_budget = 15 # Define the independent and dependent data X = np.array([advertisement_budget]).reshape(-1,1) Y = np.array([product_price]).reshape(-1,1) # Create and train the model linear_regressor = LinearRegression() linear_regressor.fit(X, Y) # Make a prediction predicted_sales = linear_regressor.predict([[advertisement_budget]]) # Print the result print(\\"Predicted sales for new product: \\", predicted_sales[0])"},{"prompt":"Write a Python program to process a dataset of words and count how many times each unique word appears. words = ['apple', 'apple', 'banana', 'apple', 'orange', 'banana', 'pear', 'orange', 'orange']","completion":"from collections import Counter words = ['apple', 'apple', 'banana', 'apple', 'orange', 'banana', 'pear', 'orange', 'orange'] word_counts = Counter(words) for word, count in word_counts.items(): print(f'{word}: {count}')"},{"prompt":"Generate a function for vector addition in Python.","completion":"def vector_addition(v1, v2): result = [v1[i] + v2[i] for i in range(len(v1))] return result result = vector_addition([1,2,3], [4,5,6]) print(result)"},{"prompt":"Develop a machine learning model for sentiment analysis in Python. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split from sklearn.naive_bayes import MultinomialNB from sklearn.metrics import accuracy_score, classification_report, confusion_matrix # Load the data df = pd.read_csv('sentiment.csv') # Transform the text into numerical features cv = CountVectorizer(stop_words='english') X = cv.fit_transform(df['text']) y = df['sentiment'] # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=.3) # Train the model nb = MultinomialNB() nb.fit(X_train, y_train) # Make predictions y_pred = nb.predict(X_test) # Evaluate the model score = accuracy_score(y_test, y_pred) print(score) print(classification_report(y_test, y_pred)) print(confusion_matrix(y_test, y_pred))"},{"prompt":"Write a Python program to sort a list of tuples by the second item in each tuple. [(3, 4), (5, 6), (1, 2)]","completion":"def sort_list(tuples): return sorted(tuples, key = lambda x: x[1]) tuples = [(3, 4), (5, 6), (1, 2)] print(sort_list(tuples))"},{"prompt":"Create a class structure to represent a student in Python.","completion":"class Student: def __init__(self, name, age): self.name = name self.age = age def getName(self): return self.name def setName(self, name): self.name = name def getAge(self): return self.age def setAge(self, age): self.age = age"},{"prompt":"mplement a machine learning model in Python with the ScikitLearn library to predict the likelihood of a customer defaulting on a loan. A dataset with 32 columns including customer demographics, bank details, loan amount and loan tenure.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score from sklearn.ensemble import RandomForestClassifier # read in the data df = pd.read_csv('loan_data.csv') # split features and target X = df.drop(columns='default').values y = df['default'].values # split dataset into training and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # build the model model = RandomForestClassifier(n_estimators=500) model.fit(X_train, y_train) # predict y_pred = model.predict(X_test) # calculate accuracy accuracy = accuracy_score(y_test, y_pred) print('Model accuracy is: ', accuracy)"},{"prompt":"Optimize a given Python code to print the factorial of a number. 5","completion":"def factorial(n): factorial = 1 for i in range(1, n+1): factorial = factorial * i print(factorial) number = 5 factorial(number)"},{"prompt":"Write a function in Python to replace multiple consecutive \`1\`s with just one \`1\`.","completion":"def remove_consecutive(list_of_numbers): result = [] last_number = None for number in list_of_numbers: if number != last_number: result.append(number) last_number = number return result"},{"prompt":"Write a Python class for a queue data structure.","completion":"class Queue: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def enqueue(self, item): self.items.insert(0,item) def dequeue(self): return self.items.pop() def size(self): return len(self.items) def peek(self): if self.items: return self.items[-1] else: return None"},{"prompt":"Write a Python program to calculate a value from a given sequence of numbers. The program should calculate the sum of the sequence elements and return the sum of the squares of the odd numbers from the sequence. sequence = [2, 4, 5, 6, 7]","completion":"def calc_sum(sequence): sum = 0 for num in sequence: sum += num return sum def calc_sum_squares(sequence): sum = 0 for num in sequence: if num % 2 == 1: sum += num * num return sum sequence = [2, 4, 5, 6, 7] total_sum = calc_sum(sequence) sum_squares = calc_sum_squares(sequence) print(\\"Total sum:\\", total_sum) print(\\"Sum of squares of odd numbers:\\", sum_squares)"},{"prompt":"Design a python program that reads a list of numbers and prints the number of even numbers [1, 2, 3, 4, 5, 6, 7, 8]","completion":"# Get list of numbers numbers = [1, 2, 3, 4, 5, 6, 7, 8] # Initialize a count count = 0 # Iterate through the list of numbers and count the even numbers for num in numbers: if num % 2 == 0: count += 1 # Print the result print(f\\"The number of even numbers is: {count}\\")"},{"prompt":"Generate a program using Python that checks for duplicate values in a given list.","completion":"def contains_duplicates(given_list): seen = set() for x in given_list: if x in seen: return True seen.add(x) return False"},{"prompt":"Reverse a sequence of numbers with Python. [13, 25, 6, 93, 75]","completion":"[75, 93, 6, 25, 13]"},{"prompt":"Create a program in Python that implements a car racing game.","completion":"import random MAX_DISTANCE = 20 def race(): print(\\"Let's race!\\") car_a_distance = 0 car_b_distance = 0 while car_a_distance < MAX_DISTANCE and car_b_distance < MAX_DISTANCE: car_a_distance += random.randint(1, 5) car_b_distance += random.randint(1, 5) if car_a_distance == MAX_DISTANCE: print(\\"Car A wins!\\") elif car_b_distance == MAX_DISTANCE: print(\\"Car B wins!\\") else: print(\\"Car A: \\" + str(car_a_distance) + \\" \\" + \\"Car B: \\" + str(car_b_distance)) race()"},{"prompt":"Create a web server using Python's builtin HTTPD framework","completion":"\\"\\"\\" from http.server import HTTPServer, BaseHTTPRequestHandler class MyServer(HTTPServer): def __init__(self, server_address, handler_class): super().__init__(server_address, handler_class) class MyHandler(BaseHTTPRequestHandler): def do_GET(self): self.send_response_only(200) self.end_headers() self.wfile.write(\\"Hello, world!\\".encode(\\"utf-8\\")) if __name__==\\"__main__\\": HOST, PORT = \\"localhost\\", 8002 server = MyServer((HOST, PORT), MyHandler) print(\\"Start server at http://{}:{}\\".format(HOST, PORT)) server.serve_forever() \\"\\"\\""},{"prompt":"Edit the following Python code and make it more efficient. def maxProfit(prices): max_profit, min_price = 0, float('inf') for price in prices: min_price = min(min_price, price) max_profit = max(max_profit, price min_price) return max_prof","completion":"def maxProfit(prices): if not prices: return 0 max_profit, min_price = 0, prices[0] for price in prices[1:]: min_price = min(min_price, price) max_profit = max(max_profit, price - min_price) return max_profit"},{"prompt":"Write a âwhileâ loop to display all even numbers up to the nth term in Python.","completion":"num = 1 while num <= n: if num % 2 == 0: print(num) num += 1"},{"prompt":"Given a list of numbers and a target number, write a python code to find two integer elements in the list whose sum equals the target. umbers_list = [2, 4, 6, 11, 15, 20] target_num = 22","completion":"def find_sum_in_list(numbers_list, target_num): for num1 in numbers_list: for num2 in numbers_list: if num1 + num2 == target_num: return (num1, num2) find_sum_in_list(numbers_list, target_num)"},{"prompt":"Write a Python program to generate an HTML page containing a table with 3 rows and 2 columns, where the data in the cells are randomly generated. Not applicable","completion":"import random HTML = '<html>n<head>n<title>Random Table</title>n</head>n<body>n<table>n' for row_num in range(0,3): HTML += ' <tr>n' for column_num in range(0,2): HTML += ' <td>{}</td>n'.format(random.randint(0, 10)) HTML += ' </tr>n' HTML += '</table>n</body>n</html>' print(HTML)"},{"prompt":"Compose a Python algorithm that generates a list of 10 random numbers between 1 and 100.","completion":"import random random_numbers = [] for _ in range(10): random_numbers.append(random.randint(1,100)) print(random_numbers)"},{"prompt":"Generate a Python script to detect if a linked list contains a loop","completion":"def contains_loop(head): slow_pointer = head fast_pointer = head while slow_pointer and fast_pointer and fast_pointer.next: slow_pointer = slow_pointer.next fast_pointer = fast_pointer.next.next if slow_pointer == fast_pointer: return True return False"},{"prompt":"Write a Python program to get all possible unique subsets of a given set of numbers. S = [1, 2, 3]","completion":"def get_subsets(S): subsets = [[]] for i in S: for j in range(len(subsets)): subsets.append(subsets[j] + [i]) return subsets S = [1, 2, 3] print(get_subsets(S)) # Output: [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]"},{"prompt":"Write a python script to generate a dictionary containing numbers from 1 to n as keys and their square as values.","completion":"def generate_dict(n): d = {} for i in range(1, n+1): d[i] = i*i return d"},{"prompt":"Develop an algorithm in Python to find the minimum and maximum from an unsorted list of numbers. [10, 24, 55, 16, 1, 9]","completion":"def find_min_max(list_of_nums): min_num = list_of_nums[0] max_num = list_of_nums[0] for num in list_of_nums: if num < min_num: min_num = num if num > max_num: max_num = num return (min_num, max_num) list_of_nums = [10, 24, 55, 16, 1, 9] (min_num, max_num) = find_min_max(list_of_nums) print(\\"Min Num: {} Max Num: {}\\".format(min_num, max_num))"},{"prompt":"Develop a Python script that implements the bubblesort algorithm. [3, 2, 5, 1, 4]","completion":"def bubbleSort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] arr = [3,2,5,1,4] bubbleSort(arr) print (\\"Sorted array is:\\") print(arr)"},{"prompt":"Create a machine learning model using the Scikit Learn Python library for predicting an output given an input. A sample dataset which contains values of Input and Output.","completion":"from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression import pandas as pd # Read in sample data df = pd.read_csv('sample_dataset.csv') # Split the data into train and test datasets X_train, X_test, y_train, y_test = train_test_split(df[['input']], df[['output']], test_size=0.2) # Create the model model = LinearRegression() # Train the model using the training data model.fit(X_train, y_train) # Use the model to predict output for the test data y_pred = model.predict(X_test) # Evaluate the model score = model.score(X_test, y_test) print(\\"Model accuracy:\\",score)"},{"prompt":"Create a function in Python to remove all vowels in a given string. Hello, World!","completion":"def remove_vowels(string): vowels = ('a', 'e', 'i', 'o', 'u') for x in string.lower(): if x in vowels: string = string.replace(x, \\"\\") return string print(remove_vowels(\\"Hello, World!\\"))"},{"prompt":"Write a Python script to perform linear regression on a given dataset. [[5, 6], [3, 4], [7, 9], [4, 5]]","completion":"import numpy as np from sklearn.linear_model import LinearRegression x = np.array([[5, 6], [3, 4], [7, 9], [4, 5]]) y = np.array([7, 5, 11, 7]) model = LinearRegression().fit(x, y) print(model.coef_) print(model.intercept_)"},{"prompt":"Write a Python class with methods for printing strings and computing the length of a string.","completion":"class MyString: def __init__(self): self.string = \\"\\" def set_string(self, string): self.string = string def get_string(self): return self.string def print_string(self): print(self.string) def get_length(self): string_length = len(self.string) return string_length"},{"prompt":"Create a function in Python for converting a list of strings to a dictionary. Strings: [John, Jake, Adam]","completion":"def stringsToDict(strings): return {string:0 for string in strings} strings = [\\"John\\", \\"Jake\\", \\"Adam\\"] dict = stringsToDict(strings) print(dict) # Output: {'John': 0, 'Jake': 0, 'Adam': 0}"},{"prompt":"Create a Python program to implement the Naive Bayes classifier for a binary classification problem. Not applicable","completion":"from sklearn.naive_bayes import GaussianNB import numpy as np # Input data X = np.array([[0, 0], [1, 1], [1, 0], [1, 1]]) y = np.array([0, 0, 1, 1]) # Train the model model = GaussianNB() model.fit(X, y) # Make predictions predictions = model.predict([[0, 1], [1, 1]]) print(predictions) # [1, 0]"},{"prompt":"Generate an array in Python of size 25 containing only prime numbers.","completion":"primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]"},{"prompt":"Calculate the sum of a given list of integers in Python. [ 7, 15, 23, 5, 9 ]","completion":"def sum_list(my_list): total = 0 for num in my_list: total += num return total print(sum_list([7, 15, 23, 5, 9]))"},{"prompt":"Write a Python program to compute the sum of values of a given dictionary, where each item in the dictionary has a key and a value associated with it. d = { 'x': 9, 'y': 10, 'z': 15 }","completion":"def get_dict_sum(d): summ = 0 for key, val in d.items(): summ += val return summ print(get_dict_sum(d))"},{"prompt":"Generate code to find the sum of all numbers in an array using Python.","completion":"def sum_of_array(arr): # Initialize result res = 0 # Iterate through all elements # and add them to result for i in range(0, len(arr)): res = res + arr[i] # return final result return res"},{"prompt":"Create a Python program to edit the following string and make all characters in the string uppercase. 'This is a test string.'","completion":"def to_uppercase(input): output = \\"\\" for char in input: output += char.upper() return output"},{"prompt":"Develop a Python program for generating a random integer between 0 and 10.","completion":"import random random_number = random.randint(0, 10) print(\\"Random number is: \\", random_number)"},{"prompt":"w can a programmer check the length of a string in python?","completion":"In Python, the length of a string can be checked by using the len() function. For example, the length of the string \\"Hello World\\" can be checked by using the following code: my_string = \\"Hello World\\" print(len(my_string))"},{"prompt":"Create a Python script that prints out the sum of the first n even numbers. n = 5","completion":"def sumOfEvenNumbers(n): sum = 0 for i in range(1, (n * 2) + 1): if i % 2 == 0: sum += i return sum print(sumOfEvenNumbers(5))"},{"prompt":"Create a program in Python to classify a given sentence as 'positive' or 'negative' The movie was great!","completion":"\\"\\"\\" Classify a sentence as 'positive' or 'negative \\"\\"\\" import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def classify_sentence(sentence): sid = SentimentIntensityAnalyzer() sentiment = sid.polarity_scores(sentence) if sentiment['compound'] >= 0.05: return 'positive' elif sentiment['compound'] <= - 0.05: return 'negative' else: return 'neutral' if __name__ == '__main__': sentence = \\"The movie was great!\\" classification = classify_sentence(sentence) print(classification)"},{"prompt":"Create a recursive program in Python which prints out the Fibonacci Sequence","completion":"def Fibonacci_Sequence(num): if num <= 0: return 0 elif num == 1: return 1 else: return Fibonacci_Sequence(num-1) + Fibonacci_Sequence(num-2) # Program to print the Fibonacci Sequence num = int(input(\\"Enter the number of fibonacci sequence: \\")) if num < 0: print(\\"Incorrect input\\") for i in range(num): print(Fibonacci_Sequence(i))"},{"prompt":"Create a basic machine learning model for text classification using the Scikitlearn library in Python. Not applicable","completion":"import numpy as np from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Sample training and testing data X_train = np.array([\\"This is a sample sentence.\\", \\"Another sample sentence.\\", \\"Yet another sentence for classification.\\"]) y_train = np.array([0, 0, 1]) X_test = np.array([\\"Classify this sentence.\\", \\"Two sentences in one.\\"]) # Create a vectorizer and fit it to the training data vectorizer = CountVectorizer() vectorizer.fit(X_train) # Transform the training data and test data into a vector X_train_vec = vectorizer.transform(X_train) X_test_vec = vectorizer.transform(X_test) # Create a MultinomialNB model and fit it to the vectorized data model = MultinomialNB() model.fit(X_train_vec, y_train) # Make predictions with the model predictions = model.predict(X_test_vec) print(predictions) # Output: [1 0]"},{"prompt":"Write a function that takes two strings and returns a new string of the longest length. Python, programming","completion":"def longest_string(string1, string2): if len(string1) > len(string2): return string1 else: return string2 longest_str = longest_string(\\"Python\\", \\"programming\\") print(longest_str)"},{"prompt":"Create a function in Python to convert hours to minutes.","completion":"def hours_to_minutes(hours): \\"\\"\\"Converts input hours to minutes.\\"\\"\\" return hours * 60"},{"prompt":"Generate an algorithm in Python to count the number of inversions in an array. [3, 5, 2, 1, 4]","completion":"def count_inversions(arr): inv_count = 0 for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: inv_count += 1 return inv_count arr = [3, 5, 2, 1, 4] print(count_inversions(arr))"},{"prompt":"Create a function in Python to read two strings and return the concatenation of them. Hello, world!","completion":"def concatenate_strings(str1, str2): return str1 + str2 print(concatenate_strings(\\"Hello\\", \\"world!\\"))"},{"prompt":"Write a Python program to generate a twodimensional array of Boolean values with alternating True and False values. Size of the 2D array: 5 x 5","completion":"def generate_alternating_2d_array(n): arr = [] prev_value = False for i in range(n): row = [] for j in range(n): cur_value = not prev_value row.append(cur_value) prev_value = cur_value arr.append(row) return arr arr = generate_alternating_2d_array(5) for row in arr: print(row)"},{"prompt":"Construct a Python code to convert degrees Fahrenheit to Celsius.","completion":"def fahrenheit_to_celsius(fahrenheit): celsius = (fahrenheit - 32)*(5/9) return celsius"},{"prompt":"Write a Python program to create a random password of length 10. <noimport>","completion":"import string import random def generate_password(length): password = \\"\\" for i in range(length): character = random.choice( string.ascii_letters + string.digits + string.punctuation) password += character return password password = generate_password(10) print(password)"},{"prompt":"Develop a program in Python to remove all the punctuation from an English sentence. This is an example sentence!","completion":"def remove_punctuation(sentence): punctuations = '''!()-[]{};:'\\",<>./?@#%^&*_~''' clean_sentence = \\"\\" for letter in sentence: if letter not in punctuations: clean_sentence += letter return clean_sentence sentence = \\"This is an example sentence!\\" print(remove_punctuation(sentence))"},{"prompt":"Generate a Python function that takes a string as input and returns True if the string contains a capital letter, otherwise False. MyString","completion":"def has_capital_letter(input_string): for character in input_string: if character.isupper(): return True return False"},{"prompt":"Create a Python program to predict the housing prices of Boston. The program should extract features from the dataset, apply algorithms for regression and output a prediction. Boston Housing Datase","completion":"# Import necessary libraries import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score # Read the dataset df = pd.read_csv('Boston.csv') # Extract the features X = df.iloc[:, :-1] # Extract the labels y = df.iloc[:, -1] # Split into training and testing dataset X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0) # Train a model using Linear Regression model = LinearRegression().fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Evaluate the model mse = mean_squared_error(y_test, y_pred) mae = mean_absolute_error(y_test, y_pred) r2 = r2_score(y_test, y_pred) # Print the scores print('Mean Squared Error:', mse) print('Mean Absolute Error:', mae) print('R2 Score:', r2)"},{"prompt":"Design a system in Python to find and count the number of vowels in a given string of words.","completion":"def count_vowels(words): vowels = 'aeiou' count = 0 for char in words.lower(): if char in vowels: count += 1 return count"},{"prompt":"Suggest a Python program that prints out the unique strings in a list of strings. ['hello', 'world', 'hello', 'moon', 'sun']","completion":"list_of_strings = ['hello', 'world', 'hello', 'moon', 'sun'] unique_strings = set(list_of_strings) for string in unique_strings: print(string)"},{"prompt":"Create a Python function that returns the longest string in a list of strings. list_strings = [abc, def, ghij]","completion":"def get_longest_string(list_strings): longest_string = list_strings[0] for item in list_strings: if len(item) > len(longest_string): longest_string = item return longest_string list_strings = [\\"abc\\", \\"def\\", \\"ghij\\"] print(get_longest_string(list_strings)) # prints \\"ghij\\""},{"prompt":"Create a Python program to reverse a list without using the reverse() method. [1, 2, 3, 4, 5]","completion":"def reverse_list(lst): reversed_list = [] for i in range(len(lst)-1,-1, -1): reversed_list.append(lst[i]) return reversed_list print(reverse_list([1, 2, 3, 4, 5]))"},{"prompt":"Write a Python program to generate a cube mesh with a given parameter.","completion":"import bpy def generate_cube_mesh(parameter): verts = [(0, 0, 0), (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, parameter), (1, 0, parameter), (1, 1, parameter), (0, 1, parameter)] edges = [(0, 1), (1, 2), (2, 3), (3, 0), (4, 5), (5, 6), (6, 7), (7, 4), (0, 4), (1, 5), (2, 6), (3, 7)] mesh = bpy.data.meshes.new('Cube') mesh.from_pydata(verts, edges, []) mesh.update() cube_obj = bpy.data.objects.new('MyCube', mesh) bpy.context.scene.objects.link(cube_obj)"},{"prompt":"Create a function in Python to calculate the cost of an online shopping order given the cost of the items and the shipping charges. item1 = 10 item2 = 20 shipping_charges = 15","completion":"def calculate_cost(item1, item2, shipping_charges): total_cost = item1 + item2 + shipping_charges return total_cost calculate_cost(item1, item2, shipping_charges) # returns 45"},{"prompt":"Generate a Python program that takes in a string of text and returns the count of each unique word in the string This is a sample string","completion":"def count_words(string): word_counts = {} words = string.split() for word in words: if word in word_counts: word_counts[word] += 1 else: word_counts[word] = 1 return word_counts print(count_words(\\"This is a sample string\\")) # Output {'This': 1, 'is': 1, 'a': 1, 'sample': 1, 'string': 1}"},{"prompt":"Write a code to perform strings concatenation in Python Hello, World","completion":"result = \\"Hello\\" + \\" \\" + \\"World\\" print(result)"},{"prompt":"Construct an algorithm for predicting the sentiment of a text using Python.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def predict_sentiment(text): #Download required NLTK data nltk.download('vader_lexicon') #Create sentiment analyzer object sent_analyzer = SentimentIntensityAnalyzer() #Predict sentiment return sent_analyzer.polarity_scores(text)['compound'] # Predict sentiment of a given text text = \\"This is an amazing movie!\\" sentiment = predict_sentiment(text) if sentiment >= 0.5: print('Positive') elif sentiment == 0.0: print('Neutral') else: print('Negative')"},{"prompt":"Create a Python script to generate a report for the average stock price of a company. The report should be in CSV format and should include the start and end date, opening price, closing price, highest price, and lowest price for the period. A CSV file containing a company's stock prices for the past year.","completion":"import csv # Define function def generate_report(file): # Initialize variables start_date = \\"\\" end_date = \\"\\" opening_price = 0 closing_price = 0 high_price = 0 low_price = 1000000 # Open the file and read the data into a list f = open(file) csv_reader = csv.reader(f) rows = list(csv_reader) # Loop through the list for row in rows[1:]: # Get the date and price data date = row[0] price = float(row[1]) # Set start and end date if start_date == \\"\\": start_date = date end_date = date # Set opening and closing prices if opening_price == 0: opening_price = price closing_price = price # Set high and low prices if price > high_price: high_price = price if price < low_price: low_price = price # Calculate average price average_price = (high_price + low_price) / 2 # Return results report = [start_date, end_date, opening_price, closing_price, high_price, low_price, average_price] return report # Call the function results = generate_report('stock_data.csv') print(results)"},{"prompt":"Write a Python class to define a fraction and include methods to add and subtract fractions.","completion":"class Fraction: def __init__(self, numerator, denominator): self.numerator = numerator self.denominator = denominator def __str__(self): return f\\"{self.numerator}/{self.denominator}\\" def __add__(self, other): denom = self.denominator * other.denominator num1 = self.numerator * other.denominator num2 = other.numerator * self.denominator numerator = num1 + num2 return Fraction(numerator, denom) def __sub__(self, other): denom = self.denominator * other.denominator num1 = self.numerator * other.denominator num2 = other.numerator * self.denominator numerator = num1 - num2 return Fraction(numerator, denom)"},{"prompt":"Create an opensource Python program to generate random passwords. Not applicable","completion":"import random import string def generate_password(length=12): password_characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(password_characters) for i in range(length)) if __name__ == '__main__': password = generate_password() print(f'Your randomly generated password is:n{password}')"},{"prompt":"Write a function in Python to filter a list of words based on a given list of allowed words. The function should accept a list of words and a set of allowed words as parameters and should return a new list containing only the words in the given list of words which are present in the set of allowed words. words = [blue, green, red, purple] allowed = {blue, green, yellow}","completion":"def filter_words(words, allowed): # Create a new list to store the filtered words filtered_words = [] # Loop over the words and check if they are in the set of allowed words for word in words: if word in allowed: # Add the word to the filtered list filtered_words.append(word) # Return the filtered list return filtered_words"},{"prompt":"Convert the following Python code into Java and describe the differences between the two. def func(param1, param2): return param1 + param2","completion":"public static int func(int param1, int param2) { return param1 + param2; } The main difference between Python and Java is that Java is a statically typed language whereas Python is a dynamically typed language. This means that in Python, variables can be given any type of data without a fixed declaration, while in Java, each variable must be defined with a particular type before it can be used. Additionally, Java is a compiled language, meaning that it must be compiled into executable bytecode before it can be executed, while Python is an interpreted language that can be run directly. Finally, in Python all function parameters are passed by reference, while in Java they are passed by value. This means that any changes made to the parameters inside a Java function will not be reflected in the calling code, while it will for Python."},{"prompt":"Create a function in Python that returns the longest increasing subsequence in a given array. [3,4,2,1,6,7]","completion":"# Return the longest increasing subsequence def lis(arr): n = len(arr) # Initialize LIS values for all indexes lis = [1]*n # Compute LIS values from left to right for i in range (1, n): for j in range(0, i): # lis[i] = max(lis[i], lis[j] + 1) if arr[i] > arr[j] if arr[i] > arr[j] and lis[i] < lis[j] + 1 : lis[i] = lis[j]+1 # Return the maximum value return max(lis)"},{"prompt":"Create a class in Python to store and manage a customer's orders.","completion":"class Order: def __init__(self): self.id = None self.items = [] self.quantities = [] self.total_amount = 0 def add_item(self, item, quantity): self.items.append(item) self.quantities.append(quantity) self.total_amount += item.price * quantity def get_total_amount(self): return self.total_amount"},{"prompt":"Create a solution that detects the presence of a character in a string. Pytho","completion":"def detect_character(string, char): for ch in string: if ch == char: return True return False string = 'Python' char = 'y' print(detect_character(string, char))"},{"prompt":"Generate a for loop in Python for iterating an array. [2, 5, 9, 8]","completion":"arr = [2, 5, 9, 8] for num in arr: print(num)"},{"prompt":"Write a function in Python to calculate the greatest common divisor of two numbers n1 and n2.","completion":"def gcd(n1, n2): if n2 == 0: return n1 return gcd(n2, n1 % n2)"},{"prompt":"Write a Python program to generate a 3x3 grid of random numbers.","completion":"import random def generate_grid(): # create an empty 3x3 grid grid = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] # generate 9 random numbers between 1 and 10 for i in range(3): for j in range(3): grid[i][j] = random.randint(1, 10) return grid result = generate_grid() print(result)"},{"prompt":"Construct a program in Python that computes the sum of 3rd and 7th elements of a list. list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"def sum_elements(list): Sum = list[2] + list[6] return Sum print(sum_elements(list))"},{"prompt":"Write a Python function to retrieve the frequency of elements in a given list. [1, 1, 2, 3, 4, 4]","completion":"from collections import Counter def get_frequencies(lst): return Counter(lst) input_list = [1, 1, 2, 3, 4, 4] frequencies = get_frequencies(input_list) print(\\"Frequency of elements:\\", frequencies)"},{"prompt":"Given the instruction and the sample data below, generate the corresponding Python program. The program should count the number of characters in each word in a given sentence and print the count. Sample sentence: Hello World!","completion":"sentence = \\"Hello World!\\" words = sentence.split() for word in words: print(f\\"{word} has {len(word)} characters.\\")"},{"prompt":"Design a function in Python that takes in a number n and prints the first n rows of the Pascal's Triangle. 10","completion":"def print_pascal_triangle(n): prev_line = [1] print(prev_line) for i in range(1, n): line = [1] for j in range(1, i): line.append(prev_line[j-1] + prev_line[j]) line.append(1) prev_line = line print(line) print_pascal_triangle(10)"},{"prompt":"Write a Python program to add two numbers taken as input from the user.","completion":"# get two numbers from the user num1 = float(input(\\"Enter first number: \\")) num2 = float(input(\\"Enter second number: \\")) # calculate the result result = num1 + num2 # display the result print(\\"The sum of {0} and {1} is {2}\\".format(num1, num2, result))"},{"prompt":"Evaluate the following Python code and suggest how to improve it. def cumulative_sum(numbers): result = 0 for number in numbers: result += number return resul","completion":"def cumulative_sum(numbers): result = 0 for number in numbers: result += number return result # Improvements: # Calculate the sum using a list comprehension to increase readability result = sum([number for number in numbers]) return result"},{"prompt":"Write a Python program that takes in a list of values and returns the maximum value. [1, 5, 2, 9, 2]","completion":"def get_maximum_value(lst): return max(lst) print(get_maximum_value([1, 5, 2, 9, -2]))"},{"prompt":"Create a python program to check if a list is palindromic. list1 = [1,2,3,2,1]","completion":"def is_palindrome(lst): if len(lst) < 2: return True if lst[0] != lst[-1]: return False return is_palindrome(lst[1:-1])"},{"prompt":"Write a Python program to count and display the number of positive numbers from a given list of integers. [2, 3, 4, 7, 6]","completion":"def countPositive(nums): count = 0 for num in nums: if num > 0: count += 1 print(\\"Number of positive numbers:\\", count) nums = [-2, 3, 4, -7, 6] countPositive(nums) # Output: Number of positive numbers: 3"},{"prompt":"Create a machine learning model in Python to classify cancer cells as benign or malignant based on their measurements.","completion":"# import libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # read dataset cancer_data = pd.read_csv(\\"cancer_data.csv\\") # split into train and test sets x_train, x_test, y_train, y_test = train_test_split(cancer_data.iloc[:,:-1], cancer_data.iloc[:,-1], test_size=0.25, random_state=0) # create the model lr_model = LogisticRegression() lr_model.fit(x_train,y_train) # accuracy accuracy = lr_model.score(x_test,y_test) print(accuracy)"},{"prompt":"Create a Python program which concatenates two sentences and prints the result. The sentence to be concatenated is I am writing a Python program. and It is exciting to learn something new.","completion":"sentence1 = \\"I am writing a Python program.\\" sentence2 = \\"It is exciting to learn something new.\\" # Concatenate both strings concatenated_sentence = sentence1 + \\" \\" + sentence2 # Print the result print(concatenated_sentence)"},{"prompt":"Create a Python function to sort a list of tuples by the second item in the tuple. my_list = [('a', 3), ('b', 2), ('c', 1)]","completion":"def sort_by_second_item(my_list): return sorted(my_list, key = lambda x: x[1])"},{"prompt":"Create a class in Python with two methods one for adding two numbers and another for subtracting two numbers.","completion":"class Calculator: \\"\\"\\" Class with two methods - add and subtract \\"\\"\\" def add(self, num1, num2): \\"\\"\\" Method to add two numbers \\"\\"\\" return num1 + num2 def subtract(self, num1, num2): \\"\\"\\" Method to subtract two numbers \\"\\"\\" return num1 - num2"},{"prompt":"Write a code to generate a random 4digit code in Python.","completion":"import random def generate_code(): code = \\"\\" for _ in range(4): code += str(random.randint(0, 9)) return code code = generate_code() print(code)"},{"prompt":"Design a function in Python that takes two strings as parameters and combines them into a new string. String1: Hello String2: World","completion":"def combine_strings(string1, string2): return string1 + \\" \\" + string2 combined_string = combine_strings(\\"Hello\\", \\"World\\") print(combined_string)"},{"prompt":"Can you build a neural network model in Python that classifies a set of handwritten digits?","completion":"# Import the necessary libraries import matplotlib.pyplot as plt from keras.datasets import mnist from keras.models import Sequential from keras.layers import Dense # Load the datasets (X_train, y_train), (X_test, y_test) = mnist.load_data() # Reshape the input X_train = X_train.reshape(60000, 784) X_test = X_test.reshape(10000, 784) # Build a fully-connected neural network model = Sequential() model.add(Dense(units=64, activation='relu', input_dim=784)) model.add(Dense(units=10, activation='softmax')) # Compile the model model.compile(optimizer='sgd', loss='categorical_crossentropy', metrics=['accuracy']) # Train the model model.fit(X_train, y_train, batch_size=32, epochs=3, verbose=1) # Test the model by evaluating on the test data score = model.evaluate(X_test, y_test, verbose=1) # Summary print(\\"Test accuracy: \\", score[1])"},{"prompt":"Construct a Python program to calculate the body mass index (BMI) of a person, given their height and weight","completion":"def calculate_bmi(height, weight): bmi = weight / (height * height) return bmi"},{"prompt":"Given a Python dictionary, find the most common value in the dictionary and print it out. d = {âpythonâ: 20, âjavaâ: 10, âc++â: 15, âC#â: 15}","completion":"from collections import Counter d = {âpythonâ: 20, âjavaâ: 10, âc++â: 15, âC#â: 15} #Get most common value data = Counter(d) most_common_value = data.most_common(1)[0][0] #Print out most common value print(most_common_value)"},{"prompt":"To implement LDAP authentication in Django, add the given code to your project and add LdapBackend to the tuple AUTHENTICATION_BACKENDS in settings.py.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- # # Copyright 2009 Mozilla Corporation, Zuza Software Foundation # # This file is part of Pootle. # # Pootle is free software; you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation; either version 2 of the License, or # (at your option) any later version. # # Pootle is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with Pootle; if not, write to the Free Software # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA import ldap import ldap.filter import logging from django.conf import settings from django.contrib.auth.models import User class LdapBackend(object): \\"\\"\\" This is a Django authentication module which implements LDAP authentication. To use this module, simply add it to the tuple AUTHENTICATION_BACKENDS in settings.py. \\"\\"\\" def authenticate(self, username=None, password=None): logger = logging.getLogger('pootle.auth.ldap') ldo = ldap.initialize(settings.AUTH_LDAP_SERVER) ldo.set_option(ldap.OPT_PROTOCOL_VERSION, 3) try: ldo.simple_bind_s(settings.AUTH_LDAP_ANON_DN, settings.AUTH_LDAP_ANON_PASS) result = ldo.search_s(settings.AUTH_LDAP_BASE_DN, ldap.SCOPE_SUBTREE, ldap.filter.escape_filter_chars(settings.AUTH_LDAP_FILTER) % username, settings.AUTH_LDAP_FIELDS.values()) if len(result) != 1: logger.debug(\\"More or less than 1 matching account for (%s). Failing LDAP auth.\\" % (username)) return None except ldap.INVALID_CREDENTIALS: logger.error('Anonymous bind to LDAP server failed. Please check the username and password.') return None except Exception, e: logger.error('Unknown LDAP error: ' + str(e)) return None try: ldo.simple_bind_s(result[0][0], password) logger.debug(\\"Successful LDAP login for user (%s)\\" % (username)) try: user = User.objects.get(username=username) return user except User.DoesNotExist: logger.info(\\"First login for LDAP user (%s). Creating new account.\\" % username) user = User(username=username, is_active=True) user.password = 'LDAP_%s' % (User.objects.make_random_password(32)) for i in settings.AUTH_LDAP_FIELDS: if i != 'dn' and len(settings.AUTH_LDAP_FIELDS[i]) > 0: setattr(user,i,result[0][1][settings.AUTH_LDAP_FIELDS[i]][0]) user.save() return user except (ldap.INVALID_CREDENTIALS, ldap.UNWILLING_TO_PERFORM): # Bad e-mail or password logger.debug(\\"No account or bad credentials for (%s). Failing LDAP auth.\\" % (username)) return None except Exception, e: # No other exceptions are normal, so we raise this. logger.error('Unknown LDAP error: ' + str(e)) raise def get_user(self, user_id): try: return User.objects.get(pk=user_id) except User.DoesNotExist: return None"},{"prompt":"Create an AI model in Python to predict the sentiment of a given text.","completion":"import pandas as pd import numpy as np # import the necessary libraries from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # define the labels and features labels = ['positive','negative','neutral'] texts = [\\"I'm feeling happy today\\", \\"I'm feeling very frustrated\\", \\"I'm not sure how to feel right now\\"] labels = [1,0,2] # vectorise the texts vectorizer = TfidfVectorizer() features = vectorizer.fit_transform(texts) # split the data into train and test X = features.toarray() Y = labels X_train, X_test, Y_train, Y_test = train_test_split(X, Y, train_size = 0.8, random_state = 0) # Create the model and fit it model = LogisticRegression() model.fit(X_train,Y_train) # Make predictions predictions = model.predict(X_test)"},{"prompt":"Write a Python function to get the nth number in the Fibonacci sequence.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"prompt":"Train a machine learning model in Python using the scikitlearn library to predict animal classification. Not applicable","completion":"# import libraries from sklearn import datasets from sklearn.ensemble import RandomForestClassifier # load the dataset dataset = datasets.load_iris() # create the model model = RandomForestClassifier() # train the model model.fit(dataset.data, dataset.target) # make predictions predictions = model.predict(dataset.data) # check accuracy accuracy = model.score(dataset.data, dataset.target) print('Accuracy: {}%'.format(accuracy * 100))"},{"prompt":"Create a Python program that acquires data from a database and generates a histogram of the values.","completion":"import matplotlib.pyplot as plt import pandas as pd data = pd.read_sql_query(\\"SELECT column_name FROM table_name\\", db) data.hist(bins=10, figsize=(10, 6)) plt.tight_layout() plt.show()"},{"prompt":"Generate an algorithm in Python to calculate the GCD of two given integers","completion":"def computeGCD(a, b): if(b == 0): return a else: return computeGCD(b, a%b)"},{"prompt":"Generate a Python application that takes user input and searches for matching data from a list and returns the result. a list with animals (cat, dog, bird)","completion":"animals = [\\"cat\\", \\"dog\\", \\"bird\\"] def search_animals(user_input): for animal in animals: if user_input == animal: return animal return None user_input = input(\\"Enter the name of the animal: \\") result = search_animals(user_input) if result != None: print(\\"Found: {}\\".format(result)) else: print(\\"No match found!\\")"},{"prompt":"Formulate a Python loop to print out the words Hello World 10 times.","completion":"for i in range(10): print(\\"Hello World\\")"},{"prompt":"Format a numerical table of data into a JSON object in Python. Numerical table of data.","completion":"Assuming the numerical table of data is stored in a 2D list data, a function to format it into a JSON object can be written as follows: import json def formatData2JSON(data): json_formatted_data = json.dumps(data) return json_formatted_data"},{"prompt":"Create a program in python to find the sum of all multiples of 3 and 5 below a given number. num = 20","completion":"def sumMultiples(num): sum = 0 for i in range(1, num): if (i % 3 == 0 or i % 5 == 0): sum += i return sum # Driver Code num = 20 print(sumMultiples(num))"},{"prompt":"Create a Selenium webdriver script in Python that enters a phone number into a form field, simulates pressing the Submit button, and prints out any error message that appears after submitting. The phone number is 1234567890.","completion":"from selenium import webdriver # Create a webdriver driver = webdriver.Chrome() # Open the web page driver.get('https://www.example.com/form') # Enter the phone number phone_number_field = driver.find_element_by_name('phone') phone_number_field.send_keys('1234567890') # Submit the form submit_button = driver.find_element_by_id('submit') submit_button.click() # Check for any error messages error_message = driver.find_element_by_class_name('error') if error_message: print(error_message.text) # Close the browser driver.close()"},{"prompt":"Optimize a Python program for speed. The program should calculate the sum of a list of numbers and return the result. list_of_numbers = [2, 4, 6, 8, 10]","completion":"def sum_of_numbers(list_of_numbers): # initialize the result to 0 result = 0 # Iterate over the list of numbers for num in list_of_numbers: result += num # return the result return result # testing the function list_of_numbers = [2, 4, 6, 8, 10] print(sum_of_numbers(list_of_numbers))"},{"prompt":"Create a Python program to simulate a dice roll and print the result.","completion":"import random # Simulate a dice roll result = random.randint(1,6) print(\\"Result of the dice roll:\\", result)"},{"prompt":"Develop a python program to convert the given text into a list Text: Apples, oranges, and b","completion":"text = \\"Apples, oranges, and bananas\\" list_from_text = text.split(\\", \\") print(\\"List:\\", list_from_text)"},{"prompt":"Modify a given Python list by adding a certain value to each element. list = [1, 2, 3, 4, 5] value = 10","completion":"# Modifying the list by adding 'value' to each element for i in range(len(list)): list[i] = list[i] + value # Print the modified list print(list) # [11, 12, 13, 14, 15]"},{"prompt":"Develop a program in Python that calculates the total surface area of a cube.","completion":"def cube_surface_area(side): \\"\\"\\" Calculate and return the total surface area of a cube given the side length. \\"\\"\\" return 6 * side**2"},{"prompt":"Write a function in Python to remove all punctuation and special characters. 'Hello, World!!!'","completion":"import string def removePunctuation(input_string): punctuations = string.punctuation output_string = \\"\\" for char in input_string: if char not in punctuations: output_string += char return output_string print(removePunctuation(\\"Hello, World!!!\\")) # Output: Hello World"},{"prompt":"Write a python program to calculate the total of the following list of numbers [2, 4, 5, 6, 8]","completion":"def calculate_total(lst): total = 0 for item in lst: total += item return total lst = [2, 4, 5, 6, 8] total = calculate_total(lst) print(total)"},{"prompt":"Write a Python program to convert kilometers to miles. Kilometers: 10","completion":"kilometers = 10 miles = kilometers * 0.621371 print(\\"{} kilometers is equal to {} miles\\".format(kilometers, miles))"},{"prompt":"Write a function in Python that takes a list of strings and a string as input and adds the string as the last item in the list. list=['apple','orange','banana'] string='kiwi'","completion":"def add_string_to_list(string_list, string): string_list.append(string) return string_list # sample call list = ['apple', 'orange', 'banana'] string = 'kiwi' new_list = add_string_to_list(list, string) print(new_list) # ['apple','orange','banana','kiwi']"},{"prompt":"Write a Python program that computes the mean and standard deviation of a dataset. Data = [1.1, 3.2, 4.7, 5.9, 7.7, 8.2]","completion":"mean = 5.42 sd = 2.48 def compute_stats(Data): # calculuate mean mean = sum(Data) / len(Data) # calculate standard deviation variance = 0.0 for i in Data: variance += (i - mean)**2 sd = variance ** 0.5 # return mean and sd return mean, sd"},{"prompt":"Create a Python script to look up the IMDB rating of a movie by its title. Title: The Prestige","completion":"import imdb ia = imdb.IMDb() movie = ia.search_movie('The Prestige')[0] ia.update(movie) print(movie['rating']) // Output: 8.5"},{"prompt":"To use the PttWebCrawler, create an instance of the class and provide a board name and either a start and end index or an article ID. Then call the parse_articles method to crawl through the specified range of pages or parse_article method to parse a single article. The output will be stored in a JSON file with the format BOARD_NAMESTART_INDEXEND_INDEX.json or BOARD_NAMEID.json.","completion":"# -*- coding: utf-8 -*- from __future__ import absolute_import from __future__ import print_function import os import re import sys import json import requests import argparse import time import codecs from bs4 import BeautifulSoup from six import u __version__ = '1.0' # if python 2, disable verify flag in requests.get() VERIFY = True if sys.version_info[0] < 3: VERIFY = False requests.packages.urllib3.disable_warnings() class PttWebCrawler(object): PTT_URL = 'https://www.ptt.cc' \\"\\"\\"docstring for PttWebCrawler\\"\\"\\" def __init__(self, cmdline=None, as_lib=False): parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, description=''' A crawler for the web version of PTT, the largest online community in Taiwan. Input: board name and page indices (or articla ID) Output: BOARD_NAME-START_INDEX-END_INDEX.json (or BOARD_NAME-ID.json) ''') parser.add_argument('-b', metavar='BOARD_NAME', help='Board name', required=True) group = parser.add_mutually_exclusive_group(required=True) group.add_argument('-i', metavar=('START_INDEX', 'END_INDEX'), type=int, nargs=2, help=\\"Start and end index\\") group.add_argument('-a', metavar='ARTICLE_ID', help=\\"Article ID\\") parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__) if not as_lib: if cmdline: args = parser.parse_args(cmdline) else: args = parser.parse_args() board = args.b if args.i: start = args.i[0] if args.i[1] == -1: end = self.getLastPage(board) else: end = args.i[1] self.parse_articles(start, end, board) else: # args.a article_id = args.a self.parse_article(article_id, board) def parse_articles(self, start, end, board, path='.', timeout=3): filename = board + '-' + str(start) + '-' + str(end) + '.json' filename = os.path.join(path, filename) self.store(filename, u'{\\"articles\\": [', 'w') for i in range(end-start+1): index = start + i print('Processing index:', str(index)) resp = requests.get( url = self.PTT_URL + '/bbs/' + board + '/index' + str(index) + '.html', cookies={'over18': '1'}, verify=VERIFY, timeout=timeout ) if resp.status_code != 200: print('invalid url:', resp.url) continue soup = BeautifulSoup(resp.text, 'html.parser') divs = soup.find_all(\\"div\\", \\"r-ent\\") for div in divs: try: # ex. link would be <a href=\\"/bbs/PublicServan/M.1127742013.A.240.html\\">Re: [åé¡] è·ç­</a> href = div.find('a')['href'] link = self.PTT_URL + href article_id = re.sub('.html', '', href.split('/')[-1]) if div == divs[-1] and i == end-start: # last div of last page self.store(filename, self.parse(link, article_id, board), 'a') else: self.store(filename, self.parse(link, article_id, board) + ',n', 'a') except: pass time.sleep(0.1) self.store(filename, u']}', 'a') return filename def parse_article(self, article_id, board, path='.'): link = self.PTT_URL + '/bbs/' + board + '/' + article_id + '.html' filename = board + '-' + article_id + '.json' filename = os.path.join(path, filename) self.store(filename, self.parse(link, article_id, board), 'w') return filename @staticmethod def parse(link, article_id, board, timeout=3): print('Processing article:', article_id) resp = requests.get(url=link, cookies={'over18': '1'}, verify=VERIFY, timeout=timeout) if resp.status_code != 200: print('invalid url:', resp.url) return json.dumps({\\"error\\": \\"invalid url\\"}, sort_keys=True, ensure_ascii=False) soup = BeautifulSoup(resp.text, 'html.parser') main_content = soup.find(id=\\"main-content\\") metas = main_content.select('div.article-metaline') author = '' title = '' date = '' if metas: author = metas[0].select('span.article-meta-value')[0].string if metas[0].select('span.article-meta-value')[0] else author title = metas[1].select('span.article-meta-value')[0].string if metas[1].select('span.article-meta-value')[0] else title date = metas[2].select('span.article-meta-value')[0].string if metas[2].select('span.article-meta-value')[0] else date # remove meta nodes for meta in metas: meta.extract() for meta in main_content.select('div.article-metaline-right'): meta.extract() # remove and keep push nodes pushes = main_content.find_all('div', class_='push') for push in pushes: push.extract() try: ip = main_content.find(text=re.compile(u'â» ç¼ä¿¡ç«:')) ip = re.search('[0-9]*.[0-9]*.[0-9]*.[0-9]*', ip).group() except: ip = \\"None\\" # ç§»é¤ 'â» ç¼ä¿¡ç«:' (starts with u'u203b'), 'â From:' (starts with u'u25c6'), ç©ºè¡åå¤é¤ç©ºç½ # ä¿çè±æ¸å­, ä¸­æåä¸­ææ¨é», ç¶²å, é¨åç¹æ®ç¬¦è filtered = [ v for v in main_content.stripped_strings if v[0] not in [u'â»', u'â'] and v[:2] not in [u'--'] ] expr = re.compile(u(r'[^u4e00-u9fa5u3002uff1buff0cuff1au201cu201duff08uff09u3001uff1fu300au300bsw:/-_.?~%()]')) for i in range(len(filtered)): filtered[i] = re.sub(expr, '', filtered[i]) filtered = [_f for _f in filtered if _f] # remove empty strings filtered = [x for x in filtered if article_id not in x] # remove last line containing the url of the article content = ' '.join(filtered) content = re.sub(r'(s)+', ' ', content) # print 'content', content # push messages p, b, n = 0, 0, 0 messages = [] for push in pushes: if not push.find('span', 'push-tag'): continue push_tag = push.find('span', 'push-tag').string.strip(' tnr') push_userid = push.find('span', 'push-userid').string.strip(' tnr') # if find is None: find().strings -> list -> ' '.join; else the current way push_content = push.find('span', 'push-content').strings push_content = ' '.join(push_content)[1:].strip(' tnr') # remove ':' push_ipdatetime = push.find('span', 'push-ipdatetime').string.strip(' tnr') messages.append( {'push_tag': push_tag, 'push_userid': push_userid, 'push_content': push_content, 'push_ipdatetime': push_ipdatetime} ) if push_tag == u'æ¨': p += 1 elif push_tag == u'å': b += 1 else: n += 1 # count: æ¨åæç¸æµå¾çæ¸é; all: æ¨æç¸½æ¸ message_count = {'all': p+b+n, 'count': p-b, 'push': p, 'boo': b, \\"neutral\\": n} # print 'msgs', messages # print 'mscounts', message_count # json data data = { 'url': link, 'board': board, 'article_id': article_id, 'article_title': title, 'author': author, 'date': date, 'content': content, 'ip': ip, 'message_conut': message_count, 'messages': messages } # print 'original:', d return json.dumps(data, sort_keys=True, ensure_ascii=False) @staticmethod def getLastPage(board, timeout=3): content = requests.get( url= 'https://www.ptt.cc/bbs/' + board + '/index.html', cookies={'over18': '1'}, timeout=timeout ).content.decode('utf-8') first_page = re.search(r'href=\\"/bbs/' + board + '/index(d+).html\\">&lsaquo;', content) if first_page is None: return 1 return int(first_page.group(1)) + 1 @staticmethod def store(filename, data, mode): with codecs.open(filename, mode, encoding='utf-8') as f: f.write(data) @staticmethod def get(filename, mode='r'): with codecs.open(filename, mode, encoding='utf-8') as f: return json.load(f) if __name__ == '__main__': c = PttWebCrawler()"},{"prompt":"Rewrite the following Python code using list comprehensions. lst = [] for each in range(5): x = each*each lst.append(x)","completion":"lst=[each*each for each in range(5)]"},{"prompt":"Create a Python program to find the longest element in the list. [1, 5, 4, 3, 9, 8]","completion":"def find_longest(arr): longest = 0 for item in arr: longest = max(len(str(item)), longest) return longest if __name__ == \\"__main__\\": list = [1, 5, 4, 3, 9, 8] print(find_longest(list))"},{"prompt":"Write a Python program to delete all characters in a string that matches a given pattern. string = The qick brown fox jumps over the lazy dog. pattern = q[az]ck","completion":"import re def delete_pattern_characters(string, pattern): return re.sub(pattern, \\"\\", string)"},{"prompt":"Generate a Python program that finds the maximum of an array of numbers. Find the maximum number from this array: [2, 4, 6, 1, 7, 12]","completion":"def find_max(arr): # Initialize max max = arr[0] # Traverse from arr[1] to end for i in range(1, len(arr)): # Compare every element with current max if arr[i] > max: max = arr[i] return max arr = [2, 4, 6, 1, 7, 12] result = find_max(arr) print(result)"},{"prompt":"Generate a Python script to filter the data in a given DataFrame and store the filtered data in a new DataFrame Filter data on a data frame by age and store filtered data in a new DataFrame","completion":"def filter_df_by_age(df, age): # Filter the dataframe filtered_df = df[df['age'] > age] # Create the new dataframe new_df = filtered_df.copy() # Return the new dataframe return new_df"},{"prompt":"Generate a Python program to implement binary search on the given sorted array. [2, 3, 5, 6, 8, 9]","completion":"def binary_search(arr, target): low = 0 high = len(arr) - 1 while low <= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] < target: low = mid + 1 else: high = mid - 1 return -1"},{"prompt":"Write an algorithm in Python to check if a number is a palindrome. number = 121","completion":"def is_palindrome(number): num = number # initializing a reverse number reverse = 0 # Reverse the given number while(number > 0): remainder = number % 10 # Create reverse reverse = (reverse * 10) + remainder number = number // 10 # check if original and reverse numbers are same if (num == reverse): return True else: return False"},{"prompt":"Write a Python function that takes a string, checks if it is a palindrome and returns true or false. level","completion":"def is_palindrome(string): rev_string = string[::-1] if string == rev_string: return True else: return False print(is_palindrome(\\"level\\"))"},{"prompt":"Rewrite the given Java code into Python. Int n = 5 for (int i = 1; i <= n; i++) { System.out.print(i + ); }","completion":"n = 5 for i in range(1, n+1): print(i, end=' ')"},{"prompt":"Write a Python program to delete the third element of a list. list = [1, 2, 3, 4, 5]","completion":"def delete_third_element(list): \\"\\"\\"Function to delete the third element of a list\\"\\"\\" del list[2] return list #Example: print(delete_third_element(list))"},{"prompt":"Create a program to generate a random password using Python that includes at least one uppercase, one lowercase, and one special character","completion":"import random import string def get_password(length): letters =string.ascii_lowercase+string.ascii_uppercase+string.digits+string.punctuation return ''.join(random.choice(letters) for i in range(length)) # Output result = get_password(8) print(result)"},{"prompt":"Create a Python program to delete all characters at odd index in a given string. Hello, World!","completion":"def deleteAtOddIndex(s): output = \\"\\" for i in range(len(s)): # delete the character at an odd index if i % 2 != 0: pass else: output += s[i] return output"},{"prompt":"Create a command line Python script to generate random numbers within a given range. Minimum Number: 10 and Maximum Number: 25","completion":"import random min_num = 10 max_num = 25 # Generate a random number rand_num = random.randint(min_num, max_num) # Print the random number print(rand_num)"},{"prompt":"Create a kernelized SVM classifier in Python for a multiclass classification problem.","completion":"# import necessary libraries from sklearn import svm # define the model model = svm.SVC(kernel='rbf', gamma=1.0, C=1.0) # fit the model model.fit(X, y) # make predictions y_pred = model.predict(X)"},{"prompt":"Write a Python script that identifies a given sentence as being positive or negative. Sentence: I'm feeling great today","completion":"def identify_sentiment(sentence): # Split sentence into individual words words = sentence.split() # Import Textblob package from textblob import TextBlob # Create a textblob object analysis = TextBlob(' '.join(words)) # Return sentiment polarity return analysis.sentiment.polarity if __name__ == \\"__main__\\": sentiment = identify_sentiment('I'm feeling great today') if sentiment > 0: print('Positive sentiment') elif sentiment == 0: print('Neutral sentiment') else: print('Negative sentiment')"},{"prompt":"Create a Python program to calculate the sum of all numbers between 1 and 50 inclusive.","completion":"total = 0 for i in range(1, 51): total += i print(total)"},{"prompt":"Generate a sequence of numbers in Python from 1 to 10 where each number is five times the previous number.","completion":"def generate_sequence(n): num = 1 for i in range(n): yield num num *= 5 list(generate_sequence(10)) #[1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125]"},{"prompt":"Design a Python program to calculate the area of a triangle given three side lengths. 3, 4, 5","completion":"def calculate_triangle_area(a, b, c): # Calculate the semi-perimeter s = (a + b + c) / 2 # Calculate the area of the triangle area = (s * (s - a) * (s - b) * (s - c)) ** 0.5 return area a = 3 b = 4 c = 5 area = calculate_triangle_area(a, b, c) print(\\"Area of the triangle is: {}\\".format(area))"},{"prompt":"Strengthen the following python code to make sure the input is a valid integer. def input_num(): num = int(input(Insert a number:))","completion":"def input_num(): while True: try: num = int(input(\\"Insert a number:\\")) break except ValueError: print(\\"Please enter a valid integer.\\") return num"},{"prompt":"Write a Python program to sort a list of tuples using a given key. [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]","completion":"def sort_list(lst, key): return sorted(lst, key = lambda x: x[key]) # Driver code lst = [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)] key = 1 print(sort_list(lst, key))"},{"prompt":"Design a web application in Python that will take a usersupplied text and count the number of unique characters. Hello my name is John","completion":"#!/usr/bin/env python from flask import Flask, render_template, request app = Flask(__name__) @app.route('/') def index(): return render_template('index.html') @app.route('/unique_count', methods=['POST']) def unique_count(): user_text = request.form['user_text'] # Count number of unique characters characters = set() for char in user_text: characters.add(char) char_count = len(characters) # Render the count result return render_template('result.html', char_count=char_count) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Generate an algorithm in Python that identifies a given word as belonging to a certain category (e.g. fruits). apple","completion":"def categorize(word): categories = { \\"fruits\\": [\\"apple\\", \\"orange\\", \\"banana\\"], \\"vegetables\\": [\\"carrot\\", \\"potato\\", \\"pepper\\"], \\"animals\\": [\\"dog\\", \\"cat\\", \\"bird\\"] } for category, words in categories.items(): if word in words: return category return \\"unknown\\" word = \\"apple\\" category = categorize(word) print(category)"},{"prompt":"Create a function in Python to find the most common elements in a list. [2, 4, 1, 4, 5, 6, 4, 8]","completion":"def most_common_element(lst): max_count = 0 most_common = None for num in lst: count = lst.count(num) if count > max_count: most_common = num max_count = count return most_common most_common_element([2, 4, 1, 4, 5, 6, 4, 8])"},{"prompt":"Write a Python program that prints a table of contents from a given list of headings. headings = [Introduction, Fundamentals, Algorithms, Design Patterns, Conclusion]","completion":"headings = [\\"Introduction\\", \\"Fundamentals\\", \\"Algorithms\\", \\"Design Patterns\\", \\"Conclusion\\"] print(\\"Table of Contents\\") for i, heading in enumerate(headings): print(f\\"{i+1}.{heading}\\")"},{"prompt":"Create a web scraper in Python to extract the text content from multiple webpages.","completion":"import requests from bs4 import BeautifulSoup # Fetch the webpages response = requests.get('https://example.com/page1.html') #response2 = requests.get('https://example.com/page2.html') #.. #responseN = requests.get('https://example.com/pageN.html') # Parse the HTML contents soup = BeautifulSoup(response.text, 'lxml') #soup2 = BeautifulSoup(response2.text, 'lxml') #.. #soupN = BeautifulSoup(responseN.text, 'lxml') # Extract the text content of each webpage text_content = soup.get_text() #text_content2 = soup2.get_text() #. #text_contentN = soupN.get_text()"},{"prompt":"Create a Python program that takes a positive integer as input and returns the closest Fibonacci number. Not applicable","completion":"def closest_fibonacci(number): a, b = 0, 1 while b < number: a, b = b, a + b return a number = int(input('Enter a positive integer: ')) print(\\"The closest Fibonacci number is\\", closest_fibonacci(number))"},{"prompt":"Write a Python program to filter out the words containing in a list that are 6 characters long. words = ['banana', 'apple', 'jacket', 'house', 'turtle']","completion":"filtered_words = [ word for word in words if len(word) == 6 ]"},{"prompt":"Create a Python program to calculate the total cost of a shopping cart given the prices of different items and their quantity. prices = [12, 10, 5, 8] quantities = [1, 2, 3, 4]","completion":"prices = [12, 10, 5, 8] quantities = [1, 2, 3, 4] total_cost = 0 for i in range(len(prices)): total_cost += prices[i] * quantities[i] print(total_cost)"},{"prompt":"Write a Python script to query the IMDB database and get all movies released in 2020 with 9 or 10 rating. Not applicable","completion":"import requests API_ENDPOINT = 'https://imdb-api.com/' # Sending get request and saving the response as response object resp = requests.get(API_ENDPOINT + 'movie/{' + 'release_date:2020%2Creview:9:10' + '}') # Extracting data in json format data = resp.json() # Printing the output print(data)"},{"prompt":"Write a python function to count the number of words in a sentence that are longer than the given length. sentence = This is a sample sentence length = 4","completion":"def count_long_words(sentence, length): words = sentence.split() count = 0 for word in words: if len(word) > length: count += 1 return count"},{"prompt":"Write a dialogue system in Python to respond to customer queries related to a product.","completion":"import random def respond_to_query(query): if query == 'What is the price?': return 'The price of our product is 30.' elif query == 'Where can I buy it?': return 'You can buy it from our online store or from select retailers.' elif query == 'How do I use it?': return 'Follow the instructions in the user manual.' else: responses = ['I am sorry, I do not understand your question.', 'Can you be more specific?', 'Please ask a specific question about the product.'] return random.choice(responses)"},{"prompt":"Create an algorithm in Python that takes an array of strings and removes all duplicates ['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango']","completion":"input_array = ['Apple', 'Orange', 'Apple', 'Mango', 'Banana', 'Mango'] unique_array = [] for item in input_array: if item not in unique_array: unique_array.append(item) print(unique_array) #['Apple', 'Orange', 'Mango', 'Banana']"},{"prompt":"Find a way to swap two values without using a temporary variable in Python. a = 2 b = 5","completion":"a, b = b, a"},{"prompt":"Modify the following Python program to calculate the factorial of a given number. n=5","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) num = 5 print(f\\"The factorial of {num} is {factorial(num)}\\")"},{"prompt":"Create a neural network in Python to classify crimerelated data. Dataset with 10 variables and 500 observations.","completion":"# Import libraries necessary for building the neural network import numpy as np import pandas as pd from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Dense, Dropout # Read in the dataset dataset = pd.read_csv('dataset.csv') X = dataset.iloc[:,:-1].values y = dataset.iloc[:,-1].values # Building the neural network model = Sequential() # First layer with input dimensions model.add(Dense(32, activation='relu', input_dim=X.shape[1])) model.add(Dropout(0.2)) # Second layer model.add(Dense(64, activation='relu')) model.add(Dropout(0.2)) # Output layer model.add(Dense(1, activation='sigmoid')) # Compile the model model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) # Fit the model model.fit(X, y, epochs=100, batch_size=32, validation_split=.2)"},{"prompt":"Create a Python program to display the upcoming 5 events from a given calendar.","completion":"import calendar from datetime import date, time, datetime def get_events(cal, start_date, num_events): events = [] for i in range(num_events): day_events = cal.itermonthdays2(start_date.year, start_date.month) while not day_events[0][1]: start_date = start_date.replace(day=(start_date.day + 1)) day_events = cal.itermonthdays2(start_date.year, start_date.month) event_date = start_date.replace(day=day_events[0][0]) events.append((event_date, day_events[0][1])) start_date = start_date.replace(day=(start_date.day + 1)) return events cal = calendar.Calendar() start_date = date.today() events = get_events(cal, start_date, 5) # print out the upcoming 5 events for event in events: print(event[0], event[1])"},{"prompt":"Write a Python program to check if a given data point is inside a given rectangle shaped area. data point (x,y)=(21,3.3) area with bottom left corner at (2.8, 7.1) and top right corner at (16.2, 13.7).","completion":"def is_in_rectangle(x,y,bottom_left,top_right): \\"\\"\\" Check if a given data point is inside a given rectangle shaped area. \\"\\"\\" # Unpack bottom left and top right coordinates bx, by = bottom_left tx, ty = top_right # Check if (x,y) is inside the rectangle if bx <= x <= tx and by <= y <= ty: return True else: return False # Data point (x,y) x, y = (21,3.3) # Area with bottom left corner at (2.8, -7.1) # and top right corner at (16.2, 13.7) bottom_left = (2.8,-7.1) top_right = (16.2,13.7) print(is_in_rectangle(x,y,bottom_left,top_right))"},{"prompt":"Write an algorithm in Python to sort an array of numbers in descending order. [13, 11, 7, 4, 2]","completion":"def descendingSort(arr): arr.sort(reverse=True) return arr arr = [13, 11, 7, 4, 2] result = descendingSort(arr) print (result)"},{"prompt":"Create a Python program to linear search a given list of elements.","completion":"#Linear search function def linear_search(list, x): for i in range(len(list)): if list[i] == x: return i return -1"},{"prompt":"Create a Python decorator that returns the decorated function with some additional information related to its runtime.","completion":"import time def timed(func): def get_runtime(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() total_time = end_time - start_time return result, total_time return get_runtime"},{"prompt":"Create a desktop application in Python to store passwords with authentication.","completion":"# Import relevant libraries import tkinter as tk import hashlib # Create the main window root = tk.Tk() root.title('Password Manager') # Create a secure password database password_storage = {} # Create a function for hashing the password def hash_password(password): hashed_password = hashlib.sha256(password.encode('utf-8')).hexdigest() return hashed_password # Create an authentication system to prompt the user to enter a username and password def authenticate(): username_entry = tk.Entry(root) username_entry.pack() password_entry = tk.Entry(root, show=\\"*\\") password_entry.pack() def authenticate_user(): username = username_entry.get() password = password_entry.get() hashed_password = hash_password(password) if username in password_storage and password_storage[username] == hashed_password: print('Authenticated!') else: print('Incorrect') tk.Button(root, text='Authenticate', command=authenticate_user).pack() # Call the authenticate function authenticate() root.mainloop()"},{"prompt":"Create a web scraping script in Python that collects product prices from an ecommerce website. A URL to the ecommerce website","completion":"import requests from bs4 import BeautifulSoup # Make the request url = '<URL HERE>' resp = requests.get(url) # Parse the HTML soup = BeautifulSoup(resp.text, 'html.parser') # Get all product prices prices = soup.find_all('span', 'price') # Extract the prices product_prices = [] for price in prices: product_prices.append(price.text) # Print the prices for price in product_prices: print(price)"},{"prompt":"Create a python code to calculate the number of hours between two times. time1 = 1:00pm time2 = 4:45pm","completion":"from datetime import datetime def hours_difference(time1,time2): ''' This program takes two times and calculates the number of hours between them ''' time_format = '%I:%M%p' #12-hour clock AM/PM time1 = datetime.strptime(time1, time_format) time2 = datetime.strptime(time2, time_format) difference = time2 - time1 return difference.seconds/3600 print(hours_difference(\\"1:00pm\\", \\"4:45pm\\")) # 3.75"},{"prompt":"Given a list of numbers, write a function in Python that returns the average of the numbers. [4, 2, 6, 8, 10]","completion":"def average_list(list): total = 0 for item in list: total += item return total / len(list) list = [4,2,6,8,10] print(average_list(list)) # Output: 6.0"},{"prompt":"Write a code generator in Python that takes a code base as input and transforms it as output.","completion":"def code_generator(code_base): updated_code = [] lines = code_base.splitlines() for line in lines: # Tokenize the line tokens = line.split(' ') # Find the tokens that need to be updated modified_tokens = [token for token in tokens if token.startswith('[') and token.endswith(']')] # Replace the tokens with new ones for token in modified_tokens: new_token = token.replace(\\"[\\", \\"\\") new_token = new_token.replace(\\"]\\", \\"\\") new_token = generate_new_token() line = line.replace(token, new_token) updated_code.append(line) return 'n'.join(updated_code) def generate_new_token(): return \\"<generated-token>\\" code_base = ''' def foo(): x = [test] y = [test2] return x + y ''' print(code_generator(code_base))"},{"prompt":"Create a Python class to represent a circle with the given attributes radius and color. radius: 3 color: blue","completion":"class Circle: \\"This class represents a circle\\" def __init__(self, radius, color): self.radius = radius self.color = color def get_radius(self): return self.radius def get_color(self): return self.color def set_radius(self, radius): self.radius = radius def set_color(self, color): self.color = color"},{"prompt":"What Python code can you create to remove the second character from a given string? string = example","completion":"removed_string = string[:1] + string[2:] print(removed_string) # \\"xample\\""},{"prompt":"Optimize the following Python code for finding the second largest number in the list. list = [2, 10, 7, 5, 8]","completion":"def find_second_largest_number(input_list): '''Finds the second largest number in a given list.''' first = float(\\"-infinity\\") second = float(\\"-infinity\\") for num in input_list: if num > first: second = first first = num elif num > second and num != first: second = num return second list = [2, 10, 7, 5, 8] print(find_second_largest_number(list)) # Output: 8"},{"prompt":"Write a Python program to count the number of elements which are greater than the given number? list1 = [1, 2, 3, 4, 5], number = 3","completion":"list1 = [1, 2, 3, 4, 5] number = 3 #initialize a count count = 0 #iterate through the list and count the elements that are greater than the given number for num in list1: if num > number: count += 1 print(\\"Number of elements greater than the given number:\\", count)"},{"prompt":"Design a program in Python to add the numbers from 0 to 10 using recursion.","completion":"def sum_recursive(n): if(n == 0): return 0 else: return n + sum_recursive(n-1) print(sum_recursive(10))"},{"prompt":"Create a Python class that stores student information and an instance method for retrieving it.","completion":"class Student: def __init__(self, name, age, college): self.name = name self.age = age self.college = college def getStudentInformation(self): return 'Name: %s | Age: %s | College: %s' % (self.name, self.age, self.college) student = Student('John', 20, 'ABCD University') print(student.getStudentInformation())"},{"prompt":"Write a Python program to split a given list into two lists based on a given condition. list = [1, 2, 3, 4, 5, 6, 7, 8]","completion":"list = [1, 2, 3, 4, 5, 6, 7, 8] #Split the list into two lists based on a given condition list_a = [x for x in list if x % 2 == 0] list_b = [x for x in list if x % 2 != 0] print(list_a) #[2, 4, 6, 8] print(list_b) #[1, 3, 5, 7]"},{"prompt":"Create an HTML page to display a portfolio of your projects. The page should include a header, a footer, content sections, and links to each project with detailed descritions. Not applicable","completion":"<html> <head> <title>My Portfolio</title> </head> <body> <h1>My Portfolio</h1> <div> <p>This is my portfolio of projects I have built. I have included a brief description and a link to each one.</p> </div> <div> <h2>Project 1: Shopping App</h2> <p>This is a mobile application written in JavaScript and React Native for users to shop online. It allows users to browse through a catalog of products, add products to their shopping carts, and place orders.</p> <a href=\\"https://github.com/username/shopping-app\\">See the project on Github</a> </div> <div> <h2>Project 2: Scheduling App</h2> <p>This is a web application written in JavaScript and React for users to manage their appointments and events. It allows users to create events, invite others to events, and sync events with their calendar.</p> <a href=\\"https://github.com/username/scheduling-app\\">See the project on Github</a> </div> <div> <h2>Project 3: Database Management App</h2> <p>This is a desktop application written in Python and Qt for users to manage their databases. It allows users to view database tables, add and edit records, and delete records.</p> <a href=\\"https://github.com/username/database-management-app\\">See the project on Github</a> </div> <footer> <p>Copyright Â© 2020 My Portfolio</p> </footer> </body> </html>"},{"prompt":"Write a Python program to identify all words in the given paragraph. paragraph = Thomas Jefferson was an American statesman, diplomat, lawyer, architect, philosopher and Founding Father who served as the third president of the United States from 1801 to 1809.","completion":"paragraph = \\"Thomas Jefferson was an American statesman, diplomat, lawyer, architect, philosopher and Founding Father who served as the third president of the United States from 1801 to 1809.\\" words = paragraph.split() print(words) # [\\"Thomas\\", \\"Jefferson\\", \\"was\\", \\"an\\", \\"American\\", \\"statesman,\\", \\"diplomat,\\", \\"lawyer,\\", \\"architect,\\", \\"philosopher\\", \\"and\\", \\"Founding\\", \\"Father\\", \\"who\\", \\"served\\", \\"as\\", \\"the\\", \\"third\\", \\"president\\", \\"of\\", \\"the\\", \\"United\\", \\"States\\", \\"from\\", \\"1801\\", \\"to\\", \\"1809.\\"]"},{"prompt":"Write a Python program to generate a series of random numbers ranging from 0 to 9.","completion":"import random for i in range(10): print(random.randint(0, 9))"},{"prompt":"Generate a code in Python to find the Kth smallest element in an array.","completion":"def find_kth_smallest(arr, k): n = len(arr) arr.sort() return arr[k-1]"},{"prompt":"Code a Python program that prints out the longest word in a given sentence. This is an example sentence with some words.","completion":"sentence_string = 'This is an example sentence with some words.' word_list = sentence_string.split(' ') longest_word = sorted(word_list, key=len)[-1] print(longest_word) # Output sentence"},{"prompt":"Perform classification on the given dataset using Support Vector Machines in Python. X = [[0,0],[1,1],[1,2],[2,2],[2,3]] y = [0,0,0,1,1]","completion":"from sklearn.svm import SVC model = SVC(kernel = 'linear', probability=True) model.fit(X, y)"},{"prompt":"Write a Python program to find the maximum and minimum numbers from a nonempty list. [5, 6, 10, 9, 3, 21]","completion":"# Initializing the list list1 = [5, 6, 10, -9, 3, 21] # Maximum and Minimum in a List max = list1[0] min = list1[0] # Print all the list elements for i in range(0, len(list1)): if list1[i]>max: max = list1[i] if list1[i]<min: min = list1[i] print(\\"The max value is:\\", max) print(\\"The min value is:\\", min)"},{"prompt":"Create a deep learning algorithm in Python to classify emails as spam or not spam.","completion":"import numpy as np import keras from keras.models import Sequential from keras.layers import Dense, Dropout def create_spam_classifier(): model = Sequential() model.add(Dense(128, activation='relu', input_shape=(20,))) model.add(Dropout(0.5)) model.add(Dense(1, activation='sigmoid')) model.compile( optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'] ) return model if __name__ == \\"__main__\\": model = create_spam_classifier()"},{"prompt":"Determine the best Python library for detecting malicious URLs.","completion":"The best Python library for detecting malicious URLs is URL Observatory. It uses a combination of machine learning and data mining algorithms to detect and flag malicious URLs. It is available on Github and has been tested and found to be reliable."},{"prompt":"Create a function in Python to find all the indices of a given item in a list. list = [1,2,3,4,5,2] item = 2","completion":"def find_all_indices(list, item): result = [] for index, i in enumerate(list): if i == item: result.append(index) return result list = [1,2,3,4,5,2] item = 2 #find all indices of the item indices = find_all_indices(list, item) #print the indices print(indices) # [1, 5]"},{"prompt":"Create a backtracking algorithm in Python to generate all palindromic permutations of a given string. myString = aborr","completion":"def all_palindromic_permutations(myString): if len(myString) == 0: return [''] permutationList = [] for i in range(len(myString)): subString = myString[:i] + myString[i+1:] partList = all_palindromic_permutations(subString) for permutation in partList: if myString[i] == permutation[0]: permutationList.append(myString[i] + permutation + myString[i]) else: permutationList.append(permutation + myString[i]) return list(set(permutationList))"},{"prompt":"Write a Python program that automatically converts Celsius to Fahrenheit.","completion":"def celsius_to_fahrenheit(temp_celsius): temp_fahrenheit = (temp_celsius * 9/5) + 32 return temp_fahrenheit celsius_to_fahrenheit(20) # Output: 68.0"},{"prompt":"Generate a Python program that searches for a given key in a dictionary. key: 'name'","completion":"my_dict = { 'name': 'John', 'age': 26, 'salary': 5000 } find_key = 'name' if find_key in my_dict: print(my_dict[find_key])"},{"prompt":"Clean a set of text data using Python. Text data: Attached","completion":"# Import necessary libraries import re import nltk nltk.download('stopwords') from nltk.corpus import stopwords # Read input data with open('input.txt', 'r') as f: data = f.read() # Lowercase data = data.lower() # Clean up punctuation data = re.sub(r'[^ws]', ' ', data) # Tokenize words data = nltk.word_tokenize(data) # Remove stopwords data = [w for w in data if w not in stopwords.words('english')] # Write cleaned data to file with open('output.txt', 'w') as f: f.write(' '.join(data))"},{"prompt":"mplement a minisearch engine in Python for a corpus of documents. Not applicable","completion":"#importing necessary libraries from sklearn.feature_extraction.text import CountVectorizer from sklearn.metrics.pairwise import cosine_similarity #Defining a function to calculate cosine similarity def cosine_similarity(text): vectors = [t for t in text] cv = CountVectorizer() counts = cv.fit_transform(vectors) return cosine_similarity(counts) #Declaring the corpus of documents corpus = ['the goal of this search engine is to find documents similar to a query', 'the algorithm begins by vectorizing the query and the documents', 'the query and documents are then compared using cosine similarity'] #Calculating similarity similarity_matrix = cosine_similarity(corpus) #Printing the cosine similarity matrix print(similarity_matrix)"},{"prompt":"Modify the below Python code to print the type of a given input. input_value = 4","completion":"input_value = 4 print(type(input_value))"},{"prompt":"Create a Python script that takes in a string and returns a dictionary of the number of times each character appears in the string. Not applicable","completion":"def character_count(str): d = dict() for c in str: if c in d: d[c] += 1 else: d[c] = 1 return d"},{"prompt":"Write a Python program to check if two strings are a rotation of each other. Strings:âgeeksforgeeksâ, âforgeeksgeeksâ","completion":"if len(string1) == len(string2) and string1 in string2*2: print(\\"The strings are a rotation of each other\\") else: print(\\"The strings are not a rotation of each other\\")"},{"prompt":"Create a web API in Python using Flask that returns a list of ocean creatures given a userâs query. Query: Jellyfish","completion":"import requests from flask import Flask, jsonify, request app = Flask(__name__) @app.route(\\"/api/ocean-creatures\\", methods=[\\"GET\\"]) def get_ocean_creatures(): query = request.args.get(\\"q\\",\\"\\") url = \\"https://en.wikipedia.org/w/api.php\\" params = { 'action': 'query', 'list':'search', 'srsearch': query + ' ocean', 'format': 'json', } res = requests.get(url, params=params).json() return jsonify(res) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a Python function to calculate the magnitude of a 2D vector.","completion":"def calc_magnitude(v1): return math.sqrt(v1[0]**2 + v1[1]**2)"},{"prompt":"Write a recursive function in Python to compute the nth Fibonacci number","completion":"def Fibonacci(n): if n <= 1: return n else: return (Fibonacci(n-1) + Fibonacci(n-2))"},{"prompt":"Generate a python program to check if the string is a palindrome or not. string = madam","completion":"def is_palindrom(string): reverse_string = string[::-1] if string == reverse_string: return True else: return False"},{"prompt":"Using Python, create a program that calculates the average grade of 4 students. John: 85 George: 90 Sarah: 75 Emily: 95","completion":"john_grade = 85 george_grade = 90 sarah_grade = 75 emily_grade = 95 def average_grade(john_grade, george_grade, sarah_grade, emily_grade): return (john_grade + george_grade + sarah_grade + emily_grade) / 4 avg_grade = average_grade(john_grade, george_grade, sarah_grade, emily_grade) print('The average grade of 4 students is', avg_grade)"},{"prompt":"Create a Python program to print out a listed dictionary. my_dict = {'Name': 'John', 'Age': 26, 'Gender': 'Male'}","completion":"for key, value in my_dict.items(): print(f\\"{key}: {value}\\")"},{"prompt":"Write a Python program that takes two strings and returns the longest common subsequence between the two strings. String1 = ABCDAF String2 = ACBCF","completion":"def lcs(string1, string2): n = len(string1) m = len(string2) dp = [[0 for x in range(m + 1)] for x in range(n + 1)] # fill dp table in bottom up manner for i in range(n + 1): for j in range(m + 1): if i == 0 or j == 0: dp[i][j] = 0 elif string1[i-1] == string2[j-1]: dp[i][j] = dp[i-1][j-1] + 1 else: dp[i][j] = max(dp[i-1][j], dp[i][j-1]) index = dp[n][m] # Create an array of size of lcs longest_common_subsequence = [\\"\\"] * (index + 1) longest_common_subsequence[index] = \\"\\" # Start from the right-most-bottom-most corner and # one by one store characters in lcs[] i = n j = m while i > 0 and j > 0: # If current character in X[] and Y are same, then # current character is part of LCS if string1[i-1] == string2[j-1]: longest_common_subsequence[index - 1] = string1[i-1] i-=1 j-=1 index-=1 # If not same, then find the larger of two and # go in the direction of larger value elif dp[i-1][j] > dp[i][j-1]: i-=1 else: j-=1 return \\"\\".join(longest_common_subsequence)"},{"prompt":"Generate a Python program that requests a movie title and prints the synopsis of the movie. Toy Story","completion":"import requests # Get the movie title from user input title = input(\\"Enter a movie title: \\") # Make a request to the OMDb API url = \\"http://www.omdbapi.com/?t=\\" + title + \\"&plot=full&apikey=<YOUR_API_KEY> response = requests.get(url) data = response.json() # Print the synopsis print(\\"Synopsis: \\" + data[\\"Plot\\"])"},{"prompt":"Write a Python program to create a GUI calculator interface using Tkinter. Not applicable","completion":"import tkinter as tk window = tk.Tk() window.title('Calculator') window.geometry('300x150') # Create the input field input_field = tk.Entry( window, font=('Courier', 20), width=15, borderwidth=5 ) input_field.grid(row=0, column=0, columnspan=4, padx=10, pady=10) # Function to return the value of the button clicked def button_pressed(value): current = input_field.get() input_field.delete(0, tk.END) input_field.insert(0, str(current) + str(value)) # Create button object button_0 = tk.Button(window, text='0', padx=40, pady=20, command=lambda: button_pressed(0)) button_1 = tk.Button(window, text='1', padx=40, pady=20, command=lambda: button_pressed(1)) button_2 = tk.Button(window, text='2', padx=40, pady=20, command=lambda: button_pressed(2)) button_3 = tk.Button(window, text='3', padx=40, pady=20, command=lambda: button_pressed(3)) button_4 = tk.Button(window, text='4', padx=40, pady=20, command=lambda: button_pressed(4)) button_5 = tk.Button(window, text='5', padx=40, pady=20, command=lambda: button_pressed(5)) button_6 = tk.Button(window, text='6', padx=40, pady=20, command=lambda: button_pressed(6)) button_7 = tk.Button(window, text='7', padx=40, pady=20, command=lambda: button_pressed(7)) button_8 = tk.Button(window, text='8', padx=40, pady=20, command=lambda: button_pressed(8)) button_9 = tk.Button(window, text='9', padx=40, pady=20, command=lambda: button_pressed(9)) button_add = tk.Button(window, text='+', padx=39, pady=20, command=lambda: button_pressed('+')) button_sub = tk.Button(window, text='-', padx=41, pady=20, command=lambda: button_pressed('-')) button_mul = tk.Button(window, text='*', padx=40, pady=20, command=lambda: button_pressed('*')) button_div = tk.Button(window, text='/', padx=41, pady=20, command=lambda: button_pressed('/')) # Place all the buttons button_0.grid(row=4, column=0) button_1.grid(row=3, column=0) button_2.grid(row=3, column=1) button_3.grid(row=3, column=2) button_4.grid(row=2, column=0) button_5.grid(row=2, column=1) button_6.grid(row=2, column=2) button_7.grid(row=1, column=0) button_8.grid(row=1, column=1) button_9.grid(row=1, column=2) button_add.grid(row=4, column=3) button_sub.grid(row=3, column=3) button_mul.grid(row=2, column=3) button_div.grid(row=1, column=3) # Run the mainloop window.mainloop()"},{"prompt":"Develop a Python program for generating a random number between given limits.","completion":"import random def random_number(start, end): return random.randint(start, end)"},{"prompt":"Design a class in Python that implements a stack with the basic operations (push, pop, and peek)","completion":"class Stack: def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[-1] def isEmpty(self): return self.items == []"},{"prompt":"Generate code to compare two objects in Python.","completion":"def compare_objects(obj1, obj2): # Compare type if type(obj1) != type(obj2): return False # Compare values if isinstance(obj1, (int, float)): if obj1 != obj2: return False elif isinstance(obj1, str): if obj1 != obj2: return False elif isinstance(obj1, tuple): if obj1 != obj2: return False elif isinstance(obj1, list): if len(obj1) == len(obj2): if all(x == y for x, y in zip(obj1, obj2)): return True else: return False elif isinstance(obj1, dict): if len(obj1) == len(obj2): if obj1 == obj2: return True else: return False return True"},{"prompt":"Generate a Python script to print the Fibonacci sequence.","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b # Driver Program print(Fibonacci(9))"},{"prompt":"Design an algorithm and write a Python function to find the most frequently occurring element in a given list of integers. [2,2,2,3,3,3,4,6,7,6]","completion":"def most_frequent(list): max_count = 0 max_item = None dict = {} for item in list: if (item in dict): dict[item] += 1 else: dict[item] = 1 for key, value in dict.items(): if value > max_count: max_count = value max_item = key return max_item list = [2,2,2,3,3,3,4,6,7,6] print(most_frequent(list))"},{"prompt":"Generate a valid python program to remove the duplicate elements from a given list. [2, 3, 4, 3, 2, 4]","completion":"def remove_duplicates(input_list): result = [] for ele in input_list: if ele not in result: result.append(ele) return result"},{"prompt":"Generate a Python program to accept a string as an input and perform a stability check on it. String: This is a test sentence!","completion":"def checkStability(input_string): # Initializing variable to 0 stability_level = 0 # Counting vowels vowels_count = 0 vowel_list = ['a','e','i','o','u'] for i in input_string: if i in vowel_list: vowels_count += 1 # Calculating stability stability_level = vowels_count / len(input_string) # Printing out the stability print(\\"Stability of string '%s' = %.2f\\" %(input_string,stability_level)) input_string = \\"This is a test sentence!\\" checkStability(input_string)"},{"prompt":"Develop a Python program to sort a given array of numbers in ascending order by selection sort. Sort the following array in ascending order: [2, 3, 1, 10, 0]","completion":"def selection_sort(arr): # Iterate through array for i in range(0, len(arr)-1): # Find the minimum element in the unsorted subarray min_index = i for j in range(i+1, len(arr)): if arr[min_index] > arr[j]: min_index = j # Swap the found minimum element with the first element arr[i], arr[min_index] = arr[min_index], arr[i] # Driver code arr = [2, -3, 1, 10, 0] selection_sort(arr) for i in range(len(arr)): print(arr[i]),"},{"prompt":"Write an algorithm that extracts important keywords from a text string in Python. This is a text string with some important keywords.","completion":"def extract_keywords(text): # lowercase the text text = text.lower() # split the text into words words = text.split(' ') # create a list to store the keywords keywords = [] # iterate over each word and extract keywords for word in words: # if the word contains more than 3 characters # and is not in a stopwords list # then it is a keyword if len(word) > 3 and word not in stopwords: keywords.append(word) # return the list of keywords return keywords extract_keywords('This is a text string with some important keywords.') # => ['text', 'string', 'important', 'keywords']"},{"prompt":"Develop an algorithm to print all permutations of a given string in Python. Not applicable","completion":"def permute(s): if len(s) == 1: return [s] permutations = [] for i, a in enumerate(s): others = s[:i] + s[i+1:] for p in permute(others): permutations.append(a + p) return permutations"},{"prompt":"Create a python function that computes the Goldbach conjecture for a given positive even number n.","completion":"def Goldbach_conjecture(n): assert type(n) == int and n > 0, \\"n must be a positive integer.\\" if n % 2 != 0: raise ValueError(\\"n must be an even number.\\") # list to hold all the prime pairs that add to n prime_pairs = [] # find all prime numbers less than n primes = [x for x in range(2, n+1) if isprime(x)] # loop through all prime numbers for prime_x in primes: # check if prime_x added to any prime number less than prime_x # equals n. If true, add that prime pair to the prime_pairs list for prime_y in primes: if prime_y < prime_x and prime_x + prime_y == n: prime_pairs.append((prime_x, prime_y)) return prime_pairs def isprime(n): # check if n is prime if n < 2: return False if n % 2 == 0 and n > 2: return False for i in range(3, int(sqrt(n)) + 1, 2): if n % i == 0: return False return True"},{"prompt":"Write a python program to generate the binary representation of a base10 number","completion":"def decimal_to_binary(num): if num > 1: decimal_to_binary(num//2) print(num % 2,end = '')"},{"prompt":"Build a program in Python that calculates the area of a triangle. base = 10 height = 15","completion":"def calculate_triangle_area(base, height): return 0.5 * base * height base = 10 height = 15 area = calculate_triangle_area(base, height) print('Area of the triangle: ', area)"},{"prompt":"Create a program in Python which will print the names of the top 3 numbers in a given list. [1, 43, 124, 87, 92]","completion":"\\"\\"\\" Print the names of the top 3 numbers in a given list \\"\\"\\" my_list = [1, 43, 124, 87, 92] # Sort the list my_list.sort(reverse=True) # Print the top 3 numbers print(my_list[0], \\"is the first biggest number\\") print(my_list[1], \\"is the second biggest number\\") print(my_list[2], \\"is the third biggest number\\")"},{"prompt":"Program a web crawler in Python to crawl URLs from a given website and follow all external links. url = https://www.example.com","completion":"import requests from bs4 import BeautifulSoup # Set the base URL url = \\"https://www.example.com\\" # Keep track of visited URLs visited = set() # Set of external URLs urls_external = set() # Perform the crawl def crawl(): response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') internal_urls = set() # Find all links on the page for link in soup.find_all('a'): if url.startswith(url): internal_urls.add(link['href']) else: urls_external.add(link['href']) # Recursively crawl all internal URLs for internal_url in internal_urls: if internal_url not in visited: visited.add(internal_url) crawl(internal_url) crawl()"},{"prompt":"Compose a function in Python that takes two arguments: a list of numbers and a target number. Then return a list of all pairs of numbers in the list that add up to the target number. list_of_numbers = [3, 5, 7, 8, 12] target_number = 11","completion":"def sumPairs(list_of_numbers, target_number): result = [] for i in range(len(list_of_numbers)): for j in range(i+1, len(list_of_numbers)): if list_of_numbers[i] + list_of_numbers[j] == target_number: result.append([list_of_numbers[i], list_of_numbers[j]]) return result list_of_numbers = [3, 5, 7, 8, 12] target_number = 11 print(sumPairs(list_of_numbers, target_number))"},{"prompt":"Design a Python program to optimize the operation of a robot","completion":"\\"\\"\\" Design a Python program to optimize the operation of a robot This program will take a function that maps the robot's movement from one cell to another in an environment, as well as a data structure that represents the cost associated with each cell as its input. The program will return an optimal path for the robot to take from a start cell to an end cell while minimizing its cost. \\"\\"\\" def optimize_robot(map_func, cost_map): pass"},{"prompt":"Create a python program which calculate gcd of two numbers","completion":"def gcd(a, b): if a == 0: return b return gcd(b % a, a) # Function to return gcd of a and b def compute_gcd(x, y): while(y): x, y = y, x % y return x"},{"prompt":"Generate a load testing report for a given website.","completion":"\\"\\"\\" Python script to generate a load testing report for a given website \\"\\"\\" import requests import json def generate_report(url): # Send a request to the given URL response = requests.get(url) # Get the request duration duration = response.elapsed.total_seconds() # Generate the report as a dictionary report = { 'URL': url, 'StatusCode': response.status_code, 'Duration': duration } return report if __name__ == '__main__': url = 'http://example.com' report = generate_report(url) print(json.dumps(report, indent=4))"},{"prompt":"This code opens a PDF file and displays its metadata, renders the first page of the PDF with a specified zoom factor and rotation, extracts the text from the page, and displays it in a scrollable window. To use this code, run the Python script with the PDF file name as the first argument and optional arguments for page number, zoom factor, and rotation. The extracted text can be further processed or saved to a file.","completion":"#! /usr/bin/env python # -*- Python -*- import argparse import sys import numpy as np import mupdf as cmupdf from MuPDF import * from PyQt4 import QtCore, QtGui def show_metadata(ctx, doc): for key in ( 'Title', 'Subject', 'Author', 'Creator', 'Producer', 'CreationDate', 'ModDate', ): print cmupdf.get_meta_info(doc, key, 1024) fz_buffer = cmupdf.pdf_metadata(doc) print cmupdf.fz_buffer_data(fz_buffer) cmupdf.fz_drop_buffer(ctx, fz_buffer) def show_pdf(np_array): application = QtGui.QApplication(sys.argv) height, width = np_array.shape[:2] image = QtGui.QImage(np_array.data, width, height, QtGui.QImage.Format_ARGB32) label = QtGui.QLabel() label.setPixmap(QtGui.QPixmap.fromImage(image)) area = QtGui.QScrollArea() area.setWidget(label) area.setWindowTitle(args.filename) area.show() application.exec_() def get_font_name(font): font_name = cmupdf.get_font_name(font) i = font_name.find('+') if i: font_name = font_name[i+1:] return font_name def dump_bbox(obj): return \\"[%g %g %g %g]\\" % (obj.bbox.x0, obj.bbox.y0, obj.bbox.x1, obj.bbox.y1) def dump_text_style(text_sheet): style = text_sheet.style while style: font = style.font message = \\"span.s%u{font-family:\\"%s\\";font-size:%gpt\\" % (style.id, get_font_name(font), style.size) if cmupdf.font_is_italic(font): message += ';font-style:italic' if cmupdf.font_is_bold(font): message += ';font-weight:bold;' message += '}' print message style = style.next def dump_text_page_xml(text_page): print \\"<page>\\" for block in TextBlockIterator(text_page): print \\"<block bbox=\\"\\" + dump_bbox(block) + \\"\\">\\" for line in TextLineIterator(block): print \\" \\"*2 + \\"<line bbox=\\"\\" + dump_bbox(line) + \\"\\">\\" for span in TextSpanIterator(line): print \\" \\"*4 + \\"<span bbox=\\"\\" + dump_bbox(span) + \\"\\" \\">\\" for ch in TextCharIterator(span): style = ch.style font_name = get_font_name(style.font) print \\" \\"*6 + \\"<char \\" + u\\" c=\\"%s\\" font=\\"%s\\" size=\\"%g\\"/>\\" % (unichr(ch.c), font_name, style.size) print \\" \\"*4 + \\"</span>\\" print \\" \\"*2 + \\"</line>\\" print \\"</block>\\" print \\"</page>\\" def dump_text_page(text_page): empty_block = False for block in TextBlockIterator(text_page): if not empty_block: print 'n<Block>' empty_block = True for line in TextLineIterator(block): line_text = u'' for span in TextSpanIterator(line): span_text = u'' for ch in TextCharIterator(span): span_text += unichr(ch.c) span_text = span_text.rstrip() if span_text: line_text += '<Span>' + span_text + '</Span>' else: line_text += '<Empty Span>' if line_text: print line_text empty_block = False class GrowingTextBrowser(QtGui.QTextBrowser): _id = 0 def __init__(self, *args, **kwargs): GrowingTextBrowser._id += 1 self._id = GrowingTextBrowser._id super(GrowingTextBrowser, self).__init__(*args, **kwargs) size_policy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed) size_policy.setHeightForWidth(True) self.setSizePolicy(size_policy) self.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff) def setPlainText(self, text): super(GrowingTextBrowser, self).setPlainText(text) self._text = text def print_document_size(self, document=None): if document is None: document = self.document() document_size = document.size() print \\"Document width\\", document_size.width(), 'height', document_size.height() def sizePolicy(self): size_policy = super(GrowingTextBrowser, self).sizePolicy() print 'GrowingTextBrowser.sizePolicy', self._id, size_policy.horizontalPolicy(), size_policy.verticalPolicy() return size_policy def sizeHint(self): size = super(GrowingTextBrowser, self).sizeHint() print 'GrowingTextBrowser.sizeHint', self._id, size.width(), size.height() return QtCore.QSize(0, 0) def minimumSizeHint(self): size = super(GrowingTextBrowser, self).minimumSizeHint() print 'GrowingTextBrowser.minimumSizeHint', self._id, size.width(), size.height() return QtCore.QSize(0, 0) def heightForWidth(self, width): print 'GrowingTextBrowser.heightForWidth', self._id, width document = QtGui.QTextDocument(self._text) document.setPageSize(QtCore.QSizeF(width, -1)) height = document.documentLayout().documentSize().toSize().height() self.print_document_size(document) return height + self.font().pointSize() def resizeEvent(self, event): print 'GrowingTextBrowser.resizeEvent', self._id, 'old', event.oldSize().width(), event.oldSize().height(), 'new', event.size().width(), event.size().height() self.print_document_size() return super(GrowingTextBrowser, self).resizeEvent(event) def append_block(parent, vertical_layout, source_text): text_browser = GrowingTextBrowser(parent) text_browser.setPlainText(source_text) # vertical_layout.addWidget(text_browser) horizontal_layout = QtGui.QHBoxLayout() horizontal_layout.addWidget(text_browser, 0, QtCore.Qt.AlignTop) vertical_layout.addLayout(horizontal_layout) def show_text_page(text_page): application = QtGui.QApplication(sys.argv) main_window = QtGui.QMainWindow() main_window.resize(1000, 800) main_window.setWindowTitle(args.filename) scroll_area = QtGui.QScrollArea(main_window) # scroll_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn) scroll_area.setWidgetResizable(True) main_window.setCentralWidget(scroll_area) container_widget = QtGui.QWidget() vertical_layout = QtGui.QVBoxLayout(container_widget) # Set container_widget layout scroll_area.setWidget(container_widget) for block in TextBlockIterator(text_page): block_text = u'' for line in TextLineIterator(block): line_text = u'' for span in TextSpanIterator(line): span_text = u'' for ch in TextCharIterator(span): span_text += unichr(ch.c) span_text = span_text.rstrip() if span_text: # Append span to line line_text += span_text else: # Empty span then append a block if block_text: append_block(container_widget, vertical_layout, block_text) block_text = u'' line_text = u'' # Append line to block if block_text: block_text += ' ' block_text += line_text if block_text: append_block(container_widget, vertical_layout, block_text) spacer_item = QtGui.QSpacerItem(0, 0, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding) vertical_layout.addItem(spacer_item) print 'Show' #main_window.show() main_window.showMaximized() application.exec_() argument_parser = argparse.ArgumentParser(description='Example.') argument_parser.add_argument('filename', metavar='FILENAME', help='PDF file') argument_parser.add_argument('--page', dest='page_number', type=int, default=1, help='Page number') argument_parser.add_argument('--zoom', dest='zoom', type=int, default=100, help='Zoom factor in %%') argument_parser.add_argument('--rotation', dest='rotation', type=int, default=0, help='Rotation') args = argument_parser.parse_args() # Create a context to hold the exception stack and various caches. ctx = cmupdf.fz_new_context(None, None, cmupdf.FZ_STORE_UNLIMITED) # Open the PDF, XPS or CBZ document. doc = cmupdf.fz_open_document(ctx, args.filename) show_metadata(ctx, doc) # Retrieve the number of pages (not used in this example). page_count = cmupdf.fz_count_pages(doc) # Load the page we want. Page numbering starts from zero. page = cmupdf.fz_load_page(doc, args.page_number -1) # Calculate a transform to use when rendering. This transform contains the scale and # rotation. Convert zoom percentage to a scaling factor. Without scaling the resolution is 72 dpi. transform = cmupdf.fz_matrix_s() cmupdf.fz_rotate(transform, args.rotation) cmupdf.fz_pre_scale(transform, args.zoom / 100.0, args.zoom / 100.0) # Take the page bounds and transform them by the same matrix that we will use to render the page. bounds = cmupdf.fz_rect_s() cmupdf.fz_bound_page(doc, page, bounds) cmupdf.fz_transform_rect(bounds, transform) # A page consists of a series of objects (text, line art, images, gradients). These objects are # passed to a device when the interpreter runs the page. There are several devices, used for # different purposes: # # draw device -- renders objects to a target pixmap. # # text device -- extracts the text in reading order with styling # information. This text can be used to provide text search. # # list device -- records the graphic objects in a list that can # be played back through another device. This is useful if you # need to run the same page through multiple devices, without # the overhead of parsing the page each time. # Create a blank pixmap to hold the result of rendering. The pixmap bounds used here are the same as # the transformed page bounds, so it will contain the entire page. The page coordinate space has the # origin at the top left corner and the x axis extends to the right and the y axis extends down. bbox = cmupdf.fz_irect_s() cmupdf.fz_round_rect(bbox, bounds) width, height = bbox.x1 - bbox.x0, bbox.y1 - bbox.y0 np_array = np.zeros((height, width, 4), dtype=np.uint8) # pixmap = cmupdf.fz_new_pixmap_with_bbox(ctx, cmupdf.get_fz_device_rgb(), bbox) pixmap = cmupdf.fz_new_pixmap_with_bbox_and_data(ctx, cmupdf.fz_device_rgb(ctx), bbox, cmupdf.numpy_to_pixmap(np_array)) cmupdf.fz_clear_pixmap_with_value(ctx, pixmap, 0xff) # Create a draw device with the pixmap as its target. # Run the page with the transform. device = cmupdf.fz_new_draw_device(ctx, pixmap) cmupdf.fz_set_aa_level(ctx, 8) cmupdf.fz_run_page(doc, page, device, transform, None) cmupdf.fz_free_device(device) if True: show_pdf(np_array) if False: # Save the pixmap to a file. cmupdf.fz_write_png(ctx, pixmap, \\"out.png\\", 0) text_sheet = cmupdf.fz_new_text_sheet(ctx) text_page = cmupdf.fz_new_text_page(ctx) device = cmupdf.fz_new_text_device(ctx, text_sheet, text_page) cmupdf.fz_run_page(doc, page, device, transform, None) cmupdf.fz_free_device(device) if False: # Dump text style and page. dump_text_style(text_sheet) dump_text_page_xml(text_page) if True: dump_text_page(text_page) show_text_page(text_page) if False: file_handler = cmupdf.fz_fopen(\\"out.css\\", \\"w+\\") output_file = cmupdf.fz_new_output_with_file(ctx, file_handler) cmupdf.fz_print_text_sheet(ctx, output_file, text_sheet) cmupdf.fz_close_output(output_file) cmupdf.fz_fclose(file_handler) output_file = cmupdf.fz_fopen(\\"out.txt\\", \\"w+\\") output_file = cmupdf.fz_new_output_with_file(ctx, file_handler) # cmupdf.fz_print_text_page(ctx, output_file, text_page) # cmupdf.fz_print_text_page_html(ctx, output_file, text_page) cmupdf.fz_print_text_page_xml(ctx, output_file, text_page) cmupdf.fz_close_output(output_file) cmupdf.fz_fclose(file_handler) # Clean up. cmupdf.fz_free_text_sheet(ctx, text_sheet) cmupdf.fz_free_text_page(ctx, text_page) cmupdf.fz_drop_pixmap(ctx, pixmap) cmupdf.fz_free_page(doc, page) cmupdf.fz_close_document(doc) cmupdf.fz_free_context(ctx) # # End #"},{"prompt":"Given the following array of numbers, write a Python code snippet to sort it in descending order. [9, 2, 4, 7, 6]","completion":"numbers = [9, 2, 4, 7, 6] numbers.sort(reverse=True) print(numbers)"},{"prompt":"Given a dictionary and a string, write a Python program to compute the number of times each character appears in the string. dict = {'a': 0, 'b': 0, 'c': 0} str = 'abacab'","completion":"def freq_char_dict(dict, str): for char in str: dict[char] += 1 return dict dict = {'a': 0, 'b': 0, 'c': 0} str = 'abacab' print(freq_char_dict(dict, str))"},{"prompt":"Create a python program for creating a dictionaries of char count in a given string. string = Hello World","completion":"def get_char_count(s): \\"\\"\\" This function returns a dictionary of character count in a given string. :param s: string :return: dictionary \\"\\"\\" char_count = dict() for char in s: if char not in char_count.keys(): char_count[char] = 1 else: char_count[char] += 1 return char_count"},{"prompt":"Generate a Python program that finds all palindromes in a given string. input_str = madamabcdcba","completion":"input_str = \\"madamabcdcba\\" def find_palindromes(input_str): palindromes = [] for i in range(len(input_str)): for j in range(i+1, len(input_str)): curr_str = input_str[i:j+1] if curr_str == curr_str[::-1]: palindromes.append(curr_str) return palindromes print(find_palindromes(input_str)) # Output: ['madam', 'aba', 'bcdbcd', 'cba']"},{"prompt":"Edit the given Python code to reverse the order of the letters in a string without using any inbuilt string functions. string = Hello World!","completion":"def reverse_string(string): reversed_string = \\"\\" for i in range(len(string) - 1, -1, -1): reversed_string += string[i] return reversed_string string = \\"Hello World!\\" reverse_string(string)"},{"prompt":"Create a Python program to sort a given list of integers in descending order using Merge Sort. list = [3, 7, 9, 1, 2, 8]","completion":"def merge_sort(arr): if len(arr) > 1: mid = len(arr)//2 left = arr[:mid] right = arr[mid:] merge_sort(left) merge_sort(right) i = j = k = 0 while i < len(left) and j < len(right): if left[i] > right[j]: # descending order arr[k] = left[i] i += 1 else: arr[k] = right[j] j += 1 k += 1 while i < len(left): arr[k] = left[i] i += 1 k += 1 while j < len(right): arr[k] = right[j] j += 1 k += 1 l = [3, 7, 9, 1, 2, 8] merge_sort(l) print(l) # Output: [9, 8, 7, 3, 2, 1]"},{"prompt":"Create a Python program to scramble a given string and return the scrambled version. The string: Hello World","completion":"import random def scrambleString(string): # Split the string into a list chars = list(string) # Shuffle the list random.shuffle(chars) # Join the list to form the scrambled string scrambled = \\"\\".join(chars) return scrambled # Create the string string = \\"Hello World\\" # Scramble the string scrambled = scrambleString(string) # Print the result print(scrambled)"},{"prompt":"Create a module in Python to scrape the web for a particular website. https://www.example.com/","completion":"import requests from bs4 import BeautifulSoup def scrape_website(url): response = requests.get(url) html = response.text soup = BeautifulSoup(html, 'html.parser') return soup if __name__ == '__main__': url = 'https://www.example.com/' soup = scrape_website(url) print(soup)"},{"prompt":"Use a forloop in Python to print the ASCII value of each character in a given string. string = Hello","completion":"for i in range(len(string)): print(ord(string[i])) # Output: 72, 101, 108, 108, 111"},{"prompt":"Edit the following Python code such that it takes an optional integer value as parameter. This value will be used to limit the maximum number of words in the sentence. def generateSentence(): words = ['Hello', 'World', 'He', 'She', 'They', 'Good', 'Bad'] sentence = '' for i in range(len(words)): sentence += words[i] + ' ' return sentence","completion":"def generateSentence(limit = None): words = ['Hello', 'World', 'He', 'She', 'They', 'Good', 'Bad'] sentence = '' counter = 0 for i in range(len(words)): if not limit or counter < limit: sentence += words[i] + ' ' counter += 1 else: break return sentence"},{"prompt":"Write a Python program to calculate the sum of two given integers, but only if both of them are even. num1 = 6 num2 = 8","completion":"def sum_of_two_ints(a,b): if (a % 2 == 0 and b % 2 == 0): return a+b else: return \\"Wrong input\\" print(sum_of_two_ints(num1,num2))"},{"prompt":"Generate a batch of X random numbers in Python using a for loop. X = 10","completion":"import random numbers = [] for i in range(10): number = random.randint(1, 100) numbers.append(number) print(numbers)"},{"prompt":"Convert the following loop code into a recursive function in Python. n = 10 s = 0 for i in range(n): s +=","completion":"def sum_of_n_natural_numbers_recursive(n, s=0): if n == 0: return s s += n return sum_of_n_natural_numbers_recursive(n-1, s) result = sum_of_n_natural_numbers_recursive(10) print(result)"},{"prompt":"Can you explain what the yield keyword does in Python?","completion":"The yield keyword in Python is used to create generator functions. A generator function is a special type of function where it can yield multiple values in steps instead of a single return statement. Each time the function yields, the state of the function is saved, and the next time the function is called, the function continues from where it left off. This allows for efficient code that uses less memory because the variables are not stored in memory but are instead recalled every time the function is called."},{"prompt":"Design a python database schema to store data describing a person's name, age, and address.","completion":"import sqlite3 # Create database db = sqlite3.connect('test.db') c = db.cursor() # Create table c.execute('DROP TABLE IF EXISTS person') c.execute(''' CREATE TABLE person( name TEXT, age INTEGER, address TEXT ) ''')"},{"prompt":"Write a function to determine if the given number is an Armstrong number in Python.","completion":"def is_armstrong(num): n = len(str(num)) total = 0 temp = num while temp > 0: digit = temp % 10 total += digit**n temp //= 10 if num == total: return True else: return False"},{"prompt":"Create a CGI script in Python to process form data from an HTML page. Not applicable","completion":"#!/usr/bin/env python import cgi #Get form data form = cgi.FieldStorage() name = form.getvalue('name') age = form.getvalue('age') # Display the results print \\"Content-type: text/html\\" print print \\"<html>\\" print \\"<body>\\" print \\"<p>Hi, %s! You are %s years old.</p>\\" % (name, age) print \\"</body>\\" print \\"</html>\\""},{"prompt":"Design a Python program to classify text data into three groups: Positive, Neutral and Negative based on the sentiment scores. The following is a text snippet: The conference was an incredible success. All the participants were thrilled and delighted with the outcome.","completion":"import nltk # Load the text text = \\"The conference was an incredible success. All the participants were thrilled and delighted with the outcome.\\" # Tokenize the text tokens = nltk.word_tokenize(text) # Add sentiment scores to each token scores = [0.8, 0.7, 0.7, 0.5, 0.6, 0.9, 0.2, 0.3, 0.8, 0.9, 0.9, 0.6] # Create groups based on the sentiment scores positive_words = list(filter(lambda x: x[1] > 0.6, zip(tokens, scores))) neutral_words = list(filter(lambda x: 0.3 <= x[1] <= 0.6, zip(tokens, scores))) negative_words = list(filter(lambda x: x[1] < 0.3, zip(tokens, scores))) # Print the group results print('Positive words:') for word in positive_words: print(word[0]) print('nNeutral words:') for word in neutral_words: print(word[0]) print('nNegative words:') for word in negative_words: print(word[0])"},{"prompt":"Generate a Python script to validate a given email address.","completion":"import re def validate_email(email): regex = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+' if re.search(regex, email): return True else: return False valid = validate_email('example@domain.com') print(valid)"},{"prompt":"Create a Python program to compare two lists and return their intersection list1 = [1,2,3,4,5] list2 = [4,5,6,7,8]","completion":"def intersection(list1, list2): intersection = [value for value in list1 if value in list2] return intersection list1 = [1,2,3,4,5] list2 = [4,5,6,7,8] result = intersection(list1, list2) print(result) # prints [4,5]"},{"prompt":"Create a python module that finds the minimum and maximum values of a given list.","completion":"def min_max(list): min_val = max_val = list[0] for value in list[1:]: if value < min_val: min_val = value elif value > max_val: max_val = value return (min_val, max_val)"},{"prompt":"Generate a class in Python that can store the following data Month, Calories, Exercise Minute","completion":"class HealthData: def __init__(self, month, calories, minutes): self.month = month self.calories = calories self.minutes = minutes"},{"prompt":"Generate a Python class that stores the details of customer orders.","completion":"class Order: def __init__(self, customer_name, customer_address, order_items): self.customer_name = customer_name self.customer_address = customer_address self.order_items = order_items def get_order_details(self): return f\\"Customer name: {self.customer_name}, Address: {self.customer_address}, Order items: {self.order_items}\\""},{"prompt":"Write a Python class for representing a tree node.","completion":"class TreeNode: def __init__(self, data): self.data = data self.left = None self.right = None"},{"prompt":"Develop a Python program to remove a specific character from a given string. string = Hello World! character = 'l'","completion":"def remove_char(string, char): return string.replace(char, '')"},{"prompt":"Write a Python program to find the online median of an array of numbers.","completion":"import heapq def online_median(numbers): small = [] large = [] medians = [] for x in numbers: heapq.heappush(small, -heapq.heappushpop(large, x)) if len(large) < len(small): heapq.heappush(large, -heapq.heappop(small)) medians.append(0.5 * (large[0] + (-small[0])) if len(large) > len(small) else large[0]) return medians"},{"prompt":"Develop a quick sort algorithm in Python arr = [7, 3, 5, 8, 4]","completion":"def quick_sort(arr): \\"\\"\\"Sort an array using the quick sort algorithm.\\"\\"\\" # Base case: array of length 0 or 1 is already sorted if len(arr) <= 1: return arr # Choose a pivot element pivot = arr[0] # Create two lists to hold elements greater or less than the pivot less_than_pivot = [] greater_than_pivot = [] # Compare each element in the array to the pivot for elem in arr: if elem < pivot: less_than_pivot.append(elem) elif elem > pivot: greater_than_pivot.append(elem) # Recursively sort the two lists less_than_pivot = quick_sort(less_than_pivot) greater_than_pivot = quick_sort(greater_than_pivot) # Combine the two lists with the pivot in the middle sorted_arr = less_than_pivot + [pivot] + greater_than_pivot return sorted_arr"},{"prompt":"Create a Python program to generate 10 random numbers between 0 and 10.","completion":"import random random_numbers = [] for i in range(10): random_numbers.append(random.randint(0,10)) print(random_numbers)"},{"prompt":"Create a Python GUI application to display the sum of two numbers entered in two separate text fields.","completion":"import tkinter as tk root = tk.Tk() root.title('Sum Application') num1 = tk.StringVar() num2 = tk.StringVar() def calculate(): try: result = int(num1.get()) + int(num2.get()) sumLabel.configure(text=\\"The sum is %d\\" % result) except ValueError: sumLabel.configure(text=\\"Please enter numbers\\") num1Field = tk.Entry(root, width=10, textvariable=num1) num2Field = tk.Entry(root, width=10, textvariable=num2) sumButton = tk.Button(root, text=\\"Sum\\", command=calculate) sumLabel = tk.Label(root, text=\\"\\") num1Field.grid(row=0, column=0) num2Field.grid(row=0, column=1) sumButton.grid(row=1, column=0, columnspan=2) sumLabel.grid(row=2, column=0, columnspan=2) root.mainloop()"},{"prompt":"Create a Python program to find the sum of the first n numbers. n = 5","completion":"def calculate_sum(n): \\"\\"\\"Function to calculate the sum of the first n numbers.\\"\\"\\" sum = 0 while n > 0: sum = sum + n n = n - 1 return sum if __name__ == \\"__main__\\": n = 5 result = calculate_sum(n) print(\\"The sum is\\", result)"},{"prompt":"Create a function in Python to find the total cost of a purchase given the price of each item and the quantity. price = 10.00 quantity = 3","completion":"def get_total_cost(price, quantity): return price * quantity total_cost = get_total_cost(price, quantity) print(total_cost) #prints 30.00"},{"prompt":"Generate a code for creating a new python dictionary with the keys and values specified Keys: [name, age, occupation] Values: [John, 25, Engineer]","completion":"\\"\\"\\" This code creates a new dictionary with the specified keys and values \\"\\"\\" my_dict = { \\"name\\" : \\"John\\", \\"age\\" : 25, \\"occupation\\" : \\"Engineer\\" }"},{"prompt":"Generate a code in Python to merge two given sorted lists into a new sorted list. list1 = [1,5,8,9,11] list2 = [2,3,7,10]","completion":"def merging_lists(list1, list2): # Merge two sorted lists merged_list = [] i, j = 0, 0 while i < len(list1) and j < len(list2): if list1[i] <= list2[j]: merged_list.append(list1[i]) i += 1 else: merged_list.append(list2[j]) j += 1 # Add any leftover items from the original lists merged_list.extend(list1[i:]) merged_list.extend(list2[j:]) return merged_list"},{"prompt":"Create an automated bot in Python Selenium to fill out a web form with the provided data. Name: Joseph Smith Address: 123 Main Street City, State Zip : New York, NY 12345 Country : United State","completion":"from selenium import webdriver # open web browser driver = webdriver.Chrome() driver.get(\\"https://example.com/form\\") # fill out form name_field = driver.find_element_by_id(\\"name\\") name_field.send_keys(\\"Joseph Smith\\") address_field = driver.find_element_by_id(\\"address\\") address_field.send_keys(\\"123 Main Street\\") city_field = driver.find_element_by_id(\\"city\\") city_field.send_keys(\\"New York\\") state_field = driver.find_element_by_id(\\"state\\") state_field.send_keys(\\"NY\\") zip_field = driver.find_element_by_id(\\"zip\\") zip_field.send_keys(\\"12345\\") country_field = driver.find_element_by_id(\\"country\\") country_field.send_keys(\\"United States\\") # submit form submit_button = driver.find_element_by_id(\\"submit\\") submit_button.click()"},{"prompt":"Construct a python program to find the most frequently occurring element in a list [1, 8, 2, 8, 5, 4, 8, 9, 5]","completion":"def most_frequent_element(list): # Create a dictionary to store the count of each element element_counts = {} # Iterate over the elements of the list for element in list: # Update the count in the dictionary if element in element_counts: element_counts[element] += 1 else: element_counts[element] = 1 # Find the most frequent element by comparing counts most_frequent_element = None most_frequent_count = 0 for element, count in element_counts.items(): if count > most_frequent_count: most_frequent_element = element most_frequent_count = count # Return the most frequent element return most_frequent_element"},{"prompt":"Develop a Python class for a student to be stored in a database.","completion":"class Student: def __init__(self, name, age, grade, courses): self.name = name self.age = age self.grade = grade self.courses = courses def enroll_in_course(self, course): self.courses.append(course) def get_grade(self): return self.grade"},{"prompt":"Create a Python script to periodically fetch data from a web API and store it in a local database. API endpoint: http://example.com/api Database name: MyD","completion":"import requests import sqlite3 # Define the API endpoint API_ENDPOINT = \\"http://example.com/api\\" # Connect to the Database conn = sqlite3.connect('MyData.db') c = conn.cursor() # Make sure we have the right schema c.execute(\\"CREATE TABLE IF NOT EXISTS data (data TEXT)\\") # Fetch the data from the API r = requests.get(API_ENDPOINT) data = r.json() # Save the data to the Database c.execute(\\"INSERT INTO data VALUES (?)\\", (data,)) conn.commit() # Close the connection conn.close()"},{"prompt":"Generate a neural network model in Python to classify data. Dataset MNIST","completion":"import keras from keras.models import Sequential from keras.layers import Dense, Dropout, Flatten from keras.layers import Conv2D, MaxPooling2D # Input image dimensions img_rows, img_cols = 28, 28 # Load the dataset (x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data() # Reshape data x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1) x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1) input_shape = (img_rows, img_cols, 1) # Normalize data x_train = x_train.astype('float32') x_test = x_test.astype('float32') x_train /= 255 x_test /= 255 # Create model model = Sequential() # Set layers model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=input_shape)) model.add(Conv2D(64, (3, 3), activation='relu')) model.add(MaxPooling2D(pool_size=(2, 2))) model.add(Dropout(0.25)) model.add(Flatten()) model.add(Dense(128, activation='relu')) model.add(Dropout(0.5)) model.add(Dense(10, activation='softmax')) # Compile model model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adadelta(), metrics=['accuracy']) # Fit model model.fit(x_train, y_train, batch_size=128, epochs=10, verbose=1, validation_data=(x_test, y_test))"},{"prompt":"Create a Machine Learning algorithm in Python to predict the number of riders for a bus route given the data about the route. Example data for training: Route 1: Monday: 10 riders Tuesday: 15 riders Wednesday: 20 riders Thursday: 25 riders Friday: 35 riders Saturday: 50 riders Route 2: Monday: 12 riders Tuesday: 18 riders Wednesday: 15 riders Thursday: 24 riders Friday: 40 riders Saturday: 57 rider","completion":"# Import necessary libraries import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Construct feature and label data # Feature (independent variable): days of the week features = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] # Label (dependent vaiable): number of riders labels = [[10, 15, 20, 25, 35, 50], [12, 18, 15, 24, 40, 57]] # Reformat data as arrays X = np.array(features) y = np.array(labels) # Split train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Create model model = LinearRegression() # Train model model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Evaluate model score = model.score(X_test, y_test) print(f'Model score: {score}')"},{"prompt":"Write a Python program to parse a JSON string and extract all keys and their corresponding values into a dictionary. json_string = '{name: John Doe,age: 33,hobbies: [cooking,travel,reading]}'","completion":"import json def parse_json(json_string): result = json.loads(json_string) return result json_string = '{\\"name\\": \\"John Doe\\",\\"age\\": 33,\\"hobbies\\": [\\"cooking\\",\\"travel\\",\\"reading\\"]}' result = parse_json(json_string) print(result) # Output {'name': 'John Doe', 'age': 33, 'hobbies': ['cooking', 'travel', 'reading']}"},{"prompt":"Create a Python class called Tv4play that inherits from Service and OpenGraphThumbMixin. The class should have a constructor that takes a URL as an argument. The class should have a method called get that takes an options parameter. The method should use the URL to retrieve data, find the video ID, and download the video. The method should also handle authentication and geoblocking. The class should have a method called find_all_episodes that takes an options parameter. The method should use the URL to retrieve data, find all episodes, and return a list of URLs.","completion":"# ex:ts=4:sw=4:sts=4:et # -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- from __future__ import absolute_import import re import os import xml.etree.ElementTree as ET import json import copy from svtplay_dl.utils.urllib import urlparse, parse_qs, quote_plus from svtplay_dl.service import Service, OpenGraphThumbMixin from svtplay_dl.utils import is_py2_old, filenamify from svtplay_dl.log import log from svtplay_dl.fetcher.hls import hlsparse, HLS from svtplay_dl.fetcher.rtmp import RTMP from svtplay_dl.fetcher.hds import hdsparse from svtplay_dl.subtitle import subtitle from svtplay_dl.error import ServiceError class Tv4play(Service, OpenGraphThumbMixin): supported_domains = ['tv4play.se', 'tv4.se'] def __init__(self, url): Service.__init__(self, url) self.subtitle = None self.cookies = {} def get(self, options): data = self.get_urldata() vid = findvid(self.url, data) if vid is None: yield ServiceError(\\"Can't find video id for %s\\" % self.url) return if options.username and options.password: data = self.http.request(\\"get\\", \\"https://www.tv4play.se/session/new?https=\\") auth_token = re.search('name=\\"authenticity_token\\" ([a-z]+=\\"[^\\"]+\\" )?value=\\"([^\\"]+)\\"', data.text) if not auth_token: yield ServiceError(\\"Can't find authenticity_token needed for user / password\\") return url = \\"https://www.tv4play.se/session\\" postdata = {\\"user_name\\" : options.username, \\"password\\": options.password, \\"authenticity_token\\":auth_token.group(2), \\"https\\": \\"\\"} data = self.http.request(\\"post\\", url, data=postdata, cookies=self.cookies) self.cookies = data.cookies fail = re.search(\\"<p class='failed-login'>([^<]+)</p>\\", data.text) if fail: yield ServiceError(fail.group(1)) return url = \\"http://premium.tv4play.se/api/web/asset/%s/play\\" % vid data = self.http.request(\\"get\\", url, cookies=self.cookies) if data.status_code == 401: xml = ET.XML(data.content) code = xml.find(\\"code\\").text if code == \\"SESSION_NOT_AUTHENTICATED\\": yield ServiceError(\\"Can't access premium content\\") elif code == \\"ASSET_PLAYBACK_INVALID_GEO_LOCATION\\": yield ServiceError(\\"Can't downoad this video because of geoblocked.\\") else: yield ServiceError(\\"Can't find any info for that video\\") return if data.status_code == 404: yield ServiceError(\\"Can't find the video api\\") return xml = ET.XML(data.content) ss = xml.find(\\"items\\") if is_py2_old: sa = list(ss.getiterator(\\"item\\")) else: sa = list(ss.iter(\\"item\\")) if xml.find(\\"live\\").text: if xml.find(\\"live\\").text != \\"false\\": options.live = True if xml.find(\\"drmProtected\\").text == \\"true\\": yield ServiceError(\\"We cant download DRM protected content from this site.\\") return if options.output_auto: directory = os.path.dirname(options.output) options.service = \\"tv4play\\" title = \\"%s-%s-%s\\" % (options.output, vid, options.service) title = filenamify(title) if len(directory): options.output = os.path.join(directory, title) else: options.output = title if self.exclude(options): yield ServiceError(\\"Excluding video\\") return for i in sa: if i.find(\\"mediaFormat\\").text == \\"mp4\\": base = urlparse(i.find(\\"base\\").text) parse = urlparse(i.find(\\"url\\").text) if \\"rtmp\\" in base.scheme: swf = \\"http://www.tv4play.se/flash/tv4playflashlets.swf\\" options.other = \\"-W %s -y %s\\" % (swf, i.find(\\"url\\").text) yield RTMP(copy.copy(options), i.find(\\"base\\").text, i.find(\\"bitrate\\").text) elif parse.path[len(parse.path)-3:len(parse.path)] == \\"f4m\\": streams = hdsparse(copy.copy(options), self.http.request(\\"get\\", i.find(\\"url\\").text, params={\\"hdcore\\": \\"3.7.0\\"}).text, i.find(\\"url\\").text) if streams: for n in list(streams.keys()): yield streams[n] elif i.find(\\"mediaFormat\\").text == \\"smi\\": yield subtitle(copy.copy(options), \\"smi\\", i.find(\\"url\\").text) url = \\"http://premium.tv4play.se/api/web/asset/%s/play?protocol=hls\\" % vid data = self.http.request(\\"get\\", url, cookies=self.cookies).content xml = ET.XML(data) ss = xml.find(\\"items\\") if is_py2_old: sa = list(ss.getiterator(\\"item\\")) else: sa = list(ss.iter(\\"item\\")) for i in sa: if i.find(\\"mediaFormat\\").text == \\"mp4\\": parse = urlparse(i.find(\\"url\\").text) if parse.path.endswith(\\"m3u8\\"): streams = hlsparse(i.find(\\"url\\").text, self.http.request(\\"get\\", i.find(\\"url\\").text).text) for n in list(streams.keys()): yield HLS(copy.copy(options), streams[n], n) def find_all_episodes(self, options): parse = urlparse(self.url) show = parse.path[parse.path.find(\\"/\\", 1)+1:] if not re.search(\\"%\\", show): show = quote_plus(show) data = self.http.request(\\"get\\", \\"http://webapi.tv4play.se/play/video_assets?type=episode&is_live=false&platform=web&node_nids=%s&per_page=99999\\" % show).text jsondata = json.loads(data) episodes = [] n = 1 for i in jsondata[\\"results\\"]: try: days = int(i[\\"availability\\"][\\"availability_group_free\\"]) except (ValueError, TypeError): days = 999 if days > 0: video_id = i[\\"id\\"] url = \\"http://www.tv4play.se/program/%s?video_id=%s\\" % ( show, video_id) episodes.append(url) if n == options.all_last: break n += 1 return episodes def findvid(url, data): parse = urlparse(url) if \\"tv4play.se\\" in url: try: vid = parse_qs(parse.query)[\\"video_id\\"][0] except KeyError: return None else: match = re.search(r\\"\\"vid\\":\\"(d+)\\",\\", data) if match: vid = match.group(1) else: match = re.search(r\\"-(d+)\\", url) if match: vid = match.group(1) else: match = re.search(r\\"meta content='([^']+)' property='og:video'\\", data) if match: match = re.search(r\\"vid=(d+)&\\", match.group(1)) if match: vid = match.group(1) else: log.error(\\"Can't find video id for %s\\", url) return else: return None return vid"},{"prompt":"This code randomly samples k items from an input S containing n items. To use it, run the script with the input file and output file as arguments, and specify the number of items to sample with the k flag. Optionally, use the preserveorder flag to preserve the input ordering.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- import argparse import operator import random import sys def get_parser(): parser = argparse.ArgumentParser(\\"Randomly sample k items from an input S containing n items.\\") parser.add_argument(\\"infile\\", nargs='?', type=argparse.FileType('r'), default=sys.stdin) parser.add_argument(\\"outfile\\", nargs='?', type=argparse.FileType('w'), default=sys.stdout) parser.add_argument(\\"-k\\", \\"--num-items\\", type=int, help=\\"An integer number giving the size of the reservoir\\") parser.add_argument(\\"--preserve-order\\", action=\\"store_true\\", help=\\"Preserve input ordering\\") return parser def main(argv=None): parser = get_parser() args = parser.parse_args(argv) N = args.num_items reservoir = [] reservoir_ordered = [] for l, line in enumerate(args.infile): if l < N: reservoir.append(line) reservoir_ordered.append((l, line)) elif l >= N and random.random() < N/float(l+1): replace = random.randint(0, len(reservoir)-1) reservoir[replace] = line reservoir_ordered[replace] = (l, line) if args.preserve_order: for item in sorted(reservoir_ordered, key=operator.itemgetter(1)): args.outfile.write(item[1]) else: for item in reservoir: args.outfile.write(item) if __name__ == \\"__main__\\": sys.exit(main(sys.argv[1:]))"},{"prompt":"Create a program in Python that optimizes a given function using a genetic algorithm.","completion":"import numpy as np import random # Define a fitness function def fitness_function(x): return x ** 2 - 3 * x + 4 # Generate initial population population = [random.uniform(-100,100) for _ in range(100)] # Start a genetic algorithm to optimize the population def genetic_algorithm(population): # Selection selected = np.random.choice(population, 50, replace=False) # Crossover offspring = [] for i in range(0, len(selected)-1, 2): parent1, parent2 = selected[i], selected[i+1] cross_over_point = random.randint(0, len(parent1)-1) offspring_1 = np.concatenate([parent1[:cross_over_point], parent2[cross_over_point:]]) offspring_2 = np.concatenate([parent2[:cross_over_point], parent1[cross_over_point:]]) offspring.append(offspring_1) offspring.append(offspring_2) # Mutation for i in range(len(offspring)): for bit_index, bit_value in enumerate(offspring[i]): mutation_prob = random.random() if mutation_prob < 0.3: offspring[i][bit_index] = random.random() * 200 - 100 # ELitism population = sorted(population, key=fitness_function, reverse=True) population = population[:10] + offspring # Return the new population return population # Run the genetic algorithm for i in range(500): population = genetic_algorithm(population) # Find the optimal solution opt_solution = max(population, key=fitness_function) print(\\"Optimum solution: {}\\".format(opt_solution))"},{"prompt":"Design a Python class for a 'Movie' object that contains a movie title, release year, and rating.","completion":"class Movie: def __init__(self, title, year, rating): self.title = title self.year = year self.rating = rating"},{"prompt":"Design a solution in Python that creates a deep copy of an array of numbers. [1,2,3,4,5]","completion":"original_list = [1,2,3,4,5] # Create a copy of the original list copied_list = original_list[:] # Modify the copied list so we can verify that it is a deep copy copied_list[0] = 10 # Print both lists - the original list should be unchanged print(\\"Original list:\\", original_list) print(\\"Copied list:\\", copied_list)"},{"prompt":"Create a function in Python that takes a list and sorts its elements in ascending order. numbers = [5, 2, 8, 7, 1]","completion":"def sortAsc(numbers): numbers.sort() return numbers"},{"prompt":"Write a Python script to generate a text report of the results of a survey of 10 people. No. of people who said yes, 4 No. of people who said no, 6","completion":"num_yes = 4 num_no = 6 total_responses = num_yes + num_no print('Survey Results') print('Number of people who said yes: {}'.format(num_yes)) print('Number of people who said no: {}'.format(num_no)) print('Total number of responses: {}'.format(total_responses))"},{"prompt":"Compose a python program which takes in 3 numbers and prints out the largest","completion":"def find_max(num1, num2, num3): max_num = 0 if num1 >= num2 and num1 >= num3: max_num = num1 elif num2 >= num1 and num2 >= num3: max_num = num2 else: max_num = num3 return max_num"},{"prompt":"Generate an optimized python program for splitting an array into two subarrays with equal sum. [1, 2, 3, 4, 5, 6]","completion":"def split_array_sum(arr): sum_arr = sum(arr) half_sum = sum_arr // 2 current_sum = 0 left_index = 0 for index, value in enumerate(arr): current_sum += value if current_sum >= half_sum: left_index = index break left_arr = arr[:left_index+1] right_arr = arr[left_index+1:] return left_arr, right_arr"},{"prompt":"Create a Python program for sentiment analysis using Natural Language Processing (NLP). Not applicable","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sid = SentimentIntensityAnalyzer() # Function to get the sentiment def sentiment_scores(sentence): print(sentence) score = sid.polarity_scores(sentence) print(\\"Overall sentiment for the text : \\", score) # Driver code if __name__ == \\"__main__\\": # Input text for sentiment scoring sentence = \\"This is an amazing product!\\" sentiment_scores(sentence)"},{"prompt":"Create a Python program to classify the digits in a dataset Features: [0.25, 0.33, 0.46, 0.83, 0.14] Labels: [0, 0, 1, 1, 0]","completion":"import numpy as np from sklearn.svm import SVC features = np.array([[0.25, 0.33, 0.46, 0.83, 0.14]]) labels = np.array([0, 0, 1, 1, 0]) clf = SVC() clf.fit(features, labels) # predicting the class of the following data test_data = np.array([[0.36, 0.22, 0.91, 0.81, 0.12]]) result = clf.predict(test_data) print(result)"},{"prompt":"Produce a Python program to print odd numbers from 1 to 10.","completion":"for num in range(1, 11): if num % 2 != 0: print(num)"},{"prompt":"Create a PDF document from a Word document using Python. word file","completion":"import win32com.client # word file to be converted wordFile = r'filename.docx' # Open the word file word = win32com.client.Dispatch(\\"Word.Application\\") doc = word.Documents.Open(wordFile) # Set the pdf parameters pdf_format_id = 17 file_name = r'filename.pdf' # Save the file as pdf doc.SaveAs(file_name, FileFormat=pdf_format_id) # Close the word file word.Quit()"},{"prompt":"Create a program in Python that takes in an integer and returns its factorial. 5","completion":"def factorial(n): fact = 1 # multiply the current value of fact by all the numbers from 1 to n for i in range(1, n+1): fact = fact * i return fact num = 5 factorial = factorial(num) print(\\"Factorial of\\", num, \\"is\\", factorial)"},{"prompt":"Create a Python objectoriented program to represent a hospital patient. The patient object should contain attributes for name, age, birthdate, and current medical conditions. Not applicable","completion":"class Patient: def __init__(self, name, age, birthdate, conditions): self.name = name self.age = age self.birthdate = birthdate self.conditions = conditions def get_name(self): return self.name def get_age(self): return self.age def get_birthdate(self): return self.birthdate def get_conditions(self): return self.conditions def update_conditions(self, conditions): self.conditions = conditions"},{"prompt":"Write a Python program that combines two lists, eliminating duplicate entries. list_1 = [1, 2, 3] list_2 = [2, 3, 4]","completion":"list_1 = [1, 2, 3] list_2 = [2, 3, 4] final_list = [] for item in list_1: if item not in final_list: final_list.append(item) for item in list_2: if item not in final_list: final_list.append(item) print(final_list)"},{"prompt":"Create a Python script that takes a list of strings as input and prints them in reverse order. [apple, banana, cherry]","completion":"def reverse_list(lst): lst.reverse() for item in lst: print(item) reverse_list([\\"apple\\", \\"banana\\", \\"cherry\\"])"},{"prompt":"Write a Python program to remove the words containing the letter a from a sentence. Sentence: I am a strong girl","completion":"sentence = \\"I am a strong girl\\" without_a = ' '.join([word for word in sentence.split() if 'a' not in word]) print(without_a) # Output: I strong girl"},{"prompt":"mplement a Python function to sort a list of integers using the bubble sort algorithm. [2, 5, 1, 8, 4]","completion":"def bubbleSort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [2, 5, 1, 8, 4] bubbleSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]), # Output: 1 2 4 5 8"},{"prompt":"Create a function in Python which takes a string as input and checks if it contains any palindromic substrings of length at least 3.","completion":"def find_palindromes(s): n = len(s) is_palindrome = [[False for _ in range(n)] for _ in range(n)] # Palindrome of length 1 for i in range(n): is_palindrome[i][i] = True # Palindrome of length 2 for i in range(n - 1): is_palindrome[i][i + 1] = (s[i] == s[i + 1]) # Palindrome of length >= 3 for length in range(3, n + 1): for i in range(n - length + 1): j = i + length - 1 if s[i] == s[j] and is_palindrome[i + 1][j - 1]: is_palindrome[i][j] = True res = [] for i in range(n): for j in range(i, n): if is_palindrome[i][j] and j - i + 1 >= 3: res.append(s[i:j + 1]) return res"},{"prompt":"Develop a Python program to generate the Fibonacci sequence of a given number of terms. terms = 10","completion":"def Fibonacci(terms): Fibonacci_num = [0, 1] a = 0 b = 1 for i in range(2,terms): c = a + b Fibonacci_num.append(c) a = b b = c return Fibonacci_num nterms = 10 print(\\"Fibonacci sequence:\\") print(Fibonacci(nterms))"},{"prompt":"Create an automated execution pipeline for a given task. Task: Extracting data from UNIX server and storing it in an Oracle database.","completion":"Below is a sample automated execution pipeline for a given task. 1. Configure start and end points â Start by configuring the end points: the UNIX server and Oracle database. 2. Set up data pipeline â Define how data should be extracted from the UNIX server and stored into the Oracle database. This includes creating tables, setting up database triggers and linking tables with the UNIX server. 3. Configure scheduling â Set up a scheduling system for the automated data pipeline based on time, date or other factors. 4. Write automated script â Create a script in the programming language of choice (e.g. Python, Java, C, etc.) to execute the data pipeline. 5. Test the pipeline â Test the automated data pipeline to ensure it is working correctly. 6. Monitor data pipeline â Monitor the automated data pipeline to detect any errors or unexpected behaviour."},{"prompt":"Create a basic RESTful API using Flask in Python that allows users to register, login and access a protected route. Not applicable","completion":"from flask import Flask, jsonify, request from flask_jwt_extended import JWTManager from flask_jwt_extended import (create_access_token, create_refresh_token, jwt_required, jwt_refresh_token_required, get_jwt_identity, get_raw_jwt) app = Flask(__name__) app.config['JWT_SECRET_KEY'] = 'secret' jwt = JWTManager(app) @app.route('/register', methods=['POST']) def register(): username = request.json.get('username', None) password = request.json.get('password', None) # Register user here access_token = create_access_token(identity=username) refresh_token = create_refresh_token(identity=username) return jsonify(message='User created', access_token=access_token, refresh_token=refresh_token) @app.route('/login', methods=['POST']) def login(): username = request.json.get('username', None) password = request.json.get('password', None) # Validate user here access_token = create_access_token(identity=username) refresh_token = create_refresh_token(identity=username) return jsonify(message='Logged in', access_token=access_token, refresh_token=refresh_token) @app.route('/protected', methods=['GET']) @jwt_required def protected(): username = get_jwt_identity() return jsonify(message='Welcome %s' % username) if __name__ == '__main__': app.run()"},{"prompt":"Design a Python program to generate a multiplication table for the numbers from 1 to 10.","completion":"def multiplicationTable(n): for i in range(1, 11): print(n, 'x', i, '=', n*i) # Driver Code n = 9 multiplicationTable(n)"},{"prompt":"Create a web scraper in Python that extracts text from a given url.","completion":"import requests from bs4 import BeautifulSoup url = \\"...\\" page = requests.get(url) soup = BeautifulSoup(page.content) text = soup.find_all(text=True) for t in text: print(t)"},{"prompt":"Create a function in Python for replacing a substring with another substring String: Hello world! Substring to replace: world Substring to replace with: universe","completion":"def replace_substring(string, old, new): new_string = \\"\\" for word in string.split(): if word == old: new_string += new + \\" \\" else: new_string += word + \\" \\" return new_string.rstrip() string = \\"Hello world!\\" new_string = replace_substring(string, \\"world\\", \\"universe\\") print(new_string) # \\"Hello universe!\\""},{"prompt":"Optimize the following Python program to print numbers from 1 to 100 without using a loop. def print_numbers(): num = 1 while num <=100: print(num) num += 1","completion":"def print_numbers(): if num <= 100: print(num) print_numbers(num + 1) print_numbers(1)"},{"prompt":"Develop an algorithm that uses Python sets to calculate the total number of unique elements in the given list. list = [1, 2, 3, 3, 4]","completion":"def count_unique_elements(list): # initialize a set unique_set = set() # traverse for all elements for x in list: # check if exists in set or not if x not in unique_set: unique_set.add(x) # print length of set print(\\"The number of unique elements is:\\" + str(len(unique_set))) count_unique_elements(list)"},{"prompt":"Modify the given Python program to optimize the memory allocation and improve the execution time of the program import pandas as pd data = pd.read_csv('dataset.csv')","completion":"import pandas as pd # Load the dataset with memory optimization data = pd.read_csv('dataset.csv', low_memory=True) # Optimize the data to reduce the size data = data.drop_duplicates(keep=False) # Optimize the data to increase the performance data = data.apply(pd.to_numeric, errors='coerce')"},{"prompt":"Using Python, implement a Pig Latin translator. The translator should accept a word as input and return its Pig Latin equivalent. word = Python","completion":"def pig_latin(word): vowels = \\"aeiou\\" if word[0] in vowels: return word + 'way' else: return word[1:] + word[0] + 'ay' pig_latin_word = pig_latin(word) print(pig_latin_word) # Output: ythonPay"},{"prompt":"Design a system using Python that implements the A* algorithm for finding the shortest path between two points.","completion":"import math class Node(): \\"\\"\\"A node class for A* Pathfinding\\"\\"\\" def __init__(self, parent=None, position=None): self.parent = parent self.position = position self.g = 0 self.h = 0 self.f = 0 def __eq__(self, other): return self.position == other.position def astar(maze, start, end): \\"\\"\\"Returns a list of tuples as a path from the given start to the given end in the given maze\\"\\"\\" # Create start and end node start_node = Node(None, start) start_node.g = start_node.h = start_node.f = 0 end_node = Node(None, end) end_node.g = end_node.h = end_node.f = 0 # Initialize both open and closed list open_list = [] closed_list = [] # Add the start node open_list.append(start_node) # Loop until you find the end while len(open_list) > 0: # Get the current node current_node = open_list[0] current_index = 0 for index, item in enumerate(open_list): if item.f < current_node.f: current_node = item current_index = index # Pop current off open list, add to closed list open_list.pop(current_index) closed_list.append(current_node) # Found the goal if current_node == end_node: path = [] current = current_node while current is not None: path.append(current.position) current = current.parent return path[::-1] # Return reversed path # Generate children children = [] for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]: # Adjacent squares # Get node position node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1]) # Make sure within range if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[len(maze)-1]) -1) or node_position[1] < 0: continue # Make sure walkable terrain if maze[node_position[0]][node_position[1]] != 0: continue # Create new node new_node = Node(current_node, node_position) # Append children.append(new_node) # Loop through children for child in children: # Child is on the closed list for closed_child in closed_list: if child == closed_child: continue # Create the f, g, and h values child.g = current_node.g + 1 child.h = ((child.position[0] - end_node.position[0]) ** 2) + ((child.position[1] - end_node.position[1]) ** 2) child.f = child.g + child.h # Child is already in the open list for open_node in open_list: if child == open_node and child.g > open_node.g: continue # Add the child to the open list open_list.append(child)"},{"prompt":"Develop an algorithm using Python to convert a given number (099999) into words.","completion":"def num_to_words(num): basic_terms = { 0: \\"zero\\", 1: \\"one\\", 2: \\"two\\", 3: \\"three\\", 4: \\"four\\", 5: \\"five\\", 6: \\"six\\", 7: \\"seven\\", 8: \\"eight\\", 9: \\"nine\\", 10: \\"ten\\", 11: \\"eleven\\", 12: \\"twelve\\", 13: \\"thirteen\\", 20: \\"twenty\\", 30: \\"thirty\\", 40: \\"forty\\", 50: \\"fifty\\", 60: \\"sixty\\", 70: \\"seventy\\", 80: \\"eighty\\", 90: \\"ninety\\" } if num in basic_terms.keys(): return basic_terms[num] else: num_words = \\"\\" if num > 20 and num < 100: num_words += basic_terms[num - (num % 10)] + \\" \\" + basic_terms[num % 10] elif num >= 100 and num < 1000: num_words += basic_terms[num // 100] + \\" \\" + \\"hundred \\" if num % 100 != 0: num_words += num_to_words(num % 100) elif num >= 1000 and num < 10000: num_words += basic_terms[num // 1000] + \\" \\" + \\"thousand \\" if num % 1000 != 0: num_words += num_to_words(num % 1000) return num_words"},{"prompt":"Create a program in Python to take one input argument, a string, and return a new string with the last character of the string repeating n times, where n is the length of the string.","completion":"def repeat_last_character(s): # base case: if string is empty if len(s) == 0: return '' final_char = s[-1] # last character of the string result = final_char * len(s) # repeat the last character n times, where n is the length of the string return result # Example string = 'Hello' print(repeat_last_character(string)) # ooooo"},{"prompt":"Create a Neural Network Model in Python to predict stock prices. Historical stock prices of Facebook (FB) from 20102020","completion":"import pandas as pd import numpy as np from sklearn.preprocessing import MinMaxScaler from keras.models import Sequential from keras.layers import Dense, LSTM # Load the data df = pd.read_csv('FB.csv') df.head() # Preprocess the data data = df.filter(['Close']) dataset = data.values scaler = MinMaxScaler() dataset = scaler.fit_transform(dataset) # Create the model model = Sequential() model.add(LSTM(50, return_sequences = True, input_shape = (dataset.shape[1], 1))) model.add(LSTM(50, return_sequences = False)) model.add(Dense(25)) model.add(Dense(1)) # Train the model model.compile(optimizer = 'adam', loss = 'mean_squared_error') model.fit(dataset, batch_size = 1, epochs = 10)"},{"prompt":"Write a Python program to sort a list of employees by their salary from highest to lowest. employees = [ { name: John Doe, salary: 60000 }, { name: Jane Doe, salary: 50000 }, { name: Mary Doe, salary: 70000 } ]","completion":"employees.sort(key=lambda x: x['salary'], reverse=True) print(employees) # Output: # [ # { # \\"name\\": \\"Mary Doe\\", # \\"salary\\": 70000 # }, # { # \\"name\\": \\"John Doe\\", # \\"salary\\": 60000 # }, # { # \\"name\\": \\"Jane Doe\\", # \\"salary\\": 50000 # } # ]"},{"prompt":"Write a Python program to check if elements in two given lists are the same. list1 = [1, 2, 3, 4, 5]; list2 = [3, 4, 5, 6, 7];","completion":"def compareLists(list1, list2): if len(list1) != len(list2): return False for i in range(len(list1)): if list1[i] != list2[i]: return False return True list1 = [1, 2, 3, 4, 5] list2 = [3, 4, 5, 6, 7] result = compareLists(list1, list2) print(f'Are the elements in the lists the same? {result}') # Output: Are the elements in the lists the same? False"},{"prompt":"Build a type checking function to determine what kind of data is being processed, given a generic string in Python. str = '123'","completion":"def check_type(str): try: int(str) return 'Integer' except ValueError: pass try: float(str) return 'Float' except ValueError: pass return 'String' print(check_type('123')) # prints 'Integer'"},{"prompt":"Write a Python program to classify the given dataset using kmeans clustering. x_points = {2, 4, 5, 10, 12, 13, 15, 16,18, 20} y_points = {3, 8, 10, 13, 15, 16, 18, 22, 25, 30}","completion":"from sklearn.cluster import KMeans def cluster_data(x_points, y_points): X = list(zip(x_points, y_points)) clustering_model = KMeans(n_clusters=3) clustering_model.fit(X) labels = clustering_model.labels_ return labels"},{"prompt":"Generate a Python program to identify the last occurrence of an element in a list. element: 8 list: [3, 1, 4, 5, 8, 6, 8]","completion":"def last_occurrence(x, lst): last_index = -1 for i in range(len(lst)): if lst[i] == x: last_index = i return last_index"},{"prompt":"Generate a random password in Python with length 10, containing both lowercase and uppercase characters.","completion":"import string import random def generatePassword(): # Generate list of lowercase and uppercase letters letters = string.ascii_letters # Generate a random string with length 10 password = ''.join(random.choice(letters) for i in range(10)) return password print(generatePassword())"},{"prompt":"Write Python code to normalize the values of a list of numbers by subtracting each number from the maximum value in the list and dividing it by the maximum value. [7, 8, 10],","completion":"def normalize(lst): max_num = max(lst) normalized_lst = [(num-max_num)/max_num for num in lst] return normalized_lst lst = [7,8,10] normalized_values = normalize(lst) print(normalized_values)"},{"prompt":"Create a Python script which takes a sentence and returns the hashtag most associated with it. We are going on a picnic","completion":"import nltk from nltk.tokenize import TweetTokenizer from nltk.corpus import stopwords from nltk.collocations import * def get_hashtag(sentence): tokenizer = TweetTokenizer(preserve_case=False, strip_handles=True, reduce_len=True) words = tokenizer.tokenize(sentence) bigram_measures = nltk.collocations.BigramAssocMeasures() finder = BigramCollocationFinder.from_words(words) #ignore punctuation and stopwords stop_words = stopwords.words('english') finder.apply_word_filter(lambda x: x in stop_words) finder.apply_word_filter(lambda x: x.isalpha() == False) hashtag = finder.nbest(bigram_measures.pmi,1) return \\"#\\" + hashtag[0][0] + hashtag[0][1] sentence = \\"We are going on a picnic\\" result = get_hashtag(sentence) print(result) # Output = #GoingPicnic"},{"prompt":"Generate a Python program that calculates the total number of vowels in a sentence This sentence has five vowel","completion":"def count_vowels(sentence): vowels = ['a', 'e', 'i', 'o', 'u'] count = 0 for word in sentence.split(): for letter in word: if letter in vowels: count += 1 return count #Test sentence = \\"This sentence has five vowels\\" print(\\"Number of vowels:\\", count_vowels(sentence))"},{"prompt":"Optimize this code in Python to increase its performance. def double_word(word): doubled_word = for char in word: doubled_word += char * 2 return doubled_word","completion":"def double_word(word): doubled_word = \\"\\" for char in word: doubled_word += char + char return doubled_word"},{"prompt":"Generate a random 10letter string using Python","completion":"import string import random def generateRandomString(): letters = string.ascii_lowercase return ''.join(random.choice(letters) for _ in range(10)) if __name__ == '__main__': print(generateRandomString())"},{"prompt":"Optimize the following Python code so that it runs faster, given that x is an array of integers. sum = 0 for i in range(len(x)): sum += x[i] x = [4, 2, 1, 7, 8, 6]","completion":"# Optimized Python code sum = 0 for num in x: sum += num # Using built-in sum function sum = sum(x)"},{"prompt":"Create a Python program to convert a number to its corresponding month name. 2","completion":"def num_to_month(num): months = [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ] return months[num - 1] print(num_to_month(2)) # February"},{"prompt":"Compute the factorial of a given number using a recursive function in Python.","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1)"},{"prompt":"Design a rock, paper, scissors game using Python.","completion":"\\"\\"\\" Design a \\"rock, paper, scissors\\" game using Python. \\"\\"\\" import random OPTIONS = [\\"rock\\", \\"paper\\", \\"scissors\\"] def play_game(): # Player selection print(\\"Choose your weapon: rock, paper, or scissors\\") player_choice = input().lower() # Computer selection computer_choice = random.choice(OPTIONS) print(f\\"Computer chose {computer_choice.title()}\\") # Compare selections if player_choice == computer_choice: print(\\"It's a tie!\\") else: if player_choice == \\"rock\\": if computer_choice == \\"paper\\": print(\\"Computer wins!\\") elif computer_choice == \\"scissors\\": print(\\"Player wins!\\") elif player_choice == \\"paper\\": if computer_choice == \\"scissors\\": print(\\"Computer wins!\\") elif computer_choice == \\"rock\\": print(\\"Player wins!\\") elif player_choice == \\"scissors\\": if computer_choice == \\"rock\\": print(\\"Computer wins!\\") elif computer_choice == \\"paper\\": print(\\"Player wins!\\") if __name__ == \\"__main__\\": play_game()"},{"prompt":"Produce an algorithm in Python to determine the maximum difference between any two elements in an array. [2, 7, 9, 5, 1, 3, 5]","completion":"def max_diff(array): max_diff = -float('inf') for i in range(1, len(array)): for j in range(i): diff = array[i]-array[j] if diff > max_diff: max_diff = diff return max_diff"},{"prompt":"Create an artificial neural network in Python with Keras that classifies handwritten digits. Not applicable","completion":"from keras.models import Sequential from keras.layers import Dense from keras.utils import to_categorical # Import the dataset from keras.datasets import mnist # Load the dataset (X_train, y_train), (X_test, y_test) = mnist.load_data() # Reshaping the data X_train = X_train.reshape(-1, 784) X_test = X_test.reshape(-1, 784) # Normalizing the data X_train = X_train/255 X_test = X_test/255 # Converting the target variables into binary categories y_train = to_categorical(y_train, 10) y_test = to_categorical(y_test, 10) # Building the model model = Sequential([ Dense(64, activation='relu', input_shape=(784,)), Dense(64, activation='relu'), Dense(10, activation='softmax') ]) # Compiling the model model.compile( optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'] ) # Training the model model.fit( X_train, y_train, batch_size=128, epochs=5, validation_data=(X_test, y_test) )"},{"prompt":"Create an API for a library application in Python. This API should include endpoints for creating a book (with fields for title, author, and ISBN), listing all books, updating a book, and deleting a book. Not applicable","completion":"import flask from flask import request, jsonify app = flask.Flask(__name__) # Database functionality # classes used to represent the objects class Book(): def __init__(self, title, author, isbn): self.title = title self.author = author self.isbn = isbn # lists of books books = [] # endpoints @app.route('/books', methods=['GET', 'POST']) def all_books(): response_object = {'status': 'success'} if request.method == 'POST': post_data = request.get_json() books.append(Book(post_data.get('title'), post_data.get('author'), post_data.get('isbn'))) response_object['message'] = 'Book added!' else: response_object['books'] = [book.__dict__ for book in books] return jsonify(response_object) @app.route('/books/<int:isbn>', methods=['PUT', 'DELETE']) def single_book(isbn): response_object = {'status': 'success'} if request.method == 'PUT': post_data = request.get_json() book = next(filter(lambda x: x.isbn == isbn, books), None) if book: book.title = post_data.get('title') book.author = post_data.get('author') response_object['message'] = 'Book updated' else: response_object['message'] = 'Book does not exist' if request.method == 'DELETE': global books books = list(filter(lambda x: x.isbn != isbn, books)) response_object['message'] = 'Book deleted' return jsonify(response_object) # Run the application if __name__ == '__main__': app.run()"},{"prompt":"Devise a Python program to check if two strings are a palindrome.","completion":"def palindrome_checker(string1, string2): m = len(string1) n = len(string2) if m != n: return False string1 = string1.lower() string2 = string2.lower() # create empty 2-D matrix C = [[0] * (n + 1) for i in range(m + 1)] # palindromic substring of length 0 for i in range(m + 1): C[i][0] = 0 # palindromic substring of length 1 for j in range(n + 1): C[0][j] = 0 # fill the matrix in bottom-up manner for i in range(1, m + 1): for j in range(1, n + 1): if string1[i - 1] == string2[j - 1]: C[i][j] = C[i - 1][j - 1] + 1 return m == n == C[m][n]"},{"prompt":"Design a Python program to sort the given list using insertion sort. [3,8,15,2,6,10]","completion":"def insertionSort(arr): for i in range(1, len(arr)): j = i-1 key = arr[i] while j >=0 and key < arr[j] : arr[j+1] = arr[j] j -= 1 arr[j+1] = key arr = [3,8,15,2,6,10] insertionSort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i])"},{"prompt":"Write a Python code to generate a random string of fixed length consisting of characters from a to z","completion":"import random def generate_random_string(length): letters = 'abcdefghijklmnopqrstuvwxyz' random_string = ''.join(random.choice(letters) for i in range(length)) return random_string if __name__ == '__main__': print(generate_random_string(10))"},{"prompt":"Create a Python script that captures video from a camera, detects objects in the video, and sends data to a serial port. The script should import the OpenCV, serial, and struct modules, and use the datetime module to log data. It should define a function to decrease angular resolution, and another function to allow the user to click on the video to set the center for transformation. The script should then open a serial port, set the capture properties for the camera, create images for processing, set the range of colors to detect, and enter a loop to capture frames from the camera. Within the loop, the script should perform various image processing operations, including thresholding, erosion, and dilation, and then scan the top row of the thresholded image to find the number of contiguous segments and their location. The script should then pack the data into a struct and write it to the serial port, and log any data received from the serial port. Finally, the script should display the video and wait for a key press to exit.","completion":"#!/usr/bin/python import cv, serial, struct from datetime import datetime cyril = serial.Serial('/dev/ttyAMA0', 9600) #open first serial port and give it a good name print \\"Opened \\"+cyril.portstr+\\" for serial access\\" centerX = 175 #160 centerY = 140 #120 cropped = None img = None # decrease angular resolution for 8-bit serial transport def derez(x): if( x < 90 ): return (-90-x)/2 else: return (270-x)/2 # allow user to click on image from camera to set the center for transformation def on_mouse(event, x, y, flags, param): if event==cv.CV_EVENT_LBUTTONDOWN: print x, \\", \\", y, \\": \\", img[y,x] #print \\"Set center \\", x, \\", \\", y, \\": \\", img[y,x] #global centerX #global centerY #centerX = x #centerY = y if __name__ == '__main__': datalog = open(\\"data.log\\", \\"w+\\") datalog.write(\\"n~~~=== Rambler Data Log Opened, \\" + str(datetime.now()) + \\" ===~~~n\\") capture = cv.CaptureFromCAM(0) #capture = cv.CaptureFromFile(\\"../out2.mpg\\") cv.SetCaptureProperty(capture, cv.CV_CAP_PROP_FRAME_WIDTH, 320) cv.SetCaptureProperty(capture, cv.CV_CAP_PROP_FRAME_HEIGHT, 240) polar = cv.CreateImage((360, 360), 8, 3) cropped = cv.CreateImage((360, 40), 8, 3) img = cv.CreateImage((320, 240), 8, 3) cones = cv.CreateImage((360, 40), 8, 1) cv.NamedWindow('cam') cv.NamedWindow('unwrapped') cv.NamedWindow('target') cv.SetMouseCallback('cam', on_mouse) on_mouse(cv.CV_EVENT_LBUTTONDOWN, centerX, centerY, None, None) # These values determine the range of colors to detect as \\"shelter\\". #Calibration A: finding cones in room 817 lower = cv.Scalar(40, 90, 170) # (B, G, R) upper = cv.Scalar(80, 180, 255) #Calibration B: finding green paper in 817 #lower = cv.Scalar(10, 90, 10) #upper = cv.Scalar(99, 255, 90) M = 69 while True: img = cv.QueryFrame(capture) cv.LogPolar(img, polar, (centerX, centerY), M+1, cv.CV_INTER_NN) #possible speedup - get subrect src #cropped = cv.GetSubRect(polar,(280,0,40,360)) #cv.Transpose(cropped, cropped) cv.Transpose(cv.GetSubRect(polar,(280,0,40,360)), cropped) cv.Flip(cropped) #just for viewing (possible speedup) cv.InRangeS(cropped, lower, upper, cones) cv.Erode(cones, cones) # just once might be too much k = cv.CreateStructuringElementEx(3, 43, 1, 1, cv.CV_SHAPE_RECT) # create a 3x43 rectangular dilation element k cv.Dilate(cones, cones, k, 2) #scan top row of thresholded, eroded, dilated image, find the number of contiguous segments and their location s = 0 # size of contiguous segment ss = 0 #number of contiguous segments bearingToLandmarks = [] for i in xrange(360-2): c = cones[0, i] #current n = cones[0, i+1] #next #print int(c), if (c == 0 and n == 255) or (c == 255 and n == 255): # this condition marks beginning or middle of contiguous segment s = s + 1 #print \\".\\", elif (c == 255 and n == 0): # end of contiguous segment ss = ss + 1 bearingToLandmarks.append((i-s/2, s)) s = 0 #handle wraparound if (i == 360-2-1 and s != 0): #TODO: double check this offset if (cones[0,0] == 255): #print \\"edge case A\\" bearingToLandmarks[0] = ((bearingToLandmarks[0][0]-s/2)%360, bearingToLandmarks[0][1]+s) #TODO: recalculate center more accurately else: #print \\"edge case B\\" bearingToLandmarks.append((c-s/2, s)) #print \\".\\", ss, \\".\\" #bearingToLandmarks.append((derez(g), 12)) #g = (g + 1) % 360 print bearingToLandmarks, len(bearingToLandmarks) #TODO - Bearing output if len(bearingToLandmarks) > 0: output = struct.pack('c','xfa') + struct.pack('B', 0) + struct.pack('b', derez(bearingToLandmarks[0][0]) ) + struct.pack('B', 0) cyril.write(output) #Data Logging if (cyril.inWaiting() > 0): logdata = cyril.read(cyril.inWaiting()) a = 0 b = 0 for c in logdata: if c == 'n': datalog.write(str(datetime.now().time())+\\",\\"+logdata[a:b]+\\"n\\") a = b + 1 b = b + 1 cv.ShowImage('cam', img) cv.ShowImage('target', cones) cv.ShowImage('unwrapped', cropped) key = cv.WaitKey(10) # THIS REQUIRES AT LEAST ONE WINDOW #print \\"key \\",key if key > 0: break cv.DestroyAllWindows() cyril.close() datalog.write(\\"n~~~=== Rambler Data Log Closed, \\" + str(datetime.now()) + \\" ===~~~n\\") datalog.close()"},{"prompt":"Design an algorithm to check if a number is a perfect square in Python. 25","completion":"import math def isPerfectSquare(n): # Find floating point value of # square root of x. sqr = math.sqrt(n) # If square root is an integer return (sqr - math.floor(sqr) == 0) # Driver program x = 25 if(isPerfectSquare(x)): print(x, \\"is a perfect square\\") else: print(x, \\"is not a perfect square\\")"},{"prompt":"This code contains a set of tasks to clean, build, and deploy a Python package called Marvin. It also includes tasks to update the default version and module files, update the git package, and set up the package at Utah. To use these tasks, import the \`Collection\` and \`task\` functions from the \`invoke\` module and create a new \`Collection\` object. Then, add the desired tasks to the collection using the \`task\` decorator. Finally, run the tasks using the \`run\` method of the \`Context\` object.","completion":"# !usr/bin/env python2 # -*- coding: utf-8 -*- # # Licensed under a 3-clause BSD license. # # @Author: Brian Cherinka # @Date: 2017-06-10 16:46:40 # @Last modified by: JosÃ© SÃ¡nchez-Gallego (gallegoj@uw.edu) # @Last modified time: 2018-11-14 19:37:22 from __future__ import absolute_import, division, print_function import os from invoke import Collection, task DIRPATH = '/home/manga/software/git/manga/marvin' MODULEPATH = '/home/manga/software/git/modulefiles' @task def clean_docs(ctx): ''' Cleans up the docs ''' print('Cleaning the docs') ctx.run(\\"rm -rf docs/sphinx/_build\\") @task def build_docs(ctx, clean=False): ''' Builds the Sphinx docs ''' if clean: print('Cleaning the docs') ctx.run(\\"rm -rf docs/sphinx/_build\\") print('Building the docs') os.chdir('docs/sphinx') ctx.run(\\"make html\\", pty=True) @task def show_docs(ctx): \\"\\"\\"Shows the Sphinx docs\\"\\"\\" print('Showing the docs') os.chdir('docs/sphinx/_build/html') ctx.run('open ./index.html') @task def clean(ctx): ''' Cleans up the crap ''' print('Cleaning') # ctx.run(\\"rm -rf docs/sphinx/_build\\") ctx.run(\\"rm -rf htmlcov\\") ctx.run(\\"rm -rf build\\") ctx.run(\\"rm -rf dist\\") @task(clean) def deploy(ctx, repo=None): ''' Deploy to pypi ''' print('Deploying to Pypi!') rstr = '' if repo: rstr = '-r {0}'.format(repo) ctx.run(\\"python setup.py sdist bdist_wheel --universal\\") ctx.run(\\"twine upload {0} dist/*\\".format(rstr)) @task def update_default(ctx, path=None, version=None): ''' Updates the default version module file''' assert version is not None, 'A version is required to update the default version!' assert path is not None, 'A path must be specified!' # update default version f = open('.version', 'r+') data = f.readlines() data[1] = 'set ModulesVersion \\"{0}\\"n'.format(version) f.seek(0, 0) f.writelines(data) f.close() @task def update_module(ctx, path=None, wrap=None, version=None): ''' Update a module file ''' assert version is not None, 'A version is required to update the module file!' assert path is not None, 'A path must be specified!' print('Setting up module files!') os.chdir(path) newfile = 'mangawork.marvin_{0}'.format(version) if wrap else version oldfile = 'mangawork.marvin_2.1.3' if wrap else 'master' searchline = 'marvin' if wrap else 'version' ctx.run('cp {0} {1}'.format(oldfile, newfile)) f = open('{0}'.format(newfile), 'r+') data = f.readlines() index, line = [(i, line) for i, line in enumerate(data) if 'set {0}'.format(searchline) in line][0] data[index] = 'set {0} {1}n'.format(searchline, version) f.seek(0, 0) f.writelines(data) f.close() # update the default version update_default(ctx, path=path, version=newfile) @task def update_git(ctx, version=None): ''' Update the git package at Utah ''' assert version is not None, 'A version is required to checkout a new git repo!' print('Checking out git tag {0}'.format(version)) verpath = os.path.join(DIRPATH, version) # checkout and setup new git tag os.chdir(DIRPATH) ctx.run('git clone https://github.com/sdss/marvin.git {0}'.format(version)) os.chdir(verpath) ctx.run('git checkout {0}'.format(version)) ctx.run('git submodule update --init --recursive') # ctx.run('python -c \\"from get_version import generate_version_py; ' # 'generate_version_py('sdss-marvin', {0}, False)'.format(version)) @task def update_current(ctx, version=None): ''' Update the current symlink ''' assert version is not None, 'A version is required to update the current symlink!' # reset the current symlink os.chdir(DIRPATH) ctx.run('rm current') ctx.run('ln -s {0} current'.format(version)) @task def switch_module(ctx, version=None): ''' Switch to the marvin module of the specified version and start it ''' assert version is not None, 'A version is required to setup Marvin at Utah!' ctx.run('uwsgi --stop /home/www/sas.sdss.org/mangawork/marvin/pid/uwsgi_marvin.pid') ctx.run('module unload wrapmarvin') ctx.run('module load wrapmarvin/mangawork.marvin_{0}'.format(version)) ctx.run('uwsgi /home/manga/software/git/manga/marvin/{0}/python/marvin/web/uwsgi_conf_files/uwsgi_marvin_mangawork.ini'.format(version)) @task def update_uwsgi(ctx, version=None): ''' Reset the uwsgi symlink to the new version and touch the file to Emperor reload Marvin ''' assert version is not None, 'A version is required to setup Marvin at Utah!' os.chdir('/etc/uwsgi/vassals') new_path = '/home/manga/software/git/manga/marvin/{0}/python/marvin/web/uwsgi_conf_files/uwsgi_marvin_mangawork.ini'.format(version) ctx.run('rm uwsgi_marvin_mangawork.ini') ctx.run('ln -s {0} uwsgi_marvin_mangawork.ini'.format(new_path)) ctx.run('touch uwsgi_marvin_mangawork.ini') @task def setup_utah(ctx, version=None): ''' Setup the package at Utah and update the release ''' assert version is not None, 'A version is required to setup Marvin at Utah!' # update git update_git(ctx, version=version) # update_current update_current(ctx, version=version) # update modules marvin = os.path.join(MODULEPATH, 'marvin') wrap = os.path.join(MODULEPATH, 'wrapmarvin') update_module(ctx, path=marvin, version=version) update_module(ctx, path=wrap, wrap=True, version=version) # restart the new marvin # switch_module(ctx, version=version) update_uwsgi(ctx, version=version) print('Marvin version {0} is set up!n'.format(version)) print('Check for the new Marvin version at the bottom of the Marvin Web main page!') # print('Please run ...n stopmarvin n module switch wrapmarvin ' # 'wrapmarvin/mangawork.marvin_{0} n startmarvin n'.format(version)) os.chdir(os.path.dirname(__file__)) ns = Collection(clean, deploy, setup_utah) docs = Collection('docs') docs.add_task(build_docs, 'build') docs.add_task(clean_docs, 'clean') docs.add_task(show_docs, 'show') ns.add_collection(docs) updates = Collection('update') updates.add_task(update_git, 'git') updates.add_task(update_current, 'current') updates.add_task(update_module, 'module') updates.add_task(update_default, 'default') ns.add_collection(updates)"},{"prompt":"Given a Python list of numbers (max 10 elements) transform the list to a dictionary with the following rules: if the element is even, the key is 'even' and the value is the list of even numbers; if the element is odd, the key is 'odd' and the value is the list of odd numbers. [4, 8, 3, 12, 15, 7]","completion":"{ 'even': [4, 8, 12], 'odd': [3, 15, 7] }"},{"prompt":"Create a Python script that displays the current date and the upcoming weekend.","completion":"from datetime import date from datetime import timedelta import datetime today = datetime.date.today() # Current date print(\\"Today's date is:\\", today) # Coming weekend weekend = today + timedelta(days=4-today.weekday()) # Weekend date print(\\"The upcoming Weekend date is:\\", weekend)"},{"prompt":"dentify any errors in the following Python code. numbers = [1, 2, 3, 4] for num in numbers print(num)","completion":"The code is incorrect because it is missing the colon at the end of the loop statement. It should be 'for num in numbers:' instead of 'for num in numbers'."},{"prompt":"Edit the following Python code to satisfy the requirement. def order_by_name(people): # return people sorted by name return sorted(people, key=lambda x: x['name']) # The following code should print people sorted by age people = [{'name': 'John', 'age': 24}, {'name': 'Steve', 'age': 32}, {'name': 'Alice', 'age': 18}] print(order_by_name(people))","completion":"def order_by_name(people): # return people sorted by name return sorted(people, key=lambda x: x['name']) def order_by_age(people): # return people sorted by age return sorted(people, key=lambda x: x['age']) # The following code should print people sorted by age people = [{'name': 'John', 'age': 24}, {'name': 'Steve', 'age': 32}, {'name': 'Alice', 'age': 18}] print(order_by_age(people))"},{"prompt":"Create a Python function to replace a specific character in a string? string = Hello World character = l replacement = X","completion":"def replace_char(string, character, replacement): return string.replace(character, replacement) string = \\"Hello World\\" character = \\"l\\" replacement = \\"X\\" print(replace_char(string, character, replacement))"},{"prompt":"Using input string, write a Python program to sort the string in ascending order. hello","completion":"def sort_string(string): lst = list(string) lst.sort() return ''.join(lst) sorted_str = sort_string('hello') print(sorted_str) # expected output: ehllo"},{"prompt":"Write a function in Python which takes in a string and an integer, n, as arguments and returns the last n characters of the string.","completion":"def last_n_chars(string, n): return string[len(string) - n:]"},{"prompt":"Create an algorithm in Python to find the index of an element in an array. arr = [1, 2, 3, 4] target = 3","completion":"def indexFinder(arr, target): for i in range(len(arr)): if arr[i] == target: return i return -1 arr = [1, 2, 3, 4] target = 3 print(\\"Index of % d is % d\\" %(target, indexFinder(arr, target)))"},{"prompt":"Create a python program to display the numbers divisible by 3 in the given range from 1 to 20","completion":"for num in range(1, 21): if num % 3 == 0: print(num)"},{"prompt":"Write a Python program to create a histogram representing the frequency distribution of a set of data. [1, 2, 3, 4, 5, 5]","completion":"import matplotlib.pyplot as plt data = [1, 2, 3, 4, 5, 5] plt.hist(data, bins=5) plt.title(\\"Frequency Distribution\\") plt.show()"},{"prompt":"w can you design a Python program to find the sum of all prime numbers between 1 and a given limit? Limit = 10","completion":"def sum_primes(limit): sum = 0 for i in range(2, limit+1): if is_prime(i): sum += i return sum def is_prime(n): for i in range(2, int(n ** 0.5) + 1): if n % i == 0: return False return True"},{"prompt":"Create a Python class called Schmeckles with methods to convert Schmeckles to USD, EUR, YEN, and RUB, and to search for and retrieve Schmeckle values from a given input message. Add a listener to the Discord bot to call the getSchmeckles method when a message is received, and send a response message with the converted value if Schmeckles are found in the message.","completion":"import re class Schmeckles: def __init__(self, bot): self.bot = bot self.p = re.compile('([^n.,rd-]{0,30})(-?[d|,]{0,300}.{0,1}d{1,300} schmeckle[w]{0,80})([^n.,rd-]{0,30})', re.IGNORECASE) async def schmeckle2usd(self, schmeckle): \\"\\"\\"1 Schmeckle = 148 USD https://www.reddit.com/r/IAmA/comments/202owt/we_are_dan_harmon_and_justin_roiland_creators_of/cfzfv79\\"\\"\\" return schmeckle * 148.0 async def schmeckle2eur(self, schmeckle): return schmeckle * 139.25 # latest USDEUR value async def schmeckle2yen(self, schmeckle): return schmeckle * 139.25 # latest USDYEN value async def schmeckle2rub(self, schmeckle): return schmeckle * 139.25 # latest USDRUB value async def searchForSchmeckles(self, content): if any([x in content.lower() for x in ['?', 'how much', 'what is', 'how many', 'euro', 'usd', 'dollars', 'dollar', 'euros']]): return self.p.search(content) return None async def getSchmeckles(self, content): get_schmeckles = await self.searchForSchmeckles(content) if get_schmeckles: match = get_schmeckles.groups() euro = any([x in match[-1].lower() for x in ['eur', 'euro', 'euros']]) dollar = any([x in match[-1].lower() for x in ['usd', 'dollar', 'dollars']]) if euro and not dollar: value = await self.schmeckle2eur(float(match[1].split()[0])), 'EUR', match[1].split()[0] elif dollar and not euro: value = await self.schmeckle2usd(float(match[1].split()[0])), 'USD', match[1].split()[0] elif not dollar and not euro: value = await self.schmeckle2usd(float(match[1].split()[0])), 'USD', match[1].split()[0] return value return None async def _on_message(self, message): content = message.content author = message.author channel = message.channel if author.id != self.bot.user.id: schmeckles = await self.getSchmeckles(content) if schmeckles: await self.bot.send_message(channel, '{0[2]} SHM is about {0[0]:.2f} {0[1]}'.format(schmeckles)) def setup(bot): cog = Schmeckles(bot) bot.add_listener(cog._on_message, \\"on_message\\") bot.add_cog(cog)"},{"prompt":"Write a Python program to append two lists","completion":"list1 = [1, 2, 3] list2 = [4, 5, 6] appended_list = list1 + list2 print(appended_list) # [1, 2, 3, 4, 5, 6]"},{"prompt":"Create a function in Python that computes the sum of two distinct numbers.","completion":"def sumTwo(num1, num2): return num1 + num2 result = sumTwo(5, 6); print(result);"},{"prompt":"Create a Python script for a weather forecasting application. The script should request weather data from a public API, parse it and store it in a database. Not applicable","completion":"import requests import json import sqlite3 # Request data from the API r = requests.get('https://api.weather.com/v2/profiles/YOUR_APPID/forecast/hourly/48hour?units=m&language=en-US&format=json') # Parse the response as a JSON object data = json.loads(r.text) # Connect to the database conn = sqlite3.connect('weather.db') c = conn.cursor() # Create the database if it doesn't exist c.execute('CREATE TABLE IF NOT EXISTS forecasts (time INTEGER, temperature REAL, humidity REAL, visibility REAL, wind_speed REAL)') # Add the forecast data to the database for hour in data[\\"forecastGroup\\"][\\"forecast\\"]: c.execute('INSERT INTO forecasts VALUES (?, ?, ?, ?, ?)', (hour['fcst_valid'], hour['temp'], hour['humidity'], hour['visibility'], hour['wspd'])) # Commit the changes to the database conn.commit()"},{"prompt":"Create a GUI in Python using Tkinter.","completion":"# imports import tkinter as tk # create root app window root = tk.Tk() # setting window's size root.geometry(\\"200x200\\") # main loop root.mainloop()"},{"prompt":"Generate a Python implementation of an algorithm that traverses a binary tree and clears all of its nodes.","completion":"# A recursive function to clear a binary tree def clearBinaryTree(root): # Base case if root is None: return # First clear the left nodes clearBinaryTree(root.left) # Then clear the right nodes clearBinaryTree(root.right) # Clear the data of this node root.data = None"},{"prompt":"Generate a deterministic random number generator in Python.","completion":"import random def random_number(seed): random.seed(seed) return random.random() print(random_number(99))"},{"prompt":"Generate a Python program to merge two input lists.","completion":"def merge_lists(list1, list2): merged_list = list1 + list2 return merged_list result = merge_lists([1,2,3], [4,5,6]) print(result)"},{"prompt":"Can you create a program in Python to display the first 10 elements of the Fibonacci Sequence?","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return 0 elif n == 1: return 1 else: for i in range(2,n+1): c = a + b a = b b = c return b for i in range(0, 10): print(Fibonacci(i))"},{"prompt":"Design a function in Python that takes a string and a number and removes the characters at the specified positions from that string. str = Hello World! index = [0, 5, 9]","completion":"def remove_chars_at_indices(str, indices): new_str = \\"\\" for i in range(len(str)): if i not in indices: new_str += str[i] return new_str str = \\"Hello World!\\" index = [0, 5, 9] result = remove_chars_at_indices(str, index) print(result)"},{"prompt":"Write an algorithm in Python to search a smaller word in a larger word. search_word = the larger_word = hello there","completion":"def search_smaller_word_in_larger_word(search_word, larger_word): \\"\\"\\" Searches a smaller word in a larger word Arguments: search_word -- Smaller word we have to search in the larger word larger_word -- Larger word Return: True if smaller word exists in larger word, else False \\"\\"\\" if search_word in larger_word: return True return False if __name__ == '__main__': search_word = \\"the\\" larger_word = \\"hello there\\" print(search_smaller_word_in_larger_word(search_word, larger_word))"},{"prompt":"Build a class in Python 3 to represent a triangle.","completion":"class Triangle: def __init__(self, side1, side2, side3): self.side1 = side1 self.side2 = side2 self.side3 = side3 def perimeter(self): return (self.side1 + self.side2 + self.side3) def area(self): # Using Heron's formula s = self.perimeter() / 2 return (s*(s-self.side1)*(s-self.side2)*(s-self.side3))**0.5"},{"prompt":"mplement a bubble sort algorithm in Python to sort integers in an array. [6, 5, 3, 1, 8, 7, 2, 4]","completion":"def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] # Driver code to test above arr = [6,5,3,1,8,7,2,4] bubble_sort(arr) print (\\"Sorted array is:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Create a Python program to randomly filter out half of the elements of an array. [9, 2, 7, 4, 5, 6, 8, 1, 4, 0]","completion":"import random def filter_half_array(arr): while len(arr)>0: el = random.choice(arr) # randomly select an element of the list arr.remove(el) # remove the selected item from the list return arr arr = [9, 2, 7, 4, 5, 6, 8, 1, 4, 0] filter_half_array(arr)"},{"prompt":"Create a Python script which takes a list of tuples containing the names and ages of people and prints out the oldest person in the list. [('John', 18), ('Sarah', 19), ('Bob', 17)]","completion":"def oldest_person(people): oldest = None for name, age in people: if oldest == None or age > oldest[1]: oldest = (name, age) return oldest people = [('John', 18), ('Sarah', 19), ('Bob', 17)] name, age = oldest_person(people) print(f\\"{name} is the oldest in the list with an age of {age}.\\")"},{"prompt":"Write a code to split a given string into substrings after every 5 characters. The substring should contain the characters starting from the given index to 5 characters length after the index. string = HelloWorldFromPython","completion":"def split_string(input_string): splitted_strings = [] for i in range(0, len(input_string), 5): splitted_strings.append(input_string[i:i+5]) return splitted_strings splitted_strings = split_string(\\"HelloWorldFromPython\\") print(splitted_strings)"},{"prompt":"Develop a Python function for calculating the sum of two numbers.","completion":"def sum_of_numbers(num1, num2): return num1 + num2"},{"prompt":"Create a commandline program in Python to simulate a calculator capable of basic arithmetic operations such as addition, subtraction, multiplication and division. add 10 and 5","completion":"#!/usr/bin/env python3 # Addition if \\"add\\" in sys.argv[1]: try: num1 = int(sys.argv[2]) num2 = int(sys.argv[3]) print(\\"Result of\\", num1, \\"+\\", num2, \\" = \\", num1 + num2) except ValueError: print(\\"Please provide valid input values\\") # Subtraction elif \\"sub\\" in sys.argv[1]: try: num1 = int(sys.argv[2]) num2 = int(sys.argv[3]) print(\\"Result of\\", num1, \\"-\\", num2, \\" = \\", num1 - num2) except ValueError: print(\\"Please provide valid input values\\") # Multiplication elif \\"mul\\" in sys.argv[1]: try: num1 = int(sys.argv[2]) num2 = int(sys.argv[3]) print(\\"Result of\\", num1, \\"*\\", num2, \\" = \\", num1 * num2) except ValueError: print(\\"Please provide valid input values\\") # Division elif \\"div\\" in sys.argv[1]: try: num1 = int(sys.argv[2]) num2 = int(sys.argv[3]) print(\\"Result of\\", num1, \\"/\\", num2, \\" = \\", num1 / num2) except ValueError: print(\\"Please provide valid input values\\")"},{"prompt":"Calculate the average of a list of numbers using a Python function. numbers = [5, 10, 15, 20]","completion":"def calculateAverage(numbers): total = 0 for num in numbers: total += num return total / len(numbers) numbers = [5, 10, 15, 20] print(calculateAverage(numbers)) // 12.5"},{"prompt":"Write a Python program to edit a list given some criteria. list = [5, 6, 2, 8, 11] criteria = lambda x: x % 2 == 0","completion":"def edit_list(list, criteria): return [x for x in list if criteria(x) == True]"},{"prompt":"Write a Python program create a string made of the first and last two characters from a given string.","completion":"def substring(str): if len(str) < 3: return else: return str[:2] + str[-2:] substring(\\"hello\\")"},{"prompt":"Create a Python program to find all pairs of numbers that add up to a given sum. sum = 8","completion":"def find_pairs(lst, sum): pairs = [] for i in range(len(lst)-1): for j in range(i+1, len(lst)): if lst[i] + lst[j] == sum: pairs.append((lst[i], lst[j])) return pairs pairs = find_pairs([1, 2, 3, 4, 5], 8) print(pairs) # [(3,5), (2,6), (1,7)]"},{"prompt":"Generate a Python program to find all the perfect numbers between 1 and n. Not applicable","completion":"def perfect_numbers(n): # Initialize perfect number list perfect_number_list = [] for num in range(1, n + 1): sum = 0 for i in range(1, num): if num % i == 0: sum += i # If the sum of its divisor equals # the number itself, then that # number is a perfect number. if sum == num: perfect_number_list.append(num) return perfect_number_list # Driver code n = 1000 print(perfect_numbers(n))"},{"prompt":"Who can suggest a Python code to find prime numbers between a given range? 2 and 5","completion":"def isPrime(n): # Edge case if n <= 1: return False # Check from 2 to n-1 for i in range(2, n): if n % i == 0: return False; return True # Function call res = isPrime(2) if(res): print(\\"Prime\\") else: print(\\"Not Prime\\") # Iterative check in a given range for n in range(2, 5): res = isPrime(n) if(res): print(n, \\"is Prime\\") else: print(n, \\"is not Prime\\")"},{"prompt":"Create a class in Python for representing a vehicle.","completion":"class Vehicle: def __init__(self, type, make, model, number_of_wheels): self.type = type self.make = make self.model = model self.number_of_wheels = number_of_wheels def description(self): return f\\"This is a {self.type} - {self.make} {self.model} with {self.number_of_wheels} wheels.\\""},{"prompt":"Construct a while loop in Python to print the first 10 numbers.","completion":"num = 1 while num <= 10: print(num) num += 1"},{"prompt":"Create a Python program to read in a list of words and output each word with its corresponding number of vowels.","completion":"def num_vowels(words): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] word_dict = {} for word in words: word_vowels = 0 for letter in word: if letter.lower() in vowels: word_vowels += 1 word_dict[word] = word_vowels return word_dict words_list = input(\\"Enter a list of words: \\").split() print(num_vowels(words_list))"},{"prompt":"Create a function in Python that checks if a given number is a prime. 15","completion":"def isPrime(n): if n < 2: return False for i in range(2, int(sqrt(n))+1): if n % i == 0: return False return True"},{"prompt":"Using the provided JSON data, write a Python script to search for a particular value. [ {name:John, age:30, city:New York}, {name:Mike, age:25, city:Boston}, {name:Frank, age:35, city:Los Angeles} ]","completion":"import json data = json.loads('[{\\"name\\":\\"John\\", \\"age\\":30, \\"city\\":\\"New York\\"},\\"name\\":\\"Mike\\", \\"age\\":25, \\"city\\":\\"Boston\\"}, {\\"name\\":\\"Frank\\", \\"age\\":35, \\"city\\":\\"Los Angeles\\"}]') def search(data, key, value): for item in data: if item[key] == value: return item print(search(data, \\"city\\", \\"New York\\"))"},{"prompt":"Write a Python program to generate a random string with the given length. Length: 8","completion":"import string import random def generate_random_string(length): characters = string.ascii_letters + string.digits return ''.join(random.choice(characters) for i in range(length))"},{"prompt":"Develop a program in Python to find the second largest element in a given array. [10, 11, 8, 9, 20]","completion":"def second_largest(arr): first = max(arr[0], arr[1]) second = min(arr[0], arr[1]) for i in range(2, len(arr)): if arr[i] > first: second = first first = arr[i] elif arr[i] > second and arr[i] != first: second = arr[i] return second"},{"prompt":"The given code is a Python class called LMSPublisher with several methods. To use this code, import the necessary modules and create an instance of the class. Then, call the publish method with a Course object as an argument to publish commerce data to the LMS. The publish method returns None if the operation succeeded, otherwise it returns an error message.","completion":"from __future__ import absolute_import, unicode_literals import json import logging import six from django.utils.translation import ugettext_lazy as _ from edx_rest_api_client.exceptions import SlumberHttpBaseException from oscar.core.loading import get_model from ecommerce.core.constants import ENROLLMENT_CODE_SEAT_TYPES from ecommerce.courses.utils import mode_for_product logger = logging.getLogger(__name__) Product = get_model('catalogue', 'Product') StockRecord = get_model('partner', 'StockRecord') class LMSPublisher: def get_seat_expiration(self, seat): if not seat.expires or 'professional' in getattr(seat.attr, 'certificate_type', ''): return None return seat.expires.isoformat() def get_course_verification_deadline(self, course): return course.verification_deadline.isoformat() if course.verification_deadline else None def serialize_seat_for_commerce_api(self, seat): \\"\\"\\" Serializes a course seat product to a dict that can be further serialized to JSON. \\"\\"\\" stock_record = seat.stockrecords.first() bulk_sku = None if getattr(seat.attr, 'certificate_type', '') in ENROLLMENT_CODE_SEAT_TYPES: enrollment_code = seat.course.enrollment_code_product if enrollment_code: bulk_sku = enrollment_code.stockrecords.first().partner_sku return { 'name': mode_for_product(seat), 'currency': stock_record.price_currency, 'price': int(stock_record.price_excl_tax), 'sku': stock_record.partner_sku, 'bulk_sku': bulk_sku, 'expires': self.get_seat_expiration(seat), } def publish(self, course): \\"\\"\\" Publish course commerce data to LMS. Uses the Commerce API to publish course modes, prices, and SKUs to LMS. Uses CreditCourse API endpoints to publish CreditCourse data to LMS when necessary. Arguments: course (Course): Course to be published. Returns: None, if publish operation succeeded; otherwise, error message. \\"\\"\\" site = course.partner.default_site course_id = course.id error_message = _('Failed to publish commerce data for {course_id} to LMS.').format(course_id=course_id) name = course.name verification_deadline = self.get_course_verification_deadline(course) modes = [self.serialize_seat_for_commerce_api(seat) for seat in course.seat_products] has_credit = 'credit' in [mode['name'] for mode in modes] if has_credit: try: data = { 'course_key': course_id, 'enabled': True } credit_api_client = site.siteconfiguration.credit_api_client credit_api_client.courses(course_id).put(data) logger.info('Successfully published CreditCourse for [%s] to LMS.', course_id) except SlumberHttpBaseException as e: # Note that %r is used to log the repr() of the response content, which may sometimes # contain non-ASCII Unicode. We don't know (or want to guess) the encoding, so using %r will log the # raw bytes of the message, freeing us from the possibility of encoding errors. logger.exception( 'Failed to publish CreditCourse for [%s] to LMS. Status was [%d]. Body was [%s].', course_id, e.response.status_code, e.content.decode('utf-8') ) return error_message except: # pylint: disable=bare-except logger.exception('Failed to publish CreditCourse for [%s] to LMS.', course_id) return error_message try: data = { 'id': course_id, 'name': name, 'verification_deadline': verification_deadline, 'modes': modes, } commerce_api_client = site.siteconfiguration.commerce_api_client commerce_api_client.courses(course_id).put(data=data) logger.info('Successfully published commerce data for [%s].', course_id) return None except SlumberHttpBaseException as e: # pylint: disable=bare-except logger.exception( 'Failed to publish commerce data for [%s] to LMS. Status was [%d]. Body was [%s].', course_id, e.response.status_code, e.content.decode('utf-8') ) return self._parse_error(e.content.decode('utf-8'), error_message) except Exception: # pylint: disable=broad-except logger.exception('Failed to publish commerce data for [%s] to LMS.', course_id) return error_message def _parse_error(self, response, default_error_message): \\"\\"\\"When validation errors occur during publication, the LMS is expected to return an error message. Arguments: response (Response): A 'Response' object which contains json error message. default_error_message (str) : default error message in case of exception. Returns: string: Returns the error message extracted from response.content along with default message. If no message is available in response then default message will be return. \\"\\"\\" message = None try: data = json.loads(response) if isinstance(data, six.string_types): message = data elif isinstance(data, dict) and data: message = list(data.values())[0] if isinstance(message, list): message = message[0] except Exception: # pylint: disable=broad-except pass if message: return ' '.join([default_error_message, message]) return default_error_message"},{"prompt":"Generate a Python script to print an inverted triangle pattern made up of asterisks. 5","completion":"def inverted_triangle(length): for i in range(length, 0, -1): for j in range(length - i): print(' ', end=\\"\\") for j in range(2 * i - 1): print('*', end=\\"\\") print() inverted_triangle(5) # Output: # ***** # *** # *"},{"prompt":"Create a menudriven Python program using while loop to calculate the squares and cubes of a number.","completion":"def print_menu(): print('1. Find the square ') print('2. Find the cube ') print('3. Quit') print() #Take Input from the user choice = int(input(\\"Enter your choice: \\")) while choice != 3: if choice==1: num = int(input(\\"Enter a number: \\")) print(\\"The square of\\",num,\\"is\\",num*num) elif choice==2: num = int(input(\\"Enter a number: \\")) print(\\"The cube of\\",num,\\"is\\",num**3) elif choice==3: print(\\"Bye!\\") else: print(\\"Sorry, wrong input\\") print() choice = int(input(\\"Enter your choice: \\")) print(\\"Bye!\\")"},{"prompt":"Given a number of queues, each containing numbers, write python code to find and print out the numbers at the front of each queue. queue1 = [5, 2, 9, 4] queue2 = [7, 8, 3, 6]","completion":"def print_front_elements_from_queues(queue_list): for queue in queue_list: print(queue[0]) queue_list = [queue1, queue2] print_front_elements_from_queues(queue_list) # This should print 5 and 7"},{"prompt":"Design a Python class that stores employee profile and salary information.","completion":"class Employee: def __init__(self, name, id, salary, profile): self.name = name self.id = id self.salary = salary self.profile = profile"},{"prompt":"gate land using Python code. The data contains weather data such as temperature, humidity and soil type.","completion":"import numpy as np # Calculate the soil moisture def calculate_soil_moisture(temperature, humidity, soil_type): # Calculation for sandy soil moisture = 0 if soil_type == \\"sandy\\": moisture = (temperature - 10) * humidity * 0.5 # Calculation for loamy soil elif soil_type == \\"loamy\\": moisture = (temperature - 20) * humidity * 0.6 # Calculation for clay soil elif soil_type == \\"clay\\": moisture = (temperature - 30) * humidity * 0.8 # Other types else: moisture = 10 # Calculate irrigation amount if moisture > 4: # No irrigation needed irrigation_amount = 0 else: # Irrigate the land irrigation_amount = np.abs(4 - moisture) return irrigation_amount"},{"prompt":"Design a function in Python to pad a list to a given length by replicating the rightmost element. [2, 3, 5], 7","completion":"def pad_list_right(lst, pad_length): extra_length = pad_length - len(lst) lst.extend([lst[-1]] * extra_length) return lst lst = [2, 3, 5] padding_length = 7 result = pad_list_right(lst, padding_length) print(result)"},{"prompt":"Write a Python function to compare two lists and return the items that are present in both lists. list1 = [1, 2, 3, 4, 5] list2 = [2, 3, 4, 6, 7]","completion":"def compare_list(list1, list2): # store comparison in results results = [] # iterate through lists for x in list1: for y in list2: if x == y: results.append(x) # return result return results # Driver code list1 = [1, 2, 3, 4, 5] list2 = [2, 3, 8, 9, 10] print(compare_list(list1, list2))"},{"prompt":"Develop a Python program to implement stochastic gradient descent to generate a linear regression model.","completion":"import random import numpy as np def sgd_model(X, Y, w, b, learning_rate, epochs): \\"\\"\\"Implement Stochastic Gradient Descent to generate a linear regression model\\"\\"\\" N = len(X) for e in range(epochs): for i in range(N): x = X[i] y = Y[i] # Calculate output yhat = w * x + b # Update weights w += learning_rate * (y - yhat) * x b += learning_rate * (y - yhat) return w, b # Example X = np.array([1, 2, 3]) Y = np.array([1, 2, 3]) w, b = sgd_model(X, Y, 0, 0, 0.01, 1000) yhat = w * X + b"},{"prompt":"Build a reinforcement learning agent in Python using OpenAI gym that can solve the CartPole environment. Not applicable","completion":"import gym import numpy as np # Set up the environment env = gym.make('CartPole-v1') env.reset() # Define the hyperparameters learning_rate = 0.01 discount = 0.95 episodes = 5000 # Discretize the state space of the environment NUMBER_OF_BUCKETS = (1, 1, 6, 3) # (x, x', theta, theta') state_bounds = list(zip(env.observation_space.low, env.observation_space.high)) state_bounds[1] = [-0.5, 0.5] # Limit x velocity as it only goes from -0.5 to 0.5 state_bounds[3] = [-math.radians(50), math.radians(50)] # Limit theta as it goes from -50 to 50 degrees # Create the Q-table q_table = np.zeros(NUMBER_OF_BUCKETS + (env.action_space.n,)) # Train the agent for episode in range(episodes): done = False state = env.reset() # Discretize the state state_discrete = [np.digitize(s, bins=bounds) for s, bounds in zip(state, state_bounds)] # Repeat until the episode is done while not done: # Choose an action action = np.argmax(q_table[state_discrete]) # Perform the action state, reward, done, _ = env.step(action) # Discretize the new state state_discrete = [np.digitize(s, bins=bounds) for s, bounds in zip(state, state_bounds)] # Update the Q-table q_table[state_discrete + (action,)] = reward + discount * np.max(q_table[state_discrete]) # Print out the Q-table print(q_table)"},{"prompt":"Create a function in Python to find the longest substring with at least k distinct characters. string = abcbbbbcccbdddadacb k = 3","completion":"def longest_substring(string, k): start, distinct, max_length = 0, 0, 0 frequency = {} for end in range(len(string)): frequency[string[end]] = frequency.get(string[end], 0) + 1 if frequency[string[end]] == 1: distinct += 1 while distinct > k: frequency[string[start]] -= 1 if frequency[string[start]] == 0: distinct -= 1 start += 1 max_length = max(max_length, end - start + 1) return max_length print(longest_substring(string, k))"},{"prompt":"Perform sentiment analysis on a given text using Python. This movie was an amazing experience!","completion":"from textblob import TextBlob text = \\"This movie was an amazing experience!\\" blob = TextBlob(text) print(\\"Sentiment score: \\", blob.sentiment.polarity)"},{"prompt":"Write a Python program that can compare two lists of integers and identify any elements that appear in both lists.","completion":"def find_common_elements(list1, list2): common_elements = [] for e1 in list1: for e2 in list2: if e1 == e2: common_elements.append(e1) return common_elements list1 = [1, 2, 3, 4, 5] list2 = [2, 4, 6, 8] print(find_common_elements(list1, list2))"},{"prompt":"Write a Python program to remove all whitespace from a string. The quick brown fox jumps over the lazy dog","completion":"text_without_whitespace = \\"\\".join(text.split())"},{"prompt":"Generate a REST API in Python that checks if a given email is valid or not. Not applicable","completion":"import re from flask import Flask, jsonify app = Flask(__name__) @app.route(\\"/emailcheck/<string:email>\\", methods=['GET']) def validate_email(email): if re.match(r\\"^[A-Za-z0-9.+_-]+@[A-Za-z0-9._-]+.[a-zA-Z]*\\", email): return jsonify({'email': email, 'valid': True}) else: return jsonify({'email': email, 'valid': False}) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Generate a SQL query in Python to find the sum of numbers in a given dataset. Input data: [[1, 2], [3, 4], [5, 6]]","completion":"import pandas as pd df = pd.DataFrame([[1, 2], [3, 4], [5, 6]]) query = 'SELECT SUM(NUM1 + NUM2) AS SUM_NUM FROM df' sum_num = pd.read_sql_query(query, con=df.to_sql('df')) print(sum_num)"},{"prompt":"Classify the following text as valid or invalid python code sum = 0 sum = sum + 2","completion":"Valid"},{"prompt":"Design a program in Python which takes an array of words as input and return an alphabetically ordered array of the words. [apple,banana,grapes]","completion":"def sortAlphabetically(arr): arr.sort() return arr print(sortAlphabetically([\\"apple\\",\\"banana\\",\\"grapes\\"]))"},{"prompt":"mplement a Python function that takes a list of numbers as an input and counts the number of odd numbers in the list. [2, 3, 5, 7]","completion":"def countOddNumbers(arr): count = 0 for num in arr: if num % 2 != 0: count += 1 return count count = countOddNumbers([2, 3, 5, 7]) print(\\"Number of odd numbers found: \\" + str(count))"},{"prompt":"Create a classifier in Python using Logistic Regression on an input dataset with two columns: 'height' and 'weight'. height weight 1.8 80 1.9 87 1.7 75 1.8 70 1.6 60","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # Load data data = pd.read_csv(\\"data.csv\\") # Split data into training and test sets X = data[['height', 'weight']] y = data['target'] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Train model model = LogisticRegression() model.fit(X_train, y_train) # Evaluate model score = model.score(X_test, y_test) print(\\"Model Accuracy: {:.2f}\\".format(score))"},{"prompt":"Use OOP design principles to create a Python class for a house.","completion":"class House(object): def __init__(self, num_rooms, square_feet, num_floors): self.num_rooms = num_rooms self.square_feet = square_feet self.num_floors = num_floors def get_info(self): # return house info return \\"This house has {} rooms, is {} square feet, and has {} floors.\\".format(self.num_rooms, self.square_feet, self.num_floors)"},{"prompt":"Create a Python program for performing a linear search on a given array of values. Not applicable","completion":"def linear_search(arr, x): for i in range (0, len(arr)): if arr[i] == x: return i return -1 # Test array arr = [ 2, 3, 4, 10, 40 ] x = 10 # Function call result = linear_search(arr, x) if(result == -1): print(\\"Element is not present in array\\") else: print(\\"Element is present at index\\", result)"},{"prompt":"Create a Python function to find the Levenshtein distance between two strings. Two strings: sandy and sunday.","completion":"def levenshteinDistance(str1, str2): n = len(str1) m = len(str2) dp = [[0 for x in range(m + 1)] for x in range(n + 1)] # Fill d[][] in bottom up manner for i in range(n + 1): for j in range(m + 1): # If first string is empty if i == 0: dp[i][j] = j # If second string is empty elif j == 0: dp[i][j] = i # If last characters are same elif str1[i-1] == str2[j-1]: dp[i][j] = dp[i-1][j-1] # If last characters are not same else: dp[i][j] = 1 + min(dp[i][j-1], # try adding to the right dp[i-1][j], # try deleting dp[i-1][j-1]) # try changing return dp[n][m]"},{"prompt":"Use Python to generate a random number between 5 and 20 (inclusively).","completion":"import random x = random.randint(5, 20) print(x)"},{"prompt":"Write a Python program to find the maximum and minimum of three numbers.","completion":"def findMinMax(num1, num2, num3): if num1 >= num2 and num1 >= num3: maximum = num1 minimum = num3 if num3 <= num2 else num2 elif num2 >= num1 and num2 >= num3: maximum = num2 minimum = num1 if num1 <= num3 else num3 else: maximum = num3 minimum = num1 if num1 <= num2 else num2 return (maximum, minimum) num1 = int(input(\\"Enter first number: \\")) num2 = int(input(\\"Enter second number: \\")) num3 = int(input(\\"Enter third number: \\")) maximum, minimum = findMinMax(num1, num2, num3) print(\\"Maximum of three numbers is:\\", maximum) print(\\"Minimum of three numbers is:\\", minimum)"},{"prompt":"Create a Python program that uses the NLTK package to classify a sentence as negative or positive. Sentence: The flight was really terrible.","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer sentence = 'The flight was really terrible.' # Initialize the sentiment analyzer sia = SentimentIntensityAnalyzer() # Use the sentiment analyzer to classify the sentence scores = sia.polarity_scores(sentence) # Print the result print(scores[\\"compound\\"] > 0.0) # Output: False"},{"prompt":"Generate Python code to find numbers that are multiples of both 3 and 5 between 0 and 100. Not applicable","completion":"# List of numbers which are multiples of both 3 and 5 between 0 and 100 multiples_3_5 = [] # Iterate over all numbers between 0 and 100 for num in range(101): # Check for multiples of both 3 and 5 if num % 3 == 0 and num % 5 == 0: multiples_3_5.append(num) print(multiples_3_5)"},{"prompt":"Generate a function in Python that returns a random element from a given list. [cat, dog, bird]","completion":"import random def getRandomElement(list): random_index = random.randint(0,len(list)-1) return list[random_index] list = [\\"cat\\", \\"dog\\", \\"bird\\"] random_element = getRandomElement(list) print(random_element) // Output: one of [\\"cat\\", \\"dog\\", \\"bird\\"] randomly"},{"prompt":"Optimize the python code using premature optimization techniques. def foo(): a = [] for i in range(1000): a.append(i)","completion":"# optimizing python code using premature optimization techniques def foo(): a = [i for i in range(1000)]"},{"prompt":"Write python code to detect a palindrome word = noon","completion":"def is_palindrome(word): # reverse the string rev = word[::-1] # check if the string is equal to its reverse if word == rev: return True return False is_palindrome(\\"noon\\") # returns True"},{"prompt":"Write a Python program to find the length of the longest increasing subsequence in a given array. [3, 4, 2, 1, 7]","completion":"def longest_increasing_subsequence(arr): length = len(arr) lis = [1] * length for i in range(1, length): for j in range(0, i): if arr[i] > arr[j] and lis[i] < lis[j] + 1: lis[i] = lis[j] + 1 return max(lis) result = longest_increasing_subsequence([3, 4, 2, 1, 7]) print(result)"},{"prompt":"Write a Python program to remove all duplicates from a list.","completion":"def remove_dups(lst): return list(dict.fromkeys(lst))"},{"prompt":"Create a Python program to swap the first and last items in a list. items = [1, 2, 3, 4]","completion":"def swap(items): temp = items[0] items[0] = items[-1] items[-1] = temp return items"},{"prompt":"Create a neural network model in Python that classifies movie reviews as positive or negative.","completion":"import numpy as np from keras.preprocessing import sequence from keras.models import Sequential from keras.layers import Dense from keras.layers import Embedding from keras.layers import GlobalAveragePooling1D max_words = 1000 # load dataset (x_train, y_train), (x_test, y_test) = keras.datasets.imdb.load_data(num_words=max_words) # convert to one-hot x_train = sequence.pad_sequences(x_train, maxlen=max_words) x_test = sequence.pad_sequences(x_test, maxlen=max_words) # define the model model = Sequential() model.add(Embedding(max_words, 32)) model.add(GlobalAveragePooling1D()) model.add(Dense(1, activation = 'sigmoid')) # compile the model model.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics = ['accuracy']) # fit the model model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10, batch_size=128)"},{"prompt":"Generate a Python program that takes a number as input and calculates its sum of digits. Number: 123","completion":"n = 123 sum_of_digits = 0 while n > 0: digit = n % 10 sum_of_digits += digit n //= 10 print(\\"Sum of digits in 123 is:\\", sum_of_digits)"},{"prompt":"Write a Python program to remove the nth index character from a nonempty string. String: Hello world!, index: 5","completion":"def remove_character(string, index): return string[:index] + string[index+1:] input_string = 'Hello World!' index = 5 print(remove_character(input_string, index))"},{"prompt":"Generate a Python function that takes an array of elements and finds the frequency of each element [1,4,1,4,4,4,9,7]","completion":"def count_frequency(l): frequencies = {} for i in l: if i in frequencies: frequencies[i] += 1 else: frequencies[i] = 1 return frequencies l = [1,4,1,4,4,4,9,7] print(count_frequency(l))"},{"prompt":"Write a python program to a calculate the area of a circle given its radius. radius = 8","completion":"import math radius = 8 area = math.pi * radius * radius print(area)"},{"prompt":"Generate a Python script to scrub a list of emails for invalid entries.","completion":"\\"\\"\\" Generate a Python script to scrub a list of emails for invalid entries \\"\\"\\" import re def validate_email(email): # Create the regex email_regex = re.compile(r'[w.-]+@[w.-]+.w+') # Check whether the email is valid is_valid = email_regex.match(email) # Return the result return is_valid def scrub_emails(emails): # Initialize a list for valid emails valid_emails = [] # Loop over the emails and validate them for email in emails: # Check if the email is valid is_valid = validate_email(email) # If valid, append to the list if is_valid: valid_emails.append(email) # Return the list of valid emails return valid_emails"},{"prompt":"Create a program in Python to print the numbers from 1 to 50 which are divisible by 3 and are even.","completion":"for num in range(2, 51): if num % 3 == 0 and num % 2 == 0: print(num)"},{"prompt":"Generate a Python program that returns the smallest even number in a given list nums = [5, 7, 9, 8, 4]","completion":"def find_smallest_even(nums): smallest = None for num in nums: if (num % 2 == 0) and (smallest == None or num < smallest): smallest = num return smallest"},{"prompt":"mplement a function in Python for finding the maximum element in an array. list = [18, 25, 1, 12, 37]","completion":"def find_max(list): max_element = list[0] for element in list: if element > max_element: max_element = element return max_element max = find_max(list) print(max)"},{"prompt":"Generate code to construct a decision tree in Python.","completion":"from sklearn.tree import DecisionTreeClassifier #Initialize the model model = DecisionTreeClassifier(random_state=1) # fit the model model.fit(X, y) # predict the target for test set model.predict(X_test)"},{"prompt":"Write two Python functions. The first function should take in a list of strings and return the most common string. The second function should take in a list of integers and return the most common integer. words = ['cat', 'dog', 'fish', 'cat', 'mouse', 'dog'] numbers = [1, 2, 3, 4, 5, 6, 7, 3, 3, 4]","completion":"def most_common_string(word_list): return max(set(word_list), key=word_list.count) def most_common_integer(int_list): return max(set(int_list), key=int_list.count)"},{"prompt":"Create a simple python script to parse a given JSON string and print all the keys and their corresponding values. {name: John, age: 30, city: New York}","completion":"import json json_str = '{\\"name\\": \\"John\\", \\"age\\": 30, \\"city\\": \\"New York\\"}' json_data = json.loads(json_str) for key, value in json_data.items(): print('{}: {}'.format(key, value))"},{"prompt":"Design a program in Python to classify data into one of two categories data = [4, 5, 8, 1, 9]","completion":"def classify_data(data): if data[0] <= 5: return 'Category A' else: return 'Category B' x = classify_data([4, 5, 8, 1, 9]) print(x)"},{"prompt":"Create a Python script that orders a list of strings alphabetically from a to z. [Banana, Apple, Orange, Pear]","completion":"def sort_list(list): list.sort() return list sorted_list = sort_list([\\"Banana\\", \\"Apple\\", \\"Orange\\", \\"Pear\\"]) print(sorted_list)"},{"prompt":"Create a Python script to solve a pathfinding problem using the A* algorithm. N, M = 6, 8 source = (1, 0) target = (4, 6) obstacle_coords = [(2, 4), (3, 3)] # 0 stands for open node, 1 for obstacle matrix = [ [0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], ]","completion":"import numpy as np # define the number of rows and columns N, M = 6, 8 # define the start and target nodes source = (1, 0) target = (4, 6) # list of obstacles obstacle_coords = [(2, 4), (3, 3)] # define the data representing open nodes/obstacles # 0 stands for open node, 1 for obstacle matrix = [ [0, 0, 0, 0, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], ] # convert the matrix to a NumPy array nodeInfo = np.array(matrix) # define the A* algorithm def aStar(openNodes, source, target): # repeat until there are no more open nodes while openNodes: # sort the nodes according to their heuristic scores openNodes.sort(key=lambda x: x.cost + x.heuristic) # get current node (lowest score) current_node = openNodes.pop(0) # check if target is reached if current_node == target: path = [] current = current_node while current is not None: path.append(current.position) current = current.parent return path[::-1] # get all neighbours for neighbour in current_node.neighbours: new_cost = current_node.cost + current_node.distance(neighbour) # determine if neighbour is in closed or open set if neighbour in closedSet: if neighbour.cost > new_cost: closedSet.remove(neighbour) neighbour.cost = new_cost neighbour.parent = current_node heappush(openNodes, neighbour) elif neighbour in openSet: if neighbour.cost > new_cost: neighbour.cost = new_cost neighbour.parent = current_node else: neighbour.cost = new_cost neighbour.parent = current_node heappush(openNodes, neighbour) closedSet.append(current_node)"},{"prompt":"Find the intersection of two given sets using Python Set1 = [1, 2, 3, 4, 5] Set2 = [3, 4, 5, 6, 7]","completion":"Set1 = [1, 2, 3, 4, 5] Set2 = [3, 4, 5, 6, 7] # intersection intersection_set = set(Set1) & set(Set2) # Printing intersection print(\\"Intersection is :\\", intersection_set) # output Intersection is : {3, 4, 5}"},{"prompt":"Create a python program to ask the user to enter three numbers and add the two smallest of them","completion":"# Take three numbers from the user Num1 = int(input(\\"Enter first number: \\")) Num2 = int(input(\\"Enter second number: \\")) Num3 = int(input(\\"Enter third number: \\")) # Find the two smallest numbers def two_smallest_nums(Num1, Num2, Num3): smallest_num = min(Num1, Num2, Num3) mid_num = max( min( Num1, Num2 ), min( Num2, Num3 ) ) largest_num = max(Num1, Num2, Num3) # Add the two smallest numbers result = smallest_num + mid_num return result sum_result = two_smallest_nums(Num1, Num2, Num3) print(\\"sum of two smallest numbers = \\", sum_result)"},{"prompt":"This code retrieves the status of various devices from Verisure and updates the corresponding devices in Domoticz. To use this code, you need to have a Verisure account and a Domoticz installation. Make sure that the necessary libraries are installed and that the paths to the configuration files are correct. Once the code is executed, it will log in to Verisure, retrieve the status of the alarm, smartplugs, and climate devices, and update the corresponding devices in Domoticz. The code will run every \`frequency\` seconds, as specified in the configuration file.","completion":"#!/usr/bin/python # -*- coding: utf-8 -*- import domoticz as d import sys import time sys.path.insert(0, '/opt/python-verisure/') import verisure import pickle import pytz import urllib3 import certifi from datetime import datetime from tzlocal import get_localzone debug = False try: execfile(\\"/etc/domoticz/scripts.conf\\") except: exec(open(\\"/etc/domoticz/scripts.conf\\").read()) d.log(\\"Getting status from Verisure...\\") if int(time.time()) % frequency < 60 : #Login try: f = open(mypagesSession, 'rb') myPages = pickle.load(f) f.close() except: myPages = verisure.Session(email, verisurepass) myPages.login() f = open(mypagesSession, 'wb') pickle.dump(myPages, f) f.close() if debug: d.log(\\"Loading file failed.\\") #Get overview try: overview = myPages.get_overview() except: myPages = verisure.Session(email, verisurepass) myPages.login() f = open(mypagesSession, 'wb') pickle.dump(myPages, f) f.close() overview = myPages.get_overview() if debug: d.log(\\"Session was timed out\\") #Alarm status = overview['armState']['statusType'] if debug: d.log(\\"Verisure Alarm status: \\", status ) device = d.devices[atHome] if status == \\"DISARMED\\" or status == \\"ARMED_HOME\\": device.on() else: device.off() #Smartplugs for i in overview['controlPlugs']: if debug: d.log(\\"Verisure Smartplug status for \\" + i['area'].encode(\\"utf-8\\",\\"ignore\\") + \\": \\", i['currentState'] ) device = d.devices[i['area'].encode(\\"utf-8\\",\\"ignore\\")] if i['currentState'] == \\"ON\\": device.on() else: device.off() #Climate for i in overview['climateValues']: device = d.devices[i['deviceArea'].encode(\\"utf-8\\",\\"ignore\\")] domlastupdate = datetime.strptime(device.last_update_string, '%Y-%m-%d %H:%M:%S') verilastupdate = datetime.strptime(i['time'][:-5], '%Y-%m-%dT%H:%M:%S') verilastupdate = verilastupdate.replace(tzinfo=pytz.UTC) verilastupdate = verilastupdate.astimezone(get_localzone()) verilastupdate = verilastupdate.replace(tzinfo=None) if debug: d.log(\\"Domoticz last update of \\" + device.name + \\": \\" + str(domlastupdate)) d.log(\\"Verisure last update of \\" + device.name + \\": \\" + str(verilastupdate)) if verilastupdate > domlastupdate: if debug: d.log(\\"update domoticz climate device \\" + device.name) if debug: d.log(\\"time: \\" + i['time'] ) d.log(\\"location: \\" + i['deviceArea'].encode(\\"utf-8\\",\\"ignore\\") ) d.log(\\"serial: \\" + i['deviceLabel'] ) d.log(\\"temperature: \\" + str(i['temperature'])) if 'humidity' in i: if debug: d.log(\\"humidity: \\" + str(i['humidity'])) if i['humidity'] < 20: comf = 2 if i['humidity'] >= 20 and i['humidity'] <= 35: comf = 0 if i['humidity'] > 35 and i['humidity'] <= 75: comf = 1 if i['humidity'] > 75: comf = 3 url = baseurl + \\"type=command&param=udevice&idx=\\" + climate[i['deviceArea'].encode(\\"utf-8\\",\\"ignore\\")] + \\"&nvalue=0&svalue=\\" + str(i['temperature']) + \\";\\" + str(i['humidity']) + \\";\\" + str(comf) else: url = baseurl + \\"type=command&param=udevice&idx=\\" + climate[i['deviceArea'].encode(\\"utf-8\\",\\"ignore\\")] + \\"&nvalue=0&svalue=\\" + str(i['temperature']) if debug: d.log('URL: ' + url) http = urllib3.PoolManager(cert_reqs='CERT_REQUIRED', ca_certs=certifi.where()) r = http.request('GET', url, timeout=2.5) if debug: d.log(\\"Status code: \\" + str(r.status) + \\"n\\" + r.data) if r.status != 200: d.log(\\"Error updating temp in Domoticz. HTTP code: \\" + str(r.status) + \\" \\" + r.data) else: if debug: d.log(\\"Only runs every \\" + str(frequency/60) + \\" min.\\") d.log(\\"done getting status from Verisure\\")"},{"prompt":"Create a Python list containing numbers 8 to 100 in increments of 8.","completion":"my_list = [8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 100]"},{"prompt":"Create a Python module that stores information about books (title, author and year). It should allow you to add, delete and search for books. Not applicable","completion":"class Book: def __init__(self, title, author, year): self.title = title self.author = author self.year = year def __str__(self): return f'{self.title} by {self.author} ({self.year})' class BookDB: def __init__(self): self.books = [] def add_book(self, book): self.books.append(book) def delete_book(self, title): self.books = [book for book in self.books if book.title != title] def search_book(self, title): for book in self.books: if book.title == title: return book return None"},{"prompt":"Given a list of words, write a Python program to generate all valid anagrams. Pytho","completion":"def generate_anagrams(words): anagrams = [] for word in words: anagrams_list = [] if len(word) == 1: return [word] for anagram in generate_anagrams(words.difference({word})): for i in range(len(word)): anagrams_list.append(anagram[:i]+ word[0] + anagram[i:]) anagrams += anagrams_list return anagrams words = set(['python', 'typhon']) print(generate_anagrams(words)) # Output: ['typhon', 'python', 'hynopt', 'ptyhon']"},{"prompt":"Write a Python program to print the following string pattern. *__*__*","completion":"for i in range(3): for j in range(3): if (i == j) or (i + j == 2): print('*', end=\\"\\") else: print('_', end=\\"\\") print()"},{"prompt":"Write a Python program to vertically center an aligned text by inserting padding spaces above and bottom of the text. 'Hello World!'","completion":"space = \\" \\" * 10 lines = inp.split('n') padded = 'n'.join(space + line + space for line in lines) print(padded)"},{"prompt":"Can you create a program that reads two numbers from the user and outputs the two numbers in descending order?","completion":"# Python program def main(): num1 = int(input(\\"Enter the first number: \\")) num2 = int(input(\\"Enter the second number: \\")) # use max and min functions to output the numbers in descending order print(max(num1, num2)) print(min(num1, num2)) if __name__ == \\"__main__\\": main()"},{"prompt":"Construct a recursive algorithm in Python that finds the maximum number in a list. [3, 9 ,7, 6]","completion":"def find_maximum(list): # Base case if len(list) == 1: return list[0] # Recursive case else: sub_max = find_maximum(list[1:]) # Compare the sub_maximum with the first # element of the list and return the # maximum of the two return max(list[0], sub_max) # Driver Code list = [3, 9, 7, 6] print(find_maximum(list))"},{"prompt":"Develop a program in Python to find the count of all prime numbers between two given numbers. start_number = 10 end_number = 20","completion":"def count_primes(start_number, end_number): count = 0 for i in range (start_number, end_number+1): is_prime = True for j in range (2, i-1): if i % j == 0: is_prime = False if is_prime: count += 1 return count"},{"prompt":"Write a Python script to access the Twitter API and retrieve the profile information of a given user. Username to search for: @twitter","completion":"# Install packages import tweepy import requests # Access Twitter API consumer_key = 'YOUR_CONSUMER_KEY' consumer_secret = 'YOUR_CONSUMER_SECRET' access_token = 'YOUR_ACCESS_TOKEN' access_token_secret = 'YOUR_ACCESS_TOKEN_SECRET' # Set up authorization auth = tweepy.OAuthHandler(consumer_key, consumer_secret) auth.set_access_token(access_token, access_token_secret) # Set up the API api = tweepy.API(auth) # Retrieve information username = \\"@twitter\\" user = api.get_user(username) print(\\"Name: \\"+user.name) print(\\"Location: \\"+user.location) print(\\"Followers count: \\"+str(user.followers_count)) print(\\"Profile picture: \\"+user.profile_image_url)"},{"prompt":"Create a for loop in Python to iterate over a list of strings and print each one.","completion":"strings = [\\"string1\\", \\"string2\\", \\"string3\\"] for s in strings: print(s)"},{"prompt":"Generate code in Python to remove a given element from a given list. List: [2, 3, 4, 5, 6] Element to remove: 5","completion":"list = [2, 3, 4, 5, 6] list.remove(5)"},{"prompt":"What is the Python code to display the top five random numbers in the range [1, 15] N/","completion":"import random for _ in range(5): print(random.randint(1, 15))"},{"prompt":"Generate a Python function to find the RMS (root mean square) of a list of numbers.","completion":"def rms(lst): sum_sq = 0 for n in lst: sum_sq += n*n return (sum_sq/len(lst))**0.5"},{"prompt":"Given a string, write a Python program to count the number of words in it. This is an example string.","completion":"def count_words(sentence): words = sentence.split(' ') count = 0 for word in words: if word != '': count+=1 return count sentence = \\"This is an example string.\\" print(count_words(sentence))"},{"prompt":"Create a function in Python that takes an array of integers and prints out the largest and smallest numbers.","completion":"def print_min_max(arr): min_val = min(arr) max_val = max(arr) print('Smallest number: ', min_val) print('Largest number: ', max_val)"},{"prompt":"Develop an algorithm in Python that finds the most frequent word in a string. String: This is a sample string","completion":"def most_frequent(input_string): # split the string into words & get each word's frequency splitted_string = input_string.split() freq_table = {} for words in splitted_string: if words in freq_table: freq_table[words] += 1 else: freq_table[words] = 1 # find the most frequent word most_freq_word = '' most_freq_count = 0 for words in freq_table: if freq_table[words] > most_freq_count: most_freq_word = words most_freq_count = freq_table[words] return most_freq_word # Driver program input_string = \\"This is a sample string\\" print(most_frequent(input_string))"},{"prompt":"Generate an efficient code for 3sum problem. Given an array of integers, find all unique triplets that sum up to 0.","completion":"# Python program to find all unique triplets that sum up to 0 def find_triplets(arr): result = [] n = len(arr) # Sort the array arr.sort() # Fix the first element # and find other two elements for i in range(0,n-1): # Fix the second element and # find the third l = i + 1 r = n - 1 while (l < r): sum = arr[i] + arr[l] + arr[r] if sum == 0: result.append([arr[i],arr[l],arr[r]]) l+=1 r-=1 # If the sum is lesser # than zero, then increase # the left bound elif (sum < 0): l+=1 # If the sum is greater # then decrease the right bound else: r-=1 return result # Driver code if __name__ == \\"__main__\\": arr = [-3, 0, 1, 2, -1, 1, -2] result = find_triplets(arr) print(result)"},{"prompt":"Build a Python script to compare two strings and determine which string is the longest. HellonWorld","completion":"def longest(str1, str2): if len(str1) > len(str2): return str1 elif len(str2) > len(str1): return str2 else: return 'Strings are equal length.' str1 = 'Hello' str2 = 'World' print(longest(str1, str2)) # Output: World"},{"prompt":"Create a python program to check the length of a given string","completion":"def check_length(string): return len(string)"},{"prompt":"Develop a python program to automate the complex process of creating a dictionary of keyvalue pairs","completion":"students = {} for i in range(num_students): student_id = input('Please enter student_id ') student_details = input('Please enter student details ') students[student_id] = student_details print(students)"},{"prompt":"Create a machine learning model in Python that can predict credit card defaults. sample dataset containing attributes such as age, income, credit history etc.","completion":"from sklearn.linear_model import LogisticRegression from sklearn.model_selection import train_test_split from sklearn.preprocessing import MinMaxScaler # Load the data data = pd.read_csv('credit_default.csv') # Separate the features and target X = data.drop('default', axis=1) y = data['default'] # Split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123) # Scale the data scaler = MinMaxScaler() X_train = scaler.fit_transform(X_train) X_test = scaler.transform(X_test) # Build the model model = LogisticRegression() model.fit(X_train, y_train) # Predict the target y_pred = model.predict(X_test) # Evaluate the model accuracy = model.score(X_test, y_test) print('Model accuracy: {:.2f}%'.format(accuracy*100))"},{"prompt":"Construct a single line of code in python to get the last element of a list [1, 8, 3, 10, 5]","completion":"last_element = [1, 8, 3, 10, 5][-1]"},{"prompt":"Using Python, create an algorithm to identify all prime numbers between 1 and 100.","completion":"primes = [] for num in range(2, 101): is_prime = True for i in range(2, num): if (num % i == 0): is_prime = False break if is_prime: primes.append(num) print(primes)"},{"prompt":"Create a Python program to create a dictionary whose keys are all of the unique characters in a text and the value is the number of times each character appears. text = Hello world!","completion":"def character_count(text): char_dict = {} for char in text: if char in char_dict: char_dict[char] += 1 else: char_dict[char] = 1 return char_dict result = character_count(text) print(result)"},{"prompt":"Design a project in which you have to use Python to scrape and parse websites.","completion":"# This project focuses on scraping and parsing websites using Python. # Scraping # First, we will use Python's requests library to scrape the websites of interest. This will allow us to access the HTML content of the websites which can then be parsed using Python's Beautiful Soup library. # Parsing # We will then use Beautiful Soup to parse the HTML content. We will extract the data from the HTML content and store it in a data structure for further processing. # Further Processing # We can then use the data to do further processing. This could include extracting specific text, analyzing the data, or visualizing the data."},{"prompt":"Write a Python function to check if two given strings are anagrams or not. An anagram is two phrases or sentences that use the same exact letters and line up one letter to another.","completion":"def is_anagram(str1, str2): # Get oder of the strings str1_order = sorted(str1) str2_order = sorted(str2) # Compare the order of strings if (str1_order == str2_order): return True return False"},{"prompt":"Write a Python program to determine the maximum value in a dictionary. { Potato: 1, Onion: 3, Carrot: 2 }","completion":"def get_max_value(dictionary): max_value = 0 for k, v in dictionary.items(): if v > max_value: max_value = v return max_value print(get_max_value({ \\"Potato\\": 1, \\"Onion\\": 3, \\"Carrot\\": 2 })) #prints 3"},{"prompt":"Create a function to identify a prime number in Python.","completion":"def is_prime(n): if n <= 1: return False for i in range(2, n): if n % i == 0: return False return True"},{"prompt":"Generate a python function to classify iris flowers.","completion":"\\"\\"\\" Generate a python function to classify iris flowers \\"\\"\\" import numpy as np from sklearn import neighbors def classify_iris(data): \\"\\"\\"Classifies the input data into one of the three species of iris flower. :param data: The data to be classified as an (N, 4) array of floats :returns: An array (N, ) of strings representing the species of the data \\"\\"\\" # Train the model x_train, y_train = get_iris_training_data() model = neighbors.KNeighborsClassifier() model.fit(x_train, y_train) # Classify the input data predictions = model.predict(data) return predictions def get_iris_training_data(): \\"\\"\\"Read the iris training and target data from a file :returns: Two NumPy arrays representing the training data and target values \\"\\"\\" x = np.genfromtxt('data/iris/x_train.csv', delimiter=',') y = np.genfromtxt('data/iris/y_train.csv', delimiter=',', dtype=str) return x, y"},{"prompt":"Write a Python program for a given list of numbers to generate a new sorted list containing only the even numbers in the list.","completion":"def get_even_list(list): \\"\\"\\" Generate a new sorted list containing only the even numbers in a given list. list: the list to be checked \\"\\"\\" even_list = [number for number in list if number % 2 == 0] even_list.sort() return even_list"},{"prompt":"Make a menudriven program using Python to show the user options for simple calculator operations like addition, subtraction, multiplication, division, and logarithmic functions.","completion":"# Menu Driven Program print('Welcome to the Simple Calculator') # Define the calculator functions def addition(a, b): return a + b def subtraction(a, b): return a - b def multiplication(a, b): return a * b def division(a, b): return a / b def logarithm(a): return math.log(a) # Create a main loop while True: # Show the user the options print('1. Addition') print('2. Subtraction') print('3. Multiplication') print('4. Division') print('5. Logarithm') print('6. Quit') # Ask the user to choose choice = int(input('Choose a number from 1 to 6: ')) # Create a condition for each calculator function if choice == 1: # Addition a = float(input('Enter the first number: ')) b = float(input('Enter the second number: ')) print('Result: {}'.format(addition(a, b))) elif choice == 2: # Subtraction a = float(input('Enter the first number: ')) b = float(input('Enter the second number: ')) print('Result: {}'.format(subtraction(a, b))) elif choice == 3: # Multiplication a = float(input('Enter the first number: ')) b = float(input('Enter the second number: ')) print('Result: {}'.format(multiplication(a, b))) elif choice == 4: # Division a = float(input('Enter the first number: ')) b = float(input('Enter the second number: ')) print('Result: {}'.format(division(a, b))) elif choice == 5: # Logarithm a = float(input('Enter the first number: ')) print('Result: {}'.format(logarithm(a))) elif choice == 6: # Quit print('Thank you for using the Simple Calculator.') break else: # Invalid number print('Please enter a valid number')"},{"prompt":"Generate a python program to assign each row of a 2D array to a variable. <No input>","completion":"def assign_variables(matrix): # Create an empty list to contain all the row variables variables = [] # Iterate over the matrix for row in matrix: # Assign each row to a variable rowVar = row # Add the row variable to the list variables.append(rowVar) # Return the list of row variables return variables"},{"prompt":"Given two strings, write a Python program to check if they are anagrams.","completion":"def is_anagram(str1, str2): n1 = len(str1) n2 = len(str2) if n1 != n2: return 0 str1 = sorted(str1) str2 = sorted(str2) for i in range(0, n1): if str1[i] != str2[i]: return 0 return 1"},{"prompt":"Generate a Python code snippet to calculate the Levenshtein distance between two strings. Not applicable","completion":"# Calculate the Levenshtein Distance between two strings def levenshteinDistance(str1, str2): # Make sure they are the same length if len(str1) > len(str2): str1, str2 = str2, str1 # Initialize an empty matrix matrix = [[0] * (len(str2) + 1)] * (len(str1) + 1) # Fill in the first row and column for i in range(len(str1) + 1): matrix[i][0] = i for j in range(len(str2) + 1): matrix[0][j] = j # Calculate the rest of the matrix for i in range(1, len(str1) + 1): for j in range(1, len(str2) + 1): if str1[i - 1] == str2[j - 1]: cost = 0 else: cost = 1 matrix[i][j] = min(matrix[i - 1][j] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j - 1] + cost) # Return the resultant matrix return matrix[-1][-1]"},{"prompt":"Create a Python program that instantiates a class and invokes a method. class Person: def __init__(self, first_name, last_name, age): self.first_name = first_name self.last_name = last_name self.age = age def get_full_name(self): return self.first_name + + self.last_name","completion":"class Person: def __init__(self, first_name, last_name, age): self.first_name = first_name self.last_name = last_name self.age = age def get_full_name(self): return self.first_name + \\" \\" + self.last_name person = Person(\\"John\\", \\"Doe\\", 25) print(\\"Full name:\\", person.get_full_name())"},{"prompt":"Design a function in Python that takes in two parameters, x and y, and returns the sum of squares of those parameters (x^2 + y^2).","completion":"def sum_of_squares(x, y): return x**2 + y**2"},{"prompt":"Suggest a correction for the following python code to return the average of a given list of numbers. def avg(numbers): sum = 0 for n in numbers: sum = sum + n return sum","completion":"def avg(numbers): sum = 0 for n in numbers: sum = sum + n return sum / len(numbers)"},{"prompt":"Create a machine learning model in Python for classifying animal sounds. Training dataset containing labels and associated audio samples (example): Label | Audio Sample Cow | CowMooing.wav Dog | DogBarking.wav Cat | CatMeowing.wav","completion":"import wave import pandas as pd import numpy as np from scipy.io import wavfile from sklearn.model_selection import train_test_split from sklearn.ensemble import RandomForestClassifier # Load the data data = pd.read_csv(\\"dataset.csv\\") # Extract the audio samples and labels as numpy arrays samples = np.array([wavfile.read(f)[1] for f in data[\\"Audio Sample\\"]]) labels = np.array(data[\\"Label\\"]) # Split datasets into training and test X_train, X_test, y_train, y_test = train_test_split(samples, labels, test_size=0.2) # Create and train a Random Forest classifier clf = RandomForestClassifier(n_estimators=100) clf.fit(X_train, y_train) # Measure accuracy accuracy = clf.score(X_test, y_test) print('Model accuracy:', accuracy)"},{"prompt":"Create an algorithm in Python which sorts an array of numbers using the quicksort algorithm. [42,56,2,67,23,10,14,7]","completion":"def quickSort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quickSort(left) + middle + quickSort(right) unsorted_list = [42, 56, 2, 67, 23, 10, 14, 7] sorted_list = quickSort(unsorted_list) print(sorted_list)"},{"prompt":"Create a Python list in which each element is a dictionary containing customer data. [ { 'name': 'John', 'age': 21 }, { 'name': 'Minh', 'age': 24 }, { 'name': 'Linda', 'age': 18 } ]","completion":"customers = [ { 'name': 'John', 'age': 21 }, { 'name': 'Minh', 'age': 24 }, { 'name': 'Linda', 'age': 18 } ]"},{"prompt":"Devise a Python program to create a list of five random integer numbers between 100 to 100.","completion":"import random # Function to get five random numbers def getRandomNumbers(lower, upper): numbers = [] # Generate 5 numbers for _ in range(5): numbers.append(random.randint(lower, upper)) return numbers # Generate five random numbers between -100 to 100 randomNumbers = getRandomNumbers(-100, 100) print('Random Numbers = ', randomNumbers)"},{"prompt":"Generate a Python script that updates all elements of a 1D numerical array by adding 10. arr = [1, 2, 3, 4, 5]","completion":"def updateArray(arr): for i in range(len(arr)): arr[i] += 10 return arr arr = [1, 2, 3, 4, 5] arr = updateArray(arr) print(arr)"},{"prompt":"Generate a python program to create a matrix of n rows and m columns.","completion":"def create_matrix(n, m): matrix = [[0 for _ in range(m)] for _ in range(n)] return matrix"},{"prompt":"Write a Python script to print the first nonrepeating character on the screen. 'AABCDBAGRQPY'","completion":"#include <iostream> #include <string> std::string s = \\"AABCDBAGRQPY\\"; int commonChar(std::string str) { int l = str.length(); int count[length] = { 0 }; int index; int res = INT_MAX; for (int i = 0; i < l; i++) { index = str[i] - 'a'; count[index]++; if (count[index] == 1) res = i; } return res; } int main() { int index = commonChar(s); if (index == INT_MAX) std::cout << \\"Either all characters are repeating or string \\" \\"is empty\\"; else std::cout << \\"First non-repeating character is \\" << s[index]; return 0; }"},{"prompt":"Write a Python program to slice a list and store the first two elements in separate variables. [2, 4, 6, 8, 10]","completion":"list = [2, 4, 6, 8, 10] first, second = list[0], list[1] print(first) print(second)"},{"prompt":"Create a Python script that generates the Fibonacci sequence.","completion":"def fibonacci(n): if n <= 1: return n else: return fibonacci(n - 1) + fibonacci(n - 2) for n in range(10): print(fibonacci(n))"},{"prompt":"This code defines a Python class called \`BTConfiguredValuesColumnInfo1025\` that inherits from \`ModelComposed\`. It contains attributes such as \`bt_type\`, \`parent_id\`, \`parent_name\`, \`parent_type\`, \`id\`, \`node_id\`, and \`specification\`. To use this class, import it from the \`bt_configured_values_column_info1025\` module.","completion":"# coding: utf-8 \\"\\"\\" Onshape REST API The Onshape REST API consumed by all clients. # noqa: E501 The version of the OpenAPI document: 1.113 Contact: api-support@onshape.zendesk.com Generated by: https://openapi-generator.tech \\"\\"\\" from __future__ import absolute_import import re # noqa: F401 import sys # noqa: F401 import six # noqa: F401 import nulltype # noqa: F401 from onshape_client.oas.model_utils import ( # noqa: F401 ModelComposed, ModelNormal, ModelSimple, date, datetime, file_type, int, none_type, str, validate_get_composed_info, ) try: from onshape_client.oas.models import bt_configured_dimension_column_info2168 except ImportError: bt_configured_dimension_column_info2168 = sys.modules[ \\"onshape_client.oas.models.bt_configured_dimension_column_info2168\\" ] try: from onshape_client.oas.models import bt_configured_feature_column_info1014 except ImportError: bt_configured_feature_column_info1014 = sys.modules[ \\"onshape_client.oas.models.bt_configured_feature_column_info1014\\" ] try: from onshape_client.oas.models import bt_configured_parameter_column_info2900 except ImportError: bt_configured_parameter_column_info2900 = sys.modules[ \\"onshape_client.oas.models.bt_configured_parameter_column_info2900\\" ] try: from onshape_client.oas.models import bt_configured_suppression_column_info2498 except ImportError: bt_configured_suppression_column_info2498 = sys.modules[ \\"onshape_client.oas.models.bt_configured_suppression_column_info2498\\" ] try: from onshape_client.oas.models import bt_configured_values_column_info1025_all_of except ImportError: bt_configured_values_column_info1025_all_of = sys.modules[ \\"onshape_client.oas.models.bt_configured_values_column_info1025_all_of\\" ] try: from onshape_client.oas.models import bt_table_column_info1222 except ImportError: bt_table_column_info1222 = sys.modules[ \\"onshape_client.oas.models.bt_table_column_info1222\\" ] try: from onshape_client.oas.models import bt_table_column_spec1967 except ImportError: bt_table_column_spec1967 = sys.modules[ \\"onshape_client.oas.models.bt_table_column_spec1967\\" ] class BTConfiguredValuesColumnInfo1025(ModelComposed): \\"\\"\\"NOTE: This class is auto generated by OpenAPI Generator. Ref: https://openapi-generator.tech Do not edit the class manually. Attributes: allowed_values (dict): The key is the tuple path to the attribute and the for var_name this is (var_name,). The value is a dict with a capitalized key describing the allowed value and an allowed value. These dicts store the allowed enum values. attribute_map (dict): The key is attribute name and the value is json key in definition. discriminator_value_class_map (dict): A dict to go from the discriminator variable value to the discriminator class name. validations (dict): The key is the tuple path to the attribute and the for var_name this is (var_name,). The value is a dict that stores validations for max_length, min_length, max_items, min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum, inclusive_minimum, and regex. additional_properties_type (tuple): A tuple of classes accepted as additional properties values. \\"\\"\\" allowed_values = { (\\"parent_type\\",): { \\"FEATURE\\": \\"FEATURE\\", \\"INSTANCE\\": \\"INSTANCE\\", \\"MATE\\": \\"MATE\\", \\"MATE_CONNECTOR\\": \\"MATE_CONNECTOR\\", \\"UNKNOWN\\": \\"UNKNOWN\\", }, } validations = {} additional_properties_type = None @staticmethod def openapi_types(): \\"\\"\\" This must be a class method so a model may have properties that are of type self, this ensures that we don't create a cyclic import Returns openapi_types (dict): The key is attribute name and the value is attribute type. \\"\\"\\" return { \\"bt_type\\": (str,), # noqa: E501 \\"parent_id\\": (str,), # noqa: E501 \\"parent_name\\": (str,), # noqa: E501 \\"parent_type\\": (str,), # noqa: E501 \\"id\\": (str,), # noqa: E501 \\"node_id\\": (str,), # noqa: E501 \\"specification\\": ( bt_table_column_spec1967.BTTableColumnSpec1967, ), # noqa: E501 } @staticmethod def discriminator(): return { \\"bt_type\\": { \\"BTConfiguredFeatureColumnInfo-1014\\": bt_configured_feature_column_info1014.BTConfiguredFeatureColumnInfo1014, \\"BTConfiguredDimensionColumnInfo-2168\\": bt_configured_dimension_column_info2168.BTConfiguredDimensionColumnInfo2168, \\"BTConfiguredSuppressionColumnInfo-2498\\": bt_configured_suppression_column_info2498.BTConfiguredSuppressionColumnInfo2498, \\"BTConfiguredParameterColumnInfo-2900\\": bt_configured_parameter_column_info2900.BTConfiguredParameterColumnInfo2900, }, } attribute_map = { \\"bt_type\\": \\"btType\\", # noqa: E501 \\"parent_id\\": \\"parentId\\", # noqa: E501 \\"parent_name\\": \\"parentName\\", # noqa: E501 \\"parent_type\\": \\"parentType\\", # noqa: E501 \\"id\\": \\"id\\", # noqa: E501 \\"node_id\\": \\"nodeId\\", # noqa: E501 \\"specification\\": \\"specification\\", # noqa: E501 } required_properties = set( [ \\"_data_store\\", \\"_check_type\\", \\"_from_server\\", \\"_path_to_item\\", \\"_configuration\\", \\"_composed_instances\\", \\"_var_name_to_model_instances\\", \\"_additional_properties_model_instances\\", ] ) def __init__( self, _check_type=True, _from_server=False, _path_to_item=(), _configuration=None, **kwargs ): # noqa: E501 \\"\\"\\"bt_configured_values_column_info1025.BTConfiguredValuesColumnInfo1025 - a model defined in OpenAPI Keyword Args: _check_type (bool): if True, values for parameters in openapi_types will be type checked and a TypeError will be raised if the wrong type is input. Defaults to True _path_to_item (tuple/list): This is a list of keys or values to drill down to the model in received_data when deserializing a response _from_server (bool): True if the data is from the server False if the data is from the client (default) _configuration (Configuration): the instance to use when deserializing a file_type parameter. If passed, type conversion is attempted If omitted no type conversion is done. bt_type (str): [optional] # noqa: E501 parent_id (str): [optional] # noqa: E501 parent_name (str): [optional] # noqa: E501 parent_type (str): [optional] # noqa: E501 id (str): [optional] # noqa: E501 node_id (str): [optional] # noqa: E501 specification (bt_table_column_spec1967.BTTableColumnSpec1967): [optional] # noqa: E501 \\"\\"\\" self._data_store = {} self._check_type = _check_type self._from_server = _from_server self._path_to_item = _path_to_item self._configuration = _configuration constant_args = { \\"_check_type\\": _check_type, \\"_path_to_item\\": _path_to_item, \\"_from_server\\": _from_server, \\"_configuration\\": _configuration, } required_args = {} # remove args whose value is Null because they are unset required_arg_names = list(required_args.keys()) for required_arg_name in required_arg_names: if required_args[required_arg_name] is nulltype.Null: del required_args[required_arg_name] model_args = {} model_args.update(required_args) model_args.update(kwargs) composed_info = validate_get_composed_info(constant_args, model_args, self) self._composed_instances = composed_info[0] self._var_name_to_model_instances = composed_info[1] self._additional_properties_model_instances = composed_info[2] unused_args = composed_info[3] for var_name, var_value in required_args.items(): setattr(self, var_name, var_value) for var_name, var_value in six.iteritems(kwargs): if ( var_name in unused_args and self._configuration is not None and self._configuration.discard_unknown_keys and not self._additional_properties_model_instances ): # discard variable. continue setattr(self, var_name, var_value) @staticmethod def _composed_schemas(): # we need this here to make our import statements work # we must store _composed_schemas in here so the code is only run # when we invoke this method. If we kept this at the class # level we would get an error beause the class level # code would be run when this module is imported, and these composed # classes don't exist yet because their module has not finished # loading return { \\"anyOf\\": [], \\"allOf\\": [ bt_configured_values_column_info1025_all_of.BTConfiguredValuesColumnInfo1025AllOf, bt_table_column_info1222.BTTableColumnInfo1222, ], \\"oneOf\\": [], } @classmethod def get_discriminator_class(cls, from_server, data): \\"\\"\\"Returns the child class specified by the discriminator\\"\\"\\" discriminator = cls.discriminator() discr_propertyname_py = list(discriminator.keys())[0] discr_propertyname_js = cls.attribute_map[discr_propertyname_py] if from_server: class_name = data[discr_propertyname_js] else: class_name = data[discr_propertyname_py] class_name_to_discr_class = discriminator[discr_propertyname_py] return class_name_to_discr_class.get(class_name)"},{"prompt":"Construct an implementation of a linked list in Python","completion":"class Node: # Function to initialise the node object def __init__(self, data): self.data = data # Assign data self.next = None # Initialize next as null # Linked List class contains a Node object class LinkedList: # Function to initialize head def __init__(self): self.head = None"},{"prompt":"Write a Python program that generates a random string of 10 characters. Not applicable","completion":"import string import random def generate_string(length): letters = string.ascii_letters result_str = ''.join(random.choice(letters) for i in range(length)) return result_str random_string = generate_string(10) print(random_string)"},{"prompt":"Create a Python program to encrypt a message with an XOR encryption algorithm. secretmessage","completion":"def xor_encrypt(message, key): encrypted = \\"\\" for i in range(len(message)): encrypted += chr(ord(message[i]) ^ ord(key[i % len(key)])) return encrypted message = 'secretmessage' key = 'iwonttellyou' encrypted = xor_encrypt(message, key) print(encrypted) # U5m3pD1DQyN1UB1WAo9VA=="},{"prompt":"Write a Python program to find the numbers between 2000 and 3000 which are divisible by 7 and not a multiple of 5.","completion":"numbers = [] for i in range(2000, 3001): if (i%7 == 0) and (i%5 != 0): numbers.append(str(i)) print (','.join(numbers))"},{"prompt":"Create a scenario and ask to write a program to generate a random name using Python You are managing a fantasy game and you need to generate random names for new characters.","completion":"import random vowels = ['a', 'e', 'i', 'o', 'u'] constants=['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'] def generate_name(): name = \\"\\" for _ in range(2): name += random.choice(constants).capitalize() for _ in range(2): name += random.choice(vowels) name += random.choice(constants) return name print(generate_name())"},{"prompt":"Develop a Python program to delete the third element of a given list. list = [A, B, C, D, E]","completion":"# Input list list = [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"] # Deleting the third element list.pop(2) # Printing the list after deletion print(list) # Output: ['A', 'B', 'D', 'E']"},{"prompt":"Perform a sentiment analysis on a body of text using Python. text = This is a very positive sentiment!","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer text = \\"This is a very positive sentiment!\\" sentiment_analyzer = SentimentIntensityAnalyzer() scores = sentiment_analyzer.polarity_scores(text) if scores['compound'] > 0.05: print(\\"Positive sentiment!\\") else: print(\\"Negative sentiment!\\")"},{"prompt":"Write a Python program to create a Fibonacci series until nth term using recursion.","completion":"def fibonacci_series(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return fibonacci_series(n-1)+fibonacci_series(n-2) print(fibonacci_series(10))"},{"prompt":"Create a Python program to create a list of unique emails from a given list of emails, by removing any duplicates. myList = [test1@example.com, test2@example.com, test1@example.com, test3@example.com]","completion":"def remove_duplicates(myList): unique_list = [] for item in myList: if item not in unique_list: unique_list.append(item) return unique_list result = remove_duplicates(myList) print(result)"},{"prompt":"Develop an algorithm to optimize memory usage when processing large datasets in Python. A list of hundreds of thousands of records stored in the format of [ID, X, Y, Z], where ID is the row index and X, Y, and Z are the float variables.","completion":"def optimize_memory_usage(data): \\"\\"\\"Optimize memory usage when processing large datasets.\\"\\"\\" # Store ID and X, Y, Z in separate arrays ID = [] X = [] Y = [] Z = [] for row in data: ID.append(row[0]) X.append(row[1]) Y.append(row[2]) Z.append(row[3]) # Reduce data types to the most appropriate format ID = [int(x) for x in ID] X = [float(x) for x in X] Y = [float(x) for x in Y] Z = [float(x) for x in Z] # Return reshaped arrays as a single object return (ID, X, Y, Z)"},{"prompt":"Create a class in Python to store the names, addresses and age of customers.","completion":"class Customer: def __init__(self, name, age, address): self.name = name self.age = age self.address = address def get_details(self): return f'Name: {self.name} | Age: {self.age} | Address: {self.address}'"},{"prompt":"Generate a correct python program to find all paths from source to target. Given a 5node directed graph.","completion":"def find_all_paths(graph, source, target): # create a queue list to store all the paths paths = queue.Queue() # initiate the queue with the source node paths.put([source]) # create visited array to mark the visited nodes visited = [False]*len(graph) # update the source node as visited visited[source] = True # loop for finding all paths while not paths.empty(): # Get the first path from the queue path = paths.get() # get the last node from the path last_node = path[-1] # if last node is the target if last_node == target: yield path # if last node is not the target else: # iterate for the adjacent nodes in the graph for adjacent in graph.get(last_node): # check if the adjacent node is not visited if not visited[adjacent]: # create a new path, add the adjacent node # and update the visited array new_path = list(path) new_path.append(adjacent) visited[adjacent] = True # add the new path to the queue paths.put(new_path)"},{"prompt":"mplement a fuzzy search algorithm in Python which returns a set of exact and nonexact matches in a given target text. text = The quick brown fox jumps over the lazy dog word = foxs","completion":"def fuzzy_search(text, word): matches = set() for i in range(len(text)-len(word)+1): if text[i:i+len(word)] == word: matches.add(word) elif all(text[i+j] == c or text[i+j] == '*' for j, c in enumerate(word)): matches.add(text[i:i+len(word)]) return matches"},{"prompt":"Create a Python program to find the average of any list of numbers. [2, 4, 6, 8]","completion":"def get_average(numbers): # take the sum and divide by number of elements return sum(numbers)/len(numbers) input_list = [2, 4, 6, 8] result = get_average(input_list) print(result)"},{"prompt":"Create a function in Python to produce a \`\`new_list\`\` which contains substring elements from the given \`\`list\`\` list = [apple,banana,orange,carrot]","completion":"def produce_new_list(list): '''This function will return a new list containing substrings from the given list''' new_list = [] for item in list: for i in range(0, len(item)): new_list.append(item[0:i+1]) return new_list"},{"prompt":"This code sets up an argument parser with default values for several arguments. It then imports extra variables and a model from a package, and sets some variables based on the arguments. It then sets up data generators and an adversary, if specified in the arguments. Finally, it trains a classifier and/or adversary based on the arguments. To use this code, run it with the desired arguments.","completion":"#!/usr/bin/env python2.7 from argparse import ArgumentParser parser = ArgumentParser() parser.add_argument('--nepoch',type=int,default=20) parser.add_argument('--version',type=int,default=4) parser.add_argument('--trunc',type=int,default=7) parser.add_argument('--limit',type=int,default=100) parser.add_argument('--adv',type=str,default=None) parser.add_argument('--train_baseline',action='store_true') args = parser.parse_args() import extra_vars from subtlenet.models import particles as train from os import path train.NEPOCH = args.nepoch train.VERSION = str(args.version) + '_Adam' #train.OPTIMIZER = 'RMSprop' data, dims = train.instantiate(args.trunc, args.limit) clf_gen = train.setup_data(data) adv_gen = train.setup_adv_data(data) if args.adv == 'emd': opts = { 'loss' : train.emd, 'scale' : 0.1, 'w_clf' : 0.001, 'w_adv' : 100, } elif args.adv == 'mse': opts = { 'loss' : args.adv, 'scale' : 0.03, 'w_clf' : 0.001, 'w_adv' : 0.1, } else: opts = { 'loss' : args.adv, 'scale' : 0.1, 'w_clf' : 0.001, 'w_adv' : 1, } clf = train.build_classifier(dims) if args.adv is not None: adv = train.build_adversary(clf=clf, **opts) preload = '%s/%s/baseline_best.h5'%(train.MODELDIR, train._APOSTLE) if path.isfile(preload): print 'Pre-loading weights from',preload tmp_ = train.load_model(preload) clf.set_weights(tmp_.get_weights()) if args.train_baseline or not(path.isfile(preload)): train.train(clf, 'baseline', clf_gen['train'], clf_gen['validation']) if args.adv: print 'Training the full adversarial stack:' callback_params = { 'partial_model' : clf, 'monitor' : lambda x : opts['w_clf'] * x.get('val_y_hat_loss') - opts['w_adv'] * x.get('val_adv_loss'), # semi-arbitrary } train.train(adv, args.adv, adv_gen['train'], adv_gen['validation'], callback_params)"},{"prompt":"Write a Python program to check whether two strings are anagrams or not. s1 = listen s2 = silent","completion":"def is_anagram(s1, s2): s1 = s1.replace(\\" \\", \\"\\") s2 = s2.replace(\\" \\", \\"\\") if len(s1) != len(s2): return False s1_count = Counter(s1) s2_count = Counter(s2) for i in s1_count: if s1_count[i] != s2_count[i]: return False return True s1 = \\"listen\\" s2 = \\"silent\\" print(is_anagram(s1, s2)) # Output: True."},{"prompt":"Can you provide a Python code to print the largest item in a given list? [9, 2, 6, 10, 4]","completion":"# Find the largest element in a list def find_largest(lst): max_val = float('-inf') for val in lst: if val > max_val: max_val = val return max_val # Test lst = [9, 2, 6, 10, 4] print(find_largest(lst)) # 10"},{"prompt":"Create a program header to go at the beginning of every python program you complete.","completion":"\\"\\"\\" Authors: <Your Name> Filename: <file name>.py Description: <A brief description of the program> \\"\\"\\""},{"prompt":"Generate a fullstack web application using Python, JavaScript, and CSS.","completion":"# Backend # Flask application app = Flask(__name__) app.config['SECRET_KEY'] = 'secret' # Database db = SQLAlchemy(app) # Frontend # HTML template <html> <head> <title>My App</title> </head> <body> <h1>Welcome to My App</h1> <div> <p>Content here...</p> </div> </body> </html> # JavaScript // Initialize the page window.onload = function() { // Run any set up code here... } // Add event listeners document.addEventListener('DOMContentLoaded', function() { // Event listener code here... }); # CSS body { background-color: #fefefe; font-family: sans-serif; font-size: 1.2rem; line-height: 1.5; }"},{"prompt":"This code is an Ansible module for creating, reading, updating, and deleting objects in PANOS or Panorama. The module supports address objects, address groups, service objects, service groups, and tags. To use the module, provide the IP address of the device, the username and password or API key, the operation to be performed, and the object type and attributes. The module will search for, add, update, or delete the object as specified, and can commit the changes if desired. The module is compatible with PANOS and Panorama, and supports check mode.","completion":"#!/usr/bin/env python # -*- coding: utf-8 -*- # Copyright 2017 Palo Alto Networks, Inc # # Licensed under the Apache License, Version 2.0 (the \\"License\\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \\"AS IS\\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. ANSIBLE_METADATA = {'metadata_version': '1.1', 'status': ['deprecated'], 'supported_by': 'community'} DOCUMENTATION = ''' --- module: panos_object short_description: create/read/update/delete object in PAN-OS or Panorama description: - Policy objects form the match criteria for policy rules and many other functions in PAN-OS. These may include - address object, address groups, service objects, service groups, and tag. author: \\"Bob Hagen (@rnh556)\\" version_added: \\"2.4\\" requirements: - pan-python can be obtained from PyPI U(https://pypi.python.org/pypi/pan-python) - pandevice can be obtained from PyPI U(https://pypi.python.org/pypi/pandevice) deprecated: removed_in: \\"2.9\\" why: Updated to idempotent modules alternative: > Use M(panos_address_object), M(panos_address_group), M(panos_service_object), M(panos_service_group), or M(panos_tag_object) as appropriate. notes: - Checkmode is not supported. - Panorama is supported. options: ip_address: description: - IP address (or hostname) of PAN-OS device or Panorama management console being configured. required: true username: description: - Username credentials to use for authentication. required: false default: \\"admin\\" password: description: - Password credentials to use for authentication. required: true api_key: description: - API key that can be used instead of I(username)/I(password) credentials. operation: description: - The operation to be performed. Supported values are I(add)/I(delete)/I(find). required: true addressobject: description: - The name of the address object. address: description: - The IP address of the host or network in CIDR notation. address_type: description: - The type of address object definition. Valid types are I(ip-netmask) and I(ip-range). addressgroup: description: - A static group of address objects or dynamic address group. static_value: description: - A group of address objects to be used in an addressgroup definition. dynamic_value: description: - The filter match criteria to be used in a dynamic addressgroup definition. serviceobject: description: - The name of the service object. source_port: description: - The source port to be used in a service object definition. destination_port: description: - The destination port to be used in a service object definition. protocol: description: - The IP protocol to be used in a service object definition. Valid values are I(tcp) or I(udp). servicegroup: description: - A group of service objects. services: description: - The group of service objects used in a servicegroup definition. description: description: - The description of the object. tag_name: description: - The name of an object or rule tag. color: description: > - The color of the tag object. Valid values are I(red, green, blue, yellow, copper, orange, purple, gray, light green, cyan, light gray, blue gray, lime, black, gold, and brown). vsys: description: - The vsys to put the object into. - Firewall only. default: \\"vsys1\\" devicegroup: description: - The name of the (preexisting) Panorama device group. - If undefined and ip_address is Panorama, this defaults to shared. required: false default: None commit: description: - Commit the config change. default: False ''' EXAMPLES = ''' - name: search for shared address object panos_object: ip_address: '{{ ip_address }}' username: '{{ username }}' password: '{{ password }}' operation: 'find' address: 'DevNet' - name: create an address group in devicegroup using API key panos_object: ip_address: '{{ ip_address }}' api_key: '{{ api_key }}' operation: 'add' addressgroup: 'Prod_DB_Svrs' static_value: ['prod-db1', 'prod-db2', 'prod-db3'] description: 'Production DMZ database servers' tag_name: 'DMZ' devicegroup: 'DMZ Firewalls' - name: create a global service for TCP 3306 panos_object: ip_address: '{{ ip_address }}' api_key: '{{ api_key }}' operation: 'add' serviceobject: 'mysql-3306' destination_port: '3306' protocol: 'tcp' description: 'MySQL on tcp/3306' - name: create a global tag panos_object: ip_address: '{{ ip_address }}' username: '{{ username }}' password: '{{ password }}' operation: 'add' tag_name: 'ProjectX' color: 'yellow' description: 'Associated with Project X' - name: delete an address object from a devicegroup using API key panos_object: ip_address: '{{ ip_address }}' api_key: '{{ api_key }}' operation: 'delete' addressobject: 'Win2K test' ''' RETURN = ''' # Default return values ''' from ansible.module_utils.basic import AnsibleModule from ansible.module_utils.basic import get_exception try: from pan.xapi import PanXapiError import pandevice from pandevice.base import PanDevice from pandevice import panorama from pandevice import objects import xmltodict import json HAS_LIB = True except ImportError: HAS_LIB = False def get_devicegroup(device, devicegroup): dg_list = device.refresh_devices() for group in dg_list: if isinstance(group, pandevice.panorama.DeviceGroup): if group.name == devicegroup: return group return False def find_object(device, dev_group, obj_name, obj_type): # Get the firewall objects obj_type.refreshall(device) if isinstance(device, pandevice.firewall.Firewall): addr = device.find(obj_name, obj_type) return addr elif isinstance(device, pandevice.panorama.Panorama): addr = device.find(obj_name, obj_type) if addr is None: if dev_group: device.add(dev_group) obj_type.refreshall(dev_group) addr = dev_group.find(obj_name, obj_type) return addr else: return False def create_object(**kwargs): if kwargs['addressobject']: newobject = objects.AddressObject( name=kwargs['addressobject'], value=kwargs['address'], type=kwargs['address_type'], description=kwargs['description'], tag=kwargs['tag_name'] ) if newobject.type and newobject.value: return newobject else: return False elif kwargs['addressgroup']: newobject = objects.AddressGroup( name=kwargs['addressgroup'], static_value=kwargs['static_value'], dynamic_value=kwargs['dynamic_value'], description=kwargs['description'], tag=kwargs['tag_name'] ) if newobject.static_value or newobject.dynamic_value: return newobject else: return False elif kwargs['serviceobject']: newobject = objects.ServiceObject( name=kwargs['serviceobject'], protocol=kwargs['protocol'], source_port=kwargs['source_port'], destination_port=kwargs['destination_port'], tag=kwargs['tag_name'] ) if newobject.protocol and newobject.destination_port: return newobject else: return False elif kwargs['servicegroup']: newobject = objects.ServiceGroup( name=kwargs['servicegroup'], value=kwargs['services'], tag=kwargs['tag_name'] ) if newobject.value: return newobject else: return False elif kwargs['tag_name']: t = objects.Tag c = t.color_code(kwargs['color']) newobject = objects.Tag( name=kwargs['tag_name'], color=c, comments=kwargs['description'] ) if newobject.name: return newobject else: return False else: return False def add_object(device, dev_group, new_object): if dev_group: dev_group.add(new_object) else: device.add(new_object) new_object.create() return True def main(): argument_spec = dict( ip_address=dict(required=True), password=dict(no_log=True), username=dict(default='admin'), api_key=dict(no_log=True), operation=dict(required=True, choices=['add', 'update', 'delete', 'find']), addressobject=dict(default=None), addressgroup=dict(default=None), serviceobject=dict(default=None), servicegroup=dict(default=None), address=dict(default=None), address_type=dict(default='ip-netmask', choices=['ip-netmask', 'ip-range', 'fqdn']), static_value=dict(type='list', default=None), dynamic_value=dict(default=None), protocol=dict(default=None, choices=['tcp', 'udp']), source_port=dict(default=None), destination_port=dict(default=None), services=dict(type='list', default=None), description=dict(default=None), tag_name=dict(default=None), color=dict(default=None, choices=['red', 'green', 'blue', 'yellow', 'copper', 'orange', 'purple', 'gray', 'light green', 'cyan', 'light gray', 'blue gray', 'lime', 'black', 'gold', 'brown']), vsys=dict(default='vsys1'), devicegroup=dict(default=None), commit=dict(type='bool', default=False), ) module = AnsibleModule(argument_spec=argument_spec, supports_check_mode=False, required_one_of=[['api_key', 'password']], mutually_exclusive=[['addressobject', 'addressgroup', 'serviceobject', 'servicegroup', 'tag_name']] ) if not HAS_LIB: module.fail_json(msg='Missing required libraries.') ip_address = module.params[\\"ip_address\\"] password = module.params[\\"password\\"] username = module.params['username'] api_key = module.params['api_key'] operation = module.params['operation'] addressobject = module.params['addressobject'] addressgroup = module.params['addressgroup'] serviceobject = module.params['serviceobject'] servicegroup = module.params['servicegroup'] address = module.params['address'] address_type = module.params['address_type'] static_value = module.params['static_value'] dynamic_value = module.params['dynamic_value'] protocol = module.params['protocol'] source_port = module.params['source_port'] destination_port = module.params['destination_port'] services = module.params['services'] description = module.params['description'] tag_name = module.params['tag_name'] color = module.params['color'] vsys = module.params['vsys'] devicegroup = module.params['devicegroup'] commit = module.params['commit'] # Create the device with the appropriate pandevice type device = PanDevice.create_from_device(ip_address, username, password, api_key=api_key) # If Panorama, validate the devicegroup dev_group = None if hasattr(device, 'refresh_devices'): # Panorama: set the device group. if devicegroup == 'shared': # Device group of None is \\"shared\\" scope for Panorama. devicegroup = None if devicegroup is not None: dev_group = get_devicegroup(device, devicegroup) if dev_group: device.add(dev_group) else: module.fail_json(msg=''%s' device group not found in Panorama. Is the name correct?' % devicegroup) else: # Firewall: set the targetted vsys. device.vsys = vsys # What type of object are we talking about? if addressobject: obj_name = addressobject obj_type = objects.AddressObject elif addressgroup: obj_name = addressgroup obj_type = objects.AddressGroup elif serviceobject: obj_name = serviceobject obj_type = objects.ServiceObject elif servicegroup: obj_name = servicegroup obj_type = objects.ServiceGroup elif tag_name: obj_name = tag_name obj_type = objects.Tag else: module.fail_json(msg='No object type defined!') # Which operation shall we perform on the object? msg = None if operation == \\"find\\": # Search for the object match = find_object(device, dev_group, obj_name, obj_type) # If found, format and return the result if match: match_dict = xmltodict.parse(match.element_str()) module.exit_json( stdout_lines=json.dumps(match_dict, indent=2), msg='Object matched' ) else: module.fail_json(msg='Object '%s' not found. Is the name correct?' % obj_name) elif operation == \\"delete\\": # Search for the object match = find_object(device, dev_group, obj_name, obj_type) # If found, delete it if match: try: match.delete() except PanXapiError: exc = get_exception() module.fail_json(msg=exc.message) msg = \\"Object '{0}' successfully deleted\\".format(obj_name) else: module.fail_json(msg='Object '%s' not found. Is the name correct?' % obj_name) elif operation == \\"add\\": # Search for the object. Fail if found. match = find_object(device, dev_group, obj_name, obj_type) if match: module.fail_json(msg='Object '%s' already exists. Use operation: 'update' to change it.' % obj_name) else: try: new_object = create_object( addressobject=addressobject, addressgroup=addressgroup, serviceobject=serviceobject, servicegroup=servicegroup, address=address, address_type=address_type, static_value=static_value, dynamic_value=dynamic_value, protocol=protocol, source_port=source_port, destination_port=destination_port, services=services, description=description, tag_name=tag_name, color=color ) changed = add_object(device, dev_group, new_object) except PanXapiError: exc = get_exception() module.fail_json(msg=exc.message) msg = \\"Object '{0}' successfully added\\".format(obj_name) elif operation == \\"update\\": # Search for the object. Update if found. match = find_object(device, dev_group, obj_name, obj_type) if match: try: new_object = create_object( addressobject=addressobject, addressgroup=addressgroup, serviceobject=serviceobject, servicegroup=servicegroup, address=address, address_type=address_type, static_value=static_value, dynamic_value=dynamic_value, protocol=protocol, source_port=source_port, destination_port=destination_port, services=services, description=description, tag_name=tag_name, color=color ) changed = add_object(device, dev_group, new_object) except PanXapiError: exc = get_exception() module.fail_json(msg=exc.message) msg = \\"Object '{0}' successfully updated.\\".format(obj_name) else: module.fail_json(msg='Object '%s' does not exist. Use operation: 'add' to add it.' % obj_name) # Optional: commit the change. if commit: try: device.commit(sync=True) except PanDeviceError as e: module.fail_json(msg='Failed to commit: {0}'.format(e)) # Done. module.exit_json(changed=True, msg=msg) if __name__ == '__main__': main()"},{"prompt":"Generate a Python program to compare two given strings to check if they are identical or not.","completion":"def is_identical(str1, str2): if str1 == str2: return True else: return False"},{"prompt":"Create a function in Python which takes two strings and checks if they are anagrams. apple, leapp","completion":"def is_anagram(string1, string2): # Remove white spaces from strings string1 = string1.replace(\\" \\", \\"\\") string2 = string2.replace(\\" \\", \\"\\") # If strings have different length, # then they are not anagrams if len(string1) != len(string2): return False # Sort both strings string1 = sorted(string1) string2 = sorted(string2) # Compare sorted strings for i in range(0, len(string1)): if string1[i] != string2[i]: return False return True"},{"prompt":"Optimize this code snippet in Python. data = [1, 2, 3, 4, 5, 6] sum = 0 for num in data: sum = sum + num","completion":"data = [1, 2, 3, 4, 5, 6] sum = 0 sum = sum + sum(data) # This is more efficient than iterating through the whole list with a \`for\` loop."},{"prompt":"Generate a list of the first 10 Fibonacci numbers in Python.","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b # Driver Program fib_list = [] for i in range(10): fib_list.append(fibonacci(i)) print(fib_list)"},{"prompt":"Update the below Python code to run in multiprocess mode. import time def add(a, b): return a + b if __name__ == '__main__': start = time.time() result = add(2, 3) end = time.time() print(endstart)","completion":"import multiprocessing import time def add(a, b): return a + b if __name__ == '__main__': pool = multiprocessing.Pool() start = time.time() result = pool.apply_async(add, (2, 3)) pool.close() pool.join() end = time.time() print(result.get()) print(end-start)"},{"prompt":"Write a code to find the longest word in an array of strings. mywords = [Hello, World, Python, Programming]","completion":"\\"\\"\\" Write a code to find the longest word in an array of strings \\"\\"\\" mywords = [\\"Hello\\", \\"World\\", \\"Python\\", \\"Programming\\"] #Set a variable to hold the longest word longest_word = '' #Loop through the array of strings for word in mywords: #Compare the length of the current word with the longest word if len(word) > len(longest_word): #Replace the longest_word variable with the new longest word longest_word = word #Print out the result print(\\"The longest word is \\" + longest_word)"},{"prompt":"Write a Python program for a program that extracts only characters from a string. Input string: âHello world!â","completion":"def extract_characters(str): # Create an empty string extracted = \\"\\" # Iterate over each character for char in str: # Check if the character is a letter if char.isalpha(): # Append character to the result extracted += char # Return the extracted characters return extracted # Sample input str = \\"Hello world!\\" # Output print(extract_characters(str)) # Output: Helloworld"},{"prompt":"Create a python class that generates random numbers between a given range (inclusive).","completion":"import random class RandomNumberGenerator: def __init__(self, min_value, max_value): self.min_value = min_value self.max_value = max_value def generate_random_number(self): return random.randint(self.min_value, self.max_value)"},{"prompt":"Generate a program in Python to count the number of words in a string and return the results in a dictionary. Not applicable","completion":"# Function to count words def word_count(string): # Create a dictionary to store results words = {} # Split the string into words for word in string.split(): # Check if the word is in the dictionary if word in words: # Increment the count words[word] += 1 else: # Add the word to the dictionary words[word] = 1 return words # Test string = 'This is a test string to count the words in the string.' print(word_count(string)) # Output: {'This': 1, 'is': 1, 'a': 1, 'test': 1, 'string': 2, 'to': 1, 'count': 1, 'the': 1, 'words': 1, 'in': 1}"},{"prompt":"Provide a type definition for the following class in Python. class Student: def __init__(self, name, age): self.name = name self.age = age","completion":"from typing import NamedTuple class Student(NamedTuple): name: str age: int"},{"prompt":"Sort a given list of integers in Python in ascending order. list_of_integers = [5, 8, 1, 4, 0, 2, 7]","completion":"list_of_integers.sort()"},{"prompt":"Write an algorithm in Python for detecting an anagram in a string.","completion":"def is_anagram(s1, s2): # Remove whitespace and make strings lowercase s1 = s1.replace(\\" \\", \\"\\").lower() s2 = s2.replace(\\" \\", \\"\\").lower() # Check lengths. If lengths differ, strings cannot be anagrams if len(s1) != len(s2): return False # Check each letter. Strings are anagrams when there is a one-to-one mapping of characters. count = [0] * 26 for i in range(len(s1)): index1 = ord(s1[i]) - ord('a') index2 = ord(s2[i]) - ord('a') count[index1] += 1 count[index2] -= 1 for i in range(26): if count[i] != 0: return False return True"},{"prompt":"Write a Python function to calculate the distance between two points given their coordinates. coord1 = (3, 2) coord2 = (8, 10)","completion":"def Euclidean_distance(coord1, coord2): x1, y1 = coord1 x2, y2 = coord2 return ((x2-x1)**2 + (y2-y1)**2)**0.5"},{"prompt":"mplement a sorting algorithm in Python using recursion that takes an array as an argument and returns the sorted array. arr = [3,7,5,2,1]","completion":"def merge_sort(arr): if len(arr) > 1: mid = len(arr) // 2 left = arr[:mid] right = arr[mid:] merge_sort(left) merge_sort(right) i = 0 j = 0 k = 0 while i < len(left) and j < len(right): if left[i] < right[j]: arr[k] = left[i] i += 1 else: arr[k] = right[j] j += 1 k += 1 while i < len(left): arr[k] = left[i] i += 1 k += 1 while j < len(right): arr[k] = right[j] j += 1 k += 1 arr = [3,7,5,2,1] merge_sort(arr) print(arr)"},{"prompt":"Write a Python program to generate a random string of length 20 characters with equal proportions of upper and lowercase letters, digits and special symbols. Not applicable","completion":"import string import random length = 20 all_chars = string.ascii_letters + string.digits + string.punctuation random_str = ''.join(random.choice(all_chars) for _ in range(length)) print('Random string of length {}: {}'.format(length, random_str))"},{"prompt":"Optimize the following piece of code written in Python def add(a, b): c = a + b return c","completion":"def add(a, b): return a + b # remove unnecessary intermediate variable 'c' and return the result directly."},{"prompt":"Develop a bot in Python to simulate a conversation between two people.","completion":"# Importing the necessary libraries import random # Defining the responses for the bot questions = [\\"What is your favorite movie?\\", \\"What is your favorite color?\\"] responses = [\\"My favorite movie is 'The Godfather'. I love the classic vibe of the movie.\\", \\"My favorite color is blue. It's soothing and calming to me.\\"] # Function to respond to the questions def respond(user_input): if user_input in questions: return random.choice(responses) else: return \\"I'm sorry, I don't understand.\\" # Driver code print(\\"Bot: Hi! What can I help you with?\\") user_input = input(\\"User: \\") while user_input != \\"bye\\": print(\\"Bot: \\" + respond(user_input)) user_input = input(\\"User: \\") print(\\"Bot: Bye! It was nice talking to you!\\")"},{"prompt":"The code is a Python script that inserts data into a MySQL database. To use this code, you need to have a MySQL database set up and running. You also need to have the necessary Python libraries installed. Once you have these prerequisites, you can call the functions in the script to insert data into the database. The functions include inserting domain, subdomain, region, country, workcenter, postatus, and ordering company data. To insert data, call the appropriate function and pass in the database connection object as an argument.","completion":"#encoding=utf-8 import MySQLdb, os from django.core.checks.registry import Tags def insertDomain(db): cursor = db.cursor() sql = \\"insert into %(table)s (%(para)s) values ('%(value)s')\\" insertValues = {'table' : 'quotation_domain', 'para' : 'name', 'value' : 'CD'} f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + 'domain', 'r+') for line in f.readlines(): line = line.strip() if('' != line): insertValues['value'] = line exesql = sql % insertValues cursor.execute(exesql) db.commit() db.close() def insertSubDomain(db): cursor = db.cursor() sql = \\"insert into %(table)s (%(para)s) values ('%(value)s')\\" insertValues = {'table' : 'quotation_domain', 'para' : 'name', 'value' : 'CD'} insertValues['table'] = 'quotation_subdomain' f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + 'subdomain', 'r+') for line in f.readlines(): line = line.strip() if('' != line): insertValues['value'] = line exesql = sql % insertValues cursor.execute(exesql) db.commit() db.close() def insertRegion(db, tableName, valueTag, fileName): cursor = db.cursor() sql = \\"insert into %(table)s (%(valueTag)s) values ('%(value)s')\\" insertValues = {'table' : tableName, 'valueTag' : valueTag, 'value' : 'xxxxx'} #print sql % insertValues f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+') for line in f.readlines(): line = line.strip() if('' != line): para = line.split('**') if(len(para) > 1): insertValues['value'] = para[0].strip() cursor.execute(sql % insertValues) db.commit() db.close() def insertValuesWithForignKey(db, table, tagValue, tagForKey, f_table, f_tagvalue, fileName = 'unitid'): cursor = db.cursor() sql = \\"insert into %(table)s (\\" + tagValue + \\",\\" + tagForKey + \\") values ('%(\\" + tagValue + \\")s', %(\\" + tagForKey + \\")s)\\" insertValues = {'table' : table, tagValue : 'OMS CD', tagForKey : 1} f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+') f_id = -1 exeTimes = 0 for line in f.readlines(): exeTimes += 1 line = line.strip() if('' != line): para = line.split('**') if(len(para) > 1): f_name = para[0].strip() cursor.execute(\\"select id from %s where %s='%s'\\" % (f_table, f_tagvalue, f_name)) f_id = cursor.fetchone()[0] insertValues[tagValue] = para[1].strip().replace(''', \\"'\\") insertValues[tagForKey] = f_id print sql % insertValues else: insertValues[tagValue] = para[0].strip().replace(''', \\"'\\") insertValues[tagForKey] = f_id print sql % insertValues cursor.execute(sql % insertValues) if(exeTimes % 10 == 0): db.commit() #pass db.commit() db.close() def insertWorkcenter(db, tableName, fileName, *tags): if(4 != len(tags)): return False else: cursor = db.cursor() sql = \\"insert into %(tableName)s (\\" + tags[0] + \\",\\" + tags[1] + \\",\\" + tags[2] + \\",\\" + tags[3] + \\") values ('%(\\" + tags[0] + \\")s','%(\\" + tags[1] + \\")s','%(\\" + tags[2] + \\")s','%(\\"+ tags[3] +\\")s')\\".encode('utf-8') insertDatas = { 'tableName' : tableName, tags[0] : '', tags[1] : '', tags[2] : '', tags[3] : '' } f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+') cIndex = 0 for line in f.readlines(): cIndex += 1 if('' != line): para = line.split('**') if(len(para) > 3): insertDatas[tags[0]] = para[0].strip().replace(\\"'\\", \\"'\\").encode('utf-8') insertDatas[tags[1]] = para[1].strip().replace(\\"'\\", \\"'\\").encode('utf-8') insertDatas[tags[2]] = para[2].strip().replace(\\"'\\", \\"'\\").encode('utf-8') insertDatas[tags[3]] = para[3].strip().replace(\\"'\\", \\"'\\").encode('utf-8') #print (sql % insertDatas).encode('utf-8') cursor.execute((sql % insertDatas).encode('utf-8')) if(cIndex % 10 == 0): db.commit() db.commit() db.close() def insertPostatus(db, fileName): cursor = db.cursor() sql = \\"insert into quotation_postatus (name) values ('%s')\\" f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+') for line in f.readlines(): line = line.strip() if('' != line): exesql = sql % line cursor.execute(exesql) db.commit() db.close() def insertOrderingcompany(db, fileName): cursor = db.cursor() sql = \\"insert into quotation_orderingcompany (name) values ('%s')\\" f = open(os.path.dirname(os.path.abspath(__file__)) + os.path.sep + fileName, 'r+') cIndex = 0 for line in f.readlines(): cIndex += 1 line = line.strip() if('' != line): exesql = sql % line #print exesql cursor.execute(exesql) if( 0 == cIndex % 10): db.commit() db.commit() db.close() if __name__ == '__main__': host = \\"localhost\\" passwd = \\"tatool\\" user = \\"tatool\\" dbname = \\"eeep\\" db = MySQLdb.connect(host=host, user=user, passwd=passwd, db=dbname) #insertDomain(db) #insertSubDomain(db) #insertValuesWithForignKey(db, 'quotation_unitid', 'name', 'domain_id', \\"quotation_domain\\", \\"name\\") #insertRegion(db, 'quotation_region', 'name', 'regionandcountry') #insertValuesWithForignKey(db, 'quotation_country', 'name', 'region_id', \\"quotation_region\\", \\"name\\", 'regionandcountry') #insertWorkcenter(db, 'quotation_workcenter', 'workcenter', 'number', 'descworkcenter', 'icrrbactivitytype', 'intracompanyactivitytyoe') #insertPostatus(db, 'postatus') insertOrderingcompany(db, 'orderingcompany')"},{"prompt":"Create a Pig Latin translator in Python to convert a string to Pig Latin. Not applicable","completion":"def translate(word): vowels = ('a', 'e', 'i', 'o', 'u') consonants = ('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z') if word[0] in vowels: new_word = word + 'ay' elif word[0] in consonants: new_word = word[1:] + word[0] + 'ay' else: new_word = word return new_word # Test sentence = 'My name is John' words = sentence.split(' ') pig_latin = [translate(word) for word in words] pig_latin_sentence = ' '.join(pig_latin) print(pig_latin_sentence) # Output: yMay amenay isay ohnJay"},{"prompt":"Create a function in Python for evaluating a given expression. expression = 2 * (3 + 4)","completion":"def eval_expr(expr): return eval(expr) print(eval_expr(\\"2 * (3 + 4)\\")) # 14"},{"prompt":"Create a python class to store information about a person's name, address and phone number.","completion":"class Person: def __init__(self, name, address, phone_number): self.name = name self.address = address self.phone_number = phone_number def get_name(self): return self.name def get_address(self): return self.address def get_phone_number(self): return self.phone_number"},{"prompt":"Create a web application using Flask and Python that takes user input and outputs the number of times each letter appears in the input. Not applicable","completion":"# imports from flask import Flask, render_template, request # init app app = Flask(__name__) # set route @app.route('/', methods=['POST', 'GET']) def index(): if request.method == 'POST': data = request.form['data'] counts = {} for char in data: if char in counts: counts[char] += 1 else: counts[char] = 1 return render_template('index.html', counts=counts) else: return render_template('index.html') # run app if __name__ == '__main__': app.run(debug=True) And for the index.html template: <html> <head> <title>Letter Counter</title> </head> <body> <h1>Letter Counter</h1> <form method=\\"POST\\"> <input type=\\"text\\" name=\\"data\\"> <input type=\\"submit\\" value=\\"Submit\\"> </form> {% if counts %} <h2>Results</h2> {% for key, val in counts.items() %} <p>{{ key }}: {{ val }}</p> {% endfor %} {% endif %} </body> </html>"},{"prompt":"Write a Python function to compute the maximum product of two elements in an array.","completion":"def max_product_of_two(arr): n = len(arr) if n == 0: return None max_val1 = arr[0] for i in range(1, n): if arr[i] > max_val1: max_val1 = arr[i] max_val2 = arr[0] for i in range(1, n): if arr[i] > max_val2 and arr[i] != max_val1: max_val2 = arr[i] return max_val1 * max_val2"},{"prompt":"Create a Python program to detect spam messages in an email dataset. The dataset contains a list of emails and a label (spam or not spam)","completion":"import pandas as pd df = pd.read_csv('email_dataset.csv') #Create feature vectors from sklearn.feature_extraction.text import CountVectorizer vectorizer = CountVectorizer() X = vectorizer.fit_transform(df['email']) #Train the data with Naive Bayes from sklearn.naive_bayes import MultinomialNB model = MultinomialNB() model.fit(X, df['label']) #Test the model spam_predictions = model.predict(X) print(spam_predictions)"},{"prompt":"Develop a function to generate a random string using Python.","completion":"import random import string def random_string(string_length): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(string_length)) string_length = 10 print(\\"Random String of length\\", string_length, \\"is:\\", random_string(string_length))"},{"prompt":"Create a matrix multiplication algorithm using Python. Matrix A (2x3): 2 4 3 6 1 0 Matrix B (3x2): 1 1 2 0 3 4","completion":"def matrix_multiply(matrixA, matrixB): if len(matrixA[0]) != len(matrixB): print(\\"Error: The number of columns of matrix A is not equal to the number of rows of matrix B\\") return m, n, p = len(matrixA), len(matrixA[0]), len(matrixB[0]) result = [[0 for i in range(p)] for j in range(m)] # multiplying matrix A and matrix B for i in range(m): for j in range(p): for k in range(n): result[i][j] += matrixA[i][k] * matrixB[k][j] return result # Example mata = [[2, 4, -3], [6, 1, 0]] matb = [[1, -1], [2, 0], [3, 4]] res = matrix_multiply(mata, matb) for row in res: print(row) # Output # [4, -4] # [24, 12]"},{"prompt":"Create a Python program to solve the following equation. 2x + 3y = 5","completion":"#!/usr/bin/env python def solve_equation(eqn): eqn_parts = eqn.split(' ') # co-efficients of x and y a = int(eqn_parts[0].replace('x', '')) b = int(eqn_parts[2].replace('y', '')) # RHS value c = int(eqn_parts[4]) # solving the equation x = (c - (b * 3)) / (2 * a) y = (5 - (2 * x)) / 3 return x, y if __name__ == '__main__': eqn = '2x + 3y = 5' x, y = solve_equation(eqn) print(f'Equation: {eqn}n') print(f'x = {x}') print(f'y = {y}')"},{"prompt":"Define a Node class in Python to represent a simple linked list.","completion":"class Node: def __init__(self, data): self.data = data self.next = None def add_node(head, new_data): new_node = Node(new_data) if head is None: head = new_node else: last = head while(last.next): last = last.next last.next = new_node return head"},{"prompt":"Generate a Python program to search an element in an array. [2, 4, 6, 8], 8","completion":"def searchElement(arr, x): for i in range(len(arr)): if arr[i] == x: return i return -1 arr = [2, 4, 6, 8] x = 8 result = searchElement(arr, x) if(result == -1): print(\\"Element is not present in array\\") else: print(\\"Element is present at index\\", result)"},{"prompt":"Write a Python program that searches through a string and returns the index of the first occurrence of a specific substring. testString = This is just a sample string to test out search within a string program targetString = Within","completion":"def find_first_occurrence(test_string, target_string): # Search for the first occurrence of target_string # within the test_string return test_string.find(target_string) # Driver code test_string = \\"This is just a sample string to test out search within a string program\\" target_string = \\"Within\\" # print the first occurrence of target_string within test_string print(find_first_occurrence(test_string, target_string)) # Output: 39 # The index of the first occurrence of the substring within the string."},{"prompt":"Generate a code snippet to parse JavaScript Object Notation (JSON) with the Python programming language. The JSON data is given below { name: John Doe, age: 25, city: New York }","completion":"import json # parse file data = json.loads(json_string) # get values name = data[\\"name\\"] age = data[\\"age\\"] city = data[\\"city\\"]"},{"prompt":"Write a python code for taking an array of numbers and returning only the odd numbers in descending order. [1, 8, 5, 9, 12, 17]","completion":"def extract_odd(arr): odd = [x for x in arr if x % 2 != 0] return sorted(odd, reverse = True) arr = [1, 8, 5, 9, 12, 17] print(extract_odd(arr)) # Output: [17, 9, 5, 1]"},{"prompt":"Write a Python program to insert a given string at the beginning of all items in a list. my_list = [hello, world, python] prefix = Programming","completion":"my_list = [\\"hello\\", \\"world\\", \\"python\\"] prefix = \\"Programming - \\" # Insert the prefix to all items in the list new_list = [prefix + item for item in my_list] print(new_list)"},{"prompt":"Create a function in Python to normalize an array of integers to range [0,1]. [3, 4, 6, 8, 10]","completion":"def normalize(arr): minVal = min(arr) maxVal = max(arr) normalizedArr = [(x - minVal) / (maxVal - minVal) for x in arr] return normalizedArr result = normalize([3, 4, 6, 8, 10]) print(result) // [0.0, 0.2, 0.4, 0.6, 0.8]"},{"prompt":"This code converts bedtools cluster output of merged breakdancer calls into a feature table. To use it, you need to provide a bed file containing clustered deletion calls as an argument. You can also use the optional flag bd or b to indicate whether the input file has BreakDancer formatted IDs or 10X formatted IDs. The output feature table will have columns for each sample indicating the presence of each deletion. To run the code, execute the script and provide the required arguments.","completion":"#!/usr/bin/env python3 # Copyright (c) 2017 Genome Research Ltd. # Author: Alistair Dunham # This program is free software: you can redistribute it and/or modify it under # the terms of the GNU General Public License as published by the Free Software # Foundation; either version 3 of the License , or (at your option) any later # version. # This program is distributed in the hope that it will be useful , but WITHOUT # ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS # FOR A PARTICULAR PURPOSE. See the GNU General Public License for more # details. # You should have received a copy of the GNU General Public License along with # this program. If not , see <http :// www.gnu.org/licenses/>. Script to convert bedtools cluster output of merged breakdancer calls into a feature table which has columns for each sample indicating the presence of each deletion import argparse import fileinput import re Read arguments parser = argparse.ArgumentParser(description=\\"Transform bedtools cluster output for deletion calls into a feature table of 'genotypes'.\\") parser.add_argument('tenx',metavar='T',type=str,help=\\"Bed file containing clustered deletion calls\\") parser.add_argument('--bd','-b',action='store_true',help=\\"Expect BreakDancer formatted IDs. Otherwise expect 10X formatted IDs.\\") args = parser.parse_args() Determine function to use for setting sample ID depending on given source format if args.bd: def getSample(x): \\"\\"\\"Extract sample from BreakDancer formatted ID tags\\"\\"\\" return(re.split(\\"[_.]\\",x)[-2]) else: def getSample(x): \\"\\"\\"Extract sample from 10X formatted ID tags\\"\\"\\" return(x.split('.')[0]) Extract each deletion call and its cluster number dels = [] samples = set() with fileinput.input(args.tenx) as bed: for li in bed: t = li.strip().split() s = getSample(t[3]) n = int(t[4]) samples.add(s) if len(dels) < n: dels.append(set([s])) else: dels[n - 1].add(s) Print feature table samples = sorted(list(samples)) print(\\"Deletion\\",*samples,sep='t') for n,delSamples in enumerate(dels): generate feature string feats = [(1 if i in delSamples else 0) for i in samples] print('_'.join([\\"del\\",str(n + 1)]),*feats,sep='t')"},{"prompt":"Write a python program to fill in missing values in a given list of strings. ['a', '', 'b', '', 'c']","completion":"input_list = ['a', '', 'b', '', 'c'] for i, val in enumerate(input_list): if val == '': input_list[i] = input_list[i-1] print(input_list) # ['a', 'a', 'b', 'b', 'c']"},{"prompt":"Create a game in Python based on personal preferences","completion":"Create a game in Python that involves the user's personal preferences. The game should allow the user to input their interests, goals, and preferences to produce a dynamic and personalised experience. The game should use a combination of text, graphics and sounds to create an engaging and immersive experience."},{"prompt":"Create a method in Python which prints the frequency of each letter in a string. text = hello world","completion":"\\"\\"\\" Create a method in Python which prints the frequency of each letter in a string \\"\\"\\" # Function to print frequency of characters in a string def characterFrequency(text): count = [0 for i in range(256)] output = [] # count frequency of each character # in string for i in range(len(text)): count[ord(text[i])] += 1 # Print characters and their frequencies for i in range(len(count)): if count[i] > 0: output.append((chr(i), count[i])) output.sort(key=lambda x:x[1], reverse=True) for i in output: print(i[0], '-', i[1]) # Driver code text = \\"hello world\\" characterFrequency(text) # Output: # l - 3 # o - 2 # h - 1 # e - 1 # d - 1 # r - 1 # w - 1"},{"prompt":"Generate a class in Python using the parameters provided in the following Input section. class_name = Person attributes = [Name, Age, Gender]","completion":"class Person: def __init__(self, Name, Age, Gender): self.Name = Name self.Age = Age self.Gender = Gender"},{"prompt":"Write a Python program to clean and preprocess a text corpus. This should include tokenization, lemmatization, removal of stopwords, and stemming. The brown bear walked in the woods, searching for a nut to snack on.","completion":"import nltk from nltk.tokenize import word_tokenize from nltk.stem import PorterStemmer, WordNetLemmatizer from nltk.corpus import stopwords text = 'The brown bear walked in the woods, searching for a nut to snack on.' tokens = word_tokenize(text) stemmer = PorterStemmer() lemmatizer = WordNetLemmatizer() punctuations = '''!()-[]{};:'\\",<>./?@#%^&*_~''' punct_tokens = [word for word in tokens if word not in punctuations] stop_words = set(stopwords.words('english')) cleaned_tokens = [word for word in punct_tokens if word not in stop_words] stemmed_tokens = [stemmer.stem(word) for word in cleaned_tokens] lemmatized_tokens = [lemmatizer.lemmatize(word) for word in stemmed_tokens] print(lemmatized_tokens)"},{"prompt":"Construct Python code to count the occurrence of a specific word in a given sentence. sentence = She sells sea shells on the sea shore, word = sea","completion":"def word_count(sentence,word): word_count=0 words=sentence.split(\\" \\") for w in words: if(w==word): word_count+=1 return word_count sentence = \\"She sells sea shells on the sea shore\\" word = \\"sea\\" res = word_count(sentence, word) print(res)"},{"prompt":"Write a bash script to build a Jupyter Notebook environment from scratch. Not applicable","completion":"#!/bin/bash # Update existing packages sudo apt-get update # Install pip3 sudo apt-get install python3-pip # Install the necessary packages pip3 install jupyter notebook # Install virtual environment pip3 install virtualenv # Create a virtual environment in the current directory virtualenv notebook-env # Activate the virtual environment source notebook-env/bin/activate # Upgrade pip and jupyter inside the virtual environment pip3 install --upgrade pip jupyter # Make jupyter launchable from inside the virtual environment python3 -m ipykernel install --user # To exit from the virtual environment deactivate"},{"prompt":"Create a function in Python to convert a given string to its corresponding ASCII code.","completion":"def to_ascii(s): ascii_list = [] # traverse the string character # by character for char in s: # cast each character into its corresponding ASCII code value ascii_list.append(ord(char)) return ascii_list"},{"prompt":"Generate a Python program to apply custom formatting for the following output. Given a list of strings, output a HTML table with data in the string","completion":"def create_html_table(slist): table_html = \\"<table>\\" for str in slist: table_html += \\"<tr>\\" table_html += \\"<td>\\" + str + \\"</td>\\" table_html += \\"</tr>\\" table_html += \\"</table>\\" return table_html"},{"prompt":"Develop a Python function to compare two given dictionaries. d1 = {'a':1, 'b':2} d2 = {'a':2, 'b':1}","completion":"def compare_dictionaries(d1, d2): for key in d1: if key not in d2 or d1[key] != d2[key]: return False return True"},{"prompt":"mplement Bubble Sort using Python. [6, 2, 5, 1, 8]","completion":"def bubble_sort(arr): for i in range(len(arr)): for j in range(len(arr)-1-i): if arr[j] > arr[j+1]: temp = arr[j] arr[j] = arr[j+1] arr[j+1] = temp arr = [6, 2, 5, 1, 8] bubble_sort(arr) print(arr)"},{"prompt":"Generate a Python program to search for a particular string in a given dictionary? dict = {'a': 'apple', 'b': 'ball', 'c': 'cat'}","completion":"def search_string(dict, keyword): # iterate through the dictionary for key, value in dict.items(): # check if the keyword is present in the value of the dictionary if keyword in value: return key # if keyword not found in dictionary return \\"Not found\\""},{"prompt":"Write a generative program in Python to generate a sentence of text. Noun and verb list: Nouns: car, cat, dog, woman Verbs: drove, meowed, barked, laughed","completion":"import random nouns = [\\"car\\", \\"cat\\", \\"dog\\", \\"woman\\"] verbs = [\\"drove\\", \\"meowed\\", \\"barked\\", \\"laughed\\"] def generate_sentence(): random_int1 = random.randint(0, 3) random_int2 = random.randint(0, 3) sentence = f\\"The {nouns[random_int1]} {verbs[random_int2]}.\\" return sentence generate_sentence() #returns e.g. \\"The car meowed.\\""},{"prompt":"Create a Python Pandas DataFrame for a realworld dataset of your choice, and display information about it. A dataset containing the prices of fruits in a market.","completion":"import pandas as pd # load the dataset data = pd.read_csv('data.csv') # display information about the dataset data.info() # observe the first five rows data.head() # list all columns data.columns # display summary statistics data.describe()"},{"prompt":"Develop a code to find out the maximum occurring character in a given String. my_string = Python is an interesting language","completion":"my_string = \\"Python is an interesting language\\" # create an empty dictionary di = {} # iterate through each character for char in my_string: # check if the character is already present in the dict if char in di.keys(): # if present, increment the value of the character di[char] += 1 else: # if not present, set the value to 1 di[char] = 1 # find the character with the maximum count max_char = max(di, key=di.get) # display the maximum occurring character print(f\\"Maximum occurring character is: {max_char}\\")"},{"prompt":"Generate a Python function that rearranges the characters of a string such that no character repeats consecutively.","completion":"def rearrange_chars(string): char_list = list(string) for i in range(len(char_list)): for j in range(i + 1, len(char_list)): if char_list[i] == char_list[j]: char_list.insert(j, '_') return \\"\\".join(char_list).replace('_', '')"},{"prompt":"Develop a Python program to scrape the top 10 most visited websites and their respective Alexa ranking. Not applicable","completion":"from bs4 import BeautifulSoup import requests import re def getTopSites(): url = 'https://www.alexa.com/topsites' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') table = soup.find('table') table_rows = table.find_all('tr') top_websites = [] for row in table_rows: cols = row.find_all('td') if cols != []: website_name = cols[1].text website_rank = re.sub('[^0-9]', '', cols[0].text) top_websites.append({ 'name': website_name, 'alexa_rank': website_rank }) return top_websites if __name__ == '__main__': print(getTopSites())"},{"prompt":"dentify a classification algorithm using Python and generate a code to implement it.","completion":"import numpy as np from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.neighbors import KNeighborsClassifier # Load the Iris dataset X, y = load_iris(return_X_y=True) # Create a training and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=21, stratify=y) # Fit the model using K-Nearest Neighbors classifier knn = KNeighborsClassifier(n_neighbors=8) knn.fit(X_train, y_train) # Make predictions on the test set y_pred = knn.predict(X_test)"},{"prompt":"Can you generate a greedy algorithm in Python for solving the coin change problem? Coins = [1, 6, 10], Change = 8","completion":"def get_coins(coins, change): min_coins = change if change in coins: return [change] for i in [c for c in coins if c <= change]: num_coins = 1 + get_coins(coins, change-i) if len(num_coins) < min_coins: min_coins = num_coins return min_coins # Test coins = [1, 6, 10] change = 8 print(get_coins(coins, change)) # [1, 6, 1]"},{"prompt":"Create a Python script to generate a random password of length 8, containing a mix of upper and lower case letters, and numbers Not applicable","completion":"import string import random def generate_password(length): charPool = string.ascii_letters + string.digits password = ''.join(random.sample(charPool,length)) return password password = generate_password(8) print(password) # e.g. hg6bs2Vu"},{"prompt":"Generate a Python function that will accept an array of integers and remove duplicates from the array. [1, 2, 3, 3, 4, 4, 5, 5]","completion":"def remove_duplicates(arr): new_arr = [] for num in arr: if num not in new_arr: new_arr.append(num) return new_arr"},{"prompt":"Deduplicate the given list using a dictionary in Python? [10, 20, 30, 10, 40, 20]","completion":"input_list = [10, 20, 30, 10, 40, 20] unique_list = list(dict.fromkeys(input_list)) print(unique_list)"},{"prompt":"Rewrite the following code from Java to Python: public class Main { public static void main(String[] args) { int a = 5; int b = 10; int c = a + b; System.out.println(c); } }","completion":"a = 5 b = 10 c = a + b print(c)"},{"prompt":"Design a python code to build a web application using Django's MVC framework.","completion":"# Importing essential libraries import os import sys # start a new Django project from django.core.management import execute_from_command_line # check the requirements.txt file to get the list of libraries if __name__ == \\"__main__\\": os.environ.setdefault(\\"DJANGO_SETTINGS_MODULE\\", \\"my_app.settings\\") try: from django.core.management import execute_from_command_line except ImportError as exc: raise ImportError( \\"Couldn't import Django. Are you sure it's installed and \\" \\"available on your PYTHONPATH environment variable? Did you \\" \\"forget to activate a virtual environment?\\" ) from exc execute_from_command_line(sys.argv)"},{"prompt":"mplement a function in Python to convert a pascal triangle to a 2D list.","completion":"\\"\\"\\" Implement a function in Python to convert a pascal triangle to a 2D list \\"\\"\\" def pascal_to_list(pascal): lines = pascal.split('n') # convert list of strings to list of lists table = [[int(i) for i in line.split()] for line in lines] return table if __name__ == \\"__main__\\": pascal = \\"\\"\\" 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 \\"\\"\\" print(pascal_to_list(pascal))"},{"prompt":"Using Google Vision API, create a Python program to detect objects and classify them into specific categories. Picture file of a park","completion":"import io import os # Imports the Google Cloud client library from google.cloud import vision # Instantiates a client client = vision.ImageAnnotatorClient() # The name of the image file to annotate file_name = 'park.jpg' # Loads the image with io.open(file_name, 'rb') as image_file: content = image_file.read() image = vision.types.Image(content=content) # Performs label detection on the image file response = client.label_detection(image=image) labels = response.label_annotations print('Labels:') for label in labels: print(label.description) # Performs object detection response = client.object_localization(image=image) objects = response.localized_object_annotations print('Objects:') for object_ in objects: print(object_.name)"},{"prompt":"Build a Python program to move all the elements greater than or equal to 5 in the given array to the right side of the array. [3, 2, 5, 1, 1, 9]","completion":"def move_greater_elements(arr): left_pointer = 0 right_pointer = len(arr) - 1 while left_pointer < right_pointer: while arr[left_pointer] < 5: left_pointer += 1 while arr[right_pointer] >= 5 and right_pointer > left_pointer: right_pointer -= 1 arr[left_pointer], arr[right_pointer] = arr[right_pointer], arr[left_pointer] return arr"},{"prompt":"Generate a Python script to find common elements in two lists. list1 = [1, 2, 3, 4] list2 = [3, 4, 5, 6]","completion":"def find_common_elements(list1, list2): result = [] for val in list1: if val in list2: result.append(val) return result list1 = [1, 2, 3, 4] list2 = [3, 4, 5, 6] result = find_common_elements(list1, list2) print(result)"},{"prompt":"Create a Python class for a calculator that can add, subtract, divide and multiply two numbers.","completion":"class Calculator: def __init__(self): pass def add(self, a, b): return a + b def subtract(self, a, b): return a - b def divide(self, a, b): return a / b def multiply(self, a, b): return a * b"},{"prompt":"Find the largest number in an array using Python. Array: [1, 10, 5, 6, 9, 8, 20]","completion":"arr = [1, 10, 5, 6, 9, 8, 20] def largest_number(arr): largest = arr[0] for num in arr: if num > largest: largest = num return largest largest = largest_number(arr) print(largest) # 20"},{"prompt":"Create a program in Python that converts binary to decimal representation. 101010","completion":"def BinaryToDecimal(binary): binary1 = binary decimal, i, n = 0, 0, 0 while(binary != 0): dec = binary % 10 decimal = decimal + dec * pow(2, i) binary = binary//10 i += 1 return decimal # Driver code binary = 101010 print(BinaryToDecimal(binary))"},{"prompt":"Generate Python code to print a formatted table from a given list of dictionaries. list_of_dicts = [{'name': 'John', 'Occupation': 'Software Engineer', 'Age': 34}, {'name': 'Jane', 'Occupation': 'Professor', 'Age': 44}, {'name': 'Jacob', 'Occupation': 'Data Scientist', 'Age': 28}, {'name': 'Justin', 'Occupation': 'Accountant', 'Age': 24}]","completion":"keys = list_of_dicts[0].keys() for dicts in list_of_dicts: print('-'*20) for k in keys: print(f\\"{k}: {dicts[k]}\\") print('-'*20)"},{"prompt":"Design a REST API endpoint in Python Flask to return a list of users, sorted by last name. No inpu","completion":"@app.route(\\"/users\\", methods=[\\"GET\\"]) def get_users(): users = User.query.order_by(User.last_name).all() return jsonify([user.serialize() for user in users]), 200"},{"prompt":"Generate a python program to show the most common 3 elements in an array. [1, 4, 2, 6, 7, 5, 1, 10, 4]","completion":"def most_common(lst): lst_set = set(lst) max_val = -1 max_item = None most_common_num = [] for x in lst_set: item_count = lst.count(x) if max_val < item_count: max_val = item_count max_item = x if len(most_common_num) == 3: most_common_num.pop(0) most_common_num.append(x) return most_common_num a = [1, 4, 2, 6, 7, 5, 1, 10, 4] most_common_elements = most_common(a) print(\\"The most common 3 elements are:\\", most_common_elements)"},{"prompt":"Write a Python program to simulate the game of Rock, Paper, Scissors.","completion":"import random def rock_paper_scissors(): choices = ['rock', 'paper', 'scissors'] while True: player_choice = input(\\"Choose rock, paper, or scissors: \\") if player_choice not in choices: print(\\"Invalid choice! Please choose again.\\") continue computer_choice = random.choice(choices) print(\\"The computer chose\\", computer_choice) if player_choice == computer_choice: print(\\"It's a draw!\\") elif (player_choice == 'rock' and computer_choice == 'scissors') or (player_choice == 'paper' and computer_choice == 'rock') or (player_choice == 'scissors' and computer_choice == 'paper'): print(\\"You win!\\") else: print(\\"You lose!\\") break"},{"prompt":"Express the following SQL query in a pythonic way. SELECT id,name FROM users WHERE gender = 'M' AND age >= 20","completion":"def select_users_male_age_above_20(users): output = [] for user in users: if user['gender'] == 'M' and user['age'] >= 20: output.append({'id':user['id'], 'name':user['name']}) return output"},{"prompt":"Build a decision tree classifier using Python to identify customer attrition. Dataset: Attributes: Age, Gender, Education, Income, Customer Service Calls Labels: Attrition (Yes/No)","completion":"# Import libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import LabelEncoder from sklearn.tree import DecisionTreeClassifier # Read data data = pd.read_csv('data.csv') # Preprocess data features = data.drop('Attrition', axis=1) le = LabelEncoder() target = le.fit_transform(data['Attrition']) # Split data into train and test sets X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=0) # Build Decision Tree classifier clf = DecisionTreeClassifier() clf.fit(X_train, y_train) # Make predictions on the test set y_pred = clf.predict(X_test)"},{"prompt":"Generate Python code to find the pair of numbers from an array whose sum is closest to a given number. array: [10, 2, 3, 4, 5], target: 8","completion":"def closest_sum(array, target): diff = float('inf') for i in range(len(array) - 1): for j in range(i + 1, len(array)): pair_sum = array[i] + array[j] if abs(target - pair_sum) < diff: diff = abs(target - pair_sum) result = [array[i], array[j]] return result"},{"prompt":"Create a Python program to randomly generate a mixture of two Gaussian distributions. mean1 = 0, mean2 = 5, stddev1 = 0.5, stddev2 = 1 N = 10","completion":"import random import math def random_mixture(mean1, mean2, stddev1, stddev2, N): data = [] for _ in range(N): if random.random() < 0.5: data.append(random.normalvariate(mean1, stddev1)) else: data.append(random.normalvariate(mean2, stddev2)) return data"},{"prompt":"Write a Python program to retrieve binary data from a given URL. url = https://example.com/sample.txt","completion":"import requests def getFileData(url): # Get binary data r = requests.get(url) return r.content url = \\"https://example.com/sample.txt\\" data = getFileData(url) print(data)"},{"prompt":"Generate a program in Python that implements the bubble sort algorithm to sort an unsorted array of integers. [5,3,2,4]","completion":"def bubble_sort(nums): for i in range(len(nums)-1): for j in range(i+1, len(nums)): if nums[i] > nums[j]: nums[i], nums[j] = nums[j], nums[i] nums = [5,3,2,4] bubble_sort(nums) print(nums) # Output [2,3,4,5]"},{"prompt":"Create a function which reverses the characters in a string.","completion":"\\"\\"\\" Create a function which reverses the characters in a string \\"\\"\\" def reverse_string(string): reversed_string = \\"\\" for i in range(len(string) -1, -1, -1): reversed_string += string[i] return reversed_string string = \\"Python\\" reversed_string = reverse_string(string) print(\\"The original string is:\\", string) print(\\"The reversed string is:\\", reversed_string)"},{"prompt":"Design a Python class that accepts student scores and calculates the mean, variance and other descriptive statistics.","completion":"class Statistics: def __init__(self): self.scores = [] def add_score(self, score): self.scores.append(score) def mean(self): return sum(self.scores) / len(self.scores) def variance(self): mean = self.mean() return sum((x - mean) ** 2 for x in self.scores) / len(self.scores) def median(self): self.scores.sort() mid = len(self.scores) // 2 if len(self.scores) % 2 == 0: median = (self.scores[mid - 1] + self.scores[mid]) / 2 else: median = self.scores[mid] return median def mode(self): mode = [] nums = {} for num in self.scores: if num in nums: nums[num] += 1 else: nums[num] = 1 max_freq = max(nums.values()) for num in nums: if nums[num] == max_freq: mode.append(num) return mode"},{"prompt":"Optimize a Python code snippet which prints out the even numbers up to a given number. num = 50","completion":"def printEvenNumbers(num): for n in range(2, num+1): if n%2 == 0: print(n) printEvenNumbers(50)"},{"prompt":"Perform automatic code refactoring on a python program that calculates the factorial of a given number. def factorial(num): if num < 0: return Error: Must be a positive integer elif num <= 1: return 1 else: return num * factorial(num1)","completion":"def factorial(num: int): if num < 0: return \\"Error: Must be a positive integer\\" elif num <= 1: return 1 else: return num * factorial(num-1)"},{"prompt":"Create a Python program to sort a dictionary by value in descending order. Dictionary: {a: 3, b: 1, c: 5, d: 4, e: 2}","completion":"# Sort the given dictionary by value import operator d = {'a':3, 'b':1, 'c':5, 'd':4, 'e':2} sorted_d = sorted(d.items(), key=operator.itemgetter(1),reverse=True) print(sorted_d) // Output: [('c', 5), ('d', 4), ('a', 3), ('e', 2), ('b', 1)]"},{"prompt":"Create a REST API with a Python Flask backend for searching cities in a given region. The API should enable searching cities within a specified radius of a given location. latitude: 0, longitude: 0, radius: 500","completion":"import flask app = flask.Flask(__name__) @app.route('/cities?latitude=<float:latitude>&longitude=<float:longitude>&radius=<float:radius>', methods=['GET']) def cities(latitude, longitude, radius): ... cursor.execute(SELECT * from city WHERE distance(latitude, longitude, %s, %s) < %s, (latitude, longitude, radius)) cities = cursor.fetchall() return flask.jsonify(cities) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python script to take an array of integers and find the number with the highest frequency. Not applicable","completion":"def find_most_frequent(numbers): frequency_dict = {} for n in numbers: if n in frequency_dict: frequency_dict[n] += 1 else: frequency_dict[n] = 1 max_frequency = 0 most_frequent = 0 for k, v in frequency_dict.items(): if v > max_frequency: max_frequency = v most_frequent = k return most_frequent # Usage numbers = [1, 2, 3, 1, 2, 2] most_frequent = find_most_frequent(numbers) print(most_frequent) # Outputs 2"},{"prompt":"Create a Python function to turn a given list of integers into a separate set of lists containing prime, composite and odd/even numbers. [11, 12,13,14,15]","completion":"def separate_list(numbers): prime_nums = [] composite_nums = [] odd_even_nums = [] for num in numbers: if num == 1: prime_nums.append(num) elif all([num % i != 0 for i in range(2,num)]): prime_nums.append(num) else: composite_nums.append(num) if num % 2 == 0: odd_even_nums.append(num) else: odd_even_nums.append(num) return prime_nums, composite_nums, odd_even_nums"},{"prompt":"Write a function to print the following pattern in Python. n = 3","completion":"def print_pattern(n): # outer loop to handle number of rows for i in range(1,n+1): # inner loop to handle number of columns for j in range(1,i+1): # printing stars print('* ', end=\\"\\") # ending line after each row print(\\"r\\") # Driver Code n = 3 print_pattern(n) Output: * * * * * *"},{"prompt":"Build an application in Python that converts texttospeech using the Google Cloud TextToSpeech service. Sample text: Hello world!","completion":"from google.cloud import texttospeech # Create a client client = texttospeech.TextToSpeechClient() # Construct the request text = 'Hello World!' synthesis_input = texttospeech.types.SynthesisInput(text=text) voice = texttospeech.types.VoiceSelectionParams( language_code='en-US', ssml_gender=texttospeech.enums.SsmlVoiceGender.FEMALE) # Select the type of audio file you want returned audio_config = texttospeech.types.AudioConfig( audio_encoding=texttospeech.enums.AudioEncoding.MP3) # Perform the text-to-speech request response = client.synthesize_speech(synthesis_input, voice, audio_config) # Write the response to an audio file with open('output.mp3', 'wb') as out: out.write(response.audio_content) print('Audio content written to file \\"output.mp3\\"')"},{"prompt":"Generate code to calculate the distance between two points in an array in Python. Two points in an array: [2, 4] and [10, 6]","completion":"from math import sqrt def calcDistance(p1, p2): return sqrt( (p2[0] - p1[0])**2 + (p2[1] - p1[1])**2 ) point1 = [2, 4] point2 = [10, 6] distance = calcDistance(point1, point2) print(\\"Distance between the two points is\\", distance)"},{"prompt":"Compare two strings and print true if they are equal, false otherwise in Python.","completion":"a = \\"test\\" b = \\"test\\" if a == b: print(\\"true\\") else: print(\\"false\\")"},{"prompt":"Create a class to represent an employee's details in Python.","completion":"class Employee: \\"\\"\\"Class to represent an employee\\"\\"\\" def __init__(self, name, age, salary): \\"\\"\\"Initialize the employee\\"\\"\\" self.name = name self.age = age self.salary = salary def get_details(self): \\"\\"\\"Print the details of the employee\\"\\"\\" print('Name:', self.name) print('Age:', self.age) print('Salary:', self.salary)"},{"prompt":"Optimize the following code snippet to reduce processing time as much as possible. arr = [13, 18, 25, 1, 7, 23, 12] time_start = time.time() for i in range(0, len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: temp = arr[i] arr[i] = arr[j] arr[j] = temp time_end = time.time() print(f'Time taken: {time_end time_start} seconds')","completion":"#Python code arr = [13, 18, 25, 1, 7, 23, 12] time_start = time.time() # Optimized code arr.sort() time_end = time.time() print(f'Time taken: {time_end - time_start} seconds')"},{"prompt":"Using the data provided, write a Python program to find and print the root of the quadratic equation ax2 + bx + c = 0 a = 1, b = 5, c = 6","completion":"import math a = 1 b = 5 c = 6 # calculate the discriminant d = (b**2) - (4*a*c) # find the two solutions sol1 = (-b-math.sqrt(d))/(2*a) sol2 = (-b+math.sqrt(d))/(2*a) print('The solutions are {0} and {1}'.format(sol1, sol2))"},{"prompt":"Generate a function in Python that returns the cumulative sum of a list of numbers. [1, 2, 3, 4]","completion":"def cumulative_sum(nums): sums = [] current_sum = 0 for n in nums: current_sum += n sums.append(current_sum) return sums print(cumulative_sum([1, 2, 3, 4])) # [1, 3, 6, 10]"},{"prompt":"Write an efficient function in Python to check if a number is Armstrong number or not.","completion":"def isArmstrongNumber(n): length = len(str(n)) total = 0 temp = n while temp > 0: digit = temp % 10 total += digit ** length temp //= 10 return n == total"},{"prompt":"Create a code in Python that takes two words as input and returns the longest common substring. string, longest","completion":"def longest_common_substring(s1, s2): longest_length = 0 longest_substring = \\"\\" for i in range(min(len(s1), len(s2))): substr = s1[i] for j in range(i + 1, min(len(s1), len(s2))): if s2[j] == s1[i]: substr += s1[j] if len(substr) > longest_length and substr in s2: longest_length = len(substr) longest_substring = substr return longest_substring result = longest_common_substring('string', 'longest') print(result)"},{"prompt":"Modify the following Python code to generate more random numbers. import random x = random.randint(1, 10)","completion":"import random x = random.randint(1, 10) y = random.randint(1, 10) z = random.randint(1, 10)"},{"prompt":"Create a Python script that will automatically detect the largest number in a given list. [7, 2, 4, 5, 8, 1]","completion":"def find_largest_number(list): largest = list[0] for number in list: if number > largest: largest = number return largest list = [7, 2, -4, 5, 8, 1] print(find_largest_number(list)) # Output: 8"},{"prompt":"Create a Python library to generate random passwords containing a mix of lowercase and uppercase letters, numbers, and special characters. Not applicable","completion":"import random import string def generate_password(length): \\"\\"\\"Generate a random password of given length Args: length (int): The length of the password to generate. Returns: str: The generated password. \\"\\"\\" password_characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(password_characters) for i in range(length))"},{"prompt":"Generate a program in Python to generate a list of unique random numbers between two given numbers.","completion":"import random def random_list(start, end, size): rand_list = [] for i in range(size): rand_num = random.choice(range(start, end)) while rand_num in rand_list: rand_num = random.choice(range(start, end)) rand_list.append(rand_num) return rand_list start = 2 end = 10 size = 5 random_list_result = random_list(start, end, size) print(random_list_result)"},{"prompt":"Write a function in Python to display all the words beginning with a given alphabet in a given string. str = This is a sample sentence","completion":"def all_words_beginning_with(str, alphabet): words = str.split() result = [] for word in words: if word[0].upper() == alphabet.upper(): result.append(word) return result"},{"prompt":"Develop a Python program which uses a sorting algorithm to sort the provided dataset by its second column in ascending order. dataset = [[Bob, 10], [Alice, 8], [Harry, 14]]","completion":"def sort_by_column(dataset): # extract second column from dataset second_column = [row[1] for row in dataset] # sort dataset using second column sorted_dataset = [row for _, row in sorted(zip(second_column, dataset))] return sorted_dataset"},{"prompt":"Create a function in Python that takes a twodimensional array with n rows and m columns and returns the transposed array. [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ]","completion":"def transpose(matrix): num_rows = len(matrix) num_cols = len(matrix[0]) transposed = [ [0 for j in range(num_rows)] for i in range(num_cols) ] for i in range(num_rows): for j in range(num_cols): transposed[j][i] = matrix[i][j] return transposed"},{"prompt":"Design a sorting algorithm in Python that uses two lists. list1 = [3, 2, 5, 4, 1] list2 = [0, 1, 1, 0, 1]","completion":"def sort_two_lists(list1, list2): \\"\\"\\"Function to sort two lists by the order of list2\\"\\"\\" zipped_lists = zip(list1, list2) zipped_lists = sorted(zipped_lists, key=lambda x: x[1]) sorted_list1, sorted_list2 = zip(*zipped_lists) return list(sorted_list1), list(sorted_list2)"},{"prompt":"Generate a lambda function in Python to find the average of all the elements in a list. [1, 2, 3, 4, 5]","completion":"list_nums = [1, 2, 3, 4, 5] average = lambda list_nums: sum(list_nums) / len(list_nums) print(average(list_nums))"},{"prompt":"Create an errorhandling system for a Python web application. Not applicable","completion":"import logging def handler(e): logging.exception(e) # Do any other error handling logic here. try: # the code that could throw an error except Exception as e: handler(e)"},{"prompt":"Write a Python program to print out current month name and the previous month name.","completion":"from datetime import datetime, timedelta def month_names(): today = datetime.today() last_month = today - timedelta(weeks=4) current_month = today.strftime(\\"%B\\") prev_month = last_month.strftime(\\"%B\\") print(\\"Current month: \\", current_month) print(\\"Previous month: \\", prev_month)"},{"prompt":"Create a web crawler in Python which takes an URL as input and extract all the links from the page. https://www.example.com","completion":"import requests from bs4 import BeautifulSoup def extract_links(url): r = requests.get(url) soup = BeautifulSoup(r.content, 'html.parser') links = [] for link in soup.find_all('a'): links.append(link.get('href')) return links url = \\"https://www.example.com\\" print(extract_links(url))"},{"prompt":"Develop a Python function to remove the last n characters from a given string. String = âHello Programmers!â","completion":"def remove_last_n_characters(str, n): return str[:len(str)-n]"},{"prompt":"Classify the performance complexity of the following code snippet written in Python. def factorial(n): if n == 0: return 1 else: return n * factorial(n1)","completion":"The performance complexity of the code snippet is O(n)."},{"prompt":"Create a web page with a form that takes in two inputs and displays the result of the addition of the two numbers.","completion":"<html> <head> <title>Python Form Demo</title> </head> <body> <form method=\\"post\\" action=\\"/add\\"> <input type=\\"text\\" name=\\"num1\\"> <input type=\\"text\\" name=\\"num2\\"> <input type=\\"submit\\" value=\\"Calculate\\"> </form> </body> </html> @app.route('/add', methods=['POST']) def add(): num1 = int(request.form['num1']) num2 = int(request.form['num2']) result = num1 + num2 return \\"The result of {} + {} is {}\\".format(num1, num2, result)"},{"prompt":"Create a data structure in Python to store unique keyvalue pairs.","completion":"class KeyValuePairs: def __init__(self): self.data = dict() def set(self, key, value): self.data[key] = value def get(self, key): return self.data[key] def containsKey(self, key): return key in self.data def containsValue(self, value): for v in self.data.values(): if v == value: return True return False"},{"prompt":"Generate a Python program to compare two strings and return the largest string.","completion":"def largest_string(str1, str2): if len(str1) >= len(str2): return str1 else: return str2"},{"prompt":"Construct a Python program to convert degrees Celsius to Fahrenheit. C = 32","completion":"#Program to convert Celsius to Fahrenheit #user input C = 32 #Celsius to Fahrenheit conversion F = (C*9/5)+32 #print the result print('%0.2f degree Celsius is equal to %0.2f degree Fahrenheit' %(C, F))"},{"prompt":"Optimize the following Python code to remove unnecessary operations or code. def count(list_data): total = 0 for i in list_data: total += i return total","completion":"def count(list_data): return sum(list_data)"},{"prompt":"Modify a Python program to generate output in JSON format. dictionary = { name: John, age: 30, car: [Ford, BMW, Fiat] }","completion":"import json dictionary = { \\"name\\": \\"John\\", \\"age\\": 30, \\"car\\": [\\"Ford\\", \\"BMW\\", \\"Fiat\\"] } json_data = json.dumps(dictionary) print(json_data) // Output: {\\"name\\": \\"John\\", \\"age\\": 30, \\"car\\": [\\"Ford\\", \\"BMW\\", \\"Fiat\\"]}"},{"prompt":"Rewrite the given code in Python. int sum = 0 for (int i=0; i<n; i++) sum += i;","completion":"sum = 0 for i in range(n): sum += i"},{"prompt":"Debug the given Python code. def calculate_sum(a, b): sum = a + b return c = calculate_sum(2, 3) print(The sum is, c)","completion":"def calculate_sum(a, b): sum = a + b return sum c = calculate_sum(2, 3) print(\\"The sum is\\", c)"},{"prompt":"Create a program in Python to generate a random integer between 1 and 10.","completion":"import random def random_int(): return random.randint(1, 10)"},{"prompt":"Optimize a Python program containing a matrix addition operation. X = [[2, 3], [1, 4]] Y = [[5, 6], [7, 8]]","completion":"import numpy as np X = np.array([[2, 3], [1, 4]]) Y = np.array([[5, 6], [7, 8]]) Z = X + Y print(\\"Matrix addition result:\\") print(Z)"},{"prompt":"Optimize a Python program to find the maximum number of elements in two given lists. listA = [1, 3, 5, 7] listB = [2, 4, 6, 8]","completion":"def findMaxLen(listA, listB): lengthA = len(listA) lengthB = len(listB) # Initialize left and right pointers l, r = 0, 0 max_len = 0 # While left and right pointer cross the other # maintain a maximum length while l < lengthA and r < lengthB: # If they both have same element if listA[l] == listB[r]: max_len = max(max_len, l + r + 1) l += 1 r += 1 # If listA's element is less, increment # listB pointer elif listA[l] > listB[r]: r += 1 # If listA's element is more, increment # listA pointer else: l += 1 return max_len"},{"prompt":"Rewrite the following code written in Java to Python. public static boolean isPrime(int num) { // check if num is a multiple of 2 if (num % 2 == 0) { return false; } // if not, then just check the odds for(int i = 3; i * i <= num; i += 2){ if(num % i == 0){ return false; } } return true; }","completion":"def is_prime(num): # check if num is a multiple of 2 if (num % 2 == 0): return False # if not, then just check the odds for i in range(3, num//2, 2): if num % i == 0: return False return True"},{"prompt":"mplement a priority queue in python with the given operations. No Inpu","completion":"class PriorityQueue: def __init__(self): self.queue = [] def is_empty(self): return len(self.queue) == 0 def insert(self, key): self.queue.append(key) self.queue.sort(reverse=True) def pop(self): if not self.is_empty(): return self.queue.pop(0) return None"},{"prompt":"Transform the given language rich code into a python program Create a Python program that calculates the average of an array of number","completion":"def get_average(arr): sum = 0 for i in range(len(arr)): sum += arr[i] return sum/len(arr)"},{"prompt":"Build a Python program to sort a list of strings by the length of the string in descending order. [cat, dog, elephant, tiger]","completion":"def sort_list(list): return sorted(list, key=lambda x: len(x), reverse=True) list = [\\"cat\\", \\"dog\\", \\"elephant\\", \\"tiger\\"] print(sort_list(list)) # Output: [\\"elephant\\", \\"tiger\\", \\"dog\\", \\"cat\\"]"},{"prompt":"Could you write a program in Python to simulate Conway's Game of Life? size = 10","completion":"# create the grid function def createGrid(length, width): grid = [[0 for x in range(width)] for y in range(length)] return grid # initialise the grid with cells def initGrid(grid): for i in range(len(grid)): for j in range(len(grid[i])): grid[i][j] = int(random.random()+.5) return grid # display the grid def display(grid): for i in range(len(grid)): for j in range(len(grid[i])): print(grid[i][j], \\" \\", end=\\"\\") print() # make each cell follow the game rules def updateGrid(grid): newGrid = [[0 for x in range(len(grid[0]))] for y in range(len(grid))] for i in range(len(grid)): for j in range(len(grid[i])): # calculate the current cell's neighbors neighbors = 0 for k in range(-1, 2): for l in range(-1, 2): if k == 0 and l == 0: continue elif (i+k >= 0 and i+k < len(grid) and j+l >= 0 and j+l < len(grid[i])): neighbors += grid[i+k][j+l] # rule 1 and rule 3 if (grid[i][j] == 1 and (neighbors < 2 or neighbors > 3)): newGrid[i][j] = 0 # rule 4 elif (grid[i][j] == 0 and neighbors == 3): newGrid[i][j] = 1 # rule 2 else: newGrid[i][j] = grid[i][j] return newGrid size = 10 grid = createGrid(size, size) grid = initGrid(grid) # display the initial grid print(\\"Initial Grid\\") display(grid) # update the grid for 25 iterations for i in range(25): print(\\"Iteration\\", i+1) grid = updateGrid(grid) display(grid)"},{"prompt":"Create a Python program that counts how many times each word appears in a given sentence. The quick brown fox jumps over the lazy dog","completion":"sentence = 'The quick brown fox jumps over the lazy dog' # Split the sentence into individual words words = sentence.split(' ') # Create an empty dictionary word_count = {} # Count the number of times each word appears for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 # Print the results for word in word_count: print(\\"{}: {}\\".format(word, word_count[word]))"},{"prompt":"Create a recursive function in Python to calculate the factorial of the following number: 7","completion":"def factorial(x): if x == 0: return 1 else: return x * factorial(x-1) x = 7 factorial_of_x = factorial(x) print(\\"The factorial of {} is {}\\".format(x, factorial_of_x))"},{"prompt":"Generate a list comprehensions in Python that takes a positive integer and creates a list with all its factors. 15","completion":"factors = [list_element for list_element in range(1,15+1) if 15%list_element == 0]"},{"prompt":"Generate a sort function to order a list of numbers by their frequency in Python. nums = [1, 1, 3, 5, 3, 3, 3, 5, 6]","completion":"def sort_by_freq(nums): \\"\\"\\" A sort function to order a list of numbers by their frequency. Parameters ---------- nums : List A list of numbers Returns ------- List The given list of numbers sorted by their frequency \\"\\"\\" freq_map = {} for num in nums: if num not in freq_map: freq_map[num] = 0 freq_map[num] += 1 sorted_nums = sorted(freq_map, key=freq_map.get, reverse=True) return sorted_nums"},{"prompt":"Create a password generator using Python that places random characters, numbers, and symbols into an output phrase.","completion":"import string import random def password_generator(length): password_characters = string.ascii_letters + string.digits + string.punctuation new_password = \\"\\".join(random.choice(password_characters) for i in range(length)) return new_password"},{"prompt":"Create a web application using Django with two models called 'User' and 'Post', where 'User' has a onetomany relationship with 'Post'.","completion":"# Create a project django-admin startproject MyProject # Create an app python manage.py startapp MyApp # Create the 'User' model in 'models.py' from django.db import models class User(models.Model): # User fields name = models.CharField(max_length=255) age = models.PositiveIntegerField() def __str__(self): return self.name # Create the 'Post' model in 'models.py' class Post(models.Model): # Post fields title = models.CharField(max_length=255) content = models.TextField() user = models.ForeignKey(User, on_delete=models.CASCADE) def __str__(self): return self.title # Register the models in 'admin.py' from django.contrib import admin from .models import User, Post admin.site.register(User) admin.site.register(Post)"},{"prompt":"Create a Python program to check if a given string is an anagram or not. An anagram is a word that can be rearranged to form another word.","completion":"def is_anagram(word1, word2): list_word1 = sorted(list(word1)) list_word2 = sorted(list(word2)) return list_word1 == list_word2"},{"prompt":"Generate a machine learning model in Python that can predict the probability of success in a given project.","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # Load the dataset df = pd.read_csv('data.csv') # Separate the target variable and input variables X = df.drop('SuccessProb', axis=1) y = df['SuccessProb'] # Split data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) #Build the logistic regression model model = LogisticRegression() model.fit(X_train, y_train) # Make predictions predictions = model.predict_proba(X_test)"},{"prompt":"Create an algorithm in Python that computes a Fibonacci sequence up to a given index. Index: 7","completion":"def fibonacci_seq(n): if n < 0: raise ValueError(\\"Index must be a positive integer.\\") elif n == 0: return 0 elif n == 1: return 1 else: a = 0 b = 1 for i in range(2, n + 1): c = a + b a = b b = c return c fib_7 = fibonacci_seq(7) print(fib_7)"},{"prompt":"Generate a structured array from a given dictionary in Python. dictionary = { name: John, age: 24, nationality: American }","completion":"import numpy as np data = np.array(list(dictionary.values()), dtype=[('name','U20'),('age','i4'),('nationality','U10')] )"},{"prompt":"Code a Bubble Sort routine in Python.","completion":"def bubble_sort(unsorted_list): n = len(unsorted_list) for i in range(n): for j in range(0, n-i-1): if unsorted_list[j] > unsorted_list[j+1] : unsorted_list[j], unsorted_list[j+1] = unsorted_list[j+1], unsorted_list[j] return unsorted_list"},{"prompt":"Create a machine learning model in Python that classifies handwritten digits. Not applicable","completion":"import tensorflow as tf from tensorflow.keras.datasets import mnist # Get train and test data (x_train, y_train), (x_test, y_test) = mnist.load_data() # Reshape data x_train = x_train.reshape(60000, 784) x_test = x_test.reshape(10000, 784) x_train = x_train.astype('float32') x_test = x_test.astype('float32') # Normalize data x_train /= 255 x_test /= 255 # Build model model = tf.keras.models.Sequential() model.add(tf.keras.layers.Dense(128, activation='relu', input_shape=(784,))) model.add(tf.keras.layers.Dense(10, activation='softmax')) # Compile the model model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy']) # Train the model model.fit(x_train, y_train, epochs=10) # Evaluate model accuracy = model.evaluate(x_test, y_test)[1] print('Accuracy of model:', accuracy)"},{"prompt":"Create a Python program to sort a list of numbers from lowest to highest. [3, 7, 2, 1, 19]","completion":"def sort_list(nums): for i in range(len(nums)): min_index = i for j in range(i+1, len(nums)): if nums[min_index] > nums[j]: min_index = j nums[i], nums[min_index] = nums[min_index], nums[i] return nums print(sort_list([3, 7, 2, 1, 19])) # Output: [1, 2, 3, 7, 19]"},{"prompt":"Can you implement a function in Python that takes two strings, and return the longest common substring?","completion":"def longest_common_substring(s1, s2): dp = [[0 for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)] longest_len = 0 longest_string = \\"\\" for i in range(1, len(s1) + 1): for j in range(1, len(s2) + 1): if s1[i - 1] == s2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 if dp[i][j] > longest_len: longest_len = dp[i][j] longest_string = s1[i - longest_len:i] else: dp[i][j] = 0 return longest_string"},{"prompt":"Create a web API in Python to access a database of movies and actors. The API should have endpoints for getting a list of movies, getting actors for a movie, adding an actor to a movie, and deleting an actor from a movie Not applicable","completion":"import sqlite3 from flask import Flask, jsonify, request, abort # Initial setup of a Flask application app = Flask(__name__) conn = sqlite3.connect('movies.db') # SQL queries # 1 - Create the tables in Database sql_create_movies_table = \\"\\"\\" CREATE TABLE IF NOT EXISTS movies ( id integer PRIMARY KEY, title text NOT NULL ); \\"\\"\\" sql_create_actors_table = \\"\\"\\"CREATE TABLE IF NOT EXISTS actors ( id integer PRIMARY KEY, name text NOT NULL, movie_id integer NOT NULL, FOREIGN KEY (movie_id) REFERENCES movies (id) );\\"\\"\\" # 2 - Create two functions to insert Movie and Actor information into the Database def create_new_movie(title): with conn: cur = conn.cursor() cur.execute(\\"INSERT INTO movies (title) VALUES (?)\\", (title,)) return cur.lastrowid def create_new_actor(name, movie_id): with conn: cur = conn.cursor() cur.execute(\\"INSERT INTO actors (name, movie_id) VALUES (?,?)\\", (name, movie_id)) return cur.lastrowid # 3 - Create a function to get a list of movies def get_all_movies(): cur = conn.cursor() cur.execute(\\"SELECT * FROM movies\\") rows = cur.fetchall() return rows # 4 - Create a function to get a list of actors for a given movie def get_all_actors(movie_id): cur = conn.cursor() cur.execute(\\"SELECT * FROM actors WHERE movie_id=?\\", (movie_id)) rows = cur.fetchall() return rows # 5 - Create two endpoints (POST and DELETE) to modify the actors of the movie @app.route('/movies/<int:movie_id>/actors', methods=['POST']) def add_actor(movie_id): error = None if not request.json: abort(400) if 'name' not in request.json: abort(400) if 'movie_id' not in request.json: abort(400) name = request.json['name'] movie_id = request.json['movie_id'] try: actor_id = create_new_actor(name, movie_id) return jsonify({'actor_id': actor_id}), 201 except: error = 'Error inserting actor into the database.' return jsonify({'error': error}), 500 @app.route('/movies/<int:movie_id>/actors/<int:actor_id>', methods=['DELETE']) def delete_actor(movie_id, actor_id): with conn: cur = conn.cursor() cur.execute(\\"DELETE FROM actors WHERE id=?\\", (actor_id,)) rows = cur.fetchall() return jsonify({'result': True}) if __name__ == '__main__': # Create tables conn.execute(sql_create_movies_table) conn.execute(sql_create_actors_table) # Run the applications app.run()"},{"prompt":"Write Python code to convert Fahrenheit temperature to Celsius.","completion":"def convert_to_celsius(fahrenheit): celsius = (fahrenheit - 32) * 5 / 9 return celsius fahrenheit = 32 celsius = convert_to_celsius(fahrenheit) print(f\\"Fahrenheit: {fahrenheit}, Celsius: {celsius}\\")"},{"prompt":"Create a Python script to create a data visualisation of the data provided. [5, 10, 15, 20, 25, 30, 35, 40, 45]","completion":"import matplotlib.pyplot as plt data = [5, 10, 15, 20, 25, 30, 35, 40, 45] plt.plot(data) # formatting the text plt.title('Data Visualisation') plt.xlabel('Data Points') plt.ylabel('Value') # function to show the plot plt.show()"},{"prompt":"Create a function to encode a string using the Caesar cipher in Python. string = the quick brown fox encryption_key = 3","completion":"def caesar_encrypt(string, encryption_key): encrypted_string = \\"\\" for char in string: # convert char to ASCII code ascii_code = ord(char) # shift the char by given encryption_key shifted_char = ascii_code + encryption_key # convert shifted_char to its character form encrypted_char = chr(shifted_char) # append the encrypted_char to encrypted_string encrypted_string += encrypted_char return encrypted_string"},{"prompt":"Generate a while loop in Python to print numbers in reverse from 15 to 10.","completion":"num = 15 while num >= 10: print(num) num -= 1"},{"prompt":"Develop a Python program to print a value based on a comparison between two numbers a = 10 b = 20","completion":"if a < b: print(\\"A is less than B\\") else: print(\\"A is not less than B\\")"},{"prompt":"Set the \`settings.base.prepopulate\` to 0 in Production to save 1x DAL hit every page. If \`pop_list\` is not equal to 0, set \`table\` to \`db[auth.settings.table_group_name]\`. If \`db(table.id > 0).select(table.id, limitby=(0, 1)).first()\` is true, set \`pop_list\` to an empty list. If \`pop_list\` is not a list or tuple, set \`pop_list\` to a list containing \`pop_list\`. If the length of \`pop_list\` is greater than 0, populate default roles and permissions, configure scheduled tasks, import prepopulate data from CSV, update location tree, and populate stats_demographic_aggregate and vulnerability_aggregate.","completion":"# -*- coding: utf-8 -*- # 1st-run initialisation # Set settings.base.prepopulate to 0 in Production # (to save 1x DAL hit every page). pop_list = settings.get_base_prepopulate() if pop_list == 0: pop_list = [] else: table = db[auth.settings.table_group_name] # The query used here takes 2/3 the time of .count(). if db(table.id > 0).select(table.id, limitby=(0, 1)).first(): pop_list = [] if not isinstance(pop_list, (list, tuple)): pop_list = [pop_list] if len(pop_list) > 0: # ========================================================================= # Populate default roles and permissions # # Allow debug import sys print >> sys.stdout, \\"Please be patient whilst the database is populated\\" # Shortcuts acl = auth.permission sysroles = auth.S3_SYSTEM_ROLES create_role = auth.s3_create_role #update_acls = auth.s3_update_acls # Do not remove or change order of these 5 definitions (System Roles): create_role(\\"Administrator\\", \\"System Administrator - can access & make changes to any data\\", uid=sysroles.ADMIN, system=True, protected=True) create_role(\\"Authenticated\\", \\"Authenticated - all logged-in users\\", uid=sysroles.AUTHENTICATED, protected=True) create_role(\\"Anonymous\\", \\"Unauthenticated users\\", # Allow unauthenticated users to view the list of organisations # so they can select an organisation when registering dict(t=\\"org_organisation\\", uacl=acl.READ, entity=\\"any\\"), # Allow unauthenticated users to see the list of sites for an # org when registering dict(c=\\"org\\", f=\\"sites_for_org\\", uacl=acl.READ, entity=\\"any\\"), uid=sysroles.ANONYMOUS, protected=True) # Primarily for Security Policy 2 create_role(\\"Editor\\", \\"Editor - can access & make changes to any unprotected data\\", uid=sysroles.EDITOR, system=True, protected=True) # MapAdmin map_admin = create_role(\\"MapAdmin\\", \\"MapAdmin - allowed access to edit the MapService Catalogue\\", dict(c=\\"gis\\", uacl=acl.ALL, oacl=acl.ALL), dict(c=\\"gis\\", f=\\"location\\", uacl=acl.ALL, oacl=acl.ALL), uid=sysroles.MAP_ADMIN, system=True, protected=True) # OrgAdmin (policies 6, 7 and 8) create_role(\\"OrgAdmin\\", \\"OrgAdmin - allowed to manage user roles for entity realms\\", uid=sysroles.ORG_ADMIN, system=True, protected=True) # Enable shortcuts (needed by default.py) system_roles = auth.get_system_roles() ADMIN = system_roles.ADMIN AUTHENTICATED = system_roles.AUTHENTICATED ANONYMOUS = system_roles.ANONYMOUS EDITOR = system_roles.EDITOR MAP_ADMIN = system_roles.MAP_ADMIN ORG_ADMIN = system_roles.ORG_ADMIN # ========================================================================= # Configure Scheduled Tasks # has_module = settings.has_module if has_module(\\"msg\\"): # Send Messages from Outbox # SMS every minute s3task.schedule_task(\\"msg_process_outbox\\", vars={\\"contact_method\\":\\"SMS\\"}, period=120, # seconds timeout=120, # seconds repeats=0 # unlimited ) # Emails every 5 minutes s3task.schedule_task(\\"msg_process_outbox\\", vars={\\"contact_method\\":\\"EMAIL\\"}, period=300, # seconds timeout=300, # seconds repeats=0 # unlimited ) # Tweets every minute #s3task.schedule_task(\\"msg_process_outbox\\", # vars={\\"contact_method\\":\\"TWITTER\\"}, # period=120, # seconds # timeout=120, # seconds # repeats=0 # unlimited # ) # Subscription notifications s3task.schedule_task(\\"notify_check_subscriptions\\", period=300, timeout=300, repeats=0) # Daily maintenance s3task.schedule_task(\\"maintenance\\", vars={\\"period\\":\\"daily\\"}, period=86400, # seconds, so 1/day timeout=600, # seconds repeats=0 # unlimited ) # ========================================================================= # Import PrePopulate data # # Override authorization auth.override = True # Load all Models to ensure all DB tables present s3db.load_all_models() # Shortcuts path_join = os.path.join request_folder = request.folder if settings.get_auth_opt_in_to_email(): table = db.pr_group for team in settings.get_auth_opt_in_team_list(): table.insert(name = team, group_type = 5) # Synchronisation db.sync_config.insert() # Defaults are fine # Person Registry tablename = \\"pr_person\\" # Add extra indexes on search fields # Should work for our 3 supported databases: sqlite, MySQL & PostgreSQL field = \\"first_name\\" db.executesql(\\"CREATE INDEX %s__idx on %s(%s);\\" % (field, tablename, field)) field = \\"middle_name\\" db.executesql(\\"CREATE INDEX %s__idx on %s(%s);\\" % (field, tablename, field)) field = \\"last_name\\" db.executesql(\\"CREATE INDEX %s__idx on %s(%s);\\" % (field, tablename, field)) # GIS # Add extra index on search field # Should work for our 3 supported databases: sqlite, MySQL & PostgreSQL tablename = \\"gis_location\\" field = \\"name\\" db.executesql(\\"CREATE INDEX %s__idx on %s(%s);\\" % (field, tablename, field)) # Messaging Module if has_module(\\"msg\\"): update_super = s3db.update_super # To read inbound email, set username (email address), password, etc. # here. Insert multiple records for multiple email sources. table = db.msg_email_channel id = table.insert(server = \\"imap.gmail.com\\", protocol = \\"imap\\", use_ssl = True, port = 993, username = \\"example-username\\", password = \\"password\\", delete_from_server = False ) update_super(table, dict(id=id)) # Need entries for the Settings/1/Update URLs to work table = db.msg_sms_outbound_gateway id = table.insert(outgoing_sms_handler = \\"WEB_API\\") update_super(table, dict(id=id)) table = db.msg_sms_modem_channel id = table.insert(modem_baud = 115200) update_super(table, dict(id=id)) table = db.msg_sms_webapi_channel id = table.insert(to_variable = \\"to\\") update_super(table, dict(id=id)) table = db.msg_sms_smtp_channel id = table.insert(address=\\"changeme\\") update_super(table, dict(id=id)) table = db.msg_tropo_channel id = table.insert(token_messaging = \\"\\") update_super(table, dict(id=id)) table = db.msg_twitter_channel id = table.insert(enabled = False) update_super(table, dict(id=id)) # Budget Module if has_module(\\"budget\\"): db.budget_parameter.insert() # Defaults are fine # Climate Module if has_module(\\"climate\\"): s3db.climate_first_run() # CAP module if has_module(\\"cap\\"): db.cap_alert.insert(template_title=\\"Default\\", is_template=True) # Incident Reporting System if has_module(\\"irs\\"): # Categories visible to ends-users by default table = db.irs_icategory table.insert(code = \\"flood\\") table.insert(code = \\"geophysical.landslide\\") table.insert(code = \\"roadway.bridgeClosure\\") table.insert(code = \\"roadway.roadwayClosure\\") table.insert(code = \\"other.buildingCollapsed\\") table.insert(code = \\"other.peopleTrapped\\") table.insert(code = \\"other.powerFailure\\") # Supply Module if has_module(\\"supply\\"): db.supply_catalog.insert(name = settings.get_supply_catalog_default()) # Ensure DB population committed when running through shell db.commit() # ========================================================================= # PrePopulate import (from CSV) # # Create the bulk Importer object bi = s3base.S3BulkImporter() s3.import_role = bi.import_role s3.import_user = bi.import_user s3.import_image = bi.import_image s3.import_remote_csv = bi.import_remote_csv # Relax strict email-matching rule for import updates of person records email_required = settings.get_pr_import_update_requires_email() settings.pr.import_update_requires_email = False # Additional settings for user table imports: s3db.configure(\\"auth_user\\", onaccept = lambda form: auth.s3_approve_user(form.vars)) s3db.add_components(\\"auth_user\\", auth_membership=\\"user_id\\") # Flag that Assets are being imported, not synced s3.asset_import = True # Allow population via shell scripts if not request.env.request_method: request.env.request_method = \\"GET\\" grandTotalStart = datetime.datetime.now() for pop_setting in pop_list: start = datetime.datetime.now() # Clear Tasklist bi.tasks = [] # Import data specific to the prepopulate setting if pop_setting == 1: # Populate with the default data path = path_join(request_folder, \\"private\\", \\"templates\\", \\"default\\") bi.perform_tasks(path) else: path = path_join(request_folder, \\"private\\", \\"templates\\", pop_setting) if os.path.exists(path): bi.perform_tasks(path) else: print >> sys.stderr, \\"Unable to install data %s no valid directory found\\" % pop_setting grandTotalEnd = datetime.datetime.now() duration = grandTotalEnd - grandTotalStart try: # Python 2.7 duration = '{:.2f}'.format(duration.total_seconds()/60) print >> sys.stdout, \\"Pre-populate task completed in %s mins\\" % duration except AttributeError: # older Python print >> sys.stdout, \\"Pre-populate task completed in %s\\" % duration bi.resultList = [] for errorLine in bi.errorList: try: print >> sys.stderr, errorLine except: s3_unicode = s3base.s3_unicode _errorLine = \\"\\" for i in range(0, len(errorLine)): try: _errorLine += s3_unicode(errorline[i]) except: pass print >> sys.stderr, _errorLine # Restore setting for strict email-matching settings.pr.import_update_requires_email = email_required # Restore Auth auth.override = False # Update Location Tree (disabled during prepop) start = datetime.datetime.now() gis.update_location_tree() end = datetime.datetime.now() print >> sys.stdout, \\"Location Tree update completed in %s\\" % (end - start) # Countries are only editable by MapAdmin db(db.gis_location.level == \\"L0\\").update(owned_by_group=map_admin) if has_module(\\"stats\\"): # Populate stats_demographic_aggregate (disabled during prepop) # - needs to be done after locations start = datetime.datetime.now() s3db.stats_demographic_rebuild_all_aggregates() end = datetime.datetime.now() print >> sys.stdout, \\"Demographic data aggregation completed in %s\\" % (end - start) if has_module(\\"vulnerability\\"): # Populate vulnerability_aggregate (disabled during prepop) # - needs to be done after locations start = datetime.datetime.now() s3db.vulnerability_rebuild_all_aggregates() end = datetime.datetime.now() print >> sys.stdout, \\"Vulnerability data aggregation completed in %s\\" % (end - start) grandTotalEnd = datetime.datetime.now() duration = grandTotalEnd - grandTotalStart try: # Python 2.7 duration = '{:.2f}'.format(duration.total_seconds()/60) print >> sys.stdout, \\"Pre-populate completed in %s mins\\" % duration except AttributeError: # older Python print >> sys.stdout, \\"Pre-populate completed in %s\\" % duration # Restore view response.view = \\"default/index.html\\" # END ========================================================================="},{"prompt":"Create a Python program that generates and prints a schedule according to given parameters. Working hours: 9am to 5pm Tasks: [(Task 1, 2h), (Task 2, 3h),(Task 3, 4h)]","completion":"def print_schedule(working_hours, tasks): start = working_hours[0] end = working_hours[1] time = start print(\\"| Tasks | Start | End | Duration |\\") print(\\"| ----- | ----- | --- | -------- |\\") for task in tasks: task_name, duration = task time_start = time time_end = time + duration if time_end > end: print(\\"Can not finish all tasks within given working hours\\") break else: print(\\"| {0} | {1} | {2} | {3} |\\".format(task_name, time_start, time_end, duration)) time = time + duration working_hours = (9, 17) tasks = [(\\"Task 1\\", 2), (\\"Task 2\\", 3), (\\"Task 3\\", 4)] print_schedule(working_hours, tasks)"},{"prompt":"Design a data structure in Python to store email messages and associated metadata. Not applicable","completion":"class Message(object): def __init__(self,subject, sender, receiver, body): self.subject = subject self.sender = sender self.receiver = receiver self.body = body class MessageStore(object): def __init__(self, messages): self.messages = messages self.indexes = {} def addMessage(self,message): message_id = len(self.messages) + 1 self.messages.append(message) self.indexes[message.subject] = message_id def getMessage(self,message_id): if message_id in self.indexes.values(): return self.messages[message_id - 1] # Array index is 1 lower than message_id else: return None"},{"prompt":"Create a hashtable using python dictionary.","completion":"class HashTable: def __init__(self): self.table = {} def put(self, key, value): # Get the hash for the given key hash_value = self._hash(key) # If the hash value is not in the table, create an empty list if hash_value not in self.table: self.table[hash_value] = [] # Append the value to the list self.table[hash_value].append((key, value)) def get(self, key): # Get the hash for the given key hash_value = self._hash(key) # If the hash is not in the table, return None if hash_value not in self.table: return None # Search the list of (key, value) pairs for a matching key for k, v in self.table[hash_value]: if key == k: return v # If no matching key is found, return None return None def _hash(self, key): # Generate a simple hash of the given key return hash(key) % 1000"},{"prompt":"Create an API endpoint in Python Flask to store and retrieve product details from a MongoDB. Not applicable","completion":"from flask import Flask, jsonify, request from flask_pymongo import PyMongo app = Flask(name) mongo = PyMongo(app) @app.route('/products', methods=['POST']) def add_product(): data = request.get_json() mongo.db.products.insert_one(data) return jsonify({'message': 'Product added successfully!'}) @app.route('/products/int:pid', methods=['GET']) def get_product(pid): product = mongo.db.products.find_one({'pid': pid}) return jsonify(product)"},{"prompt":"Write a function in Python that takes a list of strings and returns all unique strings from the list. [one, two, three, two, four, five, six]","completion":"def find_unique_strings(strings): unique_strings = [] for s in strings: if s not in unique_strings: unique_strings.append(s) return unique_strings"},{"prompt":"Design a Python program that takes in an email address, checks if it is valid, and prints out an appropriate error message if it is not valid.","completion":"import re def validate_email(address): regex = '^w+([.-]?w+)*@w+([.-]?w+)*(.w{2,3})+' if re.search(regex, address): return True else: return False def main(): address = input('Enter email address: ') if validate_email(address): print(\\"Valid email address\\") else: print(\\"Invalid email address!\\") main()"},{"prompt":"Create a program in Python that takes user input and prints out its type.","completion":"user_input = input('Please enter anything: ') print('The type of user input is:', type(user_input))"},{"prompt":"Given a set of python classes, generate code that creates an instance of each class and prints the attributes and methods associated with each instance. class Car: def __init__(self, make, model, year): self.make = make self.model = model self.year = year class Dog: def __init__(self, breed, name): self.breed = breed self.name = name","completion":"# Create instances of each class car1 = Car('Toyota', 'Camry', '2018') dog1 = Dog('Labrador', 'Max') # Print attributes and methods print(\\"The car is a {} {} manufactured in {}\\".format(car1.make, car1.model, car1.year)) print(\\"The dog is a {} named {}\\".format(dog1.breed, dog1.name)) # Print the instance methods of each class print(\\"The car class has these methods: \\", dir(car1)) print(\\"The dog class has these methods: \\", dir(dog1))"},{"prompt":"Create an HTML page with a form that allows a user to enter the coordinates of two cities and returns the shortest path from source to destination in Python.","completion":"<html> <head> <title>Shortest Path Finder</title> </head> <body> <form method=\\"post\\" action=\\"pathFinder.py\\"> <input type=\\"text\\" name=\\"source\\" placeholder=\\"Source City\\" /> <input type=\\"text\\" name=\\"destination\\" placeholder=\\"Destination City\\" /> <input type=\\"submit\\" value=\\"Get Shortest Path\\" /> </form> </body> </html>"},{"prompt":"Write a Python script to print the current date in the following format: Monday, October 5th, 2020.","completion":"import datetime date_info = datetime.datetime.today() day_name = date_info.strftime(\\"%A\\") month_name = date_info.strftime(\\"%B\\") date_num = date_info.strftime(\\"%-d\\") year_num = date_info.strftime(\\"%Y\\") print(f\\"{day_name}, {month_name} {date_num}th, {year_num}\\")"},{"prompt":"Optimize a Python script that multiplies two matrices. The script should work with any two matrices given as input. m1 = [[1, 2], [3, 4]] m2 = [[2, 0], [1, 2]]","completion":"def multiply_matrices(m1, m2): if len(m1[0]) != len(m2): raise ValueError('The matrices cannot be multiplied.') # Create the result matrix # Dimensions would be m1 rows x m2 columns result = [[0 for col in range(len(m2[0]))] for row in range(len(m1))] for i in range(len(m1)): # Iterate through rows of m1 for j in range(len(m2[0])): # Iterate through columns of m2 for k in range(len(m2)): result[i][j] += m1[i][k] * m2[k][j] return result # Test m1 = [[1, 2], [3, 4]] m2 = [[2, 0], [1, 2]] result = multiply_matrices(m1, m2) for row in result: print(row) # Output # [4, 4] # [10, 8]"},{"prompt":"Create a Python program to compare two strings and return the percentage of characters that match. stackoverflow, stackerflow","completion":"def compare_strings( string1, string2 ): s1, s2 = set(string1), set(string2) intersection = s1.intersection(s2) return (len(intersection) * 100) / len(s1)"},{"prompt":"Generate a Python script to find the top 5 most popular items in a given list. [1, 3, 5, 3, 6, 2, 4, 6, 8, 4]","completion":"from collections import Counter # Get the input list list = [1, 3, 5, 3, 6, 2, 4, 6, 8, 4] # Use Counter library to get a dictionary of the top 5 items top_five = Counter(list).most_common(5) # Print the top five items print(\\"Top five items in the list:\\") for key, val in top_five: print(key, \\":\\", val, \\"occurrences\\")"},{"prompt":"Create an Python program that computes the median value of an array of numbers. arr = [1, 5, 2, 4, 3, 6]","completion":"def median(arr): arr.sort() if len(arr) % 2 != 0: return arr[int(len(arr)/2)] else: return (arr[int(len(arr)/2)] + arr[int(len(arr)/2)-1]) / 2 medianValue = median(arr) print(medianValue)"},{"prompt":"Generate a function to check for palindrome strings in Python.","completion":"def check_palindrome(string): reversed_string = string[::-1] if string == reversed_string: return True else: return False"},{"prompt":"Create a python script that sorts a list of tuples based on the second element. tuples = [('a',3), ('d', 1), ('c', 2)]","completion":"sortedTuples = sorted(tuples, key = lambda x: x[1])"},{"prompt":"Create a program in Python to generate random passwords of 8 characters.","completion":"import random import string # Random password generator def randomString(stringLength=8): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(stringLength)) print (\\"Random Password is:\\", randomString())"},{"prompt":"Write a Python program to implement a decision tree classifier to classify iris flowers into three categories (setosa, versicolor and virginica). The iris dataset consists of 50 samples from each of three species of Iris (Iris setosa, Iris virginica and Iris versicolor). Four features were measured from each sample: the length and the width of the sepals and petals, in centimeters.","completion":"import numpy as np from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.datasets import load_iris # load data iris = load_iris() X = iris.data y = iris.target # split data into train and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0) # Training dtree_model = DecisionTreeClassifier(max_depth=2).fit(X_train, y_train) # Testing dtree_predictions = dtree_model.predict(X_test) # Checking accuracy print(\\"Accuracy:\\",np.mean(dtree_predictions==y_test))"},{"prompt":"Create a Python list comprehension to find the sum of even numbers from two given lists. [1, 2, 3, 4] [9, 8, 7, 6]","completion":"even_nums_sum = [x + y for x in [1, 2, 3, 4] for y in [9, 8, 7, 6] if x % 2 == 0 and y % 2 == 0] print(sum(even_nums_sum))"},{"prompt":"Write a python function to find the maximum of two number without using a maximum function.","completion":"def find_max(a, b): if a > b: return a else: return b"},{"prompt":"Write a Python program to print all the numbers from the given list which are divisible by 7. [7, 14, 21, 28, 35, 42, 49]","completion":"def divisible_by_seven(number_list): for i in number_list: if i % 7 == 0: print(i)"},{"prompt":"Create a sentiment analysis system in Python using NLTK to provide a score of how positive or negative a review is. Not applicable","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer # Create a SentimentIntensityAnalzyer analyzer = SentimentIntensityAnalyzer() # Calculate scores scores = analyzer.polarity_scores(text) # Print scores print(scores)"},{"prompt":"Create a program in Python that can analyze over a million articles to find the most commonly used words. A folder containing one million articles in text files.","completion":"import os from collections import Counter from nltk import word_tokenize # Specify the directory containing the files directory = 'articles_folder' # Initialize a Counter object word_counts = Counter() # Iterate through all the files in the directory for filename in os.listdir(directory): if filename.endswith('.txt'): with open(os.path.join(directory, filename)) as f: for line in f: tokens = word_tokenize(line) word_counts.update(tokens) # Print the most common words for word, count in word_counts.most_common(20): print(f'{word}: {count}')"},{"prompt":"Generate a function in Python to sort a given list of strings by their length. ['cat', 'dog', 'goat', 'tiger', 'bird']","completion":"def sortByLength(strings): return sorted(strings, key=len) strings = ['cat', 'dog', 'goat', 'tiger', 'bird'] print(sortByLength(strings)) # Output: ['cat', 'dog', 'goat', 'bird', 'tiger']"},{"prompt":"Design a Python script to print the characters in a string in reverse order.","completion":"def reverseString(string): reversed = \\"\\" for character in string: reversed = character + reversed return reversed"},{"prompt":"Create a function in Python to count the number of occurrences of a particular letter in a string.","completion":"def CountLetterOccurrences(str, letter): return str.count(letter)"},{"prompt":"Create a Python program to generate a tic tac toe board with X and O characters. Not applicable","completion":"import random # Function to print the tic tac toe board def print_board(board): for i in range(3): for j in range(3): print(board[i][j], end=\\" \\") print() print() # Function to generate a random tic tac toe board def generate_board(): board = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] for i in range(3): for j in range(3): board[i][j] = random.choice([\\"X\\", \\"O\\"]) print_board(board) generate_board()"},{"prompt":"Create a Python class called Circle which takes its radius as an argument. This class should have a method called area which calculates the area of the circle and a method called circumference which calculates the circumference Not applicable","completion":"class Circle: def __init__(self, radius): self.radius = radius def area(self): return 3.14 * (self.radius ** 2) def circumference(self): return 2 * 3.14 * self.radius"},{"prompt":"Write a script in Python to return the cryptographic hash of a string. string = 'Welcome to the world of programming!'","completion":"import hashlib def get_hash(string): sha1 = hashlib.sha1() sha1.update(string.encode('utf-8')) return sha1.hexdigest() print(get_hash(string))"},{"prompt":"Generate a function to find the sum of an element in a nested list in Python. arr = [[1, 2], [3, 4], [5, 6]]","completion":"def sum_of_element(arr): s = 0 for sub_list in arr: for element in sub_list: s += element return s arr = [[1, 2], [3, 4], [5, 6]] total = sum_of_element(arr) print(total)"},{"prompt":"Create a basic genetic algorithm program in Python to identify the optimal parameters for a linear regression model such that it minimizes the mean squarred error. A dataset of two features feature_1 and feature_2.","completion":"import numpy as np from sklearn.linear_model import LinearRegression # Parameters for the genetic algorithm num_generations = 50 # Number of generations population_size = 20 # Population size # Training data X = np.array([[feature_1], [feature_2]]).T y = np.array([[label]]).T # Function to evaluate the fitness of a given individual def get_fitness(individual): lin_ model = LinearRegression() model.fit(X, y) y_pred = model.predict(X) error = mean_squared_error(y_true, y_pred) return error # Function to generate a single member of the population def generate_individual(): individual = [random.uniform(-1, 1) for x in range(2)] return individual # Function to generate a whole population def generate_population(): population = [generate_individual() for x in range(population_size)] return population # Main loop of the genetic algorithm population = generate_population() for generation in range(num_generations): new_population = [] for individual in population: # Evaluate the fitness of the individual fitness = get_fitness(individual) # Select the two best individuals based on their fitness mates = selection(population, fitness) # Crossover new_individual = crossover(mates) # Mutation new_individual = mutation(new_individual) # Add this individual to the new population new_population.append(new_individual) # Set the population to the new one population = new_population # Print the optimal solution optimal_solution = population[0] # Best individual is the first one print(\\"Optimal solution: \\", optimal_solution)"},{"prompt":"Can you write a Python function that takes two strings as arguments, and concatenates them together?","completion":"def concatenate_strings(string1, string2): return string1 + string2"},{"prompt":"Write a Python program to detect whether a given number is a palindrome. middle","completion":"def is_palindrome(n): n = str(n) return n == n[::-1] print(is_palindrome(\\"middle\\"))"},{"prompt":"Design a python program to generate a singly linked list Node Values: 1, 2,3, 4, 5","completion":"class Node: def __init__(self, data): self.data = data self.next = None class LinkedList: def __init__(self): self.head = None # Function to insert a new node at the beginning def push(self, new_data): new_node = Node(new_data) new_node.next = self.head self.head = new_node # Example llist = LinkedList() node_values = [1, 2, 3, 4, 5] for node in node_values: llist.push(node)"},{"prompt":"Develop a function in Python to print out the Fibonacci sequence up to the given number n.","completion":"def printFibonacci(n): if n<0: print('Incorrect input') elif n==0: print(0) elif n==1: print(0,1) else: a=0 b=1 print(a) print(b) for i in range(2,n): c=a+b a=b b=c print(c)"},{"prompt":"mprove the efficiency of a Python program by using functions. arr = [1, 2, 3, 4, 5] def calculate(arr): sum = 0 for i in arr: sum += i print(sum) calculate(arr)","completion":"arr = [1, 2, 3, 4, 5] def calculate(arr): return sum(arr) def main(): print(calculate(arr)) if __name__ == '__main__': main()"},{"prompt":"Develop a program in Python for finding the factorial of a given number. 7","completion":"def factorial(n): if n < 0: return None elif n == 0: return 1 else: result = 1 for i in range(1, n + 1): result *= i return result num = 7 print('factorial of {} is {}'.format(num, factorial(num)))"},{"prompt":"Create a Python program to generate 4 random numbers from 0 9. Not applicable","completion":"import random for i in range(4): num = random.randint(0,9) print(num)"},{"prompt":"Create a program in Python that prints out the first 10 prime numbers. <noinput>","completion":"import math def is_prime(n): if n == 1: return False for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0: return False return True prime_nums = [] for i in range(2, 1000): if is_prime(i): prime_nums.append(i) if len(prime_nums) == 10: break for item in prime_nums: print(item)"},{"prompt":"Create a Python program to generate a random forest model for the given dataset. The dataset contains the following columns: age gender hours per week marital status educatio","completion":"import pandas as pd # Read in the dataset df = pd.read_csv('data.csv') # Specify the feature and target columns features = ['age', 'gender', 'hours_per_week', 'marital_status', 'education'] target = 'income' # Create the random forest model rf = RandomForestClassifier(n_estimators=100) rf.fit(df[features], df[target])"},{"prompt":"Design an algorithm in Python to replace all occurrences of blank spaces in a given string with a string. This is a test string","completion":"def replace_spaces(s,replace_with): return s.replace(\\" \\",replace_with) s = \\"This is a test string\\" replace_with = \\"X\\" print(replace_spaces(s,replace_with))"},{"prompt":"Design a rulebased system in Python to generate natural language questions.","completion":"import re def generate_question(sentence): tokens = re.findall('w+', sentence) if tokens[0] == 'The': question = 'What is' + ' ' + ' '.join(tokens[1:]) + '?' else: question = 'What is the' + ' ' + ' '.join(tokens) + '?' return question"},{"prompt":"Create a webhook to call a Python web service.","completion":"import requests def call_web_service(): API_ENDPOINT = \\"http://example.com/api/v1\\" # Make a post request to call the web service r = requests.post(url= API_ENDPOINT) # Create webhook webhook = call_web_service('http://example.com/callback') # Use the webhook to call the web service requests.post(url = webhook)"},{"prompt":"Create a program in Python to sum the multiples of 3 or 5 between 1 and 1000","completion":"total = 0 for i in range(1,1000): if i % 3 == 0 or i % 5 == 0: total += i print(total)"},{"prompt":"Construct a decision tree model using a given dataset using Python.","completion":"import numpy as np import pandas as pd from sklearn import tree # Load the dataset data = pd.read_csv(\\"data.csv\\") # Create target variable target = data[\\"target\\"] # Create feature variables features = data.drop(columns = [\\"target\\"]) # Create decision tree model model = tree.DecisionTreeClassifier() model.fit(features, target)"},{"prompt":"Construct a function to compute the area of a triangle in Python","completion":"def area_of_triangle(base, height): \\"\\"\\"Compute the area of a triangle in Python Parameters -------------- base: float The length of the triangle's base height: float The measure of the triangle's height Returns -------------- float The area of the triangle \\"\\"\\" return 0.5 * base * height"},{"prompt":"Write a Python program to create a Fibonacci sequence of nlength.","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n-1) + fibonacci(n-2) for i in range(10): print(fibonacci(i))"},{"prompt":"Update the given Python program to print the result in reverse order. numbers = [1, 2, 3, 4, 5, 6]","completion":"numbers = [1, 2, 3, 4, 5, 6] for x in reversed(numbers): print(x)"},{"prompt":"Python code: generate a function to convert a decimal number to a binary number.","completion":"def decToBin(n): binString = \\"\\" while n > 0: binary = n % 2 binString = str(binary) + binString n = n//2 return binString # Driver Code n = int(input(\\"Enter a number: \\")) result = decToBin(n) print(\\"The binary representation is \\", result)"},{"prompt":"Modify the existing Python code below so that it returns the sum of odd numbers less than the input n. n = 10 def sum_odd_numbers(n): result = 0","completion":"def sum_odd_numbers(n): result = 0 for i in range(n): if i % 2 != 0: result += i return result"},{"prompt":"Rewrite the following Java program in Python to calculate the area of the triangle. class Area { double area(double b, double h) { return 0.5 * b * h; } }","completion":"def area(b, h): return 0.5 * b * h"},{"prompt":"Generate a Python program to classify integers between 5 and 5 into negative, zero, and positive.","completion":"def classify_int(x): if x < 0: return 'negative' elif x == 0: return 'zero' elif x > 0: return 'positive'"},{"prompt":"Generate an html page which will accept the user input and send it to a python script. No inpu","completion":"<!DOCTYPE html> <html> <head> <title>Input Page</title> </head> <body> <h1>Input Page</h1> <form action=\\"script.py\\" method=\\"POST\\"> <label>Enter your input: <input type=\\"text\\" name=\\"user_input\\" size=\\"50\\"></label> <input type=\\"submit\\" text=\\"Submit\\"> </form> </body> </html>"},{"prompt":"mplement a linear search algorithm in Python to find the position of a given element in an array.","completion":"def linear_search(arr, element): for i in range(len(arr)): if arr[i] == element: return i return -1"},{"prompt":"Produce a program in python which takes a given list of numbers and creates a dictionary where each number is the key and its multiple of the given number is the value. my_list = [3, 5, 7]","completion":"def create_dictionary(my_list): res = {num: num * 2 for num in my_list} return res # run the code my_list = [3, 5, 7] res = create_dictionary(my_list) print('The dictionary is ' + str(res))"},{"prompt":"Create a Python program to read a CSV with columns A, B, and C, and create a new CSV with only columns A and C.","completion":"import csv def read_csv(filename): with open(filename, 'r') as csv_file: csv_reader = csv.reader(csv_file, delimiter=',') next(csv_reader) # Skip the header for row in csv_reader: yield row def write_csv(filename, rows): with open(filename, 'w') as csv_file: csv_writer = csv.writer(csv_file, delimiter=',', quoting=csv.QUOTE_MINIMAL) csv_writer.writerow(['A', 'C']) for row in rows: csv_writer.writerow([row[0], row[2]]) # Main if __name__ == \\"__main__\\": filename = 'myfile.csv' rows = read_csv(filename) write_csv('newfile.csv', rows)"},{"prompt":"Transform the following algorithm into a functional programming style in Python. def add_number(x,y): total = 0 for i in range(x,y): total += i return total","completion":"def add_number(x, y): return sum(range(x, y))"},{"prompt":"Generate a command which prints the type of any given variable in Python.","completion":"print(type(variable))"},{"prompt":"Write a Python program to split a string into a list of words.","completion":"def split_into_words(text): \\"\\"\\" Splits a string into a list of words \\"\\"\\" # Split the text on whitespace return text.split()"},{"prompt":"Design a program in Python that takes a list of numbers as input and returns the average. Input list: [1,2,3,4,5,6,7]","completion":"# Function to return average def average(lst): # Calculate sum of list sum_num = 0 for x in lst: sum_num += x # Return average return sum_num / len(lst) # Sample List lst = [1, 2, 3, 4, 5, 6, 7] # Calling average function print(average(lst))"},{"prompt":"Create a script in Python to generate the nth term of the Fibonacci series.","completion":"def Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b print(Fibonacci(5))"},{"prompt":"Python, how would you return the last N elements from a list?","completion":"def last_elements(lst, n): return lst[-n:]"},{"prompt":"Design a 1dimensional cellular automata in Python. Cell size: 10","completion":"import numpy as np # Define the automata cell_size = 10 auto = np.zeros(cell_size) # Create the display def display_automata(cells): for cell in cells: if cell == 0: print('â', end=\\"\\") else: print(' ', end='') print() # Iterate the automata for i in range(100): temp_auto = np.copy(auto) for j in range(cell_size): if j == 0: value = temp_auto[-1] ^ temp_auto[j] ^ temp_auto[j + 1] elif j == cell_size - 1: value = temp_auto[j-1] ^ temp_auto[j] ^ temp_auto[0] else: value = temp_auto[j - 1] ^ temp_auto[j] ^ temp_auto[j + 1] auto[j] = value display_automata(auto)"},{"prompt":"Create a python function that takes a string of characters as input and checks if it is a valid identifier. name = myVar","completion":"import string def isValidIdentifier(name): validChar = string.ascii_letters + \\"_\\" if name[0] not in string.ascii_letters: return False for char in name[1:]: if char not in validChar: return False return True validResult = isValidIdentifier(name) print(validResult)"},{"prompt":"Create a Python program that takes two numbers as inputs and returns the list of primes in the range between the two numbers. 2, 10","completion":"def find_primes(start, end): # create a list of numbers # between start and end numbers = range(start, end + 1) # iterate over the list for i in numbers: # check if number is divisible # by any of the numbers # below it for j in range(2, i): if i % j == 0: # if yes, then remove # that number from the list numbers.remove(i) return numbers print(find_primes(2, 10))"},{"prompt":"Create a python program that takes in a list of strings and returns a list of strings with all duplicates removed. [a, b, c, a, b, d]","completion":"def remove_duplicates(lst): new_lst = [] for item in lst: if item not in new_lst: new_lst.append(item) return new_lst result = remove_duplicates([\\"a\\", \\"b\\", \\"c\\", \\"a\\", \\"b\\", \\"d\\"]) print(result)"},{"prompt":"Create a Python program to classify an animal into one of four classes (fish, bird, mammal, reptile) based on its characteristics. The animal is coldblooded, lays eggs, and has scales.","completion":"\\"\\"\\" Create a Python program to classify an animal into one of four classes \\"\\"\\" # define the characteristics is_cold_blooded = True lays_eggs = True has_scales = True # determine the animal class if is_cold_blooded and lays_eggs and has_scales: animal_class = 'Reptile' elif is_cold_blooded and lays_eggs and not has_scales: animal_class = 'Bird' elif is_cold_blooded and not lays_eggs and has_scales: animal_class = 'Fish' elif not is_cold_blooded and not lays_eggs and not has_scales: animal_class = 'Mammal' # print the result print('The animal belongs to class:', animal_class)"},{"prompt":"Write a function in Python to convert a year from Roman Numerals to Arabic numbers. Provide the year in Roman Numerals \`MCMXCVIII\`","completion":"# define a dictionary of Roman Numerals to Arabic numbers roman = { 'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000 } def roman_to_arabic(roman_string): total = 0 #Split the Roman number into characters chars = [char for char in roman_string] #If the length of the Romans is 0, return 0 if (len(chars)==0): return 0 # Start from the end x = len(chars)-1 #Stores previous character last_char = 'I' #Loop through all characters of string while (x>=0): #Store current character current_char = chars[x] #Check if the current character is greater than or equal to last character if (current_char == last_char or roman[current_char]<=roman[last_char]): total+=roman[current_char] else: total-=roman[current_char] last_char = current_char x-=1 return total #Convert MCMXCVIII to Arabic numbers print(roman_to_arabic('MCMXCVIII')) # Output: 1998"},{"prompt":"1. Create a Python file and add the given code to it. 2. Import the necessary modules: logging.handlers, configparser, re, and time. 3. Create a TimedRotatingFileHandler instance with the following parameters: filename=test, when='s', interval=2, backupCount=5, encoding='UTF8'. 4. Set the suffix of the handler to '%Y%m%d%H%M%S.log'. 5. Set the extMatch of the handler to re.compile(r'^d{4}d{2}d{2}d{2}d{2}d{2}.log'). 6. Create a Formatter instance with the format string %(asctime)s %(message)s. 7. Set the formatter of the handler to the Formatter instance created in step 6. 8. Get the root logger using logging.getLogger(). 9. Add the handler to the root logger using root_logger.addHandler(handler). 10. Set the level of the root logger to logging.INFO using root_logger.setLevel(logging.INFO). 11. Create a RotatingFileHandler instance with the following parameters: filename='test.log', maxBytes=1024, backupCount=3. 12. Set the formatter of the handler to the Formatter instance created in step 6. 13. Add the handler to the root logger using root_logger.addHandler(handler2). 14. Define a function named test(). 15. In the test() function, create a loop that iterates 100 times. 16. In each iteration of the loop, log a message to the root logger using root_logger.info(test + str(i)). 17. Define a function named test_config(). 18. In the test_config() function, create a ConfigParser instance using configparser.ConfigParser(). 19. Read the configuration file 'config.ini' using conf.read('config.ini', encoding='utf8'). 20. Get the values of the 'name' and 'password' keys in the 'login' section using conf.get('login', 'name') and conf.get('login', 'password'). 21. If the values of 'name' and 'password' are 'name' and 'password' respectively, prompt the user to input their login name and password using input(). 22. Set the 'name' and 'password' values in the 'login' section to the values entered by the user using conf.set('login', 'name', name) and conf.set('login', 'password', passwd). 23. Write the changes to the configuration file using with open('config.ini', 'w', encoding='utf8') as f: conf.write(f). 24. Print the values of 'name' and 'password' using print(name) and print(passwd). 25. Call the test_config() function if the Python file is being run as the main program using if __name__ == '__main__': test_config().","completion":"#! /usr/bin/env python # -*- coding: utf-8 -*- import logging.handlers import configparser import re import time handler = logging.handlers.TimedRotatingFileHandler(filename=\\"test\\", when='s', interval=2, backupCount=5, encoding='UTF-8') handler.suffix = '%Y-%m-%d-%H-%M-%S.log' handler.extMatch = re.compile(r'^d{4}-d{2}-d{2}-d{2}-d{2}-d{2}.log') formatter = logging.Formatter(\\"%(asctime)s %(message)s\\") handler.setFormatter(formatter) root_logger = logging.getLogger() root_logger.addHandler(handler) root_logger.setLevel(logging.INFO) handler2 = logging.handlers.RotatingFileHandler(filename='test.log', maxBytes=1024, backupCount= 3) handler2.setFormatter(formatter) # root_logger.removeHandler(handler) root_logger.addHandler(handler2) def test(): for i in range(100): root_logger.info(\\"test\\" + str(i)) # time.sleep(1) def test_config(): conf = configparser.ConfigParser() conf.read('config.ini', encoding='utf-8') name = conf.get('login', 'name') passwd = conf.get('login', 'password') if name == 'name' and passwd == 'password': name = input(\\"Please input your login name: \\") passwd = input(\\"Please input your login password: \\") conf.set('login', 'name', name) conf.set('login', 'password', passwd) with open('config.ini', 'w', encoding='utf-8') as f: conf.write(f) print(name) print(passwd) if __name__ == '__main__': test_config()"},{"prompt":"Create a function in Python which calculates the number of days between two dates.","completion":"def days_between_dates(date1, date2): delta = date2 - date1 return delta.days"},{"prompt":"Create a python program to convert a string containing comma seperated values into a list of integers. 12,34,55,67","completion":"def str_to_list(input_str): result = [int(i) for i in input_str.split(\\",\\")] return result str = \\"12,34,55,67\\" int_list = str_to_list(str) print(int_list) # Output: [12, 34, 55, 67]"},{"prompt":"Design an algorithm in Python to sort an array of strings alphabetically.","completion":"def sort_strings_alphabetically(arr): arr.sort(key=str.lower) return arr"},{"prompt":"Create a Python program for generating the nth Fibonacci number. Not applicable","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"prompt":"Design a hash table in Python","completion":"# initialize size SIZE = 256 # defining Node class class Node: def __init__(self, key, data): self.key = key self.data = data self.next = None # defining HashTable class HashTable: def __init__(self): self.table = [None]*SIZE # hash function def hash_function(self, key): return key % SIZE # insert data def insert(self, key, data): index = self.hash_function(key) if self.table[index] is None: self.table[index] = Node(key, data) else: temp_node = self.table[index] while temp_node.next: temp_node = temp_node.next temp_node.next = Node(key, data) # search data def search(self, key): index = self.hash_function(key) if self.table[index] is None: return \\"No data found!\\" else: temp_node = self.table[index] while temp_node and temp_node.key != key: temp_node = temp_node.next if not temp_node: return \\"No data found!\\" else: return temp_node.data # get size def get_size(self): count = 0 for item in self.table: if item: count += 1 while item.next: count += 1 item = item.next return count"},{"prompt":"Write python program which takes a string of numbers as input and determines if it is a valid ISBN.","completion":"def isValidISBN(input): ''' This function takes a string of numbers as input and returns True if it is a valid ISBN otherwise False. ''' # Check length of string if len(input) != 10: return False # Convert string to an array of integers digits = list(map(int, input)) # Calculate checksum chksm = 0 for i in range(len(digits)): chksm += digits[i] * (10 - i) # Verify checksum return (chksm % 11) == 0"},{"prompt":"Generate a Python program to compare two given dictionaries and output a dictionary with elements common in both. dict1 = {'a': 25, 'b': 14, 'c': 18, 'd': 7} dict2 = {'b': 17, 'c': 18, 'e': 10, 'f': 11}","completion":"def compare_dicts(dict1, dict2): common_elements = {} for key1, value1 in dict1.items(): for key2, value2 in dict2.items(): if key1 == key2: common_elements[key1] = value1 return common_elements"},{"prompt":"Create a python program that calculates the total cost of an item given the quantity and price. Quantity: 5, Price: 10","completion":"def calcTotalCost(quantity, price): totalCost = quantity * price return totalCost result = calcTotalCost(5, 10) print(result)"},{"prompt":"Write a web scraper in Python that downloads a list of email addresses from the following website: https://example.com/page Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com/page' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') emails = [a.text for a in soup.find_all('a') if a.has_attr('href') and a['href'].startswith('mailto:') ] print(emails)"},{"prompt":"Suggest code to print the following pattern in Python.","completion":"for row in range(6): for col in range(7): if (row == 0 and col % 3 != 0) or (row == 1 and col % 3 == 0) or (row - col == 2) or (row + col == 8): print(\\"*\\", end=\\"\\") else: print(\\" \\", end=\\"\\") print()"},{"prompt":"Create a Python function to find the maximum number in an array. The function should accept a single argument and return the maximum value in the array. array = [5, 8, 0, 1, 3, 9]","completion":"def find_maximum(arr): max_val = arr[0] for value in arr: if value > max_val: max_val = value return max_val # Usage max_num = find_maximum([5, 8, 0, 1, 3, 9]) print(max_num) # prints 9"},{"prompt":"mplement an SVM learner in Python to classify feature vectors Not applicable","completion":"# Import the necessary libraries import numpy as np from sklearn.svm import SVC # Load data X = np.load('X.npy') y = np.load('y.npy') # Create and fit an SVM learner svm_learner = SVC(gamma='auto') # Initialize SVM learner svm_learner.fit(X, y) # Fit SVM learner to data # Predict labels based on feature vectors preds = svm_learner.predict(X)"},{"prompt":"Given a list of strings, write a Python program to sort the strings in alphabetical order. strings = ['Python', 'Java', 'C++', 'C#']","completion":"def sort_strings(strings): return sorted(strings) if __name__ == '__main__': strings = ['Python', 'Java', 'C++', 'C#'] sorted_strings = sort_strings(strings) print(sorted_strings)"},{"prompt":"Create a program in Python to solve this equation: X^2 6X + 9.","completion":"import numpy as np # Define the function def function(x): return x**2 - 6*x + 9 # Calculate the roots roots = np.roots([1, -6, 9]) print(\\"The solutions for the equation are: x={} and x={}\\".format(roots[0], roots[1]))"},{"prompt":"Develop a python script to print all the numbers between 1 and 100","completion":"for i in range(1,101): print(i)"},{"prompt":"Generate a function in Python to check if a given number is a palindrome (a number which remains the same on reversing its digits).","completion":"def isPalindrome(n): temp = n rev = 0 while(temp > 0): rev = (rev * 10) + (temp % 10) temp = temp // 10 if n == rev: return True else: return False"},{"prompt":"Write a function using Python to scramble a word. word: hello","completion":"import random def scramble_word(word): # Convert the word to a list word_list = list(word) #Scramble the Letters random.shuffle(word_list) #Convert back to a string scrambled_word = ''.join(word_list) return scrambled_word if __name__ == '__main__': print(scramble_word('hello'))"},{"prompt":"Generate a minimal working example to demonstrate the traversal of a tree data structure using Python.","completion":"# A simple Tree class class Tree(object): def __init__(self, data): self.data = data # root node self.children = [] # empty list to store the children # Function to print the tree pre-order def traverse(tree): print(tree.data) # recursively traverse the Tree for value in tree.children: traverse(value) # Create Tree tree = Tree('A') tree.children.append(Tree('B')) tree.children.append(Tree('C')) tree.children[0].children.append(Tree('D')) tree.children[0].children.append(Tree('E')) # Traverse the Tree traverse(tree)"},{"prompt":"Create a Python function which takes a numerical list as an input and returns the list with each item multiplied by two. mylist = [1, 4, 5, 12]","completion":"def multiply_by_two(mylist): new_list = [] for item in mylist: new_list.append(item * 2) return new_list"},{"prompt":"Generate a python class for a student model, with fields for name, age and gender, along with appropriate getter and setter methods. Not applicable","completion":"class Student: def __init__(self, name, age, gender): self.name = name self.age = age self.gender = gender def get_name(self): return self.name def get_age(self): return self.age def get_gender(self): return self.gender def set_name(self, name): self.name = name def set_age(self, age): self.age = age def set_gender(self, gender): self.gender = gender"},{"prompt":"Develop a Python class to represent a point on 2Dspace.","completion":"class Point: def __init__(self, x, y): self.x = x self.y = y if __name__ == '__main__': point = Point(2, 3) print(point.x, point.y)"},{"prompt":"Create a Python program that takes in two strings and compares them. It should output the number of common characters between them. My cat, Tasty snacks","completion":"def compare_str(str1, str2): common_count = 0 for char in str1: if char in str2: common_count += 1 return common_count str1 = \\"My cat\\" str2 = \\"Tasty snacks\\" print(\\"Number of common characters between '{}' and '{}': {}\\".format( str1, str2, compare_str(str1, str2))) # Output: Number of common characters between 'My cat' and 'Tasty snacks': 3"},{"prompt":"Create a simple Python program to sum the values of two variables. <input>","completion":"x = 5 y = 4 total = x + y print(total) # Output: 9"},{"prompt":"Write a Python script to extract emails from a given text.","completion":"import re text = \\"... text content ...\\" # Search for all emails emails = re.findall(r\\"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+\\", text) print(emails)"},{"prompt":"Edit this existing Python program to sort a list of numbers in ascending order using the Bubble Sort algorithm. unsortedList = [14, 2, 27, 10, 5]","completion":"# Bubble sort algorithm def bubble_sort(unsortedList): n = len(unsortedList) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, n-i-1): # traverse the array from 0 to n-i-1 # Swap if the element found is greater # than the next element if unsortedList[j] > unsortedList[j+1] : unsortedList[j], unsortedList[j+1] = unsortedList[j+1], unsortedList[j] # Driver code to test above unsortedList = [14, 2, 27, 10, 5] bubble_sort(unsortedList) print (\\"Sorted array is:\\") for i in range(len(unsortedList)): print (\\"%d\\" %unsortedList[i]),"},{"prompt":"Generate a Python program to classify a given feature set into two classes features = [[9, 3], [7, 2], [4, 1], [0, 5]] class_labels = ['good', 'bad']","completion":"def classify(features, class_labels): decision_boundary = 5 predictions = [] for feature in features: if feature[0] > decision_boundary: predictions.append(class_labels[0]) else: predictions.append(class_labels[1]) return predictions"},{"prompt":"Create a web crawler in Python to find all the hyperlinks in a given web page.","completion":"import requests from bs4 import BeautifulSoup def get_all_links(url): html_page = requests.get(url) soup = BeautifulSoup(html_page.content, 'html.parser') links = [] for link in soup.findAll('a'): links.append(link.get('href')) return links print(get_all_links('http://example.com'))"},{"prompt":"Write a Python function to find all factors of a given number","completion":"def all_factors(num): results = [] for i in range(1, num + 1): if num % i == 0: results.append(i) return results"},{"prompt":"Write a Python program for searching for a particular item in a list. [1, 5, 4, 6, 9, 10], item = 6","completion":"def search(input_list, item): for i in range(len(input_list)): if item == input_list[i]: return i return -1 if __name__ == '__main__': input_list = [1, 5, 4, 6, 9, 10] item = 6 result = search(input_list, item) print(result)"},{"prompt":"Compute a matrix multiplication of two given matrices A and B in Python. The matrices are A=[1, 2, 3; 4, 5, 6] and B=[1, 2; 3, 4; 5, 6].","completion":"import numpy as np A = np.array([[1,2,3], [4,5,6]]) B = np.array([[1,2], [3,4], [5,6]]) C = np.matmul(A, B) print(C) # Output # [[22 28], # [49 64]]"},{"prompt":"w can you create a matrix in Python?","completion":"# Create a matrix using a list of lists matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # Create a matrix using Numpy import numpy as np matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"},{"prompt":"Write a Python class that takes 2 strings as arguments and prints them out in a concatenated form. string1 = Hello string2 = World","completion":"class ConcatStrings: def __init__(self, string1, string2): self.string1 = string1 self.string2 = string2 def print_concat(self): print(self.string1 + self.string2)"},{"prompt":"Create a function in Python that takes in an array of integers, and returns a new array with all the elements in the original array multiplied by two. [1, 2, 3, 4]","completion":"def double_array(array): return [element*2 for element in array] double_array([1, 2, 3, 4]) # [2, 4, 6, 8]"},{"prompt":"Develop a Python program to create a bank account class that has two attributes: owner name and balance, and two methods: deposit and withdraw.","completion":"class BankAccount: def __init__(self, ownerName, initialBalance): self.ownerName = ownerName self.balance = initialBalance def deposit(self, amount): self.balance += amount print('Deposit Successful! Now your total balance is {}'.format(self.balance)) def withdraw(self, amount): if amount > self.balance: print('Insufficient balance!') else: self.balance -= amount print('Withdrawal Successful! Now your total balance is {}'.format(self.balance)) account1 = BankAccount(\\"John\\", 1000) account1.deposit(500) account1.withdraw(200)"},{"prompt":"Create an algorithm in Python to sort a given array consisting of integers. [3, 5, 9, 11, 1, 4]","completion":"def sort_array(arr): # Traverse through all array elements for i in range(len(arr)): # Find the minimum element in remaining # unsorted array min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j # Swap the found minimum element with # the first element arr[i], arr[min_idx] = arr[min_idx], arr[i] # Driver code to test above arr = [3, 5, 9, 11, 1, 4] sort_array(arr) print (\\"Sorted array:\\") for i in range(len(arr)): print (\\"%d\\" %arr[i]),"},{"prompt":"Edit the following program written in Python in order to remove None from the list. lst = ['a', 'b', None, 'c']","completion":"lst = [x for x in lst if x is not None]"},{"prompt":"Write a Python program to check if two given strings are anagrams or not.An anagram is a word or phrase formed by rearranging the letters of a different word or phrase.","completion":"def is_anagram(str1, str2): str1_dict = dict() str2_dict = dict() for char in str1: if char in str1_dict: str1_dict[char] += 1 else: str1_dict[char] = 1 for char in str2: if char in str2_dict: str2_dict[char] += 1 else: str2_dict[char] = 1 for key in str1_dict: if key not in str2_dict: return False elif str1_dict[key] != str2_dict[key]: return False return True"},{"prompt":"Create a search engine for an online store in Python. The engine should take a query string as an input and return a list of products with relevant information. <Query string: Shoes>","completion":"def search(query): results = [] for product in products: if query in product.name: results.append({ 'name': product.name, 'price': product.price, 'description': product.description, 'image': product.image }) return results products = [ {'name': 'white shoes', 'price': 19.99, 'description': 'Nice shoes for the summer', 'image': 'image.jpg'}, {'name': 'black shoes', 'price': 32.00, 'description': 'Stylish shoes for a night out', 'image': 'image2.jpg'} ] query = \\"shoes\\" results = search(query) print(results)"},{"prompt":"Create a Python version of the classic Hello World! program.","completion":"print(\\"Hello World!\\")"},{"prompt":"Create a Python program which keeps track of 3 variables x, y and z.","completion":"def keep_track(): x = 0 y = 0 z = 0 while True: # do something to x, y and z ..."},{"prompt":"Can you convert a given dictionary into a string using Python? {foo: bar, hello: world}","completion":"dictionary_string = str({\\"foo\\": \\"bar\\", \\"hello\\": \\"world\\"})"},{"prompt":"Design a python program which takes a word string as an argument and returns the number of vowels in the string. Hello","completion":"def count_vowels(string): count = 0 for ch in string: if ch in 'aeiouAEIOU': count += 1 return count"},{"prompt":"Generate a random set of 10 numbers between 1 and 100 in Python. Not applicable","completion":"import random random_nums = random.sample(range(1,101), 10) print(random_nums) // Output: [45, 76, 70, 83, 24, 53, 22, 81, 77, 71]"},{"prompt":"Create a RESTful API endpoint in python that will accept an input string and return a list of palindrome words.","completion":"@app.route('/find_palindromes', methods=[\\"GET\\"]) def find_palindromes(): text = request.args.get('text', '') words = text.split(' ') result = [] for word in words: if word == word[::-1]: result.append(word) return jsonify(result)"},{"prompt":"Write a Python script to find the second largest number in a given list of numbers. arr = [4, 6, 10, 1, 3, 15]","completion":"def second_largest(arr): max_ = max(arr) new_arr = list(filter(lambda x: x != max_, arr)) return max(new_arr)"},{"prompt":"Python, create a function to return the minimum of two numbers.","completion":"def min_value(a, b): if a < b: return a else: return b"},{"prompt":"Create a Python program that uses the Coinmarketcap API to track the prices of top 10 cryptocurrencies over a period of time. Not applicable","completion":"import requests import pandas as pd url = 'https://api.coinmarketcap.com/v1/ticker/?limit=10' data = requests.get(url).json() df = pd.DataFrame(data) # select required column df = df[['name', 'price_usd']] # print the dataframe print(df)"},{"prompt":"Generate an optimal Python program to fulfill this purpose. Check if two given binary trees are identical. Input: tree1 and tree2","completion":"def isIdentical(tree1, tree2): if tree1 is None and tree2 is None: return True if tree1 is not None and tree2 is not None: return ((tree1.val == tree2.val) and isIdentical(tree1.left, tree2.left)and isIdentical(tree1.right, tree2.right) ) return False result = isIdentcial(tree1, tree2) print(result)"},{"prompt":"Write a Python function to create a list of numbers in the Fibonacci sequence up to the given numerical limit. limit = 10","completion":"def Fibonacci(limit): # Initializing first two Fibonacci numbers num1 = 0 num2 = 1 # Initialize empty list fibonacci_numbers = [] # Add the initialized numbers to the list fibonacci_numbers.append(num1) fibonacci_numbers.append(num2) # Calculate remaining Fibonacci numbers and add them to the list for i in range(2, limit): num3 = num1 + num2 fibonacci_numbers.append(num3) # Re-initialize numbers for next iteration num1 = num2 num2 = num3 return fibonacci_numbers # Driver code limit = 10 print(Fibonacci(limit))"},{"prompt":"Create a Python module that takes a given number and produces an output array with the numbers 0 to the given number, excluding the given number. Number: 10","completion":"def exclude_number(n): return [i for i in range(0,n) if i < n]"},{"prompt":"Modify the previous Python chatbot program to add a response to users who ask about the chatbot's name. Not applicable","completion":"def respond(message): bot_template = \\"I'm sorry, I don't understand. Could you try rephrasing that?\\" user_template = \\"USER: {message}nBOT: {response}\\" response = bot_template if 'hello' in message: response = \\"Hi! How can I help you?\\" elif 'your name' in message: response = \\"My name is Chatbot!\\" print(user_template.format(message=message, response=response)) if __name__ == \\"__main__\\": respond(\\"Hello\\") respond(\\"What is your name?\\")"},{"prompt":"Create a sorting algorithm in Python that takes in an array of integers and sorts it in ascending order. [4, 2, 7, 1, 3]","completion":"def sort_ascending(arr): swapped = True while swapped: swapped = False for i in range(len(arr)-1): if arr[i] > arr[i+1]: arr[i], arr[i+1] = arr[i+1], arr[i] swapped = True return arr print(sort_ascending([4, 2, 7, 1, 3]))"},{"prompt":"Develop a python program to find out the frequency of each character in a string. The given string is âHello Worldâ.","completion":"# Python Program to find out the # frequency of each character in a string # defining a string str1 = \\"Hello World\\" # creating an empty dictionary all_freq = {} # loop to find all frequencies of # each character in string for i in str1: if i in all_freq: all_freq[i] += 1 else: all_freq[i] = 1 # printing result print(\\"Count of all characters in the given string is :n \\" + str(all_freq))"},{"prompt":"Create an algorithm in Python to optimize an objective function subject to various constraints.","completion":"import numpy as np from scipy.optimize import minimize def objective(x): return np.sum(np.power(x,2)) def constraint1(x): return x[0] * x[1] * x[2] * x[3] - 25.0 def constraint2(x): sum_sq = 40 for i in range(4): sum_sq = sum_sq - np.power(x[i],2) return sum_sq x0=[1,4,3,1] b = (1.0,5.0) bnds = (b, b, b, b) con1 = {'type': 'ineq', 'fun': constraint1} con2 = {'type': 'eq', 'fun': constraint2} cons = [con1,con2] solution = minimize(objective,x0,method='SLSQP',bounds=bnds,constraints=cons) print(solution)"},{"prompt":"Develop a Python program that calculates the mean of list of numbers. [1, 5, 2, 4, 9]","completion":"def calculate_mean(nums): total = 0 for n in nums: total += n mean = total / len(nums) return mean mean = calculate_mean([1, 5, 2, 4, 9])"},{"prompt":"Generate a simple web crawler using Python that can crawl a single website for content. http://example.com","completion":"import requests from bs4 import BeautifulSoup def crawler(url): page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') for link in soup.find_all('a'): link_url = link.get('href') if link_url.startswith('http'): page = requests.get(link_url) page_soup = BeautifulSoup(page.content, 'html.parser') print(page_soup.get_text()) crawler('http://example.com')"},{"prompt":"Create a Python program to convert a string to its equivalent unicode value. hello","completion":"import unicodedata #example string s = \\"hello\\" #printing string to unicode print(\\"The unicode value of '\\" + s + \\"' is: \\" + str(ord(unicodedata.normalize('NFKD', s)[0]))) #output #The unicode value of 'hello' is: 104"},{"prompt":"Create a web API in Python that will return a list of all users. Not applicable","completion":"@app.route('/users/api/v1.0/users') def get_users(): users = [ { 'id': 1, 'name': 'John Smith', 'email': 'john.smith@example.com' }, { 'id': 2, 'name': 'Jane Doe', 'email': 'jane.doe@example.com', } ] return jsonify({'users': users})"},{"prompt":"Given a sentence, tokenize it in Python, separating each of the words using the NLTK library. The cat sat on the mat.","completion":"import nltk tokenized = nltk.word_tokenize(\\"The cat sat on the mat.\\") print(tokenized) # Output: ['The', 'cat', 'sat', 'on', 'the', 'mat', '.']"},{"prompt":"Write a Python script to extract the text of all comments from a given HTML page.","completion":"from bs4 import BeautifulSoup # Get the page contents with open('example.html', 'r') as html_file: soup = BeautifulSoup(html_file, 'lxml') # Extract the comments comments = soup.find_all(\\"div\\", class_=\\"comment\\") # Print the extracted comments for comment in comments: print(comment.text)"},{"prompt":"Write a Python program to fetch the contents of a web page.","completion":"import urllib.request # Pass in the URL of the web page url = 'http://example.com/index.html' # Fetch the web page response = urllib.request.urlopen(url) # Read and print the contents of the web page contents = response.read() print(contents)"},{"prompt":"Can you provide a Python script to print the largest and smallest number from a given list? [1, 6, 4, 3, 7, 8, 11]","completion":"def largest_smallest(arr): max_num = arr[0] min_num = arr[0] for i in arr: if i > max_num: max_num = i if i < min_num: min_num = i print(\\"The largest number is\\", max_num, \\"and the smallest number is\\", min_num)"},{"prompt":"Write a Python script to generate the Fourier transform of a given signal.","completion":"from scipy.fftpack import fft def fourier_transform(signal): # length of the signal N = len(signal) # calculate fourier transform (complex numbers list) fourier = fft(signal) return fourier"},{"prompt":"Design a Python program for converting a given string of characters into its corresponding ASCII code. String: Hello","completion":"def getAscii(string): result = [] for char in string: result.append(ord(char)) return result print(getAscii('Hello')) # Output: [72, 101, 108, 108, 111]"},{"prompt":"Write a Python function to flatten a nested list of lists into a single list containing all elements. nested_list = [[1, 2], [3, 4], [5, 6]]","completion":"def flatten_list(nested_list): return [item for sublist in nested_list for item in sublist]"},{"prompt":"Develop a Python script which extracts data from a given website. URL: https://www.example.com","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.example.com\\" page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') # Extract all Anchor Tags links = soup.find_all('a') # Extract all the contents of Anchors for link in links: print(link.text, link.get('href'))"},{"prompt":"Given a sentence, generate a dictionary with the most frequently used words. Python is an interpreted, highlevel, generalpurpose programming language.","completion":"freq_words_dict = { 'python': 2, 'is': 1, 'an': 1, 'interpreted': 1, 'high-level': 1, 'general-purpose': 1, 'programming': 1, 'language': 1 }"},{"prompt":"What is the size of the memory required by a given string in Python? The given string is Hello World!","completion":"The size of the memory required for the string \\"Hello World!\\" is 12 bytes."},{"prompt":"Write a Python program which implements a Knapsack problem. A list of items with associated weights and values List: [{name: pencil, weight: 5, value: 10}, {name: eraser, weight: 3, value: 5}, {name: book, weight: 8, value: 15}, {name: notebook, weight: 2, value: 3}] Maximum weight: 8","completion":"def knapsack(items, maxWeight): maxValue = 0 knapsackItems = [] n = len(items) for i in range(1 << n): curWeight = 0 curValue = 0 for j in range(n): if (i & (1 << j)) != 0: curWeight += items[j][\\"weight\\"] curValue += items[j][\\"value\\"] if curWeight <= maxWeight and curValue > maxValue: maxValue = curValue knapsackItems = [] for j in range(n): if (i & (1 << j)) != 0: knapsackItems.append(items[j][\\"name\\"]) return knapsackItems items = [{\\"name\\": \\"pencil\\", \\"weight\\": 5, \\"value\\": 10}, {\\"name\\": \\"eraser\\", \\"weight\\": 3, \\"value\\": 5}, {\\"name\\": \\"book\\", \\"weight\\": 8, \\"value\\": 15}, {\\"name\\": \\"notebook\\", \\"weight\\": 2, \\"value\\": 3}] maxWeight = 8 knapsackItems = knapsack(items, maxWeight) print(knapsackItems)"},{"prompt":"Python, create a server program listening to two ports.","completion":"import socket # Create a TCP/IP socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # Bind the socket to the port server_1_address = ('localhost', 10000) server_2_address = ('localhost', 20000) s.bind(server_1_address) s.bind(server_2_address) # Listen for incoming connections s.listen(1) while True: # Wait for a connection connection_1, client_address_1 = s.accept() connection_2, client_address_2 = s.accept() try: print(\\"Connection from:\\", client_address_1, \\"and\\", client_address_2) # Receive the data in small chunks and retransmit it while True: data_1 = connection_1.recv(1024, 0) data_2 = connection_2.recv(1024, 0) if data_1: connection_1.sendall(data_1, 0) if data_2: connection_2.sendall(data_2, 0) else: break finally: # Clean up the connection connection_1.close() connection_2.close()"},{"prompt":"Create a program in Python to return the nthlargest element from a binary search tree.","completion":"def nth_largest(root, n): if root is None or n <= 0: return -1 stack = [] while root or stack: while root: stack.append(root) root = root.right node = stack.pop() n -= 1 if n == 0: break root = node.left return node.data"},{"prompt":"Create a Python script that takes an integer, prints it out in binary, then returns the number of bits set. 4","completion":"# Define a function to print an int in binary format def print_binary(n): if n < 0: print(\\"Negative numbers are not supported.\\") return if n == 0: print(\\"0b0\\") else: result = [] while n > 0: result.append(n % 2) n = n // 2 result.reverse() print(\\"0b\\" + \\"\\".join(str(x) for x in result)) # Define a function to count the number of bits set def bits_set(n): if n == 0: return 0 else: result = 0 while n > 0: result += n % 2 n = n // 2 return result # Read an int n = int(input(\\"Enter an int: \\")) # Print the int in binary format print_binary(n) # Print the number of bits set to 1 bits_count = bits_set(n) print(\\"Number of bits set:\\", bits_count)"},{"prompt":"Create a Python program to count the number of upper case and lower case letters in a given string Hello World","completion":"def countLetters(s): uppercase, lowercase = 0, 0 for x in s: if x.islower(): lowercase+= 1 elif x.isupper(): uppercase+= 1 print (\\"No. of Upper case characters : \\", uppercase) print (\\"No. of Lower case Characters : \\", lowercase) countLetters('Hello World')"},{"prompt":"Write a function in Python to sort a given list according to the second element of the sublists. [[1,2], [2,3], [3,1]]","completion":"def sort_by_second_element(arr): def get_second_element(item): return item[1] return sorted(arr, key = get_second_element) arr = [[1,2], [2,3], [3,1]] result = sort_by_second_element(arr) print(result)"},{"prompt":"Create a Python class that checks for IP address and access type, and returns the context data for a template view or a JSON view. Use the given code as a reference and import the necessary modules and classes.","completion":"import logging import datetime from sqlalchemy import func, and_, or_, not_ from flask import url_for, session from misc.mixins import myTemplateView, JSONView from utils.arp_list import get_mac_by_ip from models.all_models import InetEther, ARPCache from models.session import session from utils.server.http_client import HTTPClient from libs.pfctl import PFCtl class checkIPMixin(object): def check_for_ip(self): self.request.remote_ether = session.query(ARPCache).filter(ARPCache.ip==self.request.remote_addr).first() if self.request.remote_ether is None: logging.error('IP: %s not found in cached arp list!' % self.request.remote_addr) self.request.remote_ether = get_mac_by_ip(self.request.remote_addr) else: self.request.remote_ether = self.request.remote_ether.mac if self.request.remote_ether is None or self.request.remote_addr is None: return None addr = session.query(InetEther).filter(InetEther.mac==self.request.remote_ether).first() if addr is None: logging.error('XXX4.1') addr = InetEther() addr.mac = self.request.remote_ether if addr.ip != self.request.remote_addr or not addr.is_active: logging.error('XXX4.2') addr.ip = self.request.remote_addr addr.is_active = True addr.lastupdate = func.now() session.add(addr) addrs = session.query(InetEther).filter(not_(InetEther.mac==self.request.remote_ether)) addrs = addrs.filter(InetEther.ip==self.request.remote_addr) addrs.update({\\"is_active\\": False}) return addr class cabinetView(checkIPMixin, myTemplateView): template='cabinet/cabinet-ajax.tpl' def get_context_data(self, **kwargs): addr = self.check_for_ip() context = super(cabinetView, self).get_context_data(**kwargs) context['addr_obj'] = addr if addr is None: context['access_type'] = 'UNDEFINED' elif addr.access_type == 'tor': context['access_type'] = 'TOR' else: context['access_type'] = 'DIRECT' return context class setIPView(checkIPMixin, JSONView): __ctlsrv = HTTPClient(port=6999) def get_context_data(self, **kwargs): context = super(setIPView, self).get_context_data(**kwargs) addr = self.check_for_ip() if addr is None: return context addr.access_type = self.__type session.add(addr) session.commit() r = self.__ctlsrv.call_handler('ip/%s/access' % self.request.remote_addr) context['result'] = r return context def dispatch(self, request, access_type, *args, **kwargs): if access_type in PFCtl.ip_proxy_types: self.__type = access_type else: self.__type = None return super(setIPView, self).dispatch(self, request, *args, **kwargs)"},{"prompt":"This code checks the status of an AWS SQS queue and returns the total number of messages in the queue. To use this code, you need to provide the endpoint of the queue and the number of queues to check as commandline arguments. The code will then iterate over each queue and return the total number of messages in all the queues. The output will be the total number of messages multiplied by 100.","completion":"#!/usr/bin/python # -*- coding: utf8 -*- from pprint import pprint import sys,os import random import json import gzip import random import boto3 s3 = boto3.resource('s3') client = boto3.client('sqs') QUEUE_ENDPOINT='https://eu-west-1.queue.amazonaws.com/888250974927/s3-copy-list' DST_BUCKET='ireland-leo-test' def check_queue_status(qurl): #print('check_queue_status(%s)'%(qurl)) #return {'number':0} response = client.get_queue_attributes( QueueUrl=qurl, AttributeNames=[ 'All' ] ) #pprint(response) #{u'Attributes': {'ApproximateNumberOfMessages': '1', message_number=0 if 'Attributes' in response: if 'ApproximateNumberOfMessages' in response['Attributes'] and 'ApproximateNumberOfMessagesNotVisible' in response['Attributes']: message_number=int(response['Attributes']['ApproximateNumberOfMessages']) not_visiable_message_number=int(response['Attributes']['ApproximateNumberOfMessagesNotVisible']) if message_number>0 or not_visiable_message_number>0: #print('%04d/%04d : %s'%(message_number, not_visiable_message_number, qurl)) pass return {'number':message_number} if __name__ == '__main__': qurl_endpoint=sys.argv[1] q_number=int(sys.argv[2]) total_number=0 for pos in xrange(q_number): response = check_queue_status('{0}-{1}'.format(qurl_endpoint, pos+1)) total_number+=response['number'] print total_number*100 sys.exit(0)"},{"prompt":"Write a correct python program to find the minimum value in an array of integers, without using inbuilt functions. arr = [3, 5, 8, 2, 9, 0]","completion":"def find_min(arr): # Initialize the minimum value min_val = arr[0] # Iterate through the array for i in range(1, len(arr)): if arr[i] < min_val: min_val = arr[i] return min_val"},{"prompt":"Create a program to solve the knapsack problem using Python.","completion":"def knapsack(wt, val, n, W): if n == 0 or W == 0: return 0 elif wt[n - 1] > W: return knapsack(wt, val, n - 1, W) else: return max(val[n - 1] + knapsack(wt, val, n - 1, W - wt[n - 1]), knapsack(wt, val, n - 1, W)) if __name__ == \\"__main__\\": val = [60, 100, 120] wt = [10, 20, 30] W = 50 n = len(val) print(knapsack(wt, val, n, W))"},{"prompt":"Create a Python program that displays the elements of an array in reverse order.","completion":"def reverse_array(arr): \\"\\"\\"Prints the elements of an array in reverse order\\"\\"\\" length = len(arr) for i in reversed(range(length)): print(arr[i], end=\\" \\")"},{"prompt":"Write a Python program to parse a given string and extract the domain name.","completion":"\\"\\"\\" Write a Python program to parse a given string and extract the domain name \\"\\"\\" import re def extract_domain_name(string): domain_name = '' matches = re.findall(r\\"://([^/]+)/?\\", string) if len(matches) > 0: domain_name = matches[0] return domain_name string = 'https://www.google.com/search?q=google+search' domain_name = extract_domain_name(string) print(\\"The domain name extracted is:\\", domain_name)"},{"prompt":"Write a Python code to classify a given list of words into two categories depending on length. words = [aardvark, cat, caterpillar, tail]","completion":"def classify_words(words): \\"\\"\\"Classify a list of words into two categories depending on length\\"\\"\\" # Initialize empty lists short_words = [] long_words = [] # Loop through the words for word in words: # Add the word to the short list if it is less # than 7 characters, otherwise add it to the long list if len(word) < 7: short_words.append(word) else: long_words.append(word) return short_words, long_words # Output print(classify_words(words))"},{"prompt":"Write a function to find the sum of the prime numbers below n in Python.","completion":"def sum_of_primes(n): '''This function returns the sum of prime numbers below n.''' if n < 2: return 0 primes = [True] * n primes[0] = False primes[1] = False for i in range(2,int(n**0.5)+1): if primes[i]: for j in range(i**2, n, i): primes[j] = False return sum(i for i in range(2, n) if primes[i]) if __name__ == '__main__': n = 10 print(sum_of_primes(n))"},{"prompt":"Write a Python program to convert seconds to day, hour, minutes and seconds. 3600","completion":"def convertSeconds(seconds): day = seconds//(24*3600) seconds = seconds%(24*3600) hour = seconds//3600 seconds %= 3600 minutes = seconds // 60 seconds %= 60 return day, hour, minutes, seconds day, hour, minute, second = convertSeconds(3600) print(\\"Day: {}, Hour: {}, Minute: {}, Second: {}\\".format(day, hour, minute, second))"},{"prompt":"This code performs simple differential analysis on gene expression data. To use it, run the script with the following arguments: exprfile slice1 slice2. exprfile should be a file containing gene expression values with genes on the rows and samples in the columns. slice1 and slice2 should be expressions of the form PQ indicating which columns contain the data for the two conditions being compared (e.g., if the first condition is represented by three columns starting at column 5, use 57). The script also accepts optional arguments: a A to set the alpha parameter to A, o O to write output to file O, c1 C to set label for average of condition 1 values to C, and c2 C to set label for average of condition 2 values to C.","completion":"#!/usr/bin/env python import sys import csv import math def parseSlice(s): if \\"-\\" in s: parts = s.split(\\"-\\") return slice(int(parts[0]) - 1, int(parts[1])) else: p = int(s) return slice(p-1, p) class SimpleDiff(): filename = None outfile = \\"/dev/stdout\\" labels = None colname1 = \\"avg1\\" colname2 = \\"avg2\\" alpha = 1.0 slice1 = None slice2 = None def process(self, f, out, header=True): nin = 0 nout = 0 na = self.slice1.stop - self.slice1.start nb = self.slice2.stop - self.slice2.start if header: f.readline() c = csv.reader(f, delimiter='t') for line in c: nin += 1 data1 = line[self.slice1] data2 = line[self.slice2] data1 = [ float(v) for v in data1 ] data2 = [ float(v) for v in data2 ] amin = min(data1) amax = max(data1) bmin = min(data2) bmax = max(data2) if amin > bmax: # A over B r1 = amax - amin r2 = bmax - bmin d = self.alpha * max(r1, r2) if (amin - bmax) > d: avg1 = sum(data1) / na avg2 = sum(data2) / nb if avg1 > 0 and avg2 > 0: out.write(\\"{}t{}t{}t{}n\\".format(line[0], avg1, avg2, math.log(avg1/avg2, 2.0))) nout += 1 elif bmin > amax: # B over A r1 = amax - amin r2 = bmax - bmin d = self.alpha * max(r1, r2) if (bmin - amax) > d: avg1 = sum(data1) / na avg2 = sum(data2) / nb if avg1 > 0 and avg2 > 0: out.write(\\"{}t{}t{}t{}n\\".format(line[0], avg1, avg2, math.log(avg1/avg2, 2.0))) nout += 1 return (nin, nout) def parseArgs(self, args): prev = \\"\\" if \\"-h\\" in args or \\"--help\\" in args: return self.usage() for a in args: if prev == \\"-a\\": self.alpha = float(a) prev = \\"\\" elif prev == \\"-o\\": self.outfile = a prev = \\"\\" elif prev == \\"-l\\": self.labels = parseSlice(a) prev = \\"\\" elif prev == \\"-c1\\": self.colname1 = a prev = \\"\\" elif prev == \\"-c2\\": self.colname2 = a prev = \\"\\" elif a in [\\"-a\\", \\"-o\\", \\"-l\\", \\"-c1\\", \\"-c2\\"]: prev = a elif self.filename is None: self.filename = a elif self.slice1 is None: self.slice1 = parseSlice(a) elif self.slice2 is None: self.slice2 = parseSlice(a) if (self.filename and self.slice1 and self.slice2): return True else: return self.usage() def usage(self): sys.stdout.write(\\"\\"\\"Usage: simplediff.py [options] exprfile slice1 slice2 This program performs \\"simple\\" differential analysis on gene expression data. \`exprfile' should be a file containing gene expression values with genes on the rows and samples in the columns. \`slice1' and \`slice2' should be expressions of the form P-Q indicating which columns contain the data for the two conditions being compared (e.g., if the first condition is represented by three columns starting at column 5, use 5-7). Options: -a A | Set the alpha parameter to A (see below). Default: {}. -o O | Write output to file O. -c1 C | Set label for average of condition 1 values to C. Default: {}. -c1 C | Set label for average of condition 2 values to C. Default: {}. A gene is considered to be differentially expressed between two groups of samples (A and B) if the two following conditions hold: * The two sets of expression values are totally separated, ie: the minimum expression values for the samples in A is larger than the maximum in B -OR- the minimum expression values for the samples in B is larger than the maximum in A * The distance between the two sets of values (the difference between the maximum of the \\"lower\\" one and the minimum of the \\"upper\\" one) is larger than the largest of the two ranges of values in A and B, multiplied by the alpha parameter. Example: A = {{10, 12, 16}} B = {{20, 21, 22}} The two sets are separated, because min(B) > max(A). The distance between the two sets is 4 (20-16), range(A) = 6, range(B) = 2. If alpha is set to 1.0 (the default) then this gene would NOT be considered significantly different, because the largest range is 6, and 6 * alpha > 4. If alpha was set to 0.5, the gene would be called as different. \\"\\"\\".format(self.alpha, self.colname1, self.colname2)) def run(self): with open(self.outfile, \\"w\\") as out: with open(self.filename, \\"r\\") as f: (nin, nout) = self.process(f, out) sys.stderr.write(\\"{} in, {} outn\\".format(nin, nout)) if __name__ == \\"__main__\\": SD = SimpleDiff() if SD.parseArgs(sys.argv[1:]): SD.run()"},{"prompt":"Generate a function that can be used to sort a given Python list in ascending order <No Input>","completion":"def sort_asc(lis): for i in range(len(lis)): for j in range(i + 1, len(lis)): if lis[i] > lis[j]: lis[i], lis[j] = lis[j], lis[i] return lis"},{"prompt":"Write an enable or disable function in Python that toggles an LED depending on the input given.","completion":"def LED_toggle(state): if state == \\"on\\": GPIO.output(4,1) else: GPIO.output(4,0)"},{"prompt":"Create a program in your language of choice to classify the following two items: Apple Orange Not applicable","completion":"# Python items = ['apple', 'orange'] classes = ['fruit', 'vegetable'] for item in items: if item == 'apple': print(f'{item} is a {classes[0]}') elif item == 'orange': print(f'{item} is a {classes[1]}')"},{"prompt":"Write a python program to generate the Fibonacci sequence of 'n' numbers","completion":"def generate_fibonacci(n): fib_list = [0, 1] for i in range(2, n): fib_list.append(fib_list[i - 2] + fib_list[i - 1]) return fib_list[:n]"},{"prompt":"Develop a function to delete duplicates from a given string in Python. string=mississippi","completion":"def remove_duplicates(string): new_string = \\"\\" for char in string: if char not in new_string: new_string += char return new_string no_duplicates = remove_duplicates(\\"mississippi\\") print(no_duplicates)"},{"prompt":"Establish a connection to a MySQL database using Python.","completion":"import mysql.connector # connect to database mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"yourusername\\", passwd=\\"yourpassword\\" ) # print the connection object print(mydb)"},{"prompt":"Write a machine learning algorithm in Python to predict a person's age from a given dataset. Example Data: Name Age John 21 Jane 23 Jim 18","completion":"import pandas as pd import numpy as np from sklearn.linear_model import LinearRegression # Load the dataset data = pd.read_csv('people.csv') # Split the features and labels X = data[['Name']] y = data['Age'].values # Create and train the model model = LinearRegression().fit(X, y) # Make predictions with the model predictions = model.predict(X) print(predictions)"},{"prompt":"Write a Python program to compress the given string by reducing the consecutive characters to single characters with a number indicating the count of appearance.","completion":"def compress_string(string): result = \\"\\" count = 1 for i in range(1, len(string)): if string[i] == string[i-1]: count += 1 else: result += string[i-1] + str(count) count = 1 result += string[-1] + str(count) return result"},{"prompt":"Create a machine learning model in Python that predicts the sentiment of a given sentence. The model should use a combination of word embeddings and recurrent neural networks. Input sentence: I am so happy right now!","completion":"#import necessary packages import numpy as np import torch import torch.nn as nn import torch.nn.functional as F # define the word embedding layer class WordEmbeddingLayer(nn.Module): def __init__(self, vocab_size, embedding_dim): super().__init__() # define the embedding layer self.embedding = nn.Embedding(vocab_size, embedding_dim) def forward(self, x): # lookup the embeddings for the input return self.embedding(x) # define the recurrent neural network class SentimentRNN(nn.Module): def __init__(self, embedding_dim, hidden_dim, output_dim, n_layers, dropout, bidirectional, pad_idx): super().__init__() # define the embedding layer self.embedding = WordEmbeddingLayer(vocab_size, embedding_dim) # define the recurrent neural network self.rnn = nn.LSTM(embedding_dim, hidden_dim, num_layers=n_layers, bidirectional=bidirectional, dropout=dropout) # define the output layer self.fc = nn.Linear(hidden_dim * 2, output_dim) # define the dropout layer self.dropout = nn.Dropout(dropout) # define the padding id self.pad_idx = pad_idx def forward(self, text): # look up the embeddings embedded = self.embedding(text) # perform the recurrent neural network outputs, (hidden, cell) = self.rnn(embedded) # perform dropout outputs = self.dropout(outputs) # get the last output out = outputs[-1, :, :] # apply the output layer out = self.fc(out) return out # define the model model = SentimentRNN(embedding_dim=100, hidden_dim=256, output_dim=1, n_layers=2, bidirectional=True, dropout=0.5, pad_idx=1) # define the optimizer optimizer = torch.optim.Adam(model.parameters()) # define the test sentence test_sentence = \\"I am so happy right now!\\" # predict the sentiment of the sentence pred = model(test_sentence) # print the prediction print(pred)"},{"prompt":"Create a program in Python to calculate the average word length in a given title. The Cat in the Hat","completion":"def calculate_average_word_length(title): words = title.split() total_length = 0 for word in words: total_length += len(word) return total_length / len(words) result = calculate_average_word_length(\\"The Cat in the Hat\\") print(result)"},{"prompt":"Create a python program to generate random colors in hexadecimal format. Not applicable","completion":"import random def generate_hex_color(): return '#' + ''.join([random.choice('0123456789ABCDEF') for x in range(6)]) print(generate_hex_color()) # Ex: #C2C30F"},{"prompt":"Write a Python script to compute the area of the circle using its radius.","completion":"import math def compute_area_of_the_circle(radius): return math.pi * (radius**2)"},{"prompt":"Create a web scraper in Python that retrieves the titles of all posts of a given web page, and prints them on the screen. https://example.com/blog","completion":"import requests from bs4 import BeautifulSoup url = \\"https://example.com/blog\\" r = requests.get(url) html = r.text soup = BeautifulSoup(html, 'html.parser') titles = soup.find_all('h2') for title in titles: print(title.text)"},{"prompt":"Generate a Python program to filter a list of numbers and return the numbers that are divisible by 7. [14, 21, 28, 35, 42]","completion":"def filter_by_seven(nums): filtered_nums = [num for num in nums if num % 7 == 0] return filtered_nums result = filter_by_seven([14, 21, 28, 35, 42]) print(result)"},{"prompt":"Generate a Python code snippet to find the longest word in a given sentence. This is the longest sentence.","completion":"def longestWord(sentence): words = sentence.split(\\" \\") max_length = 0 longest_word = \\"\\" for word in words: if len(word) > max_length: max_length = len(word) longest_word = word return longest_word print(longestWord(\\"This is the longest sentence.\\"))"},{"prompt":"Update the below Python script to perform binary search on a given array of integers. def binary_search(arr, x): n = len(arr) # print all elements for i in range(n): print(arr[i], end = )","completion":"def binary_search(arr, x): n = len(arr) # Sort the given array in ascending order arr.sort() # print all elements for i in range(n): print(arr[i], end = \\" \\") #binary search start = 0 end = n-1 while start <= end: mid = (start + end) // 2 if x == arr[mid]: return mid elif x > arr[mid]: start = mid + 1 else: end = mid - 1 return -1"},{"prompt":"Write a Python program to find all numbers divisible by 7 but not a multiple of 5 between two given numbers","completion":"def div_by_7_not_5(start, end): result = [] for num in range(start, end + 1): if (num % 7 == 0) and (num % 5 != 0): result.append(num) return result"},{"prompt":"Automatically detect bugs and vulnerabilities in Python code. Not applicable","completion":"import ast import logging from pygount import SourceAnalysis # Logging configuration logging.basicConfig(level=logging.INFO) # Input code code = \\"\\"\\" def find_bugs(code): analyzed_code = SourceAnalysis.from_string(language='python', text=code) bugs = [] for function in code: if 'fopen' in function.body: bugs.append('Got a potential vulnerability!') return bugs \\"\\"\\" # Parsed syntax tree tree = ast.parse(code) # Find all functions for node in ast.walk(tree): if isinstance(node, ast.FunctionDef): # Get the code for the function function_code = ast.get_source_segment(code, node) bugs = find_bugs(function_code) for bug in bugs: logging.warning(bug)"},{"prompt":"Write a Python program that takes an input string as an argument and prints all its anagrams.","completion":"def is_anagram(s1, s2): s1 = s1.lower() s2 = s2.lower() if len(s1) != len(s2): return False for c in s1: if c not in s2: return False for c in s2: if c not in s1: return False return True def get_anagrams(string): anagrams = [] for i in range(len(string)): for j in range(len(string)): if i == j: continue s1 = string[i:j+1] s2 = string[:i] + string[j+1:] if is_anagram(s1, s2): anagrams.append(s2) return anagrams"},{"prompt":"Generate a Python program to permute the elements of a given list into descending order. A list [4,7,2,1]","completion":"def permute(nums): if len(nums) <= 1: return [nums] permutations = [] for i in range(len(nums)): v = nums[i] left = nums[:i] + nums[i+1:] subpermute = permute(left) for item in subpermute: permutations.append([v] + item) return permutations def descending_order(nums): permutations = permute(nums) best_permutation = [] for permutation in permutations: if is_descending_order(permutation): best_permutation = permutation return best_permutation def is_descending_order(arr): for i in range(1, len(arr)): if arr[i-1] < arr[i]: return False return True result = descending_order([4,7,2,1]) print(result)"},{"prompt":"Generate a code snippet in Python to tokenize a given string.","completion":"def tokenize(s): tokens = [] current_token = \\"\\" for c in s: if c.isspace(): tokens.append(current_token) current_token = \\"\\" else: current_token += c if current_token: tokens.append(current_token) return tokens"},{"prompt":"Write a Python program to read a list of integers from the user and find the smallest number. [12, 11, 7, 15]","completion":"list_of_numbers = input(\\"Please enter a list of numbers: \\").split() list_of_numbers = [int(x) for x in list_of_numbers] min_number = min(list_of_numbers) print(\\"The smallest number is:\\", min_number)"},{"prompt":"Build a program in Python to fetch the details of a user in a given language.","completion":"def get_user_details(language): user_data = {} # read the data from a file with open(f'data/{language}_users.csv', 'r') as csvfile: reader = csv.reader(csvfile) for row in reader: user_data[row[0]] = row[1:] return user_data users = get_user_details('en')"},{"prompt":"Generate a new Python list with the squared value of each element in a given list. list = [1, 2, 3, 4, 5, 6]","completion":"def squared_list(list): squared_list = [] for num in list: squared_list.append(num **2) return squared_list list = [1, 2, 3, 4, 5, 6] print(squared_list(list)) # Outputs [1, 4, 9, 16, 25, 36]"},{"prompt":"Design a python program to replace every occurrence of a word in a string with another word. string = Hello hello world! word = hello replacement_word = welcome","completion":"def replace_word(string, word, replacement_word): return string.replace(word, replacement_word) print(replace_word(\\"Hello hello world!\\", \\"hello\\", \\"welcome\\"))"},{"prompt":"dentify the best algorithm to find the maximum sum of a subarray in a given array and write a Python code snippet accordingly. arr = [2, 1, 3, 4, 1, 2, 1, 5, 4]","completion":"def maxSubarraySum(arr): max_so_far = 0 max_ending_here = 0 for i in range(0, len(arr)): max_ending_here += arr[i] if max_ending_here < 0: max_ending_here = 0 if (max_so_far < max_ending_here): max_so_far = max_ending_here return max_so_far"},{"prompt":"Create a Python script to evaluate the result of a mathematical expression using the PEGjs library. 2 * (3 + 4)","completion":"import pegjs if __name__ == \\"__main__\\": parser = pegjs.generate(''' Expression = Sequence ( Operator Sequence )* Sequence = \\"(\\" Expression \\")\\" / Number Operator = Add / Subtract / Multiply / Divide Add = \\"+\\" Subtract = \\"-\\" Multiply = \\"*\\" Divide = \\"/\\" Number = [0-9]+ ''') result = parser.parse('2 * (3 + 4)') print(result)"},{"prompt":"Create a Python program to Generate an ASCII art visualization of input text or a string. Hello World!","completion":"def ascii_art(inputText): # Create dictionary ascii_dict = { 'A' : ' _____ ', 'B' : ' /3_ 3_/', 'C' : ' (__/ __)', 'D' : ' /2_ 2_/', 'E' : ' (__/ __)', 'F' : ' (___/ __)', 'G' : ' (__&_/ _)', 'H' : ' /// ', 'I' : ' ---/ _', 'J' : '(___/ ___)', 'K' : '__- .- _/', 'L' : '(__/ ___)', 'M' : ' = / /=', 'N' : ' =5 / 5=', 'O' : ' (___/ __)', 'P' : ' (___/ __)', 'Q' : ' (___/ ___)', 'R' : ' (___/ _/', 'S' : '(__/ ___)', 'T' : ' (___/ ___)', 'U' : ' (__/ ___)', 'V' : ' / /', 'W' : ' / | /', 'X' : ' / |', 'Y' : ' / |', 'Z' : '(__/ ___)' } pic = \\"\\" for letter in inputText: pic = pic + ascii_dict[letter.upper()] + \\"n\\" return pic print(ascii_art(\\"Hello World!\\")) # outputs: ''' _____ (___/ ___) /3_ 3_/ (__/ ___) (__/ __) (___/ ___) /2_ 2_/ / / (__/ __) / | (___/ ___) (__/ ___) '''"},{"prompt":"Create a Python program to generate a list of prime numbers up to a certain number. The program should generate primes up to the number 100","completion":"primes = [] for num in range(2,101): for i in range(2,num): if (num % i) == 0: break else: primes.append(num) print(primes)"},{"prompt":"Create a Python program to calculate the simple interest given the principal amount, rate of interest and time.","completion":"def simple_interest(p,r,t): return (p * r * t)/100"},{"prompt":"Can you create an optimization algorithm in Python to minimize the following function? f(x) = x^4 + 7x^3 + 6x^2 6x","completion":"import numpy as np def minimize(x): return np.power(x,4) + 7 * np.power(x,3) + 6 * np.power(x,2) - 6 * x def optimize(f, x): best_x = x best_val = f(x) while True: new_x = x - 1e-3 new_val = f(new_x) if new_val < best_val: best_x = new_x best_val = new_val x = new_x else: break return best_x, best_val x = 0 x_min, val_min = optimize(minimize, x) print(f'Minimum of function \\"f(x)\\" is at x={x_min}, with value {val_min}.')"},{"prompt":"Design a function in Python that takes a number as input and returns the factorial of the number.","completion":"def factorial(num): if num == 1 or num == 0: return 1 else: return num * factorial(num-1)"},{"prompt":"Write a Python program to randomly select a number of elements from a list without any repeat [1,2,3,4,5]","completion":"import random def random_select(arr, k): new_arr = random.sample(arr,k) return new_arr"},{"prompt":"Create a natural language interface to process user inputs in Python. Not applicable","completion":"import nltk import random from nltk.corpus import movie_reviews # Generate a set of documents documents = [(list(movie_reviews.words(fileid)), category) for category in movie_reviews.categories() for fileid in movie_reviews.fileids(category)] # Shuffle the documents random.shuffle(documents) # Generate features all_words = [] for w in movie_reviews.words(): all_words.append(w.lower()) all_words = nltk.FreqDist(all_words) word_features = list(all_words.keys())[:3000] # Function to create a dictionary of features for each review in the list documents # The keys are the words in word_features # The values of each key are either true or false for whether that feature appears in the review def find_features(document): features = {} words = set(document) for w in word_features: features[w] = (w in words) return features #Find the features for all the documents featuresets = [(find_features(rev), category) for (rev, category) in documents] #Create the training set using the featuresets training_set = featuresets[:1900] # Create the testing set using the featuresets testing_set = featuresets[1900:] # Train the classifier classifier = nltk.NaiveBayesClassifier.train(training_set) #Test the classifier and print the accuracy print(\\"Classifier accuracy percent:\\",(nltk.classify.accuracy(classifier, testing_set))*100)"},{"prompt":"Design a Python class for creating a student record system.","completion":"class StudentRecord: def __init__(self, student_id, name, age, course): self.student_id = student_id self.name = name self.age = age self.course = course def get_student_records(self): return { 'student_id': self.student_id, 'name': self.name, 'age': self.age, 'course': self.course } def set_student_records(self, updates): self.student_id = updates.get('student_id', self.student_id) self.name = updates.get('name', self.name) self.age = updates.get('age', self.age) self.course = updates.get('course', self.course)"},{"prompt":"Create a Python script to scrape content from a website. Website URL: 'https://example.com'","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') for content in soup.find_all('div', class_='content'): print(content.text)"},{"prompt":"Create a random number generator function in Python. Not applicable","completion":"import random def random_number_generator(start, end): return random.randint(start, end)"},{"prompt":"Create a Python program to find the longest substring in a string that contains only a single character. String: abcdabc","completion":"def findLongestSubstring(inputString): longest = 0 longestSubstring = '' for i in range(len(inputString)): current = inputString[i] count = 1 currentSubstring = current for j in range(i + 1, len(inputString)): if current == inputString[j]: count += 1 currentSubstring += inputString[j] else: break if count > longest: longest = count longestSubstring = currentSubstring return longestSubstring longestSubstring = findLongestSubstring('abcdabca') print(longestSubstring) # Output: 'abca'"},{"prompt":"Create a machine learning model in Python to classify a given dataset into 5 different classes. X (feature matrix), y (label vector)","completion":"from sklearn.neighbors import KNeighborsClassifier # Initialize KNN model knn_model = KNeighborsClassifier(n_neighbors=5) # Fit the model knn_model.fit(X, y) # Predict the classes y_pred = knn_model.predict(X)"},{"prompt":"Generate a Python script that prints out the first 15 odd numbers","completion":"for i in range(1, 30, 2): print(i)"},{"prompt":"Generate a Python class that takes two integers as an argument when initialized and implements a method to compare the two numbers.","completion":"class Numbers: def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def compare(self): if self.num1 > self.num2: return \\"Number1 is larger than Number2\\" elif self.num1 < self.num2: return \\"Number2 is larger than Number1\\" else: return \\"Number1 is equal to Number2\\""},{"prompt":"Debug this Python program to sort an array of numbers. def sort(arr): n = len(arr) for i in range(n): for j in range(0, ni1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] arr = [64, 34, 25, 12, 22, 11, 90] sort(arr)","completion":"def sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j] # Buggy code, swap the elements arr = [64, 34, 25, 12, 22, 11, 90] sort(arr)"},{"prompt":"Create a Python list that contains strings [apple, banana, lemon, mango].","completion":"my_list = [\\"apple\\", \\"banana\\", \\"lemon\\", \\"mango\\"]"},{"prompt":"mplement a sorting algorithm in Python to sort a given list of numbers in ascending order. [3, 7, 1, 4, 9, 5]","completion":"def sort(list): for i in range(len(list)): min_idx = i for j in range(i+1, len(list)): if list[min_idx] > list[j]: min_idx = j list[i], list[min_idx] = list[min_idx], list[i] return list list = [3,7,1,4,9,5] sorted_list = sort(list) print(sorted_list)"},{"prompt":"Write a Python program to take a list of numbers and ensure that each element in the list is either the minimum or maximum value in the list. [5, 4, 3, 4, 8, 6, 7]","completion":"def normalize(nums): min_num = min(nums) max_num = max(nums) for i, n in enumerate(nums): if n > min_num and n < max_num: if n - min_num > max_num - n: nums[i] = max_num else: nums[i] = min_num return nums print(normalize([5, 4, 3, 4, 8, 6, 7])) # [5, 4, 3, 5, 8, 6, 7]"},{"prompt":"Create a python script to find the last element of a given list. list = [1, 2, 3, 4, 5]","completion":"def last_element(list): \\"\\"\\"Find the last element of a given list.\\"\\"\\" return list[-1] # Usage Example list = [1, 2, 3, 4, 5] last_element = last_element(list) print(last_element) # 5"},{"prompt":"Generate a Python program to suggest movies based on user ratings. movies = { Inception: 8.5, The Shawshank Redemption: 9.2, The Godfather: 9.2, The Matrix: 8.7 }, user_ratings = { Inception: 9, The Shawshank Redemption: 8.5, The Godfather: 9.2 }","completion":"def recommend_movies(movies, user_ratings): recommended_movies = [] for movie in movies: if movie not in user_ratings: if movies[movie] > 8.5: recommended_movies.append(movie) return recommended_movies result = recommend_movies(movies, user_ratings) print(result)"},{"prompt":"Design a Python program to print the list of prime numbers between 1 and 100.","completion":"# Create a list of prime numbers between 1 and 100 def prime_nums(): lst = [] # declare empty list # Iterate through the numbers from 2 to 100 for nums in range(2, 101): for i in range(2, nums//2+1): # If any number is divisible then skip that number if (nums % i) == 0: break else: # If iteration is successful then number is prime so add in the list lst.append(nums) return lst # Call the function prime_numbers = prime_nums() # Print the list of prime numbers print(prime_numbers)"},{"prompt":"Write a Python script to generate a random password with at least 8 characters containing the following characters: lowercase letters, uppercase letters, numbers, and special characters. Not applicable","completion":"import random import string def generate_password(): pass_characters = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(pass_characters) for i in range(8)) print(generate_password()) //Output sd.V%T8d1"},{"prompt":"Optimize the following Python code by using list comprehensions: string_list = [Hello, world, how, are, you]","completion":"string_list = [\\"Hello\\", \\"world\\", \\"how\\", \\"are\\", \\"you\\"] # Optimized version string_list = [s.upper() for s in string_list]"},{"prompt":"Develop an array sorting algorithm in Python that sorts an array inplace, requiring less than O(n log n) time complexity. [6,5,3,1,8,7,2,4]","completion":"def sort_array(arr): n = len(arr) # Iterate through the array for i in range(n): # Find the minimum element min_ind = i for j in range(i + 1, n): if arr[min_ind] > arr[j]: min_ind = j # Swap the found minimum element with the first element arr[i], arr[min_ind] = arr[min_ind], arr[i] # Driver code to test above arr = [6,5,3,1,8,7,2,4] sort_array(arr) print (\\"Sorted array is:\\") for i in range(n): print (\\"%d\\" %arr[i]),"},{"prompt":"Create a class for binary trees in Python","completion":"\\"\\"\\" Class for binary trees in Python. \\"\\"\\" class BinaryTree: def __init__(self, root): self.key = root self.left = None self.right = None def insert_left(self, new_node): if self.left is None: self.left = BinaryTree(new_node) else: t = BinaryTree(new_node) t.left = self.left self.left = t def insert_right(self, new_node): if self.right is None: self.right = BinaryTree(new_node) else: t = BinaryTree(new_node) t.right = self.right self.right = t def get_right_child(self): return self.right def get_left_child(self): return self.left def set_root_val(self, obj): self.key = obj def get_root_val(self): return self.key"},{"prompt":"Write a Python program to remove all the elements in a dictionary with a given value. dictionary: {'a': 1, 'b': 2, 'c': 3, 'd': 3}, value: 3","completion":"dictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 3} value = 3 dictionary = {key:val for key, val in dictionary.items() if val != value} print(dictionary)"},{"prompt":"Create a python script to encode a string using Base64","completion":"import base64 def encode_base64(string): encoded_bytes = base64.b64encode(string.encode(\\"utf-8\\")) return encoded_bytes.decode(\\"utf-8\\")"},{"prompt":"Optimize an existing python program to improve its processing speed. def my_func(x): for i in range(1000000): x += x + 1 return x","completion":"def my_func(x): x += x << 1 # 2x faster than adding 1 for i in range(1000000 // 2): # divide loop by 2 x += x << 2 return x # no extra operation needed on return value as it is already doubled twice already."},{"prompt":"Create a Python script to check a given string for palindrome. abccb","completion":"#Function for palindrome check def isPalindrome(string): # Initializing left and right pointer left = 0 right = len(string) - 1 # run till left and right pointer are same while left < right: # if both characters at left and right pointers are same if string[left] == string[right]: left += 1 right -= 1 # if the characters are not equal, return False else: return False # if the loop has ended without break, the string is a palindrome return True #Inputting a string string = 'abccb' #Check the string for palindrome if (isPalindrome(string)): print(\\"Input string is palindrome\\") else: print(\\"Input string is not a palindrome\\")"},{"prompt":"Using Python, write a program to classify the input provided in the input field. The dog barked at the cat.","completion":"import nltk from nltk.tokenize import word_tokenize from nltk.classify import NaiveBayesClassifier # Create a function to classify the sentence def classify_sentence(sentence): # Create a list of words derived from the sentence words = word_tokenize(sentence) # Collect words and their corresponding part of speech tags words_tags = nltk.pos_tag(words) # Create lists to contain nouns, verbs, adjectives and adverbs nouns = [] verbs = [] adjectives = [] adverbs = [] # Iterate through each word and tag in the sentence for word, tag in words_tags: if tag in ['NN', 'NNS', 'NNP', 'NNPS']: nouns.append(word) elif tag in ['VB', 'VBD', 'VBG', 'VBN', 'VBP', 'VBZ']: verbs.append(word) elif tag in ['JJ', 'JJR', 'JJS']: adjectives.append(word) elif tag in ['RB', 'RBR', 'RBS']: adverbs.append(word) # Return a dictionary containing the detected words return { 'nouns': nouns, 'verbs': verbs, 'adjectives': adjectives, 'adverbs': adverbs } sentence = 'The dog barked at the cat.' # Classify the sentence classified_sentence = classify_sentence(sentence) # Print the results print(classified_sentence) # Output: # {'nouns': ['dog', 'cat'], 'verbs': ['barked'], 'adjectives': [], 'adverbs': []}"},{"prompt":"Generate a correct python program to fetch the price of a given stock ticker symbol. Apple Inc. (AAPL)","completion":"import requests def get_stock_price(symbol): url = \\"https://finance.yahoo.com/quote/\\" + symbol req = requests.get(url) data = req.json() return data['regularMarketPrice']"},{"prompt":"Create a class in Python that defines the concept of a Shape. The class should contain a method to check if an object is a valid shape.","completion":"class Shape: def __init__(self, sides): self.sides = sides def isValid(self): if len(self.sides) >= 3: return True else: return False"},{"prompt":"Optimize the following Python code for calculating the sum of an array. arr = [1, 2, 3, 4, 5, 6] total = 0 for el in arr: total += el","completion":"arr = [1, 2, 3, 4, 5, 6] total = sum(arr) # use sum() to sum up all elements of the array in one line"},{"prompt":"Create an algorithm that checks if a given String is a valid identifier in Python.","completion":"def is_valid_identifier(string): if string.isidentifier(): return True else: return False"},{"prompt":"Create a Python program to find the most common word in the given string. string = This is a sample sentence to find the most common word","completion":"def most_common_word(string): string_list = string.split() word_dict = {} for word in string_list: word_dict[word] = word_dict.get(word, 0) + 1 max_count = 0 most_common_word = None for word, count in word_dict.items(): if count > max_count: max_count = count most_common_word = word return most_common_word print(most_common_word(string)) # Output: the"},{"prompt":"Write a Python code to create a dictionary which records the frequency of words in a given string. this is a test string","completion":"# Create a dictionary to record the frequency of words in a given string # Split the string into words words = \\"this is a test string\\".strip().split() # We use a dictionary to store the frequency of the words freq = {} # Iterate through the words and count their frequency for word in words: if word in freq: freq[word] += 1 else: freq[word] = 1 print(freq)"},{"prompt":"Create a python program that modifies a given string to remove all spaces. my_string = This is a string with spaces","completion":"def remove_spaces(my_string): return my_string.replace(' ', '') #test my_string = \\"This is a string with spaces\\" no_spaces_string = remove_spaces(my_string) print(no_spaces_string) # Output: Thisisastringwithspaces"},{"prompt":"Design a program in Python to delete all the odd numbers from an array. [1, 2, 3, 4, 5, 6]","completion":"def delete_odd_numbers(arr): new_arr = [] for i in arr: if i % 2 != 0: continue else: new_arr.append(i) return new_arr arr = [1, 2, 3, 4, 5, 6] print(delete_odd_numbers(arr))"},{"prompt":"Edit a Python program to take input from a user. def hello(): print('Hello')","completion":"def hello(): name = input('What is your name? ') print(f'Hello {name}')"},{"prompt":"This code builds and installs the pyvex package, which provides a Python interface to libVEX and VEX IR. To build and install the package, run the setup script with the appropriate arguments. The package requires pycparser, cffi>=1.0.3, and archinfo to be installed.","completion":"# pylint: disable=no-name-in-module,import-error import os import urllib2 import subprocess import sys import shutil import glob import tarfile import multiprocessing import platform try: from setuptools import setup from setuptools import find_packages packages = find_packages() except ImportError: from distutils.core import setup packages = [x.strip('./').replace('/','.') for x in os.popen('find -name \\"__init__.py\\" | xargs -n1 dirname').read().strip().split('n')] from distutils.util import get_platform from distutils.errors import LibError from distutils.command.build import build as _build if sys.platform in ('win32', 'cygwin'): LIBRARY_FILE = 'pyvex.dll' STATIC_LIBRARY_FILE = 'pyvex.lib' elif sys.platform == 'darwin': LIBRARY_FILE = \\"libpyvex.dylib\\" STATIC_LIBRARY_FILE = 'libpyvex.a' else: LIBRARY_FILE = \\"libpyvex.so\\" STATIC_LIBRARY_FILE = 'libpyvex.a' VEX_LIB_NAME = \\"vex\\" # can also be vex-amd64-linux VEX_PATH = os.path.join('..', 'vex') if not os.path.exists(VEX_PATH): VEX_URL = 'https://github.com/angr/vex/archive/master.tar.gz' with open('master.tar.gz', 'wb') as v: v.write(urllib2.urlopen(VEX_URL).read()) with tarfile.open('master.tar.gz') as tar: tar.extractall() VEX_PATH='vex-master' def _build_vex(): e = os.environ.copy() e['MULTIARCH'] = '1' e['DEBUG'] = '1' cmd1 = ['nmake', '/f', 'Makefile-msvc', 'all'] cmd2 = ['make', '-f', 'Makefile-gcc', '-j', str(multiprocessing.cpu_count()), 'all'] for cmd in (cmd1, cmd2): try: if subprocess.call(cmd, cwd=VEX_PATH, env=e) == 0: break except OSError: continue else: raise LibError(\\"Unable to build libVEX.\\") def _build_pyvex(): e = os.environ.copy() e['VEX_LIB_PATH'] = os.path.join('..', VEX_PATH) e['VEX_INCLUDE_PATH'] = os.path.join('..', VEX_PATH, 'pub') e['VEX_LIB_FILE'] = os.path.join('..', VEX_PATH, 'libvex.lib') cmd1 = ['nmake', '/f', 'Makefile-msvc'] cmd2 = ['make', '-j', str(multiprocessing.cpu_count())] for cmd in (cmd1, cmd2): try: if subprocess.call(cmd, cwd='pyvex_c', env=e) == 0: break except OSError as err: continue else: raise LibError(\\"Unable to build libpyvex.\\") def _shuffle_files(): shutil.rmtree('pyvex/lib', ignore_errors=True) shutil.rmtree('pyvex/include', ignore_errors=True) os.mkdir('pyvex/lib') os.mkdir('pyvex/include') shutil.copy(os.path.join('pyvex_c', LIBRARY_FILE), 'pyvex/lib') shutil.copy(os.path.join('pyvex_c', STATIC_LIBRARY_FILE), 'pyvex/lib') shutil.copy('pyvex_c/pyvex.h', 'pyvex/include') for f in glob.glob(os.path.join(VEX_PATH, 'pub', '*')): shutil.copy(f, 'pyvex/include') def _build_ffi(): import make_ffi try: make_ffi.doit(os.path.join(VEX_PATH,'pub')) except Exception as e: print repr(e) raise class build(_build): def run(self): self.execute(_build_vex, (), msg=\\"Building libVEX\\") self.execute(_build_pyvex, (), msg=\\"Building libpyvex\\") self.execute(_shuffle_files, (), msg=\\"Copying libraries and headers\\") self.execute(_build_ffi, (), msg=\\"Creating CFFI defs file\\") _build.run(self) cmdclass = { 'build': build } try: from setuptools.command.develop import develop as _develop from setuptools.command.bdist_egg import bdist_egg as _bdist_egg class develop(_develop): def run(self): self.execute(_build_vex, (), msg=\\"Building libVEX\\") self.execute(_build_pyvex, (), msg=\\"Building libpyvex\\") self.execute(_shuffle_files, (), msg=\\"Copying libraries and headers\\") self.execute(_build_ffi, (), msg=\\"Creating CFFI defs file\\") _develop.run(self) cmdclass['develop'] = develop class bdist_egg(_bdist_egg): def run(self): self.run_command('build') _bdist_egg.run(self) cmdclass['bdist_egg'] = bdist_egg except ImportError: print \\"Proper 'develop' support unavailable.\\" if 'bdist_wheel' in sys.argv and '--plat-name' not in sys.argv: sys.argv.append('--plat-name') name = get_platform() if 'linux' in name: # linux_* platform tags are disallowed because the python ecosystem is fubar # linux builds should be built in the centos 5 vm for maximum compatibility sys.argv.append('manylinux1_' + platform.machine()) else: # https://www.python.org/dev/peps/pep-0425/ sys.argv.append(name.replace('.', '_').replace('-', '_')) setup( name=\\"pyvex\\", version='6.7.3.26', description=\\"A Python interface to libVEX and VEX IR.\\", packages=['pyvex', 'pyvex.lift', 'pyvex.lift.util'], cmdclass=cmdclass, install_requires=[ 'pycparser', 'cffi>=1.0.3', 'archinfo' ], setup_requires=[ 'pycparser', 'cffi>=1.0.3' ], include_package_data=True, package_data={ 'pyvex': ['lib/*', 'include/*'] } )"},{"prompt":"Generate a function for adding two numbers in Python. Not applicable","completion":"def add_two_numbers(a, b): return a + b"},{"prompt":"Design a REST API in Python which will store and retrieve customer messages.","completion":"from flask import Flask, jsonify, request app = Flask(__name__) messages = [] # list to store customer messages @app.route('/messages', methods=['POST', 'GET']) def manage_messages(): '''API endpoint to store and retrieve customer messages''' if request.method == 'POST': # storing customer message customer_message = request.get_json() messages.append(customer_message) return jsonify(message='Message successfully stored'), 200 elif request.method == 'GET': # retrieving customer messages return jsonify(messages=messages), 200"},{"prompt":"Write a python program to find the smallest element in an array. arr = [4, 6, 2, 7, 5]","completion":"def find_smallest(arr): smallest = arr[0] for i in range(1, len(arr)): if arr[i] < smallest: smallest = arr[i] return smallest"},{"prompt":"Develop a python program for predicting a movie's rating based on its reviews. reviews = ['This movie was great', 'This movie was terrible']","completion":"#Code num_reviews = len(reviews) num_positive_reviews = 0 for review in reviews: if 'great' in review: num_positive_reviews +=1 rating = num_positive_reviews / num_reviews #Rating print(rating) #Prints the rating"},{"prompt":"Create a Python program to determine whether a given spectrum is valid. spectrum = [15, 16, 18, 21, 25, 28]","completion":"def is_valid_spectrum(spectrum): m = spectrum[0] for n in spectrum[1:]: if n - m not in [1, 2]: return False m = n return True"},{"prompt":"Write a Python function to count the number of items in a given dictionary whose value is of type string. my_dict = { name: John Smith, age: 30, gender: Male, is_ married: True }","completion":"def count_string_values(my_dict): count = 0 for key, value in my_dict.items(): if isinstance(value, str): count += 1 return count my_dict = { \\"name\\": \\"John Smith\\", \\"age\\": 30, \\"gender\\": \\"Male\\", \\"is_ married\\": True } # Count number of string values result = count_string_values(my_dict) print(result)"},{"prompt":"Create a function in Python to compute the factorial of a number.","completion":"def factorial(n): if n == 1: return 1 else: return n * factorial(n-1)"},{"prompt":"Write a Python program to merge two sorted lists. The result should also be a sorted list. list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8]","completion":"def mergeSortedLists(list1, list2): # Create variables result = [] list1_index, list2_index = 0, 0 # Iterate over both lists while list1_index < len(list1) and list2_index < len(list2): # Compare and add the lower value to the result if list1[list1_index] <= list2[list2_index]: result.append(list1[list1_index]) list1_index += 1 else: result.append(list2[list2_index]) list2_index += 1 # Add any remainder items from the two lists result.extend(list1[list1_index:]) result.extend(list2[list2_index:]) return result list1 = [1, 3, 5, 7] list2 = [2, 4, 6, 8] print(mergeSortedLists(list1, list2)) # Output: [1, 2, 3, 4, 5, 6, 7, 8]"},{"prompt":"mplement an algorithm in Python to check for palindromes. noo","completion":"def isPalindrome(text): n = len(text) for i in range(n // 2): if text[i] != text[n - i - 1]: return False return True print(isPalindrome('noon'))"},{"prompt":"Write a Python program to find the longest common prefix among all strings in the list. strings = [code, coder, coding]","completion":"def find_longest_common_prefix(strings): first_str = strings[0] longest_prefix = \\"\\" for i in range(len(first_str)): current_prefix = first_str[:i] flag = True for string in strings[1:]: if not string.startswith(current_prefix): flag = False break if flag: longest_prefix = current_prefix return longest_prefix"},{"prompt":"Design a python program to print out the maximum and minimum numbers in a given list. list = [5, 2, 8, 9, 3, 6, 1]","completion":"# Find Maximum and Minimum using python def maxMin(list): max = list[0] min = list[0] for i in range(len(list)): if list[i] > max: max = list[i] if list[i] < min: min = list[i] return max, min # Main Program list = [5, 2, 8, 9, 3, 6, 1] maximum, minimum = maxMin(list) print(\\"Maximum number is: {}\\".format(maximum)) print(\\"Minimum number is: {}\\".format(minimum))"},{"prompt":"Write a Python program to generate a random password of 8 characters including at least one number and one lowercase letter. Not applicable","completion":"import string import random def generate_password(): chars = string.ascii_lowercase + string.digits + string.ascii_uppercase size = 8 return ''.join(random.choice(chars) for x in range(size)) password = generate_password() print(password)"},{"prompt":"Develop a web scraper in python to extract the text from a given website","completion":"import requests from bs4 import BeautifulSoup def scrape_text(url): page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') text = soup.find_all(text=True) return ' '.join(text).strip()"},{"prompt":"Create a QuerySet class that adds extra functionality to a basic list. It should hold instances of a single type of JSSObject and use the python list API while adding some extra helpermethods on top. The class should have methods to sort by ID and name, retrieve all contained objects' data from the JSS, save all contained objects' data to the JSS, invalidate the cache datetime for all contents, and return generators of contents' names and IDs. It should also have a class method to build a QuerySet from a listing Response.","completion":"#!/usr/bin/env python # Copyright (C) 2014-2017 Shea G Craig # # This program is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program. If not, see <http://www.gnu.org/licenses/>. \\"\\"\\"queryset.py Class that adds some extra functionality to a basic list. Used as the result of all queries in python-jss. \\"\\"\\" from __future__ import absolute_import from collections import defaultdict try: import cPickle # Python 2.X except ImportError: import _pickle as cPickle # Python 3+ import datetime import os from .jssobject import DATE_FMT, Identity STR_FMT = \\"{0:>{1}} | {2:>{3}} | {4:>{5}}\\" class QuerySet(list): \\"\\"\\"A list style collection of JSSObjects. Listing operations retrieve minimal or overview information for most object types. For example, we may want to see all the Computers on the JSS but that does not mean we want to do a full object GET for each one. QuerySets hold instances of a single type of JSSObject, and use the python list API, while adding some extra helper-methods on top. \\"\\"\\" def __init__(self, objects): \\"\\"\\"Construct a list of JSSObjects. Args: objects (sequence of JSSObjects): Sequences must be of a single class. \\"\\"\\" if objects and not len({i.__class__ for i in objects}) == 1: raise ValueError super(QuerySet, self).__init__(objects) self.sort() self.contained_class = objects[0].__class__ if objects else None def __str__(self): \\"\\"\\"Make data human readable.\\"\\"\\" # Make ID, Name first, no matter what. sort_keys = [\\"id\\", \\"name\\"] if self: sort_keys.extend([ key for key in self[0]._basic_identity.keys() if key not in sort_keys]) # Build a dict of max lengths per column for table output. lengths = defaultdict(int) for item in self: for key in sort_keys: val = item._basic_identity[key] or \\"\\" length = max(len(key), len(val)) if length > lengths[key]: lengths[key] = length # Build a format string for row output. format_strings = [] for key in sort_keys: length = lengths[key] format_strings.append(\\"{{data[{}]:>{}}}\\".format(key, length)) cached = 'cached' cached_format = '| {{cached:>{}}} |'.format(len(cached)) fmt = \\"| \\" + \\" | \\".join(format_strings) + cached_format # Begin building output with header lines. # Contained class can be None contained_name = self.contained_class.__name__ if self.contained_class is not None else \\"Empty\\" results = [\\"{} QuerySet\\".format(contained_name)] headers = {key: key for key in lengths} header_line = fmt.format(data=headers, cached=\\"cached\\") bar = len(header_line) * '-' results.extend([bar, header_line, bar]) str_cached = ( lambda i: str(i.cached) if isinstance(i.cached, bool) else 'True') table = [ fmt.format(data=item._basic_identity, cached=str_cached(item)) for item in self] results.extend(table) results.append(bar) return \\"n\\".join(results) def __repr__(self): \\"\\"\\"Make data human readable.\\"\\"\\" return \\"QuerySet({})\\".format(super(QuerySet, self).__repr__()) def sort(self, **kwargs): \\"\\"\\"Sort list elements by ID. \\"\\"\\" super(QuerySet, self).sort(key=lambda k: int(k.id)) def sort_by_name(self): \\"\\"\\"Sort list elements by name.\\"\\"\\" super(QuerySet, self).sort(key=lambda k: k.name.upper()) def retrieve_all(self): \\"\\"\\"Tell each contained object to retrieve its data from the JSS This can take a long time given a large number of objects, and depending on the size of each object. Returns: self (QuerySet) to allow method chaining. \\"\\"\\" for obj in self: if not obj.cached: obj.retrieve() return self def save_all(self): \\"\\"\\"Tell each contained object to save its data to the JSS This can take a long time given a large number of objects, and depending on the size of each object. Returns: self (QuerySet) to allow method chaining. \\"\\"\\" for obj in self: obj.save() return self def invalidate(self): \\"\\"\\"Clear the cache datetime for all contents. This causes objects to retrieve their data again when accessed. \\"\\"\\" for i in self: i.cached = False def names(self): \\"\\"\\"Return a generator of contents names\\"\\"\\" return (item.name for item in self) def ids(self): \\"\\"\\"Return a generator of contents ids\\"\\"\\" return (item.id for item in self) @classmethod def from_response(cls, obj_class, response, jss=None, **kwargs): \\"\\"\\"Build a QuerySet from a listing Response.\\"\\"\\" response_objects = ( i for i in response if i is not None and i.tag != \\"size\\") dicts = ( {child.tag: child.text for child in item} for item in response_objects) identities = (Identity(d) for d in dicts) objects = [obj_class(jss, data=i, **kwargs) for i in identities] return cls(objects)"},{"prompt":"Generate a code snippet in Python that creates a RESTful API endpoint to retrieve data from a given table in a PostgreSQL database. Table Name: users Table Schema: (column1: int, column2: varchar(20), column3: int)","completion":"import psycopg2 from flask import Flask, jsonify app = Flask(__name__) def get_data_from_db(table_name): # connect to the database connection = psycopg2.connect( user='username', password='password', host='host', port='5432', database='testdb' ) cursor = connection.cursor() # retrieve data from the table sql = f\\"\\"\\"SELECT column1, column2, column3 FROM {table_name}\\"\\"\\" cursor.execute(sql) records = cursor.fetchall() # close the connection connection.close() return records @app.route('/data/<table_name>', methods=['GET']) def get_data(table_name): # retrieve data from the db data = get_data_from_db(table_name) # build response return jsonify({'data': data}) if __name__ == '__main__': app.run()"},{"prompt":"Create a function in Python to create a list of the first 10 numbers divisible by five.","completion":"def five_divisible(): i = 0 my_list = [] while i < 10: if i % 5 == 0: my_list.append(i) i = i + 1 return my_list print(five_divisible())"},{"prompt":"Create a Python program which takes a dictionary as input and prints out a formatted string. Not applicable","completion":"d = {'Name': 'John', 'Age': 20, 'Location': 'New York'} def print_dict(d): formatted_str = '' for key, value in d.items(): if formatted_str != '': formatted_str += ', ' formatted_str += '{}={}'.format(key, value) print(formatted_str) print_dict(d) # Output: Name=John, Age=20, Location=New York"},{"prompt":"Given two strings s1 and s2, write a Python program to find the longest commmon subsequence (LCS). s1 = abcfbc s2 = abfcab","completion":"def lcs(s1, s2): m = len(s1) n = len(s2) L = [[0] * (n+1) for _ in range(m+1)] for i in range(m+1): for j in range(n+1): if i == 0 or j == 0: L[i][j] = 0 elif s1[i-1] == s2[j-1]: L[i][j] = L[i-1][j-1] + 1 else: L[i][j] = max(L[i-1][j], L[i][j-1]) index = L[m][n] lcs = [\\"\\"] * (index + 1) lcs[index] = \\"\\" i = m j = n while i > 0 and j > 0: if s1[i-1] == s2[j-1]: lcs[index-1] = s1[i-1] i -= 1 j -= 1 index -= 1 elif L[i-1][j] > L[i][j-1]: i -= 1 else: j -= 1 return \\"\\".join(lcs) print(lcs(s1, s2))"},{"prompt":"Create an email client GUI in Python using Tkinter library","completion":"import tkinter as tk # create a main window window = tk.Tk() window.title(\\"Email Client\\") # add labels and entry fields lbl_from = tk.Label(window, text=\\"From:\\") lbl_from.grid(padx=10, pady=10, row=0, column=0, sticky=\\"W\\") ent_from = tk.Entry(window,width=50) ent_from.grid(padx=10, pady=10, row=0, column=1) lbl_to = tk.Label(window, text=\\"To:\\") lbl_to.grid(padx=10, pady=10, row=1, column=0, sticky=\\"W\\") ent_to = tk.Entry(window,width=50) ent_to.grid(padx=10, pady=10, row=1, column=1) lbl_subject = tk.Label(window, text=\\"Subject:\\") lbl_subject.grid(padx=10, pady=10, row=2, column=0, sticky=\\"W\\") ent_subject = tk.Entry(window,width=50) ent_subject.grid(padx=10, pady=10, row=2, column=1) lbl_body = tk.Label(window, text=\\"Body:\\") lbl_body.grid(padx=10, pady=10, row=3,column=0, sticky=\\"W\\") txt_body = tk.Text(window, height=10, width=50) txt_body.grid(padx=10, pady=10, row=3, column=1) # enter main loop window.mainloop()"},{"prompt":"Create an endtoend automated machine learning workflow in Python. Not applicable","completion":"# import the necessary libraries for the ML workflow from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB from sklearn.metrics import accuracy_score # load the data iris = load_iris() X = iris.data y = iris.target # split the data into training and testing sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # instantiate and train the model model = GaussianNB() model.fit(X_train, y_train) # make predictions on the test data predictions = model.predict(X_test) # evaluate accuracy of the model score = accuracy_score(y_test, predictions) print(score)"},{"prompt":"Create a Python program to convert a list into a dictionary, where the list elements become the dictionary key and its corresponding index becomes its value.","completion":"def list_to_dict(list): dict = {} for i in range(len(list)): dict[list[i]] = i return dict"},{"prompt":"Write a Python program to scroll a given message on the console. message = 'Hello World!'","completion":"def scrollMessage(message): for char in message: for i in range(100): print (char, end = \\" \\") print(\\"\\") # Input message = 'Hello World!' # Output scrollMessage(message)"},{"prompt":"Create a serverless function in Python that converts a filename to a corresponding filetype. filename: âexample.jpgâ","completion":"import os def get_filetype(filename): _, file_extension = os.path.splitext(filename) return(file_extension.lower()[1:]) filetype = get_filetype(\\"example.jpg\\") print(filetype) # Output: jpg"},{"prompt":"Calculate the number of possible permutations of a string using the following Python function. word = helloworld","completion":"def factorial(string): len_string = len(string) permutations = 1 for i in range(1, len_string + 1): permutations *= i return permutations result = factorial(word) print(result)"},{"prompt":"Write a Python code to filter out the strings containing two or more words in a given list. string_list = [Hello, Hi, two words, text string, more than two words!]","completion":"def filter_words(string_list): result = [] for string in string_list: if len(string.split()) < 2: result.append(string) return result string_list = [\\"Hello\\", \\"Hi\\", \\"two words\\", \\"text string\\", \\"more than two words!\\"] print(filter_words(string_list)) #Output ['Hello', 'Hi']"},{"prompt":"Create a Python program to calculate the median value of an array. nums = [1, 5, 9, 11, 16, 21]","completion":"def median(nums): if len(nums)%2 == 0: median1 = nums[int((len(nums)-1)/2)] median2 = nums[int((len(nums))/2)] median = (median1 + median2)/2 else: median = nums[int((len(nums))/2)] return median nums = [1, 5, 9, 11, 16, 21] print(median(nums))"},{"prompt":"Create a basic machine learning model using logistic regression in Python and evaluate its performance. Not applicable","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # Load the data data = pd.read_csv('data.csv') # Split the data into training and test sets X_train, X_test, y_train, y_test = train_test_split(data.iloc[:,:-1], data.iloc[:,-1], test_size=0.2, random_state=0) # Fit the model clf = LogisticRegression() clf.fit(X_train, y_train) # Make predictions y_pred = clf.predict(X_test) # Evaluate performance from sklearn.metrics import accuracy_score accuracy = accuracy_score(y_test, y_pred) print('Accuracy: ', accuracy)"},{"prompt":"Using the input as a guide, modify the following Python code to generate a new list containing integers which are divisible by 5 in the input list. lst = [5, 10, 15, 20, 25, 30]","completion":"lst = [5, 10, 15, 20, 25, 30] divisible_by_5 = [num for num in lst if num%5 == 0] print(divisible_by_5)"},{"prompt":"Optimize the following Python code by removing unnecessary lines. def fibonacci(n): result = [] a, b = 0, 1 while a < n: result.append(a) a, b = b, a+b return resul","completion":"def fibonacci(n): a, b = 0, 1 result = [] while a < n: result.append(a) a, b = b, a+b return result"},{"prompt":"Construct a python program to calculate the average of the numbers in a given list given_list = [1, 2, 3, 4]","completion":"def calculate_average(given_list): # Initialize a variable to store the sum of the numbers list_sum = 0 # Loop over the list for num in given_list: list_sum += num # Get the average list_average = list_sum / len(given_list) return list_average # Test given_list = [1, 2, 3, 4] result = calculate_average(given_list) print(f\\"The average of {given_list} is {result}\\")"},{"prompt":"Can you develop a function in Python to iteratively sum all the numbers in a list of numbers? [4, 9, 13, 5]","completion":"def sum_list(list): total = 0 for num in list: total += num return total print(sum_list([4, 9, 13, 5])) # Output: 31"},{"prompt":"Refactor this piece of Python code to increase its readability. def maximum_sum(arr, n): msum = 0 for i in range(n): for j in range(i, n): tsum = 0 for k in range(i, j+1): tsum += arr[k]","completion":"def maximum_sum(arr, n): msum = 0 for i in range(n): for j in range(i, n): cur_sum = 0 for k in range(i, j + 1): cur_sum += arr[k] msum = max(msum, cur_sum) return msum"},{"prompt":"Create a web scrapper in Python that fetches the title of headlines from a web page.","completion":"import requests from bs4 import BeautifulSoup result = requests.get(\\"http://example.com\\") soup = BeautifulSoup(result.text, 'lxml') for link in soup.find_all('a'): title = link.text print(title)"},{"prompt":"Build a Python function to generate a random sample from standard normal distribution","completion":"import numpy as np def get_normal_sample(size): \\"\\"\\" This function will generate a random sample from standard normal distribution with length size \\"\\"\\" return np.random.normal(size=size) if __name__ == '__main__': print(get_normal_sample(10))"},{"prompt":"Create a Python program that randomly generates a 4x8 twodimensional array with each cell containing a float number between 0 and 1. Not applicable","completion":"import random # Generate random 4x8 two-dimensional array with each cell containing a float number between 0 and 1 def random_array(): a_array = [[random.uniform(0, 1) for x in range(8)] for y in range(4)] return a_array print(random_array())"},{"prompt":"write a code to implement a random forest classifier in Python using TensorFlow","completion":"\\"\\"\\"Implement a random forest classifier in Python using TensorFlow\\"\\"\\" import tensorflow as tf from tensorflow.contrib.tensor_forest.python import tensor_forest # Parameters num_classes = 2 # binary classification num_features = 14 total_samples = 4500 num_trees = 8 max_nodes = 10 # Building the Random Forest # Input and Target data X = tf.placeholder(tf.float32, shape=[None, num_features]) Y = tf.placeholder(tf.int32, shape=[None]) # Random Forest Parameters hparams = tensor_forest.ForestHParams(num_classes=num_classes, num_features=num_features, num_trees=num_trees, max_nodes=max_nodes).fill() # Build the Random Forest forest_graph = tensor_forest.RandomForestGraphs(hparams) # Get training graph and loss train_op = forest_graph.training_graph(X, Y) loss_op = forest_graph.training_loss(X, Y) # Measure the accuracy infer_op, _, _ = forest_graph.inference_graph(X) correct_prediction = tf.equal(tf.argmax(infer_op, 1), tf.cast(Y, tf.int64)) accuracy_op = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) # Initialize the variables (i.e. assign their default value) init_vars = tf.group(tf.global_variables_initializer(), resources.initialize_resources(resources.shared_resources())) # Run the session with tf.Session() as sess: # Run the initializer sess.run(init_vars) # Training for i in range(1000): # Get next batch batch_x, batch_y = get_batch_data(total_samples, batch_size) _, l = sess.run([train_op, loss_op], feed_dict={X: batch_x, Y: batch_y}) # Test Model test_x, test_y = get_batch_data(total_samples, batch_size) accuracy = sess.run(accuracy_op, feed_dict={X: test_x, Y: test_y})"},{"prompt":"dentify which of the following two Python codes is more memory efficient. # Code A def foo(): lst = [] for i in range(1, 100): lst.append(i) # Code B def foo(): lst = [i for i in range(1, 100)]","completion":"Code B is more memory efficient than Code A since it uses list comprehension instead of appending items to a list."},{"prompt":"Develop a Python script to sort a collection of numbers in descending order. A collection of numbers: [1, 9, 4, 6, 3, 7]","completion":"def sort_numbers(nums): # sort the numbers in descending order sorted_nums = sorted(nums, reverse=True) # print the sorted list print(sorted_nums) # return the sorted list return sorted_nums nums = [1, 9, 4, 6, 3, 7] sort_numbers(nums) # output: [9, 7, 6, 4, 3, 1]"},{"prompt":"Write a python code to perform the task of bubble sorting in a list. arr = [1, 10, 5, 4, 8]","completion":"def bubble_sort(arr): n = len(arr) for i in range(n): for j in range(0, n-i-1): if arr[j] > arr[j+1] : arr[j], arr[j+1] = arr[j+1], arr[j] bubble_sort(arr)"},{"prompt":"mplement a Python function to convert a float to a string with two decimal places.","completion":"def float_to_string(number): # Round the number rounded_num = round(number, 2) # Return the number converted to a string return str(rounded_num)"},{"prompt":"Write a Python script to train a sentiment classifier on a given dataset. Dataset containing sentences and labels, where each label represents the sentiment of the associated sentence.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.linear_model import LogisticRegression df = pd.read_csv('dataset.csv') X_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], random_state=0) vectorizer = TfidfVectorizer().fit(X_train) X_train_vectorized = vectorizer.transform(X_train) model = LogisticRegression(max_iter=1000).fit(X_train_vectorized, y_train) y_pred = model.predict(vectorizer.transform(X_test))"},{"prompt":"Write a python script to extract the text from a HTML page and count the number of words. <html> <head> <title>My Page</title> </head> <body> <p>This is a test page</p> </body> </html>","completion":"from bs4 import BeautifulSoup import re html_doc = <input> soup = BeautifulSoup(html_doc, 'html.parser') text = soup.get_text() words = re.findall(r'w+', text) print (len(words))"},{"prompt":"This code sets up a web application using the Bottle framework to implement a number entry and query system. It uses SQLite for database management and includes functionality for internationalization. To use the application, run the Python script and navigate to the appropriate URLs in a web browser.","completion":"# coding: utf-8 import sqlite3 import os import time import bottle from bottle import default_app, route, view from bottle import request from bottle_utils.i18n import I18NPlugin #from bottle_utils.i18n import lazy_gettext as _ #todo: refactor so that there is no error in Py3 local deployment and testing import input_number as ip from dbhelper import initialize_database import hashlib MOD_PATH = os.path.dirname(os.path.abspath(__file__)) DB_PATH = os.path.abspath(os.path.join(MOD_PATH, '..', '..', \\"lagesonr.db\\")) if not os.path.exists(DB_PATH): initialize_database(DB_PATH) lagesonrdb = sqlite3.connect(DB_PATH) #todo: populate list dynamically based on available/selected translations LANGS = [ ('de_DE', 'Deutsch'), ('en_US', 'English'), ] # ('ar_AR', 'Arab'), DEFAULT_LOCALE = 'en_US' @route('/') @view('start_page') def index(): \\"\\"\\"1.Seite: Helfer steht am LaGeSo und gibt Nummern ein [_____] \\"\\"\\" return {'entered': []} @route('/', method='POST') @view('start_page') def do_enter(): numbers = request.forms.get('numbers') timestamp = time.asctime() numbers = [num.strip() for num in numbers.split('n')] result_num = [] #todo: refactor fingerprint in extra function for better testing usr_agent = str(request.environ.get('HTTP_USER_AGENT')) usr_lang = str(request.environ.get('HTTP_ACCEPT_LANGUAGE')) usr_ip = str(request.remote_addr) usr_fingerprint = usr_agent + usr_lang + usr_ip usr_hash = hashlib.md5(usr_fingerprint.encode(\\"utf-8\\")).hexdigest() with lagesonrdb as con: cur = con.cursor() for num in set(numbers): if ip.is_valid_number(num) and ip.is_ok_with_db( num) and ip.is_valid_user(): num = str(num).capitalize() query = 'SELECT NUMBER FROM NUMBERS WHERE NUMBER=\\"%s\\" AND FINGERPRINT=\\"%s\\"' % (num, usr_hash) if len(list(cur.execute(query))) == 0: insert = 'INSERT INTO NUMBERS(NUMBER, TIME, PLACE, USER, FINGERPRINT) VALUES (\\"%s\\", \\"%s\\", \\"-\\", ' '\\"-\\", \\"%s\\")' % (num, timestamp, usr_hash) cur.execute(insert) result_num.append(num) else: result_num.append(\\"ALREADY ENTERED BY - %s - %s - %s: %s\\" % (usr_ip, usr_agent, usr_lang, num)) #return {'entered': [\\"already before - by you!\\"], 'timestamp': timestamp} else: result_num.append(\\"INVALID INPUT: %s\\" % num) return {'entered': result_num, 'timestamp': timestamp} @route('/query') @view('query_page') def query(): return {'result': '-', 'timestamp_first': '-','timestamp_last': '-', 'n': '-'} @route('/query', method='POST') @view('query_page') def do_query(): number = request.forms.get('number') timestamp_first = '-' timestamp_last = '-' n = '0' if ip.is_valid_number(number) and ip.is_ok_with_db( number) and ip.is_valid_user(): with lagesonrdb as con: cur = con.cursor() number = str(number).capitalize() query = 'SELECT TIME FROM NUMBERS WHERE NUMBER=\\"%s\\" ORDER BY TIME' % number result = list(cur.execute(query)) n = len(result) if n > 0: timestamp_first, timestamp_last = result[0][0], result[-1][0] else: timestamp_first = 'NOT FOUND' else: timestamp_first = 'INVALID INPUT' return {'result': number, 'timestamp_first': timestamp_first, 'timestamp_last': timestamp_last, 'n': n} @route('/about') @view('about') def about(): pass @route('/impressum') @view('impressum') def impressum(): pass # findet templates im gleichen Verzeichnis bottle.TEMPLATE_PATH.append(MOD_PATH) app = default_app() application = I18NPlugin(app, langs=LANGS, default_locale=DEFAULT_LOCALE, domain='messages', locale_dir=os.path.join(MOD_PATH, 'locales'))"},{"prompt":"Develop a python program to print the character with the maximum frequency in a given string. sample_str = 'football'","completion":"def max_frequency_char(string): char_freq = {} for char in string: if char in char_freq.keys(): char_freq[char] += 1 else: char_freq[char] = 1 max_freq = 0 max_char = None for char, freq in char_freq.items(): if freq > max_freq: max_freq = freq max_char = char return max_char print(max_frequency_char(sample_str))"},{"prompt":"Develop a program in Python for implementing Merge Sort algorithm.","completion":"def merge_sort(arr): if len(arr) >1: mid = len(arr)//2 L = arr[:mid] R = arr[mid:] merge_sort(L) merge_sort(R) i = j = k = 0 while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i+=1 else: arr[k] = R[j] j+=1 k+=1 while i < len(L): arr[k] = L[i] i+=1 k+=1 while j < len(R): arr[k] = R[j] j+=1 k+=1 if __name__ == '__main__': arr = [0, 4, 1, 3, 6, 5, 8, 7] print(\\"Given array is\\", arr) merge_sort(arr) print(\\"Sorted array is: \\", arr)"},{"prompt":"Refactor the following Python code to use list comprehension instead of forloops. my_list = [1, 2, 3, 4, 5] new_list = [] for item in my_list: if item % 2 == 0: new_list.append(item**2)","completion":"my_list = [1, 2, 3, 4, 5] new_list = [x**2 for x in my_list if x % 2 == 0]"},{"prompt":"Print the Fibonacci sequence in Python using an recursive approach. Not applicable","completion":"def fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return fibonacci(n-1)+fibonacci(n-2) # Driver Program print(fibonacci(9))"},{"prompt":"Write a Python program to multiply two numbers using recursion.","completion":"def multiply(x, y): if y == 0: return 0 else: return x + multiply(x, y - 1)"},{"prompt":"Create a Python program that reads an input list and replaces all occurrences of 0 with 1. [1, 0, 2, 4, 0, 5]","completion":"def replace_zeros(lst): for i in range(len(lst)): if lst[i] == 0: lst[i] = -1 return lst # Main input_list = [1, 0, 2, 4, 0, 5] new_list = replace_zeros(input_list) print('List after replacement:', new_list)"},{"prompt":"Create a Python program to display a multiplication table of size n x n. 3","completion":"n = 3 for i in range(1, n+1): for j in range(1, n+1): print(f'{i} x {j} = {i*j}', end='t') print()"},{"prompt":"Generate a code which implements a minimum heap house.","completion":"# Python program to demonstrate Min Heap from heapq import heappop, heappush class MinHeap: def __init__(self): self.heap = list() # Inserts a new key 'k' def push(self, k): heappush(self.heap, k) # Decrease value of key at index 'i' to new_val # It is assumed that new_val is smaller than heap[i] def decreaseKey(self, i, new_val): self.heap[i] = new_val while(i != 0 and self.heap[int((i - 1) / 2)] > self.heap[i]): //Swapping the two keys self.heap[i] = self.heap[int((i - 1) / 2)] self.heap[int((i - 1) / 2)] = self.heap[i] i = int((i - 1) / 2); # Method to remove minium element from min heap def pop(self): if self.heap: # Replace root with last element of the heap self.heap[0] = self.heap[len(self.heap) - 1] # Remove last element self.heap.pop() # Heapify the root element self.minHeapify(0) else: return None # This function mainly calls minHeapify of the root. def minHeapify(self, i): l = 2 * i + 1 r = 2 * i + 2 smallest = i if l < len(self.heap) and self.heap[i] > self.heap[l]: smallest = l if r < len(self.heap) and self.heap[smallest] > self.heap[r]: smallest = r if smallest != i: self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i] self.minHeapify(smallest)"},{"prompt":"Create a Python function to calculate the area of a triangle given the lengths of its three sides. 5, 6, 7","completion":"import math def get_area(a, b, c): s = (a + b + c) / 2 area = math.sqrt(s*(s-a)*(s-b)*(s-c)) return area input_data = 5, 6, 7 area = get_area(*input_data) print(area) # Output: 14.696938456699069"},{"prompt":"Create a function in Python that takes a list of integers and returns the largest integer. [1, 5, 4, 9, 2]","completion":"def biggest_number(num_list): return max(num_list) biggest = biggest_number([1, 5, 4, 9, 2]) print(biggest) # prints 9"},{"prompt":"Generate a Hangman game in Python.","completion":"import random # Set the number of turns MAX_GUESSES = 5 # Create an empty list that will contain the guessed letters guessed_letters = [] # Welcome the user print(\\"Welcome to Hangman!\\") # Generate a random word with open(\\"words.txt\\", \\"r\\") as f: words = f.read().splitlines() word = random.choice(words) # Create a list for the hidden word hidden_word = [\\"_\\" for i in range(len(word))] # Main game loop for i in range(MAX_GUESSES): # Print the current state of the game print(\\"nTurn {}\\".format(i+1)) print(\\" \\".join(hidden_word)) print(\\"Letters guessed: {}\\".format(\\"\\".join(guessed_letters))) # Get a guess from the user guess = input(\\"Enter a letter: \\") guessed_letters.append(guess) # Update the hidden_word with the guessed letter if guess in word: indices = [i for i, x in enumerate(word) if x == guess] for index in indices: hidden_word[index] = guess # Check if the user won if \\"_\\" not in hidden_word: print(\\"You Win!\\") break # Check for a loss if \\"_\\" in hidden_word: print(\\"You Lose! The word was {}.\\".format(word))"},{"prompt":"Create a Python program to find the first five positive numbers which are divisible by 7, but not a multiple of 5.","completion":"result = [] num = 1 while len(result) < 5: if (num % 7 == 0) and (num % 5 != 0): result.append(num) num += 1 print(result)"},{"prompt":"Generate random integers within a given range in Python.","completion":"import random def generate_random_integers(start, end): return random.randint(start, end) generate_random_integers(1, 10); //Output: 8"},{"prompt":"Come up with a Python objectoriented program to represent a circle.","completion":"class Circle: def __init__(self, radius): self.radius = radius def get_area(self): return 3.14 * self.radius * self.radius"},{"prompt":"Generate a python function that takes in a string and replaces certain characters Input string: hello world Characters to replace: l Replacement character: a","completion":"def replaceChar(s, charToReplace, replacementChar): newStr = \\"\\" for char in s: if char == charToReplace: newStr += replacementChar else: newStr += char return newStr print(replaceChar(\\"hello world\\", \\"l\\", \\"a\\")) # Output: \\"heaaao worad\\""},{"prompt":"Compile a list of publicly available data sets related to sports using Python. Not applicable","completion":"# import required modules import requests import json # set the base url base_url = 'http://api.datapoint.metoffice.gov.uk/' # set the query parameters params = { 'key': 'YOUR_API_KEY', 'res': 'sport' } # get the response from API response = requests.get(base_url, params=params) # parse the response data = json.loads(response.text) # get list of all sports data sets data_sets = [d['name'] for d in data['resources']] # print all data sets for d in data_sets: print(d)"},{"prompt":"Create a Python script to whitelist a specific user from a list of users. user_list = [user1,user2,user3,user4,user5] whitelist_user = user3","completion":"def whitelist_user(user_list, whitelist_user): Whitelisted_users = [] for user in user_list: if user == whitelist_user: Whitelisted_users.append(user) return Whitelisted_users"},{"prompt":"Create a Python program to find the binary representation of a given positive integer. 42","completion":"def find_binary_representation(num): # base case if num == 0: return 0 # stores the binary representation bin_rep = \\"\\" # to store the remainder rem = 0 while (num != 0): # calculate remainder rem = num % 2 bin_rep += str(rem) num //= 2 # reverse the string and return it bin_rep = bin_rep[::-1] return bin_rep # Main program num = 42 binary_rep = find_binary_representation(num) print(binary_rep)"},{"prompt":"Write a Python program to add two numbers in base10. num1 = 6, num2 = 8","completion":"def add_base10(num1, num2): return num1 + num2"},{"prompt":"mplement a Python function to swap two values in a list. List: 4 8 1 5","completion":"def swapPositions(list, pos1, pos2): first_ele = list[pos1] list[pos1] = list[pos2] list[pos2] = first_ele return list # Driver function list = [4, 8, 1, 5] pos1, pos2 = 0, 3 print(swapPositions(list, pos1, pos2))"},{"prompt":"Create a Python application using Tkinter and the sqlite3 library which allows users to view and add to an existing database of movies. The application should display a list of movies in the database in a table, and allow users to filter the list by genre. Not applicable","completion":"import sqlite3 import tkinter # create the Tkinter window root = tkinter.Tk() # set up the sqlite connection conn = sqlite3.connect('movies.db') cursor = conn.cursor() # create the table cursor.execute(\\"\\"\\"CREATE TABLE IF NOT EXISTS movies ( title TEXT, genre TEXT )\\"\\"\\") # create labels for the search boxes search_title = tkinter.Label(root, text=\\"Title:\\") search_genre = tkinter.Label(root, text=\\"Genre:\\") # create search boxes title_box = tkinter.Entry(root) genre_box = tkinter.Entry(root) # create a button to submit the search submit_button = tkinter.Button(root, text=\\"Submit\\", command=search_movies) #function that handles the whole search def search_movies(): title = title_box.get() genre = genre_box.get() # build the sql query query = \\"\\"\\"SELECT * FROM movies WHERE\\"\\"\\" if title != '': query+=f\\"\\"\\" title=\\"{title}\\" AND\\"\\"\\" if genre != '': query+=f\\"\\"\\" genre=\\"{genre}\\"\\"\\" query = f\\"\\"\\"{query} ORDER BY title asc;\\"\\"\\" # execute the query cursor.execute(query) Â§Â§ 1131 rows = cursor.fetchall() #render the data in the table for row in rows: row_text = f\\"\\"\\" Title: {row[0]}, Genre: {row[1]}\\"\\"\\" row_label = tkinter.Label(root, text=row_text) row_label.pack() #pack the widgets search_title.pack() title_box.pack() search_genre.pack() genre_box.pack() submit_button.pack() root.mainloop()"},{"prompt":"Create a Python program to find the longest consecutive sequence of integers in an unsorted array. [9, 6, 1, 3, 7, 5, 4, 8]","completion":"def find_longest_consecutive_sequence(arr): longest_val = 0 current_val = 0 for i in range(0, len(arr)-1): current_val = 0 j = i while arr[j] + 1 == arr[j+1]: j += 1 current_val += 1 if current_val > longest_val: longest_val = current_val return longest_val print(find_longest_consecutive_sequence([9, 6, 1, 3, 7, 5, 4, 8])) # 3"},{"prompt":"Generate a random integer between 1 and 100 using python.","completion":"import random random_int = random.randint(1, 100)"},{"prompt":"Generate a Python class for a Bicycle object. This class should contain attributes for the type, size, price, and speed. Not applicable","completion":"class Bicycle: def __init__(self, type, size, price, speed): self.type = type self.size = size self.price = price self.speed = speed def get_type(self): return self.type def get_size(self): return self.size def get_price(self): return self.price def get_speed(self): return self.speed # Creating an instance of the Bicycle class bike = Bicycle(\\"mountain\\", \\"medium\\", 500, 20) # Accessing class attributes print(bike.get_type()) print(bike.get_size()) print(bike.get_price()) print(bike.get_speed()) # Output: mountain medium 500 20"},{"prompt":"Write a function in Python that takes in a string and removes all the unnecessary whitespaces. This string contains too much whitespace!","completion":"def remove_whitespaces(string): return ' '.join(string.split()) print(remove_whitespaces(\\"This string contains too much whitespace!\\"))"},{"prompt":"Design an algorithm in Python to detect if a given tree is a binary search tree.","completion":"\\"\\"\\" Design an algorithm in Python to detect if a given tree is a binary search tree \\"\\"\\" #Define the Node class class Node: def __init__(self, key): self.left = None self.right = None self.val = key # Define the isBST function def isBST(root): # Base condition if root is None: return True # Check if the value is within range if root.val < getMaxValue(root.left) or root.val > getMinValue(root.right): return False # Check the subtrees if (not isBST(root.left)) or (not isBST(root.right)): return False # Pass all test cases return True # Find the minimum value in a tree def getMinValue(root): if root is None: return float(\\"inf\\") minv = root.val minv = min(minv, getMinValue(root.left)) minv = min(minv, getMinValue(root.right)) return minv # Find the maximum value in a tree def getMaxValue(root): if root is None: return -float(\\"inf\\") maxv = root.val maxv = max(maxv, getMaxValue(root.left)) maxv = max(maxv, getMaxValue(root.right)) return maxv"},{"prompt":"Design an algorithm in Python for reversing a string. exampleString = Hello World","completion":"def reverse_string(exampleString): return exampleString[::-1] print(reverse_string(exampleString))"},{"prompt":"Generate code using Python to find the largest and smallest number in a given list. [2, 3, 5, 8, 1, 9, 4]","completion":"def min_max(array): min_val = array[0] max_val = array[0] for element in array: if(element > max_val): max_val = element if(element < min_val): min_val = element return (min_val, max_val)"},{"prompt":"Create a program in Python to classify an input string as either palindrome or not. Input string: racecar","completion":"def is_palindrome(string): # reverse the string and compare reversed_string = ''.join(reversed(string)) if string == reversed_string: print(\\"Input string is a palindrome\\") else: print(\\"Input string is not a palindrome\\") is_palindrome(\\"racecar\\") # Outputs: \\"Input string is a palindrome\\""},{"prompt":"Write a Python program to create a dictionary from two lists. Make the dictionary keys from the first list, and the value from the second list. Tractors, 100 Cars, 50","completion":"dictionary = { \\"Tractors\\": 100, \\"Cars\\": 50 }"},{"prompt":"Create a function in Python to sort this list of highscores in descending order. [150, 160, 233, 700, 800, 1200]","completion":"def sortScores(scores): return sorted(scores, reverse=True)"},{"prompt":"Design a program that outputs the average value of a list in Python. [1, 4, 10, 6]","completion":"# Given a list of numbers nums = [1, 4, 10, 6] # Calculate the average total = 0 for num in nums: total += num average = total/ len(nums) # Output the average print(average)"},{"prompt":"Write an ORM (Object Relational Mapping) query in Python. Sample data: users: id (integer), name (string), email (string)","completion":"from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from sqlalchemy.ext.declarative import declarative_base engine = create_engine('sqlite:///mydb.db') Base = declarative_base() class User(Base): __tablename__ = 'users' id = Column(Integer, primary_key=True) name = Column(String) email = Column(String) session = sessionmaker(bind=engine)() #query users = session.query(User).all() for user in users: print(f\\"User: {user.name}, Email: {user.email}\\")"},{"prompt":"Generate a Python script to print the elements of a list in reverse order. [1, 2, 3, 4, 5]","completion":"my_list = [1, 2, 3, 4, 5] for i in reversed(my_list): print(i)"},{"prompt":"Convert the following Python code to Java: a = 10 b = 20 c = a + b","completion":"int a = 10; int b = 20; int c = a + b;"},{"prompt":"Given a Python dictionary, print out the keys and values that are duplicated. my_dict = {'a': 'apple', 'b': 'banana', 'c': 'apple'}","completion":"for key, value in my_dict.items(): if my_dict.values().count(value) > 1: print(key, value)"},{"prompt":"Make an algorithm in Python that checks whether two strings are anagrams of each other. s1 = apple s2 = lepap","completion":"def isAnagram(s1, s2): # Remove white spaces and convert strings to lowercase s1 = s1.replace(' ', '').lower() s2 = s2.replace(' ', '').lower() # Return boolean for sorted match. return sorted(s1) == sorted(s2) # Driver code s1 = \\"apple\\" s2 = \\"lepap\\" if isAnagram(s1, s2): print(\\"True, The strings are anagram of each other\\") else: print(\\"False, The strings are not anagram of each other\\")"},{"prompt":"Write a function in Python to find the closest pair of points from a given set of points. [(2, 4), (0, 2), (1, 0), (3, 5), (2, 3), (3, 2)]","completion":"def find_closest_pair_of_points(points): min_dist = float(\\"inf\\") pair=[None, None] for i in range(len(points)): for j in range(i + 1, len(points)): dist = dist_between_points(points[i], points[j]) if dist < min_dist: min_dist = dist pair[0], pair[1] = points[i], points[j] return pair def dist_between_points(p1, p2): x1, y1 = p1 x2, y2 = p2 return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)"},{"prompt":"Create a python object to store a students name, roll number, and courses","completion":"class Student: def __init__(self, name, roll_number, courses): self.name = name self.roll_number = roll_number self.courses = courses"},{"prompt":"Construct a Python program to generate a random password using alphanumeric characters and special symbols. Password Length = 8","completion":"import random import string def generate_password(length): chars = string.ascii_letters + string.digits + string.punctuation return ''.join(random.choice(chars) for _ in range(length)) print(generate_password(8))"},{"prompt":"Create an API endpoint to delete a record from a database using Python.","completion":"# Import the necessary modules from flask import Flask, request import sqlite3 # Create the Flask application app = Flask(__name__) # Establish a connection to the database conn = sqlite3.connect('database.db') c = conn.cursor() # Create a function to delete a record @app.route('/delete_record/<int:id>', methods=['DELETE']) def delete_record(id): c.execute(\\"DELETE FROM records WHERE rowid = ?\\", (id,)) conn.commit() return \\"Record deleted successfully\\" if __name__ == '__main__': app.run(debug=True)"},{"prompt":"mplement a Stack in Python using the linked list data structure. Not applicable","completion":"class Stack: def __init__(self): self.head = None def is_empty(self): return self.head is None def push(self, data): node = Node(data) node.next = self.head self.head = node def pop(self): if self.head is None: return None data = self.head.data self.head = self.head.next return data class Node: def __init__(self, data): self.data = data self.next = None"},{"prompt":"Create a Python data science program to predict housing prices based on the features of square footage, number of bedrooms, number of bathrooms, and location. 30 sqm, 3 bedrooms, 2 bathrooms, Brookly","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression data = {'Square Footage': [30], 'Bedrooms': [3], 'Bathrooms': [2], 'Location': ['Brooklyn']} data = pd.DataFrame(data, columns = ['Square Footage', 'Bedrooms', 'Bathrooms', 'Location']) train, test = train_test_split(data, test_size = 0.2) X_train = train.iloc[:,:-1] y_train = train.iloc[:,-1] X_test = test.iloc[:,:-1] y_test = test.iloc[:,-1] regressor = LinearRegression() regressor.fit(X_train, y_train) predictions = regressor.predict(X_test) test['Predicted House Price'] = predictions print(test)"},{"prompt":"Classify the following Python code as a function or a class. import math class Circle: def __init__(self, radius): self.radius = radius def area(self): return math.pi * self.radius**2","completion":"Class"},{"prompt":"Can you recommend important Python libraries that are useful for data science?","completion":"There are many important libraries in Python that are useful for data science, such as: â¢ NumPy â for array and matrix manipulation â¢ Pandas â for data manipulation, analysis, and wrangling â¢ Matplotlib â for data visualization â¢ Scikit-learn â for machine learning algorithms â¢ Tensorflow â for deep learning â¢ Seaborn â for statistical data visualization â¢ statsmodels â for statistical data analysis and modeling â¢ Keras â for building deep learning models"},{"prompt":"Write a python program to retrieve the value at a given index of a list. Lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] Index = 1","completion":"def getValueAtIndex(my_list, index): return my_list[index] result = getValueAtIndex([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) print(result)"},{"prompt":"Construct a class for a triangle in the Python language.","completion":"class Triangle: def __init__(self, side1, side2, side3): self.side1 = side1 self.side2 = side2 self.side3 = side3 def get_perimeter(self): return self.side1 + self.side2 + self.side3 def get_area(self): s = self.get_perimeter() / 2 return (s * (s-self.side1) * (s-self.side2) * (s-self.side3)) ** 0.5"},{"prompt":"Create a python class with setter and getter methods.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age def get_name(self): return self.name def get_age(self): return self.age def set_name(self, name): self.name = name def set_age(self, age): self.age = age"},{"prompt":"Create a commandline tool in Python that can calculate the sum of two numbers. Not applicable","completion":"import argparse # Create a parser parser = argparse.ArgumentParser() # Add the arguments parser.add_argument('--num1', type=int, help='First number') parser.add_argument('--num2', type=int, help='Second number') # Execute the parse_args() method args = parser.parse_args() #Calculate the sum sum = args.num1 + args.num2 #Print the sum print(sum)"},{"prompt":"Construct a function in Python to detect the minimum subset of features that can optimally separate two categories of items in the input. data = [{'x1': 0.1, 'x2': 0.2, 'x3': 0.3, 'x4': 0.4, 'category': 0}, {'x1': 0.2, 'x2': 0.3, 'x3': 0.4, 'x4': 0.5, 'category': 1}, {'x1': 0.3, 'x2': 0.4, 'x3': 0.5, 'x4': 0.6, 'category': 0}, {'x1': 0.4, 'x2': 0.5, 'x3': 0.6, 'x4': 0.7, 'category': 1}]","completion":"def minimum_subset(data): features = list(data[0].keys())[:-1] # get the feature names min_num_feature = float('inf') features_selected = [] for i in range(1,len(features)+1): for combination in itertools.combinations(features,i): num_correct, num_total = 0, 0 for datum in data: if all(datum[feat] > 0.5 for feat in combination): if datum['category'] == 1: num_correct += 1 elif all(datum[feat] <= 0.5 for feat in combination): if datum['category'] == 0: num_correct += 1 num_total += 1 if num_total == 0: continue accuracy = num_correct / num_total if accuracy == 1 and min_num_feature > i: min_num_feature = i features_selected = combination return features_selected"},{"prompt":"Write a Python program to find the lowest common ancestor of two given nodes in a binary tree.","completion":"def find_lca(root, node1, node2): if root is None: return None if root == node1 or root == node2: return root left_lca = find_lca(root.left, node1, node2) right_lca = find_lca(root.right, node1, node2) if left_lca and right_lca: return root return left_lca if left_lca is not None else right_lca"},{"prompt":"Generate a Python program that takes two strings from the user and compares them to indicate if they are equal.","completion":"string1 = input(\\"Enter a string: \\") string2 = input(\\"Enter another string: \\") if string1 == string2: print(\\"The strings are equal\\") else: print(\\"The strings are not equal\\")"},{"prompt":"Create a basic Python Flask application that takes a number as input from a form and displays its increment by 1. Not applicable","completion":"from flask import Flask, request, render_template app = Flask(__name__) @app.route('/', methods=['GET', 'POST']) def index(): if request.method == 'POST': number = int(request.form['number']) incremented_number = number + 1 return render_template('index.html', incremented_number=incremented_number) else: return render_template('index.html') if __name__ == '__main__': app.run(debug=True) <!DOCTYPE html> <html> <head> <title>Python Flask Example</title> </head> <body> <form method=\\"post\\"> <input type=\\"number\\" name=\\"number\\" /> <input type=\\"submit\\" value=\\"Submit\\" /> </form> {% if incremented_number %} <p>{{ incremented_number }}</p> {% endif %} </body> </html>"},{"prompt":"Create a program in Python which prints out all possible combinations of a given string.","completion":"def generate_combinations(s): result = [] for i in range(len(s)): for j in range(i+1, len(s)+1): result.append(s[i:j]) return result"},{"prompt":"Create a class in Python for a Pizza. The Pizza class should have attributes for size, crust, and toppings Not applicable","completion":"class Pizza: def __init__(self, size, crust, *toppings): self.size = size self.crust = crust self.toppings = toppings def describe_pizza(self): print(f\\"This pizza is a {self.size}-inch pizza with a {self.crust} crust and the following toppings:\\") for topping in self.toppings: print(f\\"- {topping}\\") my_pizza = Pizza(12, 'thin', 'mushrooms', 'olives', 'pepperoni') my_pizza.describe_pizza()"},{"prompt":"Create a Python program to optimize a Neural Network. Neural network takes two input features and has three layers of size 50 and 20 neurons.","completion":"import tensorflow as tf from tensorflow.keras import layers # Create the model model = tf.keras.Sequential() model.add(layers.Dense(50, activation='relu', input_dim=2)) model.add(layers.Dense(20, activation='relu')) model.add(layers.Dense(1, activation='sigmoid')) # Compile the model model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) # Fit the model model.fit(X_train, y_train, epochs=20) # Evaluate the model score = model.evaluate(X_test, y_test, verbose=0) print('Test loss:', score[0]) print('Test accuracy:', score[1])"},{"prompt":"Create a function in Python to take a given list of numbers and return true if all of the numbers from 1 to the given number can be found in the list. arr = [1, 3, 5, 2] number = 5","completion":"def find_all(arr, number): if len(arr) < number: return False temp = [False for i in range(number + 1)] # mark each position present in the given list. for i in range(len(arr)): if arr[i] <= number: temp[arr[i]] = True # check if all numbers are marked. for i in range(1, number + 1): if temp[i] == False: return False return True arr = [1, 3, 5, 2] number = 5 print(find_all(arr, number)) # True"},{"prompt":"Generate a Python program to edit a given list of strings and remove the duplicates inplace. [AB, AC, AB, CD, AC]","completion":"list = [\\"AB\\", \\"AC\\", \\"AB\\", \\"CD\\", \\"AC\\"] seen = set() res = [] for item in list: if item in seen: continue seen.add(item) res.append(item) list[:] = res print(list)"},{"prompt":"Write a function for merging two sorted lists in Python. list1 = [2, 9, 12] list2 = [4, 8, 10]","completion":"def mergeSortedLists(list1, list2): list3 = [] i = 0 j = 0 while i < len(list1) and j < len(list2): if list1[i] < list2[j]: list3.append(list1[i]) i += 1 else: list3.append(list2[j]) j += 1 while i < len(list1): list3.append(list1[i]) i += 1 while j < len(list2): list3.append(list2[j]) j += 1 return list3 list3 = mergeSortedLists(list1, list2); console.log(list3);"},{"prompt":"Generate a Python script to classify a dataset of features into two classes [height, weight, shoe_size, age, gender]","completion":"# Import necessary libraries import numpy as np from sklearn import tree # Create the two classes class_1 = [1, 0] class_2 = [0, 1] # Initialize the dataset of features data_set = np.array([ [172, 80, 10, 28, 0], [188, 78, 11, 33, 0], [150, 55, 8, 21, 1], [170, 68, 9, 22, 1], ]) # Initialize the labels labels = np.array([class_1, class_2, class_2, class_1]) # Create the decision tree classifier clf = tree.DecisionTreeClassifier() clf = clf.fit(data_set, labels) # Create a prediction prediction = clf.predict([[187,77,11,34,0]]) # Output the prediction if prediction == class_1: print(\\"Prediction: Class 1\\") elif prediction == class_2: print(\\"Prediction: Class 2\\")"},{"prompt":"Write a web scraper in Python that downloads all article headlines from BBC's business news section. Not applicable","completion":"import requests from bs4 import BeautifulSoup # Set the URL you want to webscrape from url = 'https://www.bbc.co.uk/news/business/' # Connect to the URL response = requests.get(url) # Parse HTML and save to BeautifulSoup object soup = BeautifulSoup(response.text, \\"html.parser\\") # To download the whole data set, let's do a for loop through all a tags for link in soup.find_all('a'): # Get the text of the link headline = link.get('title') if headline is not None and headline != \\"\\": print(headline)"},{"prompt":"Write a Python program to optimize a given code by introducing a divide and conquer strategy. # Function to find sum of all elements in a list def list_sum_recursive(nums): # Base case if len(nums) == 1: return nums[0] else: return nums[0] + list_sum_recursive(nums[1:]) # Driver code nums = [1, 2, 3, 4, 5] sum_nums = list_sum_recursive(nums) print(sum_nums)","completion":"# Function to find sum of all elements in a list def list_sum_recursive(nums): # Base case if len(nums) == 1: return nums[0] else: # Divide & Conquer mid = len(nums) // 2 leftsum = list_sum_recursive(nums[:mid]) rightsum = list_sum_recursive(nums[mid:]) return leftsum + rightsum # Driver code nums = [1, 2, 3, 4, 5] sum_nums = list_sum_recursive(nums) print(sum_nums)"},{"prompt":"Write a Python program that prints out the number of days since a given date.","completion":"from datetime import date def days_since(date_str): today = date.today() given_date = date.fromisoformat(date_str) days = today - given_date return days.days"},{"prompt":"Create a REST API in Python to store data in a SQLite database. This API should include endpoints for creating, reading, updating, and deleting data. Not applicable","completion":"import sqlite3 from flask import Flask, jsonify, request app = Flask(__name__) # Create a connection to the database conn = sqlite3.connect('example.db') # Create an endpoint to handle creating data @app.route('/', methods=['POST']) def create_data(): data = request.json conn.execute('INSERT INTO data (data) VALUES (?)', (data,)) conn.commit() return jsonify({'inserted': data}) # Create an endpoint to handle reading data @app.route('/<int:id>/', methods=['GET']) def read_data(id): cursor = conn.execute('SELECT data FROM data WHERE id=?', (id,)) row = cursor.fetchone() return jsonify({'id': id, 'data': row}) # Create an endpoint to handle updating data @app.route('/<int:id>/', methods=['PUT']) def update_data(id): data = request.json conn.execute('UPDATE data SET data=? WHERE id=?', (data, id)) conn.commit() return jsonify({'updated': data}) # Create an endpoint to handle deleting data @app.route('/<int:id>/', methods=['DELETE']) def delete_data(id): conn.execute('DELETE FROM data WHERE id=?', (id,)) conn.commit() return jsonify({'deleted': id}) if __name__ == '__main__': app.run()"},{"prompt":"Create a class called RelatedManagerListSerializerField that inherits from ListSerializerField. The class should have an __init__ method that takes in a serializer, sort_by, and use_prefetch as arguments. The class should also have a pre_value method that takes in fields and exclude as arguments, and a set_value method that takes in a value as an argument. The set_value method should check if the value is None, an Iterable, a QuerySet, or a Manager, and then set the items, _native_items, and _python_items attributes accordingly. Finally, the set_value method should loop through the values and add each item to the class using the add_item method.","completion":"# -*- coding: utf-8 -*- from collections import Iterable try: from django.db.models.query import QuerySet from django.db.models import Manager except ImportError: QuerySet = None Manager = None from aserializer.fields import ListSerializerField from aserializer.django.utils import get_local_fields, get_related_fields class RelatedManagerListSerializerField(ListSerializerField): def __init__(self, serializer, sort_by=None, use_prefetch=False, *args, **kwargs): super(RelatedManagerListSerializerField, self).__init__(serializer=serializer, sort_by=sort_by, *args, **kwargs) self.use_prefetch = use_prefetch def pre_value(self, fields=None, exclude=None, **extras): super(RelatedManagerListSerializerField, self).pre_value(fields=fields, exclude=exclude, **extras) self.use_prefetch = extras.get('use_prefetch', self.use_prefetch) def set_value(self, value): if value is None: return elif isinstance(value, Iterable): values = value elif isinstance(value, (QuerySet, Manager)): # if using prefetch_related, we can't use only as it will re-fetch the data if not self.use_prefetch and (self.only_fields or self.exclude): local_fields = get_local_fields(value.model) related_fields = get_related_fields(value.model) only_fields = [f.name for f in local_fields] if self.only_fields: only_fields = [f for f in only_fields if f in self.only_fields] exclude_fields = [f.name for f in local_fields if f.name in self.exclude] if exclude_fields: only_fields = [f for f in only_fields if f not in exclude_fields] only_fields += [f.name for f in related_fields] # .only() returns a QuerySet of RelatedDjangoModel_Deferred objects? values = value.only(*only_fields) else: values = value.all() else: return self.items[:] = [] self._native_items[:] = [] self._python_items[:] = [] for item in values: self.add_item(source=item)"},{"prompt":"Suggest a python code that checks if two strings are anagrams of each other","completion":"def isAnagram(str1, str2): str1 = str1.replace(\\" \\", \\"\\") str2 = str2.replace(\\" \\", \\"\\") # remove all whitespaces if sorted(str1) == sorted(str2): return True else: return False"},{"prompt":"Create Python code to generate the first 10 prime numbers. No input.","completion":"def generate_prime_numbers(n): nums = [] for x in range(2, n + 1): for y in range(2, int(x ** 0.5) + 1): if x % y == 0: break else: nums.append(x) return nums print(generate_prime_numbers(10))"},{"prompt":"Create a class in Python which takes a name and assigns it to the user_name property.","completion":"class User: def __init__(self, name): self.user_name = name;"},{"prompt":"Create a Python commandline program that takes in two users' birth dates and calculates the differences in years, months, and days between the two users' birthdays. User 1birthdate: 19890926 User 2birthdate: 19970315","completion":"import datetime def calc_diff(user1, user2): date1 = datetime.datetime.strptime(user1, \\"%Y-%m-%d\\") date2 = datetime.datetime.strptime(user2, \\"%Y-%m-%d\\") days_diff = (date2 - date1).days years_diff = int(days_diff / 365) months_diff = int(days_diff % 365 / 30) days_diff = int(days_diff % 365 % 30) return years_diff, months_diff, days_diff user1 = \\"1989-09-26\\" user2 = \\"1997-03-15\\" years_diff, months_diff, days_diff = calc_diff(user1, user2) print(f\\"There is a difference of {years_diff} years, {months_diff} months, and {days_diff} days between the two users' birthdays.\\")"},{"prompt":"Develop a Python program to print the first 20 Armstrong numbers","completion":"for num in range(1,21): sum = 0 temp = num while temp > 0: digit = temp % 10 sum += digit ** 3 temp //= 10 if num == sum: print(num)"},{"prompt":"Create a Python code to organize a given dictionary and sort its keys alphabetically. myDict = {'a': 1, 'c': 2, 'b': 3}","completion":"sortedDict = dict(sorted(myDict.items())) print(sortedDict)"},{"prompt":"Using the comment as the guide, generate a Python program to replace an element at a given index. arr = [2, 3, 4, 5] index = 2 # Replace the element at index with 0","completion":"arr = [2, 3, 4, 5] index = 2 # Replace the element at index with 0 arr[index] = 0 print(arr)"},{"prompt":"Given a string and a character, write a Python function to count the number of occurrences of the character in the string.","completion":"def count_characters(string, char): return sum([1 for x in string if x == char])"},{"prompt":"Write a Python function to find the maximum from 3 numbers. 10, 7, 4","completion":"def find_max(a, b, c): max = a if b > max: max = b if c > max: max = c return max max_number = find_max(10, 7, 4) print('Maximum number is', max_number)"},{"prompt":"Generate code for a Convolutional Neural Network (CNN) model in Python that can recognize handwriting digits from the MNIST dataset.","completion":"# Imports import torch.nn as nn import torch # CNN Model class CNN(nn.Module): def __init__(self): super(CNN, self).__init__() # Convolutional blocks self.conv1 = nn.Sequential( nn.Conv2d(1, 6, 3, 1), nn.ReLU(), nn.MaxPool2d(2, 2)) self.conv2 = nn.Sequential( nn.Conv2d(6, 16, 3, 1), nn.ReLU(), nn.MaxPool2d(2, 2)) # Fully connected layers self.fc1 = nn.Linear(5 * 5 * 16, 120) self.fc2 = nn.Linear(120, 84) self.fc3 = nn.Linear(84, 10) def forward(self, x): # Forward pass through convolutional blocks out = self.conv1(x) out = self.conv2(out) # Flatten the tensor for use in fully connected layers out = out.view(-1, 5 * 5 * 16) # Forward pass through fully connected layers out = self.fc1(out) out = self.fc2(out) out = self.fc3(out) return out # Create an instance of the model model = CNN() # Move model to GPU if available if torch.cuda.is_available(): model.cuda()"},{"prompt":"Build a logistic regression model in Python to classify emails as spam or not spam.","completion":"import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # Read the data data = pd.read_csv('data.csv') # Create feature matrix X = data[['text', 'subject']] # Create target vector y = data['label'] # Split the data into training and testing X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) # Fit the model logistic = LogisticRegression() logistic.fit(X_train, y_train) # Make predictions y_pred = logistic.predict(X_test)"},{"prompt":"Create a ML model in Python using the ScikitLearn library to predict whether a patient has diabetes based on the patient's medical data. The dataset contains medical data from a group of patients with 9 attributes: age, gender, height, weight, heart rate, blood pressure, cholesterol, glycemic index, and BMI.","completion":"# Load the dataset import pandas as pd data = pd.read_csv('dataset.csv') # Separate the features and target X = data.drop(['diabetes'], axis=1) y = data['diabetes'] # Split the data into training and testing sets from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42) # Fit the model from sklearn.linear_model import LogisticRegression model = LogisticRegression() model.fit(X_train, y_train) # Make predictions y_pred = model.predict(X_test) # Evaluate the model from sklearn.metrics import accuracy_score accuracy = accuracy_score(y_test, y_pred) print(accuracy)"},{"prompt":"Generate a Python program to generate an encrypted hash of a given string using SHA256. Not applicable","completion":"import hashlib original_string = '<insert string here>' # Generate the encrypted hash encrypted_string = hashlib.sha256(original_string.encode()).hexdigest() print('Encrypted hash: ' + encrypted_string)"},{"prompt":"Generate a Python implementation for these pseudocode. Repeat Steps 1 and 2 until no unscanned barcodes remain. 1. Scan a barcode. 2. Print the name of its product.","completion":"def print_product_names(): unscanned_barcodes = [barcodes] #list of unscanned barcodes while len(unscanned_barcodes) > 0: barcode = unscanned_barcodes.pop(0) product_name = scan_barcode(barcode) #function that returns product name print(product_name)"},{"prompt":"Generate a machine learning classifier in Python that estimates the price of a house given its size in square feet.","completion":"from sklearn.linear_model import LinearRegression import numpy as np # Load the data X = np.array([[1000], [2000], [3000]]) y = np.array([20000, 40000, 60000]) # Create the linear regression model model = LinearRegression() # Train the model with the data model.fit(X, y) # Print the model parameters print('Intercept:', model.intercept_) print('Coefficient:', model.coef_)"},{"prompt":"Write a python program to check whether two sequences are equal or not. seq_1: [1, 2, 3, 4] seq_2: [1, 4, 3, 2]","completion":"def is_equal(seq_1, seq_2): return sorted(seq_1) == sorted(seq_2)"},{"prompt":"Develop an algorithm in Python that prints all subset combinations of a given string. String: ABC","completion":"def Powerset(arr): # variable to store the power sets powerset = [[]] # generte the power sets for ele in arr: # give token which stores the length # of the present power set n = len(powerset) # loop to give powerset of all element for i in range(0, n): newset = powerset[i].copy() newset.append(ele) powerset.append(newset) return powerset # Driver Code arr = ['A', 'B', 'C'] print(Powerset(arr))"},{"prompt":"Develop a Python program that takes a twodimensional list and calculates the sum of all elements in the list. list = [[1,2,3], [4,5,6], [7,8,9]]","completion":"def sum_elements_2dlist(list): # Initialize sum sum = 0 # Iterate through rows of the list for row in list: # Iterate through elements of a row for element in row: # Sum the element sum += element # Return the sum return sum result = sum_elements_2dlist(list) print(result)"},{"prompt":"Design a Python program that accepts an integer greater than 1 as input and prints out all prime numbers up to the given number. Number = 10","completion":"def is_prime(num): prime = True if num <= 1: prime = False else: for i in range(2, num): if num % i == 0: prime = False return prime def main(): num = 10 print(\\"All prime numbers up to\\", num, \\"are:\\") for i in range(2, num+1): if is_prime(i): print(i) main() # Outputs: 2 3 5 7"},{"prompt":"Develop a valid Python script which computes the root of a given quadratic equation a = 1, b = 7, c =12","completion":"import math def quadratic_equation_roots(a, b, c): d = b**2 - 4*a*c if d > 0: x1 = (-b + math.sqrt(d)) / (2*a) x2 = (-b - math.sqrt(d)) / (2*a) return x1, x2 else: return \\"This equation has no real roots!\\""},{"prompt":"Prepare a python program that displays a decoded message given in a list. code = [1,2,3,2,2,3,1,3]","completion":"code = [1,2,3,2,2,3,1,3] message = \\"\\" for d in code: if d == 1: message += \\"A\\" elif d == 2: message += \\"B\\" elif d == 3: message += \\"C\\" print(message)"},{"prompt":"Write a code for implementing a stack in Python that can handle max of 10 elements.","completion":"\\"\\"\\" Write a code for implementing a stack in python that can handle max of 10 elements \\"\\"\\" class MyStack: def __init__(self, capacity=10): self.capacity = capacity self.top = 0 self.stack = [None]*self.capacity def push(self, item): # check the stack is full or not if self.top == self.capacity: raise Exception('Stack is full!') else: self.stack[self.top] = item self.top += 1 def pop(self): # check the stack is empty or not if self.top == 0: raise Exception('Stack is empty!') else: item = self.stack[self.top-1] self.stack[self.top-1] = None self.top -= 1 return item"},{"prompt":"mplement a Python program to find the longest common subsequence of characters. s1 = 'acefhjkb' s2 = 'bcdefhi'","completion":"def longest_common_subsequence(s1, s2): n1 = len(s1) n2 = len(s2) dp_table = [[0]*(n2+1) for _ in range(n1+1)] for i in range(n1): for j in range(n2): if s1[i] == s2[j]: dp_table[i+1][j+1] = dp_table[i][j] + 1 else: dp_table[i+1][j+1] = max(dp_table[i][j+1], dp_table[i+1][j]) lcs_length = dp_table[-1][-1] lcs_string = \\"\\" i, j = n1, n2 while i > 0 and j > 0: if dp_table[i][j] == dp_table[i-1][j]: i -= 1 elif dp_table[i][j] == dp_table[i][j-1]: j -= 1 else: lcs_string = s1[i-1] + lcs_string i -= 1 j -= 1 return lcs_string, lcs_length"},{"prompt":"Write a Python program to calculate the sum of the squares of all numbers from 0 to 10.","completion":"sum = 0 for i in range(11): sum += i**2 print(sum)"},{"prompt":"Write a REST API in Python to handle CRUD (Create, Read, Update, Delete) operations on the specified endpoints. Endpoints (User, Course, Grade): User: /users/{userId} Course: /courses/{courseId} Grades: /courses/{courseId}/grade","completion":"from flask import Flask, request from flask_restful import Resource, Api app = Flask(__name__) api = Api(app) class Users(Resource): def get(self, userId): # return user object with userId pass def post(self): # create new user pass def put(self, userId): # update user object with userId pass def delete(self, userId): # delete user object with userId pass class Courses(Resource): def get(self,courseId): # return course object with courseId pass def post(self): # create new course pass def put(self,courseId): # update course object with courseId pass def delete(self,courseId): # delete course object with courseId pass class Grades(Resource): def get(self,courseId): # return grade object with courseId pass def post(self): # create new grade pass def put(self,courseId): # update grade object with courseId pass def delete(self,courseId): # delete grade object with courseId pass api.add_resource(Users, '/users/<userId>') api.add_resource(Courses, '/courses/<courseId>') api.add_resource(Grades, '/courses/<courseId>/grades') if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Develop a program in Python to classify the elements in an array as even or odd. An array with 10 elements [1,2,3,4,5,6,7,8,9,10]","completion":"evenArray = [] oddArray = [] for i in array: if i % 2 == 0: evenArray.append(i) else: oddArray.append(i)"},{"prompt":"Create a Python program to classify a given test data with a given decision tree. Input data shape: (4, n_features) Decision Tree (as Dictionary): {'root': {'node_type': 'test', 'feature_index': 2, 'left_child': {'node_type': 'leaf', 'value': 0}, 'right_child': {'node_type': 'test', 'feature_index': 0, 'left_child': {'node_type': 'leaf', 'value': 0}, 'right_child': {'node_type': 'leaf', 'value': 1}}}}","completion":"def predict(data, tree): if tree['node_type'] == 'leaf': return tree['value'] feature_index = tree['feature_index'] if data[feature_index] < tree['value']: return predict(data, tree['left_child']) else: return predict(data, tree['right_child'])"},{"prompt":"Write a Python program to find the second highest number in the given list. [8,9,1,5,7]","completion":"def find_second_highest_num(nums): first_max = nums[0] second_max = float('-inf') for num in nums: if num > first_max: second_max = first_max first_max = num if num < first_max and num > second_max: second_max = num return second_max nums = [8,9,1,5,7] print(find_second_highest_num(nums))"},{"prompt":"Write a Python program to randomly select an item from a list. list_of_names = [John, Anna, Bill, Kim, Claire]","completion":"import random list_of_names = [\\"John\\", \\"Anna\\", \\"Bill\\", \\"Kim\\", \\"Claire\\"] random_name = random.choice(list_of_names) print(f'Randomly selected name from the list: {random_name}')"},{"prompt":"Generate an error message when a provided Python code fails to execute.","completion":"try: exec(<python_code>) except Exception as e: print(\\"Error: \\", e)"},{"prompt":"Create a Python script to retrieve stock market data from an API like Yahoo Finance and do simple analytics. The analytics should include the maximum stock price of a particular day and whether it closed higher or lower than the opening price. Symbol of the stock: TSL","completion":"import yfinance as yf # Get stock data tsla = yf.Ticker(\\"TSLA\\") # Get maximum stock price max_price = max(tsla.history(period=\\"1d\\")[\\"Close\\"]) # Get opening stock price open_price = tsla.history(period=\\"1d\\")[\\"Open\\"][0] # Print whether it closed higher or lower if max_price > open_price: print(\\"TSLA closed higher than its opening price.\\") else: print(\\"TSLA closed lower than its opening price.\\")"},{"prompt":"Code a web scraper with Python, using BeautifulSoup and Requests, that extracts product prices from an online store. url: https://example.com/store","completion":"import requests import bs4 # Make the request url = 'https://example.com/store' response = requests.get(url) # Create the soup object soup = bs4.BeautifulSoup(response.text, 'html.parser') # Extract the prices prices = [] for item in soup.find_all('div', {'class': 'product'}): price = item.find('div', {'class': 'price'}).text prices.append(price) print(prices)"},{"prompt":"Design a sorting algorithm for strings in Python.","completion":"def string_sort(strings): # Bubble sort algorithm for i in range(len(strings)-1): for j in range(i+1, len(strings)): if strings[i] > strings[j]: temp = strings[i] strings[i] = strings[j] strings[j] = temp return strings # example usage strings = [\\"cat\\", \\"dog\\", \\"elephant\\", \\"apple\\"] print(string_sort(strings))"},{"prompt":"Write a Python script to print a log of the most visited websites over the last 30 days.","completion":"from datetime import timedelta, date import requests def get_pageview_data(date, page): api_key = '<YOUR_API_KEY>' base_url = 'https://wikimedia.org/api/rest_v1/metrics/pageviews/per-article/en.wikipedia.org/all-access/user/{page}/daily/{date}/{date}' response = requests.get(base_url.format(page=page, date=date), headers={ 'User-Agent': 'My Personal Analytics App', 'Accept': 'application/json', 'X-WMF-User-Agent': api_key }) response.raise_for_status() return response.json() # Get the date from 30 days ago date_before_30_days = date.today() - timedelta(days=30) most_visited_sites = {} for d in range(30): date = date_before_30_days + timedelta(days=d) date_string = date.strftime('%Y%m%d') # Get page view data for the current date pageview_data = get_pageview_data(date_string, 'Main_Page') # Store page view data in a dictionary most_visited_sites[date_string] = pageview_data[\\"items\\"][0][\\"views\\"] # Print log print('DatettViews') for date, views in most_visited_sites.items(): print('{}tt{}'.format(date, views))"},{"prompt":"Create a search engine in Python to search a collection of documents for a given keyword. Not applicable","completion":"import string def search(docs, key): results = [] for doc in docs: words = doc.lower().translate(str.maketrans('', '', string.punctuation)).split() if key in words: results.append(doc) return results"},{"prompt":"Write a Python program to convert an array of objects into an array of JSON string.","completion":"import json def array_obj_to_json(arr): json_arr = [] for obj in arr: json_arr.append(json.dumps(obj)) return json_arr"},{"prompt":"Use Python to create a machine learning model to predict the price of a stock based on its historical data","completion":"import pandas as pd import numpy as np from sklearn.model_selection import train_test_split from sklearn.linear_model import LinearRegression # Read the data df = pd.read_csv(\\"Historical_Data.csv\\") # Select features X = df.iloc[:, 1:-1].values # Target variable y = df.iloc[:,-1].values # Split into train & test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0) # Train the model regressor = LinearRegression() regressor.fit(X_train, y_train) # Make predictions y_pred = regressor.predict(X_test)"},{"prompt":"This code is a Python library for crafting SAP's network protocols packets. To use it, import the necessary modules and classes from the library and call the appropriate functions and methods. The library includes various custom fields and packet classes for crafting SAP packets. The library is distributed under the terms of the GNU General Public License.","completion":"# =========== # pysap - Python library for crafting SAP's network protocols packets # # SECUREAUTH LABS. Copyright (C) 2021 SecureAuth Corporation. All rights reserved. # # The library was designed and developed by Martin Gallo from # the SecureAuth's Innovation Labs team. # # This program is free software; you can redistribute it and/or # modify it under the terms of the GNU General Public License # as published by the Free Software Foundation; either version 2 # of the License, or (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # ============== # Standard imports import struct from datetime import datetime # External imports from scapy.config import conf from scapy.packet import Packet from scapy.asn1fields import (ASN1F_CHOICE, ASN1F_field, ASN1_Error, ASN1F_badsequence, BER_Decoding_Error) from scapy.volatile import (RandNum, RandTermString, RandBin) from scapy.fields import (MultiEnumField, StrLenField, Field, StrFixedLenField, StrField, PacketListField, LongField) def saptimestamp_to_datetime(timestamp): \\"\\"\\"Converts a timestamp in \\"SAP format\\" to a datetime object. Time zone looks to be fixed at GMT+1.\\"\\"\\" return datetime.utcfromtimestamp((int(timestamp) & 0xFFFFFFFF) + 1000000000) class PacketNoPadded(Packet): \\"\\"\\"Regular scapy packet with no padding. \\"\\"\\" def extract_padding(self, s): return '', s class RandByteReduced(RandNum): \\"\\"\\"RandByte that only returns random values between 0 and x2a. Used while performing some fuzz to reduce the test cases space. \\"\\"\\" def __init__(self): RandNum.__init__(self, 0, 0x2a) class ByteMultiEnumKeysField(MultiEnumField): \\"\\"\\"MultiEnumField that picks a reduced number of values. Used for fuzzing Byte fields with reduced number of values. \\"\\"\\" def randval(self): return RandByteReduced() class MutablePacketField(StrLenField): \\"\\"\\"Packet field that mutates the class according to a list of evaluators. The evaluators are run against the packet and given to a class getter. If the class can't be found, the field is treated as a StrLenField. \\"\\"\\" __slots__ = [\\"length_from\\", \\"evaluators\\", \\"_get_class\\"] def __init__(self, name, default, length_from, get_class, evaluators=None): \\"\\"\\" :param length_from: function to obtain the field length :type length_from: C{callable} :param get_class: function to obtain the class :type get_class: C{callable} :param evaluators: evaluators :type evaluators: \`\`list\`\` of C{callable} \\"\\"\\" StrLenField.__init__(self, name, default, length_from=length_from) self.evaluators = evaluators or [] self._get_class = get_class def get_class(self, pkt): # Run the evaluators on the actual packet values = [evaluator(pkt) for evaluator in self.evaluators] # Return the class using the function provided return self._get_class(pkt, *values) def i2m(self, pkt, i): cls = self.get_class(pkt) if cls is not None: return str(i) else: return StrLenField.i2m(self, pkt, i) def m2i(self, pkt, m): cls = self.get_class(pkt) if cls is not None: return cls(m) else: return StrLenField.m2i(self, pkt, m) class StrNullFixedLenField(StrFixedLenField): \\"\\"\\"Packet field that has a fixed length and is conditionally null-terminated. \\"\\"\\" __slots__ = [\\"length_from\\", \\"max_length\\", \\"null_terminated\\"] def __init__(self, name, default, length=None, length_from=None, max_length=None, null_terminated=None): if null_terminated: self.null_terminated = null_terminated else: self.null_terminated = lambda pkt: True self.max_length = max_length or 200 StrFixedLenField.__init__(self, name, default, length=length, length_from=length_from) def i2repr(self, pkt, v): if self.null_terminated(pkt): if type(v) is str: v = v.rstrip(\\"0\\") return repr(v) return StrFixedLenField.i2repr(self, pkt, v) def getfield(self, pkt, s): if self.null_terminated(pkt): l = self.length_from(pkt) - 1 return s[l + 1:], self.m2i(pkt, s[:l]) return StrFixedLenField.getfield(self, pkt, s) def addfield(self, pkt, s, val): if self.null_terminated(pkt): l = self.length_from(pkt) - 1 return s + struct.pack(\\"%is\\" % l, self.i2m(pkt, val)) + \\"x00\\" return StrFixedLenField.addfield(self, pkt, s, val) def randval(self): if self.null_terminated: try: l = self.length_from(None) - 1 except: l = RandTermString(RandNum(0, self.max_length), \\"x00\\") return RandBin(l) return StrFixedLenField.randval(self) class StrFixedLenPaddedField(StrFixedLenField): \\"\\"\\"Packet field that has a fixed length and is padded with a given character. \\"\\"\\" __slots__ = [\\"length_from\\", \\"padd\\"] def __init__(self, name, default, length=None, length_from=None, padd=\\" \\"): StrFixedLenField.__init__(self, name, default, length, length_from) self.padd = padd def getfield(self, pkt, s): l = self.length_from(pkt) return s[l:], self.m2i(pkt, s[:l]) def addfield(self, pkt, s, val): l = self.length_from(pkt) val += self.padd * l return StrFixedLenField.addfield(self, pkt, s, val) class StrNullFixedLenPaddedField(StrFixedLenField): \\"\\"\\"Packet field that has a fixed length and is padded with a given character and null terminated. \\"\\"\\" __slots__ = [\\"length_from\\", \\"padd\\"] def __init__(self, name, default, length=None, length_from=None, padd=\\" \\"): StrFixedLenField.__init__(self, name, default, length, length_from) self.padd = padd def getfield(self, pkt, s): l = self.length_from(pkt) lz = s.find(\\"x00\\") if lz < l: return s[l + 1:], self.m2i(pkt, s[:lz]) return s[l + 1:], self.m2i(pkt, s[:l]) def addfield(self, pkt, s, val): l = self.length_from(pkt) val += self.padd * l return StrFixedLenField.addfield(self, pkt, s, val) class IntToStrField(Field): \\"\\"\\"Custom field from int to str values, with a variable length \\"\\"\\" __slots__ = [\\"length\\", \\"format\\"] def __init__(self, name, default, length=11): \\"\\"\\"Initialize the field with a variable length. The 'machine' representation is a string field and the 'internal' repr. is a numeric value. \\"\\"\\" Field.__init__(self, name, default, \\"%ds\\" % length) # Stores the length of the field self.length = length # Stores the conversion format between representations self.format = \\"%\\" + \\"%d\\" % length + \\"d\\" def m2i(self, pkt, x): return str(x) def i2m(self, pkt, x): return self.format % int(x) def i2count(self, pkt, x): return x class StrEncodedPaddedField(StrField): __slots__ = [\\"remain\\", \\"encoding\\", \\"padd\\"] def __init__(self, name, default, encoding=\\"utf-16\\", padd=\\"x0c\\", fmt=\\"H\\", remain=0): StrField.__init__(self, name, default, fmt, remain) self.encoding = encoding self.padd = padd def h2i(self, pkt, x): if x: x = x.encode(self.encoding) return x def i2h(self, pkt, x): if x: x = x.decode(self.encoding) return x def addfield(self, pkt, s, val): return s + self.i2m(pkt, val) + self.padd def getfield(self, pkt, s): l = s.find(self.padd) if l < 0: return \\"\\", s return s[l + 1:], self.m2i(pkt, s[:l]) class PacketListStopField(PacketListField): \\"\\"\\"Custom field that contains a list of packets until a 'stop' condition is met. \\"\\"\\" __slots__ = [\\"count_from\\", \\"length_from\\", \\"stop\\"] def __init__(self, name, default, cls, count_from=None, length_from=None, stop=None): PacketListField.__init__(self, name, default, cls, count_from=count_from, length_from=length_from) self.stop = stop def getfield(self, pkt, s): c = l = None if self.length_from is not None: l = self.length_from(pkt) elif self.count_from is not None: c = self.count_from(pkt) lst = [] ret = \\"\\" remain = s if l is not None: remain, ret = s[:l], s[l:] while remain: if c is not None: if c <= 0: break c -= 1 try: p = self.m2i(pkt, remain) except Exception: if conf.debug_dissector: raise p = conf.raw_layer(load=remain) remain = \\"\\" else: if conf.padding_layer in p: pad = p[conf.padding_layer] remain = pad.load del (pad.underlayer.payload) else: remain = \\"\\" lst.append(p) # Evaluate the stop condition if self.stop and self.stop(p): break return remain + ret, lst class AdjustableFieldLenField(Field): __slots__ = [\\"length_of\\", \\"count_of\\", \\"adjust\\"] def __init__(self, name, default, length_of=None): Field.__init__(self, name, default, \\">H\\") self.length_of = length_of def i2m(self, pkt, x): if x is None: fld, fval = pkt.getfield_and_val(self.length_of) x = fld.i2len(pkt, fval) return x def addfield(self, pkt, s, val): i2m = self.i2m(pkt, val) fmt = \\"B\\" padd = \\"\\" if i2m > 0xf0: fmt = \\">H\\" padd = struct.pack(\\"B\\", 0xff) return s + padd + struct.pack(fmt, i2m) def getfield(self, pkt, s): if struct.unpack(\\"B\\", s[:1])[0] == 0xff: return s[3:], self.m2i(pkt, struct.unpack(\\">H\\", s[1:3])[0]) else: return s[1:], self.m2i(pkt, struct.unpack(\\"B\\", s[:1])[0]) class ASN1F_CHOICE_SAFE(ASN1F_CHOICE): def __init__(self, name, default, *args, **kwargs): if \\"implicit_tag\\" in kwargs: err_msg = \\"ASN1F_CHOICE has been called with an implicit_tag\\" raise ASN1_Error(err_msg) self.implicit_tag = None for kwarg in [\\"context\\", \\"explicit_tag\\"]: if kwarg in kwargs: setattr(self, kwarg, kwargs[kwarg]) else: setattr(self, kwarg, None) ASN1F_field.__init__(self, name, None, context=self.context, explicit_tag=self.explicit_tag) self.default = default self.current_choice = None self.choices = args def m2i(self, pkt, s): \\"\\"\\"Try to safely extract an ASN1_Packet from the choices list. :raise ASN1_Error: if unable to parse the packet using any of the given choices \\"\\"\\" if len(s) == 0: raise ASN1_Error(\\"ASN1F_CHOICE: got empty string\\") for choice in self.choices: try: return self.extract_packet(choice, s) except (ASN1_Error, ASN1F_badsequence, BER_Decoding_Error): pass raise ASN1_Error class TimestampField(LongField): \\"\\"\\"Timestamp field\\"\\"\\" def i2h(self, pkt, x): dt = datetime.utcfromtimestamp(x) return dt.strftime(\\"%Y-%m-%d %H:%M:%S UTC\\") class LESignedByteField(Field): def __init__(self, name, default): Field.__init__(self, name, default, \\"<b\\") class LESignedShortField(Field): def __init__(self, name, default): Field.__init__(self, name, default, \\"<h\\") class LESignedLongField(Field): def __init__(self, name, default): Field.__init__(self, name, default, \\"<q\\")"},{"prompt":"Construct a Python script to find the sum of all odd numbers between 1 to n. n=10","completion":"def sum_odd_numbers(n): sum = 0 for i in range(1,n+1): if i % 2 != 0: sum += i return sum odd_sum = sum_odd_numbers(10) print(odd_sum)"},{"prompt":"Develop a code to predict the sentiment of a sentence using a pretrained sentiment analysis model in Python.","completion":"from textblob import TextBlob from textblob.sentiments import NaiveBayesAnalyzer # Create a TextBlob object using the NaiveBayesAnalyzer sentiment_analyzer = TextBlob(analyzer=NaiveBayesAnalyzer()) # Method to predict the sentiment of a given sentence def predict_sentiment(sentence): # Get the polarity score of the sentence polar_score = sentiment_analyzer.sentiment.polarity # class the sentiment of the given sentence if polar_score > 0: sentiment = \\"positive\\" elif polar_score == 0: sentiment = \\"neutral\\" else: sentiment = \\"negative\\" # Print out the sentiment of the given sentence print(\\"The sentiment of the given sentence is:\\", sentiment) sentence = \\"This movie is amazing!\\" predict_sentiment(sentence)"},{"prompt":"Write a Python program to test if the inputs are equal and return a boolean value. 28, 48","completion":"def equals(a, b): return a == b equal = equals(28, 48) print(equal)"},{"prompt":"Create a function in Python to find the minimum value in a given array. An array of integers arr[]","completion":"def findMin(arr): # Initialize minimum element min = arr[0] # Traverse array elements starting from # 1st to the last for i in range(1, len(arr)): if arr[i] < min: min = arr[i] return min arr = [10, 11, 8, 9, 2] print(findMin(arr))"},{"prompt":"mplement a Python function that will take a dictionary as the argument and return a new dictionary with the key and its value reversed. {a:1, b:2, c:3}","completion":"def reverse_dict(d): new_dict = {} for key, value in d.items(): new_dict[value] = key return new_dict d = {'a':1, 'b':2, 'c':3} print(reverse_dict(d)) # {1:'a', 2:'b', 3:'c'}"},{"prompt":"Program a Python class for handling employee data. class Employee","completion":"class Employee: def __init__(self, name, age, salary, company): self.name = name self.age = age self.salary = salary self.company = company def get_details(self): return \\"{}, {}, {}, {}\\".format(self.name, self.age, self.salary, self.company)"},{"prompt":"Design a Python function to display a message if the input is a palindrome.","completion":"def is_palindrome(string): # Reversing the string rev = string[::-1] # Checking if both string are equal or not if (string == rev): print(\\"The given string is a Palindrome\\") else: print(\\"The given string is not a Palindrome\\")"},{"prompt":"Write a Python program to make a web crawler that fetches all the links on a webpage.","completion":"import requests from bs4 import BeautifulSoup def get_all_links(url): # make a GET request to fetch the raw HTML content html_content = requests.get(url).text # parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # fetch all anchors links = soup.find_all(\\"a\\") for link in links: print(link.get(\\"href\\")) get_all_links(\\"https://www.example.com\\")"},{"prompt":"Create a function in Python that performs sentiment analysis on a list of documents. For each document, the function should output positive, negative, or neutral. Document 1: This food was really great! Document 2: This movie was really bad.","completion":"def sentiment_analysis(documents): sentiments = [] for document in documents: sentiment = None score = 0 words = document.split(' ') for word in words: if word == 'great': score += 1 elif word == 'bad': score -= 1 if score > 0: sentiment = 'positive' elif score == 0: sentiment = 'neutral' else: sentiment = 'negative' sentiments.append(sentiment) return sentiments # Example docs = [\\"This food was really great!\\", \\"This movie was really bad.\\"] sentiments = sentiment_analysis(docs) print(sentiments) # ['positive', 'negative']"},{"prompt":"Create a Python function to print out all the words in a given string with the letter e. str = Hello World","completion":"def print_words_with_e(str): words = str.split() for word in words: if 'e' in word: print(word) print_words_with_e(str)"},{"prompt":"Generate a Python program for converting temperatures from Celsius to Fahrenheit. 15 degree Celsiu","completion":"# Take input from user c = float(input('Enter temperature in Celsius: ')) # Compute temperature in Fahrenheit f = (c * 1.8) + 32 # Print the result print('{} degree Celsius is equal to {} degree Fahrenheit.'.format(c, f))"},{"prompt":"Create a program in Python to classify sentences as positive or negative sentiment. The movie was so amazing!","completion":"import nltk from nltk.tokenize import sent_tokenize from nltk.sentiment.vader import SentimentIntensityAnalyzer sentences = sent_tokenize(\\"The movie was so amazing!\\") # Setup VADER sentiment intensity analyzer analyzer = SentimentIntensityAnalyzer() # Use VADER to get sentiment scores for each sentence for sentence in sentences: scores = analyzer.polarity_scores(sentence) score = scores['compound'] if score >= 0.1: sentiment = 'positive' elif score <= -0.1: sentiment = 'negative' else: sentiment = 'neutral' print(sentence + ': ' + sentiment) # Output: The movie was so amazing!: positive"},{"prompt":"Write a Python program to display an interactive bar chart of salary data for the last 10 years. salaries = [ {'year':2010, 'salary': 45000}, {'year':2011, 'salary': 50000}, {'year':2012, 'salary': 55000}, {'year':2013, 'salary': 60000}, {'year':2014, 'salary': 65000}, {'year':2015, 'salary': 70000}, {'year':2016, 'salary': 75000}, {'year':2017, 'salary': 80000}, {'year':2018, 'salary': 85000}, {'year':2019, 'salary': 95000}, ]","completion":"import plotly.express as px import pandas as pd df = pd.DataFrame(salaries) fig = px.bar(df, x='year', y='salary', hover_data=['salary'], color='salary', labels={'salary':'Yearly Salary'}, height=400) fig.show()"},{"prompt":"Design an AI agent in Python to play a game of TicTacToe.","completion":"import random import numpy as np BOARD_SIZE = 3 PLAYER = 1 # player is X AI = 2 # AI is O def create_board(): board = np.zeros((BOARD_SIZE, BOARD_SIZE)) # board is 3x3 array of 0's return board def valid_space(board, position): if position[0] < 0 or position[0] >= BOARD_SIZE: return False elif position[1] < 0 or position[1] >= BOARD_SIZE: return False elif board[position[0], position[1]] != 0: return False else: return True def make_move(board, pos, symbol): board[pos[0], pos[1]] = symbol def ai_move(board, symbol): pos = random.choice(list(zip(*np.where(board == 0)))) # pick random empty space make_move(board, pos, symbol) def player_move(board, symbol): pos = input('Enter your move (row column): ').split() pos = [int(i) for i in pos] if not valid_space(board, pos): print('Invalid move!') return False else: make_move(board, pos, symbol) return True def main(): board = create_board() winner = 0 turn = PLAYER complete = False while not complete and not winner: if turn == PLAYER: player_move(board, PLAYER) turn = AI else: ai_move(board, AI) turn = PLAYER winner = check_winner(board) complete = check_complete(board) print_board(board) if winner == PLAYER: print('Player wins') elif winner == AI: print('AI wins') else: print('Draw') def check_complete(board): if 0 in board: return False else: return True def check_winner(board): for i in range(BOARD_SIZE): if np.all(board[i] == PLAYER): return PLAYER elif np.all(board[i] == AI): return AI for j in range(BOARD_SIZE): if np.all(board[:,j] == PLAYER): return PLAYER elif np.all(board[:,j] == AI): return AI diag1 = np.diag(board) diag2 = np.diag(np.fliplr(board)) if np.all(diag1 == PLAYER): return PLAYER elif np.all(diag1 == AI): return AI elif np.all(diag2 == PLAYER): return PLAYER elif np.all(diag2 == AI): return AI else: return 0 def print_board(board): for i in range(BOARD_SIZE): for j in range(BOARD_SIZE): if board[i,j] == PLAYER: print('X ', end=\\"\\") elif board[i,j] == AI: print('O ', end=\\"\\") else: print(' ', end=\\"\\") print() if __name__ == \\"__main__\\": main()"},{"prompt":"Generate a Python program to compress a string into a series of numbers and viceversa.","completion":"def compress(string): if string == '' or not string: return string compressed_str = [] i = 0 j = 0 while i < len(string): while j < len(string) and string[j] == string[i]: j = j + 1 compressed_str.append([string[i], str(j-i)]) i = j return compressed_str def decompress(compressed_str): decompressed_str = \\"\\" for i in compressed_str: decompressed_str+=i[0]*int(i[1]) return decompressed_str"},{"prompt":"Design a Python algorithm for the sorting of two linked lists","completion":"def merge_sorted_lists(list1, list2): # Create a new list for the result result = [] # Make iterators for both lists iter1 = iter(list1) iter2 = iter(list2) # Initialize the elements to compare elem1 = next(iter1, None) elem2 = next(iter2, None) # Compare the elements of both lists while elem1 is not None and elem2 is not None: # Pick the smaller element if elem1 <= elem2: result.append(elem1) elem1 = next(iter1, None) else: result.append(elem2) elem2 = next(iter2, None) # Append the remaining elements of list1 if elem1 is not None: result.append(elem1) for elem1 in iter1: result.append(elem1) # Append the remaining elements of the list2 if elem2 is not None: result.append(elem2) for elem2 in iter2: result.append(elem2) return result"},{"prompt":"mplement a Python program to generate randon uniform numbers. The program should have two input parameters a lower bound and an upper bound. Lower bound: 10, Upper bound: 20","completion":"import random # generates a random number between lower and upper def generateRandomNumber(lower, upper): r = random.uniform(lower, upper) return r # driver program if __name__ == \\"__main__\\": lower = 10 upper = 20 print(generateRandomNumber(lower, upper))"},{"prompt":"Create a Python script to find the area of a circle when given its radius. radius = 5","completion":"import math def area_circle(radius): return math.pi * (radius ** 2) print(area_circle(radius))"},{"prompt":"mplement a function in Python to generate sequence of numbers based on a given start and end value.","completion":"def sequence_generator(start, end): return list(range(start, end + 1))"},{"prompt":"Generate an algorithm to calculate the sum of two numbers entered by the user using Python. int n1 = 5 int n2 = 7","completion":"def sum(n1, n2): return n1 + n2 n1 = 5 n2 = 7 print(\\"Sum of {0} and {1} is {2}\\".format(n1, n2, sum(n1, n2)))"},{"prompt":"Write a code to perform basic arithmetic operations between two text inputs in Python. First input: 3 Second input: 6","completion":"# Get the inputs a = input(\\"Enter the first number: \\") b = input(\\"Enter the second number: \\") # Convert to integers a = int(a) b = int(b) # Perform the arithmetic operations add = a + b sub = a - b mul = a * b div = a / b # Print the results print(\\"The addition of two numbers is\\", add) print(\\"The subtraction of two numbers is\\", sub) print(\\"The multiplication of two numbers is\\", mul) print(\\"The division of two numbers is\\", div)"},{"prompt":"Python, write a program to find a single missing number in a sorted array of unique integers. arr = [1,2,3,4,6,7,8]","completion":"def findMissingNumber(arr): n = len(arr) total_sum = (n+1)*(n+2)//2 arr_sum = sum(arr) missing_number = total_sum - arr_sum return missing_number arr = [1,2,3,4,6,7,8] print(findMissingNumber(arr))"},{"prompt":"Create a Python program that takes a list and replaces all negative numbers in the list with zeros. [1, 2, 3, 4, 5]","completion":"def replace_negative_with_zero(numbers): new_list = [] for num in numbers: if num < 0: new_list.append(0) else: new_list.append(num) return new_list"},{"prompt":"Create an application using Python and Tkinter that displays a grid of letter tiles, and shuffles the tiles with each mouse click. Not applicable","completion":"import random from tkinter import Tk, Button window = Tk() window.title(\\"Tile Shuffling\\") # Set size of window window.geometry(\\"500x500\\") # Create a list of letters letters = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ') # Create buttons for i in range(25): btn = Button(window, text=letters[i], width=\\"4\\", height=\\"2\\") btn.grid(row=i//5, column=i%5) # Function to shuffle the letters def shuffle(): random.shuffle(letters) # Update button text for i in range(25): btn = window.grid_slaves(row=i//5, column=i%5) btn[0].config(text=letters[i]) btn_shuffle = Button(window, text=\\"Shuffle\\", command=shuffle) btn_shuffle.grid(row=5, column=0, columnspan=5) window.mainloop()"},{"prompt":"Generate a Python program for a text summarization model using the following pipeline.","completion":"import nltk from nltk.tokenize import sent_tokenize from nltk.tokenize import word_tokenize from nltk.stem.porter import PorterStemmer from nltk.corpus import stopwords # Define the pipeline def summarize(text): sentences = sent_tokenize(text) word_sentences = [word_tokenize(sentence) for sentence in sentences] stemmer = PorterStemmer() stop_words = stopwords.words('english') word_sentences = [[stemmer.stem(w.lower()) for w in word if w not in stop_words] for word in word_sentences] # Build word frequency table word_freq_table = dict() for words in word_sentences: for word in words: if word in word_freq_table: word_freq_table[word] += 1 else: word_freq_table[word] = 1 # Calculate sentence scores sentence_scores = dict() for i, sentence in enumerate(word_sentences): total = 0 for word in sentence: if word in word_freq_table: total += word_freq_table[word] sentence_scores[i] = total # Find top n sentences n = 2 # Change this to change number of summary sentences top_n_sentences_index = sorted(sentence_scores, key=sentence_scores.get, reverse=True)[:n] top_n_sentences = [sentences[i] for i in top_n_sentences_index] # Return summary return ' '.join(top_n_sentences) # Test the pipeline text = \\"These are some words. These are some more words. These are even more words. Here is a summary sentence.\\" print(summarize(text)) # Output: These are some words. Here is a summary sentence."},{"prompt":"Write a Python function to return the GCD (Greatest Common Denominator) of two integers. num_1 = 12 num_2 = 24","completion":"def gcd(num_1, num_2): if num_2 == 0: return num_1 return gcd(num_2, num_1 % num_2)"},{"prompt":"Create a Python script to convert JSON data to CSV format. { ânameâ: âJohnâ, âageâ: 30, âcityâ: âNew Yorkâ }","completion":"import csv import json data = { ânameâ: âJohnâ, âageâ: 30, âcityâ: âNew Yorkâ } with open('data.csv', 'w') as csvfile: writer = csv.writer(csvfile) writer.writerow([\\"Name\\", \\"Age\\", \\"City\\"]) writer.writerow([data[\\"name\\"], data[\\"age\\"], data[\\"city\\"]])"},{"prompt":"Can you develop a python code to print all combination of size r of an array? Array: [A,B,C] r = 2","completion":"def combinations(arr, r): # Get the length of array n = len(arr) # Create an array to store indexes of elements # taken for combination data = [0]*r combinationUtil(arr, data, 0, n-1, 0, r) # arr[] -->> Input Array # data[] -->> Temporary array to store current combination # start & end -->> Staring and Ending indexes in arr[] # index -->> Current index in data[] # r -->> Size of a combination to be printed def combinationUtil(arr, data, start, end, index, r): # Current combination is ready to be printed, print it if (index == r): for j in range(r): print(data[j], end = \\" \\") print() return # Replace index with all possible elements. The condition # \\"end-i+1 >= r-index\\" makes sure that including one element # at index will make a combination with remaining elements # at remaining positions i = start while(i <= end and end - i + 1 >= r - index): data[index] = arr[i] combinationUtil(arr, data, i + 1, end, index + 1, r) i += 1 combinations([\\"A\\",\\"B\\",\\"C\\"], 2) # A B # A C # B C"},{"prompt":"Construct a python dictionary from the following data. fruit, apple animal, cat city, Londo","completion":"mydict = { 'fruit': 'apple', 'animal': 'cat', 'city': 'London' }"},{"prompt":"Generate a random number between a specified range using Python.","completion":"import random def random_num(start, end): num = random.randint(start, end) return num"},{"prompt":"Create a python program that takes a string and prints the reverse of it. Hello","completion":"\\"\\"\\" Create a python program that takes a string and prints the reverse of it \\"\\"\\" # Get the input string my_string = input('Enter a string: ') # Reverse the string rev_string = my_string[::-1] # Print the reversed string print(rev_string)"},{"prompt":"Create a web scraper in Python to scrape webpages for a given list of keywords. keywords: [Python, Scraping, Web Scraping]","completion":"import requests from bs4 import BeautifulSoup def scrape_web_page(url, keywords): keyword_found = False # Make a GET request to fetch the raw HTML content html_content = requests.get(url).text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Find all occurrences of the given keywords in the HTML document for keyword in keywords: if keyword in soup.text: keyword_found = True # Return a boolean to indicate if a keyword was found return keyword_found"},{"prompt":"Write a Python program that takes two numbers and swaps them without using an additional variable. x = 5, y = 4","completion":"def swap_without_variable(x, y): x = x + y y = x - y x = x - y return x, y"},{"prompt":"Create a machine learning pipeline in Python using scikitlearn for classification problem that takes a text input and use support vector machine as a model. Not applicable","completion":"from sklearn.pipeline import Pipeline from sklearn.feature_extraction.text import CountVectorizer from sklearn.svm import SVC pipeline = Pipeline([ ('vectorizer', CountVectorizer()), ('classifier', SVC()) ]) # Fit the model pipeline.fit(X_train, y_train) # Predicting on test data y_pred = pipeline.predict(X_test)"},{"prompt":"Write a python program to find the type and value of a given variable. x = 10","completion":"def find_type_and_value(x): t = type(x) v = x return t, v"},{"prompt":"Generate a program in Python that prints all prime numbers from 1 to 100.","completion":"for num in range(2, 101): for i in range(2, num): if (num % i == 0): break else: print(num)"},{"prompt":"Create a Python program that takes a string of text and returns a list of all words in it. This is a sentence.","completion":"def get_words(sentence): words = sentence.split(' ') return words words = get_words('This is a sentence.') print(words)"},{"prompt":"Create a class to store the details of a person in Python.","completion":"class Person: def __init__(self, name, age, address): self.name = name self.age = age self.address = address"},{"prompt":"Create a cache storage system with TTL in Python.","completion":"class CacheStorage: def __init__(self, ttl): self.ttl = ttl self.cache = {} def store(self, key, value): self.cache[key] = {\\"value\\": value, \\"expire_at\\": time.time() + self.ttl} def fetch(self, key): # Check if key is expired if self.cache[key][\\"expire_at\\"] > time.time(): return self.cache[key][\\"value\\"] else: # If expired, remove the key and return None self.cache.pop(key) return None"},{"prompt":"Create a function in Python to check if a given list of numbers is in ascending or descending order. [5, 3, 8, 6, 1]","completion":"def check_order(lst): ascending = all(lst[i] < lst[i+1] for i in range(len(lst)-1)) descending = all(lst[i] > lst[i+1] for i in range(len(lst)-1)) if ascending: return 'ascending' elif descending: return 'descending' else: return 'not ordered'"},{"prompt":"Convert a given string to an array of characters using Python. str = Hello World!","completion":"\\"\\"\\" Convert a given string to an array of characters using Python \\"\\"\\" str = \\"Hello World!\\" list = [] for character in str: list.append(character) print(list) #['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!']"},{"prompt":"Read an uncommented Python program, comment all the lines, and print the commented version. def func_name(param1, param2): a = param1 + param2 b = param1 * param2 return a, b","completion":"def func_name(param1, param2): # Add two parameters a = param1 + param2 # Multiply two parameters b = param1 * param2 # Return a and b return a, b"},{"prompt":"Create a python dictionary to store the following details Name = John Age = 27 Gender = Male","completion":"person_details = { 'Name': 'John', 'Age': 27, 'Gender': 'Male' }"},{"prompt":"Generate a Python program to calculate the total price of a grocery list given a list of items and their prices. [ [apple, 2.00], [banana, 4.00], [bread, 3.50], [orange, 1.50] ]","completion":"items = [ ['apple', 2.00], ['banana', 4.00], ['bread', 3.50], ['orange', 1.50] ] total = 0 for item in items: total += item[1] print(\\"The total price of the grocery list is:\\", total)"},{"prompt":"Create a Python class named \`Car\` with and instance variable \`speed\` and \`direction\`. Include a method that changes the car's direction.","completion":"class Car: # Initializer for the car def __init__(self, speed, direction): self.speed = speed self.direction = direction # Change direction of the car def change_direction(self, direction): self.direction = direction"},{"prompt":"Create a web scraper using Python and Scrapy to retrieve the titles and URLs of all articles on a given website. Example website: https://example.org/","completion":"import scrapy class ExampleSpider(scrapy.Spider): name = 'example' allowed_domains = ['example.org'] start_urls = ['https://example.org/'] def parse(self, response): for article in response.xpath(\\"//div[@class='article']\\"): yield { 'title': article.xpath(\\"./h1/text()\\").get(), 'url': article.xpath(\\"./a/@href\\").get(), }"},{"prompt":"Create a basic HTML/CSS page that displays a list of computer programming languages. Not applicable","completion":"<html> <head> <title>List of Programming Languages</title> <style> h1 { font-family: sans-serif; color: #444444; } ul { padding: 0; margin: 0; list-style-type: none; line-height: 1.5; font-family: sans-serif; font-size: 16px; color: #444444; } </style> </head> <body> <h1>List of Programming Languages</h1> <ul> <li>Java</li> <li>Python</li> <li>C++</li> <li>JavaScript</li> <li>C#</li> <li>PHP</li> <li>Perl</li> <li>Ruby</li> <li>Objective-C</li> <li>Swift</li> </ul> </body> </html>"},{"prompt":"Build an optimization problem in Python with an objective function and 2 constraints","completion":"import numpy as np from scipy.optimize import minimize def objective(x): return (x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2]) def constraint1(x): return x[0]*x[1]*x[2]*x[3] - 25 def constraint2(x): sum_sq = 40 for i in range(4): sum_sq = sum_sq - x[i]**2 return sum_sq # Initial Guess x0 = np.array([1, 4, 10, 1]) # show initial objective print('Initial SSE Objective: ' + str(objective(x0))) # Constraints cons = ({'type': 'ineq', 'fun': constraint1}, {'type': 'ineq', 'fun': constraint2}) # Solution res = minimize(objective, x0, method='SLSQP', constraints=cons, options={'disp': True}) # Show final objective print('Final SSE Objective: ' + str(res.fun)) # Print final solution print('x1 = ' + str(res.x[0])) print('x2 = ' + str(res.x[1])) print('x3 = ' + str(res.x[2])) print('x4 = ' + str(res.x[3]))"},{"prompt":"Design an algorithm in Python to determine the highest scoring word in a given text. The cat runs f","completion":"def highest_scoring_word(text): # Split the text into words words = text.split() # Create a dictionary to store the words # and their corresponding scores scores = {} for word in words: score = 0 for letter in word: score += ord(letter) - 96 scores[word] = score # Find the highest score highest_score = 0 for key, value in scores.items(): if value > highest_score: highest_score = value highest_scoring_word = key return highest_scoring_word # Driver code text = \\"The cat runs fast\\" print(highest_scoring_word(text))"},{"prompt":"Create a script to send an email","completion":"import smtplib sender = âsender@example.comâ receivers = âreceiver@example.comâ message = âââ Subject: Sending Email using Python This is a test e-mail message. âââ try: smtpObj = smtplib.SMTP(âlocalhostâ) smtpObj.sendmail(sender, receivers, message) print(âSuccessfully sent emailâ) except SMTPException: print(âError: unable to send emailâ)"},{"prompt":"Can you convert this Python code to Ruby? def my_func(a, b): return a + b","completion":"def my_func(a, b) a + b end"},{"prompt":"Create a code that checks whether the given date is valid or not in Python. Year: 2020 Month: 11 Day: 40","completion":"def validate_date(year, month, day): try: datetime.datetime(year, month, day) return True except ValueError: return False validate_date(2020, 11, 40) # Output: False"},{"prompt":"Reverse a given list using Python [1,2,3,4,5]","completion":"def reverse_list(arr): return arr[::-1]"},{"prompt":"Create a basic Python script for a calculator that takes user input and performs a calculation based on the input. Not applicable","completion":"def calculator(): operator = input(\\"Please enter an operator: \\") num1 = float(input(\\"Please enter your first number: \\")) num2 = float(input(\\"Please enter your second number: \\")) if operator == \\"+\\": print(num1 + num2) elif operator == \\"-\\": print(num1 - num2) elif operator == \\"*\\": print(num1 * num2) elif operator == \\"/\\": print(num1 / num2) else: print(\\"Invalid operator\\") calculator()"},{"prompt":"Design a neural network in Python for predicting house prices.","completion":"import tensorflow as tf from tensorflow import keras # create a Neural Network model = keras.Sequential([ keras.layers.Dense(64, activation=tf.nn.relu, input_shape=(6,)), keras.layers.Dense(64, activation=tf.nn.relu), keras.layers.Dense(1) ]) # compile the model model.compile(optimizer = 'rmsprop', loss = keras.losses.MeanSquaredError(), metrics=['accuracy']) # train the model model.fit(X_train, y_train, epochs=40) # test the model test_loss, test_acc = model.evaluate(X_test, y_test) print('Test accuracy:', test_acc)"},{"prompt":"Create an AI assistant bot that can respond to user queries.","completion":"import nltk import numpy as np import random import string # to process standard python strings f=open('corpus.txt','r',errors = 'ignore') raw=f.read() raw=raw.lower()# converts to lowercase #nltk.download('punkt') # first-time use only #nltk.download('wordnet') # first-time use only sent_tokens = nltk.sent_tokenize(raw)# converts to list of sentences word_tokens = nltk.word_tokenize(raw)# converts to list of words # Preprocessing lemmer = nltk.stem.WordNetLemmatizer() def LemTokens(tokens): return [lemmer.lemmatize(token) for token in tokens] remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation) def LemNormalize(text): return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict))) # Keyword Matching GREETING_INPUTS = (\\"hello\\", \\"hi\\", \\"greetings\\", \\"sup\\", \\"what's up\\",\\"hey\\",) GREETING_RESPONSES = [\\"hi\\", \\"hey\\", \\"hi there\\", \\"hello\\", \\"I am glad! You are talking to me\\"] def greeting(sentence): for word in sentence.split(): if word.lower() in GREETING_INPUTS: return random.choice(GREETING_RESPONSES) # Generating Response def response(user_response): AI_response='' sent_tokens.append(user_response) TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english') tfidf = TfidfVec.fit_transform(sent_tokens) vals = cosine_similarity(tfidf[-1], tfidf) idx=vals.argsort()[0][-2] flat = vals.flatten() flat.sort() req_tfidf = flat[-2] if(req_tfidf==0): AI_response=AI_response+\\"I am sorry! I don't understand you\\" return AI_response else: AI_response = AI_response+sent_tokens[idx] return AI_response flag=True print(\\"MyBot: My name is MyBot. I will answer your queries about AI. If you want to exit, type Bye!\\") while(flag==True): user_response = input() user_response=user_response.lower() if(user_response!='bye'): if(user_response=='thanks' or user_response=='thank you' ): flag=False print(\\"MyBot: You are welcome..\\") else: if(greeting(user_response)!=None): print(\\"MyBot: \\"+greeting(user_response)) else: print(\\"MyBot: \\",end=\\"\\") print(response(user_response)) sent_tokens.remove(user_response) else: flag=False print(\\"MyBot: Bye! take care..\\")"},{"prompt":"Generate a Python program to print out all divisible numbers between 0 and a given number","completion":"def print_divisible_numbers(n): for i in range(1, n + 1): if i % 3 == 0 or i % 5 == 0: print(i)"},{"prompt":"Write a function in Python which will accept two arguments and return the larger of the two.","completion":"def bigger_number(num1, num2): if num1 > num2: return num1 else: return num2"},{"prompt":"Translate the Python code below into C# code. def is_even(n): return n % 2 == 0","completion":"private bool IsEven(int n) { return n % 2 == 0; }"},{"prompt":"Generate a function to perform stochastic gradient descent on the iris dataset in Python.","completion":"\\"\\"\\" Perform stochastic gradient descent on the iris dataset in Python. \\"\\"\\" import numpy as np from sklearn import datasets from sklearn import metrics from sklearn.model_selection import train_test_split # Load the dataset iris = datasets.load_iris() X = iris.data y = iris.target # Split the dataset into test and train sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Set the hyperparameters NUM_ITERATIONS = 1000 LEARNING_RATE = 0.01 # Initialize the weights w = np.zeros(X_train.shape[1]) b = np.zeros((1,)) # Perform the Stochastic Gradient Descent for n in range(NUM_ITERATIONS): # Pick a random point x_i, y_i = X_train[np.random.randint(X_train.shape[0])], y_train[np.random.randint(y_train.shape[0])] # Compute the Sigmoid z = np.matmul(w, x_i) + b sigmoid = 1 / (1 + np.exp(-z)) # Compute the Gradients dw = (sigmoid - y_i) * x_i db = (sigmoid - y_i) # Update the weights w = w - LEARNING_RATE * dw b = b - LEARNING_RATE * db # Make predictions y_pred = np.matmul(X_test, w) + b y_pred = np.round(1 / (1 + np.exp(-y_pred))) # Compute the accuracy accuracy = metrics.accuracy_score(y_test, y_pred) print(\\"Accuracy:\\", accuracy)"},{"prompt":"Given a set of numbers, construct a Python program to calculate the sum of all prime numbers in the set. [2, 3, 9, 14]","completion":"def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True def sum_primes(nums): prime_sum = 0 for num in nums: if is_prime(num): prime_sum += num return prime_sum nums = [2, 3, 9, 14] result = sum_primes(nums) print(result)"},{"prompt":"Write a custom pip command that lists all the installed packages and their versions. Not applicable","completion":"#!/usr/bin/env python import pip def pip_list(): packages = pip.get_installed_distributions() for package in packages: print('{}=={}'.format(package.project_name, package.version)) if __name__ == '__main__': pip_list()"},{"prompt":"Produce a Python program to compute the Fibonacci number for a given integer. 8","completion":"def getFibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return getFibonacci(n-1)+getFibonacci(n-2) number = 8 fibonacci_number = getFibonacci(number) print(fibonacci_number)"},{"prompt":"Develop a python code that prints the longest word in a list. The list is [Hello, World, Welcome, To, the, universe].","completion":"def longest_word(word_list): maxLen = len(max(word_list, key = len)) return [x for x in word_list if len(x) == maxLen] list = [\\"Hello\\", \\"World\\", \\"Welcome\\", \\"To\\", \\"the\\", \\"universe\\"] print(longest_word(list)) # Output: [\\"Welcome\\", \\"universe\\"]"},{"prompt":"Develop a code to rate sentiments in a given text using Python.","completion":"# sentiment_rating function takes in a string of text # and returns a sentiment score from -1 to 1 def sentiment_rating(text): # Create a sentiment analyzer object sentiment_analyzer = SentimentIntensityAnalyzer() # Calculate the sentiment score sentiment_score = sentiment_analyzer.polarity_scores(text) return sentiment_score['compound']"},{"prompt":"Given a tweet text, write a Python program to classify the tweet as either positive or negative. Tweet example: I am really enjoying this course!","completion":"import nltk import re from nltk.sentiment.vader import SentimentIntensityAnalyzer def classify_tweet(text): tokenized_text = nltk.word_tokenize(text) tag = nltk.pos_tag(tokenized_text) lemmatizer = nltk.WordNetLemmatizer() lemmas = [lemmatizer.lemmatize(word) for word, tag in tag] sentiment_analyzer = SentimentIntensityAnalyzer() sentiment = sentiment_analyzer.polarity_scores(' '.join(lemmas)) if sentiment['compound'] < 0: print('Negative') elif sentiment['compound'] > 0: print('Positive') else: print('Neutral') classify_tweet(\\"I am really enjoying this course!\\") # Output: Positive"},{"prompt":"Write a Python function to create a stack data structure","completion":"class Stack(): def __init__(self): self.items = [] def push(self, item): self.items.append(item) def pop(self): if len(self.items) == 0: return None else: return self.items.pop() def peek(self): if len(self.items) == 0: return None else: return self.items[-1]"},{"prompt":"Develop an algorithm in Python to arrange an array in a nondescending order. Array = [5, 8, 10, 15, 2]","completion":"def selection_sort(arr): # traverse through all array elements for i in range(len(arr)): # find the minimum element in the remaining unsorted array min_idx = i for j in range(i+1, len(arr)): if arr[min_idx] > arr[j]: min_idx = j # swap the found minimum element arr[i], arr[min_idx] = arr[min_idx], arr[i] arr = [5, 8, 10, 15, 2] selection_sort(arr) print(\\"Sorted array: \\", arr) Output: Sorted array: [2, 5, 8, 10, 15]"},{"prompt":"Write a Python code to simulate a coin toss game and print the sequence of heads and tails.","completion":"import random def heads_tails(): heads = 0 tails = 0 res = [\\"H\\", \\"T\\"] tosses = int(input(\\"Number of tosses: \\")) sequence = \\"\\" for i in range(tosses): if random.choice(res) == \\"H\\": heads += 1 sequence += \\"H\\" else: tails += 1 sequence += \\"T\\" print(\\"Heads: \\", heads) print(\\"Tails: \\", tails) print(\\"Sequence:\\", sequence) heads_tails()"},{"prompt":"Design an algorithm in Python to identify the position and type of all the symbols in a given expression. expression = 2 + 3 * (4 5)","completion":"def process_expression(exp): symbols = [] pos = 0 # process the expression in order for c in exp: if c in \\"+-/*()\\": # identify and store the symbol symbol = { \\"type\\": c, \\"pos\\": pos } symbols.append(symbol) pos += 1 return symbols"},{"prompt":"dentify the bug in the following Python program and suggest an appropriate fix. def func1(list): s = 0 for x in list: s+= x print(s) func1([2, 3])","completion":"def func1(list): s = 0 for x in list: s+= x return s l = [2, 3] result = func1(l) print(result)"},{"prompt":"Write a Python program to read CSV data and store it in a dictionary.","completion":"import csv def read_csv_record(filename): data = {} with open(filename) as csv_file: reader = csv.DictReader(csv_file) for row in reader: data[row['key']] = row['value'] return data"},{"prompt":"Create an algorithm using Python to detect plagiarism between two given text documents.","completion":"def detect_plagiarism(text1, text2): # your code goes here return is_plagiarized"},{"prompt":"Given a string which humans can read, write a Python program to create a list that contains all the words in the string in reverse order input_string = I love to write code","completion":"input_words = input_string.split() output_words = [word[::-1] for word in input_words] print(output_words)"},{"prompt":"Write a Python code that gives the output of all possible combinations of given elements. [1, 2, 3]","completion":"from itertools import combinations input_list = [1, 2, 3] result = list(combinations(input_list, 3)) for combination in result: print(combination)"},{"prompt":"Develop an algorithm in Python for solving a Sudoku puzzle. Not applicable","completion":"def solve_sudoku(board): size = len(board) empty = find_empty_entry(board, size) if not empty: return True else: row, col = empty for num in range(1, size+1): if check_valid_number(board, size, num, (row, col)): board[row][col] = num if solve_sudoku(board): return True board[row][col] = 0 return False def find_empty_entry(board, size): for row in range(size): for col in range(size): if board[row][col] == 0: return (row, col) return None def check_valid_number(board, size, num, position): row, col = position # If the number is already present in the column or row, then return false for gen in range(size): if board[row][gen] == num or board[gen][col] == num: return False # Check if the number is present inside the board's 3x3 box row_start = (row//3)*3 col_start = (col//3)*3 for num_row in range(row_start, row_start+3): for num_col in range(col_start, col_start+3): if board[num_row][num_col] == num: return False return True"},{"prompt":"Create a Python program that takes an array of strings and returns an array of all strings that start with the letter A. [Apple, Grape, Banana, Aeroplane]","completion":"def filter_array_elements(arr): result = [] for string in arr: if string[0] == 'A': result.append(string) return result output = filter_array_elements([\\"Apple\\", \\"Grape\\", \\"Banana\\", \\"Aeroplane\\"]) print(output)"},{"prompt":"Create a function in Python that takes two inputs and returns their highest common factor.","completion":"def highest_common_factor(a, b): if a == 0 and b == 0: return 0 if a > 0 and b > 0: while a != b: if a > b: a = a - b else: b = b - a return a"},{"prompt":"Create a Python class for handling exceptions.","completion":"class CustomException(Exception): def __init__(self, message): self.message = message def __str__(self): return self.message def divide(x, y): try: result = x // y except ZeroDivisionError: raise CustomException(\\"Division by zero is not allowed\\") else: return result"},{"prompt":"Create a web API in Python with Flask to register and authenticate user. Not applicable","completion":"from flask import Flask, request, jsonify from flask_sqlalchemy import SQLAlchemy import uuid import hashlib app = Flask(__name__) @app.route('/register', methods=['POST']) def register(): # Get form data data = request.get_json() public_id = str(uuid.uuid4()) username = data['username'] password = data['password'] hashed_password = hashlib.sha256(password.encode()).hexdigest() # Create new user user = User(public_id, username, hashed_password) db.session.add(user) db.session.commit() return jsonify({'public_id': public_id}) @app.route('/authenticate', methods=['POST']) def authenticate(): data = request.get_json() username = data['username'] password = data['password'] user = User.query.filter_by(username=username).first() if user and hashlib.sha256(password.encode()).hexdigest() == user.password: return jsonify({'public_id': user.public_id}) if name == 'main': app.run(debug=True)"},{"prompt":"Write a Python script to take in a 2D array as an input and return the sum of all the elements. arr = [[1,2,3], [4,5,6], [7,8,9]]","completion":"def sum_elements(arr): s = 0 for row in arr: s += sum(row) return s arr = [[1,2,3], [4,5,6], [7,8,9]] print(sum_elements(arr)) # Output: 45"},{"prompt":"Generate a description of an object with a suite of Python list comprehensions. Not applicable","completion":"colors = ['red', 'green', 'blue', 'purple'] shapes = ['square', 'circle', 'triangle', 'hexagon'] objects = [{'color': color, 'shape': shape} for color in colors for shape in shapes] print(objects)"},{"prompt":"Write a Python program to edit a given solution to apply a specific design pattern. Solution: def add_item(list_items, item): list_items.append(item) Design Pattern: MVC (Model View Controller)","completion":"def edit_solution(solution, design_pattern): if design_pattern == \\"MVC\\": model = \\" class Model:n def __init__(self):n self.list_items = [] nn\\" controller = \\" class Controller:n def __init__(self):n self.model = Model() n def add_item(self, item):n self.model.list_items.append(item) nn\\" view = \\" class View:n def input(self):n item = input(\\"Enter the item:\\")n return item nn def output(self, list_items):n print(list_items)n\\" edited_solution = solution + model + controller + view return edited_solution"},{"prompt":"Create a Python program that implements the insertion sort algorithm.","completion":"def insertion_sort(list_): for i in range(1, len(list_)): temp = list_[i] j = i-1 while j >= 0 and temp < list_[j]: list_[j+1] = list_[j] j -= 1 list_[j+1] = temp return list_"},{"prompt":"Write an algorithm in Python for generating a list that contains all substrings of a given string in alphabetical order. String: hello","completion":"def all_substrings(string): # Create empty list to store all substrings substrings = [] # Find all possible substrings using two nested loops for i in range(len(string)): for j in range(i, len(string)): substring = string[i : j + 1] substrings.append(substring) # Sort the list and return substrings.sort() return substrings # Test print(all_substrings('hello')) # Output: ['h', 'he', 'hel', 'hell', 'hello', 'e', 'el', 'ell', 'ello', 'l', 'll', 'llo', 'l', 'lo', 'o']"},{"prompt":"Find the maximum value from a given list of numbers in Python. [12, 34, 23, 45, 13, 65, 66]","completion":"def find_max(nums): max = nums[0] for num in nums[1:]: if num > max: max = num return max print(find_max([12, 34, 23, 45, 13, 65, 66]))"},{"prompt":"Write a Python program to get a list of strings from a given string. string = The quick brown fox jumped over the lazy dog","completion":"def get_words_from_string(string): \\"\\"\\"This function will return a list of words from the given string.\\"\\"\\" words = string.split() return words string = \\"The quick brown fox jumped over the lazy dog\\" words_list = get_words_from_string(string) print(words_list) # Output: # ['The', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']"},{"prompt":"Create a Python program to automatically send emails to clients when products arrive in inventory.","completion":"import smtplib # Get the list of customers and their emails customers = {} # Configure the SMTP client smtp = smtplib.SMTP('smtp.example.com', 587) smtp.starttls() smtp.login('username', 'password') # Loop through customers and send an email when their product is available for customer, product in customers.items(): if product_available(product): email_message = 'Dear {customer}, nnYour product has arrived and is now available to purchase. Please visit our website for more details. nnSincerely, nThe Inventory Team'.format(customer=customer) # Send the email smtp.sendmail(from_address, customer, email_message)"},{"prompt":"Design a Python program, to get the Fibonacci series in a given range","completion":"def get_fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return get_fibonacci(n-1) + get_fibonacci(n-2) def get_fibonacci_series(start, end): series = [] for i in range(start, end+1): series.append(get_fibonacci(i)) return series if __name__ == '__main__': start = 5 end = 10 result = get_fibonacci_series(start, end) print(result)"},{"prompt":"Convert the following program from Java to Python. public class SumOfTwoNumbers { public static void main(String args[]) { int a = 10; int b = 20; int c = a + b; System.out.println(sum is + c); } }","completion":"def sum_of_two_numbers(a, b): c = a + b print(\\"sum is \\" + str(c)) if __name__ == \\"__main__\\": sum_of_two_numbers(10, 20)"},{"prompt":"Create a web scraping script in Python to scrape data from a Wikipedia page on gender inequality. Wikipedia page: https://en.wikipedia.org/wiki/Gender_inequality","completion":"import requests from bs4 import BeautifulSoup url = \\"https://en.wikipedia.org/wiki/Gender_inequality\\" page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') # Extract heading heading_list = soup.findAll('h1') heading = heading_list[0].text # Extract paragraphs paragraph_list = soup.findAll('p') # Parse the paragraphs data = [] for paragraph in paragraph_list: if any(x.isalpha() for x in paragraph.text): data.append(paragraph.text) print(heading) print(data)"},{"prompt":"Given a list, convert it to a dictionary using Python. list_1 = [1, 2, 3, 4]","completion":"list_1_dict =dict() for i in range(len(list_1)): list_1_dict[i] = list_1[i] print(list_1_dict)"},{"prompt":"Design a webcrawler in Python to collect all the URLs in a given website.","completion":"import requests from bs4 import BeautifulSoup def webcrawler(url): page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') for url in soup.find_all('a'): url = url.get('href') if url is not None and url not in visited: visited.add(url) print(url) webcrawler(url) webcrawler('https://www.example.com')"},{"prompt":"Develop a Python program to print the following pattern.","completion":"for i in range(1, 6): for j in range(5-i): print(\\" \\", end=\\"\\") for j in range(2*i-1): print(\\"*\\", end=\\"\\") print()"},{"prompt":"Create a Python script for the following design task. Design a web page containing a simple form with two input fields and one output field where users can enter data and generate a basic bar chart with their data.","completion":"import matplotlib.pyplot as plt import streamlit as st st.title('Data Visualization App') st.header('Create a Bar Chart') # Get user input x_labels = st.text_input('Enter data separated by comma for x-axis:') y_values = st.text_input('Enter data separated by comma for y-axis:') # Convert the data to list x_list = x_labels.split(\\",\\") y_list = [int(i) for i in y_values.split(\\",\\")] # Draw the chart plt.bar(x_list, y_list) # Render the chart with matplotlib st.pyplot()"},{"prompt":"Classify this Python function according to behavior. def is_even(n): ''' This function takes a number n and returns True if n is even and False if n is odd ''' return n % 2 == 0","completion":"Classifying this Python function as a Predictive Function."},{"prompt":"Design a class in Python that takes in one input, an integer, and prints out a multiplication table.","completion":"class MultiplicationTable: def __init__(self, num): self.num = num def printTable(self): for i in range(1, 11): print(self.num,\\"*\\",i,\\"=\\",self.num * i)"},{"prompt":"Write a code for sorting the words within a sentence, alphabetically. Python is a great language","completion":"\\"\\"\\" Write a code for sorting the words within a sentence, alphabetically. \\"\\"\\" def sort_words_alphabetically(sentence): words = sentence.split() words.sort() return ' '.join(words) if __name__ == '__main__': sentence = 'Python is a great language' print(sort_words_alphabetically(sentence))"},{"prompt":"Create a class in Python that represents a tennis match.","completion":"class TennisMatch: def __init__(self): self.player_one = None self.player_two = None def set_players(self, player_one, player_two): self.player_one = player_one self.player_two = player_two def start_match(self): pass def end_match(self): pass"},{"prompt":"Write a Python function to detect if a given string contains any vowels.","completion":"def contains_vowels(string): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\"] for char in string: if char in vowels: return True return False print(contains_vowels(\\" hello, how are you\\"))"},{"prompt":"Create a Python program that will take two lists of integers as input and merge them in sorted order. list1 = [1, 4, 5, 6] list2 = [2, 3, 7, 8]","completion":"list1 = [1, 4, 5, 6] list2 = [2, 3, 7, 8] def merge_lists(list1, list2): # sorted list to store the result sorted_list = [] # counts to iterate over each list i = 0 j = 0 # loop through both lists until one list ends while i < len(list1) and j < len(list2): # if first list has a smaller element, add it to the result if list1[i] < list2[j]: sorted_list.append(list1[i]) i += 1 # if second list has a smaller element, add it to the result else: sorted_list.append(list2[j]) j += 1 # if there are elements remaining in any of the lists, append them sorted_list.extend(list1[i:]) sorted_list.extend(list2[j:]) return sorted_list list1 = [1, 4, 5, 6] list2 = [2, 3, 7, 8] result = merge_lists(list1, list2) print(result)"},{"prompt":"Write a Python program to sort a list of dictionaries by a given key [{'name': 'Alice', 'age': 26}, {'name': 'Bob', 'age': 24}], 'age'","completion":"def sort_dicts(list_dicts, key): list_dicts.sort(key=lambda x: x[key]) return list_dicts print(sort_dicts([{'name': 'Alice', 'age': 26}, {'name': 'Bob', 'age': 24}], 'age'))"},{"prompt":"Create a basic Python script to connect to a MySQL database and read the records of table users. Not applicable","completion":"import mysql.connector # Connect to the database mydb = mysql.connector.connect( host=\\"localhost\\", user=\\"yourusername\\", passwd=\\"yourpassword\\", database=\\"user_db\\" ) # Get the cursor my_cursor = mydb.cursor() # Execute the query query = 'SELECT * FROM users' my_cursor.execute(query) # Get the results result = my_cursor.fetchall() # Print the results for row in result: print(row)"},{"prompt":"Create a method in Python that takes a text string as an argument and determines whether the text is a palindrome. racecar","completion":"\\"\\"\\" Create a method in Python that takes a text string and determines whether the string is a palindrome. \\"\\"\\" def is_palindrome(text): i = 0 j = len(text) - 1 while i <= j: if text[i] != text[j]: return False i += 1 j -= 1 return True if __name__ == '__main__': text = \\"racecar\\" print(is_palindrome(text))"},{"prompt":"Build an algorithm in Python for predicting the price of a stock given historical data and the current market conditions. Not applicable","completion":"import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns # load the dataset dataset = pd.read_csv('stock_data.csv') # Exploratory data analysis dataset.describe() sns.heatmap(dataset.corr(), annot=True) # Create feature and target variables X = dataset.iloc[:, 1:-1] y = dataset.iloc[:, -1] # Split the data into train and test data from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2,random_state=0) # Feature scaling from sklearn.preprocessing import StandardScaler sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test) # Train model from sklearn.linear_model import LinearRegression regressor = LinearRegression() regressor.fit(X_train, y_train) # Test the model y_pred = regressor.predict(X_test) # Evaluate the model from sklearn.metrics import r2_score r2_score(y_test, y_pred)"},{"prompt":"Update the Python program to calculate average of given numbers so that it takes an optional parameter. If set to True, the program should print the maximum among the given numbers instead of the average. Not applicable","completion":"def calc_average(numbers, maximum=False): if maximum: return max(numbers) else: return sum(numbers) / len(numbers)"},{"prompt":"Design a class in Python to model a bank account.","completion":"class BankAccount: def __init__(self, name, balance): self.name = name self.balance = balance def deposit(self, amount): self.balance += amount def withdraw(self, amount): self.balance -= amount def get_balance(self): return self.balance"},{"prompt":"Design a class in Python to represent a car using attributes like \`year\`, \`make\` and \`model\`.","completion":"class Car: def __init__(self, year, make, model): self.year = year self.make = make self.model = model def get_details(self): print(f\\"{self.year} {self.make} {self.model}\\")"},{"prompt":"Write a Python program to categorize a given set of movie ratings. [9, 6, 7, 5, 4, 8]","completion":"def movie_rating_categorizer(ratings): categorized_ratings = [] for rating in ratings: if rating > 8: categorized_ratings.append(\\"Excellent\\") elif rating > 6: categorized_ratings.append(\\"Good\\") elif rating > 4: categorized_ratings.append(\\"Average\\") else: categorized_ratings.append(\\"Poor\\") return categorized_ratings"},{"prompt":"Write a Python program to calculate the number of even and odd numbers from a series of numbers. 1, 4, 5, 7","completion":"series = [1, 4, 5, 7] # count even and odd numbers even_count = 0 odd_count = 0 for num in series: if num % 2 == 0: even_count += 1 else: odd_count += 1 # Print the total number of even and odd numbers print('Number of even numbers: {}'.format(even_count)) print('Number of odd numbers: {}'.format(odd_count))"},{"prompt":"Refactor a code snippet in Python that implements a quicksort algorithm. def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] middle = [x for x in arr if x == pivot] right = [x for x in arr if x > pivot] return quicksort(left) + middle + quicksort(right)","completion":"def quicksort(arr): if len(arr) <= 1: return arr pivot = arr[len(arr) // 2] left = [x for x in arr if x < pivot] right = [x for x in arr if x > pivot] return quicksort(left) + [pivot] + quicksort(right)"},{"prompt":"Write a python code snippet to append a new item to a given list. list = [1, 2, 4, 8]","completion":"list.append(16)"},{"prompt":"Create a Python code to generate a string containing the multiplying table for any given number up to ten.","completion":"def generate_multiplication_table(num): \\"\\"\\" Generates a string with the multiplication table of a given number up to ten. @param num: int @return: str \\"\\"\\" table_str = \\"\\" for i in range(1, 11): result = num * i table_str += f\\"{num} * {i} = {result}n\\" return table_str"},{"prompt":"Develop a neural network in Python model using Keras and TensorFlow to predict the rating of a given movie. Sample input feature vector: [2.7, 3735, 0.99, 8, 4000000]","completion":"import numpy as np import tensorflow as tf from tensorflow import keras # Input Feature Vector X = np.array([[2.7, 3735, 0.99, 8, 4000000]]) # Build model model = keras.Sequential() model.add(keras.layers.Dense(64, input_dim=X.shape[1], activation='relu')) model.add(keras.layers.Dropout(0.5)) model.add(keras.layers.Dense(64, activation='relu')) model.add(keras.layers.Dropout(0.5)) model.add(keras.layers.Dense(1, activation='sigmoid')) # Compile Model model.compile(loss='mean_squared_error', optimizer='adam') # Fit the model model.fit(X, y, epochs=50, batch_size=10, shuffle=True)"},{"prompt":"Generate a Python program to print the characters at even positions in a given string. Hello World!","completion":"def even_positions(string): result = \\"\\" for i in range(0, len(string), 2): result += string[i] return result print(even_positions(\\"Hello World!\\"))"},{"prompt":"Write an Ansible playbook that automatically deploys a web application on a server. Application folder containing all the necessary files and configuration.","completion":"--- - name: Deploy web application hosts: server tasks: - name: Transfer application files copy: src: '{{ application }}' dest: /var/www/app - name: Create web environment command: python create_env.py args: chdir: /var/www/app - name: Configure web server command: ansible-playbook web.yml - name: Restart web server service: name=nginx state=restarted"},{"prompt":"Generate a Python program to filter out any words containing a given letter from a list. words = [apple, banana, orange, peach] letter = e","completion":"def filter_words(words, letter): filtered_words = [] for word in words: if letter not in word: filtered_words.append(word) return filtered_words"},{"prompt":"Write a Python function to compute the length of each element in the given list. list = [5, 10, 15]","completion":"def list_length(list): for element in list: print(len(element)) list_length(list)"},{"prompt":"Design a database in Python that stores user information. User details should include user name (string), age (integer), address (string).","completion":"class User: def __init__(self, name, age, address): self.name = name self.age = age self.address = address def __str__(self): return \\"Name: \\"+ self.name + \\", Age: \\"+ str(self.age) +\\", Address: \\"+ self.address class UsersDB: def __init__(self): self.users = [] def add_user(self, user): self.users.append(user) def get_users(self): return self.users # Create a database users_db = UsersDB() # Add some users user1 = User(\\"John Doe\\", 25, \\"1600 Pennsylvania Avenue NW, Washington, DC\\") users_db.add_user(user1) user2 = User(\\"Jane Doe\\", 20, \\"22 Jump Street, New York, NY\\") users_db.add_user(user2) # Print the users print(users_db.get_users())"},{"prompt":"Can you write a code snippet in Python that replaces all occurrences of a specific character in a string? string = Hello World character = o","completion":"def replace_all_occurrences(string, character): return string.replace(character, \\"\\")"},{"prompt":"You have a list of numbers. Write a function in Python that multiplies each number by 2. [1, 2, 3, 4]","completion":"def multiplyBy2(nums): return [num * 2 for num in nums]"},{"prompt":"Generate a Python code snippet that prints out a list with the square of each number in the range from 1 to 10.","completion":"for i in range(1,11): print(i**2)"},{"prompt":"Generate the Python code that calculates the numbers of characters in a given string. Hello, World!","completion":"myString = \\"Hello, World!\\" charCount = 0 for char in myString: charCount += 1 print(\\"Number of characters:\\", charCount)"},{"prompt":"Create a REST API in Python that implements a ToDo list application. The API should include endpoints for adding, editing, and deleting ToDo list items. Not applicable","completion":"import flask from flask import request app = flask.Flask(__name__) app.config[\\"DEBUG\\"] = True todos = [ { 'id': 1, 'title': 'buy groceries', 'completed': False }, { 'id': 2, 'title': 'clean room', 'completed': False } ] @app.route('/', methods=['GET']) def home(): return '''<h1>To-Do List API</h1> <p>A prototype API for a To-Do List application.</p>''' @app.route('/api/v1/todos/', methods=['GET']) def api_all(): return flask.jsonify(todos) @app.route('/api/v1/todos/', methods=['POST']) def api_create(): data = request.get_json() todos.append(data) return flask.jsonify(data) @app.route('/api/v1/todos/<int:id>', methods=['PUT', 'PATCH']) def api_update(id): for todo in todos: if todo['id'] == id: data = request.get_json() for key, value in data.items(): todo[key] = value return flask.jsonify(todo) @app.route('/api/v1/todos/<int:id>', methods=['DELETE']) def api_delete(id): for i, todo in enumerate(todos): if todo['id'] == id: del todos[i] return flask.jsonify({'success': True}) app.run()"},{"prompt":"Write a Python program that prints the nth prime number. n=5","completion":"def nth_prime_number(n): prime_numbers = [2] number = 3 while len(prime_numbers) < n: is_prime = True for prime in prime_numbers: if number % prime == 0: is_prime = False break if is_prime: prime_numbers.append(number) number += 2 return prime_numbers[-1] print(nth_prime_number(5))"},{"prompt":"Build a Python web service for calculating the sum and average of a given set of numbers. int x[] = {5, 2, 8, 1, 4};","completion":"from flask import Flask, request import json app = Flask(__name__) @app.route(\\"/\\", methods=['POST']) def calc_sum_average(): json_data = request.get_json() numbers = json_data.get('numbers') sum = 0 for x in numbers: sum += x average = sum / float(len(numbers)) result = {'sum' :sum, 'average': average} return json.dumps(result) if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Given a 2D array of integers, write a Python code snippet to rotate the array by 90 degrees. arr = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]","completion":"def rotate90(arr): N = len(arr[0]) rotate_matrix = [[0 for x in range(N)] for y in range(N)] for x in range(N): for y in range(N): rotate_matrix[y][N-1-x] = arr[x][y] return rotate_matrix"},{"prompt":"Write a Python program to calculate the total number of characters in a given string.","completion":"def total_characters(string): count = 0 for char in string: count += 1 return count"},{"prompt":"Create an algorithm in Python for solving a Rubik's cube. Not applicable","completion":"def solve_cube(cube): # Step 1: Position the cube cube_position = position_cube(cube) # Step 2: Solve the center pieces center_pieces = solve_center_pieces(cube_position) # Step 3: Solve the first two layers first_two_layers = solve_first_two_layers(center_pieces) # Step 4: Orient the final layer final_layer = orient_final_layer(first_two_layers) # Step 5: Permute the final layer cube_solved = permute_final_layer(final_layer) return cube_solved"},{"prompt":"Calculate the number of unique prime factors from a given number in Python. 24","completion":"def count_unique_prime_factors(num): unique_prime_factors = [] for i in range(2, num + 1): if num % i == 0: if is_prime(i): unique_prime_factors.append(i) return len(set(unique_prime_factors)) def is_prime(n): if (n <= 1): return False if (n <= 3): return True if (n % 2 == 0 or n % 3 == 0): return False i = 5 while(i * i <= n): if (n % i == 0 or n % (i + 2) == 0): return False i = i + 6 return True count_unique_prime_factors(24)"},{"prompt":"Given a list of dictionarys, create a python command to add hello in front of every value in the list. [{'string' : 'world'}, {'number' : 5}]","completion":"[{'string' : 'hello world'}, {'number' : 'hello 5'}]"},{"prompt":"Write a Python script to generate a HTML table containing the multiples of an input number. 38","completion":"def generateTable(num): htmlTable = \\"\\" htmlTable += \\"<table border=\\"1\\">n\\" htmlTable += \\"<tr>n\\" htmlTable += \\"<th>Number</th>n\\" htmlTable += \\"<th>Multiple</th>n\\" htmlTable += \\"</tr>n\\" for i in range(1, 11): htmlTable += \\"<tr>n\\" htmlTable += \\"<td>\\" + str(num) + \\"</td>n\\" htmlTable += \\"<td>\\" + str(num * i) + \\"</td>n\\" htmlTable += \\"</tr>n\\" htmlTable += \\"</table>\\" return htmlTable"},{"prompt":"Write a code in Python to print out every integer between 5 and 15 (inclusive).","completion":"for i in range(5, 16): print(i)"},{"prompt":"Generate a Python program that takes in a string and returns the most common character","completion":"def most_common_char(string): char_dict = {} for char in string: if char in char_dict: char_dict[char] += 1 else: char_dict[char] = 1 most_common_char = \\"\\" most_common_freq = 0 for char in char_dict: if char_dict[char] > most_common_freq: most_common_freq = char_dict[char] most_common_char = char return most_common_char"},{"prompt":"Generate a python program that matches regular expression pattern. pattern = d+ text = I have 3 cats and 5 dogs","completion":"import re def regex_match(pattern, text): regex = re.compile(pattern) matches = regex.findall(text) return matches"},{"prompt":"Create a Python script to filter tweets by language. [ { 'user': 'John', 'tweet': 'This is a tweet in English', 'language': 'en' }, { 'user': 'Jane', 'tweet': 'Ceci est un tweet en franÃ§ais', 'language': 'fr' }, { 'user': 'Bob', 'tweet': 'Esta es una publicaciÃ³n en espaÃ±ol', 'language': 'es' } ]","completion":"import json tweets = [ { 'user': 'John', 'tweet': 'This is a tweet in English', 'language': 'en' }, { 'user': 'Jane', 'tweet': 'Ceci est un tweet en franÃ§ais', 'language': 'fr' }, { 'user': 'Bob', 'tweet': 'Esta es una publicaciÃ³n en espaÃ±ol', 'language': 'es' } ] language = 'en' filtered = [tweet for tweet in tweets if tweet['language'] == language] print(json.dumps(filtered, indent=2))"},{"prompt":"Create a Python code snippet to print Hello World! 10 times in the console.","completion":"for i in range(10): print(\\"Hello World!\\")"},{"prompt":"Write a Python function make_float that converts a given string argument to a float. 25.42","completion":"def make_float(string): return float(string)"},{"prompt":"Design an online voting system in Python that supports multiple choices.","completion":"import datetime # Voting_System class class Voting_System: # voting_options instance variable def __init__(self, voting_options): self.voting_options = voting_options # Vote function def vote(self, user_id, option_id): if user_id not in self.voting_options.keys(): self.voting_options[user_id] = option_id return True else: return False # get_all_votes function def get_all_votes(self): return self.voting_options"},{"prompt":"Create a class in Python to store temperature data.","completion":"class TemperatureData: def __init__(self, temperature): self.temperature = temperature def get_temperature(self): return self.temperature"},{"prompt":"Write a Lambda function in Python to validate a user's settings. The function should check to make sure that the user has provided valid values for each setting and return an error if any of them are invalid. settings = { name: John Smith, age: 29, city: New York }","completion":"def validate_user(event, context): valid_fields = [\\"name\\", \\"age\\", \\"city\\"] valid_values = [\\"John Smith\\", 29, \\"New York\\"] event_body = event.get(\\"body\\") if not event_body: return { \\"statusCode\\": 400, \\"body\\": \\"Invalid data\\" } for key, value in event_body.items(): if key not in valid_fields: return { \\"statusCode\\": 400, \\"body\\": f\\"Invalid field {key}\\" } if value not in valid_values: return { \\"statusCode\\": 400, \\"body\\": f\\"Invalid value for field {key}\\" } return { \\"statusCode\\": 200, \\"body\\": \\"User has valid configuration\\" }"},{"prompt":"Generate a python dictionary for storing student information as { Student ID: (name, email, phone number) } Alice: (123456, alice@example.com, 123456789) Bob: (789456, bob@example.com, 456789012)","completion":"student_dict = { 123456: (\\"Alice\\", \\"alice@example.com\\", \\"123-456-789\\"), 789456: (\\"Bob\\", \\"bob@example.com\\", \\"456-789-012\\") }"},{"prompt":"Write a Python program to transform user input from lowercase to uppercase. This is a sample string","completion":"input_string = input('Enter a string: ') output_string = input_string.upper() print(f'Your input in uppercase is: {output_string}')"},{"prompt":"Write a Python program that searches a given string for all its occurrences of a given substring in a case insensitive manner. string = Welcome To Programming substring = to","completion":"import re def search_substring(string, substring): pattern = re.compile(substring, re.IGNORECASE) # case insensitive match = re.search(pattern, string) if match: print(\\"Found the substring at index\\", match.start()) else: print(\\"The substring was not found\\") string = \\"Welcome To Programming\\" substring = \\"to\\" search_substring(string, substring) # prints \\"Found the substring at index 8\\""},{"prompt":"Create a Python function that takes a list of dictionaries and counts the frequency of each unique element.","completion":"def count_frequency(arr): # Create empty dictionary frequency = {} # Iterate through array for item in arr: # Iterate through elements of each dictionary for element in item.values(): # Increment the counter for each element if element in frequency: frequency[element] += 1 else: frequency[element] = 1 return frequency"},{"prompt":"Update the Python function below so that it sorts the given list of numbers in ascending order. [2, 4, 5, 1, 3]","completion":"def sort_list(numbers): numbers.sort() return numbers result = sort_list([2, 4, 5, 1, 3]) print(result)"},{"prompt":"Create a Python program that takes a number as an input and computes the factorial of that number. 7","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) num = 7 result = factorial(num) print(result)"},{"prompt":"Design an algorithm in Python to find all the prime factors of an input number.","completion":"def prime_factors(n): factors = [] d = 2 while n > 1: while n % d == 0: factors.append(d) n = n/d d = d + 1 return factors"},{"prompt":"Develop a Python program to generate a Ruby code to format a given text. This is a test text.","completion":"def format_text(input_text): formatted_str = \\"\\" for i in input_text: if i.isupper(): formatted_str += \\"'#{i}'\\" else: formatted_str += i return formatted_str"},{"prompt":"Design a compressed data structure in Python that supports basic operations like insert, search and delete.","completion":"class CompressedDataStructure(): def __init__(self): self.data = {} def insert(self,key,value): self.data[key] = value def search(self,key): if key in self.data: return self.data[key] else: raise KeyError def delete(self,key): del self.data[key]"},{"prompt":"Create a function to convert JSON objects to Python dictionaries. {key1: value1, key2: value2 }","completion":"import json def convert_json_to_dict(input_json): \\"\\"\\" Convert JSON object to Python dictionary Args: input_json (json): JSON object to be converted Returns: output_dict (dict): Python dictionary with keys and values from input_json \\"\\"\\" output_dict = json.loads(input_json) return output_dict"},{"prompt":"Rewrite the following code snippet in Python: let nums = [1, 2, 3, 4, 5]; let squaredNums = nums.map(num => num * num);","completion":"nums = [1, 2, 3, 4, 5] squared_nums = list(map(lambda num: num * num, nums))"},{"prompt":"Generate a Python program to optimize a lowcost route between two points startX = 0 and endX = 10","completion":"def optimize_route(startX, endX): best_route = [startX] next_x = startX while next_x < endX: best_cost = float(\\"inf\\") for x in range(next_x+1, endX+1): cost = abs(x - next_x) if cost < best_cost: best_cost = cost next_x = x best_route.append(next_x) return best_route"},{"prompt":"Construct a program in Python to stack and scale input data A list of 10 data points consisting of a mix of integers and flo","completion":"import numpy as np def preprocess(data): # Stack the data data = np.stack(data) # Scale the data data = (data - np.min(data)) / (np.max(data) - np.min(data)) return data"},{"prompt":"Create a Python program that takes a list of strings and filters out strings that do not contain the letter 'a'. words = [apple, banana, grape, pear, kiwi]","completion":"# Filtering out strings without letter 'a' filtered_words = [word for word in words if 'a' in word] # Print the filtered list print(filtered_words) # Output: ['apple', 'banana', 'grape']"},{"prompt":"Develop an algorithm in Python to identify the most commonly used words in a block of text. Not applicable","completion":"def most_frequent_words(text): # convert the text into a list of words words = text.split() # create an empty dictionary word_count = {} # count each word and store it in the dictionary for word in words: if word in word_count: word_count[word] += 1 else: word_count[word] = 1 # sort the dictionary by frequency sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True) # return the most frequently used words most_frequent_words = [word[0] for word in sorted_word_count[:10]] return most_frequent_words"},{"prompt":"Write a python program to print out all permutations of a string.","completion":"def permute(a, l, r): if l==r: print(''.join(a)) else: for i in range(l,r+1): a[l], a[i] = a[i], a[l] permute(a, l+1, r) a[l], a[i] = a[i], a[l] def main(): string = input(\\"Enter a string:\\") n = len(string) a = list(string) permute(a, 0, n-1) if __name__ == '__main__': main()"},{"prompt":"Create a new Python list containing the square of the values in the given list. [2, 4, 6]","completion":"new_list = [4, 16, 36]"},{"prompt":"Write Python code to parse this JSON data. { title: The Adventures of Tom Sawyer, author: Mark Twain, year: 1876 }","completion":"import json data = { \\"title\\": \\"The Adventures of Tom Sawyer\\", \\"author\\": \\"Mark Twain\\", \\"year\\": 1876 } parsed_data = json.loads(data) title = parsed_data['title'] author = parsed_data['author'] year = parsed_data['year']"},{"prompt":"Optimize the following python program to reduce running time. def sum_numbers(arr): s = 0 i = 0 while i < len(arr): s += arr[i] i += 1 return","completion":"def sum_numbers(arr): s = 0 for i in range(len(arr)): s += arr[i] return s"},{"prompt":"Update a given MongoDB document using Python. db.collection.updateOne( { name: John Doe }, { set:{ age: 28 } } )","completion":"import pymongo # Open connection client = pymongo.MongoClient(\\"mongodb://localhost:27017/\\") db = client[\\"mydatabase\\"] # Update document db.collection.update_one( {\\"name\\": \\"John Doe\\"}, {\\"set\\": {\\"age\\": 28}} ) # Close connection client.close()"},{"prompt":"Create a Python Program to implement the Monte Carlo method for calculating the value of pi.","completion":"import random def MonteCarlo(n): inside = 0 for i in range(n): x = random.random() y = random.random() if x*x + y*y <= 1: inside += 1 return 4*inside/n if __name__ == '__main__': n = int(input(\\"Input the number of points: \\")) print(\\"Pi is approximately {}!\\".format(MonteCarlo(n)))"},{"prompt":"Given a list of student information, design a Python program to compute the total number of As, Bs, Cs and Ds received by each student. [{name: John, scores: [90, 91, 88, 85]}, {name: Jane, scores: [87, 84, 90, 83]}]","completion":"def get_grade_counts(student_info): scores_by_grade = { \\"As\\": 0, \\"Bs\\": 0, \\"Cs\\": 0, \\"Ds\\": 0 } for student in student_info: for score in student[\\"scores\\"]: if score >= 90: scores_by_grade[\\"As\\"] += 1 elif score >= 80: scores_by_grade[\\"Bs\\"] += 1 elif score >= 70: scores_by_grade[\\"Cs\\"] += 1 else: scores_by_grade[\\"Ds\\"] += 1 return scores_by_grade"},{"prompt":"Construct a Python function that takes in three strings as parameters and returns a list containing sorted versions of the strings. apples, oranges, peaches","completion":"def sort_strings(s1, s2, s3): return sorted([s1, s2, s3]) result = sort_strings('apples', 'oranges', 'peaches') print(result)"},{"prompt":"Create an HTML page that displays the output of this Python program. for i in range(1,11): print Hello World!,","completion":"<html> <head> <title>Python Output</title> </head> <body> <script> for (i = 1; i <= 10; i++) { document.write(\\"Hello World!\\" + i); } <\/script> </body> </html>"},{"prompt":"Develop a machine learning model in Python to predict wine quality.","completion":"#importing the libraries import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score from sklearn.preprocessing import StandardScaler #loading the dataset df = pd.read_csv('wine_data.csv') #defining independent and dependent variables X = df.iloc[:,:11] y = df.iloc[:,11] #splitting the dataset into train and test X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) #scaling the data scaler = StandardScaler() scaled_X_train = scaler.fit_transform(X_train) scaled_X_test = scaler.fit_transform(X_test) #creating and fitting the model model = LogisticRegression().fit(scaled_X_train, y_train) #prediciting the test data y_pred = model.predict(scaled_X_test) #calculating the accuracy accuracy = accuracy_score(y_test, y_pred) print(accuracy)"},{"prompt":"Edit the following Python program to make a direct call to the display_age method: class Employee: name = age = 0 def __init__(self): pass def set_name(self, n): self.name = n def set_age(self, a): self.age = a def display_age(self): print(self.age)","completion":"class Employee: name = \\"\\" age = 0 def __init__(self): pass def set_name(self, n): self.name = n def set_age(self, a): self.age = a def display_age(self): print(self.age) # Call display_age directly Employee().display_age()"},{"prompt":"Create a program that implements the following pseudocode and express it in Python for x in range(1, 10): if x < 4: print(Low) else: print(High)","completion":"for x in range(1, 10): if x < 4: print(\\"Low\\") else: print(\\"High\\")"},{"prompt":"Design a Python class for an Employee, containing person's name, age, salary, and designation.","completion":"class Employee: def __init__(self, name, age, salary, designation): self.name = name self.age = age self.salary = salary self.designation = designation def get_details(self): return self.name + \\" \\" + str(self.age) + \\" \\" + str(self.salary) + \\" \\" + self.designation def __str__(self): return self.name + \\" \\" + str(self.age) + \\" \\" + str(self.salary) + \\" \\" + self.designation"},{"prompt":"Generate a Python program to check whether a given string is a palindrome or not.","completion":"def is_palindrome(text): return text == text[::-1]"},{"prompt":"Analyze the time complexity of an algorithm written in Python. def bubble_sort(arr): n = len(arr) # Traverse through all array elements for i in range(n): # Last i elements are already in place for j in range(0, ni1): # traverse the array from 0 to ni1 # Swap if the element found is greater # than the next element if arr[j] > arr[j+1]: arr[j], arr[j+1] = arr[j+1], arr[j]","completion":"This algorithm has a time complexity of O(n2). This is due to the nested for loop which means that the runtime of the algorithm is proportional to the square of the size of the input. Consequently, the time complexity increases exponentially with the input size."},{"prompt":"Design a Python program to find the position of the maximum element in a list of numbers. nums = [1, 5, 8, 3, 0]","completion":"def find_max_position(nums): max_num = nums[0] max_pos = 0 for i in range(len(nums)): if nums[i] > max_num: max_num = nums[i] max_pos = i return max_pos nums = [1, 5, 8, -3, 0] max_pos = find_max_position(nums) print(f\\"The maximum element is at position {max_pos}\\")"},{"prompt":"Come up with a Python code to generate a report Given employee data, generate a report of employee salary information.","completion":"def generate_report(data): # create an empty output dictionary output = {} # Iterate over the data for employee in data: # get the employee name name = employee['name'] # get the employee salary salary = employee['salary'] # add the salary info to the output dictionary output[name] = salary # return the output of the report return output"},{"prompt":"Generate a Python program to calculate the mean of four numbers.","completion":"def mean(nums): total = 0 for num in nums: total += num return total/len(nums) nums = [4, 6, 8, 10] result = mean(nums) print(\\"The mean of\\", nums, \\"is\\", result)"},{"prompt":"Generate a web API in Python Django to compare the prices of two products from different stores.","completion":"# Import Django import django from django.conf import settings from django.urls import path # Setup Django app settings.configure() # Create Django application app = django.apps.registry.AppRegistry() # Create URL path @app.route('/compare') # Define response def compare_prices(): # Get product and store information product1 = request.args.get('product1') store1 = request.args.get('store1') product2 = request.args.get('product2) store2 = request.args.get('store2') # Make the API call to the stores' API store1_data = requests.get(url1+product1+'&store='+store1).json() store2_data = requests.get(url2+product2+'&store='+store2).json() # Compare the prices price1 = float(store1_data['price']) price2 = float(store2_data['price']) difference = price2 - price1 # Return response return jsonify( store1=store1, store2=store2, product1=product1, product2=product2, price1=price1, price2=price2, difference=difference ) # Run the server if __name__ == \\"__main__\\": app.run()"},{"prompt":"Write a python script to segregate a list of numbers into lists odd and even numbers. list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"odd_numbers = [] even_numbers = [] for number in list_of_numbers: if number % 2 == 0: even_numbers.append(number) else: odd_numbers.append(number) print(\\"Odd numbers: \\" + str(odd_numbers)) print(\\"Even numbers: \\" + str(even_numbers))"},{"prompt":"Create a class Animal in Python with a function make_sound to print the sound the animal can make.","completion":"class Animal: def __init__(self): pass def make_sound(self): print(\\"The animal makes a sound.\\")"},{"prompt":"Create a Python program to get the least common multiple (LCM) of two numbers. num1 = 9 num2 = 17","completion":"def lcm(num1, num2): if num1 > num2: greater = num1 else: greater = num2 while(True): if((greater % num1 == 0) and (greater % num2 == 0)): lcm = greater break greater += 1 return lcm"},{"prompt":"Design a Merge Sort algorithm in Python that sorts a given list of integers. [5, 3, 6, 8, 10, 1, 4, 7]","completion":"def merge_sort(arr): if len(arr) >1: mid = len(arr)//2 #Finding the mid of the array L = arr[:mid] # Dividing the array elements R = arr[mid:] # into 2 halves merge_sort(L) # Sorting the first half merge_sort(R) # Sorting the second half i = j = k = 0 # Copy data to temp arrays L[] and R[] while i < len(L) and j < len(R): if L[i] < R[j]: arr[k] = L[i] i+=1 else: arr[k] = R[j] j+=1 k+=1 # Checking if any element was left while i < len(L): arr[k] = L[i] i+=1 k+=1 while j < len(R): arr[k] = R[j] j+=1 k+=1 def print_list(arr): for i in range(len(arr)): print(arr[i],end=\\" \\") print() # Driver code to test above if __name__ == '__main__': arr = [5,3,6,8,10,1,4,7] print (\\"Given array is\\", end=\\"n\\") print_list(arr) merge_sort(arr) print(\\"Sorted array is: \\", end=\\"n\\") print_list(arr)"},{"prompt":"Translate the given Bash shell script to Python. #!/bin/bash echo Hello World!","completion":"print(\\"Hello World!\\")"},{"prompt":"Debug a Python program which calculates the sum of two given numbers. x = 5 y = 7 sum = x + y print(Sum=, sum)","completion":"x = 5 y = 7 sum = x + y # Add the correct operator here sum = x + y print(\\"Sum=\\", sum)"},{"prompt":"Create an automated process for web scraping using Python and Selenium. The process should scrape data from the specified URL from the given website. URL: https://www.example.com/index.html","completion":"# Define the web scraper from selenium import webdriver # Define the URL url = 'https://www.example.com/index.html' # Initialize the web driver driver = webdriver.Chrome() # Load the URL driver.get(url) # Scrape the data dataList = driver.find_elements_by_css_selector('div.data') for data in dataList: print(data.text) # Close the driver instance driver.close()"},{"prompt":"Create a Python class for representing a vector as a list of three numbers.","completion":"class Vector3D: def __init__(self, x, y, z): self.x = x self.y = y self.z = z"},{"prompt":"Build a Python script for Django to collect data from two forms and store it in two separate tables.","completion":"# formA.py from django.forms import ModelForm from .models import TableA class formA(ModelForm): class Meta: model = TableA fields = ['field1','field2','field3','field4'] # formB.py from django.forms import ModelForm from .models import TableB class formB(ModelForm): class Meta: model = TableB fields = ['field1','field2','field3','field4'] # views.py from django.shortcuts import render from .forms import formA, formB def form_view(request): formA_data = formA(request.POST or None) formB_data = formB(request.POST or None) if formA_data.is_valid() and formB_data.is_valid(): formA_data.save() formB_data.save() return render(request, 'thankyoupage.html') return render(request, 'formpage.html', {'formA':formA_data, 'formB':formB_data})"},{"prompt":"Write a code in Python to evaluate the expression 3x + 5 for any given x x = 7","completion":"def expression(x): return 3 * x + 5 print(expression(7))"},{"prompt":"Rewrite the following C++ function to Python. int multiply(int a, int b) { int result = a * b; return result; }","completion":"def multiply(a, b): result = a * b return result"},{"prompt":"Generate a Python function to calculate the least common multiple (LCM) of two numbers.","completion":"def lcm(a, b): lcm = (a*b)//gcd(a,b) return lcm"},{"prompt":"Generate a program in Python for summing up the elements of an array. [1, 4, 6]","completion":"def sumArrayElements(arr): total = 0 for num in arr: total += num return total arr = [1, 4, 6] result = sumArrayElements(arr) print(result)"},{"prompt":"Create a code parser in Python to identify variables in a program. Python script: name = 'Abhishek' age = 23 def printDetails(): print('My name is ' + name) print('I am ' + str(age) + ' years old') printDetails()","completion":"import ast def parse_variables(source_code): tree = ast.parse(source_code) variable_names = [] for node in ast.walk(tree): if isinstance(node, ast.Assign): variable_names.append(node.targets[0].id) return variable_names if __name__ == '__main__': source_code = \\"name = 'Abhishek'nage = 23nndef printDetails():n print('My name is ' + name)n print('I am ' + str(age) + ' years old')nnprintDetails()\\" variable_names = parse_variables(source_code) print(variable_names)"},{"prompt":"Generate a Python program that finds the most common words in a given text Python is an interpreted, highlevel, generalpurpose programming language. Created by Guido van Rossum and first released in 1991, Python design philosophy emphasizes code readability with its notable use of significant whitespace","completion":"import re import collections text = \\"Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python design philosophy emphasizes code readability with its notable use of significant whitespace\\" words = re.findall(r'w+', text.lower()) counter = collections.Counter(words) most_common = counter.most_common() print(\\"Most common words in the text: \\") for word, count in most_common: print(word, \\":\\", count)"},{"prompt":"Rewrite the following bash script to Python. #!/bin/bash echo Enter a number: read num fact=1 for((i=num;i>=1;i)) do fact=((fact * i)) done echo Factorial is fact","completion":"print(\\"Enter a number: \\") num = int(input()) fact = 1 for i in range(num, 0, -1): fact *= i print(\\"Factorial is\\", fact)"},{"prompt":"Can you write a Python function to determine if a supplied number is prime? num=20","completion":"def is_prime(num): \\"\\"\\"Check if the given number is prime. Args: num (int): A number to check Returns: bool: True if num is prime, False otherwise. \\"\\"\\" if num < 2: return False for i in range(2, num): if (num % i) == 0: return False return True num = 20 result = is_prime(num) print(f\\"Is {num} prime? {result}\\")"},{"prompt":"Given a list of strings, write a Python program to classify each string in two categories, short and long, based on their length.","completion":"def classify_strings(strings): result = {\\"short\\": [], \\"long\\": []} for string in strings: if len(string) < 10: result[\\"short\\"].append(string) else: result[\\"long\\"].append(string) return result"},{"prompt":"Design a Python algorithm to determine if a given number x is a prime number.","completion":"def is_prime(x): if x < 2: return False for i in range(2, int(x ** 0.5) + 1): if x % i == 0: return False return True"},{"prompt":"Generate a Python program that can convert temperature from Fahrenheit to Celsius. Not applicable","completion":"def fahrenheit_to_celsius(F): # convert Fahrenheit to Celsius C = (F - 32) * 5.0/9.0 return C F = 78.8 C = fahrenheit_to_celsius(F) print('%0.1f degree Fahrenheit is equal to %0.1f degree Celsius' %(F,C))"},{"prompt":"Write a function in Python that takes two strings as input and return true if one is a rotation of the other. listen,enlist","completion":"def is_rotation(s1, s2): # edge case check if len(s1) != len(s2): return False # concatenate s2 to itself concat_s2 = s2 + s2 #search s1 in concat_s2 return s1 in concat_s2"},{"prompt":"Develop an AI chatbot using Python and TensorFlow which interacts with the user to provide userspecific recommendations. Not applicable","completion":"# Import the necessary packages import tensorflow as tf import numpy as np import pandas as pd import random # Initialize the neural network model = tf.keras.Sequential([ tf.keras.layers.Dense(8, input_shape=(8,), activation='relu'), tf.keras.layers.Dense(8, activation='relu'), tf.keras.layers.Dense(1, activation='sigmoid') ]) # Compile the model model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) # Load the dataset x_data = pd.read_csv('data.csv') # Train the model model.fit(x_data, epochs=10) # Start a conversation while True: user_input = input(\\"User:\\") if user_input == \\"Goodbye\\": break else: # Generate a random response response_index = random.randint(0, len(responses) - 1) bot_response = responses[response_index] # Use the model to predict the user response to the bot's message prediction = model.predict([[user_input]]) # If prediction is high, generate a recommendation if prediction[0][0] > 0.5: recommendation = generate_recommendation() bot_response = recommendation print(\\"Bot:\\", bot_response)"},{"prompt":"Create a Python program to sort a list of tuples according to the third element in the tuple. [(21, ABC, 33), (9, XYZ, 88), (67, MNO, 37)]","completion":"def sort_tuple_list(tuple_list): sorted_tuple_list = sorted(tuple_list, key=lambda x: x[2]) print(sorted_tuple_list) tuple_list = [(21, \\"ABC\\", 33), (9, \\"XYZ\\", 88), (67, \\"MNO\\", 37)] sort_tuple_list(tuple_list)"},{"prompt":"Design an algorithm in Python for finding the longest string in an input. ['cat', 'dog', 'elephant']","completion":"def longest_string(strings): longest_len = 0 longest_str = '' for s in strings: str_len = len(s) if str_len > longest_len: longest_str = s longest_len = str_len return longest_str strings = ['cat', 'dog', 'elephant'] longest_str = longest_string(strings) print(longest_str)"},{"prompt":"Write a Python script that takes a given number and returns a string representation of the number in words. 123","completion":"def num_to_word(num): switcher = { 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten', 11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen', 19: 'nineteen', 20: 'twenty' } if num < 20: return switcher.get(num, 'under twenty') elif num < 100: tens = num // 10 remainder = num % 10 return switcher.get(tens, 'under one hundred') + ' ' + switcher.get(remainder, '') else: hundreds = num // 100 remainder = num % 100 return switcher.get(hundreds, 'over one hundred') + ' hundred ' + num_to_word(remainder) print(num_to_word(123)) # Output: one hundred twenty three"},{"prompt":"Design a class in Python that calculates the mean, median, and mode of a group of numbers.","completion":"class MeanMedianModeCalculator: # Function to calculate the mean def calculate_mean(self, numbers): return sum(numbers) / len(numbers) # Function to calculate the median def calculate_median(self, numbers): numbers.sort() mid_point = int(len(numbers) / 2) if len(numbers) % 2 == 0: return (numbers[mid_point - 1] + numbers[mid_point]) / 2 else: return numbers[mid_point] # Function to calculate the mode def calculate_mode(self, numbers): max_count = 0 max_num = 0 count_dictionary = {} for number in numbers: if number in count_dictionary.keys(): count_dictionary[number] += 1 else: count_dictionary[number] = 1 if count_dictionary[number] > max_count: max_count = count_dictionary[number] max_num = number return max_num"},{"prompt":"Create a Python function that will optimize a given set of data using the Hill Climbing Algorithm. data = [6, 2, 5, 9, 8, 4]","completion":"def hill_climbing(data): # Initialize the best solution to the input solution best_solution = data best_score = evaluate(data) improvement = True # While there is an improvement while improvement: # Get the indices of the two nodes to swap a, b = get_swapping_indices(best_solution) # Create a new solution by swapping the two nodes new_solution = best_solution.copy() new_solution[a], new_solution[b] = new_solution[b], new_solution[a] # Evaluate the new solution new_score = evaluate(new_solution) # If it is better than the best solution if new_score > best_score: # Update the best solution and score best_solution = new_solution best_score = new_score # Otherwise, we cannot improve further else: improvement = False # Return the best solution return best_solution def evaluate(solution): # Calculate the total distance travelled total_distance = 0 for i in range(len(solution)): total_distance += abs(solution[i] - solution[(i+1) % len(solution)]) # Return the total distance return total_distance def get_swapping_indices(solution): # Choose two random indices a = random.randint(0, len(solution) - 1) b = random.randint(0, len(solution) - 1) # Make sure they are different while a == b: b = random.randint(0, len(solution) - 1) # Return the indices return a, b"},{"prompt":"Create a python code to make predictions given some data. A dataset contains two features and their respective labels.","completion":"import numpy as np import pandas as pd from sklearn.model_selection import train_test_split from sklearn.linear_model import LogisticRegression # Read the dataset data = pd.read_csv('data.csv') X = data.iloc[:, [0,1]] y = data.iloc[:, 2] # Split the dataset into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0) # Create an instance of Logistic Regression model classifier = LogisticRegression() # Fit the model on the training data classifier.fit(X_train, y_train) # Make predictions using the test data y_pred = classifier.predict(X_test)"},{"prompt":"Create a Python program to normalize a list of numbers so that the sum of the numbers add up to 1. [2, 5, 8, 9, 12, 25]","completion":"import numpy as np def normalize_list(lst): lst = np.array(lst) normalized = lst / lst.sum() return normalized lst = [2, 5, 8, 9, 12, 25] normalized_list = normalize_list(lst) print(normalized_list)"},{"prompt":"Write an algorithm to generate an Lsystem fractal.","completion":"#This code uses Python Turtle library to create Fractal Design import turtle #define the base fractal baseFractal=\\"FX\\" #variable lookup table lookupTable={\\"X\\":\\"X+YF+\\", \\"Y\\":\\"-FX-Y\\"} #define the number of levels of recursion levelsOfRecursion=7 #this function recursively creates the fractal def drawFractal(cmd, levelsOfRecursion): for command in cmd: #check if its a F,X or Y command if(command==\\"F\\"): turtle.forward(100/(levelsOfRecursion)) elif command==\\"X\\" or command==\\"Y\\": #create newCommand by looking up the lookup table newCmd=lookupTable[command] #draw the replacement drawFractal(newCmd, levelsOfRecursion-1) elif command==\\"+\\": #turn left turtle.left(90) elif command==\\"-\\": #turn right turtle.right(90) #initialize the Turtle turtle.setup(500,500) turtle.penup() turtle.goto(-150,150) turtle.pendown() turtle.speed(100) #call the fractal drawing function drawFractal(baseFractal, levelsOfRecursion) #hold the screen turtle.exitonclick()"},{"prompt":"Optimize the following code in Python by improving its complexity. def my_function(input_array): output_array = [] for elem in input_array: if elem not in output_array: output_array.append(elem) return output_array","completion":"def my_function(input_array): output_array = set() return output_array.union(input_array)"},{"prompt":"Produce a Python program to fill missing values in a given column using a nearest neighbor approach. Table âusersâ ++++ | username | first_name | age| ++++ | user1 | Sarah | 18 | | user2 | NULL |NULL| ++++","completion":"import pandas as pd import numpy as np def fill_missing_values(df, colname): # get a list of all the users in the dataframe users = df['username'].values.tolist() for i, user in enumerate(users): if df[colname].isnull()[i] == True: closest_neighbors = find_closest_neighbors(df, user, 3) df[colname][i] = np.mean([df[colname][j] for j in closest_neighbors]) return df def find_closest_neighbors(df, user, k): closest_neighbors = [] user_age = df[df.username == user].age.values[0] for v in df.index: if df.username[v] != user and len(closest_neighbors) < k: # compute the Euclidean distance dist = np.sqrt(np.abs(user_age - df.age[v])**2) closest_neighbors.append((v, dist)) closest_neighbors.sort(key=lambda x: x[1]) return [neighbor[0] for neighbor in closest_neighbors]"},{"prompt":"Use python to create a web API that stores user information in a database.","completion":"import flask import mysql.connector app = flask.Flask(__name__) mydb = mysql.connector.connect( host = \\"localhost\\", user = \\"yourusername\\", passwd = \\"yourpassword\\" ) @app.route('/users', methods=['GET', 'POST', 'PUT', 'DELETE']) def users(): if request.method == 'GET': # return all user records cursor = mydb.cursor() query = \\"SELECT * FROM users\\" cursor.execute(query) results = cursor.fetchall() return jsonify(results) if request.method == 'POST': # add a new user record data = request.get_json() sql_query = \\"INSERT INTO users (name, age, email\\") VALUES (%s, %s, %s)\\" val = (data['name'], data['age'], data['email']) cursor.execute(sql_query, val) mydb.commit() return jsonify({'message': 'user added successfully'}) if request.method == 'PUT': # edit an existing user record data = request.get_json() sql_query = \\"UPDATE users SET name = %s, age = %s, email = %s WHERE id = %s\\" val = (data['name'], data['age'], data['email'], data['id']) cursor.execute(sql_query, val) mydb.commit() return jsonify({'message': 'user record updated successfully'}) if request.method == 'DELETE': # delete a user record data = request.get_json() sql_query = \\"DELETE FROM users WHERE id = %s\\" val = (data['id'],) cursor.execute(sql_query, val) mydb.commit() return jsonify({'message': 'user record deleted successfully'})"},{"prompt":"Create a socket client in Python that can connect to a local web server.","completion":"import socket # Create a socket object s = socket.socket() # Connect to local host host = '127.0.0.1' port = 8888 s.connect((host, port)) # Receive data from server data = s.recv(1024) print(data) # Close the socket connection s.close()"},{"prompt":"Optimize a Python program using multiprocessing. A program to find all prime numbers up to a given number n.","completion":"from multiprocessing import Pool import math def is_prime(n): if n <= 1: return False for i in range(2, int(math.sqrt(n)) + 1): if n % i == 0: return False return True def find_prime_numbers(n): primes = [] with Pool(processes=4) as pool: primes = list(pool.map(is_prime, range(2, n))) return primes"},{"prompt":"Write a Python function to generate a dictionary from two given lists. The keys in the dictionary are elements in the first list and the corresponding elements in the second list are the values of the dictionary. list1 = [a, b, c, d] list2 = [1, 2, 3, 4]","completion":"def dictfromlists(l1, l2): dict = {} for i in range(len(l1)): dict[l1[i]] = l2[i] return dict list1 = [\\"a\\", \\"b\\", \\"c\\", \\"d\\"] list2 = [1, 2, 3, 4] my_dict = dictfromlists(list1, list2) print(my_dict) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}"},{"prompt":"w do I create a random password in Python?","completion":"import random import string def generate_pass(stringLength=8): letters = string.ascii_lowercase return ''.join(random.choice(letters) for i in range(stringLength)) password = generate_pass() print(password)"},{"prompt":"Using the provided pseudocode, write a program in Python that checks if a given number is a prime number.","completion":"def is_prime(num): if num <= 1: return False for i in range(2, num): if num % i == 0: return False return True num = 7 result = is_prime(num) print(result)"},{"prompt":"Devise a python code which will generate a new list with each element of the list squared. data = [2, 3, 5, 6, 20, 9]","completion":"def square_list(arr): result = [num**2 for num in arr] return result"},{"prompt":"Translate this Python program into a JavaScript program. # Python code def hello_name(name): return Hello + name + !","completion":"function hello_name(name) { return \\"Hello \\" + name + \\"!\\"; }"},{"prompt":"Fix the syntax error in the provided Python function. def add_numbers(x, y) return x + y","completion":"def add_numbers(x, y): return x + y"},{"prompt":"Create a Python program to print all numbers which are divisible by 5 and 6 between 300 to 500.","completion":"for i in range(300, 501): if i % 5 == 0 and i % 6 == 0: print(i)"},{"prompt":"Create a basic Python script that executes a calculation of the total cost of a purchase (price * quantity). price = 10 quantity = 3","completion":"#calculate the total total_cost = price * quantity #print the total print(total_cost) # Output: 30"},{"prompt":"Generate a function in Python that joins all the strings in a given list with a provided separator.","completion":"def join_strings(strings, separator): result = \\"\\" for s in strings: result += s + separator return result[:-1] # Example list_of_strings = [\\"Python\\", \\"is\\", \\"a\\", \\"programming\\", \\"language\\"] result = join_strings(list_of_strings, \\" \\") print(result) # Output: Python is a programming language"},{"prompt":"Create a neural network in Python to identify handwritten digits from the MNIST dataset. Data Set MNIST.csv","completion":"# Load MNIST dataset import pandas as pd dataset = pd.read_csv(\\"MNIST.csv\\") # Divide the dataset into inputs and labels X = dataset.iloc[:, 1:784].values y = dataset.iloc[:, 0].values # Reshape the dataset X = X.reshape(len(X), 28, 28, 1) # Preprocessing X = X / 255.0 # Create the neural network from keras.models import Sequential from keras.layers import Convolution2D from keras.layers import MaxPooling2D from keras.layers import Flatten from keras.layers import Dense # Initialize the CNN classifier = Sequential() # Convolution Layer classifier.add(Convolution2D(32, 3, 3, input_shape = (28, 28, 1), activation = 'relu')) # Pooling classifier.add(MaxPooling2D(pool_size=(2, 2))) # Flattening classifier.add(Flatten()) # Fully Connected Layer classifier.add(Dense(output_dim = 128, activation = 'relu')) classifier.add(Dense(output_dim = 10, activation = 'sigmoid')) # Compiling the CNN classifier.compile(optimizer='adam',loss='sparse_categorical_crossentropy', metrics=['accuracy']) # Fit CNN to the training set classifier.fit(X, y, batch_size=32, epochs=3, verbose=1)"},{"prompt":"Develop a classification model in Python to predict customer churn.","completion":"# Import the necessary libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.linear_model import LogisticRegression # Load the dataset data = pd.read_csv('CustomerChurn.csv') # Split the dataset into training and testing set. X = data.drop('Churn', axis=1) y = data['Churn'] X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.20, random_state = 0) # Apply feature scaling sc = StandardScaler() X_train = sc.fit_transform(X_train) X_test = sc.transform(X_test) # Train the model classifier = LogisticRegression(random_state = 0) classifier.fit(X_train, y_train) # Test the model y_pred = classifier.predict(X_test)"},{"prompt":"Develop a function to make an HTTP request using python and store the response into a variable. https://www.example.com","completion":"import requests def http_request(url): response = requests.get(url) return response"},{"prompt":"Write a valid Python program that takes a list and outputs the sum of the elements. [1, 2, 3]","completion":"def sumListElements(arr): sum = 0 for num in arr: sum += num return sum result = sumListElements([1,2,3]) print(result)"},{"prompt":"Design a Python function to replace all occurrences of âxâ in a string with âyâ. str = xx123xx456xx, x = x, y = y","completion":"def replaceXWithY(str, x, y): while x in str: str = str.replace(x, y) return str result = replaceXWithY(\\"xx123xx456xx\\", \\"x\\", \\"y\\") print(result)"},{"prompt":"Write a Python code that checks for two strings to see if they are anagrams. listen, silent","completion":"def is_anagram(str1, str2): str1 = str1.replace(\\" \\", \\"\\").lower() str2 = str2.replace(\\" \\", \\"\\").lower() if len(str1) != len(str2): return False count = {} for letter in str1: if letter in count: count[letter] += 1 else: count[letter] = 1 for letter in str2: if letter in count: count[letter] -= 1 else: count[letter] = 1 for countval in count.values(): if countval != 0: return False return True is_anagram(\\"listen\\", \\"silent\\") # Output: True"},{"prompt":"Construct an algorithm in Python that takes an array of numbers and removes all duplicates while maintaining the original order of the array. [1, 3, 2, 1, 5, 4, 8, 6, 7, 5]","completion":"def remove_duplicates(arr): seen = set() seen_add = seen.add return [x for x in arr if not (x in seen or seen_add(x))] arr = [1, 3, 2, 1, 5, 4, 8, 6, 7, 5] result = remove_duplicates(arr) print(result) # Output: [1, 3, 2, 5, 4, 8, 6, 7]"},{"prompt":"Rewrite the following function in Python to use recursion instead of a loop def factorial_iterative(n): factorial = 1 while n > 1: factorial = factorial * n n = 1 return factorial","completion":"def factorial_recursive(n): # Base case: # n is 1, return 1 if n == 1: return 1 # Recursive case: # return n * (n-1) return n * factorial_recursive(n - 1) # Test print(factorial_recursive(5))"},{"prompt":"Create a Python function takes a string and an integer and returns the reversed string with the first letter of each word capitalized String: the quick brown fox Integer: 3","completion":"def reverse_capitalize(string, n): string_list = string.split() reverse_list = string_list[-n:] + string_list[:-n] new_string = \\" \\".join(reverse_list) return new_string.title() string = \\"the quick brown fox\\" n = 3 print(reverse_capitalize(string, n))"},{"prompt":"Create a web scraping program in Python to extract data from a given website about a given subject. The subject is stocks, and the website is www.example.com.","completion":"import requests from bs4 import BeautifulSoup # get the html from the website url = \\"https://www.example.com/stocks\\" page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') # find all table rows table_rows = soup.find_all('tr') # iterate through each table row for row in table_rows: # get the table data stock_data = row.find_all('td') # extract the data from each table data element stock_symbol = stock_data[0].text stock_name = stock_data[1].text stock_price = stock_data[2].text # Print the data print(\\"Stock Symbol:\\", stock_symbol) print(\\"Stock Name:\\", stock_name) print(\\"Stock Price:\\", stock_price)"},{"prompt":"Create a Python program to generate a given number of random numbers between a given range. int rangeStart = 10 int rangeEnd = 10 int numberOfNumbers = 20","completion":"# Python program to generate # n random numbers within a given range import random # Function to generate random numbers def random_numbers(rangeStart, rangeEnd, numberOfNumbers): res = [] for j in range(numberOfNumbers): res.append(random.randint(rangeStart, rangeEnd)) return res # Driver Code rangeStart = -10 rangeEnd = 10 numberOfNumbers = 20 print(random_numbers(rangeStart, rangeEnd, numberOfNumbers))"},{"prompt":"Create a function in Python to remove all characters which are not alphanumeric from a given string. text = This is a tring with #ymbols","completion":"def remove_nonalphanum(text): new_string = \\"\\" for char in text: if char.isalnum(): new_string += char return new_string cleaned_string = remove_nonalphanum(text) print(cleaned_string) #prints \\"ThisisaStringwithymbols\\""},{"prompt":"Create a Python class named Student that stores a name and ID number.","completion":"class Student: def __init__(self, name, id_number): self.name = name self.id_number = id_number"},{"prompt":"Create a Python script to generate random passwords of length 8 characters.","completion":"import string import random def generatePassword(): characters = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(characters) for i in range(8)) return password print(generatePassword())"},{"prompt":"Create a basic artificial neural network (ANN) using the Keras library in Python. Not applicable","completion":"import keras from keras.models import Sequential from keras.layers import Dense #define the model model = Sequential() model.add(Dense(units=64, activation='relu', input_dim=50)) model.add(Dense(units=10, activation='softmax')) #compile the model model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy']) #train the model model.fit(x_train, y_train, epochs=5, batch_size=32) #evaluate the model loss_and_metrics = model.evaluate(x_test, y_test, batch_size=128)"},{"prompt":"Design an algorithm in Python to detect duplicate elements in an array. [1, 2, 3, 4, 2]","completion":"def find_duplicates(lst): seen = set() duplicates = [] for item in lst: if item in seen: duplicates.append(item) else: seen.add(item) return duplicates"},{"prompt":"Generate a program in Python that classifies a given example as either a positive or negative sentiment. Example: The film was terrible","completion":"import nltk from nltk.sentiment.vader import SentimentIntensityAnalyzer def classify_sentiment(text): analyzer = SentimentIntensityAnalyzer() scores = analyzer.polarity_scores(text) if scores['compound'] > 0: return 'positive' elif scores['compound'] == 0: return 'neutral' else: return 'negative' print(classify_sentiment('The film was terrible')) # negative"},{"prompt":"Write a loop in Python to display the following pattern Noinpu","completion":"for i in range(1, 6): for j in range(i): print(\\"*\\", end=\\" \\") print()"},{"prompt":"Create a Python function that takes a Python dictionary and returns the unique values contained in the dictionary. example_dict = { 'apple': 1, 'banana': 2, 'mango': 1 }","completion":"def unique_values(example_dict): return list(set(example_dict.values()))"},{"prompt":"Classify the following Python code as syntactically correct or incorrect def add(): a=1 b=2 c=a+b print(c)","completion":"incorrect"},{"prompt":"Construct a Python program that calculates a person's BMI given their height and weight. Weight: 70 kg Height: 1.80 m","completion":"def calculate_bmi(weight, height): bmi = weight / (height**2) return bmi weight = 70 height = 1.80 bmi = calculate_bmi(weight, height) print(\\"BMI: \\" + str(bmi))"},{"prompt":"Generate a Python script that takes in two integers and prints out the greatest common divisor (GCD) between those two numbers. Not applicable","completion":"# define a function to calculate the GCD of two integers def gcd(a, b): if a == 0: return b return gcd(b%a, a) # take input from user num1 = int(input(\\"Enter the first number: \\")) num2 = int(input(\\"Enter the second number: \\")) # print the GCD print(\\"The GCD of \\" + str(num1) + \\" and \\" + str(num2) + \\" is: \\" + str(gcd(num1, num2)))"},{"prompt":"w would you construct a loop in Python to iterate over a list?","completion":"In Python, you can use a \\"for\\" loop to iterate over a list. For example: my_list = [1, 2, 3, 4, 5] for x in my_list: print(x) This will print each of the elements in the list on a new line."},{"prompt":"Rewrite the following Java Program using Python. public class Greeting { public static void main(String[] args){ System.out.println(Hello World!); } }","completion":"print(\\"Hello World!\\")"},{"prompt":"Create an algorithm in Python to calculate the total amount of energy generated per hour by a wind turbine given the turbine's size and speed. size = 100; speed = 10;","completion":"\\"\\"\\" Program to calculate the total amount of energy generated per hour by a wind turbine \\"\\"\\" # Function to calculate the total energy generated def calculate_energy(size, speed): power_rating = size * speed**3 # calculate the power rating return power_rating * 0.5 # return the total energy generated in kWh if __name__ == \\"__main__\\": size = 100 speed = 10 result = calculate_energy(size, speed) print(\\"Total energy generated by the wind turbine in kWh: \\" + str(result))"},{"prompt":"Develop a python program which can generate a random array of integers","completion":"import random def get_random_array(max_size): arr = [] for _ in range(random.randint(0, max_size)): arr.append(random.randint(0, max_size)) return arr"},{"prompt":"Design a Python program that prints a sentence every 10 seconds. Hello World","completion":"import time sentence = \\"Hello World\\" while True: print(sentence) time.sleep(10)"},{"prompt":"Utilize a for loop in Python to print all numbers from 0 to 9","completion":"for i in range(10): print(i)"},{"prompt":"Construct an algorithm in Python that takes a list of numbers and returns the mean. [1, 2, 3, 4]","completion":"def mean(nums): total = 0 for num in nums: total += num return total / len(nums)"},{"prompt":"Translate the following pseudocode into Python For each element in the array, if it is an even number, add one to a counter","completion":"def count_even(arr): count = 0 for x in arr: if x % 2 == 0: count += 1 return count"},{"prompt":"Generate a Python program to find the minimum number of operations required to convert a given number into 1. 18","completion":"def minOperations(n): if n==0: return 0 elif n==1: return 1 x = n for i in range(2, n): if i>x: break if n%i == 0: x = minOperations(int(n/i)) + i return x result = minOperations(18) print(result)"},{"prompt":"Create a program in Python to print the sum of all the multiples of 3 and 5 below 1000.","completion":"sum = 0 for i in range(1000): if (i % 3 == 0 or i % 5 == 0): sum = sum + i print(sum)"},{"prompt":"Write a Python program to create a function that receives a list of strings and returns a new list with the strings sorted according to their length. [Python, is, a, programming, language]","completion":"def sort_list_by_length(list_of_strings): return sorted(list_of_strings, key=len) list_of_strings = [\\"Python\\", \\"is\\", \\"a\\", \\"programming\\", \\"language\\"] sorted_list = sort_list_by_length(list_of_strings) print(sorted_list)"},{"prompt":"Create a function in Python which takes a list of integers as input and returns a sorted list. [3, 2, 5, 1, 4]","completion":"def sort_list(list): list.sort() return list sorted_list = sort_list([3, 2, 5, 1, 4]) print(sorted_list) # output: [1, 2, 3, 4, 5]"},{"prompt":"Write a Python function to find the largest number in a given list.","completion":"def find_largest_number(numbers): largest = numbers[0] for number in numbers: if number > largest: largest = number return largest"},{"prompt":"Enhance an existing python program to include a function def hello(): print(Hello world!)","completion":"def hello(): print(\\"Hello world!\\") def goodbye(): print(\\"Goodbye!\\") def greetings(): hello() goodbye() greetings()"},{"prompt":"Write a Python program to generate the Fibonacci series between 0 to 50. Not applicable","completion":"def fibonacci(n): a, b = 0, 1 for i in range(n): a, b = b, a + b return a for i in range(51): print(fibonacci(i))"},{"prompt":"Generate a Python program to select the age of the oldest person from an array of objects. const arr = [ {name: 'John', age: 19}, {name: 'Mark', age: 22}, {name: 'Mary', age: 17} ];","completion":"const arr = [ {name: 'John', age: 19}, {name: 'Mark', age: 22}, {name: 'Mary', age: 17} ]; let max_age = arr[0].age; arr.forEach( (item) => { if(item.age > max_age){ max_age = item.age; } }); console.log('The oldest person is ' + max_age + ' years old.'); // Outputs: The oldest person is 22 years old."},{"prompt":"Generate 1000 random numbers between 0 and 1 using Python.","completion":"import random random_numbers = [] for _ in range(1000): random_numbers.append(random.random()) print(random_numbers)"},{"prompt":"Given an array of integers and a target number, write a Python function to return the two numbers from the array that add up to the target number. [1, 2, 3, 4, 5], 9","completion":"def two_sum(arr, target): for i in range(0, len(arr)-1): for j in range(i + 1, len(arr)): if arr[i] + arr[j] == target: return [arr[i], arr[j]]"},{"prompt":"Create a python program to evaluate an expression string and return the result. 10 + 2 * 5 3","completion":"def calculate(expression): stack = [] for i in expression: if i.isdigit(): stack.append(int(i)) else: val1 = stack.pop() val2 = stack.pop() if i == '+': result = val2 + val1 elif i == '-': result = val2 - val1 elif i == '*': result = val2 * val1 else: result = val2/val1 stack.append(result) return stack.pop() print(calculate(\\"10 + 2 * 5 - 3\\")) # 19"},{"prompt":"Create a random forest model in Python from the given data set. import pandas as pd data = { 'Gender': ['male', 'female', 'male', 'female'], 'Income': [30000, 50000, 40000, 60000], 'Label': [1, 0, 0, 1] } df = pd.DataFrame(data)","completion":"from sklearn.ensemble import RandomForestClassifier features = ['Gender', 'Income'] X = df[features] y = df['Label'] clf = RandomForestClassifier(n_estimators=100, max_depth=2, random_state=0) clf.fit(X, y)"},{"prompt":"mplement the knapsack problem in Python. weights = [2, 3, 5, 1, 6] values = [3, 8, 7, 2, 8] maxWeight = 6","completion":"def knapsack(weights, values, maxWeight): if len(weights) == 0 or len(values) == 0 or len(weights) != len(values): return 0 if maxWeight == 0: return 0 if len(weights) == 1: if weights[0] <= maxWeight: return values[0] else: return 0 if weights[0] > maxWeight: return knapsack(weights[1:], values[1:], maxWeight) return max(values[0] + knapsack(weights[1:], values[1:], maxWeight - weights[0]), knapsack(weights[1:], values[1:], maxWeight)) # Test weights = [2, 3, 5, 1, 6] values = [3, 8, 7, 2, 8] maxWeight = 6 knapsack(weights, values, maxWeight) # Output: 15"},{"prompt":"Write a Python program to calculate the total cost of buying n items. 4 items with prices [10, 15, 20, 25]","completion":"def calculate_total_cost(item_prices, num_items): total_cost = 0 for i in range(num_items): total_cost += item_prices[i] return total_cost if __name__ == '__main__': total = calculate_total_cost([10, 15, 20, 25], 4) print(\\"Total cost of buying 4 items:\\", total)"},{"prompt":"Create a Python program to calculate the GC content of a DNA sequence. ACTGCTAGCTACTAGC","completion":"dna_sequence = 'ACTGCTAGCTACTAGC' gc_count = 0 for base in dna_sequence: if base == 'G' or base == 'C': gc_count += 1 gc_percentage = gc_count / len(dna_sequence) * 100 print(gc_percentage)"},{"prompt":"Compare two arrays of Python objects and return True if all objects in arrayA are also in arrayB. arrayA = ['a', 'b', 'c', 'd'] arrayB = ['c', 'b', 'a', 'd', 'e']","completion":"def compare_arrays(arrA, arrB): for i in arrA: if i not in arrB: return False return True"},{"prompt":"Create a class in Python that can be used to store data about a movie.","completion":"class Movie: def __init__(self, title, year, rating): self.title = title self.year = year self.rating = rating def print_data(self): print('The movie %s released in %d had a rating of %.1f.' % (self.title, self.year, self.rating))"},{"prompt":"Write a Python program to parse a set of given commaseparated numbers in a string. string = 1,2,3,4,5,6","completion":"# Parsing the string numbers = [int(num) for num in string.split(',')] print(numbers)"},{"prompt":"Create a Python program to find all the solutions to a given equation. ax^2 + bx + c = 0","completion":"import cmath a = int(input(\\"Enter a: \\")) b = int(input(\\"Enter b: \\")) c = int(input(\\"Enter c: \\")) #calculate the discriminant d = (b**2) - (4*a*c) # find two solutions sol1 = (-b-cmath.sqrt(d))/(2*a) sol2 = (-b+cmath.sqrt(d))/(2*a) print('The solutions are {0} and {1}'.format(sol1,sol2))"},{"prompt":"Create a class in Python to store customer information.","completion":"class Customer: def __init__(self, name, email, phone): self.name = name self.email = email self.phone = phone"},{"prompt":"Write an Naive Bayes classifier in Python for categorizing a customerâs gender given information about their shoe size and shirt size. male: shoe size = 9, shirt size = L female: shoe size = 6, shirt size = S","completion":"from sklearn.naive_bayes import GaussianNB # Create a Gaussian Classifier model = GaussianNB() # Train the model using the training sets model.fit([[9, 'L'], [6, 'S']], [\\"male\\", \\"female\\"]) # Predict Output predicted= model.predict([[9, 'L']]) print(predicted) # output: [\\"male\\"]"},{"prompt":"Write a function for a Python web application that handles authentication. The function should verify user credentials and generate an access token. Not applicable","completion":"import uuid from datetime import datetime, timedelta def authenticate(username, password): # Validate user credentials # Generate an access token access_token = uuid.uuid4().hex expires = datetime.utcnow() + timedelta(minutes=60) return access_token, expires # Usage access_token, expires = authenticate('username', 'password')"},{"prompt":"Create a graphing program using the tkinter library in Python.","completion":"import tkinter as tk # create the main GUI window window = tk.Tk() window.title(\\"Python Graphing Program\\") window.geometry(\\"500x500\\") # create a Canvas object c = tk.Canvas(window, width=480, height=480) c.pack() # create the X and Y axes c.create_line(10, 240, 470, 240) c.create_line(240, 10, 240, 470) # create the graph ..."},{"prompt":"Generate a Python function that takes an array of numbers and returns the sum of all the odd numbers in the array. [2, 4, 5, 6]","completion":"def findOddSums(arr): sum = 0 for num in arr: if num % 2 != 0: sum += num return sum odd_sums = findOddSums([2, 4, 5, 6]) print(odd_sums)"},{"prompt":"Create a Python module to encrypt a given string using the AES symmetric cipher. My Secret Message","completion":"from Cryptodome.Cipher import AES def encrypt(message, key): # Block size should match the chosen AES mode block_size = 16 padding_length = block_size - len(message) % block_size # Padding must always be present per the AES spec if padding_length: padded_message = message + (chr(padding_length) * padding_length) else: padded_message = message # CBC Mode always works with 16 byte blocks iv = b'x16x87rxb9x1bx8bhox04ux16xdbxbcx98x87xb7Yxc0' # Create cipher and encrypt data cipher = AES.new(key, AES.MODE_CBC, iv) encrypted_message = cipher.encrypt(padded_message.encode('utf-8')) return encrypted_message key = b'#1x84xdcx06x0cx12xe8x0cxd7 x9dx03xd4*xdd[x85' encrypted_message = encrypt(\\"My Secret Message\\",key) print(encrypted_message) # b\\"Bxf5{5<xec~xf9xc9x8f_3x04x95x15'x90xd2xfcxd9x03xdcx1drx1b\\""},{"prompt":"Convert SVG markers to PNG files of different sizes.","completion":"#!/usr/bin/python from lxml import etree import gzip, re, copy, tempfile, subprocess, os SVG_NAMESPACE=\\"http://www.w3.org/2000/svg\\" INKSCAPE_NAMESPACE=\\"http://www.inkscape.org/namespaces/inkscape\\" _safe = re.compile(\\"^[A-Za-z]+\\") sizes=[64,32,16,8,4] tree = etree.parse(gzip.open(\\"Markers.svgz\\")) labels = etree.ETXPath(\\"//{%s}g/@{%s}label\\" % (SVG_NAMESPACE, INKSCAPE_NAMESPACE))(tree) for l in labels: if not _safe.match(l): raise Exception(\\"Label not safe: \\"+l) ctree = copy.deepcopy(tree) layers = etree.ETXPath(\\"//{%s}g[./@{%s}label]\\" % (SVG_NAMESPACE, INKSCAPE_NAMESPACE))(ctree) for layer in layers: l2 = layer.get(\\"{%s}label\\" % INKSCAPE_NAMESPACE) if l2 == l: layer.attrib[\\"style\\"]=\\"\\" else: layer.attrib[\\"style\\"]=\\"display:none\\" f = tempfile.NamedTemporaryFile(delete=False) f.write(etree.tostring(ctree)) f.close() cmd=[\\"rsvg-convert\\", \\"-w\\", \\"62\\", \\"-h\\", \\"62\\", \\"-o\\", \\"/tmp/%s.png\\" % l, f.name] print \\"Running\\", \\" \\".join(cmd) subprocess.call(cmd) os.unlink(f.name) for size in sizes: cmd = [\\"montage\\"] for l in labels: cmd.append(\\"/tmp/%s.png\\" % l) cmd.extend([\\"-geometry\\", \\"%sx%s+1+1\\" % (size-2, size-2), \\"-background\\", \\"none\\", \\"PNG32:markers-%s.png\\" % size ]) print \\"Running\\", \\" \\".join(cmd) subprocess.call(cmd) for l in labels: os.unlink(\\"/tmp/%s.png\\" % l)"},{"prompt":"Construct a Python program that finds the maximum number in a given sequence of integers. 7, 3, 12, 9, 4","completion":"sequence = [7, 3, 12, 9, 4] maxnum = 0 for num in sequence: if num > maxnum: maxnum = num print(maxnum) # Output: 12"},{"prompt":"Write a Python program to calculate a PageRank score for a given set of web pages. webpages = [ { url: page1.html, nodes: [ page2.html, page4.html ] }, { url: page2.html, nodes: [ page3.html, page4.html, page5.html ] }, { url: page3.html, nodes: [ page1.html, page4.html ] }, { url: page4.html, nodes: [ page2.html, page3.html, page5.html ] }, { url: page5.html, nodes: [ page4.html ] } ]","completion":"# Define the pages pages = {} for page in webpages: pages[page[\\"url\\"]] = page[\\"nodes\\"] # Calculate page rank d = 0.85 # damping factor N = len(pages) # number of webpages r = [1/N] * N # page rank values (initialized to 1/N) # iterate until convergence while True: new_r = [0] * N for i, node in enumerate(pages): for neighbor in pages[node]: new_r[i] += r[pages[node].index(neighbor)] / len(pages[neighbor]) new_r[i] *= d new_r[i] += (1 - d) / N if sum([abs(new_r[i] - r[i]) for i in range(N)]) < 0.001: break else: r = new_r # Print the results for url, page_rank in zip(pages.keys(), r): print(url, \\":\\", page_rank)"},{"prompt":"Create a python script that will take in a JSON string as input and output a copied version of the same string {name: John Doe, address: 123 Main Street}","completion":"import json jsonString = '{\\"name\\": \\"John Doe\\", \\"address\\": \\"123 Main Street\\"}' jsonObject = json.loads(jsonString) copiedString = json.dumps(jsonObject) print(copiedString)"},{"prompt":"Create a Python program which returns the difference between the two largest numbers in a given list [3, 8, 9, 6, 4, 10]","completion":"def maxDifference(arr): n = len(arr) max_diff = arr[1] - arr[0] for i in range(0, n): for j in range(i + 1, n): if (arr[j] - arr[i] > max_diff): max_diff = arr[j] - arr[i] return max_diff arr = [3, 8, 9, 6, 4, 10] print( maxDifference(arr))"},{"prompt":"Write a Python script to retrieve a title from a given URL. https://www.nytimes.com/2020/11/19/us/denverpoliceprotest.html","completion":"import requests url = 'https://www.nytimes.com/2020/11/19/us/denver-police-protest.html' response = requests.get(url) if response.status_code == 200: title = response.text.split(\\"<title>\\")[1].split(\\"</title>\\")[0] print(title)"},{"prompt":"Generate a Python program to print the elements of a given array in reverse order. arr = [3, 7, 2, 5]","completion":"def print_reverse(arr): for i in range(len(arr)-1, -1, -1): print(arr[i])"},{"prompt":"Create a Python program to predict whether the next day in a given stock market will have a positive or negative closing. A dataset containing a series of stock market closing prices, where each row is one day.","completion":"import pandas as pd import numpy as np from sklearn.ensemble import RandomForestClassifier from sklearn.model_selection import train_test_split # Load the data and split into train and test sets data = pd.read_csv('stock_data.csv') X = data.iloc[:, :-1].values y = data.iloc[:, -1].values X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) # Train the model model = RandomForestClassifier(n_estimators=100, random_state=0) model.fit(X_train, y_train) # Make a prediction for the test set y_pred = model.predict(X_test) print(y_pred)"},{"prompt":"Consider the pseudocode given below. Convert it into a working Python program.","completion":"def fibonacci_sequence(terms): first_num, second_num = 0, 1 fibonacci_sequence = [] for i in range(terms): next_term = first_num + second_num first_num, second_num = second_num, next_term fibonacci_sequence.append(next_term) return fibonacci_sequence nterms = 10 fibonacci_sequence = fibonacci_sequence(nterms) print(fibonacci_sequence)"},{"prompt":"Construct a decision tree classifier from given datasets in Python. Feature sets in the datasets are âAgeâ, âIncomeâ and âGenderâ and labels are âCreditâ.","completion":"from sklearn import tree import pandas as pd # Load the data df = pd.read_csv(\\"data.csv\\") # Define the features and labels features = [\\"Age\\", \\"Income\\", \\"Gender\\"] labels = [\\"Credit\\"] # Create a Decision Tree classifier clf = tree.DecisionTreeClassifier() # Train the model using the training sets clf.fit(df[features], df[labels]) # Make predictions using the testing set predictions = clf.predict(df[features])"},{"prompt":"Python, convert a list of characters into a 2D array. [a, b, c, d, e]","completion":"def convert_list_to_2d_array(l): # calculate the size of the 2d array n = int(len(l) ** 0.5) # create the 2d array matrix = [[None for i in range(n)] for j in range(n)] # populate the 2d array count = 0 for i in range(n): for j in range(n): matrix[i][j] = l[count] count += 1 return matrix print(convert_list_to_2d_array([\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"]))"},{"prompt":"Write a Python function to find the intersection between two given sets.","completion":"def intersection(set1, set2): return set1.intersection(set2)"},{"prompt":"Write a Python script to generate a valid Checksum number.","completion":"def calculate_checksum (data): checksum = 0 for char in data: checksum += ord(char) return checksum % 256"},{"prompt":"Fix the errors in the following python program to return the correct output. def foo(a, b): return a + b x = foo(2, 3) print(x)","completion":"def foo(a, b): return a + b x = foo(2, 3) print(x) # output is 5"},{"prompt":"Generate code in Python for a basic webscraper. The scraper should take in a URL, download the HTML, and extract the title, meta description, and all h1h6 tags. Sample URL","completion":"import requests import bs4 # set the url url = \\"Sample URL\\" # send a request response = requests.get(url) # get the response html = response.text # parse the response soup = bs4.BeautifulSoup(html, \\"html.parser\\") # extract the title title = soup.title.text # extract the meta description meta = soup.find('meta', attrs={'name': 'description'}) description = meta.get('content') # extract all h1-h6 tags heading_tags = \\"\\" for tag in soup.find_all(re.compile(\\"^h[1-6]\\")): heading_tags += tag.text print(\\"Title:\\", title) print(\\"Meta Description:\\", description) print(\\"Heading Tags:\\", heading_tags)"},{"prompt":"Create an API in Python using Flask that takes an input string and returns a list of synonyms and antonyms for the input string. Not applicable","completion":"from flask import Flask from flask_restful import Resource, Api from nltk.corpus import wordnet app = Flask(__name__) api = Api(app) class SynAntonyms(Resource): def get(self, word): syns = wordnet.synsets(word) synonyms = [] antonyms = [] for s in syns: for l in s.lemmas(): synonyms.append(l.name()) if l.antonyms(): antonyms.append(l.antonyms()[0].name()) return { 'synonyms': list(set(synonyms)), 'antonyms': list(set(antonyms)) } api.add_resource(SynAntonyms, '/synantonyms/<string:word>') if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Write a Python function that takes a list of numbers and prints out a list of their squares. [1, 2, 3]","completion":"def squares(arr): res = [] for i in arr: res.append(i**2) return res arr = [1, 2, 3] res = squares(arr) print(res)"},{"prompt":"Generate a random string of length 10 using the string library of Python.","completion":"import random import string def randomString(): letters = string.ascii_lowercase length = 10 return ''.join(random.choice(letters) for i in range(length))"},{"prompt":"Generate a lambda expression in Python that takes a list of numbers and returns the maximum value. [16, 25, 4, 12, 6]","completion":"max_value = lambda num_list: max(num_list)"},{"prompt":"Build a student grade calculator using Python, given the following grades and weights: Exam 1: 95%, Exam 2: 80%, Homework: 100%, weighting: Exam 1: 0.5, Exam 2: 0.3, Homework: 0.2 Exam 1: 95%, Exam 2: 80%, Homework: 100%, weighting: Exam 1: 0.5, Exam 2: 0.3, Homework: 0.2","completion":"def grade_calculator(exam1, exam2, hw): grade = (exam1 * 0.5) + (exam2 * 0.3) + (hw * 0.2) return grade grade = grade_calculator(95, 80, 100) print(grade) # 91.0"},{"prompt":"Create a basic graphical user interface in Python using tkinter. Not applicable","completion":"import tkinter as tk root = tk.Tk() frame = tk.Frame(root) frame.pack() button = tk.Button(frame, text=\\"Click Me!\\", fg=\\"blue\\", command=lambda: print(\\"Hello World!\\")) button.pack(side=tk.LEFT) close = tk.Button(frame, text=\\"Exit\\", fg=\\"red\\", command=quit) close.pack(side=tk.LEFT) root.mainloop()"},{"prompt":"Write a Python class myDict that implements a dictionary with two methods get() and set().","completion":"class myDict: def __init__(self): self.data = {} def get(self, key): return self.data[key] def set(self, key, value): self.data[key] = value def __repr__(self): return str(self.data)"},{"prompt":"Write a Python program to randomly generate a 5x5 matrix of integers between 1 and 10, and then find the sum of each row of the matrix. Not applicable","completion":"import random # Create a 5x5 matrix of random integers between 1-10 matrix = [[ random.randint(1,10) for _ in range(5)] for _ in range(5)] # Print the matrix for row in matrix: print(row) # Find the sum of each row row_sums = [sum(row) for row in matrix] # Print the row sums print(row_sums)"},{"prompt":"Create a method in Python to encrypt a given string using AES256.","completion":"import base64 from Crypto.Cipher import AES secret_key = \\"YourSecr3tEncrKey\\" def encodeAES(text): Key = base64.b64encode(secret_key.encode(\\"utf-8\\")) IV = 16 * 'x00' mode = AES.MODE_CBC encryptor = AES.new(Key, mode, IV=IV) text = text.encode(\\"utf-8\\") ciphertext = encryptor.encrypt(text) return base64.b64encode(ciphertext).decode(\\"utf-8\\")"},{"prompt":"Design a Python class that models a simple arithmetic calculator.","completion":"class Calculator: def __init__(self): pass def add(self, a, b): return a + b def subtract(self, a, b): return a - b def multiply(self, a, b): return a * b def divide(self, a, b): if b == 0: raise ValueError(\\"Cannot divide by zero.\\") else: return a/b"},{"prompt":"Write a function in Python to calculate the sum of all the values in a list of dictionaries using list comprehension. [ {'key1': 3, 'key2': 4}, {'key3': 10, 'key4': 16}, {'key5': 3, 'key6': 9} ]","completion":"def sum_values(list_of_dicts): return sum([v for d in list_of_dicts for v in d.values()])"},{"prompt":"Create a Python program to calculate the area of given shapes (triangle, square and rectangle). Not applicable","completion":"def calculate_area(shape, *args): if shape == 'triangle': base= args[0] height= args[1] return (0.5 * base * height) elif shape == 'square': side = args[0] return (side ** 2) elif shape == 'rectangle': length = args[0] breadth = args[1] return (length * breadth) elif shape == 'circle': radius = args[0] return (3.142 * radius * radius) else: return \\"Incorrect shape\\""},{"prompt":"Create a code snippet in Python that finds the longest common substring in two given strings.","completion":"def longest_common_substring(s1, s2): len1, len2 = len(s1), len(s2) table = [[0 for _ in range(len2+1)] for _ in range(len1+1)] #2-D array longest, x_longest = 0, 0 for x in range(1, len1+1): for y in range(1, len2+1): if s1[x-1] == s2[y-1]: table[x][y] = table[x-1][y-1] + 1 if table[x][y] > longest: longest = table[x][y] x_longest = x else: table[x][y] = 0 return s1[x_longest - longest: x_longest]"},{"prompt":"Optimize the given Python program to improve the performance. def is_prime(x): for i in range(2, x): if x % i == 0: return False return True numbers = [7, 9, 13, 27] for num in numbers: if is_prime(num): print(num,is prime number) else: print(num,is not a prime number)","completion":"def sieve_of_eratosthenes(n): sieve = [True] * (n + 1) sieve[0] = False sieve[1] = False for i in range(2, n + 1): if (sieve[i] == True): for j in range(2 * i, n + 1, i): sieve[j] = False return sieve numbers = [7, 9, 13, 27] sieve = sieve_of_eratosthenes(50) for num in numbers: if sieve[num]: print(num,\\"is prime number\\") else: print(num,\\"is not a prime number\\")"},{"prompt":"Convert this C++ program to Python. #include <iostream> int main() { int a, b; std::cin >> a >> b; std::cout << a + b << std::endl; return 0; }","completion":"a = int(input()) b = int(input()) print(a + b)"},{"prompt":"Create a FlowModMsgBuilder object with a participant and key. Use the add_flow_mod method to add a flow modification with mod_type, rule_type, priority, match, action, datapath, and cookie (optional). Use the delete_flow_mod method to delete a flow modification with mod_type, rule_type, cookie, and cookie_mask. Use the get_msg method to get the message with auth_info and flow_mods. Use the reset_flow_mod method to reset the flow modifications. The request body format should have auth_info with participant and key, and flow_mods with a list of flow modifications with cookie, mod_type, rule_type, priority, match, and action.","completion":"#!/usr/bin/env python # Author: # Rudiger Birkner (Networked Systems Group ETH Zurich) class FlowModMsgBuilder(object): def __init__(self, participant, key): self.participant = participant self.key = key self.flow_mods = [] def add_flow_mod(self, mod_type, rule_type, priority, match, action, datapath = None, cookie = None): if cookie is None: cookie = (len(self.flow_mods)+1, 65535) fm = { \\"cookie\\": cookie, \\"datapath\\": datapath, \\"mod_type\\": mod_type, \\"rule_type\\": rule_type, \\"priority\\": priority, \\"match\\": match, \\"action\\": action } self.flow_mods.append(fm) return cookie def delete_flow_mod(self, mod_type, rule_type, cookie, cookie_mask): fm = { \\"cookie\\": (cookie, cookie_mask), \\"mod_type\\": mod_type, \\"rule_type\\": rule_type, } self.flow_mods.append(fm) def get_msg(self): msg = { \\"auth_info\\": { \\"participant\\" : self.participant, \\"key\\" : self.key }, \\"flow_mods\\": self.flow_mods } return msg def reset_flow_mod(self): self.flow_mods = [] # request body format: # {\\"auth_info\\": { # \\"participant\\": 1, # \\"key\\": \\"xyz\\" # } # \\"flow_mods\\": [ # { \\"cookie\\": (1, 2**16-1), # \\"mod_type\\": \\"insert/remove\\", # \\"rule_type\\": \\"inbound/outbound/main\\", # \\"priority\\": 1, # \\"match\\" : { # \\"eth_type\\" : 0x0806, # \\"arp_tpa\\" : (\\"172.1.0.0\\", \\"255.255.255.0\\"), # \\"in_port\\" : 5, # \\"eth_dst\\" : \\"ff:ff:ff:ff:ff:ff\\", # \\"eth_src\\" : \\"80:23:ff:98:10:01\\", # \\"ipv4_src\\" : \\"192.168.1.1\\", # \\"ipv4_dst\\" : \\"192.168.1.2\\", # \\"tcp_src\\" : 80, # \\"tcp_dst\\" : 179, # \\"udp_src\\" : 23, # \\"udp_dst\\" : 22, # }, # \\"action\\" : { # \\"fwd\\": [\\"inbound\\"/\\"outbound\\"/\\"main-in\\"/main-out\\"], # \\"set_eth_src\\": \\"80:23:ff:98:10:01\\", # \\"set_eth_dst\\": (\\"00:00:00:00:00:01\\",\\"00:00:00:00:03:ff\\") # } # }, # { \\"cookie\\": (2, 2**16-1), # \\"mod_type\\": \\"insert/remove\\", # \\"rule_type\\": \\"inbound/outbound/main\\", # \\"match\\" : {\\"tcp_dst\\" : 80}, # \\"action\\" : {\\"fwd\\": [3]} # } # ...] # }"},{"prompt":"mplement a web server in Python to serve static HTML webpages.","completion":"from http.server import CGIHTTPRequestHandler, HTTPServer class MyHTTPServer(CGIHTTPRequestHandler): def do_GET(self): self.send_response(200) self.send_header('Content-type', 'text/html') self.end_headers() file = open('index.html', 'r') html = file.read() file.close() self.wfile.write(html.encode()) server = HTTPServer(('', 8080), MyHTTPServer) print(\\"Starting server at http://localhost:8080\\") server.serve_forever()"},{"prompt":"Create a Python function to take two lists and return a list with the elements added together. list_a = [1, 4, 5] list_b = [2, 3, 6]","completion":"def list_add(list_a, list_b): result = [] for i in range(len(list_a)): result.append(list_a[i] + list_b[i]) return result result = list_add(list_a, list_b) print(result)"},{"prompt":"Develop a function in Python to convert a given word into its Pig Latin form. Hello","completion":"def pig_latin(word): first_letter = word[0] # check if the word starts with a vowel if first_letter in \\"aeiou\\": latin_word = word + \\"ay\\" else: latin_word = word[1:] + first_letter + \\"ay\\" return latin_word"},{"prompt":"Create a Python script to match parts of speech of two given sentences. Sentence 1: She is the best player. Sentence 2: He is the worst player.","completion":"from nltk import word_tokenize, pos_tag def match_pos(sent1, sent2): sent1_tokens, sent2_tokens = word_tokenize(sent1), word_tokenize(sent2) sent1_pos, sent2_pos = pos_tag(sent1_tokens), pos_tag(sent2_tokens) matches = [] for i in range(min(len(sent1_pos),len(sent2_pos))): if sent1_pos[i][1] == sent2_pos[i][1]: matches.append(sent1_pos[i][0] + ':' + sent2_pos[i][0]) return matches sent1 = 'She is the best player.' sent2 = 'He is the worst player.' print(match_pos(sent1,sent2))"},{"prompt":"mplement a program in Python to detect the occurrence of a string in a given sentence. sentence: This is an example sentence string: example","completion":"def detectString(sentence, string): if string in sentence: return \\"String '{}' detected in the sentence\\".format(string) else: return \\"String '{}' not detected in the sentence\\".format(string) sentence = \\"This is an example sentence\\" string = \\"example\\" print(detectString(sentence, string))"},{"prompt":"Create a function in Python to calculate the total cost after applying a discount. The function should accept the original cost and the discount percentage as arguments. original cost = 100 discount percentage = 25","completion":"def calculate_discounted_cost(cost, discount_percentage): discounted_cost = cost - (cost * (discount_percentage/100)) return discounted_cost discounted_cost = calculate_discounted_cost(100, 25) print ('The discounted cost is: ', discounted_cost)"},{"prompt":"Build a Python program to tokenize a string into separate words. Hello, World!","completion":"def tokenize(string): words = string.split(\\" \\") return words tokenized_str = tokenize(\\"Hello, World!\\") print(tokenized_str)"},{"prompt":"Write a Python program to calculate the Gini coefficient of the following data set. data = [14, 17, 20, 21, 32]","completion":"def gini(data): n = len(data) data.sort() gini_coef = 0 for k in range(n): i = n - k - 1 gini_coef += (2 * i + 1 - n) * data[i] gini_coef = gini_coef / (n * sum(data)) return gini_coef print(gini(data)) # Output: 0.32"},{"prompt":"Create a Python program to filter a list of emails addresses. The program should remove any emails from a list of valid domain names. emails = [ 'jane@domain1.com', 'john@domain2.com', 'dave@domain3.com', 'sarah@domain4.com' ] valid_domains = ['domain1.com', 'domain2.com']","completion":"def filter_emails(emails, valid_domains): filtered_emails = [] for email in emails: domain = email.split('@')[1] if domain in valid_domains: filtered_emails.append(email) return filtered_emails emails = [ 'jane@domain1.com', 'john@domain2.com', 'dave@domain3.com', 'sarah@domain4.com' ] valid_domains = ['domain1.com', 'domain2.com'] filtered_emails = filter_emails(emails, valid_domains) print(filtered_emails) // ['jane@domain1.com', 'john@domain2.com']"},{"prompt":"Create a python program to calculate the mean of the given list. list = [1, 2, 3, 4, 5]","completion":"def mean(list): \\"\\"\\"Calculate the mean of the given list.\\"\\"\\" total = 0 for i in list: total += i return total / len(list) # Usage Example list = [1, 2, 3, 4, 5] mean = mean(list) print(mean) # 3.0"},{"prompt":"Using the provided data, generate a decision tree classifier in Python. X = np.array([[0, 0], [1, 1], [1, 0], [0, 1]]) Y = np.array([0, 0, 1, 1])","completion":"from sklearn.tree import DecisionTreeClassifier # Create and train a Decision Tree classifier clf = DecisionTreeClassifier().fit(X, y) # Make predictions predictions = clf.predict(X) # Print the predictions print(predictions)"},{"prompt":"Can you create a program in Python that will return the nth Fibonacci number? n = 8","completion":"def fib(n): if n == 0 or n == 1: return 1 else: return fib(n-1) + fib(n-2) n = 8 print(fib(n))"},{"prompt":"Create an Azure Machine Learning Pipeline to automate a data preprocessing task. A dataset with inconsistent datavalues.","completion":"#Import the necessary libraries from azureml.core import Workspace from azureml.pipeline.core import Pipeline from azureml.core.dataset import Dataset from azureml.pipeline.steps import PythonScriptStep #Create workspace ws = Workspace.from_config() #Build the Pipeline pre_process_step = PythonScriptStep( script_name='pre-process.py', arguments=['--data', input_ds.as_named_input('input_ds').as_mount()], outputs=['processed_ds'], compute_target=compute_target ) pipeline = Pipeline( workspace=ws, steps=[pre_process_step], description='A pipeline to pre-process the input dataset' ) pipeline.validate() #Submit the pipeline to the Azure Machine Learning workspace pipeline_run = Experiment(ws, 'Pre-Process_Dataset').submit(pipeline) #Wait for the pipeline to finish pipeline_run.wait_for_completion(show_output=True)"},{"prompt":"Create a Python script to iterate over a list of words and print them out one by one. ['cat', 'dog', 'bird']","completion":"for word in ['cat', 'dog', 'bird']: print(word)"},{"prompt":"Generate a Dataframe in Python The table should have three columns name, age, gender Example data: John, 24, Male Sarah, 32, Female","completion":"import pandas as pd data = [('John', 24, 'Male'), ('Sarah', 32, 'Female')] # Create the pandas DataFrame df = pd.DataFrame(data, columns = ['Name', 'Age', 'Gender']) print(df)"},{"prompt":"Design a program in Python which will produce an output in art.","completion":"import turtle t = turtle.Turtle() for i in range(20): t.left(90) t.forward(50) t.right(90) t.forward(50)"},{"prompt":"The given code is a modified ShoutBox library that enables further modifications for the ShoutBox. To generate an HTML file, run the code without any arguments. To enter a new line from the command line, run psogen.py input Anonymous default 'Text'. The code contains functions to generate and write HTML data to a static HTML file, read data from a file, save new ShoutBox content, and prepare a line of content. To test or generate a static HTML file, run the code with the __name__ variable set to __main__.","completion":"#!/usr/bin/python # Modificated ShoutBox Library # enables further modifications for the ShoutBox # Run without to generate htmlfile # Run the following to enter a new line from command line # psogen.py input Anonymous default \\"Text\\" import os, re import messages, broadcast datafilename = os.environ[\\"SHOUTBOX_CHATFILE\\"] htmlfilename = os.environ[\\"SHOUTBOX_GEN_HTMLFILE\\"] style=(\\"name { font-weight: bold; font-family:Tahoma } \\" \\"data { font-family: Tahoma } \\" \\"data.def { color: #000000 } \\" \\"data.blue { color: #0000FF } \\" \\"data.green { color: #008000 } \\" \\"data.orange { color: #FF8040 } \\" \\"data.red { color: #FF0000 }\\") try: raw_dest = os.environ[\\"SHOUTBOX_BROADCAST_DESTINATIONS\\"] finished_dest = re.sub ( '#' , '\\"' , raw_dest ) broadcast_destination = eval ( finished_dest ) except KeyError: broadcast_destination = False #-------------- # Generates Shoutbox-HTML-Frame ... # Imports: # content - String containing preformatted data #-------------- def generate_html(content): htmlstring = \\"<html><head><meta http-equiv='cache-control' content='no-cache'><meta name='GENERATOR' content='PyShoutOut'><title>Shout-Out Data</title>\\" htmlstring += \\"<style type='text/css'>\\" + style + \\"</style></head><body>\\" htmlstring += content htmlstring += \\"</body></html>\\" return htmlstring #-------------- # Generates HTML Data based on given content and write it to static html file # Imports: # content - String containing preformatted data #-------------- def generate_html_into_file(content): htmlstring = generate_html ( content ) htmlfile = open( htmlfilename , 'w' ) htmlfile.write( htmlstring ) htmlfile.close() #-------------- # Generates HTML Data based on datafilename 's content #-------------- def generate_html_from_file(): old = read_data_file() generate_html_into_file( old ) #-------------- # Generates and Displays generated HTML #-------------- def generate_html_to_display_from_file(): old = read_data_file() htmlstring = generate_html ( old ) print htmlstring #-------------- # Reads Data file from datafilename given name #-------------- def read_data_file(): datafile = open(datafilename, 'r') old = datafile.read() datafile.close() return old #-------------- # Function for saving new Shoubox-Content & Regenerate static HTML file -- usually called by HTML-Form #-------------- def process_form( name , indata , color ): content = save_input( name , indata , color ) if broadcast_destination == False: generate_html_into_file ( content ) #-------------- # Acutally Saves SB-Content to datafile #-------------- def save_input( name , indata , color ): content = prepare_line ( name, indata, color ) if broadcast_destination != False: return writeToNetwork( content , broadcast_destination ) else: return writeToDisk ( content ) def writeToNetwork ( content , broadcast_destination ): message = messages.shoutbox_message() message.set(content) casting = broadcast.broadcast( ) casting.setDestination(broadcast_destination) casting.set( message.get_message() ) casting.send() return None def writeToDisk ( content ): old = read_data_file() finalcontent = content + old datafile = open(datafilename, 'r+') datafile.write(finalcontent) datafile.close() return finalcontent def prepare_line ( name, indata, color ): datapass = re.sub(\\"<\\", \\"&lt;\\", indata) data = re.sub(\\">\\", \\"&gt;\\", datapass) content = \\"<name>\\" + name + \\":</name>&nbsp;&nbsp;&nbsp;<data class='\\" + color + \\"'>\\" + data + \\"</data><br>n\\" return content #-------------- # Testing or Generating static HTML File #-------------- if __name__ == \\"__main__\\": import sys if sys.argv.count(\\"input\\") >= 1 : save_input( sys.argv[2] , sys.argv[3] , sys.argv[4] ) generate_html_to_display_from_file() print \\"Entered Text.\\" generate_html_from_file () print \\"Generated HTML-Shoutbox File.\\""},{"prompt":"Generate a script that prints the first 10 numbers in the Fibonacci sequence in Python. Not applicable","completion":"a, b = 0, 1 for _ in range(10): print(a, end=' ') a, b = b, a + b # 0 1 1 2 3 5 8 13 21 34"},{"prompt":"You need to create a function in Python to get the factorial of a number.","completion":"def getFactorial(num): if num == 0: return 1 else: return num * getFactorial(num - 1)"},{"prompt":"Generate a correct python program to perform linear regression.","completion":"import numpy as np def linear_regression(X, y): X_b = np.array([np.ones(X.shape[0]), X]).T theta = np.linalg.inv(X_b.T @ X_b) @ X_b.T @ y return theta"},{"prompt":"Create an algorithm to convert temperatures from Celsius to Fahrenheit in Python.","completion":"def celcius_to_fahrenheit(temp): return ((temp*9/5) + 32) print(celcius_to_fahrenheit(20))"},{"prompt":"Construct a class in Python to represent a 2D point.","completion":"class Point: def __init__(self, x, y): self.x = x self.y = y def get_x(self): return self.x def get_y(self): return self.y def is_origin(self): return self.x == 0 and self.y == 0 def __str__(self): return 'Point(x = {}, y = {})'.format(self.x, self.y)"},{"prompt":"Write a Python program to generate random walk data.","completion":"\\"\\"\\" Write a Python program to generate random walk data. \\"\\"\\" import numpy as np def random_walk(n): \\"\\"\\" Generates a n-step random walk \\"\\"\\" steps = np.random.normal(0, 1, n) return np.cumsum(steps) if __name__ == '__main__': n = 10 random_walk_data = random_walk(n) print(random_walk_data)"},{"prompt":"Create a webcrawler with Python that gathers emails from a given website. URL of the website: www.example.com","completion":"import requests import re target_url = 'www.example.com' def scrape_emails(url): # get the HTML source code from the given url response = requests.get(url) html = response.text # extract all emails from html with the help of regular expression emails = re.findall('S+@S+', html) # print all scraped emails print('Emails found:') print('n'.join(emails)) if __name__ == '__main__': scrape_emails(target_url)"},{"prompt":"Write a Python program to identify all sets of factors of a given number.","completion":"def get_factors(number): factors = [] for i in range(1, number + 1): if number % i == 0: factors.append([i, int(number/i)]) return factors print(get_factors(45)) # Output: [[1, 45], [3, 15], [5, 9], [9, 5], [15, 3], [45, 1]]"},{"prompt":"Rewrite the following code using classes in Python. def square_number(number): return number * number","completion":"class Square: def __init__(self, number): self.number = number def square_number(self): return self.number * self.number number_obj = Square(10) print(number_obj.square_number())"},{"prompt":"Write a Python program to generate a list of all possible words formed from a given string. Hello","completion":"def permute_word(word): # Base case if len(word) == 0: return [''] prev_list = permute_word(word[1:]) next_list = [] # Insert the first character at different positions in the word for each_string in prev_list: for index in range(len(each_string)+1): new_string = each_string[:index] + word[0] + each_string[index:] next_list.append(new_string) return next_list"},{"prompt":"Develop a machine learning model in Python that can identify a student's profession given a few parameters. Text describing the student and student's background","completion":"import pandas as pd import numpy as np from sklearn.neighbors import KNeighborsClassifier from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split from sklearn.metrics import confusion_matrix, accuracy_score # Load data data = pd.read_csv('student_data.csv') X = data.iloc[:,0:-1] y = data.iloc[:, -1] # Preprocssing X = StandardScaler().fit_transform(X) # Split train, test data X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42) # Train machine learning model knn_classifier = KNeighborsClassifier(n_neighbors=6) knn_classifier.fit(X_train, y_train) # Make predictions y_pred = knn_classifier.predict(X_test) # Evaluate performance print(confusion_matrix(y_test, y_pred)) print(accuracy_score(y_test, y_pred))"},{"prompt":"Write a Python script to traverse a directory and its subdirectories.","completion":"\\"\\"\\" Write a Python script to traverse a directory and its subdirectories. \\"\\"\\" import os def list_files(start_path): for root, dirs, files in os.walk(start_path): for name in files: print(os.path.join(root, name)) if __name__ == '__main__': start_path = '.' list_files(start_path)"},{"prompt":"Design a function to implement a stack in Python.","completion":"class Stack: def __init__(self): self.items = [] def is_empty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"prompt":"Create a Python program to send an email with a custom message.","completion":"import smtplib # creates SMTP session s = smtplib.SMTP('smtp.gmail.com', 587) # start TLS for security s.starttls() # Authentication s.login(\\"Your Email\\", \\"Your Password\\") # message to be sent message = \\"Segment your emails according to their purpose.\\" # sending the mail s.sendmail(\\"SenderMail\\", \\"ReceiverMail\\", message) # terminating the session s.quit()"},{"prompt":"Write a command line script to calculate the total number of people who attended a concert. Table: attendance | name | age | arrival_time | |||| | Jack | 20 | 9:00 | | Jane | 21 | 8:45 |","completion":"#!/usr/bin/env python import csv total_attendees = 0 with open('attendance.csv', 'r') as csv_file: csv_reader = csv.reader(csv_file) for row in csv_reader: total_attendees += 1 print(f'Total Attendees: {total_attendees}')"},{"prompt":"Can you explain how objectoriented programming works in Python?","completion":"Object-oriented programming (OOP) is a programming paradigm in Python that focuses on creating reusable code through the use of classes and objects. Classes are a template for creating objects, which are instances of a class and contain properties and methods that are specific to that object. In OOP, objects interact with one another to perform tasks, as opposed to procedural programming, which calls a list of instructions and may have different functions manipulating the same data."},{"prompt":"mplement a lazy evaluation pattern for a function in Python. Not applicable","completion":"class lazy_evaluation: def __init__(self, func): self.func = func def __call__(self, *args, **kwargs): result = self.func(*args, **kwargs) return result @lazy_evaluation def add(a, b): return a + b result = add(2, 3) print(result)"},{"prompt":"Design a python class for representing a node in a binary tree.","completion":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None"},{"prompt":"Populate additional tables/views to facilitate differential protein expression analyses based on standardized SILAC ratios. The script takes a database (SQLite) obtained from the PIQMIe service. Note that there are two columns with canonical Zscore transformed raw/normalized SILAC protein ratios and modified Zscore transformed SILAC protein ratios suitable for heavytailed data (Iglewicz and Hoaglin, 1993). The script requires commandline arguments: 'n' to populate new db tables with (modified) Zscores, 'd' to select one of the data sets or cell lines, 's' to select one of the score types for filtering: Z*,M* Zscore or modified Zscore; *r,*n score based on raw or normalized SILAC protein ratios, 'c' to set the absolute score cutoff (e.g. 1.65, 1.96 or 2.58), and 'dbfile' to specify the sqlite3 database file. The script outputs the results onto a tabdelim file specified by 'o' or a default output filename.","completion":"#!/usr/bin/env python # # This script takes a database (SQLite) obtained from the PIQMIe service and populates # additional tables/views to facilitate differential protein expression analyses based # on standardized SILAC ratios. # # Note: # z_score_{raw|norm}_ratio - column with canonical Z-score transformed raw/normalized # SILAC protein ratios # # mz_score_{raw|norm}_ratio - column with modified Z-score transformed SILAC protein ratios # suitable for heavy-tailed data (Iglewicz and Hoaglin, 1993) # # # Author: Arnold Kuzniar # # Version: 1.0 # import os import sys import argparse as argp import math import numpy as np import scipy.stats as st import sqlite3 as sqlt import collections as cls ratio_types = { # lookup to link column values to column names 'RATIO H/L': 'raw_ratio_HL', 'RATIO H/M': 'raw_ratio_HM', 'RATIO M/L': 'raw_ratio_ML', 'RATIO H/L NORMALIZED': 'norm_ratio_HL', 'RATIO H/M NORMALIZED': 'norm_ratio_HM', 'RATIO M/L NORMALIZED': 'norm_ratio_ML' } score_types = { # lookup to link user input to table column 'Zr' : 'z_score_raw_ratio', 'Zn' : 'z_score_norm_ratio', 'Mr' : 'm_score_raw_ratio', 'Mn' : 'm_score_norm_ratio' } # parse command-line args parser = argp.ArgumentParser( description = 'Differential analysis of SILAC protein ratios based on standardized scores.') parser.add_argument( '-n', action = 'store_true', dest = 'new_tabs', help = 'populate new db tables with (modified) Z-scores') parser.add_argument( '-d', dest = 'dts', required = True, choices = ['VH10', 'U2OS', 'IB10'], help = 'select one of the data sets or cell lines') parser.add_argument( '-s', required = True, choices = score_types.keys(), help = 'select one of the score types for filtering: Z*,M* - Z-score or modified Z-score; *r,*n - score based on raw or normalized SILAC protein ratios') parser.add_argument( '-c', required = True, dest = 'cutoff', type = float, help = 'absolute score cutoff (e.g. 1.65, 1.96 or 2.58)') parser.add_argument( '-o', dest = 'outfile', help = 'output file') parser.add_argument( 'dbfile', help = 'sqlite3 database file') args = parser.parse_args() # check user input dbfile = args.dbfile outfile = args.outfile new_tabs = args.new_tabs dts = args.dts stype = args.s cutoff = args.cutoff score_type = None if os.path.isfile(dbfile) is False: parser.error(\\"dbfile '%s' not found\\" % dbfile) if stype and cutoff: score_type = score_types[stype] else: parser.error('-s and -c args must be used together') if outfile is None: # set the default output filename outfile = os.path.join(os.path.dirname(dbfile), '%s_mzscore_%s_%.2f.tab' % (dts, stype, cutoff)) if cutoff < 0: parser.error('the absolute score cutoff must be a positive value') # print info into STDOUT print \\"\\"\\" dbfile = %s outfile = %s dataset = %s re-score = %s score type = %s score cutoff = %.2f \\"\\"\\" % (dbfile, outfile, dts, new_tabs, stype, cutoff) # sqlite3 user-defined functions (UDFs) def log(value, base): try: return math.log(value) / math.log(base) except: return None def sqrt(value): try: return math.sqrt(value) except: return None def pvalue(score): # convert Z- or M-score to two-tailed probability (P-value) try: return 2 * st.norm.cdf(-abs(score)) except: return None class Stdev: # sample standard deviation (aggregate function) def __init__(self): self.vec = [] def step(self, value): self.vec.append(value) def finalize(self): return np.array(self.vec).std(ddof=1) class Median: # median (aggregate function) def __init__(self): self.arr = [] def step(self, value): self.arr.append(value) def finalize(self): return np.median(np.array(self.arr)) class Mad: # median absolute deviation (aggregate function) def __init__(self): self.arr = [] def step(self, value): self.arr.append(value) def finalize(self): median = np.median(np.array(self.arr)) return np.median(np.abs(self.arr - median)) # SQL statements to populate tables/views sql_create_tables = \\"\\"\\" DROP VIEW IF EXISTS V_PGROUP_RATIO; CREATE VIEW V_PGROUP_RATIO AS -- simplifies the selection of SILAC ratios/types SELECT A.grp_id, exp_name, CAST(CASE %s END AS TEXT) AS ratio_type, CAST(quant_value AS NUMERIC) AS ratio_value FROM PGROUP_QUANT A, V_PGROUP B WHERE A.grp_id = B.grp_id AND quant_type IN ('%s') AND quant_value; DROP TABLE IF EXISTS PGROUP_LOG2RATIO_STAT; CREATE TABLE PGROUP_LOG2RATIO_STAT AS -- stores descriptive statistics on SILAC protein ratios for each experiment SELECT exp_name, ratio_type, CAST(COUNT(ratio_value) AS INT) AS n, CAST(MIN(LOG(ratio_value, 2)) AS NUMERIC) AS min, CAST(MAX(LOG(ratio_value, 2)) AS NUMERIC) AS max, CAST(AVG(LOG(ratio_value, 2)) AS NUMERIC) AS mean, CAST(MEDIAN(LOG(ratio_value, 2)) AS NUMERIC) AS median, CAST(STDEV(LOG(ratio_value, 2)) AS NUMERIC) AS sd, CAST(MAD(LOG(ratio_value, 2)) AS NUMERIC) AS mad FROM V_PGROUP_RATIO GROUP BY exp_name, ratio_type; CREATE INDEX idx_PGROUP_LOG2RATIO_STAT_exp_name_ratio_type ON PGROUP_LOG2RATIO_STAT(exp_name, ratio_type); DROP VIEW IF EXISTS V_PGROUP_LOG2RATIO_STAT; CREATE VIEW V_PGROUP_LOG2RATIO_STAT AS -- shows rounded values of the statistics SELECT exp_name, ratio_type, n, ROUND(min, 4) AS min, ROUND(max, 4) AS max, ROUND(mean, 4) AS mean, ROUND(median, 4) AS median, ROUND(sd, 4) AS sd, ROUND(mad, 4) AS mad FROM PGROUP_LOG2RATIO_STAT; DROP TABLE IF EXISTS PGROUP_MZSCORE; CREATE TABLE PGROUP_MZSCORE AS -- stores (modified) Z-score transformed SILAC protein raw/norm ratios SELECT grp_id, A.exp_name AS exp_name, CAST(A.ratio_type AS TEXT) AS ratio_type, CAST((LOG(ratio_value, 2) - mean) / sd AS NUMERIC) AS z_score, CAST(0.6745 * (LOG(ratio_value, 2) - median) / mad AS NUMERIC) AS m_score FROM V_PGROUP_RATIO A, PGROUP_LOG2RATIO_STAT B WHERE A.exp_name = B.exp_name AND A.ratio_type = B.ratio_type; CREATE INDEX idx_PGROUP_MZSCORE_grp_id ON PGROUP_MZSCORE(grp_id); CREATE INDEX idx_PGROUP_MZSCORE_exp_name_ratio_type ON PGROUP_MZSCORE(exp_name, ratio_type); \\"\\"\\" % (' '.join([ \\"ntWHEN quant_type='%s' THEN '%s'\\" % (k, v) for (k, v) in ratio_types.iteritems() ]), \\"','\\".join(ratio_types.keys())) # dynamically construct SQL query to select diff. reg. protein groups sql_sel_pgrps = \\"\\"\\" SELECT A.grp_id grp_id, IFNULL(GROUP_CONCAT(DISTINCT gene), '-') genes, {dts}_L0_M0_H1_{score_type}_HL '{stype}_H1L0', -- Z or M-score ON/OFF (treat1) {dts}_L1_M1_H0_{score_type}_LH '{stype}_L1H0', -- Z or M-score ON/OFF (treat2) {dts}_L0_M0_H1_{score_type}_HM '{stype}_H1M0', -- Z or M-score ON/OFF (treat3) {dts}_L1_M1_H0_{score_type}_MH '{stype}_M1H0', -- Z or M-score ON/OFF (treat4) {dts}_L0_M0_H1_{score_type}_LM '{stype}_L0M0', -- Z or M-score OFF/OFF (ctrl1) {dts}_L1_M1_H0_{score_type}_LM '{stype}_L1M1', -- Z or M-score ON/ON (ctrl2) PVALUE({dts}_L0_M0_H1_{score_type}_HL) 'pval_H1L0', -- P-value ON/OFF (treat1) PVALUE({dts}_L1_M1_H0_{score_type}_LH) 'pval_L1H0', -- P-value ON/OFF (treat2) PVALUE({dts}_L0_M0_H1_{score_type}_HM) 'pval_H1M0', -- P-value ON/OFF (treat3) PVALUE({dts}_L1_M1_H0_{score_type}_MH) 'pval_M1H0', -- P-value ON/OFF (treat4) PVALUE({dts}_L0_M0_H1_{score_type}_LM) 'pval_L0M0', -- P-value OFF/OFF (ctrl1) PVALUE({dts}_L1_M1_H0_{score_type}_LM) 'pval_L1M1' -- P-value ON/ON (ctrl2) FROM V_PGROUP_MZSCORE A, PROT2GRP B, V_PROTEIN C WHERE A.grp_id = B.grp_id AND B.prot_acc = C.acc AND (({dts}_L0_M0_H1_{score_type}_HL > {cutoff} AND {dts}_L0_M0_H1_{score_type}_HM > {cutoff} AND {dts}_L1_M1_H0_{score_type}_LH > {cutoff} AND {dts}_L1_M1_H0_{score_type}_MH > {cutoff}) OR ({dts}_L0_M0_H1_{score_type}_LH > {cutoff} AND {dts}_L0_M0_H1_{score_type}_MH > {cutoff} AND {dts}_L1_M1_H0_{score_type}_HL > {cutoff} AND {dts}_L1_M1_H0_{score_type}_HM > {cutoff})) AND {dts}_L0_M0_H1_{score_type}_ML <= {cutoff} AND {dts}_L0_M0_H1_{score_type}_LM <= {cutoff} AND {dts}_L1_M1_H0_{score_type}_ML <= {cutoff} AND {dts}_L1_M1_H0_{score_type}_LM <= {cutoff} GROUP BY A.grp_id; \\"\\"\\".format(dts=dts, score_type=score_type, stype=stype, cutoff=cutoff) # connect to db with sqlt.connect(args.dbfile) as conn: conn.row_factory = sqlt.Row # enable column access by name: row['colnm'] conn.create_function('log', 2, log) conn.create_function('sqrt', 1, sqrt) conn.create_function('pvalue', 1, pvalue) conn.create_aggregate('stdev', 1, Stdev) conn.create_aggregate('median', 1, Median) conn.create_aggregate('mad', 1, Mad) cur = conn.cursor() if new_tabs is True: # populate tables/views only with -n option cur.executescript(sql_create_tables) cur.execute('SELECT DISTINCT exp_name FROM EXPERIMENT') exp_names = [ str(r[0]) for r in cur.fetchall() ] cur.execute(\\"SELECT DISTINCT ratio_type FROM PGROUP_LOG2RATIO_STAT\\") ratio_types = [ str(r[0]) for r in cur.fetchall() ] n = len(exp_names) * len(ratio_types) i = 0 comma = ',' # create view for selecting diff. reg. proteins sql_create_view = \\"\\"\\" DROP VIEW IF EXISTS V_PGROUP_MZSCORE; CREATE VIEW V_PGROUP_MZSCORE AS SELECT grp_id, \\"\\"\\" for e in exp_names: for r in ratio_types: i += 1 rr = r[:-2] + r[-2:][::-1] # add inverse ratio (e.g., {raw|norm}_ratio_HL for *_ratio_LH) if i == n: comma = '' sql_create_view += \\"tROUND(CAST(GROUP_CONCAT(CASE WHEN exp_name = '{exp}' AND ratio_type = '{ratio}' THEN z_score ELSE NULL END) AS NUMERIC), 4) AS '{exp}_z_score_{ratio}',n\\".format(exp=e, ratio=r) sql_create_view += \\"tROUND(CAST(GROUP_CONCAT(CASE WHEN exp_name = '{exp}' AND ratio_type = '{ratio}' THEN -1 * z_score ELSE NULL END) AS NUMERIC), 4) AS '{exp}_z_score_{iratio}',n\\".format(exp=e, ratio=r, iratio=rr) sql_create_view += \\"tROUND(CAST(GROUP_CONCAT(CASE WHEN exp_name = '{exp}' AND ratio_type = '{ratio}' THEN m_score ELSE NULL END) AS NUMERIC), 4) AS '{exp}_m_score_{ratio}',n\\".format(exp=e, ratio=r) sql_create_view += \\"tROUND(CAST(GROUP_CONCAT(CASE WHEN exp_name = '{exp}' AND ratio_type = '{ratio}' THEN -1 * m_score ELSE NULL END) AS NUMERIC), 4) AS '{exp}_m_score_{iratio}'{comma}n\\".format(exp=e, ratio=r, iratio=rr, comma=comma) sql_create_view += \\"FROM PGROUP_MZSCORE GROUP BY grp_id\\" cur.executescript(sql_create_view) # write results onto tab-delim file if dts is not None: sep = 't' # column separator n_pgrps = 0 # count diff. reg. protein groups with open(outfile, 'w+') as fout: try: for drow in [ cls.OrderedDict(xi) for xi in cur.execute(sql_sel_pgrps) ]: # first output column names if n_pgrps == 0: header = sep.join(drow.keys()) + os.linesep fout.write(header) # output remaining rows with column values (grp_id, Z-/M-scores and P-values) row = drow.values() grp_id = str(drow['grp_id']) genes = str(drow['genes']) scores = [ str(round(float(x), 4)) for x in row[2:] ] srow = grp_id + sep + genes + sep + sep.join(scores) + os.linesep fout.write(srow) n_pgrps += 1 except sqlt.OperationalError as e: sys.stderr.write('Error: Selected data set not found: %sn' % e) sys.exit(1) # remove empty outfile if os.path.getsize(outfile) == 0: print 'Nothing to write onto outfile.' os.remove(outfile) else: print 'Ndiff =', n_pgrps"},{"prompt":"Write a Python program for checking if a number is within a given range.","completion":"def is_in_range(n, lower, upper): return True if lower <= n & n <= upper else False is_in_range(3, 1, 10) # Output: True"},{"prompt":"Write a function in Python to find all words in a string that are 4 characters in length. The quick brown fox jumps over the lazy dog","completion":"def find_words(text): # find all words in the string words = text.split(' ') # filter out words that are not 4 characters long filtered_words = [word for word in words if len(word) == 4] return filtered_words # example text = 'The quick brown fox jumps over the lazy dog' words = find_words(text) print(words) # output: ['quick', 'brown', 'over', 'lazy']"},{"prompt":"Write a Python program to determine andor operations x = False and False","completion":"x = False and False # Output print(x) # False"},{"prompt":"Using the given Python data, create dictionaries of all students and all courses with the corresponding IDs as keys. students = [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)] courses = [('math', 'B', 18), ('science', 'A', 20)]","completion":"student_dict = {'john': {'grade': 'A', 'age': 15}, 'jane': {'grade': 'B', 'age': 12}, 'dave': {'grade': 'B', 'age': 10}} courses_dict = {'math': {'grade': 'B', 'duration': 18}, 'science': {'grade': 'A', 'duration': 20}}"},{"prompt":"Create a Python class to manage a stack data structure. The class should include the methods push, pop, and peek. Not applicable","completion":"class Stack: def __init__(self): self.items = [] def isEmpty(self): return self.items == [] def push(self, item): self.items.append(item) def pop(self): return self.items.pop() def peek(self): return self.items[len(self.items)-1] def size(self): return len(self.items)"},{"prompt":"Generate a Python program that displays all prime numbers between two numbers. 50, 75","completion":"def display_prime_numbers(min, max): for n in range(min, max): if is_prime(n): print(n) def is_prime(n): if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True display_prime_numbers(50, 75)"},{"prompt":"Create a Python program to generate random numbers between 1 and 10 of a specified length. Length = 6","completion":"import random def generate_random_nums(length): lst = [] for _ in range(length): lst.append(random.randint(1, 10)) return lst"},{"prompt":"You have a list of temperature values. Write a python program to find the day which has the highest temperature. [58, 59, 61, 63, 66, 68, 71, 72, 75]","completion":"def highest_temp(temp_list): highest_temp_day = 0 highest_temp_val = temp_list[0] for i in range(1, len(temp_list)): if temp_list[i] > highest_temp_val: highest_temp_day = i highest_temp_val = temp_list[i] return highest_temp_day"},{"prompt":"Create a function in Python that takes two strings, 'old_string' and 'new_string', as parameters and replaces every occurence of 'old_string' in a text document with 'new_string'. text:This is an old_string old_string: old_string new_string: new_string","completion":"def replace_string(text, old_string, new_string): return text.replace(old_string, new_string) text = 'This is an old_string' old_string = 'old_string' new_string = 'new_string' print(replace_string(text, old_string, new_string)) # Output: This is an new_string"},{"prompt":"Construct a decision tree in Python, based on the given input data. Input = [Gender ('M' or 'F'), Age, Income, Vehicle] Target = Loan Approval/Rejection (1 or 0) [ ['M', 24, 33800, 'Petrol'], ['F', 35, 35000, 'Electric'], ['F', 40, 45000 , 'Petrol'], ['M', 20, 25000, 'Electric'], ['M', 30, 32000, 'Petrol'], [F', 50, 60000, 'Electric'], ]","completion":"from sklearn import tree # Prepare Input Input = [['M', 24, 33800, 'Petrol'], ['F', 35, 35000, 'Electric'], ['F', 40, 45000 , 'Petrol'], ['M', 20, 25000, 'Electric'], ['M', 30, 32000, 'Petrol'], ['F', 50, 60000, 'Electric']] # Prepare Target Target = [1, 0, 1, 0, 0, 1] # Create a decision tree model = tree.DecisionTreeClassifier() # Train the model model.fit(Input,Target) # Visualize the decision tree tree.plot_tree(model)"},{"prompt":"Design a Python program to read numbers from a given array and determine if all numbers are divisible by 5. array = [10, 15, 20, 25, 30]","completion":"def checkDivisible(array): for num in array: if num % 5 != 0: return False return True array = [10, 15, 20, 25, 30] if checkDivisible(array): print('All numbers are divisible by 5') else: print('Not all numbers are divisible by 5')"},{"prompt":"Create a TensorFlow model in Python that classifies whether a person is male or female based on height and weight. Not applicable","completion":"import tensorflow as tf import pandas as pd # Read the data df = pd.read_csv('data.csv', index_col=False) # Prepare the input data X = df[['height', 'weight']] y = df['label'].astype('int32') # Build the model model = tf.keras.models.Sequential() model.add(tf.keras.layers.Dense(2, input_shape=(2,), activation='softmax')) model.compile(optimizer=tf.keras.optimizers.Adam(0.05), loss=tf.keras.losses.SparseCategoricalCrossentropy(), metrics=['accuracy']) # Train the model model.fit(X, y, epochs=100, batch_size=32)"},{"prompt":"Create a generic univariate linear regression model using Python.","completion":"import numpy as np from sklearn.linear_model import LinearRegression def linreg_univariate_model(X, y): linreg = LinearRegression() linreg.fit(X.reshape(-1,1), y) return linreg"},{"prompt":"Write a Python script to simulate an alarm clock that sets off an alarm every day at 9am.","completion":"from datetime import datetime from datetime import timedelta import time def alarm_clock(): while True: currentTime = datetime.now().time() if (currentTime.hour == 9 and currentTime.minute == 0): print(\\"Time to get up!\\") time.sleep(10) alarm_clock()"},{"prompt":"Write a Python function that the user can call to pseudorandomly shuffle a given list","completion":"import random def shuffle_list(lst): if len(lst) > 1: random.shuffle(lst) return lst"},{"prompt":"Design a Python program to print all prime numbers between 0 and a given number. 30","completion":"def is_prime(num): #Ignore negative numbers and zero if num < 2: return False #Return true if num is prime for i in range(2, num): if num % i == 0: return False return True #Print all prime numbers between 0 and a given number num_input = int(input(\\"Enter a number: \\")) for i in range(num_input): if is_prime(i): print(i, \\"is a prime number\\")"},{"prompt":"Generate Python code to find the third largest element in an array.","completion":"def third_largest(arr): first = arr[0] second = -float(\\"inf\\") third = -float(\\"inf\\") for num in arr[1:]: if (num > first): third = second second = first first = num elif (num > second): third = second second = num elif (num > third): third = num return third"},{"prompt":"Using Python, create a program to classify numbers as positive, negative or zero according to user input","completion":"def classify(num): if num > 0: return \\"positive\\" elif num < 0: return \\"negative\\" else: return \\"zero\\" n = int(input(\\"Please enter a number: \\")) result = classify(n) print(result) # Prints \\"positive\\" if n is positive, \\"negative\\" if n is negative and \\"zero\\" if n is zero"},{"prompt":"Create a program to implement a basic calculator in Python. The program should accept two numbers as input and print the result of the selected operation. Numbers: 3 and 5 Operation: Additio","completion":"#Program to implement a basic calculator #Define a function to perform the operation def calculate(num1, num2, operation): if operation == 'add': return num1 + num2 elif operation == 'subtract': return num1 - num2 elif operation == 'multiply': return num1 * num2 elif operation == 'divide': return num1 / num2 #Take the numbers and operation as input num1 = int(input('Enter first number: ')) num2 = int(input('Enter second number: ')) operation = input('Select an operation (add, subtract, multiply, divide): ') #Call the function to perform the operation result = calculate(num1, num2, operation) #Print the result print('Result:',result)"},{"prompt":"Create a Python program to prompt for a number and check whether the number is a prime number. Prompted number: 7","completion":"num = int(input(\\"Please enter a number: \\")) # Check if num is a prime number def is_prime(n): # Check if n is greater than 1 if n > 1: # Check for factors for i in range(2,n): if (n % i) == 0: return False # n is not prime else: return True # n is prime else: return False if is_prime(num): print(num, \\"is a prime number\\") else: print(num, \\"is not a prime number\\")"},{"prompt":"Create a function in Python that takes a list as an argument and returns the sum of all the numbers in the list. [1, 2, 3, 4]","completion":"def sum_list(nums): total = 0 for num in nums: total += num return total"},{"prompt":"Create a Python function that takes a string as an argument and returns the number of vowels present in the string.","completion":"def num_vowels(string): num_vowels = 0 for char in string: if char in \\"aeiouAEIOU\\": num_vowels += 1 return num_vowels"},{"prompt":"Write a Python function that takes two lists as arguments, and calculates their dot product. list1 = [1,2,3] list2 = [4,5,6]","completion":"def dot_product(list1, list2): if len(list1) != len(list2): raise ValueError('List lengths must be the same.') dot_product = 0 for i, val in enumerate(list1): dot_product += val * list2[i] return dot_product list1 = [1,2,3] list2 = [4,5,6] dot_product_result = dot_product(list1, list2) print(dot_product_result) # 32"},{"prompt":"The given code is a Python script for a malware detection engine. To use the engine, follow the instructions below: 1. Initialize the plugin engine by calling the \`init\` method with the path to the plugin engine and the verbose flag as parameters. 2. Call the \`scan\` method with the file handle, filename, file format, and filename_ex as parameters to scan for malware. 3. If malware is detected, call the \`disinfect\` method with the filename and malware ID as parameters to remove the malware. 4. When finished, call the \`uninit\` method to close the plugin engine. Note: Before using the engine, make sure to import the necessary modules and dependencies.","completion":"# -*- coding:utf-8 -*- # Author: Kei Choi(hanul93@gmail.com) import os import re import kernel import kavutil import cryptolib # ------------------------------------------------------------------------- # KavMain í´ëì¤ # ------------------------------------------------------------------------- class KavMain: # --------------------------------------------------------------------- # init(self, plugins_path) # íë¬ê·¸ì¸ ìì§ì ì´ê¸°í íë¤. # ì¸ë ¥ê° : plugins_path - íë¬ê·¸ì¸ ìì§ì ìì¹ # verbose - ëë²ê·¸ ëª¨ë (True or False) # ë¦¬í´ê° : 0 - ì±ê³µ, 0 ì´ì¸ì ê° - ì¤í¨ # --------------------------------------------------------------------- def init(self, plugins_path, verbose=False): # íë¬ê·¸ì¸ ìì§ ì´ê¸°í pat = r'POST /cdn-cgi/x00x00 HTTP/1.1rnUser-Agent: x00rnHost:' + r'[dD]+?GETx00+/x00+Cookie:[dD]+?http[dD]+?url=[dD]+?POST' self.p_linux_mirai = re.compile(pat) # ë³ì¢ ë°ì´ë¬ì¤ í¨í´ self.mirai_a_strings = [ 'POST /cdn-cgi/', 'HTTP/1.1rnUser-Agent: ', 'Host:', 'GET', 'Cookie:', 'http', 'url=', 'proc/net/tcp' ] self.aho_mirai_a = kavutil.AhoCorasick() self.aho_mirai_a.make_tree(self.mirai_a_strings) return 0 # íë¬ê·¸ì¸ ìì§ ì´ê¸°í ì±ê³µ # --------------------------------------------------------------------- # uninit(self) # íë¬ê·¸ì¸ ìì§ì ì¢ë£íë¤. # ë¦¬í´ê° : 0 - ì±ê³µ, 0 ì´ì¸ì ê° - ì¤í¨ # --------------------------------------------------------------------- def uninit(self): # íë¬ê·¸ì¸ ìì§ ì¢ë£ return 0 # íë¬ê·¸ì¸ ìì§ ì¢ë£ ì±ê³µ # --------------------------------------------------------------------- # getinfo(self) # íë¬ê·¸ì¸ ìì§ì ì£¼ì ì ë³´ë¥¼ ìë ¤ì¤ë¤. (ì ìì, ë²ì , ...) # ë¦¬í´ê° : íë¬ê·¸ì¸ ìì§ ì ë³´ # --------------------------------------------------------------------- def getinfo(self): # íë¬ê·¸ì¸ ìì§ì ì£¼ì ì ë³´ info = dict() # ì¬ì í ë³ì ì ì¸ info['author'] = 'Kei Choi' # ì ìì info['version'] = '1.1' # ë²ì  info['title'] = 'eMalware Engine' # ìì§ ì¤ëª info['kmd_name'] = 'emalware' # ìì§ íì¼ ì´ë¦ info['sig_num'] = kavutil.handle_pattern_md5.get_sig_num('emalware') + 2 # ì§ë¨/ì¹ë£ ê°ë¥í ìì±ì½ë ì return info # --------------------------------------------------------------------- # listvirus(self) # ì§ë¨/ì¹ë£ ê°ë¥í ìì±ì½ëì ë¦¬ì¤í¸ë¥¼ ìë ¤ì¤ë¤. # ë¦¬í´ê° : ìì±ì½ë ë¦¬ì¤í¸ # --------------------------------------------------------------------- def listvirus(self): # ì§ë¨ ê°ë¥í ìì±ì½ë ë¦¬ì¤í¸ vlist = kavutil.handle_pattern_md5.get_sig_vlist('emalware') vlist.append('Backdoor.Linux.Mirai.a.gen') vlist = list(set(vlist)) vlist.sort() vlists = [] for vname in vlist: vlists.append(kavutil.normal_vname(vname)) vlists.append(kavutil.normal_vname('<n>AdWare.Win32.Sokuxuan.gen')) return vlists # --------------------------------------------------------------------- # scan(self, filehandle, filename, fileformat) # ìì±ì½ëë¥¼ ê²ì¬íë¤. # ìë ¥ê° : filehandle - íì¼ í¸ë¤ # filename - íì¼ ì´ë¦ # fileformat - íì¼ í¬ë§· # filename_ex - íì¼ ì´ë¦ (ìì¶ ë´ë¶ íì¼ ì´ë¦) # ë¦¬í´ê° : (ìì±ì½ë ë°ê²¬ ì¬ë¶, ìì±ì½ë ì´ë¦, ìì±ì½ë ID) ë±ë± # --------------------------------------------------------------------- def scan(self, filehandle, filename, fileformat, filename_ex): # ìì±ì½ë ê²ì¬ try: mm = filehandle # ë¯¸ë¦¬ ë¶ìë íì¼ í¬ë§·ì¤ì PE í¬ë§·ì´ ìëê°? if 'ff_pe' in fileformat: ff = fileformat['ff_pe'] # case 1 : ì¹ì ì ì²´ë¥¼ hashë¡ ê²ì¬ for idx, section in enumerate(ff['pe']['Sections']): # if (section['Characteristics'] & 0x20000000) == 0x20000000: # ì¤í ìì±? # print section['Name'], hex(section['SizeRawData']) fsize = section['SizeRawData'] if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize): foff = section['PointerRawData'] fmd5 = cryptolib.md5(mm[foff:foff+fsize]) # print fsize, fmd5 vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5) if vname: vname = kavutil.normal_vname(vname) return True, vname, 0, kernel.INFECTED # case 2. ë§ì§ë§ ì¹ìì ì¤í íì¼ ì¡´ì¬ if len(ff['pe']['Sections']): # ë§ì§ë§ ì¹ì sec = ff['pe']['Sections'][-1] off = sec['PointerRawData'] size = sec['SizeRawData'] # ì¤í íì¼ì´ ì¡´ì¬íëê°? exe_offs = [m.start() for m in re.finditer('MZ', mm[off:off+size])] for exe_pos in exe_offs: fsize = 0x1d5 if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize): fmd5 = cryptolib.md5(mm[off + exe_pos:off + exe_pos + fsize]) # print fsize, fmd5 vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5) if vname: # return True, vname, 0, kernel.INFECTED idx = len(ff['pe']['Sections']) - 1 vname = kavutil.normal_vname(vname) return True, vname, (0x80000000 + idx), kernel.INFECTED # case 3. pdbë¥¼ ì´ì©í´ì ìì±ì½ë ê²ì¬ if 'PDB_Name' in ff['pe']: pdb_sigs = { ':pz_gitbin': '<n>AdWare.Win32.Sokuxuan.gen', ':CODEvitruvian': '<n>AdWare.Win32.Vitruvian.gen', } for pat in pdb_sigs.keys(): if ff['pe']['PDB_Name'].find(pat) != -1: vname = kavutil.normal_vname(pdb_sigs[pat]) return True, vname, 0, kernel.INFECTED # ë¯¸ë¦¬ ë¶ìë íì¼ í¬ë§·ì¤ì ELF í¬ë§·ì´ ìëê°? elif 'ff_elf' in fileformat: ff = fileformat['ff_elf'] if len(ff['elf']['Sections']): for section in ff['elf']['Sections']: if (section['Type'] & 0x1) == 0x1 and (section['Flag'] & 0x4) == 0x4: # íë¡ê·¸ë¨ ë°ì´í°ì´ë©´ì ì¤í ìì±? # print section['Name'], section['Size'], section['Offset'] fsize = section['Size'] if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize): foff = section['Offset'] fmd5 = cryptolib.md5(mm[foff:foff + fsize]) # print fsize, fmd5 vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5) if vname: vname = kavutil.normal_vname(vname) return True, vname, 0, kernel.INFECTED elif len(ff['elf']['ProgramHeaders']): for ph in ff['elf']['ProgramHeaders']: if (ph['Type'] & 0x1) == 0x1 and (ph['Flag'] & 0x1) == 0x1: fsize = ph['Size'] if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize): foff = ph['Offset'] fmd5 = cryptolib.md5(mm[foff:foff + fsize]) # print fsize, fmd5 vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5) if vname: vname = kavutil.normal_vname(vname) return True, vname, 0, kernel.INFECTED # Mirai ë³ì¢ ì§ë¨ ''' for section in ff['elf']['Sections']: if section['Name'] == '.rodata': fsize = section['Size'] foff = section['Offset'] if self.p_linux_mirai.match(mm[foff:foff+fsize]): return True, 'Backdoor.Linux.Mirai.gen', 0, kernel.SUSPECT ''' for section in ff['elf']['Sections']: if section['Name'] == '.rodata': vstring = [] foff = section['Offset'] ret = self.aho_mirai_a.search(mm[foff:foff + 0x200]) for n in ret[:len(self.mirai_a_strings)]: vstring.append(n[1]) # print vstring # print len(set(vstring)), len(self.mirai_a_strings) if set(vstring) == set(self.mirai_a_strings): return True, 'Backdoor.Linux.Mirai.a.gen', 0, kernel.SUSPECT # NSIS ê°ì ì¤ì¹ íë¡ê·¸ë¨ì ê²½ì° ì²¨ë¶ ìì­ì ì¡´ì¬íëë°.. # ëì»´íì¼íì§ ìê³  ì¤ë¦¬ì§ë ì´ë¯¸ì§ ìë³¸ì íì§íëë¡ íì.. if 'ff_attach' in fileformat: foff = fileformat['ff_attach']['Attached_Pos'] buf = mm[foff:] fsize = len(buf) if fsize and kavutil.handle_pattern_md5.match_size('emalware', fsize): fmd5 = cryptolib.md5(buf) # ì²¨ë¶ ìì¹ë¶í° ëê¹ì§ vname = kavutil.handle_pattern_md5.scan('emalware', fsize, fmd5) if vname: vname = kavutil.normal_vname(vname) return True, vname, 0, kernel.INFECTED except IOError: pass # ìì±ì½ëë¥¼ ë°ê²¬íì§ ëª»íìì ë¦¬í´íë¤. return False, '', -1, kernel.NOT_FOUND # --------------------------------------------------------------------- # disinfect(self, filename, malware_id) # ìì±ì½ëë¥¼ ì¹ë£íë¤. # ìë ¥ê° : filename - íì¼ ì´ë¦ # : malware_id - ì¹ë£í  ìì±ì½ë ID # ë¦¬í´ê° : ìì±ì½ë ì¹ë£ ì¬ë¶ # --------------------------------------------------------------------- def disinfect(self, filename, malware_id): # ìì±ì½ë ì¹ë£ try: # ìì±ì½ë ì§ë¨ ê²°ê³¼ìì ë°ì ID ê°ì´ 0ì¸ê°? if malware_id == 0: os.remove(filename) # íì¼ ì­ì  return True # ì¹ë£ ìë£ ë¦¬í´ if malware_id & 0x80000000 == 0x80000000: idx = malware_id & 0x7fffffff import pe buf = open(filename, 'rb').read() pe = pe.PE(buf, False, filename) try: pe_format = pe.parse() # PE íì¼ ë¶ì except MemoryError: pe_format = None if pe_format is None: return False ff = {'pe': pe_format} if len(ff['pe']['Sections']) > idx: section = ff['pe']['Sections'][idx] fsize = section['SizeRawData'] foff = section['PointerRawData'] data = buf[:foff] + ('x00' * fsize) + buf[foff+fsize:] open(filename, 'wb').write(data) return True except IOError: pass return False # ì¹ë£ ì¤í¨ ë¦¬í´"},{"prompt":"Write a Python program that implements a binary search algorithm on a sorted array of integers. [1, 3, 5, 7, 9, 11, 13, 15, 17]","completion":"def binary_search(arr, item): first = 0 last = len(arr) - 1 found = False while(first <= last and not found): mid = (first + last) // 2 if arr[mid] == item: found = True else: if item < arr[mid]: last = mid - 1 else: first = mid + 1 return found array = [1, 3, 5, 7, 9, 11, 13, 15, 17] item = 9 result = binary_search(array, item) if result: print('Element present in the array') else: print('No such element')"},{"prompt":"Create a Python program to play a guessing game. The program should generate a random number between 1 and 100. If the user guesses the number correctly, the program should be able to respond with a congratulatory message. Not applicable","completion":"import random random_number = random.randint(1, 100) print('I am thinking of a number between 1 and 100. Can you guess it?') while True: guess_str = input('Enter your guess: ') guess = int(guess_str) if guess == random_number: print('Congratulations! You guessed it correctly.') break elif guess < random_number: print('Your guess is too low.') else: print('Your guess is too high.')"},{"prompt":"Write a script in Python to monitor the performance of a given website and send an alert if the response time exceeds a certain threshold. Not applicable","completion":"import requests import smtplib THRESHOLD_TIME = 5 # In seconds WEBSITE_URL = 'http://www.example.com' FROM_EMAIL_ADDRESS = 'alert@example.com' TO_EMAIL_ADDRESS = 'admin@example.com' def main(): response = requests.get(WEBSITE_URL) response_time = response.elapsed.total_seconds() if response_time > THRESHOLD_TIME: send_email_alert() def send_email_alert(): server = smtplib.SMTP('smtp.gmail.com', 587) server.starttls() server.login(FROM_EMAIL_ADDRESS, 'password') message = 'Website response time exceeded threshold' server.sendmail(FROM_EMAIL_ADDRESS, TO_EMAIL_ADDRESS, message) server.quit() if __name__ == '__main__': main()"},{"prompt":"Create an algorithm in Python to find the maximum number in a list list = [1, 4, 5, 9, 12, 14]","completion":"def find_max(list): max_num = list[0] for num in list: if num > max_num: max_num = num return max_num max_number = find_max(list) print(max_number)"},{"prompt":"Create an AWS Lambda Function in Python that performs basic calculations (e. g. addition, subtraction, multiplication, and division) when called. Not applicable","completion":"import json def lambda_handler(event, context): # Get the operation and operands from the event operation = event['operation'] operands = event['operands'] # Perform the operation if operation == 'add': result = sum(operands) elif operation == 'subtract': result = operands[0] - operands[1] elif operation == 'multiply': result = operands[0] * operands[1] elif operation == 'divide': result = operands[0] / operands[1] else: return { 'statusCode': 500, 'body': json.dumps('Unsupported operation') } # Return the response return { 'statusCode': 200, 'body': json.dumps(result) }"},{"prompt":"Design an experiment in Python to classify an online customer's gender based on their purchase history. Purchases: Lipstick Wine Glasses Cap","completion":"import pandas as pd # a data frame with the customer's purchase history purchases = pd.DataFrame({ 'item' : [\\"Lipstick\\", \\"Wine Glasses\\", \\"Cap\\"], 'price': [10, 20, 15], 'gender': [0, 1, 0] }) # number of customers who bought each item item_counts = purchases.groupby('item').count() # probability of each item being bought by a customer prob_items = item_counts / len(purchases) # probability of the customer being either male or female prob_gender = purchases.groupby('gender').count() / len(purchases) # probability of the customer being male given they bought the items prob_gender_given_items = (purchases.groupby(['item','gender']).count() / len(purchases)).divide(prob_items, axis=0) # gender of the customer based on their purchase history customer_gender = prob_gender_given_items['price']['Lipstick', 'Wine Glasses', 'Cap'].multiply(prob_gender['price']).idxmax() print(\\"The customer is classified as: \\" + str(customer_gender)) # Output: The customer is classified as: 0"},{"prompt":"mprove the performance of the below algorithm written in Python.","completion":"def algorithm(arr): result = [] for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] + arr[j] == 0: result.append((arr[i], arr[j])) return result def optimizedAlgorithm(arr): result = [] seen = set() for num in arr: if -num in seen: result.append((num, -num)) seen.add(num) return result"},{"prompt":"Design a web scraper using python to extract information from wikipedia.","completion":"import requests from bs4 import BeautifulSoup web_url = \\"https://en.wikipedia.org/wiki/Wikipedia\\" web_data = requests.get(web_url).text soup = BeautifulSoup(web_data,\\"html.parser\\") for title in soup.find_all(\\"h1\\"): print(title.string) for para in soup.find_all(\\"p\\"): print(para.string)"},{"prompt":"Generate a Python program that calculates the factorial of a given number. 5","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) # Test num = 5 fac = factorial(num) print(\\"Factorial of\\", num, \\"is\\", fac)"},{"prompt":"Write a function to validate an email address in Python.","completion":"def validate_email(email): \\"\\"\\"This function validates an email address. It returns True if the email address is valid, False otherwise. \\"\\"\\" if len(email) > 7: if re.match('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+', email) is not None: return True return False"},{"prompt":"Create a Python program to calculate the total of integers within a given range. 2,6","completion":"# Find the sum of numbers within a range def sum_range(start, end): sum = 0 for i in range(start, end + 1): sum = sum + i return sum print(sum_range(2, 6))"},{"prompt":"Create a Python program that scrapes data from a web page and stores the data in a spreadsheet. Not applicable","completion":"import requests from lxml import html import openpyxl # Setup the web page URL url = 'https://example.com/data.html' # Scrape the web page response = requests.get(url) html_data = html.fromstring(response.text) # Create an Excel workbook wb = openpyxl.Workbook() sheet = wb.active # Read the data from the web page and store it in the workbook data_table = html_data.xpath('//table') for i, row in enumerate(data_table[0].xpath('./tbody/tr'), 1): for j, cell in enumerate(row.xpath('./td'), 1): sheet.cell(row=i, column=j, value=cell.text_content().strip()) # Save the workbook wb.save(\\"data.xlsx\\")"},{"prompt":"Create a python application which randomly selects a movie from a given list of movies.","completion":"import random movies = [\\"Guardians of the Galaxy\\", \\"The Godfather\\", \\"The Shawshank Redemption\\", \\"Pulp Fiction\\", \\"Inception\\", \\"The Dark Knight\\"] def random_movie_selector(movies): return random.choice(movies) # Driver Code print(random_movie_selector(movies)) # Output (Example): # The Shawshank Redemption"},{"prompt":"Create a program in Python that takes a number of words as input and prints out a poem. words: 'love', 'wings', 'stars', 'moon', 'ocean'","completion":"words = ['love', 'wings', 'stars', 'moon', 'ocean'] poem = \\"\\" for word in words: poem += f\\"The {word} so strong and brightnTurns shadows into lightn\\" poem += f\\"The universe so vast and widenSurrounds us all with its priden\\" print(poem)"},{"prompt":"Upgrade a Python program to use async/await instead of time.sleep(). import time def do_something(): print('starting something') time.sleep(2) print('done with something') do_something()","completion":"import asyncio async def do_something(): print('starting something') await asyncio.sleep(2) print('done with something') asyncio.run(do_something())"},{"prompt":"Analyze and edit this Python code to make it faster. def find_longest(arr): length = 0 current_length = 0 for i in range(len(arr) 1): if arr[i] < arr[i+1]: current_length += 1 if current_length > length: length = current_length else: current_length = 0 return length","completion":"def find_longest(arr): length = 0 current_length = 0 prev_num = float('-inf') for i in range(len(arr)): if arr[i] > prev_num: current_length += 1 if current_length > length: length = current_length else: current_length = 0 prev_num = arr[i] return length"},{"prompt":"Create a Python program to validate an entered password according to following criteria: 1. Minimum 8 characters 2. At least 1 uppercase letter 3. At least 1 lowercase letter 4. At least 1 number","completion":"import re def validate_password(password): # password should be at least 8 characters if len(password) < 8: return False # password should have at least one number if re.search('[0-9]', password) is None: return False # password should have at least one uppercase if re.search('[A-Z]', password) is None: return False # password should have at least one lowercase if re.search('[a-z]', password) is None: return False return True"},{"prompt":"Can you design a function in Python which takes two string arguments and checks that two strings are anagrams or not? s1 = restful s2 = fluster","completion":"def is_anagram(str1, str2): if (len(str1) != len(str2)): return False list1 = sorted(list(str1)) list2 = sorted(list(str2)) for i in range(0, len(str1)): if (list1[i] != list2[i]): return False return True"},{"prompt":"Write Python code to implement a decision tree classifier. No Inpu","completion":"from sklearn import tree #features features = [[104,0], [100,0], [120,1], [80,0], [105,1]] #labels labels = [0,0,1,0,1] clf = tree.DecisionTreeClassifier() clf = clf.fit(features, labels) print(\\"Predicted Label:\\", clf.predict([[120,1]]))"},{"prompt":"Create an automated web crawler using Python. Not applicable","completion":"import requests from bs4 import BeautifulSoup def crawl(url): page = requests.get(url) soup = BeautifulSoup(page.text, 'html.parser') # retrieve all of the anchor tags # We are going to find all links out of the page tags = soup('a') for tag in tags: link = tag.get('href', None) if link != None: print(link) # Driver code if __name__ == \\"__main__\\": URL = \\"http://example.com\\" # type your address instead of example.com crawl(URL)"},{"prompt":"Design a Python program to generate Fibonacci series up to the given number.","completion":"def FibonacciSeries(num): a = 0 b = 1 print(\\"Fibonacci Series: \\") for i in range(0, num): print(a, end=\\" \\") temp = a a = b b = temp + b num = int(input(\\"Enter a number: \\")) FibonacciSeries(num)"},{"prompt":"Create a Python program for predicting the stock prices using a linear regression model. stock_prices = [ 100, 101, 98, 107, 103, 97, 111, 104, 95 ]","completion":"import numpy as np from sklearn.linear_model import LinearRegression import matplotlib.pyplot as plt # define training data x = np.array([i for i in range(len(stock_prices))]).reshape(-1,1) y = np.array(stock_prices) # create and train model model = LinearRegression() model.fit(x, y) # make predictions y_pred = model.predict(x) # plot results plt.plot(x, y, 'o-') plt.plot(x, y_pred, 'x-') plt.title('Stock Prices with Linear Regression Model') plt.xlabel('Day') plt.ylabel('Price') plt.show()"},{"prompt":"Generate a python program to print odd numbers in a given range.","completion":"def print_odd_numbers(start, end): for i in range(start, end+1): if i % 2 != 0: print(i)"},{"prompt":"Write a code to sort a list of strings according to their lengths [Python, is, a, programming, language]","completion":"def sortByLength(strings): \\"\\"\\"Sort a list of strings according to their lengths\\"\\"\\" # Sort the list using a key function return sorted(strings, key=len) if __name__ == '__main__': strings = [\\"Python\\", \\"is\\", \\"a\\", \\"programming\\", \\"language\\"] print(sortByLength(strings))"},{"prompt":"Create a Python program that models the Fibonacci sequence and prints out the first 10 terms of the sequence. Not applicable","completion":"# function to generate the nth term of the Fibonacci sequence def Fibonacci(n): if n<0: print(\\"Incorrect input\\") elif n==1: return 0 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # take input from the user nterms = 10 # check if the number of terms is valid if nterms<=0: print(\\"Please enter a positive integer\\") else: print(\\"Fibonacci sequence:\\") for i in range(1,nterms+1): print(Fibonacci(i)) # Output: Fibonacci sequence: 0 1 1 2 3 5 8 13 21 34"},{"prompt":"Create an API in Python for predicting the sentiment of a given text.","completion":"import requests def predict_sentiment(text): data = {'query': text} _URL = \\"http://localhost:5000/sentiment-prediction\\" response = requests.post(url = _URL, data = data) return response.json() sentiment = predict_sentiment(\\"This is an example sentence\\") print(sentiment)"},{"prompt":"Create a Python program to print out the multiples of 3 between 1 and 100. Not applicable","completion":"for num in range(1, 101): if (num % 3 == 0): print(num) Output: 3 6 9 12 15 18 21 24 27 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72 75 78 81 84 87 90 93 96 99"},{"prompt":"Create a Python program that sorts the given list in ascending order. unsorted_list = [5, 8, 2, 1, 3, 10]","completion":"unsorted_list = [5, 8, 2, 1, 3, 10] sorted_list = sorted(unsorted_list) print(sorted_list)"},{"prompt":"Write a Python program to print out the larger number from two input numbers.","completion":"def find_larger_number(num1, num2): if num1 > num2: return num1 else: return num2"},{"prompt":"Develop an algorithm in Python that takes an array of integers and returns the maximum of the numbers. [7, 9, 5, 10, 2]","completion":"def get_max(arr): max_num = None for num in arr: if max_num == None or num > max_num: max_num = num return max_num result = get_max([7, 9, 5, 10, 2]) print(result)"},{"prompt":"Create a GUI in Python for displaying a data table.","completion":"import tkinter as tk import pandas as pd root= tk.Tk() canvas1 = tk.Canvas(root, width = 300, height = 300, relief = 'raised') canvas1.pack() df = pd.DataFrame({'Product':['Apple','Banana','Orange'],'Price':[10,20,30]}) table = tk.LabelFrame(root, text='Product Table') table.place(relx = 0.1, rely = 0.1, relwidth = 0.8, relheight = 0.8) table_body = tk.Frame(table) table_body.place(relx = 0.1, rely = 0.1, relwidth = 0.8, relheight = 0.8) data = df.values.tolist() column_headings = list(df.columns.values) frame_header = tk.Frame(table_body) frame_header.pack(fill='both', expand='yes') for col_h in column_headings: label=tk.Label(frame_header,text=str(col_h),font=\\"Helvetica 10 bold\\") label.pack(fill='both', pady=10, padx=10, side='left') frame_table=tk.Frame(table_body) frame_table.pack(fill='both', expand='yes') row_num = 0 for row in data: col_num = 0 for col in row: label = tk.Label(frame_table,text=str(col), relief='solid', width=10) label.grid(column=col_num, row=row_num) col_num += 1 row_num += 1 root.mainloop()"},{"prompt":"Develop a Logistic Regression model in Python to predict the outcome for a given dataset with two input features.","completion":"# Importing the required libraries import numpy as np from sklearn import datasets from sklearn.linear_model import LogisticRegression # Load the iris dataset iris = datasets.load_iris() X = iris.data[:, :2] #take only first 2 features y = iris.target # Create an instance of Logistic Regression Classifier and fit the data. logreg = LogisticRegression() logreg.fit(X, y)"},{"prompt":"Given a function that takes a string as an argument, write a Python code snippet to capitalize the first letter of every word in the string. def capitalize_string(str)","completion":"def capitalize_string(str): words = str.split(' ') capitalized_words = [word.capitalize() for word in words] capitalized_string = ' '.join(capitalized_words) return capitalized_string"},{"prompt":"Make a program in Python that takes a list of integers as input and prints the average, maximum, and minimum. [1, 7, 4, 6]","completion":"def calculate_avg_max_min(list_of_int): avg = sum(list_of_int) / len(list_of_int) maximum = max(list_of_int) minimum = min(list_of_int) return avg, maximum, minimum list_of_int = [1, 7, 4, 6] avg, max_int, min_int = calculate_avg_max_min(list_of_int) print(\\"Average =\\", avg) print(\\"Maximum =\\", max_int) print(\\"Minimum =\\", min_int)"},{"prompt":"Create a Google Cloud Platform application to deploy the provided code to App Engine. Python code: def hello_world(): print(Hello, world!)","completion":"# Google Cloud Platform Application from google.appengine.api import appinfo app = appinfo.AppInfoExternal( application='myapp', version='1', runtime='python27', api_version='1', threadsafe=True, ) # Create a handler for the endpoint def hello_world(): print(\\"Hello, world!\\") # Map the handler to the endpoint app.handlers.extend([ ('/', hello_world) ]) # Deploy the application app.deploy()"},{"prompt":"Write python code to sort a list of strings in descending order of the number of vowels in each string. [apple, banana, kiwi, strawberry]","completion":"def sort_list_by_vowels(list_of_strings): vowels = 'aeiouAEIOU' # Create a list of tuples, with each tuple having a # string and the number of vowels it has lst = [] for i in list_of_strings: count = 0 for j in i: if j in vowels: count += 1 lst.append((i, count)) # Sort the list of tuples based on the number of vowels lst.sort(key = lambda x: x[1],reverse=True) # Extract the strings from the list of tuples final_list = [] for i in lst: final_list.append(i[0]) return final_list print(sort_list_by_vowels([\\"apple\\", \\"banana\\", \\"kiwi\\", \\"strawberry\\"]))"},{"prompt":"Create an AI chatbot in Python using the NLTK library. Not applicable","completion":"import nltk import random responses = { 'question': [ \\"I don't know :(\\", 'you tell me!' ], 'statement': [ 'tell me more!', 'why do you think that?', 'how long have you felt this way?', 'I find that extremely interesting', 'can you back that up?', 'oh wow!', ':)' ] } def respond(message): # check for a question mark if message.endswith('?'): # return a random question return random.choice(responses['question']) # return a random statement return random.choice(responses['statement']) # create a dictionary for our bag of words dictionary = [] for key, value in responses.items(): for string in value: # tokenize each string and add to our bag of words tokens = nltk.tokenize.word_tokenize(string) dictionary += tokens # preprocessing def preprocess(message): # tokenize the message tokens = nltk.tokenize.word_tokenize(message) # convert message to lowercase tokens = [w.lower() for w in tokens] # remove punctuation from each word import string table = str.maketrans('','',string.punctuation) stripped = [w.translate(table) for w in tokens] # remove remaining tokens that are not alphabetic words = [word for word in stripped if word.isalpha()] # filter out stop words from nltk.corpus import stopwords stop_words = set(stopwords.words('english')) words = [w for w in words if not w in stop_words] # join filtered tokens back into a string sentence return ' '.join(words) # check for a greeting def greetingCheck(message): message = message.lower() for string in responses['greeting']: if message.startswith(string): return True # main function def main(): while True: message = input('INPUT :t') if greetingCheck(message): print('OUTPUT :t') print(random.choice(responses['greeting'])) else: message_processed = preprocess(message).lower() print('OUTPUT :t', respond(message_processed)) main()"},{"prompt":"Modify a Python program to optimize its performance and handle errors gracefully. A Python program to read a file and print its conte","completion":"# Library import import os # Path of the file file_name = \\"myfile.txt\\" # Open file try: with open(file_name, 'r') as f: # Read file contents = f.read() # Print file print(contents) except IOError: print('Error: file not found!') finally: if f: f.close()"},{"prompt":"Create a function in Python that takes in a dictionary, and returns the same dictionary with the values sorted in ascending order. dictionary = { 'Tom': 20, 'Jerry': 30, 'Jose': 25 }","completion":"def sortDict(dictionary): # Sort the keys. sorted_keys = sorted(dictionary.keys()) # Initialize a new dictionary with the sorted keys. sorted_dict = dict.fromkeys(sorted_keys) # Assign values from the original dictionary to the sorted dictionary. for key in sorted_dict: sorted_dict[key] = dictionary[key] # Return the sorted dictionary. return sorted_dict dictionary = { 'Tom': 20, 'Jerry': 30, 'Jose': 25 } print(sortDict(dictionary)) # {'Jose': 25, 'Jerry': 30, 'Tom': 20}"},{"prompt":"Create a Python script to make an HTTP request and parse the JSON response. The API URL is https://www.example.com/api/v1/d","completion":"import requests # api-endpoint URL = \\"https://www.example.com/api/v1/data\\" # location given here # sending get request and saving the response as response object r = requests.get(url = URL) # extracting data in json format data = r.json() # extracting latitude, longitude and formatted address # of the first matching location # latitude = data['results'][0]['geometry']['location']['lat'] # longitude = data['results'][0]['geometry']['location']['lng'] # formatted_address = data['results'][0]['formatted_address'] # printing the output # print(\\"Latitude:%snLongitude:%snFormatted Address:%s\\" # %(latitude, longitude,formatted_address))"},{"prompt":"This code provides support for custom structures in both client and server. It supports a subset of features but should be enough for custom structures. To use it, import the necessary libraries and call the \`load_type_definitions\` function with the server and nodes as arguments. The function will download the XML from the given variable node defining the custom structures. If no node is given, it will attempt to import variables from all nodes under 0:OPC Binary. The code is generated and executed on the fly. The resulting classes are returned in a dictionary. To load enumeration data types on the server and generate Python Enums in the ua scope for them, call the \`load_enums\` function with the server as an argument.","completion":"\\"\\"\\" Support for custom structures in client and server We only support a subset of features but should be enough for custom structures \\"\\"\\" import os import importlib import re import logging # The next two imports are for generated code from datetime import datetime import uuid from enum import Enum, IntEnum, EnumMeta from lxml import objectify from opcua.ua.ua_binary import Primitives from opcua import ua logger = logging.getLogger(__name__) def get_default_value(uatype, enums): if uatype == \\"String\\": return \\"None\\" elif uatype == \\"Guid\\": return \\"uuid.uuid4()\\" elif uatype in (\\"ByteString\\", \\"CharArray\\", \\"Char\\"): return \\"b''\\" elif uatype == \\"Boolean\\": return \\"True\\" elif uatype == \\"DateTime\\": return \\"datetime.utcnow()\\" elif uatype in (\\"Int16\\", \\"Int32\\", \\"Int64\\", \\"UInt16\\", \\"UInt32\\", \\"UInt64\\", \\"Double\\", \\"Float\\", \\"Byte\\", \\"SByte\\"): return 0 elif uatype in enums: return \\"ua.\\" + uatype + \\"(\\" + enums[uatype] + \\")\\" elif hasattr(ua, uatype) and issubclass(getattr(ua, uatype), Enum): # We have an enum, try to initilize it correctly val = list(getattr(ua, uatype).__members__)[0] return \\"ua.{}([})\\".format(uatype, val) else: return \\"ua.{}()\\".format(uatype) class EnumType(object): def __init__(self, name): self.name = name self.fields = [] self.typeid = None def get_code(self): code = \\"\\"\\" class {0}(IntEnum): ''' {0} EnumInt autogenerated from xml ''' \\"\\"\\".format(self.name) for EnumeratedValue in self.fields: name = EnumeratedValue.Name value = EnumeratedValue.Value code += \\" {} = {}n\\".format(name, value) return code class EnumeratedValue(object): def __init__(self, name, value): if name == \\"None\\": name = \\"None_\\" name = name.replace(\\" \\", \\"\\") self.Name = name self.Value = value class Struct(object): def __init__(self, name): self.name = name self.fields = [] self.typeid = None def get_code(self): code = \\"\\"\\" class {0}(object): ''' {0} structure autogenerated from xml ''' \\"\\"\\".format(self.name) code += \\" ua_types = [n\\" for field in self.fields: prefix = \\"ListOf\\" if field.array else \\"\\" uatype = prefix + field.uatype if uatype == \\"ListOfChar\\": uatype = \\"String\\" code += \\" ('{}', '{}'),n\\".format(field.name, uatype) code += \\" ]\\" code += \\"\\"\\" def __init__(self): \\"\\"\\" if not self.fields: code += \\" pass\\" for field in self.fields: code += \\" self.{} = {}n\\".format(field.name, field.value) return code class Field(object): def __init__(self, name): self.name = name self.uatype = None self.value = None self.array = False class StructGenerator(object): def __init__(self): self.model = [] def make_model_from_string(self, xml): obj = objectify.fromstring(xml) self._make_model(obj) def make_model_from_file(self, path): obj = objectify.parse(path) root = obj.getroot() self._make_model(root) def _make_model(self, root): enums = {} for child in root.iter(\\"{*}EnumeratedType\\"): intenum = EnumType(child.get(\\"Name\\")) for xmlfield in child.iter(\\"{*}EnumeratedValue\\"): name = xmlfield.get(\\"Name\\") value = xmlfield.get(\\"Value\\") enumvalue = EnumeratedValue(name, value) intenum.fields.append(enumvalue) enums[child.get(\\"Name\\")] = value self.model.append(intenum) for child in root.iter(\\"{*}StructuredType\\"): struct = Struct(child.get(\\"Name\\")) array = False for xmlfield in child.iter(\\"{*}Field\\"): name = xmlfield.get(\\"Name\\") if name.startswith(\\"NoOf\\"): array = True continue field = Field(_clean_name(name)) field.uatype = xmlfield.get(\\"TypeName\\") if \\":\\" in field.uatype: field.uatype = field.uatype.split(\\":\\")[1] field.uatype = _clean_name(field.uatype) field.value = get_default_value(field.uatype, enums) if array: field.array = True field.value = [] array = False struct.fields.append(field) self.model.append(struct) def save_to_file(self, path, register=False): _file = open(path, \\"wt\\") self._make_header(_file) for struct in self.model: _file.write(struct.get_code()) if register: _file.write(self._make_registration()) _file.close() def _make_registration(self): code = \\"nn\\" for struct in self.model: code += \\"ua.register_extension_object('{name}', ua.NodeId.from_string('{nodeid}'), {name})n\\".format(name=struct.name, nodeid=struct.typeid) return code def get_python_classes(self, env=None): return _generate_python_class(self.model, env=env) def save_and_import(self, path, append_to=None): \\"\\"\\" save the new structures to a python file which be used later import the result and return resulting classes in a dict if append_to is a dict, the classes are added to the dict \\"\\"\\" self.save_to_file(path) name = os.path.basename(path) name = os.path.splitext(name)[0] mymodule = importlib.import_module(name) if append_to is None: result = {} else: result = append_to for struct in self.model: result[struct.name] = getattr(mymodule, struct.name) return result def _make_header(self, _file): _file.write(\\"\\"\\" ''' THIS FILE IS AUTOGENERATED, DO NOT EDIT!!! ''' from datetime import datetime import uuid from opcua import ua \\"\\"\\") def set_typeid(self, name, typeid): for struct in self.model: if struct.name == name: struct.typeid = typeid return def load_type_definitions(server, nodes=None): \\"\\"\\" Download xml from given variable node defining custom structures. If no node is given, attemps to import variables from all nodes under \\"0:OPC Binary\\" the code is generated and imported on the fly. If you know the structures are not going to be modified it might be interresting to copy the generated files and include them in you code \\"\\"\\" if nodes is None: nodes = [] for desc in server.nodes.opc_binary.get_children_descriptions(): if desc.BrowseName != ua.QualifiedName(\\"Opc.Ua\\"): nodes.append(server.get_node(desc.NodeId)) structs_dict = {} generators = [] for node in nodes: xml = node.get_value() xml = xml.decode(\\"utf-8\\") generator = StructGenerator() generators.append(generator) generator.make_model_from_string(xml) # generate and execute new code on the fly generator.get_python_classes(structs_dict) # same but using a file that is imported. This can be usefull for debugging library #name = node.get_browse_name().Name # Make sure structure names do not contain charaters that cannot be used in Python class file names #name = _clean_name(name) #name = \\"structures_\\" + node.get_browse_name().Name #generator.save_and_import(name + \\".py\\", append_to=structs_dict) # register classes # every children of our node should represent a class for ndesc in node.get_children_descriptions(): ndesc_node = server.get_node(ndesc.NodeId) ref_desc_list = ndesc_node.get_references(refs=ua.ObjectIds.HasDescription, direction=ua.BrowseDirection.Inverse) if ref_desc_list: #some server put extra things here name = _clean_name(ndesc.BrowseName.Name) if not name in structs_dict: logger.warning(\\"%s is found as child of binary definition node but is not found in xml\\", name) continue nodeid = ref_desc_list[0].NodeId ua.register_extension_object(name, nodeid, structs_dict[name]) # save the typeid if user want to create static file for type definitnion generator.set_typeid(name, nodeid.to_string()) for key, val in structs_dict.items(): if isinstance(val, EnumMeta) and key is not \\"IntEnum\\": setattr(ua, key, val) return generators, structs_dict def _clean_name(name): \\"\\"\\" Remove characters that might be present in OPC UA structures but cannot be part of of Python class names \\"\\"\\" name = re.sub(r'W+', '_', name) name = re.sub(r'^[0-9]+', r'_g<0>', name) return name def _generate_python_class(model, env=None): \\"\\"\\" generate Python code and execute in a new environment return a dict of structures {name: class} Rmw: Since the code is generated on the fly, in case of error the stack trace is not available and debugging is very hard... \\"\\"\\" if env is None: env = {} # Add the required libraries to dict if \\"ua\\" not in env: env['ua'] = ua if \\"datetime\\" not in env: env['datetime'] = datetime if \\"uuid\\" not in env: env['uuid'] = uuid if \\"enum\\" not in env: env['IntEnum'] = IntEnum # generate classes one by one and add them to dict for element in model: code = element.get_code() exec(code, env) return env def load_enums(server, env=None): \\"\\"\\" Read enumeration data types on server and generate python Enums in ua scope for them \\"\\"\\" model = [] nodes = server.nodes.enum_data_type.get_children() if env is None: env = ua.__dict__ for node in nodes: name = node.get_browse_name().Name try: c = _get_enum_strings(name, node) except ua.UaError as ex: try: c = _get_enum_values(name, node) except ua.UaError as ex: logger.info(\\"Node %s, %s under DataTypes/Enumeration, does not seem to have a child called EnumString or EumValue: %s\\", name, node, ex) continue if not hasattr(ua, c.name): model.append(c) return _generate_python_class(model, env=env) def _get_enum_values(name, node): def_node = node.get_child(\\"0:EnumValues\\") val = def_node.get_value() c = EnumType(name) c.fields = [EnumeratedValue(enumval.DisplayName.Text, enumval.Value) for enumval in val] return c def _get_enum_strings(name, node): def_node = node.get_child(\\"0:EnumStrings\\") val = def_node.get_value() c = EnumType(name) c.fields = [EnumeratedValue(st.Text, idx) for idx, st in enumerate(val)] return c"},{"prompt":"Write a Python program to search a list of numbers using a binary search algorithm. list = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40]","completion":"def binary_search(numbers, number_to_find, low, high): if low > high: return False mid = (low + high) // 2 if numbers[mid] == number_to_find: return True elif numbers[mid] > number_to_find: return binary_search(numbers, number_to_find, low, mid - 1) else: return binary_search(numbers, number_to_find, mid + 1, high) if __name__ == '__main__': numbers = [1, 3, 8, 10, 12, 15, 17, 20, 22, 34, 38, 40] number_to_find = int(input('Enter a number: ')) result = binary_search(numbers, number_to_find, 0, len(numbers) - 1) if result is True: print('The number is in the list') else: print('The number is NOT in the list')"},{"prompt":"Write a function in Python which converts a given string to a list, split by words. Hello world!","completion":"# Function to convert a string to a list, split by words def string_to_list(string): # Initialize an empty list word_list = [] # Iterate through each character of the string for character in string: word = \\"\\" while character != \\" \\" and character != \\"\\": word += character string = string[1:] character = string[0] # Add each word to the list word_list.append(word) return word_list # Driver code my_string = \\"Hello world!\\" word_list = string_to_list(my_string) print(word_list) # prints ['Hello', 'world!']"},{"prompt":"Create a class that inherits from the Python list object, and adds a new method called reverse_list.","completion":"class ReverseList(list): def reverse_list(self): return self[::-1]"},{"prompt":"Create a search algorithm using Python to find an item in a list of tuples. arr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)] key = 'd'","completion":"def search(arr, key): for item in arr: if item[0] == key: return item[1] return \\"Not found\\" # Driver code arr = [('a', 2), ('b', 4), ('c', 6), ('d', 7)] key = 'd' print(search(arr, key))"},{"prompt":"Generate a random set of numbers in Python with a size of 10 and range between 1 and 50.","completion":"import random random_set = random.sample(range(1,51), 10) print(random_set)"},{"prompt":"Write a Python function to split a given string into equal parts in a loop. string = Hello World","completion":"def split_string(string): result = [] for i in range(0, len(string), int(len(string) / 2)): result.append(string[i: i + int(len(string) / 2)]) return result"},{"prompt":"Design a python code to remove a character from a given string. s = Hello World","completion":"def remove_char(s, char): s = s.replace(char, '') return s remove_char(s, 'l')"},{"prompt":"Write an algorithm in Python to check whether an input array of integers contains duplicates or not. array = [3, 5, 2, 4, 2]","completion":"def check_duplicates(arr): # Create a set to store elements s = set() # Iterate through the array and check if element is in set for num in arr: if num in s: return True else: s.add(num) return False arr = [3, 5, 2, 4, 2] # Print the result if check_duplicates(arr): print('Array contains duplicates') else: print('Array has no duplicates') // Output: Array contains duplicates"},{"prompt":"The given code is a Python script that converts GREEND dataset files into an HDF5 file format. To use it, follow these steps: 1. Import the necessary libraries: \`os\`, \`pandas\`, \`numpy\`, \`datetime\`, \`time\`, \`nilmtk\`, \`nilm_metadata\`, \`warnings\`, \`io\`, and \`multiprocessing\`. 2. Define a function \`_get_blocks(filename)\` that reads a GREEND CSV file and returns a list of dataframes. 3. Define a function \`_get_houses(greend_path)\` that returns a list of houses in the GREEND dataset. 4. Define a function \`convert_greend(greend_path, hdf_filename, use_mp=True)\` that converts the GREEND dataset files into an HDF5 file format. The function takes three arguments: \`greend_path\` (the root path of the GREEND dataset), \`hdf_filename\` (the destination HDF5 filename), and \`use_mp\` (a boolean flag that indicates whether to use multiprocessing to load the files for each building). 5. Call the \`convert_greend\` function with the appropriate arguments to convert the GREEND dataset files into an HDF5 file format.","completion":"from os import listdir, getcwd from os.path import join, isdir, isfile, dirname, abspath import pandas as pd import numpy as np import datetime import time from nilmtk.datastore import Key from nilmtk.measurement import LEVEL_NAMES from nilm_metadata import convert_yaml_to_hdf5 import warnings import numpy as np from io import StringIO from multiprocessing import Pool from nilmtk.utils import get_module_directory def _get_blocks(filename): ''' Return a list of dataframes from a GREEND CSV file GREEND files can be interpreted as multiple CSV blocks concatenated into a single file per date. Since the columns of the individual blocks can vary in a single file, they need to be read separately. There are some issues we need to handle in the converter: - the headers from the multiple blocks - corrupted data (lines with null chars, broken lines) - more fields than specified in header ''' block_data = None dfs = [] previous_header = None print(filename) # Use float64 for timestamps and float32 for the rest of the columns dtypes = {} dtypes['timestamp'] = np.float64 def _process_block(): if block_data is None: return block_data.seek(0) try: # ignore extra fields for some files error_bad_lines = not ( ('building5' in filename and 'dataset_2014-02-04.csv' in filename) ) df = pd.read_csv(block_data, index_col='timestamp', dtype=dtypes, error_bad_lines=error_bad_lines) except: #(pd.errors.ParserError, ValueError, TypeError): print(\\"ERROR\\", filename) raise df.index = pd.to_datetime(df.index, unit='s') df = df.tz_localize(\\"UTC\\").tz_convert(\\"CET\\").sort_index() dfs.append(df) block_data.close() special_check = ( ('dataset_2014-01-28.csv' in filename and 'building5' in filename) or ('dataset_2014-09-02.csv' in filename and 'building6' in filename) ) with open(filename, 'r') as f: for line in f: # At least one file have a bunch of nulls present, let's clean the data line = line.strip('0') if 'time' in line: # Found a new block if not line.startswith('time'): # Some lines are corrupted, e.g. 1415605814.541311,0.0,NULL,NUtimestamp,000D6F00029C2918... line = line[line.find('time'):] if previous_header == line.strip(): # Same exact header, we can treat it as the same block # print('Skipping split') continue # Using a defaultdict for the dtypes didn't work with read_csv, # so we fill a normal dict when we find the columns cols = line.strip().split(',')[1:] for col in cols: dtypes[col] = np.float32 # print('Found new block') _process_block() block_data = StringIO() previous_header = line.strip() if special_check: if ('0.072.172091508705606' in line or '1409660828.0753369,NULL,NUL' == line): continue block_data.write(line) # Process the remaining block _process_block() return (filename, dfs) def _get_houses(greend_path): house_list = listdir(greend_path) return [h for h in house_list if isdir(join(greend_path,h))] def convert_greend(greend_path, hdf_filename, use_mp=True): \\"\\"\\" Parameters ---------- greend_path : str The root path of the greend dataset. hdf_filename : str The destination HDF5 filename (including path and suffix). use_mp : bool Defaults to True. Use multiprocessing to load the files for each building. \\"\\"\\" store = pd.HDFStore(hdf_filename, 'w', complevel=5, complib='zlib') houses = sorted(_get_houses(greend_path)) print('Houses found:', houses) if use_mp: pool = Pool() h = 1 # nilmtk counts buildings from 1 not from 0 as we do, so everything is shifted by 1 for house in houses: print('Loading', house) abs_house = join(greend_path, house) dates = [d for d in listdir(abs_house) if d.startswith('dataset')] target_filenames = [join(abs_house, date) for date in dates] if use_mp: house_data = pool.map(_get_blocks, target_filenames) # Ensure the blocks are sorted by date and make a plain list house_data_dfs = [] for date, data in sorted(house_data, key=lambda x: x[0]): house_data_dfs.extend(data) else: house_data_dfs = [] for fn in target_filenames: house_data_dfs.extend(_get_blocks(fn)[1]) overall_df = pd.concat(house_data_dfs, sort=False).sort_index() dups_in_index = overall_df.index.duplicated(keep='first') if dups_in_index.any(): print(\\"Found duplicated values in index, dropping them.\\") overall_df = overall_df[~dups_in_index] m = 1 for column in overall_df.columns: print(\\"meter {}: {}\\".format(m, column)) key = Key(building=h, meter=m) print(\\"Putting into store...\\") df = overall_df[column].to_frame() #.dropna(axis=0) # if drop_duplicates: # print(\\"Dropping duplicated values in data...\\") # df = df.drop_duplicates() df.columns = pd.MultiIndex.from_tuples([('power', 'active')]) df.columns.set_names(LEVEL_NAMES, inplace=True) store.put(str(key), df, format = 'table') m += 1 # print('Flushing store...') # store.flush() h += 1 store.close() # retrieve the dataset metadata in the metadata subfolder metadata_dir = join(get_module_directory(), 'dataset_converters', 'greend', 'metadata') convert_yaml_to_hdf5(metadata_dir, hdf_filename) #is only called when this file is the main file... only test purpose if __name__ == '__main__': t1 = time.time() convert_greend('GREEND_0-2_300615', 'GREEND_0-2_300615.h5') dt = time.time() - t1 print() print() print('Time passed: {}:{}'.format(int(dt/60), int(dt%60)))"},{"prompt":"Write a Python program to generate Pascal's Triangle up to n rows.","completion":"def pascal_triangle(n): # 1st base case if n == 0: return [] elif n == 1: return [[1]] # 2nd base case else: new_row = [1] result = pascal_triangle(n-1) previous_row = result[-1] # making the current row for i in range(len(previous_row)-1): value = previous_row[i] + previous_row[i+1] new_row.append(value) new_row += [1] result.append(new_row) return result"},{"prompt":"Create a Python program to find and print all the prime numbers present in a given array. [2, 3, 5, 6, 5, 7, 8, 1, 6]","completion":"def printPrime(arr): for i in range (len(arr)): if isPrime[arr[i]]: print(arr[i], end = \\" \\") # Function to check if a number is prime or not def isPrime(n): # Corner case if (n <= 1): return False # Check from 2 to n-1 for i in range(2, n): if n % i == 0: return False; return True arr = [2, 3, 5, 6, 5, 7, 8, 1, 6] printPrime(arr)"},{"prompt":"Create an API route in Python that allows users to retrieve the top 5 most recent posts from a blog. Blog post d","completion":"import datetime @app.route('/posts') def get_posts(): posts = Post.query .order_by(Post.created_at.desc()) .limit(5) return jsonify([{ 'title': post.title, 'date': post.created_at.strftime('%Y-%m-%d'), 'body': post.body } for post in posts])"},{"prompt":"Generate a Random Forest classifier in python","completion":"from sklearn.ensemble import RandomForestClassifier clf = RandomForestClassifier(n_estimators = 100, criterion = \\"entropy\\", random_state = 0)"},{"prompt":"Create a serverless AWS Lambda function in Python that takes two numbers as input, multiplies them, and returns the result. Not applicable","completion":"import json def lambda_handler(event, context): input1 = event['input1'] input2 = event['input2'] result = input1 * input2 return { 'statusCode': 200, 'body': json.dumps({'result': result}) }"},{"prompt":"mplement a class in Python that can process a text and count the number of words Hello world, this is a test","completion":"class WordCounter: def __init__(self): self.count = 0 def countWords(self, text): words = text.split() # Splits the sentence into a list of words self.count = len(words) # Counts the number of words return self.count # Creating an instance of the WordCounter class wordCounter = WordCounter() # Counting the words in the text wordCount = wordCounter.countWords(\\"Hello world, this is a test\\") print(wordCount) # Outputs 4"},{"prompt":"Construct a function to reverse an array in Python. [1, 2, 3, 4]","completion":"def reverse_array(arr): left = 0 right = len(arr) - 1 while left < right: temp = arr[left] arr[left] = arr[right] arr[right] = temp left += 1 right -= 1 arr = [1, 2, 3, 4] reverse_array(arr) print(arr) # [4, 3, 2, 1]"},{"prompt":"Write a Python program to find all numbers divisible by sixteen from a given list of numbers. [20, 16, 5, 6, 26, 48]","completion":"list_numbers = [20, 16, 5, 6, 26, 48] divisible_numbers = [] for number in list_numbers: if number % 16 == 0: divisible_numbers.append(number) print(divisible_numbers)"},{"prompt":"Generate a web scraper using Python and BeautifulSoup that will collect and store the titles of all articles on a given website. url: http://example.com","completion":"import requests from bs4 import BeautifulSoup url = \\"http://example.com\\" # Get the HTML page r = requests.get(url) # Parse the HTML soup = BeautifulSoup(r.text, 'html.parser') # Get all elements with the class \\"article-title\\" titles = soup.find_all(class_=\\"article-title\\") # Store the titles in a list titles_list = [] for title in titles: titles_list.append(title.text) # Print out the titles for title in titles_list: print(title)"},{"prompt":"Rewrite the given code block using OOP concepts in Python. num1 = 0 num2 = 0 def add(): return num1 + num2 def subtract(): return num1 num2","completion":"class MathOperations: def __init__(self, num1, num2): self.num1 = num1 self.num2 = num2 def add(self): return self.num1 + self.num2 def subtract(self): return self.num1 - self.num2 num1 = 0 num2 = 0 math_operation = MathOperations(num1, num2) print(math_operation.add()) print(math_operation.subtract())"},{"prompt":"Generate a function in Python which takes an array as an argument and returns an array of length two, with the first element being the maximum value and the second element being the minimum value of the array. [1, 5, 7, 3, 9]","completion":"def minmax(array): max_val = max(array) min_val = min(array) return [max_val, min_val]"},{"prompt":"Create an algorithm in Python to find the number of pairwise disjoint subsets of a given set. {1, 2, 3, 4, 5}","completion":"def subsets(s): res = [] for i in range(1 << len(s)): subset = [list(s)[x] for x in range(len(s)) if i & (1 << x)] if not any(set(subset).issubset(r) for r in res): res.append(subset) return res"},{"prompt":"Design a function in Python that removes any characters from a given string that appears 2 or more times. aabcdbb","completion":"def remove_duplicates(string): res = \\"\\" for ch in string: if string.count(ch) < 2: res += ch return res string = \\"aabcdbb\\" print(remove_duplicates(string)) # prints acdb"},{"prompt":"Solve mathematical expression cos(x) + sin(x) = 0 using Python. Not applicable","completion":"import numpy as np x = np.arange(-2*np.pi, 2*np.pi, 0.5) y = np.cos(x) + np.sin(x) solution = x[np.where(y == 0)] print(solution)"},{"prompt":"Using only base Python (no 3rd party libraries), create a function that checks whether a number is prime or not.","completion":"def is_prime(num): for i in range(2, int(num / 2)): if num % i == 0: return False else: if num < 2: return False else: return True"},{"prompt":"mprove this Python code so that it prints out an appropriate error when the index is out of bounds. def search(list, index): return list[index]","completion":"def search(lst, index): if index < 0 or index >= len(lst): print(\\"Index out of bounds\\") return None else: return lst[index]"},{"prompt":"Generate a Python program to calculate the median of a given list of integers. The list of integers is [1,2,3,4,5].","completion":"# This program is used to calculate the median of a given list of integers. # The input list of integers nums = [1,2,3,4,5] # Function to calculate the median def median(nums): nums.sort() if len(nums) % 2 == 0: median = (nums[len(nums)//2 - 1] + nums[len(nums)//2])/2 else: median = nums[len(nums)//2] return median # Main program if __name__== \\"__main__\\": print(median(nums))"},{"prompt":"Create a function in Python for computing the dot product of two given vectors.","completion":"def dotProduct(vector1, vector2): dotProd = 0 for i in range(len(vector1)): dotProd += vector1[i] * vector2[i] return dotProd"},{"prompt":"Write a Python script to generate a basic HTML page with a title, header, body, and footer sections. The page title: Sample Page","completion":"<html> <head> <title>Sample Page</title> </head> <body> <h1>Sample Page</h1> <p>This page has a header, a body, and a footer.</p> <footer> <p>This is the footer.</p> </footer> </body> </html>"},{"prompt":"Write a Python program that prints out all the prime numbers between 0 and 100.","completion":"def isPrime(n): \\"\\"\\" This function checks if a given number is a prime or not \\"\\"\\" if n == 1: return False for i in range(2, n): if n % i == 0: return False return True def printPrime(): \\"\\"\\" This function prints all the prime numbers in between 0 and 100 \\"\\"\\" for i in range(0, 101): if isPrime(i): print(i) printPrime()"},{"prompt":"mplement a default Python class for a message object. The class should implement \`__init__\` and \`__str__\` methods, and have a \`text\` attribute. Not applicable","completion":"class Message: def __init__(self, text): self.text = text def __str__(self): return self.text"},{"prompt":"Write a Python program to convert a timestamp to a formatted date","completion":"def timestamp_to_date(timestamp): return datetime.datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')"},{"prompt":"Edit the following Python code so that it will run without any errors. print(Hello World) if a == b print(A is equal to B)","completion":"print(\\"Hello World\\") if a == b: print(\\"A is equal to B\\")"},{"prompt":"Construct a Python program that checks if a string is a palindrome or not.","completion":"def is_palindrome(string): left_pos = 0 right_pos = len(string) - 1 while right_pos >= left_pos: if string[left_pos] != string[right_pos]: return False left_pos += 1 right_pos -= 1 return True"},{"prompt":"Create a Python code to check if two DNA sequences are equal. ATTCTCA, ATTCCT","completion":"def equal(dna1, dna2): if (dna1 ==dna2): return True else: return False dna1 = 'ATTCTCA' dna2 = 'ATTCCTA' print(equal(dna1,dna2))"},{"prompt":"Write a Python script to swap two variables.","completion":"x = 10 y = 20 #Swap the values x, y = y, x print(\\"After swapping: x =\\", x, \\"and y =\\", y)"},{"prompt":"Design and implement a Python program to print out the numbers from 1 to 100, but replace any number divisible by 3 with Fizz and any number divisible by 5 with Buzz.","completion":"for i in range(1,101): if (i % 15 == 0): print(\\"FizzBuzz\\") elif (i % 3 == 0): print(\\"Fizz\\") elif (i % 5 == 0): print(\\"Buzz\\") else: print(i)"},{"prompt":"Create a python program to find xintercept of a quadratic equation ax2 + bx + c = 0. a = 1, b = 4, c = 5","completion":"import math def quadratic_x_intercept(a, b, c): discriminant = b**2 - 4*a*c if discriminant >= 0: x1_intercept = (-b+math.sqrt(discriminant))/(2*a) x2_intercept = (-b-math.sqrt(discriminant))/(2*a) return x1_intercept, x2_intercept else: return 'No real solutions exist!' a = 1 b = 4 c = -5 intercepts = quadratic_x_intercept(a, b, c) print(intercepts) # Output (2.0, -2.5)"},{"prompt":"Develop a function in Python that takes a string and an integer as input and returns the string with the length of the integer. 'Hello World', 5","completion":"def truncateString(inputString, length): return inputString[:length] print(truncateString('Hello World', 5))"},{"prompt":"Create a script to encode and decode Base64 strings using Python. Not applicable","completion":"# encode import base64 string = \\"Hello World!\\" #Encode to Base64 encodedBytes = base64.b64encode(string.encode(\\"utf-8\\")) encodedString = str(encodedBytes, \\"utf-8\\") print(encodedString) # decode encodedString = 'SGVsbG8gV29ybGQh' #Decode from Base64 decodedBytes = base64.b64decode(encodedString) decodedString = str(decodedBytes, \\"utf-8\\") print(decodedString)"},{"prompt":"Create a function to compute the maximum of two numbers in Python.","completion":"def maximum(x, y): if x > y: return x else: return y"},{"prompt":"Write an optimization code in Python to reduce the cost of producing certain items. Items: 4 Cakes Cost of Each Cake: 1","completion":"def optimization(items, cost): \\"\\"\\" Function to optimize cost production \\"\\"\\" total_cost = 0 total_items = len(items) while total_items > 0: # Produce one item at a time total_items -= 1 total_cost += cost return total_cost items = [4] cost = 1 total_cost = optimization(items, cost) print(\\"Total cost is:\\", total_cost)"},{"prompt":"Write a python program to complete this task. Given two strings, find the length of the smallest substring that contains both of them. Input: abbcd and accde","completion":"def shortest_substring(s1, s2): s1_len = len(s1) s2_len = len(s2) res_str = \\"\\" res_len = s1_len + s2_len for i in range(s1_len): for j in range(s2_len): # Initializing starting and ending indexes # of current substring x = i y = j # Initializing substring tmp_str = \\"\\" # flag to keep track of the order in which two # characters have been found flag = 0 while (x < s1_len and y < s2_len): if s1[x] != s2[y]: break # tmp_str stores the current substring if flag == 0: tmp_str += s1[x] else: tmp_str += s2[y]; x += 1 y += 1 flag = 1 - flag # Updating minimum length substring if (len(tmp_str) < res_len): res_len = len(tmp_str) res_str = tmp_str return res_str result = shortest_substring(\\"abbcd\\", \\"accde\\") print(result)"},{"prompt":"Generate a 2dimensional array with 7 columns and 5 rows in Python.","completion":"import numpy as np # creating 2-dimensional array arr = np.array([[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]) # displaying the array print (\\"2-dimensional array is:: \\", arr)"},{"prompt":"Compose a program in Python to find the sum of an array of integers.","completion":"# Compose a program in Python to find the sum of an array of integers def array_sum(arr): \\"\\"\\" Compute the sum of an array of integers. Parameters ---------- arr : array_like The array of integers. Returns ------- int The sum of the array entries. \\"\\"\\" sum = 0 for n in arr: sum += n return sum"},{"prompt":"Create a Python function to combine two strings. String 1: Hello String 2: World","completion":"def combine(str1, str2): return str1 + str2"},{"prompt":"Create a function in Python that returns the sequential median value from an array of integers. arr = [1, 3, 5, 6, 9, 11]","completion":"def find_median(arr): n = len(arr) arr.sort() if n % 2 != 0: return arr[n//2] return (arr[(n-1)//2] + arr[n//2]) / 2.0"},{"prompt":"Find a Python library to create a connection to a MongoDB database and import the data.","completion":"# Import the necessary library import pymongo # Establish a connection to the MongoDB database client = pymongo.MongoClient(\\"mongodb://localhost:27017/\\") # Import the data into the database db = client.myDatabase records = db.myCollection with open('data.json', 'r') as f: data = json.load(f) records.insert_many(data)"},{"prompt":"Create a Python script that given a list of strings and a target string, returns the strings from the list that contain the target string. ['hello world', 'good bye', 'hello', 'hello planet'], 'hello'","completion":"target = 'hello' list_strings = ['hello world', 'good bye', 'hello', 'hello planet'] results = [string for string in list_strings if target in string] print(results) # Output: ['hello world', 'hello', 'hello planet']"},{"prompt":"mplement a web service using Python Flask to generate a pie chart from input data. Sample input data: [1, 2, 4, 6]","completion":"import flask from flask import request, jsonify import matplotlib.pyplot as plt # create the Flask app app = flask.Flask(__name__) app.config[\\"DEBUG\\"] = True # function to generate the pie chart def generate_pie_chart(data): fig, ax = plt.subplots() ax.pie(data, labels=['1', '2', '4', '6'], autopct='%1.1f%%') ax.axis('equal') return fig # home route @app.route('/', methods=['GET']) def home(): return '''<h1>Pie Chart Generator</h1> <p>A web service to generate pie chart from input data.</p>''' # route to generate the pie chart @app.route('/api/v1/generate_pie_chart', methods=['POST']) def generate_pie_chart_route(): # get the input data data = request.json['data'] # generate the pie chart fig = generate_pie_chart(data) # save the figure as a png image figure_file = 'figure.png' fig.savefig(figure_file) # read the pie chart image data = open(figure_file, 'rb').read() # return the chart as response return data # run the app if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create a web scraper using Python and BeautifulSoup that extracts all the article titles on a Wikipedia page. https://en.wikipedia.org/wiki/Python_(programming_language)","completion":"import requests from bs4 import BeautifulSoup # Make a GET request to fetch the raw HTML content html_content = requests.get('https://en.wikipedia.org/wiki/Python_(programming_language)').text # Parse the html content soup = BeautifulSoup(html_content, \\"lxml\\") # Find all the h2 tags and iterate through them for h2_tag in soup.find_all(\\"h2\\"): # Check if h2 tag has a 'tocsection' class if \\"tocsection\\" in h2_tag.attrs['class']: # Extract the article title from the h2 tag article_title = h2_tag.text.strip() # Print the article title print(\\"Article Title:\\", article_title) print(\\"-\\"*50)"},{"prompt":"Create a Python program to sum the elements of two lists. list1 = [1,2,3,4] list2 = [5,6,7,8]","completion":"def sum_list(list1, list2): result = [] for i in range(len(list1)): result.append(list1[i] + list2[i]) return result list1 = [1,2,3,4] list2 = [5,6,7,8] print(sum_list(list1, list2))"},{"prompt":"Generate a class in Python to represent a student.","completion":"class Student: def __init__(self, name, age, major): self.name = name self.age = age self.major = major def get_name(self): return self.name def get_age(self): return self.age def get_major(self): return self.major"},{"prompt":"Create a Python class for parsing email addresses. Not applicable","completion":"import re class EmailParser: def __init__(self, email): self.email = email def parse_username(self): return re.search('(.*)@', self.email).group(1) def parse_domain(self): return re.search('@(.*)', self.email).group(1) # Usage parser = EmailParser(\\"john@example.com\\") print(parser.parse_username()) # john print(parser.parse_domain()) # example.com"},{"prompt":"Write a function to generate a 3x3 matrix in Python filled with random integers No inpu","completion":"import random def generate_matrix(): matrix = [[random.randint(1, 9) for x in range(3)] for y in range(3)] return matrix result = generate_matrix() print(result)"},{"prompt":"Create a function in Python that takes an array of integers and returns an array of their squares. [1, 2, 3]","completion":"def square_array(nums): return [n**2 for n in nums] result = square_array([1, 2, 3]) print(result)"},{"prompt":"Create an array in Python that contains the numbers 110 in ascending order.","completion":"my_array = [1,2,3,4,5,6,7,8,9,10]"},{"prompt":"mplement the QuickSort algorithm for sorting a given array of numbers in Python. arr = [10, 7, 8, 9, 1, 5]","completion":"def partition(arr,low,high): i = ( low-1 ) pivot = arr[high] for j in range(low , high): if arr[j] <= pivot: i = i+1 arr[i],arr[j] = arr[j],arr[i] arr[i+1],arr[high] = arr[high],arr[i+1] return ( i+1 ) def quickSort(arr,low,high): if low < high: pi = partition(arr,low,high) quickSort(arr, low, pi-1) quickSort(arr, pi+1, high) arr = [10, 7, 8, 9, 1, 5] n = len(arr) quickSort(arr,0,n-1) print (\\"Sorted array is:\\") for i in range(n): print (\\"%d\\" %arr[i]),"},{"prompt":"Create a function in Python to optimize the following function with respect to its two variables x, and y. f(x,y) = 2x^3 + 3y^2 + y + 5","completion":"import numpy as np import scipy.optimize as opt def func(x): return 2*np.power(x[0], 3) + 3*np.power(x[1],2) + x[1] + 5 opt.minimize(func, ([0, 0]), method='nelder-mead', options={'xtol': 1e-8, 'disp': True})"},{"prompt":"Write Python code to detect outliers in a given dataset where the values are stored in an array. dataset = [6, 7, 8, 10, 8, 8, 9, 11, 12, 15]","completion":"import numpy as np def detect_outliers(data): # calculate summary statistics data_mean, data_std = np.mean(data), np.std(data) # define outliers cut_off = data_std * 3 lower, upper = data_mean - cut_off, data_mean + cut_off # identify outliers outliers = [x for x in data if x < lower or x > upper] return outliers dataset = [6, 7, 8, 10, 8, 8, 9, 11, 12, 15] outliers = detect_outliers(dataset) print(outliers) # [15]"},{"prompt":"Create a code selector for Python.","completion":"import tkinter as tk #Create root window window = tk.Tk() window.title('Python Code Selector') #Create a selection frame selection_frame = tk.Frame(window, bd=2, relief=tk.SUNKEN) selection_frame.pack(fill = tk.X) languages = ['Python 2.7', 'Python 3.4', 'Python 3.6', 'Python 3.7'] #Create a variable to store current language language_var = tk.StringVar(selection_frame) language_var.set(languages[0]) #Create a pull down menu language_dropdown = tk.OptionMenu(selection_frame, language_var, *languages) language_dropdown.pack(side=tk.LEFT) #Create a button to accept the selection accept_button = tk.Button(selection_frame, text='Accept', command=accept_selection) accept_button.pack(side=tk.RIGHT) #Create a function to accept the selection def accept_selection(): print(language_var.get()) window.mainloop()"},{"prompt":"Develop a deep learning algorithm in Python for sentiment analysis of movie reviews. Not applicable","completion":"import keras # Load the FOML-200 dataset data = keras.datasets.imdb # Create training and test data (X_train, y_train), (X_test, y_test) = data.load_data(num_words=88000) # Create word to index lookup word_index = data.get_word_index() word_index = {k:(v+3) for k, v in word_index.items()} word_index[\\"<PAD>\\"] = 0 word_index[\\"<START>\\"] = 1 word_index[\\"<UNK>\\"] = 2 word_index[\\"<UNUSED>\\"] = 3 # Convert review to sequence X_train = keras.preprocessing.sequence.pad_sequences(X_train, value=word_index['<PAD>'], padding='post', maxlen=250) X_test = keras.preprocessing.sequence.pad_sequences(X_test, value=word_index['<PAD>'], padding='post', maxlen=250) # Create embedding layer from pre-trained Glove embeddings embedding_matrix = np.zeros((88000, 100)) for word, i in word_index.items(): if i >= 88000: continue embedding_vector = embeddings_index.get(word) if embedding_vector is not None: embedding_matrix[i] = embedding_vector # Create the model model = keras.Sequential() model.add(keras.layers.Embedding(88000, 100, weights=[embedding_matrix], input_length=250, trainable=False)) model.add(keras.layers.Dropout(0.2)) model.add(keras.layers.GlobalMaxPooling1D()) model.add(keras.layers.Dense(64, activation='relu')) model.add(keras.layers.Dropout(0.2)) model.add(keras.layers.Dense(1, activation='sigmoid')) # Compile the model model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy']) # Fit the model model.fit(X_train, y_train, epochs=25, batch_size=128, validation_data=(X_test, y_test))"},{"prompt":"Write a function in Python that takes in two parameters, an array of integers and a target, and returns the indices of the two numbers in the array that add up to the target. arr = [3, 5, 7, 9, 10] target = 12","completion":"def two_sum(arr, target): for i in range(len(arr)): for j in range(i+1, len(arr)): if arr[i] + arr[j] == target: return (i, j) # Usage arr = [3, 5, 7, 9, 10] target = 12 print(two_sum(arr, target)) # Output: (0, 4)"},{"prompt":"This Python code is a program that tracks time spent on activities using the Hamster app. To use this program, run the Python script and the Hamster app. The program will create a dock item that displays the time spent on the current activity and allows you to access the Hamster app's overview and preferences. The program will automatically update the time spent every minute. To stop the program, exit the Hamster app and close the Python script.","completion":"#!/usr/bin/env python # # Copyright (C) 2010 Toms Baugis # # Original code from Banshee control, # Copyright (C) 2009-2010 Jason Smith, Rico Tzschichholz # # This program is free software: you can redistribute it and/or modify # it under the terms of the GNU General Public License as published by # the Free Software Foundation, either version 3 of the License, or # (at your option) any later version. # # This program is distributed in the hope that it will be useful, # but WITHOUT ANY WARRANTY; without even the implied warranty of # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the # GNU General Public License for more details. # # You should have received a copy of the GNU General Public License # along with this program. If not, see <http://www.gnu.org/licenses/>. # import atexit import gobject import sys, os from subprocess import Popen try: import gtk from dockmanager.dockmanager import DockManagerItem, DockManagerSink, DOCKITEM_IFACE from signal import signal, SIGTERM from sys import exit except ImportError, e: print e exit() from hamster import client from hamster.utils import stuff, i18n i18n.setup_i18n() class HamsterItem(DockManagerItem): def __init__(self, sink, path): DockManagerItem.__init__(self, sink, path) self.storage = client.Storage() self.storage.connect(\\"facts-changed\\", lambda storage: self.refresh_hamster()) self.storage.connect(\\"activities-changed\\", lambda storage: self.refresh_hamster()) self.id_map = {} #menu items self.update_text() self.add_actions() gobject.timeout_add_seconds(60, self.refresh_hamster) def refresh_hamster(self): try: self.update_text() finally: # we want to go on no matter what, so in case of any error we find out about it sooner return True def update_text(self): today = self.storage.get_todays_facts() if today and today[-1].end_time is None: fact = today[-1] self.set_tooltip(\\"%s - %s\\" % (fact.activity, fact.category)) self.set_badge(stuff.format_duration(fact.delta, human=False)) else: self.set_tooltip(_(\\"No activity\\")) self.reset_badge() def menu_pressed(self, menu_id): if self.id_map[menu_id] == _(\\"Overview\\"): Popen([\\"hamster-time-tracker\\", \\"overview\\"]) elif self.id_map[menu_id] == _(\\"Preferences\\"): Popen([\\"hamster-time-tracker\\", \\"preferences\\"]) self.add_actions() # TODO - figure out why is it that we have to regen all menu items after each click def add_actions(self): # first clear the menu for k in self.id_map.keys(): self.remove_menu_item(k) self.id_map = {} # now add buttons self.add_menu_item(_(\\"Overview\\"), \\"\\") self.add_menu_item(_(\\"Preferences\\"), \\"preferences-desktop-personal\\") class HamsterSink(DockManagerSink): def item_path_found(self, pathtoitem, item): if item.Get(DOCKITEM_IFACE, \\"DesktopFile\\", dbus_interface=\\"org.freedesktop.DBus.Properties\\").endswith (\\"hamster-time-tracker.desktop\\"): self.items[pathtoitem] = HamsterItem(self, pathtoitem) hamstersink = HamsterSink() def cleanup(): hamstersink.dispose() if __name__ == \\"__main__\\": mainloop = gobject.MainLoop(is_running=True) atexit.register (cleanup) signal(SIGTERM, lambda signum, stack_frame: exit(1)) while mainloop.is_running(): mainloop.run()"},{"prompt":"Create a web scraper in Python for scraping articles from a specific website. The web scraper should save the extracted text, title, and date. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com/articles.html' page = requests.get(url) soup = BeautifulSoup(page.content, 'html.parser') # get the title title = soup.find(\\"h1\\", class_=\\"article-title\\") title_text = title.text.strip() # get the date date = soup.find(\\"div\\", class_=\\"article-date\\") date_text = date.text # get the article text text = soup.find(\\"div\\", class_=\\"article-text\\") text_text = text.text.strip() # save the information in the file with open('article.txt', 'w') as file: file.write(title_text+'n') file.write(date_text+'n') file.write(text_text)"},{"prompt":"Write a Python program to ask the user for two numbers and output their sum.","completion":"num1 = float(input(\\"Please enter the first number: \\")) num2 = float(input(\\"Please enter the second number: \\")) print(\\"The sum of the two numbers is: \\" + str(num1 + num2))"},{"prompt":"Generate a Python program to process an array of strings and count the number of times each string is repeated in the array. const inputArray = [a, b, a, a, b, c, a, d]","completion":"occurence_map = {} for item in inputArray: if item not in occurence_map: occurence_map[item] = 1 else: occurence_map[item] += 1 print(occurence_map) # Output: {'a': 4, 'b': 2, 'c': 1, 'd': 1}"},{"prompt":"Create a function to calculate the Fibonacci sequence in Python n = 10","completion":"def Fibonacci(n): if n<0: print(\\"Incorrect input\\") # First Fibonacci number is 0 elif n==1: return 0 # Second Fibonacci number is 1 elif n==2: return 1 else: return Fibonacci(n-1)+Fibonacci(n-2) # Driver Program print(Fibonacci(n))"},{"prompt":"Generate a machine learning pipeline in Python that takes in a dataset containing historical power plant data and labels each row with a boolean value based on whether or not the power plant is operational. Columns: Name, capacity, date of commission Sample: Coal Plant, 10MW, 20120601","completion":"import numpy as np import pandas as pd from sklearn.pipeline import Pipeline # Define the preprocessing steps data_process = Pipeline([ ('extract_capacity', extract_column('capacity')), ('transform_capcity', StandardScaler()), ('extract_date', extract_column('date of commission')), ('transform_date', YearExtractorTransformer()), ('label', BooleanLabelEncoder()), ]) # Put the steps together into a pipeline model = Pipeline([ ('preprocessing', data_process), ('classification', RandomForestClassifier()), ]) # Fit and predict labels model.fit(X_train, y_train) y_pred = model.predict(X_test)"},{"prompt":"Write a python program that takes a list and return a new list with even numbers.","completion":"def get_even_numbers(list): # Write a python program that takes a list and return a new list with only even numbers. return [x for x in list if x % 2 == 0] if __name__ == '__main__': list = [2, 3, 5, 7, 9, 10] print(get_even_numbers(list)) # Output: [2, 10]"},{"prompt":"Create a Python script, given the following input data, which will convert the given data from Fahrenheit to Celsius and print out the results. Below are the temperatures in Fahrenheit: 30 40 50","completion":"fahrenheit_temps = [30, 40, 50] celsius_temps = [(temp - 32) * 5/9 for temp in fahrenheit_temps] print(f'Below are the temperatures converted from Fahrenheit to Celsius:') print(*celsius_temps, sep=\\"n\\") Output: Below are the temperatures converted from Fahrenheit to Celsius: -1.1111111111111112 4.444444444444445 10.0"},{"prompt":"Optimize the following Python Octave code by introducing vectorization. for i = 0:datasize1 freq = (float(freq[i]) + float(new_freq[i]))","completion":"#Vectorization freq = (np.array(freq) + np.array(new_freq)).tolist()"},{"prompt":"Design an algorithm in Python to perform binary search.","completion":"def binary_search(arr, target): start = 0 end = len(arr) - 1 while start <= end: mid = (start + end) // 2 if arr[mid] == target: return mid elif arr[mid] > target: end = mid - 1 else: start = mid + 1 return -1"},{"prompt":"Generate a Python program to calculate the amount of time the user has been working on a specific task, given the start time and the current time. start time=4:30pm, current time= 5:07pm","completion":"import datetime def get_time_difference(start_time, current_time): start_time = datetime.datetime.strptime(start_time, \\"%H:%M%p\\") current_time = datetime.datetime.strptime(current_time, \\"%H:%M%p\\") return current_time - start_time"},{"prompt":"Create a web crawler in Python that extracts titles and descriptions from web pages. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = \\"https://www.example.com/\\" response = requests.get(url) html = response.text soup = BeautifulSoup(html, \\"html.parser\\") titles = soup.find_all(\\"title\\") descriptions = soup.find_all(\\"meta\\", {\\"name\\": \\"description\\"}) for title in titles: print(title.string) for description in descriptions: print(description.attrs[\\"content\\"])"},{"prompt":"Create an algorithm in Python to find the average of numbers in a list. [3, 5, 7, 9, 11]","completion":"def find_average(lst): sum = 0 for num in lst: sum += num # average calculation avg = sum / len(lst) return avg average = find_average([3, 5, 7, 9, 11]) print(\\"The average of the numbers in the list is:\\", average)"},{"prompt":"Create a class in Python to generate a calendar. calendarName = My Calendar","completion":"class CalendarGenerator(object): def __init__(self, name): self.name = name def generate_calendar(self): calendar = [] # Code to generate a calendar goes here return calendar calendar = CalendarGenerator(calendarName) calendar.generate_calendar()"},{"prompt":"Generate a Python script to sort a list of strings in ascending alphabetical order. ['cat', 'apple', 'elephant', 'dog']","completion":"list = ['cat', 'apple', 'elephant', 'dog'] list.sort() print(list) # Output: ['apple', 'cat', 'dog', 'elephant']"},{"prompt":"Create a Python program to count the occurrence of letters in a string and return a list of letters and their frequencies. text = 'helloworld'","completion":"letter_frequencies= {} for letter in text: if letter not in letter_frequencies: letter_frequencies[letter] = 1 else: letter_frequencies[letter] += 1 freq = [] for key,val in letter_frequencies.items(): freq.append([key,val]) print(freq) # [['h', 1], ['e', 1], ['l', 3], ['o', 2], ['w', 1], ['r', 1], ['d', 1]]"},{"prompt":"Write a Python program that can identify a palindrome in any given string. String: A man, a plan, a canal, Panama!","completion":"def is_palindrome(string): '''Checks if the given string is a palindrome by removing non-alphanumeric characters and comparing the reversed version of the string''' string = ''.join(c.lower() for c in string if c.isalnum()) reversed_str = string[::-1] return string == reversed_str string = \\"A man, a plan, a canal, Panama!\\" print(is_palindrome(string)) # True"},{"prompt":"Create an algorithm in Python which takes a list of numbers and sorts them in ascending order. numbers = [4, 1, 8, 5, 6]","completion":"def sortAscending(numbers): for i in range(len(numbers)): for j in range(i+1,len(numbers)): if numbers[i] > numbers[j] : temp = numbers[i] numbers[i] = numbers[j] numbers[j] = temp return numbers print(sortAscending([4, 1, 8, 5, 6])) # Output: # [1, 4, 5, 6, 8]"},{"prompt":"Categorize the following text into distinct classes using natural language processing techniques in Python. Apple banana cherry","completion":"from sklearn.feature_extraction.text import CountVectorizer # create the transform vectorizer = CountVectorizer(token_pattern=r\\"(?u)bw+b\\") # tokenize and build vocab vectorizer.fit([text]) # summarize print(vectorizer.vocabulary_) # output {'apple': 0, 'banana': 1, 'cherry': 2}"},{"prompt":"Optimize the following application in Python to reduce startup time. import time def func(): start=time.time() i=0 while(i<100000000): i+=1 end=time.time() print(endstart) func()","completion":"import time def func(): start=time.time() # Optimized code using range instead of while loop lst = range(100000000) end=time.time() print(end-start) func()"},{"prompt":"Using the comment, create a python program to find the highest number in a series","completion":"def find_max(nums): \\"\\"\\"This function takes a series of numbers as input and returns the highest number. Args: nums (list): A list of numbers. Returns: int: The highest number. \\"\\"\\" return max(nums)"},{"prompt":"Create a Python program to calculate the Median of a given list of numbers. The program should take the number list as an input and print the median of the list. Number List: [2.3, 5.6, 7.6, 4.5, 9.8]","completion":"def median(numbers): numbers.sort() if len(numbers) % 2 == 0: mid = int(len(numbers) / 2) return (numbers[mid] + numbers[mid - 1]) / 2 else: mid = int(len(numbers) / 2) return numbers[mid] number_list = [-2.3, 5.6, 7.6, 4.5, 9.8] print('Median of the list is', median(number_list))"},{"prompt":"What are the benefits of using list comprehensions in Python?","completion":"The benefits of using list comprehensions in Python are: 1. List comprehensions are more efficient than \\"for\\" or \\"while\\" loops, as they allow you to write the same code in fewer lines. 2. They are easier to read, as the code is concise and requires less mental effort to understand. 3. They allow you to write compact and elegant code, as you can transform a few lines of code into a single line of list comprehension. 4. They are faster to execute, as list comprehensions are evaluated at compile-time. 5. List comprehensions also allow you to process and manipulate data in sophisticated ways."},{"prompt":"Create a basic chatbot agent in Python using DialogFlow. The agent should be able to answer simple questions about the weather in a given city. Not applicable","completion":"import os import dialogflow_v2 as dialogflow from google.api_core.exceptions import InvalidArgument os.environ[\\"GOOGLE_APPLICATION_CREDENTIALS\\"] = 'PATH_TO_CREDENTIALS_FILE' DIALOGFLOW_PROJECT_ID = 'YOUR_PROJECT_ID' DIALOGFLOW_LANGUAGE_CODE = 'en-us' GOOGLE_APPLICATION_CREDENTIALS = 'PATH_TO_CREDENTIALS_FILE' SESSION_ID = 'current-user-id' def detect_intent_from_text(text, session_id, language_code=DIALOGFLOW_LANGUAGE_CODE): session_client = dialogflow.SessionsClient() session = session_client.session_path(DIALOGFLOW_PROJECT_ID, session_id) text_input = dialogflow.types.TextInput(text=text, language_code=language_code) query_input = dialogflow.types.QueryInput(text=text_input) try: response = session_client.detect_intent(session=session, query_input=query_input) return response.query_result except InvalidArgument: raise # Create an intent in DialogFlow def intent_create(): intents_client = dialogflow.IntentsClient() parent = intents_client.project_agent_path(DIALOGFLOW_PROJECT_ID) training_phrases = [ dialogflow.types.Intent.TrainingPhrase(parts=[ dialogflow.types.Intent.TrainingPhrase.Part(text='What is the weather like?'), ]), ] message_text = dialogflow.types.Intent.Message.Text(text=['That's a great question!']) response = intents_client.create_intent( parent, intent_name='[INTENT_NAME]', training_phrases=training_phrases, message=message_text ).per_response # Retrieve a response to a user's query query = 'What is the weather like in London?' response = detect_intent_from_text(query, SESSION_ID) print('Query text: {}'.format(response.query_text)) print('Detected intent: {} (confidence: {})n'.format( response.intent.display_name, response.intent_detection_confidence)) print('Fulfillment text: {}'.format(response.fulfillment_text))"},{"prompt":"Create a Python 3 program to sort a list of numbers in ascending order. [5, 7 ,1 ,3, 4]","completion":"def sort_list(lst): lst.sort() return lst lst = [5, 7 ,1 ,3, 4] sorted_list = sort_list(lst) print(sorted_list)"},{"prompt":"Create an algorithm in Python that takes an array of integers and returns an array of the same elements in ascending order. [3, 5, 2, 1, 4]","completion":"def sort(arr): n = len(arr) for i in range(n-1): min_index = i for j in range(i+1, n): if arr[min_index] > arr[j]: min_index = j arr[i], arr[min_index] = arr[min_index], arr[i] return arr list = [3, 5, 2, 1, 4] print(sort(list)) # [1, 2, 3, 4, 5]"},{"prompt":"Design a function in Python to filter out strings from a list of strings that contain 2 or more vowels. [Codecademy, Apples, Frame, AeIouy]","completion":"def filter_strings_with_2_or_more_vowels(strings): vowels = [\\"a\\", \\"e\\", \\"i\\", \\"o\\", \\"u\\", \\"y\\"] filtered_strings = [] for s in strings: cnt = 0 for c in s: if c in vowels: cnt += 1 if cnt >= 2: filtered_strings.append(s) return filtered_strings strings = [\\"Codecademy\\", \\"Apples\\", \\"Frame\\", \\"AeIouy\\"] print(filter_strings_with_2_or_more_vowels(strings))"},{"prompt":"Write a Python code snippet to display a formatted date and time.","completion":"import datetime dateandtime = datetime.datetime.now() # print date and time string print(dateandtime.strftime(\\"%d/%m/%Y %H:%M:%S\\"))"},{"prompt":"Develop a Python program that counts the number of vowels in a string.","completion":"def count_vowels(s): count = 0 vowels = \\"aeiou\\" for char in s: if char in vowels: count += 1 return count"},{"prompt":"Write an ifelse statement for a simple weather notification system in Python. If the temperature is between 60 and 75 degrees, print a message that it is âPerfect Weather.","completion":"if 60 <= temperature <= 75: print(\\"It's Perfect Weather!\\") else: print(\\"The weather is not so great.\\")"},{"prompt":"Write a Python program to use Regular Expressions to search and replace a given string. text = He is an excellent programmer","completion":"import re text = \\"He is an excellent programmer\\" def find_and_replace(text, pattern, replacement): return re.sub(pattern, replacement, text) result = find_and_replace(text, r\\"excellent\\", \\"brilliant\\") print(result)"},{"prompt":"Summarize the text given below in 2 to 3 sentences. The Python programming language is a powerful, generalpurpose, opensource language. It is a scripting language that supports objectoriented programming and procedural styles. It has a design philosophy which emphasizes code readability and a syntax that allows programmers to express concepts in fewer lines of code.","completion":"Python is a powerful, open-source programming language that is both object-oriented and procedural in nature. It focuses on readability of code and simplicity of syntax, enabling developers to quickly and efficiently express concepts with fewer lines of code. It is free to use and popularly used for scripting and automation."},{"prompt":"Create a Python program to print a given string with each character's ASCII code. Hello world!","completion":"def print_ascii(text): '''This function will print a given string with each character's ASCII code.''' for ch in text: print(f'{ch} : {ord(ch)}') print_ascii('Hello world!') # Output: # H : 72 # e : 101 # l : 108 # l : 108 # o : 111 # : 32 # w : 119 # o : 111 # r : 114 # l : 108 # d : 100 # ! : 33"},{"prompt":"Create a decision tree in Python to classify a given dataset.","completion":"from sklearn.tree import DecisionTreeClassifier # define the model with the desired parameters model = DecisionTreeClassifier(criterion='entropy', max_depth=5) # fit the model with the data model.fit(X, y) # make predictions y_pred = model.predict(X_new)"},{"prompt":"Write a function in Python to compute the sum of all elements in a given 2dimensional array. [[2, 3], [2, 5], [5, 6], [4, 5]]","completion":"def arraySum(arr): sum = 0 for sublist in arr: for item in sublist: sum = sum + item return sum print(arraySum([[2, 3], [2, 5], [5, 6], [4, 5]])) # Output: 29"},{"prompt":"mplement a python function to remove all special characters from a string. string = â@#&#() <>, +/â","completion":"import re def remove_special_characters(string): return re.sub('[^A-Za-z0-9]+', '', string)"},{"prompt":"Write Python code to delete a node from a singly linked list.","completion":"def deleteNode(head, key): # Store head node temp = head # If head node itself holds the key to be deleted if (temp is not None): if (temp.data == key): head = temp.next temp = None return head # Search for the key to be deleted, keep track of the # previous node as we need to change 'prev.next' while(temp is not None): if temp.data == key: break prev = temp temp = temp.next # if key was not present in linked list if (temp == None): return head # Unlink the node from linked list prev.next = temp.next temp = None return head"},{"prompt":"Build a python program to randomly generate an even integer between 0 and 10","completion":"import random def generateEven(): even_int = random.randint(0,10) if(even_int % 2 == 0): return even_int else: return generateEven() print(generateEven())"},{"prompt":"Create a python program to select the maximum and minimum element from a list of integers [2, 3, 5, 4, 1]","completion":"def get_max_min(numbers): max_val = numbers[0] min_val = numbers[0] for n in numbers: if n > max_val: max_val = n if n < min_val: min_val = n return (max_val, min_val)"},{"prompt":"mplement a function in Python which can count the number of palindrome substrings in a given string. String: abcd","completion":"def count_palindrome_substrings(s): # Create a boolean matrix to store the values matrix = [[False for _ in range(len(s))] for _ in range(len(s))] # Initialize the substrings with length 1 for i in range(len(s)): matrix[i][i] = True # Initialize the substrings with length 2 for i in range(len(s)-1): if s[i] == s[i+1]: matrix[i][i+1] = True # Iterate through the string and find the substrings for substring_length in range(3, len(s) + 1): for i in range(0, len(s) - substring_length + 1): j = i + substring_length - 1 if s[i] == s[j] and matrix[i+1][j-1]: matrix[i][j] = True # Iterate through the matrix and count the palindrome substrings count = 0 for row in matrix: for elem in row: if elem: count += 1 return count"},{"prompt":"Write a python class to store an employee's ID number and name.","completion":"class Employee: def __init__(self, id, name): self.id = id self.name = name def get_id(self): return self.id def get_name(self): return self.name"},{"prompt":"Generate a random password of 8 characters in Python","completion":"import random import string length = 8 chars = string.ascii_letters + string.digits + string.punctuation password = ''.join(random.choice(chars) for _ in range(length)) print(password)"},{"prompt":"Write a Python program to generate a dictionary that contains a number (between 1 and n) in the form (x, x*x). n = 8","completion":"def generate_dict(n): my_dict = {} for num in range(1, n+1): my_dict[num] = num * num return my_dict print(generate_dict(8)) # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64}"},{"prompt":"Write a Python program to detect and remove loop in a linked list.","completion":"class Node: def __init__(self,data): self.data = data self.next = None def detect_loop(head): fast_ptr = head slow_ptr = head while (slow_ptr and fast_ptr and fast_ptr.next): slow_ptr = slow_ptr.next fast_ptr = fast_ptr.next.next if slow_ptr == fast_ptr: return slow_ptr return None def remove_loop(head, loop_ptr): slow_ptr = head fast_ptr = loop_ptr while (slow_ptr != fast_ptr): slow_ptr = slow_ptr.next fast_ptr = fast_ptr.next prev_slow_ptr = None while (slow_ptr != fast_ptr): prev_slow_ptr = slow_ptr slow_ptr = slow_ptr.next fast_ptr = fast_ptr.next prev_slow_ptr.next = None"},{"prompt":"Generate a program using Python to create a dictionary with 10 keyvalue pairs and then print the entire dictionary.","completion":"my_dict = {1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six', 7:'seven', 8:'eight', 9:'nine', 10:'ten'} for key, value in my_dict.items(): print(key, '->', value)"},{"prompt":"Construct a Python function which takes two strings as input arguments and returns their concatenation. Hello , World!","completion":"def concat_strings(str1, str2): return str1 + str2 result = concat_strings(\\"Hello \\", \\"World!\\") print(result)"},{"prompt":"Optimize an existing Python sorting algorithm to minimize its runtime. def sort(arr): for i in range(len(arr)): for j in range(i + 1, len(arr)): if arr[i] > arr[j]: arr[i], arr[j] = arr[j], arr[i]","completion":"def sort(arr): swapped = True while swapped: swapped = False for i in range(len(arr) - 1): if arr[i] > arr[i + 1]: arr[i], arr[i + 1] = arr[i + 1], arr[i] swapped = True"},{"prompt":"Write a Python function to concatenate two lists. list1 = [1, 2, 3] list2 = [4, 5, 6]","completion":"def concat_lists(list1, list2): return [x for t in zip(list1, list2) for x in t] list1 = [1, 2, 3] list2 = [4, 5, 6] print(concat_lists(list1, list2)) # [1, 4, 2, 5, 3, 6]"},{"prompt":"Design an algorithm in Python to calculate the Fibonacci numbers up to N. 5","completion":"def fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n+1): c = a + b a = b b = c return b print(fibonacci(5)) # 5"},{"prompt":"Create a program to find the frequency of characters in a given string in Python. Example string: abbccccdddde","completion":"def find_character_frequency(string): freq = {} for i in string: if i in freq: freq[i] += 1 else: freq[i] = 1 return freq # example string = \\"abbccccdddde\\" print(find_character_frequency(string)) # Output: {'a': 1, 'b': 2, 'c': 4, 'd': 4, 'e': 1}"},{"prompt":"mplement a method in Python to calculate the factorial of a given number. 5","completion":"def factorial(x): result = 1 for i in range(1,x+1): result = result*i return result print(factorial(5))"},{"prompt":"Create a Python program that uses a given list of words to construct a poem. Sleep, Dream, Reality, Beauty, Life","completion":"def create_poem(words): poem = \\"\\" for word in words: poem += word + \\"n\\" poem += \\"nSleep, dream and beautynReality shatters in lifenWhere dreams forevermore dwell\\" return poem print(create_poem([\\"Sleep\\", \\"Dream\\", \\"Reality\\", \\"Beauty\\", \\"Life\\"]))"},{"prompt":"Create a Python class for a student with the following attributes. Name, Age, Addre","completion":"class Student(object): def __init__(self, name, age, address): self.name = name self.age = age self.address = address"},{"prompt":"Edit the following Python code to handle unexpected errors. def add_numbers(a,b): return a + b","completion":"def add_numbers(a,b): try: return a + b except TypeError as e: print(e) return None"},{"prompt":"Make a Python program to create a rolling average over a list. Rolling average means return the average of the last 3 items of the list. mylist = [10, 20, 30, 40, 50]","completion":"def rolling_average(arr): last_three = arr[-3:] return sum(last_three) / len(last_three) mylist = [10, 20, 30, 40, 50] rolling_avg = rolling_average(mylist) print(\\"Rolling average:\\", rolling_avg) # Output: # Rolling average: 33.333333333333336"},{"prompt":"Generate a function in Python to sort a given list of integers in increasing order using Quick Sort. [9, 5, 7, 3, 1, 8, 6]","completion":"def quickSort(arr): if len(arr) <= 1: return arr else: pivot = arr[0] lessThanPivot = [x for x in arr[1:] if x < pivot] moreThanPivot = [x for x in arr[1:] if x >= pivot] sortedArray = quickSort(lessThanPivot) + [pivot] + quickSort(moreThanPivot) return sortedArray"},{"prompt":"Convert a given dictionary in Python to a list of tuples. {'a': 1, 'b': 2, 'c': 3}","completion":"my_dict = {'a': 1, 'b': 2, 'c': 3} my_list = list(my_dict.items()) # Test print(my_list) # [('a', 1), ('b', 2), ('c', 3)]"},{"prompt":"Develop a Python program to convert a given list of strings to a single string. my_list = ['Today', 'is', 'a', 'good', 'day']","completion":"def list_to_string(my_list): return ' '.join(my_list)"},{"prompt":"Write a Python function that takes a string as an argument and returns a string with all characters sorted in alphabetical order.","completion":"def sort_string(string): sorted_string = sorted(string) return ''.join(sorted_string)"},{"prompt":"Write a function in Python to find the sum of two arguments.","completion":"def sum(num1, num2): return num1 + num2"},{"prompt":"Design a machine learning classifier using the scikitlearn library in Python that predicts whether someone is a male or female using features like height and age.","completion":"from sklearn import svm from sklearn.neighbors import KNeighborsClassifier # define features (height, age) and labels (gender) X = [[180, 25], [170, 27], [150, 40], [145, 37], [177, 23]] y = ['male', 'female', 'female', 'male', 'female'] # create model svm_model = svm.SVC(gamma='auto', decision_function_shape='ovo') knn_model = KNeighborsClassifier(n_neighbors=5) # train and predict svm_model.fit(X, y) pred = svm_model.predict([[160, 32]]) knn_model.fit(X, y) pred_knn = knn_model.predict([[160, 32]]) print(pred) print(pred_knn)"},{"prompt":"Rewrite the following program in Python. # C++ Program to print prime factors void printPrimeFactors(int n) { // Print the number of 2s that divide n while (n % 2 == 0) { cout << 2 << ; n = n/2; } // n must be odd at this point. So we can skip // one element (Note i = i +2) for (int i = 3; i <= sqrt(n); i = i + 2) { // While i divides n, print i and divide n while (n % i == 0) { cout << i << ; n = n/i; } } // This condition is to handle the case whien n // is a prime number greater than 2 if (n > 2) cout << n << ; }","completion":"def printPrimeFactors(n): # Print the number of 2s that divide n while n % 2 == 0: print(2, end=\\" \\") n = n/2 # n must be odd at this point. So we can skip # one element (note i = i + 2) for i in range(3, int(math.sqrt(n))+1, 2): # While i divides n, print i and divide n while n % i == 0: print(i, end=\\" \\") n = n/i # This condition is to handle the case when n # is a prime number greater than 2 if n > 2: print(n, end=\\" \\")"},{"prompt":"Write a class in Python that checks if a number is prime.","completion":"class PrimeNumberChecker(object): def is_prime(self, number): if number < 2: return False for i in range(2, number): if number % i == 0: return False return True"},{"prompt":"Create an API endpoint in Python using Flask that retrieves the current weather from a given city. Not applicable","completion":"import requests from flask import Flask, jsonify app = Flask(__name__) @app.route('/weather/<city>') def get_weather(city): url = \\"https://api.openweathermap.org/data/2.5/weather?q=\\" + city + \\"&appid=xxx\\" response = requests.get(url) if response.status_code == 200: data = response.json() return jsonify({ 'current_temperature': data['main']['temp'] }) else: return jsonify({'message': 'Error connecting to openweathermap API'}), 400 if __name__ == '__main__': app.run(debug=True)"},{"prompt":"Create an optimization algorithm in Python to maximize the performance of a given machine learning model. A scikitlearn RandomForestClassifier","completion":"import numpy as np from sklearn.model_selection import GridSearchCV from sklearn.ensemble import RandomForestClassifier # Define the hyperparameters to optimize param_grid={ 'n_estimators': np.arange(2, 30, 2), 'max_depth': np.arange(2, 12, 2), 'min_samples_leaf': np.arange(1, 10, 2) } # Create GridSearchCV model object with the hyperparameters model = GridSearchCV(RandomForestClassifier(), param_grid, verbose=2, cv=3) # Fit the model to the data model.fit(X, y) # Print out the best estimator print(model.best_estimator_)"},{"prompt":"Convert this function from Python 2 to Python 3. def fib(n): Print a Fibonacci series up to n result = [] a, b = 0, 1 while b < n: result.append(b) a, b = b, a+b return resul","completion":"def fib(n): \\"\\"\\"Print a Fibonacci series up to n\\"\\"\\" result = [] a = 0 b = 1 while b < n: result.append(b) tmp_a = a a = b b = tmp_a + b return result"},{"prompt":"Write a Python code snippet to create a shallow copy of the following dictionary: {âaâ: 1, âbâ: 2}. {'a': 1, 'b': 2}","completion":"import copy original_dict = {'a': 1, 'b': 2} shallow_copy_dict = copy.copy(original_dict)"},{"prompt":"Create an algorithm in Python to calculate the Fibonacci sequence up to n terms.","completion":"def f_Fibonacci(n): a = 0 b = 1 if n < 0: print(\\"Incorrect input\\") elif n == 0: return a elif n == 1: return b else: for i in range(2,n): c = a + b a = b b = c return b"},{"prompt":"Write a Python program to find the prime numbers between two given numbers and print in a comma separated list. start = 10 end = 25","completion":"def prime_nums(start, end): res = [] for num in range(start, end + 1): if num > 1: for i in range(2, num): if (num % i) == 0: break else: res.append(num) return res result = prime_nums(10, 25) print(', '.join(str(r) for r in result)) # prints 11, 13, 17, 19, 23"},{"prompt":"Write a neural network in Python to classify handwritten digits from 0 to 9.","completion":"import keras from keras.datasets import mnist from keras.models import Model from keras.layers import Input, Dense, Dropout, Flatten from keras.layers import Conv2D, MaxPooling2D def create_model(): # Define the input layer inputs = Input(shape=(28, 28, 1)) # 1st convolutional layer conv = Conv2D(64, kernel_size=3, activation='relu')(inputs) # 2nd convolutional layer conv = Conv2D(32, kernel_size=3, activation='relu')(conv) # Max pooling layer pool = MaxPooling2D(pool_size=(2, 2))(conv) # Dropout layer drop = Dropout(0.25)(pool) # Flatten layer flatten = Flatten()(drop) # Dense layer dense = Dense(128, activation='relu')(flatten) # Output layer outputs = Dense(10, activation='softmax')(dense) # Create a model and compile it model = Model(inputs, outputs) model.compile(loss='categorical_crossentropy', metrics=['accuracy'], optimizer='adam') return model"},{"prompt":"Write a Python program which takes an input and prints out the most common words","completion":"import collections import re def find_most_common_words(text): # remove special characters clean_text = re.sub('[^a-zA-Z]+', ' ', text) # tokenize words = clean_text.split(' ') # get counts counts = collections.Counter(words) # get most common most_common = counts.most_common() # print most common words for word, count in most_common: print(word + ' : ' + str(count))"},{"prompt":"Create a Python class for representing a student's grades with methods for adding, deleting and updating the grades.","completion":"class StudentGrades: def __init__(self, grades=[]): self.grades = grades def add_grade(self, grade): self.grades.append(grade) def delete_grade(self, index): del self.grades[index] def update_grade(self, index, new_grade): self.grades[index] = new_grade"},{"prompt":"Write a Python program to generate random data and create a scatterplot.","completion":"\\"\\"\\" Generate random data and create a scatterplot \\"\\"\\" import matplotlib.pyplot as plt import numpy as np # Generate 1000 random points np.random.seed(0) x = np.random.rand(1000) y = np.random.rand(1000) # Create a scatter plot plt.scatter(x,y) plt.show()"},{"prompt":"Write a Python script to identify the prime numbers in a list of integers. list of integers: [2, 4, 7, 11, 13]","completion":"def is_prime(num): if num > 1: for i in range(2,num): if (num % i) == 0: return False else: return True else: return False numbers = [2, 4, 7, 11, 13] for num in numbers: if is_prime(num): print(num)"},{"prompt":"Create a classification algorithm in Python that can correctly classify the Iris Dataset. The Iris Datase","completion":"# Importing the libraries import pandas as pd from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.metrics import accuracy_score # Loading the dataset dataset = pd.read_csv('iris.csv') X = dataset.iloc[:, :-1].values y = dataset.iloc[:, 4].values # Splitting the dataset into the Training set and Test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0) # Fitting the Decision Tree to the dataset classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0) classifier.fit(X_train, y_train) # Predicting the Test set result y_pred = classifier.predict(X_test) # Calculating the accuracy accuracy = accuracy_score(y_test, y_pred) print(accuracy)"},{"prompt":"Create a basic pointofsale system in Python.","completion":"\\"\\"\\" Create a basic point-of-sale system in Python \\"\\"\\" # Define a class for a Point of Sale (POS) system class PointOfSale: # Constructor to initialize the POS def __init__(self): self.total = 0 # Total amount self.products = [] # List of products purchased # Add a product to the list and calculate the total def addProduct(self, product): self.products.append(product) self.total += product.price # Print out the list of products purchased and the total amount def printReceipt(self): print(\\"List of Products:\\") for product in self.products: print(\\"{} - {:.2f}\\".format(product.name, product.price)) print(\\"Total Amount: {:.2f}\\".format(self.total)) # Define a class for products class Product: # Constructor to initialize the product def __init__(self, name, price): self.name = name self.price = price # Create some products product1 = Product(\\"Apple\\", 5.25) product2 = Product(\\"Banana\\", 3.00) # Create a POS System pos = PointOfSale() # Add products to the POS pos.addProduct(product1) pos.addProduct(product2) # Print out the receipt pos.printReceipt()"},{"prompt":"Write a Python program to arrange two dictionaries in order of their keys. dct1 = {'a':1, 'b':2, 'c':3} dct2 = {'e':4, 'd':5, 'f':6}","completion":"def sort_dicts_by_keys(dct1, dct2): result = {} keys = sorted(list(dct1.keys()) + list(dct2.keys())) for key in keys: if key in dct1: result[key] = dct1[key] else: result[key] = dct2[key] return result"},{"prompt":"Develop a function in Python to find the maximum number in a binary search tree. Not applicable","completion":"class Node: def __init__(self, val): self.val = val self.left = None self.right = None def findMaxValue(root): if root is None: return None if root.right is None: return root.val return findMaxValue(root.right) # Usage example root = Node(3) root.left = Node(2) root.right = Node(5) maxValue = findMaxValue(root) print('Max Value:', maxValue)"},{"prompt":"Write a Python code snippet to generate the following pattern using a single for loop. Not applicable","completion":"for i in range(1, 10): for j in range(1, i): print(\\"*\\", end=\\"\\") print()"},{"prompt":"Write a Python program to find the five most common words in a given string. This is a sample string.","completion":"string = \\"This is a sample string.\\" # Split the string into individual words words = string.split() # Track the frequency of each word word_freq = {} for word in words: if word in word_freq: word_freq[word] += 1 else: word_freq[word] = 1 # Sort the words by frequency sorted_words = sorted(word_freq.items(), key=lambda x: x[1], reverse=True) # Print the five most common words common_words = sorted_words[:5] for word, freq in common_words: print(f'{word}: {freq}') # Output: # this: 1 # is: 1 # a: 1 # sample: 1 # string: 1"},{"prompt":"Can you provide a python code to count the number of unique characters in an array? Character Array: [a, b, c, a, d, e, c]","completion":"def count_unique_chars(char_array): char_set = set() for char in char_array: char_set.add(char) counting_dict = {} for char in char_set: counting_dict[char] = 0 for character in char_array: if char == character: counting_dict[char] += 1 return counting_dict char_array = [\\"a\\", \\"b\\", \\"c\\", \\"a\\", \\"d\\", \\"e\\", \\"c\\"] counting_dict = count_unique_chars(char_array) print(counting_dict) # {'c': 2, 'e': 1, 'a': 2, 'b': 1, 'd': 1}"},{"prompt":"Create a python function that randomly selects three numbers from a given list and sort them in descending order. [4, 7, 9, 11, 33, 2]","completion":"import random def sort_numbers(lst): nums = random.sample(lst, 3) nums.sort(reverse=True) return nums nums = [4, 7, 9, 11, 33, 2] sorted_nums = sort_numbers(nums) print(sorted_nums) # [33, 11, 9]"},{"prompt":"Design a Python program that generates a 10 x 10 multiplication table.","completion":"for i in range(1, 11): for j in range(1, 11): print(f\\"{i} x {j} = {i * j}\\") print()"},{"prompt":"Develop Python code to print all possible permutations of a given string. string = abc","completion":"def permutations(string): if string == \\"\\": return [''] prev_list = permutations(string[1:]) next_list = [] char = string[0] for word in prev_list: for j in range(len(word) + 1): next_list.append(word[:j] + char + word[j:]) return next_list string = \\"abc\\" perm_list = permutations(string) print (perm_list)"},{"prompt":"Build a function in Python to fetch records from a MongoDB database. host = hostname port = 27017 database_name = dbname collection_name = users","completion":"import pymongo def fetchRecords(host, port, database_name, collection_name): client = pymongo.MongoClient(host, int(port)) db = client[database_name] collection = db[ collection_name ] records = collection.find({}) return records"},{"prompt":"Create a Python script to classify text as either spam or ham based on the bag of words model. Not applicable","completion":"import nltk from nltk.corpus import stopwords from sklearn.feature_extraction.text import CountVectorizer from sklearn.naive_bayes import MultinomialNB # Prepare data train_data = # your train data train_labels = # your train label test_data = # your test data # Build a bag of words model vectorizer = CountVectorizer(stop_words=stopwords.words('english')) train_data_features = vectorizer.fit_transform(train_data) # Train a Naive Bayes classifier nb_classifier = MultinomialNB().fit(train_data_features, train_labels) # Test the classifier test_data_features = vectorizer.transform(test_data) predictions = nb_classifier.predict(test_data_features)"},{"prompt":"Create a webscraping program in Python to scrape movie reviews from IMDb. https://www.imdb.com/title/tt0816692/reviews?ref_=tt_urv","completion":"import requests import bs4 url = \\"https://www.imdb.com/title/tt0816692/reviews?ref_=tt_urv\\" page = requests.get(url).text soup = bs4.BeautifulSoup(page, 'html.parser') reviews = soup.find_all(class_=\\"text show-more__control\\") for review in reviews: print(review.get_text())"},{"prompt":"Develop a chatbot with Python to answer customer inquiries.","completion":"import re import random class Chatbot: # constructor def __init__(self): self.responses = { # greetings \\"hi\\": [\\"Hello!\\", \\"Hi!\\", \\"Hey!\\", \\"Hi there!\\"], \\"hello\\": [\\"Howdy!\\", \\"Hey!\\", \\"Hey there!\\"], # farewells \\"bye\\": [\\"Goodbye!\\", \\"Bye!\\", \\"See you later!\\"], \\"goodbye\\": [\\"Bye!\\", \\"Farewell!\\", \\"See you later!\\"], # general \\"thanks\\": [\\"You're welcome!\\", \\"It was my pleasure!\\", \\"No problem!\\"] } # tokenizes the input def tokenize_input(self, input_text): return re.split(\\" \\", input_text.lower()) # checks if a given word exists in the responses def is_valid_input(self, word): return word in self.responses # main rule-based chatbot logic def chatbot_response(self, input_text): tokenized_input = self.tokenize_input(input_text) if any([self.is_valid_input(word) for word in tokenized_input]): # select a random valid response random_index = random.randint(0, len(self.responses[tokenized_input[0]]) - 1) return self.responses[tokenized_input[0]][random_index] else: return \\"I'm sorry, I don't understand.\\""},{"prompt":"Create a simple Python function for calculating the Fibonacci numbers. Not applicable","completion":"def fibonacci(n): if n == 0: return 0 elif n == 1: return 1 else: return fibonacci(n - 1) + fibonacci(n - 2)"},{"prompt":"Create a function in Python that takes two inputs: a number and a list of numbers. The function should return a list of numbers that sum to the input number. number = 5 nums = [1, 2, 3, 4]","completion":"def find_sum(number, nums): result_list = [] for i in range(len(nums)-1): for j in range(i+1, len(nums)): if nums[i] + nums[j] == number: result_list.append([nums[i], nums[j]]) return result_list result = find_sum(number, nums) print(result) # [[1, 4], [2, 3]]"},{"prompt":"Generate a function in Python to decode Base64 encoded strings.","completion":"import base64 def decode_base64(string): decoded_string = base64.b64decode(string).decode('utf-8') return decoded_string"},{"prompt":"Create a Python program to join a list of strings with a delimiter. [Apple, Orange, Mango]","completion":"def join_list_str(list_str, delimiter): return delimiter.join(list_str) list_str = [\\"Apple\\", \\"Orange\\", \\"Mango\\"] delimiter = \\",\\" result = join_list_str(list_str, delimiter) print(result) # Output Apple,Orange,Mango"},{"prompt":"Compose a Python function to determine whether two given strings are anagrams of each other. String1 Stop String2 post","completion":"\\"\\"\\" A Python function to determine whether two given strings are anagrams of each other \\"\\"\\" def check_anagram(string1, string2): # If the strings are not of equal length, they cannot be anagrams if len(string1) != len(string2): return False # Dictionary to store characters and their frequencies dictionary = {} # Store the frequency of the characters of the first string to the dictionary for char in string1: if char in dictionary: dictionary[char] += 1 else: dictionary[char] = 1 # Iterate over the characters in the second string for char in string2: # If the character is not in the dictionary, then the string cannot an anagram if char in dictionary: dictionary[char] -= 1 else: return False # Check if all the frequencies have been reduced to 0 for i in dictionary.values(): if i != 0: return False return True if __name__ == '__main__': string1 = \\"Stop\\" string2 = \\"post\\" print(check_anagram(string1, string2))"},{"prompt":"Suggest a completion for a python function to find the square of a given number.","completion":"def square(num): return num**2"},{"prompt":"Generate a class in python to represent a student with properties described below: name: a string age: an integer marks: an array of integers student1 { name: John, age: 18, marks: [80,90,85] }","completion":"class Student: def __init__(self, name, age, marks): self.name = name self.age = age self.marks = marks def get_name(self): return self.name def get_age(self): return self.age def get_marks(self): return self.marks"},{"prompt":"Given a string, convert it to a list of words. String: Hello there, how are you?","completion":"# Python code to convert a string # to a list of words # Split a string by a delimiter def string_split(string): # Split the string into words words = string.split(' ') return words # Driver code string = \\"Hello there, how are you?\\" print(string_split(string))"},{"prompt":"Create a web scraper to extract data from a website using Python. Not applicable","completion":"import requests from bs4 import BeautifulSoup url = 'https://example.com/' response = requests.get(url) soup = BeautifulSoup(response.text, 'html.parser') data = soup.findAll('div', class_='data-element') for datum in data: # extract data and process it print(datum.text)"},{"prompt":"Create a function to encrypt and decrypt a string using a Caesar cipher in Python. Not applicable","completion":"def encrypt(string, shift): encrypted_string = \\"\\" for char in string: if char == ' ': encrypted_string += char else: encrypted_ascii = ord(char) + shift if encrypted_ascii > ord('z'): encrypted_ascii -= 26 encrypted_string += chr(encrypted_ascii) return encrypted_string def decrypt(encrypted_string, shift): decrypted_string = \\"\\" for char in encrypted_string: if char == ' ': decrypted_string += char else: decrypted_ascii = ord(char) - shift if decrypted_ascii < ord('a'): decrypted_ascii += 26 decrypted_string += chr(decrypted_ascii) return decrypted_string"},{"prompt":"Create a python list comprehension to print the square of each odd number in a given list. [1, 2, 3, 4, 5, 6]","completion":"[x**2 for x in [1, 2, 3, 4, 5, 6] if x % 2 != 0]"},{"prompt":"Create a program in Python that extracts all the unique words from a given text. text = Hello world! This is a test to see if my program can extract all the unique words from this text.","completion":"def extract_unique_words(text): # split the string into words words = text.split() # loop for each word in words for i in range(0, len(words)): # compare words for j in range(i+1, len(words)): # if a match is found if (words[i] == words[j]): # delete the word found at jth index words.pop(j) # return the unique words list return words unique_words = extract_unique_words(text) print(unique_words)"},{"prompt":"Design a Python script to remove all numerical elements from a list. [1, 2, 3, a, b, c, 4, 5]","completion":"lst = [1, 2, 3, \\"a\\", \\"b\\", \\"c\\", 4, 5] new_lst = [] for item in lst: if not isinstance(item, int): new_lst.append(item) print(new_lst)"},{"prompt":"Optimize a given Python program to make it faster. def optiFunc(n): result = 0 for i in range(n): result += i return resul","completion":"def optiFunc(n): result = n * (n-1) / 2 return result"},{"prompt":"Create a Python script to classify a given set of emails. The following emails are from different categories: ShippingConfirmation@example.com Subscriber@example.com CommentResponse@example.com","completion":"def email_classification(email): email_type = \\"\\" if 'ShippingConfirmation' in email: email_type = 'Shipping Confirmation' elif 'Subscriber' in email: email_type = 'Subscriber' elif 'CommentResponse' in email: email_type = 'Comment Response' else: email_type = 'Unknown' return email_type emails = [ 'ShippingConfirmation@example.com', 'Subscriber@example.com', 'CommentResponse@example.com' ] for email in emails: print(email_classification(email))"},{"prompt":"Develop a Python program to determine the frequency of characters in an input string. Input string: hello world","completion":"def frequency(string): freq = {} for c in string: if c not in freq: freq[c] = 1 else: freq[c] += 1 return freq string = input('Please enter your string: ') print(frequency(string))"},{"prompt":"Create an algorithm and its corresponding code implementation in Python that counts the number of words in a string. This is a sentence","completion":"def word_count(string): words = string.split() return len(words) print(word_count(\\"This is a sentence\\"))"},{"prompt":"mplement a function in Python to separate words with a given separator. Input String: 'Python is interesting' Separator: ','","completion":"def string_separator(str, separator): # Initialise the output list output = [] # Split the string on the set separator words = str.split() # Iterate through all words in the list for word in words: # Append the word along with a separator output.append(word + separator) # Return the output return ''.join(output)"},{"prompt":"Generate a Python script to sort an array of strings in caseinsensitive order. [Apple, banana, APple]","completion":"def sort_strings(arr): arr_lower = [element.lower() for element in arr] sorted_lower = sorted(arr_lower) sorted_arr = [arr[arr_lower.index(element)] for element in sorted_lower] return sorted_arr arr = [\\"Apple\\", \\"banana\\", \\"APple\\"] sorted_arr = sort_strings(arr) print(sorted_arr) # prints [\\"APple\\", \\"Apple\\", \\"banana\\"]"},{"prompt":"Create a function to generate random numbers within a given range in Python. start=1, end=10","completion":"import random def generate_random_numbers(start, end): return random.randint(start, end) result = generate_random_numbers(1,10) print(result)"},{"prompt":"Create a class in Python that calculates the total and average of 3 numbers.","completion":"class Calculator: def __init__(self, num1, num2, num3): self.num1 = num1 self.num2 = num2 self.num3 = num3 def total(self): return self.num1 + self.num2 + self.num3 def average(self): return self.total() / 3"},{"prompt":"Create a python program to remove duplicate entries in a list and return the unique items. [1, 1, 2, 3, 4, 4]","completion":"def remove_duplicate(list): return list(set(list)) remove_duplicate([1,1,2,3,4,4]) #returns [1, 2, 3, 4]"},{"prompt":"Write a Python code to replace all the occurrences of a specific word in a given text. text = The quick brown fox jumps over the lazy dog word = fox replacement = cat","completion":"text = text.replace(word, replacement) print(text) # Output: The quick brown cat jumps over the lazy dog"},{"prompt":"Write a Python function that takes a list as an argument and returns the second largest element in the list. lst = [1, 14, 8, 5]","completion":"def second_largest(lst): sorted_list = sorted(lst) return sorted_list[-2] result = second_largest(lst) print(result)"},{"prompt":"Create a Python script to build a machine learning model to predict MPG from an auto dataset.","completion":"# Import Libraries import numpy as np import pandas as pd import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression from sklearn.metrics import r2_score # Read in the auto dataset df = pd.read_csv('auto.csv') # Get the features and labels X = df.drop(columns='mpg') y = df['mpg'] # Split into train and test X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) # Create the linear regressor lr = LinearRegression() # Train the model lr.fit(X_train,y_train) # Get the predictions preds = lr.predict(X_test) # Calculate the R2 score r2 = r2_score(y_test, preds)"},{"prompt":"Write a Python program to create a good quality random password.","completion":"import string import random def generate_password(): # Generate a random password password = \\"\\" char_sets = [string.ascii_lowercase, string.ascii_uppercase, string.digits, string.punctuation] char_set_length = len(char_sets) for _ in range(16): char_set_index = random.randint(0, char_set_length - 1) char_set = char_sets[char_set_index] password += random.choice(char_set) # Return the generated password return password"},{"prompt":"Construct a program in Python to prompt the user for their age and display the appropriate greeting.","completion":"name = input(\\"What's your name: \\") age = int(input(\\"How old are you: \\")) if age < 18: print(\\"Hello, \\"+ name + \\", welcome to our website.\\") elif age < 60: print(\\"Greetings, \\"+ name + \\", how can we help you today?\\") else: print(\\"Welcome, \\"+ name + \\", thanks for visiting us.\\")"},{"prompt":"Generate a code in Python to classify the gender of a given name.","completion":"def classify_gender(name): genders = { 'male': ['john', 'peter', 'mark'], 'female': ['alice', 'anna', 'jane'] } for key, names in genders.items(): if name in names: return key return 'unknown'"},{"prompt":"Generate a Python program to identify prime numbers up to a given positive integer.","completion":"def isPrime(num): for i in range(2, num): if num % i == 0: return False return True n = int(input(\\"Enter any positive integer: \\")) print(\\"Prime numbers up to\\", n, \\"are:\\") for i in range(2, n+1): if isPrime(i): print(i, end = \\" \\")"},{"prompt":"Design a web application in Python that reads a web page and counts the total number of words in the page.","completion":"import requests from bs4 import BeautifulSoup import re # Fetch the web page page = requests.get(\\"THE_WEBPAGE_URL\\") # Parse the content of the page soup = BeautifulSoup(page.content, 'html.parser') # Find all visible text in the page text = soup.find_all(text=True) # Remove text inside scripts and style tags for t in text: if t.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']: text.remove(t) # Remove extra spaces text_string = \\" \\".join(text) text_string = re.sub('s+', ' ', text_string) # Count the total number of words word_count = len(text_string.split()) print(\\"Total number of words:\\", word_count)"},{"prompt":"Construct a Python script to normalize a given vector. [2, 3, 4]","completion":"def normalize_vector(v): norm = 0 for x in v: norm += x**2 norm = norm**0.5 for i in range(len(v)): v[i] = v[i] / norm return v result = normalize_vector([2, 3, 4]) print(result) # [0.37139068, 0.55708601, 0.74278135]"},{"prompt":"Given a list of words and a given number n write a Python program to find all words of length n. words = ['cat', 'dog', 'tree', 'house', 'river', 'desk', 'book'] n = 5","completion":"def find_words_of_length_n(words, n): \\"\\"\\" Finds all words of length n. Parameters: words (list): the list of words n (int): the given number Returns: list: list of words of length n \\"\\"\\" result = [] for word in words: if len(word) == n: result.append(word) return result"},{"prompt":"Create a Python function to score the similarity between two strings.","completion":"def score_similarity(str1, str2): n = len(str1) m = len(str2) dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)] for i in range(1, n + 1): for j in range(1, m + 1): if str1[i - 1] == str2[j - 1]: dp[i][j] = dp[i - 1][j - 1] + 1 else: dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) return dp[n][m] / (n + m)"},{"prompt":"Write a Python program to implement a basic calculator, which can sum, subtract, multiply, and divide two numbers. Not applicable","completion":"def calculater(num1, num2, operator): if operator == '+': return num1 + num2 elif operator == '-': return num1 - num2 elif operator == '*': return num1 * num2 elif operator == '/': return num1 / num2 print('Sum:', calculater(3, 4, '+')) print('Subtraction:', calculater(3, 4, '-')) print('Multiplication:', calculater(3, 4, '*')) print('Division:', calculater(3, 4, '/'))"},{"prompt":"Given an array of numbers, write a Python program to calculate the sum of the integers in the array. [5, 2, 8, 4, 23]","completion":"def sum_integer(arr): \\"\\"\\" Args : arr (list): List of integer Returns : int : Sum of integers \\"\\"\\" res = 0 for num in arr: res += num return res sum_integer([5, 2, 8, 4, 23]) # output: 42"},{"prompt":"Create a function to make a pyramid in Python with a given height.","completion":"def pyramid(height): # Dot symbol for each row dots = \\".\\" # loop for printing the pyramid for i in range(height): # insert spaces for j in range(height-i-1): print(\\" \\", end='') for j in range(i+1): # print dots and concatenate print(dots + \\" \\", end='') dots += \\"..\\" # moving to the new line print(\\"r\\")"},{"prompt":"Create a Python script for training a machine learning classifier using the Iris dataset. Not applicable","completion":"import numpy as np from sklearn import datasets from sklearn.model_selection import train_test_split from sklearn.naive_bayes import GaussianNB from sklearn.metrics import accuracy_score # Load the Iris dataset dataset = datasets.load_iris() # Creating a feature matrix X = dataset.data # Creating a target vector y = dataset.target # Splitting data into training and test sets X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state = 0) # Training a Naive Bayes classifier clf = GaussianNB() clf.fit(X_train, y_train) # Making predictions y_pred = clf.predict(X_test) # Checking the accuracy accuracy = accuracy_score(y_test, y_pred) print(accuracy)"},{"prompt":"Write a Python code to create a bar chart of the number of cars in each city. [ ['Atlanta', 1500], ['Boston', 3000], ['Los Angeles', 2500], ['New York', 4000], ]","completion":"import matplotlib.pyplot as plt data = [ ['Atlanta', 1500], ['Boston', 3000], ['Los Angeles', 2500], ['New York', 4000], ] city = [x[0] for x in data] cars = [x[1] for x in data] plt.bar(city, cars) plt.xlabel('City') plt.ylabel('Number of cars') plt.title('Number of cars in each city') plt.show()"},{"prompt":"Construct a neural network in Python to predict the price of Bitcoin for the next 5 days.","completion":"\\"\\"\\" Construct a neural network in Python to predict the price of Bitcoin for the next 5 days \\"\\"\\" import numpy as np #import matplotlib.pyplot as plt import pandas as pd from keras.models import Sequential from keras.layers import Dense from keras.layers import LSTM from sklearn.preprocessing import MinMaxScaler # Load the dataset dataset = pd.read_csv('BTC-USD.csv') # Get the values closing_prices = dataset.iloc[:, [4]].values # Normalize the data scaler = MinMaxScaler(feature_range=(0, 1)) prices_scaled = scaler.fit_transform(closing_prices) # Create the input data for the model X, Y = [], [] for i in range(30, len(prices_scaled)): X.append(prices_scaled[i-30:i, 0]) Y.append(prices_scaled[i, 0]) X, Y = np.array(X), np.array(Y) # Reshape the input X = np.reshape(X, (X.shape[0], X.shape[1], 1)) # Create the model model = Sequential() model.add(LSTM(128, input_shape=(X.shape[1], 1))) model.add(Dense(1)) model.compile(loss='mse', optimizer='adam') # Train the model model.fit(X, Y, epochs=100, batch_size=32) # Prepare the 5-day prediction data prediction_data = prices_scaled[-30:, 0] prediction_data = np.reshape(prediction_data, (1, 30, 1)) # Make the 5-day prediction predictions = model.predict(prediction_data) prediction = scaler.inverse_transform(predictions) print(prediction)"},{"prompt":"Generate a Python program to convert a given number from one base to another.","completion":"def base_conversion(n, from_base, to_base): # convert from base-10 to from_base rems = [] while n > 0: rem = n % from_base rems.append(rem) n //= from_base # convert from from_base to to_base result = 0 for rem in rems[::-1]: result *= from_base result += rem return result"},{"prompt":"What is the best way to sort an array of integers in descending order using Python? [99, 65, 43, 87, 21]","completion":"def sortDesc(arr): arr.sort(reverse=True) return arr arr = [99, 65, 43, 87, 21] print(sortDesc(arr)) // Output: [99, 87, 65, 43, 21]"},{"prompt":"Can you develop a basic web server in Python that serves a webpage when queried?","completion":"from http.server import HTTPServer, BaseHTTPRequestHandler from urllib.parse import urlparse class RequestHandler(BaseHTTPRequestHandler): def do_GET(self): self.send_response(200) self.send_header('Content-Type', 'text/html') self.end_headers() self.wfile.write(b\\"<!DOCTYPE html><html><head> <title>Home Page</title> </head><body> <h1> Welcome to my website! </h1> </body></html>\\") def run(server_class = HTTPServer, handler_class = RequestHandler): server_address = ('', 8000) httpd = server_class(server_address, handler_class) httpd.serve_forever() run()"},{"prompt":"Create a Python program that takes two numbers from user and generates a list of all numbers in between them. 2, 6","completion":"def generateList(start, end): res = [] for num in range(start, end+1): res.append(num) return res start = 2 end = 6 print(generateList(start, end)) # Output: [2, 3, 4, 5, 6]"},{"prompt":"Generate a python code for linear regression.","completion":"from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(X, y)"},{"prompt":"Create an AIassisted web service in Python to predict the likelihood of a customer making his/her next purchase. Not applicable","completion":"import tensorflow as tf import pandas as pd from tensorflow.keras.layers import Input, Embedding, Dense, Flatten from tensorflow.keras.models import Model # Preprocess data customers = pd.read_csv('customers.csv', usecols=['customer_id', 'name', 'purchase_history']) customers['purchase_history'] = customers['purchase_history'].str.split(';') # Create model inputs = Input(shape=(1,)) emb_layer = Embedding(input_dim=customers.shape[0], output_dim=5)(inputs) flatten = Flatten()(emb_layer) dense_1 = Dense(10, activation='relu')(flatten) outputs = Dense(1, activation='sigmoid')(dense_1) model = Model(inputs=inputs, outputs=outputs) model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) # Train model model.fit(x_train, y_train, epochs=50, batch_size=32, validation_data=(x_test, y_test)) # Deploy model in web service api = tf.keras.models.load_model('purchase_prediction.h5')"},{"prompt":"Write a Python program to convert a given list of strings to a dictionary where the keys are the strings and the values are a count of how many times the string appears. ['red','blue','red','green','blue','blue']","completion":"def list_to_dict(string_list): result = {} for string in string_list: if string not in result: result[string] = 1 else: result[string] += 1 return result list_dict = list_to_dict(['red','blue','red','green','blue','blue']) print(list_dict) # {'red': 2, 'blue': 3, 'green': 1}"},{"prompt":"Can you provide a Python program that prints the largest element in the given list? [1, 3, 4, 5, 19, 13, 7]","completion":"def get_largest(nums): max_num = nums[0] for num in nums: if num > max_num: max_num = num return max_num print(get_largest([1, 3, 4, 5, 19, 13, 7]))"},{"prompt":"Use the Paginator library in Python to create a list of items divided into multiple pages. Items: [apple, banana, carrot, date, elderberry, fig, grape, honeydew, iceberg lettuce]","completion":"from paginator import Paginator def page_items(items, page_number): p = Paginator(items, 3) # items per page return p.page(page_number).object_list page_1 = page_items([\\"apple\\", \\"banana\\", \\"carrot\\", \\"date\\", \\"elderberry\\", \\"fig\\", \\"grape\\", \\"honeydew\\", \\"iceberg lettuce\\"], 1) print(page_1) # [\\"apple\\", \\"banana\\", \\"carrot\\"] page_2 = page_items([\\"apple\\", \\"banana\\", \\"carrot\\", \\"date\\", \\"elderberry\\", \\"fig\\", \\"grape\\", \\"honeydew\\", \\"iceberg lettuce\\"], 2) print(page_2) # [\\"date\\", \\"elderberry\\", \\"fig\\"]"},{"prompt":"Edit the following code snippet to ensure it meets the Python PEP 8 coding standards. def exampleFunction(a,b): return a+b","completion":"def example_function(a, b): return a + b"},{"prompt":"Develop a Python function that removes duplicate elements from a given list and returns a list with unique elements. my_list = [1,2,3,3,4,5,5,5,6,7,7]","completion":"def remove_duplicates(my_list): new_list = [] for item in my_list: if item not in new_list: new_list.append(item) return new_list my_list = [1,2,3,3,4,5,5,5,6,7,7] my_list = remove_duplicates(my_list) print(my_list) # [1, 2, 3, 4, 5, 6, 7]"},{"prompt":"Optimize the following code written in Python to remove any redundant or inefficient code. def factorial(n): if n == 0: return 1 else: return n * factorial(n1)","completion":"def factorial(n): if n == 0 or n == 1: return 1 else: return n * factorial(n-1)"},{"prompt":"Summarize the article using Python. Article Text: Einstein once said that âimagination is more important than knowledge.â According to his famous quote, in order to truly move forward and make an impact on the world, one should use creativity and inventiveness to push boundaries.","completion":"def summarize_article(text): sentence_list = text.split(\\". \\") summary = [] for sentence in sentence_list: if \\"imagination\\" in sentence or \\"inventiveness\\" in sentence: summary.append(sentence) return '. '.join(summary) + '.' print(summarize_article(text)) # Output \\"Einstein once said that âimagination is more important than knowledgeâ. According to his famous quote, in order to truly move forward and make an impact on the world, one should use creativity and inventiveness to push boundaries.\\""},{"prompt":"Create a Python script to scrape a website to extract the text from all the webpages.","completion":"import requests from bs4 import BeautifulSoup def scrape_website(url): # sending get request and saving the response as response object r = requests.get(url) # extracting data in json format data = r.text soup = BeautifulSoup(data, 'html.parser') contents = soup.find_all('p') for content in contents: print(content.text) scrape_website(\\"https://example.com\\")"},{"prompt":"Write a Python program to a generate a random 4digit number in which all 4 digits are even.","completion":"import random def generate_random_even_number(): n = 0 while n < 1000 or n > 9999: n = 0 for i in range(4): n += random.randint(0, 8) * (10 ** i) if n % 2 == 0: break return n"},{"prompt":"Python, create a list comprehension to extract the elements which are even in the given list. list = [1, 2, 3, 4, 5, 6, 7, 8, 9]","completion":"even_list = [x for x in list if x%2 == 0]"},{"prompt":"Compose a Python script to generate the Fibonacci sequence up to the given number n.","completion":"def generate_fibonacci_sequence(n): a = 0 b = 1 sequence = [a] while b < n: a, b = b, a + b sequence.append(a) return sequence result = generate_fibonacci_sequence(7) print(result) # [0, 1, 1, 2, 3, 5]"},{"prompt":"Design a linear regression algorithm in Python","completion":"def linear_regression(X,Y): n = len(X) sumx = sum([x**2 for x in X]) sumy = sum([y**2 for y in Y]) sumxy = sum([x*y for x,y in zip(X,Y)]) # calculate slope m = (n*sumxy - sum(X)*sum(Y))/(n*sumx - sum(X)**2) # calculate intercept c = sum(Y)/n - (m*sum(X))/n return m, c"},{"prompt":"Design a Python program to add two large numbers stored in an array. arr1 = [9, 2, 7, 1] arr2 = [1, 5, 9, 9]","completion":"def add_two_arrays(arr1, arr2): # Padd the smaller array with zeros if len(arr1) < len(arr2): for _ in range(len(arr2) - len(arr1)): arr1.insert(0, 0) else: for _ in range(len(arr1) - len(arr2)): arr2.insert(0, 0) # Create result array res = [] # Loop through the two arrays carry = 0 for i in range(len(arr1)): num = arr1[i] + arr2[i] + carry # Check if number is > 10 if num > 9: carry = 1 num = num%10 else: carry = 0 res.append(num) if carry: res.append(1) return res res = add_two_arrays(arr1, arr2) print(res)"},{"prompt":"Write a regular expression in Python to match a pattern of email addresses.","completion":"import re pattern = r'^w+([.-]?w+)*@w+([.-]?w+)*(.w{2,3})+'"},{"prompt":"Generate a Python program to find the mode of the given list. [6, 2, 8, 9, 3, 2, 10]","completion":"from collections import Counter def mode(list): c = Counter(list) freq = c.most_common() if freq[0][1] == freq[1][1]: return \\"No single mode found\\" else: return freq[0][0] list = [6, 2, 8, 9, 3, 2, 10] print(\\"Mode:\\", mode(list))"},{"prompt":"Evaluate the following expression using Python 3: (2*3 6) / (4 + 8).","completion":"result = (2*3 - 6) / (4 + 8) print(result) # - 0.25"},{"prompt":"Generate a python program to delete duplicate elements from the given array. Input: [1, 2, 3, 4, 4, 5, 6, 7, 8, 8]","completion":"def delete_duplicates(array): seen = set() non_duplicates = [] for val in array: if val not in seen: non_duplicates.append(val) seen.add(val) return non_duplicates"},{"prompt":"Write a Python program for finding the root of a given quadratic equation. a = 1, b = 5, c = 4","completion":"def quadratic(a, b, c): # calculate the discriminant d = (b**2) - (4*a*c) # find the two roots root1 = (-b-d**0.5)/(2*a) root2 = (-b+d**0.5)/(2*a) return root1, root2"},{"prompt":"Develop a Python script to extract the first sentence of each paragraph in a given text. The quick brown fox jumps over the lazy dog. The race across the wood was won by the swift horse.","completion":"text = \\"The quick brown fox jumps over the lazy dog. The race across the wood was won by the swift horse.\\" words = text.split(\\".\\") first_sentences = [] for sentence in words: first_sentences.append(sentence.split(\\" \\")[0]) print(first_sentences)"},{"prompt":"Generate a graphical representation of a function using Python. f(x) = 2x + 3","completion":"import matplotlib.pyplot as plt x = range(-10, 11) y = [2 * x_coord + 3 for x_coord in x] plt.plot(x, y) plt.title('Graph of the function: f(x) = 2x + 3') plt.xlabel('x') plt.ylabel('2x + 3') plt.show()"},{"prompt":"Write a script in Python that prints all prime numbers between two given numbers. Start Number = 10 End Number = 20","completion":"start = 10 end = 20 for num in range(start, end + 1): # all prime numbers are greater than 1 if num > 1: for i in range(2, num): if (num % i) == 0: break else: print(num)"},{"prompt":"Create a Python function that prints a string in reverse order. GPT3","completion":"def reverse_string(string): return string[::-1] print(reverse_string(\\"GPT-3\\"))"},{"prompt":"Write a function to implement binary search in Python.","completion":"def binary_search(sorted_list, item): low = 0 high = len(sorted_list) - 1 while low <= high: mid = (low + high) // 2 guess = sorted_list[mid] if guess == item: return mid if guess > item: high = mid - 1 else: low = mid + 1 return None"},{"prompt":"Write a Python program that can detect faces from a live camera stream. Not applicable","completion":"import cv2 cap = cv2.VideoCapture(0) cascPath = \\"haarcascade_frontalface_default.xml\\" faceCascade = cv2.CascadeClassifier(cascPath) while True: ret, frame = cap.read() gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) faces = faceCascade.detectMultiScale( gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30) ) for (x, y, w, h) in faces: cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2) cv2.imshow('Video', frame) if cv2.waitKey(1) & 0xFF == ord('q'): break cap.release() cv2.destroyAllWindows()"},{"prompt":"Create a Python module that calculates the perimeter of a circle.","completion":"import math def calculate_circle_perimeter(radius): return 2 * math.pi * radius"},{"prompt":"Create a Python script to find the most frequently occurring element in an array. [5, 4, 6, 7, 4, 5, 12, 8]","completion":"def most_frequent(arr): arr.sort() max_count = 1 max_item = arr[0] curr_count = 1 for i in range(1, len(arr)): if arr[i] == arr[i - 1]: curr_count += 1 if curr_count > max_count: max_count = curr_count max_item = arr[i] else: curr_count = 1 return max_item"},{"prompt":"Create a neural network in Python for recognizing handwritten digits.","completion":"# import the necessary packages from keras.models import Sequential from keras.layers.convolutional import Conv2D from keras.layers.convolutional import MaxPooling2D from keras.layers.core import Activation from keras.layers.core import Flatten from keras.layers.core import Dense # Construct the model model = Sequential() model.add(Conv2D(20, (5, 5), padding=\\"same\\", input_shape=(28, 28, 1))) model.add(Activation(\\"relu\\")) model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2))) model.add(Flatten()) model.add(Dense(units=500)) # Number of nodes in the hidden layer model.add(Activation(\\"relu\\")) model.add(Dense(units=10)) # Output layer with 10 classes model.add(Activation(\\"softmax\\")) # Compile the model model.compile(loss=\\"categorical_crossentropy\\", optimizer=\\"adam\\", metrics=[\\"accuracy\\"])"},{"prompt":"Write binary search tree code (in Python) for inserting elements into a BST. Not applicable","completion":"class Node: def __init__(self, data): self.data = data self.left = None self.right = None # Function to insert a node def insert(node, data): if node is None: node = Node(data) elif data < node.data: node.left = insert(node.left, data) else: node.right = insert(node.right, data) return node if __name__ == '__main__': root = None root = insert(root, 8) root = insert(root, 3) root = insert(root, 10) root = insert(root, 1) root = insert(root, 6) root = insert(root, 4) root = insert(root, 7) root = insert(root, 14) root = insert(root, 13)"},{"prompt":"Design a Python script to remove the given word from a sentence. Sentence: He is working on it Word: working","completion":"sentence = \\"He is working on it\\" word = \\"working\\" sentence = sentence.replace(word, \\"\\") print(sentence)"},{"prompt":"mplement a counter using a dictionary in Python.","completion":"def counter(text): \\"\\"\\" Function to count the occurrence of each word in the text using a dictionary data structure. Parameters: text (str): The given text to count. Returns: dict: A dictionary of words with their counts. \\"\\"\\" result = {} # Create empty dictionary for word in text.split(): if word in result: result[word] += 1 else: result[word] = 1 return result"},{"prompt":"Generate a Python program to read a dataset into memory.","completion":"import pandas as pd def read_data(filename): return pd.read_csv(filename)"},{"prompt":"Construct a program to create a class in Python which will store the user data.","completion":"class User: def __init__(self, name, age, email): self.name = name self.age = age self.email = email def display(self): print(f\\"\\"\\" Name: {self.name} Age: {self.age} Email: {self.email} \\"\\"\\")"},{"prompt":"Write an optimal code to calculate the sum over a range of numbers <noinput>","completion":"# Python 3 program to find sum over a range # A recursive function to find the sum of given range def rangeSum(start, end): # If range consists of only one number if (start == end): return start return start + rangeSum(start + 1 , end) # Driver code start = 1 end = 5 print(rangeSum(start, end))"},{"prompt":"Write a Python function for calculating factorials. 4","completion":"def factorial(n): if n == 0: return 1 else: return n * factorial(n-1) number = 4 result = factorial(number) print(result)"},{"prompt":"Create an AI chatbot that can answer basic student questions, such as âWhat is the deadline for the assignment?â Not applicable","completion":"import nltk import numpy as np import random import string # to process standard python strings # Read in the data f = open('student_questions.txt','r',errors = 'ignore') data = f.read() conversationsPoints = data.lower().split(\\" \\") # Create a dictionary that maps each word to its occurrence word2count = {} for conversation in conversationsPoints: for word in conversation.split(): if word not in word2count.keys(): word2count[word] = 1 else: word2count[word] += 1 # Tokenize the words words = sorted(list(word2count.keys())) # Create the token_to_int dictionary token2int = {} int2token = {} for i, word in enumerate(words): token2int[word] = i int2token[i] = word # Create input and output datasets X = [] Y = [] for conversation in conversationsPoints: sentence = conversation.lower().split() for i in range(1,len(sentence)): x = token2int[sentence[i-1]] y = token2int[sentence[i]] X.append(x) Y.append(y) # One hot encode our input and output data X_one_hot = np.zeros((len(X), len(words)), dtype=np.int32) Y_one_hot = np.zeros((len(Y), len(words)), dtype=np.int32) for i, x in enumerate(X): X_one_hot[i][x] = 1 for i, y in enumerate(Y): Y_one_hot[i][y] = 1 # Create and train the chatbot model model = MyChatbot() model.fit(X_one_hot, Y_one_hot, epochs=500, batch_size=32) # Define bot response function def bot_response(s): sentence = [word.lower() for word in s.split()] sentence = [token2int[word] for word in sentence] prediction = model.predict_single(sentence) int2word[prediction] return int2word[prediction] # Run the app while True: print('User: ', end='') s = input() response = bot_response(s) print('Chatbot: ' + response)"},{"prompt":"Reformat a collection of list into a dictionary in Python. [['a', 1], ['b', 2], ['c', 3], ['d', 4]]","completion":"data = [['a', 1], ['b', 2], ['c', 3], ['d', 4]] my_dict = dict(data) print(my_dict) # {'a': 1, 'b': 2, 'c': 3, 'd': 4}"},{"prompt":"Write a python program to convert an integer to its binary form.","completion":"def integer_to_binary(num): if num == 0: return 0 elif num < 0: num += 2**32 binary = '' while num > 0: binary = str(num%2) + binary num //= 2 return binary"},{"prompt":"Create a Python method that takes in an array of strings and returns a string that includes all the strings in the array combined into a single string. [This, is, a, sentence]","completion":"def combine_strings(strings): return ' '.join(strings)"},{"prompt":"Create a class in Python that represents a given animal object. C","completion":"class Cat: def __init__(self): self.name = \\"\\" self.colour = \\"\\" self.age = 0 self.breed = \\"\\" def meow(self): print(self.name, \\"says meow!\\")"},{"prompt":"Generate a Python function that takes in two arrays and returns a list of the elements that are present in both arrays.","completion":"def intersection(list1, list2): return [value for value in list1 if value in list2] list1 = [1, 2, 3, 4] list2 = [2, 4, 6, 7] print(intersection(list1, list2)) # [2, 4]"},{"prompt":"Cut at current position in a string by 1 letter in Python. mystring = This is my string","completion":"mystring = mystring[:-1]"},{"prompt":"Create a Python program that prints the following numbers in a comma seperated list. 1, 8, 10, 15, 12","completion":"print(\\", \\".join([str(x) for x in [1, 8, 10, 15, 12]]))"},{"prompt":"Design a python code to convert a given sentence to camelCase","completion":"def toCamelCase(s): s = s.split(' ') return ''.join(x.title() for x in s) s = \\"this is some random text\\" print(toCamelCase(s))"},{"prompt":"Write a Python program that takes two lists as input and merges the values from both these lists into the third list. list1 = [1, 2, 3, 4, 5] list2 = [6, 7, 8, 9, 0]","completion":"list3 = [] list3.extend(list1) list3.extend(list2) print(list3)"},{"prompt":"Generate a function using Python that takes two numbers as input and returns their sum. Not applicable","completion":"def add_numbers(a, b): return a + b"},{"prompt":"Create a basic Python program to perform basic linear algebra operations. The program should take two matrices as input and some operation and return the result as a matrix. Input matrices: [[1, 2], [3, 4]], [[4, 3], [2, 1]], and operation: Mulitply","completion":"def matrix_mult(mat1, mat2): res = [[0, 0], [0, 0]] for i in range(len(mat1)): for j in range(len(mat2[0])): for k in range(len(mat2)): res[i][j] += mat1[i][k] * mat2[k][j] return res A = [[1, 2], [3, 4]] B = [[4, 3], [2, 1]] print(matrix_mult(A, B)) # Output: [[8, 5], [20, 13]]"},{"prompt":"Create a Python function that processes a string and returns the string in lowercase. String to be modified: MyString","completion":"def process_string(string): return string.lower() process_string(\\"MyString\\") # returns \\"mystring\\""},{"prompt":"Generate a Python program to initialize a third matrix given two existing matrices c and d. c = [[7, 8], [6, 3]] d = [[6, 7], [1, 5]]","completion":"def initialize_matrix(c, d): rows = len(c) cols = len(c[0]) matrix = [] for i in range(rows): row = [] for j in range(cols): row.append(c[i][j] + d[i][j]) matrix.append(row) return matrix"},{"prompt":"Estimate the power demand of a computer system using the given time and CPU utilization information using Python. Utilization = 10% Operating Time = 10 hours Power Consumption = 100 W","completion":"def calculatePowerDemand(util, time, power): return util * time * power PowerDemand = calculatePowerDemand(0.1, 10, 100) print(PowerDemand)"},{"prompt":"Generate a python program which finds the most frequent word in a sentence. This is a sentence with many words.","completion":"def freq_word(sentence): words = sentence.split() # make a dictionary to count the occurrance of each word d = {} for word in words: # if the word is already in the dictionary, increment its count if word in d.keys(): d[word] += 1 # else add the word in the dictionary else: d[word] = 1 # set the first most_freq to the first word in the sentence most_freq = words[0] # loop trough the words for word in words: # if we find a word with higher frequency, set most_freq to that word if d[word] > d[most_freq]: most_freq = word return most_freq"},{"prompt":"What is a Python list?","completion":"A Python list is an ordered collection of objects, stored in memory and indexed by number that can contain items of different types such as numbers, strings, and other lists."},{"prompt":"Generate a Python class for a Person that has methods and attributes to work with names and ages.","completion":"class Person: def __init__(self, name, age): self.name = name self.age = age def get_name(self): return self.name def get_age(self): return self.age def set_name(self, name): self.name = name def set_age(self, age): self.age = age"}]`),j={name:"App",components:{PoemCard:E},data(){return{searchQuery:"",visibleCount:4,poemsData:A,isLoading:!1}},computed:{filteredPoems(){const i=this.searchQuery.trim().toLowerCase();return i?this.poemsData.filter(e=>e.prompt&&e.prompt.toLowerCase().includes(i)||e.completion&&e.completion.toLowerCase().includes(i)):this.poemsData},displayedPoems(){return this.searchQuery.trim()?this.filteredPoems:this.filteredPoems.slice(0,this.visibleCount)},hasMorePoems(){return!this.searchQuery.trim()&&this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(i=>setTimeout(i,1e3)),this.visibleCount+=4,this.isLoading=!1}}},I={class:"search-container"},q={class:"card-container"},D={key:0,class:"empty-state"},L=["disabled"],F={key:0},R={key:1};function z(i,e,l,u,a,o){const f=_("PoemCard");return r(),n("section",null,[e[4]||(e[4]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"ð¤prompts chatð§ ")])],-1)),t("div",I,[e[3]||(e[3]=t("span",{class:"search-icon"},"ð",-1)),g(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=s=>a.searchQuery=s),placeholder:"Search..."},null,512),[[y,a.searchQuery]]),a.searchQuery?(r(),n("button",{key:0,class:"clear-search",onClick:e[1]||(e[1]=s=>a.searchQuery="")}," â ")):p("",!0)]),t("div",q,[(r(!0),n(b,null,w(o.displayedPoems,(s,h)=>(r(),v(f,{key:h,poem:s},null,8,["poem"]))),128)),o.displayedPoems.length===0?(r(),n("div",D,' No results found for "'+m(a.searchQuery)+'". ',1)):p("",!0)]),o.hasMorePoems?(r(),n("button",{key:0,class:"load-more-button",disabled:a.isLoading,onClick:e[2]||(e[2]=(...s)=>o.loadMore&&o.loadMore(...s))},[a.isLoading?(r(),n("span",R,"Loading...")):(r(),n("span",F,"See more"))],8,L)):p("",!0)])}const O=c(j,[["render",z],["__scopeId","data-v-b30e04d6"]]),B=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"quotes/2.md","filePath":"quotes/2.md"}'),M={name:"quotes/2.md"},W=Object.assign(M,{setup(i){return(e,l)=>(r(),n("div",null,[x(O)]))}});export{B as __pageData,W as default};
